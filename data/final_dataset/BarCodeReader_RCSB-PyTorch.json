{"home.repos.pwc.inspect_result.BarCodeReader_RCSB-PyTorch.None.main.main": [[12, 39], ["option.get_option", "torch.manual_seed", "importlib.import_module", "utils.LogWritter", "print", "utils.LogWritter.update_txt", "tester.Tester", "glob.glob", "print", "tester.Tester.evaluate", "print", "print", "solver.Solver", "solver.Solver.fit", "option.get_option.model.lower", "json.dumps", "len", "vars", "option.get_option.test_dataset.split"], "function", ["home.repos.pwc.inspect_result.BarCodeReader_RCSB-PyTorch.None.option.get_option", "home.repos.pwc.inspect_result.BarCodeReader_RCSB-PyTorch.None.utils.LogWritter.update_txt", "home.repos.pwc.inspect_result.BarCodeReader_RCSB-PyTorch.None.tester.Tester.evaluate", "home.repos.pwc.inspect_result.BarCodeReader_RCSB-PyTorch.None.solver.Solver.fit"], ["def", "main", "(", ")", ":", "\n", "    ", "opt", "=", "get_option", "(", ")", "\n", "torch", ".", "manual_seed", "(", "opt", ".", "seed", ")", "\n", "\n", "module", "=", "importlib", ".", "import_module", "(", "\"model.{}\"", ".", "format", "(", "opt", ".", "model", ".", "lower", "(", ")", ")", ")", "\n", "logger", "=", "LogWritter", "(", "opt", ")", "\n", "\n", "if", "not", "opt", ".", "test_only", ":", "\n", "        ", "msg", "=", "json", ".", "dumps", "(", "vars", "(", "opt", ")", ",", "indent", "=", "4", ")", "+", "'\\n'", "\n", "print", "(", "msg", ")", "\n", "logger", ".", "update_txt", "(", "msg", ",", "mode", "=", "'w'", ")", "\n", "\n", "", "if", "opt", ".", "test_only", ":", "\n", "        ", "tester", "=", "Tester", "(", "module", ",", "opt", ")", "\n", "ckpt", "=", "glob", ".", "glob", "(", "'{}/{}'", ".", "format", "(", "opt", ".", "ckpt_root", ",", "opt", ".", "pretrain", ")", ")", "\n", "assert", "len", "(", "ckpt", ")", "!=", "0", ",", "\"cannot find checkpoint {} in {}\"", ".", "format", "(", "opt", ".", "pretrain", ",", "opt", ".", "ckpt_root", ")", "\n", "print", "(", "\"Evaluate {} (loaded from {}) on {} dataset\"", ".", "format", "(", "opt", ".", "model", ",", "\n", "ckpt", "[", "0", "]", ",", "\n", "opt", ".", "test_dataset", ".", "split", "(", "'_'", ")", "[", "1", "]", ")", ")", "\n", "\n", "result", "=", "tester", ".", "evaluate", "(", "path", "=", "ckpt", "[", "0", "]", ")", "\n", "msg", "=", "\"ckpt:{} MAE: {:.4f}\\n\"", ".", "format", "(", "ckpt", "[", "0", "]", ",", "result", ")", "\n", "print", "(", "msg", ")", "\n", "print", "(", "'done testing'", ")", "\n", "", "else", ":", "\n", "        ", "solver", "=", "Solver", "(", "module", ",", "opt", ")", "\n", "solver", ".", "fit", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BarCodeReader_RCSB-PyTorch.None.augments.Augment.__init__": [[9, 15], ["torchvision.transforms.Normalize"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "        ", "self", ".", "opt", "=", "opt", "\n", "self", ".", "psize", "=", "self", ".", "opt", ".", "patch_size", "\n", "self", ".", "size", "=", "(", "self", ".", "psize", ",", "self", ".", "psize", ")", "\n", "self", ".", "norm", "=", "transforms", ".", "Normalize", "(", "mean", "=", "(", "0.485", ",", "0.458", ",", "0.407", ")", ",", "\n", "std", "=", "(", "0.229", ",", "0.224", ",", "0.225", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BarCodeReader_RCSB-PyTorch.None.augments.Augment.norm": [[16, 18], ["augments.Augment.norm"], "methods", ["home.repos.pwc.inspect_result.BarCodeReader_RCSB-PyTorch.None.augments.Augment.norm"], ["", "def", "norm", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "norm", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BarCodeReader_RCSB-PyTorch.None.augments.Augment.to_tensor": [[19, 22], ["torch.from_numpy().float", "torch.from_numpy"], "methods", ["None"], ["", "def", "to_tensor", "(", "self", ",", "x", ")", ":", "\n", "        ", "tensor", "=", "torch", ".", "from_numpy", "(", "x", ")", ".", "float", "(", ")", "\n", "return", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.BarCodeReader_RCSB-PyTorch.None.augments.Augment.resize": [[23, 27], ["cv2.resize", "cv2.resize.copy"], "methods", ["home.repos.pwc.inspect_result.BarCodeReader_RCSB-PyTorch.None.augments.Augment.resize"], ["", "def", "resize", "(", "self", ",", "IMG", ")", ":", "\n", "        ", "resize_IMG", "=", "cv2", ".", "resize", "(", "IMG", ",", "(", "self", ".", "psize", ",", "self", ".", "psize", ")", ",", "interpolation", "=", "cv2", ".", "INTER_LINEAR", ")", "\n", "\n", "return", "resize_IMG", ".", "copy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BarCodeReader_RCSB-PyTorch.None.augments.Augment.crop": [[28, 45], ["random.random", "random.randrange", "random.randrange", "cv2.resize", "cv2.resize", "cv2.resize.copy", "cv2.resize.copy", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.BarCodeReader_RCSB-PyTorch.None.augments.Augment.resize", "home.repos.pwc.inspect_result.BarCodeReader_RCSB-PyTorch.None.augments.Augment.resize"], ["", "def", "crop", "(", "self", ",", "MASK", ",", "IMG", ")", ":", "\n", "\n", "        ", "dice", "=", "random", ".", "random", "(", ")", "\n", "h", ",", "w", "=", "IMG", ".", "shape", "[", ":", "-", "1", "]", "\n", "\n", "if", "dice", "<", ".1", "and", "w", ">", "self", ".", "psize", "and", "h", ">", "self", ".", "psize", ":", "\n", "            ", "new_h", "=", "random", ".", "randrange", "(", "0", ",", "h", "-", "self", ".", "psize", ")", "\n", "new_w", "=", "random", ".", "randrange", "(", "0", ",", "w", "-", "self", ".", "psize", ")", "\n", "\n", "crop_MASK", "=", "MASK", "[", "new_h", ":", "new_h", "+", "self", ".", "psize", ",", "new_w", ":", "new_w", "+", "self", ".", "psize", "]", "\n", "crop_IMG", "=", "IMG", "[", "new_h", ":", "new_h", "+", "self", ".", "psize", ",", "new_w", ":", "new_w", "+", "self", ".", "psize", ",", ":", "]", "\n", "", "else", ":", "\n", "            ", "crop_IMG", "=", "cv2", ".", "resize", "(", "IMG", ",", "(", "self", ".", "psize", ",", "self", ".", "psize", ")", ",", "interpolation", "=", "cv2", ".", "INTER_LINEAR", ")", "\n", "crop_MASK", "=", "cv2", ".", "resize", "(", "MASK", ",", "(", "self", ".", "psize", ",", "self", ".", "psize", ")", ",", "interpolation", "=", "cv2", ".", "INTER_LINEAR", ")", "\n", "crop_MASK", "=", "(", "np", ".", "array", "(", "crop_MASK", ")", ">", "127", ")", ".", "astype", "(", "np", ".", "float64", ")", "\n", "\n", "", "return", "crop_MASK", ".", "copy", "(", ")", ",", "crop_IMG", ".", "copy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BarCodeReader_RCSB-PyTorch.None.augments.Augment.gen_ctr": [[47, 52], ["numpy.ones", "cv2.dilate", "cv2.erode"], "methods", ["None"], ["", "def", "gen_ctr", "(", "self", ",", "IMG", ",", "kernel_size", "=", "5", ")", ":", "\n", "        ", "kernel", "=", "np", ".", "ones", "(", "(", "kernel_size", ",", "kernel_size", ")", ")", "\n", "C", "=", "cv2", ".", "dilate", "(", "IMG", ",", "kernel", ")", "-", "cv2", ".", "erode", "(", "IMG", ",", "kernel", ")", "\n", "\n", "return", "C", "\n", "\n"]], "home.repos.pwc.inspect_result.BarCodeReader_RCSB-PyTorch.None.augments.Augment.flip_and_rotate": [[54, 64], ["random.random", "random.random", "MASK.copy", "IMG.copy", "MASK.transpose", "IMG.transpose"], "methods", ["None"], ["", "def", "flip_and_rotate", "(", "self", ",", "MASK", ",", "IMG", ")", ":", "\n", "        ", "hflip", "=", "random", ".", "random", "(", ")", "<", "0.5", "\n", "rot90", "=", "random", ".", "random", "(", ")", "<", "0.5", "\n", "\n", "if", "hflip", ":", "\n", "            ", "MASK", ",", "IMG", "=", "MASK", "[", ":", ",", ":", ":", "-", "1", "]", ",", "IMG", "[", ":", ",", ":", ":", "-", "1", ",", ":", "]", "\n", "", "if", "rot90", ":", "\n", "            ", "MASK", ",", "IMG", "=", "MASK", ".", "transpose", "(", "1", ",", "0", ")", ",", "IMG", ".", "transpose", "(", "1", ",", "0", ",", "2", ")", "\n", "\n", "", "return", "MASK", ".", "copy", "(", ")", ",", "IMG", ".", "copy", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.BarCodeReader_RCSB-PyTorch.None.solver.Solver.__init__": [[12, 40], ["utils.LogWritter", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "module.Net", "solver.Solver.net.to", "print", "solver.Solver.logger.update_txt", "loss_fn.ConfidentLoss", "solver.Solver.net.named_parameters", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "data.generate_loader", "data.generate_loader", "sum", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "map", "base.append", "head.append", "solver.Solver.net.parameters", "x.numel"], "methods", ["home.repos.pwc.inspect_result.BarCodeReader_RCSB-PyTorch.None.utils.LogWritter.update_txt", "home.repos.pwc.inspect_result.BarCodeReader_RCSB-PyTorch.data.__init__.generate_loader", "home.repos.pwc.inspect_result.BarCodeReader_RCSB-PyTorch.data.__init__.generate_loader"], ["    ", "def", "__init__", "(", "self", ",", "module", ",", "opt", ")", ":", "\n", "        ", "self", ".", "opt", "=", "opt", "\n", "self", ".", "logger", "=", "LogWritter", "(", "opt", ")", "\n", "\n", "self", ".", "dev", "=", "torch", ".", "device", "(", "\"cuda:{}\"", ".", "format", "(", "opt", ".", "GPU_ID", ")", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "\n", "self", ".", "net", "=", "module", ".", "Net", "(", "opt", ")", "\n", "self", ".", "net", "=", "self", ".", "net", ".", "to", "(", "self", ".", "dev", ")", "\n", "\n", "msg", "=", "\"# params:{}\\n\"", ".", "format", "(", "sum", "(", "map", "(", "lambda", "x", ":", "x", ".", "numel", "(", ")", ",", "self", ".", "net", ".", "parameters", "(", ")", ")", ")", ")", "\n", "print", "(", "msg", ")", "\n", "self", ".", "logger", ".", "update_txt", "(", "msg", "=", "msg", ")", "\n", "\n", "self", ".", "loss_fn", "=", "ConfidentLoss", "(", "lmbd", "=", "opt", ".", "lmbda", ")", "\n", "\n", "# gather parameters", "\n", "base", ",", "head", "=", "[", "]", ",", "[", "]", "\n", "for", "name", ",", "param", "in", "self", ".", "net", ".", "named_parameters", "(", ")", ":", "\n", "            ", "if", "\"backbone\"", "in", "name", ":", "\n", "                ", "base", ".", "append", "(", "param", ")", "\n", "", "else", ":", "\n", "                ", "head", ".", "append", "(", "param", ")", "\n", "", "", "assert", "base", "!=", "[", "]", ",", "'backbone is empty'", "\n", "self", ".", "optim", "=", "torch", ".", "optim", ".", "Adam", "(", "[", "{", "'params'", ":", "base", "}", ",", "{", "'params'", ":", "head", "}", "]", ",", "opt", ".", "lr", ",", "betas", "=", "(", "0.9", ",", "0.999", ")", ",", "eps", "=", "1e-8", ")", "\n", "\n", "self", ".", "train_loader", "=", "generate_loader", "(", "\"train\"", ",", "opt", ")", "\n", "self", ".", "eval_loader", "=", "generate_loader", "(", "\"test\"", ",", "opt", ")", "\n", "\n", "self", ".", "best_mae", ",", "self", ".", "best_step", "=", "1", ",", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.BarCodeReader_RCSB-PyTorch.None.solver.Solver.fit": [[42, 72], ["range", "print", "enumerate", "solver.Solver.summary_and_save", "tqdm.tqdm.tqdm", "solver.Solver.optim.zero_grad", "inputs[].to", "inputs[].to", "inputs[].to", "solver.Solver.net", "solver.Solver.loss_fn.get_value", "solver.Solver.backward", "solver.Solver.optim.step", "torch.nn.utils.clip_grad_value_", "torch.nn.utils.clip_grad_value_", "torch.nn.utils.clip_grad_value_", "torch.nn.utils.clip_grad_value_", "torch.nn.utils.clip_grad_value_", "torch.nn.utils.clip_grad_value_", "torch.nn.utils.clip_grad_value_", "torch.nn.utils.clip_grad_value_", "torch.nn.utils.clip_grad_value_", "solver.Solver.net.parameters"], "methods", ["home.repos.pwc.inspect_result.BarCodeReader_RCSB-PyTorch.None.solver.Solver.summary_and_save", "home.repos.pwc.inspect_result.BarCodeReader_RCSB-PyTorch.None.loss_fn.ConfidentLoss.get_value"], ["", "def", "fit", "(", "self", ")", ":", "\n", "        ", "opt", "=", "self", ".", "opt", "\n", "\n", "for", "step", "in", "range", "(", "self", ".", "opt", ".", "max_epoch", ")", ":", "\n", "# assign different learning rate", "\n", "            ", "power", "=", "(", "step", "+", "1", ")", "//", "opt", ".", "decay_step", "\n", "self", ".", "optim", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", "=", "opt", ".", "lr", "*", "0.1", "*", "(", "0.5", ")", "**", "power", "# for base", "\n", "self", ".", "optim", ".", "param_groups", "[", "1", "]", "[", "'lr'", "]", "=", "opt", ".", "lr", "*", "(", "0.5", ")", "**", "power", "# for head", "\n", "\n", "print", "(", "'LR base: {}, LR head: {}'", ".", "format", "(", "self", ".", "optim", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", ",", "\n", "self", ".", "optim", ".", "param_groups", "[", "1", "]", "[", "'lr'", "]", ")", ")", "\n", "for", "i", ",", "inputs", "in", "enumerate", "(", "tqdm", "(", "self", ".", "train_loader", ")", ")", ":", "\n", "\n", "                ", "self", ".", "optim", ".", "zero_grad", "(", ")", "\n", "\n", "MASK", "=", "inputs", "[", "0", "]", ".", "to", "(", "self", ".", "dev", ")", "\n", "IMG", "=", "inputs", "[", "1", "]", ".", "to", "(", "self", ".", "dev", ")", "\n", "CTR", "=", "inputs", "[", "2", "]", ".", "to", "(", "self", ".", "dev", ")", "\n", "\n", "pred", "=", "self", ".", "net", "(", "IMG", ")", "\n", "loss", "=", "self", ".", "loss_fn", ".", "get_value", "(", "pred", ",", "MASK", ",", "CTR", ")", "\n", "\n", "loss", ".", "backward", "(", ")", "\n", "\n", "if", "opt", ".", "gclip", ">", "0", ":", "\n", "                    ", "torch", ".", "nn", ".", "utils", ".", "clip_grad_value_", "(", "self", ".", "net", ".", "parameters", "(", ")", ",", "opt", ".", "gclip", ")", "\n", "\n", "", "self", ".", "optim", ".", "step", "(", ")", "\n", "# eval", "\n", "", "self", ".", "summary_and_save", "(", "step", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BarCodeReader_RCSB-PyTorch.None.solver.Solver.summary_and_save": [[74, 90], ["print", "solver.Solver.evaluate", "print", "solver.Solver.logger.update_txt", "solver.Solver.save", "solver.Solver.save"], "methods", ["home.repos.pwc.inspect_result.BarCodeReader_RCSB-PyTorch.None.tester.Tester.evaluate", "home.repos.pwc.inspect_result.BarCodeReader_RCSB-PyTorch.None.utils.LogWritter.update_txt", "home.repos.pwc.inspect_result.BarCodeReader_RCSB-PyTorch.None.solver.Solver.save", "home.repos.pwc.inspect_result.BarCodeReader_RCSB-PyTorch.None.solver.Solver.save"], ["", "", "def", "summary_and_save", "(", "self", ",", "step", ")", ":", "\n", "        ", "print", "(", "'evaluate...'", ")", "\n", "mae", "=", "self", ".", "evaluate", "(", ")", "\n", "\n", "if", "mae", "<", "self", ".", "best_mae", ":", "\n", "            ", "self", ".", "best_mae", ",", "self", ".", "best_step", "=", "mae", ",", "step", "+", "1", "\n", "self", ".", "save", "(", "step", ")", "\n", "", "else", ":", "\n", "            ", "if", "self", ".", "opt", ".", "save_every_ckpt", ":", "\n", "                ", "self", ".", "save", "(", "step", ")", "\n", "\n", "", "", "msg", "=", "\"[{}/{}] {:.6f} (Best: {:.6f} @ {}K step)\\n\"", ".", "format", "(", "step", "+", "1", ",", "self", ".", "opt", ".", "max_epoch", ",", "\n", "mae", ",", "self", ".", "best_mae", ",", "\n", "self", ".", "best_step", ")", "\n", "print", "(", "msg", ")", "\n", "self", ".", "logger", ".", "update_txt", "(", "msg", "=", "msg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BarCodeReader_RCSB-PyTorch.None.solver.Solver.evaluate": [[91, 129], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "solver.Solver.net.eval", "enumerate", "solver.Solver.net.train", "os.path.join", "os.makedirs", "tqdm.tqdm.tqdm", "inputs[].to", "inputs[].to", "solver.Solver.net", "MASK.squeeze().detach().cpu().numpy.squeeze().detach().cpu().numpy.squeeze().detach().cpu().numpy", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.sigmoid().squeeze().detach().cpu().numpy", "torch.sigmoid().squeeze().detach().cpu().numpy", "torch.sigmoid().squeeze().detach().cpu().numpy", "torch.sigmoid().squeeze().detach().cpu().numpy", "torch.sigmoid().squeeze().detach().cpu().numpy", "torch.sigmoid().squeeze().detach().cpu().numpy", "torch.sigmoid().squeeze().detach().cpu().numpy", "torch.sigmoid().squeeze().detach().cpu().numpy", "torch.sigmoid().squeeze().detach().cpu().numpy", "torch.sigmoid().squeeze().detach().cpu().numpy", "torch.sigmoid().squeeze().detach().cpu().numpy", "torch.sigmoid().squeeze().detach().cpu().numpy", "torch.sigmoid().squeeze().detach().cpu().numpy", "torch.sigmoid().squeeze().detach().cpu().numpy", "torch.sigmoid().squeeze().detach().cpu().numpy", "torch.sigmoid().squeeze().detach().cpu().numpy", "torch.sigmoid().squeeze().detach().cpu().numpy", "torch.sigmoid().squeeze().detach().cpu().numpy", "utils.calculate_mae", "len", "os.path.join", "os.path.join", "skimage.imsave", "skimage.imsave", "MASK.squeeze().detach().cpu().numpy.squeeze().detach().cpu().numpy.squeeze().detach().cpu", "torch.sigmoid().squeeze().detach().cpu", "torch.sigmoid().squeeze().detach().cpu", "torch.sigmoid().squeeze().detach().cpu", "torch.sigmoid().squeeze().detach().cpu", "torch.sigmoid().squeeze().detach().cpu", "torch.sigmoid().squeeze().detach().cpu", "torch.sigmoid().squeeze().detach().cpu", "torch.sigmoid().squeeze().detach().cpu", "torch.sigmoid().squeeze().detach().cpu", "torch.sigmoid().squeeze().detach().cpu", "torch.sigmoid().squeeze().detach().cpu", "torch.sigmoid().squeeze().detach().cpu", "torch.sigmoid().squeeze().detach().cpu", "torch.sigmoid().squeeze().detach().cpu", "torch.sigmoid().squeeze().detach().cpu", "torch.sigmoid().squeeze().detach().cpu", "torch.sigmoid().squeeze().detach().cpu", "torch.sigmoid().squeeze().detach().cpu", "MASK.squeeze().detach().cpu().numpy.squeeze().detach().cpu().numpy.squeeze().detach", "torch.sigmoid().squeeze().detach", "torch.sigmoid().squeeze().detach", "torch.sigmoid().squeeze().detach", "torch.sigmoid().squeeze().detach", "torch.sigmoid().squeeze().detach", "torch.sigmoid().squeeze().detach", "torch.sigmoid().squeeze().detach", "torch.sigmoid().squeeze().detach", "torch.sigmoid().squeeze().detach", "torch.sigmoid().squeeze().detach", "torch.sigmoid().squeeze().detach", "torch.sigmoid().squeeze().detach", "torch.sigmoid().squeeze().detach", "torch.sigmoid().squeeze().detach", "torch.sigmoid().squeeze().detach", "torch.sigmoid().squeeze().detach", "torch.sigmoid().squeeze().detach", "torch.sigmoid().squeeze().detach", "MASK.squeeze().detach().cpu().numpy.squeeze().detach().cpu().numpy.squeeze", "torch.sigmoid().squeeze", "torch.sigmoid().squeeze", "torch.sigmoid().squeeze", "torch.sigmoid().squeeze", "torch.sigmoid().squeeze", "torch.sigmoid().squeeze", "torch.sigmoid().squeeze", "torch.sigmoid().squeeze", "torch.sigmoid().squeeze", "torch.sigmoid().squeeze", "torch.sigmoid().squeeze", "torch.sigmoid().squeeze", "torch.sigmoid().squeeze", "torch.sigmoid().squeeze", "torch.sigmoid().squeeze", "torch.sigmoid().squeeze", "torch.sigmoid().squeeze", "torch.sigmoid().squeeze", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid"], "methods", ["home.repos.pwc.inspect_result.BarCodeReader_RCSB-PyTorch.None.utils.calculate_mae"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "evaluate", "(", "self", ")", ":", "\n", "        ", "opt", "=", "self", ".", "opt", "\n", "self", ".", "net", ".", "eval", "(", ")", "\n", "\n", "if", "opt", ".", "save_result", ":", "\n", "            ", "save_root", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "save_root", ",", "opt", ".", "dataset", ")", "\n", "os", ".", "makedirs", "(", "save_root", ",", "exist_ok", "=", "True", ")", "\n", "\n", "", "mae", "=", "0", "\n", "for", "i", ",", "inputs", "in", "enumerate", "(", "tqdm", "(", "self", ".", "eval_loader", ")", ")", ":", "\n", "            ", "MASK", "=", "inputs", "[", "0", "]", ".", "to", "(", "self", ".", "dev", ")", "\n", "IMG", "=", "inputs", "[", "1", "]", ".", "to", "(", "self", ".", "dev", ")", "\n", "NAME", "=", "inputs", "[", "2", "]", "[", "0", "]", "\n", "\n", "b", ",", "c", ",", "h", ",", "w", "=", "MASK", ".", "shape", "\n", "\n", "SOD", "=", "self", ".", "net", "(", "IMG", ")", "\n", "\n", "MASK", "=", "MASK", ".", "squeeze", "(", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "pred_sal", ",", "pred_ctr", "=", "SOD", "[", "'sal'", "]", "[", "-", "1", "]", ",", "SOD", "[", "'ctr'", "]", "[", "-", "1", "]", "\n", "pred_sal", "=", "F", ".", "interpolate", "(", "pred_sal", ",", "(", "h", ",", "w", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "False", ")", "\n", "pred_ctr", "=", "F", ".", "interpolate", "(", "pred_ctr", ",", "(", "h", ",", "w", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "False", ")", "\n", "\n", "pred_sal", "=", "torch", ".", "sigmoid", "(", "pred_sal", ")", ".", "squeeze", "(", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "pred_ctr", "=", "torch", ".", "sigmoid", "(", "pred_ctr", ")", ".", "squeeze", "(", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "if", "opt", ".", "save_result", ":", "\n", "                ", "save_path_sal", "=", "os", ".", "path", ".", "join", "(", "save_root", ",", "\"{}_sal.png\"", ".", "format", "(", "NAME", ")", ")", "\n", "save_path_ctr", "=", "os", ".", "path", ".", "join", "(", "save_root", ",", "\"{}_ctr.png\"", ".", "format", "(", "NAME", ")", ")", "\n", "io", ".", "imsave", "(", "save_path_sal", ",", "pred_sal", ")", "\n", "io", ".", "imsave", "(", "save_path_ctr", ",", "pred_ctr", ")", "\n", "\n", "", "mae", "+=", "calculate_mae", "(", "MASK", ",", "pred_sal", ")", "\n", "\n", "", "self", ".", "net", ".", "train", "(", ")", "\n", "\n", "return", "mae", "/", "len", "(", "self", ".", "eval_loader", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BarCodeReader_RCSB-PyTorch.None.solver.Solver.load": [[130, 135], ["torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "solver.Solver.net.load_state_dict"], "methods", ["home.repos.pwc.inspect_result.BarCodeReader_RCSB-PyTorch.None.tester.Tester.load", "home.repos.pwc.inspect_result.BarCodeReader_RCSB-PyTorch.None.tester.Tester.load", "home.repos.pwc.inspect_result.BarCodeReader_RCSB-PyTorch.None.tester.Tester.load", "home.repos.pwc.inspect_result.BarCodeReader_RCSB-PyTorch.None.tester.Tester.load", "home.repos.pwc.inspect_result.BarCodeReader_RCSB-PyTorch.None.tester.Tester.load", "home.repos.pwc.inspect_result.BarCodeReader_RCSB-PyTorch.None.tester.Tester.load", "home.repos.pwc.inspect_result.BarCodeReader_RCSB-PyTorch.None.tester.Tester.load", "home.repos.pwc.inspect_result.BarCodeReader_RCSB-PyTorch.None.tester.Tester.load", "home.repos.pwc.inspect_result.BarCodeReader_RCSB-PyTorch.None.tester.Tester.load"], ["", "def", "load", "(", "self", ",", "path", ")", ":", "\n", "        ", "state_dict", "=", "torch", ".", "load", "(", "path", ",", "map_location", "=", "lambda", "storage", ",", "loc", ":", "storage", ")", "\n", "self", ".", "net", ".", "load_state_dict", "(", "state_dict", ")", "\n", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.BarCodeReader_RCSB-PyTorch.None.solver.Solver.save": [[136, 140], ["os.makedirs", "os.path.join", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "solver.Solver.net.state_dict", "str"], "methods", ["home.repos.pwc.inspect_result.BarCodeReader_RCSB-PyTorch.None.solver.Solver.save", "home.repos.pwc.inspect_result.BarCodeReader_RCSB-PyTorch.None.solver.Solver.save", "home.repos.pwc.inspect_result.BarCodeReader_RCSB-PyTorch.None.solver.Solver.save", "home.repos.pwc.inspect_result.BarCodeReader_RCSB-PyTorch.None.solver.Solver.save", "home.repos.pwc.inspect_result.BarCodeReader_RCSB-PyTorch.None.solver.Solver.save", "home.repos.pwc.inspect_result.BarCodeReader_RCSB-PyTorch.None.solver.Solver.save", "home.repos.pwc.inspect_result.BarCodeReader_RCSB-PyTorch.None.solver.Solver.save", "home.repos.pwc.inspect_result.BarCodeReader_RCSB-PyTorch.None.solver.Solver.save", "home.repos.pwc.inspect_result.BarCodeReader_RCSB-PyTorch.None.solver.Solver.save"], ["", "def", "save", "(", "self", ",", "step", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "self", ".", "opt", ".", "ckpt_root", ",", "exist_ok", "=", "True", ")", "\n", "save_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "opt", ".", "ckpt_root", ",", "str", "(", "step", ")", "+", "\".pt\"", ")", "\n", "torch", ".", "save", "(", "self", ".", "net", ".", "state_dict", "(", ")", ",", "save_path", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.BarCodeReader_RCSB-PyTorch.None.option.parse_args": [[3, 43], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.BarCodeReader_RCSB-PyTorch.None.option.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "\"--seed\"", ",", "type", "=", "int", ",", "default", "=", "1", ")", "\n", "\n", "# models", "\n", "parser", ".", "add_argument", "(", "\"--pretrain\"", ",", "type", "=", "str", ",", "default", "=", "\"\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--model\"", ",", "type", "=", "str", ",", "default", "=", "\"RCSB\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--GPU_ID\"", ",", "type", "=", "int", ",", "default", "=", "0", ")", "\n", "\n", "# dataset", "\n", "parser", ".", "add_argument", "(", "\"--dataset_root\"", ",", "type", "=", "str", ",", "default", "=", "\"dataset/\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--dataset\"", ",", "type", "=", "str", ",", "default", "=", "\"DUTSTR\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--test_dataset\"", ",", "type", "=", "str", ",", "default", "=", "\"benchmark_DUTSTE\"", ")", "\n", "\n", "# training setups", "\n", "parser", ".", "add_argument", "(", "\"--lr\"", ",", "type", "=", "float", ",", "default", "=", "1e-4", ")", "\n", "parser", ".", "add_argument", "(", "\"--decay\"", ",", "type", "=", "str", ",", "default", "=", "\"20-40-60-80\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--decay_step\"", ",", "type", "=", "int", ",", "default", "=", "20", ")", "\n", "parser", ".", "add_argument", "(", "\"--patch_size\"", ",", "type", "=", "int", ",", "default", "=", "256", ")", "\n", "parser", ".", "add_argument", "(", "\"--batch_size\"", ",", "type", "=", "int", ",", "default", "=", "4", ")", "\n", "parser", ".", "add_argument", "(", "\"--max_epoch\"", ",", "type", "=", "int", ",", "default", "=", "100", ")", "\n", "parser", ".", "add_argument", "(", "\"--num_workers\"", ",", "type", "=", "int", ",", "default", "=", "8", ")", "\n", "parser", ".", "add_argument", "(", "\"--num_features\"", ",", "type", "=", "int", ",", "default", "=", "64", ")", "\n", "parser", ".", "add_argument", "(", "\"--gclip\"", ",", "type", "=", "int", ",", "default", "=", "0", ")", "\n", "parser", ".", "add_argument", "(", "\"--R\"", ",", "type", "=", "int", ",", "default", "=", "3", ",", "help", "=", "\"recursion number\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--G\"", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "\"config of G is written in model file, keep this G=1 here\"", ")", "\n", "\n", "# loss", "\n", "parser", ".", "add_argument", "(", "\"--lmbda\"", ",", "type", "=", "int", ",", "default", "=", "3", ",", "\n", "help", "=", "\"lambda in loss function, it is divided by 10 to make it float, so here use integer\"", ")", "\n", "\n", "# misc", "\n", "parser", ".", "add_argument", "(", "\"--test_only\"", ",", "action", "=", "\"store_true\"", ",", "help", "=", "\"test mode\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--save_every_ckpt\"", ",", "action", "=", "\"store_true\"", ",", "help", "=", "\"save every ckpt\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--save_result\"", ",", "action", "=", "\"store_true\"", ",", "help", "=", "\"save last stage's pred\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--save_all\"", ",", "action", "=", "\"store_true\"", ",", "help", "=", "\"save all stages' pred\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--ckpt_root\"", ",", "type", "=", "str", ",", "default", "=", "\"./ckpt\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--save_root\"", ",", "type", "=", "str", ",", "default", "=", "\"./output\"", ")", "\n", "\n", "return", "parser", ".", "parse_args", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BarCodeReader_RCSB-PyTorch.None.option.get_option": [[44, 47], ["option.parse_args"], "function", ["home.repos.pwc.inspect_result.BarCodeReader_RCSB-PyTorch.None.option.parse_args"], ["", "def", "get_option", "(", ")", ":", "\n", "    ", "opt", "=", "parse_args", "(", ")", "\n", "return", "opt", "", "", ""]], "home.repos.pwc.inspect_result.BarCodeReader_RCSB-PyTorch.None.loss_fn.ConfidentLoss.__init__": [[8, 12], ["torch.BCEWithLogitsLoss", "torch.BCEWithLogitsLoss", "torch.BCEWithLogitsLoss", "float", "int"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "lmbd", "=", "1", ")", ":", "\n", "        ", "self", ".", "bce", "=", "nn", ".", "BCEWithLogitsLoss", "(", "reduction", "=", "'none'", ")", "\n", "self", ".", "weight", "=", "[", "0.1", ",", "0.3", ",", "0.5", ",", "0.7", ",", "0.9", ",", "1.5", "]", "\n", "self", ".", "lmbda", "=", "float", "(", "int", "(", "lmbd", ")", "/", "10", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BarCodeReader_RCSB-PyTorch.None.loss_fn.ConfidentLoss.gen_ctr_torch": [[13, 18], ["torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "kornia.morphology.dilation", "kornia.morphology.erosion", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["None"], ["", "def", "gen_ctr_torch", "(", "self", ",", "IMG", ",", "kernel_size", "=", "5", ")", ":", "\n", "        ", "device", "=", "IMG", ".", "device", "\n", "kernel", "=", "torch", ".", "ones", "(", "(", "kernel_size", ",", "kernel_size", ")", ")", ".", "to", "(", "device", ")", "\n", "C", "=", "K", ".", "morphology", ".", "dilation", "(", "IMG", ",", "kernel", ")", "-", "K", ".", "morphology", ".", "erosion", "(", "IMG", ",", "kernel", ")", "\n", "return", "C", "\n", "\n"]], "home.repos.pwc.inspect_result.BarCodeReader_RCSB-PyTorch.None.loss_fn.ConfidentLoss.confine": [[19, 27], ["torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "w_source.detach.detach.detach", "loss_fn.ConfidentLoss.bce"], "methods", ["None"], ["", "def", "confine", "(", "self", ",", "source_pred", ",", "source_y", ",", "target_pred", ",", "target_y", ")", ":", "\n", "        ", "source_p", "=", "torch", ".", "sigmoid", "(", "source_pred", ")", "\n", "map_source", "=", "torch", ".", "where", "(", "source_p", ">", "source_y", ",", "source_p", ",", "source_y", ")", "\n", "w_source", "=", "4", "*", "map_source", "+", "1", "\n", "w_source", "=", "w_source", ".", "detach", "(", ")", "\n", "loss", "=", "(", "self", ".", "bce", "(", "target_pred", ",", "target_y", ")", "*", "w_source", ")", ".", "mean", "(", ")", "\n", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.BarCodeReader_RCSB-PyTorch.None.loss_fn.ConfidentLoss.weighted_iou": [[28, 35], ["torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "wiou.mean", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d"], "methods", ["None"], ["", "def", "weighted_iou", "(", "self", ",", "pred", ",", "gt", ")", ":", "\n", "        ", "weit", "=", "1", "+", "4", "*", "torch", ".", "abs", "(", "F", ".", "avg_pool2d", "(", "gt", ",", "kernel_size", "=", "31", ",", "stride", "=", "1", ",", "padding", "=", "15", ")", "-", "gt", ")", "\n", "y", "=", "torch", ".", "sigmoid", "(", "pred", ")", "\n", "AND", "=", "(", "(", "y", "*", "gt", ")", "*", "weit", ")", ".", "sum", "(", "dim", "=", "[", "2", ",", "3", "]", ")", "\n", "OR", "=", "(", "(", "y", "+", "gt", ")", "*", "weit", ")", ".", "sum", "(", "dim", "=", "[", "2", ",", "3", "]", ")", "\n", "wiou", "=", "1", "-", "(", "AND", "+", "1", ")", "/", "(", "OR", "-", "AND", "+", "1", ")", "\n", "return", "wiou", ".", "mean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BarCodeReader_RCSB-PyTorch.None.loss_fn.ConfidentLoss.confident_loss": [[36, 43], ["torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "weight.detach.detach.detach", "loss_fn.ConfidentLoss.bce"], "methods", ["None"], ["", "def", "confident_loss", "(", "self", ",", "pred", ",", "gt", ",", "beta", "=", "2", ")", ":", "\n", "        ", "y", "=", "torch", ".", "sigmoid", "(", "pred", ")", "\n", "weight", "=", "beta", "*", "y", "*", "(", "1", "-", "y", ")", "\n", "weight", "=", "weight", ".", "detach", "(", ")", "\n", "p1", "=", "(", "self", ".", "bce", "(", "pred", ",", "gt", ")", "*", "weight", ")", ".", "mean", "(", ")", "\n", "p2", "=", "self", ".", "lmbda", "*", "beta", "*", "(", "y", "*", "(", "1", "-", "y", ")", ")", ".", "mean", "(", ")", "\n", "return", "p1", "+", "p2", "\n", "\n"]], "home.repos.pwc.inspect_result.BarCodeReader_RCSB-PyTorch.None.loss_fn.ConfidentLoss.get_value": [[44, 79], ["zip", "int", "torch.avg_pool2d().gt().float", "torch.avg_pool2d().gt().float", "torch.avg_pool2d().gt().float", "loss_fn.ConfidentLoss.gen_ctr_torch().gt().float", "sal_gt.gt().float", "ctr_gt.gt().float", "sal_gt.size", "sal_pred.size", "len", "loss_fn.ConfidentLoss.confine", "loss_fn.ConfidentLoss.confine", "loss_fn.ConfidentLoss.weighted_iou", "loss_fn.ConfidentLoss.confident_loss", "loss_fn.ConfidentLoss.confident_loss", "torch.avg_pool2d().gt", "torch.avg_pool2d().gt", "torch.avg_pool2d().gt", "loss_fn.ConfidentLoss.gen_ctr_torch().gt", "sal_gt.gt", "ctr_gt.gt", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "loss_fn.ConfidentLoss.gen_ctr_torch"], "methods", ["home.repos.pwc.inspect_result.BarCodeReader_RCSB-PyTorch.None.loss_fn.ConfidentLoss.confine", "home.repos.pwc.inspect_result.BarCodeReader_RCSB-PyTorch.None.loss_fn.ConfidentLoss.confine", "home.repos.pwc.inspect_result.BarCodeReader_RCSB-PyTorch.None.loss_fn.ConfidentLoss.weighted_iou", "home.repos.pwc.inspect_result.BarCodeReader_RCSB-PyTorch.None.loss_fn.ConfidentLoss.confident_loss", "home.repos.pwc.inspect_result.BarCodeReader_RCSB-PyTorch.None.loss_fn.ConfidentLoss.confident_loss", "home.repos.pwc.inspect_result.BarCodeReader_RCSB-PyTorch.None.loss_fn.ConfidentLoss.gen_ctr_torch"], ["", "def", "get_value", "(", "self", ",", "X", ",", "sal_gt", ",", "ctr_gt", ")", ":", "\n", "        ", "sal_loss", ",", "ctr_loss", "=", "0", ",", "0", "\n", "count", "=", "0", "\n", "\n", "for", "sal_pred", ",", "ctr_pred", ",", "wght", "in", "zip", "(", "X", "[", "'sal'", "]", ",", "X", "[", "'ctr'", "]", ",", "self", ".", "weight", ")", ":", "\n", "\n", "            ", "scale", "=", "int", "(", "sal_gt", ".", "size", "(", "-", "1", ")", "/", "sal_pred", ".", "size", "(", "-", "1", ")", ")", "\n", "if", "scale", ">", "1", ":", "\n", "                ", "sal_y", "=", "F", ".", "avg_pool2d", "(", "sal_gt", ",", "kernel_size", "=", "scale", ",", "stride", "=", "scale", ")", ".", "gt", "(", "0.5", ")", ".", "float", "(", ")", "\n", "ctr_y", "=", "self", ".", "gen_ctr_torch", "(", "sal_y", ",", "kernel_size", "=", "3", ")", ".", "gt", "(", "0.5", ")", ".", "float", "(", ")", "\n", "", "else", ":", "\n", "                ", "sal_y", "=", "sal_gt", ".", "gt", "(", "0.5", ")", ".", "float", "(", ")", "\n", "ctr_y", "=", "ctr_gt", ".", "gt", "(", "0.5", ")", ".", "float", "(", ")", "\n", "\n", "", "if", "count", "!=", "len", "(", "self", ".", "weight", ")", "-", "1", ":", "\n", "                ", "stage_sal_loss", "=", "wght", "*", "self", ".", "confine", "(", "source_pred", "=", "ctr_pred", ",", "source_y", "=", "ctr_y", ",", "\n", "target_pred", "=", "sal_pred", ",", "target_y", "=", "sal_y", ")", "\n", "stage_ctr_loss", "=", "wght", "*", "self", ".", "confine", "(", "source_pred", "=", "sal_pred", ",", "source_y", "=", "sal_y", ",", "\n", "target_pred", "=", "ctr_pred", ",", "target_y", "=", "ctr_y", ")", "\n", "\n", "# iou", "\n", "stage_sal_loss", "+=", "wght", "*", "self", ".", "weighted_iou", "(", "sal_pred", ",", "sal_y", ")", "\n", "\n", "", "else", ":", "\n", "# last stage use confident loss", "\n", "                ", "stage_sal_loss", "+=", "wght", "*", "self", ".", "confident_loss", "(", "sal_pred", ",", "sal_y", ",", "beta", "=", "2", ")", "\n", "stage_ctr_loss", "+=", "wght", "*", "self", ".", "confident_loss", "(", "ctr_pred", ",", "ctr_y", ",", "beta", "=", "2", ")", "\n", "\n", "", "sal_loss", "+=", "stage_sal_loss", "\n", "ctr_loss", "+=", "stage_ctr_loss", "\n", "\n", "count", "+=", "1", "\n", "\n", "", "final_loss", "=", "sal_loss", "+", "ctr_loss", "\n", "return", "final_loss", "\n", "", "", ""]], "home.repos.pwc.inspect_result.BarCodeReader_RCSB-PyTorch.None.tester.Tester.__init__": [[12, 24], ["torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "module.Net", "tester.Tester.net.to", "print", "data.generate_loader", "sum", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "map", "tester.Tester.net.parameters", "x.numel"], "methods", ["home.repos.pwc.inspect_result.BarCodeReader_RCSB-PyTorch.data.__init__.generate_loader"], ["    ", "def", "__init__", "(", "self", ",", "module", ",", "opt", ")", ":", "\n", "        ", "self", ".", "opt", "=", "opt", "\n", "\n", "self", ".", "dev", "=", "torch", ".", "device", "(", "\"cuda:{}\"", ".", "format", "(", "opt", ".", "GPU_ID", ")", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "\n", "self", ".", "net", "=", "module", ".", "Net", "(", "opt", ")", "\n", "self", ".", "net", "=", "self", ".", "net", ".", "to", "(", "self", ".", "dev", ")", "\n", "\n", "msg", "=", "\"# params:{}\\n\"", ".", "format", "(", "\n", "sum", "(", "map", "(", "lambda", "x", ":", "x", ".", "numel", "(", ")", ",", "self", ".", "net", ".", "parameters", "(", ")", ")", ")", ")", "\n", "print", "(", "msg", ")", "\n", "\n", "self", ".", "test_loader", "=", "generate_loader", "(", "\"test\"", ",", "opt", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BarCodeReader_RCSB-PyTorch.None.tester.Tester.evaluate": [[25, 82], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "tester.Tester.net.eval", "enumerate", "print", "tester.Tester.load", "os.path.join", "os.makedirs", "tqdm.tqdm.tqdm", "inputs[].to", "inputs[].to", "tester.Tester.net", "MASK.squeeze().detach().cpu().numpy.squeeze().detach().cpu().numpy.squeeze().detach().cpu().numpy", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.sigmoid().squeeze().detach().cpu().numpy", "torch.sigmoid().squeeze().detach().cpu().numpy", "torch.sigmoid().squeeze().detach().cpu().numpy", "torch.sigmoid().squeeze().detach().cpu().numpy", "torch.sigmoid().squeeze().detach().cpu().numpy", "torch.sigmoid().squeeze().detach().cpu().numpy", "torch.sigmoid().squeeze().detach().cpu().numpy", "torch.sigmoid().squeeze().detach().cpu().numpy", "torch.sigmoid().squeeze().detach().cpu().numpy", "torch.sigmoid().squeeze().detach().cpu().numpy", "torch.sigmoid().squeeze().detach().cpu().numpy", "torch.sigmoid().squeeze().detach().cpu().numpy", "torch.sigmoid().squeeze().detach().cpu().numpy", "torch.sigmoid().squeeze().detach().cpu().numpy", "torch.sigmoid().squeeze().detach().cpu().numpy", "torch.sigmoid().squeeze().detach().cpu().numpy", "torch.sigmoid().squeeze().detach().cpu().numpy", "torch.sigmoid().squeeze().detach().cpu().numpy", "utils.calculate_mae", "len", "print", "os.path.join", "os.path.join", "skimage.imsave", "skimage.imsave", "MASK.squeeze().detach().cpu().numpy.squeeze().detach().cpu().numpy.squeeze().detach().cpu", "torch.sigmoid().squeeze().detach().cpu", "torch.sigmoid().squeeze().detach().cpu", "torch.sigmoid().squeeze().detach().cpu", "torch.sigmoid().squeeze().detach().cpu", "torch.sigmoid().squeeze().detach().cpu", "torch.sigmoid().squeeze().detach().cpu", "torch.sigmoid().squeeze().detach().cpu", "torch.sigmoid().squeeze().detach().cpu", "torch.sigmoid().squeeze().detach().cpu", "torch.sigmoid().squeeze().detach().cpu", "torch.sigmoid().squeeze().detach().cpu", "torch.sigmoid().squeeze().detach().cpu", "torch.sigmoid().squeeze().detach().cpu", "torch.sigmoid().squeeze().detach().cpu", "torch.sigmoid().squeeze().detach().cpu", "torch.sigmoid().squeeze().detach().cpu", "torch.sigmoid().squeeze().detach().cpu", "torch.sigmoid().squeeze().detach().cpu", "enumerate", "enumerate", "os.path.join", "torch.sigmoid().squeeze().detach().cpu().numpy", "torch.sigmoid().squeeze().detach().cpu().numpy", "torch.sigmoid().squeeze().detach().cpu().numpy", "torch.sigmoid().squeeze().detach().cpu().numpy", "torch.sigmoid().squeeze().detach().cpu().numpy", "torch.sigmoid().squeeze().detach().cpu().numpy", "torch.sigmoid().squeeze().detach().cpu().numpy", "torch.sigmoid().squeeze().detach().cpu().numpy", "torch.sigmoid().squeeze().detach().cpu().numpy", "skimage.imsave", "os.path.join", "torch.sigmoid().squeeze().detach().cpu().numpy", "torch.sigmoid().squeeze().detach().cpu().numpy", "torch.sigmoid().squeeze().detach().cpu().numpy", "torch.sigmoid().squeeze().detach().cpu().numpy", "torch.sigmoid().squeeze().detach().cpu().numpy", "torch.sigmoid().squeeze().detach().cpu().numpy", "torch.sigmoid().squeeze().detach().cpu().numpy", "torch.sigmoid().squeeze().detach().cpu().numpy", "torch.sigmoid().squeeze().detach().cpu().numpy", "skimage.imsave", "MASK.squeeze().detach().cpu().numpy.squeeze().detach().cpu().numpy.squeeze().detach", "torch.sigmoid().squeeze().detach", "torch.sigmoid().squeeze().detach", "torch.sigmoid().squeeze().detach", "torch.sigmoid().squeeze().detach", "torch.sigmoid().squeeze().detach", "torch.sigmoid().squeeze().detach", "torch.sigmoid().squeeze().detach", "torch.sigmoid().squeeze().detach", "torch.sigmoid().squeeze().detach", "torch.sigmoid().squeeze().detach", "torch.sigmoid().squeeze().detach", "torch.sigmoid().squeeze().detach", "torch.sigmoid().squeeze().detach", "torch.sigmoid().squeeze().detach", "torch.sigmoid().squeeze().detach", "torch.sigmoid().squeeze().detach", "torch.sigmoid().squeeze().detach", "torch.sigmoid().squeeze().detach", "torch.sigmoid().squeeze().detach().cpu", "torch.sigmoid().squeeze().detach().cpu", "torch.sigmoid().squeeze().detach().cpu", "torch.sigmoid().squeeze().detach().cpu", "torch.sigmoid().squeeze().detach().cpu", "torch.sigmoid().squeeze().detach().cpu", "torch.sigmoid().squeeze().detach().cpu", "torch.sigmoid().squeeze().detach().cpu", "torch.sigmoid().squeeze().detach().cpu", "torch.sigmoid().squeeze().detach().cpu", "torch.sigmoid().squeeze().detach().cpu", "torch.sigmoid().squeeze().detach().cpu", "torch.sigmoid().squeeze().detach().cpu", "torch.sigmoid().squeeze().detach().cpu", "torch.sigmoid().squeeze().detach().cpu", "torch.sigmoid().squeeze().detach().cpu", "torch.sigmoid().squeeze().detach().cpu", "torch.sigmoid().squeeze().detach().cpu", "MASK.squeeze().detach().cpu().numpy.squeeze().detach().cpu().numpy.squeeze", "torch.sigmoid().squeeze", "torch.sigmoid().squeeze", "torch.sigmoid().squeeze", "torch.sigmoid().squeeze", "torch.sigmoid().squeeze", "torch.sigmoid().squeeze", "torch.sigmoid().squeeze", "torch.sigmoid().squeeze", "torch.sigmoid().squeeze", "torch.sigmoid().squeeze", "torch.sigmoid().squeeze", "torch.sigmoid().squeeze", "torch.sigmoid().squeeze", "torch.sigmoid().squeeze", "torch.sigmoid().squeeze", "torch.sigmoid().squeeze", "torch.sigmoid().squeeze", "torch.sigmoid().squeeze", "torch.sigmoid().squeeze().detach", "torch.sigmoid().squeeze().detach", "torch.sigmoid().squeeze().detach", "torch.sigmoid().squeeze().detach", "torch.sigmoid().squeeze().detach", "torch.sigmoid().squeeze().detach", "torch.sigmoid().squeeze().detach", "torch.sigmoid().squeeze().detach", "torch.sigmoid().squeeze().detach", "torch.sigmoid().squeeze().detach", "torch.sigmoid().squeeze().detach", "torch.sigmoid().squeeze().detach", "torch.sigmoid().squeeze().detach", "torch.sigmoid().squeeze().detach", "torch.sigmoid().squeeze().detach", "torch.sigmoid().squeeze().detach", "torch.sigmoid().squeeze().detach", "torch.sigmoid().squeeze().detach", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid().squeeze", "torch.sigmoid().squeeze", "torch.sigmoid().squeeze", "torch.sigmoid().squeeze", "torch.sigmoid().squeeze", "torch.sigmoid().squeeze", "torch.sigmoid().squeeze", "torch.sigmoid().squeeze", "torch.sigmoid().squeeze", "torch.sigmoid().squeeze", "torch.sigmoid().squeeze", "torch.sigmoid().squeeze", "torch.sigmoid().squeeze", "torch.sigmoid().squeeze", "torch.sigmoid().squeeze", "torch.sigmoid().squeeze", "torch.sigmoid().squeeze", "torch.sigmoid().squeeze", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid"], "methods", ["home.repos.pwc.inspect_result.BarCodeReader_RCSB-PyTorch.None.tester.Tester.load", "home.repos.pwc.inspect_result.BarCodeReader_RCSB-PyTorch.None.utils.calculate_mae"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "evaluate", "(", "self", ",", "path", ")", ":", "\n", "        ", "opt", "=", "self", ".", "opt", "\n", "\n", "try", ":", "\n", "            ", "print", "(", "'loading model from: {}'", ".", "format", "(", "path", ")", ")", "\n", "self", ".", "load", "(", "path", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "            ", "print", "(", "e", ")", "\n", "\n", "", "self", ".", "net", ".", "eval", "(", ")", "\n", "\n", "if", "opt", ".", "save_result", ":", "\n", "            ", "save_root", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "save_root", ",", "opt", ".", "test_dataset", ")", "\n", "os", ".", "makedirs", "(", "save_root", ",", "exist_ok", "=", "True", ")", "\n", "\n", "", "mae", "=", "0", "\n", "\n", "for", "i", ",", "inputs", "in", "enumerate", "(", "tqdm", "(", "self", ".", "test_loader", ")", ")", ":", "\n", "            ", "MASK", "=", "inputs", "[", "0", "]", ".", "to", "(", "self", ".", "dev", ")", "\n", "IMG", "=", "inputs", "[", "1", "]", ".", "to", "(", "self", ".", "dev", ")", "\n", "NAME", "=", "inputs", "[", "2", "]", "[", "0", "]", "\n", "\n", "b", ",", "c", ",", "h", ",", "w", "=", "MASK", ".", "shape", "\n", "\n", "SOD", "=", "self", ".", "net", "(", "IMG", ")", "\n", "\n", "MASK", "=", "MASK", ".", "squeeze", "(", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "pred_sal", ",", "pred_ctr", "=", "SOD", "[", "'sal'", "]", "[", "-", "1", "]", ",", "SOD", "[", "'ctr'", "]", "[", "-", "1", "]", "\n", "pred_sal", "=", "F", ".", "interpolate", "(", "pred_sal", ",", "(", "h", ",", "w", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "False", ")", "\n", "pred_ctr", "=", "F", ".", "interpolate", "(", "pred_ctr", ",", "(", "h", ",", "w", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "False", ")", "\n", "\n", "pred_sal", "=", "torch", ".", "sigmoid", "(", "pred_sal", ")", ".", "squeeze", "(", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "pred_ctr", "=", "torch", ".", "sigmoid", "(", "pred_ctr", ")", ".", "squeeze", "(", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "pred_sal_img", "=", "(", "pred_sal", "*", "255.", ")", ".", "astype", "(", "'uint8'", ")", "\n", "pred_ctr_img", "=", "(", "pred_ctr", "*", "255.", ")", ".", "astype", "(", "'uint8'", ")", "\n", "\n", "if", "opt", ".", "save_result", ":", "\n", "                ", "save_path_sal", "=", "os", ".", "path", ".", "join", "(", "save_root", ",", "\"{}_sal.png\"", ".", "format", "(", "NAME", ")", ")", "\n", "save_path_ctr", "=", "os", ".", "path", ".", "join", "(", "save_root", ",", "\"{}_ctr.png\"", ".", "format", "(", "NAME", ")", ")", "\n", "io", ".", "imsave", "(", "save_path_sal", ",", "pred_sal_img", ")", "\n", "io", ".", "imsave", "(", "save_path_ctr", ",", "pred_ctr_img", ")", "\n", "if", "opt", ".", "save_all", ":", "\n", "                    ", "for", "idx", ",", "ctr", "in", "enumerate", "(", "SOD", "[", "'ctr'", "]", "[", ":", "-", "1", "]", ")", ":", "\n", "                        ", "ctr_path", "=", "os", ".", "path", ".", "join", "(", "save_root", ",", "\"{}_ctr_{}.png\"", ".", "format", "(", "NAME", ",", "idx", ")", ")", "\n", "ctr_img", "=", "torch", ".", "sigmoid", "(", "ctr", ")", ".", "squeeze", "(", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "ctr_img", "=", "(", "ctr_img", "*", "255", ")", ".", "astype", "(", "'uint8'", ")", "\n", "io", ".", "imsave", "(", "ctr_path", ",", "ctr_img", ")", "\n", "", "for", "idx", ",", "sal", "in", "enumerate", "(", "SOD", "[", "'sal'", "]", "[", ":", "-", "1", "]", ")", ":", "\n", "                        ", "sal_path", "=", "os", ".", "path", ".", "join", "(", "save_root", ",", "\"{}_sal_{}.png\"", ".", "format", "(", "NAME", ",", "idx", ")", ")", "\n", "sal_img", "=", "torch", ".", "sigmoid", "(", "sal", ")", ".", "squeeze", "(", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "sal_img", "=", "(", "sal_img", "*", "255", ")", ".", "astype", "(", "'uint8'", ")", "\n", "io", ".", "imsave", "(", "sal_path", ",", "sal_img", ")", "\n", "\n", "", "", "", "mae", "+=", "calculate_mae", "(", "MASK", ",", "pred_sal", ")", "\n", "\n", "", "return", "mae", "/", "len", "(", "self", ".", "test_loader", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BarCodeReader_RCSB-PyTorch.None.tester.Tester.load": [[83, 87], ["torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "tester.Tester.net.load_state_dict"], "methods", ["home.repos.pwc.inspect_result.BarCodeReader_RCSB-PyTorch.None.tester.Tester.load", "home.repos.pwc.inspect_result.BarCodeReader_RCSB-PyTorch.None.tester.Tester.load", "home.repos.pwc.inspect_result.BarCodeReader_RCSB-PyTorch.None.tester.Tester.load", "home.repos.pwc.inspect_result.BarCodeReader_RCSB-PyTorch.None.tester.Tester.load", "home.repos.pwc.inspect_result.BarCodeReader_RCSB-PyTorch.None.tester.Tester.load", "home.repos.pwc.inspect_result.BarCodeReader_RCSB-PyTorch.None.tester.Tester.load", "home.repos.pwc.inspect_result.BarCodeReader_RCSB-PyTorch.None.tester.Tester.load", "home.repos.pwc.inspect_result.BarCodeReader_RCSB-PyTorch.None.tester.Tester.load", "home.repos.pwc.inspect_result.BarCodeReader_RCSB-PyTorch.None.tester.Tester.load"], ["", "def", "load", "(", "self", ",", "path", ")", ":", "\n", "        ", "state_dict", "=", "torch", ".", "load", "(", "path", ",", "map_location", "=", "lambda", "storage", ",", "loc", ":", "storage", ")", "\n", "self", ".", "net", ".", "load_state_dict", "(", "state_dict", ")", "\n", "return", "\n", "", "", ""]], "home.repos.pwc.inspect_result.BarCodeReader_RCSB-PyTorch.None.utils.LogWritter.__init__": [[15, 18], ["os.makedirs"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "        ", "self", ".", "root", "=", "opt", ".", "ckpt_root", "\n", "os", ".", "makedirs", "(", "self", ".", "root", ",", "exist_ok", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BarCodeReader_RCSB-PyTorch.None.utils.LogWritter.update_txt": [[19, 22], ["open", "f.write"], "methods", ["None"], ["", "def", "update_txt", "(", "self", ",", "msg", ",", "mode", "=", "'a'", ")", ":", "\n", "        ", "with", "open", "(", "'{}/log.txt'", ".", "format", "(", "self", ".", "root", ")", ",", "mode", ")", "as", "f", ":", "\n", "            ", "f", ".", "write", "(", "msg", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.BarCodeReader_RCSB-PyTorch.None.utils.calculate_mae": [[6, 13], ["img1.astype.astype", "img2.astype.astype", "numpy.mean", "numpy.abs"], "function", ["None"], ["def", "calculate_mae", "(", "img1", ",", "img2", ")", ":", "\n", "    ", "img1", "=", "img1", ".", "astype", "(", "np", ".", "float64", ")", "\n", "img2", "=", "img2", ".", "astype", "(", "np", ".", "float64", ")", "\n", "\n", "mae", "=", "np", ".", "mean", "(", "np", ".", "abs", "(", "img1", "-", "img2", ")", ")", "\n", "\n", "return", "mae", "\n", "\n"]], "home.repos.pwc.inspect_result.BarCodeReader_RCSB-PyTorch.model.rcsb.CSFBUnit.__init__": [[8, 28], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU"], "methods", ["home.repos.pwc.inspect_result.BarCodeReader_RCSB-PyTorch.data.__init__.BaseDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channel", ")", ":", "\n", "        ", "super", "(", "CSFBUnit", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv_head_ctr", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_channel", ",", "in_channel", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "True", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "in_channel", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "inplace", "=", "True", ")", ")", "\n", "self", ".", "conv_head_sal", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_channel", ",", "in_channel", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "True", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "in_channel", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "inplace", "=", "True", ")", ")", "\n", "self", ".", "merge_sal", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_channel", "*", "2", ",", "in_channel", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "True", ")", ",", "\n", "nn", ".", "GroupNorm", "(", "in_channel", "//", "2", ",", "in_channel", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "inplace", "=", "True", ")", ")", "\n", "self", ".", "merge_ctr", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_channel", "*", "2", ",", "in_channel", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "True", ")", ",", "\n", "nn", ".", "GroupNorm", "(", "in_channel", "//", "2", ",", "in_channel", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "inplace", "=", "True", ")", ")", "\n", "self", ".", "conv_tail_ctr", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_channel", ",", "in_channel", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "True", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "in_channel", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "inplace", "=", "True", ")", ")", "\n", "self", ".", "conv_tail_sal", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_channel", ",", "in_channel", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "True", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "in_channel", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "inplace", "=", "True", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BarCodeReader_RCSB-PyTorch.model.rcsb.CSFBUnit.forward": [[29, 42], ["rcsb.CSFBUnit.conv_head_ctr", "rcsb.CSFBUnit.conv_head_sal", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "rcsb.CSFBUnit.merge_sal", "rcsb.CSFBUnit.merge_ctr", "rcsb.CSFBUnit.conv_tail_ctr", "rcsb.CSFBUnit.conv_tail_sal"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "ctr", ",", "sal", "=", "x", "\n", "ctr", "=", "self", ".", "conv_head_ctr", "(", "ctr", ")", "\n", "sal", "=", "self", ".", "conv_head_sal", "(", "sal", ")", "\n", "\n", "ctr_n_sal", "=", "torch", ".", "cat", "(", "[", "ctr", ",", "sal", "]", ",", "dim", "=", "1", ")", "\n", "ctr_sal", "=", "self", ".", "merge_sal", "(", "ctr_n_sal", ")", "\n", "sal_ctr", "=", "self", ".", "merge_ctr", "(", "ctr_n_sal", ")", "\n", "\n", "ctr", "=", "self", ".", "conv_tail_ctr", "(", "ctr_sal", ")", "\n", "sal", "=", "self", ".", "conv_tail_sal", "(", "sal_ctr", ")", "\n", "\n", "return", "ctr", ",", "sal", "\n", "\n"]], "home.repos.pwc.inspect_result.BarCodeReader_RCSB-PyTorch.model.rcsb.CSFBBlock.__init__": [[45, 55], ["torch.Module.__init__", "rcsb.CSFBUnit", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU"], "methods", ["home.repos.pwc.inspect_result.BarCodeReader_RCSB-PyTorch.data.__init__.BaseDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channel", ",", "R", ")", ":", "\n", "        ", "super", "(", "CSFBBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "fbunit", "=", "CSFBUnit", "(", "in_channel", "=", "in_channel", ")", "\n", "self", ".", "tail_ctr", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_channel", ",", "in_channel", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "True", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "in_channel", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "inplace", "=", "True", ")", ")", "\n", "self", ".", "tail_sal", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_channel", ",", "in_channel", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "True", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "in_channel", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "inplace", "=", "True", ")", ")", "\n", "self", ".", "R", "=", "R", "\n", "\n"]], "home.repos.pwc.inspect_result.BarCodeReader_RCSB-PyTorch.model.rcsb.CSFBBlock.forward": [[56, 73], ["range", "rcsb.CSFBBlock.tail_ctr", "rcsb.CSFBBlock.tail_sal", "rcsb.CSFBBlock.fbunit"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "ctr", ",", "sal", "=", "x", "\n", "h0_ctr", "=", "ctr", "\n", "h0_sal", "=", "sal", "\n", "\n", "for", "_", "in", "range", "(", "self", ".", "R", ")", ":", "\n", "            ", "ctr", ",", "sal", "=", "self", ".", "fbunit", "(", "[", "ctr", ",", "sal", "]", ")", "\n", "ctr", "=", "ctr", "+", "h0_ctr", "\n", "sal", "=", "sal", "+", "h0_sal", "\n", "\n", "", "ctr", "=", "self", ".", "tail_ctr", "(", "ctr", ")", "\n", "sal", "=", "self", ".", "tail_sal", "(", "sal", ")", "\n", "\n", "ctr", "=", "ctr", "+", "h0_ctr", "\n", "sal", "=", "sal", "+", "h0_sal", "\n", "\n", "return", "ctr", ",", "sal", "\n", "\n"]], "home.repos.pwc.inspect_result.BarCodeReader_RCSB-PyTorch.model.rcsb.ChannelAdapter.__init__": [[76, 83], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU"], "methods", ["home.repos.pwc.inspect_result.BarCodeReader_RCSB-PyTorch.data.__init__.BaseDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_features", ",", "reduction", "=", "4", ",", "reduce_to", "=", "64", ")", ":", "\n", "        ", "super", "(", "ChannelAdapter", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "n", "=", "reduction", "\n", "self", ".", "reduce", "=", "num_features", ">", "64", "\n", "self", ".", "conv", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "num_features", "//", "self", ".", "n", "if", "self", ".", "reduce", "else", "reduce_to", ",", "\n", "reduce_to", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "True", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "inplace", "=", "True", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BarCodeReader_RCSB-PyTorch.model.rcsb.ChannelAdapter.forward": [[84, 93], ["rcsb.ChannelAdapter.conv", "x.view.view.size", "x.view.view.view", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# reduce dimension", "\n", "        ", "if", "self", ".", "reduce", ":", "\n", "            ", "batch", ",", "c", ",", "w", ",", "h", "=", "x", ".", "size", "(", ")", "\n", "x", "=", "x", ".", "view", "(", "batch", ",", "-", "1", ",", "self", ".", "n", ",", "w", ",", "h", ")", "\n", "x", "=", "torch", ".", "max", "(", "x", ",", "dim", "=", "2", ")", ".", "values", "\n", "# conv", "\n", "", "xn", "=", "self", ".", "conv", "(", "x", ")", "\n", "return", "xn", "\n", "\n"]], "home.repos.pwc.inspect_result.BarCodeReader_RCSB-PyTorch.model.rcsb.MapAdapter.__init__": [[95, 103], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.BarCodeReader_RCSB-PyTorch.data.__init__.BaseDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_features", ")", ":", "\n", "        ", "super", "(", "MapAdapter", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv_ctr", "=", "nn", ".", "Conv2d", "(", "num_features", ",", "1", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "True", ")", "\n", "self", ".", "conv_sal", "=", "nn", ".", "Conv2d", "(", "num_features", ",", "1", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "True", ")", "\n", "self", ".", "conv_end", "=", "nn", ".", "Conv2d", "(", "2", ",", "num_features", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "True", ")", "\n", "self", ".", "relu", "=", "nn", ".", "LeakyReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "sal_scale", "=", "nn", ".", "Parameter", "(", "torch", ".", "tensor", "(", "1.", ")", ",", "requires_grad", "=", "True", ")", "\n", "self", ".", "ctr_scale", "=", "nn", ".", "Parameter", "(", "torch", ".", "tensor", "(", "1.", ")", ",", "requires_grad", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BarCodeReader_RCSB-PyTorch.model.rcsb.MapAdapter.forward": [[104, 115], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "rcsb.MapAdapter.conv_end", "rcsb.MapAdapter.relu", "rcsb.MapAdapter.conv_ctr", "rcsb.MapAdapter.conv_sal"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "ctr", ",", "sal", ")", ":", "\n", "        ", "pred_ctr", "=", "self", ".", "conv_ctr", "(", "ctr", ")", "*", "self", ".", "ctr_scale", "\n", "pred_sal", "=", "self", ".", "conv_sal", "(", "sal", ")", "*", "self", ".", "sal_scale", "\n", "\n", "merge", "=", "torch", ".", "cat", "(", "[", "pred_ctr", ",", "pred_sal", "]", ",", "dim", "=", "1", ")", "\n", "merge", "=", "torch", ".", "sigmoid", "(", "merge", ")", "\n", "\n", "stage_feature", "=", "self", ".", "conv_end", "(", "merge", ")", "\n", "stage_feature", "=", "self", ".", "relu", "(", "stage_feature", ")", "\n", "\n", "return", "pred_ctr", ",", "pred_sal", ",", "stage_feature", "\n", "\n"]], "home.repos.pwc.inspect_result.BarCodeReader_RCSB-PyTorch.model.rcsb.MergeAdapter.__init__": [[118, 123], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU"], "methods", ["home.repos.pwc.inspect_result.BarCodeReader_RCSB-PyTorch.data.__init__.BaseDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_features", ",", "out_features", ")", ":", "\n", "        ", "super", "(", "MergeAdapter", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "merge_head", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_features", ",", "out_features", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "True", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_features", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "inplace", "=", "True", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BarCodeReader_RCSB-PyTorch.model.rcsb.MergeAdapter.forward": [[124, 128], ["rcsb.MergeAdapter.merge_head"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "merge_head", "(", "x", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.BarCodeReader_RCSB-PyTorch.model.rcsb.Net.__init__": [[131, 168], ["torch.Module.__init__", "dict", "torchvision.resnet50", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "rcsb.MergeAdapter", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "list", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torchvision.resnet50.children", "rcsb.MapAdapter", "rcsb.MergeAdapter", "rcsb.ChannelAdapter", "rcsb.CSFBBlock", "rcsb.CSFBBlock", "rcsb.CSFBBlock", "rcsb.CSFBBlock", "rcsb.CSFBBlock", "rcsb.CSFBBlock", "range", "range", "range", "range", "range", "range", "range", "range"], "methods", ["home.repos.pwc.inspect_result.BarCodeReader_RCSB-PyTorch.data.__init__.BaseDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "        ", "super", "(", "Net", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "output", "=", "dict", "(", ")", "\n", "num_features", "=", "opt", ".", "num_features", "\n", "G", "=", "opt", ".", "G", "\n", "R", "=", "opt", ".", "R", "\n", "\n", "resnet50", "=", "models", ".", "resnet50", "(", "pretrained", "=", "True", ")", "\n", "head", "=", "list", "(", "resnet50", ".", "children", "(", ")", ")", "[", ":", "3", "]", "\n", "self", ".", "backbone0", "=", "nn", ".", "Sequential", "(", "*", "head", ")", "\n", "self", ".", "pool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "backbone1", "=", "resnet50", ".", "layer1", "\n", "self", ".", "backbone2", "=", "resnet50", ".", "layer2", "\n", "self", ".", "backbone3", "=", "resnet50", ".", "layer3", "\n", "self", ".", "backbone4", "=", "resnet50", ".", "layer4", "\n", "\n", "self", ".", "CSFB0", "=", "nn", ".", "Sequential", "(", "*", "[", "CSFBBlock", "(", "num_features", ",", "R", "=", "R", ")", "for", "i", "in", "range", "(", "3", "*", "G", ")", "]", ")", "\n", "self", ".", "CSFB1", "=", "nn", ".", "Sequential", "(", "*", "[", "CSFBBlock", "(", "num_features", ",", "R", "=", "R", ")", "for", "i", "in", "range", "(", "3", "*", "G", ")", "]", ")", "\n", "self", ".", "CSFB2", "=", "nn", ".", "Sequential", "(", "*", "[", "CSFBBlock", "(", "num_features", ",", "R", "=", "R", ")", "for", "i", "in", "range", "(", "2", "*", "G", ")", "]", ")", "\n", "self", ".", "CSFB3", "=", "nn", ".", "Sequential", "(", "*", "[", "CSFBBlock", "(", "num_features", ",", "R", "=", "R", ")", "for", "i", "in", "range", "(", "2", "*", "G", ")", "]", ")", "\n", "self", ".", "CSFB4", "=", "nn", ".", "Sequential", "(", "*", "[", "CSFBBlock", "(", "num_features", ",", "R", "=", "R", ")", "for", "i", "in", "range", "(", "1", "*", "G", ")", "]", ")", "\n", "\n", "self", ".", "CSFB_end", "=", "nn", ".", "Sequential", "(", "*", "[", "CSFBBlock", "(", "num_features", ",", "R", "=", "R", ")", "for", "i", "in", "range", "(", "5", "*", "G", ")", "]", ")", "\n", "self", ".", "final_sal", "=", "nn", ".", "Conv2d", "(", "num_features", ",", "1", ",", "3", ",", "padding", "=", "1", ",", "bias", "=", "True", ")", "\n", "self", ".", "final_ctr", "=", "nn", ".", "Conv2d", "(", "num_features", ",", "1", ",", "3", ",", "padding", "=", "1", ",", "bias", "=", "True", ")", "\n", "self", ".", "map_gen", "=", "nn", ".", "ModuleList", "(", "[", "MapAdapter", "(", "num_features", ")", "for", "i", "in", "range", "(", "5", ")", "]", ")", "\n", "\n", "self", ".", "merge", "=", "nn", ".", "ModuleList", "(", "[", "MergeAdapter", "(", "in_features", "=", "num_features", "*", "2", ",", "\n", "out_features", "=", "num_features", ")", "for", "i", "in", "range", "(", "4", ")", "]", ")", "\n", "\n", "self", ".", "merge_end", "=", "MergeAdapter", "(", "in_features", "=", "5", ",", "\n", "out_features", "=", "num_features", ")", "\n", "\n", "self", ".", "adapter", "=", "nn", ".", "ModuleList", "(", "[", "ChannelAdapter", "(", "num_features", "=", "channel", ")", "for", "channel", "in", "[", "64", ",", "256", ",", "512", ",", "1024", ",", "2048", "]", "]", ")", "\n", "self", ".", "sal_final_scale", "=", "nn", ".", "Parameter", "(", "torch", ".", "tensor", "(", "1.", ")", ",", "requires_grad", "=", "True", ")", "\n", "self", ".", "ctr_final_scale", "=", "nn", ".", "Parameter", "(", "torch", ".", "tensor", "(", "1.", ")", ",", "requires_grad", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BarCodeReader_RCSB-PyTorch.model.rcsb.Net.forward": [[169, 235], ["rcsb.Net.backbone0", "rcsb.Net.pool", "rcsb.Net.backbone1", "rcsb.Net.backbone2", "rcsb.Net.backbone3", "rcsb.Net.backbone4", "rcsb.Net.CSFB4", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "rcsb.Net.CSFB3", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "rcsb.Net.CSFB2", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "rcsb.Net.CSFB2", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "rcsb.Net.CSFB0", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "rcsb.Net.merge_end", "rcsb.Net.CSFB_end", "rcsb.Net.final_sal", "rcsb.Net.final_ctr"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "        ", "out0", "=", "self", ".", "backbone0", "(", "x", ")", "\n", "out0_p", "=", "self", ".", "pool", "(", "out0", ")", "\n", "out1", "=", "self", ".", "backbone1", "(", "out0_p", ")", "\n", "out2", "=", "self", ".", "backbone2", "(", "out1", ")", "\n", "out3", "=", "self", ".", "backbone3", "(", "out2", ")", "\n", "out4", "=", "self", ".", "backbone4", "(", "out3", ")", "\n", "\n", "A0", "=", "self", ".", "adapter", "[", "0", "]", "(", "out0", ")", "\n", "A1", "=", "self", ".", "adapter", "[", "1", "]", "(", "out1", ")", "\n", "A2", "=", "self", ".", "adapter", "[", "2", "]", "(", "out2", ")", "\n", "A3", "=", "self", ".", "adapter", "[", "3", "]", "(", "out3", ")", "\n", "A4", "=", "self", ".", "adapter", "[", "4", "]", "(", "out4", ")", "\n", "\n", "# BLK 4", "\n", "C4", ",", "S4", "=", "self", ".", "CSFB4", "(", "[", "A4", ",", "A4", "]", ")", "\n", "C4_map", ",", "S4_map", ",", "S4M", "=", "self", ".", "map_gen", "[", "0", "]", "(", "C4", ",", "S4", ")", "\n", "\n", "S4M_x2", "=", "F", ".", "interpolate", "(", "S4M", ",", "scale_factor", "=", "2", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "False", ")", "\n", "# merge", "\n", "M4_3", "=", "torch", ".", "cat", "(", "[", "S4M_x2", ",", "A3", "]", ",", "dim", "=", "1", ")", "\n", "M4_3", "=", "self", ".", "merge", "[", "0", "]", "(", "M4_3", ")", "\n", "# BLK 3", "\n", "C3", ",", "S3", "=", "self", ".", "CSFB3", "(", "[", "M4_3", ",", "M4_3", "]", ")", "\n", "C3_map", ",", "S3_map", ",", "S3M", "=", "self", ".", "map_gen", "[", "1", "]", "(", "C3", ",", "S3", ")", "\n", "\n", "S3M_x2", "=", "F", ".", "interpolate", "(", "S3M", ",", "scale_factor", "=", "2", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "False", ")", "\n", "# merge", "\n", "M3_2", "=", "torch", ".", "cat", "(", "[", "S3M_x2", ",", "A2", "]", ",", "dim", "=", "1", ")", "\n", "M3_2", "=", "self", ".", "merge", "[", "1", "]", "(", "M3_2", ")", "\n", "# BLK 2", "\n", "C2", ",", "S2", "=", "self", ".", "CSFB2", "(", "[", "M3_2", ",", "M3_2", "]", ")", "\n", "C2_map", ",", "S2_map", ",", "S2M", "=", "self", ".", "map_gen", "[", "2", "]", "(", "C2", ",", "S2", ")", "\n", "\n", "S2M_x2", "=", "F", ".", "interpolate", "(", "S2M", ",", "scale_factor", "=", "2", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "False", ")", "\n", "# merge", "\n", "M2_1", "=", "torch", ".", "cat", "(", "[", "S2M_x2", ",", "A1", "]", ",", "dim", "=", "1", ")", "\n", "M2_1", "=", "self", ".", "merge", "[", "2", "]", "(", "M2_1", ")", "\n", "# BLK 1", "\n", "C1", ",", "S1", "=", "self", ".", "CSFB2", "(", "[", "M2_1", ",", "M2_1", "]", ")", "\n", "C1_map", ",", "S1_map", ",", "S1M", "=", "self", ".", "map_gen", "[", "3", "]", "(", "C1", ",", "S1", ")", "\n", "\n", "S1M_x2", "=", "F", ".", "interpolate", "(", "S1M", ",", "scale_factor", "=", "2", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "False", ")", "\n", "# merge", "\n", "M0_1", "=", "torch", ".", "cat", "(", "[", "S1M_x2", ",", "A0", "]", ",", "dim", "=", "1", ")", "\n", "M0_1", "=", "self", ".", "merge", "[", "3", "]", "(", "M0_1", ")", "\n", "# BLK 0", "\n", "C0", ",", "S0", "=", "self", ".", "CSFB0", "(", "[", "M0_1", ",", "M0_1", "]", ")", "\n", "C0_map", ",", "S0_map", ",", "S0M", "=", "self", ".", "map_gen", "[", "4", "]", "(", "C0", ",", "S0", ")", "\n", "\n", "# ref", "\n", "S0Map_x2", "=", "F", ".", "interpolate", "(", "S0_map", ",", "scale_factor", "=", "2", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "False", ")", "\n", "C0Map_x2", "=", "F", ".", "interpolate", "(", "C0_map", ",", "scale_factor", "=", "2", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "False", ")", "\n", "SFM", "=", "torch", ".", "cat", "(", "[", "S0Map_x2", ",", "C0Map_x2", ",", "x", "]", ",", "dim", "=", "1", ")", "\n", "M0_end", "=", "self", ".", "merge_end", "(", "SFM", ")", "\n", "ctr_end", ",", "sal_end", "=", "self", ".", "CSFB_end", "(", "[", "M0_end", ",", "M0_end", "]", ")", "\n", "\n", "sal_pred", "=", "self", ".", "final_sal", "(", "sal_end", ")", "*", "self", ".", "sal_final_scale", "\n", "ctr_pred", "=", "self", ".", "final_ctr", "(", "ctr_end", ")", "*", "self", ".", "ctr_final_scale", "\n", "\n", "# map size: small -> big", "\n", "self", ".", "output", "[", "'sal'", "]", "=", "[", "S4_map", ",", "S3_map", ",", "S2_map", ",", "S1_map", ",", "S0_map", ",", "sal_pred", "]", "\n", "self", ".", "output", "[", "'ctr'", "]", "=", "[", "C4_map", ",", "C3_map", ",", "C2_map", ",", "C1_map", ",", "C0_map", ",", "ctr_pred", "]", "\n", "\n", "return", "self", ".", "output", "\n", "", "", ""]], "home.repos.pwc.inspect_result.BarCodeReader_RCSB-PyTorch.data.dutstr.DUTSTR.__init__": [[8, 16], ["dutstr.DUTSTR.get_subdir", "sorted", "sorted", "data.BaseDataset.__init__", "glob.glob", "glob.glob", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.BarCodeReader_RCSB-PyTorch.data.benchmark.Benchmark.get_subdir", "home.repos.pwc.inspect_result.BarCodeReader_RCSB-PyTorch.data.__init__.BaseDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "phase", ",", "opt", ")", ":", "\n", "        ", "root", "=", "opt", ".", "dataset_root", "\n", "\n", "dir_MASK", ",", "dir_IMG", "=", "self", ".", "get_subdir", "(", ")", "\n", "self", ".", "MASK_paths", "=", "sorted", "(", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "root", ",", "dir_MASK", ",", "\"*.png\"", ")", ")", ")", "\n", "self", ".", "IMG_paths", "=", "sorted", "(", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "root", ",", "dir_IMG", ",", "\"*.jpg\"", ")", ")", ")", "\n", "\n", "super", "(", ")", ".", "__init__", "(", "phase", ",", "opt", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BarCodeReader_RCSB-PyTorch.data.dutstr.DUTSTR.get_subdir": [[17, 21], ["None"], "methods", ["None"], ["", "def", "get_subdir", "(", "self", ")", ":", "\n", "        ", "dir_MASK", "=", "\"DUTSTR/Masks\"", "\n", "dir_IMG", "=", "\"DUTSTR/Images\"", "\n", "return", "dir_MASK", ",", "dir_IMG", "\n", "", "", ""]], "home.repos.pwc.inspect_result.BarCodeReader_RCSB-PyTorch.data.benchmark.Benchmark.__init__": [[8, 24], ["benchmark.Benchmark.get_subdir", "data.BaseDataset.__init__", "ValueError", "sorted", "sorted", "sorted", "sorted", "opt.test_dataset.split", "glob.glob", "glob.glob", "glob.glob", "glob.glob", "os.path.join", "os.path.join", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.BarCodeReader_RCSB-PyTorch.data.benchmark.Benchmark.get_subdir", "home.repos.pwc.inspect_result.BarCodeReader_RCSB-PyTorch.data.__init__.BaseDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "phase", ",", "opt", ")", ":", "\n", "        ", "root", "=", "opt", ".", "dataset_root", "\n", "if", "phase", "==", "\"test\"", "and", "opt", ".", "test_dataset", "!=", "\"\"", ":", "\n", "            ", "self", ".", "name", "=", "opt", ".", "test_dataset", ".", "split", "(", "'_'", ")", "[", "1", "]", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Unsupported dataset: {}\"", ".", "format", "(", "opt", ".", "test_dataset", ")", ")", "\n", "\n", "", "dir_MASK", ",", "dir_IMG", "=", "self", ".", "get_subdir", "(", ")", "\n", "if", "self", ".", "name", "==", "'HKUIS'", ":", "\n", "            ", "self", ".", "MASK_paths", "=", "sorted", "(", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "root", ",", "dir_MASK", ",", "\"*.png\"", ")", ")", ")", "\n", "self", ".", "IMG_paths", "=", "sorted", "(", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "root", ",", "dir_IMG", ",", "\"*.png\"", ")", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "MASK_paths", "=", "sorted", "(", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "root", ",", "dir_MASK", ",", "\"*.png\"", ")", ")", ")", "\n", "self", ".", "IMG_paths", "=", "sorted", "(", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "root", ",", "dir_IMG", ",", "\"*.jpg\"", ")", ")", ")", "\n", "\n", "", "super", "(", ")", ".", "__init__", "(", "phase", ",", "opt", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BarCodeReader_RCSB-PyTorch.data.benchmark.Benchmark.get_subdir": [[25, 29], ["None"], "methods", ["None"], ["", "def", "get_subdir", "(", "self", ")", ":", "\n", "        ", "dir_MASK", "=", "\"benchmark/{}/Masks\"", ".", "format", "(", "self", ".", "name", ")", "\n", "dir_IMG", "=", "\"benchmark/{}/Images\"", ".", "format", "(", "self", ".", "name", ")", "\n", "return", "dir_MASK", ",", "dir_IMG", "\n", "", "", ""]], "home.repos.pwc.inspect_result.BarCodeReader_RCSB-PyTorch.data.__init__.BaseDataset.__init__": [[38, 49], ["print", "tqdm.tqdm.tqdm", "augments.Augment", "list", "list", "zip", "len", "len", "skimage.imread", "skimage.imread", "skimage.imread", "skimage.imread"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "phase", ",", "opt", ")", ":", "\n", "        ", "print", "(", "\"Load dataset... (phase: {}, len: {})\"", ".", "format", "(", "phase", ",", "len", "(", "self", ".", "MASK_paths", ")", ")", ")", "\n", "self", ".", "MASK", ",", "self", ".", "IMG", "=", "list", "(", ")", ",", "list", "(", ")", "\n", "\n", "for", "MASK_path", ",", "IMG_path", "in", "tqdm", "(", "zip", "(", "self", ".", "MASK_paths", ",", "self", ".", "IMG_paths", ")", ",", "total", "=", "len", "(", "self", ".", "MASK_paths", ")", ")", ":", "\n", "            ", "self", ".", "MASK", "+=", "[", "io", ".", "imread", "(", "MASK_path", ")", "]", "\n", "self", ".", "IMG", "+=", "[", "io", ".", "imread", "(", "IMG_path", ")", "]", "\n", "\n", "", "self", ".", "phase", "=", "phase", "\n", "self", ".", "opt", "=", "opt", "\n", "self", ".", "aug", "=", "Augment", "(", "self", ".", "opt", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BarCodeReader_RCSB-PyTorch.data.__init__.BaseDataset.__getitem__": [[50, 79], ["skimage.rgb2gray", "skimage.rgb2gray", "[].split", "len", "skimage.gray2rgb", "skimage.gray2rgb", "__init__.BaseDataset.aug.crop", "__init__.BaseDataset.aug.flip_and_rotate", "__init__.BaseDataset.aug.gen_ctr", "numpy.ascontiguousarray", "__init__.BaseDataset.aug.norm", "__init__.BaseDataset.aug.to_tensor().unsqueeze", "__init__.BaseDataset.aug.to_tensor().unsqueeze", "__init__.BaseDataset.aug.resize", "numpy.ascontiguousarray", "__init__.BaseDataset.aug.norm", "len", "__init__.BaseDataset.transpose", "__init__.BaseDataset.transpose", "__init__.BaseDataset.aug.to_tensor().unsqueeze", "__init__.BaseDataset.aug.to_tensor", "__init__.BaseDataset.aug.to_tensor", "__init__.BaseDataset.aug.to_tensor", "__init__.BaseDataset.aug.to_tensor", "os.path.split", "__init__.BaseDataset.aug.to_tensor"], "methods", ["home.repos.pwc.inspect_result.BarCodeReader_RCSB-PyTorch.None.augments.Augment.crop", "home.repos.pwc.inspect_result.BarCodeReader_RCSB-PyTorch.None.augments.Augment.flip_and_rotate", "home.repos.pwc.inspect_result.BarCodeReader_RCSB-PyTorch.None.augments.Augment.gen_ctr", "home.repos.pwc.inspect_result.BarCodeReader_RCSB-PyTorch.None.augments.Augment.norm", "home.repos.pwc.inspect_result.BarCodeReader_RCSB-PyTorch.None.augments.Augment.resize", "home.repos.pwc.inspect_result.BarCodeReader_RCSB-PyTorch.None.augments.Augment.norm", "home.repos.pwc.inspect_result.BarCodeReader_RCSB-PyTorch.None.augments.Augment.to_tensor", "home.repos.pwc.inspect_result.BarCodeReader_RCSB-PyTorch.None.augments.Augment.to_tensor", "home.repos.pwc.inspect_result.BarCodeReader_RCSB-PyTorch.None.augments.Augment.to_tensor", "home.repos.pwc.inspect_result.BarCodeReader_RCSB-PyTorch.None.augments.Augment.to_tensor", "home.repos.pwc.inspect_result.BarCodeReader_RCSB-PyTorch.None.augments.Augment.to_tensor"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "if", "self", ".", "phase", "==", "\"train\"", ":", "\n", "            ", "index", "=", "index", "%", "len", "(", "self", ".", "MASK", ")", "\n", "\n", "", "MASK", ",", "IMG", "=", "self", ".", "MASK", "[", "index", "]", ",", "self", ".", "IMG", "[", "index", "]", "\n", "MASK", "=", "color", ".", "rgb2gray", "(", "MASK", ")", "\n", "NAME", "=", "(", "os", ".", "path", ".", "split", "(", "self", ".", "MASK_paths", "[", "index", "]", ")", "[", "1", "]", ")", ".", "split", "(", "'.'", ")", "[", "0", "]", "\n", "\n", "if", "len", "(", "IMG", ".", "shape", ")", "<", "3", ":", "\n", "            ", "IMG", "=", "color", ".", "gray2rgb", "(", "IMG", ")", "\n", "\n", "", "if", "self", ".", "phase", "==", "\"train\"", ":", "\n", "            ", "MASK", ",", "IMG", "=", "self", ".", "aug", ".", "crop", "(", "MASK", ",", "IMG", ")", "\n", "MASK", ",", "IMG", "=", "self", ".", "aug", ".", "flip_and_rotate", "(", "MASK", ",", "IMG", ")", "\n", "CTR", "=", "self", ".", "aug", ".", "gen_ctr", "(", "MASK", ",", "kernel_size", "=", "3", ")", "\n", "\n", "IMG", "=", "np", ".", "ascontiguousarray", "(", "IMG", ".", "transpose", "(", "(", "2", ",", "0", ",", "1", ")", ")", ")", "\n", "IMG", "=", "self", ".", "aug", ".", "norm", "(", "self", ".", "aug", ".", "to_tensor", "(", "IMG", ")", "/", "255.", ")", "\n", "MASK", "=", "self", ".", "aug", ".", "to_tensor", "(", "MASK", ")", ".", "unsqueeze", "(", "0", ")", "\n", "CTR", "=", "self", ".", "aug", ".", "to_tensor", "(", "CTR", ")", ".", "unsqueeze", "(", "0", ")", "\n", "\n", "return", "MASK", ",", "IMG", ",", "CTR", "\n", "", "else", ":", "\n", "            ", "IMG", "=", "self", ".", "aug", ".", "resize", "(", "IMG", ")", "\n", "IMG", "=", "np", ".", "ascontiguousarray", "(", "IMG", ".", "transpose", "(", "(", "2", ",", "0", ",", "1", ")", ")", ")", "\n", "IMG", "=", "self", ".", "aug", ".", "norm", "(", "self", ".", "aug", ".", "to_tensor", "(", "IMG", ")", "/", "255.", ")", "\n", "MASK", "=", "self", ".", "aug", ".", "to_tensor", "(", "MASK", ")", ".", "unsqueeze", "(", "0", ")", "/", "255.", "\n", "\n", "return", "MASK", ",", "IMG", ",", "NAME", "\n", "\n"]], "home.repos.pwc.inspect_result.BarCodeReader_RCSB-PyTorch.data.__init__.BaseDataset.__len__": [[80, 82], ["len"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "MASK", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.BarCodeReader_RCSB-PyTorch.data.__init__.generate_loader": [[11, 35], ["opt.dataset.replace", "torch.utils.data.DataLoader", "importlib.import_module", "getattr", "importlib.import_module", "importlib.import_module", "ValueError"], "function", ["None"], ["def", "generate_loader", "(", "phase", ",", "opt", ")", ":", "\n", "    ", "cname", "=", "opt", ".", "dataset", ".", "replace", "(", "\"_\"", ",", "\"\"", ")", "\n", "\n", "if", "phase", "==", "\"test\"", ":", "\n", "        ", "mname", "=", "importlib", ".", "import_module", "(", "\"data.benchmark\"", ")", "\n", "cname", "=", "\"Benchmark\"", "\n", "", "else", ":", "\n", "        ", "if", "\"DUTSTR\"", "in", "opt", ".", "dataset", ":", "\n", "            ", "mname", "=", "importlib", ".", "import_module", "(", "\"data.dutstr\"", ")", "\n", "", "elif", "\"benchmark\"", "in", "opt", ".", "dataset", ":", "\n", "            ", "mname", "=", "importlib", ".", "import_module", "(", "\"data.benchmark\"", ")", "\n", "cname", "=", "\"Benchmark\"", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Unsupported dataset: {}\"", ".", "format", "(", "opt", ".", "dataset", ")", ")", "\n", "\n", "", "", "kwargs", "=", "{", "\n", "\"batch_size\"", ":", "opt", ".", "batch_size", "if", "phase", "==", "\"train\"", "else", "1", ",", "\n", "\"num_workers\"", ":", "opt", ".", "num_workers", "if", "phase", "==", "\"train\"", "else", "0", ",", "\n", "\"shuffle\"", ":", "phase", "==", "\"train\"", ",", "\n", "\"drop_last\"", ":", "phase", "==", "\"train\"", ",", "\n", "}", "\n", "\n", "dataset", "=", "getattr", "(", "mname", ",", "cname", ")", "(", "phase", ",", "opt", ")", "\n", "return", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataset", ",", "**", "kwargs", ")", "\n", "\n"]]}