{"home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.aachen.matchers.mutual_nn_matcher": [[5, 14], ["torch.arange", "torch.stack().t", "torch.stack().t.data.cpu().numpy", "descriptors2.t", "torch.max", "torch.max", "torch.stack", "torch.stack().t.data.cpu"], "function", ["None"], ["def", "mutual_nn_matcher", "(", "descriptors1", ",", "descriptors2", ")", ":", "\n", "    ", "device", "=", "descriptors1", ".", "device", "\n", "sim", "=", "descriptors1", "@", "descriptors2", ".", "t", "(", ")", "\n", "nn12", "=", "torch", ".", "max", "(", "sim", ",", "dim", "=", "1", ")", "[", "1", "]", "\n", "nn21", "=", "torch", ".", "max", "(", "sim", ",", "dim", "=", "0", ")", "[", "1", "]", "\n", "ids1", "=", "torch", ".", "arange", "(", "0", ",", "sim", ".", "shape", "[", "0", "]", ",", "device", "=", "device", ")", "\n", "mask", "=", "ids1", "==", "nn21", "[", "nn12", "]", "\n", "matches", "=", "torch", ".", "stack", "(", "[", "ids1", "[", "mask", "]", ",", "nn12", "[", "mask", "]", "]", ")", ".", "t", "(", ")", "\n", "return", "matches", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.aachen.matchers.ratio_matcher": [[17, 45], ["torch.topk", "torch.sqrt", "torch.topk", "torch.sqrt", "torch.arange", "torch.min", "torch.stack", "torch.stack.data.cpu().numpy", "descriptors2.t", "sim.t", "torch.stack.data.cpu"], "function", ["None"], ["", "def", "ratio_matcher", "(", "descriptors1", ",", "descriptors2", ",", "ratio", "=", "0.95", ")", ":", "\n", "    ", "device", "=", "descriptors1", ".", "device", "\n", "sim", "=", "descriptors1", "@", "descriptors2", ".", "t", "(", ")", "\n", "\n", "# Retrieve top 2 nearest neighbors 1->2.", "\n", "nns_sim", ",", "nns", "=", "torch", ".", "topk", "(", "sim", ",", "2", ",", "dim", "=", "1", ")", "\n", "nns_dist", "=", "torch", ".", "sqrt", "(", "2", "-", "2", "*", "nns_sim", ")", "\n", "# Compute Lowe's ratio.", "\n", "ratios12", "=", "nns_dist", "[", ":", ",", "0", "]", "/", "(", "nns_dist", "[", ":", ",", "1", "]", "+", "1e-8", ")", "\n", "# Save first NN.", "\n", "nn12", "=", "nns", "[", ":", ",", "0", "]", "\n", "\n", "# Retrieve top 2 nearest neighbors 1->2.", "\n", "nns_sim", ",", "nns", "=", "torch", ".", "topk", "(", "sim", ".", "t", "(", ")", ",", "2", ",", "dim", "=", "1", ")", "\n", "nns_dist", "=", "torch", ".", "sqrt", "(", "2", "-", "2", "*", "nns_sim", ")", "\n", "# Compute Lowe's ratio.", "\n", "ratios21", "=", "nns_dist", "[", ":", ",", "0", "]", "/", "(", "nns_dist", "[", ":", ",", "1", "]", "+", "1e-8", ")", "\n", "# Save first NN.", "\n", "nn21", "=", "nns", "[", ":", ",", "0", "]", "\n", "\n", "# Symmetric ratio test.", "\n", "ids1", "=", "torch", ".", "arange", "(", "0", ",", "sim", ".", "shape", "[", "0", "]", ",", "device", "=", "device", ")", "\n", "mask", "=", "torch", ".", "min", "(", "ratios12", "<=", "ratio", ",", "ratios21", "[", "nn12", "]", "<=", "ratio", ")", "\n", "\n", "# Final matches.", "\n", "matches", "=", "torch", ".", "stack", "(", "[", "ids1", "[", "mask", "]", ",", "nn12", "[", "mask", "]", "]", ",", "dim", "=", "-", "1", ")", "\n", "\n", "return", "matches", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.aachen.matchers.mutual_nn_ratio_matcher": [[48, 76], ["torch.topk", "torch.sqrt", "torch.topk", "torch.sqrt", "torch.arange", "torch.min", "torch.stack", "torch.stack.data.cpu().numpy", "descriptors2.t", "sim.t", "torch.min", "torch.stack.data.cpu"], "function", ["None"], ["", "def", "mutual_nn_ratio_matcher", "(", "descriptors1", ",", "descriptors2", ",", "ratio", "=", "0.95", ")", ":", "\n", "    ", "device", "=", "descriptors1", ".", "device", "\n", "sim", "=", "descriptors1", "@", "descriptors2", ".", "t", "(", ")", "\n", "\n", "# Retrieve top 2 nearest neighbors 1->2.", "\n", "nns_sim", ",", "nns", "=", "torch", ".", "topk", "(", "sim", ",", "2", ",", "dim", "=", "1", ")", "\n", "nns_dist", "=", "torch", ".", "sqrt", "(", "2", "-", "2", "*", "nns_sim", ")", "\n", "# Compute Lowe's ratio.", "\n", "ratios12", "=", "nns_dist", "[", ":", ",", "0", "]", "/", "(", "nns_dist", "[", ":", ",", "1", "]", "+", "1e-8", ")", "\n", "# Save first NN and match similarity.", "\n", "nn12", "=", "nns", "[", ":", ",", "0", "]", "\n", "\n", "# Retrieve top 2 nearest neighbors 1->2.", "\n", "nns_sim", ",", "nns", "=", "torch", ".", "topk", "(", "sim", ".", "t", "(", ")", ",", "2", ",", "dim", "=", "1", ")", "\n", "nns_dist", "=", "torch", ".", "sqrt", "(", "2", "-", "2", "*", "nns_sim", ")", "\n", "# Compute Lowe's ratio.", "\n", "ratios21", "=", "nns_dist", "[", ":", ",", "0", "]", "/", "(", "nns_dist", "[", ":", ",", "1", "]", "+", "1e-8", ")", "\n", "# Save first NN.", "\n", "nn21", "=", "nns", "[", ":", ",", "0", "]", "\n", "\n", "# Mutual NN + symmetric ratio test.", "\n", "ids1", "=", "torch", ".", "arange", "(", "0", ",", "sim", ".", "shape", "[", "0", "]", ",", "device", "=", "device", ")", "\n", "mask", "=", "torch", ".", "min", "(", "ids1", "==", "nn21", "[", "nn12", "]", ",", "torch", ".", "min", "(", "ratios12", "<=", "ratio", ",", "ratios21", "[", "nn12", "]", "<=", "ratio", ")", ")", "\n", "\n", "# Final matches.", "\n", "matches", "=", "torch", ".", "stack", "(", "[", "ids1", "[", "mask", "]", ",", "nn12", "[", "mask", "]", "]", ",", "dim", "=", "-", "1", ")", "\n", "\n", "return", "matches", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.aachen.reconstruct_pipeline.array_to_blob": [[30, 35], ["array.tostring", "numpy.getbuffer"], "function", ["None"], ["def", "array_to_blob", "(", "array", ")", ":", "\n", "    ", "if", "IS_PYTHON3", ":", "\n", "        ", "return", "array", ".", "tostring", "(", ")", "\n", "", "else", ":", "\n", "        ", "return", "np", ".", "getbuffer", "(", "array", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.aachen.reconstruct_pipeline.recover_database_images_and_ids": [[36, 54], ["sqlite3.connect", "sqlite3.connect.cursor", "connection.cursor.execute", "connection.cursor.close", "sqlite3.connect.close"], "function", ["None"], ["", "", "def", "recover_database_images_and_ids", "(", "paths", ",", "args", ")", ":", "\n", "# Connect to the database.", "\n", "    ", "connection", "=", "sqlite3", ".", "connect", "(", "paths", ".", "database_path", ")", "\n", "cursor", "=", "connection", ".", "cursor", "(", ")", "\n", "\n", "# Recover database images and ids.", "\n", "images", "=", "{", "}", "\n", "cameras", "=", "{", "}", "\n", "cursor", ".", "execute", "(", "\"SELECT name, image_id, camera_id FROM images;\"", ")", "\n", "for", "row", "in", "cursor", ":", "\n", "        ", "images", "[", "row", "[", "0", "]", "]", "=", "row", "[", "1", "]", "\n", "cameras", "[", "row", "[", "0", "]", "]", "=", "row", "[", "2", "]", "\n", "\n", "# Close the connection to the database.", "\n", "", "cursor", ".", "close", "(", ")", "\n", "connection", ".", "close", "(", ")", "\n", "\n", "return", "images", ",", "cameras", "\n", "\n"]], "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.aachen.reconstruct_pipeline.preprocess_reference_model": [[56, 104], ["print", "int", "open", "f.readlines", "intrinsics.strip().split.strip().split", "camera.Camera", "camera.Camera.set_intrinsics", "open", "f.readlines", "extrinsics.strip().split.strip().split", "numpy.array", "numpy.array", "utils.camera_center_to_translation", "camera_parameters[].set_pose", "float", "float", "intrinsics.strip().split.strip", "extrinsics.strip().split.strip"], "function", ["home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.aachen.camera.Camera.set_intrinsics", "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.aachen.utils.camera_center_to_translation", "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.aachen.camera.Camera.set_pose"], ["", "def", "preprocess_reference_model", "(", "paths", ",", "args", ")", ":", "\n", "    ", "print", "(", "'Preprocessing the reference model...'", ")", "\n", "\n", "# Recover intrinsics.", "\n", "with", "open", "(", "paths", ".", "reference_model_path", "/", "'database_intrinsics.txt'", ")", "as", "f", ":", "\n", "        ", "raw_intrinsics", "=", "f", ".", "readlines", "(", ")", "\n", "\n", "", "camera_parameters", "=", "{", "}", "\n", "\n", "for", "intrinsics", "in", "raw_intrinsics", ":", "\n", "        ", "intrinsics", "=", "intrinsics", ".", "strip", "(", "'\\n'", ")", ".", "split", "(", "' '", ")", "\n", "\n", "image_name", "=", "intrinsics", "[", "0", "]", "\n", "\n", "camera_model", "=", "intrinsics", "[", "1", "]", "\n", "\n", "intrinsics", "=", "[", "float", "(", "param", ")", "for", "param", "in", "intrinsics", "[", "2", ":", "]", "]", "\n", "\n", "camera", "=", "Camera", "(", ")", "\n", "camera", ".", "set_intrinsics", "(", "camera_model", "=", "camera_model", ",", "intrinsics", "=", "intrinsics", ")", "\n", "\n", "camera_parameters", "[", "image_name", "]", "=", "camera", "\n", "\n", "# Recover poses.", "\n", "", "with", "open", "(", "paths", ".", "reference_model_path", "/", "'aachen_cvpr2018_db.nvm'", ")", "as", "f", ":", "\n", "        ", "raw_extrinsics", "=", "f", ".", "readlines", "(", ")", "\n", "\n", "# Skip the header.", "\n", "", "n_cameras", "=", "int", "(", "raw_extrinsics", "[", "2", "]", ")", "\n", "raw_extrinsics", "=", "raw_extrinsics", "[", "3", ":", "3", "+", "n_cameras", "]", "\n", "\n", "for", "extrinsics", "in", "raw_extrinsics", ":", "\n", "        ", "extrinsics", "=", "extrinsics", ".", "strip", "(", "'\\n'", ")", ".", "split", "(", "' '", ")", "\n", "\n", "image_name", "=", "extrinsics", "[", "0", "]", "\n", "\n", "# Skip the focal length. Skip the distortion and terminal 0.", "\n", "qw", ",", "qx", ",", "qy", ",", "qz", ",", "cx", ",", "cy", ",", "cz", "=", "[", "float", "(", "param", ")", "for", "param", "in", "extrinsics", "[", "2", ":", "-", "2", "]", "]", "\n", "\n", "qvec", "=", "np", ".", "array", "(", "[", "qw", ",", "qx", ",", "qy", ",", "qz", "]", ")", "\n", "c", "=", "np", ".", "array", "(", "[", "cx", ",", "cy", ",", "cz", "]", ")", "\n", "\n", "# NVM -> COLMAP.", "\n", "t", "=", "camera_center_to_translation", "(", "c", ",", "qvec", ")", "\n", "\n", "camera_parameters", "[", "image_name", "]", ".", "set_pose", "(", "qvec", "=", "qvec", ",", "t", "=", "t", ")", "\n", "\n", "", "return", "camera_parameters", "\n", "\n"]], "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.aachen.reconstruct_pipeline.generate_empty_reconstruction": [[106, 144], ["print", "paths.empty_model_path.exists", "paths.empty_model_path.makedirs_p", "open", "open", "open", "f.write", "f.write", "map", "map", "map"], "function", ["None"], ["", "def", "generate_empty_reconstruction", "(", "images", ",", "cameras", ",", "camera_parameters", ",", "paths", ",", "args", ")", ":", "\n", "    ", "print", "(", "'Generating the empty reconstruction...'", ")", "\n", "\n", "if", "not", "paths", ".", "empty_model_path", ".", "exists", "(", ")", ":", "\n", "        ", "paths", ".", "empty_model_path", ".", "makedirs_p", "(", ")", "\n", "\n", "", "with", "open", "(", "paths", ".", "empty_model_path", "/", "'cameras.txt'", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "for", "image_name", "in", "images", ":", "\n", "            ", "image_id", "=", "images", "[", "image_name", "]", "\n", "camera_id", "=", "cameras", "[", "image_name", "]", "\n", "try", ":", "\n", "                ", "camera", "=", "camera_parameters", "[", "image_name", "]", "\n", "", "except", ":", "\n", "                ", "continue", "\n", "", "f", ".", "write", "(", "'%d %s %s\\n'", "%", "(", "\n", "camera_id", ",", "\n", "camera", ".", "camera_model", ",", "\n", "' '", ".", "join", "(", "map", "(", "str", ",", "camera", ".", "intrinsics", ")", ")", "\n", ")", ")", "\n", "\n", "", "", "with", "open", "(", "paths", ".", "empty_model_path", "/", "'images.txt'", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "for", "image_name", "in", "images", ":", "\n", "            ", "image_id", "=", "images", "[", "image_name", "]", "\n", "camera_id", "=", "cameras", "[", "image_name", "]", "\n", "try", ":", "\n", "                ", "camera", "=", "camera_parameters", "[", "image_name", "]", "\n", "", "except", ":", "\n", "                ", "continue", "\n", "", "f", ".", "write", "(", "'%d %s %s %d %s\\n\\n'", "%", "(", "\n", "image_id", ",", "\n", "' '", ".", "join", "(", "map", "(", "str", ",", "camera", ".", "qvec", ")", ")", ",", "\n", "' '", ".", "join", "(", "map", "(", "str", ",", "camera", ".", "t", ")", ")", ",", "\n", "camera_id", ",", "\n", "image_name", "\n", ")", ")", "\n", "\n", "", "", "with", "open", "(", "paths", ".", "empty_model_path", "/", "'points3D.txt'", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.aachen.reconstruct_pipeline.import_features": [[146, 173], ["sqlite3.connect", "sqlite3.connect.cursor", "print", "tqdm.tqdm", "connection.cursor.close", "sqlite3.connect.close", "images.items", "numpy.concatenate().astype", "np.concatenate().astype.tostring", "connection.cursor.execute", "sqlite3.connect.commit", "len", "numpy.load", "images.items", "numpy.concatenate", "numpy.ones", "numpy.zeros"], "function", ["None"], ["", "", "def", "import_features", "(", "images", ",", "paths", ",", "args", ")", ":", "\n", "# Connect to the database.", "\n", "    ", "connection", "=", "sqlite3", ".", "connect", "(", "paths", ".", "database_path", ")", "\n", "cursor", "=", "connection", ".", "cursor", "(", ")", "\n", "\n", "# Import the features.", "\n", "print", "(", "'Importing features...'", ")", "\n", "\n", "for", "image_name", ",", "image_id", "in", "tqdm", "(", "images", ".", "items", "(", ")", ",", "total", "=", "len", "(", "images", ".", "items", "(", ")", ")", ")", ":", "\n", "        ", "features_path", "=", "paths", ".", "features_path", "/", "'{}.{}'", ".", "format", "(", "image_name", ",", "args", ".", "method_name", ")", "\n", "\n", "keypoints", "=", "np", ".", "load", "(", "features_path", ")", "[", "'keypoints'", "]", "\n", "n_keypoints", "=", "keypoints", ".", "shape", "[", "0", "]", "\n", "\n", "# Keep only x, y coordinates.", "\n", "keypoints", "=", "keypoints", "[", ":", ",", ":", "2", "]", "\n", "# Add placeholder scale, orientation.", "\n", "keypoints", "=", "np", ".", "concatenate", "(", "[", "keypoints", ",", "np", ".", "ones", "(", "(", "n_keypoints", ",", "1", ")", ")", ",", "np", ".", "zeros", "(", "(", "n_keypoints", ",", "1", ")", ")", "]", ",", "axis", "=", "1", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "keypoints_str", "=", "keypoints", ".", "tostring", "(", ")", "\n", "cursor", ".", "execute", "(", "\"INSERT INTO keypoints(image_id, rows, cols, data) VALUES(?, ?, ?, ?);\"", ",", "\n", "(", "image_id", ",", "keypoints", ".", "shape", "[", "0", "]", ",", "keypoints", ".", "shape", "[", "1", "]", ",", "keypoints_str", ")", ")", "\n", "connection", ".", "commit", "(", ")", "\n", "\n", "# Close the connection to the database.", "\n", "", "cursor", ".", "close", "(", ")", "\n", "connection", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.aachen.reconstruct_pipeline.image_ids_to_pair_id": [[175, 180], ["None"], "function", ["None"], ["", "def", "image_ids_to_pair_id", "(", "image_id1", ",", "image_id2", ")", ":", "\n", "    ", "if", "image_id1", ">", "image_id2", ":", "\n", "        ", "return", "2147483647", "*", "image_id2", "+", "image_id1", "\n", "", "else", ":", "\n", "        ", "return", "2147483647", "*", "image_id1", "+", "image_id2", "\n", "\n"]], "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.aachen.reconstruct_pipeline.match_features": [[182, 222], ["sqlite3.connect", "sqlite3.connect.cursor", "print", "set", "tqdm.tqdm", "connection.cursor.close", "sqlite3.connect.close", "open", "f.readlines", "raw_pair.strip().split", "torch.from_numpy().to", "torch.from_numpy().to", "matchers.mutual_nn_matcher().astype", "reconstruct_pipeline.image_ids_to_pair_id", "set.add", "numpy.int32().tostring", "connection.cursor.execute", "sqlite3.connect.commit", "len", "raw_pair.strip", "torch.from_numpy", "torch.from_numpy", "matchers.mutual_nn_matcher", "numpy.int32", "numpy.load", "numpy.load"], "function", ["home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.ETH_local_feature.reconstruction_pipeline.image_ids_to_pair_id", "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.ETH_local_feature.custom_matcher.mutual_nn_matcher"], ["", "", "def", "match_features", "(", "images", ",", "paths", ",", "args", ")", ":", "\n", "# Connect to the database.", "\n", "    ", "connection", "=", "sqlite3", ".", "connect", "(", "paths", ".", "database_path", ")", "\n", "cursor", "=", "connection", ".", "cursor", "(", ")", "\n", "\n", "# Match the features and insert the matches in the database.", "\n", "print", "(", "'Matching...'", ")", "\n", "\n", "with", "open", "(", "paths", ".", "match_list_path", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "raw_pairs", "=", "f", ".", "readlines", "(", ")", "\n", "\n", "", "image_pair_ids", "=", "set", "(", ")", "\n", "bar", "=", "tqdm", "(", "raw_pairs", ",", "total", "=", "len", "(", "raw_pairs", ")", ")", "\n", "for", "raw_pair", "in", "bar", ":", "\n", "        ", "image_name1", ",", "image_name2", "=", "raw_pair", ".", "strip", "(", "'\\n'", ")", ".", "split", "(", "' '", ")", "\n", "\n", "features_path1", "=", "paths", ".", "features_path", "/", "'{}.{}'", ".", "format", "(", "image_name1", ",", "args", ".", "method_name", ")", "\n", "features_path2", "=", "paths", ".", "features_path", "/", "'{}.{}'", ".", "format", "(", "image_name2", ",", "args", ".", "method_name", ")", "\n", "\n", "descriptors1", "=", "torch", ".", "from_numpy", "(", "np", ".", "load", "(", "features_path1", ")", "[", "'descriptors'", "]", ")", ".", "to", "(", "device", ")", "\n", "descriptors2", "=", "torch", ".", "from_numpy", "(", "np", ".", "load", "(", "features_path2", ")", "[", "'descriptors'", "]", ")", ".", "to", "(", "device", ")", "\n", "matches", "=", "mutual_nn_matcher", "(", "descriptors1", ",", "descriptors2", ")", ".", "astype", "(", "np", ".", "uint32", ")", "\n", "\n", "image_id1", ",", "image_id2", "=", "images", "[", "image_name1", "]", ",", "images", "[", "image_name2", "]", "\n", "image_pair_id", "=", "image_ids_to_pair_id", "(", "image_id1", ",", "image_id2", ")", "\n", "if", "image_pair_id", "in", "image_pair_ids", ":", "\n", "            ", "continue", "\n", "", "image_pair_ids", ".", "add", "(", "image_pair_id", ")", "\n", "\n", "if", "image_id1", ">", "image_id2", ":", "\n", "            ", "matches", "=", "matches", "[", ":", ",", "[", "1", ",", "0", "]", "]", "\n", "\n", "", "matches_str", "=", "np", ".", "int32", "(", "matches", ")", ".", "tostring", "(", ")", "\n", "cursor", ".", "execute", "(", "\"INSERT INTO matches(pair_id, rows, cols, data) VALUES(?, ?, ?, ?);\"", ",", "\n", "(", "image_pair_id", ",", "matches", ".", "shape", "[", "0", "]", ",", "matches", ".", "shape", "[", "1", "]", ",", "matches_str", ")", ")", "\n", "connection", ".", "commit", "(", ")", "\n", "\n", "# Close the connection to the database.", "\n", "", "cursor", ".", "close", "(", ")", "\n", "connection", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.aachen.reconstruct_pipeline.geometric_verification": [[224, 231], ["print", "subprocess.call", "path.Path"], "function", ["None"], ["", "def", "geometric_verification", "(", "paths", ",", "args", ")", ":", "\n", "    ", "print", "(", "'Running geometric verification...'", ")", "\n", "\n", "subprocess", ".", "call", "(", "[", "Path", "(", "args", ".", "colmap_path", ")", "/", "'colmap'", ",", "'matches_importer'", ",", "\n", "'--database_path'", ",", "paths", ".", "database_path", ",", "\n", "'--match_list_path'", ",", "paths", ".", "match_list_path", ",", "\n", "'--match_type'", ",", "'pairs'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.aachen.reconstruct_pipeline.reconstruct": [[233, 246], ["subprocess.call", "paths.database_model_path.isdir", "paths.database_model_path.makedirs_p", "path.Path"], "function", ["None"], ["", "def", "reconstruct", "(", "paths", ",", "args", ")", ":", "\n", "    ", "if", "not", "paths", ".", "database_model_path", ".", "isdir", "(", ")", ":", "\n", "        ", "paths", ".", "database_model_path", ".", "makedirs_p", "(", ")", "\n", "\n", "# Reconstruct the database model.", "\n", "", "subprocess", ".", "call", "(", "[", "Path", "(", "args", ".", "colmap_path", ")", "/", "'colmap'", ",", "'point_triangulator'", ",", "\n", "'--database_path'", ",", "paths", ".", "database_path", ",", "\n", "'--image_path'", ",", "paths", ".", "image_path", ",", "\n", "'--input_path'", ",", "paths", ".", "empty_model_path", ",", "\n", "'--output_path'", ",", "paths", ".", "database_model_path", ",", "\n", "'--Mapper.ba_refine_focal_length'", ",", "'0'", ",", "\n", "'--Mapper.ba_refine_principal_point'", ",", "'0'", ",", "\n", "'--Mapper.ba_refine_extra_params'", ",", "'0'", ",", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.aachen.reconstruct_pipeline.register_queries": [[248, 260], ["subprocess.call", "paths.final_model_path.isdir", "paths.final_model_path.makedirs_p", "path.Path"], "function", ["None"], ["", "def", "register_queries", "(", "paths", ",", "args", ")", ":", "\n", "    ", "if", "not", "paths", ".", "final_model_path", ".", "isdir", "(", ")", ":", "\n", "        ", "paths", ".", "final_model_path", ".", "makedirs_p", "(", ")", "\n", "\n", "# Register the query images.", "\n", "", "subprocess", ".", "call", "(", "[", "Path", "(", "args", ".", "colmap_path", ")", "/", "'colmap'", ",", "'image_registrator'", ",", "\n", "'--database_path'", ",", "paths", ".", "database_path", ",", "\n", "'--input_path'", ",", "paths", ".", "database_model_path", ",", "\n", "'--output_path'", ",", "paths", ".", "final_model_path", ",", "\n", "'--Mapper.ba_refine_focal_length'", ",", "'0'", ",", "\n", "'--Mapper.ba_refine_principal_point'", ",", "'0'", ",", "\n", "'--Mapper.ba_refine_extra_params'", ",", "'0'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.aachen.reconstruct_pipeline.recover_query_poses": [[262, 312], ["print", "subprocess.call", "set", "open", "open.close", "paths.final_txt_model_path.isdir", "paths.final_txt_model_path.makedirs_p", "raw_query.strip().split.strip().split", "set.add", "open", "open.readlines", "paths.prediction_path.parent.exists", "paths.prediction_path.parent.makedirs_p", "extrinsics.strip().split.strip().split", "path.Path", "open", "open.readlines", "path.Path", "open", "open.readlines", "path.Path", "open", "open.readlines", "f.readlines.extend", "os.path.join", "open.write", "path.Path", "raw_query.strip().split.strip", "extrinsics.strip().split.strip", "image_name.split"], "function", ["None"], ["", "def", "recover_query_poses", "(", "paths", ",", "args", ")", ":", "\n", "    ", "print", "(", "'Recovering query poses...'", ")", "\n", "\n", "if", "not", "paths", ".", "final_txt_model_path", ".", "isdir", "(", ")", ":", "\n", "        ", "paths", ".", "final_txt_model_path", ".", "makedirs_p", "(", ")", "\n", "\n", "# Convert the model to TXT.", "\n", "", "subprocess", ".", "call", "(", "[", "Path", "(", "args", ".", "colmap_path", ")", "/", "'colmap'", ",", "'model_converter'", ",", "\n", "'--input_path'", ",", "paths", ".", "final_model_path", ",", "\n", "'--output_path'", ",", "paths", ".", "final_txt_model_path", ",", "\n", "'--output_type'", ",", "'TXT'", "]", ")", "\n", "\n", "# Recover query names.", "\n", "if", "args", ".", "match_list_path", "==", "'image_pairs_to_match.txt'", ":", "\n", "        ", "query_image_list_path", "=", "Path", "(", "args", ".", "dataset_path", ")", "/", "'queries/night_time_queries_with_intrinsics.txt'", "\n", "with", "open", "(", "query_image_list_path", ")", "as", "f", ":", "\n", "            ", "raw_queries", "=", "f", ".", "readlines", "(", ")", "\n", "", "", "else", ":", "\n", "        ", "query_image_list_path", "=", "Path", "(", "args", ".", "dataset_path", ")", "/", "'queries/night_time_queries_with_intrinsics.txt'", "\n", "with", "open", "(", "query_image_list_path", ")", "as", "f", ":", "\n", "            ", "raw_queries", "=", "f", ".", "readlines", "(", ")", "\n", "", "query_image_list_path", "=", "Path", "(", "args", ".", "dataset_path", ")", "/", "'queries/day_time_queries_with_intrinsics.txt'", "\n", "with", "open", "(", "query_image_list_path", ")", "as", "f", ":", "\n", "            ", "tmp", "=", "f", ".", "readlines", "(", ")", "\n", "raw_queries", ".", "extend", "(", "tmp", ")", "\n", "\n", "", "", "query_names", "=", "set", "(", ")", "\n", "for", "raw_query", "in", "raw_queries", ":", "\n", "        ", "raw_query", "=", "raw_query", ".", "strip", "(", "'\\n'", ")", ".", "split", "(", "' '", ")", "\n", "query_name", "=", "raw_query", "[", "0", "]", "\n", "query_names", ".", "add", "(", "query_name", ")", "\n", "\n", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "paths", ".", "final_txt_model_path", ",", "'images.txt'", ")", ")", "as", "f", ":", "\n", "        ", "raw_extrinsics", "=", "f", ".", "readlines", "(", ")", "\n", "\n", "", "if", "not", "paths", ".", "prediction_path", ".", "parent", ".", "exists", "(", ")", ":", "\n", "        ", "paths", ".", "prediction_path", ".", "parent", ".", "makedirs_p", "(", ")", "\n", "", "f", "=", "open", "(", "paths", ".", "prediction_path", ",", "'w'", ")", "\n", "\n", "# Skip the header.", "\n", "for", "extrinsics", "in", "raw_extrinsics", "[", "4", ":", ":", "2", "]", ":", "\n", "        ", "extrinsics", "=", "extrinsics", ".", "strip", "(", "'\\n'", ")", ".", "split", "(", "' '", ")", "\n", "\n", "image_name", "=", "extrinsics", "[", "-", "1", "]", "\n", "\n", "if", "image_name", "in", "query_names", ":", "\n", "# Skip the IMAGE_ID ([0]), CAMERA_ID ([-2]), and IMAGE_NAME ([-1]).", "\n", "            ", "f", ".", "write", "(", "'%s %s\\n'", "%", "(", "image_name", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", ",", "' '", ".", "join", "(", "extrinsics", "[", "1", ":", "-", "2", "]", ")", ")", ")", "\n", "\n", "", "", "f", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.aachen.camera.Camera.__init__": [[3, 8], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "camera_model", "=", "None", "\n", "self", ".", "intrinsics", "=", "None", "\n", "self", ".", "qvec", "=", "None", "\n", "self", ".", "t", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.aachen.camera.Camera.set_intrinsics": [[9, 12], ["None"], "methods", ["None"], ["", "def", "set_intrinsics", "(", "self", ",", "camera_model", ",", "intrinsics", ")", ":", "\n", "        ", "self", ".", "camera_model", "=", "camera_model", "\n", "self", ".", "intrinsics", "=", "intrinsics", "\n", "\n"]], "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.aachen.camera.Camera.set_pose": [[13, 16], ["None"], "methods", ["None"], ["", "def", "set_pose", "(", "self", ",", "qvec", ",", "t", ")", ":", "\n", "        ", "self", ".", "qvec", "=", "qvec", "\n", "self", ".", "t", "=", "t", "\n", "", "", ""]], "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.aachen.reconstruct_pipeline_v1_1.array_to_blob": [[30, 35], ["array.tostring", "numpy.getbuffer"], "function", ["None"], ["def", "array_to_blob", "(", "array", ")", ":", "\n", "    ", "if", "IS_PYTHON3", ":", "\n", "        ", "return", "array", ".", "tostring", "(", ")", "\n", "", "else", ":", "\n", "        ", "return", "np", ".", "getbuffer", "(", "array", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.aachen.reconstruct_pipeline_v1_1.recover_database_images_and_ids": [[36, 54], ["sqlite3.connect", "sqlite3.connect.cursor", "connection.cursor.execute", "connection.cursor.close", "sqlite3.connect.close"], "function", ["None"], ["", "", "def", "recover_database_images_and_ids", "(", "paths", ",", "args", ")", ":", "\n", "# Connect to the database.", "\n", "    ", "connection", "=", "sqlite3", ".", "connect", "(", "paths", ".", "database_path", ")", "\n", "cursor", "=", "connection", ".", "cursor", "(", ")", "\n", "\n", "# Recover database images and ids.", "\n", "images", "=", "{", "}", "\n", "cameras", "=", "{", "}", "\n", "cursor", ".", "execute", "(", "\"SELECT name, image_id, camera_id FROM images;\"", ")", "\n", "for", "row", "in", "cursor", ":", "\n", "        ", "images", "[", "row", "[", "0", "]", "]", "=", "row", "[", "1", "]", "\n", "cameras", "[", "row", "[", "0", "]", "]", "=", "row", "[", "2", "]", "\n", "\n", "# Close the connection to the database.", "\n", "", "cursor", ".", "close", "(", ")", "\n", "connection", ".", "close", "(", ")", "\n", "\n", "return", "images", ",", "cameras", "\n", "\n"]], "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.aachen.reconstruct_pipeline_v1_1.preprocess_reference_model": [[56, 104], ["print", "int", "open", "f.readlines", "intrinsics.strip().split.strip().split", "camera.Camera", "camera.Camera.set_intrinsics", "open", "f.readlines", "extrinsics.strip().split.strip().split", "numpy.array", "numpy.array", "utils.camera_center_to_translation", "camera_parameters[].set_pose", "os.path.join", "float", "os.path.join", "float", "intrinsics.strip().split.strip", "extrinsics.strip().split.strip"], "function", ["home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.aachen.camera.Camera.set_intrinsics", "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.aachen.utils.camera_center_to_translation", "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.aachen.camera.Camera.set_pose"], ["", "def", "preprocess_reference_model", "(", "paths", ",", "args", ")", ":", "\n", "    ", "print", "(", "'Preprocessing the reference model...'", ")", "\n", "\n", "# Recover intrinsics.", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "paths", ".", "reference_model_path", ",", "'database_intrinsics_v1_1.txt'", ")", ")", "as", "f", ":", "\n", "        ", "raw_intrinsics", "=", "f", ".", "readlines", "(", ")", "\n", "\n", "", "camera_parameters", "=", "{", "}", "\n", "\n", "for", "intrinsics", "in", "raw_intrinsics", ":", "\n", "        ", "intrinsics", "=", "intrinsics", ".", "strip", "(", "'\\n'", ")", ".", "split", "(", "' '", ")", "\n", "\n", "image_name", "=", "intrinsics", "[", "0", "]", "\n", "\n", "camera_model", "=", "intrinsics", "[", "1", "]", "\n", "\n", "intrinsics", "=", "[", "float", "(", "param", ")", "for", "param", "in", "intrinsics", "[", "2", ":", "]", "]", "\n", "\n", "camera", "=", "Camera", "(", ")", "\n", "camera", ".", "set_intrinsics", "(", "camera_model", "=", "camera_model", ",", "intrinsics", "=", "intrinsics", ")", "\n", "\n", "camera_parameters", "[", "image_name", "]", "=", "camera", "\n", "\n", "# Recover poses.", "\n", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "paths", ".", "reference_model_path", ",", "'aachen_v_1_1.nvm'", ")", ")", "as", "f", ":", "\n", "        ", "raw_extrinsics", "=", "f", ".", "readlines", "(", ")", "\n", "\n", "# Skip the header.", "\n", "", "n_cameras", "=", "int", "(", "raw_extrinsics", "[", "2", "]", ")", "\n", "raw_extrinsics", "=", "raw_extrinsics", "[", "3", ":", "3", "+", "n_cameras", "]", "\n", "\n", "for", "extrinsics", "in", "raw_extrinsics", ":", "\n", "        ", "extrinsics", "=", "extrinsics", ".", "strip", "(", "'\\n'", ")", ".", "split", "(", "' '", ")", "\n", "\n", "image_name", "=", "extrinsics", "[", "0", "]", "\n", "\n", "# Skip the focal length. Skip the distortion and terminal 0.", "\n", "qw", ",", "qx", ",", "qy", ",", "qz", ",", "cx", ",", "cy", ",", "cz", "=", "[", "float", "(", "param", ")", "for", "param", "in", "extrinsics", "[", "2", ":", "-", "2", "]", "]", "\n", "\n", "qvec", "=", "np", ".", "array", "(", "[", "qw", ",", "qx", ",", "qy", ",", "qz", "]", ")", "\n", "c", "=", "np", ".", "array", "(", "[", "cx", ",", "cy", ",", "cz", "]", ")", "\n", "\n", "# NVM -> COLMAP.", "\n", "t", "=", "camera_center_to_translation", "(", "c", ",", "qvec", ")", "\n", "\n", "camera_parameters", "[", "image_name", "]", ".", "set_pose", "(", "qvec", "=", "qvec", ",", "t", "=", "t", ")", "\n", "\n", "", "return", "camera_parameters", "\n", "\n"]], "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.aachen.reconstruct_pipeline_v1_1.generate_empty_reconstruction": [[106, 144], ["print", "os.path.exists", "os.mkdir", "open", "open", "open", "os.path.join", "f.write", "os.path.join", "f.write", "os.path.join", "map", "map", "map"], "function", ["None"], ["", "def", "generate_empty_reconstruction", "(", "images", ",", "cameras", ",", "camera_parameters", ",", "paths", ",", "args", ")", ":", "\n", "    ", "print", "(", "'Generating the empty reconstruction...'", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "paths", ".", "empty_model_path", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "paths", ".", "empty_model_path", ")", "\n", "\n", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "paths", ".", "empty_model_path", ",", "'cameras.txt'", ")", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "for", "image_name", "in", "images", ":", "\n", "            ", "image_id", "=", "images", "[", "image_name", "]", "\n", "camera_id", "=", "cameras", "[", "image_name", "]", "\n", "try", ":", "\n", "                ", "camera", "=", "camera_parameters", "[", "image_name", "]", "\n", "", "except", ":", "\n", "                ", "continue", "\n", "", "f", ".", "write", "(", "'%d %s %s\\n'", "%", "(", "\n", "camera_id", ",", "\n", "camera", ".", "camera_model", ",", "\n", "' '", ".", "join", "(", "map", "(", "str", ",", "camera", ".", "intrinsics", ")", ")", "\n", ")", ")", "\n", "\n", "", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "paths", ".", "empty_model_path", ",", "'images.txt'", ")", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "for", "image_name", "in", "images", ":", "\n", "            ", "image_id", "=", "images", "[", "image_name", "]", "\n", "camera_id", "=", "cameras", "[", "image_name", "]", "\n", "try", ":", "\n", "                ", "camera", "=", "camera_parameters", "[", "image_name", "]", "\n", "", "except", ":", "\n", "                ", "continue", "\n", "", "f", ".", "write", "(", "'%d %s %s %d %s\\n\\n'", "%", "(", "\n", "image_id", ",", "\n", "' '", ".", "join", "(", "map", "(", "str", ",", "camera", ".", "qvec", ")", ")", ",", "\n", "' '", ".", "join", "(", "map", "(", "str", ",", "camera", ".", "t", ")", ")", ",", "\n", "camera_id", ",", "\n", "image_name", "\n", ")", ")", "\n", "\n", "", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "paths", ".", "empty_model_path", ",", "'points3D.txt'", ")", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.aachen.reconstruct_pipeline_v1_1.import_features": [[146, 173], ["sqlite3.connect", "sqlite3.connect.cursor", "print", "tqdm.tqdm", "connection.cursor.close", "sqlite3.connect.close", "images.items", "os.path.join", "numpy.concatenate().astype", "np.concatenate().astype.tostring", "connection.cursor.execute", "sqlite3.connect.commit", "len", "numpy.load", "images.items", "numpy.concatenate", "numpy.ones", "numpy.zeros"], "function", ["None"], ["", "", "def", "import_features", "(", "images", ",", "paths", ",", "args", ")", ":", "\n", "# Connect to the database.", "\n", "    ", "connection", "=", "sqlite3", ".", "connect", "(", "paths", ".", "database_path", ")", "\n", "cursor", "=", "connection", ".", "cursor", "(", ")", "\n", "\n", "# Import the features.", "\n", "print", "(", "'Importing features...'", ")", "\n", "\n", "for", "image_name", ",", "image_id", "in", "tqdm", "(", "images", ".", "items", "(", ")", ",", "total", "=", "len", "(", "images", ".", "items", "(", ")", ")", ")", ":", "\n", "        ", "features_path", "=", "os", ".", "path", ".", "join", "(", "paths", ".", "features_path", ",", "'%s.%s'", "%", "(", "image_name", ",", "args", ".", "method_name", ")", ")", "\n", "\n", "keypoints", "=", "np", ".", "load", "(", "features_path", ")", "[", "'keypoints'", "]", "\n", "n_keypoints", "=", "keypoints", ".", "shape", "[", "0", "]", "\n", "\n", "# Keep only x, y coordinates.", "\n", "keypoints", "=", "keypoints", "[", ":", ",", ":", "2", "]", "\n", "# Add placeholder scale, orientation.", "\n", "keypoints", "=", "np", ".", "concatenate", "(", "[", "keypoints", ",", "np", ".", "ones", "(", "(", "n_keypoints", ",", "1", ")", ")", ",", "np", ".", "zeros", "(", "(", "n_keypoints", ",", "1", ")", ")", "]", ",", "axis", "=", "1", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "keypoints_str", "=", "keypoints", ".", "tostring", "(", ")", "\n", "cursor", ".", "execute", "(", "\"INSERT INTO keypoints(image_id, rows, cols, data) VALUES(?, ?, ?, ?);\"", ",", "\n", "(", "image_id", ",", "keypoints", ".", "shape", "[", "0", "]", ",", "keypoints", ".", "shape", "[", "1", "]", ",", "keypoints_str", ")", ")", "\n", "connection", ".", "commit", "(", ")", "\n", "\n", "# Close the connection to the database.", "\n", "", "cursor", ".", "close", "(", ")", "\n", "connection", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.aachen.reconstruct_pipeline_v1_1.image_ids_to_pair_id": [[175, 180], ["None"], "function", ["None"], ["", "def", "image_ids_to_pair_id", "(", "image_id1", ",", "image_id2", ")", ":", "\n", "    ", "if", "image_id1", ">", "image_id2", ":", "\n", "        ", "return", "2147483647", "*", "image_id2", "+", "image_id1", "\n", "", "else", ":", "\n", "        ", "return", "2147483647", "*", "image_id1", "+", "image_id2", "\n", "\n"]], "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.aachen.reconstruct_pipeline_v1_1.match_features": [[182, 221], ["sqlite3.connect", "sqlite3.connect.cursor", "print", "set", "tqdm.tqdm", "connection.cursor.close", "sqlite3.connect.close", "open", "f.readlines", "raw_pair.strip().split", "os.path.join", "os.path.join", "torch.from_numpy().to", "torch.from_numpy().to", "matchers.mutual_nn_matcher().astype", "reconstruct_pipeline_v1_1.image_ids_to_pair_id", "set.add", "mutual_nn_matcher().astype.tostring", "connection.cursor.execute", "sqlite3.connect.commit", "len", "raw_pair.strip", "torch.from_numpy", "torch.from_numpy", "matchers.mutual_nn_matcher", "numpy.load", "numpy.load"], "function", ["home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.ETH_local_feature.reconstruction_pipeline.image_ids_to_pair_id", "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.ETH_local_feature.custom_matcher.mutual_nn_matcher"], ["", "", "def", "match_features", "(", "images", ",", "paths", ",", "args", ")", ":", "\n", "# Connect to the database.", "\n", "    ", "connection", "=", "sqlite3", ".", "connect", "(", "paths", ".", "database_path", ")", "\n", "cursor", "=", "connection", ".", "cursor", "(", ")", "\n", "\n", "# Match the features and insert the matches in the database.", "\n", "print", "(", "'Matching...'", ")", "\n", "\n", "with", "open", "(", "paths", ".", "match_list_path", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "raw_pairs", "=", "f", ".", "readlines", "(", ")", "\n", "\n", "", "image_pair_ids", "=", "set", "(", ")", "\n", "for", "raw_pair", "in", "tqdm", "(", "raw_pairs", ",", "total", "=", "len", "(", "raw_pairs", ")", ")", ":", "\n", "        ", "image_name1", ",", "image_name2", "=", "raw_pair", ".", "strip", "(", "'\\n'", ")", ".", "split", "(", "' '", ")", "\n", "\n", "features_path1", "=", "os", ".", "path", ".", "join", "(", "paths", ".", "features_path", ",", "'%s.%s'", "%", "(", "image_name1", ",", "args", ".", "method_name", ")", ")", "\n", "features_path2", "=", "os", ".", "path", ".", "join", "(", "paths", ".", "features_path", ",", "'%s.%s'", "%", "(", "image_name2", ",", "args", ".", "method_name", ")", ")", "\n", "\n", "descriptors1", "=", "torch", ".", "from_numpy", "(", "np", ".", "load", "(", "features_path1", ")", "[", "'descriptors'", "]", ")", ".", "to", "(", "device", ")", "\n", "descriptors2", "=", "torch", ".", "from_numpy", "(", "np", ".", "load", "(", "features_path2", ")", "[", "'descriptors'", "]", ")", ".", "to", "(", "device", ")", "\n", "matches", "=", "mutual_nn_matcher", "(", "descriptors1", ",", "descriptors2", ")", ".", "astype", "(", "np", ".", "uint32", ")", "\n", "\n", "image_id1", ",", "image_id2", "=", "images", "[", "image_name1", "]", ",", "images", "[", "image_name2", "]", "\n", "image_pair_id", "=", "image_ids_to_pair_id", "(", "image_id1", ",", "image_id2", ")", "\n", "if", "image_pair_id", "in", "image_pair_ids", ":", "\n", "            ", "continue", "\n", "", "image_pair_ids", ".", "add", "(", "image_pair_id", ")", "\n", "\n", "if", "image_id1", ">", "image_id2", ":", "\n", "            ", "matches", "=", "matches", "[", ":", ",", "[", "1", ",", "0", "]", "]", "\n", "\n", "", "matches_str", "=", "matches", ".", "tostring", "(", ")", "\n", "cursor", ".", "execute", "(", "\"INSERT INTO matches(pair_id, rows, cols, data) VALUES(?, ?, ?, ?);\"", ",", "\n", "(", "image_pair_id", ",", "matches", ".", "shape", "[", "0", "]", ",", "matches", ".", "shape", "[", "1", "]", ",", "matches_str", ")", ")", "\n", "connection", ".", "commit", "(", ")", "\n", "\n", "# Close the connection to the database.", "\n", "", "cursor", ".", "close", "(", ")", "\n", "connection", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.aachen.reconstruct_pipeline_v1_1.geometric_verification": [[223, 230], ["print", "subprocess.call", "os.path.join"], "function", ["None"], ["", "def", "geometric_verification", "(", "paths", ",", "args", ")", ":", "\n", "    ", "print", "(", "'Running geometric verification...'", ")", "\n", "\n", "subprocess", ".", "call", "(", "[", "os", ".", "path", ".", "join", "(", "args", ".", "colmap_path", ",", "'colmap'", ")", ",", "'matches_importer'", ",", "\n", "'--database_path'", ",", "paths", ".", "database_path", ",", "\n", "'--match_list_path'", ",", "paths", ".", "match_list_path", ",", "\n", "'--match_type'", ",", "'pairs'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.aachen.reconstruct_pipeline_v1_1.reconstruct": [[232, 245], ["subprocess.call", "os.path.isdir", "os.mkdir", "os.path.join"], "function", ["None"], ["", "def", "reconstruct", "(", "paths", ",", "args", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "isdir", "(", "paths", ".", "database_model_path", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "paths", ".", "database_model_path", ")", "\n", "\n", "# Reconstruct the database model.", "\n", "", "subprocess", ".", "call", "(", "[", "os", ".", "path", ".", "join", "(", "args", ".", "colmap_path", ",", "'colmap'", ")", ",", "'point_triangulator'", ",", "\n", "'--database_path'", ",", "paths", ".", "database_path", ",", "\n", "'--image_path'", ",", "paths", ".", "image_path", ",", "\n", "'--input_path'", ",", "paths", ".", "empty_model_path", ",", "\n", "'--output_path'", ",", "paths", ".", "database_model_path", ",", "\n", "'--Mapper.ba_refine_focal_length'", ",", "'0'", ",", "\n", "'--Mapper.ba_refine_principal_point'", ",", "'0'", ",", "\n", "'--Mapper.ba_refine_extra_params'", ",", "'0'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.aachen.reconstruct_pipeline_v1_1.register_queries": [[247, 259], ["subprocess.call", "os.path.isdir", "os.mkdir", "os.path.join"], "function", ["None"], ["", "def", "register_queries", "(", "paths", ",", "args", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "isdir", "(", "paths", ".", "final_model_path", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "paths", ".", "final_model_path", ")", "\n", "\n", "# Register the query images.", "\n", "", "subprocess", ".", "call", "(", "[", "os", ".", "path", ".", "join", "(", "args", ".", "colmap_path", ",", "'colmap'", ")", ",", "'image_registrator'", ",", "\n", "'--database_path'", ",", "paths", ".", "database_path", ",", "\n", "'--input_path'", ",", "paths", ".", "database_model_path", ",", "\n", "'--output_path'", ",", "paths", ".", "final_model_path", ",", "\n", "'--Mapper.ba_refine_focal_length'", ",", "'0'", ",", "\n", "'--Mapper.ba_refine_principal_point'", ",", "'0'", ",", "\n", "'--Mapper.ba_refine_extra_params'", ",", "'0'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.aachen.reconstruct_pipeline_v1_1.recover_query_poses": [[261, 303], ["print", "subprocess.call", "os.path.join", "set", "open", "open.close", "os.path.isdir", "os.mkdir", "open", "open.readlines", "raw_query.strip().split.strip().split", "set.add", "open", "open.readlines", "paths.prediction_path.parent.exists", "paths.prediction_path.parent.makedirs_p", "extrinsics.strip().split.strip().split", "os.path.join", "os.path.join", "open.write", "raw_query.strip().split.strip", "extrinsics.strip().split.strip", "image_name.split"], "function", ["None"], ["", "def", "recover_query_poses", "(", "paths", ",", "args", ")", ":", "\n", "    ", "print", "(", "'Recovering query poses...'", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "paths", ".", "final_txt_model_path", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "paths", ".", "final_txt_model_path", ")", "\n", "\n", "# Convert the model to TXT.", "\n", "", "subprocess", ".", "call", "(", "[", "os", ".", "path", ".", "join", "(", "args", ".", "colmap_path", ",", "'colmap'", ")", ",", "'model_converter'", ",", "\n", "'--input_path'", ",", "paths", ".", "final_model_path", ",", "\n", "'--output_path'", ",", "paths", ".", "final_txt_model_path", ",", "\n", "'--output_type'", ",", "'TXT'", "]", ")", "\n", "\n", "# Recover query names.", "\n", "query_image_list_path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "dataset_path", ",", "'queries/night_time_queries_with_intrinsics_v1_1.txt'", ")", "\n", "\n", "with", "open", "(", "query_image_list_path", ")", "as", "f", ":", "\n", "        ", "raw_queries", "=", "f", ".", "readlines", "(", ")", "\n", "\n", "", "query_names", "=", "set", "(", ")", "\n", "for", "raw_query", "in", "raw_queries", ":", "\n", "        ", "raw_query", "=", "raw_query", ".", "strip", "(", "'\\n'", ")", ".", "split", "(", "' '", ")", "\n", "query_name", "=", "raw_query", "[", "0", "]", "\n", "query_names", ".", "add", "(", "query_name", ")", "\n", "\n", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "paths", ".", "final_txt_model_path", ",", "'images.txt'", ")", ")", "as", "f", ":", "\n", "        ", "raw_extrinsics", "=", "f", ".", "readlines", "(", ")", "\n", "\n", "", "if", "not", "paths", ".", "prediction_path", ".", "parent", ".", "exists", "(", ")", ":", "\n", "        ", "paths", ".", "prediction_path", ".", "parent", ".", "makedirs_p", "(", ")", "\n", "", "f", "=", "open", "(", "paths", ".", "prediction_path", ",", "'w'", ")", "\n", "\n", "# Skip the header.", "\n", "for", "extrinsics", "in", "raw_extrinsics", "[", "4", ":", ":", "2", "]", ":", "\n", "        ", "extrinsics", "=", "extrinsics", ".", "strip", "(", "'\\n'", ")", ".", "split", "(", "' '", ")", "\n", "\n", "image_name", "=", "extrinsics", "[", "-", "1", "]", "\n", "\n", "if", "image_name", "in", "query_names", ":", "\n", "# Skip the IMAGE_ID ([0]), CAMERA_ID ([-2]), and IMAGE_NAME ([-1]).", "\n", "            ", "f", ".", "write", "(", "'%s %s\\n'", "%", "(", "image_name", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", ",", "' '", ".", "join", "(", "extrinsics", "[", "1", ":", "-", "2", "]", ")", ")", ")", "\n", "\n", "", "", "f", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.aachen.utils.quaternion_to_rotation_matrix": [[3, 10], ["numpy.array", "numpy.linalg.norm"], "function", ["None"], ["def", "quaternion_to_rotation_matrix", "(", "qvec", ")", ":", "\n", "    ", "qvec", "=", "qvec", "/", "np", ".", "linalg", ".", "norm", "(", "qvec", ")", "\n", "w", ",", "x", ",", "y", ",", "z", "=", "qvec", "\n", "R", "=", "np", ".", "array", "(", "[", "[", "1", "-", "2", "*", "y", "*", "y", "-", "2", "*", "z", "*", "z", ",", "2", "*", "x", "*", "y", "-", "2", "*", "z", "*", "w", ",", "2", "*", "x", "*", "z", "+", "2", "*", "y", "*", "w", "]", ",", "\n", "[", "2", "*", "x", "*", "y", "+", "2", "*", "z", "*", "w", ",", "1", "-", "2", "*", "x", "*", "x", "-", "2", "*", "z", "*", "z", ",", "2", "*", "y", "*", "z", "-", "2", "*", "x", "*", "w", "]", ",", "\n", "[", "2", "*", "x", "*", "z", "-", "2", "*", "y", "*", "w", ",", "2", "*", "y", "*", "z", "+", "2", "*", "x", "*", "w", ",", "1", "-", "2", "*", "x", "*", "x", "-", "2", "*", "y", "*", "y", "]", "]", ")", "\n", "return", "R", "\n", "\n"]], "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.aachen.utils.camera_center_to_translation": [[12, 15], ["utils.quaternion_to_rotation_matrix", "numpy.matmul"], "function", ["home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.aachen.utils.quaternion_to_rotation_matrix"], ["", "def", "camera_center_to_translation", "(", "c", ",", "qvec", ")", ":", "\n", "    ", "R", "=", "quaternion_to_rotation_matrix", "(", "qvec", ")", "\n", "return", "(", "-", "1", ")", "*", "np", ".", "matmul", "(", "R", ",", "c", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.hpatches.evaluation.mnn_matcher": [[27, 39], ["torch.no_grad", "torch.arange", "torch.stack", "torch.stack.t().data.cpu().numpy", "descriptors_b.t", "torch.max", "torch.max", "torch.stack.t().data.cpu", "torch.stack.t"], "function", ["None"], ["@", "torch", ".", "no_grad", "(", ")", "\n", "def", "mnn_matcher", "(", "descriptors_a", ",", "descriptors_b", ")", ":", "\n", "    ", "device", "=", "descriptors_a", ".", "device", "\n", "sim", "=", "descriptors_a", "@", "descriptors_b", ".", "t", "(", ")", "\n", "# print(sim)", "\n", "# print(sim.max(), sim.min())", "\n", "nn12", "=", "torch", ".", "max", "(", "sim", ",", "dim", "=", "1", ")", "[", "1", "]", "\n", "nn21", "=", "torch", ".", "max", "(", "sim", ",", "dim", "=", "0", ")", "[", "1", "]", "\n", "ids1", "=", "torch", ".", "arange", "(", "0", ",", "sim", ".", "shape", "[", "0", "]", ",", "device", "=", "device", ")", "\n", "mask", "=", "(", "ids1", "==", "nn21", "[", "nn12", "]", ")", "\n", "matches", "=", "torch", ".", "stack", "(", "[", "ids1", "[", "mask", "]", ",", "nn12", "[", "mask", "]", "]", ")", "\n", "return", "matches", ".", "t", "(", ")", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.hpatches.evaluation.benchmark_features": [[40, 97], ["sorted", "tqdm.tqdm", "numpy.array", "numpy.array", "numpy.array", "dataset_path.listdir", "enumerate", "read_feats", "np.array.append", "range", "len", "read_feats", "np.array.append", "evaluation.mnn_matcher", "numpy.loadtxt", "numpy.concatenate", "numpy.transpose", "numpy.sqrt", "np.array.append", "np.array.append", "torch.from_numpy().to", "torch.from_numpy().to", "numpy.dot", "numpy.sum", "numpy.array", "numpy.ones", "numpy.transpose", "numpy.mean", "numpy.mean", "torch.from_numpy", "torch.from_numpy", "float"], "function", ["home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.losses.preprocess_utils.mnn_matcher"], ["", "def", "benchmark_features", "(", "read_feats", ")", ":", "\n", "    ", "seq_names", "=", "sorted", "(", "dataset_path", ".", "listdir", "(", ")", ")", "\n", "\n", "n_feats", "=", "[", "]", "\n", "n_matches", "=", "[", "]", "\n", "seq_type", "=", "[", "]", "\n", "i_err", "=", "{", "thr", ":", "0", "for", "thr", "in", "rng", "}", "\n", "v_err", "=", "{", "thr", ":", "0", "for", "thr", "in", "rng", "}", "\n", "\n", "for", "seq_idx", ",", "seq_name", "in", "tqdm", "(", "enumerate", "(", "seq_names", ")", ",", "total", "=", "len", "(", "seq_names", ")", ")", ":", "\n", "        ", "seq_name", "=", "seq_name", ".", "name", "\n", "keypoints_a", ",", "descriptors_a", "=", "read_feats", "(", "seq_name", ",", "1", ")", "\n", "if", "keypoints_a", ".", "shape", "[", "0", "]", ">", "60000", ":", "\n", "            ", "keypoints_a", "=", "keypoints_a", "[", ":", "60000", ",", ":", "]", "\n", "descriptors_a", "=", "descriptors_a", "[", ":", "60000", ",", ":", "]", "\n", "", "n_feats", ".", "append", "(", "keypoints_a", ".", "shape", "[", "0", "]", ")", "\n", "\n", "for", "im_idx", "in", "range", "(", "2", ",", "7", ")", ":", "\n", "            ", "keypoints_b", ",", "descriptors_b", "=", "read_feats", "(", "seq_name", ",", "im_idx", ")", "\n", "if", "keypoints_b", ".", "shape", "[", "0", "]", ">", "60000", ":", "\n", "                ", "keypoints_b", "=", "keypoints_b", "[", ":", "60000", ",", ":", "]", "\n", "descriptors_b", "=", "descriptors_b", "[", ":", "60000", ",", ":", "]", "\n", "", "n_feats", ".", "append", "(", "keypoints_b", ".", "shape", "[", "0", "]", ")", "\n", "\n", "matches", "=", "mnn_matcher", "(", "\n", "torch", ".", "from_numpy", "(", "descriptors_a", ")", ".", "to", "(", "device", "=", "device", ")", ",", "\n", "torch", ".", "from_numpy", "(", "descriptors_b", ")", ".", "to", "(", "device", "=", "device", ")", "\n", ")", "\n", "\n", "homography", "=", "np", ".", "loadtxt", "(", "dataset_path", "/", "\"{}/H_1_{}\"", ".", "format", "(", "seq_name", ",", "im_idx", ")", ")", "\n", "\n", "pos_a", "=", "keypoints_a", "[", "matches", "[", ":", ",", "0", "]", ",", ":", "2", "]", "\n", "pos_a_h", "=", "np", ".", "concatenate", "(", "[", "pos_a", ",", "np", ".", "ones", "(", "[", "matches", ".", "shape", "[", "0", "]", ",", "1", "]", ")", "]", ",", "axis", "=", "1", ")", "\n", "pos_b_proj_h", "=", "np", ".", "transpose", "(", "np", ".", "dot", "(", "homography", ",", "np", ".", "transpose", "(", "pos_a_h", ")", ")", ")", "\n", "pos_b_proj", "=", "pos_b_proj_h", "[", ":", ",", ":", "2", "]", "/", "pos_b_proj_h", "[", ":", ",", "2", ":", "]", "\n", "\n", "pos_b", "=", "keypoints_b", "[", "matches", "[", ":", ",", "1", "]", ",", ":", "2", "]", "\n", "\n", "dist", "=", "np", ".", "sqrt", "(", "np", ".", "sum", "(", "(", "pos_b", "-", "pos_b_proj", ")", "**", "2", ",", "axis", "=", "1", ")", ")", "\n", "\n", "n_matches", ".", "append", "(", "matches", ".", "shape", "[", "0", "]", ")", "\n", "seq_type", ".", "append", "(", "seq_name", "[", "0", "]", ")", "\n", "\n", "if", "dist", ".", "shape", "[", "0", "]", "==", "0", ":", "\n", "                ", "dist", "=", "np", ".", "array", "(", "[", "float", "(", "\"inf\"", ")", "]", ")", "\n", "\n", "", "for", "thr", "in", "rng", ":", "\n", "                ", "if", "seq_name", "[", "0", "]", "==", "'i'", ":", "\n", "                    ", "i_err", "[", "thr", "]", "+=", "np", ".", "mean", "(", "dist", "<=", "thr", ")", "\n", "", "else", ":", "\n", "                    ", "v_err", "[", "thr", "]", "+=", "np", ".", "mean", "(", "dist", "<=", "thr", ")", "\n", "\n", "", "", "", "", "seq_type", "=", "np", ".", "array", "(", "seq_type", ")", "\n", "n_feats", "=", "np", ".", "array", "(", "n_feats", ")", "\n", "n_matches", "=", "np", ".", "array", "(", "n_matches", ")", "\n", "\n", "return", "i_err", ",", "v_err", ",", "[", "seq_type", ",", "n_feats", ",", "n_matches", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.hpatches.evaluation.summary": [[98, 105], ["print", "print", "numpy.mean", "numpy.min", "numpy.max", "numpy.sum", "numpy.sum", "numpy.sum"], "function", ["None"], ["", "def", "summary", "(", "stats", ")", ":", "\n", "    ", "seq_type", ",", "n_feats", ",", "n_matches", "=", "stats", "\n", "print", "(", "'# Features: {:f} - [{:d}, {:d}]'", ".", "format", "(", "np", ".", "mean", "(", "n_feats", ")", ",", "np", ".", "min", "(", "n_feats", ")", ",", "np", ".", "max", "(", "n_feats", ")", ")", ")", "\n", "print", "(", "'# Matches: Overall {:f}, Illumination {:f}, Viewpoint {:f}'", ".", "format", "(", "\n", "np", ".", "sum", "(", "n_matches", ")", "/", "(", "(", "n_i", "+", "n_v", ")", "*", "5", ")", ",", "\n", "np", ".", "sum", "(", "n_matches", "[", "seq_type", "==", "'i'", "]", ")", "/", "(", "n_i", "*", "5", ")", ",", "\n", "np", ".", "sum", "(", "n_matches", "[", "seq_type", "==", "'v'", "]", ")", "/", "(", "n_v", "*", "5", ")", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.hpatches.evaluation.generate_read_function": [[106, 116], ["numpy.load", "numpy.argsort"], "function", ["None"], ["", "def", "generate_read_function", "(", "method", ",", "extension", "=", "'ppm'", ")", ":", "\n", "    ", "def", "read_function", "(", "seq_name", ",", "im_idx", ")", ":", "\n", "        ", "aux", "=", "np", ".", "load", "(", "features_path", "/", "\"{}/{}.{}.{}\"", ".", "format", "(", "seq_name", ",", "im_idx", ",", "extension", ",", "method", ")", ")", "\n", "if", "top_k", "is", "None", ":", "\n", "            ", "return", "aux", "[", "'keypoints'", "]", ",", "aux", "[", "'descriptors'", "]", "\n", "", "else", ":", "\n", "            ", "assert", "(", "'scores'", "in", "aux", ")", "\n", "ids", "=", "np", ".", "argsort", "(", "aux", "[", "'scores'", "]", ")", "[", "-", "top_k", ":", "]", "\n", "return", "aux", "[", "'keypoints'", "]", "[", "ids", ",", ":", "]", ",", "aux", "[", "'descriptors'", "]", "[", "ids", ",", ":", "]", "\n", "", "", "return", "read_function", "\n", "\n"]], "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.hpatches.evaluation.sift_to_rootsift": [[117, 119], ["numpy.sqrt", "numpy.expand_dims", "numpy.sum", "numpy.abs"], "function", ["None"], ["", "def", "sift_to_rootsift", "(", "descriptors", ")", ":", "\n", "    ", "return", "np", ".", "sqrt", "(", "descriptors", "/", "np", ".", "expand_dims", "(", "np", ".", "sum", "(", "np", ".", "abs", "(", "descriptors", ")", ",", "axis", "=", "1", ")", ",", "axis", "=", "1", ")", "+", "1e-16", ")", "\n", "", "def", "parse_mat", "(", "mat", ")", ":", "\n"]], "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.hpatches.evaluation.parse_mat": [[119, 130], ["evaluation.sift_to_rootsift", "numpy.expand_dims", "numpy.sum", "numpy.argsort"], "function", ["home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.hpatches.evaluation.sift_to_rootsift"], ["", "def", "parse_mat", "(", "mat", ")", ":", "\n", "    ", "keypoints", "=", "mat", "[", "'keypoints'", "]", "[", ":", ",", ":", "2", "]", "\n", "raw_descriptors", "=", "mat", "[", "'descriptors'", "]", "\n", "l2_norm_descriptors", "=", "raw_descriptors", "/", "np", ".", "expand_dims", "(", "np", ".", "sum", "(", "raw_descriptors", "**", "2", ",", "axis", "=", "1", ")", ",", "axis", "=", "1", ")", "\n", "descriptors", "=", "sift_to_rootsift", "(", "l2_norm_descriptors", ")", "\n", "if", "top_k", "is", "None", ":", "\n", "        ", "return", "keypoints", ",", "descriptors", "\n", "", "else", ":", "\n", "        ", "assert", "(", "'scores'", "in", "mat", ")", "\n", "ids", "=", "np", ".", "argsort", "(", "mat", "[", "'scores'", "]", "[", "0", "]", ")", "[", "-", "top_k", ":", "]", "\n", "return", "keypoints", "[", "ids", ",", ":", "]", ",", "descriptors", "[", "ids", ",", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.ETH_local_feature.custom_matcher.mutual_nn_matcher": [[5, 14], ["torch.arange", "torch.stack().t", "torch.stack().t.data.cpu().numpy", "descriptors2.t", "torch.max", "torch.max", "torch.stack", "torch.stack().t.data.cpu"], "function", ["None"], ["def", "mutual_nn_matcher", "(", "descriptors1", ",", "descriptors2", ",", "**", "args", ")", ":", "\n", "    ", "device", "=", "descriptors1", ".", "device", "\n", "sim", "=", "descriptors1", "@", "descriptors2", ".", "t", "(", ")", "\n", "nn12", "=", "torch", ".", "max", "(", "sim", ",", "dim", "=", "1", ")", "[", "1", "]", "\n", "nn21", "=", "torch", ".", "max", "(", "sim", ",", "dim", "=", "0", ")", "[", "1", "]", "\n", "ids1", "=", "torch", ".", "arange", "(", "0", ",", "sim", ".", "shape", "[", "0", "]", ",", "device", "=", "device", ")", "\n", "mask", "=", "ids1", "==", "nn21", "[", "nn12", "]", "\n", "matches", "=", "torch", ".", "stack", "(", "[", "ids1", "[", "mask", "]", ",", "nn12", "[", "mask", "]", "]", ")", ".", "t", "(", ")", "\n", "return", "matches", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.ETH_local_feature.custom_matcher.ratio_matcher": [[16, 44], ["torch.topk", "torch.sqrt", "torch.topk", "torch.sqrt", "torch.arange", "torch.min", "torch.stack", "torch.stack.data.cpu().numpy", "descriptors2.t", "sim.t", "torch.stack.data.cpu"], "function", ["None"], ["", "def", "ratio_matcher", "(", "descriptors1", ",", "descriptors2", ",", "ratio", "=", "0.95", ")", ":", "\n", "    ", "device", "=", "descriptors1", ".", "device", "\n", "sim", "=", "descriptors1", "@", "descriptors2", ".", "t", "(", ")", "\n", "\n", "# Retrieve top 2 nearest neighbors 1->2.", "\n", "nns_sim", ",", "nns", "=", "torch", ".", "topk", "(", "sim", ",", "2", ",", "dim", "=", "1", ")", "\n", "nns_dist", "=", "torch", ".", "sqrt", "(", "2", "-", "2", "*", "nns_sim", ")", "\n", "# Compute Lowe's ratio.", "\n", "ratios12", "=", "nns_dist", "[", ":", ",", "0", "]", "/", "(", "nns_dist", "[", ":", ",", "1", "]", "+", "1e-8", ")", "\n", "# Save first NN.", "\n", "nn12", "=", "nns", "[", ":", ",", "0", "]", "\n", "\n", "# Retrieve top 2 nearest neighbors 1->2.", "\n", "nns_sim", ",", "nns", "=", "torch", ".", "topk", "(", "sim", ".", "t", "(", ")", ",", "2", ",", "dim", "=", "1", ")", "\n", "nns_dist", "=", "torch", ".", "sqrt", "(", "2", "-", "2", "*", "nns_sim", ")", "\n", "# Compute Lowe's ratio.", "\n", "ratios21", "=", "nns_dist", "[", ":", ",", "0", "]", "/", "(", "nns_dist", "[", ":", ",", "1", "]", "+", "1e-8", ")", "\n", "# Save first NN.", "\n", "nn21", "=", "nns", "[", ":", ",", "0", "]", "\n", "\n", "# Symmetric ratio test.", "\n", "ids1", "=", "torch", ".", "arange", "(", "0", ",", "sim", ".", "shape", "[", "0", "]", ",", "device", "=", "device", ")", "\n", "mask", "=", "torch", ".", "min", "(", "ratios12", "<=", "ratio", ",", "ratios21", "[", "nn12", "]", "<=", "ratio", ")", "\n", "\n", "# Final matches.", "\n", "matches", "=", "torch", ".", "stack", "(", "[", "ids1", "[", "mask", "]", ",", "nn12", "[", "mask", "]", "]", ",", "dim", "=", "-", "1", ")", "\n", "\n", "return", "matches", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.ETH_local_feature.custom_matcher.mutual_nn_ratio_matcher": [[47, 75], ["torch.topk", "torch.sqrt", "torch.topk", "torch.sqrt", "torch.arange", "torch.min", "torch.stack", "torch.stack.data.cpu().numpy", "descriptors2.t", "sim.t", "torch.min", "torch.stack.data.cpu"], "function", ["None"], ["", "def", "mutual_nn_ratio_matcher", "(", "descriptors1", ",", "descriptors2", ",", "ratio", "=", "0.95", ")", ":", "\n", "    ", "device", "=", "descriptors1", ".", "device", "\n", "sim", "=", "descriptors1", "@", "descriptors2", ".", "t", "(", ")", "\n", "\n", "# Retrieve top 2 nearest neighbors 1->2.", "\n", "nns_sim", ",", "nns", "=", "torch", ".", "topk", "(", "sim", ",", "2", ",", "dim", "=", "1", ")", "\n", "nns_dist", "=", "torch", ".", "sqrt", "(", "2", "-", "2", "*", "nns_sim", ")", "\n", "# Compute Lowe's ratio.", "\n", "ratios12", "=", "nns_dist", "[", ":", ",", "0", "]", "/", "(", "nns_dist", "[", ":", ",", "1", "]", "+", "1e-8", ")", "\n", "# Save first NN and match similarity.", "\n", "nn12", "=", "nns", "[", ":", ",", "0", "]", "\n", "\n", "# Retrieve top 2 nearest neighbors 1->2.", "\n", "nns_sim", ",", "nns", "=", "torch", ".", "topk", "(", "sim", ".", "t", "(", ")", ",", "2", ",", "dim", "=", "1", ")", "\n", "nns_dist", "=", "torch", ".", "sqrt", "(", "2", "-", "2", "*", "nns_sim", ")", "\n", "# Compute Lowe's ratio.", "\n", "ratios21", "=", "nns_dist", "[", ":", ",", "0", "]", "/", "(", "nns_dist", "[", ":", ",", "1", "]", "+", "1e-8", ")", "\n", "# Save first NN.", "\n", "nn21", "=", "nns", "[", ":", ",", "0", "]", "\n", "\n", "# Mutual NN + symmetric ratio test.", "\n", "ids1", "=", "torch", ".", "arange", "(", "0", ",", "sim", ".", "shape", "[", "0", "]", ",", "device", "=", "device", ")", "\n", "mask", "=", "torch", ".", "min", "(", "ids1", "==", "nn21", "[", "nn12", "]", ",", "torch", ".", "min", "(", "ratios12", "<=", "ratio", ",", "ratios21", "[", "nn12", "]", "<=", "ratio", ")", ")", "\n", "\n", "# Final matches.", "\n", "matches", "=", "torch", ".", "stack", "(", "[", "ids1", "[", "mask", "]", ",", "nn12", "[", "mask", "]", "]", ",", "dim", "=", "-", "1", ")", "\n", "\n", "return", "matches", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "", "", ""]], "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.ETH_local_feature.reconstruction_pipeline.parse_args": [[28, 46], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.ETH_local_feature.reconstruction_pipeline.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "# parser.add_argument(\"--dataset_path\", required=True,", "\n", "#                     help=\"Path to the dataset, e.g., path/to/Fountain\")", "\n", "# parser.add_argument(\"--colmap_path\", required=True,", "\n", "#                     help=\"Path to the COLMAP executable folder, e.g., \"", "\n", "#                          \"path/to/colmap/build/src/exe\")", "\n", "# parser.add_argument(\"--features_path\", required=True,", "\n", "#                     help=\"Path to the features folder, e.g., \"", "\n", "#                          \"path/to/feature\")", "\n", "# parser.add_argument(\"--method_postfix\", required=True,", "\n", "#                     help=\"the postfix of the method\")", "\n", "# parser.add_argument(\"--matcher\", required=True,", "\n", "#                     help=\"the matcher\")", "\n", "parser", ".", "add_argument", "(", "\"--config\"", ",", "required", "=", "True", ",", "\n", "help", "=", "\"Path to the configs, e.g., path/to/Fountain\"", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.ETH_local_feature.reconstruction_pipeline.image_ids_to_pair_id": [[48, 53], ["None"], "function", ["None"], ["", "def", "image_ids_to_pair_id", "(", "image_id1", ",", "image_id2", ")", ":", "\n", "    ", "if", "image_id1", ">", "image_id2", ":", "\n", "        ", "return", "2147483647", "*", "image_id2", "+", "image_id1", "\n", "", "else", ":", "\n", "        ", "return", "2147483647", "*", "image_id1", "+", "image_id2", "\n", "\n"]], "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.ETH_local_feature.reconstruction_pipeline.import_features_and_match": [[55, 167], ["torch.device", "sqlite3.connect", "sqlite3.connect.cursor", "connection.cursor.execute", "connection.cursor.execute", "connection.cursor.execute", "connection.cursor.execute", "sqlite3.connect.commit", "connection.cursor.execute", "tqdm.tqdm", "getattr", "list", "set", "enumerate", "torch.cuda.empty_cache", "connection.cursor.close", "sqlite3.connect.close", "subprocess.call", "sqlite3.connect", "sqlite3.connect.cursor", "connection.cursor.execute", "connection.cursor.execute", "connection.cursor.execute", "connection.cursor.close", "sqlite3.connect.close", "dict", "bool", "connection.cursor.execute", "connection.cursor.execute", "images.items", "numpy.load", "keypoints.tobytes", "connection.cursor.execute", "sqlite3.connect.commit", "images.keys", "tqdm.tqdm", "torch.from_numpy().to", "tqdm.tqdm", "enumerate", "open", "next", "next", "next", "torch.cuda.is_available", "len", "numpy.load", "image_pairs.append", "reconstruction_pipeline.image_ids_to_pair_id", "torch.from_numpy().to", "getattr.", "set.add", "numpy.int32().tostring", "connection.cursor.execute", "sqlite3.connect.commit", "fid.write", "next", "images.items", "torch.from_numpy", "numpy.load", "torch.from_numpy", "numpy.int32"], "function", ["home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.ETH_local_feature.reconstruction_pipeline.image_ids_to_pair_id"], ["", "", "def", "import_features_and_match", "(", "configs", ",", "paths", ")", ":", "\n", "    ", "device", "=", "torch", ".", "device", "(", "\"cuda:0\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "\n", "\n", "connection", "=", "sqlite3", ".", "connect", "(", "paths", ".", "database_path", ")", "\n", "cursor", "=", "connection", ".", "cursor", "(", ")", "\n", "\n", "cursor", ".", "execute", "(", "\"SELECT name FROM sqlite_master \"", "\n", "\"WHERE type='table' AND name='inlier_matches';\"", ")", "\n", "try", ":", "\n", "        ", "inlier_matches_table_exists", "=", "bool", "(", "next", "(", "cursor", ")", "[", "0", "]", ")", "\n", "", "except", "StopIteration", ":", "\n", "        ", "inlier_matches_table_exists", "=", "False", "\n", "\n", "", "cursor", ".", "execute", "(", "\"DELETE FROM keypoints;\"", ")", "\n", "cursor", ".", "execute", "(", "\"DELETE FROM descriptors;\"", ")", "\n", "cursor", ".", "execute", "(", "\"DELETE FROM matches;\"", ")", "\n", "if", "inlier_matches_table_exists", ":", "\n", "        ", "cursor", ".", "execute", "(", "\"DELETE FROM inlier_matches;\"", ")", "\n", "", "else", ":", "\n", "        ", "cursor", ".", "execute", "(", "\"DELETE FROM two_view_geometries;\"", ")", "\n", "", "connection", ".", "commit", "(", ")", "\n", "\n", "images", "=", "{", "}", "\n", "cursor", ".", "execute", "(", "\"SELECT name, image_id FROM images;\"", ")", "\n", "for", "row", "in", "cursor", ":", "\n", "        ", "images", "[", "row", "[", "0", "]", "]", "=", "row", "[", "1", "]", "\n", "\n", "", "for", "image_name", ",", "image_id", "in", "tqdm", "(", "images", ".", "items", "(", ")", ",", "total", "=", "len", "(", "images", ".", "items", "(", ")", ")", ")", ":", "\n", "        ", "feature_path", "=", "paths", ".", "features_path", "/", "'{}.{}'", ".", "format", "(", "image_name", ",", "configs", "[", "'method_postfix'", "]", ")", "\n", "feature_file", "=", "np", ".", "load", "(", "feature_path", ")", "\n", "\n", "keypoints", "=", "feature_file", "[", "'keypoints'", "]", "[", ":", ",", ":", "2", "]", "\n", "descriptors", "=", "feature_file", "[", "'descriptors'", "]", "\n", "assert", "keypoints", ".", "shape", "[", "1", "]", "==", "2", "\n", "assert", "keypoints", ".", "shape", "[", "0", "]", "==", "descriptors", ".", "shape", "[", "0", "]", "\n", "\n", "keypoints_str", "=", "keypoints", ".", "tobytes", "(", ")", "# early python3 use .tostring()", "\n", "cursor", ".", "execute", "(", "\"INSERT INTO keypoints(image_id, rows, cols, data) \"", "\n", "\"VALUES(?, ?, ?, ?);\"", ",", "\n", "(", "image_id", ",", "keypoints", ".", "shape", "[", "0", "]", ",", "keypoints", ".", "shape", "[", "1", "]", ",", "\n", "keypoints_str", ")", ")", "\n", "connection", ".", "commit", "(", ")", "\n", "\n", "# custom match", "\n", "", "matcher", "=", "getattr", "(", "cms", ",", "configs", "[", "'matcher'", "]", ")", "\n", "image_names", "=", "list", "(", "images", ".", "keys", "(", ")", ")", "\n", "image_pairs", "=", "[", "]", "\n", "image_pair_ids", "=", "set", "(", ")", "\n", "for", "idx_total", ",", "image_name1", "in", "enumerate", "(", "tqdm", "(", "image_names", "[", ":", "-", "1", "]", ")", ")", ":", "\n", "        ", "feature_path1", "=", "paths", ".", "features_path", "/", "'{}.{}'", ".", "format", "(", "image_name1", ",", "configs", "[", "'method_postfix'", "]", ")", "\n", "descriptors1", "=", "np", ".", "load", "(", "feature_path1", ")", "[", "'descriptors'", "]", "\n", "descriptors1", "=", "torch", ".", "from_numpy", "(", "descriptors1", ")", ".", "to", "(", "device", ")", "\n", "bar", "=", "tqdm", "(", "image_names", "[", "idx_total", "+", "1", ":", "]", ")", "\n", "for", "idx_sub", ",", "image_name2", "in", "enumerate", "(", "bar", ")", ":", "\n", "            ", "image_pairs", ".", "append", "(", "(", "image_name1", ",", "image_name2", ")", ")", "\n", "image_id1", ",", "image_id2", "=", "images", "[", "image_name1", "]", ",", "images", "[", "image_name2", "]", "\n", "image_pair_id", "=", "image_ids_to_pair_id", "(", "image_id1", ",", "image_id2", ")", "\n", "if", "image_pair_id", "in", "image_pair_ids", ":", "\n", "                ", "continue", "\n", "\n", "", "feature_path2", "=", "paths", ".", "features_path", "/", "'{}.{}'", ".", "format", "(", "image_name2", ",", "configs", "[", "'method_postfix'", "]", ")", "\n", "descriptors2", "=", "np", ".", "load", "(", "feature_path2", ")", "[", "'descriptors'", "]", "\n", "descriptors2", "=", "torch", ".", "from_numpy", "(", "descriptors2", ")", ".", "to", "(", "device", ")", "\n", "\n", "matches", "=", "matcher", "(", "descriptors1", ",", "descriptors2", ",", "**", "configs", "[", "'matcher_config'", "]", ")", "\n", "assert", "matches", ".", "shape", "[", "1", "]", "==", "2", "\n", "# bar.write(\"matches: {}\".format(matches.shape[0]))", "\n", "image_pair_ids", ".", "add", "(", "image_pair_id", ")", "\n", "if", "image_id1", ">", "image_id2", ":", "\n", "                ", "matches", "=", "matches", "[", ":", ",", "[", "1", ",", "0", "]", "]", "\n", "\n", "", "matches_str", "=", "np", ".", "int32", "(", "matches", ")", ".", "tostring", "(", ")", "\n", "cursor", ".", "execute", "(", "\"INSERT INTO  matches(pair_id, rows, cols, data) \"", "\n", "\"VALUES(?, ?, ?, ?);\"", ",", "\n", "(", "image_pair_id", ",", "matches", ".", "shape", "[", "0", "]", ",", "matches", ".", "shape", "[", "1", "]", ",", "\n", "matches_str", ")", ")", "\n", "connection", ".", "commit", "(", ")", "\n", "\n", "", "", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "with", "open", "(", "paths", ".", "match_list_path", ",", "'w'", ")", "as", "fid", ":", "\n", "        ", "for", "image_name1", ",", "image_name2", "in", "image_pairs", ":", "\n", "            ", "fid", ".", "write", "(", "\"{} {}\\n\"", ".", "format", "(", "image_name1", ",", "image_name2", ")", ")", "\n", "", "", "cursor", ".", "close", "(", ")", "\n", "connection", ".", "close", "(", ")", "\n", "\n", "subprocess", ".", "call", "(", "[", "paths", ".", "colmap_path", ",", "\n", "\"matches_importer\"", ",", "\n", "\"--database_path\"", ",", "\n", "paths", ".", "database_path", ",", "\n", "\"--match_list_path\"", ",", "\n", "paths", ".", "match_list_path", ",", "\n", "\"--match_type\"", ",", "\"pairs\"", "]", ")", "\n", "\n", "# connection = sqlite3.connect(os.path.join(args.dataset_path, \"database.db\"))", "\n", "connection", "=", "sqlite3", ".", "connect", "(", "paths", ".", "database_path", ")", "\n", "cursor", "=", "connection", ".", "cursor", "(", ")", "\n", "\n", "cursor", ".", "execute", "(", "\"SELECT count(*) FROM images;\"", ")", "\n", "num_images", "=", "next", "(", "cursor", ")", "[", "0", "]", "\n", "\n", "cursor", ".", "execute", "(", "\"SELECT count(*) FROM two_view_geometries WHERE rows > 0;\"", ")", "\n", "num_inlier_pairs", "=", "next", "(", "cursor", ")", "[", "0", "]", "\n", "\n", "cursor", ".", "execute", "(", "\"SELECT sum(rows) FROM two_view_geometries WHERE rows > 0;\"", ")", "\n", "num_inlier_matches", "=", "next", "(", "cursor", ")", "[", "0", "]", "\n", "\n", "cursor", ".", "close", "(", ")", "\n", "connection", ".", "close", "(", ")", "\n", "\n", "return", "dict", "(", "num_images", "=", "num_images", ",", "\n", "num_inlier_pairs", "=", "num_inlier_pairs", ",", "\n", "num_inlier_matches", "=", "num_inlier_matches", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.ETH_local_feature.reconstruction_pipeline.reconstruct": [[169, 281], ["subprocess.call", "sparse_path.listdir", "subprocess.check_output", "stats.decode().split.decode().split", "dict", "sparse_path.exists", "sparse_path.makedirs_p", "dense_path.exists", "dense_path.makedirs_p", "len", "print", "subprocess.call", "stat.startswith", "str", "open", "stats.decode().split.decode", "int", "stat.startswith", "min", "line.startswith", "int", "stat.startswith", "multiprocessing.cpu_count", "int", "stat.split", "int", "stat.startswith", "stat.split", "float", "stat.startswith", "line.split", "stat.split", "float", "stat.startswith", "stat.split", "float", "stat.split", "stat.split"], "function", ["None"], ["", "def", "reconstruct", "(", "configs", ",", "paths", ")", ":", "\n", "    ", "database_path", "=", "paths", ".", "database_path", "\n", "image_path", "=", "paths", ".", "image_path", "\n", "sparse_path", "=", "paths", ".", "features_path", ".", "parent", "/", "\"{}_sparse\"", ".", "format", "(", "configs", "[", "'subfolder'", "]", ")", "\n", "dense_path", "=", "paths", ".", "features_path", ".", "parent", "/", "\"{}_dense\"", ".", "format", "(", "configs", "[", "'subfolder'", "]", ")", "\n", "if", "not", "sparse_path", ".", "exists", "(", ")", ":", "\n", "        ", "sparse_path", ".", "makedirs_p", "(", ")", "\n", "", "if", "not", "dense_path", ".", "exists", "(", ")", ":", "\n", "        ", "dense_path", ".", "makedirs_p", "(", ")", "\n", "\n", "# Run the sparse reconstruction.", "\n", "", "subprocess", ".", "call", "(", "[", "paths", ".", "colmap_path", ",", "\n", "\"mapper\"", ",", "\n", "\"--database_path\"", ",", "database_path", ",", "\n", "\"--image_path\"", ",", "image_path", ",", "\n", "\"--output_path\"", ",", "sparse_path", ",", "\n", "\"--Mapper.num_threads\"", ",", "\n", "str", "(", "min", "(", "multiprocessing", ".", "cpu_count", "(", ")", ",", "16", ")", ")", "]", ")", "\n", "\n", "# Find the largest reconstructed sparse model.", "\n", "models", "=", "sparse_path", ".", "listdir", "(", ")", "\n", "if", "len", "(", "models", ")", "==", "0", ":", "\n", "        ", "print", "(", "\"Warning: Could not reconstruct any model\"", ")", "\n", "return", "\n", "\n", "", "largest_model", "=", "None", "\n", "largest_model_num_images", "=", "0", "\n", "for", "model", "in", "models", ":", "\n", "        ", "subprocess", ".", "call", "(", "[", "paths", ".", "colmap_path", ",", "\n", "\"model_converter\"", ",", "\n", "\"--input_path\"", ",", "model", ",", "\n", "\"--output_path\"", ",", "model", ",", "\n", "\"--output_type\"", ",", "\"TXT\"", "]", ")", "\n", "with", "open", "(", "\"{}/cameras.txt\"", ".", "format", "(", "model", ")", ",", "'r'", ")", "as", "fid", ":", "\n", "            ", "for", "line", "in", "fid", ":", "\n", "                ", "if", "line", ".", "startswith", "(", "\"# Number of cameras\"", ")", ":", "\n", "                    ", "num_images", "=", "int", "(", "line", ".", "split", "(", ")", "[", "-", "1", "]", ")", "\n", "if", "num_images", ">", "largest_model_num_images", ":", "\n", "                        ", "largest_model", "=", "model", "\n", "largest_model_num_images", "=", "num_images", "\n", "", "break", "\n", "", "", "", "", "assert", "largest_model_num_images", ">", "0", "\n", "\n", "# Run the dense reconstruction.", "\n", "largest_model_path", "=", "largest_model", "\n", "### the codes for dense reconstruction", "\n", "# workspace_path = dense_path/largest_model.name", "\n", "# if not workspace_path.exists():", "\n", "#     workspace_path.makedirs_p()", "\n", "\n", "# subprocess.call([paths.colmap_path,", "\n", "#                  \"image_undistorter\",", "\n", "#                  \"--image_path\", image_path,", "\n", "#                  \"--input_path\", largest_model_path,", "\n", "#                  \"--output_path\", workspace_path,", "\n", "#                  \"--max_image_size\", \"1200\"])", "\n", "\n", "# subprocess.call([paths.colmap_path,", "\n", "#                  \"patch_match_stereo\",", "\n", "#                  \"--workspace_path\", workspace_path,", "\n", "#                  \"--PatchMatchStereo.geom_consistency\", \"false\"])", "\n", "\n", "# subprocess.call([paths.colmap_path,", "\n", "#                  \"stereo_fusion\",", "\n", "#                  \"--workspace_path\", workspace_path,", "\n", "#                  \"--input_type\", \"photometric\",", "\n", "#                  \"--output_path\", os.path.join(workspace_path, \"fused.ply\"),", "\n", "#                  \"--StereoFusion.min_num_pixels\", \"5\"])", "\n", "\n", "stats", "=", "subprocess", ".", "check_output", "(", "\n", "[", "paths", ".", "colmap_path", ",", "\"model_analyzer\"", ",", "\n", "\"--path\"", ",", "largest_model_path", "]", ")", "\n", "\n", "stats", "=", "stats", ".", "decode", "(", ")", ".", "split", "(", "\"\\n\"", ")", "\n", "for", "stat", "in", "stats", ":", "\n", "        ", "if", "stat", ".", "startswith", "(", "\"Registered images\"", ")", ":", "\n", "            ", "num_reg_images", "=", "int", "(", "stat", ".", "split", "(", ")", "[", "-", "1", "]", ")", "\n", "", "elif", "stat", ".", "startswith", "(", "\"Points\"", ")", ":", "\n", "            ", "num_sparse_points", "=", "int", "(", "stat", ".", "split", "(", ")", "[", "-", "1", "]", ")", "\n", "", "elif", "stat", ".", "startswith", "(", "\"Observations\"", ")", ":", "\n", "            ", "num_observations", "=", "int", "(", "stat", ".", "split", "(", ")", "[", "-", "1", "]", ")", "\n", "", "elif", "stat", ".", "startswith", "(", "\"Mean track length\"", ")", ":", "\n", "            ", "mean_track_length", "=", "float", "(", "stat", ".", "split", "(", ")", "[", "-", "1", "]", ")", "\n", "", "elif", "stat", ".", "startswith", "(", "\"Mean observations per image\"", ")", ":", "\n", "            ", "num_observations_per_image", "=", "float", "(", "stat", ".", "split", "(", ")", "[", "-", "1", "]", ")", "\n", "", "elif", "stat", ".", "startswith", "(", "\"Mean reprojection error\"", ")", ":", "\n", "            ", "mean_reproj_error", "=", "float", "(", "stat", ".", "split", "(", ")", "[", "-", "1", "]", "[", ":", "-", "2", "]", ")", "\n", "\n", "# returns with dense results", "\n", "# with open(os.path.join(workspace_path, \"fused.ply\"), \"rb\") as fid:", "\n", "#     line = fid.readline().decode()", "\n", "#     while line:", "\n", "#         if line.startswith(\"element vertex\"):", "\n", "#             num_dense_points = int(line.split()[-1])", "\n", "#             break", "\n", "#         line = fid.readline().decode()", "\n", "\n", "# return dict(num_reg_images=num_reg_images,", "\n", "#             num_sparse_points=num_sparse_points,", "\n", "#             num_observations=num_observations,", "\n", "#             mean_track_length=mean_track_length,", "\n", "#             num_observations_per_image=num_observations_per_image,", "\n", "#             mean_reproj_error=mean_reproj_error,", "\n", "#             num_dense_points=num_dense_points)", "\n", "\n", "## returns without dense results", "\n", "", "", "return", "dict", "(", "num_reg_images", "=", "num_reg_images", ",", "\n", "num_sparse_points", "=", "num_sparse_points", ",", "\n", "num_observations", "=", "num_observations", ",", "\n", "mean_track_length", "=", "mean_track_length", ",", "\n", "num_observations_per_image", "=", "num_observations_per_image", ",", "\n", "mean_reproj_error", "=", "mean_reproj_error", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.ETH_local_feature.reconstruction_pipeline.main": [[283, 360], ["reconstruction_pipeline.parse_args", "types.SimpleNamespace", "types.SimpleNamespace.database_path.exists", "shutil.copyfile", "reconstruction_pipeline.import_features_and_match", "reconstruction_pipeline.reconstruct", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "reconstruct.items", "print", "open", "yaml.load", "path.Path", "path.Path", "path.Path", "path.Path", "FileExistsError", "types.SimpleNamespace.dataset_path.basename", "types.SimpleNamespace.dataset_path.basename", "tmp_str.rjust.rjust", "open", "fid.write", "len"], "function", ["home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.ETH_local_feature.reconstruction_pipeline.parse_args", "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.ETH_local_feature.reconstruction_pipeline.import_features_and_match", "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.ETH_local_feature.reconstruction_pipeline.reconstruct"], ["", "def", "main", "(", ")", ":", "\n", "    ", "args", "=", "parse_args", "(", ")", "\n", "with", "open", "(", "args", ".", "config", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "configs", "=", "yaml", ".", "load", "(", "f", ",", "Loader", "=", "yaml", ".", "FullLoader", ")", "\n", "configs", "[", "'method_postfix'", "]", "=", "configs", "[", "'postfix'", "]", "\n", "configs", "[", "'features_path'", "]", "=", "'../../ckpts/{}/desc'", ".", "format", "(", "configs", "[", "'output_root'", "]", ")", "\n", "configs", "[", "'dataset_path'", "]", "=", "configs", "[", "'data_config_extract'", "]", "[", "'data_path'", "]", "\n", "configs", "[", "'subfolder'", "]", "=", "configs", "[", "'data_config_extract'", "]", "[", "'subfolder'", "]", "\n", "\n", "", "paths", "=", "types", ".", "SimpleNamespace", "(", ")", "\n", "paths", ".", "colmap_path", "=", "Path", "(", "configs", "[", "'colmap_path'", "]", ")", "/", "'colmap'", "\n", "paths", ".", "dataset_path", "=", "Path", "(", "configs", "[", "'dataset_path'", "]", ")", "/", "'{}'", ".", "format", "(", "\n", "configs", "[", "'subfolder'", "]", ")", "\n", "paths", ".", "image_path", "=", "paths", ".", "dataset_path", "/", "\"images\"", "\n", "\n", "paths", ".", "features_path", "=", "Path", "(", "configs", "[", "'features_path'", "]", ")", "/", "'{}'", ".", "format", "(", "\n", "configs", "[", "'subfolder'", "]", ")", "\n", "paths", ".", "database_path", "=", "paths", ".", "features_path", ".", "parent", "/", "'{}_{}.db'", ".", "format", "(", "\n", "configs", "[", "'subfolder'", "]", ",", "configs", "[", "'method_postfix'", "]", ")", "\n", "paths", ".", "match_list_path", "=", "paths", ".", "features_path", "/", "'image_pairs_{}.txt'", ".", "format", "(", "\n", "configs", "[", "'method_postfix'", "]", ")", "\n", "paths", ".", "result_path", "=", "Path", "(", "configs", "[", "'features_path'", "]", ")", "/", "'res_{}_{}.txt'", ".", "format", "(", "\n", "configs", "[", "'subfolder'", "]", ",", "configs", "[", "'method_postfix'", "]", ")", "\n", "\n", "# print(paths.match_list_path)", "\n", "if", "paths", ".", "database_path", ".", "exists", "(", ")", ":", "\n", "        ", "raise", "FileExistsError", "(", "'The {} database already exists for method \\\n            {}.'", ".", "format", "(", "configs", "[", "'subfolder'", "]", ",", "configs", "[", "'method_postfix'", "]", ")", ")", "\n", "", "shutil", ".", "copyfile", "(", "paths", ".", "dataset_path", "/", "'database.db'", ",", "paths", ".", "database_path", ")", "\n", "\n", "matching_stats", "=", "import_features_and_match", "(", "configs", ",", "paths", ")", "\n", "reconstruction_stats", "=", "reconstruct", "(", "configs", ",", "paths", ")", "\n", "\n", "print", "(", ")", "\n", "print", "(", "78", "*", "\"=\"", ")", "\n", "print", "(", "\"Raw statistics\"", ")", "\n", "print", "(", "78", "*", "\"=\"", ")", "\n", "print", "(", "matching_stats", ")", "\n", "print", "(", "reconstruction_stats", ")", "\n", "\n", "print", "(", ")", "\n", "print", "(", "78", "*", "\"=\"", ")", "\n", "print", "(", "\"Formatted statistics\"", ")", "\n", "print", "(", "78", "*", "\"=\"", ")", "\n", "\n", "# strings = \"| \" + \" | \".join(", "\n", "#         map(str, [paths.dataset_path.basename(),", "\n", "#                   \"METHOD\",", "\n", "#                   matching_stats[\"num_images\"],", "\n", "#                   reconstruction_stats[\"num_reg_images\"],", "\n", "#                   reconstruction_stats[\"num_sparse_points\"],", "\n", "#                   reconstruction_stats[\"num_observations\"],", "\n", "#                   reconstruction_stats[\"mean_track_length\"],", "\n", "#                   reconstruction_stats[\"num_observations_per_image\"],", "\n", "#                   reconstruction_stats[\"mean_reproj_error\"],", "\n", "#                   reconstruction_stats[\"num_dense_points\"],", "\n", "#                   \"\",", "\n", "#                   \"\",", "\n", "#                   \"\",", "\n", "#                   \"\",", "\n", "#                   matching_stats[\"num_inlier_pairs\"],", "\n", "#                   matching_stats[\"num_inlier_matches\"]])) + \" |\"", "\n", "\n", "strings_key", "=", "'{}|'", ".", "format", "(", "paths", ".", "dataset_path", ".", "basename", "(", ")", ")", "\n", "strings_val", "=", "'{}|'", ".", "format", "(", "paths", ".", "dataset_path", ".", "basename", "(", ")", ")", "\n", "for", "key", ",", "val", "in", "reconstruction_stats", ".", "items", "(", ")", ":", "\n", "        ", "strings_key", "+=", "'{}|'", ".", "format", "(", "key", ")", "\n", "tmp_str", "=", "'{}'", ".", "format", "(", "val", ")", "\n", "tmp_str", "=", "tmp_str", ".", "rjust", "(", "len", "(", "key", ")", ",", "' '", ")", "\n", "tmp_str", "=", "tmp_str", "+", "'|'", "\n", "strings_val", "+=", "tmp_str", "\n", "", "strings_key", "+=", "'\\n'", "\n", "strings_val", "+=", "'\\n'", "\n", "\n", "print", "(", "strings_key", "+", "strings_val", ")", "\n", "with", "open", "(", "paths", ".", "result_path", ",", "'w'", ")", "as", "fid", ":", "\n", "        ", "fid", ".", "write", "(", "strings_key", "+", "strings_val", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.datasets.aachen.Aachen_Day_Night.__init__": [[11, 30], ["torch.utils.data.Dataset.__init__", "torchvision.Compose", "cv2.SIFT_create", "path.Path", "path.Path.glob", "path.Path.glob", "path.Path.glob", "path.Path.glob", "aachen.Aachen_Day_Night.imfs.extend", "aachen.Aachen_Day_Night.imfs.extend", "aachen.Aachen_Day_Night.imfs.extend", "aachen.Aachen_Day_Night.imfs.sort", "torchvision.ToTensor", "torchvision.Normalize"], "methods", ["home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.losses.preprocess.Preprocess_Skip.__init__"], ["    ", "def", "__init__", "(", "self", ",", "configs", ")", ":", "\n", "        ", "super", "(", "Aachen_Day_Night", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "configs", "=", "configs", "\n", "self", ".", "transform", "=", "transforms", ".", "Compose", "(", "[", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "mean", "=", "(", "0.485", ",", "0.456", ",", "0.406", ")", ",", "\n", "std", "=", "(", "0.229", ",", "0.224", ",", "0.225", ")", ")", ",", "\n", "]", ")", "\n", "# self.imfs = []", "\n", "self", ".", "sift", "=", "cv2", ".", "SIFT_create", "(", ")", "\n", "imdir", "=", "Path", "(", "self", ".", "configs", "[", "'data_path'", "]", ")", "\n", "dbimgs", "=", "imdir", ".", "glob", "(", "'db/*.jpg'", ")", "\n", "queryimgs", "=", "imdir", ".", "glob", "(", "'query/*/*/*.jpg'", ")", "\n", "sequences1", "=", "imdir", ".", "glob", "(", "'sequences/gopro3_undistorted/*.png'", ")", "\n", "sequences2", "=", "imdir", ".", "glob", "(", "'sequences/nexus4_sequences/*/*.png'", ")", "\n", "self", ".", "imfs", "=", "dbimgs", "\n", "self", ".", "imfs", ".", "extend", "(", "queryimgs", ")", "\n", "self", ".", "imfs", ".", "extend", "(", "sequences1", ")", "\n", "self", ".", "imfs", ".", "extend", "(", "sequences2", ")", "\n", "self", ".", "imfs", ".", "sort", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.datasets.aachen.Aachen_Day_Night.__getitem__": [[32, 63], ["skimage.imread", "imf.split", "aachen.Aachen_Day_Night.transform", "cv2.cvtColor", "aachen.Aachen_Day_Night.sift.detect", "numpy.array", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "item", ")", ":", "\n", "        ", "imf", "=", "self", ".", "imfs", "[", "item", "]", "\n", "im", "=", "io", ".", "imread", "(", "imf", ")", "\n", "imf_split", "=", "imf", ".", "split", "(", "'/'", ")", "\n", "if", "'db'", "in", "imf_split", ":", "\n", "            ", "name", "=", "imf_split", "[", "-", "2", ":", "]", "\n", "name", "=", "'/'", ".", "join", "(", "name", ")", "\n", "", "elif", "'query'", "in", "imf_split", ":", "\n", "            ", "name", "=", "imf_split", "[", "-", "4", ":", "]", "\n", "name", "=", "'/'", ".", "join", "(", "name", ")", "\n", "", "elif", "'gopro3_undistorted'", "in", "imf_split", ":", "\n", "            ", "name", "=", "imf_split", "[", "-", "3", ":", "]", "\n", "name", "=", "'/'", ".", "join", "(", "name", ")", "\n", "", "elif", "'nexus4_sequences'", "in", "imf_split", ":", "\n", "            ", "name", "=", "imf_split", "[", "-", "4", ":", "]", "\n", "name", "=", "'/'", ".", "join", "(", "name", ")", "\n", "", "im_tensor", "=", "self", ".", "transform", "(", "im", ")", "\n", "c", ",", "h", ",", "w", "=", "im_tensor", ".", "shape", "\n", "pad", "=", "(", "0", ",", "0", ",", "0", ",", "0", ")", "\n", "\n", "# now use crop to get suitable size", "\n", "crop_r", "=", "w", "%", "16", "\n", "crop_b", "=", "h", "%", "16", "\n", "im_tensor", "=", "im_tensor", "[", ":", ",", ":", "h", "-", "crop_b", ",", ":", "w", "-", "crop_r", "]", "\n", "im", "=", "im", "[", ":", "h", "-", "crop_b", ",", ":", "w", "-", "crop_r", ",", ":", "]", "\n", "gray", "=", "cv2", ".", "cvtColor", "(", "im", ",", "cv2", ".", "COLOR_RGB2GRAY", ")", "\n", "kpts", "=", "self", ".", "sift", ".", "detect", "(", "gray", ")", "\n", "kpts", "=", "np", ".", "array", "(", "[", "[", "kp", ".", "pt", "[", "0", "]", ",", "kp", ".", "pt", "[", "1", "]", "]", "for", "kp", "in", "kpts", "]", ")", "\n", "coord", "=", "torch", ".", "from_numpy", "(", "kpts", ")", ".", "float", "(", ")", "\n", "out", "=", "{", "'im1'", ":", "im_tensor", ",", "'im1_ori'", ":", "im", ",", "'coord1'", ":", "coord", ",", "'name1'", ":", "name", ",", "'pad1'", ":", "pad", "}", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.datasets.aachen.Aachen_Day_Night.__len__": [[64, 66], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "imfs", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.datasets.hpatches.HPatch_SIFT.__init__": [[11, 23], ["torch.utils.data.Dataset.__init__", "torchvision.Compose", "cv2.SIFT_create", "path.Path", "path.Path.glob", "hpatches.HPatch_SIFT.imfs.sort", "torchvision.ToTensor", "torchvision.Normalize"], "methods", ["home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.losses.preprocess.Preprocess_Skip.__init__"], ["    ", "def", "__init__", "(", "self", ",", "configs", ")", ":", "\n", "        ", "super", "(", "HPatch_SIFT", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "configs", "=", "configs", "\n", "self", ".", "transform", "=", "transforms", ".", "Compose", "(", "[", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "mean", "=", "(", "0.485", ",", "0.456", ",", "0.406", ")", ",", "\n", "std", "=", "(", "0.229", ",", "0.224", ",", "0.225", ")", ")", ",", "\n", "]", ")", "\n", "# self.imfs = []", "\n", "self", ".", "sift", "=", "cv2", ".", "SIFT_create", "(", ")", "\n", "imdir", "=", "Path", "(", "self", ".", "configs", "[", "'data_path'", "]", ")", "\n", "self", ".", "imfs", "=", "imdir", ".", "glob", "(", "'*/*.ppm'", ")", "\n", "self", ".", "imfs", ".", "sort", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.datasets.hpatches.HPatch_SIFT.__getitem__": [[25, 45], ["skimage.imread", "hpatches.HPatch_SIFT.transform", "cv2.cvtColor", "hpatches.HPatch_SIFT.sift.detect", "numpy.array", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "imf.split", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "item", ")", ":", "\n", "        ", "imf", "=", "self", ".", "imfs", "[", "item", "]", "\n", "im", "=", "io", ".", "imread", "(", "imf", ")", "\n", "name", "=", "imf", ".", "split", "(", "'/'", ")", "[", "-", "2", ":", "]", "\n", "name", "=", "'/'", ".", "join", "(", "name", ")", "\n", "im_tensor", "=", "self", ".", "transform", "(", "im", ")", "\n", "c", ",", "h", ",", "w", "=", "im_tensor", ".", "shape", "\n", "pad", "=", "(", "0", ",", "0", ",", "0", ",", "0", ")", "\n", "\n", "# now use crop to get suitable size", "\n", "crop_r", "=", "w", "%", "16", "\n", "crop_b", "=", "h", "%", "16", "\n", "im_tensor", "=", "im_tensor", "[", ":", ",", ":", "h", "-", "crop_b", ",", ":", "w", "-", "crop_r", "]", "\n", "im", "=", "im", "[", ":", "h", "-", "crop_b", ",", ":", "w", "-", "crop_r", ",", ":", "]", "\n", "gray", "=", "cv2", ".", "cvtColor", "(", "im", ",", "cv2", ".", "COLOR_RGB2GRAY", ")", "\n", "kpts", "=", "self", ".", "sift", ".", "detect", "(", "gray", ")", "\n", "kpts", "=", "np", ".", "array", "(", "[", "[", "kp", ".", "pt", "[", "0", "]", ",", "kp", ".", "pt", "[", "1", "]", "]", "for", "kp", "in", "kpts", "]", ")", "\n", "coord", "=", "torch", ".", "from_numpy", "(", "kpts", ")", ".", "float", "(", ")", "\n", "out", "=", "{", "'im1'", ":", "im_tensor", ",", "'im1_ori'", ":", "im", ",", "'coord1'", ":", "coord", ",", "'name1'", ":", "name", ",", "'pad1'", ":", "pad", "}", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.datasets.hpatches.HPatch_SIFT.__len__": [[46, 48], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "imfs", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.datasets.data_utils.skew": [[8, 12], ["numpy.array"], "function", ["None"], ["def", "skew", "(", "x", ")", ":", "\n", "    ", "return", "np", ".", "array", "(", "[", "[", "0", ",", "-", "x", "[", "2", "]", ",", "x", "[", "1", "]", "]", ",", "\n", "[", "x", "[", "2", "]", ",", "0", ",", "-", "x", "[", "0", "]", "]", ",", "\n", "[", "-", "x", "[", "1", "]", ",", "x", "[", "0", "]", ",", "0", "]", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.datasets.data_utils.rotateImage": [[14, 29], ["numpy.abs", "numpy.cos", "numpy.sin", "numpy.tan", "max", "tuple", "cv2.getRotationMatrix2D", "cv2.warpAffine", "numpy.eye", "numpy.array"], "function", ["None"], ["", "def", "rotateImage", "(", "image", ",", "angle", ")", ":", "\n", "    ", "h", ",", "w", "=", "image", ".", "shape", "[", ":", "2", "]", "\n", "angle_radius", "=", "np", ".", "abs", "(", "angle", "/", "180.", "*", "np", ".", "pi", ")", "\n", "cos", "=", "np", ".", "cos", "(", "angle_radius", ")", "\n", "sin", "=", "np", ".", "sin", "(", "angle_radius", ")", "\n", "tan", "=", "np", ".", "tan", "(", "angle_radius", ")", "\n", "scale_h", "=", "(", "h", "/", "cos", "+", "(", "w", "-", "h", "*", "tan", ")", "*", "sin", ")", "/", "h", "\n", "scale_w", "=", "(", "h", "/", "sin", "+", "(", "w", "-", "h", "/", "tan", ")", "*", "cos", ")", "/", "w", "\n", "scale", "=", "max", "(", "scale_h", ",", "scale_w", ")", "\n", "image_center", "=", "tuple", "(", "np", ".", "array", "(", "image", ".", "shape", "[", "1", ":", ":", "-", "1", "]", ")", "/", "2.", ")", "\n", "rot_mat", "=", "cv2", ".", "getRotationMatrix2D", "(", "image_center", ",", "angle", ",", "scale", ")", "\n", "result", "=", "cv2", ".", "warpAffine", "(", "image", ",", "rot_mat", ",", "image", ".", "shape", "[", "1", ":", ":", "-", "1", "]", ",", "flags", "=", "cv2", ".", "INTER_LINEAR", ")", "\n", "rotation", "=", "np", ".", "eye", "(", "4", ")", "\n", "rotation", "[", ":", "2", ",", ":", "2", "]", "=", "rot_mat", "[", ":", "2", ",", ":", "2", "]", "\n", "return", "result", ",", "rotation", "\n", "\n"]], "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.datasets.data_utils.perspective_transform": [[31, 46], ["numpy.random.RandomState", "numpy.array", "cv2.warpPerspective", "np.random.RandomState.rand", "np.random.RandomState.rand", "np.random.RandomState.rand", "np.random.RandomState.rand", "np.random.RandomState.rand", "np.random.RandomState.rand", "np.random.RandomState.rand", "np.random.RandomState.rand", "np.random.RandomState.rand"], "function", ["None"], ["", "def", "perspective_transform", "(", "img", ",", "param", "=", "0.001", ")", ":", "\n", "    ", "h", ",", "w", "=", "img", ".", "shape", "[", ":", "2", "]", "\n", "random_state", "=", "np", ".", "random", ".", "RandomState", "(", "None", ")", "\n", "M", "=", "np", ".", "array", "(", "[", "[", "1", "-", "param", "+", "2", "*", "param", "*", "random_state", ".", "rand", "(", ")", ",", "\n", "-", "param", "+", "2", "*", "param", "*", "random_state", ".", "rand", "(", ")", ",", "\n", "-", "param", "+", "2", "*", "param", "*", "random_state", ".", "rand", "(", ")", "]", ",", "\n", "[", "-", "param", "+", "2", "*", "param", "*", "random_state", ".", "rand", "(", ")", ",", "\n", "1", "-", "param", "+", "2", "*", "param", "*", "random_state", ".", "rand", "(", ")", ",", "\n", "-", "param", "+", "2", "*", "param", "*", "random_state", ".", "rand", "(", ")", "]", ",", "\n", "[", "-", "param", "+", "2", "*", "param", "*", "random_state", ".", "rand", "(", ")", ",", "\n", "-", "param", "+", "2", "*", "param", "*", "random_state", ".", "rand", "(", ")", ",", "\n", "1", "-", "param", "+", "2", "*", "param", "*", "random_state", ".", "rand", "(", ")", "]", "]", ")", "\n", "\n", "dst", "=", "cv2", ".", "warpPerspective", "(", "img", ",", "M", ",", "(", "w", ",", "h", ")", ")", "\n", "return", "dst", ",", "M", "\n", "\n"]], "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.datasets.data_utils.generate_query_kpts": [[48, 79], ["numpy.random.rand", "numpy.random.rand", "numpy.stack", "cv2.cvtColor", "cv2.xfeatures2d.SIFT_create", "cv2.xfeatures2d.SIFT_create.detect", "numpy.array", "cv2.xfeatures2d.SIFT_create", "cv2.cvtColor", "cv2.xfeatures2d.SIFT_create.detect", "numpy.array", "Exception", "numpy.random.rand", "numpy.random.rand", "numpy.stack", "len", "numpy.concatenate", "int", "int", "int"], "function", ["None"], ["", "def", "generate_query_kpts", "(", "img", ",", "mode", ",", "num_pts", ",", "h", ",", "w", ")", ":", "\n", "# generate candidate query points", "\n", "    ", "if", "mode", "==", "'random'", ":", "\n", "        ", "kp1_x", "=", "np", ".", "random", ".", "rand", "(", "num_pts", ")", "*", "(", "w", "-", "1", ")", "\n", "kp1_y", "=", "np", ".", "random", ".", "rand", "(", "num_pts", ")", "*", "(", "h", "-", "1", ")", "\n", "coord", "=", "np", ".", "stack", "(", "(", "kp1_x", ",", "kp1_y", ")", ")", ".", "T", "\n", "\n", "", "elif", "mode", "==", "'sift'", ":", "\n", "        ", "gray1", "=", "cv2", ".", "cvtColor", "(", "img", ",", "cv2", ".", "COLOR_RGB2GRAY", ")", "\n", "sift", "=", "cv2", ".", "xfeatures2d", ".", "SIFT_create", "(", "nfeatures", "=", "num_pts", ")", "\n", "kp1", "=", "sift", ".", "detect", "(", "gray1", ")", "\n", "coord", "=", "np", ".", "array", "(", "[", "[", "kp", ".", "pt", "[", "0", "]", ",", "kp", ".", "pt", "[", "1", "]", "]", "for", "kp", "in", "kp1", "]", ")", "\n", "\n", "", "elif", "mode", "==", "'mixed'", ":", "\n", "        ", "kp1_x", "=", "np", ".", "random", ".", "rand", "(", "1", "*", "int", "(", "0.1", "*", "num_pts", ")", ")", "*", "(", "w", "-", "1", ")", "\n", "kp1_y", "=", "np", ".", "random", ".", "rand", "(", "1", "*", "int", "(", "0.1", "*", "num_pts", ")", ")", "*", "(", "h", "-", "1", ")", "\n", "kp1_rand", "=", "np", ".", "stack", "(", "(", "kp1_x", ",", "kp1_y", ")", ")", ".", "T", "\n", "\n", "sift", "=", "cv2", ".", "xfeatures2d", ".", "SIFT_create", "(", "nfeatures", "=", "int", "(", "0.9", "*", "num_pts", ")", ")", "\n", "gray1", "=", "cv2", ".", "cvtColor", "(", "img", ",", "cv2", ".", "COLOR_RGB2GRAY", ")", "\n", "kp1_sift", "=", "sift", ".", "detect", "(", "gray1", ")", "\n", "kp1_sift", "=", "np", ".", "array", "(", "[", "[", "kp", ".", "pt", "[", "0", "]", ",", "kp", ".", "pt", "[", "1", "]", "]", "for", "kp", "in", "kp1_sift", "]", ")", "\n", "if", "len", "(", "kp1_sift", ")", "==", "0", ":", "\n", "            ", "coord", "=", "kp1_rand", "\n", "", "else", ":", "\n", "            ", "coord", "=", "np", ".", "concatenate", "(", "(", "kp1_rand", ",", "kp1_sift", ")", ",", "0", ")", "\n", "\n", "", "", "else", ":", "\n", "        ", "raise", "Exception", "(", "'unknown type of keypoints'", ")", "\n", "\n", "", "return", "coord", "\n", "\n"]], "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.datasets.data_utils.prune_kpts": [[81, 117], ["F_gt.dot", "numpy.clip", "numpy.array", "numpy.abs", "numpy.eye", "numpy.eye", "np.eye.dot().dot().dot", "np.eye.dot().dot().dot", "numpy.concatenate", "numpy.linalg.norm", "np.array.dot", "numpy.concatenate", "numpy.concatenate", "np.eye.dot().dot", "np.eye.dot().dot", "numpy.ones_like", "numpy.sqrt", "numpy.ones_like", "numpy.ones_like", "numpy.linalg.inv", "numpy.linalg.inv", "numpy.ones_like", "numpy.ones_like", "np.eye.dot", "np.eye.dot"], "function", ["None"], ["", "def", "prune_kpts", "(", "coord1", ",", "F_gt", ",", "im2_size", ",", "intrinsic1", ",", "intrinsic2", ",", "pose", ",", "d_min", ",", "d_max", ")", ":", "\n", "# compute the epipolar lines corresponding to coord1", "\n", "    ", "coord1_h", "=", "np", ".", "concatenate", "(", "[", "coord1", ",", "np", ".", "ones_like", "(", "coord1", "[", ":", ",", "[", "0", "]", "]", ")", "]", ",", "axis", "=", "1", ")", ".", "T", "# 3xn", "\n", "epipolar_line", "=", "F_gt", ".", "dot", "(", "coord1_h", ")", "# 3xn", "\n", "epipolar_line", "/=", "np", ".", "clip", "(", "np", ".", "linalg", ".", "norm", "(", "epipolar_line", "[", ":", "2", "]", ",", "axis", "=", "0", ")", ",", "a_min", "=", "1e-10", ",", "a_max", "=", "None", ")", "# 3xn", "\n", "\n", "# determine whether the epipolar lines intersect with the second image", "\n", "h2", ",", "w2", "=", "im2_size", "\n", "corners", "=", "np", ".", "array", "(", "[", "[", "0", ",", "0", ",", "1", "]", ",", "[", "0", ",", "h2", "-", "1", ",", "1", "]", ",", "[", "w2", "-", "1", ",", "0", ",", "1", "]", ",", "[", "w2", "-", "1", ",", "h2", "-", "1", ",", "1", "]", "]", ")", "# 4x3", "\n", "dists", "=", "np", ".", "abs", "(", "corners", ".", "dot", "(", "epipolar_line", ")", ")", "\n", "# if the epipolar line is far away from any image corners than sqrt(h^2+w^2)", "\n", "# it doesn't intersect with the image", "\n", "non_intersect", "=", "(", "dists", ">", "np", ".", "sqrt", "(", "w2", "**", "2", "+", "h2", "**", "2", ")", ")", ".", "any", "(", "axis", "=", "0", ")", "\n", "\n", "# determine if points in coord1 is likely to have correspondence in the other image by the rough depth range", "\n", "intrinsic1_4x4", "=", "np", ".", "eye", "(", "4", ")", "\n", "intrinsic1_4x4", "[", ":", "3", ",", ":", "3", "]", "=", "intrinsic1", "\n", "intrinsic2_4x4", "=", "np", ".", "eye", "(", "4", ")", "\n", "intrinsic2_4x4", "[", ":", "3", ",", ":", "3", "]", "=", "intrinsic2", "\n", "coord1_h_min", "=", "np", ".", "concatenate", "(", "[", "d_min", "*", "coord1", ",", "\n", "d_min", "*", "np", ".", "ones_like", "(", "coord1", "[", ":", ",", "[", "0", "]", "]", ")", ",", "\n", "np", ".", "ones_like", "(", "coord1", "[", ":", ",", "[", "0", "]", "]", ")", "]", ",", "axis", "=", "1", ")", ".", "T", "\n", "coord1_h_max", "=", "np", ".", "concatenate", "(", "[", "d_max", "*", "coord1", ",", "\n", "d_max", "*", "np", ".", "ones_like", "(", "coord1", "[", ":", ",", "[", "0", "]", "]", ")", ",", "\n", "np", ".", "ones_like", "(", "coord1", "[", ":", ",", "[", "0", "]", "]", ")", "]", ",", "axis", "=", "1", ")", ".", "T", "\n", "coord2_h_min", "=", "intrinsic2_4x4", ".", "dot", "(", "pose", ")", ".", "dot", "(", "np", ".", "linalg", ".", "inv", "(", "intrinsic1_4x4", ")", ")", ".", "dot", "(", "coord1_h_min", ")", "\n", "coord2_h_max", "=", "intrinsic2_4x4", ".", "dot", "(", "pose", ")", ".", "dot", "(", "np", ".", "linalg", ".", "inv", "(", "intrinsic1_4x4", ")", ")", ".", "dot", "(", "coord1_h_max", ")", "\n", "coord2_min", "=", "coord2_h_min", "[", ":", "2", "]", "/", "(", "coord1_h_min", "[", "2", "]", "+", "1e-10", ")", "\n", "coord2_max", "=", "coord2_h_max", "[", ":", "2", "]", "/", "(", "coord1_h_max", "[", "2", "]", "+", "1e-10", ")", "\n", "out_range", "=", "(", "(", "coord2_min", "[", "0", "]", "<", "0", ")", "&", "(", "coord2_max", "[", "0", "]", "<", "0", ")", ")", "|", "(", "(", "coord2_min", "[", "1", "]", "<", "0", ")", "&", "(", "coord2_max", "[", "1", "]", "<", "0", ")", ")", "|", "(", "(", "coord2_min", "[", "0", "]", ">", "w2", "-", "1", ")", "&", "(", "coord2_max", "[", "0", "]", ">", "w2", "-", "1", ")", ")", "|", "(", "(", "coord2_min", "[", "1", "]", ">", "h2", "-", "1", ")", "&", "(", "coord2_max", "[", "1", "]", ">", "h2", "-", "1", ")", ")", "\n", "\n", "ind_intersect", "=", "~", "(", "non_intersect", "|", "out_range", ")", "\n", "return", "ind_intersect", "\n", "\n"]], "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.datasets.data_utils.random_choice": [[118, 126], ["numpy.random.RandomState", "len", "np.random.RandomState.choice", "np.random.RandomState.choice"], "function", ["None"], ["", "def", "random_choice", "(", "array", ",", "size", ")", ":", "\n", "    ", "rand", "=", "np", ".", "random", ".", "RandomState", "(", "1234", ")", "\n", "num_data", "=", "len", "(", "array", ")", "\n", "if", "num_data", ">", "size", ":", "\n", "        ", "idx", "=", "rand", ".", "choice", "(", "num_data", ",", "size", ",", "replace", "=", "False", ")", "\n", "", "else", ":", "\n", "        ", "idx", "=", "rand", ".", "choice", "(", "num_data", ",", "size", ",", "replace", "=", "True", ")", "\n", "", "return", "array", "[", "idx", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.datasets.data_utils.tensor2array": [[127, 172], ["tensor.detach().cpu.detach().cpu", "numpy.linspace", "low_res_cmap", "numpy.linspace", "numpy.stack", "matplotlib.colors.ListedColormap", "matplotlib.colors.LinearSegmentedColormap.from_list", "data_utils.tensor2array.opencv_rainbow"], "function", ["None"], ["", "def", "tensor2array", "(", "tensor", ",", "max_value", "=", "None", ",", "colormap", "=", "'coolwarm'", ")", ":", "\n", "    ", "def", "high_res_colormap", "(", "low_res_cmap", ",", "resolution", "=", "1000", ",", "max_value", "=", "1", ")", ":", "\n", "# Construct the list colormap, with interpolated values for higer resolution", "\n", "# For a linear segmented colormap, you can just specify the number of point in", "\n", "# cm.get_cmap(name, lutsize) with the parameter lutsize", "\n", "        ", "x", "=", "np", ".", "linspace", "(", "0", ",", "1", ",", "low_res_cmap", ".", "N", ")", "\n", "low_res", "=", "low_res_cmap", "(", "x", ")", "\n", "new_x", "=", "np", ".", "linspace", "(", "0", ",", "max_value", ",", "resolution", ")", "\n", "high_res", "=", "np", ".", "stack", "(", "[", "np", ".", "interp", "(", "new_x", ",", "x", ",", "low_res", "[", ":", ",", "i", "]", ")", "\n", "for", "i", "in", "range", "(", "low_res", ".", "shape", "[", "1", "]", ")", "]", ",", "axis", "=", "1", ")", "\n", "return", "ListedColormap", "(", "high_res", ")", "\n", "\n", "\n", "", "def", "opencv_rainbow", "(", "resolution", "=", "1000", ")", ":", "\n", "# Construct the opencv equivalent of Rainbow", "\n", "        ", "opencv_rainbow_data", "=", "(", "\n", "(", "0.000", ",", "(", "1.00", ",", "0.00", ",", "0.00", ")", ")", ",", "\n", "(", "0.400", ",", "(", "1.00", ",", "1.00", ",", "0.00", ")", ")", ",", "\n", "(", "0.600", ",", "(", "0.00", ",", "1.00", ",", "0.00", ")", ")", ",", "\n", "(", "0.800", ",", "(", "0.00", ",", "0.00", ",", "1.00", ")", ")", ",", "\n", "(", "1.000", ",", "(", "0.60", ",", "0.00", ",", "1.00", ")", ")", "\n", ")", "\n", "\n", "return", "LinearSegmentedColormap", ".", "from_list", "(", "'opencv_rainbow'", ",", "opencv_rainbow_data", ",", "resolution", ")", "\n", "", "COLORMAPS", "=", "{", "'rainbow'", ":", "opencv_rainbow", "(", ")", ",", "\n", "'magma'", ":", "high_res_colormap", "(", "cm", ".", "get_cmap", "(", "'magma'", ")", ")", ",", "\n", "'bone'", ":", "cm", ".", "get_cmap", "(", "'bone'", ",", "10000", ")", ",", "\n", "'seismic'", ":", "high_res_colormap", "(", "cm", ".", "get_cmap", "(", "'seismic'", ")", ")", ",", "\n", "'coolwarm'", ":", "high_res_colormap", "(", "cm", ".", "get_cmap", "(", "'coolwarm'", ")", ")", "}", "\n", "tensor", "=", "tensor", ".", "detach", "(", ")", ".", "cpu", "(", ")", "\n", "if", "max_value", "is", "None", ":", "\n", "        ", "max_value", "=", "tensor", ".", "max", "(", ")", ".", "item", "(", ")", "\n", "", "if", "tensor", ".", "ndimension", "(", ")", "==", "2", "or", "tensor", ".", "size", "(", "0", ")", "==", "1", ":", "\n", "        ", "norm_array", "=", "tensor", ".", "squeeze", "(", ")", ".", "numpy", "(", ")", "/", "max_value", "\n", "if", "colormap", "in", "list", "(", "COLORMAPS", ".", "keys", "(", ")", ")", ":", "\n", "            ", "map_func", "=", "COLORMAPS", "[", "colormap", "]", "\n", "", "else", ":", "\n", "            ", "map_func", "=", "high_res_colormap", "(", "cm", ".", "get_cmap", "(", "colormap", ")", ")", "\n", "", "array", "=", "map_func", "(", "norm_array", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "array", "=", "array", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", "\n", "\n", "", "elif", "tensor", ".", "ndimension", "(", ")", "==", "3", ":", "\n", "# assert(tensor.size(0) == 3)", "\n", "        ", "array", "=", "tensor", ".", "numpy", "(", ")", "\n", "", "return", "array", "", "", ""]], "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.datasets.ETH_local_feature.ETH_LFB.__init__": [[11, 29], ["torch.utils.data.Dataset.__init__", "torchvision.Compose", "cv2.SIFT_create", "path.Path", "images_dir.glob", "ETH_local_feature.ETH_LFB.imfs.sort", "torchvision.ToTensor", "torchvision.Normalize"], "methods", ["home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.losses.preprocess.Preprocess_Skip.__init__"], ["    ", "def", "__init__", "(", "self", ",", "configs", ")", ":", "\n", "        ", "\"\"\"\n        dataset for eth local feature benchmark\n        \"\"\"", "\n", "super", "(", "ETH_LFB", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "configs", "=", "configs", "\n", "self", ".", "transform", "=", "transforms", ".", "Compose", "(", "[", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "mean", "=", "(", "0.485", ",", "0.456", ",", "0.406", ")", ",", "\n", "std", "=", "(", "0.229", ",", "0.224", ",", "0.225", ")", ")", ",", "\n", "]", ")", "\n", "# self.imfs = []", "\n", "self", ".", "sift", "=", "cv2", ".", "SIFT_create", "(", ")", "\n", "imdir", "=", "Path", "(", "self", ".", "configs", "[", "'data_path'", "]", ")", "\n", "folder_dir", "=", "imdir", "/", "self", ".", "configs", "[", "'subfolder'", "]", "\n", "images_dir", "=", "folder_dir", "/", "'images'", "\n", "imgs", "=", "images_dir", ".", "glob", "(", "'*'", ")", "\n", "self", ".", "imfs", "=", "imgs", "\n", "self", ".", "imfs", ".", "sort", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.datasets.ETH_local_feature.ETH_LFB.__getitem__": [[30, 58], ["skimage.imread", "cv2.cvtColor.copy", "ETH_local_feature.ETH_LFB.transform", "cv2.cvtColor", "ETH_local_feature.ETH_LFB.sift.detect", "numpy.array", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "len", "cv2.cvtColor", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "item", ")", ":", "\n", "        ", "imf", "=", "self", ".", "imfs", "[", "item", "]", "\n", "im", "=", "io", ".", "imread", "(", "imf", ")", "\n", "name", "=", "imf", ".", "name", "\n", "name", "=", "'{}/{}'", ".", "format", "(", "self", ".", "configs", "[", "'subfolder'", "]", ",", "name", ")", "\n", "if", "len", "(", "im", ".", "shape", ")", "!=", "3", ":", "#gray images", "\n", "            ", "im", "=", "cv2", ".", "cvtColor", "(", "im", ",", "cv2", ".", "COLOR_GRAY2RGB", ")", "\n", "", "im", "=", "im", ".", "copy", "(", ")", "\n", "im_tensor", "=", "self", ".", "transform", "(", "im", ")", "#", "\n", "c", ",", "h", ",", "w", "=", "im_tensor", ".", "shape", "\n", "# pad_b = 16 - h%16", "\n", "# pad_r = 16 - w%16", "\n", "# pad = (0,pad_r,0,pad_b)", "\n", "# im_tensor = F.pad(im_tensor.unsqueeze(0), pad, mode='replicate').squeeze(0)", "\n", "pad", "=", "(", "0", ",", "0", ",", "0", ",", "0", ")", "\n", "\n", "# now use crop to get suitable size", "\n", "crop_r", "=", "w", "%", "16", "\n", "crop_b", "=", "h", "%", "16", "\n", "im_tensor", "=", "im_tensor", "[", ":", ",", ":", "h", "-", "crop_b", ",", ":", "w", "-", "crop_r", "]", "\n", "im", "=", "im", "[", ":", "h", "-", "crop_b", ",", ":", "w", "-", "crop_r", ",", ":", "]", "\n", "# using sift keypoints", "\n", "gray", "=", "cv2", ".", "cvtColor", "(", "im", ",", "cv2", ".", "COLOR_RGB2GRAY", ")", "\n", "kpts", "=", "self", ".", "sift", ".", "detect", "(", "gray", ")", "\n", "kpts", "=", "np", ".", "array", "(", "[", "[", "kp", ".", "pt", "[", "0", "]", ",", "kp", ".", "pt", "[", "1", "]", "]", "for", "kp", "in", "kpts", "]", ")", "\n", "coord", "=", "torch", ".", "from_numpy", "(", "kpts", ")", ".", "float", "(", ")", "\n", "out", "=", "{", "'im1'", ":", "im_tensor", ",", "'im1_ori'", ":", "im", ",", "'coord1'", ":", "coord", ",", "'name1'", ":", "name", ",", "'pad1'", ":", "pad", "}", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.datasets.ETH_local_feature.ETH_LFB.__len__": [[59, 61], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "imfs", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.datasets.megadepth.MegaDepth_superpoint.__init__": [[17, 44], ["torch.utils.data.Dataset.__init__", "path.Path", "megadepth.MegaDepth_superpoint.read_img_cam", "megadepth.MegaDepth_superpoint.read_pairs", "print", "numpy.arange", "rand.shuffle", "list", "list", "torchvision.Compose", "torchvision.Compose", "len", "len", "numpy.array", "numpy.array", "torchvision.ToPILImage", "torchvision.ColorJitter", "torchvision.ToTensor", "torchvision.Normalize", "torchvision.ToTensor", "torchvision.Normalize"], "methods", ["home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.losses.preprocess.Preprocess_Skip.__init__", "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.datasets.megadepth.MegaDepth_Depth.read_img_cam", "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.datasets.megadepth.MegaDepth_Depth.read_pairs"], ["    ", "def", "__init__", "(", "self", ",", "configs", ",", "is_train", "=", "True", ")", ":", "\n", "        ", "super", "(", "MegaDepth_superpoint", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "is_train", ":", "\n", "            ", "self", ".", "transform", "=", "transforms", ".", "Compose", "(", "[", "transforms", ".", "ToPILImage", "(", ")", ",", "\n", "transforms", ".", "ColorJitter", "\n", "(", "brightness", "=", "1", ",", "contrast", "=", "1", ",", "saturation", "=", "1", ",", "hue", "=", "0.4", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "mean", "=", "(", "0.485", ",", "0.456", ",", "0.406", ")", ",", "\n", "std", "=", "(", "0.229", ",", "0.224", ",", "0.225", ")", ")", ",", "\n", "]", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "transform", "=", "transforms", ".", "Compose", "(", "[", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "mean", "=", "(", "0.485", ",", "0.456", ",", "0.406", ")", ",", "\n", "std", "=", "(", "0.229", ",", "0.224", ",", "0.225", ")", ")", ",", "\n", "]", ")", "\n", "\n", "", "self", ".", "is_train", "=", "is_train", "\n", "self", ".", "configs", "=", "configs", "\n", "self", ".", "root", "=", "Path", "(", "self", ".", "configs", "[", "'data_path'", "]", ")", "\n", "self", ".", "images", "=", "self", ".", "read_img_cam", "(", ")", "\n", "self", ".", "imf1s", ",", "self", ".", "imf2s", "=", "self", ".", "read_pairs", "(", ")", "\n", "print", "(", "'total number of image pairs loaded: {}'", ".", "format", "(", "len", "(", "self", ".", "imf1s", ")", ")", ")", "\n", "# shuffle data", "\n", "index", "=", "np", ".", "arange", "(", "len", "(", "self", ".", "imf1s", ")", ")", "\n", "rand", ".", "shuffle", "(", "index", ")", "\n", "self", ".", "imf1s", "=", "list", "(", "np", ".", "array", "(", "self", ".", "imf1s", ")", "[", "index", "]", ")", "\n", "self", ".", "imf2s", "=", "list", "(", "np", ".", "array", "(", "self", ".", "imf2s", ")", "[", "index", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.datasets.megadepth.MegaDepth_superpoint.read_img_cam": [[45, 80], ["collections.namedtuple", "os.listdir", "os.listdir", "open", "os.path.join", "os.path.isdir", "fid.readline", "line.strip.strip.strip", "os.path.join", "line.strip.strip.split", "numpy.array", "numpy.array", "len", "int", "int", "float", "float", "float", "float", "collections.namedtuple.", "collections.namedtuple."], "methods", ["None"], ["", "def", "read_img_cam", "(", "self", ")", ":", "\n", "        ", "images", "=", "{", "}", "\n", "Image", "=", "collections", ".", "namedtuple", "(", "\n", "\"Image\"", ",", "[", "\"name\"", ",", "\"w\"", ",", "\"h\"", ",", "\"fx\"", ",", "\"fy\"", ",", "\"cx\"", ",", "\"cy\"", ",", "\"rvec\"", ",", "\"tvec\"", "]", ")", "\n", "for", "scene_id", "in", "os", ".", "listdir", "(", "self", ".", "root", ")", ":", "\n", "            ", "densefs", "=", "[", "f", "for", "f", "in", "os", ".", "listdir", "(", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "scene_id", ")", ")", "\n", "if", "'dense'", "in", "f", "and", "os", ".", "path", ".", "isdir", "(", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "scene_id", ",", "f", ")", ")", "]", "\n", "for", "densef", "in", "densefs", ":", "\n", "                ", "folder", "=", "self", ".", "root", "/", "'{}/{}/aligned'", ".", "format", "(", "scene_id", ",", "densef", ")", "#os.path.join(self.root, scene_id, densef, 'aligned')", "\n", "img_cam_txt_path", "=", "folder", "/", "'img_cam.txt'", "#os.path.join(folder, 'img_cam.txt')", "\n", "with", "open", "(", "img_cam_txt_path", ",", "\"r\"", ")", "as", "fid", ":", "\n", "                    ", "while", "True", ":", "\n", "                        ", "line", "=", "fid", ".", "readline", "(", ")", "\n", "if", "not", "line", ":", "\n", "                            ", "break", "\n", "", "line", "=", "line", ".", "strip", "(", ")", "\n", "if", "len", "(", "line", ")", ">", "0", "and", "line", "[", "0", "]", "!=", "\"#\"", ":", "\n", "                            ", "elems", "=", "line", ".", "split", "(", ")", "\n", "image_name", "=", "elems", "[", "0", "]", "\n", "img_path", "=", "folder", "/", "'images/'", "+", "image_name", "#os.path.join(folder, 'images', image_name)", "\n", "w", ",", "h", "=", "int", "(", "elems", "[", "1", "]", ")", ",", "int", "(", "elems", "[", "2", "]", ")", "\n", "fx", ",", "fy", "=", "float", "(", "elems", "[", "3", "]", ")", ",", "float", "(", "elems", "[", "4", "]", ")", "\n", "cx", ",", "cy", "=", "float", "(", "elems", "[", "5", "]", ")", ",", "float", "(", "elems", "[", "6", "]", ")", "\n", "R", "=", "np", ".", "array", "(", "elems", "[", "7", ":", "16", "]", ")", "\n", "T", "=", "np", ".", "array", "(", "elems", "[", "16", ":", "19", "]", ")", "\n", "if", "self", ".", "is_train", ":", "\n", "                                ", "label", "=", "self", ".", "data_dict", "[", "scene_id", "]", "\n", "images", "[", "img_path", "]", "=", "Image", "(", "\n", "name", "=", "image_name", ",", "w", "=", "w", ",", "h", "=", "h", ",", "fx", "=", "fx", ",", "fy", "=", "fy", ",", "cx", "=", "cx", ",", "cy", "=", "cy", ",", "rvec", "=", "R", ",", "tvec", "=", "T", "\n", ")", "\n", "", "else", ":", "\n", "                                ", "images", "[", "img_path", "]", "=", "Image", "(", "\n", "name", "=", "image_name", ",", "w", "=", "w", ",", "h", "=", "h", ",", "fx", "=", "fx", ",", "fy", "=", "fy", ",", "cx", "=", "cx", ",", "cy", "=", "cy", ",", "rvec", "=", "R", ",", "tvec", "=", "T", "\n", ")", "\n", "", "", "", "", "", "", "return", "images", "\n", "\n"]], "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.datasets.megadepth.MegaDepth_superpoint.read_pairs": [[81, 113], ["print", "tqdm.tqdm.tqdm", "os.listdir", "os.path.exists", "imf1s.extend", "imf2s.extend", "os.listdir", "open", "len", "numpy.arange", "rand.shuffle", "list", "list", "os.path.join", "os.path.isdir", "line.strip().split", "list.append", "list.append", "len", "os.path.join", "numpy.array", "numpy.array", "line.strip"], "methods", ["None"], ["", "def", "read_pairs", "(", "self", ")", ":", "\n", "        ", "imf1s", ",", "imf2s", "=", "[", "]", ",", "[", "]", "\n", "print", "(", "'reading image pairs from {}...'", ".", "format", "(", "self", ".", "root", ")", ")", "\n", "for", "scene_id", "in", "tqdm", "(", "os", ".", "listdir", "(", "self", ".", "root", ")", ",", "desc", "=", "'# loading data from scene folders'", ")", ":", "\n", "            ", "densefs", "=", "[", "f", "for", "f", "in", "os", ".", "listdir", "(", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "scene_id", ")", ")", "\n", "if", "'dense'", "in", "f", "and", "os", ".", "path", ".", "isdir", "(", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "scene_id", ",", "f", ")", ")", "]", "\n", "for", "densef", "in", "densefs", ":", "\n", "                ", "imf1s_", "=", "[", "]", "\n", "imf2s_", "=", "[", "]", "\n", "folder", "=", "self", ".", "root", "/", "'{}/{}/aligned'", ".", "format", "(", "scene_id", ",", "densef", ")", "\n", "pairf", "=", "folder", "/", "'pairs.txt'", "#os.path.join(folder, 'pairs.txt')", "\n", "\n", "if", "os", ".", "path", ".", "exists", "(", "pairf", ")", ":", "\n", "                    ", "f", "=", "open", "(", "pairf", ",", "'r'", ")", "\n", "for", "line", "in", "f", ":", "\n", "                        ", "imf1", ",", "imf2", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "' '", ")", "\n", "imf1s_", ".", "append", "(", "folder", "/", "'images/'", "+", "imf1", ")", "\n", "imf2s_", ".", "append", "(", "folder", "/", "'images/'", "+", "imf2", ")", "\n", "# imf1s_.append(os.path.join(folder, 'images', imf1))", "\n", "# imf2s_.append(os.path.join(folder, 'images', imf2))", "\n", "\n", "# make # image pairs per scene more balanced", "\n", "", "", "if", "len", "(", "imf1s_", ")", ">", "5000", ":", "\n", "                    ", "index", "=", "np", ".", "arange", "(", "len", "(", "imf1s_", ")", ")", "\n", "rand", ".", "shuffle", "(", "index", ")", "\n", "imf1s_", "=", "list", "(", "np", ".", "array", "(", "imf1s_", ")", "[", "index", "[", ":", "5000", "]", "]", ")", "\n", "imf2s_", "=", "list", "(", "np", ".", "array", "(", "imf2s_", ")", "[", "index", "[", ":", "5000", "]", "]", ")", "\n", "\n", "", "imf1s", ".", "extend", "(", "imf1s_", ")", "\n", "imf2s", ".", "extend", "(", "imf2s_", ")", "\n", "\n", "", "", "return", "imf1s", ",", "imf2s", "\n", "\n"]], "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.datasets.megadepth.MegaDepth_superpoint.get_intrinsics": [[114, 119], ["numpy.array"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "get_intrinsics", "(", "im_meta", ")", ":", "\n", "        ", "return", "np", ".", "array", "(", "[", "[", "im_meta", ".", "fx", ",", "0", ",", "im_meta", ".", "cx", "]", ",", "\n", "[", "0", ",", "im_meta", ".", "fy", ",", "im_meta", ".", "cy", "]", ",", "\n", "[", "0", ",", "0", ",", "1", "]", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.datasets.megadepth.MegaDepth_superpoint.get_point_labels": [[120, 127], ["file_path.dirname().dirname", "file_path.name().replace", "numpy.load", "file_path.dirname", "file_path.name"], "methods", ["home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.losses.preprocess.Preprocess_Line2Window.name"], ["", "@", "staticmethod", "\n", "def", "get_point_labels", "(", "file_path", ")", ":", "\n", "        ", "label_root", "=", "file_path", ".", "dirname", "(", ")", ".", "dirname", "(", ")", "\n", "name", "=", "file_path", ".", "name", "(", ")", ".", "replace", "(", "'jpg'", ",", "'npz'", ")", "\n", "label_file", "=", "np", ".", "load", "(", "label_root", "/", "name", ")", "[", "'pts'", "]", "\n", "label_file", "=", "label_file", "[", ":", ",", ":", "2", "]", "\n", "return", "label_file", "\n", "\n"]], "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.datasets.megadepth.MegaDepth_superpoint.get_extrinsics": [[128, 136], ["im_meta.rvec.reshape", "numpy.eye"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "get_extrinsics", "(", "im_meta", ")", ":", "\n", "        ", "R", "=", "im_meta", ".", "rvec", ".", "reshape", "(", "3", ",", "3", ")", "\n", "t", "=", "im_meta", ".", "tvec", "\n", "extrinsic", "=", "np", ".", "eye", "(", "4", ")", "\n", "extrinsic", "[", ":", "3", ",", ":", "3", "]", "=", "R", "\n", "extrinsic", "[", ":", "3", ",", "3", "]", "=", "t", "\n", "return", "extrinsic", "\n", "\n"]], "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.datasets.megadepth.MegaDepth_superpoint.__getitem__": [[137, 232], ["skimage.imread", "skimage.imread", "megadepth.MegaDepth_superpoint.get_intrinsics", "megadepth.MegaDepth_superpoint.get_intrinsics", "megadepth.MegaDepth_superpoint.get_extrinsics", "megadepth.MegaDepth_superpoint.get_extrinsics", "megadepth.MegaDepth_superpoint.dot", "datasets.skew", "numpy.dot", "numpy.linalg.inv().T.dot().dot", "megadepth.MegaDepth_superpoint.dot", "datasets.skew", "numpy.dot", "numpy.linalg.inv().T.dot().dot", "megadepth.MegaDepth_superpoint.get_point_labels", "megadepth.MegaDepth_superpoint.get_point_labels", "datasets.random_choice", "torch.from_numpy().float", "datasets.random_choice", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "megadepth.MegaDepth_superpoint.transform", "megadepth.MegaDepth_superpoint.transform", "numpy.linalg.inv", "numpy.linalg.inv", "numpy.linalg.inv", "numpy.linalg.inv", "datasets.prune_kpts", "datasets.prune_kpts", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy().float", "torch.from_numpy().float", "numpy.arccos", "numpy.linalg.inv().T.dot", "numpy.arccos", "numpy.linalg.inv().T.dot", "len", "len", "numpy.sum", "numpy.sum", "len", "len", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "numpy.clip", "numpy.clip", "torch.from_numpy", "torch.from_numpy", "numpy.linalg.inv", "numpy.linalg.inv", "numpy.trace", "numpy.trace"], "methods", ["home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.datasets.megadepth.MegaDepth_Depth.get_intrinsics", "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.datasets.megadepth.MegaDepth_Depth.get_intrinsics", "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.datasets.megadepth.MegaDepth_Depth.get_extrinsics", "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.datasets.megadepth.MegaDepth_Depth.get_extrinsics", "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.datasets.data_utils.skew", "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.datasets.data_utils.skew", "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.datasets.megadepth.MegaDepth_superpoint.get_point_labels", "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.datasets.megadepth.MegaDepth_superpoint.get_point_labels", "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.datasets.data_utils.random_choice", "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.datasets.data_utils.random_choice", "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.datasets.data_utils.prune_kpts", "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.datasets.data_utils.prune_kpts"], ["", "def", "__getitem__", "(", "self", ",", "item", ")", ":", "\n", "        ", "imf1", "=", "self", ".", "imf1s", "[", "item", "]", "\n", "imf2", "=", "self", ".", "imf2s", "[", "item", "]", "\n", "im1_meta", "=", "self", ".", "images", "[", "imf1", "]", "\n", "im2_meta", "=", "self", ".", "images", "[", "imf2", "]", "\n", "im1", "=", "io", ".", "imread", "(", "imf1", ")", "\n", "im2", "=", "io", ".", "imread", "(", "imf2", ")", "\n", "h", ",", "w", "=", "im1", ".", "shape", "[", ":", "2", "]", "\n", "\n", "intrinsic1", "=", "self", ".", "get_intrinsics", "(", "im1_meta", ")", "\n", "intrinsic2", "=", "self", ".", "get_intrinsics", "(", "im2_meta", ")", "\n", "\n", "extrinsic1", "=", "self", ".", "get_extrinsics", "(", "im1_meta", ")", "\n", "extrinsic2", "=", "self", ".", "get_extrinsics", "(", "im2_meta", ")", "\n", "\n", "relative", "=", "extrinsic2", ".", "dot", "(", "np", ".", "linalg", ".", "inv", "(", "extrinsic1", ")", ")", "\n", "R", "=", "relative", "[", ":", "3", ",", ":", "3", "]", "\n", "# remove pairs that have a relative rotation angle larger than 80 degrees", "\n", "theta", "=", "np", ".", "arccos", "(", "np", ".", "clip", "(", "(", "np", ".", "trace", "(", "R", ")", "-", "1", ")", "/", "2", ",", "-", "1", ",", "1", ")", ")", "*", "180", "/", "np", ".", "pi", "\n", "if", "theta", ">", "self", ".", "configs", "[", "'rot_thr'", "]", "and", "self", ".", "is_train", ":", "\n", "            ", "return", "None", "\n", "\n", "", "T", "=", "relative", "[", ":", "3", ",", "3", "]", "\n", "tx", "=", "data_utils", ".", "skew", "(", "T", ")", "\n", "E_gt", "=", "np", ".", "dot", "(", "tx", ",", "R", ")", "\n", "F_gt", "=", "np", ".", "linalg", ".", "inv", "(", "intrinsic2", ")", ".", "T", ".", "dot", "(", "E_gt", ")", ".", "dot", "(", "np", ".", "linalg", ".", "inv", "(", "intrinsic1", ")", ")", "\n", "\n", "relative2", "=", "extrinsic1", ".", "dot", "(", "np", ".", "linalg", ".", "inv", "(", "extrinsic2", ")", ")", "\n", "R2", "=", "relative2", "[", ":", "3", ",", ":", "3", "]", "\n", "# remove pairs that have a relative rotation angle larger than 80 degrees", "\n", "theta2", "=", "np", ".", "arccos", "(", "np", ".", "clip", "(", "(", "np", ".", "trace", "(", "R2", ")", "-", "1", ")", "/", "2", ",", "-", "1", ",", "1", ")", ")", "*", "180", "/", "np", ".", "pi", "\n", "if", "theta2", ">", "self", ".", "configs", "[", "'rot_thr'", "]", "and", "self", ".", "is_train", ":", "\n", "            ", "return", "None", "\n", "\n", "", "T2", "=", "relative2", "[", ":", "3", ",", "3", "]", "\n", "tx2", "=", "data_utils", ".", "skew", "(", "T2", ")", "\n", "E_gt2", "=", "np", ".", "dot", "(", "tx2", ",", "R2", ")", "\n", "F_gt2", "=", "np", ".", "linalg", ".", "inv", "(", "intrinsic1", ")", ".", "T", ".", "dot", "(", "E_gt2", ")", ".", "dot", "(", "np", ".", "linalg", ".", "inv", "(", "intrinsic2", ")", ")", "\n", "\n", "# generate candidate query points", "\n", "# coord1 = data_utils.generate_query_kpts(im1, self.args.train_kp, 10*self.args.num_pts, h, w)", "\n", "coord1", "=", "self", ".", "get_point_labels", "(", "imf1", ")", "\n", "coord2", "=", "self", ".", "get_point_labels", "(", "imf2", ")", "\n", "\n", "# if no keypoints are detected", "\n", "if", "len", "(", "coord1", ")", "==", "0", "or", "len", "(", "coord2", ")", "==", "0", ":", "\n", "            ", "return", "None", "\n", "\n", "# prune query keypoints that are not likely to have correspondence in the other image", "\n", "", "if", "self", ".", "configs", "[", "'prune_kp'", "]", ":", "\n", "            ", "ind_intersect", "=", "data_utils", ".", "prune_kpts", "(", "coord1", "[", ":", ",", ":", "2", "]", ",", "F_gt", ",", "im2", ".", "shape", "[", ":", "2", "]", ",", "intrinsic1", ",", "intrinsic2", ",", "\n", "relative", ",", "d_min", "=", "4", ",", "d_max", "=", "400", ")", "\n", "if", "np", ".", "sum", "(", "ind_intersect", ")", "==", "0", ":", "\n", "                ", "return", "None", "\n", "", "coord1", "=", "coord1", "[", "ind_intersect", "]", "\n", "\n", "ind_intersect2", "=", "data_utils", ".", "prune_kpts", "(", "coord2", "[", ":", ",", ":", "2", "]", ",", "F_gt2", ",", "im1", ".", "shape", "[", ":", "2", "]", ",", "intrinsic2", ",", "intrinsic1", ",", "\n", "relative2", ",", "d_min", "=", "4", ",", "d_max", "=", "400", ")", "\n", "if", "np", ".", "sum", "(", "ind_intersect2", ")", "==", "0", ":", "\n", "                ", "return", "None", "\n", "", "coord2", "=", "coord2", "[", "ind_intersect2", "]", "\n", "\n", "", "if", "len", "(", "coord1", ")", "<", "self", ".", "configs", "[", "'num_pts'", "]", "or", "len", "(", "coord2", ")", "<", "self", ".", "configs", "[", "'num_pts'", "]", ":", "\n", "            ", "return", "None", "\n", "\n", "", "coord1", "=", "data_utils", ".", "random_choice", "(", "coord1", ",", "self", ".", "configs", "[", "'num_pts'", "]", ")", "\n", "coord1", "=", "torch", ".", "from_numpy", "(", "coord1", ")", ".", "float", "(", ")", "\n", "coord2", "=", "data_utils", ".", "random_choice", "(", "coord2", ",", "self", ".", "configs", "[", "'num_pts'", "]", ")", "\n", "coord2", "=", "torch", ".", "from_numpy", "(", "coord2", ")", ".", "float", "(", ")", "\n", "\n", "im1_ori", ",", "im2_ori", "=", "torch", ".", "from_numpy", "(", "im1", ")", ",", "torch", ".", "from_numpy", "(", "im2", ")", "\n", "\n", "F_gt", "=", "torch", ".", "from_numpy", "(", "F_gt", ")", ".", "float", "(", ")", "/", "(", "F_gt", "[", "-", "1", ",", "-", "1", "]", "+", "1e-10", ")", "\n", "F_gt2", "=", "torch", ".", "from_numpy", "(", "F_gt2", ")", ".", "float", "(", ")", "/", "(", "F_gt2", "[", "-", "1", ",", "-", "1", "]", "+", "1e-10", ")", "\n", "intrinsic1", "=", "torch", ".", "from_numpy", "(", "intrinsic1", ")", ".", "float", "(", ")", "\n", "intrinsic2", "=", "torch", ".", "from_numpy", "(", "intrinsic2", ")", ".", "float", "(", ")", "\n", "pose", "=", "torch", ".", "from_numpy", "(", "relative", "[", ":", "3", ",", ":", "]", ")", ".", "float", "(", ")", "\n", "pose2", "=", "torch", ".", "from_numpy", "(", "relative2", "[", ":", "3", ",", ":", "]", ")", ".", "float", "(", ")", "\n", "im1_tensor", "=", "self", ".", "transform", "(", "im1", ")", "\n", "im2_tensor", "=", "self", ".", "transform", "(", "im2", ")", "\n", "\n", "out", "=", "{", "'im1'", ":", "im1_tensor", ",", "\n", "'im2'", ":", "im2_tensor", ",", "\n", "'im1_ori'", ":", "im1_ori", ",", "\n", "'im2_ori'", ":", "im2_ori", ",", "\n", "'pose1'", ":", "pose", ",", "\n", "'pose2'", ":", "pose2", ",", "\n", "'F1'", ":", "F_gt", ",", "\n", "'F2'", ":", "F_gt2", ",", "\n", "'intrinsic1'", ":", "intrinsic1", ",", "\n", "'intrinsic2'", ":", "intrinsic2", ",", "\n", "'coord1'", ":", "coord1", ",", "\n", "'coord2'", ":", "coord2", "}", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.datasets.megadepth.MegaDepth_superpoint.__len__": [[233, 235], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "imf1s", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.datasets.megadepth.MegaDepth_SIFT.__init__": [[238, 265], ["torch.utils.data.Dataset.__init__", "path.Path", "megadepth.MegaDepth_SIFT.read_img_cam", "megadepth.MegaDepth_SIFT.read_pairs", "print", "numpy.arange", "rand.shuffle", "list", "list", "torchvision.Compose", "torchvision.Compose", "len", "len", "numpy.array", "numpy.array", "torchvision.ToPILImage", "torchvision.ColorJitter", "torchvision.ToTensor", "torchvision.Normalize", "torchvision.ToTensor", "torchvision.Normalize"], "methods", ["home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.losses.preprocess.Preprocess_Skip.__init__", "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.datasets.megadepth.MegaDepth_Depth.read_img_cam", "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.datasets.megadepth.MegaDepth_Depth.read_pairs"], ["    ", "def", "__init__", "(", "self", ",", "configs", ",", "is_train", "=", "True", ")", ":", "\n", "        ", "super", "(", "MegaDepth_SIFT", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "is_train", ":", "\n", "            ", "self", ".", "transform", "=", "transforms", ".", "Compose", "(", "[", "transforms", ".", "ToPILImage", "(", ")", ",", "\n", "transforms", ".", "ColorJitter", "\n", "(", "brightness", "=", "1", ",", "contrast", "=", "1", ",", "saturation", "=", "1", ",", "hue", "=", "0.4", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "mean", "=", "(", "0.485", ",", "0.456", ",", "0.406", ")", ",", "\n", "std", "=", "(", "0.229", ",", "0.224", ",", "0.225", ")", ")", ",", "\n", "]", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "transform", "=", "transforms", ".", "Compose", "(", "[", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "mean", "=", "(", "0.485", ",", "0.456", ",", "0.406", ")", ",", "\n", "std", "=", "(", "0.229", ",", "0.224", ",", "0.225", ")", ")", ",", "\n", "]", ")", "\n", "\n", "", "self", ".", "is_train", "=", "is_train", "\n", "self", ".", "configs", "=", "configs", "\n", "self", ".", "root", "=", "Path", "(", "self", ".", "configs", "[", "'data_path'", "]", ")", "\n", "self", ".", "images", "=", "self", ".", "read_img_cam", "(", ")", "\n", "self", ".", "imf1s", ",", "self", ".", "imf2s", "=", "self", ".", "read_pairs", "(", ")", "\n", "print", "(", "'total number of image pairs loaded: {}'", ".", "format", "(", "len", "(", "self", ".", "imf1s", ")", ")", ")", "\n", "# shuffle data", "\n", "index", "=", "np", ".", "arange", "(", "len", "(", "self", ".", "imf1s", ")", ")", "\n", "rand", ".", "shuffle", "(", "index", ")", "\n", "self", ".", "imf1s", "=", "list", "(", "np", ".", "array", "(", "self", ".", "imf1s", ")", "[", "index", "]", ")", "\n", "self", ".", "imf2s", "=", "list", "(", "np", ".", "array", "(", "self", ".", "imf2s", ")", "[", "index", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.datasets.megadepth.MegaDepth_SIFT.read_img_cam": [[266, 297], ["collections.namedtuple", "megadepth.MegaDepth_SIFT.root.listdir", "scene_id.isdir", "scene_id.listdir", "open", "f.isdir", "fid.readline", "line.strip.strip.strip", "line.strip.strip.split", "numpy.array", "numpy.array", "collections.namedtuple.", "len", "int", "int", "float", "float", "float", "float"], "methods", ["None"], ["", "def", "read_img_cam", "(", "self", ")", ":", "\n", "        ", "images", "=", "{", "}", "\n", "Image", "=", "collections", ".", "namedtuple", "(", "\n", "\"Image\"", ",", "[", "\"name\"", ",", "\"w\"", ",", "\"h\"", ",", "\"fx\"", ",", "\"fy\"", ",", "\"cx\"", ",", "\"cy\"", ",", "\"rvec\"", ",", "\"tvec\"", "]", ")", "\n", "for", "scene_id", "in", "self", ".", "root", ".", "listdir", "(", ")", ":", "\n", "            ", "if", "not", "scene_id", ".", "isdir", "(", ")", ":", "\n", "                ", "continue", "\n", "", "densefs", "=", "[", "f", ".", "name", "for", "f", "in", "scene_id", ".", "listdir", "(", ")", "\n", "if", "'dense'", "in", "f", ".", "name", "and", "f", ".", "isdir", "(", ")", "]", "\n", "for", "densef", "in", "densefs", ":", "\n", "                ", "folder", "=", "scene_id", "/", "'{}/aligned'", ".", "format", "(", "densef", ")", "#os.path.join(self.root, scene_id, densef, 'aligned')", "\n", "img_cam_txt_path", "=", "folder", "/", "'img_cam.txt'", "#os.path.join(folder, 'img_cam.txt')", "\n", "with", "open", "(", "img_cam_txt_path", ",", "\"r\"", ")", "as", "fid", ":", "\n", "                    ", "while", "True", ":", "\n", "                        ", "line", "=", "fid", ".", "readline", "(", ")", "\n", "if", "not", "line", ":", "\n", "                            ", "break", "\n", "", "line", "=", "line", ".", "strip", "(", ")", "\n", "if", "len", "(", "line", ")", ">", "0", "and", "line", "[", "0", "]", "!=", "\"#\"", ":", "\n", "                            ", "elems", "=", "line", ".", "split", "(", ")", "\n", "image_name", "=", "elems", "[", "0", "]", "\n", "img_path", "=", "folder", "/", "'images/'", "+", "image_name", "#os.path.join(folder, 'images', image_name)", "\n", "w", ",", "h", "=", "int", "(", "elems", "[", "1", "]", ")", ",", "int", "(", "elems", "[", "2", "]", ")", "\n", "fx", ",", "fy", "=", "float", "(", "elems", "[", "3", "]", ")", ",", "float", "(", "elems", "[", "4", "]", ")", "\n", "cx", ",", "cy", "=", "float", "(", "elems", "[", "5", "]", ")", ",", "float", "(", "elems", "[", "6", "]", ")", "\n", "R", "=", "np", ".", "array", "(", "elems", "[", "7", ":", "16", "]", ")", "\n", "T", "=", "np", ".", "array", "(", "elems", "[", "16", ":", "19", "]", ")", "\n", "images", "[", "img_path", "]", "=", "Image", "(", "\n", "name", "=", "image_name", ",", "w", "=", "w", ",", "h", "=", "h", ",", "fx", "=", "fx", ",", "fy", "=", "fy", ",", "cx", "=", "cx", ",", "cy", "=", "cy", ",", "rvec", "=", "R", ",", "tvec", "=", "T", "\n", ")", "\n", "", "", "", "", "", "return", "images", "\n", "\n"]], "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.datasets.megadepth.MegaDepth_SIFT.read_pairs": [[298, 332], ["print", "tqdm.tqdm.tqdm", "megadepth.MegaDepth_SIFT.root.listdir", "scene_id.isdir", "os.path.exists", "imf1s.extend", "imf2s.extend", "scene_id.listdir", "open", "len", "numpy.arange", "rand.shuffle", "list", "list", "open.isdir", "line.strip().split", "list.append", "list.append", "len", "numpy.array", "numpy.array", "line.strip"], "methods", ["None"], ["", "def", "read_pairs", "(", "self", ")", ":", "\n", "        ", "imf1s", ",", "imf2s", "=", "[", "]", ",", "[", "]", "\n", "print", "(", "'reading image pairs from {}...'", ".", "format", "(", "self", ".", "root", ")", ")", "\n", "for", "scene_id", "in", "tqdm", "(", "self", ".", "root", ".", "listdir", "(", ")", ",", "desc", "=", "'# loading data from scene folders'", ")", ":", "\n", "            ", "if", "not", "scene_id", ".", "isdir", "(", ")", ":", "\n", "                ", "continue", "\n", "", "densefs", "=", "[", "f", ".", "name", "for", "f", "in", "scene_id", ".", "listdir", "(", ")", "\n", "if", "'dense'", "in", "f", ".", "name", "and", "f", ".", "isdir", "(", ")", "]", "\n", "for", "densef", "in", "densefs", ":", "\n", "                ", "imf1s_", "=", "[", "]", "\n", "imf2s_", "=", "[", "]", "\n", "folder", "=", "scene_id", "/", "'{}/aligned'", ".", "format", "(", "densef", ")", "\n", "pairf", "=", "folder", "/", "'pairs.txt'", "#os.path.join(folder, 'pairs.txt')", "\n", "\n", "if", "os", ".", "path", ".", "exists", "(", "pairf", ")", ":", "\n", "                    ", "f", "=", "open", "(", "pairf", ",", "'r'", ")", "\n", "for", "line", "in", "f", ":", "\n", "                        ", "imf1", ",", "imf2", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "' '", ")", "\n", "imf1s_", ".", "append", "(", "folder", "/", "'images/'", "+", "imf1", ")", "\n", "imf2s_", ".", "append", "(", "folder", "/", "'images/'", "+", "imf2", ")", "\n", "# imf1s_.append(os.path.join(folder, 'images', imf1))", "\n", "# imf2s_.append(os.path.join(folder, 'images', imf2))", "\n", "\n", "# make # image pairs per scene more balanced", "\n", "", "", "if", "len", "(", "imf1s_", ")", ">", "5000", ":", "\n", "                    ", "index", "=", "np", ".", "arange", "(", "len", "(", "imf1s_", ")", ")", "\n", "rand", ".", "shuffle", "(", "index", ")", "\n", "imf1s_", "=", "list", "(", "np", ".", "array", "(", "imf1s_", ")", "[", "index", "[", ":", "5000", "]", "]", ")", "\n", "imf2s_", "=", "list", "(", "np", ".", "array", "(", "imf2s_", ")", "[", "index", "[", ":", "5000", "]", "]", ")", "\n", "\n", "", "imf1s", ".", "extend", "(", "imf1s_", ")", "\n", "imf2s", ".", "extend", "(", "imf2s_", ")", "\n", "\n", "", "", "return", "imf1s", ",", "imf2s", "\n", "\n"]], "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.datasets.megadepth.MegaDepth_SIFT.get_intrinsics": [[333, 338], ["numpy.array"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "get_intrinsics", "(", "im_meta", ")", ":", "\n", "        ", "return", "np", ".", "array", "(", "[", "[", "im_meta", ".", "fx", ",", "0", ",", "im_meta", ".", "cx", "]", ",", "\n", "[", "0", ",", "im_meta", ".", "fy", ",", "im_meta", ".", "cy", "]", ",", "\n", "[", "0", ",", "0", ",", "1", "]", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.datasets.megadepth.MegaDepth_SIFT.generate_query_kpts": [[340, 374], ["numpy.random.rand", "numpy.random.rand", "numpy.stack", "cv2.cvtColor", "cv2.SIFT_create", "cv2.SIFT_create.detect", "numpy.array", "cv2.SIFT_create", "cv2.cvtColor", "cv2.SIFT_create.detect", "numpy.array", "Exception", "numpy.zeros", "numpy.random.rand", "numpy.random.rand", "numpy.stack", "len", "numpy.concatenate", "int", "int", "int", "numpy.zeros"], "methods", ["None"], ["", "def", "generate_query_kpts", "(", "self", ",", "img", ",", "num_pts", ",", "h", ",", "w", ",", "mode", "=", "'mixed'", ")", ":", "\n", "# generate candidate query points", "\n", "        ", "if", "mode", "==", "'random'", ":", "\n", "            ", "kp1_x", "=", "np", ".", "random", ".", "rand", "(", "num_pts", ")", "*", "(", "w", "-", "1", ")", "\n", "kp1_y", "=", "np", ".", "random", ".", "rand", "(", "num_pts", ")", "*", "(", "h", "-", "1", ")", "\n", "coord", "=", "np", ".", "stack", "(", "(", "kp1_x", ",", "kp1_y", ",", "np", ".", "zeros", "(", "kp1_x", ".", "shape", ")", ")", ")", ".", "T", "\n", "\n", "", "elif", "mode", "==", "'sift'", ":", "\n", "            ", "gray1", "=", "cv2", ".", "cvtColor", "(", "img", ",", "cv2", ".", "COLOR_RGB2GRAY", ")", "\n", "# sift = cv2.xfeatures2d.SIFT_create(nfeatures=num_pts)", "\n", "sift", "=", "cv2", ".", "SIFT_create", "(", "nfeatures", "=", "num_pts", ")", "\n", "kp1", "=", "sift", ".", "detect", "(", "gray1", ")", "\n", "coord", "=", "np", ".", "array", "(", "[", "[", "kp", ".", "pt", "[", "0", "]", ",", "kp", ".", "pt", "[", "1", "]", ",", "1", "]", "for", "kp", "in", "kp1", "]", ")", "\n", "\n", "", "elif", "mode", "==", "'mixed'", ":", "\n", "            ", "kp1_x", "=", "np", ".", "random", ".", "rand", "(", "1", "*", "int", "(", "self", ".", "configs", "[", "'random_percent'", "]", "*", "num_pts", ")", ")", "*", "(", "w", "-", "1", ")", "\n", "kp1_y", "=", "np", ".", "random", ".", "rand", "(", "1", "*", "int", "(", "self", ".", "configs", "[", "'random_percent'", "]", "*", "num_pts", ")", ")", "*", "(", "h", "-", "1", ")", "\n", "kp1_rand", "=", "np", ".", "stack", "(", "(", "kp1_x", ",", "kp1_y", ",", "np", ".", "zeros", "(", "kp1_x", ".", "shape", ")", ")", ")", ".", "T", "\n", "\n", "# sift = cv2.xfeatures2d.SIFT_create(nfeatures=int(0.5 * num_pts))", "\n", "sift", "=", "cv2", ".", "SIFT_create", "(", "nfeatures", "=", "int", "(", "(", "1", "-", "self", ".", "configs", "[", "'random_percent'", "]", ")", "*", "num_pts", ")", ")", "\n", "# sift = cv2.SIFT_create()", "\n", "gray1", "=", "cv2", ".", "cvtColor", "(", "img", ",", "cv2", ".", "COLOR_RGB2GRAY", ")", "\n", "kp1_sift", "=", "sift", ".", "detect", "(", "gray1", ")", "\n", "kp1_sift", "=", "np", ".", "array", "(", "[", "[", "kp", ".", "pt", "[", "0", "]", ",", "kp", ".", "pt", "[", "1", "]", ",", "1", "]", "for", "kp", "in", "kp1_sift", "]", ")", "\n", "if", "len", "(", "kp1_sift", ")", "==", "0", ":", "\n", "                ", "coord", "=", "kp1_rand", "\n", "", "else", ":", "\n", "                ", "coord", "=", "np", ".", "concatenate", "(", "(", "kp1_rand", ",", "kp1_sift", ")", ",", "0", ")", "\n", "\n", "", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "'unknown type of keypoints'", ")", "\n", "\n", "", "return", "coord", "\n", "\n"]], "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.datasets.megadepth.MegaDepth_SIFT.get_extrinsics": [[375, 383], ["im_meta.rvec.reshape", "numpy.eye"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "get_extrinsics", "(", "im_meta", ")", ":", "\n", "        ", "R", "=", "im_meta", ".", "rvec", ".", "reshape", "(", "3", ",", "3", ")", "\n", "t", "=", "im_meta", ".", "tvec", "\n", "extrinsic", "=", "np", ".", "eye", "(", "4", ")", "\n", "extrinsic", "[", ":", "3", ",", ":", "3", "]", "=", "R", "\n", "extrinsic", "[", ":", "3", ",", "3", "]", "=", "t", "\n", "return", "extrinsic", "\n", "\n"]], "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.datasets.megadepth.MegaDepth_SIFT.get_data_aug": [[384, 391], ["skimage.imread", "torch.rand"], "methods", ["None"], ["", "def", "get_data_aug", "(", "self", ",", "item", ")", ":", "\n", "        ", "if", "torch", ".", "rand", "(", "1", ")", "<", "0.5", ":", "\n", "            ", "imf1", "=", "self", ".", "imf1s", "[", "item", "]", "\n", "", "else", ":", "\n", "            ", "imf1", "=", "self", ".", "imf2s", "[", "item", "]", "\n", "", "im1_meta", "=", "self", ".", "images", "[", "imf1", "]", "\n", "im1", "=", "io", ".", "imread", "(", "imf1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.datasets.megadepth.MegaDepth_SIFT.__getitem__": [[392, 492], ["skimage.imread", "skimage.imread", "megadepth.MegaDepth_SIFT.get_intrinsics", "megadepth.MegaDepth_SIFT.get_intrinsics", "megadepth.MegaDepth_SIFT.get_extrinsics", "megadepth.MegaDepth_SIFT.get_extrinsics", "megadepth.MegaDepth_SIFT.dot", "datasets.skew", "numpy.dot", "numpy.linalg.inv().T.dot().dot", "megadepth.MegaDepth_SIFT.dot", "datasets.skew", "numpy.dot", "numpy.linalg.inv().T.dot().dot", "megadepth.MegaDepth_SIFT.generate_query_kpts", "megadepth.MegaDepth_SIFT.generate_query_kpts", "datasets.random_choice", "torch.from_numpy().float", "datasets.random_choice", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "megadepth.MegaDepth_SIFT.transform", "megadepth.MegaDepth_SIFT.transform", "numpy.linalg.inv", "numpy.linalg.inv", "numpy.linalg.inv", "numpy.linalg.inv", "datasets.prune_kpts", "datasets.prune_kpts", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy().float", "torch.from_numpy().float", "numpy.arccos", "numpy.linalg.inv().T.dot", "numpy.arccos", "numpy.linalg.inv().T.dot", "len", "len", "numpy.sum", "numpy.sum", "len", "len", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "numpy.clip", "numpy.clip", "torch.from_numpy", "torch.from_numpy", "numpy.linalg.inv", "numpy.linalg.inv", "numpy.trace", "numpy.trace"], "methods", ["home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.datasets.megadepth.MegaDepth_Depth.get_intrinsics", "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.datasets.megadepth.MegaDepth_Depth.get_intrinsics", "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.datasets.megadepth.MegaDepth_Depth.get_extrinsics", "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.datasets.megadepth.MegaDepth_Depth.get_extrinsics", "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.datasets.data_utils.skew", "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.datasets.data_utils.skew", "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.datasets.megadepth.MegaDepth_Depth.generate_query_kpts", "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.datasets.megadepth.MegaDepth_Depth.generate_query_kpts", "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.datasets.data_utils.random_choice", "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.datasets.data_utils.random_choice", "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.datasets.data_utils.prune_kpts", "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.datasets.data_utils.prune_kpts"], ["", "def", "__getitem__", "(", "self", ",", "item", ")", ":", "\n", "        ", "imf1", "=", "self", ".", "imf1s", "[", "item", "]", "\n", "imf2", "=", "self", ".", "imf2s", "[", "item", "]", "\n", "im1_meta", "=", "self", ".", "images", "[", "imf1", "]", "\n", "im2_meta", "=", "self", ".", "images", "[", "imf2", "]", "\n", "im1", "=", "io", ".", "imread", "(", "imf1", ")", "\n", "im2", "=", "io", ".", "imread", "(", "imf2", ")", "\n", "h1", ",", "w1", "=", "im1", ".", "shape", "[", ":", "2", "]", "\n", "h2", ",", "w2", "=", "im2", ".", "shape", "[", ":", "2", "]", "\n", "\n", "intrinsic1", "=", "self", ".", "get_intrinsics", "(", "im1_meta", ")", "\n", "intrinsic2", "=", "self", ".", "get_intrinsics", "(", "im2_meta", ")", "\n", "\n", "extrinsic1", "=", "self", ".", "get_extrinsics", "(", "im1_meta", ")", "\n", "extrinsic2", "=", "self", ".", "get_extrinsics", "(", "im2_meta", ")", "\n", "\n", "relative", "=", "extrinsic2", ".", "dot", "(", "np", ".", "linalg", ".", "inv", "(", "extrinsic1", ")", ")", "\n", "R", "=", "relative", "[", ":", "3", ",", ":", "3", "]", "\n", "# remove pairs that have a relative rotation angle larger than 80 degrees", "\n", "theta", "=", "np", ".", "arccos", "(", "np", ".", "clip", "(", "(", "np", ".", "trace", "(", "R", ")", "-", "1", ")", "/", "2", ",", "-", "1", ",", "1", ")", ")", "*", "180", "/", "np", ".", "pi", "\n", "if", "theta", ">", "self", ".", "configs", "[", "'rot_thr'", "]", "and", "self", ".", "is_train", ":", "\n", "            ", "return", "None", "\n", "\n", "", "T", "=", "relative", "[", ":", "3", ",", "3", "]", "\n", "tx", "=", "data_utils", ".", "skew", "(", "T", ")", "\n", "E_gt", "=", "np", ".", "dot", "(", "tx", ",", "R", ")", "\n", "F_gt", "=", "np", ".", "linalg", ".", "inv", "(", "intrinsic2", ")", ".", "T", ".", "dot", "(", "E_gt", ")", ".", "dot", "(", "np", ".", "linalg", ".", "inv", "(", "intrinsic1", ")", ")", "\n", "\n", "relative2", "=", "extrinsic1", ".", "dot", "(", "np", ".", "linalg", ".", "inv", "(", "extrinsic2", ")", ")", "\n", "R2", "=", "relative2", "[", ":", "3", ",", ":", "3", "]", "\n", "# remove pairs that have a relative rotation angle larger than 80 degrees", "\n", "theta2", "=", "np", ".", "arccos", "(", "np", ".", "clip", "(", "(", "np", ".", "trace", "(", "R2", ")", "-", "1", ")", "/", "2", ",", "-", "1", ",", "1", ")", ")", "*", "180", "/", "np", ".", "pi", "\n", "if", "theta2", ">", "self", ".", "configs", "[", "'rot_thr'", "]", "and", "self", ".", "is_train", ":", "\n", "            ", "return", "None", "\n", "\n", "", "T2", "=", "relative2", "[", ":", "3", ",", "3", "]", "\n", "tx2", "=", "data_utils", ".", "skew", "(", "T2", ")", "\n", "E_gt2", "=", "np", ".", "dot", "(", "tx2", ",", "R2", ")", "\n", "F_gt2", "=", "np", ".", "linalg", ".", "inv", "(", "intrinsic1", ")", ".", "T", ".", "dot", "(", "E_gt2", ")", ".", "dot", "(", "np", ".", "linalg", ".", "inv", "(", "intrinsic2", ")", ")", "\n", "\n", "# generate candidate query points", "\n", "# coord1 = data_utils.generate_query_kpts(im1, self.args.train_kp, 10*self.args.num_pts, h, w)", "\n", "coord1", "=", "self", ".", "generate_query_kpts", "(", "im1", ",", "10", "*", "self", ".", "configs", "[", "'num_pts'", "]", ",", "h1", ",", "w1", ")", "\n", "coord2", "=", "self", ".", "generate_query_kpts", "(", "im2", ",", "10", "*", "self", ".", "configs", "[", "'num_pts'", "]", ",", "h2", ",", "w2", ")", "\n", "\n", "# if no keypoints are detected", "\n", "if", "len", "(", "coord1", ")", "==", "0", "or", "len", "(", "coord2", ")", "==", "0", ":", "\n", "            ", "return", "None", "\n", "\n", "# prune query keypoints that are not likely to have correspondence in the other image", "\n", "", "if", "self", ".", "configs", "[", "'prune_kp'", "]", ":", "\n", "            ", "ind_intersect", "=", "data_utils", ".", "prune_kpts", "(", "coord1", "[", ":", ",", ":", "2", "]", ",", "F_gt", ",", "im2", ".", "shape", "[", ":", "2", "]", ",", "intrinsic1", ",", "intrinsic2", ",", "\n", "relative", ",", "d_min", "=", "4", ",", "d_max", "=", "400", ")", "\n", "if", "np", ".", "sum", "(", "ind_intersect", ")", "==", "0", ":", "\n", "                ", "return", "None", "\n", "", "coord1", "=", "coord1", "[", "ind_intersect", "]", "\n", "\n", "ind_intersect2", "=", "data_utils", ".", "prune_kpts", "(", "coord2", "[", ":", ",", ":", "2", "]", ",", "F_gt2", ",", "im1", ".", "shape", "[", ":", "2", "]", ",", "intrinsic2", ",", "intrinsic1", ",", "\n", "relative2", ",", "d_min", "=", "4", ",", "d_max", "=", "400", ")", "\n", "if", "np", ".", "sum", "(", "ind_intersect2", ")", "==", "0", ":", "\n", "                ", "return", "None", "\n", "", "coord2", "=", "coord2", "[", "ind_intersect2", "]", "\n", "\n", "", "if", "len", "(", "coord1", ")", "<", "self", ".", "configs", "[", "'num_pts'", "]", "or", "len", "(", "coord2", ")", "<", "self", ".", "configs", "[", "'num_pts'", "]", ":", "\n", "            ", "return", "None", "\n", "\n", "", "coord1", "=", "data_utils", ".", "random_choice", "(", "coord1", ",", "self", ".", "configs", "[", "'num_pts'", "]", ")", "\n", "coord1", "=", "torch", ".", "from_numpy", "(", "coord1", ")", ".", "float", "(", ")", "\n", "coord2", "=", "data_utils", ".", "random_choice", "(", "coord2", ",", "self", ".", "configs", "[", "'num_pts'", "]", ")", "\n", "coord2", "=", "torch", ".", "from_numpy", "(", "coord2", ")", ".", "float", "(", ")", "\n", "\n", "im1_ori", ",", "im2_ori", "=", "torch", ".", "from_numpy", "(", "im1", ")", ",", "torch", ".", "from_numpy", "(", "im2", ")", "\n", "\n", "F_gt", "=", "torch", ".", "from_numpy", "(", "F_gt", ")", ".", "float", "(", ")", "/", "(", "F_gt", "[", "-", "1", ",", "-", "1", "]", "+", "1e-10", ")", "\n", "F_gt2", "=", "torch", ".", "from_numpy", "(", "F_gt2", ")", ".", "float", "(", ")", "/", "(", "F_gt2", "[", "-", "1", ",", "-", "1", "]", "+", "1e-10", ")", "\n", "intrinsic1", "=", "torch", ".", "from_numpy", "(", "intrinsic1", ")", ".", "float", "(", ")", "\n", "intrinsic2", "=", "torch", ".", "from_numpy", "(", "intrinsic2", ")", ".", "float", "(", ")", "\n", "pose", "=", "torch", ".", "from_numpy", "(", "relative", "[", ":", "3", ",", ":", "]", ")", ".", "float", "(", ")", "\n", "pose2", "=", "torch", ".", "from_numpy", "(", "relative2", "[", ":", "3", ",", ":", "]", ")", ".", "float", "(", ")", "\n", "im1_tensor", "=", "self", ".", "transform", "(", "im1", ")", "\n", "im2_tensor", "=", "self", ".", "transform", "(", "im2", ")", "\n", "\n", "no_cuda", "=", "(", "'name1'", ",", "'name2'", ")", "\n", "\n", "out", "=", "{", "'im1'", ":", "im1_tensor", ",", "\n", "'im2'", ":", "im2_tensor", ",", "\n", "'im1_ori'", ":", "im1_ori", ",", "\n", "'im2_ori'", ":", "im2_ori", ",", "\n", "'pose1'", ":", "pose", ",", "\n", "'pose2'", ":", "pose2", ",", "\n", "'F1'", ":", "F_gt", ",", "\n", "'F2'", ":", "F_gt2", ",", "\n", "'intrinsic1'", ":", "intrinsic1", ",", "\n", "'intrinsic2'", ":", "intrinsic2", ",", "\n", "'coord1'", ":", "coord1", ",", "\n", "'coord2'", ":", "coord2", ",", "\n", "'name1'", ":", "im1_meta", ".", "name", ",", "\n", "'name2'", ":", "im2_meta", ".", "name", "}", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.datasets.megadepth.MegaDepth_SIFT.__len__": [[493, 495], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "imf1s", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.datasets.megadepth.MegaDepth_Depth.__init__": [[498, 525], ["torch.utils.data.Dataset.__init__", "path.Path", "megadepth.MegaDepth_Depth.read_img_cam", "megadepth.MegaDepth_Depth.read_pairs", "print", "numpy.arange", "rand.shuffle", "list", "list", "torchvision.Compose", "torchvision.Compose", "len", "len", "numpy.array", "numpy.array", "torchvision.ToPILImage", "torchvision.ColorJitter", "torchvision.ToTensor", "torchvision.Normalize", "torchvision.ToTensor", "torchvision.Normalize"], "methods", ["home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.losses.preprocess.Preprocess_Skip.__init__", "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.datasets.megadepth.MegaDepth_Depth.read_img_cam", "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.datasets.megadepth.MegaDepth_Depth.read_pairs"], ["    ", "def", "__init__", "(", "self", ",", "configs", ",", "is_train", "=", "True", ")", ":", "\n", "        ", "super", "(", "MegaDepth_Depth", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "is_train", ":", "\n", "            ", "self", ".", "transform", "=", "transforms", ".", "Compose", "(", "[", "transforms", ".", "ToPILImage", "(", ")", ",", "\n", "transforms", ".", "ColorJitter", "\n", "(", "brightness", "=", "1", ",", "contrast", "=", "1", ",", "saturation", "=", "1", ",", "hue", "=", "0.4", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "mean", "=", "(", "0.485", ",", "0.456", ",", "0.406", ")", ",", "\n", "std", "=", "(", "0.229", ",", "0.224", ",", "0.225", ")", ")", ",", "\n", "]", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "transform", "=", "transforms", ".", "Compose", "(", "[", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "mean", "=", "(", "0.485", ",", "0.456", ",", "0.406", ")", ",", "\n", "std", "=", "(", "0.229", ",", "0.224", ",", "0.225", ")", ")", ",", "\n", "]", ")", "\n", "\n", "", "self", ".", "is_train", "=", "is_train", "\n", "self", ".", "configs", "=", "configs", "\n", "self", ".", "root", "=", "Path", "(", "self", ".", "configs", "[", "'data_path'", "]", ")", "\n", "self", ".", "images", "=", "self", ".", "read_img_cam", "(", ")", "\n", "self", ".", "imf1s", ",", "self", ".", "imf2s", "=", "self", ".", "read_pairs", "(", ")", "\n", "print", "(", "'total number of image pairs loaded: {}'", ".", "format", "(", "len", "(", "self", ".", "imf1s", ")", ")", ")", "\n", "# shuffle data", "\n", "index", "=", "np", ".", "arange", "(", "len", "(", "self", ".", "imf1s", ")", ")", "\n", "rand", ".", "shuffle", "(", "index", ")", "\n", "self", ".", "imf1s", "=", "list", "(", "np", ".", "array", "(", "self", ".", "imf1s", ")", "[", "index", "]", ")", "\n", "self", ".", "imf2s", "=", "list", "(", "np", ".", "array", "(", "self", ".", "imf2s", ")", "[", "index", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.datasets.megadepth.MegaDepth_Depth.read_img_cam": [[526, 558], ["collections.namedtuple", "megadepth.MegaDepth_Depth.root.listdir", "scene_id.isdir", "scene_id.listdir", "open", "f.isdir", "fid.readline", "line.strip.strip.strip", "line.strip.strip.split", "numpy.array", "numpy.array", "collections.namedtuple.", "len", "image_name.replace", "int", "int", "float", "float", "float", "float"], "methods", ["None"], ["", "def", "read_img_cam", "(", "self", ")", ":", "\n", "        ", "images", "=", "{", "}", "\n", "Image", "=", "collections", ".", "namedtuple", "(", "\n", "\"Image\"", ",", "[", "\"name\"", ",", "\"w\"", ",", "\"h\"", ",", "\"fx\"", ",", "\"fy\"", ",", "\"cx\"", ",", "\"cy\"", ",", "\"rvec\"", ",", "\"tvec\"", ",", "\"depth\"", "]", ")", "\n", "for", "scene_id", "in", "self", ".", "root", ".", "listdir", "(", ")", ":", "\n", "            ", "if", "not", "scene_id", ".", "isdir", "(", ")", ":", "\n", "                ", "continue", "\n", "", "densefs", "=", "[", "f", ".", "name", "for", "f", "in", "scene_id", ".", "listdir", "(", ")", "\n", "if", "'dense'", "in", "f", ".", "name", "and", "f", ".", "isdir", "(", ")", "]", "\n", "for", "densef", "in", "densefs", ":", "\n", "                ", "folder", "=", "scene_id", "/", "'{}/aligned'", ".", "format", "(", "densef", ")", "#os.path.join(self.root, scene_id, densef, 'aligned')", "\n", "img_cam_txt_path", "=", "folder", "/", "'img_cam.txt'", "#os.path.join(folder, 'img_cam.txt')", "\n", "with", "open", "(", "img_cam_txt_path", ",", "\"r\"", ")", "as", "fid", ":", "\n", "                    ", "while", "True", ":", "\n", "                        ", "line", "=", "fid", ".", "readline", "(", ")", "\n", "if", "not", "line", ":", "\n", "                            ", "break", "\n", "", "line", "=", "line", ".", "strip", "(", ")", "\n", "if", "len", "(", "line", ")", ">", "0", "and", "line", "[", "0", "]", "!=", "\"#\"", ":", "\n", "                            ", "elems", "=", "line", ".", "split", "(", ")", "\n", "image_name", "=", "elems", "[", "0", "]", "\n", "img_path", "=", "folder", "/", "'images/'", "+", "image_name", "#os.path.join(folder, 'images', image_name)", "\n", "depth", "=", "folder", "/", "'depths/'", "+", "image_name", ".", "replace", "(", "'.jpg'", ",", "'.h5'", ")", "\n", "w", ",", "h", "=", "int", "(", "elems", "[", "1", "]", ")", ",", "int", "(", "elems", "[", "2", "]", ")", "\n", "fx", ",", "fy", "=", "float", "(", "elems", "[", "3", "]", ")", ",", "float", "(", "elems", "[", "4", "]", ")", "\n", "cx", ",", "cy", "=", "float", "(", "elems", "[", "5", "]", ")", ",", "float", "(", "elems", "[", "6", "]", ")", "\n", "R", "=", "np", ".", "array", "(", "elems", "[", "7", ":", "16", "]", ")", "\n", "T", "=", "np", ".", "array", "(", "elems", "[", "16", ":", "19", "]", ")", "\n", "images", "[", "img_path", "]", "=", "Image", "(", "\n", "name", "=", "image_name", ",", "w", "=", "w", ",", "h", "=", "h", ",", "fx", "=", "fx", ",", "fy", "=", "fy", ",", "cx", "=", "cx", ",", "cy", "=", "cy", ",", "rvec", "=", "R", ",", "tvec", "=", "T", ",", "depth", "=", "depth_path", "\n", ")", "\n", "", "", "", "", "", "return", "images", "\n", "\n"]], "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.datasets.megadepth.MegaDepth_Depth.read_pairs": [[559, 593], ["print", "tqdm.tqdm.tqdm", "megadepth.MegaDepth_Depth.root.listdir", "scene_id.isdir", "os.path.exists", "imf1s.extend", "imf2s.extend", "scene_id.listdir", "open", "len", "numpy.arange", "rand.shuffle", "list", "list", "open.isdir", "line.strip().split", "list.append", "list.append", "len", "numpy.array", "numpy.array", "line.strip"], "methods", ["None"], ["", "def", "read_pairs", "(", "self", ")", ":", "\n", "        ", "imf1s", ",", "imf2s", "=", "[", "]", ",", "[", "]", "\n", "print", "(", "'reading image pairs from {}...'", ".", "format", "(", "self", ".", "root", ")", ")", "\n", "for", "scene_id", "in", "tqdm", "(", "self", ".", "root", ".", "listdir", "(", ")", ",", "desc", "=", "'# loading data from scene folders'", ")", ":", "\n", "            ", "if", "not", "scene_id", ".", "isdir", "(", ")", ":", "\n", "                ", "continue", "\n", "", "densefs", "=", "[", "f", ".", "name", "for", "f", "in", "scene_id", ".", "listdir", "(", ")", "\n", "if", "'dense'", "in", "f", ".", "name", "and", "f", ".", "isdir", "(", ")", "]", "\n", "for", "densef", "in", "densefs", ":", "\n", "                ", "imf1s_", "=", "[", "]", "\n", "imf2s_", "=", "[", "]", "\n", "folder", "=", "scene_id", "/", "'{}/aligned'", ".", "format", "(", "densef", ")", "\n", "pairf", "=", "folder", "/", "'pairs.txt'", "#os.path.join(folder, 'pairs.txt')", "\n", "\n", "if", "os", ".", "path", ".", "exists", "(", "pairf", ")", ":", "\n", "                    ", "f", "=", "open", "(", "pairf", ",", "'r'", ")", "\n", "for", "line", "in", "f", ":", "\n", "                        ", "imf1", ",", "imf2", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "' '", ")", "\n", "imf1s_", ".", "append", "(", "folder", "/", "'images/'", "+", "imf1", ")", "\n", "imf2s_", ".", "append", "(", "folder", "/", "'images/'", "+", "imf2", ")", "\n", "# imf1s_.append(os.path.join(folder, 'images', imf1))", "\n", "# imf2s_.append(os.path.join(folder, 'images', imf2))", "\n", "\n", "# make # image pairs per scene more balanced", "\n", "", "", "if", "len", "(", "imf1s_", ")", ">", "5000", ":", "\n", "                    ", "index", "=", "np", ".", "arange", "(", "len", "(", "imf1s_", ")", ")", "\n", "rand", ".", "shuffle", "(", "index", ")", "\n", "imf1s_", "=", "list", "(", "np", ".", "array", "(", "imf1s_", ")", "[", "index", "[", ":", "5000", "]", "]", ")", "\n", "imf2s_", "=", "list", "(", "np", ".", "array", "(", "imf2s_", ")", "[", "index", "[", ":", "5000", "]", "]", ")", "\n", "\n", "", "imf1s", ".", "extend", "(", "imf1s_", ")", "\n", "imf2s", ".", "extend", "(", "imf2s_", ")", "\n", "\n", "", "", "return", "imf1s", ",", "imf2s", "\n", "\n"]], "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.datasets.megadepth.MegaDepth_Depth.get_intrinsics": [[594, 599], ["numpy.array"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "get_intrinsics", "(", "im_meta", ")", ":", "\n", "        ", "return", "np", ".", "array", "(", "[", "[", "im_meta", ".", "fx", ",", "0", ",", "im_meta", ".", "cx", "]", ",", "\n", "[", "0", ",", "im_meta", ".", "fy", ",", "im_meta", ".", "cy", "]", ",", "\n", "[", "0", ",", "0", ",", "1", "]", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.datasets.megadepth.MegaDepth_Depth.generate_query_kpts": [[601, 641], ["numpy.random.rand", "numpy.random.rand", "numpy.stack", "cv2.cvtColor", "cv2.SIFT_create", "cv2.SIFT_create.detect", "numpy.array", "cv2.SIFT_create", "cv2.cvtColor", "cv2.SIFT_create.detect", "numpy.array", "Exception", "numpy.zeros", "numpy.random.rand", "numpy.random.rand", "numpy.stack", "len", "numpy.concatenate", "int", "int", "int", "numpy.zeros"], "methods", ["None"], ["", "def", "generate_query_kpts", "(", "self", ",", "img", ",", "num_pts", ",", "h", ",", "w", ",", "mode", "=", "'mixed'", ")", ":", "\n", "        ", "\"\"\"\n        Although we define this function, the key points here are not used. Actually, the keypoints used during training\n        are generated in the preprocess step.\n        \u6211\u4eec\u53c2\u7167caps\u7684\u4ee3\u7801\u5b9a\u4e49\u4e86\u8fd9\u4e2a\u51fd\u6570\uff0c\u4ee5\u65b9\u4fbf\u8fdb\u884cablation\uff0c\u4f46\u6211\u4eec\u7684\u65b9\u6cd5\u5e76\u4e0d\u4f1a\u7528\u5230\u8fd9\u91cc\u7684\u5173\u952e\u70b9\uff0c\u8bad\u7ec3\u4e2d\u7684\u5173\u952e\u70b9\u662f\u5728\n        preprocess\u6b65\u9aa4\u4e2d\u751f\u6210\u7684\n        \"\"\"", "\n", "# generate candidate query points", "\n", "if", "mode", "==", "'random'", ":", "\n", "            ", "kp1_x", "=", "np", ".", "random", ".", "rand", "(", "num_pts", ")", "*", "(", "w", "-", "1", ")", "\n", "kp1_y", "=", "np", ".", "random", ".", "rand", "(", "num_pts", ")", "*", "(", "h", "-", "1", ")", "\n", "coord", "=", "np", ".", "stack", "(", "(", "kp1_x", ",", "kp1_y", ",", "np", ".", "zeros", "(", "kp1_x", ".", "shape", ")", ")", ")", ".", "T", "\n", "\n", "", "elif", "mode", "==", "'sift'", ":", "\n", "            ", "gray1", "=", "cv2", ".", "cvtColor", "(", "img", ",", "cv2", ".", "COLOR_RGB2GRAY", ")", "\n", "# sift = cv2.xfeatures2d.SIFT_create(nfeatures=num_pts)", "\n", "sift", "=", "cv2", ".", "SIFT_create", "(", "nfeatures", "=", "num_pts", ")", "\n", "kp1", "=", "sift", ".", "detect", "(", "gray1", ")", "\n", "coord", "=", "np", ".", "array", "(", "[", "[", "kp", ".", "pt", "[", "0", "]", ",", "kp", ".", "pt", "[", "1", "]", ",", "1", "]", "for", "kp", "in", "kp1", "]", ")", "\n", "\n", "", "elif", "mode", "==", "'mixed'", ":", "\n", "            ", "kp1_x", "=", "np", ".", "random", ".", "rand", "(", "1", "*", "int", "(", "self", ".", "configs", "[", "'random_percent'", "]", "*", "num_pts", ")", ")", "*", "(", "w", "-", "1", ")", "\n", "kp1_y", "=", "np", ".", "random", ".", "rand", "(", "1", "*", "int", "(", "self", ".", "configs", "[", "'random_percent'", "]", "*", "num_pts", ")", ")", "*", "(", "h", "-", "1", ")", "\n", "kp1_rand", "=", "np", ".", "stack", "(", "(", "kp1_x", ",", "kp1_y", ",", "np", ".", "zeros", "(", "kp1_x", ".", "shape", ")", ")", ")", ".", "T", "\n", "\n", "# sift = cv2.xfeatures2d.SIFT_create(nfeatures=int(0.5 * num_pts))", "\n", "sift", "=", "cv2", ".", "SIFT_create", "(", "nfeatures", "=", "int", "(", "(", "1", "-", "self", ".", "configs", "[", "'random_percent'", "]", ")", "*", "num_pts", ")", ")", "\n", "# sift = cv2.SIFT_create()", "\n", "gray1", "=", "cv2", ".", "cvtColor", "(", "img", ",", "cv2", ".", "COLOR_RGB2GRAY", ")", "\n", "kp1_sift", "=", "sift", ".", "detect", "(", "gray1", ")", "\n", "kp1_sift", "=", "np", ".", "array", "(", "[", "[", "kp", ".", "pt", "[", "0", "]", ",", "kp", ".", "pt", "[", "1", "]", ",", "1", "]", "for", "kp", "in", "kp1_sift", "]", ")", "\n", "if", "len", "(", "kp1_sift", ")", "==", "0", ":", "\n", "                ", "coord", "=", "kp1_rand", "\n", "", "else", ":", "\n", "                ", "coord", "=", "np", ".", "concatenate", "(", "(", "kp1_rand", ",", "kp1_sift", ")", ",", "0", ")", "\n", "\n", "", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "'unknown type of keypoints'", ")", "\n", "\n", "", "return", "coord", "\n", "\n"]], "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.datasets.megadepth.MegaDepth_Depth.get_extrinsics": [[642, 650], ["im_meta.rvec.reshape", "numpy.eye"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "get_extrinsics", "(", "im_meta", ")", ":", "\n", "        ", "R", "=", "im_meta", ".", "rvec", ".", "reshape", "(", "3", ",", "3", ")", "\n", "t", "=", "im_meta", ".", "tvec", "\n", "extrinsic", "=", "np", ".", "eye", "(", "4", ")", "\n", "extrinsic", "[", ":", "3", ",", ":", "3", "]", "=", "R", "\n", "extrinsic", "[", ":", "3", ",", "3", "]", "=", "t", "\n", "return", "extrinsic", "\n", "\n"]], "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.datasets.megadepth.MegaDepth_Depth.get_data_aug": [[651, 658], ["skimage.imread", "torch.rand"], "methods", ["None"], ["", "def", "get_data_aug", "(", "self", ",", "item", ")", ":", "\n", "        ", "if", "torch", ".", "rand", "(", "1", ")", "<", "0.5", ":", "\n", "            ", "imf1", "=", "self", ".", "imf1s", "[", "item", "]", "\n", "", "else", ":", "\n", "            ", "imf1", "=", "self", ".", "imf2s", "[", "item", "]", "\n", "", "im1_meta", "=", "self", ".", "images", "[", "imf1", "]", "\n", "im1", "=", "io", ".", "imread", "(", "imf1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.datasets.megadepth.MegaDepth_Depth.__getitem__": [[659, 764], ["skimage.imread", "skimage.imread", "megadepth.MegaDepth_Depth.get_intrinsics", "megadepth.MegaDepth_Depth.get_intrinsics", "megadepth.MegaDepth_Depth.get_extrinsics", "megadepth.MegaDepth_Depth.get_extrinsics", "megadepth.MegaDepth_Depth.dot", "datasets.skew", "numpy.dot", "numpy.linalg.inv().T.dot().dot", "megadepth.MegaDepth_Depth.dot", "datasets.skew", "numpy.dot", "numpy.linalg.inv().T.dot().dot", "megadepth.MegaDepth_Depth.generate_query_kpts", "megadepth.MegaDepth_Depth.generate_query_kpts", "datasets.random_choice", "torch.from_numpy().float", "datasets.random_choice", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "megadepth.MegaDepth_Depth.transform", "megadepth.MegaDepth_Depth.transform", "cv2.resize", "torch.from_numpy().float", "numpy.linalg.inv", "numpy.linalg.inv", "numpy.linalg.inv", "numpy.linalg.inv", "datasets.prune_kpts", "datasets.prune_kpts", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy().float", "torch.from_numpy().float", "numpy.arccos", "numpy.linalg.inv().T.dot", "numpy.arccos", "numpy.linalg.inv().T.dot", "len", "len", "numpy.sum", "numpy.sum", "len", "len", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "h5py.File", "torch.from_numpy", "numpy.clip", "numpy.clip", "torch.from_numpy", "torch.from_numpy", "numpy.linalg.inv", "numpy.linalg.inv", "numpy.trace", "numpy.trace"], "methods", ["home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.datasets.megadepth.MegaDepth_Depth.get_intrinsics", "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.datasets.megadepth.MegaDepth_Depth.get_intrinsics", "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.datasets.megadepth.MegaDepth_Depth.get_extrinsics", "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.datasets.megadepth.MegaDepth_Depth.get_extrinsics", "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.datasets.data_utils.skew", "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.datasets.data_utils.skew", "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.datasets.megadepth.MegaDepth_Depth.generate_query_kpts", "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.datasets.megadepth.MegaDepth_Depth.generate_query_kpts", "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.datasets.data_utils.random_choice", "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.datasets.data_utils.random_choice", "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.datasets.data_utils.prune_kpts", "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.datasets.data_utils.prune_kpts"], ["", "def", "__getitem__", "(", "self", ",", "item", ")", ":", "\n", "        ", "imf1", "=", "self", ".", "imf1s", "[", "item", "]", "\n", "imf2", "=", "self", ".", "imf2s", "[", "item", "]", "\n", "im1_meta", "=", "self", ".", "images", "[", "imf1", "]", "\n", "im2_meta", "=", "self", ".", "images", "[", "imf2", "]", "\n", "im1", "=", "io", ".", "imread", "(", "imf1", ")", "\n", "im2", "=", "io", ".", "imread", "(", "imf2", ")", "\n", "h1", ",", "w1", "=", "im1", ".", "shape", "[", ":", "2", "]", "\n", "h2", ",", "w2", "=", "im2", ".", "shape", "[", ":", "2", "]", "\n", "\n", "intrinsic1", "=", "self", ".", "get_intrinsics", "(", "im1_meta", ")", "\n", "intrinsic2", "=", "self", ".", "get_intrinsics", "(", "im2_meta", ")", "\n", "\n", "extrinsic1", "=", "self", ".", "get_extrinsics", "(", "im1_meta", ")", "\n", "extrinsic2", "=", "self", ".", "get_extrinsics", "(", "im2_meta", ")", "\n", "\n", "relative", "=", "extrinsic2", ".", "dot", "(", "np", ".", "linalg", ".", "inv", "(", "extrinsic1", ")", ")", "\n", "R", "=", "relative", "[", ":", "3", ",", ":", "3", "]", "\n", "# remove pairs that have a relative rotation angle larger than 80 degrees", "\n", "theta", "=", "np", ".", "arccos", "(", "np", ".", "clip", "(", "(", "np", ".", "trace", "(", "R", ")", "-", "1", ")", "/", "2", ",", "-", "1", ",", "1", ")", ")", "*", "180", "/", "np", ".", "pi", "\n", "if", "theta", ">", "self", ".", "configs", "[", "'rot_thr'", "]", "and", "self", ".", "is_train", ":", "\n", "            ", "return", "None", "\n", "\n", "", "T", "=", "relative", "[", ":", "3", ",", "3", "]", "\n", "tx", "=", "data_utils", ".", "skew", "(", "T", ")", "\n", "E_gt", "=", "np", ".", "dot", "(", "tx", ",", "R", ")", "\n", "F_gt", "=", "np", ".", "linalg", ".", "inv", "(", "intrinsic2", ")", ".", "T", ".", "dot", "(", "E_gt", ")", ".", "dot", "(", "np", ".", "linalg", ".", "inv", "(", "intrinsic1", ")", ")", "\n", "\n", "relative2", "=", "extrinsic1", ".", "dot", "(", "np", ".", "linalg", ".", "inv", "(", "extrinsic2", ")", ")", "\n", "R2", "=", "relative2", "[", ":", "3", ",", ":", "3", "]", "\n", "# remove pairs that have a relative rotation angle larger than 80 degrees", "\n", "theta2", "=", "np", ".", "arccos", "(", "np", ".", "clip", "(", "(", "np", ".", "trace", "(", "R2", ")", "-", "1", ")", "/", "2", ",", "-", "1", ",", "1", ")", ")", "*", "180", "/", "np", ".", "pi", "\n", "if", "theta2", ">", "self", ".", "configs", "[", "'rot_thr'", "]", "and", "self", ".", "is_train", ":", "\n", "            ", "return", "None", "\n", "\n", "", "T2", "=", "relative2", "[", ":", "3", ",", "3", "]", "\n", "tx2", "=", "data_utils", ".", "skew", "(", "T2", ")", "\n", "E_gt2", "=", "np", ".", "dot", "(", "tx2", ",", "R2", ")", "\n", "F_gt2", "=", "np", ".", "linalg", ".", "inv", "(", "intrinsic1", ")", ".", "T", ".", "dot", "(", "E_gt2", ")", ".", "dot", "(", "np", ".", "linalg", ".", "inv", "(", "intrinsic2", ")", ")", "\n", "\n", "# generate candidate query points", "\n", "# coord1 = data_utils.generate_query_kpts(im1, self.args.train_kp, 10*self.args.num_pts, h, w)", "\n", "coord1", "=", "self", ".", "generate_query_kpts", "(", "im1", ",", "10", "*", "self", ".", "configs", "[", "'num_pts'", "]", ",", "h1", ",", "w1", ")", "\n", "coord2", "=", "self", ".", "generate_query_kpts", "(", "im2", ",", "10", "*", "self", ".", "configs", "[", "'num_pts'", "]", ",", "h2", ",", "w2", ")", "\n", "\n", "# if no keypoints are detected", "\n", "if", "len", "(", "coord1", ")", "==", "0", "or", "len", "(", "coord2", ")", "==", "0", ":", "\n", "            ", "return", "None", "\n", "\n", "# prune query keypoints that are not likely to have correspondence in the other image", "\n", "", "if", "self", ".", "configs", "[", "'prune_kp'", "]", ":", "\n", "            ", "ind_intersect", "=", "data_utils", ".", "prune_kpts", "(", "coord1", "[", ":", ",", ":", "2", "]", ",", "F_gt", ",", "im2", ".", "shape", "[", ":", "2", "]", ",", "intrinsic1", ",", "intrinsic2", ",", "\n", "relative", ",", "d_min", "=", "4", ",", "d_max", "=", "400", ")", "\n", "if", "np", ".", "sum", "(", "ind_intersect", ")", "==", "0", ":", "\n", "                ", "return", "None", "\n", "", "coord1", "=", "coord1", "[", "ind_intersect", "]", "\n", "\n", "ind_intersect2", "=", "data_utils", ".", "prune_kpts", "(", "coord2", "[", ":", ",", ":", "2", "]", ",", "F_gt2", ",", "im1", ".", "shape", "[", ":", "2", "]", ",", "intrinsic2", ",", "intrinsic1", ",", "\n", "relative2", ",", "d_min", "=", "4", ",", "d_max", "=", "400", ")", "\n", "if", "np", ".", "sum", "(", "ind_intersect2", ")", "==", "0", ":", "\n", "                ", "return", "None", "\n", "", "coord2", "=", "coord2", "[", "ind_intersect2", "]", "\n", "\n", "", "if", "len", "(", "coord1", ")", "<", "self", ".", "configs", "[", "'num_pts'", "]", "or", "len", "(", "coord2", ")", "<", "self", ".", "configs", "[", "'num_pts'", "]", ":", "\n", "            ", "return", "None", "\n", "\n", "", "coord1", "=", "data_utils", ".", "random_choice", "(", "coord1", ",", "self", ".", "configs", "[", "'num_pts'", "]", ")", "\n", "coord1", "=", "torch", ".", "from_numpy", "(", "coord1", ")", ".", "float", "(", ")", "\n", "coord2", "=", "data_utils", ".", "random_choice", "(", "coord2", ",", "self", ".", "configs", "[", "'num_pts'", "]", ")", "\n", "coord2", "=", "torch", ".", "from_numpy", "(", "coord2", ")", ".", "float", "(", ")", "\n", "\n", "im1_ori", ",", "im2_ori", "=", "torch", ".", "from_numpy", "(", "im1", ")", ",", "torch", ".", "from_numpy", "(", "im2", ")", "\n", "\n", "F_gt", "=", "torch", ".", "from_numpy", "(", "F_gt", ")", ".", "float", "(", ")", "/", "(", "F_gt", "[", "-", "1", ",", "-", "1", "]", "+", "1e-10", ")", "\n", "F_gt2", "=", "torch", ".", "from_numpy", "(", "F_gt2", ")", ".", "float", "(", ")", "/", "(", "F_gt2", "[", "-", "1", ",", "-", "1", "]", "+", "1e-10", ")", "\n", "intrinsic1", "=", "torch", ".", "from_numpy", "(", "intrinsic1", ")", ".", "float", "(", ")", "\n", "intrinsic2", "=", "torch", ".", "from_numpy", "(", "intrinsic2", ")", ".", "float", "(", ")", "\n", "pose", "=", "torch", ".", "from_numpy", "(", "relative", "[", ":", "3", ",", ":", "]", ")", ".", "float", "(", ")", "\n", "pose2", "=", "torch", ".", "from_numpy", "(", "relative2", "[", ":", "3", ",", ":", "]", ")", ".", "float", "(", ")", "\n", "im1_tensor", "=", "self", ".", "transform", "(", "im1", ")", "\n", "im2_tensor", "=", "self", ".", "transform", "(", "im2", ")", "\n", "\n", "no_cuda", "=", "(", "'name1'", ",", "'name2'", ")", "\n", "\n", "depth", "=", "h5py", ".", "File", "(", "im1_meta", ".", "depth", ",", "'r'", ")", "[", "'depth'", "]", "[", ":", "]", "\n", "depth", "=", "cv2", ".", "resize", "(", "depth", ",", "(", "640", ",", "480", ")", ")", "\n", "depth", "=", "torch", ".", "from_numpy", "(", "depth", ")", ".", "float", "(", ")", "\n", "\n", "out", "=", "{", "'im1'", ":", "im1_tensor", ",", "\n", "'im2'", ":", "im2_tensor", ",", "\n", "'im1_ori'", ":", "im1_ori", ",", "\n", "'im2_ori'", ":", "im2_ori", ",", "\n", "'pose1'", ":", "pose", ",", "\n", "'pose2'", ":", "pose2", ",", "\n", "'F1'", ":", "F_gt", ",", "\n", "'F2'", ":", "F_gt2", ",", "\n", "'intrinsic1'", ":", "intrinsic1", ",", "\n", "'intrinsic2'", ":", "intrinsic2", ",", "\n", "'coord1'", ":", "coord1", ",", "\n", "'coord2'", ":", "coord2", ",", "\n", "'name1'", ":", "im1_meta", ".", "name", ",", "\n", "'name2'", ":", "im2_meta", ".", "name", ",", "\n", "'depth'", ":", "depth", "}", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.datasets.megadepth.MegaDepth_Depth.__len__": [[765, 767], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "imf1s", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.networks.DeteNet.KeypointDet.__init__": [[9, 23], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.PReLU", "torch.PReLU", "torch.PReLU", "getattr", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "getattr"], "methods", ["home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.losses.preprocess.Preprocess_Skip.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", "=", "1", ",", "prior", "=", "'SSIM'", ",", "act", "=", "'Sigmoid'", ")", ":", "\n", "        ", "super", "(", "KeypointDet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "in_channels", ",", "3", ",", "1", ",", "1", ")", "\n", "self", ".", "norm1", "=", "nn", ".", "InstanceNorm2d", "(", "in_channels", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "in_channels", "+", "64", ",", "128", ",", "3", ",", "1", ",", "1", ")", "\n", "self", ".", "norm2", "=", "nn", ".", "InstanceNorm2d", "(", "128", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "128", ",", "out_channels", ",", "1", ",", "1", ",", "0", ")", "\n", "self", ".", "norm3", "=", "nn", ".", "InstanceNorm2d", "(", "out_channels", ")", "\n", "self", ".", "relu", "=", "nn", ".", "PReLU", "(", ")", "\n", "self", ".", "prior", "=", "getattr", "(", "self", ",", "prior", ")", "\n", "self", ".", "act", "=", "getattr", "(", "nn", ",", "act", ")", "(", ")", "\n", "\n", "self", ".", "convimg", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "3", ",", "1", ",", "1", ")", "\n", "self", ".", "normimg", "=", "nn", ".", "InstanceNorm2d", "(", "64", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.networks.DeteNet.KeypointDet.SSIM": [[24, 46], ["torch.pad", "torch.pad", "torch.pad", "torch.pad", "torch.pad", "torch.pad", "torch.pad", "torch.pad", "torch.pad", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "x.abs", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d"], "methods", ["None"], ["", "def", "SSIM", "(", "self", ",", "x", ")", ":", "\n", "        ", "C1", "=", "0.01", "**", "2", "\n", "C2", "=", "0.03", "**", "2", "\n", "\n", "x_pad", "=", "F", ".", "pad", "(", "x", ".", "abs", "(", ")", ",", "(", "0", ",", "1", ",", "0", ",", "1", ")", ",", "'reflect'", ")", "\n", "x_lu", "=", "x_pad", "[", ":", ",", ":", ",", ":", "-", "1", ",", ":", "-", "1", "]", "\n", "x_rb", "=", "x_pad", "[", ":", ",", ":", ",", "1", ":", ",", "1", ":", "]", "\n", "\n", "x_lu", "=", "F", ".", "pad", "(", "x_lu", ",", "(", "1", ",", "1", ",", "1", ",", "1", ")", ",", "'reflect'", ")", "\n", "x_rb", "=", "F", ".", "pad", "(", "x_rb", ",", "(", "1", ",", "1", ",", "1", ",", "1", ")", ",", "'reflect'", ")", "\n", "\n", "m_x_lu", "=", "F", ".", "avg_pool2d", "(", "x_lu", ",", "3", ",", "1", ")", "\n", "m_x_rb", "=", "F", ".", "avg_pool2d", "(", "x_rb", ",", "3", ",", "1", ")", "\n", "\n", "sigma_x_lu", "=", "F", ".", "avg_pool2d", "(", "x_lu", "**", "2", ",", "3", ",", "1", ")", "-", "m_x_lu", "**", "2", "\n", "sigma_x_rb", "=", "F", ".", "avg_pool2d", "(", "x_rb", "**", "2", ",", "3", ",", "1", ")", "-", "m_x_rb", "**", "2", "\n", "sigma_x_lu_rb", "=", "F", ".", "avg_pool2d", "(", "x_lu", "*", "x_rb", ",", "3", ",", "1", ")", "-", "m_x_lu", "*", "m_x_rb", "\n", "\n", "SSIM_n", "=", "(", "2", "*", "m_x_lu", "*", "m_x_rb", "+", "C1", ")", "*", "(", "2", "*", "sigma_x_lu_rb", "+", "C2", ")", "\n", "SSIM_d", "=", "(", "m_x_lu", "**", "2", "+", "m_x_rb", "**", "2", "+", "C1", ")", "*", "(", "sigma_x_lu", "+", "sigma_x_rb", "+", "C2", ")", "\n", "\n", "return", "torch", ".", "clamp", "(", "(", "1", "-", "SSIM_n", "/", "SSIM_d", ")", "/", "2", ",", "0", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.networks.DeteNet.KeypointDet.D2": [[47, 74], ["torch.relu", "torch.relu", "torch.relu", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "score.unsqueeze", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "depth_wise_max.unsqueeze", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.relu.view", "max_per_sample.view", "torch.pad", "torch.pad", "torch.pad"], "methods", ["None"], ["", "def", "D2", "(", "self", ",", "x", ")", ":", "\n", "        ", "b", ",", "c", ",", "h", ",", "w", "=", "x", ".", "shape", "\n", "window_size", "=", "3", "\n", "padding_size", "=", "window_size", "//", "2", "\n", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "max_per_sample", "=", "torch", ".", "max", "(", "x", ".", "view", "(", "b", ",", "-", "1", ")", ",", "dim", "=", "1", ")", "[", "0", "]", "\n", "exp", "=", "torch", ".", "exp", "(", "x", "/", "max_per_sample", ".", "view", "(", "b", ",", "1", ",", "1", ",", "1", ")", ")", "\n", "sum_exp", "=", "(", "\n", "window_size", "**", "2", "*", "\n", "F", ".", "avg_pool2d", "(", "\n", "F", ".", "pad", "(", "exp", ",", "[", "padding_size", "]", "*", "4", ",", "mode", "=", "'constant'", ",", "value", "=", "1.", ")", ",", "\n", "window_size", ",", "stride", "=", "1", "\n", ")", "\n", ")", "\n", "\n", "local_max_score", "=", "exp", "/", "sum_exp", "\n", "\n", "depth_wise_max", "=", "torch", ".", "max", "(", "x", ",", "dim", "=", "1", ")", "[", "0", "]", "\n", "depth_wise_max_score", "=", "x", "/", "depth_wise_max", ".", "unsqueeze", "(", "1", ")", "\n", "\n", "all_scores", "=", "local_max_score", "*", "depth_wise_max_score", "\n", "score", "=", "torch", ".", "max", "(", "all_scores", ",", "dim", "=", "1", ")", "[", "0", "]", "\n", "\n", "# score = score / torch.sum(score.view(b, -1), dim=1).view(b, 1, 1)", "\n", "\n", "return", "score", ".", "unsqueeze", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.networks.DeteNet.KeypointDet.ASL_Peak": [[75, 96], ["torch.softplus", "torch.softplus", "torch.softplus", "torch.softplus", "torch.softplus", "torch.softplus", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "max_per_sample.view", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "x.mean", "x.view", "torch.pad", "torch.pad", "torch.pad"], "methods", ["None"], ["", "def", "ASL_Peak", "(", "self", ",", "x", ")", ":", "\n", "        ", "b", ",", "c", ",", "h", ",", "w", "=", "x", ".", "shape", "\n", "window_size", "=", "3", "\n", "padding_size", "=", "window_size", "//", "2", "\n", "\n", "# x = F.relu(x)", "\n", "max_per_sample", "=", "torch", ".", "max", "(", "x", ".", "view", "(", "b", ",", "-", "1", ")", ",", "dim", "=", "1", ")", "[", "0", "]", "\n", "x", "=", "x", "/", "max_per_sample", ".", "view", "(", "b", ",", "1", ",", "1", ",", "1", ")", "\n", "\n", "alpha_input", "=", "x", "-", "F", ".", "avg_pool2d", "(", "\n", "F", ".", "pad", "(", "x", ",", "[", "padding_size", "]", "*", "4", ",", "mode", "=", "'reflect'", ")", ",", "\n", "window_size", ",", "stride", "=", "1", "\n", ")", "\n", "alpha", "=", "F", ".", "softplus", "(", "alpha_input", ")", "\n", "\n", "beta_input", "=", "x", "-", "x", ".", "mean", "(", "1", ",", "True", ")", "\n", "beta", "=", "F", ".", "softplus", "(", "beta_input", ")", "\n", "\n", "all_scores", "=", "(", "alpha", "*", "beta", ")", ".", "max", "(", "1", ",", "True", ")", "[", "0", "]", "\n", "\n", "return", "all_scores", "\n", "\n"]], "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.networks.DeteNet.KeypointDet.identity": [[97, 100], ["torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like.mean", "torch.ones_like.mean", "torch.ones_like.mean"], "methods", ["None"], ["", "def", "identity", "(", "self", ",", "x", ")", ":", "\n", "        ", "scores", "=", "torch", ".", "ones_like", "(", "x", ")", "\n", "return", "scores", ".", "mean", "(", "1", ",", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.networks.DeteNet.KeypointDet.forward": [[102, 122], ["DeteNet.KeypointDet.prior", "DeteNet.KeypointDet.prior", "DeteNet.KeypointDet.relu", "torch.interpolate", "torch.interpolate", "torch.interpolate", "DeteNet.KeypointDet.normimg", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "DeteNet.KeypointDet.relu", "DeteNet.KeypointDet.act", "DeteNet.KeypointDet.norm1", "DeteNet.KeypointDet.convimg", "DeteNet.KeypointDet.norm2", "DeteNet.KeypointDet.norm3", "DeteNet.KeypointDet.conv1", "DeteNet.KeypointDet.conv2", "DeteNet.KeypointDet.conv3", "torch.interpolate().mean", "torch.interpolate().mean", "torch.interpolate().mean", "DeteNet.KeypointDet.mean", "torch.interpolate", "torch.interpolate", "torch.interpolate"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "fine_maps", ")", ":", "\n", "        ", "fine_map", "=", "fine_maps", "[", "0", "]", "\n", "img_tensor", "=", "fine_maps", "[", "1", "]", "\n", "x_pf", "=", "self", ".", "prior", "(", "fine_map", ")", "\n", "x_pi", "=", "self", ".", "prior", "(", "img_tensor", ")", "\n", "\n", "x", "=", "self", ".", "relu", "(", "self", ".", "norm1", "(", "self", ".", "conv1", "(", "x_pf", "*", "fine_map", ")", ")", ")", "\n", "x", "=", "F", ".", "interpolate", "(", "x", ",", "img_tensor", ".", "shape", "[", "2", ":", "]", ",", "align_corners", "=", "False", ",", "mode", "=", "'bilinear'", ")", "\n", "img_tensor", "=", "self", ".", "normimg", "(", "self", ".", "convimg", "(", "x_pi", "*", "img_tensor", ")", ")", "\n", "x", "=", "torch", ".", "cat", "(", "[", "x", ",", "img_tensor", "]", ",", "dim", "=", "1", ")", "\n", "x", "=", "self", ".", "relu", "(", "self", ".", "norm2", "(", "self", ".", "conv2", "(", "x", ")", ")", ")", "\n", "score", "=", "self", ".", "act", "(", "self", ".", "norm3", "(", "self", ".", "conv3", "(", "x", ")", ")", ")", "\n", "\n", "# thr = self.act(self.conv_thr(x))", "\n", "# score = self.relu(score-thr)", "\n", "\n", "score", "=", "F", ".", "interpolate", "(", "x_pf", ",", "img_tensor", ".", "shape", "[", "2", ":", "]", ",", "align_corners", "=", "False", ",", "mode", "=", "'bilinear'", ")", ".", "mean", "(", "1", ",", "True", ")", "*", "x_pi", ".", "mean", "(", "1", ",", "True", ")", "*", "score", "\n", "\n", "return", "score", "", "", "", ""]], "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.networks.PoSFeat_model.PoSFeat.__init__": [[16, 47], ["getattr", "getattr.to", "list", "list", "print", "PoSFeat_model.PoSFeat.backbone.parameters", "getattr", "getattr.to", "networks.KeypointDet().to", "PoSFeat_model.PoSFeat.localheader.parameters", "getattr.", "list", "PoSFeat_model.PoSFeat.config.keys", "getattr.", "networks.KeypointDet"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "configs", ",", "device", ",", "no_cuda", "=", "None", ")", ":", "\n", "        ", "self", ".", "config", "=", "configs", "\n", "self", ".", "device", "=", "device", "\n", "self", ".", "no_cuda", "=", "no_cuda", "\n", "self", ".", "align_local_grad", "=", "self", ".", "config", "[", "'align_local_grad'", "]", "\n", "self", ".", "local_input_elements", "=", "self", ".", "config", "[", "'local_input_elements'", "]", "\n", "self", ".", "local_with_img", "=", "self", ".", "config", "[", "'local_with_img'", "]", "\n", "self", ".", "parameters", "=", "[", "]", "\n", "\n", "backbone", "=", "getattr", "(", "networks", ",", "self", ".", "config", "[", "'backbone'", "]", ")", "\n", "self", ".", "backbone", "=", "backbone", "(", "**", "self", ".", "config", "[", "'backbone_config'", "]", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "parameters", "+=", "list", "(", "self", ".", "backbone", ".", "parameters", "(", ")", ")", "\n", "# self.backbone.eval()", "\n", "message", "=", "\"backbone: {}\\n\"", ".", "format", "(", "self", ".", "config", "[", "'backbone'", "]", ")", "\n", "\n", "if", "'localheader'", "in", "list", "(", "self", ".", "config", ".", "keys", "(", ")", ")", "and", "self", ".", "config", "[", "'localheader'", "]", "!=", "'None'", ":", "\n", "# if self.config['localheader'] is not None:", "\n", "            ", "localheader", "=", "getattr", "(", "networks", ",", "self", ".", "config", "[", "'localheader'", "]", ")", "\n", "self", ".", "localheader", "=", "localheader", "(", "**", "self", ".", "config", "[", "'localheader_config'", "]", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "message", "+=", "\"localheader: {}\\n\"", ".", "format", "(", "self", ".", "config", "[", "'localheader'", "]", ")", "\n", "", "else", ":", "\n", "            ", "in_channel", "=", "self", ".", "backbone", ".", "out_channels", "[", "0", "]", "\n", "# if self.config['backbone'] == 'LiteHRNet':", "\n", "#     in_channel = self.config['backbone_config']['extra']['stages_spec']['num_channels'][-1][0]", "\n", "# else:", "\n", "#     in_channel = 128", "\n", "self", ".", "localheader", "=", "networks", ".", "KeypointDet", "(", "in_channels", "=", "in_channel", ",", "out_channels", "=", "2", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "message", "+=", "\"localheader: KeypointDet\\n\"", "\n", "", "self", ".", "parameters", "+=", "list", "(", "self", ".", "localheader", ".", "parameters", "(", ")", ")", "\n", "self", ".", "modules", "=", "[", "'localheader'", ",", "'backbone'", "]", "\n", "print", "(", "message", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.networks.PoSFeat_model.PoSFeat.set_parallel": [[48, 56], ["torch.nn.SyncBatchNorm.convert_sync_batchnorm", "torch.nn.SyncBatchNorm.convert_sync_batchnorm", "torch.nn.SyncBatchNorm.convert_sync_batchnorm", "torch.nn.SyncBatchNorm.convert_sync_batchnorm", "torch.nn.SyncBatchNorm.convert_sync_batchnorm", "torch.nn.SyncBatchNorm.convert_sync_batchnorm", "torch.nn.SyncBatchNorm.convert_sync_batchnorm", "torch.nn.SyncBatchNorm.convert_sync_batchnorm", "torch.nn.SyncBatchNorm.convert_sync_batchnorm", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.SyncBatchNorm.convert_sync_batchnorm", "torch.nn.SyncBatchNorm.convert_sync_batchnorm", "torch.nn.SyncBatchNorm.convert_sync_batchnorm", "torch.nn.SyncBatchNorm.convert_sync_batchnorm", "torch.nn.SyncBatchNorm.convert_sync_batchnorm", "torch.nn.SyncBatchNorm.convert_sync_batchnorm", "torch.nn.SyncBatchNorm.convert_sync_batchnorm", "torch.nn.SyncBatchNorm.convert_sync_batchnorm", "torch.nn.SyncBatchNorm.convert_sync_batchnorm", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel"], "methods", ["None"], ["", "def", "set_parallel", "(", "self", ",", "local_rank", ")", ":", "\n", "        ", "self", ".", "backbone", "=", "torch", ".", "nn", ".", "SyncBatchNorm", ".", "convert_sync_batchnorm", "(", "self", ".", "backbone", ")", "\n", "self", ".", "backbone", "=", "torch", ".", "nn", ".", "parallel", ".", "DistributedDataParallel", "(", "self", ".", "backbone", ",", "\n", "find_unused_parameters", "=", "True", ",", "device_ids", "=", "[", "local_rank", "]", ",", "output_device", "=", "local_rank", ")", "\n", "\n", "self", ".", "localheader", "=", "torch", ".", "nn", ".", "SyncBatchNorm", ".", "convert_sync_batchnorm", "(", "self", ".", "localheader", ")", "\n", "self", ".", "localheader", "=", "torch", ".", "nn", ".", "parallel", ".", "DistributedDataParallel", "(", "self", ".", "localheader", ",", "\n", "find_unused_parameters", "=", "True", ",", "device_ids", "=", "[", "local_rank", "]", ",", "output_device", "=", "local_rank", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.networks.PoSFeat_model.PoSFeat.load_checkpoint": [[57, 73], ["path.Path", "os.path.exists", "getattr", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "getattr.load_state_dict", "print", "print"], "methods", ["None"], ["", "def", "load_checkpoint", "(", "self", ",", "load_path", ")", ":", "\n", "        ", "load_root", "=", "Path", "(", "load_path", ")", "\n", "model_list", "=", "[", "'backbone'", ",", "'localheader'", "]", "\n", "for", "name", "in", "model_list", ":", "\n", "            ", "model_path", "=", "load_root", "/", "'{}.pth'", ".", "format", "(", "name", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "model_path", ")", ":", "\n", "                ", "print", "(", "'load {} from checkpoint'", ".", "format", "(", "name", ")", ")", "\n", "", "else", ":", "\n", "                ", "print", "(", "'{} does not exist, skipping load'", ".", "format", "(", "name", ")", ")", "\n", "continue", "\n", "", "model", "=", "getattr", "(", "self", ",", "name", ")", "\n", "model_param", "=", "torch", ".", "load", "(", "model_path", ")", "\n", "# print('\\n\\n {}\\n'.format(name))", "\n", "# for key, val in model_param.items():", "\n", "#     print(key)", "\n", "model", ".", "load_state_dict", "(", "model_param", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.networks.PoSFeat_model.PoSFeat.save_checkpoint": [[74, 82], ["path.Path", "getattr", "getattr.state_dict", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save"], "methods", ["None"], ["", "", "def", "save_checkpoint", "(", "self", ",", "save_path", ")", ":", "\n", "        ", "save_root", "=", "Path", "(", "save_path", ")", "\n", "model_list", "=", "[", "'backbone'", ",", "'localheader'", "]", "\n", "for", "name", "in", "model_list", ":", "\n", "            ", "model_path", "=", "save_root", "/", "'{}.pth'", ".", "format", "(", "name", ")", "\n", "model", "=", "getattr", "(", "self", ",", "name", ")", "\n", "model_param", "=", "model", ".", "state_dict", "(", ")", "\n", "torch", ".", "save", "(", "model_param", ",", "model_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.networks.PoSFeat_model.PoSFeat.set_train": [[83, 86], ["PoSFeat_model.PoSFeat.backbone.train", "PoSFeat_model.PoSFeat.localheader.train"], "methods", ["home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.managers.trainer.Trainer.train", "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.managers.trainer.Trainer.train"], ["", "", "def", "set_train", "(", "self", ")", ":", "\n", "        ", "self", ".", "backbone", ".", "train", "(", ")", "\n", "self", ".", "localheader", ".", "train", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.networks.PoSFeat_model.PoSFeat.set_eval": [[87, 90], ["PoSFeat_model.PoSFeat.backbone.eval", "PoSFeat_model.PoSFeat.localheader.eval"], "methods", ["None"], ["", "def", "set_eval", "(", "self", ")", ":", "\n", "        ", "self", ".", "backbone", ".", "eval", "(", ")", "\n", "self", ".", "localheader", ".", "eval", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.networks.PoSFeat_model.PoSFeat.extract": [[91, 135], ["PoSFeat_model.PoSFeat.backbone", "torch.ones().type_as().to", "torch.ones().type_as().to", "torch.ones().type_as().to", "torch.ones().type_as().to", "torch.ones().type_as().to", "torch.ones().type_as().to", "torch.ones().type_as().to", "torch.ones().type_as().to", "torch.ones().type_as().to", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "PoSFeat_model.PoSFeat.localheader", "torch.normalize().mean", "torch.normalize().mean", "torch.normalize().mean", "local_list.append", "local_input.detach.detach.detach", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.ones().type_as", "torch.ones().type_as", "torch.ones().type_as", "torch.ones().type_as", "torch.ones().type_as", "torch.ones().type_as", "torch.ones().type_as", "torch.ones().type_as", "torch.ones().type_as", "torch.normalize", "torch.normalize", "torch.normalize", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["None"], ["", "def", "extract", "(", "self", ",", "tensor", ",", "postfix", "=", "\"\"", ")", ":", "\n", "        ", "feat_maps", "=", "self", ".", "backbone", "(", "tensor", ")", "\n", "# g_map = self.globalheader(feat_maps['global_map'])", "\n", "b", ",", "c", ",", "h", ",", "w", "=", "feat_maps", "[", "'global_map'", "]", ".", "shape", "\n", "g_map", "=", "torch", ".", "ones", "(", "b", ",", "1", ",", "h", ",", "w", ")", ".", "type_as", "(", "feat_maps", "[", "'local_map'", "]", ")", ".", "to", "(", "feat_maps", "[", "'local_map'", "]", ".", "device", ")", "\n", "local_list", "=", "[", "]", "\n", "for", "name", "in", "self", ".", "local_input_elements", ":", "\n", "            ", "local_list", ".", "append", "(", "feat_maps", "[", "name", "]", ")", "\n", "", "local_input", "=", "torch", ".", "cat", "(", "local_list", ",", "dim", "=", "1", ")", "\n", "if", "not", "self", ".", "align_local_grad", ":", "\n", "# l_map = self.localheader(local_input)", "\n", "            ", "local_input", "=", "local_input", ".", "detach", "(", ")", "\n", "# else:", "\n", "#     l_map = self.localheader(local_input.detach())", "\n", "", "if", "self", ".", "local_with_img", ":", "\n", "            ", "local_input", "=", "[", "local_input", ",", "tensor", "]", "\n", "", "l_map", "=", "self", ".", "localheader", "(", "local_input", ")", "\n", "\n", "if", "l_map", ".", "shape", "[", "1", "]", "==", "1", ":", "\n", "            ", "local_thr", "=", "torch", ".", "zeros_like", "(", "l_map", ")", "\n", "", "elif", "l_map", ".", "shape", "[", "1", "]", "==", "2", ":", "\n", "            ", "local_thr", "=", "l_map", "[", ":", ",", "1", ":", ",", ":", ",", ":", "]", "\n", "l_map", "=", "l_map", "[", ":", ",", ":", "1", ",", ":", ",", ":", "]", "\n", "\n", "", "g_desc", "=", "g_map", "*", "feat_maps", "[", "'global_map'", "]", "\n", "# g_desc = g_desc.sum([2,3])", "\n", "g_desc", "=", "F", ".", "normalize", "(", "g_desc", ",", "p", "=", "2", ",", "dim", "=", "1", ")", ".", "mean", "(", "[", "2", ",", "3", "]", ")", "\n", "\n", "outputs", "=", "{", "\n", "'local_map'", ":", "feat_maps", "[", "'local_map'", "]", ",", "\n", "'global_map'", ":", "feat_maps", "[", "'global_map'", "]", ",", "\n", "'global_feat'", ":", "g_desc", ",", "\n", "'local_point'", ":", "l_map", ",", "\n", "'local_thr'", ":", "local_thr", ",", "\n", "'global_point'", ":", "g_map", "\n", "}", "\n", "\n", "# outputs = {", "\n", "#     'local_feat{}'.format(postfix): feat_maps['fine_map'],", "\n", "#     'global_feat{}'.format(postfix): g_desc,", "\n", "#     'local_point{}'.format(postfix): l_map,", "\n", "#     'global_point{}'.format(postfix): g_map", "\n", "# }", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.networks.PoSFeat_model.PoSFeat.forward": [[136, 148], ["inputs.items", "PoSFeat_model.PoSFeat.extract", "PoSFeat_model.PoSFeat.extract", "val.to"], "methods", ["home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.managers.extractor.Extractor.extract", "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.managers.extractor.Extractor.extract"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "for", "key", ",", "val", "in", "inputs", ".", "items", "(", ")", ":", "\n", "            ", "if", "key", "in", "self", ".", "no_cuda", ":", "\n", "                ", "continue", "\n", "", "inputs", "[", "key", "]", "=", "val", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "# preds = self.extract(inputs['im1'],1)", "\n", "# preds.update(self.extract(inputs['im2'],2))", "\n", "", "preds1", "=", "self", ".", "extract", "(", "inputs", "[", "'im1'", "]", ",", "1", ")", "\n", "preds2", "=", "self", ".", "extract", "(", "inputs", "[", "'im2'", "]", ",", "2", ")", "\n", "\n", "return", "{", "'preds1'", ":", "preds1", ",", "'preds2'", ":", "preds2", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.networks.DescNet.ResUNet.__init__": [[12, 49], ["torch.Module.__init__", "DescNet.conv", "DescNet.upconv", "DescNet.conv", "DescNet.upconv", "DescNet.conv", "DescNet.conv", "DescNet.class_for_name"], "methods", ["home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.losses.preprocess.Preprocess_Skip.__init__", "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.networks.DescNet.class_for_name"], ["    ", "def", "__init__", "(", "self", ",", "\n", "encoder", "=", "'resnet50'", ",", "\n", "pretrained", "=", "True", ",", "\n", "coarse_out_ch", "=", "128", ",", "\n", "fine_out_ch", "=", "128", "\n", ")", ":", "\n", "\n", "        ", "super", "(", "ResUNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "encoder", "in", "[", "'resnet18'", ",", "'resnet34'", ",", "'resnet50'", ",", "'resnet101'", ",", "'resnet152'", ",", "'wide_resnet50_2'", "]", ",", "\"Incorrect encoder type\"", "\n", "if", "encoder", "in", "[", "'resnet18'", ",", "'resnet34'", "]", ":", "\n", "            ", "filters", "=", "[", "64", ",", "128", ",", "256", ",", "512", "]", "\n", "", "else", ":", "\n", "            ", "filters", "=", "[", "256", ",", "512", ",", "1024", ",", "2048", "]", "\n", "", "resnet", "=", "class_for_name", "(", "\"torchvision.models\"", ",", "encoder", ")", "(", "pretrained", "=", "pretrained", ")", "\n", "\n", "self", ".", "firstconv", "=", "resnet", ".", "conv1", "# H/2", "\n", "self", ".", "firstbn", "=", "resnet", ".", "bn1", "\n", "self", ".", "firstrelu", "=", "resnet", ".", "relu", "\n", "self", ".", "firstmaxpool", "=", "resnet", ".", "maxpool", "# H/4", "\n", "\n", "# encoder", "\n", "self", ".", "layer1", "=", "resnet", ".", "layer1", "# H/4", "\n", "self", ".", "layer2", "=", "resnet", ".", "layer2", "# H/8", "\n", "self", ".", "layer3", "=", "resnet", ".", "layer3", "# H/16", "\n", "\n", "# coarse-level conv", "\n", "self", ".", "conv_coarse", "=", "conv", "(", "filters", "[", "2", "]", ",", "coarse_out_ch", ",", "1", ",", "1", ")", "\n", "\n", "# decoder", "\n", "self", ".", "upconv3", "=", "upconv", "(", "filters", "[", "2", "]", ",", "512", ",", "3", ",", "2", ")", "\n", "self", ".", "iconv3", "=", "conv", "(", "filters", "[", "1", "]", "+", "512", ",", "512", ",", "3", ",", "1", ")", "\n", "self", ".", "upconv2", "=", "upconv", "(", "512", ",", "256", ",", "3", ",", "2", ")", "\n", "self", ".", "iconv2", "=", "conv", "(", "filters", "[", "0", "]", "+", "256", ",", "256", ",", "3", ",", "1", ")", "\n", "\n", "# fine-level conv", "\n", "self", ".", "conv_fine", "=", "conv", "(", "256", ",", "fine_out_ch", ",", "1", ",", "1", ")", "\n", "self", ".", "out_channels", "=", "[", "fine_out_ch", ",", "coarse_out_ch", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.networks.DescNet.ResUNet.skipconnect": [[50, 63], ["torch.pad", "torch.pad", "torch.pad", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "x2.size", "torch.pad.size", "x2.size", "torch.pad.size"], "methods", ["None"], ["", "def", "skipconnect", "(", "self", ",", "x1", ",", "x2", ")", ":", "\n", "        ", "diffY", "=", "x2", ".", "size", "(", ")", "[", "2", "]", "-", "x1", ".", "size", "(", ")", "[", "2", "]", "\n", "diffX", "=", "x2", ".", "size", "(", ")", "[", "3", "]", "-", "x1", ".", "size", "(", ")", "[", "3", "]", "\n", "\n", "x1", "=", "F", ".", "pad", "(", "x1", ",", "(", "diffX", "//", "2", ",", "diffX", "-", "diffX", "//", "2", ",", "\n", "diffY", "//", "2", ",", "diffY", "-", "diffY", "//", "2", ")", ")", "\n", "\n", "# for padding issues, see", "\n", "# https://github.com/HaiyongJiang/U-Net-Pytorch-Unstructured-Buggy/commit/0e854509c2cea854e247a9c615f175f76fbb2e3a", "\n", "# https://github.com/xiaopeng-liao/Pytorch-UNet/commit/8ebac70e633bac59fc22bb5195e513d5832fb3bd", "\n", "\n", "x", "=", "torch", ".", "cat", "(", "[", "x2", ",", "x1", "]", ",", "dim", "=", "1", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.networks.DescNet.ResUNet.forward": [[64, 85], ["DescNet.ResUNet.firstrelu", "DescNet.ResUNet.firstmaxpool", "DescNet.ResUNet.layer1", "DescNet.ResUNet.layer2", "DescNet.ResUNet.layer3", "DescNet.ResUNet.conv_coarse", "DescNet.ResUNet.upconv3", "DescNet.ResUNet.skipconnect", "DescNet.ResUNet.iconv3", "DescNet.ResUNet.upconv2", "DescNet.ResUNet.skipconnect", "DescNet.ResUNet.iconv2", "DescNet.ResUNet.conv_fine", "DescNet.ResUNet.firstbn", "DescNet.ResUNet.firstconv"], "methods", ["home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.networks.DescNet.ResUNetHR.skipconnect", "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.networks.DescNet.ResUNetHR.skipconnect"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "firstrelu", "(", "self", ".", "firstbn", "(", "self", ".", "firstconv", "(", "x", ")", ")", ")", "\n", "x_first", "=", "self", ".", "firstmaxpool", "(", "x", ")", "\n", "\n", "x1", "=", "self", ".", "layer1", "(", "x_first", ")", "\n", "x2", "=", "self", ".", "layer2", "(", "x1", ")", "\n", "x3", "=", "self", ".", "layer3", "(", "x2", ")", "\n", "\n", "x_coarse", "=", "self", ".", "conv_coarse", "(", "x3", ")", "#H/16", "\n", "\n", "x", "=", "self", ".", "upconv3", "(", "x3", ")", "\n", "x", "=", "self", ".", "skipconnect", "(", "x2", ",", "x", ")", "\n", "x", "=", "self", ".", "iconv3", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "upconv2", "(", "x", ")", "\n", "x", "=", "self", ".", "skipconnect", "(", "x1", ",", "x", ")", "\n", "x", "=", "self", ".", "iconv2", "(", "x", ")", "\n", "\n", "x_fine", "=", "self", ".", "conv_fine", "(", "x", ")", "#H/4", "\n", "\n", "return", "{", "'global_map'", ":", "x_coarse", ",", "'local_map'", ":", "x_fine", ",", "'local_map_small'", ":", "x_first", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.networks.DescNet.ResUNetHR.__init__": [[87, 126], ["torch.Module.__init__", "DescNet.conv", "DescNet.upconv", "DescNet.conv", "DescNet.upconv", "DescNet.conv", "DescNet.upconv", "DescNet.conv", "DescNet.conv", "DescNet.class_for_name"], "methods", ["home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.losses.preprocess.Preprocess_Skip.__init__", "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.networks.DescNet.class_for_name"], ["    ", "def", "__init__", "(", "self", ",", "\n", "encoder", "=", "'resnet50'", ",", "\n", "pretrained", "=", "True", ",", "\n", "coarse_out_ch", "=", "128", ",", "\n", "fine_out_ch", "=", "128", "\n", ")", ":", "\n", "\n", "        ", "super", "(", "ResUNetHR", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "encoder", "in", "[", "'resnet18'", ",", "'resnet34'", ",", "'resnet50'", ",", "'resnet101'", ",", "'resnet152'", "]", ",", "\"Incorrect encoder type\"", "\n", "if", "encoder", "in", "[", "'resnet18'", ",", "'resnet34'", "]", ":", "\n", "            ", "filters", "=", "[", "64", ",", "128", ",", "256", ",", "512", "]", "\n", "", "else", ":", "\n", "            ", "filters", "=", "[", "256", ",", "512", ",", "1024", ",", "2048", "]", "\n", "", "resnet", "=", "class_for_name", "(", "\"torchvision.models\"", ",", "encoder", ")", "(", "pretrained", "=", "pretrained", ")", "\n", "\n", "self", ".", "firstconv", "=", "resnet", ".", "conv1", "# H/2", "\n", "self", ".", "firstbn", "=", "resnet", ".", "bn1", "\n", "self", ".", "firstrelu", "=", "resnet", ".", "relu", "\n", "self", ".", "firstmaxpool", "=", "resnet", ".", "maxpool", "# H/4", "\n", "\n", "# encoder", "\n", "self", ".", "layer1", "=", "resnet", ".", "layer1", "# H/4", "\n", "self", ".", "layer2", "=", "resnet", ".", "layer2", "# H/8", "\n", "self", ".", "layer3", "=", "resnet", ".", "layer3", "# H/16", "\n", "\n", "# coarse-level conv", "\n", "self", ".", "conv_coarse", "=", "conv", "(", "filters", "[", "2", "]", ",", "coarse_out_ch", ",", "1", ",", "1", ")", "\n", "\n", "# decoder", "\n", "self", ".", "upconv3", "=", "upconv", "(", "filters", "[", "2", "]", ",", "512", ",", "3", ",", "2", ")", "\n", "self", ".", "iconv3", "=", "conv", "(", "filters", "[", "1", "]", "+", "512", ",", "512", ",", "3", ",", "1", ")", "\n", "self", ".", "upconv2", "=", "upconv", "(", "512", ",", "256", ",", "3", ",", "2", ")", "\n", "self", ".", "iconv2", "=", "conv", "(", "filters", "[", "0", "]", "+", "256", ",", "256", ",", "3", ",", "1", ")", "\n", "self", ".", "upconv1", "=", "upconv", "(", "256", ",", "192", ",", "3", ",", "2", ")", "\n", "self", ".", "iconv1", "=", "conv", "(", "64", "+", "192", ",", "256", ",", "3", ",", "1", ")", "\n", "\n", "# fine-level conv", "\n", "self", ".", "conv_fine", "=", "conv", "(", "256", ",", "fine_out_ch", ",", "1", ",", "1", ")", "\n", "self", ".", "out_channels", "=", "[", "fine_out_ch", ",", "coarse_out_ch", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.networks.DescNet.ResUNetHR.skipconnect": [[127, 140], ["torch.pad", "torch.pad", "torch.pad", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "x2.size", "torch.pad.size", "x2.size", "torch.pad.size"], "methods", ["None"], ["", "def", "skipconnect", "(", "self", ",", "x1", ",", "x2", ")", ":", "\n", "        ", "diffY", "=", "x2", ".", "size", "(", ")", "[", "2", "]", "-", "x1", ".", "size", "(", ")", "[", "2", "]", "\n", "diffX", "=", "x2", ".", "size", "(", ")", "[", "3", "]", "-", "x1", ".", "size", "(", ")", "[", "3", "]", "\n", "\n", "x1", "=", "F", ".", "pad", "(", "x1", ",", "(", "diffX", "//", "2", ",", "diffX", "-", "diffX", "//", "2", ",", "\n", "diffY", "//", "2", ",", "diffY", "-", "diffY", "//", "2", ")", ")", "\n", "\n", "# for padding issues, see", "\n", "# https://github.com/HaiyongJiang/U-Net-Pytorch-Unstructured-Buggy/commit/0e854509c2cea854e247a9c615f175f76fbb2e3a", "\n", "# https://github.com/xiaopeng-liao/Pytorch-UNet/commit/8ebac70e633bac59fc22bb5195e513d5832fb3bd", "\n", "\n", "x", "=", "torch", ".", "cat", "(", "[", "x2", ",", "x1", "]", ",", "dim", "=", "1", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.networks.DescNet.ResUNetHR.forward": [[141, 166], ["DescNet.ResUNetHR.firstrelu", "DescNet.ResUNetHR.firstmaxpool", "DescNet.ResUNetHR.layer1", "DescNet.ResUNetHR.layer2", "DescNet.ResUNetHR.layer3", "DescNet.ResUNetHR.conv_coarse", "DescNet.ResUNetHR.upconv3", "DescNet.ResUNetHR.skipconnect", "DescNet.ResUNetHR.iconv3", "DescNet.ResUNetHR.upconv2", "DescNet.ResUNetHR.skipconnect", "DescNet.ResUNetHR.iconv2", "DescNet.ResUNetHR.upconv1", "DescNet.ResUNetHR.skipconnect", "DescNet.ResUNetHR.iconv1", "DescNet.ResUNetHR.conv_fine", "DescNet.ResUNetHR.firstbn", "DescNet.ResUNetHR.firstconv"], "methods", ["home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.networks.DescNet.ResUNetHR.skipconnect", "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.networks.DescNet.ResUNetHR.skipconnect", "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.networks.DescNet.ResUNetHR.skipconnect"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x_first1", "=", "self", ".", "firstrelu", "(", "self", ".", "firstbn", "(", "self", ".", "firstconv", "(", "x", ")", ")", ")", "\n", "x_first", "=", "self", ".", "firstmaxpool", "(", "x_first1", ")", "\n", "\n", "x1", "=", "self", ".", "layer1", "(", "x_first", ")", "\n", "x2", "=", "self", ".", "layer2", "(", "x1", ")", "\n", "x3", "=", "self", ".", "layer3", "(", "x2", ")", "\n", "\n", "x_coarse", "=", "self", ".", "conv_coarse", "(", "x3", ")", "#H/16", "\n", "\n", "x", "=", "self", ".", "upconv3", "(", "x3", ")", "\n", "x", "=", "self", ".", "skipconnect", "(", "x2", ",", "x", ")", "\n", "x", "=", "self", ".", "iconv3", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "upconv2", "(", "x", ")", "\n", "x", "=", "self", ".", "skipconnect", "(", "x1", ",", "x", ")", "\n", "x", "=", "self", ".", "iconv2", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "upconv1", "(", "x", ")", "\n", "x", "=", "self", ".", "skipconnect", "(", "x_first1", ",", "x", ")", "\n", "x", "=", "self", ".", "iconv1", "(", "x", ")", "\n", "\n", "x_fine", "=", "self", ".", "conv_fine", "(", "x", ")", "#H/2", "\n", "\n", "return", "{", "'global_map'", ":", "x_coarse", ",", "'local_map'", ":", "x_fine", ",", "'local_map_small'", ":", "x_first1", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.networks.DescNet.conv.__init__": [[168, 177], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.losses.preprocess.Preprocess_Skip.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_in_layers", ",", "num_out_layers", ",", "kernel_size", ",", "stride", ")", ":", "\n", "        ", "super", "(", "conv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "kernel_size", "=", "kernel_size", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "num_in_layers", ",", "\n", "num_out_layers", ",", "\n", "kernel_size", "=", "kernel_size", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "(", "self", ".", "kernel_size", "-", "1", ")", "//", "2", ")", "\n", "self", ".", "bn", "=", "nn", ".", "BatchNorm2d", "(", "num_out_layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.networks.DescNet.conv.forward": [[178, 180], ["torch.elu", "torch.elu", "torch.elu", "DescNet.conv.bn", "DescNet.conv.conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "F", ".", "elu", "(", "self", ".", "bn", "(", "self", ".", "conv", "(", "x", ")", ")", ",", "inplace", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.networks.DescNet.upconv.__init__": [[183, 187], ["torch.Module.__init__", "DescNet.conv"], "methods", ["home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.losses.preprocess.Preprocess_Skip.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_in_layers", ",", "num_out_layers", ",", "kernel_size", ",", "scale", ")", ":", "\n", "        ", "super", "(", "upconv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "scale", "=", "scale", "\n", "self", ".", "conv", "=", "conv", "(", "num_in_layers", ",", "num_out_layers", ",", "kernel_size", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.networks.DescNet.upconv.forward": [[188, 191], ["torch.functional.interpolate", "torch.functional.interpolate", "torch.functional.interpolate", "DescNet.upconv.conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "nn", ".", "functional", ".", "interpolate", "(", "x", ",", "scale_factor", "=", "self", ".", "scale", ",", "align_corners", "=", "True", ",", "mode", "=", "'bilinear'", ")", "\n", "return", "self", ".", "conv", "(", "x", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.networks.DescNet.class_for_name": [[6, 10], ["importlib.import_module", "getattr"], "function", ["None"], ["def", "class_for_name", "(", "module_name", ",", "class_name", ")", ":", "\n", "# load the module, will raise ImportError if module cannot be loaded", "\n", "    ", "m", "=", "importlib", ".", "import_module", "(", "module_name", ")", "\n", "return", "getattr", "(", "m", ",", "class_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.managers.trainer.TqdmHandler.__init__": [[33, 35], ["logging.StreamHandler.__init__"], "methods", ["home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.losses.preprocess.Preprocess_Skip.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "logging", ".", "StreamHandler", ".", "__init__", "(", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.managers.trainer.TqdmHandler.emit": [[36, 39], ["trainer.TqdmHandler.format", "tqdm.tqdm.tqdm.write"], "methods", ["None"], ["", "def", "emit", "(", "self", ",", "record", ")", ":", "\n", "        ", "msg", "=", "self", ".", "format", "(", "record", ")", "\n", "tqdm", ".", "write", "(", "msg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.managers.trainer.Trainer.__init__": [[42, 146], ["path.Path", "trainer.Trainer.set_device", "trainer.Trainer.set_folder_and_logger", "zip", "zip", "trainer.Trainer.logger.info", "trainer.Trainer.logger.info", "getattr", "getattr.", "torch.optim.lr_scheduler.StepLR", "torch.optim.lr_scheduler.StepLR", "torch.optim.lr_scheduler.StepLR", "torch.optim.lr_scheduler.StepLR", "torch.optim.lr_scheduler.StepLR", "torch.optim.lr_scheduler.StepLR", "torch.optim.lr_scheduler.StepLR", "torch.optim.lr_scheduler.StepLR", "torch.optim.lr_scheduler.StepLR", "trainer.Trainer.logger.info", "getattr", "getattr.", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "getattr.", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "iter", "next", "open", "yaml.load", "list", "list", "getattr", "getattr.", "networks.PoSFeat", "getattr", "parameters.append", "trainer.Trainer.logger.info", "trainer.Trainer.model.load_checkpoint", "trainer.Trainer.model.set_parallel", "list", "getattr", "getattr.to", "losses.Preprocess_Skip().to", "losses.Preprocess_Skip().to", "losses.Preprocess_Skip().to", "losses.Preprocess_Skip().to", "getattr", "trainer.Trainer.losses.append", "trainer.Trainer.losses_weight.append", "hasattr", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "losses.cycle", "losses.cycle", "open", "numpy.savez", "trainer.Trainer.config.keys", "path.Path", "trainer.Trainer.config[].update", "trainer.Trainer.config.keys", "getattr", "getattr.parameters", "trainer.Trainer.config.keys", "getattr.to", "float", "parameters.append", "path.Path.dirname", "open", "yaml.load", "list", "getattr.parameters", "getattr.", "losses.Preprocess_Skip", "losses.Preprocess_Skip", "losses.Preprocess_Skip", "losses.Preprocess_Skip", "trainer.Trainer.losses[].load_checkpoint", "yaml.load.keys", "getattr.", "trainer.Trainer.losses[].parameters"], "methods", ["home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.managers.extractor.Extractor.set_device", "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.managers.extractor.Extractor.set_folder_and_logger", "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.networks.PoSFeat_model.PoSFeat.load_checkpoint", "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.networks.PoSFeat_model.PoSFeat.set_parallel", "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.losses.preprocess_utils.cycle", "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.losses.preprocess_utils.cycle", "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.networks.PoSFeat_model.PoSFeat.load_checkpoint"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "## read the config file", "\n", "## \u8bfb\u53d6\u914d\u7f6e\u6587\u4ef6", "\n", "        ", "self", ".", "args", "=", "args", "\n", "with", "open", "(", "self", ".", "args", ".", "config", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "self", ".", "config", "=", "yaml", ".", "load", "(", "f", ",", "Loader", "=", "yaml", ".", "FullLoader", ")", "\n", "", "self", ".", "save_root", "=", "Path", "(", "'./ckpts/{}'", ".", "format", "(", "self", ".", "config", "[", "'checkpoint_name'", "]", ")", ")", "\n", "self", ".", "logfile", "=", "self", ".", "save_root", "/", "'logging_file.txt'", "\n", "\n", "## update the model config if there is a checkpoint", "\n", "## \u5982\u679c\u5b58\u5728checkpoint\uff0c\u5219\u6839\u636echeckpoint\u4e2d\u7684\u6a21\u578b\u914d\u7f6e\u6765\u66f4\u65b0\u914d\u7f6e\u6587\u4ef6\uff0c\u786e\u4fdd\u53c2\u6570\u6b63\u786e\u8f7d\u5165", "\n", "ckpt_path", "=", "None", "\n", "if", "'load_path'", "in", "list", "(", "self", ".", "config", ".", "keys", "(", ")", ")", ":", "\n", "            ", "if", "self", ".", "config", "[", "'load_path'", "]", "is", "not", "None", ":", "\n", "                ", "ckpt_path", "=", "Path", "(", "self", ".", "config", "[", "'load_path'", "]", ")", "\n", "cfg_path", "=", "ckpt_path", ".", "dirname", "(", ")", "/", "'config.yaml'", "\n", "with", "open", "(", "cfg_path", ",", "'r'", ")", "as", "f", ":", "\n", "                    ", "pre_conf", "=", "yaml", ".", "load", "(", "f", ",", "Loader", "=", "yaml", ".", "FullLoader", ")", "\n", "", "self", ".", "config", "[", "'model_config'", "]", ".", "update", "(", "pre_conf", "[", "'model_config'", "]", ")", "\n", "\n", "if", "'model'", "in", "list", "(", "pre_conf", ".", "keys", "(", ")", ")", ":", "\n", "                    ", "self", ".", "config", "[", "'model'", "]", "=", "pre_conf", "[", "'model'", "]", "\n", "\n", "## set training device, and now the multi-GPU training is slow (unknown reason)", "\n", "## \u8bbe\u7f6e\u8bad\u7ec3\u8bbe\u5907\uff08CPU/GPU/multi GPU\uff09\uff0c\u76ee\u524d\u7684\u591aGPU\u8bad\u7ec3\u901f\u5ea6\u8f83\u6162\uff08\u539f\u56e0\u672a\u77e5\uff09", "\n", "", "", "", "self", ".", "set_device", "(", ")", "\n", "## set logger, create folder and save config file into the folder", "\n", "## \u8bbe\u7f6elogger\uff0c\u521b\u5efa\u8bad\u7ec3\u6587\u4ef6\u5939\u5e76\u5b58\u50a8\u914d\u7f6e\u6587\u4ef6", "\n", "self", ".", "set_folder_and_logger", "(", ")", "\n", "\n", "## model", "\n", "if", "'model'", "in", "list", "(", "self", ".", "config", ".", "keys", "(", ")", ")", ":", "\n", "            ", "tmp_model", "=", "getattr", "(", "networks", ",", "self", ".", "config", "[", "'model'", "]", ")", "\n", "self", ".", "model", "=", "tmp_model", "(", "self", ".", "config", "[", "'model_config'", "]", ",", "self", ".", "device", ",", "self", ".", "config", "[", "'no_cuda'", "]", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "model", "=", "networks", ".", "PoSFeat", "(", "self", ".", "config", "[", "'model_config'", "]", ",", "self", ".", "device", ",", "self", ".", "config", "[", "'no_cuda'", "]", ")", "\n", "", "parameters", "=", "[", "]", "\n", "for", "module_name", ",", "module_lr", "in", "zip", "(", "self", ".", "config", "[", "'optimal_modules'", "]", ",", "self", ".", "config", "[", "'optimal_lrs'", "]", ")", ":", "\n", "            ", "tmp_module", "=", "getattr", "(", "self", ".", "model", ",", "module_name", ")", "\n", "parameters", ".", "append", "(", "{", "'params'", ":", "tmp_module", ".", "parameters", "(", ")", ",", "'lr'", ":", "module_lr", "}", ")", "\n", "", "self", ".", "all_optimized_modules", "=", "self", ".", "config", "[", "'optimal_modules'", "]", "\n", "for", "module_name", "in", "self", ".", "model", ".", "modules", ":", "\n", "            ", "if", "module_name", "not", "in", "self", ".", "all_optimized_modules", ":", "\n", "                ", "tmp_module", "=", "getattr", "(", "self", ".", "model", ",", "module_name", ")", "\n", "for", "p", "in", "tmp_module", ".", "parameters", "(", ")", ":", "\n", "                    ", "p", ".", "requires_grad", "=", "False", "\n", "", "", "", "if", "ckpt_path", "is", "not", "None", ":", "\n", "            ", "self", ".", "logger", ".", "info", "(", "'load checkpoint from {}'", ".", "format", "(", "ckpt_path", ")", ")", "\n", "self", ".", "model", ".", "load_checkpoint", "(", "ckpt_path", ")", "\n", "", "if", "self", ".", "multi_gpu", ":", "\n", "            ", "self", ".", "model", ".", "set_parallel", "(", "self", ".", "args", ".", "local_rank", ")", "\n", "\n", "## losses", "\n", "", "if", "'preprocess_train'", "in", "list", "(", "self", ".", "config", ".", "keys", "(", ")", ")", ":", "\n", "            ", "tmp_model", "=", "getattr", "(", "losses", ",", "self", ".", "config", "[", "'preprocess_train'", "]", ")", "\n", "self", ".", "preprocess", "=", "tmp_model", "(", "self", ".", "config", "[", "'preprocess_train_config'", "]", ",", "self", ".", "device", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "skip_preprocess", "=", "False", "\n", "", "else", ":", "\n", "            ", "self", ".", "preprocess", "=", "losses", ".", "Preprocess_Skip", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "skip_preprocess", "=", "True", "\n", "\n", "", "self", ".", "losses", "=", "[", "]", "\n", "self", ".", "losses_weight", "=", "[", "]", "\n", "for", "loss_name", ",", "loss_weight", "in", "zip", "(", "self", ".", "config", "[", "'losses'", "]", ",", "self", ".", "config", "[", "'losses_weight'", "]", ")", ":", "\n", "            ", "loss_module", "=", "getattr", "(", "losses", ",", "loss_name", ")", "\n", "self", ".", "losses", ".", "append", "(", "loss_module", "(", "self", ".", "config", "[", "'{}_config'", ".", "format", "(", "loss_name", ")", "]", ",", "self", ".", "device", ")", ".", "to", "(", "self", ".", "device", ")", ")", "\n", "self", ".", "losses_weight", ".", "append", "(", "float", "(", "loss_weight", ")", ")", "\n", "if", "hasattr", "(", "self", ".", "losses", "[", "-", "1", "]", ",", "'load_checkpoint'", ")", ":", "\n", "                ", "if", "ckpt_path", "is", "not", "None", ":", "\n", "                    ", "self", ".", "losses", "[", "-", "1", "]", ".", "load_checkpoint", "(", "ckpt_path", ")", "\n", "# parameters += list(self.losses[-1].parameters())", "\n", "", "parameters", ".", "append", "(", "{", "'params'", ":", "self", ".", "losses", "[", "-", "1", "]", ".", "parameters", "(", ")", "}", ")", "\n", "\n", "## optimizer", "\n", "", "", "self", ".", "logger", ".", "info", "(", "parameters", ")", "\n", "self", ".", "logger", ".", "info", "(", "self", ".", "all_optimized_modules", ")", "\n", "tmp_optimizer", "=", "getattr", "(", "torch", ".", "optim", ",", "self", ".", "config", "[", "'optimizer'", "]", ")", "\n", "self", ".", "optimizer", "=", "tmp_optimizer", "(", "parameters", ")", "\n", "self", ".", "scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "StepLR", "(", "self", ".", "optimizer", ",", "\n", "step_size", "=", "self", ".", "config", "[", "'lr_decay_step'", "]", ",", "\n", "gamma", "=", "self", ".", "config", "[", "'lr_decay_factor'", "]", ")", "\n", "self", ".", "logger", ".", "info", "(", "self", ".", "config", "[", "'optimizer'", "]", ")", "\n", "\n", "##  dataloader", "\n", "dataset", "=", "getattr", "(", "datasets", ",", "self", ".", "config", "[", "'data'", "]", ")", "\n", "train_dataset", "=", "dataset", "(", "configs", "=", "self", ".", "config", "[", "'data_config_train'", "]", ",", "is_train", "=", "True", ")", "\n", "if", "self", ".", "multi_gpu", ":", "\n", "            ", "train_sampler", "=", "torch", ".", "utils", ".", "data", ".", "distributed", ".", "DistributedSampler", "(", "train_dataset", ")", "\n", "", "else", ":", "\n", "            ", "train_sampler", "=", "None", "\n", "", "self", ".", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "train_dataset", ",", "batch_size", "=", "self", ".", "config", "[", "'data_config_train'", "]", "[", "'batch_size'", "]", ",", "\n", "shuffle", "=", "~", "self", ".", "multi_gpu", ",", "num_workers", "=", "self", ".", "config", "[", "'data_config_train'", "]", "[", "'workers'", "]", ",", "\n", "collate_fn", "=", "self", ".", "my_collate", ",", "sampler", "=", "train_sampler", ")", "\n", "\n", "val_dataset", "=", "dataset", "(", "configs", "=", "self", ".", "config", "[", "'val_config'", "]", "[", "'data_config_val'", "]", ",", "is_train", "=", "False", ")", "\n", "val_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "val_dataset", ",", "batch_size", "=", "self", ".", "config", "[", "'val_config'", "]", "[", "'data_config_val'", "]", "[", "'batch_size'", "]", ",", "\n", "shuffle", "=", "self", ".", "config", "[", "'val_config'", "]", "[", "'data_config_val'", "]", "[", "'shuffle'", "]", ",", "\n", "num_workers", "=", "self", ".", "config", "[", "'val_config'", "]", "[", "'data_config_val'", "]", "[", "'workers'", "]", ",", "\n", "collate_fn", "=", "self", ".", "my_collate", ")", "\n", "val_iter", "=", "iter", "(", "putils", ".", "cycle", "(", "val_loader", ")", ")", "\n", "self", ".", "val_data", "=", "next", "(", "val_iter", ")", "\n", "del", "val_dataset", ",", "val_loader", ",", "val_iter", "\n", "with", "open", "(", "self", ".", "save_root", "/", "'val_data.npz'", ",", "'wb'", ")", "as", "out_f", ":", "\n", "            ", "np", ".", "savez", "(", "out_f", ",", "val_data", "=", "self", ".", "val_data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.managers.trainer.Trainer.my_collate": [[147, 151], ["list", "torch.utils.data.dataloader.default_collate", "torch.utils.data.dataloader.default_collate", "torch.utils.data.dataloader.default_collate", "torch.utils.data.dataloader.default_collate", "torch.utils.data.dataloader.default_collate", "torch.utils.data.dataloader.default_collate", "torch.utils.data.dataloader.default_collate", "torch.utils.data.dataloader.default_collate", "torch.utils.data.dataloader.default_collate", "filter"], "methods", ["None"], ["", "", "def", "my_collate", "(", "self", ",", "batch", ")", ":", "\n", "        ", "''' Puts each data field into a tensor with outer dimension batch size '''", "\n", "batch", "=", "list", "(", "filter", "(", "lambda", "b", ":", "b", "is", "not", "None", ",", "batch", ")", ")", "\n", "return", "torch", ".", "utils", ".", "data", ".", "dataloader", ".", "default_collate", "(", "batch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.managers.trainer.Trainer.set_device": [[152, 174], ["torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "print", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "print", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.init_process_group", "torch.init_process_group", "torch.init_process_group", "print", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count"], "methods", ["None"], ["", "def", "set_device", "(", "self", ")", ":", "\n", "        ", "if", "torch", ".", "cuda", ".", "device_count", "(", ")", "==", "0", ":", "\n", "            ", "self", ".", "device", "=", "torch", ".", "device", "(", "\"cpu\"", ")", "\n", "self", ".", "output_flag", "=", "True", "\n", "self", ".", "multi_gpu", "=", "False", "\n", "print", "(", "'use CPU for training'", ")", "\n", "", "elif", "torch", ".", "cuda", ".", "device_count", "(", ")", "==", "1", ":", "\n", "            ", "self", ".", "device", "=", "torch", ".", "device", "(", "\"cuda\"", ")", "\n", "self", ".", "output_flag", "=", "True", "\n", "self", ".", "multi_gpu", "=", "False", "\n", "self", ".", "args", ".", "local_rank", "=", "0", "\n", "print", "(", "'use a single GPU for training'", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "device", "=", "torch", ".", "device", "(", "\"cuda\"", ",", "self", ".", "args", ".", "local_rank", ")", "\n", "self", ".", "multi_gpu", "=", "True", "\n", "dist", ".", "init_process_group", "(", "backend", "=", "'nccl'", ")", "\n", "# torch.autograd.set_detect_anomaly(True) # for debug", "\n", "if", "self", ".", "args", ".", "local_rank", "==", "0", ":", "\n", "                ", "self", ".", "output_flag", "=", "True", "\n", "print", "(", "'use {} GPUs for training'", ".", "format", "(", "torch", ".", "cuda", ".", "device_count", "(", ")", ")", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "output_flag", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.managers.trainer.Trainer.set_folder_and_logger": [[175, 250], ["logging.getLogger", "range", "logging.Formatter", "ColoredFormatter", "trainer.Trainer.logger.addHandler", "trainer.Trainer.logger.addHandler", "print", "trainer.Trainer.logfile.touch", "torch.utils.tensorboard.SummaryWriter", "torch.utils.tensorboard.SummaryWriter", "torch.utils.tensorboard.SummaryWriter", "trainer.Trainer.set_folder_and_logger.formatter_message"], "methods", ["None"], ["", "", "", "def", "set_folder_and_logger", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "output_flag", ":", "\n", "            ", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "save_root", ")", ":", "\n", "                ", "self", ".", "save_root", ".", "makedirs_p", "(", ")", "\n", "", "else", ":", "\n", "# if path exsists, quit to make sure that the previous setting.txt would not be overwritten", "\n", "# \u5982\u679c\u8def\u5f84\u5df2\u5b58\u5728\uff0c\u9000\u51fa\u8bad\u7ec3\u4fdd\u8bc1\u4e4b\u95f4\u7684\u914d\u7f6e\u6587\u4ef6\u4e0d\u4f1a\u88ab\u8986\u76d6", "\n", "                ", "raise", "\"The save path is already exists, please update the folder name\"", "\n", "", "print", "(", "'=> will save everything to {}'", ".", "format", "(", "self", ".", "save_root", ")", ")", "\n", "with", "open", "(", "self", ".", "save_root", "/", "'config.yaml'", ",", "'w'", ")", "as", "fout", ":", "\n", "                ", "yaml", ".", "dump", "(", "self", ".", "config", ",", "fout", ")", "\n", "", "self", ".", "logfile", ".", "touch", "(", ")", "\n", "\n", "self", ".", "writer", "=", "SummaryWriter", "(", "self", ".", "save_root", ")", "\n", "\n", "", "self", ".", "logger", "=", "logging", ".", "getLogger", "(", ")", "\n", "\n", "# color settings", "\n", "BLACK", ",", "RED", ",", "GREEN", ",", "YELLOW", ",", "BLUE", ",", "MAGENTA", ",", "CYAN", ",", "WHITE", "=", "range", "(", "8", ")", "\n", "RESET_SEQ", "=", "\"\\033[0m\"", "\n", "COLOR_SEQ", "=", "\"\\033[1;%dm\"", "\n", "BOLD_SEQ", "=", "\"\\033[1m\"", "\n", "\n", "def", "formatter_message", "(", "message", ",", "use_color", "=", "True", ")", ":", "\n", "            ", "if", "use_color", ":", "\n", "                ", "message", "=", "message", ".", "replace", "(", "\"$RESET\"", ",", "RESET_SEQ", ")", ".", "replace", "(", "\"$BOLD\"", ",", "BOLD_SEQ", ")", "\n", "", "else", ":", "\n", "                ", "message", "=", "message", ".", "replace", "(", "\"$RESET\"", ",", "\"\"", ")", ".", "replace", "(", "\"$BOLD\"", ",", "\"\"", ")", "\n", "", "return", "message", "\n", "\n", "", "COLORS", "=", "{", "\n", "'WARNING'", ":", "YELLOW", ",", "\n", "'INFO'", ":", "CYAN", ",", "\n", "'DEBUG'", ":", "BLUE", ",", "\n", "'CRITICAL'", ":", "YELLOW", ",", "\n", "'ERROR'", ":", "RED", "\n", "}", "\n", "\n", "class", "ColoredFormatter", "(", "logging", ".", "Formatter", ")", ":", "\n", "            ", "def", "__init__", "(", "self", ",", "msg", ",", "use_color", "=", "True", ")", ":", "\n", "                ", "logging", ".", "Formatter", ".", "__init__", "(", "self", ",", "msg", ")", "\n", "self", ".", "use_color", "=", "use_color", "\n", "\n", "", "def", "format", "(", "self", ",", "record", ")", ":", "\n", "                ", "levelname", "=", "record", ".", "levelname", "\n", "if", "self", ".", "use_color", "and", "levelname", "in", "COLORS", ":", "\n", "                    ", "levelname_color", "=", "COLOR_SEQ", "%", "(", "30", "+", "COLORS", "[", "levelname", "]", ")", "+", "levelname", "+", "RESET_SEQ", "\n", "record", ".", "levelname", "=", "levelname_color", "\n", "", "return", "logging", ".", "Formatter", ".", "format", "(", "self", ",", "record", ")", "\n", "\n", "", "", "msg", "=", "\"%(asctime)s-gpu {}-%(levelname)s: %(message)s\"", ".", "format", "(", "self", ".", "args", ".", "local_rank", ")", "\n", "formatter", "=", "logging", ".", "Formatter", "(", "msg", ")", "\n", "color_formatter", "=", "ColoredFormatter", "(", "formatter_message", "(", "msg", ",", "True", ")", ")", "\n", "\n", "if", "self", ".", "output_flag", ":", "\n", "            ", "self", ".", "logger", ".", "setLevel", "(", "logging", ".", "INFO", ")", "\n", "fh", "=", "logging", ".", "FileHandler", "(", "self", ".", "logfile", ",", "mode", "=", "'a'", ")", "\n", "fh", ".", "setLevel", "(", "logging", ".", "DEBUG", ")", "\n", "fh", ".", "setFormatter", "(", "formatter", ")", "\n", "\n", "ch", "=", "TqdmHandler", "(", ")", "\n", "ch", ".", "setLevel", "(", "logging", ".", "INFO", ")", "\n", "ch", ".", "setFormatter", "(", "color_formatter", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "logger", ".", "setLevel", "(", "logging", ".", "ERROR", ")", "\n", "fh", "=", "logging", ".", "FileHandler", "(", "self", ".", "logfile", ",", "mode", "=", "'a'", ")", "\n", "fh", ".", "setLevel", "(", "logging", ".", "ERROR", ")", "\n", "fh", ".", "setFormatter", "(", "formatter", ")", "\n", "\n", "ch", "=", "TqdmHandler", "(", ")", "\n", "ch", ".", "setLevel", "(", "logging", ".", "ERROR", ")", "\n", "ch", ".", "setFormatter", "(", "color_formatter", ")", "\n", "\n", "", "self", ".", "logger", ".", "addHandler", "(", "fh", ")", "\n", "self", ".", "logger", ".", "addHandler", "(", "ch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.managers.trainer.Trainer.save_errors": [[251, 256], ["os.path.exists", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save"], "methods", ["None"], ["", "def", "save_errors", "(", "self", ",", "inputs", ",", "outputs", ",", "losses", ",", "loss_items", ")", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "save_root", "/", "\"error.pt\"", ")", ":", "\n", "            ", "save_dict", "=", "{", "\"inputs\"", ":", "inputs", ",", "\"outputs\"", ":", "outputs", ",", "\n", "\"losses\"", ":", "losses", ",", "\"loss_items\"", ":", "loss_items", "}", "\n", "torch", ".", "save", "(", "save_dict", ",", "self", ".", "save_root", "/", "\"error.pt\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.managers.trainer.Trainer.save_loss": [[257, 262], ["path.Path", "range", "len", "hasattr", "trainer.Trainer.losses[].save_checkpoint"], "methods", ["home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.networks.PoSFeat_model.PoSFeat.save_checkpoint"], ["", "", "def", "save_loss", "(", "self", ",", "save_path", ")", ":", "\n", "        ", "save_path", "=", "Path", "(", "save_path", ")", "\n", "for", "idx", "in", "range", "(", "len", "(", "self", ".", "config", "[", "'losses'", "]", ")", ")", ":", "\n", "            ", "if", "hasattr", "(", "self", ".", "losses", "[", "idx", "]", ",", "'save_checkpoint'", ")", ":", "\n", "                ", "self", ".", "losses", "[", "idx", "]", ".", "save_checkpoint", "(", "save_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.managers.trainer.Trainer.train": [[263, 379], ["epoch_path.makedirs_p", "trainer.Trainer.model.save_checkpoint", "trainer.Trainer.save_loss", "range", "epoch_path.makedirs_p", "range", "tqdm.tqdm.tqdm", "tqdm.tqdm.tqdm.set_description", "trainer.Trainer.model.set_train", "enumerate", "trainer.Trainer.model.save_checkpoint", "trainer.Trainer.save_loss", "trainer.Trainer.scheduler.step", "batch_path.makedirs_p", "batch_path_list.append", "len", "trainer.Trainer.model.set_eval", "trainer.Trainer.model.set_eval", "trainer.Trainer.model.forward", "int", "trainer.Trainer.preprocess", "zip", "total_loss.isnan", "trainer.Trainer.optimizer.zero_grad", "total_loss.backward", "trainer.Trainer.optimizer.step", "trainer.Trainer.logger.info", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "int", "trainer.Trainer.val_and_vis", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "getattr", "getattr.train", "loss_module", "tmp_loss.detach().mean().item", "tmp_items.items", "loss_items.append", "trainer.Trainer.logger.info", "trainer.Trainer.logger.error", "trainer.Trainer.save_errors", "total_loss.backward", "trainer.Trainer.optimizer.zero_grad", "trainer.Trainer.logger.info", "trainer.Trainer.logger.info", "trainer.Trainer.logger.info", "trainer.Trainer.writer.add_scalar", "trainer.Trainer.model.save_checkpoint", "tmp_loss.mean", "tmp_loss.detach().mean().item", "trainer.Trainer.model.localheader.conv1.weight.grad.mean().item", "trainer.Trainer.model.localheader.conv1.weight.grad.max().item", "trainer.Trainer.model.backbone.conv_fine.conv.weight.grad.mean().item", "trainer.Trainer.model.backbone.conv_fine.conv.weight.grad.max().item", "trainer.Trainer.model.backbone.firstconv.weight.grad.mean().item", "trainer.Trainer.model.backbone.firstconv.weight.grad.max().item", "getattr", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "trainer.Trainer.logger.info", "trainer.Trainer.logger.info", "total_loss.item", "int", "trainer.Trainer.writer.add_scalar", "list", "tmp_loss.detach().mean", "tmp_loss.detach().mean().item", "val.detach().mean().item", "getattr.parameters", "trainer.Trainer.model.localheader.conv1.weight.grad.mean().item", "trainer.Trainer.model.localheader.conv1.weight.grad.max().item", "trainer.Trainer.model.backbone.firstconv.weight.grad.mean().item", "trainer.Trainer.model.backbone.firstconv.weight.grad.max().item", "int", "components.keys", "tmp_loss.detach().mean", "trainer.Trainer.model.localheader.conv1.weight.grad.mean", "trainer.Trainer.model.localheader.conv1.weight.grad.max", "trainer.Trainer.model.backbone.conv_fine.conv.weight.grad.mean", "trainer.Trainer.model.backbone.conv_fine.conv.weight.grad.max", "trainer.Trainer.model.backbone.firstconv.weight.grad.mean", "trainer.Trainer.model.backbone.firstconv.weight.grad.max", "trainer.Trainer.writer.add_scalar", "tmp_loss.detach", "tmp_loss.detach().mean", "val.detach().mean", "trainer.Trainer.model.localheader.conv1.weight.grad.mean", "trainer.Trainer.model.localheader.conv1.weight.grad.max", "trainer.Trainer.model.backbone.firstconv.weight.grad.mean", "trainer.Trainer.model.backbone.firstconv.weight.grad.max", "int", "tmp_loss.detach", "tmp_loss.detach", "val.detach"], "methods", ["home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.networks.PoSFeat_model.PoSFeat.save_checkpoint", "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.managers.trainer.Trainer.save_loss", "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.networks.PoSFeat_model.PoSFeat.set_train", "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.networks.PoSFeat_model.PoSFeat.save_checkpoint", "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.managers.trainer.Trainer.save_loss", "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.networks.PoSFeat_model.PoSFeat.set_eval", "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.networks.PoSFeat_model.PoSFeat.set_eval", "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.losses.preprocess.Preprocess_Skip.forward", "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.managers.trainer.Trainer.val_and_vis", "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.managers.trainer.Trainer.train", "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.managers.trainer.Trainer.save_errors", "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.networks.PoSFeat_model.PoSFeat.save_checkpoint"], ["", "", "", "def", "train", "(", "self", ")", ":", "\n", "        ", "batch_size_val", "=", "self", ".", "val_data", "[", "'im1'", "]", ".", "shape", "[", "0", "]", "\n", "epoch_path", "=", "self", ".", "save_root", "/", "'{:>03d}'", ".", "format", "(", "0", ")", "\n", "epoch_path", ".", "makedirs_p", "(", ")", "\n", "self", ".", "model", ".", "save_checkpoint", "(", "epoch_path", ")", "\n", "self", ".", "save_loss", "(", "epoch_path", ")", "\n", "\n", "for", "epoch", "in", "range", "(", "self", ".", "config", "[", "'epoch'", "]", ")", ":", "\n", "            ", "epoch", "+=", "1", "\n", "epoch_path", "=", "self", ".", "save_root", "/", "'{:>03d}'", ".", "format", "(", "epoch", ")", "\n", "epoch_path", ".", "makedirs_p", "(", ")", "\n", "batch_path_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "batch_size_val", ")", ":", "\n", "                ", "batch_path", "=", "epoch_path", "/", "'{}'", ".", "format", "(", "i", ")", "\n", "batch_path", ".", "makedirs_p", "(", ")", "\n", "batch_path_list", ".", "append", "(", "batch_path", ")", "\n", "", "if", "self", ".", "config", "[", "'epoch_step'", "]", ">", "0", ":", "\n", "                ", "total_steps", "=", "self", ".", "config", "[", "'epoch_step'", "]", "\n", "", "else", ":", "\n", "                ", "total_steps", "=", "len", "(", "self", ".", "train_loader", ")", "\n", "", "bar", "=", "tqdm", "(", "self", ".", "train_loader", ",", "total", "=", "int", "(", "total_steps", ")", ",", "ncols", "=", "80", ")", "\n", "bar", ".", "set_description", "(", "'{}/{} {}/{}'", ".", "format", "(", "self", ".", "config", "[", "'checkpoint_name'", "]", ",", "self", ".", "save_root", ".", "name", ",", "epoch", ",", "self", ".", "config", "[", "'epoch'", "]", ")", ")", "\n", "self", ".", "model", ".", "set_train", "(", ")", "\n", "for", "idx", ",", "inputs", "in", "enumerate", "(", "bar", ")", ":", "\n", "# val and vis", "\n", "                ", "self", ".", "model", ".", "set_eval", "(", ")", "\n", "if", "self", ".", "output_flag", "and", "idx", "%", "self", ".", "config", "[", "'log_freq'", "]", "==", "0", ":", "\n", "                    ", "self", ".", "val_and_vis", "(", "batch_path_list", ",", "idx", ")", "\n", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "# train", "\n", "", "self", ".", "model", ".", "set_eval", "(", ")", "\n", "for", "module", "in", "self", ".", "config", "[", "'optimal_modules'", "]", ":", "\n", "                    ", "tmp_module", "=", "getattr", "(", "self", ".", "model", ",", "module", ")", "\n", "tmp_module", ".", "train", "(", ")", "\n", "", "outputs", "=", "self", ".", "model", ".", "forward", "(", "inputs", ")", "\n", "outputs", "[", "'epoch'", "]", "=", "epoch", "\n", "outputs", "[", "'iterations'", "]", "=", "int", "(", "(", "epoch", "-", "1", ")", "*", "total_steps", "+", "idx", ")", "\n", "processed", "=", "self", ".", "preprocess", "(", "inputs", ",", "outputs", ")", "\n", "if", "self", ".", "skip_preprocess", ":", "\n", "                    ", "message", "=", "\"epoch {} batch {}\"", ".", "format", "(", "epoch", ",", "idx", ")", "\n", "", "else", ":", "\n", "                    ", "message", "=", "\"epoch {} batch {} temperature {}\"", ".", "format", "(", "epoch", ",", "idx", ",", "processed", "[", "'temperature'", "]", ")", "\n", "", "total_loss", "=", "0", "\n", "loss_items", "=", "[", "]", "\n", "temp_log", "=", "{", "}", "\n", "for", "loss_name", ",", "loss_module", ",", "loss_weight", "in", "zip", "(", "self", ".", "config", "[", "'losses'", "]", ",", "self", ".", "losses", ",", "self", ".", "losses_weight", ")", ":", "\n", "                    ", "tmp_loss", ",", "tmp_items", "=", "loss_module", "(", "inputs", ",", "outputs", ",", "processed", ")", "\n", "total_loss", "+=", "loss_weight", "*", "tmp_loss", ".", "mean", "(", ")", "\n", "temp_log", "[", "loss_name", "]", "=", "tmp_loss", ".", "detach", "(", ")", ".", "mean", "(", ")", ".", "item", "(", ")", "\n", "message", "+=", "\"\\n  {}:{:.5f}[{:.2f}] (total: {:.5f} \"", ".", "format", "(", "loss_name", ",", "loss_weight", "*", "tmp_loss", ".", "detach", "(", ")", ".", "mean", "(", ")", ".", "item", "(", ")", ",", "loss_weight", ",", "\n", "tmp_loss", ".", "detach", "(", ")", ".", "mean", "(", ")", ".", "item", "(", ")", ")", "\n", "for", "key", ",", "val", "in", "tmp_items", ".", "items", "(", ")", ":", "\n", "                        ", "message", "+=", "\"{}[{:.5f}] \"", ".", "format", "(", "key", ",", "val", ".", "detach", "(", ")", ".", "mean", "(", ")", ".", "item", "(", ")", ")", "\n", "", "message", "+=", "\")\"", "\n", "loss_items", ".", "append", "(", "tmp_items", ")", "\n", "", "message", "+=", "'\\n'", "\n", "\n", "# if the loss is nan, skip this batch", "\n", "# \u5982\u679closs\u662fnan\uff0c\u5219\u8df3\u8fc7\u5f53\u524dbatch", "\n", "if", "total_loss", ".", "isnan", "(", ")", ":", "\n", "                    ", "self", ".", "logger", ".", "info", "(", "message", ")", "\n", "self", ".", "logger", ".", "error", "(", "\"loss is nan in {}, check the error.pt\"", ".", "format", "(", "idx", ")", ")", "\n", "self", ".", "save_errors", "(", "inputs", ",", "outputs", ",", "total_loss", ",", "loss_items", ")", "\n", "total_loss", ".", "backward", "(", ")", "\n", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "continue", "\n", "\n", "", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "total_loss", ".", "backward", "(", ")", "\n", "\n", "if", "'localheader'", "in", "self", ".", "all_optimized_modules", ":", "\n", "                    ", "grad_message", "=", "'grad localheader conv1 mean {:.6f} max{:.6f}'", ".", "format", "(", "self", ".", "model", ".", "localheader", ".", "conv1", ".", "weight", ".", "grad", ".", "mean", "(", ")", ".", "item", "(", ")", ",", "\n", "self", ".", "model", ".", "localheader", ".", "conv1", ".", "weight", ".", "grad", ".", "max", "(", ")", ".", "item", "(", ")", ")", "\n", "self", ".", "logger", ".", "info", "(", "grad_message", ")", "\n", "", "if", "'backbone'", "in", "self", ".", "all_optimized_modules", ":", "\n", "                    ", "grad_message", "=", "'grad backbone conv_fine mean {:.6f} max{:.6f}'", ".", "format", "(", "self", ".", "model", ".", "backbone", ".", "conv_fine", ".", "conv", ".", "weight", ".", "grad", ".", "mean", "(", ")", ".", "item", "(", ")", ",", "\n", "self", ".", "model", ".", "backbone", ".", "conv_fine", ".", "conv", ".", "weight", ".", "grad", ".", "max", "(", ")", ".", "item", "(", ")", ")", "\n", "self", ".", "logger", ".", "info", "(", "grad_message", ")", "\n", "grad_message", "=", "'grad backbone firstconv mean {:.6f} max{:.6f}'", ".", "format", "(", "self", ".", "model", ".", "backbone", ".", "firstconv", ".", "weight", ".", "grad", ".", "mean", "(", ")", ".", "item", "(", ")", ",", "\n", "self", ".", "model", ".", "backbone", ".", "firstconv", ".", "weight", ".", "grad", ".", "max", "(", ")", ".", "item", "(", ")", ")", "\n", "self", ".", "logger", ".", "info", "(", "grad_message", ")", "\n", "", "if", "self", ".", "config", "[", "'grad_clip'", "]", ":", "\n", "                    ", "for", "module_name", "in", "self", ".", "all_optimized_modules", ":", "\n", "                        ", "tmp_module", "=", "getattr", "(", "self", ".", "model", ",", "module_name", ")", "\n", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "tmp_module", ".", "parameters", "(", ")", ",", "self", ".", "config", "[", "'clip_norm'", "]", ")", "\n", "", "if", "'localheader'", "in", "self", ".", "all_optimized_modules", ":", "\n", "                        ", "grad_message", "=", "'grad clipped localheader conv1 mean {:.6f} max{:.6f}'", ".", "format", "(", "self", ".", "model", ".", "localheader", ".", "conv1", ".", "weight", ".", "grad", ".", "mean", "(", ")", ".", "item", "(", ")", ",", "\n", "self", ".", "model", ".", "localheader", ".", "conv1", ".", "weight", ".", "grad", ".", "max", "(", ")", ".", "item", "(", ")", ")", "\n", "self", ".", "logger", ".", "info", "(", "grad_message", ")", "\n", "", "if", "'backbone'", "in", "self", ".", "all_optimized_modules", ":", "\n", "                        ", "grad_message", "=", "'grad clipped backbone firstconv mean {:.6f} max{:.6f}'", ".", "format", "(", "self", ".", "model", ".", "backbone", ".", "firstconv", ".", "weight", ".", "grad", ".", "mean", "(", ")", ".", "item", "(", ")", ",", "\n", "self", ".", "model", ".", "backbone", ".", "firstconv", ".", "weight", ".", "grad", ".", "max", "(", ")", ".", "item", "(", ")", ")", "\n", "self", ".", "logger", ".", "info", "(", "grad_message", ")", "\n", "", "", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "\n", "self", ".", "logger", ".", "info", "(", "message", ")", "\n", "if", "self", ".", "output_flag", "and", "idx", "%", "self", ".", "config", "[", "'log_freq'", "]", "==", "0", ":", "\n", "                    ", "self", ".", "writer", ".", "add_scalar", "(", "'losses'", ",", "total_loss", ".", "item", "(", ")", ",", "int", "(", "(", "epoch", "-", "1", ")", "*", "total_steps", "+", "idx", ")", ")", "\n", "for", "loss_name", "in", "self", ".", "config", "[", "'losses'", "]", ":", "\n", "                        ", "self", ".", "writer", ".", "add_scalar", "(", "loss_name", ",", "temp_log", "[", "loss_name", "]", ",", "int", "(", "(", "epoch", "-", "1", ")", "*", "total_steps", "+", "idx", ")", ")", "\n", "", "for", "components", "in", "loss_items", ":", "\n", "                        ", "for", "component_name", "in", "list", "(", "components", ".", "keys", "(", ")", ")", ":", "\n", "                            ", "if", "component_name", "in", "self", ".", "config", "[", "'tb_component'", "]", ":", "\n", "                                ", "self", ".", "writer", ".", "add_scalar", "(", "component_name", ",", "components", "[", "component_name", "]", ",", "int", "(", "(", "epoch", "-", "1", ")", "*", "total_steps", "+", "idx", ")", ")", "\n", "", "", "", "", "if", "self", ".", "output_flag", "and", "idx", "%", "100", "==", "0", ":", "\n", "                    ", "self", ".", "model", ".", "save_checkpoint", "(", "epoch_path", ")", "\n", "\n", "", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "\n", "if", "idx", ">=", "self", ".", "config", "[", "'epoch_step'", "]", ":", "\n", "                    ", "break", "\n", "\n", "\n", "", "", "self", ".", "model", ".", "save_checkpoint", "(", "epoch_path", ")", "\n", "self", ".", "save_loss", "(", "epoch_path", ")", "\n", "self", ".", "scheduler", ".", "step", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.managers.trainer.Trainer.val_and_vis": [[380, 545], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "trainer.Trainer.model.set_eval", "trainer.Trainer.model.forward", "enumerate", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "losses.sample_feat_by_coord().squeeze", "losses.sample_feat_by_coord().squeeze", "losses.sample_feat_by_coord().squeeze", "losses.sample_feat_by_coord().squeeze", "losses.mnn_matcher", "losses.mnn_matcher", "cur_kpscore.topk", "losses.homogenize().transpose", "losses.homogenize().transpose", "losses.homogenize().transpose", "losses.homogenize().transpose", "torch.abs().unsqueeze", "torch.abs().unsqueeze", "torch.abs().unsqueeze", "torch.abs().unsqueeze", "torch.abs().unsqueeze", "torch.abs().unsqueeze", "torch.abs().unsqueeze", "torch.abs().unsqueeze", "torch.abs().unsqueeze", "epi_dist.clamp().repeat.clamp().repeat.clamp().repeat", "[].transpose", "cv2.cvtColor().squeeze", "list", "list", "list", "list", "list", "list", "list", "list", "comb_img.cpu().numpy.cpu().numpy.cpu().numpy", "PIL.Image.fromarray", "PIL.Image.fromarray.save", "[].transpose", "PIL.Image.fromarray", "PIL.Image.fromarray.save", "cv2.cvtColor", "cv2.cvtColor", "PIL.Image.fromarray", "PIL.Image.fromarray.save", "cv2.cvtColor", "zip", "cv2.cvtColor", "PIL.Image.fromarray", "PIL.Image.fromarray.save", "cv2.cvtColor", "zip", "cv2.cvtColor", "PIL.Image.fromarray", "PIL.Image.fromarray.save", "cv2.cvtColor", "zip", "cv2.cvtColor", "PIL.Image.fromarray", "PIL.Image.fromarray.save", "losses.normalize_coords().unsqueeze", "losses.normalize_coords().unsqueeze", "losses.normalize_coords().unsqueeze", "losses.normalize_coords().unsqueeze", "getattr", "getattr.", "getattr.", "losses.denormalize_coords().squeeze", "losses.denormalize_coords().squeeze", "losses.denormalize_coords().squeeze", "losses.denormalize_coords().squeeze", "cur_score1.squeeze.squeeze.squeeze", "cur_score2.squeeze.squeeze.squeeze", "cur_kpscore_m2.to", "min", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "map", "map", "map", "map", "map", "map", "map", "map", "PIL.Image.fromarray.astype", "PIL.Image.fromarray.astype", "cv2.circle", "cv2.circle", "PIL.Image.fromarray.astype", "cv2.circle", "cv2.circle", "PIL.Image.fromarray.astype", "cv2.line", "cv2.circle", "cv2.circle", "PIL.Image.fromarray.astype", "cv2.line", "cv2.circle", "cv2.circle", "PIL.Image.fromarray.astype", "tmp_path.exists", "tmp_path.makedirs_p", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "losses.sample_feat_by_coord", "losses.sample_feat_by_coord", "losses.sample_feat_by_coord", "losses.sample_feat_by_coord", "losses.homogenize", "losses.homogenize", "losses.homogenize", "losses.homogenize", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "epi_dist.clamp().repeat.clamp().repeat.clamp", "cv2.cvtColor", "losses.denormalize_coords().squeeze.reshape().cpu().numpy", "losses.denormalize_coords().squeeze.reshape().cpu().numpy", "list.reshape().cpu().numpy", "list.reshape().cpu().numpy", "list.reshape().cpu().numpy", "list.reshape().cpu().numpy", "comb_img.cpu().numpy.cpu().numpy.cpu", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "losses.normalize_coords", "losses.normalize_coords", "losses.normalize_coords", "losses.normalize_coords", "losses.denormalize_coords", "losses.denormalize_coords", "losses.denormalize_coords", "losses.denormalize_coords", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "datasets.tensor2array", "datasets.tensor2array", "datasets.tensor2array", "datasets.tensor2array", "topk_idx.cpu().numpy", "losses.denormalize_coords().squeeze.reshape().cpu", "losses.denormalize_coords().squeeze.reshape().cpu", "list.reshape().cpu", "list.reshape().cpu", "list.reshape().cpu", "list.reshape().cpu", "[].transpose.squeeze", "topk_idx.cpu", "losses.denormalize_coords().squeeze.reshape", "losses.denormalize_coords().squeeze.reshape", "list.reshape", "list.reshape", "list.reshape", "list.reshape"], "methods", ["home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.networks.PoSFeat_model.PoSFeat.set_eval", "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.losses.preprocess.Preprocess_Skip.forward", "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.losses.preprocess_utils.mnn_matcher", "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.losses.preprocess_utils.mnn_matcher", "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.losses.preprocess_utils.sample_feat_by_coord", "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.losses.preprocess_utils.sample_feat_by_coord", "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.losses.preprocess_utils.sample_feat_by_coord", "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.losses.preprocess_utils.sample_feat_by_coord", "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.losses.preprocess_utils.homogenize", "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.losses.preprocess_utils.homogenize", "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.losses.preprocess_utils.homogenize", "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.losses.preprocess_utils.homogenize", "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.losses.preprocess_utils.normalize_coords", "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.losses.preprocess_utils.normalize_coords", "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.losses.preprocess_utils.normalize_coords", "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.losses.preprocess_utils.normalize_coords", "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.losses.preprocess_utils.denormalize_coords", "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.losses.preprocess_utils.denormalize_coords", "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.losses.preprocess_utils.denormalize_coords", "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.losses.preprocess_utils.denormalize_coords", "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.datasets.data_utils.tensor2array", "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.datasets.data_utils.tensor2array", "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.datasets.data_utils.tensor2array", "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.datasets.data_utils.tensor2array"], ["", "", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "val_and_vis", "(", "self", ",", "batch_path_list", ",", "idx", ")", ":", "\n", "        ", "val_config", "=", "self", ".", "config", "[", "'val_config'", "]", "\n", "self", ".", "model", ".", "set_eval", "(", ")", "\n", "outputs", "=", "self", ".", "model", ".", "forward", "(", "self", ".", "val_data", ")", "\n", "mid_pad", "=", "20", "\n", "\n", "preds1", "=", "outputs", "[", "'preds1'", "]", "\n", "preds2", "=", "outputs", "[", "'preds2'", "]", "\n", "\n", "b", ",", "c", ",", "h", ",", "w", "=", "self", ".", "val_data", "[", "'im1'", "]", ".", "shape", "\n", "\n", "all_images", "=", "[", "'0_original_images'", ",", "'1_score_maps'", ",", "'2_all_keypoints'", ",", "\n", "'3_matched_keypoints'", ",", "'4_matches_less'", ",", "'5_matches_all'", "]", "\n", "\n", "# if val_config['detector'] == 'sift':", "\n", "#     coord1 = self.val_data['coord1']", "\n", "#     coord2 = self.val_data['coord2']", "\n", "\n", "#     coord1_n = putils.normalize_coords(coord1, h, w)", "\n", "#     coord2_n = putils.normalize_coords(coord2, h, w)", "\n", "# else:", "\n", "#     detector = getattr(putils, val_config['detector'])", "\n", "#     coord1_n = detector(preds1['local_point'], **val_config['detector_config'])", "\n", "#     coord2_n = detector(preds2['local_point'], **val_config['detector_config'])", "\n", "\n", "#     coord1 = putils.denormalize_coords(coord1_n, h, w)", "\n", "#     coord2 = putils.denormalize_coords(coord2_n, h, w)", "\n", "\n", "# desc1 = putils.sample_feat_by_coord(preds1['local_map'], coord1_n, val_config['loss_distance']=='cos')", "\n", "# desc2 = putils.sample_feat_by_coord(preds2['local_map'], coord1_n, val_config['loss_distance']=='cos')", "\n", "\n", "for", "i", ",", "cur_path", "in", "enumerate", "(", "batch_path_list", ")", ":", "\n", "            ", "for", "image_folder", "in", "all_images", ":", "\n", "                ", "tmp_path", "=", "cur_path", "/", "image_folder", "\n", "if", "not", "tmp_path", ".", "exists", "(", ")", ":", "\n", "                    ", "tmp_path", ".", "makedirs_p", "(", ")", "\n", "", "", "cur_img1", "=", "self", ".", "val_data", "[", "'im1_ori'", "]", "[", "i", ",", "...", "]", "\n", "cur_img2", "=", "self", ".", "val_data", "[", "'im2_ori'", "]", "[", "i", ",", "...", "]", "\n", "cur_F12", "=", "self", ".", "val_data", "[", "'F1'", "]", "[", "i", ",", "...", "]", "\n", "score_map1", "=", "preds1", "[", "'local_point'", "]", "[", "i", ",", "...", "]", "\n", "score_map2", "=", "preds2", "[", "'local_point'", "]", "[", "i", ",", "...", "]", "\n", "comb_img", "=", "torch", ".", "cat", "(", "(", "cur_img1", ",", "torch", ".", "zeros_like", "(", "cur_img1", ")", "[", ":", ",", ":", "mid_pad", ",", ":", "]", ",", "cur_img2", ")", ",", "dim", "=", "1", ")", "\n", "comb_score", "=", "torch", ".", "cat", "(", "(", "score_map1", ",", "torch", ".", "zeros_like", "(", "score_map1", ")", "[", ":", ",", ":", ",", ":", "mid_pad", "]", ",", "score_map2", ")", ",", "dim", "=", "2", ")", "\n", "\n", "if", "val_config", "[", "'detector'", "]", "==", "'sift'", ":", "\n", "                ", "cur_kps1", "=", "self", ".", "val_data", "[", "'coord1'", "]", "[", "i", ",", ":", ",", ":", "2", "]", "\n", "cur_kps2", "=", "self", ".", "val_data", "[", "'coord2'", "]", "[", "i", ",", ":", ",", ":", "2", "]", "\n", "cur_score1", "=", "torch", ".", "ones_like", "(", "cur_kps1", ")", "[", "...", ",", "0", ":", "1", "]", "\n", "cur_score2", "=", "torch", ".", "ones_like", "(", "cur_kps2", ")", "[", "...", ",", "0", ":", "1", "]", "\n", "\n", "cur_kps1_n", "=", "putils", ".", "normalize_coords", "(", "cur_kps1", ",", "h", ",", "w", ")", ".", "unsqueeze", "(", "0", ")", "\n", "cur_kps2_n", "=", "putils", ".", "normalize_coords", "(", "cur_kps2", ",", "h", ",", "w", ")", ".", "unsqueeze", "(", "0", ")", "\n", "", "else", ":", "\n", "                ", "detector", "=", "getattr", "(", "putils", ",", "val_config", "[", "'detector'", "]", ")", "\n", "cur_kps1_n", ",", "cur_score1", "=", "detector", "(", "preds1", "[", "'local_point'", "]", "[", "i", ":", "i", "+", "1", ",", "...", "]", ",", "\n", "**", "val_config", "[", "'detector_config'", "]", ")", "\n", "cur_kps2_n", ",", "cur_score2", "=", "detector", "(", "preds2", "[", "'local_point'", "]", "[", "i", ":", "i", "+", "1", ",", "...", "]", ",", "\n", "**", "val_config", "[", "'detector_config'", "]", ")", "\n", "\n", "cur_kps1", "=", "putils", ".", "denormalize_coords", "(", "cur_kps1_n", ",", "h", ",", "w", ")", ".", "squeeze", "(", "0", ")", "\n", "cur_kps2", "=", "putils", ".", "denormalize_coords", "(", "cur_kps2_n", ",", "h", ",", "w", ")", ".", "squeeze", "(", "0", ")", "\n", "cur_score1", "=", "cur_score1", ".", "squeeze", "(", "0", ")", "\n", "cur_score2", "=", "cur_score2", ".", "squeeze", "(", "0", ")", "\n", "\n", "\n", "", "cur_desc1", "=", "putils", ".", "sample_feat_by_coord", "(", "preds1", "[", "'local_map'", "]", "[", "i", ":", "i", "+", "1", ",", "...", "]", ",", "\n", "cur_kps1_n", ",", "val_config", "[", "'loss_distance'", "]", "==", "'cos'", ")", ".", "squeeze", "(", "0", ")", "\n", "cur_desc2", "=", "putils", ".", "sample_feat_by_coord", "(", "preds2", "[", "'local_map'", "]", "[", "i", ":", "i", "+", "1", ",", "...", "]", ",", "\n", "cur_kps2_n", ",", "val_config", "[", "'loss_distance'", "]", "==", "'cos'", ")", ".", "squeeze", "(", "0", ")", "\n", "\n", "cur_matches", "=", "putils", ".", "mnn_matcher", "(", "cur_desc1", ",", "cur_desc2", ")", "\n", "cur_matchkp1", "=", "cur_kps1", "[", "cur_matches", "[", ":", ",", "0", "]", ",", ":", "2", "]", "\n", "cur_matchkp2", "=", "cur_kps2", "[", "cur_matches", "[", ":", ",", "1", "]", ",", ":", "2", "]", "\n", "cur_kpscore_m1", "=", "cur_score1", "[", "cur_matches", "[", ":", ",", "0", "]", ",", ":", "1", "]", "\n", "cur_kpscore_m2", "=", "cur_score2", "[", "cur_matches", "[", ":", ",", "1", "]", ",", ":", "1", "]", "\n", "cur_kpscore", "=", "cur_kpscore_m1", "+", "cur_kpscore_m2", ".", "to", "(", "cur_score1", ")", "\n", "# cur_kpscore = cur_kpscore_m1 + cur_kpscore_m2", "\n", "_", ",", "topk_idx", "=", "cur_kpscore", ".", "topk", "(", "min", "(", "val_config", "[", "'vis_topk'", "]", ",", "cur_kpscore", ".", "shape", "[", "0", "]", ")", ",", "dim", "=", "0", ")", "\n", "\n", "cur_matchkp1_h", "=", "putils", ".", "homogenize", "(", "cur_matchkp1", ")", ".", "transpose", "(", "0", ",", "1", ")", "\n", "cur_matchkp2_h", "=", "putils", ".", "homogenize", "(", "cur_matchkp2", ")", ".", "transpose", "(", "0", ",", "1", ")", "\n", "cur_epi_line1", "=", "cur_F12", "@", "cur_matchkp1_h", "\n", "cur_epi_line1", "=", "cur_epi_line1", "/", "torch", ".", "clamp", "(", "\n", "torch", ".", "norm", "(", "cur_epi_line1", "[", ":", "2", ",", ":", "]", ",", "dim", "=", "0", ",", "keepdim", "=", "True", ")", ",", "min", "=", "1e-8", ")", "\n", "epi_dist", "=", "torch", ".", "abs", "(", "torch", ".", "sum", "(", "cur_matchkp2_h", "*", "cur_epi_line1", ",", "dim", "=", "0", ")", ")", ".", "unsqueeze", "(", "1", ")", "\n", "epi_dist", "=", "epi_dist", ".", "clamp", "(", "min", "=", "0", ",", "max", "=", "val_config", "[", "'vis_err_thr'", "]", ")", ".", "repeat", "(", "1", ",", "2", ")", "\n", "\n", "match_color", "=", "dutils", ".", "tensor2array", "(", "val_config", "[", "'vis_err_thr'", "]", "-", "epi_dist", ",", "\n", "max_value", "=", "val_config", "[", "'vis_err_thr'", "]", ",", "colormap", "=", "'RdYlGn'", ")", "[", ":", "3", ",", ":", ",", ":", "1", "]", ".", "transpose", "(", "1", ",", "2", ",", "0", ")", "\n", "match_color", "=", "(", "255", "*", "match_color", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "match_color", "=", "cv2", ".", "cvtColor", "(", "match_color", ",", "cv2", ".", "COLOR_RGB2BGR", ")", ".", "squeeze", "(", "1", ")", "\n", "\n", "cur_matchkp1_less", "=", "cur_matchkp1", "[", "topk_idx", ",", ":", "2", "]", "\n", "cur_matchkp2_less", "=", "cur_matchkp2", "[", "topk_idx", ",", ":", "2", "]", "\n", "match_color_less", "=", "match_color", "[", "topk_idx", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", ":", ",", "0", "]", ",", ":", "3", "]", "\n", "\n", "cur_kps1", "=", "list", "(", "map", "(", "tuple", ",", "cur_kps1", ".", "reshape", "(", "-", "1", ",", "2", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", ")", "\n", "cur_kps2", "=", "list", "(", "map", "(", "tuple", ",", "cur_kps2", ".", "reshape", "(", "-", "1", ",", "2", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", ")", "\n", "cur_matchkp1", "=", "list", "(", "map", "(", "tuple", ",", "cur_matchkp1", ".", "reshape", "(", "-", "1", ",", "2", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", ")", "\n", "cur_matchkp2", "=", "list", "(", "map", "(", "tuple", ",", "cur_matchkp2", ".", "reshape", "(", "-", "1", ",", "2", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", ")", "\n", "match_color", "=", "list", "(", "map", "(", "tuple", ",", "match_color", ")", ")", "\n", "cur_matchkp1_less", "=", "list", "(", "map", "(", "tuple", ",", "cur_matchkp1_less", ".", "reshape", "(", "-", "1", ",", "2", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", ")", "\n", "cur_matchkp2_less", "=", "list", "(", "map", "(", "tuple", ",", "cur_matchkp2_less", ".", "reshape", "(", "-", "1", ",", "2", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", ")", "\n", "match_color_less", "=", "list", "(", "map", "(", "tuple", ",", "match_color_less", ")", ")", "\n", "\n", "comb_img", "=", "comb_img", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "save_img", "=", "comb_img", "\n", "save_img", "=", "Im", ".", "fromarray", "(", "save_img", ".", "astype", "(", "np", ".", "uint8", ")", ")", "\n", "save_img", ".", "save", "(", "cur_path", "/", "'0_original_images/{}.jpg'", ".", "format", "(", "idx", ")", ")", "\n", "\n", "comb_score", "=", "dutils", ".", "tensor2array", "(", "comb_score", ".", "squeeze", "(", ")", ")", "[", ":", "3", ",", ":", ",", ":", "]", ".", "transpose", "(", "1", ",", "2", ",", "0", ")", "\n", "save_img", "=", "255", "*", "comb_score", "\n", "save_img", "=", "Im", ".", "fromarray", "(", "save_img", ".", "astype", "(", "np", ".", "uint8", ")", ")", "\n", "save_img", ".", "save", "(", "cur_path", "/", "'1_score_maps/{}.jpg'", ".", "format", "(", "idx", ")", ")", "\n", "\n", "comb_img_kps", "=", "cv2", ".", "cvtColor", "(", "comb_img", ",", "cv2", ".", "COLOR_RGB2BGR", ")", "\n", "color", "=", "(", "0", ",", "255", ",", "0", ")", "\n", "for", "kp1", "in", "cur_kps1", ":", "\n", "                ", "cv2", ".", "circle", "(", "comb_img_kps", ",", "kp1", ",", "radius", "=", "2", ",", "color", "=", "color", ",", "thickness", "=", "-", "1", ")", "\n", "", "for", "kp2", "in", "cur_kps2", ":", "\n", "                ", "kp2_comb", "=", "(", "int", "(", "kp2", "[", "0", "]", "+", "w", "+", "mid_pad", ")", ",", "int", "(", "kp2", "[", "1", "]", ")", ")", "\n", "cv2", ".", "circle", "(", "comb_img_kps", ",", "kp2_comb", ",", "radius", "=", "2", ",", "color", "=", "color", ",", "thickness", "=", "-", "1", ")", "\n", "", "comb_img_kps", "=", "cv2", ".", "cvtColor", "(", "comb_img_kps", ",", "cv2", ".", "COLOR_BGR2RGB", ")", "\n", "save_img", "=", "comb_img_kps", "\n", "save_img", "=", "Im", ".", "fromarray", "(", "save_img", ".", "astype", "(", "np", ".", "uint8", ")", ")", "\n", "save_img", ".", "save", "(", "cur_path", "/", "'2_all_keypoints/{}.jpg'", ".", "format", "(", "idx", ")", ")", "\n", "\n", "comb_img_kps_m", "=", "cv2", ".", "cvtColor", "(", "comb_img", ",", "cv2", ".", "COLOR_RGB2BGR", ")", "\n", "color", "=", "(", "0", ",", "255", ",", "0", ")", "\n", "for", "kp1", ",", "kp2", "in", "zip", "(", "cur_matchkp1", ",", "cur_matchkp2", ")", ":", "\n", "                ", "cv2", ".", "circle", "(", "comb_img_kps_m", ",", "kp1", ",", "radius", "=", "2", ",", "color", "=", "color", ",", "thickness", "=", "-", "1", ")", "\n", "# kp2_comb = kp2 + torch.tensor([w, 0]).reshape(1,2).to(kp2)", "\n", "kp2_comb", "=", "(", "int", "(", "kp2", "[", "0", "]", "+", "w", "+", "mid_pad", ")", ",", "int", "(", "kp2", "[", "1", "]", ")", ")", "\n", "cv2", ".", "circle", "(", "comb_img_kps_m", ",", "kp2_comb", ",", "radius", "=", "2", ",", "color", "=", "color", ",", "thickness", "=", "-", "1", ")", "\n", "", "comb_img_kps_m", "=", "cv2", ".", "cvtColor", "(", "comb_img_kps_m", ",", "cv2", ".", "COLOR_BGR2RGB", ")", "\n", "save_img", "=", "comb_img_kps_m", "\n", "save_img", "=", "Im", ".", "fromarray", "(", "save_img", ".", "astype", "(", "np", ".", "uint8", ")", ")", "\n", "save_img", ".", "save", "(", "cur_path", "/", "'3_matched_keypoints/{}.jpg'", ".", "format", "(", "idx", ")", ")", "\n", "\n", "comb_img_m_less", "=", "cv2", ".", "cvtColor", "(", "comb_img", ",", "cv2", ".", "COLOR_RGB2BGR", ")", "\n", "for", "kp1", ",", "kp2", ",", "color", "in", "zip", "(", "cur_matchkp1_less", ",", "cur_matchkp2_less", ",", "match_color_less", ")", ":", "\n", "# kp2_comb = kp2 + torch.tensor([w, 0]).reshape(1,2).to(kp2)", "\n", "                ", "kp2_comb", "=", "(", "int", "(", "kp2", "[", "0", "]", "+", "w", "+", "mid_pad", ")", ",", "int", "(", "kp2", "[", "1", "]", ")", ")", "\n", "color", "=", "(", "int", "(", "color", "[", "0", "]", ")", ",", "int", "(", "color", "[", "1", "]", ")", ",", "int", "(", "color", "[", "2", "]", ")", ")", "\n", "cv2", ".", "line", "(", "comb_img_m_less", ",", "kp1", ",", "kp2_comb", ",", "color", ",", "thickness", "=", "2", ")", "\n", "cv2", ".", "circle", "(", "comb_img_m_less", ",", "kp1", ",", "radius", "=", "2", ",", "color", "=", "(", "0", ",", "255", ",", "0", ")", ",", "thickness", "=", "-", "1", ")", "\n", "cv2", ".", "circle", "(", "comb_img_m_less", ",", "kp2_comb", ",", "radius", "=", "2", ",", "color", "=", "(", "0", ",", "255", ",", "0", ")", ",", "thickness", "=", "-", "1", ")", "\n", "", "comb_img_m_less", "=", "cv2", ".", "cvtColor", "(", "comb_img_m_less", ",", "cv2", ".", "COLOR_BGR2RGB", ")", "\n", "save_img", "=", "comb_img_m_less", "\n", "save_img", "=", "Im", ".", "fromarray", "(", "save_img", ".", "astype", "(", "np", ".", "uint8", ")", ")", "\n", "save_img", ".", "save", "(", "cur_path", "/", "'4_matches_less/{}.jpg'", ".", "format", "(", "idx", ")", ")", "\n", "\n", "comb_img_m", "=", "cv2", ".", "cvtColor", "(", "comb_img", ",", "cv2", ".", "COLOR_RGB2BGR", ")", "\n", "for", "kp1", ",", "kp2", ",", "color", "in", "zip", "(", "cur_matchkp1", ",", "cur_matchkp2", ",", "match_color", ")", ":", "\n", "# kp2_comb = kp2 + torch.tensor([w, 0]).reshape(1,2).to(kp2)", "\n", "                ", "kp2_comb", "=", "(", "int", "(", "kp2", "[", "0", "]", "+", "w", "+", "mid_pad", ")", ",", "int", "(", "kp2", "[", "1", "]", ")", ")", "\n", "color", "=", "(", "int", "(", "color", "[", "0", "]", ")", ",", "int", "(", "color", "[", "1", "]", ")", ",", "int", "(", "color", "[", "2", "]", ")", ")", "\n", "cv2", ".", "line", "(", "comb_img_m", ",", "kp1", ",", "kp2_comb", ",", "color", ",", "thickness", "=", "2", ")", "\n", "cv2", ".", "circle", "(", "comb_img_m", ",", "kp1", ",", "radius", "=", "2", ",", "color", "=", "(", "0", ",", "255", ",", "0", ")", ",", "thickness", "=", "-", "1", ")", "\n", "cv2", ".", "circle", "(", "comb_img_m", ",", "kp2_comb", ",", "radius", "=", "2", ",", "color", "=", "(", "0", ",", "255", ",", "0", ")", ",", "thickness", "=", "-", "1", ")", "\n", "", "comb_img_m", "=", "cv2", ".", "cvtColor", "(", "comb_img_m", ",", "cv2", ".", "COLOR_BGR2RGB", ")", "\n", "save_img", "=", "comb_img_m", "\n", "save_img", "=", "Im", ".", "fromarray", "(", "save_img", ".", "astype", "(", "np", ".", "uint8", ")", ")", "\n", "save_img", ".", "save", "(", "cur_path", "/", "'5_matches_all/{}.jpg'", ".", "format", "(", "idx", ")", ")", "", "", "", "", ""]], "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.managers.extractor.TqdmHandler.__init__": [[32, 34], ["logging.StreamHandler.__init__"], "methods", ["home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.losses.preprocess.Preprocess_Skip.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "logging", ".", "StreamHandler", ".", "__init__", "(", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.managers.extractor.TqdmHandler.emit": [[35, 38], ["extractor.TqdmHandler.format", "tqdm.tqdm.tqdm.write"], "methods", ["None"], ["", "def", "emit", "(", "self", ",", "record", ")", ":", "\n", "        ", "msg", "=", "self", ".", "format", "(", "record", ")", "\n", "tqdm", ".", "write", "(", "msg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.managers.extractor.Extractor.__init__": [[41, 102], ["path.Path", "path.Path", "extractor.Extractor.config[].update", "extractor.Extractor.set_device", "extractor.Extractor.set_folder_and_logger", "extractor.Extractor.model.load_checkpoint", "extractor.Extractor.model.set_eval", "getattr", "getattr.", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "open", "yaml.load", "list", "list", "path.Path.dirname", "open", "yaml.load", "list", "list", "getattr", "getattr.", "networks.WSFNet", "extractor.Extractor.model.set_parallel", "getattr", "extractor.Extractor.logger.info", "extractor.Extractor.logger.info", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "extractor.Extractor.config.keys", "extractor.Extractor.config.keys", "yaml.load.keys", "extractor.Extractor.config.keys"], "methods", ["home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.managers.extractor.Extractor.set_device", "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.managers.extractor.Extractor.set_folder_and_logger", "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.networks.PoSFeat_model.PoSFeat.load_checkpoint", "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.networks.PoSFeat_model.PoSFeat.set_eval", "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.networks.PoSFeat_model.PoSFeat.set_parallel"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "self", ".", "args", "=", "args", "\n", "with", "open", "(", "self", ".", "args", ".", "config", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "self", ".", "config", "=", "yaml", ".", "load", "(", "f", ",", "Loader", "=", "yaml", ".", "FullLoader", ")", "\n", "# timestamp = datetime.datetime.now().strftime(\"%m%d-%H%M\")", "\n", "", "self", ".", "save_root", "=", "Path", "(", "'./ckpts/{}'", ".", "format", "(", "self", ".", "config", "[", "'output_root'", "]", ")", ")", "\n", "self", ".", "logfile", "=", "self", ".", "save_root", "/", "'logging_file.txt'", "\n", "self", ".", "desc_root", "=", "self", ".", "save_root", "/", "'desc'", "\n", "self", ".", "img_root", "=", "self", ".", "save_root", "/", "'image'", "\n", "self", ".", "sift_kp", "=", "self", ".", "config", "[", "'use_sift'", "]", "\n", "\n", "if", "'save_npz'", "in", "list", "(", "self", ".", "config", ".", "keys", "(", ")", ")", ":", "\n", "            ", "self", ".", "save_npz", "=", "self", ".", "config", "[", "'save_npz'", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "save_npz", "=", "True", "\n", "\n", "", "if", "'save_h5'", "in", "list", "(", "self", ".", "config", ".", "keys", "(", ")", ")", ":", "\n", "            ", "self", ".", "save_h5", "=", "self", ".", "config", "[", "'save_h5'", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "save_h5", "=", "False", "\n", "\n", "", "ckpt_path", "=", "Path", "(", "self", ".", "config", "[", "'load_path'", "]", ")", "\n", "cfg_path", "=", "ckpt_path", ".", "dirname", "(", ")", "/", "'config.yaml'", "\n", "with", "open", "(", "cfg_path", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "pre_conf", "=", "yaml", ".", "load", "(", "f", ",", "Loader", "=", "yaml", ".", "FullLoader", ")", "\n", "", "self", ".", "config", "[", "'model_config'", "]", ".", "update", "(", "pre_conf", "[", "'model_config'", "]", ")", "\n", "if", "'model'", "in", "list", "(", "pre_conf", ".", "keys", "(", ")", ")", ":", "\n", "            ", "self", ".", "config", "[", "'model'", "]", "=", "pre_conf", "[", "'model'", "]", "\n", "\n", "", "self", ".", "set_device", "(", ")", "\n", "self", ".", "set_folder_and_logger", "(", ")", "\n", "\n", "##  model", "\n", "if", "'model'", "in", "list", "(", "self", ".", "config", ".", "keys", "(", ")", ")", ":", "\n", "            ", "tmp_model", "=", "getattr", "(", "networks", ",", "self", ".", "config", "[", "'model'", "]", ")", "\n", "self", ".", "model", "=", "tmp_model", "(", "self", ".", "config", "[", "'model_config'", "]", ",", "self", ".", "device", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "model", "=", "networks", ".", "WSFNet", "(", "self", ".", "config", "[", "'model_config'", "]", ",", "self", ".", "device", ")", "\n", "", "if", "self", ".", "multi_gpu", ":", "\n", "            ", "self", ".", "model", ".", "set_parallel", "(", "self", ".", "args", ".", "local_rank", ")", "\n", "\n", "# self.model.save_checkpoint(self.save_root)", "\n", "", "self", ".", "model", ".", "load_checkpoint", "(", "self", ".", "config", "[", "'load_path'", "]", ")", "\n", "self", ".", "model", ".", "set_eval", "(", ")", "\n", "\n", "if", "not", "self", ".", "config", "[", "'use_sift'", "]", ":", "\n", "            ", "self", ".", "detector", "=", "getattr", "(", "putils", ",", "self", ".", "config", "[", "'detector'", "]", ")", "\n", "self", ".", "logger", ".", "info", "(", "'use {} to detect keypoints'", ".", "format", "(", "self", ".", "config", "[", "'detector'", "]", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "logger", ".", "info", "(", "'use sift keypoints'", ")", "\n", "\n", "##  dataloader", "\n", "", "dataset", "=", "getattr", "(", "datasets", ",", "self", ".", "config", "[", "'data'", "]", ")", "\n", "extract_dataset", "=", "dataset", "(", "configs", "=", "self", ".", "config", "[", "'data_config_extract'", "]", ")", "\n", "if", "self", ".", "multi_gpu", ":", "\n", "            ", "extract_sampler", "=", "torch", ".", "utils", ".", "data", ".", "distributed", ".", "DistributedSampler", "(", "extract_dataset", ")", "\n", "", "else", ":", "\n", "            ", "extract_sampler", "=", "None", "\n", "", "self", ".", "extract_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "extract_dataset", ",", "batch_size", "=", "self", ".", "config", "[", "'data_config_extract'", "]", "[", "'batch_size'", "]", ",", "\n", "shuffle", "=", "False", ",", "num_workers", "=", "self", ".", "config", "[", "'data_config_extract'", "]", "[", "'workers'", "]", ",", "\n", "collate_fn", "=", "self", ".", "my_collate", ",", "sampler", "=", "extract_sampler", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.managers.extractor.Extractor.my_collate": [[104, 108], ["list", "torch.utils.data.dataloader.default_collate", "torch.utils.data.dataloader.default_collate", "torch.utils.data.dataloader.default_collate", "torch.utils.data.dataloader.default_collate", "torch.utils.data.dataloader.default_collate", "torch.utils.data.dataloader.default_collate", "torch.utils.data.dataloader.default_collate", "torch.utils.data.dataloader.default_collate", "torch.utils.data.dataloader.default_collate", "filter"], "methods", ["None"], ["", "def", "my_collate", "(", "self", ",", "batch", ")", ":", "\n", "        ", "''' Puts each data field into a tensor with outer dimension batch size '''", "\n", "batch", "=", "list", "(", "filter", "(", "lambda", "b", ":", "b", "is", "not", "None", ",", "batch", ")", ")", "\n", "return", "torch", ".", "utils", ".", "data", ".", "dataloader", ".", "default_collate", "(", "batch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.managers.extractor.Extractor.set_device": [[109, 130], ["torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "print", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "print", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.init_process_group", "torch.init_process_group", "torch.init_process_group", "print", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count"], "methods", ["None"], ["", "def", "set_device", "(", "self", ")", ":", "\n", "        ", "if", "torch", ".", "cuda", ".", "device_count", "(", ")", "==", "0", ":", "\n", "            ", "self", ".", "device", "=", "torch", ".", "device", "(", "\"cpu\"", ")", "\n", "self", ".", "output_flag", "=", "True", "\n", "self", ".", "multi_gpu", "=", "False", "\n", "print", "(", "'use CPU for extraction'", ")", "\n", "", "elif", "torch", ".", "cuda", ".", "device_count", "(", ")", "==", "1", ":", "\n", "            ", "self", ".", "device", "=", "torch", ".", "device", "(", "\"cuda\"", ")", "\n", "self", ".", "output_flag", "=", "True", "\n", "self", ".", "multi_gpu", "=", "False", "\n", "print", "(", "'use a single GPU for extraction'", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "device", "=", "torch", ".", "device", "(", "\"cuda\"", ",", "self", ".", "args", ".", "local_rank", ")", "\n", "self", ".", "multi_gpu", "=", "True", "\n", "dist", ".", "init_process_group", "(", "backend", "=", "'nccl'", ")", "\n", "# torch.autograd.set_detect_anomaly(True) # for debug", "\n", "if", "self", ".", "args", ".", "local_rank", "==", "0", ":", "\n", "                ", "self", ".", "output_flag", "=", "True", "\n", "print", "(", "'use {} GPUs for extraction'", ".", "format", "(", "torch", ".", "cuda", ".", "device_count", "(", ")", ")", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "output_flag", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.managers.extractor.Extractor.set_folder_and_logger": [[131, 204], ["logging.getLogger", "print", "extractor.Extractor.logfile.touch", "os.path.exists", "time.sleep", "extractor.Extractor.logger.setLevel", "logging.FileHandler", "logging.FileHandler.setLevel", "extractor.TqdmHandler", "logging.StreamHandler.setLevel", "logging.Formatter", "logging.FileHandler.setFormatter", "logging.StreamHandler.setFormatter", "extractor.Extractor.logger.addHandler", "extractor.Extractor.logger.addHandler", "extractor.Extractor.logger.setLevel", "logging.FileHandler", "logging.FileHandler.setLevel", "logging.StreamHandler", "logging.StreamHandler.setLevel", "logging.Formatter", "logging.FileHandler.setFormatter", "logging.StreamHandler.setFormatter", "extractor.Extractor.logger.addHandler", "extractor.Extractor.logger.addHandler", "os.path.exists", "extractor.Extractor.save_root.makedirs_p", "open", "yaml.dump", "os.path.exists", "extractor.Extractor.desc_root.makedirs_p", "os.path.exists", "extractor.Extractor.img_root.makedirs_p", "colorlog.ColoredFormatter", "colorlog.ColoredFormatter"], "methods", ["None"], ["", "", "", "def", "set_folder_and_logger", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "output_flag", ":", "\n", "            ", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "save_root", ")", ":", "\n", "                ", "self", ".", "save_root", ".", "makedirs_p", "(", ")", "\n", "", "else", ":", "\n", "# if path exsists, quit to make sure that the previous setting.txt would not be overwritten", "\n", "                ", "if", "self", ".", "config", "[", "'data'", "]", "==", "'ETH_LFB'", "or", "self", ".", "config", "[", "'data'", "]", "==", "'IMC_eval'", ":", "\n", "                    ", "pass", "\n", "", "else", ":", "\n", "                    ", "raise", "\"The save path is already exists, please change the output_root in config\"", "\n", "", "", "print", "(", "'=> will save everything to {}'", ".", "format", "(", "self", ".", "save_root", ")", ")", "\n", "# shutil.copy(self.args.config, self.save_root/'config.yaml')", "\n", "with", "open", "(", "self", ".", "save_root", "/", "'config.yaml'", ",", "'w'", ")", "as", "fout", ":", "\n", "                ", "yaml", ".", "dump", "(", "self", ".", "config", ",", "fout", ")", "\n", "", "self", ".", "logfile", ".", "touch", "(", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "desc_root", ")", ":", "\n", "                ", "self", ".", "desc_root", ".", "makedirs_p", "(", ")", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "img_root", ")", ":", "\n", "                ", "self", ".", "img_root", ".", "makedirs_p", "(", ")", "\n", "\n", "", "", "while", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "logfile", ")", ":", "\n", "            ", "time", ".", "sleep", "(", "0.5", ")", "\n", "continue", "\n", "\n", "", "self", ".", "logger", "=", "logging", ".", "getLogger", "(", ")", "\n", "if", "self", ".", "output_flag", ":", "\n", "            ", "self", ".", "logger", ".", "setLevel", "(", "logging", ".", "INFO", ")", "\n", "fh", "=", "logging", ".", "FileHandler", "(", "self", ".", "logfile", ",", "mode", "=", "'a'", ")", "\n", "fh", ".", "setLevel", "(", "logging", ".", "DEBUG", ")", "\n", "\n", "# ch = logging.StreamHandler()", "\n", "ch", "=", "TqdmHandler", "(", ")", "\n", "ch", ".", "setLevel", "(", "logging", ".", "INFO", ")", "\n", "\n", "formatter", "=", "logging", ".", "Formatter", "(", "\"%(asctime)s - gpu {} - %(levelname)s: %(message)s\"", ".", "format", "(", "self", ".", "args", ".", "local_rank", ")", ")", "\n", "fh", ".", "setFormatter", "(", "formatter", ")", "\n", "# ch.setFormatter(formatter)", "\n", "ch", ".", "setFormatter", "(", "colorlog", ".", "ColoredFormatter", "(", "\n", "\"%(asctime)s - gpu {} - %(levelname)s: %(message)s\"", ".", "format", "(", "self", ".", "args", ".", "local_rank", ")", ",", "\n", "log_colors", "=", "{", "\n", "'DEBUG'", ":", "'cyan'", ",", "\n", "'INFO'", ":", "'white'", ",", "\n", "'SUCCESS:'", ":", "'green'", ",", "\n", "'WARNING'", ":", "'yellow'", ",", "\n", "'ERROR'", ":", "'red'", ",", "\n", "'CRITICAL'", ":", "'red,bg_white'", "}", ",", ")", ")", "\n", "\n", "self", ".", "logger", ".", "addHandler", "(", "fh", ")", "\n", "self", ".", "logger", ".", "addHandler", "(", "ch", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "logger", ".", "setLevel", "(", "logging", ".", "ERROR", ")", "\n", "fh", "=", "logging", ".", "FileHandler", "(", "self", ".", "logfile", ",", "mode", "=", "'a'", ")", "\n", "fh", ".", "setLevel", "(", "logging", ".", "ERROR", ")", "\n", "\n", "ch", "=", "logging", ".", "StreamHandler", "(", ")", "\n", "ch", ".", "setLevel", "(", "logging", ".", "ERROR", ")", "\n", "\n", "formatter", "=", "logging", ".", "Formatter", "(", "\"%(asctime)s - gpu {} - %(levelname)s: %(message)s\"", ".", "format", "(", "self", ".", "local_rank", ")", ")", "\n", "fh", ".", "setFormatter", "(", "formatter", ")", "\n", "# ch.setFormatter(formatter)", "\n", "ch", ".", "setFormatter", "(", "colorlog", ".", "ColoredFormatter", "(", "\n", "\"%(asctime)s - gpu {} - %(levelname)s: %(message)s\"", ".", "format", "(", "self", ".", "args", ".", "local_rank", ")", ",", "\n", "log_colors", "=", "{", "\n", "'DEBUG'", ":", "'cyan'", ",", "\n", "'INFO'", ":", "'white'", ",", "\n", "'SUCCESS:'", ":", "'green'", ",", "\n", "'WARNING'", ":", "'yellow'", ",", "\n", "'ERROR'", ":", "'red'", ",", "\n", "'CRITICAL'", ":", "'red,bg_white'", "}", ",", ")", ")", "\n", "\n", "self", ".", "logger", ".", "addHandler", "(", "fh", ")", "\n", "self", ".", "logger", ".", "addHandler", "(", "ch", ")", "\n", "# logger.info('test logger')  ", "\n"]], "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.managers.extractor.Extractor.findthr": [[206, 210], ["tensor.cpu().numpy().reshape", "numpy.percentile", "tensor.cpu().numpy", "tensor.cpu"], "methods", ["None"], ["", "", "def", "findthr", "(", "self", ",", "tensor", ",", "thr", ")", ":", "\n", "        ", "tensor_np", "=", "tensor", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "max_val", "=", "np", ".", "percentile", "(", "tensor_np", ",", "thr", ")", "\n", "return", "max_val", "\n", "\n"]], "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.managers.extractor.Extractor.save_imgs": [[211, 253], ["save_path.dirname.dirname.dirname", "PIL.Image.fromarray.clamp", "[].transpose", "PIL.Image.fromarray", "PIL.Image.fromarray.save", "inputs[].squeeze().cpu().numpy().astype", "cv2.cvtColor", "PIL.Image.fromarray", "PIL.Image.fromarray.save", "torch.interpolate.min", "torch.interpolate.max", "global_point.min", "global_point.max", "save_path.dirname.dirname.name.split", "save_path.dirname.dirname.exists", "save_path.dirname.dirname.makedirs_p", "torch.interpolate", "torch.interpolate", "torch.interpolate", "extractor.Extractor.findthr", "cv2.circle", "inputs[].squeeze().cpu().numpy", "datasets.tensor2array", "datasets.tensor2array", "PIL.Image.fromarray.squeeze", "inputs[].squeeze().cpu", "inputs[].squeeze"], "methods", ["home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.managers.extractor.Extractor.findthr", "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.datasets.data_utils.tensor2array", "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.datasets.data_utils.tensor2array"], ["", "def", "save_imgs", "(", "self", ",", "inputs", ",", "outputs", ",", "processed", ")", ":", "\n", "        ", "local_point", "=", "outputs", "[", "'local_point'", "]", "\n", "message", "=", "\"\\nlocal_min:{:.3f} max:{:.3f} global_min:{:.3f} max:{:.3f}\"", ".", "format", "(", "\n", "local_point", ".", "min", "(", ")", ",", "local_point", ".", "max", "(", ")", ",", "global_point", ".", "min", "(", ")", ",", "global_point", ".", "max", "(", ")", ")", "\n", "\n", "save_path", "=", "self", ".", "img_root", "/", "inputs", "[", "'name1'", "]", "[", "0", "]", "\n", "name", "=", "save_path", ".", "name", ".", "split", "(", "'.'", ")", "[", "0", "]", "\n", "save_path", "=", "save_path", ".", "dirname", "(", ")", "\n", "if", "not", "save_path", ".", "exists", "(", ")", ":", "\n", "            ", "save_path", ".", "makedirs_p", "(", ")", "\n", "\n", "", "bi", ",", "ci", ",", "hi", ",", "wi", "=", "inputs", "[", "'im1'", "]", ".", "shape", "\n", "bo", ",", "co", ",", "ho", ",", "wo", "=", "local_point", ".", "shape", "\n", "if", "hi", "!=", "ho", "or", "wi", "!=", "wo", ":", "\n", "            ", "local_point", "=", "F", ".", "interpolate", "(", "local_point", ",", "(", "hi", ",", "wi", ")", ")", "\n", "", "bi", ",", "hi", ",", "wi", ",", "ci", "=", "inputs", "[", "'im1_ori'", "]", ".", "shape", "\n", "\n", "pad", "=", "inputs", "[", "'pad1'", "]", "\n", "if", "pad", "[", "3", "]", "!=", "0", ":", "\n", "            ", "local_point", "=", "local_point", "[", ":", ",", ":", ",", ":", "-", "pad", "[", "3", "]", ",", ":", "]", "\n", "", "if", "pad", "[", "1", "]", "!=", "0", ":", "\n", "            ", "local_point", "=", "local_point", "[", ":", ",", ":", ",", ":", ",", ":", "-", "pad", "[", "1", "]", "]", "\n", "", "local_point1", "=", "local_point", "[", ":", ",", "0", ",", ":", ",", ":", "]", "\n", "\n", "local_point1", "=", "local_point1", "/", "self", ".", "findthr", "(", "local_point1", ",", "100", "*", "self", ".", "config", "[", "'local_thr'", "]", ")", "\n", "local_point1", "=", "local_point1", ".", "clamp", "(", "0", ",", "1", ")", "\n", "\n", "local_point1", "=", "dutils", ".", "tensor2array", "(", "local_point1", ".", "squeeze", "(", ")", ")", "[", ":", "3", ",", ":", ",", ":", "]", ".", "transpose", "(", "1", ",", "2", ",", "0", ")", "\n", "local_point1", "=", "Im", ".", "fromarray", "(", "(", "255", "*", "local_point1", ")", ".", "astype", "(", "np", ".", "uint8", ")", ")", "\n", "local_point1", ".", "save", "(", "save_path", "/", "'{:>05d}_score_map.jpg'", ".", "format", "(", "name", ")", ")", "\n", "\n", "imgs_with_kps", "=", "inputs", "[", "'im1_ori'", "]", ".", "squeeze", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "# imgs_with_kps = cv2.cvtColor(imgs_with_kps, cv2.COLOR_RGB2BGR)", "\n", "color", "=", "(", "0", ",", "255", ",", "0", ")", "\n", "for", "kp", "in", "processed", "[", "'kpt'", "]", ":", "\n", "            ", "kp", "=", "(", "kp", "[", "0", "]", ",", "kp", "[", "1", "]", ")", "\n", "cv2", ".", "circle", "(", "imgs_with_kps", ",", "kp", ",", "radius", "=", "2", ",", "color", "=", "color", ",", "thickness", "=", "-", "1", ")", "\n", "", "imgs_with_kps", "=", "cv2", ".", "cvtColor", "(", "imgs_with_kps", ",", "cv2", ".", "COLOR_BGR2RGB", ")", "\n", "imgs_with_kps", "=", "Im", ".", "fromarray", "(", "imgs_with_kps", ")", "\n", "imgs_with_kps", ".", "save", "(", "save_path", "/", "'{:>05d}_image_with_kp.jpg'", ".", "format", "(", "name", ")", ")", "\n", "\n", "return", "message", "\n", "\n"]], "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.managers.extractor.Extractor.save_desc": [[254, 317], ["save_path.dirname().exists", "save_path.dirname().makedirs_p", "feat_f.squeeze().detach().cpu().numpy", "kp_score.squeeze().detach().cpu().numpy", "feat_f.squeeze().detach().cpu().numpy", "kp_score.squeeze().detach().cpu().numpy", "numpy.ones_like", "open", "numpy.savez", "name.split", "h5_name.split", "h5_name.split", "os.path.exists", "h5py.File", "h5py.File", "h5py.File", "h5py.File", "h5py.File", "save_path.dirname", "save_path.dirname", "feat_f.squeeze().detach().cpu", "kp_score.squeeze().detach().cpu", "feat_f.squeeze().detach().cpu", "kp_score.squeeze().detach().cpu", "fh5.create_group", "fh5.create_group.create_dataset", "fh5.create_group.create_dataset", "fh5.create_group.create_dataset", "fh5.create_group.create_dataset", "feat_f.squeeze().detach", "kp_score.squeeze().detach", "feat_f.squeeze().detach", "kp_score.squeeze().detach", "extractor.Extractor.logger.error", "numpy.array", "extractor.Extractor.logger.error", "feat_f.squeeze", "kp_score.squeeze", "feat_f.squeeze", "kp_score.squeeze"], "methods", ["None"], ["", "def", "save_desc", "(", "self", ",", "inputs", ",", "outputs", ",", "processed", ")", ":", "\n", "        ", "kpt", "=", "processed", "[", "'kpt'", "]", "\n", "feat_f", "=", "processed", "[", "'desc'", "]", "\n", "kp_score", "=", "processed", "[", "'kp_score'", "]", "\n", "\n", "name", "=", "inputs", "[", "'name1'", "]", "[", "0", "]", "#.replace('ppm','wsf')", "\n", "save_path", "=", "self", ".", "desc_root", "/", "name", "\n", "h5_path", "=", "self", ".", "desc_root", "+", "'h5'", "\n", "if", "not", "save_path", ".", "dirname", "(", ")", ".", "exists", "(", ")", ":", "\n", "            ", "save_path", ".", "dirname", "(", ")", ".", "makedirs_p", "(", ")", "\n", "\n", "", "message", "=", "\"\\nkpts: {}\"", ".", "format", "(", "kpt", ".", "shape", "[", "0", "]", ")", "\n", "\n", "if", "self", ".", "save_npz", ":", "\n", "            ", "desc", "=", "feat_f", ".", "squeeze", "(", "0", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "scores", "=", "kp_score", ".", "squeeze", "(", "0", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "with", "open", "(", "save_path", "+", "'.{}'", ".", "format", "(", "self", ".", "config", "[", "'postfix'", "]", ")", ",", "'wb'", ")", "as", "output_file", ":", "\n", "                ", "np", ".", "savez", "(", "output_file", ",", "keypoints", "=", "kpt", ",", "scores", "=", "scores", ",", "descriptors", "=", "desc", ")", "\n", "\n", "", "", "if", "self", ".", "save_h5", ":", "\n", "# now it is only for image-matching-benchmark, so the name is seq/name.jpg", "\n", "            ", "desc", "=", "feat_f", ".", "squeeze", "(", "0", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "#save as nxc", "\n", "scores", "=", "kp_score", ".", "squeeze", "(", "0", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "scales", "=", "np", ".", "ones_like", "(", "scores", ")", "\n", "h5_name", "=", "name", ".", "split", "(", "'.'", ")", "[", "0", "]", "\n", "h5_seq", "=", "h5_name", ".", "split", "(", "'/'", ")", "[", ":", "-", "1", "]", "\n", "h5_seq", "=", "'/'", ".", "join", "(", "h5_seq", ")", "\n", "h5_name", "=", "h5_name", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "h5_path", "/", "h5_seq", ")", ":", "\n", "                ", "(", "h5_path", "/", "h5_seq", ")", ".", "makedirs_p", "(", ")", "\n", "", "with", "h5py", ".", "File", "(", "h5_path", "/", "h5_seq", "+", "'/keypoints.h5'", ",", "'a'", ")", "as", "fkp", ",", "h5py", ".", "File", "(", "h5_path", "/", "h5_seq", "+", "'/descriptors.h5'", ",", "'a'", ")", "as", "fdesc", ",", "h5py", ".", "File", "(", "h5_path", "/", "h5_seq", "+", "'/scores.h5'", ",", "'a'", ")", "as", "fsco", ",", "h5py", ".", "File", "(", "h5_path", "/", "h5_seq", "+", "'/scales.h5'", ",", "'a'", ")", "as", "fsca", ":", "\n", "                ", "try", ":", "\n", "                    ", "fkp", "[", "h5_name", "]", "=", "kpt", "\n", "fdesc", "[", "h5_name", "]", "=", "desc", "\n", "fsco", "[", "h5_name", "]", "=", "scores", "\n", "fsca", "[", "h5_name", "]", "=", "scales", "\n", "", "except", "OSError", "as", "error", ":", "\n", "                    ", "if", "'No space left on device'", "in", "error", ".", "args", "[", "0", "]", ":", "\n", "                        ", "self", ".", "logger", ".", "error", "(", "\n", "'Out of disk space: storing features on disk can take '", "\n", "'significant space, did you enable the as_half flag?'", ")", "\n", "del", "grp", ",", "fh5", "[", "name", "]", "\n", "", "raise", "error", "\n", "# for hloc input", "\n", "", "", "with", "h5py", ".", "File", "(", "h5_path", "/", "'feat.h5'", ",", "'a'", ")", "as", "fh5", ":", "\n", "                ", "try", ":", "\n", "                    ", "grp", "=", "fh5", ".", "create_group", "(", "name", ")", "\n", "grp", ".", "create_dataset", "(", "'keypoints'", ",", "data", "=", "kpt", ")", "\n", "grp", ".", "create_dataset", "(", "'scores'", ",", "data", "=", "scores", ")", "\n", "grp", ".", "create_dataset", "(", "'descriptors'", ",", "data", "=", "desc", ")", "\n", "grp", ".", "create_dataset", "(", "'image_size'", ",", "data", "=", "np", ".", "array", "(", "[", "w", ",", "h", "]", ")", ")", "\n", "", "except", "OSError", "as", "error", ":", "\n", "                    ", "if", "'No space left on device'", "in", "error", ".", "args", "[", "0", "]", ":", "\n", "                        ", "self", ".", "logger", ".", "error", "(", "\n", "'Out of disk space: storing features on disk can take '", "\n", "'significant space, did you enable the as_half flag?'", ")", "\n", "del", "grp", ",", "fh5", "[", "name", "]", "\n", "", "raise", "error", "\n", "\n", "", "", "", "return", "message", "\n", "\n"]], "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.managers.extractor.Extractor.process": [[318, 356], ["sample_feat_by_coord", "denormalize_coords.cpu().numpy().squeeze", "normalize_coords", "denormalize_coords", "list", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "name.split", "extractor.Extractor.detector", "denormalize_coords.cpu().numpy", "inputs.keys", "inputs[].cpu().numpy", "extractor.Extractor.detector", "extractor.Extractor.detector", "denormalize_coords.cpu", "inputs[].cpu"], "methods", ["home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.losses.preprocess_utils.sample_feat_by_coord", "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.losses.preprocess_utils.normalize_coords", "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.losses.preprocess_utils.denormalize_coords"], ["", "def", "process", "(", "self", ",", "inputs", ",", "outputs", ",", "remove_pad", "=", "False", ")", ":", "\n", "        ", "desc_f", "=", "outputs", "[", "'local_map'", "]", "\n", "name", "=", "inputs", "[", "'name1'", "]", "[", "0", "]", "\n", "\n", "if", "remove_pad", ":", "\n", "            ", "b", ",", "c", ",", "h", ",", "w", "=", "inputs", "[", "'im1_ori'", "]", ".", "shape", "\n", "pad", "=", "inputs", "[", "'pad1'", "]", "\n", "desc_f", "=", "desc_f", "[", ":", ",", ":", ",", ":", "-", "(", "pad", "[", "3", "]", "//", "4", ")", ",", ":", "-", "(", "pad", "[", "0", "]", "//", "4", ")", "]", "\n", "outputs", "[", "'local_point'", "]", "=", "outputs", "[", "'local_point'", "]", "[", ":", ",", ":", ",", ":", "-", "(", "pad", "[", "3", "]", "//", "4", ")", ",", ":", "-", "(", "pad", "[", "0", "]", "//", "4", ")", "]", "\n", "", "else", ":", "\n", "            ", "b", ",", "c", ",", "h", ",", "w", "=", "inputs", "[", "'im1'", "]", ".", "shape", "\n", "\n", "", "if", "self", ".", "sift_kp", ":", "\n", "            ", "coords", "=", "inputs", "[", "'coord1'", "]", "\n", "coord_n", "=", "normalize_coords", "(", "coords", ",", "h", ",", "w", ")", "\n", "kp_score", "=", "torch", ".", "ones_like", "(", "coord_n", ")", "[", ":", ",", ":", ",", ":", "1", "]", "\n", "", "else", ":", "\n", "            ", "if", "self", ".", "config", "[", "'data'", "]", "==", "'Aachen_Day_Night'", ":", "\n", "                ", "cur_name_split", "=", "name", ".", "split", "(", "'/'", ")", "\n", "if", "cur_name_split", "[", "0", "]", "==", "'query'", ":", "\n", "                    ", "coord_n", ",", "kp_score", "=", "self", ".", "detector", "(", "outputs", "[", "'local_point'", "]", ",", "**", "self", ".", "config", "[", "'detector_config_query'", "]", ")", "\n", "", "else", ":", "\n", "                    ", "coord_n", ",", "kp_score", "=", "self", ".", "detector", "(", "outputs", "[", "'local_point'", "]", ",", "**", "self", ".", "config", "[", "'detector_config'", "]", ")", "\n", "", "", "else", ":", "\n", "                ", "coord_n", ",", "kp_score", "=", "self", ".", "detector", "(", "outputs", "[", "'local_point'", "]", ",", "**", "self", ".", "config", "[", "'detector_config'", "]", ")", "\n", "\n", "", "coords", "=", "denormalize_coords", "(", "coord_n", ",", "h", ",", "w", ")", "\n", "\n", "", "feat_f", "=", "sample_feat_by_coord", "(", "desc_f", ",", "coord_n", ",", "self", ".", "config", "[", "'loss_distance'", "]", "==", "'cos'", ")", "\n", "kpt", "=", "coords", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "squeeze", "(", "0", ")", "\n", "\n", "# scale for inloc", "\n", "if", "'scale'", "in", "list", "(", "inputs", ".", "keys", "(", ")", ")", ":", "\n", "            ", "kpt", "=", "kpt", "*", "inputs", "[", "'scale'", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "", "return", "{", "'kpt'", ":", "kpt", ",", "\n", "'desc'", ":", "feat_f", ",", "\n", "'kp_score'", ":", "kp_score", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.managers.extractor.Extractor.extract": [[357, 383], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "tqdm.tqdm.tqdm", "[].repeat", "numpy.concatenate", "[].transpose", "PIL.Image.fromarray", "PIL.Image.fromarray.save", "enumerate", "inputs.items", "extractor.Extractor.model.extract", "extractor.Extractor.process", "extractor.Extractor.logger.info", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "open", "f.write", "int", "numpy.zeros", "val.to", "extractor.Extractor.save_desc", "extractor.Extractor.save_imgs", "len", "numpy.array().astype", "numpy.ones", "datasets.tensor2array", "datasets.tensor2array", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "numpy.array", "range"], "methods", ["home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.managers.extractor.Extractor.extract", "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.managers.extractor.Extractor.process", "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.managers.extractor.Extractor.save_desc", "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.managers.extractor.Extractor.save_imgs", "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.datasets.data_utils.tensor2array", "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.datasets.data_utils.tensor2array"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "extract", "(", "self", ")", ":", "\n", "        ", "bar", "=", "tqdm", "(", "self", ".", "extract_loader", ",", "total", "=", "int", "(", "len", "(", "self", ".", "extract_loader", ")", ")", ",", "ncols", "=", "80", ")", "\n", "color", "=", "np", ".", "array", "(", "range", "(", "256", ")", ")", ".", "astype", "(", "np", ".", "float", ")", "[", "None", ",", ":", "]", ".", "repeat", "(", "30", ",", "axis", "=", "0", ")", "\n", "color", "=", "np", ".", "concatenate", "(", "[", "np", ".", "zeros", "(", "(", "30", ",", "20", ")", ")", ",", "255", "*", "np", ".", "ones", "(", "(", "30", ",", "20", ")", ")", ",", "color", "]", ",", "axis", "=", "1", ")", "\n", "color", "=", "dutils", ".", "tensor2array", "(", "torch", ".", "tensor", "(", "color", ")", ")", "[", ":", "3", ",", ":", ",", ":", "]", ".", "transpose", "(", "1", ",", "2", ",", "0", ")", "\n", "color", "=", "Im", ".", "fromarray", "(", "(", "255", "*", "color", ")", ".", "astype", "(", "np", ".", "uint8", ")", ")", "\n", "color", ".", "save", "(", "self", ".", "img_root", "/", "'0_colorbar.jpg'", ")", "\n", "name_list", "=", "''", "\n", "for", "idx", ",", "inputs", "in", "enumerate", "(", "bar", ")", ":", "\n", "            ", "for", "key", ",", "val", "in", "inputs", ".", "items", "(", ")", ":", "\n", "                ", "if", "key", "==", "'name1'", "or", "key", "==", "'pad1'", ":", "\n", "                    ", "continue", "\n", "", "inputs", "[", "key", "]", "=", "val", ".", "to", "(", "self", ".", "device", ")", "\n", "", "message", "=", "inputs", "[", "'name1'", "]", "[", "0", "]", "\n", "outputs", "=", "self", ".", "model", ".", "extract", "(", "inputs", "[", "'im1'", "]", ")", "\n", "processed", "=", "self", ".", "process", "(", "inputs", ",", "outputs", ")", "\n", "if", "self", ".", "config", "[", "'output_desc'", "]", ":", "\n", "                ", "message", "+=", "self", ".", "save_desc", "(", "inputs", ",", "outputs", ",", "processed", ")", "\n", "", "if", "self", ".", "config", "[", "'output_img'", "]", ":", "\n", "                ", "message", "+=", "self", ".", "save_imgs", "(", "inputs", ",", "outputs", ",", "processed", ",", "idx", ")", "\n", "", "self", ".", "logger", ".", "info", "(", "message", ")", "\n", "name_list", "+=", "'{} {}\\n'", ".", "format", "(", "idx", ",", "inputs", "[", "'name1'", "]", "[", "0", "]", ")", "\n", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "", "with", "open", "(", "self", ".", "img_root", "/", "'name_list.txt'", ",", "'w'", ")", "as", "f", ":", "\n", "            ", "f", ".", "write", "(", "name_list", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.losses.kploss.DiskLoss.__init__": [[8, 19], ["torch.Module.__init__", "getattr"], "methods", ["home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.losses.preprocess.Preprocess_Skip.__init__"], ["    ", "def", "__init__", "(", "self", ",", "configs", ",", "device", "=", "None", ")", ":", "\n", "        ", "super", "(", "DiskLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "__lossname__", "=", "'DiskLoss'", "\n", "self", ".", "config", "=", "configs", "\n", "self", ".", "unfold_size", "=", "self", ".", "config", "[", "'grid_size'", "]", "\n", "self", ".", "t_base", "=", "self", ".", "config", "[", "'temperature_base'", "]", "\n", "self", ".", "t_max", "=", "self", ".", "config", "[", "'temperature_max'", "]", "\n", "self", ".", "reward", "=", "getattr", "(", "self", ",", "self", ".", "config", "[", "'epipolar_reward'", "]", ")", "\n", "self", ".", "good_reward", "=", "self", ".", "config", "[", "'good_reward'", "]", "\n", "self", ".", "bad_reward", "=", "self", ".", "config", "[", "'bad_reward'", "]", "\n", "self", ".", "kp_penalty", "=", "self", ".", "config", "[", "'kp_penalty'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.losses.kploss.DiskLoss.point_distribution": [[20, 36], ["torch.distributions.Categorical", "torch.distributions.Categorical", "torch.distributions.Categorical", "torch.distributions.Categorical.sample", "torch.distributions.Categorical.sample", "torch.distributions.Categorical.sample", "torch.distributions.Categorical.log_prob", "torch.distributions.Categorical.log_prob", "torch.distributions.Categorical.log_prob", "torch.gather().squeeze", "torch.gather().squeeze", "torch.gather().squeeze", "torch.gather().squeeze", "torch.gather().squeeze", "torch.gather().squeeze", "torch.gather().squeeze", "torch.gather().squeeze", "torch.gather().squeeze", "torch.distributions.Bernoulli", "torch.distributions.Bernoulli", "torch.distributions.Bernoulli", "torch.distributions.Bernoulli.sample", "torch.distributions.Bernoulli.sample", "torch.distributions.Bernoulli.sample", "torch.distributions.Bernoulli.log_prob", "torch.distributions.Bernoulli.log_prob", "torch.distributions.Bernoulli.log_prob", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather"], "methods", ["None"], ["", "def", "point_distribution", "(", "self", ",", "logits", ")", ":", "\n", "        ", "proposal_dist", "=", "Categorical", "(", "logits", "=", "logits", ")", "# bx1x(h//g)x(w//g)x(g*g)", "\n", "proposals", "=", "proposal_dist", ".", "sample", "(", ")", "# bx1x(h//g)x(w//g)", "\n", "proposal_logp", "=", "proposal_dist", ".", "log_prob", "(", "proposals", ")", "# bx1x(h//g)x(w//g)", "\n", "\n", "# accept_logits = select_on_last(logits, proposals).squeeze(-1)", "\n", "accept_logits", "=", "torch", ".", "gather", "(", "logits", ",", "dim", "=", "-", "1", ",", "index", "=", "proposals", "[", "...", ",", "None", "]", ")", ".", "squeeze", "(", "-", "1", ")", "# bx1x(h//g)x(w//g)", "\n", "\n", "accept_dist", "=", "Bernoulli", "(", "logits", "=", "accept_logits", ")", "\n", "accept_samples", "=", "accept_dist", ".", "sample", "(", ")", "# bx1x(h//g)x(w//g)", "\n", "accept_logp", "=", "accept_dist", ".", "log_prob", "(", "accept_samples", ")", "# for accepted points, equals to sigmoid() then log(); for denied, (1-sigmoid).log", "\n", "accept_mask", "=", "accept_samples", "==", "1.", "\n", "\n", "logp", "=", "proposal_logp", "+", "accept_logp", "\n", "\n", "return", "proposals", ",", "accept_mask", ",", "logp", "\n", "\n"]], "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.losses.kploss.DiskLoss.point_sample": [[37, 49], ["preprocess_utils.unfold", "kploss.DiskLoss.point_distribution", "preprocess_utils.gen_grid", "[].repeat().to", "grids_org.permute.permute.permute", "preprocess_utils.unfold", "preprocess_utils.unfold.gather", "preprocess_utils.unfold.gather.squeeze().permute", "[].repeat", "proposals.unsqueeze().repeat", "preprocess_utils.unfold.gather.squeeze", "proposals.unsqueeze", "grids_org.permute.permute.reshape"], "methods", ["home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.losses.preprocess_utils.unfold", "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.losses.kploss.DiskLoss.point_distribution", "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.losses.preprocess_utils.gen_grid", "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.losses.preprocess_utils.unfold"], ["", "def", "point_sample", "(", "self", ",", "kp_map", ")", ":", "\n", "        ", "kpmap_unfold", "=", "unfold", "(", "kp_map", ",", "self", ".", "unfold_size", ")", "\n", "proposals", ",", "accept_mask", ",", "logp", "=", "self", ".", "point_distribution", "(", "kpmap_unfold", ")", "\n", "\n", "b", ",", "_", ",", "h", ",", "w", "=", "kp_map", ".", "shape", "\n", "grids_org", "=", "gen_grid", "(", "h_min", "=", "0", ",", "h_max", "=", "h", "-", "1", ",", "w_min", "=", "0", ",", "w_max", "=", "w", "-", "1", ",", "len_h", "=", "h", ",", "len_w", "=", "w", ")", "\n", "grids_org", "=", "grids_org", ".", "reshape", "(", "h", ",", "w", ",", "2", ")", "[", "None", ",", ":", ",", ":", ",", ":", "]", ".", "repeat", "(", "b", ",", "1", ",", "1", ",", "1", ")", ".", "to", "(", "kp_map", ")", "\n", "grids_org", "=", "grids_org", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "# bx2xhxw", "\n", "grids_unfold", "=", "unfold", "(", "grids_org", ",", "self", ".", "unfold_size", ")", "# bx2x(h//g)x(w//g)x(g*g)", "\n", "\n", "kps", "=", "grids_unfold", ".", "gather", "(", "dim", "=", "4", ",", "index", "=", "proposals", ".", "unsqueeze", "(", "-", "1", ")", ".", "repeat", "(", "1", ",", "2", ",", "1", ",", "1", ",", "1", ")", ")", "\n", "return", "kps", ".", "squeeze", "(", "4", ")", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ",", "logp", ",", "accept_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.losses.kploss.DiskLoss.constant_reward": [[50, 90], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "preprocess_utils.homogenize().transpose", "preprocess_utils.homogenize().transpose", "fmatrix.bmm", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "fmatrix2.bmm", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "epipolar_dist2.transpose.transpose.transpose", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.abs.detach().reshape().mean", "torch.abs.detach().reshape().mean", "torch.abs.detach().reshape().mean", "epipolar_dist2.transpose.transpose.detach().reshape().mean", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "thr1.reshape.reshape.reshape", "thr2.reshape.reshape.reshape", "epipolar_dist2.transpose.transpose.new_tensor", "epipolar_dist2.transpose.transpose.new_tensor", "preprocess_utils.homogenize", "preprocess_utils.homogenize", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "epipolar_line_.transpose", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "epipolar_line2_.transpose", "[].clamp", "[].clamp", "torch.abs.detach().reshape", "torch.abs.detach().reshape", "torch.abs.detach().reshape", "epipolar_dist2.transpose.transpose.detach().reshape", "torch.abs.detach", "torch.abs.detach", "torch.abs.detach", "epipolar_dist2.transpose.transpose.detach", "torch.cat.min", "torch.cat.min", "torch.cat.min", "torch.cat.min", "torch.cat.min", "torch.cat.min"], "methods", ["home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.losses.preprocess_utils.homogenize", "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.losses.preprocess_utils.homogenize"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "constant_reward", "(", "self", ",", "inputs", ",", "outputs", ",", "coord1", ",", "coord2", ",", "reward_thr", ",", "rescale_thr", ")", ":", "\n", "        ", "coord1_h", "=", "homogenize", "(", "coord1", ")", ".", "transpose", "(", "1", ",", "2", ")", "#bx3xm", "\n", "coord2_h", "=", "homogenize", "(", "coord2", ")", ".", "transpose", "(", "1", ",", "2", ")", "#bx3xn", "\n", "fmatrix", "=", "inputs", "[", "'F1'", "]", "\n", "fmatrix2", "=", "inputs", "[", "'F2'", "]", "\n", "\n", "# compute the distance of the points in the second image", "\n", "epipolar_line", "=", "fmatrix", ".", "bmm", "(", "coord1_h", ")", "\n", "epipolar_line_", "=", "epipolar_line", "/", "torch", ".", "clamp", "(", "\n", "torch", ".", "norm", "(", "epipolar_line", "[", ":", ",", ":", "2", ",", ":", "]", ",", "p", "=", "2", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ",", "min", "=", "1e-8", ")", "\n", "epipolar_dist", "=", "torch", ".", "abs", "(", "epipolar_line_", ".", "transpose", "(", "1", ",", "2", ")", "@", "coord2_h", ")", "#bxmxn", "\n", "\n", "# compute the distance of the points in the first image", "\n", "epipolar_line2", "=", "fmatrix2", ".", "bmm", "(", "coord2_h", ")", "\n", "epipolar_line2_", "=", "epipolar_line2", "/", "torch", ".", "clamp", "(", "\n", "torch", ".", "norm", "(", "epipolar_line2", "[", ":", ",", ":", "2", ",", ":", "]", ",", "p", "=", "2", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ",", "min", "=", "1e-8", ")", "\n", "epipolar_dist2", "=", "torch", ".", "abs", "(", "epipolar_line2_", ".", "transpose", "(", "1", ",", "2", ")", "@", "coord1_h", ")", "#bxnxm", "\n", "epipolar_dist2", "=", "epipolar_dist2", ".", "transpose", "(", "1", ",", "2", ")", "#bxmxn", "\n", "\n", "if", "rescale_thr", ":", "\n", "            ", "b", ",", "_", ",", "_", "=", "epipolar_dist", ".", "shape", "\n", "dist1", "=", "epipolar_dist", ".", "detach", "(", ")", ".", "reshape", "(", "b", ",", "-", "1", ")", ".", "mean", "(", "1", ",", "True", ")", "\n", "dist2", "=", "epipolar_dist2", ".", "detach", "(", ")", ".", "reshape", "(", "b", ",", "-", "1", ")", ".", "mean", "(", "1", ",", "True", ")", "\n", "dist_", "=", "torch", ".", "cat", "(", "[", "dist1", ",", "dist2", "]", ",", "dim", "=", "1", ")", "\n", "scale1", "=", "dist1", "/", "dist_", ".", "min", "(", "1", ",", "True", ")", "[", "0", "]", ".", "clamp", "(", "1e-6", ")", "\n", "scale2", "=", "dist2", "/", "dist_", ".", "min", "(", "1", ",", "True", ")", "[", "0", "]", ".", "clamp", "(", "1e-6", ")", "\n", "thr1", "=", "reward_thr", "*", "scale1", "\n", "thr2", "=", "reward_thr", "*", "scale2", "\n", "thr1", "=", "thr1", ".", "reshape", "(", "b", ",", "1", ",", "1", ")", "\n", "thr2", "=", "thr2", ".", "reshape", "(", "b", ",", "1", ",", "1", ")", "\n", "", "else", ":", "\n", "            ", "thr1", "=", "reward_thr", "\n", "thr2", "=", "reward_thr", "\n", "scale1", "=", "epipolar_dist2", ".", "new_tensor", "(", "1.", ")", "\n", "scale2", "=", "epipolar_dist2", ".", "new_tensor", "(", "1.", ")", "\n", "\n", "", "good", "=", "(", "epipolar_dist", "<", "thr1", ")", "&", "(", "epipolar_dist2", "<", "thr2", ")", "\n", "reward", "=", "self", ".", "good_reward", "*", "good", "+", "self", ".", "bad_reward", "*", "(", "~", "good", ")", "\n", "return", "reward", ",", "scale1", ",", "scale2", "\n", "\n"]], "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.losses.kploss.DiskLoss.dynamic_reward": [[91, 131], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "preprocess_utils.homogenize().transpose", "preprocess_utils.homogenize().transpose", "fmatrix.bmm", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "fmatrix2.bmm", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "epipolar_dist2.transpose.transpose.transpose", "reward.clamp.clamp.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.abs.detach().reshape().mean", "torch.abs.detach().reshape().mean", "torch.abs.detach().reshape().mean", "epipolar_dist2.transpose.transpose.detach().reshape().mean", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "thr1.reshape.reshape.reshape", "thr2.reshape.reshape.reshape", "epipolar_dist2.transpose.transpose.new_tensor", "epipolar_dist2.transpose.transpose.new_tensor", "preprocess_utils.homogenize", "preprocess_utils.homogenize", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "epipolar_line_.transpose", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "epipolar_line2_.transpose", "[].clamp", "[].clamp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp().to", "torch.exp().to", "torch.exp().to", "torch.exp().to", "torch.exp().to", "torch.exp().to", "torch.exp().to", "torch.exp().to", "torch.exp().to", "torch.abs.detach().reshape", "torch.abs.detach().reshape", "torch.abs.detach().reshape", "epipolar_dist2.transpose.transpose.detach().reshape", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.abs.detach", "torch.abs.detach", "torch.abs.detach", "epipolar_dist2.transpose.transpose.detach", "torch.cat.min", "torch.cat.min", "torch.cat.min", "torch.cat.min", "torch.cat.min", "torch.cat.min", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like"], "methods", ["home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.losses.preprocess_utils.homogenize", "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.losses.preprocess_utils.homogenize"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "dynamic_reward", "(", "self", ",", "inputs", ",", "outputs", ",", "coord1", ",", "coord2", ",", "reward_thr", ",", "rescale_thr", ")", ":", "\n", "        ", "coord1_h", "=", "homogenize", "(", "coord1", ")", ".", "transpose", "(", "1", ",", "2", ")", "#bx3xm", "\n", "coord2_h", "=", "homogenize", "(", "coord2", ")", ".", "transpose", "(", "1", ",", "2", ")", "#bx3xn", "\n", "fmatrix", "=", "inputs", "[", "'F1'", "]", "\n", "fmatrix2", "=", "inputs", "[", "'F2'", "]", "\n", "\n", "# compute the distance of the points in the second image", "\n", "epipolar_line", "=", "fmatrix", ".", "bmm", "(", "coord1_h", ")", "\n", "epipolar_line_", "=", "epipolar_line", "/", "torch", ".", "clamp", "(", "\n", "torch", ".", "norm", "(", "epipolar_line", "[", ":", ",", ":", "2", ",", ":", "]", ",", "p", "=", "2", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ",", "min", "=", "1e-8", ")", "\n", "epipolar_dist", "=", "torch", ".", "abs", "(", "epipolar_line_", ".", "transpose", "(", "1", ",", "2", ")", "@", "coord2_h", ")", "#bxmxn", "\n", "\n", "# compute the distance of the points in the first image", "\n", "epipolar_line2", "=", "fmatrix2", ".", "bmm", "(", "coord2_h", ")", "\n", "epipolar_line2_", "=", "epipolar_line2", "/", "torch", ".", "clamp", "(", "\n", "torch", ".", "norm", "(", "epipolar_line2", "[", ":", ",", ":", "2", ",", ":", "]", ",", "p", "=", "2", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ",", "min", "=", "1e-8", ")", "\n", "epipolar_dist2", "=", "torch", ".", "abs", "(", "epipolar_line2_", ".", "transpose", "(", "1", ",", "2", ")", "@", "coord1_h", ")", "#bxnxm", "\n", "epipolar_dist2", "=", "epipolar_dist2", ".", "transpose", "(", "1", ",", "2", ")", "#bxmxn", "\n", "\n", "if", "rescale_thr", ":", "\n", "            ", "b", ",", "_", ",", "_", "=", "epipolar_dist", ".", "shape", "\n", "dist1", "=", "epipolar_dist", ".", "detach", "(", ")", ".", "reshape", "(", "b", ",", "-", "1", ")", ".", "mean", "(", "1", ",", "True", ")", "\n", "dist2", "=", "epipolar_dist2", ".", "detach", "(", ")", ".", "reshape", "(", "b", ",", "-", "1", ")", ".", "mean", "(", "1", ",", "True", ")", "\n", "dist_", "=", "torch", ".", "cat", "(", "[", "dist1", ",", "dist2", "]", ",", "dim", "=", "1", ")", "\n", "scale1", "=", "dist1", "/", "dist_", ".", "min", "(", "1", ",", "True", ")", "[", "0", "]", ".", "clamp", "(", "1e-6", ")", "\n", "scale2", "=", "dist2", "/", "dist_", ".", "min", "(", "1", ",", "True", ")", "[", "0", "]", ".", "clamp", "(", "1e-6", ")", "\n", "thr1", "=", "reward_thr", "*", "scale1", "\n", "thr2", "=", "reward_thr", "*", "scale2", "\n", "thr1", "=", "thr1", ".", "reshape", "(", "b", ",", "1", ",", "1", ")", "\n", "thr2", "=", "thr2", ".", "reshape", "(", "b", ",", "1", ",", "1", ")", "\n", "", "else", ":", "\n", "            ", "thr1", "=", "reward_thr", "\n", "thr2", "=", "reward_thr", "\n", "scale1", "=", "epipolar_dist2", ".", "new_tensor", "(", "1.", ")", "\n", "scale2", "=", "epipolar_dist2", ".", "new_tensor", "(", "1.", ")", "\n", "\n", "", "reward", "=", "torch", ".", "exp", "(", "-", "epipolar_dist", "/", "thr1", ")", "+", "torch", ".", "exp", "(", "-", "epipolar_dist2", "/", "thr2", ")", "-", "2", "/", "torch", ".", "exp", "(", "torch", ".", "ones_like", "(", "epipolar_dist", ")", ")", ".", "to", "(", "epipolar_dist", ")", "\n", "reward", "=", "reward", ".", "clamp", "(", "min", "=", "self", ".", "bad_reward", ")", "\n", "return", "reward", ",", "scale1", ",", "scale2", "\n", "\n"]], "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.losses.kploss.DiskLoss.forward": [[132, 198], ["min", "kploss.DiskLoss.point_sample", "kploss.DiskLoss.point_sample", "coord1.reshape.reshape.reshape", "coord2.reshape.reshape.reshape", "preprocess_utils.normalize_coords", "preprocess_utils.normalize_coords", "preprocess_utils.sample_feat_by_coord", "preprocess_utils.sample_feat_by_coord", "torch.distributions.Categorical", "torch.distributions.Categorical", "torch.distributions.Categorical", "torch.distributions.Categorical", "torch.distributions.Categorical", "torch.distributions.Categorical", "kploss.DiskLoss.reward", "dense_p.detach.detach", "torch.distributions.Categorical.probs.transpose", "torch.distributions.Categorical.probs.transpose", "torch.distributions.Categorical.probs.transpose", "torch.distributions.Categorical.logits.transpose", "torch.distributions.Categorical.logits.transpose", "torch.distributions.Categorical.logits.transpose", "dense_p.detach", "logp1.reshape().transpose", "logp2.reshape", "accept_mask1.reshape().transpose", "accept_mask2.reshape", "reinforce.detach", "kp_penalty.detach", "[].min", "dense_p.detach.detach.view().mean().min", "dense_p.detach.detach.max", "dense_p.detach.detach.mean", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "dense_p.detach.detach().sum().sum().mean", "dense_p.detach.detach.new_tensor", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "affinity.transpose", "logp1[].sum", "logp2[].sum", "dense_p.detach.detach.sum().min", "dense_p.detach.detach.sum().min", "dense_p.detach.detach.sum().max", "dense_p.detach.detach.sum().max", "preprocess_utils.sample_feat_by_coord.transpose", "logp1.reshape", "accept_mask1.reshape", "dense_p.detach.detach.view().mean", "dense_p.detach.detach().sum().sum", "preprocess_utils.sample_feat_by_coord.transpose", "dense_p.detach.detach.view().max", "dense_p.detach.detach.sum", "dense_p.detach.detach.sum", "dense_p.detach.detach.sum", "dense_p.detach.detach.sum", "dense_p.detach.detach.view", "dense_p.detach.detach().sum", "dense_p.detach.detach.view", "accept_mask1.detach().reshape().sum", "accept_mask2.detach().reshape().sum", "dense_p.detach.detach", "accept_mask1.detach().reshape", "accept_mask2.detach().reshape", "accept_mask1.detach", "accept_mask2.detach"], "methods", ["home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.losses.kploss.DiskLoss.point_sample", "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.losses.kploss.DiskLoss.point_sample", "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.losses.preprocess_utils.normalize_coords", "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.losses.preprocess_utils.normalize_coords", "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.losses.preprocess_utils.sample_feat_by_coord", "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.losses.preprocess_utils.sample_feat_by_coord"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "outputs", ",", "processed", ")", ":", "\n", "        ", "preds1", "=", "outputs", "[", "'preds1'", "]", "\n", "preds2", "=", "outputs", "[", "'preds2'", "]", "\n", "kp_map1", ",", "kp_map2", "=", "preds1", "[", "'local_point'", "]", ",", "preds2", "[", "'local_point'", "]", "\n", "xf1", ",", "xf2", "=", "preds1", "[", "'local_map'", "]", ",", "preds2", "[", "'local_map'", "]", "\n", "b", ",", "c", ",", "h4", ",", "w4", "=", "xf1", ".", "shape", "\n", "_", ",", "_", ",", "h", ",", "w", "=", "kp_map1", ".", "shape", "\n", "temperature", "=", "min", "(", "self", ".", "t_base", "+", "outputs", "[", "'epoch'", "]", ",", "self", ".", "t_max", ")", "\n", "\n", "coord1", ",", "logp1", ",", "accept_mask1", "=", "self", ".", "point_sample", "(", "kp_map1", ")", "# bx(h//g)x(w//g)x2 bx1x(h//g)x(w//g) bx1x(h//g)x(w//g)", "\n", "coord2", ",", "logp2", ",", "accept_mask2", "=", "self", ".", "point_sample", "(", "kp_map2", ")", "\n", "coord1", "=", "coord1", ".", "reshape", "(", "b", ",", "-", "1", ",", "2", ")", "\n", "coord2", "=", "coord2", ".", "reshape", "(", "b", ",", "-", "1", ",", "2", ")", "\n", "\n", "coord1_n", "=", "normalize_coords", "(", "coord1", ",", "h", ",", "w", ")", "# bx((h//g)*(w//g))x2", "\n", "coord2_n", "=", "normalize_coords", "(", "coord2", ",", "h", ",", "w", ")", "\n", "\n", "# feat1 = F.grid_sample(xf1, coord1_n, align_corners=False).reshape(b,c,-1) # bxcx((h//g)*(w//g))", "\n", "# feat2 = F.grid_sample(xf2, coord2_n, align_corners=False).reshape(b,c,-1)", "\n", "feat1", "=", "sample_feat_by_coord", "(", "xf1", ",", "coord1_n", ",", "self", ".", "config", "[", "'loss_distance'", "]", "==", "'cos'", ")", "#bxmxc", "\n", "feat2", "=", "sample_feat_by_coord", "(", "xf2", ",", "coord2_n", ",", "self", ".", "config", "[", "'loss_distance'", "]", "==", "'cos'", ")", "#bxnxc", "\n", "\n", "# matching", "\n", "if", "self", ".", "config", "[", "'match_grad'", "]", ":", "\n", "            ", "costs", "=", "1", "-", "feat1", "@", "feat2", ".", "transpose", "(", "1", ",", "2", ")", "# bxmxn 0-2", "\n", "", "else", ":", "\n", "            ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "costs", "=", "1", "-", "feat1", "@", "feat2", ".", "transpose", "(", "1", ",", "2", ")", "# bxmxn 0-2", "\n", "", "", "affinity", "=", "-", "temperature", "*", "costs", "\n", "\n", "cat_I", "=", "Categorical", "(", "logits", "=", "affinity", ")", "\n", "cat_T", "=", "Categorical", "(", "logits", "=", "affinity", ".", "transpose", "(", "1", ",", "2", ")", ")", "\n", "\n", "dense_p", "=", "cat_I", ".", "probs", "*", "cat_T", ".", "probs", ".", "transpose", "(", "1", ",", "2", ")", "\n", "dense_logp", "=", "cat_I", ".", "logits", "+", "cat_T", ".", "logits", ".", "transpose", "(", "1", ",", "2", ")", "\n", "\n", "if", "self", ".", "config", "[", "'cor_detach'", "]", ":", "\n", "            ", "sample_p", "=", "dense_p", ".", "detach", "(", ")", "\n", "", "else", ":", "\n", "            ", "sample_p", "=", "dense_p", "\n", "\n", "", "reward", ",", "scale1", ",", "scale2", "=", "self", ".", "reward", "(", "inputs", ",", "outputs", ",", "coord1", ",", "coord2", ",", "**", "self", ".", "config", "[", "'reward_config'", "]", ")", "\n", "\n", "kps_logp", "=", "logp1", ".", "reshape", "(", "b", ",", "1", ",", "-", "1", ")", ".", "transpose", "(", "1", ",", "2", ")", "+", "logp2", ".", "reshape", "(", "b", ",", "1", ",", "-", "1", ")", "# bxmxn", "\n", "sample_plogp", "=", "sample_p", "*", "(", "dense_logp", "+", "kps_logp", ")", "\n", "accept_mask", "=", "accept_mask1", ".", "reshape", "(", "b", ",", "1", ",", "-", "1", ")", ".", "transpose", "(", "1", ",", "2", ")", "*", "accept_mask2", ".", "reshape", "(", "b", ",", "1", ",", "-", "1", ")", "# bxmxn", "\n", "\n", "reinforce", "=", "(", "reward", "[", "accept_mask", "]", "*", "sample_plogp", "[", "accept_mask", "]", ")", ".", "sum", "(", ")", "\n", "kp_penalty", "=", "self", ".", "kp_penalty", "*", "(", "logp1", "[", "accept_mask1", "]", ".", "sum", "(", ")", "+", "logp2", "[", "accept_mask2", "]", ".", "sum", "(", ")", ")", "\n", "\n", "loss", "=", "-", "reinforce", "-", "kp_penalty", "\n", "\n", "sample_p_detach", "=", "sample_p", ".", "detach", "(", ")", "\n", "components", "=", "{", "'reinforce'", ":", "reinforce", ".", "detach", "(", ")", ",", "'kp_penalty'", ":", "kp_penalty", ".", "detach", "(", ")", ",", "\n", "'scale1'", ":", "scale1", ",", "'scale2'", ":", "scale2", ",", "\n", "'cor minmax'", ":", "sample_p_detach", ".", "view", "(", "b", ",", "-", "1", ")", ".", "max", "(", "-", "1", ")", "[", "0", "]", ".", "min", "(", ")", ",", "\n", "'cor minmean'", ":", "sample_p_detach", ".", "view", "(", "b", ",", "-", "1", ")", ".", "mean", "(", "-", "1", ")", ".", "min", "(", ")", ",", "\n", "'cor max'", ":", "sample_p_detach", ".", "max", "(", ")", ",", "\n", "'cor mean'", ":", "sample_p_detach", ".", "mean", "(", ")", ",", "\n", "'cor summin'", ":", "torch", ".", "min", "(", "sample_p_detach", ".", "sum", "(", "1", ")", ".", "min", "(", ")", ",", "sample_p_detach", ".", "sum", "(", "2", ")", ".", "min", "(", ")", ")", ",", "\n", "'cor summax'", ":", "torch", ".", "max", "(", "sample_p_detach", ".", "sum", "(", "1", ")", ".", "max", "(", ")", ",", "sample_p_detach", ".", "sum", "(", "2", ")", ".", "max", "(", ")", ")", ",", "\n", "'n_kps'", ":", "(", "accept_mask1", ".", "detach", "(", ")", ".", "reshape", "(", "b", ",", "1", ",", "-", "1", ")", ".", "sum", "(", "-", "1", ")", "+", "accept_mask2", ".", "detach", "(", ")", ".", "reshape", "(", "b", ",", "1", ",", "-", "1", ")", ".", "sum", "(", "-", "1", ")", ")", ".", "float", "(", ")", ".", "mean", "(", ")", ",", "\n", "'n_pairs'", ":", "sample_p", ".", "detach", "(", ")", ".", "sum", "(", "-", "1", ")", ".", "sum", "(", "-", "1", ")", ".", "mean", "(", ")", ",", "\n", "'temperature'", ":", "sample_p_detach", ".", "new_tensor", "(", "temperature", ")", "\n", "}", "\n", "return", "loss", ",", "components", "", "", "", ""]], "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.losses.epipolarloss.EpipolarLoss_full.__init__": [[9, 15], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.losses.preprocess.Preprocess_Skip.__init__"], ["    ", "def", "__init__", "(", "self", ",", "configs", ",", "device", "=", "None", ")", ":", "\n", "        ", "super", "(", "EpipolarLoss_full", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "__lossname__", "=", "'EpipolarLoss_fullinfo'", "\n", "self", ".", "config", "=", "configs", "\n", "self", ".", "w_g", "=", "self", ".", "config", "[", "'weight_grid'", "]", "\n", "self", ".", "w_w", "=", "self", ".", "config", "[", "'weight_window'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.losses.epipolarloss.EpipolarLoss_full.epipolar_cost": [[16, 23], ["preprocess_utils.homogenize().transpose", "preprocess_utils.homogenize().transpose", "fmatrix.bmm", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "preprocess_utils.homogenize", "preprocess_utils.homogenize", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm"], "methods", ["home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.losses.preprocess_utils.homogenize", "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.losses.preprocess_utils.homogenize"], ["", "def", "epipolar_cost", "(", "self", ",", "coord1", ",", "coord2", ",", "fmatrix", ",", "im_size", ")", ":", "\n", "        ", "coord1_h", "=", "homogenize", "(", "coord1", ")", ".", "transpose", "(", "1", ",", "2", ")", "\n", "coord2_h", "=", "homogenize", "(", "coord2", ")", ".", "transpose", "(", "1", ",", "2", ")", "\n", "epipolar_line", "=", "fmatrix", ".", "bmm", "(", "coord1_h", ")", "# Bx3xn", "\n", "epipolar_line_", "=", "epipolar_line", "/", "torch", ".", "clamp", "(", "torch", ".", "norm", "(", "epipolar_line", "[", ":", ",", ":", "2", ",", ":", "]", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ",", "min", "=", "1e-8", ")", "\n", "essential_cost", "=", "torch", ".", "abs", "(", "torch", ".", "sum", "(", "coord2_h", "*", "epipolar_line_", ",", "dim", "=", "1", ")", ")", "# Bxn", "\n", "return", "essential_cost", "\n", "\n"]], "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.losses.epipolarloss.EpipolarLoss_full.set_weight": [[25, 37], ["torch.ones_like.detach", "torch.ones_like.detach", "torch.ones_like.detach", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "mask.float", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean"], "methods", ["None"], ["", "def", "set_weight", "(", "self", ",", "inverse_std", ",", "mask", "=", "None", ",", "regularizer", "=", "0.0", ")", ":", "\n", "        ", "if", "self", ".", "config", "[", "'use_std_as_weight'", "]", ":", "\n", "# inverse_std = 1. / torch.clamp(std+regularizer, min=1e-10)", "\n", "            ", "weight", "=", "inverse_std", "/", "torch", ".", "mean", "(", "inverse_std", ")", "\n", "weight", "=", "weight", ".", "detach", "(", ")", "# Bxn", "\n", "", "else", ":", "\n", "            ", "weight", "=", "torch", ".", "ones_like", "(", "std", ")", "\n", "\n", "", "if", "mask", "is", "not", "None", ":", "\n", "            ", "weight", "*=", "mask", ".", "float", "(", ")", "\n", "weight", "/=", "(", "torch", ".", "mean", "(", "weight", ")", "+", "1e-8", ")", "\n", "", "return", "weight", "\n", "\n"]], "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.losses.epipolarloss.EpipolarLoss_full.forward": [[38, 102], ["epipolarloss.EpipolarLoss_full.epipolar_cost", "epipolarloss.EpipolarLoss_full.epipolar_cost", "epipolarloss.EpipolarLoss_full.epipolar_cost", "epipolarloss.EpipolarLoss_full.epipolar_cost", "epipolarloss.EpipolarLoss_full.set_weight", "epipolarloss.EpipolarLoss_full.set_weight", "epipolarloss.EpipolarLoss_full.set_weight", "epipolarloss.EpipolarLoss_full.set_weight", "inputs[].size", "inputs[].size", "min", "max", "list", "processed.keys", "feat1g_std.clamp", "feat1w_std.clamp", "feat2g_std.clamp", "feat2w_std.clamp", "mask_g1.sum", "mask_g2.sum", "mask_w1.sum", "mask_w2.sum"], "methods", ["home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.losses.epipolarloss.EpipolarLoss_full.epipolar_cost", "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.losses.epipolarloss.EpipolarLoss_full.epipolar_cost", "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.losses.epipolarloss.EpipolarLoss_full.epipolar_cost", "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.losses.epipolarloss.EpipolarLoss_full.epipolar_cost", "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.losses.epipolarloss.EpipolarLoss_full.set_weight", "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.losses.epipolarloss.EpipolarLoss_full.set_weight", "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.losses.epipolarloss.EpipolarLoss_full.set_weight", "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.losses.epipolarloss.EpipolarLoss_full.set_weight"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "outputs", ",", "processed", ")", ":", "\n", "        ", "coord1", "=", "processed", "[", "'coord1'", "]", "\n", "coord2", "=", "processed", "[", "'coord2'", "]", "\n", "temperature", "=", "processed", "[", "'temperature'", "]", "\n", "\n", "feat1g_corloc", "=", "processed", "[", "'feat1g_corloc'", "]", "\n", "feat2g_corloc", "=", "processed", "[", "'feat2g_corloc'", "]", "\n", "feat1w_corloc", "=", "processed", "[", "'feat1w_corloc'", "]", "\n", "feat2w_corloc", "=", "processed", "[", "'feat2w_corloc'", "]", "\n", "\n", "feat1g_std", "=", "processed", "[", "'feat1g_std'", "]", "\n", "feat2g_std", "=", "processed", "[", "'feat2g_std'", "]", "\n", "feat1w_std", "=", "processed", "[", "'feat1w_std'", "]", "\n", "feat2w_std", "=", "processed", "[", "'feat2w_std'", "]", "\n", "\n", "Fmat1", "=", "inputs", "[", "'F1'", "]", "\n", "Fmat2", "=", "inputs", "[", "'F2'", "]", "\n", "im_size1", "=", "inputs", "[", "'im1'", "]", ".", "size", "(", ")", "[", "2", ":", "]", "\n", "im_size2", "=", "inputs", "[", "'im2'", "]", ".", "size", "(", ")", "[", "2", ":", "]", "\n", "shorter_edge", ",", "longer_edge", "=", "min", "(", "im_size1", ")", ",", "max", "(", "im_size1", ")", "\n", "\n", "cost_g1", "=", "self", ".", "epipolar_cost", "(", "coord1", ",", "feat1g_corloc", ",", "Fmat1", ",", "im_size1", ")", "\n", "cost_w1", "=", "self", ".", "epipolar_cost", "(", "coord1", ",", "feat1w_corloc", ",", "Fmat1", ",", "im_size1", ")", "\n", "\n", "cost_g2", "=", "self", ".", "epipolar_cost", "(", "coord2", ",", "feat2g_corloc", ",", "Fmat2", ",", "im_size2", ")", "\n", "cost_w2", "=", "self", ".", "epipolar_cost", "(", "coord2", ",", "feat2w_corloc", ",", "Fmat2", ",", "im_size2", ")", "\n", "\n", "# filter out the large values, similar to CAPS", "\n", "# \u53bb\u9664\u5f02\u5e38loss\uff0c\u53c2\u8003CAPS", "\n", "mask_g1", "=", "cost_g1", "<", "(", "shorter_edge", "*", "self", ".", "config", "[", "'grid_cost_thr'", "]", ")", "\n", "mask_w1", "=", "cost_w1", "<", "(", "shorter_edge", "*", "self", ".", "config", "[", "'win_cost_thr'", "]", ")", "\n", "mask_g2", "=", "cost_g2", "<", "(", "shorter_edge", "*", "self", ".", "config", "[", "'grid_cost_thr'", "]", ")", "\n", "mask_w2", "=", "cost_w2", "<", "(", "shorter_edge", "*", "self", ".", "config", "[", "'win_cost_thr'", "]", ")", "\n", "\n", "if", "'valid_epi1'", "in", "list", "(", "processed", ".", "keys", "(", ")", ")", ":", "\n", "            ", "mask_g1", "=", "mask_g1", "&", "processed", "[", "'valid_epi1'", "]", "\n", "mask_w1", "=", "mask_w1", "&", "processed", "[", "'valid_epi1'", "]", "\n", "mask_g2", "=", "mask_g2", "&", "processed", "[", "'valid_epi2'", "]", "\n", "mask_w2", "=", "mask_w2", "&", "processed", "[", "'valid_epi2'", "]", "\n", "", "weight_w1", "=", "1", "\n", "weight_w2", "=", "1", "\n", "\n", "weight_g1", "=", "self", ".", "set_weight", "(", "1", "/", "feat1g_std", ".", "clamp", "(", "min", "=", "1e-10", ")", ",", "mask_g1", ")", "\n", "weight_w1", "=", "self", ".", "set_weight", "(", "weight_w1", "/", "feat1w_std", ".", "clamp", "(", "min", "=", "1e-10", ")", ",", "mask_w1", ")", "\n", "weight_g2", "=", "self", ".", "set_weight", "(", "1", "/", "feat2g_std", ".", "clamp", "(", "min", "=", "1e-10", ")", ",", "mask_g2", ")", "\n", "weight_w2", "=", "self", ".", "set_weight", "(", "weight_w2", "/", "feat2w_std", ".", "clamp", "(", "min", "=", "1e-10", ")", ",", "mask_w2", ")", "\n", "\n", "loss_g1", "=", "(", "weight_g1", "*", "cost_g1", ")", ".", "mean", "(", ")", "\n", "loss_w1", "=", "(", "weight_w1", "*", "cost_w1", ")", ".", "mean", "(", ")", "\n", "loss_g2", "=", "(", "weight_g2", "*", "cost_g2", ")", ".", "mean", "(", ")", "\n", "loss_w2", "=", "(", "weight_w2", "*", "cost_w2", ")", ".", "mean", "(", ")", "\n", "\n", "loss", "=", "self", ".", "w_g", "*", "(", "loss_g1", "+", "loss_g2", ")", "+", "self", ".", "w_w", "*", "(", "loss_w1", "+", "loss_w2", ")", "\n", "\n", "percent_g", "=", "(", "mask_g1", ".", "sum", "(", ")", "/", "(", "mask_g1", ".", "shape", "[", "0", "]", "*", "mask_g1", ".", "shape", "[", "1", "]", ")", "+", "mask_g2", ".", "sum", "(", ")", "/", "(", "mask_g2", ".", "shape", "[", "0", "]", "*", "mask_g2", ".", "shape", "[", "1", "]", ")", ")", "/", "2", "\n", "percent_w", "=", "(", "mask_w1", ".", "sum", "(", ")", "/", "(", "mask_w1", ".", "shape", "[", "0", "]", "*", "mask_w1", ".", "shape", "[", "1", "]", ")", "+", "mask_w2", ".", "sum", "(", ")", "/", "(", "mask_w2", ".", "shape", "[", "0", "]", "*", "mask_w2", ".", "shape", "[", "1", "]", ")", ")", "/", "2", "\n", "\n", "components", "=", "{", "\n", "'loss_g1'", ":", "loss_g1", ",", "'loss_w1'", ":", "loss_w1", ",", "\n", "'loss_g2'", ":", "loss_g2", ",", "'loss_w2'", ":", "loss_w2", ",", "\n", "'percent_g'", ":", "percent_g", ",", "'percent_w'", ":", "percent_w", "\n", "}", "\n", "\n", "return", "loss", ",", "components", "", "", "", ""]], "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.losses.preprocess.Preprocess_Line2Window.__init__": [[11, 20], ["torch.Module.__init__", "getattr"], "methods", ["home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.losses.preprocess.Preprocess_Skip.__init__"], ["def", "__init__", "(", "self", ",", "configs", ",", "device", "=", "None", ",", "vis", "=", "False", ")", ":", "\n", "        ", "super", "(", "Preprocess_Line2Window", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "__lossname__", "=", "'Preprocess_Line2Window'", "\n", "self", ".", "config", "=", "configs", "\n", "self", ".", "kps_generator", "=", "getattr", "(", "putils", ",", "self", ".", "config", "[", "'kps_generator'", "]", ")", "\n", "self", ".", "t_base", "=", "self", ".", "config", "[", "'temperature_base'", "]", "\n", "self", ".", "t_max", "=", "self", ".", "config", "[", "'temperature_max'", "]", "\n", "if", "device", "is", "not", "None", ":", "\n", "            ", "self", ".", "device", "=", "device", "\n", "\n"]], "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.losses.preprocess.Preprocess_Line2Window.name": [[21, 23], ["None"], "methods", ["None"], ["", "", "def", "name", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__lossname__", "\n", "\n"]], "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.losses.preprocess.Preprocess_Line2Window.forward": [[24, 118], ["min", "preprocess.Preprocess_Line2Window.kps_generator", "preprocess_utils.denormalize_coords", "preprocess_utils.denormalize_coords", "preprocess_utils.sample_feat_by_coord", "preprocess_utils.sample_feat_by_coord", "feat1g_corloc.sum.sum.sum", "feat2g_corloc.sum.sum.sum", "feat1g_std.clamp().sqrt().sum.clamp().sqrt().sum.clamp().sqrt().sum", "feat2g_std.clamp().sqrt().sum.clamp().sqrt().sum.clamp().sqrt().sum", "preprocess_utils.get_expected_correspondence_within_window", "preprocess_utils.get_expected_correspondence_within_window", "preprocess_utils.denormalize_coords", "preprocess_utils.denormalize_coords", "inputs[].size", "inputs[].size", "coord1_n.reshape", "coord2_n.reshape", "coord1_n.reshape", "coord2_n.reshape", "preprocess_utils.sample_feat_by_coord.transpose", "torch.softmax().unsqueeze", "torch.softmax().unsqueeze", "torch.softmax().unsqueeze", "preprocess_utils.denormalize_coords.reshape().unsqueeze", "torch.softmax().unsqueeze", "torch.softmax().unsqueeze", "torch.softmax().unsqueeze", "preprocess_utils.denormalize_coords.reshape().unsqueeze", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.softmax().unsqueeze", "torch.softmax().unsqueeze", "torch.softmax().unsqueeze", "feat1g_std.clamp().sqrt().sum.clamp().sqrt().sum.sum", "torch.softmax().unsqueeze", "torch.softmax().unsqueeze", "torch.softmax().unsqueeze", "feat2g_std.clamp().sqrt().sum.clamp().sqrt().sum.sum", "preprocess_utils.epipolar_line_search", "preprocess_utils.epipolar_line_search", "preprocess_utils.denormalize_coords", "preprocess_utils.denormalize_coords", "preprocess_utils.normalize_coords.detach", "preprocess_utils.normalize_coords.detach", "torch.ones_like().bool", "torch.ones_like().bool", "torch.ones_like().bool", "torch.ones_like().bool", "torch.ones_like().bool", "torch.ones_like().bool", "torch.ones_like().bool", "torch.ones_like().bool", "torch.ones_like().bool", "torch.ones_like().bool", "torch.ones_like().bool", "torch.ones_like().bool", "torch.ones_like().bool", "torch.ones_like().bool", "torch.ones_like().bool", "torch.ones_like().bool", "torch.ones_like().bool", "torch.ones_like().bool", "cor_mat.max", "coord2_n.reshape().gather", "cor_mat.max", "coord1_n.reshape().gather", "preprocess_utils.normalize_coords", "preprocess_utils.normalize_coords", "coord2_n.reshape", "feat1g_std.clamp().sqrt().sum.clamp().sqrt().sum.clamp().sqrt", "coord1_n.reshape", "feat2g_std.clamp().sqrt().sum.clamp().sqrt().sum.clamp().sqrt", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.softmax", "torch.softmax", "torch.softmax", "preprocess_utils.denormalize_coords.reshape", "torch.softmax", "torch.softmax", "torch.softmax", "preprocess_utils.denormalize_coords.reshape", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "coord2_n.reshape", "max_idx1[].repeat", "coord1_n.reshape", "max_idx2[].repeat", "feat1g_std.clamp().sqrt().sum.clamp().sqrt().sum.clamp", "feat2g_std.clamp().sqrt().sum.clamp().sqrt().sum.clamp"], "methods", ["home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.losses.preprocess_utils.denormalize_coords", "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.losses.preprocess_utils.denormalize_coords", "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.losses.preprocess_utils.sample_feat_by_coord", "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.losses.preprocess_utils.sample_feat_by_coord", "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.losses.preprocess_utils.get_expected_correspondence_within_window", "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.losses.preprocess_utils.get_expected_correspondence_within_window", "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.losses.preprocess_utils.denormalize_coords", "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.losses.preprocess_utils.denormalize_coords", "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.losses.preprocess_utils.epipolar_line_search", "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.losses.preprocess_utils.epipolar_line_search", "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.losses.preprocess_utils.denormalize_coords", "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.losses.preprocess_utils.denormalize_coords", "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.losses.preprocess_utils.normalize_coords", "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.losses.preprocess_utils.normalize_coords"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "outputs", ")", ":", "\n", "        ", "preds1", "=", "outputs", "[", "'preds1'", "]", "\n", "preds2", "=", "outputs", "[", "'preds2'", "]", "\n", "\n", "xc1", ",", "xf1", "=", "preds1", "[", "'global_map'", "]", ",", "preds1", "[", "'local_map'", "]", "\n", "xc2", ",", "xf2", "=", "preds2", "[", "'global_map'", "]", ",", "preds2", "[", "'local_map'", "]", "\n", "h1i", ",", "w1i", "=", "inputs", "[", "'im1'", "]", ".", "size", "(", ")", "[", "2", ":", "]", "\n", "h2i", ",", "w2i", "=", "inputs", "[", "'im2'", "]", ".", "size", "(", ")", "[", "2", ":", "]", "\n", "b", ",", "_", ",", "hf", ",", "wf", "=", "xf1", ".", "shape", "\n", "temperature", "=", "min", "(", "self", ".", "t_base", "+", "outputs", "[", "'epoch'", "]", ",", "self", ".", "t_max", ")", "\n", "\n", "\"\"\"\n        firstly, we search locate the correspondence with grid points\n        with keep_spatial==True, coord (score) is with bxhxwx2 (bxhxwx1)\n        with keep_spatial==False, coord (score) is with bx(h*w)x2 (bx(h*w)x1)\n        the keep_spatial is defined in self.config['kps_generator_config']\n        \u9996\u5148\uff0c\u6211\u4eec\u968f\u6240\u6709\u7684\u62bd\u6837\u70b9\u8fdb\u884c\u5339\u914d\u641c\u7d22\n        \u5728\u914d\u7f6e\u6587\u4ef6\u4e2d\u6709\u4e00\u4e2a\u9009\u9879 keep_spatial \u53ef\u4ee5\u63a7\u5236\u8f93\u51fa\u7684\u62bd\u6837\u70b9\u7684shape\n\n        This is a coarse search with grid points matching,which is similar to the coarse search in caps\n        in fact this coarse matching is just for ablation, and the results are not used in the final loss\n        you can comment out this search\n        \u8fd9\u91cc\u5305\u542b\u4e86\u4e00\u90e8\u5206\u7c97\u7565\u5339\u914d\u7684\u4ee3\u7801\uff0c\u7c7b\u4f3c\u4e8eCAPS\u4e2d\u7684\u7c97\u7565\u5339\u914d\n        \u7c97\u5339\u914d\u7684\u7ed3\u679c\u662f\u6700\u5f00\u59cb\u5b9e\u9a8c\u65f6\u8fdb\u884c\u7684\u63a2\u7d22\uff0c\u5b9e\u9645\u4e0a\u5e76\u6ca1\u6709\u7528\u4e8e\u6700\u540e\u7684\u635f\u5931\u51fd\u6570\u8ba1\u7b97\n        \u53ef\u4ee5\u6ce8\u91ca\u6389\u7c97\u7565\u5339\u914d\u7684\u4ee3\u7801\n        \"\"\"", "\n", "\n", "coord1_n", ",", "coord2_n", ",", "score1", ",", "score2", "=", "self", ".", "kps_generator", "(", "inputs", ",", "outputs", ",", "**", "self", ".", "config", "[", "'kps_generator_config'", "]", ")", "\n", "_", ",", "hkps", ",", "wkps", ",", "_", "=", "coord1_n", ".", "shape", "\n", "coord1", "=", "denormalize_coords", "(", "coord1_n", ".", "reshape", "(", "b", ",", "-", "1", ",", "2", ")", ",", "h1i", ",", "w1i", ")", "\n", "coord2", "=", "denormalize_coords", "(", "coord2_n", ".", "reshape", "(", "b", ",", "-", "1", ",", "2", ")", ",", "h2i", ",", "w2i", ")", "\n", "\n", "feat1_fine", "=", "sample_feat_by_coord", "(", "xf1", ",", "coord1_n", ".", "reshape", "(", "b", ",", "-", "1", ",", "2", ")", ",", "self", ".", "config", "[", "'loss_distance'", "]", "==", "'cos'", ")", "\n", "feat2_fine", "=", "sample_feat_by_coord", "(", "xf2", ",", "coord2_n", ".", "reshape", "(", "b", ",", "-", "1", ",", "2", ")", ",", "self", ".", "config", "[", "'loss_distance'", "]", "==", "'cos'", ")", "\n", "\n", "cos_sim", "=", "feat1_fine", "@", "feat2_fine", ".", "transpose", "(", "1", ",", "2", ")", "# bxmxn", "\n", "feat1g_corloc", "=", "(", "F", ".", "softmax", "(", "temperature", "*", "cos_sim", ",", "dim", "=", "2", ")", ")", ".", "unsqueeze", "(", "-", "1", ")", "*", "coord2", ".", "reshape", "(", "b", ",", "-", "1", ",", "2", ")", ".", "unsqueeze", "(", "1", ")", "#bxmxnx2", "\n", "feat1g_corloc", "=", "feat1g_corloc", ".", "sum", "(", "2", ")", "#bxmx2", "\n", "feat2g_corloc", "=", "(", "F", ".", "softmax", "(", "temperature", "*", "cos_sim", ",", "dim", "=", "1", ")", ")", ".", "unsqueeze", "(", "-", "1", ")", "*", "coord1", ".", "reshape", "(", "b", ",", "-", "1", ",", "2", ")", ".", "unsqueeze", "(", "2", ")", "#bxmxnx2", "\n", "feat2g_corloc", "=", "feat2g_corloc", ".", "sum", "(", "1", ")", "#bxnx2", "\n", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "if", "self", ".", "config", "[", "'use_nn_grid'", "]", ":", "\n", "                ", "_", ",", "max_idx1", "=", "cor_mat", ".", "max", "(", "2", ")", "\n", "feat1g_corloc_n", "=", "coord2_n", ".", "reshape", "(", "b", ",", "-", "1", ",", "2", ")", ".", "gather", "(", "dim", "=", "1", ",", "index", "=", "max_idx1", "[", ":", ",", ":", ",", "None", "]", ".", "repeat", "(", "1", ",", "1", ",", "2", ")", ")", "\n", "_", ",", "max_idx2", "=", "cor_mat", ".", "max", "(", "1", ")", "\n", "feat2g_corloc_n", "=", "coord1_n", ".", "reshape", "(", "b", ",", "-", "1", ",", "2", ")", ".", "gather", "(", "dim", "=", "1", ",", "index", "=", "max_idx2", "[", ":", ",", ":", ",", "None", "]", ".", "repeat", "(", "1", ",", "1", ",", "2", ")", ")", "\n", "", "else", ":", "\n", "                ", "feat1g_corloc_n", "=", "normalize_coords", "(", "feat1g_corloc", ",", "h2i", ",", "w2i", ")", "\n", "feat2g_corloc_n", "=", "normalize_coords", "(", "feat2g_corloc", ",", "h1i", ",", "w1i", ")", "\n", "\n", "", "", "feat1g_std", "=", "(", "F", ".", "softmax", "(", "temperature", "*", "cos_sim", ",", "dim", "=", "2", ")", ")", ".", "unsqueeze", "(", "-", "1", ")", "*", "(", "coord2_n", ".", "reshape", "(", "b", ",", "1", ",", "-", "1", ",", "2", ")", "**", "2", ")", "\n", "feat1g_std", "=", "feat1g_std", ".", "sum", "(", "2", ")", "-", "(", "feat1g_corloc_n", "**", "2", ")", "\n", "feat1g_std", "=", "feat1g_std", ".", "clamp", "(", "min", "=", "1e-6", ")", ".", "sqrt", "(", ")", ".", "sum", "(", "-", "1", ")", "#bxn", "\n", "feat2g_std", "=", "(", "F", ".", "softmax", "(", "temperature", "*", "cos_sim", ",", "dim", "=", "1", ")", ")", ".", "unsqueeze", "(", "-", "1", ")", "*", "(", "coord1_n", ".", "reshape", "(", "b", ",", "-", "1", ",", "1", ",", "2", ")", "**", "2", ")", "\n", "feat2g_std", "=", "feat2g_std", ".", "sum", "(", "1", ")", "-", "(", "feat2g_corloc_n", "**", "2", ")", "\n", "feat2g_std", "=", "feat2g_std", ".", "clamp", "(", "min", "=", "1e-6", ")", ".", "sqrt", "(", ")", ".", "sum", "(", "-", "1", ")", "#bxn", "\n", "\n", "if", "self", ".", "config", "[", "'use_line_search'", "]", ":", "\n", "            ", "feat1_c_corloc_n_", ",", "feat1_c_corloc_n_org", ",", "valid1", ",", "epi_std1", "=", "epipolar_line_search", "(", "coord1", ",", "inputs", "[", "'F1'", "]", ",", "feat1_fine", ",", "\n", "temperature", "*", "F", ".", "normalize", "(", "xf2", ",", "p", "=", "2.0", ",", "dim", "=", "1", ")", ",", "h2i", ",", "w2i", ",", "window_size", "=", "self", ".", "config", "[", "'window_size'", "]", ",", "**", "self", ".", "config", "[", "'line_search_config'", "]", ")", "\n", "feat2_c_corloc_n_", ",", "feat2_c_corloc_n_org", ",", "valid2", ",", "epi_std2", "=", "epipolar_line_search", "(", "coord2", ",", "inputs", "[", "'F2'", "]", ",", "feat2_fine", ",", "\n", "temperature", "*", "F", ".", "normalize", "(", "xf1", ",", "p", "=", "2.0", ",", "dim", "=", "1", ")", ",", "h1i", ",", "w1i", ",", "window_size", "=", "self", ".", "config", "[", "'window_size'", "]", ",", "**", "self", ".", "config", "[", "'line_search_config'", "]", ")", "\n", "feat1c_corloc_org", "=", "denormalize_coords", "(", "feat1_c_corloc_n_org", ",", "h2i", ",", "w2i", ")", "\n", "feat2c_corloc_org", "=", "denormalize_coords", "(", "feat2_c_corloc_n_org", ",", "h1i", ",", "w1i", ")", "\n", "", "else", ":", "\n", "            ", "feat1_c_corloc_n_", "=", "feat1g_corloc_n", ".", "detach", "(", ")", "\n", "feat2_c_corloc_n_", "=", "feat2g_corloc_n", ".", "detach", "(", ")", "\n", "feat1c_corloc_org", "=", "feat1_c_corloc_n_", "\n", "feat2c_corloc_org", "=", "feat2_c_corloc_n_", "\n", "valid1", "=", "torch", ".", "ones_like", "(", "feat1g_std", ")", ".", "bool", "(", ")", "\n", "valid2", "=", "torch", ".", "ones_like", "(", "feat2g_std", ")", ".", "bool", "(", ")", "\n", "\n", "", "feat1w_corloc_n", ",", "window_coords_n_1in2", ",", "feat1w_std", ",", "_", "=", "get_expected_correspondence_within_window", "(", "\n", "feat1_fine", ",", "temperature", "*", "F", ".", "normalize", "(", "xf2", ",", "p", "=", "2.0", ",", "dim", "=", "1", ")", ",", "feat1_c_corloc_n_", ",", "self", ".", "config", "[", "'window_size'", "]", ",", "with_std", "=", "True", ")", "\n", "feat2w_corloc_n", ",", "window_coords_n_2in1", ",", "feat2w_std", ",", "_", "=", "get_expected_correspondence_within_window", "(", "\n", "feat2_fine", ",", "temperature", "*", "F", ".", "normalize", "(", "xf1", ",", "p", "=", "2.0", ",", "dim", "=", "1", ")", ",", "feat2_c_corloc_n_", ",", "self", ".", "config", "[", "'window_size'", "]", ",", "with_std", "=", "True", ")", "\n", "\n", "feat1w_corloc", "=", "denormalize_coords", "(", "feat1w_corloc_n", ",", "h2i", ",", "w2i", ")", "\n", "feat2w_corloc", "=", "denormalize_coords", "(", "feat2w_corloc_n", ",", "h1i", ",", "w1i", ")", "\n", "\n", "return", "{", "\n", "'coord1'", ":", "coord1", ",", "'coord2'", ":", "coord2", ",", "\n", "'feat1g_corloc'", ":", "feat1g_corloc", ",", "\n", "'feat2g_corloc'", ":", "feat2g_corloc", ",", "\n", "'feat1w_corloc'", ":", "feat1w_corloc", ",", "\n", "'feat2w_corloc'", ":", "feat2w_corloc", ",", "\n", "'feat1c_corloc_org'", ":", "feat1c_corloc_org", ",", "\n", "'feat2c_corloc_org'", ":", "feat2_c_corloc_n_org", ",", "\n", "'feat1g_std'", ":", "feat1g_std", ",", "'feat2g_std'", ":", "feat2g_std", ",", "\n", "'feat1w_std'", ":", "feat1w_std", ",", "'feat2w_std'", ":", "feat2w_std", ",", "\n", "'temperature'", ":", "temperature", ",", "\n", "'valid_epi1'", ":", "valid1", ",", "'valid_epi2'", ":", "valid2", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.losses.preprocess.Preprocess_Skip.__init__": [[124, 127], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.losses.preprocess.Preprocess_Skip.__init__"], ["def", "__init__", "(", "self", ",", "**", "kargs", ")", ":", "\n", "        ", "super", "(", "Preprocess_Skip", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "__lossname__", "=", "'Preprocess_Skip'", "\n", "\n"]], "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.losses.preprocess.Preprocess_Skip.forward": [[128, 130], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "outputs", ")", ":", "\n", "        ", "return", "None", "\n", "", "", ""]], "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.losses.preprocess_utils.homogenize": [[9, 13], ["torch.cat", "torch.cat", "torch.cat", "torch.ones_like", "torch.ones_like", "torch.ones_like"], "function", ["None"], ["def", "homogenize", "(", "coord", ")", ":", "\n", "# coord = torch.cat((coord, torch.ones_like(coord[:, :, [0]])), -1)", "\n", "    ", "coord", "=", "torch", ".", "cat", "(", "(", "coord", ",", "torch", ".", "ones_like", "(", "coord", "[", "...", ",", "[", "0", "]", "]", ")", ")", ",", "-", "1", ")", "\n", "return", "coord", "\n", "\n"]], "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.losses.preprocess_utils.normalize_coords": [[14, 27], ["torch.Tensor().to().float", "torch.Tensor().to().float", "torch.Tensor().to().float", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "function", ["None"], ["", "def", "normalize_coords", "(", "coord", ",", "h", ",", "w", ")", ":", "\n", "    ", "'''\n    turn the coordinates from pixel indices to the range of [-1, 1]\n    :param coord: [..., 2]\n    :param h: the image height\n    :param w: the image width\n    :return: the normalized coordinates [..., 2]\n    '''", "\n", "c", "=", "torch", ".", "Tensor", "(", "[", "(", "w", "-", "1", ")", "/", "2.", ",", "(", "h", "-", "1", ")", "/", "2.", "]", ")", ".", "to", "(", "coord", ".", "device", ")", ".", "float", "(", ")", "\n", "# print(coord[:,:,0].max(), coord[:,:,1].max(), w, h)", "\n", "coord_norm", "=", "(", "coord", "-", "c", ")", "/", "c", "\n", "# print(coord_norm[:,:,0].max(), coord_norm[:,:,1].max(), coord_norm[:,:,0].min(), coord_norm[:,:,1].min())", "\n", "return", "coord_norm", "\n", "\n"]], "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.losses.preprocess_utils.denormalize_coords": [[28, 39], ["torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "function", ["None"], ["", "def", "denormalize_coords", "(", "coord_norm", ",", "h", ",", "w", ")", ":", "\n", "    ", "'''\n    turn the coordinates from normalized value ([-1, 1]) to actual pixel indices\n    :param coord_norm: [..., 2]\n    :param h: the image height\n    :param w: the image width\n    :return: actual pixel coordinates\n    '''", "\n", "c", "=", "torch", ".", "Tensor", "(", "[", "(", "w", "-", "1", ")", "/", "2.", ",", "(", "h", "-", "1", ")", "/", "2.", "]", ")", ".", "to", "(", "coord_norm", ".", "device", ")", "\n", "coord", "=", "coord_norm", "*", "c", "+", "c", "\n", "return", "coord", "\n", "\n"]], "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.losses.preprocess_utils.sample_feat_by_coord": [[40, 54], ["torch.grid_sample().squeeze", "F.normalize.transpose", "torch.normalize", "torch.grid_sample", "coord_n.unsqueeze"], "function", ["None"], ["", "def", "sample_feat_by_coord", "(", "x", ",", "coord_n", ",", "norm", "=", "False", ")", ":", "\n", "    ", "'''\n    sample from normalized coordinates\n    :param x: feature map [batch_size, n_dim, h, w]\n    :param coord_n: normalized coordinates, [batch_size, n_pts, 2]\n    :param norm: if l2 normalize features\n    :return: the extracted features, [batch_size, n_pts, n_dim]\n    '''", "\n", "feat", "=", "F", ".", "grid_sample", "(", "x", ",", "coord_n", ".", "unsqueeze", "(", "2", ")", ",", "padding_mode", "=", "'zeros'", ",", "align_corners", "=", "False", ")", ".", "squeeze", "(", "-", "1", ")", "\n", "# print(feat.shape)", "\n", "if", "norm", ":", "\n", "        ", "feat", "=", "F", ".", "normalize", "(", "feat", ",", "p", "=", "2", ",", "dim", "=", "1", ")", "\n", "", "feat", "=", "feat", ".", "transpose", "(", "1", ",", "2", ")", "\n", "return", "feat", "\n", "\n"]], "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.losses.preprocess_utils.get_expected_correspondence_locs": [[55, 83], ["featmap2.size", "gen_grid().to", "featmap2.reshape().transpose", "preprocess_utils.compute_prob", "grid_n.unsqueeze().unsqueeze.unsqueeze().unsqueeze", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "preprocess_utils.gen_grid", "featmap2.reshape", "grid_n.unsqueeze().unsqueeze.unsqueeze", "compute_prob.unsqueeze", "torch.sum", "torch.sum", "torch.sum", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.pow().mean", "torch.pow().mean", "torch.pow().mean", "torch.pow", "torch.pow", "torch.pow", "kurtosis.mean", "torch.clamp", "torch.clamp", "torch.clamp", "compute_prob.unsqueeze", "torch.pow", "torch.pow", "torch.pow", "torch.sum.unsqueeze"], "function", ["home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.losses.preprocess_utils.compute_prob", "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.losses.preprocess_utils.gen_grid"], ["", "def", "get_expected_correspondence_locs", "(", "feat1", ",", "featmap2", ",", "with_std", "=", "False", ")", ":", "\n", "    ", "'''\n    compute the expected correspondence locations\n    :param feat1: the feature vectors of query points [batch_size, n_pts, n_dim]\n    :param featmap2: the feature maps of the reference image [batch_size, n_dim, h, w]\n    :param with_std: if return the standard deviation\n    :return: the normalized expected correspondence locations [batch_size, n_pts, 2]\n    '''", "\n", "B", ",", "d", ",", "h2", ",", "w2", "=", "featmap2", ".", "size", "(", ")", "\n", "grid_n", "=", "gen_grid", "(", "-", "1", ",", "1", ",", "-", "1", ",", "1", ",", "h2", ",", "w2", ")", ".", "to", "(", "featmap2", ".", "device", ")", "\n", "featmap2_flatten", "=", "featmap2", ".", "reshape", "(", "B", ",", "d", ",", "h2", "*", "w2", ")", ".", "transpose", "(", "1", ",", "2", ")", "# BX(hw)xd", "\n", "prob", "=", "compute_prob", "(", "feat1", ",", "featmap2_flatten", ")", "# Bxnx(hw)", "\n", "\n", "grid_n", "=", "grid_n", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "0", ")", "# 1x1x(hw)x2", "\n", "expected_coord_n", "=", "torch", ".", "sum", "(", "grid_n", "*", "prob", ".", "unsqueeze", "(", "-", "1", ")", ",", "dim", "=", "2", ")", "# Bxnx2", "\n", "\n", "if", "with_std", ":", "\n", "# convert to normalized scale [-1, 1]", "\n", "        ", "var", "=", "torch", ".", "sum", "(", "grid_n", "**", "2", "*", "prob", ".", "unsqueeze", "(", "-", "1", ")", ",", "dim", "=", "2", ")", "-", "expected_coord_n", "**", "2", "# Bxnx2", "\n", "std", "=", "torch", ".", "sum", "(", "torch", ".", "sqrt", "(", "torch", ".", "clamp", "(", "var", ",", "min", "=", "1e-10", ")", ")", ",", "-", "1", ")", "# Bxn", "\n", "# var_prob = (prob-prob.mean(-1,True)).square().sum(-1,True)/prob.shape[-1] # Bxnx1", "\n", "# kurtosis = torch.pow(prob-prob.mean(-1,True),4).sum(-1,True)/(prob.shape[2]*var_prob**2)", "\n", "kurtosis", "=", "torch", ".", "pow", "(", "grid_n", "-", "expected_coord_n", ".", "unsqueeze", "(", "-", "2", ")", ",", "4", ")", ".", "mean", "(", "-", "2", ")", "/", "torch", ".", "pow", "(", "var", ",", "2", ")", "\n", "kurtosis", "=", "(", "kurtosis", "/", "10.", ")", ".", "clamp", "(", "0", ",", "1", ")", "\n", "# kurtosis = var", "\n", "return", "expected_coord_n", ",", "std", ",", "kurtosis", ".", "mean", "(", "-", "1", ")", ",", "prob", "#, var_prob", "\n", "", "else", ":", "\n", "        ", "return", "expected_coord_n", "\n", "\n"]], "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.losses.preprocess_utils.gen_grid": [[84, 88], ["torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.stack().transpose().reshape().float", "torch.stack().transpose().reshape().float", "torch.stack().transpose().reshape().float", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.stack().transpose().reshape", "torch.stack().transpose().reshape", "torch.stack().transpose().reshape", "torch.stack().transpose", "torch.stack().transpose", "torch.stack().transpose", "torch.stack", "torch.stack", "torch.stack"], "function", ["None"], ["", "", "def", "gen_grid", "(", "h_min", ",", "h_max", ",", "w_min", ",", "w_max", ",", "len_h", ",", "len_w", ")", ":", "\n", "    ", "x", ",", "y", "=", "torch", ".", "meshgrid", "(", "[", "torch", ".", "linspace", "(", "w_min", ",", "w_max", ",", "len_w", ")", ",", "torch", ".", "linspace", "(", "h_min", ",", "h_max", ",", "len_h", ")", "]", ")", "\n", "grid", "=", "torch", ".", "stack", "(", "(", "x", ",", "y", ")", ",", "-", "1", ")", ".", "transpose", "(", "0", ",", "1", ")", ".", "reshape", "(", "-", "1", ",", "2", ")", ".", "float", "(", ")", "\n", "return", "grid", "\n", "\n"]], "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.losses.preprocess_utils.compute_prob": [[89, 116], ["feat1.bmm", "torch.softmax", "torch.softmax", "feat2.transpose", "feat1.bmm.new_tensor", "scale.sqrt.sqrt", "torch.sum", "torch.sum", "torch.sum", "torch.sum().transpose", "torch.sum().transpose", "torch.sum().transpose", "feat1.bmm", "feat2.transpose", "torch.sum", "torch.sum", "torch.sum"], "function", ["None"], ["", "def", "compute_prob", "(", "feat1", ",", "feat2", ",", "loss_distance", "=", "'cos'", ",", "with_scale", "=", "False", ",", "return_sim", "=", "False", ")", ":", "\n", "    ", "'''\n    compute probability\n    :param feat1: query features, [batch_size, m, n_dim]\n    :param feat2: reference features, [batch_size, n, n_dim]\n    :return: probability, [batch_size, m, n]\n    '''", "\n", "assert", "loss_distance", "in", "[", "'cos'", ",", "'euc'", "]", "\n", "if", "return_sim", ":", "\n", "        ", "assert", "loss_distance", "==", "'cos'", "\n", "", "if", "loss_distance", "==", "'cos'", ":", "\n", "        ", "sim", "=", "feat1", ".", "bmm", "(", "feat2", ".", "transpose", "(", "1", ",", "2", ")", ")", "\n", "if", "with_scale", ":", "\n", "            ", "scale", "=", "sim", ".", "new_tensor", "(", "feat2", ".", "shape", "[", "1", "]", ")", "\n", "scale", "=", "scale", ".", "sqrt", "(", ")", "\n", "", "else", ":", "\n", "            ", "scale", "=", "1", "\n", "", "prob", "=", "F", ".", "softmax", "(", "scale", "*", "sim", ",", "dim", "=", "-", "1", ")", "# Bxmxn", "\n", "", "else", ":", "\n", "        ", "dist", "=", "torch", ".", "sum", "(", "feat1", "**", "2", ",", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", "+", "torch", ".", "sum", "(", "feat2", "**", "2", ",", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", ".", "transpose", "(", "1", ",", "2", ")", "-", "2", "*", "feat1", ".", "bmm", "(", "feat2", ".", "transpose", "(", "1", ",", "2", ")", ")", "\n", "prob", "=", "F", ".", "softmax", "(", "-", "dist", ",", "dim", "=", "-", "1", ")", "# Bxmxn", "\n", "", "if", "return_sim", ":", "\n", "        ", "return", "prob", ",", "sim", "\n", "", "else", ":", "\n", "        ", "return", "prob", "\n", "\n"]], "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.losses.preprocess_utils.OT_sinkhorn_log": [[117, 141], ["costs.new_tensor", "range", "P.exp", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "function", ["None"], ["", "", "def", "OT_sinkhorn_log", "(", "costs", ",", "iters", "=", "20", ",", "temperature", "=", "None", ")", ":", "\n", "    ", "'''\n    find the correspondece with sinkhorn algorithm\n    :param costs: [b, m, n]\n    :param iters: the number of iterations\n    :return: the optimized scores [b,m,n]\n    '''", "\n", "b", ",", "m", ",", "n", "=", "costs", ".", "shape", "\n", "one", "=", "costs", ".", "new_tensor", "(", "1", ")", "\n", "ms", ",", "ns", "=", "(", "m", "*", "one", ")", ".", "to", "(", "costs", ")", ",", "(", "n", "*", "one", ")", ".", "to", "(", "costs", ")", "\n", "norm", "=", "-", "(", "ms", "+", "ns", ")", ".", "log", "(", ")", "\n", "\n", "P", "=", "-", "temperature", "*", "costs", "\n", "log_m", "=", "norm", "*", "torch", ".", "ones", "(", "b", ",", "m", ",", "1", ")", ".", "to", "(", "costs", ")", "\n", "log_n", "=", "norm", "*", "torch", ".", "ones", "(", "b", ",", "1", ",", "n", ")", ".", "to", "(", "costs", ")", "\n", "u", ",", "v", "=", "torch", ".", "zeros_like", "(", "log_m", ")", ",", "torch", ".", "zeros_like", "(", "log_n", ")", "\n", "for", "_", "in", "range", "(", "iters", ")", ":", "\n", "        ", "u", "=", "log_m", "-", "torch", ".", "logsumexp", "(", "P", "+", "v", ",", "dim", "=", "2", ",", "keepdim", "=", "True", ")", "\n", "v", "=", "log_n", "-", "torch", ".", "logsumexp", "(", "P", "+", "u", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "", "P", "=", "P", "+", "u", "+", "v", "\n", "P", "=", "P", "-", "norm", "\n", "optimal", "=", "P", ".", "exp", "(", ")", "\n", "\n", "return", "optimal", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.losses.preprocess_utils.OT_sinkhorn_log_unmatch": [[142, 175], ["torch.cat.new_tensor", "torch.cat", "torch.cat", "torch.cat", "range", "P.exp", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "ns.log", "ms.log", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.cat.min", "torch.cat.min", "bins1.mean", "bins2.mean", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "function", ["None"], ["", "def", "OT_sinkhorn_log_unmatch", "(", "costs", ",", "iters", "=", "20", ",", "temperature", "=", "None", ")", ":", "\n", "    ", "'''\n    find the correspondece with sinkhorn algorithm\n    :param costs: [b, m, n]\n    :param iters: the number of iterations\n    :return: the optimized scores [b,m,n]\n    '''", "\n", "b", ",", "m", ",", "n", "=", "costs", ".", "shape", "\n", "one", "=", "costs", ".", "new_tensor", "(", "1", ")", "\n", "ms", ",", "ns", "=", "(", "m", "*", "one", ")", ".", "to", "(", "costs", ")", ",", "(", "n", "*", "one", ")", ".", "to", "(", "costs", ")", "\n", "\n", "bins1", "=", "1", "-", "costs", ".", "min", "(", "2", ",", "True", ")", "[", "0", "]", "#bxmx1", "\n", "bins2", "=", "1", "-", "costs", ".", "min", "(", "1", ",", "True", ")", "[", "0", "]", "#bx1xn", "\n", "corner", "=", "(", "bins1", ".", "mean", "(", "1", ",", "True", ")", "+", "bins2", ".", "mean", "(", "2", ",", "True", ")", ")", "/", "2", "\n", "\n", "costs", "=", "torch", ".", "cat", "(", "[", "torch", ".", "cat", "(", "[", "costs", ",", "bins1", "]", ",", "-", "1", ")", ",", "\n", "torch", ".", "cat", "(", "[", "bins2", ",", "corner", "]", ",", "-", "1", ")", "]", ",", "1", ")", "#bx(m+1)x(n+1)", "\n", "norm", "=", "-", "(", "ms", "+", "ns", ")", ".", "log", "(", ")", "\n", "\n", "P", "=", "-", "temperature", "*", "costs", "\n", "log_m", "=", "norm", "*", "torch", ".", "ones", "(", "b", ",", "m", "+", "1", ",", "1", ")", ".", "to", "(", "costs", ")", "\n", "log_n", "=", "norm", "*", "torch", ".", "ones", "(", "b", ",", "1", ",", "n", "+", "1", ")", ".", "to", "(", "costs", ")", "\n", "log_m", "[", ":", ",", "-", "1", ",", ":", "]", "=", "ns", ".", "log", "(", ")", "+", "norm", "\n", "log_n", "[", ":", ",", ":", ",", "-", "1", "]", "=", "ms", ".", "log", "(", ")", "+", "norm", "\n", "u", ",", "v", "=", "torch", ".", "zeros_like", "(", "log_m", ")", ",", "torch", ".", "zeros_like", "(", "log_n", ")", "\n", "for", "_", "in", "range", "(", "iters", ")", ":", "\n", "        ", "u", "=", "log_m", "-", "torch", ".", "logsumexp", "(", "P", "+", "v", ",", "dim", "=", "2", ",", "keepdim", "=", "True", ")", "\n", "v", "=", "log_n", "-", "torch", ".", "logsumexp", "(", "P", "+", "u", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "", "P", "=", "P", "+", "u", "+", "v", "\n", "P", "=", "P", "-", "norm", "\n", "optimal", "=", "P", ".", "exp", "(", ")", "\n", "\n", "return", "optimal", "[", ":", ",", ":", "-", "1", ",", ":", "-", "1", "]", ",", "optimal", "\n", "\n"]], "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.losses.preprocess_utils.Dual_Softmax": [[176, 195], ["torch.softmax", "torch.softmax"], "function", ["None"], ["", "def", "Dual_Softmax", "(", "costs", ",", "iters", "=", "None", ",", "temperature", "=", "None", ")", ":", "\n", "    ", "'''\n    find the correspondece with sinkhorn algorithm\n    :param costs: [b, m, n]\n    :param iters: the number of iterations\n    :return: the optimized scores [b,m,n]\n    '''", "\n", "b", ",", "m", ",", "n", "=", "costs", ".", "shape", "\n", "# scale = max(m,n)", "\n", "scale", "=", "1", "\n", "if", "temperature", "is", "None", ":", "\n", "        ", "costs_input", "=", "-", "15", "*", "scale", "*", "costs", "\n", "", "else", ":", "\n", "        ", "costs_input", "=", "-", "temperature", "*", "scale", "*", "costs", "\n", "", "prob_col", "=", "F", ".", "softmax", "(", "costs_input", ",", "dim", "=", "2", ")", "\n", "prob_row", "=", "F", ".", "softmax", "(", "costs_input", ",", "dim", "=", "1", ")", "\n", "prob", "=", "prob_col", "*", "prob_col", "\n", "\n", "return", "prob", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.losses.preprocess_utils.generate_kpts": [[196, 214], ["torch.rand", "torch.rand", "torch.rand", "preprocess_utils.generate_kpts_single", "preprocess_utils.generate_kpts_single", "preprocess_utils.generate_kpts_single", "preprocess_utils.generate_kpts_single"], "function", ["home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.losses.preprocess_utils.generate_kpts_single", "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.losses.preprocess_utils.generate_kpts_single", "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.losses.preprocess_utils.generate_kpts_single", "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.losses.preprocess_utils.generate_kpts_single"], ["", "def", "generate_kpts", "(", "inputs", ",", "outputs", ",", "nms_radius", ",", "num_pts", "=", "False", ",", "stable_prob", "=", "0.9", ",", "use_nms", "=", "True", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"\"\"\n    generate keypoints on the entire image\n    \"\"\"", "\n", "preds1", "=", "outputs", "[", "'preds1'", "]", "\n", "preds2", "=", "outputs", "[", "'preds2'", "]", "\n", "kp_map1", ",", "kp_map2", "=", "preds1", "[", "'local_point'", "]", ",", "preds2", "[", "'local_point'", "]", "\n", "\n", "if", "torch", ".", "rand", "(", "1", ")", "<", "stable_prob", ":", "# stable select", "\n", "        ", "kps1", ",", "kp_score1", "=", "generate_kpts_single", "(", "kp_map1", ",", "nms_radius", ",", "num_pts", ",", "scale", "=", "4", ",", "stride", "=", "stride", ",", "use_nms", "=", "use_nms", ")", "\n", "kps2", ",", "kp_score2", "=", "generate_kpts_single", "(", "kp_map2", ",", "nms_radius", ",", "num_pts", ",", "scale", "=", "4", ",", "stride", "=", "stride", ",", "use_nms", "=", "use_nms", ")", "\n", "", "else", ":", "# random select", "\n", "        ", "temperature", "=", "0.01", "/", "(", "outputs", "[", "'epoch'", "]", "+", "1", ")", "\n", "kps1", ",", "kp_score1", "=", "generate_kpts_single", "(", "kp_map1", ",", "nms_radius", ",", "num_pts", ",", "scale", "=", "4", ",", "\n", "stable", "=", "False", ",", "temperature", "=", "temperature", ",", "stride", "=", "stride", ",", "use_nms", "=", "use_nms", ")", "\n", "kps2", ",", "kp_score2", "=", "generate_kpts_single", "(", "kp_map2", ",", "nms_radius", ",", "num_pts", ",", "scale", "=", "4", ",", "\n", "stable", "=", "False", ",", "temperature", "=", "temperature", ",", "stride", "=", "stride", ",", "use_nms", "=", "use_nms", ")", "\n", "", "return", "kps1", ",", "kps2", ",", "kp_score1", ",", "kp_score2", "\n", "\n"]], "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.losses.preprocess_utils.generate_kpts_single": [[215, 279], ["preprocess_utils.gen_grid", "[].repeat().to", "grids_org.permute.permute", "torch.avg_pool2d", "torch.avg_pool2d", "torch.max_pool2d", "preprocess_utils.soft_nms", "F.avg_pool2d.permute().view().gather", "F.max_pool2d.permute().view().gather", "preprocess_utils.gumbel_softmax", "[].repeat", "preprocess_utils.nms", "torch.ones().to.view().sum().min().int", "thr_mask.view().sum().min().int", "torch.ones().to.view().sum().min().int", "thr_mask.view().sum().min().int", "F.avg_pool2d.permute().reshape", "kp_map[].permute().reshape", "torch.ones().to", "torch.ones().to", "torch.ones().to", "kp_map[].reshape().max", "kp_map[].reshape().mean", "torch.tensor().to().repeat.view", "torch.ones().to.view().sum().min", "thr_mask.view().sum().min", "F.avg_pool2d.permute().view", "idx.unsqueeze().repeat", "F.max_pool2d.permute().view", "idx.unsqueeze", "torch.tensor().to().repeat", "torch.tensor().to().repeat", "torch.tensor().to().repeat", "torch.ones().to.view().sum().min", "thr_mask.view().sum().min", "torch.ones().to.view().sum().min", "thr_mask.view().sum().min", "F.avg_pool2d.permute", "kp_map[].permute", "grids_org.permute.reshape", "torch.ones", "torch.ones", "torch.ones", "kp_map[].reshape", "kp_map[].reshape", "torch.ones().to.view().sum", "thr_mask.view().sum", "F.avg_pool2d.permute", "idx.unsqueeze", "F.max_pool2d.permute", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.ones().to.view().sum", "thr_mask.view().sum", "torch.ones().to.view().sum", "thr_mask.view().sum", "torch.ones().to.view", "thr_mask.view", "torch.tensor", "torch.tensor", "torch.tensor", "torch.ones().to.view", "thr_mask.view", "torch.ones().to.view", "thr_mask.view"], "function", ["home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.losses.preprocess_utils.gen_grid", "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.losses.preprocess_utils.soft_nms", "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.losses.preprocess_utils.gumbel_softmax", "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.losses.preprocess_utils.nms"], ["", "def", "generate_kpts_single", "(", "kp_map", ",", "nms_radius", ",", "num_pts", "=", "False", ",", "scale", "=", "4", ",", "stable", "=", "True", ",", "temperature", "=", "1", ",", "stride", "=", "1", ",", "use_nms", "=", "True", ",", "thr", "=", "False", ",", "thr_mod", "=", "'mean'", ")", ":", "\n", "    ", "b", ",", "_", ",", "h", ",", "w", "=", "kp_map", ".", "shape", "\n", "grids_org", "=", "gen_grid", "(", "h_min", "=", "-", "1", ",", "h_max", "=", "1", ",", "w_min", "=", "-", "1", ",", "w_max", "=", "1", ",", "len_h", "=", "h", ",", "len_w", "=", "w", ")", "\n", "# h, w = scale*h, scale*w", "\n", "# grids_org = gen_grid(h_min=0, h_max=h-1, w_min=0, w_max=w-1, len_h=h, len_w=w)", "\n", "grids_org", "=", "grids_org", ".", "reshape", "(", "h", ",", "w", ",", "2", ")", "[", "None", ",", ":", ",", ":", ",", ":", "]", ".", "repeat", "(", "b", ",", "1", ",", "1", ",", "1", ")", ".", "to", "(", "kp_map", ")", "\n", "grids_org", "=", "grids_org", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "# bx2xhxw", "\n", "\n", "# nms omits the boarder pixels of the original score map ", "\n", "# so that the mask size will be the same as processed score map", "\n", "if", "use_nms", "==", "'softnms'", ":", "# softnms for softnms", "\n", "        ", "nms_mask", "=", "soft_nms", "(", "kp_map", "[", ":", ",", ":", ",", "1", ":", "-", "1", ",", "1", ":", "-", "1", "]", ",", "nms_radius", ")", "\n", "", "elif", "use_nms", ":", "# True for hard nms", "\n", "        ", "nms_mask", "=", "nms", "(", "kp_map", "[", ":", ",", ":", ",", "1", ":", "-", "1", ",", "1", ":", "-", "1", "]", ",", "nms_radius", ")", "\n", "", "elif", "not", "use_nms", ":", "# False for no nms", "\n", "        ", "nms_mask", "=", "torch", ".", "ones", "(", "(", "b", ",", "1", ",", "h", "-", "2", ",", "w", "-", "2", ")", ")", ".", "to", "(", "kp_map", ")", "\n", "\n", "", "if", "thr", ":", "\n", "        ", "if", "thr_mod", "==", "'max'", ":", "\n", "            ", "kp_thr", "=", "(", "kp_map", "[", ":", ",", ":", ",", "1", ":", "-", "1", ",", "1", ":", "-", "1", "]", ")", ".", "reshape", "(", "b", ",", "1", ",", "-", "1", ")", ".", "max", "(", "2", ")", "[", "0", "]", "\n", "", "elif", "thr_mod", "==", "'mean'", ":", "\n", "            ", "kp_thr", "=", "(", "kp_map", "[", ":", ",", ":", ",", "1", ":", "-", "1", ",", "1", ":", "-", "1", "]", ")", ".", "reshape", "(", "b", ",", "1", ",", "-", "1", ")", ".", "mean", "(", "2", ")", "\n", "", "elif", "thr_mod", "==", "'abs'", ":", "\n", "            ", "kp_thr", "=", "torch", ".", "tensor", "(", "1.", ")", ".", "to", "(", "kp_map", ")", ".", "repeat", "(", "b", ")", "\n", "", "thr_mask", "=", "kp_map", "[", ":", ",", ":", ",", "1", ":", "-", "1", ",", "1", ":", "-", "1", "]", ">", "thr", "*", "kp_thr", ".", "view", "(", "b", ",", "1", ",", "1", ",", "1", ")", "\n", "nms_mask", "=", "thr_mask", "*", "nms_mask", "\n", "\n", "# process the score map and grids", "\n", "", "grids", "=", "kp_map", "*", "grids_org", "\n", "grids", "=", "F", ".", "avg_pool2d", "(", "grids", ",", "3", ",", "stride", "=", "stride", ",", "padding", "=", "0", ")", "\n", "kp_weight", "=", "F", ".", "avg_pool2d", "(", "kp_map", ",", "3", ",", "stride", "=", "stride", ",", "padding", "=", "0", ")", "\n", "grids", "=", "grids", "/", "kp_weight", "\n", "kp_score_map", "=", "F", ".", "max_pool2d", "(", "kp_map", ",", "3", ",", "stride", "=", "stride", ",", "padding", "=", "0", ")", "\n", "\n", "if", "not", "num_pts", ":", "\n", "        ", "if", "use_nms", "!=", "'softnms'", ":", "\n", "            ", "num_pts", "=", "(", "nms_mask", ".", "view", "(", "b", ",", "-", "1", ")", ".", "sum", "(", "1", ")", ".", "min", "(", ")", ")", ".", "int", "(", ")", "\n", "", "else", ":", "\n", "# num_pts = (((nms_mask*kp_map[:,:,1:-1,1:-1]).view(b,-1)>thr*((nms_mask*kp_map[:,:,1:-1,1:-1]).view(b,-1).mean(1, True))).sum(1).min()).int()", "\n", "            ", "num_pts", "=", "(", "thr_mask", ".", "view", "(", "b", ",", "-", "1", ")", ".", "sum", "(", "1", ")", ".", "min", "(", ")", ")", ".", "int", "(", ")", "\n", "", "", "else", ":", "\n", "        ", "if", "use_nms", "!=", "'softnms'", "and", "num_pts", ">", "nms_mask", ".", "view", "(", "b", ",", "-", "1", ")", ".", "sum", "(", "1", ")", ".", "min", "(", ")", ":", "\n", "            ", "num_pts", "=", "(", "nms_mask", ".", "view", "(", "b", ",", "-", "1", ")", ".", "sum", "(", "1", ")", ".", "min", "(", ")", ")", ".", "int", "(", ")", "\n", "", "if", "use_nms", "==", "'softnms'", "and", "num_pts", ">", "thr_mask", ".", "view", "(", "b", ",", "-", "1", ")", ".", "sum", "(", "1", ")", ".", "min", "(", ")", ":", "\n", "            ", "num_pts", "=", "(", "thr_mask", ".", "view", "(", "b", ",", "-", "1", ")", ".", "sum", "(", "1", ")", ".", "min", "(", ")", ")", ".", "int", "(", ")", "\n", "", "", "if", "num_pts", "<", "128", ":", "\n", "        ", "num_pts", "=", "128", "\n", "\n", "", "if", "stable", ":", "\n", "        ", "_", ",", "idx", "=", "(", "nms_mask", "*", "kp_map", "[", ":", ",", ":", ",", "1", ":", "-", "1", ",", "1", ":", "-", "1", "]", ")", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "contiguous", "(", ")", ".", "view", "(", "b", ",", "-", "1", ")", ".", "topk", "(", "num_pts", ")", "\n", "\n", "kps", "=", "grids", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "view", "(", "b", ",", "-", "1", ",", "2", ")", ".", "gather", "(", "dim", "=", "1", ",", "index", "=", "idx", ".", "unsqueeze", "(", "-", "1", ")", ".", "repeat", "(", "1", ",", "1", ",", "2", ")", ")", "\n", "kp_score", "=", "kp_score_map", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "view", "(", "b", ",", "-", "1", ",", "1", ")", ".", "gather", "(", "dim", "=", "1", ",", "index", "=", "idx", ".", "unsqueeze", "(", "-", "1", ")", ")", "\n", "", "else", ":", "\n", "# select = gumbel_softmax(kp_map, num_pts, temperature) # bxnxhw", "\n", "\n", "# kps = select@grids_org.permute(0,2,3,1).view(b,h*w,2)", "\n", "# kp_score = select@kp_map.permute(0,2,3,1).view(b,h*w,1)", "\n", "        ", "select", "=", "gumbel_softmax", "(", "nms_mask", "*", "kp_map", "[", ":", ",", ":", ",", "1", ":", "-", "1", ",", "1", ":", "-", "1", "]", ",", "num_pts", ",", "temperature", ")", "# bxnxhw", "\n", "\n", "kps", "=", "select", "@", "grids", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "reshape", "(", "b", ",", "(", "h", "-", "2", ")", "*", "(", "w", "-", "2", ")", ",", "2", ")", "\n", "kp_score", "=", "select", "@", "kp_map", "[", ":", ",", ":", ",", "1", ":", "-", "1", ",", "1", ":", "-", "1", "]", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "reshape", "(", "b", ",", "(", "h", "-", "2", ")", "*", "(", "w", "-", "2", ")", ",", "1", ")", "\n", "\n", "", "return", "kps", ",", "kp_score", "\n", "\n"]], "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.losses.preprocess_utils.generate_kpts_single_noavg": [[280, 337], ["preprocess_utils.gen_grid", "[].repeat().to", "grids_org.permute.permute", "preprocess_utils.soft_nms", "grids.permute().view().gather", "kp_map.permute().view().gather", "preprocess_utils.gumbel_softmax", "[].repeat", "preprocess_utils.nms", "torch.ones().to.view().sum().min().int", "thr_mask.view().sum().min().int", "torch.ones().to.view().sum().min().int", "thr_mask.view().sum().min().int", "grids.permute().reshape", "kp_map.permute().reshape", "torch.ones().to", "torch.ones().to", "torch.ones().to", "kp_map.reshape().max", "kp_map.reshape().mean", "kp_map.reshape().mean.view", "torch.ones().to.view().sum().min", "thr_mask.view().sum().min", "grids.permute().view", "idx.unsqueeze().repeat", "kp_map.permute().view", "idx.unsqueeze", "torch.ones().to.view().sum().min", "thr_mask.view().sum().min", "torch.ones().to.view().sum().min", "thr_mask.view().sum().min", "grids.permute", "kp_map.permute", "grids_org.permute.reshape", "torch.ones", "torch.ones", "torch.ones", "kp_map.reshape", "kp_map.reshape", "torch.ones().to.view().sum", "thr_mask.view().sum", "grids.permute", "idx.unsqueeze", "kp_map.permute", "torch.ones().to.view().sum", "thr_mask.view().sum", "torch.ones().to.view().sum", "thr_mask.view().sum", "torch.ones().to.view", "thr_mask.view", "torch.ones().to.view", "thr_mask.view", "torch.ones().to.view", "thr_mask.view"], "function", ["home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.losses.preprocess_utils.gen_grid", "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.losses.preprocess_utils.soft_nms", "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.losses.preprocess_utils.gumbel_softmax", "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.losses.preprocess_utils.nms"], ["", "def", "generate_kpts_single_noavg", "(", "kp_map", ",", "nms_radius", ",", "num_pts", "=", "False", ",", "scale", "=", "4", ",", "stable", "=", "True", ",", "temperature", "=", "1", ",", "stride", "=", "1", ",", "use_nms", "=", "True", ",", "thr", "=", "False", ",", "thr_mod", "=", "'mean'", ")", ":", "\n", "    ", "b", ",", "_", ",", "h", ",", "w", "=", "kp_map", ".", "shape", "\n", "grids_org", "=", "gen_grid", "(", "h_min", "=", "-", "1", ",", "h_max", "=", "1", ",", "w_min", "=", "-", "1", ",", "w_max", "=", "1", ",", "len_h", "=", "h", ",", "len_w", "=", "w", ")", "\n", "# h, w = scale*h, scale*w", "\n", "# grids_org = gen_grid(h_min=0, h_max=h-1, w_min=0, w_max=w-1, len_h=h, len_w=w)", "\n", "grids_org", "=", "grids_org", ".", "reshape", "(", "h", ",", "w", ",", "2", ")", "[", "None", ",", ":", ",", ":", ",", ":", "]", ".", "repeat", "(", "b", ",", "1", ",", "1", ",", "1", ")", ".", "to", "(", "kp_map", ")", "\n", "grids_org", "=", "grids_org", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "# bx2xhxw", "\n", "\n", "# nms omits the boarder pixels of the original score map ", "\n", "# so that the mask size will be the same as processed score map", "\n", "if", "use_nms", "==", "'softnms'", ":", "# softnms for softnms", "\n", "        ", "nms_mask", "=", "soft_nms", "(", "kp_map", ",", "nms_radius", ")", "\n", "", "elif", "use_nms", ":", "# True for hard nms", "\n", "        ", "nms_mask", "=", "nms", "(", "kp_map", ",", "nms_radius", ")", "\n", "", "elif", "not", "use_nms", ":", "# False for no nms", "\n", "        ", "nms_mask", "=", "torch", ".", "ones", "(", "(", "b", ",", "1", ",", "h", ",", "w", ")", ")", ".", "to", "(", "kp_map", ")", "\n", "\n", "", "if", "thr", ":", "\n", "        ", "if", "thr_mod", "==", "'max'", ":", "\n", "            ", "kp_thr", "=", "(", "kp_map", ")", ".", "reshape", "(", "b", ",", "1", ",", "-", "1", ")", ".", "max", "(", "2", ")", "[", "0", "]", "\n", "", "elif", "thr_mod", "==", "'mean'", ":", "\n", "            ", "kp_thr", "=", "(", "kp_map", ")", ".", "reshape", "(", "b", ",", "1", ",", "-", "1", ")", ".", "mean", "(", "2", ")", "\n", "", "thr_mask", "=", "kp_map", ">", "thr", "*", "kp_thr", ".", "view", "(", "b", ",", "1", ",", "1", ",", "1", ")", "\n", "nms_mask", "=", "thr_mask", "*", "nms_mask", "\n", "\n", "", "grids", "=", "grids_org", "\n", "\n", "if", "not", "num_pts", ":", "\n", "        ", "if", "use_nms", "!=", "'softnms'", ":", "\n", "            ", "num_pts", "=", "(", "nms_mask", ".", "view", "(", "b", ",", "-", "1", ")", ".", "sum", "(", "1", ")", ".", "min", "(", ")", ")", ".", "int", "(", ")", "\n", "", "else", ":", "\n", "# num_pts = (((nms_mask*kp_map[:,:,1:-1,1:-1]).view(b,-1)>thr*((nms_mask*kp_map[:,:,1:-1,1:-1]).view(b,-1).mean(1, True))).sum(1).min()).int()", "\n", "            ", "num_pts", "=", "(", "thr_mask", ".", "view", "(", "b", ",", "-", "1", ")", ".", "sum", "(", "1", ")", ".", "min", "(", ")", ")", ".", "int", "(", ")", "\n", "", "", "else", ":", "\n", "        ", "if", "use_nms", "!=", "'softnms'", "and", "num_pts", ">", "nms_mask", ".", "view", "(", "b", ",", "-", "1", ")", ".", "sum", "(", "1", ")", ".", "min", "(", ")", ":", "\n", "            ", "num_pts", "=", "(", "nms_mask", ".", "view", "(", "b", ",", "-", "1", ")", ".", "sum", "(", "1", ")", ".", "min", "(", ")", ")", ".", "int", "(", ")", "\n", "", "if", "use_nms", "==", "'softnms'", "and", "num_pts", ">", "thr_mask", ".", "view", "(", "b", ",", "-", "1", ")", ".", "sum", "(", "1", ")", ".", "min", "(", ")", ":", "\n", "            ", "num_pts", "=", "(", "thr_mask", ".", "view", "(", "b", ",", "-", "1", ")", ".", "sum", "(", "1", ")", ".", "min", "(", ")", ")", ".", "int", "(", ")", "\n", "", "", "if", "num_pts", "<", "128", ":", "\n", "        ", "num_pts", "=", "128", "\n", "\n", "", "if", "stable", ":", "\n", "        ", "_", ",", "idx", "=", "(", "nms_mask", "*", "kp_map", ")", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "contiguous", "(", ")", ".", "view", "(", "b", ",", "-", "1", ")", ".", "topk", "(", "num_pts", ")", "\n", "\n", "kps", "=", "grids", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "view", "(", "b", ",", "-", "1", ",", "2", ")", ".", "gather", "(", "dim", "=", "1", ",", "index", "=", "idx", ".", "unsqueeze", "(", "-", "1", ")", ".", "repeat", "(", "1", ",", "1", ",", "2", ")", ")", "\n", "kp_score", "=", "kp_map", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "view", "(", "b", ",", "-", "1", ",", "1", ")", ".", "gather", "(", "dim", "=", "1", ",", "index", "=", "idx", ".", "unsqueeze", "(", "-", "1", ")", ")", "\n", "", "else", ":", "\n", "# select = gumbel_softmax(kp_map, num_pts, temperature) # bxnxhw", "\n", "\n", "# kps = select@grids_org.permute(0,2,3,1).view(b,h*w,2)", "\n", "# kp_score = select@kp_map.permute(0,2,3,1).view(b,h*w,1)", "\n", "        ", "select", "=", "gumbel_softmax", "(", "nms_mask", "*", "kp_map", ",", "num_pts", ",", "temperature", ")", "# bxnxhw", "\n", "\n", "kps", "=", "select", "@", "grids", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "reshape", "(", "b", ",", "(", "h", "-", "2", ")", "*", "(", "w", "-", "2", ")", ",", "2", ")", "\n", "kp_score", "=", "select", "@", "kp_map", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "reshape", "(", "b", ",", "(", "h", "-", "2", ")", "*", "(", "w", "-", "2", ")", ",", "1", ")", "\n", "\n", "", "return", "kps", ",", "kp_score", "\n", "\n"]], "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.losses.preprocess_utils.unfold": [[344, 351], ["tensor.unfold().unfold", "unfold_tensor.reshape.reshape", "tensor.unfold"], "function", ["home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.losses.preprocess_utils.unfold", "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.losses.preprocess_utils.unfold"], ["", "def", "unfold", "(", "tensor", ",", "grid_size", ",", "stride", "=", "None", ")", ":", "\n", "    ", "if", "stride", "is", "None", ":", "\n", "        ", "stride", "=", "grid_size", "\n", "", "unfold_tensor", "=", "tensor", ".", "unfold", "(", "2", ",", "grid_size", ",", "stride", ")", ".", "unfold", "(", "3", ",", "grid_size", ",", "stride", ")", "\n", "b", ",", "c", ",", "h", ",", "w", ",", "g1", ",", "g2", "=", "unfold_tensor", ".", "shape", "\n", "unfold_tensor", "=", "unfold_tensor", ".", "reshape", "(", "b", ",", "c", ",", "h", ",", "w", ",", "g1", "*", "g2", ")", "\n", "return", "unfold_tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.losses.preprocess_utils.regular_sample": [[352, 357], ["torch.multinomial", "torch.multinomial", "torch.multinomial", "idx.reshape.reshape", "tensor.reshape"], "function", ["None"], ["", "def", "regular_sample", "(", "tensor", ")", ":", "\n", "    ", "b", ",", "c", ",", "h", ",", "w", ",", "g", "=", "tensor", ".", "shape", "\n", "idx", "=", "torch", ".", "multinomial", "(", "tensor", ".", "reshape", "(", "-", "1", ",", "g", ")", ",", "1", ")", "\n", "idx", "=", "idx", ".", "reshape", "(", "b", ",", "c", ",", "h", ",", "w", ",", "1", ")", "\n", "return", "idx", "\n", "\n"]], "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.losses.preprocess_utils.generate_kpts_regular_grid": [[358, 374], ["torch.rand", "torch.rand", "torch.rand", "preprocess_utils.generate_kpts_regular_grid_single", "preprocess_utils.generate_kpts_regular_grid_single", "preprocess_utils.generate_kpts_regular_grid_single", "preprocess_utils.generate_kpts_regular_grid_single"], "function", ["home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.losses.preprocess_utils.generate_kpts_regular_grid_single", "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.losses.preprocess_utils.generate_kpts_regular_grid_single", "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.losses.preprocess_utils.generate_kpts_regular_grid_single", "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.losses.preprocess_utils.generate_kpts_regular_grid_single"], ["", "def", "generate_kpts_regular_grid", "(", "inputs", ",", "outputs", ",", "grid_size", ",", "num_pts", "=", "False", ",", "stable_prob", "=", "0.9", ",", "use_nms", "=", "True", ",", "nms_radius", "=", "None", ")", ":", "\n", "    ", "preds1", "=", "outputs", "[", "'preds1'", "]", "\n", "preds2", "=", "outputs", "[", "'preds2'", "]", "\n", "kp_map1", ",", "kp_map2", "=", "preds1", "[", "'local_point'", "]", ",", "preds2", "[", "'local_point'", "]", "\n", "\n", "if", "torch", ".", "rand", "(", "1", ")", "<", "stable_prob", ":", "# stable select", "\n", "        ", "kps1", ",", "kp_score1", "=", "generate_kpts_regular_grid_single", "(", "kp_map1", ",", "grid_size", ",", "num_pts", ",", "scale", "=", "4", ",", "stable", "=", "True", ",", "use_nms", "=", "use_nms", ",", "\n", "nms_radius", "=", "nms_radius", ")", "\n", "kps2", ",", "kp_score2", "=", "generate_kpts_regular_grid_single", "(", "kp_map2", ",", "grid_size", ",", "num_pts", ",", "scale", "=", "4", ",", "stable", "=", "True", ",", "use_nms", "=", "use_nms", ",", "\n", "nms_radius", "=", "nms_radius", ")", "\n", "", "else", ":", "# random select", "\n", "        ", "kps1", ",", "kp_score1", "=", "generate_kpts_regular_grid_single", "(", "kp_map1", ",", "grid_size", ",", "num_pts", ",", "scale", "=", "4", ",", "stable", "=", "False", ",", "use_nms", "=", "use_nms", ",", "\n", "nms_radius", "=", "nms_radius", ")", "\n", "kps2", ",", "kp_score2", "=", "generate_kpts_regular_grid_single", "(", "kp_map2", ",", "grid_size", ",", "num_pts", ",", "scale", "=", "4", ",", "stable", "=", "False", ",", "use_nms", "=", "use_nms", ",", "\n", "nms_radius", "=", "nms_radius", ")", "\n", "", "return", "kps1", ",", "kps2", ",", "kp_score1", ",", "kp_score2", "\n", "\n"]], "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.losses.preprocess_utils.generate_kpts_regular_grid_single": [[375, 430], ["preprocess_utils.gen_grid", "[].repeat().to", "grids_org.permute.permute", "preprocess_utils.unfold", "preprocess_utils.unfold", "preprocess_utils.unfold", "torch.softmax", "unfold.gather", "unfold.gather", "unfold.gather", "kps.gather.reshape().transpose", "kp_score.reshape().transpose.reshape().transpose", "mask.reshape().transpose.reshape().transpose", "preprocess_utils.soft_nms", "torch.ones_like().bool", "torch.ones_like().bool", "torch.ones_like().bool", "F.softmax.argmax", "preprocess_utils.regular_sample", "kps.gather.gather", "[].repeat", "preprocess_utils.nms", "torch.ones_like().bool", "torch.ones_like().bool", "torch.ones_like().bool", "regular_sample.repeat", "kps.gather.reshape", "kp_score.reshape().transpose.reshape", "mask.reshape().transpose.reshape", "mask.reshape().transpose.sum().min", "mask.reshape().transpose.sum().min", "mask.reshape().transpose.sum().min", "kps.gather.gather", "torch.ones_like", "torch.ones_like", "torch.ones_like", "kp_map.view().max", "kp_map.view().mean", "kp_map.view().mean.view", "torch.ones_like", "torch.ones_like", "torch.ones_like", "mask.reshape().transpose.sum", "mask.reshape().transpose.sum", "mask.reshape().transpose.sum", "top_idx.repeat", "grids_org.permute.reshape", "kp_map.view", "kp_map.view"], "function", ["home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.losses.preprocess_utils.gen_grid", "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.losses.preprocess_utils.unfold", "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.losses.preprocess_utils.unfold", "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.losses.preprocess_utils.unfold", "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.losses.preprocess_utils.soft_nms", "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.losses.preprocess_utils.regular_sample", "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.losses.preprocess_utils.nms"], ["", "def", "generate_kpts_regular_grid_single", "(", "kp_map", ",", "grid_size", ",", "num_pts", "=", "False", ",", "scale", "=", "4", ",", "stable", "=", "True", ",", "use_nms", "=", "True", ",", "nms_radius", "=", "None", ",", "thr", "=", "None", ",", "thr_mod", "=", "'mean'", ")", ":", "\n", "    ", "b", ",", "_", ",", "h", ",", "w", "=", "kp_map", ".", "shape", "\n", "grids_org", "=", "gen_grid", "(", "h_min", "=", "-", "1", ",", "h_max", "=", "1", ",", "w_min", "=", "-", "1", ",", "w_max", "=", "1", ",", "len_h", "=", "h", ",", "len_w", "=", "w", ")", "\n", "# h, w = scale*h, scale*w", "\n", "# grids_org = gen_grid(h_min=0, h_max=h-1, w_min=0, w_max=w-1, len_h=h, len_w=w)", "\n", "grids_org", "=", "grids_org", ".", "reshape", "(", "h", ",", "w", ",", "2", ")", "[", "None", ",", ":", ",", ":", ",", ":", "]", ".", "repeat", "(", "b", ",", "1", ",", "1", ",", "1", ")", ".", "to", "(", "kp_map", ")", "\n", "grids_org", "=", "grids_org", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "# bx2xhxw", "\n", "if", "use_nms", "==", "'softnms'", ":", "\n", "        ", "soft_mask", "=", "soft_nms", "(", "kp_map", ",", "nms_radius", ")", "\n", "kp_map", "=", "soft_mask", "*", "kp_map", "\n", "nms_mask", "=", "torch", ".", "ones_like", "(", "soft_mask", ")", ".", "bool", "(", ")", "\n", "", "elif", "use_nms", ":", "\n", "        ", "nms_mask", "=", "nms", "(", "kp_map", ",", "nms_radius", ")", "\n", "", "else", ":", "\n", "        ", "nms_mask", "=", "torch", ".", "ones_like", "(", "kp_map", ")", ".", "bool", "(", ")", "\n", "\n", "", "if", "thr", "is", "not", "None", ":", "\n", "        ", "if", "thr_mod", "==", "'max'", ":", "\n", "            ", "kp_thr", "=", "kp_map", ".", "view", "(", "b", ",", "1", ",", "-", "1", ")", ".", "max", "(", "2", ")", "[", "0", "]", "\n", "", "elif", "thr_mod", "==", "'mean'", ":", "\n", "            ", "kp_thr", "=", "kp_map", ".", "view", "(", "b", ",", "1", ",", "-", "1", ")", ".", "mean", "(", "2", ")", "\n", "", "thr_mask", "=", "kp_map", ">", "thr", "*", "kp_thr", ".", "view", "(", "b", ",", "1", ",", "1", ",", "1", ")", "\n", "nms_mask", "=", "thr_mask", "&", "nms_mask", "\n", "\n", "", "grids_unfold", "=", "unfold", "(", "grids_org", ",", "grid_size", ")", "\n", "kpmap_unfold", "=", "unfold", "(", "kp_map", ",", "grid_size", ")", "\n", "nms_unfold", "=", "unfold", "(", "nms_mask", ",", "grid_size", ")", "\n", "\n", "kpmap_unfold_n", "=", "F", ".", "softmax", "(", "kpmap_unfold", ",", "dim", "=", "4", ")", "\n", "if", "stable", ":", "\n", "        ", "idx", "=", "kpmap_unfold_n", ".", "argmax", "(", "-", "1", ",", "True", ")", "\n", "", "else", ":", "\n", "        ", "idx", "=", "regular_sample", "(", "kpmap_unfold_n", ")", "\n", "\n", "", "kps", "=", "grids_unfold", ".", "gather", "(", "dim", "=", "4", ",", "index", "=", "idx", ".", "repeat", "(", "1", ",", "2", ",", "1", ",", "1", ",", "1", ")", ")", "# bx2x(h//g)x(w//g)x1", "\n", "kp_score", "=", "kpmap_unfold", ".", "gather", "(", "dim", "=", "4", ",", "index", "=", "idx", ")", "# bx1x(h//g)x(w//g)x1", "\n", "mask", "=", "nms_unfold", ".", "gather", "(", "dim", "=", "4", ",", "index", "=", "idx", ")", "# bx1x(h//g)x(w//g)x1", "\n", "\n", "kps", "=", "kps", ".", "reshape", "(", "b", ",", "2", ",", "-", "1", ")", ".", "transpose", "(", "1", ",", "2", ")", "# bxnx2", "\n", "kp_score", "=", "kp_score", ".", "reshape", "(", "b", ",", "1", ",", "-", "1", ")", ".", "transpose", "(", "1", ",", "2", ")", "# bxnx1", "\n", "mask", "=", "mask", ".", "reshape", "(", "b", ",", "1", ",", "-", "1", ")", ".", "transpose", "(", "1", ",", "2", ")", "# bxnx1", "\n", "\n", "if", "num_pts", ":", "\n", "        ", "if", "num_pts", ">", "mask", ".", "sum", "(", "1", ")", ".", "min", "(", ")", ":", "\n", "            ", "num_pts", "=", "mask", ".", "sum", "(", "1", ")", ".", "min", "(", ")", "\n", "", "kp_score", ",", "top_idx", "=", "(", "mask", "*", "kp_score", ")", ".", "topk", "(", "num_pts", ",", "dim", "=", "1", ")", "\n", "kps", "=", "kps", ".", "gather", "(", "dim", "=", "1", ",", "index", "=", "top_idx", ")", "\n", "", "else", ":", "\n", "        ", "if", "use_nms", ":", "\n", "            ", "num_pts", "=", "mask", ".", "sum", "(", "1", ")", ".", "min", "(", ")", "\n", "if", "num_pts", "<", "128", ":", "\n", "                ", "num_pts", "=", "128", "\n", "", "kp_score", ",", "top_idx", "=", "(", "mask", "*", "kp_score", ")", ".", "topk", "(", "num_pts", ",", "dim", "=", "1", ")", "\n", "kps", "=", "kps", ".", "gather", "(", "dim", "=", "1", ",", "index", "=", "top_idx", ".", "repeat", "(", "1", ",", "1", ",", "2", ")", ")", "\n", "", "", "return", "kps", ",", "kp_score", "\n", "\n"]], "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.losses.preprocess_utils.soft_nms": [[431, 448], ["score.detach().contiguous.detach().contiguous", "torch.softplus", "torch.avg_pool2d", "score.detach().contiguous.detach", "torch.pad"], "function", ["None"], ["", "def", "soft_nms", "(", "score", ",", "patch_radius", ")", ":", "\n", "    ", "b", ",", "c", ",", "h", ",", "w", "=", "score", ".", "shape", "\n", "window_size", "=", "2", "*", "patch_radius", "+", "1", "\n", "padding_size", "=", "patch_radius", "\n", "\n", "score", "=", "score", ".", "detach", "(", ")", ".", "contiguous", "(", ")", "\n", "# max_per_sample = torch.max(score.view(b,-1), dim=1)[0]", "\n", "# score = score/max_per_sample.view(b,1,1,1)", "\n", "# score = score.detach()", "\n", "\n", "alpha_input", "=", "score", "-", "F", ".", "avg_pool2d", "(", "\n", "F", ".", "pad", "(", "score", ",", "[", "padding_size", "]", "*", "4", ",", "mode", "=", "'reflect'", ")", ",", "\n", "window_size", ",", "stride", "=", "1", "\n", ")", "\n", "alpha", "=", "F", ".", "softplus", "(", "alpha_input", ")", "\n", "\n", "return", "alpha", "\n", "\n"]], "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.losses.preprocess_utils.nms": [[449, 465], ["torch.pad", "torch.max_pool2d", "torch.arange().reshape().repeat", "torch.arange().reshape().repeat", "torch.arange().reshape().repeat", "score.detach", "torch.arange().reshape", "torch.arange().reshape", "torch.arange().reshape", "torch.arange", "torch.arange", "torch.arange"], "function", ["None"], ["", "def", "nms", "(", "score", ",", "patch_radius", ")", ":", "\n", "    ", "patch_size", "=", "2", "*", "patch_radius", "+", "1", "\n", "score_pad", "=", "F", ".", "pad", "(", "score", ".", "detach", "(", ")", ",", "(", "patch_radius", ",", "patch_radius", ",", "patch_radius", ",", "patch_radius", ")", ",", "mode", "=", "'reflect'", ")", "\n", "# max_score = F.max_pool2d(score_pad, patch_size, stride=1, padding=0)", "\n", "# mask = score==max_score", "\n", "\n", "_", ",", "idx", "=", "F", ".", "max_pool2d", "(", "score_pad", ",", "patch_size", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "return_indices", "=", "True", ")", "\n", "# if len(idx.shape) == 4:", "\n", "#     assert idx.shape[0] == 1", "\n", "#     idx = idx.squeeze(0)", "\n", "b", ",", "_", ",", "h", ",", "w", "=", "score", ".", "shape", "\n", "coords", "=", "torch", ".", "arange", "(", "(", "h", "+", "2", "*", "patch_radius", ")", "*", "(", "w", "+", "2", "*", "patch_radius", ")", ",", "device", "=", "score", ".", "device", ")", ".", "reshape", "(", "1", ",", "1", ",", "h", "+", "2", "*", "patch_radius", ",", "w", "+", "2", "*", "patch_radius", ")", ".", "repeat", "(", "b", ",", "1", ",", "1", ",", "1", ")", "\n", "coords", "=", "coords", "[", ":", ",", ":", ",", "patch_radius", ":", "-", "patch_radius", ",", "patch_radius", ":", "-", "patch_radius", "]", "\n", "mask", "=", "idx", "==", "coords", "\n", "return", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.losses.preprocess_utils.gumbel_noise": [[467, 471], ["torch.rand", "torch.rand", "torch.rand", "U.cuda.cuda", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log"], "function", ["None"], ["", "def", "gumbel_noise", "(", "shape", ",", "eps", "=", "1e-20", ")", ":", "\n", "    ", "U", "=", "torch", ".", "rand", "(", "shape", ")", "\n", "U", "=", "U", ".", "cuda", "(", ")", "\n", "return", "-", "torch", ".", "log", "(", "-", "torch", ".", "log", "(", "U", "+", "eps", ")", "+", "eps", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.losses.preprocess_utils.gumbel_softmax_sample": [[472, 477], ["torch.softmax", "prob.view().repeat", "preprocess_utils.gumbel_noise", "prob.view"], "function", ["home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.losses.preprocess_utils.gumbel_noise"], ["", "def", "gumbel_softmax_sample", "(", "prob", ",", "num_points", ",", "temperature", "=", "1", ")", ":", "\n", "    ", "b", ",", "one", ",", "h", ",", "w", "=", "prob", ".", "shape", "\n", "y", "=", "prob", ".", "view", "(", "b", ",", "1", ",", "h", "*", "w", ")", ".", "repeat", "(", "1", ",", "num_points", ",", "1", ")", "+", "gumbel_noise", "(", "(", "b", ",", "num_points", ",", "h", "*", "w", ")", ")", "\n", "one_hot_soft", "=", "F", ".", "softmax", "(", "y", "/", "temperature", ",", "dim", "=", "2", ")", "\n", "return", "one_hot_soft", "\n", "\n"]], "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.losses.preprocess_utils.gumbel_softmax": [[478, 489], ["preprocess_utils.gumbel_softmax_sample", "gumbel_softmax_sample.max", "torch.zeros_like().view", "torch.zeros_like().view", "torch.zeros_like().view", "one_hot.view.scatter", "one_hot.view.view", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "idx.view"], "function", ["home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.losses.preprocess_utils.gumbel_softmax_sample"], ["", "def", "gumbel_softmax", "(", "prob", ",", "num_points", ",", "temperature", "=", "1", ",", "hard", "=", "False", ")", ":", "\n", "    ", "one_hot_soft", "=", "gumbel_softmax_sample", "(", "prob", ",", "num_points", ",", "temperature", ")", "# bx1xhw", "\n", "if", "not", "hard", ":", "\n", "        ", "return", "one_hot_soft", "\n", "", "b", ",", "num", ",", "hw", "=", "one_hot_soft", ".", "shape", "\n", "_", ",", "idx", "=", "one_hot_soft", ".", "max", "(", "dim", "=", "2", ")", "\n", "one_hot", "=", "torch", ".", "zeros_like", "(", "one_hot_soft", ")", ".", "view", "(", "-", "1", ",", "hw", ")", "\n", "one_hot", ".", "scatter", "(", "dim", "=", "2", ",", "index", "=", "idx", ".", "view", "(", "-", "1", ",", "1", ")", ",", "src", "=", "1", ")", "\n", "one_hot", "=", "one_hot", ".", "view", "(", "b", ",", "num", ",", "hw", ")", "\n", "one_hot", "=", "(", "one_hot", "-", "one_hot_soft", ")", ".", "detach", "(", ")", "+", "one_hot", "\n", "return", "one_hot", "\n", "\n"]], "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.losses.preprocess_utils.valid_points": [[490, 521], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack().transpose", "torch.stack().transpose", "torch.stack().transpose", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "points[].reshape", "preprocess_utils.normalize_coords", "preprocess_utils.normalize_coords", "mask.sum", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.stack", "torch.stack", "torch.stack", "torch.tensor", "torch.tensor", "torch.tensor", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like"], "function", ["home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.losses.preprocess_utils.normalize_coords", "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.losses.preprocess_utils.normalize_coords"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "valid_points", "(", "epipolar_line", ",", "im_size", ",", "linelen_thr", ")", ":", "\n", "    ", "'''\n    this function is actually the same as get_endpoints\n    return endpoints1 endpoints2 bxnx2\n    return valid bxn\n    '''", "\n", "batch_size", ",", "_", ",", "n_pts", "=", "epipolar_line", ".", "shape", "\n", "h", ",", "w", "=", "im_size", "\n", "a", "=", "epipolar_line", "[", ":", ",", "0", ",", ":", "]", "#Bxn", "\n", "b", "=", "epipolar_line", "[", ":", ",", "1", ",", ":", "]", "\n", "c", "=", "epipolar_line", "[", ":", ",", "2", ",", ":", "]", "\n", "point_l", "=", "torch", ".", "stack", "(", "[", "torch", ".", "zeros_like", "(", "a", ")", ",", "-", "c", "/", "b", "]", ",", "-", "1", ")", "#Bxnx2", "\n", "point_r", "=", "torch", ".", "stack", "(", "[", "(", "w", "-", "1", ")", "*", "torch", ".", "ones_like", "(", "a", ")", ",", "-", "(", "a", "*", "(", "w", "-", "1", ")", "+", "c", ")", "/", "b", "]", ",", "-", "1", ")", "\n", "point_u", "=", "torch", ".", "stack", "(", "[", "-", "(", "b", "*", "(", "h", "-", "1", ")", "+", "c", ")", "/", "a", ",", "(", "h", "-", "1", ")", "*", "torch", ".", "ones_like", "(", "a", ")", "]", ",", "-", "1", ")", "\n", "point_b", "=", "torch", ".", "stack", "(", "[", "-", "c", "/", "a", ",", "torch", ".", "zeros_like", "(", "a", ")", "]", ",", "-", "1", ")", "\n", "points", "=", "torch", ".", "stack", "(", "[", "point_l", ",", "point_r", ",", "point_u", ",", "point_b", "]", ",", "-", "1", ")", ".", "transpose", "(", "2", ",", "3", ")", "#Bxnx4x2", "\n", "mask", "=", "(", "points", "[", ":", ",", ":", ",", ":", ",", "0", "]", ">=", "0", ")", "&", "(", "points", "[", ":", ",", ":", ",", ":", ",", "0", "]", "<=", "w", "-", "1", ")", "&", "(", "points", "[", ":", ",", ":", ",", ":", ",", "1", "]", ">=", "0", ")", "&", "(", "points", "[", ":", ",", ":", ",", ":", ",", "1", "]", "<=", "h", "-", "1", ")", "#Bxnx4", "\n", "valid", "=", "mask", ".", "sum", "(", "-", "1", ")", "==", "2", "#Bxn", "\n", "\n", "mask", "[", "~", "valid", "]", "=", "torch", ".", "tensor", "(", "[", "True", ",", "True", ",", "False", ",", "False", "]", ")", ".", "to", "(", "mask", ".", "device", ")", "\n", "points", "=", "points", "[", "mask", "]", ".", "reshape", "(", "batch_size", ",", "n_pts", ",", "2", ",", "2", ")", "\n", "points1", "=", "points", "[", ":", ",", ":", ",", "0", ",", ":", "]", "\n", "points2", "=", "points", "[", ":", ",", ":", ",", "1", ",", ":", "]", "\n", "endpoints_1_n", "=", "normalize_coords", "(", "points1", ",", "h", ",", "w", ")", "\n", "endpoints_2_n", "=", "normalize_coords", "(", "points2", ",", "h", ",", "w", ")", "\n", "line_len", "=", "endpoints_2_n", "-", "endpoints_1_n", "\n", "len_mask", "=", "(", "line_len", "**", "2", ")", ".", "sum", "(", "-", "1", ")", ".", "sqrt", "(", ")", ">", "linelen_thr", "\n", "valid", "=", "valid", "&", "len_mask", "\n", "\n", "return", "valid", "\n", "\n"]], "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.losses.preprocess_utils.SSIM": [[522, 545], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.pad", "torch.pad", "torch.pad", "torch.avg_pool2d", "torch.avg_pool2d", "torch.clamp().mean", "torch.clamp().mean", "torch.clamp().mean", "x.abs", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "torch.clamp", "torch.clamp", "torch.clamp"], "function", ["None"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "SSIM", "(", "x", ")", ":", "\n", "    ", "C1", "=", "0.01", "**", "2", "\n", "C2", "=", "0.03", "**", "2", "\n", "\n", "x_pad", "=", "F", ".", "pad", "(", "x", ".", "abs", "(", ")", ",", "(", "0", ",", "1", ",", "0", ",", "1", ")", ",", "'reflect'", ")", "\n", "x_lu", "=", "x_pad", "[", ":", ",", ":", ",", ":", "-", "1", ",", ":", "-", "1", "]", "\n", "x_rb", "=", "x_pad", "[", ":", ",", ":", ",", "1", ":", ",", "1", ":", "]", "\n", "\n", "x_lu", "=", "F", ".", "pad", "(", "x_lu", ",", "(", "1", ",", "1", ",", "1", ",", "1", ")", ",", "'reflect'", ")", "\n", "x_rb", "=", "F", ".", "pad", "(", "x_rb", ",", "(", "1", ",", "1", ",", "1", ",", "1", ")", ",", "'reflect'", ")", "\n", "\n", "m_x_lu", "=", "F", ".", "avg_pool2d", "(", "x_lu", ",", "3", ",", "1", ")", "\n", "m_x_rb", "=", "F", ".", "avg_pool2d", "(", "x_rb", ",", "3", ",", "1", ")", "\n", "\n", "sigma_x_lu", "=", "F", ".", "avg_pool2d", "(", "x_lu", "**", "2", ",", "3", ",", "1", ")", "-", "m_x_lu", "**", "2", "\n", "sigma_x_rb", "=", "F", ".", "avg_pool2d", "(", "x_rb", "**", "2", ",", "3", ",", "1", ")", "-", "m_x_rb", "**", "2", "\n", "sigma_x_lu_rb", "=", "F", ".", "avg_pool2d", "(", "x_lu", "*", "x_rb", ",", "3", ",", "1", ")", "-", "m_x_lu", "*", "m_x_rb", "\n", "\n", "SSIM_n", "=", "(", "2", "*", "m_x_lu", "*", "m_x_rb", "+", "C1", ")", "*", "(", "2", "*", "sigma_x_lu_rb", "+", "C2", ")", "\n", "SSIM_d", "=", "(", "m_x_lu", "**", "2", "+", "m_x_rb", "**", "2", "+", "C1", ")", "*", "(", "sigma_x_lu", "+", "sigma_x_rb", "+", "C2", ")", "\n", "\n", "return", "torch", ".", "clamp", "(", "(", "1", "-", "SSIM_n", "/", "SSIM_d", ")", "/", "2", ",", "0", ",", "1", ")", ".", "mean", "(", "1", ",", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.losses.preprocess_utils.D2": [[546, 574], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.relu", "torch.exp", "torch.exp", "torch.exp", "score.unsqueeze", "torch.max", "torch.max", "torch.max", "torch.avg_pool2d", "torch.max", "torch.max", "torch.max", "depth_wise_max.unsqueeze", "torch.max", "torch.max", "torch.max", "F.relu.view", "max_per_sample.view", "torch.pad"], "function", ["None"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "D2", "(", "x", ")", ":", "\n", "    ", "b", ",", "c", ",", "h", ",", "w", "=", "x", ".", "shape", "\n", "window_size", "=", "3", "\n", "padding_size", "=", "window_size", "//", "2", "\n", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "max_per_sample", "=", "torch", ".", "max", "(", "x", ".", "view", "(", "b", ",", "-", "1", ")", ",", "dim", "=", "1", ")", "[", "0", "]", "\n", "exp", "=", "torch", ".", "exp", "(", "x", "/", "max_per_sample", ".", "view", "(", "b", ",", "1", ",", "1", ",", "1", ")", ")", "\n", "sum_exp", "=", "(", "\n", "window_size", "**", "2", "*", "\n", "F", ".", "avg_pool2d", "(", "\n", "F", ".", "pad", "(", "exp", ",", "[", "padding_size", "]", "*", "4", ",", "mode", "=", "'constant'", ",", "value", "=", "1.", ")", ",", "\n", "window_size", ",", "stride", "=", "1", "\n", ")", "\n", ")", "\n", "\n", "local_max_score", "=", "exp", "/", "sum_exp", "\n", "\n", "depth_wise_max", "=", "torch", ".", "max", "(", "x", ",", "dim", "=", "1", ")", "[", "0", "]", "\n", "depth_wise_max_score", "=", "x", "/", "depth_wise_max", ".", "unsqueeze", "(", "1", ")", "\n", "\n", "all_scores", "=", "local_max_score", "*", "depth_wise_max_score", "\n", "score", "=", "torch", ".", "max", "(", "all_scores", ",", "dim", "=", "1", ")", "[", "0", "]", "\n", "\n", "# score = score / torch.sum(score.view(b, -1), dim=1).view(b, 1, 1)", "\n", "\n", "return", "score", ".", "unsqueeze", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.losses.preprocess_utils.ASL_Peak": [[575, 597], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.softplus", "torch.softplus", "torch.max", "torch.max", "torch.max", "max_per_sample.view", "torch.avg_pool2d", "x.mean", "x.view", "torch.pad"], "function", ["None"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "ASL_Peak", "(", "x", ")", ":", "\n", "    ", "b", ",", "c", ",", "h", ",", "w", "=", "x", ".", "shape", "\n", "window_size", "=", "3", "\n", "padding_size", "=", "window_size", "//", "2", "\n", "\n", "# x = F.relu(x)", "\n", "max_per_sample", "=", "torch", ".", "max", "(", "x", ".", "view", "(", "b", ",", "-", "1", ")", ",", "dim", "=", "1", ")", "[", "0", "]", "\n", "x", "=", "x", "/", "max_per_sample", ".", "view", "(", "b", ",", "1", ",", "1", ",", "1", ")", "\n", "\n", "alpha_input", "=", "x", "-", "F", ".", "avg_pool2d", "(", "\n", "F", ".", "pad", "(", "x", ",", "[", "padding_size", "]", "*", "4", ",", "mode", "=", "'reflect'", ")", ",", "\n", "window_size", ",", "stride", "=", "1", "\n", ")", "\n", "alpha", "=", "F", ".", "softplus", "(", "alpha_input", ")", "\n", "\n", "beta_input", "=", "x", "-", "x", ".", "mean", "(", "1", ",", "True", ")", "\n", "beta", "=", "F", ".", "softplus", "(", "beta_input", ")", "\n", "\n", "all_scores", "=", "(", "alpha", "*", "beta", ")", ".", "max", "(", "1", ",", "True", ")", "[", "0", "]", "\n", "\n", "return", "all_scores", "\n", "\n"]], "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.losses.preprocess_utils.generate_kpts_regular_grid_random": [[598, 623], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "preprocess_utils.generate_kpts_regular_grid_random_single", "preprocess_utils.generate_kpts_regular_grid_random_single", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "eval", "eval.", "eval.", "kps1.reshape().transpose", "kps2.reshape().transpose", "kp_score1.reshape().transpose", "kp_score2.reshape().transpose", "kps1.squeeze().permute", "kps2.squeeze().permute", "kp_score1.permute", "kp_score2.permute", "torch.interpolate", "torch.interpolate", "kps1.reshape", "kps2.reshape", "kp_score1.reshape", "kp_score2.reshape", "kps1.squeeze", "kps2.squeeze"], "function", ["home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.losses.preprocess_utils.generate_kpts_regular_grid_random_single", "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.losses.preprocess_utils.generate_kpts_regular_grid_random_single"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "generate_kpts_regular_grid_random", "(", "inputs", ",", "outputs", ",", "grid_size", ",", "map_init", "=", "'identity'", ",", "keep_spatial", "=", "False", ",", "random_select", "=", "'random'", ")", ":", "\n", "    ", "\"\"\"\n    this is the function used to generate key points within regualr grid in descriptor initialization stage\n    \"\"\"", "\n", "preds1", "=", "outputs", "[", "'preds1'", "]", "\n", "preds2", "=", "outputs", "[", "'preds2'", "]", "\n", "if", "map_init", "==", "'identity'", ":", "\n", "        ", "kp_map1", ",", "kp_map2", "=", "torch", ".", "ones_like", "(", "preds1", "[", "'local_point'", "]", ")", ",", "torch", ".", "ones_like", "(", "preds2", "[", "'local_point'", "]", ")", "\n", "", "elif", "map_init", "in", "[", "'SSIM'", ",", "'D2'", ",", "'ASL_Peak'", "]", ":", "\n", "        ", "func", "=", "eval", "(", "map_init", ")", "\n", "kp_map1", "=", "func", "(", "F", ".", "interpolate", "(", "preds1", "[", "'local_map'", "]", ",", "inputs", "[", "'im1'", "]", ".", "shape", "[", "2", ":", "]", ",", "mode", "=", "'bilinear'", ")", ")", "\n", "kp_map2", "=", "func", "(", "F", ".", "interpolate", "(", "preds2", "[", "'local_map'", "]", ",", "inputs", "[", "'im2'", "]", ".", "shape", "[", "2", ":", "]", ",", "mode", "=", "'bilinear'", ")", ")", "\n", "\n", "", "kps1", ",", "kp_score1", "=", "generate_kpts_regular_grid_random_single", "(", "kp_map1", ",", "grid_size", ",", "random_select", ")", "\n", "kps2", ",", "kp_score2", "=", "generate_kpts_regular_grid_random_single", "(", "kp_map2", ",", "grid_size", ",", "random_select", ")", "\n", "\n", "if", "not", "keep_spatial", ":", "\n", "        ", "b", "=", "kps1", ".", "shape", "[", "0", "]", "\n", "kps1", ",", "kps2", "=", "kps1", ".", "reshape", "(", "b", ",", "2", ",", "-", "1", ")", ".", "transpose", "(", "1", ",", "2", ")", ",", "kps2", ".", "reshape", "(", "b", ",", "2", ",", "-", "1", ")", ".", "transpose", "(", "1", ",", "2", ")", "\n", "kp_score1", ",", "kp_score2", "=", "kp_score1", ".", "reshape", "(", "b", ",", "1", ",", "-", "1", ")", ".", "transpose", "(", "1", ",", "2", ")", ",", "kp_score2", ".", "reshape", "(", "b", ",", "1", ",", "-", "1", ")", ".", "transpose", "(", "1", ",", "2", ")", "\n", "", "else", ":", "\n", "        ", "kps1", ",", "kps2", "=", "kps1", ".", "squeeze", "(", "-", "1", ")", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ",", "kps2", ".", "squeeze", "(", "-", "1", ")", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", "\n", "kp_score1", ",", "kp_score2", "=", "kp_score1", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ",", "kp_score2", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", "\n", "", "return", "kps1", ",", "kps2", ",", "kp_score1", ",", "kp_score2", "\n", "\n"]], "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.losses.preprocess_utils.generate_kpts_regular_grid_random_single": [[624, 660], ["preprocess_utils.gen_grid", "[].repeat().to", "grids_org.permute.permute", "preprocess_utils.unfold", "torch.distributions.Categorical", "torch.distributions.Categorical.sample", "torch.distributions.Categorical.log_prob", "torch.gather().squeeze", "torch.gather().squeeze", "torch.gather().squeeze", "preprocess_utils.unfold", "unfold.gather", "preprocess_utils.gen_grid", "torch.grid_sample", "kps.permute.permute", "preprocess_utils.gen_grid", "[].repeat().to", "torch.grid_sample", "kps.permute.permute", "[].repeat", "torch.gather", "torch.gather", "torch.gather", "proposal_dist.sample.unsqueeze().repeat", "[].repeat().to", "[].repeat", "proposal_dist.sample.unsqueeze", "[].repeat", "grids_org.permute.reshape", "torch.rand", "torch.rand", "torch.rand", "kps.permute.reshape", "kps.permute.reshape"], "function", ["home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.losses.preprocess_utils.gen_grid", "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.losses.preprocess_utils.unfold", "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.losses.preprocess_utils.unfold", "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.losses.preprocess_utils.gen_grid", "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.losses.preprocess_utils.gen_grid"], ["", "def", "generate_kpts_regular_grid_random_single", "(", "kp_map", ",", "grid_size", ",", "random_select", ")", ":", "\n", "    ", "\"\"\"\n    note that the score returned by this function is the logp within the grid_size window\n    \"\"\"", "\n", "b", ",", "_", ",", "h", ",", "w", "=", "kp_map", ".", "shape", "\n", "if", "random_select", "==", "'random'", ":", "\n", "        ", "grids_org", "=", "gen_grid", "(", "h_min", "=", "-", "1", ",", "h_max", "=", "1", ",", "w_min", "=", "-", "1", ",", "w_max", "=", "1", ",", "len_h", "=", "h", ",", "len_w", "=", "w", ")", "\n", "grids_org", "=", "grids_org", ".", "reshape", "(", "h", ",", "w", ",", "2", ")", "[", "None", ",", ":", ",", ":", ",", ":", "]", ".", "repeat", "(", "b", ",", "1", ",", "1", ",", "1", ")", ".", "to", "(", "kp_map", ")", "\n", "grids_org", "=", "grids_org", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "# bx2xhxw", "\n", "\n", "kpmap_unfold", "=", "unfold", "(", "kp_map", ",", "grid_size", ")", "# bx1x(h//g)x(w//g)x(g*g)", "\n", "proposal_dist", "=", "Categorical", "(", "logits", "=", "kpmap_unfold", ")", "\n", "proposals", "=", "proposal_dist", ".", "sample", "(", ")", "# bx1x(h//g)x(w//g)", "\n", "proposal_logp", "=", "proposal_dist", ".", "log_prob", "(", "proposals", ")", "# bx1x(h//g)x(w//g)", "\n", "kp_score", "=", "torch", ".", "gather", "(", "kpmap_unfold", ",", "dim", "=", "-", "1", ",", "index", "=", "proposals", "[", "...", ",", "None", "]", ")", ".", "squeeze", "(", "-", "1", ")", "# bx1x(h//g)x(w//g)", "\n", "\n", "grids_unfold", "=", "unfold", "(", "grids_org", ",", "grid_size", ")", "# bx2x(h//g)x(w//g)x(g*g)", "\n", "kps", "=", "grids_unfold", ".", "gather", "(", "dim", "=", "4", ",", "index", "=", "proposals", ".", "unsqueeze", "(", "-", "1", ")", ".", "repeat", "(", "1", ",", "2", ",", "1", ",", "1", ",", "1", ")", ")", "\n", "", "elif", "random_select", "==", "'regular_random'", ":", "\n", "        ", "start", "=", "0.5", "*", "grid_size", "/", "h", "\n", "num_w", "=", "w", "//", "grid_size", "\n", "num_h", "=", "h", "//", "grid_size", "\n", "kps", "=", "gen_grid", "(", "h_min", "=", "-", "1", "+", "start", ",", "h_max", "=", "1", "-", "start", ",", "w_min", "=", "-", "1", "+", "start", ",", "w_max", "=", "1", "-", "start", ",", "len_h", "=", "num_h", ",", "len_w", "=", "num_w", ")", "\n", "regular_rand", "=", "start", "*", "(", "2", "*", "torch", ".", "rand", "(", "b", ",", "1", ",", "1", ",", "2", ")", "-", "1", ")", ".", "to", "(", "kp_map", ")", "\n", "kps", "=", "kps", ".", "reshape", "(", "num_h", ",", "num_w", ",", "2", ")", "[", "None", ",", ":", ",", ":", ",", ":", "]", ".", "repeat", "(", "b", ",", "1", ",", "1", ",", "1", ")", ".", "to", "(", "kp_map", ")", "+", "regular_rand", "\n", "kp_score", "=", "F", ".", "grid_sample", "(", "kp_map", ",", "kps", ",", "padding_mode", "=", "'zeros'", ",", "align_corners", "=", "False", ")", "# bx1x(h//g)x(w//g)", "\n", "kps", "=", "kps", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", "", "else", ":", "\n", "        ", "start", "=", "0.5", "*", "grid_size", "/", "h", "\n", "num_w", "=", "w", "//", "grid_size", "\n", "num_h", "=", "h", "//", "grid_size", "\n", "kps", "=", "gen_grid", "(", "h_min", "=", "-", "1", "+", "start", ",", "h_max", "=", "1", "-", "start", ",", "w_min", "=", "-", "1", "+", "start", ",", "w_max", "=", "1", "-", "start", ",", "len_h", "=", "num_h", ",", "len_w", "=", "num_w", ")", "\n", "kps", "=", "kps", ".", "reshape", "(", "h", ",", "w", ",", "2", ")", "[", "None", ",", ":", ",", ":", ",", ":", "]", ".", "repeat", "(", "b", ",", "1", ",", "1", ",", "1", ")", ".", "to", "(", "kp_map", ")", "\n", "kp_score", "=", "F", ".", "grid_sample", "(", "kp_map", ",", "kps", ",", "padding_mode", "=", "'zeros'", ",", "align_corners", "=", "False", ")", "# bx1x(h//g)x(w//g)", "\n", "kps", "=", "kps", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "# bx2x(h//g)x(w//g)", "\n", "", "return", "kps", ",", "kp_score", "\n", "\n"]], "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.losses.preprocess_utils.epipolar_line_search": [[661, 695], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "preprocess_utils.get_endpoints", "torch.stack().to", "torch.stack().to", "torch.stack().to", "torch.grid_sample().permute", "compute_prob().reshape", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.stack", "torch.stack", "torch.stack", "torch.grid_sample", "preprocess_utils.compute_prob", "torch.clamp", "torch.clamp", "torch.clamp", "feat1.reshape", "F.grid_sample().permute.reshape", "compute_prob().reshape.max", "compute_prob().reshape.unsqueeze", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "mask.unsqueeze", "compute_prob().reshape.unsqueeze", "torch.rand().type_as", "torch.rand().type_as", "torch.rand().type_as", "torch.rand", "torch.rand", "torch.rand"], "function", ["home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.losses.preprocess_utils.get_endpoints", "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.losses.preprocess_utils.compute_prob"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "epipolar_line_search", "(", "coord", ",", "Fmat", ",", "feat1", ",", "featmap2", ",", "h", ",", "w", ",", "line_step", "=", "100", ",", "use_nn", "=", "True", ",", "loc_rand", "=", "True", ",", "window_size", "=", "0.125", ",", "visualize", "=", "False", ")", ":", "\n", "    ", "batch_size", ",", "n_dim", ",", "h2", ",", "w2", "=", "featmap2", ".", "shape", "\n", "n_pts", "=", "coord", ".", "shape", "[", "1", "]", "\n", "endpoints_1_n", ",", "endpoints_2_n", ",", "valid", "=", "get_endpoints", "(", "coord", ",", "Fmat", ",", "h", ",", "w", ")", "\n", "sample_grids", "=", "torch", ".", "stack", "(", "[", "torch", ".", "linspace", "(", "0.", ",", "1.", ",", "line_step", ")", ",", "torch", ".", "linspace", "(", "0.", ",", "1.", ",", "line_step", ")", "]", ",", "-", "1", ")", ".", "to", "(", "coord", ".", "device", ")", "# stepx2", "\n", "line_len", "=", "endpoints_2_n", "-", "endpoints_1_n", "#bxnx2", "\n", "\n", "# weight_len = (line_len[:,:,0]**2+line_len[:,:,1]**2).sqrt() #bxn decide the weight according to the epipolar line length, which belongs to [0, 2*sqrt(2)]", "\n", "sample_grids", "=", "line_len", "[", ":", ",", ":", ",", "None", ",", ":", "]", "*", "sample_grids", "[", "None", ",", "None", ",", ":", ",", ":", "]", "#bxnxstepx2", "\n", "sample_grids", "=", "sample_grids", "+", "endpoints_1_n", "[", ":", ",", ":", ",", "None", ",", ":", "]", "\n", "\n", "sample_points", "=", "F", ".", "grid_sample", "(", "featmap2", ",", "sample_grids", ",", "padding_mode", "=", "'border'", ",", "align_corners", "=", "False", ")", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", "# Bxnxstepxd", "\n", "prob", "=", "compute_prob", "(", "feat1", ".", "reshape", "(", "batch_size", "*", "n_pts", ",", "1", ",", "n_dim", ")", ",", "\n", "sample_points", ".", "reshape", "(", "batch_size", "*", "n_pts", ",", "line_step", ",", "n_dim", ")", ")", ".", "reshape", "(", "batch_size", ",", "n_pts", ",", "line_step", ")", "\n", "\n", "# expected_coord = torch.sum(sample_grids * prob.unsqueeze(-1), dim=2)  # Bxnx2", "\n", "if", "use_nn", ":", "\n", "        ", "mask", "=", "prob", "==", "prob", ".", "max", "(", "-", "1", ",", "True", ")", "[", "0", "]", "\n", "expected_coord", "=", "(", "mask", ".", "unsqueeze", "(", "-", "1", ")", "*", "sample_grids", ")", ".", "sum", "(", "2", ")", "# bxnx2", "\n", "", "else", ":", "\n", "        ", "expected_coord", "=", "(", "prob", ".", "unsqueeze", "(", "-", "1", ")", "*", "sample_grids", ")", ".", "sum", "(", "2", ")", "# Bxnx2", "\n", "", "if", "loc_rand", ":", "\n", "        ", "expected_coord_org", "=", "expected_coord", "\n", "expected_coord", "=", "expected_coord", "+", "0.707", "*", "window_size", "*", "(", "2", "*", "torch", ".", "rand", "(", "expected_coord", ".", "shape", ")", ".", "type_as", "(", "expected_coord", ")", "-", "1", ")", "\n", "", "boarder_mask", "=", "(", "expected_coord", "[", ":", ",", ":", ",", "0", "]", ">=", "-", "1", ")", "&", "(", "expected_coord", "[", ":", ",", ":", ",", "0", "]", "<=", "1", ")", "&", "(", "expected_coord", "[", ":", ",", ":", ",", "1", "]", ">=", "-", "1", ")", "&", "(", "expected_coord", "[", ":", ",", ":", ",", "1", "]", "<=", "1", ")", "\n", "valid", "=", "valid", "&", "boarder_mask", "\n", "\n", "var", "=", "torch", ".", "sum", "(", "sample_grids", "**", "2", "*", "prob", ".", "unsqueeze", "(", "-", "1", ")", ",", "dim", "=", "2", ")", "-", "expected_coord", "**", "2", "# Bxnx2", "\n", "std", "=", "torch", ".", "sum", "(", "torch", ".", "sqrt", "(", "torch", ".", "clamp", "(", "var", ",", "min", "=", "1e-10", ")", ")", ",", "-", "1", ")", "\n", "if", "visualize", ":", "\n", "        ", "return", "expected_coord", ",", "expected_coord_org", ",", "valid", ",", "std", ",", "prob", "\n", "", "else", ":", "\n", "        ", "return", "expected_coord", ",", "expected_coord_org", ",", "valid", ",", "std", "\n", "\n"]], "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.losses.preprocess_utils.get_endpoints": [[696, 720], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "homogenize().transpose", "Fmat.bmm", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack().transpose", "torch.stack().transpose", "torch.stack().transpose", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "points[].reshape", "mask.sum", "preprocess_utils.normalize_coords", "preprocess_utils.normalize_coords", "preprocess_utils.homogenize", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.stack", "torch.stack", "torch.stack", "torch.tensor", "torch.tensor", "torch.tensor", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like"], "function", ["home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.losses.preprocess_utils.normalize_coords", "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.losses.preprocess_utils.normalize_coords", "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.losses.preprocess_utils.homogenize"], ["", "", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "get_endpoints", "(", "coords", ",", "Fmat", ",", "h", ",", "w", ")", ":", "\n", "    ", "'''\n    return endpoints1 endpoints2 bxnx2\n    return valid bxn\n    '''", "\n", "batch_size", ",", "n_pts", ",", "_", "=", "coords", ".", "shape", "\n", "coord_h", "=", "homogenize", "(", "coords", ")", ".", "transpose", "(", "1", ",", "2", ")", "\n", "epipolar_line", "=", "Fmat", ".", "bmm", "(", "coord_h", ")", "\n", "a", "=", "epipolar_line", "[", ":", ",", "0", ",", ":", "]", "#Bxn", "\n", "b", "=", "epipolar_line", "[", ":", ",", "1", ",", ":", "]", "\n", "c", "=", "epipolar_line", "[", ":", ",", "2", ",", ":", "]", "\n", "point_l", "=", "torch", ".", "stack", "(", "[", "torch", ".", "zeros_like", "(", "a", ")", ",", "-", "c", "/", "b", "]", ",", "-", "1", ")", "#Bxnx2", "\n", "point_r", "=", "torch", ".", "stack", "(", "[", "(", "w", "-", "1", ")", "*", "torch", ".", "ones_like", "(", "a", ")", ",", "-", "(", "a", "*", "(", "w", "-", "1", ")", "+", "c", ")", "/", "b", "]", ",", "-", "1", ")", "\n", "point_u", "=", "torch", ".", "stack", "(", "[", "-", "(", "b", "*", "(", "h", "-", "1", ")", "+", "c", ")", "/", "a", ",", "(", "h", "-", "1", ")", "*", "torch", ".", "ones_like", "(", "a", ")", "]", ",", "-", "1", ")", "\n", "point_b", "=", "torch", ".", "stack", "(", "[", "-", "c", "/", "a", ",", "torch", ".", "zeros_like", "(", "a", ")", "]", ",", "-", "1", ")", "\n", "points", "=", "torch", ".", "stack", "(", "[", "point_l", ",", "point_r", ",", "point_u", ",", "point_b", "]", ",", "-", "1", ")", ".", "transpose", "(", "2", ",", "3", ")", "#Bxnx4x2", "\n", "mask", "=", "(", "points", "[", ":", ",", ":", ",", ":", ",", "0", "]", ">=", "0", ")", "&", "(", "points", "[", ":", ",", ":", ",", ":", ",", "0", "]", "<=", "w", "-", "1", ")", "&", "(", "points", "[", ":", ",", ":", ",", ":", ",", "1", "]", ">=", "0", ")", "&", "(", "points", "[", ":", ",", ":", ",", ":", ",", "1", "]", "<=", "h", "-", "1", ")", "#Bxnx4", "\n", "valid", "=", "mask", ".", "sum", "(", "-", "1", ")", "==", "2", "#Bxn", "\n", "mask", "[", "~", "valid", "]", "=", "torch", ".", "tensor", "(", "[", "True", ",", "True", ",", "False", ",", "False", "]", ")", ".", "to", "(", "mask", ".", "device", ")", "\n", "points", "=", "points", "[", "mask", "]", ".", "reshape", "(", "batch_size", ",", "n_pts", ",", "2", ",", "2", ")", "\n", "points1", "=", "points", "[", ":", ",", ":", ",", "0", ",", ":", "]", "\n", "points2", "=", "points", "[", ":", ",", ":", ",", "1", ",", ":", "]", "\n", "return", "normalize_coords", "(", "points1", ",", "h", ",", "w", ")", ",", "normalize_coords", "(", "points2", ",", "h", ",", "w", ")", ",", "valid", "\n", "\n"]], "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.losses.preprocess_utils.get_expected_correspondence_within_window": [[721, 759], ["preprocess_utils.gen_grid", "gen_grid.repeat().to", "torch.grid_sample().permute", "feat1.unsqueeze.unsqueeze", "preprocess_utils.compute_prob", "prob.reshape.reshape", "torch.sum", "torch.sum", "torch.sum", "tuple", "coord2_n.unsqueeze", "feat1.unsqueeze.reshape", "F.grid_sample().permute.reshape", "torch.sum", "torch.sum", "torch.sum", "re_list.append", "re_list.append", "re_list.append", "int", "int", "gen_grid.repeat", "torch.grid_sample", "prob.reshape.unsqueeze", "torch.sum", "torch.sum", "torch.sum", "torch.sqrt", "torch.sqrt", "torch.sqrt", "sim.reshape", "torch.clamp", "torch.clamp", "torch.clamp", "int", "int", "prob.reshape.unsqueeze"], "function", ["home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.losses.preprocess_utils.gen_grid", "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.losses.preprocess_utils.compute_prob"], ["", "def", "get_expected_correspondence_within_window", "(", "feat1", ",", "featmap2", ",", "coord2_n", ",", "window_size", ",", "with_std", "=", "False", ",", "with_sim", "=", "False", ")", ":", "\n", "    ", "'''\n    :param feat1: the feature vectors of query points [batch_size, n_pts, n_dim]\n    :param featmap2: the feature maps of the reference image [batch_size, n_dim, h, w]\n    :param coord2_n: normalized center locations [batch_size, n_pts, 2]\n    :param with_std: if True, return the standard deviation\n    :return: the normalized expected correspondence locations, [batch_size, n_pts, 2], optionally with std\n    '''", "\n", "batch_size", ",", "n_dim", ",", "h2", ",", "w2", "=", "featmap2", ".", "shape", "\n", "n_pts", "=", "coord2_n", ".", "shape", "[", "1", "]", "\n", "grid_n", "=", "gen_grid", "(", "h_min", "=", "-", "window_size", ",", "h_max", "=", "window_size", ",", "\n", "w_min", "=", "-", "window_size", ",", "w_max", "=", "window_size", ",", "\n", "len_h", "=", "int", "(", "window_size", "*", "h2", ")", ",", "len_w", "=", "int", "(", "window_size", "*", "w2", ")", ")", "\n", "\n", "grid_n_", "=", "grid_n", ".", "repeat", "(", "batch_size", ",", "1", ",", "1", ",", "1", ")", ".", "to", "(", "coord2_n", ")", "# Bx1xhwx2", "\n", "coord2_n_grid", "=", "coord2_n", ".", "unsqueeze", "(", "-", "2", ")", "+", "grid_n_", "# Bxnxhwx2", "\n", "feat2_win", "=", "F", ".", "grid_sample", "(", "featmap2", ",", "coord2_n_grid", ",", "padding_mode", "=", "'zeros'", ",", "align_corners", "=", "False", ")", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", "# Bxnxhwxd", "\n", "\n", "feat1", "=", "feat1", ".", "unsqueeze", "(", "-", "2", ")", "\n", "\n", "prob", ",", "sim", "=", "compute_prob", "(", "feat1", ".", "reshape", "(", "batch_size", "*", "n_pts", ",", "-", "1", ",", "n_dim", ")", ",", "\n", "feat2_win", ".", "reshape", "(", "batch_size", "*", "n_pts", ",", "-", "1", ",", "n_dim", ")", ",", "return_sim", "=", "True", ")", "#.reshape(batch_size, n_pts, -1)", "\n", "prob", "=", "prob", ".", "reshape", "(", "batch_size", ",", "n_pts", ",", "-", "1", ")", "\n", "\n", "expected_coord2_n", "=", "torch", ".", "sum", "(", "coord2_n_grid", "*", "prob", ".", "unsqueeze", "(", "-", "1", ")", ",", "dim", "=", "2", ")", "# Bxnx2", "\n", "\n", "re_list", "=", "[", "expected_coord2_n", ",", "coord2_n_grid", "]", "\n", "if", "with_std", ":", "\n", "        ", "var", "=", "torch", ".", "sum", "(", "coord2_n_grid", "**", "2", "*", "prob", ".", "unsqueeze", "(", "-", "1", ")", ",", "dim", "=", "2", ")", "-", "expected_coord2_n", "**", "2", "# Bxnx2", "\n", "std", "=", "torch", ".", "sum", "(", "torch", ".", "sqrt", "(", "torch", ".", "clamp", "(", "var", ",", "min", "=", "1e-10", ")", ")", ",", "-", "1", ")", "# Bxn", "\n", "# return expected_coord2_n, coord2_n_grid, std, prob", "\n", "re_list", ".", "append", "(", "std", ")", "\n", "re_list", ".", "append", "(", "prob", ")", "\n", "# else:", "\n", "#     return expected_coord2_n, coord2_n_grid", "\n", "", "if", "with_sim", ":", "\n", "        ", "re_list", ".", "append", "(", "sim", ".", "reshape", "(", "batch_size", ",", "n_pts", ",", "int", "(", "window_size", "*", "h2", ")", ",", "int", "(", "window_size", "*", "w2", ")", ")", ")", "\n", "", "return", "tuple", "(", "re_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.losses.preprocess_utils.generate_kpts_disk": [[761, 770], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "preprocess_utils.generate_kpts_disk_single", "preprocess_utils.generate_kpts_disk_single"], "function", ["home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.losses.preprocess_utils.generate_kpts_disk_single", "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.losses.preprocess_utils.generate_kpts_disk_single"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "generate_kpts_disk", "(", "inputs", ",", "outputs", ",", "grid_size", ",", "keep_spatial", "=", "False", ")", ":", "\n", "    ", "preds1", "=", "outputs", "[", "'preds1'", "]", "\n", "preds2", "=", "outputs", "[", "'preds2'", "]", "\n", "\n", "kp_map1", ",", "kp_map2", "=", "preds1", "[", "'local_point'", "]", ",", "preds2", "[", "'local_point'", "]", "\n", "kps1", ",", "logp1", ",", "accept_mask1", "=", "generate_kpts_disk_single", "(", "kp_map1", ",", "grid_size", ")", "\n", "kps2", ",", "logp2", ",", "accept_mask2", "=", "generate_kpts_disk_single", "(", "kp_map2", ",", "grid_size", ")", "\n", "return", "kps1", ",", "kps2", ",", "logp1", ",", "logp2", "\n", "\n"]], "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.losses.preprocess_utils.generate_kpts_disk_single": [[771, 794], ["preprocess_utils.gen_grid", "[].repeat().to", "grids_org.permute.permute", "preprocess_utils.unfold", "preprocess_utils.unfold", "torch.distributions.Categorical", "torch.distributions.Categorical.sample", "torch.distributions.Categorical.log_prob", "torch.gather().squeeze", "torch.gather().squeeze", "torch.gather().squeeze", "torch.distributions.Bernoulli", "torch.distributions.Bernoulli.sample", "torch.distributions.Bernoulli.log_prob", "unfold.gather", "[].repeat", "torch.gather", "torch.gather", "torch.gather", "proposal_dist.sample.unsqueeze().repeat", "proposal_dist.sample.unsqueeze", "grids_org.permute.reshape"], "function", ["home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.losses.preprocess_utils.gen_grid", "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.losses.preprocess_utils.unfold", "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.losses.preprocess_utils.unfold"], ["", "def", "generate_kpts_disk_single", "(", "kp_map", ",", "grid_size", ")", ":", "\n", "    ", "b", ",", "_", ",", "h", ",", "w", "=", "kp_map", ".", "shape", "\n", "grids_org", "=", "gen_grid", "(", "h_min", "=", "-", "1", ",", "h_max", "=", "1", ",", "w_min", "=", "-", "1", ",", "w_max", "=", "1", ",", "len_h", "=", "h", ",", "len_w", "=", "w", ")", "\n", "grids_org", "=", "grids_org", ".", "reshape", "(", "h", ",", "w", ",", "2", ")", "[", "None", ",", ":", ",", ":", ",", ":", "]", ".", "repeat", "(", "b", ",", "1", ",", "1", ",", "1", ")", ".", "to", "(", "kp_map", ")", "\n", "grids_org", "=", "grids_org", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", "\n", "grids_unfold", "=", "unfold", "(", "grids_org", ",", "grid_size", ")", "# bx2x(h//g)x(w//g)x(g*g)", "\n", "kpmap_unfold", "=", "unfold", "(", "kp_map", ",", "grid_size", ")", "\n", "\n", "proposal_dist", "=", "Categorical", "(", "logits", "=", "kpmap_unfold", ")", "\n", "proposals", "=", "proposal_dist", ".", "sample", "(", ")", "# bx1x(h//g)x(w//g)", "\n", "proposal_logp", "=", "proposal_dist", ".", "log_prob", "(", "proposals", ")", "\n", "\n", "accept_logits", "=", "torch", ".", "gather", "(", "logits", ",", "dim", "=", "-", "1", ",", "index", "=", "proposals", "[", "...", ",", "None", "]", ")", ".", "squeeze", "(", "-", "1", ")", "# bx1x(h//g)x(w//g)", "\n", "\n", "accept_dist", "=", "Bernoulli", "(", "logits", "=", "accept_logits", ")", "\n", "accept_samples", "=", "accept_dist", ".", "sample", "(", ")", "# bx1x(h//g)x(w//g)", "\n", "accept_logp", "=", "accept_dist", ".", "log_prob", "(", "accept_samples", ")", "# for accepted points, equals to sigmoid() then log(); for denied, (1-sigmoid).log", "\n", "accept_mask", "=", "accept_samples", "==", "1.", "\n", "\n", "logp", "=", "proposal_logp", "+", "accept_logp", "\n", "kps", "=", "grids_unfold", ".", "gather", "(", "dim", "=", "4", ",", "index", "=", "proposals", ".", "unsqueeze", "(", "-", "1", ")", ".", "repeat", "(", "1", ",", "2", ",", "1", ",", "1", ",", "1", ")", ")", "\n", "return", "kps", ",", "logp", ",", "accept_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.losses.preprocess_utils.mnn_matcher": [[795, 804], ["torch.arange", "torch.arange", "torch.arange", "torch.stack", "torch.stack", "torch.stack", "torch.stack.t().data.cpu().numpy", "descriptors_b.t", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.stack.t().data.cpu", "torch.stack.t"], "function", ["None"], ["", "def", "mnn_matcher", "(", "descriptors_a", ",", "descriptors_b", ")", ":", "\n", "    ", "device", "=", "descriptors_a", ".", "device", "\n", "sim", "=", "descriptors_a", "@", "descriptors_b", ".", "t", "(", ")", "\n", "nn12", "=", "torch", ".", "max", "(", "sim", ",", "dim", "=", "1", ")", "[", "1", "]", "\n", "nn21", "=", "torch", ".", "max", "(", "sim", ",", "dim", "=", "0", ")", "[", "1", "]", "\n", "ids1", "=", "torch", ".", "arange", "(", "0", ",", "sim", ".", "shape", "[", "0", "]", ",", "device", "=", "device", ")", "\n", "mask", "=", "(", "ids1", "==", "nn21", "[", "nn12", "]", ")", "\n", "matches", "=", "torch", ".", "stack", "(", "[", "ids1", "[", "mask", "]", ",", "nn12", "[", "mask", "]", "]", ")", "\n", "return", "matches", ".", "t", "(", ")", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.The-Learning-And-Vision-Atelier-LAVA_PoSFeat.losses.preprocess_utils.cycle": [[805, 809], ["None"], "function", ["None"], ["", "def", "cycle", "(", "iterable", ")", ":", "\n", "    ", "while", "True", ":", "\n", "        ", "for", "x", "in", "iterable", ":", "\n", "            ", "yield", "x", "", "", "", "", ""]]}