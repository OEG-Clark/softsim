{"home.repos.pwc.inspect_result.xuanqing94_BayesianDefense.None.snr_density.extract_param": [[48, 58], ["type", "print", "module.sigma_weight.detach().view().cpu().numpy().tolist", "snr_buffer.extend", "module.children", "snr_density.extract_param", "module.sigma_weight.detach().view().cpu().numpy", "module.sigma_weight.detach().view().cpu", "module.sigma_weight.detach().view", "module.sigma_weight.detach"], "function", ["home.repos.pwc.inspect_result.xuanqing94_BayesianDefense.None.snr_density.extract_param"], ["def", "extract_param", "(", "module", ")", ":", "\n", "    ", "modname", "=", "type", "(", "module", ")", ".", "__name__", "\n", "if", "modname", "in", "module_set", ":", "\n", "        ", "print", "(", "modname", ")", "\n", "#snr = (torch.abs(module.mu_weight) / torch.exp(module.sigma_weight)).detach().view(-1).cpu().numpy().tolist()", "\n", "snr", "=", "module", ".", "sigma_weight", ".", "detach", "(", ")", ".", "view", "(", "-", "1", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "tolist", "(", ")", "\n", "snr_buffer", ".", "extend", "(", "snr", ")", "\n", "", "else", ":", "\n", "        ", "for", "submod", "in", "module", ".", "children", "(", ")", ":", "\n", "            ", "extract_param", "(", "submod", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xuanqing94_BayesianDefense.None.main_rse.train": [[98, 117], ["print", "net.train", "enumerate", "print", "optimizer.zero_grad", "net", "criterion", "criterion.backward", "optimizer.step", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "targets.numel", "inputs.cuda", "targets.cuda", "torch.max", "torch.max", "torch.max", "torch.max", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "pred.eq"], "function", ["home.repos.pwc.inspect_result.xuanqing94_BayesianDefense.None.main_adv_vi.train", "home.repos.pwc.inspect_result.xuanqing94_BayesianDefense.layers.weight_noise.IdFn.backward", "home.repos.pwc.inspect_result.xuanqing94_BayesianDefense.attacker.linf_sgd.Linf_SGD.step"], ["def", "train", "(", "epoch", ")", ":", "\n", "    ", "print", "(", "'Epoch: %d'", "%", "epoch", ")", "\n", "net", ".", "train", "(", ")", "\n", "train_loss", "=", "0", "\n", "correct", "=", "0", "\n", "total", "=", "0", "\n", "for", "batch_idx", ",", "(", "inputs", ",", "targets", ")", "in", "enumerate", "(", "trainloader", ")", ":", "\n", "        ", "inputs", ",", "targets", "=", "inputs", ".", "cuda", "(", ")", ",", "targets", ".", "cuda", "(", ")", "\n", "# No adv. training", "\n", "#x_adv = Linf_PGD(inputs, targets, net, 10, 0.03125)", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "outputs", ",", "_", "=", "net", "(", "inputs", ")", "\n", "loss", "=", "criterion", "(", "outputs", ",", "targets", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "pred", "=", "torch", ".", "max", "(", "outputs", ",", "dim", "=", "1", ")", "[", "1", "]", "\n", "correct", "+=", "torch", ".", "sum", "(", "pred", ".", "eq", "(", "targets", ")", ")", ".", "item", "(", ")", "\n", "total", "+=", "targets", ".", "numel", "(", ")", "\n", "", "print", "(", "f'[TRAIN] Acc: {100.*correct/total:.3f}'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xuanqing94_BayesianDefense.None.main_rse.test": [[118, 136], ["net.eval", "torch.save", "torch.save", "torch.save", "torch.save", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "print", "net.state_dict", "net", "criterion", "criterion.item", "outputs.max", "targets.size", "predicted.eq().sum().item", "inputs.cuda", "targets.cuda", "predicted.eq().sum", "predicted.eq"], "function", ["None"], ["", "def", "test", "(", "epoch", ")", ":", "\n", "    ", "net", ".", "eval", "(", ")", "\n", "test_loss", "=", "0", "\n", "correct", "=", "0", "\n", "total", "=", "0", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "batch_idx", ",", "(", "inputs", ",", "targets", ")", "in", "enumerate", "(", "testloader", ")", ":", "\n", "            ", "inputs", ",", "targets", "=", "inputs", ".", "cuda", "(", ")", ",", "targets", ".", "cuda", "(", ")", "\n", "outputs", ",", "_", "=", "net", "(", "inputs", ")", "\n", "loss", "=", "criterion", "(", "outputs", ",", "targets", ")", "\n", "test_loss", "+=", "loss", ".", "item", "(", ")", "\n", "_", ",", "predicted", "=", "outputs", ".", "max", "(", "1", ")", "\n", "total", "+=", "targets", ".", "size", "(", "0", ")", "\n", "correct", "+=", "predicted", ".", "eq", "(", "targets", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "", "print", "(", "f'[TEST] Acc: {100.*correct/total:.3f}'", ")", "\n", "\n", "# Save checkpoint after each epoch", "\n", "", "torch", ".", "save", "(", "net", ".", "state_dict", "(", ")", ",", "opt", ".", "model_out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xuanqing94_BayesianDefense.None.main_plain.train": [[98, 117], ["print", "net.train", "enumerate", "print", "optimizer.zero_grad", "net", "criterion", "criterion.backward", "optimizer.step", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "targets.numel", "inputs.cuda", "targets.cuda", "torch.max", "torch.max", "torch.max", "torch.max", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "pred.eq"], "function", ["home.repos.pwc.inspect_result.xuanqing94_BayesianDefense.None.main_adv_vi.train", "home.repos.pwc.inspect_result.xuanqing94_BayesianDefense.layers.weight_noise.IdFn.backward", "home.repos.pwc.inspect_result.xuanqing94_BayesianDefense.attacker.linf_sgd.Linf_SGD.step"], ["def", "train", "(", "epoch", ")", ":", "\n", "    ", "print", "(", "'Epoch: %d'", "%", "epoch", ")", "\n", "net", ".", "train", "(", ")", "\n", "train_loss", "=", "0", "\n", "correct", "=", "0", "\n", "total", "=", "0", "\n", "for", "batch_idx", ",", "(", "inputs", ",", "targets", ")", "in", "enumerate", "(", "trainloader", ")", ":", "\n", "        ", "inputs", ",", "targets", "=", "inputs", ".", "cuda", "(", ")", ",", "targets", ".", "cuda", "(", ")", "\n", "# No adv. training", "\n", "#x_adv = Linf_PGD(inputs, targets, net, 10, 0.03125)", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "outputs", ",", "_", "=", "net", "(", "inputs", ")", "\n", "loss", "=", "criterion", "(", "outputs", ",", "targets", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "pred", "=", "torch", ".", "max", "(", "outputs", ",", "dim", "=", "1", ")", "[", "1", "]", "\n", "correct", "+=", "torch", ".", "sum", "(", "pred", ".", "eq", "(", "targets", ")", ")", ".", "item", "(", ")", "\n", "total", "+=", "targets", ".", "numel", "(", ")", "\n", "", "print", "(", "f'[TRAIN] Acc: {100.*correct/total:.3f}'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xuanqing94_BayesianDefense.None.main_plain.test": [[118, 136], ["net.eval", "torch.save", "torch.save", "torch.save", "torch.save", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "print", "net.state_dict", "net", "criterion", "criterion.item", "outputs.max", "targets.size", "predicted.eq().sum().item", "inputs.cuda", "targets.cuda", "predicted.eq().sum", "predicted.eq"], "function", ["None"], ["", "def", "test", "(", "epoch", ")", ":", "\n", "    ", "net", ".", "eval", "(", ")", "\n", "test_loss", "=", "0", "\n", "correct", "=", "0", "\n", "total", "=", "0", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "batch_idx", ",", "(", "inputs", ",", "targets", ")", "in", "enumerate", "(", "testloader", ")", ":", "\n", "            ", "inputs", ",", "targets", "=", "inputs", ".", "cuda", "(", ")", ",", "targets", ".", "cuda", "(", ")", "\n", "outputs", ",", "_", "=", "net", "(", "inputs", ")", "\n", "loss", "=", "criterion", "(", "outputs", ",", "targets", ")", "\n", "test_loss", "+=", "loss", ".", "item", "(", ")", "\n", "_", ",", "predicted", "=", "outputs", ".", "max", "(", "1", ")", "\n", "total", "+=", "targets", ".", "size", "(", "0", ")", "\n", "correct", "+=", "predicted", ".", "eq", "(", "targets", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "", "print", "(", "f'[TEST] Acc: {100.*correct/total:.3f}'", ")", "\n", "\n", "# Save checkpoint after each epoch", "\n", "", "torch", ".", "save", "(", "net", ".", "state_dict", "(", ")", ",", "opt", ".", "model_out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xuanqing94_BayesianDefense.None.main_vi.get_beta": [[96, 98], ["None"], "function", ["None"], ["def", "get_beta", "(", "epoch_idx", ",", "N", ")", ":", "\n", "    ", "return", "1.0", "/", "N", "/", "100", "\n", "\n"]], "home.repos.pwc.inspect_result.xuanqing94_BayesianDefense.None.main_vi.train": [[100, 117], ["print", "net.train", "enumerate", "print", "optimizer.zero_grad", "net", "utils.loss.elbo", "utils.loss.elbo.backward", "optimizer.step", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "targets.numel", "inputs.cuda", "targets.cuda", "main_vi.get_beta", "torch.max", "torch.max", "torch.max", "torch.max", "len", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "pred.eq"], "function", ["home.repos.pwc.inspect_result.xuanqing94_BayesianDefense.None.main_adv_vi.train", "home.repos.pwc.inspect_result.xuanqing94_BayesianDefense.utils.loss.elbo", "home.repos.pwc.inspect_result.xuanqing94_BayesianDefense.layers.weight_noise.IdFn.backward", "home.repos.pwc.inspect_result.xuanqing94_BayesianDefense.attacker.linf_sgd.Linf_SGD.step", "home.repos.pwc.inspect_result.xuanqing94_BayesianDefense.utils.loss.get_beta"], ["", "def", "train", "(", "epoch", ")", ":", "\n", "    ", "print", "(", "'Epoch: %d'", "%", "epoch", ")", "\n", "net", ".", "train", "(", ")", "\n", "train_loss", "=", "0", "\n", "correct", "=", "0", "\n", "total", "=", "0", "\n", "for", "batch_idx", ",", "(", "inputs", ",", "targets", ")", "in", "enumerate", "(", "trainloader", ")", ":", "\n", "        ", "inputs", ",", "targets", "=", "inputs", ".", "cuda", "(", ")", ",", "targets", ".", "cuda", "(", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "outputs", ",", "kl", "=", "net", "(", "inputs", ")", "\n", "loss", "=", "elbo", "(", "outputs", ",", "targets", ",", "kl", ",", "get_beta", "(", "epoch", ",", "len", "(", "trainset", ")", ")", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "pred", "=", "torch", ".", "max", "(", "outputs", ",", "dim", "=", "1", ")", "[", "1", "]", "\n", "correct", "+=", "torch", ".", "sum", "(", "pred", ".", "eq", "(", "targets", ")", ")", ".", "item", "(", ")", "\n", "total", "+=", "targets", ".", "numel", "(", ")", "\n", "", "print", "(", "f'[TRAIN] Acc: {100.*correct/total:.3f}'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xuanqing94_BayesianDefense.None.main_vi.test": [[119, 134], ["net.eval", "torch.save", "torch.save", "torch.save", "torch.save", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "print", "net.state_dict", "net", "outputs.max", "targets.size", "predicted.eq().sum().item", "inputs.cuda", "targets.cuda", "predicted.eq().sum", "predicted.eq"], "function", ["None"], ["", "def", "test", "(", "epoch", ")", ":", "\n", "    ", "net", ".", "eval", "(", ")", "\n", "test_loss", "=", "0", "\n", "correct", "=", "0", "\n", "total", "=", "0", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "batch_idx", ",", "(", "inputs", ",", "targets", ")", "in", "enumerate", "(", "testloader", ")", ":", "\n", "            ", "inputs", ",", "targets", "=", "inputs", ".", "cuda", "(", ")", ",", "targets", ".", "cuda", "(", ")", "\n", "outputs", ",", "_", "=", "net", "(", "inputs", ")", "\n", "_", ",", "predicted", "=", "outputs", ".", "max", "(", "1", ")", "\n", "total", "+=", "targets", ".", "size", "(", "0", ")", "\n", "correct", "+=", "predicted", ".", "eq", "(", "targets", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "", "print", "(", "f'[TEST] Acc: {100.*correct/total:.3f}'", ")", "\n", "# Save checkpoint.", "\n", "", "torch", ".", "save", "(", "net", ".", "state_dict", "(", ")", ",", "opt", ".", "model_out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xuanqing94_BayesianDefense.None.transfer_attack.get_model": [[63, 102], ["nn.DataParallel.load_state_dict", "nn.DataParallel.cuda", "nn.DataParallel.eval", "torch.load", "torch.load", "torch.load", "torch.load", "torch.DataParallel", "nn.DataParallel.load_state_dict", "models.vgg.VGG", "torch.load", "torch.load", "torch.load", "torch.load", "torch.DataParallel", "torch.DataParallel", "ValueError", "range", "models.vgg.VGG", "torch.DataParallel", "Tiny", "torch.DataParallel", "torch.DataParallel", "range", "models.vgg.VGG", "range", "Tiny", "torch.DataParallel", "Aaron", "torch.DataParallel", "range", "range", "Tiny", "range", "Aaron", "torch.DataParallel", "range", "range", "Aaron", "range"], "function", ["None"], ["", "def", "get_model", "(", "defense", ")", ":", "\n", "# load model", "\n", "    ", "if", "model", "==", "'vgg'", ":", "\n", "        ", "if", "defense", "in", "(", "'plain'", ",", "'adv'", ")", ":", "\n", "            ", "from", "models", ".", "vgg", "import", "VGG", "\n", "net", "=", "nn", ".", "DataParallel", "(", "VGG", "(", "'VGG16'", ",", "nclass", ",", "img_width", "=", "img_width", ")", ",", "device_ids", "=", "range", "(", "1", ")", ")", "\n", "net", ".", "load_state_dict", "(", "torch", ".", "load", "(", "f'./checkpoint/{data}_{model}_{defense}.pth'", ")", ")", "\n", "", "elif", "defense", "in", "(", "'vi'", ",", "'adv_vi'", ")", ":", "\n", "            ", "from", "models", ".", "vgg_vi", "import", "VGG", "\n", "net", "=", "nn", ".", "DataParallel", "(", "VGG", "(", "1.0", ",", "1.0", ",", "1.0", ",", "'VGG16'", ",", "nclass", ",", "img_width", "=", "img_width", ")", ",", "device_ids", "=", "range", "(", "1", ")", ")", "\n", "", "elif", "defense", "in", "(", "'rse'", ")", ":", "\n", "            ", "from", "models", ".", "vgg_rse", "import", "VGG", "\n", "net", "=", "nn", ".", "DataParallel", "(", "VGG", "(", "'VGG16'", ",", "nclass", ",", "0.2", ",", "0.1", ",", "img_width", "=", "img_width", ")", ",", "device_ids", "=", "range", "(", "1", ")", ")", "\n", "", "", "elif", "model", "==", "'tiny'", ":", "\n", "        ", "if", "defense", "in", "(", "'plain'", ",", "'adv'", ")", ":", "\n", "            ", "from", "models", ".", "tiny", "import", "Tiny", "\n", "net", "=", "nn", ".", "DataParallel", "(", "Tiny", "(", "nclass", ")", ",", "device_ids", "=", "range", "(", "1", ")", ")", "\n", "", "elif", "defense", "in", "(", "'vi'", ",", "'adv_vi'", ")", ":", "\n", "            ", "from", "models", ".", "tiny_vi", "import", "Tiny", "\n", "net", "=", "nn", ".", "DataParallel", "(", "Tiny", "(", "1.0", ",", "1.0", ",", "1.0", ",", "nclass", ")", ",", "device_ids", "=", "range", "(", "1", ")", ")", "\n", "", "elif", "defense", "in", "(", "'rse'", ")", ":", "\n", "            ", "from", "models", ".", "tiny_rse", "import", "Tiny", "\n", "net", "=", "nn", ".", "DataParallel", "(", "Tiny", "(", "nclass", ",", "0.2", ",", "0.1", ")", ",", "device_ids", "=", "range", "(", "1", ")", ")", "\n", "", "", "elif", "model", "==", "'aaron'", ":", "\n", "        ", "if", "defense", "in", "(", "'plain'", ",", "'adv'", ")", ":", "\n", "            ", "from", "models", ".", "aaron", "import", "Aaron", "\n", "net", "=", "nn", ".", "DataParallel", "(", "Aaron", "(", "nclass", ")", ",", "device_ids", "=", "range", "(", "1", ")", ")", "\n", "", "elif", "defense", "in", "(", "'vi'", ",", "'adv_vi'", ")", ":", "\n", "            ", "from", "models", ".", "aaron_vi", "import", "Aaron", "\n", "net", "=", "nn", ".", "DataParallel", "(", "Aaron", "(", "1.0", ",", "1.0", ",", "1.0", ",", "nclass", ")", ",", "device_ids", "=", "range", "(", "1", ")", ")", "\n", "", "elif", "defense", "in", "(", "'rse'", ")", ":", "\n", "            ", "from", "models", ".", "aaron_rse", "import", "Aaron", "\n", "net", "=", "nn", ".", "DataParallel", "(", "Aaron", "(", "nclass", ",", "0.2", ",", "0.1", ")", ",", "device_ids", "=", "range", "(", "1", ")", ")", "\n", "", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'invalid model'", ")", "\n", "", "net", ".", "load_state_dict", "(", "torch", ".", "load", "(", "f'./checkpoint/{data}_{model}_{defense}.pth'", ")", ")", "\n", "net", ".", "cuda", "(", ")", "\n", "net", ".", "eval", "(", ")", "# must set to evaluation mode", "\n", "return", "net", "\n", "\n"]], "home.repos.pwc.inspect_result.xuanqing94_BayesianDefense.None.transfer_attack.ensemble_inference": [[107, 115], ["x_in.size", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "range", "torch.max", "torch.max", "torch.max", "torch.max", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "softmax", "torch.FloatTensor().zero_().cuda.add_", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "net"], "function", ["None"], ["def", "ensemble_inference", "(", "x_in", ",", "net", ",", "n_ensemble", ")", ":", "\n", "    ", "batch", "=", "x_in", ".", "size", "(", "0", ")", "\n", "prob", "=", "torch", ".", "FloatTensor", "(", "batch", ",", "nclass", ")", ".", "zero_", "(", ")", ".", "cuda", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "_", "in", "range", "(", "n_ensemble", ")", ":", "\n", "            ", "p", "=", "softmax", "(", "net", "(", "x_in", ")", "[", "0", "]", ")", "\n", "prob", ".", "add_", "(", "p", ")", "\n", "", "", "return", "torch", ".", "max", "(", "prob", ",", "dim", "=", "1", ")", "[", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.xuanqing94_BayesianDefense.None.test.MyLinear.__init__": [[7, 22], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "test.MyLinear.register_buffer", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "test.MyLinear.register_buffer", "test.MyLinear.reset_parameters", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.xuanqing94_BayesianDefense.layers.linear.RandLinear.__init__", "home.repos.pwc.inspect_result.xuanqing94_BayesianDefense.layers.linear.RandLinear.reset_parameters"], ["    ", "def", "__init__", "(", "self", ",", "in_features", ",", "out_features", ")", ":", "\n", "        ", "super", "(", "MyLinear", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_features", "=", "in_features", "\n", "self", ".", "out_features", "=", "out_features", "\n", "self", ".", "weight", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "out_features", ",", "in_features", ")", ")", "\n", "self", ".", "noise1", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "out_features", ",", "in_features", ")", ")", "\n", "\n", "self", ".", "register_buffer", "(", "'eps_weight'", ",", "torch", ".", "Tensor", "(", "out_features", ",", "in_features", ")", ")", "\n", "\n", "\n", "self", ".", "bias", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "out_features", ")", ")", "\n", "self", ".", "noise2", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "out_features", ")", ")", "\n", "self", ".", "register_buffer", "(", "'eps_bias'", ",", "torch", ".", "Tensor", "(", "out_features", ")", ")", "\n", "\n", "self", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xuanqing94_BayesianDefense.None.test.MyLinear.reset_parameters": [[23, 29], ["test.MyLinear.weight.data.uniform_", "test.MyLinear.bias.data.uniform_", "test.MyLinear.noise1.data.zero_", "test.MyLinear.noise2.data.zero_", "math.sqrt", "test.MyLinear.weight.size"], "methods", ["None"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "stdv", "=", "1.", "/", "math", ".", "sqrt", "(", "self", ".", "weight", ".", "size", "(", "1", ")", ")", "\n", "self", ".", "weight", ".", "data", ".", "uniform_", "(", "-", "stdv", ",", "stdv", ")", "\n", "self", ".", "bias", ".", "data", ".", "uniform_", "(", "-", "stdv", ",", "stdv", ")", "\n", "self", ".", "noise1", ".", "data", ".", "zero_", "(", ")", "\n", "self", ".", "noise2", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xuanqing94_BayesianDefense.None.test.MyLinear.forward": [[30, 35], ["torch.linear", "torch.linear", "torch.linear", "test.MyLinear.eps_weight.normal_", "test.MyLinear.eps_bias.normal_"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "weight", "=", "self", ".", "weight", "+", "self", ".", "noise1", "*", "self", ".", "eps_weight", ".", "normal_", "(", ")", "\n", "bias", "=", "self", ".", "bias", "+", "self", ".", "noise2", "*", "self", ".", "eps_bias", ".", "normal_", "(", ")", "\n", "out", "=", "F", ".", "linear", "(", "input", ",", "weight", ",", "bias", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.xuanqing94_BayesianDefense.None.main_adv.train": [[97, 115], ["print", "net.train", "enumerate", "print", "attacker.pgd.Linf_PGD", "optimizer.zero_grad", "net", "criterion", "criterion.backward", "optimizer.step", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "targets.numel", "inputs.cuda", "targets.cuda", "torch.max", "torch.max", "torch.max", "torch.max", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "pred.eq"], "function", ["home.repos.pwc.inspect_result.xuanqing94_BayesianDefense.None.main_adv_vi.train", "home.repos.pwc.inspect_result.xuanqing94_BayesianDefense.attacker.pgd.Linf_PGD", "home.repos.pwc.inspect_result.xuanqing94_BayesianDefense.layers.weight_noise.IdFn.backward", "home.repos.pwc.inspect_result.xuanqing94_BayesianDefense.attacker.linf_sgd.Linf_SGD.step"], ["def", "train", "(", "epoch", ")", ":", "\n", "    ", "print", "(", "'Epoch: %d'", "%", "epoch", ")", "\n", "net", ".", "train", "(", ")", "\n", "train_loss", "=", "0", "\n", "correct", "=", "0", "\n", "total", "=", "0", "\n", "for", "batch_idx", ",", "(", "inputs", ",", "targets", ")", "in", "enumerate", "(", "trainloader", ")", ":", "\n", "        ", "inputs", ",", "targets", "=", "inputs", ".", "cuda", "(", ")", ",", "targets", ".", "cuda", "(", ")", "\n", "adv_x", "=", "Linf_PGD", "(", "inputs", ",", "targets", ",", "net", ",", "opt", ".", "steps", ",", "opt", ".", "max_norm", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "outputs", ",", "_", "=", "net", "(", "adv_x", ")", "\n", "loss", "=", "criterion", "(", "outputs", ",", "targets", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "pred", "=", "torch", ".", "max", "(", "outputs", ",", "dim", "=", "1", ")", "[", "1", "]", "\n", "correct", "+=", "torch", ".", "sum", "(", "pred", ".", "eq", "(", "targets", ")", ")", ".", "item", "(", ")", "\n", "total", "+=", "targets", ".", "numel", "(", ")", "\n", "", "print", "(", "f'[TRAIN] Acc: {100.*correct/total:.3f}'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xuanqing94_BayesianDefense.None.main_adv.test": [[117, 132], ["net.eval", "torch.save", "torch.save", "torch.save", "torch.save", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "print", "net.state_dict", "net", "outputs.max", "targets.size", "predicted.eq().sum().item", "inputs.cuda", "targets.cuda", "predicted.eq().sum", "predicted.eq"], "function", ["None"], ["", "def", "test", "(", "epoch", ")", ":", "\n", "    ", "net", ".", "eval", "(", ")", "\n", "test_loss", "=", "0", "\n", "correct", "=", "0", "\n", "total", "=", "0", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "batch_idx", ",", "(", "inputs", ",", "targets", ")", "in", "enumerate", "(", "testloader", ")", ":", "\n", "            ", "inputs", ",", "targets", "=", "inputs", ".", "cuda", "(", ")", ",", "targets", ".", "cuda", "(", ")", "\n", "outputs", ",", "_", "=", "net", "(", "inputs", ")", "\n", "_", ",", "predicted", "=", "outputs", ".", "max", "(", "1", ")", "\n", "total", "+=", "targets", ".", "size", "(", "0", ")", "\n", "correct", "+=", "predicted", ".", "eq", "(", "targets", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "", "print", "(", "f'[TEST] Acc: {100.*correct/total:.3f}'", ")", "\n", "# Save checkpoint.", "\n", "", "torch", ".", "save", "(", "net", ".", "state_dict", "(", ")", ",", "opt", ".", "model_out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xuanqing94_BayesianDefense.None.acc_under_attack.ensemble_inference": [[130, 145], ["x_in.size", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.FloatTensor().zero_().cuda", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "range", "answer.append", "softmax", "torch.FloatTensor().zero_().cuda.add_", "torch.FloatTensor().zero_().cuda.clone", "torch.max", "torch.max", "torch.max", "torch.max", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "net"], "function", ["None"], ["def", "ensemble_inference", "(", "x_in", ")", ":", "\n", "    ", "batch", "=", "x_in", ".", "size", "(", "0", ")", "\n", "prev", "=", "0", "\n", "prob", "=", "torch", ".", "FloatTensor", "(", "batch", ",", "nclass", ")", ".", "zero_", "(", ")", ".", "cuda", "(", ")", "\n", "answer", "=", "[", "]", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "n", "in", "opt", ".", "n_ensemble", ":", "\n", "            ", "for", "_", "in", "range", "(", "n", "-", "prev", ")", ":", "\n", "                ", "p", "=", "softmax", "(", "net", "(", "x_in", ")", "[", "0", "]", ")", "\n", "prob", ".", "add_", "(", "p", ")", "\n", "", "answer", ".", "append", "(", "prob", ".", "clone", "(", ")", ")", "\n", "prev", "=", "n", "\n", "", "for", "i", ",", "a", "in", "enumerate", "(", "answer", ")", ":", "\n", "            ", "answer", "[", "i", "]", "=", "torch", ".", "max", "(", "a", ",", "dim", "=", "1", ")", "[", "1", "]", "\n", "", "", "return", "answer", "\n", "\n"]], "home.repos.pwc.inspect_result.xuanqing94_BayesianDefense.None.acc_under_attack.distance": [[146, 154], ["x.size", "torch.sqrt().item", "torch.sqrt().item", "torch.sqrt().item", "torch.sqrt().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "x.size", "torch.max", "torch.max", "torch.max", "torch.max", "torch.abs", "torch.abs", "torch.abs", "torch.abs"], "function", ["None"], ["", "def", "distance", "(", "x_adv", ",", "x", ")", ":", "\n", "    ", "diff", "=", "(", "x_adv", "-", "x", ")", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "if", "opt", ".", "attack", "in", "(", "'CW'", ",", "'L2'", ")", ":", "\n", "        ", "out", "=", "torch", ".", "sqrt", "(", "torch", ".", "sum", "(", "diff", "*", "diff", ")", "/", "x", ".", "size", "(", "0", ")", ")", ".", "item", "(", ")", "\n", "return", "out", "\n", "", "elif", "opt", ".", "attack", "in", "(", "'Linf'", ")", ":", "\n", "        ", "out", "=", "torch", ".", "mean", "(", "torch", ".", "max", "(", "torch", ".", "abs", "(", "diff", ")", ",", "1", ")", "[", "0", "]", ")", ".", "item", "(", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.xuanqing94_BayesianDefense.None.main_adv_vi.get_beta": [[98, 100], ["None"], "function", ["None"], ["def", "get_beta", "(", "epoch_idx", ",", "N", ")", ":", "\n", "    ", "return", "opt", ".", "alpha", "/", "N", "\n", "\n"]], "home.repos.pwc.inspect_result.xuanqing94_BayesianDefense.None.main_adv_vi.train": [[102, 120], ["print", "net.train", "enumerate", "print", "attacker.pgd.Linf_PGD", "optimizer.zero_grad", "net", "utils.loss.elbo", "utils.loss.elbo.backward", "optimizer.step", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "targets.numel", "inputs.cuda", "targets.cuda", "main_adv_vi.get_beta", "torch.max", "torch.max", "torch.max", "torch.max", "len", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "pred.eq"], "function", ["home.repos.pwc.inspect_result.xuanqing94_BayesianDefense.None.main_adv_vi.train", "home.repos.pwc.inspect_result.xuanqing94_BayesianDefense.attacker.pgd.Linf_PGD", "home.repos.pwc.inspect_result.xuanqing94_BayesianDefense.utils.loss.elbo", "home.repos.pwc.inspect_result.xuanqing94_BayesianDefense.layers.weight_noise.IdFn.backward", "home.repos.pwc.inspect_result.xuanqing94_BayesianDefense.attacker.linf_sgd.Linf_SGD.step", "home.repos.pwc.inspect_result.xuanqing94_BayesianDefense.utils.loss.get_beta"], ["", "def", "train", "(", "epoch", ")", ":", "\n", "    ", "print", "(", "'Epoch: %d'", "%", "epoch", ")", "\n", "net", ".", "train", "(", ")", "\n", "train_loss", "=", "0", "\n", "correct", "=", "0", "\n", "total", "=", "0", "\n", "for", "batch_idx", ",", "(", "inputs", ",", "targets", ")", "in", "enumerate", "(", "trainloader", ")", ":", "\n", "        ", "inputs", ",", "targets", "=", "inputs", ".", "cuda", "(", ")", ",", "targets", ".", "cuda", "(", ")", "\n", "adv_x", "=", "Linf_PGD", "(", "inputs", ",", "targets", ",", "net", ",", "opt", ".", "steps", ",", "opt", ".", "max_norm", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "outputs", ",", "kl", "=", "net", "(", "adv_x", ")", "\n", "loss", "=", "elbo", "(", "outputs", ",", "targets", ",", "kl", ",", "get_beta", "(", "epoch", ",", "len", "(", "trainset", ")", ")", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "pred", "=", "torch", ".", "max", "(", "outputs", ",", "dim", "=", "1", ")", "[", "1", "]", "\n", "correct", "+=", "torch", ".", "sum", "(", "pred", ".", "eq", "(", "targets", ")", ")", ".", "item", "(", ")", "\n", "total", "+=", "targets", ".", "numel", "(", ")", "\n", "", "print", "(", "f'[TRAIN] Acc: {100.*correct/total:.3f}'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xuanqing94_BayesianDefense.None.main_adv_vi.test": [[122, 137], ["net.eval", "torch.save", "torch.save", "torch.save", "torch.save", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "print", "net.state_dict", "net", "outputs.max", "targets.size", "predicted.eq().sum().item", "inputs.cuda", "targets.cuda", "predicted.eq().sum", "predicted.eq"], "function", ["None"], ["", "def", "test", "(", "epoch", ")", ":", "\n", "    ", "net", ".", "eval", "(", ")", "\n", "test_loss", "=", "0", "\n", "correct", "=", "0", "\n", "total", "=", "0", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "batch_idx", ",", "(", "inputs", ",", "targets", ")", "in", "enumerate", "(", "testloader", ")", ":", "\n", "            ", "inputs", ",", "targets", "=", "inputs", ".", "cuda", "(", ")", ",", "targets", ".", "cuda", "(", ")", "\n", "outputs", ",", "_", "=", "net", "(", "inputs", ")", "\n", "_", ",", "predicted", "=", "outputs", ".", "max", "(", "1", ")", "\n", "total", "+=", "targets", ".", "size", "(", "0", ")", "\n", "correct", "+=", "predicted", ".", "eq", "(", "targets", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "", "print", "(", "f'[TEST] Acc: {100.*correct/total:.3f}'", ")", "\n", "# Save checkpoint.", "\n", "", "torch", ".", "save", "(", "net", ".", "state_dict", "(", ")", ",", "opt", ".", "model_out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xuanqing94_BayesianDefense.utils.loss.get_beta": [[3, 13], ["min"], "function", ["None"], ["def", "get_beta", "(", "batch_idx", ",", "m", ",", "beta_type", ")", ":", "\n", "    ", "if", "beta_type", "==", "\"Blundell\"", ":", "\n", "        ", "beta", "=", "2", "**", "(", "m", "-", "(", "batch_idx", "+", "1", ")", ")", "/", "(", "2", "**", "m", "-", "1", ")", "\n", "", "elif", "beta_type", "==", "\"Soenderby\"", ":", "\n", "        ", "beta", "=", "min", "(", "epoch", "/", "(", "num_epochs", "//", "4", ")", ",", "1", ")", "\n", "", "elif", "beta_type", "==", "\"Standard\"", ":", "\n", "        ", "beta", "=", "1", "/", "m", "\n", "", "else", ":", "\n", "        ", "beta", "=", "0", "\n", "", "return", "beta", "\n", "\n"]], "home.repos.pwc.inspect_result.xuanqing94_BayesianDefense.utils.loss.elbo": [[14, 17], ["torch.cross_entropy"], "function", ["None"], ["", "def", "elbo", "(", "out", ",", "y", ",", "kl_sum", ",", "beta", ")", ":", "\n", "    ", "ce_loss", "=", "F", ".", "cross_entropy", "(", "out", ",", "y", ")", "\n", "return", "ce_loss", "+", "beta", "*", "kl_sum", "\n", "", ""]], "home.repos.pwc.inspect_result.xuanqing94_BayesianDefense.datasets.mk_subimgnet_val.read_f": [[6, 13], ["open", "l.split", "int"], "function", ["None"], ["def", "read_f", "(", ")", ":", "\n", "    ", "id_classes", "=", "{", "}", "\n", "for", "l", "in", "open", "(", "'./dirname_to_label.txt'", ",", "'r'", ")", ":", "\n", "        ", "name", ",", "id", "=", "l", ".", "split", "(", "' '", ")", "\n", "id", "=", "int", "(", "id", ")", "\n", "id_classes", "[", "id", "]", "=", "name", "\n", "", "return", "id_classes", "\n", "\n"]], "home.repos.pwc.inspect_result.xuanqing94_BayesianDefense.datasets.mk_subimgnet.read_f": [[4, 12], ["open", "l.split", "int", "classes.append"], "function", ["None"], ["def", "read_f", "(", ")", ":", "\n", "    ", "classes", "=", "[", "]", "\n", "for", "l", "in", "open", "(", "'./dirname_to_label.txt'", ",", "'r'", ")", ":", "\n", "        ", "name", ",", "id", "=", "l", ".", "split", "(", "' '", ")", "\n", "id", "=", "int", "(", "id", ")", "\n", "if", "id", ">=", "151", "and", "id", "<", "294", ":", "\n", "            ", "classes", ".", "append", "(", "name", ")", "\n", "", "", "return", "classes", "\n", "\n"]], "home.repos.pwc.inspect_result.xuanqing94_BayesianDefense.attacker.cw.cw": [[5, 30], ["y_true.cpu().view", "torch.FloatTensor().zero_().scatter_().cuda", "x_in.clone().zero_().requires_grad_", "torch.optim.Adam", "torch.FloatTensor().cuda", "print", "range", "net.eval", "net.zero_grad", "torch.optim.Adam.zero_grad", "net", "torch.sum", "print", "torch.sum.backward", "torch.optim.Adam.step", "y_true.cpu", "torch.FloatTensor().zero_().scatter_", "x_in.clone().zero_", "torch.FloatTensor", "torch.max", "torch.max", "torch.sum", "torch.mul", "torch.max", "torch.FloatTensor().zero_", "x_in.clone", "torch.mul", "torch.sum.item", "torch.FloatTensor", "x_in.size"], "function", ["home.repos.pwc.inspect_result.xuanqing94_BayesianDefense.layers.weight_noise.IdFn.backward", "home.repos.pwc.inspect_result.xuanqing94_BayesianDefense.attacker.linf_sgd.Linf_SGD.step"], ["def", "cw", "(", "x_in", ",", "y_true", ",", "net", ",", "steps", ",", "eps", ")", ":", "\n", "    ", "if", "eps", "==", "0", ":", "\n", "        ", "return", "x_in", "\n", "", "training", "=", "net", ".", "training", "\n", "if", "training", ":", "\n", "        ", "net", ".", "eval", "(", ")", "\n", "", "index", "=", "y_true", ".", "cpu", "(", ")", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "label_onehot", "=", "torch", ".", "FloatTensor", "(", "x_in", ".", "size", "(", "0", ")", ",", "n_class", ")", ".", "zero_", "(", ")", ".", "scatter_", "(", "1", ",", "index", ",", "1", ")", ".", "cuda", "(", ")", "\n", "x_adv", "=", "x_in", ".", "clone", "(", ")", ".", "zero_", "(", ")", ".", "requires_grad_", "(", ")", "\n", "optimizer", "=", "Adam", "(", "[", "x_adv", "]", ",", "lr", "=", "1.0e-2", ")", "\n", "zero", "=", "torch", ".", "FloatTensor", "(", "[", "0", "]", ")", ".", "cuda", "(", ")", "\n", "print", "(", "'==============='", ")", "\n", "for", "_", "in", "range", "(", "steps", ")", ":", "\n", "        ", "net", ".", "zero_grad", "(", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "diff", "=", "x_adv", "-", "x_in", "\n", "output", ",", "_", "=", "net", "(", "x_adv", ")", "\n", "real", "=", "torch", ".", "max", "(", "torch", ".", "mul", "(", "output", ",", "label_onehot", ")", ",", "1", ")", "[", "0", "]", "\n", "other", "=", "torch", ".", "max", "(", "torch", ".", "mul", "(", "output", ",", "(", "1", "-", "label_onehot", ")", ")", "-", "label_onehot", "*", "10000", ",", "1", ")", "[", "0", "]", "\n", "error", "=", "torch", ".", "sum", "(", "diff", "*", "diff", ")", "\n", "error", "+=", "eps", "*", "torch", ".", "sum", "(", "torch", ".", "max", "(", "real", "-", "other", ",", "zero", ")", ")", "\n", "print", "(", "f\"error: {error.item()}\"", ")", "\n", "error", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "", "return", "x_adv", "\n", "", ""]], "home.repos.pwc.inspect_result.xuanqing94_BayesianDefense.attacker.pgd.Linf_PGD": [[9, 32], ["x_in.clone().requires_grad_", "linf_sgd.Linf_SGD", "range", "net.zero_grad", "net.eval", "linf_sgd.Linf_SGD.zero_grad", "net.zero_grad", "net", "loss.backward", "linf_sgd.Linf_SGD.step", "diff.clamp_", "x_in.clone().requires_grad_.detach().copy_", "net.train", "x_in.clone", "torch.cross_entropy", "x_in.clone().requires_grad_.detach"], "function", ["home.repos.pwc.inspect_result.xuanqing94_BayesianDefense.layers.weight_noise.IdFn.backward", "home.repos.pwc.inspect_result.xuanqing94_BayesianDefense.attacker.linf_sgd.Linf_SGD.step", "home.repos.pwc.inspect_result.xuanqing94_BayesianDefense.None.main_adv_vi.train"], ["def", "Linf_PGD", "(", "x_in", ",", "y_true", ",", "net", ",", "steps", ",", "eps", ")", ":", "\n", "    ", "if", "eps", "==", "0", ":", "\n", "        ", "return", "x_in", "\n", "", "training", "=", "net", ".", "training", "\n", "if", "training", ":", "\n", "        ", "net", ".", "eval", "(", ")", "\n", "", "x_adv", "=", "x_in", ".", "clone", "(", ")", ".", "requires_grad_", "(", ")", "\n", "optimizer", "=", "Linf_SGD", "(", "[", "x_adv", "]", ",", "lr", "=", "0.007", ")", "\n", "for", "_", "in", "range", "(", "steps", ")", ":", "\n", "        ", "optimizer", ".", "zero_grad", "(", ")", "\n", "net", ".", "zero_grad", "(", ")", "\n", "out", ",", "_", "=", "net", "(", "x_adv", ")", "\n", "loss", "=", "-", "F", ".", "cross_entropy", "(", "out", ",", "y_true", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "diff", "=", "x_adv", "-", "x_in", "\n", "diff", ".", "clamp_", "(", "-", "eps", ",", "eps", ")", "\n", "x_adv", ".", "detach", "(", ")", ".", "copy_", "(", "(", "diff", "+", "x_in", ")", ".", "clamp_", "(", "0", ",", "1", ")", ")", "\n", "", "net", ".", "zero_grad", "(", ")", "\n", "# reset to the original state", "\n", "if", "training", ":", "\n", "        ", "net", ".", "train", "(", ")", "\n", "", "return", "x_adv", "\n", "\n"]], "home.repos.pwc.inspect_result.xuanqing94_BayesianDefense.attacker.pgd.L2_PGD": [[36, 65], ["x_in.clone().requires_grad_", "torch.optim.Adam", "torch.tensor().view().cuda", "torch.tensor().view().cuda", "range", "net.zero_grad", "net.eval", "torch.optim.Adam.zero_grad", "net.zero_grad", "net", "loss.backward", "torch.optim.Adam.step", "torch.sqrt", "torch.sqrt", "norm.view.view", "torch.min", "torch.min", "x_in.clone().requires_grad_.detach().copy_", "net.train", "x_in.clone", "torch.tensor().view", "torch.tensor().view", "torch.cross_entropy", "torch.sum", "torch.sum", "norm.view.size", "x_in.clone().requires_grad_.detach", "torch.tensor", "torch.tensor"], "function", ["home.repos.pwc.inspect_result.xuanqing94_BayesianDefense.layers.weight_noise.IdFn.backward", "home.repos.pwc.inspect_result.xuanqing94_BayesianDefense.attacker.linf_sgd.Linf_SGD.step", "home.repos.pwc.inspect_result.xuanqing94_BayesianDefense.None.main_adv_vi.train"], ["", "def", "L2_PGD", "(", "x_in", ",", "y_true", ",", "net", ",", "steps", ",", "eps", ")", ":", "\n", "    ", "if", "eps", "==", "0", ":", "\n", "        ", "return", "x_in", "\n", "", "training", "=", "net", ".", "training", "\n", "if", "training", ":", "\n", "        ", "net", ".", "eval", "(", ")", "\n", "", "x_adv", "=", "x_in", ".", "clone", "(", ")", ".", "requires_grad_", "(", ")", "\n", "optimizer", "=", "Adam", "(", "[", "x_adv", "]", ",", "lr", "=", "0.01", ")", "\n", "eps", "=", "torch", ".", "tensor", "(", "eps", ")", ".", "view", "(", "1", ",", "1", ",", "1", ",", "1", ")", ".", "cuda", "(", ")", "\n", "#print('====================')", "\n", "for", "_", "in", "range", "(", "steps", ")", ":", "\n", "        ", "optimizer", ".", "zero_grad", "(", ")", "\n", "net", ".", "zero_grad", "(", ")", "\n", "out", ",", "_", "=", "net", "(", "x_adv", ")", "\n", "loss", "=", "-", "F", ".", "cross_entropy", "(", "out", ",", "y_true", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "#print(loss.item())", "\n", "optimizer", ".", "step", "(", ")", "\n", "diff", "=", "x_adv", "-", "x_in", "\n", "norm", "=", "torch", ".", "sqrt", "(", "torch", ".", "sum", "(", "diff", "*", "diff", ",", "(", "1", ",", "2", ",", "3", ")", ")", ")", "\n", "norm", "=", "norm", ".", "view", "(", "norm", ".", "size", "(", "0", ")", ",", "1", ",", "1", ",", "1", ")", "\n", "norm_out", "=", "torch", ".", "min", "(", "norm", ",", "eps", ")", "\n", "diff", "=", "diff", "/", "norm", "*", "norm_out", "\n", "x_adv", ".", "detach", "(", ")", ".", "copy_", "(", "(", "diff", "+", "x_in", ")", ".", "clamp_", "(", "0", ",", "1", ")", ")", "\n", "", "net", ".", "zero_grad", "(", ")", "\n", "# reset to the original state", "\n", "if", "training", ":", "\n", "        ", "net", ".", "train", "(", ")", "\n", "", "return", "x_adv", "\n", "", ""]], "home.repos.pwc.inspect_result.xuanqing94_BayesianDefense.attacker.linf_sgd.Linf_SGD.__init__": [[51, 58], ["dict", "torch.optim.optimizer.Optimizer.__init__", "ValueError"], "methods", ["home.repos.pwc.inspect_result.xuanqing94_BayesianDefense.layers.linear.RandLinear.__init__"], ["def", "__init__", "(", "self", ",", "params", ",", "lr", "=", "required", ",", "momentum", "=", "0", ",", "dampening", "=", "0", ",", "\n", "weight_decay", "=", "0", ",", "nesterov", "=", "False", ")", ":", "\n", "        ", "defaults", "=", "dict", "(", "lr", "=", "lr", ",", "momentum", "=", "momentum", ",", "dampening", "=", "dampening", ",", "\n", "weight_decay", "=", "weight_decay", ",", "nesterov", "=", "nesterov", ")", "\n", "if", "nesterov", "and", "(", "momentum", "<=", "0", "or", "dampening", "!=", "0", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"Nesterov momentum requires a momentum and zero dampening\"", ")", "\n", "", "super", "(", "Linf_SGD", ",", "self", ")", ".", "__init__", "(", "params", ",", "defaults", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xuanqing94_BayesianDefense.attacker.linf_sgd.Linf_SGD.__setstate__": [[59, 63], ["super().__setstate__", "group.setdefault"], "methods", ["home.repos.pwc.inspect_result.xuanqing94_BayesianDefense.attacker.linf_sgd.Linf_SGD.__setstate__"], ["", "def", "__setstate__", "(", "self", ",", "state", ")", ":", "\n", "        ", "super", "(", "Linf_SGD", ",", "self", ")", ".", "__setstate__", "(", "state", ")", "\n", "for", "group", "in", "self", ".", "param_groups", ":", "\n", "            ", "group", ".", "setdefault", "(", "'nesterov'", ",", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xuanqing94_BayesianDefense.attacker.linf_sgd.Linf_SGD.step": [[64, 104], ["closure", "torch.sign", "p.data.add_", "d_p.add.add.add_", "torch.zeros_like", "torch.zeros_like.mul_().add_", "torch.zeros_like.mul_().add_", "d_p.add.add.add", "torch.zeros_like.mul_", "torch.zeros_like.mul_"], "methods", ["None"], ["", "", "def", "step", "(", "self", ",", "closure", "=", "None", ")", ":", "\n", "        ", "\"\"\"Performs a single optimization step.\n\n        Arguments:\n            closure (callable, optional): A closure that reevaluates the model\n                and returns the loss.\n        \"\"\"", "\n", "loss", "=", "None", "\n", "if", "closure", "is", "not", "None", ":", "\n", "            ", "loss", "=", "closure", "(", ")", "\n", "\n", "", "for", "group", "in", "self", ".", "param_groups", ":", "\n", "            ", "weight_decay", "=", "group", "[", "'weight_decay'", "]", "\n", "momentum", "=", "group", "[", "'momentum'", "]", "\n", "dampening", "=", "group", "[", "'dampening'", "]", "\n", "nesterov", "=", "group", "[", "'nesterov'", "]", "\n", "\n", "for", "p", "in", "group", "[", "'params'", "]", ":", "\n", "                ", "if", "p", ".", "grad", "is", "None", ":", "\n", "                    ", "continue", "\n", "", "d_p", "=", "torch", ".", "sign", "(", "p", ".", "grad", ".", "data", ")", "\n", "#d_p = p.grad.data", "\n", "if", "weight_decay", "!=", "0", ":", "\n", "                    ", "d_p", ".", "add_", "(", "weight_decay", ",", "p", ".", "data", ")", "\n", "", "if", "momentum", "!=", "0", ":", "\n", "                    ", "param_state", "=", "self", ".", "state", "[", "p", "]", "\n", "if", "'momentum_buffer'", "not", "in", "param_state", ":", "\n", "                        ", "buf", "=", "param_state", "[", "'momentum_buffer'", "]", "=", "torch", ".", "zeros_like", "(", "p", ".", "data", ")", "\n", "buf", ".", "mul_", "(", "momentum", ")", ".", "add_", "(", "d_p", ")", "\n", "", "else", ":", "\n", "                        ", "buf", "=", "param_state", "[", "'momentum_buffer'", "]", "\n", "buf", ".", "mul_", "(", "momentum", ")", ".", "add_", "(", "1", "-", "dampening", ",", "d_p", ")", "\n", "", "if", "nesterov", ":", "\n", "                        ", "d_p", "=", "d_p", ".", "add", "(", "momentum", ",", "buf", ")", "\n", "", "else", ":", "\n", "                        ", "d_p", "=", "buf", "\n", "\n", "", "", "p", ".", "data", ".", "add_", "(", "-", "group", "[", "'lr'", "]", ",", "d_p", ")", "\n", "\n", "", "", "return", "loss", "\n", "", "", ""]], "home.repos.pwc.inspect_result.xuanqing94_BayesianDefense.models.vgg_rse.VGG.__init__": [[16, 23], ["torch.Module.__init__", "vgg_rse.VGG._make_layers", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.xuanqing94_BayesianDefense.layers.linear.RandLinear.__init__", "home.repos.pwc.inspect_result.xuanqing94_BayesianDefense.models.vgg.VGG._make_layers"], ["    ", "def", "__init__", "(", "self", ",", "vgg_name", ",", "nclass", ",", "noise_init", ",", "noise_inner", ",", "img_width", "=", "32", ")", ":", "\n", "        ", "super", "(", "VGG", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "noise_init", "=", "noise_init", "\n", "self", ".", "noise_inner", "=", "noise_inner", "\n", "self", ".", "img_width", "=", "img_width", "\n", "self", ".", "features", "=", "self", ".", "_make_layers", "(", "cfg", "[", "vgg_name", "]", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "512", ",", "nclass", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xuanqing94_BayesianDefense.models.vgg_rse.VGG.forward": [[24, 29], ["vgg_rse.VGG.features", "vgg_rse.VGG.view", "vgg_rse.VGG.classifier", "vgg_rse.VGG.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "features", "(", "x", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "classifier", "(", "out", ")", "\n", "return", "out", ",", "None", "# return None, to make it compatible with VGG_noise", "\n", "\n"]], "home.repos.pwc.inspect_result.xuanqing94_BayesianDefense.models.vgg_rse.VGG._make_layers": [[30, 50], ["enumerate", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "layers.feat_noise.Noise", "layers.feat_noise.Noise", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["None"], ["", "def", "_make_layers", "(", "self", ",", "cfg", ")", ":", "\n", "        ", "layers", "=", "[", "]", "\n", "in_channels", "=", "3", "\n", "width", "=", "self", ".", "img_width", "\n", "for", "i", ",", "x", "in", "enumerate", "(", "cfg", ")", ":", "\n", "            ", "if", "x", "==", "'M'", ":", "\n", "                ", "layers", "+=", "[", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "]", "\n", "width", "=", "width", "//", "2", "\n", "", "else", ":", "\n", "                ", "if", "i", "==", "0", ":", "\n", "                    ", "noise_layer", "=", "Noise", "(", "self", ".", "noise_init", ")", "\n", "", "else", ":", "\n", "                    ", "noise_layer", "=", "Noise", "(", "self", ".", "noise_inner", ")", "\n", "", "layers", "+=", "[", "noise_layer", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", ",", "x", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "x", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "]", "\n", "in_channels", "=", "x", "\n", "", "", "layers", "+=", "[", "nn", ".", "AvgPool2d", "(", "kernel_size", "=", "width", ",", "stride", "=", "1", ")", "]", "\n", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xuanqing94_BayesianDefense.models.vgg_vi.VGG.__init__": [[17, 25], ["torch.Module.__init__", "layers.linear.RandLinear", "vgg_vi.VGG._make_layers"], "methods", ["home.repos.pwc.inspect_result.xuanqing94_BayesianDefense.layers.linear.RandLinear.__init__", "home.repos.pwc.inspect_result.xuanqing94_BayesianDefense.models.vgg.VGG._make_layers"], ["    ", "def", "__init__", "(", "self", ",", "sigma_0", ",", "N", ",", "init_s", ",", "vgg_name", ",", "nclass", ",", "img_width", "=", "32", ")", ":", "\n", "        ", "super", "(", "VGG", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "sigma_0", "=", "sigma_0", "\n", "self", ".", "N", "=", "N", "\n", "self", ".", "init_s", "=", "init_s", "\n", "self", ".", "img_width", "=", "img_width", "\n", "self", ".", "classifier", "=", "RandLinear", "(", "sigma_0", ",", "N", ",", "init_s", ",", "512", ",", "nclass", ")", "\n", "self", ".", "features", "=", "self", ".", "_make_layers", "(", "cfg", "[", "vgg_name", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xuanqing94_BayesianDefense.models.vgg_vi.VGG.forward": [[26, 40], ["l.forward.view", "vgg_vi.VGG.classifier.forward", "type().__name__.startswith", "l.forward.size", "l.forward", "l.forward", "type"], "methods", ["home.repos.pwc.inspect_result.xuanqing94_BayesianDefense.layers.linear.RandLinear.forward", "home.repos.pwc.inspect_result.xuanqing94_BayesianDefense.layers.linear.RandLinear.forward", "home.repos.pwc.inspect_result.xuanqing94_BayesianDefense.layers.linear.RandLinear.forward"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "kl_sum", "=", "0", "\n", "out", "=", "x", "\n", "for", "l", "in", "self", ".", "features", ":", "\n", "            ", "if", "type", "(", "l", ")", ".", "__name__", ".", "startswith", "(", "\"Rand\"", ")", ":", "\n", "                ", "out", ",", "kl", "=", "l", ".", "forward", "(", "out", ")", "\n", "if", "kl", "is", "not", "None", ":", "\n", "                    ", "kl_sum", "+=", "kl", "\n", "", "", "else", ":", "\n", "                ", "out", "=", "l", ".", "forward", "(", "out", ")", "\n", "", "", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", ",", "kl", "=", "self", ".", "classifier", ".", "forward", "(", "out", ")", "\n", "kl_sum", "+=", "kl", "\n", "return", "out", ",", "kl", "\n", "\n"]], "home.repos.pwc.inspect_result.xuanqing94_BayesianDefense.models.vgg_vi.VGG._make_layers": [[41, 57], ["torch.Sequential", "torch.Sequential", "torch.AvgPool2d", "torch.AvgPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "layers.conv2d.RandConv2d", "layers.batchnorm2d.RandBatchNorm2d", "torch.ReLU", "torch.ReLU"], "methods", ["None"], ["", "def", "_make_layers", "(", "self", ",", "cfg", ")", ":", "\n", "        ", "layers", "=", "[", "]", "\n", "in_channels", "=", "3", "\n", "width", "=", "self", ".", "img_width", "\n", "for", "x", "in", "cfg", ":", "\n", "            ", "if", "x", "==", "'M'", ":", "\n", "                ", "layers", "+=", "[", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "]", "\n", "width", "=", "width", "//", "2", "\n", "", "else", ":", "\n", "                ", "layers", "+=", "[", "\n", "RandConv2d", "(", "self", ".", "sigma_0", ",", "self", ".", "N", ",", "self", ".", "init_s", ",", "in_channels", ",", "x", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "RandBatchNorm2d", "(", "self", ".", "sigma_0", ",", "self", ".", "N", ",", "self", ".", "init_s", ",", "x", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "]", "\n", "in_channels", "=", "x", "\n", "", "", "layers", "+=", "[", "nn", ".", "AvgPool2d", "(", "kernel_size", "=", "width", ",", "stride", "=", "1", ")", "]", "\n", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xuanqing94_BayesianDefense.models.vgg.VGG.__init__": [[15, 20], ["torch.Module.__init__", "vgg.VGG._make_layers", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.xuanqing94_BayesianDefense.layers.linear.RandLinear.__init__", "home.repos.pwc.inspect_result.xuanqing94_BayesianDefense.models.vgg.VGG._make_layers"], ["    ", "def", "__init__", "(", "self", ",", "vgg_name", ",", "nclass", ",", "img_width", "=", "32", ")", ":", "\n", "        ", "super", "(", "VGG", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "img_width", "=", "img_width", "\n", "self", ".", "features", "=", "self", ".", "_make_layers", "(", "cfg", "[", "vgg_name", "]", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "512", ",", "nclass", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xuanqing94_BayesianDefense.models.vgg.VGG.forward": [[21, 26], ["vgg.VGG.features", "vgg.VGG.view", "vgg.VGG.classifier", "vgg.VGG.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "features", "(", "x", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "classifier", "(", "out", ")", "\n", "return", "out", ",", "None", "# return None, to make it compatible with VGG_noise", "\n", "\n"]], "home.repos.pwc.inspect_result.xuanqing94_BayesianDefense.models.vgg.VGG._make_layers": [[27, 42], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["None"], ["", "def", "_make_layers", "(", "self", ",", "cfg", ")", ":", "\n", "        ", "layers", "=", "[", "]", "\n", "in_channels", "=", "3", "\n", "width", "=", "self", ".", "img_width", "\n", "for", "x", "in", "cfg", ":", "\n", "            ", "if", "x", "==", "'M'", ":", "\n", "                ", "layers", "+=", "[", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "]", "\n", "width", "=", "width", "//", "2", "\n", "", "else", ":", "\n", "                ", "layers", "+=", "[", "nn", ".", "Conv2d", "(", "in_channels", ",", "x", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "x", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "]", "\n", "in_channels", "=", "x", "\n", "", "", "layers", "+=", "[", "nn", ".", "AvgPool2d", "(", "kernel_size", "=", "width", ",", "stride", "=", "1", ")", "]", "\n", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xuanqing94_BayesianDefense.models.aaron.Aaron.__init__": [[6, 42], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.AvgPool2d", "torch.AvgPool2d"], "methods", ["home.repos.pwc.inspect_result.xuanqing94_BayesianDefense.layers.linear.RandLinear.__init__"], ["    ", "def", "__init__", "(", "self", ",", "nclass", ")", ":", "\n", "        ", "super", "(", "Aaron", ",", "self", ")", ".", "__init__", "(", ")", "\n", "nchannel", "=", "32", "\n", "self", ".", "features", "=", "nn", ".", "Sequential", "(", "\n", "# 3x96x96", "\n", "nn", ".", "Conv2d", "(", "3", ",", "nchannel", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "nchannel", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", ",", "\n", "# chx48x48", "\n", "nn", ".", "Conv2d", "(", "nchannel", ",", "2", "*", "nchannel", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "2", "*", "nchannel", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", ",", "\n", "# 2chx24x24", "\n", "nn", ".", "Conv2d", "(", "2", "*", "nchannel", ",", "4", "*", "nchannel", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "4", "*", "nchannel", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", ",", "\n", "# 4chx12x12", "\n", "nn", ".", "Conv2d", "(", "4", "*", "nchannel", ",", "8", "*", "nchannel", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "8", "*", "nchannel", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", ",", "\n", "# 8chx6x6", "\n", "nn", ".", "Conv2d", "(", "8", "*", "nchannel", ",", "8", "*", "nchannel", ",", "kernel_size", "=", "3", ",", "padding", "=", "0", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "8", "*", "nchannel", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "# 8chx4x4", "\n", "nn", ".", "Conv2d", "(", "8", "*", "nchannel", ",", "16", "*", "nchannel", ",", "kernel_size", "=", "3", ",", "padding", "=", "0", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "16", "*", "nchannel", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "# 8chx2x2", "\n", "nn", ".", "AvgPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "16", "*", "nchannel", ",", "nclass", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xuanqing94_BayesianDefense.models.aaron.Aaron.forward": [[43, 48], ["aaron.Aaron.features", "aaron.Aaron.view", "aaron.Aaron.classifier", "aaron.Aaron.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "out", "=", "self", ".", "features", "(", "input", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "classifier", "(", "out", ")", "\n", "return", "out", ",", "None", "\n", "", "", ""]], "home.repos.pwc.inspect_result.xuanqing94_BayesianDefense.models.aaron_vi.Aaron.__init__": [[9, 45], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "layers.linear.RandLinear", "layers.conv2d.RandConv2d", "layers.batchnorm2d.RandBatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "layers.conv2d.RandConv2d", "layers.batchnorm2d.RandBatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "layers.conv2d.RandConv2d", "layers.batchnorm2d.RandBatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "layers.conv2d.RandConv2d", "layers.batchnorm2d.RandBatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "layers.conv2d.RandConv2d", "layers.batchnorm2d.RandBatchNorm2d", "torch.ReLU", "torch.ReLU", "layers.conv2d.RandConv2d", "layers.batchnorm2d.RandBatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.AvgPool2d", "torch.AvgPool2d"], "methods", ["home.repos.pwc.inspect_result.xuanqing94_BayesianDefense.layers.linear.RandLinear.__init__"], ["    ", "def", "__init__", "(", "self", ",", "sigma_0", ",", "N", ",", "init_s", ",", "nclass", ")", ":", "\n", "        ", "super", "(", "Aaron", ",", "self", ")", ".", "__init__", "(", ")", "\n", "nchannel", "=", "32", "\n", "self", ".", "features", "=", "nn", ".", "Sequential", "(", "\n", "# 3x96x96", "\n", "RandConv2d", "(", "sigma_0", ",", "N", ",", "init_s", ",", "3", ",", "nchannel", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "RandBatchNorm2d", "(", "sigma_0", ",", "N", ",", "init_s", ",", "nchannel", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", ",", "\n", "# chx48x48", "\n", "RandConv2d", "(", "sigma_0", ",", "N", ",", "init_s", ",", "nchannel", ",", "2", "*", "nchannel", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "RandBatchNorm2d", "(", "sigma_0", ",", "N", ",", "init_s", ",", "2", "*", "nchannel", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", ",", "\n", "# 2chx24x24", "\n", "RandConv2d", "(", "sigma_0", ",", "N", ",", "init_s", ",", "2", "*", "nchannel", ",", "4", "*", "nchannel", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "RandBatchNorm2d", "(", "sigma_0", ",", "N", ",", "init_s", ",", "4", "*", "nchannel", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", ",", "\n", "# 4chx12x12", "\n", "RandConv2d", "(", "sigma_0", ",", "N", ",", "init_s", ",", "4", "*", "nchannel", ",", "8", "*", "nchannel", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "RandBatchNorm2d", "(", "sigma_0", ",", "N", ",", "init_s", ",", "8", "*", "nchannel", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", ",", "\n", "# 8chx6x6", "\n", "RandConv2d", "(", "sigma_0", ",", "N", ",", "init_s", ",", "8", "*", "nchannel", ",", "8", "*", "nchannel", ",", "kernel_size", "=", "3", ",", "padding", "=", "0", ")", ",", "\n", "RandBatchNorm2d", "(", "sigma_0", ",", "N", ",", "init_s", ",", "8", "*", "nchannel", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "# 8chx4x4", "\n", "RandConv2d", "(", "sigma_0", ",", "N", ",", "init_s", ",", "8", "*", "nchannel", ",", "16", "*", "nchannel", ",", "kernel_size", "=", "3", ",", "padding", "=", "0", ")", ",", "\n", "RandBatchNorm2d", "(", "sigma_0", ",", "N", ",", "init_s", ",", "16", "*", "nchannel", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "# 8chx2x2", "\n", "nn", ".", "AvgPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", ")", "\n", "self", ".", "classifier", "=", "RandLinear", "(", "sigma_0", ",", "N", ",", "init_s", ",", "16", "*", "nchannel", ",", "nclass", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xuanqing94_BayesianDefense.models.aaron_vi.Aaron.forward": [[46, 60], ["l.forward.view", "aaron_vi.Aaron.classifier", "type().__name__.startswith", "l.forward.size", "l.forward", "l.forward", "type"], "methods", ["home.repos.pwc.inspect_result.xuanqing94_BayesianDefense.layers.linear.RandLinear.forward", "home.repos.pwc.inspect_result.xuanqing94_BayesianDefense.layers.linear.RandLinear.forward"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "kl_sum", "=", "0", "\n", "out", "=", "input", "\n", "for", "l", "in", "self", ".", "features", ":", "\n", "            ", "if", "type", "(", "l", ")", ".", "__name__", ".", "startswith", "(", "\"Rand\"", ")", ":", "\n", "                ", "out", ",", "kl", "=", "l", ".", "forward", "(", "out", ")", "\n", "if", "kl", "is", "not", "None", ":", "\n", "                    ", "kl_sum", "+=", "kl", "\n", "", "", "else", ":", "\n", "                ", "out", "=", "l", ".", "forward", "(", "out", ")", "\n", "", "", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", ",", "kl", "=", "self", ".", "classifier", "(", "out", ")", "\n", "kl_sum", "+=", "kl", "\n", "return", "out", ",", "kl_sum", "\n", "", "", ""]], "home.repos.pwc.inspect_result.xuanqing94_BayesianDefense.models.aaron_rse.Aaron.__init__": [[6, 48], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "layers.feat_noise.Noise", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "layers.feat_noise.Noise", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "layers.feat_noise.Noise", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "layers.feat_noise.Noise", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "layers.feat_noise.Noise", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "layers.feat_noise.Noise", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.AvgPool2d", "torch.AvgPool2d"], "methods", ["home.repos.pwc.inspect_result.xuanqing94_BayesianDefense.layers.linear.RandLinear.__init__"], ["    ", "def", "__init__", "(", "self", ",", "nclass", ",", "noise_init", ",", "noise_inner", ")", ":", "\n", "        ", "super", "(", "Aaron", ",", "self", ")", ".", "__init__", "(", ")", "\n", "nchannel", "=", "32", "\n", "self", ".", "features", "=", "nn", ".", "Sequential", "(", "\n", "# 3x96x96", "\n", "Noise", "(", "noise_init", ")", ",", "\n", "nn", ".", "Conv2d", "(", "3", ",", "nchannel", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "nchannel", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", ",", "\n", "# chx48x48", "\n", "Noise", "(", "noise_inner", ")", ",", "\n", "nn", ".", "Conv2d", "(", "nchannel", ",", "2", "*", "nchannel", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "2", "*", "nchannel", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", ",", "\n", "# 2chx24x24", "\n", "Noise", "(", "noise_inner", ")", ",", "\n", "nn", ".", "Conv2d", "(", "2", "*", "nchannel", ",", "4", "*", "nchannel", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "4", "*", "nchannel", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", ",", "\n", "# 4chx12x12", "\n", "Noise", "(", "noise_inner", ")", ",", "\n", "nn", ".", "Conv2d", "(", "4", "*", "nchannel", ",", "8", "*", "nchannel", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "8", "*", "nchannel", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", ",", "\n", "# 8chx6x6", "\n", "Noise", "(", "noise_inner", ")", ",", "\n", "nn", ".", "Conv2d", "(", "8", "*", "nchannel", ",", "8", "*", "nchannel", ",", "kernel_size", "=", "3", ",", "padding", "=", "0", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "8", "*", "nchannel", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "# 8chx4x4", "\n", "Noise", "(", "noise_inner", ")", ",", "\n", "nn", ".", "Conv2d", "(", "8", "*", "nchannel", ",", "16", "*", "nchannel", ",", "kernel_size", "=", "3", ",", "padding", "=", "0", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "16", "*", "nchannel", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "# 8chx2x2", "\n", "nn", ".", "AvgPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "16", "*", "nchannel", ",", "nclass", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xuanqing94_BayesianDefense.models.aaron_rse.Aaron.forward": [[49, 54], ["aaron_rse.Aaron.features", "aaron_rse.Aaron.view", "aaron_rse.Aaron.classifier", "aaron_rse.Aaron.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "out", "=", "self", ".", "features", "(", "input", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "classifier", "(", "out", ")", "\n", "return", "out", ",", "None", "\n", "", "", ""]], "home.repos.pwc.inspect_result.xuanqing94_BayesianDefense.layers.conv2d.RandConv2d.__init__": [[9, 39], ["torch.Module.__init__", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "conv2d.RandConv2d.register_buffer", "conv2d.RandConv2d.reset_parameters", "ValueError", "ValueError", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "conv2d.RandConv2d.register_buffer", "conv2d.RandConv2d.register_parameter", "conv2d.RandConv2d.register_parameter", "conv2d.RandConv2d.register_parameter", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.xuanqing94_BayesianDefense.layers.linear.RandLinear.__init__", "home.repos.pwc.inspect_result.xuanqing94_BayesianDefense.layers.linear.RandLinear.reset_parameters"], ["    ", "def", "__init__", "(", "self", ",", "sigma_0", ",", "N", ",", "init_s", ",", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "dilation", "=", "1", ",", "groups", "=", "1", ",", "bias", "=", "True", ")", ":", "\n", "        ", "super", "(", "RandConv2d", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "in_channels", "%", "groups", "!=", "0", ":", "\n", "            ", "raise", "ValueError", "(", "'in_channels must be divisible by groups'", ")", "\n", "", "if", "out_channels", "%", "groups", "!=", "0", ":", "\n", "            ", "raise", "ValueError", "(", "'out_channels must be divisible by groups'", ")", "\n", "", "self", ".", "sigma_0", "=", "sigma_0", "\n", "self", ".", "N", "=", "N", "\n", "self", ".", "init_s", "=", "init_s", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "out_channels", "=", "out_channels", "\n", "self", ".", "kernel_size", "=", "kernel_size", "\n", "self", ".", "stride", "=", "stride", "\n", "self", ".", "padding", "=", "padding", "\n", "self", ".", "dilation", "=", "dilation", "\n", "self", ".", "groups", "=", "groups", "\n", "self", ".", "bias", "=", "bias", "\n", "\n", "self", ".", "mu_weight", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "out_channels", ",", "in_channels", "//", "groups", ",", "kernel_size", ",", "kernel_size", ")", ")", "\n", "self", ".", "sigma_weight", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "out_channels", ",", "in_channels", "//", "groups", ",", "kernel_size", ",", "kernel_size", ")", ")", "\n", "self", ".", "register_buffer", "(", "'eps_weight'", ",", "torch", ".", "Tensor", "(", "out_channels", ",", "in_channels", "//", "groups", ",", "kernel_size", ",", "kernel_size", ")", ")", "\n", "if", "bias", ":", "\n", "            ", "self", ".", "mu_bias", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "out_channels", ")", ")", "\n", "self", ".", "sigma_bias", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "out_channels", ")", ")", "\n", "self", ".", "register_buffer", "(", "'eps_bias'", ",", "torch", ".", "Tensor", "(", "out_channels", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "register_parameter", "(", "'mu_bias'", ",", "None", ")", "\n", "self", ".", "register_parameter", "(", "'sigma_bias'", ",", "None", ")", "\n", "self", ".", "register_parameter", "(", "'eps_bias'", ",", "None", ")", "\n", "", "self", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xuanqing94_BayesianDefense.layers.conv2d.RandConv2d.reset_parameters": [[40, 49], ["conv2d.RandConv2d.mu_weight.data.uniform_", "conv2d.RandConv2d.sigma_weight.data.fill_", "math.sqrt", "conv2d.RandConv2d.mu_bias.data.uniform_", "conv2d.RandConv2d.sigma_bias.data.fill_"], "methods", ["None"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "n", "=", "self", ".", "in_channels", "\n", "n", "*=", "self", ".", "kernel_size", "**", "2", "\n", "stdv", "=", "1.0", "/", "math", ".", "sqrt", "(", "n", ")", "\n", "self", ".", "mu_weight", ".", "data", ".", "uniform_", "(", "-", "stdv", ",", "stdv", ")", "\n", "self", ".", "sigma_weight", ".", "data", ".", "fill_", "(", "self", ".", "init_s", ")", "\n", "if", "self", ".", "mu_bias", "is", "not", "None", ":", "\n", "            ", "self", ".", "mu_bias", ".", "data", ".", "uniform_", "(", "-", "stdv", ",", "stdv", ")", "\n", "self", ".", "sigma_bias", ".", "data", ".", "fill_", "(", "self", ".", "init_s", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xuanqing94_BayesianDefense.layers.conv2d.RandConv2d.forward_": [[50, 57], ["weight_noise.noise_fn", "torch.conv2d", "torch.conv2d", "torch.conv2d", "weight_noise.noise_fn"], "methods", ["None"], ["", "", "def", "forward_", "(", "self", ",", "input", ")", ":", "\n", "        ", "weight", "=", "noise_fn", "(", "self", ".", "mu_weight", ",", "self", ".", "sigma_weight", ",", "self", ".", "eps_weight", ",", "self", ".", "sigma_0", ",", "self", ".", "N", ")", "\n", "bias", "=", "None", "\n", "if", "self", ".", "mu_bias", "is", "not", "None", ":", "\n", "            ", "bias", "=", "noise_fn", "(", "self", ".", "mu_bias", ",", "self", ".", "sigma_bias", ",", "self", ".", "eps_bias", ",", "self", ".", "sigma_0", ",", "self", ".", "N", ")", "\n", "", "out", "=", "F", ".", "conv2d", "(", "input", ",", "weight", ",", "bias", ",", "self", ".", "stride", ",", "self", ".", "padding", ",", "self", ".", "dilation", ",", "self", ".", "groups", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.xuanqing94_BayesianDefense.layers.conv2d.RandConv2d.forward": [[58, 70], ["torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "kl_weight.sum", "conv2d.RandConv2d.eps_weight.normal_", "kl_weight.sum", "kl_bias.sum", "math.log", "conv2d.RandConv2d.eps_bias.normal_", "math.log"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "sig_weight", "=", "torch", ".", "exp", "(", "self", ".", "sigma_weight", ")", "\n", "weight", "=", "self", ".", "mu_weight", "+", "sig_weight", "*", "self", ".", "eps_weight", ".", "normal_", "(", ")", "\n", "kl_weight", "=", "math", ".", "log", "(", "self", ".", "sigma_0", ")", "-", "self", ".", "sigma_weight", "+", "(", "sig_weight", "**", "2", "+", "self", ".", "mu_weight", "**", "2", ")", "/", "(", "2", "*", "self", ".", "sigma_0", "**", "2", ")", "-", "0.5", "\n", "bias", "=", "None", "\n", "if", "self", ".", "mu_bias", "is", "not", "None", ":", "\n", "            ", "sig_bias", "=", "torch", ".", "exp", "(", "self", ".", "sigma_bias", ")", "\n", "bias", "=", "self", ".", "mu_bias", "+", "sig_bias", "*", "self", ".", "eps_bias", ".", "normal_", "(", ")", "\n", "kl_bias", "=", "math", ".", "log", "(", "self", ".", "sigma_0", ")", "-", "self", ".", "sigma_bias", "+", "(", "sig_bias", "**", "2", "+", "self", ".", "mu_bias", "**", "2", ")", "/", "(", "2", "*", "self", ".", "sigma_0", "**", "2", ")", "-", "0.5", "\n", "", "out", "=", "F", ".", "conv2d", "(", "input", ",", "weight", ",", "bias", ",", "self", ".", "stride", ",", "self", ".", "padding", ",", "self", ".", "dilation", ",", "self", ".", "groups", ")", "\n", "kl", "=", "kl_weight", ".", "sum", "(", ")", "+", "kl_bias", ".", "sum", "(", ")", "if", "self", ".", "mu_bias", "is", "not", "None", "else", "kl_weight", ".", "sum", "(", ")", "\n", "return", "out", ",", "kl", "\n", "\n"]], "home.repos.pwc.inspect_result.xuanqing94_BayesianDefense.layers.feat_noise.Noise.__init__": [[5, 9], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.xuanqing94_BayesianDefense.layers.linear.RandLinear.__init__"], ["    ", "def", "__init__", "(", "self", ",", "std", ")", ":", "\n", "        ", "super", "(", "Noise", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "std", "=", "std", "\n", "self", ".", "buffer", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.xuanqing94_BayesianDefense.layers.feat_noise.Noise.forward": [[10, 18], ["torch.Tensor().normal_().cuda", "torch.Tensor().normal_().cuda", "torch.Tensor().normal_().cuda", "torch.Tensor().normal_().cuda", "feat_noise.Noise.buffer.data.resize_().normal_", "torch.Tensor().normal_", "torch.Tensor().normal_", "torch.Tensor().normal_", "torch.Tensor().normal_", "feat_noise.Noise.buffer.data.resize_", "x.size", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "x.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "std", ">", "0", ":", "\n", "            ", "if", "self", ".", "buffer", "is", "None", ":", "\n", "                ", "self", ".", "buffer", "=", "torch", ".", "Tensor", "(", "x", ".", "size", "(", ")", ")", ".", "normal_", "(", "0", ",", "self", ".", "std", ")", ".", "cuda", "(", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "buffer", ".", "data", ".", "resize_", "(", "x", ".", "size", "(", ")", ")", ".", "normal_", "(", "0", ",", "self", ".", "std", ")", "\n", "", "return", "x", "+", "self", ".", "buffer", "\n", "", "return", "x", "\n", "", "", ""]], "home.repos.pwc.inspect_result.xuanqing94_BayesianDefense.layers.batchnorm2d.RandBatchNorm2d.__init__": [[9, 42], ["torch.Module.__init__", "batchnorm2d.RandBatchNorm2d.reset_parameters", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "batchnorm2d.RandBatchNorm2d.register_buffer", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "batchnorm2d.RandBatchNorm2d.register_buffer", "batchnorm2d.RandBatchNorm2d.register_parameter", "batchnorm2d.RandBatchNorm2d.register_parameter", "batchnorm2d.RandBatchNorm2d.register_buffer", "batchnorm2d.RandBatchNorm2d.register_parameter", "batchnorm2d.RandBatchNorm2d.register_parameter", "batchnorm2d.RandBatchNorm2d.register_buffer", "batchnorm2d.RandBatchNorm2d.register_buffer", "batchnorm2d.RandBatchNorm2d.register_buffer", "batchnorm2d.RandBatchNorm2d.register_buffer", "batchnorm2d.RandBatchNorm2d.register_parameter", "batchnorm2d.RandBatchNorm2d.register_parameter", "batchnorm2d.RandBatchNorm2d.register_parameter", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.xuanqing94_BayesianDefense.layers.linear.RandLinear.__init__", "home.repos.pwc.inspect_result.xuanqing94_BayesianDefense.layers.linear.RandLinear.reset_parameters"], ["    ", "def", "__init__", "(", "self", ",", "sigma_0", ",", "N", ",", "init_s", ",", "num_features", ",", "eps", "=", "1e-5", ",", "momentum", "=", "0.1", ",", "affine", "=", "True", ",", "track_running_stats", "=", "True", ")", ":", "\n", "        ", "super", "(", "RandBatchNorm2d", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "sigma_0", "=", "sigma_0", "\n", "self", ".", "N", "=", "N", "\n", "self", ".", "num_features", "=", "num_features", "\n", "self", ".", "init_s", "=", "init_s", "\n", "self", ".", "eps", "=", "eps", "\n", "self", ".", "momentum", "=", "momentum", "\n", "self", ".", "affine", "=", "affine", "\n", "self", ".", "track_running_stats", "=", "track_running_stats", "\n", "if", "self", ".", "affine", ":", "\n", "            ", "self", ".", "mu_weight", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "num_features", ")", ")", "\n", "self", ".", "sigma_weight", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "num_features", ")", ")", "\n", "self", ".", "register_buffer", "(", "'eps_weight'", ",", "torch", ".", "Tensor", "(", "num_features", ")", ")", "\n", "self", ".", "mu_bias", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "num_features", ")", ")", "\n", "self", ".", "sigma_bias", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "num_features", ")", ")", "\n", "self", ".", "register_buffer", "(", "'eps_bias'", ",", "torch", ".", "Tensor", "(", "num_features", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "register_parameter", "(", "'mu_weight'", ",", "None", ")", "\n", "self", ".", "register_parameter", "(", "'sigma_weight'", ",", "None", ")", "\n", "self", ".", "register_buffer", "(", "'eps_weight'", ",", "None", ")", "\n", "self", ".", "register_parameter", "(", "'mu_bias'", ",", "None", ")", "\n", "self", ".", "register_parameter", "(", "'sigma_bias'", ",", "None", ")", "\n", "self", ".", "register_buffer", "(", "'eps_bias'", ",", "None", ")", "\n", "", "if", "self", ".", "track_running_stats", ":", "\n", "            ", "self", ".", "register_buffer", "(", "'running_mean'", ",", "torch", ".", "zeros", "(", "num_features", ")", ")", "\n", "self", ".", "register_buffer", "(", "'running_var'", ",", "torch", ".", "ones", "(", "num_features", ")", ")", "\n", "self", ".", "register_buffer", "(", "'num_batches_tracked'", ",", "torch", ".", "tensor", "(", "0", ",", "dtype", "=", "torch", ".", "long", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "register_parameter", "(", "'running_mean'", ",", "None", ")", "\n", "self", ".", "register_parameter", "(", "'running_var'", ",", "None", ")", "\n", "self", ".", "register_parameter", "(", "'num_batches_tracked'", ",", "None", ")", "\n", "", "self", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xuanqing94_BayesianDefense.layers.batchnorm2d.RandBatchNorm2d.reset_running_stats": [[43, 48], ["batchnorm2d.RandBatchNorm2d.running_mean.zero_", "batchnorm2d.RandBatchNorm2d.running_var.fill_", "batchnorm2d.RandBatchNorm2d.num_batches_tracked.zero_"], "methods", ["None"], ["", "def", "reset_running_stats", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "track_running_stats", ":", "\n", "            ", "self", ".", "running_mean", ".", "zero_", "(", ")", "\n", "self", ".", "running_var", ".", "fill_", "(", "1", ")", "\n", "self", ".", "num_batches_tracked", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xuanqing94_BayesianDefense.layers.batchnorm2d.RandBatchNorm2d.reset_parameters": [[49, 58], ["batchnorm2d.RandBatchNorm2d.reset_running_stats", "batchnorm2d.RandBatchNorm2d.mu_weight.data.uniform_", "batchnorm2d.RandBatchNorm2d.sigma_weight.data.fill_", "batchnorm2d.RandBatchNorm2d.mu_bias.data.zero_", "batchnorm2d.RandBatchNorm2d.sigma_bias.data.fill_", "batchnorm2d.RandBatchNorm2d.eps_weight.data.zero_", "batchnorm2d.RandBatchNorm2d.eps_bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.xuanqing94_BayesianDefense.layers.batchnorm2d.RandBatchNorm2d.reset_running_stats"], ["", "", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "self", ".", "reset_running_stats", "(", ")", "\n", "if", "self", ".", "affine", ":", "\n", "            ", "self", ".", "mu_weight", ".", "data", ".", "uniform_", "(", ")", "\n", "self", ".", "sigma_weight", ".", "data", ".", "fill_", "(", "self", ".", "init_s", ")", "\n", "self", ".", "mu_bias", ".", "data", ".", "zero_", "(", ")", "\n", "self", ".", "sigma_bias", ".", "data", ".", "fill_", "(", "self", ".", "init_s", ")", "\n", "self", ".", "eps_weight", ".", "data", ".", "zero_", "(", ")", "\n", "self", ".", "eps_bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xuanqing94_BayesianDefense.layers.batchnorm2d.RandBatchNorm2d._check_input_dim": [[59, 62], ["input.dim", "ValueError", "input.dim"], "methods", ["None"], ["", "", "def", "_check_input_dim", "(", "self", ",", "input", ")", ":", "\n", "        ", "if", "input", ".", "dim", "(", ")", "!=", "4", ":", "\n", "            ", "raise", "ValueError", "(", "'expected 4D input (got {}D input)'", ".", "format", "(", "input", ".", "dim", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xuanqing94_BayesianDefense.layers.batchnorm2d.RandBatchNorm2d.forward_": [[63, 79], ["batchnorm2d.RandBatchNorm2d._check_input_dim", "torch.batch_norm", "torch.batch_norm", "torch.batch_norm", "weight_noise.noise_fn", "weight_noise.noise_fn", "batchnorm2d.RandBatchNorm2d.num_batches_tracked.item"], "methods", ["home.repos.pwc.inspect_result.xuanqing94_BayesianDefense.layers.batchnorm2d.RandBatchNorm2d._check_input_dim"], ["", "", "def", "forward_", "(", "self", ",", "input", ")", ":", "\n", "        ", "self", ".", "_check_input_dim", "(", "input", ")", "\n", "exponential_average_factor", "=", "0.0", "\n", "if", "self", ".", "training", "and", "self", ".", "track_running_stats", ":", "\n", "            ", "self", ".", "num_batches_tracked", "+=", "1", "\n", "", "if", "self", ".", "momentum", "is", "None", ":", "# use cumulative moving average", "\n", "            ", "exponential_average_factor", "=", "1.0", "/", "self", ".", "num_batches_tracked", ".", "item", "(", ")", "\n", "", "else", ":", "# use exponential moving average", "\n", "            ", "exponential_average_factor", "=", "self", ".", "momentum", "\n", "# generate weight and bias", "\n", "", "weight", "=", "bias", "=", "None", "\n", "if", "self", ".", "affine", ":", "\n", "            ", "weight", "=", "noise_fn", "(", "self", ".", "mu_weight", ",", "self", ".", "sigma_weight", ",", "self", ".", "eps_weight", ",", "self", ".", "sigma_0", ",", "self", ".", "N", ")", "\n", "bias", "=", "noise_fn", "(", "self", ".", "mu_bias", ",", "self", ".", "sigma_bias", ",", "self", ".", "eps_bias", ",", "self", ".", "sigma_0", ",", "self", ".", "N", ")", "\n", "\n", "", "return", "F", ".", "batch_norm", "(", "input", ",", "self", ".", "running_mean", ",", "self", ".", "running_var", ",", "weight", ",", "bias", ",", "self", ".", "training", "or", "not", "self", ".", "track_running_stats", ",", "exponential_average_factor", ",", "self", ".", "eps", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xuanqing94_BayesianDefense.layers.batchnorm2d.RandBatchNorm2d.forward": [[80, 102], ["batchnorm2d.RandBatchNorm2d._check_input_dim", "torch.batch_norm", "torch.batch_norm", "torch.batch_norm", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "kl_weight.sum", "kl_bias.sum", "batchnorm2d.RandBatchNorm2d.num_batches_tracked.item", "batchnorm2d.RandBatchNorm2d.eps_weight.normal_", "batchnorm2d.RandBatchNorm2d.eps_bias.normal_", "math.log", "math.log"], "methods", ["home.repos.pwc.inspect_result.xuanqing94_BayesianDefense.layers.batchnorm2d.RandBatchNorm2d._check_input_dim"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "self", ".", "_check_input_dim", "(", "input", ")", "\n", "exponential_average_factor", "=", "0.0", "\n", "if", "self", ".", "training", "and", "self", ".", "track_running_stats", ":", "\n", "            ", "self", ".", "num_batches_tracked", "+=", "1", "\n", "", "if", "self", ".", "momentum", "is", "None", ":", "# use cumulative moving average", "\n", "            ", "exponential_average_factor", "=", "1.0", "/", "self", ".", "num_batches_tracked", ".", "item", "(", ")", "\n", "", "else", ":", "# use exponential moving average", "\n", "            ", "exponential_average_factor", "=", "self", ".", "momentum", "\n", "# generate weight and bias", "\n", "", "weight", "=", "bias", "=", "None", "\n", "if", "self", ".", "affine", ":", "\n", "            ", "sig_weight", "=", "torch", ".", "exp", "(", "self", ".", "sigma_weight", ")", "\n", "weight", "=", "self", ".", "mu_weight", "+", "sig_weight", "*", "self", ".", "eps_weight", ".", "normal_", "(", ")", "\n", "kl_weight", "=", "math", ".", "log", "(", "self", ".", "sigma_0", ")", "-", "self", ".", "sigma_weight", "+", "(", "sig_weight", "**", "2", "+", "self", ".", "mu_weight", "**", "2", ")", "/", "(", "2", "*", "self", ".", "sigma_0", "**", "2", ")", "-", "0.5", "\n", "sig_bias", "=", "torch", ".", "exp", "(", "self", ".", "sigma_bias", ")", "\n", "bias", "=", "self", ".", "mu_bias", "+", "sig_bias", "*", "self", ".", "eps_bias", ".", "normal_", "(", ")", "\n", "kl_bias", "=", "math", ".", "log", "(", "self", ".", "sigma_0", ")", "-", "self", ".", "sigma_bias", "+", "(", "sig_bias", "**", "2", "+", "self", ".", "mu_bias", "**", "2", ")", "/", "(", "2", "*", "self", ".", "sigma_0", "**", "2", ")", "-", "0.5", "\n", "\n", "", "out", "=", "F", ".", "batch_norm", "(", "input", ",", "self", ".", "running_mean", ",", "self", ".", "running_var", ",", "weight", ",", "bias", ",", "self", ".", "training", "or", "not", "self", ".", "track_running_stats", ",", "exponential_average_factor", ",", "self", ".", "eps", ")", "\n", "kl", "=", "kl_weight", ".", "sum", "(", ")", "+", "kl_bias", ".", "sum", "(", ")", "\n", "return", "out", ",", "kl", "\n", "", "", ""]], "home.repos.pwc.inspect_result.xuanqing94_BayesianDefense.layers.weight_noise.NoiseFn.forward": [[6, 13], ["eps.normal_", "ctx.save_for_backward", "torch.exp", "torch.exp", "torch.exp", "torch.exp"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "mu", ",", "sigma", ",", "eps", ",", "sigma_0", ",", "N", ")", ":", "\n", "        ", "eps", ".", "normal_", "(", ")", "\n", "ctx", ".", "save_for_backward", "(", "mu", ",", "sigma", ",", "eps", ")", "\n", "ctx", ".", "sigma_0", "=", "sigma_0", "\n", "ctx", ".", "N", "=", "N", "\n", "return", "mu", "+", "torch", ".", "exp", "(", "sigma", ")", "*", "eps", "\n", "\n"]], "home.repos.pwc.inspect_result.xuanqing94_BayesianDefense.layers.weight_noise.NoiseFn.backward": [[14, 25], ["torch.exp", "torch.exp", "torch.exp", "torch.exp"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad_output", ")", ":", "\n", "        ", "mu", ",", "sigma", ",", "eps", "=", "ctx", ".", "saved_tensors", "\n", "sigma_0", ",", "N", "=", "ctx", ".", "sigma_0", ",", "ctx", ".", "N", "\n", "grad_mu", "=", "grad_sigma", "=", "grad_eps", "=", "grad_sigma_0", "=", "grad_N", "=", "None", "\n", "tmp", "=", "torch", ".", "exp", "(", "sigma", ")", "\n", "if", "ctx", ".", "needs_input_grad", "[", "0", "]", ":", "\n", "            ", "grad_mu", "=", "grad_output", "+", "mu", "/", "(", "sigma_0", "*", "sigma_0", "*", "N", ")", "\n", "", "if", "ctx", ".", "needs_input_grad", "[", "1", "]", ":", "\n", "            ", "grad_sigma", "=", "grad_output", "*", "tmp", "*", "eps", "-", "1", "/", "N", "+", "tmp", "*", "tmp", "/", "(", "sigma_0", "*", "sigma_0", "*", "N", ")", "\n", "", "return", "grad_mu", ",", "grad_sigma", ",", "grad_eps", ",", "grad_sigma_0", ",", "grad_N", "\n", "\n"]], "home.repos.pwc.inspect_result.xuanqing94_BayesianDefense.layers.weight_noise.IdFn.forward": [[27, 30], ["None"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "mu", ",", "sigma", ",", "eps", ",", "sigma_0", ",", "N", ")", ":", "\n", "        ", "return", "mu", "\n", "\n"]], "home.repos.pwc.inspect_result.xuanqing94_BayesianDefense.layers.weight_noise.IdFn.backward": [[31, 34], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad_output", ")", ":", "\n", "        ", "return", "grad_output", ",", "None", ",", "None", ",", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.xuanqing94_BayesianDefense.layers.linear.RandLinear.__init__": [[9, 28], ["torch.Module.__init__", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "linear.RandLinear.register_buffer", "linear.RandLinear.reset_parameters", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "linear.RandLinear.register_buffer", "linear.RandLinear.register_parameter", "linear.RandLinear.register_parameter", "linear.RandLinear.register_buffer", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.xuanqing94_BayesianDefense.layers.linear.RandLinear.__init__", "home.repos.pwc.inspect_result.xuanqing94_BayesianDefense.layers.linear.RandLinear.reset_parameters"], ["    ", "def", "__init__", "(", "self", ",", "sigma_0", ",", "N", ",", "init_s", ",", "in_features", ",", "out_features", ",", "bias", "=", "True", ")", ":", "\n", "        ", "super", "(", "RandLinear", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "sigma_0", "=", "sigma_0", "\n", "self", ".", "N", "=", "N", "\n", "self", ".", "in_features", "=", "in_features", "\n", "self", ".", "out_features", "=", "out_features", "\n", "self", ".", "init_s", "=", "init_s", "\n", "self", ".", "mu_weight", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "out_features", ",", "in_features", ")", ")", "\n", "self", ".", "sigma_weight", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "out_features", ",", "in_features", ")", ")", "\n", "self", ".", "register_buffer", "(", "'eps_weight'", ",", "torch", ".", "Tensor", "(", "out_features", ",", "in_features", ")", ")", "\n", "if", "bias", ":", "\n", "            ", "self", ".", "mu_bias", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "out_features", ")", ")", "\n", "self", ".", "sigma_bias", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "out_features", ")", ")", "\n", "self", ".", "register_buffer", "(", "'eps_bias'", ",", "torch", ".", "Tensor", "(", "out_features", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "register_parameter", "(", "'mu_bias'", ",", "None", ")", "\n", "self", ".", "register_parameter", "(", "'sigma_bias'", ",", "None", ")", "\n", "self", ".", "register_buffer", "(", "'eps_bias'", ",", "None", ")", "\n", "", "self", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xuanqing94_BayesianDefense.layers.linear.RandLinear.reset_parameters": [[29, 38], ["linear.RandLinear.mu_weight.data.uniform_", "linear.RandLinear.sigma_weight.data.fill_", "linear.RandLinear.eps_weight.data.zero_", "math.sqrt", "linear.RandLinear.mu_bias.data.uniform_", "linear.RandLinear.sigma_bias.data.fill_", "linear.RandLinear.eps_bias.data.zero_", "linear.RandLinear.mu_weight.size"], "methods", ["None"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "stdv", "=", "1.", "/", "math", ".", "sqrt", "(", "self", ".", "mu_weight", ".", "size", "(", "1", ")", ")", "\n", "self", ".", "mu_weight", ".", "data", ".", "uniform_", "(", "-", "stdv", ",", "stdv", ")", "\n", "self", ".", "sigma_weight", ".", "data", ".", "fill_", "(", "self", ".", "init_s", ")", "\n", "self", ".", "eps_weight", ".", "data", ".", "zero_", "(", ")", "\n", "if", "self", ".", "mu_bias", "is", "not", "None", ":", "\n", "            ", "self", ".", "mu_bias", ".", "data", ".", "uniform_", "(", "-", "stdv", ",", "stdv", ")", "\n", "self", ".", "sigma_bias", ".", "data", ".", "fill_", "(", "self", ".", "init_s", ")", "\n", "self", ".", "eps_bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xuanqing94_BayesianDefense.layers.linear.RandLinear.forward_": [[39, 45], ["weight_noise.noise_fn", "torch.linear", "torch.linear", "torch.linear", "weight_noise.noise_fn"], "methods", ["None"], ["", "", "def", "forward_", "(", "self", ",", "input", ")", ":", "\n", "        ", "weight", "=", "noise_fn", "(", "self", ".", "mu_weight", ",", "self", ".", "sigma_weight", ",", "self", ".", "eps_weight", ",", "self", ".", "sigma_0", ",", "self", ".", "N", ")", "\n", "bias", "=", "None", "\n", "if", "self", ".", "mu_bias", "is", "not", "None", ":", "\n", "            ", "bias", "=", "noise_fn", "(", "self", ".", "mu_bias", ",", "self", ".", "sigma_bias", ",", "self", ".", "eps_bias", ",", "self", ".", "sigma_0", ",", "self", ".", "N", ")", "\n", "", "return", "F", ".", "linear", "(", "input", ",", "weight", ",", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xuanqing94_BayesianDefense.layers.linear.RandLinear.forward": [[46, 57], ["torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.linear", "torch.linear", "torch.linear", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "kl_weight.sum", "linear.RandLinear.eps_weight.normal_", "kl_weight.sum", "kl_bias.sum", "math.log", "linear.RandLinear.eps_bias.normal_", "math.log"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "sig_weight", "=", "torch", ".", "exp", "(", "self", ".", "sigma_weight", ")", "\n", "weight", "=", "self", ".", "mu_weight", "+", "sig_weight", "*", "self", ".", "eps_weight", ".", "normal_", "(", ")", "\n", "kl_weight", "=", "math", ".", "log", "(", "self", ".", "sigma_0", ")", "-", "self", ".", "sigma_weight", "+", "(", "sig_weight", "**", "2", "+", "self", ".", "mu_weight", "**", "2", ")", "/", "(", "2", "*", "self", ".", "sigma_0", "**", "2", ")", "-", "0.5", "\n", "if", "self", ".", "mu_bias", "is", "not", "None", ":", "\n", "            ", "sig_bias", "=", "torch", ".", "exp", "(", "self", ".", "sigma_bias", ")", "\n", "bias", "=", "self", ".", "mu_bias", "+", "sig_bias", "*", "self", ".", "eps_bias", ".", "normal_", "(", ")", "\n", "kl_bias", "=", "math", ".", "log", "(", "self", ".", "sigma_0", ")", "-", "self", ".", "sigma_bias", "+", "(", "sig_bias", "**", "2", "+", "self", ".", "mu_bias", "**", "2", ")", "/", "(", "2", "*", "self", ".", "sigma_0", "**", "2", ")", "-", "0.5", "\n", "", "out", "=", "F", ".", "linear", "(", "input", ",", "weight", ",", "bias", ")", "\n", "kl", "=", "kl_weight", ".", "sum", "(", ")", "+", "kl_bias", ".", "sum", "(", ")", "if", "self", ".", "mu_bias", "is", "not", "None", "else", "kl_weight", ".", "sum", "(", ")", "\n", "return", "out", ",", "kl", "\n", "", "", ""]]}