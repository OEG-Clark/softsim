{"home.repos.pwc.inspect_result.yinxusen_deepword.deepword.trajectory.Trajectory.__init__": [[20, 45], ["super().__init__", "dict"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.models.drrn_modeling.PseudoSeq2SeqDRRN.__init__"], ["def", "__init__", "(", "self", ",", "num_turns", ":", "int", ",", "size_per_turn", ":", "int", "=", "1", ")", ":", "\n", "        ", "\"\"\"\n        Take the ActionMaster (AM) as an example,\n        Trajectory(AM1, AM2, AM3, AM4, AM5), and last_sid points to AM5;\n        num_turns = 1 means we choose [AM5];\n\n        size_per_turn only controls the way we separate pre- and post-trajectory\n        default with size_per_turn = 1, AM4 is the pre-trajectory of AM5.\n\n        Sometimes we need to change it, e.g. with legacy data where we store\n        trajectory as Trajectory(M1, A1, M2, A2, M3, A3, M4), and the last\n        sid points to M4, then the pre-trajectory of [A3, M4] is [A2, M3],\n        that's why the size_per_turn should set to 2.\n\n        Args:\n            num_turns: how many turns to choose other than current turn\n            size_per_turn: how many cells count as one turn\n        \"\"\"", "\n", "\n", "super", "(", "Trajectory", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "trajectories", ":", "Dict", "[", "int", ",", "List", "[", "T", "]", "]", "=", "dict", "(", ")", "\n", "self", ".", "curr_tj", ":", "Optional", "[", "List", "[", "T", "]", "]", "=", "None", "\n", "self", ".", "curr_tid", ":", "Optional", "[", "int", "]", "=", "None", "\n", "self", ".", "num_turns", ":", "int", "=", "num_turns", "\n", "self", ".", "size_per_turn", ":", "int", "=", "size_per_turn", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.trajectory.Trajectory.get_last_sid": [[46, 55], ["len"], "methods", ["None"], ["", "def", "get_last_sid", "(", "self", ")", "->", "int", ":", "\n", "        ", "\"\"\"\n        A state is defined as a series of interactions between a game and an\n        agent ended with the game's last response.\n        e.g. \"G0, A1, G2, A3, G4\" is a state ended with the game's last response\n        named \"G4\".\n        \"\"\"", "\n", "\n", "return", "len", "(", "self", ".", "curr_tj", ")", "-", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.trajectory.Trajectory.get_current_tid": [[56, 62], ["None"], "methods", ["None"], ["", "def", "get_current_tid", "(", "self", ")", "->", "int", ":", "\n", "        ", "\"\"\"\n        Get current trajectory id\n        \"\"\"", "\n", "\n", "return", "self", ".", "curr_tid", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.trajectory.Trajectory.request_delete_keys": [[63, 82], ["sorted", "trajectory.Trajectory.trajectories.keys", "max", "trajectory.Trajectory.trajectories.pop", "trajectory.Trajectory.debug", "max"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.deepword.log.Logging.debug"], ["", "def", "request_delete_keys", "(", "self", ",", "ks", ":", "List", "[", "int", "]", ")", "->", "Dict", "[", "int", ",", "List", "[", "T", "]", "]", ":", "\n", "        ", "\"\"\"\n        Request to delete all trajectories with keys in `ks`.\n\n        Args:\n            ks: a list of keys of trajectories to be deleted\n        \"\"\"", "\n", "trashed", "=", "{", "}", "\n", "if", "not", "ks", ":", "\n", "            ", "return", "trashed", "\n", "", "for", "k", "in", "sorted", "(", "self", ".", "trajectories", ".", "keys", "(", ")", ")", ":", "\n", "            ", "if", "k", ">", "max", "(", "ks", ")", ":", "\n", "                ", "break", "\n", "", "else", ":", "\n", "                ", "values", "=", "self", ".", "trajectories", ".", "pop", "(", "k", ",", "None", ")", "\n", "trashed", "[", "k", "]", "=", "values", "\n", "self", ".", "debug", "(", "\n", "'trajectory {} (time<=) {} deleted'", ".", "format", "(", "k", ",", "max", "(", "ks", ")", ")", ")", "\n", "", "", "return", "trashed", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.trajectory.Trajectory.add_new_tj": [[83, 101], ["deepword.utils.ctime", "len"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.deepword.utils.ctime"], ["", "def", "add_new_tj", "(", "self", ",", "tid", ":", "Optional", "[", "int", "]", "=", "None", ")", "->", "int", ":", "\n", "        ", "\"\"\"\n        Add a new trajectory\n\n        Args:\n            tid: trajectory id, `None` falls back to auto-generated id.\n\n        Returns:\n            a tid\n        \"\"\"", "\n", "\n", "if", "tid", "is", "None", "or", "tid", "in", "self", ".", "trajectories", ":", "\n", "            ", "tid", "=", "ctime", "(", ")", "\n", "", "if", "self", ".", "curr_tj", "is", "not", "None", "and", "len", "(", "self", ".", "curr_tj", ")", "!=", "0", ":", "\n", "            ", "self", ".", "trajectories", "[", "self", ".", "curr_tid", "]", "=", "self", ".", "curr_tj", "\n", "", "self", ".", "curr_tid", "=", "tid", "\n", "self", ".", "curr_tj", "=", "[", "]", "\n", "return", "tid", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.trajectory.Trajectory.append": [[102, 113], ["trajectory.Trajectory.curr_tj.append"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.deepword.tree_memory.TreeMemory.append"], ["", "def", "append", "(", "self", ",", "content", ":", "T", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        Use generic type for content\n        the trajectory class doesn't care what has been stored\n        and also doesn't process them\n\n        Args:\n            content: something to add in the current trajectory\n        \"\"\"", "\n", "\n", "self", ".", "curr_tj", ".", "append", "(", "content", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.trajectory.Trajectory.save_tjs": [[114, 130], ["list", "list", "numpy.savez", "trajectory.Trajectory.trajectories.keys", "trajectory.Trajectory.trajectories.values"], "methods", ["None"], ["", "def", "save_tjs", "(", "self", ",", "path", ":", "str", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        Save all trajectories in a npz file\n\n        All trajectory ids, all trajectories, current trajectory id, and\n        current trajectory will be saved.\n        \"\"\"", "\n", "\n", "tids", "=", "list", "(", "self", ".", "trajectories", ".", "keys", "(", ")", ")", "\n", "vals", "=", "list", "(", "self", ".", "trajectories", ".", "values", "(", ")", ")", "\n", "np", ".", "savez", "(", "\n", "path", ",", "\n", "tids", "=", "tids", ",", "\n", "vals", "=", "vals", "+", "[", "[", "None", "]", "]", ",", "\n", "curr_tid", "=", "[", "self", ".", "curr_tid", "]", ",", "\n", "curr_tj", "=", "[", "self", ".", "curr_tj", "]", "+", "[", "[", "None", "]", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.trajectory.Trajectory.load_tjs": [[131, 146], ["numpy.load", "list", "range", "len", "len", "len", "len", "list", "len"], "methods", ["None"], ["", "def", "load_tjs", "(", "self", ",", "path", ":", "str", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        Load trajectories from a npz file\n        \"\"\"", "\n", "\n", "tjs", "=", "np", ".", "load", "(", "path", ",", "allow_pickle", "=", "True", ")", "\n", "self", ".", "curr_tid", "=", "tjs", "[", "\"curr_tid\"", "]", "[", "0", "]", "\n", "self", ".", "curr_tj", "=", "list", "(", "tjs", "[", "\"curr_tj\"", "]", "[", "0", "]", ")", "\n", "tids", "=", "tjs", "[", "\"tids\"", "]", "\n", "vals", "=", "tjs", "[", "\"vals\"", "]", "\n", "if", "len", "(", "tids", ")", "+", "1", "==", "len", "(", "vals", ")", ":", "\n", "            ", "vals", "=", "vals", "[", ":", "-", "1", "]", "\n", "", "assert", "len", "(", "tids", ")", "==", "len", "(", "vals", ")", ",", "\"incompatible trajectory ids and values\"", "\n", "for", "i", "in", "range", "(", "len", "(", "tids", ")", ")", ":", "\n", "            ", "self", ".", "trajectories", "[", "tids", "[", "i", "]", "]", "=", "list", "(", "vals", "[", "i", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.trajectory.Trajectory.fetch_state_by_idx": [[147, 171], ["max", "trajectory.Trajectory.debug", "deepword.utils.report_status", "len"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.deepword.log.Logging.debug", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.utils.report_status"], ["", "", "def", "fetch_state_by_idx", "(", "self", ",", "tid", ":", "int", ",", "sid", ":", "int", ")", "->", "List", "[", "T", "]", ":", "\n", "        ", "\"\"\"\n        fetch a state given trajectory id and state id\n\n        Returns:\n            a list of contents\n        \"\"\"", "\n", "\n", "if", "tid", "==", "self", ".", "curr_tid", ":", "\n", "            ", "tj", "=", "self", ".", "curr_tj", "\n", "", "elif", "tid", "in", "self", ".", "trajectories", ":", "\n", "            ", "tj", "=", "self", ".", "trajectories", "[", "tid", "]", "\n", "", "else", ":", "\n", "            ", "return", "[", "]", "\n", "", "ss", "=", "max", "(", "0", ",", "sid", "-", "self", ".", "num_turns", "+", "1", ")", "\n", "ee", "=", "sid", "+", "1", "# sid should be included", "\n", "state", "=", "tj", "[", "ss", ":", "ee", "]", "\n", "if", "not", "state", ":", "\n", "            ", "self", ".", "debug", "(", "\"empty trajectory:\\n{}\"", ".", "format", "(", "\n", "report_status", "(", "[", "\n", "(", "\"tid\"", ",", "tid", ")", ",", "(", "\"sid\"", ",", "sid", ")", ",", "(", "\"tj_len\"", ",", "len", "(", "tj", ")", ")", ",", "\n", "(", "\"ss\"", ",", "ss", ")", ",", "(", "\"ee\"", ",", "ee", ")", "\n", "]", ")", ")", ")", "\n", "", "return", "state", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.trajectory.Trajectory.fetch_last_state": [[172, 181], ["trajectory.Trajectory.fetch_state_by_idx", "trajectory.Trajectory.get_last_sid"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.deepword.trajectory.Trajectory.fetch_state_by_idx", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.trajectory.Trajectory.get_last_sid"], ["", "def", "fetch_last_state", "(", "self", ")", "->", "List", "[", "T", "]", ":", "\n", "        ", "\"\"\"\n        Fetch the last state from the current trajectory\n\n        Returns:\n            a list of contents\n        \"\"\"", "\n", "\n", "return", "self", ".", "fetch_state_by_idx", "(", "self", ".", "curr_tid", ",", "self", ".", "get_last_sid", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.trajectory.Trajectory.fetch_batch_states": [[182, 199], ["zip", "batch_states.append", "trajectory.Trajectory.fetch_state_by_idx"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.deepword.tree_memory.TreeMemory.append", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.trajectory.Trajectory.fetch_state_by_idx"], ["", "def", "fetch_batch_states", "(", "\n", "self", ",", "b_tid", ":", "List", "[", "int", "]", ",", "b_sid", ":", "List", "[", "int", "]", ")", "->", "List", "[", "List", "[", "T", "]", "]", ":", "\n", "        ", "\"\"\"\n        Fetch a batch of states given trajectory ids and state ids.\n\n        Args:\n            b_tid: a batch of trajectory ids\n            b_sid: a batch of state ids\n\n        Returns:\n            a list of lists of contents\n        \"\"\"", "\n", "\n", "batch_states", "=", "[", "]", "\n", "for", "tid", ",", "sid", "in", "zip", "(", "b_tid", ",", "b_sid", ")", ":", "\n", "            ", "batch_states", ".", "append", "(", "self", ".", "fetch_state_by_idx", "(", "tid", ",", "sid", ")", ")", "\n", "", "return", "batch_states", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.trajectory.Trajectory.fetch_batch_pre_states": [[200, 219], ["zip", "batch_states.append", "trajectory.Trajectory.fetch_state_by_idx"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.deepword.tree_memory.TreeMemory.append", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.trajectory.Trajectory.fetch_state_by_idx"], ["", "def", "fetch_batch_pre_states", "(", "\n", "self", ",", "b_tid", ":", "List", "[", "int", "]", ",", "b_sid", ":", "List", "[", "int", "]", ")", "->", "List", "[", "List", "[", "T", "]", "]", ":", "\n", "        ", "\"\"\"\n        Fetch a batch of pre-states given trajectory ids and state ids\n\n        the position of pre-states is depend on `size_per_turn`.\n\n        Args:\n            b_tid: a batch of trajectory ids\n            b_sid: a batch of state ids\n\n        Returns:\n            a list of lists of contents\n        \"\"\"", "\n", "batch_states", "=", "[", "]", "\n", "for", "tid", ",", "sid", "in", "zip", "(", "b_tid", ",", "b_sid", ")", ":", "\n", "            ", "batch_states", ".", "append", "(", "\n", "self", ".", "fetch_state_by_idx", "(", "tid", ",", "sid", "-", "self", ".", "size_per_turn", ")", ")", "\n", "", "return", "batch_states", "\n", "", "", ""]], "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.main.hp_parser": [[30, 86], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument"], "function", ["None"], ["def", "hp_parser", "(", ")", "->", "ArgumentParser", ":", "\n", "    ", "\"\"\"\n    Arg parser for hyper-parameters\n    \"\"\"", "\n", "\n", "# TODO: \"store_true\" defaults to be False, so use an explict default=None", "\n", "parser", "=", "ArgumentParser", "(", "argument_default", "=", "None", ")", "\n", "parser", ".", "add_argument", "(", "'--model-creator'", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--agent-clazz'", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--config-file'", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--init-eps'", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "'--final-eps'", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "'--annealing-eps-t'", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--gamma'", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "'--eval-episode'", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--batch-size'", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--learning-rate'", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "'--save-gap-t'", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--replay-mem'", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--observation-t'", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--total-t'", ",", "default", "=", "sys", ".", "maxsize", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--game-episode-terminal-t'", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--collect-floor-plan'", ",", "action", "=", "'store_true'", ",", "default", "=", "None", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--disable-collect-floor-plan'", ",", "dest", "=", "'collect_floor_plan'", ",", "\n", "action", "=", "'store_false'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--start-t-ignore-model-t'", ",", "action", "=", "'store_true'", ",", "default", "=", "None", ")", "\n", "parser", ".", "add_argument", "(", "'--n-actions'", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--use-step-wise-reward'", ",", "action", "=", "'store_true'", ",", "default", "=", "None", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--always-compute-policy'", ",", "action", "=", "'store_true'", ",", "default", "=", "None", ")", "\n", "parser", ".", "add_argument", "(", "\"--tokenizer-type\"", ",", "type", "=", "str", ",", "help", "=", "\"[bert|albert|nltk]\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--max-snapshot-to-keep\"", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--policy-to-action\"", ",", "type", "=", "str", ",", "help", "=", "\"[EPS/LinUCB/Sampling]\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--policy-sampling-temp\"", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "\"--action-file\"", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "\"--policy-eps\"", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "\"--bert-language-layer\"", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "\"--bert-freeze-layers\"", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--action-padding-in-tj\"", ",", "action", "=", "\"store_true\"", ",", "default", "=", "None", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--append-objective-to-tj\"", ",", "action", "=", "\"store_true\"", ",", "default", "=", "None", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--walkthrough-guided-exploration\"", ",", "action", "=", "\"store_true\"", ",", "\n", "default", "=", "None", ",", "help", "=", "\"only effective during training\"", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--prob-complete-walkthrough\"", ",", "type", "=", "float", ",", "default", "=", "None", ",", "\n", "help", "=", "\"the probability of using all steps in walkthrough at training\"", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--num-tokens\"", ",", "type", "=", "int", ",", "help", "=", "\"maximum length for trajectory as input\"", ")", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.main.get_parser": [[88, 150], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_subparsers", "parser.add_subparsers.add_parser", "subparsers.add_parser.add_argument", "subparsers.add_parser.add_argument", "subparsers.add_parser.add_argument", "parser.add_subparsers.add_parser", "subparsers.add_parser.add_argument", "subparsers.add_parser.add_argument", "subparsers.add_parser.add_argument", "subparsers.add_parser.add_argument", "subparsers.add_parser.add_argument", "subparsers.add_parser.add_argument", "subparsers.add_parser.add_argument", "subparsers.add_parser.add_argument", "subparsers.add_parser.add_argument", "parser.add_subparsers.add_parser", "subparsers.add_parser.add_argument", "subparsers.add_parser.add_argument", "subparsers.add_parser.add_argument", "parser.add_subparsers.add_parser", "subparsers.add_parser.add_argument", "subparsers.add_parser.add_argument", "subparsers.add_parser.add_argument", "subparsers.add_parser.add_argument", "subparsers.add_parser.add_argument", "subparsers.add_parser.add_argument", "parser.add_subparsers.add_parser", "subparsers.add_parser.add_argument", "subparsers.add_parser.add_argument", "parser.add_subparsers.add_parser", "subparsers.add_parser.add_argument", "subparsers.add_parser.add_argument", "subparsers.add_parser.add_argument", "subparsers.add_parser.add_argument", "subparsers.add_parser.add_argument", "subparsers.add_parser.add_argument", "subparsers.add_parser.add_argument", "main.hp_parser"], "function", ["home.repos.pwc.inspect_result.yinxusen_deepword.deepword.main.hp_parser"], ["", "def", "get_parser", "(", ")", "->", "ArgumentParser", ":", "\n", "    ", "\"\"\"\n    Get arg parser for different modules\n    \"\"\"", "\n", "\n", "parser", "=", "ArgumentParser", "(", "\n", "argument_default", "=", "None", ",", "parents", "=", "[", "hp_parser", "(", ")", "]", ",", "\n", "conflict_handler", "=", "'resolve'", ")", "\n", "parser", ".", "add_argument", "(", "'--model-dir'", ",", "type", "=", "str", ",", "required", "=", "True", ")", "\n", "\n", "subparsers", "=", "parser", ".", "add_subparsers", "(", "\n", "dest", "=", "'mode'", ",", "\n", "help", "=", "\"[train-dqn|eva--dqn|train-student|eval-student|gen-data]\"", ")", "\n", "\n", "teacher_parser", "=", "subparsers", ".", "add_parser", "(", "'train-dqn'", ")", "\n", "teacher_parser", ".", "add_argument", "(", "\n", "'--game-path'", ",", "type", "=", "str", ",", "help", "=", "'[a dir|a game file]'", ",", "required", "=", "True", ")", "\n", "teacher_parser", ".", "add_argument", "(", "'--f-games'", ",", "type", "=", "str", ")", "\n", "teacher_parser", ".", "add_argument", "(", "\n", "'--request-obs-inv'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ")", "\n", "\n", "eval_parser", "=", "subparsers", ".", "add_parser", "(", "'eval-dqn'", ")", "\n", "eval_parser", ".", "add_argument", "(", "\n", "'--eval-mode'", ",", "type", "=", "str", ",", "default", "=", "'eval'", ",", "\n", "help", "=", "'[eval|dev-eval|full-eval]'", ")", "\n", "eval_parser", ".", "add_argument", "(", "'--game-path'", ",", "type", "=", "str", ",", "required", "=", "True", ")", "\n", "eval_parser", ".", "add_argument", "(", "'--f-games'", ",", "type", "=", "str", ")", "\n", "eval_parser", ".", "add_argument", "(", "'--n-gpus'", ",", "type", "=", "int", ",", "default", "=", "1", ")", "\n", "eval_parser", ".", "add_argument", "(", "'--debug'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ")", "\n", "eval_parser", ".", "add_argument", "(", "'--load-best'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ")", "\n", "eval_parser", ".", "add_argument", "(", "'--restore-from'", ",", "type", "=", "str", ")", "\n", "eval_parser", ".", "add_argument", "(", "'--ckpt-range-min'", ",", "type", "=", "int", ")", "\n", "eval_parser", ".", "add_argument", "(", "'--ckpt-range-max'", ",", "type", "=", "int", ")", "\n", "\n", "student_parser", "=", "subparsers", ".", "add_parser", "(", "'train-student'", ")", "\n", "student_parser", ".", "add_argument", "(", "'--data-path'", ",", "type", "=", "str", ",", "required", "=", "True", ")", "\n", "student_parser", ".", "add_argument", "(", "'--learner-clazz'", ",", "type", "=", "str", ")", "\n", "student_parser", ".", "add_argument", "(", "'--n-epochs'", ",", "type", "=", "int", ",", "default", "=", "1000", ")", "\n", "\n", "student_eval_parser", "=", "subparsers", ".", "add_parser", "(", "'eval-student'", ")", "\n", "student_eval_parser", ".", "add_argument", "(", "'--data-path'", ",", "type", "=", "str", ",", "required", "=", "True", ")", "\n", "student_eval_parser", ".", "add_argument", "(", "'--learner-clazz'", ",", "type", "=", "str", ")", "\n", "student_eval_parser", ".", "add_argument", "(", "'--n-gpus'", ",", "type", "=", "int", ",", "default", "=", "1", ")", "\n", "student_eval_parser", ".", "add_argument", "(", "\n", "'--debug'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ")", "\n", "student_eval_parser", ".", "add_argument", "(", "'--ckpt-range-min'", ",", "type", "=", "int", ")", "\n", "student_eval_parser", ".", "add_argument", "(", "'--ckpt-range-max'", ",", "type", "=", "int", ")", "\n", "\n", "snn_gen_parser", "=", "subparsers", ".", "add_parser", "(", "'gen-snn'", ")", "\n", "snn_gen_parser", ".", "add_argument", "(", "'--data-path'", ",", "type", "=", "str", ",", "required", "=", "True", ")", "\n", "snn_gen_parser", ".", "add_argument", "(", "'--learner-clazz'", ",", "type", "=", "str", ")", "\n", "\n", "gen_data_parser", "=", "subparsers", ".", "add_parser", "(", "'gen-data'", ")", "\n", "gen_data_parser", ".", "add_argument", "(", "'--game-path'", ",", "type", "=", "str", ",", "required", "=", "True", ")", "\n", "gen_data_parser", ".", "add_argument", "(", "'--f-games'", ",", "type", "=", "str", ")", "\n", "gen_data_parser", ".", "add_argument", "(", "\n", "'--load-best'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ")", "\n", "gen_data_parser", ".", "add_argument", "(", "'--restore-from'", ",", "type", "=", "str", ")", "\n", "gen_data_parser", ".", "add_argument", "(", "'--epoch-size'", ",", "type", "=", "int", ")", "\n", "gen_data_parser", ".", "add_argument", "(", "'--epoch-limit'", ",", "type", "=", "int", ",", "default", "=", "5", ")", "\n", "gen_data_parser", ".", "add_argument", "(", "'--max-randomness'", ",", "type", "=", "float", ",", "default", "=", "0.5", ")", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.main.run_agent": [[152, 192], ["logging.getLogger", "tqdm.trange", "tqdm.trange", "logging.getLogger.info", "game_env.reset", "agent.act", "logging.getLogger.info", "logging.getLogger.info", "logging.getLogger.info", "agent.save_snapshot", "agent.core.save_model", "len", "len", "len", "all", "agent.act", "game_env.step", "int", "zip"], "function", ["home.repos.pwc.inspect_result.yinxusen_deepword.deepword.log.Logging.info", "home.repos.pwc.inspect_result.yinxusen_deepword.agents.base_agent.BaseAgent.reset", "home.repos.pwc.inspect_result.yinxusen_deepword.agents.base_agent.BaseAgent.act", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.log.Logging.info", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.log.Logging.info", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.log.Logging.info", "home.repos.pwc.inspect_result.yinxusen_deepword.agents.base_agent.BaseAgent.save_snapshot", "home.repos.pwc.inspect_result.yinxusen_deepword.agents.cores.TabularCore.save_model", "home.repos.pwc.inspect_result.yinxusen_deepword.agents.base_agent.BaseAgent.act"], ["", "def", "run_agent", "(", "\n", "agent", ":", "BaseAgent", ",", "game_env", ":", "Env", ",", "nb_games", ":", "int", ",", "nb_epochs", ":", "int", "\n", ")", "->", "None", ":", "\n", "    ", "\"\"\"\n    Run a train agent on given games.\n\n    Args:\n        agent: an agent extends the base agent,\n         see :py:class:`deepword.agents.base_agent.BaseAgent`.\n        game_env: game Env, from gym\n        nb_games: number of games\n        nb_epochs: number of epochs for training\n    \"\"\"", "\n", "\n", "logger", "=", "logging", ".", "getLogger", "(", "\"train\"", ")", "\n", "for", "epoch_no", "in", "trange", "(", "nb_epochs", ")", ":", "\n", "        ", "for", "game_no", "in", "trange", "(", "nb_games", ")", ":", "\n", "            ", "logger", ".", "info", "(", "\"playing game epoch_no/game_no: {}/{}\"", ".", "format", "(", "\n", "epoch_no", ",", "game_no", ")", ")", "\n", "\n", "obs", ",", "infos", "=", "game_env", ".", "reset", "(", ")", "\n", "scores", "=", "[", "0", "]", "*", "len", "(", "obs", ")", "\n", "dones", "=", "[", "False", "]", "*", "len", "(", "obs", ")", "\n", "steps", "=", "[", "0", "]", "*", "len", "(", "obs", ")", "\n", "while", "not", "all", "(", "dones", ")", ":", "\n", "# Increase step counts.", "\n", "                ", "steps", "=", "(", "[", "step", "+", "int", "(", "not", "done", ")", "\n", "for", "step", ",", "done", "in", "zip", "(", "steps", ",", "dones", ")", "]", ")", "\n", "commands", "=", "agent", ".", "act", "(", "obs", ",", "scores", ",", "dones", ",", "infos", ")", "\n", "obs", ",", "scores", ",", "dones", ",", "infos", "=", "game_env", ".", "step", "(", "commands", ")", "\n", "# Let the agent knows the game is done.", "\n", "", "agent", ".", "act", "(", "obs", ",", "scores", ",", "dones", ",", "infos", ")", "\n", "", "if", "agent", ".", "total_t", ">=", "agent", ".", "hp", ".", "observation_t", "+", "agent", ".", "hp", ".", "annealing_eps_t", ":", "\n", "            ", "logger", ".", "info", "(", "\"training steps exceed MAX, stop training ...\"", ")", "\n", "logger", ".", "info", "(", "\"total training steps: {}\"", ".", "format", "(", "\n", "agent", ".", "total_t", "-", "agent", ".", "hp", ".", "observation_t", ")", ")", "\n", "logger", ".", "info", "(", "\"save final model and snapshot ...\"", ")", "\n", "agent", ".", "save_snapshot", "(", ")", "\n", "agent", ".", "core", ".", "save_model", "(", ")", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.main.run_agent_v2": [[194, 249], ["logging.getLogger", "tqdm.trange", "tqdm.trange", "logging.getLogger.info", "game_env.reset", "agent.act", "logging.getLogger.info", "logging.getLogger.info", "logging.getLogger.info", "agent.save_snapshot", "agent.core.save_model", "len", "len", "len", "len", "len", "all", "game_env.step", "game_env.step", "agent.act", "game_env.step", "int", "zip"], "function", ["home.repos.pwc.inspect_result.yinxusen_deepword.deepword.log.Logging.info", "home.repos.pwc.inspect_result.yinxusen_deepword.agents.base_agent.BaseAgent.reset", "home.repos.pwc.inspect_result.yinxusen_deepword.agents.base_agent.BaseAgent.act", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.log.Logging.info", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.log.Logging.info", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.log.Logging.info", "home.repos.pwc.inspect_result.yinxusen_deepword.agents.base_agent.BaseAgent.save_snapshot", "home.repos.pwc.inspect_result.yinxusen_deepword.agents.cores.TabularCore.save_model", "home.repos.pwc.inspect_result.yinxusen_deepword.agents.base_agent.BaseAgent.act"], ["", "", "", "def", "run_agent_v2", "(", "\n", "agent", ":", "BaseAgent", ",", "game_env", ":", "Env", ",", "nb_games", ":", "int", ",", "nb_epochs", ":", "int", "\n", ")", "->", "None", ":", "\n", "    ", "\"\"\"\n    Run a train agent on given games.\n    Proactively request `look` and `inventory` results from games to substitute\n    the description and inventory parts of infos.\n    This is useful when games don't provide description and inventory, e.g. for\n    Z-machine games.\n\n    NB: This will incur extra steps for game playing, remember to use 3-times of\n    previous step quota. E.g. previously use 100 max steps, now you need 100 * 3\n    max steps.\n\n    See :py:func:`deepword.main.run_agent`\n    \"\"\"", "\n", "\n", "logger", "=", "logging", ".", "getLogger", "(", "\"train\"", ")", "\n", "for", "epoch_no", "in", "trange", "(", "nb_epochs", ")", ":", "\n", "        ", "for", "game_no", "in", "trange", "(", "nb_games", ")", ":", "\n", "            ", "logger", ".", "info", "(", "\"playing game epoch_no/game_no: {}/{}\"", ".", "format", "(", "\n", "epoch_no", ",", "game_no", ")", ")", "\n", "\n", "obs", ",", "infos", "=", "game_env", ".", "reset", "(", ")", "\n", "scores", "=", "[", "0", "]", "*", "len", "(", "obs", ")", "\n", "dones", "=", "[", "False", "]", "*", "len", "(", "obs", ")", "\n", "steps", "=", "[", "0", "]", "*", "len", "(", "obs", ")", "\n", "# TODO: be cautious about the local variable problem", "\n", "look_res", "=", "[", "\"\"", "]", "*", "len", "(", "obs", ")", "\n", "inventory_res", "=", "[", "\"\"", "]", "*", "len", "(", "obs", ")", "\n", "while", "not", "all", "(", "dones", ")", ":", "\n", "# TODO: get fake description from an extra look per step", "\n", "                ", "look_res", ",", "_", ",", "_", ",", "_", "=", "game_env", ".", "step", "(", "[", "\"look\"", "]", ")", "\n", "infos", "[", "'description'", "]", "=", "look_res", "\n", "inventory_res", ",", "_", ",", "_", ",", "_", "=", "game_env", ".", "step", "(", "[", "\"inventory\"", "]", ")", "\n", "infos", "[", "'inventory'", "]", "=", "inventory_res", "\n", "# Increase step counts.", "\n", "steps", "=", "(", "[", "step", "+", "int", "(", "not", "done", ")", "\n", "for", "step", ",", "done", "in", "zip", "(", "steps", ",", "dones", ")", "]", ")", "\n", "commands", "=", "agent", ".", "act", "(", "obs", ",", "scores", ",", "dones", ",", "infos", ")", "\n", "obs", ",", "scores", ",", "dones", ",", "infos", "=", "game_env", ".", "step", "(", "commands", ")", "\n", "# Let the agent knows the game is done.", "\n", "# last state obs + inv copy previous state", "\n", "# TODO: this is OK for now, since we don't use last states for SNN", "\n", "", "infos", "[", "'description'", "]", "=", "look_res", "\n", "infos", "[", "'inventory'", "]", "=", "inventory_res", "\n", "agent", ".", "act", "(", "obs", ",", "scores", ",", "dones", ",", "infos", ")", "\n", "", "if", "agent", ".", "total_t", ">=", "agent", ".", "hp", ".", "observation_t", "+", "agent", ".", "hp", ".", "annealing_eps_t", ":", "\n", "            ", "logger", ".", "info", "(", "\"training steps exceed MAX, stop training ...\"", ")", "\n", "logger", ".", "info", "(", "\"total training steps: {}\"", ".", "format", "(", "\n", "agent", ".", "total_t", "-", "agent", ".", "hp", ".", "observation_t", ")", ")", "\n", "logger", ".", "info", "(", "\"save final model and snapshot ...\"", ")", "\n", "agent", ".", "save_snapshot", "(", ")", "\n", "agent", ".", "core", ".", "save_model", "(", ")", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.main.train": [[251, 292], ["logging.getLogger", "deepword.utils.load_game_files", "logging.getLogger.info", "deepword.utils.agent_name2clazz", "deepword.utils.agent_name2clazz.", "agent_clazz.train", "agent_clazz.select_additional_infos", "textworld.gym.register_games", "gym.make", "gym.make.close", "func_run_agent", "len", "len", "sys.exc_info", "logging.getLogger.error", "traceback.print_exception", "len"], "function", ["home.repos.pwc.inspect_result.yinxusen_deepword.deepword.utils.load_game_files", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.log.Logging.info", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.utils.agent_name2clazz", "home.repos.pwc.inspect_result.yinxusen_deepword.agents.base_agent.BaseAgent.train", "home.repos.pwc.inspect_result.yinxusen_deepword.agents.base_agent.BaseAgent.select_additional_infos", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.log.Logging.error"], ["", "", "", "def", "train", "(", "\n", "hp", ":", "HParams", ",", "model_dir", ":", "str", ",", "\n", "game_dir", ":", "str", ",", "f_games", ":", "Optional", "[", "str", "]", "=", "None", ",", "\n", "func_run_agent", ":", "Callable", "[", "[", "BaseAgent", ",", "Env", ",", "int", ",", "int", "]", ",", "None", "]", "=", "run_agent", "\n", ")", "->", "None", ":", "\n", "    ", "\"\"\"\n    train an agent\n\n    Args:\n        hp: hyper-parameters see :py:mod:`deepword.hparams`\n        model_dir: model dir\n        game_dir: game dir with ulx games\n        f_games: game name to select from `game_dir`\n        func_run_agent: how to run the agent and games,\n         see :py:func:`deepword.main.run_agent`\n    \"\"\"", "\n", "\n", "logger", "=", "logging", ".", "getLogger", "(", "'train'", ")", "\n", "train_games", "=", "load_game_files", "(", "game_dir", ",", "f_games", ")", "\n", "logger", ".", "info", "(", "\"load {} game files\"", ".", "format", "(", "len", "(", "train_games", ")", ")", ")", "\n", "# nb epochs could only be an estimation since steps per episode is unknown", "\n", "nb_epochs", "=", "(", "hp", ".", "annealing_eps_t", "//", "len", "(", "train_games", ")", "//", "10", ")", "+", "1", "\n", "\n", "agent_clazz", "=", "agent_name2clazz", "(", "hp", ".", "agent_clazz", ")", "\n", "agent", "=", "agent_clazz", "(", "hp", ",", "model_dir", ")", "\n", "agent", ".", "train", "(", ")", "\n", "\n", "requested_infos", "=", "agent", ".", "select_additional_infos", "(", ")", "\n", "\n", "env_id", "=", "textworld", ".", "gym", ".", "register_games", "(", "\n", "train_games", ",", "requested_infos", ",", "batch_size", "=", "1", ",", "\n", "max_episode_steps", "=", "hp", ".", "game_episode_terminal_t", ",", "name", "=", "\"training\"", ")", "\n", "env", "=", "gym", ".", "make", "(", "env_id", ")", "\n", "try", ":", "\n", "        ", "func_run_agent", "(", "agent", ",", "env", ",", "len", "(", "train_games", ")", ",", "nb_epochs", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "        ", "exc_type", ",", "exc_value", ",", "exc_traceback", "=", "sys", ".", "exc_info", "(", ")", "\n", "logger", ".", "error", "(", "\"error: {}\"", ".", "format", "(", "e", ")", ")", "\n", "traceback", ".", "print_exception", "(", "\n", "exc_type", ",", "exc_value", ",", "exc_traceback", ",", "limit", "=", "None", ",", "file", "=", "sys", ".", "stdout", ")", "\n", "", "env", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.main.train_v2": [[294, 312], ["deepword.utils.eprint", "hp.set_hparam", "deepword.utils.eprint", "main.train"], "function", ["home.repos.pwc.inspect_result.yinxusen_deepword.deepword.utils.eprint", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.utils.eprint", "home.repos.pwc.inspect_result.yinxusen_deepword.agents.base_agent.BaseAgent.train"], ["", "def", "train_v2", "(", "hp", ",", "model_dir", ",", "game_dir", ",", "f_games", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Train DQN agents by proactively requesting description and inventory\n\n    max step per episode will be enlarged by 3-times.\n\n    see :py:func:`deepword.main.train`\n    \"\"\"", "\n", "\n", "assert", "\"game_episode_terminal_t\"", "in", "hp", ",", "\"cannot find game_episode_terminal_t in hp\"", "\n", "eprint", "(", "\"Requested game_episode_terminal_t: {}\"", ".", "format", "(", "\n", "hp", ".", "game_episode_terminal_t", ")", ")", "\n", "hp", ".", "set_hparam", "(", "'game_episode_terminal_t'", ",", "hp", ".", "game_episode_terminal_t", "*", "3", ")", "\n", "eprint", "(", "\"New game_episode_terminal_t: {}\"", ".", "format", "(", "hp", ".", "game_episode_terminal_t", ")", ")", "\n", "\n", "# use run_agent_v2 to manually request description and inventory", "\n", "train", "(", "hp", ",", "model_dir", ",", "game_dir", ",", "f_games", ",", "func_run_agent", "=", "run_agent_v2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.main.process_hp": [[314, 338], ["os.path.join", "os.path.isfile", "deepword.hparams.load_hparams", "vars"], "function", ["home.repos.pwc.inspect_result.yinxusen_deepword.deepword.hparams.load_hparams"], ["", "def", "process_hp", "(", "args", ")", "->", "HParams", ":", "\n", "    ", "\"\"\"\n    Load hyperparameters from three location\n    1. config file in `model_dir`\n    2. pre config files\n    3. cmd line args\n\n    Args:\n        args: cmd line args\n\n    Returns:\n        hyperparameters\n    \"\"\"", "\n", "\n", "fn_hparams", "=", "os", ".", "path", ".", "join", "(", "args", ".", "model_dir", ",", "\"hparams.json\"", ")", "\n", "if", "os", ".", "path", ".", "isfile", "(", "fn_hparams", ")", ":", "\n", "        ", "model_config_file", "=", "fn_hparams", "\n", "", "else", ":", "\n", "        ", "model_config_file", "=", "None", "\n", "\n", "", "hp", "=", "load_hparams", "(", "\n", "fn_model_config", "=", "model_config_file", ",", "cmd_args", "=", "vars", "(", "args", ")", ",", "\n", "fn_pre_config", "=", "args", ".", "config_file", ")", "\n", "return", "hp", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.main.process_train_dqn": [[347, 363], ["os.path.join", "os.path.isfile", "main.process_hp", "deepword.utils.setup_train_log", "deepword.utils.eprint", "main.train_v2", "main.train", "termcolor.colored"], "function", ["home.repos.pwc.inspect_result.yinxusen_deepword.deepword.main.process_hp", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.utils.setup_train_log", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.utils.eprint", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.main.train_v2", "home.repos.pwc.inspect_result.yinxusen_deepword.agents.base_agent.BaseAgent.train"], ["def", "process_train_dqn", "(", "args", ")", ":", "\n", "    ", "\"\"\"\n    Train DQN models\n    \"\"\"", "\n", "\n", "fn_hparams", "=", "os", ".", "path", ".", "join", "(", "args", ".", "model_dir", ",", "\"hparams.json\"", ")", "\n", "if", "os", ".", "path", ".", "isfile", "(", "fn_hparams", ")", ":", "\n", "        ", "eprint", "(", "colored", "(", "warning_hparams_exist", ",", "\"red\"", ",", "attrs", "=", "[", "\"bold\"", "]", ")", ")", "\n", "", "hp", "=", "process_hp", "(", "args", ")", "\n", "setup_train_log", "(", "args", ".", "model_dir", ")", "\n", "if", "args", ".", "request_obs_inv", ":", "\n", "        ", "train_v2", "(", "\n", "hp", ",", "args", ".", "model_dir", ",", "game_dir", "=", "args", ".", "game_path", ",", "f_games", "=", "args", ".", "f_games", ")", "\n", "", "else", ":", "\n", "        ", "train", "(", "\n", "hp", ",", "args", ".", "model_dir", ",", "game_dir", "=", "args", ".", "game_path", ",", "f_games", "=", "args", ".", "f_games", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.main.process_train_student": [[365, 378], ["os.path.join", "os.path.isfile", "main.process_hp", "deepword.utils.setup_train_log", "deepword.utils.learner_name2clazz", "deepword.utils.learner_name2clazz.", "learner_clazz.train", "deepword.utils.eprint", "termcolor.colored"], "function", ["home.repos.pwc.inspect_result.yinxusen_deepword.deepword.main.process_hp", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.utils.setup_train_log", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.utils.learner_name2clazz", "home.repos.pwc.inspect_result.yinxusen_deepword.agents.base_agent.BaseAgent.train", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.utils.eprint"], ["", "", "def", "process_train_student", "(", "args", ")", ":", "\n", "    ", "\"\"\"\n    Train student models\n    \"\"\"", "\n", "\n", "fn_hparams", "=", "os", ".", "path", ".", "join", "(", "args", ".", "model_dir", ",", "\"hparams.json\"", ")", "\n", "if", "os", ".", "path", ".", "isfile", "(", "fn_hparams", ")", ":", "\n", "        ", "eprint", "(", "colored", "(", "warning_hparams_exist", ",", "\"red\"", ",", "attrs", "=", "[", "\"bold\"", "]", ")", ")", "\n", "", "hp", "=", "process_hp", "(", "args", ")", "\n", "setup_train_log", "(", "args", ".", "model_dir", ")", "\n", "learner_clazz", "=", "learner_name2clazz", "(", "hp", ".", "learner_clazz", ")", "\n", "learner", "=", "learner_clazz", "(", "hp", ",", "args", ".", "model_dir", ",", "args", ".", "data_path", ")", "\n", "learner", ".", "train", "(", "n_epochs", "=", "args", ".", "n_epochs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.main.process_snn_input": [[380, 393], ["os.path.join", "os.path.isfile", "main.process_hp", "deepword.utils.setup_train_log", "deepword.utils.learner_name2clazz", "deepword.utils.learner_name2clazz.", "learner_clazz.preprocess_input", "deepword.utils.eprint", "termcolor.colored"], "function", ["home.repos.pwc.inspect_result.yinxusen_deepword.deepword.main.process_hp", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.utils.setup_train_log", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.utils.learner_name2clazz", "home.repos.pwc.inspect_result.yinxusen_deepword.students.snn_learner.SNNLearner.preprocess_input", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.utils.eprint"], ["", "def", "process_snn_input", "(", "args", ")", ":", "\n", "    ", "\"\"\"\n    generate snn input\n    \"\"\"", "\n", "\n", "fn_hparams", "=", "os", ".", "path", ".", "join", "(", "args", ".", "model_dir", ",", "\"hparams.json\"", ")", "\n", "if", "os", ".", "path", ".", "isfile", "(", "fn_hparams", ")", ":", "\n", "        ", "eprint", "(", "colored", "(", "warning_hparams_exist", ",", "\"red\"", ",", "attrs", "=", "[", "\"bold\"", "]", ")", ")", "\n", "", "hp", "=", "process_hp", "(", "args", ")", "\n", "setup_train_log", "(", "args", ".", "model_dir", ")", "\n", "learner_clazz", "=", "learner_name2clazz", "(", "hp", ".", "learner_clazz", ")", "\n", "learner", "=", "learner_clazz", "(", "hp", ",", "args", ".", "model_dir", ",", "args", ".", "data_path", ")", "\n", "learner", ".", "preprocess_input", "(", "data_dir", "=", "args", ".", "data_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.main.process_eval_student": [[395, 418], ["main.process_hp", "deepword.utils.learner_name2clazz", "deepword.utils.setup_eval_log", "deepword.eval_games.list_checkpoints", "deepword.utils.eprint", "deepword.utils.learner_name2clazz.", "learner_clazz.test", "deepword.utils.eprint", "len"], "function", ["home.repos.pwc.inspect_result.yinxusen_deepword.deepword.main.process_hp", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.utils.learner_name2clazz", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.utils.setup_eval_log", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.eval_games.list_checkpoints", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.utils.eprint", "home.repos.pwc.inspect_result.yinxusen_deepword.students.snn_learner.SNNLearner.test", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.utils.eprint"], ["", "def", "process_eval_student", "(", "args", ")", ":", "\n", "    ", "\"\"\"\n    Evaluate student models\n    \"\"\"", "\n", "\n", "hp", "=", "process_hp", "(", "args", ")", "\n", "assert", "hp", ".", "learner_clazz", "==", "\"SwagLearner\"", "or", "hp", ".", "learner_clazz", "==", "\"SNNLearner\"", "or", "hp", ".", "learner_clazz", "==", "\"NLULearner\"", "\n", "learner_clazz", "=", "learner_name2clazz", "(", "hp", ".", "learner_clazz", ")", "\n", "\n", "setup_eval_log", "(", "log_filename", "=", "None", ")", "\n", "steps", ",", "step2ckpt", "=", "list_checkpoints", "(", "\n", "args", ".", "model_dir", ",", "\n", "range_min", "=", "args", ".", "ckpt_range_min", ",", "range_max", "=", "args", ".", "ckpt_range_max", ")", "\n", "eprint", "(", "\"evaluate {} checkpoints\"", ".", "format", "(", "len", "(", "steps", ")", ")", ")", "\n", "\n", "for", "step", "in", "steps", "[", ":", ":", "-", "1", "]", ":", "\n", "        ", "tester", "=", "learner_clazz", "(", "\n", "hp", ",", "args", ".", "model_dir", ",", "train_data_dir", "=", "None", ",", "\n", "eval_data_path", "=", "args", ".", "data_path", ")", "\n", "acc", ",", "total", "=", "tester", ".", "test", "(", "restore_from", "=", "step2ckpt", "[", "step", "]", ")", "\n", "eprint", "(", "\"eval step: {}, acc: {}, total: {}\"", ".", "format", "(", "step", ",", "acc", ",", "total", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.main.process_eval_dqn": [[420, 447], ["main.process_hp", "deepword.utils.setup_eval_log", "logging.getLogger", "deepword.utils.load_game_files", "logging.getLogger.info", "deepword.eval_games.MultiGPUsEvalPlayer", "deepword.eval_games.FullDirEvalPlayer.evaluate", "len", "deepword.eval_games.LoopDogEvalPlayer", "deepword.eval_games.FullDirEvalPlayer.start", "deepword.eval_games.FullDirEvalPlayer", "deepword.eval_games.FullDirEvalPlayer.start", "ValueError"], "function", ["home.repos.pwc.inspect_result.yinxusen_deepword.deepword.main.process_hp", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.utils.setup_eval_log", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.utils.load_game_files", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.log.Logging.info", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.eval_games.MultiGPUsEvalPlayer.evaluate", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.eval_games.FullDirEvalPlayer.start", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.eval_games.FullDirEvalPlayer.start"], ["", "", "def", "process_eval_dqn", "(", "args", ")", ":", "\n", "    ", "\"\"\"\n    Evaluate dqn models\n    \"\"\"", "\n", "\n", "hp", "=", "process_hp", "(", "args", ")", "\n", "setup_eval_log", "(", "log_filename", "=", "None", ")", "\n", "logger", "=", "logging", ".", "getLogger", "(", "'eval-dqn'", ")", "\n", "eval_games", "=", "load_game_files", "(", "args", ".", "game_path", ",", "args", ".", "f_games", ")", "\n", "logger", ".", "info", "(", "\"load {} game files\"", ".", "format", "(", "len", "(", "eval_games", ")", ")", ")", "\n", "\n", "if", "args", ".", "eval_mode", "==", "\"eval\"", ":", "\n", "        ", "eval_player", "=", "MultiGPUsEvalPlayer", "(", "\n", "hp", ",", "args", ".", "model_dir", ",", "eval_games", ",", "args", ".", "n_gpus", ",", "args", ".", "load_best", ")", "\n", "eval_player", ".", "evaluate", "(", "\n", "restore_from", "=", "args", ".", "restore_from", ",", "debug", "=", "args", ".", "debug", ")", "\n", "", "elif", "args", ".", "eval_mode", "==", "\"dev-eval\"", ":", "\n", "        ", "eval_player", "=", "LoopDogEvalPlayer", "(", ")", "\n", "eval_player", ".", "start", "(", "\n", "hp", ",", "args", ".", "model_dir", ",", "eval_games", ",", "args", ".", "n_gpus", ",", "args", ".", "debug", ")", "\n", "", "elif", "args", ".", "eval_mode", "==", "\"full-eval\"", ":", "\n", "        ", "eval_player", "=", "FullDirEvalPlayer", "(", ")", "\n", "eval_player", ".", "start", "(", "\n", "hp", ",", "args", ".", "model_dir", ",", "eval_games", ",", "args", ".", "n_gpus", ",", "args", ".", "debug", ",", "\n", "range_min", "=", "args", ".", "ckpt_range_min", ",", "range_max", "=", "args", ".", "ckpt_range_max", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.main.process_gen_data": [[449, 495], ["main.process_hp", "deepword.utils.setup_eval_log", "deepword.utils.load_game_files", "deepword.utils.eprint", "deepword.utils.eprint", "deepword.utils.eprint", "process_hp.set_hparam", "process_hp.set_hparam", "deepword.utils.agent_name2clazz", "deepword.utils.agent_name2clazz.", "agent_clazz.eval", "os.path.basename", "process_hp.set_hparam", "deepword.eval_games.agent_collect_data_v2", "deepword.eval_games.agent_collect_data", "len", "sorted"], "function", ["home.repos.pwc.inspect_result.yinxusen_deepword.deepword.main.process_hp", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.utils.setup_eval_log", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.utils.load_game_files", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.utils.eprint", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.utils.eprint", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.utils.eprint", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.utils.agent_name2clazz", "home.repos.pwc.inspect_result.yinxusen_deepword.agents.base_agent.BaseAgent.eval", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.eval_games.agent_collect_data_v2", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.eval_games.agent_collect_data"], ["", "", "def", "process_gen_data", "(", "args", ")", ":", "\n", "    ", "\"\"\"\n    Generate training data from a teacher model\n    \"\"\"", "\n", "\n", "hp", "=", "process_hp", "(", "args", ")", "\n", "setup_eval_log", "(", "log_filename", "=", "None", ")", "\n", "\n", "game_files", "=", "load_game_files", "(", "args", ".", "game_path", ",", "args", ".", "f_games", ")", "\n", "\n", "eprint", "(", "\"load {} game files\"", ".", "format", "(", "len", "(", "game_files", ")", ")", ")", "\n", "game_names", "=", "[", "os", ".", "path", ".", "basename", "(", "fn", ")", "for", "fn", "in", "game_files", "]", "\n", "eprint", "(", "\"games for data generation: \\n{}\"", ".", "format", "(", "\n", "\"\\n\"", ".", "join", "(", "sorted", "(", "game_names", ")", ")", ")", ")", "\n", "\n", "# make sure epoch_size equals to replay_mem", "\n", "# if set, always use epoch_size;", "\n", "# otherwise, use replay_mem.", "\n", "# TODO: don't set replay_mem directly, because the replay_mem in cmd_args", "\n", "#   cannot reset replay_mem in hparams.json", "\n", "if", "args", ".", "epoch_size", "is", "None", ":", "\n", "        ", "args", ".", "epoch_size", "=", "hp", ".", "replay_mem", "\n", "", "else", ":", "\n", "        ", "hp", ".", "set_hparam", "(", "\"replay_mem\"", ",", "args", ".", "epoch_size", ")", "\n", "", "eprint", "(", "\"effective replay_mem: {}, epoch_size: {}\"", ".", "format", "(", "\n", "hp", ".", "replay_mem", ",", "args", ".", "epoch_size", ")", ")", "\n", "\n", "# need to compute policy at every step", "\n", "hp", ".", "set_hparam", "(", "\"always_compute_policy\"", ",", "True", ")", "\n", "hp", ".", "set_hparam", "(", "\"max_snapshot_to_keep\"", ",", "args", ".", "epoch_limit", ")", "\n", "assert", "hp", ".", "agent_clazz", "==", "\"TeacherAgent\"", "or", "hp", ".", "agent_clazz", "==", "\"DSQNZorkAgent\"", "or", "hp", ".", "agent_clazz", "==", "\"DSQNAgent\"", ",", "\"Not supported agent class\"", "\n", "\n", "agent_clazz", "=", "agent_name2clazz", "(", "hp", ".", "agent_clazz", ")", "\n", "agent", "=", "agent_clazz", "(", "hp", ",", "args", ".", "model_dir", ")", "\n", "agent", ".", "eval", "(", "load_best", "=", "args", ".", "load_best", ")", "\n", "\n", "if", "hp", ".", "agent_clazz", "==", "\"DSQNZorkAgent\"", ":", "\n", "        ", "agent_collect_data_v2", "(", "\n", "agent", ",", "game_files", ",", "hp", ".", "game_episode_terminal_t", ",", "\n", "args", ".", "epoch_size", ",", "args", ".", "epoch_limit", ",", "args", ".", "max_randomness", ")", "\n", "", "else", ":", "\n", "        ", "agent_collect_data", "(", "\n", "agent", ",", "game_files", ",", "hp", ".", "game_episode_terminal_t", ",", "\n", "args", ".", "epoch_size", ",", "args", ".", "epoch_limit", ",", "args", ".", "max_randomness", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.main.main": [[497, 521], ["deepword.utils.eprint", "time.sleep", "args.model_dir.rstrip", "open", "os.path.isdir", "os.mkdir", "main.process_train_dqn", "f.readlines", "main.process_train_student", "main.process_eval_student", "main.process_snn_input", "main.process_eval_dqn", "main.process_gen_data", "ValueError"], "function", ["home.repos.pwc.inspect_result.yinxusen_deepword.deepword.utils.eprint", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.main.process_train_dqn", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.main.process_train_student", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.main.process_eval_student", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.main.process_snn_input", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.main.process_eval_dqn", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.main.process_gen_data"], ["", "", "def", "main", "(", "args", ")", ":", "\n", "    ", "with", "open", "(", "conventions", ".", "logo_file", ")", "as", "f", ":", "\n", "        ", "logo", "=", "\"\"", ".", "join", "(", "f", ".", "readlines", "(", ")", ")", "\n", "", "eprint", "(", "logo", ")", "\n", "time", ".", "sleep", "(", "3", ")", "\n", "\n", "args", ".", "model_dir", "=", "args", ".", "model_dir", ".", "rstrip", "(", "'/'", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "args", ".", "model_dir", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "args", ".", "model_dir", ")", "\n", "\n", "", "if", "args", ".", "mode", "==", "\"train-dqn\"", ":", "\n", "        ", "process_train_dqn", "(", "args", ")", "\n", "", "elif", "args", ".", "mode", "==", "\"train-student\"", ":", "\n", "        ", "process_train_student", "(", "args", ")", "\n", "", "elif", "args", ".", "mode", "==", "\"eval-student\"", ":", "\n", "        ", "process_eval_student", "(", "args", ")", "\n", "", "elif", "args", ".", "mode", "==", "\"gen-snn\"", ":", "\n", "        ", "process_snn_input", "(", "args", ")", "\n", "", "elif", "args", ".", "mode", "==", "\"eval-dqn\"", ":", "\n", "        ", "process_eval_dqn", "(", "args", ")", "\n", "", "elif", "args", ".", "mode", "==", "\"gen-data\"", ":", "\n", "        ", "process_gen_data", "(", "args", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"please choose mode\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.action.ActionCollector.__init__": [[13, 42], ["deepword.log.Logging.__init__", "dict", "dict", "dict"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.models.drrn_modeling.PseudoSeq2SeqDRRN.__init__"], ["def", "__init__", "(", "\n", "self", ",", "tokenizer", ":", "Tokenizer", ",", "n_tokens", ":", "int", ",", "unk_val_id", ":", "int", ",", "\n", "padding_val_id", ":", "int", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        Args:\n            tokenizer: see :py:mod:`deepword.tokenizers`\n            n_tokens: max allowed number of tokens for all actions\n            unk_val_id: ID of the unknown token\n            padding_val_id: ID of the padding token\n        \"\"\"", "\n", "super", "(", "ActionCollector", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# collections of all actions and its indexed vectors", "\n", "self", ".", "_actions_base", ":", "Dict", "[", "str", ",", "List", "[", "str", "]", "]", "=", "dict", "(", ")", "\n", "self", ".", "_action_matrix_base", ":", "Dict", "[", "str", ",", "List", "[", "np", ".", "ndarray", "]", "]", "=", "dict", "(", ")", "\n", "self", ".", "_action_len_base", ":", "Dict", "[", "str", ",", "List", "[", "int", "]", "]", "=", "dict", "(", ")", "\n", "\n", "# metadata of the action collector", "\n", "self", ".", "_n_tokens", ":", "int", "=", "n_tokens", "\n", "self", ".", "_unk_val_id", ":", "int", "=", "unk_val_id", "\n", "self", ".", "_padding_val_id", ":", "int", "=", "padding_val_id", "\n", "self", ".", "_tokenizer", ":", "Tokenizer", "=", "tokenizer", "\n", "\n", "# current episode actions", "\n", "self", ".", "_action2idx", "=", "None", "\n", "self", ".", "_actions", "=", "None", "\n", "self", ".", "_curr_aid", "=", "0", "\n", "self", ".", "_curr_gid", "=", "None", "\n", "self", ".", "_action_matrix", "=", "None", "\n", "self", ".", "_action_len", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.action.ActionCollector._reset_episode_vars": [[43, 51], ["None"], "methods", ["None"], ["", "def", "_reset_episode_vars", "(", "self", ")", "->", "None", ":", "\n", "        ", "self", ".", "_action2idx", ":", "Dict", "[", "str", ",", "int", "]", "=", "{", "}", "\n", "self", ".", "_actions", ":", "List", "[", "str", "]", "=", "[", "]", "\n", "# aid always points to the next future action", "\n", "self", ".", "_curr_aid", ":", "int", "=", "0", "\n", "self", ".", "_curr_gid", ":", "Optional", "[", "str", "]", "=", "None", "\n", "self", ".", "_action_matrix", ":", "List", "[", "np", ".", "ndarray", "]", "=", "[", "]", "\n", "self", ".", "_action_len", ":", "List", "[", "int", "]", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.action.ActionCollector.add_new_episode": [[52, 78], ["action.ActionCollector._reset_episode_vars", "action.ActionCollector.info", "len", "dict", "action.ActionCollector.info", "enumerate"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.deepword.action.ActionCollector._reset_episode_vars", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.log.Logging.info", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.log.Logging.info"], ["", "def", "add_new_episode", "(", "self", ",", "gid", ":", "str", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        Add a new episode with game ID.\n\n        Args:\n            gid: game ID, a string that separate different games.\n        \"\"\"", "\n", "if", "gid", "==", "self", ".", "_curr_gid", ":", "\n", "            ", "return", "\n", "\n", "", "if", "self", ".", "_size", "!=", "0", "and", "self", ".", "_curr_gid", "is", "not", "None", ":", "\n", "            ", "self", ".", "_actions_base", "[", "self", ".", "_curr_gid", "]", "=", "self", ".", "_actions", "\n", "self", ".", "_action_matrix_base", "[", "self", ".", "_curr_gid", "]", "=", "self", ".", "_action_matrix", "\n", "self", ".", "_action_len_base", "[", "self", ".", "_curr_gid", "]", "=", "self", ".", "_action_len", "\n", "\n", "", "self", ".", "_reset_episode_vars", "(", ")", "\n", "self", ".", "_curr_gid", "=", "gid", "\n", "if", "self", ".", "_curr_gid", "in", "self", ".", "_actions_base", ":", "\n", "            ", "self", ".", "info", "(", "\"found existing episode: {}\"", ".", "format", "(", "self", ".", "_curr_gid", ")", ")", "\n", "self", ".", "_curr_aid", "=", "len", "(", "self", ".", "_actions_base", "[", "self", ".", "_curr_gid", "]", ")", "\n", "self", ".", "_actions", "=", "self", ".", "_actions_base", "[", "self", ".", "_curr_gid", "]", "\n", "self", ".", "_action_matrix", "=", "self", ".", "_action_matrix_base", "[", "self", ".", "_curr_gid", "]", "\n", "self", ".", "_action_len", "=", "self", ".", "_action_len_base", "[", "self", ".", "_curr_gid", "]", "\n", "self", ".", "_action2idx", "=", "dict", "(", "\n", "[", "(", "a", ",", "i", ")", "for", "(", "i", ",", "a", ")", "in", "enumerate", "(", "self", ".", "_actions", ")", "]", ")", "\n", "self", ".", "info", "(", "\"{} actions loaded\"", ".", "format", "(", "self", ".", "_size", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.action.ActionCollector._convert_action_to_ids": [[79, 86], ["action.ActionCollector._tokenizer.convert_tokens_to_ids", "min", "numpy.zeros", "action.ActionCollector._tokenizer.tokenize", "len"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.deepword.tokenizers.BertTokenizer.convert_tokens_to_ids", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.tokenizers.BertTokenizer.tokenize"], ["", "", "def", "_convert_action_to_ids", "(", "self", ",", "action", ":", "str", ")", "->", "Tuple", "[", "np", ".", "ndarray", ",", "int", "]", ":", "\n", "        ", "token_ids", "=", "self", ".", "_tokenizer", ".", "convert_tokens_to_ids", "(", "\n", "self", ".", "_tokenizer", ".", "tokenize", "(", "action", ")", ")", "\n", "action_len", "=", "min", "(", "self", ".", "_n_tokens", ",", "len", "(", "token_ids", ")", ")", "\n", "action_idx", "=", "np", ".", "zeros", "(", "self", ".", "_n_tokens", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "action_idx", "[", ":", "action_len", "]", "=", "token_ids", "[", ":", "action_len", "]", "\n", "return", "action_idx", ",", "action_len", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.action.ActionCollector.extend": [[87, 105], ["numpy.asarray", "mask_idx.append", "action.ActionCollector._convert_action_to_ids", "action.ActionCollector._action_len.append", "action.ActionCollector._action_matrix.append", "action.ActionCollector._actions.append"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.deepword.tree_memory.TreeMemory.append", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.action.ActionCollector._convert_action_to_ids", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.tree_memory.TreeMemory.append", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.tree_memory.TreeMemory.append", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.tree_memory.TreeMemory.append"], ["", "def", "extend", "(", "self", ",", "actions", ":", "List", "[", "str", "]", ")", "->", "np", ".", "ndarray", ":", "\n", "        ", "\"\"\"\n        Extend actions into ActionCollector.\n\n        Args:\n            actions: a list of actions for current episode of game-playing.\n        \"\"\"", "\n", "mask_idx", "=", "[", "]", "\n", "for", "a", "in", "actions", ":", "\n", "            ", "if", "a", "not", "in", "self", ".", "_action2idx", ":", "\n", "                ", "self", ".", "_action2idx", "[", "a", "]", "=", "self", ".", "_curr_aid", "\n", "action_idx", ",", "action_len", "=", "self", ".", "_convert_action_to_ids", "(", "a", ")", "\n", "self", ".", "_action_len", ".", "append", "(", "action_len", ")", "\n", "self", ".", "_action_matrix", ".", "append", "(", "action_idx", ")", "\n", "self", ".", "_actions", ".", "append", "(", "a", ")", "\n", "self", ".", "_curr_aid", "+=", "1", "\n", "", "mask_idx", ".", "append", "(", "self", ".", "_action2idx", "[", "a", "]", ")", "\n", "", "return", "np", ".", "asarray", "(", "mask_idx", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.action.ActionCollector.get_action_matrix": [[106, 122], ["numpy.asarray"], "methods", ["None"], ["", "def", "get_action_matrix", "(", "self", ",", "gid", ":", "Optional", "[", "str", "]", "=", "None", ")", "->", "np", ".", "ndarray", ":", "\n", "        ", "\"\"\"\n        Get action matrix for a game.\n\n        Args:\n            gid: the game ID. `None` falls back to current activated game.\n\n        Returns:\n            an array of actions, each action is a vector of its IDs to tokens\n             that are filled with padding in the end to reach the same token\n             size.\n        \"\"\"", "\n", "if", "gid", "is", "None", "or", "gid", "==", "self", ".", "_curr_gid", ":", "\n", "            ", "return", "self", ".", "action_matrix", "\n", "", "else", ":", "\n", "            ", "return", "np", ".", "asarray", "(", "self", ".", "_action_matrix_base", "[", "gid", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.action.ActionCollector.action_matrix": [[123, 129], ["numpy.asarray"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "action_matrix", "(", "self", ")", "->", "np", ".", "ndarray", ":", "\n", "        ", "\"\"\"\n        Current action matrix\n        \"\"\"", "\n", "return", "np", ".", "asarray", "(", "self", ".", "_action_matrix", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.action.ActionCollector.action2idx": [[130, 136], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "action2idx", "(", "self", ")", "->", "Dict", "[", "str", ",", "int", "]", ":", "\n", "        ", "\"\"\"\n        Current action to token IDs\n        \"\"\"", "\n", "return", "self", ".", "_action2idx", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.action.ActionCollector.get_action_len": [[137, 151], ["numpy.asarray"], "methods", ["None"], ["", "def", "get_action_len", "(", "self", ",", "gid", ":", "Optional", "[", "str", "]", "=", "None", ")", "->", "np", ".", "ndarray", ":", "\n", "        ", "\"\"\"\n        Get action lengths for a game\n\n        Args:\n            gid: game ID, `None` falls back to current episode of game.\n\n        Returns:\n            an array of int, each element is a length for that action\n        \"\"\"", "\n", "if", "gid", "is", "None", "or", "gid", "==", "self", ".", "_curr_gid", ":", "\n", "            ", "return", "self", ".", "action_len", "\n", "", "else", ":", "\n", "            ", "return", "np", ".", "asarray", "(", "self", ".", "_action_len_base", "[", "gid", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.action.ActionCollector.action_len": [[152, 158], ["numpy.asarray"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "action_len", "(", "self", ")", "->", "np", ".", "ndarray", ":", "\n", "        ", "\"\"\"\n        Current action lengths\n        \"\"\"", "\n", "return", "np", ".", "asarray", "(", "self", ".", "_action_len", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.action.ActionCollector.get_actions": [[159, 173], ["None"], "methods", ["None"], ["", "def", "get_actions", "(", "self", ",", "gid", ":", "Optional", "[", "str", "]", "=", "None", ")", "->", "List", "[", "str", "]", ":", "\n", "        ", "\"\"\"\n        Get all actions for a game.\n\n        Args:\n            gid: game ID, `None` falls back to current episode of game.\n\n        Returns:\n            a list of actions in string\n        \"\"\"", "\n", "if", "gid", "is", "None", "or", "gid", "==", "self", ".", "_curr_gid", ":", "\n", "            ", "return", "self", ".", "_actions", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "_actions_base", "[", "gid", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.action.ActionCollector.get_game_ids": [[174, 179], ["list", "action.ActionCollector._actions_base.keys"], "methods", ["None"], ["", "", "def", "get_game_ids", "(", "self", ")", "->", "List", "[", "str", "]", ":", "\n", "        ", "\"\"\"\n        Get all game IDs in this ActionCollector.\n        \"\"\"", "\n", "return", "list", "(", "self", ".", "_actions_base", ".", "keys", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.action.ActionCollector.actions": [[180, 186], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "actions", "(", "self", ")", "->", "List", "[", "str", "]", ":", "\n", "        ", "\"\"\"\n        Current actions in string.\n        \"\"\"", "\n", "return", "self", ".", "_actions", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.action.ActionCollector._size": [[187, 190], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "_size", "(", "self", ")", "->", "int", ":", "\n", "        ", "return", "self", ".", "_curr_aid", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.action.ActionCollector.save_actions": [[191, 207], ["list", "list", "numpy.savez", "action.ActionCollector._actions_base.keys", "action.ActionCollector._actions_base.values"], "methods", ["None"], ["", "def", "save_actions", "(", "self", ",", "path", ":", "str", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        Save all actions to a path as a npz file.\n\n        Args:\n            path: a npz path to save\n        \"\"\"", "\n", "if", "self", ".", "_size", "!=", "0", "and", "self", ".", "_curr_gid", "is", "not", "None", ":", "\n", "            ", "self", ".", "_actions_base", "[", "self", ".", "_curr_gid", "]", "=", "self", ".", "_actions", "\n", "", "actions_base_keys", "=", "list", "(", "self", ".", "_actions_base", ".", "keys", "(", ")", ")", "\n", "actions_base_vals", "=", "list", "(", "self", ".", "_actions_base", ".", "values", "(", ")", ")", "\n", "np", ".", "savez", "(", "\n", "path", ",", "\n", "actions_base_keys", "=", "actions_base_keys", ",", "\n", "actions_base_vals", "=", "actions_base_vals", ",", "\n", "action_matrix", "=", "[", "self", ".", "_action_matrix_base", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.action.ActionCollector.load_actions": [[208, 222], ["numpy.load", "dict", "zip", "action.ActionCollector.add_new_episode", "action.ActionCollector.extend", "list", "list"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.deepword.floor_plan.FloorPlanCollector.add_new_episode", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.floor_plan.FloorPlanCollector.extend"], ["", "def", "load_actions", "(", "self", ",", "path", ":", "str", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        Load all actions in this ActionCollector\n\n        Args:\n            path: a path to a npz file.\n        \"\"\"", "\n", "saved", "=", "np", ".", "load", "(", "path", ",", "allow_pickle", "=", "True", ")", "\n", "actions_base", "=", "dict", "(", "\n", "zip", "(", "list", "(", "saved", "[", "\"actions_base_keys\"", "]", ")", ",", "\n", "list", "(", "saved", "[", "\"actions_base_vals\"", "]", ")", ")", ")", "\n", "for", "gid", "in", "actions_base", ":", "\n", "            ", "self", ".", "add_new_episode", "(", "gid", ")", "\n", "self", ".", "extend", "(", "actions_base", "[", "gid", "]", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.dependency_parser.DependencyParserReorder.__init__": [[19, 32], ["deepword.log.Logging.__init__", "nltk.parse.corenlp.CoreNLPDependencyParser", "dict"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.models.drrn_modeling.PseudoSeq2SeqDRRN.__init__"], ["def", "__init__", "(", "self", ",", "padding_val", ":", "str", ",", "stride_len", ":", "int", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        Args:\n            padding_val: padding token, e.g. '[PAD]' or 'O'\n            stride_len: CNN stride len\n        \"\"\"", "\n", "super", "(", "DependencyParserReorder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# be sure of starting CoreNLP server first", "\n", "self", ".", "parser", "=", "CoreNLPDependencyParser", "(", ")", "\n", "# use dict to avoid parse the same sentences.", "\n", "self", ".", "parsed_sentences", ":", "Dict", "[", "str", ",", "str", "]", "=", "dict", "(", ")", "\n", "self", ".", "sep_sent", "=", "(", "\n", "\" \"", "+", "\" \"", ".", "join", "(", "[", "padding_val", "]", "*", "stride_len", ")", "+", "\" \"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.dependency_parser.DependencyParserReorder._reorder_sent": [[33, 44], ["next().tree", "dependency_parser.DependencyParserReorder.sep_sent.join", "next", "next().tree.subtrees", "dependency_parser.DependencyParserReorder.parser.raw_parse", "head.label", "child.label", "type"], "methods", ["None"], ["", "def", "_reorder_sent", "(", "self", ",", "sent", ":", "str", ")", "->", "str", ":", "\n", "        ", "\"\"\"\n        Use dependency parser to reorder a sentence.\n        \"\"\"", "\n", "tree", "=", "next", "(", "self", ".", "parser", ".", "raw_parse", "(", "sent", ")", ")", ".", "tree", "(", ")", "\n", "t_labels", "=", "(", "[", "\n", "[", "head", ".", "label", "(", ")", "]", "+", "\n", "[", "child", "if", "type", "(", "child", ")", "is", "str", "else", "child", ".", "label", "(", ")", "for", "child", "in", "head", "]", "\n", "for", "head", "in", "tree", ".", "subtrees", "(", ")", "]", ")", "\n", "t_str", "=", "[", "\" \"", ".", "join", "(", "labels", ")", "for", "labels", "in", "t_labels", "]", "\n", "return", "self", ".", "sep_sent", ".", "join", "(", "t_str", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.dependency_parser.DependencyParserReorder._reorder_block": [[45, 60], ["list", "dependency_parser.DependencyParserReorder.sep_sent.join", "filter", "tree_strs.append", "nltk.sent_tokenize", "dependency_parser.DependencyParserReorder._reorder_sent", "dependency_parser.DependencyParserReorder.info", "dependency_parser.DependencyParserReorder.info"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.deepword.tree_memory.TreeMemory.append", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.dependency_parser.DependencyParserReorder._reorder_sent", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.log.Logging.info", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.log.Logging.info"], ["", "def", "_reorder_block", "(", "self", ",", "master", ":", "str", ")", "->", "str", ":", "\n", "        ", "\"\"\"\n        Use dependency parser to reorder a paragraph.\n        \"\"\"", "\n", "sent_list", "=", "list", "(", "filter", "(", "lambda", "sent", ":", "sent", "!=", "\"\"", ",", "sent_tokenize", "(", "master", ")", ")", ")", "\n", "tree_strs", "=", "[", "]", "\n", "for", "s", "in", "sent_list", ":", "\n", "            ", "if", "s", "not", "in", "self", ".", "parsed_sentences", ":", "\n", "                ", "t_str", "=", "self", ".", "_reorder_sent", "(", "s", ")", "\n", "self", ".", "parsed_sentences", "[", "s", "]", "=", "t_str", "\n", "self", ".", "info", "(", "\"parse {} into {}\"", ".", "format", "(", "s", ",", "t_str", ")", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "info", "(", "\"found parsed {}\"", ".", "format", "(", "s", ")", ")", "\n", "", "tree_strs", ".", "append", "(", "self", ".", "parsed_sentences", "[", "s", "]", ")", "\n", "", "return", "self", ".", "sep_sent", ".", "join", "(", "tree_strs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.dependency_parser.DependencyParserReorder.reorder": [[61, 72], ["map", "map", "filter", "l.lower", "master.split", "dependency_parser.DependencyParserReorder._reorder_block", "dependency_parser.DependencyParserReorder.sep_sent.join", "l.strip"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.deepword.dependency_parser.DependencyParserReorder._reorder_block"], ["", "def", "reorder", "(", "self", ",", "master", ":", "str", ")", "->", "str", ":", "\n", "        ", "\"\"\"\n        Use dependency parser to reorder a paragraph.\n        \"\"\"", "\n", "if", "master", "==", "\"\"", ":", "\n", "            ", "return", "master", "\n", "", "lines", "=", "map", "(", "lambda", "l", ":", "l", ".", "lower", "(", ")", ",", "\n", "filter", "(", "lambda", "l", ":", "l", ".", "strip", "(", ")", "!=", "\"\"", ",", "master", ".", "split", "(", "\"\\n\"", ")", ")", ")", "\n", "reordered_lines", "=", "map", "(", "lambda", "l", ":", "self", ".", "_reorder_block", "(", "l", ")", ",", "lines", ")", "\n", "return", "(", "self", ".", "sep_sent", "+", "self", ".", "sep_sent", ".", "join", "(", "reordered_lines", ")", "+", "\n", "self", ".", "sep_sent", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.floor_plan.FloorPlanCollector.__init__": [[13, 23], ["deepword.log.Logging.__init__"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.models.drrn_modeling.PseudoSeq2SeqDRRN.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "FloorPlanCollector", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# collections of all actions and its indexed vectors", "\n", "self", ".", "fp_base", "=", "{", "}", "\n", "self", ".", "navi_base", "=", "{", "}", "\n", "\n", "# current episode actions", "\n", "self", ".", "curr_fp", "=", "{", "}", "\n", "self", ".", "curr_navi_to_kitchen", "=", "{", "}", "\n", "self", ".", "curr_eid", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.floor_plan.FloorPlanCollector.init": [[24, 28], ["None"], "methods", ["None"], ["", "def", "init", "(", "self", ")", ":", "\n", "        ", "self", ".", "curr_fp", "=", "{", "}", "\n", "self", ".", "curr_navi_to_kitchen", "=", "{", "}", "\n", "self", ".", "curr_eid", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.floor_plan.FloorPlanCollector.add_new_episode": [[29, 56], ["floor_plan.FloorPlanCollector.init", "floor_plan.FloorPlanCollector.fp_base[].update", "floor_plan.FloorPlanCollector.navi_base[].update", "floor_plan.FloorPlanCollector.info", "floor_plan.FloorPlanCollector.info", "floor_plan.FloorPlanCollector.info", "len", "len"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.agents.cores.TabularCore.init", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.sum_tree.SumTree.update", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.sum_tree.SumTree.update", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.log.Logging.info", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.log.Logging.info", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.log.Logging.info"], ["", "def", "add_new_episode", "(", "self", ",", "eid", ")", ":", "\n", "        ", "if", "eid", "==", "self", ".", "curr_eid", ":", "\n", "# self.info(\"continue current episode: {}\".format(eid))", "\n", "            ", "return", "\n", "\n", "# self.info(\"add new episode in floor plan: {}\".format(eid))", "\n", "\n", "", "if", "self", ".", "curr_eid", "is", "not", "None", ":", "\n", "            ", "if", "self", ".", "curr_eid", "not", "in", "self", ".", "fp_base", ":", "\n", "                ", "self", ".", "fp_base", "[", "self", ".", "curr_eid", "]", "=", "{", "}", "\n", "", "self", ".", "fp_base", "[", "self", ".", "curr_eid", "]", ".", "update", "(", "self", ".", "curr_fp", ")", "\n", "\n", "if", "self", ".", "curr_eid", "not", "in", "self", ".", "navi_base", ":", "\n", "                ", "self", ".", "navi_base", "[", "self", ".", "curr_eid", "]", "=", "{", "}", "\n", "", "self", ".", "navi_base", "[", "self", ".", "curr_eid", "]", ".", "update", "(", "self", ".", "curr_navi_to_kitchen", ")", "\n", "\n", "", "self", ".", "init", "(", ")", "\n", "self", ".", "curr_eid", "=", "eid", "\n", "if", "self", ".", "curr_eid", "in", "self", ".", "fp_base", ":", "\n", "            ", "self", ".", "info", "(", "\"found existing episode: {}\"", ".", "format", "(", "self", ".", "curr_eid", ")", ")", "\n", "self", ".", "curr_fp", "=", "self", ".", "fp_base", "[", "self", ".", "curr_eid", "]", "\n", "self", ".", "curr_navi_to_kitchen", "=", "self", ".", "navi_base", "[", "self", ".", "curr_eid", "]", "\n", "self", ".", "info", "(", "\"{} floor paths loaded\"", ".", "format", "(", "len", "(", "self", ".", "curr_fp", ")", ")", ")", "\n", "self", ".", "info", "(", "\"{} navigation to kitchen paths loaded\"", ".", "format", "(", "\n", "len", "(", "self", ".", "curr_navi_to_kitchen", ")", ")", ")", "\n", "", "else", ":", "\n", "            ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.floor_plan.FloorPlanCollector.extend": [[57, 73], ["floor_plan.FloorPlanCollector.error"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.deepword.log.Logging.error"], ["", "", "def", "extend", "(", "self", ",", "fps", ")", ":", "\n", "        ", "for", "fp", "in", "fps", ":", "\n", "            ", "p1", ",", "d", ",", "p2", "=", "fp", "\n", "if", "p1", "not", "in", "self", ".", "curr_fp", ":", "\n", "                ", "self", ".", "curr_fp", "[", "p1", "]", "=", "{", "}", "\n", "", "if", "d", "not", "in", "self", ".", "curr_fp", "[", "p1", "]", ":", "\n", "# self.info(\"find new path: {} + {} -> {}\".format(p1, d, p2))", "\n", "                ", "self", ".", "curr_fp", "[", "p1", "]", "[", "d", "]", "=", "p2", "\n", "", "else", ":", "\n", "                ", "if", "p2", "!=", "self", ".", "curr_fp", "[", "p1", "]", "[", "d", "]", ":", "\n", "                    ", "self", ".", "error", "(", "\n", "\"mismatch floor plan: {} + {} -> {},\"", "\n", "\" change to {}\"", ".", "format", "(", "\n", "p1", ",", "d", ",", "self", ".", "curr_fp", "[", "p1", "]", "[", "d", "]", ",", "p2", ")", ")", "\n", "", "else", ":", "\n", "                    ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.floor_plan.FloorPlanCollector.get_map": [[74, 78], ["dict"], "methods", ["None"], ["", "", "", "", "def", "get_map", "(", "self", ",", "room", ")", ":", "\n", "        ", "if", "room", "is", "None", "or", "room", "not", "in", "self", ".", "curr_fp", ":", "\n", "            ", "return", "dict", "(", ")", "\n", "", "return", "self", ".", "curr_fp", "[", "room", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.floor_plan.FloorPlanCollector.route_to_room": [[79, 100], ["fp[].items", "cls.route_to_room"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.deepword.floor_plan.FloorPlanCollector.route_to_room"], ["", "@", "classmethod", "\n", "def", "route_to_room", "(", "cls", ",", "ss", ",", "tt", ",", "fp", ",", "visited", ")", ":", "\n", "        ", "\"\"\"\n        find the fastest route to a target room from a given room using DFS.\n        :param ss: start room\n        :param tt: target room\n        :param fp: floor plan\n        :param visited: initialized by []\n        :return: directions, rooms\n        \"\"\"", "\n", "if", "ss", "not", "in", "fp", ":", "\n", "            ", "return", "None", "\n", "", "if", "ss", "==", "tt", ":", "\n", "            ", "return", "[", "]", ",", "[", "]", "\n", "", "for", "d", ",", "room", "in", "fp", "[", "ss", "]", ".", "items", "(", ")", ":", "\n", "            ", "if", "room", "!=", "ss", "and", "room", "not", "in", "visited", ":", "\n", "                ", "search_level", "=", "cls", ".", "route_to_room", "(", "\n", "room", ",", "tt", ",", "fp", ",", "visited", "+", "[", "ss", "]", ")", "\n", "if", "search_level", "is", "not", "None", ":", "\n", "                    ", "return", "[", "d", "]", "+", "search_level", "[", "0", "]", ",", "[", "room", "]", "+", "search_level", "[", "1", "]", "\n", "", "", "", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.floor_plan.FloorPlanCollector.route_to_kitchen": [[101, 107], ["floor_plan.FloorPlanCollector.route_to_room", "len"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.deepword.floor_plan.FloorPlanCollector.route_to_room"], ["", "def", "route_to_kitchen", "(", "self", ",", "room", ")", ":", "\n", "        ", "route", "=", "self", ".", "route_to_room", "(", "\n", "ss", "=", "room", ",", "tt", "=", "\"kitchen\"", ",", "fp", "=", "self", ".", "curr_fp", ",", "visited", "=", "[", "]", ")", "\n", "if", "route", "is", "not", "None", "and", "len", "(", "route", "[", "0", "]", ")", "==", "0", ":", "\n", "            ", "return", "None", "\n", "", "return", "route", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.floor_plan.FloorPlanCollector.save_fps": [[108, 116], ["numpy.savez", "list", "list", "floor_plan.FloorPlanCollector.fp_base.items", "floor_plan.FloorPlanCollector.navi_base.items"], "methods", ["None"], ["", "def", "save_fps", "(", "self", ",", "path", ")", ":", "\n", "        ", "if", "self", ".", "curr_eid", "is", "not", "None", ":", "\n", "            ", "self", ".", "fp_base", "[", "self", ".", "curr_eid", "]", "=", "self", ".", "curr_fp", "\n", "", "if", "self", ".", "curr_navi_to_kitchen", "is", "not", "None", ":", "\n", "            ", "self", ".", "navi_base", "[", "self", ".", "curr_eid", "]", "=", "self", ".", "curr_navi_to_kitchen", "\n", "", "np", ".", "savez", "(", "\n", "path", ",", "fp_base", "=", "list", "(", "self", ".", "fp_base", ".", "items", "(", ")", ")", ",", "\n", "navi_base", "=", "list", "(", "self", ".", "navi_base", ".", "items", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.floor_plan.FloorPlanCollector.load_fps": [[117, 126], ["numpy.load", "dict", "floor_plan.FloorPlanCollector.fp_base.update", "dict", "floor_plan.FloorPlanCollector.navi_base.update", "floor_plan.FloorPlanCollector.warning"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.deepword.sum_tree.SumTree.update", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.sum_tree.SumTree.update", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.log.Logging.warning"], ["", "def", "load_fps", "(", "self", ",", "path", ")", ":", "\n", "        ", "saved", "=", "np", ".", "load", "(", "path", ",", "allow_pickle", "=", "True", ")", "\n", "fp_base", "=", "dict", "(", "saved", "[", "\"fp_base\"", "]", ")", "\n", "self", ".", "fp_base", ".", "update", "(", "fp_base", ")", "\n", "try", ":", "\n", "            ", "navi_base", "=", "dict", "(", "saved", "[", "\"navi_base\"", "]", ")", "\n", "self", ".", "navi_base", ".", "update", "(", "navi_base", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "            ", "self", ".", "warning", "(", "\"loading navi failed: \\n{}\"", ".", "format", "(", "e", ")", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.tokenizers.Tokenizer.vocab": [[19, 29], ["NotImplementedError"], "methods", ["None"], ["@", "property", "\n", "def", "vocab", "(", "self", ")", "->", "Dict", "[", "str", ",", "int", "]", ":", "\n", "        ", "\"\"\"\n        get the vocabulary\n\n        Returns:\n            map from tokens to positions (ids)\n        \"\"\"", "\n", "\n", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.tokenizers.Tokenizer.inv_vocab": [[30, 40], ["NotImplementedError"], "methods", ["None"], ["", "@", "property", "\n", "def", "inv_vocab", "(", "self", ")", "->", "Dict", "[", "int", ",", "str", "]", ":", "\n", "        ", "\"\"\"\n        inverse of vocabulary\n\n        Returns:\n            map from positions (ids) to tokens\n        \"\"\"", "\n", "\n", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.tokenizers.Tokenizer.tokenize": [[41, 53], ["NotImplementedError"], "methods", ["None"], ["", "def", "tokenize", "(", "self", ",", "text", ":", "str", ")", "->", "List", "[", "str", "]", ":", "\n", "        ", "\"\"\"\n        tokenize a text into a list of tokens\n\n        Args:\n            text: a string to tokenize\n\n        Returns:\n            a list of tokens\n        \"\"\"", "\n", "\n", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.tokenizers.Tokenizer.de_tokenize": [[54, 66], ["NotImplementedError"], "methods", ["None"], ["", "def", "de_tokenize", "(", "self", ",", "ids", ":", "List", "[", "int", "]", ")", "->", "str", ":", "\n", "        ", "\"\"\"\n        turn a list of ids\n\n        Args:\n            ids: ids of tokens\n\n        Returns:\n            a string\n        \"\"\"", "\n", "\n", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.tokenizers.Tokenizer.convert_tokens_to_ids": [[67, 79], ["NotImplementedError"], "methods", ["None"], ["", "def", "convert_tokens_to_ids", "(", "self", ",", "tokens", ":", "List", "[", "str", "]", ")", "->", "List", "[", "int", "]", ":", "\n", "        ", "\"\"\"\n        convert tokens into ids\n\n        Args:\n            tokens: a list of tokens\n\n        Returns:\n            a list of ids\n        \"\"\"", "\n", "\n", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.tokenizers.Tokenizer.convert_ids_to_tokens": [[80, 92], ["NotImplementedError"], "methods", ["None"], ["", "def", "convert_ids_to_tokens", "(", "self", ",", "ids", ":", "List", "[", "int", "]", ")", "->", "List", "[", "str", "]", ":", "\n", "        ", "\"\"\"\n        convert ids to tokens\n\n        Args:\n            ids: a list of ids\n\n        Returns:\n            a list of tokens\n        \"\"\"", "\n", "\n", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.tokenizers.NLTKTokenizer.__init__": [[99, 120], ["deepword.utils.load_vocab", "deepword.utils.get_token2idx", "dict", "dict", "zip", "tokenizers.NLTKTokenizer._s2c.values", "tokenizers.NLTKTokenizer._s2c.keys", "w.lower", "tokenizers.NLTKTokenizer._vocab.items"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.deepword.utils.load_vocab", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.utils.get_token2idx"], ["def", "__init__", "(", "self", ",", "vocab_file", ",", "do_lower_case", ")", ":", "\n", "        ", "self", ".", "_special_tokens", "=", "[", "\n", "conventions", ".", "nltk_unk_token", ",", "\n", "conventions", ".", "nltk_padding_token", ",", "\n", "conventions", ".", "nltk_sos_token", ",", "\n", "conventions", ".", "nltk_eos_token", "]", "\n", "self", ".", "_inv_vocab", "=", "load_vocab", "(", "vocab_file", ")", "\n", "if", "do_lower_case", ":", "\n", "            ", "self", ".", "_inv_vocab", "=", "[", "\n", "w", ".", "lower", "(", ")", "if", "w", "not", "in", "self", ".", "_special_tokens", "else", "w", "\n", "for", "w", "in", "self", ".", "_inv_vocab", "]", "\n", "", "self", ".", "_do_lower_case", "=", "do_lower_case", "\n", "self", ".", "_vocab", "=", "get_token2idx", "(", "self", ".", "_inv_vocab", ")", "\n", "self", ".", "_inv_vocab", "=", "dict", "(", "[", "(", "v", ",", "k", ")", "for", "k", ",", "v", "in", "self", ".", "_vocab", ".", "items", "(", ")", "]", ")", "\n", "self", ".", "_unk_val_id", "=", "self", ".", "_vocab", "[", "conventions", ".", "nltk_unk_token", "]", "\n", "self", ".", "_s2c", "=", "{", "\n", "conventions", ".", "nltk_unk_token", ":", "\"U\"", ",", "\n", "conventions", ".", "nltk_padding_token", ":", "\"O\"", ",", "\n", "conventions", ".", "nltk_sos_token", ":", "\"S\"", ",", "\n", "conventions", ".", "nltk_eos_token", ":", "\"E\"", "}", "\n", "self", ".", "_c2s", "=", "dict", "(", "zip", "(", "self", ".", "_s2c", ".", "values", "(", ")", ",", "self", ".", "_s2c", ".", "keys", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.tokenizers.NLTKTokenizer.vocab": [[121, 124], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "vocab", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_vocab", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.tokenizers.NLTKTokenizer.inv_vocab": [[125, 128], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "inv_vocab", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_inv_vocab", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.tokenizers.NLTKTokenizer.convert_tokens_to_ids": [[129, 132], ["tokenizers.NLTKTokenizer._vocab.get"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.students.student_learner.CMD.get"], ["", "def", "convert_tokens_to_ids", "(", "self", ",", "tokens", ")", ":", "\n", "        ", "indexed", "=", "[", "self", ".", "_vocab", ".", "get", "(", "t", ",", "self", ".", "_unk_val_id", ")", "for", "t", "in", "tokens", "]", "\n", "return", "indexed", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.tokenizers.NLTKTokenizer.convert_ids_to_tokens": [[133, 136], ["None"], "methods", ["None"], ["", "def", "convert_ids_to_tokens", "(", "self", ",", "ids", ")", ":", "\n", "        ", "tokens", "=", "[", "self", ".", "_inv_vocab", "[", "i", "]", "for", "i", "in", "ids", "]", "\n", "return", "tokens", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.tokenizers.NLTKTokenizer.tokenize": [[137, 153], ["any", "nltk.word_tokenize", "nltk.word_tokenize", "new_txt.replace.replace.replace", "t.lower"], "methods", ["None"], ["", "def", "tokenize", "(", "self", ",", "text", ")", ":", "\n", "        ", "if", "any", "(", "[", "sc", "in", "text", "for", "sc", "in", "self", ".", "_special_tokens", "]", ")", ":", "\n", "            ", "new_txt", "=", "text", "\n", "for", "sc", "in", "self", ".", "_special_tokens", ":", "\n", "                ", "new_txt", "=", "new_txt", ".", "replace", "(", "sc", ",", "self", ".", "_s2c", "[", "sc", "]", ")", "\n", "", "tokens", "=", "word_tokenize", "(", "new_txt", ")", "\n", "tokens", "=", "[", "self", ".", "_c2s", "[", "t", "]", "if", "t", "in", "self", ".", "_c2s", "else", "t", "for", "t", "in", "tokens", "]", "\n", "", "else", ":", "\n", "            ", "tokens", "=", "word_tokenize", "(", "text", ")", "\n", "\n", "", "if", "self", ".", "_do_lower_case", ":", "\n", "            ", "return", "[", "\n", "t", ".", "lower", "(", ")", "if", "t", "not", "in", "self", ".", "_special_tokens", "else", "t", "\n", "for", "t", "in", "tokens", "]", "\n", "", "else", ":", "\n", "            ", "return", "tokens", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.tokenizers.NLTKTokenizer.de_tokenize": [[154, 159], ["filter", "tokenizers.NLTKTokenizer.convert_ids_to_tokens"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.deepword.tokenizers.BertTokenizer.convert_ids_to_tokens"], ["", "", "def", "de_tokenize", "(", "self", ",", "ids", ":", "List", "[", "int", "]", ")", "->", "str", ":", "\n", "        ", "res", "=", "\" \"", ".", "join", "(", "\n", "filter", "(", "lambda", "t", ":", "t", "not", "in", "self", ".", "_special_tokens", ",", "\n", "self", ".", "convert_ids_to_tokens", "(", "ids", ")", ")", ")", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.tokenizers.LegacyZorkTokenizer.__init__": [[167, 171], ["tokenizers.NLTKTokenizer.__init__", "str.maketrans"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.models.drrn_modeling.PseudoSeq2SeqDRRN.__init__"], ["def", "__init__", "(", "self", ",", "vocab_file", ")", ":", "\n", "        ", "super", "(", "LegacyZorkTokenizer", ",", "self", ")", ".", "__init__", "(", "\n", "vocab_file", ",", "do_lower_case", "=", "True", ")", "\n", "self", ".", "empty_trans_table", "=", "str", ".", "maketrans", "(", "\"\"", ",", "\"\"", ",", "string", ".", "punctuation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.tokenizers.LegacyZorkTokenizer.tokenize": [[172, 176], ["tokenizers.NLTKTokenizer.tokenize", "list", "text.translate", "filter", "t.isalpha"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.deepword.tokenizers.BertTokenizer.tokenize"], ["", "def", "tokenize", "(", "self", ",", "text", ")", ":", "\n", "        ", "tokens", "=", "super", "(", "LegacyZorkTokenizer", ",", "self", ")", ".", "tokenize", "(", "\n", "text", ".", "translate", "(", "self", ".", "empty_trans_table", ")", ")", "\n", "return", "list", "(", "filter", "(", "lambda", "t", ":", "t", ".", "isalpha", "(", ")", ",", "tokens", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.tokenizers.BertTokenizer.__init__": [[183, 193], ["bert.tokenization.FullTokenizer"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "vocab_file", ",", "do_lower_case", ")", ":", "\n", "        ", "self", ".", "tokenizer", "=", "BertTok", "(", "vocab_file", ",", "do_lower_case", ")", "\n", "self", ".", "_special_tokens", "=", "[", "\n", "conventions", ".", "bert_unk_token", ",", "\n", "conventions", ".", "bert_padding_token", ",", "\n", "conventions", ".", "bert_cls_token", ",", "\n", "conventions", ".", "bert_sep_token", ",", "\n", "conventions", ".", "bert_mask_token", ",", "\n", "conventions", ".", "bert_sos_token", ",", "\n", "conventions", ".", "bert_eos_token", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.tokenizers.BertTokenizer.vocab": [[194, 197], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "vocab", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "tokenizer", ".", "vocab", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.tokenizers.BertTokenizer.inv_vocab": [[198, 201], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "inv_vocab", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "tokenizer", ".", "inv_vocab", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.tokenizers.BertTokenizer.convert_tokens_to_ids": [[202, 204], ["tokenizers.BertTokenizer.tokenizer.convert_tokens_to_ids"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.deepword.tokenizers.BertTokenizer.convert_tokens_to_ids"], ["", "def", "convert_tokens_to_ids", "(", "self", ",", "tokens", ")", ":", "\n", "        ", "return", "self", ".", "tokenizer", ".", "convert_tokens_to_ids", "(", "tokens", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.tokenizers.BertTokenizer.convert_ids_to_tokens": [[205, 207], ["tokenizers.BertTokenizer.tokenizer.convert_ids_to_tokens"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.deepword.tokenizers.BertTokenizer.convert_ids_to_tokens"], ["", "def", "convert_ids_to_tokens", "(", "self", ",", "ids", ")", ":", "\n", "        ", "return", "self", ".", "tokenizer", ".", "convert_ids_to_tokens", "(", "ids", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.tokenizers.BertTokenizer.de_tokenize": [[208, 214], ["res.replace.replace.replace", "filter", "tokenizers.BertTokenizer.convert_ids_to_tokens"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.deepword.tokenizers.BertTokenizer.convert_ids_to_tokens"], ["", "def", "de_tokenize", "(", "self", ",", "ids", ")", ":", "\n", "        ", "res", "=", "\" \"", ".", "join", "(", "\n", "filter", "(", "lambda", "t", ":", "t", "not", "in", "self", ".", "_special_tokens", ",", "\n", "self", ".", "convert_ids_to_tokens", "(", "ids", ")", ")", ")", "\n", "res", "=", "res", ".", "replace", "(", "\" ##\"", ",", "\"\"", ")", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.tokenizers.BertTokenizer.tokenize": [[215, 217], ["tokenizers.BertTokenizer.tokenizer.tokenize"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.deepword.tokenizers.BertTokenizer.tokenize"], ["", "def", "tokenize", "(", "self", ",", "text", ")", ":", "\n", "        ", "return", "self", ".", "tokenizer", ".", "tokenize", "(", "text", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.tokenizers.AlbertTokenizer.__init__": [[224, 233], ["tokenizers.BertTokenizer.__init__", "albert.tokenization.FullTokenizer"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.models.drrn_modeling.PseudoSeq2SeqDRRN.__init__"], ["def", "__init__", "(", "self", ",", "vocab_file", ",", "do_lower_case", ",", "spm_model_file", ")", ":", "\n", "        ", "super", "(", "AlbertTokenizer", ",", "self", ")", ".", "__init__", "(", "vocab_file", ",", "do_lower_case", ")", "\n", "self", ".", "tokenizer", "=", "AlbertTok", "(", "vocab_file", ",", "do_lower_case", ",", "spm_model_file", ")", "\n", "self", ".", "_special_tokens", "=", "[", "\n", "conventions", ".", "albert_unk_token", ",", "\n", "conventions", ".", "albert_padding_token", ",", "\n", "conventions", ".", "albert_cls_token", ",", "\n", "conventions", ".", "albert_sep_token", ",", "\n", "conventions", ".", "albert_mask_token", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.tokenizers.AlbertTokenizer.de_tokenize": [[234, 240], ["res.replace.replace.replace", "filter", "tokenizers.AlbertTokenizer.convert_ids_to_tokens"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.deepword.tokenizers.BertTokenizer.convert_ids_to_tokens"], ["", "def", "de_tokenize", "(", "self", ",", "ids", ")", ":", "\n", "        ", "res", "=", "\" \"", ".", "join", "(", "\n", "filter", "(", "lambda", "t", ":", "t", "not", "in", "self", ".", "_special_tokens", ",", "\n", "self", ".", "convert_ids_to_tokens", "(", "ids", ")", ")", ")", "\n", "res", "=", "res", ".", "replace", "(", "u\"\\u2581\"", ",", "\" \"", ")", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.tokenizers.get_bert_tokenizer": [[242, 274], ["tokenizers.BertTokenizer", "deepword.hparams.copy_hparams", "deepword.hparams.copy_hparams.set_hparam", "deepword.hparams.copy_hparams.set_hparam", "deepword.hparams.copy_hparams.set_hparam", "deepword.hparams.copy_hparams.set_hparam", "deepword.hparams.copy_hparams.set_hparam", "deepword.hparams.copy_hparams.set_hparam", "deepword.hparams.copy_hparams.set_hparam", "deepword.hparams.copy_hparams.set_hparam", "deepword.hparams.copy_hparams.set_hparam", "deepword.hparams.copy_hparams.set_hparam", "deepword.hparams.copy_hparams.set_hparam", "deepword.hparams.copy_hparams.set_hparam", "deepword.hparams.copy_hparams.set_hparam", "deepword.hparams.copy_hparams.set_hparam", "deepword.hparams.copy_hparams.set_hparam", "len"], "function", ["home.repos.pwc.inspect_result.yinxusen_deepword.deepword.hparams.copy_hparams"], ["", "", "def", "get_bert_tokenizer", "(", "hp", ":", "HParams", ")", "->", "Tuple", "[", "HParams", ",", "Tokenizer", "]", ":", "\n", "    ", "tokenizer", "=", "BertTokenizer", "(", "\n", "vocab_file", "=", "conventions", ".", "bert_vocab_file", ",", "do_lower_case", "=", "True", ")", "\n", "new_hp", "=", "copy_hparams", "(", "hp", ")", "\n", "# set vocab info", "\n", "new_hp", ".", "set_hparam", "(", "'vocab_size'", ",", "len", "(", "tokenizer", ".", "vocab", ")", ")", "\n", "new_hp", ".", "set_hparam", "(", "\"padding_val\"", ",", "conventions", ".", "bert_padding_token", ")", "\n", "new_hp", ".", "set_hparam", "(", "\"unk_val\"", ",", "conventions", ".", "bert_unk_token", ")", "\n", "new_hp", ".", "set_hparam", "(", "\"cls_val\"", ",", "conventions", ".", "bert_cls_token", ")", "\n", "new_hp", ".", "set_hparam", "(", "\"sep_val\"", ",", "conventions", ".", "bert_sep_token", ")", "\n", "new_hp", ".", "set_hparam", "(", "\"mask_val\"", ",", "conventions", ".", "bert_mask_token", ")", "\n", "new_hp", ".", "set_hparam", "(", "\"sos\"", ",", "conventions", ".", "bert_sos_token", ")", "\n", "new_hp", ".", "set_hparam", "(", "\"eos\"", ",", "conventions", ".", "bert_eos_token", ")", "\n", "\n", "# set special token ids", "\n", "new_hp", ".", "set_hparam", "(", "\n", "'padding_val_id'", ",", "tokenizer", ".", "vocab", "[", "conventions", ".", "bert_padding_token", "]", ")", "\n", "assert", "new_hp", ".", "padding_val_id", "==", "0", ",", "\"padding should be indexed as 0\"", "\n", "new_hp", ".", "set_hparam", "(", "\n", "'unk_val_id'", ",", "tokenizer", ".", "vocab", "[", "conventions", ".", "bert_unk_token", "]", ")", "\n", "# bert specific tokens", "\n", "new_hp", ".", "set_hparam", "(", "\n", "'cls_val_id'", ",", "tokenizer", ".", "vocab", "[", "conventions", ".", "bert_cls_token", "]", ")", "\n", "new_hp", ".", "set_hparam", "(", "\n", "'sep_val_id'", ",", "tokenizer", ".", "vocab", "[", "conventions", ".", "bert_sep_token", "]", ")", "\n", "new_hp", ".", "set_hparam", "(", "\n", "'mask_val_id'", ",", "tokenizer", ".", "vocab", "[", "conventions", ".", "bert_mask_token", "]", ")", "\n", "new_hp", ".", "set_hparam", "(", "\n", "\"sos_id\"", ",", "tokenizer", ".", "vocab", "[", "conventions", ".", "bert_sos_token", "]", ")", "\n", "new_hp", ".", "set_hparam", "(", "\n", "\"eos_id\"", ",", "tokenizer", ".", "vocab", "[", "conventions", ".", "bert_eos_token", "]", ")", "\n", "return", "new_hp", ",", "tokenizer", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.tokenizers.get_albert_tokenizer": [[276, 302], ["tokenizers.AlbertTokenizer", "deepword.hparams.copy_hparams", "deepword.hparams.copy_hparams.set_hparam", "deepword.hparams.copy_hparams.set_hparam", "deepword.hparams.copy_hparams.set_hparam", "deepword.hparams.copy_hparams.set_hparam", "deepword.hparams.copy_hparams.set_hparam", "deepword.hparams.copy_hparams.set_hparam", "deepword.hparams.copy_hparams.set_hparam", "deepword.hparams.copy_hparams.set_hparam", "deepword.hparams.copy_hparams.set_hparam", "deepword.hparams.copy_hparams.set_hparam", "deepword.hparams.copy_hparams.set_hparam", "len"], "function", ["home.repos.pwc.inspect_result.yinxusen_deepword.deepword.hparams.copy_hparams"], ["", "def", "get_albert_tokenizer", "(", "hp", ":", "HParams", ")", "->", "Tuple", "[", "HParams", ",", "Tokenizer", "]", ":", "\n", "    ", "tokenizer", "=", "AlbertTokenizer", "(", "\n", "vocab_file", "=", "conventions", ".", "albert_vocab_file", ",", "\n", "do_lower_case", "=", "True", ",", "\n", "spm_model_file", "=", "conventions", ".", "albert_spm_path", ")", "\n", "new_hp", "=", "copy_hparams", "(", "hp", ")", "\n", "# make sure that padding_val is indexed as 0.", "\n", "new_hp", ".", "set_hparam", "(", "'vocab_size'", ",", "len", "(", "tokenizer", ".", "vocab", ")", ")", "\n", "new_hp", ".", "set_hparam", "(", "\"padding_val\"", ",", "conventions", ".", "albert_padding_token", ")", "\n", "new_hp", ".", "set_hparam", "(", "\"unk_val\"", ",", "conventions", ".", "albert_unk_token", ")", "\n", "new_hp", ".", "set_hparam", "(", "\"cls_val\"", ",", "conventions", ".", "albert_cls_token", ")", "\n", "new_hp", ".", "set_hparam", "(", "\"sep_val\"", ",", "conventions", ".", "albert_sep_token", ")", "\n", "new_hp", ".", "set_hparam", "(", "\"mask_val\"", ",", "conventions", ".", "albert_mask_token", ")", "\n", "\n", "new_hp", ".", "set_hparam", "(", "\n", "'padding_val_id'", ",", "tokenizer", ".", "vocab", "[", "conventions", ".", "albert_padding_token", "]", ")", "\n", "assert", "new_hp", ".", "padding_val_id", "==", "0", ",", "\"padding should be indexed as 0\"", "\n", "new_hp", ".", "set_hparam", "(", "\n", "'unk_val_id'", ",", "tokenizer", ".", "vocab", "[", "conventions", ".", "albert_unk_token", "]", ")", "\n", "new_hp", ".", "set_hparam", "(", "\n", "'cls_val_id'", ",", "tokenizer", ".", "vocab", "[", "conventions", ".", "albert_cls_token", "]", ")", "\n", "new_hp", ".", "set_hparam", "(", "\n", "'sep_val_id'", ",", "tokenizer", ".", "vocab", "[", "conventions", ".", "albert_sep_token", "]", ")", "\n", "new_hp", ".", "set_hparam", "(", "\n", "'mask_val_id'", ",", "tokenizer", ".", "vocab", "[", "conventions", ".", "albert_mask_token", "]", ")", "\n", "return", "new_hp", ",", "tokenizer", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.tokenizers.get_nltk_tokenizer": [[304, 323], ["tokenizers.NLTKTokenizer", "deepword.hparams.copy_hparams", "deepword.hparams.copy_hparams.set_hparam", "deepword.hparams.copy_hparams.set_hparam", "deepword.hparams.copy_hparams.set_hparam", "deepword.hparams.copy_hparams.set_hparam", "deepword.hparams.copy_hparams.set_hparam", "deepword.hparams.copy_hparams.set_hparam", "deepword.hparams.copy_hparams.set_hparam", "deepword.hparams.copy_hparams.set_hparam", "deepword.hparams.copy_hparams.set_hparam", "len"], "function", ["home.repos.pwc.inspect_result.yinxusen_deepword.deepword.hparams.copy_hparams"], ["", "def", "get_nltk_tokenizer", "(", "\n", "hp", ":", "HParams", ",", "vocab_file", ":", "str", "=", "conventions", ".", "nltk_vocab_file", "\n", ")", "->", "Tuple", "[", "HParams", ",", "Tokenizer", "]", ":", "\n", "    ", "tokenizer", "=", "NLTKTokenizer", "(", "vocab_file", "=", "vocab_file", ",", "do_lower_case", "=", "True", ")", "\n", "new_hp", "=", "copy_hparams", "(", "hp", ")", "\n", "new_hp", ".", "set_hparam", "(", "'vocab_size'", ",", "len", "(", "tokenizer", ".", "vocab", ")", ")", "\n", "new_hp", ".", "set_hparam", "(", "\"padding_val\"", ",", "conventions", ".", "nltk_padding_token", ")", "\n", "new_hp", ".", "set_hparam", "(", "\"unk_val\"", ",", "conventions", ".", "nltk_unk_token", ")", "\n", "new_hp", ".", "set_hparam", "(", "\"sos\"", ",", "conventions", ".", "nltk_sos_token", ")", "\n", "new_hp", ".", "set_hparam", "(", "\"eos\"", ",", "conventions", ".", "nltk_eos_token", ")", "\n", "\n", "new_hp", ".", "set_hparam", "(", "\n", "'padding_val_id'", ",", "tokenizer", ".", "vocab", "[", "conventions", ".", "nltk_padding_token", "]", ")", "\n", "assert", "new_hp", ".", "padding_val_id", "==", "0", ",", "\"padding should be indexed as 0\"", "\n", "new_hp", ".", "set_hparam", "(", "\n", "'unk_val_id'", ",", "tokenizer", ".", "vocab", "[", "conventions", ".", "nltk_unk_token", "]", ")", "\n", "new_hp", ".", "set_hparam", "(", "'sos_id'", ",", "tokenizer", ".", "vocab", "[", "conventions", ".", "nltk_sos_token", "]", ")", "\n", "new_hp", ".", "set_hparam", "(", "'eos_id'", ",", "tokenizer", ".", "vocab", "[", "conventions", ".", "nltk_eos_token", "]", ")", "\n", "return", "new_hp", ",", "tokenizer", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.tokenizers.get_zork_tokenizer": [[325, 344], ["tokenizers.LegacyZorkTokenizer", "deepword.hparams.copy_hparams", "deepword.hparams.copy_hparams.set_hparam", "deepword.hparams.copy_hparams.set_hparam", "deepword.hparams.copy_hparams.set_hparam", "deepword.hparams.copy_hparams.set_hparam", "deepword.hparams.copy_hparams.set_hparam", "deepword.hparams.copy_hparams.set_hparam", "deepword.hparams.copy_hparams.set_hparam", "deepword.hparams.copy_hparams.set_hparam", "deepword.hparams.copy_hparams.set_hparam", "len"], "function", ["home.repos.pwc.inspect_result.yinxusen_deepword.deepword.hparams.copy_hparams"], ["", "def", "get_zork_tokenizer", "(", "\n", "hp", ":", "HParams", ",", "\n", "vocab_file", ":", "str", "=", "conventions", ".", "legacy_zork_vocab_file", "\n", ")", "->", "Tuple", "[", "HParams", ",", "Tokenizer", "]", ":", "\n", "    ", "tokenizer", "=", "LegacyZorkTokenizer", "(", "vocab_file", "=", "vocab_file", ")", "\n", "new_hp", "=", "copy_hparams", "(", "hp", ")", "\n", "new_hp", ".", "set_hparam", "(", "'vocab_size'", ",", "len", "(", "tokenizer", ".", "vocab", ")", ")", "\n", "new_hp", ".", "set_hparam", "(", "\"padding_val\"", ",", "conventions", ".", "nltk_padding_token", ")", "\n", "new_hp", ".", "set_hparam", "(", "\"unk_val\"", ",", "conventions", ".", "nltk_unk_token", ")", "\n", "new_hp", ".", "set_hparam", "(", "\"sos\"", ",", "conventions", ".", "nltk_sos_token", ")", "\n", "new_hp", ".", "set_hparam", "(", "\"eos\"", ",", "conventions", ".", "nltk_eos_token", ")", "\n", "\n", "new_hp", ".", "set_hparam", "(", "\n", "'padding_val_id'", ",", "tokenizer", ".", "vocab", "[", "conventions", ".", "nltk_padding_token", "]", ")", "\n", "new_hp", ".", "set_hparam", "(", "\n", "'unk_val_id'", ",", "tokenizer", ".", "vocab", "[", "conventions", ".", "nltk_unk_token", "]", ")", "\n", "new_hp", ".", "set_hparam", "(", "'sos_id'", ",", "tokenizer", ".", "vocab", "[", "conventions", ".", "nltk_sos_token", "]", ")", "\n", "new_hp", ".", "set_hparam", "(", "'eos_id'", ",", "tokenizer", ".", "vocab", "[", "conventions", ".", "nltk_eos_token", "]", ")", "\n", "return", "new_hp", ",", "tokenizer", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.tokenizers.init_tokens": [[346, 375], ["hp.tokenizer_type.lower", "tokenizers.get_bert_tokenizer", "hp.tokenizer_type.lower", "tokenizers.get_albert_tokenizer", "hp.tokenizer_type.lower", "tokenizers.get_nltk_tokenizer", "tokenizers.get_nltk_tokenizer", "hp.tokenizer_type.lower", "tokenizers.get_zork_tokenizer", "ValueError"], "function", ["home.repos.pwc.inspect_result.yinxusen_deepword.deepword.tokenizers.get_bert_tokenizer", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.tokenizers.get_albert_tokenizer", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.tokenizers.get_nltk_tokenizer", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.tokenizers.get_nltk_tokenizer", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.tokenizers.get_zork_tokenizer"], ["", "def", "init_tokens", "(", "hp", ":", "HParams", ")", "->", "Tuple", "[", "HParams", ",", "Tokenizer", "]", ":", "\n", "    ", "\"\"\"\n    Initialize a tokenizer given hyperparameters\n\n    Args:\n        hp: hyperparameters, see :py:mod:`deepword.hparams`\n\n    Returns:\n        updated hp, tokenizer\n    \"\"\"", "\n", "\n", "if", "hp", ".", "tokenizer_type", ".", "lower", "(", ")", "==", "\"bert\"", ":", "\n", "        ", "new_hp", ",", "tokenizer", "=", "get_bert_tokenizer", "(", "hp", ")", "\n", "", "elif", "hp", ".", "tokenizer_type", ".", "lower", "(", ")", "==", "\"albert\"", ":", "\n", "        ", "new_hp", ",", "tokenizer", "=", "get_albert_tokenizer", "(", "hp", ")", "\n", "", "elif", "hp", ".", "tokenizer_type", ".", "lower", "(", ")", "==", "\"nltk\"", ":", "\n", "        ", "if", "hp", ".", "use_glove_emb", ":", "\n", "# the glove vocab file has been modified to have special tokens", "\n", "# i.e. [PAD] [UNK] <S> </S>", "\n", "            ", "new_hp", ",", "tokenizer", "=", "get_nltk_tokenizer", "(", "\n", "hp", ",", "vocab_file", "=", "conventions", ".", "glove_vocab_file", ")", "\n", "", "else", ":", "\n", "            ", "new_hp", ",", "tokenizer", "=", "get_nltk_tokenizer", "(", "hp", ")", "\n", "", "", "elif", "hp", ".", "tokenizer_type", ".", "lower", "(", ")", "==", "\"zork\"", ":", "\n", "        ", "new_hp", ",", "tokenizer", "=", "get_zork_tokenizer", "(", "hp", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\n", "\"Unknown tokenizer type: {}\"", ".", "format", "(", "hp", ".", "tokenizer_type", ")", ")", "\n", "", "return", "new_hp", ",", "tokenizer", "\n", "", ""]], "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.eval_games.MultiGPUsEvalPlayer.__init__": [[313, 323], ["deepword.log.Logging.__init__", "eval_games.MultiGPUsEvalPlayer.split_game_files", "range"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.models.drrn_modeling.PseudoSeq2SeqDRRN.__init__", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.eval_games.MultiGPUsEvalPlayer.split_game_files"], ["def", "__init__", "(", "self", ",", "hp", ",", "model_dir", ",", "game_files", ",", "n_gpus", ",", "load_best", "=", "True", ")", ":", "\n", "        ", "super", "(", "MultiGPUsEvalPlayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "hp", "=", "hp", "\n", "self", ".", "prev_best_scores", "=", "0", "\n", "self", ".", "prev_best_steps", "=", "sys", ".", "maxsize", "\n", "self", ".", "model_dir", "=", "model_dir", "\n", "self", ".", "gpu_devices", "=", "[", "\"/device:GPU:{}\"", ".", "format", "(", "i", ")", "for", "i", "in", "range", "(", "n_gpus", ")", "]", "\n", "self", ".", "game_files", "=", "game_files", "\n", "self", ".", "portion_files", "=", "self", ".", "split_game_files", "(", "game_files", ",", "n_gpus", ")", "\n", "self", ".", "load_best", "=", "load_best", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.eval_games.MultiGPUsEvalPlayer.split_game_files": [[324, 350], ["sorted", "random.Random().shuffle", "len", "math.ceil", "ValueError", "random.Random", "len", "range", "min", "len"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "split_game_files", "(", "\n", "cls", ",", "game_files", ":", "List", "[", "str", "]", ",", "k", ":", "int", ",", "rnd_seed", ":", "int", "=", "42", "\n", ")", "->", "List", "[", "List", "[", "str", "]", "]", ":", "\n", "        ", "\"\"\"\n        Split game files into k portions for multi GPUs playing\n\n        Args:\n            game_files: a list of games for playing\n            k: number of splits\n            rnd_seed: random seed\n\n        Returns:\n            a list of list of game files\n        \"\"\"", "\n", "game_files", "=", "sorted", "(", "game_files", ")", "\n", "random", ".", "Random", "(", "rnd_seed", ")", ".", "shuffle", "(", "game_files", ")", "\n", "n_files", "=", "len", "(", "game_files", ")", "\n", "if", "n_files", "==", "0", ":", "\n", "            ", "raise", "ValueError", "(", "\"no game files found!\"", ")", "\n", "\n", "", "portion", "=", "math", ".", "ceil", "(", "len", "(", "game_files", ")", "/", "k", ")", "\n", "files", "=", "[", "\n", "game_files", "[", "i", "*", "portion", ":", "min", "(", "len", "(", "game_files", ")", ",", "(", "i", "+", "1", ")", "*", "portion", ")", "]", "\n", "for", "i", "in", "range", "(", "k", ")", "]", "\n", "return", "files", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.eval_games.MultiGPUsEvalPlayer.has_better_model": [[351, 364], ["None"], "methods", ["None"], ["", "def", "has_better_model", "(", "self", ",", "total_scores", ":", "float", ",", "total_steps", ":", "float", ")", "->", "bool", ":", "\n", "        ", "\"\"\"\n        Whether or not the current model is better\n\n        Args:\n            total_scores: total scores earned\n            total_steps: total steps used\n        \"\"\"", "\n", "has_better_score", "=", "total_scores", ">", "self", ".", "prev_best_scores", "\n", "has_fewer_steps", "=", "(", "\n", "total_scores", "==", "self", ".", "prev_best_scores", "and", "\n", "total_steps", "<", "self", ".", "prev_best_steps", ")", "\n", "return", "has_better_score", "or", "has_fewer_steps", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.eval_games.MultiGPUsEvalPlayer.evaluate": [[365, 445], ["eval_games.MultiGPUsEvalPlayer.debug", "dict", "eval_games.agg_eval_results", "eval_games.MultiGPUsEvalPlayer.info", "eval_games.MultiGPUsEvalPlayer.info", "eval_games.MultiGPUsEvalPlayer.info", "eval_games.scores_of_tiers", "sorted", "eval_games.MultiGPUsEvalPlayer.info", "eval_games.eval_agent", "results.append", "multiprocessing.Pool", "multiprocessing.Pool.close", "multiprocessing.Pool.join", "eval_games.MultiGPUsEvalPlayer.debug", "len", "collections.ChainMap", "deepword.utils.report_status", "list", "eval_games.MultiGPUsEvalPlayer.has_better_model", "len", "multiprocessing.Pool.apply_async", "set", "sorted.items", "eval_games.MultiGPUsEvalPlayer.info", "eval_games.MultiGPUsEvalPlayer.info", "zip", "results.append", "eval_games.MultiGPUsEvalPlayer.save_best_model", "eval_agent.get", "eval_games.MultiGPUsEvalPlayer.error", "sys.exc_info", "traceback.print_exception", "multiprocessing.Pool.terminate", "eval_games.MultiGPUsEvalPlayer.debug", "eval_games.MultiGPUsEvalPlayer.warning"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.deepword.log.Logging.debug", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.eval_games.agg_eval_results", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.log.Logging.info", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.log.Logging.info", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.log.Logging.info", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.eval_games.scores_of_tiers", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.log.Logging.info", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.eval_games.eval_agent", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.tree_memory.TreeMemory.append", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.log.Logging.debug", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.utils.report_status", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.eval_games.MultiGPUsEvalPlayer.has_better_model", "home.repos.pwc.inspect_result.yinxusen_deepword.students.student_learner.CMD.set", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.log.Logging.info", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.log.Logging.info", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.tree_memory.TreeMemory.append", "home.repos.pwc.inspect_result.yinxusen_deepword.agents.cores.TFCore.save_best_model", "home.repos.pwc.inspect_result.yinxusen_deepword.students.student_learner.CMD.get", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.log.Logging.error", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.log.Logging.debug", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.log.Logging.warning"], ["", "def", "evaluate", "(", "\n", "self", ",", "restore_from", ":", "Optional", "[", "str", "]", ",", "debug", ":", "bool", "=", "False", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        Evaluate an agent\n\n        Args:\n            restore_from: path to restore weights\n            debug: if debug, multi-threads will be disabled\n        \"\"\"", "\n", "self", ".", "debug", "(", "\"start evaluation ...\"", ")", "\n", "results", "=", "[", "]", "\n", "if", "debug", ":", "\n", "            ", "res", "=", "eval_agent", "(", "\n", "self", ".", "hp", ",", "self", ".", "model_dir", ",", "self", ".", "load_best", ",", "restore_from", ",", "\n", "self", ".", "game_files", ",", "self", ".", "gpu_devices", "[", "0", "]", ")", "\n", "results", ".", "append", "(", "res", ")", "\n", "", "else", ":", "\n", "            ", "pool", "=", "Pool", "(", "len", "(", "self", ".", "portion_files", ")", ")", "\n", "async_results", "=", "[", "\n", "pool", ".", "apply_async", "(", "\n", "eval_agent", ",", "\n", "(", "self", ".", "hp", ",", "self", ".", "model_dir", ",", "self", ".", "load_best", ",", "restore_from", ",", "\n", "files", ",", "gpu_device", ")", ")", "\n", "for", "files", ",", "gpu_device", "in", "zip", "(", "\n", "self", ".", "portion_files", ",", "self", ".", "gpu_devices", ")", "]", "\n", "for", "res", "in", "async_results", ":", "\n", "                ", "try", ":", "\n", "                    ", "results", ".", "append", "(", "res", ".", "get", "(", ")", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "                    ", "self", ".", "error", "(", "\n", "\"evaluation error with {}\\n{}\"", ".", "format", "(", "restore_from", ",", "e", ")", ")", "\n", "exc_type", ",", "exc_value", ",", "exc_traceback", "=", "sys", ".", "exc_info", "(", ")", "\n", "traceback", ".", "print_exception", "(", "\n", "exc_type", ",", "exc_value", ",", "exc_traceback", ",", "limit", "=", "None", ",", "\n", "file", "=", "sys", ".", "stdout", ")", "\n", "pool", ".", "terminate", "(", ")", "\n", "self", ".", "debug", "(", "\"multi-process pool terminated.\"", ")", "\n", "return", "\n", "", "", "pool", ".", "close", "(", ")", "\n", "pool", ".", "join", "(", ")", "\n", "self", ".", "debug", "(", "\"evaluation pool closed\"", ")", "\n", "\n", "", "loaded_steps", "=", "[", "res", "[", "1", "]", "for", "res", "in", "results", "]", "\n", "assert", "len", "(", "set", "(", "loaded_steps", ")", ")", "==", "1", ",", "\"load different versions of model\"", "\n", "\n", "results", "=", "[", "res", "[", "0", "]", "for", "res", "in", "results", "]", "\n", "# TODO: same key will be updated by ChainMap", "\n", "eval_results", "=", "dict", "(", "ChainMap", "(", "*", "results", ")", ")", "\n", "(", "agg_res", ",", "total_scores", ",", "confidence_intervals", ",", "total_positive_scores", ",", "\n", "total_negative_scores", ",", "total_steps", ",", "n_won", "\n", ")", "=", "agg_eval_results", "(", "eval_results", ")", "\n", "self", ".", "info", "(", "\"eval_results: {}\"", ".", "format", "(", "eval_results", ")", ")", "\n", "self", ".", "info", "(", "\"eval aggregated results: {}\"", ".", "format", "(", "agg_res", ")", ")", "\n", "self", ".", "info", "(", "report_status", "(", "[", "\n", "(", "\"after-epoch\"", ",", "loaded_steps", "[", "0", "]", ")", ",", "\n", "(", "\"scores\"", ",", "\"{:.2f}\"", ".", "format", "(", "total_scores", ")", ")", ",", "\n", "(", "\"confidence\"", ",", "\"{:.2f}\"", ".", "format", "(", "confidence_intervals", ")", ")", ",", "\n", "(", "\"positive scores\"", ",", "\"{:.2f}\"", ".", "format", "(", "total_positive_scores", ")", ")", ",", "\n", "(", "\"negative scores\"", ",", "\"{:.2f}\"", ".", "format", "(", "total_negative_scores", ")", ")", ",", "\n", "(", "\"steps\"", ",", "\"{:.2f}\"", ".", "format", "(", "total_steps", ")", ")", ",", "\n", "(", "\"n_won\"", ",", "\"{:.2f}\"", ".", "format", "(", "n_won", ")", ")", "\n", "]", ")", ")", "\n", "tiers2scores", "=", "scores_of_tiers", "(", "agg_res", ")", "\n", "tiers2scores", "=", "sorted", "(", "list", "(", "tiers2scores", ".", "items", "(", ")", ")", ",", "key", "=", "lambda", "x", ":", "x", "[", "0", "]", ")", "\n", "self", ".", "info", "(", "\"scores per tiers:\\n{}\"", ".", "format", "(", "tiers2scores", ")", ")", "\n", "\n", "if", "not", "self", ".", "load_best", ":", "\n", "            ", "if", "self", ".", "has_better_model", "(", "total_scores", ",", "total_steps", ")", ":", "\n", "                ", "self", ".", "info", "(", "\n", "\"found better agent, save model after-epoch-{}\"", ".", "format", "(", "\n", "loaded_steps", "[", "0", "]", ")", ")", "\n", "self", ".", "prev_best_scores", "=", "total_scores", "\n", "self", ".", "prev_best_steps", "=", "total_steps", "\n", "# copy best model so far", "\n", "try", ":", "\n", "                    ", "self", ".", "save_best_model", "(", "loaded_steps", "[", "0", "]", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "                    ", "self", ".", "warning", "(", "\"save best model error:\\n{}\"", ".", "format", "(", "e", ")", ")", "\n", "", "", "else", ":", "\n", "                ", "self", ".", "info", "(", "\"no better model, pass ...\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.eval_games.MultiGPUsEvalPlayer.save_best_model": [[446, 465], ["os.path.join", "os.path.join", "glob.glob", "os.path.join", "shutil.copy", "eval_games.MultiGPUsEvalPlayer.debug", "os.path.exists", "os.mkdir", "os.path.join", "shutil.copy", "eval_games.MultiGPUsEvalPlayer.debug"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.deepword.log.Logging.debug", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.log.Logging.debug"], ["", "", "", "def", "save_best_model", "(", "self", ",", "loaded_ckpt_step", ":", "int", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        Copy current model to the best model dir\n\n        Args:\n            loaded_ckpt_step: which model to copy\n        \"\"\"", "\n", "ckpt_path", "=", "path", ".", "join", "(", "self", ".", "model_dir", ",", "\"last_weights\"", ")", "\n", "best_path", "=", "path", ".", "join", "(", "self", ".", "model_dir", ",", "\"best_weights\"", ")", "\n", "if", "not", "path", ".", "exists", "(", "best_path", ")", ":", "\n", "            ", "os", ".", "mkdir", "(", "best_path", ")", "\n", "", "for", "file", "in", "glob", ".", "glob", "(", "\n", "path", ".", "join", "(", "\n", "ckpt_path", ",", "\"after-epoch-{}*\"", ".", "format", "(", "loaded_ckpt_step", ")", ")", ")", ":", "\n", "            ", "dst", "=", "shutil", ".", "copy", "(", "file", ",", "best_path", ")", "\n", "self", ".", "debug", "(", "\"copied: {} -> {}\"", ".", "format", "(", "file", ",", "dst", ")", ")", "\n", "", "ckpt_file", "=", "path", ".", "join", "(", "ckpt_path", ",", "\"checkpoint\"", ")", "\n", "dst", "=", "shutil", ".", "copy", "(", "ckpt_file", ",", "best_path", ")", "\n", "self", ".", "debug", "(", "\"copied: {} -> {}\"", ".", "format", "(", "ckpt_file", ",", "dst", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.eval_games.LoopDogEvalPlayer.__init__": [[468, 471], ["deepword.log.Logging.__init__", "hash"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.models.drrn_modeling.PseudoSeq2SeqDRRN.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "LoopDogEvalPlayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "file_content", "=", "hash", "(", "\"\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.eval_games.LoopDogEvalPlayer.start": [[472, 497], ["eval_games.MultiGPUsEvalPlayer", "os.path.join", "eval_games.LoopDogEvalPlayer.debug", "time.sleep", "eval_games.LoopDogEvalPlayer.debug", "open", "hash", "eval_games.LoopDogEvalPlayer.debug", "eval_games.MultiGPUsEvalPlayer.evaluate", "eval_games.LoopDogEvalPlayer.warning", "f.read"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.deepword.log.Logging.debug", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.log.Logging.debug", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.log.Logging.debug", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.eval_games.MultiGPUsEvalPlayer.evaluate", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.log.Logging.warning"], ["", "def", "start", "(", "self", ",", "hp", ",", "model_dir", ",", "game_files", ",", "n_gpus", ",", "debug", ")", ":", "\n", "        ", "player", "=", "MultiGPUsEvalPlayer", "(", "\n", "hp", ",", "model_dir", ",", "game_files", ",", "n_gpus", ",", "load_best", "=", "False", ")", "\n", "watched_file", "=", "path", ".", "join", "(", "model_dir", ",", "\"last_weights\"", ",", "\"checkpoint\"", ")", "\n", "self", ".", "debug", "(", "\"watch on {}\"", ".", "format", "(", "watched_file", ")", ")", "\n", "try", ":", "\n", "            ", "while", "True", ":", "\n", "                ", "time", ".", "sleep", "(", "10", ")", "\n", "self", ".", "debug", "(", "\"watching ...\"", ")", "\n", "try", ":", "\n", "                    ", "with", "open", "(", "watched_file", ",", "'rb'", ")", "as", "f", ":", "\n", "                        ", "content", "=", "hash", "(", "f", ".", "read", "(", ")", ")", "\n", "", "if", "content", "!=", "self", ".", "file_content", ":", "\n", "                        ", "self", ".", "debug", "(", "\n", "\"encounter new file {} -> {} for evaluation\"", ".", "format", "(", "\n", "self", ".", "file_content", ",", "content", ")", ")", "\n", "self", ".", "file_content", "=", "content", "\n", "player", ".", "evaluate", "(", "restore_from", "=", "None", ",", "debug", "=", "debug", ")", "\n", "", "else", ":", "\n", "                        ", "pass", "\n", "", "", "except", "Exception", "as", "e", ":", "\n", "                    ", "self", ".", "warning", "(", "\"cannot read watched file: {}\\n{}\"", ".", "format", "(", "\n", "watched_file", ",", "e", ")", ")", "\n", "", "", "", "except", "KeyboardInterrupt", ":", "\n", "            ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.eval_games.FullDirEvalPlayer.__init__": [[500, 502], ["deepword.log.Logging.__init__"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.models.drrn_modeling.PseudoSeq2SeqDRRN.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "FullDirEvalPlayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.eval_games.FullDirEvalPlayer.start": [[503, 513], ["eval_games.list_checkpoints", "eval_games.MultiGPUsEvalPlayer", "eval_games.MultiGPUsEvalPlayer.evaluate"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.deepword.eval_games.list_checkpoints", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.eval_games.MultiGPUsEvalPlayer.evaluate"], ["", "@", "classmethod", "\n", "def", "start", "(", "\n", "cls", ",", "hp", ",", "model_dir", ",", "game_files", ",", "n_gpus", ",", "debug", ",", "\n", "range_min", "=", "None", ",", "range_max", "=", "None", ")", ":", "\n", "        ", "steps", ",", "step2ckpt", "=", "list_checkpoints", "(", "\n", "model_dir", ",", "range_min", "=", "range_min", ",", "range_max", "=", "range_max", ")", "\n", "player", "=", "MultiGPUsEvalPlayer", "(", "\n", "hp", ",", "model_dir", ",", "game_files", ",", "n_gpus", ",", "load_best", "=", "False", ")", "\n", "for", "step", "in", "steps", "[", ":", ":", "-", "1", "]", ":", "# eval reversely", "\n", "            ", "player", ".", "evaluate", "(", "restore_from", "=", "step2ckpt", "[", "step", "]", ",", "debug", "=", "debug", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.eval_games.eval_agent": [[35, 114], ["dict", "deepword.utils.agent_name2clazz", "deepword.utils.agent_name2clazz.", "agent_clazz.select_additional_infos", "range", "agent_clazz.core.set_d4eval", "agent_clazz.eval", "agent_clazz.reset", "len", "os.path.basename", "textworld.gym.register_games", "gym.make", "deepword.utils.eprint", "range", "gym.make.close", "gym.make.reset", "agent_clazz.act", "eval_results[].append", "len", "len", "len", "all", "agent_clazz.act", "action_list.append", "gym.make.step", "eval_games.EvalResult", "int", "zip"], "function", ["home.repos.pwc.inspect_result.yinxusen_deepword.deepword.utils.agent_name2clazz", "home.repos.pwc.inspect_result.yinxusen_deepword.agents.base_agent.BaseAgent.select_additional_infos", "home.repos.pwc.inspect_result.yinxusen_deepword.agents.cores.TFCore.set_d4eval", "home.repos.pwc.inspect_result.yinxusen_deepword.agents.base_agent.BaseAgent.eval", "home.repos.pwc.inspect_result.yinxusen_deepword.agents.base_agent.BaseAgent.reset", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.utils.eprint", "home.repos.pwc.inspect_result.yinxusen_deepword.agents.base_agent.BaseAgent.reset", "home.repos.pwc.inspect_result.yinxusen_deepword.agents.base_agent.BaseAgent.act", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.tree_memory.TreeMemory.append", "home.repos.pwc.inspect_result.yinxusen_deepword.agents.base_agent.BaseAgent.act", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.tree_memory.TreeMemory.append"], ["", "def", "eval_agent", "(", "\n", "hp", ":", "HParams", ",", "model_dir", ":", "str", ",", "load_best", ":", "bool", ",", "\n", "restore_from", ":", "Optional", "[", "str", "]", ",", "game_files", ":", "List", "[", "str", "]", ",", "\n", "gpu_device", ":", "Optional", "[", "str", "]", "=", "None", "\n", ")", "->", "Tuple", "[", "Dict", "[", "str", ",", "List", "[", "EvalResult", "]", "]", ",", "int", "]", ":", "\n", "    ", "\"\"\"\n    Evaluate an agent with given games.\n    For each game, we run nb_episodes, and max_episode_steps for on episode.\n\n    Notice that evaluation game running is different with training.\n    In training, we register all given games to TextWorld structure, and play\n    them in a random way.\n    For evaluation, we register one game at a time, and play it for nb_episodes.\n\n    Args:\n        hp: hyperparameter to create the agent\n        model_dir: model dir of the agent\n        load_best: bool, load from best_weights or not (last_weights)\n        restore_from: string, load from a specific model,\n         e.g. {model_dir}/last_weights/after_epoch-0\n        game_files: game files for evaluation\n        gpu_device: which GPU device to load, in a format of \"/device:GPU:i\"\n\n    Returns:\n        eval_results, loaded_ckpt_step\n    \"\"\"", "\n", "eval_results", "=", "dict", "(", ")", "\n", "agent_clazz", "=", "agent_name2clazz", "(", "hp", ".", "agent_clazz", ")", "\n", "agent", "=", "agent_clazz", "(", "hp", ",", "model_dir", ")", "\n", "if", "gpu_device", "is", "not", "None", ":", "\n", "        ", "agent", ".", "core", ".", "set_d4eval", "(", "gpu_device", ")", "\n", "", "if", "load_best", ":", "# load from best_weights for evaluation", "\n", "        ", "agent", ".", "eval", "(", "load_best", "=", "load_best", ")", "\n", "", "else", ":", "# load from last_weights for dev test", "\n", "        ", "agent", ".", "reset", "(", "restore_from", ")", "\n", "\n", "", "requested_infos", "=", "agent", ".", "select_additional_infos", "(", ")", "\n", "for", "game_no", "in", "range", "(", "len", "(", "game_files", ")", ")", ":", "\n", "        ", "game_file", "=", "game_files", "[", "game_no", "]", "\n", "game_name", "=", "path", ".", "basename", "(", "game_file", ")", "\n", "env_id", "=", "textworld", ".", "gym", ".", "register_games", "(", "\n", "[", "game_file", "]", ",", "requested_infos", ",", "batch_size", "=", "1", ",", "\n", "max_episode_steps", "=", "hp", ".", "game_episode_terminal_t", ",", "\n", "name", "=", "\"eval\"", ")", "\n", "game_env", "=", "gym", ".", "make", "(", "env_id", ")", "\n", "eprint", "(", "\"eval game: {}\"", ".", "format", "(", "game_name", ")", ")", "\n", "assert", "hp", ".", "eval_episode", ">", "0", ",", "\"no enough episode to eval\"", "\n", "for", "episode_no", "in", "range", "(", "hp", ".", "eval_episode", ")", ":", "\n", "            ", "action_list", "=", "[", "]", "\n", "obs", ",", "infos", "=", "game_env", ".", "reset", "(", ")", "\n", "scores", "=", "[", "0", "]", "*", "len", "(", "obs", ")", "\n", "dones", "=", "[", "False", "]", "*", "len", "(", "obs", ")", "\n", "steps", "=", "[", "0", "]", "*", "len", "(", "obs", ")", "\n", "# TODO: make sure verbose won't affect games other than Zork", "\n", "# tmp_obs, _, _, _ = game_env.step([\"verbose\"] * len(obs))", "\n", "# eprint(\"use verbose: {}\".format(tmp_obs[0]))", "\n", "while", "not", "all", "(", "dones", ")", ":", "\n", "# Increase step counts.", "\n", "                ", "steps", "=", "(", "[", "step", "+", "int", "(", "not", "done", ")", "\n", "for", "step", ",", "done", "in", "zip", "(", "steps", ",", "dones", ")", "]", ")", "\n", "commands", "=", "agent", ".", "act", "(", "obs", ",", "scores", ",", "dones", ",", "infos", ")", "\n", "action_list", ".", "append", "(", "commands", "[", "0", "]", ")", "\n", "obs", ",", "scores", ",", "dones", ",", "infos", "=", "game_env", ".", "step", "(", "commands", ")", "\n", "\n", "# Let the agent knows the game is done.", "\n", "", "agent", ".", "act", "(", "obs", ",", "scores", ",", "dones", ",", "infos", ")", "\n", "\n", "if", "game_name", "not", "in", "eval_results", ":", "\n", "                ", "eval_results", "[", "game_name", "]", "=", "[", "]", "\n", "", "eval_results", "[", "game_name", "]", ".", "append", "(", "EvalResult", "(", "\n", "score", "=", "scores", "[", "0", "]", ",", "\n", "positive_score", "=", "agent", ".", "positive_scores", ",", "\n", "negative_score", "=", "agent", ".", "negative_scores", ",", "\n", "max_score", "=", "infos", "[", "INFO_KEY", ".", "max_score", "]", "[", "0", "]", ",", "\n", "steps", "=", "steps", "[", "0", "]", ",", "\n", "won", "=", "infos", "[", "INFO_KEY", ".", "won", "]", "[", "0", "]", ",", "\n", "action_list", "=", "action_list", ")", ")", "\n", "", "game_env", ".", "close", "(", ")", "\n", "", "return", "eval_results", ",", "agent", ".", "core", ".", "loaded_ckpt_step", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.eval_games.agent_collect_data": [[116, 147], ["agent.select_additional_infos", "textworld.gym.register_games", "gym.make", "deepword.utils.eprint", "gym.make.reset", "range", "gym.make.close", "len", "len", "range", "agent.save_snapshot", "deepword.utils.eprint", "all", "agent.act", "gym.make.step", "agent.act", "gym.make.reset", "len", "len"], "function", ["home.repos.pwc.inspect_result.yinxusen_deepword.agents.base_agent.BaseAgent.select_additional_infos", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.utils.eprint", "home.repos.pwc.inspect_result.yinxusen_deepword.agents.base_agent.BaseAgent.reset", "home.repos.pwc.inspect_result.yinxusen_deepword.agents.base_agent.BaseAgent.save_snapshot", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.utils.eprint", "home.repos.pwc.inspect_result.yinxusen_deepword.agents.base_agent.BaseAgent.act", "home.repos.pwc.inspect_result.yinxusen_deepword.agents.base_agent.BaseAgent.act", "home.repos.pwc.inspect_result.yinxusen_deepword.agents.base_agent.BaseAgent.reset"], ["", "def", "agent_collect_data", "(", "\n", "agent", ",", "game_files", ",", "max_episode_steps", ",", "epoch_size", ",", "epoch_limit", ",", "\n", "max_randomness", "=", "0.5", ")", ":", "\n", "    ", "requested_infos", "=", "agent", ".", "select_additional_infos", "(", ")", "\n", "env_id", "=", "textworld", ".", "gym", ".", "register_games", "(", "\n", "game_files", ",", "requested_infos", ",", "batch_size", "=", "1", ",", "\n", "max_episode_steps", "=", "max_episode_steps", ",", "\n", "name", "=", "\"eval\"", ")", "\n", "game_env", "=", "gym", ".", "make", "(", "env_id", ")", "\n", "# use fix randomness value, default 0.5", "\n", "agent", ".", "eps", "=", "max_randomness", "\n", "eprint", "(", "\"new randomness: {}\"", ".", "format", "(", "agent", ".", "eps", ")", ")", "\n", "\n", "obs", ",", "infos", "=", "game_env", ".", "reset", "(", ")", "\n", "scores", "=", "[", "0", "]", "*", "len", "(", "obs", ")", "\n", "dones", "=", "[", "False", "]", "*", "len", "(", "obs", ")", "\n", "for", "epoch_t", "in", "range", "(", "epoch_limit", ")", ":", "\n", "        ", "for", "_", "in", "range", "(", "epoch_size", ")", ":", "\n", "            ", "if", "not", "all", "(", "dones", ")", ":", "\n", "                ", "commands", "=", "agent", ".", "act", "(", "obs", ",", "scores", ",", "dones", ",", "infos", ")", "\n", "obs", ",", "scores", ",", "dones", ",", "infos", "=", "game_env", ".", "step", "(", "commands", ")", "\n", "", "else", ":", "\n", "                ", "agent", ".", "act", "(", "obs", ",", "scores", ",", "dones", ",", "infos", ")", "\n", "obs", ",", "infos", "=", "game_env", ".", "reset", "(", ")", "\n", "scores", "=", "[", "0", "]", "*", "len", "(", "obs", ")", "\n", "dones", "=", "[", "False", "]", "*", "len", "(", "obs", ")", "\n", "# agent.eps = random.random() * min(max_randomness, 1)", "\n", "# eprint(\"new randomness: {}\".format(agent.eps))", "\n", "", "", "agent", ".", "save_snapshot", "(", ")", "\n", "eprint", "(", "\"save snapshot epoch: {}\"", ".", "format", "(", "epoch_t", ")", ")", "\n", "", "game_env", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.eval_games.agent_collect_data_v2": [[149, 200], ["agent.select_additional_infos", "textworld.gym.register_games", "gym.make", "deepword.utils.eprint", "gym.make.reset", "range", "gym.make.close", "len", "len", "len", "len", "len", "range", "agent.save_snapshot", "deepword.utils.eprint", "all", "gym.make.step", "gym.make.step", "agent.act", "gym.make.step", "agent.act", "gym.make.reset", "len", "len", "int", "zip"], "function", ["home.repos.pwc.inspect_result.yinxusen_deepword.agents.base_agent.BaseAgent.select_additional_infos", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.utils.eprint", "home.repos.pwc.inspect_result.yinxusen_deepword.agents.base_agent.BaseAgent.reset", "home.repos.pwc.inspect_result.yinxusen_deepword.agents.base_agent.BaseAgent.save_snapshot", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.utils.eprint", "home.repos.pwc.inspect_result.yinxusen_deepword.agents.base_agent.BaseAgent.act", "home.repos.pwc.inspect_result.yinxusen_deepword.agents.base_agent.BaseAgent.act", "home.repos.pwc.inspect_result.yinxusen_deepword.agents.base_agent.BaseAgent.reset"], ["", "def", "agent_collect_data_v2", "(", "\n", "agent", ",", "game_files", ",", "max_episode_steps", ",", "epoch_size", ",", "epoch_limit", ",", "\n", "max_randomness", "=", "0.5", ")", ":", "\n", "    ", "requested_infos", "=", "agent", ".", "select_additional_infos", "(", ")", "\n", "env_id", "=", "textworld", ".", "gym", ".", "register_games", "(", "\n", "game_files", ",", "requested_infos", ",", "batch_size", "=", "1", ",", "\n", "max_episode_steps", "=", "max_episode_steps", "*", "3", ",", "\n", "name", "=", "\"eval\"", ")", "\n", "game_env", "=", "gym", ".", "make", "(", "env_id", ")", "\n", "# use fix randomness value, default 0.5", "\n", "agent", ".", "eps", "=", "max_randomness", "\n", "eprint", "(", "\"new randomness: {}\"", ".", "format", "(", "agent", ".", "eps", ")", ")", "\n", "\n", "obs", ",", "infos", "=", "game_env", ".", "reset", "(", ")", "\n", "scores", "=", "[", "0", "]", "*", "len", "(", "obs", ")", "\n", "dones", "=", "[", "False", "]", "*", "len", "(", "obs", ")", "\n", "steps", "=", "[", "0", "]", "*", "len", "(", "obs", ")", "\n", "# TODO: be cautious about the local variable problem", "\n", "look_res", "=", "[", "\"\"", "]", "*", "len", "(", "obs", ")", "\n", "inventory_res", "=", "[", "\"\"", "]", "*", "len", "(", "obs", ")", "\n", "\n", "for", "epoch_t", "in", "range", "(", "epoch_limit", ")", ":", "\n", "        ", "for", "_", "in", "range", "(", "epoch_size", ")", ":", "\n", "            ", "if", "not", "all", "(", "dones", ")", ":", "\n", "# TODO: get fake description from an extra look per step", "\n", "                ", "look_res", ",", "_", ",", "_", ",", "_", "=", "game_env", ".", "step", "(", "[", "\"look\"", "]", ")", "\n", "infos", "[", "'description'", "]", "=", "look_res", "\n", "inventory_res", ",", "_", ",", "_", ",", "_", "=", "game_env", ".", "step", "(", "[", "\"inventory\"", "]", ")", "\n", "infos", "[", "'inventory'", "]", "=", "inventory_res", "\n", "# Increase step counts.", "\n", "steps", "=", "(", "[", "step", "+", "int", "(", "not", "done", ")", "\n", "for", "step", ",", "done", "in", "zip", "(", "steps", ",", "dones", ")", "]", ")", "\n", "commands", "=", "agent", ".", "act", "(", "obs", ",", "scores", ",", "dones", ",", "infos", ")", "\n", "obs", ",", "scores", ",", "dones", ",", "infos", "=", "game_env", ".", "step", "(", "commands", ")", "\n", "", "else", ":", "\n", "# Let the agent knows the game is done.", "\n", "# last state obs + inv copy previous state", "\n", "# TODO: this is OK for now,", "\n", "# TODO: since we don't use last states for SNN", "\n", "                ", "infos", "[", "'description'", "]", "=", "look_res", "\n", "infos", "[", "'inventory'", "]", "=", "inventory_res", "\n", "agent", ".", "act", "(", "obs", ",", "scores", ",", "dones", ",", "infos", ")", "\n", "\n", "obs", ",", "infos", "=", "game_env", ".", "reset", "(", ")", "\n", "scores", "=", "[", "0", "]", "*", "len", "(", "obs", ")", "\n", "dones", "=", "[", "False", "]", "*", "len", "(", "obs", ")", "\n", "# agent.eps = random.random() * min(max_randomness, 1)", "\n", "# eprint(\"new randomness: {}\".format(agent.eps))", "\n", "", "", "agent", ".", "save_snapshot", "(", ")", "\n", "eprint", "(", "\"save snapshot epoch: {}\"", ".", "format", "(", "epoch_t", ")", ")", "\n", "", "game_env", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.eval_games.agg_eval_results": [[202, 269], ["deepword.stats.mean_confidence_interval", "numpy.asarray", "sum", "sum", "max", "len", "sum", "len", "eval_games.EvalResult", "list", "map", "map", "map", "map", "list", "numpy.zeros_like", "map", "filter", "numpy.sum"], "function", ["home.repos.pwc.inspect_result.yinxusen_deepword.deepword.stats.mean_confidence_interval"], ["", "def", "agg_eval_results", "(", "\n", "eval_results", ":", "Dict", "[", "str", ",", "List", "[", "EvalResult", "]", "]", ",", "\n", "max_steps_per_episode", ":", "int", "=", "100", "\n", ")", "->", "Tuple", "[", "Dict", "[", "str", ",", "EvalResult", "]", ",", "float", ",", "float", ",", "float", ",", "float", ",", "float", ",", "float", "]", ":", "\n", "    ", "\"\"\"\n    Aggregate evaluation results.\n    We run N test games, each with M episodes, each episode has a maximum of\n    K steps.\n\n    Args:\n        eval_results: evaluation results of text-based games, in the\n         following format:\n           dict(game_name, [eval_result1, ..., evaluate_resultM])\n           and the number of eval_results are the same for all games.\n           evaluate_result:\n             score, positive_score, negative_score, max_score, steps,\n              won (bool), used_action_list\n        max_steps_per_episode: i.e. M, default = 100\n\n    Returns:\n        agg_per_game:\n         dict(game_name, sum scores, sum max scores, sum steps, # won)\n        sample_mean: total earned scores / total maximum scores\n        confidence_interval: confidence interval of sample_mean over M episodes.\n        steps: total used steps / total maximum steps\n    \"\"\"", "\n", "agg_per_game", "=", "{", "}", "\n", "total_scores_per_episode", "=", "None", "# np array of shape M", "\n", "total_positive_scores", "=", "0", "\n", "total_negative_scores", "=", "0", "\n", "total_steps", "=", "0", "\n", "max_scores_per_episode", "=", "0", "\n", "total_episodes", "=", "0", "\n", "total_won", "=", "0", "\n", "for", "game_name", "in", "eval_results", ":", "\n", "        ", "res", "=", "eval_results", "[", "game_name", "]", "\n", "agg_score", "=", "np", ".", "asarray", "(", "list", "(", "map", "(", "lambda", "r", ":", "r", ".", "score", ",", "res", ")", ")", ")", "\n", "agg_positive_score", "=", "sum", "(", "map", "(", "lambda", "r", ":", "r", ".", "positive_score", ",", "res", ")", ")", "\n", "agg_negative_score", "=", "sum", "(", "map", "(", "lambda", "r", ":", "r", ".", "negative_score", ",", "res", ")", ")", "\n", "# all max scores should be equal, so just pick anyone", "\n", "agg_max_score", "=", "max", "(", "map", "(", "lambda", "r", ":", "r", ".", "max_score", ",", "res", ")", ")", "\n", "max_scores_per_episode", "+=", "agg_max_score", "\n", "n_episodes", "=", "len", "(", "res", ")", "\n", "total_episodes", "+=", "n_episodes", "\n", "agg_step", "=", "sum", "(", "map", "(", "lambda", "r", ":", "r", ".", "steps", ",", "res", ")", ")", "\n", "agg_nb_won", "=", "len", "(", "list", "(", "filter", "(", "lambda", "r", ":", "r", ".", "won", ",", "res", ")", ")", ")", "\n", "total_won", "+=", "agg_nb_won", "\n", "agg_per_game", "[", "game_name", "]", "=", "EvalResult", "(", "\n", "score", "=", "np", ".", "sum", "(", "agg_score", ")", ",", "\n", "positive_score", "=", "agg_positive_score", ",", "\n", "negative_score", "=", "agg_negative_score", ",", "\n", "max_score", "=", "agg_max_score", "*", "n_episodes", ",", "\n", "steps", "=", "agg_step", ",", "\n", "won", "=", "agg_nb_won", ",", "\n", "action_list", "=", "None", ")", "\n", "if", "total_scores_per_episode", "is", "None", ":", "\n", "            ", "total_scores_per_episode", "=", "np", ".", "zeros_like", "(", "agg_score", ")", "\n", "", "total_scores_per_episode", "+=", "agg_score", "\n", "total_positive_scores", "+=", "agg_positive_score", "\n", "total_negative_scores", "+=", "agg_negative_score", "\n", "total_steps", "+=", "agg_step", "\n", "", "max_steps", "=", "total_episodes", "*", "max_steps_per_episode", "\n", "total_scores_percentage", ",", "confidence_interval", "=", "mean_confidence_interval", "(", "\n", "total_scores_per_episode", "/", "max_scores_per_episode", ")", "\n", "return", "(", "agg_per_game", ",", "total_scores_percentage", ",", "confidence_interval", ",", "\n", "total_positive_scores", ",", "total_negative_scores", ",", "\n", "total_steps", "*", "1.", "/", "max_steps", ",", "total_won", "*", "1.", "/", "total_episodes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.eval_games.scores_of_tiers": [[271, 307], ["agg_per_game.keys", "dict", "list", "list", "list", "list", "list", "list", "filter", "filter", "filter", "filter", "filter", "filter"], "function", ["None"], ["", "def", "scores_of_tiers", "(", "agg_per_game", ":", "Dict", "[", "str", ",", "EvalResult", "]", ")", "->", "Dict", "[", "str", ",", "float", "]", ":", "\n", "    ", "\"\"\"\n    Compute scores per tier given aggregated scores per game\n\n    Args:\n        agg_per_game: Aggregated results per game\n\n    Returns:\n        list of tier-name -> scores, starting from tier1 to tier6\n    \"\"\"", "\n", "games", "=", "agg_per_game", ".", "keys", "(", ")", "\n", "\n", "tiers2games", "=", "{", "\n", "\"tier1\"", ":", "list", "(", "\n", "filter", "(", "lambda", "k", ":", "\"+go\"", "not", "in", "k", "and", "\"recipe1\"", "in", "k", ",", "games", ")", ")", ",", "\n", "\"tier2\"", ":", "list", "(", "\n", "filter", "(", "lambda", "k", ":", "\"+go\"", "not", "in", "k", "and", "\"recipe2\"", "in", "k", ",", "games", ")", ")", ",", "\n", "\"tier3\"", ":", "list", "(", "\n", "filter", "(", "lambda", "k", ":", "\"+go\"", "not", "in", "k", "and", "\"recipe3\"", "in", "k", ",", "games", ")", ")", ",", "\n", "\"tier4\"", ":", "list", "(", "filter", "(", "lambda", "k", ":", "\"+go6\"", "in", "k", ",", "games", ")", ")", ",", "\n", "\"tier5\"", ":", "list", "(", "filter", "(", "lambda", "k", ":", "\"+go9\"", "in", "k", ",", "games", ")", ")", ",", "\n", "\"tier6\"", ":", "list", "(", "filter", "(", "lambda", "k", ":", "\"+go12\"", "in", "k", ",", "games", ")", ")", "\n", "}", "\n", "\n", "tiers2scores", "=", "dict", "(", ")", "\n", "\n", "for", "k_tier", "in", "tiers2games", ":", "\n", "        ", "if", "not", "tiers2games", "[", "k_tier", "]", ":", "\n", "            ", "continue", "\n", "", "earned", "=", "0", "\n", "total", "=", "0", "\n", "for", "g", "in", "tiers2games", "[", "k_tier", "]", ":", "\n", "            ", "earned", "+=", "agg_per_game", "[", "g", "]", ".", "score", "\n", "total", "+=", "agg_per_game", "[", "g", "]", ".", "max_score", "\n", "", "tiers2scores", "[", "k_tier", "]", "=", "earned", "*", "1.", "/", "total", "\n", "", "return", "tiers2scores", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.eval_games.list_checkpoints": [[515, 539], ["os.path.join", "dict", "sorted", "len", "deepword.utils.eprint", "map", "list", "os.path.splitext", "glob.glob", "termcolor.colored", "dict.keys", "int", "fn.split"], "function", ["home.repos.pwc.inspect_result.yinxusen_deepword.deepword.utils.eprint"], ["", "", "", "def", "list_checkpoints", "(", "\n", "model_dir", ":", "str", ",", "range_min", ":", "int", "=", "None", ",", "range_max", ":", "int", "=", "None", "\n", ")", "->", "Tuple", "[", "List", "[", "int", "]", ",", "Dict", "[", "int", ",", "str", "]", "]", ":", "\n", "    ", "\"\"\"\n    list all checkpoints under `model_dir`/last_weights\n    all checkpoints should have the same pattern \"after-epoch-[step]\".\n\n    Returns:\n        sorted list of steps, dict of step to checkpoint file name\n    \"\"\"", "\n", "watched_files", "=", "path", ".", "join", "(", "\n", "model_dir", ",", "\"last_weights\"", ",", "\"after-epoch-*.index\"", ")", "\n", "files", "=", "[", "path", ".", "splitext", "(", "fn", ")", "[", "0", "]", "for", "fn", "in", "glob", ".", "glob", "(", "watched_files", ")", "]", "\n", "if", "len", "(", "files", ")", "==", "0", ":", "\n", "        ", "eprint", "(", "colored", "(", "\"No checkpoint found!\"", ",", "\"red\"", ")", ")", "\n", "return", "[", "]", ",", "{", "}", "\n", "", "step2ckpt", "=", "dict", "(", "map", "(", "lambda", "fn", ":", "(", "int", "(", "fn", ".", "split", "(", "\"-\"", ")", "[", "-", "1", "]", ")", ",", "fn", ")", ",", "files", ")", ")", "\n", "steps", "=", "sorted", "(", "list", "(", "step2ckpt", ".", "keys", "(", ")", ")", ")", "\n", "if", "range_max", "is", "None", ":", "\n", "        ", "range_max", "=", "steps", "[", "-", "1", "]", "\n", "", "if", "range_min", "is", "None", ":", "\n", "        ", "range_min", "=", "steps", "[", "0", "]", "\n", "", "steps", "=", "[", "step", "for", "step", "in", "steps", "if", "range_min", "<=", "step", "<=", "range_max", "]", "\n", "return", "steps", ",", "step2ckpt", "\n", "", ""]], "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.stats.UCBComputer.__init__": [[41, 65], ["numpy.log", "numpy.log"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "d_states", ":", "int", ",", "d_actions", ":", "int", ")", ":", "\n", "        ", "\"\"\"\n        V: covariance matrix for each action a\n        lam: lambda to control parameter size in ridge regression\n        r: R-sub-Gaussian\n        s: bound for |theta_a|_2\n        delta: with probability of 1 - delta, we have the bound\n\n        Args:\n            d_states: dimension of hidden states\n            d_actions: number of actions\n        \"\"\"", "\n", "\n", "self", ".", "V", ":", "Optional", "[", "List", "[", "np", ".", "ndarray", "]", "]", "=", "None", "\n", "self", ".", "log_det_V", ":", "Optional", "[", "List", "[", "np", ".", "ndarray", "]", "]", "=", "None", "\n", "self", ".", "inv_V", ":", "Optional", "[", "List", "[", "np", ".", "ndarray", "]", "]", "=", "None", "\n", "self", ".", "lam", "=", "0.5", "\n", "self", ".", "d_states", "=", "d_states", "\n", "self", ".", "d_actions", "=", "d_actions", "\n", "self", ".", "r", "=", "1", "\n", "self", ".", "s", "=", "1", "\n", "self", ".", "delta", "=", "0.1", "/", "self", ".", "d_actions", "\n", "self", ".", "log_lam", "=", "np", ".", "log", "(", "self", ".", "lam", ")", "\n", "self", ".", "log_delta", "=", "np", ".", "log", "(", "self", ".", "delta", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.stats.UCBComputer.reset": [[66, 75], ["numpy.log", "numpy.linalg.inv", "numpy.eye", "range", "numpy.linalg.det"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        Reset to accept new episodes\n        \"\"\"", "\n", "\n", "self", ".", "V", "=", "[", "\n", "self", ".", "lam", "*", "np", ".", "eye", "(", "self", ".", "d_states", ")", "for", "_", "in", "range", "(", "self", ".", "d_actions", ")", "]", "\n", "self", ".", "log_det_V", "=", "[", "np", ".", "log", "(", "np", ".", "linalg", ".", "det", "(", "a_mat", ")", ")", "for", "a_mat", "in", "self", ".", "V", "]", "\n", "self", ".", "inv_V", "=", "[", "np", ".", "linalg", ".", "inv", "(", "a_mat", ")", "for", "a_mat", "in", "self", ".", "V", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.stats.UCBComputer.collect_sample": [[76, 88], ["numpy.outer", "numpy.log", "numpy.linalg.inv", "numpy.linalg.det"], "methods", ["None"], ["", "def", "collect_sample", "(", "self", ",", "action_idx", ":", "int", ",", "h_state", ":", "np", ".", "ndarray", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        Collect state-action pairs\n\n        Args:\n            action_idx: action index\n            h_state: hidden state vector\n        \"\"\"", "\n", "\n", "self", ".", "V", "[", "action_idx", "]", "+=", "np", ".", "outer", "(", "h_state", ",", "h_state", ")", "\n", "self", ".", "log_det_V", "[", "action_idx", "]", "=", "np", ".", "log", "(", "np", ".", "linalg", ".", "det", "(", "self", ".", "V", "[", "action_idx", "]", ")", ")", "\n", "self", ".", "inv_V", "[", "action_idx", "]", "=", "np", ".", "linalg", ".", "inv", "(", "self", ".", "V", "[", "action_idx", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.stats.UCBComputer.aps_bound": [[89, 110], ["numpy.squeeze", "numpy.sqrt", "numpy.sqrt", "numpy.asarray", "numpy.max", "numpy.asarray", "numpy.sqrt", "numpy.matmul", "numpy.matmul", "numpy.transpose"], "methods", ["None"], ["", "def", "aps_bound", "(", "self", ",", "q_actions", ":", "np", ".", "ndarray", ",", "h_state", ":", "np", ".", "ndarray", ")", "->", "float", ":", "\n", "        ", "\"\"\"\n        Compute APS bound\n\n        Args:\n            q_actions: Q-vector of actions\n            h_state: hidden state of a game state\n\n        Returns\n            upper confidence bound of q_actions.\n        \"\"\"", "\n", "\n", "f", "=", "(", "0.5", "*", "np", ".", "asarray", "(", "self", ".", "log_det_V", ")", "-", "\n", "0.5", "*", "self", ".", "d_states", "*", "self", ".", "log_lam", "-", "self", ".", "log_delta", ")", "\n", "coeff", "=", "self", ".", "r", "*", "np", ".", "sqrt", "(", "2", "*", "f", ")", "+", "np", ".", "sqrt", "(", "self", ".", "lam", ")", "*", "self", ".", "s", "\n", "bound", "=", "coeff", "*", "np", ".", "squeeze", "(", "np", ".", "asarray", "(", "[", "\n", "np", ".", "sqrt", "(", "np", ".", "matmul", "(", "np", ".", "matmul", "(", "np", ".", "transpose", "(", "h_state", ")", ",", "inv_v", ")", ",", "h_state", ")", ")", "\n", "for", "inv_v", "in", "self", ".", "inv_V", "]", ")", ")", "\n", "normed_bound", "=", "bound", "/", "(", "np", ".", "max", "(", "bound", ")", "+", "0.01", ")", "\n", "ucb_q_actions", "=", "q_actions", "+", "0.2", "*", "normed_bound", "\n", "return", "ucb_q_actions", "\n", "", "", ""]], "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.stats.mean_confidence_interval": [[7, 26], ["len", "numpy.array", "float", "scipy.stats.sem", "scipy.stats.t.ppf", "numpy.mean"], "function", ["None"], ["def", "mean_confidence_interval", "(", "\n", "data", ":", "np", ".", "ndarray", ",", "confidence", ":", "float", "=", "0.95", ")", "->", "Tuple", "[", "float", ",", "float", "]", ":", "\n", "    ", "\"\"\"\n    Given data, 1D np array, compute the mean and confidence intervals given\n    confidence level.\n\n    Args:\n        data: 1D np array\n        confidence: confidence level\n\n    Returns:\n        mean and confidence interval\n    \"\"\"", "\n", "\n", "a", "=", "1.0", "*", "np", ".", "array", "(", "data", ")", "\n", "n", "=", "len", "(", "a", ")", "\n", "m", ",", "se", "=", "float", "(", "np", ".", "mean", "(", "a", ")", ")", ",", "stats", ".", "sem", "(", "a", ")", "\n", "h", "=", "se", "*", "stats", ".", "t", ".", "ppf", "(", "(", "1", "+", "confidence", ")", "/", "2.", ",", "n", "-", "1", ")", "\n", "return", "m", ",", "h", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.sum_tree.SumTree.__init__": [[18, 32], ["numpy.zeros", "numpy.zeros"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "capacity", ":", "int", ")", ":", "\n", "# Number of leaf nodes (final nodes) that contains experiences", "\n", "        ", "self", ".", "capacity", "=", "capacity", "\n", "self", ".", "data_pointer", "=", "0", "\n", "# Generate the tree with all nodes values = 0", "\n", "# To understand this calculation (2 * capacity - 1)", "\n", "# Remember we are in a binary node (each node has max 2 children)", "\n", "# so 2x size of leaf (capacity) - 1 (root node)", "\n", "# Parent nodes = capacity - 1", "\n", "# Leaf nodes = capacity", "\n", "self", ".", "tree", "=", "np", ".", "zeros", "(", "2", "*", "capacity", "-", "1", ")", "\n", "\n", "# Contains the experiences (so the size of data is capacity)", "\n", "self", ".", "data", "=", "np", ".", "zeros", "(", "capacity", ",", "dtype", "=", "object", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.sum_tree.SumTree.__repr__": [[33, 35], ["str"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", "->", "str", ":", "\n", "        ", "return", "str", "(", "self", ".", "tree", "[", "-", "self", ".", "capacity", ":", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.sum_tree.SumTree.add": [[36, 61], ["sum_tree.SumTree.update"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.deepword.sum_tree.SumTree.update"], ["", "def", "add", "(", "self", ",", "priority", ":", "float", ",", "data", ":", "E", ")", ":", "\n", "        ", "\"\"\"\n        Add an experience into the tree with a priority\n\n        Args:\n            priority: priority of sampling\n            data: experience of the replay\n\n        Returns:\n            old data at the same position, 0 if unset\n        \"\"\"", "\n", "prev_data", "=", "self", ".", "data", "[", "self", ".", "data_pointer", "]", "\n", "self", ".", "data", "[", "self", ".", "data_pointer", "]", "=", "data", "\n", "\n", "# turn data_pointer to tree_index", "\n", "tree_index", "=", "self", ".", "data_pointer", "+", "self", ".", "capacity", "-", "1", "\n", "# Update the leaf", "\n", "self", ".", "update", "(", "tree_index", ",", "priority", ")", "\n", "\n", "# data_pointer moves to the next position", "\n", "self", ".", "data_pointer", "+=", "1", "\n", "# If we're above the capacity, go back to first index (we overwrite)", "\n", "if", "self", ".", "data_pointer", ">=", "self", ".", "capacity", ":", "\n", "            ", "self", ".", "data_pointer", "=", "0", "\n", "", "return", "prev_data", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.sum_tree.SumTree.update": [[62, 78], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "tree_index", ":", "int", ",", "priority", ":", "float", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        Update the leaf priority score and propagate the change through tree\n\n        Args:\n            tree_index: tree index of the current data_pointer\n            priority: priority sampling value\n        \"\"\"", "\n", "# Change = new priority score - former priority score", "\n", "change", "=", "priority", "-", "self", ".", "tree", "[", "tree_index", "]", "\n", "self", ".", "tree", "[", "tree_index", "]", "=", "priority", "\n", "\n", "# then propagate the change through tree, until the root", "\n", "while", "tree_index", "!=", "0", ":", "\n", "            ", "tree_index", "=", "(", "tree_index", "-", "1", ")", "//", "2", "\n", "self", ".", "tree", "[", "tree_index", "]", "+=", "change", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.sum_tree.SumTree.get_leaf": [[79, 109], ["len"], "methods", ["None"], ["", "", "def", "get_leaf", "(", "self", ",", "v", ":", "float", ")", "->", "Tuple", "[", "int", ",", "float", ",", "E", "]", ":", "\n", "        ", "\"\"\"\n        Get a leaf_index w.r.t. a priority value\n        the selected leaf_index must have the smallest priority among all leaves\n        that have larger priority values than v.\n\n        Args:\n            v: a priority value\n\n        Returns:\n            leaf index, priority, and experience associated with the leaf index\n        \"\"\"", "\n", "parent_index", "=", "0", "\n", "while", "True", ":", "\n", "            ", "left_child_index", "=", "2", "*", "parent_index", "+", "1", "\n", "right_child_index", "=", "left_child_index", "+", "1", "\n", "\n", "# If we reach bottom, end the search", "\n", "if", "left_child_index", ">=", "len", "(", "self", ".", "tree", ")", ":", "\n", "                ", "leaf_index", "=", "parent_index", "\n", "break", "\n", "", "else", ":", "# downward search", "\n", "                ", "if", "v", "<=", "self", ".", "tree", "[", "left_child_index", "]", ":", "\n", "                    ", "parent_index", "=", "left_child_index", "\n", "", "else", ":", "\n", "                    ", "v", "-=", "self", ".", "tree", "[", "left_child_index", "]", "\n", "parent_index", "=", "right_child_index", "\n", "\n", "", "", "", "data_index", "=", "leaf_index", "-", "self", ".", "capacity", "+", "1", "\n", "return", "leaf_index", ",", "self", ".", "tree", "[", "leaf_index", "]", ",", "self", ".", "data", "[", "data_index", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.sum_tree.SumTree.total_priority": [[110, 116], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "total_priority", "(", "self", ")", "->", "float", ":", "\n", "        ", "\"\"\"\n        The total priority is the value on the root node.\n        \"\"\"", "\n", "return", "self", ".", "tree", "[", "0", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.log.Logging.__init__": [[11, 22], ["logging.getLogger", "logging.getLogger", "logging.getLogger", "logging.getLogger"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "name", ":", "Optional", "[", "str", "]", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            name: name for logging, default module_name.class_name\n        \"\"\"", "\n", "\n", "if", "name", "is", "None", ":", "\n", "            ", "cls_name", "=", "self", ".", "__class__", ".", "__name__", "\n", "module_name", "=", "self", ".", "__module__", "\n", "name", "=", "'{}.{}'", ".", "format", "(", "module_name", ",", "cls_name", ")", "\n", "", "self", ".", "__logger", "=", "logging", ".", "getLogger", "(", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.log.Logging.info": [[23, 25], ["log.Logging.__logger.info"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.deepword.log.Logging.info"], ["", "def", "info", "(", "self", ",", "msg", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "__logger", ".", "info", "(", "msg", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.log.Logging.debug": [[26, 28], ["log.Logging.__logger.debug"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.deepword.log.Logging.debug"], ["", "def", "debug", "(", "self", ",", "msg", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "__logger", ".", "debug", "(", "msg", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.log.Logging.warning": [[29, 31], ["log.Logging.__logger.warn"], "methods", ["None"], ["", "def", "warning", "(", "self", ",", "msg", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "__logger", ".", "warn", "(", "msg", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.log.Logging.error": [[32, 34], ["log.Logging.__logger.error"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.deepword.log.Logging.error"], ["", "def", "error", "(", "self", ",", "msg", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "__logger", ".", "error", "(", "msg", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.tree_memory.TreeMemory.__init__": [[22, 31], ["super().__init__", "deepword.sum_tree.SumTree"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.models.drrn_modeling.PseudoSeq2SeqDRRN.__init__"], ["def", "__init__", "(", "self", ",", "capacity", ":", "int", ")", ":", "\n", "        ", "super", "(", "TreeMemory", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "tree", "=", "SumTree", "(", "capacity", ")", "\n", "self", ".", "used_buffer_size", "=", "0", "\n", "self", ".", "per_e", "=", "0.01", "# to avoid zero probability", "\n", "self", ".", "per_a", "=", "0.6", "# tradeoff between sampling ~ priority and random", "\n", "self", ".", "per_b", "=", "0.4", "# importance-sampling, increasing to 1", "\n", "self", ".", "per_b_inc_step", "=", "0.001", "# inc per_b per sampling", "\n", "self", ".", "abs_err_upper_bound", "=", "1.", "# clip the error", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.tree_memory.TreeMemory.__len__": [[32, 34], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", "->", "int", ":", "\n", "        ", "return", "self", ".", "used_buffer_size", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.tree_memory.TreeMemory.append": [[35, 54], ["numpy.max", "tree_memory.TreeMemory.tree.add"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.deepword.sum_tree.SumTree.add"], ["", "def", "append", "(", "self", ",", "experience", ":", "E", ")", "->", "E", ":", "\n", "        ", "\"\"\"\n        New experiences have a score of max priority over all leaves to make\n        sure to be sampled.\n\n        Args:\n            experience: a new experience\n\n        Returns:\n            previous experience in the same position\n        \"\"\"", "\n", "# find the max priority over leaves", "\n", "max_priority", "=", "np", ".", "max", "(", "self", ".", "tree", ".", "tree", "[", "-", "self", ".", "tree", ".", "capacity", ":", "]", ")", "\n", "max_priority", "=", "(", "\n", "self", ".", "abs_err_upper_bound", "if", "max_priority", "==", "0", "else", "max_priority", ")", "\n", "prev_data", "=", "self", ".", "tree", ".", "add", "(", "max_priority", ",", "experience", ")", "\n", "if", "self", ".", "used_buffer_size", "<", "self", ".", "tree", ".", "capacity", ":", "\n", "            ", "self", ".", "used_buffer_size", "+=", "1", "\n", "", "return", "prev_data", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.tree_memory.TreeMemory.uniform_sample_batch": [[55, 67], ["numpy.random.choice"], "methods", ["None"], ["", "def", "uniform_sample_batch", "(", "self", ",", "n", ":", "int", ")", "->", "np", ".", "ndarray", ":", "\n", "        ", "\"\"\"\n        Randomly sample a batch of experiences\n\n        Args:\n            n: batch size\n\n        Returns:\n            a batch of experiences\n        \"\"\"", "\n", "return", "np", ".", "random", ".", "choice", "(", "\n", "self", ".", "tree", ".", "data", "[", ":", "-", "self", ".", "used_buffer_size", "]", ",", "size", "=", "n", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.tree_memory.TreeMemory.sample_batch": [[68, 122], ["numpy.empty", "numpy.empty", "min", "numpy.power", "range", "numpy.min", "numpy.random.uniform", "tree_memory.TreeMemory.tree.get_leaf", "memory_b.append", "numpy.power"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.deepword.sum_tree.SumTree.get_leaf", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.tree_memory.TreeMemory.append"], ["", "def", "sample_batch", "(", "self", ",", "n", ":", "int", ")", "->", "Tuple", "[", "np", ".", "ndarray", ",", "List", "[", "E", "]", ",", "np", ".", "ndarray", "]", ":", "\n", "        ", "\"\"\"\n        Sample a batch of experiences according to priority values\n\n        - First, to sample a batch of n size, the range [0, priority_total] is\n          divided into n equally ranges.\n        - Then a value is uniformly sampled from each range\n        - We search in the `SumTree`, the experience where priority score\n          correspond to sample values are retrieved from.\n        - Then, we calculate importance sampling (IS) weights\n          for each element in the batch\n\n        Args:\n            n: batch size\n\n        Returns:\n            tree index, experiences, IS weights\n        \"\"\"", "\n", "memory_b", "=", "[", "]", "\n", "b_idx", "=", "np", ".", "empty", "(", "(", "n", ",", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "b_is_weights", "=", "np", ".", "empty", "(", "(", "n", ",", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "# Calculate the priority segment", "\n", "priority_segment", "=", "self", ".", "tree", ".", "total_priority", "/", "n", "\n", "\n", "# Here we increasing the PER_b each time we sample a new batch", "\n", "self", ".", "per_b", "=", "min", "(", "1.", ",", "self", ".", "per_b", "+", "self", ".", "per_b_inc_step", ")", "\n", "\n", "# Calculating the max_weight", "\n", "p_min", "=", "(", "np", ".", "min", "(", "\n", "self", ".", "tree", ".", "tree", "[", "-", "self", ".", "tree", ".", "capacity", ":", "]", "[", ":", "self", ".", "used_buffer_size", "]", ")", "/", "\n", "self", ".", "tree", ".", "total_priority", ")", "\n", "max_weight", "=", "np", ".", "power", "(", "p_min", "*", "self", ".", "used_buffer_size", ",", "-", "self", ".", "per_b", ")", "\n", "\n", "for", "i", "in", "range", "(", "n", ")", ":", "\n", "# A value is uniformly sample from each range", "\n", "            ", "a", ",", "b", "=", "priority_segment", "*", "i", ",", "priority_segment", "*", "(", "i", "+", "1", ")", "\n", "value", "=", "np", ".", "random", ".", "uniform", "(", "a", ",", "b", ")", "\n", "\n", "# Experience that correspond to each value is retrieved", "\n", "index", ",", "priority", ",", "data", "=", "self", ".", "tree", ".", "get_leaf", "(", "value", ")", "\n", "\n", "# P(i)", "\n", "sampling_probabilities", "=", "priority", "/", "self", ".", "tree", ".", "total_priority", "\n", "\n", "#  IS = (1/N * 1/P(i))**b /max wi == (N*P(i))**-b  /max wi", "\n", "b_is_weights", "[", "i", "]", "=", "np", ".", "power", "(", "\n", "self", ".", "used_buffer_size", "*", "sampling_probabilities", ",", "\n", "-", "self", ".", "per_b", ")", "/", "max_weight", "\n", "b_idx", "[", "i", "]", "=", "index", "\n", "\n", "memory_b", ".", "append", "(", "data", ")", "\n", "\n", "", "return", "b_idx", ",", "memory_b", ",", "b_is_weights", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.tree_memory.TreeMemory.batch_update": [[123, 137], ["numpy.minimum", "numpy.power", "zip", "tree_memory.TreeMemory.tree.update"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.deepword.sum_tree.SumTree.update"], ["", "def", "batch_update", "(", "\n", "self", ",", "tree_idx", ":", "np", ".", "ndarray", ",", "abs_errors", ":", "np", ".", "ndarray", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        Update the priorities on the tree\n\n        Args:\n            tree_idx: an array of index (int)\n            abs_errors: an array of abs errors (float)\n        \"\"\"", "\n", "abs_errors", "+=", "self", ".", "per_e", "# avoid 0", "\n", "clipped_errors", "=", "np", ".", "minimum", "(", "abs_errors", ",", "self", ".", "abs_err_upper_bound", ")", "\n", "ps", "=", "np", ".", "power", "(", "clipped_errors", ",", "self", ".", "per_a", ")", "\n", "for", "ti", ",", "p", "in", "zip", "(", "tree_idx", ",", "ps", ")", ":", "\n", "            ", "self", ".", "tree", ".", "update", "(", "ti", ",", "p", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.tree_memory.TreeMemory.save_memo": [[138, 149], ["numpy.savez"], "methods", ["None"], ["", "", "def", "save_memo", "(", "self", ",", "path", ":", "str", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        Save the memory to a npz file\n\n        Args:\n            path: path to a npz file\n        \"\"\"", "\n", "np", ".", "savez", "(", "\n", "path", ",", "tree", "=", "self", ".", "tree", ".", "tree", ",", "data", "=", "self", ".", "tree", ".", "data", ",", "\n", "data_pointer", "=", "self", ".", "tree", ".", "data_pointer", ",", "\n", "used_buffer_size", "=", "self", ".", "used_buffer_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.tree_memory.TreeMemory.load_memo": [[150, 163], ["numpy.load"], "methods", ["None"], ["", "def", "load_memo", "(", "self", ",", "path", ":", "str", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        load memo only apply to a new memo without any appending.\n        load memo will change previous tree structure.\n\n        Args:\n            path: a npz file to load\n        \"\"\"", "\n", "memo", "=", "np", ".", "load", "(", "path", ",", "allow_pickle", "=", "True", ")", "\n", "self", ".", "tree", ".", "tree", "=", "memo", "[", "\"tree\"", "]", "\n", "self", ".", "tree", ".", "data", "=", "memo", "[", "\"data\"", "]", "\n", "self", ".", "tree", ".", "data_pointer", "=", "memo", "[", "\"data_pointer\"", "]", "\n", "self", ".", "used_buffer_size", "=", "memo", "[", "\"used_buffer_size\"", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.hparams.get_model_hparams": [[91, 98], ["hparams.copy_hparams", "ValueError"], "function", ["home.repos.pwc.inspect_result.yinxusen_deepword.deepword.hparams.copy_hparams"], ["def", "get_model_hparams", "(", "model_creator", ":", "str", ")", "->", "HParams", ":", "\n", "    ", "try", ":", "\n", "        ", "model_hparams", "=", "copy_hparams", "(", "default_config", "[", "model_creator", "]", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "        ", "raise", "ValueError", "(", "\n", "'unknown model creator: {}\\n{}'", ".", "format", "(", "model_creator", ",", "e", ")", ")", "\n", "", "return", "model_hparams", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.hparams.output_hparams": [[321, 330], ["sorted", "out_str.append", "out_str.append", "list", "deepword.utils.report_status", "hp.values().items", "hp.values"], "function", ["home.repos.pwc.inspect_result.yinxusen_deepword.deepword.tree_memory.TreeMemory.append", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.tree_memory.TreeMemory.append", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.utils.report_status"], ["def", "output_hparams", "(", "hp", ":", "HParams", ")", "->", "str", ":", "\n", "    ", "\"\"\"\n    pretty print str in a table style for hp\n    \"\"\"", "\n", "out_str", "=", "[", "'------------hparams---------------'", "]", "\n", "hp_dict", "=", "sorted", "(", "list", "(", "hp", ".", "values", "(", ")", ".", "items", "(", ")", ")", ",", "key", "=", "lambda", "x", ":", "x", "[", "0", "]", ")", "\n", "out_str", ".", "append", "(", "report_status", "(", "hp_dict", ")", ")", "\n", "out_str", ".", "append", "(", "'-----------------------------------'", ")", "\n", "return", "\"\\n\"", "+", "\"\\n\"", ".", "join", "(", "out_str", ")", "+", "\"\\n\"", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.hparams.update_hparams_from_dict": [[332, 350], ["hp.set_hparam"], "function", ["None"], ["", "def", "update_hparams_from_dict", "(", "\n", "hp", ":", "HParams", ",", "cmd_args", ":", "Dict", "[", "str", ",", "Any", "]", ",", "\n", "allowed_to_change", ":", "Optional", "[", "Iterable", "[", "str", "]", "]", "=", "None", ")", "->", "HParams", ":", "\n", "    ", "\"\"\"\n    update hp from a dict\n    Args:\n        hp: hyperparameters\n        cmd_args: command line arguments\n        allowed_to_change: keys that are allowed to update\n\n    Returns:\n        a hp\n    \"\"\"", "\n", "for", "hp_key", "in", "cmd_args", ":", "\n", "        ", "if", "(", "hp_key", "in", "hp", "and", "cmd_args", "[", "hp_key", "]", "is", "not", "None", "and", "\n", "(", "hp_key", "in", "allowed_to_change", "if", "allowed_to_change", "else", "True", ")", ")", ":", "\n", "            ", "hp", ".", "set_hparam", "(", "hp_key", ",", "cmd_args", "[", "hp_key", "]", ")", "\n", "", "", "return", "hp", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.hparams.update_hparams_from_hparams": [[352, 364], ["hp2.values", "hp.add_hparam", "hp.set_hparam", "hp2.values.get", "hp2.values.get"], "function", ["home.repos.pwc.inspect_result.yinxusen_deepword.students.student_learner.CMD.get", "home.repos.pwc.inspect_result.yinxusen_deepword.students.student_learner.CMD.get"], ["", "def", "update_hparams_from_hparams", "(", "hp", ":", "HParams", ",", "hp2", ":", "HParams", ")", "->", "HParams", ":", "\n", "    ", "\"\"\"\n    update hp from hp2\n    hp should not have same keys with hp2\n    \"\"\"", "\n", "dict_hp2", "=", "hp2", ".", "values", "(", ")", "\n", "for", "k", "in", "dict_hp2", ":", "\n", "        ", "if", "k", "not", "in", "hp", ":", "\n", "            ", "hp", ".", "add_hparam", "(", "k", ",", "dict_hp2", ".", "get", "(", "k", ")", ")", "\n", "", "else", ":", "\n", "            ", "hp", ".", "set_hparam", "(", "k", ",", "dict_hp2", ".", "get", "(", "k", ")", ")", "\n", "", "", "return", "hp", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.hparams.update_hparams_from_file": [[366, 378], ["open", "json.load", "hp.set_hparam", "json.load.get"], "function", ["home.repos.pwc.inspect_result.yinxusen_deepword.students.student_learner.CMD.get"], ["", "def", "update_hparams_from_file", "(", "hp", ":", "HParams", ",", "file_args", ":", "str", ")", "->", "HParams", ":", "\n", "    ", "\"\"\"\n    update hp from a json file\n    \"\"\"", "\n", "with", "open", "(", "file_args", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "json_val", "=", "json", ".", "load", "(", "f", ")", "\n", "for", "k", "in", "json_val", ":", "\n", "            ", "if", "k", "in", "hp", ":", "\n", "                ", "hp", ".", "set_hparam", "(", "k", ",", "json_val", ".", "get", "(", "k", ")", ")", "\n", "", "else", ":", "\n", "                ", "pass", "\n", "", "", "", "return", "hp", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.hparams.copy_hparams": [[380, 389], ["tensorflow.contrib.training.HParams", "hp.values", "tensorflow.contrib.training.HParams.add_hparam", "hp.values.get"], "function", ["home.repos.pwc.inspect_result.yinxusen_deepword.students.student_learner.CMD.get"], ["", "def", "copy_hparams", "(", "hp", ":", "HParams", ")", "->", "HParams", ":", "\n", "    ", "\"\"\"\n    Deepcopy for hp\n    \"\"\"", "\n", "hp2", "=", "HParams", "(", ")", "\n", "dict_hp", "=", "hp", ".", "values", "(", ")", "\n", "for", "k", "in", "dict_hp", ":", "\n", "        ", "hp2", ".", "add_hparam", "(", "k", ",", "dict_hp", ".", "get", "(", "k", ")", ")", "\n", "", "return", "hp2", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.hparams.has_valid_val": [[391, 399], ["None"], "function", ["None"], ["", "def", "has_valid_val", "(", "dict_args", ":", "Optional", "[", "Dict", "[", "str", ",", "Any", "]", "]", ",", "key", ":", "str", ")", "->", "bool", ":", "\n", "    ", "\"\"\"\n    1. if dict_args exists\n    2. if key in dict_args\n    3. if dict_args[key] is not None\n    \"\"\"", "\n", "return", "(", "dict_args", "is", "not", "None", "and", "key", "in", "dict_args", "\n", "and", "dict_args", "[", "key", "]", "is", "not", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.hparams.load_hparams": [[401, 479], ["hparams.get_model_hparams", "hparams.get_model_hparams", "hparams.update_hparams_from_hparams", "hparams.update_hparams_from_file", "hparams.update_hparams_from_file", "open", "ruamel.yaml.safe_load", "hparams.has_valid_val", "hparams.has_valid_val", "hparams.update_hparams_from_dict", "hparams.update_hparams_from_dict", "hparams.update_hparams_from_dict", "f.read", "ValueError", "ValueError", "hparams.update_hparams_from_dict", "hparams.update_hparams_from_dict", "ValueError"], "function", ["home.repos.pwc.inspect_result.yinxusen_deepword.deepword.hparams.get_model_hparams", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.hparams.get_model_hparams", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.hparams.update_hparams_from_hparams", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.hparams.update_hparams_from_file", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.hparams.update_hparams_from_file", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.hparams.has_valid_val", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.hparams.has_valid_val", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.hparams.update_hparams_from_dict", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.hparams.update_hparams_from_dict", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.hparams.update_hparams_from_dict", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.hparams.update_hparams_from_dict", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.hparams.update_hparams_from_dict"], ["", "def", "load_hparams", "(", "\n", "fn_model_config", ":", "Optional", "[", "str", "]", "=", "None", ",", "\n", "cmd_args", ":", "Optional", "[", "Dict", "[", "str", ",", "Any", "]", "]", "=", "None", ",", "\n", "fn_pre_config", ":", "Optional", "[", "str", "]", "=", "None", ")", "->", "HParams", ":", "\n", "    ", "\"\"\"\n    load hyper-parameters\n    priority(file_args) > priority(cmd_args) except arg in allowed_to_change\n    priority(cmd_args) > priority(pre_config)\n    priority(pre_config) > priority(default)\n\n    Args:\n        fn_model_config: hyperparameter config file in `model_dir`\n        cmd_args: command line arguments\n        fn_pre_config: pre config file for model\n\n    Returns:\n        hp\n    \"\"\"", "\n", "allowed_to_change", "=", "[", "\n", "\"model_dir\"", ",", "\"eval_episode\"", ",", "\"game_episode_terminal_t\"", ",", "\n", "\"batch_size\"", ",", "\"learning_rate\"", ",", "\"always_compute_policy\"", ",", "\n", "\"max_snapshot_to_keep\"", ",", "\"start_t_ignore_model_t\"", ",", "\"annealing_eps_t\"", ",", "\n", "\"collect_floor_plan\"", ",", "\"init_eps\"", ",", "\"final_eps\"", ",", "\"save_gap_t\"", ",", "\n", "\"agent_clazz\"", ",", "\"policy_to_action\"", ",", "\"policy_sampling_temp\"", ",", "\n", "\"action_file\"", ",", "\"policy_eps\"", ",", "\"observation_t\"", ",", "\"append_objective_to_tj\"", ",", "\n", "\"walkthrough_guided_exploration\"", ",", "\"prob_complete_walkthrough\"", "\n", "]", "\n", "\n", "if", "fn_pre_config", ":", "\n", "        ", "with", "open", "(", "fn_pre_config", ",", "'rt'", ")", "as", "f", ":", "\n", "            ", "pre_config", "=", "ruamel", ".", "yaml", ".", "safe_load", "(", "f", ".", "read", "(", ")", ")", "\n", "", "", "else", ":", "\n", "        ", "pre_config", "=", "None", "\n", "\n", "", "hp", "=", "get_model_hparams", "(", "\"default\"", ")", "\n", "if", "fn_model_config", "is", "not", "None", ":", "\n", "        ", "hp", "=", "update_hparams_from_file", "(", "hp", ",", "fn_model_config", ")", "\n", "model_creator", "=", "hp", ".", "model_creator", "\n", "", "else", ":", "\n", "        ", "cmd_mc", "=", "(", "\n", "cmd_args", "[", "\"model_creator\"", "]", "\n", "if", "has_valid_val", "(", "cmd_args", ",", "\"model_creator\"", ")", "else", "None", ")", "\n", "pre_conf_mc", "=", "(", "\n", "pre_config", "[", "\"model_creator\"", "]", "\n", "if", "has_valid_val", "(", "pre_config", ",", "\"model_creator\"", ")", "else", "None", ")", "\n", "if", "cmd_mc", "and", "pre_conf_mc", ":", "\n", "            ", "if", "cmd_mc", "==", "pre_conf_mc", ":", "\n", "                ", "model_creator", "=", "cmd_mc", "\n", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "\n", "\"model_creator incompatible from cmd args ({})\"", "\n", "\" and pre_config file ({})\"", ".", "format", "(", "cmd_mc", ",", "pre_conf_mc", ")", ")", "\n", "", "", "elif", "cmd_mc", "or", "pre_conf_mc", ":", "\n", "            ", "model_creator", "=", "cmd_mc", "if", "cmd_mc", "else", "pre_conf_mc", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"model_creator doesn't exist. if run training, specify model\"", "\n", "\"_creator, if run evaluation, make sure hparams.json exists.\"", ")", "\n", "\n", "", "", "model_hp", "=", "get_model_hparams", "(", "model_creator", ")", "\n", "hp", "=", "update_hparams_from_hparams", "(", "hp", ",", "model_hp", ")", "\n", "\n", "# second load hp from file to change params back", "\n", "if", "fn_model_config", "is", "not", "None", ":", "\n", "        ", "hp", "=", "update_hparams_from_file", "(", "hp", ",", "fn_model_config", ")", "\n", "if", "pre_config", "is", "not", "None", ":", "\n", "            ", "hp", "=", "update_hparams_from_dict", "(", "hp", ",", "pre_config", ",", "allowed_to_change", ")", "\n", "", "if", "cmd_args", "is", "not", "None", ":", "\n", "            ", "hp", "=", "update_hparams_from_dict", "(", "hp", ",", "cmd_args", ",", "allowed_to_change", ")", "\n", "", "", "elif", "cmd_args", "is", "not", "None", ":", "\n", "        ", "if", "pre_config", "is", "not", "None", ":", "\n", "            ", "hp", "=", "update_hparams_from_dict", "(", "hp", ",", "pre_config", ")", "\n", "", "hp", "=", "update_hparams_from_dict", "(", "hp", ",", "cmd_args", ")", "\n", "", "elif", "pre_config", "is", "not", "None", ":", "\n", "        ", "hp", "=", "update_hparams_from_dict", "(", "hp", ",", "pre_config", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"file_args and cmd_args are both None\"", ")", "\n", "", "return", "hp", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.hparams.save_hparams": [[481, 490], ["open", "hparams.copy_hparams", "copy_hparams.set_hparam", "f.write", "f.write", "copy_hparams.to_json"], "function", ["home.repos.pwc.inspect_result.yinxusen_deepword.deepword.hparams.copy_hparams"], ["", "def", "save_hparams", "(", "hp", ":", "HParams", ",", "file_path", ":", "str", ")", "->", "None", ":", "\n", "    ", "\"\"\"\n    Save hyperparameters to a json file\n    \"\"\"", "\n", "with", "open", "(", "file_path", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "new_hp", "=", "copy_hparams", "(", "hp", ")", "\n", "new_hp", ".", "set_hparam", "(", "\"model_dir\"", ",", "\".\"", ")", "\n", "f", ".", "write", "(", "new_hp", ".", "to_json", "(", ")", ")", "\n", "f", ".", "write", "(", "\"\\n\"", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.utils.get_hash": [[23, 28], ["hashlib.md5().hexdigest", "hashlib.md5", "txt.encode"], "function", ["None"], ["def", "get_hash", "(", "txt", ":", "str", ")", "->", "str", ":", "\n", "    ", "\"\"\"\n    get hex hash value for a string\n    \"\"\"", "\n", "return", "hashlib", ".", "md5", "(", "txt", ".", "encode", "(", "\"utf-8\"", ")", ")", ".", "hexdigest", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.utils.eprint": [[30, 35], ["print"], "function", ["None"], ["", "def", "eprint", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"\n    print to stderr\n    \"\"\"", "\n", "print", "(", "*", "args", ",", "file", "=", "sys", ".", "stderr", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.utils.flatmap": [[37, 42], ["list", "itertools.chain.from_iterable", "map"], "function", ["None"], ["", "def", "flatmap", "(", "f", ",", "items", ")", ":", "\n", "    ", "\"\"\"\n    flatmap for python\n    \"\"\"", "\n", "return", "list", "(", "chain", ".", "from_iterable", "(", "map", "(", "f", ",", "items", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.utils.flatten": [[44, 49], ["list", "itertools.chain.from_iterable"], "function", ["None"], ["", "def", "flatten", "(", "items", ")", ":", "\n", "    ", "\"\"\"\n    flatten a list of lists to a list\n    \"\"\"", "\n", "return", "list", "(", "chain", ".", "from_iterable", "(", "items", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.utils.uniq": [[51, 58], ["set", "seen_add"], "function", ["home.repos.pwc.inspect_result.yinxusen_deepword.students.student_learner.CMD.set"], ["", "def", "uniq", "(", "lst", ")", ":", "\n", "    ", "\"\"\"\n    order-preserving unique\n    \"\"\"", "\n", "seen", "=", "set", "(", ")", "\n", "seen_add", "=", "seen", ".", "add", "\n", "return", "[", "x", "for", "x", "in", "lst", "if", "not", "(", "x", "in", "seen", "or", "seen_add", "(", "x", ")", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.utils.load_uniq_lines": [[60, 67], ["utils.uniq", "open", "map", "f.readlines", "l.strip"], "function", ["home.repos.pwc.inspect_result.yinxusen_deepword.deepword.utils.uniq"], ["", "def", "load_uniq_lines", "(", "fname", ":", "str", ")", "->", "List", "[", "str", "]", ":", "\n", "    ", "\"\"\"\n    Load unique lines from a file, line order preserved\n    \"\"\"", "\n", "with", "open", "(", "fname", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "lines", "=", "map", "(", "lambda", "l", ":", "l", ".", "strip", "(", ")", ",", "f", ".", "readlines", "(", ")", ")", "\n", "", "return", "uniq", "(", "lines", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.utils.load_vocab": [[69, 74], ["utils.load_uniq_lines"], "function", ["home.repos.pwc.inspect_result.yinxusen_deepword.deepword.utils.load_uniq_lines"], ["", "def", "load_vocab", "(", "vocab_file", ":", "str", ")", "->", "List", "[", "str", "]", ":", "\n", "    ", "\"\"\"\n    Load unique words from a vocabulary\n    \"\"\"", "\n", "return", "load_uniq_lines", "(", "vocab_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.utils.load_actions": [[76, 81], ["utils.load_uniq_lines"], "function", ["home.repos.pwc.inspect_result.yinxusen_deepword.deepword.utils.load_uniq_lines"], ["", "def", "load_actions", "(", "action_file", ":", "str", ")", "->", "List", "[", "str", "]", ":", "\n", "    ", "\"\"\"\n    Load unique actions from an action file\n    \"\"\"", "\n", "return", "load_uniq_lines", "(", "action_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.utils.get_token2idx": [[83, 90], ["utils.uniq", "dict", "map", "enumerate"], "function", ["home.repos.pwc.inspect_result.yinxusen_deepword.deepword.utils.uniq"], ["", "def", "get_token2idx", "(", "tokens", ":", "List", "[", "str", "]", ")", "->", "Dict", "[", "str", ",", "int", "]", ":", "\n", "    ", "\"\"\"\n    From a list of tokens to a dict of token to position\n    \"\"\"", "\n", "uniq_tokens", "=", "uniq", "(", "tokens", ")", "\n", "return", "dict", "(", "map", "(", "\n", "lambda", "idx_token", ":", "(", "idx_token", "[", "1", "]", ",", "idx_token", "[", "0", "]", ")", ",", "enumerate", "(", "uniq_tokens", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.utils.ctime": [[92, 97], ["int", "round", "time.time"], "function", ["None"], ["", "def", "ctime", "(", ")", "->", "int", ":", "\n", "    ", "\"\"\"\n    current time in millisecond\n    \"\"\"", "\n", "return", "int", "(", "round", "(", "time", ".", "time", "(", ")", "*", "1000", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.utils.setup_logging": [[99, 134], ["os.getenv", "os.path.exists", "logging.getLogger().setLevel", "logging.getLogger().setLevel", "logging.getLogger().setLevel", "logging.basicConfig", "logging.basicConfig", "logging.basicConfig", "logging.handlers.RotatingFileHandler", "logging.handlers.RotatingFileHandler", "logging.handlers.RotatingFileHandler", "logging.Formatter", "logging.Formatter", "logging.Formatter", "logging.handlers.RotatingFileHandler.setFormatter", "logging.getLogger().addHandler", "logging.getLogger().addHandler", "logging.getLogger().addHandler", "open", "ruamel.yaml.safe_load", "logging.config.dictConfig", "logging.config.dictConfig", "logging.config.dictConfig", "logging.getLogger", "logging.getLogger", "logging.getLogger", "f.read", "logging.getLogger", "logging.getLogger", "logging.getLogger"], "function", ["None"], ["", "def", "setup_logging", "(", "\n", "default_path", ":", "str", "=", "'logging.yaml'", ",", "\n", "default_level", ":", "int", "=", "logging", ".", "INFO", ",", "\n", "env_key", ":", "str", "=", "'LOG_CFG'", ",", "\n", "local_log_filename", ":", "Optional", "[", "str", "]", "=", "None", ")", "->", "None", ":", "\n", "\n", "    ", "\"\"\"\n    Setup logging for python project\n\n    Load YAML config file from `default_path`, or from the environment variable\n    set by `env_key`. Falls back to default config if file not exist.\n\n    if `local_log_filename` set, add a local rotating log file.\n    \"\"\"", "\n", "\n", "config_path", "=", "default_path", "\n", "value", "=", "os", ".", "getenv", "(", "env_key", ",", "None", ")", "\n", "if", "value", ":", "\n", "        ", "config_path", "=", "value", "\n", "", "if", "path", ".", "exists", "(", "config_path", ")", ":", "\n", "        ", "with", "open", "(", "config_path", ",", "'rt'", ")", "as", "f", ":", "\n", "            ", "config", "=", "ruamel", ".", "yaml", ".", "safe_load", "(", "f", ".", "read", "(", ")", ")", "\n", "logging", ".", "config", ".", "dictConfig", "(", "config", ")", "\n", "", "", "else", ":", "\n", "        ", "logging", ".", "basicConfig", "(", "level", "=", "default_level", ")", "\n", "# add more handlers", "\n", "", "if", "local_log_filename", "is", "not", "None", ":", "\n", "        ", "rh", "=", "logging", ".", "handlers", ".", "RotatingFileHandler", "(", "\n", "local_log_filename", ",", "maxBytes", "=", "100", "*", "1024", "*", "1024", ",", "backupCount", "=", "100", ")", "\n", "formatter", "=", "logging", ".", "Formatter", "(", "\n", "'%(asctime)s - %(name)s - %(levelname)s - %(message)s'", ")", "\n", "rh", ".", "setFormatter", "(", "formatter", ")", "\n", "logging", ".", "getLogger", "(", ")", ".", "addHandler", "(", "rh", ")", "\n", "# suppress log from stanford corenlp", "\n", "", "logging", ".", "getLogger", "(", "\"urllib3.connectionpool\"", ")", ".", "setLevel", "(", "logging", ".", "WARNING", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.utils.model_name2clazz": [[136, 155], ["ValueError", "hasattr", "getattr"], "function", ["None"], ["", "def", "model_name2clazz", "(", "name", ":", "str", ")", ":", "\n", "    ", "\"\"\"\n    Find the class given the model name in this package.\n\n    Args:\n        name: Model name from :py:mod:`deepword.models`\n\n    Returns:\n        the class w.r.t. the model name\n    \"\"\"", "\n", "\n", "from", "deepword", ".", "models", "import", "dqn_modeling", ",", "drrn_modeling", ",", "dsqn_modeling", ",", "gen_modeling", ",", "nlu_modeling", ",", "snn_modeling", "\n", "\n", "for", "namespace", "in", "[", "dqn_modeling", ",", "drrn_modeling", ",", "dsqn_modeling", ",", "gen_modeling", ",", "\n", "nlu_modeling", ",", "snn_modeling", "]", ":", "\n", "        ", "if", "hasattr", "(", "namespace", ",", "name", ")", ":", "\n", "            ", "return", "getattr", "(", "namespace", ",", "name", ")", "\n", "", "", "raise", "ValueError", "(", "\"{} not found in models\"", ".", "format", "(", "name", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.utils.learner_name2clazz": [[157, 174], ["ValueError", "hasattr", "getattr"], "function", ["None"], ["", "def", "learner_name2clazz", "(", "name", ":", "str", ")", ":", "\n", "    ", "\"\"\"\n    Find the class given the learner name in this package.\n\n    Args:\n        name: Learner name from :py:mod:`deepword.students`\n\n    Returns:\n        the class w.r.t. the learner name\n    \"\"\"", "\n", "\n", "from", "deepword", ".", "students", "import", "student_learner", ",", "swag_learner", ",", "snn_learner", "\n", "\n", "for", "namespace", "in", "[", "student_learner", ",", "swag_learner", ",", "snn_learner", "]", ":", "\n", "        ", "if", "hasattr", "(", "namespace", ",", "name", ")", ":", "\n", "            ", "return", "getattr", "(", "namespace", ",", "name", ")", "\n", "", "", "raise", "ValueError", "(", "\"{} not found in student learners\"", ".", "format", "(", "name", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.utils.agent_name2clazz": [[176, 197], ["ValueError", "hasattr", "getattr"], "function", ["None"], ["", "def", "agent_name2clazz", "(", "name", ":", "str", ")", ":", "\n", "    ", "\"\"\"\n    Find the class given the agent name in this package.\n\n    Args:\n        name: Agent name from :py:mod:`deepword.agents`\n\n    Returns:\n        the class w.r.t. the agent name\n    \"\"\"", "\n", "\n", "from", "deepword", ".", "agents", "import", "base_agent", ",", "dsqn_agent", ",", "gen_agent", ",", "competition_agent", ",", "gen_drrn_agent", ",", "zork_agent", "\n", "\n", "for", "namespace", "in", "[", "base_agent", ",", "dsqn_agent", ",", "gen_agent", ",", "\n", "competition_agent", ",", "gen_drrn_agent", ",", "\n", "zork_agent", "]", ":", "\n", "        ", "if", "hasattr", "(", "namespace", ",", "name", ")", ":", "\n", "            ", "return", "getattr", "(", "namespace", ",", "name", ")", "\n", "", "", "raise", "ValueError", "(", "\"{} not found in agents\"", ".", "format", "(", "name", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.utils.core_name2clazz": [[199, 215], ["hasattr", "ValueError", "getattr"], "function", ["None"], ["", "def", "core_name2clazz", "(", "name", ":", "str", ")", ":", "\n", "    ", "\"\"\"\n    Find the class given the core name in this package.\n\n    Args:\n        name: Agent name from :py:mod:`deepword.agents.cores`\n\n    Returns:\n        the class w.r.t. the core name\n    \"\"\"", "\n", "\n", "from", "deepword", ".", "agents", "import", "cores", "\n", "\n", "if", "hasattr", "(", "cores", ",", "name", ")", ":", "\n", "        ", "return", "getattr", "(", "cores", ",", "name", ")", "\n", "", "raise", "ValueError", "(", "\"{} not found in agents\"", ".", "format", "(", "name", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.utils.split_train_dev": [[217, 250], ["sorted", "random.Random().shuffle", "len", "int", "ValueError", "math.ceil", "int", "random.Random", "math.floor"], "function", ["None"], ["", "def", "split_train_dev", "(", "\n", "game_files", ":", "List", "[", "str", "]", ",", "train_ratio", ":", "float", "=", "0.9", ",", "rnd_seed", ":", "int", "=", "42", "\n", ")", "->", "Tuple", "[", "List", "[", "str", "]", ",", "List", "[", "str", "]", "]", ":", "\n", "    ", "\"\"\"\n    Split train/dev sets from given game files\n    sort - shuffle w/ Random(42) - split\n\n    Args:\n        game_files: game files\n        train_ratio: the percentage of training files\n        rnd_seed: for randomly shuffle files, default = 42\n\n    Returns:\n        train_games, dev_games\n\n    Exception:\n        empty game_files\n    \"\"\"", "\n", "\n", "# have to sort first, otherwise after shuffling the result is different", "\n", "# on different platforms, e.g. Linux VS MacOS.", "\n", "game_files", "=", "sorted", "(", "game_files", ")", "\n", "random", ".", "Random", "(", "rnd_seed", ")", ".", "shuffle", "(", "game_files", ")", "\n", "n_files", "=", "len", "(", "game_files", ")", "\n", "if", "n_files", "==", "0", ":", "\n", "        ", "raise", "ValueError", "(", "\"no game files found!\"", ")", "\n", "\n", "", "n_train", "=", "int", "(", "math", ".", "ceil", "(", "n_files", "*", "train_ratio", ")", ")", "\n", "n_dev", "=", "n_files", "*", "(", "1", "-", "train_ratio", ")", "\n", "n_dev", "=", "int", "(", "math", ".", "floor", "(", "n_dev", ")", ")", "if", "n_dev", ">", "1", "else", "1", "\n", "train_games", "=", "game_files", "[", ":", "n_train", "]", "\n", "dev_games", "=", "game_files", "[", "-", "n_dev", ":", "]", "\n", "return", "train_games", ",", "dev_games", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.utils.load_game_files": [[252, 283], ["os.path.isfile", "os.path.isdir", "ValueError", "list", "glob.glob", "open", "map", "map", "os.path.join", "f.readlines", "x.strip", "os.path.join"], "function", ["None"], ["", "def", "load_game_files", "(", "game_path", ":", "str", ",", "f_games", ":", "Optional", "[", "str", "]", "=", "None", ")", "->", "List", "[", "str", "]", ":", "\n", "    ", "\"\"\"\n    Load a dir of games, or a single game.\n    if game_path represents a file, then return a list of the file;\n    if game_path is a dir, then return a list of files in the dir suffixed with\n      .ulx;\n    if f_games is set, then load files in the game_path with names listed in\n      f_games.\n\n    Args:\n        game_path: a dir, or a single file\n        f_games: a file of game names, without suffix, default suffix .ulx\n\n    Returns:\n        a list of game files\n    \"\"\"", "\n", "\n", "if", "path", ".", "isfile", "(", "game_path", ")", ":", "\n", "        ", "game_files", "=", "[", "game_path", "]", "\n", "", "elif", "path", ".", "isdir", "(", "game_path", ")", ":", "\n", "        ", "if", "f_games", "is", "not", "None", ":", "\n", "            ", "with", "open", "(", "f_games", ",", "\"r\"", ")", "as", "f", ":", "\n", "                ", "selected_games", "=", "map", "(", "lambda", "x", ":", "x", ".", "strip", "(", ")", ",", "f", ".", "readlines", "(", ")", ")", "\n", "", "game_files", "=", "list", "(", "map", "(", "\n", "lambda", "x", ":", "path", ".", "join", "(", "game_path", ",", "\"{}.ulx\"", ".", "format", "(", "x", ")", ")", ",", "\n", "selected_games", ")", ")", "\n", "", "else", ":", "\n", "            ", "game_files", "=", "glob", ".", "glob", "(", "path", ".", "join", "(", "game_path", ",", "\"*.ulx\"", ")", ")", "\n", "", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"game path {} doesn't exist\"", ".", "format", "(", "game_path", ")", ")", "\n", "", "return", "game_files", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.utils.load_and_split": [[285, 301], ["utils.load_game_files", "utils.split_train_dev"], "function", ["home.repos.pwc.inspect_result.yinxusen_deepword.deepword.utils.load_game_files", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.utils.split_train_dev"], ["", "def", "load_and_split", "(", "game_path", ":", "str", ",", "f_games", ":", "str", ")", "->", "Tuple", "[", "List", "[", "str", "]", ",", "List", "[", "str", "]", "]", ":", "\n", "    ", "\"\"\"\n    Load games and split train dev set\n\n    Args:\n        game_path: game dir\n        f_games: a file with list of games, each game name per line, without the\n        suffix of ulx\n\n    Returns:\n        train_games, dev_games\n    \"\"\"", "\n", "\n", "game_files", "=", "load_game_files", "(", "game_path", ",", "f_games", ")", "\n", "train_games", ",", "dev_games", "=", "split_train_dev", "(", "game_files", ")", "\n", "return", "train_games", ",", "dev_games", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.utils.setup_train_log": [[309, 317], ["os.path.isfile", "utils.setup_logging", "os.path.join"], "function", ["home.repos.pwc.inspect_result.yinxusen_deepword.deepword.utils.setup_logging"], ["def", "setup_train_log", "(", "model_dir", ":", "str", ")", ":", "\n", "    ", "\"\"\"\n    Setup log for training by putting a `game_script.log` in `model_dir`.\n    \"\"\"", "\n", "assert", "path", ".", "isfile", "(", "fn_log", ")", "\n", "setup_logging", "(", "\n", "default_path", "=", "fn_log", ",", "\n", "local_log_filename", "=", "path", ".", "join", "(", "model_dir", ",", "'game_script.log'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.utils.setup_eval_log": [[319, 328], ["os.path.isfile", "utils.setup_logging"], "function", ["home.repos.pwc.inspect_result.yinxusen_deepword.deepword.utils.setup_logging"], ["", "def", "setup_eval_log", "(", "log_filename", ":", "Optional", "[", "str", "]", ")", ":", "\n", "    ", "\"\"\"\n    Setup log for evaluation\n\n    Args:\n        log_filename: the path to log file\n    \"\"\"", "\n", "assert", "path", ".", "isfile", "(", "fn_log_eval", ")", "\n", "setup_logging", "(", "default_path", "=", "fn_log_eval", ",", "local_log_filename", "=", "log_filename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.utils.bytes2idx": [[330, 347], ["bitarray.bitarray", "bitarray.bitarray.frombytes", "numpy.asarray", "bitarray.bitarray.tolist", "numpy.where"], "function", ["None"], ["", "def", "bytes2idx", "(", "byte_mask", ":", "List", "[", "bytes", "]", ",", "size", ":", "int", ")", "->", "np", ".", "ndarray", ":", "\n", "    ", "\"\"\"\n    load a list of bytes to choose `1` for selected actions\n\n    Args:\n        byte_mask: a list of bytes\n        size: the size of total actions\n\n    Returns:\n        an np array of indices\n    \"\"\"", "\n", "bit_mask", "=", "bitarray", "(", "endian", "=", "'little'", ")", "\n", "bit_mask", ".", "frombytes", "(", "byte_mask", ")", "\n", "bit_mask", "=", "bit_mask", "[", ":", "size", "]", "\n", "bit_mask", "[", "-", "1", "]", "=", "False", "\n", "np_mask", "=", "np", ".", "asarray", "(", "bit_mask", ".", "tolist", "(", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "return", "np", ".", "where", "(", "np_mask", "==", "1", ")", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.utils.softmax": [[349, 355], ["numpy.exp", "numpy.sum", "numpy.sum"], "function", ["None"], ["", "def", "softmax", "(", "x", ":", "np", ".", "ndarray", ")", "->", "np", ".", "ndarray", ":", "\n", "    ", "\"\"\"\n    numerical stability softmax\n    \"\"\"", "\n", "e_x", "=", "np", ".", "exp", "(", "x", "-", "np", ".", "sum", "(", "x", ")", ")", "\n", "return", "e_x", "/", "np", ".", "sum", "(", "e_x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.utils.report_status": [[357, 368], ["tabulate.tabulate"], "function", ["None"], ["", "def", "report_status", "(", "lst_of_status", ":", "List", "[", "Tuple", "[", "str", ",", "Any", "]", "]", ")", "->", "str", ":", "\n", "    ", "\"\"\"\n    Pretty print a series of k-v pairs\n\n    Args:\n        lst_of_status: A list of k-v pairs\n\n    Returns:\n        a string to print\n    \"\"\"", "\n", "return", "\"\\n\"", "+", "tabulate", "(", "lst_of_status", ",", "tablefmt", "=", "\"plain\"", ")", "+", "\"\\n\"", "\n", "", ""]], "home.repos.pwc.inspect_result.yinxusen_deepword.students.swag_learner.SwagLearner._test_impl": [[96, 101], ["NotImplementedError"], "methods", ["None"], ["    ", "def", "_test_impl", "(", "self", ",", "data", ":", "Tuple", ")", "->", "np", ".", "ndarray", ":", "\n", "        ", "\"\"\"\n        Dummy method, won't be used.\n        \"\"\"", "\n", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.students.swag_learner.SwagLearner._prepare_training": [[102, 128], ["swag_learner.SwagLearner._prepare_model", "os.path.join", "tensorflow.summary.FileWriter", "queue.Queue.Queue", "threading.Thread", "threading.Thread.setDaemon", "threading.Thread.start", "saver.save", "tensorflow.train.get_or_create_global_step"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.students.student_learner.StudentLearner._prepare_model", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.eval_games.FullDirEvalPlayer.start"], ["", "def", "_prepare_training", "(", "\n", "self", "\n", ")", "->", "Tuple", "[", "Session", ",", "Any", ",", "Saver", ",", "FileWriter", ",", "int", ",", "Queue", "]", ":", "\n", "        ", "sess", ",", "model", ",", "saver", ",", "train_steps", "=", "self", ".", "_prepare_model", "(", "\n", "\"/device:GPU:0\"", ",", "training", "=", "True", ")", "\n", "\n", "# save the very first model to verify weight has been loaded", "\n", "if", "train_steps", "==", "0", ":", "\n", "            ", "saver", ".", "save", "(", "\n", "sess", ",", "self", ".", "ckpt_prefix", ",", "\n", "global_step", "=", "tf", ".", "train", ".", "get_or_create_global_step", "(", "\n", "graph", "=", "model", ".", "graph", ")", ")", "\n", "", "else", ":", "\n", "            ", "pass", "\n", "\n", "", "sw_path", "=", "path", ".", "join", "(", "self", ".", "model_dir", ",", "\"summaries\"", ",", "\"train\"", ")", "\n", "sw", "=", "tf", ".", "summary", ".", "FileWriter", "(", "sw_path", ",", "sess", ".", "graph", ")", "\n", "\n", "queue", "=", "Queue", "(", "maxsize", "=", "100", ")", "\n", "t", "=", "Thread", "(", "\n", "target", "=", "self", ".", "_add_batch", ",", "\n", "args", "=", "(", "\"{}/data/train.csv\"", ".", "format", "(", "self", ".", "train_data_dir", ")", ",", "queue", ")", ")", "\n", "t", ".", "setDaemon", "(", "True", ")", "\n", "t", ".", "start", "(", ")", "\n", "\n", "return", "sess", ",", "model", ",", "saver", ",", "sw", ",", "train_steps", ",", "queue", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.students.swag_learner.SwagLearner._prepare_test": [[129, 142], ["swag_learner.SwagLearner._prepare_model", "queue.Queue.Queue", "threading.Thread", "threading.Thread.setDaemon", "threading.Thread.start"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.students.student_learner.StudentLearner._prepare_model", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.eval_games.FullDirEvalPlayer.start"], ["", "def", "_prepare_test", "(", "\n", "self", ",", "device_placement", ":", "str", "=", "\"/device:GPU:0\"", ",", "\n", "restore_from", ":", "Optional", "[", "str", "]", "=", "None", "\n", ")", "->", "Tuple", "[", "Session", ",", "Any", ",", "Saver", ",", "int", ",", "Queue", "]", ":", "\n", "        ", "sess", ",", "model", ",", "saver", ",", "train_steps", "=", "self", ".", "_prepare_model", "(", "\n", "device_placement", ",", "training", "=", "False", ",", "restore_from", "=", "restore_from", ")", "\n", "queue", "=", "Queue", "(", "maxsize", "=", "100", ")", "\n", "t", "=", "Thread", "(", "\n", "target", "=", "self", ".", "_add_batch", ",", "\n", "args", "=", "(", "self", ".", "eval_data_path", ",", "queue", ",", "False", ")", ")", "\n", "t", ".", "setDaemon", "(", "True", ")", "\n", "t", ".", "start", "(", ")", "\n", "return", "sess", ",", "model", ",", "saver", ",", "train_steps", ",", "queue", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.students.swag_learner.SwagLearner.test": [[143, 181], ["swag_learner.SwagLearner.info", "iter", "swag_learner.SwagLearner._prepare_test", "swag_learner.SwagLearner.queue.empty", "swag_learner.SwagLearner.info", "time.sleep", "swag_learner.SwagLearner.sess.run", "q_actions_t.reshape.reshape.reshape", "numpy.argmax", "numpy.count_nonzero", "len", "swag_learner.SwagLearner.debug", "swag_learner.SwagLearner.debug", "len", "len"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.deepword.log.Logging.info", "home.repos.pwc.inspect_result.yinxusen_deepword.students.snn_learner.SNNLearner._prepare_test", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.log.Logging.info", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.log.Logging.debug", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.log.Logging.debug"], ["", "def", "test", "(", "\n", "self", ",", "device_placement", ":", "str", "=", "\"/device:GPU:0\"", ",", "\n", "restore_from", ":", "Optional", "[", "str", "]", "=", "None", ")", "->", "Tuple", "[", "float", ",", "int", "]", ":", "\n", "        ", "if", "self", ".", "sess", "is", "None", ":", "\n", "            ", "(", "self", ".", "sess", ",", "self", ".", "model", ",", "self", ".", "saver", ",", "self", ".", "train_steps", ",", "self", ".", "queue", "\n", ")", "=", "self", ".", "_prepare_test", "(", "device_placement", ",", "restore_from", ")", "\n", "\n", "", "wait_times", "=", "10", "\n", "while", "wait_times", ">", "0", "and", "self", ".", "queue", ".", "empty", "(", ")", ":", "\n", "            ", "self", ".", "info", "(", "\"waiting data ... (retry times: {})\"", ".", "format", "(", "wait_times", ")", ")", "\n", "time", ".", "sleep", "(", "10", ")", "\n", "wait_times", "-=", "1", "\n", "\n", "", "acc", "=", "0", "\n", "total", "=", "0", "\n", "self", ".", "info", "(", "\"start test\"", ")", "\n", "i", "=", "0", "\n", "for", "data", "in", "iter", "(", "self", ".", "queue", ".", "get", ",", "None", ")", ":", "\n", "            ", "inp", ",", "seg_tj_action", ",", "inp_len", ",", "_", ",", "swag_labels", "=", "data", "\n", "\n", "if", "i", "%", "100", "==", "0", ":", "\n", "                ", "self", ".", "debug", "(", "\"process a batch of {} .. {}\"", ".", "format", "(", "len", "(", "inp", ")", ",", "i", ")", ")", "\n", "self", ".", "debug", "(", "\"partial acc.: {}\"", ".", "format", "(", "\n", "acc", "*", "1.", "/", "total", "if", "total", "else", "\"Nan\"", ")", ")", "\n", "\n", "", "q_actions_t", "=", "self", ".", "sess", ".", "run", "(", "\n", "self", ".", "model", ".", "q_actions", ",", "\n", "feed_dict", "=", "{", "\n", "self", ".", "model", ".", "src_", ":", "inp", ",", "\n", "self", ".", "model", ".", "src_len_", ":", "inp_len", ",", "\n", "self", ".", "model", ".", "seg_tj_action_", ":", "seg_tj_action", "\n", "}", ")", "\n", "q_actions_t", "=", "q_actions_t", ".", "reshape", "(", "(", "len", "(", "swag_labels", ")", ",", "-", "1", ")", ")", "\n", "predicted_swag_labels", "=", "np", ".", "argmax", "(", "q_actions_t", ",", "axis", "=", "-", "1", ")", "\n", "acc", "+=", "np", ".", "count_nonzero", "(", "predicted_swag_labels", "==", "swag_labels", ")", "\n", "total", "+=", "len", "(", "swag_labels", ")", "\n", "i", "+=", "1", "\n", "", "return", "acc", "*", "1.", "/", "total", ",", "total", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.students.swag_learner.SwagLearner._add_batch": [[182, 216], ["swag_learner.load_swag_data", "list", "zip", "random.shuffle", "min", "swag_learner.SwagLearner.queue.put", "len", "len", "swag_learner.get_bert_input", "queue.put", "swag_learner.SwagLearner.error", "traceback.print_tb", "RuntimeError"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.students.swag_learner.load_swag_data", "home.repos.pwc.inspect_result.yinxusen_deepword.students.swag_learner.get_bert_input", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.log.Logging.error"], ["", "def", "_add_batch", "(", "\n", "self", ",", "swag_path", ":", "str", ",", "\n", "queue", ":", "Queue", ",", "training", ":", "bool", "=", "True", ",", "\n", "append_new_data", ":", "bool", "=", "True", ")", "->", "None", ":", "\n", "        ", "start_str", ",", "ending_str", ",", "labels", "=", "load_swag_data", "(", "swag_path", ")", "\n", "data", "=", "list", "(", "zip", "(", "start_str", ",", "ending_str", ",", "labels", ")", ")", "\n", "while", "True", ":", "\n", "            ", "if", "training", ":", "\n", "                ", "random", ".", "shuffle", "(", "data", ")", "\n", "", "i", "=", "0", "\n", "while", "i", "<", "len", "(", "data", ")", "//", "self", ".", "hp", ".", "batch_size", ":", "\n", "                ", "ss", "=", "i", "*", "self", ".", "hp", ".", "batch_size", "\n", "ee", "=", "min", "(", "(", "i", "+", "1", ")", "*", "self", ".", "hp", ".", "batch_size", ",", "len", "(", "data", ")", ")", "\n", "try", ":", "\n", "                    ", "batch_data", "=", "data", "[", "ss", ":", "ee", "]", "\n", "batch_start_str", "=", "[", "x", "[", "0", "]", "for", "x", "in", "batch_data", "]", "\n", "batch_ending_str", "=", "[", "x", "[", "1", "]", "for", "x", "in", "batch_data", "]", "\n", "batch_labels", "=", "[", "x", "[", "2", "]", "for", "x", "in", "batch_data", "]", "\n", "\n", "inp", ",", "seg_tj_action", ",", "inp_size", "=", "get_bert_input", "(", "\n", "batch_start_str", ",", "batch_ending_str", ",", "self", ".", "tokenizer", ",", "\n", "self", ".", "hp", ".", "sep_val_id", ",", "self", ".", "hp", ".", "cls_val_id", ",", "\n", "self", ".", "hp", ".", "num_tokens", ",", "self", ".", "hp", ".", "n_tokens_per_action", ")", "\n", "queue", ".", "put", "(", "\n", "(", "inp", ",", "seg_tj_action", ",", "inp_size", ",", "None", ",", "batch_labels", ")", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "                    ", "self", ".", "error", "(", "\"add_batch error: {}\"", ".", "format", "(", "e", ")", ")", "\n", "traceback", ".", "print_tb", "(", "e", ".", "__traceback__", ")", "\n", "raise", "RuntimeError", "(", ")", "\n", "", "i", "+=", "1", "\n", "\n", "", "if", "not", "training", ":", "\n", "                ", "self", ".", "queue", ".", "put", "(", "None", ")", "\n", "break", "\n", "", "", "", "", ""]], "home.repos.pwc.inspect_result.yinxusen_deepword.students.swag_learner.process_one_line": [[26, 48], ["tokenizer.convert_tokens_to_ids", "len", "deepword.students.utils.align_batch_str", "deepword.students.utils.align_batch_str", "tokenizer.tokenize", "tokenizer.convert_tokens_to_ids", "tokenizer.tokenize", "len"], "function", ["home.repos.pwc.inspect_result.yinxusen_deepword.deepword.tokenizers.BertTokenizer.convert_tokens_to_ids", "home.repos.pwc.inspect_result.yinxusen_deepword.students.utils.align_batch_str", "home.repos.pwc.inspect_result.yinxusen_deepword.students.utils.align_batch_str", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.tokenizers.BertTokenizer.tokenize", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.tokenizers.BertTokenizer.convert_tokens_to_ids", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.tokenizers.BertTokenizer.tokenize"], ["def", "process_one_line", "(", "\n", "tokenizer", ":", "Tokenizer", ",", "\n", "start_str", ":", "str", ",", "\n", "ending_str", ":", "List", "[", "str", "]", ",", "\n", "max_start_len", ":", "int", ",", "\n", "max_end_len", ":", "int", ")", "->", "Tuple", "[", "List", "[", "int", "]", ",", "int", ",", "np", ".", "ndarray", ",", "np", ".", "ndarray", "]", ":", "\n", "    ", "tj_ids", "=", "tokenizer", ".", "convert_tokens_to_ids", "(", "tokenizer", ".", "tokenize", "(", "start_str", ")", ")", "\n", "tj_len", "=", "len", "(", "tj_ids", ")", "\n", "aligned_tj", "=", "align_batch_str", "(", "\n", "[", "tj_ids", "]", ",", "str_len_allowance", "=", "max_start_len", ",", "padding_val_id", "=", "0", ",", "\n", "valid_len", "=", "[", "tj_len", "]", ")", "\n", "tj_ids", "=", "aligned_tj", "[", "0", "]", "[", "0", "]", "\n", "tj_len", "=", "aligned_tj", "[", "1", "]", "[", "0", "]", "\n", "\n", "actions", "=", "[", "\n", "tokenizer", ".", "convert_tokens_to_ids", "(", "tokenizer", ".", "tokenize", "(", "a", ")", ")", "\n", "for", "a", "in", "ending_str", "]", "\n", "action_matrix", ",", "action_len", "=", "align_batch_str", "(", "\n", "actions", ",", "str_len_allowance", "=", "max_end_len", ",", "padding_val_id", "=", "0", ",", "\n", "valid_len", "=", "[", "len", "(", "a", ")", "for", "a", "in", "actions", "]", ")", "\n", "\n", "return", "tj_ids", ",", "tj_len", ",", "action_matrix", ",", "action_len", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.students.swag_learner.load_swag_data": [[50, 64], ["numpy.asarray", "list", "list", "list", "open", "len", "lines[].astype", "list", "csv.reader", "f.readlines"], "function", ["None"], ["", "def", "load_swag_data", "(", "\n", "fn_swag", ":", "str", ")", "->", "Tuple", "[", "List", "[", "str", "]", ",", "List", "[", "np", ".", "ndarray", "]", ",", "List", "[", "int", "]", "]", ":", "\n", "    ", "\"\"\"read swag data, make sure every start sentence has four ends\"\"\"", "\n", "with", "open", "(", "fn_swag", ",", "\"r\"", ")", "as", "f", ":", "\n", "        ", "lines", "=", "list", "(", "reader", "(", "f", ".", "readlines", "(", ")", ")", ")", "[", "1", ":", "]", "# remove the first line", "\n", "\n", "", "assert", "len", "(", "lines", "[", "0", "]", ")", "==", "12", ",", "\"use train.csv or val.csv which contain labels\"", "\n", "\n", "lines", "=", "np", ".", "asarray", "(", "lines", ",", "dtype", "=", "np", ".", "object", ")", "\n", "labels", "=", "list", "(", "lines", "[", ":", ",", "-", "1", "]", ".", "astype", "(", "np", ".", "int32", ")", ")", "\n", "start_str", "=", "list", "(", "lines", "[", ":", ",", "3", "]", ")", "\n", "ending_str", "=", "list", "(", "lines", "[", ":", ",", "7", ":", "11", "]", ")", "\n", "\n", "return", "start_str", ",", "ending_str", ",", "labels", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.students.swag_learner.get_bert_input": [[66, 93], ["zip", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "swag_learner.process_one_line", "deepword.agents.utils.bert_nlu_input", "np.concatenate.append", "np.concatenate.append", "np.concatenate.append", "list"], "function", ["home.repos.pwc.inspect_result.yinxusen_deepword.students.swag_learner.process_one_line", "home.repos.pwc.inspect_result.yinxusen_deepword.agents.utils.bert_nlu_input", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.tree_memory.TreeMemory.append", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.tree_memory.TreeMemory.append", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.tree_memory.TreeMemory.append"], ["", "def", "get_bert_input", "(", "\n", "start_str", ":", "List", "[", "str", "]", ",", "ending_str", ":", "List", "[", "np", ".", "ndarray", "]", ",", "\n", "tokenizer", ":", "Tokenizer", ",", "sep_val_id", ",", "cls_val_id", ",", "\n", "num_tokens", ",", "n_tokens_per_action", "\n", ")", "->", "Tuple", "[", "np", ".", "ndarray", ",", "np", ".", "ndarray", ",", "np", ".", "ndarray", "]", ":", "\n", "    ", "\"\"\"\n    TODO: here we use n_tokens_per_actions for end str size\n    \"\"\"", "\n", "inp", "=", "[", "]", "\n", "seg_tj_action", "=", "[", "]", "\n", "inp_size", "=", "[", "]", "\n", "num_tokens_tj", "=", "num_tokens", "-", "n_tokens_per_action", "-", "3", "\n", "\n", "for", "tj", ",", "actions", "in", "zip", "(", "start_str", ",", "ending_str", ")", ":", "\n", "        ", "tj_ids", ",", "tj_len", ",", "action_matrix", ",", "action_len", "=", "process_one_line", "(", "\n", "tokenizer", ",", "tj", ",", "list", "(", "actions", ")", ",", "num_tokens_tj", ",", "n_tokens_per_action", ")", "\n", "_inp", ",", "_seg_tj_action", ",", "_inp_size", "=", "bert_nlu_input", "(", "\n", "action_matrix", ",", "action_len", ",", "tj_ids", ",", "tj_len", ",", "\n", "sep_val_id", ",", "cls_val_id", ",", "num_tokens", ")", "\n", "inp", ".", "append", "(", "_inp", ")", "\n", "seg_tj_action", ".", "append", "(", "_seg_tj_action", ")", "\n", "inp_size", ".", "append", "(", "_inp_size", ")", "\n", "\n", "", "inp", "=", "np", ".", "concatenate", "(", "inp", ",", "axis", "=", "0", ")", "\n", "seg_tj_action", "=", "np", ".", "concatenate", "(", "seg_tj_action", ",", "axis", "=", "0", ")", "\n", "inp_size", "=", "np", ".", "concatenate", "(", "inp_size", ",", "axis", "=", "0", ")", "\n", "return", "inp", ",", "seg_tj_action", ",", "inp_size", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.students.student_learner.CMD.__init__": [[41, 43], ["student_learner.CMD.__dict__.update"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.deepword.sum_tree.SumTree.update"], ["    ", "def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "__dict__", ".", "update", "(", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.students.student_learner.CMD.set": [[44, 46], ["None"], "methods", ["None"], ["", "def", "set", "(", "self", ",", "key", ",", "val", ")", ":", "\n", "        ", "self", ".", "__dict__", "[", "key", "]", "=", "val", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.students.student_learner.CMD.get": [[47, 49], ["None"], "methods", ["None"], ["", "def", "get", "(", "self", ",", "key", ")", ":", "\n", "        ", "return", "self", ".", "__dict__", "[", "key", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.students.student_learner.StudentLearner.__init__": [[52, 88], ["deepword.log.Logging.__init__", "os.path.join", "os.path.join", "deepword.tokenizers.init_tokens", "deepword.hparams.save_hparams", "student_learner.StudentLearner.info", "set", "os.path.join", "os.path.isfile", "os.path.join", "deepword.hparams.output_hparams", "set", "x.split", "deepword.utils.load_uniq_lines"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.models.drrn_modeling.PseudoSeq2SeqDRRN.__init__", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.tokenizers.init_tokens", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.hparams.save_hparams", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.log.Logging.info", "home.repos.pwc.inspect_result.yinxusen_deepword.students.student_learner.CMD.set", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.hparams.output_hparams", "home.repos.pwc.inspect_result.yinxusen_deepword.students.student_learner.CMD.set", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.utils.load_uniq_lines"], ["    ", "def", "__init__", "(", "\n", "self", ",", "hp", ":", "HParams", ",", "model_dir", ":", "str", ",", "train_data_dir", ":", "Optional", "[", "str", "]", ",", "\n", "eval_data_path", ":", "Optional", "[", "str", "]", "=", "None", ")", "->", "None", ":", "\n", "        ", "super", "(", "StudentLearner", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# prefix should match BaseAgent", "\n", "self", ".", "tjs_prefix", "=", "\"trajectories\"", "\n", "self", ".", "action_prefix", "=", "\"actions\"", "\n", "self", ".", "memo_prefix", "=", "\"memo\"", "\n", "self", ".", "hs2tj_prefix", "=", "\"hs2tj\"", "\n", "\n", "self", ".", "model_dir", "=", "model_dir", "\n", "self", ".", "train_data_dir", "=", "train_data_dir", "\n", "self", ".", "eval_data_path", "=", "eval_data_path", "\n", "\n", "self", ".", "load_from", "=", "path", ".", "join", "(", "self", ".", "model_dir", ",", "\"last_weights\"", ")", "\n", "self", ".", "ckpt_prefix", "=", "path", ".", "join", "(", "self", ".", "load_from", ",", "\"after-epoch\"", ")", "\n", "self", ".", "hp", ",", "self", ".", "tokenizer", "=", "init_tokens", "(", "hp", ")", "\n", "save_hparams", "(", "self", ".", "hp", ",", "path", ".", "join", "(", "model_dir", ",", "\"hparams.json\"", ")", ")", "\n", "self", ".", "info", "(", "output_hparams", "(", "self", ".", "hp", ")", ")", "\n", "\n", "self", ".", "sess", "=", "None", "\n", "self", ".", "model", "=", "None", "\n", "self", ".", "saver", "=", "None", "\n", "self", ".", "sw", "=", "None", "\n", "self", ".", "train_steps", "=", "None", "\n", "self", ".", "queue", "=", "None", "\n", "\n", "# filter allowed gids from memory during training", "\n", "# if allowed_gids is empty, use all memory", "\n", "# allowed_gids.txt:", "\n", "# game name [TAB] game ID", "\n", "self", ".", "allowed_gids", "=", "set", "(", ")", "\n", "fn_allowed_gids", "=", "path", ".", "join", "(", "self", ".", "model_dir", ",", "\"allowed_gids.txt\"", ")", "\n", "if", "path", ".", "isfile", "(", "fn_allowed_gids", ")", ":", "\n", "            ", "self", ".", "allowed_gids", "=", "set", "(", "\n", "[", "x", ".", "split", "(", "\"\\t\"", ")", "[", "1", "]", "for", "x", "in", "load_uniq_lines", "(", "fn_allowed_gids", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.students.student_learner.StudentLearner._get_compatible_snapshot_tag": [[89, 101], ["deepword.agents.utils.get_path_tags", "deepword.agents.utils.get_path_tags", "deepword.agents.utils.get_path_tags", "deepword.agents.utils.get_path_tags", "set", "set.intersection_update", "set.intersection_update", "set.intersection_update", "list"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.agents.utils.get_path_tags", "home.repos.pwc.inspect_result.yinxusen_deepword.agents.utils.get_path_tags", "home.repos.pwc.inspect_result.yinxusen_deepword.agents.utils.get_path_tags", "home.repos.pwc.inspect_result.yinxusen_deepword.agents.utils.get_path_tags", "home.repos.pwc.inspect_result.yinxusen_deepword.students.student_learner.CMD.set"], ["", "", "def", "_get_compatible_snapshot_tag", "(", "self", ",", "data_dir", ":", "str", ")", "->", "List", "[", "int", "]", ":", "\n", "        ", "action_tags", "=", "get_path_tags", "(", "data_dir", ",", "self", ".", "action_prefix", ")", "\n", "memo_tags", "=", "get_path_tags", "(", "data_dir", ",", "self", ".", "memo_prefix", ")", "\n", "tjs_tags", "=", "get_path_tags", "(", "data_dir", ",", "self", ".", "tjs_prefix", ")", "\n", "hs2tj_tags", "=", "get_path_tags", "(", "data_dir", ",", "self", ".", "hs2tj_prefix", ")", "\n", "\n", "valid_tags", "=", "set", "(", "action_tags", ")", "\n", "valid_tags", ".", "intersection_update", "(", "memo_tags", ")", "\n", "valid_tags", ".", "intersection_update", "(", "tjs_tags", ")", "\n", "valid_tags", ".", "intersection_update", "(", "hs2tj_tags", ")", "\n", "\n", "return", "list", "(", "valid_tags", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.students.student_learner.StudentLearner._get_combined_data_path": [[102, 119], ["student_learner.StudentLearner._get_compatible_snapshot_tag", "sorted", "combined_data_path.append", "random.random", "os.path.join", "os.path.join", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.agents.base_agent.BaseAgent._get_compatible_snapshot_tag", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.tree_memory.TreeMemory.append"], ["", "def", "_get_combined_data_path", "(", "\n", "self", ",", "data_dir", ":", "str", ")", "->", "List", "[", "Tuple", "[", "str", ",", "str", ",", "str", ",", "str", "]", "]", ":", "\n", "        ", "valid_tags", "=", "self", ".", "_get_compatible_snapshot_tag", "(", "data_dir", ")", "\n", "combined_data_path", "=", "[", "]", "\n", "for", "tag", "in", "sorted", "(", "valid_tags", ",", "key", "=", "lambda", "k", ":", "random", ".", "random", "(", ")", ")", ":", "\n", "            ", "combined_data_path", ".", "append", "(", "\n", "(", "path", ".", "join", "(", "\n", "data_dir", ",", "\"{}-{}.npz\"", ".", "format", "(", "self", ".", "tjs_prefix", ",", "tag", ")", ")", ",", "\n", "path", ".", "join", "(", "\n", "data_dir", ",", "\"{}-{}.npz\"", ".", "format", "(", "self", ".", "action_prefix", ",", "tag", ")", ")", ",", "\n", "path", ".", "join", "(", "\n", "data_dir", ",", "\"{}-{}.npz\"", ".", "format", "(", "self", ".", "memo_prefix", ",", "tag", ")", ")", ",", "\n", "path", ".", "join", "(", "\n", "data_dir", ",", "\"{}-{}.npz\"", ".", "format", "(", "\n", "self", ".", "hs2tj_prefix", ",", "tag", ")", ")", ")", ")", "\n", "\n", "", "return", "combined_data_path", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.students.student_learner.StudentLearner._prepare_model": [[120, 160], ["deepword.utils.model_name2clazz", "tensorflow.ConfigProto", "tensorflow.Session", "deepword.utils.model_name2clazz.get_train_student_model", "deepword.utils.model_name2clazz.get_eval_student_model", "deepword.utils.model_name2clazz.get_eval_student_model.graph.as_default", "tensorflow.Session.run", "tensorflow.train.Saver", "tensorflow.global_variables_initializer", "tensorflow.train.latest_checkpoint", "deepword.utils.model_name2clazz.get_eval_student_model.safe_loading", "student_learner.StudentLearner.warning", "termcolor.colored"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.deepword.utils.model_name2clazz", "home.repos.pwc.inspect_result.yinxusen_deepword.models.drrn_modeling.CnnDRRN.get_train_student_model", "home.repos.pwc.inspect_result.yinxusen_deepword.models.drrn_modeling.CnnDRRN.get_eval_student_model", "home.repos.pwc.inspect_result.yinxusen_deepword.models.models.TFModel.safe_loading", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.log.Logging.warning"], ["", "def", "_prepare_model", "(", "\n", "self", ",", "device_placement", ":", "str", ",", "training", ":", "bool", ",", "\n", "restore_from", ":", "Optional", "[", "str", "]", "=", "None", ",", "\n", ")", "->", "Tuple", "[", "Session", ",", "Any", ",", "Saver", ",", "int", "]", ":", "\n", "        ", "\"\"\"\n        create and load model from restore_from\n        if restore_from is None, use the latest checkpoint from last_weights\n        if model_dir\n        \"\"\"", "\n", "model_clazz", "=", "model_name2clazz", "(", "self", ".", "hp", ".", "model_creator", ")", "\n", "if", "training", ":", "\n", "            ", "model", "=", "model_clazz", ".", "get_train_student_model", "(", "\n", "hp", "=", "self", ".", "hp", ",", "\n", "device_placement", "=", "device_placement", ")", "\n", "", "else", ":", "\n", "            ", "model", "=", "model_clazz", ".", "get_eval_student_model", "(", "\n", "hp", "=", "self", ".", "hp", ",", "\n", "device_placement", "=", "device_placement", ")", "\n", "\n", "", "conf", "=", "tf", ".", "ConfigProto", "(", "\n", "log_device_placement", "=", "False", ",", "allow_soft_placement", "=", "True", ")", "\n", "sess", "=", "tf", ".", "Session", "(", "graph", "=", "model", ".", "graph", ",", "config", "=", "conf", ")", "\n", "with", "model", ".", "graph", ".", "as_default", "(", ")", ":", "\n", "            ", "sess", ".", "run", "(", "tf", ".", "global_variables_initializer", "(", ")", ")", "\n", "saver", "=", "tf", ".", "train", ".", "Saver", "(", "\n", "max_to_keep", "=", "self", ".", "hp", ".", "max_snapshot_to_keep", ",", "\n", "save_relative_paths", "=", "True", ")", "\n", "\n", "if", "restore_from", "is", "None", ":", "\n", "                ", "restore_from", "=", "tf", ".", "train", ".", "latest_checkpoint", "(", "self", ".", "load_from", ")", "\n", "\n", "", "if", "restore_from", "is", "not", "None", ":", "\n", "                ", "trained_steps", "=", "model", ".", "safe_loading", "(", "sess", ",", "saver", ",", "restore_from", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "warning", "(", "colored", "(", "\n", "\"No checkpoint to load, using untrained model\"", ",", "\n", "\"red\"", ",", "\"on_white\"", ",", "[", "\"bold\"", ",", "\"blink\"", ",", "\"underline\"", "]", ")", ")", "\n", "trained_steps", "=", "0", "\n", "\n", "", "", "return", "sess", ",", "model", ",", "saver", ",", "trained_steps", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.students.student_learner.StudentLearner.lst_str2am": [[161, 180], ["ValueError", "res_tj.append", "len", "deepword.agents.utils.ActionMaster", "len"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.deepword.tree_memory.TreeMemory.append"], ["", "@", "classmethod", "\n", "def", "lst_str2am", "(", "\n", "cls", ",", "tj", ":", "List", "[", "str", "]", ",", "allow_unfinished_tj", ":", "bool", "=", "False", "\n", ")", "->", "List", "[", "ActionMaster", "]", ":", "\n", "        ", "tj", "=", "[", "\"\"", "]", "+", "tj", "\n", "\n", "if", "not", "allow_unfinished_tj", "and", "len", "(", "tj", ")", "%", "2", "!=", "0", ":", "\n", "            ", "raise", "ValueError", "(", "\"wrong old trajectory: {}\"", ".", "format", "(", "tj", ")", ")", "\n", "\n", "", "res_tj", "=", "[", "]", "\n", "i", "=", "0", "\n", "while", "i", "<", "len", "(", "tj", ")", "//", "2", ":", "\n", "            ", "res_tj", ".", "append", "(", "\n", "ActionMaster", "(", "\n", "action", "=", "tj", "[", "i", "*", "2", "]", ",", "master", "=", "tj", "[", "i", "*", "2", "+", "1", "]", ",", "\n", "action_ids", "=", "[", "]", ",", "master_ids", "=", "[", "]", ",", "objective_ids", "=", "[", "]", ")", ")", "\n", "i", "+=", "1", "\n", "\n", "", "return", "res_tj", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.students.student_learner.StudentLearner.tjs_str2am": [[181, 190], ["deepword.trajectory.Trajectory", "cls.lst_str2am", "dict", "cls.lst_str2am", "old_tjs.trajectories.items"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.students.student_learner.StudentLearner.lst_str2am", "home.repos.pwc.inspect_result.yinxusen_deepword.students.student_learner.StudentLearner.lst_str2am"], ["", "@", "classmethod", "\n", "def", "tjs_str2am", "(", "\n", "cls", ",", "old_tjs", ":", "Trajectory", "[", "str", "]", ")", "->", "Trajectory", "[", "ActionMaster", "]", ":", "\n", "        ", "tjs", "=", "Trajectory", "(", "num_turns", "=", "old_tjs", ".", "num_turns", "//", "2", ",", "size_per_turn", "=", "1", ")", "\n", "tjs", ".", "curr_tj", "=", "cls", ".", "lst_str2am", "(", "old_tjs", ".", "curr_tj", ",", "allow_unfinished_tj", "=", "True", ")", "\n", "tjs", ".", "curr_tid", "=", "old_tjs", ".", "curr_tid", "\n", "tjs", ".", "trajectories", "=", "dict", "(", "[", "\n", "(", "k", ",", "cls", ".", "lst_str2am", "(", "v", ")", ")", "for", "k", ",", "v", "in", "old_tjs", ".", "trajectories", ".", "items", "(", ")", "]", ")", "\n", "return", "tjs", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.students.student_learner.StudentLearner.memo_old2new": [[191, 205], ["deepword.utils.bytes2idx", "deepword.utils.bytes2idx", "res.append", "deepword.agents.utils.Memolet"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.deepword.utils.bytes2idx", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.utils.bytes2idx", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.tree_memory.TreeMemory.append"], ["", "@", "classmethod", "\n", "def", "memo_old2new", "(", "cls", ",", "old_memo", ":", "List", "[", "DRRNMemoTeacher", "]", ")", "->", "List", "[", "Memolet", "]", ":", "\n", "        ", "res", "=", "[", "]", "\n", "for", "m", "in", "old_memo", ":", "\n", "            ", "mask", "=", "bytes2idx", "(", "m", ".", "action_mask", ",", "size", "=", "128", ")", "\n", "next_mask", "=", "bytes2idx", "(", "m", ".", "next_action_mask", ",", "size", "=", "128", ")", "\n", "res", ".", "append", "(", "Memolet", "(", "\n", "tid", "=", "m", ".", "tid", ",", "sid", "=", "m", ".", "sid", "//", "2", ",", "gid", "=", "m", ".", "gid", ",", "aid", "=", "m", ".", "aid", ",", "\n", "token_id", "=", "None", ",", "a_len", "=", "None", ",", "a_type", "=", "None", ",", "\n", "reward", "=", "m", ".", "reward", ",", "is_terminal", "=", "m", ".", "is_terminal", ",", "\n", "action_mask", "=", "mask", ",", "sys_action_mask", "=", "None", ",", "\n", "next_action_mask", "=", "next_mask", ",", "next_sys_action_mask", "=", "None", ",", "\n", "q_actions", "=", "m", ".", "q_actions", "[", "mask", "]", ")", ")", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.students.student_learner.StudentLearner.hs2tj_old2new": [[206, 224], ["dict", "dict", "list", "numpy.asarray"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "hs2tj_old2new", "(", "\n", "cls", ",", "old_hs2tj", ":", "Dict", "[", "str", ",", "Dict", "[", "int", ",", "List", "[", "int", "]", "]", "]", "\n", ")", "->", "Dict", "[", "str", ",", "Dict", "[", "int", ",", "List", "[", "int", "]", "]", "]", ":", "\n", "        ", "\"\"\"\n        sid need to be halved.\n        Args:\n            old_hs2tj:\n\n        Returns:\n\n        \"\"\"", "\n", "new_hs2tj", "=", "dict", "(", ")", "\n", "for", "sk", "in", "old_hs2tj", ":", "\n", "            ", "new_hs2tj", "[", "sk", "]", "=", "dict", "(", ")", "\n", "for", "tid", "in", "old_hs2tj", "[", "sk", "]", ":", "\n", "                ", "new_hs2tj", "[", "sk", "]", "[", "tid", "]", "=", "list", "(", "np", ".", "asarray", "(", "old_hs2tj", "[", "sk", "]", "[", "tid", "]", ")", "//", "2", ")", "\n", "", "", "return", "new_hs2tj", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.students.student_learner.StudentLearner._load_snapshot": [[225, 242], ["isinstance", "numpy.load", "student_learner.StudentLearner.warning", "student_learner.StudentLearner._load_snapshot_v1", "isinstance", "student_learner.StudentLearner.warning", "student_learner.StudentLearner._load_snapshot_v2", "ValueError", "type"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.deepword.log.Logging.warning", "home.repos.pwc.inspect_result.yinxusen_deepword.students.student_learner.StudentLearner._load_snapshot_v1", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.log.Logging.warning", "home.repos.pwc.inspect_result.yinxusen_deepword.students.student_learner.StudentLearner._load_snapshot_v2"], ["", "def", "_load_snapshot", "(", "\n", "self", ",", "memo_path", ":", "str", ",", "tjs_path", ":", "str", ",", "action_path", ":", "str", ",", "\n", "hs2tj_path", ":", "str", "\n", ")", "->", "Tuple", "[", "List", "[", "Memolet", "]", ",", "Trajectory", "[", "ActionMaster", "]", ",", "ActionCollector", ",", "\n", "Dict", "[", "str", ",", "Dict", "[", "int", ",", "List", "[", "int", "]", "]", "]", "]", ":", "\n", "        ", "memory", "=", "np", ".", "load", "(", "memo_path", ",", "allow_pickle", "=", "True", ")", "[", "\"data\"", "]", "\n", "if", "isinstance", "(", "memory", "[", "0", "]", ",", "DRRNMemoTeacher", ")", ":", "\n", "            ", "self", ".", "warning", "(", "\"load old data with DRRNMemoTeacher\"", ")", "\n", "return", "self", ".", "_load_snapshot_v1", "(", "\n", "memo_path", ",", "tjs_path", ",", "action_path", ",", "hs2tj_path", ")", "\n", "", "elif", "isinstance", "(", "memory", "[", "0", "]", ",", "Memolet", ")", ":", "\n", "            ", "self", ".", "warning", "(", "\"load new data with Memolet\"", ")", "\n", "return", "self", ".", "_load_snapshot_v2", "(", "\n", "memo_path", ",", "tjs_path", ",", "action_path", ",", "hs2tj_path", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"Unrecognized memory type: {}\"", ".", "format", "(", "type", "(", "memory", "[", "0", "]", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.students.student_learner.StudentLearner._load_snapshot_v1": [[243, 270], ["list", "student_learner.StudentLearner.memo_old2new", "deepword.trajectory.Trajectory", "deepword.trajectory.Trajectory.load_tjs", "student_learner.StudentLearner.tjs_str2am", "deepword.action.ActionCollector", "deepword.action.ActionCollector.load_actions", "numpy.load", "student_learner.StudentLearner.hs2tj_old2new", "numpy.load", "filter", "isinstance"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.students.student_learner.StudentLearner.memo_old2new", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.trajectory.Trajectory.load_tjs", "home.repos.pwc.inspect_result.yinxusen_deepword.students.student_learner.StudentLearner.tjs_str2am", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.utils.load_actions", "home.repos.pwc.inspect_result.yinxusen_deepword.students.student_learner.StudentLearner.hs2tj_old2new"], ["", "", "def", "_load_snapshot_v1", "(", "\n", "self", ",", "memo_path", ":", "str", ",", "tjs_path", ":", "str", ",", "action_path", ":", "str", ",", "\n", "hs2tj_path", ":", "str", "\n", ")", "->", "Tuple", "[", "List", "[", "Memolet", "]", ",", "Trajectory", "[", "ActionMaster", "]", ",", "ActionCollector", ",", "\n", "Dict", "[", "str", ",", "Dict", "[", "int", ",", "List", "[", "int", "]", "]", "]", "]", ":", "\n", "        ", "\"\"\"load snapshot for old data\"\"\"", "\n", "old_memory", "=", "np", ".", "load", "(", "memo_path", ",", "allow_pickle", "=", "True", ")", "[", "\"data\"", "]", "\n", "old_memory", "=", "list", "(", "filter", "(", "\n", "lambda", "x", ":", "isinstance", "(", "x", ",", "DRRNMemoTeacher", ")", ",", "old_memory", ")", ")", "\n", "memory", "=", "self", ".", "memo_old2new", "(", "old_memory", ")", "\n", "\n", "old_tjs", "=", "Trajectory", "(", "\n", "num_turns", "=", "self", ".", "hp", ".", "num_turns", "*", "2", "+", "1", ",", "size_per_turn", "=", "2", ")", "\n", "old_tjs", ".", "load_tjs", "(", "tjs_path", ")", "\n", "tjs", "=", "self", ".", "tjs_str2am", "(", "old_tjs", ")", "\n", "\n", "actions", "=", "ActionCollector", "(", "\n", "tokenizer", "=", "self", ".", "tokenizer", ",", "\n", "n_tokens", "=", "self", ".", "hp", ".", "n_tokens_per_action", ",", "\n", "unk_val_id", "=", "self", ".", "hp", ".", "unk_val_id", ",", "\n", "padding_val_id", "=", "self", ".", "hp", ".", "padding_val_id", ")", "\n", "actions", ".", "load_actions", "(", "action_path", ")", "\n", "\n", "hs2tj", "=", "np", ".", "load", "(", "hs2tj_path", ",", "allow_pickle", "=", "True", ")", "\n", "hash_states2tjs", "=", "self", ".", "hs2tj_old2new", "(", "hs2tj", "[", "\"hs2tj\"", "]", "[", "0", "]", ")", "\n", "\n", "return", "memory", ",", "tjs", ",", "actions", ",", "hash_states2tjs", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.students.student_learner.StudentLearner._load_snapshot_v2": [[271, 293], ["list", "deepword.trajectory.Trajectory", "deepword.trajectory.Trajectory.load_tjs", "deepword.action.ActionCollector", "deepword.action.ActionCollector.load_actions", "numpy.load", "numpy.load", "filter", "isinstance"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.deepword.trajectory.Trajectory.load_tjs", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.utils.load_actions"], ["", "def", "_load_snapshot_v2", "(", "\n", "self", ",", "memo_path", ":", "str", ",", "tjs_path", ":", "str", ",", "action_path", ":", "str", ",", "\n", "hs2tj_path", ":", "str", "\n", ")", "->", "Tuple", "[", "List", "[", "Memolet", "]", ",", "Trajectory", "[", "ActionMaster", "]", ",", "ActionCollector", ",", "\n", "Dict", "[", "str", ",", "Dict", "[", "int", ",", "List", "[", "int", "]", "]", "]", "]", ":", "\n", "        ", "memory", "=", "np", ".", "load", "(", "memo_path", ",", "allow_pickle", "=", "True", ")", "[", "\"data\"", "]", "\n", "memory", "=", "list", "(", "filter", "(", "lambda", "x", ":", "isinstance", "(", "x", ",", "Memolet", ")", ",", "memory", ")", ")", "\n", "\n", "tjs", "=", "Trajectory", "(", "self", ".", "hp", ".", "num_turns", ")", "\n", "tjs", ".", "load_tjs", "(", "tjs_path", ")", "\n", "\n", "actions", "=", "ActionCollector", "(", "\n", "tokenizer", "=", "self", ".", "tokenizer", ",", "\n", "n_tokens", "=", "self", ".", "hp", ".", "n_tokens_per_action", ",", "\n", "unk_val_id", "=", "self", ".", "hp", ".", "unk_val_id", ",", "\n", "padding_val_id", "=", "self", ".", "hp", ".", "padding_val_id", ")", "\n", "actions", ".", "load_actions", "(", "action_path", ")", "\n", "\n", "hs2tj", "=", "np", ".", "load", "(", "hs2tj_path", ",", "allow_pickle", "=", "True", ")", "\n", "hash_states2tjs", "=", "hs2tj", "[", "\"hs2tj\"", "]", "[", "0", "]", "\n", "\n", "return", "memory", ",", "tjs", ",", "actions", ",", "hash_states2tjs", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.students.student_learner.StudentLearner._add_batch": [[294, 349], ["student_learner.StudentLearner.info", "sorted", "student_learner.StudentLearner._get_combined_data_path", "student_learner.StudentLearner._load_snapshot", "set", "set", "student_learner.StudentLearner.info", "int", "min", "random.random", "random.shuffle", "student_learner.StudentLearner.info", "student_learner.StudentLearner.info", "random.shuffle", "math.ceil", "len", "queue.put", "student_learner.StudentLearner._prepare_data", "student_learner.StudentLearner.error", "traceback.print_tb", "RuntimeError", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.deepword.log.Logging.info", "home.repos.pwc.inspect_result.yinxusen_deepword.students.student_learner.StudentLearner._get_combined_data_path", "home.repos.pwc.inspect_result.yinxusen_deepword.students.student_learner.StudentLearner._load_snapshot", "home.repos.pwc.inspect_result.yinxusen_deepword.students.student_learner.CMD.set", "home.repos.pwc.inspect_result.yinxusen_deepword.students.student_learner.CMD.set", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.log.Logging.info", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.log.Logging.info", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.log.Logging.info", "home.repos.pwc.inspect_result.yinxusen_deepword.students.snn_learner.SNNLearner._prepare_data", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.log.Logging.error"], ["", "def", "_add_batch", "(", "\n", "self", ",", "combined_data_path", ":", "List", "[", "Tuple", "[", "str", ",", "str", ",", "str", "]", "]", ",", "\n", "queue", ":", "Queue", ",", "training", ":", "bool", "=", "True", ",", "\n", "append_new_data", ":", "bool", "=", "True", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        :param combined_data_path:\n        :param queue:\n        :param training:\n        :param append_new_data: scan train_data_dir for new data after every\n            epoch of training.\n        :return:\n        \"\"\"", "\n", "self", ".", "info", "(", "\"try to add batch data: {}\"", ".", "format", "(", "combined_data_path", ")", ")", "\n", "while", "True", ":", "\n", "            ", "if", "training", "and", "append_new_data", ":", "\n", "                ", "new_combined_data_path", "=", "self", ".", "_get_combined_data_path", "(", "\n", "self", ".", "train_data_dir", ")", "\n", "if", "set", "(", "new_combined_data_path", ")", "!=", "set", "(", "combined_data_path", ")", ":", "\n", "                    ", "self", ".", "info", "(", "\n", "\"update training data: {}\"", ".", "format", "(", "combined_data_path", ")", ")", "\n", "combined_data_path", "=", "new_combined_data_path", "\n", "", "", "for", "tp", ",", "ap", ",", "mp", ",", "hsp", "in", "sorted", "(", "\n", "combined_data_path", ",", "key", "=", "lambda", "k", ":", "random", ".", "random", "(", ")", ")", ":", "\n", "                ", "memory", ",", "tjs", ",", "action_collector", ",", "_", "=", "self", ".", "_load_snapshot", "(", "\n", "mp", ",", "tp", ",", "ap", ",", "hsp", ")", "\n", "if", "training", ":", "\n", "                    ", "if", "not", "self", ".", "allowed_gids", ":", "\n", "                        ", "random", ".", "shuffle", "(", "memory", ")", "\n", "", "else", ":", "\n", "                        ", "self", ".", "info", "(", "\n", "\"before gid filtering: {}\"", ".", "format", "(", "len", "(", "memory", ")", ")", ")", "\n", "memory", "=", "[", "\n", "x", "for", "x", "in", "memory", "if", "x", ".", "gid", "in", "self", ".", "allowed_gids", "]", "\n", "self", ".", "info", "(", "\"after gid filtering: {}\"", ".", "format", "(", "len", "(", "memory", ")", ")", ")", "\n", "random", ".", "shuffle", "(", "memory", ")", "\n", "", "", "else", ":", "\n", "                    ", "memory", "=", "memory", "[", ":", "5000", "]", "\n", "", "i", "=", "0", "\n", "while", "i", "<", "int", "(", "math", ".", "ceil", "(", "len", "(", "memory", ")", "*", "1.", "/", "self", ".", "hp", ".", "batch_size", ")", ")", ":", "\n", "                    ", "ss", "=", "i", "*", "self", ".", "hp", ".", "batch_size", "\n", "ee", "=", "min", "(", "(", "i", "+", "1", ")", "*", "self", ".", "hp", ".", "batch_size", ",", "len", "(", "memory", ")", ")", "\n", "batch_memory", "=", "memory", "[", "ss", ":", "ee", "]", "\n", "try", ":", "\n", "                        ", "queue", ".", "put", "(", "self", ".", "_prepare_data", "(", "\n", "batch_memory", ",", "tjs", ",", "action_collector", ")", ",", "\n", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "                        ", "self", ".", "error", "(", "\"add_batch error: {}\"", ".", "format", "(", "e", ")", ")", "\n", "traceback", ".", "print_tb", "(", "e", ".", "__traceback__", ")", "\n", "raise", "RuntimeError", "(", ")", "\n", "", "i", "+=", "1", "\n", "# only load data once if not training", "\n", "", "", "if", "not", "training", ":", "\n", "                ", "break", "\n", "", "", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.students.student_learner.StudentLearner._prepare_data": [[350, 365], ["NotImplementedError"], "methods", ["None"], ["", "def", "_prepare_data", "(", "\n", "self", ",", "\n", "b_memory", ":", "List", "[", "Union", "[", "Tuple", ",", "Memolet", "]", "]", ",", "\n", "tjs", ":", "Trajectory", "[", "ActionMaster", "]", ",", "\n", "action_collector", ":", "ActionCollector", ")", "->", "Tuple", ":", "\n", "        ", "\"\"\"\n        Given a batch of memory, tjs, and action collector, create a tuple\n        of data for training.\n\n        :param b_memory:\n        :param tjs:\n        :param action_collector:\n        :return: Tuple of data, the train_impl knows the details\n        \"\"\"", "\n", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.students.student_learner.StudentLearner._prepare_training": [[366, 393], ["student_learner.StudentLearner._prepare_model", "os.path.join", "tensorflow.summary.FileWriter", "queue.Queue.Queue", "threading.Thread", "threading.Thread.setDaemon", "threading.Thread.start", "saver.save", "tensorflow.train.get_or_create_global_step", "student_learner.StudentLearner._get_combined_data_path"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.students.student_learner.StudentLearner._prepare_model", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.eval_games.FullDirEvalPlayer.start", "home.repos.pwc.inspect_result.yinxusen_deepword.students.student_learner.StudentLearner._get_combined_data_path"], ["", "def", "_prepare_training", "(", "\n", "self", "\n", ")", "->", "Tuple", "[", "Session", ",", "Any", ",", "Saver", ",", "FileWriter", ",", "int", ",", "Queue", "]", ":", "\n", "        ", "sess", ",", "model", ",", "saver", ",", "train_steps", "=", "self", ".", "_prepare_model", "(", "\n", "\"/device:GPU:0\"", ",", "training", "=", "True", ")", "\n", "\n", "# save the very first model to verify weight has been loaded", "\n", "if", "train_steps", "==", "0", ":", "\n", "            ", "saver", ".", "save", "(", "\n", "sess", ",", "self", ".", "ckpt_prefix", ",", "\n", "global_step", "=", "tf", ".", "train", ".", "get_or_create_global_step", "(", "\n", "graph", "=", "model", ".", "graph", ")", ")", "\n", "", "else", ":", "\n", "            ", "pass", "\n", "\n", "", "sw_path", "=", "path", ".", "join", "(", "self", ".", "model_dir", ",", "\"summaries\"", ",", "\"train\"", ")", "\n", "sw", "=", "tf", ".", "summary", ".", "FileWriter", "(", "sw_path", ",", "sess", ".", "graph", ")", "\n", "\n", "queue", "=", "Queue", "(", "maxsize", "=", "100", ")", "\n", "\n", "t", "=", "Thread", "(", "\n", "target", "=", "self", ".", "_add_batch", ",", "\n", "args", "=", "(", "self", ".", "_get_combined_data_path", "(", "self", ".", "train_data_dir", ")", ",", "queue", ")", ")", "\n", "t", ".", "setDaemon", "(", "True", ")", "\n", "t", ".", "start", "(", ")", "\n", "\n", "return", "sess", ",", "model", ",", "saver", ",", "sw", ",", "train_steps", ",", "queue", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.students.student_learner.StudentLearner.train": [[394, 435], ["student_learner.StudentLearner.queue.empty", "student_learner.StudentLearner.info", "tqdm.tqdm.trange", "student_learner.StudentLearner._prepare_training", "student_learner.StudentLearner.queue.empty", "student_learner.StudentLearner.info", "time.sleep", "student_learner.StudentLearner.warning", "tqdm.tqdm.trange", "student_learner.StudentLearner.saver.save", "student_learner.StudentLearner.info", "student_learner.StudentLearner.queue.get", "student_learner.StudentLearner._train_impl", "tensorflow.train.get_or_create_global_step", "student_learner.StudentLearner.info", "sys.exc_info", "traceback.print_exception"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.deepword.log.Logging.info", "home.repos.pwc.inspect_result.yinxusen_deepword.students.snn_learner.SNNLearner._prepare_training", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.log.Logging.info", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.log.Logging.warning", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.log.Logging.info", "home.repos.pwc.inspect_result.yinxusen_deepword.students.student_learner.CMD.get", "home.repos.pwc.inspect_result.yinxusen_deepword.students.snn_learner.SNNLearner._train_impl", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.log.Logging.info"], ["", "def", "train", "(", "self", ",", "n_epochs", ":", "int", ")", "->", "None", ":", "\n", "        ", "if", "self", ".", "sess", "is", "None", ":", "\n", "            ", "(", "self", ".", "sess", ",", "self", ".", "model", ",", "self", ".", "saver", ",", "self", ".", "sw", ",", "self", ".", "train_steps", ",", "\n", "self", ".", "queue", ")", "=", "self", ".", "_prepare_training", "(", ")", "\n", "\n", "", "wait_times", "=", "10", "\n", "while", "wait_times", ">", "0", "and", "self", ".", "queue", ".", "empty", "(", ")", ":", "\n", "            ", "self", ".", "info", "(", "\"waiting data ... (retry times: {})\"", ".", "format", "(", "wait_times", ")", ")", "\n", "time", ".", "sleep", "(", "10", ")", "\n", "wait_times", "-=", "1", "\n", "\n", "", "if", "self", ".", "queue", ".", "empty", "(", ")", ":", "\n", "            ", "self", ".", "warning", "(", "\"No data received. exit\"", ")", "\n", "return", "\n", "\n", "", "epoch_size", "=", "self", ".", "hp", ".", "save_gap_t", "\n", "\n", "self", ".", "info", "(", "\"start training\"", ")", "\n", "data_in_queue", "=", "True", "\n", "for", "et", "in", "trange", "(", "n_epochs", ",", "ascii", "=", "True", ",", "desc", "=", "\"epoch\"", ")", ":", "\n", "            ", "for", "it", "in", "trange", "(", "epoch_size", ",", "ascii", "=", "True", ",", "desc", "=", "\"step\"", ")", ":", "\n", "                ", "try", ":", "\n", "                    ", "data", "=", "self", ".", "queue", ".", "get", "(", "timeout", "=", "1000", ")", "\n", "self", ".", "_train_impl", "(", "\n", "data", ",", "self", ".", "train_steps", "+", "et", "*", "epoch_size", "+", "it", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "                    ", "data_in_queue", "=", "False", "\n", "self", ".", "info", "(", "\"no more data: {}\"", ".", "format", "(", "e", ")", ")", "\n", "exc_type", ",", "exc_value", ",", "exc_traceback", "=", "sys", ".", "exc_info", "(", ")", "\n", "traceback", ".", "print_exception", "(", "\n", "exc_type", ",", "exc_value", ",", "exc_traceback", ",", "limit", "=", "None", ",", "\n", "file", "=", "sys", ".", "stdout", ")", "\n", "break", "\n", "", "", "self", ".", "saver", ".", "save", "(", "\n", "self", ".", "sess", ",", "self", ".", "ckpt_prefix", ",", "\n", "global_step", "=", "tf", ".", "train", ".", "get_or_create_global_step", "(", "\n", "graph", "=", "self", ".", "model", ".", "graph", ")", ")", "\n", "self", ".", "info", "(", "\"finish and save {} epoch\"", ".", "format", "(", "et", ")", ")", "\n", "if", "not", "data_in_queue", ":", "\n", "                ", "break", "\n", "", "", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.students.student_learner.StudentLearner._train_impl": [[436, 445], ["NotImplementedError"], "methods", ["None"], ["", "def", "_train_impl", "(", "self", ",", "data", ":", "Tuple", ",", "train_step", ":", "int", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        Train the model one time given data.\n\n        :param data:\n        :param train_step:\n        :return:\n        \"\"\"", "\n", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.students.student_learner.StudentLearner._prepare_test": [[446, 454], ["student_learner.StudentLearner._prepare_model", "queue.Queue.Queue"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.students.student_learner.StudentLearner._prepare_model"], ["", "def", "_prepare_test", "(", "\n", "self", ",", "device_placement", ":", "str", "=", "\"/device:GPU:0\"", ",", "\n", "restore_from", ":", "Optional", "[", "str", "]", "=", "None", "\n", ")", "->", "Tuple", "[", "Session", ",", "Any", ",", "Saver", ",", "int", ",", "Queue", "]", ":", "\n", "        ", "sess", ",", "model", ",", "saver", ",", "train_steps", "=", "self", ".", "_prepare_model", "(", "\n", "device_placement", ",", "training", "=", "False", ",", "restore_from", "=", "restore_from", ")", "\n", "queue", "=", "Queue", "(", ")", "\n", "return", "sess", ",", "model", ",", "saver", ",", "train_steps", ",", "queue", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.students.student_learner.StudentLearner.preprocess_input": [[456, 489], ["student_learner.StudentLearner._get_compatible_snapshot_tag", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "student_learner.StudentLearner._load_snapshot", "numpy.savez", "int", "min", "queue.append", "math.ceil", "student_learner.StudentLearner.info", "len", "student_learner.StudentLearner._prepare_data", "len"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.agents.base_agent.BaseAgent._get_compatible_snapshot_tag", "home.repos.pwc.inspect_result.yinxusen_deepword.students.student_learner.StudentLearner._load_snapshot", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.tree_memory.TreeMemory.append", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.log.Logging.info", "home.repos.pwc.inspect_result.yinxusen_deepword.students.snn_learner.SNNLearner._prepare_data"], ["", "def", "preprocess_input", "(", "self", ",", "data_dir", ")", ":", "\n", "        ", "valid_tags", "=", "self", ".", "_get_compatible_snapshot_tag", "(", "data_dir", ")", "\n", "queue", "=", "[", "]", "\n", "\n", "for", "tag", "in", "valid_tags", ":", "\n", "            ", "tp", "=", "path", ".", "join", "(", "\n", "data_dir", ",", "\"{}-{}.npz\"", ".", "format", "(", "self", ".", "tjs_prefix", ",", "tag", ")", ")", "\n", "hsp", "=", "path", ".", "join", "(", "\n", "data_dir", ",", "\"{}-{}.npz\"", ".", "format", "(", "self", ".", "hs2tj_prefix", ",", "tag", ")", ")", "\n", "ap", "=", "path", ".", "join", "(", "\n", "data_dir", ",", "\n", "\"{}-{}.npz\"", ".", "format", "(", "self", ".", "action_prefix", ",", "tag", ")", ")", "\n", "mp", "=", "path", ".", "join", "(", "\n", "data_dir", ",", "\"{}-{}.npz\"", ".", "format", "(", "self", ".", "memo_prefix", ",", "tag", ")", ")", "\n", "\n", "memory", ",", "tjs", ",", "action_collector", ",", "hash_states2tjs", "=", "self", ".", "_load_snapshot", "(", "mp", ",", "tp", ",", "ap", ",", "hsp", ")", "\n", "\n", "i", "=", "0", "\n", "while", "i", "<", "int", "(", "math", ".", "ceil", "(", "len", "(", "memory", ")", "*", "1.", "/", "self", ".", "hp", ".", "batch_size", ")", ")", ":", "\n", "                ", "if", "i", "%", "100", "==", "0", ":", "\n", "                    ", "self", ".", "info", "(", "\"process batch - {}\"", ".", "format", "(", "i", ")", ")", "\n", "", "ss", "=", "i", "*", "self", ".", "hp", ".", "batch_size", "\n", "ee", "=", "min", "(", "(", "i", "+", "1", ")", "*", "self", ".", "hp", ".", "batch_size", ",", "len", "(", "memory", ")", ")", "\n", "batch_memory", "=", "memory", "[", "ss", ":", "ee", "]", "\n", "queue", ".", "append", "(", "self", ".", "_prepare_data", "(", "\n", "batch_memory", ",", "tjs", ",", "action_collector", ")", ",", "\n", ")", "\n", "i", "+=", "1", "\n", "\n", "", "np", ".", "savez", "(", "\n", "\"{}/student-data-{}.npz\"", ".", "format", "(", "self", ".", "model_dir", ",", "tag", ")", ",", "\n", "data", "=", "queue", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.students.student_learner.StudentLearner.data_loader": [[491, 509], ["sorted", "student_learner.StudentLearner.info", "deepword.agents.utils.get_path_tags", "tqdm.tqdm.tqdm", "sorted", "student_learner.StudentLearner.info", "numpy.load", "student_learner.StudentLearner.info", "os.path.join", "random.random"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.deepword.log.Logging.info", "home.repos.pwc.inspect_result.yinxusen_deepword.agents.utils.get_path_tags", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.log.Logging.info", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.log.Logging.info"], ["", "", "def", "data_loader", "(", "\n", "self", ",", "data_path", ":", "str", ",", "batch_size", ":", "int", ",", "training", ":", "bool", "\n", ")", "->", "Generator", "[", "Tuple", ",", "None", ",", "None", "]", ":", "\n", "        ", "data_tags", "=", "sorted", "(", "get_path_tags", "(", "data_path", ",", "prefix", "=", "\"student-data\"", ")", ")", "\n", "self", ".", "info", "(", "\"load snn tags: {}\"", ".", "format", "(", "data_tags", ")", ")", "\n", "while", "True", ":", "\n", "            ", "for", "tag", "in", "tqdm", "(", "sorted", "(", "data_tags", ",", "key", "=", "lambda", "k", ":", "random", ".", "random", "(", ")", ")", ")", ":", "\n", "                ", "self", ".", "info", "(", "\"load data from {}\"", ".", "format", "(", "tag", ")", ")", "\n", "data", "=", "np", ".", "load", "(", "\n", "path", ".", "join", "(", "data_path", ",", "\"student-data-{}.npz\"", ".", "format", "(", "tag", ")", ")", ",", "\n", "allow_pickle", "=", "True", ")", "\n", "data", "=", "data", "[", "\"data\"", "]", "\n", "for", "x", "in", "data", ":", "\n", "                    ", "yield", "x", "\n", "# only load data one time for evaluation", "\n", "", "", "if", "not", "training", ":", "\n", "                ", "self", ".", "info", "(", "\"snn data loader finished\"", ")", "\n", "break", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.students.student_learner.StudentLearner._test_impl": [[510, 518], ["NotImplementedError"], "methods", ["None"], ["", "", "", "def", "_test_impl", "(", "self", ",", "data", ":", "Tuple", ")", "->", "np", ".", "ndarray", ":", "\n", "        ", "\"\"\"\n        Test the model one time given data.\n\n        :param data:\n        :return:\n        \"\"\"", "\n", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.students.student_learner.StudentLearner.test": [[519, 553], ["student_learner.StudentLearner.data_loader", "student_learner.StudentLearner.info", "float", "student_learner.StudentLearner.info", "student_learner.StudentLearner._prepare_test", "student_learner.StudentLearner._test_impl", "len", "total_acc.append", "numpy.mean", "student_learner.StudentLearner.debug", "numpy.mean", "len"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.students.student_learner.StudentLearner.data_loader", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.log.Logging.info", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.log.Logging.info", "home.repos.pwc.inspect_result.yinxusen_deepword.students.snn_learner.SNNLearner._prepare_test", "home.repos.pwc.inspect_result.yinxusen_deepword.students.snn_learner.SNNLearner._test_impl", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.tree_memory.TreeMemory.append", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.log.Logging.debug"], ["", "def", "test", "(", "\n", "self", ",", "device_placement", ":", "str", "=", "\"/device:GPU:0\"", ",", "\n", "restore_from", ":", "Optional", "[", "str", "]", "=", "None", ")", "->", "Tuple", "[", "float", ",", "int", "]", ":", "\n", "\n", "        ", "if", "self", ".", "sess", "is", "None", ":", "\n", "            ", "(", "self", ".", "sess", ",", "self", ".", "model", ",", "self", ".", "saver", ",", "self", ".", "train_steps", ",", "\n", "self", ".", "queue", ")", "=", "self", ".", "_prepare_test", "(", "device_placement", ",", "restore_from", ")", "\n", "\n", "", "data_loader", "=", "self", ".", "data_loader", "(", "\n", "data_path", "=", "self", ".", "eval_data_path", ",", "batch_size", "=", "self", ".", "hp", ".", "batch_size", ",", "\n", "training", "=", "False", ")", "\n", "\n", "self", ".", "info", "(", "\"start test\"", ")", "\n", "total_test", "=", "0", "\n", "total_acc", "=", "[", "]", "\n", "# TODO: control the evaluation size, current we use 625 batches", "\n", "# TODO: with 8 trajectories (32 samples) per batch", "\n", "i", "=", "0", "\n", "for", "data", "in", "data_loader", ":", "\n", "            ", "if", "i", ">=", "625", ":", "\n", "                ", "break", "\n", "", "acc", "=", "self", ".", "_test_impl", "(", "data", ")", "\n", "if", "i", "%", "100", "==", "0", ":", "\n", "                ", "self", ".", "debug", "(", "\n", "\"progress: {}, current acc: {}, data: {}\"", ".", "format", "(", "\n", "i", ",", "np", ".", "mean", "(", "acc", ")", ",", "len", "(", "acc", ")", ")", ")", "\n", "", "total_test", "+=", "len", "(", "acc", ")", "\n", "total_acc", ".", "append", "(", "acc", ")", "\n", "i", "+=", "1", "\n", "\n", "", "acc", "=", "float", "(", "np", ".", "mean", "(", "total_acc", ")", ")", "\n", "self", ".", "info", "(", "\"step: {}, acc: {}, total: {}\"", ".", "format", "(", "\n", "self", ".", "train_steps", ",", "acc", ",", "total_test", ")", ")", "\n", "return", "acc", ",", "total_test", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.students.student_learner.DRRNLearner.__init__": [[556, 559], ["student_learner.StudentLearner.__init__"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.models.drrn_modeling.PseudoSeq2SeqDRRN.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "hp", ":", "HParams", ",", "model_dir", ":", "str", ",", "train_data_dir", ":", "str", ")", "->", "None", ":", "\n", "        ", "super", "(", "DRRNLearner", ",", "self", ")", ".", "__init__", "(", "hp", ",", "model_dir", ",", "train_data_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.students.student_learner.DRRNLearner._train_impl": [[560, 576], ["student_learner.DRRNLearner.sess.run", "student_learner.DRRNLearner.debug", "student_learner.DRRNLearner.sw.add_summary", "numpy.arange", "len"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.deepword.log.Logging.debug"], ["", "def", "_train_impl", "(", "self", ",", "data", ",", "train_step", ")", ":", "\n", "        ", "(", "p_states", ",", "p_len", ",", "actions", ",", "action_len", ",", "actions_repeats", ",", "expected_qs", "\n", ")", "=", "data", "\n", "_", ",", "summaries", ",", "loss", "=", "self", ".", "sess", ".", "run", "(", "\n", "[", "self", ".", "model", ".", "train_op", ",", "self", ".", "model", ".", "train_summary_op", ",", "self", ".", "model", ".", "loss", "]", ",", "\n", "feed_dict", "=", "{", "\n", "self", ".", "model", ".", "src_", ":", "p_states", ",", "\n", "self", ".", "model", ".", "src_len_", ":", "p_len", ",", "\n", "self", ".", "model", ".", "actions_", ":", "actions", ",", "\n", "self", ".", "model", ".", "actions_len_", ":", "action_len", ",", "\n", "self", ".", "model", ".", "actions_repeats_", ":", "actions_repeats", ",", "\n", "self", ".", "model", ".", "action_idx_", ":", "np", ".", "arange", "(", "len", "(", "expected_qs", ")", ")", ",", "\n", "self", ".", "model", ".", "expected_q_", ":", "expected_qs", ",", "\n", "self", ".", "model", ".", "b_weight_", ":", "[", "1.", "]", "}", ")", "\n", "self", ".", "debug", "(", "\"\\nloss: {}\"", ".", "format", "(", "loss", ")", ")", "\n", "self", ".", "sw", ".", "add_summary", "(", "summaries", ",", "train_step", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.students.student_learner.DRRNLearner._test_impl": [[577, 579], ["NotImplementedError"], "methods", ["None"], ["", "def", "_test_impl", "(", "self", ",", "data", ":", "Tuple", ")", "->", "np", ".", "ndarray", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.students.student_learner.DRRNLearner._prepare_data": [[580, 602], ["deepword.utils.flatten", "tjs.fetch_batch_pre_states", "deepword.students.utils.batch_dqn_input", "deepword.agents.utils.batch_drrn_action_input", "action_collector.get_action_len", "action_collector.get_action_matrix", "list"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.deepword.utils.flatten", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.trajectory.Trajectory.fetch_batch_pre_states", "home.repos.pwc.inspect_result.yinxusen_deepword.students.utils.batch_dqn_input", "home.repos.pwc.inspect_result.yinxusen_deepword.agents.utils.batch_drrn_action_input", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.action.ActionCollector.get_action_len", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.action.ActionCollector.get_action_matrix"], ["", "def", "_prepare_data", "(", "self", ",", "b_memory", ",", "tjs", ",", "action_collector", ")", ":", "\n", "        ", "trajectory_id", "=", "[", "m", ".", "tid", "for", "m", "in", "b_memory", "]", "\n", "state_id", "=", "[", "m", ".", "sid", "for", "m", "in", "b_memory", "]", "\n", "game_id", "=", "[", "m", ".", "gid", "for", "m", "in", "b_memory", "]", "\n", "action_mask", "=", "[", "m", ".", "action_mask", "for", "m", "in", "b_memory", "]", "\n", "expected_qs", "=", "flatten", "(", "[", "list", "(", "m", ".", "q_actions", ")", "for", "m", "in", "b_memory", "]", ")", "\n", "\n", "states", "=", "tjs", ".", "fetch_batch_pre_states", "(", "trajectory_id", ",", "state_id", ")", "\n", "p_states", ",", "p_len", ",", "_", "=", "batch_dqn_input", "(", "\n", "states", ",", "self", ".", "tokenizer", ",", "self", ".", "hp", ".", "num_tokens", ",", "\n", "self", ".", "hp", ".", "padding_val_id", ",", "\n", "with_action_padding", "=", "self", ".", "hp", ".", "action_padding_in_tj", ",", "\n", "max_action_size", "=", "self", ".", "hp", ".", "n_tokens_per_action", "\n", ")", "\n", "action_len", "=", "(", "\n", "[", "action_collector", ".", "get_action_len", "(", "gid", ")", "for", "gid", "in", "game_id", "]", ")", "\n", "action_matrix", "=", "(", "\n", "[", "action_collector", ".", "get_action_matrix", "(", "gid", ")", "for", "gid", "in", "game_id", "]", ")", "\n", "actions", ",", "action_len", ",", "actions_repeats", ",", "_", "=", "batch_drrn_action_input", "(", "\n", "action_matrix", ",", "action_len", ",", "action_mask", ")", "\n", "return", "(", "\n", "p_states", ",", "p_len", ",", "actions", ",", "action_len", ",", "actions_repeats", ",", "expected_qs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.students.student_learner.GenLearner._train_impl": [[605, 620], ["student_learner.GenLearner.sess.run", "student_learner.GenLearner.sw.add_summary", "student_learner.GenLearner.debug"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.deepword.log.Logging.debug"], ["    ", "def", "_train_impl", "(", "self", ",", "data", ",", "train_step", ")", ":", "\n", "        ", "(", "p_states", ",", "p_len", ",", "master_mask", ",", "actions_in", ",", "actions_out", ",", "action_len", ",", "\n", "b_weight", ")", "=", "data", "\n", "_", ",", "summaries", ",", "loss", "=", "self", ".", "sess", ".", "run", "(", "\n", "[", "self", ".", "model", ".", "train_op", ",", "self", ".", "model", ".", "train_summary_op", ",", "self", ".", "model", ".", "loss", "]", ",", "\n", "feed_dict", "=", "{", "\n", "self", ".", "model", ".", "src_", ":", "p_states", ",", "\n", "self", ".", "model", ".", "src_len_", ":", "p_len", ",", "\n", "self", ".", "model", ".", "src_seg_", ":", "master_mask", ",", "\n", "self", ".", "model", ".", "action_idx_", ":", "actions_in", ",", "\n", "self", ".", "model", ".", "action_idx_out_", ":", "actions_out", ",", "\n", "self", ".", "model", ".", "action_len_", ":", "action_len", ",", "\n", "self", ".", "model", ".", "b_weight_", ":", "b_weight", "}", ")", "\n", "self", ".", "sw", ".", "add_summary", "(", "summaries", ",", "train_step", ")", "\n", "self", ".", "debug", "(", "\"\\nloss: {}\"", ".", "format", "(", "loss", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.students.student_learner.GenLearner._test_impl": [[621, 623], ["NotImplementedError"], "methods", ["None"], ["", "def", "_test_impl", "(", "self", ",", "data", ":", "Tuple", ")", "->", "np", ".", "ndarray", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.students.student_learner.GenLearner._prepare_data": [[624, 650], ["numpy.asarray", "tjs.fetch_batch_pre_states", "deepword.students.utils.batch_dqn_input", "deepword.agents.utils.batch_drrn_action_input", "deepword.agents.utils.get_best_batch_ids", "deepword.agents.utils.get_action_idx_pair", "deepword.utils.flatten", "action_collector.get_action_len", "action_collector.get_action_matrix", "list"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.deepword.trajectory.Trajectory.fetch_batch_pre_states", "home.repos.pwc.inspect_result.yinxusen_deepword.students.utils.batch_dqn_input", "home.repos.pwc.inspect_result.yinxusen_deepword.agents.utils.batch_drrn_action_input", "home.repos.pwc.inspect_result.yinxusen_deepword.agents.utils.get_best_batch_ids", "home.repos.pwc.inspect_result.yinxusen_deepword.agents.utils.get_action_idx_pair", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.utils.flatten", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.action.ActionCollector.get_action_len", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.action.ActionCollector.get_action_matrix"], ["", "def", "_prepare_data", "(", "self", ",", "b_memory", ",", "tjs", ",", "action_collector", ")", ":", "\n", "        ", "trajectory_id", "=", "[", "m", ".", "tid", "for", "m", "in", "b_memory", "]", "\n", "state_id", "=", "[", "m", ".", "sid", "for", "m", "in", "b_memory", "]", "\n", "game_id", "=", "[", "m", ".", "gid", "for", "m", "in", "b_memory", "]", "\n", "action_mask", "=", "[", "m", ".", "action_mask", "for", "m", "in", "b_memory", "]", "\n", "expected_qs", "=", "np", ".", "asarray", "(", "flatten", "(", "[", "list", "(", "m", ".", "q_actions", ")", "for", "m", "in", "b_memory", "]", ")", ")", "\n", "states", "=", "tjs", ".", "fetch_batch_pre_states", "(", "trajectory_id", ",", "state_id", ")", "\n", "p_states", ",", "p_len", ",", "master_mask", "=", "batch_dqn_input", "(", "\n", "states", ",", "self", ".", "tokenizer", ",", "self", ".", "hp", ".", "num_tokens", ",", "\n", "self", ".", "hp", ".", "padding_val_id", ",", "\n", "with_action_padding", "=", "self", ".", "hp", ".", "action_padding_in_tj", ",", "\n", "max_action_size", "=", "self", ".", "hp", ".", "n_tokens_per_action", ")", "\n", "action_len", "=", "(", "\n", "[", "action_collector", ".", "get_action_len", "(", "gid", ")", "for", "gid", "in", "game_id", "]", ")", "\n", "action_matrix", "=", "(", "\n", "[", "action_collector", ".", "get_action_matrix", "(", "gid", ")", "for", "gid", "in", "game_id", "]", ")", "\n", "actions", ",", "action_len", ",", "actions_repeats", ",", "_", "=", "batch_drrn_action_input", "(", "\n", "action_matrix", ",", "action_len", ",", "action_mask", ")", "\n", "best_q_idx", "=", "get_best_batch_ids", "(", "expected_qs", ",", "actions_repeats", ")", "\n", "actions_in", ",", "actions_out", ",", "action_len", "=", "get_action_idx_pair", "(", "\n", "actions", "[", "best_q_idx", "]", ",", "action_len", "[", "best_q_idx", "]", ",", "\n", "self", ".", "hp", ".", "sos_id", ",", "self", ".", "hp", ".", "eos_id", ")", "\n", "b_weight", "=", "[", "1.", "]", "\n", "return", "(", "\n", "p_states", ",", "p_len", ",", "master_mask", ",", "actions_in", ",", "actions_out", ",", "action_len", ",", "\n", "b_weight", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.students.student_learner.GenMixActionsLearner._test_impl": [[653, 655], ["NotImplementedError"], "methods", ["None"], ["    ", "def", "_test_impl", "(", "self", ",", "data", ":", "Tuple", ")", "->", "np", ".", "ndarray", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.students.student_learner.GenMixActionsLearner._prepare_data": [[656, 703], ["deepword.agents.utils.batch_drrn_action_input", "deepword.agents.utils.sample_batch_ids", "deepword.agents.utils.get_action_idx_pair", "tjs.fetch_batch_pre_states", "deepword.students.utils.batch_dqn_input", "numpy.repeat", "numpy.repeat", "numpy.repeat", "numpy.asarray", "numpy.asarray", "action_collector.get_action_len", "action_collector.get_action_matrix", "deepword.utils.flatten", "deepword.utils.flatten", "list", "list", "deepword.utils.softmax", "deepword.utils.softmax", "numpy.zeros_like"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.agents.utils.batch_drrn_action_input", "home.repos.pwc.inspect_result.yinxusen_deepword.agents.utils.sample_batch_ids", "home.repos.pwc.inspect_result.yinxusen_deepword.agents.utils.get_action_idx_pair", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.trajectory.Trajectory.fetch_batch_pre_states", "home.repos.pwc.inspect_result.yinxusen_deepword.students.utils.batch_dqn_input", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.action.ActionCollector.get_action_len", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.action.ActionCollector.get_action_matrix", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.utils.flatten", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.utils.flatten", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.utils.softmax", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.utils.softmax"], ["", "def", "_prepare_data", "(", "self", ",", "b_memory", ",", "tjs", ",", "action_collector", ")", ":", "\n", "        ", "n_classes", "=", "4", "\n", "trajectory_id", "=", "[", "m", ".", "tid", "for", "m", "in", "b_memory", "]", "\n", "state_id", "=", "[", "m", ".", "sid", "for", "m", "in", "b_memory", "]", "\n", "game_id", "=", "[", "m", ".", "gid", "for", "m", "in", "b_memory", "]", "\n", "action_mask", "=", "[", "m", ".", "action_mask", "for", "m", "in", "b_memory", "]", "\n", "# b_weight is softmax(q-values)", "\n", "# TODO: since every trajectory has different size of admissible actions,", "\n", "#   the softmax version of q-values could have different range for each", "\n", "#   trajectory. But it's fine for now, since we only need the weight", "\n", "#   inside admissible actions for each trajectory.", "\n", "if", "self", ".", "hp", ".", "gen_loss_weighted_by_qs", ":", "\n", "            ", "b_weight", "=", "np", ".", "asarray", "(", "flatten", "(", "\n", "[", "list", "(", "softmax", "(", "m", ".", "q_actions", ")", ")", "for", "m", "in", "b_memory", "]", ")", ")", "\n", "", "else", ":", "\n", "            ", "b_weight", "=", "np", ".", "asarray", "(", "flatten", "(", "\n", "[", "list", "(", "softmax", "(", "np", ".", "zeros_like", "(", "m", ".", "q_actions", ")", ")", ")", "\n", "for", "m", "in", "b_memory", "]", ")", ")", "\n", "\n", "", "action_len", "=", "(", "\n", "[", "action_collector", ".", "get_action_len", "(", "gid", ")", "for", "gid", "in", "game_id", "]", ")", "\n", "action_matrix", "=", "(", "\n", "[", "action_collector", ".", "get_action_matrix", "(", "gid", ")", "for", "gid", "in", "game_id", "]", ")", "\n", "actions", ",", "action_len", ",", "actions_repeats", ",", "_", "=", "batch_drrn_action_input", "(", "\n", "action_matrix", ",", "action_len", ",", "action_mask", ")", "\n", "\n", "batch_q_idx", "=", "sample_batch_ids", "(", "\n", "b_weight", ",", "actions_repeats", ",", "k", "=", "n_classes", ")", "\n", "selected_b_weights", "=", "b_weight", "[", "batch_q_idx", "]", "\n", "\n", "actions_in", ",", "actions_out", ",", "action_len", "=", "get_action_idx_pair", "(", "\n", "actions", "[", "batch_q_idx", "]", ",", "action_len", "[", "batch_q_idx", "]", ",", "\n", "self", ".", "hp", ".", "sos_id", ",", "self", ".", "hp", ".", "eos_id", ")", "\n", "\n", "states", "=", "tjs", ".", "fetch_batch_pre_states", "(", "trajectory_id", ",", "state_id", ")", "\n", "p_states", ",", "p_len", ",", "master_mask", "=", "batch_dqn_input", "(", "\n", "states", ",", "self", ".", "tokenizer", ",", "self", ".", "hp", ".", "num_tokens", ",", "\n", "self", ".", "hp", ".", "padding_val_id", ",", "\n", "with_action_padding", "=", "self", ".", "hp", ".", "action_padding_in_tj", ",", "\n", "max_action_size", "=", "self", ".", "hp", ".", "n_tokens_per_action", ")", "\n", "p_states", "=", "np", ".", "repeat", "(", "p_states", ",", "n_classes", ",", "axis", "=", "0", ")", "\n", "p_len", "=", "np", ".", "repeat", "(", "p_len", ",", "n_classes", ",", "axis", "=", "0", ")", "\n", "master_mask", "=", "np", ".", "repeat", "(", "master_mask", ",", "n_classes", ",", "axis", "=", "0", ")", "\n", "\n", "return", "(", "\n", "p_states", ",", "p_len", ",", "master_mask", ",", "actions_in", ",", "actions_out", ",", "action_len", ",", "\n", "selected_b_weights", "[", ":", ",", "None", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.students.student_learner.GenConcatActionsLearner.concat_actions": [[713, 735], ["deepword.utils.flatten", "numpy.argsort", "numpy.take_along_axis", "numpy.take_along_axis", "numpy.take_along_axis", "numpy.concatenate", "numpy.repeat", "zip"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.deepword.utils.flatten"], ["@", "classmethod", "\n", "def", "concat_actions", "(", "\n", "cls", ",", "\n", "action_ids", ":", "List", "[", "np", ".", "ndarray", "]", ",", "\n", "action_len", ":", "List", "[", "int", "]", ",", "\n", "action_weight", ":", "np", ".", "ndarray", ",", "\n", "sep_val_id", ":", "int", ",", "\n", "sort_by_weight", ":", "bool", "=", "True", "\n", ")", "->", "Tuple", "[", "np", ".", "ndarray", ",", "np", ".", "ndarray", "]", ":", "\n", "        ", "\"\"\"concat given action_ids into one output str\"\"\"", "\n", "if", "sort_by_weight", ":", "\n", "            ", "sorted_idx", "=", "np", ".", "argsort", "(", "-", "action_weight", ",", "axis", "=", "-", "1", ")", "\n", "action_ids", "=", "np", ".", "take_along_axis", "(", "action_ids", ",", "sorted_idx", ",", "axis", "=", "0", ")", "\n", "action_len", "=", "np", ".", "take_along_axis", "(", "action_len", ",", "sorted_idx", ")", "\n", "action_weight", "=", "np", ".", "take_along_axis", "(", "\n", "action_weight", ",", "sorted_idx", ",", "axis", "=", "-", "1", ")", "\n", "\n", "", "action_ids", "=", "flatten", "(", "\n", "[", "(", "x", "[", ":", "l", "]", ",", "[", "sep_val_id", "]", ")", "for", "x", ",", "l", "in", "zip", "(", "action_ids", ",", "action_len", ")", "]", ")", "\n", "concat_action", "=", "np", ".", "concatenate", "(", "action_ids", ",", "axis", "=", "0", ")", "[", ":", "-", "1", "]", "\n", "token_weight", "=", "np", ".", "repeat", "(", "action_weight", ",", "repeats", "=", "action_len", "+", "1", ")", "[", ":", "-", "1", "]", "\n", "return", "concat_action", ",", "token_weight", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.students.student_learner.GenConcatActionsLearner._test_impl": [[736, 738], ["NotImplementedError"], "methods", ["None"], ["", "def", "_test_impl", "(", "self", ",", "data", ":", "Tuple", ")", "->", "np", ".", "ndarray", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.students.student_learner.GenConcatActionsLearner._prepare_data_v2": [[739, 771], ["tjs.fetch_batch_pre_states", "deepword.students.utils.batch_dqn_input", "deepword.students.utils.align_batch_str", "deepword.agents.utils.get_action_idx_pair", "student_learner.GenConcatActionsLearner.tokenizer.convert_tokens_to_ids", "sorted", "zip", "student_learner.GenConcatActionsLearner.tokenizer.tokenize", "list", "len", "numpy.asarray", "action_collector.get_actions"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.deepword.trajectory.Trajectory.fetch_batch_pre_states", "home.repos.pwc.inspect_result.yinxusen_deepword.students.utils.batch_dqn_input", "home.repos.pwc.inspect_result.yinxusen_deepword.students.utils.align_batch_str", "home.repos.pwc.inspect_result.yinxusen_deepword.agents.utils.get_action_idx_pair", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.tokenizers.BertTokenizer.convert_tokens_to_ids", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.tokenizers.BertTokenizer.tokenize", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.action.ActionCollector.get_actions"], ["", "def", "_prepare_data_v2", "(", "self", ",", "b_memory", ",", "tjs", ",", "action_collector", ")", ":", "\n", "        ", "\"\"\"prepare concat actions without using q-values to weigh\"\"\"", "\n", "trajectory_id", "=", "[", "m", ".", "tid", "for", "m", "in", "b_memory", "]", "\n", "state_id", "=", "[", "m", ".", "sid", "for", "m", "in", "b_memory", "]", "\n", "game_id", "=", "[", "m", ".", "gid", "for", "m", "in", "b_memory", "]", "\n", "admissible_action_mask", "=", "[", "m", ".", "sys_action_mask", "for", "m", "in", "b_memory", "]", "\n", "\n", "states", "=", "tjs", ".", "fetch_batch_pre_states", "(", "trajectory_id", ",", "state_id", ")", "\n", "p_states", ",", "p_len", ",", "master_mask", "=", "batch_dqn_input", "(", "\n", "states", ",", "self", ".", "tokenizer", ",", "self", ".", "hp", ".", "num_tokens", ",", "\n", "self", ".", "hp", ".", "padding_val_id", ",", "\n", "with_action_padding", "=", "self", ".", "hp", ".", "action_padding_in_tj", ",", "\n", "max_action_size", "=", "self", ".", "hp", ".", "n_tokens_per_action", ")", "\n", "\n", "actions", "=", "[", "\n", "\" ; \"", ".", "join", "(", "sorted", "(", "list", "(", "\n", "np", ".", "asarray", "(", "action_collector", ".", "get_actions", "(", "gid", ")", ")", "[", "mid", "]", ")", ")", ")", "\n", "for", "gid", ",", "mid", "in", "zip", "(", "game_id", ",", "admissible_action_mask", ")", "]", "\n", "action_idx", "=", "[", "\n", "self", ".", "tokenizer", ".", "convert_tokens_to_ids", "(", "\n", "self", ".", "tokenizer", ".", "tokenize", "(", "concat_actions", ")", ")", "\n", "for", "concat_actions", "in", "actions", "]", "\n", "\n", "action_matrix", ",", "action_len", "=", "align_batch_str", "(", "\n", "ids", "=", "action_idx", ",", "str_len_allowance", "=", "self", ".", "hp", ".", "max_decoding_size", ",", "\n", "padding_val_id", "=", "self", ".", "hp", ".", "padding_val_id", ",", "\n", "valid_len", "=", "[", "len", "(", "x", ")", "for", "x", "in", "action_idx", "]", ")", "\n", "\n", "actions_in", ",", "actions_out", ",", "action_len", "=", "get_action_idx_pair", "(", "\n", "action_matrix", ",", "action_len", ",", "self", ".", "hp", ".", "sos_id", ",", "self", ".", "hp", ".", "eos_id", ")", "\n", "return", "(", "\n", "p_states", ",", "p_len", ",", "master_mask", ",", "actions_in", ",", "actions_out", ",", "action_len", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.students.student_learner.GenConcatActionsLearner._prepare_data": [[772, 838], ["tjs.fetch_batch_pre_states", "deepword.students.utils.batch_dqn_input", "zip", "student_learner.GenConcatActionsLearner.concat_actions", "len", "min", "numpy.pad", "numpy.copy", "min", "batch_concat_action_in.append", "batch_concat_action_out.append", "batch_token_weight.append", "batch_concat_action_len.append", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "action_collector.get_action_len", "action_collector.get_action_matrix", "deepword.utils.softmax", "numpy.pad", "numpy.pad"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.deepword.trajectory.Trajectory.fetch_batch_pre_states", "home.repos.pwc.inspect_result.yinxusen_deepword.students.utils.batch_dqn_input", "home.repos.pwc.inspect_result.yinxusen_deepword.students.student_learner.GenConcatActionsLearner.concat_actions", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.tree_memory.TreeMemory.append", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.tree_memory.TreeMemory.append", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.tree_memory.TreeMemory.append", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.tree_memory.TreeMemory.append", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.action.ActionCollector.get_action_len", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.action.ActionCollector.get_action_matrix", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.utils.softmax"], ["", "def", "_prepare_data", "(", "self", ",", "b_memory", ",", "tjs", ",", "action_collector", ")", ":", "\n", "        ", "\"\"\"prepare concat action weighted by q-values\"\"\"", "\n", "trajectory_id", "=", "[", "m", ".", "tid", "for", "m", "in", "b_memory", "]", "\n", "state_id", "=", "[", "m", ".", "sid", "for", "m", "in", "b_memory", "]", "\n", "game_id", "=", "[", "m", ".", "gid", "for", "m", "in", "b_memory", "]", "\n", "action_mask", "=", "[", "m", ".", "action_mask", "for", "m", "in", "b_memory", "]", "\n", "expected_qs", "=", "[", "m", ".", "q_actions", "for", "m", "in", "b_memory", "]", "\n", "\n", "states", "=", "tjs", ".", "fetch_batch_pre_states", "(", "trajectory_id", ",", "state_id", ")", "\n", "p_states", ",", "p_len", ",", "master_mask", "=", "batch_dqn_input", "(", "\n", "states", ",", "self", ".", "tokenizer", ",", "self", ".", "hp", ".", "num_tokens", ",", "\n", "self", ".", "hp", ".", "padding_val_id", ",", "\n", "with_action_padding", "=", "self", ".", "hp", ".", "action_padding_in_tj", ",", "\n", "max_action_size", "=", "self", ".", "hp", ".", "n_tokens_per_action", ")", "\n", "\n", "batch_concat_action_in", "=", "[", "]", "\n", "batch_concat_action_out", "=", "[", "]", "\n", "batch_token_weight", "=", "[", "]", "\n", "batch_concat_action_len", "=", "[", "]", "\n", "\n", "for", "gid", ",", "mask", ",", "q_vals", "in", "zip", "(", "game_id", ",", "action_mask", ",", "expected_qs", ")", ":", "\n", "            ", "action_len", "=", "action_collector", ".", "get_action_len", "(", "gid", ")", "[", "mask", "]", "\n", "action_ids", "=", "action_collector", ".", "get_action_matrix", "(", "gid", ")", "[", "mask", "]", "\n", "\n", "# step 1: concat actions", "\n", "concat_action", ",", "token_weight", "=", "self", ".", "concat_actions", "(", "\n", "action_ids", ",", "action_len", ",", "softmax", "(", "q_vals", ")", ",", "\n", "self", ".", "tokenizer", ".", "vocab", "[", "\";\"", "]", ",", "sort_by_weight", "=", "True", ")", "\n", "\n", "# step 2: padding or trimming to max allowance", "\n", "concat_len", "=", "len", "(", "concat_action", ")", "\n", "padding_size", "=", "self", ".", "hp", ".", "max_decoding_size", "-", "concat_len", "\n", "if", "padding_size", ">", "0", ":", "\n", "                ", "concat_action", "=", "np", ".", "pad", "(", "\n", "concat_action", ",", "(", "0", ",", "padding_size", ")", ",", "\n", "mode", "=", "'constant'", ",", "constant_values", "=", "self", ".", "hp", ".", "padding_val_id", ")", "\n", "token_weight", "=", "np", ".", "pad", "(", "\n", "token_weight", ",", "(", "0", ",", "padding_size", ")", ",", "\n", "mode", "=", "'constant'", ",", "constant_values", "=", "0", ")", "\n", "", "else", ":", "\n", "                ", "concat_action", "=", "concat_action", "[", ":", "self", ".", "hp", ".", "max_decoding_size", "]", "\n", "token_weight", "=", "token_weight", "[", ":", "self", ".", "hp", ".", "max_decoding_size", "]", "\n", "", "concat_len", "=", "min", "(", "concat_len", ",", "self", ".", "hp", ".", "max_decoding_size", ")", "\n", "\n", "# step 3: create in/out format for PGN", "\n", "action_id_in", "=", "np", ".", "pad", "(", "\n", "concat_action", ",", "(", "1", ",", ")", ",", "\n", "mode", "=", "'constant'", ",", "constant_values", "=", "self", ".", "hp", ".", "sos_id", ")", "\n", "# make sure original action_matrix is untouched.", "\n", "action_id_out", "=", "np", ".", "copy", "(", "concat_action", ")", "\n", "new_action_len", "=", "min", "(", "concat_len", "+", "1", ",", "self", ".", "hp", ".", "max_decoding_size", ")", "\n", "action_id_out", "[", "new_action_len", "-", "1", "]", "=", "self", ".", "hp", ".", "eos_id", "\n", "token_weight", "[", "new_action_len", "-", "1", "]", "=", "token_weight", "[", "new_action_len", "-", "2", "]", "\n", "\n", "# step 4: collect results", "\n", "batch_concat_action_in", ".", "append", "(", "action_id_in", ")", "\n", "batch_concat_action_out", ".", "append", "(", "action_id_out", ")", "\n", "batch_token_weight", ".", "append", "(", "token_weight", ")", "\n", "batch_concat_action_len", ".", "append", "(", "new_action_len", ")", "\n", "\n", "", "return", "(", "\n", "p_states", ",", "p_len", ",", "master_mask", ",", "\n", "np", ".", "asarray", "(", "batch_concat_action_in", ")", ",", "\n", "np", ".", "asarray", "(", "batch_concat_action_out", ")", ",", "\n", "np", ".", "asarray", "(", "batch_concat_action_len", ")", ",", "\n", "np", ".", "asarray", "(", "batch_token_weight", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.students.student_learner.NLULearner._train_impl": [[841, 852], ["student_learner.NLULearner.sess.run", "student_learner.NLULearner.sw.add_summary"], "methods", ["None"], ["    ", "def", "_train_impl", "(", "self", ",", "data", ",", "train_step", ")", ":", "\n", "        ", "inp", ",", "seg_tj_action", ",", "inp_len", ",", "selected_qs", ",", "swag_labels", "=", "data", "\n", "_", ",", "summaries", "=", "self", ".", "sess", ".", "run", "(", "\n", "[", "self", ".", "model", ".", "train_op", ",", "self", ".", "model", ".", "train_summary_op", "]", ",", "\n", "feed_dict", "=", "{", "\n", "self", ".", "model", ".", "src_", ":", "inp", ",", "\n", "self", ".", "model", ".", "src_len_", ":", "inp_len", ",", "\n", "self", ".", "model", ".", "seg_tj_action_", ":", "seg_tj_action", ",", "\n", "self", ".", "model", ".", "expected_q_", ":", "selected_qs", "\n", "}", ")", "\n", "self", ".", "sw", ".", "add_summary", "(", "summaries", ",", "train_step", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.students.student_learner.NLULearner._test_impl": [[853, 863], ["student_learner.NLULearner.sess.run", "numpy.abs"], "methods", ["None"], ["", "def", "_test_impl", "(", "self", ",", "data", ":", "Tuple", ")", "->", "np", ".", "ndarray", ":", "\n", "        ", "inp", ",", "seg_tj_action", ",", "inp_len", ",", "selected_qs", ",", "swag_labels", "=", "data", "\n", "q_actions", "=", "self", ".", "sess", ".", "run", "(", "\n", "self", ".", "model", ".", "q_actions", ",", "\n", "feed_dict", "=", "{", "\n", "self", ".", "model", ".", "src_", ":", "inp", ",", "\n", "self", ".", "model", ".", "src_len_", ":", "inp_len", ",", "\n", "self", ".", "model", ".", "seg_tj_action_", ":", "seg_tj_action", "\n", "}", ")", "\n", "return", "np", ".", "abs", "(", "q_actions", "-", "selected_qs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.students.student_learner.NLULearner._prepare_data": [[864, 912], ["numpy.asarray", "deepword.agents.utils.batch_drrn_action_input", "deepword.agents.utils.sample_batch_ids", "tjs.fetch_batch_pre_states", "deepword.students.utils.batch_dqn_input", "len", "action_len[].reshape", "actions[].reshape", "numpy.zeros", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "deepword.utils.flatten", "action_collector.get_action_len", "action_collector.get_action_matrix", "deepword.agents.utils.bert_nlu_input", "len", "zip", "list", "list", "list"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.agents.utils.batch_drrn_action_input", "home.repos.pwc.inspect_result.yinxusen_deepword.agents.utils.sample_batch_ids", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.trajectory.Trajectory.fetch_batch_pre_states", "home.repos.pwc.inspect_result.yinxusen_deepword.students.utils.batch_dqn_input", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.utils.flatten", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.action.ActionCollector.get_action_len", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.action.ActionCollector.get_action_matrix", "home.repos.pwc.inspect_result.yinxusen_deepword.agents.utils.bert_nlu_input"], ["", "def", "_prepare_data", "(", "self", ",", "b_memory", ",", "tjs", ",", "action_collector", ")", ":", "\n", "        ", "n_classes", "=", "4", "\n", "trajectory_id", "=", "[", "m", ".", "tid", "for", "m", "in", "b_memory", "]", "\n", "state_id", "=", "[", "m", ".", "sid", "for", "m", "in", "b_memory", "]", "\n", "game_id", "=", "[", "m", ".", "gid", "for", "m", "in", "b_memory", "]", "\n", "action_mask", "=", "[", "m", ".", "action_mask", "for", "m", "in", "b_memory", "]", "\n", "expected_qs", "=", "np", ".", "asarray", "(", "flatten", "(", "[", "list", "(", "m", ".", "q_actions", ")", "for", "m", "in", "b_memory", "]", ")", ")", "\n", "\n", "action_len", "=", "(", "\n", "[", "action_collector", ".", "get_action_len", "(", "gid", ")", "for", "gid", "in", "game_id", "]", ")", "\n", "action_matrix", "=", "(", "\n", "[", "action_collector", ".", "get_action_matrix", "(", "gid", ")", "for", "gid", "in", "game_id", "]", ")", "\n", "actions", ",", "action_len", ",", "actions_repeats", ",", "_", "=", "batch_drrn_action_input", "(", "\n", "action_matrix", ",", "action_len", ",", "action_mask", ")", "\n", "\n", "batch_q_idx", "=", "sample_batch_ids", "(", "\n", "expected_qs", ",", "actions_repeats", ",", "k", "=", "n_classes", ")", "\n", "selected_qs", "=", "expected_qs", "[", "batch_q_idx", "]", "\n", "\n", "# [CLS] + [trajectory] + [SEP] + [action] + [SEP]", "\n", "max_allowed_trajectory_size", "=", "(", "\n", "self", ".", "hp", ".", "num_tokens", "-", "3", "-", "self", ".", "hp", ".", "n_tokens_per_action", ")", "\n", "# fetch pre-trajectory", "\n", "states", "=", "tjs", ".", "fetch_batch_pre_states", "(", "trajectory_id", ",", "state_id", ")", "\n", "p_states", ",", "p_len", ",", "_", "=", "batch_dqn_input", "(", "\n", "states", ",", "self", ".", "tokenizer", ",", "max_allowed_trajectory_size", ",", "\n", "self", ".", "hp", ".", "padding_val_id", ",", "\n", "with_action_padding", "=", "self", ".", "hp", ".", "action_padding_in_tj", ",", "\n", "max_action_size", "=", "self", ".", "hp", ".", "n_tokens_per_action", ")", "\n", "batch_size", "=", "len", "(", "p_states", ")", "\n", "\n", "action_len", "=", "action_len", "[", "batch_q_idx", "]", ".", "reshape", "(", "(", "batch_size", ",", "n_classes", ")", ")", "\n", "actions", "=", "actions", "[", "batch_q_idx", "]", ".", "reshape", "(", "(", "batch_size", ",", "n_classes", ",", "-", "1", ")", ")", "\n", "# all labels are zero, because the first one is always the best", "\n", "swag_labels", "=", "np", ".", "zeros", "(", "(", "len", "(", "actions", ")", ",", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "\n", "processed_input", "=", "[", "\n", "bert_nlu_input", "(", "\n", "am", ",", "al", ",", "tj", ",", "tj_len", ",", "self", ".", "hp", ".", "sep_val_id", ",", "self", ".", "hp", ".", "cls_val_id", ",", "\n", "self", ".", "hp", ".", "num_tokens", ")", "\n", "for", "am", ",", "al", ",", "tj", ",", "tj_len", "\n", "in", "zip", "(", "list", "(", "actions", ")", ",", "list", "(", "action_len", ")", ",", "p_states", ",", "p_len", ")", "]", "\n", "\n", "inp", "=", "np", ".", "concatenate", "(", "[", "a", "[", "0", "]", "for", "a", "in", "processed_input", "]", ",", "axis", "=", "0", ")", "\n", "seg_tj_action", "=", "np", ".", "concatenate", "(", "[", "a", "[", "1", "]", "for", "a", "in", "processed_input", "]", ",", "axis", "=", "0", ")", "\n", "inp_len", "=", "np", ".", "concatenate", "(", "[", "a", "[", "2", "]", "for", "a", "in", "processed_input", "]", ",", "axis", "=", "0", ")", "\n", "\n", "return", "inp", ",", "seg_tj_action", ",", "inp_len", ",", "selected_qs", ",", "swag_labels", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.students.student_learner.NLUClassificationLearner._train_impl": [[915, 929], ["student_learner.NLUClassificationLearner.sess.run", "student_learner.NLUClassificationLearner.sw.add_summary", "student_learner.NLUClassificationLearner.debug"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.deepword.log.Logging.debug"], ["    ", "def", "_train_impl", "(", "self", ",", "data", ",", "train_step", ")", ":", "\n", "        ", "inp", ",", "seg_tj_action", ",", "inp_len", ",", "selected_qs", ",", "swag_labels", "=", "data", "\n", "_", ",", "summaries", ",", "loss", "=", "self", ".", "sess", ".", "run", "(", "\n", "[", "self", ".", "model", ".", "classification_train_op", ",", "\n", "self", ".", "model", ".", "classification_train_summary_op", ",", "\n", "self", ".", "model", ".", "classification_loss", "]", ",", "\n", "feed_dict", "=", "{", "\n", "self", ".", "model", ".", "src_", ":", "inp", ",", "\n", "self", ".", "model", ".", "src_len_", ":", "inp_len", ",", "\n", "self", ".", "model", ".", "seg_tj_action_", ":", "seg_tj_action", ",", "\n", "self", ".", "model", ".", "swag_labels_", ":", "swag_labels", "\n", "}", ")", "\n", "self", ".", "sw", ".", "add_summary", "(", "summaries", ",", "train_step", ")", "\n", "self", ".", "debug", "(", "\"\\nloss: {}\"", ".", "format", "(", "loss", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.students.student_learner.NLUClassificationLearner._test_impl": [[930, 932], ["NotImplementedError"], "methods", ["None"], ["", "def", "_test_impl", "(", "self", ",", "data", ":", "Tuple", ")", "->", "np", ".", "ndarray", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.yinxusen_deepword.students.snn_learner.SNNLearner.__init__": [[32, 37], ["deepword.students.student_learner.StudentLearner.__init__"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.models.drrn_modeling.PseudoSeq2SeqDRRN.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "hp", ":", "HParams", ",", "model_dir", ":", "str", ",", "train_data_dir", ":", "Optional", "[", "str", "]", ",", "\n", "eval_data_path", ":", "Optional", "[", "str", "]", "=", "None", ")", "->", "None", ":", "\n", "        ", "super", "(", "SNNLearner", ",", "self", ")", ".", "__init__", "(", "\n", "hp", ",", "model_dir", ",", "train_data_dir", ",", "eval_data_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.students.snn_learner.SNNLearner._test_impl": [[38, 43], ["NotImplementedError"], "methods", ["None"], ["", "def", "_test_impl", "(", "self", ",", "data", ":", "Tuple", ")", "->", "np", ".", "ndarray", ":", "\n", "        ", "\"\"\"\n        Dummy method, won't be used.\n        \"\"\"", "\n", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.students.snn_learner.SNNLearner._prepare_data": [[44, 52], ["NotImplementedError"], "methods", ["None"], ["", "def", "_prepare_data", "(", "\n", "self", ",", "b_memory", ":", "List", "[", "Union", "[", "Tuple", ",", "Memolet", "]", "]", ",", "\n", "tjs", ":", "Trajectory", "[", "ActionMaster", "]", ",", "\n", "action_collector", ":", "ActionCollector", ")", "->", "Tuple", ":", "\n", "        ", "\"\"\"\n        Dummy method, won't be used.\n        \"\"\"", "\n", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.students.snn_learner.SNNLearner.preprocess_input": [[53, 97], ["snn_learner.SNNLearner._get_compatible_snapshot_tag", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "snn_learner.SNNLearner._load_snapshot", "int", "deepword.agents.utils.get_snn_keys", "snn_learner.SNNLearner.get_snn_tjs", "snn_learner.SNNLearner.get_snn_tjs", "snn_learner.SNNLearner.get_snn_tjs", "range", "numpy.savez", "math.ceil", "min", "snn_learner.SNNLearner.info", "len", "len"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.agents.base_agent.BaseAgent._get_compatible_snapshot_tag", "home.repos.pwc.inspect_result.yinxusen_deepword.students.student_learner.StudentLearner._load_snapshot", "home.repos.pwc.inspect_result.yinxusen_deepword.agents.utils.get_snn_keys", "home.repos.pwc.inspect_result.yinxusen_deepword.students.snn_learner.SNNLearner.get_snn_tjs", "home.repos.pwc.inspect_result.yinxusen_deepword.students.snn_learner.SNNLearner.get_snn_tjs", "home.repos.pwc.inspect_result.yinxusen_deepword.students.snn_learner.SNNLearner.get_snn_tjs", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.log.Logging.info"], ["", "def", "preprocess_input", "(", "self", ",", "data_dir", ")", ":", "\n", "        ", "valid_tags", "=", "self", ".", "_get_compatible_snapshot_tag", "(", "data_dir", ")", "\n", "for", "tag", "in", "valid_tags", ":", "\n", "            ", "tp", "=", "path", ".", "join", "(", "\n", "data_dir", ",", "\"{}-{}.npz\"", ".", "format", "(", "self", ".", "tjs_prefix", ",", "tag", ")", ")", "\n", "hsp", "=", "path", ".", "join", "(", "\n", "data_dir", ",", "\"{}-{}.npz\"", ".", "format", "(", "self", ".", "hs2tj_prefix", ",", "tag", ")", ")", "\n", "ap", "=", "path", ".", "join", "(", "\n", "data_dir", ",", "\n", "\"{}-{}.npz\"", ".", "format", "(", "self", ".", "action_prefix", ",", "tag", ")", ")", "\n", "mp", "=", "path", ".", "join", "(", "\n", "data_dir", ",", "\"{}-{}.npz\"", ".", "format", "(", "self", ".", "memo_prefix", ",", "tag", ")", ")", "\n", "\n", "memory", ",", "tjs", ",", "action_collector", ",", "hash_states2tjs", "=", "self", ".", "_load_snapshot", "(", "mp", ",", "tp", ",", "ap", ",", "hsp", ")", "\n", "\n", "# for every loaded snapshot, we sample SNN pairs", "\n", "# according to len(memory) / batch_size", "\n", "total_size", "=", "int", "(", "\n", "math", ".", "ceil", "(", "len", "(", "memory", ")", "*", "1.", "/", "self", ".", "hp", ".", "batch_size", ")", ")", "\n", "target_set", ",", "same_set", ",", "diff_set", "=", "get_snn_keys", "(", "\n", "hash_states2tjs", ",", "tjs", ",", "total_size", ")", "\n", "target_src", ",", "target_src_len", ",", "target_src_mask", ",", "target_tjs", "=", "self", ".", "get_snn_tjs", "(", "tjs", ",", "target_set", ")", "\n", "same_src", ",", "same_src_len", ",", "same_src_mask", ",", "same_tjs", "=", "self", ".", "get_snn_tjs", "(", "tjs", ",", "same_set", ")", "\n", "diff_src", ",", "diff_src_len", ",", "diff_src_mask", ",", "diff_tjs", "=", "self", ".", "get_snn_tjs", "(", "tjs", ",", "diff_set", ")", "\n", "\n", "for", "i", "in", "range", "(", "min", "(", "len", "(", "target_tjs", ")", ",", "10", ")", ")", ":", "\n", "                ", "self", ".", "info", "(", "\"target: {}, same: {}, diff: {}\"", ".", "format", "(", "\n", "target_tjs", "[", "i", "]", ",", "same_tjs", "[", "i", "]", ",", "diff_tjs", "[", "i", "]", ")", ")", "\n", "\n", "", "np", ".", "savez", "(", "\n", "\"{}/snn-data-{}.npz\"", ".", "format", "(", "self", ".", "model_dir", ",", "tag", ")", ",", "\n", "target_src", "=", "target_src", ",", "\n", "target_src_len", "=", "target_src_len", ",", "\n", "target_src_mask", "=", "target_src_mask", ",", "\n", "same_src", "=", "same_src", ",", "\n", "same_src_len", "=", "same_src_len", ",", "\n", "same_src_mask", "=", "same_src_mask", ",", "\n", "diff_src", "=", "diff_src", ",", "\n", "diff_src_len", "=", "diff_src_len", ",", "\n", "diff_src_mask", "=", "diff_src_mask", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.students.snn_learner.SNNLearner._prepare_training": [[98, 117], ["snn_learner.SNNLearner._prepare_model", "os.path.join", "tensorflow.summary.FileWriter", "queue.Queue.Queue", "saver.save", "tensorflow.train.get_or_create_global_step"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.students.student_learner.StudentLearner._prepare_model"], ["", "", "def", "_prepare_training", "(", "\n", "self", "\n", ")", "->", "Tuple", "[", "Session", ",", "Any", ",", "Saver", ",", "FileWriter", ",", "int", ",", "Queue", "]", ":", "\n", "        ", "sess", ",", "model", ",", "saver", ",", "train_steps", "=", "self", ".", "_prepare_model", "(", "\n", "\"/device:GPU:0\"", ",", "training", "=", "True", ")", "\n", "\n", "# save the very first model to verify weight has been loaded", "\n", "if", "train_steps", "==", "0", ":", "\n", "            ", "saver", ".", "save", "(", "\n", "sess", ",", "self", ".", "ckpt_prefix", ",", "\n", "global_step", "=", "tf", ".", "train", ".", "get_or_create_global_step", "(", "\n", "graph", "=", "model", ".", "graph", ")", ")", "\n", "", "else", ":", "\n", "            ", "pass", "\n", "\n", "", "sw_path", "=", "path", ".", "join", "(", "self", ".", "model_dir", ",", "\"summaries\"", ",", "\"train\"", ")", "\n", "sw", "=", "tf", ".", "summary", ".", "FileWriter", "(", "sw_path", ",", "sess", ".", "graph", ")", "\n", "queue", "=", "Queue", "(", ")", "# empty queue", "\n", "return", "sess", ",", "model", ",", "saver", ",", "sw", ",", "train_steps", ",", "queue", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.students.snn_learner.SNNLearner.snn_data_loader": [[118, 140], ["sorted", "snn_learner.SNNLearner.info", "deepword.agents.utils.get_path_tags", "tqdm.tqdm.tqdm", "sorted", "snn_learner.SNNLearner.info", "numpy.load", "tqdm.tqdm.trange", "snn_learner.SNNLearner.info", "os.path.join", "len", "snn_learner.SNNData", "random.random"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.deepword.log.Logging.info", "home.repos.pwc.inspect_result.yinxusen_deepword.agents.utils.get_path_tags", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.log.Logging.info", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.log.Logging.info"], ["", "def", "snn_data_loader", "(", "\n", "self", ",", "data_path", ":", "str", ",", "batch_size", ":", "int", ",", "training", ":", "bool", "\n", ")", "->", "Generator", "[", "SNNData", ",", "None", ",", "None", "]", ":", "\n", "        ", "data_tags", "=", "sorted", "(", "get_path_tags", "(", "data_path", ",", "prefix", "=", "\"snn-data\"", ")", ")", "\n", "self", ".", "info", "(", "\"load snn tags: {}\"", ".", "format", "(", "data_tags", ")", ")", "\n", "while", "True", ":", "\n", "            ", "for", "tag", "in", "tqdm", "(", "sorted", "(", "data_tags", ",", "key", "=", "lambda", "k", ":", "random", ".", "random", "(", ")", ")", ")", ":", "\n", "                ", "self", ".", "info", "(", "\"load data from {}\"", ".", "format", "(", "tag", ")", ")", "\n", "data", "=", "np", ".", "load", "(", "\n", "path", ".", "join", "(", "data_path", ",", "\"snn-data-{}.npz\"", ".", "format", "(", "tag", ")", ")", ")", "\n", "target_src", "=", "data", "[", "\"target_src\"", "]", "\n", "same_src", "=", "data", "[", "\"same_src\"", "]", "\n", "diff_src", "=", "data", "[", "\"diff_src\"", "]", "\n", "for", "i", "in", "trange", "(", "len", "(", "target_src", ")", "//", "batch_size", ")", ":", "\n", "                    ", "ss", "=", "i", "*", "batch_size", "\n", "ee", "=", "(", "i", "+", "1", ")", "*", "batch_size", "\n", "yield", "SNNData", "(", "\n", "target_src", "[", "ss", ":", "ee", "]", ",", "same_src", "[", "ss", ":", "ee", "]", ",", "diff_src", "[", "ss", ":", "ee", "]", ")", "\n", "# only load data one time for evaluation", "\n", "", "", "if", "not", "training", ":", "\n", "                ", "self", ".", "info", "(", "\"snn data loader finished\"", ")", "\n", "break", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.students.snn_learner.SNNLearner.train": [[141, 165], ["snn_learner.SNNLearner.snn_data_loader", "snn_learner.SNNLearner.info", "tqdm.tqdm.trange", "snn_learner.SNNLearner._prepare_training", "tqdm.tqdm.trange", "snn_learner.SNNLearner.saver.save", "snn_learner.SNNLearner.info", "snn_learner.SNNLearner._train_impl", "next", "tensorflow.train.get_or_create_global_step"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.students.snn_learner.SNNLearner.snn_data_loader", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.log.Logging.info", "home.repos.pwc.inspect_result.yinxusen_deepword.students.snn_learner.SNNLearner._prepare_training", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.log.Logging.info", "home.repos.pwc.inspect_result.yinxusen_deepword.students.snn_learner.SNNLearner._train_impl"], ["", "", "", "def", "train", "(", "self", ",", "n_epochs", ":", "int", ")", "->", "None", ":", "\n", "        ", "if", "self", ".", "sess", "is", "None", ":", "\n", "            ", "(", "self", ".", "sess", ",", "self", ".", "model", ",", "self", ".", "saver", ",", "self", ".", "sw", ",", "self", ".", "train_steps", ",", "\n", "self", ".", "queue", ")", "=", "self", ".", "_prepare_training", "(", ")", "\n", "\n", "", "epoch_size", "=", "self", ".", "hp", ".", "save_gap_t", "\n", "data_loader", "=", "self", ".", "snn_data_loader", "(", "\n", "data_path", "=", "self", ".", "train_data_dir", ",", "batch_size", "=", "self", ".", "hp", ".", "batch_size", ",", "\n", "training", "=", "True", ")", "\n", "\n", "self", ".", "info", "(", "\"start training\"", ")", "\n", "data_in_queue", "=", "True", "\n", "for", "et", "in", "trange", "(", "n_epochs", ",", "ascii", "=", "True", ",", "desc", "=", "\"epoch\"", ")", ":", "\n", "            ", "for", "it", "in", "trange", "(", "epoch_size", ",", "ascii", "=", "True", ",", "desc", "=", "\"step\"", ")", ":", "\n", "                ", "self", ".", "_train_impl", "(", "\n", "next", "(", "data_loader", ")", ",", "self", ".", "train_steps", "+", "et", "*", "epoch_size", "+", "it", ")", "\n", "", "self", ".", "saver", ".", "save", "(", "\n", "self", ".", "sess", ",", "self", ".", "ckpt_prefix", ",", "\n", "global_step", "=", "tf", ".", "train", ".", "get_or_create_global_step", "(", "\n", "graph", "=", "self", ".", "model", ".", "graph", ")", ")", "\n", "self", ".", "info", "(", "\"finish and save {} epoch\"", ".", "format", "(", "et", ")", ")", "\n", "if", "not", "data_in_queue", ":", "\n", "                ", "break", "\n", "", "", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.students.snn_learner.SNNLearner._train_impl": [[166, 175], ["snn_learner.SNNLearner.sess.run", "snn_learner.SNNLearner.sw.add_summary"], "methods", ["None"], ["", "def", "_train_impl", "(", "self", ",", "data", ":", "SNNData", ",", "train_step", ":", "int", ")", "->", "None", ":", "\n", "        ", "_", ",", "summaries", ",", "loss", "=", "self", ".", "sess", ".", "run", "(", "\n", "[", "self", ".", "model", ".", "train_op", ",", "self", ".", "model", ".", "train_summary_op", ",", "self", ".", "model", ".", "loss", "]", ",", "\n", "feed_dict", "=", "{", "\n", "self", ".", "model", ".", "target_src_", ":", "data", ".", "target_src", ",", "\n", "self", ".", "model", ".", "same_src_", ":", "data", ".", "same_src", ",", "\n", "self", ".", "model", ".", "diff_src_", ":", "data", ".", "diff_src", ",", "\n", "}", ")", "\n", "self", ".", "sw", ".", "add_summary", "(", "summaries", ",", "train_step", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.students.snn_learner.SNNLearner._prepare_test": [[176, 184], ["snn_learner.SNNLearner._prepare_model", "queue.Queue.Queue"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.students.student_learner.StudentLearner._prepare_model"], ["", "def", "_prepare_test", "(", "\n", "self", ",", "device_placement", ":", "str", "=", "\"/device:GPU:0\"", ",", "\n", "restore_from", ":", "Optional", "[", "str", "]", "=", "None", "\n", ")", "->", "Tuple", "[", "Session", ",", "Any", ",", "Saver", ",", "int", ",", "Queue", "]", ":", "\n", "        ", "sess", ",", "model", ",", "saver", ",", "train_steps", "=", "self", ".", "_prepare_model", "(", "\n", "device_placement", ",", "training", "=", "False", ",", "restore_from", "=", "restore_from", ")", "\n", "queue", "=", "Queue", "(", ")", "\n", "return", "sess", ",", "model", ",", "saver", ",", "train_steps", ",", "queue", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.students.snn_learner.SNNLearner.test": [[185, 219], ["snn_learner.SNNLearner.snn_data_loader", "snn_learner.SNNLearner.info", "snn_learner.SNNLearner.info", "snn_learner.SNNLearner._prepare_test", "snn_learner.SNNLearner.sess.run", "numpy.count_nonzero", "numpy.count_nonzero", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.students.snn_learner.SNNLearner.snn_data_loader", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.log.Logging.info", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.log.Logging.info", "home.repos.pwc.inspect_result.yinxusen_deepword.students.snn_learner.SNNLearner._prepare_test"], ["", "def", "test", "(", "\n", "self", ",", "device_placement", ":", "str", "=", "\"/device:GPU:0\"", ",", "\n", "restore_from", ":", "Optional", "[", "str", "]", "=", "None", ")", "->", "Tuple", "[", "float", ",", "int", "]", ":", "\n", "        ", "if", "self", ".", "sess", "is", "None", ":", "\n", "            ", "(", "self", ".", "sess", ",", "self", ".", "model", ",", "self", ".", "saver", ",", "self", ".", "train_steps", ",", "self", ".", "queue", "\n", ")", "=", "self", ".", "_prepare_test", "(", "device_placement", ",", "restore_from", ")", "\n", "\n", "", "data_loader", "=", "self", ".", "snn_data_loader", "(", "\n", "data_path", "=", "self", ".", "eval_data_path", ",", "batch_size", "=", "self", ".", "hp", ".", "batch_size", ",", "\n", "training", "=", "False", ")", "\n", "count_correct", "=", "0", "\n", "total", "=", "0", "\n", "self", ".", "info", "(", "\"start test\"", ")", "\n", "\n", "for", "data", "in", "data_loader", ":", "\n", "            ", "semantic_same", "=", "self", ".", "sess", ".", "run", "(", "\n", "self", ".", "model", ".", "semantic_same", ",", "\n", "feed_dict", "=", "{", "\n", "self", ".", "model", ".", "target_src_", ":", "data", ".", "target_src", ",", "\n", "self", ".", "model", ".", "same_src_", ":", "data", ".", "same_src", ",", "\n", "self", ".", "model", ".", "diff_src_", ":", "data", ".", "diff_src", "\n", "}", ")", "\n", "\n", "count_correct", "+=", "np", ".", "count_nonzero", "(", "\n", "semantic_same", "[", ":", "len", "(", "semantic_same", ")", "//", "2", "]", "<", "0", ")", "\n", "count_correct", "+=", "np", ".", "count_nonzero", "(", "\n", "semantic_same", "[", "len", "(", "semantic_same", ")", "//", "2", ":", "]", ">", "0", ")", "\n", "total", "+=", "len", "(", "semantic_same", ")", "\n", "\n", "", "acc", "=", "count_correct", "*", "1.", "/", "total", "if", "total", "else", "np", ".", "nan", "\n", "self", ".", "info", "(", "\"evaluate with {}, acc: {}, total: {}, acc/total: {}\"", ".", "format", "(", "\n", "self", ".", "train_steps", ",", "count_correct", ",", "total", ",", "acc", ")", ")", "\n", "\n", "return", "acc", ",", "total", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.students.snn_learner.SNNLearner._str2ids": [[220, 222], ["snn_learner.SNNLearner.tokenizer.convert_tokens_to_ids", "snn_learner.SNNLearner.tokenizer.tokenize"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.deepword.tokenizers.BertTokenizer.convert_tokens_to_ids", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.tokenizers.BertTokenizer.tokenize"], ["", "def", "_str2ids", "(", "self", ",", "s", ":", "str", ")", "->", "List", "[", "int", "]", ":", "\n", "        ", "return", "self", ".", "tokenizer", ".", "convert_tokens_to_ids", "(", "self", ".", "tokenizer", ".", "tokenize", "(", "s", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.students.snn_learner.SNNLearner._snn_tj_transformation": [[223, 242], ["numpy.zeros", "numpy.zeros", "enumerate", "enumerate", "snn_learner.SNNLearner._str2ids", "min", "snn_learner.SNNLearner._str2ids", "min", "len", "len"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.students.snn_learner.SNNLearner._str2ids", "home.repos.pwc.inspect_result.yinxusen_deepword.students.snn_learner.SNNLearner._str2ids"], ["", "def", "_snn_tj_transformation", "(", "\n", "self", ",", "tj", ":", "List", "[", "ActionMaster", "]", "\n", ")", "->", "Tuple", "[", "np", ".", "ndarray", ",", "np", ".", "ndarray", "]", ":", "\n", "        ", "master_ids", "=", "np", ".", "zeros", "(", "\n", "(", "self", ".", "hp", ".", "num_turns", ",", "self", ".", "hp", ".", "num_tokens", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "action_ids", "=", "np", ".", "zeros", "(", "\n", "(", "self", ".", "hp", ".", "num_turns", ",", "self", ".", "hp", ".", "n_tokens_per_action", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "for", "i", ",", "s", "in", "enumerate", "(", "[", "x", ".", "action", "for", "x", "in", "tj", "]", ")", ":", "\n", "            ", "s_ids", "=", "self", ".", "_str2ids", "(", "s", ")", "\n", "s_len", "=", "min", "(", "len", "(", "s_ids", ")", ",", "self", ".", "hp", ".", "n_tokens_per_action", ")", "\n", "action_ids", "[", "i", ",", ":", "s_len", "]", "=", "s_ids", "[", ":", "s_len", "]", "\n", "\n", "", "for", "i", ",", "s", "in", "enumerate", "(", "[", "x", ".", "master", "for", "x", "in", "tj", "]", ")", ":", "\n", "            ", "s_ids", "=", "self", ".", "_str2ids", "(", "s", ")", "\n", "s_len", "=", "min", "(", "len", "(", "s_ids", ")", ",", "self", ".", "hp", ".", "num_tokens", ")", "\n", "master_ids", "[", "i", ",", ":", "s_len", "]", "=", "s_ids", "[", ":", "s_len", "]", "\n", "\n", "", "return", "action_ids", ",", "master_ids", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.students.snn_learner.SNNLearner.get_snn_tjs": [[243, 260], ["deepword.students.utils.batch_dqn_input", "tjs.fetch_state_by_idx"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.students.utils.batch_dqn_input", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.trajectory.Trajectory.fetch_state_by_idx"], ["", "def", "get_snn_tjs", "(", "\n", "self", ",", "tjs", ":", "Trajectory", ",", "tid_sid_set", ":", "List", "[", "Tuple", "[", "int", ",", "int", "]", "]", "\n", ")", "->", "Tuple", "[", "List", "[", "List", "[", "int", "]", "]", ",", "List", "[", "int", "]", ",", "List", "[", "List", "[", "int", "]", "]", ",", "\n", "List", "[", "List", "[", "ActionMaster", "]", "]", "]", ":", "\n", "        ", "trajectories", "=", "[", "\n", "tjs", ".", "fetch_state_by_idx", "(", "tid", ",", "sid", ")", "for", "tid", ",", "sid", "in", "tid_sid_set", "]", "\n", "\n", "batch_src", ",", "batch_src_len", ",", "batch_mask", "=", "batch_dqn_input", "(", "\n", "trajectories", ",", "self", ".", "tokenizer", ",", "self", ".", "hp", ".", "num_tokens", ",", "\n", "self", ".", "hp", ".", "padding_val_id", ",", "\n", "with_action_padding", "=", "self", ".", "hp", ".", "action_padding_in_tj", ",", "\n", "max_action_size", "=", "self", ".", "hp", ".", "n_tokens_per_action", ")", "\n", "\n", "# action_ids, master_ids = zip(*[", "\n", "#     self._snn_tj_transformation(tj) for tj in trajectories])", "\n", "\n", "return", "batch_src", ",", "batch_src_len", ",", "batch_mask", ",", "trajectories", "\n", "", "", ""]], "home.repos.pwc.inspect_result.yinxusen_deepword.students.utils.dqn_input": [[9, 36], ["utils.tj2ids", "len", "len"], "function", ["home.repos.pwc.inspect_result.yinxusen_deepword.students.utils.tj2ids"], ["import", "os", "\n", "import", "random", "\n", "import", "sys", "\n", "import", "time", "\n", "from", "itertools", "import", "chain", "\n", "from", "os", "import", "path", "\n", "from", "typing", "import", "List", ",", "Tuple", ",", "Dict", ",", "Optional", ",", "Any", "\n", "\n", "import", "numpy", "as", "np", "\n", "import", "ruamel", ".", "yaml", "\n", "from", "bitarray", "import", "bitarray", "\n", "from", "tabulate", "import", "tabulate", "\n", "\n", "\n", "def", "get_hash", "(", "txt", ":", "str", ")", "->", "str", ":", "\n", "    ", "\"\"\"\n    get hex hash value for a string\n    \"\"\"", "\n", "return", "hashlib", ".", "md5", "(", "txt", ".", "encode", "(", "\"utf-8\"", ")", ")", ".", "hexdigest", "(", ")", "\n", "\n", "\n", "", "def", "eprint", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"\n    print to stderr\n    \"\"\"", "\n", "print", "(", "*", "args", ",", "file", "=", "sys", ".", "stderr", ",", "**", "kwargs", ")", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.students.utils.batch_dqn_input": [[38, 57], ["utils.dqn_input", "batch_src.append", "batch_src_len.append", "batch_mask.append"], "function", ["home.repos.pwc.inspect_result.yinxusen_deepword.students.utils.dqn_input", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.tree_memory.TreeMemory.append", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.tree_memory.TreeMemory.append", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.tree_memory.TreeMemory.append"], ["    ", "\"\"\"\n    flatmap for python\n    \"\"\"", "\n", "return", "list", "(", "chain", ".", "from_iterable", "(", "map", "(", "f", ",", "items", ")", ")", ")", "\n", "\n", "\n", "", "def", "flatten", "(", "items", ")", ":", "\n", "    ", "\"\"\"\n    flatten a list of lists to a list\n    \"\"\"", "\n", "return", "list", "(", "chain", ".", "from_iterable", "(", "items", ")", ")", "\n", "\n", "\n", "", "def", "uniq", "(", "lst", ")", ":", "\n", "    ", "\"\"\"\n    order-preserving unique\n    \"\"\"", "\n", "seen", "=", "set", "(", ")", "\n", "seen_add", "=", "seen", ".", "add", "\n", "return", "[", "x", "for", "x", "in", "lst", "if", "not", "(", "x", "in", "seen", "or", "seen_add", "(", "x", ")", ")", "]", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.students.utils.align_batch_str": [[59, 89], ["zip", "min", "zip", "numpy.asarray", "numpy.asarray", "numpy.max", "utils.align_batch_str.align"], "function", ["None"], ["\n", "", "def", "load_uniq_lines", "(", "fname", ":", "str", ")", "->", "List", "[", "str", "]", ":", "\n", "    ", "\"\"\"\n    Load unique lines from a file, line order preserved\n    \"\"\"", "\n", "with", "open", "(", "fname", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "lines", "=", "map", "(", "lambda", "l", ":", "l", ".", "strip", "(", ")", ",", "f", ".", "readlines", "(", ")", ")", "\n", "", "return", "uniq", "(", "lines", ")", "\n", "\n", "\n", "", "def", "load_vocab", "(", "vocab_file", ":", "str", ")", "->", "List", "[", "str", "]", ":", "\n", "    ", "\"\"\"\n    Load unique words from a vocabulary\n    \"\"\"", "\n", "return", "load_uniq_lines", "(", "vocab_file", ")", "\n", "\n", "\n", "", "def", "load_actions", "(", "action_file", ":", "str", ")", "->", "List", "[", "str", "]", ":", "\n", "    ", "\"\"\"\n    Load unique actions from an action file\n    \"\"\"", "\n", "return", "load_uniq_lines", "(", "action_file", ")", "\n", "\n", "\n", "", "def", "get_token2idx", "(", "tokens", ":", "List", "[", "str", "]", ")", "->", "Dict", "[", "str", ",", "int", "]", ":", "\n", "    ", "\"\"\"\n    From a list of tokens to a dict of token to position\n    \"\"\"", "\n", "uniq_tokens", "=", "uniq", "(", "tokens", ")", "\n", "return", "dict", "(", "map", "(", "\n", "lambda", "idx_token", ":", "(", "idx_token", "[", "1", "]", ",", "idx_token", "[", "0", "]", ")", ",", "enumerate", "(", "uniq_tokens", ")", ")", ")", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.students.utils.tj2ids": [[91, 124], ["tokenizer.convert_tokens_to_ids", "tokenizer.convert_tokens_to_ids", "len", "tokenizer.tokenize", "tokenizer.tokenize", "len", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.yinxusen_deepword.deepword.tokenizers.BertTokenizer.convert_tokens_to_ids", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.tokenizers.BertTokenizer.convert_tokens_to_ids", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.tokenizers.BertTokenizer.tokenize", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.tokenizers.BertTokenizer.tokenize"], ["\n", "", "def", "ctime", "(", ")", "->", "int", ":", "\n", "    ", "\"\"\"\n    current time in millisecond\n    \"\"\"", "\n", "return", "int", "(", "round", "(", "time", ".", "time", "(", ")", "*", "1000", ")", ")", "\n", "\n", "\n", "", "def", "setup_logging", "(", "\n", "default_path", ":", "str", "=", "'logging.yaml'", ",", "\n", "default_level", ":", "int", "=", "logging", ".", "INFO", ",", "\n", "env_key", ":", "str", "=", "'LOG_CFG'", ",", "\n", "local_log_filename", ":", "Optional", "[", "str", "]", "=", "None", ")", "->", "None", ":", "\n", "\n", "    ", "\"\"\"\n    Setup logging for python project\n\n    Load YAML config file from `default_path`, or from the environment variable\n    set by `env_key`. Falls back to default config if file not exist.\n\n    if `local_log_filename` set, add a local rotating log file.\n    \"\"\"", "\n", "\n", "config_path", "=", "default_path", "\n", "value", "=", "os", ".", "getenv", "(", "env_key", ",", "None", ")", "\n", "if", "value", ":", "\n", "        ", "config_path", "=", "value", "\n", "", "if", "path", ".", "exists", "(", "config_path", ")", ":", "\n", "        ", "with", "open", "(", "config_path", ",", "'rt'", ")", "as", "f", ":", "\n", "            ", "config", "=", "ruamel", ".", "yaml", ".", "safe_load", "(", "f", ".", "read", "(", ")", ")", "\n", "logging", ".", "config", ".", "dictConfig", "(", "config", ")", "\n", "", "", "else", ":", "\n", "        ", "logging", ".", "basicConfig", "(", "level", "=", "default_level", ")", "\n", "# add more handlers", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.tools.merge_ckpts.merge_ckpt": [[14, 65], ["deepword.hparams.load_hparams", "deepword.hparams.load_hparams", "deepword.models.nlu_modeling.BertNLU.get_eval_model", "tensorflow.ConfigProto", "tensorflow.Session", "BertNLU.get_eval_model.graph.as_default", "tf.Session.run", "tensorflow.train.Saver", "tf.train.Saver.restore", "list", "tensorflow.global_variables", "set", "set", "deepword.utils.eprint", "tf.Session.run", "deepword.utils.eprint", "tensorflow.train.Saver", "tf.train.Saver.restore", "tf.Session.run", "deepword.utils.eprint", "range", "deepword.utils.eprint", "tf.train.Saver.save", "tensorflow.global_variables_initializer", "map", "deepword.hparams.load_hparams.bert_freeze_layers.split", "deepword.hparams.load_hparams.bert_freeze_layers.split", "len", "deepword.utils.eprint", "deepword.utils.eprint", "tensorflow.train.list_variables", "scipy.stats.describe", "any", "v.op.name.split"], "function", ["home.repos.pwc.inspect_result.yinxusen_deepword.deepword.hparams.load_hparams", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.hparams.load_hparams", "home.repos.pwc.inspect_result.yinxusen_deepword.models.drrn_modeling.CnnDRRN.get_eval_model", "home.repos.pwc.inspect_result.yinxusen_deepword.students.student_learner.CMD.set", "home.repos.pwc.inspect_result.yinxusen_deepword.students.student_learner.CMD.set", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.utils.eprint", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.utils.eprint", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.utils.eprint", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.utils.eprint", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.utils.eprint", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.utils.eprint"], ["def", "merge_ckpt", "(", "ckpt_to", ",", "ckpt_from", ",", "fn_hparams_to", ",", "fn_hparams_from", ",", "save_to", ")", ":", "\n", "# substitute some variables of ckpt1 with the same variables from ckpt2", "\n", "    ", "hp_to", "=", "load_hparams", "(", "fn_model_config", "=", "fn_hparams_to", ")", "\n", "hp_from", "=", "load_hparams", "(", "fn_model_config", "=", "fn_hparams_from", ")", "\n", "model", "=", "BertNLU", ".", "get_eval_model", "(", "hp_to", ",", "device_placement", "=", "\"cpu\"", ")", "\n", "conf", "=", "tf", ".", "ConfigProto", "(", "\n", "log_device_placement", "=", "False", ",", "allow_soft_placement", "=", "True", ")", "\n", "sess", "=", "tf", ".", "Session", "(", "graph", "=", "model", ".", "graph", ",", "config", "=", "conf", ")", "\n", "with", "model", ".", "graph", ".", "as_default", "(", ")", ":", "\n", "        ", "sess", ".", "run", "(", "tf", ".", "global_variables_initializer", "(", ")", ")", "\n", "saver", "=", "tf", ".", "train", ".", "Saver", "(", "\n", "max_to_keep", "=", "10", ",", "\n", "save_relative_paths", "=", "True", ")", "\n", "saver", ".", "restore", "(", "sess", ",", "ckpt_to", ")", "\n", "\n", "all_saved_vars", "=", "list", "(", "\n", "map", "(", "lambda", "v", ":", "v", "[", "0", "]", ",", "\n", "tf", ".", "train", ".", "list_variables", "(", "ckpt_from", ")", ")", ")", "\n", "all_vars", "=", "tf", ".", "global_variables", "(", ")", "\n", "# only frozen parameters can be substituted", "\n", "freeze_to", "=", "set", "(", "hp_to", ".", "bert_freeze_layers", ".", "split", "(", "\",\"", ")", ")", "\n", "freeze_from", "=", "set", "(", "hp_from", ".", "bert_freeze_layers", ".", "split", "(", "\",\"", ")", ")", "\n", "\n", "allowed_to_restore", "=", "freeze_to", "-", "freeze_from", "\n", "\n", "eprint", "(", "\"allowed to restore: {}\"", ".", "format", "(", "allowed_to_restore", ")", ")", "\n", "\n", "var_list", "=", "[", "\n", "v", "for", "v", "in", "all_vars", "\n", "if", "(", "any", "(", "[", "layer_name", "in", "v", ".", "op", ".", "name", ".", "split", "(", "\"/\"", ")", "\n", "for", "layer_name", "in", "allowed_to_restore", "]", ")", "\n", "and", "v", ".", "op", ".", "name", "in", "all_saved_vars", ")", "]", "\n", "\n", "local_vars", "=", "sess", ".", "run", "(", "var_list", ")", "\n", "\n", "eprint", "(", "\"the following vars will be restored: {}\"", ".", "format", "(", "\n", "\"\\n\"", ".", "join", "(", "[", "v", ".", "op", ".", "name", "for", "v", "in", "var_list", "]", ")", ")", ")", "\n", "\n", "saver2", "=", "tf", ".", "train", ".", "Saver", "(", "\n", "var_list", "=", "var_list", ",", "max_to_keep", "=", "10", ",", "save_relative_paths", "=", "True", ")", "\n", "saver2", ".", "restore", "(", "sess", ",", "ckpt_from", ")", "\n", "\n", "local_vars2", "=", "sess", ".", "run", "(", "var_list", ")", "\n", "\n", "eprint", "(", "\"parameters that have changed:\"", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "var_list", ")", ")", ":", "\n", "            ", "eprint", "(", "var_list", "[", "i", "]", ".", "op", ".", "name", ")", "\n", "eprint", "(", "describe", "(", "local_vars", "[", "i", "]", "-", "local_vars2", "[", "i", "]", ",", "axis", "=", "None", ")", ")", "\n", "\n", "", "eprint", "(", "\"save the merged model to {}\"", ".", "format", "(", "save_to", ")", ")", "\n", "saver", ".", "save", "(", "sess", ",", "save_to", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.tools.merge_ckpts.one_from_multiple_to": [[67, 118], ["tensorflow.train.latest_checkpoint", "os.path.join", "dict", "sorted", "len", "deepword.utils.eprint", "map", "list", "os.path.splitext", "glob.glob", "termcolor.colored", "dict.keys", "merge_ckpts.merge_ckpt", "deepword.utils.eprint", "int", "fn.split"], "function", ["home.repos.pwc.inspect_result.yinxusen_deepword.deepword.utils.eprint", "home.repos.pwc.inspect_result.yinxusen_deepword.tools.merge_ckpts.merge_ckpt", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.utils.eprint"], ["", "", "def", "one_from_multiple_to", "(", "model_dir_to", ",", "model_dir_from", ")", ":", "\n", "    ", "\"\"\"\n    load some parameters from `model_dir_from` to `model_dir_to` and save the\n    new checkpoint to another dir under `model_dir_to` as \"merged_last_weights\".\n\n    the changed parameters will be computed through hp.bert_freeze_layers of\n    the two models.\n\n    Only layers that are trained by `model_from` while frozen by `model_to` will\n    be substituted.\n\n    Scenario: (one ckpt-from, multiple ckpt-to)\n        model_dir_to:\n            - last_weights:\n                - ckpt-to-1\n                - ckpt-to-2\n                - ...\n            - hparams.json\n            - (expected) merged_last_weights\n                - ckpt-to-1\n                - ckpt-to-2\n                - ...\n        model_dir_from:\n            - best_weights/ckpt-from\n            - hparams.json\n    \"\"\"", "\n", "\n", "best_ckpt_from", "=", "tf", ".", "train", ".", "latest_checkpoint", "(", "\n", "\"{}/best_weights\"", ".", "format", "(", "model_dir_from", ")", ")", "\n", "watched_files", "=", "path", ".", "join", "(", "\n", "model_dir_to", ",", "\"last_weights\"", ",", "\"after-epoch-*.index\"", ")", "\n", "files", "=", "[", "path", ".", "splitext", "(", "fn", ")", "[", "0", "]", "for", "fn", "in", "glob", ".", "glob", "(", "watched_files", ")", "]", "\n", "if", "len", "(", "files", ")", "==", "0", ":", "\n", "        ", "eprint", "(", "colored", "(", "\"No checkpoint found!\"", ",", "\"red\"", ")", ")", "\n", "return", "\n", "", "step2ckpt", "=", "dict", "(", "map", "(", "lambda", "fn", ":", "(", "int", "(", "fn", ".", "split", "(", "\"-\"", ")", "[", "-", "1", "]", ")", ",", "fn", ")", ",", "files", ")", ")", "\n", "steps", "=", "sorted", "(", "list", "(", "step2ckpt", ".", "keys", "(", ")", ")", ")", "\n", "\n", "fn_hparams_to", "=", "\"{}/hparams.json\"", ".", "format", "(", "model_dir_to", ")", "\n", "fn_hparams_from", "=", "\"{}/hparams.json\"", ".", "format", "(", "model_dir_from", ")", "\n", "\n", "for", "step", "in", "steps", ":", "\n", "        ", "save_to", "=", "\"{}/merged_last_weights/after-epoch-{}\"", ".", "format", "(", "\n", "model_dir_to", ",", "step", ")", "\n", "try", ":", "\n", "            ", "merge_ckpt", "(", "\n", "ckpt_to", "=", "step2ckpt", "[", "step", "]", ",", "ckpt_from", "=", "best_ckpt_from", ",", "\n", "fn_hparams_to", "=", "fn_hparams_to", ",", "fn_hparams_from", "=", "fn_hparams_from", ",", "\n", "save_to", "=", "save_to", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "            ", "eprint", "(", "\"error for step {}:\\n{}\"", ".", "format", "(", "step", ",", "e", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.tools.merge_ckpts.multiple_from_one_to": [[120, 171], ["tensorflow.train.latest_checkpoint", "os.path.join", "dict", "sorted", "len", "deepword.utils.eprint", "map", "list", "os.path.splitext", "glob.glob", "termcolor.colored", "dict.keys", "merge_ckpts.merge_ckpt", "deepword.utils.eprint", "int", "fn.split"], "function", ["home.repos.pwc.inspect_result.yinxusen_deepword.deepword.utils.eprint", "home.repos.pwc.inspect_result.yinxusen_deepword.tools.merge_ckpts.merge_ckpt", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.utils.eprint"], ["", "", "", "def", "multiple_from_one_to", "(", "model_dir_to", ",", "model_dir_from", ")", ":", "\n", "    ", "\"\"\"\n    load some parameters from `model_dir_from` to `model_dir_to` and save the\n    new checkpoint to another dir under `model_dir_to` as \"merged_last_weights\".\n\n    the changed parameters will be computed through hp.bert_freeze_layers of\n    the two models.\n\n    Only layers that are trained by `model_from` while frozen by `model_to` will\n    be substituted.\n\n    Scenario: (one ckpt-to, multiple ckpt-from)\n        model_dir_to:\n            - best_weights/ckpt-to\n            - hparams.json\n            - (expected) merged_last_weights\n                - ckpt-to-1\n                - ckpt-to-2\n                - ...\n        model_dir_from:\n            - last_weights:\n                - ckpt-from-1\n                - ckpt-from-2\n                - ...\n            - hparams.json\n    \"\"\"", "\n", "\n", "best_ckpt_to", "=", "tf", ".", "train", ".", "latest_checkpoint", "(", "\n", "\"{}/best_weights\"", ".", "format", "(", "model_dir_to", ")", ")", "\n", "watched_files", "=", "path", ".", "join", "(", "\n", "model_dir_from", ",", "\"last_weights\"", ",", "\"after-epoch-*.index\"", ")", "\n", "files", "=", "[", "path", ".", "splitext", "(", "fn", ")", "[", "0", "]", "for", "fn", "in", "glob", ".", "glob", "(", "watched_files", ")", "]", "\n", "if", "len", "(", "files", ")", "==", "0", ":", "\n", "        ", "eprint", "(", "colored", "(", "\"No checkpoint found!\"", ",", "\"red\"", ")", ")", "\n", "return", "\n", "", "step2ckpt", "=", "dict", "(", "map", "(", "lambda", "fn", ":", "(", "int", "(", "fn", ".", "split", "(", "\"-\"", ")", "[", "-", "1", "]", ")", ",", "fn", ")", ",", "files", ")", ")", "\n", "steps", "=", "sorted", "(", "list", "(", "step2ckpt", ".", "keys", "(", ")", ")", ")", "\n", "\n", "fn_hparams_to", "=", "\"{}/hparams.json\"", ".", "format", "(", "model_dir_to", ")", "\n", "fn_hparams_from", "=", "\"{}/hparams.json\"", ".", "format", "(", "model_dir_from", ")", "\n", "\n", "for", "step", "in", "steps", ":", "\n", "        ", "save_to", "=", "\"{}/merged_last_weights/after-epoch-{}\"", ".", "format", "(", "\n", "model_dir_to", ",", "step", ")", "\n", "try", ":", "\n", "            ", "merge_ckpt", "(", "\n", "ckpt_to", "=", "best_ckpt_to", ",", "ckpt_from", "=", "step2ckpt", "[", "step", "]", ",", "\n", "fn_hparams_to", "=", "fn_hparams_to", ",", "fn_hparams_from", "=", "fn_hparams_from", ",", "\n", "save_to", "=", "save_to", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "            ", "eprint", "(", "\"error for step {}:\\n{}\"", ".", "format", "(", "step", ",", "e", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.tools.merge_ckpts.main": [[173, 180], ["merge_ckpts.one_from_multiple_to", "merge_ckpts.multiple_from_one_to"], "function", ["home.repos.pwc.inspect_result.yinxusen_deepword.tools.merge_ckpts.one_from_multiple_to", "home.repos.pwc.inspect_result.yinxusen_deepword.tools.merge_ckpts.multiple_from_one_to"], ["", "", "", "def", "main", "(", "style", ",", "model_dir_to", ",", "model_dir_from", ")", ":", "\n", "    ", "if", "style", "==", "'one-from-multiple-to'", ":", "\n", "        ", "one_from_multiple_to", "(", "model_dir_to", ",", "model_dir_from", ")", "\n", "", "elif", "style", "==", "'multiple-from-one-to'", ":", "\n", "        ", "multiple_from_one_to", "(", "model_dir_to", ",", "model_dir_from", ")", "\n", "", "else", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.tools.replay_from_log.ReplayAgent.__init__": [[15, 21], ["replay_from_log.ReplayAgent.read_expert_guides"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.agents.zork_agent.ZorkAgent.read_expert_guides"], ["    ", "def", "__init__", "(", "self", ",", "fn_game", ",", "fn_expert_guides", ")", ":", "\n", "        ", "self", ".", "guides", "=", "self", ".", "read_expert_guides", "(", "fn_expert_guides", ")", "\n", "self", ".", "in_game_t", "=", "0", "\n", "self", ".", "episode_has_started", "=", "False", "\n", "self", ".", "fn_game", "=", "fn_game", "\n", "self", ".", "curr_episode", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.tools.replay_from_log.ReplayAgent.read_expert_guides": [[22, 27], ["open", "x.strip", "f.readlines"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "read_expert_guides", "(", "cls", ",", "fn_expert_guides", ")", ":", "\n", "        ", "with", "open", "(", "fn_expert_guides", ",", "\"r\"", ")", "as", "f", ":", "\n", "            ", "lines", "=", "[", "x", ".", "strip", "(", ")", "for", "x", "in", "f", ".", "readlines", "(", ")", "]", "\n", "", "return", "lines", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.tools.replay_from_log.ReplayAgent.extract_eval_results": [[28, 43], ["open", "f.readlines", "re.search", "re.search.group", "matched.append", "ast.literal_eval", "re.search.group.replace().replace", "re.search.group.replace"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.deepword.tree_memory.TreeMemory.append"], ["", "@", "classmethod", "\n", "def", "extract_eval_results", "(", "cls", ",", "fn_log", ")", ":", "\n", "        ", "with", "open", "(", "fn_log", ",", "\"r\"", ")", "as", "f", ":", "\n", "            ", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "", "eval_result_regex", "=", "r\"^INFO - eval_results: (.*)$\"", "\n", "matched", "=", "[", "]", "\n", "for", "l", "in", "lines", ":", "\n", "            ", "eval_result_search", "=", "re", ".", "search", "(", "eval_result_regex", ",", "l", ")", "\n", "if", "eval_result_search", "is", "not", "None", ":", "\n", "                ", "room_name", "=", "eval_result_search", ".", "group", "(", "1", ")", "\n", "matched", ".", "append", "(", "\n", "ast", ".", "literal_eval", "(", "\n", "room_name", ".", "replace", "(", "\"false\"", ",", "\"False\"", ")", ".", "replace", "(", "\n", "\"true\"", ",", "\"True\"", ")", ")", ")", "\n", "", "", "return", "matched", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.tools.replay_from_log.ReplayAgent.request_infos": [[44, 58], ["textworld.EnvInfos"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "request_infos", "(", "cls", ")", ":", "\n", "        ", "request_infos", "=", "EnvInfos", "(", ")", "\n", "request_infos", ".", "description", "=", "True", "\n", "request_infos", ".", "inventory", "=", "True", "\n", "request_infos", ".", "entities", "=", "True", "\n", "request_infos", ".", "verbs", "=", "True", "\n", "request_infos", ".", "command_templates", "=", "True", "\n", "request_infos", ".", "max_score", "=", "True", "\n", "request_infos", ".", "won", "=", "True", "\n", "request_infos", ".", "lost", "=", "True", "\n", "request_infos", ".", "extras", "=", "[", "\"recipe\"", "]", "\n", "request_infos", ".", "admissible_commands", "=", "True", "\n", "return", "request_infos", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.tools.replay_from_log.ReplayAgent.pre_run": [[59, 61], ["None"], "methods", ["None"], ["", "def", "pre_run", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.tools.replay_from_log.ReplayAgent.post_run": [[62, 64], ["None"], "methods", ["None"], ["", "def", "post_run", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.tools.replay_from_log.ReplayAgent.start_episode": [[65, 68], ["None"], "methods", ["None"], ["", "def", "start_episode", "(", "self", ")", ":", "\n", "        ", "self", ".", "in_game_t", "=", "0", "\n", "self", ".", "episode_has_started", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.tools.replay_from_log.ReplayAgent.end_episode": [[69, 72], ["None"], "methods", ["None"], ["", "def", "end_episode", "(", "self", ")", ":", "\n", "        ", "self", ".", "episode_has_started", "=", "False", "\n", "self", ".", "curr_episode", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.tools.replay_from_log.ReplayAgent.act": [[73, 96], ["all", "deepword.utils.eprint", "deepword.utils.eprint", "deepword.utils.eprint", "deepword.utils.eprint", "deepword.utils.eprint", "replay_from_log.ReplayAgent.start_episode", "replay_from_log.ReplayAgent.end_episode", "deepword.utils.eprint", "deepword.utils.eprint", "deepword.utils.eprint", "deepword.utils.eprint", "deepword.utils.eprint", "termcolor.colored", "termcolor.colored", "termcolor.colored"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.deepword.utils.eprint", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.utils.eprint", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.utils.eprint", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.utils.eprint", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.utils.eprint", "home.repos.pwc.inspect_result.yinxusen_deepword.tools.replay_from_log.ReplayAgent.start_episode", "home.repos.pwc.inspect_result.yinxusen_deepword.tools.replay_from_log.ReplayAgent.end_episode", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.utils.eprint", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.utils.eprint", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.utils.eprint", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.utils.eprint", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.utils.eprint"], ["", "def", "act", "(", "self", ",", "obs", ",", "scores", ",", "dones", ",", "infos", ")", ":", "\n", "        ", "if", "not", "self", ".", "episode_has_started", ":", "\n", "            ", "self", ".", "start_episode", "(", ")", "\n", "\n", "", "if", "all", "(", "dones", ")", ":", "\n", "            ", "self", ".", "end_episode", "(", ")", "\n", "eprint", "(", "colored", "(", "obs", "[", "0", "]", ",", "\"cyan\"", ")", ")", "\n", "eprint", "(", "\"won: {}\"", ".", "format", "(", "infos", "[", "INFO_KEY", ".", "won", "]", "[", "0", "]", ")", ")", "\n", "eprint", "(", "\"lost: {}\"", ".", "format", "(", "infos", "[", "INFO_KEY", ".", "lost", "]", "[", "0", "]", ")", ")", "\n", "eprint", "(", "\"final score: {}\"", ".", "format", "(", "scores", "[", "0", "]", ")", ")", "\n", "eprint", "(", "\"total steps: {}\"", ".", "format", "(", "self", ".", "in_game_t", ")", ")", "\n", "return", "\n", "\n", "", "eprint", "(", "colored", "(", "obs", "[", "0", "]", ",", "'cyan'", ")", ")", "\n", "eprint", "(", "\"score: {}, step: {}\"", ".", "format", "(", "scores", "[", "0", "]", ",", "self", ".", "in_game_t", ")", ")", "\n", "eprint", "(", ")", "\n", "# eprint(\"\\t\"+\"\\n\\t\".join(infos[INFO_KEY.actions][0]))", "\n", "eprint", "(", ")", "\n", "\n", "action", "=", "self", ".", "guides", "[", "self", ".", "in_game_t", "]", "\n", "eprint", "(", "colored", "(", "\"> \"", "+", "action", ",", "\"red\"", ")", ")", "\n", "self", ".", "in_game_t", "+=", "1", "\n", "return", "action", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.tools.replay_from_log.play": [[98, 101], ["replay_from_log.ReplayAgent", "deepword.tools.collect_game_elements.run_games", "os.path.basename"], "function", ["home.repos.pwc.inspect_result.yinxusen_deepword.tools.collect_game_elements.run_games"], ["", "", "def", "play", "(", "game_file", ",", "log_file", ",", "nb_episodes", "=", "1", ",", "max_steps", "=", "600", ")", ":", "\n", "    ", "agent", "=", "ReplayAgent", "(", "os", ".", "path", ".", "basename", "(", "game_file", ")", ",", "log_file", ")", "\n", "run_games", "(", "agent", ",", "[", "game_file", "]", ",", "nb_episodes", ",", "max_steps", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.tools.read_eval_results.summary_from_keys": [[9, 31], ["numpy.zeros", "deepword.stats.mean_confidence_interval", "numpy.asarray", "sum", "len", "list", "map", "list", "len", "map", "filter", "len"], "function", ["home.repos.pwc.inspect_result.yinxusen_deepword.deepword.stats.mean_confidence_interval"], ["def", "summary_from_keys", "(", "keys", ",", "eval_results", ")", ":", "\n", "    ", "total_steps", ",", "total_max_scores", ",", "total_win", "=", "0", ",", "0", ",", "0", "\n", "total_scores", "=", "np", ".", "zeros", "(", "2", ",", "dtype", "=", "np", ".", "float", ")", "\n", "for", "game_name", "in", "keys", ":", "\n", "        ", "game_res", "=", "eval_results", "[", "game_name", "]", "\n", "max_scores", "=", "game_res", "[", "\"max_scores\"", "]", "\n", "earned_scores", "=", "np", ".", "asarray", "(", "list", "(", "map", "(", "lambda", "x", ":", "x", "[", "\"score\"", "]", ",", "game_res", "[", "\"runs\"", "]", ")", ")", ")", "\n", "used_steps", "=", "sum", "(", "map", "(", "lambda", "x", ":", "x", "[", "\"steps\"", "]", ",", "game_res", "[", "\"runs\"", "]", ")", ")", "\n", "has_won", "=", "len", "(", "list", "(", "filter", "(", "lambda", "x", ":", "x", "[", "\"has_won\"", "]", ",", "game_res", "[", "\"runs\"", "]", ")", ")", ")", "\n", "total_win", "+=", "has_won", "\n", "total_scores", "+=", "earned_scores", "\n", "total_steps", "+=", "used_steps", "\n", "total_max_scores", "+=", "max_scores", "\n", "", "total_max_steps", "=", "len", "(", "keys", ")", "*", "2", "*", "100", "\n", "if", "total_max_steps", "==", "0", ":", "\n", "        ", "return", "0", ",", "0", "\n", "", "sample_mean", ",", "confidence_interval", "=", "mean_confidence_interval", "(", "\n", "total_scores", "/", "total_max_scores", ")", "\n", "return", "(", "sample_mean", ",", "\n", "confidence_interval", ",", "\n", "total_steps", "*", "1.", "/", "total_max_steps", ",", "\n", "total_win", "*", "1.", "/", "(", "len", "(", "keys", ")", "*", "2", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.tools.read_eval_results.merge_eval_results": [[33, 39], ["dict", "dict.update", "dict.update"], "function", ["home.repos.pwc.inspect_result.yinxusen_deepword.deepword.sum_tree.SumTree.update", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.sum_tree.SumTree.update"], ["", "def", "merge_eval_results", "(", "j_res1", ",", "j_res2", "=", "None", ")", ":", "\n", "    ", "eval_res", "=", "dict", "(", ")", "\n", "eval_res", ".", "update", "(", "j_res1", "[", "'games'", "]", ")", "\n", "if", "j_res2", ":", "\n", "        ", "eval_res", ".", "update", "(", "j_res2", "[", "'games'", "]", ")", "\n", "", "return", "eval_res", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.tools.read_eval_results.main": [[41, 92], ["read_eval_results.merge_eval_results", "list", "list", "list", "list", "list", "list", "list", "list", "list", "list", "zip", "open", "json.load", "merge_eval_results.keys", "filter", "filter", "filter", "filter", "filter", "filter", "filter", "filter", "filter", "print", "open", "json.load", "map", "read_eval_results.summary_from_keys"], "function", ["home.repos.pwc.inspect_result.yinxusen_deepword.tools.read_eval_results.merge_eval_results", "home.repos.pwc.inspect_result.yinxusen_deepword.tools.read_eval_failed_reason.summary_from_keys"], ["", "def", "main", "(", "f_result", ",", "f_result2", "=", "None", ")", ":", "\n", "    ", "with", "open", "(", "f_result", ",", "\"r\"", ")", "as", "f", ":", "\n", "        ", "j_result", "=", "json", ".", "load", "(", "f", ")", "\n", "\n", "", "if", "f_result2", ":", "\n", "        ", "with", "open", "(", "f_result2", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "j_result2", "=", "json", ".", "load", "(", "f", ")", "\n", "", "", "else", ":", "\n", "        ", "j_result2", "=", "None", "\n", "\n", "", "eval_results", "=", "merge_eval_results", "(", "j_result", ",", "j_result2", ")", "\n", "\n", "all_keys", "=", "list", "(", "eval_results", ".", "keys", "(", ")", ")", "\n", "\n", "k_tier1", "=", "list", "(", "filter", "(", "lambda", "k", ":", "\"go\"", "not", "in", "k", "and", "\"recipe1\"", "in", "k", ",", "all_keys", ")", ")", "\n", "k_tier2", "=", "list", "(", "filter", "(", "lambda", "k", ":", "\"go\"", "not", "in", "k", "and", "\"recipe2\"", "in", "k", ",", "all_keys", ")", ")", "\n", "k_tier3", "=", "list", "(", "filter", "(", "lambda", "k", ":", "\"go\"", "not", "in", "k", "and", "\"recipe3\"", "in", "k", ",", "all_keys", ")", ")", "\n", "k_tier4", "=", "list", "(", "filter", "(", "lambda", "k", ":", "\"go6\"", "in", "k", ",", "all_keys", ")", ")", "\n", "k_tier5", "=", "list", "(", "filter", "(", "lambda", "k", ":", "\"go9\"", "in", "k", ",", "all_keys", ")", ")", "\n", "k_tier6", "=", "list", "(", "filter", "(", "lambda", "k", ":", "\"go12\"", "in", "k", ",", "all_keys", ")", ")", "\n", "# k_tier4_1 = list(filter(lambda k: \"go6\" in k and \"recipe1\" in k, all_keys))", "\n", "# k_tier4_2 = list(filter(lambda k: \"go6\" in k and \"recipe2\" in k, all_keys))", "\n", "# k_tier4_3 = list(filter(lambda k: \"go6\" in k and \"recipe3\" in k, all_keys))", "\n", "# k_tier5_1 = list(filter(lambda k: \"go9\" in k and \"recipe1\" in k, all_keys))", "\n", "# k_tier5_2 = list(filter(lambda k: \"go9\" in k and \"recipe2\" in k, all_keys))", "\n", "# k_tier5_3 = list(filter(lambda k: \"go9\" in k and \"recipe3\" in k, all_keys))", "\n", "# k_tier6_1 = list(filter(lambda k: \"go12\" in k and \"recipe1\" in k, all_keys))", "\n", "# k_tier6_2 = list(filter(lambda k: \"go12\" in k and \"recipe2\" in k, all_keys))", "\n", "# k_tier6_3 = list(filter(lambda k: \"go12\" in k and \"recipe3\" in k, all_keys))", "\n", "\n", "k_wo_drop", "=", "list", "(", "filter", "(", "lambda", "k", ":", "\"drop\"", "not", "in", "k", ",", "all_keys", ")", ")", "\n", "k_w_drop", "=", "list", "(", "filter", "(", "lambda", "k", ":", "\"drop\"", "in", "k", ",", "all_keys", ")", ")", "\n", "\n", "k_r1", "=", "list", "(", "filter", "(", "lambda", "k", ":", "\"recipe1\"", "in", "k", ",", "all_keys", ")", ")", "\n", "\n", "all_tiers_keys", "=", "[", "k_tier1", ",", "k_tier2", ",", "k_tier3", ",", "\n", "k_tier4", ",", "\n", "k_tier5", ",", "\n", "k_tier6", ",", "\n", "all_keys", ",", "k_wo_drop", ",", "k_w_drop", "]", "\n", "all_tiers_names", "=", "[", "\"tier1\"", ",", "\"tier2\"", ",", "\"tier3\"", ",", "\n", "\"tier4\"", ",", "\n", "\"tier5\"", ",", "\n", "\"tier6\"", ",", "\n", "\"all-tiers\"", ",", "\n", "\"w/o drop\"", ",", "\"w/ drop\"", "]", "\n", "for", "nn", ",", "kk", "in", "zip", "(", "all_tiers_names", ",", "all_tiers_keys", ")", ":", "\n", "        ", "res", "=", "\",\"", ".", "join", "(", "\n", "map", "(", "lambda", "x", ":", "\"{:.2f}\"", ".", "format", "(", "x", ")", ",", "\n", "summary_from_keys", "(", "kk", ",", "eval_results", ")", ")", ")", "\n", "print", "(", "\"{:>15}:  {}\"", ".", "format", "(", "nn", ",", "res", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.tools.game_name2id.game_name2id": [[11, 22], ["open", "open", "dict", "print", "x.strip", "x.strip", "x.split", "f.readlines", "f.readlines"], "function", ["None"], ["def", "game_name2id", "(", "f_games", ")", ":", "\n", "    ", "with", "open", "(", "f_games", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "game_names", "=", "[", "x", ".", "strip", "(", ")", "for", "x", "in", "f", ".", "readlines", "(", ")", "]", "\n", "\n", "", "with", "open", "(", "fn_game_ids", ")", "as", "f", ":", "\n", "        ", "game_ids", "=", "[", "x", ".", "strip", "(", ")", "for", "x", "in", "f", ".", "readlines", "(", ")", "]", "\n", "game_ids", "=", "[", "x", ".", "split", "(", "\"\\t\"", ")", "for", "x", "in", "game_ids", "]", "\n", "game_ids", "=", "dict", "(", "[", "(", "x", "[", "0", "]", ",", "x", "[", "1", "]", ")", "for", "x", "in", "game_ids", "]", ")", "\n", "\n", "", "for", "gn", "in", "game_names", ":", "\n", "        ", "print", "(", "\"{}\\t{}\"", ".", "format", "(", "gn", ",", "game_ids", "[", "gn", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.tools.diff_train_w_test.diff_names": [[6, 15], ["filter", "open", "map", "open", "set", "open", "ft.write", "ff.readlines", "map", "n.strip", "ff.readlines", "n.strip", "sorted"], "function", ["home.repos.pwc.inspect_result.yinxusen_deepword.students.student_learner.CMD.set"], ["def", "diff_names", "(", "f_games", ",", "test_set", ")", ":", "\n", "    ", "with", "open", "(", "f_games", ",", "\"r\"", ")", "as", "ff", ":", "\n", "        ", "fn_games", "=", "map", "(", "lambda", "n", ":", "n", ".", "strip", "(", ")", ",", "ff", ".", "readlines", "(", ")", ")", "\n", "", "with", "open", "(", "test_set", ",", "\"r\"", ")", "as", "ff", ":", "\n", "        ", "test_names", "=", "set", "(", "map", "(", "lambda", "n", ":", "n", ".", "strip", "(", ")", ",", "ff", ".", "readlines", "(", ")", ")", ")", "\n", "\n", "", "diff", "=", "filter", "(", "lambda", "n", ":", "n", "not", "in", "test_names", ",", "fn_games", ")", "\n", "with", "open", "(", "\"{}-diff\"", ".", "format", "(", "f_games", ")", ",", "\"w\"", ")", "as", "ft", ":", "\n", "        ", "ft", ".", "write", "(", "\"\\n\"", ".", "join", "(", "sorted", "(", "diff", ")", ")", "+", "\"\\n\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.tools.compare_eval_results.summary_from_keys": [[6, 24], ["sum", "sum", "len", "map", "map", "list", "len", "filter", "len"], "function", ["None"], ["def", "summary_from_keys", "(", "keys", ",", "j_result", ")", ":", "\n", "    ", "total_scores", ",", "total_steps", ",", "total_max_scores", ",", "total_win", "=", "0", ",", "0", ",", "0", ",", "0", "\n", "for", "game_name", "in", "keys", ":", "\n", "        ", "game_res", "=", "j_result", "[", "\"games\"", "]", "[", "game_name", "]", "\n", "max_scores", "=", "game_res", "[", "\"max_scores\"", "]", "\n", "earned_scores", "=", "sum", "(", "map", "(", "lambda", "x", ":", "x", "[", "\"score\"", "]", ",", "game_res", "[", "\"runs\"", "]", ")", ")", "\n", "used_steps", "=", "sum", "(", "map", "(", "lambda", "x", ":", "x", "[", "\"steps\"", "]", ",", "game_res", "[", "\"runs\"", "]", ")", ")", "\n", "has_won", "=", "len", "(", "list", "(", "filter", "(", "lambda", "x", ":", "x", "[", "\"has_won\"", "]", ",", "game_res", "[", "\"runs\"", "]", ")", ")", ")", "\n", "total_win", "+=", "has_won", "\n", "total_scores", "+=", "earned_scores", "\n", "total_steps", "+=", "used_steps", "\n", "total_max_scores", "+=", "max_scores", "*", "10", "\n", "", "total_max_steps", "=", "len", "(", "keys", ")", "*", "10", "*", "100", "\n", "if", "total_max_steps", "==", "0", ":", "\n", "        ", "return", "0", ",", "0", "\n", "", "return", "(", "total_scores", "*", "1.", "/", "total_max_scores", ",", "\n", "total_steps", "*", "1.", "/", "total_max_steps", ",", "\n", "total_win", "*", "1.", "/", "(", "len", "(", "keys", ")", "*", "10", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.tools.compare_eval_results.reason_of_failure": [[26, 31], ["list", "zip", "list", "filter", "collections.Counter().keys", "collections.Counter().values", "reversed", "sorted", "collections.Counter", "collections.Counter"], "function", ["None"], ["", "def", "reason_of_failure", "(", "last_commands", ")", ":", "\n", "    ", "last_commands", "=", "list", "(", "filter", "(", "lambda", "a", ":", "a", "!=", "\"eat meal\"", ",", "last_commands", ")", ")", "\n", "res", "=", "zip", "(", "Counter", "(", "last_commands", ")", ".", "keys", "(", ")", ",", "Counter", "(", "last_commands", ")", ".", "values", "(", ")", ")", "\n", "res", "=", "list", "(", "reversed", "(", "sorted", "(", "res", ",", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ")", ")", ")", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.tools.compare_eval_results.most_common_steps": [[33, 51], ["list", "map", "sorted", "map", "sorted", "list", "filter", "len", "list", "filter", "map", "collections.Counter().items", "[].split", "map", "len", "int", "len", "collections.Counter", "k[].split", "str"], "function", ["None"], ["", "def", "most_common_steps", "(", "scoring_steps", ")", ":", "\n", "    ", "\"\"\"\n    1. find the most common scoring steps,\n    2. if ties, choose the one with the best score.\n    :param scoring_steps:\n    :return:\n    \"\"\"", "\n", "scoring_steps", "=", "list", "(", "filter", "(", "lambda", "x", ":", "len", "(", "x", ")", "!=", "0", ",", "scoring_steps", ")", ")", "\n", "if", "len", "(", "scoring_steps", ")", "==", "0", ":", "\n", "        ", "return", "[", "]", "\n", "", "scoring_steps", "=", "map", "(", "\n", "lambda", "x", ":", "\",\"", ".", "join", "(", "map", "(", "lambda", "y", ":", "str", "(", "y", ")", ",", "x", ")", ")", ",", "scoring_steps", ")", "\n", "cnt", "=", "sorted", "(", "list", "(", "Counter", "(", "scoring_steps", ")", ".", "items", "(", ")", ")", ",", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ")", "\n", "most_val", "=", "cnt", "[", "-", "1", "]", "[", "1", "]", "\n", "same_cnt_items", "=", "map", "(", "lambda", "k", ":", "(", "k", "[", "0", "]", ",", "k", "[", "1", "]", ",", "len", "(", "k", "[", "0", "]", ".", "split", "(", "\",\"", ")", ")", ")", ",", "\n", "filter", "(", "lambda", "x", ":", "x", "[", "1", "]", "==", "most_val", ",", "cnt", ")", ")", "\n", "same_cnt_items", "=", "sorted", "(", "same_cnt_items", ",", "key", "=", "lambda", "x", ":", "x", "[", "2", "]", ")", "\n", "return", "list", "(", "map", "(", "lambda", "x", ":", "int", "(", "x", ")", ",", "same_cnt_items", "[", "-", "1", "]", "[", "0", "]", ".", "split", "(", "\",\"", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.tools.compare_eval_results.format_steps": [[53, 63], ["retval.append", "len"], "function", ["home.repos.pwc.inspect_result.yinxusen_deepword.deepword.tree_memory.TreeMemory.append"], ["", "def", "format_steps", "(", "mcs", ",", "max_n_vals", ")", ":", "\n", "    ", "mcs", "=", "mcs", "[", ":", "max_n_vals", "]", "\n", "retval", "=", "[", "]", "\n", "prev_dat", "=", "0", "\n", "for", "x", "in", "mcs", ":", "\n", "        ", "y", "=", "x", "-", "prev_dat", "\n", "retval", ".", "append", "(", "y", ")", "\n", "prev_dat", "=", "x", "\n", "\n", "", "return", "retval", "+", "[", "'-'", "]", "*", "(", "max_n_vals", "-", "len", "(", "retval", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.tools.compare_eval_results.diff_from_keys": [[65, 88], ["sum", "sum", "sum", "sum", "list", "list", "len", "len", "compare_eval_results.most_common_steps", "compare_eval_results.most_common_steps", "map", "map", "map", "map", "map", "map", "list", "list", "print", "filter", "filter", "len", "len", "len", "sum", "sum"], "function", ["home.repos.pwc.inspect_result.yinxusen_deepword.tools.compare_eval_results.most_common_steps", "home.repos.pwc.inspect_result.yinxusen_deepword.tools.compare_eval_results.most_common_steps"], ["", "def", "diff_from_keys", "(", "keys", ",", "j_result", ",", "j_result2", ")", ":", "\n", "    ", "for", "game_name", "in", "keys", ":", "\n", "        ", "game_res", "=", "j_result", "[", "\"games\"", "]", "[", "game_name", "]", "\n", "game_res2", "=", "j_result2", "[", "\"games\"", "]", "[", "game_name", "]", "\n", "max_scores", "=", "game_res", "[", "\"max_scores\"", "]", "\n", "earned_scores", "=", "sum", "(", "map", "(", "lambda", "x", ":", "x", "[", "\"score\"", "]", ",", "game_res", "[", "\"runs\"", "]", ")", ")", "\n", "earned_scores2", "=", "sum", "(", "map", "(", "lambda", "x", ":", "x", "[", "\"score\"", "]", ",", "game_res2", "[", "\"runs\"", "]", ")", ")", "\n", "used_steps", "=", "sum", "(", "map", "(", "lambda", "x", ":", "x", "[", "\"steps\"", "]", ",", "game_res", "[", "\"runs\"", "]", ")", ")", "\n", "used_steps2", "=", "sum", "(", "map", "(", "lambda", "x", ":", "x", "[", "\"steps\"", "]", ",", "game_res2", "[", "\"runs\"", "]", ")", ")", "\n", "scoring_steps", "=", "list", "(", "map", "(", "lambda", "x", ":", "x", "[", "\"scoring_steps\"", "]", ",", "game_res", "[", "\"runs\"", "]", ")", ")", "\n", "scoring_steps2", "=", "list", "(", "map", "(", "lambda", "x", ":", "x", "[", "\"scoring_steps\"", "]", ",", "game_res2", "[", "\"runs\"", "]", ")", ")", "\n", "has_won", "=", "len", "(", "list", "(", "filter", "(", "lambda", "x", ":", "x", "[", "\"has_won\"", "]", ",", "game_res", "[", "\"runs\"", "]", ")", ")", ")", "\n", "has_won2", "=", "len", "(", "list", "(", "filter", "(", "lambda", "x", ":", "x", "[", "\"has_won\"", "]", ",", "game_res2", "[", "\"runs\"", "]", ")", ")", ")", "\n", "# print(\"{:>100}: {}, {}/{}, {}/{}, {}/{}\".format(", "\n", "#     game_name,max_scores, earned_scores, earned_scores2,", "\n", "#     used_steps, used_steps2, has_won, has_won2))", "\n", "# print(reason_of_failure(map(lambda x: x[\"commands\"][-1], game_res[\"runs\"])))", "\n", "# print(reason_of_failure(map(lambda x: x[\"commands\"][-1], game_res2[\"runs\"])))", "\n", "max_vals", "=", "11", "\n", "most_common_1", "=", "most_common_steps", "(", "scoring_steps", ")", "\n", "most_common_2", "=", "most_common_steps", "(", "scoring_steps2", ")", "\n", "if", "len", "(", "most_common_1", ")", "!=", "0", "and", "len", "(", "most_common_1", ")", "==", "len", "(", "most_common_2", ")", ":", "\n", "            ", "print", "(", "sum", "(", "most_common_1", ")", ",", "\",\"", ",", "sum", "(", "most_common_2", ")", ")", "\n", "# most_common_1 = format_steps(most_common_1, max_vals)", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.tools.compare_eval_results.main": [[96, 131], ["list", "list", "list", "list", "list", "list", "list", "list", "zip", "open", "json.load", "open", "json.load", "j_result[].keys", "filter", "filter", "filter", "filter", "filter", "filter", "filter", "compare_eval_results.diff_from_keys"], "function", ["home.repos.pwc.inspect_result.yinxusen_deepword.tools.compare_eval_results.diff_from_keys"], ["", "", "", "def", "main", "(", "f_result", ",", "f_result2", ")", ":", "\n", "    ", "with", "open", "(", "f_result", ",", "\"r\"", ")", "as", "f", ":", "\n", "        ", "j_result", "=", "json", ".", "load", "(", "f", ")", "\n", "\n", "", "with", "open", "(", "f_result2", ",", "\"r\"", ")", "as", "f", ":", "\n", "        ", "j_result2", "=", "json", ".", "load", "(", "f", ")", "\n", "\n", "\n", "", "all_keys", "=", "list", "(", "j_result", "[", "\"games\"", "]", ".", "keys", "(", ")", ")", "\n", "\n", "k_tier1", "=", "list", "(", "filter", "(", "lambda", "k", ":", "\"go\"", "not", "in", "k", "and", "\"recipe1\"", "in", "k", ",", "all_keys", ")", ")", "\n", "k_tier2", "=", "list", "(", "filter", "(", "lambda", "k", ":", "\"go\"", "not", "in", "k", "and", "\"recipe2\"", "in", "k", ",", "all_keys", ")", ")", "\n", "k_tier3", "=", "list", "(", "filter", "(", "lambda", "k", ":", "\"go\"", "not", "in", "k", "and", "\"recipe3\"", "in", "k", ",", "all_keys", ")", ")", "\n", "k_tier4", "=", "list", "(", "filter", "(", "lambda", "k", ":", "\"go6\"", "in", "k", ",", "all_keys", ")", ")", "\n", "k_tier5", "=", "list", "(", "filter", "(", "lambda", "k", ":", "\"go9\"", "in", "k", ",", "all_keys", ")", ")", "\n", "k_tier6", "=", "list", "(", "filter", "(", "lambda", "k", ":", "\"go12\"", "in", "k", ",", "all_keys", ")", ")", "\n", "# k_tier4_1 = list(filter(lambda k: \"go6\" in k and \"recipe1\" in k, all_keys))", "\n", "# k_tier4_2 = list(filter(lambda k: \"go6\" in k and \"recipe2\" in k, all_keys))", "\n", "# k_tier4_3 = list(filter(lambda k: \"go6\" in k and \"recipe3\" in k, all_keys))", "\n", "# k_tier5_1 = list(filter(lambda k: \"go9\" in k and \"recipe1\" in k, all_keys))", "\n", "# k_tier5_2 = list(filter(lambda k: \"go9\" in k and \"recipe2\" in k, all_keys))", "\n", "# k_tier5_3 = list(filter(lambda k: \"go9\" in k and \"recipe3\" in k, all_keys))", "\n", "# k_tier6_1 = list(filter(lambda k: \"go12\" in k and \"recipe1\" in k, all_keys))", "\n", "# k_tier6_2 = list(filter(lambda k: \"go12\" in k and \"recipe2\" in k, all_keys))", "\n", "# k_tier6_3 = list(filter(lambda k: \"go12\" in k and \"recipe3\" in k, all_keys))", "\n", "\n", "k_r1", "=", "list", "(", "filter", "(", "lambda", "k", ":", "\"recipe1\"", "in", "k", ",", "all_keys", ")", ")", "\n", "\n", "all_tiers_keys", "=", "[", "k_tier1", ",", "k_tier2", ",", "k_tier3", "\n", "]", "\n", "all_tiers_names", "=", "[", "\"tier1\"", ",", "\"tier2\"", ",", "\"tier3\"", "\n", "]", "\n", "for", "nn", ",", "kk", "in", "zip", "(", "all_tiers_names", ",", "all_tiers_keys", ")", ":", "\n", "# print(\"-------{}-----------\".format(nn))", "\n", "        ", "diff_from_keys", "(", "kk", ",", "j_result", ",", "j_result2", ")", "\n", "# print(\"------------------\")", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.tools.count_filtered_teacher_data.count_data": [[11, 40], ["set", "os.path.isfile", "glob.glob", "print", "set", "os.path.join", "len", "len", "print", "numpy.load", "isinstance", "os.path.basename", "x.split", "deepword.utils.load_uniq_lines"], "function", ["home.repos.pwc.inspect_result.yinxusen_deepword.students.student_learner.CMD.set", "home.repos.pwc.inspect_result.yinxusen_deepword.students.student_learner.CMD.set", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.utils.load_uniq_lines"], ["def", "count_data", "(", "data_dir", ",", "fn_allowed_gids", ")", ":", "\n", "# filter allowed gids from memory during training", "\n", "# if allowed_gids is empty, use all memory", "\n", "# allowed_gids.txt:", "\n", "# game name [TAB] game ID", "\n", "    ", "allowed_gids", "=", "set", "(", ")", "\n", "if", "os", ".", "path", ".", "isfile", "(", "fn_allowed_gids", ")", ":", "\n", "        ", "allowed_gids", "=", "set", "(", "\n", "[", "x", ".", "split", "(", "\"\\t\"", ")", "[", "1", "]", "for", "x", "in", "load_uniq_lines", "(", "fn_allowed_gids", ")", "]", ")", "\n", "\n", "", "memo_files", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "data_dir", ",", "\"memo*npz\"", ")", ")", "\n", "counter_allowed", "=", "0", "\n", "counter_all", "=", "0", "\n", "for", "fn_memo", "in", "memo_files", ":", "\n", "        ", "memo", "=", "np", ".", "load", "(", "fn_memo", ",", "allow_pickle", "=", "True", ")", "[", "'data'", "]", "\n", "memo", "=", "[", "x", "for", "x", "in", "memo", "if", "isinstance", "(", "x", ",", "DRRNMemoTeacher", ")", "]", "\n", "cnt_all", "=", "len", "(", "memo", ")", "\n", "if", "allowed_gids", ":", "\n", "            ", "memo", "=", "[", "x", "for", "x", "in", "memo", "if", "x", ".", "gid", "in", "allowed_gids", "]", "\n", "", "cnt_allowed", "=", "len", "(", "memo", ")", "\n", "print", "(", "\"file: {}, allowed: {}, all: {}, percentage: {}\"", ".", "format", "(", "\n", "os", ".", "path", ".", "basename", "(", "fn_memo", ")", ",", "cnt_allowed", ",", "cnt_all", ",", "\n", "cnt_allowed", "*", "100.", "/", "cnt_all", ")", ")", "\n", "\n", "counter_all", "+=", "cnt_all", "\n", "counter_allowed", "+=", "cnt_allowed", "\n", "\n", "", "print", "(", "\"overall, allowed: {}, all: {}, percentage: {}\"", ".", "format", "(", "\n", "counter_allowed", ",", "counter_all", ",", "counter_allowed", "*", "100.", "/", "counter_all", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.tools.read_tf_ckpt.extracting": [[5, 13], ["tensorflow.train.load_checkpoint", "tf.train.load_checkpoint.get_variable_to_shape_map", "sorted", "ckpt_reader.get_variable_to_shape_map.keys", "print", "print", "print", "tf.train.load_checkpoint.get_tensor"], "function", ["None"], ["def", "extracting", "(", "ckpt", ")", ":", "\n", "    ", "ckpt_reader", "=", "tf", ".", "train", ".", "load_checkpoint", "(", "ckpt", ")", "\n", "tf_vars", "=", "ckpt_reader", ".", "get_variable_to_shape_map", "(", ")", "\n", "tf_var_names", "=", "sorted", "(", "tf_vars", ".", "keys", "(", ")", ")", "\n", "for", "v_name", "in", "tf_var_names", ":", "\n", "        ", "print", "(", "\"v_name: {}, v_shape: {}\"", ".", "format", "(", "v_name", ",", "tf_vars", "[", "v_name", "]", ")", ")", "\n", "print", "(", "ckpt_reader", ".", "get_tensor", "(", "v_name", ")", ")", "\n", "print", "(", "\"--------------\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.tools.play_game.HumanAgent.request_infos": [[9, 24], ["textworld.EnvInfos"], "methods", ["None"], ["    ", "@", "classmethod", "\n", "def", "request_infos", "(", "cls", ")", ":", "\n", "        ", "request_infos", "=", "EnvInfos", "(", ")", "\n", "request_infos", ".", "description", "=", "True", "\n", "request_infos", ".", "inventory", "=", "True", "\n", "request_infos", ".", "entities", "=", "True", "\n", "request_infos", ".", "verbs", "=", "True", "\n", "request_infos", ".", "command_templates", "=", "True", "\n", "request_infos", ".", "max_score", "=", "True", "\n", "request_infos", ".", "won", "=", "True", "\n", "request_infos", ".", "lost", "=", "True", "\n", "request_infos", ".", "extras", "=", "[", "\"recipe\"", ",", "\"walkthrough\"", "]", "\n", "request_infos", ".", "admissible_commands", "=", "True", "\n", "request_infos", ".", "objective", "=", "True", "\n", "return", "request_infos", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.tools.play_game.HumanAgent.pre_run": [[25, 27], ["None"], "methods", ["None"], ["", "def", "pre_run", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.tools.play_game.HumanAgent.post_run": [[28, 30], ["None"], "methods", ["None"], ["", "def", "post_run", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.tools.play_game.HumanAgent.act": [[31, 59], ["print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "input"], "methods", ["None"], ["", "def", "act", "(", "self", ",", "obs", ",", "scores", ",", "dones", ",", "infos", ")", ":", "\n", "        ", "actions", "=", "infos", "[", "INFO_KEY", ".", "actions", "]", "[", "0", "]", "\n", "print", "(", "infos", "[", "\"extra.walkthrough\"", "]", ")", "\n", "print", "(", "infos", "[", "\"objective\"", "]", ")", "\n", "print", "(", "\"----------------------\"", ")", "\n", "print", "(", "obs", "[", "0", "]", ")", "\n", "state_text", "=", "(", "\n", "infos", "[", "INFO_KEY", ".", "desc", "]", "[", "0", "]", "+", "\"\\n\"", "+", "infos", "[", "INFO_KEY", ".", "inventory", "]", "[", "0", "]", ")", "\n", "# print(\"--------------state text--------------\")", "\n", "# print(state_text)", "\n", "print", "(", "\"----------------------\"", ")", "\n", "print", "(", "\"\\n\"", ".", "join", "(", "actions", ")", ")", "\n", "print", "(", "\"\\n\"", ")", "\n", "print", "(", "\"----------------------\"", ")", "\n", "# print(infos.keys())", "\n", "# print(\"----------------------\")", "\n", "print", "(", "\"won: {}\"", ".", "format", "(", "infos", "[", "INFO_KEY", ".", "won", "]", "[", "0", "]", ")", ")", "\n", "print", "(", "\"lost: {}\"", ".", "format", "(", "infos", "[", "INFO_KEY", ".", "lost", "]", "[", "0", "]", ")", ")", "\n", "# print(\"----------------------\")", "\n", "# print(infos[INFO_KEY.verbs][0])", "\n", "# print(\"----------------------\")", "\n", "# print(infos[INFO_KEY.templates][0])", "\n", "# print(\"----------------------\")", "\n", "# print(infos[INFO_KEY.entities][0])", "\n", "# print(\"----------------------\")", "\n", "# print(infos[INFO_KEY.recipe])", "\n", "action", "=", "input", "(", "\"> \"", ")", "\n", "return", "action", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.tools.play_game.WalkthroughAgent.request_infos": [[62, 76], ["textworld.EnvInfos"], "methods", ["None"], ["    ", "@", "classmethod", "\n", "def", "request_infos", "(", "cls", ")", ":", "\n", "        ", "request_infos", "=", "EnvInfos", "(", ")", "\n", "request_infos", ".", "description", "=", "True", "\n", "request_infos", ".", "inventory", "=", "True", "\n", "request_infos", ".", "entities", "=", "True", "\n", "request_infos", ".", "verbs", "=", "True", "\n", "request_infos", ".", "command_templates", "=", "True", "\n", "request_infos", ".", "max_score", "=", "True", "\n", "request_infos", ".", "won", "=", "True", "\n", "request_infos", ".", "lost", "=", "True", "\n", "request_infos", ".", "extras", "=", "[", "\"recipe\"", ",", "\"walkthrough\"", "]", "\n", "request_infos", ".", "admissible_commands", "=", "True", "\n", "return", "request_infos", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.tools.play_game.WalkthroughAgent.pre_run": [[77, 79], ["None"], "methods", ["None"], ["", "def", "pre_run", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.tools.play_game.WalkthroughAgent.post_run": [[80, 82], ["None"], "methods", ["None"], ["", "def", "post_run", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.tools.play_game.WalkthroughAgent.act": [[83, 110], ["print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "input", "infos.keys"], "methods", ["None"], ["", "def", "act", "(", "self", ",", "obs", ",", "scores", ",", "dones", ",", "infos", ")", ":", "\n", "        ", "actions", "=", "infos", "[", "INFO_KEY", ".", "actions", "]", "[", "0", "]", "\n", "print", "(", "infos", "[", "\"extra.walkthrough\"", "]", ")", "\n", "print", "(", "\"----------------------\"", ")", "\n", "print", "(", "obs", "[", "0", "]", ")", "\n", "state_text", "=", "(", "\n", "infos", "[", "INFO_KEY", ".", "desc", "]", "[", "0", "]", "+", "\"\\n\"", "+", "infos", "[", "INFO_KEY", ".", "inventory", "]", "[", "0", "]", ")", "\n", "print", "(", "\"--------------state text--------------\"", ")", "\n", "print", "(", "state_text", ")", "\n", "print", "(", "\"----------------------\"", ")", "\n", "print", "(", "\"\\n\"", ".", "join", "(", "actions", ")", ")", "\n", "print", "(", "\"\\n\"", ")", "\n", "print", "(", "\"----------------------\"", ")", "\n", "print", "(", "infos", ".", "keys", "(", ")", ")", "\n", "print", "(", "\"----------------------\"", ")", "\n", "print", "(", "\"won: {}\"", ".", "format", "(", "infos", "[", "INFO_KEY", ".", "won", "]", "[", "0", "]", ")", ")", "\n", "print", "(", "\"lost: {}\"", ".", "format", "(", "infos", "[", "INFO_KEY", ".", "lost", "]", "[", "0", "]", ")", ")", "\n", "print", "(", "\"----------------------\"", ")", "\n", "print", "(", "infos", "[", "INFO_KEY", ".", "verbs", "]", "[", "0", "]", ")", "\n", "print", "(", "\"----------------------\"", ")", "\n", "print", "(", "infos", "[", "INFO_KEY", ".", "templates", "]", "[", "0", "]", ")", "\n", "print", "(", "\"----------------------\"", ")", "\n", "print", "(", "infos", "[", "INFO_KEY", ".", "entities", "]", "[", "0", "]", ")", "\n", "print", "(", "\"----------------------\"", ")", "\n", "print", "(", "infos", "[", "INFO_KEY", ".", "recipe", "]", ")", "\n", "action", "=", "input", "(", "\"> \"", ")", "\n", "return", "action", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.tools.play_game.human_play": [[112, 115], ["play_game.HumanAgent", "deepword.tools.collect_game_elements.run_games"], "function", ["home.repos.pwc.inspect_result.yinxusen_deepword.tools.collect_game_elements.run_games"], ["", "", "def", "human_play", "(", "game_file", ",", "nb_episodes", "=", "1", ",", "max_steps", "=", "100", ")", ":", "\n", "    ", "agent", "=", "HumanAgent", "(", ")", "\n", "run_games", "(", "agent", ",", "[", "game_file", "]", ",", "nb_episodes", ",", "max_steps", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.tools.load_old_bert_nlu_to_new.new_name2old_name": [[13, 19], ["v_name.split"], "function", ["None"], ["def", "new_name2old_name", "(", "v_name", ")", ":", "\n", "    ", "\"\"\"\n    This function is a very specific treatment for substituting\n     q-encoder/xxx/yyy into bert-state-encoder/xxx/yyy\n    \"\"\"", "\n", "return", "\"/\"", ".", "join", "(", "[", "'bert-state-encoder'", "]", "+", "v_name", ".", "split", "(", "\"/\"", ")", "[", "1", ":", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.tools.load_old_bert_nlu_to_new.load_old_ckpt_to_new": [[21, 58], ["deepword.hparams.load_hparams", "deepword.models.nlu_modeling.BertNLU.get_eval_model", "tensorflow.ConfigProto", "tensorflow.Session", "BertNLU.get_eval_model.graph.as_default", "tf.Session.run", "list", "tensorflow.global_variables", "dict", "tensorflow.train.Saver", "tf.train.Saver.restore", "tensorflow.train.Saver", "tf.train.Saver.save", "tensorflow.global_variables_initializer", "map", "tf.Session.run", "model_init_status.append", "tf.Session.run", "print", "print", "tensorflow.train.list_variables", "load_old_bert_nlu_to_new.new_name2old_name"], "function", ["home.repos.pwc.inspect_result.yinxusen_deepword.deepword.hparams.load_hparams", "home.repos.pwc.inspect_result.yinxusen_deepword.models.drrn_modeling.CnnDRRN.get_eval_model", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.tree_memory.TreeMemory.append", "home.repos.pwc.inspect_result.yinxusen_deepword.tools.load_old_bert_nlu_to_new.new_name2old_name"], ["", "def", "load_old_ckpt_to_new", "(", "ckpt", ",", "fn_hparams", ",", "save_to", ")", ":", "\n", "# substitute some variables of ckpt1 with the same variables from ckpt2", "\n", "    ", "hp", "=", "load_hparams", "(", "fn_model_config", "=", "fn_hparams", ")", "\n", "model", "=", "BertNLU", ".", "get_eval_model", "(", "hp", ",", "device_placement", "=", "\"cpu\"", ")", "\n", "conf", "=", "tf", ".", "ConfigProto", "(", "\n", "log_device_placement", "=", "False", ",", "allow_soft_placement", "=", "True", ")", "\n", "sess", "=", "tf", ".", "Session", "(", "graph", "=", "model", ".", "graph", ",", "config", "=", "conf", ")", "\n", "\n", "with", "model", ".", "graph", ".", "as_default", "(", ")", ":", "\n", "        ", "sess", ".", "run", "(", "tf", ".", "global_variables_initializer", "(", ")", ")", "\n", "all_saved_vars", "=", "list", "(", "\n", "map", "(", "lambda", "v", ":", "v", "[", "0", "]", ",", "\n", "tf", ".", "train", ".", "list_variables", "(", "ckpt", ")", ")", ")", "\n", "all_vars", "=", "tf", ".", "global_variables", "(", ")", "\n", "var_list", "=", "[", "\n", "(", "v", ".", "op", ".", "name", ",", "v", ")", "for", "v", "in", "all_vars", "if", "v", ".", "op", ".", "name", "in", "all_saved_vars", "]", "\n", "extra_vars", "=", "[", "\n", "(", "new_name2old_name", "(", "v", ".", "op", ".", "name", ")", ",", "v", ")", "\n", "for", "v", "in", "all_vars", "if", "\"q-encoder\"", "in", "v", ".", "op", ".", "name", "]", "\n", "\n", "name2var", "=", "dict", "(", "var_list", "+", "extra_vars", ")", "\n", "\n", "model_init_status", "=", "[", "]", "\n", "for", "v_name", ",", "v", "in", "extra_vars", ":", "\n", "            ", "local_var", "=", "sess", ".", "run", "(", "name2var", "[", "v_name", "]", ")", "\n", "model_init_status", ".", "append", "(", "(", "v_name", ",", "v", ",", "local_var", ")", ")", "\n", "\n", "", "saver2", "=", "tf", ".", "train", ".", "Saver", "(", "var_list", "=", "name2var", ")", "\n", "saver2", ".", "restore", "(", "sess", ",", "ckpt", ")", "\n", "\n", "for", "v_name", ",", "v", ",", "local_init_var", "in", "model_init_status", ":", "\n", "            ", "local_var", "=", "sess", ".", "run", "(", "name2var", "[", "v_name", "]", ")", "\n", "print", "(", "v_name", ")", "\n", "print", "(", "local_var", ")", "\n", "\n", "", "saver", "=", "tf", ".", "train", ".", "Saver", "(", "save_relative_paths", "=", "True", ")", "\n", "saver", ".", "save", "(", "sess", ",", "save_to", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.tools.load_old_bert_nlu_to_new.main": [[60, 93], ["os.path.join", "dict", "sorted", "len", "deepword.utils.eprint", "map", "list", "os.path.splitext", "glob.glob", "termcolor.colored", "dict.keys", "load_old_bert_nlu_to_new.load_old_ckpt_to_new", "deepword.utils.eprint", "int", "fn.split"], "function", ["home.repos.pwc.inspect_result.yinxusen_deepword.deepword.utils.eprint", "home.repos.pwc.inspect_result.yinxusen_deepword.tools.load_old_bert_nlu_to_new.load_old_ckpt_to_new", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.utils.eprint"], ["", "", "def", "main", "(", "model_dir", ")", ":", "\n", "    ", "\"\"\"\n    load some parameters from `model_dir_from` to `model_dir_to` and save the\n    new checkpoint to another dir under `model_dir_to` as \"merged_last_weights\".\n\n    the changed parameters will be computed through hp.bert_freeze_layers of\n    the two models.\n\n    Only layers that are trained by `model_from` while frozen by `model_to` will\n    be substituted.\n    \"\"\"", "\n", "\n", "watched_files", "=", "path", ".", "join", "(", "\n", "model_dir", ",", "\"last_weights\"", ",", "\"after-epoch-*.index\"", ")", "\n", "files", "=", "[", "path", ".", "splitext", "(", "fn", ")", "[", "0", "]", "for", "fn", "in", "glob", ".", "glob", "(", "watched_files", ")", "]", "\n", "if", "len", "(", "files", ")", "==", "0", ":", "\n", "        ", "eprint", "(", "colored", "(", "\"No checkpoint found!\"", ",", "\"red\"", ")", ")", "\n", "return", "\n", "", "step2ckpt", "=", "dict", "(", "map", "(", "lambda", "fn", ":", "(", "int", "(", "fn", ".", "split", "(", "\"-\"", ")", "[", "-", "1", "]", ")", ",", "fn", ")", ",", "files", ")", ")", "\n", "steps", "=", "sorted", "(", "list", "(", "step2ckpt", ".", "keys", "(", ")", ")", ")", "\n", "\n", "fn_hparams", "=", "\"{}/hparams.json\"", ".", "format", "(", "model_dir", ")", "\n", "\n", "for", "step", "in", "steps", ":", "\n", "        ", "save_to", "=", "\"{}/new_last_weights/after-epoch-{}\"", ".", "format", "(", "\n", "model_dir", ",", "step", ")", "\n", "try", ":", "\n", "            ", "load_old_ckpt_to_new", "(", "\n", "ckpt", "=", "step2ckpt", "[", "step", "]", ",", "\n", "fn_hparams", "=", "fn_hparams", ",", "\n", "save_to", "=", "save_to", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "            ", "eprint", "(", "\"error for step {}:\\n{}\"", ".", "format", "(", "step", ",", "e", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.tools.build_test_set.build_test_set": [[8, 24], ["open", "map", "glob.glob", "sorted", "random.Random().shuffle", "print", "f.readlines", "x.strip", "random.Random", "map", "os.path.splitext", "os.path.basename"], "function", ["None"], ["def", "build_test_set", "(", "f_all_types", ",", "all_game_dir", ")", ":", "\n", "    ", "\"\"\"\n    Random select two games for each type as test set\n    :param f_all_types: file contains type info, one per line\n    :param all_game_dir: dir contains all games\n    :return: names of selected test games, without file extension\n    \"\"\"", "\n", "with", "open", "(", "f_all_types", ",", "\"r\"", ")", "as", "f", ":", "\n", "        ", "all_types", "=", "map", "(", "lambda", "x", ":", "x", ".", "strip", "(", ")", ",", "f", ".", "readlines", "(", ")", ")", "\n", "", "for", "t", "in", "all_types", ":", "\n", "        ", "files", "=", "glob", ".", "glob", "(", "\"{}/*-{}-*.ulx\"", ".", "format", "(", "all_game_dir", ",", "t", ")", ")", "\n", "files", "=", "sorted", "(", "files", ")", "\n", "random", ".", "Random", "(", "42", ")", ".", "shuffle", "(", "files", ")", "\n", "selected", "=", "files", "[", "-", "2", ":", "]", "\n", "print", "(", "\"\\n\"", ".", "join", "(", "map", "(", "\n", "lambda", "x", ":", "os", ".", "path", ".", "splitext", "(", "os", ".", "path", ".", "basename", "(", "x", ")", ")", "[", "0", "]", ",", "selected", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.tools.collect_game_elements.CollectorAgent.request_infos": [[47, 50], ["NotImplementedError"], "methods", ["None"], ["    ", "@", "classmethod", "\n", "def", "request_infos", "(", "cls", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.tools.collect_game_elements.CollectorAgent.pre_run": [[51, 53], ["NotImplementedError"], "methods", ["None"], ["", "def", "pre_run", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.tools.collect_game_elements.CollectorAgent.act": [[54, 56], ["NotImplementedError"], "methods", ["None"], ["", "def", "act", "(", "self", ",", "obs", ",", "scores", ",", "dones", ",", "infos", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.tools.collect_game_elements.CollectorAgent.post_run": [[57, 59], ["NotImplementedError"], "methods", ["None"], ["", "def", "post_run", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.tools.collect_game_elements.FPCollector.__init__": [[62, 66], ["deepword.floor_plan.FloorPlanCollector"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "fp_collector", "=", "FloorPlanCollector", "(", ")", "\n", "self", ".", "prev_room", "=", "None", "\n", "self", ".", "action", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.tools.collect_game_elements.FPCollector.request_infos": [[67, 71], ["textworld.EnvInfos"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "request_infos", "(", "cls", ")", ":", "\n", "        ", "request_infos", "=", "EnvInfos", "(", "admissible_commands", "=", "True", ")", "\n", "return", "request_infos", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.tools.collect_game_elements.FPCollector.pre_run": [[72, 74], ["None"], "methods", ["None"], ["", "def", "pre_run", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.tools.collect_game_elements.FPCollector.act": [[75, 94], ["collect_game_elements.get_room", "list", "collect_game_elements.FPCollector.fp_collector.extend", "filter", "random.choice", "random.choice", "len", "random.random", "a.startswith", "a.startswith"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.tools.collect_game_elements.get_room", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.floor_plan.FloorPlanCollector.extend"], ["", "def", "act", "(", "self", ",", "obs", ",", "scores", ",", "dones", ",", "infos", ")", ":", "\n", "        ", "curr_room", "=", "get_room", "(", "obs", "[", "0", "]", ")", "\n", "if", "self", ".", "prev_room", "is", "None", ":", "\n", "            ", "self", ".", "prev_room", "=", "curr_room", "\n", "", "if", "curr_room", "!=", "self", ".", "prev_room", ":", "\n", "            ", "self", ".", "fp_collector", ".", "extend", "(", "[", "(", "self", ".", "prev_room", ",", "self", ".", "action", ",", "curr_room", ")", "]", ")", "\n", "self", ".", "prev_room", "=", "curr_room", "\n", "", "admissible_actions", "=", "infos", "[", "INFO_KEY", ".", "actions", "]", "[", "0", "]", "\n", "go_actions", "=", "list", "(", "\n", "filter", "(", "\n", "lambda", "a", ":", "a", ".", "startswith", "(", "\"go\"", ")", "or", "a", ".", "startswith", "(", "\"open\"", ")", ",", "\n", "admissible_actions", ")", ")", "\n", "# we cannot guarantee go-actions and open-actions", "\n", "# can walk all rooms", "\n", "if", "len", "(", "go_actions", ")", "==", "0", "or", "random", ".", "random", "(", ")", "<=", "0.5", ":", "\n", "            ", "self", ".", "action", "=", "random", ".", "choice", "(", "admissible_actions", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "action", "=", "random", ".", "choice", "(", "go_actions", ")", "\n", "", "return", "self", ".", "action", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.tools.collect_game_elements.FPCollector.post_run": [[95, 97], ["None"], "methods", ["None"], ["", "def", "post_run", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.tools.collect_game_elements.OneStepCollector.__init__": [[100, 108], ["set", "set"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.students.student_learner.CMD.set", "home.repos.pwc.inspect_result.yinxusen_deepword.students.student_learner.CMD.set"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "templates", "=", "set", "(", ")", "\n", "self", ".", "ingredients", "=", "set", "(", ")", "\n", "self", ".", "objectives", "=", "[", "]", "\n", "self", ".", "total_score", "=", "0", "\n", "self", ".", "all_max_scores", "=", "[", "]", "\n", "self", ".", "game_id", "=", "[", "]", "\n", "self", ".", "walkthrough", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.tools.collect_game_elements.OneStepCollector.request_infos": [[109, 120], ["textworld.EnvInfos"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "request_infos", "(", "cls", ")", ":", "\n", "        ", "request_infos", "=", "EnvInfos", "(", "\n", "description", "=", "True", ",", "\n", "inventory", "=", "True", ",", "\n", "admissible_commands", "=", "True", ",", "\n", "command_templates", "=", "True", ",", "\n", "max_score", "=", "True", ",", "\n", "objective", "=", "True", ",", "\n", "extras", "=", "[", "\"recipe\"", ",", "\"walkthrough\"", "]", ")", "\n", "return", "request_infos", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.tools.collect_game_elements.OneStepCollector.pre_run": [[121, 123], ["None"], "methods", ["None"], ["", "def", "pre_run", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.tools.collect_game_elements.OneStepCollector.act": [[124, 137], ["all", "collect_game_elements.OneStepCollector.game_id.append", "collect_game_elements.OneStepCollector.templates.update", "collect_game_elements.OneStepCollector.all_max_scores.append", "collect_game_elements.OneStepCollector.objectives.append", "collect_game_elements.OneStepCollector.walkthrough.append", "random.choice", "deepword.agents.base_agent.BaseAgent._compute_game_id"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.deepword.tree_memory.TreeMemory.append", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.sum_tree.SumTree.update", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.tree_memory.TreeMemory.append", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.tree_memory.TreeMemory.append", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.tree_memory.TreeMemory.append", "home.repos.pwc.inspect_result.yinxusen_deepword.agents.base_agent.BaseAgent._compute_game_id"], ["", "def", "act", "(", "self", ",", "obs", ",", "scores", ",", "dones", ",", "infos", ")", ":", "\n", "        ", "if", "all", "(", "dones", ")", ":", "\n", "            ", "return", "None", "\n", "", "self", ".", "game_id", ".", "append", "(", "BaseAgent", ".", "_compute_game_id", "(", "infos", ")", ")", "\n", "self", ".", "templates", ".", "update", "(", "infos", "[", "INFO_KEY", ".", "templates", "]", "[", "0", "]", ")", "\n", "self", ".", "total_score", "+=", "infos", "[", "INFO_KEY", ".", "max_score", "]", "[", "0", "]", "\n", "self", ".", "all_max_scores", ".", "append", "(", "infos", "[", "INFO_KEY", ".", "max_score", "]", "[", "0", "]", ")", "\n", "self", ".", "objectives", ".", "append", "(", "infos", "[", "INFO_KEY", ".", "objective", "]", "[", "0", "]", ")", "\n", "self", ".", "walkthrough", ".", "append", "(", "infos", "[", "INFO_KEY", ".", "walkthrough", "]", "[", "0", "]", ")", "\n", "# self.ingredients.update(", "\n", "#     CompetitionAgent.get_theme_words(infos[INFO_KEY.recipe][0]))", "\n", "action", "=", "random", ".", "choice", "(", "infos", "[", "INFO_KEY", ".", "actions", "]", "[", "0", "]", ")", "\n", "return", "action", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.tools.collect_game_elements.OneStepCollector.post_run": [[138, 140], ["None"], "methods", ["None"], ["", "def", "post_run", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.tools.collect_game_elements.Main.collect_floor_plans": [[163, 179], ["collect_game_elements.FPCollector", "deepword.utils.load_game_files", "collect_game_elements.run_games", "FPCollector.fp_collector.save_fps"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.deepword.utils.load_game_files", "home.repos.pwc.inspect_result.yinxusen_deepword.tools.collect_game_elements.run_games", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.floor_plan.FloorPlanCollector.save_fps"], ["    ", "@", "classmethod", "\n", "def", "collect_floor_plans", "(", "\n", "cls", ",", "save_to", ",", "game_dir", ",", "f_games", "=", "None", ",", "nb_episodes", "=", "10", ")", ":", "\n", "        ", "\"\"\"\n        Collect floor plans with games in game_dir or specified by f_games.\n\n        :param save_to: save to path, must be a npz file, e.g. floor_plan.npz\n        :param game_dir:\n        :param f_games:\n        :param nb_episodes:\n        :return:\n        \"\"\"", "\n", "agent", "=", "FPCollector", "(", ")", "\n", "game_files", "=", "load_game_files", "(", "game_dir", ",", "f_games", ")", "\n", "run_games", "(", "agent", ",", "game_files", ",", "nb_episodes", ",", "max_steps", "=", "200", ")", "\n", "agent", ".", "fp_collector", ".", "save_fps", "(", "save_to", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.tools.collect_game_elements.Main.collect_others": [[180, 198], ["collect_game_elements.OneStepCollector", "deepword.utils.load_game_files", "print", "collect_game_elements.run_games", "print", "print", "print", "print", "zip", "print", "numpy.mean", "numpy.std", "os.path.basename"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.deepword.utils.load_game_files", "home.repos.pwc.inspect_result.yinxusen_deepword.tools.collect_game_elements.run_games"], ["", "@", "classmethod", "\n", "def", "collect_others", "(", "cls", ",", "game_dir", ",", "f_games", "=", "None", ",", "nb_episodes", "=", "1", ")", ":", "\n", "        ", "agent", "=", "OneStepCollector", "(", ")", "\n", "game_files", "=", "load_game_files", "(", "game_dir", ",", "f_games", ")", "\n", "print", "(", "game_files", ")", "\n", "run_games", "(", "agent", ",", "game_files", ",", "nb_episodes", ",", "max_steps", "=", "1", ")", "\n", "print", "(", "\"ingredients:\\n\"", ",", "agent", ".", "ingredients", ")", "\n", "print", "(", "\"templates:\\n\"", ",", "agent", ".", "templates", ")", "\n", "print", "(", "\"total scores: \"", ",", "agent", ".", "total_score", ")", "\n", "print", "(", "\"mean score: {}, std: {}\"", ".", "format", "(", "\n", "np", ".", "mean", "(", "agent", ".", "all_max_scores", ")", ",", "np", ".", "std", "(", "agent", ".", "all_max_scores", ")", ")", ")", "\n", "# for gid, obj, walks in zip(", "\n", "#         agent.game_id, agent.objectives, agent.walkthrough):", "\n", "#     print(\"{}\\t{}\".format(gid, obj))", "\n", "#     print(walks)", "\n", "#     print()", "\n", "for", "fn_game", ",", "gid", "in", "zip", "(", "game_files", ",", "agent", ".", "game_id", ")", ":", "\n", "            ", "print", "(", "\"{}\\t{}\"", ".", "format", "(", "os", ".", "path", ".", "basename", "(", "fn_game", ")", ",", "gid", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.tools.collect_game_elements.contain_words": [[18, 20], ["any", "map"], "function", ["None"], ["def", "contain_words", "(", "sentence", ",", "words", ")", ":", "\n", "    ", "return", "any", "(", "map", "(", "lambda", "w", ":", "w", "in", "sentence", ",", "words", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.tools.collect_game_elements.contain_theme_words": [[22, 34], ["collect_game_elements.contain_words", "contained.append", "others.append"], "function", ["home.repos.pwc.inspect_result.yinxusen_deepword.tools.collect_game_elements.contain_words", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.tree_memory.TreeMemory.append", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.tree_memory.TreeMemory.append"], ["", "def", "contain_theme_words", "(", "theme_words", ",", "actions", ")", ":", "\n", "    ", "if", "theme_words", "is", "None", ":", "\n", "        ", "return", "actions", "\n", "", "contained", "=", "[", "]", "\n", "others", "=", "[", "]", "\n", "for", "a", "in", "actions", ":", "\n", "        ", "if", "contain_words", "(", "a", ",", "theme_words", ")", ":", "\n", "            ", "contained", ".", "append", "(", "a", ")", "\n", "", "else", ":", "\n", "            ", "others", ".", "append", "(", "a", ")", "\n", "\n", "", "", "return", "contained", ",", "others", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.tools.collect_game_elements.get_room": [[36, 44], ["re.search", "re.search.group"], "function", ["None"], ["", "def", "get_room", "(", "master", ")", ":", "\n", "    ", "room_regex", "=", "r\".*-= (.*) =-.*\"", "\n", "room_search", "=", "re", ".", "search", "(", "room_regex", ",", "master", ")", "\n", "if", "room_search", "is", "not", "None", ":", "\n", "        ", "curr_room", "=", "room_search", ".", "group", "(", "1", ")", "\n", "", "else", ":", "\n", "        ", "curr_room", "=", "None", "\n", "", "return", "curr_room", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.tools.collect_game_elements.run_games": [[142, 160], ["tqdm.tqdm", "range", "textworld.gym.register_games", "gym.make", "tqdm.tqdm", "gym.make.close", "len", "agent.request_infos", "range", "gym.make.reset", "agent.act", "len", "len", "all", "agent.act", "gym.make.step"], "function", ["home.repos.pwc.inspect_result.yinxusen_deepword.tools.collect_game_elements.OneStepCollector.request_infos", "home.repos.pwc.inspect_result.yinxusen_deepword.agents.base_agent.BaseAgent.reset", "home.repos.pwc.inspect_result.yinxusen_deepword.agents.base_agent.BaseAgent.act", "home.repos.pwc.inspect_result.yinxusen_deepword.agents.base_agent.BaseAgent.act"], ["", "", "def", "run_games", "(", "agent", ",", "game_files", ",", "nb_episodes", ",", "max_steps", ")", ":", "\n", "    ", "for", "i", "in", "tqdm", "(", "range", "(", "len", "(", "game_files", ")", ")", ")", ":", "\n", "        ", "fg", "=", "game_files", "[", "i", "]", "\n", "env_id", "=", "textworld", ".", "gym", ".", "register_games", "(", "\n", "[", "fg", "]", ",", "agent", ".", "request_infos", "(", ")", ",", "\n", "batch_size", "=", "1", ",", "\n", "max_episode_steps", "=", "max_steps", ",", "\n", "name", "=", "\"floor-plan-collector\"", ")", "\n", "env", "=", "gym", ".", "make", "(", "env_id", ")", "\n", "for", "j", "in", "tqdm", "(", "range", "(", "nb_episodes", ")", ")", ":", "\n", "            ", "obs", ",", "infos", "=", "env", ".", "reset", "(", ")", "\n", "dones", "=", "[", "False", "]", "*", "len", "(", "obs", ")", "\n", "scores", "=", "[", "0", "]", "*", "len", "(", "obs", ")", "\n", "while", "not", "all", "(", "dones", ")", ":", "\n", "                ", "action", "=", "agent", ".", "act", "(", "obs", ",", "scores", ",", "dones", ",", "infos", ")", "\n", "obs", ",", "scores", ",", "dones", ",", "infos", "=", "env", ".", "step", "(", "[", "action", "]", ")", "\n", "", "agent", ".", "act", "(", "obs", ",", "scores", ",", "dones", ",", "infos", ")", "\n", "", "env", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.tools.clean_hs2tj.clean_hs2tj": [[10, 40], ["set", "hash_states2tjs.keys", "deepword.utils.eprint", "deepword.utils.eprint", "tjs.keys", "hash_states2tjs[].keys", "hash_states2tjs.pop", "hash_states2tjs[].pop", "empty_keys.append", "len", "empty_tids.append", "len"], "function", ["home.repos.pwc.inspect_result.yinxusen_deepword.students.student_learner.CMD.set", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.utils.eprint", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.utils.eprint", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.tree_memory.TreeMemory.append", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.tree_memory.TreeMemory.append"], ["def", "clean_hs2tj", "(", "hash_states2tjs", ",", "tjs", ")", ":", "\n", "    ", "\"\"\"\n    Due to code problem, some hash_states2tjs contains states that don't have\n    tjs companions.\n    These states should be removed, otherwise the request for their companions\n    would cause error.\n\n    :param hash_states2tjs: a map from states to tjs. States are composed of\n      observation + inventory\n    :param tjs:\n    :return:\n    \"\"\"", "\n", "cnt_trashed", "=", "0", "\n", "empty_keys", "=", "[", "]", "\n", "all_tids", "=", "set", "(", "tjs", ".", "keys", "(", ")", ")", "\n", "for", "k", "in", "hash_states2tjs", ".", "keys", "(", ")", ":", "\n", "        ", "empty_tids", "=", "[", "]", "\n", "for", "tid", "in", "hash_states2tjs", "[", "k", "]", ".", "keys", "(", ")", ":", "\n", "            ", "if", "tid", "not", "in", "all_tids", ":", "\n", "                ", "empty_tids", ".", "append", "(", "tid", ")", "\n", "cnt_trashed", "+=", "len", "(", "hash_states2tjs", "[", "k", "]", "[", "tid", "]", ")", "\n", "", "", "for", "tid", "in", "empty_tids", ":", "\n", "            ", "hash_states2tjs", "[", "k", "]", ".", "pop", "(", "tid", ",", "None", ")", "\n", "", "if", "hash_states2tjs", "[", "k", "]", "==", "{", "}", ":", "# delete the dict if empty", "\n", "            ", "empty_keys", ".", "append", "(", "k", ")", "\n", "", "", "eprint", "(", "\"hs2tj deletes {} items\"", ".", "format", "(", "cnt_trashed", ")", ")", "\n", "for", "k", "in", "empty_keys", ":", "\n", "        ", "hash_states2tjs", ".", "pop", "(", "k", ",", "None", ")", "\n", "", "eprint", "(", "\"hs2tj deletes {} keys\"", ".", "format", "(", "len", "(", "empty_keys", ")", ")", ")", "\n", "return", "hash_states2tjs", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.tools.clean_hs2tj.load_snapshot": [[42, 59], ["numpy.load", "list", "range", "numpy.load", "len", "len", "len", "list"], "function", ["None"], ["", "def", "load_snapshot", "(", "raw_tjs_path", ",", "hs2tj_path", ")", ":", "\n", "    ", "trajectories", "=", "{", "}", "\n", "tjs", "=", "np", ".", "load", "(", "raw_tjs_path", ",", "allow_pickle", "=", "True", ")", "\n", "curr_tid", "=", "tjs", "[", "\"curr_tid\"", "]", "[", "0", "]", "\n", "curr_tj", "=", "list", "(", "tjs", "[", "\"curr_tj\"", "]", "[", "0", "]", ")", "\n", "tids", "=", "tjs", "[", "\"tids\"", "]", "\n", "vals", "=", "tjs", "[", "\"vals\"", "]", "\n", "assert", "len", "(", "tids", ")", "==", "len", "(", "vals", ")", ",", "\"incompatible trajectory ids and values\"", "\n", "for", "i", "in", "range", "(", "len", "(", "tids", ")", ")", ":", "\n", "        ", "trajectories", "[", "tids", "[", "i", "]", "]", "=", "list", "(", "vals", "[", "i", "]", ")", "\n", "", "if", "curr_tid", "not", "in", "trajectories", ":", "\n", "        ", "trajectories", "[", "curr_tid", "]", "=", "curr_tj", "\n", "\n", "", "hs2tj", "=", "np", ".", "load", "(", "hs2tj_path", ",", "allow_pickle", "=", "True", ")", "\n", "hash_states2tjs", "=", "hs2tj", "[", "\"hs2tj\"", "]", "[", "0", "]", "\n", "\n", "return", "trajectories", ",", "hash_states2tjs", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.tools.clean_hs2tj.clean_data": [[61, 67], ["deepword.utils.eprint", "clean_hs2tj.load_snapshot", "clean_hs2tj.clean_hs2tj", "numpy.savez", "os.path.splitext"], "function", ["home.repos.pwc.inspect_result.yinxusen_deepword.deepword.utils.eprint", "home.repos.pwc.inspect_result.yinxusen_deepword.tools.clean_hs2tj.load_snapshot", "home.repos.pwc.inspect_result.yinxusen_deepword.tools.clean_hs2tj.clean_hs2tj"], ["", "def", "clean_data", "(", "tp", ",", "hs", ")", ":", "\n", "    ", "eprint", "(", "\"cleaning\\n{}\\n{}\"", ".", "format", "(", "tp", ",", "hs", ")", ")", "\n", "hs_prefix", "=", "path", ".", "splitext", "(", "hs", ")", "[", "0", "]", "\n", "tjs", ",", "hs2tj", "=", "load_snapshot", "(", "tp", ",", "hs", ")", "\n", "cleaned_hs2tj", "=", "clean_hs2tj", "(", "hs2tj", ",", "tjs", ")", "\n", "np", ".", "savez", "(", "\"{}.clean.npz\"", ".", "format", "(", "hs_prefix", ")", ",", "hs2tj", "=", "[", "cleaned_hs2tj", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.tools.clean_hs2tj.main": [[69, 86], ["range", "combined_data_path.append", "threading.Thread", "t.start", "t.join", "os.path.join", "os.path.join"], "function", ["home.repos.pwc.inspect_result.yinxusen_deepword.deepword.tree_memory.TreeMemory.append", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.eval_games.FullDirEvalPlayer.start"], ["", "def", "main", "(", "data_path", ",", "n_data", ")", ":", "\n", "    ", "tjs_prefix", "=", "\"raw-trajectories\"", "\n", "hs2tj_prefix", "=", "\"hs2tj\"", "\n", "\n", "combined_data_path", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "n_data", ")", ":", "\n", "        ", "combined_data_path", ".", "append", "(", "\n", "(", "path", ".", "join", "(", "data_path", ",", "\"{}-{}.npz\"", ".", "format", "(", "tjs_prefix", ",", "i", ")", ")", ",", "\n", "path", ".", "join", "(", "data_path", ",", "\"{}-{}.npz\"", ".", "format", "(", "hs2tj_prefix", ",", "i", ")", ")", ")", ")", "\n", "\n", "", "threads", "=", "[", "\n", "Thread", "(", "target", "=", "clean_data", ",", "args", "=", "(", "tp", ",", "hs", ")", ")", "\n", "for", "tp", ",", "hs", "in", "combined_data_path", "]", "\n", "\n", "[", "t", ".", "start", "(", ")", "for", "t", "in", "threads", "]", "\n", "\n", "[", "t", ".", "join", "(", ")", "for", "t", "in", "threads", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.tools.read_eval_failed_reason.parse_one_game": [[5, 26], ["g_name.split"], "function", ["None"], ["def", "parse_one_game", "(", "g_name", ",", "j_game", ")", ":", "\n", "    ", "run1", "=", "j_game", "[", "\"runs\"", "]", "[", "0", "]", "\n", "run2", "=", "j_game", "[", "\"runs\"", "]", "[", "1", "]", "\n", "run_last", "=", "j_game", "[", "\"runs\"", "]", "[", "-", "1", "]", "\n", "g_type", "=", "g_name", ".", "split", "(", "\".\"", ")", "[", "0", "]", "\n", "# if run1[\"has_won\"] or run2[\"has_won\"]:", "\n", "if", "run_last", "[", "\"has_won\"", "]", ":", "\n", "        ", "return", "(", "\"{:6}\"", ".", "format", "(", "\"\"", ")", ",", "\n", "\"{:40}\"", ".", "format", "(", "\"\"", ")", ",", "\n", "\"{:3}\"", ".", "format", "(", "\"\"", ")", ",", "\n", "\"{:6}\"", ".", "format", "(", "\"\"", ")", ",", "\n", "\"{:40}\"", ".", "format", "(", "\"\"", ")", ",", "\n", "\"{:3}\"", ".", "format", "(", "\"\"", ")", ",", "\n", "\"{}\"", ".", "format", "(", "g_type", ")", ")", "\n", "", "return", "(", "\"{:6}\"", ".", "format", "(", "\"true\"", "if", "run1", "[", "\"has_won\"", "]", "else", "\"false\"", ")", ",", "\n", "\"{:40}\"", ".", "format", "(", "run1", "[", "\"commands\"", "]", "[", "-", "1", "]", "[", ":", "40", "]", ")", ",", "\n", "\"{:3d}\"", ".", "format", "(", "run1", "[", "\"steps\"", "]", ")", ",", "\n", "\"{:6}\"", ".", "format", "(", "\"true\"", "if", "run_last", "[", "\"has_won\"", "]", "else", "\"false\"", ")", ",", "\n", "\"{:40}\"", ".", "format", "(", "run_last", "[", "\"commands\"", "]", "[", "-", "1", "]", "[", ":", "40", "]", ")", ",", "\n", "\"{:3d}\"", ".", "format", "(", "run_last", "[", "\"steps\"", "]", ")", ",", "\n", "\"{}\"", ".", "format", "(", "g_type", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.tools.read_eval_failed_reason.count_failed_twice": [[28, 35], ["g_name.split"], "function", ["None"], ["", "def", "count_failed_twice", "(", "g_name", ",", "j_game", ")", ":", "\n", "    ", "run1", "=", "j_game", "[", "\"runs\"", "]", "[", "0", "]", "\n", "run2", "=", "j_game", "[", "\"runs\"", "]", "[", "1", "]", "\n", "g_type", "=", "g_name", ".", "split", "(", "\"-\"", ")", "[", "2", "]", "\n", "return", "(", "\"{:>40}\"", ".", "format", "(", "g_type", ")", ",", "\n", "\"{:6}\"", ".", "format", "(", "\"true\"", "if", "run1", "[", "\"has_won\"", "]", "else", "\"false\"", ")", ",", "\n", "\"{:6}\"", ".", "format", "(", "\"true\"", "if", "run2", "[", "\"has_won\"", "]", "else", "\"false\"", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.tools.read_eval_failed_reason.repeat_action_error": [[37, 51], ["g_name.split", "print", "print", "print"], "function", ["None"], ["", "def", "repeat_action_error", "(", "g_name", ",", "j_game", ")", ":", "\n", "    ", "run1", "=", "j_game", "[", "\"runs\"", "]", "[", "0", "]", "\n", "run2", "=", "j_game", "[", "\"runs\"", "]", "[", "1", "]", "\n", "g_type", "=", "g_name", ".", "split", "(", "\"-\"", ")", "[", "2", "]", "\n", "if", "run1", "[", "\"has_won\"", "]", "or", "run2", "[", "\"has_won\"", "]", ":", "\n", "        ", "pass", "\n", "", "else", ":", "\n", "        ", "if", "run1", "[", "\"steps\"", "]", "==", "100", ":", "\n", "            ", "print", "(", "\"{}, exceed step limit\"", ".", "format", "(", "g_type", ")", ")", "\n", "", "elif", "run1", "[", "\"commands\"", "]", "[", "-", "1", "]", "in", "run1", "[", "\"commands\"", "]", "[", ":", "-", "1", "]", ":", "\n", "            ", "print", "(", "\"{}, repeat dangerous action: {}\"", ".", "format", "(", "\n", "g_type", ",", "run1", "[", "\"commands\"", "]", "[", "-", "1", "]", ")", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"{}, unknown error: {}\"", ".", "format", "(", "g_type", ",", "run1", "[", "\"commands\"", "]", "[", "-", "1", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.tools.read_eval_failed_reason.summary_from_keys": [[53, 59], ["read_eval_failed_reason.parse_one_game", "print"], "function", ["home.repos.pwc.inspect_result.yinxusen_deepword.tools.read_eval_failed_reason.parse_one_game"], ["", "", "", "def", "summary_from_keys", "(", "keys", ",", "j_result", ")", ":", "\n", "    ", "for", "game_name", "in", "keys", ":", "\n", "        ", "game_res", "=", "j_result", "[", "\"games\"", "]", "[", "game_name", "]", "\n", "# repeat_action_error(game_name, game_res)", "\n", "res", "=", "parse_one_game", "(", "game_name", ",", "game_res", ")", "\n", "print", "(", "\" \"", ".", "join", "(", "res", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.tools.read_eval_failed_reason.main": [[61, 67], ["sorted", "read_eval_failed_reason.summary_from_keys", "open", "json.load", "list", "j_result[].keys"], "function", ["home.repos.pwc.inspect_result.yinxusen_deepword.tools.read_eval_failed_reason.summary_from_keys"], ["", "", "def", "main", "(", "f_result", ")", ":", "\n", "    ", "with", "open", "(", "f_result", ",", "\"r\"", ")", "as", "f", ":", "\n", "        ", "j_result", "=", "json", ".", "load", "(", "f", ")", "\n", "\n", "", "all_keys", "=", "sorted", "(", "list", "(", "j_result", "[", "\"games\"", "]", ".", "keys", "(", ")", ")", ")", "\n", "summary_from_keys", "(", "all_keys", ",", "j_result", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.agents.gen_drrn_agent.GenDRRNAgent.__init__": [[24, 30], ["deepword.agents.base_agent.BaseAgent.__init__", "deepword.hparams.load_hparams", "deepword.tokenizers.init_tokens", "deepword.agents.cores.PGNCore"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.models.drrn_modeling.PseudoSeq2SeqDRRN.__init__", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.hparams.load_hparams", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.tokenizers.init_tokens"], ["def", "__init__", "(", "self", ",", "hp", ",", "model_dir", ")", ":", "\n", "        ", "super", "(", "GenDRRNAgent", ",", "self", ")", ".", "__init__", "(", "hp", ",", "model_dir", ")", "\n", "gen_hp", "=", "load_hparams", "(", "\n", "fn_model_config", "=", "\"{}/hparams.json\"", ".", "format", "(", "gen_model_dir", ")", ")", "\n", "gen_hp", ",", "gen_tokenizer", "=", "init_tokens", "(", "gen_hp", ")", "\n", "self", ".", "gen_core", "=", "PGNCore", "(", "gen_hp", ",", "gen_model_dir", ",", "gen_tokenizer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.agents.gen_drrn_agent.GenDRRNAgent._init_impl": [[31, 37], ["super()._init_impl", "gen_drrn_agent.GenDRRNAgent.gen_core.set_d4eval", "gen_drrn_agent.GenDRRNAgent.gen_core.init"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.agents.base_agent.BaseAgent._init_impl", "home.repos.pwc.inspect_result.yinxusen_deepword.agents.cores.TFCore.set_d4eval", "home.repos.pwc.inspect_result.yinxusen_deepword.agents.cores.TabularCore.init"], ["", "def", "_init_impl", "(", "self", ",", "load_best", "=", "False", ",", "restore_from", "=", "None", ")", "->", "None", ":", "\n", "        ", "super", "(", "GenDRRNAgent", ",", "self", ")", ".", "_init_impl", "(", "load_best", ",", "restore_from", ")", "\n", "# colocate gen-core and core on the same GPU", "\n", "self", ".", "gen_core", ".", "set_d4eval", "(", "self", ".", "core", ".", "d4eval", ")", "\n", "self", ".", "gen_core", ".", "init", "(", "\n", "is_training", "=", "False", ",", "load_best", "=", "False", ",", "restore_from", "=", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.agents.gen_drrn_agent.GenDRRNAgent._get_admissible_actions": [[38, 43], ["gen_drrn_agent.GenDRRNAgent.tjs.fetch_last_state", "gen_drrn_agent.GenDRRNAgent.gen_core.generate_admissible_actions", "list", "set"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.deepword.trajectory.Trajectory.fetch_last_state", "home.repos.pwc.inspect_result.yinxusen_deepword.agents.cores.PGNCore.generate_admissible_actions", "home.repos.pwc.inspect_result.yinxusen_deepword.students.student_learner.CMD.set"], ["", "def", "_get_admissible_actions", "(", "self", ",", "infos", ")", ":", "\n", "        ", "trajectory", "=", "self", ".", "tjs", ".", "fetch_last_state", "(", ")", "\n", "actions", "=", "self", ".", "gen_core", ".", "generate_admissible_actions", "(", "trajectory", ")", "\n", "actions", "=", "list", "(", "set", "(", "actions", "+", "[", "ACT", ".", "look", ",", "ACT", ".", "inventory", "]", ")", ")", "\n", "return", "actions", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.agents.gen_drrn_agent.GenCompetitionDRRNAgent.__init__": [[46, 52], ["deepword.agents.competition_agent.CompetitionAgent.__init__", "deepword.hparams.load_hparams", "deepword.tokenizers.init_tokens", "deepword.agents.cores.PGNCore"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.models.drrn_modeling.PseudoSeq2SeqDRRN.__init__", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.hparams.load_hparams", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.tokenizers.init_tokens"], ["    ", "def", "__init__", "(", "self", ",", "hp", ",", "model_dir", ")", ":", "\n", "        ", "super", "(", "GenCompetitionDRRNAgent", ",", "self", ")", ".", "__init__", "(", "hp", ",", "model_dir", ")", "\n", "gen_hp", "=", "load_hparams", "(", "\n", "fn_model_config", "=", "\"{}/hparams.json\"", ".", "format", "(", "gen_model_dir", ")", ")", "\n", "gen_hp", ",", "gen_tokenizer", "=", "init_tokens", "(", "gen_hp", ")", "\n", "self", ".", "gen_core", "=", "PGNCore", "(", "gen_hp", ",", "gen_model_dir", ",", "gen_tokenizer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.agents.gen_drrn_agent.GenCompetitionDRRNAgent._init_impl": [[53, 59], ["super()._init_impl", "gen_drrn_agent.GenCompetitionDRRNAgent.gen_core.set_d4eval", "gen_drrn_agent.GenCompetitionDRRNAgent.gen_core.init"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.agents.base_agent.BaseAgent._init_impl", "home.repos.pwc.inspect_result.yinxusen_deepword.agents.cores.TFCore.set_d4eval", "home.repos.pwc.inspect_result.yinxusen_deepword.agents.cores.TabularCore.init"], ["", "def", "_init_impl", "(", "self", ",", "load_best", "=", "False", ",", "restore_from", "=", "None", ")", "->", "None", ":", "\n", "        ", "super", "(", "GenCompetitionDRRNAgent", ",", "self", ")", ".", "_init_impl", "(", "load_best", ",", "restore_from", ")", "\n", "# colocate gen-core and core on the same GPU", "\n", "self", ".", "gen_core", ".", "set_d4eval", "(", "self", ".", "core", ".", "d4eval", ")", "\n", "self", ".", "gen_core", ".", "init", "(", "\n", "is_training", "=", "False", ",", "load_best", "=", "False", ",", "restore_from", "=", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.agents.gen_drrn_agent.GenCompetitionDRRNAgent._get_admissible_actions": [[60, 65], ["gen_drrn_agent.GenCompetitionDRRNAgent.tjs.fetch_last_state", "gen_drrn_agent.GenCompetitionDRRNAgent.gen_core.generate_admissible_actions", "list", "set"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.deepword.trajectory.Trajectory.fetch_last_state", "home.repos.pwc.inspect_result.yinxusen_deepword.agents.cores.PGNCore.generate_admissible_actions", "home.repos.pwc.inspect_result.yinxusen_deepword.students.student_learner.CMD.set"], ["", "def", "_get_admissible_actions", "(", "self", ",", "infos", ")", ":", "\n", "        ", "trajectory", "=", "self", ".", "tjs", ".", "fetch_last_state", "(", ")", "\n", "actions", "=", "self", ".", "gen_core", ".", "generate_admissible_actions", "(", "trajectory", ")", "\n", "actions", "=", "list", "(", "set", "(", "actions", "+", "[", "ACT", ".", "look", ",", "ACT", ".", "inventory", "]", ")", ")", "\n", "return", "actions", "\n", "", "", ""]], "home.repos.pwc.inspect_result.yinxusen_deepword.agents.gen_agent.GenDQNAgent.__init__": [[14, 16], ["deepword.agents.base_agent.BaseAgent.__init__"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.models.drrn_modeling.PseudoSeq2SeqDRRN.__init__"], ["def", "__init__", "(", "self", ",", "hp", ",", "model_dir", ")", ":", "\n", "        ", "super", "(", "GenDQNAgent", ",", "self", ")", ".", "__init__", "(", "hp", ",", "model_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.agents.gen_agent.GenDQNAgent._prepare_other_train_data": [[17, 20], ["None"], "methods", ["None"], ["", "def", "_prepare_other_train_data", "(", "self", ",", "b_memory", ":", "List", "[", "Memolet", "]", ")", "->", "Any", ":", "\n", "        ", "action_token_ids", "=", "[", "m", ".", "token_id", "for", "m", "in", "b_memory", "]", "\n", "return", "action_token_ids", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.agents.gen_agent.GenDQNAgent._get_policy_action": [[21, 34], ["gen_agent.GenDQNAgent.tjs.fetch_last_state", "gen_agent.GenDQNAgent.core.decode_action", "gen_agent.GenDQNAgent.tokenizer.de_tokenize", "gen_agent.GenDQNAgent.debug", "deepword.agents.base_agent.ActionDesc"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.deepword.trajectory.Trajectory.fetch_last_state", "home.repos.pwc.inspect_result.yinxusen_deepword.agents.cores.GenDQNCore.decode_action", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.tokenizers.AlbertTokenizer.de_tokenize", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.log.Logging.debug"], ["", "def", "_get_policy_action", "(", "self", ",", "action_mask", ":", "np", ".", "ndarray", ")", "->", "ActionDesc", ":", "\n", "        ", "trajectory", "=", "self", ".", "tjs", ".", "fetch_last_state", "(", ")", "\n", "gen_res", "=", "self", ".", "core", ".", "decode_action", "(", "trajectory", ")", "\n", "action", "=", "self", ".", "tokenizer", ".", "de_tokenize", "(", "gen_res", ".", "ids", ")", "\n", "self", ".", "debug", "(", "\"gen action: {}\"", ".", "format", "(", "action", ")", ")", "\n", "action_desc", "=", "ActionDesc", "(", "\n", "action_type", "=", "ACT_TYPE", ".", "policy_gen", ",", "\n", "action_idx", "=", "None", ",", "\n", "token_idx", "=", "gen_res", ".", "ids", ",", "\n", "action_len", "=", "gen_res", ".", "len", ",", "\n", "action", "=", "action", ",", "\n", "q_actions", "=", "gen_res", ".", "q_action", ")", "\n", "return", "action_desc", "\n", "", "", ""]], "home.repos.pwc.inspect_result.yinxusen_deepword.agents.dsqn_agent.DSQNAgent.__init__": [[22, 27], ["deepword.agents.base_agent.BaseAgent.__init__", "dict", "multiprocessing.pool.ThreadPool"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.models.drrn_modeling.PseudoSeq2SeqDRRN.__init__"], ["def", "__init__", "(", "self", ",", "hp", ",", "model_dir", ")", ":", "\n", "        ", "super", "(", "DSQNAgent", ",", "self", ")", ".", "__init__", "(", "hp", ",", "model_dir", ")", "\n", "self", ".", "hs2tj_prefix", "=", "\"hs2tj\"", "\n", "self", ".", "hash_states2tjs", ":", "Dict", "[", "str", ",", "Dict", "[", "int", ",", "List", "[", "int", "]", "]", "]", "=", "dict", "(", ")", "\n", "self", ".", "pool_train", "=", "ThreadPool", "(", "processes", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.agents.dsqn_agent.DSQNAgent._init_hs2tj": [[28, 40], ["dict", "numpy.load", "dsqn_agent.DSQNAgent.debug", "dsqn_agent.DSQNAgent.debug"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.deepword.log.Logging.debug", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.log.Logging.debug"], ["", "def", "_init_hs2tj", "(", "\n", "self", ",", "hs2tj_path", ":", "str", ",", "\n", "with_loading", ":", "bool", "=", "True", ")", "->", "Dict", "[", "str", ",", "List", "[", "Tuple", "[", "int", ",", "int", "]", "]", "]", ":", "\n", "        ", "hash_states2tjs", "=", "dict", "(", ")", "\n", "if", "with_loading", ":", "\n", "            ", "try", ":", "\n", "                ", "hs2tj", "=", "np", ".", "load", "(", "hs2tj_path", ",", "allow_pickle", "=", "True", ")", "\n", "hash_states2tjs", "=", "hs2tj", "[", "\"hs2tj\"", "]", "[", "0", "]", "\n", "self", ".", "debug", "(", "\"load hash_states2tjs from file\"", ")", "\n", "", "except", "IOError", "as", "e", ":", "\n", "                ", "self", ".", "debug", "(", "\"load hash_states2tjs error:\\n{}\"", ".", "format", "(", "e", ")", ")", "\n", "", "", "return", "hash_states2tjs", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.agents.dsqn_agent.DSQNAgent._load_context_objs": [[41, 48], ["super()._load_context_objs", "dsqn_agent.DSQNAgent._get_context_obj_path", "dsqn_agent.DSQNAgent._init_hs2tj"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.agents.base_agent.BaseAgent._load_context_objs", "home.repos.pwc.inspect_result.yinxusen_deepword.agents.base_agent.BaseAgent._get_context_obj_path", "home.repos.pwc.inspect_result.yinxusen_deepword.agents.dsqn_agent.DSQNAgent._init_hs2tj"], ["", "def", "_load_context_objs", "(", "self", ")", ":", "\n", "# load others", "\n", "        ", "super", "(", "DSQNAgent", ",", "self", ")", ".", "_load_context_objs", "(", ")", "\n", "# load hs2tj", "\n", "hs2tj_path", "=", "self", ".", "_get_context_obj_path", "(", "self", ".", "hs2tj_prefix", ")", "\n", "self", ".", "hash_states2tjs", "=", "self", ".", "_init_hs2tj", "(", "\n", "hs2tj_path", ",", "with_loading", "=", "self", ".", "is_training", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.agents.dsqn_agent.DSQNAgent._save_context_objs": [[49, 53], ["super()._save_context_objs", "dsqn_agent.DSQNAgent._get_context_obj_new_path", "numpy.savez"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.agents.base_agent.BaseAgent._save_context_objs", "home.repos.pwc.inspect_result.yinxusen_deepword.agents.base_agent.BaseAgent._get_context_obj_new_path"], ["", "def", "_save_context_objs", "(", "self", ")", ":", "\n", "        ", "super", "(", "DSQNAgent", ",", "self", ")", ".", "_save_context_objs", "(", ")", "\n", "hs2tj_path", "=", "self", ".", "_get_context_obj_new_path", "(", "self", ".", "hs2tj_prefix", ")", "\n", "np", ".", "savez", "(", "hs2tj_path", ",", "hs2tj", "=", "[", "self", ".", "hash_states2tjs", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.agents.dsqn_agent.DSQNAgent._get_compatible_snapshot_tag": [[54, 62], ["super()._get_compatible_snapshot_tag", "set", "deepword.agents.utils.get_path_tags", "set.intersection_update", "list"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.agents.base_agent.BaseAgent._get_compatible_snapshot_tag", "home.repos.pwc.inspect_result.yinxusen_deepword.students.student_learner.CMD.set", "home.repos.pwc.inspect_result.yinxusen_deepword.agents.utils.get_path_tags"], ["", "def", "_get_compatible_snapshot_tag", "(", "self", ")", ":", "\n", "# get parent valid tags", "\n", "        ", "valid_tags", "=", "super", "(", "DSQNAgent", ",", "self", ")", ".", "_get_compatible_snapshot_tag", "(", ")", "\n", "valid_tags", "=", "set", "(", "valid_tags", ")", "\n", "# mix valid tags w/ context objs", "\n", "hs2tj_tags", "=", "get_path_tags", "(", "self", ".", "model_dir", ",", "self", ".", "hs2tj_prefix", ")", "\n", "valid_tags", ".", "intersection_update", "(", "hs2tj_tags", ")", "\n", "return", "list", "(", "valid_tags", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.agents.dsqn_agent.DSQNAgent._delete_stale_context_objs": [[63, 68], ["super()._delete_stale_context_objs", "os.remove", "dsqn_agent.DSQNAgent._get_context_obj_path_w_tag"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.agents.base_agent.BaseAgent._delete_stale_context_objs", "home.repos.pwc.inspect_result.yinxusen_deepword.agents.base_agent.BaseAgent._get_context_obj_path_w_tag"], ["", "def", "_delete_stale_context_objs", "(", "self", ")", ":", "\n", "        ", "super", "(", "DSQNAgent", ",", "self", ")", ".", "_delete_stale_context_objs", "(", ")", "\n", "if", "self", ".", "_stale_tags", "is", "not", "None", ":", "\n", "            ", "for", "tag", "in", "self", ".", "_stale_tags", ":", "\n", "                ", "remove", "(", "self", ".", "_get_context_obj_path_w_tag", "(", "self", ".", "hs2tj_prefix", ",", "tag", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.agents.dsqn_agent.DSQNAgent._clean_stale_context": [[69, 91], ["dsqn_agent.DSQNAgent.tjs.request_delete_keys", "dsqn_agent.DSQNAgent.stc.request_delete_keys", "dsqn_agent.DSQNAgent.debug", "inverse_trashed[].append", "dsqn_agent.DSQNAgent.hash_states2tjs.pop", "dsqn_agent.DSQNAgent.hash_states2tjs[].pop"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.deepword.trajectory.Trajectory.request_delete_keys", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.trajectory.Trajectory.request_delete_keys", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.log.Logging.debug", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.tree_memory.TreeMemory.append"], ["", "", "", "def", "_clean_stale_context", "(", "self", ",", "tids", ")", ":", "\n", "        ", "\"\"\"\n        We don't call super method, since we need to know trashed elements\n        for removing stale hash_state2tjs.\n        \"\"\"", "\n", "self", ".", "tjs", ".", "request_delete_keys", "(", "tids", ")", "\n", "trashed", "=", "self", ".", "stc", ".", "request_delete_keys", "(", "tids", ")", "\n", "inverse_trashed", "=", "{", "}", "\n", "for", "tid", "in", "trashed", ":", "\n", "            ", "for", "state", "in", "trashed", "[", "tid", "]", ":", "\n", "                ", "if", "state", ".", "hs", "not", "in", "inverse_trashed", ":", "\n", "                    ", "inverse_trashed", "[", "state", ".", "hs", "]", "=", "[", "]", "\n", "", "inverse_trashed", "[", "state", ".", "hs", "]", ".", "append", "(", "tid", ")", "\n", "", "", "self", ".", "debug", "(", "\"to trash: {}\"", ".", "format", "(", "inverse_trashed", ")", ")", "\n", "for", "hs", "in", "inverse_trashed", ":", "\n", "            ", "if", "hs", "not", "in", "self", ".", "hash_states2tjs", ":", "\n", "                ", "continue", "\n", "", "for", "tid", "in", "inverse_trashed", "[", "hs", "]", ":", "\n", "                ", "if", "tid", "in", "self", ".", "hash_states2tjs", "[", "hs", "]", ":", "\n", "                    ", "self", ".", "hash_states2tjs", "[", "hs", "]", ".", "pop", "(", "tid", ")", "\n", "", "", "if", "not", "self", ".", "hash_states2tjs", "[", "hs", "]", ":", "\n", "                ", "self", ".", "hash_states2tjs", ".", "pop", "(", "hs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.agents.dsqn_agent.DSQNAgent._collect_new_sample": [[92, 112], ["super()._collect_new_sample", "dsqn_agent.DSQNAgent.tjs.get_current_tid", "dsqn_agent.DSQNAgent.tjs.get_last_sid", "[].append", "dsqn_agent.DSQNAgent.stc.fetch_last_state", "dict"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.agents.base_agent.BaseAgent._collect_new_sample", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.trajectory.Trajectory.get_current_tid", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.trajectory.Trajectory.get_last_sid", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.tree_memory.TreeMemory.append", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.trajectory.Trajectory.fetch_last_state"], ["", "", "", "def", "_collect_new_sample", "(", "\n", "self", ",", "master", ",", "instant_reward", ",", "dones", ",", "infos", ")", ":", "\n", "        ", "(", "actions", ",", "actions_mask", ",", "sys_actions_mask", ",", "instant_reward", "\n", ")", "=", "super", "(", "DSQNAgent", ",", "self", ")", ".", "_collect_new_sample", "(", "\n", "master", ",", "instant_reward", ",", "dones", ",", "infos", ")", "\n", "\n", "if", "not", "dones", "[", "0", "]", ":", "\n", "            ", "state", "=", "self", ".", "stc", ".", "fetch_last_state", "(", ")", "[", "-", "1", "]", "\n", "hs", "=", "state", ".", "hs", "\n", "if", "hs", "not", "in", "self", ".", "hash_states2tjs", ":", "\n", "                ", "self", ".", "hash_states2tjs", "[", "hs", "]", "=", "dict", "(", ")", "\n", "", "last_tid", "=", "self", ".", "tjs", ".", "get_current_tid", "(", ")", "\n", "last_sid", "=", "self", ".", "tjs", ".", "get_last_sid", "(", ")", "\n", "if", "last_tid", "not", "in", "self", ".", "hash_states2tjs", "[", "hs", "]", ":", "\n", "                ", "self", ".", "hash_states2tjs", "[", "hs", "]", "[", "last_tid", "]", "=", "[", "]", "\n", "", "self", ".", "hash_states2tjs", "[", "hs", "]", "[", "last_tid", "]", ".", "append", "(", "last_sid", ")", "\n", "", "else", ":", "\n", "            ", "pass", "# final states are not considered", "\n", "\n", "", "return", "actions", ",", "actions_mask", ",", "sys_actions_mask", ",", "instant_reward", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.agents.dsqn_agent.DSQNAgent.get_snn_pairs": [[113, 155], ["deepword.agents.utils.get_snn_keys", "dsqn_agent.DSQNAgent.core.batch_trajectory2input", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "dsqn_agent.DSQNAgent.tjs.fetch_state_by_idx", "len", "len", "len", "len", "numpy.zeros", "numpy.ones", "len", "len", "len", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.agents.utils.get_snn_keys", "home.repos.pwc.inspect_result.yinxusen_deepword.agents.cores.TFCore.batch_trajectory2input", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.trajectory.Trajectory.fetch_state_by_idx"], ["", "def", "get_snn_pairs", "(", "\n", "self", ",", "batch_size", ":", "int", ")", "->", "Tuple", "[", "\n", "np", ".", "ndarray", ",", "np", ".", "ndarray", ",", "np", ".", "ndarray", ",", "np", ".", "ndarray", ",", "np", ".", "ndarray", "]", ":", "\n", "        ", "\"\"\"\n        Sample SNN pairs for SNN part training\n\n        Args:\n            batch_size: how many data points to generate. Notice that\n             batch_size * 2 data points will be generated, one half for\n             trajectory pairs with the same states; the other half for\n             trajectory pairs with different states.\n\n        Returns:\n            src: trajectories\n            src_len: length of them\n            src2: the paired trajectories\n            src2_len: length of them\n            labels: `0` for same states; `1` for different states\n        \"\"\"", "\n", "target_set", ",", "same_set", ",", "diff_set", "=", "get_snn_keys", "(", "\n", "self", ".", "hash_states2tjs", ",", "self", ".", "tjs", ",", "batch_size", ")", "\n", "\n", "trajectories", "=", "[", "\n", "self", ".", "tjs", ".", "fetch_state_by_idx", "(", "tid", ",", "sid", ")", "for", "tid", ",", "sid", "in", "\n", "target_set", "+", "same_set", "+", "diff_set", "]", "\n", "batch_src", ",", "batch_src_len", "=", "self", ".", "core", ".", "batch_trajectory2input", "(", "\n", "trajectories", ")", "\n", "tgt_src", "=", "batch_src", "[", ":", "len", "(", "target_set", ")", "]", "\n", "tgt_src_len", "=", "batch_src_len", "[", ":", "len", "(", "target_set", ")", "]", "\n", "same_src", "=", "batch_src", "[", "len", "(", "target_set", ")", ":", "len", "(", "target_set", ")", "+", "len", "(", "same_set", ")", "]", "\n", "same_src_len", "=", "batch_src_len", "[", "\n", "len", "(", "target_set", ")", ":", "len", "(", "target_set", ")", "+", "len", "(", "same_set", ")", "]", "\n", "diff_src", "=", "batch_src", "[", "-", "len", "(", "diff_set", ")", ":", "]", "\n", "diff_src_len", "=", "batch_src_len", "[", "-", "len", "(", "diff_set", ")", ":", "]", "\n", "\n", "src", "=", "np", ".", "concatenate", "(", "[", "tgt_src", ",", "tgt_src", "]", ",", "axis", "=", "0", ")", "\n", "src_len", "=", "np", ".", "concatenate", "(", "[", "tgt_src_len", ",", "tgt_src_len", "]", ",", "axis", "=", "0", ")", "\n", "src2", "=", "np", ".", "concatenate", "(", "[", "same_src", ",", "diff_src", "]", ",", "axis", "=", "0", ")", "\n", "src2_len", "=", "np", ".", "concatenate", "(", "[", "same_src_len", ",", "diff_src_len", "]", ",", "axis", "=", "0", ")", "\n", "labels", "=", "np", ".", "concatenate", "(", "\n", "[", "np", ".", "zeros", "(", "batch_size", ")", ",", "np", ".", "ones", "(", "batch_size", ")", "]", ",", "axis", "=", "0", ")", "\n", "return", "src", ",", "src_len", ",", "src2", ",", "src2_len", ",", "labels", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.agents.dsqn_agent.DSQNAgent.save_train_pairs": [[156, 186], ["numpy.savez", "src_str.append", "src2_str.append", "map", "map", "filter", "filter"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.deepword.tree_memory.TreeMemory.append", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.tree_memory.TreeMemory.append"], ["", "def", "save_train_pairs", "(", "\n", "self", ",", "t", ":", "int", ",", "src", ":", "np", ".", "ndarray", ",", "src_len", ":", "np", ".", "ndarray", ",", "\n", "src2", ":", "np", ".", "ndarray", ",", "src2_len", ":", "np", ".", "ndarray", ",", "labels", ":", "np", ".", "ndarray", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        Save SNN pairs for verification.\n\n        Args:\n            t: current training steps\n            src: trajectories\n            src_len: length of trajectories\n            src2: paired trajectories\n            src2_len: length of paired trajectories\n            labels: `0` or `1` for same or different states\n        \"\"\"", "\n", "src_str", "=", "[", "]", "\n", "for", "s", "in", "src", ":", "\n", "            ", "src_str", ".", "append", "(", "\" \"", ".", "join", "(", "\n", "map", "(", "lambda", "i", ":", "self", ".", "tokenizer", ".", "inv_vocab", "[", "i", "]", ",", "\n", "filter", "(", "lambda", "x", ":", "x", "!=", "self", ".", "hp", ".", "padding_val_id", ",", "s", ")", ")", "\n", ")", ")", "\n", "", "src2_str", "=", "[", "]", "\n", "for", "s", "in", "src2", ":", "\n", "            ", "src2_str", ".", "append", "(", "\" \"", ".", "join", "(", "\n", "map", "(", "lambda", "i", ":", "self", ".", "tokenizer", ".", "inv_vocab", "[", "i", "]", ",", "\n", "filter", "(", "lambda", "x", ":", "x", "!=", "self", ".", "hp", ".", "padding_val_id", ",", "s", ")", ")", "\n", ")", ")", "\n", "", "np", ".", "savez", "(", "\n", "\"{}/{}-{}.npz\"", ".", "format", "(", "self", ".", "model_dir", ",", "\"train-pairs\"", ",", "t", ")", ",", "\n", "src", "=", "src_str", ",", "src2", "=", "src2_str", ",", "src_len", "=", "src_len", ",", "src2_len", "=", "src2_len", ",", "\n", "labels", "=", "labels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.agents.dsqn_agent.DSQNAgent._prepare_other_train_data": [[187, 191], ["dsqn_agent.DSQNAgent.pool_train.apply_async"], "methods", ["None"], ["", "def", "_prepare_other_train_data", "(", "self", ",", "b_memory", ":", "List", "[", "Memolet", "]", ")", "->", "Any", ":", "\n", "        ", "async_snn_data", "=", "self", ".", "pool_train", ".", "apply_async", "(", "\n", "self", ".", "get_snn_pairs", ",", "args", "=", "(", "self", ".", "hp", ".", "batch_size", ",", ")", ")", "\n", "return", "async_snn_data", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.agents.dsqn_agent.TeacherAgent._collect_new_sample": [[215, 289], ["dsqn_agent.TeacherAgent.tokenizer.convert_tokens_to_ids", "dsqn_agent.TeacherAgent.tjs.append", "deepword.agents.utils.ObsInventory", "dsqn_agent.TeacherAgent.stc.append", "dsqn_agent.TeacherAgent._get_admissible_actions", "dsqn_agent.TeacherAgent.actor.extend", "dsqn_agent.TeacherAgent._prepare_actions", "dsqn_agent.TeacherAgent.actor.extend", "dsqn_agent.TeacherAgent.tokenizer.tokenize", "deepword.agents.utils.ActionMaster", "isinstance", "isinstance", "deepword.agents.utils.Memolet", "dsqn_agent.TeacherAgent.memo.append", "isinstance", "list", "list", "dsqn_agent.TeacherAgent.tjs.get_last_sid", "deepword.agents.utils.get_hash_state", "dsqn_agent.TeacherAgent.tjs.get_last_sid", "dsqn_agent.TeacherAgent.tjs.get_current_tid", "dsqn_agent.TeacherAgent.tjs.get_last_sid", "dsqn_agent.TeacherAgent._stale_tids.append"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.deepword.tokenizers.BertTokenizer.convert_tokens_to_ids", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.tree_memory.TreeMemory.append", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.tree_memory.TreeMemory.append", "home.repos.pwc.inspect_result.yinxusen_deepword.agents.base_agent.BaseAgent._get_admissible_actions", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.floor_plan.FloorPlanCollector.extend", "home.repos.pwc.inspect_result.yinxusen_deepword.agents.competition_agent.CompetitionAgent._prepare_actions", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.floor_plan.FloorPlanCollector.extend", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.tokenizers.BertTokenizer.tokenize", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.tree_memory.TreeMemory.append", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.trajectory.Trajectory.get_last_sid", "home.repos.pwc.inspect_result.yinxusen_deepword.agents.utils.get_hash_state", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.trajectory.Trajectory.get_last_sid", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.trajectory.Trajectory.get_current_tid", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.trajectory.Trajectory.get_last_sid", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.tree_memory.TreeMemory.append"], ["def", "_collect_new_sample", "(", "\n", "self", ",", "master", ":", "str", ",", "instant_reward", ":", "float", ",", "dones", ":", "List", "[", "bool", "]", ",", "\n", "infos", ":", "Dict", "[", "str", ",", "List", "[", "Any", "]", "]", ")", "->", "Tuple", "[", "\n", "List", "[", "str", "]", ",", "np", ".", "ndarray", ",", "np", ".", "ndarray", ",", "float", "]", ":", "\n", "        ", "\"\"\"\n        This function is copied from the BaseAgent.\n        The only change is to only record random-walk actions and policy-drrn\n        actions into memory.\n        \"\"\"", "\n", "\n", "master_tokens", "=", "self", ".", "tokenizer", ".", "convert_tokens_to_ids", "(", "\n", "self", ".", "tokenizer", ".", "tokenize", "(", "master", ")", ")", "\n", "if", "self", ".", "_last_action", "is", "not", "None", ":", "\n", "            ", "if", "self", ".", "hp", ".", "action_padding_in_tj", ":", "\n", "                ", "action_tokens", "=", "list", "(", "self", ".", "_last_action", ".", "token_idx", ")", "\n", "", "else", ":", "# trim action ids to its actual length", "\n", "                ", "action_tokens", "=", "list", "(", "\n", "self", ".", "_last_action", ".", "token_idx", "[", ":", "self", ".", "_last_action", ".", "action_len", "]", ")", "\n", "", "", "else", ":", "\n", "            ", "action_tokens", "=", "[", "]", "\n", "\n", "", "self", ".", "tjs", ".", "append", "(", "ActionMaster", "(", "\n", "action_ids", "=", "action_tokens", ",", "\n", "master_ids", "=", "master_tokens", ",", "\n", "objective_ids", "=", "self", ".", "_objective_ids", ",", "\n", "action", "=", "self", ".", "_last_action", ".", "action", "if", "self", ".", "_last_action", "else", "\"\"", ",", "\n", "master", "=", "master", ")", ")", "\n", "\n", "obs", "=", "infos", "[", "INFO_KEY", ".", "desc", "]", "[", "0", "]", "\n", "inv", "=", "infos", "[", "INFO_KEY", ".", "inventory", "]", "[", "0", "]", "\n", "# TODO: need to inform user if obs and inv are empty", "\n", "# TODO: otherwise, the DSQN-related experiments are wrong", "\n", "if", "not", "isinstance", "(", "obs", ",", "str", ")", ":", "\n", "            ", "obs", "=", "\"\"", "\n", "", "if", "not", "isinstance", "(", "inv", ",", "str", ")", ":", "\n", "            ", "inv", "=", "\"\"", "\n", "", "state", "=", "ObsInventory", "(", "\n", "obs", "=", "obs", ",", "\n", "inventory", "=", "inv", ",", "\n", "sid", "=", "self", ".", "tjs", ".", "get_last_sid", "(", ")", ",", "\n", "hs", "=", "get_hash_state", "(", "obs", ",", "inv", ")", ")", "\n", "self", ".", "stc", ".", "append", "(", "state", ")", "\n", "\n", "admissible_actions", "=", "self", ".", "_get_admissible_actions", "(", "infos", ")", "\n", "sys_action_mask", "=", "self", ".", "actor", ".", "extend", "(", "admissible_actions", ")", "\n", "effective_actions", "=", "self", ".", "_prepare_actions", "(", "admissible_actions", ")", "\n", "action_mask", "=", "self", ".", "actor", ".", "extend", "(", "effective_actions", ")", "\n", "\n", "# TODO: a better architecture to avoid copy the whole function?", "\n", "if", "(", "self", ".", "tjs", ".", "get_last_sid", "(", ")", ">", "0", "\n", "and", "self", ".", "_last_action", ".", "action_type", "\n", "in", "{", "ACT_TYPE", ".", "policy_drrn", ",", "ACT_TYPE", ".", "rnd", "}", ")", ":", "\n", "            ", "memo_let", "=", "Memolet", "(", "\n", "tid", "=", "self", ".", "tjs", ".", "get_current_tid", "(", ")", ",", "\n", "sid", "=", "self", ".", "tjs", ".", "get_last_sid", "(", ")", ",", "\n", "gid", "=", "self", ".", "game_id", ",", "\n", "aid", "=", "self", ".", "_last_action", ".", "action_idx", ",", "\n", "token_id", "=", "self", ".", "_last_action", ".", "token_idx", ",", "\n", "a_len", "=", "self", ".", "_last_action", ".", "action_len", ",", "\n", "a_type", "=", "self", ".", "_last_action", ".", "action_type", ",", "\n", "reward", "=", "instant_reward", ",", "\n", "is_terminal", "=", "dones", "[", "0", "]", ",", "\n", "action_mask", "=", "self", ".", "_last_action_mask", ",", "\n", "sys_action_mask", "=", "self", ".", "_last_sys_action_mask", ",", "\n", "next_action_mask", "=", "action_mask", ",", "\n", "next_sys_action_mask", "=", "sys_action_mask", ",", "\n", "q_actions", "=", "self", ".", "_last_action", ".", "q_actions", "\n", ")", "\n", "original_data", "=", "self", ".", "memo", ".", "append", "(", "memo_let", ")", "\n", "if", "isinstance", "(", "original_data", ",", "Memolet", ")", ":", "\n", "                ", "if", "original_data", ".", "is_terminal", ":", "\n", "                    ", "self", ".", "_stale_tids", ".", "append", "(", "original_data", ".", "tid", ")", "\n", "\n", "", "", "", "return", "effective_actions", ",", "action_mask", ",", "sys_action_mask", ",", "instant_reward", "\n", "", "", ""]], "home.repos.pwc.inspect_result.yinxusen_deepword.agents.zork_agent.ZorkAgent.__init__": [[14, 19], ["deepword.agents.base_agent.BaseAgent.__init__", "a.lower", "deepword.utils.load_actions"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.models.drrn_modeling.PseudoSeq2SeqDRRN.__init__", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.utils.load_actions"], ["def", "__init__", "(", "self", ",", "hp", ",", "model_dir", ")", ":", "\n", "        ", "super", "(", "ZorkAgent", ",", "self", ")", ".", "__init__", "(", "hp", ",", "model_dir", ")", "\n", "assert", "self", ".", "hp", ".", "action_file", "is", "not", "None", ",", "\"action file is needed\"", "\n", "self", ".", "loaded_actions", ":", "List", "[", "str", "]", "=", "[", "\n", "a", ".", "lower", "(", ")", "for", "a", "in", "load_actions", "(", "self", ".", "hp", ".", "action_file", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.agents.zork_agent.ZorkAgent._get_admissible_actions": [[20, 30], ["None"], "methods", ["None"], ["", "def", "_get_admissible_actions", "(", "self", ",", "infos", ")", ":", "\n", "        ", "\"\"\"\n        We add inventory and look, in case that the game doesn't provide these\n        two key actions.\n        TODO: original code for playing Zork doesn't have \"look\"\n        TODO: for DQN agent, the order of actions matters, make sure not using\n            set or other operators that changing orders.\n        \"\"\"", "\n", "admissible_actions", "=", "self", ".", "loaded_actions", "\n", "return", "admissible_actions", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.agents.zork_agent.ZorkAgent.read_expert_guides": [[31, 36], ["open", "x.strip", "f.readlines"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "read_expert_guides", "(", "cls", ",", "fn_expert_guides", ")", ":", "\n", "        ", "with", "open", "(", "fn_expert_guides", ",", "\"r\"", ")", "as", "f", ":", "\n", "            ", "lines", "=", "[", "x", ".", "strip", "(", ")", "for", "x", "in", "f", ".", "readlines", "(", ")", "]", "\n", "", "return", "lines", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.agents.zork_agent.ZorkAgent._start_episode_impl": [[37, 44], ["super()._start_episode_impl", "zork_agent.ZorkAgent.read_expert_guides"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.agents.competition_agent.CompetitionAgent._start_episode_impl", "home.repos.pwc.inspect_result.yinxusen_deepword.agents.zork_agent.ZorkAgent.read_expert_guides"], ["", "def", "_start_episode_impl", "(", "self", ",", "obs", ",", "infos", ")", ":", "\n", "        ", "super", "(", "ZorkAgent", ",", "self", ")", ".", "_start_episode_impl", "(", "obs", ",", "infos", ")", "\n", "# load Zork walkthrough", "\n", "if", "self", ".", "hp", ".", "walkthrough_guided_exploration", ":", "\n", "            ", "self", ".", "_walkthrough", "=", "self", ".", "read_expert_guides", "(", "\n", "conventions", ".", "zork1_walkthrough", ")", "\n", "self", ".", "_continue_walkthrough", "=", "True", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.yinxusen_deepword.agents.base_agent.BaseAgent.__init__": [[35, 105], ["deepword.agents.utils.Logging.__init__", "deepword.tokenizers.init_tokens", "base_agent.BaseAgent.info", "deepword.utils.core_name2clazz", "deepword.utils.core_name2clazz.", "deepword.agents.utils.LinearDecayedEPS", "deepword.hparams.output_hparams", "base_agent.BaseAgent.load_objectives", "dict"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.models.drrn_modeling.PseudoSeq2SeqDRRN.__init__", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.tokenizers.init_tokens", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.log.Logging.info", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.utils.core_name2clazz", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.hparams.output_hparams", "home.repos.pwc.inspect_result.yinxusen_deepword.agents.base_agent.BaseAgent.load_objectives"], ["def", "__init__", "(", "self", ",", "hp", ":", "HParams", ",", "model_dir", ":", "str", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        Initialize a base agent\n\n        Args:\n            hp: hyper-parameters, refer to :py:mod:`deepword.hparams`\n            model_dir: path to model dir\n        \"\"\"", "\n", "super", "(", "BaseAgent", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "model_dir", "=", "model_dir", "\n", "\n", "self", ".", "tjs_prefix", "=", "\"trajectories\"", "\n", "self", ".", "action_prefix", "=", "\"actions\"", "\n", "self", ".", "memo_prefix", "=", "\"memo\"", "\n", "self", ".", "fp_prefix", "=", "\"floor_plan\"", "\n", "self", ".", "stc_prefix", "=", "\"state_text\"", "\n", "\n", "self", ".", "inv_direction", "=", "{", "\n", "ACT", ".", "gs", ":", "ACT", ".", "gn", ",", "ACT", ".", "gn", ":", "ACT", ".", "gs", ",", "\n", "ACT", ".", "ge", ":", "ACT", ".", "gw", ",", "ACT", ".", "gw", ":", "ACT", ".", "ge", "}", "\n", "\n", "self", ".", "hp", ",", "self", ".", "tokenizer", "=", "init_tokens", "(", "hp", ")", "\n", "self", ".", "info", "(", "output_hparams", "(", "self", ".", "hp", ")", ")", "\n", "\n", "core_class", "=", "core_name2clazz", "(", "self", ".", "hp", ".", "core_clazz", ")", "\n", "self", ".", "core", "=", "core_class", "(", "self", ".", "hp", ",", "self", ".", "model_dir", ")", "\n", "\n", "self", ".", "tjs", ":", "Optional", "[", "Trajectory", "[", "ActionMaster", "]", "]", "=", "None", "\n", "self", ".", "memo", ":", "Optional", "[", "TreeMemory", "]", "=", "None", "\n", "self", ".", "actor", ":", "Optional", "[", "ActionCollector", "]", "=", "None", "\n", "self", ".", "floor_plan", ":", "Optional", "[", "FloorPlanCollector", "]", "=", "None", "\n", "self", ".", "stc", ":", "Optional", "[", "Trajectory", "[", "ObsInventory", "]", "]", "=", "None", "\n", "\n", "self", ".", "_initialized", ":", "bool", "=", "False", "\n", "self", ".", "_episode_has_started", ":", "bool", "=", "False", "\n", "self", ".", "total_t", ":", "int", "=", "0", "\n", "self", ".", "in_game_t", ":", "int", "=", "0", "\n", "# eps decaying test for all-tiers", "\n", "# self.eps_getter = ScannerDecayEPS(", "\n", "#     decay_step=10000000, decay_range=1000000)", "\n", "self", ".", "eps_getter", "=", "LinearDecayedEPS", "(", "\n", "decay_step", "=", "self", ".", "hp", ".", "annealing_eps_t", ",", "\n", "init_eps", "=", "self", ".", "hp", ".", "init_eps", ",", "final_eps", "=", "self", ".", "hp", ".", "final_eps", ")", "\n", "self", ".", "eps", ":", "float", "=", "0.", "\n", "self", ".", "is_training", ":", "bool", "=", "True", "\n", "self", ".", "_stale_tids", ":", "List", "[", "int", "]", "=", "[", "]", "\n", "self", ".", "_last_action_mask", ":", "Optional", "[", "np", ".", "ndarray", "]", "=", "None", "\n", "self", ".", "_last_sys_action_mask", ":", "Optional", "[", "np", ".", "ndarray", "]", "=", "None", "\n", "self", ".", "_last_action", ":", "Optional", "[", "ActionDesc", "]", "=", "None", "\n", "self", ".", "_cumulative_score", "=", "0", "\n", "self", ".", "_cumulative_penalty", "=", "0", "\n", "self", ".", "_prev_last_action", ":", "Optional", "[", "str", "]", "=", "None", "\n", "self", ".", "_prev_master", ":", "Optional", "[", "str", "]", "=", "None", "\n", "self", ".", "_prev_place", ":", "Optional", "[", "str", "]", "=", "None", "\n", "self", ".", "_curr_place", ":", "Optional", "[", "str", "]", "=", "None", "\n", "self", ".", "game_id", ":", "Optional", "[", "str", "]", "=", "None", "\n", "self", ".", "_cnt_action", ":", "Optional", "[", "Dict", "[", "int", ",", "float", "]", "]", "=", "None", "\n", "self", ".", "_largest_valid_tag", "=", "0", "\n", "self", ".", "_stale_tags", ":", "Optional", "[", "List", "[", "int", "]", "]", "=", "None", "\n", "self", ".", "_positive_scores", "=", "0", "\n", "self", ".", "_negative_scores", "=", "0", "\n", "self", ".", "_objective", "=", "\"\"", "\n", "self", ".", "_objective_ids", "=", "[", "]", "\n", "self", ".", "_walkthrough", "=", "[", "]", "\n", "self", ".", "_continue_walkthrough", "=", "False", "\n", "if", "self", ".", "hp", ".", "append_objective_to_tj", ":", "\n", "            ", "self", ".", "_loaded_objectives", "=", "self", ".", "load_objectives", "(", "\n", "conventions", ".", "objective_file", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "_loaded_objectives", "=", "dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.agents.base_agent.BaseAgent.load_objectives": [[106, 112], ["open", "dict", "x.strip().split", "f.readlines", "x.strip"], "methods", ["None"], ["", "", "@", "classmethod", "\n", "def", "load_objectives", "(", "cls", ",", "fn_objectives", ")", ":", "\n", "        ", "with", "open", "(", "fn_objectives", ",", "\"r\"", ")", "as", "f", ":", "\n", "            ", "objectives", "=", "[", "x", ".", "strip", "(", ")", ".", "split", "(", "\"\\t\"", ")", "for", "x", "in", "f", ".", "readlines", "(", ")", "]", "\n", "objectives", "=", "dict", "(", "[", "(", "x", "[", "0", "]", ",", "(", "x", "[", "1", "]", ",", "x", "[", "2", "]", ")", ")", "for", "x", "in", "objectives", "]", ")", "\n", "", "return", "objectives", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.agents.base_agent.BaseAgent._clip_reward": [[113, 117], ["max", "min"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "_clip_reward", "(", "cls", ",", "reward", ":", "float", ")", "->", "float", ":", "\n", "        ", "\"\"\"clip reward into [-1, 1]\"\"\"", "\n", "return", "max", "(", "min", "(", "reward", ",", "1", ")", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.agents.base_agent.BaseAgent._get_room_name": [[118, 133], ["re.search", "re.search.group().lower", "re.search.group"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "_get_room_name", "(", "cls", ",", "master", ":", "str", ")", "->", "Optional", "[", "str", "]", ":", "\n", "        ", "\"\"\"\n        Extract and lower room name.\n        Return None if not exist.\n        :param master:\n        :return:\n        \"\"\"", "\n", "room_regex", "=", "r\"^\\s*-= (.*) =-.*\"", "\n", "room_search", "=", "re", ".", "search", "(", "room_regex", ",", "master", ")", "\n", "if", "room_search", "is", "not", "None", ":", "\n", "            ", "room_name", "=", "room_search", ".", "group", "(", "1", ")", ".", "lower", "(", ")", "\n", "", "else", ":", "\n", "            ", "room_name", "=", "None", "\n", "", "return", "room_name", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.agents.base_agent.BaseAgent._walkthrough_prob_per_step": [[134, 148], ["numpy.exp", "numpy.log"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "_walkthrough_prob_per_step", "(", "\n", "cls", ",", "n_steps", ":", "int", ",", "prob_complete_walkthrough", ":", "float", ")", "->", "float", ":", "\n", "        ", "\"\"\"\n        compute probability of using walkthrough per step\n\n        Args:\n            n_steps: number steps of walkthrough\n            prob_complete_walkthrough: the probability of completing walkthrough\n\n        Returns: probability of using walkthrough per step\n        \"\"\"", "\n", "assert", "n_steps", ">", "0", ",", "\"walkthrough steps should larger than 0\"", "\n", "return", "np", ".", "exp", "(", "(", "1", "/", "n_steps", ")", "*", "np", ".", "log", "(", "prob_complete_walkthrough", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.agents.base_agent.BaseAgent.select_additional_infos": [[149, 164], ["textworld.EnvInfos"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "select_additional_infos", "(", "cls", ")", "->", "EnvInfos", ":", "\n", "        ", "\"\"\"\n        additional information needed when playing the game\n        requested infos here are required to run the Agent\n        \"\"\"", "\n", "return", "EnvInfos", "(", "\n", "description", "=", "True", ",", "\n", "inventory", "=", "True", ",", "\n", "max_score", "=", "True", ",", "\n", "won", "=", "True", ",", "\n", "lost", "=", "True", ",", "\n", "admissible_commands", "=", "True", ",", "\n", "objective", "=", "True", ",", "\n", "extras", "=", "[", "\"walkthrough\"", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.agents.base_agent.BaseAgent._get_admissible_actions": [[165, 176], ["list", "a.lower", "set"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.students.student_learner.CMD.set"], ["", "@", "classmethod", "\n", "def", "_get_admissible_actions", "(", "\n", "cls", ",", "infos", ":", "Dict", "[", "str", ",", "List", "[", "Any", "]", "]", ")", "->", "List", "[", "str", "]", ":", "\n", "        ", "\"\"\"\n        We add inventory and look, in case that the game doesn't provide these\n        two key actions.\n        \"\"\"", "\n", "# system provided admissible actions", "\n", "sys_actions", "=", "[", "a", ".", "lower", "(", ")", "for", "a", "in", "infos", "[", "INFO_KEY", ".", "actions", "]", "[", "0", "]", "]", "\n", "admissible_actions", "=", "list", "(", "set", "(", "sys_actions", ")", "|", "{", "ACT", ".", "inventory", ",", "ACT", ".", "look", "}", ")", "\n", "return", "admissible_actions", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.agents.base_agent.BaseAgent._compute_game_id": [[179, 186], ["deepword.utils.get_hash"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.deepword.utils.get_hash"], ["", "@", "classmethod", "\n", "def", "_compute_game_id", "(", "cls", ",", "infos", ":", "Dict", "[", "str", ",", "List", "[", "Any", "]", "]", ")", "->", "str", ":", "\n", "        ", "assert", "INFO_KEY", ".", "desc", "in", "infos", ",", "\"request description is required\"", "\n", "assert", "INFO_KEY", ".", "inventory", "in", "infos", ",", "\"request inventory is required\"", "\n", "starter", "=", "\"{}\\n{}\"", ".", "format", "(", "\n", "infos", "[", "INFO_KEY", ".", "desc", "]", "[", "0", "]", ",", "infos", "[", "INFO_KEY", ".", "inventory", "]", "[", "0", "]", ")", "\n", "return", "get_hash", "(", "starter", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.agents.base_agent.BaseAgent._init_actions": [[187, 201], ["deepword.action.ActionCollector", "deepword.action.ActionCollector.load_actions", "base_agent.BaseAgent.info"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.deepword.utils.load_actions", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.log.Logging.info"], ["", "def", "_init_actions", "(", "\n", "self", ",", "hp", ":", "HParams", ",", "tokenizer", ":", "Tokenizer", ",", "action_path", ":", "str", ",", "\n", "with_loading", "=", "True", ")", "->", "ActionCollector", ":", "\n", "        ", "action_collector", "=", "ActionCollector", "(", "\n", "tokenizer", "=", "tokenizer", ",", "\n", "n_tokens", "=", "hp", ".", "n_tokens_per_action", ",", "\n", "unk_val_id", "=", "hp", ".", "unk_val_id", ",", "\n", "padding_val_id", "=", "hp", ".", "padding_val_id", ")", "\n", "if", "with_loading", ":", "\n", "            ", "try", ":", "\n", "                ", "action_collector", ".", "load_actions", "(", "action_path", ")", "\n", "", "except", "IOError", "as", "e", ":", "\n", "                ", "self", ".", "info", "(", "\"load actions error: \\n{}\"", ".", "format", "(", "e", ")", ")", "\n", "", "", "return", "action_collector", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.agents.base_agent.BaseAgent._init_trajectory": [[202, 211], ["deepword.trajectory.Trajectory", "deepword.trajectory.Trajectory.load_tjs", "base_agent.BaseAgent.info"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.deepword.trajectory.Trajectory.load_tjs", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.log.Logging.info"], ["", "def", "_init_trajectory", "(", "\n", "self", ",", "hp", ":", "HParams", ",", "tjs_path", ":", "str", ",", "with_loading", "=", "True", ")", "->", "Trajectory", ":", "\n", "        ", "tjs", "=", "Trajectory", "(", "num_turns", "=", "hp", ".", "num_turns", ")", "\n", "if", "with_loading", ":", "\n", "            ", "try", ":", "\n", "                ", "tjs", ".", "load_tjs", "(", "tjs_path", ")", "\n", "", "except", "IOError", "as", "e", ":", "\n", "                ", "self", ".", "info", "(", "\"load trajectory error: \\n{}\"", ".", "format", "(", "e", ")", ")", "\n", "", "", "return", "tjs", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.agents.base_agent.BaseAgent._init_state_text": [[212, 221], ["deepword.trajectory.Trajectory", "deepword.trajectory.Trajectory.load_tjs", "base_agent.BaseAgent.info"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.deepword.trajectory.Trajectory.load_tjs", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.log.Logging.info"], ["", "def", "_init_state_text", "(", "self", ",", "state_text_path", ",", "with_loading", "=", "True", ")", ":", "\n", "# num_turns = 1, we only need the most recent ObsInventory", "\n", "        ", "stc", "=", "Trajectory", "(", "num_turns", "=", "1", ")", "\n", "if", "with_loading", ":", "\n", "            ", "try", ":", "\n", "                ", "stc", ".", "load_tjs", "(", "state_text_path", ")", "\n", "", "except", "IOError", "as", "e", ":", "\n", "                ", "self", ".", "info", "(", "\"load trajectory error: \\n{}\"", ".", "format", "(", "e", ")", ")", "\n", "", "", "return", "stc", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.agents.base_agent.BaseAgent._init_memo": [[222, 231], ["deepword.tree_memory.TreeMemory", "deepword.tree_memory.TreeMemory.load_memo", "base_agent.BaseAgent.info"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.deepword.tree_memory.TreeMemory.load_memo", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.log.Logging.info"], ["", "def", "_init_memo", "(", "\n", "self", ",", "hp", ":", "HParams", ",", "memo_path", ":", "str", ",", "with_loading", "=", "True", ")", "->", "TreeMemory", ":", "\n", "        ", "memory", "=", "TreeMemory", "(", "capacity", "=", "hp", ".", "replay_mem", ")", "\n", "if", "with_loading", ":", "\n", "            ", "try", ":", "\n", "                ", "memory", ".", "load_memo", "(", "memo_path", ")", "\n", "", "except", "IOError", "as", "e", ":", "\n", "                ", "self", ".", "info", "(", "\"load memory error: \\n{}\"", ".", "format", "(", "e", ")", ")", "\n", "", "", "return", "memory", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.agents.base_agent.BaseAgent._init_floor_plan": [[232, 241], ["deepword.floor_plan.FloorPlanCollector", "deepword.floor_plan.FloorPlanCollector.load_fps", "base_agent.BaseAgent.info"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.deepword.floor_plan.FloorPlanCollector.load_fps", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.log.Logging.info"], ["", "def", "_init_floor_plan", "(", "\n", "self", ",", "fp_path", ":", "str", ",", "with_loading", "=", "True", ")", "->", "FloorPlanCollector", ":", "\n", "        ", "fp", "=", "FloorPlanCollector", "(", ")", "\n", "if", "with_loading", ":", "\n", "            ", "try", ":", "\n", "                ", "fp", ".", "load_fps", "(", "fp_path", ")", "\n", "", "except", "IOError", "as", "e", ":", "\n", "                ", "self", ".", "info", "(", "\"load floor plan error: \\n{}\"", ".", "format", "(", "e", ")", ")", "\n", "", "", "return", "fp", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.agents.base_agent.BaseAgent._get_a_random_action": [[242, 257], ["numpy.random.choice", "deepword.agents.utils.ActionDesc"], "methods", ["None"], ["", "def", "_get_a_random_action", "(", "self", ",", "action_mask", ":", "np", ".", "ndarray", ")", "->", "ActionDesc", ":", "\n", "        ", "\"\"\"\n        Select a random action according to action mask\n        :param action_mask:\n        :return:\n        \"\"\"", "\n", "action_idx", "=", "np", ".", "random", ".", "choice", "(", "action_mask", ")", "\n", "action_desc", "=", "ActionDesc", "(", "\n", "action_type", "=", "ACT_TYPE", ".", "rnd", ",", "\n", "action_idx", "=", "action_idx", ",", "\n", "token_idx", "=", "self", ".", "actor", ".", "action_matrix", "[", "action_idx", "]", ",", "\n", "action_len", "=", "self", ".", "actor", ".", "action_len", "[", "action_idx", "]", ",", "\n", "action", "=", "self", ".", "actor", ".", "actions", "[", "action_idx", "]", ",", "\n", "q_actions", "=", "None", ")", "\n", "return", "action_desc", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.agents.base_agent.BaseAgent.train": [[258, 264], ["base_agent.BaseAgent._init"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.agents.base_agent.BaseAgent._init"], ["", "def", "train", "(", "self", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        call train() before performing training\n        \"\"\"", "\n", "self", ".", "is_training", "=", "True", "\n", "self", ".", "_init", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.agents.base_agent.BaseAgent.eval": [[265, 274], ["base_agent.BaseAgent._init"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.agents.base_agent.BaseAgent._init"], ["", "def", "eval", "(", "self", ",", "load_best", "=", "True", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        call eval() before performing evaluation\n\n        Args:\n            load_best: load from the best weights, otherwise from last weights\n        \"\"\"", "\n", "self", ".", "is_training", "=", "False", "\n", "self", ".", "_init", "(", "load_best", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.agents.base_agent.BaseAgent.reset": [[275, 286], ["base_agent.BaseAgent._init"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.agents.base_agent.BaseAgent._init"], ["", "def", "reset", "(", "self", ",", "restore_from", ":", "Optional", "[", "str", "]", "=", "None", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        reset is only used for evaluation during training\n        do not use it at anywhere else.\n\n        Args:\n            restore_from: where to restore the model, `None` goes to default\n        \"\"\"", "\n", "self", ".", "is_training", "=", "False", "\n", "self", ".", "_initialized", "=", "False", "\n", "self", ".", "_init", "(", "load_best", "=", "False", ",", "restore_from", "=", "restore_from", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.agents.base_agent.BaseAgent._init": [[287, 297], ["base_agent.BaseAgent._init_impl", "base_agent.BaseAgent.error"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.agents.base_agent.BaseAgent._init_impl", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.log.Logging.error"], ["", "def", "_init", "(", "\n", "self", ",", "load_best", "=", "False", ",", "restore_from", ":", "Optional", "[", "str", "]", "=", "None", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        load actions, trajectories, memory, model, etc.\n        \"\"\"", "\n", "if", "self", ".", "_initialized", ":", "\n", "            ", "self", ".", "error", "(", "\"the agent was initialized\"", ")", "\n", "return", "\n", "", "self", ".", "_init_impl", "(", "load_best", ",", "restore_from", ")", "\n", "self", ".", "_initialized", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.agents.base_agent.BaseAgent._get_context_obj_path_w_tag": [[298, 301], ["os.path.join"], "methods", ["None"], ["", "def", "_get_context_obj_path_w_tag", "(", "self", ",", "prefix", ":", "str", ",", "tag", ":", "int", ")", "->", "str", ":", "\n", "        ", "return", "path", ".", "join", "(", "\n", "self", ".", "model_dir", ",", "\"{}-{}.npz\"", ".", "format", "(", "prefix", ",", "tag", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.agents.base_agent.BaseAgent._get_context_obj_path": [[302, 304], ["base_agent.BaseAgent._get_context_obj_path_w_tag"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.agents.base_agent.BaseAgent._get_context_obj_path_w_tag"], ["", "def", "_get_context_obj_path", "(", "self", ",", "prefix", ":", "str", ")", "->", "str", ":", "\n", "        ", "return", "self", ".", "_get_context_obj_path_w_tag", "(", "prefix", ",", "self", ".", "_largest_valid_tag", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.agents.base_agent.BaseAgent._get_context_obj_new_path": [[305, 307], ["base_agent.BaseAgent._get_context_obj_path_w_tag"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.agents.base_agent.BaseAgent._get_context_obj_path_w_tag"], ["", "def", "_get_context_obj_new_path", "(", "self", ",", "prefix", ":", "str", ")", "->", "str", ":", "\n", "        ", "return", "self", ".", "_get_context_obj_path_w_tag", "(", "prefix", ",", "self", ".", "total_t", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.agents.base_agent.BaseAgent._load_context_objs": [[308, 331], ["base_agent.BaseAgent._get_compatible_snapshot_tag", "base_agent.BaseAgent.info", "base_agent.BaseAgent._get_context_obj_path", "base_agent.BaseAgent._get_context_obj_path", "base_agent.BaseAgent._get_context_obj_path", "base_agent.BaseAgent._get_context_obj_path", "base_agent.BaseAgent._get_context_obj_path", "base_agent.BaseAgent._init_actions", "base_agent.BaseAgent._init_trajectory", "base_agent.BaseAgent._init_memo", "base_agent.BaseAgent._init_floor_plan", "base_agent.BaseAgent._init_state_text", "max", "len"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.agents.base_agent.BaseAgent._get_compatible_snapshot_tag", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.log.Logging.info", "home.repos.pwc.inspect_result.yinxusen_deepword.agents.base_agent.BaseAgent._get_context_obj_path", "home.repos.pwc.inspect_result.yinxusen_deepword.agents.base_agent.BaseAgent._get_context_obj_path", "home.repos.pwc.inspect_result.yinxusen_deepword.agents.base_agent.BaseAgent._get_context_obj_path", "home.repos.pwc.inspect_result.yinxusen_deepword.agents.base_agent.BaseAgent._get_context_obj_path", "home.repos.pwc.inspect_result.yinxusen_deepword.agents.base_agent.BaseAgent._get_context_obj_path", "home.repos.pwc.inspect_result.yinxusen_deepword.agents.base_agent.BaseAgent._init_actions", "home.repos.pwc.inspect_result.yinxusen_deepword.agents.base_agent.BaseAgent._init_trajectory", "home.repos.pwc.inspect_result.yinxusen_deepword.agents.base_agent.BaseAgent._init_memo", "home.repos.pwc.inspect_result.yinxusen_deepword.agents.base_agent.BaseAgent._init_floor_plan", "home.repos.pwc.inspect_result.yinxusen_deepword.agents.base_agent.BaseAgent._init_state_text"], ["", "def", "_load_context_objs", "(", "self", ")", "->", "None", ":", "\n", "        ", "valid_tags", "=", "self", ".", "_get_compatible_snapshot_tag", "(", ")", "\n", "self", ".", "_largest_valid_tag", "=", "max", "(", "valid_tags", ")", "if", "len", "(", "valid_tags", ")", "!=", "0", "else", "0", "\n", "self", ".", "info", "(", "\"try to load from tag: {}\"", ".", "format", "(", "self", ".", "_largest_valid_tag", ")", ")", "\n", "\n", "action_path", "=", "self", ".", "_get_context_obj_path", "(", "self", ".", "action_prefix", ")", "\n", "tjs_path", "=", "self", ".", "_get_context_obj_path", "(", "self", ".", "tjs_prefix", ")", "\n", "memo_path", "=", "self", ".", "_get_context_obj_path", "(", "self", ".", "memo_prefix", ")", "\n", "fp_path", "=", "self", ".", "_get_context_obj_path", "(", "self", ".", "fp_prefix", ")", "\n", "stc_path", "=", "self", ".", "_get_context_obj_path", "(", "self", ".", "stc_prefix", ")", "\n", "\n", "# always loading actions to avoid different action index for DQN", "\n", "self", ".", "actor", "=", "self", ".", "_init_actions", "(", "\n", "self", ".", "hp", ",", "self", ".", "tokenizer", ",", "action_path", ",", "\n", "with_loading", "=", "self", ".", "is_training", ")", "\n", "self", ".", "tjs", "=", "self", ".", "_init_trajectory", "(", "\n", "self", ".", "hp", ",", "tjs_path", ",", "with_loading", "=", "self", ".", "is_training", ")", "\n", "self", ".", "memo", "=", "self", ".", "_init_memo", "(", "\n", "self", ".", "hp", ",", "memo_path", ",", "with_loading", "=", "self", ".", "is_training", ")", "\n", "self", ".", "floor_plan", "=", "self", ".", "_init_floor_plan", "(", "\n", "fp_path", ",", "with_loading", "=", "self", ".", "is_training", ")", "\n", "# load stc", "\n", "self", ".", "stc", "=", "self", ".", "_init_state_text", "(", "stc_path", ",", "with_loading", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.agents.base_agent.BaseAgent._init_impl": [[332, 362], ["base_agent.BaseAgent._load_context_objs", "base_agent.BaseAgent.core.init", "deepword.hparams.save_hparams", "os.path.join", "min", "min", "base_agent.BaseAgent.hp.policy_to_action.lower", "base_agent.BaseAgent.hp.policy_to_action.lower", "len", "len", "base_agent.BaseAgent.hp.policy_to_action.lower", "ValueError"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.agents.base_agent.BaseAgent._load_context_objs", "home.repos.pwc.inspect_result.yinxusen_deepword.agents.cores.TabularCore.init", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.hparams.save_hparams"], ["", "def", "_init_impl", "(", "\n", "self", ",", "load_best", ":", "bool", "=", "False", ",", "\n", "restore_from", ":", "Optional", "[", "str", "]", "=", "None", ")", "->", "None", ":", "\n", "        ", "self", ".", "_load_context_objs", "(", ")", "\n", "self", ".", "core", ".", "init", "(", "\n", "is_training", "=", "self", ".", "is_training", ",", "load_best", "=", "load_best", ",", "\n", "restore_from", "=", "restore_from", ")", "\n", "\n", "if", "self", ".", "is_training", ":", "\n", "# save hparams if training", "\n", "            ", "save_hparams", "(", "self", ".", "hp", ",", "path", ".", "join", "(", "self", ".", "model_dir", ",", "'hparams.json'", ")", ")", "\n", "if", "self", ".", "hp", ".", "start_t_ignore_model_t", ":", "\n", "                ", "self", ".", "total_t", "=", "min", "(", "\n", "self", ".", "hp", ".", "observation_t", ",", "\n", "len", "(", "self", ".", "memo", ")", "if", "self", ".", "memo", "is", "not", "None", "else", "0", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "total_t", "=", "min", "(", "\n", "self", ".", "hp", ".", "observation_t", "+", "self", ".", "core", ".", "loaded_ckpt_step", ",", "\n", "len", "(", "self", ".", "memo", ")", "if", "self", ".", "memo", "is", "not", "None", "else", "0", ")", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "total_t", "=", "0", "\n", "if", "self", ".", "hp", ".", "policy_to_action", ".", "lower", "(", ")", "==", "\"Sampling\"", ".", "lower", "(", ")", ":", "\n", "                ", "self", ".", "eps", "=", "0", "\n", "", "elif", "self", ".", "hp", ".", "policy_to_action", ".", "lower", "(", ")", "==", "\"LinUCB\"", ".", "lower", "(", ")", ":", "\n", "                ", "self", ".", "eps", "=", "self", ".", "hp", ".", "policy_eps", "\n", "", "elif", "self", ".", "hp", ".", "policy_to_action", ".", "lower", "(", ")", "==", "\"EPS\"", ".", "lower", "(", ")", ":", "\n", "                ", "self", ".", "eps", "=", "self", ".", "hp", ".", "policy_eps", "\n", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "\"Unknown policy utilization method: {}\"", ".", "format", "(", "\n", "self", ".", "hp", ".", "policy_to_action", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.agents.base_agent.BaseAgent._start_episode": [[363, 374], ["base_agent.BaseAgent._start_episode_impl", "base_agent.BaseAgent._init"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.agents.competition_agent.CompetitionAgent._start_episode_impl", "home.repos.pwc.inspect_result.yinxusen_deepword.agents.base_agent.BaseAgent._init"], ["", "", "", "def", "_start_episode", "(", "\n", "self", ",", "obs", ":", "List", "[", "str", "]", ",", "infos", ":", "Dict", "[", "str", ",", "List", "[", "Any", "]", "]", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        Prepare the agent for the upcoming episode.\n        :param obs: initial feedback from each game\n        :param infos: additional infos of each game\n        :return:\n        \"\"\"", "\n", "if", "not", "self", ".", "_initialized", ":", "\n", "            ", "self", ".", "_init", "(", ")", "\n", "", "self", ".", "_start_episode_impl", "(", "obs", ",", "infos", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.agents.base_agent.BaseAgent._start_episode_impl": [[375, 410], ["base_agent.BaseAgent.tjs.add_new_tj", "base_agent.BaseAgent.stc.add_new_tj", "base_agent.BaseAgent._compute_game_id", "base_agent.BaseAgent.info", "base_agent.BaseAgent.actor.add_new_episode", "base_agent.BaseAgent.floor_plan.add_new_episode", "dict", "base_agent.BaseAgent.tokenizer.convert_tokens_to_ids", "base_agent.BaseAgent.tjs.get_current_tid", "base_agent.BaseAgent.info", "base_agent.BaseAgent.tokenizer.tokenize"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.deepword.trajectory.Trajectory.add_new_tj", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.trajectory.Trajectory.add_new_tj", "home.repos.pwc.inspect_result.yinxusen_deepword.agents.base_agent.BaseAgent._compute_game_id", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.log.Logging.info", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.floor_plan.FloorPlanCollector.add_new_episode", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.floor_plan.FloorPlanCollector.add_new_episode", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.tokenizers.BertTokenizer.convert_tokens_to_ids", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.trajectory.Trajectory.get_current_tid", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.log.Logging.info", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.tokenizers.BertTokenizer.tokenize"], ["", "def", "_start_episode_impl", "(", "\n", "self", ",", "obs", ":", "List", "[", "str", "]", ",", "infos", ":", "Dict", "[", "str", ",", "List", "[", "Any", "]", "]", ")", "->", "None", ":", "\n", "        ", "self", ".", "tjs", ".", "add_new_tj", "(", ")", "\n", "self", ".", "stc", ".", "add_new_tj", "(", "tid", "=", "self", ".", "tjs", ".", "get_current_tid", "(", ")", ")", "\n", "self", ".", "game_id", "=", "self", ".", "_compute_game_id", "(", "infos", ")", "\n", "self", ".", "info", "(", "\"game id: {}\"", ".", "format", "(", "self", ".", "game_id", ")", ")", "\n", "self", ".", "actor", ".", "add_new_episode", "(", "gid", "=", "self", ".", "game_id", ")", "\n", "self", ".", "floor_plan", ".", "add_new_episode", "(", "eid", "=", "self", ".", "game_id", ")", "\n", "self", ".", "in_game_t", "=", "0", "\n", "self", ".", "_cumulative_score", "=", "0", "\n", "self", ".", "_episode_has_started", "=", "True", "\n", "self", ".", "_prev_place", "=", "None", "\n", "self", ".", "_curr_place", "=", "None", "\n", "self", ".", "_cnt_action", "=", "dict", "(", ")", "\n", "self", ".", "_positive_scores", "=", "0", "\n", "self", ".", "_negative_scores", "=", "0", "\n", "if", "self", ".", "hp", ".", "append_objective_to_tj", ":", "\n", "            ", "objective", "=", "infos", "[", "INFO_KEY", ".", "objective", "]", "[", "0", "]", "\n", "if", "(", "self", ".", "game_id", "in", "self", ".", "_loaded_objectives", "\n", "and", "self", ".", "_loaded_objectives", "[", "self", ".", "game_id", "]", "[", "0", "]", "==", "objective", ")", ":", "\n", "                ", "self", ".", "_objective", "=", "self", ".", "_loaded_objectives", "[", "self", ".", "game_id", "]", "[", "1", "]", "\n", "self", ".", "info", "(", "\n", "\"substitute objective from ({}) to ({})\"", ".", "format", "(", "\n", "objective", ",", "self", ".", "_objective", ")", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "_objective", "=", "objective", "\n", "", "self", ".", "_objective_ids", "=", "self", ".", "tokenizer", ".", "convert_tokens_to_ids", "(", "\n", "self", ".", "tokenizer", ".", "tokenize", "(", "self", ".", "_objective", ")", ")", "\n", "", "else", ":", "# make sure no objective available", "\n", "            ", "self", ".", "_objective", "=", "\"\"", "\n", "self", ".", "_objective_ids", "=", "[", "]", "\n", "\n", "", "if", "self", ".", "hp", ".", "walkthrough_guided_exploration", ":", "\n", "            ", "self", ".", "_walkthrough", "=", "infos", "[", "INFO_KEY", ".", "walkthrough", "]", "[", "0", "]", "\n", "self", ".", "_continue_walkthrough", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.agents.base_agent.BaseAgent._end_episode": [[411, 444], ["base_agent.BaseAgent.info", "deepword.utils.report_status"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.deepword.log.Logging.info", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.utils.report_status"], ["", "", "def", "_end_episode", "(", "\n", "self", ",", "obs", ":", "List", "[", "str", "]", ",", "scores", ":", "List", "[", "int", "]", ",", "\n", "infos", ":", "Dict", "[", "str", ",", "List", "[", "Any", "]", "]", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        tell the agent the episode has terminated\n        :param obs: previous command's feedback for each game\n        :param scores: score obtained so far for each game\n        :param infos: additional infos of each game\n        :return:\n        \"\"\"", "\n", "self", ".", "info", "(", "report_status", "(", "\n", "[", "(", "\"training\"", ",", "self", ".", "is_training", ")", ",", "\n", "(", "\"#steps\"", ",", "self", ".", "in_game_t", ")", ",", "\n", "(", "\"score\"", ",", "scores", "[", "0", "]", ")", ",", "\n", "(", "\"positive scores\"", ",", "self", ".", "_positive_scores", ")", ",", "\n", "(", "\"negative scores\"", ",", "self", ".", "_negative_scores", ")", ",", "\n", "(", "\"won\"", ",", "infos", "[", "INFO_KEY", ".", "won", "]", "[", "0", "]", ")", ",", "\n", "(", "\"lost\"", ",", "infos", "[", "INFO_KEY", ".", "lost", "]", "[", "0", "]", ")", ",", "\n", "(", "\"policy_to_action\"", ",", "self", ".", "hp", ".", "policy_to_action", ")", ",", "\n", "(", "\"eps\"", ",", "self", ".", "eps", ")", ",", "\n", "(", "\"sampling_temp\"", ",", "self", ".", "hp", ".", "policy_sampling_temp", ")", "]", ")", ")", "\n", "self", ".", "_episode_has_started", "=", "False", "\n", "self", ".", "_last_action_mask", "=", "None", "\n", "self", ".", "_last_sys_action_mask", "=", "None", "\n", "self", ".", "game_id", "=", "None", "\n", "self", ".", "_last_action", "=", "None", "\n", "self", ".", "_cumulative_penalty", "=", "0", "\n", "self", ".", "_prev_last_action", "=", "None", "\n", "self", ".", "_prev_master", "=", "None", "\n", "self", ".", "_objective", "=", "\"\"", "\n", "self", ".", "_objective_ids", "=", "[", "]", "\n", "self", ".", "_walkthrough", "=", "[", "]", "\n", "self", ".", "_continue_walkthrough", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.agents.base_agent.BaseAgent._delete_stale_context_objs": [[445, 458], ["base_agent.BaseAgent._get_compatible_snapshot_tag", "len", "base_agent.BaseAgent.info", "list", "os.remove", "os.remove", "os.remove", "os.remove", "os.remove", "reversed", "base_agent.BaseAgent._get_context_obj_path_w_tag", "base_agent.BaseAgent._get_context_obj_path_w_tag", "base_agent.BaseAgent._get_context_obj_path_w_tag", "base_agent.BaseAgent._get_context_obj_path_w_tag", "base_agent.BaseAgent._get_context_obj_path_w_tag", "sorted"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.agents.base_agent.BaseAgent._get_compatible_snapshot_tag", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.log.Logging.info", "home.repos.pwc.inspect_result.yinxusen_deepword.agents.base_agent.BaseAgent._get_context_obj_path_w_tag", "home.repos.pwc.inspect_result.yinxusen_deepword.agents.base_agent.BaseAgent._get_context_obj_path_w_tag", "home.repos.pwc.inspect_result.yinxusen_deepword.agents.base_agent.BaseAgent._get_context_obj_path_w_tag", "home.repos.pwc.inspect_result.yinxusen_deepword.agents.base_agent.BaseAgent._get_context_obj_path_w_tag", "home.repos.pwc.inspect_result.yinxusen_deepword.agents.base_agent.BaseAgent._get_context_obj_path_w_tag"], ["", "def", "_delete_stale_context_objs", "(", "self", ")", "->", "None", ":", "\n", "        ", "valid_tags", "=", "self", ".", "_get_compatible_snapshot_tag", "(", ")", "\n", "if", "len", "(", "valid_tags", ")", ">", "self", ".", "hp", ".", "max_snapshot_to_keep", ":", "\n", "            ", "self", ".", "_stale_tags", "=", "list", "(", "reversed", "(", "sorted", "(", "\n", "valid_tags", ")", ")", ")", "[", "self", ".", "hp", ".", "max_snapshot_to_keep", ":", "]", "\n", "self", ".", "info", "(", "\"tags to be deleted: {}\"", ".", "format", "(", "self", ".", "_stale_tags", ")", ")", "\n", "for", "tag", "in", "self", ".", "_stale_tags", ":", "\n", "                ", "remove", "(", "self", ".", "_get_context_obj_path_w_tag", "(", "self", ".", "memo_prefix", ",", "tag", ")", ")", "\n", "remove", "(", "self", ".", "_get_context_obj_path_w_tag", "(", "self", ".", "tjs_prefix", ",", "tag", ")", ")", "\n", "remove", "(", "\n", "self", ".", "_get_context_obj_path_w_tag", "(", "self", ".", "action_prefix", ",", "tag", ")", ")", "\n", "remove", "(", "self", ".", "_get_context_obj_path_w_tag", "(", "self", ".", "fp_prefix", ",", "tag", ")", ")", "\n", "remove", "(", "self", ".", "_get_context_obj_path_w_tag", "(", "self", ".", "stc_prefix", ",", "tag", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.agents.base_agent.BaseAgent._save_context_objs": [[459, 471], ["base_agent.BaseAgent._get_context_obj_new_path", "base_agent.BaseAgent._get_context_obj_new_path", "base_agent.BaseAgent._get_context_obj_new_path", "base_agent.BaseAgent._get_context_obj_new_path", "base_agent.BaseAgent._get_context_obj_new_path", "base_agent.BaseAgent.memo.save_memo", "base_agent.BaseAgent.tjs.save_tjs", "base_agent.BaseAgent.actor.save_actions", "base_agent.BaseAgent.floor_plan.save_fps", "base_agent.BaseAgent.stc.save_tjs"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.agents.base_agent.BaseAgent._get_context_obj_new_path", "home.repos.pwc.inspect_result.yinxusen_deepword.agents.base_agent.BaseAgent._get_context_obj_new_path", "home.repos.pwc.inspect_result.yinxusen_deepword.agents.base_agent.BaseAgent._get_context_obj_new_path", "home.repos.pwc.inspect_result.yinxusen_deepword.agents.base_agent.BaseAgent._get_context_obj_new_path", "home.repos.pwc.inspect_result.yinxusen_deepword.agents.base_agent.BaseAgent._get_context_obj_new_path", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.tree_memory.TreeMemory.save_memo", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.trajectory.Trajectory.save_tjs", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.action.ActionCollector.save_actions", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.floor_plan.FloorPlanCollector.save_fps", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.trajectory.Trajectory.save_tjs"], ["", "", "", "def", "_save_context_objs", "(", "self", ")", "->", "None", ":", "\n", "        ", "action_path", "=", "self", ".", "_get_context_obj_new_path", "(", "self", ".", "action_prefix", ")", "\n", "tjs_path", "=", "self", ".", "_get_context_obj_new_path", "(", "self", ".", "tjs_prefix", ")", "\n", "memo_path", "=", "self", ".", "_get_context_obj_new_path", "(", "self", ".", "memo_prefix", ")", "\n", "fp_path", "=", "self", ".", "_get_context_obj_new_path", "(", "self", ".", "fp_prefix", ")", "\n", "stc_path", "=", "self", ".", "_get_context_obj_new_path", "(", "self", ".", "stc_prefix", ")", "\n", "\n", "self", ".", "memo", ".", "save_memo", "(", "memo_path", ")", "\n", "self", ".", "tjs", ".", "save_tjs", "(", "tjs_path", ")", "\n", "self", ".", "actor", ".", "save_actions", "(", "action_path", ")", "\n", "self", ".", "floor_plan", ".", "save_fps", "(", "fp_path", ")", "\n", "self", ".", "stc", ".", "save_tjs", "(", "stc_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.agents.base_agent.BaseAgent.save_snapshot": [[472, 477], ["base_agent.BaseAgent.info", "base_agent.BaseAgent._save_context_objs", "base_agent.BaseAgent._delete_stale_context_objs", "base_agent.BaseAgent._clean_stale_context"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.deepword.log.Logging.info", "home.repos.pwc.inspect_result.yinxusen_deepword.agents.base_agent.BaseAgent._save_context_objs", "home.repos.pwc.inspect_result.yinxusen_deepword.agents.base_agent.BaseAgent._delete_stale_context_objs", "home.repos.pwc.inspect_result.yinxusen_deepword.agents.base_agent.BaseAgent._clean_stale_context"], ["", "def", "save_snapshot", "(", "self", ")", "->", "None", ":", "\n", "        ", "self", ".", "info", "(", "'save snapshot of the agent'", ")", "\n", "self", ".", "_save_context_objs", "(", ")", "\n", "self", ".", "_delete_stale_context_objs", "(", ")", "\n", "self", ".", "_clean_stale_context", "(", "self", ".", "_stale_tids", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.agents.base_agent.BaseAgent._get_compatible_snapshot_tag": [[478, 492], ["deepword.agents.utils.get_path_tags", "deepword.agents.utils.get_path_tags", "deepword.agents.utils.get_path_tags", "deepword.agents.utils.get_path_tags", "deepword.agents.utils.get_path_tags", "set", "set.intersection_update", "set.intersection_update", "set.intersection_update", "set.intersection_update", "list"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.agents.utils.get_path_tags", "home.repos.pwc.inspect_result.yinxusen_deepword.agents.utils.get_path_tags", "home.repos.pwc.inspect_result.yinxusen_deepword.agents.utils.get_path_tags", "home.repos.pwc.inspect_result.yinxusen_deepword.agents.utils.get_path_tags", "home.repos.pwc.inspect_result.yinxusen_deepword.agents.utils.get_path_tags", "home.repos.pwc.inspect_result.yinxusen_deepword.students.student_learner.CMD.set"], ["", "def", "_get_compatible_snapshot_tag", "(", "self", ")", "->", "List", "[", "int", "]", ":", "\n", "        ", "action_tags", "=", "get_path_tags", "(", "self", ".", "model_dir", ",", "self", ".", "action_prefix", ")", "\n", "memo_tags", "=", "get_path_tags", "(", "self", ".", "model_dir", ",", "self", ".", "memo_prefix", ")", "\n", "tjs_tags", "=", "get_path_tags", "(", "self", ".", "model_dir", ",", "self", ".", "tjs_prefix", ")", "\n", "fp_tags", "=", "get_path_tags", "(", "self", ".", "model_dir", ",", "self", ".", "fp_prefix", ")", "\n", "stc_tags", "=", "get_path_tags", "(", "self", ".", "model_dir", ",", "self", ".", "stc_prefix", ")", "\n", "\n", "valid_tags", "=", "set", "(", "action_tags", ")", "\n", "valid_tags", ".", "intersection_update", "(", "memo_tags", ")", "\n", "valid_tags", ".", "intersection_update", "(", "tjs_tags", ")", "\n", "valid_tags", ".", "intersection_update", "(", "fp_tags", ")", "\n", "valid_tags", ".", "intersection_update", "(", "stc_tags", ")", "\n", "\n", "return", "list", "(", "valid_tags", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.agents.base_agent.BaseAgent._is_time_to_save": [[493, 496], ["None"], "methods", ["None"], ["", "def", "_is_time_to_save", "(", "self", ")", "->", "bool", ":", "\n", "        ", "trained_steps", "=", "self", ".", "total_t", "-", "self", ".", "hp", ".", "observation_t", "+", "1", "\n", "return", "(", "trained_steps", "%", "self", ".", "hp", ".", "save_gap_t", "==", "0", ")", "and", "(", "trained_steps", ">", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.agents.base_agent.BaseAgent._go_with_floor_plan": [[497, 507], ["base_agent.BaseAgent.floor_plan.get_map", "base_agent.BaseAgent.get"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.deepword.floor_plan.FloorPlanCollector.get_map", "home.repos.pwc.inspect_result.yinxusen_deepword.students.student_learner.CMD.get"], ["", "def", "_go_with_floor_plan", "(", "self", ",", "actions", ":", "List", "[", "str", "]", ")", "->", "List", "[", "str", "]", ":", "\n", "        ", "\"\"\"\n        Update go-cardinal actions into go-room actions, if floor plan exists\n        :param actions:\n        :return:\n        \"\"\"", "\n", "local_map", "=", "self", ".", "floor_plan", ".", "get_map", "(", "self", ".", "_curr_place", ")", "\n", "return", "(", "\n", "[", "\"{} to {}\"", ".", "format", "(", "a", ",", "local_map", ".", "get", "(", "a", ")", ")", "\n", "if", "a", "in", "local_map", "else", "a", "for", "a", "in", "actions", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.agents.base_agent.BaseAgent._random_walk_for_collecting_fp": [[508, 533], ["list", "filter", "list", "numpy.random.choice", "base_agent.BaseAgent.actor.action2idx.get", "deepword.agents.utils.ActionDesc", "len", "filter", "a.startswith", "a.startswith", "len", "a.split"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.students.student_learner.CMD.get"], ["", "def", "_random_walk_for_collecting_fp", "(", "\n", "self", ",", "actions", ":", "List", "[", "str", "]", ")", "->", "Optional", "[", "ActionDesc", "]", ":", "\n", "        ", "cardinal_go", "=", "list", "(", "filter", "(", "\n", "lambda", "a", ":", "a", ".", "startswith", "(", "\"go\"", ")", "and", "len", "(", "a", ".", "split", "(", ")", ")", "==", "2", ",", "actions", ")", ")", "\n", "\n", "if", "(", "self", ".", "hp", ".", "collect_floor_plan", "and", "self", ".", "in_game_t", "<", "50", "\n", "and", "len", "(", "cardinal_go", ")", "!=", "0", ")", ":", "\n", "# collecting floor plan by choosing random action", "\n", "# if there are still go actions without room name", "\n", "# Notice that only choosing \"go\" actions cannot finish", "\n", "# collecting floor plan because there is the need to open doors", "\n", "# Notice also that only allow random walk in the first 50 steps", "\n", "            ", "open_actions", "=", "list", "(", "\n", "filter", "(", "lambda", "a", ":", "a", ".", "startswith", "(", "\"open\"", ")", ",", "actions", ")", ")", "\n", "admissible_actions", "=", "cardinal_go", "+", "open_actions", "\n", "action", "=", "np", ".", "random", ".", "choice", "(", "admissible_actions", ")", "\n", "action_idx", "=", "self", ".", "actor", ".", "action2idx", ".", "get", "(", "action", ")", "\n", "action_desc", "=", "ActionDesc", "(", "\n", "action_type", "=", "ACT_TYPE", ".", "rnd_walk", ",", "action_idx", "=", "action_idx", ",", "\n", "token_idx", "=", "self", ".", "actor", ".", "action_matrix", "[", "action_idx", "]", ",", "\n", "action_len", "=", "self", ".", "actor", ".", "action_len", "[", "action_idx", "]", ",", "\n", "action", "=", "action", ",", "q_actions", "=", "None", ")", "\n", "return", "action_desc", "\n", "", "else", ":", "\n", "            ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.agents.base_agent.BaseAgent._get_policy_action": [[534, 573], ["base_agent.BaseAgent.tjs.fetch_last_state", "base_agent.BaseAgent.core.policy", "list", "base_agent.BaseAgent.debug", "deepword.agents.utils.ActionDesc", "base_agent.BaseAgent.stc.fetch_last_state", "reversed", "base_agent.BaseAgent.hp.policy_to_action.lower", "deepword.agents.utils.categorical_without_replacement", "sorted", "base_agent.BaseAgent.hp.policy_to_action.lower", "deepword.agents.utils.get_best_1d_q", "zip", "cnt_action_array.append", "base_agent.BaseAgent.hp.policy_to_action.lower", "deepword.agents.utils.get_best_1d_q", "ValueError", "list", "base_agent.BaseAgent._cnt_action.get"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.deepword.trajectory.Trajectory.fetch_last_state", "home.repos.pwc.inspect_result.yinxusen_deepword.agents.cores.PGNCore.policy", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.log.Logging.debug", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.trajectory.Trajectory.fetch_last_state", "home.repos.pwc.inspect_result.yinxusen_deepword.models.transformer.categorical_without_replacement", "home.repos.pwc.inspect_result.yinxusen_deepword.agents.utils.get_best_1d_q", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.tree_memory.TreeMemory.append", "home.repos.pwc.inspect_result.yinxusen_deepword.agents.utils.get_best_1d_q", "home.repos.pwc.inspect_result.yinxusen_deepword.students.student_learner.CMD.get"], ["", "", "def", "_get_policy_action", "(", "self", ",", "action_mask", ":", "np", ".", "ndarray", ")", "->", "ActionDesc", ":", "\n", "        ", "trajectory", "=", "self", ".", "tjs", ".", "fetch_last_state", "(", ")", "\n", "state", "=", "self", ".", "stc", ".", "fetch_last_state", "(", ")", "[", "-", "1", "]", "\n", "\n", "q_actions", "=", "self", ".", "core", ".", "policy", "(", "\n", "trajectory", ",", "state", ",", "\n", "self", ".", "actor", ".", "action_matrix", ",", "self", ".", "actor", ".", "action_len", ",", "action_mask", ")", "\n", "\n", "actions_with_q_values", "=", "list", "(", "reversed", "(", "sorted", "(", "zip", "(", "\n", "[", "self", ".", "actor", ".", "actions", "[", "mid", "]", "for", "mid", "in", "action_mask", "]", ",", "\n", "list", "(", "q_actions", ")", ")", ",", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ")", ")", ")", "\n", "self", ".", "debug", "(", "\"q_actions: {}\"", ".", "format", "(", "actions_with_q_values", ")", ")", "\n", "# self.debug(\"exp of q_actions: {}\".format(list(np.exp(q_actions))))", "\n", "# self.debug(\"ent: {:.5f}\".format(", "\n", "#     entropy(pk=np.exp(q_actions), qk=np.ones_like(q_actions))))", "\n", "\n", "if", "self", ".", "hp", ".", "policy_to_action", ".", "lower", "(", ")", "==", "\"Sampling\"", ".", "lower", "(", ")", ":", "\n", "            ", "masked_action_idx", "=", "categorical_without_replacement", "(", "\n", "logits", "=", "q_actions", "/", "self", ".", "hp", ".", "policy_sampling_temp", ",", "k", "=", "1", ")", "\n", "", "elif", "self", ".", "hp", ".", "policy_to_action", ".", "lower", "(", ")", "==", "\"LinUCB\"", ".", "lower", "(", ")", ":", "\n", "            ", "cnt_action_array", "=", "[", "]", "\n", "for", "mid", "in", "action_mask", ":", "\n", "                ", "cnt_action_array", ".", "append", "(", "self", ".", "_cnt_action", ".", "get", "(", "mid", ",", "0.", ")", ")", "\n", "", "masked_action_idx", ",", "_", "=", "get_best_1d_q", "(", "q_actions", "-", "cnt_action_array", ")", "\n", "", "elif", "self", ".", "hp", ".", "policy_to_action", ".", "lower", "(", ")", "==", "\"EPS\"", ".", "lower", "(", ")", ":", "\n", "            ", "masked_action_idx", ",", "_", "=", "get_best_1d_q", "(", "q_actions", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Unknown policy utilization method: {}\"", ".", "format", "(", "\n", "self", ".", "hp", ".", "policy_to_action", ")", ")", "\n", "\n", "", "action_idx", "=", "action_mask", "[", "masked_action_idx", "]", "\n", "action_desc", "=", "ActionDesc", "(", "\n", "action_type", "=", "ACT_TYPE", ".", "policy_drrn", ",", "\n", "action_idx", "=", "action_idx", ",", "\n", "token_idx", "=", "self", ".", "actor", ".", "action_matrix", "[", "action_idx", "]", ",", "\n", "action_len", "=", "self", ".", "actor", ".", "action_len", "[", "action_idx", "]", ",", "\n", "action", "=", "self", ".", "actor", ".", "actions", "[", "action_idx", "]", ",", "\n", "q_actions", "=", "q_actions", ")", "\n", "return", "action_desc", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.agents.base_agent.BaseAgent._rule_based_policy": [[574, 578], ["None"], "methods", ["None"], ["", "def", "_rule_based_policy", "(", "\n", "self", ",", "actions", ":", "List", "[", "str", "]", ",", "instant_reward", ":", "float", "\n", ")", "->", "Optional", "[", "ActionDesc", "]", ":", "\n", "        ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.agents.base_agent.BaseAgent._walkthrough_policy": [[579, 612], ["base_agent.BaseAgent.actor.action2idx.get", "deepword.agents.utils.ActionDesc", "random.random", "base_agent.BaseAgent._walkthrough_prob_per_step", "base_agent.BaseAgent.info", "base_agent.BaseAgent._go_with_floor_plan", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.students.student_learner.CMD.get", "home.repos.pwc.inspect_result.yinxusen_deepword.agents.base_agent.BaseAgent._walkthrough_prob_per_step", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.log.Logging.info", "home.repos.pwc.inspect_result.yinxusen_deepword.agents.base_agent.BaseAgent._go_with_floor_plan"], ["", "def", "_walkthrough_policy", "(", "self", ",", "actions", ":", "List", "[", "str", "]", ")", "->", "Optional", "[", "ActionDesc", "]", ":", "\n", "        ", "if", "(", "not", "self", ".", "is_training", "\n", "or", "not", "self", ".", "_continue_walkthrough", "\n", "or", "not", "self", ".", "hp", ".", "walkthrough_guided_exploration", "\n", "or", "len", "(", "self", ".", "_walkthrough", ")", "==", "0", "\n", "or", "not", "self", ".", "in_game_t", "<", "len", "(", "self", ".", "_walkthrough", ")", ")", ":", "\n", "            ", "return", "None", "\n", "\n", "", "if", "random", ".", "random", "(", ")", ">", "self", ".", "_walkthrough_prob_per_step", "(", "\n", "n_steps", "=", "self", ".", "in_game_t", "+", "1", ",", "\n", "prob_complete_walkthrough", "=", "self", ".", "hp", ".", "prob_complete_walkthrough", ")", ":", "\n", "            ", "self", ".", "_continue_walkthrough", "=", "False", "\n", "self", ".", "info", "(", "\n", "\"disallow walkthrough after {}/{} steps\"", ".", "format", "(", "\n", "self", ".", "in_game_t", ",", "len", "(", "self", ".", "_walkthrough", ")", ")", ")", "\n", "\n", "# if previous code decides not to continue, we stop walkthrough", "\n", "# exploration immediately.", "\n", "", "if", "not", "self", ".", "_continue_walkthrough", ":", "\n", "            ", "return", "None", "\n", "\n", "", "gold_action", "=", "self", ".", "_walkthrough", "[", "self", ".", "in_game_t", "]", "\n", "gold_action", "=", "self", ".", "_go_with_floor_plan", "(", "[", "gold_action", "]", ")", "[", "0", "]", "\n", "assert", "gold_action", "in", "actions", ",", "\"gold action is not in available actions\"", "\n", "gold_action_idx", "=", "self", ".", "actor", ".", "action2idx", ".", "get", "(", "gold_action", ")", "\n", "action_desc", "=", "ActionDesc", "(", "\n", "action_type", "=", "ACT_TYPE", ".", "walkthrough", ",", "\n", "action_idx", "=", "gold_action_idx", ",", "\n", "action_len", "=", "self", ".", "actor", ".", "action_len", "[", "gold_action_idx", "]", ",", "\n", "token_idx", "=", "self", ".", "actor", ".", "action_matrix", "[", "gold_action_idx", "]", ",", "\n", "action", "=", "gold_action", ",", "\n", "q_actions", "=", "None", ")", "\n", "return", "action_desc", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.agents.base_agent.BaseAgent._choose_action": [[613, 656], ["base_agent.BaseAgent._walkthrough_policy", "base_agent.BaseAgent._rule_based_policy", "deepword.agents.utils.ActionDesc", "base_agent.BaseAgent._random_walk_for_collecting_fp", "base_agent.BaseAgent._get_a_random_action", "base_agent.BaseAgent._get_policy_action", "base_agent.BaseAgent._get_policy_action", "random.random"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.agents.base_agent.BaseAgent._walkthrough_policy", "home.repos.pwc.inspect_result.yinxusen_deepword.agents.competition_agent.CompetitionAgent._rule_based_policy", "home.repos.pwc.inspect_result.yinxusen_deepword.agents.base_agent.BaseAgent._random_walk_for_collecting_fp", "home.repos.pwc.inspect_result.yinxusen_deepword.agents.base_agent.BaseAgent._get_a_random_action", "home.repos.pwc.inspect_result.yinxusen_deepword.agents.base_agent.BaseAgent._get_policy_action", "home.repos.pwc.inspect_result.yinxusen_deepword.agents.base_agent.BaseAgent._get_policy_action"], ["", "def", "_choose_action", "(", "\n", "self", ",", "\n", "actions", ":", "List", "[", "str", "]", ",", "\n", "action_mask", ":", "np", ".", "ndarray", ",", "\n", "instant_reward", ":", "float", ")", "->", "ActionDesc", ":", "\n", "\n", "        ", "\"\"\"\n        Choose action, w.r.t.\n         1) walkthrough guided action (training only)\n         2) rule-based policy\n         3) random walk floor map collection\n         4) eps-greedy\n\n        Args:\n            actions: effective actions\n            action_mask: mask ids of the effective actions\n            instant_reward: the latest instant reward\n\n        Returns:\n            Action description\n        \"\"\"", "\n", "\n", "action_desc", "=", "self", ".", "_walkthrough_policy", "(", "actions", ")", "\n", "if", "not", "action_desc", ":", "\n", "            ", "action_desc", "=", "self", ".", "_rule_based_policy", "(", "actions", ",", "instant_reward", ")", "\n", "if", "not", "action_desc", ":", "\n", "                ", "action_desc", "=", "self", ".", "_random_walk_for_collecting_fp", "(", "actions", ")", "\n", "if", "not", "action_desc", ":", "\n", "                    ", "action_desc", "=", "(", "\n", "self", ".", "_get_a_random_action", "(", "action_mask", ")", "\n", "if", "random", ".", "random", "(", ")", "<", "self", ".", "eps", "else", "\n", "self", ".", "_get_policy_action", "(", "action_mask", ")", ")", "\n", "\n", "", "", "", "if", "self", ".", "hp", ".", "always_compute_policy", "and", "action_desc", ".", "q_actions", "is", "None", ":", "\n", "            ", "action_desc", "=", "ActionDesc", "(", "\n", "action_type", "=", "action_desc", ".", "action_type", ",", "\n", "action_idx", "=", "action_desc", ".", "action_idx", ",", "\n", "token_idx", "=", "action_desc", ".", "token_idx", ",", "\n", "action_len", "=", "action_desc", ".", "action_len", ",", "\n", "action", "=", "action_desc", ".", "action", ",", "\n", "q_actions", "=", "self", ".", "_get_policy_action", "(", "action_mask", ")", ".", "q_actions", ")", "\n", "\n", "", "return", "action_desc", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.agents.base_agent.BaseAgent._get_raw_instant_reward": [[657, 662], ["None"], "methods", ["None"], ["", "def", "_get_raw_instant_reward", "(", "self", ",", "score", ":", "float", ")", "->", "float", ":", "\n", "        ", "\"\"\"raw instant reward between two consecutive scores\"\"\"", "\n", "instant_reward", "=", "score", "-", "self", ".", "_cumulative_score", "\n", "self", ".", "_cumulative_score", "=", "score", "\n", "return", "instant_reward", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.agents.base_agent.BaseAgent._get_repetition_penalty": [[663, 680], ["None"], "methods", ["None"], ["", "def", "_get_repetition_penalty", "(", "\n", "self", ",", "master", ":", "str", ",", "raw_instant_reward", ":", "float", ")", "->", "float", ":", "\n", "        ", "\"\"\"\n        add a penalty of self._cumulative_penalty if the current Action-Master\n        repeats the failure of last Action-Master.\n        \"\"\"", "\n", "if", "(", "master", "==", "self", ".", "_prev_master", "and", "self", ".", "_last_action", "is", "not", "None", "\n", "and", "self", ".", "_last_action", ".", "action", "==", "self", ".", "_prev_last_action", "and", "\n", "raw_instant_reward", "<=", "0", ")", ":", "\n", "            ", "self", ".", "_cumulative_penalty", "-=", "0.1", "\n", "", "else", ":", "\n", "            ", "self", ".", "_prev_last_action", "=", "(", "\n", "self", ".", "_last_action", ".", "action", "\n", "if", "self", ".", "_last_action", "is", "not", "None", "else", "None", ")", "\n", "self", ".", "_prev_master", "=", "master", "\n", "self", ".", "_cumulative_penalty", "=", "0.", "\n", "", "return", "self", ".", "_cumulative_penalty", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.agents.base_agent.BaseAgent._get_instant_reward": [[681, 708], ["base_agent.BaseAgent._get_raw_instant_reward", "base_agent.BaseAgent._clip_reward", "base_agent.BaseAgent._get_repetition_penalty", "max", "min"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.agents.base_agent.BaseAgent._get_raw_instant_reward", "home.repos.pwc.inspect_result.yinxusen_deepword.agents.base_agent.BaseAgent._clip_reward", "home.repos.pwc.inspect_result.yinxusen_deepword.agents.base_agent.BaseAgent._get_repetition_penalty"], ["", "def", "_get_instant_reward", "(", "\n", "self", ",", "score", ":", "float", ",", "master", ":", "str", ",", "is_terminal", ":", "bool", ",", "\n", "won", ":", "bool", ",", "lost", ":", "bool", ")", "->", "float", ":", "\n", "# there are three scenarios of game termination", "\n", "# 1. you won      --> encourage this action", "\n", "# 2. you lost     --> discourage this action", "\n", "# 3. out of step  --> do nothing", "\n", "        ", "raw_instant_reward", "=", "self", ".", "_get_raw_instant_reward", "(", "score", ")", "\n", "if", "raw_instant_reward", ">=", "0", ":", "\n", "            ", "self", ".", "_positive_scores", "+=", "raw_instant_reward", "\n", "", "else", ":", "\n", "            ", "self", ".", "_negative_scores", "+=", "raw_instant_reward", "\n", "", "instant_reward", "=", "raw_instant_reward", "\n", "if", "is_terminal", ":", "\n", "            ", "if", "won", ":", "\n", "                ", "instant_reward", "=", "max", "(", "1.", ",", "raw_instant_reward", ")", "\n", "", "elif", "lost", ":", "\n", "                ", "instant_reward", "=", "min", "(", "-", "1.", ",", "raw_instant_reward", ")", "\n", "", "else", ":", "\n", "                ", "pass", "\n", "# add repetition penalty and per-step penalty", "\n", "", "", "if", "self", ".", "hp", ".", "use_step_wise_reward", ":", "\n", "            ", "curr_cumulative_penalty", "=", "self", ".", "_get_repetition_penalty", "(", "\n", "master", ",", "raw_instant_reward", ")", "\n", "instant_reward", "+=", "(", "curr_cumulative_penalty", "+", "(", "-", "0.1", ")", ")", "\n", "", "instant_reward", "=", "self", ".", "_clip_reward", "(", "instant_reward", ")", "\n", "return", "instant_reward", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.agents.base_agent.BaseAgent.positive_scores": [[709, 715], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "positive_scores", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Total positive scores earned\n        \"\"\"", "\n", "return", "self", ".", "_positive_scores", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.agents.base_agent.BaseAgent.negative_scores": [[716, 722], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "negative_scores", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Total negative scores\n        \"\"\"", "\n", "return", "self", ".", "_negative_scores", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.agents.base_agent.BaseAgent._collect_floor_plan": [[723, 744], ["base_agent.BaseAgent._get_room_name", "base_agent.BaseAgent.floor_plan.extend"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.agents.base_agent.BaseAgent._get_room_name", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.floor_plan.FloorPlanCollector.extend"], ["", "def", "_collect_floor_plan", "(", "self", ",", "master", ":", "str", ",", "prev_place", ":", "str", ")", "->", "str", ":", "\n", "        ", "\"\"\"\n        collect floor plan with latest master.\n        if the current place doesn't match the previous place, and a go action\n        is used to get the master, then we need to update the floor plan.\n\n        :param master:\n        :param prev_place: the name of previous place\n        :return: the name of current place\n        \"\"\"", "\n", "room_name", "=", "self", ".", "_get_room_name", "(", "master", ")", "\n", "curr_place", "=", "room_name", "if", "room_name", "is", "not", "None", "else", "prev_place", "\n", "\n", "if", "(", "curr_place", "!=", "prev_place", "and", "\n", "self", ".", "_last_action", "is", "not", "None", "and", "\n", "self", ".", "_last_action", ".", "action", "in", "self", ".", "inv_direction", ")", ":", "\n", "            ", "self", ".", "floor_plan", ".", "extend", "(", "\n", "[", "(", "prev_place", ",", "self", ".", "_last_action", ".", "action", ",", "curr_place", ")", ",", "\n", "(", "curr_place", ",", "self", ".", "inv_direction", "[", "self", ".", "_last_action", ".", "action", "]", ",", "\n", "prev_place", ")", "]", ")", "\n", "", "return", "curr_place", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.agents.base_agent.BaseAgent._prepare_other_train_data": [[745, 747], ["None"], "methods", ["None"], ["", "def", "_prepare_other_train_data", "(", "self", ",", "b_memory", ":", "List", "[", "Memolet", "]", ")", "->", "Any", ":", "\n", "        ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.agents.base_agent.BaseAgent._train_one_batch": [[748, 805], ["base_agent.BaseAgent.memo.sample_batch", "base_agent.BaseAgent._prepare_other_train_data", "base_agent.BaseAgent.tjs.fetch_batch_states", "base_agent.BaseAgent.tjs.fetch_batch_pre_states", "base_agent.BaseAgent.core.train_one_batch", "base_agent.BaseAgent.memo.batch_update", "base_agent.BaseAgent._is_time_to_save", "base_agent.BaseAgent.actor.get_action_len", "base_agent.BaseAgent.actor.get_action_matrix", "base_agent.BaseAgent.save_snapshot", "base_agent.BaseAgent.core.save_model", "base_agent.BaseAgent.core.create_or_reload_target_model", "base_agent.BaseAgent.stc.fetch_batch_states", "base_agent.BaseAgent.stc.fetch_batch_pre_states"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.deepword.tree_memory.TreeMemory.sample_batch", "home.repos.pwc.inspect_result.yinxusen_deepword.agents.base_agent.BaseAgent._prepare_other_train_data", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.trajectory.Trajectory.fetch_batch_states", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.trajectory.Trajectory.fetch_batch_pre_states", "home.repos.pwc.inspect_result.yinxusen_deepword.agents.cores.PGNCore.train_one_batch", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.tree_memory.TreeMemory.batch_update", "home.repos.pwc.inspect_result.yinxusen_deepword.agents.base_agent.BaseAgent._is_time_to_save", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.action.ActionCollector.get_action_len", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.action.ActionCollector.get_action_matrix", "home.repos.pwc.inspect_result.yinxusen_deepword.agents.base_agent.BaseAgent.save_snapshot", "home.repos.pwc.inspect_result.yinxusen_deepword.agents.cores.TabularCore.save_model", "home.repos.pwc.inspect_result.yinxusen_deepword.agents.cores.TabularCore.create_or_reload_target_model", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.trajectory.Trajectory.fetch_batch_states", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.trajectory.Trajectory.fetch_batch_pre_states"], ["", "def", "_train_one_batch", "(", "self", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        Train one batch of samples.\n        Load target model if not exist, save current model when necessary.\n        \"\"\"", "\n", "# prepare other data", "\n", "# put it as the first, in case of using multi-threading", "\n", "b_idx", ",", "b_memory", ",", "b_weight", "=", "self", ".", "memo", ".", "sample_batch", "(", "self", ".", "hp", ".", "batch_size", ")", "\n", "other_train_data", "=", "self", ".", "_prepare_other_train_data", "(", "b_memory", ")", "\n", "\n", "trajectory_id", "=", "[", "m", ".", "tid", "for", "m", "in", "b_memory", "]", "\n", "state_id", "=", "[", "m", ".", "sid", "for", "m", "in", "b_memory", "]", "\n", "action_id", "=", "[", "m", ".", "aid", "for", "m", "in", "b_memory", "]", "\n", "game_id", "=", "[", "m", ".", "gid", "for", "m", "in", "b_memory", "]", "\n", "reward", "=", "[", "m", ".", "reward", "for", "m", "in", "b_memory", "]", "\n", "is_terminal", "=", "[", "m", ".", "is_terminal", "for", "m", "in", "b_memory", "]", "\n", "pre_action_mask", "=", "[", "m", ".", "action_mask", "for", "m", "in", "b_memory", "]", "\n", "post_action_mask", "=", "[", "m", ".", "next_action_mask", "for", "m", "in", "b_memory", "]", "\n", "\n", "post_trajectories", "=", "self", ".", "tjs", ".", "fetch_batch_states", "(", "trajectory_id", ",", "state_id", ")", "\n", "pre_trajectories", "=", "self", ".", "tjs", ".", "fetch_batch_pre_states", "(", "\n", "trajectory_id", ",", "state_id", ")", "\n", "\n", "post_states", "=", "[", "\n", "state", "[", "0", "]", "for", "state", "in", "\n", "self", ".", "stc", ".", "fetch_batch_states", "(", "trajectory_id", ",", "state_id", ")", "]", "\n", "pre_states", "=", "[", "\n", "state", "[", "0", "]", "for", "state", "in", "\n", "self", ".", "stc", ".", "fetch_batch_pre_states", "(", "trajectory_id", ",", "state_id", ")", "]", "\n", "\n", "action_len", "=", "(", "\n", "[", "self", ".", "actor", ".", "get_action_len", "(", "gid", ")", "for", "gid", "in", "game_id", "]", ")", "\n", "action_matrix", "=", "(", "\n", "[", "self", ".", "actor", ".", "get_action_matrix", "(", "gid", ")", "for", "gid", "in", "game_id", "]", ")", "\n", "\n", "b_weight", "=", "self", ".", "core", ".", "train_one_batch", "(", "\n", "pre_trajectories", "=", "pre_trajectories", ",", "\n", "post_trajectories", "=", "post_trajectories", ",", "\n", "pre_states", "=", "pre_states", ",", "\n", "post_states", "=", "post_states", ",", "\n", "action_matrix", "=", "action_matrix", ",", "\n", "action_len", "=", "action_len", ",", "\n", "pre_action_mask", "=", "pre_action_mask", ",", "\n", "post_action_mask", "=", "post_action_mask", ",", "\n", "dones", "=", "is_terminal", ",", "\n", "rewards", "=", "reward", ",", "\n", "action_idx", "=", "action_id", ",", "\n", "b_weight", "=", "b_weight", ",", "\n", "step", "=", "self", ".", "total_t", ",", "\n", "others", "=", "other_train_data", ")", "\n", "\n", "self", ".", "memo", ".", "batch_update", "(", "b_idx", ",", "b_weight", ")", "\n", "\n", "if", "self", ".", "_is_time_to_save", "(", ")", ":", "\n", "            ", "self", ".", "save_snapshot", "(", ")", "\n", "self", ".", "core", ".", "save_model", "(", ")", "\n", "self", ".", "core", ".", "create_or_reload_target_model", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.agents.base_agent.BaseAgent._clean_stale_context": [[806, 809], ["base_agent.BaseAgent.tjs.request_delete_keys", "base_agent.BaseAgent.stc.request_delete_keys"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.deepword.trajectory.Trajectory.request_delete_keys", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.trajectory.Trajectory.request_delete_keys"], ["", "", "def", "_clean_stale_context", "(", "self", ",", "tids", ":", "List", "[", "int", "]", ")", "->", "None", ":", "\n", "        ", "self", ".", "tjs", ".", "request_delete_keys", "(", "tids", ")", "\n", "self", ".", "stc", ".", "request_delete_keys", "(", "tids", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.agents.base_agent.BaseAgent._update_status": [[810, 853], ["base_agent.BaseAgent._get_instant_reward", "deepword.agents.utils.remove_zork_version_info", "deepword.utils.report_status", "base_agent.BaseAgent.info", "base_agent.BaseAgent._collect_floor_plan", "base_agent.BaseAgent.info", "base_agent.BaseAgent.debug", "deepword.utils.report_status", "termcolor.colored", "termcolor.colored", "termcolor.colored", "master.replace().strip", "termcolor.colored", "master.replace", "master.replace"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.agents.base_agent.BaseAgent._get_instant_reward", "home.repos.pwc.inspect_result.yinxusen_deepword.agents.utils.remove_zork_version_info", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.utils.report_status", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.log.Logging.info", "home.repos.pwc.inspect_result.yinxusen_deepword.agents.base_agent.BaseAgent._collect_floor_plan", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.log.Logging.info", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.log.Logging.debug", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.utils.report_status"], ["", "def", "_update_status", "(", "\n", "self", ",", "obs", ":", "List", "[", "str", "]", ",", "scores", ":", "List", "[", "float", "]", ",", "dones", ":", "List", "[", "bool", "]", ",", "\n", "infos", ":", "Dict", "[", "str", ",", "List", "[", "Any", "]", "]", ")", "->", "Tuple", "[", "str", ",", "float", "]", ":", "\n", "        ", "desc", "=", "infos", "[", "INFO_KEY", ".", "desc", "]", "[", "0", "]", "\n", "master", "=", "(", "remove_zork_version_info", "(", "desc", ")", "\n", "if", "self", ".", "in_game_t", "==", "0", "and", "desc", "else", "obs", "[", "0", "]", ")", "\n", "instant_reward", "=", "self", ".", "_get_instant_reward", "(", "\n", "scores", "[", "0", "]", ",", "obs", "[", "0", "]", ",", "dones", "[", "0", "]", ",", "\n", "infos", "[", "INFO_KEY", ".", "won", "]", "[", "0", "]", ",", "infos", "[", "INFO_KEY", ".", "lost", "]", "[", "0", "]", ")", "\n", "\n", "if", "self", ".", "_last_action", ":", "\n", "            ", "status", "=", "report_status", "(", "[", "\n", "(", "\"t\"", ",", "self", ".", "total_t", ")", ",", "\n", "(", "\"in_game_t\"", ",", "self", ".", "in_game_t", ")", ",", "\n", "(", "\"action\"", ",", "colored", "(", "\n", "self", ".", "_last_action", ".", "action", ",", "\n", "\"yellow\"", "\n", "if", "self", ".", "_last_action", ".", "action_type", "==", "ACT_TYPE", ".", "policy_drrn", "\n", "else", "\"red\"", ",", "attrs", "=", "[", "\"underline\"", "]", ")", ")", ",", "\n", "(", "\"master\"", ",", "colored", "(", "\n", "master", ".", "replace", "(", "\"\\n\"", ",", "\" \"", ")", ".", "strip", "(", ")", ",", "\n", "\"cyan\"", ",", "attrs", "=", "[", "\"underline\"", "]", ")", ")", ",", "\n", "(", "\"reward\"", ",", "colored", "(", "\n", "\"{:.2f}\"", ".", "format", "(", "instant_reward", ")", ",", "\n", "\"green\"", "if", "instant_reward", ">", "0", "else", "\"red\"", ")", ")", ",", "\n", "(", "\"is_terminal\"", ",", "dones", "[", "0", "]", ")", "]", ")", "\n", "if", "instant_reward", ">", "0", "or", "dones", "[", "0", "]", ":", "\n", "                ", "self", ".", "info", "(", "status", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "debug", "(", "status", ")", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "info", "(", "report_status", "(", "[", "\n", "(", "\"master\"", ",", "colored", "(", "\n", "master", ".", "replace", "(", "\"\\n\"", ",", "\" \"", ")", ",", "\"cyan\"", ",", "attrs", "=", "[", "\"underline\"", "]", ")", ")", ",", "\n", "(", "\"max_score\"", ",", "infos", "[", "INFO_KEY", ".", "max_score", "]", "[", "0", "]", ")", "\n", "]", ")", ")", "\n", "\n", "", "if", "self", ".", "hp", ".", "collect_floor_plan", ":", "\n", "            ", "self", ".", "_prev_place", "=", "self", ".", "_curr_place", "\n", "self", ".", "_curr_place", "=", "self", ".", "_collect_floor_plan", "(", "\n", "master", ",", "self", ".", "_prev_place", ")", "\n", "\n", "", "return", "master", ",", "instant_reward", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.agents.base_agent.BaseAgent._prepare_actions": [[854, 860], ["base_agent.BaseAgent._go_with_floor_plan"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.agents.base_agent.BaseAgent._go_with_floor_plan"], ["", "def", "_prepare_actions", "(", "self", ",", "admissible_actions", ":", "List", "[", "str", "]", ")", "->", "List", "[", "str", "]", ":", "\n", "        ", "if", "self", ".", "hp", ".", "collect_floor_plan", ":", "\n", "            ", "effective_actions", "=", "self", ".", "_go_with_floor_plan", "(", "admissible_actions", ")", "\n", "", "else", ":", "\n", "            ", "effective_actions", "=", "admissible_actions", "\n", "", "return", "effective_actions", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.agents.base_agent.BaseAgent._collect_new_sample": [[861, 927], ["base_agent.BaseAgent.tokenizer.convert_tokens_to_ids", "base_agent.BaseAgent.tjs.append", "deepword.agents.utils.ObsInventory", "base_agent.BaseAgent.stc.append", "base_agent.BaseAgent._get_admissible_actions", "base_agent.BaseAgent.actor.extend", "base_agent.BaseAgent._prepare_actions", "base_agent.BaseAgent.actor.extend", "base_agent.BaseAgent.tokenizer.tokenize", "deepword.agents.utils.ActionMaster", "isinstance", "isinstance", "base_agent.BaseAgent.tjs.get_last_sid", "deepword.agents.utils.Memolet", "base_agent.BaseAgent.memo.append", "isinstance", "list", "list", "base_agent.BaseAgent.tjs.get_last_sid", "deepword.agents.utils.get_hash_state", "base_agent.BaseAgent.tjs.get_current_tid", "base_agent.BaseAgent.tjs.get_last_sid", "base_agent.BaseAgent._stale_tids.append"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.deepword.tokenizers.BertTokenizer.convert_tokens_to_ids", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.tree_memory.TreeMemory.append", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.tree_memory.TreeMemory.append", "home.repos.pwc.inspect_result.yinxusen_deepword.agents.base_agent.BaseAgent._get_admissible_actions", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.floor_plan.FloorPlanCollector.extend", "home.repos.pwc.inspect_result.yinxusen_deepword.agents.competition_agent.CompetitionAgent._prepare_actions", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.floor_plan.FloorPlanCollector.extend", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.tokenizers.BertTokenizer.tokenize", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.trajectory.Trajectory.get_last_sid", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.tree_memory.TreeMemory.append", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.trajectory.Trajectory.get_last_sid", "home.repos.pwc.inspect_result.yinxusen_deepword.agents.utils.get_hash_state", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.trajectory.Trajectory.get_current_tid", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.trajectory.Trajectory.get_last_sid", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.tree_memory.TreeMemory.append"], ["", "def", "_collect_new_sample", "(", "\n", "self", ",", "master", ":", "str", ",", "instant_reward", ":", "float", ",", "dones", ":", "List", "[", "bool", "]", ",", "\n", "infos", ":", "Dict", "[", "str", ",", "List", "[", "Any", "]", "]", ")", "->", "Tuple", "[", "\n", "List", "[", "str", "]", ",", "np", ".", "ndarray", ",", "np", ".", "ndarray", ",", "float", "]", ":", "\n", "\n", "        ", "master_tokens", "=", "self", ".", "tokenizer", ".", "convert_tokens_to_ids", "(", "\n", "self", ".", "tokenizer", ".", "tokenize", "(", "master", ")", ")", "\n", "if", "self", ".", "_last_action", "is", "not", "None", ":", "\n", "            ", "if", "self", ".", "hp", ".", "action_padding_in_tj", ":", "\n", "                ", "action_tokens", "=", "list", "(", "self", ".", "_last_action", ".", "token_idx", ")", "\n", "", "else", ":", "# trim action ids to its actual length", "\n", "                ", "action_tokens", "=", "list", "(", "\n", "self", ".", "_last_action", ".", "token_idx", "[", ":", "self", ".", "_last_action", ".", "action_len", "]", ")", "\n", "", "", "else", ":", "\n", "            ", "action_tokens", "=", "[", "]", "\n", "\n", "", "self", ".", "tjs", ".", "append", "(", "ActionMaster", "(", "\n", "action_ids", "=", "action_tokens", ",", "\n", "master_ids", "=", "master_tokens", ",", "\n", "objective_ids", "=", "self", ".", "_objective_ids", ",", "\n", "action", "=", "self", ".", "_last_action", ".", "action", "if", "self", ".", "_last_action", "else", "\"\"", ",", "\n", "master", "=", "master", ")", ")", "\n", "\n", "obs", "=", "infos", "[", "INFO_KEY", ".", "desc", "]", "[", "0", "]", "\n", "inv", "=", "infos", "[", "INFO_KEY", ".", "inventory", "]", "[", "0", "]", "\n", "# TODO: need to inform user if obs and inv are empty", "\n", "# TODO: otherwise, the DSQN-related experiments are wrong", "\n", "if", "not", "isinstance", "(", "obs", ",", "str", ")", ":", "\n", "            ", "obs", "=", "\"\"", "\n", "", "if", "not", "isinstance", "(", "inv", ",", "str", ")", ":", "\n", "            ", "inv", "=", "\"\"", "\n", "", "state", "=", "ObsInventory", "(", "\n", "obs", "=", "obs", ",", "\n", "inventory", "=", "inv", ",", "\n", "sid", "=", "self", ".", "tjs", ".", "get_last_sid", "(", ")", ",", "\n", "hs", "=", "get_hash_state", "(", "obs", ",", "inv", ")", ")", "\n", "self", ".", "stc", ".", "append", "(", "state", ")", "\n", "\n", "admissible_actions", "=", "self", ".", "_get_admissible_actions", "(", "infos", ")", "\n", "sys_action_mask", "=", "self", ".", "actor", ".", "extend", "(", "admissible_actions", ")", "\n", "effective_actions", "=", "self", ".", "_prepare_actions", "(", "admissible_actions", ")", "\n", "action_mask", "=", "self", ".", "actor", ".", "extend", "(", "effective_actions", ")", "\n", "\n", "if", "self", ".", "tjs", ".", "get_last_sid", "(", ")", ">", "0", ":", "\n", "            ", "memo_let", "=", "Memolet", "(", "\n", "tid", "=", "self", ".", "tjs", ".", "get_current_tid", "(", ")", ",", "\n", "sid", "=", "self", ".", "tjs", ".", "get_last_sid", "(", ")", ",", "\n", "gid", "=", "self", ".", "game_id", ",", "\n", "aid", "=", "self", ".", "_last_action", ".", "action_idx", ",", "\n", "token_id", "=", "self", ".", "_last_action", ".", "token_idx", ",", "\n", "a_len", "=", "self", ".", "_last_action", ".", "action_len", ",", "\n", "a_type", "=", "self", ".", "_last_action", ".", "action_type", ",", "\n", "reward", "=", "instant_reward", ",", "\n", "is_terminal", "=", "dones", "[", "0", "]", ",", "\n", "action_mask", "=", "self", ".", "_last_action_mask", ",", "\n", "sys_action_mask", "=", "self", ".", "_last_sys_action_mask", ",", "\n", "next_action_mask", "=", "action_mask", ",", "\n", "next_sys_action_mask", "=", "sys_action_mask", ",", "\n", "q_actions", "=", "self", ".", "_last_action", ".", "q_actions", "\n", ")", "\n", "original_data", "=", "self", ".", "memo", ".", "append", "(", "memo_let", ")", "\n", "if", "isinstance", "(", "original_data", ",", "Memolet", ")", ":", "\n", "                ", "if", "original_data", ".", "is_terminal", ":", "\n", "                    ", "self", ".", "_stale_tids", ".", "append", "(", "original_data", ".", "tid", ")", "\n", "\n", "", "", "", "return", "effective_actions", ",", "action_mask", ",", "sys_action_mask", ",", "instant_reward", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.agents.base_agent.BaseAgent._next_step_action": [[928, 958], ["base_agent.BaseAgent._choose_action", "base_agent.BaseAgent.eps_getter.eps", "action.startswith", "action.split"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.agents.base_agent.BaseAgent._choose_action", "home.repos.pwc.inspect_result.yinxusen_deepword.agents.utils.ScannerDecayEPS.eps"], ["", "def", "_next_step_action", "(", "\n", "self", ",", "\n", "actions", ":", "List", "[", "str", "]", ",", "\n", "instant_reward", ":", "float", ",", "\n", "action_mask", ":", "np", ".", "ndarray", ",", "\n", "sys_action_mask", ":", "np", ".", "ndarray", ")", "->", "str", ":", "\n", "\n", "        ", "if", "self", ".", "is_training", ":", "\n", "            ", "self", ".", "eps", "=", "self", ".", "eps_getter", ".", "eps", "(", "self", ".", "total_t", "-", "self", ".", "hp", ".", "observation_t", ")", "\n", "", "else", ":", "\n", "            ", "pass", "\n", "", "self", ".", "_last_action", "=", "self", ".", "_choose_action", "(", "\n", "actions", ",", "action_mask", ",", "instant_reward", ")", "\n", "action", "=", "self", ".", "_last_action", ".", "action", "\n", "action_idx", "=", "self", ".", "_last_action", ".", "action_idx", "\n", "\n", "if", "self", ".", "_last_action", ".", "action_type", "==", "ACT_TYPE", ".", "policy_drrn", ":", "\n", "            ", "if", "action_idx", "not", "in", "self", ".", "_cnt_action", ":", "\n", "                ", "self", ".", "_cnt_action", "[", "action_idx", "]", "=", "0.", "\n", "", "self", ".", "_cnt_action", "[", "action_idx", "]", "+=", "0.1", "\n", "\n", "", "self", ".", "_last_action_mask", "=", "action_mask", "\n", "self", ".", "_last_sys_action_mask", "=", "sys_action_mask", "\n", "# revert back go actions for the game playing", "\n", "# TODO: better collecting floor plan schedule?", "\n", "# TODO: better condition for reverting go-actions?", "\n", "if", "(", "self", ".", "hp", ".", "collect_floor_plan", "and", "action", ".", "startswith", "(", "\"go\"", ")", "\n", "and", "\"to\"", "in", "action", ")", ":", "\n", "            ", "action", "=", "\" \"", ".", "join", "(", "action", ".", "split", "(", ")", "[", ":", "2", "]", ")", "\n", "", "return", "action", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.agents.base_agent.BaseAgent.act": [[959, 999], ["base_agent.BaseAgent._update_status", "base_agent.BaseAgent._collect_new_sample", "all", "base_agent.BaseAgent._next_step_action", "base_agent.BaseAgent._start_episode", "len", "base_agent.BaseAgent._end_episode", "base_agent.BaseAgent._train_one_batch", "len"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.agents.competition_agent.CompetitionAgent._update_status", "home.repos.pwc.inspect_result.yinxusen_deepword.agents.base_agent.BaseAgent._collect_new_sample", "home.repos.pwc.inspect_result.yinxusen_deepword.agents.base_agent.BaseAgent._next_step_action", "home.repos.pwc.inspect_result.yinxusen_deepword.agents.base_agent.BaseAgent._start_episode", "home.repos.pwc.inspect_result.yinxusen_deepword.agents.base_agent.BaseAgent._end_episode", "home.repos.pwc.inspect_result.yinxusen_deepword.agents.base_agent.BaseAgent._train_one_batch"], ["", "def", "act", "(", "self", ",", "obs", ":", "List", "[", "str", "]", ",", "scores", ":", "List", "[", "int", "]", ",", "dones", ":", "List", "[", "bool", "]", ",", "\n", "infos", ":", "Dict", "[", "str", ",", "List", "[", "Any", "]", "]", ")", "->", "Optional", "[", "List", "[", "str", "]", "]", ":", "\n", "        ", "\"\"\"\n        Acts upon the current list of observations.\n        One text command must be returned for each observation.\n\n        Args:\n            obs: observed texts for each game\n            scores: score obtained so far for each game\n            dones: whether a game is finished\n            infos: extra information requested from TextWorld\n\n        Returns:\n            if all dones, return None, else return actions\n\n        Notes:\n            Commands returned for games marked as `done` have no effect.\n            The states for finished games are simply copy over until all\n            games are done.\n        \"\"\"", "\n", "if", "not", "self", ".", "_episode_has_started", ":", "\n", "            ", "self", ".", "_start_episode", "(", "obs", ",", "infos", ")", "\n", "\n", "", "assert", "len", "(", "obs", ")", "==", "1", ",", "\"cannot handle batch game training\"", "\n", "master", ",", "instant_reward", "=", "self", ".", "_update_status", "(", "obs", ",", "scores", ",", "dones", ",", "infos", ")", "\n", "(", "actions", ",", "action_mask", ",", "sys_action_mask", ",", "instant_reward", "\n", ")", "=", "self", ".", "_collect_new_sample", "(", "master", ",", "instant_reward", ",", "dones", ",", "infos", ")", "\n", "# notice the position of all(dones)", "\n", "# make sure add the last action-master pair into memory", "\n", "if", "all", "(", "dones", ")", ":", "\n", "            ", "self", ".", "_end_episode", "(", "obs", ",", "scores", ",", "infos", ")", "\n", "return", "None", "\n", "\n", "", "player_t", "=", "self", ".", "_next_step_action", "(", "\n", "actions", ",", "instant_reward", ",", "action_mask", ",", "sys_action_mask", ")", "\n", "if", "self", ".", "is_training", "and", "self", ".", "total_t", ">=", "self", ".", "hp", ".", "observation_t", ":", "\n", "            ", "self", ".", "_train_one_batch", "(", ")", "\n", "", "self", ".", "total_t", "+=", "1", "\n", "self", ".", "in_game_t", "+=", "1", "\n", "return", "[", "player_t", "]", "*", "len", "(", "obs", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.yinxusen_deepword.agents.cores.BaseCore.__init__": [[52, 66], ["deepword.log.Logging.__init__"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.models.drrn_modeling.PseudoSeq2SeqDRRN.__init__"], ["def", "__init__", "(", "\n", "self", ",", "hp", ":", "HParams", ",", "model_dir", ":", "str", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        Initialize A Core for an agent.\n\n        Args:\n            hp: hyper-parameters, see :py:mod:`deepword.hparams`\n            model_dir: path to save or load model\n        \"\"\"", "\n", "super", "(", "BaseCore", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "hp", "=", "hp", "\n", "self", ".", "model_dir", "=", "model_dir", "\n", "self", ".", "loaded_ckpt_step", ":", "int", "=", "0", "\n", "self", ".", "is_training", ":", "bool", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.agents.cores.BaseCore.policy": [[67, 90], ["NotImplementedError"], "methods", ["None"], ["", "def", "policy", "(", "\n", "self", ",", "\n", "trajectory", ":", "List", "[", "ActionMaster", "]", ",", "\n", "state", ":", "Optional", "[", "ObsInventory", "]", ",", "\n", "action_matrix", ":", "np", ".", "ndarray", ",", "\n", "action_len", ":", "np", ".", "ndarray", ",", "\n", "action_mask", ":", "np", ".", "ndarray", ")", "->", "np", ".", "ndarray", ":", "\n", "        ", "\"\"\"\n        Infer from policy.\n\n        Args:\n            trajectory: a list of ActionMaster\n            state: the current game state of observation + inventory\n            action_matrix: a matrix of all actions for the game, 2D array,\n             each row represents a tokenized and indexed action.\n            action_len: 1D array, length for each action.\n            action_mask: 1D array, indices of admissible actions from\n             all actions of the game.\n\n        Returns:\n            Q-values for actions in the action_matrix\n        \"\"\"", "\n", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.agents.cores.BaseCore.save_model": [[91, 99], ["NotImplementedError"], "methods", ["None"], ["", "def", "save_model", "(", "self", ",", "t", ":", "Optional", "[", "int", "]", "=", "None", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        Save current model with training steps\n\n        Args:\n            t: training steps, `None` falls back to default global steps\n        \"\"\"", "\n", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.agents.cores.BaseCore.init": [[100, 112], ["NotImplementedError"], "methods", ["None"], ["", "def", "init", "(", "\n", "self", ",", "is_training", ":", "bool", ",", "load_best", ":", "bool", "=", "False", ",", "\n", "restore_from", ":", "Optional", "[", "str", "]", "=", "None", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        Initialize models of the core.\n\n        Args:\n            is_training: training or evaluation\n            load_best: load from best weights, otherwise last weights\n            restore_from: path to restore\n        \"\"\"", "\n", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.agents.cores.BaseCore.train_one_batch": [[113, 151], ["NotImplementedError"], "methods", ["None"], ["", "def", "train_one_batch", "(", "\n", "self", ",", "\n", "pre_trajectories", ":", "List", "[", "List", "[", "ActionMaster", "]", "]", ",", "\n", "post_trajectories", ":", "List", "[", "List", "[", "ActionMaster", "]", "]", ",", "\n", "pre_states", ":", "Optional", "[", "List", "[", "ObsInventory", "]", "]", ",", "\n", "post_states", ":", "Optional", "[", "List", "[", "ObsInventory", "]", "]", ",", "\n", "action_matrix", ":", "List", "[", "np", ".", "ndarray", "]", ",", "\n", "action_len", ":", "List", "[", "np", ".", "ndarray", "]", ",", "\n", "pre_action_mask", ":", "List", "[", "np", ".", "ndarray", "]", ",", "\n", "post_action_mask", ":", "List", "[", "np", ".", "ndarray", "]", ",", "\n", "dones", ":", "List", "[", "bool", "]", ",", "\n", "rewards", ":", "List", "[", "float", "]", ",", "\n", "action_idx", ":", "List", "[", "int", "]", ",", "\n", "b_weight", ":", "np", ".", "ndarray", ",", "\n", "step", ":", "int", ",", "others", ":", "Any", ")", "->", "np", ".", "ndarray", ":", "\n", "        ", "\"\"\"\n        Train the core with one batch of data.\n\n        Args:\n            pre_trajectories: previous trajectories\n            post_trajectories: post trajectories\n            pre_states: previous states\n            post_states: post states\n            action_matrix: all actions for each of previous trajectories\n            action_len: length of actions\n            pre_action_mask: action masks for each of previous trajectories\n            post_action_mask: action masks for each of post trajectories\n            dones: game terminated or not for post trajectories\n            rewards: rewards received for reaching post trajectories\n            action_idx: actions used for reaching post trajectories\n            b_weight: 1D array, weight for each data point\n            step: current training step\n            others: other information passed for training purpose\n\n        Returns: Absolute loss between expected Q-value and predicted Q-value\n         for each data point\n        \"\"\"", "\n", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.agents.cores.BaseCore.create_or_reload_target_model": [[152, 161], ["NotImplementedError"], "methods", ["None"], ["", "def", "create_or_reload_target_model", "(", "\n", "self", ",", "restore_from", ":", "Optional", "[", "str", "]", "=", "None", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        Create (if not exist) or reload weights for the target model\n\n        Args:\n            restore_from: the path to restore weights\n        \"\"\"", "\n", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.agents.cores.TFCore.__init__": [[167, 189], ["cores.BaseCore.__init__", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "cores.TFCore._init_devices"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.models.drrn_modeling.PseudoSeq2SeqDRRN.__init__", "home.repos.pwc.inspect_result.yinxusen_deepword.agents.cores.TFCore._init_devices"], ["def", "__init__", "(", "\n", "self", ",", "hp", ":", "HParams", ",", "model_dir", ":", "str", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        Args:\n            hp: hyper-parameters\n            model_dir: path to model dir\n        \"\"\"", "\n", "super", "(", "TFCore", ",", "self", ")", ".", "__init__", "(", "hp", ",", "model_dir", ")", "\n", "self", ".", "hp", ":", "HParams", "=", "hp", "\n", "self", ".", "model_dir", ":", "str", "=", "model_dir", "\n", "self", ".", "model", ":", "Optional", "[", "DQNModel", "]", "=", "None", "\n", "self", ".", "target_model", ":", "Optional", "[", "DQNModel", "]", "=", "None", "\n", "self", ".", "sess", ":", "Optional", "[", "Session", "]", "=", "None", "\n", "self", ".", "target_sess", ":", "Optional", "[", "Session", "]", "=", "None", "\n", "self", ".", "train_summary_writer", ":", "Optional", "[", "FileWriter", "]", "=", "None", "\n", "self", ".", "ckpt_path", "=", "path", ".", "join", "(", "self", ".", "model_dir", ",", "'last_weights'", ")", "\n", "self", ".", "best_ckpt_path", "=", "path", ".", "join", "(", "self", ".", "model_dir", ",", "'best_weights'", ")", "\n", "self", ".", "ckpt_prefix", "=", "path", ".", "join", "(", "self", ".", "ckpt_path", ",", "'after-epoch'", ")", "\n", "self", ".", "best_ckpt_prefix", "=", "path", ".", "join", "(", "self", ".", "best_ckpt_path", ",", "'after-epoch'", ")", "\n", "self", ".", "saver", ":", "Optional", "[", "Saver", "]", "=", "None", "\n", "self", ".", "target_saver", ":", "Optional", "[", "Saver", "]", "=", "None", "\n", "self", ".", "d4train", ",", "self", ".", "d4eval", ",", "self", ".", "d4target", "=", "self", ".", "_init_devices", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.agents.cores.TFCore._init_devices": [[190, 212], ["tensorflow.python.client.device_lib.list_local_devices", "deepword.utils.eprint", "deepword.utils.eprint", "deepword.utils.eprint", "deepword.utils.eprint", "deepword.utils.eprint", "len", "len", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.deepword.utils.eprint", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.utils.eprint", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.utils.eprint", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.utils.eprint", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.utils.eprint"], ["", "@", "classmethod", "\n", "def", "_init_devices", "(", "cls", ")", ":", "\n", "        ", "all_devices", "=", "device_lib", ".", "list_local_devices", "(", ")", "\n", "eprint", "(", "\"number of all devices: {}\"", ".", "format", "(", "len", "(", "all_devices", ")", ")", ")", "\n", "eprint", "(", "all_devices", ")", "\n", "devices", "=", "[", "d", ".", "name", "for", "d", "in", "all_devices", "if", "d", ".", "device_type", "==", "\"GPU\"", "]", "\n", "eprint", "(", "\"list of GPU devices:\"", ")", "\n", "eprint", "(", "devices", ")", "\n", "eprint", "(", "\"number of gpu devices: {}\"", ".", "format", "(", "len", "(", "devices", ")", ")", ")", "\n", "if", "len", "(", "devices", ")", "==", "0", ":", "\n", "            ", "d4train", ",", "d4eval", ",", "d4target", "=", "(", "\n", "\"/device:CPU:0\"", ",", "\"/device:CPU:0\"", ",", "\"/device:CPU:0\"", ")", "\n", "", "elif", "len", "(", "devices", ")", "==", "1", ":", "\n", "            ", "d4train", ",", "d4eval", ",", "d4target", "=", "devices", "[", "0", "]", ",", "devices", "[", "0", "]", ",", "devices", "[", "0", "]", "\n", "", "elif", "len", "(", "devices", ")", "==", "2", ":", "\n", "            ", "d4train", "=", "devices", "[", "0", "]", "\n", "d4eval", ",", "d4target", "=", "devices", "[", "1", "]", ",", "devices", "[", "1", "]", "\n", "", "else", ":", "\n", "            ", "d4train", "=", "devices", "[", "0", "]", "\n", "d4eval", "=", "devices", "[", "1", "]", "\n", "d4target", "=", "devices", "[", "2", "]", "\n", "", "return", "d4train", ",", "d4eval", ",", "d4target", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.agents.cores.TFCore.save_model": [[213, 224], ["cores.TFCore.info", "cores.TFCore.saver.save", "tensorflow.train.get_or_create_global_step"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.deepword.log.Logging.info"], ["", "def", "save_model", "(", "self", ",", "t", ":", "Optional", "[", "int", "]", "=", "None", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        Save model to model_dir with the number of training steps.\n\n        Args:\n            t: number of training steps, `None` falls back to global step\n        \"\"\"", "\n", "self", ".", "info", "(", "'save model'", ")", "\n", "if", "t", "is", "None", ":", "\n", "            ", "t", "=", "tf", ".", "train", ".", "get_or_create_global_step", "(", "graph", "=", "self", ".", "model", ".", "graph", ")", "\n", "", "self", ".", "saver", ".", "save", "(", "self", ".", "sess", ",", "self", ".", "ckpt_prefix", ",", "global_step", "=", "t", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.agents.cores.TFCore._get_target_model": [[225, 229], ["cores.TFCore.create_or_reload_target_model"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.agents.cores.TabularCore.create_or_reload_target_model"], ["", "def", "_get_target_model", "(", "self", ")", "->", "Tuple", "[", "Any", ",", "Session", "]", ":", "\n", "        ", "if", "self", ".", "target_model", "is", "None", ":", "\n", "            ", "self", ".", "create_or_reload_target_model", "(", ")", "\n", "", "return", "self", ".", "target_model", ",", "self", ".", "target_sess", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.agents.cores.TFCore._create_model_instance": [[230, 235], ["deepword.utils.model_name2clazz", "cores.TFCore.debug", "deepword.utils.model_name2clazz.get_train_model"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.deepword.utils.model_name2clazz", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.log.Logging.debug", "home.repos.pwc.inspect_result.yinxusen_deepword.models.drrn_modeling.CnnDRRN.get_train_model"], ["", "def", "_create_model_instance", "(", "self", ",", "device", ")", ":", "\n", "        ", "model_creator", "=", "model_name2clazz", "(", "self", ".", "hp", ".", "model_creator", ")", "\n", "self", ".", "debug", "(", "\n", "\"try to create train model: {}\"", ".", "format", "(", "self", ".", "hp", ".", "model_creator", ")", ")", "\n", "return", "model_creator", ".", "get_train_model", "(", "self", ".", "hp", ",", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.agents.cores.TFCore._create_eval_model_instance": [[236, 241], ["deepword.utils.model_name2clazz", "cores.TFCore.debug", "deepword.utils.model_name2clazz.get_eval_model"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.deepword.utils.model_name2clazz", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.log.Logging.debug", "home.repos.pwc.inspect_result.yinxusen_deepword.models.drrn_modeling.CnnDRRN.get_eval_model"], ["", "def", "_create_eval_model_instance", "(", "self", ",", "device", ")", ":", "\n", "        ", "model_creator", "=", "model_name2clazz", "(", "self", ".", "hp", ".", "model_creator", ")", "\n", "self", ".", "debug", "(", "\n", "\"try to create eval model: {}\"", ".", "format", "(", "self", ".", "hp", ".", "model_creator", ")", ")", "\n", "return", "model_creator", ".", "get_eval_model", "(", "self", ".", "hp", ",", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.agents.cores.TFCore._create_model": [[242, 263], ["tensorflow.ConfigProto", "tensorflow.Session", "cores.TFCore._create_model_instance", "cores.TFCore.info", "cores.TFCore._create_eval_model_instance", "cores.TFCore.info", "cores.TFCore.graph.as_default", "tensorflow.Session.run", "tensorflow.train.Saver", "tensorflow.global_variables_initializer"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.agents.cores.TFCore._create_model_instance", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.log.Logging.info", "home.repos.pwc.inspect_result.yinxusen_deepword.agents.cores.TFCore._create_eval_model_instance", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.log.Logging.info"], ["", "def", "_create_model", "(", "\n", "self", ",", "is_training", "=", "True", ",", "\n", "device", ":", "Optional", "[", "str", "]", "=", "None", ")", "->", "Tuple", "[", "Session", ",", "Any", ",", "Saver", "]", ":", "\n", "        ", "if", "is_training", ":", "\n", "            ", "device", "=", "device", "if", "device", "else", "self", ".", "d4train", "\n", "model", "=", "self", ".", "_create_model_instance", "(", "device", ")", "\n", "self", ".", "info", "(", "\"create train model on device {}\"", ".", "format", "(", "device", ")", ")", "\n", "", "else", ":", "\n", "            ", "device", "=", "device", "if", "device", "else", "self", ".", "d4eval", "\n", "model", "=", "self", ".", "_create_eval_model_instance", "(", "device", ")", "\n", "self", ".", "info", "(", "\"create eval model on device {}\"", ".", "format", "(", "device", ")", ")", "\n", "\n", "", "conf", "=", "tf", ".", "ConfigProto", "(", "\n", "log_device_placement", "=", "False", ",", "allow_soft_placement", "=", "True", ")", "\n", "sess", "=", "tf", ".", "Session", "(", "graph", "=", "model", ".", "graph", ",", "config", "=", "conf", ")", "\n", "with", "model", ".", "graph", ".", "as_default", "(", ")", ":", "\n", "            ", "sess", ".", "run", "(", "tf", ".", "global_variables_initializer", "(", ")", ")", "\n", "saver", "=", "tf", ".", "train", ".", "Saver", "(", "\n", "max_to_keep", "=", "self", ".", "hp", ".", "max_snapshot_to_keep", ",", "\n", "save_relative_paths", "=", "True", ")", "\n", "", "return", "sess", ",", "model", ",", "saver", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.agents.cores.TFCore.set_d4eval": [[264, 273], ["None"], "methods", ["None"], ["", "def", "set_d4eval", "(", "self", ",", "device", ":", "str", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        Set the device for evaluation, e.g. \"/device:CPU:0\", \"/device:GPU:1\"\n        Otherwise, a default device allocation will be used.\n\n        Args:\n            device: device name\n        \"\"\"", "\n", "self", ".", "d4eval", "=", "device", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.agents.cores.TFCore._load_model": [[274, 293], ["model.safe_loading", "cores.TFCore.warning", "tensorflow.train.latest_checkpoint", "tensorflow.train.latest_checkpoint", "termcolor.colored"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.models.models.TFModel.safe_loading", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.log.Logging.warning"], ["", "def", "_load_model", "(", "\n", "self", ",", "sess", ":", "Session", ",", "model", ":", "DQNModel", ",", "saver", ":", "Saver", ",", "\n", "restore_from", ":", "Optional", "[", "str", "]", "=", "None", ",", "load_best", ":", "bool", "=", "False", ")", "->", "int", ":", "\n", "        ", "if", "restore_from", "is", "None", ":", "\n", "            ", "if", "load_best", ":", "\n", "                ", "restore_from", "=", "tf", ".", "train", ".", "latest_checkpoint", "(", "self", ".", "best_ckpt_path", ")", "\n", "", "else", ":", "\n", "                ", "restore_from", "=", "tf", ".", "train", ".", "latest_checkpoint", "(", "self", ".", "ckpt_path", ")", "\n", "\n", "# only allow safe_loading during training", "\n", "# safe_loading for evaluation could cause evaluation inaccurate.", "\n", "", "", "if", "restore_from", "is", "not", "None", ":", "\n", "            ", "trained_step", "=", "model", ".", "safe_loading", "(", "sess", ",", "saver", ",", "restore_from", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "warning", "(", "colored", "(", "\n", "\"No checkpoint to load, using untrained model\"", ",", "\n", "\"red\"", ",", "\"on_white\"", ",", "[", "\"bold\"", ",", "\"blink\"", ",", "\"underline\"", "]", ")", ")", "\n", "trained_step", "=", "0", "\n", "", "return", "trained_step", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.agents.cores.TFCore.trajectory2input": [[294, 311], ["deepword.utils.flatten", "len", "len"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.deepword.utils.flatten"], ["", "def", "trajectory2input", "(", "\n", "self", ",", "trajectory", ":", "List", "[", "ActionMaster", "]", ")", "->", "Tuple", "[", "List", "[", "int", "]", ",", "int", "]", ":", "\n", "        ", "\"\"\"\n        generate src, src_len from trajectory, trimmed by hp.num_tokens\n\n        Args:\n            trajectory: List of ActionMaster\n\n        Returns:\n            src: source indices\n            src_len: length of the src\n        \"\"\"", "\n", "\n", "tj", "=", "flatten", "(", "\n", "[", "x", ".", "ids", "for", "x", "in", "trajectory", "]", "+", "[", "trajectory", "[", "-", "1", "]", ".", "objective_ids", "]", ")", "\n", "tj", "=", "tj", "if", "len", "(", "tj", ")", "<=", "self", ".", "hp", ".", "num_tokens", "else", "tj", "[", "-", "self", ".", "hp", ".", "num_tokens", ":", "]", "\n", "return", "tj", ",", "len", "(", "tj", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.agents.cores.TFCore.batch_trajectory2input": [[312, 336], ["zip", "max", "cores.TFCore.trajectory2input", "len", "len"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.agents.cores.NLUCore.trajectory2input"], ["", "def", "batch_trajectory2input", "(", "\n", "self", ",", "trajectories", ":", "List", "[", "List", "[", "ActionMaster", "]", "]", "\n", ")", "->", "Tuple", "[", "List", "[", "List", "[", "int", "]", "]", ",", "List", "[", "int", "]", "]", ":", "\n", "        ", "\"\"\"\n        generate batch of src, src_len, trimmed by hp.num_tokens\n\n        see :py:func:`deepword.agents.cores.TFCore.trajectory2input`\n\n        Args:\n            trajectories: a batch of trajectories\n\n        Returns:\n            batch of src\n            batch of src_len\n        \"\"\"", "\n", "tjs", ",", "lens", "=", "zip", "(", "*", "[", "self", ".", "trajectory2input", "(", "x", ")", "for", "x", "in", "trajectories", "]", ")", "\n", "\n", "# notice that `trajectory2input` has already trimmed by hp.num_tokens", "\n", "# so no len will be larger than hp.num_tokens", "\n", "max_len", "=", "max", "(", "lens", ")", "\n", "tjs", "=", "[", "\n", "x", "+", "[", "0", "]", "*", "(", "max_len", "-", "len", "(", "x", ")", ")", "if", "len", "(", "x", ")", "<", "max_len", "else", "x", "\n", "for", "x", "in", "tjs", "]", "\n", "return", "tjs", ",", "lens", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.agents.cores.TFCore.init": [[337, 366], ["cores.TFCore._load_model", "cores.TFCore._create_model", "cores.TFCore.create_or_reload_target_model", "os.path.join", "tensorflow.summary.FileWriter"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.agents.cores.TFCore._load_model", "home.repos.pwc.inspect_result.yinxusen_deepword.agents.cores.TFCore._create_model", "home.repos.pwc.inspect_result.yinxusen_deepword.agents.cores.TabularCore.create_or_reload_target_model"], ["", "def", "init", "(", "\n", "self", ",", "is_training", ":", "bool", ",", "load_best", ":", "bool", "=", "False", ",", "\n", "restore_from", ":", "Optional", "[", "str", "]", "=", "None", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        Initialize the core.\n\n        1. create the model\n        2. load the model if there are saved models\n        3. create target model for training\n\n        Args:\n            is_training: True for training, False for evaluation\n            load_best: load best model, otherwise load last weights\n            restore_from: specify the load path, `load_best` will be disabled\n        \"\"\"", "\n", "self", ".", "is_training", "=", "is_training", "\n", "if", "self", ".", "model", "is", "None", ":", "\n", "            ", "self", ".", "sess", ",", "self", ".", "model", ",", "self", ".", "saver", "=", "self", ".", "_create_model", "(", "\n", "self", ".", "is_training", ")", "\n", "", "self", ".", "loaded_ckpt_step", "=", "self", ".", "_load_model", "(", "\n", "self", ".", "sess", ",", "self", ".", "model", ",", "self", ".", "saver", ",", "restore_from", ",", "load_best", ")", "\n", "\n", "if", "self", ".", "is_training", ":", "\n", "# Double DQN must be initialized from the beginning of training", "\n", "            ", "self", ".", "create_or_reload_target_model", "(", "restore_from", ")", "\n", "train_summary_dir", "=", "path", ".", "join", "(", "\n", "self", ".", "model_dir", ",", "\"summaries\"", ",", "\"train\"", ")", "\n", "self", ".", "train_summary_writer", "=", "tf", ".", "summary", ".", "FileWriter", "(", "\n", "train_summary_dir", ",", "self", ".", "sess", ".", "graph", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.agents.cores.TFCore.save_best_model": [[367, 377], ["cores.TFCore.info", "cores.TFCore.saver.save", "cores.TFCore.info", "tensorflow.train.get_or_create_global_step"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.deepword.log.Logging.info", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.log.Logging.info"], ["", "", "def", "save_best_model", "(", "self", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        Save current model to the best weights dir\n        \"\"\"", "\n", "self", ".", "info", "(", "\"save the best model so far\"", ")", "\n", "self", ".", "saver", ".", "save", "(", "\n", "self", ".", "sess", ",", "self", ".", "best_ckpt_prefix", ",", "\n", "global_step", "=", "tf", ".", "train", ".", "get_or_create_global_step", "(", "\n", "graph", "=", "self", ".", "model", ".", "graph", ")", ")", "\n", "self", ".", "info", "(", "\"the best model saved\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.agents.cores.TFCore.create_or_reload_target_model": [[378, 399], ["cores.TFCore._load_model", "cores.TFCore.debug", "cores.TFCore.debug", "cores.TFCore._create_model"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.agents.cores.TFCore._load_model", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.log.Logging.debug", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.log.Logging.debug", "home.repos.pwc.inspect_result.yinxusen_deepword.agents.cores.TFCore._create_model"], ["", "def", "create_or_reload_target_model", "(", "\n", "self", ",", "restore_from", ":", "Optional", "[", "str", "]", "=", "None", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        Create the target model if not exists, then load model from the most\n        recent saved weights.\n\n        Args:\n            restore_from: path to load target model, `None` falls back to\n             default.\n        \"\"\"", "\n", "if", "self", ".", "target_sess", "is", "None", ":", "\n", "            ", "self", ".", "debug", "(", "\"create target model ...\"", ")", "\n", "(", "self", ".", "target_sess", ",", "self", ".", "target_model", ",", "self", ".", "target_saver", "\n", ")", "=", "self", ".", "_create_model", "(", "is_training", "=", "False", ",", "device", "=", "self", ".", "d4target", ")", "\n", "", "else", ":", "\n", "            ", "pass", "\n", "", "trained_step", "=", "self", ".", "_load_model", "(", "\n", "self", ".", "target_sess", ",", "self", ".", "target_model", ",", "self", ".", "target_saver", ",", "\n", "restore_from", ",", "load_best", "=", "False", ")", "\n", "self", ".", "debug", "(", "\n", "\"load target model from trained step {}\"", ".", "format", "(", "trained_step", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.agents.cores.NLUCore.__init__": [[409, 413], ["cores.TFCore.__init__"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.models.drrn_modeling.PseudoSeq2SeqDRRN.__init__"], ["def", "__init__", "(", "self", ",", "hp", ",", "model_dir", ")", ":", "\n", "        ", "super", "(", "NLUCore", ",", "self", ")", ".", "__init__", "(", "hp", ",", "model_dir", ")", "\n", "self", ".", "model", ":", "Optional", "[", "NLUModel", "]", "=", "None", "\n", "self", ".", "target_model", ":", "Optional", "[", "NLUModel", "]", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.agents.cores.NLUCore.trajectory2input": [[414, 436], ["deepword.utils.flatten", "len", "len"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.deepword.utils.flatten"], ["", "def", "trajectory2input", "(", "\n", "self", ",", "trajectory", ":", "List", "[", "ActionMaster", "]", ")", "->", "Tuple", "[", "List", "[", "int", "]", ",", "int", "]", ":", "\n", "        ", "\"\"\"\n        generate src, src_len from trajectory, trimmed by hp.num_tokens\n        For NLU input, this trajectory will be trimmed by\n         hp.num_tokens - 3 - hp.n_tokens_per_action\n        to reserve positions for the CLS and two SEPs.\n\n        Args:\n            trajectory: List of ActionMaster\n\n        Returns:\n            src: source indices\n            src_len: length of the src\n        \"\"\"", "\n", "\n", "tj", "=", "flatten", "(", "\n", "[", "x", ".", "ids", "for", "x", "in", "trajectory", "]", "+", "[", "trajectory", "[", "-", "1", "]", ".", "objective_ids", "]", ")", "\n", "max_bert_tj_len", "=", "self", ".", "hp", ".", "num_tokens", "-", "3", "-", "self", ".", "hp", ".", "n_tokens_per_action", "\n", "if", "len", "(", "tj", ")", ">", "max_bert_tj_len", ":", "\n", "            ", "tj", "=", "tj", "[", "-", "max_bert_tj_len", ":", "]", "\n", "", "return", "tj", ",", "len", "(", "tj", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.agents.cores.NLUCore._compute_expected_q": [[437, 491], ["cores.NLUCore.batch_trajectory2input", "deepword.agents.utils.batch_bert_nlu_input", "cores.NLUCore.debug", "int", "cores.NLUCore.debug", "cores.NLUCore._get_target_model", "range", "numpy.concatenate", "numpy.concatenate", "deepword.agents.utils.get_best_batch_ids", "math.ceil", "min", "target_sess.run", "target_q_actions.append", "cores.NLUCore.sess.run", "dqn_q_actions.append", "numpy.asarray", "numpy.asarray"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.agents.cores.TFCore.batch_trajectory2input", "home.repos.pwc.inspect_result.yinxusen_deepword.agents.utils.batch_bert_nlu_input", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.log.Logging.debug", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.log.Logging.debug", "home.repos.pwc.inspect_result.yinxusen_deepword.agents.cores.TFCore._get_target_model", "home.repos.pwc.inspect_result.yinxusen_deepword.agents.utils.get_best_batch_ids", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.tree_memory.TreeMemory.append", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.tree_memory.TreeMemory.append"], ["", "def", "_compute_expected_q", "(", "\n", "self", ",", "\n", "action_mask", ":", "List", "[", "np", ".", "ndarray", "]", ",", "\n", "trajectories", ":", "List", "[", "List", "[", "ActionMaster", "]", "]", ",", "\n", "action_matrix", ":", "List", "[", "np", ".", "ndarray", "]", ",", "\n", "action_len", ":", "List", "[", "np", ".", "ndarray", "]", ",", "\n", "dones", ":", "List", "[", "bool", "]", ",", "\n", "rewards", ":", "List", "[", "float", "]", ")", "->", "np", ".", "ndarray", ":", "\n", "\n", "# get post trajectories", "\n", "        ", "post_src", ",", "post_src_len", "=", "self", ".", "batch_trajectory2input", "(", "trajectories", ")", "\n", "inp", ",", "seg_tj_action", ",", "inp_len", ",", "actions_repeats", ",", "_", "=", "batch_bert_nlu_input", "(", "\n", "action_matrix", ",", "action_len", ",", "action_mask", ",", "\n", "post_src", ",", "post_src_len", ",", "\n", "self", ".", "hp", ".", "sep_val_id", ",", "self", ".", "hp", ".", "cls_val_id", ",", "self", ".", "hp", ".", "num_tokens", ")", "\n", "\n", "# compute target Q values and DQN Q values", "\n", "n_actions", "=", "inp", ".", "shape", "[", "0", "]", "\n", "self", ".", "debug", "(", "\"number of actions: {}\"", ".", "format", "(", "n_actions", ")", ")", "\n", "allowed_batch_size", "=", "32", "\n", "n_batches", "=", "int", "(", "math", ".", "ceil", "(", "n_actions", "*", "1.", "/", "allowed_batch_size", ")", ")", "\n", "self", ".", "debug", "(", "\"compute q-values through {} batches\"", ".", "format", "(", "n_batches", ")", ")", "\n", "\n", "target_model", ",", "target_sess", "=", "self", ".", "_get_target_model", "(", ")", "\n", "target_q_actions", "=", "[", "]", "\n", "dqn_q_actions", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "n_batches", ")", ":", "\n", "            ", "ss", "=", "i", "*", "allowed_batch_size", "\n", "ee", "=", "min", "(", "(", "i", "+", "1", ")", "*", "allowed_batch_size", ",", "n_actions", ")", "\n", "target_qs", "=", "target_sess", ".", "run", "(", "\n", "target_model", ".", "q_actions", ",", "feed_dict", "=", "{", "\n", "target_model", ".", "src_", ":", "inp", "[", "ss", ":", "ee", "]", ",", "\n", "target_model", ".", "seg_tj_action_", ":", "seg_tj_action", "[", "ss", ":", "ee", "]", ",", "\n", "target_model", ".", "src_len_", ":", "inp_len", "[", "ss", ":", "ee", "]", "\n", "}", ")", "\n", "target_q_actions", ".", "append", "(", "target_qs", ")", "\n", "dqn_qs", "=", "self", ".", "sess", ".", "run", "(", "\n", "self", ".", "model", ".", "q_actions", ",", "feed_dict", "=", "{", "\n", "self", ".", "model", ".", "src_", ":", "inp", "[", "ss", ":", "ee", "]", ",", "\n", "self", ".", "model", ".", "seg_tj_action_", ":", "seg_tj_action", "[", "ss", ":", "ee", "]", ",", "\n", "self", ".", "model", ".", "src_len_", ":", "inp_len", "[", "ss", ":", "ee", "]", ",", "\n", "}", ")", "\n", "dqn_q_actions", ".", "append", "(", "dqn_qs", ")", "\n", "\n", "", "post_qs_target", "=", "np", ".", "concatenate", "(", "target_q_actions", ",", "axis", "=", "-", "1", ")", "\n", "post_qs_dqn", "=", "np", ".", "concatenate", "(", "dqn_q_actions", ",", "axis", "=", "-", "1", ")", "\n", "\n", "# compute target values for MSE loss", "\n", "best_actions_idx", "=", "get_best_batch_ids", "(", "post_qs_dqn", ",", "actions_repeats", ")", "\n", "best_qs", "=", "post_qs_target", "[", "best_actions_idx", "]", "\n", "expected_q", "=", "(", "\n", "np", ".", "asarray", "(", "rewards", ")", "+", "\n", "np", ".", "asarray", "(", "[", "not", "x", "for", "x", "in", "dones", "]", ")", "*", "self", ".", "hp", ".", "gamma", "*", "best_qs", ")", "\n", "return", "expected_q", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.agents.cores.NLUCore.train_one_batch": [[492, 549], ["deepword.utils.ctime", "cores.NLUCore._compute_expected_q", "deepword.utils.ctime", "deepword.utils.ctime", "cores.NLUCore.batch_trajectory2input", "deepword.utils.ctime", "deepword.utils.ctime", "deepword.agents.utils.batch_bert_nlu_input", "deepword.utils.ctime", "deepword.utils.ctime", "cores.NLUCore.sess.run", "deepword.utils.ctime", "cores.NLUCore.debug", "cores.NLUCore.train_summary_writer.add_summary", "numpy.asarray", "deepword.utils.report_status"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.deepword.utils.ctime", "home.repos.pwc.inspect_result.yinxusen_deepword.agents.cores.GenDQNCore._compute_expected_q", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.utils.ctime", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.utils.ctime", "home.repos.pwc.inspect_result.yinxusen_deepword.agents.cores.TFCore.batch_trajectory2input", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.utils.ctime", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.utils.ctime", "home.repos.pwc.inspect_result.yinxusen_deepword.agents.utils.batch_bert_nlu_input", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.utils.ctime", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.utils.ctime", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.utils.ctime", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.log.Logging.debug", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.utils.report_status"], ["", "def", "train_one_batch", "(", "\n", "self", ",", "\n", "pre_trajectories", ":", "List", "[", "List", "[", "ActionMaster", "]", "]", ",", "\n", "post_trajectories", ":", "List", "[", "List", "[", "ActionMaster", "]", "]", ",", "\n", "pre_states", ":", "Optional", "[", "List", "[", "ObsInventory", "]", "]", ",", "\n", "post_states", ":", "Optional", "[", "List", "[", "ObsInventory", "]", "]", ",", "\n", "action_matrix", ":", "List", "[", "np", ".", "ndarray", "]", ",", "\n", "action_len", ":", "List", "[", "np", ".", "ndarray", "]", ",", "\n", "pre_action_mask", ":", "List", "[", "np", ".", "ndarray", "]", ",", "\n", "post_action_mask", ":", "List", "[", "np", ".", "ndarray", "]", ",", "\n", "dones", ":", "List", "[", "bool", "]", ",", "\n", "rewards", ":", "List", "[", "float", "]", ",", "\n", "action_idx", ":", "List", "[", "int", "]", ",", "\n", "b_weight", ":", "np", ".", "ndarray", ",", "\n", "step", ":", "int", ",", "\n", "others", ":", "Any", ")", "->", "np", ".", "ndarray", ":", "\n", "        ", "t1", "=", "ctime", "(", ")", "\n", "expected_q", "=", "self", ".", "_compute_expected_q", "(", "\n", "post_action_mask", ",", "post_trajectories", ",", "action_matrix", ",", "action_len", ",", "\n", "dones", ",", "rewards", ")", "\n", "t1_end", "=", "ctime", "(", ")", "\n", "\n", "t2", "=", "ctime", "(", ")", "\n", "pre_src", ",", "pre_src_len", "=", "self", ".", "batch_trajectory2input", "(", "pre_trajectories", ")", "\n", "t2_end", "=", "ctime", "(", ")", "\n", "\n", "t3", "=", "ctime", "(", ")", "\n", "# only choose and concatenate actions appearing in action_idx", "\n", "pre_action_idx_mask", "=", "[", "np", ".", "asarray", "(", "[", "x", "]", ")", "for", "x", "in", "action_idx", "]", "\n", "inp", ",", "seg_tj_action", ",", "inp_len", ",", "_", ",", "_", "=", "batch_bert_nlu_input", "(", "\n", "action_matrix", ",", "action_len", ",", "pre_action_idx_mask", ",", "\n", "pre_src", ",", "pre_src_len", ",", "\n", "self", ".", "hp", ".", "sep_val_id", ",", "self", ".", "hp", ".", "cls_val_id", ",", "self", ".", "hp", ".", "num_tokens", ")", "\n", "t3_end", "=", "ctime", "(", ")", "\n", "\n", "t4", "=", "ctime", "(", ")", "\n", "_", ",", "summaries", ",", "loss_eval", ",", "abs_loss", "=", "self", ".", "sess", ".", "run", "(", "\n", "[", "self", ".", "model", ".", "train_op", ",", "self", ".", "model", ".", "train_summary_op", ",", "self", ".", "model", ".", "loss", ",", "\n", "self", ".", "model", ".", "abs_loss", "]", ",", "\n", "feed_dict", "=", "{", "\n", "self", ".", "model", ".", "src_", ":", "inp", ",", "\n", "self", ".", "model", ".", "src_len_", ":", "inp_len", ",", "\n", "self", ".", "model", ".", "seg_tj_action_", ":", "seg_tj_action", ",", "\n", "self", ".", "model", ".", "expected_q_", ":", "expected_q", "\n", "}", ")", "\n", "t4_end", "=", "ctime", "(", ")", "\n", "\n", "self", ".", "debug", "(", "report_status", "(", "[", "\n", "(", "\"t1\"", ",", "t1_end", "-", "t1", ")", ",", "\n", "(", "\"t2\"", ",", "t2_end", "-", "t2", ")", ",", "\n", "(", "\"t3\"", ",", "t3_end", "-", "t3", ")", ",", "\n", "(", "\"t4\"", ",", "t4_end", "-", "t4", ")", "\n", "]", ")", ")", "\n", "\n", "self", ".", "train_summary_writer", ".", "add_summary", "(", "\n", "summaries", ",", "step", "-", "self", ".", "hp", ".", "observation_t", ")", "\n", "return", "abs_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.agents.cores.NLUCore.policy": [[550, 582], ["cores.NLUCore.trajectory2input", "deepword.agents.utils.bert_nlu_input", "cores.NLUCore.debug", "int", "cores.NLUCore.debug", "range", "numpy.concatenate", "math.ceil", "min", "cores.NLUCore.sess.run", "total_q_actions.append"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.agents.cores.NLUCore.trajectory2input", "home.repos.pwc.inspect_result.yinxusen_deepword.agents.utils.bert_nlu_input", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.log.Logging.debug", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.log.Logging.debug", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.tree_memory.TreeMemory.append"], ["", "def", "policy", "(", "\n", "self", ",", "\n", "trajectory", ":", "List", "[", "ActionMaster", "]", ",", "\n", "state", ":", "Optional", "[", "ObsInventory", "]", ",", "\n", "action_matrix", ":", "np", ".", "ndarray", ",", "\n", "action_len", ":", "np", ".", "ndarray", ",", "\n", "action_mask", ":", "np", ".", "ndarray", ")", "->", "np", ".", "ndarray", ":", "\n", "        ", "action_matrix", "=", "action_matrix", "[", "action_mask", ",", ":", "]", "\n", "action_len", "=", "action_len", "[", "action_mask", "]", "\n", "src", ",", "src_len", "=", "self", ".", "trajectory2input", "(", "trajectory", ")", "\n", "inp", ",", "seg_tj_action", ",", "inp_size", "=", "bert_nlu_input", "(", "\n", "action_matrix", ",", "action_len", ",", "src", ",", "src_len", ",", "\n", "self", ".", "hp", ".", "sep_val_id", ",", "self", ".", "hp", ".", "cls_val_id", ",", "self", ".", "hp", ".", "num_tokens", ")", "\n", "n_actions", "=", "inp", ".", "shape", "[", "0", "]", "\n", "self", ".", "debug", "(", "\"number of actions: {}\"", ".", "format", "(", "n_actions", ")", ")", "\n", "# TODO: better allowed batch", "\n", "allowed_batch_size", "=", "32", "\n", "n_batches", "=", "int", "(", "math", ".", "ceil", "(", "n_actions", "*", "1.", "/", "allowed_batch_size", ")", ")", "\n", "self", ".", "debug", "(", "\"compute q-values through {} batches\"", ".", "format", "(", "n_batches", ")", ")", "\n", "total_q_actions", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "n_batches", ")", ":", "\n", "            ", "ss", "=", "i", "*", "allowed_batch_size", "\n", "ee", "=", "min", "(", "(", "i", "+", "1", ")", "*", "allowed_batch_size", ",", "n_actions", ")", "\n", "q_actions_t", "=", "self", ".", "sess", ".", "run", "(", "self", ".", "model", ".", "q_actions", ",", "feed_dict", "=", "{", "\n", "self", ".", "model", ".", "src_", ":", "inp", "[", "ss", ":", "ee", "]", ",", "\n", "self", ".", "model", ".", "seg_tj_action_", ":", "seg_tj_action", "[", "ss", ":", "ee", "]", ",", "\n", "self", ".", "model", ".", "src_len_", ":", "inp_size", "[", "ss", ":", "ee", "]", ",", "\n", "}", ")", "\n", "total_q_actions", ".", "append", "(", "q_actions_t", ")", "\n", "\n", "", "q_actions", "=", "np", ".", "concatenate", "(", "total_q_actions", ",", "axis", "=", "-", "1", ")", "\n", "return", "q_actions", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.agents.cores.DQNCore.__init__": [[589, 591], ["cores.TFCore.__init__"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.models.drrn_modeling.PseudoSeq2SeqDRRN.__init__"], ["def", "__init__", "(", "self", ",", "hp", ",", "model_dir", ")", ":", "\n", "        ", "super", "(", "DQNCore", ",", "self", ")", ".", "__init__", "(", "hp", ",", "model_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.agents.cores.DQNCore.policy": [[592, 609], ["cores.DQNCore.trajectory2input", "cores.DQNCore.sess.run"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.agents.cores.NLUCore.trajectory2input"], ["", "def", "policy", "(", "\n", "self", ",", "\n", "trajectory", ":", "List", "[", "ActionMaster", "]", ",", "\n", "state", ":", "Optional", "[", "ObsInventory", "]", ",", "\n", "action_matrix", ":", "np", ".", "ndarray", ",", "\n", "action_len", ":", "np", ".", "ndarray", ",", "\n", "action_mask", ":", "np", ".", "ndarray", ")", "->", "np", ".", "ndarray", ":", "\n", "        ", "\"\"\"\n        get either an random action index with action string\n        or the best predicted action index with action string.\n        \"\"\"", "\n", "src", ",", "src_len", "=", "self", ".", "trajectory2input", "(", "trajectory", ")", "\n", "q_actions", "=", "self", ".", "sess", ".", "run", "(", "self", ".", "model", ".", "q_actions", ",", "feed_dict", "=", "{", "\n", "self", ".", "model", ".", "src_", ":", "[", "src", "]", ",", "\n", "self", ".", "model", ".", "src_len_", ":", "[", "src_len", "]", "\n", "}", ")", "[", "0", "]", "\n", "return", "q_actions", "[", "action_mask", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.agents.cores.DQNCore._compute_expected_q": [[610, 648], ["cores.DQNCore.batch_trajectory2input", "cores.DQNCore._get_target_model", "target_sess.run", "cores.DQNCore.sess.run", "numpy.zeros_like", "range", "len", "deepword.agents.utils.get_best_1d_q"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.agents.cores.TFCore.batch_trajectory2input", "home.repos.pwc.inspect_result.yinxusen_deepword.agents.cores.TFCore._get_target_model", "home.repos.pwc.inspect_result.yinxusen_deepword.agents.utils.get_best_1d_q"], ["", "def", "_compute_expected_q", "(", "\n", "self", ",", "\n", "action_mask", ":", "List", "[", "np", ".", "ndarray", "]", ",", "\n", "trajectories", ":", "List", "[", "List", "[", "ActionMaster", "]", "]", ",", "\n", "dones", ":", "List", "[", "bool", "]", ",", "\n", "rewards", ":", "List", "[", "float", "]", ")", "->", "np", ".", "ndarray", ":", "\n", "        ", "\"\"\"\n        Compute expected q values given post trajectories and post actions\n\n        notice that action_mask, tids, sids should belong to post game states,\n        while dones, rewards belong to pre game states.\n        \"\"\"", "\n", "\n", "src", ",", "src_len", "=", "self", ".", "batch_trajectory2input", "(", "trajectories", ")", "\n", "target_model", ",", "target_sess", "=", "self", ".", "_get_target_model", "(", ")", "\n", "# target network provides the value used as expected q-values", "\n", "qs_target", "=", "target_sess", ".", "run", "(", "\n", "target_model", ".", "q_actions", ",", "\n", "feed_dict", "=", "{", "\n", "target_model", ".", "src_", ":", "src", ",", "\n", "target_model", ".", "src_len_", ":", "src_len", "}", ")", "\n", "\n", "# current network decides which action provides best q-value", "\n", "qs_dqn", "=", "self", ".", "sess", ".", "run", "(", "\n", "self", ".", "model", ".", "q_actions", ",", "\n", "feed_dict", "=", "{", "\n", "self", ".", "model", ".", "src_", ":", "src", ",", "\n", "self", ".", "model", ".", "src_len_", ":", "src_len", "}", ")", "\n", "\n", "expected_q", "=", "np", ".", "zeros_like", "(", "rewards", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "expected_q", ")", ")", ":", "\n", "            ", "expected_q", "[", "i", "]", "=", "rewards", "[", "i", "]", "\n", "if", "not", "dones", "[", "i", "]", ":", "\n", "                ", "action_idx", ",", "_", "=", "get_best_1d_q", "(", "qs_dqn", "[", "i", ",", "action_mask", "[", "i", "]", "]", ")", "\n", "real_action_idx", "=", "action_mask", "[", "i", "]", "[", "action_idx", "]", "\n", "expected_q", "[", "i", "]", "+=", "(", "\n", "self", ".", "hp", ".", "gamma", "*", "qs_target", "[", "i", ",", "real_action_idx", "]", ")", "\n", "", "", "return", "expected_q", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.agents.cores.DQNCore.train_one_batch": [[649, 684], ["cores.DQNCore._compute_expected_q", "cores.DQNCore.batch_trajectory2input", "cores.DQNCore.sess.run", "cores.DQNCore.debug", "cores.DQNCore.train_summary_writer.add_summary"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.agents.cores.GenDQNCore._compute_expected_q", "home.repos.pwc.inspect_result.yinxusen_deepword.agents.cores.TFCore.batch_trajectory2input", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.log.Logging.debug"], ["", "def", "train_one_batch", "(", "\n", "self", ",", "\n", "pre_trajectories", ":", "List", "[", "List", "[", "ActionMaster", "]", "]", ",", "\n", "post_trajectories", ":", "List", "[", "List", "[", "ActionMaster", "]", "]", ",", "\n", "pre_states", ":", "Optional", "[", "List", "[", "ObsInventory", "]", "]", ",", "\n", "post_states", ":", "Optional", "[", "List", "[", "ObsInventory", "]", "]", ",", "\n", "action_matrix", ":", "List", "[", "np", ".", "ndarray", "]", ",", "\n", "action_len", ":", "List", "[", "np", ".", "ndarray", "]", ",", "\n", "pre_action_mask", ":", "List", "[", "np", ".", "ndarray", "]", ",", "\n", "post_action_mask", ":", "List", "[", "np", ".", "ndarray", "]", ",", "\n", "dones", ":", "List", "[", "bool", "]", ",", "\n", "rewards", ":", "List", "[", "float", "]", ",", "\n", "action_idx", ":", "List", "[", "int", "]", ",", "\n", "b_weight", ":", "np", ".", "ndarray", ",", "\n", "step", ":", "int", ",", "others", ":", "Any", ")", "->", "np", ".", "ndarray", ":", "\n", "\n", "        ", "expected_q", "=", "self", ".", "_compute_expected_q", "(", "\n", "action_mask", "=", "post_action_mask", ",", "trajectories", "=", "post_trajectories", ",", "\n", "dones", "=", "dones", ",", "rewards", "=", "rewards", ")", "\n", "\n", "pre_src", ",", "pre_src_len", "=", "self", ".", "batch_trajectory2input", "(", "pre_trajectories", ")", "\n", "_", ",", "summaries", ",", "loss_eval", ",", "abs_loss", "=", "self", ".", "sess", ".", "run", "(", "\n", "[", "self", ".", "model", ".", "train_op", ",", "self", ".", "model", ".", "train_summary_op", ",", "self", ".", "model", ".", "loss", ",", "\n", "self", ".", "model", ".", "abs_loss", "]", ",", "\n", "feed_dict", "=", "{", "\n", "self", ".", "model", ".", "src_", ":", "pre_src", ",", "\n", "self", ".", "model", ".", "src_len_", ":", "pre_src_len", ",", "\n", "self", ".", "model", ".", "b_weight_", ":", "b_weight", ",", "\n", "self", ".", "model", ".", "action_idx_", ":", "action_idx", ",", "\n", "self", ".", "model", ".", "expected_q_", ":", "expected_q", "}", ")", "\n", "\n", "self", ".", "debug", "(", "'loss: {}'", ".", "format", "(", "loss_eval", ")", ")", "\n", "self", ".", "train_summary_writer", ".", "add_summary", "(", "\n", "summaries", ",", "step", "-", "self", ".", "hp", ".", "observation_t", ")", "\n", "return", "abs_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.agents.cores.TabularCore.__init__": [[691, 702], ["cores.BaseCore.__init__", "dict", "dict", "dict", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.models.drrn_modeling.PseudoSeq2SeqDRRN.__init__"], ["def", "__init__", "(", "self", ",", "hp", ",", "model_dir", ")", ":", "\n", "        ", "super", "(", "TabularCore", ",", "self", ")", ".", "__init__", "(", "hp", ",", "model_dir", ")", "\n", "self", ".", "hp", "=", "hp", "\n", "self", ".", "q_mat_prefix", "=", "\"q_mat\"", "\n", "# model of tabular Q-learning, map from state to q-vectors", "\n", "self", ".", "q_mat", ":", "Dict", "[", "str", ",", "np", ".", "ndarray", "]", "=", "dict", "(", ")", "\n", "self", ".", "target_q_mat", ":", "Dict", "[", "str", ",", "np", ".", "ndarray", "]", "=", "dict", "(", ")", "\n", "self", ".", "state2hash", ":", "Dict", "[", "ObsInventory", ",", "str", "]", "=", "dict", "(", ")", "\n", "self", ".", "model_dir", "=", "model_dir", "\n", "self", ".", "ckpt_prefix", "=", "\"after-epoch\"", "\n", "self", ".", "ckpt_path", "=", "path", ".", "join", "(", "self", ".", "model_dir", ",", "self", ".", "q_mat_prefix", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.agents.cores.TabularCore.train_one_batch": [[703, 735], ["cores.TabularCore._compute_expected_q", "numpy.zeros_like", "enumerate", "cores.TabularCore.get_state_hash", "abs", "numpy.zeros"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.agents.cores.GenDQNCore._compute_expected_q", "home.repos.pwc.inspect_result.yinxusen_deepword.agents.cores.TabularCore.get_state_hash"], ["", "def", "train_one_batch", "(", "\n", "self", ",", "\n", "pre_trajectories", ":", "List", "[", "List", "[", "ActionMaster", "]", "]", ",", "\n", "post_trajectories", ":", "List", "[", "List", "[", "ActionMaster", "]", "]", ",", "\n", "pre_states", ":", "Optional", "[", "List", "[", "ObsInventory", "]", "]", ",", "\n", "post_states", ":", "Optional", "[", "List", "[", "ObsInventory", "]", "]", ",", "\n", "action_matrix", ":", "List", "[", "np", ".", "ndarray", "]", ",", "\n", "action_len", ":", "List", "[", "np", ".", "ndarray", "]", ",", "\n", "pre_action_mask", ":", "List", "[", "np", ".", "ndarray", "]", ",", "\n", "post_action_mask", ":", "List", "[", "np", ".", "ndarray", "]", ",", "\n", "dones", ":", "List", "[", "bool", "]", ",", "\n", "rewards", ":", "List", "[", "float", "]", ",", "\n", "action_idx", ":", "List", "[", "int", "]", ",", "\n", "b_weight", ":", "np", ".", "ndarray", ",", "\n", "step", ":", "int", ",", "others", ":", "Any", ")", "->", "np", ".", "ndarray", ":", "\n", "\n", "        ", "expected_q", "=", "self", ".", "_compute_expected_q", "(", "\n", "post_action_mask", ",", "post_states", ",", "dones", ",", "rewards", ")", "\n", "\n", "pre_hash_states", "=", "[", "\n", "self", ".", "get_state_hash", "(", "state", "[", "0", "]", ")", "for", "state", "in", "pre_states", "]", "\n", "\n", "abs_loss", "=", "np", ".", "zeros_like", "(", "rewards", ")", "\n", "for", "i", ",", "ps", "in", "enumerate", "(", "pre_hash_states", ")", ":", "\n", "            ", "if", "ps", "not", "in", "self", ".", "q_mat", ":", "\n", "                ", "self", ".", "q_mat", "[", "ps", "]", "=", "np", ".", "zeros", "(", "self", ".", "hp", ".", "n_actions", ")", "\n", "", "prev_q_val", "=", "self", ".", "q_mat", "[", "ps", "]", "[", "action_idx", "[", "i", "]", "]", "\n", "delta_q_val", "=", "expected_q", "[", "i", "]", "-", "prev_q_val", "\n", "abs_loss", "[", "i", "]", "=", "abs", "(", "delta_q_val", ")", "\n", "self", ".", "q_mat", "[", "ps", "]", "[", "action_idx", "[", "i", "]", "]", "=", "(", "\n", "prev_q_val", "+", "delta_q_val", "*", "b_weight", "[", "i", "]", ")", "\n", "", "return", "abs_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.agents.cores.TabularCore.policy": [[736, 746], ["cores.TabularCore.get_state_hash", "cores.TabularCore.q_mat.get", "numpy.zeros"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.agents.cores.TabularCore.get_state_hash", "home.repos.pwc.inspect_result.yinxusen_deepword.students.student_learner.CMD.get"], ["", "def", "policy", "(", "\n", "self", ",", "\n", "trajectory", ":", "List", "[", "ActionMaster", "]", ",", "\n", "state", ":", "Optional", "[", "ObsInventory", "]", ",", "\n", "action_matrix", ":", "np", ".", "ndarray", ",", "\n", "action_len", ":", "np", ".", "ndarray", ",", "\n", "action_mask", ":", "np", ".", "ndarray", ")", "->", "np", ".", "ndarray", ":", "\n", "        ", "hs", "=", "self", ".", "get_state_hash", "(", "state", ")", "\n", "q_actions", "=", "self", ".", "q_mat", ".", "get", "(", "hs", ",", "np", ".", "zeros", "(", "self", ".", "hp", ".", "n_actions", ")", ")", "\n", "return", "q_actions", "[", "action_mask", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.agents.cores.TabularCore.create_or_reload_target_model": [[747, 750], ["copy.deepcopy"], "methods", ["None"], ["", "def", "create_or_reload_target_model", "(", "\n", "self", ",", "restore_from", ":", "Optional", "[", "str", "]", "=", "None", ")", "->", "None", ":", "\n", "        ", "self", ".", "target_q_mat", "=", "deepcopy", "(", "self", ".", "q_mat", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.agents.cores.TabularCore.init": [[751, 776], ["numpy.load", "dict", "cores.TabularCore.debug", "copy.deepcopy", "cores.TabularCore.debug", "deepword.agents.utils.get_path_tags", "max", "os.path.join", "zip", "cores.TabularCore.debug"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.deepword.log.Logging.debug", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.log.Logging.debug", "home.repos.pwc.inspect_result.yinxusen_deepword.agents.utils.get_path_tags", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.log.Logging.debug"], ["", "def", "init", "(", "\n", "self", ",", "is_training", ":", "bool", ",", "load_best", ":", "bool", "=", "False", ",", "\n", "restore_from", ":", "Optional", "[", "str", "]", "=", "None", ")", "->", "None", ":", "\n", "        ", "self", ".", "is_training", "=", "is_training", "\n", "try", ":", "\n", "            ", "if", "not", "restore_from", ":", "\n", "                ", "tags", "=", "get_path_tags", "(", "\n", "self", ".", "ckpt_path", ",", "self", ".", "ckpt_prefix", ")", "\n", "self", ".", "loaded_ckpt_step", "=", "max", "(", "tags", ")", "\n", "restore_from", "=", "path", ".", "join", "(", "\n", "self", ".", "ckpt_path", ",", "\"{}-{}.npz\"", ".", "format", "(", "\n", "self", ".", "ckpt_prefix", ",", "self", ".", "loaded_ckpt_step", ")", ")", "\n", "", "else", ":", "\n", "# TODO: fetch loaded ckpt step", "\n", "                ", "pass", "\n", "", "npz_q_mat", "=", "np", ".", "load", "(", "restore_from", ",", "allow_pickle", "=", "True", ")", "\n", "q_mat_key", "=", "npz_q_mat", "[", "\"q_mat_key\"", "]", "\n", "q_mat_val", "=", "npz_q_mat", "[", "\"q_mat_val\"", "]", "\n", "self", ".", "q_mat", "=", "dict", "(", "zip", "(", "q_mat_key", ",", "q_mat_val", ")", ")", "\n", "self", ".", "debug", "(", "\"load q_mat from file\"", ")", "\n", "self", ".", "target_q_mat", "=", "deepcopy", "(", "self", ".", "q_mat", ")", "\n", "self", ".", "debug", "(", "\"init target_q_mat with q_mat\"", ")", "\n", "", "except", "IOError", "as", "e", ":", "\n", "            ", "self", ".", "debug", "(", "\"load q_mat error:\\n{}\"", ".", "format", "(", "e", ")", ")", "\n", "", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.agents.cores.TabularCore.save_model": [[777, 784], ["os.path.join", "numpy.savez", "list", "list", "cores.TabularCore.q_mat.keys", "cores.TabularCore.q_mat.values"], "methods", ["None"], ["", "def", "save_model", "(", "self", ",", "t", ":", "Optional", "[", "int", "]", "=", "None", ")", "->", "None", ":", "\n", "        ", "q_mat_path", "=", "path", ".", "join", "(", "\n", "self", ".", "ckpt_path", ",", "\"{}-{}.npz\"", ".", "format", "(", "self", ".", "ckpt_prefix", ",", "t", ")", ")", "\n", "np", ".", "savez", "(", "\n", "q_mat_path", ",", "\n", "q_mat_key", "=", "list", "(", "self", ".", "q_mat", ".", "keys", "(", ")", ")", ",", "\n", "q_mat_val", "=", "list", "(", "self", ".", "q_mat", ".", "values", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.agents.cores.TabularCore.get_state_hash": [[785, 792], ["deepword.utils.get_hash"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.deepword.utils.get_hash"], ["", "def", "get_state_hash", "(", "self", ",", "state", ":", "ObsInventory", ")", "->", "str", ":", "\n", "        ", "if", "state", "in", "self", ".", "state2hash", ":", "\n", "            ", "hs", "=", "self", ".", "state2hash", "[", "state", "]", "\n", "", "else", ":", "\n", "            ", "hs", "=", "get_hash", "(", "state", ".", "obs", "+", "\"\\n\"", "+", "state", ".", "inventory", ")", "\n", "self", ".", "state2hash", "[", "state", "]", "=", "hs", "\n", "", "return", "hs", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.agents.cores.TabularCore._compute_expected_q": [[793, 816], ["numpy.asarray", "numpy.asarray", "numpy.zeros_like", "range", "cores.TabularCore.get_state_hash", "len", "cores.TabularCore.target_q_mat.get", "cores.TabularCore.q_mat.get", "deepword.agents.utils.get_best_1d_q", "numpy.zeros", "numpy.zeros"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.agents.cores.TabularCore.get_state_hash", "home.repos.pwc.inspect_result.yinxusen_deepword.students.student_learner.CMD.get", "home.repos.pwc.inspect_result.yinxusen_deepword.students.student_learner.CMD.get", "home.repos.pwc.inspect_result.yinxusen_deepword.agents.utils.get_best_1d_q"], ["", "def", "_compute_expected_q", "(", "\n", "self", ",", "\n", "action_mask", ":", "List", "[", "np", ".", "ndarray", "]", ",", "\n", "states", ":", "List", "[", "ObsInventory", "]", ",", "\n", "dones", ":", "List", "[", "bool", "]", ",", "\n", "rewards", ":", "List", "[", "float", "]", ")", "->", "np", ".", "ndarray", ":", "\n", "        ", "post_hash_states", "=", "[", "self", ".", "get_state_hash", "(", "state", ")", "for", "state", "in", "states", "]", "\n", "post_qs_target", "=", "np", ".", "asarray", "(", "\n", "[", "self", ".", "target_q_mat", ".", "get", "(", "s", ",", "np", ".", "zeros", "(", "self", ".", "hp", ".", "n_actions", ")", ")", "\n", "for", "s", "in", "post_hash_states", "]", ")", "\n", "post_qs_dqn", "=", "np", ".", "asarray", "(", "\n", "[", "self", ".", "q_mat", ".", "get", "(", "s", ",", "np", ".", "zeros", "(", "self", ".", "hp", ".", "n_actions", ")", ")", "\n", "for", "s", "in", "post_hash_states", "]", ")", "\n", "\n", "expected_q", "=", "np", ".", "zeros_like", "(", "rewards", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "expected_q", ")", ")", ":", "\n", "            ", "expected_q", "[", "i", "]", "=", "rewards", "[", "i", "]", "\n", "if", "not", "dones", "[", "i", "]", ":", "\n", "                ", "action_idx", ",", "_", "=", "get_best_1d_q", "(", "post_qs_dqn", "[", "i", ",", "action_mask", "[", "i", "]", "]", ")", "\n", "real_action_idx", "=", "action_mask", "[", "i", "]", "[", "action_idx", "]", "\n", "expected_q", "[", "i", "]", "+=", "(", "\n", "self", ".", "hp", ".", "gamma", "*", "post_qs_target", "[", "i", ",", "real_action_idx", "]", ")", "\n", "", "", "return", "expected_q", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.agents.cores.DRRNCore.__init__": [[823, 827], ["cores.TFCore.__init__"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.models.drrn_modeling.PseudoSeq2SeqDRRN.__init__"], ["def", "__init__", "(", "self", ",", "hp", ",", "model_dir", ")", ":", "\n", "        ", "super", "(", "DRRNCore", ",", "self", ")", ".", "__init__", "(", "hp", ",", "model_dir", ")", "\n", "self", ".", "model", ":", "Optional", "[", "DRRNModel", "]", "=", "None", "\n", "self", ".", "target_model", ":", "Optional", "[", "DRRNModel", "]", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.agents.cores.DRRNCore.policy": [[828, 853], ["cores.DRRNCore.trajectory2input", "cores.DRRNCore.sess.run", "len"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.agents.cores.NLUCore.trajectory2input"], ["", "def", "policy", "(", "\n", "self", ",", "\n", "trajectory", ":", "List", "[", "ActionMaster", "]", ",", "\n", "state", ":", "Optional", "[", "ObsInventory", "]", ",", "\n", "action_matrix", ":", "np", ".", "ndarray", ",", "\n", "action_len", ":", "np", ".", "ndarray", ",", "\n", "action_mask", ":", "np", ".", "ndarray", ")", "->", "np", ".", "ndarray", ":", "\n", "        ", "\"\"\"\n        get either an random action index with action string\n        or the best predicted action index with action string.\n        \"\"\"", "\n", "admissible_action_matrix", "=", "action_matrix", "[", "action_mask", ",", ":", "]", "\n", "admissible_action_len", "=", "action_len", "[", "action_mask", "]", "\n", "actions_repeats", "=", "[", "len", "(", "action_mask", ")", "]", "\n", "\n", "src", ",", "src_len", "=", "self", ".", "trajectory2input", "(", "trajectory", ")", "\n", "q_actions", "=", "self", ".", "sess", ".", "run", "(", "self", ".", "model", ".", "q_actions", ",", "feed_dict", "=", "{", "\n", "self", ".", "model", ".", "src_", ":", "[", "src", "]", ",", "\n", "self", ".", "model", ".", "src_len_", ":", "[", "src_len", "]", ",", "\n", "self", ".", "model", ".", "actions_", ":", "admissible_action_matrix", ",", "\n", "self", ".", "model", ".", "actions_len_", ":", "admissible_action_len", ",", "\n", "self", ".", "model", ".", "actions_repeats_", ":", "actions_repeats", "\n", "}", ")", "\n", "\n", "return", "q_actions", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.agents.cores.DRRNCore._compute_expected_q": [[854, 892], ["cores.DRRNCore.batch_trajectory2input", "deepword.agents.utils.batch_drrn_action_input", "cores.DRRNCore._get_target_model", "target_sess.run", "cores.DRRNCore.sess.run", "deepword.agents.utils.get_best_batch_ids", "numpy.asarray", "numpy.asarray"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.agents.cores.TFCore.batch_trajectory2input", "home.repos.pwc.inspect_result.yinxusen_deepword.agents.utils.batch_drrn_action_input", "home.repos.pwc.inspect_result.yinxusen_deepword.agents.cores.TFCore._get_target_model", "home.repos.pwc.inspect_result.yinxusen_deepword.agents.utils.get_best_batch_ids"], ["", "def", "_compute_expected_q", "(", "\n", "self", ",", "\n", "action_mask", ":", "List", "[", "np", ".", "ndarray", "]", ",", "\n", "trajectories", ":", "List", "[", "List", "[", "ActionMaster", "]", "]", ",", "\n", "action_matrix", ":", "List", "[", "np", ".", "ndarray", "]", ",", "\n", "action_len", ":", "List", "[", "np", ".", "ndarray", "]", ",", "\n", "dones", ":", "List", "[", "bool", "]", ",", "\n", "rewards", ":", "List", "[", "float", "]", ")", "->", "np", ".", "ndarray", ":", "\n", "\n", "        ", "post_src", ",", "post_src_len", "=", "self", ".", "batch_trajectory2input", "(", "trajectories", ")", "\n", "actions", ",", "actions_lens", ",", "actions_repeats", ",", "_", "=", "batch_drrn_action_input", "(", "\n", "action_matrix", ",", "action_len", ",", "action_mask", ")", "\n", "\n", "target_model", ",", "target_sess", "=", "self", ".", "_get_target_model", "(", ")", "\n", "post_qs_target", "=", "target_sess", ".", "run", "(", "\n", "target_model", ".", "q_actions", ",", "\n", "feed_dict", "=", "{", "\n", "target_model", ".", "src_", ":", "post_src", ",", "\n", "target_model", ".", "src_len_", ":", "post_src_len", ",", "\n", "target_model", ".", "actions_", ":", "actions", ",", "\n", "target_model", ".", "actions_len_", ":", "actions_lens", ",", "\n", "target_model", ".", "actions_repeats_", ":", "actions_repeats", "}", ")", "\n", "\n", "post_qs_dqn", "=", "self", ".", "sess", ".", "run", "(", "\n", "self", ".", "model", ".", "q_actions", ",", "\n", "feed_dict", "=", "{", "\n", "self", ".", "model", ".", "src_", ":", "post_src", ",", "\n", "self", ".", "model", ".", "src_len_", ":", "post_src_len", ",", "\n", "self", ".", "model", ".", "actions_", ":", "actions", ",", "\n", "self", ".", "model", ".", "actions_len_", ":", "actions_lens", ",", "\n", "self", ".", "model", ".", "actions_repeats_", ":", "actions_repeats", "}", ")", "\n", "\n", "best_actions_idx", "=", "get_best_batch_ids", "(", "post_qs_dqn", ",", "actions_repeats", ")", "\n", "best_qs", "=", "post_qs_target", "[", "best_actions_idx", "]", "\n", "expected_q", "=", "(", "\n", "np", ".", "asarray", "(", "rewards", ")", "+", "\n", "np", ".", "asarray", "(", "[", "not", "x", "for", "x", "in", "dones", "]", ")", "*", "self", ".", "hp", ".", "gamma", "*", "best_qs", ")", "\n", "return", "expected_q", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.agents.cores.DRRNCore.train_one_batch": [[893, 953], ["deepword.utils.ctime", "cores.DRRNCore._compute_expected_q", "deepword.utils.ctime", "deepword.utils.ctime", "cores.DRRNCore.batch_trajectory2input", "deepword.utils.ctime", "deepword.utils.ctime", "deepword.agents.utils.batch_drrn_action_input", "deepword.agents.utils.id_real2batch", "deepword.utils.ctime", "deepword.utils.ctime", "cores.DRRNCore.sess.run", "deepword.utils.ctime", "cores.DRRNCore.debug", "cores.DRRNCore.train_summary_writer.add_summary", "deepword.utils.report_status"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.deepword.utils.ctime", "home.repos.pwc.inspect_result.yinxusen_deepword.agents.cores.GenDQNCore._compute_expected_q", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.utils.ctime", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.utils.ctime", "home.repos.pwc.inspect_result.yinxusen_deepword.agents.cores.TFCore.batch_trajectory2input", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.utils.ctime", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.utils.ctime", "home.repos.pwc.inspect_result.yinxusen_deepword.agents.utils.batch_drrn_action_input", "home.repos.pwc.inspect_result.yinxusen_deepword.agents.utils.id_real2batch", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.utils.ctime", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.utils.ctime", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.utils.ctime", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.log.Logging.debug", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.utils.report_status"], ["", "def", "train_one_batch", "(", "\n", "self", ",", "\n", "pre_trajectories", ":", "List", "[", "List", "[", "ActionMaster", "]", "]", ",", "\n", "post_trajectories", ":", "List", "[", "List", "[", "ActionMaster", "]", "]", ",", "\n", "pre_states", ":", "Optional", "[", "List", "[", "ObsInventory", "]", "]", ",", "\n", "post_states", ":", "Optional", "[", "List", "[", "ObsInventory", "]", "]", ",", "\n", "action_matrix", ":", "List", "[", "np", ".", "ndarray", "]", ",", "\n", "action_len", ":", "List", "[", "np", ".", "ndarray", "]", ",", "\n", "pre_action_mask", ":", "List", "[", "np", ".", "ndarray", "]", ",", "\n", "post_action_mask", ":", "List", "[", "np", ".", "ndarray", "]", ",", "\n", "dones", ":", "List", "[", "bool", "]", ",", "\n", "rewards", ":", "List", "[", "float", "]", ",", "\n", "action_idx", ":", "List", "[", "int", "]", ",", "\n", "b_weight", ":", "np", ".", "ndarray", ",", "\n", "step", ":", "int", ",", "\n", "others", ":", "Any", ")", "->", "np", ".", "ndarray", ":", "\n", "\n", "        ", "t1", "=", "ctime", "(", ")", "\n", "expected_q", "=", "self", ".", "_compute_expected_q", "(", "\n", "post_action_mask", ",", "post_trajectories", ",", "action_matrix", ",", "action_len", ",", "\n", "dones", ",", "rewards", ")", "\n", "t1_end", "=", "ctime", "(", ")", "\n", "\n", "t2", "=", "ctime", "(", ")", "\n", "pre_src", ",", "pre_src_len", "=", "self", ".", "batch_trajectory2input", "(", "pre_trajectories", ")", "\n", "t2_end", "=", "ctime", "(", ")", "\n", "\n", "t3", "=", "ctime", "(", ")", "\n", "(", "actions", ",", "actions_lens", ",", "actions_repeats", ",", "id_real2mask", "\n", ")", "=", "batch_drrn_action_input", "(", "\n", "action_matrix", ",", "action_len", ",", "pre_action_mask", ")", "\n", "action_batch_ids", "=", "id_real2batch", "(", "\n", "action_idx", ",", "id_real2mask", ",", "actions_repeats", ")", "\n", "t3_end", "=", "ctime", "(", ")", "\n", "\n", "t4", "=", "ctime", "(", ")", "\n", "_", ",", "summaries", ",", "loss_eval", ",", "abs_loss", "=", "self", ".", "sess", ".", "run", "(", "\n", "[", "self", ".", "model", ".", "train_op", ",", "self", ".", "model", ".", "train_summary_op", ",", "self", ".", "model", ".", "loss", ",", "\n", "self", ".", "model", ".", "abs_loss", "]", ",", "\n", "feed_dict", "=", "{", "\n", "self", ".", "model", ".", "src_", ":", "pre_src", ",", "\n", "self", ".", "model", ".", "src_len_", ":", "pre_src_len", ",", "\n", "self", ".", "model", ".", "b_weight_", ":", "b_weight", ",", "\n", "self", ".", "model", ".", "action_idx_", ":", "action_batch_ids", ",", "\n", "self", ".", "model", ".", "expected_q_", ":", "expected_q", ",", "\n", "self", ".", "model", ".", "actions_", ":", "actions", ",", "\n", "self", ".", "model", ".", "actions_len_", ":", "actions_lens", ",", "\n", "self", ".", "model", ".", "actions_repeats_", ":", "actions_repeats", "}", ")", "\n", "t4_end", "=", "ctime", "(", ")", "\n", "\n", "self", ".", "debug", "(", "report_status", "(", "[", "\n", "(", "\"t1\"", ",", "t1_end", "-", "t1", ")", ",", "\n", "(", "\"t2\"", ",", "t2_end", "-", "t2", ")", ",", "\n", "(", "\"t3\"", ",", "t3_end", "-", "t3", ")", ",", "\n", "(", "\"t4\"", ",", "t4_end", "-", "t4", ")", "\n", "]", ")", ")", "\n", "\n", "self", ".", "train_summary_writer", ".", "add_summary", "(", "\n", "summaries", ",", "step", "-", "self", ".", "hp", ".", "observation_t", ")", "\n", "return", "abs_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.agents.cores.DSQNZorkCore.__init__": [[956, 960], ["cores.DQNCore.__init__"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.models.drrn_modeling.PseudoSeq2SeqDRRN.__init__"], ["    ", "def", "__init__", "(", "self", ",", "hp", ",", "model_dir", ")", ":", "\n", "        ", "super", "(", "DQNCore", ",", "self", ")", ".", "__init__", "(", "hp", ",", "model_dir", ")", "\n", "self", ".", "model", ":", "Optional", "[", "DSQNZorkModel", "]", "=", "None", "\n", "self", ".", "target_model", ":", "Optional", "[", "DSQNZorkModel", "]", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.agents.cores.DSQNZorkCore.train_one_batch": [[961, 1003], ["others.get", "cores.DSQNZorkCore._compute_expected_q", "cores.DSQNZorkCore.batch_trajectory2input", "cores.DSQNZorkCore.sess.run", "cores.DSQNZorkCore.train_summary_writer.add_summary"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.students.student_learner.CMD.get", "home.repos.pwc.inspect_result.yinxusen_deepword.agents.cores.GenDQNCore._compute_expected_q", "home.repos.pwc.inspect_result.yinxusen_deepword.agents.cores.TFCore.batch_trajectory2input"], ["", "def", "train_one_batch", "(", "\n", "self", ",", "\n", "pre_trajectories", ":", "List", "[", "List", "[", "ActionMaster", "]", "]", ",", "\n", "post_trajectories", ":", "List", "[", "List", "[", "ActionMaster", "]", "]", ",", "\n", "pre_states", ":", "Optional", "[", "List", "[", "ObsInventory", "]", "]", ",", "\n", "post_states", ":", "Optional", "[", "List", "[", "ObsInventory", "]", "]", ",", "\n", "action_matrix", ":", "List", "[", "np", ".", "ndarray", "]", ",", "\n", "action_len", ":", "List", "[", "np", ".", "ndarray", "]", ",", "\n", "pre_action_mask", ":", "List", "[", "np", ".", "ndarray", "]", ",", "\n", "post_action_mask", ":", "List", "[", "np", ".", "ndarray", "]", ",", "\n", "dones", ":", "List", "[", "bool", "]", ",", "\n", "rewards", ":", "List", "[", "float", "]", ",", "\n", "action_idx", ":", "List", "[", "int", "]", ",", "\n", "b_weight", ":", "np", ".", "ndarray", ",", "\n", "step", ":", "int", ",", "\n", "others", ":", "Any", ")", "->", "np", ".", "ndarray", ":", "\n", "\n", "        ", "src", ",", "src_len", ",", "src2", ",", "src2_len", ",", "labels", "=", "others", ".", "get", "(", ")", "\n", "\n", "expected_q", "=", "self", ".", "_compute_expected_q", "(", "\n", "action_mask", "=", "post_action_mask", ",", "trajectories", "=", "post_trajectories", ",", "\n", "dones", "=", "dones", ",", "rewards", "=", "rewards", ")", "\n", "\n", "pre_src", ",", "pre_src_len", "=", "self", ".", "batch_trajectory2input", "(", "pre_trajectories", ")", "\n", "\n", "_", ",", "summaries", ",", "weighted_loss", ",", "abs_loss", "=", "self", ".", "sess", ".", "run", "(", "\n", "[", "self", ".", "model", ".", "merged_train_op", ",", "self", ".", "model", ".", "weighted_train_summary_op", ",", "\n", "self", ".", "model", ".", "weighted_loss", ",", "self", ".", "model", ".", "abs_loss", "]", ",", "\n", "feed_dict", "=", "{", "\n", "self", ".", "model", ".", "src_", ":", "pre_src", ",", "\n", "self", ".", "model", ".", "src_len_", ":", "pre_src_len", ",", "\n", "self", ".", "model", ".", "b_weight_", ":", "b_weight", ",", "\n", "self", ".", "model", ".", "action_idx_", ":", "action_idx", ",", "\n", "self", ".", "model", ".", "expected_q_", ":", "expected_q", ",", "\n", "self", ".", "model", ".", "snn_src_", ":", "src", ",", "\n", "self", ".", "model", ".", "snn_src_len_", ":", "src_len", ",", "\n", "self", ".", "model", ".", "snn_src2_", ":", "src2", ",", "\n", "self", ".", "model", ".", "snn_src2_len_", ":", "src2_len", ",", "\n", "self", ".", "model", ".", "labels_", ":", "labels", "}", ")", "\n", "self", ".", "train_summary_writer", ".", "add_summary", "(", "\n", "summaries", ",", "step", "-", "self", ".", "hp", ".", "observation_t", ")", "\n", "return", "abs_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.agents.cores.DSQNZorkCore.eval_snn": [[1005, 1044], ["len", "cores.DSQNZorkCore.info", "range", "cores.DSQNZorkCore.debug", "list", "labels.astype.astype.astype", "cores.DSQNZorkCore.sess.run", "numpy.sum", "len", "cores.DSQNZorkCore.debug", "filter", "numpy.equal", "enumerate", "zip"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.deepword.log.Logging.info", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.log.Logging.debug", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.log.Logging.debug"], ["", "def", "eval_snn", "(", "\n", "self", ",", "\n", "snn_data", ":", "Tuple", "[", "\n", "np", ".", "ndarray", ",", "np", ".", "ndarray", ",", "np", ".", "ndarray", ",", "np", ".", "ndarray", ",", "np", ".", "ndarray", "]", ",", "\n", "batch_size", ":", "int", "=", "32", ")", "->", "float", ":", "\n", "\n", "        ", "src", ",", "src_len", ",", "src2", ",", "src2_len", ",", "labels", "=", "snn_data", "\n", "eval_data_size", "=", "len", "(", "src", ")", "\n", "self", ".", "info", "(", "\"start eval with size {}\"", ".", "format", "(", "eval_data_size", ")", ")", "\n", "n_iter", "=", "(", "eval_data_size", "//", "batch_size", ")", "+", "1", "\n", "total_acc", "=", "0", "\n", "total_samples", "=", "0", "\n", "for", "i", "in", "range", "(", "n_iter", ")", ":", "\n", "            ", "self", ".", "debug", "(", "\"eval snn iter {} total {}\"", ".", "format", "(", "i", ",", "n_iter", ")", ")", "\n", "non_empty_src", "=", "list", "(", "filter", "(", "\n", "lambda", "x", ":", "x", "[", "1", "]", "[", "0", "]", "!=", "0", "and", "x", "[", "1", "]", "[", "1", "]", "!=", "0", ",", "\n", "enumerate", "(", "zip", "(", "src_len", ",", "src2_len", ")", ")", ")", ")", "\n", "non_empty_src_idx", "=", "[", "x", "[", "0", "]", "for", "x", "in", "non_empty_src", "]", "\n", "src", "=", "src", "[", "non_empty_src_idx", ",", ":", "]", "\n", "src_len", "=", "src_len", "[", "non_empty_src_idx", "]", "\n", "src2", "=", "src2", "[", "non_empty_src_idx", ",", ":", "]", "\n", "src2_len", "=", "src2_len", "[", "non_empty_src_idx", "]", "\n", "labels", "=", "labels", "[", "non_empty_src_idx", "]", "\n", "labels", "=", "labels", ".", "astype", "(", "np", ".", "int32", ")", "\n", "pred", ",", "diff_two_states", "=", "self", ".", "sess", ".", "run", "(", "\n", "[", "self", ".", "model", ".", "semantic_same", ",", "self", ".", "model", ".", "h_states_diff", "]", ",", "\n", "feed_dict", "=", "{", "self", ".", "model", ".", "snn_src_", ":", "src", ",", "\n", "self", ".", "model", ".", "snn_src2_", ":", "src2", ",", "\n", "self", ".", "model", ".", "snn_src_len_", ":", "src_len", ",", "\n", "self", ".", "model", ".", "snn_src2_len_", ":", "src2_len", "}", ")", "\n", "pred_labels", "=", "(", "pred", ">", "0", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "total_acc", "+=", "np", ".", "sum", "(", "np", ".", "equal", "(", "labels", ",", "pred_labels", ")", ")", "\n", "total_samples", "+=", "len", "(", "src", ")", "\n", "", "if", "total_samples", "==", "0", ":", "\n", "            ", "avg_acc", "=", "-", "1", "\n", "", "else", ":", "\n", "            ", "avg_acc", "=", "total_acc", "*", "1.", "/", "total_samples", "\n", "self", ".", "debug", "(", "\"valid sample size {}\"", ".", "format", "(", "total_samples", ")", ")", "\n", "", "return", "avg_acc", "\n", "", "pass", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.agents.cores.DSQNCore.__init__": [[1048, 1052], ["cores.DRRNCore.__init__"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.models.drrn_modeling.PseudoSeq2SeqDRRN.__init__"], ["    ", "def", "__init__", "(", "self", ",", "hp", ",", "model_dir", ")", ":", "\n", "        ", "super", "(", "DRRNCore", ",", "self", ")", ".", "__init__", "(", "hp", ",", "model_dir", ")", "\n", "self", ".", "model", ":", "Optional", "[", "DSQNModel", "]", "=", "None", "\n", "self", ".", "target_model", ":", "Optional", "[", "DSQNModel", "]", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.agents.cores.DSQNCore.train_one_batch": [[1053, 1121], ["deepword.utils.ctime", "others.get", "deepword.utils.ctime", "deepword.utils.ctime", "cores.DSQNCore._compute_expected_q", "deepword.utils.ctime", "deepword.utils.ctime", "cores.DSQNCore.batch_trajectory2input", "deepword.utils.ctime", "deepword.utils.ctime", "deepword.agents.utils.batch_drrn_action_input", "deepword.agents.utils.id_real2batch", "deepword.utils.ctime", "deepword.utils.ctime", "cores.DSQNCore.sess.run", "deepword.utils.ctime", "cores.DSQNCore.debug", "cores.DSQNCore.train_summary_writer.add_summary", "deepword.utils.report_status"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.deepword.utils.ctime", "home.repos.pwc.inspect_result.yinxusen_deepword.students.student_learner.CMD.get", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.utils.ctime", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.utils.ctime", "home.repos.pwc.inspect_result.yinxusen_deepword.agents.cores.GenDQNCore._compute_expected_q", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.utils.ctime", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.utils.ctime", "home.repos.pwc.inspect_result.yinxusen_deepword.agents.cores.TFCore.batch_trajectory2input", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.utils.ctime", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.utils.ctime", "home.repos.pwc.inspect_result.yinxusen_deepword.agents.utils.batch_drrn_action_input", "home.repos.pwc.inspect_result.yinxusen_deepword.agents.utils.id_real2batch", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.utils.ctime", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.utils.ctime", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.utils.ctime", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.log.Logging.debug", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.utils.report_status"], ["", "def", "train_one_batch", "(", "\n", "self", ",", "\n", "pre_trajectories", ":", "List", "[", "List", "[", "ActionMaster", "]", "]", ",", "\n", "post_trajectories", ":", "List", "[", "List", "[", "ActionMaster", "]", "]", ",", "\n", "pre_states", ":", "Optional", "[", "List", "[", "ObsInventory", "]", "]", ",", "\n", "post_states", ":", "Optional", "[", "List", "[", "ObsInventory", "]", "]", ",", "\n", "action_matrix", ":", "List", "[", "np", ".", "ndarray", "]", ",", "\n", "action_len", ":", "List", "[", "np", ".", "ndarray", "]", ",", "\n", "pre_action_mask", ":", "List", "[", "np", ".", "ndarray", "]", ",", "\n", "post_action_mask", ":", "List", "[", "np", ".", "ndarray", "]", ",", "\n", "dones", ":", "List", "[", "bool", "]", ",", "\n", "rewards", ":", "List", "[", "float", "]", ",", "\n", "action_idx", ":", "List", "[", "int", "]", ",", "\n", "b_weight", ":", "np", ".", "ndarray", ",", "\n", "step", ":", "int", ",", "\n", "others", ":", "Any", ")", "->", "np", ".", "ndarray", ":", "\n", "\n", "        ", "t0", "=", "ctime", "(", ")", "\n", "src", ",", "src_len", ",", "src2", ",", "src2_len", ",", "labels", "=", "others", ".", "get", "(", ")", "\n", "t0_end", "=", "ctime", "(", ")", "\n", "\n", "t1", "=", "ctime", "(", ")", "\n", "expected_q", "=", "self", ".", "_compute_expected_q", "(", "\n", "post_action_mask", ",", "post_trajectories", ",", "action_matrix", ",", "action_len", ",", "\n", "dones", ",", "rewards", ")", "\n", "t1_end", "=", "ctime", "(", ")", "\n", "\n", "t2", "=", "ctime", "(", ")", "\n", "pre_src", ",", "pre_src_len", "=", "self", ".", "batch_trajectory2input", "(", "pre_trajectories", ")", "\n", "t2_end", "=", "ctime", "(", ")", "\n", "\n", "t3", "=", "ctime", "(", ")", "\n", "(", "actions", ",", "actions_lens", ",", "actions_repeats", ",", "id_real2mask", "\n", ")", "=", "batch_drrn_action_input", "(", "\n", "action_matrix", ",", "action_len", ",", "pre_action_mask", ")", "\n", "action_batch_ids", "=", "id_real2batch", "(", "\n", "action_idx", ",", "id_real2mask", ",", "actions_repeats", ")", "\n", "t3_end", "=", "ctime", "(", ")", "\n", "\n", "t4", "=", "ctime", "(", ")", "\n", "_", ",", "summaries", ",", "weighted_loss", ",", "abs_loss", "=", "self", ".", "sess", ".", "run", "(", "\n", "[", "self", ".", "model", ".", "merged_train_op", ",", "self", ".", "model", ".", "weighted_train_summary_op", ",", "\n", "self", ".", "model", ".", "weighted_loss", ",", "self", ".", "model", ".", "abs_loss", "]", ",", "\n", "feed_dict", "=", "{", "\n", "self", ".", "model", ".", "src_", ":", "pre_src", ",", "\n", "self", ".", "model", ".", "src_len_", ":", "pre_src_len", ",", "\n", "self", ".", "model", ".", "b_weight_", ":", "b_weight", ",", "\n", "self", ".", "model", ".", "action_idx_", ":", "action_batch_ids", ",", "\n", "self", ".", "model", ".", "expected_q_", ":", "expected_q", ",", "\n", "self", ".", "model", ".", "actions_", ":", "actions", ",", "\n", "self", ".", "model", ".", "actions_len_", ":", "actions_lens", ",", "\n", "self", ".", "model", ".", "actions_repeats_", ":", "actions_repeats", ",", "\n", "self", ".", "model", ".", "snn_src_", ":", "src", ",", "\n", "self", ".", "model", ".", "snn_src_len_", ":", "src_len", ",", "\n", "self", ".", "model", ".", "snn_src2_", ":", "src2", ",", "\n", "self", ".", "model", ".", "snn_src2_len_", ":", "src2_len", ",", "\n", "self", ".", "model", ".", "labels_", ":", "labels", "}", ")", "\n", "t4_end", "=", "ctime", "(", ")", "\n", "self", ".", "debug", "(", "report_status", "(", "[", "\n", "(", "\"t0\"", ",", "t0_end", "-", "t0", ")", ",", "\n", "(", "\"t1\"", ",", "t1_end", "-", "t1", ")", ",", "\n", "(", "\"t2\"", ",", "t2_end", "-", "t2", ")", ",", "\n", "(", "\"t3\"", ",", "t3_end", "-", "t3", ")", ",", "\n", "(", "\"t4\"", ",", "t4_end", "-", "t4", ")", "\n", "]", ")", ")", "\n", "self", ".", "train_summary_writer", ".", "add_summary", "(", "\n", "summaries", ",", "step", "-", "self", ".", "hp", ".", "observation_t", ")", "\n", "return", "abs_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.agents.cores.DSQNCore.eval_snn": [[1123, 1162], ["len", "cores.DSQNCore.info", "range", "cores.DSQNCore.debug", "list", "labels.astype.astype.astype", "cores.DSQNCore.sess.run", "numpy.sum", "len", "cores.DSQNCore.debug", "filter", "numpy.equal", "enumerate", "zip"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.deepword.log.Logging.info", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.log.Logging.debug", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.log.Logging.debug"], ["", "def", "eval_snn", "(", "\n", "self", ",", "\n", "snn_data", ":", "Tuple", "[", "\n", "np", ".", "ndarray", ",", "np", ".", "ndarray", ",", "np", ".", "ndarray", ",", "np", ".", "ndarray", ",", "np", ".", "ndarray", "]", ",", "\n", "batch_size", ":", "int", "=", "32", ")", "->", "float", ":", "\n", "\n", "        ", "src", ",", "src_len", ",", "src2", ",", "src2_len", ",", "labels", "=", "snn_data", "\n", "eval_data_size", "=", "len", "(", "src", ")", "\n", "self", ".", "info", "(", "\"start eval with size {}\"", ".", "format", "(", "eval_data_size", ")", ")", "\n", "n_iter", "=", "(", "eval_data_size", "//", "batch_size", ")", "+", "1", "\n", "total_acc", "=", "0", "\n", "total_samples", "=", "0", "\n", "for", "i", "in", "range", "(", "n_iter", ")", ":", "\n", "            ", "self", ".", "debug", "(", "\"eval snn iter {} total {}\"", ".", "format", "(", "i", ",", "n_iter", ")", ")", "\n", "non_empty_src", "=", "list", "(", "filter", "(", "\n", "lambda", "x", ":", "x", "[", "1", "]", "[", "0", "]", "!=", "0", "and", "x", "[", "1", "]", "[", "1", "]", "!=", "0", ",", "\n", "enumerate", "(", "zip", "(", "src_len", ",", "src2_len", ")", ")", ")", ")", "\n", "non_empty_src_idx", "=", "[", "x", "[", "0", "]", "for", "x", "in", "non_empty_src", "]", "\n", "src", "=", "src", "[", "non_empty_src_idx", ",", ":", "]", "\n", "src_len", "=", "src_len", "[", "non_empty_src_idx", "]", "\n", "src2", "=", "src2", "[", "non_empty_src_idx", ",", ":", "]", "\n", "src2_len", "=", "src2_len", "[", "non_empty_src_idx", "]", "\n", "labels", "=", "labels", "[", "non_empty_src_idx", "]", "\n", "labels", "=", "labels", ".", "astype", "(", "np", ".", "int32", ")", "\n", "pred", ",", "diff_two_states", "=", "self", ".", "sess", ".", "run", "(", "\n", "[", "self", ".", "model", ".", "semantic_same", ",", "self", ".", "model", ".", "h_states_diff", "]", ",", "\n", "feed_dict", "=", "{", "self", ".", "model", ".", "snn_src_", ":", "src", ",", "\n", "self", ".", "model", ".", "snn_src2_", ":", "src2", ",", "\n", "self", ".", "model", ".", "snn_src_len_", ":", "src_len", ",", "\n", "self", ".", "model", ".", "snn_src2_len_", ":", "src2_len", "}", ")", "\n", "pred_labels", "=", "(", "pred", ">", "0", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "total_acc", "+=", "np", ".", "sum", "(", "np", ".", "equal", "(", "labels", ",", "pred_labels", ")", ")", "\n", "total_samples", "+=", "len", "(", "src", ")", "\n", "", "if", "total_samples", "==", "0", ":", "\n", "            ", "avg_acc", "=", "-", "1", "\n", "", "else", ":", "\n", "            ", "avg_acc", "=", "total_acc", "*", "1.", "/", "total_samples", "\n", "self", ".", "debug", "(", "\"valid sample size {}\"", ".", "format", "(", "total_samples", ")", ")", "\n", "", "return", "avg_acc", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.agents.cores.GenDQNCore.__init__": [[1165, 1170], ["cores.TFCore.__init__", "deepword.tokenizers.init_tokens"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.models.drrn_modeling.PseudoSeq2SeqDRRN.__init__", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.tokenizers.init_tokens"], ["    ", "def", "__init__", "(", "self", ",", "hp", ",", "model_dir", ")", ":", "\n", "        ", "super", "(", "GenDQNCore", ",", "self", ")", ".", "__init__", "(", "hp", ",", "model_dir", ")", "\n", "self", ".", "model", ":", "Optional", "[", "GenDQNModel", "]", "=", "None", "\n", "self", ".", "target_model", ":", "Optional", "[", "GenDQNModel", "]", "=", "None", "\n", "self", ".", "hp", ",", "self", ".", "tokenizer", "=", "init_tokens", "(", "hp", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.agents.cores.GenDQNCore.summary": [[1171, 1184], ["range", "len", "list", "cores.GenDQNCore.tokenizer.convert_ids_to_tokens", "list", "res_summary.append", "deepword.agents.utils.GenSummary"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.deepword.tokenizers.BertTokenizer.convert_ids_to_tokens", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.tree_memory.TreeMemory.append"], ["", "def", "summary", "(", "\n", "self", ",", "token_idx", ":", "np", ".", "ndarray", ",", "col_eos_idx", ":", "np", ".", "ndarray", ",", "\n", "p_gen", ":", "np", ".", "ndarray", ",", "sum_logits", ":", "np", ".", "ndarray", "\n", ")", "->", "List", "[", "GenSummary", "]", ":", "\n", "        ", "res_summary", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "token_idx", ")", ")", ":", "\n", "            ", "n_cols", "=", "col_eos_idx", "[", "i", "]", "\n", "ids", "=", "list", "(", "token_idx", "[", "i", ",", ":", "n_cols", "]", ")", "\n", "tokens", "=", "self", ".", "tokenizer", ".", "convert_ids_to_tokens", "(", "ids", ")", "\n", "gens", "=", "list", "(", "p_gen", "[", "i", ",", ":", "n_cols", "]", ")", "\n", "log_prob", "=", "sum_logits", "[", "i", "]", "/", "n_cols", "\n", "res_summary", ".", "append", "(", "GenSummary", "(", "ids", ",", "tokens", ",", "gens", ",", "log_prob", ",", "n_cols", ")", ")", "\n", "", "return", "res_summary", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.agents.cores.GenDQNCore.decode_action": [[1185, 1226], ["cores.GenDQNCore.debug", "cores.GenDQNCore.trajectory2input", "cores.GenDQNCore.debug", "cores.GenDQNCore.debug", "cores.GenDQNCore.debug", "cores.GenDQNCore.sess.run", "cores.GenDQNCore.summary", "deepword.utils.flatten", "cores.GenDQNCore.debug", "sorted", "range", "len", "str"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.deepword.log.Logging.debug", "home.repos.pwc.inspect_result.yinxusen_deepword.agents.cores.NLUCore.trajectory2input", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.log.Logging.debug", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.log.Logging.debug", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.log.Logging.debug", "home.repos.pwc.inspect_result.yinxusen_deepword.agents.cores.PGNCore.summary", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.utils.flatten", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.log.Logging.debug"], ["", "def", "decode_action", "(", "\n", "self", ",", "trajectory", ":", "List", "[", "ActionMaster", "]", ")", "->", "GenSummary", ":", "\n", "        ", "self", ".", "debug", "(", "\"trajectory: {}\"", ".", "format", "(", "trajectory", ")", ")", "\n", "src", ",", "src_len", "=", "self", ".", "trajectory2input", "(", "trajectory", ")", "\n", "self", ".", "debug", "(", "\"src: {}\"", ".", "format", "(", "src", ")", ")", "\n", "self", ".", "debug", "(", "\"src_len: {}\"", ".", "format", "(", "src_len", ")", ")", "\n", "beam_size", "=", "1", "\n", "temperature", "=", "1", "\n", "use_greedy", "=", "True", "\n", "\n", "self", ".", "debug", "(", "\"use_greedy: {}, temperature: {}\"", ".", "format", "(", "\n", "use_greedy", ",", "temperature", ")", ")", "\n", "\n", "res", "=", "self", ".", "sess", ".", "run", "(", "\n", "[", "self", ".", "model", ".", "decoded_idx_infer", ",", "\n", "self", ".", "model", ".", "col_eos_idx", ",", "\n", "self", ".", "model", ".", "p_gen_infer", ",", "\n", "self", ".", "model", ".", "decoded_logits_infer", "]", ",", "\n", "feed_dict", "=", "{", "\n", "self", ".", "model", ".", "src_", ":", "[", "src", "]", ",", "\n", "self", ".", "model", ".", "src_len_", ":", "[", "src_len", "]", ",", "\n", "self", ".", "model", ".", "temperature_", ":", "temperature", ",", "\n", "self", ".", "model", ".", "beam_size_", ":", "beam_size", ",", "\n", "self", ".", "model", ".", "use_greedy_", ":", "use_greedy", "\n", "}", ")", "\n", "\n", "token_idx", "=", "res", "[", "0", "]", "\n", "col_eos_idx", "=", "res", "[", "1", "]", "\n", "p_gen", "=", "res", "[", "2", "]", "\n", "decoded_logits", "=", "res", "[", "3", "]", "\n", "res_summary", "=", "self", ".", "summary", "(", "\n", "token_idx", ",", "col_eos_idx", ",", "p_gen", ",", "decoded_logits", ")", "\n", "res_summary", "=", "flatten", "(", "\n", "[", "sorted", "(", "res_summary", "[", "i", ":", "i", "+", "beam_size", "]", ",", "key", "=", "lambda", "x", ":", "-", "x", ".", "log_prob", ")", "\n", "for", "i", "in", "range", "(", "0", ",", "len", "(", "res_summary", ")", ",", "beam_size", ")", "]", "\n", ")", "\n", "\n", "self", ".", "debug", "(", "\"generated actions:\\n{}\"", ".", "format", "(", "\n", "\"\\n\"", ".", "join", "(", "[", "str", "(", "x", ")", "for", "x", "in", "res_summary", "]", ")", ")", ")", "\n", "\n", "return", "res_summary", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.agents.cores.GenDQNCore.policy": [[1227, 1234], ["NotImplementedError"], "methods", ["None"], ["", "def", "policy", "(", "\n", "self", ",", "trajectory", ":", "List", "[", "ActionMaster", "]", ",", "\n", "state", ":", "Optional", "[", "ObsInventory", "]", ",", "\n", "action_matrix", ":", "np", ".", "ndarray", ",", "\n", "action_len", ":", "np", ".", "ndarray", ",", "\n", "action_mask", ":", "np", ".", "ndarray", ")", "->", "np", ".", "ndarray", ":", "\n", "        ", "raise", "NotImplementedError", "(", "\"GenDQNCore doesn't support policy\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.agents.cores.GenDQNCore._compute_expected_q": [[1235, 1276], ["cores.GenDQNCore.batch_trajectory2input", "cores.GenDQNCore._get_target_model", "target_sess.run", "cores.GenDQNCore.sess.run", "numpy.zeros_like", "range", "len", "numpy.mean", "range"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.agents.cores.TFCore.batch_trajectory2input", "home.repos.pwc.inspect_result.yinxusen_deepword.agents.cores.TFCore._get_target_model"], ["", "def", "_compute_expected_q", "(", "\n", "self", ",", "\n", "trajectories", ":", "List", "[", "List", "[", "ActionMaster", "]", "]", ",", "\n", "dones", ":", "List", "[", "bool", "]", ",", "\n", "rewards", ":", "List", "[", "float", "]", ")", "->", "np", ".", "ndarray", ":", "\n", "        ", "\"\"\"\n        Compute expected q values given post trajectories and post actions\n        \"\"\"", "\n", "\n", "src", ",", "src_len", "=", "self", ".", "batch_trajectory2input", "(", "trajectories", ")", "\n", "target_model", ",", "target_sess", "=", "self", ".", "_get_target_model", "(", ")", "\n", "# target network provides the value used as expected q-values", "\n", "qs_target", "=", "target_sess", ".", "run", "(", "\n", "target_model", ".", "decoded_logits_infer", ",", "\n", "feed_dict", "=", "{", "\n", "target_model", ".", "src_", ":", "src", ",", "\n", "target_model", ".", "src_len_", ":", "src_len", ",", "\n", "target_model", ".", "beam_size_", ":", "1", ",", "\n", "target_model", ".", "use_greedy_", ":", "True", ",", "\n", "target_model", ".", "temperature_", ":", "1.", "\n", "}", ")", "\n", "\n", "# current network decides which action provides best q-value", "\n", "s_argmax_q", ",", "valid_len", "=", "self", ".", "sess", ".", "run", "(", "\n", "[", "self", ".", "model", ".", "decoded_idx_infer", ",", "self", ".", "model", ".", "col_eos_idx", "]", ",", "\n", "feed_dict", "=", "{", "\n", "self", ".", "model", ".", "src_", ":", "src", ",", "\n", "self", ".", "model", ".", "src_len_", ":", "src_len", ",", "\n", "self", ".", "model", ".", "beam_size_", ":", "1", ",", "\n", "self", ".", "model", ".", "use_greedy_", ":", "True", ",", "\n", "self", ".", "model", ".", "temperature_", ":", "1.", "}", ")", "\n", "\n", "expected_q", "=", "np", ".", "zeros_like", "(", "rewards", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "expected_q", ")", ")", ":", "\n", "            ", "expected_q", "[", "i", "]", "=", "rewards", "[", "i", "]", "\n", "if", "not", "dones", "[", "i", "]", ":", "\n", "                ", "expected_q", "[", "i", "]", "+=", "self", ".", "hp", ".", "gamma", "*", "np", ".", "mean", "(", "\n", "qs_target", "[", "i", ",", "range", "(", "valid_len", "[", "i", "]", ")", ",", "\n", "s_argmax_q", "[", "i", ",", ":", "valid_len", "[", "i", "]", "]", "]", ")", "\n", "\n", "", "", "return", "expected_q", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.agents.cores.GenDQNCore.train_one_batch": [[1277, 1324], ["cores.GenDQNCore._compute_expected_q", "cores.GenDQNCore.batch_trajectory2input", "deepword.agents.utils.get_action_idx_pair", "cores.GenDQNCore.debug", "cores.GenDQNCore.sess.run", "cores.GenDQNCore.train_summary_writer.add_summary", "numpy.asarray", "numpy.asarray", "cores.GenDQNCore.tokenizer.de_tokenize", "cores.GenDQNCore.tokenizer.de_tokenize"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.agents.cores.GenDQNCore._compute_expected_q", "home.repos.pwc.inspect_result.yinxusen_deepword.agents.cores.TFCore.batch_trajectory2input", "home.repos.pwc.inspect_result.yinxusen_deepword.agents.utils.get_action_idx_pair", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.log.Logging.debug", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.tokenizers.AlbertTokenizer.de_tokenize", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.tokenizers.AlbertTokenizer.de_tokenize"], ["", "def", "train_one_batch", "(", "\n", "self", ",", "\n", "pre_trajectories", ":", "List", "[", "List", "[", "ActionMaster", "]", "]", ",", "\n", "post_trajectories", ":", "List", "[", "List", "[", "ActionMaster", "]", "]", ",", "\n", "pre_states", ":", "Optional", "[", "List", "[", "ObsInventory", "]", "]", ",", "\n", "post_states", ":", "Optional", "[", "List", "[", "ObsInventory", "]", "]", ",", "\n", "action_matrix", ":", "List", "[", "np", ".", "ndarray", "]", ",", "\n", "action_len", ":", "List", "[", "np", ".", "ndarray", "]", ",", "\n", "pre_action_mask", ":", "List", "[", "np", ".", "ndarray", "]", ",", "\n", "post_action_mask", ":", "List", "[", "np", ".", "ndarray", "]", ",", "\n", "dones", ":", "List", "[", "bool", "]", ",", "\n", "rewards", ":", "List", "[", "float", "]", ",", "\n", "action_idx", ":", "List", "[", "int", "]", ",", "\n", "b_weight", ":", "np", ".", "ndarray", ",", "\n", "step", ":", "int", ",", "\n", "others", ":", "Any", ")", "->", "np", ".", "ndarray", ":", "\n", "\n", "        ", "expected_q", "=", "self", ".", "_compute_expected_q", "(", "\n", "trajectories", "=", "post_trajectories", ",", "dones", "=", "dones", ",", "rewards", "=", "rewards", ")", "\n", "\n", "src", ",", "src_len", "=", "self", ".", "batch_trajectory2input", "(", "pre_trajectories", ")", "\n", "action_token_ids", "=", "others", "\n", "action_id_in", ",", "action_id_out", ",", "new_action_len", "=", "get_action_idx_pair", "(", "\n", "np", ".", "asarray", "(", "action_token_ids", ")", ",", "np", ".", "asarray", "(", "action_len", ")", ",", "\n", "self", ".", "hp", ".", "sos_id", ",", "self", ".", "hp", ".", "eos_id", ")", "\n", "self", ".", "debug", "(", "\"action in/out example:\\n{} -- {}\\n{} -- {}\"", ".", "format", "(", "\n", "action_id_in", "[", "0", ",", ":", "]", ",", "\n", "self", ".", "tokenizer", ".", "de_tokenize", "(", "action_id_in", "[", "0", ",", ":", "]", ")", ",", "\n", "action_id_out", "[", "0", ",", ":", "]", ",", "\n", "self", ".", "tokenizer", ".", "de_tokenize", "(", "action_id_out", "[", "0", ",", ":", "]", ")", ")", ")", "\n", "\n", "_", ",", "summaries", ",", "loss_eval", ",", "abs_loss", "=", "self", ".", "sess", ".", "run", "(", "\n", "[", "self", ".", "model", ".", "train_op", ",", "\n", "self", ".", "model", ".", "train_summary_op", ",", "\n", "self", ".", "model", ".", "loss", ",", "\n", "self", ".", "model", ".", "abs_loss", "]", ",", "\n", "feed_dict", "=", "{", "\n", "self", ".", "model", ".", "src_", ":", "src", ",", "\n", "self", ".", "model", ".", "src_len_", ":", "src_len", ",", "\n", "self", ".", "model", ".", "b_weight_", ":", "b_weight", ",", "\n", "self", ".", "model", ".", "action_idx_", ":", "action_id_in", ",", "\n", "self", ".", "model", ".", "action_idx_out_", ":", "action_id_out", ",", "\n", "self", ".", "model", ".", "action_len_", ":", "new_action_len", ",", "\n", "self", ".", "model", ".", "expected_q_", ":", "expected_q", "}", ")", "\n", "self", ".", "train_summary_writer", ".", "add_summary", "(", "\n", "summaries", ",", "step", "-", "self", ".", "hp", ".", "observation_t", ")", "\n", "return", "abs_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.agents.cores.PGNCore.__init__": [[1328, 1332], ["cores.TFCore.__init__", "deepword.tokenizers.init_tokens"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.models.drrn_modeling.PseudoSeq2SeqDRRN.__init__", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.tokenizers.init_tokens"], ["def", "__init__", "(", "self", ",", "hp", ",", "model_dir", ")", ":", "\n", "        ", "super", "(", "PGNCore", ",", "self", ")", ".", "__init__", "(", "hp", ",", "model_dir", ")", "\n", "self", ".", "model", ":", "Optional", "[", "GenDQNModel", "]", "=", "None", "\n", "self", ".", "hp", ",", "self", ".", "tokenizer", "=", "init_tokens", "(", "hp", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.agents.cores.PGNCore.summary": [[1333, 1353], ["range", "list", "list", "cores.PGNCore.tokenizer.convert_ids_to_tokens", "list", "list.append", "reversed", "numpy.sum", "deepword.agents.utils.GenSummary", "sorted"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.deepword.tokenizers.BertTokenizer.convert_ids_to_tokens", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.tree_memory.TreeMemory.append"], ["", "def", "summary", "(", "\n", "self", ",", "action_idx", ":", "np", ".", "ndarray", ",", "col_eos_idx", ":", "np", ".", "ndarray", ",", "\n", "decoded_logits", ":", "np", ".", "ndarray", ",", "p_gen", ":", "np", ".", "ndarray", ",", "beam_size", ":", "int", "\n", ")", "->", "List", "[", "GenSummary", "]", ":", "\n", "        ", "\"\"\"\n        Return [ids, tokens, generation probabilities of each token, q_action]\n        sorted by q_action (from larger to smaller)\n        q_action: the average of decoded logits of selected tokens\n        \"\"\"", "\n", "res_summary", "=", "[", "]", "\n", "for", "bid", "in", "range", "(", "beam_size", ")", ":", "\n", "            ", "n_cols", "=", "col_eos_idx", "[", "bid", "]", "\n", "ids", "=", "list", "(", "action_idx", "[", "bid", ",", ":", "n_cols", "]", ")", "\n", "tokens", "=", "self", ".", "tokenizer", ".", "convert_ids_to_tokens", "(", "ids", ")", "\n", "gen_prob_per_token", "=", "list", "(", "p_gen", "[", "bid", ",", ":", "n_cols", "]", ")", "\n", "q_action", "=", "np", ".", "sum", "(", "decoded_logits", "[", "bid", ",", ":", "n_cols", ",", "ids", "]", ")", "/", "n_cols", "\n", "res_summary", ".", "append", "(", "\n", "GenSummary", "(", "ids", ",", "tokens", ",", "gen_prob_per_token", ",", "q_action", ",", "n_cols", ")", ")", "\n", "", "res_summary", "=", "list", "(", "reversed", "(", "sorted", "(", "res_summary", ",", "key", "=", "lambda", "x", ":", "x", "[", "-", "1", "]", ")", ")", ")", "\n", "return", "res_summary", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.agents.cores.PGNCore.decode": [[1354, 1379], ["cores.PGNCore.trajectory2input", "cores.PGNCore.sess.run", "cores.PGNCore.summary", "cores.PGNCore.debug", "str"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.agents.cores.NLUCore.trajectory2input", "home.repos.pwc.inspect_result.yinxusen_deepword.agents.cores.PGNCore.summary", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.log.Logging.debug"], ["", "def", "decode", "(", "\n", "self", ",", "trajectory", ":", "List", "[", "ActionMaster", "]", ",", "beam_size", ":", "int", ",", "\n", "temperature", ":", "float", ",", "use_greedy", ":", "bool", ")", "->", "List", "[", "GenSummary", "]", ":", "\n", "        ", "src", ",", "src_len", "=", "self", ".", "trajectory2input", "(", "trajectory", ")", "\n", "res", "=", "self", ".", "sess", ".", "run", "(", "\n", "[", "self", ".", "model", ".", "decoded_idx_infer", ",", "\n", "self", ".", "model", ".", "col_eos_idx", ",", "\n", "self", ".", "model", ".", "decoded_logits_infer", ",", "\n", "self", ".", "model", ".", "p_gen_infer", "]", ",", "\n", "feed_dict", "=", "{", "\n", "self", ".", "model", ".", "src_", ":", "[", "src", "]", ",", "\n", "self", ".", "model", ".", "src_len_", ":", "[", "src_len", "]", ",", "\n", "self", ".", "model", ".", "temperature_", ":", "temperature", ",", "\n", "self", ".", "model", ".", "beam_size_", ":", "beam_size", ",", "\n", "self", ".", "model", ".", "use_greedy_", ":", "use_greedy", "\n", "}", ")", "\n", "action_idx", "=", "res", "[", "0", "]", "\n", "col_eos_idx", "=", "res", "[", "1", "]", "\n", "decoded_logits", "=", "res", "[", "2", "]", "\n", "p_gen", "=", "res", "[", "3", "]", "\n", "res_summary", "=", "self", ".", "summary", "(", "\n", "action_idx", ",", "col_eos_idx", ",", "decoded_logits", ",", "p_gen", ",", "beam_size", ")", "\n", "self", ".", "debug", "(", "\"generated results:\\n{}\"", ".", "format", "(", "\n", "\"\\n\"", ".", "join", "(", "[", "str", "(", "x", ")", "for", "x", "in", "res_summary", "]", ")", ")", ")", "\n", "return", "res_summary", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.agents.cores.PGNCore.generate_admissible_actions": [[1380, 1393], ["cores.PGNCore.decode", "cores.PGNCore.tokenizer.de_tokenize", "cores.PGNCore.decode", "a.strip", "cores.PGNCore.tokenizer.de_tokenize", "cores.PGNCore.split"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.models.transformer.BertTransformer.decode", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.tokenizers.AlbertTokenizer.de_tokenize", "home.repos.pwc.inspect_result.yinxusen_deepword.models.transformer.BertTransformer.decode", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.tokenizers.AlbertTokenizer.de_tokenize"], ["", "def", "generate_admissible_actions", "(", "\n", "self", ",", "trajectory", ":", "List", "[", "ActionMaster", "]", ")", "->", "List", "[", "str", "]", ":", "\n", "\n", "        ", "if", "self", ".", "hp", ".", "decode_concat_action", ":", "\n", "            ", "res", "=", "self", ".", "decode", "(", "\n", "trajectory", ",", "beam_size", "=", "1", ",", "temperature", "=", "1.", ",", "use_greedy", "=", "False", ")", "\n", "concat_actions", "=", "self", ".", "tokenizer", ".", "de_tokenize", "(", "res", "[", "0", "]", ".", "ids", ")", "\n", "actions", "=", "[", "a", ".", "strip", "(", ")", "for", "a", "in", "concat_actions", ".", "split", "(", "\";\"", ")", "]", "\n", "", "else", ":", "\n", "            ", "res", "=", "self", ".", "decode", "(", "\n", "trajectory", ",", "beam_size", "=", "20", ",", "temperature", "=", "1.", ",", "use_greedy", "=", "False", ")", "\n", "actions", "=", "[", "self", ".", "tokenizer", ".", "de_tokenize", "(", "x", ".", "ids", ")", "for", "x", "in", "res", "]", "\n", "", "return", "actions", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.agents.cores.PGNCore.policy": [[1394, 1402], ["NotImplementedError"], "methods", ["None"], ["", "def", "policy", "(", "\n", "self", ",", "\n", "trajectory", ":", "List", "[", "ActionMaster", "]", ",", "\n", "state", ":", "Optional", "[", "ObsInventory", "]", ",", "\n", "action_matrix", ":", "np", ".", "ndarray", ",", "\n", "action_len", ":", "np", ".", "ndarray", ",", "\n", "action_mask", ":", "np", ".", "ndarray", ")", "->", "np", ".", "ndarray", ":", "\n", "        ", "raise", "NotImplementedError", "(", "\"PGNCore doesn't support policy\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.agents.cores.PGNCore.train_one_batch": [[1403, 1416], ["NotImplementedError"], "methods", ["None"], ["", "def", "train_one_batch", "(", "\n", "self", ",", "pre_trajectories", ":", "List", "[", "List", "[", "ActionMaster", "]", "]", ",", "\n", "post_trajectories", ":", "List", "[", "List", "[", "ActionMaster", "]", "]", ",", "\n", "pre_states", ":", "Optional", "[", "List", "[", "ObsInventory", "]", "]", ",", "\n", "post_states", ":", "Optional", "[", "List", "[", "ObsInventory", "]", "]", ",", "\n", "action_matrix", ":", "List", "[", "np", ".", "ndarray", "]", ",", "\n", "action_len", ":", "List", "[", "np", ".", "ndarray", "]", ",", "\n", "pre_action_mask", ":", "List", "[", "np", ".", "ndarray", "]", ",", "\n", "post_action_mask", ":", "List", "[", "np", ".", "ndarray", "]", ",", "dones", ":", "List", "[", "bool", "]", ",", "\n", "rewards", ":", "List", "[", "float", "]", ",", "action_idx", ":", "List", "[", "int", "]", ",", "\n", "b_weight", ":", "np", ".", "ndarray", ",", "step", ":", "int", ",", "\n", "others", ":", "Any", ")", "->", "np", ".", "ndarray", ":", "\n", "        ", "raise", "NotImplementedError", "(", "\"PGNCore doesn't support train\"", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.yinxusen_deepword.agents.competition_agent.CompetitionAgent.__init__": [[13, 17], ["deepword.agents.base_agent.BaseAgent.__init__"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.models.drrn_modeling.PseudoSeq2SeqDRRN.__init__"], ["def", "__init__", "(", "self", ",", "hp", ",", "model_dir", ")", ":", "\n", "        ", "super", "(", "CompetitionAgent", ",", "self", ")", ".", "__init__", "(", "hp", ",", "model_dir", ")", "\n", "self", ".", "_theme_words", "=", "{", "}", "\n", "self", ".", "_see_cookbook", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.agents.competition_agent.CompetitionAgent._contain_words": [[18, 21], ["any", "map"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "_contain_words", "(", "cls", ",", "sentence", ",", "words", ")", ":", "\n", "        ", "return", "any", "(", "map", "(", "lambda", "w", ":", "w", "in", "sentence", ",", "words", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.agents.competition_agent.CompetitionAgent._get_theme_words": [[22, 35], ["re.search", "recipe.replace", "re.search.group", "list", "filter", "map", "list.split", "w.strip"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "_get_theme_words", "(", "cls", ",", "recipe", ")", ":", "\n", "        ", "theme_regex", "=", "r\".*Ingredients:<\\|>(.*)<\\|>Directions.*\"", "\n", "theme_words_search", "=", "re", ".", "search", "(", "\n", "theme_regex", ",", "recipe", ".", "replace", "(", "\"\\n\"", ",", "\"<|>\"", ")", ")", "\n", "if", "theme_words_search", ":", "\n", "            ", "theme_words", "=", "theme_words_search", ".", "group", "(", "1", ")", "\n", "theme_words", "=", "list", "(", "\n", "filter", "(", "lambda", "w", ":", "w", "!=", "\"\"", ",", "\n", "map", "(", "lambda", "w", ":", "w", ".", "strip", "(", ")", ",", "theme_words", ".", "split", "(", "\"<|>\"", ")", ")", ")", ")", "\n", "", "else", ":", "\n", "            ", "theme_words", "=", "None", "\n", "", "return", "theme_words", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.agents.competition_agent.CompetitionAgent._contain_theme_words": [[36, 49], ["competition_agent.CompetitionAgent.debug", "competition_agent.CompetitionAgent._contain_words", "contained.append", "others.append"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.deepword.log.Logging.debug", "home.repos.pwc.inspect_result.yinxusen_deepword.agents.competition_agent.CompetitionAgent._contain_words", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.tree_memory.TreeMemory.append", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.tree_memory.TreeMemory.append"], ["", "def", "_contain_theme_words", "(", "self", ",", "actions", ")", ":", "\n", "        ", "if", "not", "self", ".", "_theme_words", "[", "self", ".", "game_id", "]", ":", "\n", "            ", "self", ".", "debug", "(", "\"no theme word found, use all actions\"", ")", "\n", "return", "actions", ",", "[", "]", "\n", "", "contained", "=", "[", "]", "\n", "others", "=", "[", "]", "\n", "for", "a", "in", "actions", ":", "\n", "            ", "if", "self", ".", "_contain_words", "(", "a", ",", "self", ".", "_theme_words", "[", "self", ".", "game_id", "]", ")", ":", "\n", "                ", "contained", ".", "append", "(", "a", ")", "\n", "", "else", ":", "\n", "                ", "others", ".", "append", "(", "a", ")", "\n", "\n", "", "", "return", "contained", ",", "others", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.agents.competition_agent.CompetitionAgent._filter_admissible_actions": [[50, 94], ["competition_agent.CompetitionAgent._contain_theme_words", "list", "list", "list", "list", "list", "list", "list", "list", "list", "list", "list", "filter", "filter", "filter", "filter", "list", "filter", "filter", "filter", "filter", "list.remove", "filter", "filter", "set", "filter", "a.startswith", "a.startswith", "c.startswith", "c.startswith", "c.startswith", "c.startswith", "c.startswith", "a.startswith", "all", "a.startswith", "c.startswith", "map"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.agents.competition_agent.CompetitionAgent._contain_theme_words", "home.repos.pwc.inspect_result.yinxusen_deepword.students.student_learner.CMD.set"], ["", "def", "_filter_admissible_actions", "(", "self", ",", "admissible_actions", ")", ":", "\n", "        ", "\"\"\"\n        Filter unnecessary actions.\n        TODO: current filtering logic has problem. e.g. when there is no\n          theme words, then all actions are moved in contained.\n          Most of them will be filtered out because of this, which is wrong.\n          Fortunately for cooking game it's OK for now.\n          Do not apply this action filter for other games.\n        :param admissible_actions: raw action given by the game.\n        :return:\n        \"\"\"", "\n", "contained", ",", "others", "=", "self", ".", "_contain_theme_words", "(", "admissible_actions", ")", "\n", "actions", "=", "[", "ACT", ".", "inventory", ",", "ACT", ".", "look", "]", "+", "contained", "\n", "actions", "=", "list", "(", "filter", "(", "lambda", "c", ":", "not", "c", ".", "startswith", "(", "\"examine\"", ")", ",", "actions", ")", ")", "\n", "actions", "=", "list", "(", "filter", "(", "lambda", "c", ":", "not", "c", ".", "startswith", "(", "\"close\"", ")", ",", "actions", ")", ")", "\n", "actions", "=", "list", "(", "filter", "(", "lambda", "c", ":", "not", "c", ".", "startswith", "(", "\"insert\"", ")", ",", "actions", ")", ")", "\n", "actions", "=", "list", "(", "filter", "(", "lambda", "c", ":", "not", "c", ".", "startswith", "(", "\"eat\"", ")", ",", "actions", ")", ")", "\n", "# don't drop useful ingredients if not in kitchen", "\n", "# while other items can be dropped anywhere", "\n", "if", "self", ".", "_curr_place", "!=", "\"kitchen\"", ":", "\n", "            ", "actions", "=", "list", "(", "filter", "(", "lambda", "c", ":", "not", "c", ".", "startswith", "(", "\"drop\"", ")", ",", "actions", ")", ")", "\n", "", "actions", "=", "list", "(", "filter", "(", "lambda", "c", ":", "not", "c", ".", "startswith", "(", "\"put\"", ")", ",", "actions", ")", ")", "\n", "other_valid_commands", "=", "{", "\n", "ACT", ".", "prepare_meal", ",", "ACT", ".", "eat_meal", ",", "ACT", ".", "examine_cookbook", "\n", "}", "\n", "actions", "+=", "list", "(", "filter", "(", "\n", "lambda", "a", ":", "a", "in", "other_valid_commands", ",", "admissible_actions", ")", ")", "\n", "actions", "+=", "list", "(", "filter", "(", "\n", "lambda", "a", ":", "a", ".", "startswith", "(", "\"go\"", ")", ",", "admissible_actions", ")", ")", "\n", "actions", "+=", "list", "(", "filter", "(", "\n", "lambda", "a", ":", "(", "a", ".", "startswith", "(", "\"drop\"", ")", "and", "\n", "all", "(", "map", "(", "lambda", "t", ":", "t", "not", "in", "a", ",", "\n", "self", ".", "_theme_words", "[", "self", ".", "game_id", "]", ")", ")", ")", ",", "\n", "others", ")", ")", "\n", "# meal should never be dropped", "\n", "try", ":", "\n", "            ", "actions", ".", "remove", "(", "\"drop meal\"", ")", "\n", "", "except", "ValueError", "as", "_", ":", "\n", "            ", "pass", "\n", "", "actions", "+=", "list", "(", "filter", "(", "\n", "lambda", "a", ":", "a", ".", "startswith", "(", "\"take\"", ")", "and", "\"knife\"", "in", "a", ",", "others", ")", ")", "\n", "actions", "+=", "list", "(", "filter", "(", "lambda", "a", ":", "a", ".", "startswith", "(", "\"open\"", ")", ",", "others", ")", ")", "\n", "actions", "=", "list", "(", "set", "(", "actions", ")", ")", "\n", "return", "actions", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.agents.competition_agent.CompetitionAgent._rule_based_policy": [[95, 127], ["competition_agent.CompetitionAgent.actor.action2idx.get", "deepword.agents.utils.ActionDesc", "competition_agent.CompetitionAgent._last_action.action.startswith"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.students.student_learner.CMD.get"], ["", "def", "_rule_based_policy", "(", "self", ",", "actions", ",", "instant_reward", ")", ":", "\n", "# TODO: use see cookbook again if gain one reward", "\n", "        ", "if", "instant_reward", ">", "0", ":", "\n", "            ", "self", ".", "_see_cookbook", "=", "False", "\n", "\n", "", "if", "(", "self", ".", "_last_action", "is", "not", "None", "\n", "and", "self", ".", "_last_action", ".", "action", "==", "ACT", ".", "prepare_meal", "\n", "and", "instant_reward", ">", "0", ")", ":", "\n", "            ", "action", "=", "ACT", ".", "eat_meal", "\n", "", "elif", "ACT", ".", "examine_cookbook", "in", "actions", "and", "not", "self", ".", "_see_cookbook", ":", "\n", "            ", "action", "=", "ACT", ".", "examine_cookbook", "\n", "self", ".", "_see_cookbook", "=", "True", "\n", "", "elif", "(", "self", ".", "_last_action", "is", "not", "None", "and", "\n", "self", ".", "_last_action", ".", "action", "==", "ACT", ".", "examine_cookbook", "and", "\n", "instant_reward", "<=", "0", ")", ":", "\n", "            ", "action", "=", "ACT", ".", "inventory", "\n", "", "elif", "(", "self", ".", "_last_action", "is", "not", "None", "and", "\n", "self", ".", "_last_action", ".", "action", ".", "startswith", "(", "\"take\"", ")", "and", "\n", "instant_reward", "<=", "0", ")", ":", "\n", "            ", "action", "=", "ACT", ".", "inventory", "\n", "", "else", ":", "\n", "            ", "action", "=", "None", "\n", "\n", "", "if", "action", "is", "not", "None", "and", "action", "in", "actions", ":", "\n", "            ", "action_idx", "=", "self", ".", "actor", ".", "action2idx", ".", "get", "(", "action", ")", "\n", "return", "ActionDesc", "(", "\n", "action_type", "=", "ACT_TYPE", ".", "rule", ",", "action_idx", "=", "action_idx", ",", "\n", "token_idx", "=", "self", ".", "actor", ".", "action_matrix", "[", "action_idx", "]", ",", "\n", "action_len", "=", "self", ".", "actor", ".", "action_len", "[", "action_idx", "]", ",", "\n", "action", "=", "action", ",", "q_actions", "=", "None", ")", "\n", "", "else", ":", "\n", "            ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.agents.competition_agent.CompetitionAgent._prepare_actions": [[128, 133], ["super()._prepare_actions", "competition_agent.CompetitionAgent._filter_admissible_actions"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.agents.competition_agent.CompetitionAgent._prepare_actions", "home.repos.pwc.inspect_result.yinxusen_deepword.agents.competition_agent.CompetitionAgent._filter_admissible_actions"], ["", "", "def", "_prepare_actions", "(", "self", ",", "admissible_actions", ":", "List", "[", "str", "]", ")", "->", "List", "[", "str", "]", ":", "\n", "        ", "actions", "=", "super", "(", "CompetitionAgent", ",", "self", ")", ".", "_prepare_actions", "(", "\n", "admissible_actions", ")", "\n", "actions", "=", "self", ".", "_filter_admissible_actions", "(", "actions", ")", "\n", "return", "actions", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.agents.competition_agent.CompetitionAgent._start_episode_impl": [[134, 139], ["super()._start_episode_impl"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.agents.competition_agent.CompetitionAgent._start_episode_impl"], ["", "def", "_start_episode_impl", "(", "self", ",", "obs", ",", "infos", ")", ":", "\n", "        ", "super", "(", "CompetitionAgent", ",", "self", ")", ".", "_start_episode_impl", "(", "obs", ",", "infos", ")", "\n", "if", "self", ".", "game_id", "not", "in", "self", ".", "_theme_words", ":", "\n", "            ", "self", ".", "_theme_words", "[", "self", ".", "game_id", "]", "=", "[", "]", "\n", "", "self", ".", "_see_cookbook", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.agents.competition_agent.CompetitionAgent._update_status": [[140, 152], ["super()._update_status", "competition_agent.CompetitionAgent._get_theme_words", "competition_agent.CompetitionAgent.debug"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.agents.competition_agent.CompetitionAgent._update_status", "home.repos.pwc.inspect_result.yinxusen_deepword.agents.competition_agent.CompetitionAgent._get_theme_words", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.log.Logging.debug"], ["", "def", "_update_status", "(", "self", ",", "obs", ",", "scores", ",", "dones", ",", "infos", ")", ":", "\n", "        ", "master", ",", "instant_reward", "=", "super", "(", "CompetitionAgent", ",", "self", ")", ".", "_update_status", "(", "\n", "obs", ",", "scores", ",", "dones", ",", "infos", ")", "\n", "\n", "if", "(", "not", "self", ".", "_theme_words", "[", "self", ".", "game_id", "]", "\n", "and", "self", ".", "_last_action", "is", "not", "None", "\n", "and", "self", ".", "_last_action", ".", "action", "==", "ACT", ".", "examine_cookbook", ")", ":", "\n", "            ", "self", ".", "_theme_words", "[", "self", ".", "game_id", "]", "=", "self", ".", "_get_theme_words", "(", "master", ")", "\n", "self", ".", "debug", "(", "\n", "\"get theme words: {}\"", ".", "format", "(", "self", ".", "_theme_words", "[", "self", ".", "game_id", "]", ")", ")", "\n", "\n", "", "return", "master", ",", "instant_reward", "\n", "", "", ""]], "home.repos.pwc.inspect_result.yinxusen_deepword.agents.utils.ActionMaster.__init__": [[43, 55], ["len", "len"], "methods", ["None"], ["\n", "", "def", "flatten", "(", "items", ")", ":", "\n", "    ", "\"\"\"\n    flatten a list of lists to a list\n    \"\"\"", "\n", "return", "list", "(", "chain", ".", "from_iterable", "(", "items", ")", ")", "\n", "\n", "\n", "", "def", "uniq", "(", "lst", ")", ":", "\n", "    ", "\"\"\"\n    order-preserving unique\n    \"\"\"", "\n", "seen", "=", "set", "(", ")", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.agents.utils.ActionMaster.__repr__": [[56, 58], ["None"], "methods", ["None"], ["seen_add", "=", "seen", ".", "add", "\n", "return", "[", "x", "for", "x", "in", "lst", "if", "not", "(", "x", "in", "seen", "or", "seen_add", "(", "x", ")", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.agents.utils.ActionMaster.ids": [[59, 62], ["None"], "methods", ["None"], ["\n", "", "def", "load_uniq_lines", "(", "fname", ":", "str", ")", "->", "List", "[", "str", "]", ":", "\n", "    "]], "home.repos.pwc.inspect_result.yinxusen_deepword.agents.utils.ActionMaster.action_ids": [[63, 66], ["None"], "methods", ["None"], ["\n", "with", "open", "(", "fname", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "lines", "=", "map", "(", "lambda", "l", ":", "l", ".", "strip", "(", ")", ",", "f", ".", "readlines", "(", ")", ")", "\n", "", "return", "uniq", "(", "lines", ")", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.agents.utils.ActionMaster.master_ids": [[67, 70], ["None"], "methods", ["None"], ["\n", "\n", "", "def", "load_vocab", "(", "vocab_file", ":", "str", ")", "->", "List", "[", "str", "]", ":", "\n", "    "]], "home.repos.pwc.inspect_result.yinxusen_deepword.agents.utils.ActionMaster.objective_ids": [[71, 74], ["None"], "methods", ["None"], ["\n", "return", "load_uniq_lines", "(", "vocab_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.agents.utils.ActionMaster.action": [[75, 78], ["None"], "methods", ["None"], ["\n", "", "def", "load_actions", "(", "action_file", ":", "str", ")", "->", "List", "[", "str", "]", ":", "\n", "    "]], "home.repos.pwc.inspect_result.yinxusen_deepword.agents.utils.ActionMaster.master": [[79, 82], ["None"], "methods", ["None"], ["\n", "return", "load_uniq_lines", "(", "action_file", ")", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.agents.utils.ActionMaster.lens": [[83, 86], ["None"], "methods", ["None"], ["", "def", "get_token2idx", "(", "tokens", ":", "List", "[", "str", "]", ")", "->", "Dict", "[", "str", ",", "int", "]", ":", "\n", "    ", "\"\"\"\n    From a list of tokens to a dict of token to position\n    \"\"\"", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.agents.utils.GenSummary.__repr__": [[107, 111], ["zip"], "methods", ["None"], []], "home.repos.pwc.inspect_result.yinxusen_deepword.agents.utils.ScheduledEPS.eps": [[173, 175], ["NotImplementedError"], "methods", ["None"], ["", "", "raise", "ValueError", "(", "\"{} not found in student learners\"", ".", "format", "(", "name", ")", ")", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.agents.utils.LinearDecayedEPS.__init__": [[178, 185], ["deepword.log.Logging.__init__"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.models.drrn_modeling.PseudoSeq2SeqDRRN.__init__"], ["\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.agents.utils.LinearDecayedEPS.eps": [[186, 191], ["max"], "methods", ["None"], ["\n", "from", "deepword", ".", "agents", "import", "base_agent", ",", "dsqn_agent", ",", "gen_agent", ",", "competition_agent", ",", "gen_drrn_agent", ",", "zork_agent", "\n", "\n", "for", "namespace", "in", "[", "base_agent", ",", "dsqn_agent", ",", "gen_agent", ",", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.agents.utils.ScannerDecayEPS.__init__": [[194, 208], ["deepword.log.Logging.__init__", "list", "list", "map", "map", "range", "max"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.models.drrn_modeling.PseudoSeq2SeqDRRN.__init__"], ["        ", "if", "hasattr", "(", "namespace", ",", "name", ")", ":", "\n", "            ", "return", "getattr", "(", "namespace", ",", "name", ")", "\n", "", "", "raise", "ValueError", "(", "\"{} not found in agents\"", ".", "format", "(", "name", ")", ")", "\n", "\n", "\n", "", "def", "core_name2clazz", "(", "name", ":", "str", ")", ":", "\n", "    ", "\"\"\"\n    Find the class given the core name in this package.\n\n    Args:\n        name: Agent name from :py:mod:`deepword.agents.cores`\n\n    Returns:\n        the class w.r.t. the core name\n    \"\"\"", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.agents.utils.ScannerDecayEPS.eps": [[209, 222], ["utils.ScannerDecayEPS.debug"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.deepword.log.Logging.debug"], ["\n", "from", "deepword", ".", "agents", "import", "cores", "\n", "\n", "if", "hasattr", "(", "cores", ",", "name", ")", ":", "\n", "        ", "return", "getattr", "(", "cores", ",", "name", ")", "\n", "", "raise", "ValueError", "(", "\"{} not found in agents\"", ".", "format", "(", "name", ")", ")", "\n", "\n", "\n", "", "def", "split_train_dev", "(", "\n", "game_files", ":", "List", "[", "str", "]", ",", "train_ratio", ":", "float", "=", "0.9", ",", "rnd_seed", ":", "int", "=", "42", "\n", ")", "->", "Tuple", "[", "List", "[", "str", "]", ",", "List", "[", "str", "]", "]", ":", "\n", "    "]], "home.repos.pwc.inspect_result.yinxusen_deepword.agents.utils.get_path_tags": [[224, 249], ["glob.glob", "list", "os.path.join", "map", "map", "int", "os.path.basename", "[].split", "os.path.splitext"], "function", ["None"], ["\n", "\n", "# have to sort first, otherwise after shuffling the result is different", "\n", "# on different platforms, e.g. Linux VS MacOS.", "\n", "game_files", "=", "sorted", "(", "game_files", ")", "\n", "random", ".", "Random", "(", "rnd_seed", ")", ".", "shuffle", "(", "game_files", ")", "\n", "n_files", "=", "len", "(", "game_files", ")", "\n", "if", "n_files", "==", "0", ":", "\n", "        ", "raise", "ValueError", "(", "\"no game files found!\"", ")", "\n", "\n", "", "n_train", "=", "int", "(", "math", ".", "ceil", "(", "n_files", "*", "train_ratio", ")", ")", "\n", "n_dev", "=", "n_files", "*", "(", "1", "-", "train_ratio", ")", "\n", "n_dev", "=", "int", "(", "math", ".", "floor", "(", "n_dev", ")", ")", "if", "n_dev", ">", "1", "else", "1", "\n", "train_games", "=", "game_files", "[", ":", "n_train", "]", "\n", "dev_games", "=", "game_files", "[", "-", "n_dev", ":", "]", "\n", "return", "train_games", ",", "dev_games", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.agents.utils.drrn_action_input": [[251, 287], ["dict", "len", "enumerate"], "function", ["None"], ["\n", "", "def", "load_game_files", "(", "game_path", ":", "str", ",", "f_games", ":", "Optional", "[", "str", "]", "=", "None", ")", "->", "List", "[", "str", "]", ":", "\n", "    ", "\"\"\"\n    Load a dir of games, or a single game.\n    if game_path represents a file, then return a list of the file;\n    if game_path is a dir, then return a list of files in the dir suffixed with\n      .ulx;\n    if f_games is set, then load files in the game_path with names listed in\n      f_games.\n\n    Args:\n        game_path: a dir, or a single file\n        f_games: a file of game names, without suffix, default suffix .ulx\n\n    Returns:\n        a list of game files\n    \"\"\"", "\n", "\n", "if", "path", ".", "isfile", "(", "game_path", ")", ":", "\n", "        ", "game_files", "=", "[", "game_path", "]", "\n", "", "elif", "path", ".", "isdir", "(", "game_path", ")", ":", "\n", "        ", "if", "f_games", "is", "not", "None", ":", "\n", "            ", "with", "open", "(", "f_games", ",", "\"r\"", ")", "as", "f", ":", "\n", "                ", "selected_games", "=", "map", "(", "lambda", "x", ":", "x", ".", "strip", "(", ")", ",", "f", ".", "readlines", "(", ")", ")", "\n", "", "game_files", "=", "list", "(", "map", "(", "\n", "lambda", "x", ":", "path", ".", "join", "(", "game_path", ",", "\"{}.ulx\"", ".", "format", "(", "x", ")", ")", ",", "\n", "selected_games", ")", ")", "\n", "", "else", ":", "\n", "            ", "game_files", "=", "glob", ".", "glob", "(", "path", ".", "join", "(", "game_path", ",", "\"*.ulx\"", ")", ")", "\n", "", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"game path {} doesn't exist\"", ".", "format", "(", "game_path", ")", ")", "\n", "", "return", "game_files", "\n", "\n", "\n", "", "def", "load_and_split", "(", "game_path", ":", "str", ",", "f_games", ":", "str", ")", "->", "Tuple", "[", "List", "[", "str", "]", ",", "List", "[", "str", "]", "]", ":", "\n", "    "]], "home.repos.pwc.inspect_result.yinxusen_deepword.agents.utils.batch_drrn_action_input": [[289, 305], ["zip", "numpy.concatenate", "numpy.concatenate", "utils.drrn_action_input", "zip"], "function", ["home.repos.pwc.inspect_result.yinxusen_deepword.agents.utils.drrn_action_input"], ["\n", "\n", "game_files", "=", "load_game_files", "(", "game_path", ",", "f_games", ")", "\n", "train_games", ",", "dev_games", "=", "split_train_dev", "(", "game_files", ")", "\n", "return", "train_games", ",", "dev_games", "\n", "\n", "\n", "", "dir_path", "=", "path", ".", "dirname", "(", "path", ".", "realpath", "(", "__file__", ")", ")", "\n", "project_path", "=", "path", ".", "join", "(", "dir_path", ",", "\"../..\"", ")", "\n", "fn_log", "=", "path", ".", "join", "(", "project_path", ",", "\"conf/logging.yaml\"", ")", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.agents.utils.id_real2batch": [[307, 364], ["list", "zip", "numpy.cumsum"], "function", ["None"], ["\n", "\n", "def", "setup_train_log", "(", "model_dir", ":", "str", ")", ":", "\n", "    ", "\"\"\"\n    Setup log for training by putting a `game_script.log` in `model_dir`.\n    \"\"\"", "\n", "assert", "path", ".", "isfile", "(", "fn_log", ")", "\n", "setup_logging", "(", "\n", "default_path", "=", "fn_log", ",", "\n", "local_log_filename", "=", "path", ".", "join", "(", "model_dir", ",", "'game_script.log'", ")", ")", "\n", "\n", "\n", "", "def", "setup_eval_log", "(", "log_filename", ":", "Optional", "[", "str", "]", ")", ":", "\n", "    ", "\"\"\"\n    Setup log for evaluation\n\n    Args:\n        log_filename: the path to log file\n    \"\"\"", "\n", "assert", "path", ".", "isfile", "(", "fn_log_eval", ")", "\n", "setup_logging", "(", "default_path", "=", "fn_log_eval", ",", "local_log_filename", "=", "log_filename", ")", "\n", "\n", "\n", "", "def", "bytes2idx", "(", "byte_mask", ":", "List", "[", "bytes", "]", ",", "size", ":", "int", ")", "->", "np", ".", "ndarray", ":", "\n", "    ", "\"\"\"\n    load a list of bytes to choose `1` for selected actions\n\n    Args:\n        byte_mask: a list of bytes\n        size: the size of total actions\n\n    Returns:\n        an np array of indices\n    \"\"\"", "\n", "bit_mask", "=", "bitarray", "(", "endian", "=", "'little'", ")", "\n", "bit_mask", ".", "frombytes", "(", "byte_mask", ")", "\n", "bit_mask", "=", "bit_mask", "[", ":", "size", "]", "\n", "bit_mask", "[", "-", "1", "]", "=", "False", "\n", "np_mask", "=", "np", ".", "asarray", "(", "bit_mask", ".", "tolist", "(", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "return", "np", ".", "where", "(", "np_mask", "==", "1", ")", "[", "0", "]", "\n", "\n", "\n", "", "def", "softmax", "(", "x", ":", "np", ".", "ndarray", ")", "->", "np", ".", "ndarray", ":", "\n", "    ", "\"\"\"\n    numerical stability softmax\n    \"\"\"", "\n", "e_x", "=", "np", ".", "exp", "(", "x", "-", "np", ".", "sum", "(", "x", ")", ")", "\n", "return", "e_x", "/", "np", ".", "sum", "(", "e_x", ")", "\n", "\n", "\n", "", "def", "report_status", "(", "lst_of_status", ":", "List", "[", "Tuple", "[", "str", ",", "Any", "]", "]", ")", "->", "str", ":", "\n", "    "]], "home.repos.pwc.inspect_result.yinxusen_deepword.agents.utils.bert_nlu_input": [[366, 423], ["numpy.all", "numpy.concatenate", "numpy.repeat", "numpy.zeros_like", "numpy.concatenate", "numpy.ones_like", "numpy.concatenate", "numpy.concatenate", "np.concatenate.astype", "numpy.asarray", "numpy.asarray", "numpy.zeros", "range"], "function", ["None"], ["\n", "return", "\"\\n\"", "+", "tabulate", "(", "lst_of_status", ",", "tablefmt", "=", "\"plain\"", ")", "+", "\"\\n\"", "\n", "", ""]], "home.repos.pwc.inspect_result.yinxusen_deepword.agents.utils.batch_bert_nlu_input": [[425, 453], ["zip", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "utils.bert_nlu_input", "zip", "utils.drrn_action_input", "zip"], "function", ["home.repos.pwc.inspect_result.yinxusen_deepword.agents.utils.bert_nlu_input", "home.repos.pwc.inspect_result.yinxusen_deepword.agents.utils.drrn_action_input"], []], "home.repos.pwc.inspect_result.yinxusen_deepword.agents.utils.get_best_1d_q": [[455, 473], ["int", "numpy.argmax"], "function", ["None"], []], "home.repos.pwc.inspect_result.yinxusen_deepword.agents.utils.get_best_batch_ids": [[475, 504], ["numpy.all", "numpy.split", "numpy.asarray", "numpy.greater", "numpy.cumsum", "numpy.insert", "numpy.argmax"], "function", ["None"], []], "home.repos.pwc.inspect_result.yinxusen_deepword.agents.utils.sample_batch_ids": [[506, 542], ["numpy.all", "len", "numpy.split", "range", "numpy.greater", "numpy.cumsum", "int", "action_idx_blocks_per_slice.append", "numpy.argmax", "list", "list", "len", "list", "list", "range", "range", "numpy.random.choice", "numpy.random.choice", "numpy.asarray", "len", "numpy.insert"], "function", ["home.repos.pwc.inspect_result.yinxusen_deepword.deepword.tree_memory.TreeMemory.append"], []], "home.repos.pwc.inspect_result.yinxusen_deepword.agents.utils.categorical_without_replacement": [[544, 563], ["numpy.log", "numpy.argmax", "numpy.argsort", "numpy.log", "numpy.random.uniform"], "function", ["None"], []], "home.repos.pwc.inspect_result.yinxusen_deepword.agents.utils.get_action_idx_pair": [[565, 598], ["numpy.concatenate", "numpy.copy", "numpy.min", "numpy.full", "numpy.zeros_like", "list", "range"], "function", ["None"], []], "home.repos.pwc.inspect_result.yinxusen_deepword.agents.utils.remove_zork_version_info": [[600, 609], ["filter", "text.split", "s.strip"], "function", ["None"], []], "home.repos.pwc.inspect_result.yinxusen_deepword.agents.utils.get_hash_state": [[611, 622], ["deepword.utils.get_hash"], "function", ["home.repos.pwc.inspect_result.yinxusen_deepword.deepword.utils.get_hash"], []], "home.repos.pwc.inspect_result.yinxusen_deepword.agents.utils.get_snn_keys": [[624, 698], ["list", "list", "list", "filter", "numpy.random.permutation", "zip", "enumerate", "hash_states2tjs.keys", "numpy.random.choice", "numpy.random.choice", "numpy.random.choice", "numpy.random.choice", "target_set.append", "same_set.append", "diff_set.append", "numpy.random.choice", "list", "list", "list", "list", "list", "len", "hash_states2tjs[].keys", "hash_states2tjs[].keys", "list", "len", "hash_states2tjs[].keys"], "function", ["home.repos.pwc.inspect_result.yinxusen_deepword.deepword.tree_memory.TreeMemory.append", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.tree_memory.TreeMemory.append", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.tree_memory.TreeMemory.append"], []], "home.repos.pwc.inspect_result.yinxusen_deepword.models.models.TFModel.__init__": [[10, 14], ["deepword.log.Logging.__init__"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.models.drrn_modeling.PseudoSeq2SeqDRRN.__init__"], ["    ", "def", "__init__", "(", "self", ",", "graph", ":", "tf", ".", "Graph", ",", "training", ":", "bool", ")", ":", "\n", "        ", "super", "(", "TFModel", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "graph", "=", "graph", "\n", "self", ".", "training", "=", "training", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.models.models.TFModel.safe_loading": [[15, 66], ["models.TFModel.warning", "termcolor.colored", "models.TFModel.graph.as_default", "tensorflow.train.get_or_create_global_step", "sess.run", "saver.restore", "models.TFModel.warning", "list", "models.TFModel.warning", "tensorflow.global_variables", "models.TFModel.warning", "models.TFModel.warning", "tensorflow.train.Saver", "tensorflow.train.Saver.restore", "models.TFModel.error", "map", "tensorflow.train.list_variables"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.deepword.log.Logging.warning", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.log.Logging.warning", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.log.Logging.warning", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.log.Logging.warning", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.log.Logging.warning", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.log.Logging.error"], ["", "def", "safe_loading", "(", "\n", "self", ",", "sess", ":", "tf", ".", "Session", ",", "saver", ":", "tf", ".", "train", ".", "Saver", ",", "\n", "restore_from", ":", "str", ")", "->", "int", ":", "\n", "        ", "\"\"\"\n        Load weights from restore_from to model.\n        If weights in loaded model are incompatible with current model,\n        try to load those weights that have the same name.\n\n        This method is useful when saved model lacks of training part, e.g.\n        Adam optimizer.\n\n        Args:\n            sess: A tensorflow session\n            saver: A tensorflow saver\n            restore_from: the path to restore the model\n\n        Returns:\n            training steps\n        \"\"\"", "\n", "self", ".", "warning", "(", "\n", "colored", "(", "\n", "\"Try to restore parameters from: {}\"", ".", "format", "(", "restore_from", ")", ",", "\n", "\"magenta\"", ",", "attrs", "=", "[", "\"bold\"", ",", "\"underline\"", "]", ")", ")", "\n", "with", "self", ".", "graph", ".", "as_default", "(", ")", ":", "\n", "            ", "try", ":", "\n", "                ", "saver", ".", "restore", "(", "sess", ",", "restore_from", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "                ", "if", "not", "self", ".", "training", ":", "\n", "                    ", "self", ".", "error", "(", "\"Evaluation model should not use safe_loading\"", ")", "\n", "raise", "e", "\n", "\n", "", "self", ".", "warning", "(", "\n", "\"Restoring from saver failed,\"", "\n", "\" try to restore from safe saver\\n{}\"", ".", "format", "(", "e", ")", ")", "\n", "all_saved_vars", "=", "list", "(", "\n", "map", "(", "lambda", "v", ":", "v", "[", "0", "]", ",", "\n", "tf", ".", "train", ".", "list_variables", "(", "restore_from", ")", ")", ")", "\n", "self", ".", "warning", "(", "\n", "\"Try to restore with safe saver with vars:\\n{}\"", ".", "format", "(", "\n", "\"\\n\"", ".", "join", "(", "all_saved_vars", ")", ")", ")", "\n", "all_vars", "=", "tf", ".", "global_variables", "(", ")", "\n", "self", ".", "warning", "(", "\"all vars:\\n{}\"", ".", "format", "(", "\n", "\"\\n\"", ".", "join", "(", "[", "v", ".", "op", ".", "name", "for", "v", "in", "all_vars", "]", ")", ")", ")", "\n", "var_list", "=", "[", "v", "for", "v", "in", "all_vars", "if", "v", ".", "op", ".", "name", "in", "all_saved_vars", "]", "\n", "self", ".", "warning", "(", "\"Matched vars:\\n{}\"", ".", "format", "(", "\n", "\"\\n\"", ".", "join", "(", "[", "v", ".", "name", "for", "v", "in", "var_list", "]", ")", ")", ")", "\n", "safe_saver", "=", "tf", ".", "train", ".", "Saver", "(", "var_list", "=", "var_list", ")", "\n", "safe_saver", ".", "restore", "(", "sess", ",", "restore_from", ")", "\n", "", "global_step", "=", "tf", ".", "train", ".", "get_or_create_global_step", "(", ")", "\n", "trained_steps", "=", "sess", ".", "run", "(", "global_step", ")", "\n", "", "return", "trained_steps", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.models.models.DQNModel.__init__": [[69, 98], ["models.TFModel.__init__"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.models.drrn_modeling.PseudoSeq2SeqDRRN.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "graph", ":", "tf", ".", "Graph", ",", "\n", "training", ":", "bool", ",", "\n", "q_actions", ":", "tf", ".", "Tensor", ",", "\n", "src_", ":", "tf", ".", "placeholder", ",", "\n", "src_len_", ":", "tf", ".", "placeholder", ",", "\n", "action_idx_", ":", "Optional", "[", "tf", ".", "placeholder", "]", ",", "\n", "train_op", ":", "Optional", "[", "tf", ".", "Operation", "]", ",", "\n", "loss", ":", "Optional", "[", "tf", ".", "Tensor", "]", ",", "\n", "expected_q_", ":", "Optional", "[", "tf", ".", "placeholder", "]", ",", "\n", "b_weight_", ":", "Optional", "[", "tf", ".", "placeholder", "]", ",", "\n", "train_summary_op", ":", "Optional", "[", "tf", ".", "Operation", "]", ",", "\n", "abs_loss", ":", "Optional", "[", "tf", ".", "Tensor", "]", ",", "\n", "src_seg_", ":", "Optional", "[", "tf", ".", "placeholder", "]", ",", "\n", "h_state", ":", "Optional", "[", "tf", ".", "Tensor", "]", ")", ":", "\n", "        ", "super", "(", "DQNModel", ",", "self", ")", ".", "__init__", "(", "graph", ",", "training", ")", "\n", "self", ".", "q_actions", "=", "q_actions", "\n", "self", ".", "src_", "=", "src_", "\n", "self", ".", "src_len_", "=", "src_len_", "\n", "self", ".", "action_idx_", "=", "action_idx_", "\n", "self", ".", "train_op", "=", "train_op", "\n", "self", ".", "loss", "=", "loss", "\n", "self", ".", "expected_q_", "=", "expected_q_", "\n", "self", ".", "b_weight_", "=", "b_weight_", "\n", "self", ".", "train_summary_op", "=", "train_summary_op", "\n", "self", ".", "abs_loss", "=", "abs_loss", "\n", "self", ".", "src_seg_", "=", "src_seg_", "\n", "self", ".", "h_state", "=", "h_state", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.models.models.GenDQNModel.__init__": [[101, 152], ["models.DQNModel.__init__"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.models.drrn_modeling.PseudoSeq2SeqDRRN.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "graph", ":", "tf", ".", "Graph", ",", "\n", "training", ":", "bool", ",", "\n", "q_actions", ":", "tf", ".", "Tensor", ",", "\n", "src_", ":", "tf", ".", "placeholder", ",", "\n", "src_len_", ":", "tf", ".", "placeholder", ",", "\n", "action_idx_", ":", "Optional", "[", "tf", ".", "placeholder", "]", ",", "\n", "train_op", ":", "Optional", "[", "tf", ".", "Operation", "]", ",", "\n", "loss", ":", "Optional", "[", "tf", ".", "Tensor", "]", ",", "\n", "expected_q_", ":", "Optional", "[", "tf", ".", "placeholder", "]", ",", "\n", "b_weight_", ":", "Optional", "[", "tf", ".", "placeholder", "]", ",", "\n", "train_summary_op", ":", "Optional", "[", "tf", ".", "Operation", "]", ",", "\n", "abs_loss", ":", "Optional", "[", "tf", ".", "Tensor", "]", ",", "\n", "src_seg_", ":", "Optional", "[", "tf", ".", "placeholder", "]", ",", "\n", "h_state", ":", "Optional", "[", "tf", ".", "Tensor", "]", ",", "\n", "decoded_idx_infer", ":", "tf", ".", "Tensor", ",", "\n", "action_idx_out_", ":", "tf", ".", "placeholder", ",", "\n", "action_len_", ":", "tf", ".", "placeholder", ",", "\n", "temperature_", ":", "tf", ".", "placeholder", ",", "\n", "p_gen", ":", "tf", ".", "Tensor", ",", "\n", "p_gen_infer", ":", "tf", ".", "Tensor", ",", "\n", "beam_size_", ":", "tf", ".", "placeholder", ",", "\n", "use_greedy_", ":", "tf", ".", "placeholder", ",", "\n", "col_eos_idx", ":", "tf", ".", "Tensor", ",", "\n", "decoded_logits_infer", ":", "tf", ".", "Tensor", ")", ":", "\n", "        ", "super", "(", "GenDQNModel", ",", "self", ")", ".", "__init__", "(", "\n", "graph", ",", "\n", "training", ",", "\n", "q_actions", ",", "\n", "src_", ",", "\n", "src_len_", ",", "\n", "action_idx_", ",", "\n", "train_op", ",", "\n", "loss", ",", "\n", "expected_q_", ",", "\n", "b_weight_", ",", "\n", "train_summary_op", ",", "\n", "abs_loss", ",", "\n", "src_seg_", ",", "\n", "h_state", ")", "\n", "self", ".", "decoded_idx_infer", "=", "decoded_idx_infer", "\n", "self", ".", "action_idx_out_", "=", "action_idx_out_", "\n", "self", ".", "action_len_", "=", "action_len_", "\n", "self", ".", "temperature_", "=", "temperature_", "\n", "self", ".", "p_gen", "=", "p_gen", "\n", "self", ".", "p_gen_infer", "=", "p_gen_infer", "\n", "self", ".", "beam_size_", "=", "beam_size_", "\n", "self", ".", "use_greedy_", "=", "use_greedy_", "\n", "self", ".", "col_eos_idx", "=", "col_eos_idx", "\n", "self", ".", "decoded_logits_infer", "=", "decoded_logits_infer", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.models.models.DRRNModel.__init__": [[155, 192], ["models.DQNModel.__init__"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.models.drrn_modeling.PseudoSeq2SeqDRRN.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "graph", ":", "tf", ".", "Graph", ",", "\n", "training", ":", "bool", ",", "\n", "q_actions", ":", "tf", ".", "Tensor", ",", "\n", "src_", ":", "tf", ".", "placeholder", ",", "\n", "src_len_", ":", "tf", ".", "placeholder", ",", "\n", "action_idx_", ":", "Optional", "[", "tf", ".", "placeholder", "]", ",", "\n", "train_op", ":", "Optional", "[", "tf", ".", "Operation", "]", ",", "\n", "loss", ":", "Optional", "[", "tf", ".", "Tensor", "]", ",", "\n", "expected_q_", ":", "Optional", "[", "tf", ".", "placeholder", "]", ",", "\n", "b_weight_", ":", "Optional", "[", "tf", ".", "placeholder", "]", ",", "\n", "train_summary_op", ":", "Optional", "[", "tf", ".", "Operation", "]", ",", "\n", "abs_loss", ":", "Optional", "[", "tf", ".", "Tensor", "]", ",", "\n", "src_seg_", ":", "Optional", "[", "tf", ".", "placeholder", "]", ",", "\n", "h_state", ":", "Optional", "[", "tf", ".", "Tensor", "]", ",", "\n", "actions_", ":", "tf", ".", "placeholder", ",", "\n", "actions_len_", ":", "tf", ".", "placeholder", ",", "\n", "actions_repeats_", ":", "tf", ".", "placeholder", ")", ":", "\n", "        ", "super", "(", "DRRNModel", ",", "self", ")", ".", "__init__", "(", "\n", "graph", ",", "\n", "training", ",", "\n", "q_actions", ",", "\n", "src_", ",", "\n", "src_len_", ",", "\n", "action_idx_", ",", "\n", "train_op", ",", "\n", "loss", ",", "\n", "expected_q_", ",", "\n", "b_weight_", ",", "\n", "train_summary_op", ",", "\n", "abs_loss", ",", "\n", "src_seg_", ",", "\n", "h_state", ")", "\n", "self", ".", "actions_", "=", "actions_", "\n", "self", ".", "actions_len_", "=", "actions_len_", "\n", "self", ".", "actions_repeats_", "=", "actions_repeats_", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.models.models.NLUModel.__init__": [[195, 236], ["models.DQNModel.__init__"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.models.drrn_modeling.PseudoSeq2SeqDRRN.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "graph", ":", "tf", ".", "Graph", ",", "\n", "training", ":", "bool", ",", "\n", "q_actions", ":", "tf", ".", "Tensor", ",", "\n", "src_", ":", "tf", ".", "placeholder", ",", "\n", "src_len_", ":", "tf", ".", "placeholder", ",", "\n", "action_idx_", ":", "Optional", "[", "tf", ".", "placeholder", "]", ",", "\n", "train_op", ":", "Optional", "[", "tf", ".", "Operation", "]", ",", "\n", "loss", ":", "Optional", "[", "tf", ".", "Tensor", "]", ",", "\n", "expected_q_", ":", "Optional", "[", "tf", ".", "placeholder", "]", ",", "\n", "b_weight_", ":", "Optional", "[", "tf", ".", "placeholder", "]", ",", "\n", "train_summary_op", ":", "Optional", "[", "tf", ".", "Operation", "]", ",", "\n", "classification_train_summary_op", ":", "Optional", "[", "tf", ".", "Operation", "]", ",", "\n", "abs_loss", ":", "Optional", "[", "tf", ".", "Tensor", "]", ",", "\n", "src_seg_", ":", "Optional", "[", "tf", ".", "placeholder", "]", ",", "\n", "h_state", ":", "Optional", "[", "tf", ".", "Tensor", "]", ",", "\n", "seg_tj_action_", ":", "tf", ".", "placeholder", ",", "\n", "swag_labels_", ":", "Optional", "[", "tf", ".", "placeholder", "]", ",", "\n", "classification_loss", ":", "Optional", "[", "tf", ".", "Tensor", "]", ",", "\n", "classification_train_op", ":", "Optional", "[", "tf", ".", "Operation", "]", ")", ":", "\n", "        ", "super", "(", "NLUModel", ",", "self", ")", ".", "__init__", "(", "\n", "graph", ",", "\n", "training", ",", "\n", "q_actions", ",", "\n", "src_", ",", "\n", "src_len_", ",", "\n", "action_idx_", ",", "\n", "train_op", ",", "\n", "loss", ",", "\n", "expected_q_", ",", "\n", "b_weight_", ",", "\n", "train_summary_op", ",", "\n", "abs_loss", ",", "\n", "src_seg_", ",", "\n", "h_state", ")", "\n", "self", ".", "seg_tj_action_", "=", "seg_tj_action_", "\n", "self", ".", "swag_labels_", "=", "swag_labels_", "\n", "self", ".", "classification_loss", "=", "classification_loss", "\n", "self", ".", "classification_train_op", "=", "classification_train_op", "\n", "self", ".", "classification_train_summary_op", "=", "classification_train_summary_op", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.models.models.DSQNModel.__init__": [[239, 303], ["models.DRRNModel.__init__"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.models.drrn_modeling.PseudoSeq2SeqDRRN.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "graph", ":", "tf", ".", "Graph", ",", "\n", "training", ":", "bool", ",", "\n", "q_actions", ":", "tf", ".", "Tensor", ",", "\n", "src_", ":", "tf", ".", "placeholder", ",", "\n", "src_len_", ":", "tf", ".", "placeholder", ",", "\n", "action_idx_", ":", "Optional", "[", "tf", ".", "placeholder", "]", ",", "\n", "train_op", ":", "Optional", "[", "tf", ".", "Operation", "]", ",", "\n", "loss", ":", "Optional", "[", "tf", ".", "Tensor", "]", ",", "\n", "expected_q_", ":", "Optional", "[", "tf", ".", "placeholder", "]", ",", "\n", "b_weight_", ":", "Optional", "[", "tf", ".", "placeholder", "]", ",", "\n", "train_summary_op", ":", "Optional", "[", "tf", ".", "Operation", "]", ",", "\n", "abs_loss", ":", "Optional", "[", "tf", ".", "Tensor", "]", ",", "\n", "src_seg_", ":", "Optional", "[", "tf", ".", "placeholder", "]", ",", "\n", "h_state", ":", "Optional", "[", "tf", ".", "Tensor", "]", ",", "\n", "actions_", ":", "tf", ".", "placeholder", ",", "\n", "actions_len_", ":", "tf", ".", "placeholder", ",", "\n", "actions_repeats_", ":", "tf", ".", "placeholder", ",", "\n", "snn_train_summary_op", ":", "Optional", "[", "tf", ".", "Operation", "]", ",", "\n", "weighted_train_summary_op", ":", "Optional", "[", "tf", ".", "Operation", "]", ",", "\n", "semantic_same", ":", "tf", ".", "Tensor", ",", "\n", "snn_src_", ":", "Optional", "[", "tf", ".", "placeholder", "]", ",", "\n", "snn_src_len_", ":", "Optional", "[", "tf", ".", "placeholder", "]", ",", "\n", "snn_src2_", ":", "Optional", "[", "tf", ".", "placeholder", "]", ",", "\n", "snn_src2_len_", ":", "Optional", "[", "tf", ".", "placeholder", "]", ",", "\n", "labels_", ":", "Optional", "[", "tf", ".", "placeholder", "]", ",", "\n", "snn_loss", ":", "Optional", "[", "tf", ".", "Tensor", "]", ",", "\n", "weighted_loss", ":", "Optional", "[", "tf", ".", "Tensor", "]", ",", "\n", "merged_train_op", ":", "Optional", "[", "tf", ".", "Operation", "]", ",", "\n", "snn_train_op", ":", "Optional", "[", "tf", ".", "Operation", "]", ",", "\n", "h_states_diff", ":", "Optional", "[", "tf", ".", "Tensor", "]", ")", ":", "\n", "        ", "super", "(", "DSQNModel", ",", "self", ")", ".", "__init__", "(", "\n", "graph", ",", "\n", "training", ",", "\n", "q_actions", ",", "\n", "src_", ",", "\n", "src_len_", ",", "\n", "action_idx_", ",", "\n", "train_op", ",", "\n", "loss", ",", "\n", "expected_q_", ",", "\n", "b_weight_", ",", "\n", "train_summary_op", ",", "\n", "abs_loss", ",", "\n", "src_seg_", ",", "\n", "h_state", ",", "\n", "actions_", ",", "\n", "actions_len_", ",", "\n", "actions_repeats_", ")", "\n", "\n", "self", ".", "snn_train_summary_op", "=", "snn_train_summary_op", "\n", "self", ".", "weighted_train_summary_op", "=", "weighted_train_summary_op", "\n", "self", ".", "semantic_same", "=", "semantic_same", "\n", "self", ".", "snn_src_", "=", "snn_src_", "\n", "self", ".", "snn_src_len_", "=", "snn_src_len_", "\n", "self", ".", "snn_src2_", "=", "snn_src2_", "\n", "self", ".", "snn_src2_len_", "=", "snn_src2_len_", "\n", "self", ".", "labels_", "=", "labels_", "\n", "self", ".", "snn_loss", "=", "snn_loss", "\n", "self", ".", "weighted_loss", "=", "weighted_loss", "\n", "self", ".", "merged_train_op", "=", "merged_train_op", "\n", "self", ".", "snn_train_op", "=", "snn_train_op", "\n", "self", ".", "h_states_diff", "=", "h_states_diff", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.models.models.DSQNZorkModel.__init__": [[306, 364], ["models.DQNModel.__init__"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.models.drrn_modeling.PseudoSeq2SeqDRRN.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "graph", ":", "tf", ".", "Graph", ",", "\n", "training", ":", "bool", ",", "\n", "q_actions", ":", "tf", ".", "Tensor", ",", "\n", "src_", ":", "tf", ".", "placeholder", ",", "\n", "src_len_", ":", "tf", ".", "placeholder", ",", "\n", "action_idx_", ":", "Optional", "[", "tf", ".", "placeholder", "]", ",", "\n", "train_op", ":", "Optional", "[", "tf", ".", "Operation", "]", ",", "\n", "loss", ":", "Optional", "[", "tf", ".", "Tensor", "]", ",", "\n", "expected_q_", ":", "Optional", "[", "tf", ".", "placeholder", "]", ",", "\n", "b_weight_", ":", "Optional", "[", "tf", ".", "placeholder", "]", ",", "\n", "train_summary_op", ":", "Optional", "[", "tf", ".", "Operation", "]", ",", "\n", "abs_loss", ":", "Optional", "[", "tf", ".", "Tensor", "]", ",", "\n", "src_seg_", ":", "Optional", "[", "tf", ".", "placeholder", "]", ",", "\n", "h_state", ":", "Optional", "[", "tf", ".", "Tensor", "]", ",", "\n", "snn_train_summary_op", ":", "Optional", "[", "tf", ".", "Operation", "]", ",", "\n", "weighted_train_summary_op", ":", "Optional", "[", "tf", ".", "Operation", "]", ",", "\n", "semantic_same", ":", "tf", ".", "Tensor", ",", "\n", "snn_src_", ":", "Optional", "[", "tf", ".", "placeholder", "]", ",", "\n", "snn_src_len_", ":", "Optional", "[", "tf", ".", "placeholder", "]", ",", "\n", "snn_src2_", ":", "Optional", "[", "tf", ".", "placeholder", "]", ",", "\n", "snn_src2_len_", ":", "Optional", "[", "tf", ".", "placeholder", "]", ",", "\n", "labels_", ":", "Optional", "[", "tf", ".", "placeholder", "]", ",", "\n", "snn_loss", ":", "Optional", "[", "tf", ".", "Tensor", "]", ",", "\n", "weighted_loss", ":", "Optional", "[", "tf", ".", "Tensor", "]", ",", "\n", "merged_train_op", ":", "Optional", "[", "tf", ".", "Operation", "]", ",", "\n", "snn_train_op", ":", "Optional", "[", "tf", ".", "Operation", "]", ",", "\n", "h_states_diff", ":", "Optional", "[", "tf", ".", "Tensor", "]", ")", ":", "\n", "        ", "super", "(", "DSQNZorkModel", ",", "self", ")", ".", "__init__", "(", "\n", "graph", ",", "\n", "training", ",", "\n", "q_actions", ",", "\n", "src_", ",", "\n", "src_len_", ",", "\n", "action_idx_", ",", "\n", "train_op", ",", "\n", "loss", ",", "\n", "expected_q_", ",", "\n", "b_weight_", ",", "\n", "train_summary_op", ",", "\n", "abs_loss", ",", "\n", "src_seg_", ",", "\n", "h_state", ")", "\n", "\n", "self", ".", "snn_train_summary_op", "=", "snn_train_summary_op", "\n", "self", ".", "weighted_train_summary_op", "=", "weighted_train_summary_op", "\n", "self", ".", "semantic_same", "=", "semantic_same", "\n", "self", ".", "snn_src_", "=", "snn_src_", "\n", "self", ".", "snn_src_len_", "=", "snn_src_len_", "\n", "self", ".", "snn_src2_", "=", "snn_src2_", "\n", "self", ".", "snn_src2_len_", "=", "snn_src2_len_", "\n", "self", ".", "labels_", "=", "labels_", "\n", "self", ".", "snn_loss", "=", "snn_loss", "\n", "self", ".", "weighted_loss", "=", "weighted_loss", "\n", "self", ".", "merged_train_op", "=", "merged_train_op", "\n", "self", ".", "snn_train_op", "=", "snn_train_op", "\n", "self", ".", "h_states_diff", "=", "h_states_diff", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.models.models.SNNModel.__init__": [[367, 386], ["models.TFModel.__init__"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.models.drrn_modeling.PseudoSeq2SeqDRRN.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "graph", ":", "tf", ".", "Graph", ",", "\n", "training", ":", "bool", ",", "\n", "target_src_", ":", "tf", ".", "placeholder", ",", "\n", "same_src_", ":", "tf", ".", "placeholder", ",", "\n", "diff_src_", ":", "tf", ".", "placeholder", ",", "\n", "semantic_same", ":", "tf", ".", "Operation", ",", "\n", "train_op", ":", "Optional", "[", "tf", ".", "Operation", "]", ",", "\n", "loss", ":", "Optional", "[", "tf", ".", "Tensor", "]", ",", "\n", "train_summary_op", ":", "Optional", "[", "tf", ".", "Operation", "]", ")", ":", "\n", "        ", "super", "(", "SNNModel", ",", "self", ")", ".", "__init__", "(", "graph", ",", "training", ")", "\n", "self", ".", "target_src_", "=", "target_src_", "\n", "self", ".", "same_src_", "=", "same_src_", "\n", "self", ".", "diff_src_", "=", "diff_src_", "\n", "self", ".", "semantic_same", "=", "semantic_same", "\n", "self", ".", "train_op", "=", "train_op", "\n", "self", ".", "loss", "=", "loss", "\n", "self", ".", "train_summary_op", "=", "train_summary_op", "\n", "", "", ""]], "home.repos.pwc.inspect_result.yinxusen_deepword.models.snn_modeling.BertSNN.__init__": [[13, 38], ["deepword.log.Logging.__init__", "tensorflow.train.get_or_create_global_step", "tensorflow.train.AdamOptimizer", "tensorflow.keras.layers.Dropout", "bert.BertConfig.from_json_file", "set", "snn_modeling.BertSNN.hp.bert_freeze_layers.split", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.models.drrn_modeling.PseudoSeq2SeqDRRN.__init__", "home.repos.pwc.inspect_result.yinxusen_deepword.students.student_learner.CMD.set"], ["def", "__init__", "(", "self", ",", "hp", ",", "is_infer", "=", "False", ")", ":", "\n", "        ", "super", "(", "BertSNN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "is_infer", "=", "is_infer", "\n", "self", ".", "hp", "=", "hp", "\n", "self", ".", "global_step", "=", "tf", ".", "train", ".", "get_or_create_global_step", "(", ")", "\n", "self", ".", "optimizer", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "self", ".", "hp", ".", "learning_rate", ")", "\n", "self", ".", "bert_init_ckpt_dir", "=", "conventions", ".", "bert_ckpt_dir", "\n", "self", ".", "bert_config_file", "=", "\"{}/bert_config.json\"", ".", "format", "(", "\n", "self", ".", "bert_init_ckpt_dir", ")", "\n", "self", ".", "bert_ckpt_file", "=", "\"{}/bert_model.ckpt\"", ".", "format", "(", "\n", "self", ".", "bert_init_ckpt_dir", ")", "\n", "self", ".", "dropout", "=", "tf", ".", "keras", ".", "layers", ".", "Dropout", "(", "rate", "=", "0.4", ")", "\n", "self", ".", "bert_config", "=", "b_model", ".", "BertConfig", ".", "from_json_file", "(", "\n", "self", ".", "bert_config_file", ")", "\n", "self", ".", "bert_config", ".", "num_hidden_layers", "=", "self", ".", "hp", ".", "bert_num_hidden_layers", "\n", "# bert language layer is index of one layer", "\n", "self", ".", "bert_language_layer", "=", "self", ".", "hp", ".", "bert_language_layer", "\n", "assert", "0", "<=", "self", ".", "bert_language_layer", "<", "self", ".", "hp", ".", "bert_num_hidden_layers", ",", "\"language layer doesn't match bert layers\"", "\n", "self", ".", "bert_freeze_layers", "=", "set", "(", "self", ".", "hp", ".", "bert_freeze_layers", ".", "split", "(", "\",\"", ")", ")", "\n", "\n", "self", ".", "inputs", "=", "{", "\n", "\"target_src\"", ":", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "[", "None", ",", "None", "]", ")", ",", "\n", "\"same_src\"", ":", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "[", "None", ",", "None", "]", ")", ",", "\n", "\"diff_src\"", ":", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "[", "None", ",", "None", "]", ")", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.models.snn_modeling.BertSNN.add_cls_token": [[40, 49], ["tensorflow.constant", "tensorflow.pad", "tensorflow.cast", "tensorflow.math.not_equal"], "methods", ["None"], ["", "def", "add_cls_token", "(", "self", ",", "src", ")", ":", "\n", "# padding the [CLS] in the beginning", "\n", "        ", "paddings", "=", "tf", ".", "constant", "(", "[", "[", "0", ",", "0", "]", ",", "[", "1", ",", "0", "]", "]", ")", "\n", "src_w_pad", "=", "tf", ".", "pad", "(", "\n", "src", ",", "paddings", "=", "paddings", ",", "mode", "=", "\"CONSTANT\"", ",", "\n", "constant_values", "=", "self", ".", "hp", ".", "cls_val_id", ")", "\n", "# Note that selected tokens are 1, padded are 0", "\n", "src_masks", "=", "tf", ".", "cast", "(", "tf", ".", "math", ".", "not_equal", "(", "src_w_pad", ",", "0", ")", ",", "tf", ".", "int32", ")", "\n", "return", "src_w_pad", ",", "src_masks", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.models.snn_modeling.BertSNN.get_h_state": [[50, 68], ["snn_modeling.BertSNN.add_cls_token", "tensorflow.variable_scope", "bert.BertModel", "bert.BertModel.get_all_encoder_layers", "tensorflow.variable_scope", "tensorflow.squeeze", "tensorflow.layers.dense", "tensorflow.truncated_normal_initializer"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.models.snn_modeling.BertSNN.add_cls_token", "home.repos.pwc.inspect_result.yinxusen_deepword.models.transformer.BertDecoderModel.get_all_encoder_layers"], ["", "def", "get_h_state", "(", "self", ",", "raw_src", ")", ":", "\n", "        ", "src", ",", "src_masks", "=", "self", ".", "add_cls_token", "(", "raw_src", ")", "\n", "with", "tf", ".", "variable_scope", "(", "\"bert-state-encoder\"", ",", "reuse", "=", "tf", ".", "AUTO_REUSE", ")", ":", "\n", "            ", "bert_model", "=", "b_model", ".", "BertModel", "(", "\n", "config", "=", "self", ".", "bert_config", ",", "is_training", "=", "(", "not", "self", ".", "is_infer", ")", ",", "\n", "input_ids", "=", "src", ",", "input_mask", "=", "src_masks", ")", "\n", "all_layers", "=", "bert_model", ".", "get_all_encoder_layers", "(", ")", "\n", "snn_feature_output", "=", "all_layers", "[", "self", ".", "bert_language_layer", "]", "\n", "with", "tf", ".", "variable_scope", "(", "\"language_pooler\"", ")", ":", "\n", "                ", "first_token_tensor", "=", "tf", ".", "squeeze", "(", "\n", "snn_feature_output", "[", ":", ",", "0", ":", "1", ",", ":", "]", ",", "axis", "=", "1", ")", "\n", "language_feature", "=", "tf", ".", "layers", ".", "dense", "(", "\n", "first_token_tensor", ",", "\n", "self", ".", "bert_config", ".", "hidden_size", ",", "\n", "activation", "=", "tf", ".", "tanh", ",", "\n", "kernel_initializer", "=", "tf", ".", "truncated_normal_initializer", "(", "\n", "stddev", "=", "self", ".", "bert_config", ".", "initializer_range", ")", ")", "\n", "", "", "return", "language_feature", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.models.snn_modeling.BertSNN.is_semantic_same": [[69, 87], ["snn_modeling.BertSNN.get_h_state", "snn_modeling.BertSNN.get_h_state", "snn_modeling.BertSNN.get_h_state", "tensorflow.concat", "snn_modeling.BertSNN.dropout", "tensorflow.squeeze", "tensorflow.train.init_from_checkpoint", "tensorflow.layers.dense", "tensorflow.abs", "tensorflow.abs"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.models.dsqn_modeling.TransformerDSQN.get_h_state", "home.repos.pwc.inspect_result.yinxusen_deepword.models.dsqn_modeling.TransformerDSQN.get_h_state", "home.repos.pwc.inspect_result.yinxusen_deepword.models.dsqn_modeling.TransformerDSQN.get_h_state"], ["", "def", "is_semantic_same", "(", "self", ")", ":", "\n", "        ", "target_state", "=", "self", ".", "get_h_state", "(", "self", ".", "inputs", "[", "\"target_src\"", "]", ")", "\n", "same_state", "=", "self", ".", "get_h_state", "(", "self", ".", "inputs", "[", "\"same_src\"", "]", ")", "\n", "diff_state", "=", "self", ".", "get_h_state", "(", "self", ".", "inputs", "[", "\"diff_src\"", "]", ")", "\n", "\n", "diff_two_states", "=", "tf", ".", "concat", "(", "\n", "[", "tf", ".", "abs", "(", "target_state", "-", "same_state", ")", ",", "\n", "tf", ".", "abs", "(", "target_state", "-", "diff_state", ")", "]", ",", "axis", "=", "0", ")", "\n", "diff_two_states", "=", "self", ".", "dropout", "(", "\n", "diff_two_states", ",", "training", "=", "(", "not", "self", ".", "is_infer", ")", ")", "\n", "semantic_same", "=", "tf", ".", "squeeze", "(", "tf", ".", "layers", ".", "dense", "(", "\n", "diff_two_states", ",", "activation", "=", "None", ",", "units", "=", "1", ",", "use_bias", "=", "True", ",", "\n", "name", "=", "\"snn_dense\"", ")", ")", "\n", "# initialize bert from checkpoint file", "\n", "tf", ".", "train", ".", "init_from_checkpoint", "(", "\n", "self", ".", "bert_ckpt_file", ",", "\n", "assignment_map", "=", "{", "\"bert/\"", ":", "\"bert-state-encoder/bert/\"", "}", ")", "\n", "return", "semantic_same", ",", "diff_two_states", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.models.snn_modeling.BertSNN.get_train_op": [[88, 117], ["tensorflow.concat", "tensorflow.nn.sigmoid_cross_entropy_with_logits", "tensorflow.reduce_mean", "tensorflow.trainable_variables", "tensorflow.trainable_variables", "list", "snn_modeling.BertSNN.debug", "snn_modeling.BertSNN.optimizer.minimize", "tensorflow.shape", "filter", "tensorflow.zeros", "tensorflow.ones", "all", "v.name.split"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.deepword.log.Logging.debug"], ["", "def", "get_train_op", "(", "self", ",", "semantic_same", ")", ":", "\n", "        ", "batch_size", "=", "tf", ".", "shape", "(", "self", ".", "inputs", "[", "\"target_src\"", "]", ")", "[", "0", "]", "\n", "labels", "=", "tf", ".", "concat", "(", "\n", "[", "tf", ".", "zeros", "(", "batch_size", ")", ",", "tf", ".", "ones", "(", "batch_size", ")", "]", ",", "axis", "=", "0", ")", "\n", "losses", "=", "tf", ".", "nn", ".", "sigmoid_cross_entropy_with_logits", "(", "\n", "labels", "=", "labels", ",", "logits", "=", "semantic_same", ")", "\n", "loss", "=", "tf", ".", "reduce_mean", "(", "losses", ")", "\n", "\n", "var_snn", "=", "tf", ".", "trainable_variables", "(", "scope", "=", "\"snn_dense\"", ")", "\n", "var_bert", "=", "tf", ".", "trainable_variables", "(", "scope", "=", "\"bert-state-encoder\"", ")", "\n", "allowed_var_bert", "=", "list", "(", "filter", "(", "\n", "lambda", "v", ":", "all", "(", "[", "layer_name", "not", "in", "v", ".", "name", ".", "split", "(", "\"/\"", ")", "\n", "for", "layer_name", "in", "self", ".", "bert_freeze_layers", "]", ")", ",", "\n", "var_bert", ")", ")", "\n", "\n", "# allow snn_dense to be frozen", "\n", "if", "\"snn_dense\"", "in", "self", ".", "bert_freeze_layers", ":", "\n", "            ", "trainable_vars", "=", "allowed_var_bert", "\n", "", "else", ":", "\n", "            ", "trainable_vars", "=", "var_snn", "+", "allowed_var_bert", "\n", "\n", "", "self", ".", "debug", "(", "\"trainable vars:\\n{}\\n\"", ".", "format", "(", "\n", "\"\\n\"", ".", "join", "(", "[", "v", ".", "name", "for", "v", "in", "trainable_vars", "]", ")", ")", ")", "\n", "\n", "train_op", "=", "self", ".", "optimizer", ".", "minimize", "(", "\n", "loss", ",", "global_step", "=", "self", ".", "global_step", ",", "\n", "var_list", "=", "trainable_vars", ")", "\n", "\n", "return", "loss", ",", "train_op", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.models.snn_modeling.BertSNN.get_train_model": [[118, 139], ["tensorflow.Graph", "deepword.models.models.SNNModel", "tensorflow.Graph.as_default", "tensorflow.device", "cls", "cls.is_semantic_same", "cls.get_train_op", "tensorflow.summary.scalar", "tensorflow.summary.merge"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.models.dsqn_modeling.CnnDSQN.is_semantic_same", "home.repos.pwc.inspect_result.yinxusen_deepword.models.drrn_modeling.PseudoSeq2SeqDRRN.get_train_op"], ["", "@", "classmethod", "\n", "def", "get_train_model", "(", "cls", ",", "hp", ",", "device_placement", ")", ":", "\n", "        ", "graph", "=", "tf", ".", "Graph", "(", ")", "\n", "with", "graph", ".", "as_default", "(", ")", ":", "\n", "            ", "with", "tf", ".", "device", "(", "device_placement", ")", ":", "\n", "                ", "model", "=", "cls", "(", "hp", ")", "\n", "inputs", "=", "model", ".", "inputs", "\n", "semantic_same", ",", "_", "=", "model", ".", "is_semantic_same", "(", ")", "\n", "loss", ",", "train_op", "=", "model", ".", "get_train_op", "(", "semantic_same", ")", "\n", "loss_summary", "=", "tf", ".", "summary", ".", "scalar", "(", "\"loss\"", ",", "loss", ")", "\n", "train_summary_op", "=", "tf", ".", "summary", ".", "merge", "(", "[", "loss_summary", "]", ")", "\n", "", "", "return", "SNNModel", "(", "\n", "graph", "=", "graph", ",", "\n", "training", "=", "True", ",", "\n", "target_src_", "=", "inputs", "[", "\"target_src\"", "]", ",", "\n", "same_src_", "=", "inputs", "[", "\"same_src\"", "]", ",", "\n", "diff_src_", "=", "inputs", "[", "\"diff_src\"", "]", ",", "\n", "semantic_same", "=", "semantic_same", ",", "\n", "loss", "=", "loss", ",", "\n", "train_op", "=", "train_op", ",", "\n", "train_summary_op", "=", "train_summary_op", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.models.snn_modeling.BertSNN.get_eval_model": [[140, 158], ["tensorflow.Graph", "deepword.models.models.SNNModel", "tensorflow.Graph.as_default", "tensorflow.device", "cls", "cls.is_semantic_same"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.models.dsqn_modeling.CnnDSQN.is_semantic_same"], ["", "@", "classmethod", "\n", "def", "get_eval_model", "(", "cls", ",", "hp", ",", "device_placement", ")", ":", "\n", "        ", "graph", "=", "tf", ".", "Graph", "(", ")", "\n", "with", "graph", ".", "as_default", "(", ")", ":", "\n", "            ", "with", "tf", ".", "device", "(", "device_placement", ")", ":", "\n", "                ", "model", "=", "cls", "(", "hp", ",", "is_infer", "=", "True", ")", "\n", "inputs", "=", "model", ".", "inputs", "\n", "semantic_same", ",", "_", "=", "model", ".", "is_semantic_same", "(", ")", "\n", "", "", "return", "SNNModel", "(", "\n", "graph", "=", "graph", ",", "\n", "training", "=", "False", ",", "\n", "target_src_", "=", "inputs", "[", "\"target_src\"", "]", ",", "\n", "same_src_", "=", "inputs", "[", "\"same_src\"", "]", ",", "\n", "diff_src_", "=", "inputs", "[", "\"diff_src\"", "]", ",", "\n", "semantic_same", "=", "semantic_same", ",", "\n", "loss", "=", "None", ",", "\n", "train_op", "=", "None", ",", "\n", "train_summary_op", "=", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.models.snn_modeling.BertSNN.get_train_student_model": [[159, 162], ["cls.get_train_model"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.models.drrn_modeling.CnnDRRN.get_train_model"], ["", "@", "classmethod", "\n", "def", "get_train_student_model", "(", "cls", ",", "hp", ",", "device_placement", ")", ":", "\n", "        ", "return", "cls", ".", "get_train_model", "(", "hp", ",", "device_placement", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.models.snn_modeling.BertSNN.get_eval_student_model": [[163, 166], ["cls.get_eval_model"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.models.drrn_modeling.CnnDRRN.get_eval_model"], ["", "@", "classmethod", "\n", "def", "get_eval_student_model", "(", "cls", ",", "hp", ",", "device_placement", ")", ":", "\n", "        ", "return", "cls", ".", "get_eval_model", "(", "hp", ",", "device_placement", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.yinxusen_deepword.models.nlu_modeling.BertNLU.__init__": [[11, 43], ["deepword.models.dqn_modeling.BaseDQN.__init__", "tensorflow.keras.layers.Dropout", "set", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "nlu_modeling.BertNLU.hp.bert_freeze_layers.split"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.models.drrn_modeling.PseudoSeq2SeqDRRN.__init__", "home.repos.pwc.inspect_result.yinxusen_deepword.students.student_learner.CMD.set"], ["    ", "def", "__init__", "(", "self", ",", "hp", ",", "is_infer", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        inputs:\n          src: source sentences to encode,\n           has paddings, [CLS], and [SEP] prepared\n          src_len: length of source sentences\n          action_idx: the action chose to run\n          expected_q: E(q) computed from the iterative equation of DQN\n          actions: all possible actions\n          actions_len: length of actions\n          actions_mask: a 0-1 vector of size |actions|, using 0 to eliminate\n                        some actions for a certain state.\n        :param hp:\n        :param is_infer:\n        \"\"\"", "\n", "super", "(", "BertNLU", ",", "self", ")", ".", "__init__", "(", "hp", ",", "is_infer", ")", "\n", "self", ".", "num_tokens", "=", "hp", ".", "num_tokens", "\n", "self", ".", "inputs", "=", "{", "\n", "\"src\"", ":", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "[", "None", ",", "None", "]", ")", ",", "\n", "\"src_len\"", ":", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "[", "None", "]", ")", ",", "\n", "\"seg_tj_action\"", ":", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "[", "None", ",", "None", "]", ")", ",", "\n", "\"expected_q\"", ":", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "None", "]", ")", ",", "\n", "\"action_idx\"", ":", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "[", "None", "]", ")", ",", "\n", "\"swag_labels\"", ":", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "[", "None", "]", ")", "\n", "}", "\n", "self", ".", "bert_init_ckpt_dir", "=", "conventions", ".", "bert_ckpt_dir", "\n", "self", ".", "bert_config_file", "=", "\"{}/bert_config.json\"", ".", "format", "(", "\n", "self", ".", "bert_init_ckpt_dir", ")", "\n", "self", ".", "bert_ckpt_file", "=", "\"{}/bert_model.ckpt\"", ".", "format", "(", "\n", "self", ".", "bert_init_ckpt_dir", ")", "\n", "self", ".", "dropout", "=", "tf", ".", "keras", ".", "layers", ".", "Dropout", "(", "rate", "=", "0.4", ")", "\n", "self", ".", "bert_freeze_layers", "=", "set", "(", "self", ".", "hp", ".", "bert_freeze_layers", ".", "split", "(", "\",\"", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.models.nlu_modeling.BertNLU.get_q_actions": [[44, 71], ["tensorflow.sequence_mask", "bert.BertConfig.from_json_file", "tensorflow.train.init_from_checkpoint", "tensorflow.variable_scope", "bert.BertModel", "bert.BertModel.get_pooled_output", "tensorflow.variable_scope", "nlu_modeling.BertNLU.dropout", "tensorflow.layers.dense"], "methods", ["None"], ["", "def", "get_q_actions", "(", "self", ")", ":", "\n", "        ", "src", "=", "self", ".", "inputs", "[", "\"src\"", "]", "\n", "src_len", "=", "self", ".", "inputs", "[", "\"src_len\"", "]", "\n", "seg_tj_action", "=", "self", ".", "inputs", "[", "\"seg_tj_action\"", "]", "\n", "src_masks", "=", "tf", ".", "sequence_mask", "(", "\n", "src_len", ",", "maxlen", "=", "self", ".", "num_tokens", ",", "dtype", "=", "tf", ".", "int32", ")", "\n", "\n", "bert_config", "=", "b_model", ".", "BertConfig", ".", "from_json_file", "(", "self", ".", "bert_config_file", ")", "\n", "bert_config", ".", "num_hidden_layers", "=", "self", ".", "hp", ".", "bert_num_hidden_layers", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "\"bert-state-encoder\"", ")", ":", "\n", "            ", "bert_model", "=", "b_model", ".", "BertModel", "(", "\n", "config", "=", "bert_config", ",", "is_training", "=", "(", "not", "self", ".", "is_infer", ")", ",", "\n", "input_ids", "=", "src", ",", "input_mask", "=", "src_masks", ",", "\n", "token_type_ids", "=", "seg_tj_action", ")", "\n", "pooled", "=", "bert_model", ".", "get_pooled_output", "(", ")", "\n", "\n", "", "with", "tf", ".", "variable_scope", "(", "\"q-encoder\"", ")", ":", "\n", "            ", "output", "=", "self", ".", "dropout", "(", "pooled", ",", "training", "=", "(", "not", "self", ".", "is_infer", ")", ")", "\n", "q_actions", "=", "tf", ".", "layers", ".", "dense", "(", "output", ",", "units", "=", "1", ",", "use_bias", "=", "True", ")", "[", ":", ",", "0", "]", "\n", "\n", "# initialize bert from checkpoint file", "\n", "", "tf", ".", "train", ".", "init_from_checkpoint", "(", "\n", "self", ".", "bert_ckpt_file", ",", "\n", "assignment_map", "=", "{", "\"bert/\"", ":", "\"bert-state-encoder/bert/\"", "}", ")", "\n", "\n", "return", "q_actions", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.models.nlu_modeling.BertNLU.get_classification_train_op": [[72, 88], ["tensorflow.reshape", "tensorflow.nn.sparse_softmax_cross_entropy_with_logits", "tensorflow.reduce_mean", "nlu_modeling.BertNLU.optimizer.minimize", "tensorflow.shape"], "methods", ["None"], ["", "def", "get_classification_train_op", "(", "self", ",", "q_actions", ")", ":", "\n", "        ", "\"\"\"\n        q_actions: [batch_size, 1]\n        in this case, when we want to compute classification error, we need\n        the batch_size = src batch size * num classes\n        which means that number of classes for each src should be equal\n        :param q_actions:\n        :return:\n        \"\"\"", "\n", "swag_batch_size", "=", "tf", ".", "shape", "(", "self", ".", "inputs", "[", "\"swag_labels\"", "]", ")", "[", "0", "]", "\n", "q_actions", "=", "tf", ".", "reshape", "(", "q_actions", ",", "[", "swag_batch_size", ",", "-", "1", "]", ")", "\n", "losses", "=", "tf", ".", "nn", ".", "sparse_softmax_cross_entropy_with_logits", "(", "\n", "logits", "=", "q_actions", ",", "labels", "=", "self", ".", "inputs", "[", "\"swag_labels\"", "]", ")", "\n", "loss", "=", "tf", ".", "reduce_mean", "(", "losses", ")", "\n", "train_op", "=", "self", ".", "optimizer", ".", "minimize", "(", "loss", ",", "global_step", "=", "self", ".", "global_step", ")", "\n", "return", "loss", ",", "train_op", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.models.nlu_modeling.BertNLU.get_train_op": [[89, 109], ["tensorflow.squared_difference", "tensorflow.abs", "tensorflow.reduce_mean", "tensorflow.trainable_variables", "tensorflow.trainable_variables", "list", "nlu_modeling.BertNLU.debug", "nlu_modeling.BertNLU.optimizer.minimize", "filter", "all", "v.name.split"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.deepword.log.Logging.debug"], ["", "def", "get_train_op", "(", "self", ",", "q_actions", ")", ":", "\n", "        ", "losses", "=", "tf", ".", "squared_difference", "(", "self", ".", "inputs", "[", "\"expected_q\"", "]", ",", "q_actions", ")", "\n", "abs_loss", "=", "tf", ".", "abs", "(", "self", ".", "inputs", "[", "\"expected_q\"", "]", "-", "q_actions", ")", "\n", "loss", "=", "tf", ".", "reduce_mean", "(", "losses", ")", "\n", "\n", "var_q_encoder", "=", "tf", ".", "trainable_variables", "(", "scope", "=", "\"q-encoder\"", ")", "\n", "var_bert", "=", "tf", ".", "trainable_variables", "(", "scope", "=", "\"bert-state-encoder\"", ")", "\n", "allowed_var_bert", "=", "list", "(", "filter", "(", "\n", "lambda", "v", ":", "all", "(", "[", "layer_name", "not", "in", "v", ".", "name", ".", "split", "(", "\"/\"", ")", "\n", "for", "layer_name", "in", "self", ".", "bert_freeze_layers", "]", ")", ",", "\n", "var_bert", ")", ")", "\n", "trainable_vars", "=", "var_q_encoder", "+", "allowed_var_bert", "\n", "\n", "self", ".", "debug", "(", "\"trainable vars: {}\"", ".", "format", "(", "trainable_vars", ")", ")", "\n", "\n", "train_op", "=", "self", ".", "optimizer", ".", "minimize", "(", "\n", "loss", ",", "global_step", "=", "self", ".", "global_step", ",", "\n", "var_list", "=", "trainable_vars", ")", "\n", "\n", "return", "loss", ",", "train_op", ",", "abs_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.models.nlu_modeling.BertNLU.get_train_student_model": [[110, 113], ["nlu_modeling.create_train_bert_nlu_model"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.models.nlu_modeling.create_train_bert_nlu_model"], ["", "@", "classmethod", "\n", "def", "get_train_student_model", "(", "cls", ",", "hp", ",", "device_placement", ")", ":", "\n", "        ", "return", "create_train_bert_nlu_model", "(", "cls", ",", "hp", ",", "device_placement", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.models.nlu_modeling.BertNLU.get_eval_student_model": [[114, 117], ["nlu_modeling.create_eval_bert_nlu_model"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.models.nlu_modeling.create_eval_bert_nlu_model"], ["", "@", "classmethod", "\n", "def", "get_eval_student_model", "(", "cls", ",", "hp", ",", "device_placement", ")", ":", "\n", "        ", "return", "create_eval_bert_nlu_model", "(", "cls", ",", "hp", ",", "device_placement", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.models.nlu_modeling.BertNLU.get_train_model": [[118, 121], ["cls.get_train_student_model"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.models.drrn_modeling.CnnDRRN.get_train_student_model"], ["", "@", "classmethod", "\n", "def", "get_train_model", "(", "cls", ",", "hp", ",", "device_placement", ")", ":", "\n", "        ", "return", "cls", ".", "get_train_student_model", "(", "hp", ",", "device_placement", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.models.nlu_modeling.BertNLU.get_eval_model": [[122, 125], ["cls.get_eval_student_model"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.models.drrn_modeling.CnnDRRN.get_eval_student_model"], ["", "@", "classmethod", "\n", "def", "get_eval_model", "(", "cls", ",", "hp", ",", "device_placement", ")", ":", "\n", "        ", "return", "cls", ".", "get_eval_student_model", "(", "hp", ",", "device_placement", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.models.nlu_modeling.AlbertNLU.__init__": [[128, 149], ["nlu_modeling.BertNLU.__init__"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.models.drrn_modeling.PseudoSeq2SeqDRRN.__init__"], ["    ", "def", "__init__", "(", "self", ",", "hp", ",", "is_infer", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        inputs:\n          src: source sentences to encode,\n           has paddings, [CLS], and [SEP] prepared\n          src_len: length of source sentences\n          action_idx: the action chose to run\n          expected_q: E(q) computed from the iterative equation of DQN\n          actions: all possible actions\n          actions_len: length of actions\n          actions_mask: a 0-1 vector of size |actions|, using 0 to eliminate\n                        some actions for a certain state.\n        :param hp:\n        :param is_infer:\n        \"\"\"", "\n", "super", "(", "AlbertNLU", ",", "self", ")", ".", "__init__", "(", "hp", ",", "is_infer", ")", "\n", "self", ".", "bert_init_ckpt_dir", "=", "conventions", ".", "albert_ckpt_dir", "\n", "self", ".", "bert_config_file", "=", "\"{}/albert_config.json\"", ".", "format", "(", "\n", "self", ".", "bert_init_ckpt_dir", ")", "\n", "self", ".", "bert_ckpt_file", "=", "\"{}/model.ckpt-best\"", ".", "format", "(", "\n", "self", ".", "bert_init_ckpt_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.models.nlu_modeling.AlbertNLU.get_q_actions": [[150, 176], ["tensorflow.sequence_mask", "albert.AlbertConfig.from_json_file", "tensorflow.train.init_from_checkpoint", "tensorflow.variable_scope", "albert.AlbertModel", "albert.AlbertModel.get_pooled_output", "nlu_modeling.AlbertNLU.dropout", "tensorflow.layers.dense"], "methods", ["None"], ["", "def", "get_q_actions", "(", "self", ")", ":", "\n", "        ", "src", "=", "self", ".", "inputs", "[", "\"src\"", "]", "\n", "src_len", "=", "self", ".", "inputs", "[", "\"src_len\"", "]", "\n", "seg_tj_action", "=", "self", ".", "inputs", "[", "\"seg_tj_action\"", "]", "\n", "src_masks", "=", "tf", ".", "sequence_mask", "(", "\n", "src_len", ",", "maxlen", "=", "self", ".", "num_tokens", ",", "dtype", "=", "tf", ".", "int32", ")", "\n", "\n", "bert_config", "=", "ab_model", ".", "AlbertConfig", ".", "from_json_file", "(", "\n", "self", ".", "bert_config_file", ")", "\n", "bert_config", ".", "num_hidden_layers", "=", "self", ".", "hp", ".", "bert_num_hidden_layers", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "\"bert-state-encoder\"", ")", ":", "\n", "            ", "bert_model", "=", "ab_model", ".", "AlbertModel", "(", "\n", "config", "=", "bert_config", ",", "is_training", "=", "(", "not", "self", ".", "is_infer", ")", ",", "\n", "input_ids", "=", "src", ",", "input_mask", "=", "src_masks", ",", "\n", "token_type_ids", "=", "seg_tj_action", ")", "\n", "pooled", "=", "bert_model", ".", "get_pooled_output", "(", ")", "\n", "output", "=", "self", ".", "dropout", "(", "pooled", ",", "training", "=", "(", "not", "self", ".", "is_infer", ")", ")", "\n", "q_actions", "=", "tf", ".", "layers", ".", "dense", "(", "output", ",", "units", "=", "1", ",", "use_bias", "=", "True", ")", "[", ":", ",", "0", "]", "\n", "\n", "# initialize bert from checkpoint file", "\n", "", "tf", ".", "train", ".", "init_from_checkpoint", "(", "\n", "self", ".", "bert_ckpt_file", ",", "\n", "assignment_map", "=", "{", "\"bert/\"", ":", "\"bert-state-encoder/bert/\"", "}", ")", "\n", "\n", "return", "q_actions", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.models.nlu_modeling.create_train_bert_nlu_model": [[178, 214], ["tensorflow.Graph", "deepword.models.models.NLUModel", "tf.Graph.as_default", "tensorflow.device", "model_creator", "model_creator.get_q_actions", "model_creator.get_train_op", "model_creator.get_classification_train_op", "tensorflow.summary.scalar", "tensorflow.summary.scalar", "tensorflow.summary.merge", "tensorflow.summary.merge"], "function", ["home.repos.pwc.inspect_result.yinxusen_deepword.models.drrn_modeling.PseudoSeq2SeqDRRN.get_q_actions", "home.repos.pwc.inspect_result.yinxusen_deepword.models.drrn_modeling.PseudoSeq2SeqDRRN.get_train_op", "home.repos.pwc.inspect_result.yinxusen_deepword.models.nlu_modeling.BertNLU.get_classification_train_op"], ["", "", "def", "create_train_bert_nlu_model", "(", "model_creator", ",", "hp", ",", "device_placement", ")", ":", "\n", "    ", "graph", "=", "tf", ".", "Graph", "(", ")", "\n", "with", "graph", ".", "as_default", "(", ")", ":", "\n", "        ", "with", "tf", ".", "device", "(", "device_placement", ")", ":", "\n", "            ", "model", "=", "model_creator", "(", "hp", ")", "\n", "inputs", "=", "model", ".", "inputs", "\n", "q_actions", "=", "model", ".", "get_q_actions", "(", ")", "\n", "loss", ",", "train_op", ",", "abs_loss", "=", "model", ".", "get_train_op", "(", "q_actions", ")", "\n", "classification_loss", ",", "classification_train_op", "=", "model", ".", "get_classification_train_op", "(", "q_actions", ")", "\n", "loss_summary", "=", "tf", ".", "summary", ".", "scalar", "(", "\"loss\"", ",", "loss", ")", "\n", "classification_loss_summary", "=", "tf", ".", "summary", ".", "scalar", "(", "\n", "\"classification_loss\"", ",", "classification_loss", ")", "\n", "train_summary_op", "=", "tf", ".", "summary", ".", "merge", "(", "[", "loss_summary", "]", ")", "\n", "classification_train_summary_op", "=", "tf", ".", "summary", ".", "merge", "(", "\n", "[", "classification_loss_summary", "]", ")", "\n", "", "", "return", "NLUModel", "(", "\n", "graph", "=", "graph", ",", "\n", "training", "=", "True", ",", "\n", "q_actions", "=", "q_actions", ",", "\n", "src_seg_", "=", "None", ",", "\n", "src_", "=", "inputs", "[", "\"src\"", "]", ",", "\n", "src_len_", "=", "inputs", "[", "\"src_len\"", "]", ",", "\n", "swag_labels_", "=", "inputs", "[", "\"swag_labels\"", "]", ",", "\n", "loss", "=", "loss", ",", "\n", "train_op", "=", "train_op", ",", "\n", "classification_loss", "=", "classification_loss", ",", "\n", "classification_train_op", "=", "classification_train_op", ",", "\n", "train_summary_op", "=", "train_summary_op", ",", "\n", "classification_train_summary_op", "=", "classification_train_summary_op", ",", "\n", "expected_q_", "=", "inputs", "[", "\"expected_q\"", "]", ",", "\n", "action_idx_", "=", "inputs", "[", "\"action_idx\"", "]", ",", "\n", "abs_loss", "=", "abs_loss", ",", "\n", "seg_tj_action_", "=", "inputs", "[", "\"seg_tj_action\"", "]", ",", "\n", "h_state", "=", "None", ",", "\n", "b_weight_", "=", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.models.nlu_modeling.create_eval_bert_nlu_model": [[216, 243], ["tensorflow.Graph", "deepword.models.models.NLUModel", "tf.Graph.as_default", "tensorflow.device", "model_creator", "model_creator.get_q_actions"], "function", ["home.repos.pwc.inspect_result.yinxusen_deepword.models.drrn_modeling.PseudoSeq2SeqDRRN.get_q_actions"], ["", "def", "create_eval_bert_nlu_model", "(", "model_creator", ",", "hp", ",", "device_placement", ")", ":", "\n", "    ", "graph", "=", "tf", ".", "Graph", "(", ")", "\n", "with", "graph", ".", "as_default", "(", ")", ":", "\n", "        ", "with", "tf", ".", "device", "(", "device_placement", ")", ":", "\n", "            ", "model", "=", "model_creator", "(", "hp", ",", "is_infer", "=", "True", ")", "\n", "inputs", "=", "model", ".", "inputs", "\n", "q_actions", "=", "model", ".", "get_q_actions", "(", ")", "\n", "", "", "return", "NLUModel", "(", "\n", "graph", "=", "graph", ",", "\n", "training", "=", "False", ",", "\n", "q_actions", "=", "q_actions", ",", "\n", "src_seg_", "=", "None", ",", "\n", "src_", "=", "inputs", "[", "\"src\"", "]", ",", "\n", "src_len_", "=", "inputs", "[", "\"src_len\"", "]", ",", "\n", "swag_labels_", "=", "None", ",", "\n", "loss", "=", "None", ",", "\n", "train_op", "=", "None", ",", "\n", "classification_loss", "=", "None", ",", "\n", "classification_train_op", "=", "None", ",", "\n", "train_summary_op", "=", "None", ",", "\n", "classification_train_summary_op", "=", "None", ",", "\n", "expected_q_", "=", "inputs", "[", "\"expected_q\"", "]", ",", "\n", "action_idx_", "=", "inputs", "[", "\"action_idx\"", "]", ",", "\n", "abs_loss", "=", "None", ",", "\n", "seg_tj_action_", "=", "inputs", "[", "\"seg_tj_action\"", "]", ",", "\n", "h_state", "=", "None", ",", "\n", "b_weight_", "=", "None", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.yinxusen_deepword.models.dsqn_modeling.CnnDSQN.__init__": [[14, 50], ["deepword.models.dqn_modeling.BaseDQN.__init__", "tensorflow.constant", "tensorflow.get_variable", "tensorflow.layers.Dense", "tensorflow.layers.Dense", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.truncated_normal_initializer", "tensorflow.truncated_normal_initializer"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.models.drrn_modeling.PseudoSeq2SeqDRRN.__init__"], ["def", "__init__", "(", "self", ",", "hp", ",", "src_embeddings", "=", "None", ",", "is_infer", "=", "False", ")", ":", "\n", "        ", "super", "(", "CnnDSQN", ",", "self", ")", ".", "__init__", "(", "hp", ",", "src_embeddings", ",", "is_infer", ")", "\n", "self", ".", "filter_sizes", "=", "[", "3", ",", "4", ",", "5", "]", "\n", "self", ".", "num_filters", "=", "hp", ".", "num_conv_filters", "\n", "self", ".", "num_tokens", "=", "hp", ".", "num_tokens", "\n", "self", ".", "l2_loss", "=", "tf", ".", "constant", "(", "0.0", ")", "\n", "self", ".", "l2_reg_lambda", "=", "0.5", "\n", "\n", "self", ".", "pos_embeddings", "=", "tf", ".", "get_variable", "(", "\n", "name", "=", "\"pos_embeddings\"", ",", "dtype", "=", "tf", ".", "float32", ",", "\n", "shape", "=", "[", "self", ".", "num_tokens", ",", "self", ".", "hp", ".", "embedding_size", "]", ")", "\n", "\n", "self", ".", "inputs", "=", "{", "\n", "\"src\"", ":", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "[", "None", ",", "None", "]", ")", ",", "\n", "\"src_seg\"", ":", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "[", "None", ",", "None", "]", ")", ",", "\n", "\"src_len\"", ":", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "[", "None", "]", ")", ",", "\n", "\"action_idx\"", ":", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "[", "None", "]", ")", ",", "\n", "\"b_weight\"", ":", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "None", "]", ")", ",", "\n", "\"expected_q\"", ":", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "None", "]", ")", ",", "\n", "\"actions\"", ":", "tf", ".", "placeholder", "(", "\n", "tf", ".", "int32", ",", "[", "None", ",", "self", ".", "hp", ".", "n_tokens_per_action", "]", ")", ",", "\n", "\"actions_repeats\"", ":", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "[", "None", "]", ")", ",", "\n", "\"actions_len\"", ":", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "None", "]", ")", ",", "\n", "\"snn_src\"", ":", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "[", "None", ",", "None", "]", ")", ",", "\n", "\"snn_src_len\"", ":", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "[", "None", "]", ")", ",", "\n", "\"snn_src2\"", ":", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "[", "None", ",", "None", "]", ")", ",", "\n", "\"snn_src2_len\"", ":", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "[", "None", "]", ")", ",", "\n", "\"labels\"", ":", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "None", "]", ")", "\n", "}", "\n", "\n", "self", ".", "wt", "=", "tf", ".", "layers", ".", "Dense", "(", "\n", "units", "=", "self", ".", "hp", ".", "hidden_state_size", ",", "activation", "=", "tf", ".", "tanh", ",", "\n", "kernel_initializer", "=", "tf", ".", "truncated_normal_initializer", "(", "stddev", "=", "0.02", ")", ")", "\n", "self", ".", "wt_var", "=", "tf", ".", "layers", ".", "Dense", "(", "\n", "units", "=", "self", ".", "hp", ".", "hidden_state_size", ",", "activation", "=", "tf", ".", "tanh", ",", "\n", "kernel_initializer", "=", "tf", ".", "truncated_normal_initializer", "(", "stddev", "=", "0.02", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.models.dsqn_modeling.CnnDSQN.get_q_actions": [[51, 69], ["dsqn_modeling.CnnDSQN.get_h_state", "dsqn_modeling.CnnDSQN.wt", "dsqn_modeling.CnnDSQN.wt_var", "tensorflow.repeat", "tensorflow.reduce_sum", "tensorflow.variable_scope", "tensorflow.multiply", "deepword.encoder_lstm", "deepword.encoder_lstm"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.models.dsqn_modeling.TransformerDSQN.get_h_state", "home.repos.pwc.inspect_result.yinxusen_deepword.models.utils.encoder_lstm", "home.repos.pwc.inspect_result.yinxusen_deepword.models.utils.encoder_lstm"], ["", "def", "get_q_actions", "(", "self", ")", ":", "\n", "        ", "h_state", "=", "self", ".", "get_h_state", "(", "self", ".", "inputs", "[", "\"src\"", "]", ",", "self", ".", "inputs", "[", "\"src_len\"", "]", ")", "\n", "new_h", "=", "self", ".", "wt", "(", "h_state", ")", "\n", "new_h_var", "=", "self", ".", "wt_var", "(", "h_state", ")", "\n", "h_state_expanded", "=", "tf", ".", "repeat", "(", "\n", "new_h", "+", "new_h_var", ",", "self", ".", "inputs", "[", "\"actions_repeats\"", "]", ",", "axis", "=", "0", ")", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "\"drrn-action-encoder\"", ",", "reuse", "=", "False", ")", ":", "\n", "            ", "h_actions", "=", "dqn", ".", "encoder_lstm", "(", "\n", "self", ".", "inputs", "[", "\"actions\"", "]", ",", "\n", "self", ".", "inputs", "[", "\"actions_len\"", "]", ",", "\n", "self", ".", "src_embeddings", ",", "\n", "num_units", "=", "self", ".", "hp", ".", "hidden_state_size", ",", "\n", "num_layers", "=", "self", ".", "hp", ".", "lstm_num_layers", ")", "[", "-", "1", "]", ".", "h", "\n", "\n", "", "q_actions", "=", "tf", ".", "reduce_sum", "(", "\n", "tf", ".", "multiply", "(", "h_state_expanded", ",", "h_actions", ")", ",", "axis", "=", "-", "1", ")", "\n", "return", "q_actions", ",", "new_h", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.models.dsqn_modeling.CnnDSQN.get_h_state": [[70, 78], ["tensorflow.variable_scope", "deepword.encoder_cnn", "deepword.encoder_cnn"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.models.utils.encoder_cnn", "home.repos.pwc.inspect_result.yinxusen_deepword.models.utils.encoder_cnn"], ["", "def", "get_h_state", "(", "self", ",", "src", ",", "src_len", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "\"drrn-encoder\"", ",", "reuse", "=", "tf", ".", "AUTO_REUSE", ")", ":", "\n", "            ", "h_state", "=", "dqn", ".", "encoder_cnn", "(", "\n", "src", ",", "src_len", ",", "\n", "self", ".", "src_embeddings", ",", "self", ".", "pos_embeddings", ",", "\n", "self", ".", "filter_sizes", ",", "self", ".", "num_filters", ",", "self", ".", "hp", ".", "embedding_size", ",", "\n", "self", ".", "is_infer", ")", "\n", "", "return", "h_state", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.models.dsqn_modeling.CnnDSQN.is_semantic_same": [[79, 91], ["dsqn_modeling.CnnDSQN.get_h_state", "dsqn_modeling.CnnDSQN.get_h_state", "dsqn_modeling.CnnDSQN.wt_var", "dsqn_modeling.CnnDSQN.wt_var", "tensorflow.abs", "tensorflow.squeeze", "tensorflow.layers.dense"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.models.dsqn_modeling.TransformerDSQN.get_h_state", "home.repos.pwc.inspect_result.yinxusen_deepword.models.dsqn_modeling.TransformerDSQN.get_h_state"], ["", "def", "is_semantic_same", "(", "self", ")", ":", "\n", "        ", "h_state", "=", "self", ".", "get_h_state", "(", "\n", "self", ".", "inputs", "[", "\"snn_src\"", "]", ",", "self", ".", "inputs", "[", "\"snn_src_len\"", "]", ")", "\n", "h_state2", "=", "self", ".", "get_h_state", "(", "\n", "self", ".", "inputs", "[", "\"snn_src2\"", "]", ",", "self", ".", "inputs", "[", "\"snn_src2_len\"", "]", ")", "\n", "new_h_var", "=", "self", ".", "wt_var", "(", "h_state", ")", "\n", "new_h_var2", "=", "self", ".", "wt_var", "(", "h_state2", ")", "\n", "diff_two_states", "=", "tf", ".", "abs", "(", "new_h_var", "-", "new_h_var2", ")", "\n", "semantic_same", "=", "tf", ".", "squeeze", "(", "tf", ".", "layers", ".", "dense", "(", "\n", "diff_two_states", ",", "activation", "=", "None", ",", "units", "=", "1", ",", "use_bias", "=", "True", ",", "\n", "name", "=", "\"snn_dense\"", ")", ")", "\n", "return", "semantic_same", ",", "diff_two_states", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.models.dsqn_modeling.CnnDSQN.get_train_op": [[92, 98], ["deepword.l2_loss_1d_action", "deepword.l2_loss_1d_action", "dsqn_modeling.CnnDSQN.optimizer.minimize"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.models.utils.l2_loss_1d_action", "home.repos.pwc.inspect_result.yinxusen_deepword.models.utils.l2_loss_1d_action"], ["", "def", "get_train_op", "(", "self", ",", "q_actions", ")", ":", "\n", "        ", "loss", ",", "abs_loss", "=", "dqn", ".", "l2_loss_1d_action", "(", "\n", "q_actions", ",", "self", ".", "inputs", "[", "\"action_idx\"", "]", ",", "self", ".", "inputs", "[", "\"expected_q\"", "]", ",", "\n", "self", ".", "inputs", "[", "\"b_weight\"", "]", ")", "\n", "train_op", "=", "self", ".", "optimizer", ".", "minimize", "(", "loss", ",", "global_step", "=", "self", ".", "global_step", ")", "\n", "return", "loss", ",", "train_op", ",", "abs_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.models.dsqn_modeling.CnnDSQN.get_snn_train_op": [[99, 106], ["tensorflow.nn.sigmoid_cross_entropy_with_logits", "tensorflow.reduce_mean", "dsqn_modeling.CnnDSQN.optimizer.minimize"], "methods", ["None"], ["", "def", "get_snn_train_op", "(", "self", ",", "semantic_same", ")", ":", "\n", "        ", "labels", "=", "self", ".", "inputs", "[", "\"labels\"", "]", "\n", "losses", "=", "tf", ".", "nn", ".", "sigmoid_cross_entropy_with_logits", "(", "\n", "labels", "=", "labels", ",", "logits", "=", "semantic_same", ")", "\n", "loss", "=", "tf", ".", "reduce_mean", "(", "losses", ")", "\n", "train_op", "=", "self", ".", "optimizer", ".", "minimize", "(", "loss", ",", "global_step", "=", "self", ".", "global_step", ")", "\n", "return", "loss", ",", "train_op", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.models.dsqn_modeling.CnnDSQN.get_merged_train_op": [[107, 117], ["tensorflow.get_variable", "tensorflow.get_variable", "dsqn_modeling.CnnDSQN.optimizer.minimize", "tensorflow.exp", "tensorflow.exp"], "methods", ["None"], ["", "def", "get_merged_train_op", "(", "self", ",", "loss", ",", "snn_loss", ")", ":", "\n", "# Multi-Task Learning Using Uncertainty to Weigh Losses", "\n", "        ", "s1", "=", "tf", ".", "get_variable", "(", "\"s1\"", ",", "shape", "=", "[", "]", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "s2", "=", "tf", ".", "get_variable", "(", "\"s2\"", ",", "shape", "=", "[", "]", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "weighted_loss", "=", "(", "\n", "0.5", "*", "tf", ".", "exp", "(", "-", "s1", ")", "*", "loss", "+", "tf", ".", "exp", "(", "-", "s2", ")", "*", "snn_loss", "+", "\n", "0.5", "*", "s1", "+", "0.5", "*", "s2", ")", "\n", "merged_train_op", "=", "self", ".", "optimizer", ".", "minimize", "(", "\n", "weighted_loss", ",", "global_step", "=", "self", ".", "global_step", ")", "\n", "return", "weighted_loss", ",", "merged_train_op", ",", "s1", ",", "s2", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.models.dsqn_modeling.CnnDSQN.get_train_student_model": [[118, 121], ["cls.get_train_model"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.models.drrn_modeling.CnnDRRN.get_train_model"], ["", "@", "classmethod", "\n", "def", "get_train_student_model", "(", "cls", ",", "hp", ",", "device_placement", ")", ":", "\n", "        ", "return", "cls", ".", "get_train_model", "(", "hp", ",", "device_placement", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.models.dsqn_modeling.CnnDSQN.get_train_model": [[122, 177], ["tensorflow.Graph", "deepword.models.models.DSQNModel", "deepword.models.models.DSQNModel", "tensorflow.Graph.as_default", "tensorflow.device", "cls", "cls.get_q_actions", "cls.is_semantic_same", "cls.get_train_op", "cls.get_snn_train_op", "cls.get_merged_train_op", "tensorflow.summary.scalar", "tensorflow.summary.scalar", "tensorflow.summary.scalar", "tensorflow.summary.scalar", "tensorflow.summary.scalar", "tensorflow.summary.merge", "tensorflow.summary.merge", "tensorflow.summary.merge", "tensorflow.exp", "tensorflow.exp"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.models.drrn_modeling.PseudoSeq2SeqDRRN.get_q_actions", "home.repos.pwc.inspect_result.yinxusen_deepword.models.dsqn_modeling.CnnDSQN.is_semantic_same", "home.repos.pwc.inspect_result.yinxusen_deepword.models.drrn_modeling.PseudoSeq2SeqDRRN.get_train_op", "home.repos.pwc.inspect_result.yinxusen_deepword.models.dsqn_modeling.CnnDSQN.get_snn_train_op", "home.repos.pwc.inspect_result.yinxusen_deepword.models.dsqn_modeling.CnnDSQN.get_merged_train_op"], ["", "@", "classmethod", "\n", "def", "get_train_model", "(", "cls", ",", "hp", ",", "device_placement", ")", ":", "\n", "        ", "graph", "=", "tf", ".", "Graph", "(", ")", "\n", "with", "graph", ".", "as_default", "(", ")", ":", "\n", "            ", "with", "tf", ".", "device", "(", "device_placement", ")", ":", "\n", "                ", "model", "=", "cls", "(", "hp", ")", "\n", "inputs", "=", "model", ".", "inputs", "\n", "q_actions", ",", "new_h", "=", "model", ".", "get_q_actions", "(", ")", "\n", "semantic_same", ",", "h_states_diff", "=", "model", ".", "is_semantic_same", "(", ")", "\n", "loss", ",", "train_op", ",", "abs_loss", "=", "model", ".", "get_train_op", "(", "q_actions", ")", "\n", "snn_loss", ",", "snn_train_op", "=", "model", ".", "get_snn_train_op", "(", "semantic_same", ")", "\n", "(", "weighted_loss", ",", "merged_train_op", ",", "s1", ",", "s2", "\n", ")", "=", "model", ".", "get_merged_train_op", "(", "loss", ",", "snn_loss", ")", "\n", "loss_summary", "=", "tf", ".", "summary", ".", "scalar", "(", "\"loss\"", ",", "loss", ")", "\n", "snn_loss_summary", "=", "tf", ".", "summary", ".", "scalar", "(", "\"snn_loss\"", ",", "snn_loss", ")", "\n", "weighted_loss_summary", "=", "tf", ".", "summary", ".", "scalar", "(", "\n", "\"weighted_loss\"", ",", "weighted_loss", ")", "\n", "s1_summary", "=", "tf", ".", "summary", ".", "scalar", "(", "\"w_dqn\"", ",", "0.5", "*", "tf", ".", "exp", "(", "-", "s1", ")", ")", "\n", "s2_summary", "=", "tf", ".", "summary", ".", "scalar", "(", "\"w_snn\"", ",", "tf", ".", "exp", "(", "-", "s2", ")", ")", "\n", "train_summary_op", "=", "tf", ".", "summary", ".", "merge", "(", "[", "loss_summary", "]", ")", "\n", "snn_train_summary_op", "=", "tf", ".", "summary", ".", "merge", "(", "[", "snn_loss_summary", "]", ")", "\n", "weighted_train_summary_op", "=", "tf", ".", "summary", ".", "merge", "(", "\n", "[", "loss_summary", ",", "snn_loss_summary", ",", "weighted_loss_summary", ",", "\n", "s1_summary", ",", "s2_summary", "]", ")", "\n", "", "", "return", "DSQNModel", "(", "\n", "graph", "=", "graph", ",", "\n", "training", "=", "True", ",", "\n", "q_actions", "=", "q_actions", ",", "\n", "semantic_same", "=", "semantic_same", ",", "\n", "src_", "=", "inputs", "[", "\"src\"", "]", ",", "\n", "src_len_", "=", "inputs", "[", "\"src_len\"", "]", ",", "\n", "actions_", "=", "inputs", "[", "\"actions\"", "]", ",", "\n", "actions_len_", "=", "inputs", "[", "\"actions_len\"", "]", ",", "\n", "snn_src_", "=", "inputs", "[", "\"snn_src\"", "]", ",", "\n", "snn_src_len_", "=", "inputs", "[", "\"snn_src_len\"", "]", ",", "\n", "snn_src2_", "=", "inputs", "[", "\"snn_src2\"", "]", ",", "\n", "snn_src2_len_", "=", "inputs", "[", "\"snn_src2_len\"", "]", ",", "\n", "actions_repeats_", "=", "inputs", "[", "\"actions_repeats\"", "]", ",", "\n", "src_seg_", "=", "inputs", "[", "\"src_seg\"", "]", ",", "\n", "labels_", "=", "inputs", "[", "\"labels\"", "]", ",", "\n", "b_weight_", "=", "inputs", "[", "\"b_weight\"", "]", ",", "\n", "abs_loss", "=", "abs_loss", ",", "\n", "train_op", "=", "train_op", ",", "\n", "action_idx_", "=", "inputs", "[", "\"action_idx\"", "]", ",", "\n", "expected_q_", "=", "inputs", "[", "\"expected_q\"", "]", ",", "\n", "loss", "=", "loss", ",", "\n", "snn_train_op", "=", "snn_train_op", ",", "\n", "weighted_loss", "=", "weighted_loss", ",", "\n", "snn_loss", "=", "snn_loss", ",", "\n", "merged_train_op", "=", "merged_train_op", ",", "\n", "train_summary_op", "=", "train_summary_op", ",", "\n", "snn_train_summary_op", "=", "snn_train_summary_op", ",", "\n", "weighted_train_summary_op", "=", "weighted_train_summary_op", ",", "\n", "h_states_diff", "=", "h_states_diff", ",", "\n", "h_state", "=", "new_h", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.models.dsqn_modeling.CnnDSQN.get_eval_model": [[178, 216], ["tensorflow.Graph", "deepword.models.models.DSQNModel", "deepword.models.models.DSQNModel", "tensorflow.Graph.as_default", "tensorflow.device", "cls", "cls.get_q_actions", "cls.is_semantic_same"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.models.drrn_modeling.PseudoSeq2SeqDRRN.get_q_actions", "home.repos.pwc.inspect_result.yinxusen_deepword.models.dsqn_modeling.CnnDSQN.is_semantic_same"], ["", "@", "classmethod", "\n", "def", "get_eval_model", "(", "cls", ",", "hp", ",", "device_placement", ")", ":", "\n", "        ", "graph", "=", "tf", ".", "Graph", "(", ")", "\n", "with", "graph", ".", "as_default", "(", ")", ":", "\n", "            ", "with", "tf", ".", "device", "(", "device_placement", ")", ":", "\n", "                ", "model", "=", "cls", "(", "hp", ",", "is_infer", "=", "True", ")", "\n", "inputs", "=", "model", ".", "inputs", "\n", "q_actions", ",", "new_h", "=", "model", ".", "get_q_actions", "(", ")", "\n", "semantic_same", ",", "h_states_diff", "=", "model", ".", "is_semantic_same", "(", ")", "\n", "", "", "return", "DSQNModel", "(", "\n", "graph", "=", "graph", ",", "\n", "training", "=", "False", ",", "\n", "q_actions", "=", "q_actions", ",", "\n", "semantic_same", "=", "semantic_same", ",", "\n", "src_", "=", "inputs", "[", "\"src\"", "]", ",", "\n", "src_len_", "=", "inputs", "[", "\"src_len\"", "]", ",", "\n", "actions_", "=", "inputs", "[", "\"actions\"", "]", ",", "\n", "actions_len_", "=", "inputs", "[", "\"actions_len\"", "]", ",", "\n", "snn_src_", "=", "inputs", "[", "\"snn_src\"", "]", ",", "\n", "snn_src_len_", "=", "inputs", "[", "\"snn_src_len\"", "]", ",", "\n", "snn_src2_", "=", "inputs", "[", "\"snn_src2\"", "]", ",", "\n", "snn_src2_len_", "=", "inputs", "[", "\"snn_src2_len\"", "]", ",", "\n", "actions_repeats_", "=", "inputs", "[", "\"actions_repeats\"", "]", ",", "\n", "src_seg_", "=", "inputs", "[", "\"src_seg\"", "]", ",", "\n", "labels_", "=", "inputs", "[", "\"labels\"", "]", ",", "\n", "b_weight_", "=", "inputs", "[", "\"b_weight\"", "]", ",", "\n", "abs_loss", "=", "None", ",", "\n", "train_op", "=", "None", ",", "action_idx_", "=", "inputs", "[", "\"action_idx\"", "]", ",", "\n", "expected_q_", "=", "inputs", "[", "\"expected_q\"", "]", ",", "loss", "=", "None", ",", "\n", "snn_train_op", "=", "None", ",", "\n", "weighted_loss", "=", "None", ",", "\n", "snn_loss", "=", "None", ",", "\n", "merged_train_op", "=", "None", ",", "\n", "train_summary_op", "=", "None", ",", "\n", "snn_train_summary_op", "=", "None", ",", "\n", "weighted_train_summary_op", "=", "None", ",", "\n", "h_states_diff", "=", "h_states_diff", ",", "\n", "h_state", "=", "new_h", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.models.dsqn_modeling.CnnZorkDSQN.__init__": [[222, 224], ["dsqn_modeling.CnnDSQN.__init__"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.models.drrn_modeling.PseudoSeq2SeqDRRN.__init__"], ["def", "__init__", "(", "self", ",", "hp", ",", "src_embeddings", "=", "None", ",", "is_infer", "=", "False", ")", ":", "\n", "        ", "super", "(", "CnnZorkDSQN", ",", "self", ")", ".", "__init__", "(", "hp", ",", "src_embeddings", ",", "is_infer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.models.dsqn_modeling.CnnZorkDSQN.get_train_op": [[225, 231], ["deepword.l2_loss_1d_action_v2", "deepword.l2_loss_1d_action_v2", "dsqn_modeling.CnnZorkDSQN.optimizer.minimize"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.models.utils.l2_loss_1d_action_v2", "home.repos.pwc.inspect_result.yinxusen_deepword.models.utils.l2_loss_1d_action_v2"], ["", "def", "get_train_op", "(", "self", ",", "q_actions", ")", ":", "\n", "        ", "loss", ",", "abs_loss", "=", "dqn", ".", "l2_loss_1d_action_v2", "(", "\n", "q_actions", ",", "self", ".", "inputs", "[", "\"action_idx\"", "]", ",", "self", ".", "inputs", "[", "\"expected_q\"", "]", ",", "\n", "self", ".", "hp", ".", "n_actions", ",", "self", ".", "inputs", "[", "\"b_weight\"", "]", ")", "\n", "train_op", "=", "self", ".", "optimizer", ".", "minimize", "(", "loss", ",", "global_step", "=", "self", ".", "global_step", ")", "\n", "return", "loss", ",", "train_op", ",", "abs_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.models.dsqn_modeling.CnnZorkDSQN.get_train_model": [[232, 284], ["tensorflow.Graph", "deepword.models.models.DSQNZorkModel", "deepword.models.models.DSQNZorkModel", "tensorflow.Graph.as_default", "tensorflow.device", "cls", "cls.get_q_actions", "cls.is_semantic_same", "cls.get_train_op", "cls.get_snn_train_op", "cls.get_merged_train_op", "tensorflow.summary.scalar", "tensorflow.summary.scalar", "tensorflow.summary.scalar", "tensorflow.summary.scalar", "tensorflow.summary.scalar", "tensorflow.summary.merge", "tensorflow.summary.merge", "tensorflow.summary.merge", "tensorflow.exp", "tensorflow.exp"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.models.drrn_modeling.PseudoSeq2SeqDRRN.get_q_actions", "home.repos.pwc.inspect_result.yinxusen_deepword.models.dsqn_modeling.CnnDSQN.is_semantic_same", "home.repos.pwc.inspect_result.yinxusen_deepword.models.drrn_modeling.PseudoSeq2SeqDRRN.get_train_op", "home.repos.pwc.inspect_result.yinxusen_deepword.models.dsqn_modeling.CnnDSQN.get_snn_train_op", "home.repos.pwc.inspect_result.yinxusen_deepword.models.dsqn_modeling.CnnDSQN.get_merged_train_op"], ["", "@", "classmethod", "\n", "def", "get_train_model", "(", "cls", ",", "hp", ",", "device_placement", ")", ":", "\n", "        ", "graph", "=", "tf", ".", "Graph", "(", ")", "\n", "with", "graph", ".", "as_default", "(", ")", ":", "\n", "            ", "with", "tf", ".", "device", "(", "device_placement", ")", ":", "\n", "                ", "model", "=", "cls", "(", "hp", ")", "\n", "inputs", "=", "model", ".", "inputs", "\n", "q_actions", ",", "new_h", "=", "model", ".", "get_q_actions", "(", ")", "\n", "semantic_same", ",", "h_states_diff", "=", "model", ".", "is_semantic_same", "(", ")", "\n", "loss", ",", "train_op", ",", "abs_loss", "=", "model", ".", "get_train_op", "(", "q_actions", ")", "\n", "snn_loss", ",", "snn_train_op", "=", "model", ".", "get_snn_train_op", "(", "semantic_same", ")", "\n", "(", "weighted_loss", ",", "merged_train_op", ",", "s1", ",", "s2", "\n", ")", "=", "model", ".", "get_merged_train_op", "(", "loss", ",", "snn_loss", ")", "\n", "loss_summary", "=", "tf", ".", "summary", ".", "scalar", "(", "\"loss\"", ",", "loss", ")", "\n", "snn_loss_summary", "=", "tf", ".", "summary", ".", "scalar", "(", "\"snn_loss\"", ",", "snn_loss", ")", "\n", "weighted_loss_summary", "=", "tf", ".", "summary", ".", "scalar", "(", "\n", "\"weighted_loss\"", ",", "weighted_loss", ")", "\n", "s1_summary", "=", "tf", ".", "summary", ".", "scalar", "(", "\"w_dqn\"", ",", "0.5", "*", "tf", ".", "exp", "(", "-", "s1", ")", ")", "\n", "s2_summary", "=", "tf", ".", "summary", ".", "scalar", "(", "\"w_snn\"", ",", "tf", ".", "exp", "(", "-", "s2", ")", ")", "\n", "train_summary_op", "=", "tf", ".", "summary", ".", "merge", "(", "[", "loss_summary", "]", ")", "\n", "snn_train_summary_op", "=", "tf", ".", "summary", ".", "merge", "(", "[", "snn_loss_summary", "]", ")", "\n", "weighted_train_summary_op", "=", "tf", ".", "summary", ".", "merge", "(", "\n", "[", "loss_summary", ",", "snn_loss_summary", ",", "weighted_loss_summary", ",", "\n", "s1_summary", ",", "s2_summary", "]", ")", "\n", "", "", "return", "DSQNZorkModel", "(", "\n", "graph", "=", "graph", ",", "\n", "training", "=", "True", ",", "\n", "q_actions", "=", "q_actions", ",", "\n", "semantic_same", "=", "semantic_same", ",", "\n", "src_", "=", "inputs", "[", "\"src\"", "]", ",", "\n", "src_len_", "=", "inputs", "[", "\"src_len\"", "]", ",", "\n", "snn_src_", "=", "inputs", "[", "\"snn_src\"", "]", ",", "\n", "snn_src_len_", "=", "inputs", "[", "\"snn_src_len\"", "]", ",", "\n", "snn_src2_", "=", "inputs", "[", "\"snn_src2\"", "]", ",", "\n", "snn_src2_len_", "=", "inputs", "[", "\"snn_src2_len\"", "]", ",", "\n", "src_seg_", "=", "inputs", "[", "\"src_seg\"", "]", ",", "\n", "labels_", "=", "inputs", "[", "\"labels\"", "]", ",", "\n", "b_weight_", "=", "inputs", "[", "\"b_weight\"", "]", ",", "\n", "abs_loss", "=", "abs_loss", ",", "\n", "train_op", "=", "train_op", ",", "\n", "action_idx_", "=", "inputs", "[", "\"action_idx\"", "]", ",", "\n", "expected_q_", "=", "inputs", "[", "\"expected_q\"", "]", ",", "\n", "loss", "=", "loss", ",", "\n", "snn_train_op", "=", "snn_train_op", ",", "\n", "weighted_loss", "=", "weighted_loss", ",", "\n", "snn_loss", "=", "snn_loss", ",", "\n", "merged_train_op", "=", "merged_train_op", ",", "\n", "train_summary_op", "=", "train_summary_op", ",", "\n", "snn_train_summary_op", "=", "snn_train_summary_op", ",", "\n", "weighted_train_summary_op", "=", "weighted_train_summary_op", ",", "\n", "h_states_diff", "=", "h_states_diff", ",", "\n", "h_state", "=", "new_h", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.models.dsqn_modeling.CnnZorkDSQN.get_eval_model": [[285, 320], ["tensorflow.Graph", "deepword.models.models.DSQNZorkModel", "deepword.models.models.DSQNZorkModel", "tensorflow.Graph.as_default", "tensorflow.device", "cls", "cls.get_q_actions", "cls.is_semantic_same"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.models.drrn_modeling.PseudoSeq2SeqDRRN.get_q_actions", "home.repos.pwc.inspect_result.yinxusen_deepword.models.dsqn_modeling.CnnDSQN.is_semantic_same"], ["", "@", "classmethod", "\n", "def", "get_eval_model", "(", "cls", ",", "hp", ",", "device_placement", ")", ":", "\n", "        ", "graph", "=", "tf", ".", "Graph", "(", ")", "\n", "with", "graph", ".", "as_default", "(", ")", ":", "\n", "            ", "with", "tf", ".", "device", "(", "device_placement", ")", ":", "\n", "                ", "model", "=", "cls", "(", "hp", ",", "is_infer", "=", "True", ")", "\n", "inputs", "=", "model", ".", "inputs", "\n", "q_actions", ",", "new_h", "=", "model", ".", "get_q_actions", "(", ")", "\n", "semantic_same", ",", "h_states_diff", "=", "model", ".", "is_semantic_same", "(", ")", "\n", "", "", "return", "DSQNZorkModel", "(", "\n", "graph", "=", "graph", ",", "\n", "training", "=", "False", ",", "\n", "q_actions", "=", "q_actions", ",", "\n", "semantic_same", "=", "semantic_same", ",", "\n", "src_", "=", "inputs", "[", "\"src\"", "]", ",", "\n", "src_len_", "=", "inputs", "[", "\"src_len\"", "]", ",", "\n", "snn_src_", "=", "inputs", "[", "\"snn_src\"", "]", ",", "\n", "snn_src_len_", "=", "inputs", "[", "\"snn_src_len\"", "]", ",", "\n", "snn_src2_", "=", "inputs", "[", "\"snn_src2\"", "]", ",", "\n", "snn_src2_len_", "=", "inputs", "[", "\"snn_src2_len\"", "]", ",", "\n", "src_seg_", "=", "inputs", "[", "\"src_seg\"", "]", ",", "\n", "labels_", "=", "inputs", "[", "\"labels\"", "]", ",", "\n", "b_weight_", "=", "inputs", "[", "\"b_weight\"", "]", ",", "\n", "abs_loss", "=", "None", ",", "\n", "train_op", "=", "None", ",", "action_idx_", "=", "inputs", "[", "\"action_idx\"", "]", ",", "\n", "expected_q_", "=", "inputs", "[", "\"expected_q\"", "]", ",", "loss", "=", "None", ",", "\n", "snn_train_op", "=", "None", ",", "\n", "weighted_loss", "=", "None", ",", "\n", "snn_loss", "=", "None", ",", "\n", "merged_train_op", "=", "None", ",", "\n", "train_summary_op", "=", "None", ",", "\n", "snn_train_summary_op", "=", "None", ",", "\n", "weighted_train_summary_op", "=", "None", ",", "\n", "h_states_diff", "=", "h_states_diff", ",", "\n", "h_state", "=", "new_h", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.models.dsqn_modeling.TransformerDSQN.__init__": [[326, 332], ["dsqn_modeling.CnnDSQN.__init__", "deepword.Encoder", "deepword.Encoder"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.models.drrn_modeling.PseudoSeq2SeqDRRN.__init__"], ["def", "__init__", "(", "self", ",", "hp", ",", "src_embeddings", "=", "None", ",", "is_infer", "=", "False", ")", ":", "\n", "        ", "super", "(", "TransformerDSQN", ",", "self", ")", ".", "__init__", "(", "hp", ",", "src_embeddings", ",", "is_infer", ")", "\n", "self", ".", "d_model", "=", "128", "\n", "self", ".", "attn_encoder", "=", "txf", ".", "Encoder", "(", "\n", "num_layers", "=", "1", ",", "d_model", "=", "self", ".", "d_model", ",", "num_heads", "=", "8", ",", "dff", "=", "256", ",", "\n", "input_vocab_size", "=", "self", ".", "hp", ".", "vocab_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.models.dsqn_modeling.TransformerDSQN.get_h_state": [[333, 342], ["tensorflow.variable_scope", "deepword.create_padding_mask", "deepword.create_padding_mask", "dsqn_modeling.TransformerDSQN.attn_encoder", "tensorflow.reduce_max", "tensorflow.reshape"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.models.transformer.create_padding_mask", "home.repos.pwc.inspect_result.yinxusen_deepword.models.transformer.create_padding_mask"], ["", "def", "get_h_state", "(", "self", ",", "src", ",", "src_len", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "\"drrn-encoder\"", ",", "reuse", "=", "tf", ".", "AUTO_REUSE", ")", ":", "\n", "            ", "padding_mask", "=", "txf", ".", "create_padding_mask", "(", "src", ")", "\n", "inner_state", "=", "self", ".", "attn_encoder", "(", "\n", "src", ",", "training", "=", "(", "not", "self", ".", "is_infer", ")", ",", "mask", "=", "padding_mask", ",", "\n", "x_seg", "=", "None", ")", "\n", "pooled", "=", "tf", ".", "reduce_max", "(", "inner_state", ",", "axis", "=", "1", ")", "\n", "h_state", "=", "tf", ".", "reshape", "(", "pooled", ",", "[", "-", "1", ",", "self", ".", "d_model", "]", ")", "\n", "", "return", "h_state", "\n", "", "", ""]], "home.repos.pwc.inspect_result.yinxusen_deepword.models.gen_modeling.TransformerGenDQN.__init__": [[10, 31], ["deepword.models.dqn_modeling.BaseDQN.__init__", "deepword.models.transformer.Transformer", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.models.drrn_modeling.PseudoSeq2SeqDRRN.__init__"], ["    ", "def", "__init__", "(", "self", ",", "hp", ",", "is_infer", "=", "False", ")", ":", "\n", "        ", "super", "(", "TransformerGenDQN", ",", "self", ")", ".", "__init__", "(", "hp", ",", "is_infer", ")", "\n", "\n", "# redefine inputs, notice the shape of action_idx", "\n", "self", ".", "inputs", "=", "{", "\n", "\"src\"", ":", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "[", "None", ",", "None", "]", ")", ",", "\n", "\"src_len\"", ":", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "None", "]", ")", ",", "\n", "\"action_idx\"", ":", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "[", "None", ",", "None", "]", ")", ",", "\n", "\"action_idx_out\"", ":", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "[", "None", ",", "None", "]", ")", ",", "\n", "\"expected_q\"", ":", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "None", "]", ")", ",", "\n", "\"action_len\"", ":", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "[", "None", "]", ")", ",", "\n", "\"b_weight\"", ":", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "None", "]", ")", ",", "\n", "\"temperature\"", ":", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "]", ")", ",", "\n", "\"beam_size\"", ":", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "[", "]", ")", ",", "\n", "\"use_greedy\"", ":", "tf", ".", "placeholder", "(", "tf", ".", "bool", ",", "[", "]", ")", "\n", "}", "\n", "\n", "self", ".", "transformer", "=", "txf", ".", "Transformer", "(", "\n", "num_layers", "=", "2", ",", "d_model", "=", "128", ",", "num_heads", "=", "8", ",", "dff", "=", "128", ",", "\n", "input_vocab_size", "=", "self", ".", "hp", ".", "vocab_size", ",", "\n", "target_vocab_size", "=", "self", ".", "hp", ".", "vocab_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.models.gen_modeling.TransformerGenDQN.get_train_student_model": [[32, 35], ["cls.get_train_model"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.models.drrn_modeling.CnnDRRN.get_train_model"], ["", "@", "classmethod", "\n", "def", "get_train_student_model", "(", "cls", ",", "hp", ",", "device_placement", ")", ":", "\n", "        ", "return", "cls", ".", "get_train_model", "(", "hp", ",", "device_placement", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.models.gen_modeling.TransformerGenDQN.get_train_model": [[36, 74], ["tensorflow.Graph", "deepword.models.models.GenDQNModel", "tensorflow.Graph.as_default", "tensorflow.device", "cls", "cls.get_q_actions", "cls.decode", "cls.get_train_op", "tensorflow.summary.scalar", "tensorflow.summary.merge"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.models.drrn_modeling.PseudoSeq2SeqDRRN.get_q_actions", "home.repos.pwc.inspect_result.yinxusen_deepword.models.transformer.BertTransformer.decode", "home.repos.pwc.inspect_result.yinxusen_deepword.models.drrn_modeling.PseudoSeq2SeqDRRN.get_train_op"], ["", "@", "classmethod", "\n", "def", "get_train_model", "(", "cls", ",", "hp", ",", "device_placement", ")", ":", "\n", "        ", "graph", "=", "tf", ".", "Graph", "(", ")", "\n", "with", "graph", ".", "as_default", "(", ")", ":", "\n", "            ", "with", "tf", ".", "device", "(", "device_placement", ")", ":", "\n", "                ", "model", "=", "cls", "(", "hp", ")", "\n", "inputs", "=", "model", ".", "inputs", "\n", "q_actions", ",", "p_gen", "=", "model", ".", "get_q_actions", "(", ")", "\n", "(", "decoded_idx", ",", "p_gen_infer", ",", "col_eos_idx", ",", "decoded_logits", "\n", ")", "=", "model", ".", "decode", "(", ")", "\n", "loss", ",", "train_op", ",", "abs_loss", "=", "model", ".", "get_train_op", "(", "q_actions", ")", "\n", "loss_summary", "=", "tf", ".", "summary", ".", "scalar", "(", "\"loss\"", ",", "loss", ")", "\n", "train_summary_op", "=", "tf", ".", "summary", ".", "merge", "(", "[", "loss_summary", "]", ")", "\n", "", "", "return", "GenDQNModel", "(", "\n", "graph", "=", "graph", ",", "\n", "training", "=", "True", ",", "\n", "q_actions", "=", "q_actions", ",", "\n", "decoded_idx_infer", "=", "decoded_idx", ",", "\n", "src_", "=", "inputs", "[", "\"src\"", "]", ",", "\n", "src_len_", "=", "inputs", "[", "\"src_len\"", "]", ",", "\n", "train_op", "=", "train_op", ",", "\n", "action_idx_", "=", "inputs", "[", "\"action_idx\"", "]", ",", "\n", "action_idx_out_", "=", "inputs", "[", "\"action_idx_out\"", "]", ",", "\n", "action_len_", "=", "inputs", "[", "\"action_len\"", "]", ",", "\n", "b_weight_", "=", "inputs", "[", "\"b_weight\"", "]", ",", "\n", "temperature_", "=", "inputs", "[", "\"temperature\"", "]", ",", "\n", "expected_q_", "=", "inputs", "[", "\"expected_q\"", "]", ",", "\n", "loss", "=", "loss", ",", "\n", "abs_loss", "=", "abs_loss", ",", "\n", "p_gen", "=", "p_gen", ",", "\n", "p_gen_infer", "=", "p_gen_infer", ",", "\n", "train_summary_op", "=", "train_summary_op", ",", "\n", "beam_size_", "=", "inputs", "[", "\"beam_size\"", "]", ",", "\n", "use_greedy_", "=", "inputs", "[", "\"use_greedy\"", "]", ",", "\n", "col_eos_idx", "=", "col_eos_idx", ",", "\n", "decoded_logits_infer", "=", "decoded_logits", ",", "\n", "src_seg_", "=", "None", ",", "\n", "h_state", "=", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.models.gen_modeling.TransformerGenDQN.get_eval_model": [[75, 110], ["tensorflow.Graph", "deepword.models.models.GenDQNModel", "tensorflow.Graph.as_default", "tensorflow.device", "cls", "cls.get_q_actions", "cls.decode"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.models.drrn_modeling.PseudoSeq2SeqDRRN.get_q_actions", "home.repos.pwc.inspect_result.yinxusen_deepword.models.transformer.BertTransformer.decode"], ["", "@", "classmethod", "\n", "def", "get_eval_model", "(", "cls", ",", "hp", ",", "device_placement", ")", ":", "\n", "        ", "graph", "=", "tf", ".", "Graph", "(", ")", "\n", "with", "graph", ".", "as_default", "(", ")", ":", "\n", "            ", "with", "tf", ".", "device", "(", "device_placement", ")", ":", "\n", "                ", "model", "=", "cls", "(", "hp", ",", "is_infer", "=", "True", ")", "\n", "inputs", "=", "model", ".", "inputs", "\n", "q_actions", ",", "p_gen", "=", "model", ".", "get_q_actions", "(", ")", "\n", "(", "decoded_idx", ",", "decoded_logits", ",", "p_gen_infer", ",", "col_eos_idx", "\n", ")", "=", "model", ".", "decode", "(", ")", "\n", "", "", "return", "GenDQNModel", "(", "\n", "graph", "=", "graph", ",", "\n", "training", "=", "False", ",", "\n", "q_actions", "=", "q_actions", ",", "\n", "decoded_idx_infer", "=", "decoded_idx", ",", "\n", "src_", "=", "inputs", "[", "\"src\"", "]", ",", "\n", "src_len_", "=", "inputs", "[", "\"src_len\"", "]", ",", "\n", "train_op", "=", "None", ",", "\n", "action_idx_", "=", "inputs", "[", "\"action_idx\"", "]", ",", "\n", "action_idx_out_", "=", "inputs", "[", "\"action_idx_out\"", "]", ",", "\n", "action_len_", "=", "inputs", "[", "\"action_len\"", "]", ",", "\n", "b_weight_", "=", "inputs", "[", "\"b_weight\"", "]", ",", "\n", "temperature_", "=", "inputs", "[", "\"temperature\"", "]", ",", "\n", "expected_q_", "=", "inputs", "[", "\"expected_q\"", "]", ",", "\n", "loss", "=", "None", ",", "\n", "abs_loss", "=", "None", ",", "\n", "p_gen", "=", "p_gen", ",", "\n", "p_gen_infer", "=", "p_gen_infer", ",", "\n", "train_summary_op", "=", "None", ",", "\n", "beam_size_", "=", "inputs", "[", "\"beam_size\"", "]", ",", "\n", "use_greedy_", "=", "inputs", "[", "\"use_greedy\"", "]", ",", "\n", "col_eos_idx", "=", "col_eos_idx", ",", "\n", "decoded_logits_infer", "=", "decoded_logits", ",", "\n", "src_seg_", "=", "None", ",", "\n", "h_state", "=", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.models.gen_modeling.TransformerGenDQN.decode": [[111, 122], ["gen_modeling.TransformerGenDQN.transformer.decode"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.models.transformer.BertTransformer.decode"], ["", "def", "decode", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "transformer", ".", "decode", "(", "\n", "self", ".", "inputs", "[", "\"src\"", "]", ",", "\n", "training", "=", "False", ",", "\n", "max_tar_len", "=", "self", ".", "hp", ".", "max_decoding_size", ",", "\n", "sos_id", "=", "self", ".", "hp", ".", "sos_id", ",", "\n", "eos_id", "=", "self", ".", "hp", ".", "eos_id", ",", "\n", "padding_id", "=", "self", ".", "hp", ".", "padding_val_id", ",", "\n", "use_greedy", "=", "self", ".", "inputs", "[", "\"use_greedy\"", "]", ",", "\n", "beam_size", "=", "self", ".", "inputs", "[", "\"beam_size\"", "]", ",", "\n", "temperature", "=", "self", ".", "inputs", "[", "\"temperature\"", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.models.gen_modeling.TransformerGenDQN.get_q_actions": [[123, 128], ["gen_modeling.TransformerGenDQN.transformer"], "methods", ["None"], ["", "def", "get_q_actions", "(", "self", ")", ":", "\n", "        ", "q_actions", ",", "p_gen", ",", "_", ",", "_", "=", "self", ".", "transformer", "(", "\n", "self", ".", "inputs", "[", "\"src\"", "]", ",", "tar", "=", "self", ".", "inputs", "[", "\"action_idx\"", "]", ",", "\n", "training", "=", "True", ")", "\n", "return", "q_actions", ",", "p_gen", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.models.gen_modeling.TransformerGenDQN.get_train_op": [[129, 136], ["deepword.models.utils.l2_loss_2d_action", "gen_modeling.TransformerGenDQN.optimizer.minimize"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.models.utils.l2_loss_2d_action"], ["", "def", "get_train_op", "(", "self", ",", "q_actions", ")", ":", "\n", "        ", "loss", ",", "abs_loss", "=", "l2_loss_2d_action", "(", "\n", "q_actions", ",", "self", ".", "inputs", "[", "\"action_idx_out\"", "]", ",", "self", ".", "inputs", "[", "\"expected_q\"", "]", ",", "\n", "self", ".", "hp", ".", "vocab_size", ",", "self", ".", "inputs", "[", "\"action_len\"", "]", ",", "\n", "self", ".", "hp", ".", "n_tokens_per_action", ",", "self", ".", "inputs", "[", "\"b_weight\"", "]", ")", "\n", "train_op", "=", "self", ".", "optimizer", ".", "minimize", "(", "loss", ",", "global_step", "=", "self", ".", "global_step", ")", "\n", "return", "loss", ",", "train_op", ",", "abs_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.models.gen_modeling.TransformerPGN.__init__": [[145, 164], ["gen_modeling.TransformerGenDQN.__init__", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.models.drrn_modeling.PseudoSeq2SeqDRRN.__init__"], ["def", "__init__", "(", "self", ",", "hp", ",", "is_infer", "=", "False", ")", ":", "\n", "        ", "super", "(", "TransformerPGN", ",", "self", ")", ".", "__init__", "(", "hp", ",", "is_infer", ")", "\n", "\n", "# redefine inputs, notice the shape of action_idx", "\n", "# b_weight has two dimensions.", "\n", "# b_weight can be either [None, 1] to weigh each action for loss", "\n", "# or [None, None] to weigh each token of actions for loss", "\n", "self", ".", "inputs", "=", "{", "\n", "\"src\"", ":", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "[", "None", ",", "None", "]", ")", ",", "\n", "\"src_len\"", ":", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "None", "]", ")", ",", "\n", "\"src_seg\"", ":", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "[", "None", ",", "None", "]", ")", ",", "\n", "\"action_idx\"", ":", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "[", "None", ",", "None", "]", ")", ",", "\n", "\"action_idx_out\"", ":", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "[", "None", ",", "None", "]", ")", ",", "\n", "\"expected_q\"", ":", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "None", "]", ")", ",", "\n", "\"action_len\"", ":", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "[", "None", "]", ")", ",", "\n", "\"b_weight\"", ":", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "None", ",", "None", "]", ")", ",", "\n", "\"temperature\"", ":", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "]", ")", ",", "\n", "\"beam_size\"", ":", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "[", "]", ")", ",", "\n", "\"use_greedy\"", ":", "tf", ".", "placeholder", "(", "tf", ".", "bool", ",", "[", "]", ")", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.models.gen_modeling.TransformerPGN.get_train_op": [[166, 180], ["tensorflow.nn.sparse_softmax_cross_entropy_with_logits", "tensorflow.sequence_mask", "tensorflow.reduce_mean", "gen_modeling.TransformerPGN.optimizer.minimize", "tensorflow.boolean_mask"], "methods", ["None"], ["", "def", "get_train_op", "(", "self", ",", "q_actions", ")", ":", "\n", "        ", "\"\"\"\n        b_weight could be\n          1. per instance, i.e. [batch_size, 1]\n          2. per token, i.e. [batch_size, n_tokens]\n        \"\"\"", "\n", "losses", "=", "tf", ".", "nn", ".", "sparse_softmax_cross_entropy_with_logits", "(", "\n", "labels", "=", "self", ".", "inputs", "[", "\"action_idx_out\"", "]", ",", "logits", "=", "q_actions", ")", "\n", "losses", "=", "self", ".", "inputs", "[", "\"b_weight\"", "]", "*", "losses", "\n", "action_len_mask", "=", "tf", ".", "sequence_mask", "(", "\n", "self", ".", "inputs", "[", "\"action_len\"", "]", ",", "self", ".", "hp", ".", "n_tokens_per_action", ")", "\n", "loss", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "boolean_mask", "(", "losses", ",", "action_len_mask", ")", ")", "\n", "train_op", "=", "self", ".", "optimizer", ".", "minimize", "(", "loss", ",", "global_step", "=", "self", ".", "global_step", ")", "\n", "return", "loss", ",", "train_op", ",", "None", "\n", "", "", ""]], "home.repos.pwc.inspect_result.yinxusen_deepword.models.transformer.MultiHeadAttention.__init__": [[175, 189], ["super().__init__", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Dense"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.models.drrn_modeling.PseudoSeq2SeqDRRN.__init__"], ["    ", "def", "__init__", "(", "self", ",", "d_model", ",", "num_heads", ")", ":", "\n", "        ", "super", "(", "MultiHeadAttention", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_heads", "=", "num_heads", "\n", "self", ".", "d_model", "=", "d_model", "\n", "\n", "assert", "d_model", "%", "self", ".", "num_heads", "==", "0", "\n", "\n", "self", ".", "depth", "=", "d_model", "//", "self", ".", "num_heads", "\n", "\n", "self", ".", "wq", "=", "tf", ".", "keras", ".", "layers", ".", "Dense", "(", "d_model", ")", "\n", "self", ".", "wk", "=", "tf", ".", "keras", ".", "layers", ".", "Dense", "(", "d_model", ")", "\n", "self", ".", "wv", "=", "tf", ".", "keras", ".", "layers", ".", "Dense", "(", "d_model", ")", "\n", "\n", "self", ".", "dense", "=", "tf", ".", "keras", ".", "layers", ".", "Dense", "(", "d_model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.models.transformer.MultiHeadAttention.split_heads": [[190, 198], ["tensorflow.reshape", "tensorflow.transpose"], "methods", ["None"], ["", "def", "split_heads", "(", "self", ",", "x", ",", "batch_size", ")", ":", "\n", "        ", "\"\"\"\n        Split the last dimension into (num_heads, depth).\n        Transpose the result such that the shape is\n         (batch_size, num_heads, seq_len, depth)\n        \"\"\"", "\n", "x", "=", "tf", ".", "reshape", "(", "x", ",", "(", "batch_size", ",", "-", "1", ",", "self", ".", "num_heads", ",", "self", ".", "depth", ")", ")", "\n", "return", "tf", ".", "transpose", "(", "x", ",", "perm", "=", "[", "0", ",", "2", ",", "1", ",", "3", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.models.transformer.MultiHeadAttention.call": [[199, 228], ["transformer.MultiHeadAttention.wq", "transformer.MultiHeadAttention.wk", "transformer.MultiHeadAttention.wv", "transformer.MultiHeadAttention.split_heads", "transformer.MultiHeadAttention.split_heads", "transformer.MultiHeadAttention.split_heads", "transformer.scaled_dot_product_attention", "tensorflow.reduce_sum", "tensorflow.transpose", "tensorflow.reshape", "transformer.MultiHeadAttention.dense", "tensorflow.shape"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.models.transformer.MultiHeadAttention.split_heads", "home.repos.pwc.inspect_result.yinxusen_deepword.models.transformer.MultiHeadAttention.split_heads", "home.repos.pwc.inspect_result.yinxusen_deepword.models.transformer.MultiHeadAttention.split_heads", "home.repos.pwc.inspect_result.yinxusen_deepword.models.transformer.scaled_dot_product_attention"], ["", "def", "call", "(", "self", ",", "v", ",", "k", ",", "q", ",", "mask", ")", ":", "\n", "        ", "batch_size", "=", "tf", ".", "shape", "(", "q", ")", "[", "0", "]", "\n", "\n", "# (batch_size, seq_len, d_model)", "\n", "q", "=", "self", ".", "wq", "(", "q", ")", "\n", "k", "=", "self", ".", "wk", "(", "k", ")", "\n", "v", "=", "self", ".", "wv", "(", "v", ")", "\n", "\n", "# (batch_size, num_heads, seq_len_q, depth)", "\n", "q", "=", "self", ".", "split_heads", "(", "q", ",", "batch_size", ")", "\n", "k", "=", "self", ".", "split_heads", "(", "k", ",", "batch_size", ")", "\n", "v", "=", "self", ".", "split_heads", "(", "v", ",", "batch_size", ")", "\n", "\n", "# (batch_size, num_heads, seq_len_q, depth)", "\n", "# (batch_size, num_heads, seq_len_q, seq_len_k)", "\n", "(", "scaled_attention", ",", "scaled_attention_logits", "\n", ")", "=", "scaled_dot_product_attention", "(", "q", ",", "k", ",", "v", ",", "mask", ")", "\n", "\n", "# (batch_size, seq_len_q, seq_len_k)", "\n", "attn_logits", "=", "tf", ".", "reduce_sum", "(", "scaled_attention_logits", ",", "axis", "=", "1", ")", "\n", "# (batch_size, seq_len_q, num_heads, depth)", "\n", "scaled_attention", "=", "tf", ".", "transpose", "(", "scaled_attention", ",", "perm", "=", "[", "0", ",", "2", ",", "1", ",", "3", "]", ")", "\n", "# (batch_size, seq_len_q, d_model)", "\n", "concat_attention", "=", "tf", ".", "reshape", "(", "\n", "scaled_attention", ",", "(", "batch_size", ",", "-", "1", ",", "self", ".", "d_model", ")", ")", "\n", "# (batch_size, seq_len_q, d_model)", "\n", "output", "=", "self", ".", "dense", "(", "concat_attention", ")", "\n", "\n", "return", "output", ",", "attn_logits", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.models.transformer.EncoderLayer.__init__": [[231, 242], ["super().__init__", "transformer.MultiHeadAttention", "transformer.point_wise_feed_forward_network", "tensorflow.keras.layers.LayerNormalization", "tensorflow.keras.layers.LayerNormalization", "tensorflow.keras.layers.Dropout", "tensorflow.keras.layers.Dropout"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.models.drrn_modeling.PseudoSeq2SeqDRRN.__init__", "home.repos.pwc.inspect_result.yinxusen_deepword.models.transformer.point_wise_feed_forward_network"], ["    ", "def", "__init__", "(", "self", ",", "d_model", ",", "num_heads", ",", "dff", ",", "rate", "=", "0.1", ")", ":", "\n", "        ", "super", "(", "EncoderLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "mha", "=", "MultiHeadAttention", "(", "d_model", ",", "num_heads", ")", "\n", "self", ".", "ffn", "=", "point_wise_feed_forward_network", "(", "d_model", ",", "dff", ")", "\n", "\n", "self", ".", "layer_norm1", "=", "tf", ".", "keras", ".", "layers", ".", "LayerNormalization", "(", "epsilon", "=", "1e-6", ")", "\n", "self", ".", "layer_norm2", "=", "tf", ".", "keras", ".", "layers", ".", "LayerNormalization", "(", "epsilon", "=", "1e-6", ")", "\n", "\n", "self", ".", "dropout1", "=", "tf", ".", "keras", ".", "layers", ".", "Dropout", "(", "rate", ")", "\n", "self", ".", "dropout2", "=", "tf", ".", "keras", ".", "layers", ".", "Dropout", "(", "rate", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.models.transformer.EncoderLayer.call": [[243, 256], ["transformer.EncoderLayer.mha", "transformer.EncoderLayer.dropout1", "transformer.EncoderLayer.layer_norm1", "transformer.EncoderLayer.ffn", "transformer.EncoderLayer.dropout2", "transformer.EncoderLayer.layer_norm2"], "methods", ["None"], ["", "def", "call", "(", "self", ",", "x", ",", "training", ",", "mask", ")", ":", "\n", "# (batch_size, input_seq_len, d_model)", "\n", "        ", "attn_output", ",", "_", "=", "self", ".", "mha", "(", "x", ",", "x", ",", "x", ",", "mask", ")", "\n", "attn_output", "=", "self", ".", "dropout1", "(", "attn_output", ",", "training", "=", "training", ")", "\n", "# (batch_size, input_seq_len, d_model)", "\n", "out1", "=", "self", ".", "layer_norm1", "(", "x", "+", "attn_output", ")", "\n", "\n", "# (batch_size, input_seq_len, d_model)", "\n", "ffn_output", "=", "self", ".", "ffn", "(", "out1", ")", "\n", "ffn_output", "=", "self", ".", "dropout2", "(", "ffn_output", ",", "training", "=", "training", ")", "\n", "# (batch_size, input_seq_len, d_model)", "\n", "out2", "=", "self", ".", "layer_norm2", "(", "out1", "+", "ffn_output", ")", "\n", "return", "out2", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.models.transformer.DecoderLayer.__init__": [[259, 274], ["super().__init__", "transformer.MultiHeadAttention", "transformer.MultiHeadAttention", "transformer.point_wise_feed_forward_network", "tensorflow.keras.layers.LayerNormalization", "tensorflow.keras.layers.LayerNormalization", "tensorflow.keras.layers.LayerNormalization", "tensorflow.keras.layers.Dropout", "tensorflow.keras.layers.Dropout", "tensorflow.keras.layers.Dropout"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.models.drrn_modeling.PseudoSeq2SeqDRRN.__init__", "home.repos.pwc.inspect_result.yinxusen_deepword.models.transformer.point_wise_feed_forward_network"], ["    ", "def", "__init__", "(", "self", ",", "d_model", ",", "num_heads", ",", "dff", ",", "rate", "=", "0.1", ")", ":", "\n", "        ", "super", "(", "DecoderLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "mha1", "=", "MultiHeadAttention", "(", "d_model", ",", "num_heads", ")", "\n", "self", ".", "mha2", "=", "MultiHeadAttention", "(", "d_model", ",", "num_heads", ")", "\n", "\n", "self", ".", "ffn", "=", "point_wise_feed_forward_network", "(", "d_model", ",", "dff", ")", "\n", "\n", "self", ".", "layer_norm1", "=", "tf", ".", "keras", ".", "layers", ".", "LayerNormalization", "(", "epsilon", "=", "1e-6", ")", "\n", "self", ".", "layer_norm2", "=", "tf", ".", "keras", ".", "layers", ".", "LayerNormalization", "(", "epsilon", "=", "1e-6", ")", "\n", "self", ".", "layer_norm3", "=", "tf", ".", "keras", ".", "layers", ".", "LayerNormalization", "(", "epsilon", "=", "1e-6", ")", "\n", "\n", "self", ".", "dropout1", "=", "tf", ".", "keras", ".", "layers", ".", "Dropout", "(", "rate", ")", "\n", "self", ".", "dropout2", "=", "tf", ".", "keras", ".", "layers", ".", "Dropout", "(", "rate", ")", "\n", "self", ".", "dropout3", "=", "tf", ".", "keras", ".", "layers", ".", "Dropout", "(", "rate", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.models.transformer.DecoderLayer.call": [[275, 299], ["transformer.DecoderLayer.mha1", "transformer.DecoderLayer.dropout1", "transformer.DecoderLayer.layer_norm1", "transformer.DecoderLayer.mha2", "transformer.DecoderLayer.dropout2", "transformer.DecoderLayer.layer_norm2", "transformer.DecoderLayer.ffn", "transformer.DecoderLayer.dropout3", "transformer.DecoderLayer.layer_norm3"], "methods", ["None"], ["", "def", "call", "(", "self", ",", "x", ",", "enc_output", ",", "training", ",", "look_ahead_mask", ",", "padding_mask", ")", ":", "\n", "# enc_output.shape == (batch_size, input_seq_len, d_model)", "\n", "\n", "# (batch_size, target_seq_len, d_model)", "\n", "        ", "attn1", ",", "_", "=", "self", ".", "mha1", "(", "x", ",", "x", ",", "x", ",", "look_ahead_mask", ")", "\n", "attn1", "=", "self", ".", "dropout1", "(", "attn1", ",", "training", "=", "training", ")", "\n", "out1", "=", "self", ".", "layer_norm1", "(", "attn1", "+", "x", ")", "\n", "\n", "# attention weights from decoder output to encoder outputs", "\n", "# attn_logits: (batch_size, target_seq_len, enc_output_seq_len)", "\n", "# attn2: (batch_size, target_seq_len, d_model)", "\n", "attn2", ",", "attn_logits", "=", "self", ".", "mha2", "(", "\n", "enc_output", ",", "enc_output", ",", "out1", ",", "padding_mask", ")", "\n", "attn2", "=", "self", ".", "dropout2", "(", "attn2", ",", "training", "=", "training", ")", "\n", "# (batch_size, target_seq_len, d_model)", "\n", "out2", "=", "self", ".", "layer_norm2", "(", "attn2", "+", "out1", ")", "\n", "\n", "# (batch_size, target_seq_len, d_model)", "\n", "ffn_output", "=", "self", ".", "ffn", "(", "out2", ")", "\n", "ffn_output", "=", "self", ".", "dropout3", "(", "ffn_output", ",", "training", "=", "training", ")", "\n", "# (batch_size, target_seq_len, d_model)", "\n", "out3", "=", "self", ".", "layer_norm3", "(", "ffn_output", "+", "out2", ")", "\n", "\n", "return", "out3", ",", "attn_logits", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.models.transformer.Encoder.__init__": [[302, 321], ["super().__init__", "tensorflow.keras.layers.Embedding", "deepword.models.utils.positional_encoding", "tensorflow.stack", "tensorflow.keras.layers.Dropout", "transformer.EncoderLayer", "tensorflow.zeros", "tensorflow.ones", "range"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.models.drrn_modeling.PseudoSeq2SeqDRRN.__init__", "home.repos.pwc.inspect_result.yinxusen_deepword.models.utils.positional_encoding"], ["    ", "def", "__init__", "(", "\n", "self", ",", "num_layers", ",", "d_model", ",", "num_heads", ",", "dff", ",", "input_vocab_size", ",", "\n", "dropout_rate", "=", "0.1", ")", ":", "\n", "        ", "super", "(", "Encoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "d_model", "=", "d_model", "\n", "self", ".", "num_layers", "=", "num_layers", "\n", "\n", "self", ".", "embedding", "=", "tf", ".", "keras", ".", "layers", ".", "Embedding", "(", "input_vocab_size", ",", "d_model", ")", "\n", "self", ".", "pos_encoding", "=", "positional_encoding", "(", "input_vocab_size", ",", "self", ".", "d_model", ")", "\n", "self", ".", "seg_embeddings", "=", "tf", ".", "stack", "(", "\n", "[", "tf", ".", "zeros", "(", "self", ".", "d_model", ")", ",", "tf", ".", "ones", "(", "self", ".", "d_model", ")", "]", ",", "\n", "name", "=", "\"seg_embeddings\"", ")", "\n", "\n", "self", ".", "enc_layers", "=", "[", "\n", "EncoderLayer", "(", "d_model", ",", "num_heads", ",", "dff", ",", "dropout_rate", ")", "\n", "for", "_", "in", "range", "(", "num_layers", ")", "]", "\n", "\n", "self", ".", "dropout", "=", "tf", ".", "keras", ".", "layers", ".", "Dropout", "(", "dropout_rate", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.models.transformer.Encoder.call": [[322, 339], ["transformer.Encoder.embedding", "tensorflow.math.sqrt", "transformer.Encoder.dropout", "range", "transformer.create_padding_mask", "tensorflow.shape", "tensorflow.cast", "tensorflow.nn.embedding_lookup"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.models.transformer.create_padding_mask"], ["", "def", "call", "(", "self", ",", "x", ",", "training", "=", "None", ",", "mask", "=", "None", ",", "x_seg", "=", "None", ")", ":", "\n", "        ", "if", "mask", "is", "None", ":", "\n", "            ", "mask", "=", "create_padding_mask", "(", "x", ")", "\n", "\n", "", "seq_len", "=", "tf", ".", "shape", "(", "x", ")", "[", "1", "]", "\n", "# adding embedding and position encoding.", "\n", "x", "=", "self", ".", "embedding", "(", "x", ")", "# (batch_size, input_seq_len, d_model)", "\n", "x", "*=", "tf", ".", "math", ".", "sqrt", "(", "tf", ".", "cast", "(", "self", ".", "d_model", ",", "tf", ".", "float32", ")", ")", "\n", "x", "+=", "self", ".", "pos_encoding", "[", ":", ",", ":", "seq_len", ",", ":", "]", "\n", "if", "x_seg", "is", "not", "None", ":", "\n", "            ", "x", "+=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "seg_embeddings", ",", "x_seg", ")", "\n", "\n", "", "x", "=", "self", ".", "dropout", "(", "x", ",", "training", "=", "training", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "num_layers", ")", ":", "\n", "            ", "x", "=", "self", ".", "enc_layers", "[", "i", "]", "(", "x", ",", "training", ",", "mask", ")", "\n", "# (batch_size, input_seq_len, d_model)", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.models.transformer.Decoder.__init__": [[434, 454], ["super().__init__", "tensorflow.keras.layers.Embedding", "deepword.models.utils.positional_encoding", "tensorflow.keras.layers.Dropout", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Dense", "transformer.DecoderLayer", "range"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.models.drrn_modeling.PseudoSeq2SeqDRRN.__init__", "home.repos.pwc.inspect_result.yinxusen_deepword.models.utils.positional_encoding"], ["    ", "def", "__init__", "(", "\n", "self", ",", "num_layers", ",", "d_model", ",", "num_heads", ",", "dff", ",", "tgt_vocab_size", ",", "\n", "dropout_rate", "=", "0.1", ",", "with_pointer", "=", "False", ")", ":", "\n", "        ", "super", "(", "Decoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "d_model", "=", "d_model", "\n", "self", ".", "num_layers", "=", "num_layers", "\n", "self", ".", "tgt_vocab_size", "=", "tgt_vocab_size", "\n", "self", ".", "with_pointer", "=", "with_pointer", "\n", "\n", "self", ".", "embedding", "=", "tf", ".", "keras", ".", "layers", ".", "Embedding", "(", "tgt_vocab_size", ",", "d_model", ")", "\n", "self", ".", "pos_encoding", "=", "positional_encoding", "(", "tgt_vocab_size", ",", "d_model", ")", "\n", "\n", "self", ".", "dec_layers", "=", "[", "\n", "DecoderLayer", "(", "d_model", ",", "num_heads", ",", "dff", ",", "dropout_rate", ")", "\n", "for", "_", "in", "range", "(", "num_layers", ")", "]", "\n", "self", ".", "dropout", "=", "tf", ".", "keras", ".", "layers", ".", "Dropout", "(", "dropout_rate", ")", "\n", "self", ".", "logit_gen_layer", "=", "tf", ".", "keras", ".", "layers", ".", "Dense", "(", "units", "=", "1", ",", "use_bias", "=", "True", ")", "\n", "self", ".", "final_layer", "=", "tf", ".", "keras", ".", "layers", ".", "Dense", "(", "\n", "units", "=", "tgt_vocab_size", ",", "use_bias", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.models.transformer.Decoder.call": [[455, 531], ["transformer.Decoder.embedding", "tensorflow.math.sqrt", "transformer.Decoder.dropout", "range", "transformer.Decoder.dropout", "transformer.Decoder.final_layer", "transformer.get_sparse_idx_for_copy", "tensorflow.nn.softmax", "tensorflow.log", "tensorflow.concat", "transformer.Decoder.dropout", "transformer.Decoder.logit_gen_layer", "tensorflow.shape", "tensorflow.cast", "attention_logits.append", "tensorflow.reduce_logsumexp", "tensorflow.reduce_logsumexp", "tensorflow.reduce_logsumexp", "tensorflow.reduce_logsumexp", "tensorflow.exp", "tensorflow.map_fn", "tensorflow.concat", "tensorflow.stack", "tensorflow.zeros_like", "tensorflow.scatter_nd"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.models.transformer.get_sparse_idx_for_copy", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.utils.softmax", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.tree_memory.TreeMemory.append"], ["", "def", "call", "(", "\n", "self", ",", "x", ",", "enc_x", ",", "enc_output", ",", "training", ",", "\n", "look_ahead_mask", ",", "padding_mask", ",", "copy_mask", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        decode with pointer\n\n        Args:\n            x: decoder input\n            enc_x: encoder input\n            enc_output: encoder encoded result\n            training: is training or inference\n            look_ahead_mask: combined look ahead mask with padding mask\n            padding_mask: padding mask for source sentence\n            copy_mask: dense vector size |V| to mark all tokens that\n             skip copying with 1; otherwise, 0.\n\n        Returns:\n            total logits, probability of generation, gen logits, copy logits\n        \"\"\"", "\n", "seq_len", "=", "tf", ".", "shape", "(", "x", ")", "[", "1", "]", "\n", "attention_logits", "=", "[", "]", "\n", "\n", "x", "=", "self", ".", "embedding", "(", "x", ")", "\n", "x", "*=", "tf", ".", "math", ".", "sqrt", "(", "tf", ".", "cast", "(", "self", ".", "d_model", ",", "tf", ".", "float32", ")", ")", "\n", "x", "+=", "self", ".", "pos_encoding", "[", ":", ",", ":", "seq_len", ",", ":", "]", "\n", "raw_x", "=", "x", "\n", "x", "=", "self", ".", "dropout", "(", "x", ",", "training", "=", "training", ")", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "num_layers", ")", ":", "\n", "            ", "x", ",", "attn_logits", "=", "self", ".", "dec_layers", "[", "i", "]", "(", "\n", "x", ",", "enc_output", ",", "training", ",", "look_ahead_mask", ",", "padding_mask", ")", "\n", "attention_logits", ".", "append", "(", "attn_logits", ")", "\n", "\n", "", "x", "=", "self", ".", "dropout", "(", "x", ",", "training", "=", "training", ")", "\n", "gen_logits", "=", "self", ".", "final_layer", "(", "x", ")", "\n", "gen_logits", "=", "gen_logits", "-", "tf", ".", "reduce_logsumexp", "(", "\n", "gen_logits", ",", "axis", "=", "-", "1", ",", "keepdims", "=", "True", ")", "\n", "\n", "idx_tar_src", "=", "get_sparse_idx_for_copy", "(", "enc_x", ",", "target_seq_len", "=", "seq_len", ")", "\n", "# (batch_size, target_seq_len, src_seq_len)", "\n", "attn_weights", "=", "tf", ".", "nn", ".", "softmax", "(", "attention_logits", "[", "-", "1", "]", ")", "\n", "\n", "# [batch_size, target_seq_len, tgt_vocab_size]", "\n", "copy_logits", "=", "tf", ".", "log", "(", "tf", ".", "map_fn", "(", "\n", "fn", "=", "lambda", "y", ":", "tf", ".", "scatter_nd", "(", "\n", "y", "[", "0", "]", ",", "y", "[", "1", "]", ",", "[", "seq_len", ",", "self", ".", "tgt_vocab_size", "]", ")", ",", "\n", "elems", "=", "(", "idx_tar_src", ",", "attn_weights", ")", ",", "dtype", "=", "tf", ".", "float32", ")", "+", "1e-10", ")", "\n", "if", "copy_mask", "is", "not", "None", ":", "\n", "            ", "copy_logits", "+=", "(", "copy_mask", "*", "-", "1e9", ")", "[", "None", ",", "None", ",", ":", "]", "\n", "", "copy_logits", "=", "copy_logits", "-", "tf", ".", "reduce_logsumexp", "(", "\n", "copy_logits", ",", "axis", "=", "-", "1", ",", "keepdims", "=", "True", ")", "\n", "\n", "# the combined features is different with LSTM-PGN", "\n", "# LSTM-PGN uses three features, decoder input, decoder state, and", "\n", "# context vectors. but for transformer, the decoder state and context", "\n", "# vectors are highly correlated, so we use one of them.", "\n", "combined_features", "=", "tf", ".", "concat", "(", "[", "x", ",", "raw_x", "]", ",", "axis", "=", "-", "1", ")", "\n", "combined_features", "=", "self", ".", "dropout", "(", "combined_features", ",", "training", "=", "training", ")", "\n", "# (batch_size, dec_t, 1)", "\n", "logit_gen", "=", "self", ".", "logit_gen_layer", "(", "combined_features", ")", "\n", "# normalized logit of gen", "\n", "n_logit_gen", "=", "-", "tf", ".", "reduce_logsumexp", "(", "\n", "tf", ".", "concat", "(", "[", "tf", ".", "zeros_like", "(", "logit_gen", ")", ",", "-", "logit_gen", "]", ",", "axis", "=", "-", "1", ")", ",", "\n", "axis", "=", "-", "1", ",", "keepdims", "=", "True", ")", "\n", "n_logit_copy", "=", "-", "logit_gen", "+", "n_logit_gen", "\n", "\n", "if", "self", ".", "with_pointer", ":", "\n", "            ", "total_logits", "=", "tf", ".", "reduce_logsumexp", "(", "\n", "tf", ".", "stack", "(", "\n", "[", "n_logit_gen", "+", "gen_logits", ",", "n_logit_copy", "+", "copy_logits", "]", ",", "\n", "axis", "=", "-", "1", ")", ",", "\n", "axis", "=", "-", "1", ")", "\n", "", "else", ":", "\n", "            ", "total_logits", "=", "gen_logits", "\n", "\n", "", "return", "total_logits", ",", "tf", ".", "exp", "(", "n_logit_gen", ")", ",", "gen_logits", ",", "copy_logits", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.models.transformer.Transformer.__init__": [[884, 895], ["super().__init__", "transformer.Encoder", "transformer.Decoder"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.models.drrn_modeling.PseudoSeq2SeqDRRN.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "num_layers", ",", "d_model", ",", "num_heads", ",", "dff", ",", "input_vocab_size", ",", "\n", "target_vocab_size", ",", "dropout_rate", "=", "0.1", ",", "with_pointer", "=", "True", ",", "\n", "copy_mask", "=", "None", ")", ":", "\n", "        ", "super", "(", "Transformer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "encoder", "=", "Encoder", "(", "\n", "num_layers", ",", "d_model", ",", "num_heads", ",", "dff", ",", "input_vocab_size", ",", "dropout_rate", ")", "\n", "self", ".", "decoder", "=", "Decoder", "(", "\n", "num_layers", ",", "d_model", ",", "num_heads", ",", "dff", ",", "target_vocab_size", ",", "\n", "dropout_rate", ",", "with_pointer", ")", "\n", "self", ".", "copy_mask", "=", "copy_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.models.transformer.Transformer.call": [[896, 905], ["transformer.create_padding_mask", "transformer.Transformer.encoder", "transformer.create_decode_masks", "transformer.Transformer.decoder"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.models.transformer.create_padding_mask", "home.repos.pwc.inspect_result.yinxusen_deepword.models.transformer.create_decode_masks"], ["", "def", "call", "(", "self", ",", "inp", ",", "tar", ",", "training", ")", ":", "\n", "        ", "enc_padding_mask", "=", "create_padding_mask", "(", "inp", ")", "\n", "dec_padding_mask", "=", "enc_padding_mask", "\n", "# (batch_size, inp_seq_len, d_model)", "\n", "enc_output", "=", "self", ".", "encoder", "(", "inp", ",", "training", ",", "enc_padding_mask", ",", "x_seg", "=", "None", ")", "\n", "look_ahead_mask", "=", "create_decode_masks", "(", "tar", ")", "\n", "final_output", ",", "p_gen", ",", "gen_logits", ",", "copy_logits", "=", "self", ".", "decoder", "(", "\n", "tar", ",", "inp", ",", "enc_output", ",", "training", ",", "look_ahead_mask", ",", "dec_padding_mask", ")", "\n", "return", "final_output", ",", "p_gen", ",", "gen_logits", ",", "copy_logits", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.models.transformer.Transformer.decode": [[906, 918], ["transformer.create_padding_mask", "transformer.Transformer.encoder", "transformer.sequential_decoding"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.models.transformer.create_padding_mask", "home.repos.pwc.inspect_result.yinxusen_deepword.models.transformer.sequential_decoding"], ["", "def", "decode", "(", "\n", "self", ",", "enc_x", ",", "training", ",", "max_tar_len", ",", "sos_id", ",", "eos_id", ",", "padding_id", ",", "\n", "use_greedy", "=", "True", ",", "beam_size", "=", "1", ",", "temperature", "=", "1.", ")", ":", "\n", "# ======= encoding input sentences =======", "\n", "        ", "enc_padding_mask", "=", "create_padding_mask", "(", "enc_x", ")", "\n", "# (batch_size, inp_seq_len, d_model)", "\n", "enc_output", "=", "self", ".", "encoder", "(", "enc_x", ",", "training", ",", "enc_padding_mask", ",", "x_seg", "=", "None", ")", "\n", "# ======= end of encoding ======", "\n", "return", "sequential_decoding", "(", "\n", "self", ".", "decoder", ",", "self", ".", "copy_mask", ",", "enc_x", ",", "enc_output", ",", "training", ",", "\n", "max_tar_len", ",", "sos_id", ",", "eos_id", ",", "padding_id", ",", "\n", "use_greedy", ",", "beam_size", ",", "temperature", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.models.transformer.BertDecoderModel.__init__": [[921, 994], ["copy.deepcopy", "bert.get_shape_list", "tensorflow.zeros", "tensorflow.variable_scope", "tensorflow.variable_scope", "bert.embedding_lookup", "bert.embedding_postprocessor", "tensorflow.variable_scope", "bert.transformer_model", "bert.get_activation"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "\n", "config", ",", "\n", "is_training", ",", "\n", "input_ids", ",", "\n", "input_mask", ",", "\n", "token_type_ids", "=", "None", ",", "\n", "use_one_hot_embeddings", "=", "False", ",", "\n", "scope", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        BertDecoderModel, the only difference with BertModel is the decoder\n        masking.\n\n        We also remove the pooler, since we don't need that in decoding\n\n        With the mask, we turn Bert into left-to-right training style\n         for decoding\n\n        input_mask: a 3D decoding mask\n        \"\"\"", "\n", "config", "=", "copy", ".", "deepcopy", "(", "config", ")", "\n", "if", "not", "is_training", ":", "\n", "            ", "config", ".", "hidden_dropout_prob", "=", "0.0", "\n", "config", ".", "attention_probs_dropout_prob", "=", "0.0", "\n", "\n", "", "input_shape", "=", "b_model", ".", "get_shape_list", "(", "input_ids", ",", "expected_rank", "=", "2", ")", "\n", "batch_size", "=", "input_shape", "[", "0", "]", "\n", "seq_length", "=", "input_shape", "[", "1", "]", "\n", "\n", "if", "token_type_ids", "is", "None", ":", "\n", "            ", "token_type_ids", "=", "tf", ".", "zeros", "(", "\n", "shape", "=", "[", "batch_size", ",", "seq_length", "]", ",", "dtype", "=", "tf", ".", "int32", ")", "\n", "\n", "", "with", "tf", ".", "variable_scope", "(", "scope", ",", "default_name", "=", "\"bert\"", ")", ":", "\n", "            ", "with", "tf", ".", "variable_scope", "(", "\"embeddings\"", ")", ":", "\n", "# Perform embedding lookup on the word ids.", "\n", "                ", "(", "self", ".", "embedding_output", ",", "self", ".", "embedding_table", "\n", ")", "=", "b_model", ".", "embedding_lookup", "(", "\n", "input_ids", "=", "input_ids", ",", "\n", "vocab_size", "=", "config", ".", "vocab_size", ",", "\n", "embedding_size", "=", "config", ".", "hidden_size", ",", "\n", "initializer_range", "=", "config", ".", "initializer_range", ",", "\n", "word_embedding_name", "=", "\"word_embeddings\"", ",", "\n", "use_one_hot_embeddings", "=", "use_one_hot_embeddings", ")", "\n", "\n", "self", ".", "embedding_output", "=", "b_model", ".", "embedding_postprocessor", "(", "\n", "input_tensor", "=", "self", ".", "embedding_output", ",", "\n", "use_token_type", "=", "True", ",", "\n", "token_type_ids", "=", "token_type_ids", ",", "\n", "token_type_vocab_size", "=", "config", ".", "type_vocab_size", ",", "\n", "token_type_embedding_name", "=", "\"token_type_embeddings\"", ",", "\n", "use_position_embeddings", "=", "True", ",", "\n", "position_embedding_name", "=", "\"position_embeddings\"", ",", "\n", "initializer_range", "=", "config", ".", "initializer_range", ",", "\n", "max_position_embeddings", "=", "config", ".", "max_position_embeddings", ",", "\n", "dropout_prob", "=", "config", ".", "hidden_dropout_prob", ")", "\n", "\n", "", "with", "tf", ".", "variable_scope", "(", "\"encoder\"", ")", ":", "\n", "                ", "self", ".", "all_encoder_layers", "=", "b_model", ".", "transformer_model", "(", "\n", "input_tensor", "=", "self", ".", "embedding_output", ",", "\n", "attention_mask", "=", "input_mask", ",", "\n", "hidden_size", "=", "config", ".", "hidden_size", ",", "\n", "num_hidden_layers", "=", "config", ".", "num_hidden_layers", ",", "\n", "num_attention_heads", "=", "config", ".", "num_attention_heads", ",", "\n", "intermediate_size", "=", "config", ".", "intermediate_size", ",", "\n", "intermediate_act_fn", "=", "b_model", ".", "get_activation", "(", "\n", "config", ".", "hidden_act", ")", ",", "\n", "hidden_dropout_prob", "=", "config", ".", "hidden_dropout_prob", ",", "\n", "attention_probs_dropout_prob", "=", "(", "\n", "config", ".", "attention_probs_dropout_prob", ")", ",", "\n", "initializer_range", "=", "config", ".", "initializer_range", ",", "\n", "do_return_all_layers", "=", "True", ")", "\n", "\n", "", "self", ".", "sequence_output", "=", "self", ".", "all_encoder_layers", "[", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.models.transformer.BertDecoderModel.get_sequence_output": [[995, 997], ["None"], "methods", ["None"], ["", "", "def", "get_sequence_output", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "sequence_output", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.models.transformer.BertDecoderModel.get_all_encoder_layers": [[998, 1000], ["None"], "methods", ["None"], ["", "def", "get_all_encoder_layers", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "all_encoder_layers", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.models.transformer.BertDecoderModel.get_embedding_output": [[1001, 1003], ["None"], "methods", ["None"], ["", "def", "get_embedding_output", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "embedding_output", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.models.transformer.BertDecoderModel.get_embedding_table": [[1004, 1006], ["None"], "methods", ["None"], ["", "def", "get_embedding_table", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "embedding_table", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.models.transformer.BertDecoder.__init__": [[1009, 1034], ["super().__init__", "tensorflow.keras.layers.Dropout", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Dense", "bert.BertConfig.from_json_file", "transformer.DecoderLayer", "range"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.models.drrn_modeling.PseudoSeq2SeqDRRN.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "num_layers", ",", "d_model", ",", "num_heads", ",", "dff", ",", "tgt_vocab_size", ",", "\n", "dropout_rate", "=", "0.1", ",", "with_pointer", "=", "False", ")", ":", "\n", "        ", "super", "(", "BertDecoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "d_model", "=", "d_model", "\n", "self", ".", "num_layers", "=", "num_layers", "\n", "self", ".", "tgt_vocab_size", "=", "tgt_vocab_size", "\n", "self", ".", "with_pointer", "=", "with_pointer", "\n", "\n", "self", ".", "dec_layers", "=", "[", "\n", "DecoderLayer", "(", "d_model", ",", "num_heads", ",", "dff", ",", "dropout_rate", ")", "\n", "for", "_", "in", "range", "(", "num_layers", ")", "]", "\n", "self", ".", "dropout", "=", "tf", ".", "keras", ".", "layers", ".", "Dropout", "(", "dropout_rate", ")", "\n", "self", ".", "logit_gen_layer", "=", "tf", ".", "keras", ".", "layers", ".", "Dense", "(", "units", "=", "1", ",", "use_bias", "=", "True", ")", "\n", "self", ".", "final_layer", "=", "tf", ".", "keras", ".", "layers", ".", "Dense", "(", "\n", "units", "=", "tgt_vocab_size", ",", "use_bias", "=", "True", ")", "\n", "\n", "self", ".", "bert_init_ckpt_dir", "=", "conventions", ".", "bert_ckpt_dir", "\n", "self", ".", "bert_config_file", "=", "\"{}/bert_config.json\"", ".", "format", "(", "\n", "self", ".", "bert_init_ckpt_dir", ")", "\n", "self", ".", "bert_ckpt_file", "=", "\"{}/bert_model.ckpt\"", ".", "format", "(", "\n", "self", ".", "bert_init_ckpt_dir", ")", "\n", "self", ".", "bert_config", "=", "b_model", ".", "BertConfig", ".", "from_json_file", "(", "\n", "self", ".", "bert_config_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.models.transformer.BertDecoder.call": [[1035, 1115], ["tensorflow.squeeze", "transformer.BertDecoderModel.get_sequence_output", "transformer.BertDecoder.dropout", "range", "transformer.BertDecoder.dropout", "transformer.BertDecoder.final_layer", "transformer.get_sparse_idx_for_copy", "tensorflow.nn.softmax", "tensorflow.log", "tensorflow.concat", "transformer.BertDecoder.dropout", "transformer.BertDecoder.logit_gen_layer", "tensorflow.variable_scope", "transformer.BertDecoderModel", "tensorflow.shape", "attention_logits.append", "tensorflow.reduce_logsumexp", "tensorflow.reduce_logsumexp", "tensorflow.reduce_logsumexp", "tensorflow.reduce_logsumexp", "tensorflow.exp", "tensorflow.map_fn", "tensorflow.concat", "tensorflow.stack", "tensorflow.zeros_like", "tensorflow.scatter_nd"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.models.transformer.BertDecoderModel.get_sequence_output", "home.repos.pwc.inspect_result.yinxusen_deepword.models.transformer.get_sparse_idx_for_copy", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.utils.softmax", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.tree_memory.TreeMemory.append"], ["", "def", "call", "(", "\n", "self", ",", "x", ",", "enc_x", ",", "enc_output", ",", "training", ",", "\n", "look_ahead_mask", ",", "padding_mask", ",", "copy_mask", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        decode with pointer\n        :param x: decoder input\n        :param enc_x: encoder input\n        :param enc_output: encoder encoded result\n        :param training:\n        :param look_ahead_mask:\n        :param padding_mask:\n        :param copy_mask: dense vector size |V| to mark all tokens that\n         skip copying with 1; otherwise, 0.\n        :return:\n        \"\"\"", "\n", "\n", "# remove the num_heads dimension", "\n", "bert_x_masks", "=", "tf", ".", "squeeze", "(", "1", "-", "look_ahead_mask", ",", "axis", "=", "1", ")", "\n", "with", "tf", ".", "variable_scope", "(", "\"bert-decoder\"", ",", "reuse", "=", "tf", ".", "AUTO_REUSE", ")", ":", "\n", "            ", "bert_model", "=", "BertDecoderModel", "(", "\n", "config", "=", "self", ".", "bert_config", ",", "is_training", "=", "training", ",", "\n", "input_ids", "=", "x", ",", "input_mask", "=", "bert_x_masks", ")", "\n", "", "x", "=", "bert_model", ".", "get_sequence_output", "(", ")", "\n", "\n", "# TODO: the initialization is out of here for circumvent while_loop", "\n", "# no bert init here", "\n", "\n", "seq_len", "=", "tf", ".", "shape", "(", "x", ")", "[", "1", "]", "\n", "attention_logits", "=", "[", "]", "\n", "raw_x", "=", "x", "\n", "x", "=", "self", ".", "dropout", "(", "x", ",", "training", "=", "training", ")", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "num_layers", ")", ":", "\n", "            ", "x", ",", "attn_logits", "=", "self", ".", "dec_layers", "[", "i", "]", "(", "\n", "x", ",", "enc_output", ",", "training", ",", "look_ahead_mask", ",", "padding_mask", ")", "\n", "attention_logits", ".", "append", "(", "attn_logits", ")", "\n", "\n", "", "x", "=", "self", ".", "dropout", "(", "x", ",", "training", "=", "training", ")", "\n", "gen_logits", "=", "self", ".", "final_layer", "(", "x", ")", "\n", "gen_logits", "=", "gen_logits", "-", "tf", ".", "reduce_logsumexp", "(", "\n", "gen_logits", ",", "axis", "=", "-", "1", ",", "keepdims", "=", "True", ")", "\n", "\n", "idx_tar_src", "=", "get_sparse_idx_for_copy", "(", "enc_x", ",", "target_seq_len", "=", "seq_len", ")", "\n", "# (batch_size, target_seq_len, src_seq_len)", "\n", "attn_weights", "=", "tf", ".", "nn", ".", "softmax", "(", "attention_logits", "[", "-", "1", "]", ")", "\n", "\n", "# [batch_size, target_seq_len, tgt_vocab_size]", "\n", "copy_logits", "=", "tf", ".", "log", "(", "tf", ".", "map_fn", "(", "\n", "fn", "=", "lambda", "y", ":", "tf", ".", "scatter_nd", "(", "\n", "y", "[", "0", "]", ",", "y", "[", "1", "]", ",", "[", "seq_len", ",", "self", ".", "tgt_vocab_size", "]", ")", ",", "\n", "elems", "=", "(", "idx_tar_src", ",", "attn_weights", ")", ",", "dtype", "=", "tf", ".", "float32", ")", "+", "1e-10", ")", "\n", "if", "copy_mask", "is", "not", "None", ":", "\n", "            ", "copy_logits", "+=", "(", "copy_mask", "*", "-", "1e9", ")", "[", "None", ",", "None", ",", ":", "]", "\n", "", "copy_logits", "=", "copy_logits", "-", "tf", ".", "reduce_logsumexp", "(", "\n", "copy_logits", ",", "axis", "=", "-", "1", ",", "keepdims", "=", "True", ")", "\n", "\n", "# the combined features is different with LSTM-PGN", "\n", "# LSTM-PGN uses three features, decoder input, decoder state, and", "\n", "# context vectors. but for transformer, the decoder state and context", "\n", "# vectors are highly correlated, so we use one of them.", "\n", "combined_features", "=", "tf", ".", "concat", "(", "[", "x", ",", "raw_x", "]", ",", "axis", "=", "-", "1", ")", "\n", "combined_features", "=", "self", ".", "dropout", "(", "combined_features", ",", "training", "=", "training", ")", "\n", "# (batch_size, dec_t, 1)", "\n", "logit_gen", "=", "self", ".", "logit_gen_layer", "(", "combined_features", ")", "\n", "# normalized logit of gen", "\n", "n_logit_gen", "=", "-", "tf", ".", "reduce_logsumexp", "(", "\n", "tf", ".", "concat", "(", "[", "tf", ".", "zeros_like", "(", "logit_gen", ")", ",", "-", "logit_gen", "]", ",", "axis", "=", "-", "1", ")", ",", "\n", "axis", "=", "-", "1", ",", "keepdims", "=", "True", ")", "\n", "n_logit_copy", "=", "-", "logit_gen", "+", "n_logit_gen", "\n", "\n", "if", "self", ".", "with_pointer", ":", "\n", "            ", "total_logits", "=", "tf", ".", "reduce_logsumexp", "(", "\n", "tf", ".", "stack", "(", "\n", "[", "n_logit_gen", "+", "gen_logits", ",", "n_logit_copy", "+", "copy_logits", "]", ",", "\n", "axis", "=", "-", "1", ")", ",", "\n", "axis", "=", "-", "1", ")", "\n", "", "else", ":", "\n", "            ", "total_logits", "=", "gen_logits", "\n", "\n", "", "return", "total_logits", ",", "tf", ".", "exp", "(", "n_logit_gen", ")", ",", "gen_logits", ",", "copy_logits", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.models.transformer.BertTransformer.__init__": [[1118, 1138], ["super().__init__", "transformer.BertDecoder", "tensorflow.keras.layers.Dropout", "bert.BertConfig.from_json_file"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.models.drrn_modeling.PseudoSeq2SeqDRRN.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "num_layers", ",", "d_model", ",", "num_heads", ",", "dff", ",", "\n", "target_vocab_size", ",", "dropout_rate", "=", "0.1", ",", "with_pointer", "=", "True", ",", "\n", "copy_mask", "=", "None", ")", ":", "\n", "        ", "super", "(", "BertTransformer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# self.decoder = Decoder(", "\n", "#     num_layers, d_model, num_heads, dff, target_vocab_size,", "\n", "#     dropout_rate, with_pointer)", "\n", "self", ".", "decoder", "=", "BertDecoder", "(", "\n", "num_layers", ",", "d_model", ",", "num_heads", ",", "dff", ",", "target_vocab_size", ",", "\n", "dropout_rate", ",", "with_pointer", ")", "\n", "self", ".", "bert_init_ckpt_dir", "=", "conventions", ".", "bert_ckpt_dir", "\n", "self", ".", "bert_config_file", "=", "\"{}/bert_config.json\"", ".", "format", "(", "\n", "self", ".", "bert_init_ckpt_dir", ")", "\n", "self", ".", "bert_ckpt_file", "=", "\"{}/bert_model.ckpt\"", ".", "format", "(", "\n", "self", ".", "bert_init_ckpt_dir", ")", "\n", "self", ".", "dropout", "=", "tf", ".", "keras", ".", "layers", ".", "Dropout", "(", "rate", "=", "0.4", ")", "\n", "self", ".", "bert_config", "=", "b_model", ".", "BertConfig", ".", "from_json_file", "(", "\n", "self", ".", "bert_config_file", ")", "\n", "self", ".", "copy_mask", "=", "copy_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.models.transformer.BertTransformer.call": [[1139, 1168], ["transformer.create_padding_mask", "tensorflow.sequence_mask", "bert.BertModel.get_sequence_output", "transformer.create_decode_masks", "transformer.BertTransformer.decoder", "tensorflow.train.init_from_checkpoint", "tensorflow.train.init_from_checkpoint", "tensorflow.variable_scope", "bert.BertModel"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.models.transformer.create_padding_mask", "home.repos.pwc.inspect_result.yinxusen_deepword.models.transformer.BertDecoderModel.get_sequence_output", "home.repos.pwc.inspect_result.yinxusen_deepword.models.transformer.create_decode_masks"], ["", "def", "call", "(", "self", ",", "inp", ",", "inp_len", ",", "inp_type_ids", ",", "tar", ",", "training", ")", ":", "\n", "        ", "enc_padding_mask", "=", "create_padding_mask", "(", "inp", ")", "\n", "dec_padding_mask", "=", "enc_padding_mask", "\n", "\n", "# bert inp mask is just the reverse of enc padding mask.", "\n", "bert_inp_masks", "=", "tf", ".", "sequence_mask", "(", "inp_len", ",", "dtype", "=", "tf", ".", "int32", ")", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "\"bert-encoder\"", ",", "reuse", "=", "tf", ".", "AUTO_REUSE", ")", ":", "\n", "            ", "bert_model", "=", "b_model", ".", "BertModel", "(", "\n", "config", "=", "self", ".", "bert_config", ",", "is_training", "=", "training", ",", "\n", "input_ids", "=", "inp", ",", "input_mask", "=", "bert_inp_masks", ",", "\n", "token_type_ids", "=", "inp_type_ids", ")", "\n", "", "enc_output", "=", "bert_model", ".", "get_sequence_output", "(", ")", "\n", "\n", "look_ahead_mask", "=", "create_decode_masks", "(", "tar", ")", "\n", "final_output", ",", "p_gen", ",", "gen_logits", ",", "copy_logits", "=", "self", ".", "decoder", "(", "\n", "tar", ",", "inp", ",", "enc_output", ",", "training", ",", "look_ahead_mask", ",", "dec_padding_mask", ",", "\n", "self", ".", "copy_mask", ")", "\n", "\n", "# initialize bert from checkpoint file", "\n", "tf", ".", "train", ".", "init_from_checkpoint", "(", "\n", "self", ".", "bert_ckpt_file", ",", "\n", "assignment_map", "=", "{", "\"bert/\"", ":", "\"bert-encoder/bert/\"", "}", ")", "\n", "\n", "tf", ".", "train", ".", "init_from_checkpoint", "(", "\n", "self", ".", "bert_ckpt_file", ",", "\n", "assignment_map", "=", "{", "\"bert/\"", ":", "\"bert-decoder/bert/\"", "}", ")", "\n", "\n", "return", "final_output", ",", "p_gen", ",", "gen_logits", ",", "copy_logits", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.models.transformer.BertTransformer.decode": [[1169, 1188], ["tensorflow.sequence_mask", "bert.BertModel.get_sequence_output", "transformer.sequential_decoding", "tensorflow.variable_scope", "bert.BertModel"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.models.transformer.BertDecoderModel.get_sequence_output", "home.repos.pwc.inspect_result.yinxusen_deepword.models.transformer.sequential_decoding"], ["", "def", "decode", "(", "\n", "self", ",", "enc_x", ",", "enc_x_len", ",", "enc_x_type_ids", ",", "\n", "training", ",", "max_tar_len", ",", "sos_id", ",", "eos_id", ",", "padding_id", ",", "\n", "use_greedy", "=", "True", ",", "beam_size", "=", "1", ",", "temperature", "=", "1.", ")", ":", "\n", "# ======= encoding input sentences =======", "\n", "# bert inp mask is just the reverse of enc padding mask.", "\n", "        ", "bert_inp_masks", "=", "tf", ".", "sequence_mask", "(", "enc_x_len", ",", "dtype", "=", "tf", ".", "int32", ")", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "\"bert-encoder\"", ",", "reuse", "=", "tf", ".", "AUTO_REUSE", ")", ":", "\n", "            ", "bert_model", "=", "b_model", ".", "BertModel", "(", "\n", "config", "=", "self", ".", "bert_config", ",", "is_training", "=", "training", ",", "\n", "input_ids", "=", "enc_x", ",", "input_mask", "=", "bert_inp_masks", ",", "\n", "token_type_ids", "=", "enc_x_type_ids", ")", "\n", "", "enc_output", "=", "bert_model", ".", "get_sequence_output", "(", ")", "\n", "# ======= end of encoding ======", "\n", "return", "sequential_decoding", "(", "\n", "self", ".", "decoder", ",", "self", ".", "copy_mask", ",", "enc_x", ",", "enc_output", ",", "training", ",", "\n", "max_tar_len", ",", "sos_id", ",", "eos_id", ",", "padding_id", ",", "\n", "use_greedy", ",", "beam_size", ",", "temperature", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.yinxusen_deepword.models.transformer.create_padding_mask": [[15, 34], ["tensorflow.cast", "tensorflow.math.equal"], "function", ["None"], ["def", "create_padding_mask", "(", "seq", ")", ":", "\n", "    ", "\"\"\"\n    Padding value should be 0.\n    This mask contains one dimension for num_heads, i.e.\n    (batch_size, <broadcast to num_heads>, <broadcast to seq_len_q>, seq_len_k)\n\n    Args:\n        seq: (batch_size, seq_len_k)\n\n    Returns:\n        padding mask, paddings is set to True, others are False\n        shape: (batch_size, 1, 1, seq_len_k)\n    \"\"\"", "\n", "seq", "=", "tf", ".", "cast", "(", "tf", ".", "math", ".", "equal", "(", "seq", ",", "0", ")", ",", "tf", ".", "float32", ")", "\n", "\n", "# add extra dimensions to add the padding", "\n", "# to the attention logits.", "\n", "# (batch_size, 1, 1, seq_len)", "\n", "return", "seq", "[", ":", ",", "tf", ".", "newaxis", ",", "tf", ".", "newaxis", ",", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.models.transformer.create_look_ahead_mask": [[36, 56], ["tensorflow.linalg.band_part", "tensorflow.ones"], "function", ["None"], ["", "def", "create_look_ahead_mask", "(", "size", ":", "int", ")", ":", "\n", "    ", "\"\"\"\n    create look ahead mask for decoding\n\n    At every decoding step i, only t_0, ..., t_i can be accessed by the model,\n    while t_{i+1}, ..., t_n should be masked out.\n\n    Args:\n        size: decoding output size\n\n    Returns:\n        look ahead mask, True means masked out.\n\n    Examples:\n        >>> create_look_ahead_mask(3)\n        array([[0., 1., 1.],\n               [0., 0., 1.],\n               [0., 0., 0.]], dtype=float32)\n    \"\"\"", "\n", "return", "1", "-", "tf", ".", "linalg", ".", "band_part", "(", "tf", ".", "ones", "(", "(", "size", ",", "size", ")", ")", ",", "-", "1", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.models.transformer.create_decode_masks": [[58, 100], ["transformer.create_look_ahead_mask", "transformer.create_padding_mask", "tensorflow.maximum", "tensorflow.shape"], "function", ["home.repos.pwc.inspect_result.yinxusen_deepword.models.transformer.create_look_ahead_mask", "home.repos.pwc.inspect_result.yinxusen_deepword.models.transformer.create_padding_mask"], ["", "def", "create_decode_masks", "(", "tar", ")", ":", "\n", "    ", "\"\"\"\n    Create masking for decoding\n\n    This masking combines the look ahead mask and target sentence padding mask.\n\n    1. We create look ahead mask for each sentence;\n    2. We combine the sentence padding mask with the look ahead mask, e.g. when\n       the look ahead mask says \"0\" for a token, while the sentence padding mask\n       says \"1\" for the same token because of the token is a padding, then the\n       final mask for this token is \"1\".\n\n    Args:\n        tar: target sentence, shape: (batch_size, seq_len_k)\n\n    Returns:\n        a combined mask of look ahead mask and padding mask, shape: (batch_size,\n        1, seq_len_k, seq_len_k)\n\n    Examples:\n        >>> tar_src = [[1,2,3,4,0,0], [1,3,0,0,0,0]]\n        >>> create_decode_masks(tar_src)\n        array([[[[0., 1., 1., 1., 1., 1.],\n                 [0., 0., 1., 1., 1., 1.],\n                 [0., 0., 0., 1., 1., 1.],\n                 [0., 0., 0., 0., 1., 1.],\n                 [0., 0., 0., 0., 1., 1.],\n                 [0., 0., 0., 0., 1., 1.]]],\n               [[[0., 1., 1., 1., 1., 1.],\n                 [0., 0., 1., 1., 1., 1.],\n                 [0., 0., 1., 1., 1., 1.],\n                 [0., 0., 1., 1., 1., 1.],\n                 [0., 0., 1., 1., 1., 1.],\n                 [0., 0., 1., 1., 1., 1.]]]], dtype=float32)\n    \"\"\"", "\n", "# Used in the 1st attention block in the decoder.", "\n", "# It is used to pad and mask future tokens in the input received by", "\n", "# the decoder.", "\n", "look_ahead_mask", "=", "create_look_ahead_mask", "(", "tf", ".", "shape", "(", "tar", ")", "[", "1", "]", ")", "\n", "dec_target_padding_mask", "=", "create_padding_mask", "(", "tar", ")", "\n", "combined_mask", "=", "tf", ".", "maximum", "(", "dec_target_padding_mask", ",", "look_ahead_mask", ")", "\n", "return", "combined_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.models.transformer.create_pseudo_decode_masks": [[102, 111], ["transformer.create_padding_mask"], "function", ["home.repos.pwc.inspect_result.yinxusen_deepword.models.transformer.create_padding_mask"], ["", "def", "create_pseudo_decode_masks", "(", "tar", ")", ":", "\n", "    ", "\"\"\"\n    Create pseudo masking for decoding\n\n    With this mask, we treat the decoder as a normal encoder, so this is not\n    suitable for actual generation.\n    \"\"\"", "\n", "dec_target_padding_mask", "=", "create_padding_mask", "(", "tar", ")", "\n", "return", "dec_target_padding_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.models.transformer.scaled_dot_product_attention": [[113, 153], ["tensorflow.matmul", "tensorflow.cast", "tensorflow.nn.softmax", "tensorflow.matmul", "tensorflow.math.sqrt", "tensorflow.shape"], "function", ["home.repos.pwc.inspect_result.yinxusen_deepword.deepword.utils.softmax"], ["", "def", "scaled_dot_product_attention", "(", "q", ",", "k", ",", "v", ",", "mask", ")", ":", "\n", "    ", "\"\"\"\n    Calculate the attention weights.\n    q, k, v must have matching leading dimensions.\n    k, v must have matching penultimate dimension, i.e.: seq_len_k = seq_len_v.\n    The mask has different shapes depending on its type(padding or look ahead)\n    but it must be broadcastable for addition.\n\n    Args:\n      q: query shape == (..., seq_len_q, depth)\n      k: key shape == (..., seq_len_k, depth)\n      v: value shape == (..., seq_len_v, depth_v)\n      mask: Float tensor with shape broadcastable\n            to (..., seq_len_q, seq_len_k). Defaults to None.\n\n    Notice that mask must have the same dimensions as q, k, v.\n      e.g. if q, k, v are (batch_size, num_heads, seq_len, depth), then the mask\n      should be also (batch_size, num_heads, seq_len, depth).\n      However, if q, k, v are (batch_size, seq_len, depth), then the mask should\n      also not contain num_heads.\n\n    Returns:\n      output (a.k.a. context vectors), scaled_attention_logits\n    \"\"\"", "\n", "# (..., seq_len_q, seq_len_k)", "\n", "matmul_qk", "=", "tf", ".", "matmul", "(", "q", ",", "k", ",", "transpose_b", "=", "True", ")", "\n", "\n", "# scale matmul_qk", "\n", "dk", "=", "tf", ".", "cast", "(", "tf", ".", "shape", "(", "k", ")", "[", "-", "1", "]", ",", "tf", ".", "float32", ")", "\n", "scaled_attention_logits", "=", "matmul_qk", "/", "tf", ".", "math", ".", "sqrt", "(", "dk", ")", "\n", "\n", "# add the mask to the scaled tensor.", "\n", "if", "mask", "is", "not", "None", ":", "\n", "        ", "scaled_attention_logits", "+=", "(", "mask", "*", "-", "1e9", ")", "\n", "\n", "# (..., seq_len_q, seq_len_k)", "\n", "", "attention_weights", "=", "tf", ".", "nn", ".", "softmax", "(", "scaled_attention_logits", ",", "axis", "=", "-", "1", ")", "\n", "# (..., seq_len_q, depth_v)", "\n", "output", "=", "tf", ".", "matmul", "(", "attention_weights", ",", "v", ")", "\n", "return", "output", ",", "scaled_attention_logits", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.models.transformer.point_wise_feed_forward_network": [[155, 171], ["tensorflow.keras.Sequential", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Dense"], "function", ["None"], ["", "def", "point_wise_feed_forward_network", "(", "d_model", ",", "dff", ")", ":", "\n", "    ", "\"\"\"\n    Two dense layers, one with activation, the second without activation.\n\n    Args:\n        d_model: model size\n        dff: intermediate size\n\n    Returns:\n        FFN(x)\n    \"\"\"", "\n", "return", "tf", ".", "keras", ".", "Sequential", "(", "[", "\n", "# (batch_size, seq_len, dff)", "\n", "tf", ".", "keras", ".", "layers", ".", "Dense", "(", "dff", ",", "activation", "=", "'relu'", ")", ",", "\n", "# (batch_size, seq_len, d_model)", "\n", "tf", ".", "keras", ".", "layers", ".", "Dense", "(", "d_model", ")", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.models.transformer._get_sparse_idx_tar_for_copy": [[341, 360], ["tensorflow.range", "tensorflow.expand_dims", "tensorflow.tile", "tensorflow.expand_dims", "tensorflow.tile"], "function", ["None"], ["", "", "def", "_get_sparse_idx_tar_for_copy", "(", "\n", "batch_size", ":", "int", ",", "src_seq_len", ":", "int", ",", "target_seq_len", ":", "int", ")", ":", "\n", "# (target_seq_len)", "\n", "# [0, 1, 2, ..., target_seq_len-1]", "\n", "    ", "idx_tar", "=", "tf", ".", "range", "(", "0", ",", "limit", "=", "target_seq_len", ")", "\n", "idx_tar", "=", "tf", ".", "expand_dims", "(", "idx_tar", ",", "axis", "=", "-", "1", ")", "\n", "# (target_seq_len, src_seq_len)", "\n", "idx_tar", "=", "tf", ".", "tile", "(", "idx_tar", ",", "[", "1", ",", "src_seq_len", "]", ")", "\n", "idx_tar", "=", "tf", ".", "expand_dims", "(", "idx_tar", ",", "axis", "=", "0", ")", "\n", "# (batch_size, target_seq_len, src_seq_len)", "\n", "# e.g. (2, 3, 2), we have", "\n", "# [[[0, 0],", "\n", "#   [1, 1],", "\n", "#   [2, 2]],", "\n", "#  [[0, 0],", "\n", "#   [1, 1],", "\n", "#   [2, 2]]]", "\n", "idx_tar", "=", "tf", ".", "tile", "(", "idx_tar", ",", "[", "batch_size", ",", "1", ",", "1", "]", ")", "\n", "return", "idx_tar", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.models.transformer._get_sparse_idx_src_for_copy": [[362, 373], ["tensorflow.expand_dims", "tensorflow.tile"], "function", ["None"], ["", "def", "_get_sparse_idx_src_for_copy", "(", "src", ",", "target_seq_len", ":", "int", ")", ":", "\n", "# e.g. enc_x: [[a, a], [b, c]], we have", "\n", "# [[[a, a],", "\n", "#   [a, a],", "\n", "#   [a, a]],", "\n", "#  [[b, c],", "\n", "#   [b, c],", "\n", "#   [b, c]]]", "\n", "    ", "idx_src", "=", "tf", ".", "expand_dims", "(", "src", ",", "axis", "=", "1", ")", "\n", "idx_src", "=", "tf", ".", "tile", "(", "idx_src", ",", "[", "1", ",", "target_seq_len", ",", "1", "]", ")", "\n", "return", "idx_src", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.models.transformer.get_sparse_idx_for_copy": [[375, 431], ["transformer._get_sparse_idx_src_for_copy", "transformer._get_sparse_idx_tar_for_copy", "tensorflow.stack", "tensorflow.shape", "tensorflow.shape"], "function", ["home.repos.pwc.inspect_result.yinxusen_deepword.models.transformer._get_sparse_idx_src_for_copy", "home.repos.pwc.inspect_result.yinxusen_deepword.models.transformer._get_sparse_idx_tar_for_copy"], ["", "def", "get_sparse_idx_for_copy", "(", "src", ",", "target_seq_len", ":", "int", ")", ":", "\n", "    ", "\"\"\"\n    Create sparse index from source sentence for copying into decoder using\n    the `tf.scatter_nd` method.\n\n    Considering the following source sentence: \"a, b, a, c\"; turn it into\n    indices: [0, 1, 0, 2], and they have attention weights\n    attn = [a0, a1, a2, a3].\n\n    Now we want to decode a sentence with 3 tokens, for each generated token, we\n    want to collect attention weights from the source sentence, and mix with\n    the logits to generate the current token.\n\n    I.e. for decoded sentence position i, we have\n    logits(i) = [0.1, 0.2, 0.3, 0.5] for all possible tokens a, b, c, d.\n    Then we want to sum the attention weights of two-0s, one-1, and one-2 into\n    the logits(i) according to a generation weight p(i), i.e. total logits =\n    logits(i) * p(i) + [a0 + a2, a1, a3, 0] * (1 - p(i)).\n\n    The goal is to create a dense vector of vocabulary size, and copy attention\n    weights from source sentence to the dense vector.\n\n    We create a inverse index to do so. For target token i, we need to collect\n    [(0, a0), (1, a1), (0, a2), (2, a3)] to construct the vector.\n\n    Args:\n        src: source sentence\n        target_seq_len: target sequence len\n\n    Returns:\n        sparse index to construct attention weight matrix for a batch\n\n    Examples:\n        >>> get_sparse_idx_for_copy(src=[[0, 1, 0, 2]], target_seq_len=3)\n        array([[[[0, 0],\n                 [0, 1],\n                 [0, 0],\n                 [0, 2]],\n                [[1, 0],\n                 [1, 1],\n                 [1, 0],\n                 [1, 2]],\n                [[2, 0],\n                 [2, 1],\n                 [2, 0],\n                 [2, 2]]]], dtype=int32)\n        shape: (1, 3, 4, 2)  # batch_size, target sentence len, source sentence\n        len, 2D matrix indices\n    \"\"\"", "\n", "batch_size", "=", "tf", ".", "shape", "(", "src", ")", "[", "0", "]", "\n", "src_seq_len", "=", "tf", ".", "shape", "(", "src", ")", "[", "1", "]", "\n", "idx_src", "=", "_get_sparse_idx_src_for_copy", "(", "src", ",", "target_seq_len", ")", "\n", "idx_tar", "=", "_get_sparse_idx_tar_for_copy", "(", "\n", "batch_size", ",", "src_seq_len", ",", "target_seq_len", ")", "\n", "idx_tar_src", "=", "tf", ".", "stack", "(", "[", "idx_tar", ",", "idx_src", "]", ",", "axis", "=", "3", ")", "\n", "return", "idx_tar_src", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.models.transformer.token_logit_masking": [[533, 547], ["tensorflow.concat", "tensorflow.fill", "tensorflow.constant", "tensorflow.fill"], "function", ["None"], ["", "", "def", "token_logit_masking", "(", "token_id", ":", "int", ",", "vocab_size", ":", "int", ")", ":", "\n", "    ", "\"\"\"\n    Generate logits to choose the token_id. e.g. with vocab_size = 10,\n    token_id = 0, we have\n    [  0., -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf]\n    plus this mask with normal logits, only token_id=0 can be chose\n    \"\"\"", "\n", "assert", "0", "<=", "token_id", "<", "vocab_size", "\n", "mask", "=", "tf", ".", "concat", "(", "\n", "[", "tf", ".", "fill", "(", "[", "token_id", "]", ",", "-", "1e9", ")", ",", "\n", "tf", ".", "constant", "(", "[", "0.", "]", ",", "dtype", "=", "tf", ".", "float32", ")", ",", "\n", "tf", ".", "fill", "(", "[", "vocab_size", "-", "1", "-", "token_id", "]", ",", "-", "1e9", ")", "]", ",", "\n", "axis", "=", "0", ")", "\n", "return", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.models.transformer.categorical_without_replacement": [[549, 569], ["tensorflow.nn.top_k", "tensorflow.log", "tensorflow.log", "tensorflow.random_uniform", "tensorflow.shape"], "function", ["None"], ["", "def", "categorical_without_replacement", "(", "logits", ",", "k", ":", "int", ")", ":", "\n", "    ", "\"\"\"\n    Courtesy of https://github.com/tensorflow/tensorflow/issues/\\\n    9260#issuecomment-437875125\n    also cite here:\n    @misc{vieira2014gumbel,\n        title = {Gumbel-max trick and weighted reservoir sampling},\n        author = {Tim Vieira},\n        url = {http://timvieira.github.io/blog/post/2014/08/01/\\\n        gumbel-max-trick-and-weighted-reservoir-sampling/},\n        year = {2014}\n    }\n    Notice that the logits represent unnormalized log probabilities,\n    in the citation above, there is no need to normalized them first to add\n    the Gumbel random variant, which surprises me! since I thought it should\n    be `logits - tf.reduce_logsumexp(logits) + z`\n    \"\"\"", "\n", "z", "=", "-", "tf", ".", "log", "(", "-", "tf", ".", "log", "(", "tf", ".", "random_uniform", "(", "tf", ".", "shape", "(", "logits", ")", ",", "0", ",", "1", ")", ")", ")", "\n", "_", ",", "indices", "=", "tf", ".", "nn", ".", "top_k", "(", "logits", "+", "z", ",", "k", ")", "\n", "return", "indices", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.models.transformer.categorical_with_replacement": [[571, 573], ["tensorflow.random.categorical"], "function", ["None"], ["", "def", "categorical_with_replacement", "(", "logits", ",", "k", ":", "int", ")", ":", "\n", "    ", "return", "tf", ".", "random", ".", "categorical", "(", "logits", ",", "num_samples", "=", "k", ",", "dtype", "=", "tf", ".", "int32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.models.transformer.nucleus_renormalization": [[575, 623], ["tensorflow.argsort", "tensorflow.tile", "tensorflow.stack", "tensorflow.gather_nd", "tensorflow.exp", "tensorflow.math.cumsum", "tensorflow.greater", "tensorflow.concat", "tensorflow.tile", "tensorflow.argsort", "tensorflow.stack", "tensorflow.gather_nd", "tensorflow.stack", "tensorflow.gather_nd", "tensorflow.where", "tensorflow.shape", "tensorflow.shape", "tensorflow.reduce_logsumexp", "tensorflow.reduce_logsumexp", "tensorflow.range", "tensorflow.fill", "tensorflow.range", "tensorflow.zeros_like"], "function", ["None"], ["", "def", "nucleus_renormalization", "(", "logits", ",", "p", "=", "0.95", ")", ":", "\n", "    ", "\"\"\"\n    Refer to [Holtzman et al., 2020] for nucleus sampling\n\n    Args:\n        logits: last-dimension logits of vocabulary V;\n         2D array, [batch, V] or [batch*beam, V]\n        p: the cumulative probability bound, default 0.95;\n\n    Returns:\n        normalized nucleus logits\n    \"\"\"", "\n", "batch_size", "=", "tf", ".", "shape", "(", "logits", ")", "[", "0", "]", "\n", "vocab_size", "=", "tf", ".", "shape", "(", "logits", ")", "[", "1", "]", "\n", "\n", "# sort logits", "\n", "normalized_logits", "=", "logits", "-", "tf", ".", "reduce_logsumexp", "(", "\n", "logits", ",", "axis", "=", "-", "1", ",", "keep_dims", "=", "True", ")", "\n", "sorted_logits_idx", "=", "tf", ".", "argsort", "(", "\n", "normalized_logits", ",", "axis", "=", "-", "1", ",", "direction", "=", "\"DESCENDING\"", ")", "\n", "idx_dim0", "=", "tf", ".", "tile", "(", "tf", ".", "range", "(", "batch_size", ")", "[", ":", ",", "None", "]", ",", "[", "1", ",", "vocab_size", "]", ")", "\n", "idx_2d", "=", "tf", ".", "stack", "(", "[", "idx_dim0", ",", "sorted_logits_idx", "]", ",", "axis", "=", "-", "1", ")", "\n", "sorted_logits", "=", "tf", ".", "gather_nd", "(", "normalized_logits", ",", "idx_2d", ")", "\n", "\n", "# turn sorted logits into mask, true: need to remove, false: nucleus", "\n", "sorted_ps", "=", "tf", ".", "exp", "(", "sorted_logits", ")", "\n", "cum_sum_ps", "=", "tf", ".", "math", ".", "cumsum", "(", "sorted_ps", ",", "axis", "=", "-", "1", ")", "\n", "ps_mask", "=", "tf", ".", "greater", "(", "cum_sum_ps", ",", "p", ")", "\n", "# make sure at least the first vocab is valid", "\n", "ps_mask", "=", "tf", ".", "concat", "(", "\n", "[", "tf", ".", "fill", "(", "[", "batch_size", ",", "1", "]", ",", "False", ")", ",", "ps_mask", "[", ":", ",", "1", ":", "]", "]", ",", "axis", "=", "-", "1", ")", "\n", "\n", "# turn mask back into original index before sorting", "\n", "original_idx", "=", "tf", ".", "tile", "(", "tf", ".", "range", "(", "vocab_size", ")", "[", "None", ",", ":", "]", ",", "[", "batch_size", ",", "1", "]", ")", "\n", "sorted_idx_idx", "=", "tf", ".", "argsort", "(", "\n", "sorted_logits_idx", ",", "axis", "=", "-", "1", ",", "direction", "=", "\"ASCENDING\"", ")", "\n", "revert_idx_2d", "=", "tf", ".", "stack", "(", "[", "idx_dim0", ",", "sorted_idx_idx", "]", ",", "axis", "=", "-", "1", ")", "\n", "original_idx", "=", "tf", ".", "gather_nd", "(", "original_idx", ",", "revert_idx_2d", ")", "\n", "mask_idx_2d", "=", "tf", ".", "stack", "(", "[", "idx_dim0", ",", "original_idx", "]", ",", "axis", "=", "-", "1", ")", "\n", "original_mask", "=", "tf", ".", "gather_nd", "(", "ps_mask", ",", "mask_idx_2d", ")", "\n", "\n", "# create and normalize nucleus", "\n", "nucleus", "=", "tf", ".", "where", "(", "\n", "original_mask", ",", "x", "=", "tf", ".", "zeros_like", "(", "normalized_logits", ")", "+", "-", "1e9", ",", "\n", "y", "=", "normalized_logits", ")", "\n", "normalized_nucleus", "=", "nucleus", "-", "tf", ".", "reduce_logsumexp", "(", "\n", "nucleus", ",", "axis", "=", "-", "1", ",", "keep_dims", "=", "True", ")", "\n", "return", "normalized_nucleus", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.models.transformer._dec_beam_search": [[625, 645], ["tensorflow.reshape", "tensorflow.math.top_k", "tensorflow.tile", "tensorflow.stack", "tensorflow.reshape", "tensorflow.div", "tensorflow.gather_nd", "tensorflow.dtypes.cast", "tensorflow.range", "tensorflow.reshape"], "function", ["None"], ["", "def", "_dec_beam_search", "(", "\n", "logits", ",", "inc_sum_logits", ",", "inc_valid_len", ",", "batch_size", ",", "beam_tgt_len", ",", "\n", "beam_size", ")", ":", "\n", "    ", "\"\"\"\n    perform one-step beam search, given token logits, return selected ids\n    accumulated logits after the selection.\n    Choose top K from p(y_1, ..., y_{i-1}, y_i | X) at each step.\n    \"\"\"", "\n", "cond_logits", "=", "logits", "+", "inc_sum_logits", "\n", "cond_ppl", "=", "tf", ".", "reshape", "(", "\n", "tf", ".", "div", "(", "cond_logits", ",", "tf", ".", "dtypes", ".", "cast", "(", "inc_valid_len", ",", "dtype", "=", "tf", ".", "float32", ")", ")", ",", "\n", "[", "batch_size", ",", "-", "1", "]", ")", "\n", "_", ",", "predicted_id", "=", "tf", ".", "math", ".", "top_k", "(", "\n", "input", "=", "cond_ppl", "[", ":", ",", ":", "beam_tgt_len", "]", ",", "k", "=", "beam_size", ")", "\n", "idx_dim0", "=", "tf", ".", "tile", "(", "tf", ".", "range", "(", "batch_size", ")", "[", ":", ",", "None", "]", ",", "[", "1", ",", "beam_size", "]", ")", "\n", "idx_2d", "=", "tf", ".", "stack", "(", "[", "idx_dim0", ",", "predicted_id", "]", ",", "axis", "=", "-", "1", ")", "\n", "inc_sum_logits", "=", "tf", ".", "reshape", "(", "\n", "tf", ".", "gather_nd", "(", "tf", ".", "reshape", "(", "cond_logits", ",", "[", "batch_size", ",", "-", "1", "]", ")", ",", "idx_2d", ")", ",", "\n", "[", "batch_size", "*", "beam_size", ",", "1", "]", ")", "\n", "return", "predicted_id", ",", "inc_sum_logits", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.models.transformer._dec_nucleus_sampling": [[647, 682], ["transformer.nucleus_renormalization", "transformer.categorical_with_replacement", "tensorflow.reshape", "tensorflow.tile", "tensorflow.stack", "tensorflow.reshape", "tensorflow.shape", "tensorflow.gather_nd", "tensorflow.range", "tensorflow.range", "tensorflow.reshape"], "function", ["home.repos.pwc.inspect_result.yinxusen_deepword.models.transformer.nucleus_renormalization", "home.repos.pwc.inspect_result.yinxusen_deepword.models.transformer.categorical_with_replacement"], ["", "def", "_dec_nucleus_sampling", "(", "\n", "logits", ",", "inc_sum_logits", ",", "batch_size", ",", "beam_tgt_len", ",", "beam_size", ",", "\n", "temperature", ")", ":", "\n", "    ", "\"\"\"\n    perform one-step nucleus sampling, given token logits, return selected ids\n    and accumulated logits after the selection.\n    Sampling ~ Nucleus( p(y_i | y_1, ..., y_{i-1}, X) )\n\n    Note: this is not real beam search, this function equals to sampling\n    a sentence *beam_size* times.\n    Sampling with replacement at each step. Note: It is possible to select\n    tokens that are filtered out if using sampling w/o replacement.\n    E.g. when beam_size = 10, while the best 9 tokens have already large\n    enough to build the nucleus.\n    \"\"\"", "\n", "\n", "# logits: [batch_size * beam_size, vocab_size]", "\n", "vocab_size", "=", "tf", ".", "shape", "(", "logits", ")", "[", "1", "]", "\n", "nucleus_logits", "=", "nucleus_renormalization", "(", "logits", "/", "temperature", ")", "\n", "# sample one token in each beam", "\n", "# since we don't do actual beam search", "\n", "# the predicted_id should add cumulative beam_id * vocab_size", "\n", "# to match other beam-generated predicted_id.", "\n", "predicted_id", "=", "categorical_with_replacement", "(", "logits", "=", "nucleus_logits", ",", "k", "=", "1", ")", "\n", "predicted_id", "=", "tf", ".", "reshape", "(", "predicted_id", ",", "[", "batch_size", ",", "beam_size", "]", ")", "\n", "cum_beam_id", "=", "tf", ".", "range", "(", "beam_size", ")", "[", "None", ",", ":", "]", "*", "vocab_size", "\n", "predicted_id", "=", "predicted_id", "+", "cum_beam_id", "\n", "\n", "cond_logits", "=", "nucleus_logits", "+", "inc_sum_logits", "\n", "idx_dim0", "=", "tf", ".", "tile", "(", "tf", ".", "range", "(", "batch_size", ")", "[", ":", ",", "None", "]", ",", "[", "1", ",", "beam_size", "]", ")", "\n", "idx_2d", "=", "tf", ".", "stack", "(", "[", "idx_dim0", ",", "predicted_id", "]", ",", "axis", "=", "-", "1", ")", "\n", "inc_sum_logits", "=", "tf", ".", "reshape", "(", "\n", "tf", ".", "gather_nd", "(", "tf", ".", "reshape", "(", "cond_logits", ",", "[", "batch_size", ",", "-", "1", "]", ")", ",", "idx_2d", ")", ",", "\n", "[", "batch_size", "*", "beam_size", ",", "1", "]", ")", "\n", "return", "predicted_id", ",", "inc_sum_logits", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.models.transformer._dec_sampling": [[684, 705], ["tensorflow.div", "transformer.categorical_without_replacement", "tensorflow.tile", "tensorflow.stack", "tensorflow.reshape", "tensorflow.reduce_logsumexp", "tensorflow.gather_nd", "tensorflow.range", "tensorflow.reshape", "tensorflow.reshape"], "function", ["home.repos.pwc.inspect_result.yinxusen_deepword.models.transformer.categorical_without_replacement"], ["", "def", "_dec_sampling", "(", "\n", "logits", ",", "inc_sum_logits", ",", "batch_size", ",", "beam_tgt_len", ",", "beam_size", ",", "\n", "temperature", ")", ":", "\n", "    ", "\"\"\"\n    perform one-step sampling, given token logits, return selected ids\n    and accumulated logits after the selection.\n    Sampling ~ p(y_i | y_1, ..., y_{i-1}, X)\n    Sampling without replacement at each step\n    \"\"\"", "\n", "logits", "=", "tf", ".", "div", "(", "logits", ",", "temperature", ")", "\n", "logits", "=", "logits", "-", "tf", ".", "reduce_logsumexp", "(", "logits", ",", "axis", "=", "-", "1", ",", "keep_dims", "=", "True", ")", "\n", "predicted_id", "=", "categorical_without_replacement", "(", "\n", "logits", "=", "tf", ".", "reshape", "(", "logits", ",", "[", "batch_size", ",", "-", "1", "]", ")", "[", ":", ",", ":", "beam_tgt_len", "]", ",", "\n", "k", "=", "beam_size", ")", "\n", "cond_logits", "=", "logits", "+", "inc_sum_logits", "\n", "idx_dim0", "=", "tf", ".", "tile", "(", "tf", ".", "range", "(", "batch_size", ")", "[", ":", ",", "None", "]", ",", "[", "1", ",", "beam_size", "]", ")", "\n", "idx_2d", "=", "tf", ".", "stack", "(", "[", "idx_dim0", ",", "predicted_id", "]", ",", "axis", "=", "-", "1", ")", "\n", "inc_sum_logits", "=", "tf", ".", "reshape", "(", "\n", "tf", ".", "gather_nd", "(", "tf", ".", "reshape", "(", "cond_logits", ",", "[", "batch_size", ",", "-", "1", "]", ")", ",", "idx_2d", ")", ",", "\n", "[", "batch_size", "*", "beam_size", ",", "1", "]", ")", "\n", "return", "predicted_id", ",", "inc_sum_logits", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.models.transformer.decode_next_step": [[707, 812], ["transformer.create_decode_masks", "decoder", "transformer.token_logit_masking", "tensorflow.cond", "tensorflow.cond", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.gather", "tensorflow.concat", "tensorflow.gather", "tensorflow.math.logical_and", "tensorflow.gather", "tensorflow.gather", "tensorflow.concat", "tensorflow.multiply", "tensorflow.multiply", "tensorflow.equal", "tensorflow.math.not_equal", "tensorflow.dtypes.cast", "tensorflow.cast", "tensorflow.cast", "transformer._dec_beam_search", "transformer._dec_nucleus_sampling", "tensorflow.range"], "function", ["home.repos.pwc.inspect_result.yinxusen_deepword.models.transformer.create_decode_masks", "home.repos.pwc.inspect_result.yinxusen_deepword.models.transformer.token_logit_masking", "home.repos.pwc.inspect_result.yinxusen_deepword.models.transformer._dec_beam_search", "home.repos.pwc.inspect_result.yinxusen_deepword.models.transformer._dec_nucleus_sampling"], ["", "def", "decode_next_step", "(", "\n", "decoder", ",", "time", ",", "\n", "enc_x", ",", "enc_output", ",", "training", ",", "\n", "dec_padding_mask", ",", "copy_mask", ",", "\n", "batch_size", ",", "tgt_vocab_size", ",", "eos_id", ",", "padding_id", ",", "\n", "beam_size", ",", "use_greedy", ",", "temperature", ",", "\n", "inc_tar", ",", "inc_continue", ",", "inc_valid_len", ",", "inc_p_gen", ",", "\n", "inc_sum_logits", ")", ":", "\n", "    ", "\"\"\"\n    decode one step with beam search\n    given inc_tar as the current decoded target sequence\n    (batch_size * beam_size), first decode one step with decoder to get\n    decoded_logits.\n    then mask the decoded_logits:\n      1) if continue to decode (i.e. eos never reached) and current time\n         reach the max_tar_len, then only EOS is allowed to choose;\n      2) if not continue to decode, only PAD is allowed to choose;\n      3) default, we don't mask the decoded_logits.\n    After get predicted_id, either by sampling method or greedy method,\n    we compute 1) beam_id and 2) token_id from predicted_id.\n    beam_id indicates which beam to choose, token_id indicates under that\n    beam, which token to choose.\n\n    for loop variables, inc_tar, inc_continue, inc_logits, inc_valid_len,\n    and inc_p_gen, we first select rows according to beam_id, then pad\n    the token_id related info to the end. e.g. given beam_size = 2,\n    batch_size = 2, we have inc_tar:\n\n    [[[1, 2, 3],\n      [2, 3, 4]],  # --> this beam row will be deleted\n     [[9, 8, 7],\n      [8, 7, 6]]]\n    if beam_id = [[0, 0], [0, 1]], then we choose [1, 2, 3] twice, and\n    [9, 8, 7] once, and [8, 7, 6] once, then make the inc_tar to be\n    [[[1, 2, 3],\n      [1, 2, 3]],\n     [[9, 8, 7],\n      [8, 7, 6]]]\n    then pad new token_id to the end.\n    \"\"\"", "\n", "\n", "combined_mask", "=", "create_decode_masks", "(", "inc_tar", ")", "\n", "# decoded_logits:", "\n", "# (batch_size * beam_size, target_seq_len, tgt_vocab_size)", "\n", "# p_gen: (batch_size * beam_size, target_seq_len, 1)", "\n", "decoded_logits", ",", "p_gen", ",", "_", ",", "_", "=", "decoder", "(", "\n", "inc_tar", ",", "enc_x", ",", "enc_output", ",", "training", ",", "combined_mask", ",", "\n", "dec_padding_mask", ",", "copy_mask", ")", "\n", "\n", "# (batch_size * beam_size, tgt_vocab_size)", "\n", "curr_logits", "=", "decoded_logits", "[", ":", ",", "-", "1", ",", ":", "]", "\n", "# TODO: here we don't need to normalize the logits, for both beam-search", "\n", "#   or not beam-search. Because previously in decoder it was already", "\n", "#   normalized due to pointer-generator.", "\n", "#   otherwise, it needs to be normalized for beam-search, since we'll group", "\n", "#   logits inside a beam together (i.e. the |BE| * |V|) to select from.", "\n", "curr_p_gen", "=", "p_gen", "[", ":", ",", "-", "1", ",", ":", "]", "\n", "\n", "padding_logit_mask", "=", "token_logit_masking", "(", "\n", "token_id", "=", "padding_id", ",", "vocab_size", "=", "decoder", ".", "tgt_vocab_size", ")", "\n", "masked_logits", "=", "(", "\n", "tf", ".", "multiply", "(", "curr_logits", ",", "tf", ".", "cast", "(", "inc_continue", ",", "dtype", "=", "tf", ".", "float32", ")", ")", "+", "\n", "tf", ".", "multiply", "(", "padding_logit_mask", "[", "None", ",", ":", "]", ",", "\n", "1.", "-", "tf", ".", "cast", "(", "inc_continue", ",", "dtype", "=", "tf", ".", "float32", ")", ")", ")", "\n", "\n", "# for the first token decoding, the beam size is 1.", "\n", "beam_tgt_len", "=", "tf", ".", "cond", "(", "\n", "tf", ".", "equal", "(", "time", ",", "1", ")", ",", "\n", "true_fn", "=", "lambda", ":", "tgt_vocab_size", ",", "\n", "false_fn", "=", "lambda", ":", "tgt_vocab_size", "*", "beam_size", ")", "\n", "\n", "predicted_id", ",", "inc_sum_logits", "=", "tf", ".", "cond", "(", "\n", "use_greedy", ",", "\n", "true_fn", "=", "lambda", ":", "_dec_beam_search", "(", "\n", "masked_logits", ",", "inc_sum_logits", ",", "inc_valid_len", ",", "batch_size", ",", "\n", "beam_tgt_len", ",", "beam_size", ")", ",", "\n", "false_fn", "=", "lambda", ":", "_dec_nucleus_sampling", "(", "\n", "masked_logits", ",", "inc_sum_logits", ",", "batch_size", ",", "beam_tgt_len", ",", "\n", "beam_size", ",", "temperature", ")", ")", "\n", "\n", "# (batch_size, beam_size)", "\n", "beam_id", "=", "predicted_id", "//", "tgt_vocab_size", "\n", "# (batch_size * beam_size, 1)", "\n", "token_id", "=", "tf", ".", "reshape", "(", "\n", "predicted_id", "%", "tgt_vocab_size", ",", "(", "batch_size", "*", "beam_size", ",", "1", ")", ")", "\n", "# (batch_size * beam_size, )", "\n", "gather_beam_idx", "=", "tf", ".", "reshape", "(", "\n", "tf", ".", "range", "(", "batch_size", ")", "[", ":", ",", "None", "]", "*", "beam_size", "+", "beam_id", ",", "\n", "(", "batch_size", "*", "beam_size", ",", ")", ")", "\n", "\n", "# create inc tensors according to which beam to choose", "\n", "inc_tar_beam", "=", "tf", ".", "gather", "(", "inc_tar", ",", "gather_beam_idx", ")", "\n", "inc_tar", "=", "tf", ".", "concat", "(", "[", "inc_tar_beam", ",", "token_id", "]", ",", "axis", "=", "-", "1", ")", "\n", "\n", "inc_continue_beam", "=", "tf", ".", "gather", "(", "inc_continue", ",", "gather_beam_idx", ")", "\n", "inc_continue", "=", "tf", ".", "math", ".", "logical_and", "(", "\n", "tf", ".", "math", ".", "not_equal", "(", "token_id", ",", "eos_id", ")", ",", "inc_continue_beam", ")", "\n", "inc_valid_len_beam", "=", "tf", ".", "gather", "(", "inc_valid_len", ",", "gather_beam_idx", ")", "\n", "inc_valid_len", "=", "inc_valid_len_beam", "+", "tf", ".", "dtypes", ".", "cast", "(", "\n", "inc_continue", ",", "dtype", "=", "tf", ".", "int32", ")", "\n", "inc_p_gen_beam", "=", "tf", ".", "gather", "(", "inc_p_gen", ",", "gather_beam_idx", ")", "\n", "inc_p_gen", "=", "tf", ".", "concat", "(", "[", "inc_p_gen_beam", ",", "curr_p_gen", "]", ",", "axis", "=", "-", "1", ")", "\n", "return", "(", "\n", "time", "+", "1", ",", "inc_tar", ",", "inc_continue", ",", "inc_valid_len", ",", "inc_p_gen", ",", "\n", "inc_sum_logits", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.models.transformer.sequential_decoding": [[814, 881], ["tensorflow.constant", "tensorflow.fill", "tensorflow.fill", "tensorflow.fill", "tensorflow.fill", "tensorflow.fill", "tensorflow.reshape", "tensorflow.reshape", "transformer.create_padding_mask", "tensorflow.while_loop", "tensorflow.squeeze", "tensorflow.shape", "tensorflow.shape", "tensorflow.tile", "tensorflow.tile", "transformer.decode_next_step", "tensorflow.logical_and", "tensorflow.less_equal", "tensorflow.reduce_any", "tf.constant.get_shape", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape"], "function", ["home.repos.pwc.inspect_result.yinxusen_deepword.models.transformer.create_padding_mask", "home.repos.pwc.inspect_result.yinxusen_deepword.models.transformer.decode_next_step"], ["", "def", "sequential_decoding", "(", "\n", "decoder", ",", "copy_mask", ",", "enc_x", ",", "enc_output", ",", "training", ",", "max_tar_len", ",", "\n", "sos_id", ",", "eos_id", ",", "padding_id", ",", "\n", "use_greedy", "=", "True", ",", "beam_size", "=", "1", ",", "temperature", "=", "1.", ")", ":", "\n", "\n", "    ", "batch_size", "=", "tf", ".", "shape", "(", "enc_x", ")", "[", "0", "]", "\n", "src_seq_len", "=", "tf", ".", "shape", "(", "enc_x", ")", "[", "1", "]", "\n", "tgt_vocab_size", "=", "decoder", ".", "tgt_vocab_size", "\n", "\n", "inc_time", "=", "tf", ".", "constant", "(", "1", ")", "\n", "inc_tar", "=", "tf", ".", "fill", "(", "[", "batch_size", "*", "beam_size", ",", "1", "]", ",", "sos_id", ")", "\n", "inc_continue", "=", "tf", ".", "fill", "(", "[", "batch_size", "*", "beam_size", ",", "1", "]", ",", "True", ")", "\n", "inc_valid_len", "=", "tf", ".", "fill", "(", "[", "batch_size", "*", "beam_size", ",", "1", "]", ",", "1", ")", "\n", "inc_p_gen", "=", "tf", ".", "fill", "(", "[", "batch_size", "*", "beam_size", ",", "1", "]", ",", "0.", ")", "\n", "inc_sum_logits", "=", "tf", ".", "fill", "(", "[", "batch_size", "*", "beam_size", ",", "1", "]", ",", "0.", ")", "\n", "\n", "# repeat enc_output and inp w.r.t. beam size", "\n", "# (batch_size * beam_size, inp_seq_len, d_model)", "\n", "enc_output", "=", "tf", ".", "reshape", "(", "\n", "tf", ".", "tile", "(", "enc_output", "[", ":", ",", "None", ",", ":", ",", ":", "]", ",", "(", "1", ",", "beam_size", ",", "1", ",", "1", ")", ")", ",", "\n", "(", "batch_size", "*", "beam_size", ",", "src_seq_len", ",", "-", "1", ")", ")", "\n", "enc_x", "=", "tf", ".", "reshape", "(", "\n", "tf", ".", "tile", "(", "enc_x", "[", ":", ",", "None", ",", ":", "]", ",", "(", "1", ",", "beam_size", ",", "1", ")", ")", ",", "\n", "(", "batch_size", "*", "beam_size", ",", "-", "1", ")", ")", "\n", "dec_padding_mask", "=", "create_padding_mask", "(", "enc_x", ")", "\n", "\n", "def", "_dec_next_step", "(", "\n", "_time", ",", "_tar", ",", "_continue", ",", "_valid_len", ",", "_p_gen", ",", "_sum_logits", ")", ":", "\n", "        ", "return", "decode_next_step", "(", "\n", "decoder", ",", "\n", "_time", ",", "\n", "enc_x", ",", "enc_output", ",", "training", ",", "\n", "dec_padding_mask", ",", "copy_mask", ",", "\n", "batch_size", ",", "tgt_vocab_size", ",", "eos_id", ",", "padding_id", ",", "\n", "beam_size", ",", "use_greedy", ",", "temperature", ",", "\n", "_tar", ",", "_continue", ",", "_valid_len", ",", "_p_gen", ",", "_sum_logits", ")", "\n", "\n", "", "def", "_dec_cond", "(", "\n", "_time", ",", "_tar", ",", "_continue", ",", "_valid_len", ",", "_p_gen", ",", "_sum_logits", ")", ":", "\n", "        ", "return", "tf", ".", "logical_and", "(", "\n", "tf", ".", "less_equal", "(", "_time", ",", "max_tar_len", ")", ",", "tf", ".", "reduce_any", "(", "_continue", ")", ")", "\n", "\n", "", "results", "=", "tf", ".", "while_loop", "(", "\n", "cond", "=", "_dec_cond", ",", "\n", "body", "=", "_dec_next_step", ",", "\n", "loop_vars", "=", "(", "\n", "inc_time", ",", "\n", "inc_tar", ",", "\n", "inc_continue", ",", "\n", "inc_valid_len", ",", "\n", "inc_p_gen", ",", "\n", "inc_sum_logits", ")", ",", "\n", "shape_invariants", "=", "(", "\n", "inc_time", ".", "get_shape", "(", ")", ",", "\n", "tf", ".", "TensorShape", "(", "[", "None", ",", "None", "]", ")", ",", "\n", "tf", ".", "TensorShape", "(", "[", "None", ",", "1", "]", ")", ",", "\n", "tf", ".", "TensorShape", "(", "[", "None", ",", "1", "]", ")", ",", "\n", "tf", ".", "TensorShape", "(", "[", "None", ",", "None", "]", ")", ",", "\n", "tf", ".", "TensorShape", "(", "[", "None", ",", "1", "]", ")", "\n", ")", ")", "\n", "\n", "tar", "=", "results", "[", "1", "]", "[", ":", ",", "1", ":", "]", "\n", "# valid_len includes the final EOS", "\n", "valid_len", "=", "tf", ".", "squeeze", "(", "results", "[", "3", "]", ",", "axis", "=", "-", "1", ")", "\n", "p_gen", "=", "results", "[", "4", "]", "[", ":", ",", "1", ":", "]", "\n", "sum_logits", "=", "results", "[", "5", "]", "\n", "return", "tar", ",", "p_gen", ",", "valid_len", ",", "sum_logits", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.models.utils.encoder_lstm": [[5, 27], ["tensorflow.nn.rnn_cell.MultiRNNCell", "tensorflow.nn.embedding_lookup", "tensorflow.nn.dynamic_rnn", "tensorflow.nn.rnn_cell.LSTMCell", "range"], "function", ["None"], ["import", "logging", "\n", "import", "logging", ".", "config", "\n", "import", "logging", ".", "handlers", "\n", "import", "math", "\n", "import", "os", "\n", "import", "random", "\n", "import", "sys", "\n", "import", "time", "\n", "from", "itertools", "import", "chain", "\n", "from", "os", "import", "path", "\n", "from", "typing", "import", "List", ",", "Tuple", ",", "Dict", ",", "Optional", ",", "Any", "\n", "\n", "import", "numpy", "as", "np", "\n", "import", "ruamel", ".", "yaml", "\n", "from", "bitarray", "import", "bitarray", "\n", "from", "tabulate", "import", "tabulate", "\n", "\n", "\n", "def", "get_hash", "(", "txt", ":", "str", ")", "->", "str", ":", "\n", "    ", "\"\"\"\n    get hex hash value for a string\n    \"\"\"", "\n", "return", "hashlib", ".", "md5", "(", "txt", ".", "encode", "(", "\"utf-8\"", ")", ")", ".", "hexdigest", "(", ")", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.models.utils.encoder_cnn_base": [[29, 96], ["enumerate", "tensorflow.squeeze", "tensorflow.concat", "tensorflow.variable_scope", "tensorflow.constant", "tensorflow.pad", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.nn.conv2d", "tensorflow.layers.dropout", "layer_outputs.append", "tensorflow.nn.tanh", "tensorflow.nn.bias_add", "tensorflow.nn.relu", "ValueError", "tensorflow.truncated_normal", "tensorflow.constant", "tensorflow.nn.bias_add"], "function", ["home.repos.pwc.inspect_result.yinxusen_deepword.deepword.tree_memory.TreeMemory.append"], ["\n", "", "def", "eprint", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"\n    print to stderr\n    \"\"\"", "\n", "print", "(", "*", "args", ",", "file", "=", "sys", ".", "stderr", ",", "**", "kwargs", ")", "\n", "\n", "\n", "", "def", "flatmap", "(", "f", ",", "items", ")", ":", "\n", "    ", "\"\"\"\n    flatmap for python\n    \"\"\"", "\n", "return", "list", "(", "chain", ".", "from_iterable", "(", "map", "(", "f", ",", "items", ")", ")", ")", "\n", "\n", "\n", "", "def", "flatten", "(", "items", ")", ":", "\n", "    ", "\"\"\"\n    flatten a list of lists to a list\n    \"\"\"", "\n", "return", "list", "(", "chain", ".", "from_iterable", "(", "items", ")", ")", "\n", "\n", "\n", "", "def", "uniq", "(", "lst", ")", ":", "\n", "    ", "\"\"\"\n    order-preserving unique\n    \"\"\"", "\n", "seen", "=", "set", "(", ")", "\n", "seen_add", "=", "seen", ".", "add", "\n", "return", "[", "x", "for", "x", "in", "lst", "if", "not", "(", "x", "in", "seen", "or", "seen_add", "(", "x", ")", ")", "]", "\n", "\n", "\n", "", "def", "load_uniq_lines", "(", "fname", ":", "str", ")", "->", "List", "[", "str", "]", ":", "\n", "    ", "\"\"\"\n    Load unique lines from a file, line order preserved\n    \"\"\"", "\n", "with", "open", "(", "fname", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "lines", "=", "map", "(", "lambda", "l", ":", "l", ".", "strip", "(", ")", ",", "f", ".", "readlines", "(", ")", ")", "\n", "", "return", "uniq", "(", "lines", ")", "\n", "\n", "\n", "", "def", "load_vocab", "(", "vocab_file", ":", "str", ")", "->", "List", "[", "str", "]", ":", "\n", "    ", "\"\"\"\n    Load unique words from a vocabulary\n    \"\"\"", "\n", "return", "load_uniq_lines", "(", "vocab_file", ")", "\n", "\n", "\n", "", "def", "load_actions", "(", "action_file", ":", "str", ")", "->", "List", "[", "str", "]", ":", "\n", "    ", "\"\"\"\n    Load unique actions from an action file\n    \"\"\"", "\n", "return", "load_uniq_lines", "(", "action_file", ")", "\n", "\n", "\n", "", "def", "get_token2idx", "(", "tokens", ":", "List", "[", "str", "]", ")", "->", "Dict", "[", "str", ",", "int", "]", ":", "\n", "    ", "\"\"\"\n    From a list of tokens to a dict of token to position\n    \"\"\"", "\n", "uniq_tokens", "=", "uniq", "(", "tokens", ")", "\n", "return", "dict", "(", "map", "(", "\n", "lambda", "idx_token", ":", "(", "idx_token", "[", "1", "]", ",", "idx_token", "[", "0", "]", ")", ",", "enumerate", "(", "uniq_tokens", ")", ")", ")", "\n", "\n", "\n", "", "def", "ctime", "(", ")", "->", "int", ":", "\n", "    ", "\"\"\"\n    current time in millisecond\n    \"\"\"", "\n", "return", "int", "(", "round", "(", "time", ".", "time", "(", ")", "*", "1000", ")", ")", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.models.utils.reverse_pos_embedding": [[98, 129], ["tensorflow.sequence_mask", "tensorflow.nn.embedding_lookup", "tensorflow.shape", "tensorflow.reshape", "tensorflow.sequence_mask", "tensorflow.tile", "tensorflow.range", "tensorflow.reduce_max"], "function", ["None"], ["\n", "", "def", "setup_logging", "(", "\n", "default_path", ":", "str", "=", "'logging.yaml'", ",", "\n", "default_level", ":", "int", "=", "logging", ".", "INFO", ",", "\n", "env_key", ":", "str", "=", "'LOG_CFG'", ",", "\n", "local_log_filename", ":", "Optional", "[", "str", "]", "=", "None", ")", "->", "None", ":", "\n", "\n", "    ", "\"\"\"\n    Setup logging for python project\n\n    Load YAML config file from `default_path`, or from the environment variable\n    set by `env_key`. Falls back to default config if file not exist.\n\n    if `local_log_filename` set, add a local rotating log file.\n    \"\"\"", "\n", "\n", "config_path", "=", "default_path", "\n", "value", "=", "os", ".", "getenv", "(", "env_key", ",", "None", ")", "\n", "if", "value", ":", "\n", "        ", "config_path", "=", "value", "\n", "", "if", "path", ".", "exists", "(", "config_path", ")", ":", "\n", "        ", "with", "open", "(", "config_path", ",", "'rt'", ")", "as", "f", ":", "\n", "            ", "config", "=", "ruamel", ".", "yaml", ".", "safe_load", "(", "f", ".", "read", "(", ")", ")", "\n", "logging", ".", "config", ".", "dictConfig", "(", "config", ")", "\n", "", "", "else", ":", "\n", "        ", "logging", ".", "basicConfig", "(", "level", "=", "default_level", ")", "\n", "# add more handlers", "\n", "", "if", "local_log_filename", "is", "not", "None", ":", "\n", "        ", "rh", "=", "logging", ".", "handlers", ".", "RotatingFileHandler", "(", "\n", "local_log_filename", ",", "maxBytes", "=", "100", "*", "1024", "*", "1024", ",", "backupCount", "=", "100", ")", "\n", "formatter", "=", "logging", ".", "Formatter", "(", "\n", "'%(asctime)s - %(name)s - %(levelname)s - %(message)s'", ")", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.models.utils.encoder_cnn": [[131, 172], ["tensorflow.variable_scope", "tensorflow.nn.embedding_lookup", "tensorflow.slice", "utils.encoder_cnn_base", "tensorflow.reduce_max", "tensorflow.reshape", "tensorflow.expand_dims", "len", "tensorflow.stack", "ValueError", "tensorflow.shape"], "function", ["home.repos.pwc.inspect_result.yinxusen_deepword.models.utils.encoder_cnn_base"], ["logging", ".", "getLogger", "(", ")", ".", "addHandler", "(", "rh", ")", "\n", "# suppress log from stanford corenlp", "\n", "", "logging", ".", "getLogger", "(", "\"urllib3.connectionpool\"", ")", ".", "setLevel", "(", "logging", ".", "WARNING", ")", "\n", "\n", "\n", "", "def", "model_name2clazz", "(", "name", ":", "str", ")", ":", "\n", "    ", "\"\"\"\n    Find the class given the model name in this package.\n\n    Args:\n        name: Model name from :py:mod:`deepword.models`\n\n    Returns:\n        the class w.r.t. the model name\n    \"\"\"", "\n", "\n", "from", "deepword", ".", "models", "import", "dqn_modeling", ",", "drrn_modeling", ",", "dsqn_modeling", ",", "gen_modeling", ",", "nlu_modeling", ",", "snn_modeling", "\n", "\n", "for", "namespace", "in", "[", "dqn_modeling", ",", "drrn_modeling", ",", "dsqn_modeling", ",", "gen_modeling", ",", "\n", "nlu_modeling", ",", "snn_modeling", "]", ":", "\n", "        ", "if", "hasattr", "(", "namespace", ",", "name", ")", ":", "\n", "            ", "return", "getattr", "(", "namespace", ",", "name", ")", "\n", "", "", "raise", "ValueError", "(", "\"{} not found in models\"", ".", "format", "(", "name", ")", ")", "\n", "\n", "\n", "", "def", "learner_name2clazz", "(", "name", ":", "str", ")", ":", "\n", "    ", "\"\"\"\n    Find the class given the learner name in this package.\n\n    Args:\n        name: Learner name from :py:mod:`deepword.students`\n\n    Returns:\n        the class w.r.t. the learner name\n    \"\"\"", "\n", "\n", "from", "deepword", ".", "students", "import", "student_learner", ",", "swag_learner", ",", "snn_learner", "\n", "\n", "for", "namespace", "in", "[", "student_learner", ",", "swag_learner", ",", "snn_learner", "]", ":", "\n", "        ", "if", "hasattr", "(", "namespace", ",", "name", ")", ":", "\n", "            ", "return", "getattr", "(", "namespace", ",", "name", ")", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.models.utils.l2_loss_1d_action": [[174, 196], ["tensorflow.gather", "tensorflow.reduce_mean", "tensorflow.abs", "tensorflow.square"], "function", ["None"], ["\n", "\n", "", "def", "agent_name2clazz", "(", "name", ":", "str", ")", ":", "\n", "    ", "\"\"\"\n    Find the class given the agent name in this package.\n\n    Args:\n        name: Agent name from :py:mod:`deepword.agents`\n\n    Returns:\n        the class w.r.t. the agent name\n    \"\"\"", "\n", "\n", "from", "deepword", ".", "agents", "import", "base_agent", ",", "dsqn_agent", ",", "gen_agent", ",", "competition_agent", ",", "gen_drrn_agent", ",", "zork_agent", "\n", "\n", "for", "namespace", "in", "[", "base_agent", ",", "dsqn_agent", ",", "gen_agent", ",", "\n", "competition_agent", ",", "gen_drrn_agent", ",", "\n", "zork_agent", "]", ":", "\n", "        ", "if", "hasattr", "(", "namespace", ",", "name", ")", ":", "\n", "            ", "return", "getattr", "(", "namespace", ",", "name", ")", "\n", "", "", "raise", "ValueError", "(", "\"{} not found in agents\"", ".", "format", "(", "name", ")", ")", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.models.utils.l2_loss_1d_action_v2": [[198, 221], ["tensorflow.one_hot", "tensorflow.reduce_sum", "tensorflow.reduce_mean", "tensorflow.abs", "tensorflow.multiply", "tensorflow.square"], "function", ["None"], ["\n", "", "def", "core_name2clazz", "(", "name", ":", "str", ")", ":", "\n", "    ", "\"\"\"\n    Find the class given the core name in this package.\n\n    Args:\n        name: Agent name from :py:mod:`deepword.agents.cores`\n\n    Returns:\n        the class w.r.t. the core name\n    \"\"\"", "\n", "\n", "from", "deepword", ".", "agents", "import", "cores", "\n", "\n", "if", "hasattr", "(", "cores", ",", "name", ")", ":", "\n", "        ", "return", "getattr", "(", "cores", ",", "name", ")", "\n", "", "raise", "ValueError", "(", "\"{} not found in agents\"", ".", "format", "(", "name", ")", ")", "\n", "\n", "\n", "", "def", "split_train_dev", "(", "\n", "game_files", ":", "List", "[", "str", "]", ",", "train_ratio", ":", "float", "=", "0.9", ",", "rnd_seed", ":", "int", "=", "42", "\n", ")", "->", "Tuple", "[", "List", "[", "str", "]", ",", "List", "[", "str", "]", "]", ":", "\n", "    "]], "home.repos.pwc.inspect_result.yinxusen_deepword.models.utils.l2_loss_2d_action": [[223, 255], ["tensorflow.one_hot", "tensorflow.sequence_mask", "tensorflow.multiply", "tensorflow.multiply", "tensorflow.reduce_sum", "tensorflow.div", "tensorflow.reduce_mean", "tensorflow.abs", "tensorflow.expand_dims", "tensorflow.cast", "tensorflow.square"], "function", ["None"], ["\n", "\n", "# have to sort first, otherwise after shuffling the result is different", "\n", "# on different platforms, e.g. Linux VS MacOS.", "\n", "game_files", "=", "sorted", "(", "game_files", ")", "\n", "random", ".", "Random", "(", "rnd_seed", ")", ".", "shuffle", "(", "game_files", ")", "\n", "n_files", "=", "len", "(", "game_files", ")", "\n", "if", "n_files", "==", "0", ":", "\n", "        ", "raise", "ValueError", "(", "\"no game files found!\"", ")", "\n", "\n", "", "n_train", "=", "int", "(", "math", ".", "ceil", "(", "n_files", "*", "train_ratio", ")", ")", "\n", "n_dev", "=", "n_files", "*", "(", "1", "-", "train_ratio", ")", "\n", "n_dev", "=", "int", "(", "math", ".", "floor", "(", "n_dev", ")", ")", "if", "n_dev", ">", "1", "else", "1", "\n", "train_games", "=", "game_files", "[", ":", "n_train", "]", "\n", "dev_games", "=", "game_files", "[", "-", "n_dev", ":", "]", "\n", "return", "train_games", ",", "dev_games", "\n", "\n", "\n", "", "def", "load_game_files", "(", "game_path", ":", "str", ",", "f_games", ":", "Optional", "[", "str", "]", "=", "None", ")", "->", "List", "[", "str", "]", ":", "\n", "    "]], "home.repos.pwc.inspect_result.yinxusen_deepword.models.utils._get_angles": [[257, 260], ["numpy.power", "numpy.float32"], "function", ["None"], []], "home.repos.pwc.inspect_result.yinxusen_deepword.models.utils.positional_encoding": [[262, 286], ["utils._get_angles", "numpy.sin", "numpy.cos", "tensorflow.cast", "numpy.arange", "numpy.arange"], "function", ["home.repos.pwc.inspect_result.yinxusen_deepword.models.utils._get_angles"], ["\n", "\n", "if", "path", ".", "isfile", "(", "game_path", ")", ":", "\n", "        ", "game_files", "=", "[", "game_path", "]", "\n", "", "elif", "path", ".", "isdir", "(", "game_path", ")", ":", "\n", "        ", "if", "f_games", "is", "not", "None", ":", "\n", "            ", "with", "open", "(", "f_games", ",", "\"r\"", ")", "as", "f", ":", "\n", "                ", "selected_games", "=", "map", "(", "lambda", "x", ":", "x", ".", "strip", "(", ")", ",", "f", ".", "readlines", "(", ")", ")", "\n", "", "game_files", "=", "list", "(", "map", "(", "\n", "lambda", "x", ":", "path", ".", "join", "(", "game_path", ",", "\"{}.ulx\"", ".", "format", "(", "x", ")", ")", ",", "\n", "selected_games", ")", ")", "\n", "", "else", ":", "\n", "            ", "game_files", "=", "glob", ".", "glob", "(", "path", ".", "join", "(", "game_path", ",", "\"*.ulx\"", ")", ")", "\n", "", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"game path {} doesn't exist\"", ".", "format", "(", "game_path", ")", ")", "\n", "", "return", "game_files", "\n", "\n", "\n", "", "def", "load_and_split", "(", "game_path", ":", "str", ",", "f_games", ":", "str", ")", "->", "Tuple", "[", "List", "[", "str", "]", ",", "List", "[", "str", "]", "]", ":", "\n", "    "]], "home.repos.pwc.inspect_result.yinxusen_deepword.models.dqn_modeling.BaseDQN.__init__": [[11, 36], ["deepword.log.Logging.__init__", "tensorflow.train.get_or_create_global_step", "tensorflow.train.AdamOptimizer", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "dqn_modeling.BaseDQN.init_glove", "tensorflow.get_variable", "tensorflow.get_variable"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.models.drrn_modeling.PseudoSeq2SeqDRRN.__init__", "home.repos.pwc.inspect_result.yinxusen_deepword.models.dqn_modeling.BaseDQN.init_glove"], ["    ", "def", "__init__", "(", "self", ",", "hp", ",", "src_embeddings", "=", "None", ",", "is_infer", "=", "False", ")", ":", "\n", "        ", "super", "(", "BaseDQN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "is_infer", "=", "is_infer", "\n", "self", ".", "hp", "=", "hp", "\n", "if", "src_embeddings", "is", "None", ":", "\n", "            ", "if", "hp", ".", "use_glove_emb", ":", "\n", "                ", "_", ",", "glove_emb", "=", "self", ".", "init_glove", "(", "conventions", ".", "glove_emb_file", ")", "\n", "self", ".", "src_embeddings", "=", "tf", ".", "get_variable", "(", "\n", "name", "=", "\"src_embeddings\"", ",", "dtype", "=", "tf", ".", "float32", ",", "\n", "initializer", "=", "glove_emb", ",", "trainable", "=", "hp", ".", "glove_trainable", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "src_embeddings", "=", "tf", ".", "get_variable", "(", "\n", "name", "=", "\"src_embeddings\"", ",", "dtype", "=", "tf", ".", "float32", ",", "\n", "shape", "=", "[", "hp", ".", "vocab_size", ",", "hp", ".", "embedding_size", "]", ")", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "src_embeddings", "=", "src_embeddings", "\n", "\n", "", "self", ".", "global_step", "=", "tf", ".", "train", ".", "get_or_create_global_step", "(", ")", "\n", "self", ".", "optimizer", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "self", ".", "hp", ".", "learning_rate", ")", "\n", "self", ".", "inputs", "=", "{", "\n", "\"src\"", ":", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "[", "None", ",", "None", "]", ")", ",", "\n", "\"src_len\"", ":", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "[", "None", "]", ")", ",", "\n", "\"action_idx\"", ":", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "[", "None", "]", ")", ",", "\n", "\"expected_q\"", ":", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "None", "]", ")", ",", "\n", "\"b_weight\"", ":", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "None", "]", ")", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.models.dqn_modeling.BaseDQN.init_glove": [[38, 46], ["list", "numpy.asarray", "open", "list", "map", "list", "map", "map", "f.readlines", "s.strip().split", "s.strip"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "init_glove", "(", "cls", ",", "glove_path", ")", ":", "\n", "        ", "with", "open", "(", "glove_path", ",", "\"r\"", ")", "as", "f", ":", "\n", "            ", "glove", "=", "list", "(", "map", "(", "lambda", "s", ":", "s", ".", "strip", "(", ")", ".", "split", "(", ")", ",", "f", ".", "readlines", "(", ")", ")", ")", "\n", "", "glove_tokens", "=", "list", "(", "map", "(", "lambda", "x", ":", "x", "[", "0", "]", ",", "glove", ")", ")", "\n", "glove_embeddings", "=", "np", ".", "asarray", "(", "\n", "list", "(", "map", "(", "lambda", "x", ":", "x", "[", "1", ":", "]", ",", "glove", ")", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "return", "glove_tokens", ",", "glove_embeddings", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.models.dqn_modeling.BaseDQN.get_q_actions": [[47, 49], ["NotImplementedError"], "methods", ["None"], ["", "def", "get_q_actions", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.models.dqn_modeling.BaseDQN.get_train_op": [[50, 52], ["NotImplementedError"], "methods", ["None"], ["", "def", "get_train_op", "(", "self", ",", "q_actions", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.models.dqn_modeling.BaseDQN.get_train_model": [[53, 84], ["tensorflow.Graph", "deepword.models.models.DQNModel", "tensorflow.Graph.as_default", "tensorflow.device", "cls", "cls.get_q_actions", "cls.get_train_op", "tensorflow.summary.scalar", "tensorflow.summary.merge"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.models.drrn_modeling.PseudoSeq2SeqDRRN.get_q_actions", "home.repos.pwc.inspect_result.yinxusen_deepword.models.drrn_modeling.PseudoSeq2SeqDRRN.get_train_op"], ["", "@", "classmethod", "\n", "def", "get_train_model", "(", "cls", ",", "hp", ",", "device_placement", ")", ":", "\n", "        ", "graph", "=", "tf", ".", "Graph", "(", ")", "\n", "with", "graph", ".", "as_default", "(", ")", ":", "\n", "            ", "with", "tf", ".", "device", "(", "device_placement", ")", ":", "\n", "                ", "model", "=", "cls", "(", "hp", ")", "\n", "inputs", "=", "model", ".", "inputs", "\n", "src_placeholder", "=", "inputs", "[", "\"src\"", "]", "\n", "src_len_placeholder", "=", "inputs", "[", "\"src_len\"", "]", "\n", "action_idx_placeholder", "=", "inputs", "[", "\"action_idx\"", "]", "\n", "expected_q_placeholder", "=", "inputs", "[", "\"expected_q\"", "]", "\n", "b_weight_placeholder", "=", "inputs", "[", "\"b_weight\"", "]", "\n", "q_actions", "=", "model", ".", "get_q_actions", "(", ")", "\n", "loss", ",", "train_op", ",", "abs_loss", "=", "model", ".", "get_train_op", "(", "q_actions", ")", "\n", "loss_summary", "=", "tf", ".", "summary", ".", "scalar", "(", "\"loss\"", ",", "loss", ")", "\n", "train_summary_op", "=", "tf", ".", "summary", ".", "merge", "(", "[", "loss_summary", "]", ")", "\n", "", "", "return", "DQNModel", "(", "\n", "graph", "=", "graph", ",", "\n", "training", "=", "True", ",", "\n", "q_actions", "=", "q_actions", ",", "\n", "src_", "=", "src_placeholder", ",", "\n", "src_len_", "=", "src_len_placeholder", ",", "\n", "train_op", "=", "train_op", ",", "\n", "action_idx_", "=", "action_idx_placeholder", ",", "\n", "expected_q_", "=", "expected_q_placeholder", ",", "\n", "b_weight_", "=", "b_weight_placeholder", ",", "\n", "loss", "=", "loss", ",", "\n", "train_summary_op", "=", "train_summary_op", ",", "\n", "abs_loss", "=", "abs_loss", ",", "\n", "src_seg_", "=", "None", ",", "\n", "h_state", "=", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.models.dqn_modeling.BaseDQN.get_eval_model": [[85, 110], ["tensorflow.Graph", "deepword.models.models.DQNModel", "tensorflow.Graph.as_default", "tensorflow.device", "cls", "cls.get_q_actions"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.models.drrn_modeling.PseudoSeq2SeqDRRN.get_q_actions"], ["", "@", "classmethod", "\n", "def", "get_eval_model", "(", "cls", ",", "hp", ",", "device_placement", ")", ":", "\n", "        ", "graph", "=", "tf", ".", "Graph", "(", ")", "\n", "with", "graph", ".", "as_default", "(", ")", ":", "\n", "            ", "with", "tf", ".", "device", "(", "device_placement", ")", ":", "\n", "                ", "model", "=", "cls", "(", "hp", ",", "is_infer", "=", "True", ")", "\n", "inputs", "=", "model", ".", "inputs", "\n", "src_placeholder", "=", "inputs", "[", "\"src\"", "]", "\n", "src_len_placeholder", "=", "inputs", "[", "\"src_len\"", "]", "\n", "q_actions", "=", "model", ".", "get_q_actions", "(", ")", "\n", "", "", "return", "DQNModel", "(", "\n", "graph", "=", "graph", ",", "\n", "training", "=", "False", ",", "\n", "q_actions", "=", "q_actions", ",", "\n", "src_", "=", "src_placeholder", ",", "\n", "src_len_", "=", "src_len_placeholder", ",", "\n", "train_op", "=", "None", ",", "\n", "action_idx_", "=", "None", ",", "\n", "expected_q_", "=", "None", ",", "\n", "b_weight_", "=", "None", ",", "\n", "loss", "=", "None", ",", "\n", "train_summary_op", "=", "None", ",", "\n", "abs_loss", "=", "None", ",", "\n", "src_seg_", "=", "None", ",", "\n", "h_state", "=", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.models.dqn_modeling.LstmDQN.__init__": [[113, 115], ["dqn_modeling.BaseDQN.__init__"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.models.drrn_modeling.PseudoSeq2SeqDRRN.__init__"], ["    ", "def", "__init__", "(", "self", ",", "hp", ",", "src_embeddings", "=", "None", ",", "is_infer", "=", "False", ")", ":", "\n", "        ", "super", "(", "LstmDQN", ",", "self", ")", ".", "__init__", "(", "hp", ",", "src_embeddings", ",", "is_infer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.models.dqn_modeling.LstmDQN.get_q_actions": [[116, 123], ["deepword.encoder_lstm", "tensorflow.layers.dense"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.models.utils.encoder_lstm"], ["", "def", "get_q_actions", "(", "self", ")", ":", "\n", "        ", "inner_states", "=", "dqn", ".", "encoder_lstm", "(", "\n", "self", ".", "inputs", "[", "\"src\"", "]", ",", "self", ".", "inputs", "[", "\"src_len\"", "]", ",", "self", ".", "src_embeddings", ",", "\n", "self", ".", "hp", ".", "lstm_num_units", ",", "self", ".", "hp", ".", "lstm_num_layers", ")", "\n", "q_actions", "=", "tf", ".", "layers", ".", "dense", "(", "\n", "inner_states", "[", "-", "1", "]", ".", "c", ",", "units", "=", "self", ".", "hp", ".", "n_actions", ",", "use_bias", "=", "True", ")", "\n", "return", "q_actions", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.models.dqn_modeling.LstmDQN.get_train_op": [[124, 130], ["deepword.l2_loss_1d_action_v2", "dqn_modeling.LstmDQN.optimizer.minimize"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.models.utils.l2_loss_1d_action_v2"], ["", "def", "get_train_op", "(", "self", ",", "q_actions", ")", ":", "\n", "        ", "loss", ",", "abs_loss", "=", "dqn", ".", "l2_loss_1d_action_v2", "(", "\n", "q_actions", ",", "self", ".", "inputs", "[", "\"action_idx\"", "]", ",", "self", ".", "inputs", "[", "\"expected_q\"", "]", ",", "\n", "self", ".", "hp", ".", "n_actions", ",", "self", ".", "inputs", "[", "\"b_weight\"", "]", ")", "\n", "train_op", "=", "self", ".", "optimizer", ".", "minimize", "(", "loss", ",", "global_step", "=", "self", ".", "global_step", ")", "\n", "return", "loss", ",", "train_op", ",", "abs_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.models.dqn_modeling.CnnDQN.__init__": [[133, 144], ["dqn_modeling.BaseDQN.__init__", "tensorflow.constant", "tensorflow.get_variable"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.models.drrn_modeling.PseudoSeq2SeqDRRN.__init__"], ["    ", "def", "__init__", "(", "self", ",", "hp", ",", "src_embeddings", "=", "None", ",", "is_infer", "=", "False", ")", ":", "\n", "        ", "super", "(", "CnnDQN", ",", "self", ")", ".", "__init__", "(", "hp", ",", "src_embeddings", ",", "is_infer", ")", "\n", "self", ".", "filter_sizes", "=", "[", "3", ",", "4", ",", "5", "]", "\n", "self", ".", "num_filters", "=", "hp", ".", "num_conv_filters", "\n", "self", ".", "num_tokens", "=", "hp", ".", "num_tokens", "\n", "self", ".", "l2_loss", "=", "tf", ".", "constant", "(", "0.0", ")", "\n", "self", ".", "l2_reg_lambda", "=", "0.5", "\n", "\n", "self", ".", "pos_embeddings", "=", "tf", ".", "get_variable", "(", "\n", "name", "=", "\"pos_embeddings\"", ",", "dtype", "=", "tf", ".", "float32", ",", "\n", "shape", "=", "[", "self", ".", "num_tokens", ",", "self", ".", "hp", ".", "embedding_size", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.models.dqn_modeling.CnnDQN.get_q_actions": [[145, 154], ["deepword.encoder_cnn", "tensorflow.layers.dense"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.models.utils.encoder_cnn"], ["", "def", "get_q_actions", "(", "self", ")", ":", "\n", "        ", "inner_states", "=", "dqn", ".", "encoder_cnn", "(", "\n", "self", ".", "inputs", "[", "\"src\"", "]", ",", "self", ".", "inputs", "[", "\"src_len\"", "]", ",", "\n", "self", ".", "src_embeddings", ",", "self", ".", "pos_embeddings", ",", "\n", "self", ".", "filter_sizes", ",", "self", ".", "num_filters", ",", "self", ".", "hp", ".", "embedding_size", ",", "\n", "self", ".", "is_infer", ",", "num_channels", "=", "1", ")", "\n", "q_actions", "=", "tf", ".", "layers", ".", "dense", "(", "\n", "inner_states", ",", "units", "=", "self", ".", "hp", ".", "n_actions", ",", "use_bias", "=", "True", ")", "\n", "return", "q_actions", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.models.dqn_modeling.CnnDQN.get_train_op": [[155, 161], ["deepword.l2_loss_1d_action_v2", "dqn_modeling.CnnDQN.optimizer.minimize"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.models.utils.l2_loss_1d_action_v2"], ["", "def", "get_train_op", "(", "self", ",", "q_actions", ")", ":", "\n", "        ", "loss", ",", "abs_loss", "=", "dqn", ".", "l2_loss_1d_action_v2", "(", "\n", "q_actions", ",", "self", ".", "inputs", "[", "\"action_idx\"", "]", ",", "self", ".", "inputs", "[", "\"expected_q\"", "]", ",", "\n", "self", ".", "hp", ".", "n_actions", ",", "self", ".", "inputs", "[", "\"b_weight\"", "]", ")", "\n", "train_op", "=", "self", ".", "optimizer", ".", "minimize", "(", "loss", ",", "global_step", "=", "self", ".", "global_step", ")", "\n", "return", "loss", ",", "train_op", ",", "abs_loss", "\n", "", "", ""]], "home.repos.pwc.inspect_result.yinxusen_deepword.models.drrn_modeling.CnnDRRN.__init__": [[12, 45], ["deepword.models.dqn_modeling.BaseDQN.__init__", "tensorflow.constant", "tensorflow.get_variable", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.models.drrn_modeling.PseudoSeq2SeqDRRN.__init__"], ["    ", "def", "__init__", "(", "self", ",", "hp", ",", "src_embeddings", "=", "None", ",", "is_infer", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        inputs:\n          src: source sentences to encode\n          src_len: length of source sentences\n          action_idx: the action chose to run\n          expected_q: E(q) computed from the iterative equation of DQN\n          actions: all possible actions\n          actions_len: length of actions\n        :param hp:\n        :param is_infer:\n        \"\"\"", "\n", "super", "(", "CnnDRRN", ",", "self", ")", ".", "__init__", "(", "hp", ",", "src_embeddings", ",", "is_infer", ")", "\n", "self", ".", "filter_sizes", "=", "[", "3", ",", "4", ",", "5", "]", "\n", "self", ".", "num_filters", "=", "hp", ".", "num_conv_filters", "\n", "self", ".", "num_tokens", "=", "hp", ".", "num_tokens", "\n", "self", ".", "l2_loss", "=", "tf", ".", "constant", "(", "0.0", ")", "\n", "self", ".", "l2_reg_lambda", "=", "0.5", "\n", "\n", "self", ".", "pos_embeddings", "=", "tf", ".", "get_variable", "(", "\n", "name", "=", "\"pos_embeddings\"", ",", "dtype", "=", "tf", ".", "float32", ",", "\n", "shape", "=", "[", "self", ".", "num_tokens", ",", "self", ".", "hp", ".", "embedding_size", "]", ")", "\n", "\n", "self", ".", "inputs", "=", "{", "\n", "\"src\"", ":", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "[", "None", ",", "None", "]", ")", ",", "\n", "\"src_len\"", ":", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "[", "None", "]", ")", ",", "\n", "\"action_idx\"", ":", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "[", "None", "]", ")", ",", "\n", "\"b_weight\"", ":", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "None", "]", ")", ",", "\n", "\"expected_q\"", ":", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "None", "]", ")", ",", "\n", "\"actions\"", ":", "tf", ".", "placeholder", "(", "\n", "tf", ".", "int32", ",", "[", "None", ",", "self", ".", "hp", ".", "n_tokens_per_action", "]", ")", ",", "\n", "\"actions_repeats\"", ":", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "[", "None", "]", ")", ",", "\n", "\"actions_len\"", ":", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "[", "None", "]", ")", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.models.drrn_modeling.CnnDRRN.get_q_actions": [[47, 70], ["tensorflow.variable_scope", "deepword.encoder_cnn", "deepword.encoder_cnn", "tensorflow.layers.dense", "tensorflow.repeat", "tensorflow.reduce_sum", "tensorflow.variable_scope", "tensorflow.multiply", "deepword.encoder_lstm", "deepword.encoder_lstm"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.models.utils.encoder_cnn", "home.repos.pwc.inspect_result.yinxusen_deepword.models.utils.encoder_cnn", "home.repos.pwc.inspect_result.yinxusen_deepword.models.utils.encoder_lstm", "home.repos.pwc.inspect_result.yinxusen_deepword.models.utils.encoder_lstm"], ["", "def", "get_q_actions", "(", "self", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "\"drrn-encoder\"", ",", "reuse", "=", "False", ")", ":", "\n", "            ", "h_state", "=", "dqn", ".", "encoder_cnn", "(", "\n", "self", ".", "inputs", "[", "\"src\"", "]", ",", "self", ".", "inputs", "[", "\"src_len\"", "]", ",", "\n", "self", ".", "src_embeddings", ",", "self", ".", "pos_embeddings", ",", "\n", "self", ".", "filter_sizes", ",", "self", ".", "num_filters", ",", "self", ".", "hp", ".", "embedding_size", ",", "\n", "self", ".", "is_infer", ")", "\n", "new_h", "=", "tf", ".", "layers", ".", "dense", "(", "\n", "h_state", ",", "units", "=", "self", ".", "hp", ".", "hidden_state_size", ",", "use_bias", "=", "True", ")", "\n", "h_state_expanded", "=", "tf", ".", "repeat", "(", "\n", "new_h", ",", "self", ".", "inputs", "[", "\"actions_repeats\"", "]", ",", "axis", "=", "0", ")", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "\"drrn-action-encoder\"", ",", "reuse", "=", "False", ")", ":", "\n", "                ", "h_actions", "=", "dqn", ".", "encoder_lstm", "(", "\n", "self", ".", "inputs", "[", "\"actions\"", "]", ",", "\n", "self", ".", "inputs", "[", "\"actions_len\"", "]", ",", "\n", "self", ".", "src_embeddings", ",", "\n", "num_units", "=", "self", ".", "hp", ".", "hidden_state_size", ",", "\n", "num_layers", "=", "self", ".", "hp", ".", "lstm_num_layers", ")", "[", "-", "1", "]", ".", "h", "\n", "\n", "", "q_actions", "=", "tf", ".", "reduce_sum", "(", "\n", "tf", ".", "multiply", "(", "h_state_expanded", ",", "h_actions", ")", ",", "axis", "=", "-", "1", ")", "\n", "", "return", "q_actions", ",", "new_h", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.models.drrn_modeling.CnnDRRN.get_train_op": [[71, 77], ["deepword.l2_loss_1d_action", "deepword.l2_loss_1d_action", "drrn_modeling.CnnDRRN.optimizer.minimize"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.models.utils.l2_loss_1d_action", "home.repos.pwc.inspect_result.yinxusen_deepword.models.utils.l2_loss_1d_action"], ["", "def", "get_train_op", "(", "self", ",", "q_actions", ")", ":", "\n", "        ", "loss", ",", "abs_loss", "=", "dqn", ".", "l2_loss_1d_action", "(", "\n", "q_actions", ",", "self", ".", "inputs", "[", "\"action_idx\"", "]", ",", "self", ".", "inputs", "[", "\"expected_q\"", "]", ",", "\n", "self", ".", "inputs", "[", "\"b_weight\"", "]", ")", "\n", "train_op", "=", "self", ".", "optimizer", ".", "minimize", "(", "loss", ",", "global_step", "=", "self", ".", "global_step", ")", "\n", "return", "loss", ",", "train_op", ",", "abs_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.models.drrn_modeling.CnnDRRN.get_train_model": [[78, 107], ["tensorflow.Graph", "deepword.models.models.DRRNModel", "deepword.models.models.DRRNModel", "tensorflow.Graph.as_default", "tensorflow.device", "cls", "cls.get_q_actions", "cls.get_train_op", "tensorflow.summary.scalar", "tensorflow.summary.merge"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.models.drrn_modeling.PseudoSeq2SeqDRRN.get_q_actions", "home.repos.pwc.inspect_result.yinxusen_deepword.models.drrn_modeling.PseudoSeq2SeqDRRN.get_train_op"], ["", "@", "classmethod", "\n", "def", "get_train_model", "(", "cls", ",", "hp", ",", "device_placement", ")", ":", "\n", "        ", "graph", "=", "tf", ".", "Graph", "(", ")", "\n", "with", "graph", ".", "as_default", "(", ")", ":", "\n", "            ", "with", "tf", ".", "device", "(", "device_placement", ")", ":", "\n", "                ", "model", "=", "cls", "(", "hp", ")", "\n", "inputs", "=", "model", ".", "inputs", "\n", "q_actions", ",", "new_h", "=", "model", ".", "get_q_actions", "(", ")", "\n", "loss", ",", "train_op", ",", "abs_loss", "=", "model", ".", "get_train_op", "(", "q_actions", ")", "\n", "loss_summary", "=", "tf", ".", "summary", ".", "scalar", "(", "\"loss\"", ",", "loss", ")", "\n", "train_summary_op", "=", "tf", ".", "summary", ".", "merge", "(", "[", "loss_summary", "]", ")", "\n", "", "", "return", "DRRNModel", "(", "\n", "graph", "=", "graph", ",", "\n", "training", "=", "True", ",", "\n", "q_actions", "=", "q_actions", ",", "\n", "src_", "=", "inputs", "[", "\"src\"", "]", ",", "\n", "src_len_", "=", "inputs", "[", "\"src_len\"", "]", ",", "\n", "actions_", "=", "inputs", "[", "\"actions\"", "]", ",", "\n", "actions_len_", "=", "inputs", "[", "\"actions_len\"", "]", ",", "\n", "actions_repeats_", "=", "inputs", "[", "\"actions_repeats\"", "]", ",", "\n", "b_weight_", "=", "inputs", "[", "\"b_weight\"", "]", ",", "\n", "h_state", "=", "new_h", ",", "\n", "abs_loss", "=", "abs_loss", ",", "\n", "train_op", "=", "train_op", ",", "\n", "action_idx_", "=", "inputs", "[", "\"action_idx\"", "]", ",", "\n", "expected_q_", "=", "inputs", "[", "\"expected_q\"", "]", ",", "\n", "loss", "=", "loss", ",", "\n", "train_summary_op", "=", "train_summary_op", ",", "\n", "src_seg_", "=", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.models.drrn_modeling.CnnDRRN.get_eval_model": [[108, 134], ["tensorflow.Graph", "deepword.models.models.DRRNModel", "deepword.models.models.DRRNModel", "tensorflow.Graph.as_default", "tensorflow.device", "cls", "cls.get_q_actions"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.models.drrn_modeling.PseudoSeq2SeqDRRN.get_q_actions"], ["", "@", "classmethod", "\n", "def", "get_eval_model", "(", "cls", ",", "hp", ",", "device_placement", ")", ":", "\n", "        ", "graph", "=", "tf", ".", "Graph", "(", ")", "\n", "with", "graph", ".", "as_default", "(", ")", ":", "\n", "            ", "with", "tf", ".", "device", "(", "device_placement", ")", ":", "\n", "                ", "model", "=", "cls", "(", "hp", ",", "is_infer", "=", "True", ")", "\n", "inputs", "=", "model", ".", "inputs", "\n", "q_actions", ",", "new_h", "=", "model", ".", "get_q_actions", "(", ")", "\n", "", "", "return", "DRRNModel", "(", "\n", "graph", "=", "graph", ",", "\n", "training", "=", "False", ",", "\n", "q_actions", "=", "q_actions", ",", "\n", "src_", "=", "inputs", "[", "\"src\"", "]", ",", "\n", "src_len_", "=", "inputs", "[", "\"src_len\"", "]", ",", "\n", "actions_", "=", "inputs", "[", "\"actions\"", "]", ",", "\n", "actions_len_", "=", "inputs", "[", "\"actions_len\"", "]", ",", "\n", "actions_repeats_", "=", "inputs", "[", "\"actions_repeats\"", "]", ",", "\n", "h_state", "=", "new_h", ",", "\n", "b_weight_", "=", "None", ",", "\n", "abs_loss", "=", "None", ",", "\n", "train_op", "=", "None", ",", "\n", "action_idx_", "=", "None", ",", "\n", "expected_q_", "=", "None", ",", "\n", "loss", "=", "None", ",", "\n", "train_summary_op", "=", "None", ",", "\n", "src_seg_", "=", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.models.drrn_modeling.CnnDRRN.get_train_student_model": [[135, 138], ["cls.get_train_model"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.models.drrn_modeling.CnnDRRN.get_train_model"], ["", "@", "classmethod", "\n", "def", "get_train_student_model", "(", "cls", ",", "hp", ",", "device_placement", ")", ":", "\n", "        ", "return", "cls", ".", "get_train_model", "(", "hp", ",", "device_placement", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.models.drrn_modeling.CnnDRRN.get_eval_student_model": [[139, 142], ["cls.get_eval_model"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.models.drrn_modeling.CnnDRRN.get_eval_model"], ["", "@", "classmethod", "\n", "def", "get_eval_student_model", "(", "cls", ",", "hp", ",", "device_placement", ")", ":", "\n", "        ", "return", "cls", ".", "get_eval_model", "(", "hp", ",", "device_placement", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.models.drrn_modeling.TransformerDRRN.__init__": [[145, 161], ["drrn_modeling.CnnDRRN.__init__"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.models.drrn_modeling.PseudoSeq2SeqDRRN.__init__"], ["    ", "def", "__init__", "(", "self", ",", "hp", ",", "src_embeddings", "=", "None", ",", "is_infer", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        inputs:\n          src: source sentences to encode\n          src_len: length of source sentences\n          action_idx: the action chose to run\n          expected_q: E(q) computed from the iterative equation of DQN\n          actions: all possible actions\n          actions_len: length of actions\n          actions_mask: a 0-1 vector of size |actions|, using 0 to eliminate\n                        some actions for a certain state.\n        :param hp:\n        :param src_embeddings:\n        :param is_infer:\n        \"\"\"", "\n", "super", "(", "TransformerDRRN", ",", "self", ")", ".", "__init__", "(", "hp", ",", "src_embeddings", ",", "is_infer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.models.drrn_modeling.TransformerDRRN.get_q_actions": [[162, 189], ["tensorflow.variable_scope", "deepword.Encoder", "deepword.Encoder", "deepword.create_padding_mask", "deepword.create_padding_mask", "deepword.Encoder.", "tensorflow.reduce_max", "tensorflow.reshape", "tensorflow.layers.dense", "tensorflow.repeat", "tensorflow.reduce_sum", "tensorflow.variable_scope", "tensorflow.multiply", "deepword.encoder_lstm", "deepword.encoder_lstm"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.models.transformer.create_padding_mask", "home.repos.pwc.inspect_result.yinxusen_deepword.models.transformer.create_padding_mask", "home.repos.pwc.inspect_result.yinxusen_deepword.models.utils.encoder_lstm", "home.repos.pwc.inspect_result.yinxusen_deepword.models.utils.encoder_lstm"], ["", "def", "get_q_actions", "(", "self", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "\"drrn-encoder\"", ",", "reuse", "=", "False", ")", ":", "\n", "            ", "attn_encoder", "=", "txf", ".", "Encoder", "(", "\n", "num_layers", "=", "1", ",", "d_model", "=", "128", ",", "num_heads", "=", "8", ",", "dff", "=", "256", ",", "\n", "input_vocab_size", "=", "self", ".", "hp", ".", "vocab_size", ")", "\n", "padding_mask", "=", "txf", ".", "create_padding_mask", "(", "self", ".", "inputs", "[", "\"src\"", "]", ")", "\n", "inner_state", "=", "attn_encoder", "(", "\n", "self", ".", "inputs", "[", "\"src\"", "]", ",", "\n", "training", "=", "(", "not", "self", ".", "is_infer", ")", ",", "mask", "=", "padding_mask", ",", "x_seg", "=", "None", ")", "\n", "pooled", "=", "tf", ".", "reduce_max", "(", "inner_state", ",", "axis", "=", "1", ")", "\n", "h_state", "=", "tf", ".", "reshape", "(", "pooled", ",", "[", "-", "1", ",", "128", "]", ")", "\n", "new_h", "=", "tf", ".", "layers", ".", "dense", "(", "\n", "h_state", ",", "units", "=", "self", ".", "hp", ".", "hidden_state_size", ",", "use_bias", "=", "True", ")", "\n", "h_state_expanded", "=", "tf", ".", "repeat", "(", "\n", "new_h", ",", "self", ".", "inputs", "[", "\"actions_repeats\"", "]", ",", "axis", "=", "0", ")", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "\"drrn-action-encoder\"", ",", "reuse", "=", "False", ")", ":", "\n", "                ", "h_actions", "=", "dqn", ".", "encoder_lstm", "(", "\n", "self", ".", "inputs", "[", "\"actions\"", "]", ",", "\n", "self", ".", "inputs", "[", "\"actions_len\"", "]", ",", "\n", "self", ".", "src_embeddings", ",", "\n", "num_units", "=", "self", ".", "hp", ".", "hidden_state_size", ",", "\n", "num_layers", "=", "self", ".", "hp", ".", "lstm_num_layers", ")", "[", "-", "1", "]", ".", "h", "\n", "\n", "", "q_actions", "=", "tf", ".", "reduce_sum", "(", "\n", "tf", ".", "multiply", "(", "h_state_expanded", ",", "h_actions", ")", ",", "axis", "=", "-", "1", ")", "\n", "", "return", "q_actions", ",", "new_h", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.models.drrn_modeling.BertDRRN.__init__": [[192, 216], ["drrn_modeling.CnnDRRN.__init__", "tensorflow.layers.Dense", "tensorflow.truncated_normal_initializer"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.models.drrn_modeling.PseudoSeq2SeqDRRN.__init__"], ["    ", "def", "__init__", "(", "self", ",", "hp", ",", "src_embeddings", "=", "None", ",", "is_infer", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        inputs:\n          src: source sentences to encode\n          src_len: length of source sentences\n          action_idx: the action chose to run\n          expected_q: E(q) computed from the iterative equation of DQN\n          actions: all possible actions\n          actions_len: length of actions\n          actions_mask: a 0-1 vector of size |actions|, using 0 to eliminate\n                        some actions for a certain state.\n        :param hp:\n        :param is_infer:\n        \"\"\"", "\n", "super", "(", "BertDRRN", ",", "self", ")", ".", "__init__", "(", "hp", ",", "src_embeddings", ",", "is_infer", ")", "\n", "self", ".", "bert_init_ckpt_dir", "=", "conventions", ".", "bert_ckpt_dir", "\n", "self", ".", "bert_config_file", "=", "\"{}/bert_config.json\"", ".", "format", "(", "\n", "self", ".", "bert_init_ckpt_dir", ")", "\n", "self", ".", "bert_ckpt_file", "=", "\"{}/bert_model.ckpt\"", ".", "format", "(", "\n", "self", ".", "bert_init_ckpt_dir", ")", "\n", "self", ".", "h_state_size", "=", "self", ".", "hp", ".", "hidden_state_size", "\n", "self", ".", "wt", "=", "tf", ".", "layers", ".", "Dense", "(", "\n", "units", "=", "self", ".", "h_state_size", ",", "activation", "=", "tf", ".", "tanh", ",", "\n", "kernel_initializer", "=", "tf", ".", "truncated_normal_initializer", "(", "stddev", "=", "0.02", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.models.drrn_modeling.BertDRRN.get_q_actions": [[217, 256], ["tensorflow.sequence_mask", "bert.BertConfig.from_json_file", "tensorflow.constant", "tensorflow.pad", "tensorflow.pad", "tensorflow.train.init_from_checkpoint", "drrn_modeling.BertDRRN.wt", "tensorflow.repeat", "tensorflow.reduce_sum", "tensorflow.variable_scope", "bert.BertModel", "tensorflow.variable_scope", "tensorflow.multiply", "deepword.encoder_lstm", "deepword.encoder_lstm"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.models.utils.encoder_lstm", "home.repos.pwc.inspect_result.yinxusen_deepword.models.utils.encoder_lstm"], ["", "def", "get_q_actions", "(", "self", ")", ":", "\n", "        ", "src", "=", "self", ".", "inputs", "[", "\"src\"", "]", "\n", "src_len", "=", "self", ".", "inputs", "[", "\"src_len\"", "]", "\n", "src_masks", "=", "tf", ".", "sequence_mask", "(", "\n", "src_len", ",", "maxlen", "=", "self", ".", "hp", ".", "num_tokens", ",", "dtype", "=", "tf", ".", "int32", ")", "\n", "bert_config", "=", "b_model", ".", "BertConfig", ".", "from_json_file", "(", "self", ".", "bert_config_file", ")", "\n", "bert_config", ".", "num_hidden_layers", "=", "self", ".", "hp", ".", "bert_num_hidden_layers", "\n", "\n", "# padding the [CLS] in the beginning", "\n", "paddings", "=", "tf", ".", "constant", "(", "[", "[", "0", ",", "0", "]", ",", "[", "1", ",", "0", "]", "]", ")", "\n", "src_w_pad", "=", "tf", ".", "pad", "(", "\n", "src", ",", "paddings", "=", "paddings", ",", "mode", "=", "\"CONSTANT\"", ",", "\n", "constant_values", "=", "self", ".", "hp", ".", "cls_val_id", ")", "\n", "src_masks_w_pad", "=", "tf", ".", "pad", "(", "\n", "src_masks", ",", "paddings", "=", "paddings", ",", "mode", "=", "\"CONSTANT\"", ",", "\n", "constant_values", "=", "1", ")", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "\"tj-bert-encoder\"", ")", ":", "\n", "            ", "bert_model", "=", "b_model", ".", "BertModel", "(", "\n", "config", "=", "bert_config", ",", "is_training", "=", "(", "not", "self", ".", "is_infer", ")", ",", "\n", "input_ids", "=", "src_w_pad", ",", "input_mask", "=", "src_masks_w_pad", ")", "\n", "# initialize bert from checkpoint file", "\n", "", "tf", ".", "train", ".", "init_from_checkpoint", "(", "\n", "self", ".", "bert_ckpt_file", ",", "\n", "assignment_map", "=", "{", "\"bert/\"", ":", "\"tj-bert-encoder/bert/\"", "}", ")", "\n", "h_state", "=", "self", ".", "wt", "(", "bert_model", ".", "pooled_output", ")", "\n", "with", "tf", ".", "variable_scope", "(", "\"drrn-action-encoder\"", ",", "reuse", "=", "False", ")", ":", "\n", "            ", "h_actions", "=", "dqn", ".", "encoder_lstm", "(", "\n", "self", ".", "inputs", "[", "\"actions\"", "]", ",", "\n", "self", ".", "inputs", "[", "\"actions_len\"", "]", ",", "\n", "self", ".", "src_embeddings", ",", "\n", "num_units", "=", "self", ".", "hp", ".", "hidden_state_size", ",", "\n", "num_layers", "=", "self", ".", "hp", ".", "lstm_num_layers", ")", "[", "-", "1", "]", ".", "h", "\n", "\n", "", "h_state_expanded", "=", "tf", ".", "repeat", "(", "\n", "h_state", ",", "self", ".", "inputs", "[", "\"actions_repeats\"", "]", ",", "axis", "=", "0", ")", "\n", "q_actions", "=", "tf", ".", "reduce_sum", "(", "\n", "tf", ".", "multiply", "(", "h_state_expanded", ",", "h_actions", ")", ",", "axis", "=", "-", "1", ")", "\n", "return", "q_actions", ",", "h_state", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.models.drrn_modeling.PseudoSeq2SeqDRRN.__init__": [[259, 282], ["drrn_modeling.CnnDRRN.__init__", "deepword.BertDecoder", "deepword.BertDecoder"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.models.drrn_modeling.PseudoSeq2SeqDRRN.__init__"], ["    ", "def", "__init__", "(", "self", ",", "hp", ",", "src_embeddings", "=", "None", ",", "is_infer", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        inputs:\n          src: source sentences to encode\n          src_len: length of source sentences\n          action_idx: the action chose to run\n          expected_q: E(q) computed from the iterative equation of DQN\n          actions: all possible actions\n          actions_len: length of actions\n          actions_mask: a 0-1 vector of size |actions|, using 0 to eliminate\n                        some actions for a certain state.\n        :param hp:\n        :param is_infer:\n        \"\"\"", "\n", "super", "(", "PseudoSeq2SeqDRRN", ",", "self", ")", ".", "__init__", "(", "hp", ",", "src_embeddings", ",", "is_infer", ")", "\n", "self", ".", "bert_init_ckpt_dir", "=", "conventions", ".", "bert_ckpt_dir", "\n", "self", ".", "bert_config_file", "=", "\"{}/bert_config.json\"", ".", "format", "(", "\n", "self", ".", "bert_init_ckpt_dir", ")", "\n", "self", ".", "bert_ckpt_file", "=", "\"{}/bert_model.ckpt\"", ".", "format", "(", "\n", "self", ".", "bert_init_ckpt_dir", ")", "\n", "self", ".", "bert_decoder", "=", "txf", ".", "BertDecoder", "(", "\n", "num_layers", "=", "2", ",", "d_model", "=", "768", ",", "num_heads", "=", "12", ",", "dff", "=", "3072", ",", "\n", "tgt_vocab_size", "=", "self", ".", "hp", ".", "vocab_size", ",", "with_pointer", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.models.drrn_modeling.PseudoSeq2SeqDRRN.get_tgt_idx_pair": [[283, 323], ["tensorflow.concat", "tensorflow.reduce_min", "tensorflow.stack", "tensorflow.scatter_nd", "tensorflow.shape", "tensorflow.shape", "tensorflow.scatter_nd", "tensorflow.multiply", "tensorflow.fill", "tensorflow.range", "tensorflow.fill", "tensorflow.shape", "tensorflow.zeros_like", "tensorflow.fill", "tensorflow.shape"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "get_tgt_idx_pair", "(", "cls", ",", "tgt_matrix", ",", "tgt_len", ",", "sos_id", ",", "eos_id", ")", ":", "\n", "        ", "\"\"\"\n        Create action index pair for seq2seq training.\n        Given action index, e.g. [1, 2, 3, 4, pad, pad, pad, pad],\n        with 0 as sos_id, and -1 as eos_id,\n        we create training pair: [0, 1, 2, 3, 4, pad, pad, pad]\n        as the input sentence, and [1, 2, 3, 4, -1, pad, pad, pad]\n        as the output sentence.\n\n        Notice that we remove the final pad to keep the action length unchanged.\n        Notice 2. pad should be indexed as 0.\n\n        Args:\n            tgt_matrix: np array of action index of N * K, there are N\n            actions, and each of them has a length of K (with paddings).\n            tgt_len: length of each action (remove paddings).\n            sos_id: int\n            eos_id: int\n\n        Returns\n            action index as input, action index as output, new action len\n        \"\"\"", "\n", "n_row", "=", "tf", ".", "shape", "(", "tgt_matrix", ")", "[", "0", "]", "\n", "n_col", "=", "tf", ".", "shape", "(", "tgt_matrix", ")", "[", "1", "]", "\n", "tgt_in", "=", "tf", ".", "concat", "(", "\n", "[", "tf", ".", "fill", "(", "[", "n_row", ",", "1", "]", ",", "sos_id", ")", ",", "tgt_matrix", "[", ":", ",", ":", "-", "1", "]", "]", ",", "axis", "=", "1", ")", "\n", "new_action_len", "=", "tf", ".", "reduce_min", "(", "\n", "[", "tgt_len", "+", "1", ",", "tf", ".", "zeros_like", "(", "tgt_len", ")", "+", "n_col", "]", ",", "axis", "=", "0", ")", "\n", "idx", "=", "tf", ".", "stack", "(", "[", "tf", ".", "range", "(", "n_row", ")", ",", "new_action_len", "-", "1", "]", ",", "axis", "=", "-", "1", ")", "\n", "mask", "=", "1", "-", "tf", ".", "scatter_nd", "(", "\n", "indices", "=", "idx", ",", "\n", "updates", "=", "tf", ".", "fill", "(", "[", "n_row", "]", ",", "1", ")", ",", "\n", "shape", "=", "tf", ".", "shape", "(", "tgt_matrix", ")", ")", "\n", "eos_paddings", "=", "tf", ".", "scatter_nd", "(", "\n", "indices", "=", "idx", ",", "\n", "updates", "=", "tf", ".", "fill", "(", "[", "n_row", "]", ",", "eos_id", ")", ",", "\n", "shape", "=", "tf", ".", "shape", "(", "tgt_matrix", ")", ")", "\n", "tgt_out", "=", "tf", ".", "multiply", "(", "tgt_matrix", ",", "mask", ")", "+", "eos_paddings", "\n", "return", "tgt_in", ",", "tgt_out", ",", "new_action_len", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.models.drrn_modeling.PseudoSeq2SeqDRRN.get_q_actions": [[324, 376], ["tensorflow.reduce_max", "tensorflow.sequence_mask", "bert.BertConfig.from_json_file", "tensorflow.train.init_from_checkpoint", "bert.BertModel.get_sequence_output", "tensorflow.train.init_from_checkpoint", "tensorflow.sequence_mask", "tensorflow.reduce_mean", "tensorflow.variable_scope", "bert.BertModel", "tensorflow.variable_scope", "tensorflow.repeat", "drrn_modeling.PseudoSeq2SeqDRRN.get_tgt_idx_pair", "tensorflow.repeat", "deepword.create_padding_mask", "deepword.create_padding_mask", "deepword.create_pseudo_decode_masks", "deepword.create_pseudo_decode_masks", "drrn_modeling.PseudoSeq2SeqDRRN.bert_decoder", "tensorflow.tile", "tensorflow.tile", "tensorflow.stack", "tensorflow.gather_nd", "tensorflow.multiply", "tensorflow.reduce_max", "tensorflow.shape", "tensorflow.shape", "tensorflow.shape", "tensorflow.range", "tensorflow.range"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.models.transformer.BertDecoderModel.get_sequence_output", "home.repos.pwc.inspect_result.yinxusen_deepword.models.drrn_modeling.PseudoSeq2SeqDRRN.get_tgt_idx_pair", "home.repos.pwc.inspect_result.yinxusen_deepword.models.transformer.create_padding_mask", "home.repos.pwc.inspect_result.yinxusen_deepword.models.transformer.create_padding_mask", "home.repos.pwc.inspect_result.yinxusen_deepword.models.transformer.create_pseudo_decode_masks", "home.repos.pwc.inspect_result.yinxusen_deepword.models.transformer.create_pseudo_decode_masks"], ["", "def", "get_q_actions", "(", "self", ")", ":", "\n", "        ", "src", "=", "self", ".", "inputs", "[", "\"src\"", "]", "\n", "src_len", "=", "self", ".", "inputs", "[", "\"src_len\"", "]", "\n", "max_len", "=", "tf", ".", "reduce_max", "(", "[", "tf", ".", "reduce_max", "(", "src_len", ")", ",", "tf", ".", "shape", "(", "src", ")", "[", "1", "]", "]", ")", "\n", "src_masks", "=", "tf", ".", "sequence_mask", "(", "\n", "src_len", ",", "maxlen", "=", "max_len", ",", "dtype", "=", "tf", ".", "int32", ")", "\n", "bert_config", "=", "b_model", ".", "BertConfig", ".", "from_json_file", "(", "self", ".", "bert_config_file", ")", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "\"tj-bert-encoder\"", ")", ":", "\n", "            ", "bert_model", "=", "b_model", ".", "BertModel", "(", "\n", "config", "=", "bert_config", ",", "is_training", "=", "(", "not", "self", ".", "is_infer", ")", ",", "\n", "input_ids", "=", "src", ",", "input_mask", "=", "src_masks", ")", "\n", "# initialize bert from checkpoint file", "\n", "", "tf", ".", "train", ".", "init_from_checkpoint", "(", "\n", "self", ".", "bert_ckpt_file", ",", "\n", "assignment_map", "=", "{", "\"bert/\"", ":", "\"tj-bert-encoder/bert/\"", "}", ")", "\n", "h_state", "=", "bert_model", ".", "get_sequence_output", "(", ")", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "\"drrn-action-encoder\"", ",", "reuse", "=", "False", ")", ":", "\n", "            ", "h_state_expanded", "=", "tf", ".", "repeat", "(", "\n", "h_state", ",", "self", ".", "inputs", "[", "\"actions_repeats\"", "]", ",", "axis", "=", "0", ")", "\n", "tgt_in", ",", "tgt_out", ",", "tgt_len", "=", "self", ".", "get_tgt_idx_pair", "(", "\n", "self", ".", "inputs", "[", "\"actions\"", "]", ",", "\n", "self", ".", "inputs", "[", "\"actions_len\"", "]", ",", "\n", "self", ".", "hp", ".", "sos_id", ",", "\n", "self", ".", "hp", ".", "eos_id", ")", "\n", "inp", "=", "tf", ".", "repeat", "(", "\n", "self", ".", "inputs", "[", "\"src\"", "]", ",", "self", ".", "inputs", "[", "\"actions_repeats\"", "]", ",", "axis", "=", "0", ")", "\n", "enc_output", "=", "h_state_expanded", "\n", "dec_padding_mask", "=", "txf", ".", "create_padding_mask", "(", "inp", ")", "\n", "look_ahead_mask", "=", "txf", ".", "create_pseudo_decode_masks", "(", "tgt_in", ")", "\n", "final_output", ",", "p_gen", ",", "_", ",", "_", "=", "self", ".", "bert_decoder", "(", "\n", "tgt_in", ",", "inp", ",", "enc_output", ",", "not", "self", ".", "is_infer", ",", "look_ahead_mask", ",", "\n", "dec_padding_mask", ",", "copy_mask", "=", "None", ")", "\n", "\n", "batch_size", "=", "tf", ".", "shape", "(", "tgt_out", ")", "[", "0", "]", "\n", "tgt_seq_len", "=", "tf", ".", "shape", "(", "tgt_out", ")", "[", "1", "]", "\n", "idx_dim0", "=", "tf", ".", "tile", "(", "tf", ".", "range", "(", "batch_size", ")", "[", ":", ",", "None", "]", ",", "[", "1", ",", "tgt_seq_len", "]", ")", "\n", "idx_dim1", "=", "tf", ".", "tile", "(", "tf", ".", "range", "(", "tgt_seq_len", ")", "[", "None", ",", ":", "]", ",", "[", "batch_size", ",", "1", "]", ")", "\n", "idx_dim2", "=", "tgt_out", "\n", "idx_3d", "=", "tf", ".", "stack", "(", "[", "idx_dim0", ",", "idx_dim1", ",", "idx_dim2", "]", ",", "axis", "=", "-", "1", ")", "\n", "selected_logits", "=", "tf", ".", "gather_nd", "(", "final_output", ",", "idx_3d", ")", "\n", "\n", "", "tf", ".", "train", ".", "init_from_checkpoint", "(", "\n", "self", ".", "bert_ckpt_file", ",", "\n", "assignment_map", "=", "{", "\"bert/\"", ":", "\"drrn-action-encoder/bert-decoder/bert/\"", "}", ")", "\n", "\n", "tgt_len_mask", "=", "tf", ".", "sequence_mask", "(", "\n", "tgt_len", ",", "maxlen", "=", "tgt_seq_len", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "q_actions", "=", "tf", ".", "reduce_mean", "(", "\n", "tf", ".", "multiply", "(", "selected_logits", ",", "tgt_len_mask", ")", ",", "axis", "=", "-", "1", ")", "\n", "return", "q_actions", ",", "h_state", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.models.drrn_modeling.PseudoSeq2SeqDRRN.get_train_op": [[377, 394], ["deepword.l2_loss_1d_action", "deepword.l2_loss_1d_action", "tensorflow.trainable_variables", "tensorflow.trainable_variables", "list", "drrn_modeling.PseudoSeq2SeqDRRN.debug", "drrn_modeling.PseudoSeq2SeqDRRN.optimizer.minimize", "filter"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.models.utils.l2_loss_1d_action", "home.repos.pwc.inspect_result.yinxusen_deepword.models.utils.l2_loss_1d_action", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.log.Logging.debug"], ["", "def", "get_train_op", "(", "self", ",", "q_actions", ")", ":", "\n", "        ", "loss", ",", "abs_loss", "=", "dqn", ".", "l2_loss_1d_action", "(", "\n", "q_actions", ",", "self", ".", "inputs", "[", "\"action_idx\"", "]", ",", "self", ".", "inputs", "[", "\"expected_q\"", "]", ",", "\n", "self", ".", "inputs", "[", "\"b_weight\"", "]", ")", "\n", "\n", "var_encoder", "=", "tf", ".", "trainable_variables", "(", "scope", "=", "\"tj-bert-encoder\"", ")", "\n", "var_action_encoder", "=", "tf", ".", "trainable_variables", "(", "scope", "=", "\"drrn-action-encoder\"", ")", "\n", "allowed_var_action_encoder", "=", "list", "(", "filter", "(", "\n", "lambda", "v", ":", "\"bert-decoder\"", "not", "in", "v", ".", "name", ",", "var_action_encoder", ")", ")", "\n", "trainable_vars", "=", "var_encoder", "+", "allowed_var_action_encoder", "\n", "self", ".", "debug", "(", "\"trainable vars: {}\"", ".", "format", "(", "trainable_vars", ")", ")", "\n", "\n", "train_op", "=", "self", ".", "optimizer", ".", "minimize", "(", "\n", "loss", ",", "global_step", "=", "self", ".", "global_step", ",", "\n", "var_list", "=", "trainable_vars", ")", "\n", "\n", "return", "loss", ",", "train_op", ",", "abs_loss", "\n", "", "", ""]], "home.repos.pwc.inspect_result.yinxusen_deepword.tests.test_agent_input.TestAgentInput.test_dqn_input": [[79, 117], ["deepword.hparams.copy_hparams", "deepword.hparams.copy_hparams.set_hparam", "deepword.tokenizers.init_tokens", "list", "range", "range", "tokenizer.vocab.keys", "numpy.random.randint", "test_agent_input.gen_action_master", "deepword.students.utils.batch_dqn_input", "test_agent_input.TestAgentInput.assertTrue", "test_agent_input.gen_action_master", "numpy.random.randint", "deepword.students.utils.batch_dqn_input", "test_agent_input.TestAgentInput.assertTrue", "zip", "all", "all", "test_agent_input.TestAgentInput.assertTrue", "all", "numpy.where", "test_agent_input.TestAgentInput.assertTrue", "test_agent_input.TestAgentInput.assertTrue", "numpy.asarray"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.deepword.hparams.copy_hparams", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.tokenizers.init_tokens", "home.repos.pwc.inspect_result.yinxusen_deepword.tests.test_agent_input.gen_action_master", "home.repos.pwc.inspect_result.yinxusen_deepword.students.utils.batch_dqn_input", "home.repos.pwc.inspect_result.yinxusen_deepword.tests.test_agent_input.gen_action_master", "home.repos.pwc.inspect_result.yinxusen_deepword.students.utils.batch_dqn_input"], ["    ", "def", "test_dqn_input", "(", "self", ")", ":", "\n", "        ", "hp", "=", "copy_hparams", "(", "tokenizer_hp", ")", "\n", "hp", ".", "set_hparam", "(", "\"tokenizer_type\"", ",", "\"Bert\"", ")", "\n", "hp", ",", "tokenizer", "=", "init_tokens", "(", "hp", ")", "\n", "vocab", "=", "list", "(", "tokenizer", ".", "vocab", ".", "keys", "(", ")", ")", "\n", "\n", "for", "_", "in", "range", "(", "1000", ")", ":", "\n", "            ", "num_tokens", "=", "np", ".", "random", ".", "randint", "(", "1", ",", "1024", ")", "\n", "trajectories", "=", "gen_action_master", "(", "vocab", ",", "turns_up_to", "=", "5", ",", "n_rows", "=", "8", ")", "\n", "src", ",", "src_len", ",", "src_master_mask", "=", "batch_dqn_input", "(", "\n", "trajectories", ",", "tokenizer", ",", "num_tokens", ",", "hp", ".", "padding_val_id", ",", "\n", "with_action_padding", "=", "False", ",", "max_action_size", "=", "None", ")", "\n", "self", ".", "assertTrue", "(", "all", "(", "[", "0", "<", "x", "<=", "num_tokens", "for", "x", "in", "src_len", "]", ")", ")", "\n", "# TODO: how to test generated src?", "\n", "\n", "# test with action padding", "\n", "", "for", "_", "in", "range", "(", "1000", ")", ":", "\n", "            ", "num_tokens", "=", "256", "\n", "trajectories", "=", "gen_action_master", "(", "vocab", ",", "turns_up_to", "=", "5", ",", "n_rows", "=", "8", ")", "\n", "max_action_size", "=", "np", ".", "random", ".", "randint", "(", "1", ",", "num_tokens", ")", "\n", "src", ",", "src_len", ",", "src_master_mask", "=", "batch_dqn_input", "(", "\n", "trajectories", ",", "tokenizer", ",", "num_tokens", ",", "hp", ".", "padding_val_id", ",", "\n", "with_action_padding", "=", "True", ",", "max_action_size", "=", "max_action_size", ")", "\n", "self", ".", "assertTrue", "(", "all", "(", "[", "0", "<", "x", "<=", "num_tokens", "for", "x", "in", "src_len", "]", ")", ")", "\n", "for", "ss", ",", "ll", ",", "mm", "in", "zip", "(", "src", ",", "src_len", ",", "src_master_mask", ")", ":", "\n", "                ", "self", ".", "assertTrue", "(", "all", "(", "[", "x", "==", "0", "for", "x", "in", "ss", "[", "ll", ":", "]", "]", ")", ")", "\n", "if", "ll", "<", "num_tokens", ":", "# for those untrimmed trajectories", "\n", "                    ", "action_token_ids", "=", "np", ".", "where", "(", "np", ".", "asarray", "(", "mm", "[", ":", "ll", "]", ")", "==", "0", ")", "[", "0", "]", "\n", "next_starter_minimum", "=", "0", "\n", "for", "idx", "in", "action_token_ids", ":", "\n", "                        ", "if", "idx", ">=", "next_starter_minimum", ":", "\n", "                            ", "self", ".", "assertTrue", "(", "\n", "idx", "+", "max_action_size", "-", "1", "in", "action_token_ids", ")", "\n", "next_starter_minimum", "=", "idx", "+", "max_action_size", "\n", "", "else", ":", "\n", "                            ", "self", ".", "assertTrue", "(", "idx", "-", "1", "in", "action_token_ids", ")", "\n", "", "", "", "else", ":", "# for trimmed trajectories", "\n", "                    ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.tests.test_agent_input.TestAgentInput.test_drrn_action_input": [[118, 142], ["deepword.hparams.copy_hparams", "deepword.hparams.copy_hparams.set_hparam", "deepword.tokenizers.init_tokens", "test_agent_input.gen_action_collector", "gen_action_collector.get_game_ids", "deepword.agents.utils.batch_drrn_action_input", "deepword.agents.utils.id_real2batch", "range", "gen_action_collector.get_action_len", "gen_action_collector.get_action_matrix", "numpy.random.choice", "numpy.random.choice", "len", "test_agent_input.TestAgentInput.assertTrue", "list", "numpy.all", "range", "random.randint", "numpy.equal", "len", "len"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.deepword.hparams.copy_hparams", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.tokenizers.init_tokens", "home.repos.pwc.inspect_result.yinxusen_deepword.tests.test_agent_input.gen_action_collector", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.action.ActionCollector.get_game_ids", "home.repos.pwc.inspect_result.yinxusen_deepword.agents.utils.batch_drrn_action_input", "home.repos.pwc.inspect_result.yinxusen_deepword.agents.utils.id_real2batch", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.action.ActionCollector.get_action_len", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.action.ActionCollector.get_action_matrix"], ["", "", "", "", "def", "test_drrn_action_input", "(", "self", ")", ":", "\n", "        ", "hp", "=", "copy_hparams", "(", "tokenizer_hp", ")", "\n", "hp", ".", "set_hparam", "(", "\"tokenizer_type\"", ",", "\"NLTK\"", ")", "\n", "hp", ",", "tokenizer", "=", "init_tokens", "(", "hp", ")", "\n", "ac", "=", "gen_action_collector", "(", "hp", ",", "tokenizer", ")", "\n", "game_ids", "=", "ac", ".", "get_game_ids", "(", ")", "\n", "action_len", "=", "[", "ac", ".", "get_action_len", "(", "gid", ")", "for", "gid", "in", "game_ids", "]", "\n", "action_matrix", "=", "[", "ac", ".", "get_action_matrix", "(", "gid", ")", "for", "gid", "in", "game_ids", "]", "\n", "action_mask", "=", "[", "\n", "np", ".", "random", ".", "choice", "(", "\n", "list", "(", "range", "(", "len", "(", "actions", ")", ")", ")", ",", "\n", "size", "=", "random", ".", "randint", "(", "1", ",", "len", "(", "actions", ")", ")", ",", "replace", "=", "False", ")", "\n", "for", "actions", "in", "action_matrix", "]", "\n", "expected_ids", "=", "[", "np", ".", "random", ".", "choice", "(", "idx", ",", "size", "=", "None", ")", "for", "idx", "in", "action_mask", "]", "\n", "\n", "(", "inp_matrix", ",", "inp_len", ",", "actions_repeats", ",", "id_real2mask", "\n", ")", "=", "batch_drrn_action_input", "(", "action_matrix", ",", "action_len", ",", "action_mask", ")", "\n", "\n", "batch_ids", "=", "id_real2batch", "(", "expected_ids", ",", "id_real2mask", ",", "actions_repeats", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "game_ids", ")", ")", ":", "\n", "            ", "action1", "=", "action_matrix", "[", "i", "]", "[", "expected_ids", "[", "i", "]", "]", "\n", "action2", "=", "inp_matrix", "[", "batch_ids", "[", "i", "]", "]", "\n", "self", ".", "assertTrue", "(", "np", ".", "all", "(", "np", ".", "equal", "(", "action1", ",", "action2", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.tests.test_agent_input.TestAgentInput.test_bert_commonsense_input": [[143, 183], ["deepword.hparams.copy_hparams", "deepword.hparams.copy_hparams.set_hparam", "deepword.tokenizers.init_tokens", "list", "test_agent_input.gen_action_collector", "gen_action_collector.get_game_ids", "test_agent_input.gen_action_master", "deepword.students.utils.batch_dqn_input", "zip", "tokenizer.vocab.keys", "numpy.random.choice", "gen_action_collector.get_action_matrix", "len", "numpy.random.choice", "deepword.agents.utils.bert_nlu_input", "test_agent_input.TestAgentInput.assertEqual", "test_agent_input.TestAgentInput.assertEqual", "test_agent_input.TestAgentInput.assertEqual", "test_agent_input.TestAgentInput.assertTrue", "zip", "numpy.arange", "len", "len", "len", "len", "len", "len", "all", "test_agent_input.TestAgentInput.assertEqual", "test_agent_input.TestAgentInput.assertEqual", "test_agent_input.TestAgentInput.assertEqual", "test_agent_input.TestAgentInput.assertTrue", "test_agent_input.TestAgentInput.assertTrue", "list().index", "test_agent_input.TestAgentInput.assertTrue", "test_agent_input.TestAgentInput.assertTrue", "numpy.random.randint", "len", "all", "all", "all", "gen_action_collector.get_action_len", "list"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.deepword.hparams.copy_hparams", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.tokenizers.init_tokens", "home.repos.pwc.inspect_result.yinxusen_deepword.tests.test_agent_input.gen_action_collector", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.action.ActionCollector.get_game_ids", "home.repos.pwc.inspect_result.yinxusen_deepword.tests.test_agent_input.gen_action_master", "home.repos.pwc.inspect_result.yinxusen_deepword.students.utils.batch_dqn_input", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.action.ActionCollector.get_action_matrix", "home.repos.pwc.inspect_result.yinxusen_deepword.agents.utils.bert_nlu_input", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.action.ActionCollector.get_action_len"], ["", "", "def", "test_bert_commonsense_input", "(", "self", ")", ":", "\n", "        ", "hp", "=", "copy_hparams", "(", "tokenizer_hp", ")", "\n", "hp", ".", "set_hparam", "(", "\"tokenizer_type\"", ",", "\"Bert\"", ")", "\n", "hp", ",", "tokenizer", "=", "init_tokens", "(", "hp", ")", "\n", "vocab", "=", "list", "(", "tokenizer", ".", "vocab", ".", "keys", "(", ")", ")", "\n", "ac", "=", "gen_action_collector", "(", "hp", ",", "tokenizer", ")", "\n", "game_ids", "=", "ac", ".", "get_game_ids", "(", ")", "\n", "\n", "num_tokens", "=", "256", "\n", "n_tokens_per_action", "=", "10", "\n", "n_special_tokens", "=", "3", "\n", "n_tj_tokens", "=", "num_tokens", "-", "n_tokens_per_action", "-", "n_special_tokens", "\n", "trajectories", "=", "gen_action_master", "(", "vocab", ",", "turns_up_to", "=", "5", ",", "n_rows", "=", "8", ")", "\n", "src", ",", "src_len", ",", "src_master_mask", "=", "batch_dqn_input", "(", "\n", "trajectories", ",", "tokenizer", ",", "n_tj_tokens", ",", "hp", ".", "padding_val_id", ")", "\n", "for", "s", ",", "l", ",", "m", "in", "zip", "(", "src", ",", "src_len", ",", "src_master_mask", ")", ":", "\n", "            ", "gid", "=", "np", ".", "random", ".", "choice", "(", "game_ids", ")", "\n", "action_matrix", "=", "ac", ".", "get_action_matrix", "(", "gid", ")", "\n", "n_actions", "=", "len", "(", "action_matrix", ")", "\n", "action_mask", "=", "np", ".", "random", ".", "choice", "(", "\n", "np", ".", "arange", "(", "n_actions", ")", ",", "size", "=", "np", ".", "random", ".", "randint", "(", "1", ",", "n_actions", ")", ")", "\n", "inp", ",", "seg_tj_action", ",", "inp_size", "=", "bert_nlu_input", "(", "\n", "action_matrix", "=", "action_matrix", "[", "action_mask", "]", ",", "\n", "action_len", "=", "ac", ".", "get_action_len", "(", "gid", ")", "[", "action_mask", "]", ",", "\n", "trajectory", "=", "s", ",", "trajectory_len", "=", "l", ",", "\n", "sep_val_id", "=", "hp", ".", "sep_val_id", ",", "cls_val_id", "=", "hp", ".", "cls_val_id", ",", "\n", "num_tokens", "=", "num_tokens", ")", "\n", "self", ".", "assertEqual", "(", "len", "(", "action_mask", ")", ",", "len", "(", "inp", ")", ")", "\n", "self", ".", "assertEqual", "(", "len", "(", "inp", ")", ",", "len", "(", "seg_tj_action", ")", ")", "\n", "self", ".", "assertEqual", "(", "len", "(", "inp", ")", ",", "len", "(", "inp_size", ")", ")", "\n", "self", ".", "assertTrue", "(", "all", "(", "[", "0", "<", "x", "<=", "num_tokens", "for", "x", "in", "inp_size", "]", ")", ")", "\n", "for", "ii", ",", "ss", ",", "ll", "in", "zip", "(", "inp", ",", "seg_tj_action", ",", "inp_size", ")", ":", "\n", "                ", "self", ".", "assertEqual", "(", "len", "(", "ii", ")", ",", "num_tokens", ")", "\n", "self", ".", "assertEqual", "(", "ii", "[", "0", "]", ",", "hp", ".", "cls_val_id", ")", "\n", "self", ".", "assertEqual", "(", "ii", "[", "ll", "-", "1", "]", ",", "hp", ".", "sep_val_id", ")", "\n", "self", ".", "assertTrue", "(", "all", "(", "[", "x", "==", "0", "for", "x", "in", "ii", "[", "ll", ":", "]", "]", ")", ")", "\n", "self", ".", "assertTrue", "(", "hp", ".", "sep_val_id", "in", "ii", "[", ":", "ll", "-", "1", "]", ")", "\n", "inner_sep_idx", "=", "list", "(", "ii", "[", ":", "ll", "-", "1", "]", ")", ".", "index", "(", "hp", ".", "sep_val_id", ")", "\n", "self", ".", "assertTrue", "(", "all", "(", "[", "x", "==", "0", "for", "x", "in", "ss", "[", ":", "inner_sep_idx", "+", "1", "]", "]", ")", ")", "\n", "self", ".", "assertTrue", "(", "all", "(", "[", "x", "==", "1", "for", "x", "in", "ss", "[", "inner_sep_idx", "+", "1", ":", "]", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.tests.test_agent_input.TestAgentInput.test_sample_ids": [[184, 223], ["numpy.random.randint", "numpy.random.random", "numpy.zeros_like", "range", "numpy.sum", "numpy.random.randint", "deepword.agents.utils.sample_batch_ids", "test_agent_input.TestAgentInput.assertEqual", "q_actions[].reshape", "test_agent_input.TestAgentInput.assertTrue", "zip", "numpy.argmax", "test_agent_input.TestAgentInput.assertAlmostEqual", "numpy.concatenate", "test_agent_input.TestAgentInput.assertTrue", "numpy.random.randint", "numpy.max", "list", "len", "numpy.asarray().reshape", "test_agent_input.TestAgentInput.assertTrue", "test_agent_input.TestAgentInput.assertAlmostEqual", "len", "numpy.max", "test_agent_input.TestAgentInput.assertEqual", "numpy.argmax", "numpy.asarray", "len", "len", "set", "numpy.mean"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.agents.utils.sample_batch_ids", "home.repos.pwc.inspect_result.yinxusen_deepword.students.student_learner.CMD.set"], ["", "", "", "def", "test_sample_ids", "(", "self", ")", ":", "\n", "        ", "actions_repeats", "=", "np", ".", "random", ".", "randint", "(", "\n", "2", ",", "1024", ",", "size", "=", "np", ".", "random", ".", "randint", "(", "1", ",", "100", ")", ")", "\n", "q_actions", "=", "np", ".", "random", ".", "random", "(", "np", ".", "sum", "(", "actions_repeats", ")", ")", "\n", "selected_frequencies", "=", "np", ".", "zeros_like", "(", "q_actions", ")", "\n", "n_sampling_times", "=", "10000", "\n", "for", "_", "in", "range", "(", "n_sampling_times", ")", ":", "\n", "            ", "k", "=", "np", ".", "random", ".", "randint", "(", "1", ",", "np", ".", "max", "(", "actions_repeats", ")", ")", "\n", "action_ids", "=", "sample_batch_ids", "(", "q_actions", ",", "list", "(", "actions_repeats", ")", ",", "k", ")", "\n", "self", ".", "assertEqual", "(", "len", "(", "action_ids", ")", ",", "k", "*", "len", "(", "actions_repeats", ")", ")", "\n", "sampled_q_actions", "=", "q_actions", "[", "action_ids", "]", ".", "reshape", "(", "[", "-", "1", ",", "k", "]", ")", "\n", "self", ".", "assertTrue", "(", "\n", "[", "x", "==", "0", "for", "x", "in", "np", ".", "argmax", "(", "sampled_q_actions", ",", "axis", "=", "-", "1", ")", "]", ")", "\n", "idx_starter", "=", "0", "\n", "for", "n_repeats", ",", "ids", "in", "zip", "(", "\n", "actions_repeats", ",", "np", ".", "asarray", "(", "action_ids", ")", ".", "reshape", "(", "[", "-", "1", ",", "k", "]", ")", ")", ":", "\n", "                ", "self", ".", "assertTrue", "(", "\n", "[", "idx_starter", "<=", "x", "<", "idx_starter", "+", "n_repeats", "for", "x", "in", "ids", "]", ")", "\n", "self", ".", "assertAlmostEqual", "(", "\n", "q_actions", "[", "ids", "[", "0", "]", "]", ",", "\n", "np", ".", "max", "(", "q_actions", "[", "idx_starter", ":", "idx_starter", "+", "n_repeats", "]", ")", ")", "\n", "if", "n_repeats", ">=", "k", ":", "# assert selected items are unique", "\n", "                    ", "self", ".", "assertEqual", "(", "len", "(", "ids", ")", ",", "len", "(", "set", "(", "ids", ")", ")", ")", "\n", "", "selected_frequencies", "[", "ids", "]", "+=", "1", "\n", "idx_starter", "+=", "n_repeats", "\n", "\n", "", "", "idx_starter", "=", "0", "\n", "for", "n_repeats", "in", "actions_repeats", ":", "\n", "            ", "curr_frequencies", "=", "(", "\n", "selected_frequencies", "[", "idx_starter", ":", "idx_starter", "+", "n_repeats", "]", "\n", "/", "n_sampling_times", ")", "\n", "curr_max_id", "=", "np", ".", "argmax", "(", "curr_frequencies", ")", "\n", "self", ".", "assertAlmostEqual", "(", "curr_frequencies", "[", "curr_max_id", "]", ",", "1.0", ")", "\n", "others", "=", "np", ".", "concatenate", "(", "\n", "[", "curr_frequencies", "[", ":", "curr_max_id", "]", ",", "\n", "curr_frequencies", "[", "curr_max_id", "+", "1", ":", "]", "]", ")", "\n", "# assert uniformly selected", "\n", "self", ".", "assertTrue", "(", "[", "x", "<", "0.1", "for", "x", "in", "others", "-", "np", ".", "mean", "(", "others", ")", "]", ")", "\n", "idx_starter", "+=", "n_repeats", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.tests.test_agent_input.TestAgentInput.test_align_batch_str": [[224, 255], ["deepword.hparams.copy_hparams", "deepword.hparams.copy_hparams.set_hparam", "deepword.tokenizers.init_tokens", "list", "range", "tokenizer.vocab.keys", "numpy.random.randint", "test_agent_input.gen_rand_str", "deepword.students.utils.align_batch_str", "test_agent_input.TestAgentInput.assertTrue", "test_agent_input.TestAgentInput.assertTrue", "test_agent_input.TestAgentInput.assertTrue", "test_agent_input.TestAgentInput.assertTrue", "zip", "tokenizer.convert_tokens_to_ids", "len", "numpy.all", "test_agent_input.TestAgentInput.assertTrue", "range", "range", "tokenizer.tokenize", "max", "min", "test_agent_input.TestAgentInput.assertEqual", "test_agent_input.TestAgentInput.assertEqual", "min"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.deepword.hparams.copy_hparams", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.tokenizers.init_tokens", "home.repos.pwc.inspect_result.yinxusen_deepword.tests.test_agent_input.gen_rand_str", "home.repos.pwc.inspect_result.yinxusen_deepword.students.utils.align_batch_str", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.tokenizers.BertTokenizer.convert_tokens_to_ids", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.tokenizers.BertTokenizer.tokenize"], ["", "", "def", "test_align_batch_str", "(", "self", ")", ":", "\n", "        ", "hp", "=", "copy_hparams", "(", "tokenizer_hp", ")", "\n", "hp", ".", "set_hparam", "(", "\"tokenizer_type\"", ",", "\"NLTK\"", ")", "\n", "hp", ",", "tokenizer", "=", "init_tokens", "(", "hp", ")", "\n", "vocab", "=", "list", "(", "tokenizer", ".", "vocab", ".", "keys", "(", ")", ")", "\n", "\n", "for", "_", "in", "range", "(", "100", ")", ":", "\n", "            ", "num_tokens", "=", "np", ".", "random", ".", "randint", "(", "1", ",", "1024", ")", "\n", "n_rows", "=", "100", "\n", "data", "=", "gen_rand_str", "(", "\n", "vocab", ",", "length_up_to", "=", "num_tokens", ",", "n_rows", "=", "n_rows", ",", "\n", "allow_empty_str", "=", "True", ")", "\n", "ids", "=", "[", "tokenizer", ".", "convert_tokens_to_ids", "(", "tokenizer", ".", "tokenize", "(", "s", ")", ")", "\n", "for", "s", "in", "data", "]", "\n", "str_len_allowance", "=", "1000", "\n", "valid_len", "=", "[", "len", "(", "x", ")", "for", "x", "in", "ids", "]", "\n", "aligned_str", ",", "aligned_len", "=", "align_batch_str", "(", "\n", "ids", ",", "str_len_allowance", ",", "hp", ".", "padding_val_id", ",", "valid_len", ")", "\n", "\n", "self", ".", "assertTrue", "(", "np", ".", "all", "(", "aligned_len", "<=", "str_len_allowance", ")", ")", "\n", "self", ".", "assertTrue", "(", "aligned_str", ".", "shape", "[", "0", "]", "==", "n_rows", ")", "\n", "self", ".", "assertTrue", "(", "aligned_str", ".", "shape", "[", "1", "]", "<=", "str_len_allowance", ")", "\n", "self", ".", "assertTrue", "(", "aligned_str", ".", "shape", "[", "1", "]", "<=", "max", "(", "valid_len", ")", ")", "\n", "\n", "for", "s", ",", "l", ",", "raw_str", ",", "raw_len", "in", "zip", "(", "\n", "aligned_str", ",", "aligned_len", ",", "ids", ",", "valid_len", ")", ":", "\n", "                ", "self", ".", "assertTrue", "(", "l", "==", "min", "(", "raw_len", ",", "str_len_allowance", ")", ")", "\n", "for", "i", "in", "range", "(", "min", "(", "l", ",", "raw_len", ")", ")", ":", "\n", "                    ", "self", ".", "assertEqual", "(", "s", "[", "i", "]", ",", "raw_str", "[", "i", "]", ")", "\n", "", "for", "i", "in", "range", "(", "l", ",", "aligned_str", ".", "shape", "[", "1", "]", ")", ":", "\n", "                    ", "self", ".", "assertEqual", "(", "s", "[", "i", "]", ",", "hp", ".", "padding_val_id", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.tests.test_agent_input.gen_rand_str": [[36, 45], ["range", "random.randint", "res.append", "random.choices"], "function", ["home.repos.pwc.inspect_result.yinxusen_deepword.deepword.tree_memory.TreeMemory.append"], ["def", "gen_rand_str", "(", "\n", "vocab", ":", "List", "[", "str", "]", ",", "length_up_to", ":", "int", ",", "n_rows", ":", "int", ",", "\n", "allow_empty_str", ":", "bool", "=", "True", ")", "->", "List", "[", "str", "]", ":", "\n", "    ", "res", "=", "[", "]", "\n", "assert", "length_up_to", ">", "0", "\n", "for", "i", "in", "range", "(", "n_rows", ")", ":", "\n", "        ", "n_cols", "=", "random", ".", "randint", "(", "0", "if", "allow_empty_str", "else", "1", ",", "length_up_to", ")", "\n", "res", ".", "append", "(", "\" \"", ".", "join", "(", "random", ".", "choices", "(", "vocab", ",", "k", "=", "n_cols", ")", ")", ")", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.tests.test_agent_input.gen_action_master": [[47, 60], ["range", "numpy.random.randint", "test_agent_input.gen_rand_str", "test_agent_input.gen_rand_str", "res.append", "deepword.agents.utils.ActionMaster", "zip"], "function", ["home.repos.pwc.inspect_result.yinxusen_deepword.tests.test_agent_input.gen_rand_str", "home.repos.pwc.inspect_result.yinxusen_deepword.tests.test_agent_input.gen_rand_str", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.tree_memory.TreeMemory.append"], ["", "def", "gen_action_master", "(", "\n", "vocab", ":", "List", "[", "str", "]", ",", "turns_up_to", ":", "int", ",", "n_rows", ":", "int", "\n", ")", "->", "List", "[", "List", "[", "ActionMaster", "]", "]", ":", "\n", "    ", "assert", "turns_up_to", ">", "0", ",", "\"at least need 1-turn of action-master\"", "\n", "res", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "n_rows", ")", ":", "\n", "        ", "n_turns", "=", "np", ".", "random", ".", "randint", "(", "1", ",", "turns_up_to", "+", "1", ")", "\n", "rnd_actions", "=", "gen_rand_str", "(", "vocab", ",", "10", ",", "n_turns", ",", "allow_empty_str", "=", "False", ")", "\n", "rnd_masters", "=", "gen_rand_str", "(", "vocab", ",", "50", ",", "n_turns", ",", "allow_empty_str", "=", "False", ")", "\n", "res", ".", "append", "(", "\n", "[", "ActionMaster", "(", "action", "=", "a", ",", "master", "=", "m", ",", "action_ids", "=", "[", "]", ",", "master_ids", "=", "[", "]", ")", "\n", "for", "a", ",", "m", "in", "zip", "(", "rnd_actions", ",", "rnd_masters", ")", "]", ")", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.tests.test_agent_input.gen_action_collector": [[62, 76], ["deepword.action.ActionCollector", "list", "test_agent_input.gen_rand_str", "tokenizer.vocab.keys", "deepword.action.ActionCollector.add_new_episode", "deepword.action.ActionCollector.extend", "test_agent_input.gen_rand_str", "random.randint"], "function", ["home.repos.pwc.inspect_result.yinxusen_deepword.tests.test_agent_input.gen_rand_str", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.floor_plan.FloorPlanCollector.add_new_episode", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.floor_plan.FloorPlanCollector.extend", "home.repos.pwc.inspect_result.yinxusen_deepword.tests.test_agent_input.gen_rand_str"], ["", "def", "gen_action_collector", "(", "hp", ":", "HParams", ",", "tokenizer", ":", "Tokenizer", ")", "->", "ActionCollector", ":", "\n", "    ", "ac", "=", "ActionCollector", "(", "\n", "tokenizer", ",", "n_tokens", "=", "10", ",", "\n", "unk_val_id", "=", "hp", ".", "unk_val_id", ",", "padding_val_id", "=", "hp", ".", "padding_val_id", ")", "\n", "vocab", "=", "list", "(", "tokenizer", ".", "vocab", ".", "keys", "(", ")", ")", "\n", "\n", "game_ids", "=", "gen_rand_str", "(", "vocab", ",", "length_up_to", "=", "10", ",", "n_rows", "=", "1000", ")", "\n", "\n", "for", "gid", "in", "game_ids", ":", "\n", "        ", "ac", ".", "add_new_episode", "(", "gid", ")", "\n", "ac", ".", "extend", "(", "gen_rand_str", "(", "\n", "vocab", ",", "length_up_to", "=", "10", ",", "n_rows", "=", "random", ".", "randint", "(", "1", ",", "100", ")", ")", ")", "\n", "\n", "", "return", "ac", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.tests.test_utils.TestTeacherData.gen_random_bit_array": [[10, 21], ["numpy.random.randint", "numpy.sort", "bitarray.bitarray.bitarray", "numpy.random.choice", "bitarray.bitarray.bitarray.tobytes", "numpy.arange"], "methods", ["None"], ["    ", "@", "classmethod", "\n", "def", "gen_random_bit_array", "(", "cls", ",", "size", ":", "int", ")", ":", "\n", "        ", "n_samples", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "size", "//", "2", ")", "\n", "np_mask", "=", "np", ".", "sort", "(", "np", ".", "random", ".", "choice", "(", "\n", "np", ".", "arange", "(", "size", ")", ",", "size", "=", "n_samples", ",", "replace", "=", "False", ")", ")", "\n", "bit_mask_vec", "=", "bitarray", "(", "size", "+", "1", ",", "endian", "=", "\"little\"", ")", "\n", "bit_mask_vec", "[", ":", ":", "]", "=", "False", "\n", "bit_mask_vec", "[", "-", "1", "]", "=", "True", "# to avoid tail trimming for bytes", "\n", "for", "k", "in", "np_mask", ":", "\n", "            ", "bit_mask_vec", "[", "k", "]", "=", "True", "\n", "", "return", "bit_mask_vec", ".", "tobytes", "(", ")", ",", "np_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.yinxusen_deepword.tests.test_utils.TestTeacherData.test_bit_mask": [[22, 30], ["range", "numpy.random.randint", "test_utils.TestTeacherData.gen_random_bit_array", "deepword.utils.bytes2idx", "test_utils.TestTeacherData.assertEqual", "test_utils.TestTeacherData.assertTrue", "len", "len", "numpy.all", "numpy.equal"], "methods", ["home.repos.pwc.inspect_result.yinxusen_deepword.tests.test_utils.TestTeacherData.gen_random_bit_array", "home.repos.pwc.inspect_result.yinxusen_deepword.deepword.utils.bytes2idx"], ["", "def", "test_bit_mask", "(", "self", ")", ":", "\n", "        ", "n_samples", "=", "1000", "\n", "for", "_", "in", "range", "(", "n_samples", ")", ":", "\n", "            ", "n_actions", "=", "np", ".", "random", ".", "randint", "(", "1", ",", "1024", ")", "\n", "bit_mask", ",", "np_masks", "=", "self", ".", "gen_random_bit_array", "(", "n_actions", ")", "\n", "converted_np_mask", "=", "bytes2idx", "(", "bit_mask", ",", "size", "=", "n_actions", "+", "1", ")", "\n", "self", ".", "assertEqual", "(", "len", "(", "np_masks", ")", ",", "len", "(", "converted_np_mask", ")", ")", "\n", "self", ".", "assertTrue", "(", "np", ".", "all", "(", "np", ".", "equal", "(", "np_masks", ",", "converted_np_mask", ")", ")", ")", "\n", "", "", "", ""]]}