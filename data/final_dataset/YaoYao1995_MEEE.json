{"home.repos.pwc.inspect_result.YaoYao1995_MEEE.None.main.cli": [[4, 7], ["click.group", "main.run_example_local_cmd", "main.run_example_local_cmd"], "function", ["home.repos.pwc.inspect_result.YaoYao1995_MEEE.scripts.console_scripts.run_example_local_cmd", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.scripts.console_scripts.run_example_local_cmd"], ["@", "click", ".", "group", "(", ")", "\n", "def", "cli", "(", ")", ":", "\n", "    ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.None.main.run_example_local_cmd": [[8, 15], ["cli.command", "click.argument", "click.argument", "examples.instrument.run_example_local"], "function", ["home.repos.pwc.inspect_result.YaoYao1995_MEEE.examples.instrument.run_example_local"], ["", "@", "cli", ".", "command", "(", "\n", "name", "=", "'run_local'", ",", "\n", "context_settings", "=", "{", "'ignore_unknown_options'", ":", "True", "}", ")", "\n", "@", "click", ".", "argument", "(", "\"example_module_name\"", ",", "required", "=", "True", ",", "type", "=", "str", ")", "\n", "@", "click", ".", "argument", "(", "'example_argv'", ",", "nargs", "=", "-", "1", ",", "type", "=", "click", ".", "UNPROCESSED", ")", "\n", "def", "run_example_local_cmd", "(", "example_module_name", ",", "example_argv", ")", ":", "\n", "    ", "return", "run_example_local", "(", "example_module_name", ",", "example_argv", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.None.main.main": [[19, 21], ["main.cli"], "function", ["home.repos.pwc.inspect_result.YaoYao1995_MEEE.scripts.console_scripts.cli"], ["def", "main", "(", ")", ":", "\n", "    ", "return", "cli", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.examples.instrument._normalize_trial_resources": [[38, 55], ["None"], "function", ["None"], ["def", "_normalize_trial_resources", "(", "resources", ",", "cpu", ",", "gpu", ",", "extra_cpu", ",", "extra_gpu", ")", ":", "\n", "    ", "if", "resources", "is", "None", ":", "\n", "        ", "resources", "=", "{", "}", "\n", "\n", "", "if", "cpu", "is", "not", "None", ":", "\n", "        ", "resources", "[", "'cpu'", "]", "=", "cpu", "\n", "\n", "", "if", "gpu", "is", "not", "None", ":", "\n", "        ", "resources", "[", "'gpu'", "]", "=", "gpu", "\n", "\n", "", "if", "extra_cpu", "is", "not", "None", ":", "\n", "        ", "resources", "[", "'extra_cpu'", "]", "=", "extra_cpu", "\n", "\n", "", "if", "extra_gpu", "is", "not", "None", ":", "\n", "        ", "resources", "[", "'extra_gpu'", "]", "=", "extra_gpu", "\n", "\n", "", "return", "resources", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.examples.instrument.add_command_line_args_to_variant_spec": [[57, 74], ["variant_spec[].update", "variant_spec[].get", "variant_spec[].get"], "function", ["home.repos.pwc.inspect_result.YaoYao1995_MEEE.utils.logging.Progress.update"], ["", "def", "add_command_line_args_to_variant_spec", "(", "variant_spec", ",", "command_line_args", ")", ":", "\n", "    ", "variant_spec", "[", "'run_params'", "]", ".", "update", "(", "{", "\n", "'checkpoint_frequency'", ":", "(", "\n", "command_line_args", ".", "checkpoint_frequency", "\n", "if", "command_line_args", ".", "checkpoint_frequency", "is", "not", "None", "\n", "else", "variant_spec", "[", "'run_params'", "]", ".", "get", "(", "'checkpoint_frequency'", ",", "0", ")", "\n", ")", ",", "\n", "'checkpoint_at_end'", ":", "(", "\n", "command_line_args", ".", "checkpoint_at_end", "\n", "if", "command_line_args", ".", "checkpoint_at_end", "is", "not", "None", "\n", "else", "variant_spec", "[", "'run_params'", "]", ".", "get", "(", "'checkpoint_at_end'", ",", "True", ")", "\n", ")", ",", "\n", "}", ")", "\n", "\n", "variant_spec", "[", "'restore'", "]", "=", "command_line_args", ".", "restore", "\n", "\n", "return", "variant_spec", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.examples.instrument.generate_experiment": [[76, 129], ["add_command_line_args_to_variant_spec.get", "random.seed", "numpy.random.seed", "tensorflow.random.set_random_seed", "os.path.join", "instrument._normalize_trial_resources", "variant_spec.get.get", "instrument.add_command_line_args_to_variant_spec", "variant_spec.get.get", "variant_spec.get.get", "variant_spec.get.get", "variant_spec.get.get", "ray.tune.function", "instrument.generate_experiment.create_trial_name_creator"], "function", ["home.repos.pwc.inspect_result.YaoYao1995_MEEE.adapters.softlearning_env.SoftlearningEnv.seed", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.adapters.softlearning_env.SoftlearningEnv.seed", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.examples.instrument._normalize_trial_resources", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.examples.instrument.add_command_line_args_to_variant_spec"], ["", "def", "generate_experiment", "(", "trainable_class", ",", "variant_spec", ",", "command_line_args", ")", ":", "\n", "    ", "params", "=", "variant_spec", ".", "get", "(", "'algorithm_params'", ")", "\n", "# set random seed ", "\n", "random", ".", "seed", "(", "params", ".", "get", "(", "'seed'", ")", ")", "\n", "np", ".", "random", ".", "seed", "(", "params", ".", "get", "(", "'seed'", ")", ")", "\n", "tf", ".", "random", ".", "set_random_seed", "(", "params", ".", "get", "(", "'seed'", ")", ")", "\n", "\n", "local_dir", "=", "os", ".", "path", ".", "join", "(", "\n", "command_line_args", ".", "log_dir", "or", "params", ".", "get", "(", "'log_dir'", ")", ",", "\n", "params", ".", "get", "(", "'domain'", ")", ")", "\n", "resources_per_trial", "=", "_normalize_trial_resources", "(", "\n", "command_line_args", ".", "resources_per_trial", ",", "\n", "command_line_args", ".", "trial_cpus", ",", "\n", "command_line_args", ".", "trial_gpus", ",", "\n", "command_line_args", ".", "trial_extra_cpus", ",", "\n", "command_line_args", ".", "trial_extra_gpus", ")", "\n", "\n", "experiment_id", "=", "params", ".", "get", "(", "'exp_name'", ")", "\n", "\n", "variant_spec", "=", "add_command_line_args_to_variant_spec", "(", "\n", "variant_spec", ",", "command_line_args", ")", "\n", "\n", "if", "command_line_args", ".", "video_save_frequency", "is", "not", "None", ":", "\n", "        ", "assert", "'algorithm_params'", "in", "variant_spec", "\n", "variant_spec", "[", "'algorithm_params'", "]", "[", "'kwargs'", "]", "[", "'video_save_frequency'", "]", "=", "(", "\n", "command_line_args", ".", "video_save_frequency", ")", "\n", "\n", "", "def", "create_trial_name_creator", "(", "trial_name_template", "=", "None", ")", ":", "\n", "        ", "if", "not", "trial_name_template", ":", "\n", "            ", "return", "None", "\n", "\n", "", "def", "trial_name_creator", "(", "trial", ")", ":", "\n", "            ", "return", "trial_name_template", ".", "format", "(", "trial", "=", "trial", ")", "\n", "\n", "", "return", "tune", ".", "function", "(", "trial_name_creator", ")", "\n", "\n", "", "experiment", "=", "{", "\n", "'run'", ":", "trainable_class", ",", "\n", "'resources_per_trial'", ":", "resources_per_trial", ",", "\n", "'config'", ":", "variant_spec", ",", "\n", "'local_dir'", ":", "local_dir", ",", "\n", "'num_samples'", ":", "command_line_args", ".", "num_samples", ",", "\n", "'upload_dir'", ":", "command_line_args", ".", "upload_dir", ",", "\n", "'checkpoint_freq'", ":", "(", "\n", "variant_spec", "[", "'run_params'", "]", "[", "'checkpoint_frequency'", "]", ")", ",", "\n", "'checkpoint_at_end'", ":", "(", "\n", "variant_spec", "[", "'run_params'", "]", "[", "'checkpoint_at_end'", "]", ")", ",", "\n", "'trial_name_creator'", ":", "create_trial_name_creator", "(", "\n", "command_line_args", ".", "trial_name_template", ")", ",", "\n", "'restore'", ":", "command_line_args", ".", "restore", ",", "# Defaults to None", "\n", "}", "\n", "\n", "return", "experiment_id", ",", "experiment", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.examples.instrument.unique_cluster_name": [[131, 140], ["softlearning.misc.utils.datetimestamp", "str", "uuid.uuid4"], "function", ["home.repos.pwc.inspect_result.YaoYao1995_MEEE.misc.utils.datetimestamp"], ["", "def", "unique_cluster_name", "(", "args", ")", ":", "\n", "    ", "cluster_name_parts", "=", "(", "\n", "datetimestamp", "(", "''", ")", ",", "\n", "str", "(", "uuid", ".", "uuid4", "(", ")", ")", "[", ":", "6", "]", ",", "\n", "args", ".", "domain", ",", "\n", "args", ".", "task", "\n", ")", "\n", "cluster_name", "=", "\"-\"", ".", "join", "(", "cluster_name_parts", ")", ".", "lower", "(", ")", "\n", "return", "cluster_name", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.examples.instrument.get_experiments_info": [[142, 158], ["sum", "number_of_trials.values", "len", "experiments.items", "list", "ray.tune.suggest.variant_generator.generate_variants"], "function", ["None"], ["", "def", "get_experiments_info", "(", "experiments", ")", ":", "\n", "    ", "number_of_trials", "=", "{", "\n", "experiment_id", ":", "len", "(", "list", "(", "\n", "tune", ".", "suggest", ".", "variant_generator", ".", "generate_variants", "(", "\n", "experiment_spec", "[", "'config'", "]", ")", "\n", ")", ")", "*", "experiment_spec", "[", "'num_samples'", "]", "\n", "for", "experiment_id", ",", "experiment_spec", "in", "experiments", ".", "items", "(", ")", "\n", "}", "\n", "total_number_of_trials", "=", "sum", "(", "number_of_trials", ".", "values", "(", ")", ")", "\n", "\n", "experiments_info", "=", "{", "\n", "\"number_of_trials\"", ":", "number_of_trials", ",", "\n", "\"total_number_of_trials\"", ":", "total_number_of_trials", ",", "\n", "}", "\n", "\n", "return", "experiments_info", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.examples.instrument.confirm_yes_no": [[160, 174], ["input().lower", "input().lower", "input", "exit", "print", "input"], "function", ["None"], ["", "def", "confirm_yes_no", "(", "prompt", ")", ":", "\n", "# raw_input returns the empty string for \"enter\"", "\n", "    ", "yes", "=", "{", "'yes'", ",", "'ye'", ",", "'y'", "}", "\n", "no", "=", "{", "'no'", ",", "'n'", "}", "\n", "\n", "choice", "=", "input", "(", "prompt", ")", ".", "lower", "(", ")", "\n", "while", "True", ":", "\n", "        ", "if", "choice", "in", "yes", ":", "\n", "            ", "return", "True", "\n", "", "elif", "choice", "in", "no", ":", "\n", "            ", "exit", "(", "0", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"Please respond with 'yes' or 'no'.\\n(yes/no)\"", ")", "\n", "", "choice", "=", "input", "(", ")", ".", "lower", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.examples.instrument.run_example_dry": [[176, 206], ["importlib.import_module", "importlib.import_module.get_parser().parse_args", "importlib.import_module.get_variant_spec", "importlib.import_module.get_trainable_class", "instrument.generate_experiment", "instrument.get_experiments_info", "print", "importlib.import_module.get_parser", "pprint.pformat", "pprint.pformat"], "function", ["home.repos.pwc.inspect_result.YaoYao1995_MEEE.development.simulate_policy.parse_args", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.development.__init__.get_variant_spec", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.development.__init__.get_trainable_class", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.examples.instrument.generate_experiment", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.examples.instrument.get_experiments_info", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.development.__init__.get_parser"], ["", "", "def", "run_example_dry", "(", "example_module_name", ",", "example_argv", ")", ":", "\n", "    ", "\"\"\"Print the variant spec and related information of an example.\"\"\"", "\n", "example_module", "=", "importlib", ".", "import_module", "(", "example_module_name", ")", "\n", "\n", "example_args", "=", "example_module", ".", "get_parser", "(", ")", ".", "parse_args", "(", "example_argv", ")", "\n", "variant_spec", "=", "example_module", ".", "get_variant_spec", "(", "example_args", ")", "\n", "trainable_class", "=", "example_module", ".", "get_trainable_class", "(", "example_args", ")", "\n", "\n", "experiment_id", ",", "experiment", "=", "generate_experiment", "(", "\n", "trainable_class", ",", "variant_spec", ",", "example_args", ")", "\n", "\n", "experiments", "=", "{", "experiment_id", ":", "experiment", "}", "\n", "\n", "experiments_info", "=", "get_experiments_info", "(", "experiments", ")", "\n", "number_of_trials", "=", "experiments_info", "[", "\"number_of_trials\"", "]", "\n", "total_number_of_trials", "=", "experiments_info", "[", "\"total_number_of_trials\"", "]", "\n", "\n", "experiments_info_text", "=", "f\"\"\"\nDry run.\n\nExperiment specs:\n{pformat(experiments, indent=2)}\n\nNumber of trials:\n{pformat(number_of_trials, indent=2)}\n\nNumber of total trials (including samples/seeds): {total_number_of_trials}\n\"\"\"", "\n", "\n", "print", "(", "experiments_info_text", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.examples.instrument.run_example_local": [[208, 233], ["importlib.import_module", "importlib.import_module.get_parser().parse_args", "importlib.import_module.get_variant_spec", "importlib.import_module.get_trainable_class", "instrument.generate_experiment", "ray.init", "ray.tune.run_experiments", "importlib.import_module.get_parser"], "function", ["home.repos.pwc.inspect_result.YaoYao1995_MEEE.development.simulate_policy.parse_args", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.development.__init__.get_variant_spec", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.development.__init__.get_trainable_class", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.examples.instrument.generate_experiment", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.development.__init__.get_parser"], ["", "def", "run_example_local", "(", "example_module_name", ",", "example_argv", ",", "local_mode", "=", "False", ")", ":", "\n", "    ", "\"\"\"Run example locally, potentially parallelizing across cpus/gpus.\"\"\"", "\n", "example_module", "=", "importlib", ".", "import_module", "(", "example_module_name", ")", "\n", "\n", "example_args", "=", "example_module", ".", "get_parser", "(", ")", ".", "parse_args", "(", "example_argv", ")", "\n", "variant_spec", "=", "example_module", ".", "get_variant_spec", "(", "example_args", ")", "\n", "trainable_class", "=", "example_module", ".", "get_trainable_class", "(", "example_args", ")", "\n", "\n", "experiment_id", ",", "experiment", "=", "generate_experiment", "(", "\n", "trainable_class", ",", "variant_spec", ",", "example_args", ")", "\n", "experiments", "=", "{", "experiment_id", ":", "experiment", "}", "\n", "\n", "ray", ".", "init", "(", "\n", "num_cpus", "=", "example_args", ".", "cpus", ",", "\n", "num_gpus", "=", "example_args", ".", "gpus", ",", "\n", "resources", "=", "example_args", ".", "resources", "or", "{", "}", ",", "\n", "local_mode", "=", "local_mode", ",", "\n", "#include_webui=example_args.include_webui,", "\n", "temp_dir", "=", "\"./ray_tmp\"", ")", "\n", "\n", "tune", ".", "run_experiments", "(", "\n", "experiments", ",", "\n", "with_server", "=", "example_args", ".", "with_server", ",", "\n", "server_port", "=", "4321", ",", "\n", "scheduler", "=", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.examples.instrument.run_example_debug": [[235, 259], ["instrument.run_example_local", "multiprocessing.cpu_count", "debug_example_argv.append", "print", "debug_example_argv.append"], "function", ["home.repos.pwc.inspect_result.YaoYao1995_MEEE.examples.instrument.run_example_local"], ["", "def", "run_example_debug", "(", "example_module_name", ",", "example_argv", ")", ":", "\n", "    ", "\"\"\"The debug mode limits tune trial runs to enable use of debugger.\n\n    The debug mode should allow easy switch between parallelized and\n    non-parallelized runs such that the debugger can be reasonably used when\n    running the code. In practice, this allocates all the cpus available in ray\n    such that only a single trial can run at once.\n\n    TODO(hartikainen): This should allocate a custom \"debug_resource\" instead\n    of all cpus once ray local mode supports custom resources.\n    \"\"\"", "\n", "\n", "debug_example_argv", "=", "[", "]", "\n", "for", "option", "in", "example_argv", ":", "\n", "        ", "if", "'--trial-cpus'", "in", "option", ":", "\n", "            ", "available_cpus", "=", "multiprocessing", ".", "cpu_count", "(", ")", "\n", "debug_example_argv", ".", "append", "(", "f'--trial-cpus={available_cpus}'", ")", "\n", "", "elif", "'--upload-dir'", "in", "option", ":", "\n", "            ", "print", "(", "f\"Ignoring {option} due to debug mode.\"", ")", "\n", "continue", "\n", "", "else", ":", "\n", "            ", "debug_example_argv", ".", "append", "(", "option", ")", "\n", "\n", "", "", "run_example_local", "(", "example_module_name", ",", "debug_example_argv", ",", "local_mode", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.examples.instrument.run_example_cluster": [[261, 293], ["importlib.import_module", "importlib.import_module.get_parser().parse_args", "importlib.import_module.get_variant_spec", "importlib.import_module.get_trainable_class", "instrument.generate_experiment", "ray.init", "ray.tune.run_experiments", "ray.services.get_node_ip_address", "importlib.import_module.get_parser"], "function", ["home.repos.pwc.inspect_result.YaoYao1995_MEEE.development.simulate_policy.parse_args", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.development.__init__.get_variant_spec", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.development.__init__.get_trainable_class", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.examples.instrument.generate_experiment", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.development.__init__.get_parser"], ["", "def", "run_example_cluster", "(", "example_module_name", ",", "example_argv", ")", ":", "\n", "    ", "\"\"\"Run example on cluster mode.\n\n    This functions is very similar to the local mode, except that it\n    correctly sets the redis address to make ray/tune work on a cluster.\n    \"\"\"", "\n", "example_module", "=", "importlib", ".", "import_module", "(", "example_module_name", ")", "\n", "\n", "example_args", "=", "example_module", ".", "get_parser", "(", ")", ".", "parse_args", "(", "example_argv", ")", "\n", "variant_spec", "=", "example_module", ".", "get_variant_spec", "(", "example_args", ")", "\n", "trainable_class", "=", "example_module", ".", "get_trainable_class", "(", "example_args", ")", "\n", "\n", "experiment_id", ",", "experiment", "=", "generate_experiment", "(", "\n", "trainable_class", ",", "variant_spec", ",", "example_args", ")", "\n", "experiments", "=", "{", "experiment_id", ":", "experiment", "}", "\n", "\n", "redis_address", "=", "ray", ".", "services", ".", "get_node_ip_address", "(", ")", "+", "':6379'", "\n", "\n", "ray", ".", "init", "(", "\n", "redis_address", "=", "redis_address", ",", "\n", "num_cpus", "=", "example_args", ".", "cpus", ",", "\n", "num_gpus", "=", "example_args", ".", "gpus", ",", "\n", "local_mode", "=", "False", ",", "\n", "include_webui", "=", "example_args", ".", "include_webui", ",", "\n", "temp_dir", "=", "example_args", ".", "temp_dir", ")", "\n", "\n", "tune", ".", "run_experiments", "(", "\n", "experiments", ",", "\n", "with_server", "=", "example_args", ".", "with_server", ",", "\n", "server_port", "=", "4321", ",", "\n", "scheduler", "=", "None", ",", "\n", "queue_trials", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.examples.instrument.launch_example_cluster": [[295, 352], ["importlib.import_module", "importlib.import_module.get_parser().parse_args", "importlib.import_module.get_variant_spec", "importlib.import_module.get_trainable_class", "instrument.generate_experiment", "instrument.get_experiments_info", "instrument.confirm_yes_no", "ray.autoscaler.commands.exec_cluster", "instrument.confirm_yes_no", "instrument.unique_cluster_name", "importlib.import_module.get_parser"], "function", ["home.repos.pwc.inspect_result.YaoYao1995_MEEE.development.simulate_policy.parse_args", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.development.__init__.get_variant_spec", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.development.__init__.get_trainable_class", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.examples.instrument.generate_experiment", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.examples.instrument.get_experiments_info", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.examples.instrument.confirm_yes_no", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.examples.instrument.confirm_yes_no", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.examples.instrument.unique_cluster_name", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.development.__init__.get_parser"], ["", "def", "launch_example_cluster", "(", "example_module_name", ",", "\n", "example_argv", ",", "\n", "config_file", ",", "\n", "screen", ",", "\n", "tmux", ",", "\n", "stop", ",", "\n", "start", ",", "\n", "override_cluster_name", ",", "\n", "port_forward", ")", ":", "\n", "    ", "\"\"\"Launches the example on autoscaled ray cluster through ray exec_cmd.\n\n    This handles basic validation and sanity checks for the experiment, and\n    then executes the command on autoscaled ray cluster. If necessary, it will\n    also fill in more useful defaults for our workflow (i.e. for tmux and\n    cluster_name).\n    \"\"\"", "\n", "example_module", "=", "importlib", ".", "import_module", "(", "example_module_name", ")", "\n", "\n", "example_args", "=", "example_module", ".", "get_parser", "(", ")", ".", "parse_args", "(", "example_argv", ")", "\n", "variant_spec", "=", "example_module", ".", "get_variant_spec", "(", "example_args", ")", "\n", "trainable_class", "=", "example_module", ".", "get_trainable_class", "(", "example_args", ")", "\n", "\n", "experiment_id", ",", "experiment", "=", "generate_experiment", "(", "\n", "trainable_class", ",", "variant_spec", ",", "example_args", ")", "\n", "experiments", "=", "{", "experiment_id", ":", "experiment", "}", "\n", "\n", "experiments_info", "=", "get_experiments_info", "(", "experiments", ")", "\n", "total_number_of_trials", "=", "experiments_info", "[", "'total_number_of_trials'", "]", "\n", "\n", "if", "not", "example_args", ".", "upload_dir", ":", "\n", "        ", "confirm_yes_no", "(", "\n", "\"`upload_dir` is empty. No results will be uploaded to cloud\"", "\n", "\" storage. Use `--upload-dir` argument to set upload dir.\"", "\n", "\" Continue without upload directory?\\n(yes/no) \"", ")", "\n", "\n", "", "confirm_yes_no", "(", "f\"Launch {total_number_of_trials} trials?\\n(yes/no) \"", ")", "\n", "\n", "override_cluster_name", "=", "override_cluster_name", "or", "unique_cluster_name", "(", "\n", "example_args", ")", "\n", "\n", "cluster_command_parts", "=", "(", "\n", "'softlearning'", ",", "\n", "'run_example_cluster'", ",", "\n", "example_module_name", ",", "\n", "*", "example_argv", ")", "\n", "cluster_command", "=", "' '", ".", "join", "(", "cluster_command_parts", ")", "\n", "\n", "return", "exec_cluster", "(", "\n", "config_file", "=", "config_file", ",", "\n", "cmd", "=", "cluster_command", ",", "\n", "docker", "=", "False", ",", "\n", "screen", "=", "screen", ",", "\n", "tmux", "=", "tmux", ",", "\n", "stop", "=", "stop", ",", "\n", "start", "=", "start", ",", "\n", "override_cluster_name", "=", "override_cluster_name", ",", "\n", "port_forward", "=", "port_forward", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.examples.instrument.launch_example_gce": [[354, 370], ["instrument.launch_example_cluster"], "function", ["home.repos.pwc.inspect_result.YaoYao1995_MEEE.examples.instrument.launch_example_cluster"], ["", "def", "launch_example_gce", "(", "*", "args", ",", "config_file", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Forwards call to `launch_example_cluster` after adding gce defaults.\n\n    This optionally sets the ray autoscaler configuration file to the default\n    gce configuration file, and then calls `launch_example_cluster` to\n    execute the original command on autoscaled gce cluster by parsing the args.\n\n    See `launch_example_cluster` for further details.\n    \"\"\"", "\n", "config_file", "=", "(", "\n", "config_file", "or", "AUTOSCALER_DEFAULT_CONFIG_FILE_GCE", ")", "\n", "\n", "return", "launch_example_cluster", "(", "\n", "*", "args", ",", "\n", "config_file", "=", "config_file", ",", "\n", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.examples.instrument.launch_example_ec2": [[372, 388], ["instrument.launch_example_cluster"], "function", ["home.repos.pwc.inspect_result.YaoYao1995_MEEE.examples.instrument.launch_example_cluster"], ["", "def", "launch_example_ec2", "(", "*", "args", ",", "config_file", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Forwards call to `launch_example_cluster` after adding ec2 defaults.\n\n    This optionally sets the ray autoscaler configuration file to the default\n    ec2 configuration file, and then calls `launch_example_cluster` to\n    execute the original command on autoscaled ec2 cluster by parsing the args.\n\n    See `launch_example_cluster` for further details.\n    \"\"\"", "\n", "config_file", "=", "(", "\n", "config_file", "or", "AUTOSCALER_DEFAULT_CONFIG_FILE_EC2", ")", "\n", "\n", "launch_example_cluster", "(", "\n", "*", "args", ",", "\n", "config_file", "=", "config_file", ",", "\n", "**", "kwargs", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.examples.utils.parse_universe": [[47, 52], ["next"], "function", ["None"], ["def", "parse_universe", "(", "env_name", ")", ":", "\n", "    ", "universe", "=", "next", "(", "\n", "(", "universe", "for", "universe", "in", "UNIVERSES", "if", "universe", "in", "env_name", ")", ",", "\n", "DEFAULT_UNIVERSE", ")", "\n", "return", "universe", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.examples.utils.parse_domain_task": [[54, 76], ["env_name.replace().strip.replace().strip", "next", "env_name.replace().strip.replace().strip", "next", "env_name.replace().strip.replace", "env_name.replace().strip.replace", "len", "ValueError", "len"], "function", ["None"], ["", "def", "parse_domain_task", "(", "env_name", ",", "universe", ")", ":", "\n", "    ", "env_name", "=", "env_name", ".", "replace", "(", "universe", ",", "''", ")", ".", "strip", "(", "'-'", ")", "\n", "domains", "=", "DOMAINS_BY_UNIVERSE", "[", "universe", "]", "\n", "domain", "=", "next", "(", "domain", "for", "domain", "in", "domains", "if", "domain", "in", "env_name", ")", "\n", "\n", "env_name", "=", "env_name", ".", "replace", "(", "domain", ",", "''", ")", ".", "strip", "(", "'-'", ")", "\n", "tasks", "=", "TASKS_BY_DOMAIN_BY_UNIVERSE", "[", "universe", "]", "[", "domain", "]", "\n", "task", "=", "next", "(", "(", "task", "for", "task", "in", "tasks", "if", "task", "==", "env_name", ")", ",", "None", ")", "\n", "\n", "if", "task", "is", "None", ":", "\n", "        ", "matching_tasks", "=", "[", "task", "for", "task", "in", "tasks", "if", "task", "in", "env_name", "]", "\n", "if", "len", "(", "matching_tasks", ")", ">", "1", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"Task name cannot be unmbiguously determined: {}.\"", "\n", "\" Following task names match: {}\"", "\n", "\"\"", ".", "format", "(", "env_name", ",", "matching_tasks", ")", ")", "\n", "", "elif", "len", "(", "matching_tasks", ")", "==", "1", ":", "\n", "            ", "task", "=", "matching_tasks", "[", "-", "1", "]", "\n", "", "else", ":", "\n", "            ", "task", "=", "DEFAULT_TASK", "\n", "\n", "", "", "return", "domain", ",", "task", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.examples.utils.parse_universe_domain_task": [[78, 88], ["utils.parse_universe", "utils.parse_domain_task"], "function", ["home.repos.pwc.inspect_result.YaoYao1995_MEEE.examples.utils.parse_universe", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.adapters.gym_adapter.parse_domain_task"], ["", "def", "parse_universe_domain_task", "(", "args", ")", ":", "\n", "    ", "universe", ",", "domain", ",", "task", "=", "args", ".", "universe", ",", "args", ".", "domain", ",", "args", ".", "task", "\n", "\n", "if", "not", "universe", ":", "\n", "        ", "universe", "=", "parse_universe", "(", "args", ".", "env", ")", "\n", "\n", "", "if", "(", "not", "domain", ")", "or", "(", "not", "task", ")", ":", "\n", "        ", "domain", ",", "task", "=", "parse_domain_task", "(", "args", ".", "env", ",", "universe", ")", "\n", "\n", "", "return", "universe", ",", "domain", ",", "task", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.examples.utils.add_ray_init_args": [[90, 124], ["parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "utils.add_ray_init_args.init_help_string"], "function", ["None"], ["", "def", "add_ray_init_args", "(", "parser", ")", ":", "\n", "\n", "    ", "def", "init_help_string", "(", "help_string", ")", ":", "\n", "        ", "return", "help_string", "+", "\" Passed to `ray.init`.\"", "\n", "\n", "", "parser", ".", "add_argument", "(", "\n", "'--cpus'", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "init_help_string", "(", "\"Cpus to allocate to ray process.\"", ")", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--gpus'", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "init_help_string", "(", "\"Gpus to allocate to ray process.\"", ")", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--resources'", ",", "\n", "type", "=", "json", ".", "loads", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "init_help_string", "(", "\"Resources to allocate to ray process.\"", ")", ")", "\n", "# parser.add_argument(", "\n", "#     '--include-webui',", "\n", "#     type=str,", "\n", "#     default=False,", "\n", "#     help=init_help_string(\"Boolean flag indicating whether to start the\"", "\n", "#                           \"web UI, which is a Jupyter notebook.\"))", "\n", "parser", ".", "add_argument", "(", "\n", "'--temp-dir'", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "init_help_string", "(", "\"If provided, it will specify the root temporary\"", "\n", "\" directory for the Ray process.\"", ")", ")", "\n", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.examples.utils.add_ray_tune_args": [[126, 217], ["parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "utils.add_ray_tune_args.tune_help_string"], "function", ["None"], ["", "def", "add_ray_tune_args", "(", "parser", ")", ":", "\n", "\n", "    ", "def", "tune_help_string", "(", "help_string", ")", ":", "\n", "        ", "return", "help_string", "+", "\" Passed to `tune.run_experiments`.\"", "\n", "\n", "", "parser", ".", "add_argument", "(", "\n", "'--resources-per-trial'", ",", "\n", "type", "=", "json", ".", "loads", ",", "\n", "default", "=", "{", "}", ",", "\n", "help", "=", "tune_help_string", "(", "\"Resources to allocate for each trial.\"", ")", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--trial-gpus'", ",", "\n", "type", "=", "float", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "(", "\"Resources to allocate for each trial. Passed\"", "\n", "\" to `tune.run_experiments`.\"", ")", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--trial-extra-cpus'", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "(", "\"Extra CPUs to reserve in case the trials need to\"", "\n", "\" launch additional Ray actors that use CPUs.\"", ")", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--trial-extra-gpus'", ",", "\n", "type", "=", "float", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "(", "\"Extra GPUs to reserve in case the trials need to\"", "\n", "\" launch additional Ray actors that use GPUs.\"", ")", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--num-samples'", ",", "\n", "default", "=", "1", ",", "\n", "type", "=", "int", ",", "\n", "help", "=", "tune_help_string", "(", "\"Number of times to repeat each trial.\"", ")", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--upload-dir'", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "''", ",", "\n", "help", "=", "tune_help_string", "(", "\"Optional URI to sync training results to (e.g.\"", "\n", "\" s3://<bucket> or gs://<bucket>).\"", ")", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--trial-name-template'", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "'seed:{trial.config[run_params][seed]}'", ",", "\n", "# default='id={trial.trial_id}-seed={trial.config[run_params][seed]}',", "\n", "help", "=", "tune_help_string", "(", "\n", "\"Optional string template for trial name. For example:\"", "\n", "\" '{trial.trial_id}-seed={trial.config[run_params][seed]}'\"", ")", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--trial-cpus'", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "multiprocessing", ".", "cpu_count", "(", ")", ",", "\n", "help", "=", "tune_help_string", "(", "\"Resources to allocate for each trial.\"", ")", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--checkpoint-frequency'", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "tune_help_string", "(", "\n", "\"How many training iterations between checkpoints.\"", "\n", "\" A value of 0 (default) disables checkpointing. If set,\"", "\n", "\" takes precedence over variant['run_params']\"", "\n", "\"['checkpoint_frequency'].\"", ")", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--checkpoint-at-end'", ",", "\n", "type", "=", "lambda", "x", ":", "bool", "(", "strtobool", "(", "x", ")", ")", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "tune_help_string", "(", "\n", "\"Whether to checkpoint at the end of the experiment. If set,\"", "\n", "\" takes precedence over variant['run_params']\"", "\n", "\"['checkpoint_at_end'].\"", ")", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--max-failures'", ",", "\n", "default", "=", "3", ",", "\n", "type", "=", "int", ",", "\n", "help", "=", "tune_help_string", "(", "\n", "\"Try to recover a trial from its last checkpoint at least this \"", "\n", "\"many times. Only applies if checkpointing is enabled.\"", ")", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--restore'", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "tune_help_string", "(", "\n", "\"Path to checkpoint. Only makes sense to set if running 1 trial.\"", "\n", "\" Defaults to None.\"", ")", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--with-server'", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "False", ",", "\n", "help", "=", "tune_help_string", "(", "\"Starts a background Tune server. Needed for\"", "\n", "\" using the Client API.\"", ")", ")", "\n", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.examples.utils.get_parser": [[219, 297], ["argparse.ArgumentParser", "add_ray_tune_args.add_argument", "add_ray_tune_args.add_argument", "add_ray_tune_args.add_argument", "add_ray_tune_args.add_argument", "add_ray_tune_args.add_argument", "add_ray_tune_args.add_argument", "utils.add_ray_init_args", "utils.add_ray_tune_args", "add_ray_tune_args.add_argument", "add_ray_tune_args.add_argument", "bool", "bool", "distutils.util.strtobool", "distutils.util.strtobool"], "function", ["home.repos.pwc.inspect_result.YaoYao1995_MEEE.examples.utils.add_ray_init_args", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.examples.utils.add_ray_tune_args"], ["", "def", "get_parser", "(", "allow_policy_list", "=", "False", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "\n", "# parser.add_argument(", "\n", "#     '--universe',", "\n", "#     type=str,", "\n", "#     choices=UNIVERSES,", "\n", "#     default=DEFAULT_UNIVERSE)", "\n", "# parser.add_argument(", "\n", "#     '--domain',", "\n", "#     type=str,", "\n", "#     choices=AVAILABLE_DOMAINS,", "\n", "#     default=DEFAULT_DOMAIN)", "\n", "parser", ".", "add_argument", "(", "\n", "'--config'", ",", "\n", "type", "=", "str", ")", "\n", "# parser.add_argument(", "\n", "#     '--task', type=str, choices=AVAILABLE_TASKS, default=DEFAULT_TASK)", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "'--log-dir'", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "None", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--checkpoint-replay-pool'", ",", "\n", "type", "=", "lambda", "x", ":", "bool", "(", "strtobool", "(", "x", ")", ")", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "(", "\"Whether a checkpoint should also saved the replay\"", "\n", "\" pool. If set, takes precedence over\"", "\n", "\" variant['run_params']['checkpoint_replay_pool'].\"", "\n", "\" Note that the replay pool is saved (and \"", "\n", "\" constructed) piece by piece so that each\"", "\n", "\" experience is saved only once.\"", ")", ")", "\n", "\n", "# parser.add_argument(", "\n", "#     '--algorithm',", "\n", "#     type=str,", "\n", "#     choices=AVAILABLE_ALGORITHMS,", "\n", "#     default=DEFAULT_ALGORITHM)", "\n", "if", "allow_policy_list", ":", "\n", "        ", "parser", ".", "add_argument", "(", "\n", "'--policy'", ",", "\n", "type", "=", "str", ",", "\n", "nargs", "=", "'+'", ",", "\n", "choices", "=", "(", "'gaussian'", ",", ")", ",", "\n", "default", "=", "'gaussian'", ")", "\n", "", "else", ":", "\n", "        ", "parser", ".", "add_argument", "(", "\n", "'--policy'", ",", "\n", "type", "=", "str", ",", "\n", "choices", "=", "(", "'gaussian'", ",", ")", ",", "\n", "default", "=", "'gaussian'", ")", "\n", "\n", "# parser.add_argument(", "\n", "#     '--exp-name',", "\n", "#     type=str,", "\n", "#     default=datetimestamp())", "\n", "", "parser", ".", "add_argument", "(", "\n", "'--mode'", ",", "type", "=", "str", ",", "default", "=", "'local'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--confirm-remote'", ",", "\n", "type", "=", "lambda", "x", ":", "bool", "(", "strtobool", "(", "x", ")", ")", ",", "\n", "nargs", "=", "'?'", ",", "\n", "const", "=", "True", ",", "\n", "default", "=", "True", ",", "\n", "help", "=", "\"Whether or not to query yes/no on remote run.\"", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "'--video-save-frequency'", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "\"Save frequency for videos.\"", ")", "\n", "\n", "parser", "=", "add_ray_init_args", "(", "parser", ")", "\n", "parser", "=", "add_ray_tune_args", "(", "parser", ")", "\n", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.examples.utils.variant_equals": [[299, 311], ["ray.tune.sample_from", "spec.get"], "function", ["None"], ["", "def", "variant_equals", "(", "*", "keys", ")", ":", "\n", "    ", "def", "get_from_spec", "(", "spec", ")", ":", "\n", "# TODO(hartikainen): This may break in some cases. ray.tune seems to", "\n", "# add a 'config' key at the top of the spec, whereas `generate_variants`", "\n", "# does not.", "\n", "        ", "node", "=", "spec", ".", "get", "(", "'config'", ",", "spec", ")", "\n", "for", "key", "in", "keys", ":", "\n", "            ", "node", "=", "node", "[", "key", "]", "\n", "\n", "", "return", "node", "\n", "\n", "", "return", "sample_from", "(", "get_from_spec", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.development.base.get_variant_spec_base": [[141, 215], ["softlearning.misc.utils.deep_update", "softlearning.misc.utils.deep_update", "ALGORITHM_PARAMS_PER_DOMAIN.get", "ALGORITHM_PARAMS_ADDITIONAL.get", "softlearning.misc.utils.deep_update", "ray.tune.sample_from", "POLICY_PARAMS_FOR_DOMAIN[].get", "ray.tune.sample_from", "ENVIRONMENT_PARAMS.get().get", "ray.tune.sample_from", "MAX_PATH_LENGTH_PER_DOMAIN.get", "MAX_PATH_LENGTH_PER_DOMAIN.get", "NUM_EPOCHS_PER_DOMAIN.get", "numpy.random.randint", "ENVIRONMENT_PARAMS.get", "spec.get", "int", "int", "int", "spec.get"], "function", ["home.repos.pwc.inspect_result.YaoYao1995_MEEE.misc.utils.deep_update", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.misc.utils.deep_update", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.misc.utils.deep_update"], ["def", "get_variant_spec_base", "(", "universe", ",", "domain", ",", "task", ",", "policy", ",", "algorithm", ",", "env_params", ")", ":", "\n", "    ", "algorithm_params", "=", "deep_update", "(", "\n", "ALGORITHM_PARAMS_PER_DOMAIN", ".", "get", "(", "domain", ",", "{", "}", ")", ",", "\n", "ALGORITHM_PARAMS_ADDITIONAL", ".", "get", "(", "algorithm", ",", "{", "}", ")", "\n", ")", "\n", "algorithm_params", "=", "deep_update", "(", "\n", "algorithm_params", ",", "\n", "env_params", "\n", ")", "\n", "\n", "variant_spec", "=", "{", "\n", "#'git_sha': get_git_rev(),", "\n", "\n", "'environment_params'", ":", "{", "\n", "'training'", ":", "{", "\n", "'domain'", ":", "domain", ",", "\n", "'task'", ":", "task", ",", "\n", "'universe'", ":", "universe", ",", "\n", "'kwargs'", ":", "(", "\n", "ENVIRONMENT_PARAMS", ".", "get", "(", "domain", ",", "{", "}", ")", ".", "get", "(", "task", ",", "{", "}", ")", ")", ",", "\n", "}", ",", "\n", "'evaluation'", ":", "tune", ".", "sample_from", "(", "lambda", "spec", ":", "(", "\n", "spec", ".", "get", "(", "'config'", ",", "spec", ")", "\n", "[", "'environment_params'", "]", "\n", "[", "'training'", "]", "\n", ")", ")", ",", "\n", "}", ",", "\n", "'policy_params'", ":", "deep_update", "(", "\n", "POLICY_PARAMS_BASE", "[", "policy", "]", ",", "\n", "POLICY_PARAMS_FOR_DOMAIN", "[", "policy", "]", ".", "get", "(", "domain", ",", "{", "}", ")", "\n", ")", ",", "\n", "'Q_params'", ":", "{", "\n", "'type'", ":", "'double_feedforward_Q_function'", ",", "\n", "'kwargs'", ":", "{", "\n", "'hidden_layer_sizes'", ":", "(", "M", ",", "M", ")", ",", "\n", "}", "\n", "}", ",", "\n", "'algorithm_params'", ":", "algorithm_params", ",", "\n", "'replay_pool_params'", ":", "{", "\n", "'type'", ":", "'WeightedReplayPool'", ",", "\n", "'kwargs'", ":", "{", "\n", "'max_size'", ":", "tune", ".", "sample_from", "(", "lambda", "spec", ":", "(", "\n", "{", "\n", "'WeightedReplayPool'", ":", "int", "(", "1e6", ")", ",", "\n", "'TrajectoryReplayPool'", ":", "int", "(", "1e4", ")", ",", "\n", "}", ".", "get", "(", "\n", "spec", ".", "get", "(", "'config'", ",", "spec", ")", "\n", "[", "'replay_pool_params'", "]", "\n", "[", "'type'", "]", ",", "\n", "int", "(", "1e6", ")", ")", "\n", ")", ")", ",", "\n", "}", "\n", "}", ",", "\n", "'sampler_params'", ":", "{", "\n", "'type'", ":", "'SimpleSampler'", ",", "\n", "'kwargs'", ":", "{", "\n", "'max_path_length'", ":", "MAX_PATH_LENGTH_PER_DOMAIN", ".", "get", "(", "\n", "domain", ",", "DEFAULT_MAX_PATH_LENGTH", ")", ",", "\n", "'min_pool_size'", ":", "MAX_PATH_LENGTH_PER_DOMAIN", ".", "get", "(", "\n", "domain", ",", "DEFAULT_MAX_PATH_LENGTH", ")", ",", "\n", "'batch_size'", ":", "256", ",", "\n", "}", "\n", "}", ",", "\n", "'run_params'", ":", "{", "\n", "'seed'", ":", "tune", ".", "sample_from", "(", "\n", "lambda", "spec", ":", "np", ".", "random", ".", "randint", "(", "0", ",", "10000", ")", ")", ",", "\n", "'checkpoint_at_end'", ":", "True", ",", "\n", "'checkpoint_frequency'", ":", "NUM_EPOCHS_PER_DOMAIN", ".", "get", "(", "\n", "domain", ",", "DEFAULT_NUM_EPOCHS", ")", "//", "NUM_CHECKPOINTS", ",", "\n", "'checkpoint_replay_pool'", ":", "False", ",", "\n", "}", ",", "\n", "}", "\n", "\n", "return", "variant_spec", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.development.base.get_variant_spec": [[216, 227], ["base.get_variant_spec_base"], "function", ["home.repos.pwc.inspect_result.YaoYao1995_MEEE.development.variants.get_variant_spec_base"], ["", "def", "get_variant_spec", "(", "args", ",", "env_params", ")", ":", "\n", "    ", "universe", ",", "domain", ",", "task", "=", "env_params", ".", "universe", ",", "env_params", ".", "domain", ",", "env_params", ".", "task", "\n", "\n", "variant_spec", "=", "get_variant_spec_base", "(", "\n", "universe", ",", "domain", ",", "task", ",", "args", ".", "policy", ",", "env_params", ".", "type", ",", "env_params", ")", "\n", "\n", "if", "args", ".", "checkpoint_replay_pool", "is", "not", "None", ":", "\n", "        ", "variant_spec", "[", "'run_params'", "]", "[", "'checkpoint_replay_pool'", "]", "=", "(", "\n", "args", ".", "checkpoint_replay_pool", ")", "\n", "\n", "", "return", "variant_spec", "\n", "", ""]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.development.main.ExperimentRunner._setup": [[25, 37], ["softlearning.misc.utils.set_seed", "tensorflow.GPUOptions", "tensorflow.Session", "tensorflow.keras.backend.set_session", "tensorflow.keras.backend.get_session", "tensorflow.ConfigProto"], "methods", ["home.repos.pwc.inspect_result.YaoYao1995_MEEE.misc.utils.set_seed"], []], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.development.main.ExperimentRunner._stop": [[38, 41], ["tensorflow.reset_default_graph", "tensorflow.keras.backend.clear_session"], "methods", ["None"], []], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.development.main.ExperimentRunner._build": [[42, 83], ["copy.deepcopy", "softlearning.environments.utils.get_environment_from_params", "softlearning.replay_pools.utils.get_replay_pool_from_variant", "softlearning.samplers.utils.get_sampler_from_variant", "softlearning.value_functions.utils.get_Q_function_from_variant", "softlearning.policies.utils.get_policy_from_variant", "softlearning.policies.utils.get_policy", "softlearning.algorithms.utils.get_algorithm_from_variant", "softlearning.misc.utils.initialize_tf_variables", "softlearning.environments.utils.get_environment_from_params", "domain.lower"], "methods", ["home.repos.pwc.inspect_result.YaoYao1995_MEEE.replay_pools.utils.get_replay_pool_from_variant", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.samplers.utils.get_sampler_from_variant", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.value_functions.utils.get_Q_function_from_variant", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.policies.utils.get_policy_from_variant", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.policies.utils.get_policy", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.algorithms.utils.get_algorithm_from_variant", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.misc.utils.initialize_tf_variables"], []], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.development.main.ExperimentRunner._train": [[84, 94], ["next", "main.ExperimentRunner._build", "main.ExperimentRunner.algorithm.train"], "methods", ["home.repos.pwc.inspect_result.YaoYao1995_MEEE.algorithms.meee.MEEE._build", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.models.bnn.BNN.train"], []], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.development.main.ExperimentRunner._pickle_path": [[95, 97], ["os.path.join", "os.path.join", "os.path.join", "os.path.join"], "methods", ["None"], []], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.development.main.ExperimentRunner._replay_pool_pickle_path": [[98, 100], ["os.path.join", "os.path.join", "os.path.join", "os.path.join"], "methods", ["None"], []], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.development.main.ExperimentRunner._tf_checkpoint_prefix": [[101, 103], ["os.path.join", "os.path.join", "os.path.join", "os.path.join"], "methods", ["None"], []], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.development.main.ExperimentRunner._get_tf_checkpoint": [[104, 108], ["tensorflow.train.Checkpoint"], "methods", ["None"], []], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.development.main.ExperimentRunner.picklables": [[109, 119], ["main.ExperimentRunner.policy.get_weights"], "methods", ["home.repos.pwc.inspect_result.YaoYao1995_MEEE.policies.gaussian_policy.GaussianPolicy.get_weights"], []], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.development.main.ExperimentRunner._save": [[121, 148], ["main.ExperimentRunner._pickle_path", "main.ExperimentRunner._variant[].get", "main.ExperimentRunner._get_tf_checkpoint", "main.ExperimentRunner.save", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "open", "pickle.dump", "main.ExperimentRunner._save_replay_pool", "main.ExperimentRunner._tf_checkpoint_prefix"], "methods", ["home.repos.pwc.inspect_result.YaoYao1995_MEEE.development.main.ExperimentRunner._pickle_path", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.development.main.ExperimentRunner._get_tf_checkpoint", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.models.bnn.BNN.save", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.development.main.ExperimentRunner._save_replay_pool", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.development.main.ExperimentRunner._tf_checkpoint_prefix"], []], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.development.main.ExperimentRunner._save_replay_pool": [[149, 153], ["main.ExperimentRunner._replay_pool_pickle_path", "main.ExperimentRunner.replay_pool.save_latest_experience"], "methods", ["home.repos.pwc.inspect_result.YaoYao1995_MEEE.development.main.ExperimentRunner._replay_pool_pickle_path", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.replay_pools.trajectory_replay_pool.TrajectoryReplayPool.save_latest_experience"], []], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.development.main.ExperimentRunner._restore_replay_pool": [[154, 165], ["os.path.dirname", "os.path.dirname", "os.path.dirname", "os.path.dirname", "main.ExperimentRunner._replay_pool_pickle_path", "main.ExperimentRunner.replay_pool.load_experience", "sorted", "glob.iglob", "os.path.join", "os.path.join", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.YaoYao1995_MEEE.development.main.ExperimentRunner._replay_pool_pickle_path", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.replay_pools.trajectory_replay_pool.TrajectoryReplayPool.load_experience"], []], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.development.main.ExperimentRunner._restore": [[166, 220], ["isinstance", "checkpoint_dir.rstrip.rstrip.rstrip", "softlearning.replay_pools.utils.get_replay_pool_from_variant", "main.ExperimentRunner._variant[].get", "softlearning.policies.utils.get_policy_from_variant", "main.ExperimentRunner.policy.set_weights", "softlearning.policies.utils.get_policy", "softlearning.algorithms.utils.get_algorithm_from_variant", "main.ExperimentRunner.algorithm.__setstate__", "main.ExperimentRunner._get_tf_checkpoint", "main.ExperimentRunner.restore", "main.ExperimentRunner.restore.assert_consumed().run_restore_ops", "softlearning.misc.utils.initialize_tf_variables", "zip", "main.ExperimentRunner._session.as_default", "main.ExperimentRunner._pickle_path", "main.ExperimentRunner._restore_replay_pool", "picklable[].__getstate__", "tensorflow.train.latest_checkpoint", "Q_target.set_weights", "open", "pickle.load", "main.ExperimentRunner.restore.assert_consumed", "Q.get_weights", "os.path.split", "os.path.split", "os.path.split", "os.path.split", "main.ExperimentRunner._tf_checkpoint_prefix"], "methods", ["home.repos.pwc.inspect_result.YaoYao1995_MEEE.replay_pools.utils.get_replay_pool_from_variant", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.policies.utils.get_policy_from_variant", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.policies.gaussian_policy.GaussianPolicy.set_weights", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.policies.utils.get_policy", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.algorithms.utils.get_algorithm_from_variant", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.samplers.remote_sampler.RemoteSampler.__setstate__", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.development.main.ExperimentRunner._get_tf_checkpoint", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.misc.utils.initialize_tf_variables", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.development.main.ExperimentRunner._pickle_path", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.development.main.ExperimentRunner._restore_replay_pool", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.samplers.remote_sampler.RemoteSampler.__getstate__", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.policies.gaussian_policy.GaussianPolicy.set_weights", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.policies.gaussian_policy.GaussianPolicy.get_weights", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.development.main.ExperimentRunner._tf_checkpoint_prefix"], []], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.development.main.main": [[222, 233], ["examples.instrument.run_example_local"], "function", ["home.repos.pwc.inspect_result.YaoYao1995_MEEE.examples.instrument.run_example_local"], []], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.development.variants.get_variant_spec_base": [[249, 322], ["softlearning.misc.utils.deep_update", "softlearning.misc.utils.deep_update", "ALGORITHM_PARAMS_PER_DOMAIN.get", "ALGORITHM_PARAMS_ADDITIONAL.get", "softlearning.misc.utils.get_git_rev", "softlearning.misc.utils.deep_update", "ray.tune.sample_from", "POLICY_PARAMS_FOR_DOMAIN[].get", "ray.tune.sample_from", "ENVIRONMENT_PARAMS.get().get", "ray.tune.sample_from", "MAX_PATH_LENGTH_PER_DOMAIN.get", "MAX_PATH_LENGTH_PER_DOMAIN.get", "NUM_EPOCHS_PER_DOMAIN.get", "numpy.random.randint", "ENVIRONMENT_PARAMS.get", "spec.get", "int", "int", "int", "spec.get"], "function", ["home.repos.pwc.inspect_result.YaoYao1995_MEEE.misc.utils.deep_update", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.misc.utils.deep_update", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.misc.utils.get_git_rev", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.misc.utils.deep_update"], ["def", "get_variant_spec_base", "(", "universe", ",", "domain", ",", "task", ",", "policy", ",", "algorithm", ")", ":", "\n", "    ", "algorithm_params", "=", "deep_update", "(", "\n", "ALGORITHM_PARAMS_BASE", ",", "\n", "ALGORITHM_PARAMS_PER_DOMAIN", ".", "get", "(", "domain", ",", "{", "}", ")", "\n", ")", "\n", "algorithm_params", "=", "deep_update", "(", "\n", "algorithm_params", ",", "\n", "ALGORITHM_PARAMS_ADDITIONAL", ".", "get", "(", "algorithm", ",", "{", "}", ")", "\n", ")", "\n", "variant_spec", "=", "{", "\n", "'git_sha'", ":", "get_git_rev", "(", ")", ",", "\n", "\n", "'environment_params'", ":", "{", "\n", "'training'", ":", "{", "\n", "'domain'", ":", "domain", ",", "\n", "'task'", ":", "task", ",", "\n", "'universe'", ":", "universe", ",", "\n", "'kwargs'", ":", "(", "\n", "ENVIRONMENT_PARAMS", ".", "get", "(", "domain", ",", "{", "}", ")", ".", "get", "(", "task", ",", "{", "}", ")", ")", ",", "\n", "}", ",", "\n", "'evaluation'", ":", "tune", ".", "sample_from", "(", "lambda", "spec", ":", "(", "\n", "spec", ".", "get", "(", "'config'", ",", "spec", ")", "\n", "[", "'environment_params'", "]", "\n", "[", "'training'", "]", "\n", ")", ")", ",", "\n", "}", ",", "\n", "'policy_params'", ":", "deep_update", "(", "\n", "POLICY_PARAMS_BASE", "[", "policy", "]", ",", "\n", "POLICY_PARAMS_FOR_DOMAIN", "[", "policy", "]", ".", "get", "(", "domain", ",", "{", "}", ")", "\n", ")", ",", "\n", "'Q_params'", ":", "{", "\n", "'type'", ":", "'double_feedforward_Q_function'", ",", "\n", "'kwargs'", ":", "{", "\n", "'hidden_layer_sizes'", ":", "(", "M", ",", "M", ")", ",", "\n", "}", "\n", "}", ",", "\n", "'algorithm_params'", ":", "algorithm_params", ",", "\n", "'replay_pool_params'", ":", "{", "\n", "'type'", ":", "'WeightedReplayPool'", ",", "\n", "'kwargs'", ":", "{", "\n", "'max_size'", ":", "tune", ".", "sample_from", "(", "lambda", "spec", ":", "(", "\n", "{", "\n", "'WeightedReplayPool'", ":", "int", "(", "1e6", ")", ",", "\n", "'TrajectoryReplayPool'", ":", "int", "(", "1e4", ")", ",", "\n", "}", ".", "get", "(", "\n", "spec", ".", "get", "(", "'config'", ",", "spec", ")", "\n", "[", "'replay_pool_params'", "]", "\n", "[", "'type'", "]", ",", "\n", "int", "(", "1e6", ")", ")", "\n", ")", ")", ",", "\n", "}", "\n", "}", ",", "\n", "'sampler_params'", ":", "{", "\n", "'type'", ":", "'SimpleSampler'", ",", "\n", "'kwargs'", ":", "{", "\n", "'max_path_length'", ":", "MAX_PATH_LENGTH_PER_DOMAIN", ".", "get", "(", "\n", "domain", ",", "DEFAULT_MAX_PATH_LENGTH", ")", ",", "\n", "'min_pool_size'", ":", "MAX_PATH_LENGTH_PER_DOMAIN", ".", "get", "(", "\n", "domain", ",", "DEFAULT_MAX_PATH_LENGTH", ")", ",", "\n", "'batch_size'", ":", "256", ",", "\n", "}", "\n", "}", ",", "\n", "'run_params'", ":", "{", "\n", "'seed'", ":", "tune", ".", "sample_from", "(", "\n", "lambda", "spec", ":", "np", ".", "random", ".", "randint", "(", "0", ",", "10000", ")", ")", ",", "\n", "'checkpoint_at_end'", ":", "True", ",", "\n", "'checkpoint_frequency'", ":", "NUM_EPOCHS_PER_DOMAIN", ".", "get", "(", "\n", "domain", ",", "DEFAULT_NUM_EPOCHS", ")", "//", "NUM_CHECKPOINTS", ",", "\n", "'checkpoint_replay_pool'", ":", "False", ",", "\n", "}", ",", "\n", "}", "\n", "\n", "return", "variant_spec", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.development.variants.get_variant_spec_image": [[324, 358], ["variants.get_variant_spec_base", "preprocessor_params.copy", "preprocessor_params.copy", "task.lower", "domain.lower"], "function", ["home.repos.pwc.inspect_result.YaoYao1995_MEEE.development.variants.get_variant_spec_base", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.adapters.softlearning_env.SoftlearningEnv.copy", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.adapters.softlearning_env.SoftlearningEnv.copy"], ["", "def", "get_variant_spec_image", "(", "universe", ",", "\n", "domain", ",", "\n", "task", ",", "\n", "policy", ",", "\n", "algorithm", ",", "\n", "*", "args", ",", "\n", "**", "kwargs", ")", ":", "\n", "    ", "variant_spec", "=", "get_variant_spec_base", "(", "\n", "universe", ",", "domain", ",", "task", ",", "policy", ",", "algorithm", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "\n", "if", "'image'", "in", "task", ".", "lower", "(", ")", "or", "'image'", "in", "domain", ".", "lower", "(", ")", ":", "\n", "        ", "preprocessor_params", "=", "{", "\n", "'type'", ":", "'convnet_preprocessor'", ",", "\n", "'kwargs'", ":", "{", "\n", "'image_shape'", ":", "(", "\n", "variant_spec", "\n", "[", "'training'", "]", "\n", "[", "'environment_params'", "]", "\n", "[", "'image_shape'", "]", ")", ",", "\n", "'output_size'", ":", "M", ",", "\n", "'conv_filters'", ":", "(", "4", ",", "4", ")", ",", "\n", "'conv_kernel_sizes'", ":", "(", "(", "3", ",", "3", ")", ",", "(", "3", ",", "3", ")", ")", ",", "\n", "'pool_type'", ":", "'MaxPool2D'", ",", "\n", "'pool_sizes'", ":", "(", "(", "2", ",", "2", ")", ",", "(", "2", ",", "2", ")", ")", ",", "\n", "'pool_strides'", ":", "(", "2", ",", "2", ")", ",", "\n", "'dense_hidden_layer_sizes'", ":", "(", ")", ",", "\n", "}", ",", "\n", "}", "\n", "variant_spec", "[", "'policy_params'", "]", "[", "'kwargs'", "]", "[", "'preprocessor_params'", "]", "=", "(", "\n", "preprocessor_params", ".", "copy", "(", ")", ")", "\n", "variant_spec", "[", "'Q_params'", "]", "[", "'kwargs'", "]", "[", "'preprocessor_params'", "]", "=", "(", "\n", "preprocessor_params", ".", "copy", "(", ")", ")", "\n", "\n", "", "return", "variant_spec", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.development.variants.get_variant_spec": [[360, 377], ["variants.get_variant_spec_image", "variants.get_variant_spec_base", "task.lower", "task.lower", "domain.lower"], "function", ["home.repos.pwc.inspect_result.YaoYao1995_MEEE.development.variants.get_variant_spec_image", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.development.variants.get_variant_spec_base"], ["", "def", "get_variant_spec", "(", "args", ")", ":", "\n", "    ", "universe", ",", "domain", ",", "task", "=", "args", ".", "universe", ",", "args", ".", "domain", ",", "args", ".", "task", "\n", "\n", "if", "(", "'image'", "in", "task", ".", "lower", "(", ")", "\n", "or", "'blind'", "in", "task", ".", "lower", "(", ")", "\n", "or", "'image'", "in", "domain", ".", "lower", "(", ")", ")", ":", "\n", "        ", "variant_spec", "=", "get_variant_spec_image", "(", "\n", "universe", ",", "domain", ",", "task", ",", "args", ".", "policy", ",", "args", ".", "algorithm", ")", "\n", "", "else", ":", "\n", "        ", "variant_spec", "=", "get_variant_spec_base", "(", "\n", "universe", ",", "domain", ",", "task", ",", "args", ".", "policy", ",", "args", ".", "algorithm", ")", "\n", "\n", "", "if", "args", ".", "checkpoint_replay_pool", "is", "not", "None", ":", "\n", "        ", "variant_spec", "[", "'run_params'", "]", "[", "'checkpoint_replay_pool'", "]", "=", "(", "\n", "args", ".", "checkpoint_replay_pool", ")", "\n", "\n", "", "return", "variant_spec", "\n", "", ""]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.development.simulate_policy.parse_args": [[14, 36], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "bool", "distutils.util.strtobool"], "function", ["home.repos.pwc.inspect_result.YaoYao1995_MEEE.development.simulate_policy.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'checkpoint_path'", ",", "\n", "type", "=", "str", ",", "\n", "help", "=", "'Path to the checkpoint.'", ")", "\n", "parser", ".", "add_argument", "(", "'--max-path-length'", ",", "'-l'", ",", "type", "=", "int", ",", "default", "=", "1000", ")", "\n", "parser", ".", "add_argument", "(", "'--num-rollouts'", ",", "'-n'", ",", "type", "=", "int", ",", "default", "=", "10", ")", "\n", "parser", ".", "add_argument", "(", "'--render-mode'", ",", "'-r'", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "'human'", ",", "\n", "choices", "=", "(", "'human'", ",", "'rgb_array'", ",", "None", ")", ",", "\n", "help", "=", "\"Mode to render the rollouts in.\"", ")", "\n", "parser", ".", "add_argument", "(", "'--deterministic'", ",", "'-d'", ",", "\n", "type", "=", "lambda", "x", ":", "bool", "(", "strtobool", "(", "x", ")", ")", ",", "\n", "nargs", "=", "'?'", ",", "\n", "const", "=", "True", ",", "\n", "default", "=", "True", ",", "\n", "help", "=", "\"Evaluate policy deterministically.\"", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.development.simulate_policy.simulate_policy": [[38, 74], ["tensorflow.keras.backend.get_session", "args.checkpoint_path.rstrip", "os.path.dirname", "os.path.join", "softlearning.environments.utils.get_environment_from_params", "softlearning.policies.utils.get_policy_from_variant", "softlearning.policies.utils.get_policy_from_variant.set_weights", "open", "json.load", "tf.keras.backend.get_session.as_default", "os.path.join", "softlearning.policies.utils.get_policy_from_variant.set_deterministic", "softlearning.samplers.rollouts", "pdb.set_trace", "open", "pickle.load"], "function", ["home.repos.pwc.inspect_result.YaoYao1995_MEEE.policies.utils.get_policy_from_variant", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.policies.gaussian_policy.GaussianPolicy.set_weights", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.policies.base_policy.BasePolicy.set_deterministic", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.samplers.utils.rollouts"], ["", "def", "simulate_policy", "(", "args", ")", ":", "\n", "    ", "session", "=", "tf", ".", "keras", ".", "backend", ".", "get_session", "(", ")", "\n", "checkpoint_path", "=", "args", ".", "checkpoint_path", ".", "rstrip", "(", "'/'", ")", "\n", "experiment_path", "=", "os", ".", "path", ".", "dirname", "(", "checkpoint_path", ")", "\n", "\n", "variant_path", "=", "os", ".", "path", ".", "join", "(", "experiment_path", ",", "'params.json'", ")", "\n", "with", "open", "(", "variant_path", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "variant", "=", "json", ".", "load", "(", "f", ")", "\n", "\n", "", "with", "session", ".", "as_default", "(", ")", ":", "\n", "        ", "pickle_path", "=", "os", ".", "path", ".", "join", "(", "checkpoint_path", ",", "'checkpoint.pkl'", ")", "\n", "with", "open", "(", "pickle_path", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "picklable", "=", "pickle", ".", "load", "(", "f", ")", "\n", "\n", "", "", "environment_params", "=", "(", "\n", "variant", "[", "'environment_params'", "]", "[", "'evaluation'", "]", "\n", "if", "'evaluation'", "in", "variant", "[", "'environment_params'", "]", "\n", "else", "variant", "[", "'environment_params'", "]", "[", "'training'", "]", ")", "\n", "evaluation_environment", "=", "get_environment_from_params", "(", "environment_params", ")", "\n", "\n", "policy", "=", "(", "\n", "get_policy_from_variant", "(", "variant", ",", "evaluation_environment", ",", "Qs", "=", "[", "None", "]", ")", ")", "\n", "policy", ".", "set_weights", "(", "picklable", "[", "'policy_weights'", "]", ")", "\n", "\n", "with", "policy", ".", "set_deterministic", "(", "args", ".", "deterministic", ")", ":", "\n", "        ", "paths", "=", "rollouts", "(", "args", ".", "num_rollouts", ",", "\n", "evaluation_environment", ",", "\n", "policy", ",", "\n", "path_length", "=", "args", ".", "max_path_length", ",", "\n", "render_mode", "=", "args", ".", "render_mode", ")", "\n", "\n", "", "if", "args", ".", "render_mode", "!=", "'human'", ":", "\n", "        ", "from", "pprint", "import", "pprint", ";", "import", "pdb", ";", "pdb", ".", "set_trace", "(", ")", "\n", "pass", "\n", "\n", "", "return", "paths", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.development.__init__.get_trainable_class": [[9, 12], ["None"], "function", ["None"], []], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.development.__init__.get_params_from_file": [[19, 26], ["importlib.import_module", "getattr", "DotMap"], "function", ["None"], []], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.development.__init__.get_variant_spec": [[27, 33], ["__init__.get_params_from_file", "__init__.get_variant_spec"], "function", ["home.repos.pwc.inspect_result.YaoYao1995_MEEE.development.__init__.get_params_from_file", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.development.__init__.get_variant_spec"], []], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.development.__init__.get_parser": [[34, 38], ["__init__.get_parser"], "function", ["home.repos.pwc.inspect_result.YaoYao1995_MEEE.development.__init__.get_parser"], []], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.utils.numpy.softmax": [[4, 8], ["numpy.max", "numpy.exp", "numpy.sum"], "function", ["None"], ["def", "softmax", "(", "x", ")", ":", "\n", "    ", "max_x", "=", "np", ".", "max", "(", "x", ")", "\n", "exp_x", "=", "np", ".", "exp", "(", "x", "-", "max_x", ")", "\n", "return", "exp_x", "/", "np", ".", "sum", "(", "exp_x", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.utils.keras.PicklableKerasModel.__getstate__": [[7, 14], ["tempfile.NamedTemporaryFile", "tensorflow.keras.models.save_model", "fd.read"], "methods", ["None"], ["    ", "def", "__getstate__", "(", "self", ")", ":", "\n", "        ", "with", "tempfile", ".", "NamedTemporaryFile", "(", "suffix", "=", "'.hdf5'", ",", "delete", "=", "True", ")", "as", "fd", ":", "\n", "            ", "tf", ".", "keras", ".", "models", ".", "save_model", "(", "self", ",", "fd", ".", "name", ",", "overwrite", "=", "True", ")", "\n", "model_str", "=", "fd", ".", "read", "(", ")", "\n", "", "d", "=", "{", "'model_str'", ":", "model_str", "}", "\n", "\n", "return", "d", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.utils.keras.PicklableKerasModel.__setstate__": [[15, 25], ["keras.PicklableKerasModel.__dict__.update", "tempfile.NamedTemporaryFile", "fd.write", "fd.flush", "tensorflow.keras.models.load_model", "tensorflow.keras.models.load_model.__dict__.copy"], "methods", ["home.repos.pwc.inspect_result.YaoYao1995_MEEE.utils.logging.Progress.update", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.adapters.softlearning_env.SoftlearningEnv.copy"], ["", "def", "__setstate__", "(", "self", ",", "state", ")", ":", "\n", "        ", "with", "tempfile", ".", "NamedTemporaryFile", "(", "suffix", "=", "'.hdf5'", ",", "delete", "=", "True", ")", "as", "fd", ":", "\n", "            ", "fd", ".", "write", "(", "state", "[", "'model_str'", "]", ")", "\n", "fd", ".", "flush", "(", ")", "\n", "\n", "loaded_model", "=", "tf", ".", "keras", ".", "models", ".", "load_model", "(", "\n", "fd", ".", "name", ",", "custom_objects", "=", "{", "\n", "self", ".", "__class__", ".", "__name__", ":", "self", ".", "__class__", "}", ")", "\n", "\n", "", "self", ".", "__dict__", ".", "update", "(", "loaded_model", ".", "__dict__", ".", "copy", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.utils.keras.PicklableKerasModel.from_config": [[26, 33], ["super().from_config"], "methods", ["home.repos.pwc.inspect_result.YaoYao1995_MEEE.utils.keras.PicklableKerasModel.from_config"], ["", "@", "classmethod", "\n", "def", "from_config", "(", "cls", ",", "*", "args", ",", "custom_objects", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "custom_objects", "=", "custom_objects", "or", "{", "}", "\n", "custom_objects", "[", "cls", ".", "__name__", "]", "=", "cls", "\n", "custom_objects", "[", "'tf'", "]", "=", "tf", "\n", "return", "super", "(", "PicklableKerasModel", ",", "cls", ")", ".", "from_config", "(", "\n", "*", "args", ",", "custom_objects", "=", "custom_objects", ",", "**", "kwargs", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.utils.filesystem.mkdir": [[3, 6], ["os.path.exists", "os.mkdir"], "function", ["home.repos.pwc.inspect_result.YaoYao1995_MEEE.utils.filesystem.mkdir"], ["def", "mkdir", "(", "path", ")", ":", "\n", "\t", "if", "not", "os", ".", "path", ".", "exists", "(", "path", ")", ":", "\n", "\t\t", "os", ".", "mkdir", "(", "path", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.utils.logging.Progress.__init__": [[7, 28], ["logging.Progress.resume"], "methods", ["home.repos.pwc.inspect_result.YaoYao1995_MEEE.utils.logging.Progress.resume"], ["\t", "def", "__init__", "(", "self", ",", "total", ",", "name", "=", "'Progress'", ",", "ncol", "=", "3", ",", "max_length", "=", "20", ",", "indent", "=", "0", ",", "line_width", "=", "100", ",", "speed_update_freq", "=", "100", ")", ":", "\n", "\t\t", "self", ".", "total", "=", "total", "\n", "self", ".", "name", "=", "name", "\n", "self", ".", "ncol", "=", "ncol", "\n", "self", ".", "max_length", "=", "max_length", "\n", "self", ".", "indent", "=", "indent", "\n", "self", ".", "line_width", "=", "line_width", "\n", "self", ".", "_speed_update_freq", "=", "speed_update_freq", "\n", "\n", "self", ".", "_step", "=", "0", "\n", "self", ".", "_prev_line", "=", "'\\033[F'", "\n", "self", ".", "_clear_line", "=", "' '", "*", "self", ".", "line_width", "\n", "\n", "self", ".", "_pbar_size", "=", "self", ".", "ncol", "*", "self", ".", "max_length", "\n", "self", ".", "_complete_pbar", "=", "'#'", "*", "self", ".", "_pbar_size", "\n", "self", ".", "_incomplete_pbar", "=", "' '", "*", "self", ".", "_pbar_size", "\n", "\n", "self", ".", "lines", "=", "[", "''", "]", "\n", "self", ".", "fraction", "=", "'{} / {}'", ".", "format", "(", "0", ",", "self", ".", "total", ")", "\n", "\n", "self", ".", "resume", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.utils.logging.Progress.update": [[30, 35], ["time.time"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "n", "=", "1", ")", ":", "\n", "\t\t", "self", ".", "_step", "+=", "n", "\n", "if", "self", ".", "_step", "%", "self", ".", "_speed_update_freq", "==", "0", ":", "\n", "\t\t\t", "self", ".", "_time0", "=", "time", ".", "time", "(", ")", "\n", "self", ".", "_step0", "=", "self", ".", "_step", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.utils.logging.Progress.resume": [[36, 41], ["print", "time.time"], "methods", ["None"], ["", "", "def", "resume", "(", "self", ")", ":", "\n", "\t\t", "self", ".", "_skip_lines", "=", "1", "\n", "print", "(", "'\\n'", ",", "end", "=", "''", ")", "\n", "self", ".", "_time0", "=", "time", ".", "time", "(", ")", "\n", "self", ".", "_step0", "=", "self", ".", "_step", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.utils.logging.Progress.pause": [[42, 45], ["logging.Progress._clear"], "methods", ["home.repos.pwc.inspect_result.YaoYao1995_MEEE.utils.logging.Progress._clear"], ["", "def", "pause", "(", "self", ")", ":", "\n", "\t\t", "self", ".", "_clear", "(", ")", "\n", "self", ".", "_skip_lines", "=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.utils.logging.Progress.set_description": [[46, 77], ["logging.Progress._clear", "logging.Progress._format_percent", "logging.Progress._format_speed", "len", "math.ceil", "logging.Progress._chunk", "logging.Progress._format", "print"], "methods", ["home.repos.pwc.inspect_result.YaoYao1995_MEEE.utils.logging.Progress._clear", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.utils.logging.Progress._format_percent", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.utils.logging.Progress._format_speed", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.utils.logging.Progress._chunk", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.utils.logging.Progress._format"], ["", "def", "set_description", "(", "self", ",", "params", "=", "[", "]", ")", ":", "\n", "\n", "############", "\n", "# Position #", "\n", "############", "\n", "\t\t", "self", ".", "_clear", "(", ")", "\n", "\n", "###########", "\n", "# Percent #", "\n", "###########", "\n", "percent", ",", "fraction", "=", "self", ".", "_format_percent", "(", "self", ".", "_step", ",", "self", ".", "total", ")", "\n", "self", ".", "fraction", "=", "fraction", "\n", "\n", "#########", "\n", "# Speed #", "\n", "#########", "\n", "speed", "=", "self", ".", "_format_speed", "(", "self", ".", "_step", ")", "\n", "\n", "##########", "\n", "# Params #", "\n", "##########", "\n", "num_params", "=", "len", "(", "params", ")", "\n", "nrow", "=", "math", ".", "ceil", "(", "num_params", "/", "self", ".", "ncol", ")", "\n", "params_split", "=", "self", ".", "_chunk", "(", "params", ",", "self", ".", "ncol", ")", "\n", "params_string", ",", "lines", "=", "self", ".", "_format", "(", "params_split", ")", "\n", "self", ".", "lines", "=", "lines", "\n", "\n", "\n", "description", "=", "'{} | {}{}'", ".", "format", "(", "percent", ",", "speed", ",", "params_string", ")", "\n", "print", "(", "description", ")", "\n", "self", ".", "_skip_lines", "=", "nrow", "+", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.utils.logging.Progress.append_description": [[78, 80], ["logging.Progress.lines.append"], "methods", ["None"], ["", "def", "append_description", "(", "self", ",", "descr", ")", ":", "\n", "\t\t", "self", ".", "lines", ".", "append", "(", "descr", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.utils.logging.Progress._clear": [[81, 87], ["print", "print", "print", "range"], "methods", ["None"], ["", "def", "_clear", "(", "self", ")", ":", "\n", "\t\t", "position", "=", "self", ".", "_prev_line", "*", "self", ".", "_skip_lines", "\n", "empty", "=", "'\\n'", ".", "join", "(", "[", "self", ".", "_clear_line", "for", "_", "in", "range", "(", "self", ".", "_skip_lines", ")", "]", ")", "\n", "print", "(", "position", ",", "end", "=", "''", ")", "\n", "print", "(", "empty", ")", "\n", "print", "(", "position", ",", "end", "=", "''", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.utils.logging.Progress._format_percent": [[88, 102], ["int", "float", "int"], "methods", ["None"], ["", "def", "_format_percent", "(", "self", ",", "n", ",", "total", ")", ":", "\n", "\t\t", "if", "total", ":", "\n", "\t\t\t", "percent", "=", "n", "/", "float", "(", "total", ")", "\n", "\n", "complete_entries", "=", "int", "(", "percent", "*", "self", ".", "_pbar_size", ")", "\n", "incomplete_entries", "=", "self", ".", "_pbar_size", "-", "complete_entries", "\n", "\n", "pbar", "=", "self", ".", "_complete_pbar", "[", ":", "complete_entries", "]", "+", "self", ".", "_incomplete_pbar", "[", ":", "incomplete_entries", "]", "\n", "fraction", "=", "'{} / {}'", ".", "format", "(", "n", ",", "total", ")", "\n", "string", "=", "'{} [{}] {:3d}%'", ".", "format", "(", "fraction", ",", "pbar", ",", "int", "(", "percent", "*", "100", ")", ")", "\n", "", "else", ":", "\n", "\t\t\t", "fraction", "=", "'{}'", ".", "format", "(", "n", ")", "\n", "string", "=", "'{} iterations'", ".", "format", "(", "n", ")", "\n", "", "return", "string", ",", "fraction", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.utils.logging.Progress._format_speed": [[103, 111], ["time.time"], "methods", ["None"], ["", "def", "_format_speed", "(", "self", ",", "n", ")", ":", "\n", "\t\t", "num_steps", "=", "n", "-", "self", ".", "_step0", "\n", "t", "=", "time", ".", "time", "(", ")", "-", "self", ".", "_time0", "\n", "speed", "=", "num_steps", "/", "t", "\n", "string", "=", "'{:.1f} Hz'", ".", "format", "(", "speed", ")", "\n", "if", "num_steps", ">", "0", ":", "\n", "\t\t\t", "self", ".", "_speed", "=", "string", "\n", "", "return", "string", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.utils.logging.Progress._chunk": [[112, 114], ["range", "len"], "methods", ["None"], ["", "def", "_chunk", "(", "self", ",", "l", ",", "n", ")", ":", "\n", "\t\t", "return", "[", "l", "[", "i", ":", "i", "+", "n", "]", "for", "i", "in", "range", "(", "0", ",", "len", "(", "l", ")", ",", "n", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.utils.logging.Progress._format": [[115, 121], ["lines.insert", "padding.join", "logging.Progress._format_chunk"], "methods", ["home.repos.pwc.inspect_result.YaoYao1995_MEEE.utils.logging.Progress._format_chunk"], ["", "def", "_format", "(", "self", ",", "chunks", ")", ":", "\n", "\t\t", "lines", "=", "[", "self", ".", "_format_chunk", "(", "chunk", ")", "for", "chunk", "in", "chunks", "]", "\n", "lines", ".", "insert", "(", "0", ",", "''", ")", "\n", "padding", "=", "'\\n'", "+", "' '", "*", "self", ".", "indent", "\n", "string", "=", "padding", ".", "join", "(", "lines", ")", "\n", "return", "string", ",", "lines", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.utils.logging.Progress._format_chunk": [[122, 125], ["logging.Progress._format_param"], "methods", ["home.repos.pwc.inspect_result.YaoYao1995_MEEE.utils.logging.Progress._format_param"], ["", "def", "_format_chunk", "(", "self", ",", "chunk", ")", ":", "\n", "\t\t", "line", "=", "' | '", ".", "join", "(", "[", "self", ".", "_format_param", "(", "param", ")", "for", "param", "in", "chunk", "]", ")", "\n", "return", "line", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.utils.logging.Progress._format_param": [[126, 129], ["None"], "methods", ["None"], ["", "def", "_format_param", "(", "self", ",", "param", ")", ":", "\n", "\t\t", "k", ",", "v", "=", "param", "\n", "return", "'{} : {}'", ".", "format", "(", "k", ",", "v", ")", "[", ":", "self", ".", "max_length", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.utils.logging.Progress.stamp": [[130, 140], ["logging.Progress._clear", "print", "logging.Progress._clear"], "methods", ["home.repos.pwc.inspect_result.YaoYao1995_MEEE.utils.logging.Progress._clear", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.utils.logging.Progress._clear"], ["", "def", "stamp", "(", "self", ")", ":", "\n", "\t\t", "if", "self", ".", "lines", "!=", "[", "''", "]", ":", "\n", "\t\t\t", "params", "=", "' | '", ".", "join", "(", "self", ".", "lines", ")", "\n", "string", "=", "'[ {} ] {}{} | {}'", ".", "format", "(", "self", ".", "name", ",", "self", ".", "fraction", ",", "params", ",", "self", ".", "_speed", ")", "\n", "self", ".", "_clear", "(", ")", "\n", "print", "(", "string", ",", "end", "=", "'\\n'", ")", "\n", "self", ".", "_skip_lines", "=", "1", "\n", "", "else", ":", "\n", "\t\t\t", "self", ".", "_clear", "(", ")", "\n", "self", ".", "_skip_lines", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.utils.logging.Progress.close": [[141, 143], ["logging.Progress.pause"], "methods", ["home.repos.pwc.inspect_result.YaoYao1995_MEEE.utils.logging.Progress.pause"], ["", "", "def", "close", "(", "self", ")", ":", "\n", "\t\t", "self", ".", "pause", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.utils.logging.Silent.__init__": [[146, 148], ["None"], "methods", ["None"], ["\t", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "\t\t", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.utils.logging.Silent.__getattr__": [[149, 151], ["None"], "methods", ["None"], ["", "def", "__getattr__", "(", "self", ",", "attr", ")", ":", "\n", "\t\t", "return", "lambda", "*", "args", ":", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.utils.writer.Writer.__init__": [[16, 22], ["tensorboardX.SummaryWriter", "print"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "log_dir", ")", ":", "\n", "        ", "self", ".", "log_dir", "=", "log_dir", "\n", "self", ".", "_writer", "=", "tbx", ".", "SummaryWriter", "(", "self", ".", "log_dir", ")", "\n", "self", ".", "_data", "=", "{", "}", "\n", "self", ".", "_data_3d", "=", "{", "}", "\n", "print", "(", "'[ Writer ] Log dir: {}'", ".", "format", "(", "log_dir", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.utils.writer.Writer.__getitem__": [[23, 28], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "key", ")", ":", "\n", "        ", "if", "key", "in", "self", ".", "_data", ":", "\n", "            ", "return", "self", ".", "_data", "[", "key", "]", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "_data_3d", "[", "key", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.utils.writer.Writer.__getattr__": [[29, 31], ["getattr"], "methods", ["None"], ["", "", "def", "__getattr__", "(", "self", ",", "attr", ")", ":", "\n", "        ", "return", "getattr", "(", "self", ".", "_writer", ",", "attr", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.utils.writer.Writer._add_label": [[32, 35], ["None"], "methods", ["None"], ["", "def", "_add_label", "(", "self", ",", "data", ",", "label", ")", ":", "\n", "        ", "if", "label", "not", "in", "data", ":", "\n", "            ", "data", "[", "label", "]", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.utils.writer.Writer.add_scalar": [[36, 41], ["writer.Writer._add_label", "writer.Writer._writer.add_scalar"], "methods", ["home.repos.pwc.inspect_result.YaoYao1995_MEEE.utils.writer.Writer._add_label", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.utils.writer.Writer.add_scalar"], ["", "", "def", "add_scalar", "(", "self", ",", "label", ",", "val", ",", "epoch", ")", ":", "\n", "        ", "self", ".", "_add_label", "(", "self", ".", "_data", ",", "label", ")", "\n", "if", "epoch", ">", "self", ".", "_data", "[", "label", "]", ":", "\n", "            ", "self", ".", "_data", "[", "label", "]", "=", "epoch", "\n", "self", ".", "_writer", ".", "add_scalar", "(", "label", ",", "val", ",", "epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.utils.writer.Writer.plot_cdfs": [[42, 56], ["matplotlib.clf", "matplotlib.clf", "matplotlib.clf", "matplotlib.plot", "matplotlib.plot", "matplotlib.plot", "matplotlib.plot", "matplotlib.plot", "matplotlib.plot", "matplotlib.ylabel", "matplotlib.ylabel", "matplotlib.ylabel", "matplotlib.xlabel", "matplotlib.xlabel", "matplotlib.xlabel", "matplotlib.legend", "matplotlib.legend", "matplotlib.legend", "writer.Writer._savefig", "matplotlib.plot", "matplotlib.plot", "matplotlib.plot", "matplotlib.plot", "matplotlib.plot", "matplotlib.plot", "path[].cumsum", "path[].cumsum"], "methods", ["home.repos.pwc.inspect_result.YaoYao1995_MEEE.utils.writer.Writer._savefig"], ["", "", "def", "plot_cdfs", "(", "self", ",", "label", ",", "epoch", ",", "env_mean", ",", "model_mean", ",", "env_paths", ",", "model_paths", ")", ":", "\n", "        ", "plt", ".", "clf", "(", ")", "\n", "plt", ".", "plot", "(", "env_mean", ",", "linewidth", "=", "2", ",", "label", "=", "'env'", ",", "c", "=", "'k'", ")", "\n", "plt", ".", "plot", "(", "model_mean", ",", "linewidth", "=", "2", ",", "label", "=", "'model'", ",", "c", "=", "'b'", ")", "\n", "\n", "for", "path", "in", "env_paths", ":", "\n", "            ", "plt", ".", "plot", "(", "path", "[", "'rewards'", "]", ".", "cumsum", "(", ")", ",", "alpha", "=", "0.5", ",", "c", "=", "'k'", ")", "\n", "", "for", "path", "in", "model_paths", ":", "\n", "            ", "plt", ".", "plot", "(", "path", "[", "'rewards'", "]", ".", "cumsum", "(", ")", ",", "alpha", "=", "0.5", ",", "c", "=", "'b'", ")", "\n", "\n", "", "plt", ".", "ylabel", "(", "'cumulative return'", ")", "\n", "plt", ".", "xlabel", "(", "'step'", ")", "\n", "plt", ".", "legend", "(", ")", "\n", "self", ".", "_savefig", "(", "label", ",", "epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.utils.writer.Writer._savefig": [[57, 66], ["io.BytesIO", "matplotlib.savefig", "matplotlib.savefig", "matplotlib.savefig", "io.BytesIO.seek", "cv2.imdecode", "cv2.cvtColor", "writer.Writer._writer.add_image", "numpy.fromstring", "cv2.cvtColor.transpose", "io.BytesIO.getvalue"], "methods", ["None"], ["", "def", "_savefig", "(", "self", ",", "label", ",", "epoch", ")", ":", "\n", "        ", "buf", "=", "io", ".", "BytesIO", "(", ")", "\n", "plt", ".", "savefig", "(", "buf", ",", "format", "=", "'png'", ",", "layout", "=", "'tight'", ")", "\n", "buf", ".", "seek", "(", "0", ")", "\n", "img", "=", "cv2", ".", "imdecode", "(", "np", ".", "fromstring", "(", "buf", ".", "getvalue", "(", ")", ",", "dtype", "=", "np", ".", "uint8", ")", ",", "-", "1", ")", "\n", "img", "=", "cv2", ".", "cvtColor", "(", "img", ",", "cv2", ".", "COLOR_BGR2RGB", ")", "\n", "img", "=", "img", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", "/", "255.", "\n", "self", ".", "_writer", ".", "add_image", "(", "label", ",", "img", ",", "epoch", ")", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.utils.visualization.plot_trajectories": [[11, 54], ["math.ceil", "matplotlib.clf", "matplotlib.subplots", "axes.ravel.ravel", "range", "matplotlib.tight_layout", "io.BytesIO", "matplotlib.savefig", "io.BytesIO.seek", "cv2.imdecode", "cv2.cvtColor", "writer.add_image", "matplotlib.close", "numpy.array", "numpy.array", "range", "ax.fill_between", "ax.plot", "ax.plot", "ax.plot", "numpy.fromstring", "cv2.cvtColor.transpose", "range", "range", "range", "range", "len", "ax.set_title", "io.BytesIO.getvalue", "ax.set_title", "ax.set_title"], "function", ["home.repos.pwc.inspect_result.YaoYao1995_MEEE.adapters.softlearning_env.SoftlearningEnv.close"], ["def", "plot_trajectories", "(", "writer", ",", "label", ",", "epoch", ",", "env_traj", ",", "model_traj", ",", "means", ",", "stds", ")", ":", "\n", "    ", "state_dim", "=", "env_traj", "[", "0", "]", ".", "size", "\n", "model_states", "=", "[", "[", "obs", "[", "s", "]", "for", "obs", "in", "model_traj", "]", "for", "s", "in", "range", "(", "state_dim", ")", "]", "\n", "env_states", "=", "[", "[", "obs", "[", "s", "]", "for", "obs", "in", "env_traj", "]", "for", "s", "in", "range", "(", "state_dim", ")", "]", "\n", "\n", "means", "=", "[", "np", ".", "array", "(", "[", "mean", "[", "s", "]", "for", "mean", "in", "means", "]", ")", "for", "s", "in", "range", "(", "state_dim", ")", "]", "\n", "stds", "=", "[", "np", ".", "array", "(", "[", "std", "[", "s", "]", "for", "std", "in", "stds", "]", ")", "for", "s", "in", "range", "(", "state_dim", ")", "]", "\n", "\n", "cols", "=", "1", "\n", "rows", "=", "math", ".", "ceil", "(", "state_dim", "/", "cols", ")", "\n", "\n", "plt", ".", "clf", "(", ")", "\n", "fig", ",", "axes", "=", "plt", ".", "subplots", "(", "rows", ",", "cols", ",", "figsize", "=", "(", "9", "*", "cols", ",", "3", "*", "rows", ")", ")", "\n", "axes", "=", "axes", ".", "ravel", "(", ")", "\n", "\n", "for", "i", "in", "range", "(", "state_dim", ")", ":", "\n", "        ", "ax", "=", "axes", "[", "i", "]", "\n", "X", "=", "range", "(", "len", "(", "model_states", "[", "i", "]", ")", ")", "\n", "\n", "ax", ".", "fill_between", "(", "X", ",", "means", "[", "i", "]", "+", "stds", "[", "i", "]", ",", "means", "[", "i", "]", "-", "stds", "[", "i", "]", ",", "color", "=", "'r'", ",", "alpha", "=", "0.5", ")", "\n", "ax", ".", "plot", "(", "env_states", "[", "i", "]", ",", "color", "=", "'k'", ")", "\n", "ax", ".", "plot", "(", "model_states", "[", "i", "]", ",", "color", "=", "'b'", ")", "\n", "ax", ".", "plot", "(", "means", "[", "i", "]", ",", "color", "=", "'r'", ")", "\n", "\n", "if", "i", "==", "0", ":", "\n", "            ", "ax", ".", "set_title", "(", "'reward'", ")", "\n", "", "elif", "i", "==", "1", ":", "\n", "            ", "ax", ".", "set_title", "(", "'terminal'", ")", "\n", "", "else", ":", "\n", "            ", "ax", ".", "set_title", "(", "'state dim {}'", ".", "format", "(", "i", "-", "2", ")", ")", "\n", "", "", "plt", ".", "tight_layout", "(", ")", "\n", "\n", "buf", "=", "io", ".", "BytesIO", "(", ")", "\n", "plt", ".", "savefig", "(", "buf", ",", "format", "=", "'png'", ",", "layout", "=", "'tight'", ")", "\n", "buf", ".", "seek", "(", "0", ")", "\n", "\n", "img", "=", "cv2", ".", "imdecode", "(", "np", ".", "fromstring", "(", "buf", ".", "getvalue", "(", ")", ",", "dtype", "=", "np", ".", "uint8", ")", ",", "-", "1", ")", "\n", "img", "=", "cv2", ".", "cvtColor", "(", "img", ",", "cv2", ".", "COLOR_BGR2RGB", ")", "\n", "img", "=", "img", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", "/", "255.", "\n", "\n", "writer", ".", "add_image", "(", "label", ",", "img", ",", "epoch", ")", "\n", "\n", "plt", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.utils.visualization.record_trajectories": [[59, 82], ["len", "numpy.array", "torch.Tensor", "images[].unsqueeze.permute", "images[].unsqueeze.unsqueeze", "images[].unsqueeze", "print", "min", "writer.add_video", "max", "len", "len", "numpy.concatenate", "zip"], "function", ["None"], ["def", "record_trajectories", "(", "writer", ",", "label", ",", "epoch", ",", "env_images", ",", "model_images", "=", "None", ")", ":", "\n", "    ", "traj_length", "=", "len", "(", "env_images", ")", "\n", "if", "model_images", "is", "not", "None", ":", "\n", "        ", "assert", "len", "(", "env_images", ")", "==", "len", "(", "model_images", ")", "\n", "images", "=", "[", "np", ".", "concatenate", "(", "(", "env_img", ",", "model_img", ")", ")", "for", "(", "env_img", ",", "model_img", ")", "in", "zip", "(", "env_images", ",", "model_images", ")", "]", "\n", "", "else", ":", "\n", "        ", "images", "=", "env_images", "\n", "\n", "## [ traj_length, 2 * H, W, C ]", "\n", "", "images", "=", "np", ".", "array", "(", "images", ")", "\n", "images", "=", "torch", ".", "Tensor", "(", "images", ")", "\n", "\n", "## [ traj_length, C, 2 * H, W ]", "\n", "images", "=", "images", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", "## [ B, traj_length, C, 2 * H, W ]", "\n", "images", "=", "images", ".", "unsqueeze", "(", "0", ")", "\n", "\n", "images", "=", "images", "/", "255.", "\n", "images", "=", "images", "[", ":", ",", ":", ",", "0", "]", ".", "unsqueeze", "(", "2", ")", "\n", "\n", "print", "(", "'[ Visualization ] Saving to {}'", ".", "format", "(", "label", ")", ")", "\n", "fps", "=", "min", "(", "max", "(", "traj_length", "/", "5", ",", "2", ")", ",", "30", ")", "\n", "writer", ".", "add_video", "(", "'video_'", "+", "label", ",", "images", ",", "epoch", ",", "fps", "=", "fps", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.utils.visualization.visualize_policy": [[84, 135], ["real_env.reset", "real_env.reset.copy", "numpy.concatenate", "numpy.concatenate", "visualization.plot_trajectories", "visualization.record_trajectories", "numpy.concatenate", "numpy.concatenate", "actions.append", "numpy.array().astype", "numpy.array().astype", "numpy.array", "numpy.array", "policy.actions_np", "real_env.step", "observations_r.append", "rewards_r.append", "terminals_r.append", "fake_env.step", "observations_f.append", "rewards_f.append", "terminals_f.append", "means_f.append", "stds_f.append", "numpy.array", "numpy.array", "numpy.zeros", "numpy.zeros", "numpy.array", "numpy.array"], "function", ["home.repos.pwc.inspect_result.YaoYao1995_MEEE.adapters.softlearning_env.SoftlearningEnv.reset", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.adapters.softlearning_env.SoftlearningEnv.copy", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.utils.visualization.plot_trajectories", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.utils.visualization.record_trajectories", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.policies.gaussian_policy.GaussianPolicy.actions_np", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.env.humanoid.HumanoidTruncatedObsEnv.step", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.env.humanoid.HumanoidTruncatedObsEnv.step"], ["", "def", "visualize_policy", "(", "real_env", ",", "fake_env", ",", "policy", ",", "writer", ",", "timestep", ",", "max_steps", "=", "100", ",", "focus", "=", "None", ",", "label", "=", "'model_vis'", ",", "img_dim", "=", "128", ")", ":", "\n", "    ", "init_obs", "=", "real_env", ".", "reset", "(", ")", "\n", "obs", "=", "init_obs", ".", "copy", "(", ")", "\n", "\n", "observations_r", "=", "[", "obs", "]", "\n", "observations_f", "=", "[", "obs", "]", "\n", "rewards_r", "=", "[", "0", "]", "\n", "rewards_f", "=", "[", "0", "]", "\n", "terminals_r", "=", "[", "False", "]", "\n", "terminals_f", "=", "[", "False", "]", "\n", "means_f", "=", "[", "np", ".", "concatenate", "(", "(", "np", ".", "zeros", "(", "2", ")", ",", "obs", ")", ")", "]", "\n", "stds_f", "=", "[", "np", ".", "concatenate", "(", "(", "np", ".", "zeros", "(", "2", ")", ",", "obs", "*", "0", ")", ")", "]", "\n", "actions", "=", "[", "]", "\n", "\n", "i", "=", "0", "\n", "term_r", ",", "term_f", "=", "False", ",", "False", "\n", "while", "not", "(", "term_r", "and", "term_f", ")", "and", "i", "<=", "max_steps", ":", "\n", "\n", "        ", "act", "=", "policy", ".", "actions_np", "(", "obs", "[", "None", "]", ")", "[", "0", "]", "\n", "if", "not", "term_r", ":", "\n", "            ", "next_obs_r", ",", "rew_r", ",", "term_r", ",", "info_r", "=", "real_env", ".", "step", "(", "act", ")", "\n", "observations_r", ".", "append", "(", "next_obs_r", ")", "\n", "rewards_r", ".", "append", "(", "rew_r", ")", "\n", "terminals_r", ".", "append", "(", "term_r", ")", "\n", "\n", "", "if", "not", "term_f", ":", "\n", "            ", "next_obs_f", ",", "rew_f", ",", "term_f", ",", "info_f", "=", "fake_env", ".", "step", "(", "obs", ",", "act", ")", "\n", "observations_f", ".", "append", "(", "next_obs_f", ")", "\n", "rewards_f", ".", "append", "(", "rew_f", ")", "\n", "terminals_f", ".", "append", "(", "term_f", ")", "\n", "means_f", ".", "append", "(", "info_f", "[", "'mean'", "]", ")", "\n", "stds_f", ".", "append", "(", "info_f", "[", "'std'", "]", ")", "\n", "\n", "", "actions", ".", "append", "(", "act", ")", "\n", "\n", "if", "not", "term_f", ":", "\n", "            ", "obs", "=", "next_obs_f", "\n", "", "else", ":", "\n", "            ", "obs", "=", "next_obs_r", "\n", "\n", "", "i", "+=", "1", "\n", "\n", "", "terminals_r", "=", "np", ".", "array", "(", "[", "terminals_r", "]", ")", ".", "astype", "(", "np", ".", "uint8", ")", ".", "T", "\n", "terminals_f", "=", "np", ".", "array", "(", "[", "terminals_f", "]", ")", ".", "astype", "(", "np", ".", "uint8", ")", ".", "T", "\n", "rewards_r", "=", "np", ".", "array", "(", "[", "rewards_r", "]", ")", ".", "T", "\n", "rewards_f", "=", "np", ".", "array", "(", "[", "rewards_f", "]", ")", ".", "T", "\n", "\n", "rewards_observations_r", "=", "np", ".", "concatenate", "(", "(", "rewards_r", ",", "terminals_r", ",", "np", ".", "array", "(", "observations_r", ")", ")", ",", "-", "1", ")", "\n", "rewards_observations_f", "=", "np", ".", "concatenate", "(", "(", "rewards_f", ",", "terminals_f", ",", "np", ".", "array", "(", "observations_f", ")", ")", ",", "-", "1", ")", "\n", "plot_trajectories", "(", "writer", ",", "label", ",", "timestep", ",", "rewards_observations_r", ",", "rewards_observations_f", ",", "means_f", ",", "stds_f", ")", "\n", "record_trajectories", "(", "writer", ",", "label", ",", "epoch", ",", "images_r", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.policies.base_policy.BasePolicy.__init__": [[9, 11], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "_deterministic", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.policies.base_policy.BasePolicy.reset": [[12, 15], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "\"\"\"Reset and clean the policy.\"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.policies.base_policy.BasePolicy.actions": [[16, 19], ["None"], "methods", ["None"], ["", "def", "actions", "(", "self", ",", "conditions", ")", ":", "\n", "        ", "\"\"\"Compute (symbolic) actions given conditions (observations)\"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.policies.base_policy.BasePolicy.log_pis": [[20, 23], ["None"], "methods", ["None"], ["", "def", "log_pis", "(", "self", ",", "conditions", ",", "actions", ")", ":", "\n", "        ", "\"\"\"Compute (symbolic) log probs for given observations and actions.\"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.policies.base_policy.BasePolicy.actions_np": [[24, 27], ["None"], "methods", ["None"], ["", "def", "actions_np", "(", "self", ",", "conditions", ")", ":", "\n", "        ", "\"\"\"Compute (numeric) actions given conditions (observations)\"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.policies.base_policy.BasePolicy.log_pis_np": [[28, 31], ["None"], "methods", ["None"], ["", "def", "log_pis_np", "(", "self", ",", "conditions", ",", "actions", ")", ":", "\n", "        ", "\"\"\"Compute (numeric) log probs for given observations and actions.\"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.policies.base_policy.BasePolicy.set_deterministic": [[32, 44], ["None"], "methods", ["None"], ["", "@", "contextmanager", "\n", "def", "set_deterministic", "(", "self", ",", "deterministic", "=", "True", ")", ":", "\n", "        ", "\"\"\"Context manager for changing the determinism of the policy.\n        Args:\n            set_deterministic (`bool`): Value to set the self._is_deterministic\n                to during the context. The value will be reset back to the\n                previous value when the context exits.\n        \"\"\"", "\n", "was_deterministic", "=", "self", ".", "_deterministic", "\n", "self", ".", "_deterministic", "=", "deterministic", "\n", "yield", "\n", "self", ".", "_deterministic", "=", "was_deterministic", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.policies.base_policy.BasePolicy.get_diagnostics": [[45, 55], ["collections.OrderedDict"], "methods", ["None"], ["", "def", "get_diagnostics", "(", "self", ",", "conditions", ")", ":", "\n", "        ", "\"\"\"Return diagnostic information of the policy.\n\n        Arguments:\n            conditions: Observations to run the diagnostics for.\n        Returns:\n            diagnostics: OrderedDict of diagnostic information.\n        \"\"\"", "\n", "diagnostics", "=", "OrderedDict", "(", "{", "}", ")", "\n", "return", "diagnostics", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.policies.base_policy.BasePolicy.__getstate__": [[56, 61], ["serializable.Serializable.__getstate__", "base_policy.BasePolicy.get_weights"], "methods", ["home.repos.pwc.inspect_result.YaoYao1995_MEEE.samplers.remote_sampler.RemoteSampler.__getstate__", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.policies.gaussian_policy.GaussianPolicy.get_weights"], ["", "def", "__getstate__", "(", "self", ")", ":", "\n", "        ", "state", "=", "Serializable", ".", "__getstate__", "(", "self", ")", "\n", "state", "[", "'pickled_weights'", "]", "=", "self", ".", "get_weights", "(", ")", "\n", "\n", "return", "state", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.policies.base_policy.BasePolicy.__setstate__": [[62, 65], ["serializable.Serializable.__setstate__", "base_policy.BasePolicy.set_weights"], "methods", ["home.repos.pwc.inspect_result.YaoYao1995_MEEE.samplers.remote_sampler.RemoteSampler.__setstate__", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.policies.gaussian_policy.GaussianPolicy.set_weights"], ["", "def", "__setstate__", "(", "self", ",", "state", ")", ":", "\n", "        ", "Serializable", ".", "__setstate__", "(", "self", ",", "state", ")", "\n", "self", ".", "set_weights", "(", "state", "[", "'pickled_weights'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.policies.base_policy.LatentSpacePolicy.__init__": [[68, 78], ["base_policy.BasePolicy.__init__", "base_policy.LatentSpacePolicy._reset_smoothing_x", "numpy.sqrt", "numpy.power"], "methods", ["home.repos.pwc.inspect_result.YaoYao1995_MEEE.env.humanoid.HumanoidTruncatedObsEnv.__init__", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.policies.base_policy.LatentSpacePolicy._reset_smoothing_x"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ",", "smoothing_coefficient", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "LatentSpacePolicy", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n", "assert", "smoothing_coefficient", "is", "None", "or", "0", "<=", "smoothing_coefficient", "<=", "1", "\n", "self", ".", "_smoothing_alpha", "=", "smoothing_coefficient", "or", "0", "\n", "self", ".", "_smoothing_beta", "=", "(", "\n", "np", ".", "sqrt", "(", "1.0", "-", "np", ".", "power", "(", "self", ".", "_smoothing_alpha", ",", "2.0", ")", ")", "\n", "/", "(", "1.0", "-", "self", ".", "_smoothing_alpha", ")", ")", "\n", "self", ".", "_reset_smoothing_x", "(", ")", "\n", "self", ".", "_smooth_latents", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.policies.base_policy.LatentSpacePolicy._reset_smoothing_x": [[79, 81], ["numpy.zeros"], "methods", ["None"], ["", "def", "_reset_smoothing_x", "(", "self", ")", ":", "\n", "        ", "self", ".", "_smoothing_x", "=", "np", ".", "zeros", "(", "(", "1", ",", "*", "self", ".", "_output_shape", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.policies.base_policy.LatentSpacePolicy.actions_np": [[82, 96], ["base_policy.LatentSpacePolicy.deterministic_actions_model.predict", "base_policy.LatentSpacePolicy.actions_model.predict", "base_policy.LatentSpacePolicy.latents_model.predict", "base_policy.LatentSpacePolicy.actions_model_for_fixed_latents.predict"], "methods", ["home.repos.pwc.inspect_result.YaoYao1995_MEEE.models.bnn.BNN.predict", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.models.bnn.BNN.predict", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.models.bnn.BNN.predict", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.models.bnn.BNN.predict"], ["", "def", "actions_np", "(", "self", ",", "conditions", ")", ":", "\n", "        ", "if", "self", ".", "_deterministic", ":", "\n", "            ", "return", "self", ".", "deterministic_actions_model", ".", "predict", "(", "conditions", ")", "\n", "", "elif", "self", ".", "_smoothing_alpha", "==", "0", ":", "\n", "            ", "return", "self", ".", "actions_model", ".", "predict", "(", "conditions", ")", "\n", "", "else", ":", "\n", "            ", "alpha", ",", "beta", "=", "self", ".", "_smoothing_alpha", ",", "self", ".", "_smoothing_beta", "\n", "raw_latents", "=", "self", ".", "latents_model", ".", "predict", "(", "conditions", ")", "\n", "self", ".", "_smoothing_x", "=", "(", "\n", "alpha", "*", "self", ".", "_smoothing_x", "+", "(", "1.0", "-", "alpha", ")", "*", "raw_latents", ")", "\n", "latents", "=", "beta", "*", "self", ".", "_smoothing_x", "\n", "\n", "return", "self", ".", "actions_model_for_fixed_latents", ".", "predict", "(", "\n", "[", "*", "conditions", ",", "latents", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.policies.base_policy.LatentSpacePolicy.reset": [[97, 99], ["base_policy.LatentSpacePolicy._reset_smoothing_x"], "methods", ["home.repos.pwc.inspect_result.YaoYao1995_MEEE.policies.base_policy.LatentSpacePolicy._reset_smoothing_x"], ["", "", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "_reset_smoothing_x", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.policies.uniform_policy.UniformPolicy.__init__": [[9, 41], ["base_policy.BasePolicy.__init__", "uniform_policy.UniformPolicy._Serializable__initialize", "tensorflow.keras.Model", "tensorflow.keras.Input", "tensorflow.keras.Model", "locals", "tensorflow.keras.layers.Input", "tensorflow.keras.layers.Lambda", "tensorflow.keras.layers.Lambda", "tensorflow.keras.layers.Lambda", "tensorflow.concat", "tensorflow.random.uniform", "tensorflow.tile", "tensorflow.log", "tensorflow.shape", "tensorflow.shape"], "methods", ["home.repos.pwc.inspect_result.YaoYao1995_MEEE.env.humanoid.HumanoidTruncatedObsEnv.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_shapes", ",", "output_shape", ",", "action_range", "=", "(", "-", "1.0", ",", "1.0", ")", ")", ":", "\n", "        ", "super", "(", "UniformPolicy", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_Serializable__initialize", "(", "locals", "(", ")", ")", "\n", "\n", "self", ".", "inputs", "=", "[", "\n", "tf", ".", "keras", ".", "layers", ".", "Input", "(", "shape", "=", "input_shape", ")", "\n", "for", "input_shape", "in", "input_shapes", "\n", "]", "\n", "self", ".", "_action_range", "=", "action_range", "\n", "\n", "x", "=", "tf", ".", "keras", ".", "layers", ".", "Lambda", "(", "\n", "lambda", "x", ":", "tf", ".", "concat", "(", "x", ",", "axis", "=", "-", "1", ")", "\n", ")", "(", "self", ".", "inputs", ")", "\n", "\n", "actions", "=", "tf", ".", "keras", ".", "layers", ".", "Lambda", "(", "\n", "lambda", "x", ":", "tf", ".", "random", ".", "uniform", "(", "\n", "(", "tf", ".", "shape", "(", "x", ")", "[", "0", "]", ",", "output_shape", "[", "0", "]", ")", ",", "\n", "*", "action_range", ")", "\n", ")", "(", "x", ")", "\n", "\n", "self", ".", "actions_model", "=", "tf", ".", "keras", ".", "Model", "(", "self", ".", "inputs", ",", "actions", ")", "\n", "\n", "self", ".", "actions_input", "=", "tf", ".", "keras", ".", "Input", "(", "shape", "=", "output_shape", ")", "\n", "\n", "log_pis", "=", "tf", ".", "keras", ".", "layers", ".", "Lambda", "(", "\n", "lambda", "x", ":", "tf", ".", "tile", "(", "tf", ".", "log", "(", "[", "\n", "(", "action_range", "[", "1", "]", "-", "action_range", "[", "0", "]", ")", "/", "2.0", "\n", "]", ")", "[", "None", "]", ",", "(", "tf", ".", "shape", "(", "x", ")", "[", "0", "]", ",", "1", ")", ")", "\n", ")", "(", "self", ".", "actions_input", ")", "\n", "\n", "self", ".", "log_pis_model", "=", "tf", ".", "keras", ".", "Model", "(", "\n", "(", "*", "self", ".", "inputs", ",", "self", ".", "actions_input", ")", ",", "log_pis", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.policies.uniform_policy.UniformPolicy.get_weights": [[42, 44], ["None"], "methods", ["None"], ["", "def", "get_weights", "(", "self", ")", ":", "\n", "        ", "return", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.policies.uniform_policy.UniformPolicy.set_weights": [[45, 47], ["None"], "methods", ["None"], ["", "def", "set_weights", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.policies.uniform_policy.UniformPolicy.trainable_variables": [[48, 51], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "trainable_variables", "(", "self", ")", ":", "\n", "        ", "return", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.policies.uniform_policy.UniformPolicy.reset": [[52, 54], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.policies.uniform_policy.UniformPolicy.actions": [[55, 57], ["uniform_policy.UniformPolicy.actions_model"], "methods", ["None"], ["", "def", "actions", "(", "self", ",", "conditions", ")", ":", "\n", "        ", "return", "self", ".", "actions_model", "(", "conditions", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.policies.uniform_policy.UniformPolicy.log_pis": [[58, 60], ["uniform_policy.UniformPolicy.log_pis_model"], "methods", ["None"], ["", "def", "log_pis", "(", "self", ",", "conditions", ",", "actions", ")", ":", "\n", "        ", "return", "self", ".", "log_pis_model", "(", "[", "*", "conditions", ",", "actions", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.policies.uniform_policy.UniformPolicy.actions_np": [[61, 63], ["uniform_policy.UniformPolicy.actions_model.predict"], "methods", ["home.repos.pwc.inspect_result.YaoYao1995_MEEE.models.bnn.BNN.predict"], ["", "def", "actions_np", "(", "self", ",", "conditions", ")", ":", "\n", "        ", "return", "self", ".", "actions_model", ".", "predict", "(", "conditions", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.policies.uniform_policy.UniformPolicy.log_pis_np": [[64, 66], ["uniform_policy.UniformPolicy.log_pis_model.predict"], "methods", ["home.repos.pwc.inspect_result.YaoYao1995_MEEE.models.bnn.BNN.predict"], ["", "def", "log_pis_np", "(", "self", ",", "conditions", ",", "actions", ")", ":", "\n", "        ", "return", "self", ".", "log_pis_model", ".", "predict", "(", "[", "*", "conditions", ",", "actions", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.policies.uniform_policy.UniformPolicy.get_diagnostics": [[67, 69], ["collections.OrderedDict"], "methods", ["None"], ["", "def", "get_diagnostics", "(", "self", ",", "conditions", ")", ":", "\n", "        ", "return", "OrderedDict", "(", "{", "}", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.policies.utils.get_gaussian_policy": [[6, 14], ["FeedforwardGaussianPolicy"], "function", ["None"], ["from", "ray", ".", "tune", "import", "sample_from", "\n", "\n", "import", "softlearning", ".", "algorithms", ".", "utils", "as", "alg_utils", "\n", "import", "softlearning", ".", "environments", ".", "utils", "as", "env_utils", "\n", "from", "softlearning", ".", "misc", ".", "utils", "import", "datetimestamp", "\n", "\n", "\n", "DEFAULT_UNIVERSE", "=", "'gym'", "\n", "DEFAULT_DOMAIN", "=", "'HalfCheetah'", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.policies.utils.get_uniform_policy": [[16, 23], ["UniformPolicy"], "function", ["None"], ["DEFAULT_ALGORITHM", "=", "'MEEE'", "\n", "\n", "\n", "TASKS_BY_DOMAIN_BY_UNIVERSE", "=", "{", "\n", "universe", ":", "{", "\n", "domain", ":", "tuple", "(", "tasks", ")", "\n", "for", "domain", ",", "tasks", "in", "domains", ".", "items", "(", ")", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.policies.utils.get_policy": [[31, 33], ["None"], "function", ["None"], ["for", "domain", ",", "tasks", "in", "domains", ".", "items", "(", ")", "\n", "]", ",", "\n", "(", ")", ")", ")", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.policies.utils.get_policy_from_variant": [[35, 52], ["copy.deepcopy", "copy.deepcopy.pop", "softlearning.preprocessors.utils.get_preprocessor_from_params"], "function", ["home.repos.pwc.inspect_result.YaoYao1995_MEEE.models.bnn.BNN.pop", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.preprocessors.utils.get_preprocessor_from_params"], ["DOMAINS_BY_UNIVERSE", "=", "{", "\n", "universe", ":", "tuple", "(", "domains", ")", "\n", "for", "universe", ",", "domains", "in", "env_utils", ".", "ENVIRONMENTS", ".", "items", "(", ")", "\n", "}", "\n", "\n", "AVAILABLE_DOMAINS", "=", "set", "(", "sum", "(", "DOMAINS_BY_UNIVERSE", ".", "values", "(", ")", ",", "(", ")", ")", ")", "\n", "\n", "UNIVERSES", "=", "tuple", "(", "env_utils", ".", "ENVIRONMENTS", ")", "\n", "\n", "AVAILABLE_ALGORITHMS", "=", "set", "(", "alg_utils", ".", "ALGORITHM_CLASSES", ".", "keys", "(", ")", ")", "\n", "\n", "\n", "def", "parse_universe", "(", "env_name", ")", ":", "\n", "    ", "universe", "=", "next", "(", "\n", "(", "universe", "for", "universe", "in", "UNIVERSES", "if", "universe", "in", "env_name", ")", ",", "\n", "DEFAULT_UNIVERSE", ")", "\n", "return", "universe", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.policies.gaussian_policy.GaussianPolicy.__init__": [[18, 153], ["gaussian_policy.GaussianPolicy._Serializable__initialize", "base_policy.LatentSpacePolicy.__init__", "tensorflow_probability.distributions.MultivariateNormalDiag", "tensorflow.keras.Model", "tensorflow.keras.layers.Input", "tensorflow.keras.Model", "tensorflow.keras.Model", "tensorflow.keras.Model", "tensorflow.keras.layers.Input", "tensorflow.keras.Model", "tensorflow.keras.Model", "locals", "tensorflow.keras.layers.Input", "tensorflow.keras.layers.Lambda", "preprocessor", "gaussian_policy.GaussianPolicy._shift_and_log_scale_diag_net", "tensorflow.keras.layers.Lambda", "tensorflow.keras.layers.Lambda", "tensorflow.keras.layers.Lambda", "tensorflow.keras.layers.Lambda", "tensorflow_probability.bijectors.Affine", "tensorflow_probability.bijectors.Chain.forward", "tensorflow.keras.layers.Lambda", "tensorflow.keras.layers.Lambda", "softlearning.distributions.squash_bijector.SquashBijector", "tensorflow_probability.bijectors.Identity", "tensorflow.keras.layers.Lambda", "tensorflow.keras.layers.Lambda", "tensorflow.keras.layers.Lambda", "tensorflow_probability.distributions.MultivariateNormalDiag", "tensorflow_probability.bijectors.Chain", "tensorflow_probability.distributions.ConditionalTransformedDistribution", "tensorflow.keras.layers.Lambda", "tensorflow.keras.layers.Lambda", "tensorflow.zeros", "tensorflow.ones", "tensorflow_probability.distributions.ConditionalTransformedDistribution.log_prob", "tensorflow.concat", "tensorflow.split", "tensorflow.clip_by_value", "tensorflow_probability.distributions.MultivariateNormalDiag.sample", "tensorflow.exp", "squash_bijector.forward", "squash_bijector.forward", "squash_bijector.forward", "tensorflow.zeros", "tensorflow.ones", "tensorflow_probability.bijectors.Affine", "tensorflow.shape", "tensorflow.exp"], "methods", ["home.repos.pwc.inspect_result.YaoYao1995_MEEE.env.humanoid.HumanoidTruncatedObsEnv.__init__", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.policies.gaussian_policy.FeedforwardGaussianPolicy._shift_and_log_scale_diag_net", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.samplers.explore_sampler.ExploreSampler.sample"], ["    ", "def", "__init__", "(", "self", ",", "\n", "input_shapes", ",", "\n", "output_shape", ",", "\n", "squash", "=", "True", ",", "\n", "preprocessor", "=", "None", ",", "\n", "name", "=", "None", ",", "\n", "*", "args", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "_Serializable__initialize", "(", "locals", "(", ")", ")", "\n", "\n", "self", ".", "_input_shapes", "=", "input_shapes", "\n", "self", ".", "_output_shape", "=", "output_shape", "\n", "self", ".", "_squash", "=", "squash", "\n", "self", ".", "_name", "=", "name", "\n", "self", ".", "_preprocessor", "=", "preprocessor", "\n", "\n", "super", "(", "GaussianPolicy", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n", "self", ".", "condition_inputs", "=", "[", "\n", "tf", ".", "keras", ".", "layers", ".", "Input", "(", "shape", "=", "input_shape", ")", "\n", "for", "input_shape", "in", "input_shapes", "\n", "]", "\n", "\n", "conditions", "=", "tf", ".", "keras", ".", "layers", ".", "Lambda", "(", "\n", "lambda", "x", ":", "tf", ".", "concat", "(", "x", ",", "axis", "=", "-", "1", ")", "\n", ")", "(", "self", ".", "condition_inputs", ")", "\n", "\n", "if", "preprocessor", "is", "not", "None", ":", "\n", "            ", "conditions", "=", "preprocessor", "(", "conditions", ")", "\n", "\n", "", "shift_and_log_scale_diag", "=", "self", ".", "_shift_and_log_scale_diag_net", "(", "\n", "input_shapes", "=", "(", "conditions", ".", "shape", "[", "1", ":", "]", ",", ")", ",", "\n", "output_size", "=", "output_shape", "[", "0", "]", "*", "2", ",", "\n", ")", "(", "conditions", ")", "\n", "\n", "shift", ",", "log_scale_diag", "=", "tf", ".", "keras", ".", "layers", ".", "Lambda", "(", "\n", "lambda", "shift_and_log_scale_diag", ":", "tf", ".", "split", "(", "\n", "shift_and_log_scale_diag", ",", "\n", "num_or_size_splits", "=", "2", ",", "\n", "axis", "=", "-", "1", ")", "\n", ")", "(", "shift_and_log_scale_diag", ")", "\n", "\n", "log_scale_diag", "=", "tf", ".", "keras", ".", "layers", ".", "Lambda", "(", "\n", "lambda", "log_scale_diag", ":", "tf", ".", "clip_by_value", "(", "\n", "log_scale_diag", ",", "*", "SCALE_DIAG_MIN_MAX", ")", "\n", ")", "(", "log_scale_diag", ")", "\n", "\n", "batch_size", "=", "tf", ".", "keras", ".", "layers", ".", "Lambda", "(", "\n", "lambda", "x", ":", "tf", ".", "shape", "(", "x", ")", "[", "0", "]", ")", "(", "conditions", ")", "\n", "\n", "base_distribution", "=", "tfp", ".", "distributions", ".", "MultivariateNormalDiag", "(", "\n", "loc", "=", "tf", ".", "zeros", "(", "output_shape", ")", ",", "\n", "scale_diag", "=", "tf", ".", "ones", "(", "output_shape", ")", ")", "\n", "\n", "latents", "=", "tf", ".", "keras", ".", "layers", ".", "Lambda", "(", "\n", "lambda", "batch_size", ":", "base_distribution", ".", "sample", "(", "batch_size", ")", "\n", ")", "(", "batch_size", ")", "\n", "\n", "self", ".", "latents_model", "=", "tf", ".", "keras", ".", "Model", "(", "self", ".", "condition_inputs", ",", "latents", ")", "\n", "self", ".", "latents_input", "=", "tf", ".", "keras", ".", "layers", ".", "Input", "(", "shape", "=", "output_shape", ")", "\n", "\n", "def", "raw_actions_fn", "(", "inputs", ")", ":", "\n", "            ", "shift", ",", "log_scale_diag", ",", "latents", "=", "inputs", "\n", "bijector", "=", "tfp", ".", "bijectors", ".", "Affine", "(", "\n", "shift", "=", "shift", ",", "\n", "scale_diag", "=", "tf", ".", "exp", "(", "log_scale_diag", ")", ")", "\n", "actions", "=", "bijector", ".", "forward", "(", "latents", ")", "\n", "return", "actions", "\n", "\n", "", "raw_actions", "=", "tf", ".", "keras", ".", "layers", ".", "Lambda", "(", "\n", "raw_actions_fn", "\n", ")", "(", "(", "shift", ",", "log_scale_diag", ",", "latents", ")", ")", "\n", "\n", "raw_actions_for_fixed_latents", "=", "tf", ".", "keras", ".", "layers", ".", "Lambda", "(", "\n", "raw_actions_fn", "\n", ")", "(", "(", "shift", ",", "log_scale_diag", ",", "self", ".", "latents_input", ")", ")", "\n", "\n", "squash_bijector", "=", "(", "\n", "SquashBijector", "(", ")", "\n", "if", "self", ".", "_squash", "\n", "else", "tfp", ".", "bijectors", ".", "Identity", "(", ")", ")", "\n", "\n", "actions", "=", "tf", ".", "keras", ".", "layers", ".", "Lambda", "(", "\n", "lambda", "raw_actions", ":", "squash_bijector", ".", "forward", "(", "raw_actions", ")", "\n", ")", "(", "raw_actions", ")", "\n", "self", ".", "actions_model", "=", "tf", ".", "keras", ".", "Model", "(", "self", ".", "condition_inputs", ",", "actions", ")", "\n", "\n", "actions_for_fixed_latents", "=", "tf", ".", "keras", ".", "layers", ".", "Lambda", "(", "\n", "lambda", "raw_actions", ":", "squash_bijector", ".", "forward", "(", "raw_actions", ")", "\n", ")", "(", "raw_actions_for_fixed_latents", ")", "\n", "self", ".", "actions_model_for_fixed_latents", "=", "tf", ".", "keras", ".", "Model", "(", "\n", "(", "*", "self", ".", "condition_inputs", ",", "self", ".", "latents_input", ")", ",", "\n", "actions_for_fixed_latents", ")", "\n", "\n", "deterministic_actions", "=", "tf", ".", "keras", ".", "layers", ".", "Lambda", "(", "\n", "lambda", "shift", ":", "squash_bijector", ".", "forward", "(", "shift", ")", "\n", ")", "(", "shift", ")", "\n", "\n", "self", ".", "deterministic_actions_model", "=", "tf", ".", "keras", ".", "Model", "(", "\n", "self", ".", "condition_inputs", ",", "deterministic_actions", ")", "\n", "\n", "def", "log_pis_fn", "(", "inputs", ")", ":", "\n", "            ", "shift", ",", "log_scale_diag", ",", "actions", "=", "inputs", "\n", "base_distribution", "=", "tfp", ".", "distributions", ".", "MultivariateNormalDiag", "(", "\n", "loc", "=", "tf", ".", "zeros", "(", "output_shape", ")", ",", "\n", "scale_diag", "=", "tf", ".", "ones", "(", "output_shape", ")", ")", "\n", "bijector", "=", "tfp", ".", "bijectors", ".", "Chain", "(", "(", "\n", "squash_bijector", ",", "\n", "tfp", ".", "bijectors", ".", "Affine", "(", "\n", "shift", "=", "shift", ",", "\n", "scale_diag", "=", "tf", ".", "exp", "(", "log_scale_diag", ")", ")", ",", "\n", ")", ")", "\n", "distribution", "=", "(", "\n", "tfp", ".", "distributions", ".", "ConditionalTransformedDistribution", "(", "\n", "distribution", "=", "base_distribution", ",", "\n", "bijector", "=", "bijector", ")", ")", "\n", "\n", "log_pis", "=", "distribution", ".", "log_prob", "(", "actions", ")", "[", ":", ",", "None", "]", "\n", "return", "log_pis", "\n", "\n", "", "self", ".", "actions_input", "=", "tf", ".", "keras", ".", "layers", ".", "Input", "(", "shape", "=", "output_shape", ")", "\n", "\n", "log_pis", "=", "tf", ".", "keras", ".", "layers", ".", "Lambda", "(", "\n", "log_pis_fn", ")", "(", "[", "shift", ",", "log_scale_diag", ",", "actions", "]", ")", "\n", "\n", "log_pis_for_action_input", "=", "tf", ".", "keras", ".", "layers", ".", "Lambda", "(", "\n", "log_pis_fn", ")", "(", "[", "shift", ",", "log_scale_diag", ",", "self", ".", "actions_input", "]", ")", "\n", "\n", "self", ".", "log_pis_model", "=", "tf", ".", "keras", ".", "Model", "(", "\n", "(", "*", "self", ".", "condition_inputs", ",", "self", ".", "actions_input", ")", ",", "\n", "log_pis_for_action_input", ")", "\n", "\n", "self", ".", "diagnostics_model", "=", "tf", ".", "keras", ".", "Model", "(", "\n", "self", ".", "condition_inputs", ",", "\n", "(", "shift", ",", "log_scale_diag", ",", "log_pis", ",", "raw_actions", ",", "actions", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.policies.gaussian_policy.GaussianPolicy._shift_and_log_scale_diag_net": [[154, 156], ["None"], "methods", ["None"], ["", "def", "_shift_and_log_scale_diag_net", "(", "self", ",", "input_shapes", ",", "output_size", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.policies.gaussian_policy.GaussianPolicy.get_weights": [[157, 159], ["gaussian_policy.GaussianPolicy.actions_model.get_weights"], "methods", ["home.repos.pwc.inspect_result.YaoYao1995_MEEE.policies.gaussian_policy.GaussianPolicy.get_weights"], ["", "def", "get_weights", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "actions_model", ".", "get_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.policies.gaussian_policy.GaussianPolicy.set_weights": [[160, 162], ["gaussian_policy.GaussianPolicy.actions_model.set_weights"], "methods", ["home.repos.pwc.inspect_result.YaoYao1995_MEEE.policies.gaussian_policy.GaussianPolicy.set_weights"], ["", "def", "set_weights", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "self", ".", "actions_model", ".", "set_weights", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.policies.gaussian_policy.GaussianPolicy.trainable_variables": [[163, 166], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "trainable_variables", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "actions_model", ".", "trainable_variables", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.policies.gaussian_policy.GaussianPolicy.non_trainable_weights": [[167, 171], ["list", "set"], "methods", ["None"], ["", "@", "property", "\n", "def", "non_trainable_weights", "(", "self", ")", ":", "\n", "        ", "\"\"\"Due to our nested model structure, we need to filter duplicates.\"\"\"", "\n", "return", "list", "(", "set", "(", "super", "(", "GaussianPolicy", ",", "self", ")", ".", "non_trainable_weights", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.policies.gaussian_policy.GaussianPolicy.actions": [[172, 177], ["gaussian_policy.GaussianPolicy.actions_model", "gaussian_policy.GaussianPolicy.deterministic_actions_model"], "methods", ["None"], ["", "def", "actions", "(", "self", ",", "conditions", ")", ":", "\n", "        ", "if", "self", ".", "_deterministic", ":", "\n", "            ", "return", "self", ".", "deterministic_actions_model", "(", "conditions", ")", "\n", "\n", "", "return", "self", ".", "actions_model", "(", "conditions", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.policies.gaussian_policy.GaussianPolicy.log_pis": [[178, 181], ["gaussian_policy.GaussianPolicy.log_pis_model"], "methods", ["None"], ["", "def", "log_pis", "(", "self", ",", "conditions", ",", "actions", ")", ":", "\n", "        ", "assert", "not", "self", ".", "_deterministic", ",", "self", ".", "_deterministic", "\n", "return", "self", ".", "log_pis_model", "(", "[", "*", "conditions", ",", "actions", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.policies.gaussian_policy.GaussianPolicy.actions_np": [[182, 184], ["super().actions_np"], "methods", ["home.repos.pwc.inspect_result.YaoYao1995_MEEE.policies.gaussian_policy.GaussianPolicy.actions_np"], ["", "def", "actions_np", "(", "self", ",", "conditions", ")", ":", "\n", "        ", "return", "super", "(", "GaussianPolicy", ",", "self", ")", ".", "actions_np", "(", "conditions", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.policies.gaussian_policy.GaussianPolicy.log_pis_np": [[185, 188], ["gaussian_policy.GaussianPolicy.log_pis_model.predict"], "methods", ["home.repos.pwc.inspect_result.YaoYao1995_MEEE.models.bnn.BNN.predict"], ["", "def", "log_pis_np", "(", "self", ",", "conditions", ",", "actions", ")", ":", "\n", "        ", "assert", "not", "self", ".", "_deterministic", ",", "self", ".", "_deterministic", "\n", "return", "self", ".", "log_pis_model", ".", "predict", "(", "[", "*", "conditions", ",", "actions", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.policies.gaussian_policy.GaussianPolicy.get_diagnostics": [[189, 216], ["gaussian_policy.GaussianPolicy.diagnostics_model.predict", "collections.OrderedDict", "numpy.mean", "numpy.std", "numpy.mean", "numpy.std", "numpy.mean", "numpy.std", "numpy.mean", "numpy.std", "numpy.mean", "numpy.std"], "methods", ["home.repos.pwc.inspect_result.YaoYao1995_MEEE.models.bnn.BNN.predict"], ["", "def", "get_diagnostics", "(", "self", ",", "conditions", ")", ":", "\n", "        ", "\"\"\"Return diagnostic information of the policy.\n\n        Returns the mean, min, max, and standard deviation of means and\n        covariances.\n        \"\"\"", "\n", "(", "shifts_np", ",", "\n", "log_scale_diags_np", ",", "\n", "log_pis_np", ",", "\n", "raw_actions_np", ",", "\n", "actions_np", ")", "=", "self", ".", "diagnostics_model", ".", "predict", "(", "conditions", ")", "\n", "\n", "return", "OrderedDict", "(", "{", "\n", "'shifts-mean'", ":", "np", ".", "mean", "(", "shifts_np", ")", ",", "\n", "'shifts-std'", ":", "np", ".", "std", "(", "shifts_np", ")", ",", "\n", "\n", "'log_scale_diags-mean'", ":", "np", ".", "mean", "(", "log_scale_diags_np", ")", ",", "\n", "'log_scale_diags-std'", ":", "np", ".", "std", "(", "log_scale_diags_np", ")", ",", "\n", "\n", "'-log-pis-mean'", ":", "np", ".", "mean", "(", "-", "log_pis_np", ")", ",", "\n", "'-log-pis-std'", ":", "np", ".", "std", "(", "-", "log_pis_np", ")", ",", "\n", "\n", "'raw-actions-mean'", ":", "np", ".", "mean", "(", "raw_actions_np", ")", ",", "\n", "'raw-actions-std'", ":", "np", ".", "std", "(", "raw_actions_np", ")", ",", "\n", "\n", "'actions-mean'", ":", "np", ".", "mean", "(", "actions_np", ")", ",", "\n", "'actions-std'", ":", "np", ".", "std", "(", "actions_np", ")", ",", "\n", "}", ")", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.policies.gaussian_policy.FeedforwardGaussianPolicy.__init__": [[220, 231], ["gaussian_policy.FeedforwardGaussianPolicy._Serializable__initialize", "gaussian_policy.GaussianPolicy.__init__", "locals"], "methods", ["home.repos.pwc.inspect_result.YaoYao1995_MEEE.env.humanoid.HumanoidTruncatedObsEnv.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "hidden_layer_sizes", ",", "\n", "activation", "=", "'relu'", ",", "\n", "output_activation", "=", "'linear'", ",", "\n", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "_hidden_layer_sizes", "=", "hidden_layer_sizes", "\n", "self", ".", "_activation", "=", "activation", "\n", "self", ".", "_output_activation", "=", "output_activation", "\n", "\n", "self", ".", "_Serializable__initialize", "(", "locals", "(", ")", ")", "\n", "super", "(", "FeedforwardGaussianPolicy", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.policies.gaussian_policy.FeedforwardGaussianPolicy._shift_and_log_scale_diag_net": [[232, 241], ["softlearning.models.feedforward.feedforward_model"], "methods", ["home.repos.pwc.inspect_result.YaoYao1995_MEEE.models.feedforward.feedforward_model"], ["", "def", "_shift_and_log_scale_diag_net", "(", "self", ",", "input_shapes", ",", "output_size", ")", ":", "\n", "        ", "shift_and_log_scale_diag_net", "=", "feedforward_model", "(", "\n", "input_shapes", "=", "input_shapes", ",", "\n", "hidden_layer_sizes", "=", "self", ".", "_hidden_layer_sizes", ",", "\n", "output_size", "=", "output_size", ",", "\n", "activation", "=", "self", ".", "_activation", ",", "\n", "output_activation", "=", "self", ".", "_output_activation", ")", "\n", "\n", "return", "shift_and_log_scale_diag_net", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.policies.gaussian_policy.FeedforwardGaussianPolicy.get_distribution": [[242, 257], ["gaussian_policy.FeedforwardGaussianPolicy.diagnostics_model.predict", "collections.OrderedDict"], "methods", ["home.repos.pwc.inspect_result.YaoYao1995_MEEE.models.bnn.BNN.predict"], ["", "def", "get_distribution", "(", "self", ",", "conditions", ")", ":", "\n", "        ", "\"\"\"Return diagnostic information of the policy.\n\n        Returns the mean, min, max, and standard deviation of means and\n        covariances.\n        \"\"\"", "\n", "(", "shifts_np", ",", "\n", "log_scale_diags_np", ",", "\n", "log_pis_np", ",", "\n", "raw_actions_np", ",", "\n", "actions_np", ")", "=", "self", ".", "diagnostics_model", ".", "predict", "(", "conditions", ")", "\n", "\n", "return", "OrderedDict", "(", "{", "\n", "'shifts'", ":", "shifts_np", ",", "\n", "'log_scale_diags'", ":", "log_scale_diags_np", ",", "\n", "}", ")", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.replay_pools.flexible_replay_pool.FlexibleReplayPool.__init__": [[10, 24], ["replay_pool.ReplayPool.__init__", "int", "flexible_replay_pool.FlexibleReplayPool.add_fields"], "methods", ["home.repos.pwc.inspect_result.YaoYao1995_MEEE.env.humanoid.HumanoidTruncatedObsEnv.__init__", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.replay_pools.flexible_replay_pool.FlexibleReplayPool.add_fields"], ["    ", "def", "__init__", "(", "self", ",", "max_size", ",", "fields_attrs", ")", ":", "\n", "        ", "super", "(", "FlexibleReplayPool", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "max_size", "=", "int", "(", "max_size", ")", "\n", "self", ".", "_max_size", "=", "max_size", "\n", "\n", "self", ".", "fields", "=", "{", "}", "\n", "self", ".", "fields_attrs", "=", "{", "}", "\n", "\n", "self", ".", "add_fields", "(", "fields_attrs", ")", "\n", "\n", "self", ".", "_pointer", "=", "0", "\n", "self", ".", "_size", "=", "0", "\n", "self", ".", "_samples_since_save", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.replay_pools.flexible_replay_pool.FlexibleReplayPool.size": [[25, 28], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "size", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_size", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.replay_pools.flexible_replay_pool.FlexibleReplayPool.field_names": [[29, 32], ["list", "flexible_replay_pool.FlexibleReplayPool.fields.keys"], "methods", ["None"], ["", "@", "property", "\n", "def", "field_names", "(", "self", ")", ":", "\n", "        ", "return", "list", "(", "self", ".", "fields", ".", "keys", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.replay_pools.flexible_replay_pool.FlexibleReplayPool.add_fields": [[33, 41], ["flexible_replay_pool.FlexibleReplayPool.fields_attrs.update", "fields_attrs.items", "field_attrs.get", "field_attrs.get."], "methods", ["home.repos.pwc.inspect_result.YaoYao1995_MEEE.utils.logging.Progress.update"], ["", "def", "add_fields", "(", "self", ",", "fields_attrs", ")", ":", "\n", "        ", "self", ".", "fields_attrs", ".", "update", "(", "fields_attrs", ")", "\n", "\n", "for", "field_name", ",", "field_attrs", "in", "fields_attrs", ".", "items", "(", ")", ":", "\n", "            ", "field_shape", "=", "(", "self", ".", "_max_size", ",", "*", "field_attrs", "[", "'shape'", "]", ")", "\n", "initializer", "=", "field_attrs", ".", "get", "(", "'initializer'", ",", "np", ".", "zeros", ")", "\n", "self", ".", "fields", "[", "field_name", "]", "=", "initializer", "(", "\n", "field_shape", ",", "dtype", "=", "field_attrs", "[", "'dtype'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.replay_pools.flexible_replay_pool.FlexibleReplayPool._advance": [[42, 46], ["min"], "methods", ["None"], ["", "", "def", "_advance", "(", "self", ",", "count", "=", "1", ")", ":", "\n", "        ", "self", ".", "_pointer", "=", "(", "self", ".", "_pointer", "+", "count", ")", "%", "self", ".", "_max_size", "\n", "self", ".", "_size", "=", "min", "(", "self", ".", "_size", "+", "count", ",", "self", ".", "_max_size", ")", "\n", "self", ".", "_samples_since_save", "+=", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.replay_pools.flexible_replay_pool.FlexibleReplayPool.add_sample": [[47, 53], ["flexible_replay_pool.FlexibleReplayPool.add_samples", "sample.items"], "methods", ["home.repos.pwc.inspect_result.YaoYao1995_MEEE.replay_pools.trajectory_replay_pool.TrajectoryReplayPool.add_samples"], ["", "def", "add_sample", "(", "self", ",", "sample", ")", ":", "\n", "        ", "samples", "=", "{", "\n", "key", ":", "value", "[", "None", ",", "...", "]", "\n", "for", "key", ",", "value", "in", "sample", ".", "items", "(", ")", "\n", "}", "\n", "self", ".", "add_samples", "(", "samples", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.replay_pools.flexible_replay_pool.FlexibleReplayPool.add_samples": [[54, 69], ["list", "flexible_replay_pool.FlexibleReplayPool._advance", "samples.keys", "numpy.arange", "flexible_replay_pool.FlexibleReplayPool.fields_attrs[].get", "samples.get"], "methods", ["home.repos.pwc.inspect_result.YaoYao1995_MEEE.replay_pools.flexible_replay_pool.FlexibleReplayPool._advance"], ["", "def", "add_samples", "(", "self", ",", "samples", ")", ":", "\n", "        ", "field_names", "=", "list", "(", "samples", ".", "keys", "(", ")", ")", "\n", "num_samples", "=", "samples", "[", "field_names", "[", "0", "]", "]", ".", "shape", "[", "0", "]", "\n", "\n", "index", "=", "np", ".", "arange", "(", "\n", "self", ".", "_pointer", ",", "self", ".", "_pointer", "+", "num_samples", ")", "%", "self", ".", "_max_size", "\n", "\n", "for", "field_name", "in", "self", ".", "field_names", ":", "\n", "            ", "default_value", "=", "(", "\n", "self", ".", "fields_attrs", "[", "field_name", "]", ".", "get", "(", "'default_value'", ",", "0.0", ")", ")", "\n", "values", "=", "samples", ".", "get", "(", "field_name", ",", "default_value", ")", "\n", "assert", "values", ".", "shape", "[", "0", "]", "==", "num_samples", "\n", "self", ".", "fields", "[", "field_name", "]", "[", "index", "]", "=", "values", "\n", "\n", "", "self", ".", "_advance", "(", "num_samples", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.replay_pools.flexible_replay_pool.FlexibleReplayPool.random_indices": [[70, 73], ["numpy.random.randint", "numpy.arange"], "methods", ["None"], ["", "def", "random_indices", "(", "self", ",", "batch_size", ")", ":", "\n", "        ", "if", "self", ".", "_size", "==", "0", ":", "return", "np", ".", "arange", "(", "0", ",", "0", ")", "\n", "return", "np", ".", "random", ".", "randint", "(", "0", ",", "self", ".", "_size", ",", "batch_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.replay_pools.flexible_replay_pool.FlexibleReplayPool.random_batch": [[74, 78], ["flexible_replay_pool.FlexibleReplayPool.random_indices", "flexible_replay_pool.FlexibleReplayPool.batch_by_indices"], "methods", ["home.repos.pwc.inspect_result.YaoYao1995_MEEE.replay_pools.flexible_replay_pool.FlexibleReplayPool.random_indices", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.replay_pools.trajectory_replay_pool.TrajectoryReplayPool.batch_by_indices"], ["", "def", "random_batch", "(", "self", ",", "batch_size", ",", "field_name_filter", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "random_indices", "=", "self", ".", "random_indices", "(", "batch_size", ")", "\n", "return", "self", ".", "batch_by_indices", "(", "\n", "random_indices", ",", "field_name_filter", "=", "field_name_filter", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.replay_pools.flexible_replay_pool.FlexibleReplayPool.last_n_batch": [[79, 85], ["flexible_replay_pool.FlexibleReplayPool.batch_by_indices", "numpy.arange", "min"], "methods", ["home.repos.pwc.inspect_result.YaoYao1995_MEEE.replay_pools.trajectory_replay_pool.TrajectoryReplayPool.batch_by_indices"], ["", "def", "last_n_batch", "(", "self", ",", "last_n", ",", "field_name_filter", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "last_n_indices", "=", "np", ".", "arange", "(", "\n", "self", ".", "_pointer", "-", "min", "(", "self", ".", "size", ",", "last_n", ")", ",", "self", ".", "_pointer", "\n", ")", "%", "self", ".", "_max_size", "\n", "return", "self", ".", "batch_by_indices", "(", "\n", "last_n_indices", ",", "field_name_filter", "=", "field_name_filter", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.replay_pools.flexible_replay_pool.FlexibleReplayPool.filter_fields": [[86, 105], ["isinstance", "isinstance", "flexible_replay_pool.FlexibleReplayPool.filter_fields.filter_fn"], "methods", ["None"], ["", "def", "filter_fields", "(", "self", ",", "field_names", ",", "field_name_filter", ")", ":", "\n", "        ", "if", "isinstance", "(", "field_name_filter", ",", "str", ")", ":", "\n", "            ", "field_name_filter", "=", "[", "field_name_filter", "]", "\n", "\n", "", "if", "isinstance", "(", "field_name_filter", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "            ", "field_name_list", "=", "field_name_filter", "\n", "\n", "def", "filter_fn", "(", "field_name", ")", ":", "\n", "                ", "return", "field_name", "in", "field_name_list", "\n", "\n", "", "", "else", ":", "\n", "            ", "filter_fn", "=", "field_name_filter", "\n", "\n", "", "filtered_field_names", "=", "[", "\n", "field_name", "for", "field_name", "in", "field_names", "\n", "if", "filter_fn", "(", "field_name", ")", "\n", "]", "\n", "\n", "return", "filtered_field_names", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.replay_pools.flexible_replay_pool.FlexibleReplayPool.batch_by_indices": [[106, 120], ["numpy.any", "ValueError", "flexible_replay_pool.FlexibleReplayPool.filter_fields"], "methods", ["home.repos.pwc.inspect_result.YaoYao1995_MEEE.replay_pools.flexible_replay_pool.FlexibleReplayPool.filter_fields"], ["", "def", "batch_by_indices", "(", "self", ",", "indices", ",", "field_name_filter", "=", "None", ")", ":", "\n", "        ", "if", "np", ".", "any", "(", "indices", "%", "self", ".", "_max_size", ">", "self", ".", "size", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"Tried to retrieve batch with indices greater than current\"", "\n", "\" size\"", ")", "\n", "\n", "", "field_names", "=", "self", ".", "field_names", "\n", "if", "field_name_filter", "is", "not", "None", ":", "\n", "            ", "field_names", "=", "self", ".", "filter_fields", "(", "\n", "field_names", ",", "field_name_filter", ")", "\n", "\n", "", "return", "{", "\n", "field_name", ":", "self", ".", "fields", "[", "field_name", "]", "[", "indices", "]", "\n", "for", "field_name", "in", "field_names", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.replay_pools.flexible_replay_pool.FlexibleReplayPool.save_latest_experience": [[122, 129], ["flexible_replay_pool.FlexibleReplayPool.last_n_batch", "gzip.open", "pickle.dump"], "methods", ["home.repos.pwc.inspect_result.YaoYao1995_MEEE.replay_pools.trajectory_replay_pool.TrajectoryReplayPool.last_n_batch"], ["", "def", "save_latest_experience", "(", "self", ",", "pickle_path", ")", ":", "\n", "        ", "latest_samples", "=", "self", ".", "last_n_batch", "(", "self", ".", "_samples_since_save", ")", "\n", "\n", "with", "gzip", ".", "open", "(", "pickle_path", ",", "'wb'", ")", "as", "f", ":", "\n", "            ", "pickle", ".", "dump", "(", "latest_samples", ",", "f", ")", "\n", "\n", "", "self", ".", "_samples_since_save", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.replay_pools.flexible_replay_pool.FlexibleReplayPool.load_experience": [[130, 141], ["pickle.load.items", "flexible_replay_pool.FlexibleReplayPool.add_samples", "gzip.open", "pickle.load", "list", "pickle.load.keys"], "methods", ["home.repos.pwc.inspect_result.YaoYao1995_MEEE.replay_pools.trajectory_replay_pool.TrajectoryReplayPool.add_samples"], ["", "def", "load_experience", "(", "self", ",", "experience_path", ")", ":", "\n", "        ", "with", "gzip", ".", "open", "(", "experience_path", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "latest_samples", "=", "pickle", ".", "load", "(", "f", ")", "\n", "\n", "", "key", "=", "list", "(", "latest_samples", ".", "keys", "(", ")", ")", "[", "0", "]", "\n", "num_samples", "=", "latest_samples", "[", "key", "]", ".", "shape", "[", "0", "]", "\n", "for", "field_name", ",", "data", "in", "latest_samples", ".", "items", "(", ")", ":", "\n", "            ", "assert", "data", ".", "shape", "[", "0", "]", "==", "num_samples", ",", "data", ".", "shape", "\n", "\n", "", "self", ".", "add_samples", "(", "latest_samples", ")", "\n", "self", ".", "_samples_since_save", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.replay_pools.flexible_replay_pool.FlexibleReplayPool.return_all_samples": [[142, 146], ["None"], "methods", ["None"], ["", "def", "return_all_samples", "(", "self", ")", ":", "\n", "        ", "return", "{", "\n", "field_name", ":", "self", ".", "fields", "[", "field_name", "]", "[", ":", "self", ".", "size", "]", "\n", "for", "field_name", "in", "self", ".", "field_names", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.replay_pools.flexible_replay_pool.FlexibleReplayPool.__getstate__": [[148, 156], ["flexible_replay_pool.FlexibleReplayPool.__dict__.copy"], "methods", ["home.repos.pwc.inspect_result.YaoYao1995_MEEE.adapters.softlearning_env.SoftlearningEnv.copy"], ["", "def", "__getstate__", "(", "self", ")", ":", "\n", "        ", "state", "=", "self", ".", "__dict__", ".", "copy", "(", ")", "\n", "state", "[", "'fields'", "]", "=", "{", "\n", "field_name", ":", "self", ".", "fields", "[", "field_name", "]", "[", ":", "self", ".", "size", "]", "\n", "for", "field_name", "in", "self", ".", "field_names", "\n", "}", "\n", "\n", "return", "state", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.replay_pools.flexible_replay_pool.FlexibleReplayPool.__setstate__": [[157, 168], ["state[].keys", "numpy.concatenate", "numpy.zeros"], "methods", ["None"], ["", "def", "__setstate__", "(", "self", ",", "state", ")", ":", "\n", "        ", "if", "state", "[", "'_size'", "]", "<", "state", "[", "'_max_size'", "]", ":", "\n", "            ", "pad_size", "=", "state", "[", "'_max_size'", "]", "-", "state", "[", "'_size'", "]", "\n", "for", "field_name", "in", "state", "[", "'fields'", "]", ".", "keys", "(", ")", ":", "\n", "                ", "field_shape", "=", "state", "[", "'fields_attrs'", "]", "[", "field_name", "]", "[", "'shape'", "]", "\n", "state", "[", "'fields'", "]", "[", "field_name", "]", "=", "np", ".", "concatenate", "(", "(", "\n", "state", "[", "'fields'", "]", "[", "field_name", "]", ",", "\n", "np", ".", "zeros", "(", "(", "pad_size", ",", "*", "field_shape", ")", ")", "\n", ")", ",", "axis", "=", "0", ")", "\n", "\n", "", "", "self", ".", "__dict__", "=", "state", "\n", "", "", ""]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.replay_pools.extra_policy_info_replay_pool.ExtraPolicyInfoReplayPool.__init__": [[5, 20], ["simple_replay_pool.SimpleReplayPool.__init__", "extra_policy_info_replay_pool.ExtraPolicyInfoReplayPool.add_fields"], "methods", ["home.repos.pwc.inspect_result.YaoYao1995_MEEE.env.humanoid.HumanoidTruncatedObsEnv.__init__", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.replay_pools.flexible_replay_pool.FlexibleReplayPool.add_fields"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "ExtraPolicyInfoReplayPool", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n", "fields", "=", "{", "\n", "'raw_actions'", ":", "{", "\n", "'shape'", ":", "self", ".", "_action_space", ".", "shape", ",", "\n", "'dtype'", ":", "'float32'", "\n", "}", ",", "\n", "'log_pis'", ":", "{", "\n", "'shape'", ":", "(", "1", ",", ")", ",", "\n", "'dtype'", ":", "'float32'", "\n", "}", "\n", "}", "\n", "\n", "self", ".", "add_fields", "(", "fields", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.replay_pools.simple_replay_pool.SimpleReplayPool.__init__": [[38, 72], ["simple_replay_pool.normalize_observation_fields", "normalize_observation_fields.update", "flexible_replay_pool.FlexibleReplayPool.__init__", "normalize_observation_fields.items"], "methods", ["home.repos.pwc.inspect_result.YaoYao1995_MEEE.replay_pools.simple_replay_pool.normalize_observation_fields", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.utils.logging.Progress.update", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.env.humanoid.HumanoidTruncatedObsEnv.__init__"], ["    ", "def", "__init__", "(", "self", ",", "observation_space", ",", "action_space", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "_observation_space", "=", "observation_space", "\n", "self", ".", "_action_space", "=", "action_space", "\n", "\n", "observation_fields", "=", "normalize_observation_fields", "(", "observation_space", ")", "\n", "# It's a bit memory inefficient to save the observations twice,", "\n", "# but it makes the code *much* easier since you no longer have", "\n", "# to worry about termination conditions.", "\n", "observation_fields", ".", "update", "(", "{", "\n", "'next_'", "+", "key", ":", "value", "\n", "for", "key", ",", "value", "in", "observation_fields", ".", "items", "(", ")", "\n", "}", ")", "\n", "\n", "fields", "=", "{", "\n", "**", "observation_fields", ",", "\n", "**", "{", "\n", "'actions'", ":", "{", "\n", "'shape'", ":", "self", ".", "_action_space", ".", "shape", ",", "\n", "'dtype'", ":", "'float32'", "\n", "}", ",", "\n", "'rewards'", ":", "{", "\n", "'shape'", ":", "(", "1", ",", ")", ",", "\n", "'dtype'", ":", "'float32'", "\n", "}", ",", "\n", "# self.terminals[i] = a terminal was received at time i", "\n", "'terminals'", ":", "{", "\n", "'shape'", ":", "(", "1", ",", ")", ",", "\n", "'dtype'", ":", "'bool'", "\n", "}", ",", "\n", "}", "\n", "}", "\n", "\n", "super", "(", "SimpleReplayPool", ",", "self", ")", ".", "__init__", "(", "\n", "*", "args", ",", "fields_attrs", "=", "fields", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.replay_pools.simple_replay_pool.SimpleReplayPool.add_samples": [[73, 102], ["collections.defaultdict", "collections.defaultdict", "samples.update", "super().add_samples", "isinstance", "super().add_samples", "observation.items", "next_observation.items", "dict_observations[].append", "dict_next_observations[].append", "numpy.array", "numpy.array", "collections.defaultdict.items", "collections.defaultdict.items"], "methods", ["home.repos.pwc.inspect_result.YaoYao1995_MEEE.utils.logging.Progress.update", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.replay_pools.trajectory_replay_pool.TrajectoryReplayPool.add_samples", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.replay_pools.trajectory_replay_pool.TrajectoryReplayPool.add_samples"], ["", "def", "add_samples", "(", "self", ",", "samples", ")", ":", "\n", "        ", "if", "not", "isinstance", "(", "self", ".", "_observation_space", ",", "Dict", ")", ":", "\n", "            ", "return", "super", "(", "SimpleReplayPool", ",", "self", ")", ".", "add_samples", "(", "samples", ")", "\n", "\n", "", "dict_observations", "=", "defaultdict", "(", "list", ")", "\n", "for", "observation", "in", "samples", "[", "'observations'", "]", ":", "\n", "            ", "for", "key", ",", "value", "in", "observation", ".", "items", "(", ")", ":", "\n", "                ", "dict_observations", "[", "key", "]", ".", "append", "(", "value", ")", "\n", "\n", "", "", "dict_next_observations", "=", "defaultdict", "(", "list", ")", "\n", "for", "next_observation", "in", "samples", "[", "'next_observations'", "]", ":", "\n", "            ", "for", "key", ",", "value", "in", "next_observation", ".", "items", "(", ")", ":", "\n", "                ", "dict_next_observations", "[", "key", "]", ".", "append", "(", "value", ")", "\n", "\n", "", "", "samples", ".", "update", "(", "\n", "**", "{", "\n", "f'observations.{observation_key}'", ":", "np", ".", "array", "(", "values", ")", "\n", "for", "observation_key", ",", "values", "in", "dict_observations", ".", "items", "(", ")", "\n", "}", ",", "\n", "**", "{", "\n", "f'next_observations.{observation_key}'", ":", "np", ".", "array", "(", "values", ")", "\n", "for", "observation_key", ",", "values", "in", "dict_next_observations", ".", "items", "(", ")", "\n", "}", ",", "\n", ")", "\n", "\n", "del", "samples", "[", "'observations'", "]", "\n", "del", "samples", "[", "'next_observations'", "]", "\n", "\n", "return", "super", "(", "SimpleReplayPool", ",", "self", ")", ".", "add_samples", "(", "samples", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.replay_pools.simple_replay_pool.SimpleReplayPool.batch_by_indices": [[131, 169], ["numpy.concatenate", "numpy.concatenate", "isinstance", "super().batch_by_indices", "tuple", "simple_replay_pool.SimpleReplayPool.filter_fields", "simple_replay_pool.SimpleReplayPool._observation_space.spaces.keys", "batch.keys"], "methods", ["home.repos.pwc.inspect_result.YaoYao1995_MEEE.replay_pools.trajectory_replay_pool.TrajectoryReplayPool.batch_by_indices", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.replay_pools.flexible_replay_pool.FlexibleReplayPool.filter_fields"], ["", "def", "batch_by_indices", "(", "self", ",", "\n", "indices", ",", "\n", "field_name_filter", "=", "None", ",", "\n", "observation_keys", "=", "None", ")", ":", "\n", "        ", "if", "not", "isinstance", "(", "self", ".", "_observation_space", ",", "Dict", ")", ":", "\n", "            ", "return", "super", "(", "SimpleReplayPool", ",", "self", ")", ".", "batch_by_indices", "(", "\n", "indices", ",", "field_name_filter", "=", "field_name_filter", ")", "\n", "\n", "", "batch", "=", "{", "\n", "field_name", ":", "self", ".", "fields", "[", "field_name", "]", "[", "indices", "]", "\n", "for", "field_name", "in", "self", ".", "field_names", "\n", "}", "\n", "\n", "if", "observation_keys", "is", "None", ":", "\n", "            ", "observation_keys", "=", "tuple", "(", "self", ".", "_observation_space", ".", "spaces", ".", "keys", "(", ")", ")", "\n", "\n", "", "observations", "=", "np", ".", "concatenate", "(", "[", "\n", "batch", "[", "'observations.{}'", ".", "format", "(", "key", ")", "]", "\n", "for", "key", "in", "observation_keys", "\n", "]", ",", "axis", "=", "-", "1", ")", "\n", "\n", "next_observations", "=", "np", ".", "concatenate", "(", "[", "\n", "batch", "[", "'next_observations.{}'", ".", "format", "(", "key", ")", "]", "\n", "for", "key", "in", "observation_keys", "\n", "]", ",", "axis", "=", "-", "1", ")", "\n", "\n", "batch", "[", "'observations'", "]", "=", "observations", "\n", "batch", "[", "'next_observations'", "]", "=", "next_observations", "\n", "\n", "if", "field_name_filter", "is", "not", "None", ":", "\n", "            ", "filtered_fields", "=", "self", ".", "filter_fields", "(", "\n", "batch", ".", "keys", "(", ")", ",", "field_name_filter", ")", "\n", "batch", "=", "{", "\n", "field_name", ":", "batch", "[", "field_name", "]", "\n", "for", "field_name", "in", "filtered_fields", "\n", "}", "\n", "\n", "", "return", "batch", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.replay_pools.simple_replay_pool.SimpleReplayPool.terminate_episode": [[170, 172], ["None"], "methods", ["None"], ["", "def", "terminate_episode", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "", "", ""]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.replay_pools.simple_replay_pool.normalize_observation_fields": [[10, 35], ["isinstance", "isinstance", "simple_replay_pool.normalize_observation_fields", "NotImplementedError", "observation_space.spaces.items", "field.items", "type"], "function", ["home.repos.pwc.inspect_result.YaoYao1995_MEEE.replay_pools.simple_replay_pool.normalize_observation_fields"], ["def", "normalize_observation_fields", "(", "observation_space", ",", "name", "=", "'observations'", ")", ":", "\n", "    ", "if", "isinstance", "(", "observation_space", ",", "Dict", ")", ":", "\n", "        ", "fields", "=", "[", "\n", "normalize_observation_fields", "(", "child_observation_space", ",", "name", ")", "\n", "for", "name", ",", "child_observation_space", "\n", "in", "observation_space", ".", "spaces", ".", "items", "(", ")", "\n", "]", "\n", "fields", "=", "{", "\n", "'observations.{}'", ".", "format", "(", "name", ")", ":", "value", "\n", "for", "field", "in", "fields", "\n", "for", "name", ",", "value", "in", "field", ".", "items", "(", ")", "\n", "}", "\n", "", "elif", "isinstance", "(", "observation_space", ",", "(", "Box", ",", "Discrete", ")", ")", ":", "\n", "        ", "fields", "=", "{", "\n", "name", ":", "{", "\n", "'shape'", ":", "observation_space", ".", "shape", ",", "\n", "'dtype'", ":", "observation_space", ".", "dtype", ",", "\n", "}", "\n", "}", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "\n", "\"Observation space of type '{}' not supported.\"", "\n", "\"\"", ".", "format", "(", "type", "(", "observation_space", ")", ")", ")", "\n", "\n", "", "return", "fields", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.replay_pools.trajectory_replay_pool.TrajectoryReplayPool.__init__": [[18, 31], ["replay_pool.ReplayPool.__init__", "int", "collections.deque", "collections.deque"], "methods", ["home.repos.pwc.inspect_result.YaoYao1995_MEEE.env.humanoid.HumanoidTruncatedObsEnv.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "observation_space", ",", "\n", "action_space", ",", "\n", "max_size", ")", ":", "\n", "        ", "super", "(", "TrajectoryReplayPool", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "max_size", "=", "int", "(", "max_size", ")", "\n", "self", ".", "_max_size", "=", "max_size", "\n", "\n", "self", ".", "_trajectories", "=", "deque", "(", "maxlen", "=", "max_size", ")", "\n", "self", ".", "_trajectory_lengths", "=", "deque", "(", "maxlen", "=", "max_size", ")", "\n", "self", ".", "_num_samples", "=", "0", "\n", "self", ".", "_trajectories_since_save", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.replay_pools.trajectory_replay_pool.TrajectoryReplayPool.num_trajectories": [[32, 35], ["len"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_trajectories", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "_trajectories", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.replay_pools.trajectory_replay_pool.TrajectoryReplayPool.size": [[36, 39], ["sum"], "methods", ["None"], ["", "@", "property", "\n", "def", "size", "(", "self", ")", ":", "\n", "        ", "return", "sum", "(", "self", ".", "_trajectory_lengths", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.replay_pools.trajectory_replay_pool.TrajectoryReplayPool.num_samples": [[40, 43], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_samples", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_num_samples", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.replay_pools.trajectory_replay_pool.TrajectoryReplayPool.add_paths": [[44, 51], ["len", "next", "iter", "trajectory.keys"], "methods", ["None"], ["", "def", "add_paths", "(", "self", ",", "trajectories", ")", ":", "\n", "        ", "self", ".", "_trajectories", "+=", "trajectories", "\n", "self", ".", "_trajectory_lengths", "+=", "[", "\n", "trajectory", "[", "next", "(", "iter", "(", "trajectory", ".", "keys", "(", ")", ")", ")", "]", ".", "shape", "[", "0", "]", "\n", "for", "trajectory", "in", "trajectories", "\n", "]", "\n", "self", ".", "_trajectories_since_save", "+=", "len", "(", "trajectories", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.replay_pools.trajectory_replay_pool.TrajectoryReplayPool.add_path": [[52, 54], ["trajectory_replay_pool.TrajectoryReplayPool.add_paths"], "methods", ["home.repos.pwc.inspect_result.YaoYao1995_MEEE.replay_pools.trajectory_replay_pool.TrajectoryReplayPool.add_paths"], ["", "def", "add_path", "(", "self", ",", "trajectory", ")", ":", "\n", "        ", "self", ".", "add_paths", "(", "[", "trajectory", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.replay_pools.trajectory_replay_pool.TrajectoryReplayPool.add_sample": [[55, 58], ["NotImplementedError"], "methods", ["None"], ["", "def", "add_sample", "(", "self", ",", "sample", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", "\n", "f\"{self.__class__.__name__} only supports adding full paths at\"", "\n", "\" once.\"", ")", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.replay_pools.trajectory_replay_pool.TrajectoryReplayPool.add_samples": [[60, 63], ["NotImplementedError"], "methods", ["None"], ["", "def", "add_samples", "(", "self", ",", "samples", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", "\n", "f\"{self.__class__.__name__} only supports adding full paths at\"", "\n", "\" once.\"", ")", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.replay_pools.trajectory_replay_pool.TrajectoryReplayPool.batch_by_indices": [[65, 85], ["len", "enumerate", "len", "len", "numpy.empty", "episode.items", "trajectories[].items"], "methods", ["None"], ["", "def", "batch_by_indices", "(", "self", ",", "\n", "episode_indices", ",", "\n", "step_indices", ",", "\n", "field_name_filter", "=", "None", ")", ":", "\n", "        ", "assert", "len", "(", "episode_indices", ")", "==", "len", "(", "step_indices", ")", "\n", "\n", "batch_size", "=", "len", "(", "episode_indices", ")", "\n", "trajectories", "=", "[", "self", ".", "_trajectories", "[", "i", "]", "for", "i", "in", "episode_indices", "]", "\n", "\n", "batch", "=", "{", "\n", "field_name", ":", "np", ".", "empty", "(", "\n", "(", "batch_size", ",", "*", "values", ".", "shape", "[", "1", ":", "]", ")", ",", "dtype", "=", "values", ".", "dtype", ")", "\n", "for", "field_name", ",", "values", "in", "trajectories", "[", "0", "]", ".", "items", "(", ")", "\n", "}", "\n", "\n", "for", "i", ",", "episode", "in", "enumerate", "(", "trajectories", ")", ":", "\n", "            ", "for", "field_name", ",", "episode_values", "in", "episode", ".", "items", "(", ")", ":", "\n", "                ", "batch", "[", "field_name", "]", "[", "i", "]", "=", "episode_values", "[", "step_indices", "[", "i", "]", "]", "\n", "\n", "", "", "return", "batch", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.replay_pools.trajectory_replay_pool.TrajectoryReplayPool.random_batch": [[86, 114], ["len", "numpy.array", "softlearning.utils.numpy.softmax", "numpy.random.choice", "next", "numpy.array", "trajectory_replay_pool.random_int_with_variable_range", "trajectory_replay_pool.TrajectoryReplayPool.batch_by_indices", "numpy.sum", "numpy.arange", "iter", "numpy.zeros_like", "trajectory_replay_pool.TrajectoryReplayPool._trajectories[].keys"], "methods", ["home.repos.pwc.inspect_result.YaoYao1995_MEEE.utils.numpy.softmax", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.replay_pools.trajectory_replay_pool.random_int_with_variable_range", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.replay_pools.trajectory_replay_pool.TrajectoryReplayPool.batch_by_indices"], ["", "def", "random_batch", "(", "self", ",", "batch_size", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "num_trajectories", "=", "len", "(", "self", ".", "_trajectories", ")", "\n", "if", "num_trajectories", "<", "1", ":", "\n", "            ", "return", "{", "}", "\n", "\n", "", "trajectory_lengths", "=", "np", ".", "array", "(", "self", ".", "_trajectory_lengths", ")", "\n", "trajectory_weights", "=", "trajectory_lengths", "/", "np", ".", "sum", "(", "trajectory_lengths", ")", "\n", "trajectory_probabilities", "=", "softmax", "(", "trajectory_weights", ")", "\n", "\n", "trajectory_indices", "=", "np", ".", "random", ".", "choice", "(", "\n", "np", ".", "arange", "(", "num_trajectories", ")", ",", "\n", "size", "=", "batch_size", ",", "\n", "replace", "=", "True", ",", "\n", "p", "=", "trajectory_probabilities", ")", "\n", "first_key", "=", "next", "(", "iter", "(", "\n", "self", ".", "_trajectories", "[", "trajectory_indices", "[", "0", "]", "]", ".", "keys", "(", ")", ")", ")", "\n", "trajectory_lengths", "=", "np", ".", "array", "(", "[", "\n", "self", ".", "_trajectories", "[", "trajectory_index", "]", "[", "first_key", "]", ".", "shape", "[", "0", "]", "\n", "for", "trajectory_index", "in", "trajectory_indices", "\n", "]", ")", "\n", "\n", "step_indices", "=", "random_int_with_variable_range", "(", "\n", "np", ".", "zeros_like", "(", "trajectory_lengths", ",", "dtype", "=", "np", ".", "int64", ")", ",", "\n", "trajectory_lengths", ")", "\n", "\n", "batch", "=", "self", ".", "batch_by_indices", "(", "trajectory_indices", ",", "step_indices", ")", "\n", "\n", "return", "batch", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.replay_pools.trajectory_replay_pool.TrajectoryReplayPool.last_n_batch": [[115, 146], ["len", "range", "trajectory_replay_pool.TrajectoryReplayPool.batch_by_indices", "min", "list", "range", "list", "trajectory.keys"], "methods", ["home.repos.pwc.inspect_result.YaoYao1995_MEEE.replay_pools.trajectory_replay_pool.TrajectoryReplayPool.batch_by_indices"], ["", "def", "last_n_batch", "(", "self", ",", "last_n", ",", "field_name_filter", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "num_trajectories", "=", "len", "(", "self", ".", "_trajectories", ")", "\n", "if", "num_trajectories", "<", "1", ":", "\n", "            ", "return", "{", "}", "\n", "\n", "", "trajectory_indices", "=", "[", "]", "\n", "step_indices", "=", "[", "]", "\n", "\n", "trajectory_lengths", "=", "0", "\n", "for", "trajectory_index", "in", "range", "(", "num_trajectories", "-", "1", ",", "-", "1", ",", "-", "1", ")", ":", "\n", "            ", "trajectory", "=", "self", ".", "_trajectories", "[", "trajectory_index", "]", "\n", "trajectory_length", "=", "trajectory", "[", "list", "(", "trajectory", ".", "keys", "(", ")", ")", "[", "0", "]", "]", ".", "shape", "[", "0", "]", "\n", "\n", "steps_from_this_episode", "=", "min", "(", "trajectory_length", ",", "last_n", "-", "trajectory_lengths", ")", "\n", "step_indices", "+=", "list", "(", "range", "(", "\n", "trajectory_length", "-", "1", ",", "\n", "trajectory_length", "-", "steps_from_this_episode", "-", "1", ",", "\n", "-", "1", ")", ")", "\n", "trajectory_indices", "+=", "[", "trajectory_index", "]", "*", "steps_from_this_episode", "\n", "\n", "trajectory_lengths", "+=", "trajectory_length", "\n", "\n", "if", "trajectory_lengths", ">=", "last_n", ":", "\n", "                ", "break", "\n", "\n", "", "", "trajectory_indices", "=", "trajectory_indices", "[", ":", ":", "-", "1", "]", "\n", "step_indices", "=", "step_indices", "[", ":", ":", "-", "1", "]", "\n", "\n", "batch", "=", "self", ".", "batch_by_indices", "(", "trajectory_indices", ",", "step_indices", ")", "\n", "\n", "return", "batch", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.replay_pools.trajectory_replay_pool.TrajectoryReplayPool.save_latest_experience": [[147, 160], ["max", "tuple", "itertools.islice", "gzip.open", "pickle.dump"], "methods", ["None"], ["", "def", "save_latest_experience", "(", "self", ",", "pickle_path", ")", ":", "\n", "# deque doesn't support direct slicing, thus need to use islice", "\n", "        ", "num_trajectories", "=", "self", ".", "num_trajectories", "\n", "start_index", "=", "max", "(", "num_trajectories", "-", "self", ".", "_trajectories_since_save", ",", "0", ")", "\n", "end_index", "=", "num_trajectories", "\n", "\n", "latest_trajectories", "=", "tuple", "(", "islice", "(", "\n", "self", ".", "_trajectories", ",", "start_index", ",", "end_index", ")", ")", "\n", "\n", "with", "gzip", ".", "open", "(", "pickle_path", ",", "'wb'", ")", "as", "f", ":", "\n", "            ", "pickle", ".", "dump", "(", "latest_trajectories", ",", "f", ")", "\n", "\n", "", "self", ".", "_trajectories_since_save", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.replay_pools.trajectory_replay_pool.TrajectoryReplayPool.load_experience": [[161, 167], ["trajectory_replay_pool.TrajectoryReplayPool.add_paths", "gzip.open", "pickle.load"], "methods", ["home.repos.pwc.inspect_result.YaoYao1995_MEEE.replay_pools.trajectory_replay_pool.TrajectoryReplayPool.add_paths"], ["", "def", "load_experience", "(", "self", ",", "experience_path", ")", ":", "\n", "        ", "with", "gzip", ".", "open", "(", "experience_path", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "latest_trajectories", "=", "pickle", ".", "load", "(", "f", ")", "\n", "\n", "", "self", ".", "add_paths", "(", "latest_trajectories", ")", "\n", "self", ".", "_trajectories_since_save", "=", "0", "\n", "", "", ""]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.replay_pools.trajectory_replay_pool.random_int_with_variable_range": [[12, 15], ["numpy.floor().astype", "numpy.floor", "numpy.random.uniform"], "function", ["None"], ["def", "random_int_with_variable_range", "(", "mins", ",", "maxs", ")", ":", "\n", "    ", "result", "=", "np", ".", "floor", "(", "np", ".", "random", ".", "uniform", "(", "mins", ",", "maxs", ")", ")", ".", "astype", "(", "int", ")", "\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.replay_pools.replay_pool.ReplayPool.add_sample": [[7, 11], ["None"], "methods", ["None"], ["@", "abc", ".", "abstractmethod", "\n", "def", "add_sample", "(", "self", ",", "sample", ")", ":", "\n", "        ", "\"\"\"Add a transition tuple.\"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.replay_pools.replay_pool.ReplayPool.terminate_episode": [[12, 16], ["None"], "methods", ["None"], ["", "@", "abc", ".", "abstractmethod", "\n", "def", "terminate_episode", "(", "self", ")", ":", "\n", "        ", "\"\"\"Clean up pool after episode termination.\"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.replay_pools.replay_pool.ReplayPool.size": [[17, 21], ["None"], "methods", ["None"], ["", "@", "property", "\n", "@", "abc", ".", "abstractmethod", "\n", "def", "size", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.replay_pools.replay_pool.ReplayPool.add_path": [[22, 35], ["replay_pool.ReplayPool.add_samples", "replay_pool.ReplayPool.terminate_episode"], "methods", ["home.repos.pwc.inspect_result.YaoYao1995_MEEE.replay_pools.trajectory_replay_pool.TrajectoryReplayPool.add_samples", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.replay_pools.union_pool.UnionPool.terminate_episode"], ["", "def", "add_path", "(", "self", ",", "path", ")", ":", "\n", "        ", "\"\"\"Add a rollout to the replay pool.\n\n        This default implementation naively goes through every step, but you\n        may want to optimize this.\n\n        NOTE: You should NOT call \"terminate_episode\" after calling add_path.\n        It's assumed that this function handles the episode termination.\n\n        :param path: Dict like one outputted by railrl.samplers.util.rollout\n        \"\"\"", "\n", "self", ".", "add_samples", "(", "path", ")", "\n", "self", ".", "terminate_episode", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.replay_pools.replay_pool.ReplayPool.random_batch": [[36, 40], ["None"], "methods", ["None"], ["", "@", "abc", ".", "abstractmethod", "\n", "def", "random_batch", "(", "self", ",", "batch_size", ")", ":", "\n", "        ", "\"\"\"Return a random batch of size `batch_size`.\"\"\"", "\n", "pass", "\n", "", "", ""]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.replay_pools.union_pool.UnionPool.__init__": [[7, 13], ["numpy.array", "sum"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "pools", ")", ":", "\n", "        ", "pool_sizes", "=", "np", ".", "array", "(", "[", "b", ".", "size", "for", "b", "in", "pools", "]", ")", "\n", "self", ".", "_total_size", "=", "sum", "(", "pool_sizes", ")", "\n", "self", ".", "_normalized_pool_sizes", "=", "pool_sizes", "/", "self", ".", "_total_size", "\n", "\n", "self", ".", "pools", "=", "pools", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.replay_pools.union_pool.UnionPool.add_sample": [[14, 16], ["None"], "methods", ["None"], ["", "def", "add_sample", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.replay_pools.union_pool.UnionPool.terminate_episode": [[17, 19], ["None"], "methods", ["None"], ["", "def", "terminate_episode", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.replay_pools.union_pool.UnionPool.size": [[20, 23], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "size", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_total_size", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.replay_pools.union_pool.UnionPool.add_path": [[24, 26], ["None"], "methods", ["None"], ["", "def", "add_path", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.replay_pools.union_pool.UnionPool.random_batch": [[27, 45], ["partial_batch_sizes.astype.astype.astype", "partial_batches[].keys", "sum", "pool.random_batch", "numpy.concatenate", "zip", "union_pool.UnionPool.random_batch.all_values"], "methods", ["home.repos.pwc.inspect_result.YaoYao1995_MEEE.samplers.explore_sampler.ExploreSampler.random_batch"], ["", "def", "random_batch", "(", "self", ",", "batch_size", ")", ":", "\n", "\n", "# TODO: Hack", "\n", "        ", "partial_batch_sizes", "=", "self", ".", "_normalized_pool_sizes", "*", "batch_size", "\n", "partial_batch_sizes", "=", "partial_batch_sizes", ".", "astype", "(", "int", ")", "\n", "partial_batch_sizes", "[", "0", "]", "=", "batch_size", "-", "sum", "(", "partial_batch_sizes", "[", "1", ":", "]", ")", "\n", "\n", "partial_batches", "=", "[", "\n", "pool", ".", "random_batch", "(", "partial_batch_size", ")", "for", "pool", ",", "\n", "partial_batch_size", "in", "zip", "(", "self", ".", "pools", ",", "partial_batch_sizes", ")", "\n", "]", "\n", "\n", "def", "all_values", "(", "key", ")", ":", "\n", "            ", "return", "[", "partial_batch", "[", "key", "]", "for", "partial_batch", "in", "partial_batches", "]", "\n", "\n", "", "keys", "=", "partial_batches", "[", "0", "]", ".", "keys", "(", ")", "\n", "\n", "return", "{", "key", ":", "np", ".", "concatenate", "(", "all_values", "(", "key", ")", ",", "axis", "=", "0", ")", "for", "key", "in", "keys", "}", "\n", "", "", ""]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.replay_pools.utils.get_replay_pool_from_variant": [[21, 34], ["copy.deepcopy"], "function", ["None"], ["domain", ":", "tuple", "(", "tasks", ")", "\n", "for", "domain", ",", "tasks", "in", "domains", ".", "items", "(", ")", "\n", "}", "\n", "for", "universe", ",", "domains", "in", "env_utils", ".", "ENVIRONMENTS", ".", "items", "(", ")", "\n", "}", "\n", "\n", "AVAILABLE_TASKS", "=", "set", "(", "sum", "(", "\n", "[", "\n", "tasks", "\n", "for", "universe", ",", "domains", "in", "TASKS_BY_DOMAIN_BY_UNIVERSE", ".", "items", "(", ")", "\n", "for", "domain", ",", "tasks", "in", "domains", ".", "items", "(", ")", "\n", "]", ",", "\n", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.value_functions.vanilla.create_feedforward_Q_function": [[4, 19], ["softlearning.models.feedforward.feedforward_model"], "function", ["home.repos.pwc.inspect_result.YaoYao1995_MEEE.models.feedforward.feedforward_model"], ["def", "create_feedforward_Q_function", "(", "observation_shape", ",", "\n", "action_shape", ",", "\n", "*", "args", ",", "\n", "observation_preprocessor", "=", "None", ",", "\n", "name", "=", "'feedforward_Q'", ",", "\n", "**", "kwargs", ")", ":", "\n", "    ", "input_shapes", "=", "(", "observation_shape", ",", "action_shape", ")", "\n", "preprocessors", "=", "(", "observation_preprocessor", ",", "None", ")", "\n", "return", "feedforward_model", "(", "\n", "input_shapes", ",", "\n", "*", "args", ",", "\n", "output_size", "=", "1", ",", "\n", "preprocessors", "=", "preprocessors", ",", "\n", "name", "=", "name", ",", "\n", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.value_functions.vanilla.create_feedforward_V_function": [[21, 34], ["softlearning.models.feedforward.feedforward_model"], "function", ["home.repos.pwc.inspect_result.YaoYao1995_MEEE.models.feedforward.feedforward_model"], ["", "def", "create_feedforward_V_function", "(", "observation_shape", ",", "\n", "*", "args", ",", "\n", "observation_preprocessor", "=", "None", ",", "\n", "name", "=", "'feedforward_V'", ",", "\n", "**", "kwargs", ")", ":", "\n", "    ", "input_shapes", "=", "(", "observation_shape", ",", ")", "\n", "preprocessors", "=", "(", "observation_preprocessor", ",", "None", ")", "\n", "return", "feedforward_model", "(", "\n", "input_shapes", ",", "\n", "*", "args", ",", "\n", "output_size", "=", "1", ",", "\n", "preprocessors", "=", "preprocessors", ",", "\n", "**", "kwargs", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.value_functions.value_function.SumQFunction.__init__": [[8, 28], ["value_function.SumQFunction._Serializable__initialize", "tensorflow.placeholder", "tensorflow.placeholder", "value_function.SumQFunction.output_for", "locals", "len", "len"], "methods", ["home.repos.pwc.inspect_result.YaoYao1995_MEEE.value_functions.value_function.SumQFunction.output_for"], ["    ", "def", "__init__", "(", "self", ",", "\n", "observation_shape", ",", "\n", "action_shape", ",", "\n", "q_functions", ")", ":", "\n", "        ", "self", ".", "_Serializable__initialize", "(", "locals", "(", ")", ")", "\n", "\n", "self", ".", "q_functions", "=", "q_functions", "\n", "\n", "assert", "len", "(", "observation_shape", ")", "==", "1", ",", "observation_shape", "\n", "self", ".", "_Do", "=", "observation_shape", "[", "0", "]", "\n", "assert", "len", "(", "action_shape", ")", "==", "1", ",", "action_shape", "\n", "self", ".", "_Da", "=", "action_shape", "[", "0", "]", "\n", "\n", "self", ".", "_observations_ph", "=", "tf", ".", "placeholder", "(", "\n", "tf", ".", "float32", ",", "shape", "=", "(", "None", ",", "self", ".", "_Do", ")", ",", "name", "=", "'observations'", ")", "\n", "self", ".", "_actions_ph", "=", "tf", ".", "placeholder", "(", "\n", "tf", ".", "float32", ",", "shape", "=", "(", "None", ",", "self", ".", "_Da", ")", ",", "name", "=", "'actions'", ")", "\n", "\n", "self", ".", "_output", "=", "self", ".", "output_for", "(", "\n", "self", ".", "_observations_ph", ",", "self", ".", "_actions_ph", ",", "reuse", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.value_functions.value_function.SumQFunction.output_for": [[29, 36], ["tensorflow.add_n", "qf.output_for"], "methods", ["home.repos.pwc.inspect_result.YaoYao1995_MEEE.value_functions.value_function.SumQFunction.output_for"], ["", "def", "output_for", "(", "self", ",", "observations", ",", "actions", ",", "reuse", "=", "False", ")", ":", "\n", "        ", "outputs", "=", "[", "\n", "qf", ".", "output_for", "(", "observations", ",", "actions", ",", "reuse", "=", "reuse", ")", "\n", "for", "qf", "in", "self", ".", "q_functions", "\n", "]", "\n", "output", "=", "tf", ".", "add_n", "(", "outputs", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.value_functions.value_function.SumQFunction._eval": [[37, 44], ["tensorflow.keras.backend.get_session().run", "tensorflow.keras.backend.get_session"], "methods", ["None"], ["", "def", "_eval", "(", "self", ",", "observations", ",", "actions", ")", ":", "\n", "        ", "feeds", "=", "{", "\n", "self", ".", "_observations_ph", ":", "observations", ",", "\n", "self", ".", "_actions_ph", ":", "actions", "\n", "}", "\n", "\n", "return", "tf", ".", "keras", ".", "backend", ".", "get_session", "(", ")", ".", "run", "(", "self", ".", "_output", ",", "feeds", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.value_functions.value_function.SumQFunction.get_param_values": [[45, 49], ["numpy.concatenate", "qf.get_param_values"], "methods", ["home.repos.pwc.inspect_result.YaoYao1995_MEEE.adapters.softlearning_env.SoftlearningEnv.get_param_values"], ["", "def", "get_param_values", "(", "self", ")", ":", "\n", "        ", "all_values_list", "=", "[", "qf", ".", "get_param_values", "(", ")", "for", "qf", "in", "self", ".", "q_functions", "]", "\n", "\n", "return", "np", ".", "concatenate", "(", "all_values_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.value_functions.value_function.SumQFunction.set_param_values": [[50, 58], ["numpy.split", "zip", "numpy.cumsum", "qf.set_param_values", "qf.get_param_values"], "methods", ["home.repos.pwc.inspect_result.YaoYao1995_MEEE.adapters.softlearning_env.SoftlearningEnv.set_param_values", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.adapters.softlearning_env.SoftlearningEnv.get_param_values"], ["", "def", "set_param_values", "(", "self", ",", "all_values", ")", ":", "\n", "        ", "param_sizes", "=", "[", "qf", ".", "get_param_values", "(", ")", ".", "size", "for", "qf", "in", "self", ".", "q_functions", "]", "\n", "split_points", "=", "np", ".", "cumsum", "(", "param_sizes", ")", "[", ":", "-", "1", "]", "\n", "\n", "all_values_list", "=", "np", ".", "split", "(", "all_values", ",", "split_points", ")", "\n", "\n", "for", "values", ",", "qf", "in", "zip", "(", "all_values_list", ",", "self", ".", "q_functions", ")", ":", "\n", "            ", "qf", ".", "set_param_values", "(", "values", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.value_functions.utils.create_double_value_function": [[7, 13], ["tuple", "value_fn", "range"], "function", ["None"], ["\n", "import", "softlearning", ".", "algorithms", ".", "utils", "as", "alg_utils", "\n", "import", "softlearning", ".", "environments", ".", "utils", "as", "env_utils", "\n", "from", "softlearning", ".", "misc", ".", "utils", "import", "datetimestamp", "\n", "\n", "\n", "DEFAULT_UNIVERSE", "=", "'gym'", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.value_functions.utils.get_Q_function_from_variant": [[24, 39], ["copy.deepcopy", "copy.deepcopy.pop", "softlearning.preprocessors.utils.get_preprocessor_from_params"], "function", ["home.repos.pwc.inspect_result.YaoYao1995_MEEE.models.bnn.BNN.pop", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.preprocessors.utils.get_preprocessor_from_params"], ["for", "universe", ",", "domains", "in", "env_utils", ".", "ENVIRONMENTS", ".", "items", "(", ")", "\n", "}", "\n", "\n", "AVAILABLE_TASKS", "=", "set", "(", "sum", "(", "\n", "[", "\n", "tasks", "\n", "for", "universe", ",", "domains", "in", "TASKS_BY_DOMAIN_BY_UNIVERSE", ".", "items", "(", ")", "\n", "for", "domain", ",", "tasks", "in", "domains", ".", "items", "(", ")", "\n", "]", ",", "\n", "(", ")", ")", ")", "\n", "\n", "DOMAINS_BY_UNIVERSE", "=", "{", "\n", "universe", ":", "tuple", "(", "domains", ")", "\n", "for", "universe", ",", "domains", "in", "env_utils", ".", "ENVIRONMENTS", ".", "items", "(", ")", "\n", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.value_functions.utils.get_V_function_from_variant": [[41, 55], ["copy.deepcopy", "copy.deepcopy.pop", "softlearning.preprocessors.utils.get_preprocessor_from_params"], "function", ["home.repos.pwc.inspect_result.YaoYao1995_MEEE.models.bnn.BNN.pop", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.preprocessors.utils.get_preprocessor_from_params"], ["\n", "UNIVERSES", "=", "tuple", "(", "env_utils", ".", "ENVIRONMENTS", ")", "\n", "\n", "AVAILABLE_ALGORITHMS", "=", "set", "(", "alg_utils", ".", "ALGORITHM_CLASSES", ".", "keys", "(", ")", ")", "\n", "\n", "\n", "def", "parse_universe", "(", "env_name", ")", ":", "\n", "    ", "universe", "=", "next", "(", "\n", "(", "universe", "for", "universe", "in", "UNIVERSES", "if", "universe", "in", "env_name", ")", ",", "\n", "DEFAULT_UNIVERSE", ")", "\n", "return", "universe", "\n", "\n", "\n", "", "def", "parse_domain_task", "(", "env_name", ",", "universe", ")", ":", "\n", "    ", "env_name", "=", "env_name", ".", "replace", "(", "universe", ",", "''", ")", ".", "strip", "(", "'-'", ")", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.algorithms.sql.SQL.__init__": [[31, 145], ["rl_algorithm.RLAlgorithm.__init__", "tuple", "sql.SQL._create_placeholders", "sql.SQL._create_td_update", "sql.SQL._create_svgd_update", "sql.SQL._session.run", "len", "len", "tuple", "policy.get_weights", "tensorflow.global_variables_initializer", "zip", "sql.SQL._policy.set_weights", "tensorflow.keras.models.clone_model", "Q.set_weights", "Q.get_weights"], "methods", ["home.repos.pwc.inspect_result.YaoYao1995_MEEE.env.humanoid.HumanoidTruncatedObsEnv.__init__", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.algorithms.sql.SQL._create_placeholders", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.algorithms.sql.SQL._create_td_update", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.algorithms.sql.SQL._create_svgd_update", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.policies.gaussian_policy.GaussianPolicy.get_weights", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.policies.gaussian_policy.GaussianPolicy.set_weights", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.policies.gaussian_policy.GaussianPolicy.set_weights", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.policies.gaussian_policy.GaussianPolicy.get_weights"], ["def", "__init__", "(", "\n", "self", ",", "\n", "training_environment", ",", "\n", "evaluation_environment", ",", "\n", "policy", ",", "\n", "Qs", ",", "\n", "pool", ",", "\n", "plotter", "=", "None", ",", "\n", "\n", "policy_lr", "=", "3e-4", ",", "\n", "Q_lr", "=", "3e-4", ",", "\n", "value_n_particles", "=", "16", ",", "\n", "target_update_interval", "=", "1", ",", "\n", "kernel_fn", "=", "adaptive_isotropic_gaussian_kernel", ",", "\n", "kernel_n_particles", "=", "16", ",", "\n", "kernel_update_ratio", "=", "0.5", ",", "\n", "discount", "=", "0.99", ",", "\n", "tau", "=", "5e-3", ",", "\n", "reward_scale", "=", "1", ",", "\n", "use_saved_Q", "=", "False", ",", "\n", "use_saved_policy", "=", "False", ",", "\n", "save_full_state", "=", "False", ",", "\n", "train_Q", "=", "True", ",", "\n", "train_policy", "=", "True", ",", "\n", "**", "kwargs", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            env (`SoftlearningEnv`): Environment object used for training.\n            policy: A policy function approximator.\n            Qs: Q-function approximators. The min of these\n                approximators will be used. Usage of at least two Q-functions\n                improves performance by reducing overestimation bias.\n            pool (`PoolBase`): Replay pool to add gathered samples to.\n            plotter (`QFPolicyPlotter`): Plotter instance to be used for\n                visualizing Q-function during training.\n            Q_lr (`float`): Learning rate used for the Q-function approximator.\n            value_n_particles (`int`): The number of action samples used for\n                estimating the value of next state.\n            target_update_interval (`int`): How often the target network is\n                updated to match the current Q-function.\n            kernel_fn (function object): A function object that represents\n                a kernel function.\n            kernel_n_particles (`int`): Total number of particles per state\n                used in SVGD updates.\n            kernel_update_ratio ('float'): The ratio of SVGD particles used for\n                the computation of the inner/outer empirical expectation.\n            discount ('float'): Discount factor.\n            reward_scale ('float'): A factor that scales the raw rewards.\n                Useful for adjusting the temperature of the optimal Boltzmann\n                distribution.\n            use_saved_Q ('boolean'): If true, use the initial parameters provided\n                in the Q-function instead of reinitializing.\n            use_saved_policy ('boolean'): If true, use the initial parameters provided\n                in the policy instead of reinitializing.\n            save_full_state ('boolean'): If true, saves the full algorithm\n                state, including the replay pool.\n        \"\"\"", "\n", "super", "(", "SQL", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n", "self", ".", "_training_environment", "=", "training_environment", "\n", "self", ".", "_evaluation_environment", "=", "evaluation_environment", "\n", "self", ".", "_policy", "=", "policy", "\n", "\n", "self", ".", "_Qs", "=", "Qs", "\n", "self", ".", "_Q_targets", "=", "tuple", "(", "tf", ".", "keras", ".", "models", ".", "clone_model", "(", "Q", ")", "for", "Q", "in", "Qs", ")", "\n", "\n", "self", ".", "_pool", "=", "pool", "\n", "self", ".", "_plotter", "=", "plotter", "\n", "\n", "self", ".", "_Q_lr", "=", "Q_lr", "\n", "self", ".", "_policy_lr", "=", "policy_lr", "\n", "self", ".", "_discount", "=", "discount", "\n", "self", ".", "_tau", "=", "tau", "\n", "self", ".", "_reward_scale", "=", "reward_scale", "\n", "\n", "self", ".", "_value_n_particles", "=", "value_n_particles", "\n", "self", ".", "_Q_target_update_interval", "=", "target_update_interval", "\n", "\n", "self", ".", "_kernel_fn", "=", "kernel_fn", "\n", "self", ".", "_kernel_n_particles", "=", "kernel_n_particles", "\n", "self", ".", "_kernel_update_ratio", "=", "kernel_update_ratio", "\n", "\n", "self", ".", "_save_full_state", "=", "save_full_state", "\n", "self", ".", "_train_Q", "=", "train_Q", "\n", "self", ".", "_train_policy", "=", "train_policy", "\n", "\n", "observation_shape", "=", "training_environment", ".", "active_observation_shape", "\n", "action_shape", "=", "training_environment", ".", "action_space", ".", "shape", "\n", "\n", "assert", "len", "(", "observation_shape", ")", "==", "1", ",", "observation_shape", "\n", "self", ".", "_observation_shape", "=", "observation_shape", "\n", "assert", "len", "(", "action_shape", ")", "==", "1", ",", "action_shape", "\n", "self", ".", "_action_shape", "=", "action_shape", "\n", "\n", "self", ".", "_create_placeholders", "(", ")", "\n", "\n", "self", ".", "_training_ops", "=", "[", "]", "\n", "\n", "self", ".", "_create_td_update", "(", ")", "\n", "self", ".", "_create_svgd_update", "(", ")", "\n", "\n", "if", "use_saved_Q", ":", "\n", "            ", "saved_Q_weights", "=", "tuple", "(", "Q", ".", "get_weights", "(", ")", "for", "Q", "in", "self", ".", "_Qs", ")", "\n", "", "if", "use_saved_policy", ":", "\n", "            ", "saved_policy_weights", "=", "policy", ".", "get_weights", "(", ")", "\n", "\n", "", "self", ".", "_session", ".", "run", "(", "tf", ".", "global_variables_initializer", "(", ")", ")", "\n", "\n", "if", "use_saved_Q", ":", "\n", "            ", "for", "Q", ",", "Q_weights", "in", "zip", "(", "self", ".", "_Qs", ",", "saved_Q_weights", ")", ":", "\n", "                ", "Q", ".", "set_weights", "(", "Q_weights", ")", "\n", "", "", "if", "use_saved_policy", ":", "\n", "            ", "self", ".", "_policy", ".", "set_weights", "(", "saved_policy_weights", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.algorithms.sql.SQL._create_placeholders": [[146, 178], ["tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder"], "methods", ["None"], ["", "", "def", "_create_placeholders", "(", "self", ")", ":", "\n", "        ", "\"\"\"Create all necessary placeholders.\"\"\"", "\n", "\n", "self", ".", "_observations_ph", "=", "tf", ".", "placeholder", "(", "\n", "tf", ".", "float32", ",", "\n", "shape", "=", "(", "None", ",", "*", "self", ".", "_observation_shape", ")", ",", "\n", "name", "=", "'observations'", ")", "\n", "\n", "self", ".", "_next_observations_ph", "=", "tf", ".", "placeholder", "(", "\n", "tf", ".", "float32", ",", "\n", "shape", "=", "(", "None", ",", "*", "self", ".", "_observation_shape", ")", ",", "\n", "name", "=", "'next_observations'", ")", "\n", "\n", "self", ".", "_actions_ph", "=", "tf", ".", "placeholder", "(", "\n", "tf", ".", "float32", ",", "\n", "shape", "=", "(", "None", ",", "*", "self", ".", "_action_shape", ")", ",", "\n", "name", "=", "'actions'", ")", "\n", "\n", "self", ".", "_next_actions_ph", "=", "tf", ".", "placeholder", "(", "\n", "tf", ".", "float32", ",", "\n", "shape", "=", "(", "None", ",", "*", "self", ".", "_action_shape", ")", ",", "\n", "name", "=", "'next_actions'", ")", "\n", "\n", "self", ".", "_rewards_ph", "=", "tf", ".", "placeholder", "(", "\n", "tf", ".", "float32", ",", "\n", "shape", "=", "(", "None", ",", "1", ")", ",", "\n", "name", "=", "'rewards'", ")", "\n", "\n", "self", ".", "_terminals_ph", "=", "tf", ".", "placeholder", "(", "\n", "tf", ".", "float32", ",", "\n", "shape", "=", "(", "None", ",", "1", ")", ",", "\n", "name", "=", "'terminals'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.algorithms.sql.SQL._create_td_update": [[179, 257], ["tensorflow.tile", "tensorflow.reshape", "tensorflow.random_uniform", "tensorflow.tile", "tensorflow.reshape", "tuple", "tensorflow.reduce_min", "sql.assert_shape", "tensorflow.reshape", "sql.assert_shape", "tensorflow.reduce_logsumexp", "sql.assert_shape", "tensorflow.log", "tensorflow.stop_gradient", "sql.assert_shape", "tuple", "tuple", "tensorflow.to_float", "numpy.prod", "numpy.log", "sql.assert_shape", "tuple", "tuple", "sql.SQL._training_ops.append", "Q", "Q", "tensorflow.losses.mean_squared_error", "tensorflow.group", "tensorflow.shape", "tensorflow.train.AdamOptimizer", "tensorflow.contrib.layers.optimize_loss", "enumerate", "enumerate", "zip"], "methods", ["home.repos.pwc.inspect_result.YaoYao1995_MEEE.algorithms.sql.assert_shape", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.algorithms.sql.assert_shape", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.algorithms.sql.assert_shape", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.algorithms.sql.assert_shape", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.algorithms.sql.assert_shape"], ["", "def", "_create_td_update", "(", "self", ")", ":", "\n", "        ", "\"\"\"Create a minimization operation for Q-function update.\"\"\"", "\n", "\n", "next_observations", "=", "tf", ".", "tile", "(", "\n", "self", ".", "_next_observations_ph", "[", ":", ",", "tf", ".", "newaxis", ",", ":", "]", ",", "\n", "(", "1", ",", "self", ".", "_value_n_particles", ",", "1", ")", ")", "\n", "next_observations", "=", "tf", ".", "reshape", "(", "\n", "next_observations", ",", "(", "-", "1", ",", "*", "self", ".", "_observation_shape", ")", ")", "\n", "\n", "target_actions", "=", "tf", ".", "random_uniform", "(", "\n", "(", "1", ",", "self", ".", "_value_n_particles", ",", "*", "self", ".", "_action_shape", ")", ",", "-", "1", ",", "1", ")", "\n", "target_actions", "=", "tf", ".", "tile", "(", "\n", "target_actions", ",", "(", "tf", ".", "shape", "(", "self", ".", "_next_observations_ph", ")", "[", "0", "]", ",", "1", ",", "1", ")", ")", "\n", "target_actions", "=", "tf", ".", "reshape", "(", "target_actions", ",", "(", "-", "1", ",", "*", "self", ".", "_action_shape", ")", ")", "\n", "\n", "Q_next_targets", "=", "tuple", "(", "\n", "Q", "(", "[", "next_observations", ",", "target_actions", "]", ")", "\n", "for", "Q", "in", "self", ".", "_Q_targets", ")", "\n", "\n", "min_Q_next_targets", "=", "tf", ".", "reduce_min", "(", "Q_next_targets", ",", "axis", "=", "0", ")", "\n", "\n", "assert_shape", "(", "min_Q_next_targets", ",", "(", "None", ",", "1", ")", ")", "\n", "\n", "min_Q_next_target", "=", "tf", ".", "reshape", "(", "\n", "min_Q_next_targets", ",", "(", "-", "1", ",", "self", ".", "_value_n_particles", ")", ")", "\n", "\n", "assert_shape", "(", "min_Q_next_target", ",", "(", "None", ",", "self", ".", "_value_n_particles", ")", ")", "\n", "\n", "# Equation 10:", "\n", "next_value", "=", "tf", ".", "reduce_logsumexp", "(", "\n", "min_Q_next_target", ",", "keepdims", "=", "True", ",", "axis", "=", "1", ")", "\n", "assert_shape", "(", "next_value", ",", "[", "None", ",", "1", "]", ")", "\n", "\n", "# Importance weights add just a constant to the value.", "\n", "next_value", "-=", "tf", ".", "log", "(", "tf", ".", "to_float", "(", "self", ".", "_value_n_particles", ")", ")", "\n", "next_value", "+=", "np", ".", "prod", "(", "self", ".", "_action_shape", ")", "*", "np", ".", "log", "(", "2", ")", "\n", "\n", "# \\hat Q in Equation 11:", "\n", "Q_target", "=", "tf", ".", "stop_gradient", "(", "\n", "self", ".", "_reward_scale", "\n", "*", "self", ".", "_rewards_ph", "\n", "+", "(", "1", "-", "self", ".", "_terminals_ph", ")", "\n", "*", "self", ".", "_discount", "\n", "*", "next_value", ")", "\n", "assert_shape", "(", "Q_target", ",", "[", "None", ",", "1", "]", ")", "\n", "\n", "Q_values", "=", "self", ".", "_Q_values", "=", "tuple", "(", "\n", "Q", "(", "[", "self", ".", "_observations_ph", ",", "self", ".", "_actions_ph", "]", ")", "\n", "for", "Q", "in", "self", ".", "_Qs", ")", "\n", "\n", "for", "Q_value", "in", "self", ".", "_Q_values", ":", "\n", "            ", "assert_shape", "(", "Q_value", ",", "[", "None", ",", "1", "]", ")", "\n", "\n", "# Equation 11:", "\n", "", "Q_losses", "=", "self", ".", "_Q_losses", "=", "tuple", "(", "\n", "tf", ".", "losses", ".", "mean_squared_error", "(", "\n", "labels", "=", "Q_target", ",", "predictions", "=", "Q_value", ",", "weights", "=", "0.5", ")", "\n", "for", "Q_value", "in", "Q_values", ")", "\n", "\n", "if", "self", ".", "_train_Q", ":", "\n", "            ", "self", ".", "_Q_optimizers", "=", "tuple", "(", "\n", "tf", ".", "train", ".", "AdamOptimizer", "(", "\n", "learning_rate", "=", "self", ".", "_Q_lr", ",", "\n", "name", "=", "'{}_{}_optimizer'", ".", "format", "(", "Q", ".", "_name", ",", "i", ")", "\n", ")", "for", "i", ",", "Q", "in", "enumerate", "(", "self", ".", "_Qs", ")", ")", "\n", "Q_training_ops", "=", "tuple", "(", "\n", "tf", ".", "contrib", ".", "layers", ".", "optimize_loss", "(", "\n", "Q_loss", ",", "\n", "None", ",", "\n", "learning_rate", "=", "self", ".", "_Q_lr", ",", "\n", "optimizer", "=", "Q_optimizer", ",", "\n", "variables", "=", "Q", ".", "trainable_variables", ",", "\n", "increment_global_step", "=", "False", ",", "\n", "summaries", "=", "(", ")", ")", "\n", "for", "i", ",", "(", "Q", ",", "Q_loss", ",", "Q_optimizer", ")", "\n", "in", "enumerate", "(", "zip", "(", "self", ".", "_Qs", ",", "Q_losses", ",", "self", ".", "_Q_optimizers", ")", ")", ")", "\n", "\n", "self", ".", "_training_ops", ".", "append", "(", "tf", ".", "group", "(", "Q_training_ops", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.algorithms.sql.SQL._create_svgd_update": [[258, 352], ["sql.SQL._policy.actions", "tensorflow.reshape", "sql.assert_shape", "int", "tensorflow.split", "tensorflow.stop_gradient", "sql.assert_shape", "sql.assert_shape", "tuple", "tensorflow.reduce_min", "tensorflow.reshape", "tensorflow.reduce_sum", "tensorflow.expand_dims", "tensorflow.stop_gradient", "sql.assert_shape", "sql.SQL._kernel_fn", "sql.assert_shape", "tensorflow.reduce_mean", "sql.assert_shape", "tensorflow.gradients", "tensorflow.reduce_sum", "tensorflow.train.AdamOptimizer", "tensorflow.log", "tensorflow.gradients", "sql.SQL._policy_optimizer.minimize", "sql.SQL._training_ops.append", "tensorflow.reshape", "Q", "tensorflow.reduce_sum", "tensorflow.tile", "zip", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.stop_gradient", "tensorflow.tile"], "methods", ["home.repos.pwc.inspect_result.YaoYao1995_MEEE.policies.gaussian_policy.GaussianPolicy.actions", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.algorithms.sql.assert_shape", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.algorithms.sql.assert_shape", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.algorithms.sql.assert_shape", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.algorithms.sql.assert_shape", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.algorithms.sql.assert_shape", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.algorithms.sql.assert_shape"], ["", "", "def", "_create_svgd_update", "(", "self", ")", ":", "\n", "        ", "\"\"\"Create a minimization operation for policy update (SVGD).\"\"\"", "\n", "\n", "actions", "=", "self", ".", "_policy", ".", "actions", "(", "[", "\n", "tf", ".", "reshape", "(", "\n", "tf", ".", "tile", "(", "\n", "self", ".", "_observations_ph", "[", ":", ",", "None", ",", ":", "]", ",", "\n", "(", "1", ",", "self", ".", "_kernel_n_particles", ",", "1", ")", ")", ",", "\n", "(", "-", "1", ",", "*", "self", ".", "_observation_shape", ")", ")", "\n", "]", ")", "\n", "actions", "=", "tf", ".", "reshape", "(", "\n", "actions", ",", "\n", "(", "-", "1", ",", "self", ".", "_kernel_n_particles", ",", "*", "self", ".", "_action_shape", ")", ")", "\n", "\n", "assert_shape", "(", "\n", "actions", ",", "(", "None", ",", "self", ".", "_kernel_n_particles", ",", "*", "self", ".", "_action_shape", ")", ")", "\n", "\n", "# SVGD requires computing two empirical expectations over actions", "\n", "# (see Appendix C1.1.). To that end, we first sample a single set of", "\n", "# actions, and later split them into two sets: `fixed_actions` are used", "\n", "# to evaluate the expectation indexed by `j` and `updated_actions`", "\n", "# the expectation indexed by `i`.", "\n", "n_updated_actions", "=", "int", "(", "\n", "self", ".", "_kernel_n_particles", "*", "self", ".", "_kernel_update_ratio", ")", "\n", "n_fixed_actions", "=", "self", ".", "_kernel_n_particles", "-", "n_updated_actions", "\n", "\n", "fixed_actions", ",", "updated_actions", "=", "tf", ".", "split", "(", "\n", "actions", ",", "[", "n_fixed_actions", ",", "n_updated_actions", "]", ",", "axis", "=", "1", ")", "\n", "fixed_actions", "=", "tf", ".", "stop_gradient", "(", "fixed_actions", ")", "\n", "assert_shape", "(", "fixed_actions", ",", "\n", "[", "None", ",", "n_fixed_actions", ",", "*", "self", ".", "_action_shape", "]", ")", "\n", "assert_shape", "(", "updated_actions", ",", "\n", "[", "None", ",", "n_updated_actions", ",", "*", "self", ".", "_action_shape", "]", ")", "\n", "\n", "Q_log_targets", "=", "tuple", "(", "\n", "Q", "(", "[", "\n", "tf", ".", "reshape", "(", "\n", "tf", ".", "tile", "(", "\n", "self", ".", "_observations_ph", "[", ":", ",", "None", ",", ":", "]", ",", "\n", "(", "1", ",", "n_fixed_actions", ",", "1", ")", ")", ",", "\n", "(", "-", "1", ",", "*", "self", ".", "_observation_shape", ")", ")", ",", "\n", "tf", ".", "reshape", "(", "fixed_actions", ",", "(", "-", "1", ",", "*", "self", ".", "_action_shape", ")", ")", "\n", "]", ")", "\n", "for", "Q", "in", "self", ".", "_Qs", ")", "\n", "min_Q_log_target", "=", "tf", ".", "reduce_min", "(", "Q_log_targets", ",", "axis", "=", "0", ")", "\n", "svgd_target_values", "=", "tf", ".", "reshape", "(", "\n", "min_Q_log_target", ",", "\n", "(", "-", "1", ",", "n_fixed_actions", ",", "1", ")", ")", "\n", "\n", "# Target log-density. Q_soft in Equation 13:", "\n", "assert", "self", ".", "_policy", ".", "_squash", "\n", "squash_correction", "=", "tf", ".", "reduce_sum", "(", "\n", "tf", ".", "log", "(", "1", "-", "fixed_actions", "**", "2", "+", "EPS", ")", ",", "axis", "=", "-", "1", ",", "keepdims", "=", "True", ")", "\n", "log_probs", "=", "svgd_target_values", "+", "squash_correction", "\n", "\n", "grad_log_probs", "=", "tf", ".", "gradients", "(", "log_probs", ",", "fixed_actions", ")", "[", "0", "]", "\n", "grad_log_probs", "=", "tf", ".", "expand_dims", "(", "grad_log_probs", ",", "axis", "=", "2", ")", "\n", "grad_log_probs", "=", "tf", ".", "stop_gradient", "(", "grad_log_probs", ")", "\n", "assert_shape", "(", "grad_log_probs", ",", "\n", "[", "None", ",", "n_fixed_actions", ",", "1", ",", "*", "self", ".", "_action_shape", "]", ")", "\n", "\n", "kernel_dict", "=", "self", ".", "_kernel_fn", "(", "xs", "=", "fixed_actions", ",", "ys", "=", "updated_actions", ")", "\n", "\n", "# Kernel function in Equation 13:", "\n", "kappa", "=", "kernel_dict", "[", "\"output\"", "]", "[", "...", ",", "tf", ".", "newaxis", "]", "\n", "assert_shape", "(", "kappa", ",", "[", "None", ",", "n_fixed_actions", ",", "n_updated_actions", ",", "1", "]", ")", "\n", "\n", "# Stein Variational Gradient in Equation 13:", "\n", "action_gradients", "=", "tf", ".", "reduce_mean", "(", "\n", "kappa", "*", "grad_log_probs", "+", "kernel_dict", "[", "\"gradient\"", "]", ",", "axis", "=", "1", ")", "\n", "assert_shape", "(", "action_gradients", ",", "\n", "[", "None", ",", "n_updated_actions", ",", "*", "self", ".", "_action_shape", "]", ")", "\n", "\n", "# Propagate the gradient through the policy network (Equation 14).", "\n", "gradients", "=", "tf", ".", "gradients", "(", "\n", "updated_actions", ",", "\n", "self", ".", "_policy", ".", "trainable_variables", ",", "\n", "grad_ys", "=", "action_gradients", ")", "\n", "\n", "surrogate_loss", "=", "tf", ".", "reduce_sum", "(", "[", "\n", "tf", ".", "reduce_sum", "(", "w", "*", "tf", ".", "stop_gradient", "(", "g", ")", ")", "\n", "for", "w", ",", "g", "in", "zip", "(", "self", ".", "_policy", ".", "trainable_variables", ",", "gradients", ")", "\n", "]", ")", "\n", "\n", "self", ".", "_policy_optimizer", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "\n", "learning_rate", "=", "self", ".", "_policy_lr", ",", "\n", "name", "=", "'policy_optimizer'", "\n", ")", "\n", "\n", "if", "self", ".", "_train_policy", ":", "\n", "            ", "svgd_training_op", "=", "self", ".", "_policy_optimizer", ".", "minimize", "(", "\n", "loss", "=", "-", "surrogate_loss", ",", "\n", "var_list", "=", "self", ".", "_policy", ".", "trainable_variables", ")", "\n", "self", ".", "_training_ops", ".", "append", "(", "svgd_training_op", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.algorithms.sql.SQL.train": [[353, 356], ["sql.SQL._train"], "methods", ["home.repos.pwc.inspect_result.YaoYao1995_MEEE.algorithms.meee.MEEE._train"], ["", "", "def", "train", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Initiate training of the SAC instance.\"\"\"", "\n", "return", "self", ".", "_train", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.algorithms.sql.SQL._init_training": [[357, 359], ["sql.SQL._update_target"], "methods", ["home.repos.pwc.inspect_result.YaoYao1995_MEEE.algorithms.meee.MEEE._update_target"], ["", "def", "_init_training", "(", "self", ")", ":", "\n", "        ", "self", ".", "_update_target", "(", "tau", "=", "1.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.algorithms.sql.SQL._update_target": [[360, 369], ["zip", "Q.get_weights", "Q_target.get_weights", "Q_target.set_weights", "zip"], "methods", ["home.repos.pwc.inspect_result.YaoYao1995_MEEE.policies.gaussian_policy.GaussianPolicy.get_weights", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.policies.gaussian_policy.GaussianPolicy.get_weights", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.policies.gaussian_policy.GaussianPolicy.set_weights"], ["", "def", "_update_target", "(", "self", ",", "tau", "=", "None", ")", ":", "\n", "        ", "tau", "=", "tau", "or", "self", ".", "_tau", "\n", "\n", "for", "Q", ",", "Q_target", "in", "zip", "(", "self", ".", "_Qs", ",", "self", ".", "_Q_targets", ")", ":", "\n", "            ", "source_params", "=", "Q", ".", "get_weights", "(", ")", "\n", "target_params", "=", "Q_target", ".", "get_weights", "(", ")", "\n", "Q_target", ".", "set_weights", "(", "[", "\n", "tau", "*", "source", "+", "(", "1.0", "-", "tau", ")", "*", "target", "\n", "for", "source", ",", "target", "in", "zip", "(", "source_params", ",", "target_params", ")", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.algorithms.sql.SQL._do_training": [[371, 379], ["sql.SQL._get_feed_dict", "sql.SQL._session.run", "sql.SQL._update_target"], "methods", ["home.repos.pwc.inspect_result.YaoYao1995_MEEE.algorithms.meee.MEEE._get_feed_dict", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.algorithms.meee.MEEE._update_target"], ["", "", "def", "_do_training", "(", "self", ",", "iteration", ",", "batch", ")", ":", "\n", "        ", "\"\"\"Run the operations for updating training and target ops.\"\"\"", "\n", "\n", "feed_dict", "=", "self", ".", "_get_feed_dict", "(", "batch", ")", "\n", "self", ".", "_session", ".", "run", "(", "self", ".", "_training_ops", ",", "feed_dict", ")", "\n", "\n", "if", "iteration", "%", "self", ".", "_Q_target_update_interval", "==", "0", "and", "self", ".", "_train_Q", ":", "\n", "            ", "self", ".", "_update_target", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.algorithms.sql.SQL._get_feed_dict": [[380, 392], ["None"], "methods", ["None"], ["", "", "def", "_get_feed_dict", "(", "self", ",", "batch", ")", ":", "\n", "        ", "\"\"\"Construct a TensorFlow feed dictionary from a sample batch.\"\"\"", "\n", "\n", "feeds", "=", "{", "\n", "self", ".", "_observations_ph", ":", "batch", "[", "'observations'", "]", ",", "\n", "self", ".", "_actions_ph", ":", "batch", "[", "'actions'", "]", ",", "\n", "self", ".", "_next_observations_ph", ":", "batch", "[", "'next_observations'", "]", ",", "\n", "self", ".", "_rewards_ph", ":", "batch", "[", "'rewards'", "]", ",", "\n", "self", ".", "_terminals_ph", ":", "batch", "[", "'terminals'", "]", ",", "\n", "}", "\n", "\n", "return", "feeds", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.algorithms.sql.SQL.get_diagnostics": [[393, 427], ["sql.SQL._get_feed_dict", "sql.SQL._session.run", "collections.OrderedDict", "sql.SQL._policy.get_diagnostics", "collections.OrderedDict.update", "sql.SQL._plotter.draw", "numpy.mean", "numpy.std", "numpy.mean", "sql.SQL.items"], "methods", ["home.repos.pwc.inspect_result.YaoYao1995_MEEE.algorithms.meee.MEEE._get_feed_dict", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.samplers.explore_sampler.ExploreSampler.get_diagnostics", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.utils.logging.Progress.update", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.misc.plotter.QFPolicyPlotter.draw"], ["", "def", "get_diagnostics", "(", "self", ",", "\n", "iteration", ",", "\n", "batch", ",", "\n", "evaluation_paths", ",", "\n", "training_paths", ")", ":", "\n", "        ", "\"\"\"Record diagnostic information.\n\n        Records the mean and standard deviation of Q-function and the\n        squared Bellman residual of the  s (mean squared Bellman error)\n        for a sample batch.\n\n        Also call the `draw` method of the plotter, if plotter is defined.\n        \"\"\"", "\n", "\n", "feeds", "=", "self", ".", "_get_feed_dict", "(", "batch", ")", "\n", "Q_values", ",", "Q_losses", "=", "self", ".", "_session", ".", "run", "(", "\n", "[", "self", ".", "_Q_values", ",", "self", ".", "_Q_losses", "]", ",", "feeds", ")", "\n", "\n", "diagnostics", "=", "OrderedDict", "(", "{", "\n", "'Q-avg'", ":", "np", ".", "mean", "(", "Q_values", ")", ",", "\n", "'Q-std'", ":", "np", ".", "std", "(", "Q_values", ")", ",", "\n", "'Q_loss'", ":", "np", ".", "mean", "(", "Q_losses", ")", ",", "\n", "}", ")", "\n", "\n", "policy_diagnostics", "=", "self", ".", "_policy", ".", "get_diagnostics", "(", "batch", "[", "'observations'", "]", ")", "\n", "diagnostics", ".", "update", "(", "{", "\n", "f'policy/{key}'", ":", "value", "\n", "for", "key", ",", "value", "in", "policy_diagnostics", ".", "items", "(", ")", "\n", "}", ")", "\n", "\n", "if", "self", ".", "_plotter", ":", "\n", "            ", "self", ".", "_plotter", ".", "draw", "(", ")", "\n", "\n", "", "return", "diagnostics", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.algorithms.sql.SQL.get_snapshot": [[428, 448], ["state.update"], "methods", ["home.repos.pwc.inspect_result.YaoYao1995_MEEE.utils.logging.Progress.update"], ["", "def", "get_snapshot", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "\"\"\"Return loggable snapshot of the SQL algorithm.\n\n        If `self._save_full_state == True`, returns snapshot including the\n        replay pool. If `self._save_full_state == False`, returns snapshot\n        of policy, Q-function, and environment instances.\n        \"\"\"", "\n", "\n", "state", "=", "{", "\n", "'epoch'", ":", "epoch", ",", "\n", "'policy'", ":", "self", ".", "_policy", ",", "\n", "'Q'", ":", "self", ".", "_Q", ",", "\n", "'training_environment'", ":", "self", ".", "_training_environment", ",", "\n", "'evaluation_environment'", ":", "self", ".", "_evaluation_environment", ",", "\n", "}", "\n", "\n", "if", "self", ".", "_save_full_state", ":", "\n", "            ", "state", ".", "update", "(", "{", "'replay_pool'", ":", "self", ".", "_pool", "}", ")", "\n", "\n", "", "return", "state", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.algorithms.sql.SQL.tf_saveables": [[449, 456], ["enumerate"], "methods", ["None"], ["", "@", "property", "\n", "def", "tf_saveables", "(", "self", ")", ":", "\n", "        ", "return", "{", "\n", "'_policy_optimizer'", ":", "self", ".", "_policy_optimizer", ",", "\n", "**", "{", "\n", "f'Q_optimizer_{i}'", ":", "optimizer", "\n", "for", "i", ",", "optimizer", "in", "enumerate", "(", "self", ".", "_Q_optimizers", ")", "\n", "}", ",", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.algorithms.sql.assert_shape": [[13, 17], ["tensor.shape.as_list", "all", "len", "len", "zip"], "function", ["None"], ["def", "assert_shape", "(", "tensor", ",", "expected_shape", ")", ":", "\n", "    ", "tensor_shape", "=", "tensor", ".", "shape", ".", "as_list", "(", ")", "\n", "assert", "len", "(", "tensor_shape", ")", "==", "len", "(", "expected_shape", ")", "\n", "assert", "all", "(", "[", "a", "==", "b", "for", "a", ",", "b", "in", "zip", "(", "tensor_shape", ",", "expected_shape", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.algorithms.sac.SAC.__init__": [[26, 112], ["rl_algorithm.RLAlgorithm.__init__", "tuple", "sac.SAC._build", "len", "len", "tensorflow.keras.models.clone_model", "numpy.prod"], "methods", ["home.repos.pwc.inspect_result.YaoYao1995_MEEE.env.humanoid.HumanoidTruncatedObsEnv.__init__", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.algorithms.meee.MEEE._build"], ["def", "__init__", "(", "\n", "self", ",", "\n", "training_environment", ",", "\n", "evaluation_environment", ",", "\n", "policy", ",", "\n", "Qs", ",", "\n", "pool", ",", "\n", "plotter", "=", "None", ",", "\n", "tf_summaries", "=", "False", ",", "\n", "\n", "lr", "=", "3e-4", ",", "\n", "reward_scale", "=", "1.0", ",", "\n", "target_entropy", "=", "'auto'", ",", "\n", "discount", "=", "0.99", ",", "\n", "tau", "=", "5e-3", ",", "\n", "target_update_interval", "=", "1", ",", "\n", "action_prior", "=", "'uniform'", ",", "\n", "reparameterize", "=", "False", ",", "\n", "store_extra_policy_info", "=", "False", ",", "\n", "\n", "save_full_state", "=", "False", ",", "\n", "**", "kwargs", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            env (`SoftlearningEnv`): Environment used for training.\n            policy: A policy function approximator.\n            initial_exploration_policy: ('Policy'): A policy that we use\n                for initial exploration which is not trained by the algorithm.\n            Qs: Q-function approximators. The min of these\n                approximators will be used. Usage of at least two Q-functions\n                improves performance by reducing overestimation bias.\n            pool (`PoolBase`): Replay pool to add gathered samples to.\n            plotter (`QFPolicyPlotter`): Plotter instance to be used for\n                visualizing Q-function during training.\n            lr (`float`): Learning rate used for the function approximators.\n            discount (`float`): Discount factor for Q-function updates.\n            tau (`float`): Soft value function target update weight.\n            target_update_interval ('int'): Frequency at which target network\n                updates occur in iterations.\n            reparameterize ('bool'): If True, we use a gradient estimator for\n                the policy derived using the reparameterization trick. We use\n                a likelihood ratio based estimator otherwise.\n        \"\"\"", "\n", "\n", "super", "(", "SAC", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n", "self", ".", "_training_environment", "=", "training_environment", "\n", "self", ".", "_evaluation_environment", "=", "evaluation_environment", "\n", "self", ".", "_policy", "=", "policy", "\n", "\n", "self", ".", "_Qs", "=", "Qs", "\n", "self", ".", "_Q_targets", "=", "tuple", "(", "tf", ".", "keras", ".", "models", ".", "clone_model", "(", "Q", ")", "for", "Q", "in", "Qs", ")", "\n", "\n", "self", ".", "_pool", "=", "pool", "\n", "self", ".", "_plotter", "=", "plotter", "\n", "self", ".", "_tf_summaries", "=", "tf_summaries", "\n", "\n", "self", ".", "_policy_lr", "=", "lr", "\n", "self", ".", "_Q_lr", "=", "lr", "\n", "\n", "self", ".", "_reward_scale", "=", "reward_scale", "\n", "self", ".", "_target_entropy", "=", "(", "\n", "-", "np", ".", "prod", "(", "self", ".", "_training_environment", ".", "action_space", ".", "shape", ")", "\n", "if", "target_entropy", "==", "'auto'", "\n", "else", "target_entropy", ")", "\n", "\n", "self", ".", "_discount", "=", "discount", "\n", "self", ".", "_tau", "=", "tau", "\n", "self", ".", "_target_update_interval", "=", "target_update_interval", "\n", "self", ".", "_action_prior", "=", "action_prior", "\n", "\n", "self", ".", "_reparameterize", "=", "reparameterize", "\n", "self", ".", "_store_extra_policy_info", "=", "store_extra_policy_info", "\n", "\n", "self", ".", "_save_full_state", "=", "save_full_state", "\n", "\n", "observation_shape", "=", "self", ".", "_training_environment", ".", "active_observation_shape", "\n", "action_shape", "=", "self", ".", "_training_environment", ".", "action_space", ".", "shape", "\n", "\n", "assert", "len", "(", "observation_shape", ")", "==", "1", ",", "observation_shape", "\n", "self", ".", "_observation_shape", "=", "observation_shape", "\n", "assert", "len", "(", "action_shape", ")", "==", "1", ",", "action_shape", "\n", "self", ".", "_action_shape", "=", "action_shape", "\n", "\n", "self", ".", "_build", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.algorithms.sac.SAC._build": [[113, 120], ["sac.SAC._init_global_step", "sac.SAC._init_placeholders", "sac.SAC._init_actor_update", "sac.SAC._init_critic_update"], "methods", ["home.repos.pwc.inspect_result.YaoYao1995_MEEE.algorithms.meee.MEEE._init_global_step", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.algorithms.meee.MEEE._init_placeholders", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.algorithms.meee.MEEE._init_actor_update", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.algorithms.meee.MEEE._init_critic_update"], ["", "def", "_build", "(", "self", ")", ":", "\n", "        ", "self", ".", "_training_ops", "=", "{", "}", "\n", "\n", "self", ".", "_init_global_step", "(", ")", "\n", "self", ".", "_init_placeholders", "(", ")", "\n", "self", ".", "_init_actor_update", "(", ")", "\n", "self", ".", "_init_critic_update", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.algorithms.sac.SAC.train": [[121, 124], ["sac.SAC._train"], "methods", ["home.repos.pwc.inspect_result.YaoYao1995_MEEE.algorithms.meee.MEEE._train"], ["", "def", "train", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Initiate training of the SAC instance.\"\"\"", "\n", "return", "self", ".", "_train", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.algorithms.sac.SAC._init_global_step": [[125, 129], ["tensorflow.python.training.training_util.get_or_create_global_step", "sac.SAC._training_ops.update", "tensorflow.python.training.training_util._increment_global_step"], "methods", ["home.repos.pwc.inspect_result.YaoYao1995_MEEE.utils.logging.Progress.update"], ["", "def", "_init_global_step", "(", "self", ")", ":", "\n", "        ", "self", ".", "global_step", "=", "training_util", ".", "get_or_create_global_step", "(", ")", "\n", "self", ".", "_training_ops", ".", "update", "(", "{", "\n", "'increment_global_step'", ":", "training_util", ".", "_increment_global_step", "(", "1", ")", "\n", "}", ")", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.algorithms.sac.SAC._init_placeholders": [[131, 184], ["tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder"], "methods", ["None"], ["", "def", "_init_placeholders", "(", "self", ")", ":", "\n", "        ", "\"\"\"Create input placeholders for the SAC algorithm.\n\n        Creates `tf.placeholder`s for:\n            - observation\n            - next observation\n            - action\n            - reward\n            - terminals\n        \"\"\"", "\n", "self", ".", "_iteration_ph", "=", "tf", ".", "placeholder", "(", "\n", "tf", ".", "int64", ",", "shape", "=", "None", ",", "name", "=", "'iteration'", ")", "\n", "\n", "self", ".", "_observations_ph", "=", "tf", ".", "placeholder", "(", "\n", "tf", ".", "float32", ",", "\n", "shape", "=", "(", "None", ",", "*", "self", ".", "_observation_shape", ")", ",", "\n", "name", "=", "'observation'", ",", "\n", ")", "\n", "\n", "self", ".", "_next_observations_ph", "=", "tf", ".", "placeholder", "(", "\n", "tf", ".", "float32", ",", "\n", "shape", "=", "(", "None", ",", "*", "self", ".", "_observation_shape", ")", ",", "\n", "name", "=", "'next_observation'", ",", "\n", ")", "\n", "\n", "self", ".", "_actions_ph", "=", "tf", ".", "placeholder", "(", "\n", "tf", ".", "float32", ",", "\n", "shape", "=", "(", "None", ",", "*", "self", ".", "_action_shape", ")", ",", "\n", "name", "=", "'actions'", ",", "\n", ")", "\n", "\n", "self", ".", "_rewards_ph", "=", "tf", ".", "placeholder", "(", "\n", "tf", ".", "float32", ",", "\n", "shape", "=", "(", "None", ",", "1", ")", ",", "\n", "name", "=", "'rewards'", ",", "\n", ")", "\n", "\n", "self", ".", "_terminals_ph", "=", "tf", ".", "placeholder", "(", "\n", "tf", ".", "float32", ",", "\n", "shape", "=", "(", "None", ",", "1", ")", ",", "\n", "name", "=", "'terminals'", ",", "\n", ")", "\n", "\n", "if", "self", ".", "_store_extra_policy_info", ":", "\n", "            ", "self", ".", "_log_pis_ph", "=", "tf", ".", "placeholder", "(", "\n", "tf", ".", "float32", ",", "\n", "shape", "=", "(", "None", ",", "1", ")", ",", "\n", "name", "=", "'log_pis'", ",", "\n", ")", "\n", "self", ".", "_raw_actions_ph", "=", "tf", ".", "placeholder", "(", "\n", "tf", ".", "float32", ",", "\n", "shape", "=", "(", "None", ",", "*", "self", ".", "_action_shape", ")", ",", "\n", "name", "=", "'raw_actions'", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.algorithms.sac.SAC._get_Q_target": [[186, 204], ["sac.SAC._policy.actions", "sac.SAC._policy.log_pis", "tuple", "tensorflow.reduce_min", "sac.td_target", "Q"], "methods", ["home.repos.pwc.inspect_result.YaoYao1995_MEEE.policies.gaussian_policy.GaussianPolicy.actions", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.policies.gaussian_policy.GaussianPolicy.log_pis", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.algorithms.meee.td_target"], ["", "", "def", "_get_Q_target", "(", "self", ")", ":", "\n", "        ", "next_actions", "=", "self", ".", "_policy", ".", "actions", "(", "[", "self", ".", "_next_observations_ph", "]", ")", "\n", "next_log_pis", "=", "self", ".", "_policy", ".", "log_pis", "(", "\n", "[", "self", ".", "_next_observations_ph", "]", ",", "next_actions", ")", "\n", "\n", "next_Qs_values", "=", "tuple", "(", "\n", "Q", "(", "[", "self", ".", "_next_observations_ph", ",", "next_actions", "]", ")", "\n", "for", "Q", "in", "self", ".", "_Q_targets", ")", "\n", "\n", "min_next_Q", "=", "tf", ".", "reduce_min", "(", "next_Qs_values", ",", "axis", "=", "0", ")", "\n", "next_value", "=", "min_next_Q", "-", "self", ".", "_alpha", "*", "next_log_pis", "\n", "\n", "Q_target", "=", "td_target", "(", "\n", "reward", "=", "self", ".", "_reward_scale", "*", "self", ".", "_rewards_ph", ",", "\n", "discount", "=", "self", ".", "_discount", ",", "\n", "next_value", "=", "(", "1", "-", "self", ".", "_terminals_ph", ")", "*", "next_value", ")", "\n", "\n", "return", "Q_target", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.algorithms.sac.SAC._init_critic_update": [[205, 248], ["tensorflow.stop_gradient", "tuple", "tuple", "tuple", "tuple", "sac.SAC._training_ops.update", "sac.SAC._get_Q_target", "tensorflow.stop_gradient.shape.as_list", "Q", "tensorflow.losses.mean_squared_error", "tensorflow.train.AdamOptimizer", "tensorflow.contrib.layers.optimize_loss", "tensorflow.group", "enumerate", "enumerate", "zip"], "methods", ["home.repos.pwc.inspect_result.YaoYao1995_MEEE.utils.logging.Progress.update", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.algorithms.meee.MEEE._get_Q_target"], ["", "def", "_init_critic_update", "(", "self", ")", ":", "\n", "        ", "\"\"\"Create minimization operation for critic Q-function.\n\n        Creates a `tf.optimizer.minimize` operation for updating\n        critic Q-function with gradient descent, and appends it to\n        `self._training_ops` attribute.\n\n        See Equations (5, 6) in [1], for further information of the\n        Q-function update rule.\n        \"\"\"", "\n", "Q_target", "=", "tf", ".", "stop_gradient", "(", "self", ".", "_get_Q_target", "(", ")", ")", "\n", "\n", "assert", "Q_target", ".", "shape", ".", "as_list", "(", ")", "==", "[", "None", ",", "1", "]", "\n", "\n", "Q_values", "=", "self", ".", "_Q_values", "=", "tuple", "(", "\n", "Q", "(", "[", "self", ".", "_observations_ph", ",", "self", ".", "_actions_ph", "]", ")", "\n", "for", "Q", "in", "self", ".", "_Qs", ")", "\n", "\n", "Q_losses", "=", "self", ".", "_Q_losses", "=", "tuple", "(", "\n", "tf", ".", "losses", ".", "mean_squared_error", "(", "\n", "labels", "=", "Q_target", ",", "predictions", "=", "Q_value", ",", "weights", "=", "0.5", ")", "\n", "for", "Q_value", "in", "Q_values", ")", "\n", "\n", "self", ".", "_Q_optimizers", "=", "tuple", "(", "\n", "tf", ".", "train", ".", "AdamOptimizer", "(", "\n", "learning_rate", "=", "self", ".", "_Q_lr", ",", "\n", "name", "=", "'{}_{}_optimizer'", ".", "format", "(", "Q", ".", "_name", ",", "i", ")", "\n", ")", "for", "i", ",", "Q", "in", "enumerate", "(", "self", ".", "_Qs", ")", ")", "\n", "Q_training_ops", "=", "tuple", "(", "\n", "tf", ".", "contrib", ".", "layers", ".", "optimize_loss", "(", "\n", "Q_loss", ",", "\n", "self", ".", "global_step", ",", "\n", "learning_rate", "=", "self", ".", "_Q_lr", ",", "\n", "optimizer", "=", "Q_optimizer", ",", "\n", "variables", "=", "Q", ".", "trainable_variables", ",", "\n", "increment_global_step", "=", "False", ",", "\n", "summaries", "=", "(", "(", "\n", "\"loss\"", ",", "\"gradients\"", ",", "\"gradient_norm\"", ",", "\"global_gradient_norm\"", "\n", ")", "if", "self", ".", "_tf_summaries", "else", "(", ")", ")", ")", "\n", "for", "i", ",", "(", "Q", ",", "Q_loss", ",", "Q_optimizer", ")", "\n", "in", "enumerate", "(", "zip", "(", "self", ".", "_Qs", ",", "Q_losses", ",", "self", ".", "_Q_optimizers", ")", ")", ")", "\n", "\n", "self", ".", "_training_ops", ".", "update", "(", "{", "'Q'", ":", "tf", ".", "group", "(", "Q_training_ops", ")", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.algorithms.sac.SAC._init_actor_update": [[249, 326], ["sac.SAC._policy.actions", "sac.SAC._policy.log_pis", "tensorflow.get_variable", "tensorflow.exp", "isinstance", "tuple", "tensorflow.reduce_min", "tensorflow.reduce_mean", "tensorflow.train.AdamOptimizer", "tensorflow.contrib.layers.optimize_loss", "sac.SAC._training_ops.update", "sac.SAC.shape.as_list", "tensorflow.train.AdamOptimizer", "sac.SAC._alpha_optimizer.minimize", "sac.SAC._training_ops.update", "tensorflow.contrib.distributions.MultivariateNormalDiag", "tensorflow.contrib.distributions.MultivariateNormalDiag.log_prob", "policy_kl_losses.shape.as_list", "tensorflow.reduce_mean", "Q", "tensorflow.zeros", "tensorflow.ones", "tensorflow.stop_gradient"], "methods", ["home.repos.pwc.inspect_result.YaoYao1995_MEEE.policies.gaussian_policy.GaussianPolicy.actions", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.policies.gaussian_policy.GaussianPolicy.log_pis", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.utils.logging.Progress.update", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.utils.logging.Progress.update"], ["", "def", "_init_actor_update", "(", "self", ")", ":", "\n", "        ", "\"\"\"Create minimization operations for policy and entropy.\n\n        Creates a `tf.optimizer.minimize` operations for updating\n        policy and entropy with gradient descent, and adds them to\n        `self._training_ops` attribute.\n\n        See Section 4.2 in [1], for further information of the policy update,\n        and Section 5 in [1] for further information of the entropy update.\n        \"\"\"", "\n", "\n", "actions", "=", "self", ".", "_policy", ".", "actions", "(", "[", "self", ".", "_observations_ph", "]", ")", "\n", "log_pis", "=", "self", ".", "_policy", ".", "log_pis", "(", "[", "self", ".", "_observations_ph", "]", ",", "actions", ")", "\n", "\n", "assert", "log_pis", ".", "shape", ".", "as_list", "(", ")", "==", "[", "None", ",", "1", "]", "\n", "\n", "log_alpha", "=", "self", ".", "_log_alpha", "=", "tf", ".", "get_variable", "(", "\n", "'log_alpha'", ",", "\n", "dtype", "=", "tf", ".", "float32", ",", "\n", "initializer", "=", "0.0", ")", "\n", "alpha", "=", "tf", ".", "exp", "(", "log_alpha", ")", "\n", "\n", "if", "isinstance", "(", "self", ".", "_target_entropy", ",", "Number", ")", ":", "\n", "            ", "alpha_loss", "=", "-", "tf", ".", "reduce_mean", "(", "\n", "log_alpha", "*", "tf", ".", "stop_gradient", "(", "log_pis", "+", "self", ".", "_target_entropy", ")", ")", "\n", "\n", "self", ".", "_alpha_optimizer", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "\n", "self", ".", "_policy_lr", ",", "name", "=", "'alpha_optimizer'", ")", "\n", "self", ".", "_alpha_train_op", "=", "self", ".", "_alpha_optimizer", ".", "minimize", "(", "\n", "loss", "=", "alpha_loss", ",", "var_list", "=", "[", "log_alpha", "]", ")", "\n", "\n", "self", ".", "_training_ops", ".", "update", "(", "{", "\n", "'temperature_alpha'", ":", "self", ".", "_alpha_train_op", "\n", "}", ")", "\n", "\n", "", "self", ".", "_alpha", "=", "alpha", "\n", "\n", "if", "self", ".", "_action_prior", "==", "'normal'", ":", "\n", "            ", "policy_prior", "=", "tf", ".", "contrib", ".", "distributions", ".", "MultivariateNormalDiag", "(", "\n", "loc", "=", "tf", ".", "zeros", "(", "self", ".", "_action_shape", ")", ",", "\n", "scale_diag", "=", "tf", ".", "ones", "(", "self", ".", "_action_shape", ")", ")", "\n", "policy_prior_log_probs", "=", "policy_prior", ".", "log_prob", "(", "actions", ")", "\n", "", "elif", "self", ".", "_action_prior", "==", "'uniform'", ":", "\n", "            ", "policy_prior_log_probs", "=", "0.0", "\n", "\n", "", "Q_log_targets", "=", "tuple", "(", "\n", "Q", "(", "[", "self", ".", "_observations_ph", ",", "actions", "]", ")", "\n", "for", "Q", "in", "self", ".", "_Qs", ")", "\n", "min_Q_log_target", "=", "tf", ".", "reduce_min", "(", "Q_log_targets", ",", "axis", "=", "0", ")", "\n", "\n", "if", "self", ".", "_reparameterize", ":", "\n", "            ", "policy_kl_losses", "=", "(", "\n", "alpha", "*", "log_pis", "\n", "-", "min_Q_log_target", "\n", "-", "policy_prior_log_probs", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "assert", "policy_kl_losses", ".", "shape", ".", "as_list", "(", ")", "==", "[", "None", ",", "1", "]", "\n", "\n", "policy_loss", "=", "tf", ".", "reduce_mean", "(", "policy_kl_losses", ")", "\n", "\n", "self", ".", "_policy_optimizer", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "\n", "learning_rate", "=", "self", ".", "_policy_lr", ",", "\n", "name", "=", "\"policy_optimizer\"", ")", "\n", "policy_train_op", "=", "tf", ".", "contrib", ".", "layers", ".", "optimize_loss", "(", "\n", "policy_loss", ",", "\n", "self", ".", "global_step", ",", "\n", "learning_rate", "=", "self", ".", "_policy_lr", ",", "\n", "optimizer", "=", "self", ".", "_policy_optimizer", ",", "\n", "variables", "=", "self", ".", "_policy", ".", "trainable_variables", ",", "\n", "increment_global_step", "=", "False", ",", "\n", "summaries", "=", "(", "\n", "\"loss\"", ",", "\"gradients\"", ",", "\"gradient_norm\"", ",", "\"global_gradient_norm\"", "\n", ")", "if", "self", ".", "_tf_summaries", "else", "(", ")", ")", "\n", "\n", "self", ".", "_training_ops", ".", "update", "(", "{", "'policy_train_op'", ":", "policy_train_op", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.algorithms.sac.SAC._init_training": [[327, 329], ["sac.SAC._update_target"], "methods", ["home.repos.pwc.inspect_result.YaoYao1995_MEEE.algorithms.meee.MEEE._update_target"], ["", "def", "_init_training", "(", "self", ")", ":", "\n", "        ", "self", ".", "_update_target", "(", "tau", "=", "1.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.algorithms.sac.SAC._update_target": [[330, 339], ["zip", "Q.get_weights", "Q_target.get_weights", "Q_target.set_weights", "zip"], "methods", ["home.repos.pwc.inspect_result.YaoYao1995_MEEE.policies.gaussian_policy.GaussianPolicy.get_weights", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.policies.gaussian_policy.GaussianPolicy.get_weights", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.policies.gaussian_policy.GaussianPolicy.set_weights"], ["", "def", "_update_target", "(", "self", ",", "tau", "=", "None", ")", ":", "\n", "        ", "tau", "=", "tau", "or", "self", ".", "_tau", "\n", "\n", "for", "Q", ",", "Q_target", "in", "zip", "(", "self", ".", "_Qs", ",", "self", ".", "_Q_targets", ")", ":", "\n", "            ", "source_params", "=", "Q", ".", "get_weights", "(", ")", "\n", "target_params", "=", "Q_target", ".", "get_weights", "(", ")", "\n", "Q_target", ".", "set_weights", "(", "[", "\n", "tau", "*", "source", "+", "(", "1.0", "-", "tau", ")", "*", "target", "\n", "for", "source", ",", "target", "in", "zip", "(", "source_params", ",", "target_params", ")", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.algorithms.sac.SAC._do_training": [[341, 351], ["sac.SAC._get_feed_dict", "sac.SAC._session.run", "sac.SAC._update_target"], "methods", ["home.repos.pwc.inspect_result.YaoYao1995_MEEE.algorithms.meee.MEEE._get_feed_dict", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.algorithms.meee.MEEE._update_target"], ["", "", "def", "_do_training", "(", "self", ",", "iteration", ",", "batch", ")", ":", "\n", "        ", "\"\"\"Runs the operations for updating training and target ops.\"\"\"", "\n", "\n", "feed_dict", "=", "self", ".", "_get_feed_dict", "(", "iteration", ",", "batch", ")", "\n", "\n", "self", ".", "_session", ".", "run", "(", "self", ".", "_training_ops", ",", "feed_dict", ")", "\n", "\n", "if", "iteration", "%", "self", ".", "_target_update_interval", "==", "0", ":", "\n", "# Run target ops here.", "\n", "            ", "self", ".", "_update_target", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.algorithms.sac.SAC._get_feed_dict": [[352, 371], ["None"], "methods", ["None"], ["", "", "def", "_get_feed_dict", "(", "self", ",", "iteration", ",", "batch", ")", ":", "\n", "        ", "\"\"\"Construct TensorFlow feed_dict from sample batch.\"\"\"", "\n", "\n", "feed_dict", "=", "{", "\n", "self", ".", "_observations_ph", ":", "batch", "[", "'observations'", "]", ",", "\n", "self", ".", "_actions_ph", ":", "batch", "[", "'actions'", "]", ",", "\n", "self", ".", "_next_observations_ph", ":", "batch", "[", "'next_observations'", "]", ",", "\n", "self", ".", "_rewards_ph", ":", "batch", "[", "'rewards'", "]", ",", "\n", "self", ".", "_terminals_ph", ":", "batch", "[", "'terminals'", "]", ",", "\n", "}", "\n", "\n", "if", "self", ".", "_store_extra_policy_info", ":", "\n", "            ", "feed_dict", "[", "self", ".", "_log_pis_ph", "]", "=", "batch", "[", "'log_pis'", "]", "\n", "feed_dict", "[", "self", ".", "_raw_actions_ph", "]", "=", "batch", "[", "'raw_actions'", "]", "\n", "\n", "", "if", "iteration", "is", "not", "None", ":", "\n", "            ", "feed_dict", "[", "self", ".", "_iteration_ph", "]", "=", "iteration", "\n", "\n", "", "return", "feed_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.algorithms.sac.SAC.get_diagnostics": [[372, 413], ["sac.SAC._get_feed_dict", "sac.SAC._session.run", "collections.OrderedDict", "sac.SAC._policy.get_diagnostics", "collections.OrderedDict.update", "sac.SAC._plotter.draw", "numpy.mean", "numpy.std", "numpy.mean", "sac.SAC.items"], "methods", ["home.repos.pwc.inspect_result.YaoYao1995_MEEE.algorithms.meee.MEEE._get_feed_dict", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.samplers.explore_sampler.ExploreSampler.get_diagnostics", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.utils.logging.Progress.update", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.misc.plotter.QFPolicyPlotter.draw"], ["", "def", "get_diagnostics", "(", "self", ",", "\n", "iteration", ",", "\n", "batch", ",", "\n", "training_paths", ",", "\n", "evaluation_paths", ")", ":", "\n", "        ", "\"\"\"Return diagnostic information as ordered dictionary.\n\n        Records mean and standard deviation of Q-function and state\n        value function, and TD-loss (mean squared Bellman error)\n        for the sample batch.\n\n        Also calls the `draw` method of the plotter, if plotter defined.\n        \"\"\"", "\n", "\n", "feed_dict", "=", "self", ".", "_get_feed_dict", "(", "iteration", ",", "batch", ")", "\n", "\n", "(", "Q_values", ",", "Q_losses", ",", "alpha", ",", "global_step", ")", "=", "self", ".", "_session", ".", "run", "(", "\n", "(", "self", ".", "_Q_values", ",", "\n", "self", ".", "_Q_losses", ",", "\n", "self", ".", "_alpha", ",", "\n", "self", ".", "global_step", ")", ",", "\n", "feed_dict", ")", "\n", "\n", "diagnostics", "=", "OrderedDict", "(", "{", "\n", "'Q-avg'", ":", "np", ".", "mean", "(", "Q_values", ")", ",", "\n", "'Q-std'", ":", "np", ".", "std", "(", "Q_values", ")", ",", "\n", "'Q_loss'", ":", "np", ".", "mean", "(", "Q_losses", ")", ",", "\n", "'alpha'", ":", "alpha", ",", "\n", "}", ")", "\n", "\n", "policy_diagnostics", "=", "self", ".", "_policy", ".", "get_diagnostics", "(", "\n", "batch", "[", "'observations'", "]", ")", "\n", "diagnostics", ".", "update", "(", "{", "\n", "f'policy/{key}'", ":", "value", "\n", "for", "key", ",", "value", "in", "policy_diagnostics", ".", "items", "(", ")", "\n", "}", ")", "\n", "\n", "if", "self", ".", "_plotter", ":", "\n", "            ", "self", ".", "_plotter", ".", "draw", "(", ")", "\n", "\n", "", "return", "diagnostics", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.algorithms.sac.SAC.tf_saveables": [[414, 429], ["hasattr", "enumerate"], "methods", ["None"], ["", "@", "property", "\n", "def", "tf_saveables", "(", "self", ")", ":", "\n", "        ", "saveables", "=", "{", "\n", "'_policy_optimizer'", ":", "self", ".", "_policy_optimizer", ",", "\n", "**", "{", "\n", "f'Q_optimizer_{i}'", ":", "optimizer", "\n", "for", "i", ",", "optimizer", "in", "enumerate", "(", "self", ".", "_Q_optimizers", ")", "\n", "}", ",", "\n", "'_log_alpha'", ":", "self", ".", "_log_alpha", ",", "\n", "}", "\n", "\n", "if", "hasattr", "(", "self", ",", "'_alpha_optimizer'", ")", ":", "\n", "            ", "saveables", "[", "'_alpha_optimizer'", "]", "=", "self", ".", "_alpha_optimizer", "\n", "\n", "", "return", "saveables", "", "", "", ""]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.algorithms.sac.td_target": [[11, 13], ["None"], "function", ["None"], ["def", "td_target", "(", "reward", ",", "discount", ",", "next_value", ")", ":", "\n", "    ", "return", "reward", "+", "discount", "*", "next_value", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.algorithms.rl_algorithm.RLAlgorithm.__init__": [[23, 80], ["max", "tensorflow.keras.backend.get_session"], "methods", ["None"], ["def", "__init__", "(", "\n", "self", ",", "\n", "sampler", ",", "\n", "n_epochs", "=", "1000", ",", "\n", "train_every_n_steps", "=", "1", ",", "\n", "n_train_repeat", "=", "1", ",", "\n", "max_train_repeat_per_timestep", "=", "5", ",", "\n", "n_initial_exploration_steps", "=", "0", ",", "\n", "initial_exploration_policy", "=", "None", ",", "\n", "epoch_length", "=", "1000", ",", "\n", "eval_n_episodes", "=", "10", ",", "\n", "eval_deterministic", "=", "True", ",", "\n", "eval_render_mode", "=", "None", ",", "\n", "video_save_frequency", "=", "0", ",", "\n", "session", "=", "None", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            n_epochs (`int`): Number of epochs to run the training for.\n            n_train_repeat (`int`): Number of times to repeat the training\n                for single time step.\n            n_initial_exploration_steps: Number of steps in the beginning to\n                take using actions drawn from a separate exploration policy.\n            epoch_length (`int`): Epoch length.\n            eval_n_episodes (`int`): Number of rollouts to evaluate.\n            eval_deterministic (`int`): Whether or not to run the policy in\n                deterministic mode when evaluating policy.\n            eval_render_mode (`str`): Mode to render evaluation rollouts in.\n                None to disable rendering.\n        \"\"\"", "\n", "self", ".", "sampler", "=", "sampler", "\n", "\n", "self", ".", "_n_epochs", "=", "n_epochs", "\n", "self", ".", "_n_train_repeat", "=", "n_train_repeat", "\n", "self", ".", "_max_train_repeat_per_timestep", "=", "max", "(", "\n", "max_train_repeat_per_timestep", ",", "n_train_repeat", ")", "\n", "self", ".", "_train_every_n_steps", "=", "train_every_n_steps", "\n", "self", ".", "_epoch_length", "=", "epoch_length", "\n", "self", ".", "_n_initial_exploration_steps", "=", "n_initial_exploration_steps", "\n", "self", ".", "_initial_exploration_policy", "=", "initial_exploration_policy", "\n", "\n", "self", ".", "_eval_n_episodes", "=", "eval_n_episodes", "\n", "self", ".", "_eval_deterministic", "=", "eval_deterministic", "\n", "self", ".", "_video_save_frequency", "=", "video_save_frequency", "\n", "\n", "if", "self", ".", "_video_save_frequency", ">", "0", ":", "\n", "            ", "assert", "eval_render_mode", "!=", "'human'", ",", "(", "\n", "\"RlAlgorithm cannot render and save videos at the same time\"", ")", "\n", "self", ".", "_eval_render_mode", "=", "'rgb_array'", "\n", "", "else", ":", "\n", "            ", "self", ".", "_eval_render_mode", "=", "eval_render_mode", "\n", "\n", "", "self", ".", "_session", "=", "session", "or", "tf", ".", "keras", ".", "backend", ".", "get_session", "(", ")", "\n", "\n", "self", ".", "_epoch", "=", "0", "\n", "self", ".", "_timestep", "=", "0", "\n", "self", ".", "_num_train_steps", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.algorithms.rl_algorithm.RLAlgorithm._initial_exploration_hook": [[81, 92], ["rl_algorithm.RLAlgorithm.sampler.initialize", "ValueError", "rl_algorithm.RLAlgorithm.sampler.sample"], "methods", ["home.repos.pwc.inspect_result.YaoYao1995_MEEE.samplers.remote_sampler.RemoteSampler.initialize", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.samplers.explore_sampler.ExploreSampler.sample"], ["", "def", "_initial_exploration_hook", "(", "self", ",", "env", ",", "initial_exploration_policy", ",", "pool", ")", ":", "\n", "        ", "if", "self", ".", "_n_initial_exploration_steps", "<", "1", ":", "return", "\n", "\n", "if", "not", "initial_exploration_policy", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"Initial exploration policy must be provided when\"", "\n", "\" n_initial_exploration_steps > 0.\"", ")", "\n", "\n", "", "self", ".", "sampler", ".", "initialize", "(", "env", ",", "initial_exploration_policy", ",", "pool", ")", "\n", "while", "pool", ".", "size", "<", "self", ".", "_n_initial_exploration_steps", ":", "\n", "            ", "self", ".", "sampler", ".", "sample", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.algorithms.rl_algorithm.RLAlgorithm._training_before_hook": [[93, 96], ["None"], "methods", ["None"], ["", "", "def", "_training_before_hook", "(", "self", ")", ":", "\n", "        ", "\"\"\"Method called before the actual training loops.\"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.algorithms.rl_algorithm.RLAlgorithm._training_after_hook": [[97, 100], ["None"], "methods", ["None"], ["", "def", "_training_after_hook", "(", "self", ")", ":", "\n", "        ", "\"\"\"Method called after the actual training loops.\"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.algorithms.rl_algorithm.RLAlgorithm._timestep_before_hook": [[101, 104], ["None"], "methods", ["None"], ["", "def", "_timestep_before_hook", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Hook called at the beginning of each timestep.\"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.algorithms.rl_algorithm.RLAlgorithm._timestep_after_hook": [[105, 108], ["None"], "methods", ["None"], ["", "def", "_timestep_after_hook", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Hook called at the end of each timestep.\"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.algorithms.rl_algorithm.RLAlgorithm._epoch_before_hook": [[109, 112], ["None"], "methods", ["None"], ["", "def", "_epoch_before_hook", "(", "self", ")", ":", "\n", "        ", "\"\"\"Hook called at the beginning of each epoch.\"\"\"", "\n", "self", ".", "_train_steps_this_epoch", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.algorithms.rl_algorithm.RLAlgorithm._epoch_after_hook": [[113, 116], ["None"], "methods", ["None"], ["", "def", "_epoch_after_hook", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Hook called at the end of each epoch.\"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.algorithms.rl_algorithm.RLAlgorithm._training_batch": [[117, 119], ["rl_algorithm.RLAlgorithm.sampler.random_batch"], "methods", ["home.repos.pwc.inspect_result.YaoYao1995_MEEE.samplers.explore_sampler.ExploreSampler.random_batch"], ["", "def", "_training_batch", "(", "self", ",", "batch_size", "=", "None", ")", ":", "\n", "        ", "return", "self", ".", "sampler", ".", "random_batch", "(", "batch_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.algorithms.rl_algorithm.RLAlgorithm._evaluation_batch": [[120, 122], ["rl_algorithm.RLAlgorithm._training_batch"], "methods", ["home.repos.pwc.inspect_result.YaoYao1995_MEEE.algorithms.meee.MEEE._training_batch"], ["", "def", "_evaluation_batch", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "self", ".", "_training_batch", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.algorithms.rl_algorithm.RLAlgorithm._training_started": [[123, 126], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "_training_started", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_total_timestep", ">", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.algorithms.rl_algorithm.RLAlgorithm._total_timestep": [[127, 131], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "_total_timestep", "(", "self", ")", ":", "\n", "        ", "total_timestep", "=", "self", ".", "_epoch", "*", "self", ".", "_epoch_length", "+", "self", ".", "_timestep", "\n", "return", "total_timestep", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.algorithms.rl_algorithm.RLAlgorithm._train": [[132, 259], ["rl_algorithm.RLAlgorithm.sampler.initialize", "gtimer.reset_root", "gtimer.rename_root", "gtimer.set_def_unique", "rl_algorithm.RLAlgorithm._training_before_hook", "pool.return_all_samples", "pdb.set_trace", "gtimer.timed_for", "rl_algorithm.RLAlgorithm.sampler.terminate", "rl_algorithm.RLAlgorithm._training_after_hook", "rl_algorithm.RLAlgorithm._init_training", "rl_algorithm.RLAlgorithm._initial_exploration_hook", "range", "rl_algorithm.RLAlgorithm._epoch_before_hook", "gtimer.stamp", "itertools.count", "rl_algorithm.RLAlgorithm.sampler.get_last_n_paths", "gtimer.stamp", "rl_algorithm.RLAlgorithm._evaluation_paths", "gtimer.stamp", "rl_algorithm.RLAlgorithm._evaluate_rollouts", "gtimer.stamp", "rl_algorithm.RLAlgorithm._epoch_after_hook", "gtimer.stamp", "rl_algorithm.RLAlgorithm.sampler.get_diagnostics", "rl_algorithm.RLAlgorithm.get_diagnostics", "rl_algorithm.RLAlgorithm.update", "rl_algorithm.RLAlgorithm._timestep_before_hook", "gtimer.stamp", "rl_algorithm.RLAlgorithm._do_sampling", "gtimer.stamp", "print", "pdb.set_trace", "gtimer.stamp", "rl_algorithm.RLAlgorithm._timestep_after_hook", "gtimer.stamp", "math.ceil", "rl_algorithm.RLAlgorithm._evaluate_rollouts", "gtimer.stamp", "collections.OrderedDict", "hasattr", "training_environment.render_rollouts", "rl_algorithm.RLAlgorithm._do_training_repeats", "rl_algorithm.RLAlgorithm._evaluation_batch", "gtimer.get_times", "sorted", "sorted", "sorted", "sorted", "rl_algorithm.RLAlgorithm.keys", "rl_algorithm.RLAlgorithm.keys", "time_diagnostics.keys", "rl_algorithm.RLAlgorithm.keys"], "methods", ["home.repos.pwc.inspect_result.YaoYao1995_MEEE.samplers.remote_sampler.RemoteSampler.initialize", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.algorithms.rl_algorithm.RLAlgorithm._training_before_hook", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.replay_pools.flexible_replay_pool.FlexibleReplayPool.return_all_samples", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.samplers.base_sampler.BaseSampler.terminate", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.algorithms.rl_algorithm.RLAlgorithm._training_after_hook", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.algorithms.meee.MEEE._init_training", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.algorithms.rl_algorithm.RLAlgorithm._initial_exploration_hook", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.algorithms.rl_algorithm.RLAlgorithm._epoch_before_hook", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.utils.logging.Progress.stamp", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.samplers.base_sampler.BaseSampler.get_last_n_paths", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.utils.logging.Progress.stamp", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.algorithms.rl_algorithm.RLAlgorithm._evaluation_paths", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.utils.logging.Progress.stamp", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.algorithms.rl_algorithm.RLAlgorithm._evaluate_rollouts", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.utils.logging.Progress.stamp", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.algorithms.rl_algorithm.RLAlgorithm._epoch_after_hook", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.utils.logging.Progress.stamp", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.samplers.explore_sampler.ExploreSampler.get_diagnostics", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.samplers.explore_sampler.ExploreSampler.get_diagnostics", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.utils.logging.Progress.update", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.algorithms.rl_algorithm.RLAlgorithm._timestep_before_hook", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.utils.logging.Progress.stamp", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.algorithms.rl_algorithm.RLAlgorithm._do_sampling", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.utils.logging.Progress.stamp", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.utils.logging.Progress.stamp", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.algorithms.rl_algorithm.RLAlgorithm._timestep_after_hook", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.utils.logging.Progress.stamp", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.algorithms.rl_algorithm.RLAlgorithm._evaluate_rollouts", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.utils.logging.Progress.stamp", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.adapters.softlearning_env.SoftlearningEnv.render_rollouts", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.algorithms.rl_algorithm.RLAlgorithm._do_training_repeats", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.algorithms.rl_algorithm.RLAlgorithm._evaluation_batch"], ["", "def", "_train", "(", "self", ")", ":", "\n", "        ", "\"\"\"Return a generator that performs RL training.\n\n        Args:\n            env (`SoftlearningEnv`): Environment used for training.\n            policy (`Policy`): Policy used for training\n            initial_exploration_policy ('Policy'): Policy used for exploration\n                If None, then all exploration is done using policy\n            pool (`PoolBase`): Sample pool to add samples to\n        \"\"\"", "\n", "training_environment", "=", "self", ".", "_training_environment", "\n", "evaluation_environment", "=", "self", ".", "_evaluation_environment", "\n", "policy", "=", "self", ".", "_policy", "\n", "pool", "=", "self", ".", "_pool", "\n", "\n", "if", "not", "self", ".", "_training_started", ":", "\n", "            ", "self", ".", "_init_training", "(", ")", "\n", "\n", "self", ".", "_initial_exploration_hook", "(", "\n", "training_environment", ",", "self", ".", "_initial_exploration_policy", ",", "pool", ")", "\n", "\n", "", "self", ".", "sampler", ".", "initialize", "(", "training_environment", ",", "policy", ",", "pool", ")", "\n", "\n", "gt", ".", "reset_root", "(", ")", "\n", "gt", ".", "rename_root", "(", "'RLAlgorithm'", ")", "\n", "gt", ".", "set_def_unique", "(", "False", ")", "\n", "\n", "self", ".", "_training_before_hook", "(", ")", "\n", "\n", "env_samples", "=", "pool", ".", "return_all_samples", "(", ")", "\n", "pdb", ".", "set_trace", "(", ")", "\n", "\n", "for", "self", ".", "_epoch", "in", "gt", ".", "timed_for", "(", "range", "(", "self", ".", "_epoch", ",", "self", ".", "_n_epochs", ")", ")", ":", "\n", "            ", "self", ".", "_epoch_before_hook", "(", ")", "\n", "gt", ".", "stamp", "(", "'epoch_before_hook'", ")", "\n", "\n", "start_samples", "=", "self", ".", "sampler", ".", "_total_samples", "\n", "for", "i", "in", "count", "(", ")", ":", "\n", "                ", "samples_now", "=", "self", ".", "sampler", ".", "_total_samples", "\n", "self", ".", "_timestep", "=", "samples_now", "-", "start_samples", "\n", "\n", "if", "(", "samples_now", ">=", "start_samples", "+", "self", ".", "_epoch_length", "\n", "and", "self", ".", "ready_to_train", ")", ":", "\n", "                    ", "break", "\n", "\n", "", "self", ".", "_timestep_before_hook", "(", ")", "\n", "gt", ".", "stamp", "(", "'timestep_before_hook'", ")", "\n", "\n", "self", ".", "_do_sampling", "(", "timestep", "=", "self", ".", "_total_timestep", ")", "\n", "gt", ".", "stamp", "(", "'sample'", ")", "\n", "\n", "print", "(", "'epoch: {} | timestep: {} | total timesteps: {}'", ".", "format", "(", "self", ".", "_epoch", ",", "self", ".", "_timestep", ",", "self", ".", "_epoch_length", ")", ")", "\n", "pdb", ".", "set_trace", "(", ")", "\n", "\n", "if", "self", ".", "ready_to_train", ":", "\n", "                    ", "self", ".", "_do_training_repeats", "(", "timestep", "=", "self", ".", "_total_timestep", ")", "\n", "", "gt", ".", "stamp", "(", "'train'", ")", "\n", "\n", "self", ".", "_timestep_after_hook", "(", ")", "\n", "gt", ".", "stamp", "(", "'timestep_after_hook'", ")", "\n", "\n", "", "training_paths", "=", "self", ".", "sampler", ".", "get_last_n_paths", "(", "\n", "math", ".", "ceil", "(", "self", ".", "_epoch_length", "/", "self", ".", "sampler", ".", "_max_path_length", ")", ")", "\n", "gt", ".", "stamp", "(", "'training_paths'", ")", "\n", "evaluation_paths", "=", "self", ".", "_evaluation_paths", "(", "\n", "policy", ",", "evaluation_environment", ")", "\n", "gt", ".", "stamp", "(", "'evaluation_paths'", ")", "\n", "\n", "training_metrics", "=", "self", ".", "_evaluate_rollouts", "(", "\n", "training_paths", ",", "training_environment", ")", "\n", "gt", ".", "stamp", "(", "'training_metrics'", ")", "\n", "if", "evaluation_paths", ":", "\n", "                ", "evaluation_metrics", "=", "self", ".", "_evaluate_rollouts", "(", "\n", "evaluation_paths", ",", "evaluation_environment", ")", "\n", "gt", ".", "stamp", "(", "'evaluation_metrics'", ")", "\n", "", "else", ":", "\n", "                ", "evaluation_metrics", "=", "{", "}", "\n", "\n", "", "self", ".", "_epoch_after_hook", "(", "training_paths", ")", "\n", "gt", ".", "stamp", "(", "'epoch_after_hook'", ")", "\n", "\n", "sampler_diagnostics", "=", "self", ".", "sampler", ".", "get_diagnostics", "(", ")", "\n", "\n", "diagnostics", "=", "self", ".", "get_diagnostics", "(", "\n", "iteration", "=", "self", ".", "_total_timestep", ",", "\n", "batch", "=", "self", ".", "_evaluation_batch", "(", ")", ",", "\n", "training_paths", "=", "training_paths", ",", "\n", "evaluation_paths", "=", "evaluation_paths", ")", "\n", "\n", "time_diagnostics", "=", "gt", ".", "get_times", "(", ")", ".", "stamps", ".", "itrs", "\n", "\n", "diagnostics", ".", "update", "(", "OrderedDict", "(", "(", "\n", "*", "(", "\n", "(", "f'evaluation/{key}'", ",", "evaluation_metrics", "[", "key", "]", ")", "\n", "for", "key", "in", "sorted", "(", "evaluation_metrics", ".", "keys", "(", ")", ")", "\n", ")", ",", "\n", "*", "(", "\n", "(", "f'training/{key}'", ",", "training_metrics", "[", "key", "]", ")", "\n", "for", "key", "in", "sorted", "(", "training_metrics", ".", "keys", "(", ")", ")", "\n", ")", ",", "\n", "*", "(", "\n", "(", "f'times/{key}'", ",", "time_diagnostics", "[", "key", "]", "[", "-", "1", "]", ")", "\n", "for", "key", "in", "sorted", "(", "time_diagnostics", ".", "keys", "(", ")", ")", "\n", ")", ",", "\n", "*", "(", "\n", "(", "f'sampler/{key}'", ",", "sampler_diagnostics", "[", "key", "]", ")", "\n", "for", "key", "in", "sorted", "(", "sampler_diagnostics", ".", "keys", "(", ")", ")", "\n", ")", ",", "\n", "(", "'epoch'", ",", "self", ".", "_epoch", ")", ",", "\n", "(", "'timestep'", ",", "self", ".", "_timestep", ")", ",", "\n", "(", "'timesteps_total'", ",", "self", ".", "_total_timestep", ")", ",", "\n", "(", "'train-steps'", ",", "self", ".", "_num_train_steps", ")", ",", "\n", ")", ")", ")", "\n", "\n", "if", "self", ".", "_eval_render_mode", "is", "not", "None", "and", "hasattr", "(", "\n", "evaluation_environment", ",", "'render_rollouts'", ")", ":", "\n", "# TODO(hartikainen): Make this consistent such that there's no", "\n", "# need for the hasattr check.", "\n", "                ", "training_environment", ".", "render_rollouts", "(", "evaluation_paths", ")", "\n", "\n", "", "yield", "diagnostics", "\n", "\n", "", "self", ".", "sampler", ".", "terminate", "(", ")", "\n", "\n", "self", ".", "_training_after_hook", "(", ")", "\n", "\n", "yield", "{", "'done'", ":", "True", ",", "**", "diagnostics", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.algorithms.rl_algorithm.RLAlgorithm._evaluation_paths": [[260, 284], ["policy.set_deterministic", "softlearning.samplers.rollouts", "enumerate", "path.pop", "os.path.join", "softlearning.misc.utils.save_video", "os.getcwd"], "methods", ["home.repos.pwc.inspect_result.YaoYao1995_MEEE.policies.base_policy.BasePolicy.set_deterministic", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.samplers.utils.rollouts", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.models.bnn.BNN.pop", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.misc.utils.save_video"], ["", "def", "_evaluation_paths", "(", "self", ",", "policy", ",", "evaluation_env", ")", ":", "\n", "        ", "if", "self", ".", "_eval_n_episodes", "<", "1", ":", "return", "(", ")", "\n", "\n", "with", "policy", ".", "set_deterministic", "(", "self", ".", "_eval_deterministic", ")", ":", "\n", "            ", "paths", "=", "rollouts", "(", "\n", "self", ".", "_eval_n_episodes", ",", "\n", "evaluation_env", ",", "\n", "policy", ",", "\n", "self", ".", "sampler", ".", "_max_path_length", ",", "\n", "render_mode", "=", "self", ".", "_eval_render_mode", ")", "\n", "\n", "", "should_save_video", "=", "(", "\n", "self", ".", "_video_save_frequency", ">", "0", "\n", "and", "self", ".", "_epoch", "%", "self", ".", "_video_save_frequency", "==", "0", ")", "\n", "\n", "if", "should_save_video", ":", "\n", "            ", "for", "i", ",", "path", "in", "enumerate", "(", "paths", ")", ":", "\n", "                ", "video_frames", "=", "path", ".", "pop", "(", "'images'", ")", "\n", "video_file_name", "=", "f'evaluation_path_{self._epoch}_{i}.avi'", "\n", "video_file_path", "=", "os", ".", "path", ".", "join", "(", "\n", "os", ".", "getcwd", "(", ")", ",", "'videos'", ",", "video_file_name", ")", "\n", "save_video", "(", "video_frames", ",", "video_file_path", ")", "\n", "\n", "", "", "return", "paths", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.algorithms.rl_algorithm.RLAlgorithm._evaluate_rollouts": [[285, 307], ["collections.OrderedDict", "env.get_path_infos", "env.get_path_infos.items", "path[].sum", "len", "numpy.mean", "numpy.min", "numpy.max", "numpy.std", "numpy.mean", "numpy.min", "numpy.max", "numpy.std"], "methods", ["home.repos.pwc.inspect_result.YaoYao1995_MEEE.adapters.softlearning_env.SoftlearningEnv.get_path_infos"], ["", "def", "_evaluate_rollouts", "(", "self", ",", "paths", ",", "env", ")", ":", "\n", "        ", "\"\"\"Compute evaluation metrics for the given rollouts.\"\"\"", "\n", "\n", "total_returns", "=", "[", "path", "[", "'rewards'", "]", ".", "sum", "(", ")", "for", "path", "in", "paths", "]", "\n", "episode_lengths", "=", "[", "len", "(", "p", "[", "'rewards'", "]", ")", "for", "p", "in", "paths", "]", "\n", "\n", "diagnostics", "=", "OrderedDict", "(", "(", "\n", "(", "'return-average'", ",", "np", ".", "mean", "(", "total_returns", ")", ")", ",", "\n", "(", "'return-min'", ",", "np", ".", "min", "(", "total_returns", ")", ")", ",", "\n", "(", "'return-max'", ",", "np", ".", "max", "(", "total_returns", ")", ")", ",", "\n", "(", "'return-std'", ",", "np", ".", "std", "(", "total_returns", ")", ")", ",", "\n", "(", "'episode-length-avg'", ",", "np", ".", "mean", "(", "episode_lengths", ")", ")", ",", "\n", "(", "'episode-length-min'", ",", "np", ".", "min", "(", "episode_lengths", ")", ")", ",", "\n", "(", "'episode-length-max'", ",", "np", ".", "max", "(", "episode_lengths", ")", ")", ",", "\n", "(", "'episode-length-std'", ",", "np", ".", "std", "(", "episode_lengths", ")", ")", ",", "\n", ")", ")", "\n", "\n", "env_infos", "=", "env", ".", "get_path_infos", "(", "paths", ")", "\n", "for", "key", ",", "value", "in", "env_infos", ".", "items", "(", ")", ":", "\n", "            ", "diagnostics", "[", "f'env_infos/{key}'", "]", "=", "value", "\n", "\n", "", "return", "diagnostics", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.algorithms.rl_algorithm.RLAlgorithm.get_diagnostics": [[308, 315], ["None"], "methods", ["None"], ["", "@", "abc", ".", "abstractmethod", "\n", "def", "get_diagnostics", "(", "self", ",", "\n", "iteration", ",", "\n", "batch", ",", "\n", "training_paths", ",", "\n", "evaluation_paths", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.algorithms.rl_algorithm.RLAlgorithm.ready_to_train": [[316, 319], ["rl_algorithm.RLAlgorithm.sampler.batch_ready"], "methods", ["home.repos.pwc.inspect_result.YaoYao1995_MEEE.samplers.base_sampler.BaseSampler.batch_ready"], ["", "@", "property", "\n", "def", "ready_to_train", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "sampler", ".", "batch_ready", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.algorithms.rl_algorithm.RLAlgorithm._do_sampling": [[320, 322], ["rl_algorithm.RLAlgorithm.sampler.sample"], "methods", ["home.repos.pwc.inspect_result.YaoYao1995_MEEE.samplers.explore_sampler.ExploreSampler.sample"], ["", "def", "_do_sampling", "(", "self", ",", "timestep", ",", "disturb", "=", "False", ",", "fake_env", "=", "None", ",", "Qs", "=", "None", ")", ":", "\n", "        ", "self", ".", "sampler", ".", "sample", "(", "disturb", ",", "fake_env", ",", "Qs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.algorithms.rl_algorithm.RLAlgorithm._do_training_repeats": [[323, 338], ["range", "rl_algorithm.RLAlgorithm._do_training", "rl_algorithm.RLAlgorithm._training_batch"], "methods", ["home.repos.pwc.inspect_result.YaoYao1995_MEEE.algorithms.meee.MEEE._do_training", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.algorithms.meee.MEEE._training_batch"], ["", "def", "_do_training_repeats", "(", "self", ",", "timestep", ")", ":", "\n", "        ", "\"\"\"Repeat training _n_train_repeat times every _train_every_n_steps\"\"\"", "\n", "if", "timestep", "%", "self", ".", "_train_every_n_steps", ">", "0", ":", "return", "\n", "trained_enough", "=", "(", "\n", "self", ".", "_train_steps_this_epoch", "\n", ">", "self", ".", "_max_train_repeat_per_timestep", "*", "self", ".", "_timestep", ")", "\n", "if", "trained_enough", ":", "return", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "_n_train_repeat", ")", ":", "\n", "            ", "self", ".", "_do_training", "(", "\n", "iteration", "=", "timestep", ",", "\n", "batch", "=", "self", ".", "_training_batch", "(", ")", ")", "\n", "\n", "", "self", ".", "_num_train_steps", "+=", "self", ".", "_n_train_repeat", "\n", "self", ".", "_train_steps_this_epoch", "+=", "self", ".", "_n_train_repeat", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.algorithms.rl_algorithm.RLAlgorithm._do_training": [[339, 342], ["None"], "methods", ["None"], ["", "@", "abc", ".", "abstractmethod", "\n", "def", "_do_training", "(", "self", ",", "iteration", ",", "batch", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.algorithms.rl_algorithm.RLAlgorithm._init_training": [[343, 346], ["None"], "methods", ["None"], ["", "@", "abc", ".", "abstractmethod", "\n", "def", "_init_training", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.algorithms.rl_algorithm.RLAlgorithm.tf_saveables": [[347, 350], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "tf_saveables", "(", "self", ")", ":", "\n", "        ", "return", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.algorithms.rl_algorithm.RLAlgorithm.__getstate__": [[351, 361], ["int"], "methods", ["None"], ["", "def", "__getstate__", "(", "self", ")", ":", "\n", "        ", "state", "=", "{", "\n", "'_epoch_length'", ":", "self", ".", "_epoch_length", ",", "\n", "'_epoch'", ":", "(", "\n", "self", ".", "_epoch", "+", "int", "(", "self", ".", "_timestep", ">=", "self", ".", "_epoch_length", ")", ")", ",", "\n", "'_timestep'", ":", "self", ".", "_timestep", "%", "self", ".", "_epoch_length", ",", "\n", "'_num_train_steps'", ":", "self", ".", "_num_train_steps", ",", "\n", "}", "\n", "\n", "return", "state", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.algorithms.rl_algorithm.RLAlgorithm.__setstate__": [[362, 364], ["rl_algorithm.RLAlgorithm.__dict__.update"], "methods", ["home.repos.pwc.inspect_result.YaoYao1995_MEEE.utils.logging.Progress.update"], ["", "def", "__setstate__", "(", "self", ",", "state", ")", ":", "\n", "        ", "self", ".", "__dict__", ".", "update", "(", "state", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.algorithms.utils.create_SAC_algorithm": [[4, 10], ["SAC"], "function", ["None"], ["import", "json", "\n", "\n", "from", "ray", ".", "tune", "import", "sample_from", "\n", "\n", "import", "softlearning", ".", "algorithms", ".", "utils", "as", "alg_utils", "\n", "import", "softlearning", ".", "environments", ".", "utils", "as", "env_utils", "\n", "from", "softlearning", ".", "misc", ".", "utils", "import", "datetimestamp", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.algorithms.utils.create_SQL_algorithm": [[12, 18], ["SQL"], "function", ["None"], ["\n", "DEFAULT_UNIVERSE", "=", "'gym'", "\n", "DEFAULT_DOMAIN", "=", "'HalfCheetah'", "\n", "DEFAULT_TASK", "=", "'v2'", "\n", "DEFAULT_ALGORITHM", "=", "'MEEE'", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.algorithms.utils.create_MVE_algorithm": [[19, 25], ["MVESAC"], "function", ["None"], ["TASKS_BY_DOMAIN_BY_UNIVERSE", "=", "{", "\n", "universe", ":", "{", "\n", "domain", ":", "tuple", "(", "tasks", ")", "\n", "for", "domain", ",", "tasks", "in", "domains", ".", "items", "(", ")", "\n", "}", "\n", "for", "universe", ",", "domains", "in", "env_utils", ".", "ENVIRONMENTS", ".", "items", "(", ")", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.algorithms.utils.create_MEEE_algorithm": [[33, 39], ["MEEE"], "function", ["None"], ["(", ")", ")", ")", "\n", "\n", "DOMAINS_BY_UNIVERSE", "=", "{", "\n", "universe", ":", "tuple", "(", "domains", ")", "\n", "for", "universe", ",", "domains", "in", "env_utils", ".", "ENVIRONMENTS", ".", "items", "(", ")", "\n", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.algorithms.utils.get_algorithm_from_variant": [[49, 59], ["copy.deepcopy"], "function", ["None"], ["(", "universe", "for", "universe", "in", "UNIVERSES", "if", "universe", "in", "env_name", ")", ",", "\n", "DEFAULT_UNIVERSE", ")", "\n", "return", "universe", "\n", "\n", "\n", "", "def", "parse_domain_task", "(", "env_name", ",", "universe", ")", ":", "\n", "    ", "env_name", "=", "env_name", ".", "replace", "(", "universe", ",", "''", ")", ".", "strip", "(", "'-'", ")", "\n", "domains", "=", "DOMAINS_BY_UNIVERSE", "[", "universe", "]", "\n", "domain", "=", "next", "(", "domain", "for", "domain", "in", "domains", "if", "domain", "in", "env_name", ")", "\n", "\n", "env_name", "=", "env_name", ".", "replace", "(", "domain", ",", "''", ")", ".", "strip", "(", "'-'", ")", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.algorithms.meee.MEEE.__init__": [[33, 150], ["softlearning.algorithms.rl_algorithm.RLAlgorithm.__init__", "numpy.prod", "numpy.prod", "meee.models.constructor.construct_model", "meee.models.fake_env.FakeEnv", "int", "os.getcwd", "meee.utils.writer.Writer", "tuple", "print", "meee.MEEE._build", "len", "len", "tensorflow.keras.models.clone_model", "numpy.prod"], "methods", ["home.repos.pwc.inspect_result.YaoYao1995_MEEE.env.humanoid.HumanoidTruncatedObsEnv.__init__", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.models.constructor.construct_model", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.algorithms.meee.MEEE._build"], ["def", "__init__", "(", "\n", "self", ",", "\n", "training_environment", ",", "\n", "evaluation_environment", ",", "\n", "policy", ",", "\n", "Qs", ",", "\n", "pool", ",", "\n", "static_fns", ",", "\n", "plotter", "=", "None", ",", "\n", "tf_summaries", "=", "False", ",", "\n", "\n", "lr", "=", "3e-4", ",", "\n", "reward_scale", "=", "1.0", ",", "\n", "target_entropy", "=", "'auto'", ",", "\n", "discount", "=", "0.99", ",", "\n", "tau", "=", "5e-3", ",", "\n", "target_update_interval", "=", "1", ",", "\n", "action_prior", "=", "'uniform'", ",", "\n", "reparameterize", "=", "False", ",", "\n", "store_extra_policy_info", "=", "False", ",", "\n", "\n", "deterministic", "=", "False", ",", "\n", "model_train_freq", "=", "250", ",", "\n", "num_networks", "=", "7", ",", "\n", "num_elites", "=", "5", ",", "\n", "model_retain_epochs", "=", "20", ",", "\n", "rollout_batch_size", "=", "100e3", ",", "\n", "real_ratio", "=", "0.1", ",", "\n", "rollout_schedule", "=", "[", "20", ",", "100", ",", "1", ",", "1", "]", ",", "\n", "hidden_dim", "=", "200", ",", "\n", "max_model_t", "=", "None", ",", "\n", "**", "kwargs", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            env (`SoftlearningEnv`): Environment used for training.\n            policy: A policy function approximator.\n            initial_exploration_policy: ('Policy'): A policy that we use\n                for initial exploration which is not trained by the algorithm.\n            Qs: Q-function approximators. The min of these\n                approximators will be used. Usage of at least two Q-functions\n                improves performance by reducing overestimation bias.\n            pool (`PoolBase`): Replay pool to add gathered samples to.\n            plotter (`QFPolicyPlotter`): Plotter instance to be used for\n                visualizing Q-function during training.\n            lr (`float`): Learning rate used for the function approximators.\n            discount (`float`): Discount factor for Q-function updates.\n            tau (`float`): Soft value function target update weight.\n            target_update_interval ('int'): Frequency at which target network\n                updates occur in iterations.\n            reparameterize ('bool'): If True, we use a gradient estimator for\n                the policy derived using the reparameterization trick. We use\n                a likelihood ratio based estimator otherwise.\n        \"\"\"", "\n", "\n", "super", "(", "MEEE", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n", "obs_dim", "=", "np", ".", "prod", "(", "training_environment", ".", "observation_space", ".", "shape", ")", "\n", "act_dim", "=", "np", ".", "prod", "(", "training_environment", ".", "action_space", ".", "shape", ")", "\n", "self", ".", "_model", "=", "construct_model", "(", "obs_dim", "=", "obs_dim", ",", "act_dim", "=", "act_dim", ",", "hidden_dim", "=", "hidden_dim", ",", "num_networks", "=", "num_networks", ",", "num_elites", "=", "num_elites", ")", "\n", "self", ".", "_static_fns", "=", "static_fns", "\n", "self", ".", "fake_env", "=", "FakeEnv", "(", "self", ".", "_model", ",", "self", ".", "_static_fns", ")", "\n", "\n", "self", ".", "_rollout_schedule", "=", "rollout_schedule", "\n", "self", ".", "_max_model_t", "=", "max_model_t", "\n", "self", ".", "_temp", "=", "20", "\n", "self", ".", "_ucb_explore", "=", "False", "\n", "self", ".", "_weighted_use", "=", "True", "\n", "\n", "self", ".", "_model_retain_epochs", "=", "model_retain_epochs", "\n", "\n", "self", ".", "_model_train_freq", "=", "model_train_freq", "\n", "self", ".", "_rollout_batch_size", "=", "int", "(", "rollout_batch_size", ")", "\n", "self", ".", "_deterministic", "=", "deterministic", "\n", "self", ".", "_real_ratio", "=", "real_ratio", "\n", "\n", "self", ".", "_log_dir", "=", "os", ".", "getcwd", "(", ")", "\n", "self", ".", "_writer", "=", "Writer", "(", "self", ".", "_log_dir", ")", "\n", "\n", "self", ".", "_training_environment", "=", "training_environment", "\n", "self", ".", "_evaluation_environment", "=", "evaluation_environment", "\n", "self", ".", "_policy", "=", "policy", "\n", "\n", "self", ".", "_Qs", "=", "Qs", "\n", "self", ".", "_Q_targets", "=", "tuple", "(", "tf", ".", "keras", ".", "models", ".", "clone_model", "(", "Q", ")", "for", "Q", "in", "Qs", ")", "\n", "\n", "self", ".", "_pool", "=", "pool", "\n", "self", ".", "_plotter", "=", "plotter", "\n", "self", ".", "_tf_summaries", "=", "tf_summaries", "\n", "\n", "self", ".", "_policy_lr", "=", "lr", "\n", "self", ".", "_Q_lr", "=", "lr", "\n", "\n", "self", ".", "_reward_scale", "=", "reward_scale", "\n", "self", ".", "_target_entropy", "=", "(", "\n", "-", "np", ".", "prod", "(", "self", ".", "_training_environment", ".", "action_space", ".", "shape", ")", "\n", "if", "target_entropy", "==", "'auto'", "\n", "else", "target_entropy", ")", "\n", "print", "(", "'[ MEEE ] Target entropy: {}'", ".", "format", "(", "self", ".", "_target_entropy", ")", ")", "\n", "\n", "self", ".", "_discount", "=", "discount", "\n", "self", ".", "_tau", "=", "tau", "\n", "self", ".", "_target_update_interval", "=", "target_update_interval", "\n", "self", ".", "_action_prior", "=", "action_prior", "\n", "\n", "self", ".", "_reparameterize", "=", "reparameterize", "\n", "self", ".", "_store_extra_policy_info", "=", "store_extra_policy_info", "\n", "\n", "observation_shape", "=", "self", ".", "_training_environment", ".", "active_observation_shape", "\n", "action_shape", "=", "self", ".", "_training_environment", ".", "action_space", ".", "shape", "\n", "\n", "assert", "len", "(", "observation_shape", ")", "==", "1", ",", "observation_shape", "\n", "self", ".", "_observation_shape", "=", "observation_shape", "\n", "assert", "len", "(", "action_shape", ")", "==", "1", ",", "action_shape", "\n", "self", ".", "_action_shape", "=", "action_shape", "\n", "\n", "self", ".", "_build", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.algorithms.meee.MEEE._build": [[151, 158], ["meee.MEEE._init_global_step", "meee.MEEE._init_placeholders", "meee.MEEE._init_actor_update", "meee.MEEE._init_critic_update"], "methods", ["home.repos.pwc.inspect_result.YaoYao1995_MEEE.algorithms.meee.MEEE._init_global_step", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.algorithms.meee.MEEE._init_placeholders", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.algorithms.meee.MEEE._init_actor_update", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.algorithms.meee.MEEE._init_critic_update"], ["", "def", "_build", "(", "self", ")", ":", "\n", "        ", "self", ".", "_training_ops", "=", "{", "}", "\n", "\n", "self", ".", "_init_global_step", "(", ")", "\n", "self", ".", "_init_placeholders", "(", ")", "\n", "self", ".", "_init_actor_update", "(", ")", "\n", "self", ".", "_init_critic_update", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.algorithms.meee.MEEE._train": [[159, 313], ["meee.MEEE.sampler.initialize", "gtimer.reset_root", "gtimer.rename_root", "gtimer.set_def_unique", "meee.MEEE._training_before_hook", "gtimer.timed_for", "meee.MEEE.sampler.terminate", "meee.MEEE._training_after_hook", "meee.MEEE._training_progress.close", "meee.MEEE._init_training", "meee.MEEE._initial_exploration_hook", "range", "meee.MEEE._epoch_before_hook", "gtimer.stamp", "meee.utils.logging.Progress", "itertools.count", "meee.MEEE.sampler.get_last_n_paths", "gtimer.stamp", "meee.MEEE._evaluation_paths", "gtimer.stamp", "meee.MEEE._evaluate_rollouts", "gtimer.stamp", "meee.MEEE._epoch_after_hook", "gtimer.stamp", "meee.MEEE.sampler.get_diagnostics", "meee.MEEE.get_diagnostics", "meee.MEEE.update", "meee.MEEE._timestep_before_hook", "gtimer.stamp", "gtimer.stamp", "gtimer.stamp", "meee.MEEE._timestep_after_hook", "gtimer.stamp", "math.ceil", "meee.MEEE._evaluate_rollouts", "gtimer.stamp", "collections.OrderedDict", "hasattr", "training_environment.render_rollouts", "meee.MEEE._training_progress.pause", "print", "print", "meee.MEEE._train_model", "model_metrics.update", "gtimer.stamp", "meee.MEEE._set_rollout_length", "meee.MEEE._reallocate_model_pool", "meee.MEEE._rollout_model", "model_metrics.update", "gtimer.stamp", "meee.MEEE._training_progress.resume", "meee.MEEE._do_sampling", "meee.MEEE._do_sampling", "meee.MEEE._do_training_repeats", "meee.MEEE._evaluation_batch", "gtimer.get_times", "sorted", "sorted", "sorted", "sorted", "sorted", "meee.MEEE.keys", "meee.MEEE.keys", "time_diagnostics.keys", "meee.MEEE.keys", "model_metrics.keys"], "methods", ["home.repos.pwc.inspect_result.YaoYao1995_MEEE.samplers.remote_sampler.RemoteSampler.initialize", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.algorithms.rl_algorithm.RLAlgorithm._training_before_hook", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.samplers.base_sampler.BaseSampler.terminate", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.algorithms.rl_algorithm.RLAlgorithm._training_after_hook", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.adapters.softlearning_env.SoftlearningEnv.close", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.algorithms.meee.MEEE._init_training", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.algorithms.rl_algorithm.RLAlgorithm._initial_exploration_hook", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.algorithms.rl_algorithm.RLAlgorithm._epoch_before_hook", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.utils.logging.Progress.stamp", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.samplers.base_sampler.BaseSampler.get_last_n_paths", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.utils.logging.Progress.stamp", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.algorithms.rl_algorithm.RLAlgorithm._evaluation_paths", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.utils.logging.Progress.stamp", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.algorithms.rl_algorithm.RLAlgorithm._evaluate_rollouts", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.utils.logging.Progress.stamp", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.algorithms.rl_algorithm.RLAlgorithm._epoch_after_hook", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.utils.logging.Progress.stamp", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.samplers.explore_sampler.ExploreSampler.get_diagnostics", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.samplers.explore_sampler.ExploreSampler.get_diagnostics", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.utils.logging.Progress.update", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.algorithms.rl_algorithm.RLAlgorithm._timestep_before_hook", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.utils.logging.Progress.stamp", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.utils.logging.Progress.stamp", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.utils.logging.Progress.stamp", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.algorithms.rl_algorithm.RLAlgorithm._timestep_after_hook", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.utils.logging.Progress.stamp", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.algorithms.rl_algorithm.RLAlgorithm._evaluate_rollouts", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.utils.logging.Progress.stamp", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.adapters.softlearning_env.SoftlearningEnv.render_rollouts", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.utils.logging.Progress.pause", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.algorithms.meee.MEEE._train_model", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.utils.logging.Progress.update", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.utils.logging.Progress.stamp", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.algorithms.meee.MEEE._set_rollout_length", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.algorithms.meee.MEEE._reallocate_model_pool", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.algorithms.meee.MEEE._rollout_model", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.utils.logging.Progress.update", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.utils.logging.Progress.stamp", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.utils.logging.Progress.resume", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.algorithms.rl_algorithm.RLAlgorithm._do_sampling", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.algorithms.rl_algorithm.RLAlgorithm._do_sampling", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.algorithms.rl_algorithm.RLAlgorithm._do_training_repeats", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.algorithms.rl_algorithm.RLAlgorithm._evaluation_batch"], ["", "def", "_train", "(", "self", ")", ":", "\n", "\n", "        ", "\"\"\"Return a generator that performs RL training.\n\n        Args:\n            env (`SoftlearningEnv`): Environment used for training.\n            policy (`Policy`): Policy used for training\n            initial_exploration_policy ('Policy'): Policy used for exploration\n                If None, then all exploration is done using policy\n            pool (`PoolBase`): Sample pool to add samples to\n        \"\"\"", "\n", "training_environment", "=", "self", ".", "_training_environment", "\n", "evaluation_environment", "=", "self", ".", "_evaluation_environment", "\n", "policy", "=", "self", ".", "_policy", "\n", "pool", "=", "self", ".", "_pool", "\n", "model_metrics", "=", "{", "}", "\n", "\n", "if", "not", "self", ".", "_training_started", ":", "\n", "            ", "self", ".", "_init_training", "(", ")", "\n", "\n", "self", ".", "_initial_exploration_hook", "(", "\n", "training_environment", ",", "self", ".", "_initial_exploration_policy", ",", "pool", ")", "\n", "\n", "", "self", ".", "sampler", ".", "initialize", "(", "training_environment", ",", "policy", ",", "pool", ")", "\n", "\n", "gt", ".", "reset_root", "(", ")", "\n", "gt", ".", "rename_root", "(", "'RLAlgorithm'", ")", "\n", "gt", ".", "set_def_unique", "(", "False", ")", "\n", "\n", "self", ".", "_training_before_hook", "(", ")", "\n", "\n", "for", "self", ".", "_epoch", "in", "gt", ".", "timed_for", "(", "range", "(", "self", ".", "_epoch", ",", "self", ".", "_n_epochs", ")", ")", ":", "\n", "\n", "            ", "self", ".", "_epoch_before_hook", "(", ")", "\n", "gt", ".", "stamp", "(", "'epoch_before_hook'", ")", "\n", "\n", "self", ".", "_training_progress", "=", "Progress", "(", "self", ".", "_epoch_length", "*", "self", ".", "_n_train_repeat", ")", "\n", "start_samples", "=", "self", ".", "sampler", ".", "_total_samples", "\n", "for", "i", "in", "count", "(", ")", ":", "\n", "                ", "samples_now", "=", "self", ".", "sampler", ".", "_total_samples", "\n", "self", ".", "_timestep", "=", "samples_now", "-", "start_samples", "\n", "\n", "if", "(", "samples_now", ">=", "start_samples", "+", "self", ".", "_epoch_length", "\n", "and", "self", ".", "ready_to_train", ")", ":", "\n", "                    ", "break", "\n", "\n", "", "self", ".", "_timestep_before_hook", "(", ")", "\n", "gt", ".", "stamp", "(", "'timestep_before_hook'", ")", "\n", "\n", "if", "self", ".", "_timestep", "%", "self", ".", "_model_train_freq", "==", "0", "and", "self", ".", "_real_ratio", "<", "1.0", ":", "\n", "                    ", "self", ".", "_training_progress", ".", "pause", "(", ")", "\n", "print", "(", "'[ MEEE ] log_dir: {} | ratio: {}'", ".", "format", "(", "self", ".", "_log_dir", ",", "self", ".", "_real_ratio", ")", ")", "\n", "print", "(", "'[ MEEE ] Training model at epoch {} | freq {} | timestep {} (total: {}) | epoch train steps: {} (total: {})'", ".", "format", "(", "\n", "self", ".", "_epoch", ",", "self", ".", "_model_train_freq", ",", "self", ".", "_timestep", ",", "self", ".", "_total_timestep", ",", "self", ".", "_train_steps_this_epoch", ",", "self", ".", "_num_train_steps", ")", "\n", ")", "\n", "\n", "model_train_metrics", "=", "self", ".", "_train_model", "(", "batch_size", "=", "256", ",", "max_epochs", "=", "None", ",", "holdout_ratio", "=", "0.2", ",", "max_t", "=", "self", ".", "_max_model_t", ")", "\n", "model_metrics", ".", "update", "(", "model_train_metrics", ")", "\n", "gt", ".", "stamp", "(", "'epoch_train_model'", ")", "\n", "\n", "self", ".", "_set_rollout_length", "(", ")", "\n", "self", ".", "_reallocate_model_pool", "(", ")", "\n", "model_rollout_metrics", "=", "self", ".", "_rollout_model", "(", "rollout_batch_size", "=", "self", ".", "_rollout_batch_size", ",", "deterministic", "=", "self", ".", "_deterministic", ")", "\n", "model_metrics", ".", "update", "(", "model_rollout_metrics", ")", "\n", "\n", "\n", "gt", ".", "stamp", "(", "'epoch_rollout_model'", ")", "\n", "# self._visualize_model(self._evaluation_environment, self._total_timestep)", "\n", "self", ".", "_training_progress", ".", "resume", "(", ")", "\n", "\n", "# When UCB exploration ", "\n", "", "if", "self", ".", "_ucb_explore", ":", "\n", "                    ", "self", ".", "_do_sampling", "(", "timestep", "=", "self", ".", "_total_timestep", ",", "disturb", "=", "True", ",", "fake_env", "=", "self", ".", "fake_env", ",", "Qs", "=", "self", ".", "_Qs", ")", "\n", "", "else", ":", "\n", "                    ", "self", ".", "_do_sampling", "(", "timestep", "=", "self", ".", "_total_timestep", ")", "\n", "", "gt", ".", "stamp", "(", "'sample'", ")", "\n", "\n", "if", "self", ".", "ready_to_train", ":", "\n", "                    ", "self", ".", "_do_training_repeats", "(", "timestep", "=", "self", ".", "_total_timestep", ")", "\n", "", "gt", ".", "stamp", "(", "'train'", ")", "\n", "\n", "self", ".", "_timestep_after_hook", "(", ")", "\n", "gt", ".", "stamp", "(", "'timestep_after_hook'", ")", "\n", "\n", "", "training_paths", "=", "self", ".", "sampler", ".", "get_last_n_paths", "(", "\n", "math", ".", "ceil", "(", "self", ".", "_epoch_length", "/", "self", ".", "sampler", ".", "_max_path_length", ")", ")", "\n", "gt", ".", "stamp", "(", "'training_paths'", ")", "\n", "evaluation_paths", "=", "self", ".", "_evaluation_paths", "(", "\n", "policy", ",", "evaluation_environment", ")", "\n", "gt", ".", "stamp", "(", "'evaluation_paths'", ")", "\n", "\n", "training_metrics", "=", "self", ".", "_evaluate_rollouts", "(", "\n", "training_paths", ",", "training_environment", ")", "\n", "gt", ".", "stamp", "(", "'training_metrics'", ")", "\n", "if", "evaluation_paths", ":", "\n", "                ", "evaluation_metrics", "=", "self", ".", "_evaluate_rollouts", "(", "\n", "evaluation_paths", ",", "evaluation_environment", ")", "\n", "gt", ".", "stamp", "(", "'evaluation_metrics'", ")", "\n", "", "else", ":", "\n", "                ", "evaluation_metrics", "=", "{", "}", "\n", "\n", "", "self", ".", "_epoch_after_hook", "(", "training_paths", ")", "\n", "gt", ".", "stamp", "(", "'epoch_after_hook'", ")", "\n", "\n", "sampler_diagnostics", "=", "self", ".", "sampler", ".", "get_diagnostics", "(", ")", "\n", "\n", "diagnostics", "=", "self", ".", "get_diagnostics", "(", "\n", "iteration", "=", "self", ".", "_total_timestep", ",", "\n", "batch", "=", "self", ".", "_evaluation_batch", "(", ")", ",", "\n", "training_paths", "=", "training_paths", ",", "\n", "evaluation_paths", "=", "evaluation_paths", ")", "\n", "\n", "time_diagnostics", "=", "gt", ".", "get_times", "(", ")", ".", "stamps", ".", "itrs", "\n", "\n", "diagnostics", ".", "update", "(", "OrderedDict", "(", "(", "\n", "*", "(", "\n", "(", "f'evaluation/{key}'", ",", "evaluation_metrics", "[", "key", "]", ")", "\n", "for", "key", "in", "sorted", "(", "evaluation_metrics", ".", "keys", "(", ")", ")", "\n", ")", ",", "\n", "*", "(", "\n", "(", "f'training/{key}'", ",", "training_metrics", "[", "key", "]", ")", "\n", "for", "key", "in", "sorted", "(", "training_metrics", ".", "keys", "(", ")", ")", "\n", ")", ",", "\n", "*", "(", "\n", "(", "f'times/{key}'", ",", "time_diagnostics", "[", "key", "]", "[", "-", "1", "]", ")", "\n", "for", "key", "in", "sorted", "(", "time_diagnostics", ".", "keys", "(", ")", ")", "\n", ")", ",", "\n", "*", "(", "\n", "(", "f'sampler/{key}'", ",", "sampler_diagnostics", "[", "key", "]", ")", "\n", "for", "key", "in", "sorted", "(", "sampler_diagnostics", ".", "keys", "(", ")", ")", "\n", ")", ",", "\n", "*", "(", "\n", "(", "f'model/{key}'", ",", "model_metrics", "[", "key", "]", ")", "\n", "for", "key", "in", "sorted", "(", "model_metrics", ".", "keys", "(", ")", ")", "\n", ")", ",", "\n", "(", "'epoch'", ",", "self", ".", "_epoch", ")", ",", "\n", "(", "'timestep'", ",", "self", ".", "_timestep", ")", ",", "\n", "(", "'timesteps_total'", ",", "self", ".", "_total_timestep", ")", ",", "\n", "(", "'train-steps'", ",", "self", ".", "_num_train_steps", ")", ",", "\n", ")", ")", ")", "\n", "\n", "if", "self", ".", "_eval_render_mode", "is", "not", "None", "and", "hasattr", "(", "\n", "evaluation_environment", ",", "'render_rollouts'", ")", ":", "\n", "                ", "training_environment", ".", "render_rollouts", "(", "evaluation_paths", ")", "\n", "\n", "", "yield", "diagnostics", "\n", "\n", "", "self", ".", "sampler", ".", "terminate", "(", ")", "\n", "\n", "self", ".", "_training_after_hook", "(", ")", "\n", "\n", "self", ".", "_training_progress", ".", "close", "(", ")", "\n", "\n", "yield", "{", "'done'", ":", "True", ",", "**", "diagnostics", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.algorithms.meee.MEEE.train": [[314, 316], ["meee.MEEE._train"], "methods", ["home.repos.pwc.inspect_result.YaoYao1995_MEEE.algorithms.meee.MEEE._train"], ["", "def", "train", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "self", ".", "_train", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.algorithms.meee.MEEE._log_policy": [[317, 325], ["os.path.join", "meee.mkdir", "meee.MEEE._policy.get_weights", "os.path.join", "print", "pickle.dump", "open"], "methods", ["home.repos.pwc.inspect_result.YaoYao1995_MEEE.utils.filesystem.mkdir", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.policies.gaussian_policy.GaussianPolicy.get_weights"], ["", "def", "_log_policy", "(", "self", ")", ":", "\n", "        ", "save_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "_log_dir", ",", "'models'", ")", "\n", "filesystem", ".", "mkdir", "(", "save_path", ")", "\n", "weights", "=", "self", ".", "_policy", ".", "get_weights", "(", ")", "\n", "data", "=", "{", "'policy_weights'", ":", "weights", "}", "\n", "full_path", "=", "os", ".", "path", ".", "join", "(", "save_path", ",", "'policy_{}.pkl'", ".", "format", "(", "self", ".", "_total_timestep", ")", ")", "\n", "print", "(", "'Saving policy to: {}'", ".", "format", "(", "full_path", ")", ")", "\n", "pickle", ".", "dump", "(", "data", ",", "open", "(", "full_path", ",", "'wb'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.algorithms.meee.MEEE._log_model": [[326, 331], ["os.path.join", "meee.mkdir", "print", "meee.MEEE._model.save"], "methods", ["home.repos.pwc.inspect_result.YaoYao1995_MEEE.utils.filesystem.mkdir", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.models.bnn.BNN.save"], ["", "def", "_log_model", "(", "self", ")", ":", "\n", "        ", "save_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "_log_dir", ",", "'models'", ")", "\n", "filesystem", ".", "mkdir", "(", "save_path", ")", "\n", "print", "(", "'Saving model to: {}'", ".", "format", "(", "save_path", ")", ")", "\n", "self", ".", "_model", ".", "save", "(", "save_path", ",", "self", ".", "_total_timestep", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.algorithms.meee.MEEE._set_rollout_length": [[332, 344], ["int", "print", "min"], "methods", ["None"], ["", "def", "_set_rollout_length", "(", "self", ")", ":", "\n", "        ", "min_epoch", ",", "max_epoch", ",", "min_length", ",", "max_length", "=", "self", ".", "_rollout_schedule", "\n", "if", "self", ".", "_epoch", "<=", "min_epoch", ":", "\n", "            ", "y", "=", "min_length", "\n", "", "else", ":", "\n", "            ", "dx", "=", "(", "self", ".", "_epoch", "-", "min_epoch", ")", "/", "(", "max_epoch", "-", "min_epoch", ")", "\n", "dx", "=", "min", "(", "dx", ",", "1", ")", "\n", "y", "=", "dx", "*", "(", "max_length", "-", "min_length", ")", "+", "min_length", "\n", "\n", "", "self", ".", "_rollout_length", "=", "int", "(", "y", ")", "\n", "print", "(", "'[ Model Length ] Epoch: {} (min: {}, max: {}) | Length: {} (min: {} , max: {})'", ".", "format", "(", "\n", "self", ".", "_epoch", ",", "min_epoch", ",", "max_epoch", ",", "self", ".", "_rollout_length", ",", "min_length", ",", "max_length", "\n", ")", ")", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.algorithms.meee.MEEE._reallocate_model_pool": [[346, 369], ["int", "hasattr", "print", "softlearning.replay_pools.simple_replay_pool.WeightedReplayPool", "print", "meee.MEEE._model_pool.return_all_samples", "softlearning.replay_pools.simple_replay_pool.WeightedReplayPool", "softlearning.replay_pools.simple_replay_pool.WeightedReplayPool.add_samples"], "methods", ["home.repos.pwc.inspect_result.YaoYao1995_MEEE.replay_pools.flexible_replay_pool.FlexibleReplayPool.return_all_samples", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.replay_pools.trajectory_replay_pool.TrajectoryReplayPool.add_samples"], ["", "def", "_reallocate_model_pool", "(", "self", ")", ":", "\n", "        ", "obs_space", "=", "self", ".", "_pool", ".", "_observation_space", "\n", "act_space", "=", "self", ".", "_pool", ".", "_action_space", "\n", "\n", "rollouts_per_epoch", "=", "self", ".", "_rollout_batch_size", "*", "self", ".", "_epoch_length", "/", "self", ".", "_model_train_freq", "\n", "model_steps_per_epoch", "=", "int", "(", "self", ".", "_rollout_length", "*", "rollouts_per_epoch", ")", "\n", "new_pool_size", "=", "self", ".", "_model_retain_epochs", "*", "model_steps_per_epoch", "\n", "\n", "if", "not", "hasattr", "(", "self", ",", "'_model_pool'", ")", ":", "\n", "            ", "print", "(", "'[ MEEE ] Initializing new model pool with size {:.2e}'", ".", "format", "(", "\n", "new_pool_size", "\n", ")", ")", "\n", "self", ".", "_model_pool", "=", "WeightedReplayPool", "(", "obs_space", ",", "act_space", ",", "new_pool_size", ")", "\n", "\n", "", "elif", "self", ".", "_model_pool", ".", "_max_size", "!=", "new_pool_size", ":", "\n", "            ", "print", "(", "'[ MEEE ] Updating model pool | {:.2e} --> {:.2e}'", ".", "format", "(", "\n", "self", ".", "_model_pool", ".", "_max_size", ",", "new_pool_size", "\n", ")", ")", "\n", "samples", "=", "self", ".", "_model_pool", ".", "return_all_samples", "(", ")", "\n", "new_pool", "=", "WeightedReplayPool", "(", "obs_space", ",", "act_space", ",", "new_pool_size", ")", "\n", "new_pool", ".", "add_samples", "(", "samples", ")", "\n", "assert", "self", ".", "_model_pool", ".", "size", "==", "new_pool", ".", "size", "\n", "self", ".", "_model_pool", "=", "new_pool", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.algorithms.meee.MEEE._train_model": [[370, 375], ["meee.MEEE._pool.return_all_samples", "meee.models.constructor.format_samples_for_training", "meee.MEEE._model.train"], "methods", ["home.repos.pwc.inspect_result.YaoYao1995_MEEE.replay_pools.flexible_replay_pool.FlexibleReplayPool.return_all_samples", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.models.constructor.format_samples_for_training", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.models.bnn.BNN.train"], ["", "", "def", "_train_model", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "env_samples", "=", "self", ".", "_pool", ".", "return_all_samples", "(", ")", "\n", "train_inputs", ",", "train_outputs", "=", "format_samples_for_training", "(", "env_samples", ")", "\n", "model_metrics", "=", "self", ".", "_model", ".", "train", "(", "train_inputs", ",", "train_outputs", ",", "**", "kwargs", ")", "\n", "return", "model_metrics", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.algorithms.meee.MEEE._rollout_model": [[376, 405], ["print", "meee.MEEE.sampler.random_batch", "range", "print", "meee.MEEE._policy.actions_np", "meee.MEEE.fake_env.step", "steps_added.append", "meee.MEEE._model_pool.add_samples", "sum", "len", "term.squeeze", "nonterm_mask.sum", "print", "sum", "nonterm_mask.sum"], "methods", ["home.repos.pwc.inspect_result.YaoYao1995_MEEE.samplers.explore_sampler.ExploreSampler.random_batch", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.policies.gaussian_policy.GaussianPolicy.actions_np", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.env.humanoid.HumanoidTruncatedObsEnv.step", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.replay_pools.trajectory_replay_pool.TrajectoryReplayPool.add_samples"], ["", "def", "_rollout_model", "(", "self", ",", "rollout_batch_size", ",", "**", "kwargs", ")", ":", "\n", "        ", "print", "(", "'[ Model Rollout ] Starting | Epoch: {} | Rollout length: {} | Batch size: {}'", ".", "format", "(", "\n", "self", ".", "_epoch", ",", "self", ".", "_rollout_length", ",", "rollout_batch_size", "\n", ")", ")", "\n", "batch", "=", "self", ".", "sampler", ".", "random_batch", "(", "rollout_batch_size", ")", "\n", "obs", "=", "batch", "[", "'observations'", "]", "\n", "steps_added", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "_rollout_length", ")", ":", "\n", "            ", "act", "=", "self", ".", "_policy", ".", "actions_np", "(", "obs", ")", "\n", "\n", "next_obs", ",", "rew", ",", "term", ",", "info", "=", "self", ".", "fake_env", ".", "step", "(", "obs", ",", "act", ",", "**", "kwargs", ")", "\n", "steps_added", ".", "append", "(", "len", "(", "obs", ")", ")", "\n", "\n", "samples", "=", "{", "'observations'", ":", "obs", ",", "'actions'", ":", "act", ",", "'next_observations'", ":", "next_obs", ",", "'rewards'", ":", "rew", ",", "'terminals'", ":", "term", ",", "'stds'", ":", "info", "[", "'dev'", "]", "[", ":", ",", "None", "]", "}", "\n", "self", ".", "_model_pool", ".", "add_samples", "(", "samples", ")", "\n", "\n", "nonterm_mask", "=", "~", "term", ".", "squeeze", "(", "-", "1", ")", "\n", "if", "nonterm_mask", ".", "sum", "(", ")", "==", "0", ":", "\n", "                ", "print", "(", "'[ Model Rollout ] Breaking early: {} | {} / {}'", ".", "format", "(", "i", ",", "nonterm_mask", ".", "sum", "(", ")", ",", "nonterm_mask", ".", "shape", ")", ")", "\n", "break", "\n", "\n", "", "obs", "=", "next_obs", "[", "nonterm_mask", "]", "\n", "\n", "", "mean_rollout_length", "=", "sum", "(", "steps_added", ")", "/", "rollout_batch_size", "\n", "rollout_stats", "=", "{", "'mean_rollout_length'", ":", "mean_rollout_length", "}", "\n", "print", "(", "'[ Model Rollout ] Added: {:.1e} | Model pool: {:.1e} (max {:.1e}) | Length: {} | Train rep: {}'", ".", "format", "(", "\n", "sum", "(", "steps_added", ")", ",", "self", ".", "_model_pool", ".", "size", ",", "self", ".", "_model_pool", ".", "_max_size", ",", "mean_rollout_length", ",", "self", ".", "_n_train_repeat", "\n", ")", ")", "\n", "return", "rollout_stats", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.algorithms.meee.MEEE._visualize_model": [[406, 418], ["env.unwrapped.state_vector", "len", "print", "meee.utils.visualization.visualize_policy", "print", "env.unwrapped.set_state"], "methods", ["home.repos.pwc.inspect_result.YaoYao1995_MEEE.utils.visualization.visualize_policy"], ["", "def", "_visualize_model", "(", "self", ",", "env", ",", "timestep", ")", ":", "\n", "## save env state", "\n", "        ", "state", "=", "env", ".", "unwrapped", ".", "state_vector", "(", ")", "\n", "qpos_dim", "=", "len", "(", "env", ".", "unwrapped", ".", "sim", ".", "data", ".", "qpos", ")", "\n", "qpos", "=", "state", "[", ":", "qpos_dim", "]", "\n", "qvel", "=", "state", "[", "qpos_dim", ":", "]", "\n", "\n", "print", "(", "'[ Visualization ] Starting | Epoch {} | Log dir: {}\\n'", ".", "format", "(", "self", ".", "_epoch", ",", "self", ".", "_log_dir", ")", ")", "\n", "visualize_policy", "(", "env", ",", "self", ".", "fake_env", ",", "self", ".", "_policy", ",", "self", ".", "_writer", ",", "timestep", ")", "\n", "print", "(", "'[ Visualization ] Done'", ")", "\n", "## set env state", "\n", "env", ".", "unwrapped", ".", "set_state", "(", "qpos", ",", "qvel", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.algorithms.meee.MEEE._training_batch": [[419, 437], ["int", "meee.MEEE._pool.random_batch", "meee.MEEE._model_pool.random_batch", "meee.MEEE.keys", "numpy.concatenate"], "methods", ["home.repos.pwc.inspect_result.YaoYao1995_MEEE.samplers.explore_sampler.ExploreSampler.random_batch", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.samplers.explore_sampler.ExploreSampler.random_batch"], ["", "def", "_training_batch", "(", "self", ",", "batch_size", "=", "None", ")", ":", "\n", "        ", "batch_size", "=", "batch_size", "or", "self", ".", "sampler", ".", "_batch_size", "\n", "env_batch_size", "=", "int", "(", "batch_size", "*", "self", ".", "_real_ratio", ")", "\n", "model_batch_size", "=", "batch_size", "-", "env_batch_size", "\n", "\n", "## can sample from the env pool even if env_batch_size == 0", "\n", "env_batch", "=", "self", ".", "_pool", ".", "random_batch", "(", "env_batch_size", ")", "\n", "\n", "if", "model_batch_size", ">", "0", ":", "\n", "            ", "model_batch", "=", "self", ".", "_model_pool", ".", "random_batch", "(", "model_batch_size", ")", "\n", "\n", "keys", "=", "env_batch", ".", "keys", "(", ")", "\n", "batch", "=", "{", "k", ":", "np", ".", "concatenate", "(", "(", "env_batch", "[", "k", "]", ",", "model_batch", "[", "k", "]", ")", ",", "axis", "=", "0", ")", "for", "k", "in", "keys", "}", "\n", "", "else", ":", "\n", "## if real_ratio == 1.0, no model pool was ever allocated,", "\n", "## so skip the model pool sampling", "\n", "            ", "batch", "=", "env_batch", "\n", "", "return", "batch", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.algorithms.meee.MEEE._init_global_step": [[438, 442], ["tensorflow.python.training.training_util.get_or_create_global_step", "meee.MEEE._training_ops.update", "tensorflow.python.training.training_util._increment_global_step"], "methods", ["home.repos.pwc.inspect_result.YaoYao1995_MEEE.utils.logging.Progress.update"], ["", "def", "_init_global_step", "(", "self", ")", ":", "\n", "        ", "self", ".", "global_step", "=", "training_util", ".", "get_or_create_global_step", "(", ")", "\n", "self", ".", "_training_ops", ".", "update", "(", "{", "\n", "'increment_global_step'", ":", "training_util", ".", "_increment_global_step", "(", "1", ")", "\n", "}", ")", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.algorithms.meee.MEEE._init_placeholders": [[444, 504], ["tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder"], "methods", ["None"], ["", "def", "_init_placeholders", "(", "self", ")", ":", "\n", "        ", "\"\"\"Create input placeholders for the SAC algorithm.\n\n        Creates `tf.placeholder`s for:\n            - observation\n            - next observation\n            - action\n            - reward\n            - terminals\n            - stds\n        \"\"\"", "\n", "self", ".", "_iteration_ph", "=", "tf", ".", "placeholder", "(", "\n", "tf", ".", "int64", ",", "shape", "=", "None", ",", "name", "=", "'iteration'", ")", "\n", "\n", "self", ".", "_observations_ph", "=", "tf", ".", "placeholder", "(", "\n", "tf", ".", "float32", ",", "\n", "shape", "=", "(", "None", ",", "*", "self", ".", "_observation_shape", ")", ",", "\n", "name", "=", "'observation'", ",", "\n", ")", "\n", "\n", "self", ".", "_next_observations_ph", "=", "tf", ".", "placeholder", "(", "\n", "tf", ".", "float32", ",", "\n", "shape", "=", "(", "None", ",", "*", "self", ".", "_observation_shape", ")", ",", "\n", "name", "=", "'next_observation'", ",", "\n", ")", "\n", "\n", "self", ".", "_actions_ph", "=", "tf", ".", "placeholder", "(", "\n", "tf", ".", "float32", ",", "\n", "shape", "=", "(", "None", ",", "*", "self", ".", "_action_shape", ")", ",", "\n", "name", "=", "'actions'", ",", "\n", ")", "\n", "\n", "self", ".", "_rewards_ph", "=", "tf", ".", "placeholder", "(", "\n", "tf", ".", "float32", ",", "\n", "shape", "=", "(", "None", ",", "1", ")", ",", "\n", "name", "=", "'rewards'", ",", "\n", ")", "\n", "\n", "self", ".", "_stds_ph", "=", "tf", ".", "placeholder", "(", "\n", "tf", ".", "float32", ",", "\n", "shape", "=", "(", "None", ",", "1", ")", ",", "\n", "name", "=", "'stds'", ",", "\n", ")", "\n", "\n", "self", ".", "_terminals_ph", "=", "tf", ".", "placeholder", "(", "\n", "tf", ".", "float32", ",", "\n", "shape", "=", "(", "None", ",", "1", ")", ",", "\n", "name", "=", "'terminals'", ",", "\n", ")", "\n", "\n", "if", "self", ".", "_store_extra_policy_info", ":", "\n", "            ", "self", ".", "_log_pis_ph", "=", "tf", ".", "placeholder", "(", "\n", "tf", ".", "float32", ",", "\n", "shape", "=", "(", "None", ",", "1", ")", ",", "\n", "name", "=", "'log_pis'", ",", "\n", ")", "\n", "self", ".", "_raw_actions_ph", "=", "tf", ".", "placeholder", "(", "\n", "tf", ".", "float32", ",", "\n", "shape", "=", "(", "None", ",", "*", "self", ".", "_action_shape", ")", ",", "\n", "name", "=", "'raw_actions'", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.algorithms.meee.MEEE._get_Q_target": [[506, 524], ["meee.MEEE._policy.actions", "meee.MEEE._policy.log_pis", "tuple", "tensorflow.reduce_min", "meee.td_target", "Q"], "methods", ["home.repos.pwc.inspect_result.YaoYao1995_MEEE.policies.gaussian_policy.GaussianPolicy.actions", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.policies.gaussian_policy.GaussianPolicy.log_pis", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.algorithms.meee.td_target"], ["", "", "def", "_get_Q_target", "(", "self", ")", ":", "\n", "        ", "next_actions", "=", "self", ".", "_policy", ".", "actions", "(", "[", "self", ".", "_next_observations_ph", "]", ")", "\n", "next_log_pis", "=", "self", ".", "_policy", ".", "log_pis", "(", "\n", "[", "self", ".", "_next_observations_ph", "]", ",", "next_actions", ")", "\n", "\n", "next_Qs_values", "=", "tuple", "(", "\n", "Q", "(", "[", "self", ".", "_next_observations_ph", ",", "next_actions", "]", ")", "\n", "for", "Q", "in", "self", ".", "_Q_targets", ")", "\n", "\n", "min_next_Q", "=", "tf", ".", "reduce_min", "(", "next_Qs_values", ",", "axis", "=", "0", ")", "\n", "next_value", "=", "min_next_Q", "-", "self", ".", "_alpha", "*", "next_log_pis", "\n", "\n", "Q_target", "=", "td_target", "(", "\n", "reward", "=", "self", ".", "_reward_scale", "*", "self", ".", "_rewards_ph", ",", "\n", "discount", "=", "self", ".", "_discount", ",", "\n", "next_value", "=", "(", "1", "-", "self", ".", "_terminals_ph", ")", "*", "next_value", ")", "\n", "\n", "return", "Q_target", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.algorithms.meee.MEEE._init_critic_update": [[525, 570], ["tensorflow.stop_gradient", "tensorflow.stop_gradient", "tuple", "tuple", "tuple", "tuple", "meee.MEEE._training_ops.update", "meee.MEEE._get_Q_target", "tensorflow.stop_gradient.shape.as_list", "tensorflow.sigmoid", "Q", "tensorflow.losses.mean_squared_error", "tensorflow.train.AdamOptimizer", "tensorflow.contrib.layers.optimize_loss", "tensorflow.group", "enumerate", "enumerate", "zip"], "methods", ["home.repos.pwc.inspect_result.YaoYao1995_MEEE.utils.logging.Progress.update", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.algorithms.meee.MEEE._get_Q_target"], ["", "def", "_init_critic_update", "(", "self", ")", ":", "\n", "        ", "\"\"\"Create minimization operation for critic Q-function.\n\n        Creates a `tf.optimizer.minimize` operation for updating\n        critic Q-function with gradient descent, and appends it to\n        `self._training_ops` attribute.\n        \"\"\"", "\n", "Q_target", "=", "tf", ".", "stop_gradient", "(", "self", ".", "_get_Q_target", "(", ")", ")", "\n", "\n", "assert", "Q_target", ".", "shape", ".", "as_list", "(", ")", "==", "[", "None", ",", "1", "]", "\n", "# weighted critic loss", "\n", "if", "self", ".", "_weighted_use", ":", "\n", "            ", "temperature_critic", "=", "self", ".", "_temp", "\n", "", "else", ":", "\n", "            ", "temperature_critic", "=", "0", "\n", "", "weight_target_Q", "=", "tf", ".", "stop_gradient", "(", "2", "*", "tf", ".", "sigmoid", "(", "-", "self", ".", "_stds_ph", "*", "temperature_critic", ")", ")", "\n", "Q_values", "=", "self", ".", "_Q_values", "=", "tuple", "(", "\n", "Q", "(", "[", "self", ".", "_observations_ph", ",", "self", ".", "_actions_ph", "]", ")", "\n", "for", "Q", "in", "self", ".", "_Qs", ")", "\n", "\n", "Q_losses", "=", "self", ".", "_Q_losses", "=", "tuple", "(", "\n", "tf", ".", "losses", ".", "mean_squared_error", "(", "\n", "labels", "=", "Q_target", ",", "predictions", "=", "Q_value", ",", "weights", "=", "weight_target_Q", ")", "\n", "for", "Q_value", "in", "Q_values", ")", "\n", "\n", "self", ".", "_Q_optimizers", "=", "tuple", "(", "\n", "tf", ".", "train", ".", "AdamOptimizer", "(", "\n", "learning_rate", "=", "self", ".", "_Q_lr", ",", "\n", "name", "=", "'{}_{}_optimizer'", ".", "format", "(", "Q", ".", "_name", ",", "i", ")", "\n", ")", "for", "i", ",", "Q", "in", "enumerate", "(", "self", ".", "_Qs", ")", ")", "\n", "Q_training_ops", "=", "tuple", "(", "\n", "tf", ".", "contrib", ".", "layers", ".", "optimize_loss", "(", "\n", "Q_loss", ",", "\n", "self", ".", "global_step", ",", "\n", "learning_rate", "=", "self", ".", "_Q_lr", ",", "\n", "optimizer", "=", "Q_optimizer", ",", "\n", "variables", "=", "Q", ".", "trainable_variables", ",", "\n", "increment_global_step", "=", "False", ",", "\n", "summaries", "=", "(", "(", "\n", "\"loss\"", ",", "\"gradients\"", ",", "\"gradient_norm\"", ",", "\"global_gradient_norm\"", "\n", ")", "if", "self", ".", "_tf_summaries", "else", "(", ")", ")", ")", "\n", "for", "i", ",", "(", "Q", ",", "Q_loss", ",", "Q_optimizer", ")", "\n", "in", "enumerate", "(", "zip", "(", "self", ".", "_Qs", ",", "Q_losses", ",", "self", ".", "_Q_optimizers", ")", ")", ")", "\n", "\n", "self", ".", "_training_ops", ".", "update", "(", "{", "'Q'", ":", "tf", ".", "group", "(", "Q_training_ops", ")", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.algorithms.meee.MEEE._init_actor_update": [[571, 652], ["meee.MEEE._policy.actions", "meee.MEEE._policy.log_pis", "tensorflow.get_variable", "tensorflow.exp", "isinstance", "tuple", "tensorflow.reduce_min", "tensorflow.stop_gradient", "tensorflow.reduce_mean", "tensorflow.train.AdamOptimizer", "tensorflow.contrib.layers.optimize_loss", "meee.MEEE._training_ops.update", "meee.MEEE.shape.as_list", "tensorflow.train.AdamOptimizer", "meee.MEEE._alpha_optimizer.minimize", "meee.MEEE._training_ops.update", "tensorflow.contrib.distributions.MultivariateNormalDiag", "tensorflow.contrib.distributions.MultivariateNormalDiag.log_prob", "policy_kl_losses.shape.as_list", "tensorflow.reduce_mean", "Q", "tensorflow.sigmoid", "tensorflow.zeros", "tensorflow.ones", "tensorflow.stop_gradient"], "methods", ["home.repos.pwc.inspect_result.YaoYao1995_MEEE.policies.gaussian_policy.GaussianPolicy.actions", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.policies.gaussian_policy.GaussianPolicy.log_pis", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.utils.logging.Progress.update", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.utils.logging.Progress.update"], ["", "def", "_init_actor_update", "(", "self", ")", ":", "\n", "        ", "\"\"\"Create minimization operations for policy and entropy.\n\n        Creates a `tf.optimizer.minimize` operations for updating\n        policy and entropy with gradient descent, and adds them to\n        `self._training_ops` attribute.\n        \"\"\"", "\n", "\n", "actions", "=", "self", ".", "_policy", ".", "actions", "(", "[", "self", ".", "_observations_ph", "]", ")", "\n", "log_pis", "=", "self", ".", "_policy", ".", "log_pis", "(", "[", "self", ".", "_observations_ph", "]", ",", "actions", ")", "\n", "\n", "assert", "log_pis", ".", "shape", ".", "as_list", "(", ")", "==", "[", "None", ",", "1", "]", "\n", "\n", "log_alpha", "=", "self", ".", "_log_alpha", "=", "tf", ".", "get_variable", "(", "\n", "'log_alpha'", ",", "\n", "dtype", "=", "tf", ".", "float32", ",", "\n", "initializer", "=", "0.0", ")", "\n", "alpha", "=", "tf", ".", "exp", "(", "log_alpha", ")", "\n", "\n", "if", "isinstance", "(", "self", ".", "_target_entropy", ",", "Number", ")", ":", "\n", "            ", "alpha_loss", "=", "-", "tf", ".", "reduce_mean", "(", "\n", "log_alpha", "*", "tf", ".", "stop_gradient", "(", "log_pis", "+", "self", ".", "_target_entropy", ")", ")", "\n", "\n", "self", ".", "_alpha_optimizer", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "\n", "self", ".", "_policy_lr", ",", "name", "=", "'alpha_optimizer'", ")", "\n", "self", ".", "_alpha_train_op", "=", "self", ".", "_alpha_optimizer", ".", "minimize", "(", "\n", "loss", "=", "alpha_loss", ",", "var_list", "=", "[", "log_alpha", "]", ")", "\n", "\n", "self", ".", "_training_ops", ".", "update", "(", "{", "\n", "'temperature_alpha'", ":", "self", ".", "_alpha_train_op", "\n", "}", ")", "\n", "\n", "", "self", ".", "_alpha", "=", "alpha", "\n", "\n", "if", "self", ".", "_action_prior", "==", "'normal'", ":", "\n", "            ", "policy_prior", "=", "tf", ".", "contrib", ".", "distributions", ".", "MultivariateNormalDiag", "(", "\n", "loc", "=", "tf", ".", "zeros", "(", "self", ".", "_action_shape", ")", ",", "\n", "scale_diag", "=", "tf", ".", "ones", "(", "self", ".", "_action_shape", ")", ")", "\n", "policy_prior_log_probs", "=", "policy_prior", ".", "log_prob", "(", "actions", ")", "\n", "", "elif", "self", ".", "_action_prior", "==", "'uniform'", ":", "\n", "            ", "policy_prior_log_probs", "=", "0.0", "\n", "\n", "", "Q_log_targets", "=", "tuple", "(", "\n", "Q", "(", "[", "self", ".", "_observations_ph", ",", "actions", "]", ")", "\n", "for", "Q", "in", "self", ".", "_Qs", ")", "\n", "min_Q_log_target", "=", "tf", ".", "reduce_min", "(", "Q_log_targets", ",", "axis", "=", "0", ")", "\n", "\n", "# weighted actor loss", "\n", "if", "self", ".", "_weighted_use", ":", "\n", "            ", "temperature_act", "=", "self", ".", "_temp", "\n", "", "else", ":", "\n", "            ", "temperature_act", "=", "0", "\n", "", "weight_actor_Q", "=", "tf", ".", "stop_gradient", "(", "tf", ".", "sigmoid", "(", "-", "self", ".", "_stds_ph", "*", "temperature_act", ")", "*", "2.0", ")", "\n", "#weight_actor_Q =  tf.stop_gradient(tf.sigmoid(-self._stds_ph * temperature_act) + 0.5)", "\n", "if", "self", ".", "_reparameterize", ":", "\n", "            ", "policy_kl_losses", "=", "(", "\n", "alpha", "*", "log_pis", "\n", "-", "min_Q_log_target", "\n", "-", "policy_prior_log_probs", ")", "*", "weight_actor_Q", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "assert", "policy_kl_losses", ".", "shape", ".", "as_list", "(", ")", "==", "[", "None", ",", "1", "]", "\n", "\n", "policy_loss", "=", "tf", ".", "reduce_mean", "(", "policy_kl_losses", ")", "\n", "\n", "self", ".", "_policy_optimizer", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "\n", "learning_rate", "=", "self", ".", "_policy_lr", ",", "\n", "name", "=", "\"policy_optimizer\"", ")", "\n", "policy_train_op", "=", "tf", ".", "contrib", ".", "layers", ".", "optimize_loss", "(", "\n", "policy_loss", ",", "\n", "self", ".", "global_step", ",", "\n", "learning_rate", "=", "self", ".", "_policy_lr", ",", "\n", "optimizer", "=", "self", ".", "_policy_optimizer", ",", "\n", "variables", "=", "self", ".", "_policy", ".", "trainable_variables", ",", "\n", "increment_global_step", "=", "False", ",", "\n", "summaries", "=", "(", "\n", "\"loss\"", ",", "\"gradients\"", ",", "\"gradient_norm\"", ",", "\"global_gradient_norm\"", "\n", ")", "if", "self", ".", "_tf_summaries", "else", "(", ")", ")", "\n", "\n", "self", ".", "_training_ops", ".", "update", "(", "{", "'policy_train_op'", ":", "policy_train_op", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.algorithms.meee.MEEE._init_training": [[653, 655], ["meee.MEEE._update_target"], "methods", ["home.repos.pwc.inspect_result.YaoYao1995_MEEE.algorithms.meee.MEEE._update_target"], ["", "def", "_init_training", "(", "self", ")", ":", "\n", "        ", "self", ".", "_update_target", "(", "tau", "=", "1.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.algorithms.meee.MEEE._update_target": [[656, 665], ["zip", "Q.get_weights", "Q_target.get_weights", "Q_target.set_weights", "zip"], "methods", ["home.repos.pwc.inspect_result.YaoYao1995_MEEE.policies.gaussian_policy.GaussianPolicy.get_weights", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.policies.gaussian_policy.GaussianPolicy.get_weights", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.policies.gaussian_policy.GaussianPolicy.set_weights"], ["", "def", "_update_target", "(", "self", ",", "tau", "=", "None", ")", ":", "\n", "        ", "tau", "=", "tau", "or", "self", ".", "_tau", "\n", "\n", "for", "Q", ",", "Q_target", "in", "zip", "(", "self", ".", "_Qs", ",", "self", ".", "_Q_targets", ")", ":", "\n", "            ", "source_params", "=", "Q", ".", "get_weights", "(", ")", "\n", "target_params", "=", "Q_target", ".", "get_weights", "(", ")", "\n", "Q_target", ".", "set_weights", "(", "[", "\n", "tau", "*", "source", "+", "(", "1.0", "-", "tau", ")", "*", "target", "\n", "for", "source", ",", "target", "in", "zip", "(", "source_params", ",", "target_params", ")", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.algorithms.meee.MEEE._do_training": [[667, 680], ["meee.MEEE._training_progress.update", "meee.MEEE._training_progress.set_description", "meee.MEEE._get_feed_dict", "meee.MEEE._session.run", "meee.MEEE._update_target"], "methods", ["home.repos.pwc.inspect_result.YaoYao1995_MEEE.utils.logging.Progress.update", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.utils.logging.Progress.set_description", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.algorithms.meee.MEEE._get_feed_dict", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.algorithms.meee.MEEE._update_target"], ["", "", "def", "_do_training", "(", "self", ",", "iteration", ",", "batch", ")", ":", "\n", "        ", "\"\"\"Runs the operations for updating training and target ops.\"\"\"", "\n", "\n", "self", ".", "_training_progress", ".", "update", "(", ")", "\n", "self", ".", "_training_progress", ".", "set_description", "(", ")", "\n", "\n", "feed_dict", "=", "self", ".", "_get_feed_dict", "(", "iteration", ",", "batch", ")", "\n", "\n", "self", ".", "_session", ".", "run", "(", "self", ".", "_training_ops", ",", "feed_dict", ")", "\n", "\n", "if", "iteration", "%", "self", ".", "_target_update_interval", "==", "0", ":", "\n", "# Run target ops here.", "\n", "            ", "self", ".", "_update_target", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.algorithms.meee.MEEE._get_feed_dict": [[681, 701], ["None"], "methods", ["None"], ["", "", "def", "_get_feed_dict", "(", "self", ",", "iteration", ",", "batch", ")", ":", "\n", "        ", "\"\"\"Construct TensorFlow feed_dict from sample batch.\"\"\"", "\n", "\n", "feed_dict", "=", "{", "\n", "self", ".", "_observations_ph", ":", "batch", "[", "'observations'", "]", ",", "\n", "self", ".", "_actions_ph", ":", "batch", "[", "'actions'", "]", ",", "\n", "self", ".", "_next_observations_ph", ":", "batch", "[", "'next_observations'", "]", ",", "\n", "self", ".", "_rewards_ph", ":", "batch", "[", "'rewards'", "]", ",", "\n", "self", ".", "_terminals_ph", ":", "batch", "[", "'terminals'", "]", ",", "\n", "self", ".", "_stds_ph", ":", "batch", "[", "'stds'", "]", ",", "\n", "}", "\n", "\n", "if", "self", ".", "_store_extra_policy_info", ":", "\n", "            ", "feed_dict", "[", "self", ".", "_log_pis_ph", "]", "=", "batch", "[", "'log_pis'", "]", "\n", "feed_dict", "[", "self", ".", "_raw_actions_ph", "]", "=", "batch", "[", "'raw_actions'", "]", "\n", "\n", "", "if", "iteration", "is", "not", "None", ":", "\n", "            ", "feed_dict", "[", "self", ".", "_iteration_ph", "]", "=", "iteration", "\n", "\n", "", "return", "feed_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.algorithms.meee.MEEE.get_diagnostics": [[702, 743], ["meee.MEEE._get_feed_dict", "meee.MEEE._session.run", "collections.OrderedDict", "meee.MEEE._policy.get_diagnostics", "collections.OrderedDict.update", "meee.MEEE._plotter.draw", "numpy.mean", "numpy.std", "numpy.mean", "meee.MEEE.items"], "methods", ["home.repos.pwc.inspect_result.YaoYao1995_MEEE.algorithms.meee.MEEE._get_feed_dict", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.samplers.explore_sampler.ExploreSampler.get_diagnostics", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.utils.logging.Progress.update", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.misc.plotter.QFPolicyPlotter.draw"], ["", "def", "get_diagnostics", "(", "self", ",", "\n", "iteration", ",", "\n", "batch", ",", "\n", "training_paths", ",", "\n", "evaluation_paths", ")", ":", "\n", "        ", "\"\"\"Return diagnostic information as ordered dictionary.\n\n        Records mean and standard deviation of Q-function and state\n        value function, and TD-loss (mean squared Bellman error)\n        for the sample batch.\n\n        Also calls the `draw` method of the plotter, if plotter defined.\n        \"\"\"", "\n", "\n", "feed_dict", "=", "self", ".", "_get_feed_dict", "(", "iteration", ",", "batch", ")", "\n", "\n", "(", "Q_values", ",", "Q_losses", ",", "alpha", ",", "global_step", ")", "=", "self", ".", "_session", ".", "run", "(", "\n", "(", "self", ".", "_Q_values", ",", "\n", "self", ".", "_Q_losses", ",", "\n", "self", ".", "_alpha", ",", "\n", "self", ".", "global_step", ")", ",", "\n", "feed_dict", ")", "\n", "\n", "diagnostics", "=", "OrderedDict", "(", "{", "\n", "'Q-avg'", ":", "np", ".", "mean", "(", "Q_values", ")", ",", "\n", "'Q-std'", ":", "np", ".", "std", "(", "Q_values", ")", ",", "\n", "'Q_loss'", ":", "np", ".", "mean", "(", "Q_losses", ")", ",", "\n", "'alpha'", ":", "alpha", ",", "\n", "}", ")", "\n", "\n", "policy_diagnostics", "=", "self", ".", "_policy", ".", "get_diagnostics", "(", "\n", "batch", "[", "'observations'", "]", ")", "\n", "diagnostics", ".", "update", "(", "{", "\n", "f'policy/{key}'", ":", "value", "\n", "for", "key", ",", "value", "in", "policy_diagnostics", ".", "items", "(", ")", "\n", "}", ")", "\n", "\n", "if", "self", ".", "_plotter", ":", "\n", "            ", "self", ".", "_plotter", ".", "draw", "(", ")", "\n", "\n", "", "return", "diagnostics", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.algorithms.meee.MEEE.tf_saveables": [[744, 759], ["hasattr", "enumerate"], "methods", ["None"], ["", "@", "property", "\n", "def", "tf_saveables", "(", "self", ")", ":", "\n", "        ", "saveables", "=", "{", "\n", "'_policy_optimizer'", ":", "self", ".", "_policy_optimizer", ",", "\n", "**", "{", "\n", "f'Q_optimizer_{i}'", ":", "optimizer", "\n", "for", "i", ",", "optimizer", "in", "enumerate", "(", "self", ".", "_Q_optimizers", ")", "\n", "}", ",", "\n", "'_log_alpha'", ":", "self", ".", "_log_alpha", ",", "\n", "}", "\n", "\n", "if", "hasattr", "(", "self", ",", "'_alpha_optimizer'", ")", ":", "\n", "            ", "saveables", "[", "'_alpha_optimizer'", "]", "=", "self", ".", "_alpha_optimizer", "\n", "\n", "", "return", "saveables", "\n", "", "", ""]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.algorithms.meee.td_target": [[25, 27], ["None"], "function", ["None"], ["def", "td_target", "(", "reward", ",", "discount", ",", "next_value", ")", ":", "\n", "    ", "return", "reward", "+", "discount", "*", "next_value", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.preprocessors.convnet.convnet_preprocessor": [[7, 78], ["zip", "softlearning.utils.keras.PicklableKerasModel", "tensorflow.keras.layers.Input", "tensorflow.keras.layers.Lambda", "tensorflow.keras.layers.Lambda", "tensorflow.keras.layers.Reshape", "tensorflow.keras.layers.Flatten", "tensorflow.keras.layers.Lambda", "tensorflow.keras.layers.Conv2D", "softlearning.models.feedforward.feedforward_model", "tensorflow.concat", "getattr", "tensorflow.concat", "concatenated_output.shape[].as_list"], "function", ["home.repos.pwc.inspect_result.YaoYao1995_MEEE.models.feedforward.feedforward_model"], ["def", "convnet_preprocessor", "(", "\n", "input_shapes", ",", "\n", "image_shape", ",", "\n", "output_size", ",", "\n", "conv_filters", "=", "(", "32", ",", "32", ")", ",", "\n", "conv_kernel_sizes", "=", "(", "(", "5", ",", "5", ")", ",", "(", "5", ",", "5", ")", ")", ",", "\n", "pool_type", "=", "'MaxPool2D'", ",", "\n", "pool_sizes", "=", "(", "(", "2", ",", "2", ")", ",", "(", "2", ",", "2", ")", ")", ",", "\n", "pool_strides", "=", "(", "2", ",", "2", ")", ",", "\n", "dense_hidden_layer_sizes", "=", "(", "64", ",", "64", ")", ",", "\n", "data_format", "=", "'channels_last'", ",", "\n", "name", "=", "\"convnet_preprocessor\"", ",", "\n", "make_picklable", "=", "True", ",", "\n", "*", "args", ",", "\n", "**", "kwargs", ")", ":", "\n", "    ", "if", "data_format", "==", "'channels_last'", ":", "\n", "        ", "H", ",", "W", ",", "C", "=", "image_shape", "\n", "", "elif", "data_format", "==", "'channels_first'", ":", "\n", "        ", "C", ",", "H", ",", "W", "=", "image_shape", "\n", "\n", "", "inputs", "=", "[", "\n", "tf", ".", "keras", ".", "layers", ".", "Input", "(", "shape", "=", "input_shape", ")", "\n", "for", "input_shape", "in", "input_shapes", "\n", "]", "\n", "\n", "concatenated_input", "=", "tf", ".", "keras", ".", "layers", ".", "Lambda", "(", "\n", "lambda", "x", ":", "tf", ".", "concat", "(", "x", ",", "axis", "=", "-", "1", ")", "\n", ")", "(", "inputs", ")", "\n", "\n", "images_flat", ",", "input_raw", "=", "tf", ".", "keras", ".", "layers", ".", "Lambda", "(", "\n", "lambda", "x", ":", "[", "x", "[", "...", ",", ":", "H", "*", "W", "*", "C", "]", ",", "x", "[", "...", ",", "H", "*", "W", "*", "C", ":", "]", "]", "\n", ")", "(", "concatenated_input", ")", "\n", "\n", "images", "=", "tf", ".", "keras", ".", "layers", ".", "Reshape", "(", "image_shape", ")", "(", "images_flat", ")", "\n", "\n", "conv_out", "=", "images", "\n", "for", "filters", ",", "kernel_size", ",", "pool_size", ",", "strides", "in", "zip", "(", "\n", "conv_filters", ",", "conv_kernel_sizes", ",", "pool_sizes", ",", "pool_strides", ")", ":", "\n", "        ", "conv_out", "=", "tf", ".", "keras", ".", "layers", ".", "Conv2D", "(", "\n", "filters", "=", "filters", ",", "\n", "kernel_size", "=", "kernel_size", ",", "\n", "padding", "=", "\"SAME\"", ",", "\n", "activation", "=", "tf", ".", "nn", ".", "relu", ",", "\n", "*", "args", ",", "\n", "**", "kwargs", "\n", ")", "(", "conv_out", ")", "\n", "conv_out", "=", "getattr", "(", "tf", ".", "keras", ".", "layers", ",", "pool_type", ")", "(", "\n", "pool_size", "=", "pool_size", ",", "strides", "=", "strides", "\n", ")", "(", "conv_out", ")", "\n", "\n", "", "flattened", "=", "tf", ".", "keras", ".", "layers", ".", "Flatten", "(", ")", "(", "conv_out", ")", "\n", "concatenated_output", "=", "tf", ".", "keras", ".", "layers", ".", "Lambda", "(", "\n", "lambda", "x", ":", "tf", ".", "concat", "(", "x", ",", "axis", "=", "-", "1", ")", "\n", ")", "(", "[", "flattened", ",", "input_raw", "]", ")", "\n", "\n", "output", "=", "(", "\n", "feedforward_model", "(", "\n", "input_shapes", "=", "(", "concatenated_output", ".", "shape", "[", "1", ":", "]", ".", "as_list", "(", ")", ",", ")", ",", "\n", "output_size", "=", "output_size", ",", "\n", "hidden_layer_sizes", "=", "dense_hidden_layer_sizes", ",", "\n", "activation", "=", "'relu'", ",", "\n", "output_activation", "=", "'linear'", ",", "\n", "*", "args", ",", "\n", "**", "kwargs", "\n", ")", "(", "[", "concatenated_output", "]", ")", "\n", "if", "dense_hidden_layer_sizes", "\n", "else", "concatenated_output", ")", "\n", "\n", "model", "=", "PicklableKerasModel", "(", "inputs", ",", "output", ",", "name", "=", "name", ")", "\n", "\n", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.preprocessors.utils.get_convnet_preprocessor": [[4, 12], ["convnet_preprocessor"], "function", ["home.repos.pwc.inspect_result.YaoYao1995_MEEE.preprocessors.convnet.convnet_preprocessor"], ["import", "json", "\n", "\n", "from", "ray", ".", "tune", "import", "sample_from", "\n", "\n", "import", "softlearning", ".", "algorithms", ".", "utils", "as", "alg_utils", "\n", "import", "softlearning", ".", "environments", ".", "utils", "as", "env_utils", "\n", "from", "softlearning", ".", "misc", ".", "utils", "import", "datetimestamp", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.preprocessors.utils.get_feedforward_preprocessor": [[14, 22], ["feedforward_model"], "function", ["home.repos.pwc.inspect_result.YaoYao1995_MEEE.models.feedforward.feedforward_model"], ["DEFAULT_DOMAIN", "=", "'HalfCheetah'", "\n", "DEFAULT_TASK", "=", "'v2'", "\n", "DEFAULT_ALGORITHM", "=", "'MEEE'", "\n", "\n", "\n", "TASKS_BY_DOMAIN_BY_UNIVERSE", "=", "{", "\n", "universe", ":", "{", "\n", "domain", ":", "tuple", "(", "tasks", ")", "\n", "for", "domain", ",", "tasks", "in", "domains", ".", "items", "(", ")", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.preprocessors.utils.get_preprocessor_from_params": [[31, 49], ["preprocessor_params.get", "copy.deepcopy", "preprocessor_params.get"], "function", ["None"], ["for", "domain", ",", "tasks", "in", "domains", ".", "items", "(", ")", "\n", "]", ",", "\n", "(", ")", ")", ")", "\n", "\n", "DOMAINS_BY_UNIVERSE", "=", "{", "\n", "universe", ":", "tuple", "(", "domains", ")", "\n", "for", "universe", ",", "domains", "in", "env_utils", ".", "ENVIRONMENTS", ".", "items", "(", ")", "\n", "}", "\n", "\n", "AVAILABLE_DOMAINS", "=", "set", "(", "sum", "(", "DOMAINS_BY_UNIVERSE", ".", "values", "(", ")", ",", "(", ")", ")", ")", "\n", "\n", "UNIVERSES", "=", "tuple", "(", "env_utils", ".", "ENVIRONMENTS", ")", "\n", "\n", "AVAILABLE_ALGORITHMS", "=", "set", "(", "alg_utils", ".", "ALGORITHM_CLASSES", ".", "keys", "(", ")", ")", "\n", "\n", "\n", "def", "parse_universe", "(", "env_name", ")", ":", "\n", "    ", "universe", "=", "next", "(", "\n", "(", "universe", "for", "universe", "in", "UNIVERSES", "if", "universe", "in", "env_name", ")", ",", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.preprocessors.utils.get_preprocessor_from_variant": [[51, 55], ["utils.get_preprocessor_from_params"], "function", ["home.repos.pwc.inspect_result.YaoYao1995_MEEE.preprocessors.utils.get_preprocessor_from_params"], ["return", "universe", "\n", "\n", "\n", "", "def", "parse_domain_task", "(", "env_name", ",", "universe", ")", ":", "\n", "    ", "env_name", "=", "env_name", ".", "replace", "(", "universe", ",", "''", ")", ".", "strip", "(", "'-'", ")", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.samplers.base_sampler.BaseSampler.__init__": [[6, 20], ["collections.deque"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "\n", "max_path_length", ",", "\n", "min_pool_size", ",", "\n", "batch_size", ",", "\n", "store_last_n_paths", "=", "10", ")", ":", "\n", "        ", "self", ".", "_max_path_length", "=", "max_path_length", "\n", "self", ".", "_min_pool_size", "=", "min_pool_size", "\n", "self", ".", "_batch_size", "=", "batch_size", "\n", "self", ".", "_store_last_n_paths", "=", "store_last_n_paths", "\n", "self", ".", "_last_n_paths", "=", "deque", "(", "maxlen", "=", "store_last_n_paths", ")", "\n", "\n", "self", ".", "env", "=", "None", "\n", "self", ".", "policy", "=", "None", "\n", "self", ".", "pool", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.samplers.base_sampler.BaseSampler.initialize": [[21, 25], ["None"], "methods", ["None"], ["", "def", "initialize", "(", "self", ",", "env", ",", "policy", ",", "pool", ")", ":", "\n", "        ", "self", ".", "env", "=", "env", "\n", "self", ".", "policy", "=", "policy", "\n", "self", ".", "pool", "=", "pool", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.samplers.base_sampler.BaseSampler.set_policy": [[26, 28], ["None"], "methods", ["None"], ["", "def", "set_policy", "(", "self", ",", "policy", ")", ":", "\n", "        ", "self", ".", "policy", "=", "policy", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.samplers.base_sampler.BaseSampler.clear_last_n_paths": [[29, 31], ["base_sampler.BaseSampler._last_n_paths.clear"], "methods", ["None"], ["", "def", "clear_last_n_paths", "(", "self", ")", ":", "\n", "        ", "self", ".", "_last_n_paths", ".", "clear", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.samplers.base_sampler.BaseSampler.get_last_n_paths": [[32, 39], ["tuple", "itertools.islice"], "methods", ["None"], ["", "def", "get_last_n_paths", "(", "self", ",", "n", "=", "None", ")", ":", "\n", "        ", "if", "n", "is", "None", ":", "\n", "            ", "n", "=", "self", ".", "_store_last_n_paths", "\n", "\n", "", "last_n_paths", "=", "tuple", "(", "islice", "(", "self", ".", "_last_n_paths", ",", "None", ",", "n", ")", ")", "\n", "\n", "return", "last_n_paths", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.samplers.base_sampler.BaseSampler.sample": [[40, 42], ["None"], "methods", ["None"], ["", "def", "sample", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.samplers.base_sampler.BaseSampler.batch_ready": [[43, 46], ["None"], "methods", ["None"], ["", "def", "batch_ready", "(", "self", ")", ":", "\n", "        ", "enough_samples", "=", "self", ".", "pool", ".", "size", ">=", "self", ".", "_min_pool_size", "\n", "return", "enough_samples", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.samplers.base_sampler.BaseSampler.random_batch": [[47, 50], ["base_sampler.BaseSampler.pool.random_batch"], "methods", ["home.repos.pwc.inspect_result.YaoYao1995_MEEE.samplers.explore_sampler.ExploreSampler.random_batch"], ["", "def", "random_batch", "(", "self", ",", "batch_size", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "batch_size", "=", "batch_size", "or", "self", ".", "_batch_size", "\n", "return", "self", ".", "pool", ".", "random_batch", "(", "batch_size", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.samplers.base_sampler.BaseSampler.terminate": [[51, 53], ["base_sampler.BaseSampler.env.close"], "methods", ["home.repos.pwc.inspect_result.YaoYao1995_MEEE.adapters.softlearning_env.SoftlearningEnv.close"], ["", "def", "terminate", "(", "self", ")", ":", "\n", "        ", "self", ".", "env", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.samplers.base_sampler.BaseSampler.get_diagnostics": [[54, 57], ["collections.OrderedDict"], "methods", ["None"], ["", "def", "get_diagnostics", "(", "self", ")", ":", "\n", "        ", "diagnostics", "=", "OrderedDict", "(", "{", "'pool-size'", ":", "self", ".", "pool", ".", "size", "}", ")", "\n", "return", "diagnostics", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.samplers.base_sampler.BaseSampler.__getstate__": [[58, 65], ["base_sampler.BaseSampler.__dict__.items"], "methods", ["None"], ["", "def", "__getstate__", "(", "self", ")", ":", "\n", "        ", "state", "=", "{", "\n", "key", ":", "value", "for", "key", ",", "value", "in", "self", ".", "__dict__", ".", "items", "(", ")", "\n", "if", "key", "not", "in", "(", "'env'", ",", "'policy'", ",", "'pool'", ")", "\n", "}", "\n", "\n", "return", "state", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.samplers.base_sampler.BaseSampler.__setstate__": [[66, 72], ["base_sampler.BaseSampler.__dict__.update"], "methods", ["home.repos.pwc.inspect_result.YaoYao1995_MEEE.utils.logging.Progress.update"], ["", "def", "__setstate__", "(", "self", ",", "state", ")", ":", "\n", "        ", "self", ".", "__dict__", ".", "update", "(", "state", ")", "\n", "\n", "self", ".", "env", "=", "None", "\n", "self", ".", "policy", "=", "None", "\n", "self", ".", "pool", "=", "None", "\n", "", "", ""]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.samplers.extra_policy_info_sampler.ExtraPolicyInfoSampler.sample": [[12, 62], ["extra_policy_info_sampler.ExtraPolicyInfoSampler.policy.actions_np", "extra_policy_info_sampler.ExtraPolicyInfoSampler.policy.log_pis_np", "extra_policy_info_sampler.ExtraPolicyInfoSampler.env.step", "extra_policy_info_sampler.ExtraPolicyInfoSampler._current_path[].append", "extra_policy_info_sampler.ExtraPolicyInfoSampler._current_path[].append", "extra_policy_info_sampler.ExtraPolicyInfoSampler._current_path[].append", "extra_policy_info_sampler.ExtraPolicyInfoSampler._current_path[].append", "extra_policy_info_sampler.ExtraPolicyInfoSampler._current_path[].append", "extra_policy_info_sampler.ExtraPolicyInfoSampler._current_path[].append", "extra_policy_info_sampler.ExtraPolicyInfoSampler._current_path[].append", "extra_policy_info_sampler.ExtraPolicyInfoSampler.env.reset", "extra_policy_info_sampler.ExtraPolicyInfoSampler.env.convert_to_active_observation", "extra_policy_info_sampler.ExtraPolicyInfoSampler.pool.add_path", "extra_policy_info_sampler.ExtraPolicyInfoSampler._last_n_paths.appendleft", "extra_policy_info_sampler.ExtraPolicyInfoSampler.policy.reset", "extra_policy_info_sampler.ExtraPolicyInfoSampler.env.reset", "max", "collections.defaultdict", "numpy.array", "extra_policy_info_sampler.ExtraPolicyInfoSampler._current_path.items"], "methods", ["home.repos.pwc.inspect_result.YaoYao1995_MEEE.policies.gaussian_policy.GaussianPolicy.actions_np", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.policies.gaussian_policy.GaussianPolicy.log_pis_np", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.env.humanoid.HumanoidTruncatedObsEnv.step", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.adapters.softlearning_env.SoftlearningEnv.reset", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.adapters.softlearning_env.SoftlearningEnv.convert_to_active_observation", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.replay_pools.union_pool.UnionPool.add_path", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.adapters.softlearning_env.SoftlearningEnv.reset", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.adapters.softlearning_env.SoftlearningEnv.reset"], ["    ", "def", "sample", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_current_observation", "is", "None", ":", "\n", "            ", "self", ".", "_current_observation", "=", "self", ".", "env", ".", "reset", "(", ")", "\n", "\n", "", "observations", "=", "self", ".", "env", ".", "convert_to_active_observation", "(", "\n", "self", ".", "_current_observation", ")", "[", "None", "]", "\n", "actions", "=", "self", ".", "policy", ".", "actions_np", "(", "[", "observations", "]", ")", "\n", "log_pis", "=", "self", ".", "policy", ".", "log_pis_np", "(", "[", "observations", "]", ",", "actions", ")", "\n", "\n", "action", "=", "actions", "[", "0", "]", "\n", "log_pi", "=", "log_pis", "[", "0", "]", "\n", "\n", "next_observation", ",", "reward", ",", "terminal", ",", "info", "=", "self", ".", "env", ".", "step", "(", "action", ")", "\n", "self", ".", "_path_length", "+=", "1", "\n", "self", ".", "_path_return", "+=", "reward", "\n", "self", ".", "_total_samples", "+=", "1", "\n", "\n", "self", ".", "_current_path", "[", "'observations'", "]", ".", "append", "(", "self", ".", "_current_observation", ")", "\n", "self", ".", "_current_path", "[", "'actions'", "]", ".", "append", "(", "action", ")", "\n", "self", ".", "_current_path", "[", "'rewards'", "]", ".", "append", "(", "[", "reward", "]", ")", "\n", "self", ".", "_current_path", "[", "'terminals'", "]", ".", "append", "(", "[", "terminal", "]", ")", "\n", "self", ".", "_current_path", "[", "'next_observations'", "]", ".", "append", "(", "next_observation", ")", "\n", "self", ".", "_current_path", "[", "'infos'", "]", ".", "append", "(", "info", ")", "\n", "# self._current_path['raw_actions'].append(raw_action)", "\n", "self", ".", "_current_path", "[", "'log_pis'", "]", ".", "append", "(", "log_pi", ")", "\n", "\n", "if", "terminal", "or", "self", ".", "_path_length", ">=", "self", ".", "_max_path_length", ":", "\n", "            ", "last_path", "=", "{", "\n", "field_name", ":", "np", ".", "array", "(", "values", ")", "\n", "for", "field_name", ",", "values", "in", "self", ".", "_current_path", ".", "items", "(", ")", "\n", "}", "\n", "self", ".", "pool", ".", "add_path", "(", "last_path", ")", "\n", "self", ".", "_last_n_paths", ".", "appendleft", "(", "last_path", ")", "\n", "\n", "self", ".", "policy", ".", "reset", "(", ")", "\n", "self", ".", "_current_observation", "=", "self", ".", "env", ".", "reset", "(", ")", "\n", "\n", "self", ".", "_max_path_return", "=", "max", "(", "self", ".", "_max_path_return", ",", "\n", "self", ".", "_path_return", ")", "\n", "self", ".", "_last_path_return", "=", "self", ".", "_path_return", "\n", "\n", "self", ".", "_path_length", "=", "0", "\n", "self", ".", "_path_return", "=", "0", "\n", "self", ".", "_current_path", "=", "defaultdict", "(", "list", ")", "\n", "\n", "self", ".", "_n_episodes", "+=", "1", "\n", "", "else", ":", "\n", "            ", "self", ".", "_current_observation", "=", "next_observation", "\n", "\n", "", "return", "self", ".", "_current_observation", ",", "reward", ",", "terminal", ",", "info", "\n", "", "", ""]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.samplers.dummy_sampler.DummySampler.__init__": [[5, 10], ["base_sampler.BaseSampler.__init__"], "methods", ["home.repos.pwc.inspect_result.YaoYao1995_MEEE.env.humanoid.HumanoidTruncatedObsEnv.__init__"], ["    ", "def", "__init__", "(", "self", ",", "batch_size", ",", "max_path_length", ")", ":", "\n", "        ", "super", "(", "DummySampler", ",", "self", ")", ".", "__init__", "(", "\n", "max_path_length", "=", "max_path_length", ",", "\n", "min_pool_size", "=", "0", ",", "\n", "batch_size", "=", "batch_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.samplers.dummy_sampler.DummySampler.sample": [[11, 13], ["None"], "methods", ["None"], ["", "def", "sample", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "", "", ""]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.samplers.remote_sampler.RemoteSampler.__init__": [[14, 23], ["base_sampler.BaseSampler.__init__"], "methods", ["home.repos.pwc.inspect_result.YaoYao1995_MEEE.env.humanoid.HumanoidTruncatedObsEnv.__init__"], ["    ", "def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "RemoteSampler", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n", "self", ".", "_remote_environment", "=", "None", "\n", "self", ".", "_remote_path", "=", "None", "\n", "self", ".", "_n_episodes", "=", "0", "\n", "self", ".", "_total_samples", "=", "0", "\n", "self", ".", "_last_path_return", "=", "0", "\n", "self", ".", "_max_path_return", "=", "-", "np", ".", "inf", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.samplers.remote_sampler.RemoteSampler._create_remote_environment": [[24, 36], ["pickle.dumps", "pickle.dumps", "_RemoteEnv.remote", "ray.get", "ray.is_initialized", "ray.init", "remote_sampler.RemoteSampler._remote_environment.initialized.remote"], "methods", ["None"], ["", "def", "_create_remote_environment", "(", "self", ",", "env", ",", "policy", ")", ":", "\n", "        ", "env_pkl", "=", "pickle", ".", "dumps", "(", "env", ")", "\n", "policy_pkl", "=", "pickle", ".", "dumps", "(", "policy", ")", "\n", "\n", "if", "not", "ray", ".", "is_initialized", "(", ")", ":", "\n", "            ", "ray", ".", "init", "(", ")", "\n", "\n", "", "self", ".", "_remote_environment", "=", "_RemoteEnv", ".", "remote", "(", "env_pkl", ",", "policy_pkl", ")", "\n", "\n", "# Block until the env and policy is ready", "\n", "initialized", "=", "ray", ".", "get", "(", "self", ".", "_remote_environment", ".", "initialized", ".", "remote", "(", ")", ")", "\n", "assert", "initialized", ",", "initialized", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.samplers.remote_sampler.RemoteSampler.initialize": [[37, 40], ["super().initialize", "remote_sampler.RemoteSampler._create_remote_environment"], "methods", ["home.repos.pwc.inspect_result.YaoYao1995_MEEE.samplers.remote_sampler.RemoteSampler.initialize", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.samplers.remote_sampler.RemoteSampler._create_remote_environment"], ["", "def", "initialize", "(", "self", ",", "env", ",", "policy", ",", "pool", ")", ":", "\n", "        ", "super", "(", "RemoteSampler", ",", "self", ")", ".", "initialize", "(", "env", ",", "policy", ",", "pool", ")", "\n", "self", ".", "_create_remote_environment", "(", "env", ",", "policy", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.samplers.remote_sampler.RemoteSampler.wait_for_path": [[41, 47], ["ray.wait"], "methods", ["None"], ["", "def", "wait_for_path", "(", "self", ",", "timeout", "=", "1", ")", ":", "\n", "        ", "if", "self", ".", "_remote_path", "is", "None", ":", "\n", "            ", "return", "[", "True", "]", "\n", "\n", "", "path_ready", ",", "_", "=", "ray", ".", "wait", "(", "[", "self", ".", "_remote_path", "]", ",", "timeout", "=", "timeout", ")", "\n", "return", "path_ready", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.samplers.remote_sampler.RemoteSampler.sample": [[48, 68], ["remote_sampler.RemoteSampler.wait_for_path", "remote_sampler.RemoteSampler.policy.get_weights", "remote_sampler.RemoteSampler._remote_environment.rollout.remote", "len", "ray.get", "remote_sampler.RemoteSampler._last_n_paths.appendleft", "remote_sampler.RemoteSampler.pool.add_path", "len", "numpy.sum", "max", "remote_sampler.RemoteSampler.batch_ready"], "methods", ["home.repos.pwc.inspect_result.YaoYao1995_MEEE.samplers.remote_sampler.RemoteSampler.wait_for_path", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.policies.gaussian_policy.GaussianPolicy.get_weights", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.replay_pools.union_pool.UnionPool.add_path", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.samplers.base_sampler.BaseSampler.batch_ready"], ["", "def", "sample", "(", "self", ",", "timeout", "=", "0", ")", ":", "\n", "        ", "if", "self", ".", "_remote_path", "is", "None", ":", "\n", "            ", "policy_params", "=", "self", ".", "policy", ".", "get_weights", "(", ")", "\n", "self", ".", "_remote_path", "=", "self", ".", "_remote_environment", ".", "rollout", ".", "remote", "(", "\n", "policy_params", ",", "self", ".", "_max_path_length", ")", "\n", "\n", "", "path_ready", "=", "self", ".", "wait_for_path", "(", "timeout", "=", "timeout", ")", "\n", "\n", "if", "len", "(", "path_ready", ")", "or", "not", "self", ".", "batch_ready", "(", ")", ":", "\n", "            ", "path", "=", "ray", ".", "get", "(", "self", ".", "_remote_path", ")", "\n", "self", ".", "_last_n_paths", ".", "appendleft", "(", "path", ")", "\n", "\n", "self", ".", "pool", ".", "add_path", "(", "path", ")", "\n", "\n", "self", ".", "_remote_path", "=", "None", "\n", "self", ".", "_total_samples", "+=", "len", "(", "path", "[", "'observations'", "]", ")", "\n", "self", ".", "_last_path_return", "=", "np", ".", "sum", "(", "path", "[", "'rewards'", "]", ")", "\n", "self", ".", "_max_path_return", "=", "max", "(", "self", ".", "_max_path_return", ",", "\n", "self", ".", "_last_path_return", ")", "\n", "self", ".", "_n_episodes", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.samplers.remote_sampler.RemoteSampler.get_diagnostics": [[69, 79], ["collections.OrderedDict"], "methods", ["None"], ["", "", "def", "get_diagnostics", "(", "self", ")", ":", "\n", "        ", "diagnostics", "=", "OrderedDict", "(", "{", "\n", "'max-path-return'", ":", "self", ".", "_max_path_return", ",", "\n", "'last-path-return'", ":", "self", ".", "_last_path_return", ",", "\n", "'pool-size'", ":", "self", ".", "pool", ".", "size", ",", "\n", "'episodes'", ":", "self", ".", "_n_episodes", ",", "\n", "'total-samples'", ":", "self", ".", "_total_samples", ",", "\n", "}", ")", "\n", "\n", "return", "diagnostics", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.samplers.remote_sampler.RemoteSampler.__getstate__": [[80, 88], ["super().__getstate__", "super().__getstate__.items"], "methods", ["home.repos.pwc.inspect_result.YaoYao1995_MEEE.samplers.remote_sampler.RemoteSampler.__getstate__"], ["", "def", "__getstate__", "(", "self", ")", ":", "\n", "        ", "super_state", "=", "super", "(", "RemoteSampler", ",", "self", ")", ".", "__getstate__", "(", ")", "\n", "state", "=", "{", "\n", "key", ":", "value", "for", "key", ",", "value", "in", "super_state", ".", "items", "(", ")", "\n", "if", "key", "not", "in", "(", "'_remote_environment'", ",", "'_remote_path'", ")", "\n", "}", "\n", "\n", "return", "state", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.samplers.remote_sampler.RemoteSampler.__setstate__": [[89, 93], ["super().__setstate__", "remote_sampler.RemoteSampler._create_remote_environment"], "methods", ["home.repos.pwc.inspect_result.YaoYao1995_MEEE.samplers.remote_sampler.RemoteSampler.__setstate__", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.samplers.remote_sampler.RemoteSampler._create_remote_environment"], ["", "def", "__setstate__", "(", "self", ",", "state", ")", ":", "\n", "        ", "super", "(", "RemoteSampler", ",", "self", ")", ".", "__setstate__", "(", "state", ")", "\n", "self", ".", "_create_remote_environment", "(", "self", ".", "env", ",", "self", ".", "policy", ")", "\n", "self", ".", "_remote_path", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.samplers.remote_sampler._RemoteEnv.__init__": [[97, 108], ["tensorflow.keras.backend.get_session", "remote_sampler._RemoteEnv._session.run", "pickle.loads", "pickle.loads", "hasattr", "tensorflow.global_variables_initializer", "remote_sampler._RemoteEnv._env.initialize"], "methods", ["home.repos.pwc.inspect_result.YaoYao1995_MEEE.samplers.remote_sampler.RemoteSampler.initialize"], ["    ", "def", "__init__", "(", "self", ",", "env_pkl", ",", "policy_pkl", ")", ":", "\n", "        ", "self", ".", "_session", "=", "tf", ".", "keras", ".", "backend", ".", "get_session", "(", ")", "\n", "self", ".", "_session", ".", "run", "(", "tf", ".", "global_variables_initializer", "(", ")", ")", "\n", "\n", "self", ".", "_env", "=", "pickle", ".", "loads", "(", "env_pkl", ")", "\n", "self", ".", "_policy", "=", "pickle", ".", "loads", "(", "policy_pkl", ")", "\n", "\n", "if", "hasattr", "(", "self", ".", "_env", ",", "'initialize'", ")", ":", "\n", "            ", "self", ".", "_env", ".", "initialize", "(", ")", "\n", "\n", "", "self", ".", "_initialized", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.samplers.remote_sampler._RemoteEnv.initialized": [[109, 111], ["None"], "methods", ["None"], ["", "def", "initialized", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_initialized", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.samplers.remote_sampler._RemoteEnv.rollout": [[112, 117], ["remote_sampler._RemoteEnv._policy.set_weights", "utils.rollout"], "methods", ["home.repos.pwc.inspect_result.YaoYao1995_MEEE.policies.gaussian_policy.GaussianPolicy.set_weights", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.samplers.utils.rollout"], ["", "def", "rollout", "(", "self", ",", "policy_weights", ",", "path_length", ")", ":", "\n", "        ", "self", ".", "_policy", ".", "set_weights", "(", "policy_weights", ")", "\n", "path", "=", "rollout", "(", "self", ".", "_env", ",", "self", ".", "_policy", ",", "path_length", ")", "\n", "\n", "return", "path", "\n", "", "", ""]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.samplers.simple_sampler.SimpleSampler.__init__": [[9, 20], ["base_sampler.BaseSampler.__init__", "collections.defaultdict"], "methods", ["home.repos.pwc.inspect_result.YaoYao1995_MEEE.env.humanoid.HumanoidTruncatedObsEnv.__init__"], ["    ", "def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "SimpleSampler", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n", "self", ".", "_path_length", "=", "0", "\n", "self", ".", "_path_return", "=", "0", "\n", "self", ".", "_current_path", "=", "defaultdict", "(", "list", ")", "\n", "self", ".", "_last_path_return", "=", "0", "\n", "self", ".", "_max_path_return", "=", "-", "np", ".", "inf", "\n", "self", ".", "_n_episodes", "=", "0", "\n", "self", ".", "_current_observation", "=", "None", "\n", "self", ".", "_total_samples", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.samplers.simple_sampler.SimpleSampler._process_observations": [[21, 38], ["None"], "methods", ["None"], ["", "def", "_process_observations", "(", "self", ",", "\n", "observation", ",", "\n", "action", ",", "\n", "reward", ",", "\n", "terminal", ",", "\n", "next_observation", ",", "\n", "info", ")", ":", "\n", "        ", "processed_observation", "=", "{", "\n", "'observations'", ":", "observation", ",", "\n", "'actions'", ":", "action", ",", "\n", "'rewards'", ":", "[", "reward", "]", ",", "\n", "'terminals'", ":", "[", "terminal", "]", ",", "\n", "'next_observations'", ":", "next_observation", ",", "\n", "'infos'", ":", "info", ",", "\n", "}", "\n", "\n", "return", "processed_observation", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.samplers.simple_sampler.SimpleSampler.sample": [[39, 88], ["simple_sampler.SimpleSampler.env.step", "simple_sampler.SimpleSampler._process_observations", "simple_sampler.SimpleSampler.items", "simple_sampler.SimpleSampler.env.reset", "simple_sampler.SimpleSampler.policy.actions_np", "simple_sampler.SimpleSampler._current_path[].append", "simple_sampler.SimpleSampler.pool.add_path", "simple_sampler.SimpleSampler._last_n_paths.appendleft", "max", "simple_sampler.SimpleSampler.policy.reset", "collections.defaultdict", "numpy.array", "simple_sampler.SimpleSampler._current_path.items", "simple_sampler.SimpleSampler.env.convert_to_active_observation"], "methods", ["home.repos.pwc.inspect_result.YaoYao1995_MEEE.env.humanoid.HumanoidTruncatedObsEnv.step", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.samplers.explore_sampler.ExploreSampler._process_observations", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.adapters.softlearning_env.SoftlearningEnv.reset", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.policies.gaussian_policy.GaussianPolicy.actions_np", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.replay_pools.union_pool.UnionPool.add_path", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.adapters.softlearning_env.SoftlearningEnv.reset", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.adapters.softlearning_env.SoftlearningEnv.convert_to_active_observation"], ["", "def", "sample", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_current_observation", "is", "None", ":", "\n", "            ", "self", ".", "_current_observation", "=", "self", ".", "env", ".", "reset", "(", ")", "\n", "\n", "", "action", "=", "self", ".", "policy", ".", "actions_np", "(", "[", "\n", "self", ".", "env", ".", "convert_to_active_observation", "(", "\n", "self", ".", "_current_observation", ")", "[", "None", "]", "\n", "]", ")", "[", "0", "]", "\n", "\n", "next_observation", ",", "reward", ",", "terminal", ",", "info", "=", "self", ".", "env", ".", "step", "(", "action", ")", "\n", "self", ".", "_path_length", "+=", "1", "\n", "self", ".", "_path_return", "+=", "reward", "\n", "self", ".", "_total_samples", "+=", "1", "\n", "\n", "processed_sample", "=", "self", ".", "_process_observations", "(", "\n", "observation", "=", "self", ".", "_current_observation", ",", "\n", "action", "=", "action", ",", "\n", "reward", "=", "reward", ",", "\n", "terminal", "=", "terminal", ",", "\n", "next_observation", "=", "next_observation", ",", "\n", "info", "=", "info", ",", "\n", ")", "\n", "\n", "for", "key", ",", "value", "in", "processed_sample", ".", "items", "(", ")", ":", "\n", "            ", "self", ".", "_current_path", "[", "key", "]", ".", "append", "(", "value", ")", "\n", "\n", "", "if", "terminal", "or", "self", ".", "_path_length", ">=", "self", ".", "_max_path_length", ":", "\n", "            ", "last_path", "=", "{", "\n", "field_name", ":", "np", ".", "array", "(", "values", ")", "\n", "for", "field_name", ",", "values", "in", "self", ".", "_current_path", ".", "items", "(", ")", "\n", "}", "\n", "self", ".", "pool", ".", "add_path", "(", "last_path", ")", "\n", "self", ".", "_last_n_paths", ".", "appendleft", "(", "last_path", ")", "\n", "\n", "self", ".", "_max_path_return", "=", "max", "(", "self", ".", "_max_path_return", ",", "\n", "self", ".", "_path_return", ")", "\n", "self", ".", "_last_path_return", "=", "self", ".", "_path_return", "\n", "\n", "self", ".", "policy", ".", "reset", "(", ")", "\n", "self", ".", "_current_observation", "=", "None", "\n", "self", ".", "_path_length", "=", "0", "\n", "self", ".", "_path_return", "=", "0", "\n", "self", ".", "_current_path", "=", "defaultdict", "(", "list", ")", "\n", "\n", "self", ".", "_n_episodes", "+=", "1", "\n", "", "else", ":", "\n", "            ", "self", ".", "_current_observation", "=", "next_observation", "\n", "\n", "", "return", "next_observation", ",", "reward", ",", "terminal", ",", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.samplers.simple_sampler.SimpleSampler.random_batch": [[89, 95], ["getattr", "simple_sampler.SimpleSampler.pool.random_batch"], "methods", ["home.repos.pwc.inspect_result.YaoYao1995_MEEE.samplers.explore_sampler.ExploreSampler.random_batch"], ["", "def", "random_batch", "(", "self", ",", "batch_size", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "batch_size", "=", "batch_size", "or", "self", ".", "_batch_size", "\n", "observation_keys", "=", "getattr", "(", "self", ".", "env", ",", "'observation_keys'", ",", "None", ")", "\n", "\n", "return", "self", ".", "pool", ".", "random_batch", "(", "\n", "batch_size", ",", "observation_keys", "=", "observation_keys", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.samplers.simple_sampler.SimpleSampler.get_diagnostics": [[96, 106], ["super().get_diagnostics", "super().get_diagnostics.update"], "methods", ["home.repos.pwc.inspect_result.YaoYao1995_MEEE.samplers.explore_sampler.ExploreSampler.get_diagnostics", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.utils.logging.Progress.update"], ["", "def", "get_diagnostics", "(", "self", ")", ":", "\n", "        ", "diagnostics", "=", "super", "(", "SimpleSampler", ",", "self", ")", ".", "get_diagnostics", "(", ")", "\n", "diagnostics", ".", "update", "(", "{", "\n", "'max-path-return'", ":", "self", ".", "_max_path_return", ",", "\n", "'last-path-return'", ":", "self", ".", "_last_path_return", ",", "\n", "'episodes'", ":", "self", ".", "_n_episodes", ",", "\n", "'total-samples'", ":", "self", ".", "_total_samples", ",", "\n", "}", ")", "\n", "\n", "return", "diagnostics", "\n", "", "", ""]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.samplers.explore_sampler.ExploreSampler.__init__": [[9, 20], ["base_sampler.BaseSampler.__init__", "collections.defaultdict"], "methods", ["home.repos.pwc.inspect_result.YaoYao1995_MEEE.env.humanoid.HumanoidTruncatedObsEnv.__init__"], ["    ", "def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "ExploreSampler", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n", "self", ".", "_path_length", "=", "0", "\n", "self", ".", "_path_return", "=", "0", "\n", "self", ".", "_current_path", "=", "defaultdict", "(", "list", ")", "\n", "self", ".", "_last_path_return", "=", "0", "\n", "self", ".", "_max_path_return", "=", "-", "np", ".", "inf", "\n", "self", ".", "_n_episodes", "=", "0", "\n", "self", ".", "_current_observation", "=", "None", "\n", "self", ".", "_total_samples", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.samplers.explore_sampler.ExploreSampler._process_observations": [[21, 38], ["None"], "methods", ["None"], ["", "def", "_process_observations", "(", "self", ",", "\n", "observation", ",", "\n", "action", ",", "\n", "reward", ",", "\n", "terminal", ",", "\n", "next_observation", ",", "\n", "info", ")", ":", "\n", "        ", "processed_observation", "=", "{", "\n", "'observations'", ":", "observation", ",", "\n", "'actions'", ":", "action", ",", "\n", "'rewards'", ":", "[", "reward", "]", ",", "\n", "'terminals'", ":", "[", "terminal", "]", ",", "\n", "'next_observations'", ":", "next_observation", ",", "\n", "'infos'", ":", "info", ",", "\n", "}", "\n", "\n", "return", "processed_observation", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.samplers.explore_sampler.ExploreSampler.sample": [[39, 89], ["explore_sampler.ExploreSampler.env.step", "explore_sampler.ExploreSampler._process_observations", "explore_sampler.ExploreSampler.items", "explore_sampler.ExploreSampler.env.reset", "explore_sampler.ExploreSampler.env.unwrapped.state_vector", "explore_sampler.ExploreSampler.policy.actions_np", "explore_sampler.ExploreSampler._current_path[].append", "explore_sampler.ExploreSampler.pool.add_path", "explore_sampler.ExploreSampler._last_n_paths.appendleft", "max", "explore_sampler.ExploreSampler.policy.reset", "collections.defaultdict", "numpy.array", "explore_sampler.ExploreSampler._current_path.items", "explore_sampler.ExploreSampler.env.convert_to_active_observation"], "methods", ["home.repos.pwc.inspect_result.YaoYao1995_MEEE.env.humanoid.HumanoidTruncatedObsEnv.step", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.samplers.explore_sampler.ExploreSampler._process_observations", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.adapters.softlearning_env.SoftlearningEnv.reset", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.policies.gaussian_policy.GaussianPolicy.actions_np", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.replay_pools.union_pool.UnionPool.add_path", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.adapters.softlearning_env.SoftlearningEnv.reset", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.adapters.softlearning_env.SoftlearningEnv.convert_to_active_observation"], ["", "def", "sample", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_current_observation", "is", "None", ":", "\n", "            ", "self", ".", "_current_observation", "=", "self", ".", "env", ".", "reset", "(", ")", "\n", "self", ".", "_s0", "=", "self", ".", "env", ".", "unwrapped", ".", "state_vector", "(", ")", "\n", "\n", "", "action", "=", "self", ".", "policy", ".", "actions_np", "(", "[", "\n", "self", ".", "env", ".", "convert_to_active_observation", "(", "\n", "self", ".", "_current_observation", ")", "[", "None", "]", "\n", "]", ")", "[", "0", "]", "\n", "\n", "next_observation", ",", "reward", ",", "terminal", ",", "info", "=", "self", ".", "env", ".", "step", "(", "action", ")", "\n", "self", ".", "_path_length", "+=", "1", "\n", "self", ".", "_path_return", "+=", "reward", "\n", "self", ".", "_total_samples", "+=", "1", "\n", "\n", "processed_sample", "=", "self", ".", "_process_observations", "(", "\n", "observation", "=", "self", ".", "_current_observation", ",", "\n", "action", "=", "action", ",", "\n", "reward", "=", "reward", ",", "\n", "terminal", "=", "terminal", ",", "\n", "next_observation", "=", "next_observation", ",", "\n", "info", "=", "info", ",", "\n", ")", "\n", "\n", "for", "key", ",", "value", "in", "processed_sample", ".", "items", "(", ")", ":", "\n", "            ", "self", ".", "_current_path", "[", "key", "]", ".", "append", "(", "value", ")", "\n", "\n", "", "if", "terminal", "or", "self", ".", "_path_length", ">=", "self", ".", "_max_path_length", ":", "\n", "            ", "last_path", "=", "{", "\n", "field_name", ":", "np", ".", "array", "(", "values", ")", "\n", "for", "field_name", ",", "values", "in", "self", ".", "_current_path", ".", "items", "(", ")", "\n", "}", "\n", "self", ".", "pool", ".", "add_path", "(", "last_path", ")", "\n", "self", ".", "_last_n_paths", ".", "appendleft", "(", "last_path", ")", "\n", "\n", "self", ".", "_max_path_return", "=", "max", "(", "self", ".", "_max_path_return", ",", "\n", "self", ".", "_path_return", ")", "\n", "self", ".", "_last_path_return", "=", "self", ".", "_path_return", "\n", "\n", "self", ".", "policy", ".", "reset", "(", ")", "\n", "self", ".", "_current_observation", "=", "None", "\n", "self", ".", "_path_length", "=", "0", "\n", "self", ".", "_path_return", "=", "0", "\n", "self", ".", "_current_path", "=", "defaultdict", "(", "list", ")", "\n", "\n", "self", ".", "_n_episodes", "+=", "1", "\n", "", "else", ":", "\n", "            ", "self", ".", "_current_observation", "=", "next_observation", "\n", "\n", "", "return", "next_observation", ",", "reward", ",", "terminal", ",", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.samplers.explore_sampler.ExploreSampler.random_batch": [[90, 96], ["getattr", "explore_sampler.ExploreSampler.pool.random_batch"], "methods", ["home.repos.pwc.inspect_result.YaoYao1995_MEEE.samplers.explore_sampler.ExploreSampler.random_batch"], ["", "def", "random_batch", "(", "self", ",", "batch_size", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "batch_size", "=", "batch_size", "or", "self", ".", "_batch_size", "\n", "observation_keys", "=", "getattr", "(", "self", ".", "env", ",", "'observation_keys'", ",", "None", ")", "\n", "\n", "return", "self", ".", "pool", ".", "random_batch", "(", "\n", "batch_size", ",", "observation_keys", "=", "observation_keys", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.samplers.explore_sampler.ExploreSampler.get_diagnostics": [[97, 107], ["super().get_diagnostics", "super().get_diagnostics.update"], "methods", ["home.repos.pwc.inspect_result.YaoYao1995_MEEE.samplers.explore_sampler.ExploreSampler.get_diagnostics", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.utils.logging.Progress.update"], ["", "def", "get_diagnostics", "(", "self", ")", ":", "\n", "        ", "diagnostics", "=", "super", "(", "SimpleSampler", ",", "self", ")", ".", "get_diagnostics", "(", ")", "\n", "diagnostics", ".", "update", "(", "{", "\n", "'max-path-return'", ":", "self", ".", "_max_path_return", ",", "\n", "'last-path-return'", ":", "self", ".", "_last_path_return", ",", "\n", "'episodes'", ":", "self", ".", "_n_episodes", ",", "\n", "'total-samples'", ":", "self", ".", "_total_samples", ",", "\n", "}", ")", "\n", "\n", "return", "diagnostics", "\n", "", "", ""]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.samplers.utils.get_sampler_from_variant": [[14, 34], ["copy.deepcopy", "copy.deepcopy", "sampler_params.get", "sampler_params.get"], "function", ["None"], ["DEFAULT_DOMAIN", "=", "'HalfCheetah'", "\n", "DEFAULT_TASK", "=", "'v2'", "\n", "DEFAULT_ALGORITHM", "=", "'MEEE'", "\n", "\n", "\n", "TASKS_BY_DOMAIN_BY_UNIVERSE", "=", "{", "\n", "universe", ":", "{", "\n", "domain", ":", "tuple", "(", "tasks", ")", "\n", "for", "domain", ",", "tasks", "in", "domains", ".", "items", "(", ")", "\n", "}", "\n", "for", "universe", ",", "domains", "in", "env_utils", ".", "ENVIRONMENTS", ".", "items", "(", ")", "\n", "}", "\n", "\n", "AVAILABLE_TASKS", "=", "set", "(", "sum", "(", "\n", "[", "\n", "tasks", "\n", "for", "universe", ",", "domains", "in", "TASKS_BY_DOMAIN_BY_UNIVERSE", ".", "items", "(", ")", "\n", "for", "domain", ",", "tasks", "in", "domains", ".", "items", "(", ")", "\n", "]", ",", "\n", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.samplers.utils.rollout": [[36, 87], ["softlearning.replay_pools.SimpleReplayPool", "simple_sampler.SimpleSampler", "simple_sampler.SimpleSampler.initialize", "range", "replay_pools.SimpleReplayPool.batch_by_indices", "simple_sampler.SimpleSampler.sample", "infos.append", "numpy.arange", "numpy.stack", "callback", "policy.reset", "getattr", "env.render", "images.append", "env.render"], "function", ["home.repos.pwc.inspect_result.YaoYao1995_MEEE.samplers.remote_sampler.RemoteSampler.initialize", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.replay_pools.trajectory_replay_pool.TrajectoryReplayPool.batch_by_indices", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.samplers.explore_sampler.ExploreSampler.sample", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.adapters.softlearning_env.SoftlearningEnv.reset", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.adapters.softlearning_env.SoftlearningEnv.render", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.adapters.softlearning_env.SoftlearningEnv.render"], ["universe", ":", "tuple", "(", "domains", ")", "\n", "for", "universe", ",", "domains", "in", "env_utils", ".", "ENVIRONMENTS", ".", "items", "(", ")", "\n", "}", "\n", "\n", "AVAILABLE_DOMAINS", "=", "set", "(", "sum", "(", "DOMAINS_BY_UNIVERSE", ".", "values", "(", ")", ",", "(", ")", ")", ")", "\n", "\n", "UNIVERSES", "=", "tuple", "(", "env_utils", ".", "ENVIRONMENTS", ")", "\n", "\n", "AVAILABLE_ALGORITHMS", "=", "set", "(", "alg_utils", ".", "ALGORITHM_CLASSES", ".", "keys", "(", ")", ")", "\n", "\n", "\n", "def", "parse_universe", "(", "env_name", ")", ":", "\n", "    ", "universe", "=", "next", "(", "\n", "(", "universe", "for", "universe", "in", "UNIVERSES", "if", "universe", "in", "env_name", ")", ",", "\n", "DEFAULT_UNIVERSE", ")", "\n", "return", "universe", "\n", "\n", "\n", "", "def", "parse_domain_task", "(", "env_name", ",", "universe", ")", ":", "\n", "    ", "env_name", "=", "env_name", ".", "replace", "(", "universe", ",", "''", ")", ".", "strip", "(", "'-'", ")", "\n", "domains", "=", "DOMAINS_BY_UNIVERSE", "[", "universe", "]", "\n", "domain", "=", "next", "(", "domain", "for", "domain", "in", "domains", "if", "domain", "in", "env_name", ")", "\n", "\n", "env_name", "=", "env_name", ".", "replace", "(", "domain", ",", "''", ")", ".", "strip", "(", "'-'", ")", "\n", "tasks", "=", "TASKS_BY_DOMAIN_BY_UNIVERSE", "[", "universe", "]", "[", "domain", "]", "\n", "task", "=", "next", "(", "(", "task", "for", "task", "in", "tasks", "if", "task", "==", "env_name", ")", ",", "None", ")", "\n", "\n", "if", "task", "is", "None", ":", "\n", "        ", "matching_tasks", "=", "[", "task", "for", "task", "in", "tasks", "if", "task", "in", "env_name", "]", "\n", "if", "len", "(", "matching_tasks", ")", ">", "1", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"Task name cannot be unmbiguously determined: {}.\"", "\n", "\" Following task names match: {}\"", "\n", "\"\"", ".", "format", "(", "env_name", ",", "matching_tasks", ")", ")", "\n", "", "elif", "len", "(", "matching_tasks", ")", "==", "1", ":", "\n", "            ", "task", "=", "matching_tasks", "[", "-", "1", "]", "\n", "", "else", ":", "\n", "            ", "task", "=", "DEFAULT_TASK", "\n", "\n", "", "", "return", "domain", ",", "task", "\n", "\n", "\n", "", "def", "parse_universe_domain_task", "(", "args", ")", ":", "\n", "    ", "universe", ",", "domain", ",", "task", "=", "args", ".", "universe", ",", "args", ".", "domain", ",", "args", ".", "task", "\n", "\n", "if", "not", "universe", ":", "\n", "        ", "universe", "=", "parse_universe", "(", "args", ".", "env", ")", "\n", "\n", "", "if", "(", "not", "domain", ")", "or", "(", "not", "task", ")", ":", "\n", "        ", "domain", ",", "task", "=", "parse_domain_task", "(", "args", ".", "env", ",", "universe", ")", "\n", "\n", "", "return", "universe", ",", "domain", ",", "task", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.samplers.utils.rollouts": [[89, 92], ["utils.rollout", "range"], "function", ["home.repos.pwc.inspect_result.YaoYao1995_MEEE.samplers.utils.rollout"], ["\n", "", "def", "add_ray_init_args", "(", "parser", ")", ":", "\n", "\n", "    ", "def", "init_help_string", "(", "help_string", ")", ":", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.distributions.squash_bijector.SquashBijector.__init__": [[7, 12], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.YaoYao1995_MEEE.env.humanoid.HumanoidTruncatedObsEnv.__init__"], ["    ", "def", "__init__", "(", "self", ",", "validate_args", "=", "False", ",", "name", "=", "\"tanh\"", ")", ":", "\n", "        ", "super", "(", "SquashBijector", ",", "self", ")", ".", "__init__", "(", "\n", "forward_min_event_ndims", "=", "0", ",", "\n", "validate_args", "=", "validate_args", ",", "\n", "name", "=", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.distributions.squash_bijector.SquashBijector._forward": [[13, 15], ["tensorflow.nn.tanh"], "methods", ["None"], ["", "def", "_forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "tf", ".", "nn", ".", "tanh", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.distributions.squash_bijector.SquashBijector._inverse": [[16, 18], ["tensorflow.atanh"], "methods", ["None"], ["", "def", "_inverse", "(", "self", ",", "y", ")", ":", "\n", "        ", "return", "tf", ".", "atanh", "(", "y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.distributions.squash_bijector.SquashBijector._forward_log_det_jacobian": [[19, 21], ["tensorflow.nn.softplus", "numpy.log"], "methods", ["None"], ["", "def", "_forward_log_det_jacobian", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "2.", "*", "(", "np", ".", "log", "(", "2.", ")", "-", "x", "-", "tf", ".", "nn", ".", "softplus", "(", "-", "2.", "*", "x", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.distributions.real_nvp_flow.ConditionalRealNVPFlow.__init__": [[28, 73], ["tuple", "real_nvp_flow.ConditionalRealNVPFlow.build", "tensorflow_probability.bijectors.ConditionalBijector.__init__", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.YaoYao1995_MEEE.distributions.real_nvp_flow.ConditionalRealNVPFlow.build", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.env.humanoid.HumanoidTruncatedObsEnv.__init__"], ["def", "__init__", "(", "self", ",", "\n", "num_coupling_layers", "=", "2", ",", "\n", "hidden_layer_sizes", "=", "(", "64", ",", ")", ",", "\n", "use_batch_normalization", "=", "False", ",", "\n", "event_dims", "=", "None", ",", "\n", "is_constant_jacobian", "=", "False", ",", "\n", "validate_args", "=", "False", ",", "\n", "name", "=", "\"conditional_real_nvp_flow\"", ")", ":", "\n", "        ", "\"\"\"Instantiates the `ConditionalRealNVPFlow` normalizing flow.\n\n        Args:\n            is_constant_jacobian: Python `bool`. Default: `False`. When `True` the\n                implementation assumes `log_scale` does not depend on the forward domain\n                (`x`) or inverse domain (`y`) values. (No validation is made;\n                `is_constant_jacobian=False` is always safe but possibly computationally\n                inefficient.)\n            validate_args: Python `bool` indicating whether arguments should be\n                checked for correctness.\n            name: Python `str`, name given to ops managed by this object.\n\n        Raises:\n            ValueError: if TODO happens\n        \"\"\"", "\n", "self", ".", "_graph_parents", "=", "[", "]", "\n", "self", ".", "_name", "=", "name", "\n", "\n", "self", ".", "_num_coupling_layers", "=", "num_coupling_layers", "\n", "self", ".", "_hidden_layer_sizes", "=", "tuple", "(", "hidden_layer_sizes", ")", "\n", "if", "use_batch_normalization", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\n", "\"TODO(hartikainen): Batch normalization is not yet supported\"", "\n", "\" for ConditionalRealNVPFlow.\"", ")", "\n", "", "self", ".", "_use_batch_normalization", "=", "use_batch_normalization", "\n", "\n", "assert", "event_dims", "is", "not", "None", ",", "event_dims", "\n", "self", ".", "_event_dims", "=", "event_dims", "\n", "\n", "self", ".", "build", "(", ")", "\n", "\n", "super", "(", "ConditionalRealNVPFlow", ",", "self", ")", ".", "__init__", "(", "\n", "forward_min_event_ndims", "=", "1", ",", "\n", "inverse_min_event_ndims", "=", "1", ",", "\n", "is_constant_jacobian", "=", "is_constant_jacobian", ",", "\n", "validate_args", "=", "validate_args", ",", "\n", "name", "=", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.distributions.real_nvp_flow.ConditionalRealNVPFlow.build": [[74, 106], ["numpy.prod", "range", "tensorflow_probability.bijectors.RealNVP", "flow.append", "tensorflow_probability.bijectors.BatchNormalization", "flow.append", "tensorflow_probability.bijectors.Permute", "flow.append", "real_nvp_flow.conditioned_real_nvp_template", "list", "reversed", "range"], "methods", ["home.repos.pwc.inspect_result.YaoYao1995_MEEE.distributions.real_nvp_flow.conditioned_real_nvp_template"], ["", "def", "build", "(", "self", ")", ":", "\n", "        ", "D", "=", "np", ".", "prod", "(", "self", ".", "_event_dims", ")", "\n", "\n", "flow", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "_num_coupling_layers", ")", ":", "\n", "            ", "if", "self", ".", "_use_batch_normalization", ":", "\n", "                ", "batch_normalization_bijector", "=", "bijectors", ".", "BatchNormalization", "(", ")", "\n", "flow", ".", "append", "(", "batch_normalization_bijector", ")", "\n", "\n", "", "real_nvp_bijector", "=", "bijectors", ".", "RealNVP", "(", "\n", "num_masked", "=", "D", "//", "2", ",", "\n", "shift_and_log_scale_fn", "=", "conditioned_real_nvp_template", "(", "\n", "hidden_layers", "=", "self", ".", "_hidden_layer_sizes", ",", "\n", "# TODO: test tf.nn.relu", "\n", "activation", "=", "tf", ".", "nn", ".", "tanh", ")", ",", "\n", "name", "=", "'real_nvp_{}'", ".", "format", "(", "i", ")", ")", "\n", "\n", "flow", ".", "append", "(", "real_nvp_bijector", ")", "\n", "\n", "if", "i", "<", "self", ".", "_num_coupling_layers", "-", "1", ":", "\n", "                ", "permute_bijector", "=", "bijectors", ".", "Permute", "(", "\n", "permutation", "=", "list", "(", "reversed", "(", "range", "(", "D", ")", ")", ")", ",", "\n", "name", "=", "'permute_{}'", ".", "format", "(", "i", ")", ")", "\n", "# TODO(hartikainen): We need to force _is_constant_jacobian due", "\n", "# to the event_dim caching. See the issue filed at github:", "\n", "# https://github.com/tensorflow/probability/issues/122", "\n", "permute_bijector", ".", "_is_constant_jacobian", "=", "False", "\n", "flow", ".", "append", "(", "permute_bijector", ")", "\n", "\n", "# Note: bijectors.Chain applies the list of bijectors in the", "\n", "# _reverse_ order of what they are inputted.", "\n", "", "", "self", ".", "flow", "=", "flow", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.distributions.real_nvp_flow.ConditionalRealNVPFlow._get_flow_conditions": [[107, 115], ["isinstance"], "methods", ["None"], ["", "def", "_get_flow_conditions", "(", "self", ",", "**", "condition_kwargs", ")", ":", "\n", "        ", "conditions", "=", "{", "\n", "bijector", ".", "name", ":", "condition_kwargs", "\n", "for", "bijector", "in", "self", ".", "flow", "\n", "if", "isinstance", "(", "bijector", ",", "bijectors", ".", "RealNVP", ")", "\n", "}", "\n", "\n", "return", "conditions", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.distributions.real_nvp_flow.ConditionalRealNVPFlow._forward": [[116, 126], ["real_nvp_flow.ConditionalRealNVPFlow._get_flow_conditions", "bijector.forward", "real_nvp_flow.ConditionalRealNVPFlow.get"], "methods", ["home.repos.pwc.inspect_result.YaoYao1995_MEEE.distributions.real_nvp_flow.ConditionalRealNVPFlow._get_flow_conditions"], ["", "def", "_forward", "(", "self", ",", "x", ",", "**", "condition_kwargs", ")", ":", "\n", "        ", "conditions", "=", "self", ".", "_get_flow_conditions", "(", "**", "condition_kwargs", ")", "\n", "for", "bijector", "in", "self", ".", "flow", ":", "\n", "            ", "x", "=", "bijector", ".", "forward", "(", "x", ",", "**", "conditions", ".", "get", "(", "bijector", ".", "name", ",", "{", "}", ")", ")", "\n", "\n", "# TODO(hartikainen): Once tfp.bijectors.Chain supports conditioning,", "\n", "# replace the above for-loops with self.flow.forward.", "\n", "# x = self.flow.forward(x, **conditions)", "\n", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.distributions.real_nvp_flow.ConditionalRealNVPFlow._inverse": [[127, 137], ["real_nvp_flow.ConditionalRealNVPFlow._get_flow_conditions", "reversed", "bijector.inverse", "real_nvp_flow.ConditionalRealNVPFlow.get"], "methods", ["home.repos.pwc.inspect_result.YaoYao1995_MEEE.distributions.real_nvp_flow.ConditionalRealNVPFlow._get_flow_conditions"], ["", "def", "_inverse", "(", "self", ",", "y", ",", "**", "condition_kwargs", ")", ":", "\n", "        ", "conditions", "=", "self", ".", "_get_flow_conditions", "(", "**", "condition_kwargs", ")", "\n", "for", "bijector", "in", "reversed", "(", "self", ".", "flow", ")", ":", "\n", "            ", "y", "=", "bijector", ".", "inverse", "(", "y", ",", "**", "conditions", ".", "get", "(", "bijector", ".", "name", ",", "{", "}", ")", ")", "\n", "\n", "# TODO(hartikainen): Once tfp.bijectors.Chain supports conditioning,", "\n", "# replace the above for-loops with self.flow.inverse.", "\n", "# y = self.flow.inverse(y, **conditions)", "\n", "\n", "", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.distributions.real_nvp_flow.ConditionalRealNVPFlow._forward_log_det_jacobian": [[138, 169], ["real_nvp_flow.ConditionalRealNVPFlow._get_flow_conditions", "tensorflow.cast", "real_nvp_flow.ConditionalRealNVPFlow._maybe_get_static_event_ndims", "real_nvp_flow._use_static_shape", "b.forward_log_det_jacobian", "real_nvp_flow._use_static_shape", "b.forward", "tensorflow.shape", "b.forward_event_shape", "real_nvp_flow.ConditionalRealNVPFlow._maybe_get_static_event_ndims", "b.forward_event_shape_tensor", "tensorflow.size", "real_nvp_flow.ConditionalRealNVPFlow._maybe_get_static_event_ndims", "real_nvp_flow.ConditionalRealNVPFlow.get", "real_nvp_flow.ConditionalRealNVPFlow.get", "tensorflow.rank"], "methods", ["home.repos.pwc.inspect_result.YaoYao1995_MEEE.distributions.real_nvp_flow.ConditionalRealNVPFlow._get_flow_conditions", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.distributions.real_nvp_flow._use_static_shape", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.distributions.real_nvp_flow._use_static_shape", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.replay_pools.union_pool.UnionPool.size"], ["", "def", "_forward_log_det_jacobian", "(", "self", ",", "x", ",", "**", "condition_kwargs", ")", ":", "\n", "        ", "conditions", "=", "self", ".", "_get_flow_conditions", "(", "**", "condition_kwargs", ")", "\n", "\n", "# TODO(hartikainen): Once tfp.bijectors.Chain supports conditioning,", "\n", "# replace everything below with self.flow.forward_log_det_jacobian.", "\n", "# fldj = self.flow.forward_log_det_jacobian(", "\n", "#     x, event_ndims=1, **conditions)", "\n", "\n", "fldj", "=", "tf", ".", "cast", "(", "0.", ",", "dtype", "=", "x", ".", "dtype", ".", "base_dtype", ")", "\n", "event_ndims", "=", "self", ".", "_maybe_get_static_event_ndims", "(", "\n", "self", ".", "forward_min_event_ndims", ")", "\n", "\n", "if", "_use_static_shape", "(", "x", ",", "event_ndims", ")", ":", "\n", "            ", "event_shape", "=", "x", ".", "shape", "[", "x", ".", "shape", ".", "ndims", "-", "event_ndims", ":", "]", "\n", "", "else", ":", "\n", "            ", "event_shape", "=", "tf", ".", "shape", "(", "x", ")", "[", "tf", ".", "rank", "(", "x", ")", "-", "event_ndims", ":", "]", "\n", "", "for", "b", "in", "self", ".", "flow", ":", "\n", "            ", "fldj", "+=", "b", ".", "forward_log_det_jacobian", "(", "\n", "x", ",", "event_ndims", "=", "event_ndims", ",", "**", "conditions", ".", "get", "(", "b", ".", "name", ",", "{", "}", ")", ")", "\n", "if", "_use_static_shape", "(", "x", ",", "event_ndims", ")", ":", "\n", "                ", "event_shape", "=", "b", ".", "forward_event_shape", "(", "event_shape", ")", "\n", "event_ndims", "=", "self", ".", "_maybe_get_static_event_ndims", "(", "event_shape", ".", "ndims", ")", "\n", "", "else", ":", "\n", "                ", "event_shape", "=", "b", ".", "forward_event_shape_tensor", "(", "event_shape", ")", "\n", "event_ndims", "=", "tf", ".", "size", "(", "event_shape", ")", "\n", "event_ndims_", "=", "self", ".", "_maybe_get_static_event_ndims", "(", "event_ndims", ")", "\n", "if", "event_ndims_", "is", "not", "None", ":", "\n", "                    ", "event_ndims", "=", "event_ndims_", "\n", "", "", "x", "=", "b", ".", "forward", "(", "x", ",", "**", "conditions", ".", "get", "(", "b", ".", "name", ",", "{", "}", ")", ")", "\n", "\n", "", "return", "fldj", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.distributions.real_nvp_flow.ConditionalRealNVPFlow._inverse_log_det_jacobian": [[170, 206], ["real_nvp_flow.ConditionalRealNVPFlow._get_flow_conditions", "tensorflow.cast", "real_nvp_flow.ConditionalRealNVPFlow._maybe_get_static_event_ndims", "real_nvp_flow._use_static_shape", "reversed", "b.inverse_log_det_jacobian", "real_nvp_flow._use_static_shape", "b.inverse", "tensorflow.shape", "b.inverse_event_shape", "real_nvp_flow.ConditionalRealNVPFlow._maybe_get_static_event_ndims", "b.inverse_event_shape_tensor", "tensorflow.size", "real_nvp_flow.ConditionalRealNVPFlow._maybe_get_static_event_ndims", "real_nvp_flow.ConditionalRealNVPFlow.get", "real_nvp_flow.ConditionalRealNVPFlow.get", "tensorflow.rank"], "methods", ["home.repos.pwc.inspect_result.YaoYao1995_MEEE.distributions.real_nvp_flow.ConditionalRealNVPFlow._get_flow_conditions", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.distributions.real_nvp_flow._use_static_shape", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.distributions.real_nvp_flow._use_static_shape", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.replay_pools.union_pool.UnionPool.size"], ["", "def", "_inverse_log_det_jacobian", "(", "self", ",", "y", ",", "**", "condition_kwargs", ")", ":", "\n", "        ", "conditions", "=", "self", ".", "_get_flow_conditions", "(", "**", "condition_kwargs", ")", "\n", "\n", "# TODO(hartikainen): Once tfp.bijectors.Chain supports conditioning,", "\n", "# replace everything below with self.flow.inverse_log_det_jacobian.", "\n", "# ildj = self.flow.inverse_log_det_jacobian(", "\n", "#     y, event_ndims=1, **conditions)", "\n", "\n", "ildj", "=", "tf", ".", "cast", "(", "0.", ",", "dtype", "=", "y", ".", "dtype", ".", "base_dtype", ")", "\n", "\n", "event_ndims", "=", "self", ".", "_maybe_get_static_event_ndims", "(", "\n", "self", ".", "inverse_min_event_ndims", ")", "\n", "\n", "if", "_use_static_shape", "(", "y", ",", "event_ndims", ")", ":", "\n", "            ", "event_shape", "=", "y", ".", "shape", "[", "y", ".", "shape", ".", "ndims", "-", "event_ndims", ":", "]", "\n", "", "else", ":", "\n", "            ", "event_shape", "=", "tf", ".", "shape", "(", "y", ")", "[", "tf", ".", "rank", "(", "y", ")", "-", "event_ndims", ":", "]", "\n", "\n", "", "for", "b", "in", "reversed", "(", "self", ".", "flow", ")", ":", "\n", "            ", "ildj", "+=", "b", ".", "inverse_log_det_jacobian", "(", "\n", "y", ",", "event_ndims", "=", "event_ndims", ",", "**", "conditions", ".", "get", "(", "b", ".", "name", ",", "{", "}", ")", ")", "\n", "\n", "if", "_use_static_shape", "(", "y", ",", "event_ndims", ")", ":", "\n", "                ", "event_shape", "=", "b", ".", "inverse_event_shape", "(", "event_shape", ")", "\n", "event_ndims", "=", "self", ".", "_maybe_get_static_event_ndims", "(", "\n", "event_shape", ".", "ndims", ")", "\n", "", "else", ":", "\n", "                ", "event_shape", "=", "b", ".", "inverse_event_shape_tensor", "(", "event_shape", ")", "\n", "event_ndims", "=", "tf", ".", "size", "(", "event_shape", ")", "\n", "event_ndims_", "=", "self", ".", "_maybe_get_static_event_ndims", "(", "event_ndims", ")", "\n", "if", "event_ndims_", "is", "not", "None", ":", "\n", "                    ", "event_ndims", "=", "event_ndims_", "\n", "\n", "", "", "y", "=", "b", ".", "inverse", "(", "y", ",", "**", "conditions", ".", "get", "(", "b", ".", "name", ",", "{", "}", ")", ")", "\n", "\n", "", "return", "ildj", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.distributions.real_nvp_flow._use_static_shape": [[17, 19], ["input_tensor.shape.is_fully_defined", "isinstance"], "function", ["None"], ["def", "_use_static_shape", "(", "input_tensor", ",", "ndims", ")", ":", "\n", "    ", "return", "input_tensor", ".", "shape", ".", "is_fully_defined", "(", ")", "and", "isinstance", "(", "ndims", ",", "int", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.distributions.real_nvp_flow.conditioned_real_nvp_template": [[208, 244], ["tensorflow.name_scope", "tensorflow.make_template", "tensorflow.concat", "tensorflow.layers.dense", "tensorflow.split", "tensorflow.layers.dense", "sorted"], "function", ["None"], ["", "", "def", "conditioned_real_nvp_template", "(", "hidden_layers", ",", "\n", "shift_only", "=", "False", ",", "\n", "activation", "=", "tf", ".", "nn", ".", "relu", ",", "\n", "name", "=", "None", ",", "\n", "*", "args", ",", "# pylint: disable=keyword-arg-before-vararg", "\n", "**", "kwargs", ")", ":", "\n", "\n", "    ", "with", "tf", ".", "name_scope", "(", "name", ",", "\"conditioned_real_nvp_template\"", ")", ":", "\n", "\n", "        ", "def", "_fn", "(", "x", ",", "output_units", ",", "**", "condition_kwargs", ")", ":", "\n", "            ", "\"\"\"MLP which concatenates the condition kwargs to input.\"\"\"", "\n", "x", "=", "tf", ".", "concat", "(", "\n", "(", "x", ",", "*", "[", "condition_kwargs", "[", "k", "]", "for", "k", "in", "sorted", "(", "condition_kwargs", ")", "]", ")", ",", "\n", "axis", "=", "-", "1", ")", "\n", "\n", "for", "units", "in", "hidden_layers", ":", "\n", "                ", "x", "=", "tf", ".", "layers", ".", "dense", "(", "\n", "inputs", "=", "x", ",", "\n", "units", "=", "units", ",", "\n", "activation", "=", "activation", ",", "\n", "*", "args", ",", "# pylint: disable=keyword-arg-before-vararg", "\n", "**", "kwargs", ")", "\n", "", "x", "=", "tf", ".", "layers", ".", "dense", "(", "\n", "inputs", "=", "x", ",", "\n", "units", "=", "(", "1", "if", "shift_only", "else", "2", ")", "*", "output_units", ",", "\n", "activation", "=", "None", ",", "\n", "*", "args", ",", "# pylint: disable=keyword-arg-before-vararg", "\n", "**", "kwargs", ")", "\n", "\n", "if", "shift_only", ":", "\n", "                ", "return", "x", ",", "None", "\n", "\n", "", "shift", ",", "log_scale", "=", "tf", ".", "split", "(", "x", ",", "2", ",", "axis", "=", "-", "1", ")", "\n", "return", "shift", ",", "log_scale", "\n", "\n", "", "return", "tf", ".", "make_template", "(", "\"conditioned_real_nvp_template\"", ",", "_fn", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.scripts.console_scripts.add_options": [[41, 47], ["click.decorators._param_memo"], "function", ["None"], ["def", "add_options", "(", "options", ")", ":", "\n", "    ", "def", "decorator", "(", "f", ")", ":", "\n", "        ", "for", "option", "in", "options", "[", ":", ":", "-", "1", "]", ":", "\n", "            ", "click", ".", "decorators", ".", "_param_memo", "(", "f", ",", "option", ")", "\n", "", "return", "f", "\n", "", "return", "decorator", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.scripts.console_scripts.cli": [[3, 9], ["click.group", "click.argument", "click.argument", "console_scripts.main"], "function", ["home.repos.pwc.inspect_result.YaoYao1995_MEEE.scripts.console_scripts.main"], []], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.scripts.console_scripts.run_example_dry_cmd": [[54, 62], ["cli.command", "click.argument", "click.argument", "examples.instrument.run_example_dry"], "function", ["home.repos.pwc.inspect_result.YaoYao1995_MEEE.examples.instrument.run_example_dry"], ["", "@", "cli", ".", "command", "(", "\n", "name", "=", "'run_example_dry'", ",", "\n", "context_settings", "=", "{", "'ignore_unknown_options'", ":", "True", "}", ")", "\n", "@", "click", ".", "argument", "(", "\"example_module_name\"", ",", "required", "=", "True", ",", "type", "=", "str", ")", "\n", "@", "click", ".", "argument", "(", "'example_argv'", ",", "nargs", "=", "-", "1", ",", "type", "=", "click", ".", "UNPROCESSED", ")", "\n", "def", "run_example_dry_cmd", "(", "example_module_name", ",", "example_argv", ")", ":", "\n", "    ", "\"\"\"Print the variant spec and related information of an example.\"\"\"", "\n", "return", "run_example_dry", "(", "example_module_name", ",", "example_argv", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.scripts.console_scripts.run_example_local_cmd": [[64, 72], ["cli.command", "click.argument", "click.argument", "examples.instrument.run_example_local"], "function", ["home.repos.pwc.inspect_result.YaoYao1995_MEEE.examples.instrument.run_example_local"], ["", "@", "cli", ".", "command", "(", "\n", "name", "=", "'run_local'", ",", "\n", "context_settings", "=", "{", "'ignore_unknown_options'", ":", "True", "}", ")", "\n", "@", "click", ".", "argument", "(", "\"example_module_name\"", ",", "required", "=", "True", ",", "type", "=", "str", ")", "\n", "@", "click", ".", "argument", "(", "'example_argv'", ",", "nargs", "=", "-", "1", ",", "type", "=", "click", ".", "UNPROCESSED", ")", "\n", "def", "run_example_local_cmd", "(", "example_module_name", ",", "example_argv", ")", ":", "\n", "    ", "\"\"\"Run example locally, potentially parallelizing across cpus/gpus.\"\"\"", "\n", "return", "run_example_local", "(", "example_module_name", ",", "example_argv", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.scripts.console_scripts.run_example_debug_cmd": [[74, 82], ["cli.command", "click.argument", "click.argument", "examples.instrument.run_example_debug"], "function", ["home.repos.pwc.inspect_result.YaoYao1995_MEEE.examples.instrument.run_example_debug"], ["", "@", "cli", ".", "command", "(", "\n", "name", "=", "'run_example_debug'", ",", "\n", "context_settings", "=", "{", "'ignore_unknown_options'", ":", "True", "}", ")", "\n", "@", "click", ".", "argument", "(", "\"example_module_name\"", ",", "required", "=", "True", ",", "type", "=", "str", ")", "\n", "@", "click", ".", "argument", "(", "'example_argv'", ",", "nargs", "=", "-", "1", ",", "type", "=", "click", ".", "UNPROCESSED", ")", "\n", "def", "run_example_debug_cmd", "(", "example_module_name", ",", "example_argv", ")", ":", "\n", "    ", "\"\"\"The debug mode limits tune trial runs to enable use of debugger.\"\"\"", "\n", "return", "run_example_debug", "(", "example_module_name", ",", "example_argv", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.scripts.console_scripts.run_example_cluster_cmd": [[84, 96], ["cli.command", "click.argument", "click.argument", "examples.instrument.run_example_cluster"], "function", ["home.repos.pwc.inspect_result.YaoYao1995_MEEE.examples.instrument.run_example_cluster"], ["", "@", "cli", ".", "command", "(", "\n", "name", "=", "'run_example_cluster'", ",", "\n", "context_settings", "=", "{", "'ignore_unknown_options'", ":", "True", "}", ")", "\n", "@", "click", ".", "argument", "(", "\"example_module_name\"", ",", "required", "=", "True", ",", "type", "=", "str", ")", "\n", "@", "click", ".", "argument", "(", "'example_argv'", ",", "nargs", "=", "-", "1", ",", "type", "=", "click", ".", "UNPROCESSED", ")", "\n", "def", "run_example_cluster_cmd", "(", "example_module_name", ",", "example_argv", ")", ":", "\n", "    ", "\"\"\"Run example on cluster mode.\n\n    This functions is very similar to the local mode, except that it\n    correctly sets the redis address to make ray/tune work on a cluster.\n    \"\"\"", "\n", "run_example_cluster", "(", "example_module_name", ",", "example_argv", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.scripts.console_scripts.launch_example_cluster_cmd": [[98, 146], ["cli.command", "click.argument", "click.argument", "click.option", "click.option", "click.option", "click.option", "click.option", "click.option", "click.option", "examples.instrument.launch_example_cluster"], "function", ["home.repos.pwc.inspect_result.YaoYao1995_MEEE.examples.instrument.launch_example_cluster"], ["", "@", "cli", ".", "command", "(", "\n", "name", "=", "'launch_example_cluster'", ",", "\n", "context_settings", "=", "{", "\n", "'allow_extra_args'", ":", "True", ",", "\n", "'ignore_unknown_options'", ":", "True", "\n", "}", ")", "\n", "@", "click", ".", "argument", "(", "\"example_module_name\"", ",", "required", "=", "True", ",", "type", "=", "str", ")", "\n", "@", "click", ".", "argument", "(", "'example_argv'", ",", "nargs", "=", "-", "1", ",", "type", "=", "click", ".", "UNPROCESSED", ")", "\n", "@", "click", ".", "option", "(", "\n", "\"--config_file\"", ",", "\n", "required", "=", "False", ",", "\n", "type", "=", "str", ")", "\n", "@", "click", ".", "option", "(", "\n", "\"--stop/--no-stop\"", ",", "\n", "is_flag", "=", "True", ",", "\n", "default", "=", "True", ",", "\n", "help", "=", "\"Stop the cluster after the command finishes running.\"", ")", "\n", "@", "click", ".", "option", "(", "\n", "\"--start/--no-start\"", ",", "\n", "is_flag", "=", "True", ",", "\n", "default", "=", "True", ",", "\n", "help", "=", "\"Start the cluster if needed.\"", ")", "\n", "@", "click", ".", "option", "(", "\n", "\"--screen/--no-screen\"", ",", "\n", "is_flag", "=", "True", ",", "\n", "default", "=", "False", ",", "\n", "help", "=", "\"Run the command in a screen.\"", ")", "\n", "@", "click", ".", "option", "(", "\n", "\"--tmux/--no-tmux\"", ",", "\n", "is_flag", "=", "True", ",", "\n", "default", "=", "True", ",", "\n", "help", "=", "\"Run the command in tmux.\"", ")", "\n", "@", "click", ".", "option", "(", "\n", "\"--override-cluster-name\"", ",", "\n", "required", "=", "False", ",", "\n", "type", "=", "str", ",", "\n", "help", "=", "\"Override the configured cluster name.\"", ")", "\n", "@", "click", ".", "option", "(", "\n", "\"--port-forward\"", ",", "required", "=", "False", ",", "type", "=", "int", ",", "help", "=", "\"Port to forward.\"", ")", "\n", "def", "launch_example_cluster_cmd", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Launches the example on autoscaled ray cluster through ray exec_cmd.\n\n    This handles basic validation and sanity checks for the experiment, and\n    then executes the command on autoscaled ray cluster. If necessary, it will\n    also fill in more useful defaults for our workflow (i.e. for tmux and\n    override_cluster_name).\n    \"\"\"", "\n", "return", "launch_example_cluster", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.scripts.console_scripts.launch_example_gce_cmd": [[148, 165], ["cli.command", "console_scripts.add_options", "examples.instrument.launch_example_gce"], "function", ["home.repos.pwc.inspect_result.YaoYao1995_MEEE.scripts.console_scripts.add_options", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.examples.instrument.launch_example_gce"], ["", "@", "cli", ".", "command", "(", "\n", "name", "=", "'launch_example_gce'", ",", "\n", "context_settings", "=", "{", "\n", "'allow_extra_args'", ":", "True", ",", "\n", "'ignore_unknown_options'", ":", "True", "\n", "}", ")", "\n", "@", "add_options", "(", "launch_example_cluster_cmd", ".", "params", ")", "\n", "def", "launch_example_gce_cmd", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Forwards call to `launch_example_cluster` after adding gce defaults.\n\n    This optionally sets the ray autoscaler configuration file to the default\n    gce configuration file, and then calls `launch_example_cluster` to\n    execute the original command on autoscaled gce cluster by parsing the args.\n\n    See `launch_example_cluster` for further details.\n    \"\"\"", "\n", "return", "launch_example_gce", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.scripts.console_scripts.launch_example_ec2_cmd": [[167, 184], ["cli.command", "console_scripts.add_options", "examples.instrument.launch_example_ec2"], "function", ["home.repos.pwc.inspect_result.YaoYao1995_MEEE.scripts.console_scripts.add_options", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.examples.instrument.launch_example_ec2"], ["", "@", "cli", ".", "command", "(", "\n", "name", "=", "'launch_example_ec2'", ",", "\n", "context_settings", "=", "{", "\n", "'allow_extra_args'", ":", "True", ",", "\n", "'ignore_unknown_options'", ":", "True", "\n", "}", ")", "\n", "@", "add_options", "(", "launch_example_cluster_cmd", ".", "params", ")", "\n", "def", "launch_example_ec2_cmd", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Forwards call to `launch_example_cluster` after adding ec2 defaults.\n\n    This optionally sets the ray autoscaler configuration file to the default\n    ec2 configuration file, and then calls `launch_example_cluster` to\n    execute the original command on autoscaled ec2 cluster by parsing the args.\n\n    See `launch_example_cluster` for further details.\n    \"\"\"", "\n", "return", "launch_example_ec2", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.scripts.console_scripts.main": [[11, 13], ["console_scripts.cli"], "function", ["home.repos.pwc.inspect_result.YaoYao1995_MEEE.scripts.console_scripts.cli"], []], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.models.feedforward.feedforward_model": [[7, 46], ["softlearning.utils.keras.PicklableKerasModel", "tensorflow.keras.layers.Input", "tensorflow.keras.layers.Lambda", "tensorflow.keras.layers.Dense", "len", "preprocessor", "zip", "tensorflow.keras.layers.Dense", "tensorflow.concat"], "function", ["None"], ["def", "feedforward_model", "(", "input_shapes", ",", "\n", "output_size", ",", "\n", "hidden_layer_sizes", ",", "\n", "activation", "=", "'relu'", ",", "\n", "output_activation", "=", "'linear'", ",", "\n", "preprocessors", "=", "None", ",", "\n", "name", "=", "'feedforward_model'", ",", "\n", "*", "args", ",", "\n", "**", "kwargs", ")", ":", "\n", "    ", "inputs", "=", "[", "\n", "tf", ".", "keras", ".", "layers", ".", "Input", "(", "shape", "=", "input_shape", ")", "\n", "for", "input_shape", "in", "input_shapes", "\n", "]", "\n", "\n", "if", "preprocessors", "is", "None", ":", "\n", "        ", "preprocessors", "=", "(", "None", ",", ")", "*", "len", "(", "inputs", ")", "\n", "\n", "", "preprocessed_inputs", "=", "[", "\n", "preprocessor", "(", "input_", ")", "if", "preprocessor", "is", "not", "None", "else", "input_", "\n", "for", "preprocessor", ",", "input_", "in", "zip", "(", "preprocessors", ",", "inputs", ")", "\n", "]", "\n", "\n", "concatenated", "=", "tf", ".", "keras", ".", "layers", ".", "Lambda", "(", "\n", "lambda", "x", ":", "tf", ".", "concat", "(", "x", ",", "axis", "=", "-", "1", ")", "\n", ")", "(", "preprocessed_inputs", ")", "\n", "\n", "out", "=", "concatenated", "\n", "for", "units", "in", "hidden_layer_sizes", ":", "\n", "        ", "out", "=", "tf", ".", "keras", ".", "layers", ".", "Dense", "(", "\n", "units", ",", "*", "args", ",", "activation", "=", "activation", ",", "**", "kwargs", "\n", ")", "(", "out", ")", "\n", "\n", "", "out", "=", "tf", ".", "keras", ".", "layers", ".", "Dense", "(", "\n", "output_size", ",", "*", "args", ",", "activation", "=", "output_activation", ",", "**", "kwargs", "\n", ")", "(", "out", ")", "\n", "\n", "model", "=", "PicklableKerasModel", "(", "inputs", ",", "out", ",", "name", "=", "name", ")", "\n", "\n", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.models.utils.build_metric_learner_from_variant": [[1, 12], ["metric_learner_params.update", "MetricLearner"], "function", ["home.repos.pwc.inspect_result.YaoYao1995_MEEE.utils.logging.Progress.update"], ["import", "multiprocessing", "\n", "import", "argparse", "\n", "from", "distutils", ".", "util", "import", "strtobool", "\n", "import", "json", "\n", "\n", "from", "ray", ".", "tune", "import", "sample_from", "\n", "\n", "import", "softlearning", ".", "algorithms", ".", "utils", "as", "alg_utils", "\n", "import", "softlearning", ".", "environments", ".", "utils", "as", "env_utils", "\n", "from", "softlearning", ".", "misc", ".", "utils", "import", "datetimestamp", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.models.utils.get_model_from_variant": [[14, 16], ["None"], "function", ["None"], ["DEFAULT_DOMAIN", "=", "'HalfCheetah'", "\n", "DEFAULT_TASK", "=", "'v2'", "\n", "DEFAULT_ALGORITHM", "=", "'MEEE'", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.models.fc.FC.__init__": [[23, 46], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "output_dim", ",", "input_dim", "=", "None", ",", "\n", "activation", "=", "None", ",", "weight_decay", "=", "None", ",", "ensemble_size", "=", "1", ")", ":", "\n", "        ", "\"\"\"Initializes a fully connected layer.\n\n        Arguments:\n            output_dim: (int) The dimensionality of the output of this layer.\n            input_dim: (int/None) The dimensionality of the input of this layer.\n            activation: (str/None) The activation function applied on the outputs.\n                                    See FC._activations to see the list of allowed strings.\n                                    None applies the identity function.\n            weight_decay: (float) The rate of weight decay applied to the weights of this layer.\n            ensemble_size: (int) The number of networks in the ensemble within which this layer will be used.\n        \"\"\"", "\n", "# Set layer parameters", "\n", "self", ".", "input_dim", ",", "self", ".", "output_dim", "=", "input_dim", ",", "output_dim", "\n", "self", ".", "activation", "=", "activation", "\n", "self", ".", "weight_decay", "=", "weight_decay", "\n", "self", ".", "ensemble_size", "=", "ensemble_size", "\n", "\n", "# Initialize internal state", "\n", "self", ".", "variables_constructed", "=", "False", "\n", "self", ".", "weights", ",", "self", ".", "biases", "=", "None", ",", "None", "\n", "self", ".", "decays", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.models.fc.FC.__repr__": [[47, 51], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "\"FC(output_dim={!r}, input_dim={!r}, activation={!r}, weight_decay={!r}, ensemble_size={!r})\"", ".", "format", "(", "\n", "self", ".", "output_dim", ",", "self", ".", "input_dim", ",", "self", ".", "activation", ",", "self", ".", "weight_decay", ",", "self", ".", "ensemble_size", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.models.fc.FC.get_model_vars": [[54, 59], ["sess.run", "weights[].copy", "biases[].copy"], "methods", ["home.repos.pwc.inspect_result.YaoYao1995_MEEE.adapters.softlearning_env.SoftlearningEnv.copy", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.adapters.softlearning_env.SoftlearningEnv.copy"], ["", "def", "get_model_vars", "(", "self", ",", "idx", ",", "sess", ")", ":", "\n", "        ", "weights", ",", "biases", "=", "sess", ".", "run", "(", "[", "self", ".", "weights", ",", "self", ".", "biases", "]", ")", "\n", "weight", "=", "weights", "[", "idx", "]", ".", "copy", "(", ")", "\n", "bias", "=", "biases", "[", "idx", "]", ".", "copy", "(", ")", "\n", "return", "{", "'weights'", ":", "weight", ",", "'biases'", ":", "bias", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.models.fc.FC.set_model_vars": [[60, 63], ["getattr().assign", "variables.items", "getattr"], "methods", ["None"], ["", "def", "set_model_vars", "(", "self", ",", "variables", ")", ":", "\n", "        ", "ops", "=", "[", "getattr", "(", "self", ",", "attr", ")", ".", "assign", "(", "var", ")", "for", "attr", ",", "var", "in", "variables", ".", "items", "(", ")", "]", "\n", "return", "ops", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.models.fc.FC.reset": [[64, 67], ["sess.run", "sess.run"], "methods", ["None"], ["", "def", "reset", "(", "self", ",", "sess", ")", ":", "\n", "        ", "sess", ".", "run", "(", "self", ".", "weights", ".", "initializer", ")", "\n", "sess", ".", "run", "(", "self", ".", "biases", ".", "initializer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.models.fc.FC.compute_output_tensor": [[72, 94], ["len", "tensorflow.einsum", "ValueError", "len", "tensorflow.matmul"], "methods", ["None"], ["", "def", "compute_output_tensor", "(", "self", ",", "input_tensor", ")", ":", "\n", "        ", "\"\"\"Returns the resulting tensor when all operations of this layer are applied to input_tensor.\n\n        If input_tensor is 2D, this method returns a 3D tensor representing the output of each\n        layer in the ensemble on the input_tensor. Otherwise, if the input_tensor is 3D, the output\n        is also 3D, where output[i] = layer_ensemble[i](input[i]).\n\n        Arguments:\n            input_tensor: (tf.Tensor) The input to the layer.\n\n        Returns: The output of the layer, as described above.\n        \"\"\"", "\n", "# Get raw layer outputs", "\n", "if", "len", "(", "input_tensor", ".", "shape", ")", "==", "2", ":", "\n", "            ", "raw_output", "=", "tf", ".", "einsum", "(", "\"ij,ajk->aik\"", ",", "input_tensor", ",", "self", ".", "weights", ")", "+", "self", ".", "biases", "\n", "", "elif", "len", "(", "input_tensor", ".", "shape", ")", "==", "3", "and", "input_tensor", ".", "shape", "[", "0", "]", ".", "value", "==", "self", ".", "ensemble_size", ":", "\n", "            ", "raw_output", "=", "tf", ".", "matmul", "(", "input_tensor", ",", "self", ".", "weights", ")", "+", "self", ".", "biases", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid input dimension.\"", ")", "\n", "\n", "# Apply activations if necessary", "\n", "", "return", "FC", ".", "_activations", "[", "self", ".", "activation", "]", "(", "raw_output", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.models.fc.FC.get_decays": [[95, 102], ["None"], "methods", ["None"], ["", "def", "get_decays", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the list of losses corresponding to the weight decay imposed on each weight of the\n        network.\n\n        Returns: the list of weight decay losses.\n        \"\"\"", "\n", "return", "self", ".", "decays", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.models.fc.FC.copy": [[103, 116], ["eval", "repr"], "methods", ["None"], ["", "def", "copy", "(", "self", ",", "sess", "=", "None", ")", ":", "\n", "        ", "\"\"\"Returns a Layer object with the same parameters as this layer.\n\n        Arguments:\n            sess: (tf.Session/None) session containing the current values of the variables to be copied.\n                  Must be passed in to copy values.\n            copy_vals: (bool) Indicates whether variable values will be copied over.\n                       Ignored if the variables of this layer has not yet been constructed.\n\n        Returns: The copied layer.\n        \"\"\"", "\n", "new_layer", "=", "eval", "(", "repr", "(", "self", ")", ")", "\n", "return", "new_layer", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.models.fc.FC.construct_vars": [[121, 146], ["tensorflow.get_variable", "tensorflow.get_variable", "RuntimeError", "tensorflow.truncated_normal_initializer", "tensorflow.constant_initializer", "tensorflow.multiply", "tensorflow.nn.l2_loss", "numpy.sqrt"], "methods", ["None"], ["", "def", "construct_vars", "(", "self", ")", ":", "\n", "        ", "\"\"\"Constructs the variables of this fully-connected layer.\n\n        Returns: None\n        \"\"\"", "\n", "if", "self", ".", "variables_constructed", ":", "# Ignore calls to this function once variables are constructed.", "\n", "            ", "return", "\n", "", "if", "self", ".", "input_dim", "is", "None", "or", "self", ".", "output_dim", "is", "None", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"Cannot construct variables without fully specifying input and output dimensions.\"", ")", "\n", "\n", "# Construct variables", "\n", "", "self", ".", "weights", "=", "tf", ".", "get_variable", "(", "\n", "\"FC_weights\"", ",", "\n", "shape", "=", "[", "self", ".", "ensemble_size", ",", "self", ".", "input_dim", ",", "self", ".", "output_dim", "]", ",", "\n", "initializer", "=", "tf", ".", "truncated_normal_initializer", "(", "stddev", "=", "1", "/", "(", "2", "*", "np", ".", "sqrt", "(", "self", ".", "input_dim", ")", ")", ")", "\n", ")", "\n", "self", ".", "biases", "=", "tf", ".", "get_variable", "(", "\n", "\"FC_biases\"", ",", "\n", "shape", "=", "[", "self", ".", "ensemble_size", ",", "1", ",", "self", ".", "output_dim", "]", ",", "\n", "initializer", "=", "tf", ".", "constant_initializer", "(", "0.0", ")", "\n", ")", "\n", "\n", "if", "self", ".", "weight_decay", "is", "not", "None", ":", "\n", "            ", "self", ".", "decays", "=", "[", "tf", ".", "multiply", "(", "self", ".", "weight_decay", ",", "tf", ".", "nn", ".", "l2_loss", "(", "self", ".", "weights", ")", ",", "name", "=", "\"weight_decay\"", ")", "]", "\n", "", "self", ".", "variables_constructed", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.models.fc.FC.get_vars": [[147, 151], ["None"], "methods", ["None"], ["", "def", "get_vars", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the variables of this layer.\n        \"\"\"", "\n", "return", "[", "self", ".", "weights", ",", "self", ".", "biases", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.models.fc.FC.get_input_dim": [[156, 162], ["None"], "methods", ["None"], ["", "def", "get_input_dim", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the dimension of the input.\n\n        Returns: The dimension of the input\n        \"\"\"", "\n", "return", "self", ".", "input_dim", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.models.fc.FC.set_input_dim": [[163, 174], ["RuntimeError"], "methods", ["None"], ["", "def", "set_input_dim", "(", "self", ",", "input_dim", ")", ":", "\n", "        ", "\"\"\"Sets the dimension of the input.\n\n        Arguments:\n            input_dim: (int) The dimension of the input.\n\n        Returns: None\n        \"\"\"", "\n", "if", "self", ".", "variables_constructed", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"Variables already constructed.\"", ")", "\n", "", "self", ".", "input_dim", "=", "input_dim", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.models.fc.FC.get_output_dim": [[175, 181], ["None"], "methods", ["None"], ["", "def", "get_output_dim", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the dimension of the output.\n\n        Returns: The dimension of the output.\n        \"\"\"", "\n", "return", "self", ".", "output_dim", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.models.fc.FC.set_output_dim": [[182, 193], ["RuntimeError"], "methods", ["None"], ["", "def", "set_output_dim", "(", "self", ",", "output_dim", ")", ":", "\n", "        ", "\"\"\"Sets the dimension of the output.\n\n        Arguments:\n            output_dim: (int) The dimension of the output.\n\n        Returns: None.\n        \"\"\"", "\n", "if", "self", ".", "variables_constructed", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"Variables already constructed.\"", ")", "\n", "", "self", ".", "output_dim", "=", "output_dim", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.models.fc.FC.get_activation": [[194, 207], ["None"], "methods", ["None"], ["", "def", "get_activation", "(", "self", ",", "as_func", "=", "True", ")", ":", "\n", "        ", "\"\"\"Returns the current activation function for this layer.\n\n        Arguments:\n            as_func: (bool) Determines whether the returned value is the string corresponding\n                     to the activation function or the activation function itself.\n\n        Returns: The activation function (string/function, see as_func argument for details).\n        \"\"\"", "\n", "if", "as_func", ":", "\n", "            ", "return", "FC", ".", "_activations", "[", "self", ".", "activation", "]", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "activation", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.models.fc.FC.set_activation": [[208, 219], ["RuntimeError"], "methods", ["None"], ["", "", "def", "set_activation", "(", "self", ",", "activation", ")", ":", "\n", "        ", "\"\"\"Sets the activation function for this layer.\n\n        Arguments:\n            activation: (str) The activation function to be used.\n\n        Returns: None.\n        \"\"\"", "\n", "if", "self", ".", "variables_constructed", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"Variables already constructed.\"", ")", "\n", "", "self", ".", "activation", "=", "activation", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.models.fc.FC.unset_activation": [[220, 228], ["fc.FC.set_activation", "RuntimeError"], "methods", ["home.repos.pwc.inspect_result.YaoYao1995_MEEE.models.fc.FC.set_activation"], ["", "def", "unset_activation", "(", "self", ")", ":", "\n", "        ", "\"\"\"Removes the currently set activation function for this layer.\n\n        Returns: None\n        \"\"\"", "\n", "if", "self", ".", "variables_constructed", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"Variables already constructed.\"", ")", "\n", "", "self", ".", "set_activation", "(", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.models.fc.FC.get_weight_decay": [[229, 235], ["None"], "methods", ["None"], ["", "def", "get_weight_decay", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the current rate of weight decay set for this layer.\n\n        Returns: The weight decay rate.\n        \"\"\"", "\n", "return", "self", ".", "weight_decay", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.models.fc.FC.set_weight_decay": [[236, 245], ["tensorflow.multiply", "tensorflow.nn.l2_loss"], "methods", ["None"], ["", "def", "set_weight_decay", "(", "self", ",", "weight_decay", ")", ":", "\n", "        ", "\"\"\"Sets the current weight decay rate for this layer.\n\n        Returns: None\n        \"\"\"", "\n", "self", ".", "weight_decay", "=", "weight_decay", "\n", "if", "self", ".", "variables_constructed", ":", "\n", "            ", "if", "self", ".", "weight_decay", "is", "not", "None", ":", "\n", "                ", "self", ".", "decays", "=", "[", "tf", ".", "multiply", "(", "self", ".", "weight_decay", ",", "tf", ".", "nn", ".", "l2_loss", "(", "self", ".", "weights", ")", ",", "name", "=", "\"weight_decay\"", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.models.fc.FC.unset_weight_decay": [[246, 254], ["fc.FC.set_weight_decay"], "methods", ["home.repos.pwc.inspect_result.YaoYao1995_MEEE.models.fc.FC.set_weight_decay"], ["", "", "", "def", "unset_weight_decay", "(", "self", ")", ":", "\n", "        ", "\"\"\"Removes weight decay from this layer.\n\n        Returns: None\n        \"\"\"", "\n", "self", ".", "set_weight_decay", "(", "None", ")", "\n", "if", "self", ".", "variables_constructed", ":", "\n", "            ", "self", ".", "decays", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.models.fc.FC.set_ensemble_size": [[255, 259], ["RuntimeError"], "methods", ["None"], ["", "", "def", "set_ensemble_size", "(", "self", ",", "ensemble_size", ")", ":", "\n", "        ", "if", "self", ".", "variables_constructed", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"Variables already constructed.\"", ")", "\n", "", "self", ".", "ensemble_size", "=", "ensemble_size", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.models.fc.FC.get_ensemble_size": [[260, 262], ["None"], "methods", ["None"], ["", "def", "get_ensemble_size", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "ensemble_size", "\n", "", "", ""]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.models.bnn.BNN.__init__": [[28, 88], ["mbpo.models.utils.get_required_argument", "params.get", "print", "params.get", "params.get", "tensorflow.ConfigProto", "tensorflow.Session", "params.get", "bnn.BNN._load_structure", "print", "params.get", "print", "print", "ValueError", "bnn.BNN.layers[].get_ensemble_size"], "methods", ["home.repos.pwc.inspect_result.YaoYao1995_MEEE.models.utils.get_required_argument", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.models.bnn.BNN._load_structure", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.models.fc.FC.get_ensemble_size"], ["def", "__init__", "(", "self", ",", "params", ")", ":", "\n", "        ", "\"\"\"Initializes a class instance.\n\n        Arguments:\n            params (DotMap): A dotmap of model parameters.\n                .name (str): Model name, used for logging/use in variable scopes.\n                    Warning: Models with the same name will overwrite each other.\n                .num_networks (int): (optional) The number of networks in the ensemble. Defaults to 1.\n                    Ignored if model is being loaded.\n                .model_dir (str/None): (optional) Path to directory from which model will be loaded, and\n                    saved by default. Defaults to None.\n                .load_model (bool): (optional) If True, model will be loaded from the model directory,\n                    assuming that the files are generated by a model of the same name. Defaults to False.\n                .sess (tf.Session/None): The session that this model will use.\n                    If None, creates a session with its own associated graph. Defaults to None.\n        \"\"\"", "\n", "self", ".", "name", "=", "get_required_argument", "(", "params", ",", "'name'", ",", "'Must provide name.'", ")", "\n", "self", ".", "model_dir", "=", "params", ".", "get", "(", "'model_dir'", ",", "None", ")", "\n", "\n", "print", "(", "'[ BNN ] Initializing model: {} | {} networks | {} elites'", ".", "format", "(", "params", "[", "'name'", "]", ",", "params", "[", "'num_networks'", "]", ",", "params", "[", "'num_elites'", "]", ")", ")", "\n", "if", "params", ".", "get", "(", "'sess'", ",", "None", ")", "is", "None", ":", "\n", "            ", "config", "=", "tf", ".", "ConfigProto", "(", ")", "\n", "# config.gpu_options.allow_growth = True", "\n", "self", ".", "_sess", "=", "tf", ".", "Session", "(", "config", "=", "config", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "_sess", "=", "params", ".", "get", "(", "'sess'", ")", "\n", "\n", "# Instance variables", "\n", "", "self", ".", "finalized", "=", "False", "\n", "self", ".", "layers", ",", "self", ".", "max_logvar", ",", "self", ".", "min_logvar", "=", "[", "]", ",", "None", ",", "None", "\n", "self", ".", "decays", ",", "self", ".", "optvars", ",", "self", ".", "nonoptvars", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "self", ".", "end_act", ",", "self", ".", "end_act_name", "=", "None", ",", "None", "\n", "self", ".", "scaler", "=", "None", "\n", "\n", "# Training objects", "\n", "self", ".", "optimizer", "=", "None", "\n", "self", ".", "sy_train_in", ",", "self", ".", "sy_train_targ", "=", "None", ",", "None", "\n", "self", ".", "train_op", ",", "self", ".", "mse_loss", "=", "None", ",", "None", "\n", "\n", "# Prediction objects", "\n", "self", ".", "sy_pred_in2d", ",", "self", ".", "sy_pred_mean2d_fac", ",", "self", ".", "sy_pred_var2d_fac", "=", "None", ",", "None", ",", "None", "\n", "self", ".", "sy_pred_mean2d", ",", "self", ".", "sy_pred_var2d", "=", "None", ",", "None", "\n", "self", ".", "sy_pred_in3d", ",", "self", ".", "sy_pred_mean3d_fac", ",", "self", ".", "sy_pred_var3d_fac", "=", "None", ",", "None", ",", "None", "\n", "\n", "if", "params", ".", "get", "(", "'load_model'", ",", "False", ")", ":", "\n", "            ", "if", "self", ".", "model_dir", "is", "None", ":", "\n", "                ", "raise", "ValueError", "(", "\"Cannot load model without providing model directory.\"", ")", "\n", "", "self", ".", "_load_structure", "(", ")", "\n", "self", ".", "num_nets", ",", "self", ".", "model_loaded", "=", "self", ".", "layers", "[", "0", "]", ".", "get_ensemble_size", "(", ")", ",", "True", "\n", "print", "(", "\"Model loaded from %s.\"", "%", "self", ".", "model_dir", ")", "\n", "self", ".", "num_elites", "=", "params", "[", "'num_elites'", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "num_nets", "=", "params", ".", "get", "(", "'num_networks'", ",", "1", ")", "\n", "self", ".", "num_elites", "=", "params", "[", "'num_elites'", "]", "#params.get('num_elites', 1)", "\n", "self", ".", "model_loaded", "=", "False", "\n", "\n", "", "if", "self", ".", "num_nets", "==", "1", ":", "\n", "            ", "print", "(", "\"Created a neural network with variance predictions.\"", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"Created an ensemble of {} neural networks with variance predictions | Elites: {}\"", ".", "format", "(", "self", ".", "num_nets", ",", "self", ".", "num_elites", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.models.bnn.BNN.is_probabilistic": [[89, 92], ["None"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "is_probabilistic", "(", "self", ")", ":", "\n", "        ", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.models.bnn.BNN.is_tf_model": [[93, 96], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "is_tf_model", "(", "self", ")", ":", "\n", "        ", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.models.bnn.BNN.sess": [[97, 100], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "sess", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_sess", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.models.bnn.BNN.add": [[105, 125], ["layer.set_ensemble_size", "bnn.BNN.layers.append", "RuntimeError", "ValueError", "RuntimeError", "len", "layer.set_input_dim", "layer.copy", "len", "layer.get_input_dim", "bnn.BNN.layers[].get_output_dim"], "methods", ["home.repos.pwc.inspect_result.YaoYao1995_MEEE.models.fc.FC.set_ensemble_size", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.models.fc.FC.set_input_dim", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.adapters.softlearning_env.SoftlearningEnv.copy", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.models.fc.FC.get_input_dim", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.models.fc.FC.get_output_dim"], ["", "def", "add", "(", "self", ",", "layer", ")", ":", "\n", "        ", "\"\"\"Adds a new layer to the network.\n\n        Arguments:\n            layer: (layer) The new layer to be added to the network.\n                   If this is the first layer, the input dimension of the layer must be set.\n\n        Returns: None.\n        \"\"\"", "\n", "if", "self", ".", "finalized", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"Cannot modify network structure after finalizing.\"", ")", "\n", "", "if", "len", "(", "self", ".", "layers", ")", "==", "0", "and", "layer", ".", "get_input_dim", "(", ")", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Must set input dimension for the first layer.\"", ")", "\n", "", "if", "self", ".", "model_loaded", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"Cannot add layers to a loaded model.\"", ")", "\n", "\n", "", "layer", ".", "set_ensemble_size", "(", "self", ".", "num_nets", ")", "\n", "if", "len", "(", "self", ".", "layers", ")", ">", "0", ":", "\n", "            ", "layer", ".", "set_input_dim", "(", "self", ".", "layers", "[", "-", "1", "]", ".", "get_output_dim", "(", ")", ")", "\n", "", "self", ".", "layers", ".", "append", "(", "layer", ".", "copy", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.models.bnn.BNN.pop": [[126, 139], ["bnn.BNN.layers.pop", "len", "RuntimeError", "RuntimeError", "RuntimeError"], "methods", ["home.repos.pwc.inspect_result.YaoYao1995_MEEE.models.bnn.BNN.pop"], ["", "def", "pop", "(", "self", ")", ":", "\n", "        ", "\"\"\"Removes and returns the most recently added layer to the network.\n\n        Returns: (layer) The removed layer.\n        \"\"\"", "\n", "if", "len", "(", "self", ".", "layers", ")", "==", "0", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"Network is empty.\"", ")", "\n", "", "if", "self", ".", "finalized", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"Cannot modify network structure after finalizing.\"", ")", "\n", "", "if", "self", ".", "model_loaded", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"Cannot remove layers from a loaded model.\"", ")", "\n", "\n", "", "return", "self", ".", "layers", ".", "pop", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.models.bnn.BNN.finalize": [[140, 225], ["optimizer", "bnn.BNN.layers[].set_output_dim", "bnn.BNN.layers[].get_activation", "bnn.BNN.layers[].get_activation", "bnn.BNN.layers[].unset_activation", "bnn.BNN.optvars.extend", "bnn.BNN.nonoptvars.extend", "bnn.BNN.sess.run", "len", "RuntimeError", "RuntimeError", "bnn.BNN.sess.as_default", "bnn.BNN.scaler.get_vars", "tensorflow.variable_scope", "optimizer", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.reduce_sum", "tensorflow.add_n", "bnn.BNN._compile_losses", "bnn.BNN.optimizer.minimize", "tensorflow.variables_initializer", "tensorflow.variable_scope", "tensorflow.placeholder", "bnn.BNN.create_prediction_tensors", "tensorflow.reduce_mean", "tensorflow.placeholder", "bnn.BNN.create_prediction_tensors", "bnn.BNN.layers[].get_output_dim", "tensorflow.variable_scope", "mbpo.models.utils.TensorStandardScaler", "tensorflow.Variable", "tensorflow.Variable", "enumerate", "bnn.BNN._compile_losses", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "bnn.BNN.sess.as_default", "scipy.io.loadmat", "enumerate", "bnn.BNN.layers[].get_input_dim", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "bnn.BNN.optimizer.variables", "tensorflow.square", "os.path.join", "var.load", "numpy.ones", "tensorflow.variable_scope", "layer.construct_vars", "bnn.BNN.decays.extend", "bnn.BNN.optvars.extend", "bnn.BNN.layers[].get_input_dim", "bnn.BNN.layers[].get_input_dim", "bnn.BNN.layers[].get_input_dim", "numpy.ones", "layer.get_decays", "layer.get_vars", "bnn.BNN.layers[].get_output_dim", "str", "bnn.BNN.layers[].get_output_dim", "bnn.BNN.layers[].get_output_dim"], "methods", ["home.repos.pwc.inspect_result.YaoYao1995_MEEE.models.fc.FC.set_output_dim", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.models.fc.FC.get_activation", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.models.fc.FC.get_activation", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.models.fc.FC.unset_activation", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.models.utils.TensorStandardScaler.get_vars", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.models.bnn.BNN._compile_losses", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.models.bnn.BNN.create_prediction_tensors", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.models.bnn.BNN.create_prediction_tensors", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.models.fc.FC.get_output_dim", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.models.bnn.BNN._compile_losses", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.models.fc.FC.get_input_dim", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.models.fc.FC.construct_vars", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.models.fc.FC.get_input_dim", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.models.fc.FC.get_input_dim", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.models.fc.FC.get_input_dim", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.models.fc.FC.get_decays", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.models.utils.TensorStandardScaler.get_vars", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.models.fc.FC.get_output_dim", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.models.fc.FC.get_output_dim", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.models.fc.FC.get_output_dim"], ["", "def", "finalize", "(", "self", ",", "optimizer", ",", "optimizer_args", "=", "None", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Finalizes the network.\n\n        Arguments:\n            optimizer: (tf.train.Optimizer) An optimizer class from those available at tf.train.Optimizer.\n            optimizer_args: (dict) A dictionary of arguments for the __init__ method of the chosen optimizer.\n\n        Returns: None\n        \"\"\"", "\n", "if", "len", "(", "self", ".", "layers", ")", "==", "0", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"Cannot finalize an empty network.\"", ")", "\n", "", "if", "self", ".", "finalized", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"Can only finalize a network once.\"", ")", "\n", "\n", "", "optimizer_args", "=", "{", "}", "if", "optimizer_args", "is", "None", "else", "optimizer_args", "\n", "self", ".", "optimizer", "=", "optimizer", "(", "**", "optimizer_args", ")", "\n", "\n", "# Add variance output.", "\n", "self", ".", "layers", "[", "-", "1", "]", ".", "set_output_dim", "(", "2", "*", "self", ".", "layers", "[", "-", "1", "]", ".", "get_output_dim", "(", ")", ")", "\n", "\n", "# Remove last activation to isolate variance from activation function.", "\n", "self", ".", "end_act", "=", "self", ".", "layers", "[", "-", "1", "]", ".", "get_activation", "(", ")", "\n", "self", ".", "end_act_name", "=", "self", ".", "layers", "[", "-", "1", "]", ".", "get_activation", "(", "as_func", "=", "False", ")", "\n", "self", ".", "layers", "[", "-", "1", "]", ".", "unset_activation", "(", ")", "\n", "\n", "# Construct all variables.", "\n", "with", "self", ".", "sess", ".", "as_default", "(", ")", ":", "\n", "            ", "with", "tf", ".", "variable_scope", "(", "self", ".", "name", ")", ":", "\n", "                ", "self", ".", "scaler", "=", "TensorStandardScaler", "(", "self", ".", "layers", "[", "0", "]", ".", "get_input_dim", "(", ")", ")", "\n", "self", ".", "max_logvar", "=", "tf", ".", "Variable", "(", "np", ".", "ones", "(", "[", "1", ",", "self", ".", "layers", "[", "-", "1", "]", ".", "get_output_dim", "(", ")", "//", "2", "]", ")", "/", "2.", ",", "dtype", "=", "tf", ".", "float32", ",", "\n", "name", "=", "\"max_log_var\"", ")", "\n", "self", ".", "min_logvar", "=", "tf", ".", "Variable", "(", "-", "np", ".", "ones", "(", "[", "1", ",", "self", ".", "layers", "[", "-", "1", "]", ".", "get_output_dim", "(", ")", "//", "2", "]", ")", "*", "10.", ",", "dtype", "=", "tf", ".", "float32", ",", "\n", "name", "=", "\"min_log_var\"", ")", "\n", "for", "i", ",", "layer", "in", "enumerate", "(", "self", ".", "layers", ")", ":", "\n", "                    ", "with", "tf", ".", "variable_scope", "(", "\"Layer%i\"", "%", "i", ")", ":", "\n", "                        ", "layer", ".", "construct_vars", "(", ")", "\n", "self", ".", "decays", ".", "extend", "(", "layer", ".", "get_decays", "(", ")", ")", "\n", "self", ".", "optvars", ".", "extend", "(", "layer", ".", "get_vars", "(", ")", ")", "\n", "", "", "", "", "self", ".", "optvars", ".", "extend", "(", "[", "self", ".", "max_logvar", ",", "self", ".", "min_logvar", "]", ")", "\n", "self", ".", "nonoptvars", ".", "extend", "(", "self", ".", "scaler", ".", "get_vars", "(", ")", ")", "\n", "\n", "# Set up training", "\n", "with", "tf", ".", "variable_scope", "(", "self", ".", "name", ")", ":", "\n", "            ", "self", ".", "optimizer", "=", "optimizer", "(", "**", "optimizer_args", ")", "\n", "self", ".", "sy_train_in", "=", "tf", ".", "placeholder", "(", "dtype", "=", "tf", ".", "float32", ",", "\n", "shape", "=", "[", "self", ".", "num_nets", ",", "None", ",", "self", ".", "layers", "[", "0", "]", ".", "get_input_dim", "(", ")", "]", ",", "\n", "name", "=", "\"training_inputs\"", ")", "\n", "self", ".", "sy_train_targ", "=", "tf", ".", "placeholder", "(", "dtype", "=", "tf", ".", "float32", ",", "\n", "shape", "=", "[", "self", ".", "num_nets", ",", "None", ",", "self", ".", "layers", "[", "-", "1", "]", ".", "get_output_dim", "(", ")", "//", "2", "]", ",", "\n", "name", "=", "\"training_targets\"", ")", "\n", "train_loss", "=", "tf", ".", "reduce_sum", "(", "self", ".", "_compile_losses", "(", "self", ".", "sy_train_in", ",", "self", ".", "sy_train_targ", ",", "inc_var_loss", "=", "True", ")", ")", "\n", "train_loss", "+=", "tf", ".", "add_n", "(", "self", ".", "decays", ")", "\n", "train_loss", "+=", "0.01", "*", "tf", ".", "reduce_sum", "(", "self", ".", "max_logvar", ")", "-", "0.01", "*", "tf", ".", "reduce_sum", "(", "self", ".", "min_logvar", ")", "\n", "self", ".", "mse_loss", "=", "self", ".", "_compile_losses", "(", "self", ".", "sy_train_in", ",", "self", ".", "sy_train_targ", ",", "inc_var_loss", "=", "False", ")", "\n", "\n", "self", ".", "train_op", "=", "self", ".", "optimizer", ".", "minimize", "(", "train_loss", ",", "var_list", "=", "self", ".", "optvars", ")", "\n", "\n", "# Initialize all variables", "\n", "", "self", ".", "sess", ".", "run", "(", "tf", ".", "variables_initializer", "(", "self", ".", "optvars", "+", "self", ".", "nonoptvars", "+", "self", ".", "optimizer", ".", "variables", "(", ")", ")", ")", "\n", "\n", "# Set up prediction", "\n", "with", "tf", ".", "variable_scope", "(", "self", ".", "name", ")", ":", "\n", "            ", "self", ".", "sy_pred_in2d", "=", "tf", ".", "placeholder", "(", "dtype", "=", "tf", ".", "float32", ",", "\n", "shape", "=", "[", "None", ",", "self", ".", "layers", "[", "0", "]", ".", "get_input_dim", "(", ")", "]", ",", "\n", "name", "=", "\"2D_training_inputs\"", ")", "\n", "self", ".", "sy_pred_mean2d_fac", ",", "self", ".", "sy_pred_var2d_fac", "=", "self", ".", "create_prediction_tensors", "(", "self", ".", "sy_pred_in2d", ",", "factored", "=", "True", ")", "\n", "self", ".", "sy_pred_mean2d", "=", "tf", ".", "reduce_mean", "(", "self", ".", "sy_pred_mean2d_fac", ",", "axis", "=", "0", ")", "\n", "self", ".", "sy_pred_var2d", "=", "tf", ".", "reduce_mean", "(", "self", ".", "sy_pred_var2d_fac", ",", "axis", "=", "0", ")", "+", "tf", ".", "reduce_mean", "(", "tf", ".", "square", "(", "self", ".", "sy_pred_mean2d_fac", "-", "self", ".", "sy_pred_mean2d", ")", ",", "axis", "=", "0", ")", "\n", "\n", "self", ".", "sy_pred_in3d", "=", "tf", ".", "placeholder", "(", "dtype", "=", "tf", ".", "float32", ",", "\n", "shape", "=", "[", "self", ".", "num_nets", ",", "None", ",", "self", ".", "layers", "[", "0", "]", ".", "get_input_dim", "(", ")", "]", ",", "\n", "name", "=", "\"3D_training_inputs\"", ")", "\n", "self", ".", "sy_pred_mean3d_fac", ",", "self", ".", "sy_pred_var3d_fac", "=", "self", ".", "create_prediction_tensors", "(", "self", ".", "sy_pred_in3d", ",", "factored", "=", "True", ")", "\n", "\n", "# Load model if needed", "\n", "", "if", "self", ".", "model_loaded", ":", "\n", "            ", "with", "self", ".", "sess", ".", "as_default", "(", ")", ":", "\n", "                ", "params_dict", "=", "loadmat", "(", "os", ".", "path", ".", "join", "(", "self", ".", "model_dir", ",", "\"%s.mat\"", "%", "self", ".", "name", ")", ")", "\n", "all_vars", "=", "self", ".", "nonoptvars", "+", "self", ".", "optvars", "\n", "for", "i", ",", "var", "in", "enumerate", "(", "all_vars", ")", ":", "\n", "                    ", "var", ".", "load", "(", "params_dict", "[", "str", "(", "i", ")", "]", ")", "\n", "", "", "", "self", ".", "finalized", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.models.bnn.BNN._save_state": [[230, 232], ["layer.get_model_vars"], "methods", ["home.repos.pwc.inspect_result.YaoYao1995_MEEE.models.fc.FC.get_model_vars"], ["", "def", "_save_state", "(", "self", ",", "idx", ")", ":", "\n", "        ", "self", ".", "_state", "[", "idx", "]", "=", "[", "layer", ".", "get_model_vars", "(", "idx", ",", "self", ".", "sess", ")", "for", "layer", "in", "self", ".", "layers", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.models.bnn.BNN._set_state": [[233, 242], ["len", "range", "bnn.BNN.sess.run", "ops.extend", "numpy.stack", "bnn.BNN.layers[].set_model_vars", "range"], "methods", ["home.repos.pwc.inspect_result.YaoYao1995_MEEE.models.fc.FC.set_model_vars"], ["", "def", "_set_state", "(", "self", ")", ":", "\n", "        ", "keys", "=", "[", "'weights'", ",", "'biases'", "]", "\n", "ops", "=", "[", "]", "\n", "num_layers", "=", "len", "(", "self", ".", "layers", ")", "\n", "for", "layer", "in", "range", "(", "num_layers", ")", ":", "\n", "# net_state = self._state[i]", "\n", "            ", "params", "=", "{", "key", ":", "np", ".", "stack", "(", "[", "self", ".", "_state", "[", "net", "]", "[", "layer", "]", "[", "key", "]", "for", "net", "in", "range", "(", "self", ".", "num_nets", ")", "]", ")", "for", "key", "in", "keys", "}", "\n", "ops", ".", "extend", "(", "self", ".", "layers", "[", "layer", "]", ".", "set_model_vars", "(", "params", ")", ")", "\n", "", "self", ".", "sess", ".", "run", "(", "ops", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.models.bnn.BNN._save_best": [[243, 266], ["range", "len", "bnn.BNN._save_state"], "methods", ["home.repos.pwc.inspect_result.YaoYao1995_MEEE.models.bnn.BNN._save_state"], ["", "def", "_save_best", "(", "self", ",", "epoch", ",", "holdout_losses", ")", ":", "\n", "        ", "updated", "=", "False", "\n", "for", "i", "in", "range", "(", "len", "(", "holdout_losses", ")", ")", ":", "\n", "            ", "current", "=", "holdout_losses", "[", "i", "]", "\n", "_", ",", "best", "=", "self", ".", "_snapshots", "[", "i", "]", "\n", "improvement", "=", "(", "best", "-", "current", ")", "/", "best", "\n", "if", "improvement", ">", "0.01", ":", "\n", "                ", "self", ".", "_snapshots", "[", "i", "]", "=", "(", "epoch", ",", "current", ")", "\n", "self", ".", "_save_state", "(", "i", ")", "\n", "updated", "=", "True", "\n", "improvement", "=", "(", "best", "-", "current", ")", "/", "best", "\n", "# print('epoch {} | updated {} | improvement: {:.4f} | best: {:.4f} | current: {:.4f}'.format(epoch, i, improvement, best, current))", "\n", "\n", "", "", "if", "updated", ":", "\n", "            ", "self", ".", "_epochs_since_update", "=", "0", "\n", "", "else", ":", "\n", "            ", "self", ".", "_epochs_since_update", "+=", "1", "\n", "\n", "", "if", "self", ".", "_epochs_since_update", ">", "self", ".", "_max_epochs_since_update", ":", "\n", "# print('[ BNN ] Breaking at epoch {}: {} epochs since update ({} max)'.format(epoch, self._epochs_since_update, self._max_epochs_since_update))", "\n", "            ", "return", "True", "\n", "", "else", ":", "\n", "            ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.models.bnn.BNN._start_train": [[267, 271], ["range"], "methods", ["None"], ["", "", "def", "_start_train", "(", "self", ")", ":", "\n", "        ", "self", ".", "_state", "=", "{", "}", "\n", "self", ".", "_snapshots", "=", "{", "i", ":", "(", "None", ",", "1e10", ")", "for", "i", "in", "range", "(", "self", ".", "num_nets", ")", "}", "\n", "self", ".", "_epochs_since_update", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.models.bnn.BNN._end_train": [[272, 276], ["numpy.argsort", "sorted_inds[].tolist", "print"], "methods", ["None"], ["", "def", "_end_train", "(", "self", ",", "holdout_losses", ")", ":", "\n", "        ", "sorted_inds", "=", "np", ".", "argsort", "(", "holdout_losses", ")", "\n", "self", ".", "_model_inds", "=", "sorted_inds", "[", ":", "self", ".", "num_elites", "]", ".", "tolist", "(", ")", "\n", "print", "(", "'Using {} / {} models: {}'", ".", "format", "(", "self", ".", "num_elites", ",", "self", ".", "num_nets", ",", "self", ".", "_model_inds", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.models.bnn.BNN.random_inds": [[277, 280], ["numpy.random.choice"], "methods", ["None"], ["", "def", "random_inds", "(", "self", ",", "batch_size", ")", ":", "\n", "        ", "inds", "=", "np", ".", "random", ".", "choice", "(", "self", ".", "_model_inds", ",", "size", "=", "batch_size", ")", "\n", "return", "inds", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.models.bnn.BNN.reset": [[281, 284], ["print", "layer.reset"], "methods", ["home.repos.pwc.inspect_result.YaoYao1995_MEEE.adapters.softlearning_env.SoftlearningEnv.reset"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "print", "(", "'[ BNN ] Resetting model'", ")", "\n", "[", "layer", ".", "reset", "(", "self", ".", "sess", ")", "for", "layer", "in", "self", ".", "layers", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.models.bnn.BNN.validate": [[285, 297], ["numpy.tile", "numpy.tile", "bnn.BNN.sess.run", "[].mean", "numpy.sort"], "methods", ["None"], ["", "def", "validate", "(", "self", ",", "inputs", ",", "targets", ")", ":", "\n", "        ", "inputs", "=", "np", ".", "tile", "(", "inputs", "[", "None", "]", ",", "[", "self", ".", "num_nets", ",", "1", ",", "1", "]", ")", "\n", "targets", "=", "np", ".", "tile", "(", "targets", "[", "None", "]", ",", "[", "self", ".", "num_nets", ",", "1", ",", "1", "]", ")", "\n", "losses", "=", "self", ".", "sess", ".", "run", "(", "\n", "self", ".", "mse_loss", ",", "\n", "feed_dict", "=", "{", "\n", "self", ".", "sy_train_in", ":", "inputs", ",", "\n", "self", ".", "sy_train_targ", ":", "targets", "\n", "}", "\n", ")", "\n", "mean_elite_loss", "=", "np", ".", "sort", "(", "losses", ")", "[", ":", "self", ".", "num_elites", "]", ".", "mean", "(", ")", "\n", "return", "mean_elite_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.models.bnn.BNN.train": [[302, 430], ["bnn.BNN._start_train", "min", "numpy.random.permutation", "numpy.tile", "numpy.tile", "print", "numpy.random.randint", "time.time", "mbpo.utils.logging.Progress.stamp", "bnn.BNN._set_state", "bnn.BNN.sess.run", "bnn.BNN._end_train", "[].mean", "print", "collections.OrderedDict", "numpy.argsort", "int", "bnn.BNN.sess.as_default", "bnn.BNN.scaler.fit", "mbpo.utils.logging.Silent", "mbpo.utils.logging.Progress", "range", "itertools.count", "range", "bnn.BNN.train.shuffle_rows"], "methods", ["home.repos.pwc.inspect_result.YaoYao1995_MEEE.models.bnn.BNN._start_train", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.utils.logging.Progress.stamp", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.models.bnn.BNN._set_state", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.models.bnn.BNN._end_train", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.models.utils.TensorStandardScaler.fit"], ["", "def", "train", "(", "self", ",", "inputs", ",", "targets", ",", "\n", "batch_size", "=", "32", ",", "max_epochs", "=", "None", ",", "max_epochs_since_update", "=", "5", ",", "\n", "hide_progress", "=", "False", ",", "holdout_ratio", "=", "0.0", ",", "max_logging", "=", "5000", ",", "max_grad_updates", "=", "None", ",", "timer", "=", "None", ",", "max_t", "=", "None", ")", ":", "\n", "        ", "\"\"\"Trains/Continues network training\n\n        Arguments:\n            inputs (np.ndarray): Network inputs in the training dataset in rows.\n            targets (np.ndarray): Network target outputs in the training dataset in rows corresponding\n                to the rows in inputs.\n            batch_size (int): The minibatch size to be used for training.\n            epochs (int): Number of epochs (full network passes that will be done.\n            hide_progress (bool): If True, hides the progress bar shown at the beginning of training.\n\n        Returns: None\n        \"\"\"", "\n", "self", ".", "_max_epochs_since_update", "=", "max_epochs_since_update", "\n", "self", ".", "_start_train", "(", ")", "\n", "break_train", "=", "False", "\n", "\n", "def", "shuffle_rows", "(", "arr", ")", ":", "\n", "            ", "idxs", "=", "np", ".", "argsort", "(", "np", ".", "random", ".", "uniform", "(", "size", "=", "arr", ".", "shape", ")", ",", "axis", "=", "-", "1", ")", "\n", "return", "arr", "[", "np", ".", "arange", "(", "arr", ".", "shape", "[", "0", "]", ")", "[", ":", ",", "None", "]", ",", "idxs", "]", "\n", "\n", "# Split into training and holdout sets", "\n", "", "num_holdout", "=", "min", "(", "int", "(", "inputs", ".", "shape", "[", "0", "]", "*", "holdout_ratio", ")", ",", "max_logging", ")", "\n", "permutation", "=", "np", ".", "random", ".", "permutation", "(", "inputs", ".", "shape", "[", "0", "]", ")", "\n", "inputs", ",", "holdout_inputs", "=", "inputs", "[", "permutation", "[", "num_holdout", ":", "]", "]", ",", "inputs", "[", "permutation", "[", ":", "num_holdout", "]", "]", "\n", "targets", ",", "holdout_targets", "=", "targets", "[", "permutation", "[", "num_holdout", ":", "]", "]", ",", "targets", "[", "permutation", "[", ":", "num_holdout", "]", "]", "\n", "holdout_inputs", "=", "np", ".", "tile", "(", "holdout_inputs", "[", "None", "]", ",", "[", "self", ".", "num_nets", ",", "1", ",", "1", "]", ")", "\n", "holdout_targets", "=", "np", ".", "tile", "(", "holdout_targets", "[", "None", "]", ",", "[", "self", ".", "num_nets", ",", "1", ",", "1", "]", ")", "\n", "\n", "print", "(", "'[ BNN ] Training {} | Holdout: {}'", ".", "format", "(", "inputs", ".", "shape", ",", "holdout_inputs", ".", "shape", ")", ")", "\n", "with", "self", ".", "sess", ".", "as_default", "(", ")", ":", "\n", "            ", "self", ".", "scaler", ".", "fit", "(", "inputs", ")", "\n", "\n", "", "idxs", "=", "np", ".", "random", ".", "randint", "(", "inputs", ".", "shape", "[", "0", "]", ",", "size", "=", "[", "self", ".", "num_nets", ",", "inputs", ".", "shape", "[", "0", "]", "]", ")", "\n", "if", "hide_progress", ":", "\n", "            ", "progress", "=", "Silent", "(", ")", "\n", "", "else", ":", "\n", "            ", "progress", "=", "Progress", "(", "max_epochs", ")", "\n", "\n", "", "if", "max_epochs", ":", "\n", "            ", "epoch_iter", "=", "range", "(", "max_epochs", ")", "\n", "", "else", ":", "\n", "            ", "epoch_iter", "=", "itertools", ".", "count", "(", ")", "\n", "\n", "# else:", "\n", "#     epoch_range = trange(epochs, unit=\"epoch(s)\", desc=\"Network training\")", "\n", "\n", "", "t0", "=", "time", ".", "time", "(", ")", "\n", "grad_updates", "=", "0", "\n", "for", "epoch", "in", "epoch_iter", ":", "\n", "            ", "for", "batch_num", "in", "range", "(", "int", "(", "np", ".", "ceil", "(", "idxs", ".", "shape", "[", "-", "1", "]", "/", "batch_size", ")", ")", ")", ":", "\n", "                ", "batch_idxs", "=", "idxs", "[", ":", ",", "batch_num", "*", "batch_size", ":", "(", "batch_num", "+", "1", ")", "*", "batch_size", "]", "\n", "self", ".", "sess", ".", "run", "(", "\n", "self", ".", "train_op", ",", "\n", "feed_dict", "=", "{", "self", ".", "sy_train_in", ":", "inputs", "[", "batch_idxs", "]", ",", "self", ".", "sy_train_targ", ":", "targets", "[", "batch_idxs", "]", "}", "\n", ")", "\n", "grad_updates", "+=", "1", "\n", "\n", "", "idxs", "=", "shuffle_rows", "(", "idxs", ")", "\n", "if", "not", "hide_progress", ":", "\n", "                ", "if", "holdout_ratio", "<", "1e-12", ":", "\n", "                    ", "losses", "=", "self", ".", "sess", ".", "run", "(", "\n", "self", ".", "mse_loss", ",", "\n", "feed_dict", "=", "{", "\n", "self", ".", "sy_train_in", ":", "inputs", "[", "idxs", "[", ":", ",", ":", "max_logging", "]", "]", ",", "\n", "self", ".", "sy_train_targ", ":", "targets", "[", "idxs", "[", ":", ",", ":", "max_logging", "]", "]", "\n", "}", "\n", ")", "\n", "named_losses", "=", "[", "[", "'M{}'", ".", "format", "(", "i", ")", ",", "losses", "[", "i", "]", "]", "for", "i", "in", "range", "(", "len", "(", "losses", ")", ")", "]", "\n", "progress", ".", "set_description", "(", "named_losses", ")", "\n", "", "else", ":", "\n", "                    ", "losses", "=", "self", ".", "sess", ".", "run", "(", "\n", "self", ".", "mse_loss", ",", "\n", "feed_dict", "=", "{", "\n", "self", ".", "sy_train_in", ":", "inputs", "[", "idxs", "[", ":", ",", ":", "max_logging", "]", "]", ",", "\n", "self", ".", "sy_train_targ", ":", "targets", "[", "idxs", "[", ":", ",", ":", "max_logging", "]", "]", "\n", "}", "\n", ")", "\n", "holdout_losses", "=", "self", ".", "sess", ".", "run", "(", "\n", "self", ".", "mse_loss", ",", "\n", "feed_dict", "=", "{", "\n", "self", ".", "sy_train_in", ":", "holdout_inputs", ",", "\n", "self", ".", "sy_train_targ", ":", "holdout_targets", "\n", "}", "\n", ")", "\n", "named_losses", "=", "[", "[", "'M{}'", ".", "format", "(", "i", ")", ",", "losses", "[", "i", "]", "]", "for", "i", "in", "range", "(", "len", "(", "losses", ")", ")", "]", "\n", "named_holdout_losses", "=", "[", "[", "'V{}'", ".", "format", "(", "i", ")", ",", "holdout_losses", "[", "i", "]", "]", "for", "i", "in", "range", "(", "len", "(", "holdout_losses", ")", ")", "]", "\n", "named_losses", "=", "named_losses", "+", "named_holdout_losses", "+", "[", "[", "'T'", ",", "time", ".", "time", "(", ")", "-", "t0", "]", "]", "\n", "progress", ".", "set_description", "(", "named_losses", ")", "\n", "\n", "break_train", "=", "self", ".", "_save_best", "(", "epoch", ",", "holdout_losses", ")", "\n", "\n", "", "", "progress", ".", "update", "(", ")", "\n", "t", "=", "time", ".", "time", "(", ")", "-", "t0", "\n", "if", "break_train", "or", "(", "max_grad_updates", "and", "grad_updates", ">", "max_grad_updates", ")", ":", "\n", "                ", "break", "\n", "", "if", "max_t", "and", "t", ">", "max_t", ":", "\n", "                ", "descr", "=", "'Breaking because of timeout: {}! (max: {})'", ".", "format", "(", "t", ",", "max_t", ")", "\n", "progress", ".", "append_description", "(", "descr", ")", "\n", "# print('Breaking because of timeout: {}! | (max: {})\\n'.format(t, max_t))", "\n", "# time.sleep(5)", "\n", "break", "\n", "\n", "", "", "progress", ".", "stamp", "(", ")", "\n", "if", "timer", ":", "timer", ".", "stamp", "(", "'bnn_train'", ")", "\n", "\n", "self", ".", "_set_state", "(", ")", "\n", "if", "timer", ":", "timer", ".", "stamp", "(", "'bnn_set_state'", ")", "\n", "\n", "holdout_losses", "=", "self", ".", "sess", ".", "run", "(", "\n", "self", ".", "mse_loss", ",", "\n", "feed_dict", "=", "{", "\n", "self", ".", "sy_train_in", ":", "holdout_inputs", ",", "\n", "self", ".", "sy_train_targ", ":", "holdout_targets", "\n", "}", "\n", ")", "\n", "\n", "if", "timer", ":", "timer", ".", "stamp", "(", "'bnn_holdout'", ")", "\n", "\n", "self", ".", "_end_train", "(", "holdout_losses", ")", "\n", "if", "timer", ":", "timer", ".", "stamp", "(", "'bnn_end'", ")", "\n", "\n", "val_loss", "=", "(", "np", ".", "sort", "(", "holdout_losses", ")", "[", ":", "self", ".", "num_elites", "]", ")", ".", "mean", "(", ")", "\n", "model_metrics", "=", "{", "'val_loss'", ":", "val_loss", "}", "\n", "print", "(", "'[ BNN ] Holdout'", ",", "np", ".", "sort", "(", "holdout_losses", ")", ",", "model_metrics", ")", "\n", "return", "OrderedDict", "(", "model_metrics", ")", "\n", "# return np.sort(holdout_losses)[]", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.models.bnn.BNN.predict": [[434, 471], ["len", "bnn.BNN.sess.run", "bnn.BNN.sess.run", "bnn.BNN.sess.run"], "methods", ["None"], ["", "def", "predict", "(", "self", ",", "inputs", ",", "factored", "=", "False", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Returns the distribution predicted by the model for each input vector in inputs.\n        Behavior is affected by the dimensionality of inputs and factored as follows:\n\n        inputs is 2D, factored=True: Each row is treated as an input vector.\n            Returns a mean of shape [ensemble_size, batch_size, output_dim] and variance of shape\n            [ensemble_size, batch_size, output_dim], where N(mean[i, j, :], diag([i, j, :])) is the\n            predicted output distribution by the ith model in the ensemble on input vector j.\n\n        inputs is 2D, factored=False: Each row is treated as an input vector.\n            Returns a mean of shape [batch_size, output_dim] and variance of shape\n            [batch_size, output_dim], where aggregation is performed as described in the paper.\n\n        inputs is 3D, factored=True/False: Each row in the last dimension is treated as an input vector.\n            Returns a mean of shape [ensemble_size, batch_size, output_dim] and variance of sha\n            [ensemble_size, batch_size, output_dim], where N(mean[i, j, :], diag([i, j, :])) is the\n            predicted output distribution by the ith model in the ensemble on input vector [i, j].\n\n        Arguments:\n            inputs (np.ndarray): An array of input vectors in rows. See above for behavior.\n            factored (bool): See above for behavior.\n        \"\"\"", "\n", "if", "len", "(", "inputs", ".", "shape", ")", "==", "2", ":", "\n", "            ", "if", "factored", ":", "\n", "                ", "return", "self", ".", "sess", ".", "run", "(", "\n", "[", "self", ".", "sy_pred_mean2d_fac", ",", "self", ".", "sy_pred_var2d_fac", "]", ",", "\n", "feed_dict", "=", "{", "self", ".", "sy_pred_in2d", ":", "inputs", "}", "\n", ")", "\n", "", "else", ":", "\n", "                ", "return", "self", ".", "sess", ".", "run", "(", "\n", "[", "self", ".", "sy_pred_mean2d", ",", "self", ".", "sy_pred_var2d", "]", ",", "\n", "feed_dict", "=", "{", "self", ".", "sy_pred_in2d", ":", "inputs", "}", "\n", ")", "\n", "", "", "else", ":", "\n", "            ", "return", "self", ".", "sess", ".", "run", "(", "\n", "[", "self", ".", "sy_pred_mean3d_fac", ",", "self", ".", "sy_pred_var3d_fac", "]", ",", "\n", "feed_dict", "=", "{", "self", ".", "sy_pred_in3d", ":", "inputs", "}", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.models.bnn.BNN.create_prediction_tensors": [[473, 483], ["bnn.BNN._compile_outputs", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.square"], "methods", ["home.repos.pwc.inspect_result.YaoYao1995_MEEE.models.bnn.BNN._compile_outputs"], ["", "", "def", "create_prediction_tensors", "(", "self", ",", "inputs", ",", "factored", "=", "False", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"See predict() above for documentation.\n        \"\"\"", "\n", "factored_mean", ",", "factored_variance", "=", "self", ".", "_compile_outputs", "(", "inputs", ")", "\n", "if", "inputs", ".", "shape", ".", "ndims", "==", "2", "and", "not", "factored", ":", "\n", "            ", "mean", "=", "tf", ".", "reduce_mean", "(", "factored_mean", ",", "axis", "=", "0", ")", "\n", "variance", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "square", "(", "factored_mean", "-", "mean", ")", ",", "axis", "=", "0", ")", "+", "tf", ".", "reduce_mean", "(", "factored_variance", ",", "axis", "=", "0", ")", "\n", "return", "mean", ",", "variance", "\n", "", "return", "factored_mean", ",", "factored_variance", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.models.bnn.BNN.save": [[484, 510], ["enumerate", "scipy.io.savemat", "RuntimeError", "open", "bnn.BNN.layers[].copy", "bnn.BNN.set_activation", "bnn.BNN.set_output_dim", "f.write", "bnn.BNN.sess.run", "os.path.join", "os.path.join", "f.write", "bnn.BNN.get_output_dim", "repr", "str", "repr"], "methods", ["home.repos.pwc.inspect_result.YaoYao1995_MEEE.adapters.softlearning_env.SoftlearningEnv.copy", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.models.fc.FC.set_activation", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.models.fc.FC.set_output_dim", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.models.fc.FC.get_output_dim"], ["", "def", "save", "(", "self", ",", "savedir", ",", "timestep", ")", ":", "\n", "        ", "\"\"\"Saves all information required to recreate this model in two files in savedir\n        (or self.model_dir if savedir is None), one containing the model structuure and the other\n        containing all variables in the network.\n\n        savedir (str): (Optional) Path to which files will be saved. If not provided, self.model_dir\n            (the directory provided at initialization) will be used.\n        \"\"\"", "\n", "if", "not", "self", ".", "finalized", ":", "\n", "            ", "raise", "RuntimeError", "(", ")", "\n", "", "model_dir", "=", "self", ".", "model_dir", "if", "savedir", "is", "None", "else", "savedir", "\n", "\n", "# Write structure to file", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "model_dir", ",", "'{}_{}.nns'", ".", "format", "(", "self", ".", "name", ",", "timestep", ")", ")", ",", "\"w+\"", ")", "as", "f", ":", "\n", "            ", "for", "layer", "in", "self", ".", "layers", "[", ":", "-", "1", "]", ":", "\n", "                ", "f", ".", "write", "(", "\"%s\\n\"", "%", "repr", "(", "layer", ")", ")", "\n", "", "last_layer_copy", "=", "self", ".", "layers", "[", "-", "1", "]", ".", "copy", "(", ")", "\n", "last_layer_copy", ".", "set_activation", "(", "self", ".", "end_act_name", ")", "\n", "last_layer_copy", ".", "set_output_dim", "(", "last_layer_copy", ".", "get_output_dim", "(", ")", "//", "2", ")", "\n", "f", ".", "write", "(", "\"%s\\n\"", "%", "repr", "(", "last_layer_copy", ")", ")", "\n", "\n", "# Save network parameters (including scalers) in a .mat file", "\n", "", "var_vals", "=", "{", "}", "\n", "for", "i", ",", "var_val", "in", "enumerate", "(", "self", ".", "sess", ".", "run", "(", "self", ".", "nonoptvars", "+", "self", ".", "optvars", ")", ")", ":", "\n", "            ", "var_vals", "[", "str", "(", "i", ")", "]", "=", "var_val", "\n", "", "savemat", "(", "os", ".", "path", ".", "join", "(", "model_dir", ",", "'{}_{}.mat'", ".", "format", "(", "self", ".", "name", ",", "timestep", ")", ")", ",", "var_vals", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.models.bnn.BNN._load_structure": [[511, 529], ["open", "os.path.join", "int", "int", "int", "structure.append", "float", "mbpo.models.fc.FC", "argval.split", "line[].split"], "methods", ["None"], ["", "def", "_load_structure", "(", "self", ")", ":", "\n", "        ", "\"\"\"Uses the saved structure in self.model_dir with the name of this network to initialize\n        the structure of this network.\n        \"\"\"", "\n", "structure", "=", "[", "]", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "model_dir", ",", "\"%s.nns\"", "%", "self", ".", "name", ")", ",", "\"r\"", ")", "as", "f", ":", "\n", "            ", "for", "line", "in", "f", ":", "\n", "                ", "kwargs", "=", "{", "\n", "key", ":", "val", "for", "(", "key", ",", "val", ")", "in", "\n", "[", "argval", ".", "split", "(", "\"=\"", ")", "for", "argval", "in", "line", "[", "3", ":", "-", "2", "]", ".", "split", "(", "\", \"", ")", "]", "\n", "}", "\n", "kwargs", "[", "\"input_dim\"", "]", "=", "int", "(", "kwargs", "[", "\"input_dim\"", "]", ")", "\n", "kwargs", "[", "\"output_dim\"", "]", "=", "int", "(", "kwargs", "[", "\"output_dim\"", "]", ")", "\n", "kwargs", "[", "\"weight_decay\"", "]", "=", "None", "if", "kwargs", "[", "\"weight_decay\"", "]", "==", "\"None\"", "else", "float", "(", "kwargs", "[", "\"weight_decay\"", "]", ")", "\n", "kwargs", "[", "\"activation\"", "]", "=", "None", "if", "kwargs", "[", "\"activation\"", "]", "==", "\"None\"", "else", "kwargs", "[", "\"activation\"", "]", "[", "1", ":", "-", "1", "]", "\n", "kwargs", "[", "\"ensemble_size\"", "]", "=", "int", "(", "kwargs", "[", "\"ensemble_size\"", "]", ")", "\n", "structure", ".", "append", "(", "FC", "(", "**", "kwargs", ")", ")", "\n", "", "", "self", ".", "layers", "=", "structure", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.models.bnn.BNN._compile_outputs": [[534, 563], ["bnn.BNN.layers[].get_output_dim", "bnn.BNN.scaler.transform", "layer.compute_output_tensor", "bnn.BNN.end_act", "tensorflow.nn.softplus", "tensorflow.nn.softplus", "tensorflow.exp"], "methods", ["home.repos.pwc.inspect_result.YaoYao1995_MEEE.models.fc.FC.get_output_dim", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.models.utils.TensorStandardScaler.transform", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.models.fc.FC.compute_output_tensor"], ["", "def", "_compile_outputs", "(", "self", ",", "inputs", ",", "ret_log_var", "=", "False", ")", ":", "\n", "        ", "\"\"\"Compiles the output of the network at the given inputs.\n\n        If inputs is 2D, returns a 3D tensor where output[i] is the output of the ith network in the ensemble.\n        If inputs is 3D, returns a 3D tensor where output[i] is the output of the ith network on the ith input matrix.\n\n        Arguments:\n            inputs: (tf.Tensor) A tensor representing the inputs to the network\n            ret_log_var: (bool) If True, returns the log variance instead of the variance.\n\n        Returns: (tf.Tensors) The mean and variance/log variance predictions at inputs for each network\n            in the ensemble.\n        \"\"\"", "\n", "dim_output", "=", "self", ".", "layers", "[", "-", "1", "]", ".", "get_output_dim", "(", ")", "\n", "cur_out", "=", "self", ".", "scaler", ".", "transform", "(", "inputs", ")", "\n", "for", "layer", "in", "self", ".", "layers", ":", "\n", "            ", "cur_out", "=", "layer", ".", "compute_output_tensor", "(", "cur_out", ")", "\n", "\n", "", "mean", "=", "cur_out", "[", ":", ",", ":", ",", ":", "dim_output", "//", "2", "]", "\n", "if", "self", ".", "end_act", "is", "not", "None", ":", "\n", "            ", "mean", "=", "self", ".", "end_act", "(", "mean", ")", "\n", "\n", "", "logvar", "=", "self", ".", "max_logvar", "-", "tf", ".", "nn", ".", "softplus", "(", "self", ".", "max_logvar", "-", "cur_out", "[", ":", ",", ":", ",", "dim_output", "//", "2", ":", "]", ")", "\n", "logvar", "=", "self", ".", "min_logvar", "+", "tf", ".", "nn", ".", "softplus", "(", "logvar", "-", "self", ".", "min_logvar", ")", "\n", "\n", "if", "ret_log_var", ":", "\n", "            ", "return", "mean", ",", "logvar", "\n", "", "else", ":", "\n", "            ", "return", "mean", ",", "tf", ".", "exp", "(", "logvar", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.models.bnn.BNN._compile_losses": [[564, 589], ["bnn.BNN._compile_outputs", "tensorflow.exp", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.square", "tensorflow.square"], "methods", ["home.repos.pwc.inspect_result.YaoYao1995_MEEE.models.bnn.BNN._compile_outputs"], ["", "", "def", "_compile_losses", "(", "self", ",", "inputs", ",", "targets", ",", "inc_var_loss", "=", "True", ")", ":", "\n", "        ", "\"\"\"Helper method for compiling the loss function.\n\n        The loss function is obtained from the log likelihood, assuming that the output\n        distribution is Gaussian, with both mean and (diagonal) covariance matrix being determined\n        by network outputs.\n\n        Arguments:\n            inputs: (tf.Tensor) A tensor representing the input batch\n            targets: (tf.Tensor) The desired targets for each input vector in inputs.\n            inc_var_loss: (bool) If True, includes log variance loss.\n\n        Returns: (tf.Tensor) A tensor representing the loss on the input arguments.\n        \"\"\"", "\n", "mean", ",", "log_var", "=", "self", ".", "_compile_outputs", "(", "inputs", ",", "ret_log_var", "=", "True", ")", "\n", "inv_var", "=", "tf", ".", "exp", "(", "-", "log_var", ")", "\n", "\n", "if", "inc_var_loss", ":", "\n", "            ", "mse_losses", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "reduce_mean", "(", "tf", ".", "square", "(", "mean", "-", "targets", ")", "*", "inv_var", ",", "axis", "=", "-", "1", ")", ",", "axis", "=", "-", "1", ")", "\n", "var_losses", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "reduce_mean", "(", "log_var", ",", "axis", "=", "-", "1", ")", ",", "axis", "=", "-", "1", ")", "\n", "total_losses", "=", "mse_losses", "+", "var_losses", "\n", "", "else", ":", "\n", "            ", "total_losses", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "reduce_mean", "(", "tf", ".", "square", "(", "mean", "-", "targets", ")", ",", "axis", "=", "-", "1", ")", ",", "axis", "=", "-", "1", ")", "\n", "\n", "", "return", "total_losses", "", "", "", ""]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.models.constructor.construct_model": [[7, 19], ["print", "mbpo.models.bnn.BNN", "mbpo.models.bnn.BNN.add", "mbpo.models.bnn.BNN.add", "mbpo.models.bnn.BNN.add", "mbpo.models.bnn.BNN.add", "mbpo.models.bnn.BNN.add", "mbpo.models.bnn.BNN.finalize", "mbpo.models.fc.FC", "mbpo.models.fc.FC", "mbpo.models.fc.FC", "mbpo.models.fc.FC", "mbpo.models.fc.FC"], "function", ["home.repos.pwc.inspect_result.YaoYao1995_MEEE.models.bnn.BNN.add", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.models.bnn.BNN.add", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.models.bnn.BNN.add", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.models.bnn.BNN.add", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.models.bnn.BNN.add", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.models.bnn.BNN.finalize"], ["def", "construct_model", "(", "obs_dim", "=", "11", ",", "act_dim", "=", "3", ",", "rew_dim", "=", "1", ",", "hidden_dim", "=", "200", ",", "num_networks", "=", "7", ",", "num_elites", "=", "5", ",", "session", "=", "None", ")", ":", "\n", "\t", "print", "(", "'[ BNN ] Observation dim {} | Action dim: {} | Hidden dim: {}'", ".", "format", "(", "obs_dim", ",", "act_dim", ",", "hidden_dim", ")", ")", "\n", "params", "=", "{", "'name'", ":", "'BNN'", ",", "'num_networks'", ":", "num_networks", ",", "'num_elites'", ":", "num_elites", ",", "'sess'", ":", "session", "}", "\n", "model", "=", "BNN", "(", "params", ")", "\n", "\n", "model", ".", "add", "(", "FC", "(", "hidden_dim", ",", "input_dim", "=", "obs_dim", "+", "act_dim", ",", "activation", "=", "\"swish\"", ",", "weight_decay", "=", "0.000025", ")", ")", "\n", "model", ".", "add", "(", "FC", "(", "hidden_dim", ",", "activation", "=", "\"swish\"", ",", "weight_decay", "=", "0.00005", ")", ")", "\n", "model", ".", "add", "(", "FC", "(", "hidden_dim", ",", "activation", "=", "\"swish\"", ",", "weight_decay", "=", "0.000075", ")", ")", "\n", "model", ".", "add", "(", "FC", "(", "hidden_dim", ",", "activation", "=", "\"swish\"", ",", "weight_decay", "=", "0.000075", ")", ")", "\n", "model", ".", "add", "(", "FC", "(", "obs_dim", "+", "rew_dim", ",", "weight_decay", "=", "0.0001", ")", ")", "\n", "model", ".", "finalize", "(", "tf", ".", "train", ".", "AdamOptimizer", ",", "{", "\"learning_rate\"", ":", "0.001", "}", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.models.constructor.format_samples_for_training": [[20, 29], ["numpy.concatenate", "numpy.concatenate"], "function", ["None"], ["", "def", "format_samples_for_training", "(", "samples", ")", ":", "\n", "\t", "obs", "=", "samples", "[", "'observations'", "]", "\n", "act", "=", "samples", "[", "'actions'", "]", "\n", "next_obs", "=", "samples", "[", "'next_observations'", "]", "\n", "rew", "=", "samples", "[", "'rewards'", "]", "\n", "delta_obs", "=", "next_obs", "-", "obs", "\n", "inputs", "=", "np", ".", "concatenate", "(", "(", "obs", ",", "act", ")", ",", "axis", "=", "-", "1", ")", "\n", "outputs", "=", "np", ".", "concatenate", "(", "(", "rew", ",", "delta_obs", ")", ",", "axis", "=", "-", "1", ")", "\n", "return", "inputs", ",", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.models.constructor.reset_model": [[30, 33], ["tensorflow.get_collection", "model.sess.run", "tensorflow.initialize_vars"], "function", ["None"], ["", "def", "reset_model", "(", "model", ")", ":", "\n", "\t", "model_vars", "=", "tf", ".", "get_collection", "(", "tf", ".", "GraphKeys", ".", "GLOBAL_VARIABLES", ",", "scope", "=", "model", ".", "name", ")", "\n", "model", ".", "sess", ".", "run", "(", "tf", ".", "initialize_vars", "(", "model_vars", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.models.fake_env.FakeEnv.__init__": [[7, 10], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "model", ",", "config", ")", ":", "\n", "        ", "self", ".", "model", "=", "model", "\n", "self", ".", "config", "=", "config", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.models.fake_env.FakeEnv._get_logprob": [[16, 32], ["numpy.exp().sum", "numpy.log", "numpy.std().mean", "numpy.exp", "numpy.std", "numpy.log().sum", "numpy.log", "numpy.log", "numpy.power"], "methods", ["None"], ["def", "_get_logprob", "(", "self", ",", "x", ",", "means", ",", "variances", ")", ":", "\n", "\n", "        ", "k", "=", "x", ".", "shape", "[", "-", "1", "]", "\n", "\n", "## [ num_networks, batch_size ]", "\n", "log_prob", "=", "-", "1", "/", "2", "*", "(", "k", "*", "np", ".", "log", "(", "2", "*", "np", ".", "pi", ")", "+", "np", ".", "log", "(", "variances", ")", ".", "sum", "(", "-", "1", ")", "+", "(", "np", ".", "power", "(", "x", "-", "means", ",", "2", ")", "/", "variances", ")", ".", "sum", "(", "-", "1", ")", ")", "\n", "\n", "## [ batch_size ]", "\n", "prob", "=", "np", ".", "exp", "(", "log_prob", ")", ".", "sum", "(", "0", ")", "\n", "\n", "## [ batch_size ]", "\n", "log_prob", "=", "np", ".", "log", "(", "prob", ")", "\n", "\n", "stds", "=", "np", ".", "std", "(", "means", ",", "0", ")", ".", "mean", "(", "-", "1", ")", "\n", "\n", "return", "log_prob", ",", "stds", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.models.fake_env.FakeEnv.step": [[33, 79], ["numpy.concatenate", "fake_env.FakeEnv.model.predict", "numpy.sqrt", "fake_env.FakeEnv.model.random_inds", "numpy.arange", "fake_env.FakeEnv._get_logprob", "fake_env.FakeEnv.config.termination_fn", "numpy.concatenate", "numpy.concatenate", "len", "len", "len", "numpy.zeros", "numpy.random.normal"], "methods", ["home.repos.pwc.inspect_result.YaoYao1995_MEEE.models.bnn.BNN.predict", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.models.bnn.BNN.random_inds", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.models.fake_env.FakeEnv._get_logprob", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.static.walker2d.StaticFns.termination_fn"], ["", "def", "step", "(", "self", ",", "obs", ",", "act", ",", "deterministic", "=", "False", ")", ":", "\n", "        ", "assert", "len", "(", "obs", ".", "shape", ")", "==", "len", "(", "act", ".", "shape", ")", "\n", "if", "len", "(", "obs", ".", "shape", ")", "==", "1", ":", "\n", "            ", "obs", "=", "obs", "[", "None", "]", "\n", "act", "=", "act", "[", "None", "]", "\n", "return_single", "=", "True", "\n", "", "else", ":", "\n", "            ", "return_single", "=", "False", "\n", "\n", "", "inputs", "=", "np", ".", "concatenate", "(", "(", "obs", ",", "act", ")", ",", "axis", "=", "-", "1", ")", "\n", "ensemble_model_means", ",", "ensemble_model_vars", "=", "self", ".", "model", ".", "predict", "(", "inputs", ",", "factored", "=", "True", ")", "\n", "ensemble_model_means", "[", ":", ",", ":", ",", "1", ":", "]", "+=", "obs", "\n", "ensemble_model_stds", "=", "np", ".", "sqrt", "(", "ensemble_model_vars", ")", "\n", "\n", "if", "deterministic", ":", "\n", "            ", "ensemble_samples", "=", "ensemble_model_means", "\n", "", "else", ":", "\n", "            ", "ensemble_samples", "=", "ensemble_model_means", "+", "np", ".", "random", ".", "normal", "(", "size", "=", "ensemble_model_means", ".", "shape", ")", "*", "ensemble_model_stds", "\n", "\n", "#### choose one model from ensemble", "\n", "", "num_models", ",", "batch_size", ",", "_", "=", "ensemble_model_means", ".", "shape", "\n", "model_inds", "=", "self", ".", "model", ".", "random_inds", "(", "batch_size", ")", "\n", "batch_inds", "=", "np", ".", "arange", "(", "0", ",", "batch_size", ")", "\n", "samples", "=", "ensemble_samples", "[", "model_inds", ",", "batch_inds", "]", "\n", "model_means", "=", "ensemble_model_means", "[", "model_inds", ",", "batch_inds", "]", "\n", "model_stds", "=", "ensemble_model_stds", "[", "model_inds", ",", "batch_inds", "]", "\n", "####", "\n", "\n", "log_prob", ",", "dev", "=", "self", ".", "_get_logprob", "(", "samples", ",", "ensemble_model_means", ",", "ensemble_model_vars", ")", "\n", "\n", "rewards", ",", "next_obs", "=", "samples", "[", ":", ",", ":", "1", "]", ",", "samples", "[", ":", ",", "1", ":", "]", "\n", "terminals", "=", "self", ".", "config", ".", "termination_fn", "(", "obs", ",", "act", ",", "next_obs", ")", "\n", "\n", "batch_size", "=", "model_means", ".", "shape", "[", "0", "]", "\n", "return_means", "=", "np", ".", "concatenate", "(", "(", "model_means", "[", ":", ",", ":", "1", "]", ",", "terminals", ",", "model_means", "[", ":", ",", "1", ":", "]", ")", ",", "axis", "=", "-", "1", ")", "\n", "return_stds", "=", "np", ".", "concatenate", "(", "(", "model_stds", "[", ":", ",", ":", "1", "]", ",", "np", ".", "zeros", "(", "(", "batch_size", ",", "1", ")", ")", ",", "model_stds", "[", ":", ",", "1", ":", "]", ")", ",", "axis", "=", "-", "1", ")", "\n", "\n", "if", "return_single", ":", "\n", "            ", "next_obs", "=", "next_obs", "[", "0", "]", "\n", "return_means", "=", "return_means", "[", "0", "]", "\n", "return_stds", "=", "return_stds", "[", "0", "]", "\n", "rewards", "=", "rewards", "[", "0", "]", "\n", "terminals", "=", "terminals", "[", "0", "]", "\n", "\n", "", "info", "=", "{", "'mean'", ":", "return_means", ",", "'std'", ":", "return_stds", ",", "'log_prob'", ":", "log_prob", ",", "'dev'", ":", "dev", "}", "\n", "return", "next_obs", ",", "rewards", ",", "terminals", ",", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.models.fake_env.FakeEnv.step_ph": [[81, 106], ["tensorflow.concat", "fake_env.FakeEnv.model.create_prediction_tensors", "tensorflow.concat", "tensorflow.sqrt", "fake_env.FakeEnv.config.termination_ph_fn", "len", "len", "tensorflow.random.normal", "tensorflow.shape"], "methods", ["home.repos.pwc.inspect_result.YaoYao1995_MEEE.models.bnn.BNN.create_prediction_tensors"], ["", "def", "step_ph", "(", "self", ",", "obs_ph", ",", "act_ph", ",", "deterministic", "=", "False", ")", ":", "\n", "        ", "assert", "len", "(", "obs_ph", ".", "shape", ")", "==", "len", "(", "act_ph", ".", "shape", ")", "\n", "\n", "inputs", "=", "tf", ".", "concat", "(", "[", "obs_ph", ",", "act_ph", "]", ",", "axis", "=", "1", ")", "\n", "# inputs = np.concatenate((obs, act), axis=-1)", "\n", "ensemble_model_means", ",", "ensemble_model_vars", "=", "self", ".", "model", ".", "create_prediction_tensors", "(", "inputs", ",", "factored", "=", "True", ")", "\n", "# ensemble_model_means, ensemble_model_vars = self.model.predict(inputs, factored=True)", "\n", "ensemble_model_means", "=", "tf", ".", "concat", "(", "[", "ensemble_model_means", "[", ":", ",", ":", ",", "0", ":", "1", "]", ",", "ensemble_model_means", "[", ":", ",", ":", ",", "1", ":", "]", "+", "obs_ph", "[", "None", "]", "]", ",", "axis", "=", "-", "1", ")", "\n", "# ensemble_model_means[:,:,1:] += obs_ph", "\n", "ensemble_model_stds", "=", "tf", ".", "sqrt", "(", "ensemble_model_vars", ")", "\n", "# ensemble_model_stds = np.sqrt(ensemble_model_vars)", "\n", "\n", "if", "deterministic", ":", "\n", "            ", "ensemble_samples", "=", "ensemble_model_means", "\n", "", "else", ":", "\n", "# ensemble_samples = ensemble_model_means + np.random.normal(size=ensemble_model_means.shape) * ensemble_model_stds", "\n", "            ", "ensemble_samples", "=", "ensemble_model_means", "+", "tf", ".", "random", ".", "normal", "(", "tf", ".", "shape", "(", "ensemble_model_means", ")", ")", "*", "ensemble_model_stds", "\n", "\n", "", "samples", "=", "ensemble_samples", "[", "0", "]", "\n", "\n", "rewards", ",", "next_obs", "=", "samples", "[", ":", ",", ":", "1", "]", ",", "samples", "[", ":", ",", "1", ":", "]", "\n", "terminals", "=", "self", ".", "config", ".", "termination_ph_fn", "(", "obs_ph", ",", "act_ph", ",", "next_obs", ")", "\n", "info", "=", "{", "}", "\n", "\n", "return", "next_obs", ",", "rewards", ",", "terminals", ",", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.models.fake_env.FakeEnv.close": [[107, 109], ["None"], "methods", ["None"], ["", "def", "close", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.models.utils.TensorStandardScaler.__init__": [[17, 37], ["tensorflow.variable_scope", "tensorflow.get_variable", "tensorflow.get_variable", "numpy.zeros", "numpy.ones", "tensorflow.constant_initializer", "tensorflow.constant_initializer"], "methods", ["None"], ["\n", "\n", "TASKS_BY_DOMAIN_BY_UNIVERSE", "=", "{", "\n", "universe", ":", "{", "\n", "domain", ":", "tuple", "(", "tasks", ")", "\n", "for", "domain", ",", "tasks", "in", "domains", ".", "items", "(", ")", "\n", "}", "\n", "for", "universe", ",", "domains", "in", "env_utils", ".", "ENVIRONMENTS", ".", "items", "(", ")", "\n", "}", "\n", "\n", "AVAILABLE_TASKS", "=", "set", "(", "sum", "(", "\n", "[", "\n", "tasks", "\n", "for", "universe", ",", "domains", "in", "TASKS_BY_DOMAIN_BY_UNIVERSE", ".", "items", "(", ")", "\n", "for", "domain", ",", "tasks", "in", "domains", ".", "items", "(", ")", "\n", "]", ",", "\n", "(", ")", ")", ")", "\n", "\n", "DOMAINS_BY_UNIVERSE", "=", "{", "\n", "universe", ":", "tuple", "(", "domains", ")", "\n", "for", "universe", ",", "domains", "in", "env_utils", ".", "ENVIRONMENTS", ".", "items", "(", ")", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.models.utils.TensorStandardScaler.fit": [[38, 56], ["numpy.mean", "numpy.std", "utils.TensorStandardScaler.mu.load", "utils.TensorStandardScaler.sigma.load", "utils.TensorStandardScaler.cache"], "methods", ["home.repos.pwc.inspect_result.YaoYao1995_MEEE.models.utils.TensorStandardScaler.cache"], ["}", "\n", "\n", "AVAILABLE_DOMAINS", "=", "set", "(", "sum", "(", "DOMAINS_BY_UNIVERSE", ".", "values", "(", ")", ",", "(", ")", ")", ")", "\n", "\n", "UNIVERSES", "=", "tuple", "(", "env_utils", ".", "ENVIRONMENTS", ")", "\n", "\n", "AVAILABLE_ALGORITHMS", "=", "set", "(", "alg_utils", ".", "ALGORITHM_CLASSES", ".", "keys", "(", ")", ")", "\n", "\n", "\n", "def", "parse_universe", "(", "env_name", ")", ":", "\n", "    ", "universe", "=", "next", "(", "\n", "(", "universe", "for", "universe", "in", "UNIVERSES", "if", "universe", "in", "env_name", ")", ",", "\n", "DEFAULT_UNIVERSE", ")", "\n", "return", "universe", "\n", "\n", "\n", "", "def", "parse_domain_task", "(", "env_name", ",", "universe", ")", ":", "\n", "    ", "env_name", "=", "env_name", ".", "replace", "(", "universe", ",", "''", ")", ".", "strip", "(", "'-'", ")", "\n", "domains", "=", "DOMAINS_BY_UNIVERSE", "[", "universe", "]", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.models.utils.TensorStandardScaler.transform": [[57, 66], ["None"], "methods", ["None"], ["domain", "=", "next", "(", "domain", "for", "domain", "in", "domains", "if", "domain", "in", "env_name", ")", "\n", "\n", "env_name", "=", "env_name", ".", "replace", "(", "domain", ",", "''", ")", ".", "strip", "(", "'-'", ")", "\n", "tasks", "=", "TASKS_BY_DOMAIN_BY_UNIVERSE", "[", "universe", "]", "[", "domain", "]", "\n", "task", "=", "next", "(", "(", "task", "for", "task", "in", "tasks", "if", "task", "==", "env_name", ")", ",", "None", ")", "\n", "\n", "if", "task", "is", "None", ":", "\n", "        ", "matching_tasks", "=", "[", "task", "for", "task", "in", "tasks", "if", "task", "in", "env_name", "]", "\n", "if", "len", "(", "matching_tasks", ")", ">", "1", ":", "\n", "            ", "raise", "ValueError", "(", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.models.utils.TensorStandardScaler.inverse_transform": [[67, 76], ["None"], "methods", ["None"], ["\"Task name cannot be unmbiguously determined: {}.\"", "\n", "\" Following task names match: {}\"", "\n", "\"\"", ".", "format", "(", "env_name", ",", "matching_tasks", ")", ")", "\n", "", "elif", "len", "(", "matching_tasks", ")", "==", "1", ":", "\n", "            ", "task", "=", "matching_tasks", "[", "-", "1", "]", "\n", "", "else", ":", "\n", "            ", "task", "=", "DEFAULT_TASK", "\n", "\n", "", "", "return", "domain", ",", "task", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.models.utils.TensorStandardScaler.get_vars": [[77, 83], ["None"], "methods", ["None"], ["\n", "", "def", "parse_universe_domain_task", "(", "args", ")", ":", "\n", "    ", "universe", ",", "domain", ",", "task", "=", "args", ".", "universe", ",", "args", ".", "domain", ",", "args", ".", "task", "\n", "\n", "if", "not", "universe", ":", "\n", "        ", "universe", "=", "parse_universe", "(", "args", ".", "env", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.models.utils.TensorStandardScaler.cache": [[84, 91], ["utils.TensorStandardScaler.mu.eval", "utils.TensorStandardScaler.sigma.eval"], "methods", ["None"], ["", "if", "(", "not", "domain", ")", "or", "(", "not", "task", ")", ":", "\n", "        ", "domain", ",", "task", "=", "parse_domain_task", "(", "args", ".", "env", ",", "universe", ")", "\n", "\n", "", "return", "universe", ",", "domain", ",", "task", "\n", "\n", "\n", "", "def", "add_ray_init_args", "(", "parser", ")", ":", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.models.utils.TensorStandardScaler.load_cache": [[92, 99], ["utils.TensorStandardScaler.mu.load", "utils.TensorStandardScaler.sigma.load"], "methods", ["None"], ["    ", "def", "init_help_string", "(", "help_string", ")", ":", "\n", "        ", "return", "help_string", "+", "\" Passed to `ray.init`.\"", "\n", "\n", "", "parser", ".", "add_argument", "(", "\n", "'--cpus'", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "init_help_string", "(", "\"Cpus to allocate to ray process.\"", ")", ")", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.models.utils.get_required_argument": [[8, 13], ["dotmap.get", "ValueError"], "function", ["None"], ["import", "softlearning", ".", "algorithms", ".", "utils", "as", "alg_utils", "\n", "import", "softlearning", ".", "environments", ".", "utils", "as", "env_utils", "\n", "from", "softlearning", ".", "misc", ".", "utils", "import", "datetimestamp", "\n", "\n", "\n", "DEFAULT_UNIVERSE", "=", "'gym'", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.mujoco.pusher_2d.Pusher2dEnv.__init__": [[34, 61], ["pusher_2d.Pusher2dEnv._Serializable__initialize", "[].astype", "gym.envs.mujoco.mujoco_env.MujocoEnv.__init__", "locals", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.YaoYao1995_MEEE.env.humanoid.HumanoidTruncatedObsEnv.__init__"], ["def", "__init__", "(", "self", ",", "\n", "goal", "=", "(", "0", ",", "-", "1", ")", ",", "\n", "arm_object_distance_cost_coeff", "=", "0", ",", "\n", "goal_object_distance_cost_coeff", "=", "1.0", ",", "\n", "ctrl_cost_coeff", "=", "0.1", ")", ":", "\n", "        ", "\"\"\"\n        goal (`list`): List of two elements denoting the x and y coordinates of\n            the goal location. Either of the coordinate can also be a string\n            'any' to make the reward not to depend on the corresponding\n            coordinate.\n        arm_distance_coeff ('float'): Coefficient for the arm-to-object distance\n            cost.\n        goal_distance_coeff ('float'): Coefficient for the object-to-goal\n            distance cost.\n        \"\"\"", "\n", "self", ".", "_Serializable__initialize", "(", "locals", "(", ")", ")", "\n", "\n", "self", ".", "_goal_mask", "=", "[", "coordinate", "!=", "'any'", "for", "coordinate", "in", "goal", "]", "\n", "self", ".", "_goal", "=", "np", ".", "array", "(", "goal", ")", "[", "self", ".", "_goal_mask", "]", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "self", ".", "_arm_object_distance_cost_coeff", "=", "arm_object_distance_cost_coeff", "\n", "self", ".", "_goal_object_distance_cost_coeff", "=", "goal_object_distance_cost_coeff", "\n", "self", ".", "_ctrl_cost_coeff", "=", "ctrl_cost_coeff", "\n", "\n", "MujocoEnv", ".", "__init__", "(", "self", ",", "model_path", "=", "self", ".", "MODEL_PATH", ",", "frame_skip", "=", "5", ")", "\n", "\n", "self", ".", "model", ".", "stat", ".", "extent", "=", "10", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.mujoco.pusher_2d.Pusher2dEnv.step": [[62, 70], ["pusher_2d.Pusher2dEnv.compute_reward", "pusher_2d.Pusher2dEnv.do_simulation", "pusher_2d.Pusher2dEnv._get_obs", "pusher_2d.Pusher2dEnv._get_obs"], "methods", ["home.repos.pwc.inspect_result.YaoYao1995_MEEE.mujoco.image_pusher_2d.ImageForkReacher2dEnv.compute_reward", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.env.humanoid.HumanoidTruncatedObsEnv._get_obs", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.env.humanoid.HumanoidTruncatedObsEnv._get_obs"], ["", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "reward", ",", "info", "=", "self", ".", "compute_reward", "(", "self", ".", "_get_obs", "(", ")", ",", "action", ")", "\n", "\n", "self", ".", "do_simulation", "(", "action", ",", "self", ".", "frame_skip", ")", "\n", "observation", "=", "self", ".", "_get_obs", "(", ")", "\n", "done", "=", "False", "\n", "\n", "return", "observation", ",", "reward", ",", "done", ",", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.mujoco.pusher_2d.Pusher2dEnv.compute_reward": [[71, 102], ["numpy.linalg.norm", "numpy.linalg.norm", "numpy.sum", "rewards.squeeze.squeeze.squeeze", "arm_object_distances.squeeze.squeeze.squeeze", "goal_object_distances.squeeze.squeeze.squeeze"], "methods", ["None"], ["", "def", "compute_reward", "(", "self", ",", "observations", ",", "actions", ")", ":", "\n", "        ", "is_batch", "=", "True", "\n", "if", "observations", ".", "ndim", "==", "1", ":", "\n", "            ", "observations", "=", "observations", "[", "None", "]", "\n", "actions", "=", "actions", "[", "None", "]", "\n", "is_batch", "=", "False", "\n", "\n", "", "arm_pos", "=", "observations", "[", ":", ",", "-", "6", ":", "-", "3", "]", "\n", "obj_pos", "=", "observations", "[", ":", ",", "-", "3", ":", "]", "\n", "obj_pos_masked", "=", "obj_pos", "[", ":", ",", ":", "2", "]", "[", ":", ",", "self", ".", "_goal_mask", "]", "\n", "\n", "goal_object_distances", "=", "np", ".", "linalg", ".", "norm", "(", "\n", "self", ".", "_goal", "[", "None", "]", "-", "obj_pos_masked", ",", "axis", "=", "1", ")", "\n", "arm_object_distances", "=", "np", ".", "linalg", ".", "norm", "(", "arm_pos", "-", "obj_pos", ",", "axis", "=", "1", ")", "\n", "ctrl_costs", "=", "np", ".", "sum", "(", "actions", "**", "2", ",", "axis", "=", "1", ")", "\n", "\n", "costs", "=", "(", "\n", "+", "self", ".", "_arm_object_distance_cost_coeff", "*", "arm_object_distances", "\n", "+", "self", ".", "_goal_object_distance_cost_coeff", "*", "goal_object_distances", "\n", "+", "self", ".", "_ctrl_cost_coeff", "*", "ctrl_costs", ")", "\n", "\n", "rewards", "=", "-", "costs", "\n", "\n", "if", "not", "is_batch", ":", "\n", "            ", "rewards", "=", "rewards", ".", "squeeze", "(", ")", "\n", "arm_object_distances", "=", "arm_object_distances", ".", "squeeze", "(", ")", "\n", "goal_object_distances", "=", "goal_object_distances", ".", "squeeze", "(", ")", "\n", "\n", "", "return", "rewards", ",", "{", "\n", "'arm_object_distance'", ":", "arm_object_distances", ",", "\n", "'goal_object_distance'", ":", "goal_object_distances", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.mujoco.pusher_2d.Pusher2dEnv.viewer_setup": [[104, 113], ["numpy.array", "range"], "methods", ["None"], ["", "def", "viewer_setup", "(", "self", ")", ":", "\n", "        ", "self", ".", "viewer", ".", "cam", ".", "trackbodyid", "=", "0", "\n", "cam_pos", "=", "np", ".", "array", "(", "[", "0", ",", "0", ",", "0", ",", "4", ",", "-", "45", ",", "0", "]", ")", "\n", "for", "i", "in", "range", "(", "3", ")", ":", "\n", "            ", "self", ".", "viewer", ".", "cam", ".", "lookat", "[", "i", "]", "=", "cam_pos", "[", "i", "]", "\n", "", "self", ".", "viewer", ".", "cam", ".", "distance", "=", "cam_pos", "[", "3", "]", "\n", "self", ".", "viewer", ".", "cam", ".", "elevation", "=", "cam_pos", "[", "4", "]", "\n", "self", ".", "viewer", ".", "cam", ".", "azimuth", "=", "cam_pos", "[", "5", "]", "\n", "self", ".", "viewer", ".", "cam", ".", "trackbodyid", "=", "-", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.mujoco.pusher_2d.Pusher2dEnv.reset_model": [[114, 139], ["pusher_2d.Pusher2dEnv.set_state", "pusher_2d.Pusher2dEnv._get_obs", "pusher_2d.Pusher2dEnv.init_qvel.copy().squeeze", "numpy.array", "numpy.array", "numpy.random.uniform", "pusher_2d.Pusher2dEnv.init_qpos.squeeze", "pusher_2d.Pusher2dEnv.init_qpos.squeeze", "numpy.random.uniform", "pusher_2d.Pusher2dEnv.init_qvel.copy"], "methods", ["home.repos.pwc.inspect_result.YaoYao1995_MEEE.env.humanoid.HumanoidTruncatedObsEnv._get_obs", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.adapters.softlearning_env.SoftlearningEnv.copy"], ["", "def", "reset_model", "(", "self", ",", "qpos", "=", "None", ",", "qvel", "=", "None", ")", ":", "\n", "        ", "if", "qpos", "is", "None", ":", "\n", "            ", "qpos", "=", "np", ".", "random", ".", "uniform", "(", "\n", "low", "=", "-", "0.1", ",", "high", "=", "0.1", ",", "size", "=", "self", ".", "model", ".", "nq", "\n", ")", "+", "self", ".", "init_qpos", ".", "squeeze", "(", ")", "\n", "qpos", "[", "self", ".", "TARGET_INDS", "]", "=", "self", ".", "init_qpos", ".", "squeeze", "(", ")", "[", "self", ".", "TARGET_INDS", "]", "\n", "\n", "puck_position", "=", "np", ".", "random", ".", "uniform", "(", "\n", "low", "=", "[", "0.3", ",", "-", "1.0", "]", ",", "high", "=", "[", "1.0", ",", "-", "0.4", "]", ")", ",", "\n", "\n", "qpos", "[", "self", ".", "PUCK_INDS", "]", "=", "puck_position", "\n", "\n", "", "if", "qvel", "is", "None", ":", "\n", "            ", "qvel", "=", "self", ".", "init_qvel", ".", "copy", "(", ")", ".", "squeeze", "(", ")", "\n", "qvel", "[", "self", ".", "PUCK_INDS", "]", "=", "0", "\n", "qvel", "[", "self", ".", "TARGET_INDS", "]", "=", "0", "\n", "\n", "# TODO: remnants from rllab -> gym conversion", "\n", "# qacc = np.zeros(self.sim.data.qacc.shape[0])", "\n", "# ctrl = np.zeros(self.sim.data.ctrl.shape[0])", "\n", "# full_state = np.concatenate((qpos, qvel, qacc, ctrl))", "\n", "\n", "", "self", ".", "set_state", "(", "np", ".", "array", "(", "qpos", ")", ",", "np", ".", "array", "(", "qvel", ")", ")", "\n", "\n", "return", "self", ".", "_get_obs", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.mujoco.pusher_2d.Pusher2dEnv._get_obs": [[140, 148], ["numpy.concatenate().reshape", "numpy.concatenate", "numpy.sin", "numpy.cos", "pusher_2d.Pusher2dEnv.get_body_com", "pusher_2d.Pusher2dEnv.get_body_com"], "methods", ["None"], ["", "def", "_get_obs", "(", "self", ")", ":", "\n", "        ", "return", "np", ".", "concatenate", "(", "[", "\n", "np", ".", "sin", "(", "self", ".", "sim", ".", "data", ".", "qpos", ".", "flat", "[", "self", ".", "JOINT_INDS", "]", ")", ",", "\n", "np", ".", "cos", "(", "self", ".", "sim", ".", "data", ".", "qpos", ".", "flat", "[", "self", ".", "JOINT_INDS", "]", ")", ",", "\n", "self", ".", "sim", ".", "data", ".", "qvel", ".", "flat", "[", "self", ".", "JOINT_INDS", "]", ",", "\n", "self", ".", "get_body_com", "(", "\"distal_4\"", ")", ",", "\n", "self", ".", "get_body_com", "(", "\"object\"", ")", ",", "\n", "]", ")", ".", "reshape", "(", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.mujoco.pusher_2d.ForkReacherEnv.__init__": [[151, 162], ["pusher_2d.ForkReacherEnv._Serializable__initialize", "pusher_2d.Pusher2dEnv.__init__", "locals"], "methods", ["home.repos.pwc.inspect_result.YaoYao1995_MEEE.env.humanoid.HumanoidTruncatedObsEnv.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "arm_goal_distance_cost_coeff", "=", "1.0", ",", "\n", "arm_object_distance_cost_coeff", "=", "0.0", ",", "\n", "*", "args", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "_Serializable__initialize", "(", "locals", "(", ")", ")", "\n", "\n", "self", ".", "_arm_goal_distance_cost_coeff", "=", "arm_goal_distance_cost_coeff", "\n", "self", ".", "_arm_object_distance_cost_coeff", "=", "arm_object_distance_cost_coeff", "\n", "\n", "super", "(", "ForkReacherEnv", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.mujoco.pusher_2d.ForkReacherEnv.compute_reward": [[163, 195], ["numpy.linalg.norm", "numpy.linalg.norm", "numpy.sum", "NotImplementedError", "rewards.squeeze.squeeze.squeeze", "arm_goal_dists.squeeze.squeeze.squeeze", "arm_object_dists.squeeze.squeeze.squeeze"], "methods", ["None"], ["", "def", "compute_reward", "(", "self", ",", "observations", ",", "actions", ")", ":", "\n", "        ", "is_batch", "=", "True", "\n", "if", "observations", ".", "ndim", "==", "1", ":", "\n", "            ", "observations", "=", "observations", "[", "None", "]", "\n", "actions", "=", "actions", "[", "None", "]", "\n", "is_batch", "=", "False", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "'Might be broken.'", ")", "\n", "\n", "", "arm_pos", "=", "observations", "[", ":", ",", "-", "8", ":", "-", "6", "]", "\n", "goal_pos", "=", "observations", "[", ":", ",", "-", "2", ":", "]", "\n", "object_pos", "=", "observations", "[", ":", ",", "-", "5", ":", "-", "3", "]", "\n", "\n", "arm_goal_dists", "=", "np", ".", "linalg", ".", "norm", "(", "arm_pos", "-", "goal_pos", ",", "axis", "=", "1", ")", "\n", "arm_object_dists", "=", "np", ".", "linalg", ".", "norm", "(", "arm_pos", "-", "object_pos", ",", "axis", "=", "1", ")", "\n", "ctrl_costs", "=", "np", ".", "sum", "(", "actions", "**", "2", ",", "axis", "=", "1", ")", "\n", "\n", "costs", "=", "(", "\n", "+", "self", ".", "_arm_goal_distance_cost_coeff", "*", "arm_goal_dists", "\n", "+", "self", ".", "_arm_object_distance_cost_coeff", "*", "arm_object_dists", "\n", "+", "self", ".", "_ctrl_cost_coeff", "*", "ctrl_costs", ")", "\n", "\n", "rewards", "=", "-", "costs", "\n", "\n", "if", "not", "is_batch", ":", "\n", "            ", "rewards", "=", "rewards", ".", "squeeze", "(", ")", "\n", "arm_goal_dists", "=", "arm_goal_dists", ".", "squeeze", "(", ")", "\n", "arm_object_dists", "=", "arm_object_dists", ".", "squeeze", "(", ")", "\n", "\n", "", "return", "rewards", ",", "{", "\n", "'arm_goal_distance'", ":", "arm_goal_dists", ",", "\n", "'arm_object_distance'", ":", "arm_object_dists", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.mujoco.pusher_2d.ForkReacherEnv.reset_model": [[197, 243], ["pusher_2d.ForkReacherEnv.set_state", "pusher_2d.ForkReacherEnv._get_obs", "numpy.array", "numpy.random.uniform", "pusher_2d.ForkReacherEnv.init_qvel.copy().squeeze", "numpy.array", "numpy.array", "numpy.random.uniform", "pusher_2d.ForkReacherEnv.init_qpos.squeeze", "softlearning.environments.helpers.random_point_in_circle", "numpy.sign", "numpy.maximum", "numpy.abs", "numpy.where", "pusher_2d.ForkReacherEnv.init_qvel.copy"], "methods", ["home.repos.pwc.inspect_result.YaoYao1995_MEEE.env.humanoid.HumanoidTruncatedObsEnv._get_obs", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.adapters.softlearning_env.SoftlearningEnv.copy"], ["", "def", "reset_model", "(", "self", ",", "qpos", "=", "None", ",", "qvel", "=", "None", ")", ":", "\n", "        ", "if", "qpos", "is", "None", ":", "\n", "            ", "qpos", "=", "np", ".", "random", ".", "uniform", "(", "\n", "low", "=", "-", "0.1", ",", "high", "=", "0.1", ",", "size", "=", "self", ".", "model", ".", "nq", "\n", ")", "+", "self", ".", "init_qpos", ".", "squeeze", "(", ")", "\n", "\n", "# qpos[self.JOINT_INDS[0]] = np.random.uniform(-np.pi, np.pi)", "\n", "# qpos[self.JOINT_INDS[1]] = np.random.uniform(", "\n", "#     -np.pi/2, np.pi/2) + np.pi/4", "\n", "# qpos[self.JOINT_INDS[2]] = np.random.uniform(", "\n", "#     -np.pi/2, np.pi/2) + np.pi/2", "\n", "\n", "target_position", "=", "np", ".", "array", "(", "random_point_in_circle", "(", "\n", "angle_range", "=", "(", "0", ",", "2", "*", "np", ".", "pi", ")", ",", "radius", "=", "(", "0.6", ",", "1.2", ")", ")", ")", "\n", "target_position", "[", "1", "]", "+=", "1.0", "\n", "\n", "qpos", "[", "self", ".", "TARGET_INDS", "]", "=", "target_position", "\n", "# qpos[self.TARGET_INDS] = [1.0, 2.0]", "\n", "# qpos[self.TARGET_INDS] = self.init_qpos.squeeze()[self.TARGET_INDS]", "\n", "\n", "puck_position", "=", "np", ".", "random", ".", "uniform", "(", "[", "-", "1.0", "]", ",", "[", "1.0", "]", ",", "size", "=", "[", "2", "]", ")", "\n", "puck_position", "=", "(", "\n", "np", ".", "sign", "(", "puck_position", ")", "\n", "*", "np", ".", "maximum", "(", "np", ".", "abs", "(", "puck_position", ")", ",", "1", "/", "2", ")", ")", "\n", "puck_position", "[", "np", ".", "where", "(", "puck_position", "==", "0", ")", "]", "=", "1.0", "\n", "# puck_position[1] += 1.0", "\n", "# puck_position = np.random.uniform(", "\n", "#     low=[0.3, -1.0], high=[1.0, -0.4]),", "\n", "\n", "qpos", "[", "self", ".", "PUCK_INDS", "]", "=", "puck_position", "\n", "\n", "", "if", "qvel", "is", "None", ":", "\n", "            ", "qvel", "=", "self", ".", "init_qvel", ".", "copy", "(", ")", ".", "squeeze", "(", ")", "\n", "qvel", "[", "self", ".", "PUCK_INDS", "]", "=", "0", "\n", "qvel", "[", "self", ".", "TARGET_INDS", "]", "=", "0", "\n", "\n", "# TODO: remnants from rllab -> gym conversion", "\n", "# qacc = np.zeros(self.sim.data.qacc.shape[0])", "\n", "# ctrl = np.zeros(self.sim.data.ctrl.shape[0])", "\n", "# full_state = np.concatenate((qpos, qvel, qacc, ctrl))", "\n", "\n", "# super(Pusher2dEnv, self).reset(full_state)", "\n", "\n", "", "self", ".", "set_state", "(", "np", ".", "array", "(", "qpos", ")", ",", "np", ".", "array", "(", "qvel", ")", ")", "\n", "\n", "return", "self", ".", "_get_obs", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.mujoco.pusher_2d.ForkReacherEnv._get_obs": [[244, 250], ["pusher_2d.Pusher2dEnv._get_obs", "numpy.concatenate", "pusher_2d.ForkReacherEnv.get_body_com"], "methods", ["home.repos.pwc.inspect_result.YaoYao1995_MEEE.env.humanoid.HumanoidTruncatedObsEnv._get_obs"], ["", "def", "_get_obs", "(", "self", ")", ":", "\n", "        ", "super_observation", "=", "super", "(", "ForkReacherEnv", ",", "self", ")", ".", "_get_obs", "(", ")", "\n", "observation", "=", "np", ".", "concatenate", "(", "[", "\n", "super_observation", ",", "self", ".", "get_body_com", "(", "'goal'", ")", "[", ":", "2", "]", "\n", "]", ")", "\n", "return", "observation", "\n", "", "", ""]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.mujoco.image_pusher_2d.ImagePusher2dEnv.__init__": [[8, 12], ["image_pusher_2d.ImagePusher2dEnv._Serializable__initialize", "pusher_2d.Pusher2dEnv.__init__", "locals"], "methods", ["home.repos.pwc.inspect_result.YaoYao1995_MEEE.env.humanoid.HumanoidTruncatedObsEnv.__init__"], ["    ", "def", "__init__", "(", "self", ",", "image_shape", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "_Serializable__initialize", "(", "locals", "(", ")", ")", "\n", "self", ".", "image_shape", "=", "image_shape", "\n", "Pusher2dEnv", ".", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.mujoco.image_pusher_2d.ImagePusher2dEnv._get_obs": [[13, 23], ["image_pusher_2d.ImagePusher2dEnv.render", "numpy.concatenate().reshape", "numpy.concatenate", "image_pusher_2d.ImagePusher2dEnv.reshape"], "methods", ["home.repos.pwc.inspect_result.YaoYao1995_MEEE.adapters.softlearning_env.SoftlearningEnv.render"], ["", "def", "_get_obs", "(", "self", ")", ":", "\n", "        ", "width", ",", "height", "=", "self", ".", "image_shape", "[", ":", "2", "]", "\n", "image", "=", "self", ".", "render", "(", "mode", "=", "'rgb_array'", ",", "width", "=", "width", ",", "height", "=", "height", ")", "\n", "image", "=", "(", "(", "2.0", "/", "255.0", ")", "*", "image", "-", "1.0", ")", "\n", "\n", "return", "np", ".", "concatenate", "(", "[", "\n", "image", ".", "reshape", "(", "-", "1", ")", ",", "\n", "self", ".", "sim", ".", "data", ".", "qpos", ".", "flat", "[", "self", ".", "JOINT_INDS", "]", ",", "\n", "self", ".", "sim", ".", "data", ".", "qvel", ".", "flat", "[", "self", ".", "JOINT_INDS", "]", ",", "\n", "]", ")", ".", "reshape", "(", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.mujoco.image_pusher_2d.ImagePusher2dEnv.step": [[24, 36], ["super()._get_obs", "image_pusher_2d.ImagePusher2dEnv.compute_reward", "image_pusher_2d.ImagePusher2dEnv.do_simulation", "image_pusher_2d.ImagePusher2dEnv._get_obs"], "methods", ["home.repos.pwc.inspect_result.YaoYao1995_MEEE.env.humanoid.HumanoidTruncatedObsEnv._get_obs", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.mujoco.image_pusher_2d.ImageForkReacher2dEnv.compute_reward", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.env.humanoid.HumanoidTruncatedObsEnv._get_obs"], ["", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "\"\"\"Step, computing reward from 'true' observations and not images.\"\"\"", "\n", "\n", "reward_observations", "=", "super", "(", "ImagePusher2dEnv", ",", "self", ")", ".", "_get_obs", "(", ")", "\n", "reward", ",", "info", "=", "self", ".", "compute_reward", "(", "reward_observations", ",", "action", ")", "\n", "\n", "self", ".", "do_simulation", "(", "action", ",", "self", ".", "frame_skip", ")", "\n", "\n", "observation", "=", "self", ".", "_get_obs", "(", ")", "\n", "done", "=", "False", "\n", "\n", "return", "observation", ",", "reward", ",", "done", ",", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.mujoco.image_pusher_2d.ImagePusher2dEnv.viewer_setup": [[37, 44], ["None"], "methods", ["None"], ["", "def", "viewer_setup", "(", "self", ")", ":", "\n", "        ", "self", ".", "viewer", ".", "cam", ".", "trackbodyid", "=", "0", "\n", "self", ".", "viewer", ".", "cam", ".", "lookat", "[", ":", "3", "]", "=", "[", "0", ",", "0", ",", "0", "]", "\n", "self", ".", "viewer", ".", "cam", ".", "distance", "=", "3.5", "\n", "self", ".", "viewer", ".", "cam", ".", "elevation", "=", "-", "90", "\n", "self", ".", "viewer", ".", "cam", ".", "azimuth", "=", "0", "\n", "self", ".", "viewer", ".", "cam", ".", "trackbodyid", "=", "-", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.mujoco.image_pusher_2d.ImageForkReacher2dEnv.__init__": [[47, 58], ["image_pusher_2d.ImageForkReacher2dEnv._Serializable__initialize", "image_pusher_2d.ImagePusher2dEnv.__init__", "locals"], "methods", ["home.repos.pwc.inspect_result.YaoYao1995_MEEE.env.humanoid.HumanoidTruncatedObsEnv.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "arm_goal_distance_cost_coeff", ",", "\n", "arm_object_distance_cost_coeff", ",", "\n", "*", "args", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "_Serializable__initialize", "(", "locals", "(", ")", ")", "\n", "\n", "self", ".", "_arm_goal_distance_cost_coeff", "=", "arm_goal_distance_cost_coeff", "\n", "self", ".", "_arm_object_distance_cost_coeff", "=", "arm_object_distance_cost_coeff", "\n", "\n", "super", "(", "ImageForkReacher2dEnv", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.mujoco.image_pusher_2d.ImageForkReacher2dEnv.compute_reward": [[59, 91], ["numpy.linalg.norm", "numpy.linalg.norm", "numpy.sum", "NotImplementedError", "rewards.squeeze.squeeze.squeeze", "arm_goal_dists.squeeze.squeeze.squeeze", "arm_object_dists.squeeze.squeeze.squeeze", "image_pusher_2d.ImageForkReacher2dEnv.get_body_com"], "methods", ["None"], ["", "def", "compute_reward", "(", "self", ",", "observations", ",", "actions", ")", ":", "\n", "        ", "is_batch", "=", "True", "\n", "if", "observations", ".", "ndim", "==", "1", ":", "\n", "            ", "observations", "=", "observations", "[", "None", "]", "\n", "actions", "=", "actions", "[", "None", "]", "\n", "is_batch", "=", "False", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "'Might be broken.'", ")", "\n", "\n", "", "arm_pos", "=", "observations", "[", ":", ",", "-", "6", ":", "-", "4", "]", "\n", "goal_pos", "=", "self", ".", "get_body_com", "(", "'goal'", ")", "[", ":", "2", "]", "[", "None", "]", "\n", "object_pos", "=", "observations", "[", ":", ",", "-", "3", ":", "-", "1", "]", "\n", "\n", "arm_goal_dists", "=", "np", ".", "linalg", ".", "norm", "(", "arm_pos", "-", "goal_pos", ",", "axis", "=", "1", ")", "\n", "arm_object_dists", "=", "np", ".", "linalg", ".", "norm", "(", "arm_pos", "-", "object_pos", ",", "axis", "=", "1", ")", "\n", "ctrl_costs", "=", "np", ".", "sum", "(", "actions", "**", "2", ",", "axis", "=", "1", ")", "\n", "\n", "costs", "=", "(", "\n", "+", "self", ".", "_arm_goal_distance_cost_coeff", "*", "arm_goal_dists", "\n", "+", "self", ".", "_arm_object_distance_cost_coeff", "*", "arm_object_dists", "\n", "+", "self", ".", "_ctrl_cost_coeff", "*", "ctrl_costs", ")", "\n", "\n", "rewards", "=", "-", "costs", "\n", "\n", "if", "not", "is_batch", ":", "\n", "            ", "rewards", "=", "rewards", ".", "squeeze", "(", ")", "\n", "arm_goal_dists", "=", "arm_goal_dists", ".", "squeeze", "(", ")", "\n", "arm_object_dists", "=", "arm_object_dists", ".", "squeeze", "(", ")", "\n", "\n", "", "return", "rewards", ",", "{", "\n", "'arm_goal_distance'", ":", "arm_goal_dists", ",", "\n", "'arm_object_distance'", ":", "arm_object_dists", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.mujoco.image_pusher_2d.ImageForkReacher2dEnv.reset_model": [[93, 136], ["numpy.array", "numpy.random.uniform", "image_pusher_2d.ImageForkReacher2dEnv.init_qvel.copy().squeeze", "image_pusher_2d.ImageForkReacher2dEnv.set_state", "image_pusher_2d.ImageForkReacher2dEnv._get_obs", "numpy.random.uniform", "image_pusher_2d.ImageForkReacher2dEnv.init_qpos.squeeze", "softlearning.environments.helpers.random_point_in_circle", "numpy.sign", "numpy.maximum", "numpy.abs", "numpy.where", "image_pusher_2d.ImageForkReacher2dEnv.init_qvel.copy"], "methods", ["home.repos.pwc.inspect_result.YaoYao1995_MEEE.env.humanoid.HumanoidTruncatedObsEnv._get_obs", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.adapters.softlearning_env.SoftlearningEnv.copy"], ["", "def", "reset_model", "(", "self", ")", ":", "\n", "        ", "qpos", "=", "np", ".", "random", ".", "uniform", "(", "\n", "low", "=", "-", "0.1", ",", "high", "=", "0.1", ",", "size", "=", "self", ".", "model", ".", "nq", ")", "+", "self", ".", "init_qpos", ".", "squeeze", "(", ")", "\n", "\n", "# qpos[self.JOINT_INDS[0]] = np.random.uniform(-np.pi, np.pi)", "\n", "# qpos[self.JOINT_INDS[1]] = np.random.uniform(", "\n", "#     -np.pi/2, np.pi/2) + np.pi/4", "\n", "# qpos[self.JOINT_INDS[2]] = np.random.uniform(", "\n", "#     -np.pi/2, np.pi/2) + np.pi/2", "\n", "\n", "target_position", "=", "np", ".", "array", "(", "random_point_in_circle", "(", "\n", "angle_range", "=", "(", "0", ",", "2", "*", "np", ".", "pi", ")", ",", "radius", "=", "(", "0.6", ",", "1.2", ")", ")", ")", "\n", "target_position", "[", "1", "]", "+=", "1.0", "\n", "\n", "qpos", "[", "self", ".", "TARGET_INDS", "]", "=", "target_position", "\n", "# qpos[self.TARGET_INDS] = [1.0, 2.0]", "\n", "# qpos[self.TARGET_INDS] = self.init_qpos.squeeze()[self.TARGET_INDS]", "\n", "\n", "puck_position", "=", "np", ".", "random", ".", "uniform", "(", "[", "-", "1.0", "]", ",", "[", "1.0", "]", ",", "size", "=", "[", "2", "]", ")", "\n", "puck_position", "=", "(", "\n", "np", ".", "sign", "(", "puck_position", ")", "\n", "*", "np", ".", "maximum", "(", "np", ".", "abs", "(", "puck_position", ")", ",", "1", "/", "2", ")", ")", "\n", "puck_position", "[", "np", ".", "where", "(", "puck_position", "==", "0", ")", "]", "=", "1.0", "\n", "# puck_position[1] += 1.0", "\n", "# puck_position = np.random.uniform(", "\n", "#     low=[0.3, -1.0], high=[1.0, -0.4]),", "\n", "\n", "qpos", "[", "self", ".", "PUCK_INDS", "]", "=", "puck_position", "\n", "\n", "qvel", "=", "self", ".", "init_qvel", ".", "copy", "(", ")", ".", "squeeze", "(", ")", "\n", "qvel", "[", "self", ".", "PUCK_INDS", "]", "=", "0", "\n", "qvel", "[", "self", ".", "TARGET_INDS", "]", "=", "0", "\n", "\n", "# TODO: remnants from rllab -> gym conversion", "\n", "# qacc = np.zeros(self.sim.data.qacc.shape[0])", "\n", "# ctrl = np.zeros(self.sim.data.ctrl.shape[0])", "\n", "# full_state = np.concatenate((qpos, qvel, qacc, ctrl))", "\n", "\n", "# super(Pusher2dEnv, self).reset(full_state)", "\n", "\n", "self", ".", "set_state", "(", "qpos", ",", "qvel", ")", "\n", "\n", "return", "self", ".", "_get_obs", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.mujoco.image_pusher_2d.BlindForkReacher2dEnv._get_obs": [[139, 144], ["numpy.concatenate().reshape", "numpy.concatenate"], "methods", ["None"], ["    ", "def", "_get_obs", "(", "self", ")", ":", "\n", "        ", "return", "np", ".", "concatenate", "(", "[", "\n", "self", ".", "sim", ".", "data", ".", "qpos", ".", "flat", "[", "self", ".", "JOINT_INDS", "]", ",", "\n", "self", ".", "sim", ".", "data", ".", "qvel", ".", "flat", "[", "self", ".", "JOINT_INDS", "]", ",", "\n", "]", ")", ".", "reshape", "(", "-", "1", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.adapters.gym_adapter.GymAdapter.__init__": [[44, 87], ["gym_adapter.GymAdapter._Serializable__initialize", "softlearning_env.SoftlearningEnv.__init__", "isinstance", "softlearning.environments.gym.wrappers.NormalizeActionWrapper.seed", "softlearning.environments.gym.wrappers.NormalizeActionWrapper.action_space.seed", "locals", "gym.envs.make", "isinstance", "softlearning.environments.gym.wrappers.NormalizeActionWrapper", "list", "softlearning.environments.gym.wrappers.NormalizeActionWrapper.observation_space.spaces.keys"], "methods", ["home.repos.pwc.inspect_result.YaoYao1995_MEEE.env.humanoid.HumanoidTruncatedObsEnv.__init__", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.adapters.softlearning_env.SoftlearningEnv.seed", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.adapters.softlearning_env.SoftlearningEnv.seed"], ["def", "__init__", "(", "self", ",", "\n", "domain", ",", "\n", "task", ",", "\n", "*", "args", ",", "\n", "env", "=", "None", ",", "\n", "normalize", "=", "True", ",", "\n", "observation_keys", "=", "None", ",", "\n", "unwrap_time_limit", "=", "True", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "assert", "not", "args", ",", "(", "\n", "\"Gym environments don't support args. Use kwargs instead.\"", ")", "\n", "\n", "self", ".", "normalize", "=", "normalize", "\n", "self", ".", "observation_keys", "=", "observation_keys", "\n", "self", ".", "unwrap_time_limit", "=", "unwrap_time_limit", "\n", "\n", "self", ".", "_Serializable__initialize", "(", "locals", "(", ")", ")", "\n", "super", "(", "GymAdapter", ",", "self", ")", ".", "__init__", "(", "domain", ",", "task", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "\n", "if", "env", "is", "None", ":", "\n", "            ", "assert", "(", "domain", "is", "not", "None", "and", "task", "is", "not", "None", ")", ",", "(", "domain", ",", "task", ")", "\n", "env_id", "=", "f\"{domain}-{task}\"", "\n", "env", "=", "gym", ".", "envs", ".", "make", "(", "env_id", ",", "**", "kwargs", ")", "\n", "", "else", ":", "\n", "            ", "assert", "domain", "is", "None", "and", "task", "is", "None", ",", "(", "domain", ",", "task", ")", "\n", "\n", "", "if", "isinstance", "(", "env", ",", "wrappers", ".", "TimeLimit", ")", "and", "unwrap_time_limit", ":", "\n", "# Remove the TimeLimit wrapper that sets 'done = True' when", "\n", "# the time limit specified for each environment has been passed and", "\n", "# therefore the environment is not Markovian (terminal condition", "\n", "# depends on time rather than state).", "\n", "            ", "env", "=", "env", ".", "env", "\n", "\n", "", "if", "isinstance", "(", "env", ".", "observation_space", ",", "spaces", ".", "Dict", ")", ":", "\n", "            ", "observation_keys", "=", "(", "\n", "observation_keys", "or", "list", "(", "env", ".", "observation_space", ".", "spaces", ".", "keys", "(", ")", ")", ")", "\n", "", "if", "normalize", ":", "\n", "            ", "env", "=", "NormalizeActionWrapper", "(", "env", ")", "\n", "# set seed for gym", "\n", "", "RANDOM_SEED", "=", "0", "\n", "env", ".", "seed", "(", "RANDOM_SEED", ")", "\n", "env", ".", "action_space", ".", "seed", "(", "RANDOM_SEED", ")", "\n", "self", ".", "_env", "=", "env", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.adapters.gym_adapter.GymAdapter.observation_space": [[88, 92], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "observation_space", "(", "self", ")", ":", "\n", "        ", "observation_space", "=", "self", ".", "_env", ".", "observation_space", "\n", "return", "observation_space", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.adapters.gym_adapter.GymAdapter.active_observation_shape": [[93, 110], ["sum", "isinstance", "list", "gym_adapter.GymAdapter._env.observation_space.spaces.keys", "numpy.prod"], "methods", ["None"], ["", "@", "property", "\n", "def", "active_observation_shape", "(", "self", ")", ":", "\n", "        ", "\"\"\"Shape for the active observation based on observation_keys.\"\"\"", "\n", "if", "not", "isinstance", "(", "self", ".", "_env", ".", "observation_space", ",", "spaces", ".", "Dict", ")", ":", "\n", "            ", "return", "super", "(", "GymAdapter", ",", "self", ")", ".", "active_observation_shape", "\n", "\n", "", "observation_keys", "=", "(", "\n", "self", ".", "observation_keys", "\n", "or", "list", "(", "self", ".", "_env", ".", "observation_space", ".", "spaces", ".", "keys", "(", ")", ")", ")", "\n", "\n", "active_size", "=", "sum", "(", "\n", "np", ".", "prod", "(", "self", ".", "_env", ".", "observation_space", ".", "spaces", "[", "key", "]", ".", "shape", ")", "\n", "for", "key", "in", "observation_keys", ")", "\n", "\n", "active_observation_shape", "=", "(", "active_size", ",", ")", "\n", "\n", "return", "active_observation_shape", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.adapters.gym_adapter.GymAdapter.convert_to_active_observation": [[111, 124], ["numpy.concatenate", "isinstance", "list", "gym_adapter.GymAdapter._env.observation_space.spaces.keys"], "methods", ["None"], ["", "def", "convert_to_active_observation", "(", "self", ",", "observation", ")", ":", "\n", "        ", "if", "not", "isinstance", "(", "self", ".", "_env", ".", "observation_space", ",", "spaces", ".", "Dict", ")", ":", "\n", "            ", "return", "observation", "\n", "\n", "", "observation_keys", "=", "(", "\n", "self", ".", "observation_keys", "\n", "or", "list", "(", "self", ".", "_env", ".", "observation_space", ".", "spaces", ".", "keys", "(", ")", ")", ")", "\n", "\n", "observation", "=", "np", ".", "concatenate", "(", "[", "\n", "observation", "[", "key", "]", "for", "key", "in", "observation_keys", "\n", "]", ",", "axis", "=", "-", "1", ")", "\n", "\n", "return", "observation", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.adapters.gym_adapter.GymAdapter.action_space": [[125, 133], ["len", "NotImplementedError"], "methods", ["None"], ["", "@", "property", "\n", "def", "action_space", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "action_space", "=", "self", ".", "_env", ".", "action_space", "\n", "if", "len", "(", "action_space", ".", "shape", ")", ">", "1", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\n", "\"Action space ({}) is not flat, make sure to check the\"", "\n", "\" implemenation.\"", ".", "format", "(", "action_space", ")", ")", "\n", "", "return", "action_space", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.adapters.gym_adapter.GymAdapter.step": [[134, 145], ["gym_adapter.GymAdapter._env.step"], "methods", ["home.repos.pwc.inspect_result.YaoYao1995_MEEE.env.humanoid.HumanoidTruncatedObsEnv.step"], ["", "def", "step", "(", "self", ",", "action", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "# TODO(hartikainen): refactor this to always return an OrderedDict,", "\n", "# such that the observations for all the envs is consistent. Right now", "\n", "# some of the gym envs return np.array whereas others return dict.", "\n", "#", "\n", "# Something like:", "\n", "# observation = OrderedDict()", "\n", "# observation['observation'] = env.step(action, *args, **kwargs)", "\n", "# return observation", "\n", "\n", "        ", "return", "self", ".", "_env", ".", "step", "(", "action", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.adapters.gym_adapter.GymAdapter.reset": [[146, 148], ["gym_adapter.GymAdapter._env.reset"], "methods", ["home.repos.pwc.inspect_result.YaoYao1995_MEEE.adapters.softlearning_env.SoftlearningEnv.reset"], ["", "def", "reset", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "self", ".", "_env", ".", "reset", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.adapters.gym_adapter.GymAdapter.render": [[149, 151], ["gym_adapter.GymAdapter._env.render"], "methods", ["home.repos.pwc.inspect_result.YaoYao1995_MEEE.adapters.softlearning_env.SoftlearningEnv.render"], ["", "def", "render", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "self", ".", "_env", ".", "render", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.adapters.gym_adapter.GymAdapter.close": [[152, 154], ["gym_adapter.GymAdapter._env.close"], "methods", ["home.repos.pwc.inspect_result.YaoYao1995_MEEE.adapters.softlearning_env.SoftlearningEnv.close"], ["", "def", "close", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "self", ".", "_env", ".", "close", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.adapters.gym_adapter.GymAdapter.seed": [[155, 157], ["gym_adapter.GymAdapter._env.seed"], "methods", ["home.repos.pwc.inspect_result.YaoYao1995_MEEE.adapters.softlearning_env.SoftlearningEnv.seed"], ["", "def", "seed", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "self", ".", "_env", ".", "seed", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.adapters.gym_adapter.GymAdapter.unwrapped": [[158, 161], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "unwrapped", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_env", ".", "unwrapped", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.adapters.gym_adapter.GymAdapter.get_param_values": [[162, 164], ["None"], "methods", ["None"], ["", "def", "get_param_values", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.adapters.gym_adapter.GymAdapter.set_param_values": [[165, 167], ["None"], "methods", ["None"], ["", "def", "set_param_values", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "", "", ""]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.adapters.gym_adapter.parse_domain_task": [[13, 19], ["gym_id.split"], "function", ["None"], ["def", "parse_domain_task", "(", "gym_id", ")", ":", "\n", "    ", "domain_task_parts", "=", "gym_id", ".", "split", "(", "'-'", ")", "\n", "domain", "=", "'-'", ".", "join", "(", "domain_task_parts", "[", ":", "1", "]", ")", "\n", "task", "=", "'-'", ".", "join", "(", "domain_task_parts", "[", "1", ":", "]", ")", "\n", "\n", "return", "domain", ",", "task", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.adapters.softlearning_env.SoftlearningEnv.__init__": [[45, 56], ["softlearning_env.SoftlearningEnv._Serializable__initialize", "locals"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "domain", ",", "task", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Initialize an environment based on domain and task.\n        Keyword Arguments:\n        domain   --\n        task     --\n        *args    --\n        **kwargs --\n        \"\"\"", "\n", "self", ".", "_Serializable__initialize", "(", "locals", "(", ")", ")", "\n", "self", ".", "_domain", "=", "domain", "\n", "self", ".", "_task", "=", "task", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.adapters.softlearning_env.SoftlearningEnv.observation_space": [[57, 61], ["None"], "methods", ["None"], ["", "@", "property", "\n", "@", "abstractmethod", "\n", "def", "observation_space", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.adapters.softlearning_env.SoftlearningEnv.active_observation_shape": [[62, 65], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "active_observation_shape", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "observation_space", ".", "shape", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.adapters.softlearning_env.SoftlearningEnv.convert_to_active_observation": [[66, 68], ["None"], "methods", ["None"], ["", "def", "convert_to_active_observation", "(", "self", ",", "observation", ")", ":", "\n", "        ", "return", "observation", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.adapters.softlearning_env.SoftlearningEnv.action_space": [[69, 73], ["None"], "methods", ["None"], ["", "@", "property", "\n", "@", "abstractmethod", "\n", "def", "action_space", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.adapters.softlearning_env.SoftlearningEnv.step": [[74, 92], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "\"\"\"Run one timestep of the environment's dynamics. When end of\n        episode is reached, you are responsible for calling `reset()`\n        to reset this environment's state.\n\n        Accepts an action and returns a tuple (observation, reward, done, info).\n\n        Args:\n            action (object): an action provided by the environment\n\n        Returns:\n            observation (object): agent's observation of the current environment\n            reward (float) : amount of reward returned after previous action\n            done (boolean): whether the episode has ended, in which case further step() calls will return undefined results\n            info (dict): contains auxiliary diagnostic information (helpful for debugging, and sometimes learning)\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.adapters.softlearning_env.SoftlearningEnv.reset": [[93, 101], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "reset", "(", "self", ")", ":", "\n", "        ", "\"\"\"Resets the state of the environment and returns an initial observation.\n\n        Returns: observation (object): the initial observation of the\n            space.\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.adapters.softlearning_env.SoftlearningEnv.render": [[102, 142], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "render", "(", "self", ",", "mode", "=", "'human'", ")", ":", "\n", "        ", "\"\"\"Renders the environment.\n\n        The set of supported modes varies per environment. (And some\n        environments do not support rendering at all.) By convention,\n        if mode is:\n\n        - human: render to the current display or terminal and\n          return nothing. Usually for human consumption.\n        - rgb_array: Return an numpy.ndarray with shape (x, y, 3),\n          representing RGB values for an x-by-y pixel image, suitable\n          for turning into a video.\n        - ansi: Return a string (str) or StringIO.StringIO containing a\n          terminal-style text representation. The text can include newlines\n          and ANSI escape sequences (e.g. for colors).\n\n        Note:\n            Make sure that your class's metadata 'render.modes' key includes\n              the list of supported modes. It's recommended to call super()\n              in implementations to use the functionality of this method.\n\n        Args:\n            mode (str): the mode to render with\n            close (bool): close all open renderings\n\n        Example:\n\n        class MyEnv(Env):\n            metadata = {'render.modes': ['human', 'rgb_array']}\n\n            def render(self, mode='human'):\n                if mode == 'rgb_array':\n                    return np.array(...) # return RGB frame suitable for video\n                elif mode is 'human':\n                    ... # pop up a window and render\n                else:\n                    super(MyEnv, self).render(mode=mode) # just raise an exception\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.adapters.softlearning_env.SoftlearningEnv.render_rollouts": [[143, 151], ["hasattr", "hasattr", "softlearning_env.SoftlearningEnv._env.render_rollouts", "unwrapped_env.render_rollouts"], "methods", ["home.repos.pwc.inspect_result.YaoYao1995_MEEE.adapters.softlearning_env.SoftlearningEnv.render_rollouts", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.adapters.softlearning_env.SoftlearningEnv.render_rollouts"], ["", "def", "render_rollouts", "(", "self", ",", "paths", ")", ":", "\n", "        ", "\"\"\"Renders past rollouts of the environment.\"\"\"", "\n", "if", "hasattr", "(", "self", ".", "_env", ",", "'render_rollouts'", ")", ":", "\n", "            ", "return", "self", ".", "_env", ".", "render_rollouts", "(", "paths", ")", "\n", "\n", "", "unwrapped_env", "=", "self", ".", "unwrapped", "\n", "if", "hasattr", "(", "unwrapped_env", ",", "'render_rollouts'", ")", ":", "\n", "            ", "return", "unwrapped_env", ".", "render_rollouts", "(", "paths", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.adapters.softlearning_env.SoftlearningEnv.close": [[152, 160], ["None"], "methods", ["None"], ["", "", "@", "abstractmethod", "\n", "def", "close", "(", "self", ")", ":", "\n", "        ", "\"\"\"Override _close in your subclass to perform any necessary cleanup.\n\n        Environments will automatically close() themselves when\n        garbage collected or when the program exits.\n        \"\"\"", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.adapters.softlearning_env.SoftlearningEnv.seed": [[161, 178], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "seed", "(", "self", ",", "seed", "=", "None", ")", ":", "\n", "        ", "\"\"\"Sets the seed for this env's random number generator(s).\n\n        Note:\n            Some environments use multiple pseudorandom number generators.\n            We want to capture all such seeds used in order to ensure that\n            there aren't accidental correlations between multiple generators.\n\n        Returns:\n            list<bigint>: Returns the list of seeds used in this env's random\n              number generators. The first value in the list should be the\n              \"main\" seed, or the value which a reproducer should pass to\n              'seed'. Often, the main seed equals the provided 'seed', but\n              this won't be true if seed=None, for example.\n        \"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.adapters.softlearning_env.SoftlearningEnv.copy": [[179, 186], ["serializable.Serializable.clone"], "methods", ["None"], ["", "def", "copy", "(", "self", ")", ":", "\n", "        ", "\"\"\"Create a deep copy the environment.\n\n        TODO: Investigate if this can be done somehow else, especially for gym\n        envs.\n        \"\"\"", "\n", "return", "Serializable", ".", "clone", "(", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.adapters.softlearning_env.SoftlearningEnv.unwrapped": [[187, 196], ["None"], "methods", ["None"], ["", "@", "property", "\n", "@", "abstractmethod", "\n", "def", "unwrapped", "(", "self", ")", ":", "\n", "        ", "\"\"\"Completely unwrap this env.\n\n        Returns:\n            gym.Env: The base non-wrapped gym.Env instance\n        \"\"\"", "\n", "return", "self", ".", "_env", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.adapters.softlearning_env.SoftlearningEnv.__str__": [[197, 203], ["type"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "'<{type_name}(domain={domain}, task={task}) <{env}>>'", ".", "format", "(", "\n", "type_name", "=", "type", "(", "self", ")", ".", "__name__", ",", "\n", "domain", "=", "self", ".", "_domain", ",", "\n", "task", "=", "self", ".", "_task", ",", "\n", "env", "=", "self", ".", "_env", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.adapters.softlearning_env.SoftlearningEnv.get_param_values": [[204, 207], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "get_param_values", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.adapters.softlearning_env.SoftlearningEnv.set_param_values": [[208, 211], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "set_param_values", "(", "self", ",", "params", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.adapters.softlearning_env.SoftlearningEnv.get_path_infos": [[212, 243], ["list", "collections.defaultdict", "collections.defaultdict.items", "[].keys", "path_results.items", "numpy.mean", "numpy.array", "results[].append", "results[].append", "results[].append", "results[].append", "numpy.mean", "numpy.median", "numpy.dtype", "results[].append", "paths[].get", "numpy.array", "numpy.ptp"], "methods", ["None"], ["", "def", "get_path_infos", "(", "self", ",", "paths", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Log some general diagnostics from the env infos.\n\n        TODO(hartikainen): These logs don't make much sense right now. Need to\n        figure out better format for logging general env infos.\n        \"\"\"", "\n", "keys", "=", "list", "(", "paths", "[", "0", "]", ".", "get", "(", "'infos'", ",", "[", "{", "}", "]", ")", "[", "0", "]", ".", "keys", "(", ")", ")", "\n", "\n", "results", "=", "defaultdict", "(", "list", ")", "\n", "\n", "for", "path", "in", "paths", ":", "\n", "            ", "path_results", "=", "{", "\n", "k", ":", "[", "\n", "info", "[", "k", "]", "\n", "for", "info", "in", "path", "[", "'infos'", "]", "\n", "]", "for", "k", "in", "keys", "\n", "}", "\n", "for", "info_key", ",", "info_values", "in", "path_results", ".", "items", "(", ")", ":", "\n", "                ", "info_values", "=", "np", ".", "array", "(", "info_values", ")", "\n", "results", "[", "info_key", "+", "'-first'", "]", ".", "append", "(", "info_values", "[", "0", "]", ")", "\n", "results", "[", "info_key", "+", "'-last'", "]", ".", "append", "(", "info_values", "[", "-", "1", "]", ")", "\n", "results", "[", "info_key", "+", "'-mean'", "]", ".", "append", "(", "np", ".", "mean", "(", "info_values", ")", ")", "\n", "results", "[", "info_key", "+", "'-median'", "]", ".", "append", "(", "np", ".", "median", "(", "info_values", ")", ")", "\n", "if", "np", ".", "array", "(", "info_values", ")", ".", "dtype", "!=", "np", ".", "dtype", "(", "'bool'", ")", ":", "\n", "                    ", "results", "[", "info_key", "+", "'-range'", "]", ".", "append", "(", "np", ".", "ptp", "(", "info_values", ")", ")", "\n", "\n", "", "", "", "aggregated_results", "=", "{", "}", "\n", "for", "key", ",", "value", "in", "results", ".", "items", "(", ")", ":", "\n", "            ", "aggregated_results", "[", "key", "+", "'-mean'", "]", "=", "np", ".", "mean", "(", "value", ")", "\n", "\n", "", "return", "aggregated_results", "\n", "", "", ""]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.misc.kernel.adaptive_isotropic_gaussian_kernel": [[7, 74], ["tensorflow.concat", "tensorflow.nn.top_k", "tensorflow.maximum", "tensorflow.stop_gradient", "tensorflow.expand_dims", "tensorflow.exp", "tensorflow.expand_dims", "tensorflow.expand_dims", "xs.get_shape().as_list", "ys.get_shape().as_list", "tensorflow.shape", "tensorflow.expand_dims", "tensorflow.expand_dims", "distutils.version.LooseVersion", "distutils.version.LooseVersion", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "numpy.log", "tensorflow.expand_dims", "tensorflow.reshape", "xs.get_shape", "ys.get_shape"], "function", ["None"], ["def", "adaptive_isotropic_gaussian_kernel", "(", "xs", ",", "ys", ",", "h_min", "=", "1e-3", ")", ":", "\n", "    ", "\"\"\"Gaussian kernel with dynamic bandwidth.\n\n    The bandwidth is adjusted dynamically to match median_distance / log(Kx).\n    See [2] for more information.\n\n    Args:\n        xs(`tf.Tensor`): A tensor of shape (N x Kx x D) containing N sets of Kx\n            particles of dimension D. This is the first kernel argument.\n        ys(`tf.Tensor`): A tensor of shape (N x Ky x D) containing N sets of Kx\n            particles of dimension D. This is the second kernel argument.\n        h_min(`float`): Minimum bandwidth.\n\n    Returns:\n        `dict`: Returned dictionary has two fields:\n            'output': A `tf.Tensor` object of shape (N x Kx x Ky) representing\n                the kernel matrix for inputs `xs` and `ys`.\n            'gradient': A 'tf.Tensor` object of shape (N x Kx x Ky x D)\n                representing the gradient of the kernel with respect to `xs`.\n\n    Reference:\n        [2] Qiang Liu,Dilin Wang, \"Stein Variational Gradient Descent: A General\n            Purpose Bayesian Inference Algorithm,\" Neural Information Processing\n            Systems (NIPS), 2016.\n    \"\"\"", "\n", "Kx", ",", "D", "=", "xs", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "-", "2", ":", "]", "\n", "Ky", ",", "D2", "=", "ys", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "-", "2", ":", "]", "\n", "assert", "D", "==", "D2", "\n", "\n", "leading_shape", "=", "tf", ".", "shape", "(", "xs", ")", "[", ":", "-", "2", "]", "\n", "\n", "# Compute the pairwise distances of left and right particles.", "\n", "diff", "=", "tf", ".", "expand_dims", "(", "xs", ",", "-", "2", ")", "-", "tf", ".", "expand_dims", "(", "ys", ",", "-", "3", ")", "\n", "# ... x Kx x Ky x D", "\n", "\n", "if", "LooseVersion", "(", "tf", ".", "__version__", ")", "<=", "LooseVersion", "(", "'1.5.0'", ")", ":", "\n", "        ", "dist_sq", "=", "tf", ".", "reduce_sum", "(", "diff", "**", "2", ",", "axis", "=", "-", "1", ",", "keep_dims", "=", "False", ")", "\n", "", "else", ":", "\n", "        ", "dist_sq", "=", "tf", ".", "reduce_sum", "(", "diff", "**", "2", ",", "axis", "=", "-", "1", ",", "keepdims", "=", "False", ")", "\n", "# ... x Kx x Ky", "\n", "\n", "# Get median.", "\n", "", "input_shape", "=", "tf", ".", "concat", "(", "(", "leading_shape", ",", "[", "Kx", "*", "Ky", "]", ")", ",", "axis", "=", "0", ")", "\n", "values", ",", "_", "=", "tf", ".", "nn", ".", "top_k", "(", "\n", "input", "=", "tf", ".", "reshape", "(", "dist_sq", ",", "input_shape", ")", ",", "\n", "k", "=", "(", "Kx", "*", "Ky", "//", "2", "+", "1", ")", ",", "# This is exactly true only if Kx*Ky is odd.", "\n", "sorted", "=", "True", ")", "# ... x floor(Ks*Kd/2)", "\n", "\n", "medians_sq", "=", "values", "[", "...", ",", "-", "1", "]", "# ... (shape) (last element is the median)", "\n", "\n", "h", "=", "medians_sq", "/", "np", ".", "log", "(", "Kx", ")", "# ... (shape)", "\n", "h", "=", "tf", ".", "maximum", "(", "h", ",", "h_min", ")", "\n", "h", "=", "tf", ".", "stop_gradient", "(", "h", ")", "# Just in case.", "\n", "h_expanded_twice", "=", "tf", ".", "expand_dims", "(", "tf", ".", "expand_dims", "(", "h", ",", "-", "1", ")", ",", "-", "1", ")", "\n", "# ... x 1 x 1", "\n", "\n", "kappa", "=", "tf", ".", "exp", "(", "-", "dist_sq", "/", "h_expanded_twice", ")", "# ... x Kx x Ky", "\n", "\n", "# Construct the gradient", "\n", "h_expanded_thrice", "=", "tf", ".", "expand_dims", "(", "h_expanded_twice", ",", "-", "1", ")", "\n", "# ... x 1 x 1 x 1", "\n", "kappa_expanded", "=", "tf", ".", "expand_dims", "(", "kappa", ",", "-", "1", ")", "# ... x Kx x Ky x 1", "\n", "\n", "kappa_grad", "=", "-", "2", "*", "diff", "/", "h_expanded_thrice", "*", "kappa_expanded", "\n", "# ... x Kx x Ky x D", "\n", "\n", "return", "{", "\"output\"", ":", "kappa", ",", "\"gradient\"", ":", "kappa_grad", "}", "\n", "", ""]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.misc.plotter.QFPolicyPlotter.__init__": [[7, 32], ["numpy.array", "len", "matplotlib.figure", "range", "list", "numpy.where", "len", "matplotlib.figure.add_subplot", "plt.figure.add_subplot.set_xlim", "plt.figure.add_subplot.set_ylim", "plt.figure.add_subplot.grid", "plotter.QFPolicyPlotter._ax_lst.append", "numpy.isnan"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "Q", ",", "policy", ",", "obs_lst", ",", "default_action", ",", "n_samples", ")", ":", "\n", "        ", "self", ".", "_Q", "=", "Q", "\n", "self", ".", "_policy", "=", "policy", "\n", "self", ".", "_obs_lst", "=", "obs_lst", "\n", "self", ".", "_default_action", "=", "np", ".", "array", "(", "default_action", ")", "\n", "self", ".", "_n_samples", "=", "n_samples", "\n", "\n", "self", ".", "_var_inds", "=", "np", ".", "where", "(", "np", ".", "isnan", "(", "default_action", ")", ")", "[", "0", "]", "\n", "assert", "len", "(", "self", ".", "_var_inds", ")", "==", "2", "\n", "\n", "n_plots", "=", "len", "(", "obs_lst", ")", "\n", "\n", "x_size", "=", "5", "*", "n_plots", "\n", "y_size", "=", "5", "\n", "\n", "fig", "=", "plt", ".", "figure", "(", "figsize", "=", "(", "x_size", ",", "y_size", ")", ")", "\n", "self", ".", "_ax_lst", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "n_plots", ")", ":", "\n", "            ", "ax", "=", "fig", ".", "add_subplot", "(", "100", "+", "n_plots", "*", "10", "+", "i", "+", "1", ")", "\n", "ax", ".", "set_xlim", "(", "(", "-", "1", ",", "1", ")", ")", "\n", "ax", ".", "set_ylim", "(", "(", "-", "1", ",", "1", ")", ")", "\n", "ax", ".", "grid", "(", "True", ")", "\n", "self", ".", "_ax_lst", ".", "append", "(", "ax", ")", "\n", "\n", "", "self", ".", "_line_objects", "=", "list", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.misc.plotter.QFPolicyPlotter.draw": [[33, 43], ["list", "plotter.QFPolicyPlotter._plot_level_curves", "plotter.QFPolicyPlotter._plot_action_samples", "matplotlib.draw", "matplotlib.pause", "h.remove"], "methods", ["home.repos.pwc.inspect_result.YaoYao1995_MEEE.misc.plotter.QFPolicyPlotter._plot_level_curves", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.misc.plotter.QFPolicyPlotter._plot_action_samples", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.misc.plotter.QFPolicyPlotter.draw", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.utils.logging.Progress.pause"], ["", "def", "draw", "(", "self", ")", ":", "\n", "# noinspection PyArgumentList", "\n", "        ", "[", "h", ".", "remove", "(", ")", "for", "h", "in", "self", ".", "_line_objects", "]", "\n", "self", ".", "_line_objects", "=", "list", "(", ")", "\n", "\n", "self", ".", "_plot_level_curves", "(", ")", "\n", "self", ".", "_plot_action_samples", "(", ")", "\n", "\n", "plt", ".", "draw", "(", ")", "\n", "plt", ".", "pause", "(", "0.001", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.misc.plotter.QFPolicyPlotter._plot_level_curves": [[44, 68], ["numpy.linspace", "numpy.linspace", "numpy.meshgrid", "numpy.tile", "xgrid.ravel", "ygrid.ravel", "zip", "len", "len", "plotter.QFPolicyPlotter._default_action.astype", "numpy.tile", "plotter.QFPolicyPlotter._Q.predict", "numpy.reshape", "ax.contour", "ax.clabel", "obs[].astype"], "methods", ["home.repos.pwc.inspect_result.YaoYao1995_MEEE.models.bnn.BNN.predict"], ["", "def", "_plot_level_curves", "(", "self", ")", ":", "\n", "# Create mesh grid.", "\n", "        ", "xs", "=", "np", ".", "linspace", "(", "-", "1", ",", "1", ",", "50", ")", "\n", "ys", "=", "np", ".", "linspace", "(", "-", "1", ",", "1", ",", "50", ")", "\n", "xgrid", ",", "ygrid", "=", "np", ".", "meshgrid", "(", "xs", ",", "ys", ")", "\n", "N", "=", "len", "(", "xs", ")", "*", "len", "(", "ys", ")", "\n", "\n", "# Copy default values along the first axis and replace nans with", "\n", "# the mesh grid points.", "\n", "actions", "=", "np", ".", "tile", "(", "self", ".", "_default_action", ".", "astype", "(", "np", ".", "float32", ")", ",", "(", "N", ",", "1", ")", ")", "\n", "actions", "[", ":", ",", "self", ".", "_var_inds", "[", "0", "]", "]", "=", "xgrid", ".", "ravel", "(", ")", "\n", "actions", "[", ":", ",", "self", ".", "_var_inds", "[", "1", "]", "]", "=", "ygrid", ".", "ravel", "(", ")", "\n", "\n", "for", "ax", ",", "obs", "in", "zip", "(", "self", ".", "_ax_lst", ",", "self", ".", "_obs_lst", ")", ":", "\n", "            ", "observations", "=", "np", ".", "tile", "(", "\n", "obs", "[", "None", "]", ".", "astype", "(", "np", ".", "float32", ")", ",", "(", "actions", ".", "shape", "[", "0", "]", ",", "1", ")", ")", "\n", "\n", "Q_np", "=", "self", ".", "_Q", ".", "predict", "(", "(", "observations", ",", "actions", ")", ")", "\n", "Q_np", "=", "np", ".", "reshape", "(", "Q_np", ",", "xgrid", ".", "shape", ")", "\n", "\n", "cs", "=", "ax", ".", "contour", "(", "xgrid", ",", "ygrid", ",", "Q_np", ",", "20", ")", "\n", "self", ".", "_line_objects", "+=", "cs", ".", "collections", "\n", "self", ".", "_line_objects", "+=", "ax", ".", "clabel", "(", "\n", "cs", ",", "inline", "=", "1", ",", "fontsize", "=", "10", ",", "fmt", "=", "'%.2f'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.misc.plotter.QFPolicyPlotter._plot_action_samples": [[69, 76], ["zip", "plotter.QFPolicyPlotter._policy.actions_np", "ax.plot", "numpy.ones"], "methods", ["home.repos.pwc.inspect_result.YaoYao1995_MEEE.policies.gaussian_policy.GaussianPolicy.actions_np"], ["", "", "def", "_plot_action_samples", "(", "self", ")", ":", "\n", "        ", "for", "ax", ",", "obs", "in", "zip", "(", "self", ".", "_ax_lst", ",", "self", ".", "_obs_lst", ")", ":", "\n", "            ", "observations", "=", "np", ".", "ones", "(", "(", "self", ".", "_n_samples", ",", "1", ")", ")", "*", "obs", "[", "None", ",", ":", "]", "\n", "actions", "=", "self", ".", "_policy", ".", "actions_np", "(", "[", "observations", "]", ")", "\n", "\n", "x", ",", "y", "=", "actions", "[", ":", ",", "0", "]", ",", "actions", "[", ":", ",", "1", "]", "\n", "self", ".", "_line_objects", "+=", "ax", ".", "plot", "(", "x", ",", "y", ",", "'b*'", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.misc.utils.initialize_tf_variables": [[18, 37], ["session.run", "tensorflow.global_variables", "tensorflow.local_variables", "tensorflow.variables_initializer", "session.run", "utils.initialize_tf_variables.is_initialized"], "function", ["None"], ["\n", "TASKS_BY_DOMAIN_BY_UNIVERSE", "=", "{", "\n", "universe", ":", "{", "\n", "domain", ":", "tuple", "(", "tasks", ")", "\n", "for", "domain", ",", "tasks", "in", "domains", ".", "items", "(", ")", "\n", "}", "\n", "for", "universe", ",", "domains", "in", "env_utils", ".", "ENVIRONMENTS", ".", "items", "(", ")", "\n", "}", "\n", "\n", "AVAILABLE_TASKS", "=", "set", "(", "sum", "(", "\n", "[", "\n", "tasks", "\n", "for", "universe", ",", "domains", "in", "TASKS_BY_DOMAIN_BY_UNIVERSE", ".", "items", "(", ")", "\n", "for", "domain", ",", "tasks", "in", "domains", ".", "items", "(", ")", "\n", "]", ",", "\n", "(", ")", ")", ")", "\n", "\n", "DOMAINS_BY_UNIVERSE", "=", "{", "\n", "universe", ":", "tuple", "(", "domains", ")", "\n", "for", "universe", ",", "domains", "in", "env_utils", ".", "ENVIRONMENTS", ".", "items", "(", ")", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.misc.utils.set_seed": [[39, 45], ["random.seed", "numpy.random.seed", "tensorflow.set_random_seed", "print"], "function", ["home.repos.pwc.inspect_result.YaoYao1995_MEEE.adapters.softlearning_env.SoftlearningEnv.seed", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.adapters.softlearning_env.SoftlearningEnv.seed"], ["\n", "AVAILABLE_DOMAINS", "=", "set", "(", "sum", "(", "DOMAINS_BY_UNIVERSE", ".", "values", "(", ")", ",", "(", ")", ")", ")", "\n", "\n", "UNIVERSES", "=", "tuple", "(", "env_utils", ".", "ENVIRONMENTS", ")", "\n", "\n", "AVAILABLE_ALGORITHMS", "=", "set", "(", "alg_utils", ".", "ALGORITHM_CLASSES", ".", "keys", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.misc.utils.datetimestamp": [[47, 52], ["datetime.datetime.now", "datetime.datetime.now.strftime"], "function", ["None"], ["def", "parse_universe", "(", "env_name", ")", ":", "\n", "    ", "universe", "=", "next", "(", "\n", "(", "universe", "for", "universe", "in", "UNIVERSES", "if", "universe", "in", "env_name", ")", ",", "\n", "DEFAULT_UNIVERSE", ")", "\n", "return", "universe", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.misc.utils.datestamp": [[54, 56], ["datetime.date.today().isoformat().replace", "datetime.date.today().isoformat", "datetime.date.today"], "function", ["None"], ["", "def", "parse_domain_task", "(", "env_name", ",", "universe", ")", ":", "\n", "    ", "env_name", "=", "env_name", ".", "replace", "(", "universe", ",", "''", ")", ".", "strip", "(", "'-'", ")", "\n", "domains", "=", "DOMAINS_BY_UNIVERSE", "[", "universe", "]", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.misc.utils.timestamp": [[58, 63], ["datetime.datetime.now", "datetime.datetime.time", "datetime.datetime.time.strftime"], "function", ["None"], ["\n", "env_name", "=", "env_name", ".", "replace", "(", "domain", ",", "''", ")", ".", "strip", "(", "'-'", ")", "\n", "tasks", "=", "TASKS_BY_DOMAIN_BY_UNIVERSE", "[", "universe", "]", "[", "domain", "]", "\n", "task", "=", "next", "(", "(", "task", "for", "task", "in", "tasks", "if", "task", "==", "env_name", ")", ",", "None", ")", "\n", "\n", "if", "task", "is", "None", ":", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.misc.utils.concat_obs_z": [[65, 71], ["numpy.isscalar", "numpy.zeros", "numpy.hstack"], "function", ["None"], ["if", "len", "(", "matching_tasks", ")", ">", "1", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"Task name cannot be unmbiguously determined: {}.\"", "\n", "\" Following task names match: {}\"", "\n", "\"\"", ".", "format", "(", "env_name", ",", "matching_tasks", ")", ")", "\n", "", "elif", "len", "(", "matching_tasks", ")", "==", "1", ":", "\n", "            ", "task", "=", "matching_tasks", "[", "-", "1", "]", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.misc.utils.split_aug_obs": [[73, 78], ["numpy.where"], "function", ["None"], ["            ", "task", "=", "DEFAULT_TASK", "\n", "\n", "", "", "return", "domain", ",", "task", "\n", "\n", "\n", "", "def", "parse_universe_domain_task", "(", "args", ")", ":", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.misc.utils._make_dir": [[80, 84], ["os.path.dirname", "os.path.exists", "os.makedirs"], "function", ["None"], ["\n", "if", "not", "universe", ":", "\n", "        ", "universe", "=", "parse_universe", "(", "args", ".", "env", ")", "\n", "\n", "", "if", "(", "not", "domain", ")", "or", "(", "not", "task", ")", ":", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.misc.utils.save_video": [[86, 100], ["utils._make_dir", "numpy.flip", "cv2.VideoWriter_fourcc", "cv2.VideoWriter", "cv2.VideoWriter.release", "cv2.VideoWriter.write"], "function", ["home.repos.pwc.inspect_result.YaoYao1995_MEEE.misc.utils._make_dir"], ["\n", "", "return", "universe", ",", "domain", ",", "task", "\n", "\n", "\n", "", "def", "add_ray_init_args", "(", "parser", ")", ":", "\n", "\n", "    ", "def", "init_help_string", "(", "help_string", ")", ":", "\n", "        ", "return", "help_string", "+", "\" Passed to `ray.init`.\"", "\n", "\n", "", "parser", ".", "add_argument", "(", "\n", "'--cpus'", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "init_help_string", "(", "\"Cpus to allocate to ray process.\"", ")", ")", "\n", "parser", ".", "add_argument", "(", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.misc.utils.deep_update": [[102, 114], ["d.copy.copy", "u.copy.copy", "u.copy.items", "isinstance", "utils.deep_update", "d.copy.get"], "function", ["home.repos.pwc.inspect_result.YaoYao1995_MEEE.adapters.softlearning_env.SoftlearningEnv.copy", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.adapters.softlearning_env.SoftlearningEnv.copy", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.misc.utils.deep_update"], ["type", "=", "int", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "init_help_string", "(", "\"Gpus to allocate to ray process.\"", ")", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--resources'", ",", "\n", "type", "=", "json", ".", "loads", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "init_help_string", "(", "\"Resources to allocate to ray process.\"", ")", ")", "\n", "# parser.add_argument(", "\n", "#     '--include-webui',", "\n", "#     type=str,", "\n", "#     default=False,", "\n", "#     help=init_help_string(\"Boolean flag indicating whether to start the\"", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.misc.utils.get_git_rev": [[116, 133], ["git.Repo", "print", "os.getcwd"], "function", ["None"], ["parser", ".", "add_argument", "(", "\n", "'--temp-dir'", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "init_help_string", "(", "\"If provided, it will specify the root temporary\"", "\n", "\" directory for the Ray process.\"", ")", ")", "\n", "\n", "return", "parser", "\n", "\n", "\n", "", "def", "add_ray_tune_args", "(", "parser", ")", ":", "\n", "\n", "    ", "def", "tune_help_string", "(", "help_string", ")", ":", "\n", "        ", "return", "help_string", "+", "\" Passed to `tune.run_experiments`.\"", "\n", "\n", "", "parser", ".", "add_argument", "(", "\n", "'--resources-per-trial'", ",", "\n", "type", "=", "json", ".", "loads", ",", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.misc.utils.flatten": [[135, 148], ["unflattened.items", "dict", "ValueError", "isinstance", "items.extend", "items.append", "flatten().items", "utils.flatten"], "function", ["home.repos.pwc.inspect_result.YaoYao1995_MEEE.misc.utils.flatten"], ["help", "=", "tune_help_string", "(", "\"Resources to allocate for each trial.\"", ")", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--trial-gpus'", ",", "\n", "type", "=", "float", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "(", "\"Resources to allocate for each trial. Passed\"", "\n", "\" to `tune.run_experiments`.\"", ")", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--trial-extra-cpus'", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "(", "\"Extra CPUs to reserve in case the trials need to\"", "\n", "\" launch additional Ray actors that use CPUs.\"", ")", ")", "\n", "parser", ".", "add_argument", "(", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.misc.utils.unflatten": [[150, 162], ["flattened.items", "key.split"], "function", ["None"], ["type", "=", "float", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "(", "\"Extra GPUs to reserve in case the trials need to\"", "\n", "\" launch additional Ray actors that use GPUs.\"", ")", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--num-samples'", ",", "\n", "default", "=", "1", ",", "\n", "type", "=", "int", ",", "\n", "help", "=", "tune_help_string", "(", "\"Number of times to repeat each trial.\"", ")", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--upload-dir'", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "''", ",", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.static.halfcheetah.StaticFns.termination_fn": [[5, 12], ["numpy.array().repeat", "len", "len", "len", "len", "numpy.array"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "termination_fn", "(", "obs", ",", "act", ",", "next_obs", ")", ":", "\n", "        ", "assert", "len", "(", "obs", ".", "shape", ")", "==", "len", "(", "next_obs", ".", "shape", ")", "==", "len", "(", "act", ".", "shape", ")", "==", "2", "\n", "\n", "done", "=", "np", ".", "array", "(", "[", "False", "]", ")", ".", "repeat", "(", "len", "(", "obs", ")", ")", "\n", "done", "=", "done", "[", ":", ",", "None", "]", "\n", "return", "done", "\n", "", "", ""]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.static.inverted_pendulum.StaticFns.termination_fn": [[7, 18], ["len", "len", "len", "numpy.isfinite().all", "numpy.abs", "numpy.isfinite"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "termination_fn", "(", "obs", ",", "act", ",", "next_obs", ")", ":", "\n", "        ", "assert", "len", "(", "obs", ".", "shape", ")", "==", "len", "(", "next_obs", ".", "shape", ")", "==", "len", "(", "act", ".", "shape", ")", "==", "2", "\n", "\n", "notdone", "=", "np", ".", "isfinite", "(", "next_obs", ")", ".", "all", "(", "axis", "=", "-", "1", ")", "*", "(", "np", ".", "abs", "(", "next_obs", "[", ":", ",", "1", "]", ")", "<=", ".2", ")", "\n", "done", "=", "~", "notdone", "\n", "\n", "done", "=", "done", "[", ":", ",", "None", "]", "\n", "\n", "return", "done", "", "", "", ""]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.static.hopper.StaticFns.termination_fn": [[5, 19], ["len", "len", "len", "numpy.abs", "numpy.isfinite().all", "numpy.abs().all", "numpy.isfinite", "numpy.abs"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "termination_fn", "(", "obs", ",", "act", ",", "next_obs", ")", ":", "\n", "        ", "assert", "len", "(", "obs", ".", "shape", ")", "==", "len", "(", "next_obs", ".", "shape", ")", "==", "len", "(", "act", ".", "shape", ")", "==", "2", "\n", "\n", "height", "=", "next_obs", "[", ":", ",", "0", "]", "\n", "angle", "=", "next_obs", "[", ":", ",", "1", "]", "\n", "not_done", "=", "np", ".", "isfinite", "(", "next_obs", ")", ".", "all", "(", "axis", "=", "-", "1", ")", "*", "np", ".", "abs", "(", "next_obs", "[", ":", ",", "1", ":", "]", "<", "100", ")", ".", "all", "(", "axis", "=", "-", "1", ")", "*", "(", "height", ">", ".7", ")", "*", "(", "np", ".", "abs", "(", "angle", ")", "<", ".2", ")", "\n", "\n", "done", "=", "~", "not_done", "\n", "done", "=", "done", "[", ":", ",", "None", "]", "\n", "return", "done", "\n", "", "", ""]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.static.inverted_double_pendulum.StaticFns.termination_fn": [[7, 21], ["numpy.arctan2", "numpy.arctan2", "len", "len", "len", "numpy.cos"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "termination_fn", "(", "obs", ",", "act", ",", "next_obs", ")", ":", "\n", "        ", "assert", "len", "(", "obs", ".", "shape", ")", "==", "len", "(", "next_obs", ".", "shape", ")", "==", "len", "(", "act", ".", "shape", ")", "==", "2", "\n", "\n", "sin1", ",", "cos1", "=", "next_obs", "[", ":", ",", "1", "]", ",", "next_obs", "[", ":", ",", "3", "]", "\n", "sin2", ",", "cos2", "=", "next_obs", "[", ":", ",", "2", "]", ",", "next_obs", "[", ":", ",", "4", "]", "\n", "theta_1", "=", "np", ".", "arctan2", "(", "sin1", ",", "cos1", ")", "\n", "theta_2", "=", "np", ".", "arctan2", "(", "sin2", ",", "cos2", ")", "\n", "y", "=", "0.6", "*", "(", "cos1", "+", "np", ".", "cos", "(", "theta_1", "+", "theta_2", ")", ")", "\n", "\n", "done", "=", "y", "<=", "1", "\n", "\n", "done", "=", "done", "[", ":", ",", "None", "]", "\n", "return", "done", "", "", "", ""]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.static.humanoid_truncated_obs.StaticFns.termination_fn": [[7, 16], ["len", "len", "len"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "termination_fn", "(", "obs", ",", "act", ",", "next_obs", ")", ":", "\n", "        ", "assert", "len", "(", "obs", ".", "shape", ")", "==", "len", "(", "next_obs", ".", "shape", ")", "==", "len", "(", "act", ".", "shape", ")", "==", "2", "\n", "\n", "z", "=", "next_obs", "[", ":", ",", "0", "]", "\n", "done", "=", "(", "z", "<", "1.0", ")", "+", "(", "z", ">", "2.0", ")", "\n", "\n", "done", "=", "done", "[", ":", ",", "None", "]", "\n", "return", "done", "", "", "", ""]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.static.__init__.import_fns": [[7, 13], ["os.path.join", "os.path.join.replace", "importlib.import_module", "getattr"], "function", ["None"], []], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.static.ant_truncated_obs.StaticFns.termination_fn": [[5, 17], ["len", "len", "len", "numpy.isfinite().all", "numpy.isfinite"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "termination_fn", "(", "obs", ",", "act", ",", "next_obs", ")", ":", "\n", "        ", "assert", "len", "(", "obs", ".", "shape", ")", "==", "len", "(", "next_obs", ".", "shape", ")", "==", "len", "(", "act", ".", "shape", ")", "==", "2", "\n", "\n", "x", "=", "next_obs", "[", ":", ",", "0", "]", "\n", "not_done", "=", "np", ".", "isfinite", "(", "next_obs", ")", ".", "all", "(", "axis", "=", "-", "1", ")", "*", "(", "x", ">=", "0.2", ")", "*", "(", "x", "<=", "1.0", ")", "\n", "\n", "done", "=", "~", "not_done", "\n", "done", "=", "done", "[", ":", ",", "None", "]", "\n", "return", "done", "\n", "", "", ""]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.static.walker2d.StaticFns.termination_fn": [[5, 18], ["len", "len", "len"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "termination_fn", "(", "obs", ",", "act", ",", "next_obs", ")", ":", "\n", "        ", "assert", "len", "(", "obs", ".", "shape", ")", "==", "len", "(", "next_obs", ".", "shape", ")", "==", "len", "(", "act", ".", "shape", ")", "==", "2", "\n", "\n", "height", "=", "next_obs", "[", ":", ",", "0", "]", "\n", "angle", "=", "next_obs", "[", ":", ",", "1", "]", "\n", "not_done", "=", "(", "height", ">", "0.8", ")", "*", "(", "height", "<", "2.0", ")", "*", "(", "angle", ">", "-", "1.0", ")", "*", "(", "angle", "<", "1.0", ")", "\n", "done", "=", "~", "not_done", "\n", "done", "=", "done", "[", ":", ",", "None", "]", "\n", "return", "done", "\n", "", "", ""]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.env.ant.AntTruncatedObsEnv.__init__": [[11, 14], ["gym.envs.mujoco.mujoco_env.MujocoEnv.__init__", "gym.utils.EzPickle.__init__"], "methods", ["home.repos.pwc.inspect_result.YaoYao1995_MEEE.env.humanoid.HumanoidTruncatedObsEnv.__init__", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.env.humanoid.HumanoidTruncatedObsEnv.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "mujoco_env", ".", "MujocoEnv", ".", "__init__", "(", "self", ",", "'ant.xml'", ",", "5", ")", "\n", "utils", ".", "EzPickle", ".", "__init__", "(", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.env.ant.AntTruncatedObsEnv.step": [[15, 35], ["ant.AntTruncatedObsEnv.do_simulation", "ant.AntTruncatedObsEnv.state_vector", "ant.AntTruncatedObsEnv._get_obs", "ant.AntTruncatedObsEnv.get_body_com", "ant.AntTruncatedObsEnv.get_body_com", "numpy.square().sum", "numpy.sum", "numpy.isfinite().all", "dict", "numpy.square", "numpy.square", "numpy.clip", "numpy.isfinite"], "methods", ["home.repos.pwc.inspect_result.YaoYao1995_MEEE.env.humanoid.HumanoidTruncatedObsEnv._get_obs"], ["", "def", "step", "(", "self", ",", "a", ")", ":", "\n", "        ", "xposbefore", "=", "self", ".", "get_body_com", "(", "\"torso\"", ")", "[", "0", "]", "\n", "self", ".", "do_simulation", "(", "a", ",", "self", ".", "frame_skip", ")", "\n", "xposafter", "=", "self", ".", "get_body_com", "(", "\"torso\"", ")", "[", "0", "]", "\n", "forward_reward", "=", "(", "xposafter", "-", "xposbefore", ")", "/", "self", ".", "dt", "\n", "ctrl_cost", "=", ".5", "*", "np", ".", "square", "(", "a", ")", ".", "sum", "(", ")", "\n", "contact_cost", "=", "0.5", "*", "1e-3", "*", "np", ".", "sum", "(", "\n", "np", ".", "square", "(", "np", ".", "clip", "(", "self", ".", "sim", ".", "data", ".", "cfrc_ext", ",", "-", "1", ",", "1", ")", ")", ")", "\n", "survive_reward", "=", "1.0", "\n", "reward", "=", "forward_reward", "-", "ctrl_cost", "-", "contact_cost", "+", "survive_reward", "\n", "state", "=", "self", ".", "state_vector", "(", ")", "\n", "notdone", "=", "np", ".", "isfinite", "(", "state", ")", ".", "all", "(", ")", "and", "state", "[", "2", "]", ">=", "0.2", "and", "state", "[", "2", "]", "<=", "1.0", "\n", "done", "=", "not", "notdone", "\n", "ob", "=", "self", ".", "_get_obs", "(", ")", "\n", "return", "ob", ",", "reward", ",", "done", ",", "dict", "(", "\n", "reward_forward", "=", "forward_reward", ",", "\n", "reward_ctrl", "=", "-", "ctrl_cost", ",", "\n", "reward_contact", "=", "-", "contact_cost", ",", "\n", "reward_survive", "=", "survive_reward", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.env.ant.AntTruncatedObsEnv._get_obs": [[36, 40], ["numpy.concatenate"], "methods", ["None"], ["", "def", "_get_obs", "(", "self", ")", ":", "\n", "        ", "return", "np", ".", "concatenate", "(", "[", "\n", "self", ".", "sim", ".", "data", ".", "qpos", ".", "flat", "[", "2", ":", "]", ",", "\n", "self", ".", "sim", ".", "data", ".", "qvel", ".", "flat", ",", "\n", "# np.clip(self.sim.data.cfrc_ext, -1, 1).flat,", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.env.ant.AntTruncatedObsEnv.reset_model": [[43, 48], ["ant.AntTruncatedObsEnv.set_state", "ant.AntTruncatedObsEnv._get_obs", "ant.AntTruncatedObsEnv.np_random.uniform", "ant.AntTruncatedObsEnv.np_random.randn"], "methods", ["home.repos.pwc.inspect_result.YaoYao1995_MEEE.env.humanoid.HumanoidTruncatedObsEnv._get_obs"], ["", "def", "reset_model", "(", "self", ")", ":", "\n", "        ", "qpos", "=", "self", ".", "init_qpos", "+", "self", ".", "np_random", ".", "uniform", "(", "size", "=", "self", ".", "model", ".", "nq", ",", "low", "=", "-", ".1", ",", "high", "=", ".1", ")", "\n", "qvel", "=", "self", ".", "init_qvel", "+", "self", ".", "np_random", ".", "randn", "(", "self", ".", "model", ".", "nv", ")", "*", ".1", "\n", "self", ".", "set_state", "(", "qpos", ",", "qvel", ")", "\n", "return", "self", ".", "_get_obs", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.env.ant.AntTruncatedObsEnv.viewer_setup": [[49, 51], ["None"], "methods", ["None"], ["", "def", "viewer_setup", "(", "self", ")", ":", "\n", "        ", "self", ".", "viewer", ".", "cam", ".", "distance", "=", "self", ".", "model", ".", "stat", ".", "extent", "*", "0.5", "", "", "", ""]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.env.humanoid.HumanoidTruncatedObsEnv.__init__": [[17, 20], ["gym.envs.mujoco.mujoco_env.MujocoEnv.__init__", "gym.utils.EzPickle.__init__"], "methods", ["home.repos.pwc.inspect_result.YaoYao1995_MEEE.env.humanoid.HumanoidTruncatedObsEnv.__init__", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.env.humanoid.HumanoidTruncatedObsEnv.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "mujoco_env", ".", "MujocoEnv", ".", "__init__", "(", "self", ",", "'humanoid.xml'", ",", "5", ")", "\n", "utils", ".", "EzPickle", ".", "__init__", "(", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.env.humanoid.HumanoidTruncatedObsEnv._get_obs": [[21, 25], ["numpy.concatenate"], "methods", ["None"], ["", "def", "_get_obs", "(", "self", ")", ":", "\n", "        ", "data", "=", "self", ".", "sim", ".", "data", "\n", "return", "np", ".", "concatenate", "(", "[", "data", ".", "qpos", ".", "flat", "[", "2", ":", "]", ",", "\n", "data", ".", "qvel", ".", "flat", ",", "\n", "# data.cinert.flat,", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.env.humanoid.HumanoidTruncatedObsEnv.step": [[31, 45], ["humanoid.mass_center", "humanoid.HumanoidTruncatedObsEnv.do_simulation", "humanoid.mass_center", "min", "bool", "numpy.square().sum", "numpy.square().sum", "humanoid.HumanoidTruncatedObsEnv._get_obs", "dict", "numpy.square", "numpy.square"], "methods", ["home.repos.pwc.inspect_result.YaoYao1995_MEEE.env.humanoid.mass_center", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.env.humanoid.mass_center", "home.repos.pwc.inspect_result.YaoYao1995_MEEE.env.humanoid.HumanoidTruncatedObsEnv._get_obs"], ["", "def", "step", "(", "self", ",", "a", ")", ":", "\n", "        ", "pos_before", "=", "mass_center", "(", "self", ".", "model", ",", "self", ".", "sim", ")", "\n", "self", ".", "do_simulation", "(", "a", ",", "self", ".", "frame_skip", ")", "\n", "pos_after", "=", "mass_center", "(", "self", ".", "model", ",", "self", ".", "sim", ")", "\n", "alive_bonus", "=", "5.0", "\n", "data", "=", "self", ".", "sim", ".", "data", "\n", "lin_vel_cost", "=", "0.25", "*", "(", "pos_after", "-", "pos_before", ")", "/", "self", ".", "model", ".", "opt", ".", "timestep", "\n", "quad_ctrl_cost", "=", "0.1", "*", "np", ".", "square", "(", "data", ".", "ctrl", ")", ".", "sum", "(", ")", "\n", "quad_impact_cost", "=", ".5e-6", "*", "np", ".", "square", "(", "data", ".", "cfrc_ext", ")", ".", "sum", "(", ")", "\n", "quad_impact_cost", "=", "min", "(", "quad_impact_cost", ",", "10", ")", "\n", "reward", "=", "lin_vel_cost", "-", "quad_ctrl_cost", "-", "quad_impact_cost", "+", "alive_bonus", "\n", "qpos", "=", "self", ".", "sim", ".", "data", ".", "qpos", "\n", "done", "=", "bool", "(", "(", "qpos", "[", "2", "]", "<", "1.0", ")", "or", "(", "qpos", "[", "2", "]", ">", "2.0", ")", ")", "\n", "return", "self", ".", "_get_obs", "(", ")", ",", "reward", ",", "done", ",", "dict", "(", "reward_linvel", "=", "lin_vel_cost", ",", "reward_quadctrl", "=", "-", "quad_ctrl_cost", ",", "reward_alive", "=", "alive_bonus", ",", "reward_impact", "=", "-", "quad_impact_cost", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.env.humanoid.HumanoidTruncatedObsEnv.reset_model": [[46, 53], ["humanoid.HumanoidTruncatedObsEnv.set_state", "humanoid.HumanoidTruncatedObsEnv._get_obs", "humanoid.HumanoidTruncatedObsEnv.np_random.uniform", "humanoid.HumanoidTruncatedObsEnv.np_random.uniform"], "methods", ["home.repos.pwc.inspect_result.YaoYao1995_MEEE.env.humanoid.HumanoidTruncatedObsEnv._get_obs"], ["", "def", "reset_model", "(", "self", ")", ":", "\n", "        ", "c", "=", "0.01", "\n", "self", ".", "set_state", "(", "\n", "self", ".", "init_qpos", "+", "self", ".", "np_random", ".", "uniform", "(", "low", "=", "-", "c", ",", "high", "=", "c", ",", "size", "=", "self", ".", "model", ".", "nq", ")", ",", "\n", "self", ".", "init_qvel", "+", "self", ".", "np_random", ".", "uniform", "(", "low", "=", "-", "c", ",", "high", "=", "c", ",", "size", "=", "self", ".", "model", ".", "nv", ",", ")", "\n", ")", "\n", "return", "self", ".", "_get_obs", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.env.humanoid.HumanoidTruncatedObsEnv.viewer_setup": [[54, 59], ["None"], "methods", ["None"], ["", "def", "viewer_setup", "(", "self", ")", ":", "\n", "        ", "self", ".", "viewer", ".", "cam", ".", "trackbodyid", "=", "1", "\n", "self", ".", "viewer", ".", "cam", ".", "distance", "=", "self", ".", "model", ".", "stat", ".", "extent", "*", "1.0", "\n", "self", ".", "viewer", ".", "cam", ".", "lookat", "[", "2", "]", "=", "2.0", "\n", "self", ".", "viewer", ".", "cam", ".", "elevation", "=", "-", "20", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.env.humanoid.mass_center": [[5, 9], ["numpy.expand_dims", "numpy.sum", "numpy.sum"], "function", ["None"], ["def", "mass_center", "(", "model", ",", "sim", ")", ":", "\n", "    ", "mass", "=", "np", ".", "expand_dims", "(", "model", ".", "body_mass", ",", "1", ")", "\n", "xpos", "=", "sim", ".", "data", ".", "xipos", "\n", "return", "(", "np", ".", "sum", "(", "mass", "*", "xpos", ",", "0", ")", "/", "np", ".", "sum", "(", "mass", ")", ")", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.YaoYao1995_MEEE.env.__init__.register_mbpo_environments": [[14, 23], ["tuple", "gym.register"], "function", ["None"], []]}