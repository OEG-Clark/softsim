{"home.repos.pwc.inspect_result.CRIPAC-DIG_A-PGNN.None.model_last.Model.__init__": [[16, 54], ["math.sqrt", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.random_uniform_initializer", "tensorflow.random_uniform_initializer", "tensorflow.random_uniform_initializer", "tensorflow.zeros_initializer", "tensorflow.random_uniform_initializer", "tensorflow.random_uniform_initializer", "tensorflow.random_uniform_initializer", "tensorflow.zeros_initializer"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "hidden_size", "=", "100", ",", "user_size", "=", "100", ",", "batch_size", "=", "100", ",", "seq_max", "=", "20", ",", "group_max", "=", "100", ",", "mode", "=", "'usual_attention'", ",", "data", "=", "None", ",", "decoder_attention", "=", "True", ",", "\n", "encoder_attention", "=", "True", ",", "user_", "=", "True", ",", "behaviour_", "=", "False", ",", "\n", "history_", "=", "True", ",", "sparse", "=", "True", ")", ":", "\n", "        ", "self", ".", "hidden_size", "=", "hidden_size", "\n", "self", ".", "user_size", "=", "user_size", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "seq_max", "=", "seq_max", "\n", "self", ".", "group_max", "=", "group_max", "\n", "self", ".", "mode", "=", "mode", "\n", "self", ".", "data", "=", "data", "\n", "self", ".", "decoder_attention", "=", "decoder_attention", "\n", "self", ".", "encoder_attention", "=", "encoder_attention", "\n", "self", ".", "history_", "=", "history_", "\n", "self", ".", "user_", "=", "user_", "\n", "self", ".", "behaviour_", "=", "behaviour_", "\n", "self", ".", "sparse", "=", "sparse", "\n", "self", ".", "stdv", "=", "1.0", "/", "math", ".", "sqrt", "(", "self", ".", "hidden_size", ")", "\n", "\n", "if", "self", ".", "mode", "==", "'transformer'", ":", "\n", "            ", "self", ".", "control_dim", "=", "1", "\n", "", "if", "self", ".", "mode", "==", "'usual_attention'", "or", "'transformer'", "or", "'attention'", ":", "\n", "            ", "self", ".", "u_w1", "=", "tf", ".", "get_variable", "(", "'u_w1'", ",", "[", "self", ".", "hidden_size", ",", "self", ".", "hidden_size", "]", ",", "dtype", "=", "tf", ".", "float32", ",", "\n", "initializer", "=", "tf", ".", "random_uniform_initializer", "(", "-", "self", ".", "stdv", ",", "self", ".", "stdv", ")", ")", "\n", "self", ".", "u_w2", "=", "tf", ".", "get_variable", "(", "'u_w2'", ",", "[", "self", ".", "hidden_size", ",", "self", ".", "hidden_size", "]", ",", "dtype", "=", "tf", ".", "float32", ",", "\n", "initializer", "=", "tf", ".", "random_uniform_initializer", "(", "-", "self", ".", "stdv", ",", "self", ".", "stdv", ")", ")", "\n", "self", ".", "u_v", "=", "tf", ".", "get_variable", "(", "'u_v'", ",", "[", "1", ",", "self", ".", "hidden_size", "]", ",", "dtype", "=", "tf", ".", "float32", ",", "\n", "initializer", "=", "tf", ".", "random_uniform_initializer", "(", "-", "self", ".", "stdv", ",", "self", ".", "stdv", ")", ")", "\n", "self", ".", "u_b", "=", "tf", ".", "get_variable", "(", "'u_b'", ",", "[", "self", ".", "hidden_size", "]", ",", "dtype", "=", "tf", ".", "float32", ",", "initializer", "=", "tf", ".", "zeros_initializer", "(", ")", ")", "\n", "self", ".", "control_dim", "=", "2", "\n", "", "if", "self", ".", "history_", ":", "\n", "            ", "self", ".", "h_w1", "=", "tf", ".", "get_variable", "(", "'h_w1'", ",", "[", "self", ".", "hidden_size", ",", "self", ".", "hidden_size", "]", ",", "dtype", "=", "tf", ".", "float32", ",", "\n", "initializer", "=", "tf", ".", "random_uniform_initializer", "(", "-", "self", ".", "stdv", ",", "self", ".", "stdv", ")", ")", "\n", "self", ".", "h_w2", "=", "tf", ".", "get_variable", "(", "'h_w2'", ",", "[", "self", ".", "hidden_size", ",", "self", ".", "hidden_size", "]", ",", "dtype", "=", "tf", ".", "float32", ",", "\n", "initializer", "=", "tf", ".", "random_uniform_initializer", "(", "-", "self", ".", "stdv", ",", "self", ".", "stdv", ")", ")", "\n", "self", ".", "h_v", "=", "tf", ".", "get_variable", "(", "'h_v'", ",", "[", "1", ",", "self", ".", "hidden_size", "]", ",", "dtype", "=", "tf", ".", "float32", ",", "\n", "initializer", "=", "tf", ".", "random_uniform_initializer", "(", "-", "self", ".", "stdv", ",", "self", ".", "stdv", ")", ")", "\n", "self", ".", "h_b", "=", "tf", ".", "get_variable", "(", "'h_b'", ",", "[", "self", ".", "hidden_size", "]", ",", "dtype", "=", "tf", ".", "float32", ",", "initializer", "=", "tf", ".", "zeros_initializer", "(", ")", ")", "\n", "self", ".", "control_dim", "+=", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.CRIPAC-DIG_A-PGNN.None.model_last.Model.session_embed": [[55, 79], ["tensorflow.stack", "tensorflow.sequence_mask", "tensorflow.gather_nd", "model_last.stamp_attention", "tensorflow.div", "transformer.multihead_attention", "tensorflow.stack", "tensorflow.nn.embedding_lookup", "tensorflow.reduce_sum", "tensorflow.to_float", "tensorflow.reduce_max", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "range", "tensorflow.expand_dims", "tensorflow.range"], "methods", ["home.repos.pwc.inspect_result.CRIPAC-DIG_A-PGNN.None.model_last.stamp_attention", "home.repos.pwc.inspect_result.CRIPAC-DIG_A-PGNN.None.transformer.multihead_attention"], ["", "", "def", "session_embed", "(", "self", ",", "embed", ",", "session_alias", ",", "session_mask", ",", "session_len", ",", "user", ",", "train", "=", "True", ")", ":", "\n", "        ", "session", "=", "tf", ".", "stack", "(", "[", "tf", ".", "nn", ".", "embedding_lookup", "(", "embed", "[", "i", "]", ",", "session_alias", "[", "i", "]", ")", "for", "i", "in", "range", "(", "self", ".", "batch_size", ")", "]", ",", "0", ")", "\n", "if", "self", ".", "pool", "==", "'mean'", ":", "\n", "            ", "session_seq", "=", "tf", ".", "div", "(", "tf", ".", "reduce_sum", "(", "session", ",", "axis", "=", "2", ")", ",", "tf", ".", "to_float", "(", "tf", ".", "expand_dims", "(", "session_mask", ",", "2", ")", ")", ")", "\n", "", "elif", "self", ".", "pool", "==", "'max'", ":", "\n", "            ", "session_seq", "=", "tf", ".", "reduce_max", "(", "session", ",", "axis", "=", "2", ")", "\n", "", "session_embed_mask", "=", "tf", ".", "sequence_mask", "(", "session_len", ",", "maxlen", "=", "self", ".", "group_max", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "if", "self", ".", "encoder_attention", ":", "\n", "            ", "session_seq", "=", "multihead_attention", "(", "tf", ".", "reshape", "(", "session_seq", ",", "[", "self", ".", "batch_size", ",", "-", "1", ",", "self", ".", "hidden_size", "]", ")", ",", "\n", "session_embed_mask", ",", "\n", "tf", ".", "reshape", "(", "session_seq", ",", "[", "self", ".", "batch_size", ",", "-", "1", ",", "self", ".", "hidden_size", "]", ")", ",", "\n", "session_embed_mask", ",", "self", ".", "hidden_size", ",", "is_training", "=", "train", ")", "\n", "# elif self.mode == 'transformer':", "\n", "#     session_seq = encoder(tf.reshape(session_seq, [self.batch_size, -1, self.hidden_size]),", "\n", "#                           session_embed_mask, self.group_max, self.hidden_size, train=train)", "\n", "# --------------stamp attention------------------", "\n", "", "session_last", "=", "tf", ".", "gather_nd", "(", "session_seq", ",", "\n", "tf", ".", "stack", "(", "[", "tf", ".", "range", "(", "self", ".", "batch_size", ",", "dtype", "=", "tf", ".", "int64", ")", ",", "session_len", "-", "1", "]", ",", "axis", "=", "1", ")", ")", "\n", "session_ma", "=", "stamp_attention", "(", "session_seq", ",", "session_last", ",", "session_embed_mask", ",", "self", ".", "h_w1", ",", "self", ".", "h_w2", ",", "self", ".", "h_b", ",", "\n", "self", ".", "h_v", ",", "self", ".", "hidden_size", ",", "self", ".", "batch_size", ")", "\n", "if", "self", ".", "mode", "==", "'transformer'", "or", "self", ".", "mode", "==", "'attention'", ":", "\n", "            ", "return", "tf", ".", "reshape", "(", "session_seq", ",", "[", "self", ".", "batch_size", ",", "-", "1", ",", "self", ".", "hidden_size", "]", ")", ",", "session_ma", "\n", "", "else", ":", "\n", "            ", "return", "session_ma", "\n", "\n"]], "home.repos.pwc.inspect_result.CRIPAC-DIG_A-PGNN.None.model_last.Model.forward": [[80, 168], ["model_last.Model.ggnn", "tensorflow.variable_scope", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.reduce_mean", "model_last.Model.no_graph", "tensorflow.nn.embedding_lookup", "tensorflow.concat", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.nn.sparse_softmax_cross_entropy_with_logits", "tensorflow.trainable_variables", "tensorflow.train.AdamOptimizer().minimize", "tensorflow.nn.top_k", "tensorflow.variable_scope", "tensorflow.sequence_mask", "model_last.Model.session_embed", "tensorflow.stack", "tensorflow.sequence_mask", "model_last.mul_attention", "tensorflow.gather_nd", "model_last.stamp_attention", "tensorflow.add_n", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.stack", "tensorflow.concat", "tensorflow.variable_scope", "tensorflow.sequence_mask", "model_last.Model.session_embed", "tensorflow.stack", "tensorflow.sequence_mask", "model_last.trans_attention", "tensorflow.gather_nd", "model_last.stamp_attention", "tensorflow.random_uniform_initializer", "tensorflow.random_uniform_initializer", "tensorflow.train.AdamOptimizer", "tensorflow.nn.embedding_lookup", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.stack", "tensorflow.concat", "tensorflow.variable_scope", "tensorflow.sequence_mask", "tensorflow.stack", "tensorflow.gather_nd", "model_last.stamp_attention", "tensorflow.nn.l2_loss", "range", "tensorflow.range", "tensorflow.nn.embedding_lookup", "transformer.multihead_attention", "tensorflow.stack", "model_last.Model.session_embed", "tensorflow.concat", "range", "tensorflow.range", "tensorflow.nn.embedding_lookup", "tensorflow.reshape", "tensorflow.reshape", "range", "tensorflow.range"], "methods", ["home.repos.pwc.inspect_result.CRIPAC-DIG_A-PGNN.None.model_last.Graph.ggnn", "home.repos.pwc.inspect_result.CRIPAC-DIG_A-PGNN.None.model_last.Graph.no_graph", "home.repos.pwc.inspect_result.CRIPAC-DIG_A-PGNN.None.model_last.Model.session_embed", "home.repos.pwc.inspect_result.CRIPAC-DIG_A-PGNN.None.model_last.mul_attention", "home.repos.pwc.inspect_result.CRIPAC-DIG_A-PGNN.None.model_last.stamp_attention", "home.repos.pwc.inspect_result.CRIPAC-DIG_A-PGNN.None.model_last.Model.session_embed", "home.repos.pwc.inspect_result.CRIPAC-DIG_A-PGNN.None.model_last.trans_attention", "home.repos.pwc.inspect_result.CRIPAC-DIG_A-PGNN.None.model_last.stamp_attention", "home.repos.pwc.inspect_result.CRIPAC-DIG_A-PGNN.None.model_last.stamp_attention", "home.repos.pwc.inspect_result.CRIPAC-DIG_A-PGNN.None.transformer.multihead_attention", "home.repos.pwc.inspect_result.CRIPAC-DIG_A-PGNN.None.model_last.Model.session_embed"], ["", "", "def", "forward", "(", "self", ",", "adj_in", ",", "adj_out", ",", "items", ",", "seq_alias", ",", "seq_mask", ",", "\n", "session_alias", ",", "session_len", ",", "session_mask", ",", "tar", ",", "user", ",", "train", "=", "True", ")", ":", "\n", "        ", "if", "self", ".", "graph", "==", "'ggnn'", ":", "\n", "            ", "re_embedding", "=", "self", ".", "ggnn", "(", "items", ",", "user", ",", "adj_in", ",", "adj_out", ",", "is_training", "=", "train", ")", "\n", "", "elif", "self", ".", "graph", "==", "'no_graph'", ":", "\n", "            ", "re_embedding", "=", "self", ".", "no_graph", "(", "items", ")", "\n", "", "b", "=", "self", ".", "embedding", "[", "1", ":", "]", "\n", "with", "tf", ".", "variable_scope", "(", "'forward'", ")", ":", "\n", "            ", "if", "self", ".", "mode", "==", "'transformer'", ":", "\n", "                ", "with", "tf", ".", "variable_scope", "(", "'transformer'", ")", ":", "\n", "                    ", "session_embed_mask", "=", "tf", ".", "sequence_mask", "(", "session_len", ",", "maxlen", "=", "self", ".", "group_max", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "encoder_out", ",", "session_h", "=", "self", ".", "session_embed", "(", "\n", "re_embedding", ",", "session_alias", ",", "session_mask", ",", "session_len", ",", "user", ",", "train", "=", "train", ")", "\n", "decoder_input", "=", "tf", ".", "stack", "(", "\n", "[", "tf", ".", "nn", ".", "embedding_lookup", "(", "re_embedding", "[", "i", "]", ",", "seq_alias", "[", "i", "]", ")", "for", "i", "in", "range", "(", "self", ".", "batch_size", ")", "]", ",", "0", ")", "\n", "dec_mask", "=", "tf", ".", "sequence_mask", "(", "seq_mask", ",", "maxlen", "=", "seq_alias", ".", "shape", "[", "-", "1", "]", ".", "value", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "decoder_out", "=", "mul_attention", "(", "\n", "tf", ".", "reshape", "(", "decoder_input", ",", "[", "self", ".", "batch_size", ",", "-", "1", ",", "self", ".", "hidden_size", "]", ")", ",", "\n", "dec_mask", ",", "\n", "tf", ".", "reshape", "(", "encoder_out", ",", "[", "self", ".", "batch_size", ",", "-", "1", ",", "self", ".", "hidden_size", "]", ")", ",", "\n", "session_embed_mask", ",", "\n", "self", ".", "hidden_size", ",", "data", "=", "self", ".", "data", ")", "\n", "#stamp", "\n", "decoder_last", "=", "tf", ".", "gather_nd", "(", "decoder_out", ",", "\n", "tf", ".", "stack", "(", "[", "tf", ".", "range", "(", "self", ".", "batch_size", ",", "dtype", "=", "tf", ".", "int64", ")", ",", "seq_mask", "-", "1", "]", ",", "axis", "=", "1", ")", ")", "\n", "ma", "=", "stamp_attention", "(", "decoder_out", ",", "decoder_last", ",", "dec_mask", ",", "self", ".", "u_w1", ",", "self", ".", "u_w2", ",", "self", ".", "u_b", ",", "self", ".", "u_v", ",", "\n", "self", ".", "hidden_size", ",", "self", ".", "batch_size", ")", "\n", "if", "self", ".", "history_", ":", "\n", "                        ", "ma", "=", "tf", ".", "concat", "(", "[", "ma", ",", "session_h", "]", ",", "-", "1", ")", "\n", "", "", "", "elif", "self", ".", "mode", "==", "'attention'", ":", "\n", "                ", "with", "tf", ".", "variable_scope", "(", "'attention'", ")", ":", "\n", "                    ", "session_embed_mask", "=", "tf", ".", "sequence_mask", "(", "session_len", ",", "maxlen", "=", "self", ".", "group_max", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "encoder_out", ",", "session_h", "=", "self", ".", "session_embed", "(", "\n", "re_embedding", ",", "session_alias", ",", "session_mask", ",", "session_len", ",", "user", ",", "train", "=", "train", ")", "\n", "decoder_input", "=", "tf", ".", "stack", "(", "\n", "[", "tf", ".", "nn", ".", "embedding_lookup", "(", "re_embedding", "[", "i", "]", ",", "seq_alias", "[", "i", "]", ")", "for", "i", "in", "range", "(", "self", ".", "batch_size", ")", "]", ",", "0", ")", "\n", "dec_mask", "=", "tf", ".", "sequence_mask", "(", "seq_mask", ",", "maxlen", "=", "seq_alias", ".", "shape", "[", "-", "1", "]", ".", "value", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "decoder_out", "=", "trans_attention", "(", "tf", ".", "reshape", "(", "encoder_out", ",", "[", "self", ".", "batch_size", ",", "-", "1", ",", "self", ".", "hidden_size", "]", ")", ",", "\n", "tf", ".", "reshape", "(", "decoder_input", ",", "[", "self", ".", "batch_size", ",", "-", "1", ",", "self", ".", "hidden_size", "]", ")", ",", "\n", "session_embed_mask", ",", "dec_mask", ",", "self", ".", "hidden_size", ")", "\n", "# stamp", "\n", "decoder_last", "=", "tf", ".", "gather_nd", "(", "decoder_out", ",", "\n", "tf", ".", "stack", "(", "[", "tf", ".", "range", "(", "self", ".", "batch_size", ",", "dtype", "=", "tf", ".", "int64", ")", ",", "seq_mask", "-", "1", "]", ",", "\n", "axis", "=", "1", ")", ")", "\n", "ma", "=", "stamp_attention", "(", "decoder_out", ",", "decoder_last", ",", "dec_mask", ",", "self", ".", "u_w1", ",", "self", ".", "u_w2", ",", "self", ".", "u_b", ",", "self", ".", "u_v", ",", "\n", "self", ".", "hidden_size", ",", "self", ".", "batch_size", ")", "\n", "if", "self", ".", "history_", ":", "\n", "                        ", "ma", "=", "tf", ".", "concat", "(", "[", "ma", ",", "session_h", "]", ",", "-", "1", ")", "\n", "\n", "", "", "", "elif", "self", ".", "mode", "==", "'usual_attention'", ":", "\n", "                ", "with", "tf", ".", "variable_scope", "(", "'usual_attention'", ")", ":", "\n", "                    ", "seq_mask_", "=", "tf", ".", "sequence_mask", "(", "seq_mask", ",", "maxlen", "=", "seq_alias", ".", "shape", "[", "-", "1", "]", ".", "value", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "seq_h", "=", "tf", ".", "stack", "(", "\n", "[", "tf", ".", "nn", ".", "embedding_lookup", "(", "re_embedding", "[", "i", "]", ",", "seq_alias", "[", "i", "]", ")", "for", "i", "in", "range", "(", "self", ".", "batch_size", ")", "]", ",", "axis", "=", "0", ")", "\n", "#\u52a0\u5165self attention", "\n", "if", "self", ".", "decoder_attention", ":", "\n", "                        ", "seq_h", "=", "multihead_attention", "(", "tf", ".", "reshape", "(", "seq_h", ",", "[", "self", ".", "batch_size", ",", "-", "1", ",", "self", ".", "hidden_size", "]", ")", ",", "seq_mask_", ",", "\n", "tf", ".", "reshape", "(", "seq_h", ",", "[", "self", ".", "batch_size", ",", "-", "1", ",", "self", ".", "hidden_size", "]", ")", ",", "seq_mask_", ",", "\n", "self", ".", "hidden_size", ",", "causality", "=", "False", ",", "scope", "=", "'self_attention'", ")", "\n", "", "last_h", "=", "tf", ".", "gather_nd", "(", "seq_h", ",", "tf", ".", "stack", "(", "[", "tf", ".", "range", "(", "self", ".", "batch_size", ",", "dtype", "=", "tf", ".", "int64", ")", ",", "seq_mask", "-", "1", "]", ",", "axis", "=", "1", ")", ")", "\n", "ma", "=", "stamp_attention", "(", "seq_h", ",", "last_h", ",", "seq_mask_", ",", "self", ".", "u_w1", ",", "self", ".", "u_w2", ",", "self", ".", "u_b", ",", "self", ".", "u_v", ",", "\n", "self", ".", "hidden_size", ",", "self", ".", "batch_size", ")", "\n", "if", "self", ".", "history_", ":", "\n", "                        ", "session_re", "=", "self", ".", "session_embed", "(", "\n", "re_embedding", ",", "session_alias", ",", "session_mask", ",", "session_len", ",", "user", ",", "train", "=", "train", ")", "\n", "ma", "=", "tf", ".", "concat", "(", "[", "ma", ",", "session_re", "]", ",", "-", "1", ")", "\n", "", "", "", "if", "self", ".", "user_", ":", "\n", "                ", "user_embed", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "user_embedding", ",", "user", ")", "\n", "ma", "=", "tf", ".", "concat", "(", "[", "ma", ",", "user_embed", "]", ",", "-", "1", ")", "\n", "self", ".", "B", "=", "tf", ".", "get_variable", "(", "'B'", ",", "[", "self", ".", "control_dim", "*", "self", ".", "hidden_size", "+", "self", ".", "user_size", ",", "self", ".", "hidden_size", "]", ",", "\n", "initializer", "=", "tf", ".", "random_uniform_initializer", "(", "-", "self", ".", "stdv", ",", "self", ".", "stdv", ")", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "B", "=", "tf", ".", "get_variable", "(", "'B'", ",", "[", "self", ".", "control_dim", "*", "self", ".", "hidden_size", ",", "self", ".", "hidden_size", "]", ",", "\n", "initializer", "=", "tf", ".", "random_uniform_initializer", "(", "-", "self", ".", "stdv", ",", "self", ".", "stdv", ")", ")", "\n", "", "y1", "=", "tf", ".", "matmul", "(", "ma", ",", "self", ".", "B", ")", "\n", "logits", "=", "tf", ".", "matmul", "(", "y1", ",", "b", ",", "transpose_b", "=", "True", ")", "\n", "loss", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "nn", ".", "sparse_softmax_cross_entropy_with_logits", "(", "labels", "=", "tar", "-", "1", ",", "logits", "=", "logits", ")", ")", "\n", "if", "train", ":", "\n", "                ", "self", ".", "vars", "=", "tf", ".", "trainable_variables", "(", ")", "\n", "lossL2", "=", "tf", ".", "add_n", "(", "[", "tf", ".", "nn", ".", "l2_loss", "(", "v", ")", "for", "v", "in", "self", ".", "vars", "if", "v", ".", "name", "\n", "not", "in", "[", "'b_in'", ",", "'b_out'", ",", "'u_b'", ",", "'h_b'", "]", "]", ")", "*", "self", ".", "L2", "\n", "train_loss", "=", "loss", "+", "lossL2", "\n", "self", ".", "opt", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "self", ".", "lr", ")", ".", "minimize", "(", "train_loss", ")", "\n", "return", "train_loss", ",", "self", ".", "opt", "\n", "\n", "", "else", ":", "\n", "                ", "index", "=", "tf", ".", "nn", ".", "top_k", "(", "logits", ",", "20", ")", "\n", "return", "loss", ",", "index", "\n", "\n"]], "home.repos.pwc.inspect_result.CRIPAC-DIG_A-PGNN.None.model_last.Graph.__init__": [[171, 213], ["model_last.Model.__init__", "tensorflow.get_variable", "tensorflow.concat", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.random_uniform_initializer", "tensorflow.constant", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.random_uniform_initializer", "tensorflow.random_uniform_initializer", "tensorflow.random_uniform_initializer", "tensorflow.random_uniform_initializer", "tensorflow.random_uniform_initializer", "tensorflow.random_uniform_initializer", "tensorflow.random_uniform_initializer", "tensorflow.random_uniform_initializer"], "methods", ["home.repos.pwc.inspect_result.CRIPAC-DIG_A-PGNN.None.model_last.Graph.__init__"], ["    ", "def", "__init__", "(", "self", ",", "hidden_size", ",", "user_size", "=", "10", ",", "batch_size", "=", "100", ",", "seq_max", "=", "20", ",", "group_max", "=", "50", ",", "n_item", "=", "None", ",", "n_user", "=", "None", ",", "\n", "n_behaviour", "=", "None", ",", "lr", "=", "None", ",", "l2", "=", "None", ",", "step", "=", "1", ",", "decay", "=", "None", ",", "spare", "=", "True", ",", "ggnn_drop", "=", "0", ",", "\n", "graph", "=", "'ggnn'", ",", "mode", "=", "'usual_attention'", ",", "data", "=", "None", ",", "\n", "decoder_attention", "=", "True", ",", "encoder_attention", "=", "True", ",", "user_", "=", "True", ",", "behaviour_", "=", "False", ",", "history_", "=", "True", ",", "pool", "=", "'max'", ")", ":", "\n", "        ", "super", "(", "Graph", ",", "self", ")", ".", "__init__", "(", "hidden_size", ",", "user_size", ",", "batch_size", ",", "seq_max", ",", "group_max", ",", "mode", ",", "data", ",", "\n", "decoder_attention", ",", "encoder_attention", ",", "user_", ",", "\n", "behaviour_", ",", "history_", ",", "spare", ")", "\n", "self", ".", "item_embedding", "=", "tf", ".", "get_variable", "(", "shape", "=", "[", "n_item", "-", "1", ",", "hidden_size", "]", ",", "name", "=", "'embedding'", ",", "dtype", "=", "tf", ".", "float32", ",", "\n", "initializer", "=", "tf", ".", "random_uniform_initializer", "(", "-", "self", ".", "stdv", ",", "self", ".", "stdv", ")", ")", "\n", "self", ".", "embedding", "=", "tf", ".", "concat", "(", "[", "tf", ".", "constant", "(", "[", "-", "1e10", "]", ",", "shape", "=", "[", "1", ",", "self", ".", "hidden_size", "]", ")", ",", "self", ".", "item_embedding", "]", ",", "0", ")", "\n", "if", "self", ".", "user_", ":", "\n", "            ", "self", ".", "user_embedding", "=", "tf", ".", "get_variable", "(", "shape", "=", "[", "n_user", ",", "user_size", "]", ",", "name", "=", "'user_embedding'", ",", "dtype", "=", "tf", ".", "float32", ",", "\n", "initializer", "=", "tf", ".", "random_uniform_initializer", "(", "-", "self", ".", "stdv", ",", "self", ".", "stdv", ")", ")", "\n", "", "if", "self", ".", "behaviour_", ":", "\n", "            ", "self", ".", "b_embedding", "=", "tf", ".", "get_variable", "(", "shape", "=", "[", "n_behaviour", ",", "hidden_size", "]", ",", "name", "=", "'behaviour_embedding'", ",", "\n", "dtype", "=", "tf", ".", "float32", ",", "\n", "initializer", "=", "tf", ".", "random_uniform_initializer", "(", "-", "self", ".", "stdv", ",", "self", ".", "stdv", ")", ")", "\n", "", "self", ".", "n_item", "=", "n_item", "\n", "self", ".", "n_user", "=", "n_user", "\n", "self", ".", "n_behaviour", "=", "n_behaviour", "\n", "self", ".", "graph", "=", "graph", "\n", "self", ".", "L2", "=", "l2", "\n", "self", ".", "lr", "=", "lr", "\n", "self", ".", "ggnn_drop", "=", "ggnn_drop", "\n", "self", ".", "step", "=", "step", "\n", "self", ".", "decay", "=", "decay", "\n", "self", ".", "pool", "=", "pool", "\n", "if", "self", ".", "graph", "==", "'ggnn'", "or", "'gcn'", ":", "\n", "            ", "self", ".", "W_in", "=", "tf", ".", "get_variable", "(", "'W_in'", ",", "shape", "=", "[", "self", ".", "hidden_size", ",", "self", ".", "hidden_size", "]", ",", "dtype", "=", "tf", ".", "float32", ",", "\n", "initializer", "=", "tf", ".", "random_uniform_initializer", "(", "-", "self", ".", "stdv", ",", "self", ".", "stdv", ")", ")", "\n", "self", ".", "b_in", "=", "tf", ".", "get_variable", "(", "'b_in'", ",", "[", "self", ".", "hidden_size", "]", ",", "dtype", "=", "tf", ".", "float32", ",", "\n", "initializer", "=", "tf", ".", "random_uniform_initializer", "(", "-", "self", ".", "stdv", ",", "self", ".", "stdv", ")", ")", "\n", "self", ".", "W_out", "=", "tf", ".", "get_variable", "(", "'W_out'", ",", "[", "self", ".", "hidden_size", ",", "self", ".", "hidden_size", "]", ",", "dtype", "=", "tf", ".", "float32", ",", "\n", "initializer", "=", "tf", ".", "random_uniform_initializer", "(", "-", "self", ".", "stdv", ",", "self", ".", "stdv", ")", ")", "\n", "\n", "self", ".", "b_out", "=", "tf", ".", "get_variable", "(", "'b_out'", ",", "[", "self", ".", "hidden_size", "]", ",", "dtype", "=", "tf", ".", "float32", ",", "\n", "initializer", "=", "tf", ".", "random_uniform_initializer", "(", "-", "self", ".", "stdv", ",", "self", ".", "stdv", ")", ")", "\n", "if", "self", ".", "user_", ":", "\n", "                ", "self", ".", "u_in", "=", "tf", ".", "get_variable", "(", "'u_in'", ",", "shape", "=", "[", "user_size", ",", "self", ".", "hidden_size", "]", ",", "dtype", "=", "tf", ".", "float32", ",", "\n", "initializer", "=", "tf", ".", "random_uniform_initializer", "(", "-", "self", ".", "stdv", ",", "self", ".", "stdv", ")", ")", "\n", "self", ".", "u_out", "=", "tf", ".", "get_variable", "(", "'u_out'", ",", "[", "user_size", ",", "self", ".", "hidden_size", "]", ",", "dtype", "=", "tf", ".", "float32", ",", "\n", "initializer", "=", "tf", ".", "random_uniform_initializer", "(", "-", "self", ".", "stdv", ",", "self", ".", "stdv", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CRIPAC-DIG_A-PGNN.None.model_last.Graph.ggnn": [[214, 242], ["tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.rnn_cell.GRUCell", "tensorflow.reshape", "tensorflow.variable_scope", "range", "tensorflow.reshape", "tensorflow.concat", "tensorflow.nn.dynamic_rnn", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.expand_dims", "tensorflow.reshape", "tensorflow.expand_dims", "tensorflow.reshape", "tensorflow.expand_dims", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul"], "methods", ["None"], ["", "", "", "def", "ggnn", "(", "self", ",", "items", ",", "user", ",", "adj_in", ",", "adj_out", ",", "is_training", "=", "True", ")", ":", "\n", "        ", "fin_state", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "embedding", ",", "items", ")", "\n", "u_state", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "user_embedding", ",", "user", ")", "\n", "cell", "=", "tf", ".", "nn", ".", "rnn_cell", ".", "GRUCell", "(", "self", ".", "hidden_size", ")", "\n", "with", "tf", ".", "variable_scope", "(", "'GGNN'", ")", ":", "\n", "            ", "for", "i", "in", "range", "(", "self", ".", "step", ")", ":", "\n", "                ", "fin_state", "=", "tf", ".", "reshape", "(", "fin_state", ",", "[", "-", "1", ",", "self", ".", "hidden_size", "]", ")", "\n", "if", "self", ".", "user_", ":", "\n", "                    ", "fin_state_in", "=", "tf", ".", "reshape", "(", "tf", ".", "matmul", "(", "fin_state", ",", "self", ".", "W_in", ")", "+", "self", ".", "b_in", ",", "\n", "[", "self", ".", "batch_size", ",", "-", "1", ",", "self", ".", "hidden_size", "]", ")", "+", "tf", ".", "expand_dims", "(", "tf", ".", "matmul", "(", "u_state", ",", "self", ".", "u_in", ")", ",", "1", ")", "\n", "fin_state_out", "=", "tf", ".", "reshape", "(", "tf", ".", "matmul", "(", "fin_state", ",", "self", ".", "W_out", ")", "+", "self", ".", "b_out", ",", "\n", "[", "self", ".", "batch_size", ",", "-", "1", ",", "self", ".", "hidden_size", "]", ")", "+", "tf", ".", "expand_dims", "(", "tf", ".", "matmul", "(", "u_state", ",", "self", ".", "u_out", ")", ",", "1", ")", "\n", "", "else", ":", "\n", "                    ", "fin_state_in", "=", "tf", ".", "reshape", "(", "tf", ".", "matmul", "(", "fin_state", ",", "self", ".", "W_in", ")", "+", "self", ".", "b_in", ",", "\n", "[", "self", ".", "batch_size", ",", "-", "1", ",", "self", ".", "hidden_size", "]", ")", "\n", "fin_state_out", "=", "tf", ".", "reshape", "(", "tf", ".", "matmul", "(", "fin_state", ",", "self", ".", "W_out", ")", "+", "self", ".", "b_out", ",", "\n", "[", "self", ".", "batch_size", ",", "-", "1", ",", "self", ".", "hidden_size", "]", ")", "\n", "\n", "", "av", "=", "tf", ".", "concat", "(", "[", "tf", ".", "matmul", "(", "adj_in", ",", "fin_state_in", ")", ",", "\n", "tf", ".", "matmul", "(", "adj_out", ",", "fin_state_out", ")", "]", ",", "axis", "=", "-", "1", ")", "\n", "\n", "state_output", ",", "fin_state", "=", "tf", ".", "nn", ".", "dynamic_rnn", "(", "cell", ",", "tf", ".", "expand_dims", "(", "tf", ".", "reshape", "(", "av", ",", "[", "-", "1", ",", "2", "*", "self", ".", "hidden_size", "]", ")", ",", "axis", "=", "1", ")", ",", "\n", "initial_state", "=", "tf", ".", "reshape", "(", "fin_state", ",", "[", "-", "1", ",", "self", ".", "hidden_size", "]", ")", ")", "\n", "#fin_state = tf.layers.dropout(fin_state, rate= self.ggnn_drop, training=tf.convert_to_tensor(is_training))", "\n", "", "", "return", "tf", ".", "reshape", "(", "fin_state", ",", "[", "self", ".", "batch_size", ",", "-", "1", ",", "self", ".", "hidden_size", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CRIPAC-DIG_A-PGNN.None.model_last.Graph.no_graph": [[243, 246], ["tensorflow.nn.embedding_lookup"], "methods", ["None"], ["", "def", "no_graph", "(", "self", ",", "items", ")", ":", "\n", "        ", "fin_state", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "embedding", ",", "items", ")", "\n", "return", "fin_state", "\n", "\n"]], "home.repos.pwc.inspect_result.CRIPAC-DIG_A-PGNN.None.model_last.variable_summaries": [[248, 254], ["tensorflow.summary.histogram", "tensorflow.reduce_mean", "tensorflow.summary.scalar", "tensorflow.sqrt", "tensorflow.summary.scalar", "tensorflow.reduce_mean", "tensorflow.square"], "function", ["None"], ["", "", "def", "variable_summaries", "(", "var", ",", "name", ")", ":", "\n", "    ", "tf", ".", "summary", ".", "histogram", "(", "name", ",", "var", ")", "\n", "mean", "=", "tf", ".", "reduce_mean", "(", "var", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "'mean/'", "+", "name", ",", "mean", ")", "\n", "stddev", "=", "tf", ".", "sqrt", "(", "tf", ".", "reduce_mean", "(", "tf", ".", "square", "(", "var", "-", "mean", ")", ")", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "'stddev/'", "+", "name", ",", "stddev", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CRIPAC-DIG_A-PGNN.None.model_last.stamp_attention": [[256, 269], ["tensorflow.matmul", "tensorflow.matmul", "tensorflow.nn.sigmoid", "tensorflow.concat", "tensorflow.reshape", "tensorflow.matmul", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reduce_sum", "tensorflow.reshape", "tensorflow.expand_dims", "tensorflow.reshape", "tensorflow.reshape"], "function", ["None"], ["", "def", "stamp_attention", "(", "seq", ",", "last", ",", "seq_mask", ",", "w1", ",", "w2", ",", "b", ",", "v", ",", "dim", ",", "batchsize", ")", ":", "\n", "    ", "\"\"\"\n    :param seq: N*T*D\n    :param last:  N*D\n    :param seq_mask: N*T\n    :return: 2*D\n    \"\"\"", "\n", "last", "=", "tf", ".", "matmul", "(", "last", ",", "w1", ")", "\n", "seq_h", "=", "tf", ".", "matmul", "(", "tf", ".", "reshape", "(", "seq", ",", "[", "-", "1", ",", "dim", "]", ")", ",", "w2", ")", "\n", "m", "=", "tf", ".", "nn", ".", "sigmoid", "(", "tf", ".", "expand_dims", "(", "last", ",", "1", ")", "+", "tf", ".", "reshape", "(", "seq_h", ",", "[", "batchsize", ",", "-", "1", ",", "dim", "]", ")", "+", "b", ")", "\n", "coef", "=", "tf", ".", "matmul", "(", "tf", ".", "reshape", "(", "m", ",", "[", "-", "1", ",", "dim", "]", ")", ",", "v", ",", "transpose_b", "=", "True", ")", "*", "tf", ".", "reshape", "(", "seq_mask", ",", "[", "-", "1", ",", "1", "]", ")", "\n", "ma", "=", "tf", ".", "concat", "(", "[", "tf", ".", "reduce_sum", "(", "tf", ".", "reshape", "(", "coef", ",", "[", "batchsize", ",", "-", "1", ",", "1", "]", ")", "*", "seq", ",", "1", ")", ",", "tf", ".", "reshape", "(", "last", ",", "[", "-", "1", ",", "dim", "]", ")", "]", ",", "-", "1", ")", "\n", "return", "ma", "\n", "\n"]], "home.repos.pwc.inspect_result.CRIPAC-DIG_A-PGNN.None.model_last.user_attention": [[271, 289], ["tensorflow.reshape", "tensorflow.where", "tensorflow.nn.softmax", "tensorflow.squeeze", "tensorflow.matmul", "tensorflow.squeeze", "tensorflow.ones_like", "tensorflow.equal", "tensorflow.reduce_sum", "tensorflow.reshape", "tensorflow.matmul", "tensorflow.expand_dims", "tensorflow.expand_dims"], "function", ["None"], ["", "def", "user_attention", "(", "seq", ",", "user", ",", "seq_mask", ",", "w", ",", "b", ",", "dim", ",", "batchsize", ")", ":", "\n", "    ", "\"\"\"\n    :param seq:   N*T*D\n    :param user:  N*D\n    :param seq_mask: N*T\n    :param w: D*D\n    :param b: D\n    :param dim: D\n    :param batchsize: N\n    :return: N*D\n    \"\"\"", "\n", "seq_", "=", "tf", ".", "reshape", "(", "tf", ".", "matmul", "(", "tf", ".", "reshape", "(", "seq", ",", "[", "-", "1", ",", "dim", "]", ")", ",", "w", ")", ",", "[", "batchsize", ",", "-", "1", ",", "dim", "]", ")", "\n", "coef", "=", "tf", ".", "squeeze", "(", "tf", ".", "matmul", "(", "seq_", ",", "tf", ".", "expand_dims", "(", "user", ",", "2", ")", ")", ")", "*", "seq_mask", "\n", "padding", "=", "tf", ".", "ones_like", "(", "seq_mask", ")", "*", "(", "-", "2", "**", "32", "+", "1", ")", "\n", "coef", "=", "tf", ".", "where", "(", "tf", ".", "equal", "(", "coef", ",", "0", ")", ",", "padding", ",", "coef", ")", "\n", "coef", "=", "tf", ".", "nn", ".", "softmax", "(", "coef", ")", "\n", "out", "=", "tf", ".", "squeeze", "(", "tf", ".", "reduce_sum", "(", "seq", "*", "tf", ".", "expand_dims", "(", "coef", ",", "2", ")", ",", "1", ")", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.CRIPAC-DIG_A-PGNN.None.model_last.trans_attention": [[292, 307], ["tensorflow.layers.dense", "tensorflow.layers.dense", "tensorflow.squeeze", "tensorflow.tile", "tensorflow.where", "tensorflow.nn.softmax", "tensorflow.tile", "tensorflow.layers.dense", "transformer.normalize", "tensorflow.layers.dense", "tensorflow.expand_dims", "tensorflow.ones_like", "tensorflow.equal", "tensorflow.expand_dims", "tensorflow.concat", "tensorflow.nn.tanh", "tensorflow.shape", "tensorflow.shape", "tensorflow.matmul", "tensorflow.expand_dims", "tensorflow.expand_dims"], "function", ["home.repos.pwc.inspect_result.CRIPAC-DIG_A-PGNN.None.transformer.normalize"], ["", "def", "trans_attention", "(", "sess", ",", "seq", ",", "session_mask", ",", "seq_mask", ",", "dim", ")", ":", "\n", "    ", "sess_", "=", "tf", ".", "layers", ".", "dense", "(", "sess", ",", "dim", ",", "activation", "=", "None", ",", "use_bias", "=", "False", ",", "name", "=", "'sess_'", ")", "\n", "seq_", "=", "tf", ".", "layers", ".", "dense", "(", "seq", ",", "dim", ",", "activation", "=", "None", ",", "use_bias", "=", "False", ",", "name", "=", "'seq_'", ")", "\n", "#coef = tf.squeeze(tf.layers.dense((tf.expand_dims(seq_, 2) + tf.expand_dims(sess_, 1)), 1, activation=tf.nn.tanh, use_bias=False, name='coef'))", "\n", "coef", "=", "tf", ".", "squeeze", "(", "\n", "tf", ".", "layers", ".", "dense", "(", "tf", ".", "nn", ".", "tanh", "(", "tf", ".", "expand_dims", "(", "seq_", ",", "2", ")", "+", "tf", ".", "expand_dims", "(", "sess_", ",", "1", ")", ")", ",", "1", ",", "activation", "=", "None", ",", "use_bias", "=", "False", ",", "\n", "name", "=", "'coef'", ")", ")", "\n", "sess_masks", "=", "tf", ".", "tile", "(", "tf", ".", "expand_dims", "(", "session_mask", ",", "1", ")", ",", "[", "1", ",", "tf", ".", "shape", "(", "seq", ")", "[", "1", "]", ",", "1", "]", ")", "\n", "paddings", "=", "tf", ".", "ones_like", "(", "coef", ")", "*", "(", "-", "2", "**", "32", "+", "1", ")", "\n", "outputs", "=", "tf", ".", "where", "(", "tf", ".", "equal", "(", "sess_masks", ",", "0", ")", ",", "paddings", ",", "coef", ")", "\n", "outputs", "=", "tf", ".", "nn", ".", "softmax", "(", "outputs", ")", "\n", "seq_masks", "=", "tf", ".", "tile", "(", "tf", ".", "expand_dims", "(", "seq_mask", ",", "-", "1", ")", ",", "[", "1", ",", "1", ",", "tf", ".", "shape", "(", "sess", ")", "[", "1", "]", "]", ")", "\n", "outputs", "=", "tf", ".", "layers", ".", "dense", "(", "tf", ".", "concat", "(", "[", "tf", ".", "matmul", "(", "outputs", "*", "seq_masks", ",", "sess", ")", ",", "seq", "]", ",", "axis", "=", "-", "1", ")", ",", "dim", ",", "activation", "=", "None", ",", "use_bias", "=", "False", ",", "name", "=", "'concat'", ")", "\n", "outputs", "=", "normalize", "(", "outputs", ")", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.CRIPAC-DIG_A-PGNN.None.model_last.mul_attention": [[309, 330], ["tensorflow.variable_scope", "tensorflow.layers.dense", "tensorflow.layers.dense", "tensorflow.layers.dense", "tensorflow.matmul", "tensorflow.tile", "tensorflow.where", "tensorflow.nn.softmax", "tensorflow.tile", "tensorflow.transpose", "tensorflow.expand_dims", "tensorflow.ones_like", "tensorflow.equal", "tensorflow.expand_dims", "tensorflow.matmul", "transformer.normalize", "tf.layers.dense.get_shape().as_list", "tensorflow.shape", "tensorflow.shape", "tf.layers.dense.get_shape"], "function", ["home.repos.pwc.inspect_result.CRIPAC-DIG_A-PGNN.None.transformer.normalize"], ["", "def", "mul_attention", "(", "queries", ",", "query_masks", ",", "keys", ",", "key_masks", ",", "dim", ",", "data", "=", "'xing'", ")", ":", "\n", "    ", "with", "tf", ".", "variable_scope", "(", "'multihead_attention'", ")", ":", "\n", "        ", "Q", "=", "tf", ".", "layers", ".", "dense", "(", "queries", ",", "dim", ",", "activation", "=", "tf", ".", "nn", ".", "relu", ",", "use_bias", "=", "False", ",", "name", "=", "'q'", ")", "# (N, T_q, C)", "\n", "K", "=", "tf", ".", "layers", ".", "dense", "(", "keys", ",", "dim", ",", "activation", "=", "tf", ".", "nn", ".", "relu", ",", "use_bias", "=", "False", ",", "name", "=", "'k'", ")", "# (N, T_k, C)", "\n", "V", "=", "tf", ".", "layers", ".", "dense", "(", "keys", ",", "dim", ",", "activation", "=", "tf", ".", "nn", ".", "relu", ",", "use_bias", "=", "False", ",", "name", "=", "'v'", ")", "# (N, T_k, C)", "\n", "\n", "outputs", "=", "tf", ".", "matmul", "(", "Q", ",", "tf", ".", "transpose", "(", "K", ",", "[", "0", ",", "2", ",", "1", "]", ")", ")", "\n", "outputs", "=", "outputs", "/", "(", "K", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "-", "1", "]", "**", "0.5", ")", "\n", "key_masks", "=", "tf", ".", "tile", "(", "tf", ".", "expand_dims", "(", "key_masks", ",", "1", ")", ",", "[", "1", ",", "tf", ".", "shape", "(", "queries", ")", "[", "1", "]", ",", "1", "]", ")", "\n", "paddings", "=", "tf", ".", "ones_like", "(", "outputs", ")", "*", "(", "-", "2", "**", "32", "+", "1", ")", "\n", "outputs", "=", "tf", ".", "where", "(", "tf", ".", "equal", "(", "key_masks", ",", "0", ")", ",", "paddings", ",", "outputs", ")", "\n", "outputs", "=", "tf", ".", "nn", ".", "softmax", "(", "outputs", ")", "\n", "query_masks", "=", "tf", ".", "tile", "(", "tf", ".", "expand_dims", "(", "query_masks", ",", "-", "1", ")", ",", "[", "1", ",", "1", ",", "tf", ".", "shape", "(", "keys", ")", "[", "1", "]", "]", ")", "# (h*N, T_q, T_k)", "\n", "outputs", "*=", "query_masks", "\n", "#outputs = tf.layers.dense(tf.concat([tf.matmul(outputs, V), queries],axis=-1), dim, activation=None, use_bias=False, name='concat')", "\n", "outputs", "=", "tf", ".", "matmul", "(", "outputs", ",", "V", ")", "+", "queries", "\n", "if", "data", "==", "'xing'", ":", "\n", "            ", "outputs", "=", "normalize", "(", "outputs", ")", "\n", "return", "outputs", "\n", "", "else", ":", "\n", "            ", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.CRIPAC-DIG_A-PGNN.None.model_last.parse_function_": [[332, 395], ["tensorflow.parse_single_example", "tensorflow.sparse_tensor_to_dense", "tensorflow.reshape", "tensorflow.sparse_tensor_to_dense", "tensorflow.sparse_tensor_to_dense", "tensorflow.sparse_tensor_to_dense", "tensorflow.sparse_tensor_to_dense", "tensorflow.sparse_tensor_to_dense", "tensorflow.sparse_tensor_to_dense", "tensorflow.sparse_tensor_to_dense", "tensorflow.sparse_tensor_to_dense", "tensorflow.SparseTensor", "tensorflow.SparseTensor", "tensorflow.sparse_tensor_to_dense", "tensorflow.sparse_tensor_to_dense", "tensorflow.FixedLenFeature", "tensorflow.FixedLenFeature", "tensorflow.VarLenFeature", "tensorflow.FixedLenFeature", "tensorflow.FixedLenFeature", "tensorflow.FixedLenFeature", "tensorflow.VarLenFeature", "tensorflow.FixedLenFeature", "tensorflow.FixedLenFeature", "tensorflow.VarLenFeature", "tensorflow.VarLenFeature", "tensorflow.VarLenFeature", "tensorflow.VarLenFeature", "tensorflow.VarLenFeature", "tensorflow.VarLenFeature", "tensorflow.VarLenFeature", "tensorflow.FixedLenFeature", "tensorflow.FixedLenFeature", "tensorflow.transpose", "tensorflow.transpose", "tensorflow.stack", "tensorflow.stack"], "function", ["None"], ["", "", "", "def", "parse_function_", "(", "max_session", ")", ":", "\n", "    ", "def", "parse_function", "(", "example_proto", ")", ":", "\n", "        ", "dics", "=", "{", "'tar'", ":", "tf", ".", "FixedLenFeature", "(", "shape", "=", "(", ")", ",", "dtype", "=", "tf", ".", "int64", ")", ",", "\n", "# when parse the example, shape below can be used as reshape, for example reshape (3,) to (1,3)", "\n", "'user'", ":", "tf", ".", "FixedLenFeature", "(", "shape", "=", "(", ")", ",", "dtype", "=", "tf", ".", "int64", ")", ",", "\n", "'session_alias'", ":", "tf", ".", "VarLenFeature", "(", "dtype", "=", "tf", ".", "int64", ")", ",", "\n", "'session_alias_shape'", ":", "tf", ".", "FixedLenFeature", "(", "shape", "=", "(", "2", ",", ")", ",", "dtype", "=", "tf", ".", "int64", ")", ",", "\n", "'session_mask'", ":", "tf", ".", "FixedLenFeature", "(", "shape", "=", "(", "max_session", ",", ")", ",", "dtype", "=", "tf", ".", "int64", ")", ",", "\n", "'session_len'", ":", "tf", ".", "FixedLenFeature", "(", "shape", "=", "(", ")", ",", "dtype", "=", "tf", ".", "int64", ")", ",", "\n", "'seq_alias'", ":", "tf", ".", "VarLenFeature", "(", "dtype", "=", "tf", ".", "int64", ")", ",", "\n", "'seq_mask'", ":", "tf", ".", "FixedLenFeature", "(", "shape", "=", "(", ")", ",", "dtype", "=", "tf", ".", "int64", ")", ",", "\n", "'num_node'", ":", "tf", ".", "FixedLenFeature", "(", "shape", "=", "(", ")", ",", "dtype", "=", "tf", ".", "int64", ")", ",", "\n", "'all_node'", ":", "tf", ".", "VarLenFeature", "(", "dtype", "=", "tf", ".", "int64", ")", ",", "\n", "# we can use VarLenFeature, but it returns SparseTensor", "\n", "# 'A_in': tf.VarLenFeature(dtype=tf.float32),", "\n", "# 'A_in_shape': tf.FixedLenFeature(shape=(2,), dtype=tf.int64),", "\n", "# 'A_out': tf.VarLenFeature(dtype=tf.float32),", "\n", "# 'A_out_shape': tf.FixedLenFeature(shape=(2,), dtype=tf.int64),", "\n", "#------------\u7a00\u758f-------------------", "\n", "'A_in_row'", ":", "tf", ".", "VarLenFeature", "(", "dtype", "=", "tf", ".", "int64", ")", ",", "\n", "'A_in_col'", ":", "tf", ".", "VarLenFeature", "(", "dtype", "=", "tf", ".", "int64", ")", ",", "\n", "'A_in'", ":", "tf", ".", "VarLenFeature", "(", "dtype", "=", "tf", ".", "float32", ")", ",", "\n", "'A_out_row'", ":", "tf", ".", "VarLenFeature", "(", "dtype", "=", "tf", ".", "int64", ")", ",", "\n", "'A_out_col'", ":", "tf", ".", "VarLenFeature", "(", "dtype", "=", "tf", ".", "int64", ")", ",", "\n", "'A_out'", ":", "tf", ".", "VarLenFeature", "(", "dtype", "=", "tf", ".", "float32", ")", ",", "\n", "'A_in_shape'", ":", "tf", ".", "FixedLenFeature", "(", "shape", "=", "(", "2", ",", ")", ",", "dtype", "=", "tf", ".", "int64", ")", ",", "\n", "'A_out_shape'", ":", "tf", ".", "FixedLenFeature", "(", "shape", "=", "(", "2", ",", ")", ",", "dtype", "=", "tf", ".", "int64", ")", "\n", "#-----------\u4e8c\u8fdb\u5236\u4fdd\u5b58-------------------", "\n", "# 'A_in': tf.FixedLenFeature([], tf.string),", "\n", "# 'A_out': tf.FixedLenFeature([], tf.string)", "\n", "#-----------------------------", "\n", "}", "\n", "parsed_example", "=", "tf", ".", "parse_single_example", "(", "example_proto", ",", "dics", ")", "\n", "parsed_example", "[", "'session_alias'", "]", "=", "tf", ".", "sparse_tensor_to_dense", "(", "parsed_example", "[", "'session_alias'", "]", ")", "\n", "parsed_example", "[", "'session_alias'", "]", "=", "tf", ".", "reshape", "(", "parsed_example", "[", "'session_alias'", "]", ",", "parsed_example", "[", "'session_alias_shape'", "]", ")", "\n", "parsed_example", "[", "'all_node'", "]", "=", "tf", ".", "sparse_tensor_to_dense", "(", "parsed_example", "[", "'all_node'", "]", ")", "\n", "parsed_example", "[", "'seq_alias'", "]", "=", "tf", ".", "sparse_tensor_to_dense", "(", "parsed_example", "[", "'seq_alias'", "]", ")", "\n", "#-------------\u6b63\u5e38\u65b9\u5f0f----------------------", "\n", "# parsed_example['A_in'] = tf.sparse_tensor_to_dense(parsed_example['A_in'])", "\n", "# parsed_example['A_in'] = tf.reshape(parsed_example['A_in'], parsed_example['A_in_shape'])", "\n", "# parsed_example['A_out'] = tf.sparse_tensor_to_dense(parsed_example['A_out'])", "\n", "# parsed_example['A_out'] = tf.reshape(parsed_example['A_out'], parsed_example['A_out_shape'])", "\n", "#--------------\u7a00\u758f\u65b9\u5f0f----------", "\n", "parsed_example", "[", "'A_in_row'", "]", "=", "tf", ".", "sparse_tensor_to_dense", "(", "parsed_example", "[", "'A_in_row'", "]", ")", "\n", "parsed_example", "[", "'A_in_col'", "]", "=", "tf", ".", "sparse_tensor_to_dense", "(", "parsed_example", "[", "'A_in_col'", "]", ")", "\n", "parsed_example", "[", "'A_out_row'", "]", "=", "tf", ".", "sparse_tensor_to_dense", "(", "parsed_example", "[", "'A_out_row'", "]", ")", "\n", "parsed_example", "[", "'A_out_col'", "]", "=", "tf", ".", "sparse_tensor_to_dense", "(", "parsed_example", "[", "'A_out_col'", "]", ")", "\n", "parsed_example", "[", "'A_in'", "]", "=", "tf", ".", "sparse_tensor_to_dense", "(", "parsed_example", "[", "'A_in'", "]", ")", "\n", "parsed_example", "[", "'A_out'", "]", "=", "tf", ".", "sparse_tensor_to_dense", "(", "parsed_example", "[", "'A_out'", "]", ")", "\n", "parsed_example", "[", "'A_in'", "]", "=", "tf", ".", "SparseTensor", "(", "indices", "=", "tf", ".", "transpose", "(", "tf", ".", "stack", "(", "[", "parsed_example", "[", "'A_in_row'", "]", ",", "parsed_example", "[", "'A_in_col'", "]", "]", ")", ")", ",", "\n", "values", "=", "parsed_example", "[", "'A_in'", "]", ",", "dense_shape", "=", "parsed_example", "[", "'A_in_shape'", "]", ")", "\n", "parsed_example", "[", "'A_out'", "]", "=", "tf", ".", "SparseTensor", "(", "indices", "=", "tf", ".", "transpose", "(", "tf", ".", "stack", "(", "[", "parsed_example", "[", "'A_out_row'", "]", ",", "parsed_example", "[", "'A_out_col'", "]", "]", ")", ")", ",", "\n", "values", "=", "parsed_example", "[", "'A_out'", "]", ",", "dense_shape", "=", "parsed_example", "[", "'A_out_shape'", "]", ")", "\n", "parsed_example", "[", "'A_in'", "]", "=", "tf", ".", "sparse_tensor_to_dense", "(", "parsed_example", "[", "'A_in'", "]", ")", "\n", "parsed_example", "[", "'A_out'", "]", "=", "tf", ".", "sparse_tensor_to_dense", "(", "parsed_example", "[", "'A_out'", "]", ")", "\n", "#-------------\u4e8c\u8fdb\u5236\u8bfb\u53d6----------------", "\n", "# parsed_example['A_in'] = tf.decode_raw(parsed_example['A_in'], tf.float32)", "\n", "# parsed_example['A_out'] = tf.decode_raw(parsed_example['A_out'], tf.float32)", "\n", "#-----------------------------------------", "\n", "return", "parsed_example", "\n", "", "return", "parse_function", "\n", "\n"]], "home.repos.pwc.inspect_result.CRIPAC-DIG_A-PGNN.None.model_last.run_epoch": [[397, 413], ["numpy.mean", "session.run", "loss.append", "session.run", "model_last.eval_epoch", "print"], "function", ["home.repos.pwc.inspect_result.CRIPAC-DIG_A-PGNN.None.model_last.eval_epoch"], ["", "def", "run_epoch", "(", "session", ",", "train_loss", ",", "train_opt", ",", "valid_loss", ",", "valid_index", ",", "valid_iterator", ",", "valid_data", ",", "step", ",", "max_length", ",", "max_session", ")", ":", "\n", "    ", "loss", "=", "[", "]", "\n", "while", "True", ":", "\n", "        ", "try", ":", "\n", "            ", "loss_", ",", "_", "=", "session", ".", "run", "(", "[", "train_loss", ",", "train_opt", "]", ")", "\n", "loss", ".", "append", "(", "loss_", ")", "\n", "step", "+=", "1", "\n", "if", "step", "%", "5000", "==", "0", ":", "\n", "                ", "session", ".", "run", "(", "valid_iterator", ".", "initializer", ")", "\n", "val_loss", ",", "hit5", ",", "hit10", ",", "hit20", ",", "mrr5", ",", "mrr10", ",", "mrr20", ",", "_", ",", "_", "=", "eval_epoch", "(", "session", ",", "valid_index", ",", "valid_loss", ",", "valid_data", ",", "max_length", "=", "max_length", ",", "max_session", "=", "max_session", ")", "\n", "print", "(", "'---After %d steps'", "%", "(", "step", ")", ",", "\n", "'train_loss:%.4f\\tvalid_loss:%.4f\\tRecall@5:%.4f\\tRecall@10:%.4f\\tRecall@20:%.4f\\tMMR@5:%.4f'", "\n", "'\\tMrr@10:%.4f\\tMMR@20:%.4f'", "%", "(", "loss_", ",", "val_loss", ",", "hit5", ",", "hit10", ",", "hit20", ",", "mrr5", ",", "mrr10", ",", "mrr20", ")", ")", "\n", "", "", "except", "tf", ".", "errors", ".", "OutOfRangeError", ":", "\n", "            ", "break", "\n", "", "", "return", "step", ",", "np", ".", "mean", "(", "loss", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CRIPAC-DIG_A-PGNN.None.model_last.eval_epoch": [[415, 469], ["numpy.zeros", "numpy.zeros", "range", "numpy.arange", "numpy.arange", "numpy.mean", "session.run", "all_loss.append", "zip", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "hit20.append", "numpy.isin", "numpy.isin", "hit10.append", "numpy.isin", "numpy.isin", "hit5.append", "numpy.isin", "numpy.isin", "numpy.isin", "numpy.isin", "numpy.isin", "len", "mrr20.append", "mrr20.append", "len", "mrr10.append", "mrr10.append", "len", "mrr5.append", "mrr5.append", "numpy.where", "numpy.where", "numpy.where", "numpy.where", "numpy.where", "numpy.where", "numpy.where", "numpy.where", "numpy.where", "numpy.where", "numpy.where", "numpy.where"], "function", ["None"], ["", "def", "eval_epoch", "(", "session", ",", "test_index", ",", "test_loss", ",", "test_data", ",", "max_length", "=", "20", ",", "max_session", "=", "150", ")", ":", "\n", "    ", "all_loss", ",", "hit5", ",", "mrr5", ",", "hit10", ",", "mrr10", ",", "hit20", ",", "mrr20", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "length_index", "=", "np", ".", "zeros", "(", "(", "max_length", "-", "1", ",", "8", ")", ")", "\n", "history_index", "=", "np", ".", "zeros", "(", "(", "max_session", ",", "8", ")", ")", "\n", "length_index", "[", ":", ",", "6", "]", "=", "length_index", "[", ":", ",", "6", "]", "+", "1", "\n", "history_index", "[", ":", ",", "6", "]", "=", "history_index", "[", ":", ",", "6", "]", "+", "1", "\n", "while", "True", ":", "\n", "        ", "try", ":", "\n", "            ", "index", ",", "test_loss_", ",", "tar", ",", "seq_length", ",", "sess_length", "=", "session", ".", "run", "(", "[", "test_index", ",", "test_loss", ",", "test_data", "[", "'tar'", "]", ",", "test_data", "[", "'seq_mask'", "]", ",", "test_data", "[", "'session_len'", "]", "]", ")", "\n", "all_loss", ".", "append", "(", "test_loss_", ")", "\n", "for", "score", ",", "target", ",", "length", ",", "length_", "in", "zip", "(", "index", "[", "1", "]", ",", "tar", ",", "seq_length", ",", "sess_length", ")", ":", "\n", "                ", "hit20", ".", "append", "(", "np", ".", "isin", "(", "target", "-", "1", ",", "score", ")", ")", "\n", "length_index", "[", "length", "-", "1", ",", "2", "]", "+=", "np", ".", "isin", "(", "target", "-", "1", ",", "score", ")", "\n", "history_index", "[", "length_", "-", "1", ",", "2", "]", "+=", "np", ".", "isin", "(", "target", "-", "1", ",", "score", ")", "\n", "hit10", ".", "append", "(", "np", ".", "isin", "(", "target", "-", "1", ",", "score", "[", "0", ":", "10", "]", ")", ")", "\n", "length_index", "[", "length", "-", "1", ",", "1", "]", "+=", "np", ".", "isin", "(", "target", "-", "1", ",", "score", "[", "0", ":", "10", "]", ")", "\n", "history_index", "[", "length_", "-", "1", ",", "1", "]", "+=", "np", ".", "isin", "(", "target", "-", "1", ",", "score", "[", "0", ":", "10", "]", ")", "\n", "hit5", ".", "append", "(", "np", ".", "isin", "(", "target", "-", "1", ",", "score", "[", "0", ":", "5", "]", ")", ")", "\n", "length_index", "[", "length", "-", "1", ",", "0", "]", "+=", "np", ".", "isin", "(", "target", "-", "1", ",", "score", "[", "0", ":", "5", "]", ")", "\n", "history_index", "[", "length_", "-", "1", ",", "0", "]", "+=", "np", ".", "isin", "(", "target", "-", "1", ",", "score", "[", "0", ":", "5", "]", ")", "\n", "length_index", "[", "length", "-", "1", ",", "6", "]", "+=", "1", "\n", "history_index", "[", "length_", "-", "1", ",", "6", "]", "+=", "1", "\n", "if", "len", "(", "np", ".", "where", "(", "score", "==", "target", "-", "1", ")", "[", "0", "]", ")", "==", "0", ":", "\n", "                    ", "mrr20", ".", "append", "(", "0", ")", "\n", "", "else", ":", "\n", "                    ", "mrr20", ".", "append", "(", "1", "/", "(", "np", ".", "where", "(", "score", "==", "target", "-", "1", ")", "[", "0", "]", "[", "0", "]", "+", "1", ")", ")", "\n", "length_index", "[", "length", "-", "1", ",", "5", "]", "+=", "1", "/", "(", "np", ".", "where", "(", "score", "==", "target", "-", "1", ")", "[", "0", "]", "[", "0", "]", "+", "1", ")", "\n", "history_index", "[", "length_", "-", "1", ",", "5", "]", "+=", "1", "/", "(", "np", ".", "where", "(", "score", "==", "target", "-", "1", ")", "[", "0", "]", "[", "0", "]", "+", "1", ")", "\n", "", "if", "len", "(", "np", ".", "where", "(", "score", "[", "0", ":", "10", "]", "==", "target", "-", "1", ")", "[", "0", "]", ")", "==", "0", ":", "\n", "                    ", "mrr10", ".", "append", "(", "0", ")", "\n", "", "else", ":", "\n", "                    ", "mrr10", ".", "append", "(", "1", "/", "(", "np", ".", "where", "(", "score", "[", "0", ":", "10", "]", "==", "target", "-", "1", ")", "[", "0", "]", "[", "0", "]", "+", "1", ")", ")", "\n", "length_index", "[", "length", "-", "1", ",", "4", "]", "+=", "1", "/", "(", "np", ".", "where", "(", "score", "==", "target", "-", "1", ")", "[", "0", "]", "[", "0", "]", "+", "1", ")", "\n", "history_index", "[", "length_", "-", "1", ",", "4", "]", "+=", "1", "/", "(", "np", ".", "where", "(", "score", "==", "target", "-", "1", ")", "[", "0", "]", "[", "0", "]", "+", "1", ")", "\n", "", "if", "len", "(", "np", ".", "where", "(", "score", "[", "0", ":", "5", "]", "==", "target", "-", "1", ")", "[", "0", "]", ")", "==", "0", ":", "\n", "                    ", "mrr5", ".", "append", "(", "0", ")", "\n", "", "else", ":", "\n", "                    ", "mrr5", ".", "append", "(", "1", "/", "(", "np", ".", "where", "(", "score", "[", "0", ":", "5", "]", "==", "target", "-", "1", ")", "[", "0", "]", "[", "0", "]", "+", "1", ")", ")", "\n", "length_index", "[", "length", "-", "1", ",", "3", "]", "+=", "1", "/", "(", "np", ".", "where", "(", "score", "==", "target", "-", "1", ")", "[", "0", "]", "[", "0", "]", "+", "1", ")", "\n", "history_index", "[", "length_", "-", "1", ",", "3", "]", "+=", "1", "/", "(", "np", ".", "where", "(", "score", "==", "target", "-", "1", ")", "[", "0", "]", "[", "0", "]", "+", "1", ")", "\n", "", "", "", "except", "tf", ".", "errors", ".", "OutOfRangeError", ":", "\n", "            ", "break", "\n", "#length_index = length_index.cumsum(0)", "\n", "#history_index = history_index.cumsum(0)", "\n", "", "", "for", "i", "in", "range", "(", "6", ")", ":", "\n", "        ", "length_index", "[", ":", ",", "i", "]", "=", "length_index", "[", ":", ",", "i", "]", "/", "length_index", "[", ":", ",", "6", "]", "\n", "history_index", "[", ":", ",", "i", "]", "=", "history_index", "[", ":", ",", "i", "]", "/", "history_index", "[", ":", ",", "6", "]", "\n", "", "length_index", "[", ":", ",", "-", "1", "]", "=", "np", ".", "arange", "(", "1", ",", "max_length", ")", "\n", "history_index", "[", ":", ",", "-", "1", "]", "=", "np", ".", "arange", "(", "1", ",", "max_session", "+", "1", ")", "\n", "# len_index = pd.DataFrame(length_index,", "\n", "#                          columns = ['RecaLL5', 'RecaLL10', 'RecaLL20', 'Mrr5', 'Mrr10', 'Mrr20', 'number'],", "\n", "#                          index=range(1, max_length))", "\n", "return", "np", ".", "mean", "(", "all_loss", ")", ",", "np", ".", "mean", "(", "hit5", ")", "*", "100", ",", "np", ".", "mean", "(", "hit10", ")", "*", "100", ",", "np", ".", "mean", "(", "hit20", ")", "*", "100", ",", "np", ".", "mean", "(", "mrr5", ")", "*", "100", ",", "np", ".", "mean", "(", "mrr10", ")", "*", "100", ",", "np", ".", "mean", "(", "mrr20", ")", "*", "100", ",", "length_index", ",", "history_index", "\n", "\n"]], "home.repos.pwc.inspect_result.CRIPAC-DIG_A-PGNN.None.model_last.random_name": [[471, 479], ["tensorflow.train.match_filenames_once", "tensorflow.Session", "tensorflow.local_variables_initializer().run", "sess.run", "range", "random.shuffle", "tensorflow.local_variables_initializer"], "function", ["None"], ["", "def", "random_name", "(", "path", ")", ":", "\n", "    ", "train_filenames", "=", "tf", ".", "train", ".", "match_filenames_once", "(", "path", ")", "\n", "with", "tf", ".", "Session", "(", ")", "as", "sess", ":", "\n", "        ", "tf", ".", "local_variables_initializer", "(", ")", ".", "run", "(", ")", "\n", "filename", "=", "sess", ".", "run", "(", "train_filenames", ")", "\n", "for", "i", "in", "range", "(", "5", ")", ":", "\n", "            ", "random", ".", "shuffle", "(", "filename", ")", "\n", "", "", "return", "filename", "\n", "\n"]], "home.repos.pwc.inspect_result.CRIPAC-DIG_A-PGNN.None.model_last.random_validation": [[481, 489], ["tensorflow.train.match_filenames_once", "tensorflow.Session", "tensorflow.local_variables_initializer().run", "sess.run", "len", "numpy.random.choice", "int", "tensorflow.local_variables_initializer"], "function", ["None"], ["", "def", "random_validation", "(", "test_path", ")", ":", "\n", "    ", "train_filenames", "=", "tf", ".", "train", ".", "match_filenames_once", "(", "test_path", ")", "\n", "with", "tf", ".", "Session", "(", ")", "as", "sess", ":", "\n", "        ", "tf", ".", "local_variables_initializer", "(", ")", ".", "run", "(", ")", "\n", "filename", "=", "sess", ".", "run", "(", "train_filenames", ")", "\n", "length", "=", "len", "(", "filename", ")", "\n", "vali_file", "=", "np", ".", "random", ".", "choice", "(", "filename", ",", "int", "(", "0.1", "*", "length", ")", ")", "\n", "", "return", "vali_file", "\n", "\n"]], "home.repos.pwc.inspect_result.CRIPAC-DIG_A-PGNN.None.model_last.shulle_train": [[491, 506], ["tensorflow.train.match_filenames_once", "tensorflow.data.TFRecordDataset", "train_dataset.map().shuffle.map().shuffle", "train_dataset.map().shuffle.padded_batch", "train_dataset.padded_batch.make_initializable_iterator", "train_batch_padding_dataset.make_initializable_iterator.get_next", "tensorflow.Session", "tensorflow.local_variables_initializer().run", "sess.run", "range", "random.shuffle", "train_dataset.map().shuffle.map", "tensorflow.local_variables_initializer", "model_last.parse_function_"], "function", ["home.repos.pwc.inspect_result.CRIPAC-DIG_A-PGNN.None.model_last.parse_function_"], ["", "def", "shulle_train", "(", "path", ",", "max_session", ",", "buffer_size", ",", "padded_shape", ",", "batchSize", ")", ":", "\n", "    ", "train_filenames", "=", "tf", ".", "train", ".", "match_filenames_once", "(", "path", ")", "\n", "with", "tf", ".", "Session", "(", ")", "as", "sess", ":", "\n", "        ", "tf", ".", "local_variables_initializer", "(", ")", ".", "run", "(", ")", "\n", "filename", "=", "sess", ".", "run", "(", "train_filenames", ")", "\n", "for", "i", "in", "range", "(", "3", ")", ":", "\n", "            ", "random", ".", "shuffle", "(", "filename", ")", "\n", "", "", "train_dataset", "=", "tf", ".", "data", ".", "TFRecordDataset", "(", "train_filenames", ")", "\n", "train_dataset", "=", "train_dataset", ".", "map", "(", "parse_function_", "(", "max_session", ")", ")", ".", "shuffle", "(", "buffer_size", "=", "buffer_size", ")", "\n", "train_batch_padding_dataset", "=", "train_dataset", ".", "padded_batch", "(", "batchSize", ",", "padded_shapes", "=", "padded_shape", ",", "\n", "drop_remainder", "=", "True", ")", "\n", "train_iterator", "=", "train_batch_padding_dataset", ".", "make_initializable_iterator", "(", ")", "\n", "train_data", "=", "train_iterator", ".", "get_next", "(", ")", "\n", "\n", "return", "train_iterator", ",", "train_data", "\n", "\n"]], "home.repos.pwc.inspect_result.CRIPAC-DIG_A-PGNN.None.record._int64_feature": [[48, 50], ["tensorflow.train.Feature", "tensorflow.train.Int64List"], "function", ["None"], ["", "def", "_int64_feature", "(", "value", ")", ":", "\n", "    ", "return", "tf", ".", "train", ".", "Feature", "(", "int64_list", "=", "tf", ".", "train", ".", "Int64List", "(", "value", "=", "value", ")", ")", "\n", "#\u5b9a\u4e49\u6d6e\u70b9\u5217\u8868\u578b\u7684\u5c5e\u6027", "\n"]], "home.repos.pwc.inspect_result.CRIPAC-DIG_A-PGNN.None.record._float_feature": [[51, 53], ["tensorflow.train.Feature", "tensorflow.train.FloatList"], "function", ["None"], ["", "def", "_float_feature", "(", "value", ")", ":", "\n", "    ", "return", "tf", ".", "train", ".", "Feature", "(", "float_list", "=", "tf", ".", "train", ".", "FloatList", "(", "value", "=", "value", ")", ")", "\n", "#\u5b9a\u4e49\u751f\u6210\u5b57\u7b26\u4e32\u578b\u7684\u5c5e\u6027", "\n"]], "home.repos.pwc.inspect_result.CRIPAC-DIG_A-PGNN.None.record._bytes_feature": [[54, 56], ["tensorflow.train.Feature", "tensorflow.train.BytesList"], "function", ["None"], ["", "def", "_bytes_feature", "(", "value", ")", ":", "\n", "    ", "return", "tf", ".", "train", ".", "Feature", "(", "bytes_list", "=", "tf", ".", "train", ".", "BytesList", "(", "value", "=", "value", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CRIPAC-DIG_A-PGNN.None.record.mkdir": [[57, 65], ["path.rstrip.rstrip", "os.path.exists", "os.makedirs"], "function", ["None"], ["", "def", "mkdir", "(", "path", ")", ":", "\n", "    ", "path", "=", "path", ".", "rstrip", "(", "'/'", ")", "\n", "isExists", "=", "os", ".", "path", ".", "exists", "(", "path", ")", "\n", "if", "not", "isExists", ":", "\n", "        ", "os", ".", "makedirs", "(", "path", ")", "\n", "return", "\n", "", "else", ":", "\n", "        ", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.CRIPAC-DIG_A-PGNN.None.record.apply_parallel": [[67, 69], ["joblib.Parallel", "joblib.delayed"], "function", ["None"], ["", "", "def", "apply_parallel", "(", "df_grouped", ",", "func", ")", ":", "\n", "    ", "Parallel", "(", "n_jobs", "=", "8", ")", "(", "delayed", "(", "func", ")", "(", "group", ")", "for", "name", ",", "group", "in", "df_grouped", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CRIPAC-DIG_A-PGNN.None.record.generate_tfrecord": [[71, 185], ["record.apply_parallel", "record.apply_parallel", "numpy.random.choice", "all_data.groupby", "record.generate_tfrecord.select_data"], "function", ["home.repos.pwc.inspect_result.CRIPAC-DIG_A-PGNN.None.record.apply_parallel", "home.repos.pwc.inspect_result.CRIPAC-DIG_A-PGNN.None.record.apply_parallel"], ["", "def", "generate_tfrecord", "(", "all_data", ",", "train_path", ",", "graph", "=", "'ggnn'", ",", "max_session", "=", "50", ",", "max_length", "=", "20", ",", "\n", "test_size", "=", "0.2", ",", "adj", "=", "'adj'", ",", "last", "=", "True", ",", "user_number", "=", "None", ")", ":", "\n", "    ", "if", "user_number", ":", "\n", "        ", "user_sample", "=", "np", ".", "random", ".", "choice", "(", "all_data", "[", "'user'", "]", ".", "unique", "(", ")", ",", "user_number", ")", "\n", "all_data", "=", "all_data", "[", "all_data", "[", "'user'", "]", ".", "isin", "(", "user_sample", ")", "]", "\n", "\n", "", "def", "select_data", "(", "train", "=", "True", ")", ":", "\n", "        ", "def", "select", "(", "data", ")", ":", "\n", "            ", "orgin_path", "=", "train_path", "+", "'/user_'", "+", "str", "(", "np", ".", "unique", "(", "data", "[", "'user'", "]", ")", "[", "0", "]", ")", "+", "'/'", "\n", "mkdir", "(", "orgin_path", ")", "\n", "all_sess", "=", "data", "[", "'session_id'", "]", ".", "unique", "(", ")", "\n", "if", "last", ":", "\n", "                ", "split_point", "=", "len", "(", "all_sess", ")", "-", "1", "\n", "", "else", ":", "\n", "                ", "split_point", "=", "int", "(", "len", "(", "all_sess", ")", "*", "(", "1", "-", "test_size", ")", ")", "\n", "", "user_id", "=", "data", "[", "'user'", "]", ".", "unique", "(", ")", "[", "0", "]", "\n", "count", "=", "1", "\n", "if", "len", "(", "all_sess", ")", "==", "1", ":", "\n", "                ", "return", "None", "\n", "", "if", "train", ":", "\n", "                ", "orgin_path", "=", "orgin_path", "+", "'train_'", "\n", "start", "=", "1", "\n", "end", "=", "split_point", "\n", "", "else", ":", "\n", "# writer = tf.python_io.TFRecordWriter(", "\n", "#     test_path + '/' + 'test_user_' + str(np.unique(data['user_id'])[0]) + '.tfrecord')", "\n", "                ", "orgin_path", "=", "orgin_path", "+", "'test_'", "\n", "start", "=", "split_point", "\n", "end", "=", "len", "(", "all_sess", ")", "\n", "", "writer", "=", "tf", ".", "python_io", ".", "TFRecordWriter", "(", "orgin_path", "+", "str", "(", "count", ")", "+", "'.tfrecord'", ")", "\n", "for", "i", "in", "range", "(", "start", ",", "end", ")", ":", "\n", "#\u751f\u6210session\u548cseq", "\n", "                ", "if", "i", "<", "max_session", "+", "1", ":", "\n", "                    ", "all_seq", "=", "data", "[", "data", "[", "'session_id'", "]", "==", "all_sess", "[", "i", "]", "]", "[", "'item'", "]", ".", "values", ".", "tolist", "(", ")", "\n", "sub_sess", "=", "[", "data", "[", "data", "[", "'session_id'", "]", "==", "sess", "]", "[", "'item'", "]", ".", "values", ".", "tolist", "(", ")", "for", "sess", "in", "all_sess", "[", "0", ":", "i", "]", "]", "\n", "", "else", ":", "\n", "                    ", "all_seq", "=", "data", "[", "data", "[", "'session_id'", "]", "==", "all_sess", "[", "i", "]", "]", "[", "'item'", "]", ".", "values", ".", "tolist", "(", ")", "\n", "sub_sess", "=", "[", "data", "[", "data", "[", "'session_id'", "]", "==", "sess", "]", "[", "'item'", "]", ".", "values", ".", "tolist", "(", ")", "for", "sess", "in", "all_sess", "[", "i", "-", "max_session", ":", "i", "]", "]", "\n", "", "sub_node", "=", "np", ".", "hstack", "(", "sub_sess", ")", "\n", "for", "j", "in", "range", "(", "len", "(", "all_seq", ")", "-", "1", ")", ":", "\n", "                    ", "features", "=", "{", "}", "\n", "sub_seq", "=", "all_seq", "[", "0", ":", "j", "+", "1", "]", "\n", "features", "[", "'tar'", "]", "=", "_int64_feature", "(", "[", "all_seq", "[", "j", "+", "1", "]", "]", ")", "\n", "features", "[", "'user'", "]", "=", "_int64_feature", "(", "[", "user_id", "]", ")", "\n", "node", "=", "np", ".", "unique", "(", "np", ".", "hstack", "(", "[", "sub_node", ",", "sub_seq", ",", "[", "0", "]", "]", ")", ")", "\n", "#\u751f\u6210\u6bcf\u4e2asession\u7684\u522b\u540d\u548cmask\u503c\uff0c\u5e76\u4e14padding", "\n", "sub_sess_pad", "=", "[", "sess", "+", "[", "0", "]", "*", "(", "max_length", "-", "len", "(", "sess", ")", ")", "for", "sess", "in", "sub_sess", "]", "+", "[", "[", "0", "]", "*", "max_length", "]", "*", "(", "max_session", "-", "len", "(", "sub_sess", ")", ")", "\n", "sub_sess_alias", "=", "np", ".", "array", "(", "[", "[", "np", ".", "where", "(", "node", "==", "s", ")", "[", "0", "]", "[", "0", "]", "for", "s", "in", "sess_pad", "]", "for", "sess_pad", "in", "sub_sess_pad", "]", ")", "\n", "features", "[", "'session_alias'", "]", "=", "_int64_feature", "(", "sub_sess_alias", ".", "reshape", "(", "-", "1", ")", ")", "\n", "features", "[", "'session_alias_shape'", "]", "=", "_int64_feature", "(", "sub_sess_alias", ".", "shape", ")", "\n", "#session mask\u503c", "\n", "features", "[", "'session_mask'", "]", "=", "_int64_feature", "(", "[", "len", "(", "sess", ")", "for", "sess", "in", "sub_sess", "]", "+", "[", "1", "]", "*", "(", "max_session", "-", "len", "(", "sub_sess", ")", ")", ")", "\n", "#session_len\u6bcf\u4e2asession\u5e8f\u5217\u4e2dsession\u7684\u6570\u91cf", "\n", "features", "[", "'session_len'", "]", "=", "_int64_feature", "(", "[", "len", "(", "sub_sess", ")", "]", ")", "\n", "#\u751f\u6210seq\u522b\u540d\u548cmask\u503c\u5e76\u4e14padding", "\n", "sub_seq_pad", "=", "sub_seq", "#+[0]*(max_length-len(sub_seq))", "\n", "sub_seq_alias", "=", "[", "np", ".", "where", "(", "node", "==", "s", ")", "[", "0", "]", "[", "0", "]", "for", "s", "in", "sub_seq_pad", "]", "\n", "features", "[", "'seq_alias'", "]", "=", "_int64_feature", "(", "sub_seq_alias", ")", "\n", "#seq_pad.append(sub_seq_pad)", "\n", "#seq mask\u503c", "\n", "features", "[", "'seq_mask'", "]", "=", "_int64_feature", "(", "[", "len", "(", "sub_seq", ")", "]", ")", "\n", "#\u8282\u70b9\u6570\u91cf", "\n", "features", "[", "'num_node'", "]", "=", "_int64_feature", "(", "[", "len", "(", "node", ")", "]", ")", "\n", "features", "[", "'all_node'", "]", "=", "_int64_feature", "(", "node", ")", "\n", "if", "graph", "==", "'ggnn'", ":", "\n", "                        ", "u_A", "=", "np", ".", "zeros", "(", "(", "len", "(", "node", ")", ",", "len", "(", "node", ")", ")", ")", "\n", "", "elif", "graph", "==", "'gcn'", ":", "\n", "                        ", "u_A", "=", "np", ".", "eye", "(", "len", "(", "node", ")", ")", "\n", "", "for", "u_input", "in", "sub_sess", ":", "\n", "                        ", "for", "k", "in", "np", ".", "arange", "(", "len", "(", "u_input", ")", "-", "1", ")", ":", "\n", "                            ", "u", "=", "np", ".", "where", "(", "node", "==", "u_input", "[", "k", "]", ")", "[", "0", "]", "[", "0", "]", "\n", "v", "=", "np", ".", "where", "(", "node", "==", "u_input", "[", "k", "+", "1", "]", ")", "[", "0", "]", "[", "0", "]", "\n", "if", "adj", "==", "'adj_all'", ":", "\n", "                                ", "u_A", "[", "u", "]", "[", "v", "]", "+=", "1", "\n", "", "else", ":", "\n", "                                ", "u_A", "[", "u", "]", "[", "v", "]", "=", "1", "\n", "", "", "", "for", "l", "in", "np", ".", "arange", "(", "len", "(", "sub_seq", ")", "-", "1", ")", ":", "\n", "                        ", "u", "=", "np", ".", "where", "(", "node", "==", "sub_seq", "[", "l", "]", ")", "[", "0", "]", "[", "0", "]", "\n", "v", "=", "np", ".", "where", "(", "node", "==", "sub_seq", "[", "l", "+", "1", "]", ")", "[", "0", "]", "[", "0", "]", "\n", "if", "adj", "==", "'adj_all'", ":", "\n", "                            ", "u_A", "[", "u", "]", "[", "v", "]", "+=", "1", "\n", "", "else", ":", "\n", "                            ", "u_A", "[", "u", "]", "[", "v", "]", "=", "1", "\n", "", "", "u_sum_in", "=", "np", ".", "sum", "(", "u_A", ",", "0", ")", "\n", "u_sum_in", "[", "np", ".", "where", "(", "u_sum_in", "==", "0", ")", "]", "=", "1", "\n", "u_A_in", "=", "np", ".", "divide", "(", "u_A", ",", "u_sum_in", ")", "\n", "u_sum_out", "=", "np", ".", "sum", "(", "u_A", ",", "1", ")", "\n", "u_sum_out", "[", "np", ".", "where", "(", "u_sum_out", "==", "0", ")", "]", "=", "1", "\n", "u_A_out", "=", "np", ".", "divide", "(", "u_A", ".", "transpose", "(", ")", ",", "u_sum_out", ")", "\n", "#------------\u7a00\u758f\u65b9\u5f0f------------", "\n", "u_A_in", "=", "sp", ".", "coo_matrix", "(", "u_A_in", ")", "\n", "u_A_out", "=", "sp", ".", "coo_matrix", "(", "u_A_out", ")", "\n", "features", "[", "'A_in_row'", "]", "=", "_int64_feature", "(", "u_A_in", ".", "row", ")", "\n", "features", "[", "'A_in_col'", "]", "=", "_int64_feature", "(", "u_A_in", ".", "col", ")", "\n", "features", "[", "'A_in'", "]", "=", "_float_feature", "(", "u_A_in", ".", "data", ")", "\n", "features", "[", "'A_out_row'", "]", "=", "_int64_feature", "(", "u_A_out", ".", "row", ")", "\n", "features", "[", "'A_out_col'", "]", "=", "_int64_feature", "(", "u_A_out", ".", "col", ")", "\n", "features", "[", "'A_out'", "]", "=", "_float_feature", "(", "u_A_out", ".", "data", ")", "\n", "features", "[", "'A_in_shape'", "]", "=", "_int64_feature", "(", "u_A_in", ".", "shape", ")", "\n", "features", "[", "'A_out_shape'", "]", "=", "_int64_feature", "(", "u_A_out", ".", "shape", ")", "\n", "#--------------------------------------", "\n", "tf_features", "=", "tf", ".", "train", ".", "Features", "(", "feature", "=", "features", ")", "\n", "tf_example", "=", "tf", ".", "train", ".", "Example", "(", "features", "=", "tf_features", ")", "\n", "tf_serialized", "=", "tf_example", ".", "SerializeToString", "(", ")", "\n", "writer", ".", "write", "(", "tf_serialized", ")", "\n", "count", "+=", "1", "\n", "if", "count", "%", "200", "==", "0", "and", "i", "!=", "end", "-", "1", ":", "\n", "                        ", "writer", ".", "close", "(", ")", "\n", "writer", "=", "tf", ".", "python_io", ".", "TFRecordWriter", "(", "orgin_path", "+", "str", "(", "count", ")", "+", "'.tfrecord'", ")", "\n", "", "", "", "writer", ".", "close", "(", ")", "\n", "", "return", "select", "\n", "\n", "", "apply_parallel", "(", "all_data", ".", "groupby", "(", "'user'", ")", ",", "select_data", "(", ")", ")", "\n", "apply_parallel", "(", "all_data", ".", "groupby", "(", "'user'", ")", ",", "select_data", "(", "False", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CRIPAC-DIG_A-PGNN.None.transformer.encoder": [[12, 30], ["tensorflow.variable_scope", "transformer.pos_encoding", "tensorflow.layers.dropout", "range", "tensorflow.convert_to_tensor", "tensorflow.variable_scope", "transformer.multihead_attention", "transformer.feedforward"], "function", ["home.repos.pwc.inspect_result.CRIPAC-DIG_A-PGNN.None.transformer.pos_encoding", "home.repos.pwc.inspect_result.CRIPAC-DIG_A-PGNN.None.transformer.multihead_attention", "home.repos.pwc.inspect_result.CRIPAC-DIG_A-PGNN.None.transformer.feedforward"], ["def", "encoder", "(", "inputs", ",", "input_mask", ",", "length", ",", "hidden_size", ",", "num_heads", "=", "1", ",", "num_block", "=", "2", ",", "drop_out", "=", "0.4", ",", "train", "=", "True", ")", ":", "\n", "    ", "with", "tf", ".", "variable_scope", "(", "'encoder'", ")", ":", "\n", "        ", "enc", "=", "pos_encoding", "(", "length", ",", "hidden_size", ")", "\n", "encoder_inputs", "=", "inputs", "+", "enc", "\n", "encoder_inputs", "=", "tf", ".", "layers", ".", "dropout", "(", "encoder_inputs", ",", "rate", "=", "drop_out", ",", "training", "=", "tf", ".", "convert_to_tensor", "(", "train", ")", ")", "\n", "for", "i", "in", "range", "(", "num_block", ")", ":", "\n", "            ", "with", "tf", ".", "variable_scope", "(", "\"num_blocks_{}\"", ".", "format", "(", "i", ")", ")", ":", "\n", "                ", "enc", "=", "multihead_attention", "(", "encoder_inputs", ",", "\n", "input_mask", ",", "\n", "encoder_inputs", ",", "\n", "input_mask", ",", "\n", "num_units", "=", "hidden_size", ",", "\n", "num_heads", "=", "num_heads", ",", "\n", "dropout_rate", "=", "drop_out", ",", "\n", "is_training", "=", "train", ",", "\n", "causality", "=", "False", ")", "\n", "enc", "=", "feedforward", "(", "enc", ",", "num_units", "=", "[", "num_heads", "*", "hidden_size", ",", "hidden_size", "]", ")", "\n", "", "", "", "return", "enc", "\n", "\n"]], "home.repos.pwc.inspect_result.CRIPAC-DIG_A-PGNN.None.transformer.decoder": [[32, 63], ["tensorflow.variable_scope", "transformer.pos_encoding", "tensorflow.layers.dropout", "range", "tensorflow.convert_to_tensor", "tensorflow.variable_scope", "transformer.multihead_attention", "transformer.multihead_attention", "transformer.feedforward"], "function", ["home.repos.pwc.inspect_result.CRIPAC-DIG_A-PGNN.None.transformer.pos_encoding", "home.repos.pwc.inspect_result.CRIPAC-DIG_A-PGNN.None.transformer.multihead_attention", "home.repos.pwc.inspect_result.CRIPAC-DIG_A-PGNN.None.transformer.multihead_attention", "home.repos.pwc.inspect_result.CRIPAC-DIG_A-PGNN.None.transformer.feedforward"], ["", "def", "decoder", "(", "dec_inputs", ",", "dec_mask", ",", "dec_length", ",", "enc_inputs", ",", "enc_mask", ",", "hidden_size", ",", "\n", "num_heads", "=", "1", ",", "num_block", "=", "2", ",", "drop_out", "=", "0.4", ",", "train", "=", "True", ")", ":", "\n", "    ", "with", "tf", ".", "variable_scope", "(", "\"decoder\"", ")", ":", "\n", "        ", "dec", "=", "pos_encoding", "(", "dec_length", ",", "hidden_size", ")", "\n", "decoder_inputs", "=", "dec_inputs", "+", "dec", "\n", "decoder_inputs", "=", "tf", ".", "layers", ".", "dropout", "(", "decoder_inputs", ",", "rate", "=", "drop_out", ",", "training", "=", "tf", ".", "convert_to_tensor", "(", "train", ")", ")", "\n", "for", "i", "in", "range", "(", "num_block", ")", ":", "\n", "            ", "with", "tf", ".", "variable_scope", "(", "\"num_blocks_{}\"", ".", "format", "(", "i", ")", ")", ":", "\n", "                ", "dec", "=", "multihead_attention", "(", "decoder_inputs", ",", "\n", "dec_mask", ",", "\n", "decoder_inputs", ",", "\n", "dec_mask", ",", "\n", "num_units", "=", "hidden_size", ",", "\n", "num_heads", "=", "num_heads", ",", "\n", "dropout_rate", "=", "drop_out", ",", "\n", "is_training", "=", "train", ",", "\n", "causality", "=", "True", ",", "\n", "scope", "=", "\"self_attention\"", ")", "\n", "#dec = feedforward(dec, num_units=[num_heads * hidden_size, hidden_size])", "\n", "dec", "=", "multihead_attention", "(", "dec", ",", "\n", "dec_mask", ",", "\n", "enc_inputs", ",", "\n", "enc_mask", ",", "\n", "num_units", "=", "hidden_size", ",", "\n", "num_heads", "=", "num_heads", ",", "\n", "dropout_rate", "=", "drop_out", ",", "\n", "is_training", "=", "train", ",", "\n", "causality", "=", "False", ",", "\n", "scope", "=", "\"vanilla_attention\"", ")", "\n", "dec", "=", "feedforward", "(", "dec", ",", "num_units", "=", "[", "num_heads", "*", "hidden_size", ",", "hidden_size", "]", ")", "\n", "", "", "", "return", "dec", "#tf.reduce_mean(dec, axis=1)", "\n", "\n"]], "home.repos.pwc.inspect_result.CRIPAC-DIG_A-PGNN.None.transformer.multihead_attention": [[65, 158], ["tensorflow.variable_scope", "tensorflow.layers.dense", "tensorflow.layers.dense", "tensorflow.layers.dense", "tensorflow.matmul", "tensorflow.tile", "tensorflow.where", "tensorflow.nn.softmax", "tensorflow.tile", "tensorflow.layers.dropout", "tensorflow.matmul", "transformer.normalize", "tensorflow.transpose", "tensorflow.expand_dims", "tensorflow.ones_like", "tensorflow.equal", "tensorflow.ones_like", "tensorflow.linalg.LinearOperatorLowerTriangular().to_dense", "tensorflow.tile", "tensorflow.where", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.ones_like", "tensorflow.equal", "tensorflow.convert_to_tensor", "queries.get_shape", "tf.layers.dense.get_shape().as_list", "tensorflow.shape", "tensorflow.linalg.LinearOperatorLowerTriangular", "tensorflow.shape", "tensorflow.shape", "tf.layers.dense.get_shape"], "function", ["home.repos.pwc.inspect_result.CRIPAC-DIG_A-PGNN.None.transformer.normalize"], ["", "def", "multihead_attention", "(", "queries", ",", "\n", "query_masks", ",", "\n", "keys", ",", "\n", "key_masks", ",", "\n", "num_units", "=", "None", ",", "\n", "num_heads", "=", "1", ",", "\n", "dropout_rate", "=", "0.0", ",", "\n", "is_training", "=", "True", ",", "\n", "causality", "=", "False", ",", "\n", "scope", "=", "\"multihead_attention\"", ",", "\n", "reuse", "=", "None", ")", ":", "\n", "    ", "'''Applies multihead attention.\n\n    Args:\n      queries: A 3d tensor with shape of [N, T_q, C_q].\n      keys: A 3d tensor with shape of [N, T_k, C_k].\n      num_units: A scalar. Attention size.\n      dropout_rate: A floating point number.\n      is_training: Boolean. Controller of mechanism for dropout.\n      causality: Boolean. If true, units that reference the future are masked.\n      num_heads: An int. Number of heads.\n      scope: Optional scope for `variable_scope`.\n      reuse: Boolean, whether to reuse the weights of a previous layer\n        by the same name.\n\n    Returns\n      A 3d tensor with shape of (N, T_q, C)\n    '''", "\n", "with", "tf", ".", "variable_scope", "(", "scope", ",", "reuse", "=", "reuse", ")", ":", "\n", "# Set the fall back option for num_units", "\n", "        ", "if", "num_units", "is", "None", ":", "\n", "            ", "num_units", "=", "queries", ".", "get_shape", "(", ")", ".", "as_list", "[", "-", "1", "]", "\n", "\n", "##---\u589e\u52a0normalize\u7528\u4e8elast\u6570\u636e-------------------", "\n", "#queries = normalize(queries)", "\n", "#keys = normalize(keys)", "\n", "# Linear projections", "\n", "", "Q", "=", "tf", ".", "layers", ".", "dense", "(", "queries", ",", "num_units", ",", "activation", "=", "tf", ".", "nn", ".", "relu", ",", "use_bias", "=", "False", ",", "name", "=", "'q'", ")", "# (N, T_q, C)", "\n", "K", "=", "tf", ".", "layers", ".", "dense", "(", "keys", ",", "num_units", ",", "activation", "=", "tf", ".", "nn", ".", "relu", ",", "use_bias", "=", "False", ",", "name", "=", "'k'", ")", "# (N, T_k, C)", "\n", "V", "=", "tf", ".", "layers", ".", "dense", "(", "keys", ",", "num_units", ",", "activation", "=", "tf", ".", "nn", ".", "relu", ",", "use_bias", "=", "False", ",", "name", "=", "'v'", ")", "# (N, T_k, C)", "\n", "#V = keys", "\n", "\n", "# Split and concat", "\n", "# Q_ = tf.concat(tf.split(Q, num_heads, axis=2), axis=0)  # (h*N, T_q, C/h)", "\n", "# K_ = tf.concat(tf.split(K, num_heads, axis=2), axis=0)  # (h*N, T_k, C/h)", "\n", "# V_ = tf.concat(tf.split(V, num_heads, axis=2), axis=0)  # (h*N, T_k, C/h)", "\n", "\n", "# Multiplication", "\n", "outputs", "=", "tf", ".", "matmul", "(", "Q", ",", "tf", ".", "transpose", "(", "K", ",", "[", "0", ",", "2", ",", "1", "]", ")", ")", "# (h*N, T_q, T_k)", "\n", "\n", "# Scale", "\n", "outputs", "=", "outputs", "/", "(", "K", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "-", "1", "]", "**", "0.5", ")", "\n", "\n", "# Key Masking", "\n", "#key_masks = tf.tile(key_masks, [num_heads, 1])  # (h*N, T_k)", "\n", "key_masks", "=", "tf", ".", "tile", "(", "tf", ".", "expand_dims", "(", "key_masks", ",", "1", ")", ",", "[", "1", ",", "tf", ".", "shape", "(", "queries", ")", "[", "1", "]", ",", "1", "]", ")", "# (h*N, T_q, T_k)", "\n", "\n", "paddings", "=", "tf", ".", "ones_like", "(", "outputs", ")", "*", "(", "-", "2", "**", "32", "+", "1", ")", "\n", "outputs", "=", "tf", ".", "where", "(", "tf", ".", "equal", "(", "key_masks", ",", "0", ")", ",", "paddings", ",", "outputs", ")", "# (h*N, T_q, T_k)", "\n", "\n", "# Causality = Future blinding", "\n", "if", "causality", ":", "\n", "            ", "diag_vals", "=", "tf", ".", "ones_like", "(", "outputs", "[", "0", ",", ":", ",", ":", "]", ")", "# (T_q, T_k)", "\n", "tril", "=", "tf", ".", "linalg", ".", "LinearOperatorLowerTriangular", "(", "diag_vals", ")", ".", "to_dense", "(", ")", "# (T_q, T_k)", "\n", "masks", "=", "tf", ".", "tile", "(", "tf", ".", "expand_dims", "(", "tril", ",", "0", ")", ",", "[", "tf", ".", "shape", "(", "outputs", ")", "[", "0", "]", ",", "1", ",", "1", "]", ")", "# (h*N, T_q, T_k)", "\n", "\n", "paddings", "=", "tf", ".", "ones_like", "(", "masks", ")", "*", "(", "-", "2", "**", "32", "+", "1", ")", "\n", "outputs", "=", "tf", ".", "where", "(", "tf", ".", "equal", "(", "masks", ",", "0", ")", ",", "paddings", ",", "outputs", ")", "# (h*N, T_q, T_k)", "\n", "\n", "# Activation", "\n", "", "outputs", "=", "tf", ".", "nn", ".", "softmax", "(", "outputs", ")", "# (h*N, T_q, T_k)", "\n", "\n", "# Query Masking", "\n", "#query_masks = tf.tile(query_masks, [num_heads, 1])  # (h*N, T_q)", "\n", "query_masks", "=", "tf", ".", "tile", "(", "tf", ".", "expand_dims", "(", "query_masks", ",", "-", "1", ")", ",", "[", "1", ",", "1", ",", "tf", ".", "shape", "(", "keys", ")", "[", "1", "]", "]", ")", "# (h*N, T_q, T_k)", "\n", "outputs", "*=", "query_masks", "# broadcasting. (N, T_q, C)", "\n", "\n", "# Dropouts", "\n", "outputs", "=", "tf", ".", "layers", ".", "dropout", "(", "outputs", ",", "rate", "=", "dropout_rate", ",", "training", "=", "tf", ".", "convert_to_tensor", "(", "is_training", ")", ")", "\n", "\n", "# Weighted sum", "\n", "outputs", "=", "tf", ".", "matmul", "(", "outputs", ",", "V", ")", "# ( h*N, T_q, C/h)", "\n", "\n", "# Restore shape", "\n", "#outputs = tf.concat(tf.split(outputs, num_heads, axis=0), axis=2)  # (N, T_q, C)", "\n", "\n", "# Residual connection", "\n", "outputs", "+=", "queries", "\n", "\n", "# Normalize", "\n", "outputs", "=", "normalize", "(", "outputs", ")", "# (N, T_q, C)", "\n", "\n", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.CRIPAC-DIG_A-PGNN.None.transformer.feedforward": [[160, 194], ["tensorflow.variable_scope", "tensorflow.layers.conv1d", "tensorflow.layers.conv1d", "transformer.normalize"], "function", ["home.repos.pwc.inspect_result.CRIPAC-DIG_A-PGNN.None.transformer.normalize"], ["", "def", "feedforward", "(", "inputs", ",", "\n", "num_units", "=", "[", "100", ",", "100", "]", ",", "\n", "scope", "=", "\"multihead_attention\"", ",", "\n", "reuse", "=", "None", ")", ":", "\n", "    ", "'''Point-wise feed forward net.\n\n    Args:\n      inputs: A 3d tensor with shape of [N, T, C].\n      num_units: A list of two integers.\n      scope: Optional scope for `variable_scope`.\n      reuse: Boolean, whether to reuse the weights of a previous layer\n        by the same name.\n\n    Returns:\n      A 3d tensor with the same shape and dtype as inputs\n    '''", "\n", "with", "tf", ".", "variable_scope", "(", "scope", ",", "reuse", "=", "reuse", ")", ":", "\n", "# Inner layer", "\n", "        ", "params", "=", "{", "\"inputs\"", ":", "inputs", ",", "\"filters\"", ":", "num_units", "[", "0", "]", ",", "\"kernel_size\"", ":", "1", ",", "\n", "\"activation\"", ":", "tf", ".", "nn", ".", "relu", ",", "\"use_bias\"", ":", "True", "}", "\n", "outputs", "=", "tf", ".", "layers", ".", "conv1d", "(", "**", "params", ")", "\n", "\n", "# Readout layer", "\n", "params", "=", "{", "\"inputs\"", ":", "outputs", ",", "\"filters\"", ":", "num_units", "[", "1", "]", ",", "\"kernel_size\"", ":", "1", ",", "\n", "\"activation\"", ":", "None", ",", "\"use_bias\"", ":", "True", "}", "\n", "outputs", "=", "tf", ".", "layers", ".", "conv1d", "(", "**", "params", ")", "\n", "\n", "#Residual connection", "\n", "outputs", "+=", "inputs", "\n", "\n", "# Normalize", "\n", "outputs", "=", "normalize", "(", "outputs", ")", "\n", "\n", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.CRIPAC-DIG_A-PGNN.None.transformer.normalize": [[197, 225], ["tensorflow.variable_scope", "inputs.get_shape", "tensorflow.nn.moments", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.zeros", "tensorflow.ones"], "function", ["None"], ["", "def", "normalize", "(", "inputs", ",", "\n", "epsilon", "=", "1e-8", ",", "\n", "scope", "=", "\"ln\"", ",", "\n", "reuse", "=", "None", ")", ":", "\n", "    ", "'''Applies layer normalization.\n\n    Args:\n      inputs: A tensor with 2 or more dimensions, where the first dimension has\n        `batch_size`.\n      epsilon: A floating number. A very small number for preventing ZeroDivision Error.\n      scope: Optional scope for `variable_scope`.\n      reuse: Boolean, whether to reuse the weights of a previous layer\n        by the same name.\n\n    Returns:\n      A tensor with the same shape and data dtype as `inputs`.\n    '''", "\n", "with", "tf", ".", "variable_scope", "(", "scope", ",", "reuse", "=", "reuse", ")", ":", "\n", "        ", "inputs_shape", "=", "inputs", ".", "get_shape", "(", ")", "\n", "params_shape", "=", "inputs_shape", "[", "-", "1", ":", "]", "\n", "\n", "mean", ",", "variance", "=", "tf", ".", "nn", ".", "moments", "(", "inputs", ",", "[", "-", "1", "]", ",", "keep_dims", "=", "True", ")", "\n", "beta", "=", "tf", ".", "Variable", "(", "tf", ".", "zeros", "(", "params_shape", ")", ")", "\n", "gamma", "=", "tf", ".", "Variable", "(", "tf", ".", "ones", "(", "params_shape", ")", ")", "\n", "normalized", "=", "(", "inputs", "-", "mean", ")", "/", "(", "(", "variance", "+", "epsilon", ")", "**", "(", ".5", ")", ")", "\n", "outputs", "=", "gamma", "*", "normalized", "+", "beta", "\n", "\n", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.CRIPAC-DIG_A-PGNN.None.transformer.pos_encoding": [[236, 262], ["tensorflow.to_float", "tensorflow.concat", "tensorflow.range", "math.log", "tensorflow.exp", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.to_float", "tensorflow.sin", "tensorflow.cos", "float", "float", "tensorflow.to_float", "tensorflow.range"], "function", ["None"], ["", "def", "pos_encoding", "(", "length", ",", "hidden_size", ",", "min_timescale", "=", "1.0", ",", "max_timescale", "=", "1.0e4", ")", ":", "\n", "    ", "\"\"\"Return positional encoding.\n\n    Calculates the position encoding as a mix of sine and cosine functions with\n    geometrically increasing wavelengths.\n    Defined and formulized in Attention is All You Need, section 3.5.\n\n    Args:\n      length: Sequence length.\n      hidden_size: Size of the\n      min_timescale: Minimum scale that will be applied at each position\n      max_timescale: Maximum scale that will be applied at each position\n\n    Returns:\n      Tensor with shape [length, hidden_size]\n    \"\"\"", "\n", "position", "=", "tf", ".", "to_float", "(", "tf", ".", "range", "(", "length", ")", ")", "\n", "num_timescales", "=", "hidden_size", "//", "2", "\n", "log_timescale_increment", "=", "(", "\n", "math", ".", "log", "(", "float", "(", "max_timescale", ")", "/", "float", "(", "min_timescale", ")", ")", "/", "\n", "(", "tf", ".", "to_float", "(", "num_timescales", ")", "-", "1", ")", ")", "\n", "inv_timescales", "=", "min_timescale", "*", "tf", ".", "exp", "(", "\n", "tf", ".", "to_float", "(", "tf", ".", "range", "(", "num_timescales", ")", ")", "*", "-", "log_timescale_increment", ")", "\n", "scaled_time", "=", "tf", ".", "expand_dims", "(", "position", ",", "1", ")", "*", "tf", ".", "expand_dims", "(", "inv_timescales", ",", "0", ")", "\n", "signal", "=", "tf", ".", "concat", "(", "[", "tf", ".", "sin", "(", "scaled_time", ")", ",", "tf", ".", "cos", "(", "scaled_time", ")", "]", ",", "axis", "=", "1", ")", "\n", "return", "signal", "\n", "\n"]]}