{"home.repos.pwc.inspect_result.matthewbehrend_BNC.None.run_experiments.runOffceHomeTasks": [[15, 42], ["xlsxwriter.Workbook", "xlsxwriter.Workbook.add_worksheet", "workbook.add_worksheet.write_column", "run_experiments.setState", "dataset_loading.load_datasets.OfficeHomeDatasets", "dataset_loading.load_datasets.OfficeHomeDatasets.domains.keys", "xlsxwriter.Workbook.close", "run_experiments.testTrainerStochatically", "dataset_loading.load_datasets.OfficeHomeDatasets.domains.keys"], "function", ["home.repos.pwc.inspect_result.matthewbehrend_BNC.None.inspect_distributions.setState", "home.repos.pwc.inspect_result.matthewbehrend_BNC.None.run_experiments.testTrainerStochatically"], ["def", "runOffceHomeTasks", "(", ")", ":", "\n", "# OfficeHome Adaptation", "\n", "\n", "# Prepare results worksheet", "\n", "    ", "file_name", "=", "'Adaptation_accuracy_results_OfficeHome.xlsx'", "\n", "workbook", "=", "xlsxwriter", ".", "Workbook", "(", "file_name", ")", "\n", "worksheet", "=", "workbook", ".", "add_worksheet", "(", "'Sheet 1'", ")", "\n", "global", "idx_experiment", "\n", "idx_experiment", "=", "0", "\n", "worksheet", ".", "write_column", "(", "0", ",", "idx_experiment", ",", "[", "'Method'", ",", "'Domain Shift'", ",", "'Adapted'", ",", "'Adapted Std'", ",", "'Source Only'", ",", "'Source Only Std'", "]", ")", "\n", "idx_experiment", "+=", "1", "\n", "\n", "# set random seeds", "\n", "setState", "(", ")", "\n", "\n", "# Get dataset", "\n", "ds_officehome", "=", "OfficeHomeDatasets", "(", ")", "\n", "\n", "# Measure accuracy for each domain shift", "\n", "\n", "# Run all domain shift pairs", "\n", "for", "src", "in", "ds_officehome", ".", "domains", ".", "keys", "(", ")", ":", "\n", "        ", "target", "=", "[", "x", "for", "x", "in", "ds_officehome", ".", "domains", ".", "keys", "(", ")", "if", "x", "is", "not", "src", "]", "\n", "for", "tgt", "in", "target", ":", "\n", "            ", "accuracy_log", ",", "adapt_experiment", "=", "testTrainerStochatically", "(", "src", ",", "tgt", ",", "BNC", ",", "ds_officehome", ",", "worksheet", ")", "\n", "\n", "", "", "workbook", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.matthewbehrend_BNC.None.run_experiments.setState": [[43, 47], ["random.seed", "numpy.random.seed", "mxnet.random.seed", "mxnet.cpu"], "function", ["None"], ["", "def", "setState", "(", ")", ":", "\n", "    ", "random", ".", "seed", "(", "700", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", "=", "701", ")", "\n", "mx", ".", "random", ".", "seed", "(", "702", ",", "ctx", "=", "mx", ".", "cpu", "(", "0", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.matthewbehrend_BNC.None.run_experiments.testTrainerStochatically": [[48, 73], ["adaptation_methods.base_model.TrainerTraceLog", "print", "mxnet.cpu", "range", "adaptation_methods.base_model.TrainerTraceLog.saveRawDataToXLSX", "worksheet.write_column", "MethodAdapt.trainSequence", "adaptation_methods.base_model.TrainerTraceLog.stack", "adaptation_methods.adapt_BNC.BNC"], "function", ["home.repos.pwc.inspect_result.matthewbehrend_BNC.adaptation_methods.base_model.TrainerTraceLog.saveRawDataToXLSX", "home.repos.pwc.inspect_result.matthewbehrend_BNC.adaptation_methods.base_model.BaseEncoderClass.trainSequence", "home.repos.pwc.inspect_result.matthewbehrend_BNC.adaptation_methods.base_model.TrainerTraceLog.stack"], ["", "def", "testTrainerStochatically", "(", "source", ",", "target", ",", "MethodAdapt", ",", "multidomain_dataset", ",", "worksheet", ",", "trials", "=", "3", ")", ":", "\n", "    ", "tracelog", "=", "TrainerTraceLog", "(", ")", "\n", "print", "(", "MethodAdapt", ".", "__name__", "+", "' '", "+", "source", "+", "'_'", "+", "target", ")", "\n", "context", "=", "mx", ".", "cpu", "(", ")", "\n", "\n", "for", "i", "in", "range", "(", "trials", ")", ":", "\n", "        ", "src", "=", "multidomain_dataset", ".", "domains", "[", "source", "]", "\n", "tgt", "=", "multidomain_dataset", ".", "domains", "[", "target", "]", "\n", "k", "=", "multidomain_dataset", ".", "k_classes", "\n", "\n", "experiment", "=", "MethodAdapt", "(", "k", ",", "context", ")", "\n", "data_log", "=", "experiment", ".", "trainSequence", "(", "src", ",", "tgt", ")", "\n", "\n", "tracelog", ".", "stack", "(", "data_log", ")", "\n", "\n", "# get summary from raw results", "\n", "", "summary_metrics", "=", "tracelog", ".", "saveRawDataToXLSX", "(", "MethodAdapt", ".", "__name__", "+", "'_'", "+", "source", "+", "'_'", "+", "target", "+", "'.xlsx'", ")", "\n", "# write performance summary to excel file", "\n", "global", "idx_experiment", "\n", "worksheet", ".", "write_column", "(", "0", ",", "idx_experiment", ",", "\n", "[", "MethodAdapt", ".", "__name__", ",", "source", "+", "'-'", "+", "target", ",", "summary_metrics", "[", "'adapted_acc'", "]", ",", "\n", "summary_metrics", "[", "'adapted_std'", "]", ",", "\n", "summary_metrics", "[", "'source_only'", "]", ",", "summary_metrics", "[", "'source_std'", "]", "]", ")", "\n", "idx_experiment", "+=", "1", "\n", "return", "tracelog", ",", "experiment", "\n", "\n"]], "home.repos.pwc.inspect_result.matthewbehrend_BNC.None.run_experiments.main": [[75, 77], ["run_experiments.runOffceHomeTasks"], "function", ["home.repos.pwc.inspect_result.matthewbehrend_BNC.None.run_experiments.runOffceHomeTasks"], ["", "def", "main", "(", ")", ":", "\n", "    ", "runOffceHomeTasks", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.matthewbehrend_BNC.None.inspect_distributions.setState": [[23, 27], ["random.seed", "numpy.random.seed", "mxnet.random.seed", "mxnet.cpu"], "function", ["None"], ["def", "setState", "(", ")", ":", "\n", "    ", "random", ".", "seed", "(", "700", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", "=", "701", ")", "\n", "mx", ".", "random", ".", "seed", "(", "702", ",", "ctx", "=", "mx", ".", "cpu", "(", "0", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.matthewbehrend_BNC.adaptation_methods.adapt_BNC.BNC.__init__": [[11, 18], ["adaptation_methods.base_model.BaseEncoderClass.__init__", "adapt_BNC.BNC.classifierHead", "adapt_BNC.BNC.addBatchNorm", "adapt_BNC.BNC.addSoftmax", "adapt_BNC.BNC.bnClassNet.initialize", "mxnet.init.Normal"], "methods", ["home.repos.pwc.inspect_result.matthewbehrend_BNC.dataset_loading.load_datasets.OfficeHomeDatasets.__init__", "home.repos.pwc.inspect_result.matthewbehrend_BNC.adaptation_methods.base_model.BaseEncoderClass.classifierHead", "home.repos.pwc.inspect_result.matthewbehrend_BNC.adaptation_methods.base_model.BaseEncoderClass.addBatchNorm", "home.repos.pwc.inspect_result.matthewbehrend_BNC.adaptation_methods.base_model.BaseEncoderClass.addSoftmax"], ["    ", "def", "__init__", "(", "self", ",", "k_classes", ",", "context", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "k_classes", ",", "context", ")", "\n", "# Build classification network", "\n", "self", ".", "bnClassNet", "=", "self", ".", "classifierHead", "(", ")", "\n", "self", ".", "bnClassNet", "=", "self", ".", "addBatchNorm", "(", "self", ".", "bnClassNet", ")", "\n", "self", ".", "bnClassNet", "=", "self", ".", "addSoftmax", "(", "self", ".", "bnClassNet", ")", "\n", "self", ".", "bnClassNet", ".", "initialize", "(", "mx", ".", "init", ".", "Normal", "(", "0.02", ")", ",", "ctx", "=", "self", ".", "context", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.matthewbehrend_BNC.adaptation_methods.adapt_BNC.BNC.initTrainer": [[19, 22], ["adapt_BNC.BNC.model", "mxnet.gluon.Trainer", "adapt_BNC.BNC.bnClassNet.collect_params"], "methods", ["home.repos.pwc.inspect_result.matthewbehrend_BNC.adaptation_methods.adapt_BNC_inspect_distributions.BNCInspect.model"], ["", "def", "initTrainer", "(", "self", ",", "data_sample", ")", ":", "\n", "        ", "self", ".", "model", "(", "data_sample", ")", "\n", "self", ".", "bnclass_trainer", "=", "gluon", ".", "Trainer", "(", "self", ".", "bnClassNet", ".", "collect_params", "(", ")", ",", "'adam'", ",", "{", "'learning_rate'", ":", "self", ".", "base_learning_rate", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.matthewbehrend_BNC.adaptation_methods.adapt_BNC.BNC.stepTrainer": [[23, 25], ["adapt_BNC.BNC.bnclass_trainer.step"], "methods", ["None"], ["", "def", "stepTrainer", "(", "self", ")", ":", "\n", "        ", "self", ".", "bnclass_trainer", ".", "step", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.matthewbehrend_BNC.adaptation_methods.adapt_BNC.BNC.trainOptimization": [[26, 51], ["adaptation_methods.base_model.TrainerTraceLog", "range", "enumerate", "adaptation_methods.base_model.TrainerTraceLog.logPerformanceData", "data.as_in_context.as_in_context.as_in_context", "mxnet.nd.one_hot", "adapt_BNC.BNC.stepTrainer", "mxnet.nd.mean.asscalar", "label.as_in_context", "mxnet.autograd.record", "adapt_BNC.BNC.model", "mxnet.nd.mean", "mxnet.nd.mean.backward", "adapt_BNC.BNC.crossEntropy"], "methods", ["home.repos.pwc.inspect_result.matthewbehrend_BNC.adaptation_methods.base_model.TrainerTraceLog.logPerformanceData", "home.repos.pwc.inspect_result.matthewbehrend_BNC.adaptation_methods.adapt_BNC_inspect_distributions.BNCInspect.stepTrainer", "home.repos.pwc.inspect_result.matthewbehrend_BNC.adaptation_methods.adapt_BNC_inspect_distributions.BNCInspect.model", "home.repos.pwc.inspect_result.matthewbehrend_BNC.adaptation_methods.base_model.BaseEncoderClass.crossEntropy"], ["", "def", "trainOptimization", "(", "self", ",", "data_loader", ",", "n_epochs", ",", "domainTests", ")", ":", "\n", "# Supervised in Source Domain", "\n", "        ", "tracelog", "=", "TrainerTraceLog", "(", ")", "\n", "cumulative_points", "=", "0", "\n", "\n", "for", "e", "in", "range", "(", "n_epochs", ")", ":", "\n", "            ", "epoch_loss", "=", "0", "\n", "for", "i", ",", "(", "data", ",", "label", ")", "in", "enumerate", "(", "data_loader", "[", "'source'", "]", ")", ":", "# Source domain", "\n", "                ", "data", "=", "data", ".", "as_in_context", "(", "self", ".", "context", ")", "\n", "label_hot", "=", "nd", ".", "one_hot", "(", "label", ".", "as_in_context", "(", "self", ".", "context", ")", ",", "depth", "=", "self", ".", "k_classes", ")", "\n", "n_points", "=", "data", ".", "shape", "[", "0", "]", "\n", "\n", "with", "autograd", ".", "record", "(", ")", ":", "\n", "                    ", "logP_c", "=", "self", ".", "model", "(", "data", ")", "\n", "loss", "=", "nd", ".", "mean", "(", "self", ".", "crossEntropy", "(", "label_hot", ",", "logP_c", ")", ")", "\n", "\n", "loss", ".", "backward", "(", ")", "\n", "", "self", ".", "stepTrainer", "(", ")", "\n", "\n", "epoch_loss", "+=", "loss", ".", "asscalar", "(", ")", "\n", "cumulative_points", "+=", "n_points", "\n", "\n", "# log at completion of epoch", "\n", "", "tracelog", ".", "logPerformanceData", "(", "self", ",", "domainTests", ",", "e", ",", "cumulative_points", ",", "epoch_loss", "/", "(", "1", "+", "i", ")", ")", "\n", "", "return", "tracelog", "\n", "\n"]], "home.repos.pwc.inspect_result.matthewbehrend_BNC.adaptation_methods.adapt_BNC.BNC.adaptOptimization": [[52, 76], ["adaptation_methods.base_model.TrainerTraceLog", "range", "enumerate", "adaptation_methods.base_model.TrainerTraceLog.logPerformanceData", "tgt_data.as_in_context.as_in_context.as_in_context", "adapt_BNC.BNC.stepTrainer", "mxnet.nd.mean.asscalar", "mxnet.autograd.record", "adapt_BNC.BNC.model", "mxnet.nd.mean", "mxnet.nd.mean.backward", "adapt_BNC.BNC.crossEntropy", "mxnet.nd.exp"], "methods", ["home.repos.pwc.inspect_result.matthewbehrend_BNC.adaptation_methods.base_model.TrainerTraceLog.logPerformanceData", "home.repos.pwc.inspect_result.matthewbehrend_BNC.adaptation_methods.adapt_BNC_inspect_distributions.BNCInspect.stepTrainer", "home.repos.pwc.inspect_result.matthewbehrend_BNC.adaptation_methods.adapt_BNC_inspect_distributions.BNCInspect.model", "home.repos.pwc.inspect_result.matthewbehrend_BNC.adaptation_methods.base_model.BaseEncoderClass.crossEntropy"], ["", "def", "adaptOptimization", "(", "self", ",", "data_loader", ",", "n_epochs", ",", "domainTests", ")", ":", "\n", "# Unsupervised in Target Domain", "\n", "        ", "tracelog", "=", "TrainerTraceLog", "(", ")", "\n", "cumulative_points", "=", "0", "\n", "\n", "for", "e", "in", "range", "(", "n_epochs", ")", ":", "\n", "            ", "epoch_loss", "=", "0", "\n", "for", "i", ",", "(", "tgt_data", ",", "_", ")", "in", "enumerate", "(", "data_loader", "[", "'target'", "]", ")", ":", "# Target domain, without labels", "\n", "                ", "tgt_data", "=", "tgt_data", ".", "as_in_context", "(", "self", ".", "context", ")", "\n", "n_points", "=", "tgt_data", ".", "shape", "[", "0", "]", "\n", "\n", "with", "autograd", ".", "record", "(", ")", ":", "\n", "                    ", "logP_c", "=", "self", ".", "model", "(", "tgt_data", ")", "\n", "loss", "=", "nd", ".", "mean", "(", "self", ".", "crossEntropy", "(", "nd", ".", "exp", "(", "logP_c", ")", ",", "logP_c", ")", ")", "# entropy", "\n", "\n", "loss", ".", "backward", "(", ")", "\n", "", "self", ".", "stepTrainer", "(", ")", "\n", "\n", "epoch_loss", "+=", "loss", ".", "asscalar", "(", ")", "\n", "cumulative_points", "+=", "n_points", "\n", "\n", "# log at completion of epoch", "\n", "", "tracelog", ".", "logPerformanceData", "(", "self", ",", "domainTests", ",", "e", ",", "cumulative_points", ",", "epoch_loss", "/", "(", "1", "+", "i", ")", ")", "\n", "", "return", "tracelog", "\n", "\n"]], "home.repos.pwc.inspect_result.matthewbehrend_BNC.adaptation_methods.adapt_BNC.BNC.trainSequence": [[77, 89], ["adapt_BNC.BNC.initForTraining", "adapt_BNC.BNC.trainOptimization", "adapt_BNC.BNC.initForTraining", "adapt_BNC.BNC.adaptOptimization", "adapt_BNC.BNC.append"], "methods", ["home.repos.pwc.inspect_result.matthewbehrend_BNC.adaptation_methods.base_model.BaseEncoderClass.initForTraining", "home.repos.pwc.inspect_result.matthewbehrend_BNC.adaptation_methods.base_model.BaseEncoderClass.trainOptimization", "home.repos.pwc.inspect_result.matthewbehrend_BNC.adaptation_methods.base_model.BaseEncoderClass.initForTraining", "home.repos.pwc.inspect_result.matthewbehrend_BNC.adaptation_methods.adapt_BNC.BNC.adaptOptimization", "home.repos.pwc.inspect_result.matthewbehrend_BNC.adaptation_methods.base_model.TrainerTraceLog.append"], ["", "def", "trainSequence", "(", "self", ",", "source_data_loader", ",", "target_data_loader", ",", "epochs", "=", "5", ")", ":", "\n", "# source training", "\n", "        ", "adapt_data_loaders", ",", "domainTests", "=", "self", ".", "initForTraining", "(", "source_data_loader", ",", "target_data_loader", ")", "\n", "trace_log", "=", "self", ".", "trainOptimization", "(", "adapt_data_loaders", ",", "epochs", ",", "domainTests", ")", "\n", "trace_log", ".", "epoch", "=", "[", "-", "1", "for", "x", "in", "trace_log", ".", "epoch", "]", "# relabel epochs as -1 before adaptation", "\n", "\n", "# target adaptation", "\n", "adapt_data_loaders", ",", "domainTests", "=", "self", ".", "initForTraining", "(", "source_data_loader", ",", "target_data_loader", ")", "\n", "trace_log2", "=", "self", ".", "adaptOptimization", "(", "adapt_data_loaders", ",", "epochs", ",", "domainTests", ")", "\n", "\n", "trace_log", ".", "append", "(", "trace_log2", ")", "\n", "return", "trace_log", "\n", "\n"]], "home.repos.pwc.inspect_result.matthewbehrend_BNC.adaptation_methods.adapt_BNC.BNC.model": [[90, 92], ["adapt_BNC.BNC.bnClassNet"], "methods", ["None"], ["", "def", "model", "(", "self", ",", "data", ")", ":", "\n", "        ", "return", "self", ".", "bnClassNet", "(", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.matthewbehrend_BNC.adaptation_methods.adapt_BNC.BNC_Cotrained.__init__": [[98, 100], ["adapt_BNC.BNC.__init__"], "methods", ["home.repos.pwc.inspect_result.matthewbehrend_BNC.dataset_loading.load_datasets.OfficeHomeDatasets.__init__"], ["    ", "def", "__init__", "(", "self", ",", "k_classes", ",", "context", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "k_classes", ",", "context", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.matthewbehrend_BNC.adaptation_methods.adapt_BNC.BNC_Cotrained.trainOptimization": [[101, 135], ["adaptation_methods.base_model.TrainerTraceLog", "range", "enumerate", "adaptation_methods.base_model.TrainerTraceLog.logPerformanceData", "data.as_in_context.as_in_context.as_in_context", "label.as_in_context.as_in_context.as_in_context", "mxnet.nd.one_hot", "adapt_BNC.BNC_Cotrained.bnclass_trainer.step", "mxnet.nd.mean.asscalar", "tgt_data.as_in_context.as_in_context.as_in_context", "mxnet.autograd.record", "adapt_BNC.BNC_Cotrained.model", "mxnet.nd.mean", "adapt_BNC.BNC_Cotrained.model", "mxnet.nd.mean.backward", "adapt_BNC.BNC_Cotrained.crossEntropy", "mxnet.nd.mean", "adapt_BNC.BNC_Cotrained.crossEntropy", "mxnet.nd.exp"], "methods", ["home.repos.pwc.inspect_result.matthewbehrend_BNC.adaptation_methods.base_model.TrainerTraceLog.logPerformanceData", "home.repos.pwc.inspect_result.matthewbehrend_BNC.adaptation_methods.adapt_BNC_inspect_distributions.BNCInspect.model", "home.repos.pwc.inspect_result.matthewbehrend_BNC.adaptation_methods.adapt_BNC_inspect_distributions.BNCInspect.model", "home.repos.pwc.inspect_result.matthewbehrend_BNC.adaptation_methods.base_model.BaseEncoderClass.crossEntropy", "home.repos.pwc.inspect_result.matthewbehrend_BNC.adaptation_methods.base_model.BaseEncoderClass.crossEntropy"], ["", "def", "trainOptimization", "(", "self", ",", "data_loader", ",", "n_epochs", ",", "domainTests", ")", ":", "\n", "        ", "tracelog", "=", "TrainerTraceLog", "(", ")", "\n", "cumulative_points", "=", "0", "\n", "\n", "for", "e", "in", "range", "(", "n_epochs", ")", ":", "\n", "            ", "epoch_loss", "=", "0", "\n", "for", "i", ",", "(", "data", ",", "label", ")", "in", "enumerate", "(", "data_loader", "[", "'source'", "]", ")", ":", "\n", "                ", "data", "=", "data", ".", "as_in_context", "(", "self", ".", "context", ")", "\n", "label", "=", "label", ".", "as_in_context", "(", "self", ".", "context", ")", "\n", "label_hot", "=", "nd", ".", "one_hot", "(", "label", ",", "depth", "=", "self", ".", "k_classes", ")", "\n", "n_points", "=", "data", ".", "shape", "[", "0", "]", "\n", "\n", "for", "(", "tgt_data", ",", "_", ")", "in", "data_loader", "[", "'target'", "]", ":", "\n", "                    ", "tgt_data", "=", "tgt_data", ".", "as_in_context", "(", "self", ".", "context", ")", "# Target domain only, without labels", "\n", "break", "\n", "\n", "", "with", "autograd", ".", "record", "(", ")", ":", "\n", "# supervised on source domain", "\n", "                    ", "logP_c", "=", "self", ".", "model", "(", "data", ")", "\n", "loss", "=", "nd", ".", "mean", "(", "self", ".", "crossEntropy", "(", "label_hot", ",", "logP_c", ")", ")", "\n", "\n", "# unsupervised on target domain", "\n", "logP_target", "=", "self", ".", "model", "(", "tgt_data", ")", "\n", "loss", "=", "loss", "+", "nd", ".", "mean", "(", "self", ".", "crossEntropy", "(", "nd", ".", "exp", "(", "logP_target", ")", ",", "logP_target", ")", ")", "\n", "\n", "loss", ".", "backward", "(", ")", "# back propagation", "\n", "", "self", ".", "bnclass_trainer", ".", "step", "(", "1", ")", "\n", "\n", "epoch_loss", "+=", "loss", ".", "asscalar", "(", ")", "\n", "cumulative_points", "+=", "n_points", "\n", "\n", "# log at completion of epoch", "\n", "", "tracelog", ".", "logPerformanceData", "(", "self", ",", "domainTests", ",", "e", ",", "cumulative_points", ",", "epoch_loss", "/", "(", "1", "+", "i", ")", ")", "\n", "", "return", "tracelog", "\n", "\n"]], "home.repos.pwc.inspect_result.matthewbehrend_BNC.adaptation_methods.adapt_BNC.BNC_Cotrained.trainSequence": [[136, 143], ["adapt_BNC.BNC_Cotrained.initForTraining", "adapt_BNC.BNC_Cotrained.trainOptimization"], "methods", ["home.repos.pwc.inspect_result.matthewbehrend_BNC.adaptation_methods.base_model.BaseEncoderClass.initForTraining", "home.repos.pwc.inspect_result.matthewbehrend_BNC.adaptation_methods.base_model.BaseEncoderClass.trainOptimization"], ["", "def", "trainSequence", "(", "self", ",", "source_data_loader", ",", "target_data_loader", ",", "epochs", "=", "5", ")", ":", "\n", "        ", "adapt_data_loaders", ",", "domainTests", "=", "self", ".", "initForTraining", "(", "source_data_loader", ",", "target_data_loader", ")", "\n", "\n", "# co-train source domain supervised, target domain unsupervised", "\n", "trace_log", "=", "self", ".", "trainOptimization", "(", "adapt_data_loaders", ",", "epochs", ",", "domainTests", ")", "\n", "\n", "return", "trace_log", "\n", "\n"]], "home.repos.pwc.inspect_result.matthewbehrend_BNC.adaptation_methods.base_model.BaseEncoderClass.__init__": [[9, 15], ["mxnet.cpu", "abc.ABC.__init__"], "methods", ["home.repos.pwc.inspect_result.matthewbehrend_BNC.dataset_loading.load_datasets.OfficeHomeDatasets.__init__"], ["    ", "def", "__init__", "(", "self", ",", "k_classes", ",", "context", "=", "mx", ".", "cpu", "(", ")", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "k_classes", "=", "k_classes", "\n", "\n", "self", ".", "context", "=", "context", "\n", "self", ".", "base_learning_rate", "=", "1e-3", "\n", "\n"]], "home.repos.pwc.inspect_result.matthewbehrend_BNC.adaptation_methods.base_model.BaseEncoderClass.classifierHead": [[16, 31], ["mxnet.gluon.nn.Sequential", "mxnet.gluon.nn.Sequential.name_scope", "mxnet.gluon.nn.Sequential.add", "mxnet.gluon.nn.Sequential.add", "mxnet.gluon.nn.Sequential.add", "mxnet.gluon.nn.Sequential.add", "mxnet.gluon.nn.Sequential.add", "mxnet.gluon.nn.Sequential.add", "mxnet.gluon.nn.Flatten", "mxnet.gluon.nn.Dense", "mxnet.gluon.nn.LeakyReLU", "mxnet.gluon.nn.BatchNorm", "mxnet.gluon.nn.Dropout", "mxnet.gluon.nn.Dense"], "methods", ["None"], ["", "def", "classifierHead", "(", "self", ")", ":", "\n", "        ", "net", "=", "gluon", ".", "nn", ".", "Sequential", "(", ")", "\n", "lk", "=", "0.2", "\n", "with", "net", ".", "name_scope", "(", ")", ":", "\n", "            ", "net", ".", "add", "(", "gluon", ".", "nn", ".", "Flatten", "(", ")", ")", "\n", "\n", "# fully connected layer 1", "\n", "net", ".", "add", "(", "gluon", ".", "nn", ".", "Dense", "(", "512", ")", ")", "\n", "net", ".", "add", "(", "gluon", ".", "nn", ".", "LeakyReLU", "(", "lk", ")", ")", "\n", "net", ".", "add", "(", "gluon", ".", "nn", ".", "BatchNorm", "(", "axis", "=", "1", ",", "center", "=", "True", ",", "scale", "=", "True", ")", ")", "\n", "net", ".", "add", "(", "gluon", ".", "nn", ".", "Dropout", "(", ".5", ")", ")", "\n", "\n", "# fully conected layer 2", "\n", "net", ".", "add", "(", "gluon", ".", "nn", ".", "Dense", "(", "self", ".", "k_classes", ")", ")", "\n", "", "return", "net", "\n", "\n"]], "home.repos.pwc.inspect_result.matthewbehrend_BNC.adaptation_methods.base_model.BaseEncoderClass.addBatchNorm": [[32, 36], ["net.add", "mxnet.gluon.nn.BatchNorm"], "methods", ["None"], ["", "def", "addBatchNorm", "(", "self", ",", "net", ")", ":", "\n", "# for normalizing the classification layer", "\n", "        ", "net", ".", "add", "(", "gluon", ".", "nn", ".", "BatchNorm", "(", "axis", "=", "1", ",", "center", "=", "True", ",", "scale", "=", "False", ")", ")", "\n", "return", "net", "\n", "\n"]], "home.repos.pwc.inspect_result.matthewbehrend_BNC.adaptation_methods.base_model.BaseEncoderClass.addSoftmax": [[37, 40], ["net.add", "mxnet.gluon.nn.Lambda"], "methods", ["None"], ["", "def", "addSoftmax", "(", "self", ",", "net", ")", ":", "\n", "        ", "net", ".", "add", "(", "gluon", ".", "nn", ".", "Lambda", "(", "'log_softmax'", ")", ")", "\n", "return", "net", "\n", "\n"]], "home.repos.pwc.inspect_result.matthewbehrend_BNC.adaptation_methods.base_model.BaseEncoderClass.crossEntropy": [[41, 43], ["mxnet.nd.sum"], "methods", ["None"], ["", "def", "crossEntropy", "(", "self", ",", "p", ",", "log_q", ")", ":", "\n", "        ", "return", "-", "nd", ".", "sum", "(", "p", "*", "log_q", ",", "axis", "=", "1", ",", "keepdims", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.matthewbehrend_BNC.adaptation_methods.base_model.BaseEncoderClass.lossBetaSequence": [[44, 47], ["mxnet.nd.sum", "mxnet.nd.log", "mxnet.nd.exp"], "methods", ["None"], ["", "def", "lossBetaSequence", "(", "self", ",", "p", ",", "log_q", ")", ":", "\n", "        ", "tol", "=", "1e-5", "\n", "return", "-", "nd", ".", "sum", "(", "p", "*", "log_q", "+", "(", "1", "-", "p", ")", "*", "nd", ".", "log", "(", "tol", "+", "1", "-", "nd", ".", "exp", "(", "log_q", ")", ")", ",", "axis", "=", "1", ",", "keepdims", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.matthewbehrend_BNC.adaptation_methods.base_model.BaseEncoderClass.printDimensions": [[48, 56], ["range", "print", "print", "len", "net"], "methods", ["None"], ["", "def", "printDimensions", "(", "net", ",", "data_sample", ")", ":", "\n", "# print data dimensions at each layer", "\n", "        ", "x", "=", "data_sample", "\n", "layer_thick", "=", "3", "\n", "for", "i", "in", "range", "(", "len", "(", "net", ")", "//", "layer_thick", ")", ":", "\n", "            ", "print", "(", "'Layer '", ",", "i", "+", "1", ",", "' input shape '", ",", "x", ".", "shape", ")", "\n", "x", "=", "net", "[", "layer_thick", "*", "i", "]", "(", "x", ")", "\n", "", "print", "(", "'Output shape '", ",", "net", "(", "data_sample", ")", ".", "shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.matthewbehrend_BNC.adaptation_methods.base_model.BaseEncoderClass.initForTraining": [[57, 66], ["base_model.DomainAccuracyTester", "enumerate", "base_model.BaseEncoderClass.initTrainer"], "methods", ["home.repos.pwc.inspect_result.matthewbehrend_BNC.adaptation_methods.adapt_BNC_inspect_distributions.BNCInspect.initTrainer"], ["", "def", "initForTraining", "(", "self", ",", "source_data_loader", ",", "target_data_loader", ")", ":", "\n", "        ", "adapt_data_loaders", "=", "{", "'source'", ":", "source_data_loader", ".", "train", ",", "'target'", ":", "target_data_loader", ".", "train", "}", "\n", "\n", "domainTests", "=", "DomainAccuracyTester", "(", "source_data_loader", ",", "target_data_loader", ")", "\n", "\n", "for", "i", ",", "(", "data", ",", "label", ")", "in", "enumerate", "(", "source_data_loader", ".", "test", ")", ":", "\n", "            ", "self", ".", "initTrainer", "(", "data", ")", "\n", "break", "\n", "", "return", "adapt_data_loaders", ",", "domainTests", "\n", "\n"]], "home.repos.pwc.inspect_result.matthewbehrend_BNC.adaptation_methods.base_model.BaseEncoderClass.initTrainer": [[67, 70], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "initTrainer", "(", "self", ",", "data_sample", ")", ":", "\n", "        ", "pass", "\n", "", "@", "abstractmethod", "\n"]], "home.repos.pwc.inspect_result.matthewbehrend_BNC.adaptation_methods.base_model.BaseEncoderClass.trainOptimization": [[70, 73], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "trainOptimization", "(", "self", ",", "data_loader", ",", "n_epochs", ",", "domainTests", ")", ":", "\n", "        ", "pass", "\n", "", "@", "abstractmethod", "\n"]], "home.repos.pwc.inspect_result.matthewbehrend_BNC.adaptation_methods.base_model.BaseEncoderClass.trainSequence": [[73, 76], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "trainSequence", "(", "self", ",", "source_data_loader", ",", "target_data_loader", ",", "epochs", ")", ":", "\n", "        ", "pass", "\n", "", "@", "abstractmethod", "\n"]], "home.repos.pwc.inspect_result.matthewbehrend_BNC.adaptation_methods.base_model.BaseEncoderClass.model": [[76, 79], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "model", "(", "self", ",", "data", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.matthewbehrend_BNC.adaptation_methods.base_model.TrainerTraceLog.__init__": [[82, 89], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "epoch", "=", "[", "]", "\n", "self", ".", "n_data_points", "=", "[", "]", "\n", "self", ".", "source_accuracy", "=", "[", "]", "# source-domain accuracy is valid for digits dataset that have train/test splits. OfficeHome is only split by domain, so the source-domain accuracy is just the training accuracy", "\n", "self", ".", "target_accuracy", "=", "[", "]", "\n", "self", ".", "avg_batch_loss", "=", "[", "]", "\n", "self", ".", "train_accuracy", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.matthewbehrend_BNC.adaptation_methods.base_model.TrainerTraceLog.logPerformanceData": [[90, 99], ["accuracyTester.testAllDomains", "base_model.TrainerTraceLog.source_accuracy.append", "base_model.TrainerTraceLog.target_accuracy.append", "base_model.TrainerTraceLog.train_accuracy.append", "base_model.TrainerTraceLog.epoch.append", "base_model.TrainerTraceLog.n_data_points.append", "base_model.TrainerTraceLog.avg_batch_loss.append", "base_model.TrainerTraceLog.printLatest"], "methods", ["home.repos.pwc.inspect_result.matthewbehrend_BNC.adaptation_methods.base_model.DomainAccuracyTester.testAllDomains", "home.repos.pwc.inspect_result.matthewbehrend_BNC.adaptation_methods.base_model.TrainerTraceLog.append", "home.repos.pwc.inspect_result.matthewbehrend_BNC.adaptation_methods.base_model.TrainerTraceLog.append", "home.repos.pwc.inspect_result.matthewbehrend_BNC.adaptation_methods.base_model.TrainerTraceLog.append", "home.repos.pwc.inspect_result.matthewbehrend_BNC.adaptation_methods.base_model.TrainerTraceLog.append", "home.repos.pwc.inspect_result.matthewbehrend_BNC.adaptation_methods.base_model.TrainerTraceLog.append", "home.repos.pwc.inspect_result.matthewbehrend_BNC.adaptation_methods.base_model.TrainerTraceLog.append", "home.repos.pwc.inspect_result.matthewbehrend_BNC.adaptation_methods.base_model.TrainerTraceLog.printLatest"], ["", "def", "logPerformanceData", "(", "self", ",", "adapt_method_obj", ",", "accuracyTester", ",", "epoch", ",", "n_data_points", ",", "avg_batch_loss", ",", "measure_overfit", "=", "True", ")", ":", "\n", "        ", "acc_source", ",", "acc_target", ",", "acc_train", "=", "accuracyTester", ".", "testAllDomains", "(", "adapt_method_obj", ",", "measure_overfit", ")", "\n", "self", ".", "source_accuracy", ".", "append", "(", "acc_source", ")", "\n", "self", ".", "target_accuracy", ".", "append", "(", "acc_target", ")", "\n", "self", ".", "train_accuracy", ".", "append", "(", "acc_train", ")", "\n", "self", ".", "epoch", ".", "append", "(", "epoch", ")", "\n", "self", ".", "n_data_points", ".", "append", "(", "n_data_points", ")", "\n", "self", ".", "avg_batch_loss", ".", "append", "(", "avg_batch_loss", ")", "\n", "self", ".", "printLatest", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.matthewbehrend_BNC.adaptation_methods.base_model.TrainerTraceLog.printLatest": [[100, 105], ["print"], "methods", ["None"], ["", "def", "printLatest", "(", "self", ")", ":", "\n", "        ", "print", "(", "\"SrcAcc %0.2f, TarAcc %0.2f, Epoch %s Npts %s. TrainAcc %0.2f, loss %0.2f\"", "%", "\n", "(", "self", ".", "source_accuracy", "[", "-", "1", "]", ",", "self", ".", "target_accuracy", "[", "-", "1", "]", ",", "\n", "self", ".", "epoch", "[", "-", "1", "]", ",", "self", ".", "n_data_points", "[", "-", "1", "]", ",", "\n", "self", ".", "train_accuracy", "[", "-", "1", "]", ",", "self", ".", "avg_batch_loss", "[", "-", "1", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.matthewbehrend_BNC.adaptation_methods.base_model.TrainerTraceLog.append": [[106, 113], ["None"], "methods", ["None"], ["", "def", "append", "(", "self", ",", "x", ")", ":", "\n", "        ", "self", ".", "epoch", "=", "self", ".", "epoch", "+", "x", ".", "epoch", "\n", "self", ".", "n_data_points", "=", "self", ".", "n_data_points", "+", "x", ".", "n_data_points", "\n", "self", ".", "source_accuracy", "=", "self", ".", "source_accuracy", "+", "x", ".", "source_accuracy", "\n", "self", ".", "target_accuracy", "=", "self", ".", "target_accuracy", "+", "x", ".", "target_accuracy", "\n", "self", ".", "train_accuracy", "=", "self", ".", "train_accuracy", "+", "x", ".", "train_accuracy", "\n", "self", ".", "avg_batch_loss", "=", "self", ".", "avg_batch_loss", "+", "x", ".", "avg_batch_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.matthewbehrend_BNC.adaptation_methods.base_model.TrainerTraceLog.stack": [[114, 121], ["None"], "methods", ["None"], ["", "def", "stack", "(", "self", ",", "x", ")", ":", "\n", "        ", "self", ".", "epoch", "=", "self", ".", "epoch", "+", "[", "x", ".", "epoch", "]", "\n", "self", ".", "n_data_points", "=", "self", ".", "n_data_points", "+", "[", "x", ".", "n_data_points", "]", "\n", "self", ".", "source_accuracy", "=", "self", ".", "source_accuracy", "+", "[", "x", ".", "source_accuracy", "]", "\n", "self", ".", "target_accuracy", "=", "self", ".", "target_accuracy", "+", "[", "x", ".", "target_accuracy", "]", "\n", "self", ".", "train_accuracy", "=", "self", ".", "train_accuracy", "+", "[", "x", ".", "train_accuracy", "]", "\n", "self", ".", "avg_batch_loss", "=", "self", ".", "avg_batch_loss", "+", "[", "x", ".", "avg_batch_loss", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.matthewbehrend_BNC.adaptation_methods.base_model.TrainerTraceLog.saveRawDataToXLSX": [[122, 155], ["xlsxwriter.Workbook", "range", "base_model.TrainerTraceLog.findLastMin", "xlsxwriter.Workbook.add_worksheet", "xlsxwriter.Workbook.add_worksheet.write_column", "xlsxwriter.Workbook.add_worksheet.write_column", "xlsxwriter.Workbook.close", "len", "xlsxwriter.Workbook.add_worksheet", "numpy.array", "range", "numpy.asarray", "numpy.asarray", "numpy.array", "numpy.array", "numpy.mean", "numpy.std", "numpy.mean", "numpy.std", "numpy.mean", "numpy.std", "getattr", "xlsxwriter.Workbook.add_worksheet.write_column", "numpy.mean", "numpy.std", "numpy.mean", "numpy.std", "numpy.mean", "numpy.std", "numpy.mean", "numpy.std", "trace[].tolist"], "methods", ["home.repos.pwc.inspect_result.matthewbehrend_BNC.adaptation_methods.base_model.TrainerTraceLog.findLastMin"], ["", "def", "saveRawDataToXLSX", "(", "self", ",", "file_name", ")", ":", "\n", "        ", "workbook", "=", "xlsxwriter", ".", "Workbook", "(", "file_name", ")", "\n", "\n", "# Create worksheets", "\n", "attr_list", "=", "[", "'epoch'", ",", "'n_data_points'", ",", "'source_accuracy'", ",", "'target_accuracy'", ",", "'train_accuracy'", ",", "'avg_batch_loss'", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "attr_list", ")", ")", ":", "\n", "            ", "worksheet", "=", "workbook", ".", "add_worksheet", "(", "attr_list", "[", "i", "]", ")", "\n", "\n", "trace", "=", "np", ".", "array", "(", "getattr", "(", "self", ",", "attr_list", "[", "i", "]", ")", ")", "\n", "for", "col_num", "in", "range", "(", "trace", ".", "shape", "[", "1", "]", ")", ":", "\n", "                ", "worksheet", ".", "write_column", "(", "0", ",", "col_num", ",", "trace", "[", ":", ",", "col_num", "]", ".", "tolist", "(", ")", ")", "\n", "\n", "# Model performance at the completion of source-domain training", "\n", "", "", "idx", "=", "self", ".", "findLastMin", "(", "self", ".", "epoch", "[", "0", "]", ")", "\n", "source_only_tgt", "=", "np", ".", "asarray", "(", "self", ".", "target_accuracy", ")", "[", ":", ",", "idx", "]", "\n", "source_only_src", "=", "np", ".", "asarray", "(", "self", ".", "source_accuracy", ")", "[", ":", ",", "idx", "]", "\n", "\n", "# Model performance after the adaptation phase is complete", "\n", "# Record acuracy in both domains to also assess forgetting of the source domain", "\n", "worksheet", "=", "workbook", ".", "add_worksheet", "(", "'final_accuracy'", ")", "\n", "tgt", "=", "np", ".", "array", "(", "self", ".", "target_accuracy", ")", "[", ":", ",", "-", "1", "]", "# final adaptation epoch", "\n", "src", "=", "np", ".", "array", "(", "self", ".", "source_accuracy", ")", "[", ":", ",", "-", "1", "]", "# final adaptation epoch", "\n", "\n", "worksheet", ".", "write_column", "(", "0", ",", "0", ",", "[", "'adapted_accuracy_tgt_mu'", ",", "'adapted_accuracy_tgt_std'", ",", "'adapted_accuracy_src_mu'", ",", "'adapted_accuracy_src_std'", ",", "\n", "'src_only_accuracy_tgt_mu'", ",", "'src_only_accuracy_tgt_std'", ",", "'src_only_accuracy_src_mu'", ",", "'src_only_accuracy_src_std'", "]", ")", "\n", "worksheet", ".", "write_column", "(", "0", ",", "1", ",", "[", "np", ".", "mean", "(", "tgt", ")", ",", "np", ".", "std", "(", "tgt", ",", "ddof", "=", "1", ")", ",", "np", ".", "mean", "(", "src", ")", ",", "np", ".", "std", "(", "src", ",", "ddof", "=", "1", ")", ",", "\n", "np", ".", "mean", "(", "source_only_tgt", ")", ",", "np", ".", "std", "(", "source_only_tgt", ",", "ddof", "=", "1", ")", ",", "np", ".", "mean", "(", "source_only_src", ")", ",", "np", ".", "std", "(", "source_only_src", ",", "ddof", "=", "1", ")", "]", ")", "\n", "workbook", ".", "close", "(", ")", "\n", "\n", "summary_metrics", "=", "{", "'adapted_acc'", ":", "np", ".", "mean", "(", "tgt", ")", ",", "'adapted_std'", ":", "np", ".", "std", "(", "tgt", ",", "ddof", "=", "1", ")", ",", "\n", "'source_only'", ":", "np", ".", "mean", "(", "source_only_tgt", ")", ",", "'source_std'", ":", "np", ".", "std", "(", "source_only_tgt", ",", "ddof", "=", "1", ")", ",", "\n", "'limit'", ":", "np", ".", "mean", "(", "source_only_src", ")", ",", "'limit_std'", ":", "np", ".", "std", "(", "source_only_src", ",", "ddof", "=", "1", ")", "}", "\n", "return", "summary_metrics", "\n", "\n"]], "home.repos.pwc.inspect_result.matthewbehrend_BNC.adaptation_methods.base_model.TrainerTraceLog.findLastMin": [[156, 160], ["numpy.asarray", "len", "numpy.argmin"], "methods", ["None"], ["", "def", "findLastMin", "(", "self", ",", "x", ")", ":", "\n", "        ", "rev_x", "=", "np", ".", "asarray", "(", "x", "[", ":", ":", "-", "1", "]", ")", "\n", "i", "=", "len", "(", "rev_x", ")", "-", "np", ".", "argmin", "(", "rev_x", ")", "-", "1", "\n", "return", "i", "\n", "\n"]], "home.repos.pwc.inspect_result.matthewbehrend_BNC.adaptation_methods.base_model.DomainAccuracyTester.__init__": [[163, 168], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "source_dataset", ",", "target_dataset", ")", ":", "\n", "\n", "        ", "self", ".", "source_train", "=", "source_dataset", ".", "train", "# for measuring overfitting of the data", "\n", "self", ".", "source", "=", "source_dataset", ".", "test", "\n", "self", ".", "target", "=", "target_dataset", ".", "test", "\n", "\n"]], "home.repos.pwc.inspect_result.matthewbehrend_BNC.adaptation_methods.base_model.DomainAccuracyTester.testAllDomains": [[169, 178], ["base_model.DomainAccuracyTester.evaluate_accuracy", "base_model.DomainAccuracyTester.evaluate_accuracy", "base_model.DomainAccuracyTester.evaluate_accuracy"], "methods", ["home.repos.pwc.inspect_result.matthewbehrend_BNC.adaptation_methods.base_model.DomainAccuracyTester.evaluate_accuracy", "home.repos.pwc.inspect_result.matthewbehrend_BNC.adaptation_methods.base_model.DomainAccuracyTester.evaluate_accuracy", "home.repos.pwc.inspect_result.matthewbehrend_BNC.adaptation_methods.base_model.DomainAccuracyTester.evaluate_accuracy"], ["", "def", "testAllDomains", "(", "self", ",", "adapt_method_obj", ",", "measure_overfit", ")", ":", "\n", "        ", "avg_accuracy_source", ",", "avg_c_max_source", "=", "DomainAccuracyTester", ".", "evaluate_accuracy", "(", "self", ".", "source", ",", "adapt_method_obj", ".", "model", ",", "adapt_method_obj", ".", "k_classes", ")", "\n", "avg_accuracy_target", ",", "avg_c_max_target", "=", "DomainAccuracyTester", ".", "evaluate_accuracy", "(", "self", ".", "target", ",", "adapt_method_obj", ".", "model", ",", "adapt_method_obj", ".", "k_classes", ")", "\n", "\n", "avg_accuracy_training", "=", "0", "\n", "if", "(", "measure_overfit", ")", ":", "\n", "            ", "avg_accuracy_training", ",", "avg_c_max_training", "=", "DomainAccuracyTester", ".", "evaluate_accuracy", "(", "self", ".", "source_train", ",", "adapt_method_obj", ".", "model", ",", "adapt_method_obj", ".", "k_classes", ")", "\n", "\n", "", "return", "avg_accuracy_source", ",", "avg_accuracy_target", ",", "avg_accuracy_training", "\n", "\n"]], "home.repos.pwc.inspect_result.matthewbehrend_BNC.adaptation_methods.base_model.DomainAccuracyTester.evaluate_accuracy": [[179, 202], ["enumerate", "mxnet.nd.exp().mean().asscalar", "data.as_in_context.as_in_context.as_in_context", "label.as_in_context.as_in_context.as_in_context", "model", "mxnet.nd.sum", "len", "mxnet.cpu", "mxnet.cpu", "mxnet.nd.exp().mean", "mxnet.nd.argmax().astype", "label.as_in_context.as_in_context.astype", "mxnet.nd.exp", "mxnet.nd.max", "mxnet.nd.argmax"], "methods", ["home.repos.pwc.inspect_result.matthewbehrend_BNC.adaptation_methods.adapt_BNC_inspect_distributions.BNCInspect.model"], ["", "def", "evaluate_accuracy", "(", "data_loader", ",", "model", ",", "kclasses", ")", ":", "\n", "\n", "        ", "if", "(", "data_loader", "==", "None", ")", ":", "\n", "            ", "return", "(", "0", ",", "0", ")", "\n", "\n", "", "n_accum", "=", "0.0", "\n", "accuracy_accum", "=", "0.0", "\n", "\n", "for", "i", ",", "(", "data", ",", "label", ")", "in", "enumerate", "(", "data_loader", ")", ":", "\n", "            ", "data", "=", "data", ".", "as_in_context", "(", "mx", ".", "cpu", "(", ")", ")", "\n", "label", "=", "label", ".", "as_in_context", "(", "mx", ".", "cpu", "(", ")", ")", "\n", "\n", "log_c", "=", "model", "(", "data", ")", "\n", "\n", "# standard practice classification accuracy", "\n", "accuracy", "=", "(", "nd", ".", "argmax", "(", "log_c", ",", "axis", "=", "1", ")", ".", "astype", "(", "'int32'", ")", "==", "label", ".", "astype", "(", "'int32'", ")", ")", ".", "astype", "(", "'float32'", ")", "\n", "\n", "accuracy_accum", "+=", "nd", ".", "sum", "(", "accuracy", ")", "\n", "n_accum", "+=", "len", "(", "label", ")", "\n", "\n", "", "avg_accuracy", "=", "(", "accuracy_accum", "/", "n_accum", ")", ".", "asscalar", "(", ")", "\n", "avg_c_max", "=", "nd", ".", "exp", "(", "nd", ".", "max", "(", "log_c", ",", "axis", "=", "1", ")", ")", ".", "mean", "(", ")", ".", "asscalar", "(", ")", "# maximum value in classification vector      ", "\n", "return", "(", "avg_accuracy", ",", "avg_c_max", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.matthewbehrend_BNC.adaptation_methods.adapt_BNC_inspect_distributions.BNCInspect.__init__": [[9, 18], ["adaptation_methods.adapt_BNC.BNC.__init__", "adapt_BNC_inspect_distributions.BNCInspect.classifierHead", "adapt_BNC_inspect_distributions.BNCInspect.addBatchNorm", "adapt_BNC_inspect_distributions.BNCInspect.classifierNet.initialize", "adapt_BNC_inspect_distributions.BNCInspect.bnNet.initialize", "mxnet.gluon.nn.Sequential", "mxnet.init.Normal", "mxnet.init.Normal"], "methods", ["home.repos.pwc.inspect_result.matthewbehrend_BNC.dataset_loading.load_datasets.OfficeHomeDatasets.__init__", "home.repos.pwc.inspect_result.matthewbehrend_BNC.adaptation_methods.base_model.BaseEncoderClass.classifierHead", "home.repos.pwc.inspect_result.matthewbehrend_BNC.adaptation_methods.base_model.BaseEncoderClass.addBatchNorm"], ["    ", "def", "__init__", "(", "self", ",", "k_classes", ",", "context", ",", "bypassbn", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "k_classes", ",", "context", ")", "\n", "self", ".", "bypassbn", "=", "bypassbn", "\n", "\n", "# Build classification network", "\n", "self", ".", "classifierNet", "=", "self", ".", "classifierHead", "(", ")", "\n", "self", ".", "bnNet", "=", "self", ".", "addBatchNorm", "(", "gluon", ".", "nn", ".", "Sequential", "(", ")", ")", "\n", "self", ".", "classifierNet", ".", "initialize", "(", "mx", ".", "init", ".", "Normal", "(", "0.02", ")", ",", "ctx", "=", "self", ".", "context", ")", "\n", "self", ".", "bnNet", ".", "initialize", "(", "mx", ".", "init", ".", "Normal", "(", "0.02", ")", ",", "ctx", "=", "self", ".", "context", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.matthewbehrend_BNC.adaptation_methods.adapt_BNC_inspect_distributions.BNCInspect.initTrainer": [[19, 23], ["adapt_BNC_inspect_distributions.BNCInspect.model", "mxnet.gluon.Trainer", "mxnet.gluon.Trainer", "adapt_BNC_inspect_distributions.BNCInspect.classifierNet.collect_params", "adapt_BNC_inspect_distributions.BNCInspect.bnNet.collect_params"], "methods", ["home.repos.pwc.inspect_result.matthewbehrend_BNC.adaptation_methods.adapt_BNC_inspect_distributions.BNCInspect.model"], ["", "def", "initTrainer", "(", "self", ",", "data_sample", ")", ":", "\n", "        ", "self", ".", "model", "(", "data_sample", ")", "\n", "self", ".", "classifier_trainer", "=", "gluon", ".", "Trainer", "(", "self", ".", "classifierNet", ".", "collect_params", "(", ")", ",", "'adam'", ",", "{", "'learning_rate'", ":", "self", ".", "base_learning_rate", "}", ")", "\n", "self", ".", "bn_trainer", "=", "gluon", ".", "Trainer", "(", "self", ".", "bnNet", ".", "collect_params", "(", ")", ",", "'adam'", ",", "{", "'learning_rate'", ":", "self", ".", "base_learning_rate", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.matthewbehrend_BNC.adaptation_methods.adapt_BNC_inspect_distributions.BNCInspect.stepTrainer": [[24, 28], ["adapt_BNC_inspect_distributions.BNCInspect.classifier_trainer.step", "adapt_BNC_inspect_distributions.BNCInspect.bn_trainer.step"], "methods", ["None"], ["", "def", "stepTrainer", "(", "self", ")", ":", "\n", "        ", "self", ".", "classifier_trainer", ".", "step", "(", "1", ")", "\n", "if", "(", "not", "self", ".", "bypassbn", ")", ":", "\n", "            ", "self", ".", "bn_trainer", ".", "step", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.matthewbehrend_BNC.adaptation_methods.adapt_BNC_inspect_distributions.BNCInspect.log_softmax": [[29, 31], ["mxnet.nd.log_softmax"], "methods", ["home.repos.pwc.inspect_result.matthewbehrend_BNC.adaptation_methods.adapt_BNC_inspect_distributions.BNCInspect.log_softmax"], ["", "", "def", "log_softmax", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "nd", ".", "log_softmax", "(", "x", ",", "axis", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.matthewbehrend_BNC.adaptation_methods.adapt_BNC_inspect_distributions.BNCInspect.model": [[32, 37], ["adapt_BNC_inspect_distributions.BNCInspect.log_softmax", "adapt_BNC_inspect_distributions.BNCInspect.log_softmax", "adapt_BNC_inspect_distributions.BNCInspect.classifierNet", "adapt_BNC_inspect_distributions.BNCInspect.bnNet", "adapt_BNC_inspect_distributions.BNCInspect.classifierNet"], "methods", ["home.repos.pwc.inspect_result.matthewbehrend_BNC.adaptation_methods.adapt_BNC_inspect_distributions.BNCInspect.log_softmax", "home.repos.pwc.inspect_result.matthewbehrend_BNC.adaptation_methods.adapt_BNC_inspect_distributions.BNCInspect.log_softmax"], ["", "def", "model", "(", "self", ",", "data", ")", ":", "\n", "        ", "if", "(", "self", ".", "bypassbn", ")", ":", "\n", "            ", "return", "self", ".", "log_softmax", "(", "self", ".", "classifierNet", "(", "data", ")", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "log_softmax", "(", "self", ".", "bnNet", "(", "self", ".", "classifierNet", "(", "data", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.matthewbehrend_BNC.adaptation_methods.adapt_BNC_inspect_distributions.BNCInspect.get_softmax_input_all_data": [[38, 44], ["adapt_BNC_inspect_distributions.BNCInspect.asnumpy", "adapt_BNC_inspect_distributions.BNCInspect.classifierNet", "adapt_BNC_inspect_distributions.BNCInspect.bnNet", "adapt_BNC_inspect_distributions.BNCInspect.classifierNet"], "methods", ["None"], ["", "", "def", "get_softmax_input_all_data", "(", "self", ",", "data", ")", ":", "\n", "        ", "if", "(", "self", ".", "bypassbn", ")", ":", "\n", "            ", "softmax_input", "=", "self", ".", "classifierNet", "(", "data", ")", "\n", "", "else", ":", "\n", "            ", "softmax_input", "=", "self", ".", "bnNet", "(", "self", ".", "classifierNet", "(", "data", ")", ")", "\n", "", "return", "softmax_input", ".", "asnumpy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.matthewbehrend_BNC.adaptation_methods.adapt_BNC_inspect_distributions.BNCInspect.get_fc_output_all_data": [[45, 48], ["adapt_BNC_inspect_distributions.BNCInspect.classifierNet", "adapt_BNC_inspect_distributions.BNCInspect.asnumpy"], "methods", ["None"], ["", "def", "get_fc_output_all_data", "(", "self", ",", "data", ")", ":", "\n", "        ", "fc_output", "=", "self", ".", "classifierNet", "(", "data", ")", "\n", "return", "fc_output", ".", "asnumpy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.matthewbehrend_BNC.adaptation_methods.adapt_BNC_inspect_distributions.BNCInspect.get_fc_tensor_all_data": [[49, 56], ["adapt_BNC_inspect_distributions.BNCInspect.classifierNet.collect_params().keys", "[].data().asnumpy().flatten", "len", "adapt_BNC_inspect_distributions.BNCInspect.classifierNet.collect_params", "[].data().asnumpy", "[].data", "adapt_BNC_inspect_distributions.BNCInspect.classifierNet.collect_params"], "methods", ["None"], ["", "def", "get_fc_tensor_all_data", "(", "self", ",", "data", ")", ":", "\n", "# print(self.classifierNet.collect_params())", "\n", "        ", "layer_keys", "=", "self", ".", "classifierNet", ".", "collect_params", "(", ")", ".", "keys", "(", ")", "\n", "L1_weight_key", "=", "[", "a", "for", "a", "in", "layer_keys", "if", "'_dense1_weight'", "in", "a", "]", "\n", "if", "(", "len", "(", "L1_weight_key", ")", "!=", "1", ")", ":", "\n", "            ", "return", "None", "\n", "", "return", "self", ".", "classifierNet", ".", "collect_params", "(", ")", "[", "L1_weight_key", "[", "0", "]", "]", ".", "data", "(", ")", ".", "asnumpy", "(", ")", ".", "flatten", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.matthewbehrend_BNC.dataset_loading.dataset.DatasetGroup.__init__": [[6, 15], ["os.path.join", "dataset.DatasetGroup.download", "os.getcwd"], "methods", ["home.repos.pwc.inspect_result.matthewbehrend_BNC.dataset_loading.officehome.OfficeHome.download"], ["    ", "def", "__init__", "(", "self", ",", "name", ",", "path", "=", "None", ",", "download", "=", "True", ")", ":", "\n", "        ", "self", ".", "name", "=", "name", "\n", "self", ".", "train", "=", "None", "\n", "self", ".", "test", "=", "None", "\n", "if", "path", "is", "None", ":", "\n", "            ", "path", "=", "os", ".", "path", ".", "join", "(", "os", ".", "getcwd", "(", ")", ",", "'data'", ")", "\n", "", "self", ".", "path", "=", "path", "\n", "if", "download", ":", "\n", "            ", "self", ".", "download", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.matthewbehrend_BNC.dataset_loading.dataset.DatasetGroup.makeDomainDatasetLoader": [[16, 19], ["mxnet.gluon.data.DataLoader", "mxnet.gluon.data.DataLoader"], "methods", ["None"], ["", "", "def", "makeDomainDatasetLoader", "(", "self", ",", "array_dataset_train", ",", "array_dataset_test", ",", "batch_size", ")", ":", "\n", "            ", "self", ".", "train", "=", "DataLoader", "(", "array_dataset_train", ",", "batch_size", ",", "shuffle", "=", "True", ",", "last_batch", "=", "'keep'", ")", "\n", "self", ".", "test", "=", "DataLoader", "(", "array_dataset_test", ",", "batch_size", ",", "shuffle", "=", "False", ",", "last_batch", "=", "'keep'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.matthewbehrend_BNC.dataset_loading.dataset.DatasetGroup.get_path": [[20, 22], ["os.path.join"], "methods", ["None"], ["", "def", "get_path", "(", "self", ",", "*", "args", ")", ":", "\n", "        ", "return", "os", ".", "path", ".", "join", "(", "self", ".", "path", ",", "self", ".", "name", ",", "*", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.matthewbehrend_BNC.dataset_loading.dataset.DatasetGroup.download": [[23, 30], ["None"], "methods", ["None"], ["", "def", "download", "(", "self", ")", ":", "\n", "        ", "\"\"\"Download the dataset(s).\n\n        This method only performs the download if necessary. If the dataset\n        already resides on disk, it is a no-op.\n        \"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.matthewbehrend_BNC.dataset_loading.dataset.DatasetGroup.reSample": [[31, 33], ["None"], "methods", ["None"], ["", "def", "reSample", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.matthewbehrend_BNC.dataset_loading.dataset.register_dataset": [[38, 43], ["None"], "function", ["None"], ["def", "register_dataset", "(", "name", ")", ":", "\n", "    ", "def", "decorator", "(", "cls", ")", ":", "\n", "        ", "datasets", "[", "name", "]", "=", "cls", "\n", "return", "cls", "\n", "", "return", "decorator", "\n", "\n"]], "home.repos.pwc.inspect_result.matthewbehrend_BNC.dataset_loading.dataset.get_dataset": [[45, 47], ["None"], "function", ["None"], ["", "def", "get_dataset", "(", "name", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "return", "datasets", "[", "name", "]", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.matthewbehrend_BNC.dataset_loading.officehome.OfficeHome.__init__": [[22, 32], ["dataset_loading.dataset.DatasetGroup.__init__", "officehome.OfficeHome._load_datasets"], "methods", ["home.repos.pwc.inspect_result.matthewbehrend_BNC.dataset_loading.load_datasets.OfficeHomeDatasets.__init__", "home.repos.pwc.inspect_result.matthewbehrend_BNC.dataset_loading.officehome.OfficeHome._load_datasets"], ["def", "__init__", "(", "self", ",", "subtype", ",", "path", "=", "None", ",", "shuffle", "=", "True", ",", "extractor", "=", "None", ")", ":", "\n", "        ", "DatasetGroup", ".", "__init__", "(", "self", ",", "'officehome'", ",", "path", "=", "path", ")", "\n", "\n", "self", ".", "final_image_shape", "=", "(", "3", ",", "224", ",", "224", ")", "\n", "self", ".", "extractor", "=", "extractor", "\n", "self", ".", "subtype", "=", "subtype", "# the domain", "\n", "self", ".", "train_on_extra", "=", "False", "# disabled", "\n", "self", ".", "label_shape", "=", "(", ")", "\n", "self", ".", "shuffle", "=", "shuffle", "\n", "self", ".", "_load_datasets", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.matthewbehrend_BNC.dataset_loading.officehome.OfficeHome.download": [[33, 40], ["officehome.OfficeHome.get_path", "os.path.exists", "print", "print", "print", "print"], "methods", ["home.repos.pwc.inspect_result.matthewbehrend_BNC.dataset_loading.dataset.DatasetGroup.get_path"], ["", "def", "download", "(", "self", ")", ":", "\n", "        ", "data_dir", "=", "self", ".", "get_path", "(", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "data_dir", ")", ":", "\n", "            ", "print", "(", "\"Please download the OfficeHome dataset from https://drive.google.com/file/d/0B81rNlvomiwed0V1YUxQdC1uOTg/view\"", ")", "\n", "print", "(", "'Dataset homepage: https://www.hemanthdv.org/officeHomeDataset.html'", ")", "\n", "print", "(", "\"Extract contents of zip file to ./data/officehome\"", ")", "\n", "print", "(", "\"subfolders of ./data/officehome should be Art, Clipart, Product, Real World\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.matthewbehrend_BNC.dataset_loading.officehome.OfficeHome._load_datasets": [[41, 95], ["officehome.OfficeHome.get_path", "print", "next", "dict", "print", "numpy.zeros", "officehome.OfficeHome.index_to_class.keys", "mxnet.gluon.data.ArrayDataset", "mxnet.gluon.data.ArrayDataset", "os.walk", "zip", "os.path.join", "next", "numpy.zeros", "print", "enumerate", "print", "numpy.concatenate", "print", "print", "range", "officehome.OfficeHome.class_to_index.items", "os.walk", "numpy.ones", "os.path.join", "mxnet.image.imread", "officehome.OfficeHome.transform", "numpy.moveaxis", "print", "officehome.OfficeHome.extractor().asnumpy", "numpy.vstack", "len", "len", "len", "officehome.OfficeHome.extractor", "mxnet.nd.array"], "methods", ["home.repos.pwc.inspect_result.matthewbehrend_BNC.dataset_loading.dataset.DatasetGroup.get_path", "home.repos.pwc.inspect_result.matthewbehrend_BNC.dataset_loading.officehome.OfficeHome.transform"], ["", "", "def", "_load_datasets", "(", "self", ")", ":", "\n", "\n", "# load images for one of the four domains in OfficeHome", "\n", "        ", "domain_path", "=", "self", ".", "get_path", "(", "self", ".", "subtype", ")", "\n", "print", "(", "'Loading '", "+", "domain_path", ")", "\n", "\n", "# get the class folders", "\n", "_", ",", "dirnames", ",", "_", "=", "next", "(", "os", ".", "walk", "(", "domain_path", ",", "(", "None", ",", "None", ",", "[", "]", ")", ")", ")", "\n", "\n", "# class index/name dictionaries", "\n", "self", ".", "class_to_index", "=", "dict", "(", "zip", "(", "dirnames", ",", "range", "(", "len", "(", "dirnames", ")", ")", ")", ")", "\n", "self", ".", "index_to_class", "=", "{", "v", ":", "k", "for", "k", ",", "v", "in", "self", ".", "class_to_index", ".", "items", "(", ")", "}", "\n", "print", "(", "self", ".", "index_to_class", ")", "\n", "\n", "all_images", "=", "None", "\n", "all_labels", "=", "np", ".", "zeros", "(", "(", "0", ",", ")", ",", "dtype", "=", "'float32'", ")", "\n", "\n", "# Read image files in the domain", "\n", "for", "label", "in", "self", ".", "index_to_class", ".", "keys", "(", ")", ":", "\n", "            ", "class_path", "=", "os", ".", "path", ".", "join", "(", "domain_path", ",", "self", ".", "index_to_class", "[", "label", "]", ")", "\n", "_", ",", "_", ",", "filenames", "=", "next", "(", "os", ".", "walk", "(", "class_path", ",", "(", "None", ",", "None", ",", "[", "]", ")", ")", ")", "\n", "\n", "# initialize temporary variables", "\n", "new_labels", "=", "label", "*", "np", ".", "ones", "(", "(", "len", "(", "filenames", ")", ",", ")", ",", "dtype", "=", "'int32'", ")", "\n", "new_images", "=", "np", ".", "zeros", "(", "(", "len", "(", "filenames", ")", ",", ")", "+", "self", ".", "final_image_shape", ",", "dtype", "=", "'float32'", ")", "\n", "\n", "print", "(", "'reading class '", ",", "label", ")", "\n", "\n", "# Read images of the current class label", "\n", "for", "i", ",", "fn", "in", "enumerate", "(", "filenames", ")", ":", "\n", "                ", "image_path", "=", "os", ".", "path", ".", "join", "(", "class_path", ",", "fn", ")", "\n", "image", "=", "mx", ".", "image", ".", "imread", "(", "image_path", ")", "# RGB image data", "\n", "image", "=", "self", ".", "transform", "(", "image", ")", "\n", "new_images", "[", "i", ",", ":", ",", ":", ",", ":", "]", "=", "np", ".", "moveaxis", "(", "image", ",", "[", "3", "]", ",", "[", "1", "]", ")", "# rotate color axis 'iyxc->icyx'", "\n", "\n", "", "print", "(", "'images size'", ",", "new_images", ".", "shape", ")", "\n", "\n", "# Extract featutes, such as ResNet-50, if an extractor network was given", "\n", "if", "(", "self", ".", "extractor", "is", "not", "None", ")", ":", "\n", "                ", "print", "(", "'extracting features'", ")", "\n", "new_images", "=", "self", ".", "extractor", "(", "nd", ".", "array", "(", "new_images", ")", ")", ".", "asnumpy", "(", ")", "\n", "\n", "", "if", "(", "all_images", "is", "not", "None", ")", ":", "\n", "                ", "all_images", "=", "np", ".", "vstack", "(", "(", "all_images", ",", "new_images", ")", ")", "\n", "", "else", ":", "\n", "                ", "all_images", "=", "new_images", "\n", "", "all_labels", "=", "np", ".", "concatenate", "(", "(", "all_labels", ",", "new_labels", ")", ")", "\n", "\n", "print", "(", "'all images'", ",", "all_images", ".", "shape", ")", "\n", "print", "(", "'all labels'", ",", "all_labels", ".", "shape", ")", "\n", "\n", "# Note: OfficeHome is a domain adaptation dataset and has no train/test split within a domain", "\n", "", "self", ".", "train", "=", "ArrayDataset", "(", "all_images", ",", "all_labels", ")", "\n", "self", ".", "test", "=", "ArrayDataset", "(", "all_images", ",", "all_labels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.matthewbehrend_BNC.dataset_loading.officehome.OfficeHome.resampleSplit": [[96, 98], ["None"], "methods", ["None"], ["", "def", "resampleSplit", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.matthewbehrend_BNC.dataset_loading.officehome.OfficeHome.transform": [[99, 108], ["numpy.max", "mxnet.image.center_crop", "mxnet.image.imresize", "numpy.reshape", "numpy.reshape.astype().asnumpy", "numpy.reshape.astype"], "methods", ["None"], ["", "def", "transform", "(", "self", ",", "img", ")", ":", "\n", "        ", "w", "=", "np", ".", "max", "(", "img", ".", "shape", "[", "0", ":", "2", "]", ")", "# long edge size of image", "\n", "img", ",", "_", "=", "mx", ".", "image", ".", "center_crop", "(", "img", ",", "(", "w", ",", "w", ")", ",", "interp", "=", "2", ")", "# expand canvas to sqaure image", "\n", "\n", "s", "=", "self", ".", "final_image_shape", "[", "1", ":", "3", "]", "\n", "img", "=", "mx", ".", "image", ".", "imresize", "(", "img", ",", "s", "[", "0", "]", ",", "s", "[", "1", "]", ")", "\n", "img", "=", "img", ".", "astype", "(", "dtype", "=", "'float32'", ")", ".", "asnumpy", "(", ")", "/", "255", "\n", "img", "=", "np", ".", "reshape", "(", "img", ",", "(", "1", ",", ")", "+", "img", ".", "shape", ")", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.matthewbehrend_BNC.dataset_loading.officehome.OfficeHomeArt.__init__": [[111, 113], ["officehome.OfficeHome.__init__"], "methods", ["home.repos.pwc.inspect_result.matthewbehrend_BNC.dataset_loading.load_datasets.OfficeHomeDatasets.__init__"], ["    ", "def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "subtype", "=", "'Art'", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.matthewbehrend_BNC.dataset_loading.officehome.OfficeHomeClipart.__init__": [[116, 118], ["officehome.OfficeHome.__init__"], "methods", ["home.repos.pwc.inspect_result.matthewbehrend_BNC.dataset_loading.load_datasets.OfficeHomeDatasets.__init__"], ["    ", "def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "subtype", "=", "'Clipart'", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.matthewbehrend_BNC.dataset_loading.officehome.OfficeHomeProduct.__init__": [[121, 123], ["officehome.OfficeHome.__init__"], "methods", ["home.repos.pwc.inspect_result.matthewbehrend_BNC.dataset_loading.load_datasets.OfficeHomeDatasets.__init__"], ["    ", "def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "subtype", "=", "'Product'", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.matthewbehrend_BNC.dataset_loading.officehome.OfficeHomeReal.__init__": [[126, 128], ["officehome.OfficeHome.__init__"], "methods", ["home.repos.pwc.inspect_result.matthewbehrend_BNC.dataset_loading.load_datasets.OfficeHomeDatasets.__init__"], ["    ", "def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "subtype", "=", "'Real World'", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.matthewbehrend_BNC.dataset_loading.load_datasets.OfficeHomeDatasets.__init__": [[10, 24], ["print", "load_datasets.OfficeHomeDatasets.load", "os.path.exists", "load_datasets.OfficeHomeDatasets.readAndCacheData"], "methods", ["home.repos.pwc.inspect_result.matthewbehrend_BNC.dataset_loading.load_datasets.OfficeHomeDatasets.load", "home.repos.pwc.inspect_result.matthewbehrend_BNC.dataset_loading.load_datasets.OfficeHomeDatasets.readAndCacheData"], ["    ", "def", "__init__", "(", "self", ",", "useResNetFeatures", "=", "True", ",", "asdataloader", "=", "True", ")", ":", "\n", "        ", "self", ".", "k_classes", "=", "65", "\n", "self", ".", "useFeatures", "=", "useResNetFeatures", "\n", "print", "(", "'OfficeHome Dataset. classes: '", ",", "self", ".", "k_classes", ")", "\n", "\n", "if", "(", "self", ".", "useFeatures", ")", ":", "\n", "            ", "self", ".", "fn_cache", "=", "'data_cache/officehomefeatures.npz'", "\n", "", "else", ":", "\n", "            ", "self", ".", "fn_cache", "=", "'data_cache/officehome.npz'", "\n", "\n", "", "if", "(", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "fn_cache", ")", ")", ":", "\n", "            ", "self", ".", "readAndCacheData", "(", ")", "\n", "\n", "", "self", ".", "load", "(", "asdataloader", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.matthewbehrend_BNC.dataset_loading.load_datasets.OfficeHomeDatasets.readAndCacheData": [[25, 41], ["print", "dataset_loading.officehome.OfficeHomeArt", "dataset_loading.officehome.OfficeHomeClipart", "dataset_loading.officehome.OfficeHomeProduct", "dataset_loading.officehome.OfficeHomeReal", "numpy.savez_compressed", "load_datasets.getResNetFeatureExtractor"], "methods", ["home.repos.pwc.inspect_result.matthewbehrend_BNC.dataset_loading.load_datasets.getResNetFeatureExtractor"], ["", "def", "readAndCacheData", "(", "self", ")", ":", "\n", "        ", "print", "(", "'Loading data...'", ")", "\n", "\n", "net", "=", "None", "\n", "if", "(", "self", ".", "useFeatures", ")", ":", "\n", "            ", "net", "=", "getResNetFeatureExtractor", "(", ")", "\n", "\n", "", "art", "=", "OfficeHomeArt", "(", "extractor", "=", "net", ")", "\n", "clipart", "=", "OfficeHomeClipart", "(", "extractor", "=", "net", ")", "\n", "product", "=", "OfficeHomeProduct", "(", "extractor", "=", "net", ")", "\n", "real", "=", "OfficeHomeReal", "(", "extractor", "=", "net", ")", "\n", "np", ".", "savez_compressed", "(", "self", ".", "fn_cache", ",", "\n", "art", ".", "train", ".", "_data", "[", "0", "]", ",", "art", ".", "train", ".", "_data", "[", "1", "]", ",", "art", ".", "test", ".", "_data", "[", "0", "]", ",", "art", ".", "test", ".", "_data", "[", "1", "]", ",", "\n", "clipart", ".", "train", ".", "_data", "[", "0", "]", ",", "clipart", ".", "train", ".", "_data", "[", "1", "]", ",", "clipart", ".", "test", ".", "_data", "[", "0", "]", ",", "clipart", ".", "test", ".", "_data", "[", "1", "]", ",", "\n", "product", ".", "train", ".", "_data", "[", "0", "]", ",", "product", ".", "train", ".", "_data", "[", "1", "]", ",", "product", ".", "test", ".", "_data", "[", "0", "]", ",", "product", ".", "test", ".", "_data", "[", "1", "]", ",", "\n", "real", ".", "train", ".", "_data", "[", "0", "]", ",", "real", ".", "train", ".", "_data", "[", "1", "]", ",", "real", ".", "test", ".", "_data", "[", "0", "]", ",", "real", ".", "test", ".", "_data", "[", "1", "]", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.matthewbehrend_BNC.dataset_loading.load_datasets.OfficeHomeDatasets.load": [[43, 57], ["print", "numpy.load", "load_datasets._addDataset", "load_datasets._addDataset", "load_datasets._addDataset", "load_datasets._addDataset"], "methods", ["home.repos.pwc.inspect_result.matthewbehrend_BNC.dataset_loading.load_datasets.OfficeHomeDatasets.load", "home.repos.pwc.inspect_result.matthewbehrend_BNC.dataset_loading.load_datasets._addDataset", "home.repos.pwc.inspect_result.matthewbehrend_BNC.dataset_loading.load_datasets._addDataset", "home.repos.pwc.inspect_result.matthewbehrend_BNC.dataset_loading.load_datasets._addDataset", "home.repos.pwc.inspect_result.matthewbehrend_BNC.dataset_loading.load_datasets._addDataset"], ["", "def", "load", "(", "self", ",", "asdataloader", ")", ":", "\n", "        ", "print", "(", "'Loading data from cache'", ")", "\n", "dat", "=", "np", ".", "load", "(", "self", ".", "fn_cache", ")", "\n", "batch_size", "=", "256", "\n", "i", "=", "0", "\n", "self", ".", "art", "=", "_addDataset", "(", "'art'", ",", "dat", ",", "i", ",", "batch_size", ",", "asdataloader", ")", "\n", "i", "+=", "4", "\n", "self", ".", "clipart", "=", "_addDataset", "(", "'clipart'", ",", "dat", ",", "i", ",", "batch_size", ",", "asdataloader", ")", "\n", "i", "+=", "4", "\n", "self", ".", "product", "=", "_addDataset", "(", "'product'", ",", "dat", ",", "i", ",", "batch_size", ",", "asdataloader", ")", "\n", "i", "+=", "4", "\n", "self", ".", "real", "=", "_addDataset", "(", "'real'", ",", "dat", ",", "i", ",", "batch_size", ",", "asdataloader", ")", "\n", "\n", "self", ".", "domains", "=", "{", "'art'", ":", "self", ".", "art", ",", "'clipart'", ":", "self", ".", "clipart", ",", "'product'", ":", "self", ".", "product", ",", "'real'", ":", "self", ".", "real", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.matthewbehrend_BNC.dataset_loading.load_datasets.getResNetFeatureExtractor": [[59, 62], ["mxnet.gluon.model_zoo.vision.resnet50_v1"], "function", ["None"], ["", "", "def", "getResNetFeatureExtractor", "(", ")", ":", "\n", "    ", "net", "=", "gluon", ".", "model_zoo", ".", "vision", ".", "resnet50_v1", "(", "pretrained", "=", "True", ")", ".", "features", "\n", "return", "net", "\n", "\n"]], "home.repos.pwc.inspect_result.matthewbehrend_BNC.dataset_loading.load_datasets._addDataset": [[63, 76], ["mxnet.gluon.data.ArrayDataset", "mxnet.gluon.data.ArrayDataset", "dataset_loading.dataset.DatasetGroup", "dataset_loading.dataset.DatasetGroup.makeDomainDatasetLoader"], "function", ["home.repos.pwc.inspect_result.matthewbehrend_BNC.dataset_loading.dataset.DatasetGroup.makeDomainDatasetLoader"], ["", "def", "_addDataset", "(", "name", ",", "dat", ",", "idx", ",", "batch_size", ",", "asdataloader", ")", ":", "\n", "    ", "fl", "=", "dat", ".", "files", "\n", "train", "=", "ArrayDataset", "(", "dat", "[", "fl", "[", "idx", "]", "]", ",", "dat", "[", "fl", "[", "idx", "+", "1", "]", "]", ")", "\n", "test", "=", "ArrayDataset", "(", "dat", "[", "fl", "[", "idx", "+", "2", "]", "]", ",", "dat", "[", "fl", "[", "idx", "+", "3", "]", "]", ")", "\n", "\n", "dat_set", "=", "DatasetGroup", "(", "name", ")", "\n", "if", "(", "asdataloader", ")", ":", "\n", "        ", "dat_set", ".", "makeDomainDatasetLoader", "(", "train", ",", "test", ",", "batch_size", ")", "\n", "", "else", ":", "\n", "        ", "dat_set", ".", "train", "=", "train", "\n", "dat_set", ".", "test", "=", "test", "\n", "\n", "", "return", "dat_set", "\n", "\n"]]}