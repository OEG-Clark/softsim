{"home.repos.pwc.inspect_result.XuelianCheng_LidarStereoNet.None.test_kitti141.test": [[79, 112], ["model.eval", "int", "int", "torch.pad", "torch.pad", "torch.pad", "torch.pad", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "outputl3.data.cpu", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "model", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "numpy.ceil", "numpy.ceil", "torch.autograd.Variable.cuda", "torch.autograd.Variable.cuda", "torch.autograd.Variable.cuda", "torch.autograd.Variable.cuda"], "function", ["None"], ["def", "test", "(", "imgL", ",", "imgR", ",", "disp_L", ",", "disp_R", ")", ":", "\n", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "# Pad images such that the dimensions are multiples of 32", "\n", "shape", "=", "imgL", ".", "shape", "\n", "height_new", "=", "int", "(", "np", ".", "ceil", "(", "shape", "[", "2", "]", "/", "32.", ")", "*", "32", ")", "\n", "width_new", "=", "int", "(", "np", ".", "ceil", "(", "shape", "[", "3", "]", "/", "32.", ")", "*", "32", ")", "\n", "\n", "padding", "=", "(", "0", ",", "width_new", "-", "shape", "[", "3", "]", ",", "0", ",", "height_new", "-", "shape", "[", "2", "]", ")", "\n", "imgL", "=", "F", ".", "pad", "(", "imgL", ",", "padding", ",", "\"constant\"", ",", "0", ")", "\n", "imgR", "=", "F", ".", "pad", "(", "imgR", ",", "padding", ",", "\"constant\"", ",", "0", ")", "\n", "disp_L", "=", "F", ".", "pad", "(", "disp_L", ",", "padding", ",", "\"constant\"", ",", "0", ")", "\n", "disp_R", "=", "F", ".", "pad", "(", "disp_R", ",", "padding", ",", "\"constant\"", ",", "0", ")", "\n", "\n", "imgL", "=", "Variable", "(", "torch", ".", "FloatTensor", "(", "imgL", ")", ")", "\n", "imgR", "=", "Variable", "(", "torch", ".", "FloatTensor", "(", "imgR", ")", ")", "\n", "disp_L", "=", "Variable", "(", "torch", ".", "FloatTensor", "(", "disp_L", ")", ")", "\n", "disp_R", "=", "Variable", "(", "torch", ".", "FloatTensor", "(", "disp_R", ")", ")", "\n", "if", "args", ".", "cuda", ":", "\n", "        ", "imgL", ",", "imgR", ",", "disp_L", ",", "disp_R", "=", "imgL", ".", "cuda", "(", ")", ",", "imgR", ".", "cuda", "(", ")", ",", "disp_L", ".", "cuda", "(", ")", ",", "disp_R", ".", "cuda", "(", ")", "\n", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "outputl3", ",", "outputr3", "=", "model", "(", "imgL", ",", "imgR", ",", "disp_L", ",", "disp_R", ")", "\n", "\n", "# Change output to original shape", "\n", "", "outputl3", "=", "outputl3", "[", ":", ",", ":", "shape", "[", "2", "]", ",", ":", "shape", "[", "3", "]", "]", "\n", "outputr3", "=", "outputr3", "[", ":", ",", ":", "shape", "[", "2", "]", ",", ":", "shape", "[", "3", "]", "]", "\n", "\n", "pred_disp", "=", "outputl3", ".", "data", ".", "cpu", "(", ")", "\n", "output", "=", "torch", ".", "squeeze", "(", "pred_disp", ",", "1", ")", "[", ":", ",", ":", ",", ":", "]", "\n", "\n", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.XuelianCheng_LidarStereoNet.None.test_kitti141.main": [[114, 126], ["len", "enumerate", "test_kitti141.test", "torch.squeeze().numpy", "torch.squeeze().numpy", "torch.squeeze().numpy", "torch.squeeze().numpy", "torch.squeeze().numpy", "torch.squeeze().numpy", "skimage.io.imsave", "skimage.io.imsave", "print", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze"], "function", ["home.repos.pwc.inspect_result.XuelianCheng_LidarStereoNet.None.test_kitti141.test"], ["", "def", "main", "(", ")", ":", "\n", "\n", "# TEST ##", "\n", "    ", "num_samples", "=", "len", "(", "left_test", ")", "\n", "\n", "for", "batch_idx", ",", "(", "imgL", ",", "imgR", ",", "dispL", ",", "dispR", ")", "in", "enumerate", "(", "TestImgLoader", ")", ":", "\n", "        ", "output", "=", "test", "(", "imgL", ",", "imgR", ",", "dispL", ",", "dispR", ")", "\n", "\n", "# save prediction", "\n", "disp_est", "=", "torch", ".", "squeeze", "(", "output", ")", ".", "numpy", "(", ")", "\n", "skimage", ".", "io", ".", "imsave", "(", "args", ".", "savemodel", "+", "'images/'", "+", "left_test", "[", "batch_idx", "]", "[", "-", "13", ":", "]", ",", "(", "disp_est", "*", "256", ")", ".", "astype", "(", "'uint16'", ")", ")", "\n", "print", "(", "'Inference Image: %s'", "%", "(", "left_test", "[", "batch_idx", "]", "[", "-", "13", ":", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.XuelianCheng_LidarStereoNet.utils.readpfm.readPFM": [[6, 42], ["open", "open.readline().rstrip", "re.match", "float", "numpy.fromfile", "numpy.reshape", "numpy.flipud", "open.readline", "map", "Exception", "open.readline().rstrip", "open.readline", "Exception", "re.match.groups", "open.readline"], "function", ["None"], ["def", "readPFM", "(", "file", ")", ":", "\n", "    ", "file", "=", "open", "(", "file", ",", "'rb'", ")", "\n", "\n", "color", "=", "None", "\n", "width", "=", "None", "\n", "height", "=", "None", "\n", "scale", "=", "None", "\n", "endian", "=", "None", "\n", "\n", "header", "=", "file", ".", "readline", "(", ")", ".", "rstrip", "(", ")", "\n", "if", "header", "==", "'PF'", ":", "\n", "        ", "color", "=", "True", "\n", "", "elif", "header", "==", "'Pf'", ":", "\n", "        ", "color", "=", "False", "\n", "", "else", ":", "\n", "        ", "raise", "Exception", "(", "'Not a PFM file.'", ")", "\n", "\n", "", "dim_match", "=", "re", ".", "match", "(", "r'^(\\d+)\\s(\\d+)\\s$'", ",", "file", ".", "readline", "(", ")", ")", "\n", "if", "dim_match", ":", "\n", "        ", "width", ",", "height", "=", "map", "(", "int", ",", "dim_match", ".", "groups", "(", ")", ")", "\n", "", "else", ":", "\n", "        ", "raise", "Exception", "(", "'Malformed PFM header.'", ")", "\n", "\n", "", "scale", "=", "float", "(", "file", ".", "readline", "(", ")", ".", "rstrip", "(", ")", ")", "\n", "if", "scale", "<", "0", ":", "# little-endian", "\n", "        ", "endian", "=", "'<'", "\n", "scale", "=", "-", "scale", "\n", "", "else", ":", "\n", "        ", "endian", "=", "'>'", "# big-endian", "\n", "\n", "", "data", "=", "np", ".", "fromfile", "(", "file", ",", "endian", "+", "'f'", ")", "\n", "shape", "=", "(", "height", ",", "width", ",", "3", ")", "if", "color", "else", "(", "height", ",", "width", ")", "\n", "\n", "data", "=", "np", ".", "reshape", "(", "data", ",", "shape", ")", "\n", "data", "=", "np", ".", "flipud", "(", "data", ")", "\n", "return", "data", ",", "scale", "\n", "\n"]], "home.repos.pwc.inspect_result.XuelianCheng_LidarStereoNet.utils.preprocess.Lighting.__init__": [[92, 96], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "alphastd", ",", "eigval", ",", "eigvec", ")", ":", "\n", "        ", "self", ".", "alphastd", "=", "alphastd", "\n", "self", ".", "eigval", "=", "eigval", "\n", "self", ".", "eigvec", "=", "eigvec", "\n", "\n"]], "home.repos.pwc.inspect_result.XuelianCheng_LidarStereoNet.utils.preprocess.Lighting.__call__": [[97, 108], ["img.new().resize_().normal_", "preprocess.Lighting.eigvec.type_as().clone().mul().mul().sum().squeeze", "img.add", "preprocess.Lighting.view().expand_as", "img.new().resize_", "preprocess.Lighting.eigvec.type_as().clone().mul().mul().sum", "preprocess.Lighting.view", "img.new", "preprocess.Lighting.eigvec.type_as().clone().mul().mul", "preprocess.Lighting.eigval.view().expand", "preprocess.Lighting.eigvec.type_as().clone().mul", "img.new().resize_().normal_.view().expand", "preprocess.Lighting.eigval.view", "preprocess.Lighting.eigvec.type_as().clone", "img.new().resize_().normal_.view", "preprocess.Lighting.eigvec.type_as"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "if", "self", ".", "alphastd", "==", "0", ":", "\n", "            ", "return", "img", "\n", "\n", "", "alpha", "=", "img", ".", "new", "(", ")", ".", "resize_", "(", "3", ")", ".", "normal_", "(", "0", ",", "self", ".", "alphastd", ")", "\n", "rgb", "=", "self", ".", "eigvec", ".", "type_as", "(", "img", ")", ".", "clone", "(", ")", ".", "mul", "(", "alpha", ".", "view", "(", "1", ",", "3", ")", ".", "expand", "(", "3", ",", "3", ")", ")", ".", "mul", "(", "self", ".", "eigval", ".", "view", "(", "1", ",", "3", ")", ".", "expand", "(", "3", ",", "3", ")", ")", ".", "sum", "(", "1", ")", ".", "squeeze", "(", ")", "\n", "\n", "return", "img", ".", "add", "(", "rgb", ".", "view", "(", "3", ",", "1", ",", "1", ")", ".", "expand_as", "(", "img", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.XuelianCheng_LidarStereoNet.utils.preprocess.Grayscale.__call__": [[112, 118], ["img.clone", "gs[].mul_().add_().add_", "gs[].copy_", "gs[].copy_", "gs[].mul_().add_", "gs[].mul_"], "methods", ["None"], ["    ", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "gs", "=", "img", ".", "clone", "(", ")", "\n", "gs", "[", "0", "]", ".", "mul_", "(", "0.299", ")", ".", "add_", "(", "0.587", ",", "gs", "[", "1", "]", ")", ".", "add_", "(", "0.114", ",", "gs", "[", "2", "]", ")", "\n", "gs", "[", "1", "]", ".", "copy_", "(", "gs", "[", "0", "]", ")", "\n", "gs", "[", "2", "]", ".", "copy_", "(", "gs", "[", "0", "]", ")", "\n", "return", "gs", "\n", "\n"]], "home.repos.pwc.inspect_result.XuelianCheng_LidarStereoNet.utils.preprocess.Saturation.__init__": [[122, 124], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "var", ")", ":", "\n", "        ", "self", ".", "var", "=", "var", "\n", "\n"]], "home.repos.pwc.inspect_result.XuelianCheng_LidarStereoNet.utils.preprocess.Saturation.__call__": [[125, 129], ["random.uniform", "img.lerp", "preprocess.Grayscale"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "gs", "=", "Grayscale", "(", ")", "(", "img", ")", "\n", "alpha", "=", "random", ".", "uniform", "(", "0", ",", "self", ".", "var", ")", "\n", "return", "img", ".", "lerp", "(", "gs", ",", "alpha", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.XuelianCheng_LidarStereoNet.utils.preprocess.Brightness.__init__": [[133, 135], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "var", ")", ":", "\n", "        ", "self", ".", "var", "=", "var", "\n", "\n"]], "home.repos.pwc.inspect_result.XuelianCheng_LidarStereoNet.utils.preprocess.Brightness.__call__": [[136, 140], ["img.new().resize_as_().zero_", "random.uniform", "img.lerp", "img.new().resize_as_", "img.new"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "gs", "=", "img", ".", "new", "(", ")", ".", "resize_as_", "(", "img", ")", ".", "zero_", "(", ")", "\n", "alpha", "=", "random", ".", "uniform", "(", "0", ",", "self", ".", "var", ")", "\n", "return", "img", ".", "lerp", "(", "gs", ",", "alpha", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.XuelianCheng_LidarStereoNet.utils.preprocess.Contrast.__init__": [[144, 146], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "var", ")", ":", "\n", "        ", "self", ".", "var", "=", "var", "\n", "\n"]], "home.repos.pwc.inspect_result.XuelianCheng_LidarStereoNet.utils.preprocess.Contrast.__call__": [[147, 152], ["gs.fill_", "random.uniform", "img.lerp", "preprocess.Grayscale", "gs.mean"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "gs", "=", "Grayscale", "(", ")", "(", "img", ")", "\n", "gs", ".", "fill_", "(", "gs", ".", "mean", "(", ")", ")", "\n", "alpha", "=", "random", ".", "uniform", "(", "0", ",", "self", ".", "var", ")", "\n", "return", "img", ".", "lerp", "(", "gs", ",", "alpha", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.XuelianCheng_LidarStereoNet.utils.preprocess.RandomOrder.__init__": [[158, 160], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "transforms", ")", ":", "\n", "        ", "self", ".", "transforms", "=", "transforms", "\n", "\n"]], "home.repos.pwc.inspect_result.XuelianCheng_LidarStereoNet.utils.preprocess.RandomOrder.__call__": [[161, 168], ["torch.randperm", "len"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "if", "self", ".", "transforms", "is", "None", ":", "\n", "            ", "return", "img", "\n", "", "order", "=", "torch", ".", "randperm", "(", "len", "(", "self", ".", "transforms", ")", ")", "\n", "for", "i", "in", "order", ":", "\n", "            ", "img", "=", "self", ".", "transforms", "[", "i", "]", "(", "img", ")", "\n", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.XuelianCheng_LidarStereoNet.utils.preprocess.ColorJitter.__init__": [[172, 180], ["preprocess.ColorJitter.transforms.append", "preprocess.ColorJitter.transforms.append", "preprocess.ColorJitter.transforms.append", "preprocess.Brightness", "preprocess.Contrast", "preprocess.Saturation"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "brightness", "=", "0.4", ",", "contrast", "=", "0.4", ",", "saturation", "=", "0.4", ")", ":", "\n", "        ", "self", ".", "transforms", "=", "[", "]", "\n", "if", "brightness", "!=", "0", ":", "\n", "            ", "self", ".", "transforms", ".", "append", "(", "Brightness", "(", "brightness", ")", ")", "\n", "", "if", "contrast", "!=", "0", ":", "\n", "            ", "self", ".", "transforms", ".", "append", "(", "Contrast", "(", "contrast", ")", ")", "\n", "", "if", "saturation", "!=", "0", ":", "\n", "            ", "self", ".", "transforms", ".", "append", "(", "Saturation", "(", "saturation", ")", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.XuelianCheng_LidarStereoNet.utils.preprocess.scale_crop": [[21, 30], ["torchvision.Compose", "torchvision.ToTensor", "torchvision.Normalize"], "function", ["None"], ["def", "scale_crop", "(", "input_size", ",", "scale_size", "=", "None", ",", "normalize", "=", "__imagenet_stats", ")", ":", "\n", "    ", "t_list", "=", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "**", "normalize", ")", ",", "\n", "]", "\n", "#if scale_size != input_size:", "\n", "#t_list = [transforms.Scale((960,540))] + t_list", "\n", "\n", "return", "transforms", ".", "Compose", "(", "t_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.XuelianCheng_LidarStereoNet.utils.preprocess.scale_random_crop": [[32, 42], ["torchvision.Compose", "torchvision.RandomCrop", "torchvision.ToTensor", "torchvision.Normalize", "torchvision.Scale"], "function", ["None"], ["", "def", "scale_random_crop", "(", "input_size", ",", "scale_size", "=", "None", ",", "normalize", "=", "__imagenet_stats", ")", ":", "\n", "    ", "t_list", "=", "[", "\n", "transforms", ".", "RandomCrop", "(", "input_size", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "**", "normalize", ")", ",", "\n", "]", "\n", "if", "scale_size", "!=", "input_size", ":", "\n", "        ", "t_list", "=", "[", "transforms", ".", "Scale", "(", "scale_size", ")", "]", "+", "t_list", "\n", "\n", "", "transforms", ".", "Compose", "(", "t_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.XuelianCheng_LidarStereoNet.utils.preprocess.pad_random_crop": [[44, 51], ["int", "torchvision.Compose", "torchvision.RandomCrop", "torchvision.RandomHorizontalFlip", "torchvision.ToTensor", "torchvision.Normalize"], "function", ["None"], ["", "def", "pad_random_crop", "(", "input_size", ",", "scale_size", "=", "None", ",", "normalize", "=", "__imagenet_stats", ")", ":", "\n", "    ", "padding", "=", "int", "(", "(", "scale_size", "-", "input_size", ")", "/", "2", ")", "\n", "return", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "RandomCrop", "(", "input_size", ",", "padding", "=", "padding", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "**", "normalize", ")", ",", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.XuelianCheng_LidarStereoNet.utils.preprocess.inception_preproccess": [[54, 60], ["torchvision.Compose", "torchvision.RandomSizedCrop", "torchvision.RandomHorizontalFlip", "torchvision.ToTensor", "torchvision.Normalize"], "function", ["None"], ["", "def", "inception_preproccess", "(", "input_size", ",", "normalize", "=", "__imagenet_stats", ")", ":", "\n", "    ", "return", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "RandomSizedCrop", "(", "input_size", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "**", "normalize", ")", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.XuelianCheng_LidarStereoNet.utils.preprocess.inception_color_preproccess": [[61, 73], ["torchvision.Compose", "torchvision.ToTensor", "preprocess.ColorJitter", "preprocess.Lighting", "torchvision.Normalize"], "function", ["None"], ["", "def", "inception_color_preproccess", "(", "input_size", ",", "normalize", "=", "__imagenet_stats", ")", ":", "\n", "    ", "return", "transforms", ".", "Compose", "(", "[", "\n", "#transforms.RandomSizedCrop(input_size),", "\n", "#transforms.RandomHorizontalFlip(),", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "ColorJitter", "(", "\n", "brightness", "=", "0.4", ",", "\n", "contrast", "=", "0.4", ",", "\n", "saturation", "=", "0.4", ",", "\n", ")", ",", "\n", "Lighting", "(", "0.1", ",", "__imagenet_pca", "[", "'eigval'", "]", ",", "__imagenet_pca", "[", "'eigvec'", "]", ")", ",", "\n", "transforms", ".", "Normalize", "(", "**", "normalize", ")", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.XuelianCheng_LidarStereoNet.utils.preprocess.get_transform": [[76, 85], ["preprocess.inception_color_preproccess", "preprocess.scale_crop"], "function", ["home.repos.pwc.inspect_result.XuelianCheng_LidarStereoNet.utils.preprocess.inception_color_preproccess", "home.repos.pwc.inspect_result.XuelianCheng_LidarStereoNet.utils.preprocess.scale_crop"], ["", "def", "get_transform", "(", "name", "=", "'imagenet'", ",", "input_size", "=", "None", ",", "\n", "scale_size", "=", "None", ",", "normalize", "=", "None", ",", "augment", "=", "True", ")", ":", "\n", "    ", "normalize", "=", "__imagenet_stats", "\n", "input_size", "=", "256", "\n", "if", "augment", ":", "\n", "            ", "return", "inception_color_preproccess", "(", "input_size", ",", "normalize", "=", "normalize", ")", "\n", "", "else", ":", "\n", "            ", "return", "scale_crop", "(", "input_size", "=", "input_size", ",", "\n", "scale_size", "=", "scale_size", ",", "normalize", "=", "normalize", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.XuelianCheng_LidarStereoNet.utils.savepfm.savepfm": [[5, 30], ["open", "open.write", "open.write", "open.write", "image.tofile", "Exception", "len", "Exception", "len", "len"], "function", ["None"], ["def", "savepfm", "(", "file", ",", "image", ",", "scale", "=", "1", ")", ":", "\n", "    ", "file", "=", "open", "(", "file", ",", "'wb'", ")", "\n", "color", "=", "None", "\n", "\n", "if", "image", ".", "dtype", ".", "name", "!=", "'float32'", ":", "\n", "        ", "raise", "Exception", "(", "'Image dtype must be float32.'", ")", "\n", "\n", "", "if", "len", "(", "image", ".", "shape", ")", "==", "3", "and", "image", ".", "shape", "[", "2", "]", "==", "3", ":", "# color image", "\n", "        ", "color", "=", "True", "\n", "", "elif", "len", "(", "image", ".", "shape", ")", "==", "2", "or", "len", "(", "image", ".", "shape", ")", "==", "3", "and", "image", ".", "shape", "[", "2", "]", "==", "1", ":", "# greyscale", "\n", "        ", "color", "=", "False", "\n", "", "else", ":", "\n", "        ", "raise", "Exception", "(", "'Image must have H x W x 3, H x W x 1 or H x W dimensions.'", ")", "\n", "\n", "", "file", ".", "write", "(", "'PF\\n'", "if", "color", "else", "'Pf\\n'", ")", "\n", "file", ".", "write", "(", "'%d %d\\n'", "%", "(", "image", ".", "shape", "[", "1", "]", ",", "image", ".", "shape", "[", "0", "]", ")", ")", "\n", "\n", "endian", "=", "image", ".", "dtype", ".", "byteorder", "\n", "\n", "if", "endian", "==", "'<'", "or", "endian", "==", "'='", "and", "sys", ".", "byteorder", "==", "'little'", ":", "\n", "        ", "scale", "=", "-", "scale", "\n", "\n", "", "file", ".", "write", "(", "'%f\\n'", "%", "scale", ")", "\n", "\n", "image", ".", "tofile", "(", "file", ")", "", "", ""]], "home.repos.pwc.inspect_result.XuelianCheng_LidarStereoNet.dataloader.dataloader_kitti141.TestLoader.__init__": [[45, 54], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "training", ",", "left", ",", "right", ",", "left_disparity", ",", "right_disparity", ",", "loader", "=", "default_loader", ",", "dploader", "=", "disparity_loader_png", ")", ":", "\n", "        ", "self", ".", "left", "=", "left", "\n", "self", ".", "right", "=", "right", "\n", "self", ".", "disp_L", "=", "left_disparity", "\n", "self", ".", "disp_R", "=", "right_disparity", "\n", "\n", "self", ".", "loader", "=", "loader", "\n", "self", ".", "dploader", "=", "dploader", "\n", "self", ".", "training", "=", "training", "\n", "\n"]], "home.repos.pwc.inspect_result.XuelianCheng_LidarStereoNet.dataloader.dataloader_kitti141.TestLoader.__getitem__": [[55, 82], ["dataloader_kitti141.TestLoader.loader", "dataloader_kitti141.TestLoader.loader", "dataloader_kitti141.TestLoader.dploader", "dataloader_kitti141.TestLoader.dploader", "numpy.ascontiguousarray", "numpy.ascontiguousarray", "utils.get_transform", "utils.get_transform", "utils.get_transform.", "utils.get_transform.", "torch.unsqueeze", "torch.unsqueeze", "torch.from_numpy", "torch.from_numpy", "numpy.ones", "numpy.ones"], "methods", ["home.repos.pwc.inspect_result.XuelianCheng_LidarStereoNet.utils.preprocess.get_transform", "home.repos.pwc.inspect_result.XuelianCheng_LidarStereoNet.utils.preprocess.get_transform"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "left", "=", "self", ".", "left", "[", "index", "]", "\n", "right", "=", "self", ".", "right", "[", "index", "]", "\n", "disp_L", "=", "self", ".", "disp_L", "[", "index", "]", "\n", "disp_R", "=", "self", ".", "disp_R", "[", "index", "]", "\n", "\n", "left_img", "=", "self", ".", "loader", "(", "left", ")", "\n", "right_img", "=", "self", ".", "loader", "(", "right", ")", "\n", "\n", "w", ",", "h", "=", "left_img", ".", "size", "\n", "dataL", "=", "self", ".", "dploader", "(", "disp_L", ")", "\n", "dataR", "=", "self", ".", "dploader", "(", "disp_R", ")", "\n", "\n", "if", "dataL", "is", "None", ":", "\n", "            ", "dataL", "=", "np", ".", "ones", "(", "(", "h", ",", "w", ")", ")", "*", "256", "\n", "dataR", "=", "np", ".", "ones", "(", "(", "h", ",", "w", ")", ")", "*", "256", "\n", "", "dataL", "=", "np", ".", "ascontiguousarray", "(", "dataL", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "dataR", "=", "np", ".", "ascontiguousarray", "(", "dataR", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "dataL", "=", "dataL", "/", "256", "\n", "dataR", "=", "dataR", "/", "256", "\n", "\n", "processed", "=", "preprocess", ".", "get_transform", "(", "augment", "=", "False", ")", "\n", "left_img", "=", "processed", "(", "left_img", ")", "\n", "right_img", "=", "processed", "(", "right_img", ")", "\n", "dataL", "=", "torch", ".", "unsqueeze", "(", "torch", ".", "from_numpy", "(", "dataL", ")", ",", "0", ")", "\n", "dataR", "=", "torch", ".", "unsqueeze", "(", "torch", ".", "from_numpy", "(", "dataR", ")", ",", "0", ")", "\n", "return", "left_img", ",", "right_img", ",", "dataL", ",", "dataR", "\n", "\n"]], "home.repos.pwc.inspect_result.XuelianCheng_LidarStereoNet.dataloader.dataloader_kitti141.TestLoader.__len__": [[83, 85], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "left", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.XuelianCheng_LidarStereoNet.dataloader.dataloader_kitti141.default_loader": [[18, 20], ["PIL.Image.open().convert", "PIL.Image.open"], "function", ["None"], ["def", "default_loader", "(", "path", ")", ":", "\n", "    ", "return", "Image", ".", "open", "(", "path", ")", ".", "convert", "(", "'RGB'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.XuelianCheng_LidarStereoNet.dataloader.dataloader_kitti141.disparity_loader_png": [[21, 27], ["os.path.exists", "os.path.exists", "PIL.Image.open"], "function", ["None"], ["", "def", "disparity_loader_png", "(", "path", ")", ":", "\n", "    ", "if", "os", ".", "path", ".", "exists", "(", "path", ")", ":", "\n", "        ", "disp", "=", "Image", ".", "open", "(", "path", ")", "\n", "", "else", ":", "\n", "        ", "disp", "=", "None", "\n", "", "return", "disp", "\n", "\n"]], "home.repos.pwc.inspect_result.XuelianCheng_LidarStereoNet.dataloader.dataloader_kitti141.disparity_loader": [[28, 35], ["os.path.exists", "os.path.exists", "utils.readPFM"], "function", ["home.repos.pwc.inspect_result.XuelianCheng_LidarStereoNet.utils.readpfm.readPFM"], ["", "def", "disparity_loader", "(", "path", ")", ":", "\n", "    ", "if", "os", ".", "path", ".", "exists", "(", "path", ")", ":", "\n", "        ", "disp", ",", "scaleL", "=", "rp", ".", "readPFM", "(", "path", ")", "\n", "", "else", ":", "\n", "        ", "disp", "=", "None", "\n", "scaleL", "=", "None", "\n", "", "return", "disp", ",", "scaleL", "\n", "\n"]], "home.repos.pwc.inspect_result.XuelianCheng_LidarStereoNet.dataloader.dataloader_kitti141.test_Kitti141": [[37, 43], ["glob.glob", "glob.glob", "glob.glob", "glob.glob", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "sorted", "sorted", "sorted", "sorted"], "function", ["None"], ["", "def", "test_Kitti141", "(", "filepath", ")", ":", "\n", "    ", "left", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "filepath", ",", "'Kitti_141'", ",", "'image_02'", ",", "'*.png'", ")", ")", "\n", "right", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "filepath", ",", "'Kitti_141'", ",", "'image_03'", ",", "'*.png'", ")", ")", "\n", "displ", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "filepath", ",", "'Kitti_141'", ",", "'velodyne_points'", ",", "'*.png'", ")", ")", "\n", "dispr", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "filepath", ",", "'Kitti_141'", ",", "'velodyne_points_right'", ",", "'*.png'", ")", ")", "\n", "return", "sorted", "(", "left", ")", ",", "sorted", "(", "right", ")", ",", "sorted", "(", "displ", ")", ",", "sorted", "(", "dispr", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.XuelianCheng_LidarStereoNet.models.padding_same.disparityregression.__init__": [[29, 32], ["torch.Module.__init__", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "numpy.reshape", "numpy.array", "range"], "methods", ["home.repos.pwc.inspect_result.XuelianCheng_LidarStereoNet.models.SparseConvNet.SparseConvNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "maxdisp", ")", ":", "\n", "        ", "super", "(", "disparityregression", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "disp", "=", "Variable", "(", "torch", ".", "Tensor", "(", "np", ".", "reshape", "(", "np", ".", "array", "(", "range", "(", "maxdisp", ")", ")", ",", "[", "1", ",", "maxdisp", ",", "1", ",", "1", "]", ")", ")", ".", "cuda", "(", ")", ",", "requires_grad", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.XuelianCheng_LidarStereoNet.models.padding_same.disparityregression.forward": [[33, 37], ["padding_same.disparityregression.disp.repeat", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "x.size", "x.size", "x.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "disp", "=", "self", ".", "disp", ".", "repeat", "(", "x", ".", "size", "(", ")", "[", "0", "]", ",", "1", ",", "x", ".", "size", "(", ")", "[", "2", "]", ",", "x", ".", "size", "(", ")", "[", "3", "]", ")", "\n", "out", "=", "torch", ".", "sum", "(", "x", "*", "disp", ",", "1", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.XuelianCheng_LidarStereoNet.models.padding_same._ConvNd.__init__": [[107, 134], ["torch.nn.modules.Module.__init__", "padding_same._ConvNd.reset_parameters", "ValueError", "ValueError", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "padding_same._ConvNd.register_parameter", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.XuelianCheng_LidarStereoNet.models.SparseConvNet.SparseConvNet.__init__", "home.repos.pwc.inspect_result.XuelianCheng_LidarStereoNet.models.padding_same._ConvNd.reset_parameters"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", ",", "\n", "padding", ",", "dilation", ",", "transposed", ",", "output_padding", ",", "groups", ",", "bias", ")", ":", "\n", "        ", "super", "(", "_ConvNd", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "in_channels", "%", "groups", "!=", "0", ":", "\n", "            ", "raise", "ValueError", "(", "'in_channels must be divisible by groups'", ")", "\n", "", "if", "out_channels", "%", "groups", "!=", "0", ":", "\n", "            ", "raise", "ValueError", "(", "'out_channels must be divisible by groups'", ")", "\n", "", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "out_channels", "=", "out_channels", "\n", "self", ".", "kernel_size", "=", "kernel_size", "\n", "self", ".", "stride", "=", "stride", "\n", "self", ".", "padding", "=", "padding", "\n", "self", ".", "dilation", "=", "dilation", "\n", "self", ".", "transposed", "=", "transposed", "\n", "self", ".", "output_padding", "=", "output_padding", "\n", "self", ".", "groups", "=", "groups", "\n", "if", "transposed", ":", "\n", "            ", "self", ".", "weight", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "\n", "in_channels", ",", "out_channels", "//", "groups", ",", "*", "kernel_size", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "weight", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "\n", "out_channels", ",", "in_channels", "//", "groups", ",", "*", "kernel_size", ")", ")", "\n", "", "if", "bias", ":", "\n", "            ", "self", ".", "bias", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "out_channels", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "register_parameter", "(", "'bias'", ",", "None", ")", "\n", "", "self", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.XuelianCheng_LidarStereoNet.models.padding_same._ConvNd.reset_parameters": [[135, 143], ["padding_same._ConvNd.weight.data.uniform_", "math.sqrt", "padding_same._ConvNd.bias.data.uniform_"], "methods", ["None"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "n", "=", "self", ".", "in_channels", "\n", "for", "k", "in", "self", ".", "kernel_size", ":", "\n", "            ", "n", "*=", "k", "\n", "", "stdv", "=", "1.", "/", "math", ".", "sqrt", "(", "n", ")", "\n", "self", ".", "weight", ".", "data", ".", "uniform_", "(", "-", "stdv", ",", "stdv", ")", "\n", "if", "self", ".", "bias", "is", "not", "None", ":", "\n", "            ", "self", ".", "bias", ".", "data", ".", "uniform_", "(", "-", "stdv", ",", "stdv", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.XuelianCheng_LidarStereoNet.models.padding_same._ConvNd.__repr__": [[144, 159], ["s.format", "len", "len", "len"], "methods", ["None"], ["", "", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "s", "=", "(", "'{name}({in_channels}, {out_channels}, kernel_size={kernel_size}'", "\n", "', stride={stride}'", ")", "\n", "if", "self", ".", "padding", "!=", "(", "0", ",", ")", "*", "len", "(", "self", ".", "padding", ")", ":", "\n", "            ", "s", "+=", "', padding={padding}'", "\n", "", "if", "self", ".", "dilation", "!=", "(", "1", ",", ")", "*", "len", "(", "self", ".", "dilation", ")", ":", "\n", "            ", "s", "+=", "', dilation={dilation}'", "\n", "", "if", "self", ".", "output_padding", "!=", "(", "0", ",", ")", "*", "len", "(", "self", ".", "output_padding", ")", ":", "\n", "            ", "s", "+=", "', output_padding={output_padding}'", "\n", "", "if", "self", ".", "groups", "!=", "1", ":", "\n", "            ", "s", "+=", "', groups={groups}'", "\n", "", "if", "self", ".", "bias", "is", "None", ":", "\n", "            ", "s", "+=", "', bias=False'", "\n", "", "s", "+=", "')'", "\n", "return", "s", ".", "format", "(", "name", "=", "self", ".", "__class__", ".", "__name__", ",", "**", "self", ".", "__dict__", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.XuelianCheng_LidarStereoNet.models.padding_same.Conv2d.__init__": [[162, 171], ["torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "padding_same._ConvNd.__init__", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair"], "methods", ["home.repos.pwc.inspect_result.XuelianCheng_LidarStereoNet.models.SparseConvNet.SparseConvNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", "=", "1", ",", "\n", "padding", "=", "1", ",", "dilation", "=", "1", ",", "groups", "=", "1", ",", "bias", "=", "True", ")", ":", "\n", "        ", "kernel_size", "=", "_pair", "(", "kernel_size", ")", "\n", "stride", "=", "_pair", "(", "stride", ")", "\n", "padding", "=", "_pair", "(", "padding", ")", "\n", "dilation", "=", "_pair", "(", "dilation", ")", "\n", "super", "(", "Conv2d", ",", "self", ")", ".", "__init__", "(", "\n", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", ",", "padding", ",", "dilation", ",", "\n", "False", ",", "_pair", "(", "0", ")", ",", "groups", ",", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.XuelianCheng_LidarStereoNet.models.padding_same.Conv2d.forward": [[172, 175], ["padding_same.conv2d_same_padding"], "methods", ["home.repos.pwc.inspect_result.XuelianCheng_LidarStereoNet.models.padding_same.conv2d_same_padding"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "conv2d_same_padding", "(", "input", ",", "self", ".", "weight", ",", "self", ".", "bias", ",", "self", ".", "stride", ",", "\n", "self", ".", "padding", ",", "self", ".", "dilation", ",", "self", ".", "groups", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.XuelianCheng_LidarStereoNet.models.padding_same.Conv3d.__init__": [[177, 186], ["torch.nn.modules.utils._triple", "torch.nn.modules.utils._triple", "torch.nn.modules.utils._triple", "torch.nn.modules.utils._triple", "torch.nn.modules.utils._triple", "torch.nn.modules.utils._triple", "torch.nn.modules.utils._triple", "torch.nn.modules.utils._triple", "torch.nn.modules.utils._triple", "torch.nn.modules.utils._triple", "torch.nn.modules.utils._triple", "torch.nn.modules.utils._triple", "padding_same._ConvNd.__init__", "torch.nn.modules.utils._triple", "torch.nn.modules.utils._triple", "torch.nn.modules.utils._triple"], "methods", ["home.repos.pwc.inspect_result.XuelianCheng_LidarStereoNet.models.SparseConvNet.SparseConvNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", "=", "1", ",", "\n", "padding", "=", "0", ",", "dilation", "=", "1", ",", "groups", "=", "1", ",", "bias", "=", "True", ")", ":", "\n", "        ", "kernel_size", "=", "_triple", "(", "kernel_size", ")", "\n", "stride", "=", "_triple", "(", "stride", ")", "\n", "padding", "=", "_triple", "(", "padding", ")", "\n", "dilation", "=", "_triple", "(", "dilation", ")", "\n", "super", "(", "Conv3d", ",", "self", ")", ".", "__init__", "(", "\n", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", ",", "padding", ",", "dilation", ",", "\n", "False", ",", "_triple", "(", "0", ")", ",", "groups", ",", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.XuelianCheng_LidarStereoNet.models.padding_same.Conv3d.forward": [[187, 190], ["padding_same.conv3d_same_padding"], "methods", ["home.repos.pwc.inspect_result.XuelianCheng_LidarStereoNet.models.padding_same.conv3d_same_padding"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "conv3d_same_padding", "(", "input", ",", "self", ".", "weight", ",", "self", ".", "bias", ",", "self", ".", "stride", ",", "\n", "self", ".", "padding", ",", "self", ".", "dilation", ",", "self", ".", "groups", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.XuelianCheng_LidarStereoNet.models.padding_same._ConvTransposeMixin.forward": [[193, 202], ["padding_same._ConvTransposeMixin._output_padding", "padding_same._ConvTransposeMixin._backend.ConvNd", "padding_same._ConvTransposeMixin.", "padding_same._ConvTransposeMixin."], "methods", ["home.repos.pwc.inspect_result.XuelianCheng_LidarStereoNet.models.padding_same._ConvTransposeMixin._output_padding"], ["    ", "def", "forward", "(", "self", ",", "input", ",", "output_size", "=", "None", ")", ":", "\n", "        ", "output_padding", "=", "self", ".", "_output_padding", "(", "input", ",", "output_size", ")", "\n", "func", "=", "self", ".", "_backend", ".", "ConvNd", "(", "\n", "self", ".", "stride", ",", "self", ".", "padding", ",", "self", ".", "dilation", ",", "self", ".", "transposed", ",", "\n", "output_padding", ",", "self", ".", "groups", ")", "\n", "if", "self", ".", "bias", "is", "None", ":", "\n", "            ", "return", "func", "(", "input", ",", "self", ".", "weight", ")", "\n", "", "else", ":", "\n", "            ", "return", "func", "(", "input", ",", "self", ".", "weight", ",", "self", ".", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.XuelianCheng_LidarStereoNet.models.padding_same._ConvTransposeMixin._output_padding": [[203, 230], ["list", "zip", "tuple", "input.dim", "len", "len", "ValueError", "padding_same._ConvTransposeMixin._output_padding.dim_size"], "methods", ["None"], ["", "", "def", "_output_padding", "(", "self", ",", "input", ",", "output_size", ")", ":", "\n", "        ", "if", "output_size", "is", "None", ":", "\n", "            ", "return", "self", ".", "output_padding", "\n", "\n", "", "output_size", "=", "list", "(", "output_size", ")", "\n", "k", "=", "input", ".", "dim", "(", ")", "-", "2", "\n", "if", "len", "(", "output_size", ")", "==", "k", "+", "2", ":", "\n", "            ", "output_size", "=", "output_size", "[", "-", "2", ":", "]", "\n", "", "if", "len", "(", "output_size", ")", "!=", "k", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"output_size must have {} or {} elements (got {})\"", "\n", ".", "format", "(", "k", ",", "k", "+", "2", ",", "len", "(", "output_size", ")", ")", ")", "\n", "\n", "", "def", "dim_size", "(", "d", ")", ":", "\n", "            ", "return", "(", "(", "input", ".", "size", "(", "d", "+", "2", ")", "-", "1", ")", "*", "self", ".", "stride", "[", "d", "]", "-", "\n", "2", "*", "self", ".", "padding", "[", "d", "]", "+", "self", ".", "kernel_size", "[", "d", "]", ")", "\n", "\n", "", "min_sizes", "=", "[", "dim_size", "(", "d", ")", "for", "d", "in", "range", "(", "k", ")", "]", "\n", "max_sizes", "=", "[", "min_sizes", "[", "d", "]", "+", "self", ".", "stride", "[", "d", "]", "-", "1", "for", "d", "in", "range", "(", "k", ")", "]", "\n", "for", "size", ",", "min_size", ",", "max_size", "in", "zip", "(", "output_size", ",", "min_sizes", ",", "max_sizes", ")", ":", "\n", "            ", "if", "size", "<", "min_size", "or", "size", ">", "max_size", ":", "\n", "                ", "raise", "ValueError", "(", "(", "\n", "\"requested an output size of {}, but valid sizes range \"", "\n", "\"from {} to {} (for an input of {})\"", ")", ".", "format", "(", "\n", "output_size", ",", "min_sizes", ",", "max_sizes", ",", "input", ".", "size", "(", ")", "[", "2", ":", "]", ")", ")", "\n", "\n", "", "", "return", "tuple", "(", "[", "output_size", "[", "d", "]", "-", "min_sizes", "[", "d", "]", "for", "d", "in", "range", "(", "k", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.XuelianCheng_LidarStereoNet.models.padding_same.ConvTranspose3d.__init__": [[232, 242], ["torch.nn.modules.utils._triple", "torch.nn.modules.utils._triple", "torch.nn.modules.utils._triple", "torch.nn.modules.utils._triple", "torch.nn.modules.utils._triple", "torch.nn.modules.utils._triple", "torch.nn.modules.utils._triple", "torch.nn.modules.utils._triple", "torch.nn.modules.utils._triple", "torch.nn.modules.utils._triple", "torch.nn.modules.utils._triple", "torch.nn.modules.utils._triple", "torch.nn.modules.utils._triple", "torch.nn.modules.utils._triple", "torch.nn.modules.utils._triple", "object.__init__"], "methods", ["home.repos.pwc.inspect_result.XuelianCheng_LidarStereoNet.models.SparseConvNet.SparseConvNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", "=", "1", ",", "\n", "padding", "=", "0", ",", "output_padding", "=", "0", ",", "groups", "=", "1", ",", "bias", "=", "True", ",", "dilation", "=", "1", ")", ":", "\n", "        ", "kernel_size", "=", "_triple", "(", "kernel_size", ")", "\n", "stride", "=", "_triple", "(", "stride", ")", "\n", "padding", "=", "_triple", "(", "padding", ")", "\n", "dilation", "=", "_triple", "(", "dilation", ")", "\n", "output_padding", "=", "_triple", "(", "output_padding", ")", "\n", "super", "(", "ConvTranspose3d", ",", "self", ")", ".", "__init__", "(", "\n", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", ",", "padding", ",", "dilation", ",", "\n", "True", ",", "output_padding", ",", "groups", ",", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.XuelianCheng_LidarStereoNet.models.padding_same.ConvTranspose3d.forward": [[243, 248], ["padding_same.ConvTranspose3d._output_padding", "padding_same.conv_transpose3d_same_padding"], "methods", ["home.repos.pwc.inspect_result.XuelianCheng_LidarStereoNet.models.padding_same._ConvTransposeMixin._output_padding", "home.repos.pwc.inspect_result.XuelianCheng_LidarStereoNet.models.padding_same.conv_transpose3d_same_padding"], ["", "def", "forward", "(", "self", ",", "input", ",", "output_size", "=", "None", ")", ":", "\n", "        ", "output_padding", "=", "self", ".", "_output_padding", "(", "input", ",", "output_size", ")", "\n", "return", "conv_transpose3d_same_padding", "(", "\n", "input", ",", "self", ".", "weight", ",", "self", ".", "bias", ",", "self", ".", "stride", ",", "self", ".", "padding", ",", "\n", "output_padding", ",", "self", ".", "groups", ",", "self", ".", "dilation", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.XuelianCheng_LidarStereoNet.models.padding_same.convbn": [[14, 17], ["torch.Sequential", "padding_same.Conv2d", "torch.BatchNorm2d"], "function", ["None"], ["def", "convbn", "(", "in_planes", ",", "out_planes", ",", "kernel_size", ",", "stride", ",", "pad", ",", "dilation", ")", ":", "\n", "    ", "return", "nn", ".", "Sequential", "(", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "kernel_size", ",", "stride", "=", "stride", ",", "padding", "=", "pad", ",", "dilation", "=", "dilation", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_planes", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.XuelianCheng_LidarStereoNet.models.padding_same.convbn_3d": [[18, 21], ["torch.Sequential", "padding_same.Conv3d", "torch.BatchNorm3d"], "function", ["None"], ["", "def", "convbn_3d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", ",", "stride", ",", "pad", ",", "dilation", ")", ":", "\n", "    ", "return", "nn", ".", "Sequential", "(", "Conv3d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "kernel_size", ",", "stride", "=", "stride", ",", "padding", "=", "pad", ",", "dilation", "=", "dilation", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm3d", "(", "out_planes", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.XuelianCheng_LidarStereoNet.models.padding_same.convbn_Transpose3d": [[22, 27], ["torch.Sequential", "torch.ConvTranspose3d", "torch.BatchNorm3d", "torch.ReLU"], "function", ["None"], ["", "def", "convbn_Transpose3d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", ",", "stride", ",", "pad", ",", "output_padding", ",", "dilation", ",", "bias", ")", ":", "\n", "    ", "return", "nn", ".", "Sequential", "(", "nn", ".", "ConvTranspose3d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "kernel_size", ",", "stride", "=", "stride", ",", "padding", "=", "pad", ",", "\n", "output_padding", "=", "output_padding", ",", "dilation", "=", "dilation", ",", "bias", "=", "bias", ")", ",", "\n", "nn", ".", "BatchNorm3d", "(", "out_planes", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.XuelianCheng_LidarStereoNet.models.padding_same.conv2d_same_padding": [[38, 59], ["torch.nn.functional.pad.size", "weight.size", "max", "max", "torch.nn.functional.conv2d", "torch.nn.functional.pad", "int", "int"], "function", ["None"], ["", "", "def", "conv2d_same_padding", "(", "input", ",", "weight", ",", "bias", "=", "None", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "dilation", "=", "1", ",", "groups", "=", "1", ")", ":", "\n", "    ", "input_rows", "=", "input", ".", "size", "(", "2", ")", "\n", "filter_rows", "=", "weight", ".", "size", "(", "2", ")", "\n", "#effective_filter_size_rows = (filter_rows - 1) * dilation[0] + 1", "\n", "out_rows", "=", "(", "input_rows", "+", "stride", "[", "0", "]", "-", "1", ")", "//", "stride", "[", "0", "]", "\n", "\n", "#padding_needed = max(0, (out_rows - 1) * stride[0] + effective_filter_size_rows - input_rows)", "\n", "\n", "padding_rows", "=", "max", "(", "0", ",", "(", "out_rows", "-", "1", ")", "*", "stride", "[", "0", "]", "+", "\n", "(", "filter_rows", "-", "1", ")", "*", "dilation", "[", "0", "]", "+", "1", "-", "input_rows", ")", "\n", "rows_odd", "=", "(", "padding_rows", "%", "2", "!=", "0", ")", "\n", "padding_cols", "=", "max", "(", "0", ",", "(", "out_rows", "-", "1", ")", "*", "stride", "[", "0", "]", "+", "\n", "(", "filter_rows", "-", "1", ")", "*", "dilation", "[", "0", "]", "+", "1", "-", "input_rows", ")", "\n", "cols_odd", "=", "(", "padding_rows", "%", "2", "!=", "0", ")", "\n", "\n", "if", "rows_odd", "or", "cols_odd", ":", "\n", "        ", "input", "=", "pad", "(", "input", ",", "[", "0", ",", "int", "(", "cols_odd", ")", ",", "0", ",", "int", "(", "rows_odd", ")", "]", ")", "\n", "\n", "", "return", "F", ".", "conv2d", "(", "input", ",", "weight", ",", "bias", ",", "stride", ",", "\n", "padding", "=", "(", "padding_rows", "//", "2", ",", "padding_cols", "//", "2", ")", ",", "\n", "dilation", "=", "dilation", ",", "groups", "=", "groups", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.XuelianCheng_LidarStereoNet.models.padding_same.conv3d_same_padding": [[60, 81], ["torch.nn.functional.pad.size", "weight.size", "max", "max", "max", "torch.nn.functional.conv3d", "torch.nn.functional.pad", "int", "int", "int"], "function", ["None"], ["", "def", "conv3d_same_padding", "(", "input", ",", "weight", ",", "bias", "=", "None", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "dilation", "=", "1", ",", "groups", "=", "1", ")", ":", "\n", "    ", "input_rows", "=", "input", ".", "size", "(", "3", ")", "\n", "filter_rows", "=", "weight", ".", "size", "(", "3", ")", "\n", "#effective_filter_size_rows = (filter_rows - 1) * dilation[0] + 1", "\n", "out_rows", "=", "(", "input_rows", "+", "stride", "[", "0", "]", "-", "1", ")", "//", "stride", "[", "0", "]", "\n", "padding_rows", "=", "max", "(", "0", ",", "(", "out_rows", "-", "1", ")", "*", "stride", "[", "0", "]", "+", "\n", "(", "filter_rows", "-", "1", ")", "*", "dilation", "[", "0", "]", "+", "1", "-", "input_rows", ")", "\n", "rows_odd", "=", "(", "padding_rows", "%", "2", "!=", "0", ")", "\n", "padding_cols", "=", "max", "(", "0", ",", "(", "out_rows", "-", "1", ")", "*", "stride", "[", "0", "]", "+", "\n", "(", "filter_rows", "-", "1", ")", "*", "dilation", "[", "0", "]", "+", "1", "-", "input_rows", ")", "\n", "cols_odd", "=", "(", "padding_rows", "%", "2", "!=", "0", ")", "\n", "padding_d", "=", "max", "(", "0", ",", "(", "out_rows", "-", "1", ")", "*", "stride", "[", "0", "]", "+", "\n", "(", "filter_rows", "-", "1", ")", "*", "dilation", "[", "0", "]", "+", "1", "-", "input_rows", ")", "\n", "d_odd", "=", "(", "padding_rows", "%", "2", "!=", "0", ")", "\n", "\n", "if", "rows_odd", "or", "cols_odd", "or", "d_odd", ":", "\n", "        ", "input", "=", "pad", "(", "input", ",", "[", "0", ",", "int", "(", "d_odd", ")", ",", "0", ",", "int", "(", "cols_odd", ")", ",", "0", ",", "int", "(", "rows_odd", ")", "]", ")", "\n", "\n", "", "return", "F", ".", "conv3d", "(", "input", ",", "weight", ",", "bias", ",", "stride", ",", "\n", "padding", "=", "(", "padding_d", "//", "2", ",", "padding_rows", "//", "2", ",", "padding_cols", "//", "2", ")", ",", "\n", "dilation", "=", "dilation", ",", "groups", "=", "groups", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.XuelianCheng_LidarStereoNet.models.padding_same.conv_transpose3d_same_padding": [[82, 104], ["torch.nn.functional.pad.size", "weight.size", "max", "max", "max", "torch.nn.functional.conv_transpose3d", "torch.nn.functional.pad", "int", "int", "int"], "function", ["None"], ["", "def", "conv_transpose3d_same_padding", "(", "input", ",", "weight", ",", "bias", "=", "None", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "dilation", "=", "1", ",", "output_padding", "=", "0", ",", "groups", "=", "1", ")", ":", "\n", "    ", "input_rows", "=", "input", ".", "size", "(", "3", ")", "\n", "filter_rows", "=", "weight", ".", "size", "(", "3", ")", "\n", "effective_filter_size_rows", "=", "(", "filter_rows", "-", "1", ")", "*", "dilation", "[", "0", "]", "+", "1", "\n", "out_rows", "=", "(", "input_rows", "+", "stride", "[", "0", "]", "-", "1", ")", "//", "stride", "[", "0", "]", "\n", "\n", "padding_rows", "=", "max", "(", "0", ",", "(", "out_rows", "-", "1", ")", "*", "stride", "[", "0", "]", "+", "\n", "(", "filter_rows", "-", "1", ")", "*", "dilation", "[", "0", "]", "+", "1", "-", "input_rows", ")", "\n", "rows_odd", "=", "(", "padding_rows", "%", "2", "!=", "0", ")", "\n", "padding_cols", "=", "max", "(", "0", ",", "(", "out_rows", "-", "1", ")", "*", "stride", "[", "0", "]", "+", "\n", "(", "filter_rows", "-", "1", ")", "*", "dilation", "[", "0", "]", "+", "1", "-", "input_rows", ")", "\n", "cols_odd", "=", "(", "padding_rows", "%", "2", "!=", "0", ")", "\n", "padding_d", "=", "max", "(", "0", ",", "(", "out_rows", "-", "1", ")", "*", "stride", "[", "0", "]", "+", "\n", "(", "filter_rows", "-", "1", ")", "*", "dilation", "[", "0", "]", "+", "1", "-", "input_rows", ")", "\n", "d_odd", "=", "(", "padding_rows", "%", "2", "!=", "0", ")", "\n", "\n", "if", "rows_odd", "or", "cols_odd", "or", "d_odd", ":", "\n", "        ", "input", "=", "pad", "(", "input", ",", "[", "0", ",", "int", "(", "d_odd", ")", ",", "0", ",", "int", "(", "cols_odd", ")", ",", "0", ",", "int", "(", "rows_odd", ")", "]", ")", "\n", "\n", "", "return", "F", ".", "conv_transpose3d", "(", "input", ",", "weight", ",", "bias", ",", "stride", ",", "\n", "padding", "=", "(", "padding_d", "//", "2", ",", "padding_rows", "//", "2", ",", "padding_cols", "//", "2", ")", ",", "output_padding", "=", "(", "padding_d", "//", "2", ",", "padding_rows", "//", "2", ",", "padding_cols", "//", "2", ")", ",", "\n", "groups", "=", "groups", ",", "dilation", "=", "dilation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.XuelianCheng_LidarStereoNet.models.submodule.BasicBlock.__init__": [[23, 33], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "submodule.convbn", "submodule.convbn", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.XuelianCheng_LidarStereoNet.models.SparseConvNet.SparseConvNet.__init__", "home.repos.pwc.inspect_result.XuelianCheng_LidarStereoNet.models.submodule.convbn", "home.repos.pwc.inspect_result.XuelianCheng_LidarStereoNet.models.submodule.convbn"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ",", "pad", ",", "dilation", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Sequential", "(", "convbn", "(", "inplanes", ",", "planes", ",", "3", ",", "stride", ",", "pad", ",", "dilation", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "\n", "self", ".", "conv2", "=", "convbn", "(", "planes", ",", "planes", ",", "3", ",", "1", ",", "pad", ",", "dilation", ")", "\n", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.XuelianCheng_LidarStereoNet.models.submodule.BasicBlock.forward": [[34, 44], ["submodule.BasicBlock.conv1", "submodule.BasicBlock.conv2", "submodule.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "x", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "x", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.XuelianCheng_LidarStereoNet.models.submodule.matchshifted.__init__": [[46, 48], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.XuelianCheng_LidarStereoNet.models.SparseConvNet.SparseConvNet.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "matchshifted", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.XuelianCheng_LidarStereoNet.models.submodule.matchshifted.forward": [[49, 55], ["left.size", "torch.pad", "torch.pad", "torch.pad", "torch.pad", "torch.pad", "torch.pad", "torch.pad", "torch.pad", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "range", "range"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "left", ",", "right", ",", "shift", ")", ":", "\n", "        ", "batch", ",", "filters", ",", "height", ",", "width", "=", "left", ".", "size", "(", ")", "\n", "shifted_left", "=", "F", ".", "pad", "(", "torch", ".", "index_select", "(", "left", ",", "4", ",", "Variable", "(", "torch", ".", "LongTensor", "(", "[", "i", "for", "i", "in", "range", "(", "shift", ",", "width", ")", "]", ")", ")", ".", "cuda", "(", ")", ")", ",", "(", "shift", ",", "0", ",", "0", ",", "0", ")", ")", "\n", "shifted_right", "=", "F", ".", "pad", "(", "torch", ".", "index_select", "(", "right", ",", "4", ",", "Variable", "(", "torch", ".", "LongTensor", "(", "[", "i", "for", "i", "in", "range", "(", "width", "-", "shift", ")", "]", ")", ")", ".", "cuda", "(", ")", ")", ",", "(", "shift", ",", "0", ",", "0", ",", "0", ")", ")", "\n", "out", "=", "torch", ".", "cat", "(", "(", "shifted_left", ",", "shifted_right", ")", ",", "1", ")", ".", "view", "(", "batch", ",", "filters", "*", "2", ",", "1", ",", "height", ",", "width", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.XuelianCheng_LidarStereoNet.models.submodule.disparityregression.__init__": [[57, 60], ["torch.Module.__init__", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "numpy.reshape", "numpy.array", "range"], "methods", ["home.repos.pwc.inspect_result.XuelianCheng_LidarStereoNet.models.SparseConvNet.SparseConvNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "maxdisp", ")", ":", "\n", "        ", "super", "(", "disparityregression", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "disp", "=", "Variable", "(", "torch", ".", "Tensor", "(", "np", ".", "reshape", "(", "np", ".", "array", "(", "range", "(", "maxdisp", ")", ")", ",", "[", "1", ",", "maxdisp", ",", "1", ",", "1", "]", ")", ")", ".", "cuda", "(", ")", ",", "requires_grad", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.XuelianCheng_LidarStereoNet.models.submodule.disparityregression.forward": [[61, 65], ["submodule.disparityregression.disp.repeat", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "x.size", "x.size", "x.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "disp", "=", "self", ".", "disp", ".", "repeat", "(", "x", ".", "size", "(", ")", "[", "0", "]", ",", "1", ",", "x", ".", "size", "(", ")", "[", "2", "]", ",", "x", ".", "size", "(", ")", "[", "3", "]", ")", "\n", "out", "=", "torch", ".", "sum", "(", "x", "*", "disp", ",", "1", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.XuelianCheng_LidarStereoNet.models.submodule.disparityentropy.__init__": [[67, 69], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.XuelianCheng_LidarStereoNet.models.SparseConvNet.SparseConvNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "maxdisp", ")", ":", "\n", "        ", "super", "(", "disparityentropy", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.XuelianCheng_LidarStereoNet.models.submodule.disparityentropy.forward": [[70, 73], ["torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "torch", ".", "sum", "(", "-", "x", "*", "torch", ".", "log", "(", "x", ")", ",", "1", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.XuelianCheng_LidarStereoNet.models.submodule.feature_extraction.__init__": [[75, 109], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "submodule.feature_extraction._make_layer", "submodule.feature_extraction._make_layer", "submodule.feature_extraction._make_layer", "submodule.feature_extraction._make_layer", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "submodule.convbn", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "submodule.convbn", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "submodule.convbn", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "submodule.convbn", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "submodule.convbn", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "submodule.convbn", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "submodule.convbn", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "submodule.convbn", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.XuelianCheng_LidarStereoNet.models.SparseConvNet.SparseConvNet.__init__", "home.repos.pwc.inspect_result.XuelianCheng_LidarStereoNet.models.submodule.feature_extraction._make_layer", "home.repos.pwc.inspect_result.XuelianCheng_LidarStereoNet.models.submodule.feature_extraction._make_layer", "home.repos.pwc.inspect_result.XuelianCheng_LidarStereoNet.models.submodule.feature_extraction._make_layer", "home.repos.pwc.inspect_result.XuelianCheng_LidarStereoNet.models.submodule.feature_extraction._make_layer", "home.repos.pwc.inspect_result.XuelianCheng_LidarStereoNet.models.submodule.convbn", "home.repos.pwc.inspect_result.XuelianCheng_LidarStereoNet.models.submodule.convbn", "home.repos.pwc.inspect_result.XuelianCheng_LidarStereoNet.models.submodule.convbn", "home.repos.pwc.inspect_result.XuelianCheng_LidarStereoNet.models.submodule.convbn", "home.repos.pwc.inspect_result.XuelianCheng_LidarStereoNet.models.submodule.convbn", "home.repos.pwc.inspect_result.XuelianCheng_LidarStereoNet.models.submodule.convbn", "home.repos.pwc.inspect_result.XuelianCheng_LidarStereoNet.models.submodule.convbn", "home.repos.pwc.inspect_result.XuelianCheng_LidarStereoNet.models.submodule.convbn"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "feature_extraction", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "inplanes", "=", "32", "\n", "self", ".", "firstconv", "=", "nn", ".", "Sequential", "(", "convbn", "(", "3", ",", "32", ",", "3", ",", "2", ",", "1", ",", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "convbn", "(", "32", ",", "32", ",", "3", ",", "1", ",", "1", ",", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "convbn", "(", "32", ",", "32", ",", "3", ",", "1", ",", "1", ",", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "BasicBlock", ",", "32", ",", "3", ",", "1", ",", "1", ",", "1", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "BasicBlock", ",", "64", ",", "16", ",", "2", ",", "1", ",", "1", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "BasicBlock", ",", "128", ",", "3", ",", "1", ",", "1", ",", "1", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "BasicBlock", ",", "128", ",", "3", ",", "1", ",", "1", ",", "2", ")", "\n", "\n", "self", ".", "branch1", "=", "nn", ".", "Sequential", "(", "nn", ".", "AvgPool2d", "(", "(", "64", ",", "64", ")", ",", "stride", "=", "(", "64", ",", "64", ")", ")", ",", "\n", "convbn", "(", "128", ",", "32", ",", "1", ",", "1", ",", "0", ",", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "\n", "self", ".", "branch2", "=", "nn", ".", "Sequential", "(", "nn", ".", "AvgPool2d", "(", "(", "32", ",", "32", ")", ",", "stride", "=", "(", "32", ",", "32", ")", ")", ",", "\n", "convbn", "(", "128", ",", "32", ",", "1", ",", "1", ",", "0", ",", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "\n", "self", ".", "branch3", "=", "nn", ".", "Sequential", "(", "nn", ".", "AvgPool2d", "(", "(", "16", ",", "16", ")", ",", "stride", "=", "(", "16", ",", "16", ")", ")", ",", "\n", "convbn", "(", "128", ",", "32", ",", "1", ",", "1", ",", "0", ",", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "\n", "self", ".", "branch4", "=", "nn", ".", "Sequential", "(", "nn", ".", "AvgPool2d", "(", "(", "8", ",", "8", ")", ",", "stride", "=", "(", "8", ",", "8", ")", ")", ",", "\n", "convbn", "(", "128", ",", "32", ",", "1", ",", "1", ",", "0", ",", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "\n", "self", ".", "lastconv", "=", "nn", ".", "Sequential", "(", "convbn", "(", "320", ",", "128", ",", "3", ",", "1", ",", "1", ",", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "128", ",", "32", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.XuelianCheng_LidarStereoNet.models.submodule.feature_extraction._make_layer": [[110, 125], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "block"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", ",", "pad", ",", "dilation", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "           ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ")", ",", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ",", "pad", ",", "dilation", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "1", ",", "None", ",", "pad", ",", "dilation", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.XuelianCheng_LidarStereoNet.models.submodule.feature_extraction.forward": [[126, 150], ["submodule.feature_extraction.firstconv", "submodule.feature_extraction.layer1", "submodule.feature_extraction.layer2", "submodule.feature_extraction.layer3", "submodule.feature_extraction.layer4", "submodule.feature_extraction.branch1", "torch.upsample", "torch.upsample", "torch.upsample", "torch.upsample", "submodule.feature_extraction.branch2", "torch.upsample", "torch.upsample", "torch.upsample", "torch.upsample", "submodule.feature_extraction.branch3", "torch.upsample", "torch.upsample", "torch.upsample", "torch.upsample", "submodule.feature_extraction.branch4", "torch.upsample", "torch.upsample", "torch.upsample", "torch.upsample", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "submodule.feature_extraction.lastconv", "submodule.feature_extraction.size", "submodule.feature_extraction.size", "submodule.feature_extraction.size", "submodule.feature_extraction.size", "submodule.feature_extraction.size", "submodule.feature_extraction.size", "submodule.feature_extraction.size", "submodule.feature_extraction.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "output", "=", "self", ".", "firstconv", "(", "x", ")", "\n", "output", "=", "self", ".", "layer1", "(", "output", ")", "\n", "output_raw", "=", "self", ".", "layer2", "(", "output", ")", "\n", "output", "=", "self", ".", "layer3", "(", "output_raw", ")", "\n", "output_skip", "=", "self", ".", "layer4", "(", "output", ")", "\n", "\n", "\n", "output_branch1", "=", "self", ".", "branch1", "(", "output_skip", ")", "\n", "output_branch1", "=", "F", ".", "upsample", "(", "output_branch1", ",", "(", "output_skip", ".", "size", "(", ")", "[", "2", "]", ",", "output_skip", ".", "size", "(", ")", "[", "3", "]", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "\n", "output_branch2", "=", "self", ".", "branch2", "(", "output_skip", ")", "\n", "output_branch2", "=", "F", ".", "upsample", "(", "output_branch2", ",", "(", "output_skip", ".", "size", "(", ")", "[", "2", "]", ",", "output_skip", ".", "size", "(", ")", "[", "3", "]", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "\n", "output_branch3", "=", "self", ".", "branch3", "(", "output_skip", ")", "\n", "output_branch3", "=", "F", ".", "upsample", "(", "output_branch3", ",", "(", "output_skip", ".", "size", "(", ")", "[", "2", "]", ",", "output_skip", ".", "size", "(", ")", "[", "3", "]", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "\n", "output_branch4", "=", "self", ".", "branch4", "(", "output_skip", ")", "\n", "output_branch4", "=", "F", ".", "upsample", "(", "output_branch4", ",", "(", "output_skip", ".", "size", "(", ")", "[", "2", "]", ",", "output_skip", ".", "size", "(", ")", "[", "3", "]", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "\n", "output_feature", "=", "torch", ".", "cat", "(", "(", "output_raw", ",", "output_skip", ",", "output_branch4", ",", "output_branch3", ",", "output_branch2", ",", "output_branch1", ")", ",", "1", ")", "\n", "output_feature", "=", "self", ".", "lastconv", "(", "output_feature", ")", "\n", "\n", "return", "output_feature", "\n", "\n"]], "home.repos.pwc.inspect_result.XuelianCheng_LidarStereoNet.models.submodule.convbn": [[10, 14], ["torch.Sequential", "torch.Conv2d", "torch.BatchNorm2d"], "function", ["None"], ["def", "convbn", "(", "in_planes", ",", "out_planes", ",", "kernel_size", ",", "stride", ",", "pad", ",", "dilation", ")", ":", "\n", "\n", "    ", "return", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "kernel_size", ",", "stride", "=", "stride", ",", "padding", "=", "dilation", ",", "dilation", "=", "dilation", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_planes", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.XuelianCheng_LidarStereoNet.models.submodule.convbn_3d": [[16, 20], ["torch.Sequential", "torch.Conv3d", "torch.BatchNorm3d"], "function", ["None"], ["", "def", "convbn_3d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", ",", "stride", ",", "pad", ",", "dilation", "=", "1", ")", ":", "\n", "\n", "    ", "return", "nn", ".", "Sequential", "(", "nn", ".", "Conv3d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "kernel_size", ",", "padding", "=", "pad", ",", "stride", "=", "stride", ",", "dilation", "=", "dilation", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm3d", "(", "out_planes", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.XuelianCheng_LidarStereoNet.models.stackhourglass.hourglass.__init__": [[12, 31], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "submodule.convbn_3d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "submodule.convbn_3d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "submodule.convbn_3d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "submodule.convbn_3d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ConvTranspose3d", "torch.ConvTranspose3d", "torch.ConvTranspose3d", "torch.ConvTranspose3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.ConvTranspose3d", "torch.ConvTranspose3d", "torch.ConvTranspose3d", "torch.ConvTranspose3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d"], "methods", ["home.repos.pwc.inspect_result.XuelianCheng_LidarStereoNet.models.SparseConvNet.SparseConvNet.__init__", "home.repos.pwc.inspect_result.XuelianCheng_LidarStereoNet.models.submodule.convbn_3d", "home.repos.pwc.inspect_result.XuelianCheng_LidarStereoNet.models.submodule.convbn_3d", "home.repos.pwc.inspect_result.XuelianCheng_LidarStereoNet.models.submodule.convbn_3d", "home.repos.pwc.inspect_result.XuelianCheng_LidarStereoNet.models.submodule.convbn_3d"], ["    ", "def", "__init__", "(", "self", ",", "inplanes", ")", ":", "\n", "        ", "super", "(", "hourglass", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Sequential", "(", "convbn_3d", "(", "inplanes", ",", "inplanes", "*", "2", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "pad", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "\n", "self", ".", "conv2", "=", "convbn_3d", "(", "inplanes", "*", "2", ",", "inplanes", "*", "2", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "pad", "=", "1", ")", "\n", "\n", "self", ".", "conv3", "=", "nn", ".", "Sequential", "(", "convbn_3d", "(", "inplanes", "*", "2", ",", "inplanes", "*", "2", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "pad", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "\n", "self", ".", "conv4", "=", "nn", ".", "Sequential", "(", "convbn_3d", "(", "inplanes", "*", "2", ",", "inplanes", "*", "2", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "pad", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "\n", "self", ".", "conv5", "=", "nn", ".", "Sequential", "(", "nn", ".", "ConvTranspose3d", "(", "inplanes", "*", "2", ",", "inplanes", "*", "2", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "output_padding", "=", "1", ",", "stride", "=", "2", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm3d", "(", "inplanes", "*", "2", ")", ")", "#+conv2", "\n", "\n", "self", ".", "conv6", "=", "nn", ".", "Sequential", "(", "nn", ".", "ConvTranspose3d", "(", "inplanes", "*", "2", ",", "inplanes", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "output_padding", "=", "1", ",", "stride", "=", "2", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm3d", "(", "inplanes", ")", ")", "#+x", "\n", "\n"]], "home.repos.pwc.inspect_result.XuelianCheng_LidarStereoNet.models.stackhourglass.hourglass.forward": [[32, 52], ["stackhourglass.hourglass.conv1", "stackhourglass.hourglass.conv2", "stackhourglass.hourglass.conv3", "stackhourglass.hourglass.conv4", "stackhourglass.hourglass.conv6", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "stackhourglass.hourglass.conv5", "stackhourglass.hourglass.conv5"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "presqu", ",", "postsqu", ")", ":", "\n", "\n", "        ", "out", "=", "self", ".", "conv1", "(", "x", ")", "#in:1/4 out:1/8", "\n", "pre", "=", "self", ".", "conv2", "(", "out", ")", "#in:1/8 out:1/8", "\n", "if", "postsqu", "is", "not", "None", ":", "\n", "           ", "pre", "=", "F", ".", "relu", "(", "pre", "+", "postsqu", ",", "inplace", "=", "True", ")", "\n", "", "else", ":", "\n", "           ", "pre", "=", "F", ".", "relu", "(", "pre", ",", "inplace", "=", "True", ")", "\n", "\n", "", "out", "=", "self", ".", "conv3", "(", "pre", ")", "#in:1/8 out:1/16", "\n", "out", "=", "self", ".", "conv4", "(", "out", ")", "#in:1/16 out:1/16", "\n", "\n", "if", "presqu", "is", "not", "None", ":", "\n", "           ", "post", "=", "F", ".", "relu", "(", "self", ".", "conv5", "(", "out", ")", "+", "presqu", ",", "inplace", "=", "True", ")", "#in:1/16 out:1/8", "\n", "", "else", ":", "\n", "           ", "post", "=", "F", ".", "relu", "(", "self", ".", "conv5", "(", "out", ")", "+", "pre", ",", "inplace", "=", "True", ")", "\n", "\n", "", "out", "=", "self", ".", "conv6", "(", "post", ")", "#in:1/8 out:1/4", "\n", "\n", "return", "out", ",", "pre", ",", "post", "\n", "\n"]], "home.repos.pwc.inspect_result.XuelianCheng_LidarStereoNet.models.stackhourglass.PSMNet.__init__": [[54, 103], ["torch.Module.__init__", "submodule.feature_extraction", "SparseConvNet.SparseConvNet.SparseConvNet", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "stackhourglass.hourglass", "stackhourglass.hourglass", "stackhourglass.hourglass", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "stackhourglass.PSMNet.modules", "submodule.convbn_3d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "submodule.convbn_3d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "submodule.convbn_3d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "submodule.convbn_3d", "submodule.convbn_3d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "submodule.convbn_3d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "submodule.convbn_3d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "isinstance", "m.weight.data.normal_", "isinstance", "math.sqrt", "m.weight.data.normal_", "isinstance", "math.sqrt", "m.weight.data.fill_", "m.bias.data.zero_", "isinstance", "m.weight.data.fill_", "m.bias.data.zero_", "isinstance", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.XuelianCheng_LidarStereoNet.models.SparseConvNet.SparseConvNet.__init__", "home.repos.pwc.inspect_result.XuelianCheng_LidarStereoNet.models.submodule.convbn_3d", "home.repos.pwc.inspect_result.XuelianCheng_LidarStereoNet.models.submodule.convbn_3d", "home.repos.pwc.inspect_result.XuelianCheng_LidarStereoNet.models.submodule.convbn_3d", "home.repos.pwc.inspect_result.XuelianCheng_LidarStereoNet.models.submodule.convbn_3d", "home.repos.pwc.inspect_result.XuelianCheng_LidarStereoNet.models.submodule.convbn_3d", "home.repos.pwc.inspect_result.XuelianCheng_LidarStereoNet.models.submodule.convbn_3d", "home.repos.pwc.inspect_result.XuelianCheng_LidarStereoNet.models.submodule.convbn_3d"], ["    ", "def", "__init__", "(", "self", ",", "maxdisp", ")", ":", "\n", "        ", "super", "(", "PSMNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "maxdisp", "=", "maxdisp", "\n", "\n", "self", ".", "feature_extraction", "=", "feature_extraction", "(", ")", "\n", "self", ".", "feature_disp_pre", "=", "SparseConvNet", "(", ")", "\n", "\n", "self", ".", "dres0", "=", "nn", ".", "Sequential", "(", "convbn_3d", "(", "96", ",", "32", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "convbn_3d", "(", "32", ",", "32", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "\n", "self", ".", "dres1", "=", "nn", ".", "Sequential", "(", "convbn_3d", "(", "32", ",", "32", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "convbn_3d", "(", "32", ",", "32", ",", "3", ",", "1", ",", "1", ")", ")", "\n", "\n", "self", ".", "dres2", "=", "hourglass", "(", "32", ")", "\n", "\n", "self", ".", "dres3", "=", "hourglass", "(", "32", ")", "\n", "\n", "self", ".", "dres4", "=", "hourglass", "(", "32", ")", "\n", "\n", "self", ".", "classif1", "=", "nn", ".", "Sequential", "(", "convbn_3d", "(", "32", ",", "32", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv3d", "(", "32", ",", "1", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", ")", "\n", "\n", "self", ".", "classif2", "=", "nn", ".", "Sequential", "(", "convbn_3d", "(", "32", ",", "32", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv3d", "(", "32", ",", "1", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", ")", "\n", "\n", "self", ".", "classif3", "=", "nn", ".", "Sequential", "(", "convbn_3d", "(", "32", ",", "32", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv3d", "(", "32", ",", "1", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Conv3d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "kernel_size", "[", "2", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm3d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.XuelianCheng_LidarStereoNet.models.stackhourglass.PSMNet.forward": [[105, 210], ["stackhourglass.PSMNet.feature_extraction", "stackhourglass.PSMNet.feature_extraction", "stackhourglass.PSMNet.feature_disp_pre", "stackhourglass.PSMNet.feature_disp_pre", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "range", "costl.contiguous.contiguous.contiguous", "range", "costr.contiguous.contiguous.contiguous", "stackhourglass.PSMNet.dres0", "stackhourglass.PSMNet.dres2", "stackhourglass.PSMNet.dres3", "stackhourglass.PSMNet.dres4", "stackhourglass.PSMNet.classif1", "stackhourglass.PSMNet.dres0", "stackhourglass.PSMNet.dres2", "stackhourglass.PSMNet.dres3", "stackhourglass.PSMNet.dres4", "stackhourglass.PSMNet.classif1", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "int", "int", "stackhourglass.PSMNet.dres1", "stackhourglass.PSMNet.classif2", "stackhourglass.PSMNet.classif3", "stackhourglass.PSMNet.dres1", "stackhourglass.PSMNet.classif2", "stackhourglass.PSMNet.classif3", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "submodule.disparityregression", "submodule.disparityregression", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "submodule.disparityregression", "submodule.disparityregression", "submodule.disparityregression", "submodule.disparityregression", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "left.size", "left.size", "left.size", "right.size", "left.size", "left.size", "left.size", "left.size", "right.size", "right.size", "right.size", "right.size", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "int", "int", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "left", ",", "right", ",", "displ", ",", "dispr", ")", ":", "\n", "        ", "refimg_fea", "=", "self", ".", "feature_extraction", "(", "left", ")", "\n", "targetimg_fea", "=", "self", ".", "feature_extraction", "(", "right", ")", "\n", "reflidar_fea", "=", "self", ".", "feature_disp_pre", "(", "displ", ")", "\n", "targetlidar_fea", "=", "self", ".", "feature_disp_pre", "(", "dispr", ")", "\n", "#reflidar_fea    = F.interpolate(reflidar_fea, [refimg_fea.size()[2],refimg_fea.size()[3]])", "\n", "#targetlidar_fea = F.interpolate(targetlidar_fea, [refimg_fea.size()[2],refimg_fea.size()[3]])", "\n", "\n", "ref_fea", "=", "torch", ".", "cat", "(", "(", "refimg_fea", ",", "reflidar_fea", ")", ",", "1", ")", "\n", "target_fea", "=", "torch", ".", "cat", "(", "(", "targetimg_fea", ",", "targetlidar_fea", ")", ",", "1", ")", "\n", "\n", "#matching", "\n", "costl", "=", "Variable", "(", "torch", ".", "FloatTensor", "(", "ref_fea", ".", "size", "(", ")", "[", "0", "]", ",", "ref_fea", ".", "size", "(", ")", "[", "1", "]", "*", "2", ",", "int", "(", "self", ".", "maxdisp", "/", "4", ")", ",", "ref_fea", ".", "size", "(", ")", "[", "2", "]", ",", "ref_fea", ".", "size", "(", ")", "[", "3", "]", ")", ".", "zero_", "(", ")", ")", ".", "cuda", "(", ")", "\n", "costr", "=", "Variable", "(", "torch", ".", "FloatTensor", "(", "target_fea", ".", "size", "(", ")", "[", "0", "]", ",", "target_fea", ".", "size", "(", ")", "[", "1", "]", "*", "2", ",", "int", "(", "self", ".", "maxdisp", "/", "4", ")", ",", "target_fea", ".", "size", "(", ")", "[", "2", "]", ",", "target_fea", ".", "size", "(", ")", "[", "3", "]", ")", ".", "zero_", "(", ")", ")", ".", "cuda", "(", ")", "\n", "\n", "for", "i", "in", "range", "(", "int", "(", "self", ".", "maxdisp", "/", "4", ")", ")", ":", "\n", "            ", "if", "i", ">", "0", ":", "\n", "             ", "costl", "[", ":", ",", ":", "ref_fea", ".", "size", "(", ")", "[", "1", "]", ",", "i", ",", ":", ",", "i", ":", "]", "=", "ref_fea", "[", ":", ",", ":", ",", ":", ",", "i", ":", "]", "\n", "costl", "[", ":", ",", "ref_fea", ".", "size", "(", ")", "[", "1", "]", ":", ",", "i", ",", ":", ",", "i", ":", "]", "=", "target_fea", "[", ":", ",", ":", ",", ":", ",", ":", "-", "i", "]", "\n", "", "else", ":", "\n", "             ", "costl", "[", ":", ",", ":", "ref_fea", ".", "size", "(", ")", "[", "1", "]", ",", "i", ",", ":", ",", ":", "]", "=", "ref_fea", "\n", "costl", "[", ":", ",", "ref_fea", ".", "size", "(", ")", "[", "1", "]", ":", ",", "i", ",", ":", ",", ":", "]", "=", "target_fea", "\n", "", "", "costl", "=", "costl", ".", "contiguous", "(", ")", "\n", "\n", "for", "i", "in", "range", "(", "int", "(", "self", ".", "maxdisp", "/", "4", ")", ")", ":", "\n", "            ", "if", "i", ">", "0", ":", "\n", "             ", "costr", "[", ":", ",", ":", "target_fea", ".", "size", "(", ")", "[", "1", "]", ",", "i", ",", ":", ",", ":", "(", "target_fea", ".", "size", "(", ")", "[", "3", "]", "-", "i", ")", "]", "=", "target_fea", "[", ":", ",", ":", ",", ":", ",", ":", "-", "i", "]", "\n", "costr", "[", ":", ",", "target_fea", ".", "size", "(", ")", "[", "1", "]", ":", ",", "i", ",", ":", ",", ":", "(", "target_fea", ".", "size", "(", ")", "[", "3", "]", "-", "i", ")", "]", "=", "ref_fea", "[", ":", ",", ":", ",", ":", ",", "i", ":", "]", "\n", "", "else", ":", "\n", "             ", "costr", "[", ":", ",", ":", "target_fea", ".", "size", "(", ")", "[", "1", "]", ",", "i", ",", ":", ",", ":", "target_fea", ".", "size", "(", ")", "[", "3", "]", "]", "=", "target_fea", "\n", "costr", "[", ":", ",", "target_fea", ".", "size", "(", ")", "[", "1", "]", ":", ",", "i", ",", ":", ",", ":", "target_fea", ".", "size", "(", ")", "[", "3", "]", "]", "=", "ref_fea", "\n", "", "", "costr", "=", "costr", ".", "contiguous", "(", ")", "\n", "########################", "\n", "costl0", "=", "self", ".", "dres0", "(", "costl", ")", "\n", "costl0", "=", "self", ".", "dres1", "(", "costl0", ")", "+", "costl0", "\n", "\n", "outl1", ",", "prel1", ",", "postl1", "=", "self", ".", "dres2", "(", "costl0", ",", "None", ",", "None", ")", "\n", "outl1", "=", "outl1", "+", "costl0", "\n", "\n", "outl2", ",", "prel2", ",", "postl2", "=", "self", ".", "dres3", "(", "outl1", ",", "prel1", ",", "postl1", ")", "\n", "outl2", "=", "outl2", "+", "costl0", "\n", "\n", "outl3", ",", "prel3", ",", "postl3", "=", "self", ".", "dres4", "(", "outl2", ",", "prel1", ",", "postl2", ")", "\n", "outl3", "=", "outl3", "+", "costl0", "\n", "\n", "costl1", "=", "self", ".", "classif1", "(", "outl1", ")", "\n", "costl2", "=", "self", ".", "classif2", "(", "outl2", ")", "+", "costl1", "\n", "costl3", "=", "self", ".", "classif3", "(", "outl3", ")", "+", "costl2", "\n", "########################", "\n", "\n", "costr0", "=", "self", ".", "dres0", "(", "costr", ")", "\n", "costr0", "=", "self", ".", "dres1", "(", "costr0", ")", "+", "costr0", "\n", "\n", "outr1", ",", "prer1", ",", "postr1", "=", "self", ".", "dres2", "(", "costr0", ",", "None", ",", "None", ")", "\n", "outr1", "=", "outr1", "+", "costr0", "\n", "\n", "outr2", ",", "prer2", ",", "postr2", "=", "self", ".", "dres3", "(", "outr1", ",", "prer1", ",", "postr1", ")", "\n", "outr2", "=", "outr2", "+", "costr0", "\n", "\n", "outr3", ",", "prer3", ",", "postr3", "=", "self", ".", "dres4", "(", "outr2", ",", "prer1", ",", "postr2", ")", "\n", "outr3", "=", "outr3", "+", "costr0", "\n", "\n", "costr1", "=", "self", ".", "classif1", "(", "outr1", ")", "\n", "costr2", "=", "self", ".", "classif2", "(", "outr2", ")", "+", "costr1", "\n", "costr3", "=", "self", ".", "classif3", "(", "outr3", ")", "+", "costr2", "\n", "\n", "if", "self", ".", "training", ":", "\n", "            ", "costl1", "=", "F", ".", "interpolate", "(", "costl1", ",", "[", "self", ".", "maxdisp", ",", "left", ".", "size", "(", ")", "[", "2", "]", ",", "left", ".", "size", "(", ")", "[", "3", "]", "]", ",", "mode", "=", "'trilinear'", ",", "align_corners", "=", "True", ")", "\n", "costl2", "=", "F", ".", "interpolate", "(", "costl2", ",", "[", "self", ".", "maxdisp", ",", "left", ".", "size", "(", ")", "[", "2", "]", ",", "left", ".", "size", "(", ")", "[", "3", "]", "]", ",", "mode", "=", "'trilinear'", ",", "align_corners", "=", "True", ")", "\n", "\n", "costl1", "=", "torch", ".", "squeeze", "(", "costl1", ",", "1", ")", "\n", "predl1", "=", "F", ".", "softmax", "(", "costl1", ",", "dim", "=", "1", ")", "\n", "predl1", "=", "disparityregression", "(", "self", ".", "maxdisp", ")", "(", "predl1", ")", "\n", "\n", "costl2", "=", "torch", ".", "squeeze", "(", "costl2", ",", "1", ")", "\n", "predl2", "=", "F", ".", "softmax", "(", "costl2", ",", "dim", "=", "1", ")", "\n", "predl2", "=", "disparityregression", "(", "self", ".", "maxdisp", ")", "(", "predl2", ")", "\n", "\n", "########################            ", "\n", "costr1", "=", "F", ".", "interpolate", "(", "costr1", ",", "[", "self", ".", "maxdisp", ",", "right", ".", "size", "(", ")", "[", "2", "]", ",", "right", ".", "size", "(", ")", "[", "3", "]", "]", ",", "mode", "=", "'trilinear'", ",", "align_corners", "=", "True", ")", "\n", "costr2", "=", "F", ".", "interpolate", "(", "costr2", ",", "[", "self", ".", "maxdisp", ",", "right", ".", "size", "(", ")", "[", "2", "]", ",", "right", ".", "size", "(", ")", "[", "3", "]", "]", ",", "mode", "=", "'trilinear'", ",", "align_corners", "=", "True", ")", "\n", "\n", "costr1", "=", "torch", ".", "squeeze", "(", "costr1", ",", "1", ")", "\n", "predr1", "=", "F", ".", "softmax", "(", "costr1", ",", "dim", "=", "1", ")", "\n", "predr1", "=", "disparityregression", "(", "self", ".", "maxdisp", ")", "(", "predr1", ")", "\n", "\n", "costr2", "=", "torch", ".", "squeeze", "(", "costr2", ",", "1", ")", "\n", "predr2", "=", "F", ".", "softmax", "(", "costr2", ",", "dim", "=", "1", ")", "\n", "predr2", "=", "disparityregression", "(", "self", ".", "maxdisp", ")", "(", "predr2", ")", "\n", "\n", "########################    ", "\n", "", "costl3", "=", "F", ".", "interpolate", "(", "costl3", ",", "[", "self", ".", "maxdisp", ",", "left", ".", "size", "(", ")", "[", "2", "]", ",", "left", ".", "size", "(", ")", "[", "3", "]", "]", ",", "mode", "=", "'trilinear'", ",", "align_corners", "=", "True", ")", "\n", "costl3", "=", "torch", ".", "squeeze", "(", "costl3", ",", "1", ")", "\n", "predl3", "=", "F", ".", "softmax", "(", "costl3", ",", "dim", "=", "1", ")", "\n", "predl3", "=", "disparityregression", "(", "self", ".", "maxdisp", ")", "(", "predl3", ")", "\n", "\n", "costr3", "=", "F", ".", "interpolate", "(", "costr3", ",", "[", "self", ".", "maxdisp", ",", "left", ".", "size", "(", ")", "[", "2", "]", ",", "right", ".", "size", "(", ")", "[", "3", "]", "]", ",", "mode", "=", "'trilinear'", ",", "align_corners", "=", "True", ")", "\n", "costr3", "=", "torch", ".", "squeeze", "(", "costr3", ",", "1", ")", "\n", "predr3", "=", "F", ".", "softmax", "(", "costr3", ",", "dim", "=", "1", ")", "\n", "predr3", "=", "disparityregression", "(", "self", ".", "maxdisp", ")", "(", "predr3", ")", "\n", "\n", "if", "self", ".", "training", ":", "\n", "            ", "return", "predl1", ",", "predl2", ",", "predl3", ",", "predr1", ",", "predr2", ",", "predr3", "\n", "", "else", ":", "\n", "            ", "return", "predl3", ",", "predr3", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.XuelianCheng_LidarStereoNet.models.SparseConvNet.SparseConv.__init__": [[10, 20], ["torch.nn.Module.__init__", "torch.nn.Conv2d", "torch.nn.MaxPool2d", "torch.nn.init.kaiming_normal_", "torch.nn.Parameter", "torch.zeros().float", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.XuelianCheng_LidarStereoNet.models.SparseConvNet.SparseConvNet.__init__"], ["\t", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", ",", "padding", "=", "0", ",", "dilation", "=", "1", ",", "bias", "=", "True", ")", ":", "\n", "\t\t", "super", "(", "SparseConv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "dilation", "=", "dilation", ",", "bias", "=", "False", ")", "\n", "self", ".", "if_bias", "=", "bias", "\n", "if", "self", ".", "if_bias", ":", "\n", "\t\t\t", "self", ".", "bias", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "out_channels", ")", ".", "float", "(", ")", ",", "requires_grad", "=", "True", ")", "\n", "", "self", ".", "pool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "dilation", "=", "dilation", ")", "\n", "\n", "nn", ".", "init", ".", "kaiming_normal_", "(", "self", ".", "conv", ".", "weight", ",", "mode", "=", "'fan_out'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "self", ".", "pool", ".", "require_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.XuelianCheng_LidarStereoNet.models.SparseConvNet.SparseConv.forward": [[21, 37], ["SparseConvNet.SparseConv.expand_as", "SparseConvNet.SparseConv.conv", "torch.ones_like", "torch.nn.functional.conv2d", "torch.clamp", "SparseConvNet.SparseConv.pool", "SparseConvNet.SparseConv.bias.view().expand_as", "SparseConvNet.SparseConv.bias.view", "SparseConvNet.SparseConv.bias.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "\t\t", "x", ",", "m", "=", "input", "\n", "mc", "=", "m", ".", "expand_as", "(", "x", ")", "\n", "x", "=", "x", "*", "mc", "\n", "x", "=", "self", ".", "conv", "(", "x", ")", "\n", "\n", "weights", "=", "torch", ".", "ones_like", "(", "self", ".", "conv", ".", "weight", ")", "\n", "mc", "=", "F", ".", "conv2d", "(", "mc", ",", "weights", ",", "bias", "=", "None", ",", "stride", "=", "self", ".", "conv", ".", "stride", ",", "padding", "=", "self", ".", "conv", ".", "padding", ",", "dilation", "=", "self", ".", "conv", ".", "dilation", ")", "\n", "mc", "=", "torch", ".", "clamp", "(", "mc", ",", "min", "=", "1e-5", ")", "\n", "mc", "=", "1.", "/", "mc", "\n", "x", "=", "x", "*", "mc", "\n", "if", "self", ".", "if_bias", ":", "\n", "\t\t\t", "x", "=", "x", "+", "self", ".", "bias", ".", "view", "(", "1", ",", "self", ".", "bias", ".", "size", "(", "0", ")", ",", "1", ",", "1", ")", ".", "expand_as", "(", "x", ")", "\n", "", "m", "=", "self", ".", "pool", "(", "m", ")", "\n", "\n", "return", "x", ",", "m", "\n", "\n"]], "home.repos.pwc.inspect_result.XuelianCheng_LidarStereoNet.models.SparseConvNet.SparseConvBlock.__init__": [[40, 44], ["torch.nn.Module.__init__", "SparseConvNet.SparseConv", "torch.nn.ReLU"], "methods", ["home.repos.pwc.inspect_result.XuelianCheng_LidarStereoNet.models.SparseConvNet.SparseConvNet.__init__"], ["\t", "def", "__init__", "(", "self", ",", "in_channel", ",", "out_channel", ",", "kernel_size", ",", "stride", ",", "padding", "=", "0", ",", "dilation", "=", "1", ",", "bias", "=", "True", ")", ":", "\n", "\t\t", "super", "(", "SparseConvBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "sparse_conv", "=", "SparseConv", "(", "in_channel", ",", "out_channel", ",", "kernel_size", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "dilation", "=", "dilation", ",", "bias", "=", "True", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.XuelianCheng_LidarStereoNet.models.SparseConvNet.SparseConvBlock.forward": [[45, 51], ["SparseConvNet.SparseConvBlock.sparse_conv", "SparseConvNet.SparseConvBlock.relu", "m.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "\t\t", "x", ",", "m", "=", "input", "\n", "x", ",", "m", "=", "self", ".", "sparse_conv", "(", "(", "x", ",", "m", ")", ")", "\n", "assert", "(", "m", ".", "size", "(", "1", ")", "==", "1", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "return", "x", ",", "m", "\n", "\n"]], "home.repos.pwc.inspect_result.XuelianCheng_LidarStereoNet.models.SparseConvNet.SparseConvNet.__init__": [[54, 68], ["torch.nn.Module.__init__", "range", "torch.nn.Sequential", "torch.nn.Conv2d", "len", "SparseConvNet.SparseConvBlock"], "methods", ["home.repos.pwc.inspect_result.XuelianCheng_LidarStereoNet.models.SparseConvNet.SparseConvNet.__init__"], ["\t", "def", "__init__", "(", "self", ",", "in_channel", "=", "1", ",", "out_channel", "=", "16", ",", "kernels", "=", "[", "11", ",", "7", ",", "5", ",", "3", ",", "3", "]", ",", "mid_channel", "=", "16", ")", ":", "\n", "\t\t", "super", "(", "SparseConvNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "channel", "=", "in_channel", "\n", "convs", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "kernels", ")", ")", ":", "\n", "\t\t\t", "if", "i", "%", "2", ":", "\n", "\t\t\t\t", "stride", "=", "2", "\n", "", "else", ":", "\n", "\t\t\t    ", "stride", "=", "1", "\n", "", "assert", "(", "kernels", "[", "i", "]", "%", "2", "==", "1", ")", "\n", "convs", "+=", "[", "SparseConvBlock", "(", "channel", ",", "mid_channel", ",", "kernels", "[", "i", "]", ",", "stride", "=", "stride", ",", "padding", "=", "(", "kernels", "[", "i", "]", "-", "1", ")", "//", "2", ")", "]", "\n", "channel", "=", "mid_channel", "\n", "", "self", ".", "sparse_convs", "=", "nn", ".", "Sequential", "(", "*", "convs", ")", "\n", "self", ".", "mask_conv", "=", "nn", ".", "Conv2d", "(", "mid_channel", "+", "1", ",", "out_channel", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.XuelianCheng_LidarStereoNet.models.SparseConvNet.SparseConvNet.forward": [[69, 76], ["SparseConvNet.SparseConvNet.sparse_convs", "torch.cat", "SparseConvNet.SparseConvNet.mask_conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\t\t", "m", "=", "(", "x", ">", "0", ")", ".", "detach", "(", ")", ".", "float", "(", ")", "\n", "x", ",", "m", "=", "self", ".", "sparse_convs", "(", "(", "x", ",", "m", ")", ")", "\n", "x", "=", "torch", ".", "cat", "(", "(", "x", ",", "m", ")", ",", "dim", "=", "1", ")", "\n", "x", "=", "self", ".", "mask_conv", "(", "x", ")", "\n", "#print(x.shape)", "\n", "return", "x", "\n", "", "", ""]]}