{"home.repos.pwc.inspect_result.shachoi_RobustNet.None.config.assert_and_infer_cfg": [[95, 129], ["hasattr", "print", "print", "cfg.immutable", "cfg.immutable", "int", "args.strict_bdr_cls.split"], "function", ["home.repos.pwc.inspect_result.shachoi_RobustNet.utils.attr_dict.AttrDict.immutable", "home.repos.pwc.inspect_result.shachoi_RobustNet.utils.attr_dict.AttrDict.immutable"], ["def", "assert_and_infer_cfg", "(", "args", ",", "make_immutable", "=", "True", ",", "train_mode", "=", "True", ")", ":", "\n", "    ", "\"\"\"Call this function in your script after you have finished setting all cfg\n    values that are necessary (e.g., merging a config from a file, merging\n    command line config options, etc.). By default, this function will also\n    mark the global cfg as immutable to prevent changing the global cfg settings\n    during script execution (which can lead to hard to debug errors or code\n    that's harder to understand than is necessary).\n    \"\"\"", "\n", "\n", "if", "hasattr", "(", "args", ",", "'syncbn'", ")", "and", "args", ".", "syncbn", ":", "\n", "        ", "__C", ".", "MODEL", ".", "BN", "=", "'pytorch-syncnorm'", "\n", "__C", ".", "MODEL", ".", "BNFUNC", "=", "torch", ".", "nn", ".", "SyncBatchNorm", "\n", "print", "(", "'Using pytorch sync batch norm'", ")", "\n", "", "else", ":", "\n", "        ", "__C", ".", "MODEL", ".", "BNFUNC", "=", "torch", ".", "nn", ".", "BatchNorm2d", "\n", "print", "(", "'Using regular batch norm'", ")", "\n", "\n", "", "if", "not", "train_mode", ":", "\n", "        ", "cfg", ".", "immutable", "(", "True", ")", "\n", "return", "\n", "", "if", "args", ".", "class_uniform_pct", ":", "\n", "        ", "cfg", ".", "CLASS_UNIFORM_PCT", "=", "args", ".", "class_uniform_pct", "\n", "\n", "", "if", "args", ".", "batch_weighting", ":", "\n", "        ", "__C", ".", "BATCH_WEIGHTING", "=", "True", "\n", "\n", "", "if", "args", ".", "jointwtborder", ":", "\n", "        ", "if", "args", ".", "strict_bdr_cls", "!=", "''", ":", "\n", "            ", "__C", ".", "STRICTBORDERCLASS", "=", "[", "int", "(", "i", ")", "for", "i", "in", "args", ".", "strict_bdr_cls", ".", "split", "(", "\",\"", ")", "]", "\n", "", "if", "args", ".", "rlx_off_iter", ">", "-", "1", ":", "\n", "            ", "__C", ".", "REDUCE_BORDER_ITER", "=", "args", ".", "rlx_off_iter", "\n", "\n", "", "", "if", "make_immutable", ":", "\n", "        ", "cfg", ".", "immutable", "(", "True", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.shachoi_RobustNet.None.eval.MeanFusion.__init__": [[119, 122], ["torch.tensor().new_zeros", "torch.tensor"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "buffer", "=", "torch", ".", "tensor", "(", "(", ")", ",", "dtype", "=", "torch", ".", "float64", ")", ".", "new_zeros", "(", "1", ",", "19", ",", "1024", ",", "2048", ")", "\n", "self", ".", "counter", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.None.eval.MeanFusion.update": [[123, 127], ["torch.nn.functional.softmax", "eval.MeanFusion.buffer.add_"], "methods", ["home.repos.pwc.inspect_result.shachoi_RobustNet.None.eval.RunEval.softmax"], ["", "def", "update", "(", "self", ",", "sem_logits", ")", ":", "\n", "        ", "probs", "=", "torch", ".", "nn", ".", "functional", ".", "softmax", "(", "sem_logits", ",", "dim", "=", "1", ")", "\n", "self", ".", "counter", "+=", "1", "\n", "self", ".", "buffer", ".", "add_", "(", "(", "probs", "-", "self", ".", "buffer", ")", "/", "self", ".", "counter", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.None.eval.MeanFusion.output": [[128, 131], ["eval.MeanFusion.buffer.max"], "methods", ["None"], ["", "def", "output", "(", "self", ")", ":", "\n", "        ", "probs", ",", "cls", "=", "self", ".", "buffer", ".", "max", "(", "1", ")", "\n", "return", "probs", ",", "cls", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.None.eval.RunEval.__init__": [[445, 467], ["os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.makedirs", "os.makedirs", "os.makedirs", "os.makedirs", "numpy.zeros"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "output_dir", ",", "metrics", ",", "write_image", ",", "dataset_cls", ",", "inference_mode", ")", ":", "\n", "        ", "self", ".", "output_dir", "=", "output_dir", "\n", "self", ".", "rgb_path", "=", "os", ".", "path", ".", "join", "(", "output_dir", ",", "'rgb'", ")", "\n", "self", ".", "pred_path", "=", "os", ".", "path", ".", "join", "(", "output_dir", ",", "'pred'", ")", "\n", "self", ".", "diff_path", "=", "os", ".", "path", ".", "join", "(", "output_dir", ",", "'diff'", ")", "\n", "self", ".", "compose_path", "=", "os", ".", "path", ".", "join", "(", "output_dir", ",", "'compose'", ")", "\n", "self", ".", "metrics", "=", "metrics", "\n", "\n", "self", ".", "write_image", "=", "write_image", "\n", "self", ".", "dataset_cls", "=", "dataset_cls", "\n", "self", ".", "inference_mode", "=", "inference_mode", "\n", "self", ".", "mapping", "=", "{", "}", "\n", "os", ".", "makedirs", "(", "self", ".", "rgb_path", ",", "exist_ok", "=", "True", ")", "\n", "os", ".", "makedirs", "(", "self", ".", "pred_path", ",", "exist_ok", "=", "True", ")", "\n", "os", ".", "makedirs", "(", "self", ".", "diff_path", ",", "exist_ok", "=", "True", ")", "\n", "os", ".", "makedirs", "(", "self", ".", "compose_path", ",", "exist_ok", "=", "True", ")", "\n", "\n", "if", "self", ".", "metrics", ":", "\n", "            ", "self", ".", "hist", "=", "np", ".", "zeros", "(", "(", "self", ".", "dataset_cls", ".", "num_classes", ",", "\n", "self", ".", "dataset_cls", ".", "num_classes", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "hist", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.None.eval.RunEval.softmax": [[468, 472], ["numpy.exp", "numpy.exp.sum", "numpy.max"], "methods", ["None"], ["", "", "def", "softmax", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"Compute softmax values for each sets of scores in x.\"\"\"", "\n", "e_x", "=", "np", ".", "exp", "(", "x", "-", "np", ".", "max", "(", "x", ")", ")", "\n", "return", "e_x", "/", "e_x", ".", "sum", "(", "axis", "=", "0", ")", "# only difference", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.None.eval.RunEval.inf": [[473, 534], ["torchvision.ToPILImage", "inference", "torchvision.ToPILImage.", "torchvision.ToPILImage.", "numpy.concatenate", "numpy.mean", "numpy.argmax", "utils.misc.fast_hist", "round", "pbar.set_description", "eval.RunEval.dataset_cls.colorize_mask", "eval.RunEval.save", "PIL.Image.blend", "PIL.Image.blend.save", "numpy.zeros_like", "eval.RunEval.dataset_cls.id_to_trainid.items", "cv2.imwrite", "numpy.argmax.flatten", "gt[].cpu().numpy.cpu().numpy().flatten", "transforms.ToPILImage.convert", "eval.RunEval.convert", "gt[].cpu().numpy", "PIL.Image.fromarray", "PIL.ImageChops.lighter().save", "numpy.nanmean", "str", "gt[].cpu().numpy.cpu().numpy", "utils.misc.per_class_iu", "gt[].cpu", "diff.astype", "PIL.ImageChops.lighter", "numpy.where", "PIL.ImageOps.invert().convert", "gt[].cpu().numpy.cpu", "PIL.ImageOps.invert"], "methods", ["home.repos.pwc.inspect_result.shachoi_RobustNet.utils.misc.fast_hist", "home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.bdd100k.colorize_mask", "home.repos.pwc.inspect_result.shachoi_RobustNet.utils.misc.per_class_iu"], ["", "def", "inf", "(", "self", ",", "imgs", ",", "img_names", ",", "gt", ",", "inference", ",", "net", ",", "scales", ",", "pbar", ",", "base_img", ")", ":", "\n", "\n", "######################################################################", "\n", "# Run inference", "\n", "######################################################################", "\n", "\n", "        ", "self", ".", "img_name", "=", "img_names", "[", "0", "]", "\n", "col_img_name", "=", "'{}/{}_color.png'", ".", "format", "(", "self", ".", "rgb_path", ",", "self", ".", "img_name", ")", "\n", "pred_img_name", "=", "'{}/{}.png'", ".", "format", "(", "self", ".", "pred_path", ",", "self", ".", "img_name", ")", "\n", "diff_img_name", "=", "'{}/{}_diff.png'", ".", "format", "(", "self", ".", "diff_path", ",", "self", ".", "img_name", ")", "\n", "compose_img_name", "=", "'{}/{}_compose.png'", ".", "format", "(", "self", ".", "compose_path", ",", "self", ".", "img_name", ")", "\n", "to_pil", "=", "transforms", ".", "ToPILImage", "(", ")", "\n", "if", "self", ".", "inference_mode", "==", "'pooling'", ":", "\n", "            ", "img", "=", "imgs", "\n", "pool_base_img", "=", "to_pil", "(", "base_img", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "            ", "img", "=", "to_pil", "(", "imgs", "[", "0", "]", ")", "\n", "", "prediction_pre_argmax_collection", "=", "inference", "(", "net", ",", "img", ",", "scales", ")", "\n", "\n", "if", "self", ".", "inference_mode", "==", "'pooling'", ":", "\n", "            ", "prediction", "=", "prediction_pre_argmax_collection", "\n", "prediction", "=", "np", ".", "concatenate", "(", "prediction", ",", "axis", "=", "0", ")", "\n", "", "else", ":", "\n", "            ", "prediction_pre_argmax", "=", "np", ".", "mean", "(", "prediction_pre_argmax_collection", ",", "axis", "=", "0", ")", "\n", "prediction", "=", "np", ".", "argmax", "(", "prediction_pre_argmax", ",", "axis", "=", "0", ")", "\n", "\n", "", "if", "self", ".", "metrics", ":", "\n", "            ", "self", ".", "hist", "+=", "fast_hist", "(", "prediction", ".", "flatten", "(", ")", ",", "gt", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "flatten", "(", ")", ",", "\n", "self", ".", "dataset_cls", ".", "num_classes", ")", "\n", "iou_w", "=", "round", "(", "np", ".", "nanmean", "(", "per_class_iu", "(", "self", ".", "hist", ")", ")", "*", "100", ",", "2", ")", "\n", "# acc_w = np.diag(self.hist).sum() / self.hist.sum()", "\n", "\n", "pbar", ".", "set_description", "(", "\"Mean IOU: %s\"", "%", "(", "str", "(", "iou_w", ")", ")", ")", "\n", "\n", "######################################################################", "\n", "# Dump Images", "\n", "######################################################################", "\n", "", "if", "self", ".", "write_image", ":", "\n", "\n", "            ", "if", "self", ".", "inference_mode", "==", "'pooling'", ":", "\n", "                ", "img", "=", "pool_base_img", "\n", "", "colorized", "=", "self", ".", "dataset_cls", ".", "colorize_mask", "(", "prediction", ")", "\n", "colorized", ".", "save", "(", "col_img_name", ")", "\n", "blend", "=", "Image", ".", "blend", "(", "img", ".", "convert", "(", "\"RGBA\"", ")", ",", "colorized", ".", "convert", "(", "\"RGBA\"", ")", ",", "0.5", ")", "\n", "blend", ".", "save", "(", "compose_img_name", ")", "\n", "\n", "if", "gt", "is", "not", "None", ":", "\n", "                ", "gt", "=", "gt", "[", "0", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "# only write diff image if gt is valid", "\n", "diff", "=", "(", "prediction", "!=", "gt", ")", "\n", "diff", "[", "gt", "==", "255", "]", "=", "0", "\n", "diffimg", "=", "Image", ".", "fromarray", "(", "diff", ".", "astype", "(", "'uint8'", ")", "*", "255", ")", "\n", "PIL", ".", "ImageChops", ".", "lighter", "(", "\n", "blend", ",", "\n", "PIL", ".", "ImageOps", ".", "invert", "(", "diffimg", ")", ".", "convert", "(", "\"RGBA\"", ")", "\n", ")", ".", "save", "(", "diff_img_name", ")", "\n", "\n", "", "label_out", "=", "np", ".", "zeros_like", "(", "prediction", ")", "\n", "for", "label_id", ",", "train_id", "in", "self", ".", "dataset_cls", ".", "id_to_trainid", ".", "items", "(", ")", ":", "\n", "                ", "label_out", "[", "np", ".", "where", "(", "prediction", "==", "train_id", ")", "]", "=", "label_id", "\n", "", "cv2", ".", "imwrite", "(", "pred_img_name", ",", "label_out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.None.eval.RunEval.final_dump": [[535, 543], ["print", "utils.misc.evaluate_eval_for_inference", "print"], "methods", ["home.repos.pwc.inspect_result.shachoi_RobustNet.utils.misc.evaluate_eval_for_inference"], ["", "", "def", "final_dump", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Dump Final metrics on completion of evaluation\n        \"\"\"", "\n", "if", "self", ".", "metrics", ":", "\n", "            ", "print", "(", "\"Entire image\"", ")", "\n", "acc", ",", "acc_cls", ",", "mean_iu", ",", "fwavacc", "=", "evaluate_eval_for_inference", "(", "self", ".", "hist", ",", "args", ".", "dataset_cls", ")", "\n", "print", "(", "\"values: \"", ",", "acc", ",", "acc_cls", ",", "mean_iu", ",", "fwavacc", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.None.eval.sliding_window_cropping": [[133, 180], ["range", "int", "int", "len", "math.ceil", "int", "int", "range", "range", "math.ceil", "math.ceil", "int", "int", "min", "min", "int", "int", "[].append", "[].unsqueeze", "torch.cat", "[].unsqueeze"], "function", ["None"], ["", "", "def", "sliding_window_cropping", "(", "data", ",", "scale", "=", "1.0", ")", ":", "\n", "    ", "\"\"\"\n    Sliding Window Cropping\n    Take the image and create a mapping and multiple crops\n    \"\"\"", "\n", "sliding_window_cropping", "=", "None", "\n", "mapping", "=", "{", "}", "\n", "crop_ctr", "=", "0", "\n", "if", "scale", "<", "1.0", ":", "\n", "        ", "scale", "=", "1.0", "\n", "", "tile_size", "=", "(", "int", "(", "args", ".", "crop_size", "*", "scale", ")", ",", "int", "(", "args", ".", "crop_size", "*", "scale", ")", ")", "\n", "\n", "overlap", "=", "args", ".", "sliding_overlap", "\n", "\n", "for", "img_ctr", "in", "range", "(", "len", "(", "data", ")", ")", ":", "\n", "\n", "        ", "h", ",", "w", "=", "data", "[", "img_ctr", "]", ".", "shape", "[", "1", ":", "]", "\n", "mapping", "[", "img_ctr", "]", "=", "[", "w", ",", "h", ",", "[", "]", "]", "\n", "stride", "=", "ceil", "(", "tile_size", "[", "0", "]", "*", "(", "1", "-", "overlap", ")", ")", "\n", "\n", "tile_rows", "=", "int", "(", "\n", "ceil", "(", "(", "w", "-", "tile_size", "[", "0", "]", ")", "/", "stride", ")", "+", "1", ")", "\n", "tile_cols", "=", "int", "(", "ceil", "(", "(", "h", "-", "tile_size", "[", "1", "]", ")", "/", "stride", ")", "+", "1", ")", "\n", "for", "row", "in", "range", "(", "tile_rows", ")", ":", "\n", "            ", "for", "col", "in", "range", "(", "tile_cols", ")", ":", "\n", "                ", "y1", "=", "int", "(", "col", "*", "stride", ")", "\n", "x1", "=", "int", "(", "row", "*", "stride", ")", "\n", "x2", "=", "min", "(", "x1", "+", "tile_size", "[", "1", "]", ",", "w", ")", "\n", "y2", "=", "min", "(", "y1", "+", "tile_size", "[", "0", "]", ",", "h", ")", "\n", "x1", "=", "int", "(", "x2", "-", "tile_size", "[", "1", "]", ")", "\n", "y1", "=", "int", "(", "y2", "-", "tile_size", "[", "0", "]", ")", "\n", "if", "x1", "<", "0", ":", "# for portrait the x1 underflows sometimes", "\n", "                    ", "x1", "=", "0", "\n", "", "if", "y1", "<", "0", ":", "\n", "                    ", "y1", "=", "0", "\n", "", "if", "crop_ctr", "==", "0", ":", "\n", "                    ", "sliding_window_cropping", "=", "data", "[", "img_ctr", "]", "[", ":", ",", "y1", ":", "y2", ",", "x1", ":", "x2", "]", ".", "unsqueeze", "(", "0", ")", "\n", "", "else", ":", "\n", "                    ", "sliding_window_cropping", "=", "torch", ".", "cat", "(", "\n", "(", "sliding_window_cropping", ",", "\n", "data", "[", "img_ctr", "]", "[", ":", ",", "y1", ":", "y2", ",", "x1", ":", "x2", "]", ".", "unsqueeze", "(", "0", ")", ")", ",", "\n", "dim", "=", "0", ")", "\n", "\n", "", "mapping", "[", "img_ctr", "]", "[", "2", "]", ".", "append", "(", "(", "x1", ",", "y1", ",", "x2", ",", "y2", ")", ")", "\n", "crop_ctr", "+=", "1", "\n", "\n", "", "", "", "return", "(", "mapping", ",", "sliding_window_cropping", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.None.eval.resize_thread": [[182, 193], ["resizequeue.put", "resizequeue.put", "cv2.resize", "cv2.resize", "numpy.fliplr"], "function", ["None"], ["", "def", "resize_thread", "(", "flip", ",", "index", ",", "array", ",", "resizequeue", ",", "origw", ",", "origh", ")", ":", "\n", "    ", "\"\"\"\n    Thread to resize the image size\n    \"\"\"", "\n", "if", "flip", ":", "\n", "        ", "resizequeue", ".", "put", "(", "(", "index", ",", "cv2", ".", "resize", "(", "np", ".", "fliplr", "(", "array", ")", ",", "\n", "(", "origw", ",", "origh", ")", ",", "\n", "interpolation", "=", "cv2", ".", "INTER_LINEAR", ")", ")", ")", "\n", "", "else", ":", "\n", "        ", "resizequeue", ".", "put", "(", "(", "index", ",", "cv2", ".", "resize", "(", "array", ",", "(", "origw", ",", "origh", ")", ",", "\n", "interpolation", "=", "cv2", ".", "INTER_LINEAR", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.None.eval.reverse_mapping": [[195, 235], ["numpy.zeros", "numpy.zeros", "range", "queue.Queue", "range", "dict", "range", "que.put", "len", "np.zeros.astype", "threading.Thread", "threading.Thread.start", "t_list.append", "thread.join", "out_temp.append", "out_y.append", "queue.Queue.get"], "function", ["None"], ["", "", "def", "reverse_mapping", "(", "i", ",", "ctr", ",", "input_img", ",", "mapping", ",", "que", ",", "flip", ",", "origw", ",", "origh", ")", ":", "\n", "    ", "\"\"\"\n    Reverse Mapping for sliding window\n    \"\"\"", "\n", "w", ",", "h", ",", "coords", "=", "mapping", "[", "i", "]", "\n", "full_probs", "=", "np", ".", "zeros", "(", "(", "args", ".", "dataset_cls", ".", "num_classes", ",", "h", ",", "w", ")", ")", "\n", "count_predictions", "=", "np", ".", "zeros", "(", "(", "args", ".", "dataset_cls", ".", "num_classes", ",", "h", ",", "w", ")", ")", "\n", "for", "j", "in", "range", "(", "len", "(", "coords", ")", ")", ":", "\n", "        ", "x1", ",", "y1", ",", "x2", ",", "y2", "=", "coords", "[", "j", "]", "\n", "count_predictions", "[", "y1", ":", "y2", ",", "x1", ":", "x2", "]", "+=", "1", "\n", "average", "=", "input_img", "[", "ctr", "]", "\n", "if", "full_probs", "[", ":", ",", "y1", ":", "y2", ",", "x1", ":", "x2", "]", ".", "shape", "!=", "average", ".", "shape", ":", "\n", "            ", "average", "=", "average", "[", ":", ",", ":", "y2", "-", "y1", ",", ":", "x2", "-", "x1", "]", "\n", "\n", "", "full_probs", "[", ":", ",", "y1", ":", "y2", ",", "x1", ":", "x2", "]", "+=", "average", "\n", "ctr", "=", "ctr", "+", "1", "\n", "\n", "# Accumulate and average overerlapping areas", "\n", "", "full_probs", "=", "full_probs", "/", "count_predictions", ".", "astype", "(", "np", ".", "float", ")", "\n", "out_temp", "=", "[", "]", "\n", "out_y", "=", "[", "]", "\n", "t_list", "=", "[", "]", "\n", "resizequeue", "=", "queue", ".", "Queue", "(", ")", "\n", "classes", "=", "full_probs", ".", "shape", "[", "0", "]", "\n", "for", "y_", "in", "range", "(", "classes", ")", ":", "\n", "        ", "t", "=", "threading", ".", "Thread", "(", "target", "=", "resize_thread", ",", "args", "=", "(", "flip", ",", "y_", ",", "full_probs", "[", "y_", "]", ",", "\n", "resizequeue", ",", "origw", ",", "origh", ")", ")", "\n", "t", ".", "daemon", "=", "True", "\n", "t", ".", "start", "(", ")", "\n", "t_list", ".", "append", "(", "t", ")", "\n", "\n", "", "for", "thread", "in", "t_list", ":", "\n", "        ", "thread", ".", "join", "(", ")", "\n", "out_temp", ".", "append", "(", "resizequeue", ".", "get", "(", ")", ")", "\n", "\n", "", "dictionary", "=", "dict", "(", "out_temp", ")", "\n", "for", "iterator", "in", "range", "(", "classes", ")", ":", "\n", "        ", "out_y", ".", "append", "(", "dictionary", "[", "iterator", "]", ")", "\n", "\n", "", "que", ".", "put", "(", "out_y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.None.eval.reverse_sliding_window": [[237, 260], ["queue.Queue", "range", "final_queue.put", "len", "threading.Thread", "threading.Thread.start", "t_list.append", "item.join", "batch_return.append", "numpy.mean", "len", "queue.Queue.get"], "function", ["None"], ["", "def", "reverse_sliding_window", "(", "mapping", ",", "input_img", ",", "flip_list", ",", "origw", ",", "origh", ",", "final_queue", ")", ":", "\n", "    ", "\"\"\"\n    Take mapping and crops and reconstruct original image\n    \"\"\"", "\n", "\n", "batch_return", "=", "[", "]", "\n", "ctr", "=", "0", "\n", "# Loop through the maps and merge them together", "\n", "que", "=", "queue", ".", "Queue", "(", ")", "\n", "t_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "mapping", ")", ")", ":", "\n", "        ", "t", "=", "threading", ".", "Thread", "(", "target", "=", "reverse_mapping", ",", "args", "=", "(", "i", ",", "ctr", ",", "input_img", ",", "mapping", ",", "que", ",", "\n", "flip_list", "[", "i", "]", ",", "origw", ",", "origh", ")", ")", "\n", "ctr", "=", "ctr", "+", "len", "(", "mapping", "[", "i", "]", "[", "2", "]", ")", "\n", "t", ".", "daemon", "=", "True", "\n", "t", ".", "start", "(", ")", "\n", "t_list", ".", "append", "(", "t", ")", "\n", "\n", "", "for", "item", "in", "t_list", ":", "\n", "        ", "item", ".", "join", "(", ")", "\n", "batch_return", ".", "append", "(", "que", ".", "get", "(", ")", ")", "\n", "\n", "", "final_queue", ".", "put", "(", "np", ".", "mean", "(", "batch_return", ",", "axis", "=", "0", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.None.eval.pooled_eval": [[262, 272], ["torch.no_grad", "model", "torch.nn.functional.interpolate"], "function", ["None"], ["", "def", "pooled_eval", "(", "model", ",", "image", ",", "scale", ")", ":", "\n", "    ", "\"\"\"\n    Perform Pooled Evaluation\n    \"\"\"", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "y", "=", "model", "(", "image", ")", "\n", "y", "=", "torch", ".", "nn", ".", "functional", ".", "interpolate", "(", "y", ",", "size", "=", "(", "1024", ",", "2048", ")", ",", "mode", "=", "'bilinear'", ")", "\n", "del", "image", "\n", "\n", "", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.None.eval.flip_tensor": [[274, 282], ["x.dim", "tuple", "slice", "torch.arange().long", "range", "x.dim", "torch.arange", "x.size"], "function", ["None"], ["", "def", "flip_tensor", "(", "x", ",", "dim", ")", ":", "\n", "    ", "\"\"\"\n    Flip Tensor along a dimension\n    \"\"\"", "\n", "dim", "=", "x", ".", "dim", "(", ")", "+", "dim", "if", "dim", "<", "0", "else", "dim", "\n", "return", "x", "[", "tuple", "(", "slice", "(", "None", ",", "None", ")", "if", "i", "!=", "dim", "\n", "else", "torch", ".", "arange", "(", "x", ".", "size", "(", "i", ")", "-", "1", ",", "-", "1", ",", "-", "1", ")", ".", "long", "(", ")", "\n", "for", "i", "in", "range", "(", "x", ".", "dim", "(", ")", ")", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.None.eval.flip_tensor2": [[283, 288], ["torch.arange", "x.dim", "slice", "x.size", "tuple"], "function", ["None"], ["", "def", "flip_tensor2", "(", "x", ",", "dim", ")", ":", "\n", "    ", "indices", "=", "[", "slice", "(", "None", ")", "]", "*", "x", ".", "dim", "(", ")", "\n", "indices", "[", "dim", "]", "=", "torch", ".", "arange", "(", "x", ".", "size", "(", "dim", ")", "-", "1", ",", "-", "1", ",", "-", "1", ",", "\n", "dtype", "=", "torch", ".", "long", ",", "device", "=", "x", ".", "device", ")", "\n", "return", "x", "[", "tuple", "(", "indices", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.None.eval.inference_pool": [[289, 318], ["eval.MeanFusion", "range", "eval.MeanFusion.output", "preds.cpu().numpy", "range", "len", "preds.cpu", "type", "type", "eval.pooled_eval", "eval.pooled_eval", "eval.MeanFusion.update", "eval.MeanFusion.update", "pooled_eval.cpu", "eval.flip_tensor2", "pooled_eval.cpu"], "function", ["home.repos.pwc.inspect_result.shachoi_RobustNet.None.eval.MeanFusion.output", "home.repos.pwc.inspect_result.shachoi_RobustNet.None.eval.pooled_eval", "home.repos.pwc.inspect_result.shachoi_RobustNet.None.eval.pooled_eval", "home.repos.pwc.inspect_result.shachoi_RobustNet.utils.misc.AverageMeter.update", "home.repos.pwc.inspect_result.shachoi_RobustNet.utils.misc.AverageMeter.update", "home.repos.pwc.inspect_result.shachoi_RobustNet.None.eval.flip_tensor2"], ["", "def", "inference_pool", "(", "model", ",", "img", ",", "scales", ")", ":", "\n", "    ", "\"\"\"\n    Post Inference Pool Operations\n    \"\"\"", "\n", "\n", "fusion_cls", "=", "MeanFusion", "(", ")", "\n", "\n", "if", "args", ".", "no_flip", ":", "\n", "        ", "flip_range", "=", "1", "\n", "", "else", ":", "\n", "        ", "flip_range", "=", "2", "\n", "\n", "", "y_tmp_with_flip", "=", "0", "\n", "for", "flip", "in", "range", "(", "flip_range", ")", ":", "\n", "        ", "y_tmp", "=", "None", "\n", "for", "i", "in", "range", "(", "len", "(", "scales", ")", ")", ":", "\n", "            ", "if", "type", "(", "y_tmp", ")", "==", "type", "(", "None", ")", ":", "\n", "                ", "y_tmp", "=", "pooled_eval", "(", "model", ",", "img", "[", "flip", "]", "[", "i", "]", ",", "scales", "[", "i", "]", ")", "\n", "", "else", ":", "\n", "                ", "y_tmp", "=", "pooled_eval", "(", "model", ",", "img", "[", "flip", "]", "[", "i", "]", ",", "scales", "[", "i", "]", ")", "\n", "", "if", "flip", "==", "0", ":", "\n", "                ", "fusion_cls", ".", "update", "(", "y_tmp", ".", "cpu", "(", ")", ")", "\n", "", "else", ":", "\n", "                ", "fusion_cls", ".", "update", "(", "flip_tensor2", "(", "y_tmp", ".", "cpu", "(", ")", ",", "-", "1", ")", ")", "\n", "\n", "", "", "", "probs", ",", "preds", "=", "fusion_cls", ".", "output", "(", ")", "\n", "pred", "=", "preds", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "return", "pred", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.None.eval.inference_sliding": [[320, 380], ["queue.Queue", "img.resize", "range", "eval.sliding_window_cropping", "torch.cuda.empty_cache", "torch.cat.data.cpu().numpy", "threading.Thread", "threading.Thread.start", "t_list.append", "threads.join", "preds.append", "int", "int", "torchvision.Compose", "transforms.Compose.", "image_list.append", "flip_list.append", "torch.no_grad", "range", "torch.cat", "queue.Queue.get", "scaled_img.transpose.transpose", "input_crops[].unsqueeze().cuda", "model", "output_crops.append", "torch.cat.data.cpu", "torchvision.ToTensor", "torchvision.Normalize", "input_crops[].unsqueeze"], "function", ["home.repos.pwc.inspect_result.shachoi_RobustNet.None.eval.sliding_window_cropping"], ["", "def", "inference_sliding", "(", "model", ",", "img", ",", "scales", ")", ":", "\n", "    ", "\"\"\"\n    Sliding Window Inference Function\n    \"\"\"", "\n", "\n", "w", ",", "h", "=", "img", ".", "size", "\n", "origw", ",", "origh", "=", "img", ".", "size", "\n", "preds", "=", "[", "]", "\n", "if", "args", ".", "no_flip", ":", "\n", "        ", "flip_range", "=", "1", "\n", "", "else", ":", "\n", "        ", "flip_range", "=", "2", "\n", "\n", "", "finalque", "=", "queue", ".", "Queue", "(", ")", "\n", "t_list", "=", "[", "]", "\n", "for", "scale", "in", "scales", ":", "\n", "\n", "        ", "target_w", ",", "target_h", "=", "int", "(", "w", "*", "scale", ")", ",", "int", "(", "h", "*", "scale", ")", "\n", "scaled_img", "=", "img", ".", "resize", "(", "(", "target_w", ",", "target_h", ")", ",", "Image", ".", "BILINEAR", ")", "\n", "y", "=", "[", "]", "\n", "image_list", "=", "[", "]", "\n", "flip_list", "=", "[", "]", "\n", "for", "flip", "in", "range", "(", "flip_range", ")", ":", "\n", "            ", "if", "flip", ":", "\n", "                ", "scaled_img", "=", "scaled_img", ".", "transpose", "(", "Image", ".", "FLIP_LEFT_RIGHT", ")", "\n", "\n", "", "img_transform", "=", "transforms", ".", "Compose", "(", "\n", "[", "transforms", ".", "ToTensor", "(", ")", ",", "transforms", ".", "Normalize", "(", "*", "mean_std", ")", "]", ")", "\n", "image", "=", "img_transform", "(", "scaled_img", ")", "\n", "image_list", ".", "append", "(", "image", ")", "\n", "flip_list", ".", "append", "(", "flip", ")", "\n", "\n", "", "mapping", ",", "input_crops", "=", "sliding_window_cropping", "(", "image_list", ",", "scale", "=", "scale", ")", "\n", "\n", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "batch_num", "=", "input_crops", ".", "shape", "[", "0", "]", "\n", "output_crops", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "batch_num", ")", ":", "\n", "                ", "input_crop", "=", "input_crops", "[", "i", "]", ".", "unsqueeze", "(", "0", ")", ".", "cuda", "(", ")", "\n", "output_crop", "=", "model", "(", "input_crop", ")", "\n", "output_crops", ".", "append", "(", "output_crop", ")", "\n", "del", "input_crop", "\n", "", "output_scattered", "=", "torch", ".", "cat", "(", "output_crops", ",", "dim", "=", "0", ")", "\n", "\n", "", "output_scattered", "=", "output_scattered", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "t", "=", "threading", ".", "Thread", "(", "target", "=", "reverse_sliding_window", ",", "args", "=", "(", "mapping", ",", "output_scattered", ",", "\n", "flip_list", ",", "origw", ",", "\n", "origh", ",", "finalque", ")", ")", "\n", "t", ".", "daemon", "=", "True", "\n", "t", ".", "start", "(", ")", "\n", "t_list", ".", "append", "(", "t", ")", "\n", "\n", "", "for", "threads", "in", "t_list", ":", "\n", "        ", "threads", ".", "join", "(", ")", "\n", "preds", ".", "append", "(", "finalque", ".", "get", "(", ")", ")", "\n", "\n", "", "return", "preds", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.None.eval.setup_loader": [[382, 427], ["torchvision.ToTensor", "transforms.MaskToTensor", "torch.utils.data.DataLoader", "args.dataset_cls.CityScapes", "NameError", "args.dataset_cls.CityScapes.split_dataset", "DistributedSampler", "Exception"], "function", ["None"], ["", "def", "setup_loader", "(", ")", ":", "\n", "    ", "\"\"\"\n    Setup Data Loaders\n    \"\"\"", "\n", "val_input_transform", "=", "transforms", ".", "ToTensor", "(", ")", "\n", "target_transform", "=", "extended_transforms", ".", "MaskToTensor", "(", ")", "\n", "\n", "if", "args", ".", "dataset", "==", "'cityscapes'", ":", "\n", "        ", "args", ".", "dataset_cls", "=", "cityscapes", "\n", "eval_scales", "=", "None", "\n", "if", "args", ".", "inference_mode", "==", "'pooling'", ":", "\n", "            ", "eval_mode", "=", "'pooling'", "\n", "eval_scales", "=", "args", ".", "scales", "\n", "", "elif", "args", ".", "inference_mode", "==", "'sliding'", ":", "\n", "            ", "eval_mode", "=", "'sliding'", "\n", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "f\"Not implemented inference mode: {args.inference_mode}\"", ")", "\n", "\n", "", "test_set", "=", "args", ".", "dataset_cls", ".", "CityScapes", "(", "args", ".", "mode", ",", "args", ".", "split", ",", "0", ",", "\n", "transform", "=", "val_input_transform", ",", "\n", "target_transform", "=", "target_transform", ",", "\n", "cv_split", "=", "0", ",", "#args.cv_split,", "\n", "eval_mode", "=", "eval_mode", ",", "\n", "eval_scales", "=", "eval_scales", ",", "\n", "eval_flip", "=", "not", "args", ".", "no_flip", ",", "\n", "image_in", "=", "args", ".", "image_in", "\n", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NameError", "(", "'-------------Not Supported Currently-------------'", ")", "\n", "\n", "", "if", "args", ".", "split_count", ">", "1", ":", "\n", "        ", "test_set", ".", "split_dataset", "(", "args", ".", "split_index", ",", "args", ".", "split_count", ")", "\n", "\n", "", "batch_size", "=", "1", "\n", "\n", "if", "args", ".", "syncbn", ":", "\n", "        ", "from", "datasets", ".", "sampler", "import", "DistributedSampler", "\n", "test_sampler", "=", "DistributedSampler", "(", "test_set", ",", "pad", "=", "False", ",", "permutation", "=", "False", ",", "consecutive_sample", "=", "False", ")", "\n", "", "else", ":", "\n", "        ", "test_sampler", "=", "None", "\n", "\n", "", "test_loader", "=", "DataLoader", "(", "test_set", ",", "batch_size", "=", "batch_size", ",", "num_workers", "=", "args", ".", "num_workers", ",", "\n", "shuffle", "=", "False", ",", "drop_last", "=", "False", ",", "sampler", "=", "test_sampler", ")", "\n", "\n", "return", "test_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.None.eval.get_net": [[429, 442], ["logging.info", "network.get_net", "torch.nn.SyncBatchNorm.convert_sync_batchnorm", "network.warp_network_in_dataparallel", "optimizer.restore_snapshot", "network.warp_network_in_dataparallel.eval"], "function", ["home.repos.pwc.inspect_result.shachoi_RobustNet.network.__init__.get_net", "home.repos.pwc.inspect_result.shachoi_RobustNet.network.__init__.warp_network_in_dataparallel", "home.repos.pwc.inspect_result.shachoi_RobustNet.None.optimizer.restore_snapshot"], ["", "def", "get_net", "(", ")", ":", "\n", "    ", "\"\"\"\n    Get Network for evaluation\n    \"\"\"", "\n", "logging", ".", "info", "(", "'Load model file: %s'", ",", "args", ".", "snapshot", ")", "\n", "net", "=", "network", ".", "get_net", "(", "args", ",", "criterion", "=", "None", ")", "\n", "net", "=", "torch", ".", "nn", ".", "SyncBatchNorm", ".", "convert_sync_batchnorm", "(", "net", ")", "\n", "net", "=", "network", ".", "warp_network_in_dataparallel", "(", "net", ",", "args", ".", "local_rank", ")", "\n", "net", ",", "_", ",", "_", ",", "_", ",", "_", "=", "restore_snapshot", "(", "net", ",", "optimizer", "=", "None", ",", "scheduler", "=", "None", ",", "\n", "snapshot", "=", "args", ".", "snapshot", ",", "restore_optimizer_bool", "=", "False", ")", "\n", "\n", "net", ".", "eval", "(", ")", "\n", "return", "net", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.None.eval.infer_args": [[545, 569], ["re.search", "os.path.split", "os.path.split", "os.path.split", "os.path.basename", "int", "re.search.group"], "function", ["None"], ["", "", "", "def", "infer_args", "(", ")", ":", "\n", "    ", "\"\"\"\n    To make life easier, we infer some args from the snapshot meta information.\n    \"\"\"", "\n", "if", "'dist_bn'", "in", "args", ".", "snapshot", "and", "not", "args", ".", "dist_bn", ":", "\n", "        ", "args", ".", "dist_bn", "=", "True", "\n", "\n", "", "cv_re", "=", "re", ".", "search", "(", "r'-cv_(\\d)-'", ",", "args", ".", "snapshot", ")", "\n", "if", "cv_re", "and", "args", ".", "cv_split", "is", "None", ":", "\n", "        ", "args", ".", "cv_split", "=", "int", "(", "cv_re", ".", "group", "(", "1", ")", ")", "\n", "\n", "", "snap_dir", ",", "_snap_file", "=", "os", ".", "path", ".", "split", "(", "args", ".", "snapshot", ")", "\n", "exp_dir", ",", "snap_dir", "=", "os", ".", "path", ".", "split", "(", "snap_dir", ")", "\n", "ckpt_path", ",", "exp_dir", "=", "os", ".", "path", ".", "split", "(", "exp_dir", ")", "\n", "ckpt_path", "=", "os", ".", "path", ".", "basename", "(", "ckpt_path", ")", "\n", "\n", "if", "args", ".", "exp_name", "is", "None", ":", "\n", "        ", "args", ".", "exp_name", "=", "exp_dir", "\n", "\n", "", "if", "args", ".", "ckpt_path", "is", "None", ":", "\n", "        ", "args", ".", "ckpt_path", "=", "ckpt_path", "\n", "\n", "", "if", "args", ".", "dataset", "==", "'video_folder'", ":", "\n", "        ", "args", ".", "split", "=", "'video_folder'", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.None.eval.main": [[571, 637], ["eval.infer_args", "os.path.join", "os.makedirs", "utils.misc.save_log", "logging.info", "logging.info", "logging.info", "logging.info", "logging.info", "logging.info", "eval.setup_loader", "eval.RunEval", "eval.get_net", "tqdm.tqdm", "enumerate", "eval.RunEval.final_dump", "torch.nn.AvgPool2d", "eval.RunEval.inf", "float", "args.scales.split", "str"], "function", ["home.repos.pwc.inspect_result.shachoi_RobustNet.None.eval.infer_args", "home.repos.pwc.inspect_result.shachoi_RobustNet.utils.misc.save_log", "home.repos.pwc.inspect_result.shachoi_RobustNet.None.eval.setup_loader", "home.repos.pwc.inspect_result.shachoi_RobustNet.network.__init__.get_net", "home.repos.pwc.inspect_result.shachoi_RobustNet.None.eval.RunEval.final_dump", "home.repos.pwc.inspect_result.shachoi_RobustNet.None.eval.RunEval.inf"], ["", "", "def", "main", "(", ")", ":", "\n", "    ", "\"\"\"\n    Main Function\n    \"\"\"", "\n", "# Parse args and set up logging", "\n", "infer_args", "(", ")", "\n", "\n", "if", "args", ".", "single_scale", ":", "\n", "        ", "scales", "=", "[", "1.0", "]", "\n", "", "else", ":", "\n", "        ", "scales", "=", "[", "float", "(", "x", ")", "for", "x", "in", "args", ".", "scales", ".", "split", "(", "','", ")", "]", "\n", "\n", "", "output_dir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "ckpt_path", ",", "args", ".", "exp_name", ",", "args", ".", "split", ")", "\n", "os", ".", "makedirs", "(", "output_dir", ",", "exist_ok", "=", "True", ")", "\n", "save_log", "(", "'eval'", ",", "output_dir", ",", "date_str", ")", "\n", "logging", ".", "info", "(", "\"Network Arch: %s\"", ",", "args", ".", "arch", ")", "\n", "logging", ".", "info", "(", "\"CV split: %d\"", ",", "args", ".", "cv_split", ")", "\n", "logging", ".", "info", "(", "\"Exp_name: %s\"", ",", "args", ".", "exp_name", ")", "\n", "logging", ".", "info", "(", "\"Ckpt path: %s\"", ",", "args", ".", "ckpt_path", ")", "\n", "logging", ".", "info", "(", "\"Scales : %s\"", ",", "' '", ".", "join", "(", "str", "(", "e", ")", "for", "e", "in", "scales", ")", ")", "\n", "logging", ".", "info", "(", "\"Inference mode: %s\"", ",", "args", ".", "inference_mode", ")", "\n", "\n", "# Set up network, loader, inference mode", "\n", "metrics", "=", "args", ".", "dataset", "!=", "'video_folder'", "\n", "test_loader", "=", "setup_loader", "(", ")", "\n", "\n", "runner", "=", "RunEval", "(", "output_dir", ",", "metrics", ",", "\n", "write_image", "=", "args", ".", "dump_images", ",", "\n", "dataset_cls", "=", "args", ".", "dataset_cls", ",", "\n", "inference_mode", "=", "args", ".", "inference_mode", ")", "\n", "net", "=", "get_net", "(", ")", "\n", "\n", "# Fix the ASPP pool size to 105, which is the tensor size if you train with crop", "\n", "# size of 840x840", "\n", "if", "args", ".", "fixed_aspp_pool", ":", "\n", "        ", "net", ".", "module", ".", "aspp", ".", "img_pooling", "=", "torch", ".", "nn", ".", "AvgPool2d", "(", "105", ")", "\n", "\n", "", "if", "args", ".", "inference_mode", "==", "'sliding'", ":", "\n", "        ", "inference", "=", "inference_sliding", "\n", "", "elif", "args", ".", "inference_mode", "==", "'pooling'", ":", "\n", "        ", "inference", "=", "inference_pool", "\n", "", "else", ":", "\n", "        ", "raise", "'Not a valid inference mode: {}'", ".", "format", "(", "args", ".", "inference_mode", ")", "\n", "\n", "# Run Inference!", "\n", "", "pbar", "=", "tqdm", "(", "test_loader", ",", "desc", "=", "'eval {}'", ".", "format", "(", "args", ".", "split", ")", ",", "smoothing", "=", "1.0", ")", "\n", "for", "iteration", ",", "data", "in", "enumerate", "(", "pbar", ")", ":", "\n", "        ", "if", "args", ".", "dataset", "==", "'video_folder'", ":", "\n", "            ", "imgs", ",", "img_names", "=", "data", "\n", "gt", "=", "None", "\n", "", "else", ":", "\n", "            ", "if", "args", ".", "inference_mode", "==", "'pooling'", ":", "\n", "                ", "base_img", ",", "gt_with_imgs", ",", "img_names", "=", "data", "\n", "base_img", "=", "base_img", "[", "0", "]", "\n", "imgs", "=", "gt_with_imgs", "[", "0", "]", "\n", "gt", "=", "gt_with_imgs", "[", "1", "]", "\n", "", "else", ":", "\n", "                ", "base_img", "=", "None", "\n", "imgs", ",", "gt", ",", "img_names", ",", "mask_aux", "=", "data", "\n", "\n", "", "", "runner", ".", "inf", "(", "imgs", ",", "img_names", ",", "gt", ",", "inference", ",", "net", ",", "scales", ",", "pbar", ",", "base_img", ")", "\n", "if", "iteration", ">", "5", "and", "args", ".", "test_mode", ":", "\n", "            ", "break", "\n", "\n", "# Calculate final overall statistics", "\n", "", "", "runner", ".", "final_dump", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.None.train.main": [[204, 285], ["config.assert_and_infer_cfg", "utils.misc.prep_experiment", "datasets.setup_loaders", "loss.get_loss", "loss.get_loss_aux", "network.get_net", "optimizer.get_optimizer", "torch.nn.SyncBatchNorm.convert_sync_batchnorm", "torch.nn.SyncBatchNorm.convert_sync_batchnorm", "network.warp_network_in_dataparallel", "print", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "extra_val_loaders.items", "optimizer.load_weights", "config.cfg.immutable", "config.cfg.immutable", "train.train", "train_loader.sampler.set_epoch", "len", "val_loaders.items", "print", "train.validate", "len", "network.warp_network_in_dataparallel.module.reset_mask_matrix", "range", "print", "utils.misc.evaluate_eval", "train.validate", "print", "utils.misc.evaluate_eval", "covstat_val_loaders.items", "train_obj.build_epoch", "train_loader.sampler.set_num_samples", "train_obj.build_epoch", "train.validate_for_cov_stat", "network.warp_network_in_dataparallel.module.set_mask_matrix"], "function", ["home.repos.pwc.inspect_result.shachoi_RobustNet.None.config.assert_and_infer_cfg", "home.repos.pwc.inspect_result.shachoi_RobustNet.utils.misc.prep_experiment", "home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.__init__.setup_loaders", "home.repos.pwc.inspect_result.shachoi_RobustNet.None.loss.get_loss", "home.repos.pwc.inspect_result.shachoi_RobustNet.None.loss.get_loss_aux", "home.repos.pwc.inspect_result.shachoi_RobustNet.network.__init__.get_net", "home.repos.pwc.inspect_result.shachoi_RobustNet.None.optimizer.get_optimizer", "home.repos.pwc.inspect_result.shachoi_RobustNet.network.__init__.warp_network_in_dataparallel", "home.repos.pwc.inspect_result.shachoi_RobustNet.None.optimizer.load_weights", "home.repos.pwc.inspect_result.shachoi_RobustNet.utils.attr_dict.AttrDict.immutable", "home.repos.pwc.inspect_result.shachoi_RobustNet.utils.attr_dict.AttrDict.immutable", "home.repos.pwc.inspect_result.shachoi_RobustNet.None.train.train", "home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.sampler.DistributedSampler.set_epoch", "home.repos.pwc.inspect_result.shachoi_RobustNet.None.valid.validate", "home.repos.pwc.inspect_result.shachoi_RobustNet.network.deepv3.DeepV3Plus.reset_mask_matrix", "home.repos.pwc.inspect_result.shachoi_RobustNet.utils.misc.evaluate_eval", "home.repos.pwc.inspect_result.shachoi_RobustNet.None.valid.validate", "home.repos.pwc.inspect_result.shachoi_RobustNet.utils.misc.evaluate_eval", "home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.uniform.build_epoch", "home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.sampler.DistributedSampler.set_num_samples", "home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.uniform.build_epoch", "home.repos.pwc.inspect_result.shachoi_RobustNet.None.train.validate_for_cov_stat", "home.repos.pwc.inspect_result.shachoi_RobustNet.network.deepv3.DeepV3Plus.set_mask_matrix"], ["", "", "def", "main", "(", ")", ":", "\n", "    ", "\"\"\"\n    Main Function\n    \"\"\"", "\n", "# Set up the Arguments, Tensorboard Writer, Dataloader, Loss Fn, Optimizer", "\n", "assert_and_infer_cfg", "(", "args", ")", "\n", "writer", "=", "prep_experiment", "(", "args", ",", "parser", ")", "\n", "\n", "train_loader", ",", "val_loaders", ",", "train_obj", ",", "extra_val_loaders", ",", "covstat_val_loaders", "=", "datasets", ".", "setup_loaders", "(", "args", ")", "\n", "\n", "criterion", ",", "criterion_val", "=", "loss", ".", "get_loss", "(", "args", ")", "\n", "criterion_aux", "=", "loss", ".", "get_loss_aux", "(", "args", ")", "\n", "net", "=", "network", ".", "get_net", "(", "args", ",", "criterion", ",", "criterion_aux", ")", "\n", "\n", "optim", ",", "scheduler", "=", "optimizer", ".", "get_optimizer", "(", "args", ",", "net", ")", "\n", "\n", "net", "=", "torch", ".", "nn", ".", "SyncBatchNorm", ".", "convert_sync_batchnorm", "(", "net", ")", "\n", "net", "=", "network", ".", "warp_network_in_dataparallel", "(", "net", ",", "args", ".", "local_rank", ")", "\n", "epoch", "=", "0", "\n", "i", "=", "0", "\n", "\n", "if", "args", ".", "snapshot", ":", "\n", "        ", "epoch", ",", "mean_iu", "=", "optimizer", ".", "load_weights", "(", "net", ",", "optim", ",", "scheduler", ",", "\n", "args", ".", "snapshot", ",", "args", ".", "restore_optimizer", ")", "\n", "if", "args", ".", "restore_optimizer", "is", "True", ":", "\n", "            ", "iter_per_epoch", "=", "len", "(", "train_loader", ")", "\n", "i", "=", "iter_per_epoch", "*", "epoch", "\n", "", "else", ":", "\n", "            ", "epoch", "=", "0", "\n", "\n", "", "", "print", "(", "\"#### iteration\"", ",", "i", ")", "\n", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "# Main Loop", "\n", "# for epoch in range(args.start_epoch, args.max_epoch):", "\n", "\n", "while", "i", "<", "args", ".", "max_iter", ":", "\n", "# Update EPOCH CTR", "\n", "        ", "cfg", ".", "immutable", "(", "False", ")", "\n", "cfg", ".", "ITER", "=", "i", "\n", "cfg", ".", "immutable", "(", "True", ")", "\n", "\n", "i", "=", "train", "(", "train_loader", ",", "net", ",", "optim", ",", "epoch", ",", "writer", ",", "scheduler", ",", "args", ".", "max_iter", ")", "\n", "train_loader", ".", "sampler", ".", "set_epoch", "(", "epoch", "+", "1", ")", "\n", "\n", "if", "(", "args", ".", "dynamic", "and", "args", ".", "use_isw", "and", "epoch", "%", "(", "args", ".", "cov_stat_epoch", "+", "1", ")", "==", "args", ".", "cov_stat_epoch", ")", "or", "(", "args", ".", "dynamic", "is", "False", "and", "args", ".", "use_isw", "and", "epoch", "==", "args", ".", "cov_stat_epoch", ")", ":", "\n", "            ", "net", ".", "module", ".", "reset_mask_matrix", "(", ")", "\n", "for", "trial", "in", "range", "(", "args", ".", "trials", ")", ":", "\n", "                ", "for", "dataset", ",", "val_loader", "in", "covstat_val_loaders", ".", "items", "(", ")", ":", "# For get the statistics of covariance", "\n", "                    ", "validate_for_cov_stat", "(", "val_loader", ",", "dataset", ",", "net", ",", "criterion_val", ",", "optim", ",", "scheduler", ",", "epoch", ",", "writer", ",", "i", ",", "\n", "save_pth", "=", "False", ")", "\n", "net", ".", "module", ".", "set_mask_matrix", "(", ")", "\n", "\n", "", "", "", "if", "args", ".", "local_rank", "==", "0", ":", "\n", "            ", "print", "(", "\"Saving pth file...\"", ")", "\n", "evaluate_eval", "(", "args", ",", "net", ",", "optim", ",", "scheduler", ",", "None", ",", "None", ",", "[", "]", ",", "\n", "writer", ",", "epoch", ",", "\"None\"", ",", "None", ",", "i", ",", "save_pth", "=", "True", ")", "\n", "\n", "", "if", "args", ".", "class_uniform_pct", ":", "\n", "            ", "if", "epoch", ">=", "args", ".", "max_cu_epoch", ":", "\n", "                ", "train_obj", ".", "build_epoch", "(", "cut", "=", "True", ")", "\n", "train_loader", ".", "sampler", ".", "set_num_samples", "(", ")", "\n", "", "else", ":", "\n", "                ", "train_obj", ".", "build_epoch", "(", ")", "\n", "\n", "", "", "epoch", "+=", "1", "\n", "\n", "# Validation after epochs", "\n", "", "if", "len", "(", "val_loaders", ")", "==", "1", ":", "\n", "# Run validation only one time - To save models", "\n", "        ", "for", "dataset", ",", "val_loader", "in", "val_loaders", ".", "items", "(", ")", ":", "\n", "            ", "validate", "(", "val_loader", ",", "dataset", ",", "net", ",", "criterion_val", ",", "optim", ",", "scheduler", ",", "epoch", ",", "writer", ",", "i", ")", "\n", "", "", "else", ":", "\n", "        ", "if", "args", ".", "local_rank", "==", "0", ":", "\n", "            ", "print", "(", "\"Saving pth file...\"", ")", "\n", "evaluate_eval", "(", "args", ",", "net", ",", "optim", ",", "scheduler", ",", "None", ",", "None", ",", "[", "]", ",", "\n", "writer", ",", "epoch", ",", "\"None\"", ",", "None", ",", "i", ",", "save_pth", "=", "True", ")", "\n", "\n", "", "", "for", "dataset", ",", "val_loader", "in", "extra_val_loaders", ".", "items", "(", ")", ":", "\n", "        ", "print", "(", "\"Extra validating... This won't save pth file\"", ")", "\n", "validate", "(", "val_loader", ",", "dataset", ",", "net", ",", "criterion_val", ",", "optim", ",", "scheduler", ",", "epoch", ",", "writer", ",", "i", ",", "save_pth", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.None.train.train": [[287, 400], ["net.train", "utils.misc.AverageMeter", "utils.misc.AverageMeter", "enumerate", "len", "enumerate", "scheduler.step", "len", "inputs.transpose.transpose", "gts.transpose().squeeze.transpose().squeeze", "aux_gts.transpose().squeeze.transpose().squeeze", "zip", "time.time", "optim.zero_grad", "total_loss.clone().detach_", "torch.distributed.all_reduce", "torch.distributed.all_reduce", "utils.misc.AverageMeter.update", "total_loss.backward", "optim.step", "utils.misc.AverageMeter.update", "input.squeeze", "gt.squeeze", "aux_gt.squeeze", "input.cuda", "gt.cuda", "net", "net", "total_loss.clone().detach_.item", "gts.transpose().squeeze.transpose", "aux_gts.transpose().squeeze.transpose", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "total_loss.clone", "time.time", "logging.info", "writer.add_scalar", "utils.misc.AverageMeter.reset", "utils.misc.AverageMeter.reset", "train.visualize_matrix", "len", "print"], "function", ["home.repos.pwc.inspect_result.shachoi_RobustNet.None.train.train", "home.repos.pwc.inspect_result.shachoi_RobustNet.utils.misc.AverageMeter.update", "home.repos.pwc.inspect_result.shachoi_RobustNet.network.sync_switchwhiten.SyncMeanCov.backward", "home.repos.pwc.inspect_result.shachoi_RobustNet.utils.misc.AverageMeter.update", "home.repos.pwc.inspect_result.shachoi_RobustNet.utils.misc.AverageMeter.reset", "home.repos.pwc.inspect_result.shachoi_RobustNet.utils.misc.AverageMeter.reset", "home.repos.pwc.inspect_result.shachoi_RobustNet.None.train.visualize_matrix"], ["", "", "def", "train", "(", "train_loader", ",", "net", ",", "optim", ",", "curr_epoch", ",", "writer", ",", "scheduler", ",", "max_iter", ")", ":", "\n", "    ", "\"\"\"\n    Runs the training loop per epoch\n    train_loader: Data loader for train\n    net: thet network\n    optimizer: optimizer\n    curr_epoch: current epoch\n    writer: tensorboard writer\n    return:\n    \"\"\"", "\n", "net", ".", "train", "(", ")", "\n", "\n", "train_total_loss", "=", "AverageMeter", "(", ")", "\n", "time_meter", "=", "AverageMeter", "(", ")", "\n", "\n", "curr_iter", "=", "curr_epoch", "*", "len", "(", "train_loader", ")", "\n", "\n", "for", "i", ",", "data", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "        ", "if", "curr_iter", ">=", "max_iter", ":", "\n", "            ", "break", "\n", "\n", "", "inputs", ",", "gts", ",", "_", ",", "aux_gts", "=", "data", "\n", "\n", "# Multi source and AGG case", "\n", "if", "len", "(", "inputs", ".", "shape", ")", "==", "5", ":", "\n", "            ", "B", ",", "D", ",", "C", ",", "H", ",", "W", "=", "inputs", ".", "shape", "\n", "num_domains", "=", "D", "\n", "inputs", "=", "inputs", ".", "transpose", "(", "0", ",", "1", ")", "\n", "gts", "=", "gts", ".", "transpose", "(", "0", ",", "1", ")", ".", "squeeze", "(", "2", ")", "\n", "aux_gts", "=", "aux_gts", ".", "transpose", "(", "0", ",", "1", ")", ".", "squeeze", "(", "2", ")", "\n", "\n", "inputs", "=", "[", "input", ".", "squeeze", "(", "0", ")", "for", "input", "in", "torch", ".", "chunk", "(", "inputs", ",", "num_domains", ",", "0", ")", "]", "\n", "gts", "=", "[", "gt", ".", "squeeze", "(", "0", ")", "for", "gt", "in", "torch", ".", "chunk", "(", "gts", ",", "num_domains", ",", "0", ")", "]", "\n", "aux_gts", "=", "[", "aux_gt", ".", "squeeze", "(", "0", ")", "for", "aux_gt", "in", "torch", ".", "chunk", "(", "aux_gts", ",", "num_domains", ",", "0", ")", "]", "\n", "", "else", ":", "\n", "            ", "B", ",", "C", ",", "H", ",", "W", "=", "inputs", ".", "shape", "\n", "num_domains", "=", "1", "\n", "inputs", "=", "[", "inputs", "]", "\n", "gts", "=", "[", "gts", "]", "\n", "aux_gts", "=", "[", "aux_gts", "]", "\n", "\n", "", "batch_pixel_size", "=", "C", "*", "H", "*", "W", "\n", "\n", "for", "di", ",", "ingredients", "in", "enumerate", "(", "zip", "(", "inputs", ",", "gts", ",", "aux_gts", ")", ")", ":", "\n", "            ", "input", ",", "gt", ",", "aux_gt", "=", "ingredients", "\n", "\n", "start_ts", "=", "time", ".", "time", "(", ")", "\n", "\n", "img_gt", "=", "None", "\n", "input", ",", "gt", "=", "input", ".", "cuda", "(", ")", ",", "gt", ".", "cuda", "(", ")", "\n", "\n", "optim", ".", "zero_grad", "(", ")", "\n", "if", "args", ".", "use_isw", ":", "\n", "                ", "outputs", "=", "net", "(", "input", ",", "gts", "=", "gt", ",", "aux_gts", "=", "aux_gt", ",", "img_gt", "=", "img_gt", ",", "visualize", "=", "args", ".", "visualize_feature", ",", "\n", "apply_wtloss", "=", "False", "if", "curr_epoch", "<=", "args", ".", "cov_stat_epoch", "else", "True", ")", "\n", "", "else", ":", "\n", "                ", "outputs", "=", "net", "(", "input", ",", "gts", "=", "gt", ",", "aux_gts", "=", "aux_gt", ",", "img_gt", "=", "img_gt", ",", "visualize", "=", "args", ".", "visualize_feature", ")", "\n", "", "outputs_index", "=", "0", "\n", "main_loss", "=", "outputs", "[", "outputs_index", "]", "\n", "outputs_index", "+=", "1", "\n", "aux_loss", "=", "outputs", "[", "outputs_index", "]", "\n", "outputs_index", "+=", "1", "\n", "total_loss", "=", "main_loss", "+", "(", "0.4", "*", "aux_loss", ")", "\n", "\n", "if", "args", ".", "use_wtloss", "and", "(", "not", "args", ".", "use_isw", "or", "(", "args", ".", "use_isw", "and", "curr_epoch", ">", "args", ".", "cov_stat_epoch", ")", ")", ":", "\n", "                ", "wt_loss", "=", "outputs", "[", "outputs_index", "]", "\n", "outputs_index", "+=", "1", "\n", "total_loss", "=", "total_loss", "+", "(", "args", ".", "wt_reg_weight", "*", "wt_loss", ")", "\n", "", "else", ":", "\n", "                ", "wt_loss", "=", "0", "\n", "\n", "", "if", "args", ".", "visualize_feature", ":", "\n", "                ", "f_cor_arr", "=", "outputs", "[", "outputs_index", "]", "\n", "outputs_index", "+=", "1", "\n", "\n", "", "log_total_loss", "=", "total_loss", ".", "clone", "(", ")", ".", "detach_", "(", ")", "\n", "torch", ".", "distributed", ".", "all_reduce", "(", "log_total_loss", ",", "torch", ".", "distributed", ".", "ReduceOp", ".", "SUM", ")", "\n", "log_total_loss", "=", "log_total_loss", "/", "args", ".", "world_size", "\n", "train_total_loss", ".", "update", "(", "log_total_loss", ".", "item", "(", ")", ",", "batch_pixel_size", ")", "\n", "\n", "total_loss", ".", "backward", "(", ")", "\n", "optim", ".", "step", "(", ")", "\n", "\n", "time_meter", ".", "update", "(", "time", ".", "time", "(", ")", "-", "start_ts", ")", "\n", "\n", "del", "total_loss", ",", "log_total_loss", "\n", "\n", "if", "args", ".", "local_rank", "==", "0", ":", "\n", "                ", "if", "i", "%", "50", "==", "49", ":", "\n", "                    ", "if", "args", ".", "visualize_feature", ":", "\n", "                        ", "visualize_matrix", "(", "writer", ",", "f_cor_arr", ",", "curr_iter", ",", "'/Covariance/Feature-'", ")", "\n", "\n", "", "msg", "=", "'[epoch {}], [iter {} / {} : {}], [loss {:0.6f}], [lr {:0.6f}], [time {:0.4f}]'", ".", "format", "(", "\n", "curr_epoch", ",", "i", "+", "1", ",", "len", "(", "train_loader", ")", ",", "curr_iter", ",", "train_total_loss", ".", "avg", ",", "\n", "optim", ".", "param_groups", "[", "-", "1", "]", "[", "'lr'", "]", ",", "time_meter", ".", "avg", "/", "args", ".", "train_batch_size", ")", "\n", "\n", "logging", ".", "info", "(", "msg", ")", "\n", "if", "args", ".", "use_wtloss", ":", "\n", "                        ", "print", "(", "\"Whitening Loss\"", ",", "wt_loss", ")", "\n", "\n", "# Log tensorboard metrics for each iteration of the training phase", "\n", "", "writer", ".", "add_scalar", "(", "'loss/train_loss'", ",", "(", "train_total_loss", ".", "avg", ")", ",", "\n", "curr_iter", ")", "\n", "train_total_loss", ".", "reset", "(", ")", "\n", "time_meter", ".", "reset", "(", ")", "\n", "\n", "", "", "", "curr_iter", "+=", "1", "\n", "scheduler", ".", "step", "(", ")", "\n", "\n", "if", "i", ">", "5", "and", "args", ".", "test_mode", ":", "\n", "            ", "return", "curr_iter", "\n", "\n", "", "", "return", "curr_iter", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.None.train.validate": [[401, 483], ["net.eval", "utils.misc.AverageMeter", "enumerate", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.distributed.all_reduce", "torch.distributed.all_reduce", "torch.cuda.FloatTensor.cpu().numpy", "utils.misc.AverageMeter.update", "[].cpu", "utils.misc.fast_hist", "utils.misc.evaluate_eval", "len", "inputs.view.view", "gt_image.view.view", "inputs.view.size", "inputs.view.cuda", "gt_image.view.cuda", "torch.no_grad", "torch.no_grad", "criterion().item", "dump_images.append", "[].cpu.numpy().flatten", "gt_image.view.numpy().flatten", "torch.cuda.FloatTensor.cpu", "train.visualize_matrix", "len", "len", "inputs.view.size", "gt_image.view.size", "inputs.view.size", "inputs.view.size", "net", "net", "net.size", "gt_image.view.size", "net.size", "logging.info", "inputs.view.size", "gt_image.view.size", "criterion", "net.data.max", "len", "[].cpu.numpy", "gt_image.view.numpy"], "function", ["home.repos.pwc.inspect_result.shachoi_RobustNet.utils.misc.AverageMeter.update", "home.repos.pwc.inspect_result.shachoi_RobustNet.utils.misc.fast_hist", "home.repos.pwc.inspect_result.shachoi_RobustNet.utils.misc.evaluate_eval", "home.repos.pwc.inspect_result.shachoi_RobustNet.None.train.visualize_matrix"], ["", "def", "validate", "(", "val_loader", ",", "dataset", ",", "net", ",", "criterion", ",", "optim", ",", "scheduler", ",", "curr_epoch", ",", "writer", ",", "curr_iter", ",", "save_pth", "=", "True", ")", ":", "\n", "    ", "\"\"\"\n    Runs the validation loop after each training epoch\n    val_loader: Data loader for validation\n    dataset: dataset name (str)\n    net: thet network\n    criterion: loss fn\n    optimizer: optimizer\n    curr_epoch: current epoch\n    writer: tensorboard writer\n    return: val_avg for step function if required\n    \"\"\"", "\n", "\n", "net", ".", "eval", "(", ")", "\n", "val_loss", "=", "AverageMeter", "(", ")", "\n", "iou_acc", "=", "0", "\n", "error_acc", "=", "0", "\n", "dump_images", "=", "[", "]", "\n", "\n", "for", "val_idx", ",", "data", "in", "enumerate", "(", "val_loader", ")", ":", "\n", "# input        = torch.Size([1, 3, 713, 713])", "\n", "# gt_image           = torch.Size([1, 713, 713])", "\n", "        ", "inputs", ",", "gt_image", ",", "img_names", ",", "_", "=", "data", "\n", "\n", "if", "len", "(", "inputs", ".", "shape", ")", "==", "5", ":", "\n", "            ", "B", ",", "D", ",", "C", ",", "H", ",", "W", "=", "inputs", ".", "shape", "\n", "inputs", "=", "inputs", ".", "view", "(", "-", "1", ",", "C", ",", "H", ",", "W", ")", "\n", "gt_image", "=", "gt_image", ".", "view", "(", "-", "1", ",", "1", ",", "H", ",", "W", ")", "\n", "\n", "", "assert", "len", "(", "inputs", ".", "size", "(", ")", ")", "==", "4", "and", "len", "(", "gt_image", ".", "size", "(", ")", ")", "==", "3", "\n", "assert", "inputs", ".", "size", "(", ")", "[", "2", ":", "]", "==", "gt_image", ".", "size", "(", ")", "[", "1", ":", "]", "\n", "\n", "batch_pixel_size", "=", "inputs", ".", "size", "(", "0", ")", "*", "inputs", ".", "size", "(", "2", ")", "*", "inputs", ".", "size", "(", "3", ")", "\n", "inputs", ",", "gt_cuda", "=", "inputs", ".", "cuda", "(", ")", ",", "gt_image", ".", "cuda", "(", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "if", "args", ".", "use_wtloss", ":", "\n", "                ", "output", ",", "f_cor_arr", "=", "net", "(", "inputs", ",", "visualize", "=", "True", ")", "\n", "", "else", ":", "\n", "                ", "output", "=", "net", "(", "inputs", ")", "\n", "\n", "", "", "del", "inputs", "\n", "\n", "assert", "output", ".", "size", "(", ")", "[", "2", ":", "]", "==", "gt_image", ".", "size", "(", ")", "[", "1", ":", "]", "\n", "assert", "output", ".", "size", "(", ")", "[", "1", "]", "==", "datasets", ".", "num_classes", "\n", "\n", "val_loss", ".", "update", "(", "criterion", "(", "output", ",", "gt_cuda", ")", ".", "item", "(", ")", ",", "batch_pixel_size", ")", "\n", "\n", "del", "gt_cuda", "\n", "\n", "# Collect data from different GPU to a single GPU since", "\n", "# encoding.parallel.criterionparallel function calculates distributed loss", "\n", "# functions", "\n", "predictions", "=", "output", ".", "data", ".", "max", "(", "1", ")", "[", "1", "]", ".", "cpu", "(", ")", "\n", "\n", "# Logging", "\n", "if", "val_idx", "%", "20", "==", "0", ":", "\n", "            ", "if", "args", ".", "local_rank", "==", "0", ":", "\n", "                ", "logging", ".", "info", "(", "\"validating: %d / %d\"", ",", "val_idx", "+", "1", ",", "len", "(", "val_loader", ")", ")", "\n", "", "", "if", "val_idx", ">", "10", "and", "args", ".", "test_mode", ":", "\n", "            ", "break", "\n", "\n", "# Image Dumps", "\n", "", "if", "val_idx", "<", "10", ":", "\n", "            ", "dump_images", ".", "append", "(", "[", "gt_image", ",", "predictions", ",", "img_names", "]", ")", "\n", "\n", "", "iou_acc", "+=", "fast_hist", "(", "predictions", ".", "numpy", "(", ")", ".", "flatten", "(", ")", ",", "gt_image", ".", "numpy", "(", ")", ".", "flatten", "(", ")", ",", "\n", "datasets", ".", "num_classes", ")", "\n", "del", "output", ",", "val_idx", ",", "data", "\n", "\n", "", "iou_acc_tensor", "=", "torch", ".", "cuda", ".", "FloatTensor", "(", "iou_acc", ")", "\n", "torch", ".", "distributed", ".", "all_reduce", "(", "iou_acc_tensor", ",", "op", "=", "torch", ".", "distributed", ".", "ReduceOp", ".", "SUM", ")", "\n", "iou_acc", "=", "iou_acc_tensor", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "if", "args", ".", "local_rank", "==", "0", ":", "\n", "        ", "evaluate_eval", "(", "args", ",", "net", ",", "optim", ",", "scheduler", ",", "val_loss", ",", "iou_acc", ",", "dump_images", ",", "\n", "writer", ",", "curr_epoch", ",", "dataset", ",", "None", ",", "curr_iter", ",", "save_pth", "=", "save_pth", ")", "\n", "\n", "if", "args", ".", "use_wtloss", ":", "\n", "            ", "visualize_matrix", "(", "writer", ",", "f_cor_arr", ",", "curr_iter", ",", "'/Covariance/Feature-'", ")", "\n", "\n", "", "", "return", "val_loss", ".", "avg", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.None.train.validate_for_cov_stat": [[484, 517], ["net.eval", "enumerate", "img_or.cuda", "img_photometric.cuda", "torch.no_grad", "torch.no_grad", "net", "logging.info"], "function", ["None"], ["", "def", "validate_for_cov_stat", "(", "val_loader", ",", "dataset", ",", "net", ",", "criterion", ",", "optim", ",", "scheduler", ",", "curr_epoch", ",", "writer", ",", "curr_iter", ",", "save_pth", "=", "True", ")", ":", "\n", "    ", "\"\"\"\n    Runs the validation loop after each training epoch\n    val_loader: Data loader for validation\n    dataset: dataset name (str)\n    net: thet network\n    criterion: loss fn\n    optimizer: optimizer\n    curr_epoch: current epoch\n    writer: tensorboard writer\n    return: val_avg for step function if required\n    \"\"\"", "\n", "\n", "# net.train()#eval()", "\n", "net", ".", "eval", "(", ")", "\n", "\n", "for", "val_idx", ",", "data", "in", "enumerate", "(", "val_loader", ")", ":", "\n", "        ", "img_or", ",", "img_photometric", ",", "img_geometric", ",", "img_name", "=", "data", "# img_geometric is not used.", "\n", "img_or", ",", "img_photometric", "=", "img_or", ".", "cuda", "(", ")", ",", "img_photometric", ".", "cuda", "(", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "net", "(", "[", "img_photometric", ",", "img_or", "]", ",", "cal_covstat", "=", "True", ")", "\n", "\n", "", "del", "img_or", ",", "img_photometric", ",", "img_geometric", "\n", "\n", "# Logging", "\n", "if", "val_idx", "%", "20", "==", "0", ":", "\n", "            ", "if", "args", ".", "local_rank", "==", "0", ":", "\n", "                ", "logging", ".", "info", "(", "\"validating: %d / 100\"", ",", "val_idx", "+", "1", ")", "\n", "", "", "del", "data", "\n", "\n", "if", "val_idx", ">=", "499", ":", "\n", "            ", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.None.train.visualize_matrix": [[519, 530], ["range", "len", "[].unsqueeze", "torch.clamp", "torch.clamp", "torch.cat", "torch.cat", "torchvision.make_grid", "writer.add_image", "torch.abs", "torch.abs", "torch.ones().cuda", "torch.ones().cuda", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "str", "torch.ones", "torch.ones"], "function", ["None"], ["", "", "", "def", "visualize_matrix", "(", "writer", ",", "matrix_arr", ",", "iteration", ",", "title_str", ")", ":", "\n", "    ", "stage", "=", "'valid'", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "matrix_arr", ")", ")", ":", "\n", "        ", "C", "=", "matrix_arr", "[", "i", "]", ".", "shape", "[", "1", "]", "\n", "matrix", "=", "matrix_arr", "[", "i", "]", "[", "0", "]", ".", "unsqueeze", "(", "0", ")", "# 1 X C X C", "\n", "matrix", "=", "torch", ".", "clamp", "(", "torch", ".", "abs", "(", "matrix", ")", ",", "max", "=", "1", ")", "\n", "matrix", "=", "torch", ".", "cat", "(", "(", "torch", ".", "ones", "(", "1", ",", "C", ",", "C", ")", ".", "cuda", "(", ")", ",", "torch", ".", "abs", "(", "matrix", "-", "1.0", ")", ",", "\n", "torch", ".", "abs", "(", "matrix", "-", "1.0", ")", ")", ",", "0", ")", "\n", "matrix", "=", "vutils", ".", "make_grid", "(", "matrix", ",", "padding", "=", "5", ",", "normalize", "=", "False", ",", "range", "=", "(", "0", ",", "1", ")", ")", "\n", "writer", ".", "add_image", "(", "stage", "+", "title_str", "+", "str", "(", "i", ")", ",", "matrix", ",", "iteration", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.None.train.save_feature_numpy": [[532, 541], ["range", "str", "feature_map.data.cpu().numpy.data.cpu().numpy", "numpy.save", "str", "str", "feature_map.data.cpu().numpy.data.cpu"], "function", ["None"], ["", "", "def", "save_feature_numpy", "(", "feature_maps", ",", "iteration", ")", ":", "\n", "    ", "file_fullpath", "=", "'/home/userA/projects/visualization/feature_map/'", "\n", "file_name", "=", "str", "(", "args", ".", "date", ")", "+", "'_'", "+", "str", "(", "args", ".", "exp", ")", "\n", "B", ",", "C", ",", "H", ",", "W", "=", "feature_maps", ".", "shape", "\n", "for", "i", "in", "range", "(", "B", ")", ":", "\n", "        ", "feature_map", "=", "feature_maps", "[", "i", "]", "\n", "feature_map", "=", "feature_map", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "# H X D", "\n", "file_name_post", "=", "'_'", "+", "str", "(", "iteration", "*", "B", "+", "i", ")", "\n", "np", ".", "save", "(", "file_fullpath", "+", "file_name", "+", "file_name_post", ",", "feature_map", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.None.loss.L1Loss.__init__": [[113, 115], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.shachoi_RobustNet.transforms.joint_transforms.ClassUniform.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "L1Loss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.None.loss.L1Loss.__call__": [[116, 118], ["torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "in0", ",", "in1", ")", ":", "\n", "        ", "return", "torch", ".", "sum", "(", "torch", ".", "abs", "(", "in0", "-", "in1", ")", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.None.loss.ImageBasedCrossEntropyLoss2d.__init__": [[125, 135], ["torch.Module.__init__", "logging.info", "torch.NLLLoss", "torch.NLLLoss", "torch.NLLLoss", "torch.LogSoftmax", "torch.LogSoftmax", "torch.LogSoftmax"], "methods", ["home.repos.pwc.inspect_result.shachoi_RobustNet.transforms.joint_transforms.ClassUniform.__init__"], ["def", "__init__", "(", "self", ",", "classes", ",", "weight", "=", "None", ",", "size_average", "=", "True", ",", "ignore_index", "=", "255", ",", "\n", "norm", "=", "False", ",", "upper_bound", "=", "1.0", ")", ":", "\n", "        ", "super", "(", "ImageBasedCrossEntropyLoss2d", ",", "self", ")", ".", "__init__", "(", ")", "\n", "logging", ".", "info", "(", "\"Using Per Image based weighted loss\"", ")", "\n", "self", ".", "num_classes", "=", "classes", "\n", "self", ".", "nll_loss", "=", "nn", ".", "NLLLoss", "(", "weight", "=", "weight", ",", "reduction", "=", "'mean'", ",", "ignore_index", "=", "ignore_index", ")", "\n", "self", ".", "norm", "=", "norm", "\n", "self", ".", "upper_bound", "=", "upper_bound", "\n", "self", ".", "batch_weights", "=", "cfg", ".", "BATCH_WEIGHTING", "\n", "self", ".", "logsoftmax", "=", "nn", ".", "LogSoftmax", "(", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.None.loss.ImageBasedCrossEntropyLoss2d.calculate_weights": [[136, 147], ["numpy.histogram", "target.flatten", "range"], "methods", ["None"], ["", "def", "calculate_weights", "(", "self", ",", "target", ")", ":", "\n", "        ", "\"\"\"\n        Calculate weights of classes based on the training crop\n        \"\"\"", "\n", "hist", "=", "np", ".", "histogram", "(", "target", ".", "flatten", "(", ")", ",", "range", "(", "\n", "self", ".", "num_classes", "+", "1", ")", ",", "normed", "=", "True", ")", "[", "0", "]", "\n", "if", "self", ".", "norm", ":", "\n", "            ", "hist", "=", "(", "(", "hist", "!=", "0", ")", "*", "self", ".", "upper_bound", "*", "(", "1", "/", "hist", ")", ")", "+", "1", "\n", "", "else", ":", "\n", "            ", "hist", "=", "(", "(", "hist", "!=", "0", ")", "*", "self", ".", "upper_bound", "*", "(", "1", "-", "hist", ")", ")", "+", "1", "\n", "", "return", "hist", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.None.loss.ImageBasedCrossEntropyLoss2d.forward": [[148, 164], ["targets.data.cpu().numpy", "range", "loss.ImageBasedCrossEntropyLoss2d.calculate_weights", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "loss.ImageBasedCrossEntropyLoss2d.nll_loss", "targets.data.cpu", "loss.ImageBasedCrossEntropyLoss2d.calculate_weights", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "loss.ImageBasedCrossEntropyLoss2d.logsoftmax", "targets[].unsqueeze", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "inputs[].unsqueeze", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.mapillary.Mapillary.calculate_weights", "home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.mapillary.Mapillary.calculate_weights"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "targets", ")", ":", "\n", "\n", "        ", "target_cpu", "=", "targets", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "if", "self", ".", "batch_weights", ":", "\n", "            ", "weights", "=", "self", ".", "calculate_weights", "(", "target_cpu", ")", "\n", "self", ".", "nll_loss", ".", "weight", "=", "torch", ".", "Tensor", "(", "weights", ")", ".", "cuda", "(", ")", "\n", "\n", "", "loss", "=", "0.0", "\n", "for", "i", "in", "range", "(", "0", ",", "inputs", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "if", "not", "self", ".", "batch_weights", ":", "\n", "                ", "weights", "=", "self", ".", "calculate_weights", "(", "target_cpu", "[", "i", "]", ")", "\n", "self", ".", "nll_loss", ".", "weight", "=", "torch", ".", "Tensor", "(", "weights", ")", ".", "cuda", "(", ")", "\n", "\n", "", "loss", "+=", "self", ".", "nll_loss", "(", "self", ".", "logsoftmax", "(", "inputs", "[", "i", "]", ".", "unsqueeze", "(", "0", ")", ")", ",", "\n", "targets", "[", "i", "]", ".", "unsqueeze", "(", "0", ")", ")", "\n", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.None.loss.CrossEntropyLoss2d.__init__": [[172, 177], ["torch.Module.__init__", "logging.info", "torch.NLLLoss", "torch.NLLLoss", "torch.NLLLoss", "torch.LogSoftmax", "torch.LogSoftmax", "torch.LogSoftmax"], "methods", ["home.repos.pwc.inspect_result.shachoi_RobustNet.transforms.joint_transforms.ClassUniform.__init__"], ["def", "__init__", "(", "self", ",", "weight", "=", "None", ",", "size_average", "=", "True", ",", "ignore_index", "=", "255", ")", ":", "\n", "        ", "super", "(", "CrossEntropyLoss2d", ",", "self", ")", ".", "__init__", "(", ")", "\n", "logging", ".", "info", "(", "\"Using Cross Entropy Loss\"", ")", "\n", "self", ".", "nll_loss", "=", "nn", ".", "NLLLoss", "(", "weight", "=", "weight", ",", "reduction", "=", "'mean'", ",", "ignore_index", "=", "ignore_index", ")", "\n", "self", ".", "logsoftmax", "=", "nn", ".", "LogSoftmax", "(", "dim", "=", "1", ")", "\n", "# self.weight = weight", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.None.loss.CrossEntropyLoss2d.forward": [[179, 181], ["loss.CrossEntropyLoss2d.nll_loss", "loss.CrossEntropyLoss2d.logsoftmax"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "targets", ")", ":", "\n", "        ", "return", "self", ".", "nll_loss", "(", "self", ".", "logsoftmax", "(", "inputs", ")", ",", "targets", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.None.loss.ImgWtLossSoftNLL.__init__": [[198, 207], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.shachoi_RobustNet.transforms.joint_transforms.ClassUniform.__init__"], ["def", "__init__", "(", "self", ",", "classes", ",", "ignore_index", "=", "255", ",", "weights", "=", "None", ",", "upper_bound", "=", "1.0", ",", "\n", "norm", "=", "False", ")", ":", "\n", "        ", "super", "(", "ImgWtLossSoftNLL", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "weights", "=", "weights", "\n", "self", ".", "num_classes", "=", "classes", "\n", "self", ".", "ignore_index", "=", "ignore_index", "\n", "self", ".", "upper_bound", "=", "upper_bound", "\n", "self", ".", "norm", "=", "norm", "\n", "self", ".", "batch_weights", "=", "cfg", ".", "BATCH_WEIGHTING", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.None.loss.ImgWtLossSoftNLL.calculate_weights": [[208, 221], ["len", "target.sum", "target.sum", "numpy.sum", "numpy.sum"], "methods", ["None"], ["", "def", "calculate_weights", "(", "self", ",", "target", ")", ":", "\n", "        ", "\"\"\"\n        Calculate weights of the classes based on training crop\n        \"\"\"", "\n", "if", "len", "(", "target", ".", "shape", ")", "==", "3", ":", "\n", "            ", "hist", "=", "np", ".", "sum", "(", "target", ",", "axis", "=", "(", "1", ",", "2", ")", ")", "*", "1.0", "/", "target", ".", "sum", "(", ")", "\n", "", "else", ":", "\n", "            ", "hist", "=", "np", ".", "sum", "(", "target", ",", "axis", "=", "(", "0", ",", "2", ",", "3", ")", ")", "*", "1.0", "/", "target", ".", "sum", "(", ")", "\n", "", "if", "self", ".", "norm", ":", "\n", "            ", "hist", "=", "(", "(", "hist", "!=", "0", ")", "*", "self", ".", "upper_bound", "*", "(", "1", "/", "hist", ")", ")", "+", "1", "\n", "", "else", ":", "\n", "            ", "hist", "=", "(", "(", "hist", "!=", "0", ")", "*", "self", ".", "upper_bound", "*", "(", "1", "-", "hist", ")", ")", "+", "1", "\n", "", "return", "hist", "[", ":", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.None.loss.ImgWtLossSoftNLL.custom_nll": [[222, 242], ["loss_matrix.sum", "mask.float", "mask.sum().item", "loss.customsoftmax", "mask.sum", "target[].float", "class_weights.unsqueeze().unsqueeze().unsqueeze", "target[].float", "class_weights.unsqueeze().unsqueeze", "class_weights.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.shachoi_RobustNet.None.loss.customsoftmax"], ["", "def", "custom_nll", "(", "self", ",", "inputs", ",", "target", ",", "class_weights", ",", "border_weights", ",", "mask", ")", ":", "\n", "        ", "\"\"\"\n        NLL Relaxed Loss Implementation\n        \"\"\"", "\n", "if", "(", "cfg", ".", "REDUCE_BORDER_ITER", "!=", "-", "1", "and", "cfg", ".", "ITER", ">", "cfg", ".", "REDUCE_BORDER_ITER", ")", ":", "\n", "            ", "border_weights", "=", "1", "/", "border_weights", "\n", "target", "[", "target", ">", "1", "]", "=", "1", "\n", "\n", "", "loss_matrix", "=", "(", "-", "1", "/", "border_weights", "*", "\n", "(", "target", "[", ":", ",", ":", "-", "1", ",", ":", ",", ":", "]", ".", "float", "(", ")", "*", "\n", "class_weights", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "2", ")", ".", "unsqueeze", "(", "3", ")", "*", "\n", "customsoftmax", "(", "inputs", ",", "target", "[", ":", ",", ":", "-", "1", ",", ":", ",", ":", "]", ".", "float", "(", ")", ")", ")", ".", "sum", "(", "1", ")", ")", "*", "(", "1.", "-", "mask", ".", "float", "(", ")", ")", "\n", "\n", "# loss_matrix[border_weights > 1] = 0", "\n", "loss", "=", "loss_matrix", ".", "sum", "(", ")", "\n", "\n", "# +1 to prevent division by 0", "\n", "loss", "=", "loss", "/", "(", "target", ".", "shape", "[", "0", "]", "*", "target", ".", "shape", "[", "2", "]", "*", "target", ".", "shape", "[", "3", "]", "-", "mask", ".", "sum", "(", ")", ".", "item", "(", ")", "+", "1", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.None.loss.ImgWtLossSoftNLL.forward": [[243, 264], ["target[].sum().float", "target.data.cpu().numpy", "range", "loss.ImgWtLossSoftNLL.calculate_weights", "target[].sum", "target.data.cpu", "loss.ImgWtLossSoftNLL.calculate_weights", "loss.ImgWtLossSoftNLL.custom_nll", "inputs[].unsqueeze", "target[].unsqueeze", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.mapillary.Mapillary.calculate_weights", "home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.mapillary.Mapillary.calculate_weights", "home.repos.pwc.inspect_result.shachoi_RobustNet.None.loss.ImgWtLossSoftNLL_by_epoch.custom_nll"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "target", ")", ":", "\n", "        ", "weights", "=", "target", "[", ":", ",", ":", "-", "1", ",", ":", ",", ":", "]", ".", "sum", "(", "1", ")", ".", "float", "(", ")", "\n", "ignore_mask", "=", "(", "weights", "==", "0", ")", "\n", "weights", "[", "ignore_mask", "]", "=", "1", "\n", "\n", "loss", "=", "0", "\n", "target_cpu", "=", "target", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "if", "self", ".", "batch_weights", ":", "\n", "            ", "class_weights", "=", "self", ".", "calculate_weights", "(", "target_cpu", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "0", ",", "inputs", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "if", "not", "self", ".", "batch_weights", ":", "\n", "                ", "class_weights", "=", "self", ".", "calculate_weights", "(", "target_cpu", "[", "i", "]", ")", "\n", "", "loss", "=", "loss", "+", "self", ".", "custom_nll", "(", "inputs", "[", "i", "]", ".", "unsqueeze", "(", "0", ")", ",", "\n", "target", "[", "i", "]", ".", "unsqueeze", "(", "0", ")", ",", "\n", "class_weights", "=", "torch", ".", "Tensor", "(", "class_weights", ")", ".", "cuda", "(", ")", ",", "\n", "border_weights", "=", "weights", "[", "i", "]", ",", "mask", "=", "ignore_mask", "[", "i", "]", ")", "\n", "\n", "", "loss", "=", "loss", "/", "inputs", ".", "shape", "[", "0", "]", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.None.loss.ImgWtLossSoftNLL_by_epoch.__init__": [[270, 280], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.shachoi_RobustNet.transforms.joint_transforms.ClassUniform.__init__"], ["def", "__init__", "(", "self", ",", "classes", ",", "ignore_index", "=", "255", ",", "weights", "=", "None", ",", "upper_bound", "=", "1.0", ",", "\n", "norm", "=", "False", ")", ":", "\n", "        ", "super", "(", "ImgWtLossSoftNLL_by_epoch", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "weights", "=", "weights", "\n", "self", ".", "num_classes", "=", "classes", "\n", "self", ".", "ignore_index", "=", "ignore_index", "\n", "self", ".", "upper_bound", "=", "upper_bound", "\n", "self", ".", "norm", "=", "norm", "\n", "self", ".", "batch_weights", "=", "cfg", ".", "BATCH_WEIGHTING", "\n", "self", ".", "fp16", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.None.loss.ImgWtLossSoftNLL_by_epoch.calculate_weights": [[282, 295], ["len", "target.sum", "target.sum", "numpy.sum", "numpy.sum"], "methods", ["None"], ["", "def", "calculate_weights", "(", "self", ",", "target", ")", ":", "\n", "        ", "\"\"\"\n        Calculate weights of the classes based on training crop\n        \"\"\"", "\n", "if", "len", "(", "target", ".", "shape", ")", "==", "3", ":", "\n", "            ", "hist", "=", "np", ".", "sum", "(", "target", ",", "axis", "=", "(", "1", ",", "2", ")", ")", "*", "1.0", "/", "target", ".", "sum", "(", ")", "\n", "", "else", ":", "\n", "            ", "hist", "=", "np", ".", "sum", "(", "target", ",", "axis", "=", "(", "0", ",", "2", ",", "3", ")", ")", "*", "1.0", "/", "target", ".", "sum", "(", ")", "\n", "", "if", "self", ".", "norm", ":", "\n", "            ", "hist", "=", "(", "(", "hist", "!=", "0", ")", "*", "self", ".", "upper_bound", "*", "(", "1", "/", "hist", ")", ")", "+", "1", "\n", "", "else", ":", "\n", "            ", "hist", "=", "(", "(", "hist", "!=", "0", ")", "*", "self", ".", "upper_bound", "*", "(", "1", "-", "hist", ")", ")", "+", "1", "\n", "", "return", "hist", "[", ":", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.None.loss.ImgWtLossSoftNLL_by_epoch.custom_nll": [[296, 322], ["loss_matrix.sum", "mask.half", "mask.float", "mask.sum().item", "mask.sum", "loss.customsoftmax", "loss.customsoftmax", "target[].half", "class_weights.unsqueeze().unsqueeze().unsqueeze", "target[].half", "target[].float", "class_weights.unsqueeze().unsqueeze().unsqueeze", "target[].float", "class_weights.unsqueeze().unsqueeze", "class_weights.unsqueeze().unsqueeze", "class_weights.unsqueeze", "class_weights.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.shachoi_RobustNet.None.loss.customsoftmax", "home.repos.pwc.inspect_result.shachoi_RobustNet.None.loss.customsoftmax"], ["", "def", "custom_nll", "(", "self", ",", "inputs", ",", "target", ",", "class_weights", ",", "border_weights", ",", "mask", ")", ":", "\n", "        ", "\"\"\"\n        NLL Relaxed Loss Implementation\n        \"\"\"", "\n", "if", "(", "cfg", ".", "REDUCE_BORDER_EPOCH", "!=", "-", "1", "and", "cfg", ".", "EPOCH", ">", "cfg", ".", "REDUCE_BORDER_EPOCH", ")", ":", "\n", "            ", "border_weights", "=", "1", "/", "border_weights", "\n", "target", "[", "target", ">", "1", "]", "=", "1", "\n", "", "if", "self", ".", "fp16", ":", "\n", "            ", "loss_matrix", "=", "(", "-", "1", "/", "border_weights", "*", "\n", "(", "target", "[", ":", ",", ":", "-", "1", ",", ":", ",", ":", "]", ".", "half", "(", ")", "*", "\n", "class_weights", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "2", ")", ".", "unsqueeze", "(", "3", ")", "*", "\n", "customsoftmax", "(", "inputs", ",", "target", "[", ":", ",", ":", "-", "1", ",", ":", ",", ":", "]", ".", "half", "(", ")", ")", ")", ".", "sum", "(", "1", ")", ")", "*", "(", "1.", "-", "mask", ".", "half", "(", ")", ")", "\n", "", "else", ":", "\n", "            ", "loss_matrix", "=", "(", "-", "1", "/", "border_weights", "*", "\n", "(", "target", "[", ":", ",", ":", "-", "1", ",", ":", ",", ":", "]", ".", "float", "(", ")", "*", "\n", "class_weights", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "2", ")", ".", "unsqueeze", "(", "3", ")", "*", "\n", "customsoftmax", "(", "inputs", ",", "target", "[", ":", ",", ":", "-", "1", ",", ":", ",", ":", "]", ".", "float", "(", ")", ")", ")", ".", "sum", "(", "1", ")", ")", "*", "(", "1.", "-", "mask", ".", "float", "(", ")", ")", "\n", "\n", "# loss_matrix[border_weights > 1] = 0", "\n", "", "loss", "=", "loss_matrix", ".", "sum", "(", ")", "\n", "\n", "# +1 to prevent division by 0", "\n", "loss", "=", "loss", "/", "(", "target", ".", "shape", "[", "0", "]", "*", "target", ".", "shape", "[", "2", "]", "*", "target", ".", "shape", "[", "3", "]", "-", "mask", ".", "sum", "(", ")", ".", "item", "(", ")", "+", "1", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.None.loss.ImgWtLossSoftNLL_by_epoch.forward": [[323, 346], ["target.data.cpu().numpy", "range", "target[].sum().half", "target[].sum().float", "loss.ImgWtLossSoftNLL_by_epoch.calculate_weights", "target.data.cpu", "loss.ImgWtLossSoftNLL_by_epoch.calculate_weights", "loss.ImgWtLossSoftNLL_by_epoch.custom_nll", "target[].sum", "target[].sum", "inputs[].unsqueeze", "target[].unsqueeze", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.mapillary.Mapillary.calculate_weights", "home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.mapillary.Mapillary.calculate_weights", "home.repos.pwc.inspect_result.shachoi_RobustNet.None.loss.ImgWtLossSoftNLL_by_epoch.custom_nll"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "target", ")", ":", "\n", "        ", "if", "self", ".", "fp16", ":", "\n", "            ", "weights", "=", "target", "[", ":", ",", ":", "-", "1", ",", ":", ",", ":", "]", ".", "sum", "(", "1", ")", ".", "half", "(", ")", "\n", "", "else", ":", "\n", "            ", "weights", "=", "target", "[", ":", ",", ":", "-", "1", ",", ":", ",", ":", "]", ".", "sum", "(", "1", ")", ".", "float", "(", ")", "\n", "", "ignore_mask", "=", "(", "weights", "==", "0", ")", "\n", "weights", "[", "ignore_mask", "]", "=", "1", "\n", "\n", "loss", "=", "0", "\n", "target_cpu", "=", "target", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "if", "self", ".", "batch_weights", ":", "\n", "            ", "class_weights", "=", "self", ".", "calculate_weights", "(", "target_cpu", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "0", ",", "inputs", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "if", "not", "self", ".", "batch_weights", ":", "\n", "                ", "class_weights", "=", "self", ".", "calculate_weights", "(", "target_cpu", "[", "i", "]", ")", "\n", "", "loss", "=", "loss", "+", "self", ".", "custom_nll", "(", "inputs", "[", "i", "]", ".", "unsqueeze", "(", "0", ")", ",", "\n", "target", "[", "i", "]", ".", "unsqueeze", "(", "0", ")", ",", "\n", "class_weights", "=", "torch", ".", "Tensor", "(", "class_weights", ")", ".", "cuda", "(", ")", ",", "\n", "border_weights", "=", "weights", ",", "mask", "=", "ignore_mask", "[", "i", "]", ")", "\n", "\n", "", "return", "loss", "\n", "", "", ""]], "home.repos.pwc.inspect_result.shachoi_RobustNet.None.loss.get_loss": [[14, 44], ["torch.CrossEntropyLoss().cuda", "torch.Tensor", "torch.Tensor", "torch.Tensor", "ImageBasedCrossEntropyLoss2d().cuda", "ImgWtLossSoftNLL().cuda", "print", "torch.CrossEntropyLoss().cuda", "torch.CrossEntropyLoss", "loss.ImageBasedCrossEntropyLoss2d", "loss.ImgWtLossSoftNLL", "torch.CrossEntropyLoss"], "function", ["None"], ["def", "get_loss", "(", "args", ")", ":", "\n", "    ", "\"\"\"\n    Get the criterion based on the loss function\n    args: commandline arguments\n    return: criterion, criterion_val\n    \"\"\"", "\n", "if", "args", ".", "cls_wt_loss", ":", "\n", "        ", "ce_weight", "=", "torch", ".", "Tensor", "(", "[", "0.8373", ",", "0.9180", ",", "0.8660", ",", "1.0345", ",", "1.0166", ",", "0.9969", ",", "0.9754", ",", "\n", "1.0489", ",", "0.8786", ",", "1.0023", ",", "0.9539", ",", "0.9843", ",", "1.1116", ",", "0.9037", ",", "\n", "1.0865", ",", "1.0955", ",", "1.0865", ",", "1.1529", ",", "1.0507", "]", ")", "\n", "", "else", ":", "\n", "        ", "ce_weight", "=", "None", "\n", "\n", "", "if", "args", ".", "img_wt_loss", ":", "\n", "        ", "criterion", "=", "ImageBasedCrossEntropyLoss2d", "(", "\n", "classes", "=", "datasets", ".", "num_classes", ",", "size_average", "=", "True", ",", "\n", "ignore_index", "=", "datasets", ".", "ignore_label", ",", "\n", "upper_bound", "=", "args", ".", "wt_bound", ")", ".", "cuda", "(", ")", "\n", "", "elif", "args", ".", "jointwtborder", ":", "\n", "        ", "criterion", "=", "ImgWtLossSoftNLL", "(", "classes", "=", "datasets", ".", "num_classes", ",", "\n", "ignore_index", "=", "datasets", ".", "ignore_label", ",", "\n", "upper_bound", "=", "args", ".", "wt_bound", ")", ".", "cuda", "(", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "\"standard cross entropy\"", ")", "\n", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", "weight", "=", "ce_weight", ",", "reduction", "=", "'mean'", ",", "\n", "ignore_index", "=", "datasets", ".", "ignore_label", ")", ".", "cuda", "(", ")", "\n", "\n", "", "criterion_val", "=", "nn", ".", "CrossEntropyLoss", "(", "reduction", "=", "'mean'", ",", "\n", "ignore_index", "=", "datasets", ".", "ignore_label", ")", ".", "cuda", "(", ")", "\n", "return", "criterion", ",", "criterion_val", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.None.loss.get_loss_by_epoch": [[45, 69], ["CrossEntropyLoss2d().cuda", "ImageBasedCrossEntropyLoss2d().cuda", "ImgWtLossSoftNLL_by_epoch().cuda", "CrossEntropyLoss2d().cuda", "loss.CrossEntropyLoss2d", "loss.ImageBasedCrossEntropyLoss2d", "loss.ImgWtLossSoftNLL_by_epoch", "loss.CrossEntropyLoss2d"], "function", ["None"], ["", "def", "get_loss_by_epoch", "(", "args", ")", ":", "\n", "    ", "\"\"\"\n    Get the criterion based on the loss function\n    args: commandline arguments\n    return: criterion, criterion_val\n    \"\"\"", "\n", "\n", "if", "args", ".", "img_wt_loss", ":", "\n", "        ", "criterion", "=", "ImageBasedCrossEntropyLoss2d", "(", "\n", "classes", "=", "datasets", ".", "num_classes", ",", "size_average", "=", "True", ",", "\n", "ignore_index", "=", "datasets", ".", "ignore_label", ",", "\n", "upper_bound", "=", "args", ".", "wt_bound", ")", ".", "cuda", "(", ")", "\n", "", "elif", "args", ".", "jointwtborder", ":", "\n", "        ", "criterion", "=", "ImgWtLossSoftNLL_by_epoch", "(", "classes", "=", "datasets", ".", "num_classes", ",", "\n", "ignore_index", "=", "datasets", ".", "ignore_label", ",", "\n", "upper_bound", "=", "args", ".", "wt_bound", ")", ".", "cuda", "(", ")", "\n", "", "else", ":", "\n", "        ", "criterion", "=", "CrossEntropyLoss2d", "(", "size_average", "=", "True", ",", "\n", "ignore_index", "=", "datasets", ".", "ignore_label", ")", ".", "cuda", "(", ")", "\n", "\n", "", "criterion_val", "=", "CrossEntropyLoss2d", "(", "size_average", "=", "True", ",", "\n", "weight", "=", "None", ",", "\n", "ignore_index", "=", "datasets", ".", "ignore_label", ")", ".", "cuda", "(", ")", "\n", "return", "criterion", ",", "criterion_val", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.None.loss.get_loss_aux": [[71, 89], ["print", "torch.CrossEntropyLoss().cuda", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.CrossEntropyLoss"], "function", ["None"], ["", "def", "get_loss_aux", "(", "args", ")", ":", "\n", "    ", "\"\"\"\n    Get the criterion based on the loss function\n    args: commandline arguments\n    return: criterion, criterion_val\n    \"\"\"", "\n", "if", "args", ".", "cls_wt_loss", ":", "\n", "        ", "ce_weight", "=", "torch", ".", "Tensor", "(", "[", "0.8373", ",", "0.9180", ",", "0.8660", ",", "1.0345", ",", "1.0166", ",", "0.9969", ",", "0.9754", ",", "\n", "1.0489", ",", "0.8786", ",", "1.0023", ",", "0.9539", ",", "0.9843", ",", "1.1116", ",", "0.9037", ",", "\n", "1.0865", ",", "1.0955", ",", "1.0865", ",", "1.1529", ",", "1.0507", "]", ")", "\n", "", "else", ":", "\n", "        ", "ce_weight", "=", "None", "\n", "\n", "", "print", "(", "\"standard cross entropy\"", ")", "\n", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", "weight", "=", "ce_weight", ",", "reduction", "=", "'mean'", ",", "\n", "ignore_index", "=", "datasets", ".", "ignore_label", ")", ".", "cuda", "(", ")", "\n", "\n", "return", "criterion", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.None.loss.get_loss_bcelogit": [[90, 101], ["print", "torch.BCEWithLogitsLoss().cuda", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.BCEWithLogitsLoss"], "function", ["None"], ["", "def", "get_loss_bcelogit", "(", "args", ")", ":", "\n", "    ", "if", "args", ".", "cls_wt_loss", ":", "\n", "        ", "pos_weight", "=", "torch", ".", "Tensor", "(", "[", "0.8373", ",", "0.9180", ",", "0.8660", ",", "1.0345", ",", "1.0166", ",", "0.9969", ",", "0.9754", ",", "\n", "1.0489", ",", "0.8786", ",", "1.0023", ",", "0.9539", ",", "0.9843", ",", "1.1116", ",", "0.9037", ",", "\n", "1.0865", ",", "1.0955", ",", "1.0865", ",", "1.1529", ",", "1.0507", "]", ")", "\n", "", "else", ":", "\n", "        ", "pos_weight", "=", "None", "\n", "", "print", "(", "\"standard bce with logit cross entropy\"", ")", "\n", "criterion", "=", "nn", ".", "BCEWithLogitsLoss", "(", "reduction", "=", "'mean'", ")", ".", "cuda", "(", ")", "\n", "\n", "return", "criterion", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.None.loss.weighted_binary_cross_entropy": [[102, 110], ["torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.neg", "torch.neg", "torch.neg", "torch.mean", "torch.mean", "torch.mean", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log"], "function", ["None"], ["", "def", "weighted_binary_cross_entropy", "(", "output", ",", "target", ")", ":", "\n", "\n", "    ", "weights", "=", "torch", ".", "Tensor", "(", "[", "0.1", ",", "0.9", "]", ")", "\n", "\n", "loss", "=", "weights", "[", "1", "]", "*", "(", "target", "*", "torch", ".", "log", "(", "output", ")", ")", "+", "weights", "[", "0", "]", "*", "(", "(", "1", "-", "target", ")", "*", "torch", ".", "log", "(", "1", "-", "output", ")", ")", "\n", "\n", "return", "torch", ".", "neg", "(", "torch", ".", "mean", "(", "loss", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.None.loss.customsoftmax": [[182, 191], ["torch.softmax", "torch.log", "torch.log", "torch.log", "torch.max", "torch.max", "torch.max"], "function", ["home.repos.pwc.inspect_result.shachoi_RobustNet.None.eval.RunEval.softmax"], ["", "", "def", "customsoftmax", "(", "inp", ",", "multihotmask", ")", ":", "\n", "    ", "\"\"\"\n    Custom Softmax\n    \"\"\"", "\n", "soft", "=", "F", ".", "softmax", "(", "inp", ",", "dim", "=", "1", ")", "\n", "# This takes the mask * softmax ( sums it up hence summing up the classes in border", "\n", "# then takes of summed up version vs no summed version", "\n", "return", "torch", ".", "log", "(", "\n", "torch", ".", "max", "(", "soft", ",", "(", "multihotmask", "*", "(", "soft", "*", "multihotmask", ")", ".", "sum", "(", "1", ",", "keepdim", "=", "True", ")", ")", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.None.valid.main": [[198, 232], ["config.assert_and_infer_cfg", "utils.misc.prep_experiment", "datasets.setup_loaders", "loss.get_loss", "loss.get_loss_aux", "network.get_net", "optimizer.get_optimizer", "torch.nn.SyncBatchNorm.convert_sync_batchnorm", "torch.nn.SyncBatchNorm.convert_sync_batchnorm", "network.warp_network_in_dataparallel", "print", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "extra_val_loaders.items", "optimizer.load_weights", "print", "valid.validate"], "function", ["home.repos.pwc.inspect_result.shachoi_RobustNet.None.config.assert_and_infer_cfg", "home.repos.pwc.inspect_result.shachoi_RobustNet.utils.misc.prep_experiment", "home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.__init__.setup_loaders", "home.repos.pwc.inspect_result.shachoi_RobustNet.None.loss.get_loss", "home.repos.pwc.inspect_result.shachoi_RobustNet.None.loss.get_loss_aux", "home.repos.pwc.inspect_result.shachoi_RobustNet.network.__init__.get_net", "home.repos.pwc.inspect_result.shachoi_RobustNet.None.optimizer.get_optimizer", "home.repos.pwc.inspect_result.shachoi_RobustNet.network.__init__.warp_network_in_dataparallel", "home.repos.pwc.inspect_result.shachoi_RobustNet.None.optimizer.load_weights", "home.repos.pwc.inspect_result.shachoi_RobustNet.None.valid.validate"], ["def", "main", "(", ")", ":", "\n", "    ", "\"\"\"\n    Main Function\n    \"\"\"", "\n", "# Set up the Arguments, Tensorboard Writer, Dataloader, Loss Fn, Optimizer", "\n", "assert_and_infer_cfg", "(", "args", ")", "\n", "prep_experiment", "(", "args", ",", "parser", ")", "\n", "writer", "=", "None", "\n", "\n", "_", ",", "_", ",", "_", ",", "extra_val_loaders", ",", "_", "=", "datasets", ".", "setup_loaders", "(", "args", ")", "\n", "\n", "criterion", ",", "criterion_val", "=", "loss", ".", "get_loss", "(", "args", ")", "\n", "criterion_aux", "=", "loss", ".", "get_loss_aux", "(", "args", ")", "\n", "net", "=", "network", ".", "get_net", "(", "args", ",", "criterion", ",", "criterion_aux", ")", "\n", "\n", "optim", ",", "scheduler", "=", "optimizer", ".", "get_optimizer", "(", "args", ",", "net", ")", "\n", "\n", "net", "=", "torch", ".", "nn", ".", "SyncBatchNorm", ".", "convert_sync_batchnorm", "(", "net", ")", "\n", "net", "=", "network", ".", "warp_network_in_dataparallel", "(", "net", ",", "args", ".", "local_rank", ")", "\n", "epoch", "=", "0", "\n", "i", "=", "0", "\n", "\n", "if", "args", ".", "snapshot", ":", "\n", "        ", "epoch", ",", "mean_iu", "=", "optimizer", ".", "load_weights", "(", "net", ",", "optim", ",", "scheduler", ",", "\n", "args", ".", "snapshot", ",", "args", ".", "restore_optimizer", ")", "\n", "\n", "", "print", "(", "\"#### iteration\"", ",", "i", ")", "\n", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "# Main Loop", "\n", "# for epoch in range(args.start_epoch, args.max_epoch):", "\n", "\n", "for", "dataset", ",", "val_loader", "in", "extra_val_loaders", ".", "items", "(", ")", ":", "\n", "        ", "print", "(", "\"Extra validating... This won't save pth file\"", ")", "\n", "validate", "(", "val_loader", ",", "dataset", ",", "net", ",", "criterion_val", ",", "optim", ",", "scheduler", ",", "epoch", ",", "writer", ",", "i", ",", "save_pth", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.None.valid.validate": [[235, 314], ["net.eval", "utils.misc.AverageMeter", "enumerate", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.distributed.all_reduce", "torch.distributed.all_reduce", "torch.cuda.FloatTensor.cpu().numpy", "utils.misc.AverageMeter.update", "[].cpu", "utils.misc.fast_hist", "utils.misc.evaluate_eval", "len", "inputs.view.view", "gt_image.view.view", "inputs.view.size", "inputs.view.cuda", "gt_image.view.cuda", "torch.no_grad", "torch.no_grad", "criterion().item", "dump_images.append", "[].cpu.numpy().flatten", "gt_image.view.numpy().flatten", "torch.cuda.FloatTensor.cpu", "len", "len", "inputs.view.size", "gt_image.view.size", "inputs.view.size", "inputs.view.size", "net", "net", "net.size", "gt_image.view.size", "net.size", "logging.info", "inputs.view.size", "gt_image.view.size", "criterion", "net.data.max", "len", "[].cpu.numpy", "gt_image.view.numpy"], "function", ["home.repos.pwc.inspect_result.shachoi_RobustNet.utils.misc.AverageMeter.update", "home.repos.pwc.inspect_result.shachoi_RobustNet.utils.misc.fast_hist", "home.repos.pwc.inspect_result.shachoi_RobustNet.utils.misc.evaluate_eval"], ["", "", "def", "validate", "(", "val_loader", ",", "dataset", ",", "net", ",", "criterion", ",", "optim", ",", "scheduler", ",", "curr_epoch", ",", "writer", ",", "curr_iter", ",", "save_pth", "=", "True", ")", ":", "\n", "    ", "\"\"\"\n    Runs the validation loop after each training epoch\n    val_loader: Data loader for validation\n    dataset: dataset name (str)\n    net: thet network\n    criterion: loss fn\n    optimizer: optimizer\n    curr_epoch: current epoch\n    writer: tensorboard writer\n    return: val_avg for step function if required\n    \"\"\"", "\n", "\n", "net", ".", "eval", "(", ")", "\n", "val_loss", "=", "AverageMeter", "(", ")", "\n", "iou_acc", "=", "0", "\n", "error_acc", "=", "0", "\n", "dump_images", "=", "[", "]", "\n", "\n", "for", "val_idx", ",", "data", "in", "enumerate", "(", "val_loader", ")", ":", "\n", "# input        = torch.Size([1, 3, 713, 713])", "\n", "# gt_image           = torch.Size([1, 713, 713])", "\n", "        ", "inputs", ",", "gt_image", ",", "img_names", ",", "_", "=", "data", "\n", "\n", "if", "len", "(", "inputs", ".", "shape", ")", "==", "5", ":", "\n", "            ", "B", ",", "D", ",", "C", ",", "H", ",", "W", "=", "inputs", ".", "shape", "\n", "inputs", "=", "inputs", ".", "view", "(", "-", "1", ",", "C", ",", "H", ",", "W", ")", "\n", "gt_image", "=", "gt_image", ".", "view", "(", "-", "1", ",", "1", ",", "H", ",", "W", ")", "\n", "\n", "", "assert", "len", "(", "inputs", ".", "size", "(", ")", ")", "==", "4", "and", "len", "(", "gt_image", ".", "size", "(", ")", ")", "==", "3", "\n", "assert", "inputs", ".", "size", "(", ")", "[", "2", ":", "]", "==", "gt_image", ".", "size", "(", ")", "[", "1", ":", "]", "\n", "\n", "batch_pixel_size", "=", "inputs", ".", "size", "(", "0", ")", "*", "inputs", ".", "size", "(", "2", ")", "*", "inputs", ".", "size", "(", "3", ")", "\n", "inputs", ",", "gt_cuda", "=", "inputs", ".", "cuda", "(", ")", ",", "gt_image", ".", "cuda", "(", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "if", "args", ".", "use_wtloss", ":", "\n", "                ", "output", ",", "f_cor_arr", "=", "net", "(", "inputs", ",", "visualize", "=", "True", ")", "\n", "", "else", ":", "\n", "                ", "output", "=", "net", "(", "inputs", ")", "\n", "\n", "", "", "del", "inputs", "\n", "\n", "assert", "output", ".", "size", "(", ")", "[", "2", ":", "]", "==", "gt_image", ".", "size", "(", ")", "[", "1", ":", "]", "\n", "assert", "output", ".", "size", "(", ")", "[", "1", "]", "==", "datasets", ".", "num_classes", "\n", "\n", "val_loss", ".", "update", "(", "criterion", "(", "output", ",", "gt_cuda", ")", ".", "item", "(", ")", ",", "batch_pixel_size", ")", "\n", "\n", "del", "gt_cuda", "\n", "\n", "# Collect data from different GPU to a single GPU since", "\n", "# encoding.parallel.criterionparallel function calculates distributed loss", "\n", "# functions", "\n", "predictions", "=", "output", ".", "data", ".", "max", "(", "1", ")", "[", "1", "]", ".", "cpu", "(", ")", "\n", "\n", "# Logging", "\n", "if", "val_idx", "%", "20", "==", "0", ":", "\n", "            ", "if", "args", ".", "local_rank", "==", "0", ":", "\n", "                ", "logging", ".", "info", "(", "\"validating: %d / %d\"", ",", "val_idx", "+", "1", ",", "len", "(", "val_loader", ")", ")", "\n", "", "", "if", "val_idx", ">", "10", "and", "args", ".", "test_mode", ":", "\n", "            ", "break", "\n", "\n", "# Image Dumps", "\n", "", "if", "val_idx", "<", "10", ":", "\n", "            ", "dump_images", ".", "append", "(", "[", "gt_image", ",", "predictions", ",", "img_names", "]", ")", "\n", "\n", "", "iou_acc", "+=", "fast_hist", "(", "predictions", ".", "numpy", "(", ")", ".", "flatten", "(", ")", ",", "gt_image", ".", "numpy", "(", ")", ".", "flatten", "(", ")", ",", "\n", "datasets", ".", "num_classes", ")", "\n", "del", "output", ",", "val_idx", ",", "data", "\n", "\n", "", "iou_acc_tensor", "=", "torch", ".", "cuda", ".", "FloatTensor", "(", "iou_acc", ")", "\n", "torch", ".", "distributed", ".", "all_reduce", "(", "iou_acc_tensor", ",", "op", "=", "torch", ".", "distributed", ".", "ReduceOp", ".", "SUM", ")", "\n", "iou_acc", "=", "iou_acc_tensor", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "if", "args", ".", "local_rank", "==", "0", ":", "\n", "        ", "evaluate_eval", "(", "args", ",", "net", ",", "optim", ",", "scheduler", ",", "val_loss", ",", "iou_acc", ",", "dump_images", ",", "\n", "writer", ",", "curr_epoch", ",", "dataset", ",", "None", ",", "curr_iter", ",", "save_pth", "=", "save_pth", ")", "\n", "\n", "", "return", "val_loss", ".", "avg", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.None.optimizer.get_optimizer": [[11, 48], ["net.named_parameters", "base_params.append", "torch.optim.SGD", "ValueError", "torch.optim.lr_scheduler.LambdaLR", "ValueError", "torch.optim.lr_scheduler.LambdaLR", "ValueError", "math.pow", "math.pow", "math.pow"], "function", ["None"], ["def", "get_optimizer", "(", "args", ",", "net", ")", ":", "\n", "    ", "\"\"\"\n    Decide Optimizer (Adam or SGD)\n    \"\"\"", "\n", "base_params", "=", "[", "]", "\n", "\n", "for", "name", ",", "param", "in", "net", ".", "named_parameters", "(", ")", ":", "\n", "        ", "base_params", ".", "append", "(", "param", ")", "\n", "\n", "", "if", "args", ".", "sgd", ":", "\n", "        ", "optimizer", "=", "optim", ".", "SGD", "(", "base_params", ",", "\n", "lr", "=", "args", ".", "lr", ",", "\n", "weight_decay", "=", "5e-4", ",", "#args.weight_decay,", "\n", "momentum", "=", "args", ".", "momentum", ",", "\n", "nesterov", "=", "False", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'Not a valid optimizer'", ")", "\n", "\n", "", "if", "args", ".", "lr_schedule", "==", "'scl-poly'", ":", "\n", "        ", "if", "cfg", ".", "REDUCE_BORDER_ITER", "==", "-", "1", ":", "\n", "            ", "raise", "ValueError", "(", "'ERROR Cannot Do Scale Poly'", ")", "\n", "\n", "", "rescale_thresh", "=", "cfg", ".", "REDUCE_BORDER_ITER", "\n", "scale_value", "=", "args", ".", "rescale", "\n", "lambda1", "=", "lambda", "iteration", ":", "math", ".", "pow", "(", "1", "-", "iteration", "/", "args", ".", "max_iter", ",", "\n", "args", ".", "poly_exp", ")", "if", "iteration", "<", "rescale_thresh", "else", "scale_value", "*", "math", ".", "pow", "(", "\n", "1", "-", "(", "iteration", "-", "rescale_thresh", ")", "/", "(", "args", ".", "max_iter", "-", "rescale_thresh", ")", ",", "\n", "args", ".", "repoly", ")", "\n", "scheduler", "=", "optim", ".", "lr_scheduler", ".", "LambdaLR", "(", "optimizer", ",", "lr_lambda", "=", "lambda1", ")", "\n", "", "elif", "args", ".", "lr_schedule", "==", "'poly'", ":", "\n", "        ", "lambda1", "=", "lambda", "iteration", ":", "math", ".", "pow", "(", "1", "-", "iteration", "/", "args", ".", "max_iter", ",", "args", ".", "poly_exp", ")", "\n", "scheduler", "=", "optim", ".", "lr_scheduler", ".", "LambdaLR", "(", "optimizer", ",", "lr_lambda", "=", "lambda1", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'unknown lr schedule {}'", ".", "format", "(", "args", ".", "lr_schedule", ")", ")", "\n", "\n", "", "return", "optimizer", ",", "scheduler", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.None.optimizer.load_weights": [[50, 58], ["logging.info", "optimizer.restore_snapshot"], "function", ["home.repos.pwc.inspect_result.shachoi_RobustNet.None.optimizer.restore_snapshot"], ["", "def", "load_weights", "(", "net", ",", "optimizer", ",", "scheduler", ",", "snapshot_file", ",", "restore_optimizer_bool", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    Load weights from snapshot file\n    \"\"\"", "\n", "logging", ".", "info", "(", "\"Loading weights from model %s\"", ",", "snapshot_file", ")", "\n", "net", ",", "optimizer", ",", "scheduler", ",", "epoch", ",", "mean_iu", "=", "restore_snapshot", "(", "net", ",", "optimizer", ",", "scheduler", ",", "snapshot_file", ",", "\n", "restore_optimizer_bool", ")", "\n", "return", "epoch", ",", "mean_iu", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.None.optimizer.restore_snapshot": [[60, 77], ["torch.load", "logging.info", "optimizer.load_state_dict", "scheduler.load_state_dict", "optimizer.forgiving_state_restore", "optimizer.forgiving_state_restore", "torch.device"], "function", ["home.repos.pwc.inspect_result.shachoi_RobustNet.network.mynn.forgiving_state_restore", "home.repos.pwc.inspect_result.shachoi_RobustNet.network.mynn.forgiving_state_restore"], ["", "def", "restore_snapshot", "(", "net", ",", "optimizer", ",", "scheduler", ",", "snapshot", ",", "restore_optimizer_bool", ")", ":", "\n", "    ", "\"\"\"\n    Restore weights and optimizer (if needed ) for resuming job.\n    \"\"\"", "\n", "checkpoint", "=", "torch", ".", "load", "(", "snapshot", ",", "map_location", "=", "torch", ".", "device", "(", "'cpu'", ")", ")", "\n", "logging", ".", "info", "(", "\"Checkpoint Load Compelete\"", ")", "\n", "if", "optimizer", "is", "not", "None", "and", "'optimizer'", "in", "checkpoint", "and", "restore_optimizer_bool", ":", "\n", "        ", "optimizer", ".", "load_state_dict", "(", "checkpoint", "[", "'optimizer'", "]", ")", "\n", "", "if", "scheduler", "is", "not", "None", "and", "'scheduler'", "in", "checkpoint", "and", "restore_optimizer_bool", ":", "\n", "        ", "scheduler", ".", "load_state_dict", "(", "checkpoint", "[", "'scheduler'", "]", ")", "\n", "\n", "", "if", "'state_dict'", "in", "checkpoint", ":", "\n", "        ", "net", "=", "forgiving_state_restore", "(", "net", ",", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "", "else", ":", "\n", "        ", "net", "=", "forgiving_state_restore", "(", "net", ",", "checkpoint", ")", "\n", "\n", "", "return", "net", ",", "optimizer", ",", "scheduler", ",", "checkpoint", "[", "'epoch'", "]", ",", "checkpoint", "[", "'mean_iu'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.None.optimizer.forgiving_state_restore": [[79, 96], ["net.state_dict", "net.state_dict.update", "net.load_state_dict", "print", "net_state_dict[].size", "loaded_dict[].size"], "function", ["home.repos.pwc.inspect_result.shachoi_RobustNet.utils.misc.AverageMeter.update"], ["", "def", "forgiving_state_restore", "(", "net", ",", "loaded_dict", ")", ":", "\n", "    ", "\"\"\"\n    Handle partial loading when some tensors don't match up in size.\n    Because we want to use models that were trained off a different\n    number of classes.\n    \"\"\"", "\n", "net_state_dict", "=", "net", ".", "state_dict", "(", ")", "\n", "new_loaded_dict", "=", "{", "}", "\n", "for", "k", "in", "net_state_dict", ":", "\n", "        ", "if", "k", "in", "loaded_dict", "and", "net_state_dict", "[", "k", "]", ".", "size", "(", ")", "==", "loaded_dict", "[", "k", "]", ".", "size", "(", ")", ":", "\n", "            ", "new_loaded_dict", "[", "k", "]", "=", "loaded_dict", "[", "k", "]", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"Skipped loading parameter\"", ",", "k", ")", "\n", "# logging.info(\"Skipped loading parameter %s\", k)", "\n", "", "", "net_state_dict", ".", "update", "(", "new_loaded_dict", ")", "\n", "net", ".", "load_state_dict", "(", "net_state_dict", ")", "\n", "return", "net", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.None.optimizer.forgiving_state_copy": [[97, 116], ["target_net.state_dict", "source_net.state_dict", "target_net.state_dict.update", "target_net.load_state_dict", "print", "print", "net_state_dict[].size", "loaded_dict[].size"], "function", ["home.repos.pwc.inspect_result.shachoi_RobustNet.utils.misc.AverageMeter.update"], ["", "def", "forgiving_state_copy", "(", "target_net", ",", "source_net", ")", ":", "\n", "    ", "\"\"\"\n    Handle partial loading when some tensors don't match up in size.\n    Because we want to use models that were trained off a different\n    number of classes.\n    \"\"\"", "\n", "net_state_dict", "=", "target_net", ".", "state_dict", "(", ")", "\n", "loaded_dict", "=", "source_net", ".", "state_dict", "(", ")", "\n", "new_loaded_dict", "=", "{", "}", "\n", "for", "k", "in", "net_state_dict", ":", "\n", "        ", "if", "k", "in", "loaded_dict", "and", "net_state_dict", "[", "k", "]", ".", "size", "(", ")", "==", "loaded_dict", "[", "k", "]", ".", "size", "(", ")", ":", "\n", "            ", "new_loaded_dict", "[", "k", "]", "=", "loaded_dict", "[", "k", "]", "\n", "print", "(", "\"Matched\"", ",", "k", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"Skipped loading parameter \"", ",", "k", ")", "\n", "# logging.info(\"Skipped loading parameter %s\", k)", "\n", "", "", "net_state_dict", ".", "update", "(", "new_loaded_dict", ")", "\n", "target_net", ".", "load_state_dict", "(", "net_state_dict", ")", "\n", "return", "target_net", "\n", "", ""]], "home.repos.pwc.inspect_result.shachoi_RobustNet.utils.attr_dict.AttrDict.__init__": [[34, 37], ["dict.__init__"], "methods", ["home.repos.pwc.inspect_result.shachoi_RobustNet.transforms.joint_transforms.ClassUniform.__init__"], ["def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "AttrDict", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "self", ".", "__dict__", "[", "AttrDict", ".", "IMMUTABLE", "]", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.utils.attr_dict.AttrDict.__getattr__": [[38, 45], ["AttributeError"], "methods", ["None"], ["", "def", "__getattr__", "(", "self", ",", "name", ")", ":", "\n", "        ", "if", "name", "in", "self", ".", "__dict__", ":", "\n", "            ", "return", "self", ".", "__dict__", "[", "name", "]", "\n", "", "elif", "name", "in", "self", ":", "\n", "            ", "return", "self", "[", "name", "]", "\n", "", "else", ":", "\n", "            ", "raise", "AttributeError", "(", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.utils.attr_dict.AttrDict.__setattr__": [[46, 56], ["AttributeError"], "methods", ["None"], ["", "", "def", "__setattr__", "(", "self", ",", "name", ",", "value", ")", ":", "\n", "        ", "if", "not", "self", ".", "__dict__", "[", "AttrDict", ".", "IMMUTABLE", "]", ":", "\n", "            ", "if", "name", "in", "self", ".", "__dict__", ":", "\n", "                ", "self", ".", "__dict__", "[", "name", "]", "=", "value", "\n", "", "else", ":", "\n", "                ", "self", "[", "name", "]", "=", "value", "\n", "", "", "else", ":", "\n", "            ", "raise", "AttributeError", "(", "\n", "'Attempted to set \"{}\" to \"{}\", but AttrDict is immutable'", ".", "\n", "format", "(", "name", ",", "value", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.utils.attr_dict.AttrDict.immutable": [[58, 70], ["attr_dict.AttrDict.__dict__.values", "attr_dict.AttrDict.values", "isinstance", "isinstance", "v.immutable", "v.immutable"], "methods", ["home.repos.pwc.inspect_result.shachoi_RobustNet.utils.attr_dict.AttrDict.immutable", "home.repos.pwc.inspect_result.shachoi_RobustNet.utils.attr_dict.AttrDict.immutable"], ["", "", "def", "immutable", "(", "self", ",", "is_immutable", ")", ":", "\n", "        ", "\"\"\"Set immutability to is_immutable and recursively apply the setting\n        to all nested AttrDicts.\n        \"\"\"", "\n", "self", ".", "__dict__", "[", "AttrDict", ".", "IMMUTABLE", "]", "=", "is_immutable", "\n", "# Recursively set immutable state", "\n", "for", "v", "in", "self", ".", "__dict__", ".", "values", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "v", ",", "AttrDict", ")", ":", "\n", "                ", "v", ".", "immutable", "(", "is_immutable", ")", "\n", "", "", "for", "v", "in", "self", ".", "values", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "v", ",", "AttrDict", ")", ":", "\n", "                ", "v", ".", "immutable", "(", "is_immutable", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.utils.attr_dict.AttrDict.is_immutable": [[71, 73], ["None"], "methods", ["None"], ["", "", "", "def", "is_immutable", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__dict__", "[", "AttrDict", ".", "IMMUTABLE", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.shachoi_RobustNet.utils.misc.AverageMeter.__init__": [[295, 297], ["misc.AverageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.shachoi_RobustNet.utils.misc.AverageMeter.reset"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.utils.misc.AverageMeter.reset": [[298, 303], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.utils.misc.AverageMeter.update": [[304, 309], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "\n", "", "", ""]], "home.repos.pwc.inspect_result.shachoi_RobustNet.utils.misc.make_exp_name": [[24, 64], ["vars", "sorted", "parser.get_default", "str", "isinstance", "str"], "function", ["None"], ["def", "make_exp_name", "(", "args", ",", "parser", ")", ":", "\n", "    ", "exp_name", "=", "'{}-{}'", ".", "format", "(", "args", ".", "dataset", "[", ":", "4", "]", ",", "args", ".", "arch", "[", ":", "]", ")", "\n", "dict_args", "=", "vars", "(", "args", ")", "\n", "\n", "# sort so that we get a consistent directory name", "\n", "argnames", "=", "sorted", "(", "dict_args", ")", "\n", "ignorelist", "=", "[", "'date'", ",", "'exp'", ",", "'arch'", ",", "'prev_best_filepath'", ",", "'lr_schedule'", ",", "'max_cu_epoch'", ",", "'max_epoch'", ",", "\n", "'strict_bdr_cls'", ",", "'world_size'", ",", "'tb_path'", ",", "'best_record'", ",", "'test_mode'", ",", "'ckpt'", ",", "'coarse_boost_classes'", ",", "\n", "'crop_size'", ",", "'dist_url'", ",", "'syncbn'", ",", "'max_iter'", ",", "'color_aug'", ",", "'scale_max'", ",", "'scale_min'", ",", "'bs_mult'", ",", "\n", "'class_uniform_pct'", ",", "'class_uniform_tile'", "]", "\n", "# build experiment name with non-default args", "\n", "for", "argname", "in", "argnames", ":", "\n", "        ", "if", "dict_args", "[", "argname", "]", "!=", "parser", ".", "get_default", "(", "argname", ")", ":", "\n", "            ", "if", "argname", "in", "ignorelist", ":", "\n", "                ", "continue", "\n", "", "if", "argname", "==", "'snapshot'", ":", "\n", "                ", "arg_str", "=", "'PT'", "\n", "argname", "=", "''", "\n", "", "elif", "argname", "==", "'nosave'", ":", "\n", "                ", "arg_str", "=", "''", "\n", "argname", "=", "''", "\n", "", "elif", "argname", "==", "'freeze_trunk'", ":", "\n", "                ", "argname", "=", "''", "\n", "arg_str", "=", "'ft'", "\n", "", "elif", "argname", "==", "'syncbn'", ":", "\n", "                ", "argname", "=", "''", "\n", "arg_str", "=", "'sbn'", "\n", "", "elif", "argname", "==", "'jointwtborder'", ":", "\n", "                ", "argname", "=", "''", "\n", "arg_str", "=", "'rlx_loss'", "\n", "", "elif", "isinstance", "(", "dict_args", "[", "argname", "]", ",", "bool", ")", ":", "\n", "                ", "arg_str", "=", "'T'", "if", "dict_args", "[", "argname", "]", "else", "'F'", "\n", "", "else", ":", "\n", "                ", "arg_str", "=", "str", "(", "dict_args", "[", "argname", "]", ")", "[", ":", "7", "]", "\n", "", "if", "argname", "is", "not", "''", ":", "\n", "                ", "exp_name", "+=", "'_{}_{}'", ".", "format", "(", "str", "(", "argname", ")", ",", "arg_str", ")", "\n", "", "else", ":", "\n", "                ", "exp_name", "+=", "'_{}'", ".", "format", "(", "arg_str", ")", "\n", "# clean special chars out    exp_name = re.sub(r'[^A-Za-z0-9_\\-]+', '', exp_name)", "\n", "", "", "", "return", "exp_name", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.utils.misc.fast_hist": [[65, 71], ["numpy.bincount().reshape", "numpy.bincount", "label_true[].astype"], "function", ["None"], ["", "def", "fast_hist", "(", "label_pred", ",", "label_true", ",", "num_classes", ")", ":", "\n", "    ", "mask", "=", "(", "label_true", ">=", "0", ")", "&", "(", "label_true", "<", "num_classes", ")", "\n", "hist", "=", "np", ".", "bincount", "(", "\n", "num_classes", "*", "label_true", "[", "mask", "]", ".", "astype", "(", "int", ")", "+", "\n", "label_pred", "[", "mask", "]", ",", "minlength", "=", "num_classes", "**", "2", ")", ".", "reshape", "(", "num_classes", ",", "num_classes", ")", "\n", "return", "hist", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.utils.misc.per_class_iu": [[72, 74], ["numpy.diag", "numpy.diag", "hist.sum", "hist.sum"], "function", ["None"], ["", "def", "per_class_iu", "(", "hist", ")", ":", "\n", "    ", "return", "np", ".", "diag", "(", "hist", ")", "/", "(", "hist", ".", "sum", "(", "1", ")", "+", "hist", ".", "sum", "(", "0", ")", "-", "np", ".", "diag", "(", "hist", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.utils.misc.save_log": [[75, 91], ["os.path.join", "print", "logging.basicConfig", "logging.StreamHandler", "logging.StreamHandler.setLevel", "logging.Formatter", "logging.StreamHandler.setFormatter", "logging.getLogger().addHandler", "logging.FileHandler", "logging.getLogger().addHandler", "str", "logging.getLogger", "logging.getLogger"], "function", ["None"], ["", "def", "save_log", "(", "prefix", ",", "output_dir", ",", "date_str", ",", "rank", "=", "0", ")", ":", "\n", "    ", "fmt", "=", "'%(asctime)s.%(msecs)03d %(message)s'", "\n", "date_fmt", "=", "'%m-%d %H:%M:%S'", "\n", "filename", "=", "os", ".", "path", ".", "join", "(", "output_dir", ",", "prefix", "+", "'_'", "+", "date_str", "+", "'_rank_'", "+", "str", "(", "rank", ")", "+", "'.log'", ")", "\n", "print", "(", "\"Logging :\"", ",", "filename", ")", "\n", "logging", ".", "basicConfig", "(", "level", "=", "logging", ".", "INFO", ",", "format", "=", "fmt", ",", "datefmt", "=", "date_fmt", ",", "\n", "filename", "=", "filename", ",", "filemode", "=", "'w'", ")", "\n", "console", "=", "logging", ".", "StreamHandler", "(", ")", "\n", "console", ".", "setLevel", "(", "logging", ".", "INFO", ")", "\n", "formatter", "=", "logging", ".", "Formatter", "(", "fmt", "=", "fmt", ",", "datefmt", "=", "date_fmt", ")", "\n", "console", ".", "setFormatter", "(", "formatter", ")", "\n", "if", "rank", "==", "0", ":", "\n", "        ", "logging", ".", "getLogger", "(", "''", ")", ".", "addHandler", "(", "console", ")", "\n", "", "else", ":", "\n", "        ", "fh", "=", "logging", ".", "FileHandler", "(", "filename", ")", "\n", "logging", ".", "getLogger", "(", "''", ")", ".", "addHandler", "(", "fh", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.utils.misc.prep_experiment": [[94, 118], ["misc.make_exp_name", "os.path.join", "os.path.join", "torch.cuda.device_count", "str", "str", "str", "datetime.datetime.now().strftime", "os.makedirs", "os.makedirs", "misc.save_log", "open().write", "tensorboardX.SummaryWriter", "datetime.datetime.now().strftime", "datetime.datetime.now().strftime", "datetime.datetime.now", "open", "str", "datetime.datetime.now", "datetime.datetime.now", "os.path.join"], "function", ["home.repos.pwc.inspect_result.shachoi_RobustNet.utils.misc.make_exp_name", "home.repos.pwc.inspect_result.shachoi_RobustNet.utils.misc.save_log"], ["", "", "def", "prep_experiment", "(", "args", ",", "parser", ")", ":", "\n", "    ", "\"\"\"\n    Make output directories, setup logging, Tensorboard, snapshot code.\n    \"\"\"", "\n", "ckpt_path", "=", "args", ".", "ckpt", "\n", "tb_path", "=", "args", ".", "tb_path", "\n", "exp_name", "=", "make_exp_name", "(", "args", ",", "parser", ")", "\n", "args", ".", "exp_path", "=", "os", ".", "path", ".", "join", "(", "ckpt_path", ",", "args", ".", "date", ",", "args", ".", "exp", ",", "str", "(", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "'%m_%d_%H'", ")", ")", ")", "\n", "args", ".", "tb_exp_path", "=", "os", ".", "path", ".", "join", "(", "tb_path", ",", "args", ".", "date", ",", "args", ".", "exp", ",", "str", "(", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "'%m_%d_%H'", ")", ")", ")", "\n", "args", ".", "ngpu", "=", "torch", ".", "cuda", ".", "device_count", "(", ")", "\n", "args", ".", "date_str", "=", "str", "(", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "'%Y_%m_%d_%H_%M_%S'", ")", ")", "\n", "args", ".", "best_record", "=", "{", "}", "\n", "# args.best_record = {'epoch': -1, 'iter': 0, 'val_loss': 1e10, 'acc': 0,", "\n", "#                    'acc_cls': 0, 'mean_iu': 0, 'fwavacc': 0}", "\n", "args", ".", "last_record", "=", "{", "}", "\n", "if", "args", ".", "local_rank", "==", "0", ":", "\n", "        ", "os", ".", "makedirs", "(", "args", ".", "exp_path", ",", "exist_ok", "=", "True", ")", "\n", "os", ".", "makedirs", "(", "args", ".", "tb_exp_path", ",", "exist_ok", "=", "True", ")", "\n", "save_log", "(", "'log'", ",", "args", ".", "exp_path", ",", "args", ".", "date_str", ",", "rank", "=", "args", ".", "local_rank", ")", "\n", "open", "(", "os", ".", "path", ".", "join", "(", "args", ".", "exp_path", ",", "args", ".", "date_str", "+", "'.txt'", ")", ",", "'w'", ")", ".", "write", "(", "\n", "str", "(", "args", ")", "+", "'\\n\\n'", ")", "\n", "writer", "=", "SummaryWriter", "(", "log_dir", "=", "args", ".", "tb_exp_path", ",", "comment", "=", "args", ".", "tb_tag", ")", "\n", "return", "writer", "\n", "", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.utils.misc.evaluate_eval_for_inference": [[119, 136], ["numpy.nanmean", "misc.print_evaluate_results", "numpy.nanmean", "logging.info", "numpy.diag().sum", "hist.sum", "numpy.diag", "hist.sum", "numpy.diag", "hist.sum", "hist.sum", "numpy.diag", "numpy.diag", "hist.sum", "hist.sum"], "function", ["home.repos.pwc.inspect_result.shachoi_RobustNet.utils.misc.print_evaluate_results"], ["", "def", "evaluate_eval_for_inference", "(", "hist", ",", "dataset", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Modified IOU mechanism for on-the-fly IOU calculations ( prevents memory overflow for\n    large dataset) Only applies to eval/eval.py\n    \"\"\"", "\n", "# axis 0: gt, axis 1: prediction", "\n", "acc", "=", "np", ".", "diag", "(", "hist", ")", ".", "sum", "(", ")", "/", "hist", ".", "sum", "(", ")", "\n", "acc_cls", "=", "np", ".", "diag", "(", "hist", ")", "/", "hist", ".", "sum", "(", "axis", "=", "1", ")", "\n", "acc_cls", "=", "np", ".", "nanmean", "(", "acc_cls", ")", "\n", "iu", "=", "np", ".", "diag", "(", "hist", ")", "/", "(", "hist", ".", "sum", "(", "axis", "=", "1", ")", "+", "hist", ".", "sum", "(", "axis", "=", "0", ")", "-", "np", ".", "diag", "(", "hist", ")", ")", "\n", "\n", "print_evaluate_results", "(", "hist", ",", "iu", ",", "dataset", "=", "dataset", ")", "\n", "freq", "=", "hist", ".", "sum", "(", "axis", "=", "1", ")", "/", "hist", ".", "sum", "(", ")", "\n", "mean_iu", "=", "np", ".", "nanmean", "(", "iu", ")", "\n", "logging", ".", "info", "(", "'mean {}'", ".", "format", "(", "mean_iu", ")", ")", "\n", "fwavacc", "=", "(", "freq", "[", "freq", ">", "0", "]", "*", "iu", "[", "freq", ">", "0", "]", ")", ".", "sum", "(", ")", "\n", "return", "acc", ",", "acc_cls", ",", "mean_iu", ",", "fwavacc", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.utils.misc.evaluate_eval": [[139, 255], ["numpy.nanmean", "misc.print_evaluate_results", "numpy.nanmean", "logging.info", "args.last_record.keys", "os.path.join", "torch.cuda.synchronize", "logging.info", "logging.info", "numpy.diag().sum", "hist.sum", "numpy.diag", "hist.sum", "numpy.diag", "hist.sum", "hist.sum", "os.path.join", "torch.save", "torch.save", "logging.info", "logging.info", "logging.info", "writer.add_scalar", "writer.add_scalar", "writer.add_scalar", "writer.add_scalar", "numpy.diag", "os.remove", "args.best_record.keys", "os.path.join", "shutil.copyfile", "numpy.diag", "hist.sum", "hist.sum", "net.state_dict", "optimizer.state_dict", "optimizer_at.state_dict", "scheduler.state_dict", "scheduler_at.state_dict", "net.state_dict", "optimizer.state_dict", "scheduler.state_dict", "os.path.join", "os.path.exists", "os.remove"], "function", ["home.repos.pwc.inspect_result.shachoi_RobustNet.utils.misc.print_evaluate_results"], ["", "def", "evaluate_eval", "(", "args", ",", "net", ",", "optimizer", ",", "scheduler", ",", "val_loss", ",", "hist", ",", "dump_images", ",", "writer", ",", "epoch", "=", "0", ",", "dataset_name", "=", "None", ",", "dataset", "=", "None", ",", "curr_iter", "=", "0", ",", "optimizer_at", "=", "None", ",", "scheduler_at", "=", "None", ",", "save_pth", "=", "True", ")", ":", "\n", "    ", "\"\"\"\n    Modified IOU mechanism for on-the-fly IOU calculations ( prevents memory overflow for\n    large dataset) Only applies to eval/eval.py\n    \"\"\"", "\n", "if", "val_loss", "is", "not", "None", "and", "hist", "is", "not", "None", ":", "\n", "# axis 0: gt, axis 1: prediction", "\n", "        ", "acc", "=", "np", ".", "diag", "(", "hist", ")", ".", "sum", "(", ")", "/", "hist", ".", "sum", "(", ")", "\n", "acc_cls", "=", "np", ".", "diag", "(", "hist", ")", "/", "hist", ".", "sum", "(", "axis", "=", "1", ")", "\n", "acc_cls", "=", "np", ".", "nanmean", "(", "acc_cls", ")", "\n", "iu", "=", "np", ".", "diag", "(", "hist", ")", "/", "(", "hist", ".", "sum", "(", "axis", "=", "1", ")", "+", "hist", ".", "sum", "(", "axis", "=", "0", ")", "-", "np", ".", "diag", "(", "hist", ")", ")", "\n", "\n", "print_evaluate_results", "(", "hist", ",", "iu", ",", "dataset_name", "=", "dataset_name", ",", "dataset", "=", "dataset", ")", "\n", "freq", "=", "hist", ".", "sum", "(", "axis", "=", "1", ")", "/", "hist", ".", "sum", "(", ")", "\n", "mean_iu", "=", "np", ".", "nanmean", "(", "iu", ")", "\n", "logging", ".", "info", "(", "'mean {}'", ".", "format", "(", "mean_iu", ")", ")", "\n", "fwavacc", "=", "(", "freq", "[", "freq", ">", "0", "]", "*", "iu", "[", "freq", ">", "0", "]", ")", ".", "sum", "(", ")", "\n", "", "else", ":", "\n", "        ", "mean_iu", "=", "0", "\n", "\n", "", "if", "dataset_name", "not", "in", "args", ".", "last_record", ".", "keys", "(", ")", ":", "\n", "        ", "args", ".", "last_record", "[", "dataset_name", "]", "=", "{", "}", "\n", "\n", "", "if", "save_pth", ":", "\n", "# update latest snapshot", "\n", "        ", "if", "'mean_iu'", "in", "args", ".", "last_record", "[", "dataset_name", "]", ":", "\n", "            ", "last_snapshot", "=", "'last_{}_epoch_{}_mean-iu_{:.5f}.pth'", ".", "format", "(", "\n", "dataset_name", ",", "args", ".", "last_record", "[", "dataset_name", "]", "[", "'epoch'", "]", ",", "\n", "args", ".", "last_record", "[", "dataset_name", "]", "[", "'mean_iu'", "]", ")", "\n", "last_snapshot", "=", "os", ".", "path", ".", "join", "(", "args", ".", "exp_path", ",", "last_snapshot", ")", "\n", "try", ":", "\n", "                ", "os", ".", "remove", "(", "last_snapshot", ")", "\n", "", "except", "OSError", ":", "\n", "                ", "pass", "\n", "\n", "", "", "last_snapshot", "=", "'last_{}_epoch_{}_mean-iu_{:.5f}.pth'", ".", "format", "(", "dataset_name", ",", "epoch", ",", "mean_iu", ")", "\n", "last_snapshot", "=", "os", ".", "path", ".", "join", "(", "args", ".", "exp_path", ",", "last_snapshot", ")", "\n", "args", ".", "last_record", "[", "dataset_name", "]", "[", "'mean_iu'", "]", "=", "mean_iu", "\n", "args", ".", "last_record", "[", "dataset_name", "]", "[", "'epoch'", "]", "=", "epoch", "\n", "\n", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "\n", "if", "optimizer_at", "is", "not", "None", ":", "\n", "            ", "torch", ".", "save", "(", "{", "\n", "'state_dict'", ":", "net", ".", "state_dict", "(", ")", ",", "\n", "'optimizer'", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "'optimizer_at'", ":", "optimizer_at", ".", "state_dict", "(", ")", ",", "\n", "'scheduler'", ":", "scheduler", ".", "state_dict", "(", ")", ",", "\n", "'scheduler_at'", ":", "scheduler_at", ".", "state_dict", "(", ")", ",", "\n", "'epoch'", ":", "epoch", ",", "\n", "'mean_iu'", ":", "mean_iu", ",", "\n", "'command'", ":", "' '", ".", "join", "(", "sys", ".", "argv", "[", "1", ":", "]", ")", "\n", "}", ",", "last_snapshot", ")", "\n", "", "else", ":", "\n", "            ", "torch", ".", "save", "(", "{", "\n", "'state_dict'", ":", "net", ".", "state_dict", "(", ")", ",", "\n", "'optimizer'", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "'scheduler'", ":", "scheduler", ".", "state_dict", "(", ")", ",", "\n", "'epoch'", ":", "epoch", ",", "\n", "'mean_iu'", ":", "mean_iu", ",", "\n", "'command'", ":", "' '", ".", "join", "(", "sys", ".", "argv", "[", "1", ":", "]", ")", "\n", "}", ",", "last_snapshot", ")", "\n", "\n", "", "if", "val_loss", "is", "not", "None", "and", "hist", "is", "not", "None", ":", "\n", "            ", "if", "dataset_name", "not", "in", "args", ".", "best_record", ".", "keys", "(", ")", ":", "\n", "                ", "args", ".", "best_record", "[", "dataset_name", "]", "=", "{", "'epoch'", ":", "-", "1", ",", "'iter'", ":", "0", ",", "'val_loss'", ":", "1e10", ",", "'acc'", ":", "0", ",", "\n", "'acc_cls'", ":", "0", ",", "'mean_iu'", ":", "0", ",", "'fwavacc'", ":", "0", "}", "\n", "# update best snapshot", "\n", "", "if", "mean_iu", ">", "args", ".", "best_record", "[", "dataset_name", "]", "[", "'mean_iu'", "]", ":", "\n", "# remove old best snapshot", "\n", "                ", "if", "args", ".", "best_record", "[", "dataset_name", "]", "[", "'epoch'", "]", "!=", "-", "1", ":", "\n", "                    ", "best_snapshot", "=", "'best_{}_epoch_{}_mean-iu_{:.5f}.pth'", ".", "format", "(", "\n", "dataset_name", ",", "args", ".", "best_record", "[", "dataset_name", "]", "[", "'epoch'", "]", ",", "\n", "args", ".", "best_record", "[", "dataset_name", "]", "[", "'mean_iu'", "]", ")", "\n", "\n", "best_snapshot", "=", "os", ".", "path", ".", "join", "(", "args", ".", "exp_path", ",", "best_snapshot", ")", "\n", "assert", "os", ".", "path", ".", "exists", "(", "best_snapshot", ")", ",", "'cant find old snapshot {}'", ".", "format", "(", "best_snapshot", ")", "\n", "os", ".", "remove", "(", "best_snapshot", ")", "\n", "\n", "# save new best", "\n", "", "args", ".", "best_record", "[", "dataset_name", "]", "[", "'val_loss'", "]", "=", "val_loss", ".", "avg", "\n", "args", ".", "best_record", "[", "dataset_name", "]", "[", "'epoch'", "]", "=", "epoch", "\n", "args", ".", "best_record", "[", "dataset_name", "]", "[", "'acc'", "]", "=", "acc", "\n", "args", ".", "best_record", "[", "dataset_name", "]", "[", "'acc_cls'", "]", "=", "acc_cls", "\n", "args", ".", "best_record", "[", "dataset_name", "]", "[", "'mean_iu'", "]", "=", "mean_iu", "\n", "args", ".", "best_record", "[", "dataset_name", "]", "[", "'fwavacc'", "]", "=", "fwavacc", "\n", "\n", "best_snapshot", "=", "'best_{}_epoch_{}_mean-iu_{:.5f}.pth'", ".", "format", "(", "\n", "dataset_name", ",", "args", ".", "best_record", "[", "dataset_name", "]", "[", "'epoch'", "]", ",", "\n", "args", ".", "best_record", "[", "dataset_name", "]", "[", "'mean_iu'", "]", ")", "\n", "best_snapshot", "=", "os", ".", "path", ".", "join", "(", "args", ".", "exp_path", ",", "best_snapshot", ")", "\n", "shutil", ".", "copyfile", "(", "last_snapshot", ",", "best_snapshot", ")", "\n", "", "", "else", ":", "\n", "            ", "logging", ".", "info", "(", "\"Saved file to {}\"", ".", "format", "(", "last_snapshot", ")", ")", "\n", "\n", "", "", "if", "val_loss", "is", "not", "None", "and", "hist", "is", "not", "None", ":", "\n", "        ", "logging", ".", "info", "(", "'-'", "*", "107", ")", "\n", "fmt_str", "=", "'[epoch %d], [dataset name %s], [val loss %.5f], [acc %.5f], [acc_cls %.5f], '", "+", "'[mean_iu %.5f], [fwavacc %.5f]'", "\n", "logging", ".", "info", "(", "fmt_str", "%", "(", "epoch", ",", "dataset_name", ",", "val_loss", ".", "avg", ",", "acc", ",", "acc_cls", ",", "mean_iu", ",", "fwavacc", ")", ")", "\n", "if", "save_pth", ":", "\n", "            ", "fmt_str", "=", "'best record: [dataset name %s], [val loss %.5f], [acc %.5f], [acc_cls %.5f], '", "+", "'[mean_iu %.5f], [fwavacc %.5f], [epoch %d], '", "\n", "logging", ".", "info", "(", "fmt_str", "%", "(", "dataset_name", ",", "\n", "args", ".", "best_record", "[", "dataset_name", "]", "[", "'val_loss'", "]", ",", "args", ".", "best_record", "[", "dataset_name", "]", "[", "'acc'", "]", ",", "\n", "args", ".", "best_record", "[", "dataset_name", "]", "[", "'acc_cls'", "]", ",", "args", ".", "best_record", "[", "dataset_name", "]", "[", "'mean_iu'", "]", ",", "\n", "args", ".", "best_record", "[", "dataset_name", "]", "[", "'fwavacc'", "]", ",", "args", ".", "best_record", "[", "dataset_name", "]", "[", "'epoch'", "]", ")", ")", "\n", "logging", ".", "info", "(", "'-'", "*", "107", ")", "\n", "\n", "", "if", "writer", ":", "\n", "# tensorboard logging of validation phase metrics", "\n", "            ", "writer", ".", "add_scalar", "(", "'{}/acc'", ".", "format", "(", "dataset_name", ")", ",", "acc", ",", "curr_iter", ")", "\n", "writer", ".", "add_scalar", "(", "'{}/acc_cls'", ".", "format", "(", "dataset_name", ")", ",", "acc_cls", ",", "curr_iter", ")", "\n", "writer", ".", "add_scalar", "(", "'{}/mean_iu'", ".", "format", "(", "dataset_name", ")", ",", "mean_iu", ",", "curr_iter", ")", "\n", "writer", ".", "add_scalar", "(", "'{}/val_loss'", ".", "format", "(", "dataset_name", ")", ",", "val_loss", ".", "avg", ",", "curr_iter", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.utils.misc.print_evaluate_results": [[260, 289], ["numpy.diag", "logging.info", "logging.info", "logging.info", "enumerate", "hist.sum", "numpy.diag", "hist.sum", "numpy.diag", "hist.sum", "logging.info", "range"], "function", ["None"], ["", "", "", "def", "print_evaluate_results", "(", "hist", ",", "iu", ",", "dataset_name", "=", "None", ",", "dataset", "=", "None", ")", ":", "\n", "# fixme: Need to refactor this dict", "\n", "    ", "try", ":", "\n", "        ", "id2cat", "=", "dataset", ".", "id2cat", "\n", "", "except", ":", "\n", "        ", "id2cat", "=", "{", "i", ":", "i", "for", "i", "in", "range", "(", "datasets", ".", "num_classes", ")", "}", "\n", "", "iu_false_positive", "=", "hist", ".", "sum", "(", "axis", "=", "1", ")", "-", "np", ".", "diag", "(", "hist", ")", "\n", "iu_false_negative", "=", "hist", ".", "sum", "(", "axis", "=", "0", ")", "-", "np", ".", "diag", "(", "hist", ")", "\n", "iu_true_positive", "=", "np", ".", "diag", "(", "hist", ")", "\n", "\n", "logging", ".", "info", "(", "'Dataset name: {}'", ".", "format", "(", "dataset_name", ")", ")", "\n", "logging", ".", "info", "(", "'IoU:'", ")", "\n", "logging", ".", "info", "(", "'label_id      label    iU    Precision Recall TP     FP    FN'", ")", "\n", "for", "idx", ",", "i", "in", "enumerate", "(", "iu", ")", ":", "\n", "# Format all of the strings:", "\n", "        ", "idx_string", "=", "\"{:2d}\"", ".", "format", "(", "idx", ")", "\n", "class_name", "=", "\"{:>13}\"", ".", "format", "(", "id2cat", "[", "idx", "]", ")", "if", "idx", "in", "id2cat", "else", "''", "\n", "iu_string", "=", "'{:5.1f}'", ".", "format", "(", "i", "*", "100", ")", "\n", "total_pixels", "=", "hist", ".", "sum", "(", ")", "\n", "tp", "=", "'{:5.1f}'", ".", "format", "(", "100", "*", "iu_true_positive", "[", "idx", "]", "/", "total_pixels", ")", "\n", "fp", "=", "'{:5.1f}'", ".", "format", "(", "\n", "iu_false_positive", "[", "idx", "]", "/", "iu_true_positive", "[", "idx", "]", ")", "\n", "fn", "=", "'{:5.1f}'", ".", "format", "(", "iu_false_negative", "[", "idx", "]", "/", "iu_true_positive", "[", "idx", "]", ")", "\n", "precision", "=", "'{:5.1f}'", ".", "format", "(", "\n", "iu_true_positive", "[", "idx", "]", "/", "(", "iu_true_positive", "[", "idx", "]", "+", "iu_false_positive", "[", "idx", "]", ")", ")", "\n", "recall", "=", "'{:5.1f}'", ".", "format", "(", "\n", "iu_true_positive", "[", "idx", "]", "/", "(", "iu_true_positive", "[", "idx", "]", "+", "iu_false_negative", "[", "idx", "]", ")", ")", "\n", "logging", ".", "info", "(", "'{}    {}   {}  {}     {}  {}   {}   {}'", ".", "format", "(", "\n", "idx_string", ",", "class_name", ",", "iu_string", ",", "precision", ",", "recall", ",", "tp", ",", "fp", ",", "fn", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.utils.my_data_parallel.MyDataParallel.__init__": [[157, 179], ["torch.nn.modules.Module.__init__", "my_data_parallel._check_balance", "torch.cuda.is_available", "list", "len", "my_data_parallel.MyDataParallel.module.cuda", "range", "torch.cuda.device_count"], "methods", ["home.repos.pwc.inspect_result.shachoi_RobustNet.transforms.joint_transforms.ClassUniform.__init__", "home.repos.pwc.inspect_result.shachoi_RobustNet.utils.my_data_parallel._check_balance"], ["def", "__init__", "(", "self", ",", "module", ",", "device_ids", "=", "None", ",", "output_device", "=", "None", ",", "dim", "=", "0", ",", "gather", "=", "True", ")", ":", "\n", "        ", "super", "(", "MyDataParallel", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "if", "not", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "            ", "self", ".", "module", "=", "module", "\n", "self", ".", "device_ids", "=", "[", "]", "\n", "return", "\n", "\n", "", "if", "device_ids", "is", "None", ":", "\n", "            ", "device_ids", "=", "list", "(", "range", "(", "torch", ".", "cuda", ".", "device_count", "(", ")", ")", ")", "\n", "", "if", "output_device", "is", "None", ":", "\n", "            ", "output_device", "=", "device_ids", "[", "0", "]", "\n", "", "self", ".", "dim", "=", "dim", "\n", "self", ".", "module", "=", "module", "\n", "self", ".", "device_ids", "=", "device_ids", "\n", "self", ".", "output_device", "=", "output_device", "\n", "self", ".", "gather_bool", "=", "gather", "\n", "\n", "_check_balance", "(", "self", ".", "device_ids", ")", "\n", "\n", "if", "len", "(", "self", ".", "device_ids", ")", "==", "1", ":", "\n", "            ", "self", ".", "module", ".", "cuda", "(", "device_ids", "[", "0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.utils.my_data_parallel.MyDataParallel.forward": [[180, 192], ["my_data_parallel.MyDataParallel.scatter", "my_data_parallel.MyDataParallel.replicate", "my_data_parallel.MyDataParallel.parallel_apply", "my_data_parallel.MyDataParallel.module", "len", "my_data_parallel.MyDataParallel.gather", "my_data_parallel.MyDataParallel.module", "len"], "methods", ["home.repos.pwc.inspect_result.shachoi_RobustNet.utils.my_data_parallel.MyDataParallel.scatter", "home.repos.pwc.inspect_result.shachoi_RobustNet.utils.my_data_parallel.MyDataParallel.replicate", "home.repos.pwc.inspect_result.shachoi_RobustNet.utils.my_data_parallel.MyDataParallel.parallel_apply", "home.repos.pwc.inspect_result.shachoi_RobustNet.utils.my_data_parallel.MyDataParallel.gather"], ["", "", "def", "forward", "(", "self", ",", "*", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "not", "self", ".", "device_ids", ":", "\n", "            ", "return", "self", ".", "module", "(", "*", "inputs", ",", "**", "kwargs", ")", "\n", "", "inputs", ",", "kwargs", "=", "self", ".", "scatter", "(", "inputs", ",", "kwargs", ",", "self", ".", "device_ids", ")", "\n", "if", "len", "(", "self", ".", "device_ids", ")", "==", "1", ":", "\n", "            ", "return", "[", "self", ".", "module", "(", "*", "inputs", "[", "0", "]", ",", "**", "kwargs", "[", "0", "]", ")", "]", "\n", "", "replicas", "=", "self", ".", "replicate", "(", "self", ".", "module", ",", "self", ".", "device_ids", "[", ":", "len", "(", "inputs", ")", "]", ")", "\n", "outputs", "=", "self", ".", "parallel_apply", "(", "replicas", ",", "inputs", ",", "kwargs", ")", "\n", "if", "self", ".", "gather_bool", ":", "\n", "            ", "return", "self", ".", "gather", "(", "outputs", ",", "self", ".", "output_device", ")", "\n", "", "else", ":", "\n", "            ", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.utils.my_data_parallel.MyDataParallel.replicate": [[193, 195], ["torch.nn.parallel.replicate.replicate"], "methods", ["home.repos.pwc.inspect_result.shachoi_RobustNet.utils.my_data_parallel.MyDataParallel.replicate"], ["", "", "def", "replicate", "(", "self", ",", "module", ",", "device_ids", ")", ":", "\n", "        ", "return", "replicate", "(", "module", ",", "device_ids", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.utils.my_data_parallel.MyDataParallel.scatter": [[196, 198], ["torch.nn.parallel.scatter_gather.scatter_kwargs"], "methods", ["None"], ["", "def", "scatter", "(", "self", ",", "inputs", ",", "kwargs", ",", "device_ids", ")", ":", "\n", "        ", "return", "scatter_kwargs", "(", "inputs", ",", "kwargs", ",", "device_ids", ",", "dim", "=", "self", ".", "dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.utils.my_data_parallel.MyDataParallel.parallel_apply": [[199, 201], ["torch.nn.parallel.parallel_apply.parallel_apply", "len"], "methods", ["home.repos.pwc.inspect_result.shachoi_RobustNet.utils.my_data_parallel.MyDataParallel.parallel_apply"], ["", "def", "parallel_apply", "(", "self", ",", "replicas", ",", "inputs", ",", "kwargs", ")", ":", "\n", "        ", "return", "parallel_apply", "(", "replicas", ",", "inputs", ",", "kwargs", ",", "self", ".", "device_ids", "[", ":", "len", "(", "replicas", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.utils.my_data_parallel.MyDataParallel.gather": [[202, 204], ["torch.nn.parallel.scatter_gather.gather"], "methods", ["home.repos.pwc.inspect_result.shachoi_RobustNet.utils.my_data_parallel.MyDataParallel.gather"], ["", "def", "gather", "(", "self", ",", "outputs", ",", "output_device", ")", ":", "\n", "        ", "return", "gather", "(", "outputs", ",", "output_device", ",", "dim", "=", "self", ".", "dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.utils.my_data_parallel._check_balance": [[47, 69], ["my_data_parallel._check_balance.warn_imbalance"], "function", ["None"], ["def", "_check_balance", "(", "device_ids", ")", ":", "\n", "    ", "imbalance_warn", "=", "\"\"\"\n    There is an imbalance between your GPUs. You may want to exclude GPU {} which\n    has less than 75% of the memory or cores of GPU {}. You can do so by setting\n    the device_ids argument to DataParallel, or by setting the CUDA_VISIBLE_DEVICES\n    environment variable.\"\"\"", "\n", "\n", "dev_props", "=", "[", "torch", ".", "cuda", ".", "get_device_properties", "(", "i", ")", "for", "i", "in", "device_ids", "]", "\n", "\n", "def", "warn_imbalance", "(", "get_prop", ")", ":", "\n", "        ", "values", "=", "[", "get_prop", "(", "props", ")", "for", "props", "in", "dev_props", "]", "\n", "min_pos", ",", "min_val", "=", "min", "(", "enumerate", "(", "values", ")", ",", "key", "=", "operator", ".", "itemgetter", "(", "1", ")", ")", "\n", "max_pos", ",", "max_val", "=", "max", "(", "enumerate", "(", "values", ")", ",", "key", "=", "operator", ".", "itemgetter", "(", "1", ")", ")", "\n", "if", "min_val", "/", "max_val", "<", "0.75", ":", "\n", "            ", "warnings", ".", "warn", "(", "imbalance_warn", ".", "format", "(", "device_ids", "[", "min_pos", "]", ",", "device_ids", "[", "max_pos", "]", ")", ")", "\n", "return", "True", "\n", "", "return", "False", "\n", "\n", "", "if", "warn_imbalance", "(", "lambda", "props", ":", "props", ".", "total_memory", ")", ":", "\n", "        ", "return", "\n", "", "if", "warn_imbalance", "(", "lambda", "props", ":", "props", ".", "multi_processor_count", ")", ":", "\n", "        ", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.utils.my_data_parallel.data_parallel": [[72, 105], ["torch.nn.parallel.scatter_gather.scatter_kwargs", "torch.nn.parallel.replicate.replicate", "torch.nn.parallel.parallel_apply.parallel_apply", "isinstance", "list", "len", "module", "torch.nn.parallel.scatter_gather.gather", "range", "len", "torch.cuda.device_count"], "function", ["home.repos.pwc.inspect_result.shachoi_RobustNet.utils.my_data_parallel.MyDataParallel.replicate", "home.repos.pwc.inspect_result.shachoi_RobustNet.utils.my_data_parallel.MyDataParallel.parallel_apply", "home.repos.pwc.inspect_result.shachoi_RobustNet.utils.my_data_parallel.MyDataParallel.gather"], ["", "", "def", "data_parallel", "(", "module", ",", "inputs", ",", "device_ids", "=", "None", ",", "output_device", "=", "None", ",", "dim", "=", "0", ",", "module_kwargs", "=", "None", ",", "gather", "=", "True", ")", ":", "\n", "    ", "\"\"\"\n    Evaluates module(input) in parallel across the GPUs given in device_ids.\n    This is the functional version of the DataParallel module.\n    Args:\n        module: the module to evaluate in parallel\n        inputs: inputs to the module\n        device_ids: GPU ids on which to replicate module\n        output_device: GPU location of the output  Use -1 to indicate the CPU.\n            (default: device_ids[0])\n    Returns:\n        a Tensor containing the result of module(input) located on\n        output_device\n    \"\"\"", "\n", "if", "not", "isinstance", "(", "inputs", ",", "tuple", ")", ":", "\n", "        ", "inputs", "=", "(", "inputs", ",", ")", "\n", "\n", "", "if", "device_ids", "is", "None", ":", "\n", "        ", "device_ids", "=", "list", "(", "range", "(", "torch", ".", "cuda", ".", "device_count", "(", ")", ")", ")", "\n", "\n", "", "if", "output_device", "is", "None", ":", "\n", "        ", "output_device", "=", "device_ids", "[", "0", "]", "\n", "\n", "", "inputs", ",", "module_kwargs", "=", "scatter_kwargs", "(", "inputs", ",", "module_kwargs", ",", "device_ids", ",", "dim", ")", "\n", "if", "len", "(", "device_ids", ")", "==", "1", ":", "\n", "        ", "return", "module", "(", "*", "inputs", "[", "0", "]", ",", "**", "module_kwargs", "[", "0", "]", ")", "\n", "", "used_device_ids", "=", "device_ids", "[", ":", "len", "(", "inputs", ")", "]", "\n", "replicas", "=", "replicate", "(", "module", ",", "used_device_ids", ")", "\n", "outputs", "=", "parallel_apply", "(", "replicas", ",", "inputs", ",", "module_kwargs", ",", "used_device_ids", ")", "\n", "if", "gather", ":", "\n", "        ", "return", "gather", "(", "outputs", ",", "output_device", ",", "dim", ")", "\n", "", "else", ":", "\n", "        ", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.network.instance_whitening.InstanceWhitening.__init__": [[7, 10], ["torch.Module.__init__", "torch.InstanceNorm2d", "torch.InstanceNorm2d"], "methods", ["home.repos.pwc.inspect_result.shachoi_RobustNet.transforms.joint_transforms.ClassUniform.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ")", ":", "\n", "        ", "super", "(", "InstanceWhitening", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "instance_standardization", "=", "nn", ".", "InstanceNorm2d", "(", "dim", ",", "affine", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.network.instance_whitening.InstanceWhitening.forward": [[11, 17], ["instance_whitening.InstanceWhitening.instance_standardization"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "        ", "x", "=", "self", ".", "instance_standardization", "(", "x", ")", "\n", "w", "=", "x", "\n", "\n", "return", "x", ",", "w", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.network.instance_whitening.instance_whitening_loss": [[19, 28], ["instance_whitening.get_covariance_matrix", "torch.clamp", "torch.clamp", "torch.sum", "torch.sum", "torch.div", "torch.div", "torch.sum", "torch.sum", "torch.abs", "torch.abs"], "function", ["home.repos.pwc.inspect_result.shachoi_RobustNet.network.instance_whitening.get_covariance_matrix"], ["", "", "def", "instance_whitening_loss", "(", "f_map", ",", "eye", ",", "mask_matrix", ",", "margin", ",", "num_remove_cov", ")", ":", "\n", "    ", "f_cor", ",", "B", "=", "get_covariance_matrix", "(", "f_map", ",", "eye", "=", "eye", ")", "\n", "f_cor_masked", "=", "f_cor", "*", "mask_matrix", "\n", "\n", "off_diag_sum", "=", "torch", ".", "sum", "(", "torch", ".", "abs", "(", "f_cor_masked", ")", ",", "dim", "=", "(", "1", ",", "2", ")", ",", "keepdim", "=", "True", ")", "-", "margin", "# B X 1 X 1", "\n", "loss", "=", "torch", ".", "clamp", "(", "torch", ".", "div", "(", "off_diag_sum", ",", "num_remove_cov", ")", ",", "min", "=", "0", ")", "# B X 1 X 1", "\n", "loss", "=", "torch", ".", "sum", "(", "loss", ")", "/", "B", "\n", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.network.instance_whitening.get_covariance_matrix": [[30, 40], ["f_map.contiguous().view.contiguous().view", "torch.eye().cuda", "torch.eye().cuda", "torch.bmm().div", "torch.bmm().div", "f_map.contiguous().view.contiguous", "torch.eye", "torch.eye", "torch.bmm", "torch.bmm", "f_map.contiguous().view.transpose"], "function", ["None"], ["", "def", "get_covariance_matrix", "(", "f_map", ",", "eye", "=", "None", ")", ":", "\n", "    ", "eps", "=", "1e-5", "\n", "B", ",", "C", ",", "H", ",", "W", "=", "f_map", ".", "shape", "# i-th feature size (B X C X H X W)", "\n", "HW", "=", "H", "*", "W", "\n", "if", "eye", "is", "None", ":", "\n", "        ", "eye", "=", "torch", ".", "eye", "(", "C", ")", ".", "cuda", "(", ")", "\n", "", "f_map", "=", "f_map", ".", "contiguous", "(", ")", ".", "view", "(", "B", ",", "C", ",", "-", "1", ")", "# B X C X H X W > B X C X (H X W)", "\n", "f_cor", "=", "torch", ".", "bmm", "(", "f_map", ",", "f_map", ".", "transpose", "(", "1", ",", "2", ")", ")", ".", "div", "(", "HW", "-", "1", ")", "+", "(", "eps", "*", "eye", ")", "# C X C / HW", "\n", "\n", "return", "f_cor", ",", "B", "\n", "", ""]], "home.repos.pwc.inspect_result.shachoi_RobustNet.network.sync_switchwhiten.SyncMeanCov.forward": [[11, 38], ["in_data.size", "ctx.save_for_backward", "in_data.mean", "torch.all_reduce", "torch.all_reduce", "torch.all_reduce", "torch.get_world_size", "torch.get_world_size", "torch.get_world_size", "torch.bmm().div", "torch.bmm().div", "torch.bmm().div", "torch.bmm().div", "torch.bmm().div", "torch.bmm().div", "torch.bmm().div", "torch.bmm().div", "torch.bmm().div", "torch.all_reduce", "torch.all_reduce", "torch.all_reduce", "torch.get_world_size", "torch.get_world_size", "torch.get_world_size", "running_mean.mul_", "running_mean.add_", "running_cov.mul_", "running_cov.add_", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "in_data_bn.transpose"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "in_data", ",", "running_mean", ",", "running_cov", ",", "momentum", ",", "training", ")", ":", "\n", "        ", "g", ",", "c", ",", "NHW", "=", "in_data", ".", "size", "(", ")", "\n", "ctx", ".", "g", "=", "g", "\n", "ctx", ".", "c", "=", "c", "\n", "ctx", ".", "NHW", "=", "NHW", "\n", "ctx", ".", "training", "=", "training", "\n", "\n", "if", "training", ":", "\n", "            ", "mean_bn", "=", "in_data", ".", "mean", "(", "-", "1", ",", "keepdim", "=", "True", ")", "# g x c x 1", "\n", "dist", ".", "all_reduce", "(", "mean_bn", ")", "\n", "mean_bn", "/=", "dist", ".", "get_world_size", "(", ")", "\n", "in_data_bn", "=", "in_data", "-", "mean_bn", "\n", "cov_bn", "=", "torch", ".", "bmm", "(", "in_data_bn", ",", "in_data_bn", ".", "transpose", "(", "1", ",", "2", ")", ")", ".", "div", "(", "NHW", ")", "\n", "dist", ".", "all_reduce", "(", "cov_bn", ")", "\n", "cov_bn", "/=", "dist", ".", "get_world_size", "(", ")", "\n", "\n", "running_mean", ".", "mul_", "(", "momentum", ")", "\n", "running_mean", ".", "add_", "(", "(", "1", "-", "momentum", ")", "*", "mean_bn", ".", "data", ")", "\n", "running_cov", ".", "mul_", "(", "momentum", ")", "\n", "running_cov", ".", "add_", "(", "(", "1", "-", "momentum", ")", "*", "cov_bn", ".", "data", ")", "\n", "", "else", ":", "\n", "            ", "mean_bn", "=", "torch", ".", "autograd", ".", "Variable", "(", "running_mean", ")", "\n", "cov_bn", "=", "torch", ".", "autograd", ".", "Variable", "(", "running_cov", ")", "\n", "\n", "", "ctx", ".", "save_for_backward", "(", "in_data", ".", "data", ",", "mean_bn", ".", "data", ")", "\n", "return", "mean_bn", ",", "cov_bn", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.network.sync_switchwhiten.SyncMeanCov.backward": [[39, 57], ["torch.all_reduce", "torch.all_reduce", "torch.all_reduce", "torch.all_reduce", "torch.all_reduce", "torch.all_reduce", "torch.get_world_size", "torch.get_world_size", "torch.get_world_size", "grad_cov_out.transpose", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad_mean_out", ",", "grad_cov_out", ")", ":", "\n", "        ", "in_data", ",", "mean_bn", "=", "ctx", ".", "saved_tensors", "\n", "\n", "if", "ctx", ".", "training", ":", "\n", "            ", "dist", ".", "all_reduce", "(", "grad_mean_out", ")", "\n", "dist", ".", "all_reduce", "(", "grad_cov_out", ")", "\n", "world_size", "=", "dist", ".", "get_world_size", "(", ")", "\n", "", "else", ":", "\n", "            ", "world_size", "=", "1", "\n", "\n", "", "grad_cov_out", "=", "(", "grad_cov_out", "+", "grad_cov_out", ".", "transpose", "(", "1", ",", "2", ")", ")", "/", "2", "\n", "grad_cov_in", "=", "2", "*", "torch", ".", "bmm", "(", "grad_cov_out", ",", "(", "in_data", "-", "mean_bn", ")", ")", "/", "(", "ctx", ".", "NHW", "*", "world_size", ")", "# g x c x (N x H x W)", "\n", "\n", "grad_mean_in", "=", "grad_mean_out", "/", "ctx", ".", "NHW", "/", "world_size", "\n", "inDiff", "=", "grad_mean_in", "+", "grad_cov_in", "\n", "return", "inDiff", ",", "None", ",", "None", ",", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.network.sync_switchwhiten.SyncSwitchWhiten2d.__init__": [[74, 120], ["torch.nn.modules.module.Module.__init__", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "sync_switchwhiten.SyncSwitchWhiten2d.register_buffer", "sync_switchwhiten.SyncSwitchWhiten2d.register_buffer", "sync_switchwhiten.SyncSwitchWhiten2d.reset_parameters", "ValueError", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "sync_switchwhiten.SyncSwitchWhiten2d.register_parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "sync_switchwhiten.SyncSwitchWhiten2d.register_parameter", "sync_switchwhiten.SyncSwitchWhiten2d.register_parameter", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.eye().unsqueeze().repeat", "torch.eye().unsqueeze().repeat", "torch.eye().unsqueeze().repeat", "torch.eye().unsqueeze().repeat", "torch.eye().unsqueeze().repeat", "torch.eye().unsqueeze().repeat", "torch.eye().unsqueeze().repeat", "torch.eye().unsqueeze().repeat", "torch.eye().unsqueeze().repeat", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.eye().unsqueeze", "torch.eye().unsqueeze", "torch.eye().unsqueeze", "torch.eye().unsqueeze", "torch.eye().unsqueeze", "torch.eye().unsqueeze", "torch.eye().unsqueeze", "torch.eye().unsqueeze", "torch.eye().unsqueeze", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye"], "methods", ["home.repos.pwc.inspect_result.shachoi_RobustNet.transforms.joint_transforms.ClassUniform.__init__", "home.repos.pwc.inspect_result.shachoi_RobustNet.network.switchwhiten.SwitchWhiten2d.reset_parameters"], ["def", "__init__", "(", "self", ",", "\n", "num_features", ",", "\n", "num_pergroup", "=", "16", ",", "\n", "sw_type", "=", "2", ",", "\n", "T", "=", "5", ",", "\n", "tie_weight", "=", "False", ",", "\n", "eps", "=", "1e-5", ",", "\n", "momentum", "=", "0.99", ",", "\n", "affine", "=", "True", ")", ":", "\n", "        ", "super", "(", "SyncSwitchWhiten2d", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "sw_type", "not", "in", "[", "2", ",", "3", ",", "4", ",", "5", "]", ":", "\n", "            ", "raise", "ValueError", "(", "'sw_type should be in [2, 3, 4, 5], '", "\n", "'but got {}'", ".", "format", "(", "sw_type", ")", ")", "\n", "", "assert", "num_features", "%", "num_pergroup", "==", "0", "\n", "self", ".", "num_features", "=", "num_features", "\n", "self", ".", "num_pergroup", "=", "num_pergroup", "\n", "self", ".", "num_groups", "=", "num_features", "//", "num_pergroup", "\n", "self", ".", "sw_type", "=", "sw_type", "\n", "self", ".", "T", "=", "T", "\n", "self", ".", "tie_weight", "=", "tie_weight", "\n", "self", ".", "eps", "=", "eps", "\n", "self", ".", "momentum", "=", "momentum", "\n", "self", ".", "tie_weight", "=", "tie_weight", "\n", "self", ".", "affine", "=", "affine", "\n", "num_components", "=", "sw_type", "\n", "\n", "self", ".", "sw_mean_weight", "=", "Parameter", "(", "torch", ".", "ones", "(", "num_components", ")", ")", "\n", "if", "not", "self", ".", "tie_weight", ":", "\n", "            ", "self", ".", "sw_var_weight", "=", "Parameter", "(", "torch", ".", "ones", "(", "num_components", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "register_parameter", "(", "'sw_var_weight'", ",", "None", ")", "\n", "\n", "", "if", "self", ".", "affine", ":", "\n", "            ", "self", ".", "weight", "=", "Parameter", "(", "torch", ".", "ones", "(", "num_features", ")", ")", "\n", "self", ".", "bias", "=", "Parameter", "(", "torch", ".", "zeros", "(", "num_features", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "register_parameter", "(", "'weight'", ",", "None", ")", "\n", "self", ".", "register_parameter", "(", "'bias'", ",", "None", ")", "\n", "\n", "", "self", ".", "register_buffer", "(", "'running_mean'", ",", "\n", "torch", ".", "zeros", "(", "self", ".", "num_groups", ",", "num_pergroup", ",", "1", ")", ")", "\n", "self", ".", "register_buffer", "(", "\n", "'running_cov'", ",", "\n", "torch", ".", "eye", "(", "num_pergroup", ")", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "self", ".", "num_groups", ",", "1", ",", "1", ")", ")", "\n", "\n", "self", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.network.sync_switchwhiten.SyncSwitchWhiten2d.reset_parameters": [[121, 130], ["sync_switchwhiten.SyncSwitchWhiten2d.running_mean.zero_", "sync_switchwhiten.SyncSwitchWhiten2d.running_cov.zero_", "torch.init.ones_", "torch.init.ones_", "torch.init.ones_", "torch.init.ones_", "torch.init.ones_", "torch.init.ones_", "torch.init.ones_", "torch.init.ones_", "torch.init.ones_", "torch.init.zeros_", "torch.init.zeros_", "torch.init.zeros_"], "methods", ["None"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "self", ".", "running_mean", ".", "zero_", "(", ")", "\n", "self", ".", "running_cov", ".", "zero_", "(", ")", "\n", "nn", ".", "init", ".", "ones_", "(", "self", ".", "sw_mean_weight", ")", "\n", "if", "not", "self", ".", "tie_weight", ":", "\n", "            ", "nn", ".", "init", ".", "ones_", "(", "self", ".", "sw_var_weight", ")", "\n", "", "if", "self", ".", "affine", ":", "\n", "            ", "nn", ".", "init", ".", "ones_", "(", "self", ".", "weight", ")", "\n", "nn", ".", "init", ".", "zeros_", "(", "self", ".", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.network.sync_switchwhiten.SyncSwitchWhiten2d.__repr__": [[131, 136], ["None"], "methods", ["None"], ["", "", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "(", "'{name}({num_features}, num_pergroup={num_pergroup}, '", "\n", "'sw_type={sw_type}, T={T}, tie_weight={tie_weight}, '", "\n", "'eps={eps}, momentum={momentum}, affine={affine})'", ".", "format", "(", "\n", "name", "=", "self", ".", "__class__", ".", "__name__", ",", "**", "self", ".", "__dict__", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.network.sync_switchwhiten.SyncSwitchWhiten2d.forward": [[137, 224], ["x.view.view.size", "x.view.view.transpose().contiguous", "in_data_t.view.view.view", "SyncMeanCov.apply", "mean_bn.view.view.view().expand().contiguous", "mean_bn.view.view.view", "cov_bn.view.view.view().expand().contiguous", "cov_bn.view.view.view", "x.view.view.view", "x.view.view.data.new().resize_", "torch.nn.init.eye_().view().expand", "torch.nn.init.eye_().view().expand", "torch.nn.init.eye_().view().expand", "torch.nn.init.eye_().view().expand", "torch.nn.init.eye_().view().expand", "torch.nn.init.eye_().view().expand", "torch.nn.init.eye_().view().expand", "torch.nn.init.eye_().view().expand", "torch.nn.init.eye_().view().expand", "x.view.view.mean", "torch.bmm().div", "torch.bmm().div", "torch.bmm().div", "torch.bmm().div", "torch.bmm().div", "torch.bmm().div", "torch.bmm().div", "torch.bmm().div", "torch.bmm().div", "torch.Softmax", "torch.Softmax", "torch.Softmax", "torch.Softmax.", "cov.size", "torch.eye().to().expand", "torch.eye().to().expand", "torch.eye().to().expand", "torch.eye().to().expand", "torch.eye().to().expand", "torch.eye().to().expand", "torch.eye().to().expand", "torch.eye().to().expand", "torch.eye().to().expand", "range", "torch.baddbmm.mul_", "torch.baddbmm.mul_", "torch.baddbmm.mul_", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "x_hat.view.view.view", "x.view.view.view", "x.view.view.mean().view", "mean_ln.expand().contiguous().view.expand().contiguous().view.expand().contiguous().view", "x.view.view.var().view", "var_ln.expand().contiguous().view.expand().contiguous().view.expand().contiguous().view", "torch.diag_embed", "torch.diag_embed", "torch.diag_embed", "torch.diag_embed", "torch.diag_embed", "torch.diag_embed", "torch.diag_embed", "torch.diag_embed", "torch.diag_embed", "torch.diag_embed", "torch.diag_embed", "torch.diag_embed", "torch.diag_embed", "torch.diag_embed", "torch.diag_embed", "torch.diag_embed", "torch.diag_embed", "torch.diag_embed", "torch.Softmax.", "torch.baddbmm", "torch.baddbmm", "torch.baddbmm", "torch.baddbmm", "torch.baddbmm", "torch.baddbmm", "torch.baddbmm", "torch.baddbmm", "torch.baddbmm", "rTr.sqrt", "x.view.view.transpose", "mean_bn.view.view.view().expand", "cov_bn.view.view.view().expand", "x.view.view.data.new", "torch.nn.init.eye_().view", "torch.nn.init.eye_().view", "torch.nn.init.eye_().view", "torch.nn.init.eye_().view", "torch.nn.init.eye_().view", "torch.nn.init.eye_().view", "torch.nn.init.eye_().view", "torch.nn.init.eye_().view", "torch.nn.init.eye_().view", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "sync_switchwhiten.SyncSwitchWhiten2d.bias.view", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "x.view.view.mean", "mean_ln.expand().contiguous().view.expand().contiguous().view.expand().contiguous", "x.view.view.var", "var_ln.expand().contiguous().view.expand().contiguous().view.expand().contiguous", "torch.matrix_power", "torch.matrix_power", "torch.matrix_power", "torch.matrix_power", "torch.matrix_power", "torch.matrix_power", "torch.matrix_power", "torch.matrix_power", "torch.matrix_power", "sync_switchwhiten.SyncSwitchWhiten2d.weight.view", "mean_bn.view.view.view", "cov_bn.view.view.view", "torch.nn.init.eye_", "torch.nn.init.eye_", "torch.nn.init.eye_", "torch.nn.init.eye_", "torch.nn.init.eye_", "torch.nn.init.eye_", "torch.nn.init.eye_", "torch.nn.init.eye_", "torch.nn.init.eye_", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "mean_ln.expand().contiguous().view.expand().contiguous().view.expand", "var_ln.expand().contiguous().view.expand().contiguous().view.expand"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "N", ",", "C", ",", "H", ",", "W", "=", "x", ".", "size", "(", ")", "\n", "c", ",", "g", "=", "self", ".", "num_pergroup", ",", "self", ".", "num_groups", "\n", "\n", "in_data_t", "=", "x", ".", "transpose", "(", "0", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "# g x c x (N x H x W)", "\n", "in_data_t", "=", "in_data_t", ".", "view", "(", "g", ",", "c", ",", "-", "1", ")", "\n", "# calculate batch mean and covariance", "\n", "mean_bn", ",", "cov_bn", "=", "SyncMeanCov", ".", "apply", "(", "in_data_t", ",", "self", ".", "running_mean", ",", "\n", "self", ".", "running_cov", ",", "self", ".", "momentum", ",", "\n", "self", ".", "training", ")", "\n", "\n", "mean_bn", "=", "mean_bn", ".", "view", "(", "1", ",", "g", ",", "c", ",", "1", ")", ".", "expand", "(", "N", ",", "g", ",", "c", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "mean_bn", "=", "mean_bn", ".", "view", "(", "N", "*", "g", ",", "c", ",", "1", ")", "\n", "cov_bn", "=", "cov_bn", ".", "view", "(", "1", ",", "g", ",", "c", ",", "c", ")", ".", "expand", "(", "N", ",", "g", ",", "c", ",", "c", ")", ".", "contiguous", "(", ")", "\n", "cov_bn", "=", "cov_bn", ".", "view", "(", "N", "*", "g", ",", "c", ",", "c", ")", "\n", "\n", "# (N x g) x c x (H x W)", "\n", "in_data", "=", "x", ".", "view", "(", "N", "*", "g", ",", "c", ",", "-", "1", ")", "\n", "\n", "eye", "=", "in_data", ".", "data", ".", "new", "(", ")", ".", "resize_", "(", "c", ",", "c", ")", "\n", "eye", "=", "torch", ".", "nn", ".", "init", ".", "eye_", "(", "eye", ")", ".", "view", "(", "1", ",", "c", ",", "c", ")", ".", "expand", "(", "N", "*", "g", ",", "c", ",", "c", ")", "\n", "\n", "# calculate other statistics", "\n", "# (N x g) x c x 1", "\n", "mean_in", "=", "in_data", ".", "mean", "(", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "x_in", "=", "in_data", "-", "mean_in", "\n", "# (N x g) x c x c", "\n", "cov_in", "=", "torch", ".", "bmm", "(", "x_in", ",", "torch", ".", "transpose", "(", "x_in", ",", "1", ",", "2", ")", ")", ".", "div", "(", "H", "*", "W", ")", "\n", "if", "self", ".", "sw_type", "in", "[", "3", ",", "5", "]", ":", "\n", "            ", "x", "=", "x", ".", "view", "(", "N", ",", "-", "1", ")", "\n", "mean_ln", "=", "x", ".", "mean", "(", "-", "1", ",", "keepdim", "=", "True", ")", ".", "view", "(", "N", ",", "1", ",", "1", ",", "1", ")", "\n", "mean_ln", "=", "mean_ln", ".", "expand", "(", "N", ",", "g", ",", "1", ",", "1", ")", ".", "contiguous", "(", ")", ".", "view", "(", "N", "*", "g", ",", "1", ",", "1", ")", "\n", "var_ln", "=", "x", ".", "var", "(", "-", "1", ",", "keepdim", "=", "True", ")", ".", "view", "(", "N", ",", "1", ",", "1", ",", "1", ")", "\n", "var_ln", "=", "var_ln", ".", "expand", "(", "N", ",", "g", ",", "1", ",", "1", ")", ".", "contiguous", "(", ")", ".", "view", "(", "N", "*", "g", ",", "1", ",", "1", ")", "\n", "var_ln", "=", "var_ln", "*", "eye", "\n", "", "if", "self", ".", "sw_type", "==", "5", ":", "\n", "            ", "var_bn", "=", "torch", ".", "diag_embed", "(", "torch", ".", "diagonal", "(", "cov_bn", ",", "dim1", "=", "-", "2", ",", "dim2", "=", "-", "1", ")", ")", "\n", "var_in", "=", "torch", ".", "diag_embed", "(", "torch", ".", "diagonal", "(", "cov_in", ",", "dim1", "=", "-", "2", ",", "dim2", "=", "-", "1", ")", ")", "\n", "\n", "# calculate weighted average of mean and covariance", "\n", "", "softmax", "=", "nn", ".", "Softmax", "(", "0", ")", "\n", "mean_weight", "=", "softmax", "(", "self", ".", "sw_mean_weight", ")", "\n", "if", "not", "self", ".", "tie_weight", ":", "\n", "            ", "var_weight", "=", "softmax", "(", "self", ".", "sw_var_weight", ")", "\n", "", "else", ":", "\n", "            ", "var_weight", "=", "mean_weight", "\n", "\n", "# BW + IW", "\n", "", "if", "self", ".", "sw_type", "==", "2", ":", "\n", "# (N x g) x c x 1", "\n", "            ", "mean", "=", "mean_weight", "[", "0", "]", "*", "mean_bn", "+", "mean_weight", "[", "1", "]", "*", "mean_in", "\n", "cov", "=", "var_weight", "[", "0", "]", "*", "cov_bn", "+", "var_weight", "[", "1", "]", "*", "cov_in", "+", "self", ".", "eps", "*", "eye", "\n", "# BW + IW + LN", "\n", "", "elif", "self", ".", "sw_type", "==", "3", ":", "\n", "            ", "mean", "=", "mean_weight", "[", "0", "]", "*", "mean_bn", "+", "mean_weight", "[", "1", "]", "*", "mean_in", "+", "mean_weight", "[", "2", "]", "*", "mean_ln", "\n", "cov", "=", "var_weight", "[", "0", "]", "*", "cov_bn", "+", "var_weight", "[", "1", "]", "*", "cov_in", "+", "var_weight", "[", "2", "]", "*", "var_ln", "+", "self", ".", "eps", "*", "eye", "\n", "# BW + IW + BN + IN + LN", "\n", "", "elif", "self", ".", "sw_type", "==", "5", ":", "\n", "            ", "mean", "=", "(", "mean_weight", "[", "0", "]", "+", "mean_weight", "[", "2", "]", ")", "*", "mean_bn", "+", "(", "mean_weight", "[", "1", "]", "+", "mean_weight", "[", "3", "]", ")", "*", "mean_in", "+", "mean_weight", "[", "4", "]", "*", "mean_ln", "\n", "cov", "=", "var_weight", "[", "0", "]", "*", "cov_bn", "+", "var_weight", "[", "1", "]", "*", "cov_in", "+", "var_weight", "[", "0", "]", "*", "var_bn", "+", "var_weight", "[", "1", "]", "*", "var_in", "+", "var_weight", "[", "4", "]", "*", "var_ln", "+", "self", ".", "eps", "*", "eye", "\n", "\n", "# perform whitening using Newton's iteration", "\n", "", "Ng", ",", "c", ",", "_", "=", "cov", ".", "size", "(", ")", "\n", "P", "=", "torch", ".", "eye", "(", "c", ")", ".", "to", "(", "cov", ")", ".", "expand", "(", "Ng", ",", "c", ",", "c", ")", "\n", "# reciprocal of trace of covariance", "\n", "rTr", "=", "(", "cov", "*", "P", ")", ".", "sum", "(", "(", "1", ",", "2", ")", ",", "keepdim", "=", "True", ")", ".", "reciprocal_", "(", ")", "\n", "cov_N", "=", "cov", "*", "rTr", "\n", "for", "k", "in", "range", "(", "self", ".", "T", ")", ":", "\n", "            ", "P", "=", "torch", ".", "baddbmm", "(", "beta", "=", "1.5", ",", "input", "=", "P", ",", "alpha", "=", "-", "0.5", ",", "batch1", "=", "torch", ".", "matrix_power", "(", "P", ",", "3", ")", ",", "batch2", "=", "cov_N", ")", "\n", "# whiten matrix: the matrix inverse of covariance, i.e., cov^{-1/2}", "\n", "", "wm", "=", "P", ".", "mul_", "(", "rTr", ".", "sqrt", "(", ")", ")", "\n", "\n", "x_hat", "=", "torch", ".", "bmm", "(", "wm", ",", "in_data", "-", "mean", ")", "\n", "x_hat", "=", "x_hat", ".", "view", "(", "N", ",", "C", ",", "H", ",", "W", ")", "\n", "if", "self", ".", "affine", ":", "\n", "            ", "x_hat", "=", "x_hat", "*", "self", ".", "weight", ".", "view", "(", "1", ",", "self", ".", "num_features", ",", "1", ",", "1", ")", "+", "self", ".", "bias", ".", "view", "(", "1", ",", "self", ".", "num_features", ",", "1", ",", "1", ")", "\n", "\n", "", "return", "x_hat", "\n", "", "", ""]], "home.repos.pwc.inspect_result.shachoi_RobustNet.network.Mobilenet.ConvBNReLU.__init__": [[37, 70], ["torch.nn.Sequential.__init__", "network.instance_whitening.InstanceWhitening", "torch.nn.Conv2d", "norm_layer", "torch.nn.ReLU6", "network.instance_whitening.InstanceWhitening", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.Sequential"], "methods", ["home.repos.pwc.inspect_result.shachoi_RobustNet.transforms.joint_transforms.ClassUniform.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "in_planes", ":", "int", ",", "\n", "out_planes", ":", "int", ",", "\n", "kernel_size", ":", "int", "=", "3", ",", "\n", "stride", ":", "int", "=", "1", ",", "\n", "groups", ":", "int", "=", "1", ",", "\n", "norm_layer", ":", "Optional", "[", "Callable", "[", "...", ",", "nn", ".", "Module", "]", "]", "=", "None", ",", "\n", "iw", ":", "int", "=", "0", ",", "\n", ")", "->", "None", ":", "\n", "\n", "        ", "padding", "=", "(", "kernel_size", "-", "1", ")", "//", "2", "\n", "if", "norm_layer", "is", "None", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "\n", "\n", "", "self", ".", "iw", "=", "iw", "\n", "\n", "if", "iw", "==", "1", ":", "\n", "            ", "instance_norm_layer", "=", "InstanceWhitening", "(", "out_planes", ")", "\n", "", "elif", "iw", "==", "2", ":", "\n", "            ", "instance_norm_layer", "=", "InstanceWhitening", "(", "out_planes", ")", "\n", "", "elif", "iw", "==", "3", ":", "\n", "            ", "instance_norm_layer", "=", "nn", ".", "InstanceNorm2d", "(", "out_planes", ",", "affine", "=", "False", ")", "\n", "", "elif", "iw", "==", "4", ":", "\n", "            ", "instance_norm_layer", "=", "nn", ".", "InstanceNorm2d", "(", "out_planes", ",", "affine", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "instance_norm_layer", "=", "nn", ".", "Sequential", "(", ")", "\n", "\n", "", "super", "(", "ConvBNReLU", ",", "self", ")", ".", "__init__", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", ",", "stride", ",", "padding", ",", "groups", "=", "groups", ",", "bias", "=", "False", ")", ",", "\n", "norm_layer", "(", "out_planes", ")", ",", "\n", "nn", ".", "ReLU6", "(", "inplace", "=", "True", ")", ",", "\n", "instance_norm_layer", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.network.Mobilenet.ConvBNReLU.forward": [[73, 93], ["enumerate", "len", "print", "module", "len", "Mobilenet.ConvBNReLU.instance_norm_layer", "w_arr.append", "Mobilenet.ConvBNReLU.instance_norm_layer"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x_tuple", ")", ":", "\n", "        ", "if", "len", "(", "x_tuple", ")", "==", "2", ":", "\n", "            ", "w_arr", "=", "x_tuple", "[", "1", "]", "\n", "x", "=", "x_tuple", "[", "0", "]", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"error in BN forward path\"", ")", "\n", "return", "\n", "\n", "", "for", "i", ",", "module", "in", "enumerate", "(", "self", ")", ":", "\n", "            ", "if", "i", "==", "len", "(", "self", ")", "-", "1", ":", "\n", "                ", "if", "self", ".", "iw", ">=", "1", ":", "\n", "                    ", "if", "self", ".", "iw", "==", "1", "or", "self", ".", "iw", "==", "2", ":", "\n", "                        ", "x", ",", "w", "=", "self", ".", "instance_norm_layer", "(", "x", ")", "\n", "w_arr", ".", "append", "(", "w", ")", "\n", "", "else", ":", "\n", "                        ", "x", "=", "self", ".", "instance_norm_layer", "(", "x", ")", "\n", "", "", "", "else", ":", "\n", "                ", "x", "=", "module", "(", "x", ")", "\n", "\n", "", "", "return", "[", "x", ",", "w_arr", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.network.Mobilenet.InvertedResidual.__init__": [[96, 139], ["torch.nn.Module.__init__", "int", "layers.extend", "torch.nn.Sequential", "network.instance_whitening.InstanceWhitening", "round", "layers.append", "network.instance_whitening.InstanceWhitening", "Mobilenet.ConvBNReLU", "Mobilenet.ConvBNReLU", "torch.nn.Conv2d", "norm_layer", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.Sequential"], "methods", ["home.repos.pwc.inspect_result.shachoi_RobustNet.transforms.joint_transforms.ClassUniform.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "inp", ":", "int", ",", "\n", "oup", ":", "int", ",", "\n", "stride", ":", "int", ",", "\n", "expand_ratio", ":", "int", ",", "\n", "norm_layer", ":", "Optional", "[", "Callable", "[", "...", ",", "nn", ".", "Module", "]", "]", "=", "None", ",", "\n", "iw", ":", "int", "=", "0", ",", "\n", ")", "->", "None", ":", "\n", "        ", "super", "(", "InvertedResidual", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "stride", "=", "stride", "\n", "assert", "stride", "in", "[", "1", ",", "2", "]", "\n", "if", "norm_layer", "is", "None", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "\n", "", "self", ".", "expand_ratio", "=", "expand_ratio", "\n", "self", ".", "iw", "=", "iw", "\n", "\n", "if", "iw", "==", "1", ":", "\n", "            ", "self", ".", "instance_norm_layer", "=", "InstanceWhitening", "(", "oup", ")", "\n", "", "elif", "iw", "==", "2", ":", "\n", "            ", "self", ".", "instance_norm_layer", "=", "InstanceWhitening", "(", "oup", ")", "\n", "", "elif", "iw", "==", "3", ":", "\n", "            ", "self", ".", "instance_norm_layer", "=", "nn", ".", "InstanceNorm2d", "(", "oup", ",", "affine", "=", "False", ")", "\n", "", "elif", "iw", "==", "4", ":", "\n", "            ", "self", ".", "instance_norm_layer", "=", "nn", ".", "InstanceNorm2d", "(", "oup", ",", "affine", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "instance_norm_layer", "=", "nn", ".", "Sequential", "(", ")", "\n", "\n", "", "hidden_dim", "=", "int", "(", "round", "(", "inp", "*", "expand_ratio", ")", ")", "\n", "self", ".", "use_res_connect", "=", "self", ".", "stride", "==", "1", "and", "inp", "==", "oup", "\n", "\n", "layers", ":", "List", "[", "nn", ".", "Module", "]", "=", "[", "]", "\n", "if", "expand_ratio", "!=", "1", ":", "\n", "# pw", "\n", "            ", "layers", ".", "append", "(", "ConvBNReLU", "(", "inp", ",", "hidden_dim", ",", "kernel_size", "=", "1", ",", "norm_layer", "=", "norm_layer", ")", ")", "\n", "", "layers", ".", "extend", "(", "[", "\n", "# dw", "\n", "ConvBNReLU", "(", "hidden_dim", ",", "hidden_dim", ",", "stride", "=", "stride", ",", "groups", "=", "hidden_dim", ",", "norm_layer", "=", "norm_layer", ")", ",", "\n", "# pw-linear", "\n", "nn", ".", "Conv2d", "(", "hidden_dim", ",", "oup", ",", "1", ",", "1", ",", "0", ",", "bias", "=", "False", ")", ",", "\n", "norm_layer", "(", "oup", ")", ",", "\n", "]", ")", "\n", "self", ".", "conv", "=", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.network.Mobilenet.InvertedResidual.forward": [[141, 174], ["len", "print", "Mobilenet.InvertedResidual.instance_norm_layer", "w_arr.append", "Mobilenet.InvertedResidual.instance_norm_layer"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x_tuple", ")", ":", "\n", "        ", "if", "len", "(", "x_tuple", ")", "==", "2", ":", "\n", "            ", "x", "=", "x_tuple", "[", "0", "]", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"error in invert residual forward path\"", ")", "\n", "return", "\n", "", "if", "self", ".", "expand_ratio", "!=", "1", ":", "\n", "            ", "x_tuple", "=", "self", ".", "conv", "[", "0", "]", "(", "x_tuple", ")", "\n", "x_tuple", "=", "self", ".", "conv", "[", "1", "]", "(", "x_tuple", ")", "\n", "conv_x", "=", "x_tuple", "[", "0", "]", "\n", "w_arr", "=", "x_tuple", "[", "1", "]", "\n", "conv_x", "=", "self", ".", "conv", "[", "2", "]", "(", "conv_x", ")", "\n", "conv_x", "=", "self", ".", "conv", "[", "3", "]", "(", "conv_x", ")", "\n", "", "else", ":", "\n", "            ", "x_tuple", "=", "self", ".", "conv", "[", "0", "]", "(", "x_tuple", ")", "\n", "conv_x", "=", "x_tuple", "[", "0", "]", "\n", "w_arr", "=", "x_tuple", "[", "1", "]", "\n", "conv_x", "=", "self", ".", "conv", "[", "1", "]", "(", "conv_x", ")", "\n", "conv_x", "=", "self", ".", "conv", "[", "2", "]", "(", "conv_x", ")", "\n", "\n", "", "if", "self", ".", "use_res_connect", ":", "\n", "            ", "x", "=", "x", "+", "conv_x", "\n", "", "else", ":", "\n", "            ", "x", "=", "conv_x", "\n", "\n", "", "if", "self", ".", "iw", ">=", "1", ":", "\n", "            ", "if", "self", ".", "iw", "==", "1", "or", "self", ".", "iw", "==", "2", ":", "\n", "                ", "x", ",", "w", "=", "self", ".", "instance_norm_layer", "(", "x", ")", "\n", "w_arr", ".", "append", "(", "w", ")", "\n", "", "else", ":", "\n", "                ", "x", "=", "self", ".", "instance_norm_layer", "(", "x", ")", "\n", "\n", "", "", "return", "[", "x", ",", "w_arr", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.network.Mobilenet.MobileNetV2.__init__": [[177, 269], ["torch.nn.Module.__init__", "Mobilenet._make_divisible", "Mobilenet._make_divisible", "features.append", "torch.nn.Sequential", "torch.nn.Sequential", "Mobilenet.MobileNetV2.modules", "ValueError", "Mobilenet.ConvBNReLU", "Mobilenet._make_divisible", "range", "Mobilenet.ConvBNReLU", "torch.nn.Dropout", "torch.nn.Linear", "isinstance", "len", "len", "max", "torch.nn.init.kaiming_normal_", "isinstance", "iw_layer.index", "features.append", "features.append", "torch.nn.init.zeros_", "torch.nn.init.ones_", "torch.nn.init.zeros_", "isinstance", "block", "block", "torch.nn.init.normal_", "torch.nn.init.zeros_"], "methods", ["home.repos.pwc.inspect_result.shachoi_RobustNet.transforms.joint_transforms.ClassUniform.__init__", "home.repos.pwc.inspect_result.shachoi_RobustNet.network.Mobilenet._make_divisible", "home.repos.pwc.inspect_result.shachoi_RobustNet.network.Mobilenet._make_divisible", "home.repos.pwc.inspect_result.shachoi_RobustNet.network.Mobilenet._make_divisible"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "num_classes", ":", "int", "=", "1000", ",", "\n", "width_mult", ":", "float", "=", "1.0", ",", "\n", "inverted_residual_setting", ":", "Optional", "[", "List", "[", "List", "[", "int", "]", "]", "]", "=", "None", ",", "\n", "round_nearest", ":", "int", "=", "8", ",", "\n", "block", ":", "Optional", "[", "Callable", "[", "...", ",", "nn", ".", "Module", "]", "]", "=", "None", ",", "\n", "norm_layer", ":", "Optional", "[", "Callable", "[", "...", ",", "nn", ".", "Module", "]", "]", "=", "None", ",", "\n", "iw", ":", "list", "=", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        MobileNet V2 main class\n        Args:\n            num_classes (int): Number of classes\n            width_mult (float): Width multiplier - adjusts number of channels in each layer by this amount\n            inverted_residual_setting: Network structure\n            round_nearest (int): Round the number of channels in each layer to be a multiple of this number\n            Set to 1 to turn off rounding\n            block: Module specifying inverted residual building block for mobilenet\n            norm_layer: Module specifying the normalization layer to use\n        \"\"\"", "\n", "super", "(", "MobileNetV2", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "if", "block", "is", "None", ":", "\n", "            ", "block", "=", "InvertedResidual", "\n", "\n", "", "if", "norm_layer", "is", "None", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "\n", "\n", "", "input_channel", "=", "32", "\n", "last_channel", "=", "1280", "\n", "\n", "if", "inverted_residual_setting", "is", "None", ":", "\n", "            ", "inverted_residual_setting", "=", "[", "\n", "# t, c, n, s", "\n", "[", "1", ",", "16", ",", "1", ",", "1", "]", ",", "# feature 1", "\n", "[", "6", ",", "24", ",", "2", ",", "2", "]", ",", "# feature 2, 3", "\n", "[", "6", ",", "32", ",", "3", ",", "2", "]", ",", "# feature 4, 5, 6", "\n", "[", "6", ",", "64", ",", "4", ",", "2", "]", ",", "# feature 7, 8, 9, 10", "\n", "[", "6", ",", "96", ",", "3", ",", "1", "]", ",", "# feature 11, 12, 13", "\n", "[", "6", ",", "160", ",", "3", ",", "2", "]", ",", "# feature 14, 15, 16", "\n", "[", "6", ",", "320", ",", "1", ",", "1", "]", ",", "# feature 17", "\n", "]", "\n", "\n", "# only check the first element, assuming user knows t,c,n,s are required", "\n", "", "if", "len", "(", "inverted_residual_setting", ")", "==", "0", "or", "len", "(", "inverted_residual_setting", "[", "0", "]", ")", "!=", "4", ":", "\n", "            ", "raise", "ValueError", "(", "\"inverted_residual_setting should be non-empty \"", "\n", "\"or a 4-element list, got {}\"", ".", "format", "(", "inverted_residual_setting", ")", ")", "\n", "\n", "# building first layer", "\n", "", "input_channel", "=", "_make_divisible", "(", "input_channel", "*", "width_mult", ",", "round_nearest", ")", "\n", "self", ".", "last_channel", "=", "_make_divisible", "(", "last_channel", "*", "max", "(", "1.0", ",", "width_mult", ")", ",", "round_nearest", ")", "\n", "# feature 0", "\n", "features", ":", "List", "[", "nn", ".", "Module", "]", "=", "[", "ConvBNReLU", "(", "3", ",", "input_channel", ",", "stride", "=", "2", ",", "norm_layer", "=", "norm_layer", ")", "]", "\n", "# building inverted residual blocks", "\n", "feature_count", "=", "0", "\n", "iw_layer", "=", "[", "1", ",", "6", ",", "10", ",", "17", ",", "18", "]", "\n", "for", "t", ",", "c", ",", "n", ",", "s", "in", "inverted_residual_setting", ":", "\n", "            ", "output_channel", "=", "_make_divisible", "(", "c", "*", "width_mult", ",", "round_nearest", ")", "\n", "for", "i", "in", "range", "(", "n", ")", ":", "\n", "                ", "feature_count", "+=", "1", "\n", "stride", "=", "s", "if", "i", "==", "0", "else", "1", "\n", "if", "feature_count", "in", "iw_layer", ":", "\n", "                    ", "layer", "=", "iw_layer", ".", "index", "(", "feature_count", ")", "\n", "features", ".", "append", "(", "block", "(", "input_channel", ",", "output_channel", ",", "stride", ",", "expand_ratio", "=", "t", ",", "norm_layer", "=", "norm_layer", ",", "iw", "=", "iw", "[", "layer", "+", "2", "]", ")", ")", "\n", "", "else", ":", "\n", "                    ", "features", ".", "append", "(", "block", "(", "input_channel", ",", "output_channel", ",", "stride", ",", "expand_ratio", "=", "t", ",", "norm_layer", "=", "norm_layer", ",", "iw", "=", "0", ")", ")", "\n", "", "input_channel", "=", "output_channel", "\n", "# building last several layers", "\n", "# feature 18", "\n", "", "", "features", ".", "append", "(", "ConvBNReLU", "(", "input_channel", ",", "self", ".", "last_channel", ",", "kernel_size", "=", "1", ",", "norm_layer", "=", "norm_layer", ")", ")", "\n", "# make it nn.Sequential", "\n", "self", ".", "features", "=", "nn", ".", "Sequential", "(", "*", "features", ")", "\n", "\n", "# building classifier", "\n", "self", ".", "classifier", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Dropout", "(", "0.2", ")", ",", "\n", "nn", ".", "Linear", "(", "self", ".", "last_channel", ",", "num_classes", ")", ",", "\n", ")", "\n", "\n", "# weight initialization", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "nn", ".", "init", ".", "zeros_", "(", "m", ".", "bias", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "(", "nn", ".", "BatchNorm2d", ",", "nn", ".", "GroupNorm", ")", ")", ":", "\n", "                ", "nn", ".", "init", ".", "ones_", "(", "m", ".", "weight", ")", "\n", "nn", ".", "init", ".", "zeros_", "(", "m", ".", "bias", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "nn", ".", "init", ".", "normal_", "(", "m", ".", "weight", ",", "0", ",", "0.01", ")", "\n", "nn", ".", "init", ".", "zeros_", "(", "m", ".", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.network.Mobilenet.MobileNetV2._forward_impl": [[270, 278], ["Mobilenet.MobileNetV2.features", "torch.nn.functional.adaptive_avg_pool2d().reshape", "Mobilenet.MobileNetV2.classifier", "torch.nn.functional.adaptive_avg_pool2d"], "methods", ["home.repos.pwc.inspect_result.shachoi_RobustNet.network.SEresnext.SENet.features"], ["", "", "", "def", "_forward_impl", "(", "self", ",", "x", ":", "Tensor", ")", "->", "Tensor", ":", "\n", "# This exists since TorchScript doesn't support inheritance, so the superclass method", "\n", "# (this one) needs to have a name other than `forward` that can be accessed in a subclass", "\n", "        ", "x", "=", "self", ".", "features", "(", "x", ")", "\n", "# Cannot use \"squeeze\" as batch-size can be 1 => must use reshape with x.shape[0]", "\n", "x", "=", "nn", ".", "functional", ".", "adaptive_avg_pool2d", "(", "x", ",", "(", "1", ",", "1", ")", ")", ".", "reshape", "(", "x", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "classifier", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.network.Mobilenet.MobileNetV2.forward": [[279, 281], ["Mobilenet.MobileNetV2._forward_impl"], "methods", ["home.repos.pwc.inspect_result.shachoi_RobustNet.network.Shufflenet.ShuffleNetV2._forward_impl"], ["", "def", "forward", "(", "self", ",", "x", ":", "Tensor", ")", "->", "Tensor", ":", "\n", "        ", "return", "self", ".", "_forward_impl", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.network.Mobilenet._make_divisible": [[16, 34], ["max", "int"], "function", ["None"], ["def", "_make_divisible", "(", "v", ":", "float", ",", "divisor", ":", "int", ",", "min_value", ":", "Optional", "[", "int", "]", "=", "None", ")", "->", "int", ":", "\n", "    ", "\"\"\"\n    This function is taken from the original tf repo.\n    It ensures that all layers have a channel number that is divisible by 8\n    It can be seen here:\n    https://github.com/tensorflow/models/blob/master/research/slim/nets/mobilenet/mobilenet.py\n    :param v:\n    :param divisor:\n    :param min_value:\n    :return:\n    \"\"\"", "\n", "if", "min_value", "is", "None", ":", "\n", "        ", "min_value", "=", "divisor", "\n", "", "new_v", "=", "max", "(", "min_value", ",", "int", "(", "v", "+", "divisor", "/", "2", ")", "//", "divisor", "*", "divisor", ")", "\n", "# Make sure that round down does not go down by more than 10%.", "\n", "if", "new_v", "<", "0.9", "*", "v", ":", "\n", "        ", "new_v", "+=", "divisor", "\n", "", "return", "new_v", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.network.Mobilenet.mobilenet_v2": [[283, 298], ["Mobilenet.MobileNetV2", "torch.utils.model_zoo.load_url", "network.mynn.forgiving_state_restore"], "function", ["home.repos.pwc.inspect_result.shachoi_RobustNet.network.mynn.forgiving_state_restore"], ["", "", "def", "mobilenet_v2", "(", "pretrained", ":", "bool", "=", "False", ",", "progress", ":", "bool", "=", "True", ",", "**", "kwargs", ":", "Any", ")", "->", "MobileNetV2", ":", "\n", "    ", "\"\"\"\n    Constructs a MobileNetV2 architecture from\n    `\"MobileNetV2: Inverted Residuals and Linear Bottlenecks\" <https://arxiv.org/abs/1801.04381>`_.\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "model", "=", "MobileNetV2", "(", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "state_dict", "=", "load_state_dict_from_url", "(", "model_urls", "[", "'mobilenet_v2'", "]", ",", "\n", "progress", "=", "progress", ")", "\n", "#model.load_state_dict(state_dict)", "\n", "forgiving_state_restore", "(", "model", ",", "state_dict", ")", "\n", "", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.shachoi_RobustNet.network.cov_settings.CovMatrix_ISW.__init__": [[17, 40], ["super().__init__", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "torch.ones().triu().cuda", "torch.ones().triu().cuda", "torch.ones().triu().cuda", "torch.ones().triu().cuda", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "print", "print", "print", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.ones().triu", "torch.ones().triu", "torch.ones().triu", "torch.ones().triu", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.shachoi_RobustNet.transforms.joint_transforms.ClassUniform.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "relax_denom", "=", "0", ",", "clusters", "=", "50", ")", ":", "\n", "        ", "super", "(", "CovMatrix_ISW", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "dim", "=", "dim", "\n", "self", ".", "i", "=", "torch", ".", "eye", "(", "dim", ",", "dim", ")", ".", "cuda", "(", ")", "\n", "\n", "# print(torch.ones(16, 16).triu(diagonal=1))", "\n", "self", ".", "reversal_i", "=", "torch", ".", "ones", "(", "dim", ",", "dim", ")", ".", "triu", "(", "diagonal", "=", "1", ")", ".", "cuda", "(", ")", "\n", "\n", "# num_off_diagonal = ((dim * dim - dim) // 2)  # number of off-diagonal", "\n", "self", ".", "num_off_diagonal", "=", "torch", ".", "sum", "(", "self", ".", "reversal_i", ")", "\n", "self", ".", "num_sensitive", "=", "0", "\n", "self", ".", "var_matrix", "=", "None", "\n", "self", ".", "count_var_cov", "=", "0", "\n", "self", ".", "mask_matrix", "=", "None", "\n", "self", ".", "clusters", "=", "clusters", "\n", "print", "(", "\"num_off_diagonal\"", ",", "self", ".", "num_off_diagonal", ")", "\n", "if", "relax_denom", "==", "0", ":", "# kmeans1d clustering setting for ISW", "\n", "            ", "print", "(", "\"relax_denom == 0!!!!!\"", ")", "\n", "print", "(", "\"cluster == \"", ",", "self", ".", "clusters", ")", "\n", "self", ".", "margin", "=", "0", "\n", "", "else", ":", "# do not use", "\n", "            ", "self", ".", "margin", "=", "self", ".", "num_off_diagonal", "//", "relax_denom", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.network.cov_settings.CovMatrix_ISW.get_eye_matrix": [[41, 43], ["None"], "methods", ["None"], ["", "", "def", "get_eye_matrix", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "i", ",", "self", ".", "reversal_i", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.network.cov_settings.CovMatrix_ISW.get_mask_matrix": [[44, 48], ["cov_settings.CovMatrix_ISW.set_mask_matrix"], "methods", ["home.repos.pwc.inspect_result.shachoi_RobustNet.network.deepv3.DeepV3Plus.set_mask_matrix"], ["", "def", "get_mask_matrix", "(", "self", ",", "mask", "=", "True", ")", ":", "\n", "        ", "if", "self", ".", "mask_matrix", "is", "None", ":", "\n", "            ", "self", ".", "set_mask_matrix", "(", ")", "\n", "", "return", "self", ".", "i", ",", "self", ".", "mask_matrix", ",", "0", ",", "self", ".", "num_sensitive", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.network.cov_settings.CovMatrix_ISW.reset_mask_matrix": [[49, 51], ["None"], "methods", ["None"], ["", "def", "reset_mask_matrix", "(", "self", ")", ":", "\n", "        ", "self", ".", "mask_matrix", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.network.cov_settings.CovMatrix_ISW.set_mask_matrix": [[52, 82], ["torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "print", "kmeans1d.cluster", "print", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "print", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.flatten.view", "torch.flatten.view", "torch.cuda.current_device", "torch.cuda.current_device", "torch.cuda.current_device", "torch.cuda.current_device", "print", "print", "clusters.count", "torch.flatten.size", "torch.flatten.size", "int", "int", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "cov_settings.CovMatrix_ISW.mask_matrix.int", "torch.flatten.view().int", "torch.flatten.view().int", "torch.flatten.view", "torch.flatten.view"], "methods", ["None"], ["", "def", "set_mask_matrix", "(", "self", ")", ":", "\n", "# torch.set_printoptions(threshold=500000)", "\n", "        ", "self", ".", "var_matrix", "=", "self", ".", "var_matrix", "/", "self", ".", "count_var_cov", "\n", "var_flatten", "=", "torch", ".", "flatten", "(", "self", ".", "var_matrix", ")", "\n", "\n", "if", "self", ".", "margin", "==", "0", ":", "# kmeans1d clustering setting for ISW", "\n", "            ", "clusters", ",", "centroids", "=", "kmeans1d", ".", "cluster", "(", "var_flatten", ",", "self", ".", "clusters", ")", "# 50 clusters", "\n", "num_sensitive", "=", "var_flatten", ".", "size", "(", ")", "[", "0", "]", "-", "clusters", ".", "count", "(", "0", ")", "# 1: Insensitive Cov, 2~50: Sensitive Cov", "\n", "print", "(", "\"num_sensitive, centroids =\"", ",", "num_sensitive", ",", "centroids", ")", "\n", "_", ",", "indices", "=", "torch", ".", "topk", "(", "var_flatten", ",", "k", "=", "int", "(", "num_sensitive", ")", ")", "\n", "", "else", ":", "# do not use", "\n", "            ", "num_sensitive", "=", "self", ".", "num_off_diagonal", "-", "self", ".", "margin", "\n", "print", "(", "\"num_sensitive = \"", ",", "num_sensitive", ")", "\n", "_", ",", "indices", "=", "torch", ".", "topk", "(", "var_flatten", ",", "k", "=", "int", "(", "num_sensitive", ")", ")", "\n", "", "mask_matrix", "=", "torch", ".", "flatten", "(", "torch", ".", "zeros", "(", "self", ".", "dim", ",", "self", ".", "dim", ")", ".", "cuda", "(", ")", ")", "\n", "mask_matrix", "[", "indices", "]", "=", "1", "\n", "\n", "if", "self", ".", "mask_matrix", "is", "not", "None", ":", "\n", "            ", "self", ".", "mask_matrix", "=", "(", "self", ".", "mask_matrix", ".", "int", "(", ")", "&", "mask_matrix", ".", "view", "(", "self", ".", "dim", ",", "self", ".", "dim", ")", ".", "int", "(", ")", ")", ".", "float", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "mask_matrix", "=", "mask_matrix", ".", "view", "(", "self", ".", "dim", ",", "self", ".", "dim", ")", "\n", "", "self", ".", "num_sensitive", "=", "torch", ".", "sum", "(", "self", ".", "mask_matrix", ")", "\n", "print", "(", "\"Check whether two ints are same\"", ",", "num_sensitive", ",", "self", ".", "num_sensitive", ")", "\n", "\n", "self", ".", "var_matrix", "=", "None", "\n", "self", ".", "count_var_cov", "=", "0", "\n", "\n", "if", "torch", ".", "cuda", ".", "current_device", "(", ")", "==", "0", ":", "\n", "            ", "print", "(", "\"Covariance Info: (CXC Shape, Num_Off_Diagonal)\"", ",", "self", ".", "mask_matrix", ".", "shape", ",", "self", ".", "num_off_diagonal", ")", "\n", "print", "(", "\"Selective (Sensitive Covariance)\"", ",", "self", ".", "num_sensitive", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.network.cov_settings.CovMatrix_ISW.set_variance_of_covariance": [[84, 90], ["None"], "methods", ["None"], ["", "", "def", "set_variance_of_covariance", "(", "self", ",", "var_cov", ")", ":", "\n", "        ", "if", "self", ".", "var_matrix", "is", "None", ":", "\n", "            ", "self", ".", "var_matrix", "=", "var_cov", "\n", "", "else", ":", "\n", "            ", "self", ".", "var_matrix", "=", "self", ".", "var_matrix", "+", "var_cov", "\n", "", "self", ".", "count_var_cov", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.network.cov_settings.CovMatrix_IRW.__init__": [[92, 105], ["super().__init__", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "torch.ones().triu().cuda", "torch.ones().triu().cuda", "torch.ones().triu().cuda", "torch.ones().triu().cuda", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "print", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.ones().triu", "torch.ones().triu", "torch.ones().triu", "torch.ones().triu", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.shachoi_RobustNet.transforms.joint_transforms.ClassUniform.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "relax_denom", "=", "0", ")", ":", "\n", "        ", "super", "(", "CovMatrix_IRW", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "dim", "=", "dim", "\n", "self", ".", "i", "=", "torch", ".", "eye", "(", "dim", ",", "dim", ")", ".", "cuda", "(", ")", "\n", "self", ".", "reversal_i", "=", "torch", ".", "ones", "(", "dim", ",", "dim", ")", ".", "triu", "(", "diagonal", "=", "1", ")", ".", "cuda", "(", ")", "\n", "\n", "self", ".", "num_off_diagonal", "=", "torch", ".", "sum", "(", "self", ".", "reversal_i", ")", "\n", "if", "relax_denom", "==", "0", ":", "\n", "            ", "print", "(", "\"relax_denom == 0!!!!!\"", ")", "\n", "self", ".", "margin", "=", "0", "\n", "", "else", ":", "\n", "            ", "self", ".", "margin", "=", "self", ".", "num_off_diagonal", "//", "relax_denom", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.network.cov_settings.CovMatrix_IRW.get_mask_matrix": [[106, 108], ["None"], "methods", ["None"], ["", "", "def", "get_mask_matrix", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "i", ",", "self", ".", "reversal_i", ",", "self", ".", "margin", ",", "self", ".", "num_off_diagonal", "\n", "", "", ""]], "home.repos.pwc.inspect_result.shachoi_RobustNet.network.cov_settings.make_cov_index_matrix": [[7, 14], ["torch.LongTensor", "torch.LongTensor", "range", "torch.cat", "torch.cat", "torch.cat.triu().transpose", "torch.cat.triu", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.cat.triu", "torch.arange", "torch.arange"], "function", ["None"], ["def", "make_cov_index_matrix", "(", "dim", ")", ":", "# make symmetric matrix for embedding index", "\n", "    ", "matrix", "=", "torch", ".", "LongTensor", "(", ")", "\n", "s_index", "=", "0", "\n", "for", "i", "in", "range", "(", "dim", ")", ":", "\n", "        ", "matrix", "=", "torch", ".", "cat", "(", "[", "matrix", ",", "torch", ".", "arange", "(", "s_index", ",", "s_index", "+", "dim", ")", ".", "unsqueeze", "(", "0", ")", "]", ",", "dim", "=", "0", ")", "\n", "s_index", "+=", "(", "dim", "-", "(", "2", "+", "i", ")", ")", "\n", "", "return", "matrix", ".", "triu", "(", "diagonal", "=", "1", ")", ".", "transpose", "(", "0", ",", "1", ")", "+", "matrix", ".", "triu", "(", "diagonal", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.network.mynn.Norm2d": [[8, 15], ["getattr", "getattr."], "function", ["None"], ["def", "Norm2d", "(", "in_channels", ")", ":", "\n", "    ", "\"\"\"\n    Custom Norm Function to allow flexible switching\n    \"\"\"", "\n", "layer", "=", "getattr", "(", "cfg", ".", "MODEL", ",", "'BNFUNC'", ")", "\n", "normalization_layer", "=", "layer", "(", "in_channels", ")", "\n", "return", "normalization_layer", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.network.mynn.freeze_weights": [[17, 21], ["model.parameters"], "function", ["None"], ["", "def", "freeze_weights", "(", "*", "models", ")", ":", "\n", "    ", "for", "model", "in", "models", ":", "\n", "        ", "for", "k", "in", "model", ".", "parameters", "(", ")", ":", "\n", "            ", "k", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.network.mynn.unfreeze_weights": [[22, 26], ["model.parameters"], "function", ["None"], ["", "", "", "def", "unfreeze_weights", "(", "*", "models", ")", ":", "\n", "    ", "for", "model", "in", "models", ":", "\n", "        ", "for", "k", "in", "model", ".", "parameters", "(", ")", ":", "\n", "            ", "k", ".", "requires_grad", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.network.mynn.initialize_weights": [[27, 45], ["model.modules", "isinstance", "torch.init.kaiming_normal_", "isinstance", "module.bias.data.zero_", "torch.init.kaiming_normal_", "module.bias.data.zero_", "isinstance", "isinstance", "isinstance", "isinstance", "module.weight.data.fill_", "module.bias.data.zero_"], "function", ["None"], ["", "", "", "def", "initialize_weights", "(", "*", "models", ")", ":", "\n", "    ", "\"\"\"\n    Initialize Model Weights\n    \"\"\"", "\n", "for", "model", "in", "models", ":", "\n", "        ", "for", "module", "in", "model", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "module", ",", "(", "nn", ".", "Conv2d", ",", "nn", ".", "Linear", ")", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "module", ".", "weight", ",", "nonlinearity", "=", "'relu'", ")", "\n", "if", "module", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "module", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "", "elif", "isinstance", "(", "module", ",", "nn", ".", "Conv1d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "module", ".", "weight", ",", "nonlinearity", "=", "'relu'", ")", "\n", "if", "module", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "module", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "", "elif", "isinstance", "(", "module", ",", "nn", ".", "BatchNorm2d", ")", "or", "isinstance", "(", "module", ",", "nn", ".", "BatchNorm1d", ")", "or", "isinstance", "(", "module", ",", "nn", ".", "GroupNorm", ")", "or", "isinstance", "(", "module", ",", "nn", ".", "SyncBatchNorm", ")", ":", "\n", "                ", "module", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "module", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.network.mynn.initialize_embedding": [[46, 54], ["model.modules", "isinstance", "module.weight.data.zero_"], "function", ["None"], ["", "", "", "", "def", "initialize_embedding", "(", "*", "models", ")", ":", "\n", "    ", "\"\"\"\n    Initialize Model Weights\n    \"\"\"", "\n", "for", "model", "in", "models", ":", "\n", "        ", "for", "module", "in", "model", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "module", ",", "nn", ".", "Embedding", ")", ":", "\n", "                ", "module", ".", "weight", ".", "data", ".", "zero_", "(", ")", "#original", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.network.mynn.Upsample": [[57, 63], ["torch.functional.interpolate"], "function", ["None"], ["", "", "", "", "def", "Upsample", "(", "x", ",", "size", ")", ":", "\n", "    ", "\"\"\"\n    Wrapper Around the Upsample Call\n    \"\"\"", "\n", "return", "nn", ".", "functional", ".", "interpolate", "(", "x", ",", "size", "=", "size", ",", "mode", "=", "'bilinear'", ",", "\n", "align_corners", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.network.mynn.forgiving_state_restore": [[64, 81], ["net.state_dict", "net.state_dict.update", "net.load_state_dict", "print", "net_state_dict[].size", "loaded_dict[].size"], "function", ["home.repos.pwc.inspect_result.shachoi_RobustNet.utils.misc.AverageMeter.update"], ["", "def", "forgiving_state_restore", "(", "net", ",", "loaded_dict", ")", ":", "\n", "    ", "\"\"\"\n    Handle partial loading when some tensors don't match up in size.\n    Because we want to use models that were trained off a different\n    number of classes.\n    \"\"\"", "\n", "net_state_dict", "=", "net", ".", "state_dict", "(", ")", "\n", "new_loaded_dict", "=", "{", "}", "\n", "for", "k", "in", "net_state_dict", ":", "\n", "        ", "if", "k", "in", "loaded_dict", "and", "net_state_dict", "[", "k", "]", ".", "size", "(", ")", "==", "loaded_dict", "[", "k", "]", ".", "size", "(", ")", ":", "\n", "            ", "new_loaded_dict", "[", "k", "]", "=", "loaded_dict", "[", "k", "]", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"Skipped loading parameter\"", ",", "k", ")", "\n", "# logging.info(\"Skipped loading parameter %s\", k)", "\n", "", "", "net_state_dict", ".", "update", "(", "new_loaded_dict", ")", "\n", "net", ".", "load_state_dict", "(", "net_state_dict", ")", "\n", "return", "net", "\n", "", ""]], "home.repos.pwc.inspect_result.shachoi_RobustNet.network.deepv3._AtrousSpatialPyramidPoolingModule.__init__": [[51, 88], ["torch.nn.Module.__init__", "print", "deepv3._AtrousSpatialPyramidPoolingModule.features.append", "torch.nn.ModuleList", "torch.nn.AdaptiveAvgPool2d", "torch.nn.Sequential", "torch.nn.Sequential", "deepv3._AtrousSpatialPyramidPoolingModule.features.append", "torch.nn.Conv2d", "network.mynn.Norm2d", "torch.nn.ReLU", "torch.nn.Conv2d", "network.mynn.Norm2d", "torch.nn.ReLU", "torch.nn.Sequential", "torch.nn.Conv2d", "network.mynn.Norm2d", "torch.nn.ReLU"], "methods", ["home.repos.pwc.inspect_result.shachoi_RobustNet.transforms.joint_transforms.ClassUniform.__init__", "home.repos.pwc.inspect_result.shachoi_RobustNet.network.mynn.Norm2d", "home.repos.pwc.inspect_result.shachoi_RobustNet.network.mynn.Norm2d", "home.repos.pwc.inspect_result.shachoi_RobustNet.network.mynn.Norm2d"], ["def", "__init__", "(", "self", ",", "in_dim", ",", "reduction_dim", "=", "256", ",", "output_stride", "=", "16", ",", "rates", "=", "(", "6", ",", "12", ",", "18", ")", ")", ":", "\n", "        ", "super", "(", "_AtrousSpatialPyramidPoolingModule", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# Check if we are using distributed BN and use the nn from encoding.nn", "\n", "# library rather than using standard pytorch.nn", "\n", "print", "(", "\"output_stride = \"", ",", "output_stride", ")", "\n", "if", "output_stride", "==", "8", ":", "\n", "            ", "rates", "=", "[", "2", "*", "r", "for", "r", "in", "rates", "]", "\n", "", "elif", "output_stride", "==", "4", ":", "\n", "            ", "rates", "=", "[", "4", "*", "r", "for", "r", "in", "rates", "]", "\n", "", "elif", "output_stride", "==", "16", ":", "\n", "            ", "pass", "\n", "", "elif", "output_stride", "==", "32", ":", "\n", "            ", "rates", "=", "[", "r", "//", "2", "for", "r", "in", "rates", "]", "\n", "", "else", ":", "\n", "            ", "raise", "'output stride of {} not supported'", ".", "format", "(", "output_stride", ")", "\n", "\n", "", "self", ".", "features", "=", "[", "]", "\n", "# 1x1", "\n", "self", ".", "features", ".", "append", "(", "\n", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_dim", ",", "reduction_dim", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "Norm2d", "(", "reduction_dim", ")", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", ")", "\n", "# other rates", "\n", "for", "r", "in", "rates", ":", "\n", "            ", "self", ".", "features", ".", "append", "(", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_dim", ",", "reduction_dim", ",", "kernel_size", "=", "3", ",", "\n", "dilation", "=", "r", ",", "padding", "=", "r", ",", "bias", "=", "False", ")", ",", "\n", "Norm2d", "(", "reduction_dim", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", ")", "\n", "", "self", ".", "features", "=", "torch", ".", "nn", ".", "ModuleList", "(", "self", ".", "features", ")", "\n", "\n", "# img level features", "\n", "self", ".", "img_pooling", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "self", ".", "img_conv", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_dim", ",", "256", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "Norm2d", "(", "256", ")", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.network.deepv3._AtrousSpatialPyramidPoolingModule.forward": [[89, 101], ["x.size", "deepv3._AtrousSpatialPyramidPoolingModule.img_pooling", "deepv3._AtrousSpatialPyramidPoolingModule.img_conv", "network.mynn.Upsample", "f", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.shachoi_RobustNet.network.mynn.Upsample"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x_size", "=", "x", ".", "size", "(", ")", "\n", "\n", "img_features", "=", "self", ".", "img_pooling", "(", "x", ")", "\n", "img_features", "=", "self", ".", "img_conv", "(", "img_features", ")", "\n", "img_features", "=", "Upsample", "(", "img_features", ",", "x_size", "[", "2", ":", "]", ")", "\n", "out", "=", "img_features", "\n", "\n", "for", "f", "in", "self", ".", "features", ":", "\n", "            ", "y", "=", "f", "(", "x", ")", "\n", "out", "=", "torch", ".", "cat", "(", "(", "out", ",", "y", ")", ",", "1", ")", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.network.deepv3.DeepV3Plus.__init__": [[111, 465], ["torch.nn.Module.__init__", "deepv3._AtrousSpatialPyramidPoolingModule", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "network.mynn.initialize_weights", "network.mynn.initialize_weights", "network.mynn.initialize_weights", "network.mynn.initialize_weights", "network.mynn.initialize_weights", "network.mynn.initialize_weights", "range", "network.Shufflenet.shufflenet_v2_x1_0", "Layer0", "Layer4", "torch.nn.Conv2d", "network.mynn.Norm2d", "torch.nn.ReLU", "torch.nn.Conv2d", "network.mynn.Norm2d", "torch.nn.ReLU", "torch.nn.Conv2d", "network.mynn.Norm2d", "torch.nn.ReLU", "torch.nn.Conv2d", "network.mynn.Norm2d", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.Conv2d", "network.mynn.Norm2d", "torch.nn.ReLU", "torch.nn.Dropout2d", "torch.nn.Conv2d", "len", "deepv3.DeepV3Plus.layer2.named_modules", "deepv3.DeepV3Plus.layer3.named_modules", "torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.Module.__init__", "deepv3.DeepV3Plus.layer3.named_modules", "print", "torchvision.mnasnet0_5", "print", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torchvision.mnasnet1_0", "print", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "deepv3.DeepV3Plus.layer2.named_modules", "deepv3.DeepV3Plus.layer3.named_modules", "network.Mobilenet.mobilenet_v2", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "deepv3.DeepV3Plus.cov_matrix_layer.append", "deepv3.DeepV3Plus.cov_type.append", "len", "print", "len", "print", "isinstance", "isinstance", "len", "len", "deepv3.DeepV3Plus.layer3.named_modules", "print", "deepv3.DeepV3Plus.layer2.named_modules", "deepv3.DeepV3Plus.layer3.named_modules", "network.Resnet.resnet18", "torch.nn.Sequential", "deepv3.DeepV3Plus.layer3.named_modules", "deepv3.DeepV3Plus.layer4.named_modules", "network.cov_settings.CovMatrix_IRW", "deepv3.DeepV3Plus.cov_matrix_layer.append", "deepv3.DeepV3Plus.cov_type.append", "deepv3.DeepV3Plus.instance_norm_layer", "w_arr.append", "deepv3.DeepV3Plus.instance_norm_layer", "deepv3.DeepV3Plus.instance_norm_layer", "w_arr.append", "deepv3.DeepV3Plus.instance_norm_layer", "isinstance", "isinstance", "isinstance", "deepv3.DeepV3Plus.layer3.named_modules", "print", "network.Resnet.resnet50", "torch.nn.Sequential", "deepv3.DeepV3Plus.layer2.named_modules", "deepv3.DeepV3Plus.layer3.named_modules", "deepv3.DeepV3Plus.layer4.named_modules", "network.cov_settings.CovMatrix_ISW", "isinstance", "isinstance", "isinstance", "network.Resnet.resnet101", "torch.nn.Sequential", "deepv3.DeepV3Plus.layer4.named_modules", "print", "isinstance", "network.Resnet.resnet152", "torch.nn.Sequential", "torchvision.resnext50_32x4d", "torch.nn.Sequential", "torchvision.resnext101_32x8d", "torch.nn.Sequential", "torchvision.wide_resnet50_2", "torch.nn.Sequential", "torchvision.wide_resnet101_2", "torch.nn.Sequential", "ValueError"], "methods", ["home.repos.pwc.inspect_result.shachoi_RobustNet.transforms.joint_transforms.ClassUniform.__init__", "home.repos.pwc.inspect_result.shachoi_RobustNet.network.mynn.initialize_weights", "home.repos.pwc.inspect_result.shachoi_RobustNet.network.mynn.initialize_weights", "home.repos.pwc.inspect_result.shachoi_RobustNet.network.mynn.initialize_weights", "home.repos.pwc.inspect_result.shachoi_RobustNet.network.mynn.initialize_weights", "home.repos.pwc.inspect_result.shachoi_RobustNet.network.mynn.initialize_weights", "home.repos.pwc.inspect_result.shachoi_RobustNet.network.mynn.initialize_weights", "home.repos.pwc.inspect_result.shachoi_RobustNet.network.Shufflenet.shufflenet_v2_x1_0", "home.repos.pwc.inspect_result.shachoi_RobustNet.network.mynn.Norm2d", "home.repos.pwc.inspect_result.shachoi_RobustNet.network.mynn.Norm2d", "home.repos.pwc.inspect_result.shachoi_RobustNet.network.mynn.Norm2d", "home.repos.pwc.inspect_result.shachoi_RobustNet.network.mynn.Norm2d", "home.repos.pwc.inspect_result.shachoi_RobustNet.network.mynn.Norm2d", "home.repos.pwc.inspect_result.shachoi_RobustNet.transforms.joint_transforms.ClassUniform.__init__", "home.repos.pwc.inspect_result.shachoi_RobustNet.transforms.joint_transforms.ClassUniform.__init__", "home.repos.pwc.inspect_result.shachoi_RobustNet.network.Mobilenet.mobilenet_v2", "home.repos.pwc.inspect_result.shachoi_RobustNet.network.Resnet.resnet18", "home.repos.pwc.inspect_result.shachoi_RobustNet.network.Resnet.resnet50", "home.repos.pwc.inspect_result.shachoi_RobustNet.network.Resnet.resnet101", "home.repos.pwc.inspect_result.shachoi_RobustNet.network.Resnet.resnet152"], ["def", "__init__", "(", "self", ",", "num_classes", ",", "trunk", "=", "'resnet-101'", ",", "criterion", "=", "None", ",", "criterion_aux", "=", "None", ",", "\n", "variant", "=", "'D'", ",", "skip", "=", "'m1'", ",", "skip_num", "=", "48", ",", "args", "=", "None", ")", ":", "\n", "        ", "super", "(", "DeepV3Plus", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "criterion", "=", "criterion", "\n", "self", ".", "criterion_aux", "=", "criterion_aux", "\n", "self", ".", "variant", "=", "variant", "\n", "self", ".", "args", "=", "args", "\n", "self", ".", "trunk", "=", "trunk", "\n", "\n", "if", "trunk", "==", "'shufflenetv2'", ":", "\n", "            ", "channel_1st", "=", "3", "\n", "channel_2nd", "=", "24", "\n", "channel_3rd", "=", "116", "\n", "channel_4th", "=", "232", "\n", "prev_final_channel", "=", "464", "\n", "final_channel", "=", "1024", "\n", "resnet", "=", "Shufflenet", ".", "shufflenet_v2_x1_0", "(", "pretrained", "=", "True", ",", "iw", "=", "self", ".", "args", ".", "wt_layer", ")", "\n", "\n", "class", "Layer0", "(", "nn", ".", "Module", ")", ":", "\n", "                ", "def", "__init__", "(", "self", ",", "iw", ")", ":", "\n", "                    ", "super", "(", "Layer0", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "layer", "=", "nn", ".", "Sequential", "(", "resnet", ".", "conv1", ",", "resnet", ".", "maxpool", ")", "\n", "self", ".", "instance_norm_layer", "=", "resnet", ".", "instance_norm_layer1", "\n", "self", ".", "iw", "=", "iw", "\n", "\n", "", "def", "forward", "(", "self", ",", "x_tuple", ")", ":", "\n", "                    ", "if", "len", "(", "x_tuple", ")", "==", "2", ":", "\n", "                        ", "w_arr", "=", "x_tuple", "[", "1", "]", "\n", "x", "=", "x_tuple", "[", "0", "]", "\n", "", "else", ":", "\n", "                        ", "print", "(", "\"error in shufflnet layer 0 forward path\"", ")", "\n", "return", "\n", "\n", "", "x", "=", "self", ".", "layer", "[", "0", "]", "[", "0", "]", "(", "x", ")", "\n", "if", "self", ".", "iw", ">=", "1", ":", "\n", "                        ", "if", "self", ".", "iw", "==", "1", "or", "self", ".", "iw", "==", "2", ":", "\n", "                            ", "x", ",", "w", "=", "self", ".", "instance_norm_layer", "(", "x", ")", "\n", "w_arr", ".", "append", "(", "w", ")", "\n", "", "else", ":", "\n", "                            ", "x", "=", "self", ".", "instance_norm_layer", "(", "x", ")", "\n", "", "", "else", ":", "\n", "                        ", "x", "=", "self", ".", "layer", "[", "0", "]", "[", "1", "]", "(", "x", ")", "\n", "\n", "", "x", "=", "self", ".", "layer", "[", "0", "]", "[", "2", "]", "(", "x", ")", "\n", "x", "=", "self", ".", "layer", "[", "1", "]", "(", "x", ")", "\n", "\n", "return", "[", "x", ",", "w_arr", "]", "\n", "\n", "", "", "class", "Layer4", "(", "nn", ".", "Module", ")", ":", "\n", "                ", "def", "__init__", "(", "self", ",", "iw", ")", ":", "\n", "                    ", "super", "(", "Layer4", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "layer", "=", "resnet", ".", "conv5", "\n", "self", ".", "instance_norm_layer", "=", "resnet", ".", "instance_norm_layer2", "\n", "self", ".", "iw", "=", "iw", "\n", "\n", "", "def", "forward", "(", "self", ",", "x_tuple", ")", ":", "\n", "                    ", "if", "len", "(", "x_tuple", ")", "==", "2", ":", "\n", "                        ", "w_arr", "=", "x_tuple", "[", "1", "]", "\n", "x", "=", "x_tuple", "[", "0", "]", "\n", "", "else", ":", "\n", "                        ", "print", "(", "\"error in shufflnet layer 4 forward path\"", ")", "\n", "return", "\n", "\n", "", "x", "=", "self", ".", "layer", "[", "0", "]", "(", "x", ")", "\n", "if", "self", ".", "iw", ">=", "1", ":", "\n", "                        ", "if", "self", ".", "iw", "==", "1", "or", "self", ".", "iw", "==", "2", ":", "\n", "                            ", "x", ",", "w", "=", "self", ".", "instance_norm_layer", "(", "x", ")", "\n", "w_arr", ".", "append", "(", "w", ")", "\n", "", "else", ":", "\n", "                            ", "x", "=", "self", ".", "instance_norm_layer", "(", "x", ")", "\n", "", "", "else", ":", "\n", "                        ", "x", "=", "self", ".", "layer", "[", "1", "]", "(", "x", ")", "\n", "", "x", "=", "self", ".", "layer", "[", "2", "]", "(", "x", ")", "\n", "\n", "return", "[", "x", ",", "w_arr", "]", "\n", "\n", "\n", "", "", "self", ".", "layer0", "=", "Layer0", "(", "iw", "=", "self", ".", "args", ".", "wt_layer", "[", "2", "]", ")", "\n", "self", ".", "layer1", "=", "resnet", ".", "stage2", "\n", "self", ".", "layer2", "=", "resnet", ".", "stage3", "\n", "self", ".", "layer3", "=", "resnet", ".", "stage4", "\n", "self", ".", "layer4", "=", "Layer4", "(", "iw", "=", "self", ".", "args", ".", "wt_layer", "[", "6", "]", ")", "\n", "\n", "if", "self", ".", "variant", "==", "'D'", ":", "\n", "                ", "for", "n", ",", "m", "in", "self", ".", "layer2", ".", "named_modules", "(", ")", ":", "\n", "                    ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", "and", "m", ".", "stride", "==", "(", "2", ",", "2", ")", ":", "\n", "                        ", "m", ".", "dilation", ",", "m", ".", "padding", ",", "m", ".", "stride", "=", "(", "2", ",", "2", ")", ",", "(", "2", ",", "2", ")", ",", "(", "1", ",", "1", ")", "\n", "", "", "for", "n", ",", "m", "in", "self", ".", "layer3", ".", "named_modules", "(", ")", ":", "\n", "                    ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", "and", "m", ".", "stride", "==", "(", "2", ",", "2", ")", ":", "\n", "                        ", "m", ".", "dilation", ",", "m", ".", "padding", ",", "m", ".", "stride", "=", "(", "4", ",", "4", ")", ",", "(", "4", ",", "4", ")", ",", "(", "1", ",", "1", ")", "\n", "", "", "", "elif", "self", ".", "variant", "==", "'D16'", ":", "\n", "                ", "for", "n", ",", "m", "in", "self", ".", "layer3", ".", "named_modules", "(", ")", ":", "\n", "                    ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", "and", "m", ".", "stride", "==", "(", "2", ",", "2", ")", ":", "\n", "                        ", "m", ".", "dilation", ",", "m", ".", "padding", ",", "m", ".", "stride", "=", "(", "2", ",", "2", ")", ",", "(", "2", ",", "2", ")", ",", "(", "1", ",", "1", ")", "\n", "", "", "", "else", ":", "\n", "# raise 'unknown deepv3 variant: {}'.format(self.variant)", "\n", "                ", "print", "(", "\"Not using Dilation \"", ")", "\n", "\n", "", "", "elif", "trunk", "==", "'mnasnet_05'", "or", "trunk", "==", "'mnasnet_10'", ":", "\n", "\n", "            ", "if", "trunk", "==", "'mnasnet_05'", ":", "\n", "                ", "resnet", "=", "models", ".", "mnasnet0_5", "(", "pretrained", "=", "True", ")", "\n", "channel_1st", "=", "3", "\n", "channel_2nd", "=", "16", "\n", "channel_3rd", "=", "24", "\n", "channel_4th", "=", "48", "\n", "prev_final_channel", "=", "160", "\n", "final_channel", "=", "1280", "\n", "\n", "print", "(", "\"# of layers\"", ",", "len", "(", "resnet", ".", "layers", ")", ")", "\n", "self", ".", "layer0", "=", "nn", ".", "Sequential", "(", "resnet", ".", "layers", "[", "0", "]", ",", "resnet", ".", "layers", "[", "1", "]", ",", "resnet", ".", "layers", "[", "2", "]", ",", "\n", "resnet", ".", "layers", "[", "3", "]", ",", "resnet", ".", "layers", "[", "4", "]", ",", "resnet", ".", "layers", "[", "5", "]", ",", "resnet", ".", "layers", "[", "6", "]", ",", "resnet", ".", "layers", "[", "7", "]", ")", "# 16", "\n", "self", ".", "layer1", "=", "nn", ".", "Sequential", "(", "resnet", ".", "layers", "[", "8", "]", ",", "resnet", ".", "layers", "[", "9", "]", ")", "# 24, 40", "\n", "self", ".", "layer2", "=", "nn", ".", "Sequential", "(", "resnet", ".", "layers", "[", "10", "]", ",", "resnet", ".", "layers", "[", "11", "]", ")", "# 48, 96", "\n", "self", ".", "layer3", "=", "nn", ".", "Sequential", "(", "resnet", ".", "layers", "[", "12", "]", ",", "resnet", ".", "layers", "[", "13", "]", ")", "# 160, 320", "\n", "self", ".", "layer4", "=", "nn", ".", "Sequential", "(", "resnet", ".", "layers", "[", "14", "]", ",", "resnet", ".", "layers", "[", "15", "]", ",", "resnet", ".", "layers", "[", "16", "]", ")", "# 1280", "\n", "", "else", ":", "\n", "                ", "resnet", "=", "models", ".", "mnasnet1_0", "(", "pretrained", "=", "True", ")", "\n", "channel_1st", "=", "3", "\n", "channel_2nd", "=", "16", "\n", "channel_3rd", "=", "40", "\n", "channel_4th", "=", "96", "\n", "prev_final_channel", "=", "320", "\n", "final_channel", "=", "1280", "\n", "\n", "print", "(", "\"# of layers\"", ",", "len", "(", "resnet", ".", "layers", ")", ")", "\n", "self", ".", "layer0", "=", "nn", ".", "Sequential", "(", "resnet", ".", "layers", "[", "0", "]", ",", "resnet", ".", "layers", "[", "1", "]", ",", "resnet", ".", "layers", "[", "2", "]", ",", "\n", "resnet", ".", "layers", "[", "3", "]", ",", "resnet", ".", "layers", "[", "4", "]", ",", "resnet", ".", "layers", "[", "5", "]", ",", "resnet", ".", "layers", "[", "6", "]", ",", "resnet", ".", "layers", "[", "7", "]", ")", "# 16", "\n", "self", ".", "layer1", "=", "nn", ".", "Sequential", "(", "resnet", ".", "layers", "[", "8", "]", ",", "resnet", ".", "layers", "[", "9", "]", ")", "# 24, 40", "\n", "self", ".", "layer2", "=", "nn", ".", "Sequential", "(", "resnet", ".", "layers", "[", "10", "]", ",", "resnet", ".", "layers", "[", "11", "]", ")", "# 48, 96", "\n", "self", ".", "layer3", "=", "nn", ".", "Sequential", "(", "resnet", ".", "layers", "[", "12", "]", ",", "resnet", ".", "layers", "[", "13", "]", ")", "# 160, 320", "\n", "self", ".", "layer4", "=", "nn", ".", "Sequential", "(", "resnet", ".", "layers", "[", "14", "]", ",", "resnet", ".", "layers", "[", "15", "]", ",", "resnet", ".", "layers", "[", "16", "]", ")", "# 1280", "\n", "\n", "", "if", "self", ".", "variant", "==", "'D'", ":", "\n", "                ", "for", "n", ",", "m", "in", "self", ".", "layer2", ".", "named_modules", "(", ")", ":", "\n", "                    ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", "and", "m", ".", "stride", "==", "(", "2", ",", "2", ")", ":", "\n", "                        ", "m", ".", "dilation", ",", "m", ".", "padding", ",", "m", ".", "stride", "=", "(", "2", ",", "2", ")", ",", "(", "2", ",", "2", ")", ",", "(", "1", ",", "1", ")", "\n", "", "", "for", "n", ",", "m", "in", "self", ".", "layer3", ".", "named_modules", "(", ")", ":", "\n", "                    ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", "and", "m", ".", "stride", "==", "(", "2", ",", "2", ")", ":", "\n", "                        ", "m", ".", "dilation", ",", "m", ".", "padding", ",", "m", ".", "stride", "=", "(", "4", ",", "4", ")", ",", "(", "4", ",", "4", ")", ",", "(", "1", ",", "1", ")", "\n", "", "", "", "elif", "self", ".", "variant", "==", "'D16'", ":", "\n", "                ", "for", "n", ",", "m", "in", "self", ".", "layer3", ".", "named_modules", "(", ")", ":", "\n", "                    ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", "and", "m", ".", "stride", "==", "(", "2", ",", "2", ")", ":", "\n", "                        ", "m", ".", "dilation", ",", "m", ".", "padding", ",", "m", ".", "stride", "=", "(", "2", ",", "2", ")", ",", "(", "2", ",", "2", ")", ",", "(", "1", ",", "1", ")", "\n", "", "", "", "else", ":", "\n", "# raise 'unknown deepv3 variant: {}'.format(self.variant)", "\n", "                ", "print", "(", "\"Not using Dilation \"", ")", "\n", "", "", "elif", "trunk", "==", "'mobilenetv2'", ":", "\n", "            ", "channel_1st", "=", "3", "\n", "channel_2nd", "=", "16", "\n", "channel_3rd", "=", "32", "\n", "channel_4th", "=", "64", "\n", "\n", "# prev_final_channel = 160", "\n", "prev_final_channel", "=", "320", "\n", "\n", "final_channel", "=", "1280", "\n", "resnet", "=", "Mobilenet", ".", "mobilenet_v2", "(", "pretrained", "=", "True", ",", "\n", "iw", "=", "self", ".", "args", ".", "wt_layer", ")", "\n", "self", ".", "layer0", "=", "nn", ".", "Sequential", "(", "resnet", ".", "features", "[", "0", "]", ",", "\n", "resnet", ".", "features", "[", "1", "]", ")", "\n", "self", ".", "layer1", "=", "nn", ".", "Sequential", "(", "resnet", ".", "features", "[", "2", "]", ",", "resnet", ".", "features", "[", "3", "]", ",", "\n", "resnet", ".", "features", "[", "4", "]", ",", "resnet", ".", "features", "[", "5", "]", ",", "resnet", ".", "features", "[", "6", "]", ")", "\n", "self", ".", "layer2", "=", "nn", ".", "Sequential", "(", "resnet", ".", "features", "[", "7", "]", ",", "resnet", ".", "features", "[", "8", "]", ",", "resnet", ".", "features", "[", "9", "]", ",", "resnet", ".", "features", "[", "10", "]", ")", "\n", "\n", "# self.layer3 = nn.Sequential(resnet.features[11], resnet.features[12], resnet.features[13], resnet.features[14], resnet.features[15], resnet.features[16])", "\n", "# self.layer4 = nn.Sequential(resnet.features[17], resnet.features[18])", "\n", "\n", "self", ".", "layer3", "=", "nn", ".", "Sequential", "(", "resnet", ".", "features", "[", "11", "]", ",", "resnet", ".", "features", "[", "12", "]", ",", "resnet", ".", "features", "[", "13", "]", ",", "\n", "resnet", ".", "features", "[", "14", "]", ",", "resnet", ".", "features", "[", "15", "]", ",", "resnet", ".", "features", "[", "16", "]", ",", "\n", "resnet", ".", "features", "[", "17", "]", ")", "\n", "self", ".", "layer4", "=", "nn", ".", "Sequential", "(", "resnet", ".", "features", "[", "18", "]", ")", "\n", "\n", "if", "self", ".", "variant", "==", "'D'", ":", "\n", "                ", "for", "n", ",", "m", "in", "self", ".", "layer2", ".", "named_modules", "(", ")", ":", "\n", "                    ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", "and", "m", ".", "stride", "==", "(", "2", ",", "2", ")", ":", "\n", "                        ", "m", ".", "dilation", ",", "m", ".", "padding", ",", "m", ".", "stride", "=", "(", "2", ",", "2", ")", ",", "(", "2", ",", "2", ")", ",", "(", "1", ",", "1", ")", "\n", "", "", "for", "n", ",", "m", "in", "self", ".", "layer3", ".", "named_modules", "(", ")", ":", "\n", "                    ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", "and", "m", ".", "stride", "==", "(", "2", ",", "2", ")", ":", "\n", "                        ", "m", ".", "dilation", ",", "m", ".", "padding", ",", "m", ".", "stride", "=", "(", "4", ",", "4", ")", ",", "(", "4", ",", "4", ")", ",", "(", "1", ",", "1", ")", "\n", "", "", "", "elif", "self", ".", "variant", "==", "'D16'", ":", "\n", "                ", "for", "n", ",", "m", "in", "self", ".", "layer3", ".", "named_modules", "(", ")", ":", "\n", "                    ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", "and", "m", ".", "stride", "==", "(", "2", ",", "2", ")", ":", "\n", "                        ", "m", ".", "dilation", ",", "m", ".", "padding", ",", "m", ".", "stride", "=", "(", "2", ",", "2", ")", ",", "(", "2", ",", "2", ")", ",", "(", "1", ",", "1", ")", "\n", "", "", "", "else", ":", "\n", "# raise 'unknown deepv3 variant: {}'.format(self.variant)", "\n", "                ", "print", "(", "\"Not using Dilation \"", ")", "\n", "", "", "else", ":", "\n", "            ", "channel_1st", "=", "3", "\n", "channel_2nd", "=", "64", "\n", "channel_3rd", "=", "256", "\n", "channel_4th", "=", "512", "\n", "prev_final_channel", "=", "1024", "\n", "final_channel", "=", "2048", "\n", "\n", "if", "trunk", "==", "'resnet-18'", ":", "\n", "                ", "channel_1st", "=", "3", "\n", "channel_2nd", "=", "64", "\n", "channel_3rd", "=", "64", "\n", "channel_4th", "=", "128", "\n", "prev_final_channel", "=", "256", "\n", "final_channel", "=", "512", "\n", "resnet", "=", "Resnet", ".", "resnet18", "(", "wt_layer", "=", "self", ".", "args", ".", "wt_layer", ")", "\n", "resnet", ".", "layer0", "=", "nn", ".", "Sequential", "(", "resnet", ".", "conv1", ",", "resnet", ".", "bn1", ",", "resnet", ".", "relu", ",", "resnet", ".", "maxpool", ")", "\n", "", "elif", "trunk", "==", "'resnet-50'", ":", "\n", "                ", "resnet", "=", "Resnet", ".", "resnet50", "(", "wt_layer", "=", "self", ".", "args", ".", "wt_layer", ")", "\n", "resnet", ".", "layer0", "=", "nn", ".", "Sequential", "(", "resnet", ".", "conv1", ",", "resnet", ".", "bn1", ",", "resnet", ".", "relu", ",", "resnet", ".", "maxpool", ")", "\n", "", "elif", "trunk", "==", "'resnet-101'", ":", "# three 3 X 3", "\n", "                ", "resnet", "=", "Resnet", ".", "resnet101", "(", "pretrained", "=", "True", ",", "wt_layer", "=", "self", ".", "args", ".", "wt_layer", ")", "\n", "resnet", ".", "layer0", "=", "nn", ".", "Sequential", "(", "resnet", ".", "conv1", ",", "resnet", ".", "bn1", ",", "resnet", ".", "relu1", ",", "\n", "resnet", ".", "conv2", ",", "resnet", ".", "bn2", ",", "resnet", ".", "relu2", ",", "\n", "resnet", ".", "conv3", ",", "resnet", ".", "bn3", ",", "resnet", ".", "relu3", ",", "resnet", ".", "maxpool", ")", "\n", "", "elif", "trunk", "==", "'resnet-152'", ":", "\n", "                ", "resnet", "=", "Resnet", ".", "resnet152", "(", ")", "\n", "resnet", ".", "layer0", "=", "nn", ".", "Sequential", "(", "resnet", ".", "conv1", ",", "resnet", ".", "bn1", ",", "resnet", ".", "relu", ",", "resnet", ".", "maxpool", ")", "\n", "", "elif", "trunk", "==", "'resnext-50'", ":", "\n", "                ", "resnet", "=", "models", ".", "resnext50_32x4d", "(", "pretrained", "=", "True", ")", "\n", "resnet", ".", "layer0", "=", "nn", ".", "Sequential", "(", "resnet", ".", "conv1", ",", "resnet", ".", "bn1", ",", "resnet", ".", "relu", ",", "resnet", ".", "maxpool", ")", "\n", "", "elif", "trunk", "==", "'resnext-101'", ":", "\n", "                ", "resnet", "=", "models", ".", "resnext101_32x8d", "(", "pretrained", "=", "True", ")", "\n", "resnet", ".", "layer0", "=", "nn", ".", "Sequential", "(", "resnet", ".", "conv1", ",", "resnet", ".", "bn1", ",", "resnet", ".", "relu", ",", "resnet", ".", "maxpool", ")", "\n", "", "elif", "trunk", "==", "'wide_resnet-50'", ":", "\n", "                ", "resnet", "=", "models", ".", "wide_resnet50_2", "(", "pretrained", "=", "True", ")", "\n", "resnet", ".", "layer0", "=", "nn", ".", "Sequential", "(", "resnet", ".", "conv1", ",", "resnet", ".", "bn1", ",", "resnet", ".", "relu", ",", "resnet", ".", "maxpool", ")", "\n", "", "elif", "trunk", "==", "'wide_resnet-101'", ":", "\n", "                ", "resnet", "=", "models", ".", "wide_resnet101_2", "(", "pretrained", "=", "True", ")", "\n", "resnet", ".", "layer0", "=", "nn", ".", "Sequential", "(", "resnet", ".", "conv1", ",", "resnet", ".", "bn1", ",", "resnet", ".", "relu", ",", "resnet", ".", "maxpool", ")", "\n", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "\"Not a valid network arch\"", ")", "\n", "\n", "", "self", ".", "layer0", "=", "resnet", ".", "layer0", "\n", "self", ".", "layer1", ",", "self", ".", "layer2", ",", "self", ".", "layer3", ",", "self", ".", "layer4", "=", "resnet", ".", "layer1", ",", "resnet", ".", "layer2", ",", "resnet", ".", "layer3", ",", "resnet", ".", "layer4", "\n", "\n", "if", "self", ".", "variant", "==", "'D'", ":", "\n", "                ", "for", "n", ",", "m", "in", "self", ".", "layer3", ".", "named_modules", "(", ")", ":", "\n", "                    ", "if", "'conv2'", "in", "n", ":", "\n", "                        ", "m", ".", "dilation", ",", "m", ".", "padding", ",", "m", ".", "stride", "=", "(", "2", ",", "2", ")", ",", "(", "2", ",", "2", ")", ",", "(", "1", ",", "1", ")", "\n", "", "elif", "'downsample.0'", "in", "n", ":", "\n", "                        ", "m", ".", "stride", "=", "(", "1", ",", "1", ")", "\n", "", "", "for", "n", ",", "m", "in", "self", ".", "layer4", ".", "named_modules", "(", ")", ":", "\n", "                    ", "if", "'conv2'", "in", "n", ":", "\n", "                        ", "m", ".", "dilation", ",", "m", ".", "padding", ",", "m", ".", "stride", "=", "(", "4", ",", "4", ")", ",", "(", "4", ",", "4", ")", ",", "(", "1", ",", "1", ")", "\n", "", "elif", "'downsample.0'", "in", "n", ":", "\n", "                        ", "m", ".", "stride", "=", "(", "1", ",", "1", ")", "\n", "", "", "", "elif", "self", ".", "variant", "==", "'D4'", ":", "\n", "                ", "for", "n", ",", "m", "in", "self", ".", "layer2", ".", "named_modules", "(", ")", ":", "\n", "                    ", "if", "'conv2'", "in", "n", ":", "\n", "                        ", "m", ".", "dilation", ",", "m", ".", "padding", ",", "m", ".", "stride", "=", "(", "2", ",", "2", ")", ",", "(", "2", ",", "2", ")", ",", "(", "1", ",", "1", ")", "\n", "", "elif", "'downsample.0'", "in", "n", ":", "\n", "                        ", "m", ".", "stride", "=", "(", "1", ",", "1", ")", "\n", "", "", "for", "n", ",", "m", "in", "self", ".", "layer3", ".", "named_modules", "(", ")", ":", "\n", "                    ", "if", "'conv2'", "in", "n", ":", "\n", "                        ", "m", ".", "dilation", ",", "m", ".", "padding", ",", "m", ".", "stride", "=", "(", "4", ",", "4", ")", ",", "(", "4", ",", "4", ")", ",", "(", "1", ",", "1", ")", "\n", "", "elif", "'downsample.0'", "in", "n", ":", "\n", "                        ", "m", ".", "stride", "=", "(", "1", ",", "1", ")", "\n", "", "", "for", "n", ",", "m", "in", "self", ".", "layer4", ".", "named_modules", "(", ")", ":", "\n", "                    ", "if", "'conv2'", "in", "n", ":", "\n", "                        ", "m", ".", "dilation", ",", "m", ".", "padding", ",", "m", ".", "stride", "=", "(", "8", ",", "8", ")", ",", "(", "8", ",", "8", ")", ",", "(", "1", ",", "1", ")", "\n", "", "elif", "'downsample.0'", "in", "n", ":", "\n", "                        ", "m", ".", "stride", "=", "(", "1", ",", "1", ")", "\n", "", "", "", "elif", "self", ".", "variant", "==", "'D16'", ":", "\n", "                ", "for", "n", ",", "m", "in", "self", ".", "layer4", ".", "named_modules", "(", ")", ":", "\n", "                    ", "if", "'conv2'", "in", "n", ":", "\n", "                        ", "m", ".", "dilation", ",", "m", ".", "padding", ",", "m", ".", "stride", "=", "(", "2", ",", "2", ")", ",", "(", "2", ",", "2", ")", ",", "(", "1", ",", "1", ")", "\n", "", "elif", "'downsample.0'", "in", "n", ":", "\n", "                        ", "m", ".", "stride", "=", "(", "1", ",", "1", ")", "\n", "", "", "", "else", ":", "\n", "# raise 'unknown deepv3 variant: {}'.format(self.variant)", "\n", "                ", "print", "(", "\"Not using Dilation \"", ")", "\n", "\n", "", "", "if", "self", ".", "variant", "==", "'D'", ":", "\n", "            ", "os", "=", "8", "\n", "", "elif", "self", ".", "variant", "==", "'D4'", ":", "\n", "            ", "os", "=", "4", "\n", "", "elif", "self", ".", "variant", "==", "'D16'", ":", "\n", "            ", "os", "=", "16", "\n", "", "else", ":", "\n", "            ", "os", "=", "32", "\n", "\n", "", "self", ".", "output_stride", "=", "os", "\n", "self", ".", "aspp", "=", "_AtrousSpatialPyramidPoolingModule", "(", "final_channel", ",", "256", ",", "\n", "output_stride", "=", "os", ")", "\n", "\n", "self", ".", "bot_fine", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "channel_3rd", ",", "48", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "Norm2d", "(", "48", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "\n", "self", ".", "bot_aspp", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "1280", ",", "256", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "Norm2d", "(", "256", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "\n", "self", ".", "final1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "304", ",", "256", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "Norm2d", "(", "256", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "256", ",", "256", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "Norm2d", "(", "256", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "\n", "self", ".", "final2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "256", ",", "num_classes", ",", "kernel_size", "=", "1", ",", "bias", "=", "True", ")", ")", "\n", "\n", "self", ".", "dsn", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "prev_final_channel", ",", "512", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "Norm2d", "(", "512", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Dropout2d", "(", "0.1", ")", ",", "\n", "nn", ".", "Conv2d", "(", "512", ",", "num_classes", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "True", ")", "\n", ")", "\n", "initialize_weights", "(", "self", ".", "dsn", ")", "\n", "\n", "initialize_weights", "(", "self", ".", "aspp", ")", "\n", "initialize_weights", "(", "self", ".", "bot_aspp", ")", "\n", "initialize_weights", "(", "self", ".", "bot_fine", ")", "\n", "initialize_weights", "(", "self", ".", "final1", ")", "\n", "initialize_weights", "(", "self", ".", "final2", ")", "\n", "\n", "# Setting the flags", "\n", "self", ".", "eps", "=", "1e-5", "\n", "self", ".", "whitening", "=", "False", "\n", "\n", "if", "trunk", "==", "'resnet-101'", ":", "\n", "            ", "self", ".", "three_input_layer", "=", "True", "\n", "in_channel_list", "=", "[", "64", ",", "64", ",", "128", ",", "256", ",", "512", ",", "1024", ",", "2048", "]", "# 8128, 32640, 130816", "\n", "out_channel_list", "=", "[", "32", ",", "32", ",", "64", ",", "128", ",", "256", ",", "512", ",", "1024", "]", "\n", "", "elif", "trunk", "==", "'resnet-18'", ":", "\n", "            ", "self", ".", "three_input_layer", "=", "False", "\n", "in_channel_list", "=", "[", "0", ",", "0", ",", "64", ",", "64", ",", "128", ",", "256", ",", "512", "]", "# 8128, 32640, 130816", "\n", "out_channel_list", "=", "[", "0", ",", "0", ",", "32", ",", "32", ",", "64", ",", "128", ",", "256", "]", "\n", "", "elif", "trunk", "==", "'shufflenetv2'", ":", "\n", "            ", "self", ".", "three_input_layer", "=", "False", "\n", "in_channel_list", "=", "[", "0", ",", "0", ",", "24", ",", "116", ",", "232", ",", "464", ",", "1024", "]", "\n", "", "elif", "trunk", "==", "'mobilenetv2'", ":", "\n", "            ", "self", ".", "three_input_layer", "=", "False", "\n", "in_channel_list", "=", "[", "0", ",", "0", ",", "16", ",", "32", ",", "64", ",", "320", ",", "1280", "]", "\n", "", "else", ":", "# ResNet-50", "\n", "            ", "self", ".", "three_input_layer", "=", "False", "\n", "in_channel_list", "=", "[", "0", ",", "0", ",", "64", ",", "256", ",", "512", ",", "1024", ",", "2048", "]", "# 8128, 32640, 130816", "\n", "out_channel_list", "=", "[", "0", ",", "0", ",", "32", ",", "128", ",", "256", ",", "512", ",", "1024", "]", "\n", "\n", "", "self", ".", "cov_matrix_layer", "=", "[", "]", "\n", "self", ".", "cov_type", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "args", ".", "wt_layer", ")", ")", ":", "\n", "            ", "if", "self", ".", "args", ".", "wt_layer", "[", "i", "]", ">", "0", ":", "\n", "                ", "self", ".", "whitening", "=", "True", "\n", "if", "self", ".", "args", ".", "wt_layer", "[", "i", "]", "==", "1", ":", "\n", "                    ", "self", ".", "cov_matrix_layer", ".", "append", "(", "CovMatrix_IRW", "(", "dim", "=", "in_channel_list", "[", "i", "]", ",", "relax_denom", "=", "self", ".", "args", ".", "relax_denom", ")", ")", "\n", "self", ".", "cov_type", ".", "append", "(", "self", ".", "args", ".", "wt_layer", "[", "i", "]", ")", "\n", "", "elif", "self", ".", "args", ".", "wt_layer", "[", "i", "]", "==", "2", ":", "\n", "                    ", "self", ".", "cov_matrix_layer", ".", "append", "(", "CovMatrix_ISW", "(", "dim", "=", "in_channel_list", "[", "i", "]", ",", "relax_denom", "=", "self", ".", "args", ".", "relax_denom", ",", "clusters", "=", "self", ".", "args", ".", "clusters", ")", ")", "\n", "self", ".", "cov_type", ".", "append", "(", "self", ".", "args", ".", "wt_layer", "[", "i", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.network.deepv3.DeepV3Plus.set_mask_matrix": [[467, 470], ["range", "len", "deepv3.DeepV3Plus.cov_matrix_layer[].set_mask_matrix"], "methods", ["home.repos.pwc.inspect_result.shachoi_RobustNet.network.deepv3.DeepV3Plus.set_mask_matrix"], ["", "", "", "", "def", "set_mask_matrix", "(", "self", ")", ":", "\n", "        ", "for", "index", "in", "range", "(", "len", "(", "self", ".", "cov_matrix_layer", ")", ")", ":", "\n", "            ", "self", ".", "cov_matrix_layer", "[", "index", "]", ".", "set_mask_matrix", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.network.deepv3.DeepV3Plus.reset_mask_matrix": [[472, 475], ["range", "len", "deepv3.DeepV3Plus.cov_matrix_layer[].reset_mask_matrix"], "methods", ["home.repos.pwc.inspect_result.shachoi_RobustNet.network.deepv3.DeepV3Plus.reset_mask_matrix"], ["", "", "def", "reset_mask_matrix", "(", "self", ")", ":", "\n", "        ", "for", "index", "in", "range", "(", "len", "(", "self", ".", "cov_matrix_layer", ")", ")", ":", "\n", "            ", "self", ".", "cov_matrix_layer", "[", "index", "]", ".", "reset_mask_matrix", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.network.deepv3.DeepV3Plus.forward": [[477, 597], ["torch.cat.size", "deepv3.DeepV3Plus.layer1", "deepv3.DeepV3Plus.layer2", "deepv3.DeepV3Plus.layer3", "deepv3.DeepV3Plus.layer4", "deepv3.DeepV3Plus.aspp", "deepv3.DeepV3Plus.bot_aspp", "deepv3.DeepV3Plus.bot_fine", "network.mynn.Upsample", "torch.cat", "deepv3.DeepV3Plus.final1", "deepv3.DeepV3Plus.final2", "network.mynn.Upsample", "torch.cat", "deepv3.DeepV3Plus.layer0", "enumerate", "deepv3.DeepV3Plus.criterion", "deepv3.DeepV3Plus.dsn", "aux_gts.squeeze().long.squeeze().long.unsqueeze().float", "torch.nn.functional.interpolate", "aux_gts.squeeze().long.squeeze().long.squeeze().long", "deepv3.DeepV3Plus.criterion_aux", "f_map.contiguous().view.contiguous().view.contiguous().view", "deepv3.DeepV3Plus.cov_matrix_layer[].get_eye_matrix", "deepv3.DeepV3Plus.cov_matrix_layer[].set_variance_of_covariance", "low_level.size", "torch.FloatTensor().cuda", "aux_gts.squeeze().long.squeeze().long.dim", "return_loss.append", "return_loss.append", "w_arr.append", "w_arr.append", "w_arr.append", "w_arr.append", "torch.bmm().div", "torch.var", "enumerate", "len", "aux_gts.squeeze().long.squeeze().long.unsqueeze", "aux_gts.squeeze().long.squeeze().long.squeeze", "network.instance_whitening.get_covariance_matrix", "f_cor_arr.append", "network.instance_whitening.get_covariance_matrix", "f_cor_arr.append", "f_map.contiguous().view.contiguous().view.contiguous", "torch.FloatTensor", "deepv3.DeepV3Plus.cov_matrix_layer[].get_mask_matrix", "network.instance_whitening.instance_whitening_loss", "torch.bmm", "f_map.contiguous().view.contiguous().view.transpose"], "methods", ["home.repos.pwc.inspect_result.shachoi_RobustNet.network.mynn.Upsample", "home.repos.pwc.inspect_result.shachoi_RobustNet.network.mynn.Upsample", "home.repos.pwc.inspect_result.shachoi_RobustNet.network.cov_settings.CovMatrix_ISW.get_eye_matrix", "home.repos.pwc.inspect_result.shachoi_RobustNet.network.cov_settings.CovMatrix_ISW.set_variance_of_covariance", "home.repos.pwc.inspect_result.shachoi_RobustNet.network.instance_whitening.get_covariance_matrix", "home.repos.pwc.inspect_result.shachoi_RobustNet.network.instance_whitening.get_covariance_matrix", "home.repos.pwc.inspect_result.shachoi_RobustNet.network.cov_settings.CovMatrix_IRW.get_mask_matrix", "home.repos.pwc.inspect_result.shachoi_RobustNet.network.instance_whitening.instance_whitening_loss"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "gts", "=", "None", ",", "aux_gts", "=", "None", ",", "img_gt", "=", "None", ",", "visualize", "=", "False", ",", "cal_covstat", "=", "False", ",", "apply_wtloss", "=", "True", ")", ":", "\n", "        ", "w_arr", "=", "[", "]", "\n", "\n", "if", "cal_covstat", ":", "\n", "            ", "x", "=", "torch", ".", "cat", "(", "x", ",", "dim", "=", "0", ")", "\n", "\n", "", "x_size", "=", "x", ".", "size", "(", ")", "# 800", "\n", "\n", "if", "self", ".", "trunk", "==", "'mobilenetv2'", "or", "self", ".", "trunk", "==", "'shufflenetv2'", ":", "\n", "            ", "x_tuple", "=", "self", ".", "layer0", "(", "[", "x", ",", "w_arr", "]", ")", "\n", "x", "=", "x_tuple", "[", "0", "]", "\n", "w_arr", "=", "x_tuple", "[", "1", "]", "\n", "", "else", ":", "# ResNet", "\n", "            ", "if", "self", ".", "three_input_layer", ":", "\n", "                ", "x", "=", "self", ".", "layer0", "[", "0", "]", "(", "x", ")", "\n", "if", "self", ".", "args", ".", "wt_layer", "[", "0", "]", "==", "1", "or", "self", ".", "args", ".", "wt_layer", "[", "0", "]", "==", "2", ":", "\n", "                    ", "x", ",", "w", "=", "self", ".", "layer0", "[", "1", "]", "(", "x", ")", "\n", "w_arr", ".", "append", "(", "w", ")", "\n", "", "else", ":", "\n", "                    ", "x", "=", "self", ".", "layer0", "[", "1", "]", "(", "x", ")", "\n", "", "x", "=", "self", ".", "layer0", "[", "2", "]", "(", "x", ")", "\n", "x", "=", "self", ".", "layer0", "[", "3", "]", "(", "x", ")", "\n", "if", "self", ".", "args", ".", "wt_layer", "[", "1", "]", "==", "1", "or", "self", ".", "args", ".", "wt_layer", "[", "1", "]", "==", "2", ":", "\n", "                    ", "x", ",", "w", "=", "self", ".", "layer0", "[", "4", "]", "(", "x", ")", "\n", "w_arr", ".", "append", "(", "w", ")", "\n", "", "else", ":", "\n", "                    ", "x", "=", "self", ".", "layer0", "[", "4", "]", "(", "x", ")", "\n", "", "x", "=", "self", ".", "layer0", "[", "5", "]", "(", "x", ")", "\n", "x", "=", "self", ".", "layer0", "[", "6", "]", "(", "x", ")", "\n", "if", "self", ".", "args", ".", "wt_layer", "[", "2", "]", "==", "1", "or", "self", ".", "args", ".", "wt_layer", "[", "2", "]", "==", "2", ":", "\n", "                    ", "x", ",", "w", "=", "self", ".", "layer0", "[", "7", "]", "(", "x", ")", "\n", "w_arr", ".", "append", "(", "w", ")", "\n", "", "else", ":", "\n", "                    ", "x", "=", "self", ".", "layer0", "[", "7", "]", "(", "x", ")", "\n", "", "x", "=", "self", ".", "layer0", "[", "8", "]", "(", "x", ")", "\n", "x", "=", "self", ".", "layer0", "[", "9", "]", "(", "x", ")", "\n", "", "else", ":", "# Single Input Layer", "\n", "                ", "x", "=", "self", ".", "layer0", "[", "0", "]", "(", "x", ")", "\n", "if", "self", ".", "args", ".", "wt_layer", "[", "2", "]", "==", "1", "or", "self", ".", "args", ".", "wt_layer", "[", "2", "]", "==", "2", ":", "\n", "                    ", "x", ",", "w", "=", "self", ".", "layer0", "[", "1", "]", "(", "x", ")", "\n", "w_arr", ".", "append", "(", "w", ")", "\n", "", "else", ":", "\n", "                    ", "x", "=", "self", ".", "layer0", "[", "1", "]", "(", "x", ")", "\n", "", "x", "=", "self", ".", "layer0", "[", "2", "]", "(", "x", ")", "\n", "x", "=", "self", ".", "layer0", "[", "3", "]", "(", "x", ")", "\n", "\n", "", "", "x_tuple", "=", "self", ".", "layer1", "(", "[", "x", ",", "w_arr", "]", ")", "# 400", "\n", "low_level", "=", "x_tuple", "[", "0", "]", "\n", "\n", "x_tuple", "=", "self", ".", "layer2", "(", "x_tuple", ")", "# 100", "\n", "x_tuple", "=", "self", ".", "layer3", "(", "x_tuple", ")", "# 100", "\n", "aux_out", "=", "x_tuple", "[", "0", "]", "\n", "x_tuple", "=", "self", ".", "layer4", "(", "x_tuple", ")", "# 100", "\n", "x", "=", "x_tuple", "[", "0", "]", "\n", "w_arr", "=", "x_tuple", "[", "1", "]", "\n", "\n", "if", "cal_covstat", ":", "\n", "            ", "for", "index", ",", "f_map", "in", "enumerate", "(", "w_arr", ")", ":", "\n", "# Instance Whitening", "\n", "                ", "B", ",", "C", ",", "H", ",", "W", "=", "f_map", ".", "shape", "# i-th feature size (B X C X H X W)", "\n", "HW", "=", "H", "*", "W", "\n", "f_map", "=", "f_map", ".", "contiguous", "(", ")", ".", "view", "(", "B", ",", "C", ",", "-", "1", ")", "# B X C X H X W > B X C X (H X W)", "\n", "eye", ",", "reverse_eye", "=", "self", ".", "cov_matrix_layer", "[", "index", "]", ".", "get_eye_matrix", "(", ")", "\n", "f_cor", "=", "torch", ".", "bmm", "(", "f_map", ",", "f_map", ".", "transpose", "(", "1", ",", "2", ")", ")", ".", "div", "(", "HW", "-", "1", ")", "+", "(", "self", ".", "eps", "*", "eye", ")", "# B X C X C / HW", "\n", "off_diag_elements", "=", "f_cor", "*", "reverse_eye", "\n", "#print(\"here\", off_diag_elements.shape)", "\n", "self", ".", "cov_matrix_layer", "[", "index", "]", ".", "set_variance_of_covariance", "(", "torch", ".", "var", "(", "off_diag_elements", ",", "dim", "=", "0", ")", ")", "\n", "", "return", "0", "\n", "\n", "", "x", "=", "self", ".", "aspp", "(", "x", ")", "\n", "dec0_up", "=", "self", ".", "bot_aspp", "(", "x", ")", "\n", "\n", "dec0_fine", "=", "self", ".", "bot_fine", "(", "low_level", ")", "\n", "dec0_up", "=", "Upsample", "(", "dec0_up", ",", "low_level", ".", "size", "(", ")", "[", "2", ":", "]", ")", "\n", "dec0", "=", "[", "dec0_fine", ",", "dec0_up", "]", "\n", "dec0", "=", "torch", ".", "cat", "(", "dec0", ",", "1", ")", "\n", "dec1", "=", "self", ".", "final1", "(", "dec0", ")", "\n", "dec2", "=", "self", ".", "final2", "(", "dec1", ")", "\n", "main_out", "=", "Upsample", "(", "dec2", ",", "x_size", "[", "2", ":", "]", ")", "\n", "\n", "if", "self", ".", "training", ":", "\n", "            ", "loss1", "=", "self", ".", "criterion", "(", "main_out", ",", "gts", ")", "\n", "\n", "if", "self", ".", "args", ".", "use_wtloss", ":", "\n", "                ", "wt_loss", "=", "torch", ".", "FloatTensor", "(", "[", "0", "]", ")", ".", "cuda", "(", ")", "\n", "if", "apply_wtloss", ":", "\n", "                    ", "for", "index", ",", "f_map", "in", "enumerate", "(", "w_arr", ")", ":", "\n", "                        ", "eye", ",", "mask_matrix", ",", "margin", ",", "num_remove_cov", "=", "self", ".", "cov_matrix_layer", "[", "index", "]", ".", "get_mask_matrix", "(", ")", "\n", "loss", "=", "instance_whitening_loss", "(", "f_map", ",", "eye", ",", "mask_matrix", ",", "margin", ",", "num_remove_cov", ")", "\n", "wt_loss", "=", "wt_loss", "+", "loss", "\n", "", "", "wt_loss", "=", "wt_loss", "/", "len", "(", "w_arr", ")", "\n", "\n", "", "aux_out", "=", "self", ".", "dsn", "(", "aux_out", ")", "\n", "if", "aux_gts", ".", "dim", "(", ")", "==", "1", ":", "\n", "                ", "aux_gts", "=", "gts", "\n", "", "aux_gts", "=", "aux_gts", ".", "unsqueeze", "(", "1", ")", ".", "float", "(", ")", "\n", "aux_gts", "=", "nn", ".", "functional", ".", "interpolate", "(", "aux_gts", ",", "size", "=", "aux_out", ".", "shape", "[", "2", ":", "]", ",", "mode", "=", "'nearest'", ")", "\n", "aux_gts", "=", "aux_gts", ".", "squeeze", "(", "1", ")", ".", "long", "(", ")", "\n", "loss2", "=", "self", ".", "criterion_aux", "(", "aux_out", ",", "aux_gts", ")", "\n", "\n", "return_loss", "=", "[", "loss1", ",", "loss2", "]", "\n", "if", "self", ".", "args", ".", "use_wtloss", ":", "\n", "                ", "return_loss", ".", "append", "(", "wt_loss", ")", "\n", "\n", "", "if", "self", ".", "args", ".", "use_wtloss", "and", "visualize", ":", "\n", "                ", "f_cor_arr", "=", "[", "]", "\n", "for", "f_map", "in", "w_arr", ":", "\n", "                    ", "f_cor", ",", "_", "=", "get_covariance_matrix", "(", "f_map", ")", "\n", "f_cor_arr", ".", "append", "(", "f_cor", ")", "\n", "", "return_loss", ".", "append", "(", "f_cor_arr", ")", "\n", "", "return", "return_loss", "\n", "", "else", ":", "\n", "            ", "if", "visualize", ":", "\n", "                ", "f_cor_arr", "=", "[", "]", "\n", "for", "f_map", "in", "w_arr", ":", "\n", "                    ", "f_cor", ",", "_", "=", "get_covariance_matrix", "(", "f_map", ")", "\n", "f_cor_arr", ".", "append", "(", "f_cor", ")", "\n", "", "return", "main_out", ",", "f_cor_arr", "\n", "", "else", ":", "\n", "                ", "return", "main_out", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.network.deepv3.get_final_layer": [[599, 602], ["network.mynn.unfreeze_weights"], "function", ["home.repos.pwc.inspect_result.shachoi_RobustNet.network.mynn.unfreeze_weights"], ["", "", "", "", "def", "get_final_layer", "(", "model", ")", ":", "\n", "    ", "unfreeze_weights", "(", "model", ".", "final", ")", "\n", "return", "model", ".", "final", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.network.deepv3.DeepR18V3PlusD": [[604, 611], ["print", "deepv3.DeepV3Plus"], "function", ["None"], ["", "def", "DeepR18V3PlusD", "(", "args", ",", "num_classes", ",", "criterion", ",", "criterion_aux", ")", ":", "\n", "    ", "\"\"\"\n    Resnet 18 Based Network\n    \"\"\"", "\n", "print", "(", "\"Model : DeepLabv3+, Backbone : ResNet-18\"", ")", "\n", "return", "DeepV3Plus", "(", "num_classes", ",", "trunk", "=", "'resnet-18'", ",", "criterion", "=", "criterion", ",", "criterion_aux", "=", "criterion_aux", ",", "\n", "variant", "=", "'D32'", ",", "skip", "=", "'m1'", ",", "args", "=", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.network.deepv3.DeepR50V3PlusD_OS8": [[613, 620], ["print", "deepv3.DeepV3Plus"], "function", ["None"], ["", "def", "DeepR50V3PlusD_OS8", "(", "args", ",", "num_classes", ",", "criterion", ",", "criterion_aux", ")", ":", "\n", "    ", "\"\"\"\n    Resnet 50 Based Network\n    \"\"\"", "\n", "print", "(", "\"Model : DeepLabv3+, Backbone : ResNet-50\"", ")", "\n", "return", "DeepV3Plus", "(", "num_classes", ",", "trunk", "=", "'resnet-50'", ",", "criterion", "=", "criterion", ",", "criterion_aux", "=", "criterion_aux", ",", "\n", "variant", "=", "'D'", ",", "skip", "=", "'m1'", ",", "args", "=", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.network.deepv3.DeepR50V3PlusD": [[621, 628], ["print", "deepv3.DeepV3Plus"], "function", ["None"], ["", "def", "DeepR50V3PlusD", "(", "args", ",", "num_classes", ",", "criterion", ",", "criterion_aux", ")", ":", "\n", "    ", "\"\"\"\n    Resnet 50 Based Network\n    \"\"\"", "\n", "print", "(", "\"Model : DeepLabv3+, Backbone : ResNet-50\"", ")", "\n", "return", "DeepV3Plus", "(", "num_classes", ",", "trunk", "=", "'resnet-50'", ",", "criterion", "=", "criterion", ",", "criterion_aux", "=", "criterion_aux", ",", "\n", "variant", "=", "'D16'", ",", "skip", "=", "'m1'", ",", "args", "=", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.network.deepv3.DeepR101V3PlusD": [[629, 636], ["print", "deepv3.DeepV3Plus"], "function", ["None"], ["", "def", "DeepR101V3PlusD", "(", "args", ",", "num_classes", ",", "criterion", ",", "criterion_aux", ")", ":", "\n", "    ", "\"\"\"\n    Resnet 101 Based Network\n    \"\"\"", "\n", "print", "(", "\"Model : DeepLabv3+, Backbone : ResNet-101\"", ")", "\n", "return", "DeepV3Plus", "(", "num_classes", ",", "trunk", "=", "'resnet-101'", ",", "criterion", "=", "criterion", ",", "criterion_aux", "=", "criterion_aux", ",", "\n", "variant", "=", "'D16'", ",", "skip", "=", "'m1'", ",", "args", "=", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.network.deepv3.DeepR101V3PlusD_OS8": [[637, 644], ["print", "deepv3.DeepV3Plus"], "function", ["None"], ["", "def", "DeepR101V3PlusD_OS8", "(", "args", ",", "num_classes", ",", "criterion", ",", "criterion_aux", ")", ":", "\n", "    ", "\"\"\"\n    Resnet 101 Based Network\n    \"\"\"", "\n", "print", "(", "\"Model : DeepLabv3+, Backbone : ResNet-101\"", ")", "\n", "return", "DeepV3Plus", "(", "num_classes", ",", "trunk", "=", "'resnet-101'", ",", "criterion", "=", "criterion", ",", "criterion_aux", "=", "criterion_aux", ",", "\n", "variant", "=", "'D'", ",", "skip", "=", "'m1'", ",", "args", "=", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.network.deepv3.DeepR152V3PlusD_OS8": [[646, 653], ["print", "deepv3.DeepV3Plus"], "function", ["None"], ["", "def", "DeepR152V3PlusD_OS8", "(", "args", ",", "num_classes", ",", "criterion", ",", "criterion_aux", ")", ":", "\n", "    ", "\"\"\"\n    Resnet 152 Based Network\n    \"\"\"", "\n", "print", "(", "\"Model : DeepLabv3+, Backbone : ResNet-152\"", ")", "\n", "return", "DeepV3Plus", "(", "num_classes", ",", "trunk", "=", "'resnet-152'", ",", "criterion", "=", "criterion", ",", "criterion_aux", "=", "criterion_aux", ",", "\n", "variant", "=", "'D'", ",", "skip", "=", "'m1'", ",", "args", "=", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.network.deepv3.DeepResNext50V3PlusD": [[656, 663], ["print", "deepv3.DeepV3Plus"], "function", ["None"], ["", "def", "DeepResNext50V3PlusD", "(", "args", ",", "num_classes", ",", "criterion", ",", "criterion_aux", ")", ":", "\n", "    ", "\"\"\"\n    Resnext 50 Based Network\n    \"\"\"", "\n", "print", "(", "\"Model : DeepLabv3+, Backbone : ResNext-50 32x4d\"", ")", "\n", "return", "DeepV3Plus", "(", "num_classes", ",", "trunk", "=", "'resnext-50'", ",", "criterion", "=", "criterion", ",", "criterion_aux", "=", "criterion_aux", ",", "\n", "variant", "=", "'D16'", ",", "skip", "=", "'m1'", ",", "args", "=", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.network.deepv3.DeepResNext101V3PlusD": [[664, 671], ["print", "deepv3.DeepV3Plus"], "function", ["None"], ["", "def", "DeepResNext101V3PlusD", "(", "args", ",", "num_classes", ",", "criterion", ",", "criterion_aux", ")", ":", "\n", "    ", "\"\"\"\n    Resnext 101 Based Network\n    \"\"\"", "\n", "print", "(", "\"Model : DeepLabv3+, Backbone : ResNext-101 32x8d\"", ")", "\n", "return", "DeepV3Plus", "(", "num_classes", ",", "trunk", "=", "'resnext-101'", ",", "criterion", "=", "criterion", ",", "criterion_aux", "=", "criterion_aux", ",", "\n", "variant", "=", "'D16'", ",", "skip", "=", "'m1'", ",", "args", "=", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.network.deepv3.DeepWideResNet50V3PlusD": [[672, 679], ["print", "deepv3.DeepV3Plus"], "function", ["None"], ["", "def", "DeepWideResNet50V3PlusD", "(", "args", ",", "num_classes", ",", "criterion", ",", "criterion_aux", ")", ":", "\n", "    ", "\"\"\"\n    Wide ResNet 50 Based Network\n    \"\"\"", "\n", "print", "(", "\"Model : DeepLabv3+, Backbone : wide_resnet-50\"", ")", "\n", "return", "DeepV3Plus", "(", "num_classes", ",", "trunk", "=", "'wide_resnet-50'", ",", "criterion", "=", "criterion", ",", "criterion_aux", "=", "criterion_aux", ",", "\n", "variant", "=", "'D16'", ",", "skip", "=", "'m1'", ",", "args", "=", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.network.deepv3.DeepWideResNet50V3PlusD_OS8": [[680, 687], ["print", "deepv3.DeepV3Plus"], "function", ["None"], ["", "def", "DeepWideResNet50V3PlusD_OS8", "(", "args", ",", "num_classes", ",", "criterion", ",", "criterion_aux", ")", ":", "\n", "    ", "\"\"\"\n    Wide ResNet 50 Based Network\n    \"\"\"", "\n", "print", "(", "\"Model : DeepLabv3+, Backbone : wide_resnet-50\"", ")", "\n", "return", "DeepV3Plus", "(", "num_classes", ",", "trunk", "=", "'wide_resnet-50'", ",", "criterion", "=", "criterion", ",", "criterion_aux", "=", "criterion_aux", ",", "\n", "variant", "=", "'D'", ",", "skip", "=", "'m1'", ",", "args", "=", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.network.deepv3.DeepWideResNet101V3PlusD": [[688, 695], ["print", "deepv3.DeepV3Plus"], "function", ["None"], ["", "def", "DeepWideResNet101V3PlusD", "(", "args", ",", "num_classes", ",", "criterion", ",", "criterion_aux", ")", ":", "\n", "    ", "\"\"\"\n    Wide ResNet 101 Based Network\n    \"\"\"", "\n", "print", "(", "\"Model : DeepLabv3+, Backbone : wide_resnet-101\"", ")", "\n", "return", "DeepV3Plus", "(", "num_classes", ",", "trunk", "=", "'wide_resnet-101'", ",", "criterion", "=", "criterion", ",", "criterion_aux", "=", "criterion_aux", ",", "\n", "variant", "=", "'D16'", ",", "skip", "=", "'m1'", ",", "args", "=", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.network.deepv3.DeepWideResNet101V3PlusD_OS8": [[696, 703], ["print", "deepv3.DeepV3Plus"], "function", ["None"], ["", "def", "DeepWideResNet101V3PlusD_OS8", "(", "args", ",", "num_classes", ",", "criterion", ",", "criterion_aux", ")", ":", "\n", "    ", "\"\"\"\n    Wide ResNet 101 Based Network\n    \"\"\"", "\n", "print", "(", "\"Model : DeepLabv3+, Backbone : wide_resnet-101\"", ")", "\n", "return", "DeepV3Plus", "(", "num_classes", ",", "trunk", "=", "'wide_resnet-101'", ",", "criterion", "=", "criterion", ",", "criterion_aux", "=", "criterion_aux", ",", "\n", "variant", "=", "'D'", ",", "skip", "=", "'m1'", ",", "args", "=", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.network.deepv3.DeepResNext101V3PlusD_OS8": [[705, 712], ["print", "deepv3.DeepV3Plus"], "function", ["None"], ["", "def", "DeepResNext101V3PlusD_OS8", "(", "args", ",", "num_classes", ",", "criterion", ",", "criterion_aux", ")", ":", "\n", "    ", "\"\"\"\n    ResNext 101 Based Network\n    \"\"\"", "\n", "print", "(", "\"Model : DeepLabv3+, Backbone : resnext-101\"", ")", "\n", "return", "DeepV3Plus", "(", "num_classes", ",", "trunk", "=", "'resnext-101'", ",", "criterion", "=", "criterion", ",", "criterion_aux", "=", "criterion_aux", ",", "\n", "variant", "=", "'D'", ",", "skip", "=", "'m1'", ",", "args", "=", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.network.deepv3.DeepResNext101V3PlusD_OS4": [[713, 720], ["print", "deepv3.DeepV3Plus"], "function", ["None"], ["", "def", "DeepResNext101V3PlusD_OS4", "(", "args", ",", "num_classes", ",", "criterion", ",", "criterion_aux", ")", ":", "\n", "    ", "\"\"\"\n    ResNext 101 Based Network\n    \"\"\"", "\n", "print", "(", "\"Model : DeepLabv3+, Backbone : resnext-101\"", ")", "\n", "return", "DeepV3Plus", "(", "num_classes", ",", "trunk", "=", "'resnext-101'", ",", "criterion", "=", "criterion", ",", "criterion_aux", "=", "criterion_aux", ",", "\n", "variant", "=", "'D4'", ",", "skip", "=", "'m1'", ",", "args", "=", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.network.deepv3.DeepShuffleNetV3PlusD_OS32": [[721, 728], ["print", "deepv3.DeepV3Plus"], "function", ["None"], ["", "def", "DeepShuffleNetV3PlusD_OS32", "(", "args", ",", "num_classes", ",", "criterion", ",", "criterion_aux", ")", ":", "\n", "    ", "\"\"\"\n    ShuffleNet Based Network\n    \"\"\"", "\n", "print", "(", "\"Model : DeepLabv3+, Backbone : shufflenetv2\"", ")", "\n", "return", "DeepV3Plus", "(", "num_classes", ",", "trunk", "=", "'shufflenetv2'", ",", "criterion", "=", "criterion", ",", "criterion_aux", "=", "criterion_aux", ",", "\n", "variant", "=", "'D32'", ",", "skip", "=", "'m1'", ",", "args", "=", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.network.deepv3.DeepMNASNet05V3PlusD": [[730, 737], ["print", "deepv3.DeepV3Plus"], "function", ["None"], ["", "def", "DeepMNASNet05V3PlusD", "(", "args", ",", "num_classes", ",", "criterion", ",", "criterion_aux", ")", ":", "\n", "    ", "\"\"\"\n    MNASNET Based Network\n    \"\"\"", "\n", "print", "(", "\"Model : DeepLabv3+, Backbone : mnas_0_5\"", ")", "\n", "return", "DeepV3Plus", "(", "num_classes", ",", "trunk", "=", "'mnasnet_05'", ",", "criterion", "=", "criterion", ",", "criterion_aux", "=", "criterion_aux", ",", "\n", "variant", "=", "'D16'", ",", "skip", "=", "'m1'", ",", "args", "=", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.network.deepv3.DeepMNASNet10V3PlusD": [[738, 745], ["print", "deepv3.DeepV3Plus"], "function", ["None"], ["", "def", "DeepMNASNet10V3PlusD", "(", "args", ",", "num_classes", ",", "criterion", ",", "criterion_aux", ")", ":", "\n", "    ", "\"\"\"\n    MNASNET Based Network\n    \"\"\"", "\n", "print", "(", "\"Model : DeepLabv3+, Backbone : mnas_1_0\"", ")", "\n", "return", "DeepV3Plus", "(", "num_classes", ",", "trunk", "=", "'mnasnet_10'", ",", "criterion", "=", "criterion", ",", "criterion_aux", "=", "criterion_aux", ",", "\n", "variant", "=", "'D16'", ",", "skip", "=", "'m1'", ",", "args", "=", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.network.deepv3.DeepShuffleNetV3PlusD": [[747, 754], ["print", "deepv3.DeepV3Plus"], "function", ["None"], ["", "def", "DeepShuffleNetV3PlusD", "(", "args", ",", "num_classes", ",", "criterion", ",", "criterion_aux", ")", ":", "\n", "    ", "\"\"\"\n    ShuffleNet Based Network\n    \"\"\"", "\n", "print", "(", "\"Model : DeepLabv3+, Backbone : shufflenetv2\"", ")", "\n", "return", "DeepV3Plus", "(", "num_classes", ",", "trunk", "=", "'shufflenetv2'", ",", "criterion", "=", "criterion", ",", "criterion_aux", "=", "criterion_aux", ",", "\n", "variant", "=", "'D16'", ",", "skip", "=", "'m1'", ",", "args", "=", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.network.deepv3.DeepMobileNetV3PlusD": [[755, 762], ["print", "deepv3.DeepV3Plus"], "function", ["None"], ["", "def", "DeepMobileNetV3PlusD", "(", "args", ",", "num_classes", ",", "criterion", ",", "criterion_aux", ")", ":", "\n", "    ", "\"\"\"\n    ShuffleNet Based Network\n    \"\"\"", "\n", "print", "(", "\"Model : DeepLabv3+, Backbone : mobilenetv2\"", ")", "\n", "return", "DeepV3Plus", "(", "num_classes", ",", "trunk", "=", "'mobilenetv2'", ",", "criterion", "=", "criterion", ",", "criterion_aux", "=", "criterion_aux", ",", "\n", "variant", "=", "'D16'", ",", "skip", "=", "'m1'", ",", "args", "=", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.network.deepv3.DeepMobileNetV3PlusD_OS8": [[763, 770], ["print", "deepv3.DeepV3Plus"], "function", ["None"], ["", "def", "DeepMobileNetV3PlusD_OS8", "(", "args", ",", "num_classes", ",", "criterion", ",", "criterion_aux", ")", ":", "\n", "    ", "\"\"\"\n    ShuffleNet Based Network\n    \"\"\"", "\n", "print", "(", "\"Model : DeepLabv3+, Backbone : mobilenetv2\"", ")", "\n", "return", "DeepV3Plus", "(", "num_classes", ",", "trunk", "=", "'mobilenetv2'", ",", "criterion", "=", "criterion", ",", "criterion_aux", "=", "criterion_aux", ",", "\n", "variant", "=", "'D'", ",", "skip", "=", "'m1'", ",", "args", "=", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.network.deepv3.DeepShuffleNetV3PlusD_OS8": [[771, 778], ["print", "deepv3.DeepV3Plus"], "function", ["None"], ["", "def", "DeepShuffleNetV3PlusD_OS8", "(", "args", ",", "num_classes", ",", "criterion", ",", "criterion_aux", ")", ":", "\n", "    ", "\"\"\"\n    ShuffleNet Based Network\n    \"\"\"", "\n", "print", "(", "\"Model : DeepLabv3+, Backbone : shufflenetv2\"", ")", "\n", "return", "DeepV3Plus", "(", "num_classes", ",", "trunk", "=", "'shufflenetv2'", ",", "criterion", "=", "criterion", ",", "criterion_aux", "=", "criterion_aux", ",", "\n", "variant", "=", "'D'", ",", "skip", "=", "'m1'", ",", "args", "=", "args", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.shachoi_RobustNet.network.SEresnext.SEModule.__init__": [[74, 83], ["torch.Module.__init__", "torch.AdaptiveAvgPool2d", "torch.Conv2d", "torch.ReLU", "torch.Conv2d", "torch.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.shachoi_RobustNet.transforms.joint_transforms.ClassUniform.__init__"], ["def", "__init__", "(", "self", ",", "channels", ",", "reduction", ")", ":", "\n", "        ", "super", "(", "SEModule", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "avg_pool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "self", ".", "fc1", "=", "nn", ".", "Conv2d", "(", "channels", ",", "channels", "//", "reduction", ",", "kernel_size", "=", "1", ",", "\n", "padding", "=", "0", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Conv2d", "(", "channels", "//", "reduction", ",", "channels", ",", "kernel_size", "=", "1", ",", "\n", "padding", "=", "0", ")", "\n", "self", ".", "sigmoid", "=", "nn", ".", "Sigmoid", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.network.SEresnext.SEModule.forward": [[84, 92], ["SEresnext.SEModule.avg_pool", "SEresnext.SEModule.fc1", "SEresnext.SEModule.relu", "SEresnext.SEModule.fc2", "SEresnext.SEModule.sigmoid"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "module_input", "=", "x", "\n", "x", "=", "self", ".", "avg_pool", "(", "x", ")", "\n", "x", "=", "self", ".", "fc1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "fc2", "(", "x", ")", "\n", "x", "=", "self", ".", "sigmoid", "(", "x", ")", "\n", "return", "module_input", "*", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.network.SEresnext.Bottleneck.forward": [[98, 119], ["SEresnext.Bottleneck.conv1", "SEresnext.Bottleneck.bn1", "SEresnext.Bottleneck.relu", "SEresnext.Bottleneck.conv2", "SEresnext.Bottleneck.bn2", "SEresnext.Bottleneck.relu", "SEresnext.Bottleneck.conv3", "SEresnext.Bottleneck.bn3", "SEresnext.Bottleneck.relu", "SEresnext.Bottleneck.downsample", "SEresnext.Bottleneck.se_module"], "methods", ["None"], ["def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "=", "self", ".", "se_module", "(", "out", ")", "+", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.network.SEresnext.SEBottleneck.__init__": [[127, 143], ["torch.Module.__init__", "torch.Conv2d", "network.Norm2d", "torch.Conv2d", "network.Norm2d", "torch.Conv2d", "network.Norm2d", "torch.ReLU", "SEresnext.SEModule"], "methods", ["home.repos.pwc.inspect_result.shachoi_RobustNet.transforms.joint_transforms.ClassUniform.__init__", "home.repos.pwc.inspect_result.shachoi_RobustNet.network.mynn.Norm2d", "home.repos.pwc.inspect_result.shachoi_RobustNet.network.mynn.Norm2d", "home.repos.pwc.inspect_result.shachoi_RobustNet.network.mynn.Norm2d"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "groups", ",", "reduction", ",", "stride", "=", "1", ",", "\n", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "SEBottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", "*", "2", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "mynn", ".", "Norm2d", "(", "planes", "*", "2", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", "*", "2", ",", "planes", "*", "4", ",", "kernel_size", "=", "3", ",", "\n", "stride", "=", "stride", ",", "padding", "=", "1", ",", "groups", "=", "groups", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "mynn", ".", "Norm2d", "(", "planes", "*", "4", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", "*", "4", ",", "planes", "*", "4", ",", "kernel_size", "=", "1", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "mynn", ".", "Norm2d", "(", "planes", "*", "4", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "se_module", "=", "SEModule", "(", "planes", "*", "4", ",", "reduction", "=", "reduction", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.network.SEresnext.SEResNetBottleneck.__init__": [[153, 168], ["torch.Module.__init__", "torch.Conv2d", "network.Norm2d", "torch.Conv2d", "network.Norm2d", "torch.Conv2d", "network.Norm2d", "torch.ReLU", "SEresnext.SEModule"], "methods", ["home.repos.pwc.inspect_result.shachoi_RobustNet.transforms.joint_transforms.ClassUniform.__init__", "home.repos.pwc.inspect_result.shachoi_RobustNet.network.mynn.Norm2d", "home.repos.pwc.inspect_result.shachoi_RobustNet.network.mynn.Norm2d", "home.repos.pwc.inspect_result.shachoi_RobustNet.network.mynn.Norm2d"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "groups", ",", "reduction", ",", "stride", "=", "1", ",", "\n", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "SEResNetBottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ",", "\n", "stride", "=", "stride", ")", "\n", "self", ".", "bn1", "=", "mynn", ".", "Norm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "\n", "groups", "=", "groups", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "mynn", ".", "Norm2d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", "*", "4", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "mynn", ".", "Norm2d", "(", "planes", "*", "4", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "se_module", "=", "SEModule", "(", "planes", "*", "4", ",", "reduction", "=", "reduction", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.network.SEresnext.SEResNeXtBottleneck.__init__": [[176, 192], ["torch.Module.__init__", "torch.Conv2d", "network.Norm2d", "torch.Conv2d", "network.Norm2d", "torch.Conv2d", "network.Norm2d", "torch.ReLU", "SEresnext.SEModule", "math.floor"], "methods", ["home.repos.pwc.inspect_result.shachoi_RobustNet.transforms.joint_transforms.ClassUniform.__init__", "home.repos.pwc.inspect_result.shachoi_RobustNet.network.mynn.Norm2d", "home.repos.pwc.inspect_result.shachoi_RobustNet.network.mynn.Norm2d", "home.repos.pwc.inspect_result.shachoi_RobustNet.network.mynn.Norm2d"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "groups", ",", "reduction", ",", "stride", "=", "1", ",", "\n", "downsample", "=", "None", ",", "base_width", "=", "4", ")", ":", "\n", "        ", "super", "(", "SEResNeXtBottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "width", "=", "math", ".", "floor", "(", "planes", "*", "(", "base_width", "/", "64", ")", ")", "*", "groups", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "width", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ",", "\n", "stride", "=", "1", ")", "\n", "self", ".", "bn1", "=", "mynn", ".", "Norm2d", "(", "width", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "width", ",", "width", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "groups", "=", "groups", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "mynn", ".", "Norm2d", "(", "width", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "width", ",", "planes", "*", "4", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "mynn", ".", "Norm2d", "(", "planes", "*", "4", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "se_module", "=", "SEModule", "(", "planes", "*", "4", ",", "reduction", "=", "reduction", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.network.SEresnext.SENet.__init__": [[199, 316], ["torch.Module.__init__", "layer0_modules.append", "torch.Sequential", "SEresnext.SENet._make_layer", "SEresnext.SENet._make_layer", "SEresnext.SENet._make_layer", "SEresnext.SENet._make_layer", "torch.AvgPool2d", "torch.Linear", "collections.OrderedDict", "torch.Dropout", "torch.MaxPool2d", "torch.Conv2d", "network.Norm2d", "torch.ReLU", "torch.Conv2d", "network.Norm2d", "torch.ReLU", "torch.Conv2d", "network.Norm2d", "torch.ReLU", "torch.Conv2d", "network.Norm2d", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.shachoi_RobustNet.transforms.joint_transforms.ClassUniform.__init__", "home.repos.pwc.inspect_result.shachoi_RobustNet.network.Resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.shachoi_RobustNet.network.Resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.shachoi_RobustNet.network.Resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.shachoi_RobustNet.network.Resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.shachoi_RobustNet.network.mynn.Norm2d", "home.repos.pwc.inspect_result.shachoi_RobustNet.network.mynn.Norm2d", "home.repos.pwc.inspect_result.shachoi_RobustNet.network.mynn.Norm2d", "home.repos.pwc.inspect_result.shachoi_RobustNet.network.mynn.Norm2d"], ["def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "groups", ",", "reduction", ",", "dropout_p", "=", "0.2", ",", "\n", "inplanes", "=", "128", ",", "input_3x3", "=", "True", ",", "downsample_kernel_size", "=", "3", ",", "\n", "downsample_padding", "=", "1", ",", "num_classes", "=", "1000", ")", ":", "\n", "        ", "\"\"\"\n        Parameters\n        ----------\n        block (nn.Module): Bottleneck class.\n            - For SENet154: SEBottleneck\n            - For SE-ResNet models: SEResNetBottleneck\n            - For SE-ResNeXt models:  SEResNeXtBottleneck\n        layers (list of ints): Number of residual blocks for 4 layers of the\n            network (layer1...layer4).\n        groups (int): Number of groups for the 3x3 convolution in each\n            bottleneck block.\n            - For SENet154: 64\n            - For SE-ResNet models: 1\n            - For SE-ResNeXt models:  32\n        reduction (int): Reduction ratio for Squeeze-and-Excitation modules.\n            - For all models: 16\n        dropout_p (float or None): Drop probability for the Dropout layer.\n            If `None` the Dropout layer is not used.\n            - For SENet154: 0.2\n            - For SE-ResNet models: None\n            - For SE-ResNeXt models: None\n        inplanes (int):  Number of input channels for layer1.\n            - For SENet154: 128\n            - For SE-ResNet models: 64\n            - For SE-ResNeXt models: 64\n        input_3x3 (bool): If `True`, use three 3x3 convolutions instead of\n            a single 7x7 convolution in layer0.\n            - For SENet154: True\n            - For SE-ResNet models: False\n            - For SE-ResNeXt models: False\n        downsample_kernel_size (int): Kernel size for downsampling convolutions\n            in layer2, layer3 and layer4.\n            - For SENet154: 3\n            - For SE-ResNet models: 1\n            - For SE-ResNeXt models: 1\n        downsample_padding (int): Padding for downsampling convolutions in\n            layer2, layer3 and layer4.\n            - For SENet154: 1\n            - For SE-ResNet models: 0\n            - For SE-ResNeXt models: 0\n        num_classes (int): Number of outputs in `last_linear` layer.\n            - For all models: 1000\n        \"\"\"", "\n", "super", "(", "SENet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "inplanes", "=", "inplanes", "\n", "if", "input_3x3", ":", "\n", "            ", "layer0_modules", "=", "[", "\n", "(", "'conv1'", ",", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "\n", "bias", "=", "False", ")", ")", ",", "\n", "(", "'bn1'", ",", "mynn", ".", "Norm2d", "(", "64", ")", ")", ",", "\n", "(", "'relu1'", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", ",", "\n", "(", "'conv2'", ",", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "\n", "bias", "=", "False", ")", ")", ",", "\n", "(", "'bn2'", ",", "mynn", ".", "Norm2d", "(", "64", ")", ")", ",", "\n", "(", "'relu2'", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", ",", "\n", "(", "'conv3'", ",", "nn", ".", "Conv2d", "(", "64", ",", "inplanes", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "\n", "bias", "=", "False", ")", ")", ",", "\n", "(", "'bn3'", ",", "mynn", ".", "Norm2d", "(", "inplanes", ")", ")", ",", "\n", "(", "'relu3'", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", ",", "\n", "]", "\n", "", "else", ":", "\n", "            ", "layer0_modules", "=", "[", "\n", "(", "'conv1'", ",", "nn", ".", "Conv2d", "(", "3", ",", "inplanes", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "\n", "padding", "=", "3", ",", "bias", "=", "False", ")", ")", ",", "\n", "(", "'bn1'", ",", "mynn", ".", "Norm2d", "(", "inplanes", ")", ")", ",", "\n", "(", "'relu1'", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", ",", "\n", "]", "\n", "# To preserve compatibility with Caffe weights `ceil_mode=True`", "\n", "# is used instead of `padding=1`.", "\n", "", "layer0_modules", ".", "append", "(", "(", "'pool'", ",", "nn", ".", "MaxPool2d", "(", "3", ",", "stride", "=", "2", ",", "\n", "ceil_mode", "=", "True", ")", ")", ")", "\n", "self", ".", "layer0", "=", "nn", ".", "Sequential", "(", "OrderedDict", "(", "layer0_modules", ")", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "\n", "block", ",", "\n", "planes", "=", "64", ",", "\n", "blocks", "=", "layers", "[", "0", "]", ",", "\n", "groups", "=", "groups", ",", "\n", "reduction", "=", "reduction", ",", "\n", "downsample_kernel_size", "=", "1", ",", "\n", "downsample_padding", "=", "0", "\n", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "\n", "block", ",", "\n", "planes", "=", "128", ",", "\n", "blocks", "=", "layers", "[", "1", "]", ",", "\n", "stride", "=", "2", ",", "\n", "groups", "=", "groups", ",", "\n", "reduction", "=", "reduction", ",", "\n", "downsample_kernel_size", "=", "downsample_kernel_size", ",", "\n", "downsample_padding", "=", "downsample_padding", "\n", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "\n", "block", ",", "\n", "planes", "=", "256", ",", "\n", "blocks", "=", "layers", "[", "2", "]", ",", "\n", "stride", "=", "1", ",", "\n", "groups", "=", "groups", ",", "\n", "reduction", "=", "reduction", ",", "\n", "downsample_kernel_size", "=", "downsample_kernel_size", ",", "\n", "downsample_padding", "=", "downsample_padding", "\n", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "\n", "block", ",", "\n", "planes", "=", "512", ",", "\n", "blocks", "=", "layers", "[", "3", "]", ",", "\n", "stride", "=", "1", ",", "\n", "groups", "=", "groups", ",", "\n", "reduction", "=", "reduction", ",", "\n", "downsample_kernel_size", "=", "downsample_kernel_size", ",", "\n", "downsample_padding", "=", "downsample_padding", "\n", ")", "\n", "self", ".", "avg_pool", "=", "nn", ".", "AvgPool2d", "(", "7", ",", "stride", "=", "1", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "dropout_p", ")", "if", "dropout_p", "is", "not", "None", "else", "None", "\n", "self", ".", "last_linear", "=", "nn", ".", "Linear", "(", "512", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.network.SEresnext.SENet._make_layer": [[317, 336], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.Conv2d", "network.Norm2d", "block"], "methods", ["home.repos.pwc.inspect_result.shachoi_RobustNet.network.mynn.Norm2d"], ["", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "groups", ",", "reduction", ",", "stride", "=", "1", ",", "\n", "downsample_kernel_size", "=", "1", ",", "downsample_padding", "=", "0", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "downsample_kernel_size", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "downsample_padding", ",", "bias", "=", "False", ")", ",", "\n", "mynn", ".", "Norm2d", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "groups", ",", "reduction", ",", "stride", ",", "\n", "downsample", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "index", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "groups", ",", "reduction", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.network.SEresnext.SENet.features": [[337, 347], ["SEresnext.SENet.layer0", "SEresnext.SENet.layer1", "SEresnext.SENet.layer2", "SEresnext.SENet.layer3", "SEresnext.SENet.layer4"], "methods", ["None"], ["", "def", "features", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"\n        Forward Pass through the each layer of SE network\n        \"\"\"", "\n", "x", "=", "self", ".", "layer0", "(", "x", ")", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.network.SEresnext.SENet.logits": [[348, 358], ["SEresnext.SENet.avg_pool", "SEresnext.SENet.view", "SEresnext.SENet.last_linear", "SEresnext.SENet.dropout", "SEresnext.SENet.size"], "methods", ["None"], ["", "def", "logits", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"\n        AvgPool and Linear Layer\n        \"\"\"", "\n", "x", "=", "self", ".", "avg_pool", "(", "x", ")", "\n", "if", "self", ".", "dropout", "is", "not", "None", ":", "\n", "            ", "x", "=", "self", ".", "dropout", "(", "x", ")", "\n", "", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "last_linear", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.network.SEresnext.SENet.forward": [[359, 363], ["SEresnext.SENet.features", "SEresnext.SENet.logits"], "methods", ["home.repos.pwc.inspect_result.shachoi_RobustNet.network.SEresnext.SENet.features", "home.repos.pwc.inspect_result.shachoi_RobustNet.network.SEresnext.SENet.logits"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "features", "(", "x", ")", "\n", "x", "=", "self", ".", "logits", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.network.SEresnext.initialize_pretrained_model": [[365, 380], ["torch.utils.model_zoo.load_url", "model.load_state_dict"], "function", ["None"], ["", "", "def", "initialize_pretrained_model", "(", "model", ",", "num_classes", ",", "settings", ")", ":", "\n", "    ", "\"\"\"\n    Initialize Pretrain Model Information,\n    Dowload weights, load weights, set variables\n    \"\"\"", "\n", "assert", "num_classes", "==", "settings", "[", "'num_classes'", "]", ",", "'num_classes should be {}, but is {}'", ".", "format", "(", "\n", "settings", "[", "'num_classes'", "]", ",", "num_classes", ")", "\n", "weights", "=", "model_zoo", ".", "load_url", "(", "settings", "[", "'url'", "]", ")", "\n", "model", ".", "load_state_dict", "(", "weights", ")", "\n", "model", ".", "input_space", "=", "settings", "[", "'input_space'", "]", "\n", "model", ".", "input_size", "=", "settings", "[", "'input_size'", "]", "\n", "model", ".", "input_range", "=", "settings", "[", "'input_range'", "]", "\n", "model", ".", "mean", "=", "settings", "[", "'mean'", "]", "\n", "model", ".", "std", "=", "settings", "[", "'std'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.network.SEresnext.se_resnext50_32x4d": [[383, 394], ["SEresnext.SENet", "SEresnext.initialize_pretrained_model"], "function", ["home.repos.pwc.inspect_result.shachoi_RobustNet.network.SEresnext.initialize_pretrained_model"], ["", "def", "se_resnext50_32x4d", "(", "num_classes", "=", "1000", ")", ":", "\n", "    ", "\"\"\"\n    Defination For SE Resnext50\n    \"\"\"", "\n", "model", "=", "SENet", "(", "SEResNeXtBottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "groups", "=", "32", ",", "reduction", "=", "16", ",", "\n", "dropout_p", "=", "None", ",", "inplanes", "=", "64", ",", "input_3x3", "=", "False", ",", "\n", "downsample_kernel_size", "=", "1", ",", "downsample_padding", "=", "0", ",", "\n", "num_classes", "=", "num_classes", ")", "\n", "settings", "=", "pretrained_settings", "[", "'se_resnext50_32x4d'", "]", "[", "'imagenet'", "]", "\n", "initialize_pretrained_model", "(", "model", ",", "num_classes", ",", "settings", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.network.SEresnext.se_resnext101_32x4d": [[396, 408], ["SEresnext.SENet", "SEresnext.initialize_pretrained_model"], "function", ["home.repos.pwc.inspect_result.shachoi_RobustNet.network.SEresnext.initialize_pretrained_model"], ["", "def", "se_resnext101_32x4d", "(", "num_classes", "=", "1000", ")", ":", "\n", "    ", "\"\"\"\n    Defination For SE Resnext101\n    \"\"\"", "\n", "\n", "model", "=", "SENet", "(", "SEResNeXtBottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "groups", "=", "32", ",", "reduction", "=", "16", ",", "\n", "dropout_p", "=", "None", ",", "inplanes", "=", "64", ",", "input_3x3", "=", "False", ",", "\n", "downsample_kernel_size", "=", "1", ",", "downsample_padding", "=", "0", ",", "\n", "num_classes", "=", "num_classes", ")", "\n", "settings", "=", "pretrained_settings", "[", "'se_resnext101_32x4d'", "]", "[", "'imagenet'", "]", "\n", "initialize_pretrained_model", "(", "model", ",", "num_classes", ",", "settings", ")", "\n", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.shachoi_RobustNet.network.__init__.get_net": [[12, 23], ["__init__.get_model", "sum", "logging.info", "net.cuda.cuda", "param.nelement", "net.cuda.parameters"], "function", ["home.repos.pwc.inspect_result.shachoi_RobustNet.network.__init__.get_model"], []], "home.repos.pwc.inspect_result.shachoi_RobustNet.network.__init__.warp_network_in_dataparallel": [[25, 34], ["torch.nn.parallel.DistributedDataParallel"], "function", ["None"], []], "home.repos.pwc.inspect_result.shachoi_RobustNet.network.__init__.get_model": [[36, 47], ["importlib.import_module", "getattr", "getattr.", "network.rfind", "network.rfind"], "function", ["None"], []], "home.repos.pwc.inspect_result.shachoi_RobustNet.network.wider_resnet.GlobalAvgPool2d.__init__": [[55, 58], ["torch.Module.__init__", "logging.info"], "methods", ["home.repos.pwc.inspect_result.shachoi_RobustNet.transforms.joint_transforms.ClassUniform.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "GlobalAvgPool2d", ",", "self", ")", ".", "__init__", "(", ")", "\n", "logging", ".", "info", "(", "\"Global Average Pooling Initialized\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.network.wider_resnet.GlobalAvgPool2d.forward": [[59, 62], ["inputs.size", "inputs.view().mean", "inputs.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "in_size", "=", "inputs", ".", "size", "(", ")", "\n", "return", "inputs", ".", "view", "(", "(", "in_size", "[", "0", "]", ",", "in_size", "[", "1", "]", ",", "-", "1", ")", ")", ".", "mean", "(", "dim", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.network.wider_resnet.IdentityResidualBlock.__init__": [[68, 168], ["torch.Module.__init__", "norm_act", "torch.Sequential", "torch.Sequential", "ValueError", "ValueError", "len", "collections.OrderedDict", "torch.Conv2d", "torch.Conv2d", "len", "len", "len", "torch.Conv2d", "torch.Conv2d", "norm_act", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "norm_act", "torch.Conv2d", "torch.Conv2d", "norm_act", "torch.Conv2d", "torch.Conv2d", "dropout", "dropout"], "methods", ["home.repos.pwc.inspect_result.shachoi_RobustNet.transforms.joint_transforms.ClassUniform.__init__"], ["def", "__init__", "(", "self", ",", "\n", "in_channels", ",", "\n", "channels", ",", "\n", "stride", "=", "1", ",", "\n", "dilation", "=", "1", ",", "\n", "groups", "=", "1", ",", "\n", "norm_act", "=", "bnrelu", ",", "\n", "dropout", "=", "None", ",", "\n", "dist_bn", "=", "False", "\n", ")", ":", "\n", "        ", "\"\"\"Configurable identity-mapping residual block\n\n        Parameters\n        ----------\n        in_channels : int\n            Number of input channels.\n        channels : list of int\n            Number of channels in the internal feature maps.\n            Can either have two or three elements: if three construct\n            a residual block with two `3 x 3` convolutions,\n            otherwise construct a bottleneck block with `1 x 1`, then\n            `3 x 3` then `1 x 1` convolutions.\n        stride : int\n            Stride of the first `3 x 3` convolution\n        dilation : int\n            Dilation to apply to the `3 x 3` convolutions.\n        groups : int\n            Number of convolution groups.\n            This is used to create ResNeXt-style blocks and is only compatible with\n            bottleneck blocks.\n        norm_act : callable\n            Function to create normalization / activation Module.\n        dropout: callable\n            Function to create Dropout Module.\n        dist_bn: Boolean\n            A variable to enable or disable use of distributed BN\n        \"\"\"", "\n", "super", "(", "IdentityResidualBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dist_bn", "=", "dist_bn", "\n", "\n", "# Check if we are using distributed BN and use the nn from encoding.nn", "\n", "# library rather than using standard pytorch.nn", "\n", "\n", "\n", "# Check parameters for inconsistencies", "\n", "if", "len", "(", "channels", ")", "!=", "2", "and", "len", "(", "channels", ")", "!=", "3", ":", "\n", "            ", "raise", "ValueError", "(", "\"channels must contain either two or three values\"", ")", "\n", "", "if", "len", "(", "channels", ")", "==", "2", "and", "groups", "!=", "1", ":", "\n", "            ", "raise", "ValueError", "(", "\"groups > 1 are only valid if len(channels) == 3\"", ")", "\n", "\n", "", "is_bottleneck", "=", "len", "(", "channels", ")", "==", "3", "\n", "need_proj_conv", "=", "stride", "!=", "1", "or", "in_channels", "!=", "channels", "[", "-", "1", "]", "\n", "\n", "self", ".", "bn1", "=", "norm_act", "(", "in_channels", ")", "\n", "if", "not", "is_bottleneck", ":", "\n", "            ", "layers", "=", "[", "\n", "(", "\"conv1\"", ",", "nn", ".", "Conv2d", "(", "in_channels", ",", "\n", "channels", "[", "0", "]", ",", "\n", "3", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "dilation", ",", "\n", "bias", "=", "False", ",", "\n", "dilation", "=", "dilation", ")", ")", ",", "\n", "(", "\"bn2\"", ",", "norm_act", "(", "channels", "[", "0", "]", ")", ")", ",", "\n", "(", "\"conv2\"", ",", "nn", ".", "Conv2d", "(", "channels", "[", "0", "]", ",", "channels", "[", "1", "]", ",", "\n", "3", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "dilation", ",", "\n", "bias", "=", "False", ",", "\n", "dilation", "=", "dilation", ")", ")", "\n", "]", "\n", "if", "dropout", "is", "not", "None", ":", "\n", "                ", "layers", "=", "layers", "[", "0", ":", "2", "]", "+", "[", "(", "\"dropout\"", ",", "dropout", "(", ")", ")", "]", "+", "layers", "[", "2", ":", "]", "\n", "", "", "else", ":", "\n", "            ", "layers", "=", "[", "\n", "(", "\"conv1\"", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", ",", "\n", "channels", "[", "0", "]", ",", "\n", "1", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "0", ",", "\n", "bias", "=", "False", ")", ")", ",", "\n", "(", "\"bn2\"", ",", "norm_act", "(", "channels", "[", "0", "]", ")", ")", ",", "\n", "(", "\"conv2\"", ",", "nn", ".", "Conv2d", "(", "channels", "[", "0", "]", ",", "\n", "channels", "[", "1", "]", ",", "\n", "3", ",", "stride", "=", "1", ",", "\n", "padding", "=", "dilation", ",", "bias", "=", "False", ",", "\n", "groups", "=", "groups", ",", "\n", "dilation", "=", "dilation", ")", ")", ",", "\n", "(", "\"bn3\"", ",", "norm_act", "(", "channels", "[", "1", "]", ")", ")", ",", "\n", "(", "\"conv3\"", ",", "nn", ".", "Conv2d", "(", "channels", "[", "1", "]", ",", "channels", "[", "2", "]", ",", "\n", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", ")", "\n", "]", "\n", "if", "dropout", "is", "not", "None", ":", "\n", "                ", "layers", "=", "layers", "[", "0", ":", "4", "]", "+", "[", "(", "\"dropout\"", ",", "dropout", "(", ")", ")", "]", "+", "layers", "[", "4", ":", "]", "\n", "", "", "self", ".", "convs", "=", "nn", ".", "Sequential", "(", "OrderedDict", "(", "layers", ")", ")", "\n", "\n", "if", "need_proj_conv", ":", "\n", "            ", "self", ".", "proj_conv", "=", "nn", ".", "Conv2d", "(", "\n", "in_channels", ",", "channels", "[", "-", "1", "]", ",", "1", ",", "stride", "=", "stride", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.network.wider_resnet.IdentityResidualBlock.forward": [[169, 183], ["hasattr", "wider_resnet.IdentityResidualBlock.convs", "wider_resnet.IdentityResidualBlock.add_", "wider_resnet.IdentityResidualBlock.bn1", "wider_resnet.IdentityResidualBlock.proj_conv", "x.clone", "wider_resnet.IdentityResidualBlock.bn1"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"\n        This is the standard forward function for non-distributed batch norm\n        \"\"\"", "\n", "if", "hasattr", "(", "self", ",", "\"proj_conv\"", ")", ":", "\n", "            ", "bn1", "=", "self", ".", "bn1", "(", "x", ")", "\n", "shortcut", "=", "self", ".", "proj_conv", "(", "bn1", ")", "\n", "", "else", ":", "\n", "            ", "shortcut", "=", "x", ".", "clone", "(", ")", "\n", "bn1", "=", "self", ".", "bn1", "(", "x", ")", "\n", "\n", "", "out", "=", "self", ".", "convs", "(", "bn1", ")", "\n", "out", ".", "add_", "(", "shortcut", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.network.wider_resnet.WiderResNet.__init__": [[191, 249], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "enumerate", "norm_act", "len", "ValueError", "collections.OrderedDict", "range", "wider_resnet.WiderResNet.add_module", "torch.Sequential", "torch.Sequential", "blocks.append", "wider_resnet.WiderResNet.add_module", "torch.Sequential", "torch.Sequential", "collections.OrderedDict", "torch.MaxPool2d", "torch.MaxPool2d", "collections.OrderedDict", "torch.Conv2d", "torch.Conv2d", "wider_resnet.IdentityResidualBlock", "wider_resnet.GlobalAvgPool2d", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.shachoi_RobustNet.transforms.joint_transforms.ClassUniform.__init__"], ["def", "__init__", "(", "self", ",", "\n", "structure", ",", "\n", "norm_act", "=", "bnrelu", ",", "\n", "classes", "=", "0", "\n", ")", ":", "\n", "        ", "\"\"\"Wider ResNet with pre-activation (identity mapping) blocks\n\n        Parameters\n        ----------\n        structure : list of int\n            Number of residual blocks in each of the six modules of the network.\n        norm_act : callable\n            Function to create normalization / activation Module.\n        classes : int\n            If not `0` also include global average pooling and \\\n            a fully-connected layer with `classes` outputs at the end\n            of the network.\n        \"\"\"", "\n", "super", "(", "WiderResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "structure", "=", "structure", "\n", "\n", "if", "len", "(", "structure", ")", "!=", "6", ":", "\n", "            ", "raise", "ValueError", "(", "\"Expected a structure with six values\"", ")", "\n", "\n", "# Initial layers", "\n", "", "self", ".", "mod1", "=", "nn", ".", "Sequential", "(", "OrderedDict", "(", "[", "\n", "(", "\"conv1\"", ",", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ")", "\n", "]", ")", ")", "\n", "\n", "# Groups of residual blocks", "\n", "in_channels", "=", "64", "\n", "channels", "=", "[", "(", "128", ",", "128", ")", ",", "(", "256", ",", "256", ")", ",", "(", "512", ",", "512", ")", ",", "(", "512", ",", "1024", ")", ",", "\n", "(", "512", ",", "1024", ",", "2048", ")", ",", "(", "1024", ",", "2048", ",", "4096", ")", "]", "\n", "for", "mod_id", ",", "num", "in", "enumerate", "(", "structure", ")", ":", "\n", "# Create blocks for module", "\n", "            ", "blocks", "=", "[", "]", "\n", "for", "block_id", "in", "range", "(", "num", ")", ":", "\n", "                ", "blocks", ".", "append", "(", "(", "\n", "\"block%d\"", "%", "(", "block_id", "+", "1", ")", ",", "\n", "IdentityResidualBlock", "(", "in_channels", ",", "channels", "[", "mod_id", "]", ",", "\n", "norm_act", "=", "norm_act", ")", "\n", ")", ")", "\n", "\n", "# Update channels and p_keep", "\n", "in_channels", "=", "channels", "[", "mod_id", "]", "[", "-", "1", "]", "\n", "\n", "# Create module", "\n", "", "if", "mod_id", "<=", "4", ":", "\n", "                ", "self", ".", "add_module", "(", "\"pool%d\"", "%", "\n", "(", "mod_id", "+", "2", ")", ",", "nn", ".", "MaxPool2d", "(", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ")", "\n", "", "self", ".", "add_module", "(", "\"mod%d\"", "%", "(", "mod_id", "+", "2", ")", ",", "nn", ".", "Sequential", "(", "OrderedDict", "(", "blocks", ")", ")", ")", "\n", "\n", "# Pooling and predictor", "\n", "", "self", ".", "bn_out", "=", "norm_act", "(", "in_channels", ")", "\n", "if", "classes", "!=", "0", ":", "\n", "            ", "self", ".", "classifier", "=", "nn", ".", "Sequential", "(", "OrderedDict", "(", "[", "\n", "(", "\"avg_pool\"", ",", "GlobalAvgPool2d", "(", ")", ")", ",", "\n", "(", "\"fc\"", ",", "nn", ".", "Linear", "(", "in_channels", ",", "classes", ")", ")", "\n", "]", ")", ")", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.network.wider_resnet.WiderResNet.forward": [[251, 265], ["wider_resnet.WiderResNet.mod1", "wider_resnet.WiderResNet.mod2", "wider_resnet.WiderResNet.mod3", "wider_resnet.WiderResNet.mod4", "wider_resnet.WiderResNet.mod5", "wider_resnet.WiderResNet.mod6", "wider_resnet.WiderResNet.mod7", "wider_resnet.WiderResNet.bn_out", "hasattr", "wider_resnet.WiderResNet.pool2", "wider_resnet.WiderResNet.pool3", "wider_resnet.WiderResNet.pool4", "wider_resnet.WiderResNet.pool5", "wider_resnet.WiderResNet.pool6", "wider_resnet.WiderResNet.classifier"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "img", ")", ":", "\n", "        ", "out", "=", "self", ".", "mod1", "(", "img", ")", "\n", "out", "=", "self", ".", "mod2", "(", "self", ".", "pool2", "(", "out", ")", ")", "\n", "out", "=", "self", ".", "mod3", "(", "self", ".", "pool3", "(", "out", ")", ")", "\n", "out", "=", "self", ".", "mod4", "(", "self", ".", "pool4", "(", "out", ")", ")", "\n", "out", "=", "self", ".", "mod5", "(", "self", ".", "pool5", "(", "out", ")", ")", "\n", "out", "=", "self", ".", "mod6", "(", "self", ".", "pool6", "(", "out", ")", ")", "\n", "out", "=", "self", ".", "mod7", "(", "out", ")", "\n", "out", "=", "self", ".", "bn_out", "(", "out", ")", "\n", "\n", "if", "hasattr", "(", "self", ",", "\"classifier\"", ")", ":", "\n", "            ", "out", "=", "self", ".", "classifier", "(", "out", ")", "\n", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.network.wider_resnet.WiderResNetA2.__init__": [[288, 364], ["torch.Module.__init__", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "enumerate", "norm_act", "len", "ValueError", "collections.OrderedDict", "range", "wider_resnet.WiderResNetA2.add_module", "torch.Sequential", "torch.Sequential", "blocks.append", "wider_resnet.WiderResNetA2.add_module", "torch.Sequential", "torch.Sequential", "collections.OrderedDict", "functools.partial", "torch.MaxPool2d", "torch.MaxPool2d", "collections.OrderedDict", "torch.Conv2d", "torch.Conv2d", "functools.partial", "wider_resnet.IdentityResidualBlock", "wider_resnet.GlobalAvgPool2d", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.shachoi_RobustNet.transforms.joint_transforms.ClassUniform.__init__"], ["def", "__init__", "(", "self", ",", "\n", "structure", ",", "\n", "norm_act", "=", "bnrelu", ",", "\n", "classes", "=", "0", ",", "\n", "dilation", "=", "False", ",", "\n", "dist_bn", "=", "False", "\n", ")", ":", "\n", "        ", "super", "(", "WiderResNetA2", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dist_bn", "=", "dist_bn", "\n", "\n", "# If using distributed batch norm, use the encoding.nn as oppose to torch.nn", "\n", "\n", "\n", "nn", ".", "Dropout", "=", "nn", ".", "Dropout2d", "\n", "norm_act", "=", "bnrelu", "\n", "self", ".", "structure", "=", "structure", "\n", "self", ".", "dilation", "=", "dilation", "\n", "\n", "if", "len", "(", "structure", ")", "!=", "6", ":", "\n", "            ", "raise", "ValueError", "(", "\"Expected a structure with six values\"", ")", "\n", "\n", "# Initial layers", "\n", "", "self", ".", "mod1", "=", "torch", ".", "nn", ".", "Sequential", "(", "OrderedDict", "(", "[", "\n", "(", "\"conv1\"", ",", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ")", "\n", "]", ")", ")", "\n", "\n", "# Groups of residual blocks", "\n", "in_channels", "=", "64", "\n", "channels", "=", "[", "(", "128", ",", "128", ")", ",", "(", "256", ",", "256", ")", ",", "(", "512", ",", "512", ")", ",", "(", "512", ",", "1024", ")", ",", "(", "512", ",", "1024", ",", "2048", ")", ",", "\n", "(", "1024", ",", "2048", ",", "4096", ")", "]", "\n", "for", "mod_id", ",", "num", "in", "enumerate", "(", "structure", ")", ":", "\n", "# Create blocks for module", "\n", "            ", "blocks", "=", "[", "]", "\n", "for", "block_id", "in", "range", "(", "num", ")", ":", "\n", "                ", "if", "not", "dilation", ":", "\n", "                    ", "dil", "=", "1", "\n", "stride", "=", "2", "if", "block_id", "==", "0", "and", "2", "<=", "mod_id", "<=", "4", "else", "1", "\n", "", "else", ":", "\n", "                    ", "if", "mod_id", "==", "3", ":", "\n", "                        ", "dil", "=", "2", "\n", "", "elif", "mod_id", ">", "3", ":", "\n", "                        ", "dil", "=", "4", "\n", "", "else", ":", "\n", "                        ", "dil", "=", "1", "\n", "", "stride", "=", "2", "if", "block_id", "==", "0", "and", "mod_id", "==", "2", "else", "1", "\n", "\n", "", "if", "mod_id", "==", "4", ":", "\n", "                    ", "drop", "=", "partial", "(", "nn", ".", "Dropout", ",", "p", "=", "0.3", ")", "\n", "", "elif", "mod_id", "==", "5", ":", "\n", "                    ", "drop", "=", "partial", "(", "nn", ".", "Dropout", ",", "p", "=", "0.5", ")", "\n", "", "else", ":", "\n", "                    ", "drop", "=", "None", "\n", "\n", "", "blocks", ".", "append", "(", "(", "\n", "\"block%d\"", "%", "(", "block_id", "+", "1", ")", ",", "\n", "IdentityResidualBlock", "(", "in_channels", ",", "\n", "channels", "[", "mod_id", "]", ",", "norm_act", "=", "norm_act", ",", "\n", "stride", "=", "stride", ",", "dilation", "=", "dil", ",", "\n", "dropout", "=", "drop", ",", "dist_bn", "=", "self", ".", "dist_bn", ")", "\n", ")", ")", "\n", "\n", "# Update channels and p_keep", "\n", "in_channels", "=", "channels", "[", "mod_id", "]", "[", "-", "1", "]", "\n", "\n", "# Create module", "\n", "", "if", "mod_id", "<", "2", ":", "\n", "                ", "self", ".", "add_module", "(", "\"pool%d\"", "%", "\n", "(", "mod_id", "+", "2", ")", ",", "nn", ".", "MaxPool2d", "(", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ")", "\n", "", "self", ".", "add_module", "(", "\"mod%d\"", "%", "(", "mod_id", "+", "2", ")", ",", "nn", ".", "Sequential", "(", "OrderedDict", "(", "blocks", ")", ")", ")", "\n", "\n", "# Pooling and predictor", "\n", "", "self", ".", "bn_out", "=", "norm_act", "(", "in_channels", ")", "\n", "if", "classes", "!=", "0", ":", "\n", "            ", "self", ".", "classifier", "=", "nn", ".", "Sequential", "(", "OrderedDict", "(", "[", "\n", "(", "\"avg_pool\"", ",", "GlobalAvgPool2d", "(", ")", ")", ",", "\n", "(", "\"fc\"", ",", "nn", ".", "Linear", "(", "in_channels", ",", "classes", ")", ")", "\n", "]", ")", ")", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.network.wider_resnet.WiderResNetA2.forward": [[366, 379], ["wider_resnet.WiderResNetA2.mod1", "wider_resnet.WiderResNetA2.mod2", "wider_resnet.WiderResNetA2.mod3", "wider_resnet.WiderResNetA2.mod4", "wider_resnet.WiderResNetA2.mod5", "wider_resnet.WiderResNetA2.mod6", "wider_resnet.WiderResNetA2.mod7", "wider_resnet.WiderResNetA2.bn_out", "hasattr", "wider_resnet.WiderResNetA2.pool2", "wider_resnet.WiderResNetA2.pool3", "wider_resnet.WiderResNetA2.classifier"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "img", ")", ":", "\n", "        ", "out", "=", "self", ".", "mod1", "(", "img", ")", "\n", "out", "=", "self", ".", "mod2", "(", "self", ".", "pool2", "(", "out", ")", ")", "\n", "out", "=", "self", ".", "mod3", "(", "self", ".", "pool3", "(", "out", ")", ")", "\n", "out", "=", "self", ".", "mod4", "(", "out", ")", "\n", "out", "=", "self", ".", "mod5", "(", "out", ")", "\n", "out", "=", "self", ".", "mod6", "(", "out", ")", "\n", "out", "=", "self", ".", "mod7", "(", "out", ")", "\n", "out", "=", "self", ".", "bn_out", "(", "out", ")", "\n", "\n", "if", "hasattr", "(", "self", ",", "\"classifier\"", ")", ":", "\n", "            ", "return", "self", ".", "classifier", "(", "out", ")", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.network.wider_resnet.bnrelu": [[43, 49], ["torch.Sequential", "network.Norm2d", "torch.ReLU"], "function", ["home.repos.pwc.inspect_result.shachoi_RobustNet.network.mynn.Norm2d"], ["def", "bnrelu", "(", "channels", ")", ":", "\n", "    ", "\"\"\"\n    Single Layer BN and Relui\n    \"\"\"", "\n", "return", "nn", ".", "Sequential", "(", "mynn", ".", "Norm2d", "(", "channels", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.network.switchwhiten.SwitchWhiten2d.__init__": [[22, 67], ["torch.nn.modules.module.Module.__init__", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "switchwhiten.SwitchWhiten2d.register_buffer", "switchwhiten.SwitchWhiten2d.register_buffer", "switchwhiten.SwitchWhiten2d.reset_parameters", "ValueError", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "switchwhiten.SwitchWhiten2d.register_parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "switchwhiten.SwitchWhiten2d.register_parameter", "switchwhiten.SwitchWhiten2d.register_parameter", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.eye().unsqueeze().repeat", "torch.eye().unsqueeze().repeat", "torch.eye().unsqueeze().repeat", "torch.eye().unsqueeze().repeat", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.eye().unsqueeze", "torch.eye().unsqueeze", "torch.eye().unsqueeze", "torch.eye().unsqueeze", "torch.eye", "torch.eye", "torch.eye", "torch.eye"], "methods", ["home.repos.pwc.inspect_result.shachoi_RobustNet.transforms.joint_transforms.ClassUniform.__init__", "home.repos.pwc.inspect_result.shachoi_RobustNet.network.switchwhiten.SwitchWhiten2d.reset_parameters"], ["def", "__init__", "(", "self", ",", "\n", "num_features", ",", "\n", "num_pergroup", "=", "16", ",", "\n", "sw_type", "=", "2", ",", "\n", "T", "=", "5", ",", "\n", "tie_weight", "=", "False", ",", "\n", "eps", "=", "1e-5", ",", "\n", "momentum", "=", "0.99", ",", "\n", "affine", "=", "True", ")", ":", "\n", "        ", "super", "(", "SwitchWhiten2d", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "sw_type", "not", "in", "[", "2", ",", "3", ",", "5", "]", ":", "\n", "            ", "raise", "ValueError", "(", "'sw_type should be in [2, 3, 5], '", "\n", "'but got {}'", ".", "format", "(", "sw_type", ")", ")", "\n", "", "assert", "num_features", "%", "num_pergroup", "==", "0", "\n", "self", ".", "num_features", "=", "num_features", "\n", "self", ".", "num_pergroup", "=", "num_pergroup", "\n", "self", ".", "num_groups", "=", "num_features", "//", "num_pergroup", "\n", "self", ".", "sw_type", "=", "sw_type", "\n", "self", ".", "T", "=", "T", "\n", "self", ".", "tie_weight", "=", "tie_weight", "\n", "self", ".", "eps", "=", "eps", "\n", "self", ".", "momentum", "=", "momentum", "\n", "self", ".", "affine", "=", "affine", "\n", "num_components", "=", "sw_type", "\n", "\n", "self", ".", "sw_mean_weight", "=", "Parameter", "(", "torch", ".", "ones", "(", "num_components", ")", ")", "\n", "if", "not", "self", ".", "tie_weight", ":", "\n", "            ", "self", ".", "sw_var_weight", "=", "Parameter", "(", "torch", ".", "ones", "(", "num_components", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "register_parameter", "(", "'sw_var_weight'", ",", "None", ")", "\n", "\n", "", "if", "self", ".", "affine", ":", "\n", "            ", "self", ".", "weight", "=", "Parameter", "(", "torch", ".", "ones", "(", "num_features", ")", ")", "\n", "self", ".", "bias", "=", "Parameter", "(", "torch", ".", "zeros", "(", "num_features", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "register_parameter", "(", "'weight'", ",", "None", ")", "\n", "self", ".", "register_parameter", "(", "'bias'", ",", "None", ")", "\n", "\n", "", "self", ".", "register_buffer", "(", "'running_mean'", ",", "\n", "torch", ".", "zeros", "(", "self", ".", "num_groups", ",", "num_pergroup", ",", "1", ")", ")", "\n", "self", ".", "register_buffer", "(", "\n", "'running_cov'", ",", "\n", "torch", ".", "eye", "(", "num_pergroup", ")", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "self", ".", "num_groups", ",", "1", ",", "1", ")", ")", "\n", "\n", "self", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.network.switchwhiten.SwitchWhiten2d.reset_parameters": [[68, 77], ["switchwhiten.SwitchWhiten2d.running_mean.zero_", "switchwhiten.SwitchWhiten2d.running_cov.zero_", "torch.init.ones_", "torch.init.ones_", "torch.init.ones_", "torch.init.ones_", "torch.init.ones_", "torch.init.ones_", "torch.init.zeros_", "torch.init.zeros_"], "methods", ["None"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "self", ".", "running_mean", ".", "zero_", "(", ")", "\n", "self", ".", "running_cov", ".", "zero_", "(", ")", "\n", "nn", ".", "init", ".", "ones_", "(", "self", ".", "sw_mean_weight", ")", "\n", "if", "not", "self", ".", "tie_weight", ":", "\n", "            ", "nn", ".", "init", ".", "ones_", "(", "self", ".", "sw_var_weight", ")", "\n", "", "if", "self", ".", "affine", ":", "\n", "            ", "nn", ".", "init", ".", "ones_", "(", "self", ".", "weight", ")", "\n", "nn", ".", "init", ".", "zeros_", "(", "self", ".", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.network.switchwhiten.SwitchWhiten2d.__repr__": [[78, 83], ["None"], "methods", ["None"], ["", "", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "(", "'{name}({num_features}, num_pergroup={num_pergroup}, '", "\n", "'sw_type={sw_type}, T={T}, tie_weight={tie_weight}, '", "\n", "'eps={eps}, momentum={momentum}, affine={affine})'", ".", "format", "(", "\n", "name", "=", "self", ".", "__class__", ".", "__name__", ",", "**", "self", ".", "__dict__", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.network.switchwhiten.SwitchWhiten2d.forward": [[84, 184], ["x.view.view.size", "x.view.view.transpose().contiguous", "in_data_t.view.view.view", "torch.autograd.Variable.view().expand().contiguous", "torch.autograd.Variable.view().expand().contiguous", "torch.autograd.Variable.view", "torch.autograd.Variable.view", "torch.autograd.Variable.view().expand().contiguous", "torch.autograd.Variable.view().expand().contiguous", "torch.autograd.Variable.view", "torch.autograd.Variable.view", "x.view.view.view", "x.view.view.data.new().resize_", "torch.nn.init.eye_().view().expand", "torch.nn.init.eye_().view().expand", "torch.nn.init.eye_().view().expand", "torch.nn.init.eye_().view().expand", "x.view.view.mean", "torch.bmm().div", "torch.bmm().div", "torch.bmm().div", "torch.bmm().div", "torch.Softmax", "torch.Softmax", "torch.Softmax.", "cov.size", "torch.eye().to().expand", "torch.eye().to().expand", "torch.eye().to().expand", "torch.eye().to().expand", "range", "torch.baddbmm.mul_", "torch.baddbmm.mul_", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "x_hat.view.view.view", "in_data_t.view.view.mean", "torch.bmm().div", "torch.bmm().div", "torch.bmm().div", "torch.bmm().div", "switchwhiten.SwitchWhiten2d.running_mean.mul_", "switchwhiten.SwitchWhiten2d.running_mean.add_", "switchwhiten.SwitchWhiten2d.running_cov.mul_", "switchwhiten.SwitchWhiten2d.running_cov.add_", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "x.view.view.view", "x.view.view.mean().view", "mean_ln.expand().contiguous().view.expand().contiguous().view.expand().contiguous().view", "x.view.view.var().view", "var_ln.expand().contiguous().view.expand().contiguous().view.expand().contiguous().view", "torch.diag_embed", "torch.diag_embed", "torch.diag_embed", "torch.diag_embed", "torch.diag_embed", "torch.diag_embed", "torch.diag_embed", "torch.diag_embed", "torch.Softmax.", "torch.baddbmm", "torch.baddbmm", "torch.baddbmm", "torch.baddbmm", "rTr.sqrt", "x.view.view.transpose", "torch.autograd.Variable.view().expand", "torch.autograd.Variable.view().expand", "torch.autograd.Variable.view().expand", "torch.autograd.Variable.view().expand", "x.view.view.data.new", "torch.nn.init.eye_().view", "torch.nn.init.eye_().view", "torch.nn.init.eye_().view", "torch.nn.init.eye_().view", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.matrix_power", "torch.matrix_power", "torch.matrix_power", "torch.matrix_power", "switchwhiten.SwitchWhiten2d.bias.view", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "x.view.view.mean", "mean_ln.expand().contiguous().view.expand().contiguous().view.expand().contiguous", "x.view.view.var", "var_ln.expand().contiguous().view.expand().contiguous().view.expand().contiguous", "switchwhiten.SwitchWhiten2d.weight.view", "in_data_bn.transpose", "torch.autograd.Variable.view", "torch.autograd.Variable.view", "torch.autograd.Variable.view", "torch.autograd.Variable.view", "torch.nn.init.eye_", "torch.nn.init.eye_", "torch.nn.init.eye_", "torch.nn.init.eye_", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "mean_ln.expand().contiguous().view.expand().contiguous().view.expand", "var_ln.expand().contiguous().view.expand().contiguous().view.expand"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "N", ",", "C", ",", "H", ",", "W", "=", "x", ".", "size", "(", ")", "\n", "c", ",", "g", "=", "self", ".", "num_pergroup", ",", "self", ".", "num_groups", "\n", "\n", "in_data_t", "=", "x", ".", "transpose", "(", "0", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "# g x c x (N x H x W)", "\n", "in_data_t", "=", "in_data_t", ".", "view", "(", "g", ",", "c", ",", "-", "1", ")", "\n", "\n", "# calculate batch mean and covariance", "\n", "if", "self", ".", "training", ":", "\n", "# g x c x 1", "\n", "            ", "mean_bn", "=", "in_data_t", ".", "mean", "(", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "in_data_bn", "=", "in_data_t", "-", "mean_bn", "\n", "# g x c x c", "\n", "cov_bn", "=", "torch", ".", "bmm", "(", "in_data_bn", ",", "\n", "in_data_bn", ".", "transpose", "(", "1", ",", "2", ")", ")", ".", "div", "(", "H", "*", "W", "*", "N", ")", "\n", "\n", "self", ".", "running_mean", ".", "mul_", "(", "self", ".", "momentum", ")", "\n", "self", ".", "running_mean", ".", "add_", "(", "(", "1", "-", "self", ".", "momentum", ")", "*", "mean_bn", ".", "data", ")", "\n", "self", ".", "running_cov", ".", "mul_", "(", "self", ".", "momentum", ")", "\n", "self", ".", "running_cov", ".", "add_", "(", "(", "1", "-", "self", ".", "momentum", ")", "*", "cov_bn", ".", "data", ")", "\n", "", "else", ":", "\n", "            ", "mean_bn", "=", "torch", ".", "autograd", ".", "Variable", "(", "self", ".", "running_mean", ")", "\n", "cov_bn", "=", "torch", ".", "autograd", ".", "Variable", "(", "self", ".", "running_cov", ")", "\n", "\n", "", "mean_bn", "=", "mean_bn", ".", "view", "(", "1", ",", "g", ",", "c", ",", "1", ")", ".", "expand", "(", "N", ",", "g", ",", "c", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "mean_bn", "=", "mean_bn", ".", "view", "(", "N", "*", "g", ",", "c", ",", "1", ")", "\n", "cov_bn", "=", "cov_bn", ".", "view", "(", "1", ",", "g", ",", "c", ",", "c", ")", ".", "expand", "(", "N", ",", "g", ",", "c", ",", "c", ")", ".", "contiguous", "(", ")", "\n", "cov_bn", "=", "cov_bn", ".", "view", "(", "N", "*", "g", ",", "c", ",", "c", ")", "\n", "\n", "# (N x g) x c x (H x W)", "\n", "in_data", "=", "x", ".", "view", "(", "N", "*", "g", ",", "c", ",", "-", "1", ")", "\n", "\n", "eye", "=", "in_data", ".", "data", ".", "new", "(", ")", ".", "resize_", "(", "c", ",", "c", ")", "\n", "eye", "=", "torch", ".", "nn", ".", "init", ".", "eye_", "(", "eye", ")", ".", "view", "(", "1", ",", "c", ",", "c", ")", ".", "expand", "(", "N", "*", "g", ",", "c", ",", "c", ")", "\n", "\n", "# calculate other statistics", "\n", "# (N x g) x c x 1", "\n", "mean_in", "=", "in_data", ".", "mean", "(", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "x_in", "=", "in_data", "-", "mean_in", "\n", "# (N x g) x c x c", "\n", "cov_in", "=", "torch", ".", "bmm", "(", "x_in", ",", "torch", ".", "transpose", "(", "x_in", ",", "1", ",", "2", ")", ")", ".", "div", "(", "H", "*", "W", ")", "\n", "if", "self", ".", "sw_type", "in", "[", "3", ",", "5", "]", ":", "\n", "            ", "x", "=", "x", ".", "view", "(", "N", ",", "-", "1", ")", "\n", "mean_ln", "=", "x", ".", "mean", "(", "-", "1", ",", "keepdim", "=", "True", ")", ".", "view", "(", "N", ",", "1", ",", "1", ",", "1", ")", "\n", "mean_ln", "=", "mean_ln", ".", "expand", "(", "N", ",", "g", ",", "1", ",", "1", ")", ".", "contiguous", "(", ")", ".", "view", "(", "N", "*", "g", ",", "1", ",", "1", ")", "\n", "var_ln", "=", "x", ".", "var", "(", "-", "1", ",", "keepdim", "=", "True", ")", ".", "view", "(", "N", ",", "1", ",", "1", ",", "1", ")", "\n", "var_ln", "=", "var_ln", ".", "expand", "(", "N", ",", "g", ",", "1", ",", "1", ")", ".", "contiguous", "(", ")", ".", "view", "(", "N", "*", "g", ",", "1", ",", "1", ")", "\n", "var_ln", "=", "var_ln", "*", "eye", "\n", "", "if", "self", ".", "sw_type", "==", "5", ":", "\n", "            ", "var_bn", "=", "torch", ".", "diag_embed", "(", "torch", ".", "diagonal", "(", "cov_bn", ",", "dim1", "=", "-", "2", ",", "dim2", "=", "-", "1", ")", ")", "\n", "var_in", "=", "torch", ".", "diag_embed", "(", "torch", ".", "diagonal", "(", "cov_in", ",", "dim1", "=", "-", "2", ",", "dim2", "=", "-", "1", ")", ")", "\n", "\n", "# calculate weighted average of mean and covariance", "\n", "", "softmax", "=", "nn", ".", "Softmax", "(", "0", ")", "\n", "mean_weight", "=", "softmax", "(", "self", ".", "sw_mean_weight", ")", "\n", "if", "not", "self", ".", "tie_weight", ":", "\n", "            ", "var_weight", "=", "softmax", "(", "self", ".", "sw_var_weight", ")", "\n", "", "else", ":", "\n", "            ", "var_weight", "=", "mean_weight", "\n", "\n", "# BW + IW", "\n", "", "if", "self", ".", "sw_type", "==", "2", ":", "\n", "# (N x g) x c x 1", "\n", "            ", "mean", "=", "mean_weight", "[", "0", "]", "*", "mean_bn", "+", "mean_weight", "[", "1", "]", "*", "mean_in", "\n", "cov", "=", "var_weight", "[", "0", "]", "*", "cov_bn", "+", "var_weight", "[", "1", "]", "*", "cov_in", "+", "self", ".", "eps", "*", "eye", "\n", "# BW + IW + LN", "\n", "", "elif", "self", ".", "sw_type", "==", "3", ":", "\n", "            ", "mean", "=", "mean_weight", "[", "0", "]", "*", "mean_bn", "+", "mean_weight", "[", "1", "]", "*", "mean_in", "+", "mean_weight", "[", "2", "]", "*", "mean_ln", "\n", "cov", "=", "var_weight", "[", "0", "]", "*", "cov_bn", "+", "var_weight", "[", "1", "]", "*", "cov_in", "+", "var_weight", "[", "2", "]", "*", "var_ln", "+", "self", ".", "eps", "*", "eye", "\n", "# BW + IW + BN + IN + LN", "\n", "", "elif", "self", ".", "sw_type", "==", "5", ":", "\n", "            ", "mean", "=", "(", "mean_weight", "[", "0", "]", "+", "mean_weight", "[", "2", "]", ")", "*", "mean_bn", "+", "(", "mean_weight", "[", "1", "]", "+", "mean_weight", "[", "3", "]", ")", "*", "mean_in", "+", "mean_weight", "[", "4", "]", "*", "mean_ln", "\n", "cov", "=", "var_weight", "[", "0", "]", "*", "cov_bn", "+", "var_weight", "[", "1", "]", "*", "cov_in", "+", "var_weight", "[", "0", "]", "*", "var_bn", "+", "var_weight", "[", "1", "]", "*", "var_in", "+", "var_weight", "[", "4", "]", "*", "var_ln", "+", "self", ".", "eps", "*", "eye", "\n", "\n", "# perform whitening using Newton's iteration", "\n", "", "Ng", ",", "c", ",", "_", "=", "cov", ".", "size", "(", ")", "\n", "P", "=", "torch", ".", "eye", "(", "c", ")", ".", "to", "(", "cov", ")", ".", "expand", "(", "Ng", ",", "c", ",", "c", ")", "\n", "# reciprocal of trace of covariance", "\n", "rTr", "=", "(", "cov", "*", "P", ")", ".", "sum", "(", "(", "1", ",", "2", ")", ",", "keepdim", "=", "True", ")", ".", "reciprocal_", "(", ")", "\n", "cov_N", "=", "cov", "*", "rTr", "\n", "for", "k", "in", "range", "(", "self", ".", "T", ")", ":", "\n", "            ", "P", "=", "torch", ".", "baddbmm", "(", "1.5", ",", "P", ",", "-", "0.5", ",", "torch", ".", "matrix_power", "(", "P", ",", "3", ")", ",", "cov_N", ")", "\n", "# whiten matrix: the matrix inverse of covariance, i.e., cov^{-1/2}", "\n", "", "wm", "=", "P", ".", "mul_", "(", "rTr", ".", "sqrt", "(", ")", ")", "\n", "\n", "x_hat", "=", "torch", ".", "bmm", "(", "wm", ",", "in_data", "-", "mean", ")", "\n", "x_hat", "=", "x_hat", ".", "view", "(", "N", ",", "C", ",", "H", ",", "W", ")", "\n", "if", "self", ".", "affine", ":", "\n", "            ", "x_hat", "=", "x_hat", "*", "self", ".", "weight", ".", "view", "(", "1", ",", "self", ".", "num_features", ",", "1", ",", "1", ")", "+", "self", ".", "bias", ".", "view", "(", "1", ",", "self", ".", "num_features", ",", "1", ",", "1", ")", "\n", "\n", "", "return", "x_hat", "\n", "", "", ""]], "home.repos.pwc.inspect_result.shachoi_RobustNet.network.Resnet.BasicBlock.__init__": [[68, 102], ["torch.Module.__init__", "Resnet.conv3x3", "network.Norm2d", "Resnet.conv3x3", "network.Norm2d", "network.instance_whitening.InstanceWhitening", "torch.ReLU", "torch.ReLU", "torch.ReLU", "network.instance_whitening.InstanceWhitening", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "network.sync_switchwhiten.SyncSwitchWhiten2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.shachoi_RobustNet.transforms.joint_transforms.ClassUniform.__init__", "home.repos.pwc.inspect_result.shachoi_RobustNet.network.Resnet.conv3x3", "home.repos.pwc.inspect_result.shachoi_RobustNet.network.mynn.Norm2d", "home.repos.pwc.inspect_result.shachoi_RobustNet.network.Resnet.conv3x3", "home.repos.pwc.inspect_result.shachoi_RobustNet.network.mynn.Norm2d"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "iw", "=", "0", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "mynn", ".", "Norm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "mynn", ".", "Norm2d", "(", "planes", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n", "self", ".", "iw", "=", "iw", "\n", "if", "self", ".", "iw", "==", "1", ":", "\n", "            ", "self", ".", "instance_norm_layer", "=", "InstanceWhitening", "(", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", "\n", "", "elif", "self", ".", "iw", "==", "2", ":", "\n", "            ", "self", ".", "instance_norm_layer", "=", "InstanceWhitening", "(", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", "\n", "", "elif", "self", ".", "iw", "==", "3", ":", "\n", "            ", "self", ".", "instance_norm_layer", "=", "nn", ".", "InstanceNorm2d", "(", "planes", "*", "self", ".", "expansion", ",", "affine", "=", "False", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "", "elif", "self", ".", "iw", "==", "4", ":", "\n", "            ", "self", ".", "instance_norm_layer", "=", "nn", ".", "InstanceNorm2d", "(", "planes", "*", "self", ".", "expansion", ",", "affine", "=", "True", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "", "elif", "self", ".", "iw", "==", "5", ":", "\n", "            ", "self", ".", "instance_norm_layer", "=", "SyncSwitchWhiten2d", "(", "planes", "*", "self", ".", "expansion", ",", "\n", "num_pergroup", "=", "16", ",", "\n", "sw_type", "=", "2", ",", "\n", "T", "=", "5", ",", "\n", "tie_weight", "=", "False", ",", "\n", "eps", "=", "1e-5", ",", "\n", "momentum", "=", "0.99", ",", "\n", "affine", "=", "True", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.network.Resnet.BasicBlock.forward": [[103, 135], ["Resnet.BasicBlock.conv1", "Resnet.BasicBlock.bn1", "Resnet.BasicBlock.relu", "Resnet.BasicBlock.conv2", "Resnet.BasicBlock.bn2", "Resnet.BasicBlock.relu", "len", "print", "Resnet.BasicBlock.downsample", "Resnet.BasicBlock.instance_norm_layer", "w_arr.append", "Resnet.BasicBlock.instance_norm_layer"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x_tuple", ")", ":", "\n", "        ", "if", "len", "(", "x_tuple", ")", "==", "2", ":", "\n", "            ", "w_arr", "=", "x_tuple", "[", "1", "]", "\n", "x", "=", "x_tuple", "[", "0", "]", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"error!!!\"", ")", "\n", "return", "\n", "\n", "", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "\n", "if", "self", ".", "iw", ">=", "1", ":", "\n", "            ", "if", "self", ".", "iw", "==", "1", "or", "self", ".", "iw", "==", "2", ":", "\n", "                ", "out", ",", "w", "=", "self", ".", "instance_norm_layer", "(", "out", ")", "\n", "w_arr", ".", "append", "(", "w", ")", "\n", "", "else", ":", "\n", "                ", "out", "=", "self", ".", "instance_norm_layer", "(", "out", ")", "\n", "\n", "", "", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "[", "out", ",", "w_arr", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.network.Resnet.Bottleneck.__init__": [[143, 180], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "network.Norm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "network.Norm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "network.Norm2d", "network.instance_whitening.InstanceWhitening", "torch.ReLU", "torch.ReLU", "torch.ReLU", "network.instance_whitening.InstanceWhitening", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "network.sync_switchwhiten.SyncSwitchWhiten2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.shachoi_RobustNet.transforms.joint_transforms.ClassUniform.__init__", "home.repos.pwc.inspect_result.shachoi_RobustNet.network.mynn.Norm2d", "home.repos.pwc.inspect_result.shachoi_RobustNet.network.mynn.Norm2d", "home.repos.pwc.inspect_result.shachoi_RobustNet.network.mynn.Norm2d"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "iw", "=", "0", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "mynn", ".", "Norm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "mynn", ".", "Norm2d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", "*", "self", ".", "expansion", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "mynn", ".", "Norm2d", "(", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n", "self", ".", "iw", "=", "iw", "\n", "if", "self", ".", "iw", "==", "1", ":", "\n", "            ", "self", ".", "instance_norm_layer", "=", "InstanceWhitening", "(", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", "\n", "", "elif", "self", ".", "iw", "==", "2", ":", "\n", "            ", "self", ".", "instance_norm_layer", "=", "InstanceWhitening", "(", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", "\n", "", "elif", "self", ".", "iw", "==", "3", ":", "\n", "            ", "self", ".", "instance_norm_layer", "=", "nn", ".", "InstanceNorm2d", "(", "planes", "*", "self", ".", "expansion", ",", "affine", "=", "False", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "", "elif", "self", ".", "iw", "==", "4", ":", "\n", "            ", "self", ".", "instance_norm_layer", "=", "nn", ".", "InstanceNorm2d", "(", "planes", "*", "self", ".", "expansion", ",", "affine", "=", "True", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "", "elif", "self", ".", "iw", "==", "5", ":", "\n", "            ", "self", ".", "instance_norm_layer", "=", "SyncSwitchWhiten2d", "(", "planes", "*", "self", ".", "expansion", ",", "\n", "num_pergroup", "=", "16", ",", "\n", "sw_type", "=", "2", ",", "\n", "T", "=", "5", ",", "\n", "tie_weight", "=", "False", ",", "\n", "eps", "=", "1e-5", ",", "\n", "momentum", "=", "0.99", ",", "\n", "affine", "=", "True", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.network.Resnet.Bottleneck.forward": [[181, 217], ["Resnet.Bottleneck.conv1", "Resnet.Bottleneck.bn1", "Resnet.Bottleneck.relu", "Resnet.Bottleneck.conv2", "Resnet.Bottleneck.bn2", "Resnet.Bottleneck.relu", "Resnet.Bottleneck.conv3", "Resnet.Bottleneck.bn3", "Resnet.Bottleneck.relu", "len", "print", "Resnet.Bottleneck.downsample", "Resnet.Bottleneck.instance_norm_layer", "w_arr.append", "Resnet.Bottleneck.instance_norm_layer"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x_tuple", ")", ":", "\n", "        ", "if", "len", "(", "x_tuple", ")", "==", "2", ":", "\n", "            ", "w_arr", "=", "x_tuple", "[", "1", "]", "\n", "x", "=", "x_tuple", "[", "0", "]", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"error!!!\"", ")", "\n", "return", "\n", "\n", "", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "\n", "if", "self", ".", "iw", ">=", "1", ":", "\n", "            ", "if", "self", ".", "iw", "==", "1", "or", "self", ".", "iw", "==", "2", ":", "\n", "                ", "out", ",", "w", "=", "self", ".", "instance_norm_layer", "(", "out", ")", "\n", "w_arr", ".", "append", "(", "w", ")", "\n", "", "else", ":", "\n", "                ", "out", "=", "self", ".", "instance_norm_layer", "(", "out", ")", "\n", "\n", "", "", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "[", "out", ",", "w_arr", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.network.Resnet.ResNet3X3.__init__": [[224, 333], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "Resnet.ResNet3X3._make_layer", "Resnet.ResNet3X3._make_layer", "Resnet.ResNet3X3._make_layer", "Resnet.ResNet3X3._make_layer", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.Linear", "torch.Linear", "torch.Linear", "Resnet.ResNet3X3.modules", "network.instance_whitening.InstanceWhitening", "torch.ReLU", "torch.ReLU", "torch.ReLU", "network.instance_whitening.InstanceWhitening", "torch.ReLU", "torch.ReLU", "torch.ReLU", "network.instance_whitening.InstanceWhitening", "torch.ReLU", "torch.ReLU", "torch.ReLU", "isinstance", "network.instance_whitening.InstanceWhitening", "torch.ReLU", "torch.ReLU", "torch.ReLU", "network.instance_whitening.InstanceWhitening", "torch.ReLU", "torch.ReLU", "torch.ReLU", "network.instance_whitening.InstanceWhitening", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "isinstance", "isinstance", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "network.sync_switchwhiten.SyncSwitchWhiten2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "network.Norm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "network.sync_switchwhiten.SyncSwitchWhiten2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "network.Norm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "network.sync_switchwhiten.SyncSwitchWhiten2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "network.Norm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.shachoi_RobustNet.transforms.joint_transforms.ClassUniform.__init__", "home.repos.pwc.inspect_result.shachoi_RobustNet.network.Resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.shachoi_RobustNet.network.Resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.shachoi_RobustNet.network.Resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.shachoi_RobustNet.network.Resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.shachoi_RobustNet.network.mynn.Norm2d", "home.repos.pwc.inspect_result.shachoi_RobustNet.network.mynn.Norm2d", "home.repos.pwc.inspect_result.shachoi_RobustNet.network.mynn.Norm2d"], ["def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "wt_layer", "=", "None", ",", "num_classes", "=", "1000", ")", ":", "\n", "        ", "self", ".", "inplanes", "=", "128", "\n", "super", "(", "ResNet3X3", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# self.conv1 = nn.Conv2d(3, 64, kernel_size=7, stride=2, padding=3,", "\n", "#                        bias=False)", "\n", "# self.bn1 = mynn.Norm2d(64)", "\n", "# self.relu = nn.ReLU(inplace=True)", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "\n", "bias", "=", "False", ")", "\n", "\n", "if", "wt_layer", "[", "0", "]", "==", "1", ":", "\n", "            ", "self", ".", "bn1", "=", "InstanceWhitening", "(", "64", ")", "\n", "self", ".", "relu1", "=", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", "\n", "", "elif", "wt_layer", "[", "0", "]", "==", "2", ":", "\n", "            ", "self", ".", "bn1", "=", "InstanceWhitening", "(", "64", ")", "\n", "self", ".", "relu1", "=", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", "\n", "", "elif", "wt_layer", "[", "0", "]", "==", "3", ":", "\n", "            ", "self", ".", "bn1", "=", "nn", ".", "InstanceNorm2d", "(", "64", ",", "affine", "=", "False", ")", "\n", "self", ".", "relu1", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "", "elif", "wt_layer", "[", "0", "]", "==", "4", ":", "\n", "            ", "self", ".", "bn1", "=", "nn", ".", "InstanceNorm2d", "(", "64", ",", "affine", "=", "True", ")", "\n", "self", ".", "relu1", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "", "elif", "wt_layer", "[", "0", "]", "==", "5", ":", "\n", "            ", "self", ".", "bn1", "=", "SyncSwitchWhiten2d", "(", "64", ",", "\n", "num_pergroup", "=", "16", ",", "\n", "sw_type", "=", "2", ",", "\n", "T", "=", "5", ",", "\n", "tie_weight", "=", "False", ",", "\n", "eps", "=", "1e-5", ",", "\n", "momentum", "=", "0.99", ",", "\n", "affine", "=", "True", ")", "\n", "self", ".", "relu1", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "bn1", "=", "mynn", ".", "Norm2d", "(", "64", ")", "\n", "self", ".", "relu1", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "\n", "bias", "=", "False", ")", "\n", "if", "wt_layer", "[", "1", "]", "==", "1", ":", "\n", "            ", "self", ".", "bn2", "=", "InstanceWhitening", "(", "64", ")", "\n", "self", ".", "relu2", "=", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", "\n", "", "elif", "wt_layer", "[", "1", "]", "==", "2", ":", "\n", "            ", "self", ".", "bn2", "=", "InstanceWhitening", "(", "64", ")", "\n", "self", ".", "relu2", "=", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", "\n", "", "elif", "wt_layer", "[", "1", "]", "==", "3", ":", "\n", "            ", "self", ".", "bn2", "=", "nn", ".", "InstanceNorm2d", "(", "64", ",", "affine", "=", "False", ")", "\n", "self", ".", "relu2", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "", "elif", "wt_layer", "[", "1", "]", "==", "4", ":", "\n", "            ", "self", ".", "bn2", "=", "nn", ".", "InstanceNorm2d", "(", "64", ",", "affine", "=", "True", ")", "\n", "self", ".", "relu2", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "", "elif", "wt_layer", "[", "1", "]", "==", "5", ":", "\n", "            ", "self", ".", "bn2", "=", "SyncSwitchWhiten2d", "(", "64", ",", "\n", "num_pergroup", "=", "16", ",", "\n", "sw_type", "=", "2", ",", "\n", "T", "=", "5", ",", "\n", "tie_weight", "=", "False", ",", "\n", "eps", "=", "1e-5", ",", "\n", "momentum", "=", "0.99", ",", "\n", "affine", "=", "True", ")", "\n", "self", ".", "relu2", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "bn2", "=", "mynn", ".", "Norm2d", "(", "64", ")", "\n", "self", ".", "relu2", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "64", ",", "128", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "\n", "bias", "=", "False", ")", "\n", "if", "wt_layer", "[", "2", "]", "==", "1", ":", "\n", "            ", "self", ".", "bn3", "=", "InstanceWhitening", "(", "self", ".", "inplanes", ")", "\n", "self", ".", "relu3", "=", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", "\n", "", "elif", "wt_layer", "[", "2", "]", "==", "2", ":", "\n", "            ", "self", ".", "bn3", "=", "InstanceWhitening", "(", "self", ".", "inplanes", ")", "\n", "self", ".", "relu3", "=", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", "\n", "", "elif", "wt_layer", "[", "2", "]", "==", "3", ":", "\n", "            ", "self", ".", "bn3", "=", "nn", ".", "InstanceNorm2d", "(", "self", ".", "inplanes", ",", "affine", "=", "False", ")", "\n", "self", ".", "relu3", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "", "elif", "wt_layer", "[", "2", "]", "==", "4", ":", "\n", "            ", "self", ".", "bn3", "=", "nn", ".", "InstanceNorm2d", "(", "self", ".", "inplanes", ",", "affine", "=", "True", ")", "\n", "self", ".", "relu3", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "", "elif", "wt_layer", "[", "2", "]", "==", "5", ":", "\n", "            ", "self", ".", "bn3", "=", "SyncSwitchWhiten2d", "(", "self", ".", "inplanes", ",", "\n", "num_pergroup", "=", "16", ",", "\n", "sw_type", "=", "2", ",", "\n", "T", "=", "5", ",", "\n", "tie_weight", "=", "False", ",", "\n", "eps", "=", "1e-5", ",", "\n", "momentum", "=", "0.99", ",", "\n", "affine", "=", "True", ")", "\n", "self", ".", "relu3", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "bn3", "=", "mynn", ".", "Norm2d", "(", "self", ".", "inplanes", ")", "\n", "self", ".", "relu3", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ",", "wt_layer", "=", "wt_layer", "[", "3", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ",", "wt_layer", "=", "wt_layer", "[", "4", "]", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ",", "wt_layer", "=", "wt_layer", "[", "5", "]", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ",", "wt_layer", "=", "wt_layer", "[", "6", "]", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AvgPool2d", "(", "7", ",", "stride", "=", "1", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "512", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "self", ".", "wt_layer", "=", "wt_layer", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", "or", "isinstance", "(", "m", ",", "nn", ".", "SyncBatchNorm", ")", ":", "\n", "                ", "if", "m", ".", "weight", "is", "not", "None", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.network.Resnet.ResNet3X3._make_layer": [[334, 351], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "network.Norm2d", "block"], "methods", ["home.repos.pwc.inspect_result.shachoi_RobustNet.network.mynn.Norm2d"], ["", "", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ",", "wt_layer", "=", "0", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "mynn", ".", "Norm2d", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ",", "iw", "=", "0", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "index", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "\n", "iw", "=", "0", "if", "(", "wt_layer", ">", "0", "and", "index", "<", "blocks", "-", "1", ")", "else", "wt_layer", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.network.Resnet.ResNet3X3.forward": [[352, 394], ["Resnet.ResNet3X3.size", "Resnet.ResNet3X3.conv1", "Resnet.ResNet3X3.relu1", "Resnet.ResNet3X3.conv2", "Resnet.ResNet3X3.relu2", "Resnet.ResNet3X3.conv3", "Resnet.ResNet3X3.relu3", "Resnet.ResNet3X3.maxpool", "Resnet.ResNet3X3.layer1", "Resnet.ResNet3X3.layer2", "Resnet.ResNet3X3.layer3", "Resnet.ResNet3X3.layer4", "Resnet.ResNet3X3.bn1", "w_arr.append", "Resnet.ResNet3X3.bn1", "Resnet.ResNet3X3.bn2", "w_arr.append", "Resnet.ResNet3X3.bn2", "Resnet.ResNet3X3.bn3", "w_arr.append", "Resnet.ResNet3X3.bn3"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "w_arr", "=", "[", "]", "\n", "x_size", "=", "x", ".", "size", "(", ")", "# 800", "\n", "\n", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "if", "self", ".", "wt_layer", "[", "0", "]", "==", "1", "or", "self", ".", "wt_layer", "[", "0", "]", "==", "2", ":", "\n", "            ", "x", ",", "w", "=", "self", ".", "bn1", "(", "x", ")", "\n", "w_arr", ".", "append", "(", "w", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "", "x", "=", "self", ".", "relu1", "(", "x", ")", "\n", "x", "=", "self", ".", "conv2", "(", "x", ")", "\n", "if", "self", ".", "wt_layer", "[", "1", "]", "==", "1", "or", "self", ".", "wt_layer", "[", "1", "]", "==", "2", ":", "\n", "            ", "x", ",", "w", "=", "self", ".", "bn2", "(", "x", ")", "\n", "w_arr", ".", "append", "(", "w", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "self", ".", "bn2", "(", "x", ")", "\n", "", "x", "=", "self", ".", "relu2", "(", "x", ")", "\n", "x", "=", "self", ".", "conv3", "(", "x", ")", "\n", "if", "self", ".", "wt_layer", "[", "2", "]", "==", "1", "or", "self", ".", "wt_layer", "[", "2", "]", "==", "2", ":", "\n", "            ", "x", ",", "w", "=", "self", ".", "bn3", "(", "x", ")", "\n", "w_arr", ".", "append", "(", "w", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "self", ".", "bn3", "(", "x", ")", "\n", "", "x", "=", "self", ".", "relu3", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "x_tuple", "=", "self", ".", "layer1", "(", "[", "x", ",", "w_arr", "]", ")", "# 400", "\n", "low_level", "=", "x_tuple", "[", "0", "]", "\n", "\n", "x_tuple", "=", "self", ".", "layer2", "(", "x_tuple", ")", "# 100", "\n", "x_tuple", "=", "self", ".", "layer3", "(", "x_tuple", ")", "# 100", "\n", "aux_out", "=", "x_tuple", "[", "0", "]", "\n", "x_tuple", "=", "self", ".", "layer4", "(", "x_tuple", ")", "# 100", "\n", "\n", "x", "=", "x_tuple", "[", "0", "]", "\n", "w_arr", "=", "x_tuple", "[", "1", "]", "\n", "#x = self.avgpool(x)", "\n", "#x = x.view(x.size(0), -1)", "\n", "#x = self.fc(x)", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.network.Resnet.ResNet.__init__": [[400, 449], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "Resnet.ResNet._make_layer", "Resnet.ResNet._make_layer", "Resnet.ResNet._make_layer", "Resnet.ResNet._make_layer", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.Linear", "torch.Linear", "torch.Linear", "Resnet.ResNet.modules", "network.instance_whitening.InstanceWhitening", "torch.ReLU", "torch.ReLU", "torch.ReLU", "isinstance", "network.instance_whitening.InstanceWhitening", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "isinstance", "isinstance", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "network.sync_switchwhiten.SyncSwitchWhiten2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "network.Norm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.shachoi_RobustNet.transforms.joint_transforms.ClassUniform.__init__", "home.repos.pwc.inspect_result.shachoi_RobustNet.network.Resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.shachoi_RobustNet.network.Resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.shachoi_RobustNet.network.Resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.shachoi_RobustNet.network.Resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.shachoi_RobustNet.network.mynn.Norm2d"], ["def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "wt_layer", "=", "None", ",", "num_classes", "=", "1000", ")", ":", "\n", "        ", "self", ".", "inplanes", "=", "64", "\n", "# self.inplanes = 128", "\n", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "\n", "bias", "=", "False", ")", "\n", "if", "wt_layer", "[", "2", "]", "==", "1", ":", "\n", "            ", "self", ".", "bn1", "=", "InstanceWhitening", "(", "64", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", "\n", "", "elif", "wt_layer", "[", "2", "]", "==", "2", ":", "\n", "            ", "self", ".", "bn1", "=", "InstanceWhitening", "(", "64", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", "\n", "", "elif", "wt_layer", "[", "2", "]", "==", "3", ":", "\n", "            ", "self", ".", "bn1", "=", "nn", ".", "InstanceNorm2d", "(", "64", ",", "affine", "=", "False", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "", "elif", "wt_layer", "[", "2", "]", "==", "4", ":", "\n", "            ", "self", ".", "bn1", "=", "nn", ".", "InstanceNorm2d", "(", "64", ",", "affine", "=", "True", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "", "elif", "wt_layer", "[", "2", "]", "==", "5", ":", "\n", "            ", "self", ".", "bn1", "=", "SyncSwitchWhiten2d", "(", "self", ".", "inplanes", ",", "\n", "num_pergroup", "=", "16", ",", "\n", "sw_type", "=", "2", ",", "\n", "T", "=", "5", ",", "\n", "tie_weight", "=", "False", ",", "\n", "eps", "=", "1e-5", ",", "\n", "momentum", "=", "0.99", ",", "\n", "affine", "=", "True", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "bn1", "=", "mynn", ".", "Norm2d", "(", "64", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ",", "wt_layer", "=", "wt_layer", "[", "3", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ",", "wt_layer", "=", "wt_layer", "[", "4", "]", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ",", "wt_layer", "=", "wt_layer", "[", "5", "]", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ",", "wt_layer", "=", "wt_layer", "[", "6", "]", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AvgPool2d", "(", "7", ",", "stride", "=", "1", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "512", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "self", ".", "wt_layer", "=", "wt_layer", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", "or", "isinstance", "(", "m", ",", "nn", ".", "SyncBatchNorm", ")", ":", "\n", "                ", "if", "m", ".", "weight", "is", "not", "None", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.network.Resnet.ResNet._make_layer": [[450, 466], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "network.Norm2d", "block"], "methods", ["home.repos.pwc.inspect_result.shachoi_RobustNet.network.mynn.Norm2d"], ["", "", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ",", "wt_layer", "=", "0", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "mynn", ".", "Norm2d", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ",", "iw", "=", "0", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "index", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "\n", "iw", "=", "0", "if", "(", "wt_layer", ">", "0", "and", "index", "<", "blocks", "-", "1", ")", "else", "wt_layer", ")", ")", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.network.Resnet.ResNet.forward": [[467, 496], ["Resnet.ResNet.size", "Resnet.ResNet.conv1", "Resnet.ResNet.relu", "Resnet.ResNet.maxpool", "Resnet.ResNet.layer1", "Resnet.ResNet.layer2", "Resnet.ResNet.layer3", "Resnet.ResNet.layer4", "Resnet.ResNet.bn1", "w_arr.append", "Resnet.ResNet.bn1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "w_arr", "=", "[", "]", "\n", "x_size", "=", "x", ".", "size", "(", ")", "# 800", "\n", "\n", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "if", "self", ".", "wt_layer", "[", "2", "]", "==", "1", "or", "self", ".", "wt_layer", "[", "2", "]", "==", "2", ":", "\n", "            ", "x", ",", "w", "=", "self", ".", "bn1", "(", "x", ")", "\n", "w_arr", ".", "append", "(", "w", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "x_tuple", "=", "self", ".", "layer1", "(", "[", "x", ",", "w_arr", "]", ")", "# 400", "\n", "low_level", "=", "x_tuple", "[", "0", "]", "\n", "\n", "x_tuple", "=", "self", ".", "layer2", "(", "x_tuple", ")", "# 100", "\n", "x_tuple", "=", "self", ".", "layer3", "(", "x_tuple", ")", "# 100", "\n", "aux_out", "=", "x_tuple", "[", "0", "]", "\n", "x_tuple", "=", "self", ".", "layer4", "(", "x_tuple", ")", "# 100", "\n", "\n", "x", "=", "x_tuple", "[", "0", "]", "\n", "w_arr", "=", "x_tuple", "[", "1", "]", "\n", "\n", "#x = self.avgpool(x)", "\n", "#x = x.view(x.size(0), -1)", "\n", "#x = self.fc(x)", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.network.Resnet.conv3x3": [[56, 60], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"\"\"3x3 convolution with padding\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.network.Resnet.resnet18": [[499, 513], ["Resnet.ResNet", "print", "network.forgiving_state_restore", "torch.load_url"], "function", ["home.repos.pwc.inspect_result.shachoi_RobustNet.network.mynn.forgiving_state_restore"], ["", "", "def", "resnet18", "(", "pretrained", "=", "True", ",", "wt_layer", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-18 model.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "if", "wt_layer", "is", "None", ":", "\n", "        ", "wt_layer", "=", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", "\n", "", "model", "=", "ResNet", "(", "BasicBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "wt_layer", "=", "wt_layer", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "#model.load_state_dict(model_zoo.load_url(model_urls['resnet18']))", "\n", "        ", "print", "(", "\"########### pretrained ##############\"", ")", "\n", "mynn", ".", "forgiving_state_restore", "(", "model", ",", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet18'", "]", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.network.Resnet.resnet34": [[515, 525], ["Resnet.ResNet", "ResNet.load_state_dict", "torch.load_url"], "function", ["None"], ["", "def", "resnet34", "(", "pretrained", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-34 model.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "BasicBlock", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet34'", "]", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.network.Resnet.resnet50": [[527, 541], ["Resnet.ResNet", "print", "network.forgiving_state_restore", "torch.load_url"], "function", ["home.repos.pwc.inspect_result.shachoi_RobustNet.network.mynn.forgiving_state_restore"], ["", "def", "resnet50", "(", "pretrained", "=", "True", ",", "wt_layer", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-50 model.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "if", "wt_layer", "is", "None", ":", "\n", "        ", "wt_layer", "=", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", "\n", "", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "wt_layer", "=", "wt_layer", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "#model.load_state_dict(model_zoo.load_url(model_urls['resnet50']))", "\n", "        ", "print", "(", "\"########### pretrained ##############\"", ")", "\n", "mynn", ".", "forgiving_state_restore", "(", "model", ",", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet50'", "]", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.network.Resnet.resnet101": [[543, 559], ["Resnet.ResNet3X3", "print", "network.forgiving_state_restore", "torch.load", "torch.load", "torch.load"], "function", ["home.repos.pwc.inspect_result.shachoi_RobustNet.network.mynn.forgiving_state_restore"], ["", "def", "resnet101", "(", "pretrained", "=", "True", ",", "wt_layer", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-101 model.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        :param pretrained:\n    \"\"\"", "\n", "if", "wt_layer", "is", "None", ":", "\n", "        ", "wt_layer", "=", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", "\n", "", "model", "=", "ResNet3X3", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "wt_layer", "=", "wt_layer", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "# model.load_state_dict(model_zoo.load_url(model_urls['resnet101']))", "\n", "        ", "print", "(", "\"########### pretrained ##############\"", ")", "\n", "# model.load_state_dict(torch.load('./pretrained/resnet101-imagenet.pth', map_location=\"cpu\"))", "\n", "mynn", ".", "forgiving_state_restore", "(", "model", ",", "torch", ".", "load", "(", "'./pretrained/resnet101-imagenet.pth'", ",", "map_location", "=", "\"cpu\"", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.network.Resnet.resnet_adapt101": [[561, 576], ["Resnet.ResNet3X3", "print", "ResNet3X3.load_state_dict", "torch.load", "torch.load", "torch.load"], "function", ["None"], ["", "def", "resnet_adapt101", "(", "args", ",", "pretrained", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-101 model.\n\n    Args:\n        args: arguments that contain adapt_layer information\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        :param pretrained:\n    \"\"\"", "\n", "model", "=", "ResNet3X3", "(", "args", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "# model.load_state_dict(model_zoo.load_url(model_urls['resnet101']))", "\n", "        ", "print", "(", "\"########### pretrained ##############\"", ")", "\n", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "'./pretrained/resnet_adapt101-imagenet.pth'", ",", "map_location", "=", "\"cpu\"", ")", ")", "\n", "# mynn.forgiving_state_restore(model, torch.load('./pretrained/resnet101-imagenet.pth', map_location=\"cpu\"))", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.network.Resnet.resnet152": [[578, 588], ["Resnet.ResNet", "ResNet.load_state_dict", "torch.load_url"], "function", ["None"], ["", "def", "resnet152", "(", "pretrained", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-152 model.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "8", ",", "36", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet152'", "]", ")", ")", "\n", "", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.shachoi_RobustNet.network.Shufflenet.InvertedResidual.__init__": [[39, 82], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "ValueError", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "Shufflenet.InvertedResidual.depthwise_conv", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "network.instance_whitening.InstanceWhitening", "Shufflenet.InvertedResidual.depthwise_conv", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "network.instance_whitening.InstanceWhitening", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.Sequential", "torch.Sequential"], "methods", ["home.repos.pwc.inspect_result.shachoi_RobustNet.transforms.joint_transforms.ClassUniform.__init__", "home.repos.pwc.inspect_result.shachoi_RobustNet.network.Shufflenet.InvertedResidual.depthwise_conv", "home.repos.pwc.inspect_result.shachoi_RobustNet.network.Shufflenet.InvertedResidual.depthwise_conv"], ["    ", "def", "__init__", "(", "self", ",", "inp", ",", "oup", ",", "stride", ",", "iw", "=", "0", ")", ":", "\n", "        ", "super", "(", "InvertedResidual", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "if", "not", "(", "1", "<=", "stride", "<=", "3", ")", ":", "\n", "            ", "raise", "ValueError", "(", "'illegal stride value'", ")", "\n", "", "self", ".", "stride", "=", "stride", "\n", "\n", "branch_features", "=", "oup", "//", "2", "\n", "assert", "(", "self", ".", "stride", "!=", "1", ")", "or", "(", "inp", "==", "branch_features", "<<", "1", ")", "\n", "\n", "if", "self", ".", "stride", ">", "1", ":", "\n", "            ", "self", ".", "branch1", "=", "nn", ".", "Sequential", "(", "\n", "self", ".", "depthwise_conv", "(", "inp", ",", "inp", ",", "kernel_size", "=", "3", ",", "stride", "=", "self", ".", "stride", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "inp", ")", ",", "\n", "nn", ".", "Conv2d", "(", "inp", ",", "branch_features", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "branch_features", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "branch1", "=", "nn", ".", "Sequential", "(", ")", "\n", "\n", "", "self", ".", "branch2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "inp", "if", "(", "self", ".", "stride", ">", "1", ")", "else", "branch_features", ",", "\n", "branch_features", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "branch_features", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "self", ".", "depthwise_conv", "(", "branch_features", ",", "branch_features", ",", "kernel_size", "=", "3", ",", "stride", "=", "self", ".", "stride", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "branch_features", ")", ",", "\n", "nn", ".", "Conv2d", "(", "branch_features", ",", "branch_features", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "branch_features", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", ")", "\n", "self", ".", "iw", "=", "iw", "\n", "if", "iw", "==", "1", ":", "\n", "            ", "self", ".", "instance_norm_layer", "=", "InstanceWhitening", "(", "oup", ")", "\n", "", "elif", "iw", "==", "2", ":", "\n", "            ", "self", ".", "instance_norm_layer", "=", "InstanceWhitening", "(", "oup", ")", "\n", "", "elif", "iw", "==", "3", ":", "\n", "            ", "self", ".", "instance_norm_layer", "=", "nn", ".", "InstanceNorm2d", "(", "oup", ",", "affine", "=", "False", ")", "\n", "", "elif", "iw", "==", "4", ":", "\n", "            ", "self", ".", "instance_norm_layer", "=", "nn", ".", "InstanceNorm2d", "(", "oup", ",", "affine", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "instance_norm_layer", "=", "nn", ".", "Sequential", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.network.Shufflenet.InvertedResidual.depthwise_conv": [[84, 87], ["torch.Conv2d", "torch.Conv2d"], "methods", ["None"], ["", "", "@", "staticmethod", "\n", "def", "depthwise_conv", "(", "i", ",", "o", ",", "kernel_size", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", ":", "\n", "        ", "return", "nn", ".", "Conv2d", "(", "i", ",", "o", ",", "kernel_size", ",", "stride", ",", "padding", ",", "bias", "=", "bias", ",", "groups", "=", "i", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.network.Shufflenet.InvertedResidual.forward": [[88, 111], ["Shufflenet.channel_shuffle", "len", "print", "x.chunk", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "Shufflenet.InvertedResidual.instance_norm_layer", "w_arr.append", "Shufflenet.InvertedResidual.instance_norm_layer", "Shufflenet.InvertedResidual.branch2", "Shufflenet.InvertedResidual.branch1", "Shufflenet.InvertedResidual.branch2"], "methods", ["home.repos.pwc.inspect_result.shachoi_RobustNet.network.Shufflenet.channel_shuffle"], ["", "def", "forward", "(", "self", ",", "x_tuple", ")", ":", "\n", "        ", "if", "len", "(", "x_tuple", ")", "==", "2", ":", "\n", "            ", "w_arr", "=", "x_tuple", "[", "1", "]", "\n", "x", "=", "x_tuple", "[", "0", "]", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"error in invert residual forward path\"", ")", "\n", "return", "\n", "\n", "", "if", "self", ".", "stride", "==", "1", ":", "\n", "            ", "x1", ",", "x2", "=", "x", ".", "chunk", "(", "2", ",", "dim", "=", "1", ")", "\n", "out", "=", "torch", ".", "cat", "(", "(", "x1", ",", "self", ".", "branch2", "(", "x2", ")", ")", ",", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "            ", "out", "=", "torch", ".", "cat", "(", "(", "self", ".", "branch1", "(", "x", ")", ",", "self", ".", "branch2", "(", "x", ")", ")", ",", "dim", "=", "1", ")", "\n", "\n", "", "out", "=", "channel_shuffle", "(", "out", ",", "2", ")", "\n", "\n", "if", "self", ".", "iw", ">=", "1", ":", "\n", "            ", "if", "self", ".", "iw", "==", "1", "or", "self", ".", "iw", "==", "2", ":", "\n", "                ", "out", ",", "w", ",", "c", "=", "self", ".", "instance_norm_layer", "(", "out", ")", "\n", "w_arr", ".", "append", "(", "w", ")", "\n", "", "else", ":", "\n", "                ", "out", "=", "self", ".", "instance_norm_layer", "(", "out", ")", "\n", "", "", "return", "[", "out", ",", "w_arr", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.network.Shufflenet.ShuffleNetV2.__init__": [[114, 183], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.MaxPool2d", "torch.MaxPool2d", "zip", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "len", "ValueError", "len", "ValueError", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "network.instance_whitening.InstanceWhitening", "range", "setattr", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "network.instance_whitening.InstanceWhitening", "network.instance_whitening.InstanceWhitening", "inverted_residual", "torch.Sequential", "torch.Sequential", "network.instance_whitening.InstanceWhitening", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "seq.append", "seq.append", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.Sequential", "torch.Sequential", "inverted_residual", "inverted_residual", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.Sequential", "torch.Sequential"], "methods", ["home.repos.pwc.inspect_result.shachoi_RobustNet.transforms.joint_transforms.ClassUniform.__init__"], ["    ", "def", "__init__", "(", "self", ",", "stages_repeats", ",", "stages_out_channels", ",", "num_classes", "=", "1000", ",", "inverted_residual", "=", "InvertedResidual", ",", "\n", "iw", "=", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ")", ":", "\n", "        ", "super", "(", "ShuffleNetV2", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "if", "len", "(", "stages_repeats", ")", "!=", "3", ":", "\n", "            ", "raise", "ValueError", "(", "'expected stages_repeats as list of 3 positive ints'", ")", "\n", "", "if", "len", "(", "stages_out_channels", ")", "!=", "5", ":", "\n", "            ", "raise", "ValueError", "(", "'expected stages_out_channels as list of 5 positive ints'", ")", "\n", "", "self", ".", "_stage_out_channels", "=", "stages_out_channels", "\n", "\n", "input_channels", "=", "3", "\n", "output_channels", "=", "self", ".", "_stage_out_channels", "[", "0", "]", "\n", "self", ".", "conv1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "input_channels", ",", "output_channels", ",", "3", ",", "2", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "output_channels", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", ")", "\n", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "\n", "iw_count", "=", "2", "\n", "\n", "if", "iw", "[", "iw_count", "]", "==", "1", ":", "\n", "            ", "self", ".", "instance_norm_layer1", "=", "InstanceWhitening", "(", "output_channels", ")", "\n", "", "elif", "iw", "[", "iw_count", "]", "==", "2", ":", "\n", "            ", "self", ".", "instance_norm_layer1", "=", "InstanceWhitening", "(", "output_channels", ")", "\n", "", "elif", "iw", "[", "iw_count", "]", "==", "3", ":", "\n", "            ", "self", ".", "instance_norm_layer1", "=", "nn", ".", "InstanceNorm2d", "(", "output_channels", ",", "affine", "=", "False", ")", "\n", "", "elif", "iw", "[", "iw_count", "]", "==", "4", ":", "\n", "            ", "self", ".", "instance_norm_layer1", "=", "nn", ".", "InstanceNorm2d", "(", "output_channels", ",", "affine", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "instance_norm_layer1", "=", "nn", ".", "Sequential", "(", ")", "\n", "\n", "", "iw_count", "+=", "1", "\n", "\n", "input_channels", "=", "output_channels", "\n", "\n", "stage_names", "=", "[", "'stage{}'", ".", "format", "(", "i", ")", "for", "i", "in", "[", "2", ",", "3", ",", "4", "]", "]", "\n", "for", "name", ",", "repeats", ",", "output_channels", "in", "zip", "(", "\n", "stage_names", ",", "stages_repeats", ",", "self", ".", "_stage_out_channels", "[", "1", ":", "]", ")", ":", "\n", "            ", "seq", "=", "[", "inverted_residual", "(", "input_channels", ",", "output_channels", ",", "2", ")", "]", "\n", "for", "i", "in", "range", "(", "repeats", "-", "1", ")", ":", "\n", "                ", "if", "i", "==", "repeats", "-", "2", ":", "\n", "                    ", "seq", ".", "append", "(", "inverted_residual", "(", "output_channels", ",", "output_channels", ",", "1", ",", "iw", "=", "iw", "[", "iw_count", "]", ")", ")", "\n", "iw_count", "+=", "1", "\n", "", "else", ":", "\n", "                    ", "seq", ".", "append", "(", "inverted_residual", "(", "output_channels", ",", "output_channels", ",", "1", ",", "iw", "=", "0", ")", ")", "\n", "", "", "setattr", "(", "self", ",", "name", ",", "nn", ".", "Sequential", "(", "*", "seq", ")", ")", "\n", "input_channels", "=", "output_channels", "\n", "\n", "", "output_channels", "=", "self", ".", "_stage_out_channels", "[", "-", "1", "]", "\n", "\n", "self", ".", "conv5", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "input_channels", ",", "output_channels", ",", "1", ",", "1", ",", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "output_channels", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", ")", "\n", "if", "iw", "[", "iw_count", "]", "==", "1", ":", "\n", "            ", "self", ".", "instance_norm_layer2", "=", "InstanceWhitening", "(", "output_channels", ")", "\n", "", "elif", "iw", "[", "iw_count", "]", "==", "2", ":", "\n", "            ", "self", ".", "instance_norm_layer2", "=", "InstanceWhitening", "(", "output_channels", ")", "\n", "", "elif", "iw", "[", "iw_count", "]", "==", "3", ":", "\n", "            ", "self", ".", "instance_norm_layer2", "=", "nn", ".", "InstanceNorm2d", "(", "output_channels", ",", "affine", "=", "False", ")", "\n", "", "elif", "iw", "[", "iw_count", "]", "==", "4", ":", "\n", "            ", "self", ".", "instance_norm_layer2", "=", "nn", ".", "InstanceNorm2d", "(", "output_channels", ",", "affine", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "instance_norm_layer2", "=", "nn", ".", "Sequential", "(", ")", "\n", "\n", "", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "output_channels", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.network.Shufflenet.ShuffleNetV2._forward_impl": [[185, 199], ["Shufflenet.ShuffleNetV2.layer0", "Shufflenet.ShuffleNetV2.stage2", "Shufflenet.ShuffleNetV2.stage3", "Shufflenet.ShuffleNetV2.stage4", "Shufflenet.ShuffleNetV2.layer4", "Shufflenet.ShuffleNetV2.mean", "Shufflenet.ShuffleNetV2.fc"], "methods", ["None"], ["", "def", "_forward_impl", "(", "self", ",", "x", ")", ":", "\n", "# See note [TorchScript super()]", "\n", "        ", "\"\"\"\n        x = self.conv1(x)\n        x = self.maxpool(x)\n        \"\"\"", "\n", "x", "=", "self", ".", "layer0", "(", "x", ")", "\n", "x", "=", "self", ".", "stage2", "(", "x", ")", "\n", "x", "=", "self", ".", "stage3", "(", "x", ")", "\n", "x", "=", "self", ".", "stage4", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "x", "=", "x", ".", "mean", "(", "[", "2", ",", "3", "]", ")", "# globalpool", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.network.Shufflenet.ShuffleNetV2.forward": [[200, 202], ["Shufflenet.ShuffleNetV2._forward_impl"], "methods", ["home.repos.pwc.inspect_result.shachoi_RobustNet.network.Shufflenet.ShuffleNetV2._forward_impl"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "_forward_impl", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.network.Shufflenet.channel_shuffle": [[21, 36], ["x.view.data.size", "x.view.view", "torch.transpose().contiguous", "torch.transpose().contiguous", "x.view.view", "torch.transpose", "torch.transpose"], "function", ["None"], ["def", "channel_shuffle", "(", "x", ",", "groups", ")", ":", "\n", "# type: (torch.Tensor, int) -> torch.Tensor", "\n", "    ", "batchsize", ",", "num_channels", ",", "height", ",", "width", "=", "x", ".", "data", ".", "size", "(", ")", "\n", "channels_per_group", "=", "num_channels", "//", "groups", "\n", "\n", "# reshape", "\n", "x", "=", "x", ".", "view", "(", "batchsize", ",", "groups", ",", "\n", "channels_per_group", ",", "height", ",", "width", ")", "\n", "\n", "x", "=", "torch", ".", "transpose", "(", "x", ",", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "\n", "# flatten", "\n", "x", "=", "x", ".", "view", "(", "batchsize", ",", "-", "1", ",", "height", ",", "width", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.network.Shufflenet._shufflenetv2": [[204, 217], ["Shufflenet.ShuffleNetV2", "NotImplementedError", "torch.utils.model_zoo.load_url", "network.forgiving_state_restore"], "function", ["home.repos.pwc.inspect_result.shachoi_RobustNet.network.mynn.forgiving_state_restore"], ["", "", "def", "_shufflenetv2", "(", "arch", ",", "pretrained", ",", "progress", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "ShuffleNetV2", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n", "if", "pretrained", ":", "\n", "        ", "model_url", "=", "model_urls", "[", "arch", "]", "\n", "if", "model_url", "is", "None", ":", "\n", "            ", "raise", "NotImplementedError", "(", "'pretrained {} is not supported as of now'", ".", "format", "(", "arch", ")", ")", "\n", "", "else", ":", "\n", "            ", "state_dict", "=", "load_state_dict_from_url", "(", "model_url", ",", "progress", "=", "progress", ")", "\n", "mynn", ".", "forgiving_state_restore", "(", "model", ",", "state_dict", ")", "\n", "### model.load_state_dict(state_dict)", "\n", "\n", "", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.network.Shufflenet.shufflenet_v2_x0_5": [[219, 231], ["Shufflenet._shufflenetv2"], "function", ["home.repos.pwc.inspect_result.shachoi_RobustNet.network.Shufflenet._shufflenetv2"], ["", "def", "shufflenet_v2_x0_5", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"\n    Constructs a ShuffleNetV2 with 0.5x output channels, as described in\n    `\"ShuffleNet V2: Practical Guidelines for Efficient CNN Architecture Design\"\n    <https://arxiv.org/abs/1807.11164>`_.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_shufflenetv2", "(", "'shufflenetv2_x0.5'", ",", "pretrained", ",", "progress", ",", "\n", "[", "4", ",", "8", ",", "4", "]", ",", "[", "24", ",", "48", ",", "96", ",", "192", ",", "1024", "]", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.network.Shufflenet.shufflenet_v2_x1_0": [[233, 245], ["Shufflenet._shufflenetv2"], "function", ["home.repos.pwc.inspect_result.shachoi_RobustNet.network.Shufflenet._shufflenetv2"], ["", "def", "shufflenet_v2_x1_0", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"\n    Constructs a ShuffleNetV2 with 1.0x output channels, as described in\n    `\"ShuffleNet V2: Practical Guidelines for Efficient CNN Architecture Design\"\n    <https://arxiv.org/abs/1807.11164>`_.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_shufflenetv2", "(", "'shufflenetv2_x1.0'", ",", "pretrained", ",", "progress", ",", "\n", "[", "4", ",", "8", ",", "4", "]", ",", "[", "24", ",", "116", ",", "232", ",", "464", ",", "1024", "]", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.network.Shufflenet.shufflenet_v2_x1_5": [[247, 259], ["Shufflenet._shufflenetv2"], "function", ["home.repos.pwc.inspect_result.shachoi_RobustNet.network.Shufflenet._shufflenetv2"], ["", "def", "shufflenet_v2_x1_5", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"\n    Constructs a ShuffleNetV2 with 1.5x output channels, as described in\n    `\"ShuffleNet V2: Practical Guidelines for Efficient CNN Architecture Design\"\n    <https://arxiv.org/abs/1807.11164>`_.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_shufflenetv2", "(", "'shufflenetv2_x1.5'", ",", "pretrained", ",", "progress", ",", "\n", "[", "4", ",", "8", ",", "4", "]", ",", "[", "24", ",", "176", ",", "352", ",", "704", ",", "1024", "]", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.network.Shufflenet.shufflenet_v2_x2_0": [[261, 273], ["Shufflenet._shufflenetv2"], "function", ["home.repos.pwc.inspect_result.shachoi_RobustNet.network.Shufflenet._shufflenetv2"], ["", "def", "shufflenet_v2_x2_0", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"\n    Constructs a ShuffleNetV2 with 2.0x output channels, as described in\n    `\"ShuffleNet V2: Practical Guidelines for Efficient CNN Architecture Design\"\n    <https://arxiv.org/abs/1807.11164>`_.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_shufflenetv2", "(", "'shufflenetv2_x2.0'", ",", "pretrained", ",", "progress", ",", "\n", "[", "4", ",", "8", ",", "4", "]", ",", "[", "24", ",", "244", ",", "488", ",", "976", ",", "2048", "]", ",", "**", "kwargs", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.synthia.Synthia.__init__": [[213, 248], ["synthia.make_dataset", "len", "RuntimeError", "float", "eval_scales.split"], "methods", ["home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.bdd100k.make_dataset"], ["    ", "def", "__init__", "(", "self", ",", "mode", ",", "maxSkip", "=", "0", ",", "joint_transform", "=", "None", ",", "sliding_crop", "=", "None", ",", "\n", "transform", "=", "None", ",", "target_transform", "=", "None", ",", "target_aux_transform", "=", "None", ",", "dump_images", "=", "False", ",", "\n", "cv_split", "=", "None", ",", "eval_mode", "=", "False", ",", "\n", "eval_scales", "=", "None", ",", "eval_flip", "=", "False", ",", "image_in", "=", "False", ",", "\n", "extract_feature", "=", "False", ")", ":", "\n", "        ", "self", ".", "mode", "=", "mode", "\n", "self", ".", "maxSkip", "=", "maxSkip", "\n", "self", ".", "joint_transform", "=", "joint_transform", "\n", "self", ".", "sliding_crop", "=", "sliding_crop", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "target_transform", "=", "target_transform", "\n", "self", ".", "target_aux_transform", "=", "target_aux_transform", "\n", "self", ".", "dump_images", "=", "dump_images", "\n", "self", ".", "eval_mode", "=", "eval_mode", "\n", "self", ".", "eval_flip", "=", "eval_flip", "\n", "self", ".", "eval_scales", "=", "None", "\n", "self", ".", "image_in", "=", "image_in", "\n", "self", ".", "extract_feature", "=", "extract_feature", "\n", "\n", "\n", "if", "eval_scales", "!=", "None", ":", "\n", "            ", "self", ".", "eval_scales", "=", "[", "float", "(", "scale", ")", "for", "scale", "in", "eval_scales", ".", "split", "(", "\",\"", ")", "]", "\n", "\n", "", "if", "cv_split", ":", "\n", "            ", "self", ".", "cv_split", "=", "cv_split", "\n", "assert", "cv_split", "<", "cfg", ".", "DATASET", ".", "CV_SPLITS", ",", "'expected cv_split {} to be < CV_SPLITS {}'", ".", "format", "(", "\n", "cv_split", ",", "cfg", ".", "DATASET", ".", "CV_SPLITS", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "cv_split", "=", "0", "\n", "", "self", ".", "imgs", ",", "_", "=", "make_dataset", "(", "mode", ",", "self", ".", "maxSkip", ",", "cv_split", "=", "self", ".", "cv_split", ")", "\n", "if", "len", "(", "self", ".", "imgs", ")", "==", "0", ":", "\n", "            ", "raise", "RuntimeError", "(", "'Found 0 images, please check the data set'", ")", "\n", "\n", "", "self", ".", "mean_std", "=", "(", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.synthia.Synthia._eval_get_item": [[249, 264], ["range", "return_imgs.append", "int", "img.transpose.transpose.transpose", "img.transpose.transpose.resize", "imgs.append", "int", "int", "torchvision.ToTensor", "torchvision.Normalize"], "methods", ["None"], ["", "def", "_eval_get_item", "(", "self", ",", "img", ",", "mask", ",", "scales", ",", "flip_bool", ")", ":", "\n", "        ", "return_imgs", "=", "[", "]", "\n", "for", "flip", "in", "range", "(", "int", "(", "flip_bool", ")", "+", "1", ")", ":", "\n", "            ", "imgs", "=", "[", "]", "\n", "if", "flip", ":", "\n", "                ", "img", "=", "img", ".", "transpose", "(", "Image", ".", "FLIP_LEFT_RIGHT", ")", "\n", "", "for", "scale", "in", "scales", ":", "\n", "                ", "w", ",", "h", "=", "img", ".", "size", "\n", "target_w", ",", "target_h", "=", "int", "(", "w", "*", "scale", ")", ",", "int", "(", "h", "*", "scale", ")", "\n", "resize_img", "=", "img", ".", "resize", "(", "(", "target_w", ",", "target_h", ")", ")", "\n", "tensor_img", "=", "transforms", ".", "ToTensor", "(", ")", "(", "resize_img", ")", "\n", "final_tensor", "=", "transforms", ".", "Normalize", "(", "*", "self", ".", "mean_std", ")", "(", "tensor_img", ")", "\n", "imgs", ".", "append", "(", "final_tensor", ")", "\n", "", "return_imgs", ".", "append", "(", "imgs", ")", "\n", "", "return", "return_imgs", ",", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.synthia.Synthia.__getitem__": [[265, 319], ["synthia.Synthia.copy", "trainid_to_trainid.items", "PIL.Image.fromarray", "PIL.Image.open().convert", "imageio.imread", "os.path.splitext", "numpy.array", "synthia.Synthia.copy.astype", "synthia.Synthia.transform", "torchvision.Normalize", "torchvision.Normalize", "synthia.Synthia.target_aux_transform", "torch.tensor", "synthia.Synthia.target_transform", "os.makedirs", "os.path.join", "os.path.join", "synthia.colorize_mask", "synthia.Synthia.save", "colorize_mask.save", "os.path.basename", "synthia.Synthia._eval_get_item", "synthia.Synthia.joint_transform", "numpy.array", "PIL.Image.open", "torch.mean", "torch.mean", "torch.mean", "torchvision.ToTensor", "torch.std", "torch.std", "torch.std"], "methods", ["home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.bdd100k.colorize_mask", "home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.bdd100k.BDD100KAug._eval_get_item"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "\n", "        ", "img_path", ",", "mask_path", "=", "self", ".", "imgs", "[", "index", "]", "\n", "\n", "img", ",", "mask", "=", "Image", ".", "open", "(", "img_path", ")", ".", "convert", "(", "'RGB'", ")", ",", "imageio", ".", "imread", "(", "mask_path", ",", "format", "=", "'PNG-FI'", ")", "\n", "img_name", "=", "os", ".", "path", ".", "splitext", "(", "os", ".", "path", ".", "basename", "(", "img_path", ")", ")", "[", "0", "]", "\n", "\n", "# This mask has pixel classes and instance IDs", "\n", "mask", "=", "np", ".", "array", "(", "mask", ",", "dtype", "=", "np", ".", "uint8", ")", "[", ":", ",", ":", ",", "0", "]", "\n", "mask_copy", "=", "mask", ".", "copy", "(", ")", "\n", "for", "k", ",", "v", "in", "trainid_to_trainid", ".", "items", "(", ")", ":", "\n", "            ", "mask_copy", "[", "mask", "==", "k", "]", "=", "v", "\n", "\n", "", "if", "self", ".", "eval_mode", ":", "\n", "            ", "return", "[", "transforms", ".", "ToTensor", "(", ")", "(", "img", ")", "]", ",", "self", ".", "_eval_get_item", "(", "img", ",", "mask_copy", ",", "\n", "self", ".", "eval_scales", ",", "\n", "self", ".", "eval_flip", ")", ",", "img_name", "\n", "\n", "", "mask", "=", "Image", ".", "fromarray", "(", "mask_copy", ".", "astype", "(", "np", ".", "uint8", ")", ")", "\n", "\n", "# Image Transformations", "\n", "if", "self", ".", "extract_feature", "is", "not", "True", ":", "\n", "            ", "if", "self", ".", "joint_transform", "is", "not", "None", ":", "\n", "                ", "img", ",", "mask", "=", "self", ".", "joint_transform", "(", "img", ",", "mask", ")", "\n", "\n", "", "", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "\n", "", "rgb_mean_std", "=", "(", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "\n", "img_gt", "=", "transforms", ".", "Normalize", "(", "*", "rgb_mean_std", ")", "(", "img", ")", "\n", "if", "self", ".", "image_in", ":", "\n", "            ", "eps", "=", "1e-5", "\n", "rgb_mean_std", "=", "(", "[", "torch", ".", "mean", "(", "img", "[", "0", "]", ")", ",", "torch", ".", "mean", "(", "img", "[", "1", "]", ")", ",", "torch", ".", "mean", "(", "img", "[", "2", "]", ")", "]", ",", "\n", "[", "torch", ".", "std", "(", "img", "[", "0", "]", ")", "+", "eps", ",", "torch", ".", "std", "(", "img", "[", "1", "]", ")", "+", "eps", ",", "torch", ".", "std", "(", "img", "[", "2", "]", ")", "+", "eps", "]", ")", "\n", "", "img", "=", "transforms", ".", "Normalize", "(", "*", "rgb_mean_std", ")", "(", "img", ")", "\n", "\n", "if", "self", ".", "target_aux_transform", "is", "not", "None", ":", "\n", "            ", "mask_aux", "=", "self", ".", "target_aux_transform", "(", "mask", ")", "\n", "", "else", ":", "\n", "            ", "mask_aux", "=", "torch", ".", "tensor", "(", "[", "0", "]", ")", "\n", "", "if", "self", ".", "target_transform", "is", "not", "None", ":", "\n", "            ", "mask", "=", "self", ".", "target_transform", "(", "mask", ")", "\n", "\n", "# Debug", "\n", "", "if", "self", ".", "dump_images", ":", "\n", "            ", "outdir", "=", "'../../dump_imgs_{}'", ".", "format", "(", "self", ".", "mode", ")", "\n", "os", ".", "makedirs", "(", "outdir", ",", "exist_ok", "=", "True", ")", "\n", "out_img_fn", "=", "os", ".", "path", ".", "join", "(", "outdir", ",", "img_name", "+", "'.png'", ")", "\n", "out_msk_fn", "=", "os", ".", "path", ".", "join", "(", "outdir", ",", "img_name", "+", "'_mask.png'", ")", "\n", "mask_img", "=", "colorize_mask", "(", "np", ".", "array", "(", "mask", ")", ")", "\n", "img", ".", "save", "(", "out_img_fn", ")", "\n", "mask_img", ".", "save", "(", "out_msk_fn", ")", "\n", "\n", "", "return", "img", ",", "mask", ",", "img_name", ",", "mask_aux", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.synthia.Synthia.__len__": [[320, 322], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "imgs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.synthia.SynthiaUniform.__init__": [[328, 377], ["synthia.make_dataset", "len", "os.path.isfile", "synthia.SynthiaUniform.centroids.copy", "synthia.SynthiaUniform.build_epoch", "datasets.class_centroids_all", "datasets.class_centroids_all", "open", "json.load", "int", "open", "json.dump"], "methods", ["home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.bdd100k.make_dataset", "home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.uniform.build_epoch", "home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.uniform.class_centroids_all", "home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.uniform.class_centroids_all"], ["def", "__init__", "(", "self", ",", "mode", ",", "maxSkip", "=", "0", ",", "joint_transform_list", "=", "None", ",", "sliding_crop", "=", "None", ",", "\n", "transform", "=", "None", ",", "target_transform", "=", "None", ",", "target_aux_transform", "=", "None", ",", "dump_images", "=", "False", ",", "\n", "cv_split", "=", "None", ",", "class_uniform_pct", "=", "0.5", ",", "class_uniform_tile", "=", "1024", ",", "\n", "test", "=", "False", ",", "coarse_boost_classes", "=", "None", ",", "image_in", "=", "False", ",", "extract_feature", "=", "False", ")", ":", "\n", "        ", "self", ".", "mode", "=", "mode", "\n", "self", ".", "maxSkip", "=", "maxSkip", "\n", "self", ".", "joint_transform_list", "=", "joint_transform_list", "\n", "self", ".", "sliding_crop", "=", "sliding_crop", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "target_transform", "=", "target_transform", "\n", "self", ".", "target_aux_transform", "=", "target_aux_transform", "\n", "self", ".", "dump_images", "=", "dump_images", "\n", "self", ".", "class_uniform_pct", "=", "class_uniform_pct", "\n", "self", ".", "class_uniform_tile", "=", "class_uniform_tile", "\n", "self", ".", "coarse_boost_classes", "=", "coarse_boost_classes", "\n", "self", ".", "image_in", "=", "image_in", "\n", "self", ".", "extract_feature", "=", "extract_feature", "\n", "\n", "\n", "if", "cv_split", ":", "\n", "            ", "self", ".", "cv_split", "=", "cv_split", "\n", "assert", "cv_split", "<", "cfg", ".", "DATASET", ".", "CV_SPLITS", ",", "'expected cv_split {} to be < CV_SPLITS {}'", ".", "format", "(", "\n", "cv_split", ",", "cfg", ".", "DATASET", ".", "CV_SPLITS", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "cv_split", "=", "0", "\n", "\n", "", "self", ".", "imgs", ",", "self", ".", "aug_imgs", "=", "make_dataset", "(", "mode", ",", "self", ".", "maxSkip", ",", "cv_split", "=", "self", ".", "cv_split", ")", "\n", "assert", "len", "(", "self", ".", "imgs", ")", ",", "'Found 0 images, please check the data set'", "\n", "\n", "# Centroids for fine data", "\n", "json_fn", "=", "'synthia_{}_cv{}_tile{}.json'", ".", "format", "(", "\n", "self", ".", "mode", ",", "self", ".", "cv_split", ",", "self", ".", "class_uniform_tile", ")", "\n", "if", "os", ".", "path", ".", "isfile", "(", "json_fn", ")", ":", "\n", "            ", "with", "open", "(", "json_fn", ",", "'r'", ")", "as", "json_data", ":", "\n", "                ", "centroids", "=", "json", ".", "load", "(", "json_data", ")", "\n", "", "self", ".", "centroids", "=", "{", "int", "(", "idx", ")", ":", "centroids", "[", "idx", "]", "for", "idx", "in", "centroids", "}", "\n", "", "else", ":", "\n", "            ", "self", ".", "centroids", "=", "uniform", ".", "class_centroids_all", "(", "\n", "self", ".", "imgs", ",", "\n", "num_classes", ",", "\n", "id2trainid", "=", "trainid_to_trainid", ",", "\n", "tile_size", "=", "class_uniform_tile", ")", "\n", "with", "open", "(", "json_fn", ",", "'w'", ")", "as", "outfile", ":", "\n", "                ", "json", ".", "dump", "(", "self", ".", "centroids", ",", "outfile", ",", "indent", "=", "4", ")", "\n", "\n", "", "", "self", ".", "fine_centroids", "=", "self", ".", "centroids", ".", "copy", "(", ")", "\n", "\n", "self", ".", "build_epoch", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.synthia.SynthiaUniform.cities_uniform": [[378, 388], ["cities.keys", "logging.info", "os.path.basename", "os.path.basename.split", "str", "sorted"], "methods", ["None"], ["", "def", "cities_uniform", "(", "self", ",", "imgs", ",", "name", ")", ":", "\n", "        ", "\"\"\" list out cities in imgs_uniform \"\"\"", "\n", "cities", "=", "{", "}", "\n", "for", "item", "in", "imgs", ":", "\n", "            ", "img_fn", "=", "item", "[", "0", "]", "\n", "img_fn", "=", "os", ".", "path", ".", "basename", "(", "img_fn", ")", "\n", "city", "=", "img_fn", ".", "split", "(", "'_'", ")", "[", "0", "]", "\n", "cities", "[", "city", "]", "=", "1", "\n", "", "city_names", "=", "cities", ".", "keys", "(", ")", "\n", "logging", ".", "info", "(", "'Cities for {} '", ".", "format", "(", "name", ")", "+", "str", "(", "sorted", "(", "city_names", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.synthia.SynthiaUniform.build_epoch": [[389, 408], ["datasets.build_epoch", "datasets.build_epoch", "datasets.build_epoch", "datasets.build_epoch"], "methods", ["home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.uniform.build_epoch", "home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.uniform.build_epoch", "home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.uniform.build_epoch", "home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.uniform.build_epoch"], ["", "def", "build_epoch", "(", "self", ",", "cut", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Perform Uniform Sampling per epoch to create a new list for training such that it\n        uniformly samples all classes\n        \"\"\"", "\n", "if", "self", ".", "class_uniform_pct", ">", "0", ":", "\n", "            ", "if", "cut", ":", "\n", "# after max_cu_epoch, we only fine images to fine tune", "\n", "                ", "self", ".", "imgs_uniform", "=", "uniform", ".", "build_epoch", "(", "self", ".", "imgs", ",", "\n", "self", ".", "fine_centroids", ",", "\n", "num_classes", ",", "\n", "cfg", ".", "CLASS_UNIFORM_PCT", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "imgs_uniform", "=", "uniform", ".", "build_epoch", "(", "self", ".", "imgs", "+", "self", ".", "aug_imgs", ",", "\n", "self", ".", "centroids", ",", "\n", "num_classes", ",", "\n", "cfg", ".", "CLASS_UNIFORM_PCT", ")", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "imgs_uniform", "=", "self", ".", "imgs", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.synthia.SynthiaUniform.__getitem__": [[409, 468], ["synthia.SynthiaUniform.copy", "trainid_to_trainid.items", "PIL.Image.fromarray", "len", "PIL.Image.open().convert", "imageio.imread", "os.path.splitext", "numpy.array", "synthia.SynthiaUniform.copy.astype", "os.makedirs", "os.path.join", "os.path.join", "synthia.colorize_mask", "synthia.SynthiaUniform.save", "colorize_mask.save", "synthia.SynthiaUniform.transform", "torchvision.Normalize", "torchvision.Normalize", "synthia.SynthiaUniform.target_aux_transform", "torch.tensor", "synthia.SynthiaUniform.target_transform", "os.path.basename", "enumerate", "numpy.array", "PIL.Image.open", "torch.mean", "torch.mean", "torch.mean", "xform", "xform", "torch.std", "torch.std", "torch.std"], "methods", ["home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.bdd100k.colorize_mask"], ["", "", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "elem", "=", "self", ".", "imgs_uniform", "[", "index", "]", "\n", "centroid", "=", "None", "\n", "if", "len", "(", "elem", ")", "==", "4", ":", "\n", "            ", "img_path", ",", "mask_path", ",", "centroid", ",", "class_id", "=", "elem", "\n", "", "else", ":", "\n", "            ", "img_path", ",", "mask_path", "=", "elem", "\n", "", "img", ",", "mask", "=", "Image", ".", "open", "(", "img_path", ")", ".", "convert", "(", "'RGB'", ")", ",", "imageio", ".", "imread", "(", "mask_path", ",", "format", "=", "'PNG-FI'", ")", "\n", "img_name", "=", "os", ".", "path", ".", "splitext", "(", "os", ".", "path", ".", "basename", "(", "img_path", ")", ")", "[", "0", "]", "\n", "\n", "# This mask has pixel classes and instance IDs", "\n", "mask", "=", "np", ".", "array", "(", "mask", ",", "dtype", "=", "np", ".", "uint8", ")", "[", ":", ",", ":", ",", "0", "]", "\n", "mask_copy", "=", "mask", ".", "copy", "(", ")", "\n", "for", "k", ",", "v", "in", "trainid_to_trainid", ".", "items", "(", ")", ":", "\n", "            ", "mask_copy", "[", "mask", "==", "k", "]", "=", "v", "\n", "", "mask", "=", "Image", ".", "fromarray", "(", "mask_copy", ".", "astype", "(", "np", ".", "uint8", ")", ")", "\n", "\n", "# Image Transformations", "\n", "if", "self", ".", "extract_feature", "is", "not", "True", ":", "\n", "            ", "if", "self", ".", "joint_transform_list", "is", "not", "None", ":", "\n", "                ", "for", "idx", ",", "xform", "in", "enumerate", "(", "self", ".", "joint_transform_list", ")", ":", "\n", "                    ", "if", "idx", "==", "0", "and", "centroid", "is", "not", "None", ":", "\n", "# HACK", "\n", "# We assume that the first transform is capable of taking", "\n", "# in a centroid", "\n", "                        ", "img", ",", "mask", "=", "xform", "(", "img", ",", "mask", ",", "centroid", ")", "\n", "", "else", ":", "\n", "                        ", "img", ",", "mask", "=", "xform", "(", "img", ",", "mask", ")", "\n", "\n", "# Debug", "\n", "", "", "", "", "if", "self", ".", "dump_images", "and", "centroid", "is", "not", "None", ":", "\n", "            ", "outdir", "=", "'../../dump_imgs_{}'", ".", "format", "(", "self", ".", "mode", ")", "\n", "os", ".", "makedirs", "(", "outdir", ",", "exist_ok", "=", "True", ")", "\n", "dump_img_name", "=", "trainid_to_name", "[", "class_id", "]", "+", "'_'", "+", "img_name", "\n", "out_img_fn", "=", "os", ".", "path", ".", "join", "(", "outdir", ",", "dump_img_name", "+", "'.png'", ")", "\n", "out_msk_fn", "=", "os", ".", "path", ".", "join", "(", "outdir", ",", "dump_img_name", "+", "'_mask.png'", ")", "\n", "mask_img", "=", "colorize_mask", "(", "np", ".", "array", "(", "mask", ")", ")", "\n", "img", ".", "save", "(", "out_img_fn", ")", "\n", "mask_img", ".", "save", "(", "out_msk_fn", ")", "\n", "\n", "", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "\n", "", "rgb_mean_std", "=", "(", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "\n", "img_gt", "=", "transforms", ".", "Normalize", "(", "*", "rgb_mean_std", ")", "(", "img", ")", "\n", "if", "self", ".", "image_in", ":", "\n", "            ", "eps", "=", "1e-5", "\n", "rgb_mean_std", "=", "(", "[", "torch", ".", "mean", "(", "img", "[", "0", "]", ")", ",", "torch", ".", "mean", "(", "img", "[", "1", "]", ")", ",", "torch", ".", "mean", "(", "img", "[", "2", "]", ")", "]", ",", "\n", "[", "torch", ".", "std", "(", "img", "[", "0", "]", ")", "+", "eps", ",", "torch", ".", "std", "(", "img", "[", "1", "]", ")", "+", "eps", ",", "torch", ".", "std", "(", "img", "[", "2", "]", ")", "+", "eps", "]", ")", "\n", "", "img", "=", "transforms", ".", "Normalize", "(", "*", "rgb_mean_std", ")", "(", "img", ")", "\n", "\n", "if", "self", ".", "target_aux_transform", "is", "not", "None", ":", "\n", "            ", "mask_aux", "=", "self", ".", "target_aux_transform", "(", "mask", ")", "\n", "", "else", ":", "\n", "            ", "mask_aux", "=", "torch", ".", "tensor", "(", "[", "0", "]", ")", "\n", "", "if", "self", ".", "target_transform", "is", "not", "None", ":", "\n", "            ", "mask", "=", "self", ".", "target_transform", "(", "mask", ")", "\n", "\n", "", "return", "img", ",", "mask", ",", "img_name", ",", "mask_aux", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.synthia.SynthiaUniform.__len__": [[469, 471], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "imgs_uniform", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.synthia.SynthiaAug.__init__": [[475, 512], ["synthia.make_dataset", "len", "RuntimeError", "float", "eval_scales.split"], "methods", ["home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.bdd100k.make_dataset"], ["    ", "def", "__init__", "(", "self", ",", "mode", ",", "maxSkip", "=", "0", ",", "joint_transform", "=", "None", ",", "sliding_crop", "=", "None", ",", "\n", "transform", "=", "None", ",", "color_transform", "=", "None", ",", "geometric_transform", "=", "None", ",", "target_transform", "=", "None", ",", "target_aux_transform", "=", "None", ",", "dump_images", "=", "False", ",", "\n", "cv_split", "=", "None", ",", "eval_mode", "=", "False", ",", "\n", "eval_scales", "=", "None", ",", "eval_flip", "=", "False", ",", "image_in", "=", "False", ",", "\n", "extract_feature", "=", "False", ")", ":", "\n", "        ", "self", ".", "mode", "=", "mode", "\n", "self", ".", "maxSkip", "=", "maxSkip", "\n", "self", ".", "joint_transform", "=", "joint_transform", "\n", "self", ".", "sliding_crop", "=", "sliding_crop", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "color_transform", "=", "color_transform", "\n", "self", ".", "geometric_transform", "=", "geometric_transform", "\n", "self", ".", "target_transform", "=", "target_transform", "\n", "self", ".", "target_aux_transform", "=", "target_aux_transform", "\n", "self", ".", "dump_images", "=", "dump_images", "\n", "self", ".", "eval_mode", "=", "eval_mode", "\n", "self", ".", "eval_flip", "=", "eval_flip", "\n", "self", ".", "eval_scales", "=", "None", "\n", "self", ".", "image_in", "=", "image_in", "\n", "self", ".", "extract_feature", "=", "extract_feature", "\n", "\n", "\n", "if", "eval_scales", "!=", "None", ":", "\n", "            ", "self", ".", "eval_scales", "=", "[", "float", "(", "scale", ")", "for", "scale", "in", "eval_scales", ".", "split", "(", "\",\"", ")", "]", "\n", "\n", "", "if", "cv_split", ":", "\n", "            ", "self", ".", "cv_split", "=", "cv_split", "\n", "assert", "cv_split", "<", "cfg", ".", "DATASET", ".", "CV_SPLITS", ",", "'expected cv_split {} to be < CV_SPLITS {}'", ".", "format", "(", "\n", "cv_split", ",", "cfg", ".", "DATASET", ".", "CV_SPLITS", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "cv_split", "=", "0", "\n", "", "self", ".", "imgs", ",", "_", "=", "make_dataset", "(", "mode", ",", "self", ".", "maxSkip", ",", "cv_split", "=", "self", ".", "cv_split", ")", "\n", "if", "len", "(", "self", ".", "imgs", ")", "==", "0", ":", "\n", "            ", "raise", "RuntimeError", "(", "'Found 0 images, please check the data set'", ")", "\n", "\n", "", "self", ".", "mean_std", "=", "(", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.synthia.SynthiaAug._eval_get_item": [[513, 528], ["range", "return_imgs.append", "int", "img.transpose.transpose.transpose", "img.transpose.transpose.resize", "imgs.append", "int", "int", "torchvision.ToTensor", "torchvision.Normalize"], "methods", ["None"], ["", "def", "_eval_get_item", "(", "self", ",", "img", ",", "mask", ",", "scales", ",", "flip_bool", ")", ":", "\n", "        ", "return_imgs", "=", "[", "]", "\n", "for", "flip", "in", "range", "(", "int", "(", "flip_bool", ")", "+", "1", ")", ":", "\n", "            ", "imgs", "=", "[", "]", "\n", "if", "flip", ":", "\n", "                ", "img", "=", "img", ".", "transpose", "(", "Image", ".", "FLIP_LEFT_RIGHT", ")", "\n", "", "for", "scale", "in", "scales", ":", "\n", "                ", "w", ",", "h", "=", "img", ".", "size", "\n", "target_w", ",", "target_h", "=", "int", "(", "w", "*", "scale", ")", ",", "int", "(", "h", "*", "scale", ")", "\n", "resize_img", "=", "img", ".", "resize", "(", "(", "target_w", ",", "target_h", ")", ")", "\n", "tensor_img", "=", "transforms", ".", "ToTensor", "(", ")", "(", "resize_img", ")", "\n", "final_tensor", "=", "transforms", ".", "Normalize", "(", "*", "self", ".", "mean_std", ")", "(", "tensor_img", ")", "\n", "imgs", ".", "append", "(", "final_tensor", ")", "\n", "", "return_imgs", ".", "append", "(", "imgs", ")", "\n", "", "return", "return_imgs", ",", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.synthia.SynthiaAug.__getitem__": [[529, 578], ["PIL.Image.fromarray.copy", "trainid_to_trainid.items", "PIL.Image.fromarray", "PIL.Image.open().convert", "imageio.imread", "os.path.splitext", "numpy.array", "Image.fromarray.copy.astype", "synthia.SynthiaAug.joint_transform", "synthia.SynthiaAug.transform", "synthia.SynthiaAug.color_transform", "synthia.SynthiaAug.geometric_transform", "torchvision.Normalize", "torchvision.Normalize", "torchvision.Normalize", "os.path.basename", "synthia.SynthiaAug._eval_get_item", "PIL.Image.open", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torchvision.ToTensor", "torch.std", "torch.std", "torch.std", "torch.std", "torch.std", "torch.std", "torch.std", "torch.std", "torch.std"], "methods", ["home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.bdd100k.BDD100KAug._eval_get_item"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "\n", "        ", "img_path", ",", "mask_path", "=", "self", ".", "imgs", "[", "index", "]", "\n", "\n", "img", ",", "mask", "=", "Image", ".", "open", "(", "img_path", ")", ".", "convert", "(", "'RGB'", ")", ",", "imageio", ".", "imread", "(", "mask_path", ",", "format", "=", "'PNG-FI'", ")", "\n", "img_name", "=", "os", ".", "path", ".", "splitext", "(", "os", ".", "path", ".", "basename", "(", "img_path", ")", ")", "[", "0", "]", "\n", "\n", "# This mask has pixel classes and instance IDs", "\n", "mask", "=", "np", ".", "array", "(", "mask", ",", "dtype", "=", "np", ".", "uint8", ")", "[", ":", ",", ":", ",", "0", "]", "\n", "mask_copy", "=", "mask", ".", "copy", "(", ")", "\n", "for", "k", ",", "v", "in", "trainid_to_trainid", ".", "items", "(", ")", ":", "\n", "            ", "mask_copy", "[", "mask", "==", "k", "]", "=", "v", "\n", "\n", "", "if", "self", ".", "eval_mode", ":", "\n", "            ", "return", "[", "transforms", ".", "ToTensor", "(", ")", "(", "img", ")", "]", ",", "self", ".", "_eval_get_item", "(", "img", ",", "mask_copy", ",", "\n", "self", ".", "eval_scales", ",", "\n", "self", ".", "eval_flip", ")", ",", "img_name", "\n", "\n", "", "mask", "=", "Image", ".", "fromarray", "(", "mask_copy", ".", "astype", "(", "np", ".", "uint8", ")", ")", "\n", "\n", "# Image Transformations", "\n", "if", "self", ".", "joint_transform", "is", "not", "None", ":", "\n", "            ", "img", ",", "mask", "=", "self", ".", "joint_transform", "(", "img", ",", "mask", ")", "\n", "\n", "", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "img_or", "=", "self", ".", "transform", "(", "img", ")", "\n", "\n", "", "if", "self", ".", "color_transform", "is", "not", "None", ":", "\n", "            ", "img_color", "=", "self", ".", "color_transform", "(", "img", ")", "\n", "\n", "", "if", "self", ".", "geometric_transform", "is", "not", "None", ":", "\n", "            ", "img_geometric", "=", "self", ".", "geometric_transform", "(", "img", ")", "\n", "\n", "", "rgb_mean_std_or", "=", "(", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "\n", "rgb_mean_std_color", "=", "(", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "\n", "rgb_mean_std_geometric", "=", "(", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "\n", "if", "self", ".", "image_in", ":", "\n", "            ", "eps", "=", "1e-5", "\n", "rgb_mean_std_or", "=", "(", "[", "torch", ".", "mean", "(", "img_or", "[", "0", "]", ")", ",", "torch", ".", "mean", "(", "img_or", "[", "1", "]", ")", ",", "torch", ".", "mean", "(", "img_or", "[", "2", "]", ")", "]", ",", "\n", "[", "torch", ".", "std", "(", "img_or", "[", "0", "]", ")", "+", "eps", ",", "torch", ".", "std", "(", "img_or", "[", "1", "]", ")", "+", "eps", ",", "torch", ".", "std", "(", "img_or", "[", "2", "]", ")", "+", "eps", "]", ")", "\n", "rgb_mean_std_color", "=", "(", "[", "torch", ".", "mean", "(", "img_color", "[", "0", "]", ")", ",", "torch", ".", "mean", "(", "img_color", "[", "1", "]", ")", ",", "torch", ".", "mean", "(", "img_color", "[", "2", "]", ")", "]", ",", "\n", "[", "torch", ".", "std", "(", "img_color", "[", "0", "]", ")", "+", "eps", ",", "torch", ".", "std", "(", "img_color", "[", "1", "]", ")", "+", "eps", ",", "torch", ".", "std", "(", "img_color", "[", "2", "]", ")", "+", "eps", "]", ")", "\n", "rgb_mean_std_geometric", "=", "(", "[", "torch", ".", "mean", "(", "img_geometric", "[", "0", "]", ")", ",", "torch", ".", "mean", "(", "img_geometric", "[", "1", "]", ")", ",", "torch", ".", "mean", "(", "img_geometric", "[", "2", "]", ")", "]", ",", "\n", "[", "torch", ".", "std", "(", "img_geometric", "[", "0", "]", ")", "+", "eps", ",", "torch", ".", "std", "(", "img_geometric", "[", "1", "]", ")", "+", "eps", ",", "torch", ".", "std", "(", "img_geometric", "[", "2", "]", ")", "+", "eps", "]", ")", "\n", "", "img_or", "=", "transforms", ".", "Normalize", "(", "*", "rgb_mean_std_or", ")", "(", "img_or", ")", "\n", "img_color", "=", "transforms", ".", "Normalize", "(", "*", "rgb_mean_std_color", ")", "(", "img_color", ")", "\n", "img_geometric", "=", "transforms", ".", "Normalize", "(", "*", "rgb_mean_std_geometric", ")", "(", "img_geometric", ")", "\n", "\n", "return", "img_or", ",", "img_color", ",", "img_geometric", ",", "img_name", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.synthia.SynthiaAug.__len__": [[579, 581], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "imgs", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.synthia.colorize_mask": [[67, 75], ["PIL.Image.fromarray().convert", "Image.fromarray().convert.putpalette", "PIL.Image.fromarray", "mask.astype"], "function", ["None"], ["", "def", "colorize_mask", "(", "mask", ")", ":", "\n", "    ", "\"\"\"\n    Colorize a segmentation mask.\n    \"\"\"", "\n", "# mask: numpy array of the mask", "\n", "new_mask", "=", "Image", ".", "fromarray", "(", "mask", ".", "astype", "(", "np", ".", "uint8", ")", ")", ".", "convert", "(", "'P'", ")", "\n", "new_mask", ".", "putpalette", "(", "palette", ")", "\n", "return", "new_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.synthia.add_items": [[77, 117], ["os.path.join", "os.path.join", "items.append", "os.path.join", "os.path.join", "name.split", "os.listdir", "os.path.join", "os.path.join"], "function", ["None"], ["", "def", "add_items", "(", "items", ",", "aug_items", ",", "img_path", ",", "mask_path", ",", "mask_postfix", ",", "mode", ",", "maxSkip", ")", ":", "\n", "    ", "\"\"\"\n\n    Add More items ot the list from the augmented dataset\n    \"\"\"", "\n", "\n", "if", "mode", "==", "\"train\"", ":", "\n", "        ", "img_path", "=", "os", ".", "path", ".", "join", "(", "img_path", ",", "'train'", ")", "\n", "mask_path", "=", "os", ".", "path", ".", "join", "(", "mask_path", ",", "'train'", ")", "\n", "", "elif", "mode", "==", "\"val\"", ":", "\n", "        ", "img_path", "=", "os", ".", "path", ".", "join", "(", "img_path", ",", "'val'", ")", "\n", "mask_path", "=", "os", ".", "path", ".", "join", "(", "mask_path", ",", "'val'", ")", "\n", "\n", "", "list_items", "=", "[", "name", ".", "split", "(", "img_postfix", ")", "[", "0", "]", "for", "name", "in", "\n", "os", ".", "listdir", "(", "img_path", ")", "]", "\n", "for", "it", "in", "list_items", ":", "\n", "        ", "item", "=", "(", "os", ".", "path", ".", "join", "(", "img_path", ",", "it", "+", "img_postfix", ")", ",", "\n", "os", ".", "path", ".", "join", "(", "mask_path", ",", "it", "+", "mask_postfix", ")", ")", "\n", "# ########################################################", "\n", "# ###### dataset augmentation ############################", "\n", "# ########################################################", "\n", "# if mode == \"train\" and maxSkip > 0:", "\n", "#     new_img_path = os.path.join(aug_root, 'leftImg8bit_trainvaltest', 'leftImg8bit')", "\n", "#     new_mask_path = os.path.join(aug_root, 'gtFine_trainvaltest', 'gtFine')", "\n", "#     file_info = it.split(\"_\")", "\n", "#     cur_seq_id = file_info[-1]", "\n", "\n", "#     prev_seq_id = \"%06d\" % (int(cur_seq_id) - maxSkip)", "\n", "#     next_seq_id = \"%06d\" % (int(cur_seq_id) + maxSkip)", "\n", "#     prev_it = file_info[0] + \"_\" + file_info[1] + \"_\" + prev_seq_id", "\n", "#     next_it = file_info[0] + \"_\" + file_info[1] + \"_\" + next_seq_id", "\n", "#     prev_item = (os.path.join(new_img_path, c, prev_it + img_postfix),", "\n", "#                  os.path.join(new_mask_path, c, prev_it + mask_postfix))", "\n", "#     if os.path.isfile(prev_item[0]) and os.path.isfile(prev_item[1]):", "\n", "#         aug_items.append(prev_item)", "\n", "#     next_item = (os.path.join(new_img_path, c, next_it + img_postfix),", "\n", "#                  os.path.join(new_mask_path, c, next_it + mask_postfix))", "\n", "#     if os.path.isfile(next_item[0]) and os.path.isfile(next_item[1]):", "\n", "#         aug_items.append(next_item)", "\n", "items", ".", "append", "(", "item", ")", "\n", "# items.extend(extra_items)", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.synthia.make_cv_splits": [[120, 153], ["os.path.join", "os.path.join", "sorted", "len", "len", "range", "range", "cv_splits.append", "os.listdir", "os.listdir", "split[].append", "split[].append"], "function", ["None"], ["", "", "def", "make_cv_splits", "(", "img_dir_name", ")", ":", "\n", "    ", "\"\"\"\n    Create splits of train/val data.\n    A split is a lists of cities.\n    split0 is aligned with the default Cityscapes train/val.\n    \"\"\"", "\n", "trn_path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "img_dir_name", ",", "'train'", ")", "\n", "val_path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "img_dir_name", ",", "'val'", ")", "\n", "\n", "trn_cities", "=", "[", "'train/'", "+", "c", "for", "c", "in", "os", ".", "listdir", "(", "trn_path", ")", "]", "\n", "val_cities", "=", "[", "'val/'", "+", "c", "for", "c", "in", "os", ".", "listdir", "(", "val_path", ")", "]", "\n", "\n", "# want reproducible randomly shuffled", "\n", "trn_cities", "=", "sorted", "(", "trn_cities", ")", "\n", "\n", "all_cities", "=", "val_cities", "+", "trn_cities", "\n", "num_val_cities", "=", "len", "(", "val_cities", ")", "\n", "num_cities", "=", "len", "(", "all_cities", ")", "\n", "\n", "cv_splits", "=", "[", "]", "\n", "for", "split_idx", "in", "range", "(", "cfg", ".", "DATASET", ".", "CV_SPLITS", ")", ":", "\n", "        ", "split", "=", "{", "}", "\n", "split", "[", "'train'", "]", "=", "[", "]", "\n", "split", "[", "'val'", "]", "=", "[", "]", "\n", "offset", "=", "split_idx", "*", "num_cities", "//", "cfg", ".", "DATASET", ".", "CV_SPLITS", "\n", "for", "j", "in", "range", "(", "num_cities", ")", ":", "\n", "            ", "if", "j", ">=", "offset", "and", "j", "<", "(", "offset", "+", "num_val_cities", ")", ":", "\n", "                ", "split", "[", "'val'", "]", ".", "append", "(", "all_cities", "[", "j", "]", ")", "\n", "", "else", ":", "\n", "                ", "split", "[", "'train'", "]", ".", "append", "(", "all_cities", "[", "j", "]", ")", "\n", "", "", "cv_splits", ".", "append", "(", "split", ")", "\n", "\n", "", "return", "cv_splits", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.synthia.make_split_coarse": [[155, 168], ["os.listdir", "sorted"], "function", ["None"], ["", "def", "make_split_coarse", "(", "img_path", ")", ":", "\n", "    ", "\"\"\"\n    Create a train/val split for coarse\n    return: city split in train\n    \"\"\"", "\n", "all_cities", "=", "os", ".", "listdir", "(", "img_path", ")", "\n", "all_cities", "=", "sorted", "(", "all_cities", ")", "# needs to always be the same", "\n", "val_cities", "=", "[", "]", "# Can manually set cities to not be included into train split", "\n", "\n", "split", "=", "{", "}", "\n", "split", "[", "'val'", "]", "=", "val_cities", "\n", "split", "[", "'train'", "]", "=", "[", "c", "for", "c", "in", "all_cities", "if", "c", "not", "in", "val_cities", "]", "\n", "return", "split", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.synthia.make_test_split": [[170, 175], ["os.path.join", "os.listdir"], "function", ["None"], ["", "def", "make_test_split", "(", "img_dir_name", ")", ":", "\n", "    ", "test_path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "img_dir_name", ",", "'leftImg8bit'", ",", "'test'", ")", "\n", "test_cities", "=", "[", "'test/'", "+", "c", "for", "c", "in", "os", ".", "listdir", "(", "test_path", ")", "]", "\n", "\n", "return", "test_cities", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.synthia.make_dataset": [[177, 209], ["os.path.join", "os.path.join", "logging.info", "logging.info", "synthia.add_items", "len", "len"], "function", ["home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.bdd100k.add_items"], ["", "def", "make_dataset", "(", "mode", ",", "maxSkip", "=", "0", ",", "cv_split", "=", "0", ")", ":", "\n", "    ", "\"\"\"\n    Assemble list of images + mask files\n\n    fine -   modes: train/val/test/trainval    cv:0,1,2\n    coarse - modes: train/val                  cv:na\n\n    path examples:\n    leftImg8bit_trainextra/leftImg8bit/train_extra/augsburg\n    gtCoarse/gtCoarse/train_extra/augsburg\n    \"\"\"", "\n", "items", "=", "[", "]", "\n", "aug_items", "=", "[", "]", "\n", "\n", "assert", "mode", "in", "[", "'train'", ",", "'val'", ",", "'test'", ",", "'trainval'", "]", "\n", "img_dir_name", "=", "'RGB'", "\n", "img_path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "img_dir_name", ")", "\n", "mask_path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "'GT'", ",", "'LABELS'", ")", "\n", "mask_postfix", "=", "'.png'", "\n", "# cv_splits = make_cv_splits(img_dir_name)", "\n", "if", "mode", "==", "'trainval'", ":", "\n", "        ", "modes", "=", "[", "'train'", ",", "'val'", "]", "\n", "", "else", ":", "\n", "        ", "modes", "=", "[", "mode", "]", "\n", "", "for", "mode", "in", "modes", ":", "\n", "        ", "logging", ".", "info", "(", "'{} fine cities: '", ".", "format", "(", "mode", ")", ")", "\n", "add_items", "(", "items", ",", "aug_items", ",", "img_path", ",", "mask_path", ",", "\n", "mask_postfix", ",", "mode", ",", "maxSkip", ")", "\n", "\n", "# logging.info('Cityscapes-{}: {} images'.format(mode, len(items)))", "\n", "", "logging", ".", "info", "(", "'Synthia-{}: {} images'", ".", "format", "(", "mode", ",", "len", "(", "items", ")", "+", "len", "(", "aug_items", ")", ")", ")", "\n", "return", "items", ",", "aug_items", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.gtav.GTAV.__init__": [[179, 214], ["gtav.make_dataset", "len", "RuntimeError", "float", "eval_scales.split"], "methods", ["home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.bdd100k.make_dataset"], ["    ", "def", "__init__", "(", "self", ",", "mode", ",", "maxSkip", "=", "0", ",", "joint_transform", "=", "None", ",", "sliding_crop", "=", "None", ",", "\n", "transform", "=", "None", ",", "target_transform", "=", "None", ",", "target_aux_transform", "=", "None", ",", "dump_images", "=", "False", ",", "\n", "cv_split", "=", "None", ",", "eval_mode", "=", "False", ",", "\n", "eval_scales", "=", "None", ",", "eval_flip", "=", "False", ",", "image_in", "=", "False", ",", "\n", "extract_feature", "=", "False", ")", ":", "\n", "        ", "self", ".", "mode", "=", "mode", "\n", "self", ".", "maxSkip", "=", "maxSkip", "\n", "self", ".", "joint_transform", "=", "joint_transform", "\n", "self", ".", "sliding_crop", "=", "sliding_crop", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "target_transform", "=", "target_transform", "\n", "self", ".", "target_aux_transform", "=", "target_aux_transform", "\n", "self", ".", "dump_images", "=", "dump_images", "\n", "self", ".", "eval_mode", "=", "eval_mode", "\n", "self", ".", "eval_flip", "=", "eval_flip", "\n", "self", ".", "eval_scales", "=", "None", "\n", "self", ".", "image_in", "=", "image_in", "\n", "self", ".", "extract_feature", "=", "extract_feature", "\n", "\n", "\n", "if", "eval_scales", "!=", "None", ":", "\n", "            ", "self", ".", "eval_scales", "=", "[", "float", "(", "scale", ")", "for", "scale", "in", "eval_scales", ".", "split", "(", "\",\"", ")", "]", "\n", "\n", "", "if", "cv_split", ":", "\n", "            ", "self", ".", "cv_split", "=", "cv_split", "\n", "assert", "cv_split", "<", "cfg", ".", "DATASET", ".", "CV_SPLITS", ",", "'expected cv_split {} to be < CV_SPLITS {}'", ".", "format", "(", "\n", "cv_split", ",", "cfg", ".", "DATASET", ".", "CV_SPLITS", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "cv_split", "=", "0", "\n", "", "self", ".", "imgs", ",", "_", "=", "make_dataset", "(", "mode", ",", "self", ".", "maxSkip", ",", "cv_split", "=", "self", ".", "cv_split", ")", "\n", "if", "len", "(", "self", ".", "imgs", ")", "==", "0", ":", "\n", "            ", "raise", "RuntimeError", "(", "'Found 0 images, please check the data set'", ")", "\n", "\n", "", "self", ".", "mean_std", "=", "(", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.gtav.GTAV._eval_get_item": [[215, 230], ["range", "return_imgs.append", "int", "img.transpose.transpose.transpose", "img.transpose.transpose.resize", "imgs.append", "int", "int", "torchvision.ToTensor", "torchvision.Normalize"], "methods", ["None"], ["", "def", "_eval_get_item", "(", "self", ",", "img", ",", "mask", ",", "scales", ",", "flip_bool", ")", ":", "\n", "        ", "return_imgs", "=", "[", "]", "\n", "for", "flip", "in", "range", "(", "int", "(", "flip_bool", ")", "+", "1", ")", ":", "\n", "            ", "imgs", "=", "[", "]", "\n", "if", "flip", ":", "\n", "                ", "img", "=", "img", ".", "transpose", "(", "Image", ".", "FLIP_LEFT_RIGHT", ")", "\n", "", "for", "scale", "in", "scales", ":", "\n", "                ", "w", ",", "h", "=", "img", ".", "size", "\n", "target_w", ",", "target_h", "=", "int", "(", "w", "*", "scale", ")", ",", "int", "(", "h", "*", "scale", ")", "\n", "resize_img", "=", "img", ".", "resize", "(", "(", "target_w", ",", "target_h", ")", ")", "\n", "tensor_img", "=", "transforms", ".", "ToTensor", "(", ")", "(", "resize_img", ")", "\n", "final_tensor", "=", "transforms", ".", "Normalize", "(", "*", "self", ".", "mean_std", ")", "(", "tensor_img", ")", "\n", "imgs", ".", "append", "(", "final_tensor", ")", "\n", "", "return_imgs", ".", "append", "(", "imgs", ")", "\n", "", "return", "return_imgs", ",", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.gtav.GTAV.__getitem__": [[231, 302], ["numpy.full", "color_to_trainid.items", "PIL.Image.fromarray", "PIL.Image.open().convert", "scipy.imread", "os.path.splitext", "print", "print", "numpy.full.astype", "gtav.GTAV.transform", "torchvision.Normalize", "torchvision.Normalize", "gtav.GTAV.target_aux_transform", "torch.tensor", "gtav.GTAV.target_transform", "os.makedirs", "os.path.join", "os.path.join", "gtav.colorize_mask", "gtav.GTAV.save", "colorize_mask.save", "os.path.basename", "str", "len", "PIL.Image.open().convert", "scipy.imread", "os.path.splitext", "gtav.GTAV._eval_get_item", "gtav.GTAV.joint_transform", "numpy.array", "PIL.Image.open", "os.path.basename", "torch.mean", "torch.mean", "torch.mean", "PIL.Image.open", "torchvision.ToTensor", "torch.std", "torch.std", "torch.std", "numpy.array", "numpy.array", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.bdd100k.colorize_mask", "home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.bdd100k.BDD100KAug._eval_get_item"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "\n", "        ", "img_path", ",", "mask_path", "=", "self", ".", "imgs", "[", "index", "]", "\n", "img", ",", "mask", "=", "Image", ".", "open", "(", "img_path", ")", ".", "convert", "(", "'RGB'", ")", ",", "m", ".", "imread", "(", "mask_path", ")", "\n", "img_name", "=", "os", ".", "path", ".", "splitext", "(", "os", ".", "path", ".", "basename", "(", "img_path", ")", ")", "[", "0", "]", "\n", "\n", "while", "(", "img", ".", "size", "[", "1", "]", ",", "img", ".", "size", "[", "0", "]", ")", "!=", "mask", "[", ":", ",", ":", ",", "0", "]", ".", "shape", ":", "\n", "            ", "print", "(", "\"Error!!\"", ",", "img", ".", "size", ",", "mask", "[", ":", ",", ":", ",", "0", "]", ".", "shape", ",", "img_name", ")", "\n", "print", "(", "\"Dropping \"", ",", "str", "(", "index", ")", ")", "\n", "# index = index + 1", "\n", "if", "index", "+", "1", "==", "len", "(", "self", ".", "imgs", ")", ":", "\n", "                ", "index", "=", "0", "\n", "", "else", ":", "\n", "                ", "index", "+=", "1", "\n", "", "img_path", ",", "mask_path", "=", "self", ".", "imgs", "[", "index", "]", "\n", "img", ",", "mask", "=", "Image", ".", "open", "(", "img_path", ")", ".", "convert", "(", "'RGB'", ")", ",", "m", ".", "imread", "(", "mask_path", ")", "\n", "img_name", "=", "os", ".", "path", ".", "splitext", "(", "os", ".", "path", ".", "basename", "(", "img_path", ")", ")", "[", "0", "]", "\n", "\n", "", "image_size", "=", "mask", "[", ":", ",", ":", ",", "0", "]", ".", "shape", "\n", "mask_copy", "=", "np", ".", "full", "(", "image_size", ",", "ignore_label", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "\n", "for", "k", ",", "v", "in", "color_to_trainid", ".", "items", "(", ")", ":", "\n", "            ", "if", "v", "!=", "255", "and", "v", "!=", "-", "1", ":", "\n", "                ", "mask_copy", "[", "(", "mask", "==", "np", ".", "array", "(", "k", ")", ")", "[", ":", ",", ":", ",", "0", "]", "&", "(", "mask", "==", "np", ".", "array", "(", "k", ")", ")", "[", ":", ",", ":", ",", "1", "]", "&", "(", "mask", "==", "np", ".", "array", "(", "k", ")", ")", "[", ":", ",", ":", ",", "2", "]", "]", "=", "v", "\n", "\n", "# for k, v in color_to_trainid.items():", "\n", "#     mask_copy[(mask == np.array(k))[:,:,0]] = v", "\n", "\n", "", "", "if", "self", ".", "eval_mode", ":", "\n", "            ", "return", "[", "transforms", ".", "ToTensor", "(", ")", "(", "img", ")", "]", ",", "self", ".", "_eval_get_item", "(", "img", ",", "mask_copy", ",", "\n", "self", ".", "eval_scales", ",", "\n", "self", ".", "eval_flip", ")", ",", "img_name", "\n", "\n", "", "mask", "=", "Image", ".", "fromarray", "(", "mask_copy", ".", "astype", "(", "np", ".", "uint8", ")", ")", "\n", "\n", "# Image Transformations", "\n", "if", "self", ".", "extract_feature", "is", "not", "True", ":", "\n", "            ", "if", "self", ".", "joint_transform", "is", "not", "None", ":", "\n", "                ", "img", ",", "mask", "=", "self", ".", "joint_transform", "(", "img", ",", "mask", ")", "\n", "\n", "", "", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "\n", "", "rgb_mean_std_gt", "=", "(", "[", "0.5", ",", "0.5", ",", "0.5", "]", ",", "[", "0.5", ",", "0.5", ",", "0.5", "]", ")", "\n", "img_gt", "=", "transforms", ".", "Normalize", "(", "*", "rgb_mean_std_gt", ")", "(", "img", ")", "\n", "\n", "rgb_mean_std", "=", "(", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "\n", "if", "self", ".", "image_in", ":", "\n", "            ", "eps", "=", "1e-5", "\n", "rgb_mean_std", "=", "(", "[", "torch", ".", "mean", "(", "img", "[", "0", "]", ")", ",", "torch", ".", "mean", "(", "img", "[", "1", "]", ")", ",", "torch", ".", "mean", "(", "img", "[", "2", "]", ")", "]", ",", "\n", "[", "torch", ".", "std", "(", "img", "[", "0", "]", ")", "+", "eps", ",", "torch", ".", "std", "(", "img", "[", "1", "]", ")", "+", "eps", ",", "torch", ".", "std", "(", "img", "[", "2", "]", ")", "+", "eps", "]", ")", "\n", "", "img", "=", "transforms", ".", "Normalize", "(", "*", "rgb_mean_std", ")", "(", "img", ")", "\n", "\n", "if", "self", ".", "target_aux_transform", "is", "not", "None", ":", "\n", "            ", "mask_aux", "=", "self", ".", "target_aux_transform", "(", "mask", ")", "\n", "", "else", ":", "\n", "            ", "mask_aux", "=", "torch", ".", "tensor", "(", "[", "0", "]", ")", "\n", "", "if", "self", ".", "target_transform", "is", "not", "None", ":", "\n", "            ", "mask", "=", "self", ".", "target_transform", "(", "mask", ")", "\n", "\n", "# Debug", "\n", "", "if", "self", ".", "dump_images", ":", "\n", "            ", "outdir", "=", "'../../dump_imgs_{}'", ".", "format", "(", "self", ".", "mode", ")", "\n", "os", ".", "makedirs", "(", "outdir", ",", "exist_ok", "=", "True", ")", "\n", "out_img_fn", "=", "os", ".", "path", ".", "join", "(", "outdir", ",", "img_name", "+", "'.png'", ")", "\n", "out_msk_fn", "=", "os", ".", "path", ".", "join", "(", "outdir", ",", "img_name", "+", "'_mask.png'", ")", "\n", "mask_img", "=", "colorize_mask", "(", "np", ".", "array", "(", "mask", ")", ")", "\n", "img", ".", "save", "(", "out_img_fn", ")", "\n", "mask_img", ".", "save", "(", "out_msk_fn", ")", "\n", "\n", "", "return", "img", ",", "mask", ",", "img_name", ",", "mask_aux", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.gtav.GTAV.__len__": [[303, 305], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "imgs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.gtav.GTAVUniform.__init__": [[311, 365], ["gtav.make_dataset", "len", "os.path.isfile", "gtav.GTAVUniform.centroids.copy", "gtav.GTAVUniform.build_epoch", "datasets.class_centroids_all_from_color", "datasets.class_centroids_all_from_color", "open", "json.load", "print", "int", "open", "json.dump"], "methods", ["home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.bdd100k.make_dataset", "home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.uniform.build_epoch", "home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.uniform.class_centroids_all_from_color", "home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.uniform.class_centroids_all_from_color"], ["def", "__init__", "(", "self", ",", "mode", ",", "maxSkip", "=", "0", ",", "joint_transform_list", "=", "None", ",", "sliding_crop", "=", "None", ",", "\n", "transform", "=", "None", ",", "target_transform", "=", "None", ",", "target_aux_transform", "=", "None", ",", "dump_images", "=", "False", ",", "\n", "cv_split", "=", "None", ",", "class_uniform_pct", "=", "0.5", ",", "class_uniform_tile", "=", "1024", ",", "\n", "test", "=", "False", ",", "coarse_boost_classes", "=", "None", ",", "is_additional", "=", "False", ",", "image_in", "=", "False", ",", "\n", "extract_feature", "=", "False", ")", ":", "\n", "        ", "self", ".", "mode", "=", "mode", "\n", "self", ".", "maxSkip", "=", "maxSkip", "\n", "self", ".", "joint_transform_list", "=", "joint_transform_list", "\n", "self", ".", "sliding_crop", "=", "sliding_crop", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "target_transform", "=", "target_transform", "\n", "self", ".", "target_aux_transform", "=", "target_aux_transform", "\n", "self", ".", "dump_images", "=", "dump_images", "\n", "self", ".", "class_uniform_pct", "=", "class_uniform_pct", "\n", "self", ".", "class_uniform_tile", "=", "class_uniform_tile", "\n", "self", ".", "coarse_boost_classes", "=", "coarse_boost_classes", "\n", "self", ".", "is_additional", "=", "is_additional", "\n", "self", ".", "image_in", "=", "image_in", "\n", "self", ".", "extract_feature", "=", "extract_feature", "\n", "\n", "\n", "if", "cv_split", ":", "\n", "            ", "self", ".", "cv_split", "=", "cv_split", "\n", "assert", "cv_split", "<", "cfg", ".", "DATASET", ".", "CV_SPLITS", ",", "'expected cv_split {} to be < CV_SPLITS {}'", ".", "format", "(", "\n", "cv_split", ",", "cfg", ".", "DATASET", ".", "CV_SPLITS", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "cv_split", "=", "0", "\n", "\n", "", "self", ".", "imgs", ",", "self", ".", "aug_imgs", "=", "make_dataset", "(", "mode", ",", "self", ".", "maxSkip", ",", "cv_split", "=", "self", ".", "cv_split", ")", "\n", "assert", "len", "(", "self", ".", "imgs", ")", ",", "'Found 0 images, please check the data set'", "\n", "\n", "# Centroids for fine data", "\n", "json_fn", "=", "'gtav_{}_cv{}_tile{}.json'", ".", "format", "(", "\n", "self", ".", "mode", ",", "self", ".", "cv_split", ",", "self", ".", "class_uniform_tile", ")", "\n", "if", "os", ".", "path", ".", "isfile", "(", "json_fn", ")", ":", "\n", "            ", "with", "open", "(", "json_fn", ",", "'r'", ")", "as", "json_data", ":", "\n", "                ", "centroids", "=", "json", ".", "load", "(", "json_data", ")", "\n", "", "for", "idx", "in", "centroids", ":", "\n", "                ", "print", "(", "\"###### centroids\"", ",", "idx", ")", "\n", "\n", "", "self", ".", "centroids", "=", "{", "int", "(", "idx", ")", ":", "centroids", "[", "idx", "]", "for", "idx", "in", "centroids", "}", "\n", "", "else", ":", "\n", "            ", "self", ".", "centroids", "=", "uniform", ".", "class_centroids_all_from_color", "(", "\n", "self", ".", "imgs", ",", "\n", "num_classes", ",", "\n", "id2trainid", "=", "color_to_trainid", ",", "\n", "tile_size", "=", "class_uniform_tile", ")", "\n", "with", "open", "(", "json_fn", ",", "'w'", ")", "as", "outfile", ":", "\n", "                ", "json", ".", "dump", "(", "self", ".", "centroids", ",", "outfile", ",", "indent", "=", "4", ")", "\n", "\n", "", "", "self", ".", "fine_centroids", "=", "self", ".", "centroids", ".", "copy", "(", ")", "\n", "\n", "self", ".", "build_epoch", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.gtav.GTAVUniform.cities_uniform": [[366, 376], ["cities.keys", "logging.info", "os.path.basename", "os.path.basename.split", "str", "sorted"], "methods", ["None"], ["", "def", "cities_uniform", "(", "self", ",", "imgs", ",", "name", ")", ":", "\n", "        ", "\"\"\" list out cities in imgs_uniform \"\"\"", "\n", "cities", "=", "{", "}", "\n", "for", "item", "in", "imgs", ":", "\n", "            ", "img_fn", "=", "item", "[", "0", "]", "\n", "img_fn", "=", "os", ".", "path", ".", "basename", "(", "img_fn", ")", "\n", "city", "=", "img_fn", ".", "split", "(", "'_'", ")", "[", "0", "]", "\n", "cities", "[", "city", "]", "=", "1", "\n", "", "city_names", "=", "cities", ".", "keys", "(", ")", "\n", "logging", ".", "info", "(", "'Cities for {} '", ".", "format", "(", "name", ")", "+", "str", "(", "sorted", "(", "city_names", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.gtav.GTAVUniform.build_epoch": [[377, 409], ["datasets.build_epoch", "datasets.build_epoch", "datasets.build_epoch", "datasets.build_epoch", "datasets.build_epoch", "datasets.build_epoch", "datasets.build_epoch", "datasets.build_epoch"], "methods", ["home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.uniform.build_epoch", "home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.uniform.build_epoch", "home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.uniform.build_epoch", "home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.uniform.build_epoch", "home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.uniform.build_epoch", "home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.uniform.build_epoch", "home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.uniform.build_epoch", "home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.uniform.build_epoch"], ["", "def", "build_epoch", "(", "self", ",", "cut", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Perform Uniform Sampling per epoch to create a new list for training such that it\n        uniformly samples all classes\n        \"\"\"", "\n", "if", "self", ".", "class_uniform_pct", ">", "0", ":", "\n", "            ", "if", "self", ".", "is_additional", ":", "\n", "                ", "if", "cut", ":", "\n", "# after max_cu_epoch, we only fine images to fine tune", "\n", "                    ", "self", ".", "imgs_uniform", "=", "uniform", ".", "build_epoch", "(", "self", ".", "imgs", ",", "\n", "self", ".", "fine_centroids", ",", "\n", "num_classes", ",", "\n", "cfg", ".", "CLASS_UNIFORM_PCT_ADD", ")", "\n", "", "else", ":", "\n", "                    ", "self", ".", "imgs_uniform", "=", "uniform", ".", "build_epoch", "(", "self", ".", "imgs", "+", "self", ".", "aug_imgs", ",", "\n", "self", ".", "centroids", ",", "\n", "num_classes", ",", "\n", "cfg", ".", "CLASS_UNIFORM_PCT_ADD", ")", "\n", "", "", "else", ":", "\n", "                ", "if", "cut", ":", "\n", "# after max_cu_epoch, we only fine images to fine tune", "\n", "                    ", "self", ".", "imgs_uniform", "=", "uniform", ".", "build_epoch", "(", "self", ".", "imgs", ",", "\n", "self", ".", "fine_centroids", ",", "\n", "num_classes", ",", "\n", "cfg", ".", "CLASS_UNIFORM_PCT", ")", "\n", "", "else", ":", "\n", "                    ", "self", ".", "imgs_uniform", "=", "uniform", ".", "build_epoch", "(", "self", ".", "imgs", "+", "self", ".", "aug_imgs", ",", "\n", "self", ".", "centroids", ",", "\n", "num_classes", ",", "\n", "cfg", ".", "CLASS_UNIFORM_PCT", ")", "\n", "", "", "", "else", ":", "\n", "            ", "self", ".", "imgs_uniform", "=", "self", ".", "imgs", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.gtav.GTAVUniform.__getitem__": [[410, 495], ["numpy.full", "color_to_trainid.items", "PIL.Image.fromarray", "len", "PIL.Image.open().convert", "scipy.imread", "os.path.splitext", "print", "print", "numpy.full.astype", "os.makedirs", "os.path.join", "os.path.join", "gtav.colorize_mask", "gtav.GTAVUniform.save", "colorize_mask.save", "gtav.GTAVUniform.transform", "torchvision.Normalize", "torchvision.Normalize", "gtav.GTAVUniform.target_aux_transform", "torch.tensor", "gtav.GTAVUniform.target_transform", "os.path.basename", "str", "len", "PIL.Image.open().convert", "scipy.imread", "os.path.splitext", "enumerate", "numpy.array", "PIL.Image.open", "os.path.basename", "torch.mean", "torch.mean", "torch.mean", "PIL.Image.open", "xform", "xform", "torch.std", "torch.std", "torch.std", "numpy.array", "numpy.array", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.bdd100k.colorize_mask"], ["", "", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "elem", "=", "self", ".", "imgs_uniform", "[", "index", "]", "\n", "centroid", "=", "None", "\n", "if", "len", "(", "elem", ")", "==", "4", ":", "\n", "            ", "img_path", ",", "mask_path", ",", "centroid", ",", "class_id", "=", "elem", "\n", "", "else", ":", "\n", "            ", "img_path", ",", "mask_path", "=", "elem", "\n", "", "img", ",", "mask", "=", "Image", ".", "open", "(", "img_path", ")", ".", "convert", "(", "'RGB'", ")", ",", "m", ".", "imread", "(", "mask_path", ")", "\n", "img_name", "=", "os", ".", "path", ".", "splitext", "(", "os", ".", "path", ".", "basename", "(", "img_path", ")", ")", "[", "0", "]", "\n", "\n", "# print(img.size, mask[:,:,0].shape)", "\n", "while", "(", "img", ".", "size", "[", "1", "]", ",", "img", ".", "size", "[", "0", "]", ")", "!=", "mask", "[", ":", ",", ":", ",", "0", "]", ".", "shape", ":", "\n", "            ", "print", "(", "\"Error!!\"", ",", "img", ".", "size", ",", "mask", "[", ":", ",", ":", ",", "0", "]", ".", "shape", ",", "img_name", ")", "\n", "print", "(", "\"Dropping \"", ",", "str", "(", "index", ")", ")", "\n", "# index = index + 1", "\n", "if", "index", "+", "1", "==", "len", "(", "self", ".", "imgs", ")", ":", "\n", "                ", "index", "=", "0", "\n", "", "else", ":", "\n", "                ", "index", "+=", "1", "\n", "", "img_path", ",", "mask_path", "=", "self", ".", "imgs", "[", "index", "]", "\n", "img", ",", "mask", "=", "Image", ".", "open", "(", "img_path", ")", ".", "convert", "(", "'RGB'", ")", ",", "m", ".", "imread", "(", "mask_path", ")", "\n", "img_name", "=", "os", ".", "path", ".", "splitext", "(", "os", ".", "path", ".", "basename", "(", "img_path", ")", ")", "[", "0", "]", "\n", "\n", "", "image_size", "=", "mask", "[", ":", ",", ":", ",", "0", "]", ".", "shape", "\n", "mask_copy", "=", "np", ".", "full", "(", "image_size", ",", "ignore_label", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "\n", "for", "k", ",", "v", "in", "color_to_trainid", ".", "items", "(", ")", ":", "\n", "            ", "if", "v", "!=", "255", "and", "v", "!=", "-", "1", ":", "\n", "                ", "mask_copy", "[", "(", "mask", "==", "np", ".", "array", "(", "k", ")", ")", "[", ":", ",", ":", ",", "0", "]", "&", "(", "mask", "==", "np", ".", "array", "(", "k", ")", ")", "[", ":", ",", ":", ",", "1", "]", "&", "(", "mask", "==", "np", ".", "array", "(", "k", ")", ")", "[", ":", ",", ":", ",", "2", "]", "]", "=", "v", "\n", "\n", "# for k, v in color_to_trainid.items():", "\n", "#     mask_copy[(mask == np.array(k))[:,:,0]] = v", "\n", "\n", "", "", "mask", "=", "Image", ".", "fromarray", "(", "mask_copy", ".", "astype", "(", "np", ".", "uint8", ")", ")", "\n", "\n", "# mask = np.array(mask)", "\n", "# mask_copy = mask.copy()", "\n", "# for k, v in trainid_to_trainid.items():", "\n", "#     mask_copy[mask == k] = v", "\n", "# mask = Image.fromarray(mask_copy.astype(np.uint8))", "\n", "\n", "# Image Transformations", "\n", "if", "self", ".", "extract_feature", "is", "not", "True", ":", "\n", "            ", "if", "self", ".", "joint_transform_list", "is", "not", "None", ":", "\n", "                ", "for", "idx", ",", "xform", "in", "enumerate", "(", "self", ".", "joint_transform_list", ")", ":", "\n", "                    ", "if", "idx", "==", "0", "and", "centroid", "is", "not", "None", ":", "\n", "# HACK", "\n", "# We assume that the first transform is capable of taking", "\n", "# in a centroid", "\n", "                        ", "img", ",", "mask", "=", "xform", "(", "img", ",", "mask", ",", "centroid", ")", "\n", "", "else", ":", "\n", "                        ", "img", ",", "mask", "=", "xform", "(", "img", ",", "mask", ")", "\n", "\n", "# Debug", "\n", "", "", "", "", "if", "self", ".", "dump_images", "and", "centroid", "is", "not", "None", ":", "\n", "            ", "outdir", "=", "'../../dump_imgs_{}'", ".", "format", "(", "self", ".", "mode", ")", "\n", "os", ".", "makedirs", "(", "outdir", ",", "exist_ok", "=", "True", ")", "\n", "dump_img_name", "=", "trainid_to_name", "[", "class_id", "]", "+", "'_'", "+", "img_name", "\n", "out_img_fn", "=", "os", ".", "path", ".", "join", "(", "outdir", ",", "dump_img_name", "+", "'.png'", ")", "\n", "out_msk_fn", "=", "os", ".", "path", ".", "join", "(", "outdir", ",", "dump_img_name", "+", "'_mask.png'", ")", "\n", "mask_img", "=", "colorize_mask", "(", "np", ".", "array", "(", "mask", ")", ")", "\n", "img", ".", "save", "(", "out_img_fn", ")", "\n", "mask_img", ".", "save", "(", "out_msk_fn", ")", "\n", "\n", "", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "\n", "", "rgb_mean_std_gt", "=", "(", "[", "0.5", ",", "0.5", ",", "0.5", "]", ",", "[", "0.5", ",", "0.5", ",", "0.5", "]", ")", "\n", "img_gt", "=", "transforms", ".", "Normalize", "(", "*", "rgb_mean_std_gt", ")", "(", "img", ")", "\n", "\n", "rgb_mean_std", "=", "(", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "\n", "if", "self", ".", "image_in", ":", "\n", "            ", "eps", "=", "1e-5", "\n", "rgb_mean_std", "=", "(", "[", "torch", ".", "mean", "(", "img", "[", "0", "]", ")", ",", "torch", ".", "mean", "(", "img", "[", "1", "]", ")", ",", "torch", ".", "mean", "(", "img", "[", "2", "]", ")", "]", ",", "\n", "[", "torch", ".", "std", "(", "img", "[", "0", "]", ")", "+", "eps", ",", "torch", ".", "std", "(", "img", "[", "1", "]", ")", "+", "eps", ",", "torch", ".", "std", "(", "img", "[", "2", "]", ")", "+", "eps", "]", ")", "\n", "", "img", "=", "transforms", ".", "Normalize", "(", "*", "rgb_mean_std", ")", "(", "img", ")", "\n", "\n", "if", "self", ".", "target_aux_transform", "is", "not", "None", ":", "\n", "            ", "mask_aux", "=", "self", ".", "target_aux_transform", "(", "mask", ")", "\n", "", "else", ":", "\n", "            ", "mask_aux", "=", "torch", ".", "tensor", "(", "[", "0", "]", ")", "\n", "", "if", "self", ".", "target_transform", "is", "not", "None", ":", "\n", "            ", "mask", "=", "self", ".", "target_transform", "(", "mask", ")", "\n", "\n", "", "return", "img", ",", "mask", ",", "img_name", ",", "mask_aux", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.gtav.GTAVUniform.__len__": [[496, 498], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "imgs_uniform", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.gtav.GTAVAug.__init__": [[501, 537], ["gtav.make_dataset", "len", "RuntimeError", "float", "eval_scales.split"], "methods", ["home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.bdd100k.make_dataset"], ["    ", "def", "__init__", "(", "self", ",", "mode", ",", "maxSkip", "=", "0", ",", "joint_transform", "=", "None", ",", "sliding_crop", "=", "None", ",", "\n", "transform", "=", "None", ",", "color_transform", "=", "None", ",", "geometric_transform", "=", "None", ",", "target_transform", "=", "None", ",", "target_aux_transform", "=", "None", ",", "dump_images", "=", "False", ",", "\n", "cv_split", "=", "None", ",", "eval_mode", "=", "False", ",", "\n", "eval_scales", "=", "None", ",", "eval_flip", "=", "False", ",", "image_in", "=", "False", ",", "\n", "extract_feature", "=", "False", ")", ":", "\n", "        ", "self", ".", "mode", "=", "mode", "\n", "self", ".", "maxSkip", "=", "maxSkip", "\n", "self", ".", "joint_transform", "=", "joint_transform", "\n", "self", ".", "sliding_crop", "=", "sliding_crop", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "color_transform", "=", "color_transform", "\n", "self", ".", "geometric_transform", "=", "geometric_transform", "\n", "self", ".", "target_transform", "=", "target_transform", "\n", "self", ".", "target_aux_transform", "=", "target_aux_transform", "\n", "self", ".", "dump_images", "=", "dump_images", "\n", "self", ".", "eval_mode", "=", "eval_mode", "\n", "self", ".", "eval_flip", "=", "eval_flip", "\n", "self", ".", "eval_scales", "=", "None", "\n", "self", ".", "image_in", "=", "image_in", "\n", "self", ".", "extract_feature", "=", "extract_feature", "\n", "\n", "if", "eval_scales", "!=", "None", ":", "\n", "            ", "self", ".", "eval_scales", "=", "[", "float", "(", "scale", ")", "for", "scale", "in", "eval_scales", ".", "split", "(", "\",\"", ")", "]", "\n", "\n", "", "if", "cv_split", ":", "\n", "            ", "self", ".", "cv_split", "=", "cv_split", "\n", "assert", "cv_split", "<", "cfg", ".", "DATASET", ".", "CV_SPLITS", ",", "'expected cv_split {} to be < CV_SPLITS {}'", ".", "format", "(", "\n", "cv_split", ",", "cfg", ".", "DATASET", ".", "CV_SPLITS", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "cv_split", "=", "0", "\n", "", "self", ".", "imgs", ",", "_", "=", "make_dataset", "(", "mode", ",", "self", ".", "maxSkip", ",", "cv_split", "=", "self", ".", "cv_split", ")", "\n", "if", "len", "(", "self", ".", "imgs", ")", "==", "0", ":", "\n", "            ", "raise", "RuntimeError", "(", "'Found 0 images, please check the data set'", ")", "\n", "\n", "", "self", ".", "mean_std", "=", "(", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.gtav.GTAVAug._eval_get_item": [[538, 553], ["range", "return_imgs.append", "int", "img.transpose.transpose.transpose", "img.transpose.transpose.resize", "imgs.append", "int", "int", "torchvision.ToTensor", "torchvision.Normalize"], "methods", ["None"], ["", "def", "_eval_get_item", "(", "self", ",", "img", ",", "mask", ",", "scales", ",", "flip_bool", ")", ":", "\n", "        ", "return_imgs", "=", "[", "]", "\n", "for", "flip", "in", "range", "(", "int", "(", "flip_bool", ")", "+", "1", ")", ":", "\n", "            ", "imgs", "=", "[", "]", "\n", "if", "flip", ":", "\n", "                ", "img", "=", "img", ".", "transpose", "(", "Image", ".", "FLIP_LEFT_RIGHT", ")", "\n", "", "for", "scale", "in", "scales", ":", "\n", "                ", "w", ",", "h", "=", "img", ".", "size", "\n", "target_w", ",", "target_h", "=", "int", "(", "w", "*", "scale", ")", ",", "int", "(", "h", "*", "scale", ")", "\n", "resize_img", "=", "img", ".", "resize", "(", "(", "target_w", ",", "target_h", ")", ")", "\n", "tensor_img", "=", "transforms", ".", "ToTensor", "(", ")", "(", "resize_img", ")", "\n", "final_tensor", "=", "transforms", ".", "Normalize", "(", "*", "self", ".", "mean_std", ")", "(", "tensor_img", ")", "\n", "imgs", ".", "append", "(", "final_tensor", ")", "\n", "", "return_imgs", ".", "append", "(", "imgs", ")", "\n", "", "return", "return_imgs", ",", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.gtav.GTAVAug.__getitem__": [[554, 617], ["numpy.full", "color_to_trainid.items", "PIL.Image.fromarray", "PIL.Image.open().convert", "scipy.imread", "os.path.splitext", "print", "print", "numpy.full.astype", "gtav.GTAVAug.joint_transform", "gtav.GTAVAug.transform", "gtav.GTAVAug.color_transform", "gtav.GTAVAug.geometric_transform", "torchvision.Normalize", "torchvision.Normalize", "torchvision.Normalize", "os.path.basename", "str", "len", "PIL.Image.open().convert", "scipy.imread", "os.path.splitext", "gtav.GTAVAug._eval_get_item", "PIL.Image.open", "os.path.basename", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "PIL.Image.open", "torchvision.ToTensor", "torch.std", "torch.std", "torch.std", "torch.std", "torch.std", "torch.std", "torch.std", "torch.std", "torch.std", "numpy.array", "numpy.array", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.bdd100k.BDD100KAug._eval_get_item"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "\n", "        ", "img_path", ",", "mask_path", "=", "self", ".", "imgs", "[", "index", "]", "\n", "img", ",", "mask", "=", "Image", ".", "open", "(", "img_path", ")", ".", "convert", "(", "'RGB'", ")", ",", "m", ".", "imread", "(", "mask_path", ")", "\n", "img_name", "=", "os", ".", "path", ".", "splitext", "(", "os", ".", "path", ".", "basename", "(", "img_path", ")", ")", "[", "0", "]", "\n", "\n", "while", "(", "img", ".", "size", "[", "1", "]", ",", "img", ".", "size", "[", "0", "]", ")", "!=", "mask", "[", ":", ",", ":", ",", "0", "]", ".", "shape", ":", "\n", "            ", "print", "(", "\"Error!!\"", ",", "img", ".", "size", ",", "mask", "[", ":", ",", ":", ",", "0", "]", ".", "shape", ",", "img_name", ")", "\n", "print", "(", "\"Dropping \"", ",", "str", "(", "index", ")", ")", "\n", "# index = index + 1", "\n", "if", "index", "+", "1", "==", "len", "(", "self", ".", "imgs", ")", ":", "\n", "                ", "index", "=", "0", "\n", "", "else", ":", "\n", "                ", "index", "+=", "1", "\n", "", "img_path", ",", "mask_path", "=", "self", ".", "imgs", "[", "index", "]", "\n", "img", ",", "mask", "=", "Image", ".", "open", "(", "img_path", ")", ".", "convert", "(", "'RGB'", ")", ",", "m", ".", "imread", "(", "mask_path", ")", "\n", "img_name", "=", "os", ".", "path", ".", "splitext", "(", "os", ".", "path", ".", "basename", "(", "img_path", ")", ")", "[", "0", "]", "\n", "\n", "", "image_size", "=", "mask", "[", ":", ",", ":", ",", "0", "]", ".", "shape", "\n", "mask_copy", "=", "np", ".", "full", "(", "image_size", ",", "ignore_label", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "\n", "for", "k", ",", "v", "in", "color_to_trainid", ".", "items", "(", ")", ":", "\n", "            ", "if", "v", "!=", "255", "and", "v", "!=", "-", "1", ":", "\n", "                ", "mask_copy", "[", "(", "mask", "==", "np", ".", "array", "(", "k", ")", ")", "[", ":", ",", ":", ",", "0", "]", "&", "(", "mask", "==", "np", ".", "array", "(", "k", ")", ")", "[", ":", ",", ":", ",", "1", "]", "&", "(", "mask", "==", "np", ".", "array", "(", "k", ")", ")", "[", ":", ",", ":", ",", "2", "]", "]", "=", "v", "\n", "\n", "# for k, v in color_to_trainid.items():", "\n", "#     mask_copy[(mask == np.array(k))[:,:,0]] = v", "\n", "\n", "", "", "if", "self", ".", "eval_mode", ":", "\n", "            ", "return", "[", "transforms", ".", "ToTensor", "(", ")", "(", "img", ")", "]", ",", "self", ".", "_eval_get_item", "(", "img", ",", "mask_copy", ",", "\n", "self", ".", "eval_scales", ",", "\n", "self", ".", "eval_flip", ")", ",", "img_name", "\n", "\n", "", "mask", "=", "Image", ".", "fromarray", "(", "mask_copy", ".", "astype", "(", "np", ".", "uint8", ")", ")", "\n", "\n", "if", "self", ".", "joint_transform", "is", "not", "None", ":", "\n", "            ", "img", ",", "mask", "=", "self", ".", "joint_transform", "(", "img", ",", "mask", ")", "\n", "\n", "", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "img_or", "=", "self", ".", "transform", "(", "img", ")", "\n", "\n", "", "if", "self", ".", "color_transform", "is", "not", "None", ":", "\n", "            ", "img_color", "=", "self", ".", "color_transform", "(", "img", ")", "\n", "\n", "", "if", "self", ".", "geometric_transform", "is", "not", "None", ":", "\n", "            ", "img_geometric", "=", "self", ".", "geometric_transform", "(", "img", ")", "\n", "\n", "", "rgb_mean_std_or", "=", "(", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "\n", "rgb_mean_std_color", "=", "(", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "\n", "rgb_mean_std_geometric", "=", "(", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "\n", "if", "self", ".", "image_in", ":", "\n", "            ", "eps", "=", "1e-5", "\n", "rgb_mean_std_or", "=", "(", "[", "torch", ".", "mean", "(", "img_or", "[", "0", "]", ")", ",", "torch", ".", "mean", "(", "img_or", "[", "1", "]", ")", ",", "torch", ".", "mean", "(", "img_or", "[", "2", "]", ")", "]", ",", "\n", "[", "torch", ".", "std", "(", "img_or", "[", "0", "]", ")", "+", "eps", ",", "torch", ".", "std", "(", "img_or", "[", "1", "]", ")", "+", "eps", ",", "torch", ".", "std", "(", "img_or", "[", "2", "]", ")", "+", "eps", "]", ")", "\n", "rgb_mean_std_color", "=", "(", "[", "torch", ".", "mean", "(", "img_color", "[", "0", "]", ")", ",", "torch", ".", "mean", "(", "img_color", "[", "1", "]", ")", ",", "torch", ".", "mean", "(", "img_color", "[", "2", "]", ")", "]", ",", "\n", "[", "torch", ".", "std", "(", "img_color", "[", "0", "]", ")", "+", "eps", ",", "torch", ".", "std", "(", "img_color", "[", "1", "]", ")", "+", "eps", ",", "torch", ".", "std", "(", "img_color", "[", "2", "]", ")", "+", "eps", "]", ")", "\n", "rgb_mean_std_geometric", "=", "(", "[", "torch", ".", "mean", "(", "img_geometric", "[", "0", "]", ")", ",", "torch", ".", "mean", "(", "img_geometric", "[", "1", "]", ")", ",", "torch", ".", "mean", "(", "img_geometric", "[", "2", "]", ")", "]", ",", "\n", "[", "torch", ".", "std", "(", "img_geometric", "[", "0", "]", ")", "+", "eps", ",", "torch", ".", "std", "(", "img_geometric", "[", "1", "]", ")", "+", "eps", ",", "torch", ".", "std", "(", "img_geometric", "[", "2", "]", ")", "+", "eps", "]", ")", "\n", "", "img_or", "=", "transforms", ".", "Normalize", "(", "*", "rgb_mean_std_or", ")", "(", "img_or", ")", "\n", "img_color", "=", "transforms", ".", "Normalize", "(", "*", "rgb_mean_std_color", ")", "(", "img_color", ")", "\n", "img_geometric", "=", "transforms", ".", "Normalize", "(", "*", "rgb_mean_std_geometric", ")", "(", "img_geometric", ")", "\n", "\n", "return", "img_or", ",", "img_color", ",", "img_geometric", ",", "img_name", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.gtav.GTAVAug.__len__": [[618, 620], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "imgs", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.gtav.colorize_mask": [[39, 47], ["PIL.Image.fromarray().convert", "Image.fromarray().convert.putpalette", "PIL.Image.fromarray", "mask.astype"], "function", ["None"], ["", "def", "colorize_mask", "(", "mask", ")", ":", "\n", "    ", "\"\"\"\n    Colorize a segmentation mask.\n    \"\"\"", "\n", "# mask: numpy array of the mask", "\n", "new_mask", "=", "Image", ".", "fromarray", "(", "mask", ".", "astype", "(", "np", ".", "uint8", ")", ")", ".", "convert", "(", "'P'", ")", "\n", "new_mask", ".", "putpalette", "(", "palette", ")", "\n", "return", "new_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.gtav.add_items": [[49, 83], ["items.append", "name.split", "os.listdir", "os.path.join", "os.path.join", "os.path.join"], "function", ["None"], ["", "def", "add_items", "(", "items", ",", "aug_items", ",", "cities", ",", "img_path", ",", "mask_path", ",", "mask_postfix", ",", "mode", ",", "maxSkip", ")", ":", "\n", "    ", "\"\"\"\n\n    Add More items ot the list from the augmented dataset\n    \"\"\"", "\n", "\n", "for", "c", "in", "cities", ":", "\n", "        ", "c_items", "=", "[", "name", ".", "split", "(", "img_postfix", ")", "[", "0", "]", "for", "name", "in", "\n", "os", ".", "listdir", "(", "os", ".", "path", ".", "join", "(", "img_path", ",", "c", ")", ")", "]", "\n", "for", "it", "in", "c_items", ":", "\n", "            ", "item", "=", "(", "os", ".", "path", ".", "join", "(", "img_path", ",", "c", ",", "it", "+", "img_postfix", ")", ",", "\n", "os", ".", "path", ".", "join", "(", "mask_path", ",", "c", ",", "it", "+", "mask_postfix", ")", ")", "\n", "# ########################################################", "\n", "# ###### dataset augmentation ############################", "\n", "# ########################################################", "\n", "# if mode == \"train\" and maxSkip > 0:", "\n", "#     new_img_path = os.path.join(aug_root, 'leftImg8bit_trainvaltest', 'leftImg8bit')", "\n", "#     new_mask_path = os.path.join(aug_root, 'gtFine_trainvaltest', 'gtFine')", "\n", "#     file_info = it.split(\"_\")", "\n", "#     cur_seq_id = file_info[-1]", "\n", "\n", "#     prev_seq_id = \"%06d\" % (int(cur_seq_id) - maxSkip)", "\n", "#     next_seq_id = \"%06d\" % (int(cur_seq_id) + maxSkip)", "\n", "#     prev_it = file_info[0] + \"_\" + file_info[1] + \"_\" + prev_seq_id", "\n", "#     next_it = file_info[0] + \"_\" + file_info[1] + \"_\" + next_seq_id", "\n", "#     prev_item = (os.path.join(new_img_path, c, prev_it + img_postfix),", "\n", "#                  os.path.join(new_mask_path, c, prev_it + mask_postfix))", "\n", "#     if os.path.isfile(prev_item[0]) and os.path.isfile(prev_item[1]):", "\n", "#         aug_items.append(prev_item)", "\n", "#     next_item = (os.path.join(new_img_path, c, next_it + img_postfix),", "\n", "#                  os.path.join(new_mask_path, c, next_it + mask_postfix))", "\n", "#     if os.path.isfile(next_item[0]) and os.path.isfile(next_item[1]):", "\n", "#         aug_items.append(next_item)", "\n", "items", ".", "append", "(", "item", ")", "\n", "# items.extend(extra_items)", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.gtav.make_cv_splits": [[86, 119], ["os.path.join", "os.path.join", "sorted", "len", "len", "range", "range", "cv_splits.append", "os.listdir", "os.listdir", "split[].append", "split[].append"], "function", ["None"], ["", "", "", "def", "make_cv_splits", "(", "img_dir_name", ")", ":", "\n", "    ", "\"\"\"\n    Create splits of train/valid data.\n    A split is a lists of cities.\n    split0 is aligned with the default Cityscapes train/valid.\n    \"\"\"", "\n", "trn_path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "img_dir_name", ",", "'train'", ")", "\n", "val_path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "img_dir_name", ",", "'valid'", ")", "\n", "\n", "trn_cities", "=", "[", "'train/'", "+", "c", "for", "c", "in", "os", ".", "listdir", "(", "trn_path", ")", "]", "\n", "val_cities", "=", "[", "'valid/'", "+", "c", "for", "c", "in", "os", ".", "listdir", "(", "val_path", ")", "]", "\n", "\n", "# want reproducible randomly shuffled", "\n", "trn_cities", "=", "sorted", "(", "trn_cities", ")", "\n", "\n", "all_cities", "=", "val_cities", "+", "trn_cities", "\n", "num_val_cities", "=", "len", "(", "val_cities", ")", "\n", "num_cities", "=", "len", "(", "all_cities", ")", "\n", "\n", "cv_splits", "=", "[", "]", "\n", "for", "split_idx", "in", "range", "(", "cfg", ".", "DATASET", ".", "CV_SPLITS", ")", ":", "\n", "        ", "split", "=", "{", "}", "\n", "split", "[", "'train'", "]", "=", "[", "]", "\n", "split", "[", "'val'", "]", "=", "[", "]", "\n", "offset", "=", "split_idx", "*", "num_cities", "//", "cfg", ".", "DATASET", ".", "CV_SPLITS", "\n", "for", "j", "in", "range", "(", "num_cities", ")", ":", "\n", "            ", "if", "j", ">=", "offset", "and", "j", "<", "(", "offset", "+", "num_val_cities", ")", ":", "\n", "                ", "split", "[", "'val'", "]", ".", "append", "(", "all_cities", "[", "j", "]", ")", "\n", "", "else", ":", "\n", "                ", "split", "[", "'train'", "]", ".", "append", "(", "all_cities", "[", "j", "]", ")", "\n", "", "", "cv_splits", ".", "append", "(", "split", ")", "\n", "\n", "", "return", "cv_splits", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.gtav.make_split_coarse": [[121, 134], ["os.listdir", "sorted"], "function", ["None"], ["", "def", "make_split_coarse", "(", "img_path", ")", ":", "\n", "    ", "\"\"\"\n    Create a train/valid split for coarse\n    return: city split in train\n    \"\"\"", "\n", "all_cities", "=", "os", ".", "listdir", "(", "img_path", ")", "\n", "all_cities", "=", "sorted", "(", "all_cities", ")", "# needs to always be the same", "\n", "val_cities", "=", "[", "]", "# Can manually set cities to not be included into train split", "\n", "\n", "split", "=", "{", "}", "\n", "split", "[", "'val'", "]", "=", "val_cities", "\n", "split", "[", "'train'", "]", "=", "[", "c", "for", "c", "in", "all_cities", "if", "c", "not", "in", "val_cities", "]", "\n", "return", "split", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.gtav.make_test_split": [[136, 141], ["os.path.join", "os.listdir"], "function", ["None"], ["", "def", "make_test_split", "(", "img_dir_name", ")", ":", "\n", "    ", "test_path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "img_dir_name", ",", "'leftImg8bit'", ",", "'test'", ")", "\n", "test_cities", "=", "[", "'test/'", "+", "c", "for", "c", "in", "os", ".", "listdir", "(", "test_path", ")", "]", "\n", "\n", "return", "test_cities", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.gtav.make_dataset": [[143, 175], ["os.path.join", "os.path.join", "gtav.make_cv_splits", "logging.info", "logging.info", "gtav.add_items", "str", "len", "len"], "function", ["home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.bdd100k.make_cv_splits", "home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.bdd100k.add_items"], ["", "def", "make_dataset", "(", "mode", ",", "maxSkip", "=", "0", ",", "cv_split", "=", "0", ")", ":", "\n", "    ", "\"\"\"\n    Assemble list of images + mask files\n\n    fine -   modes: train/valid/test/trainval    cv:0,1,2\n    coarse - modes: train/valid                  cv:na\n\n    path examples:\n    leftImg8bit_trainextra/leftImg8bit/train_extra/augsburg\n    gtCoarse/gtCoarse/train_extra/augsburg\n    \"\"\"", "\n", "items", "=", "[", "]", "\n", "aug_items", "=", "[", "]", "\n", "\n", "assert", "mode", "in", "[", "'train'", ",", "'val'", ",", "'test'", ",", "'trainval'", "]", "\n", "img_dir_name", "=", "'images'", "\n", "img_path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "img_dir_name", ")", "\n", "mask_path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "'labels'", ")", "\n", "mask_postfix", "=", "'.png'", "\n", "cv_splits", "=", "make_cv_splits", "(", "img_dir_name", ")", "\n", "if", "mode", "==", "'trainval'", ":", "\n", "        ", "modes", "=", "[", "'train'", ",", "'val'", "]", "\n", "", "else", ":", "\n", "        ", "modes", "=", "[", "mode", "]", "\n", "", "for", "mode", "in", "modes", ":", "\n", "        ", "logging", ".", "info", "(", "'{} fine cities: '", ".", "format", "(", "mode", ")", "+", "str", "(", "cv_splits", "[", "cv_split", "]", "[", "mode", "]", ")", ")", "\n", "add_items", "(", "items", ",", "aug_items", ",", "cv_splits", "[", "cv_split", "]", "[", "mode", "]", ",", "img_path", ",", "mask_path", ",", "\n", "mask_postfix", ",", "mode", ",", "maxSkip", ")", "\n", "\n", "# logging.info('Cityscapes-{}: {} images'.format(mode, len(items)))", "\n", "", "logging", ".", "info", "(", "'GTAV-{}: {} images'", ".", "format", "(", "mode", ",", "len", "(", "items", ")", "+", "len", "(", "aug_items", ")", ")", ")", "\n", "return", "items", ",", "aug_items", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.multi_loader.DomainUniformConcatDataset.cumsum": [[21, 29], ["len", "r.append"], "methods", ["None"], ["@", "staticmethod", "\n", "def", "cumsum", "(", "sequence", ")", ":", "\n", "        ", "r", ",", "s", "=", "[", "]", ",", "0", "\n", "for", "e", "in", "sequence", ":", "\n", "            ", "l", "=", "len", "(", "e", ")", "\n", "r", ".", "append", "(", "l", "+", "s", ")", "\n", "s", "+=", "l", "\n", "", "return", "r", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.multi_loader.DomainUniformConcatDataset.__init__": [[30, 46], ["torch.utils.data.Dataset.__init__", "multi_loader.DomainUniformConcatDataset.cumsum", "numpy.sum", "print", "len", "str", "str", "str", "str", "len", "len"], "methods", ["home.repos.pwc.inspect_result.shachoi_RobustNet.transforms.joint_transforms.ClassUniform.__init__", "home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.multi_loader.DomainUniformConcatDataset.cumsum"], ["", "def", "__init__", "(", "self", ",", "args", ",", "datasets", ")", ":", "\n", "        ", "\"\"\"\n        This dataset is to return sample image (source)\n        and augmented sample image (target)\n        Args:\n            args: input config arguments\n            datasets: list of datasets to concat\n        \"\"\"", "\n", "super", "(", "DomainUniformConcatDataset", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "datasets", "=", "datasets", "\n", "self", ".", "lengths", "=", "[", "len", "(", "d", ")", "for", "d", "in", "datasets", "]", "\n", "self", ".", "offsets", "=", "self", ".", "cumsum", "(", "datasets", ")", "\n", "self", ".", "length", "=", "np", ".", "sum", "(", "self", ".", "lengths", ")", "\n", "\n", "print", "(", "\"# domains: {}, Total length: {}, 1 epoch: {}, offsets: {}\"", ".", "format", "(", "\n", "str", "(", "len", "(", "datasets", ")", ")", ",", "str", "(", "self", ".", "length", ")", ",", "str", "(", "len", "(", "self", ")", ")", ",", "str", "(", "self", ".", "offsets", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.multi_loader.DomainUniformConcatDataset.__len__": [[48, 54], ["min"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Returns:\n            The number of images in a domain that has minimum image samples\n        \"\"\"", "\n", "return", "min", "(", "self", ".", "lengths", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.multi_loader.DomainUniformConcatDataset._get_batch_from_dataset": [[56, 72], ["numpy.random.randint", "len", "len", "len"], "methods", ["None"], ["", "def", "_get_batch_from_dataset", "(", "self", ",", "dataset", ",", "idx", ")", ":", "\n", "        ", "\"\"\"\n        Get batch from dataset\n        New idx = idx + random integer\n        Args:\n            dataset: dataset class object\n            idx: integer\n\n        Returns:\n            One batch from dataset\n        \"\"\"", "\n", "p_index", "=", "idx", "+", "np", ".", "random", ".", "randint", "(", "len", "(", "dataset", ")", ")", "\n", "if", "p_index", ">", "len", "(", "dataset", ")", "-", "1", ":", "\n", "            ", "p_index", "-=", "len", "(", "dataset", ")", "\n", "\n", "", "return", "dataset", "[", "p_index", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.multi_loader.DomainUniformConcatDataset.__getitem__": [[74, 96], ["multi_loader.DomainUniformConcatDataset._get_batch_from_dataset", "imgs.append", "masks.append", "img_names.append", "mask_auxs.append", "torch.stack", "torch.stack", "torch.stack"], "methods", ["home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.multi_loader.DomainUniformConcatDataset._get_batch_from_dataset"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            idx (int): Index\n\n        Returns:\n            images corresonding to the index from each domain\n        \"\"\"", "\n", "imgs", "=", "[", "]", "\n", "masks", "=", "[", "]", "\n", "img_names", "=", "[", "]", "\n", "mask_auxs", "=", "[", "]", "\n", "\n", "for", "dataset", "in", "self", ".", "datasets", ":", "\n", "            ", "img", ",", "mask", ",", "img_name", ",", "mask_aux", "=", "self", ".", "_get_batch_from_dataset", "(", "dataset", ",", "idx", ")", "\n", "imgs", ".", "append", "(", "img", ")", "\n", "masks", ".", "append", "(", "mask", ")", "\n", "img_names", ".", "append", "(", "img_name", ")", "\n", "mask_auxs", ".", "append", "(", "mask_aux", ")", "\n", "", "imgs", ",", "masks", ",", "mask_auxs", "=", "torch", ".", "stack", "(", "imgs", ",", "0", ")", ",", "torch", ".", "stack", "(", "masks", ",", "0", ")", ",", "torch", ".", "stack", "(", "mask_auxs", ",", "0", ")", "\n", "\n", "return", "imgs", ",", "masks", ",", "img_names", ",", "mask_auxs", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.cityscapes.CityScapes.__init__": [[213, 247], ["cityscapes.make_dataset", "len", "RuntimeError", "float", "eval_scales.split"], "methods", ["home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.bdd100k.make_dataset"], ["    ", "def", "__init__", "(", "self", ",", "quality", ",", "mode", ",", "maxSkip", "=", "0", ",", "joint_transform", "=", "None", ",", "sliding_crop", "=", "None", ",", "\n", "transform", "=", "None", ",", "target_transform", "=", "None", ",", "target_aux_transform", "=", "None", ",", "dump_images", "=", "False", ",", "\n", "cv_split", "=", "None", ",", "eval_mode", "=", "False", ",", "\n", "eval_scales", "=", "None", ",", "eval_flip", "=", "False", ",", "image_in", "=", "False", ",", "extract_feature", "=", "False", ")", ":", "\n", "        ", "self", ".", "quality", "=", "quality", "\n", "self", ".", "mode", "=", "mode", "\n", "self", ".", "maxSkip", "=", "maxSkip", "\n", "self", ".", "joint_transform", "=", "joint_transform", "\n", "self", ".", "sliding_crop", "=", "sliding_crop", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "target_transform", "=", "target_transform", "\n", "self", ".", "target_aux_transform", "=", "target_aux_transform", "\n", "self", ".", "dump_images", "=", "dump_images", "\n", "self", ".", "eval_mode", "=", "eval_mode", "\n", "self", ".", "eval_flip", "=", "eval_flip", "\n", "self", ".", "eval_scales", "=", "None", "\n", "self", ".", "image_in", "=", "image_in", "\n", "self", ".", "extract_feature", "=", "extract_feature", "\n", "\n", "if", "eval_scales", "!=", "None", ":", "\n", "            ", "self", ".", "eval_scales", "=", "[", "float", "(", "scale", ")", "for", "scale", "in", "eval_scales", ".", "split", "(", "\",\"", ")", "]", "\n", "\n", "", "if", "cv_split", ":", "\n", "            ", "self", ".", "cv_split", "=", "cv_split", "\n", "assert", "cv_split", "<", "cfg", ".", "DATASET", ".", "CV_SPLITS", ",", "'expected cv_split {} to be < CV_SPLITS {}'", ".", "format", "(", "\n", "cv_split", ",", "cfg", ".", "DATASET", ".", "CV_SPLITS", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "cv_split", "=", "0", "\n", "", "self", ".", "imgs", ",", "_", "=", "make_dataset", "(", "quality", ",", "mode", ",", "self", ".", "maxSkip", ",", "cv_split", "=", "self", ".", "cv_split", ")", "\n", "if", "len", "(", "self", ".", "imgs", ")", "==", "0", ":", "\n", "            ", "raise", "RuntimeError", "(", "'Found 0 images, please check the data set'", ")", "\n", "\n", "", "self", ".", "mean_std", "=", "(", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.cityscapes.CityScapes._eval_get_item": [[248, 263], ["range", "return_imgs.append", "int", "img.transpose.transpose.transpose", "img.transpose.transpose.resize", "imgs.append", "int", "int", "torchvision.ToTensor", "torchvision.Normalize"], "methods", ["None"], ["", "def", "_eval_get_item", "(", "self", ",", "img", ",", "mask", ",", "scales", ",", "flip_bool", ")", ":", "\n", "        ", "return_imgs", "=", "[", "]", "\n", "for", "flip", "in", "range", "(", "int", "(", "flip_bool", ")", "+", "1", ")", ":", "\n", "            ", "imgs", "=", "[", "]", "\n", "if", "flip", ":", "\n", "                ", "img", "=", "img", ".", "transpose", "(", "Image", ".", "FLIP_LEFT_RIGHT", ")", "\n", "", "for", "scale", "in", "scales", ":", "\n", "                ", "w", ",", "h", "=", "img", ".", "size", "\n", "target_w", ",", "target_h", "=", "int", "(", "w", "*", "scale", ")", ",", "int", "(", "h", "*", "scale", ")", "\n", "resize_img", "=", "img", ".", "resize", "(", "(", "target_w", ",", "target_h", ")", ")", "\n", "tensor_img", "=", "transforms", ".", "ToTensor", "(", ")", "(", "resize_img", ")", "\n", "final_tensor", "=", "transforms", ".", "Normalize", "(", "*", "self", ".", "mean_std", ")", "(", "tensor_img", ")", "\n", "imgs", ".", "append", "(", "final_tensor", ")", "\n", "", "return_imgs", ".", "append", "(", "imgs", ")", "\n", "", "return", "return_imgs", ",", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.cityscapes.CityScapes.__getitem__": [[264, 320], ["numpy.array", "cityscapes.CityScapes.copy", "id_to_trainid.items", "PIL.Image.fromarray", "PIL.Image.open().convert", "PIL.Image.open", "os.path.splitext", "cityscapes.CityScapes.copy.astype", "cityscapes.CityScapes.transform", "torchvision.Normalize", "cityscapes.CityScapes.target_aux_transform", "torch.tensor", "cityscapes.CityScapes.target_transform", "os.makedirs", "os.path.join", "os.path.join", "cityscapes.colorize_mask", "cityscapes.CityScapes.save", "colorize_mask.save", "os.path.basename", "cityscapes.CityScapes._eval_get_item", "cityscapes.CityScapes.joint_transform", "torchvision.Normalize", "numpy.array", "PIL.Image.open", "torchvision.ToTensor", "torch.mean", "torch.mean", "torch.mean", "torch.std", "torch.std", "torch.std"], "methods", ["home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.bdd100k.colorize_mask", "home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.bdd100k.BDD100KAug._eval_get_item"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "\n", "        ", "img_path", ",", "mask_path", "=", "self", ".", "imgs", "[", "index", "]", "\n", "\n", "img", ",", "mask", "=", "Image", ".", "open", "(", "img_path", ")", ".", "convert", "(", "'RGB'", ")", ",", "Image", ".", "open", "(", "mask_path", ")", "\n", "img_name", "=", "os", ".", "path", ".", "splitext", "(", "os", ".", "path", ".", "basename", "(", "img_path", ")", ")", "[", "0", "]", "\n", "\n", "mask", "=", "np", ".", "array", "(", "mask", ")", "\n", "mask_copy", "=", "mask", ".", "copy", "(", ")", "\n", "for", "k", ",", "v", "in", "id_to_trainid", ".", "items", "(", ")", ":", "\n", "            ", "mask_copy", "[", "mask", "==", "k", "]", "=", "v", "\n", "\n", "", "if", "self", ".", "eval_mode", "==", "'pooling'", ":", "\n", "            ", "return", "[", "transforms", ".", "ToTensor", "(", ")", "(", "img", ")", "]", ",", "self", ".", "_eval_get_item", "(", "img", ",", "mask_copy", ",", "\n", "self", ".", "eval_scales", ",", "\n", "self", ".", "eval_flip", ")", ",", "img_name", "\n", "\n", "", "mask", "=", "Image", ".", "fromarray", "(", "mask_copy", ".", "astype", "(", "np", ".", "uint8", ")", ")", "\n", "\n", "# Image Transformations", "\n", "if", "self", ".", "extract_feature", "is", "not", "True", ":", "\n", "            ", "if", "self", ".", "joint_transform", "is", "not", "None", ":", "\n", "                ", "img", ",", "mask", "=", "self", ".", "joint_transform", "(", "img", ",", "mask", ")", "\n", "\n", "", "", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "\n", "", "rgb_mean_std_gt", "=", "(", "[", "0.5", ",", "0.5", ",", "0.5", "]", ",", "[", "0.5", ",", "0.5", ",", "0.5", "]", ")", "\n", "img_gt", "=", "transforms", ".", "Normalize", "(", "*", "rgb_mean_std_gt", ")", "(", "img", ")", "\n", "\n", "if", "not", "self", ".", "eval_mode", ":", "\n", "            ", "rgb_mean_std", "=", "(", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "\n", "if", "self", ".", "image_in", ":", "\n", "                ", "eps", "=", "1e-5", "\n", "rgb_mean_std", "=", "(", "[", "torch", ".", "mean", "(", "img", "[", "0", "]", ")", ",", "torch", ".", "mean", "(", "img", "[", "1", "]", ")", ",", "torch", ".", "mean", "(", "img", "[", "2", "]", ")", "]", ",", "\n", "[", "torch", ".", "std", "(", "img", "[", "0", "]", ")", "+", "eps", ",", "torch", ".", "std", "(", "img", "[", "1", "]", ")", "+", "eps", ",", "torch", ".", "std", "(", "img", "[", "2", "]", ")", "+", "eps", "]", ")", "\n", "", "img", "=", "transforms", ".", "Normalize", "(", "*", "rgb_mean_std", ")", "(", "img", ")", "\n", "\n", "", "if", "self", ".", "target_aux_transform", "is", "not", "None", ":", "\n", "            ", "mask_aux", "=", "self", ".", "target_aux_transform", "(", "mask", ")", "\n", "", "else", ":", "\n", "            ", "mask_aux", "=", "torch", ".", "tensor", "(", "[", "0", "]", ")", "\n", "", "if", "self", ".", "target_transform", "is", "not", "None", ":", "\n", "            ", "mask", "=", "self", ".", "target_transform", "(", "mask", ")", "\n", "\n", "# Debug", "\n", "", "if", "self", ".", "dump_images", ":", "\n", "            ", "outdir", "=", "'../../dump_imgs_{}'", ".", "format", "(", "self", ".", "mode", ")", "\n", "os", ".", "makedirs", "(", "outdir", ",", "exist_ok", "=", "True", ")", "\n", "out_img_fn", "=", "os", ".", "path", ".", "join", "(", "outdir", ",", "img_name", "+", "'.png'", ")", "\n", "out_msk_fn", "=", "os", ".", "path", ".", "join", "(", "outdir", ",", "img_name", "+", "'_mask.png'", ")", "\n", "mask_img", "=", "colorize_mask", "(", "np", ".", "array", "(", "mask", ")", ")", "\n", "img", ".", "save", "(", "out_img_fn", ")", "\n", "mask_img", ".", "save", "(", "out_msk_fn", ")", "\n", "\n", "", "return", "img", ",", "mask", ",", "img_name", ",", "mask_aux", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.cityscapes.CityScapes.__len__": [[321, 323], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "imgs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.cityscapes.CityScapesUniform.__init__": [[329, 422], ["cityscapes.make_dataset", "len", "os.path.isfile", "copy.deepcopy", "cityscapes.CityScapesUniform.build_epoch", "datasets.class_centroids_all", "datasets.class_centroids_all", "os.path.isfile", "range", "os.path.isfile", "open", "json.load", "int", "open", "json.dump", "datasets.class_centroids_all", "datasets.class_centroids_all", "cityscapes.CityScapesUniform.centroids[].extend", "cityscapes.make_dataset", "datasets.class_centroids_all", "datasets.class_centroids_all", "cityscapes.CityScapesUniform.centroids[].extend", "open", "json.load", "int", "open", "json.dump", "open", "json.load", "int", "open", "json.dump"], "methods", ["home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.bdd100k.make_dataset", "home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.uniform.build_epoch", "home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.uniform.class_centroids_all", "home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.uniform.class_centroids_all", "home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.uniform.class_centroids_all", "home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.uniform.class_centroids_all", "home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.bdd100k.make_dataset", "home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.uniform.class_centroids_all", "home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.uniform.class_centroids_all"], ["def", "__init__", "(", "self", ",", "quality", ",", "mode", ",", "maxSkip", "=", "0", ",", "joint_transform_list", "=", "None", ",", "sliding_crop", "=", "None", ",", "\n", "transform", "=", "None", ",", "target_transform", "=", "None", ",", "target_aux_transform", "=", "None", ",", "dump_images", "=", "False", ",", "\n", "cv_split", "=", "None", ",", "class_uniform_pct", "=", "0.5", ",", "class_uniform_tile", "=", "1024", ",", "\n", "test", "=", "False", ",", "coarse_boost_classes", "=", "None", ",", "image_in", "=", "False", ",", "extract_feature", "=", "False", ")", ":", "\n", "        ", "self", ".", "quality", "=", "quality", "\n", "self", ".", "mode", "=", "mode", "\n", "self", ".", "maxSkip", "=", "maxSkip", "\n", "self", ".", "joint_transform_list", "=", "joint_transform_list", "\n", "self", ".", "sliding_crop", "=", "sliding_crop", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "target_transform", "=", "target_transform", "\n", "self", ".", "target_aux_transform", "=", "target_aux_transform", "\n", "self", ".", "dump_images", "=", "dump_images", "\n", "self", ".", "class_uniform_pct", "=", "class_uniform_pct", "\n", "self", ".", "class_uniform_tile", "=", "class_uniform_tile", "\n", "self", ".", "coarse_boost_classes", "=", "coarse_boost_classes", "\n", "self", ".", "image_in", "=", "image_in", "\n", "self", ".", "extract_feature", "=", "extract_feature", "\n", "\n", "\n", "if", "cv_split", ":", "\n", "            ", "self", ".", "cv_split", "=", "cv_split", "\n", "assert", "cv_split", "<", "cfg", ".", "DATASET", ".", "CV_SPLITS", ",", "'expected cv_split {} to be < CV_SPLITS {}'", ".", "format", "(", "\n", "cv_split", ",", "cfg", ".", "DATASET", ".", "CV_SPLITS", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "cv_split", "=", "0", "\n", "\n", "", "self", ".", "imgs", ",", "self", ".", "aug_imgs", "=", "make_dataset", "(", "quality", ",", "mode", ",", "self", ".", "maxSkip", ",", "cv_split", "=", "self", ".", "cv_split", ")", "\n", "assert", "len", "(", "self", ".", "imgs", ")", ",", "'Found 0 images, please check the data set'", "\n", "\n", "# Centroids for fine data", "\n", "json_fn", "=", "'cityscapes_{}_cv{}_tile{}.json'", ".", "format", "(", "\n", "self", ".", "mode", ",", "self", ".", "cv_split", ",", "self", ".", "class_uniform_tile", ")", "\n", "if", "os", ".", "path", ".", "isfile", "(", "json_fn", ")", ":", "\n", "            ", "with", "open", "(", "json_fn", ",", "'r'", ")", "as", "json_data", ":", "\n", "                ", "centroids", "=", "json", ".", "load", "(", "json_data", ")", "\n", "", "self", ".", "centroids", "=", "{", "int", "(", "idx", ")", ":", "centroids", "[", "idx", "]", "for", "idx", "in", "centroids", "}", "\n", "", "else", ":", "\n", "            ", "self", ".", "centroids", "=", "uniform", ".", "class_centroids_all", "(", "\n", "self", ".", "imgs", ",", "\n", "num_classes", ",", "\n", "id2trainid", "=", "id_to_trainid", ",", "\n", "tile_size", "=", "class_uniform_tile", ")", "\n", "with", "open", "(", "json_fn", ",", "'w'", ")", "as", "outfile", ":", "\n", "                ", "json", ".", "dump", "(", "self", ".", "centroids", ",", "outfile", ",", "indent", "=", "4", ")", "\n", "\n", "", "", "self", ".", "fine_centroids", "=", "copy", ".", "deepcopy", "(", "self", ".", "centroids", ")", "\n", "# Centroids for augmented data", "\n", "if", "self", ".", "maxSkip", ">", "0", ":", "\n", "            ", "json_fn", "=", "'cityscapes_{}_cv{}_tile{}_skip{}.json'", ".", "format", "(", "\n", "self", ".", "mode", ",", "self", ".", "cv_split", ",", "self", ".", "class_uniform_tile", ",", "self", ".", "maxSkip", ")", "\n", "if", "os", ".", "path", ".", "isfile", "(", "json_fn", ")", ":", "\n", "                ", "with", "open", "(", "json_fn", ",", "'r'", ")", "as", "json_data", ":", "\n", "                    ", "centroids", "=", "json", ".", "load", "(", "json_data", ")", "\n", "", "self", ".", "aug_centroids", "=", "{", "int", "(", "idx", ")", ":", "centroids", "[", "idx", "]", "for", "idx", "in", "centroids", "}", "\n", "", "else", ":", "\n", "                ", "self", ".", "aug_centroids", "=", "uniform", ".", "class_centroids_all", "(", "\n", "self", ".", "aug_imgs", ",", "\n", "num_classes", ",", "\n", "id2trainid", "=", "id_to_trainid", ",", "\n", "tile_size", "=", "class_uniform_tile", ")", "\n", "with", "open", "(", "json_fn", ",", "'w'", ")", "as", "outfile", ":", "\n", "                    ", "json", ".", "dump", "(", "self", ".", "aug_centroids", ",", "outfile", ",", "indent", "=", "4", ")", "\n", "\n", "# add centroids for augmented data", "\n", "# TODO: later, we can also pick classes for augmented data", "\n", "", "", "for", "class_id", "in", "range", "(", "num_classes", ")", ":", "\n", "                ", "self", ".", "centroids", "[", "class_id", "]", ".", "extend", "(", "self", ".", "aug_centroids", "[", "class_id", "]", ")", "\n", "\n", "# Add in coarse centroids for certain classes", "\n", "", "", "if", "self", ".", "coarse_boost_classes", "is", "not", "None", ":", "\n", "            ", "json_fn", "=", "'cityscapes_coarse_{}_tile{}.json'", ".", "format", "(", "\n", "self", ".", "mode", ",", "self", ".", "class_uniform_tile", ")", "\n", "if", "os", ".", "path", ".", "isfile", "(", "json_fn", ")", ":", "\n", "                ", "with", "open", "(", "json_fn", ",", "'r'", ")", "as", "json_data", ":", "\n", "                    ", "centroids", "=", "json", ".", "load", "(", "json_data", ")", "\n", "", "self", ".", "coarse_centroids", "=", "{", "int", "(", "idx", ")", ":", "centroids", "[", "idx", "]", "for", "idx", "in", "centroids", "}", "\n", "", "else", ":", "\n", "                ", "self", ".", "coarse_imgs", ",", "_", "=", "make_dataset", "(", "'coarse'", ",", "mode", ",", "cv_split", "=", "0", ")", "\n", "self", ".", "coarse_centroids", "=", "uniform", ".", "class_centroids_all", "(", "\n", "self", ".", "coarse_imgs", ",", "\n", "num_classes", ",", "\n", "id2trainid", "=", "id_to_trainid", ",", "\n", "tile_size", "=", "class_uniform_tile", ")", "\n", "with", "open", "(", "json_fn", ",", "'w'", ")", "as", "outfile", ":", "\n", "                    ", "json", ".", "dump", "(", "self", ".", "coarse_centroids", ",", "outfile", ",", "indent", "=", "4", ")", "\n", "\n", "# add centroids for boost classes", "\n", "", "", "for", "class_id", "in", "self", ".", "coarse_boost_classes", ":", "\n", "                ", "self", ".", "centroids", "[", "class_id", "]", ".", "extend", "(", "self", ".", "coarse_centroids", "[", "class_id", "]", ")", "\n", "\n", "", "", "self", ".", "build_epoch", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.cityscapes.CityScapesUniform.cities_uniform": [[423, 433], ["cities.keys", "logging.info", "os.path.basename", "os.path.basename.split", "str", "sorted"], "methods", ["None"], ["", "def", "cities_uniform", "(", "self", ",", "imgs", ",", "name", ")", ":", "\n", "        ", "\"\"\" list out cities in imgs_uniform \"\"\"", "\n", "cities", "=", "{", "}", "\n", "for", "item", "in", "imgs", ":", "\n", "            ", "img_fn", "=", "item", "[", "0", "]", "\n", "img_fn", "=", "os", ".", "path", ".", "basename", "(", "img_fn", ")", "\n", "city", "=", "img_fn", ".", "split", "(", "'_'", ")", "[", "0", "]", "\n", "cities", "[", "city", "]", "=", "1", "\n", "", "city_names", "=", "cities", ".", "keys", "(", ")", "\n", "logging", ".", "info", "(", "'Cities for {} '", ".", "format", "(", "name", ")", "+", "str", "(", "sorted", "(", "city_names", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.cityscapes.CityScapesUniform.build_epoch": [[434, 453], ["datasets.build_epoch", "datasets.build_epoch", "datasets.build_epoch", "datasets.build_epoch"], "methods", ["home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.uniform.build_epoch", "home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.uniform.build_epoch", "home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.uniform.build_epoch", "home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.uniform.build_epoch"], ["", "def", "build_epoch", "(", "self", ",", "cut", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Perform Uniform Sampling per epoch to create a new list for training such that it\n        uniformly samples all classes\n        \"\"\"", "\n", "if", "self", ".", "class_uniform_pct", ">", "0", ":", "\n", "            ", "if", "cut", ":", "\n", "# after max_cu_epoch, we only fine images to fine tune", "\n", "                ", "self", ".", "imgs_uniform", "=", "uniform", ".", "build_epoch", "(", "self", ".", "imgs", ",", "\n", "self", ".", "fine_centroids", ",", "\n", "num_classes", ",", "\n", "cfg", ".", "CLASS_UNIFORM_PCT", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "imgs_uniform", "=", "uniform", ".", "build_epoch", "(", "self", ".", "imgs", "+", "self", ".", "aug_imgs", ",", "\n", "self", ".", "centroids", ",", "\n", "num_classes", ",", "\n", "cfg", ".", "CLASS_UNIFORM_PCT", ")", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "imgs_uniform", "=", "self", ".", "imgs", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.cityscapes.CityScapesUniform.__getitem__": [[454, 514], ["numpy.array", "cityscapes.CityScapesUniform.copy", "id_to_trainid.items", "PIL.Image.fromarray", "len", "PIL.Image.open().convert", "PIL.Image.open", "os.path.splitext", "cityscapes.CityScapesUniform.copy.astype", "os.makedirs", "os.path.join", "os.path.join", "cityscapes.colorize_mask", "cityscapes.CityScapesUniform.save", "colorize_mask.save", "cityscapes.CityScapesUniform.transform", "torchvision.Normalize", "torchvision.Normalize", "cityscapes.CityScapesUniform.target_aux_transform", "torch.tensor", "cityscapes.CityScapesUniform.target_transform", "os.path.basename", "enumerate", "numpy.array", "PIL.Image.open", "torch.mean", "torch.mean", "torch.mean", "xform", "xform", "torch.std", "torch.std", "torch.std"], "methods", ["home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.bdd100k.colorize_mask"], ["", "", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "elem", "=", "self", ".", "imgs_uniform", "[", "index", "]", "\n", "centroid", "=", "None", "\n", "if", "len", "(", "elem", ")", "==", "4", ":", "\n", "            ", "img_path", ",", "mask_path", ",", "centroid", ",", "class_id", "=", "elem", "\n", "", "else", ":", "\n", "            ", "img_path", ",", "mask_path", "=", "elem", "\n", "", "img", ",", "mask", "=", "Image", ".", "open", "(", "img_path", ")", ".", "convert", "(", "'RGB'", ")", ",", "Image", ".", "open", "(", "mask_path", ")", "\n", "img_name", "=", "os", ".", "path", ".", "splitext", "(", "os", ".", "path", ".", "basename", "(", "img_path", ")", ")", "[", "0", "]", "\n", "\n", "mask", "=", "np", ".", "array", "(", "mask", ")", "\n", "mask_copy", "=", "mask", ".", "copy", "(", ")", "\n", "for", "k", ",", "v", "in", "id_to_trainid", ".", "items", "(", ")", ":", "\n", "            ", "mask_copy", "[", "mask", "==", "k", "]", "=", "v", "\n", "", "mask", "=", "Image", ".", "fromarray", "(", "mask_copy", ".", "astype", "(", "np", ".", "uint8", ")", ")", "\n", "\n", "# Image Transformations", "\n", "if", "self", ".", "extract_feature", "is", "not", "True", ":", "\n", "            ", "if", "self", ".", "joint_transform_list", "is", "not", "None", ":", "\n", "                ", "for", "idx", ",", "xform", "in", "enumerate", "(", "self", ".", "joint_transform_list", ")", ":", "\n", "                    ", "if", "idx", "==", "0", "and", "centroid", "is", "not", "None", ":", "\n", "# HACK", "\n", "# We assume that the first transform is capable of taking", "\n", "# in a centroid", "\n", "                        ", "img", ",", "mask", "=", "xform", "(", "img", ",", "mask", ",", "centroid", ")", "\n", "", "else", ":", "\n", "                        ", "img", ",", "mask", "=", "xform", "(", "img", ",", "mask", ")", "\n", "\n", "# Debug", "\n", "", "", "", "", "if", "self", ".", "dump_images", "and", "centroid", "is", "not", "None", ":", "\n", "            ", "outdir", "=", "'../../dump_imgs_{}'", ".", "format", "(", "self", ".", "mode", ")", "\n", "os", ".", "makedirs", "(", "outdir", ",", "exist_ok", "=", "True", ")", "\n", "dump_img_name", "=", "trainid_to_name", "[", "class_id", "]", "+", "'_'", "+", "img_name", "\n", "out_img_fn", "=", "os", ".", "path", ".", "join", "(", "outdir", ",", "dump_img_name", "+", "'.png'", ")", "\n", "out_msk_fn", "=", "os", ".", "path", ".", "join", "(", "outdir", ",", "dump_img_name", "+", "'_mask.png'", ")", "\n", "mask_img", "=", "colorize_mask", "(", "np", ".", "array", "(", "mask", ")", ")", "\n", "img", ".", "save", "(", "out_img_fn", ")", "\n", "mask_img", ".", "save", "(", "out_msk_fn", ")", "\n", "\n", "", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "\n", "", "rgb_mean_std_gt", "=", "(", "[", "0.5", ",", "0.5", ",", "0.5", "]", ",", "[", "0.5", ",", "0.5", ",", "0.5", "]", ")", "\n", "img_gt", "=", "transforms", ".", "Normalize", "(", "*", "rgb_mean_std_gt", ")", "(", "img", ")", "\n", "\n", "rgb_mean_std", "=", "(", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "\n", "if", "self", ".", "image_in", ":", "\n", "            ", "eps", "=", "1e-5", "\n", "rgb_mean_std", "=", "(", "[", "torch", ".", "mean", "(", "img", "[", "0", "]", ")", ",", "torch", ".", "mean", "(", "img", "[", "1", "]", ")", ",", "torch", ".", "mean", "(", "img", "[", "2", "]", ")", "]", ",", "\n", "[", "torch", ".", "std", "(", "img", "[", "0", "]", ")", "+", "eps", ",", "torch", ".", "std", "(", "img", "[", "1", "]", ")", "+", "eps", ",", "torch", ".", "std", "(", "img", "[", "2", "]", ")", "+", "eps", "]", ")", "\n", "", "img", "=", "transforms", ".", "Normalize", "(", "*", "rgb_mean_std", ")", "(", "img", ")", "\n", "\n", "if", "self", ".", "target_aux_transform", "is", "not", "None", ":", "\n", "            ", "mask_aux", "=", "self", ".", "target_aux_transform", "(", "mask", ")", "\n", "", "else", ":", "\n", "            ", "mask_aux", "=", "torch", ".", "tensor", "(", "[", "0", "]", ")", "\n", "", "if", "self", ".", "target_transform", "is", "not", "None", ":", "\n", "            ", "mask", "=", "self", ".", "target_transform", "(", "mask", ")", "\n", "\n", "", "return", "img", ",", "mask", ",", "img_name", ",", "mask_aux", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.cityscapes.CityScapesUniform.__len__": [[515, 517], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "imgs_uniform", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.cityscapes.CityScapesAug.__init__": [[520, 556], ["cityscapes.make_dataset", "len", "RuntimeError", "float", "eval_scales.split"], "methods", ["home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.bdd100k.make_dataset"], ["    ", "def", "__init__", "(", "self", ",", "quality", ",", "mode", ",", "maxSkip", "=", "0", ",", "joint_transform", "=", "None", ",", "sliding_crop", "=", "None", ",", "\n", "transform", "=", "None", ",", "color_transform", "=", "None", ",", "geometric_transform", "=", "None", ",", "target_transform", "=", "None", ",", "target_aux_transform", "=", "None", ",", "dump_images", "=", "False", ",", "\n", "cv_split", "=", "None", ",", "eval_mode", "=", "False", ",", "\n", "eval_scales", "=", "None", ",", "eval_flip", "=", "False", ",", "image_in", "=", "False", ",", "extract_feature", "=", "False", ")", ":", "\n", "        ", "self", ".", "quality", "=", "quality", "\n", "self", ".", "mode", "=", "mode", "\n", "self", ".", "maxSkip", "=", "maxSkip", "\n", "self", ".", "joint_transform", "=", "joint_transform", "\n", "self", ".", "sliding_crop", "=", "sliding_crop", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "color_transform", "=", "color_transform", "\n", "self", ".", "geometric_transform", "=", "geometric_transform", "\n", "self", ".", "target_transform", "=", "target_transform", "\n", "self", ".", "target_aux_transform", "=", "target_aux_transform", "\n", "self", ".", "dump_images", "=", "dump_images", "\n", "self", ".", "eval_mode", "=", "eval_mode", "\n", "self", ".", "eval_flip", "=", "eval_flip", "\n", "self", ".", "eval_scales", "=", "None", "\n", "self", ".", "image_in", "=", "image_in", "\n", "self", ".", "extract_feature", "=", "extract_feature", "\n", "\n", "if", "eval_scales", "!=", "None", ":", "\n", "            ", "self", ".", "eval_scales", "=", "[", "float", "(", "scale", ")", "for", "scale", "in", "eval_scales", ".", "split", "(", "\",\"", ")", "]", "\n", "\n", "", "if", "cv_split", ":", "\n", "            ", "self", ".", "cv_split", "=", "cv_split", "\n", "assert", "cv_split", "<", "cfg", ".", "DATASET", ".", "CV_SPLITS", ",", "'expected cv_split {} to be < CV_SPLITS {}'", ".", "format", "(", "\n", "cv_split", ",", "cfg", ".", "DATASET", ".", "CV_SPLITS", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "cv_split", "=", "0", "\n", "", "self", ".", "imgs", ",", "_", "=", "make_dataset", "(", "quality", ",", "mode", ",", "self", ".", "maxSkip", ",", "cv_split", "=", "self", ".", "cv_split", ")", "\n", "if", "len", "(", "self", ".", "imgs", ")", "==", "0", ":", "\n", "            ", "raise", "RuntimeError", "(", "'Found 0 images, please check the data set'", ")", "\n", "\n", "", "self", ".", "mean_std", "=", "(", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.cityscapes.CityScapesAug._eval_get_item": [[557, 572], ["range", "return_imgs.append", "int", "img.transpose.transpose.transpose", "img.transpose.transpose.resize", "imgs.append", "int", "int", "torchvision.ToTensor", "torchvision.Normalize"], "methods", ["None"], ["", "def", "_eval_get_item", "(", "self", ",", "img", ",", "mask", ",", "scales", ",", "flip_bool", ")", ":", "\n", "        ", "return_imgs", "=", "[", "]", "\n", "for", "flip", "in", "range", "(", "int", "(", "flip_bool", ")", "+", "1", ")", ":", "\n", "            ", "imgs", "=", "[", "]", "\n", "if", "flip", ":", "\n", "                ", "img", "=", "img", ".", "transpose", "(", "Image", ".", "FLIP_LEFT_RIGHT", ")", "\n", "", "for", "scale", "in", "scales", ":", "\n", "                ", "w", ",", "h", "=", "img", ".", "size", "\n", "target_w", ",", "target_h", "=", "int", "(", "w", "*", "scale", ")", ",", "int", "(", "h", "*", "scale", ")", "\n", "resize_img", "=", "img", ".", "resize", "(", "(", "target_w", ",", "target_h", ")", ")", "\n", "tensor_img", "=", "transforms", ".", "ToTensor", "(", ")", "(", "resize_img", ")", "\n", "final_tensor", "=", "transforms", ".", "Normalize", "(", "*", "self", ".", "mean_std", ")", "(", "tensor_img", ")", "\n", "imgs", ".", "append", "(", "final_tensor", ")", "\n", "", "return_imgs", ".", "append", "(", "imgs", ")", "\n", "", "return", "return_imgs", ",", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.cityscapes.CityScapesAug.__getitem__": [[573, 617], ["numpy.array", "PIL.Image.fromarray.copy", "id_to_trainid.items", "PIL.Image.fromarray", "PIL.Image.open().convert", "PIL.Image.open", "os.path.splitext", "Image.fromarray.copy.astype", "cityscapes.CityScapesAug.transform", "cityscapes.CityScapesAug.color_transform", "cityscapes.CityScapesAug.geometric_transform", "torchvision.Normalize", "torchvision.Normalize", "torchvision.Normalize", "os.path.basename", "cityscapes.CityScapesAug._eval_get_item", "PIL.Image.open", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torchvision.ToTensor", "torch.std", "torch.std", "torch.std", "torch.std", "torch.std", "torch.std", "torch.std", "torch.std", "torch.std"], "methods", ["home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.bdd100k.BDD100KAug._eval_get_item"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "\n", "        ", "img_path", ",", "mask_path", "=", "self", ".", "imgs", "[", "index", "]", "\n", "\n", "img", ",", "mask", "=", "Image", ".", "open", "(", "img_path", ")", ".", "convert", "(", "'RGB'", ")", ",", "Image", ".", "open", "(", "mask_path", ")", "\n", "img_name", "=", "os", ".", "path", ".", "splitext", "(", "os", ".", "path", ".", "basename", "(", "img_path", ")", ")", "[", "0", "]", "\n", "\n", "mask", "=", "np", ".", "array", "(", "mask", ")", "\n", "mask_copy", "=", "mask", ".", "copy", "(", ")", "\n", "for", "k", ",", "v", "in", "id_to_trainid", ".", "items", "(", ")", ":", "\n", "            ", "mask_copy", "[", "mask", "==", "k", "]", "=", "v", "\n", "\n", "", "if", "self", ".", "eval_mode", "==", "'pooling'", ":", "\n", "            ", "return", "[", "transforms", ".", "ToTensor", "(", ")", "(", "img", ")", "]", ",", "self", ".", "_eval_get_item", "(", "img", ",", "mask_copy", ",", "\n", "self", ".", "eval_scales", ",", "\n", "self", ".", "eval_flip", ")", ",", "img_name", "\n", "\n", "", "mask", "=", "Image", ".", "fromarray", "(", "mask_copy", ".", "astype", "(", "np", ".", "uint8", ")", ")", "\n", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "img_or", "=", "self", ".", "transform", "(", "img", ")", "\n", "\n", "", "if", "self", ".", "color_transform", "is", "not", "None", ":", "\n", "            ", "img_color", "=", "self", ".", "color_transform", "(", "img", ")", "\n", "\n", "", "if", "self", ".", "geometric_transform", "is", "not", "None", ":", "\n", "            ", "img_geometric", "=", "self", ".", "geometric_transform", "(", "img", ")", "\n", "\n", "", "rgb_mean_std_or", "=", "(", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "\n", "rgb_mean_std_color", "=", "(", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "\n", "rgb_mean_std_geometric", "=", "(", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "\n", "if", "self", ".", "image_in", ":", "\n", "            ", "eps", "=", "1e-5", "\n", "rgb_mean_std_or", "=", "(", "[", "torch", ".", "mean", "(", "img_or", "[", "0", "]", ")", ",", "torch", ".", "mean", "(", "img_or", "[", "1", "]", ")", ",", "torch", ".", "mean", "(", "img_or", "[", "2", "]", ")", "]", ",", "\n", "[", "torch", ".", "std", "(", "img_or", "[", "0", "]", ")", "+", "eps", ",", "torch", ".", "std", "(", "img_or", "[", "1", "]", ")", "+", "eps", ",", "torch", ".", "std", "(", "img_or", "[", "2", "]", ")", "+", "eps", "]", ")", "\n", "rgb_mean_std_color", "=", "(", "[", "torch", ".", "mean", "(", "img_color", "[", "0", "]", ")", ",", "torch", ".", "mean", "(", "img_color", "[", "1", "]", ")", ",", "torch", ".", "mean", "(", "img_color", "[", "2", "]", ")", "]", ",", "\n", "[", "torch", ".", "std", "(", "img_color", "[", "0", "]", ")", "+", "eps", ",", "torch", ".", "std", "(", "img_color", "[", "1", "]", ")", "+", "eps", ",", "torch", ".", "std", "(", "img_color", "[", "2", "]", ")", "+", "eps", "]", ")", "\n", "rgb_mean_std_geometric", "=", "(", "[", "torch", ".", "mean", "(", "img_geometric", "[", "0", "]", ")", ",", "torch", ".", "mean", "(", "img_geometric", "[", "1", "]", ")", ",", "torch", ".", "mean", "(", "img_geometric", "[", "2", "]", ")", "]", ",", "\n", "[", "torch", ".", "std", "(", "img_geometric", "[", "0", "]", ")", "+", "eps", ",", "torch", ".", "std", "(", "img_geometric", "[", "1", "]", ")", "+", "eps", ",", "torch", ".", "std", "(", "img_geometric", "[", "2", "]", ")", "+", "eps", "]", ")", "\n", "", "img_or", "=", "transforms", ".", "Normalize", "(", "*", "rgb_mean_std_or", ")", "(", "img_or", ")", "\n", "img_color", "=", "transforms", ".", "Normalize", "(", "*", "rgb_mean_std_color", ")", "(", "img_color", ")", "\n", "img_geometric", "=", "transforms", ".", "Normalize", "(", "*", "rgb_mean_std_geometric", ")", "(", "img_geometric", ")", "\n", "\n", "return", "img_or", ",", "img_color", ",", "img_geometric", ",", "img_name", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.cityscapes.CityScapesAug.__len__": [[618, 620], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "imgs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.cityscapes.colorize_mask": [[38, 46], ["PIL.Image.fromarray().convert", "Image.fromarray().convert.putpalette", "PIL.Image.fromarray", "mask.astype"], "function", ["None"], ["", "def", "colorize_mask", "(", "mask", ")", ":", "\n", "    ", "\"\"\"\n    Colorize a segmentation mask.\n    \"\"\"", "\n", "# mask: numpy array of the mask", "\n", "new_mask", "=", "Image", ".", "fromarray", "(", "mask", ".", "astype", "(", "np", ".", "uint8", ")", ")", ".", "convert", "(", "'P'", ")", "\n", "new_mask", ".", "putpalette", "(", "palette", ")", "\n", "return", "new_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.cityscapes.add_items": [[48, 82], ["items.append", "name.split", "os.listdir", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "it.split", "os.path.join", "os.path.join", "os.path.join", "os.path.isfile", "os.path.isfile", "aug_items.append", "os.path.join", "os.path.join", "os.path.isfile", "os.path.isfile", "aug_items.append", "int", "int"], "function", ["None"], ["", "def", "add_items", "(", "items", ",", "aug_items", ",", "cities", ",", "img_path", ",", "mask_path", ",", "mask_postfix", ",", "mode", ",", "maxSkip", ")", ":", "\n", "    ", "\"\"\"\n\n    Add More items ot the list from the augmented dataset\n    \"\"\"", "\n", "\n", "for", "c", "in", "cities", ":", "\n", "        ", "c_items", "=", "[", "name", ".", "split", "(", "img_postfix", ")", "[", "0", "]", "for", "name", "in", "\n", "os", ".", "listdir", "(", "os", ".", "path", ".", "join", "(", "img_path", ",", "c", ")", ")", "]", "\n", "for", "it", "in", "c_items", ":", "\n", "            ", "item", "=", "(", "os", ".", "path", ".", "join", "(", "img_path", ",", "c", ",", "it", "+", "img_postfix", ")", ",", "\n", "os", ".", "path", ".", "join", "(", "mask_path", ",", "c", ",", "it", "+", "mask_postfix", ")", ")", "\n", "########################################################", "\n", "###### dataset augmentation ############################", "\n", "########################################################", "\n", "if", "mode", "==", "\"train\"", "and", "maxSkip", ">", "0", ":", "\n", "                ", "new_img_path", "=", "os", ".", "path", ".", "join", "(", "aug_root", ",", "'leftImg8bit_trainvaltest'", ",", "'leftImg8bit'", ")", "\n", "new_mask_path", "=", "os", ".", "path", ".", "join", "(", "aug_root", ",", "'gtFine_trainvaltest'", ",", "'gtFine'", ")", "\n", "file_info", "=", "it", ".", "split", "(", "\"_\"", ")", "\n", "cur_seq_id", "=", "file_info", "[", "-", "1", "]", "\n", "\n", "prev_seq_id", "=", "\"%06d\"", "%", "(", "int", "(", "cur_seq_id", ")", "-", "maxSkip", ")", "\n", "next_seq_id", "=", "\"%06d\"", "%", "(", "int", "(", "cur_seq_id", ")", "+", "maxSkip", ")", "\n", "prev_it", "=", "file_info", "[", "0", "]", "+", "\"_\"", "+", "file_info", "[", "1", "]", "+", "\"_\"", "+", "prev_seq_id", "\n", "next_it", "=", "file_info", "[", "0", "]", "+", "\"_\"", "+", "file_info", "[", "1", "]", "+", "\"_\"", "+", "next_seq_id", "\n", "prev_item", "=", "(", "os", ".", "path", ".", "join", "(", "new_img_path", ",", "c", ",", "prev_it", "+", "img_postfix", ")", ",", "\n", "os", ".", "path", ".", "join", "(", "new_mask_path", ",", "c", ",", "prev_it", "+", "mask_postfix", ")", ")", "\n", "if", "os", ".", "path", ".", "isfile", "(", "prev_item", "[", "0", "]", ")", "and", "os", ".", "path", ".", "isfile", "(", "prev_item", "[", "1", "]", ")", ":", "\n", "                    ", "aug_items", ".", "append", "(", "prev_item", ")", "\n", "", "next_item", "=", "(", "os", ".", "path", ".", "join", "(", "new_img_path", ",", "c", ",", "next_it", "+", "img_postfix", ")", ",", "\n", "os", ".", "path", ".", "join", "(", "new_mask_path", ",", "c", ",", "next_it", "+", "mask_postfix", ")", ")", "\n", "if", "os", ".", "path", ".", "isfile", "(", "next_item", "[", "0", "]", ")", "and", "os", ".", "path", ".", "isfile", "(", "next_item", "[", "1", "]", ")", ":", "\n", "                    ", "aug_items", ".", "append", "(", "next_item", ")", "\n", "", "", "items", ".", "append", "(", "item", ")", "\n", "# items.extend(extra_items)", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.cityscapes.make_cv_splits": [[85, 118], ["os.path.join", "os.path.join", "sorted", "len", "len", "range", "range", "cv_splits.append", "os.listdir", "os.listdir", "split[].append", "split[].append"], "function", ["None"], ["", "", "", "def", "make_cv_splits", "(", "img_dir_name", ")", ":", "\n", "    ", "\"\"\"\n    Create splits of train/val data.\n    A split is a lists of cities.\n    split0 is aligned with the default Cityscapes train/val.\n    \"\"\"", "\n", "trn_path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "img_dir_name", ",", "'leftImg8bit'", ",", "'train'", ")", "\n", "val_path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "img_dir_name", ",", "'leftImg8bit'", ",", "'val'", ")", "\n", "\n", "trn_cities", "=", "[", "'train/'", "+", "c", "for", "c", "in", "os", ".", "listdir", "(", "trn_path", ")", "]", "\n", "val_cities", "=", "[", "'val/'", "+", "c", "for", "c", "in", "os", ".", "listdir", "(", "val_path", ")", "]", "\n", "\n", "# want reproducible randomly shuffled", "\n", "trn_cities", "=", "sorted", "(", "trn_cities", ")", "\n", "\n", "all_cities", "=", "val_cities", "+", "trn_cities", "\n", "num_val_cities", "=", "len", "(", "val_cities", ")", "\n", "num_cities", "=", "len", "(", "all_cities", ")", "\n", "\n", "cv_splits", "=", "[", "]", "\n", "for", "split_idx", "in", "range", "(", "cfg", ".", "DATASET", ".", "CV_SPLITS", ")", ":", "\n", "        ", "split", "=", "{", "}", "\n", "split", "[", "'train'", "]", "=", "[", "]", "\n", "split", "[", "'val'", "]", "=", "[", "]", "\n", "offset", "=", "split_idx", "*", "num_cities", "//", "cfg", ".", "DATASET", ".", "CV_SPLITS", "\n", "for", "j", "in", "range", "(", "num_cities", ")", ":", "\n", "            ", "if", "j", ">=", "offset", "and", "j", "<", "(", "offset", "+", "num_val_cities", ")", ":", "\n", "                ", "split", "[", "'val'", "]", ".", "append", "(", "all_cities", "[", "j", "]", ")", "\n", "", "else", ":", "\n", "                ", "split", "[", "'train'", "]", ".", "append", "(", "all_cities", "[", "j", "]", ")", "\n", "", "", "cv_splits", ".", "append", "(", "split", ")", "\n", "\n", "", "return", "cv_splits", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.cityscapes.make_split_coarse": [[120, 133], ["os.listdir", "sorted"], "function", ["None"], ["", "def", "make_split_coarse", "(", "img_path", ")", ":", "\n", "    ", "\"\"\"\n    Create a train/val split for coarse\n    return: city split in train\n    \"\"\"", "\n", "all_cities", "=", "os", ".", "listdir", "(", "img_path", ")", "\n", "all_cities", "=", "sorted", "(", "all_cities", ")", "# needs to always be the same", "\n", "val_cities", "=", "[", "]", "# Can manually set cities to not be included into train split", "\n", "\n", "split", "=", "{", "}", "\n", "split", "[", "'val'", "]", "=", "val_cities", "\n", "split", "[", "'train'", "]", "=", "[", "c", "for", "c", "in", "all_cities", "if", "c", "not", "in", "val_cities", "]", "\n", "return", "split", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.cityscapes.make_test_split": [[135, 140], ["os.path.join", "os.listdir"], "function", ["None"], ["", "def", "make_test_split", "(", "img_dir_name", ")", ":", "\n", "    ", "test_path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "img_dir_name", ",", "'leftImg8bit'", ",", "'test'", ")", "\n", "test_cities", "=", "[", "'test/'", "+", "c", "for", "c", "in", "os", ".", "listdir", "(", "test_path", ")", "]", "\n", "\n", "return", "test_cities", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.cityscapes.make_dataset": [[142, 192], ["logging.info", "os.path.join", "os.path.join", "cityscapes.make_split_coarse", "logging.info", "cityscapes.add_items", "os.path.join", "os.path.join", "cityscapes.make_cv_splits", "str", "len", "len", "cityscapes.make_test_split", "cityscapes.add_items", "logging.info", "cityscapes.add_items", "str"], "function", ["home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.bdd100k.make_split_coarse", "home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.bdd100k.add_items", "home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.bdd100k.make_cv_splits", "home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.bdd100k.make_test_split", "home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.bdd100k.add_items", "home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.bdd100k.add_items"], ["", "def", "make_dataset", "(", "quality", ",", "mode", ",", "maxSkip", "=", "0", ",", "fine_coarse_mult", "=", "6", ",", "cv_split", "=", "0", ")", ":", "\n", "    ", "\"\"\"\n    Assemble list of images + mask files\n\n    fine -   modes: train/val/test/trainval    cv:0,1,2\n    coarse - modes: train/val                  cv:na\n\n    path examples:\n    leftImg8bit_trainextra/leftImg8bit/train_extra/augsburg\n    gtCoarse/gtCoarse/train_extra/augsburg\n    \"\"\"", "\n", "items", "=", "[", "]", "\n", "aug_items", "=", "[", "]", "\n", "\n", "if", "quality", "==", "'coarse'", ":", "\n", "        ", "assert", "(", "cv_split", "==", "0", ")", "\n", "assert", "mode", "in", "[", "'train'", ",", "'val'", "]", "\n", "img_dir_name", "=", "'leftImg8bit_trainextra'", "\n", "img_path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "img_dir_name", ",", "'leftImg8bit'", ",", "'train_extra'", ")", "\n", "mask_path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "'gtCoarse'", ",", "'gtCoarse'", ",", "'train_extra'", ")", "\n", "mask_postfix", "=", "'_gtCoarse_labelIds.png'", "\n", "coarse_dirs", "=", "make_split_coarse", "(", "img_path", ")", "\n", "logging", ".", "info", "(", "'{} coarse cities: '", ".", "format", "(", "mode", ")", "+", "str", "(", "coarse_dirs", "[", "mode", "]", ")", ")", "\n", "add_items", "(", "items", ",", "aug_items", ",", "coarse_dirs", "[", "mode", "]", ",", "img_path", ",", "mask_path", ",", "\n", "mask_postfix", ",", "mode", ",", "maxSkip", ")", "\n", "", "elif", "quality", "==", "'fine'", ":", "\n", "        ", "assert", "mode", "in", "[", "'train'", ",", "'val'", ",", "'test'", ",", "'trainval'", "]", "\n", "img_dir_name", "=", "'leftImg8bit_trainvaltest'", "\n", "img_path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "img_dir_name", ",", "'leftImg8bit'", ")", "\n", "mask_path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "'gtFine_trainvaltest'", ",", "'gtFine'", ")", "\n", "mask_postfix", "=", "'_gtFine_labelIds.png'", "\n", "cv_splits", "=", "make_cv_splits", "(", "img_dir_name", ")", "\n", "if", "mode", "==", "'trainval'", ":", "\n", "            ", "modes", "=", "[", "'train'", ",", "'val'", "]", "\n", "", "else", ":", "\n", "            ", "modes", "=", "[", "mode", "]", "\n", "", "for", "mode", "in", "modes", ":", "\n", "            ", "if", "mode", "==", "'test'", ":", "\n", "                ", "cv_splits", "=", "make_test_split", "(", "img_dir_name", ")", "\n", "add_items", "(", "items", ",", "aug_items", ",", "cv_splits", ",", "img_path", ",", "mask_path", ",", "\n", "mask_postfix", ",", "mode", ",", "maxSkip", ")", "\n", "", "else", ":", "\n", "                ", "logging", ".", "info", "(", "'{} fine cities: '", ".", "format", "(", "mode", ")", "+", "str", "(", "cv_splits", "[", "cv_split", "]", "[", "mode", "]", ")", ")", "\n", "add_items", "(", "items", ",", "aug_items", ",", "cv_splits", "[", "cv_split", "]", "[", "mode", "]", ",", "img_path", ",", "mask_path", ",", "\n", "mask_postfix", ",", "mode", ",", "maxSkip", ")", "\n", "", "", "", "else", ":", "\n", "        ", "raise", "'unknown cityscapes quality {}'", ".", "format", "(", "quality", ")", "\n", "# logging.info('Cityscapes-{}: {} images'.format(mode, len(items)))", "\n", "", "logging", ".", "info", "(", "'Cityscapes-{}: {} images'", ".", "format", "(", "mode", ",", "len", "(", "items", ")", "+", "len", "(", "aug_items", ")", ")", ")", "\n", "return", "items", ",", "aug_items", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.cityscapes.make_dataset_video": [[194, 209], ["os.path.join", "os.listdir", "os.path.join", "items.append", "name.split", "os.listdir", "os.path.join"], "function", ["None"], ["", "def", "make_dataset_video", "(", ")", ":", "\n", "    ", "\"\"\"\n    Create Filename list for the dataset\n    \"\"\"", "\n", "img_dir_name", "=", "'leftImg8bit_demoVideo'", "\n", "img_path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "img_dir_name", ",", "'leftImg8bit/demoVideo'", ")", "\n", "items", "=", "[", "]", "\n", "categories", "=", "os", ".", "listdir", "(", "img_path", ")", "\n", "for", "c", "in", "categories", "[", "1", ":", "]", ":", "\n", "        ", "c_items", "=", "[", "name", ".", "split", "(", "img_postfix", ")", "[", "0", "]", "for", "name", "in", "\n", "os", ".", "listdir", "(", "os", ".", "path", ".", "join", "(", "img_path", ",", "c", ")", ")", "]", "\n", "for", "it", "in", "c_items", ":", "\n", "            ", "item", "=", "os", ".", "path", ".", "join", "(", "img_path", ",", "c", ",", "it", "+", "img_postfix", ")", "\n", "items", ".", "append", "(", "item", ")", "\n", "", "", "return", "items", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.nullloader.NullLoader.__init__": [[15, 18], ["range"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "crop_size", ")", ":", "\n", "        ", "self", ".", "imgs", "=", "range", "(", "200", ")", "\n", "self", ".", "crop_size", "=", "crop_size", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.nullloader.NullLoader.__getitem__": [[19, 22], ["torch.FloatTensor", "torch.LongTensor", "numpy.zeros", "numpy.zeros", "str"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "#Return img, mask, name", "\n", "        ", "return", "torch", ".", "FloatTensor", "(", "np", ".", "zeros", "(", "(", "3", ",", "self", ".", "crop_size", ",", "self", ".", "crop_size", ")", ")", ")", ",", "torch", ".", "LongTensor", "(", "np", ".", "zeros", "(", "(", "self", ".", "crop_size", ",", "self", ".", "crop_size", ")", ")", ")", ",", "'img'", "+", "str", "(", "index", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.nullloader.NullLoader.__len__": [[23, 25], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "imgs", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.mapillary.Mapillary.__init__": [[194, 244], ["mapillary.gen_id_to_ignore", "mapillary.gen_colormap", "mapillary.make_dataset", "mapillary.Mapillary.build_epoch", "len", "RuntimeError", "numpy.random.shuffle", "os.path.isfile", "datasets.class_centroids_all", "datasets.class_centroids_all", "open", "json.load", "int", "open", "json.dump"], "methods", ["home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.mapillary.gen_id_to_ignore", "home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.mapillary.gen_colormap", "home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.bdd100k.make_dataset", "home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.uniform.build_epoch", "home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.uniform.class_centroids_all", "home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.uniform.class_centroids_all"], ["    ", "def", "__init__", "(", "self", ",", "quality", ",", "mode", ",", "joint_transform_list", "=", "None", ",", "\n", "transform", "=", "None", ",", "target_transform", "=", "None", ",", "target_aux_transform", "=", "None", ",", "\n", "image_in", "=", "False", ",", "dump_images", "=", "False", ",", "class_uniform_pct", "=", "0", ",", "\n", "class_uniform_tile", "=", "768", ",", "test", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        class_uniform_pct = Percent of class uniform samples. 1.0 means fully uniform.\n                            0.0 means fully random.\n        class_uniform_tile_size = Class uniform tile size\n        \"\"\"", "\n", "gen_id_to_ignore", "(", ")", "\n", "self", ".", "quality", "=", "quality", "\n", "self", ".", "mode", "=", "mode", "\n", "self", ".", "joint_transform_list", "=", "joint_transform_list", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "target_transform", "=", "target_transform", "\n", "self", ".", "image_in", "=", "image_in", "\n", "self", ".", "target_aux_transform", "=", "target_aux_transform", "\n", "self", ".", "dump_images", "=", "dump_images", "\n", "self", ".", "class_uniform_pct", "=", "class_uniform_pct", "\n", "self", ".", "class_uniform_tile", "=", "class_uniform_tile", "\n", "self", ".", "id2name", "=", "gen_colormap", "(", ")", "\n", "self", ".", "imgs_uniform", "=", "None", "\n", "\n", "\n", "# find all images", "\n", "self", ".", "imgs", "=", "make_dataset", "(", "quality", ",", "mode", ")", "\n", "if", "len", "(", "self", ".", "imgs", ")", "==", "0", ":", "\n", "            ", "raise", "RuntimeError", "(", "'Found 0 images, please check the data set'", ")", "\n", "", "if", "test", ":", "\n", "            ", "np", ".", "random", ".", "shuffle", "(", "self", ".", "imgs", ")", "\n", "self", ".", "imgs", "=", "self", ".", "imgs", "[", ":", "200", "]", "\n", "\n", "", "if", "self", ".", "class_uniform_pct", ":", "\n", "            ", "json_fn", "=", "'mapillary_tile{}.json'", ".", "format", "(", "self", ".", "class_uniform_tile", ")", "\n", "if", "os", ".", "path", ".", "isfile", "(", "json_fn", ")", ":", "\n", "                ", "with", "open", "(", "json_fn", ",", "'r'", ")", "as", "json_data", ":", "\n", "                    ", "centroids", "=", "json", ".", "load", "(", "json_data", ")", "\n", "", "self", ".", "centroids", "=", "{", "int", "(", "idx", ")", ":", "centroids", "[", "idx", "]", "for", "idx", "in", "centroids", "}", "\n", "", "else", ":", "\n", "# centroids is a dict (indexed by class) of lists of centroids", "\n", "                ", "self", ".", "centroids", "=", "uniform", ".", "class_centroids_all", "(", "\n", "self", ".", "imgs", ",", "\n", "num_classes", ",", "\n", "id2trainid", "=", "None", ",", "\n", "tile_size", "=", "self", ".", "class_uniform_tile", ")", "\n", "with", "open", "(", "json_fn", ",", "'w'", ")", "as", "outfile", ":", "\n", "                    ", "json", ".", "dump", "(", "self", ".", "centroids", ",", "outfile", ",", "indent", "=", "4", ")", "\n", "", "", "", "else", ":", "\n", "            ", "self", ".", "centroids", "=", "[", "]", "\n", "", "self", ".", "build_epoch", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.mapillary.Mapillary.build_epoch": [[245, 253], ["datasets.build_epoch", "datasets.build_epoch"], "methods", ["home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.uniform.build_epoch", "home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.uniform.build_epoch"], ["", "def", "build_epoch", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "class_uniform_pct", "!=", "0", ":", "\n", "            ", "self", ".", "imgs_uniform", "=", "uniform", ".", "build_epoch", "(", "self", ".", "imgs", ",", "\n", "self", ".", "centroids", ",", "\n", "num_classes", ",", "\n", "self", ".", "class_uniform_pct", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "imgs_uniform", "=", "self", ".", "imgs", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.mapillary.Mapillary.__getitem__": [[254, 312], ["numpy.array", "mapillary.Mapillary.copy", "id_to_ignore_or_group.items", "PIL.Image.fromarray", "len", "PIL.Image.open().convert", "PIL.Image.open", "os.path.splitext", "mapillary.Mapillary.copy.astype", "enumerate", "os.makedirs", "os.path.join", "os.path.join", "mapillary.colorize_mask", "mapillary.Mapillary.save", "colorize_mask.save", "mapillary.Mapillary.transform", "torchvision.Normalize", "torchvision.Normalize", "mapillary.Mapillary.target_aux_transform", "torch.tensor", "mapillary.Mapillary.target_transform", "torchvision.MaskToTensor", "os.path.basename", "numpy.array", "PIL.Image.open", "xform", "xform", "torch.mean", "torch.mean", "torch.mean", "torch.std", "torch.std", "torch.std"], "methods", ["home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.bdd100k.colorize_mask"], ["", "", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "if", "len", "(", "self", ".", "imgs_uniform", "[", "index", "]", ")", "==", "2", ":", "\n", "            ", "img_path", ",", "mask_path", "=", "self", ".", "imgs_uniform", "[", "index", "]", "\n", "centroid", "=", "None", "\n", "class_id", "=", "None", "\n", "", "else", ":", "\n", "            ", "img_path", ",", "mask_path", ",", "centroid", ",", "class_id", "=", "self", ".", "imgs_uniform", "[", "index", "]", "\n", "", "img", ",", "mask", "=", "Image", ".", "open", "(", "img_path", ")", ".", "convert", "(", "'RGB'", ")", ",", "Image", ".", "open", "(", "mask_path", ")", "\n", "img_name", "=", "os", ".", "path", ".", "splitext", "(", "os", ".", "path", ".", "basename", "(", "img_path", ")", ")", "[", "0", "]", "\n", "\n", "mask", "=", "np", ".", "array", "(", "mask", ")", "\n", "mask_copy", "=", "mask", ".", "copy", "(", ")", "\n", "for", "k", ",", "v", "in", "id_to_ignore_or_group", ".", "items", "(", ")", ":", "\n", "            ", "mask_copy", "[", "mask", "==", "k", "]", "=", "v", "\n", "", "mask", "=", "Image", ".", "fromarray", "(", "mask_copy", ".", "astype", "(", "np", ".", "uint8", ")", ")", "\n", "\n", "# Image Transformations", "\n", "if", "self", ".", "joint_transform_list", "is", "not", "None", ":", "\n", "            ", "for", "idx", ",", "xform", "in", "enumerate", "(", "self", ".", "joint_transform_list", ")", ":", "\n", "                ", "if", "idx", "==", "0", "and", "centroid", "is", "not", "None", ":", "\n", "# HACK! Assume the first transform accepts a centroid", "\n", "                    ", "img", ",", "mask", "=", "xform", "(", "img", ",", "mask", ",", "centroid", ")", "\n", "", "else", ":", "\n", "                    ", "img", ",", "mask", "=", "xform", "(", "img", ",", "mask", ")", "\n", "\n", "", "", "", "if", "self", ".", "dump_images", ":", "\n", "            ", "outdir", "=", "'dump_imgs_{}'", ".", "format", "(", "self", ".", "mode", ")", "\n", "os", ".", "makedirs", "(", "outdir", ",", "exist_ok", "=", "True", ")", "\n", "if", "centroid", "is", "not", "None", ":", "\n", "                ", "dump_img_name", "=", "self", ".", "id2name", "[", "class_id", "]", "+", "'_'", "+", "img_name", "\n", "", "else", ":", "\n", "                ", "dump_img_name", "=", "img_name", "\n", "", "out_img_fn", "=", "os", ".", "path", ".", "join", "(", "outdir", ",", "dump_img_name", "+", "'.png'", ")", "\n", "out_msk_fn", "=", "os", ".", "path", ".", "join", "(", "outdir", ",", "dump_img_name", "+", "'_mask.png'", ")", "\n", "mask_img", "=", "colorize_mask", "(", "np", ".", "array", "(", "mask", ")", ")", "\n", "img", ".", "save", "(", "out_img_fn", ")", "\n", "mask_img", ".", "save", "(", "out_msk_fn", ")", "\n", "\n", "", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "\n", "", "rgb_mean_std", "=", "(", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "\n", "img_gt", "=", "transforms", ".", "Normalize", "(", "*", "rgb_mean_std", ")", "(", "img", ")", "\n", "if", "self", ".", "image_in", ":", "\n", "            ", "eps", "=", "1e-5", "\n", "rgb_mean_std", "=", "(", "[", "torch", ".", "mean", "(", "img", "[", "0", "]", ")", ",", "torch", ".", "mean", "(", "img", "[", "1", "]", ")", ",", "torch", ".", "mean", "(", "img", "[", "2", "]", ")", "]", ",", "\n", "[", "torch", ".", "std", "(", "img", "[", "0", "]", ")", "+", "eps", ",", "torch", ".", "std", "(", "img", "[", "1", "]", ")", "+", "eps", ",", "torch", ".", "std", "(", "img", "[", "2", "]", ")", "+", "eps", "]", ")", "\n", "", "img", "=", "transforms", ".", "Normalize", "(", "*", "rgb_mean_std", ")", "(", "img", ")", "\n", "\n", "if", "self", ".", "target_aux_transform", "is", "not", "None", ":", "\n", "            ", "mask_aux", "=", "self", ".", "target_aux_transform", "(", "mask", ")", "\n", "", "else", ":", "\n", "            ", "mask_aux", "=", "torch", ".", "tensor", "(", "[", "0", "]", ")", "\n", "", "if", "self", ".", "target_transform", "is", "not", "None", ":", "\n", "            ", "mask", "=", "self", ".", "target_transform", "(", "mask", ")", "\n", "\n", "", "mask", "=", "extended_transforms", ".", "MaskToTensor", "(", ")", "(", "mask", ")", "\n", "return", "img", ",", "mask", ",", "img_name", ",", "mask_aux", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.mapillary.Mapillary.__len__": [[313, 315], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "imgs_uniform", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.mapillary.Mapillary.calculate_weights": [[316, 318], ["BaseException"], "methods", ["None"], ["", "def", "calculate_weights", "(", "self", ")", ":", "\n", "        ", "raise", "BaseException", "(", "\"not supported yet\"", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.mapillary.gen_id_to_ignore": [[31, 124], ["range"], "function", ["None"], ["def", "gen_id_to_ignore", "(", ")", ":", "\n", "    ", "global", "id_to_ignore_or_group", "\n", "for", "i", "in", "range", "(", "66", ")", ":", "\n", "        ", "id_to_ignore_or_group", "[", "i", "]", "=", "ignore_label", "\n", "\n", "### Convert each class to cityscapes one", "\n", "### Road", "\n", "# Road", "\n", "", "id_to_ignore_or_group", "[", "13", "]", "=", "0", "\n", "# Lane Marking - General", "\n", "id_to_ignore_or_group", "[", "24", "]", "=", "0", "\n", "# Manhole", "\n", "id_to_ignore_or_group", "[", "41", "]", "=", "0", "\n", "\n", "### Sidewalk", "\n", "# Curb", "\n", "id_to_ignore_or_group", "[", "2", "]", "=", "1", "\n", "# Sidewalk", "\n", "id_to_ignore_or_group", "[", "15", "]", "=", "1", "\n", "\n", "### Building", "\n", "# Building", "\n", "id_to_ignore_or_group", "[", "17", "]", "=", "2", "\n", "\n", "### Wall", "\n", "# Wall", "\n", "id_to_ignore_or_group", "[", "6", "]", "=", "3", "\n", "\n", "### Fence", "\n", "# Fence", "\n", "id_to_ignore_or_group", "[", "3", "]", "=", "4", "\n", "\n", "### Pole", "\n", "# Pole", "\n", "id_to_ignore_or_group", "[", "45", "]", "=", "5", "\n", "# Utility Pole", "\n", "id_to_ignore_or_group", "[", "47", "]", "=", "5", "\n", "\n", "### Traffic Light", "\n", "# Traffic Light", "\n", "id_to_ignore_or_group", "[", "48", "]", "=", "6", "\n", "\n", "### Traffic Sign", "\n", "# Traffic Sign", "\n", "id_to_ignore_or_group", "[", "50", "]", "=", "7", "\n", "\n", "### Vegetation", "\n", "# Vegitation", "\n", "id_to_ignore_or_group", "[", "30", "]", "=", "8", "\n", "\n", "### Terrain", "\n", "# Terrain", "\n", "id_to_ignore_or_group", "[", "29", "]", "=", "9", "\n", "\n", "### Sky", "\n", "# Sky", "\n", "id_to_ignore_or_group", "[", "27", "]", "=", "10", "\n", "\n", "### Person", "\n", "# Person", "\n", "id_to_ignore_or_group", "[", "19", "]", "=", "11", "\n", "\n", "### Rider", "\n", "# Bicyclist", "\n", "id_to_ignore_or_group", "[", "20", "]", "=", "12", "\n", "# Motorcyclist", "\n", "id_to_ignore_or_group", "[", "21", "]", "=", "12", "\n", "# Other Rider", "\n", "id_to_ignore_or_group", "[", "22", "]", "=", "12", "\n", "\n", "### Car", "\n", "# Car", "\n", "id_to_ignore_or_group", "[", "55", "]", "=", "13", "\n", "\n", "### Truck", "\n", "# Truck", "\n", "id_to_ignore_or_group", "[", "61", "]", "=", "14", "\n", "\n", "### Bus", "\n", "# Bus", "\n", "id_to_ignore_or_group", "[", "54", "]", "=", "15", "\n", "\n", "### Train", "\n", "# On Rails", "\n", "id_to_ignore_or_group", "[", "58", "]", "=", "16", "\n", "\n", "### Motorcycle", "\n", "# Motorcycle", "\n", "id_to_ignore_or_group", "[", "57", "]", "=", "17", "\n", "\n", "### Bicycle", "\n", "# Bicycle", "\n", "id_to_ignore_or_group", "[", "52", "]", "=", "18", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.mapillary.colorize_mask": [[126, 133], ["PIL.Image.fromarray().convert", "Image.fromarray().convert.putpalette", "PIL.Image.fromarray", "image_array.astype"], "function", ["None"], ["", "def", "colorize_mask", "(", "image_array", ")", ":", "\n", "    ", "\"\"\"\n    Colorize a segmentation mask\n    \"\"\"", "\n", "new_mask", "=", "Image", ".", "fromarray", "(", "image_array", ".", "astype", "(", "np", ".", "uint8", ")", ")", ".", "convert", "(", "'P'", ")", "\n", "new_mask", ".", "putpalette", "(", "color_mapping", ")", "\n", "return", "new_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.mapillary.make_dataset": [[135, 170], ["os.path.join", "print", "os.listdir", "os.path.join", "BaseException", "sorted", "sorted", "os.listdir.remove", "items.append", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.splitext", "os.listdir", "os.path.splitext", "os.listdir", "it.replace"], "function", ["None"], ["", "def", "make_dataset", "(", "quality", ",", "mode", ")", ":", "\n", "    ", "\"\"\"\n    Create File List\n    \"\"\"", "\n", "assert", "(", "quality", "==", "'semantic'", "and", "mode", "in", "[", "'train'", ",", "'val'", "]", ")", "\n", "img_dir_name", "=", "None", "\n", "if", "quality", "==", "'semantic'", ":", "\n", "        ", "if", "mode", "==", "'train'", ":", "\n", "            ", "img_dir_name", "=", "'training'", "\n", "", "if", "mode", "==", "'val'", ":", "\n", "            ", "img_dir_name", "=", "'validation'", "\n", "", "mask_path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "img_dir_name", ",", "'labels'", ")", "\n", "", "else", ":", "\n", "        ", "raise", "BaseException", "(", "\"Instance Segmentation Not support\"", ")", "\n", "\n", "", "img_path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "img_dir_name", ",", "'images'", ")", "\n", "print", "(", "img_path", ")", "\n", "if", "quality", "!=", "'video'", ":", "\n", "        ", "imgs", "=", "sorted", "(", "[", "os", ".", "path", ".", "splitext", "(", "f", ")", "[", "0", "]", "for", "f", "in", "os", ".", "listdir", "(", "img_path", ")", "]", ")", "\n", "msks", "=", "sorted", "(", "[", "os", ".", "path", ".", "splitext", "(", "f", ")", "[", "0", "]", "for", "f", "in", "os", ".", "listdir", "(", "mask_path", ")", "]", ")", "\n", "assert", "imgs", "==", "msks", "\n", "\n", "", "items", "=", "[", "]", "\n", "c_items", "=", "os", ".", "listdir", "(", "img_path", ")", "\n", "if", "'.DS_Store'", "in", "c_items", ":", "\n", "        ", "c_items", ".", "remove", "(", "'.DS_Store'", ")", "\n", "\n", "", "for", "it", "in", "c_items", ":", "\n", "        ", "if", "quality", "==", "'video'", ":", "\n", "            ", "item", "=", "(", "os", ".", "path", ".", "join", "(", "img_path", ",", "it", ")", ",", "os", ".", "path", ".", "join", "(", "img_path", ",", "it", ")", ")", "\n", "", "else", ":", "\n", "            ", "item", "=", "(", "os", ".", "path", ".", "join", "(", "img_path", ",", "it", ")", ",", "\n", "os", ".", "path", ".", "join", "(", "mask_path", ",", "it", ".", "replace", "(", "\".jpg\"", ",", "\".png\"", ")", ")", ")", "\n", "", "items", ".", "append", "(", "item", ")", "\n", "", "return", "items", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.mapillary.gen_colormap": [[172, 191], ["range", "open", "json.load", "len"], "function", ["None"], ["", "def", "gen_colormap", "(", ")", ":", "\n", "    ", "\"\"\"\n    Get Color Map from file\n    \"\"\"", "\n", "global", "color_mapping", "\n", "\n", "# load mapillary config", "\n", "with", "open", "(", "config_fn", ")", "as", "config_file", ":", "\n", "        ", "config", "=", "json", ".", "load", "(", "config_file", ")", "\n", "", "config_labels", "=", "config", "[", "'labels'", "]", "\n", "\n", "# calculate label color mapping", "\n", "colormap", "=", "[", "]", "\n", "id2name", "=", "{", "}", "\n", "for", "i", "in", "range", "(", "0", ",", "len", "(", "config_labels", ")", ")", ":", "\n", "        ", "colormap", "=", "colormap", "+", "config_labels", "[", "i", "]", "[", "'color'", "]", "\n", "id2name", "[", "i", "]", "=", "config_labels", "[", "i", "]", "[", "'readable'", "]", "\n", "", "color_mapping", "=", "colormap", "\n", "return", "id2name", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.camvid.CAMVID.__init__": [[163, 223], ["camvid.make_dataset", "len", "camvid.CAMVID.build_epoch", "os.path.isfile", "copy.deepcopy", "datasets.class_centroids_all", "open", "json.load", "int", "open", "json.dump"], "methods", ["home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.bdd100k.make_dataset", "home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.uniform.build_epoch", "home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.uniform.class_centroids_all"], ["    ", "def", "__init__", "(", "self", ",", "quality", ",", "mode", ",", "maxSkip", "=", "0", ",", "joint_transform_list", "=", "None", ",", "\n", "transform", "=", "None", ",", "target_transform", "=", "None", ",", "dump_images", "=", "False", ",", "\n", "class_uniform_pct", "=", "0", ",", "class_uniform_tile", "=", "0", ",", "test", "=", "False", ",", "\n", "cv_split", "=", "None", ",", "scf", "=", "None", ",", "hardnm", "=", "0", ")", ":", "\n", "\n", "        ", "self", ".", "quality", "=", "quality", "\n", "self", ".", "mode", "=", "mode", "\n", "self", ".", "maxSkip", "=", "maxSkip", "\n", "self", ".", "joint_transform_list", "=", "joint_transform_list", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "target_transform", "=", "target_transform", "\n", "self", ".", "dump_images", "=", "dump_images", "\n", "self", ".", "class_uniform_pct", "=", "class_uniform_pct", "\n", "self", ".", "class_uniform_tile", "=", "class_uniform_tile", "\n", "self", ".", "scf", "=", "scf", "\n", "self", ".", "hardnm", "=", "hardnm", "\n", "self", ".", "cv_split", "=", "cv_split", "\n", "self", ".", "centroids", "=", "[", "]", "\n", "\n", "self", ".", "imgs", ",", "self", ".", "aug_imgs", "=", "make_dataset", "(", "quality", ",", "mode", ",", "self", ".", "maxSkip", ",", "cv_split", "=", "self", ".", "cv_split", ",", "hardnm", "=", "self", ".", "hardnm", ")", "\n", "assert", "len", "(", "self", ".", "imgs", ")", ",", "'Found 0 images, please check the data set'", "\n", "\n", "# Centroids for GT data", "\n", "if", "self", ".", "class_uniform_pct", ">", "0", ":", "\n", "            ", "json_fn", "=", "'camvid_tile{}_cv{}_{}.json'", ".", "format", "(", "self", ".", "class_uniform_tile", ",", "self", ".", "cv_split", ",", "self", ".", "mode", ")", "\n", "\n", "if", "os", ".", "path", ".", "isfile", "(", "json_fn", ")", ":", "\n", "                ", "with", "open", "(", "json_fn", ",", "'r'", ")", "as", "json_data", ":", "\n", "                    ", "centroids", "=", "json", ".", "load", "(", "json_data", ")", "\n", "", "self", ".", "centroids", "=", "{", "int", "(", "idx", ")", ":", "centroids", "[", "idx", "]", "for", "idx", "in", "centroids", "}", "\n", "", "else", ":", "\n", "                ", "self", ".", "centroids", "=", "uniform", ".", "class_centroids_all", "(", "\n", "self", ".", "imgs", ",", "\n", "num_classes", ",", "\n", "id2trainid", "=", "None", ",", "\n", "tile_size", "=", "class_uniform_tile", ")", "\n", "with", "open", "(", "json_fn", ",", "'w'", ")", "as", "outfile", ":", "\n", "                    ", "json", ".", "dump", "(", "self", ".", "centroids", ",", "outfile", ",", "indent", "=", "4", ")", "\n", "\n", "", "", "self", ".", "fine_centroids", "=", "copy", ".", "deepcopy", "(", "self", ".", "centroids", ")", "\n", "\n", "# if self.maxSkip > 0:", "\n", "#     json_fn = 'camvid_tile{}_cv{}_{}_skip{}.json'.format(self.class_uniform_tile, self.cv_split, self.mode, self.maxSkip)", "\n", "#     if os.path.isfile(json_fn):", "\n", "#         with open(json_fn, 'r') as json_data:", "\n", "#             centroids = json.load(json_data)", "\n", "#         self.aug_centroids = {int(idx): centroids[idx] for idx in centroids}", "\n", "#     else:", "\n", "#         self.aug_centroids = uniform.class_centroids_all(", "\n", "#                 self.aug_imgs,", "\n", "#                 num_classes,", "\n", "#                 id2trainid=None,", "\n", "#                 tile_size=class_uniform_tile)", "\n", "#         with open(json_fn, 'w') as outfile:", "\n", "#             json.dump(self.aug_centroids, outfile, indent=4)", "\n", "\n", "#     for class_id in range(num_classes):", "\n", "#         self.centroids[class_id].extend(self.aug_centroids[class_id])", "\n", "\n", "", "self", ".", "build_epoch", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.camvid.CAMVID.build_epoch": [[224, 239], ["datasets.build_epoch", "datasets.build_epoch"], "methods", ["home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.uniform.build_epoch", "home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.uniform.build_epoch"], ["", "def", "build_epoch", "(", "self", ",", "cut", "=", "False", ")", ":", "\n", "\n", "        ", "if", "self", ".", "class_uniform_pct", ">", "0", ":", "\n", "            ", "if", "cut", ":", "\n", "                ", "self", ".", "imgs_uniform", "=", "uniform", ".", "build_epoch", "(", "self", ".", "imgs", ",", "\n", "self", ".", "fine_centroids", ",", "\n", "num_classes", ",", "\n", "cfg", ".", "CLASS_UNIFORM_PCT", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "imgs_uniform", "=", "uniform", ".", "build_epoch", "(", "self", ".", "imgs", ",", "\n", "self", ".", "centroids", ",", "\n", "num_classes", ",", "\n", "cfg", ".", "CLASS_UNIFORM_PCT", ")", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "imgs_uniform", "=", "self", ".", "imgs", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.camvid.CAMVID.__getitem__": [[241, 280], ["len", "PIL.Image.open().convert", "PIL.Image.open", "os.path.splitext", "enumerate", "os.makedirs", "os.path.join", "os.path.join", "camvid.colorize_mask", "camvid.CAMVID.save", "colorize_mask.save", "camvid.CAMVID.transform", "camvid.CAMVID.target_transform", "os.path.basename", "numpy.array", "PIL.Image.open", "xform", "xform"], "methods", ["home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.bdd100k.colorize_mask"], ["", "", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "elem", "=", "self", ".", "imgs_uniform", "[", "index", "]", "\n", "centroid", "=", "None", "\n", "if", "len", "(", "elem", ")", "==", "4", ":", "\n", "            ", "img_path", ",", "mask_path", ",", "centroid", ",", "class_id", "=", "elem", "\n", "", "else", ":", "\n", "            ", "img_path", ",", "mask_path", "=", "elem", "\n", "\n", "", "img", ",", "mask", "=", "Image", ".", "open", "(", "img_path", ")", ".", "convert", "(", "'RGB'", ")", ",", "Image", ".", "open", "(", "mask_path", ")", "\n", "img_name", "=", "os", ".", "path", ".", "splitext", "(", "os", ".", "path", ".", "basename", "(", "img_path", ")", ")", "[", "0", "]", "\n", "\n", "# Image Transformations", "\n", "if", "self", ".", "joint_transform_list", "is", "not", "None", ":", "\n", "            ", "for", "idx", ",", "xform", "in", "enumerate", "(", "self", ".", "joint_transform_list", ")", ":", "\n", "                ", "if", "idx", "==", "0", "and", "centroid", "is", "not", "None", ":", "\n", "# HACK", "\n", "# We assume that the first transform is capable of taking", "\n", "# in a centroid", "\n", "                    ", "img", ",", "mask", "=", "xform", "(", "img", ",", "mask", ",", "centroid", ")", "\n", "", "else", ":", "\n", "                    ", "img", ",", "mask", "=", "xform", "(", "img", ",", "mask", ")", "\n", "\n", "# Debug", "\n", "", "", "", "if", "self", ".", "dump_images", "and", "centroid", "is", "not", "None", ":", "\n", "            ", "outdir", "=", "'./dump_imgs_{}'", ".", "format", "(", "self", ".", "mode", ")", "\n", "os", ".", "makedirs", "(", "outdir", ",", "exist_ok", "=", "True", ")", "\n", "dump_img_name", "=", "trainid_to_name", "[", "class_id", "]", "+", "'_'", "+", "img_name", "\n", "out_img_fn", "=", "os", ".", "path", ".", "join", "(", "outdir", ",", "dump_img_name", "+", "'.png'", ")", "\n", "out_msk_fn", "=", "os", ".", "path", ".", "join", "(", "outdir", ",", "dump_img_name", "+", "'_mask.png'", ")", "\n", "mask_img", "=", "colorize_mask", "(", "np", ".", "array", "(", "mask", ")", ")", "\n", "img", ".", "save", "(", "out_img_fn", ")", "\n", "mask_img", ".", "save", "(", "out_msk_fn", ")", "\n", "\n", "", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "", "if", "self", ".", "target_transform", "is", "not", "None", ":", "\n", "            ", "mask", "=", "self", ".", "target_transform", "(", "mask", ")", "\n", "\n", "", "return", "img", ",", "mask", ",", "img_name", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.camvid.CAMVID.__len__": [[281, 283], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "imgs_uniform", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.camvid.CAMVIDWithPos.__init__": [[287, 360], ["camvid.CAMVIDWithPos.pos_h[].byte().numpy", "camvid.CAMVIDWithPos.pos_w[].byte().numpy", "PIL.Image.fromarray", "PIL.Image.fromarray", "camvid.make_dataset", "len", "camvid.CAMVIDWithPos.build_epoch", "torch.arange().unsqueeze().unsqueeze().expand", "torch.arange().unsqueeze().unsqueeze().expand", "os.path.isfile", "copy.deepcopy", "camvid.CAMVIDWithPos.pos_h[].byte", "camvid.CAMVIDWithPos.pos_w[].byte", "datasets.class_centroids_all", "os.path.isfile", "range", "torch.arange().unsqueeze().unsqueeze", "torch.arange().unsqueeze().unsqueeze", "open", "json.load", "int", "open", "json.dump", "datasets.class_centroids_all", "camvid.CAMVIDWithPos.centroids[].extend", "open", "json.load", "int", "open", "json.dump", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange", "torch.arange"], "methods", ["home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.bdd100k.make_dataset", "home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.uniform.build_epoch", "home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.uniform.class_centroids_all", "home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.uniform.class_centroids_all"], ["    ", "def", "__init__", "(", "self", ",", "quality", ",", "mode", ",", "maxSkip", "=", "0", ",", "joint_transform_list", "=", "None", ",", "\n", "transform", "=", "None", ",", "target_transform", "=", "None", ",", "target_aux_transform", "=", "None", ",", "dump_images", "=", "False", ",", "\n", "class_uniform_pct", "=", "0", ",", "class_uniform_tile", "=", "0", ",", "test", "=", "False", ",", "\n", "cv_split", "=", "None", ",", "scf", "=", "None", ",", "hardnm", "=", "0", ",", "pos_rfactor", "=", "8", ")", ":", "\n", "\n", "        ", "self", ".", "quality", "=", "quality", "\n", "self", ".", "mode", "=", "mode", "\n", "self", ".", "maxSkip", "=", "maxSkip", "\n", "self", ".", "joint_transform_list", "=", "joint_transform_list", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "target_transform", "=", "target_transform", "\n", "self", ".", "target_aux_transform", "=", "target_aux_transform", "\n", "self", ".", "dump_images", "=", "dump_images", "\n", "self", ".", "class_uniform_pct", "=", "class_uniform_pct", "\n", "self", ".", "class_uniform_tile", "=", "class_uniform_tile", "\n", "self", ".", "scf", "=", "scf", "\n", "self", ".", "hardnm", "=", "hardnm", "\n", "self", ".", "cv_split", "=", "cv_split", "\n", "self", ".", "centroids", "=", "[", "]", "\n", "self", ".", "pos_rfactor", "=", "pos_rfactor", "\n", "\n", "# position information", "\n", "self", ".", "pos_h", "=", "torch", ".", "arange", "(", "0", ",", "1024", ")", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "2", ")", ".", "expand", "(", "-", "1", ",", "-", "1", ",", "2048", ")", "//", "8", "\n", "self", ".", "pos_w", "=", "torch", ".", "arange", "(", "0", ",", "2048", ")", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "1", ")", ".", "expand", "(", "-", "1", ",", "1024", ",", "-", "1", ")", "//", "16", "\n", "self", ".", "pos_h", "=", "self", ".", "pos_h", "[", "0", "]", ".", "byte", "(", ")", ".", "numpy", "(", ")", "\n", "self", ".", "pos_w", "=", "self", ".", "pos_w", "[", "0", "]", ".", "byte", "(", ")", ".", "numpy", "(", ")", "\n", "# pos index to image", "\n", "self", ".", "pos_h", "=", "Image", ".", "fromarray", "(", "self", ".", "pos_h", ",", "mode", "=", "\"L\"", ")", "\n", "self", ".", "pos_w", "=", "Image", ".", "fromarray", "(", "self", ".", "pos_w", ",", "mode", "=", "\"L\"", ")", "\n", "# position information", "\n", "\n", "\n", "self", ".", "imgs", ",", "self", ".", "aug_imgs", "=", "make_dataset", "(", "quality", ",", "mode", ",", "self", ".", "maxSkip", ",", "cv_split", "=", "self", ".", "cv_split", ",", "hardnm", "=", "self", ".", "hardnm", ")", "\n", "assert", "len", "(", "self", ".", "imgs", ")", ",", "'Found 0 images, please check the data set'", "\n", "\n", "# Centroids for GT data", "\n", "if", "self", ".", "class_uniform_pct", ">", "0", ":", "\n", "            ", "json_fn", "=", "'camvid_tile{}_cv{}_{}.json'", ".", "format", "(", "self", ".", "class_uniform_tile", ",", "self", ".", "cv_split", ",", "self", ".", "mode", ")", "\n", "\n", "if", "os", ".", "path", ".", "isfile", "(", "json_fn", ")", ":", "\n", "                ", "with", "open", "(", "json_fn", ",", "'r'", ")", "as", "json_data", ":", "\n", "                    ", "centroids", "=", "json", ".", "load", "(", "json_data", ")", "\n", "", "self", ".", "centroids", "=", "{", "int", "(", "idx", ")", ":", "centroids", "[", "idx", "]", "for", "idx", "in", "centroids", "}", "\n", "", "else", ":", "\n", "                ", "self", ".", "centroids", "=", "uniform", ".", "class_centroids_all", "(", "\n", "self", ".", "imgs", ",", "\n", "num_classes", ",", "\n", "id2trainid", "=", "None", ",", "\n", "tile_size", "=", "class_uniform_tile", ")", "\n", "with", "open", "(", "json_fn", ",", "'w'", ")", "as", "outfile", ":", "\n", "                    ", "json", ".", "dump", "(", "self", ".", "centroids", ",", "outfile", ",", "indent", "=", "4", ")", "\n", "\n", "", "", "self", ".", "fine_centroids", "=", "copy", ".", "deepcopy", "(", "self", ".", "centroids", ")", "\n", "\n", "if", "self", ".", "maxSkip", ">", "0", ":", "\n", "                ", "json_fn", "=", "'camvid_tile{}_cv{}_{}_skip{}.json'", ".", "format", "(", "self", ".", "class_uniform_tile", ",", "self", ".", "cv_split", ",", "self", ".", "mode", ",", "self", ".", "maxSkip", ")", "\n", "if", "os", ".", "path", ".", "isfile", "(", "json_fn", ")", ":", "\n", "                    ", "with", "open", "(", "json_fn", ",", "'r'", ")", "as", "json_data", ":", "\n", "                        ", "centroids", "=", "json", ".", "load", "(", "json_data", ")", "\n", "", "self", ".", "aug_centroids", "=", "{", "int", "(", "idx", ")", ":", "centroids", "[", "idx", "]", "for", "idx", "in", "centroids", "}", "\n", "", "else", ":", "\n", "                    ", "self", ".", "aug_centroids", "=", "uniform", ".", "class_centroids_all", "(", "\n", "self", ".", "aug_imgs", ",", "\n", "num_classes", ",", "\n", "id2trainid", "=", "None", ",", "\n", "tile_size", "=", "class_uniform_tile", ")", "\n", "with", "open", "(", "json_fn", ",", "'w'", ")", "as", "outfile", ":", "\n", "                        ", "json", ".", "dump", "(", "self", ".", "aug_centroids", ",", "outfile", ",", "indent", "=", "4", ")", "\n", "\n", "", "", "for", "class_id", "in", "range", "(", "num_classes", ")", ":", "\n", "                    ", "self", ".", "centroids", "[", "class_id", "]", ".", "extend", "(", "self", ".", "aug_centroids", "[", "class_id", "]", ")", "\n", "\n", "", "", "", "self", ".", "build_epoch", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.camvid.CAMVIDWithPos.build_epoch": [[361, 376], ["datasets.build_epoch", "datasets.build_epoch"], "methods", ["home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.uniform.build_epoch", "home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.uniform.build_epoch"], ["", "def", "build_epoch", "(", "self", ",", "cut", "=", "False", ")", ":", "\n", "\n", "        ", "if", "self", ".", "class_uniform_pct", ">", "0", ":", "\n", "            ", "if", "cut", ":", "\n", "                ", "self", ".", "imgs_uniform", "=", "uniform", ".", "build_epoch", "(", "self", ".", "imgs", ",", "\n", "self", ".", "fine_centroids", ",", "\n", "num_classes", ",", "\n", "cfg", ".", "CLASS_UNIFORM_PCT", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "imgs_uniform", "=", "uniform", ".", "build_epoch", "(", "self", ".", "imgs", ",", "\n", "self", ".", "centroids", ",", "\n", "num_classes", ",", "\n", "cfg", ".", "CLASS_UNIFORM_PCT", ")", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "imgs_uniform", "=", "self", ".", "imgs", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.camvid.CAMVIDWithPos.__getitem__": [[378, 431], ["torch.from_numpy", "torch.from_numpy", "len", "PIL.Image.open().convert", "PIL.Image.open", "os.path.splitext", "enumerate", "os.makedirs", "os.path.join", "os.path.join", "camvid.colorize_mask", "camvid.CAMVIDWithPos.save", "colorize_mask.save", "camvid.CAMVIDWithPos.transform", "camvid.CAMVIDWithPos.target_aux_transform", "torch.tensor", "camvid.CAMVIDWithPos.target_transform", "numpy.array", "numpy.array", "os.path.basename", "numpy.array", "PIL.Image.open", "xform", "xform"], "methods", ["home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.bdd100k.colorize_mask"], ["", "", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "elem", "=", "self", ".", "imgs_uniform", "[", "index", "]", "\n", "centroid", "=", "None", "\n", "if", "len", "(", "elem", ")", "==", "4", ":", "\n", "            ", "img_path", ",", "mask_path", ",", "centroid", ",", "class_id", "=", "elem", "\n", "", "else", ":", "\n", "            ", "img_path", ",", "mask_path", "=", "elem", "\n", "\n", "", "img", ",", "mask", "=", "Image", ".", "open", "(", "img_path", ")", ".", "convert", "(", "'RGB'", ")", ",", "Image", ".", "open", "(", "mask_path", ")", "\n", "img_name", "=", "os", ".", "path", ".", "splitext", "(", "os", ".", "path", ".", "basename", "(", "img_path", ")", ")", "[", "0", "]", "\n", "\n", "# position information", "\n", "pos_h", "=", "self", ".", "pos_h", "\n", "pos_w", "=", "self", ".", "pos_w", "\n", "# position information", "\n", "\n", "# Image Transformations", "\n", "if", "self", ".", "joint_transform_list", "is", "not", "None", ":", "\n", "            ", "for", "idx", ",", "xform", "in", "enumerate", "(", "self", ".", "joint_transform_list", ")", ":", "\n", "                ", "if", "idx", "==", "0", "and", "centroid", "is", "not", "None", ":", "\n", "# HACK", "\n", "# We assume that the first transform is capable of taking", "\n", "# in a centroid", "\n", "# img, mask = xform(img, mask, centroid)", "\n", "                    ", "img", ",", "mask", ",", "(", "pos_h", ",", "pos_w", ")", "=", "xform", "(", "img", ",", "mask", ",", "centroid", ",", "pos", "=", "(", "pos_h", ",", "pos_w", ")", ")", "\n", "", "else", ":", "\n", "# img, mask = xform(img, mask)", "\n", "                    ", "img", ",", "mask", ",", "(", "pos_h", ",", "pos_w", ")", "=", "xform", "(", "img", ",", "mask", ",", "pos", "=", "(", "pos_h", ",", "pos_w", ")", ")", "\n", "\n", "# Debug", "\n", "", "", "", "if", "self", ".", "dump_images", "and", "centroid", "is", "not", "None", ":", "\n", "            ", "outdir", "=", "'./dump_imgs_{}'", ".", "format", "(", "self", ".", "mode", ")", "\n", "os", ".", "makedirs", "(", "outdir", ",", "exist_ok", "=", "True", ")", "\n", "dump_img_name", "=", "trainid_to_name", "[", "class_id", "]", "+", "'_'", "+", "img_name", "\n", "out_img_fn", "=", "os", ".", "path", ".", "join", "(", "outdir", ",", "dump_img_name", "+", "'.png'", ")", "\n", "out_msk_fn", "=", "os", ".", "path", ".", "join", "(", "outdir", ",", "dump_img_name", "+", "'_mask.png'", ")", "\n", "mask_img", "=", "colorize_mask", "(", "np", ".", "array", "(", "mask", ")", ")", "\n", "img", ".", "save", "(", "out_img_fn", ")", "\n", "mask_img", ".", "save", "(", "out_msk_fn", ")", "\n", "\n", "", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "", "if", "self", ".", "target_aux_transform", "is", "not", "None", ":", "\n", "            ", "mask_aux", "=", "self", ".", "target_aux_transform", "(", "mask", ")", "\n", "", "else", ":", "\n", "            ", "mask_aux", "=", "torch", ".", "tensor", "(", "[", "0", "]", ")", "\n", "", "if", "self", ".", "target_transform", "is", "not", "None", ":", "\n", "            ", "mask", "=", "self", ".", "target_transform", "(", "mask", ")", "\n", "\n", "", "pos_h", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "pos_h", ",", "dtype", "=", "np", ".", "uint8", ")", ")", "# // self.pos_rfactor", "\n", "pos_w", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "pos_w", ",", "dtype", "=", "np", ".", "uint8", ")", ")", "# // self.pos_rfactor", "\n", "\n", "return", "img", ",", "mask", ",", "img_name", ",", "mask_aux", ",", "(", "pos_h", ",", "pos_w", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.camvid.CAMVIDWithPos.__len__": [[432, 434], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "imgs_uniform", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.camvid.colorize_mask": [[69, 74], ["PIL.Image.fromarray().convert", "Image.fromarray().convert.putpalette", "PIL.Image.fromarray", "mask.astype"], "function", ["None"], ["", "def", "colorize_mask", "(", "mask", ")", ":", "\n", "# mask: numpy array of the mask", "\n", "    ", "new_mask", "=", "Image", ".", "fromarray", "(", "mask", ".", "astype", "(", "np", ".", "uint8", ")", ")", ".", "convert", "(", "'P'", ")", "\n", "new_mask", ".", "putpalette", "(", "palette", ")", "\n", "return", "new_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.camvid.add_items": [[75, 109], ["os.listdir", "os.listdir.sort", "items.append", "os.path.join", "os.path.join", "it.split", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.isfile", "os.path.isfile", "aug_items.append", "os.path.isfile", "os.path.isfile", "aug_items.append", "int", "int", "int", "int", "int", "int"], "function", ["None"], ["", "def", "add_items", "(", "img_path", ",", "mask_path", ",", "aug_img_path", ",", "aug_mask_path", ",", "mode", ",", "maxSkip", ")", ":", "\n", "\n", "    ", "c_items", "=", "os", ".", "listdir", "(", "img_path", ")", "\n", "c_items", ".", "sort", "(", ")", "\n", "items", "=", "[", "]", "\n", "aug_items", "=", "[", "]", "\n", "\n", "for", "it", "in", "c_items", ":", "\n", "        ", "item", "=", "(", "os", ".", "path", ".", "join", "(", "img_path", ",", "it", ")", ",", "os", ".", "path", ".", "join", "(", "mask_path", ",", "it", ")", ")", "\n", "items", ".", "append", "(", "item", ")", "\n", "if", "mode", "!=", "'test'", "and", "maxSkip", ">", "0", ":", "\n", "            ", "seq_info", "=", "it", ".", "split", "(", "\"_\"", ")", "\n", "cur_seq_id", "=", "seq_info", "[", "-", "1", "]", "[", ":", "-", "4", "]", "\n", "\n", "if", "seq_info", "[", "0", "]", "==", "\"0001TP\"", ":", "\n", "                ", "prev_seq_id", "=", "\"%06d\"", "%", "(", "int", "(", "cur_seq_id", ")", "-", "maxSkip", ")", "\n", "next_seq_id", "=", "\"%06d\"", "%", "(", "int", "(", "cur_seq_id", ")", "+", "maxSkip", ")", "\n", "", "elif", "seq_info", "[", "0", "]", "==", "\"0006R0\"", ":", "\n", "                ", "prev_seq_id", "=", "\"f%05d\"", "%", "(", "int", "(", "cur_seq_id", "[", "1", ":", "]", ")", "-", "maxSkip", ")", "\n", "next_seq_id", "=", "\"f%05d\"", "%", "(", "int", "(", "cur_seq_id", "[", "1", ":", "]", ")", "+", "maxSkip", ")", "\n", "", "else", ":", "\n", "                ", "prev_seq_id", "=", "\"%05d\"", "%", "(", "int", "(", "cur_seq_id", ")", "-", "maxSkip", ")", "\n", "next_seq_id", "=", "\"%05d\"", "%", "(", "int", "(", "cur_seq_id", ")", "+", "maxSkip", ")", "\n", "\n", "", "prev_it", "=", "seq_info", "[", "0", "]", "+", "\"_\"", "+", "prev_seq_id", "+", "'.png'", "\n", "next_it", "=", "seq_info", "[", "0", "]", "+", "\"_\"", "+", "next_seq_id", "+", "'.png'", "\n", "\n", "prev_item", "=", "(", "os", ".", "path", ".", "join", "(", "aug_img_path", ",", "prev_it", ")", ",", "os", ".", "path", ".", "join", "(", "aug_mask_path", ",", "prev_it", ")", ")", "\n", "next_item", "=", "(", "os", ".", "path", ".", "join", "(", "aug_img_path", ",", "next_it", ")", ",", "os", ".", "path", ".", "join", "(", "aug_mask_path", ",", "next_it", ")", ")", "\n", "if", "os", ".", "path", ".", "isfile", "(", "prev_item", "[", "0", "]", ")", "and", "os", ".", "path", ".", "isfile", "(", "prev_item", "[", "1", "]", ")", ":", "\n", "                ", "aug_items", ".", "append", "(", "prev_item", ")", "\n", "", "if", "os", ".", "path", ".", "isfile", "(", "next_item", "[", "0", "]", ")", "and", "os", ".", "path", ".", "isfile", "(", "next_item", "[", "1", "]", ")", ":", "\n", "                ", "aug_items", ".", "append", "(", "next_item", ")", "\n", "", "", "", "return", "items", ",", "aug_items", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.camvid.make_dataset": [[110, 160], ["os.path.join", "os.path.join", "os.path.join", "os.path.join", "camvid.add_items", "logging.info", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "camvid.add_items", "logging.info", "logging.info", "os.path.join", "os.path.join", "camvid.add_items", "logging.info", "len", "len", "len", "len", "logging.info", "sys.exit"], "function", ["home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.bdd100k.add_items", "home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.bdd100k.add_items", "home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.bdd100k.add_items"], ["", "def", "make_dataset", "(", "quality", ",", "mode", ",", "maxSkip", "=", "0", ",", "cv_split", "=", "0", ",", "hardnm", "=", "0", ")", ":", "\n", "\n", "    ", "items", "=", "[", "]", "\n", "aug_items", "=", "[", "]", "\n", "assert", "quality", "==", "'semantic'", "\n", "assert", "mode", "in", "[", "'train'", ",", "'val'", ",", "'trainval'", ",", "'test'", "]", "\n", "\n", "# img_dir_name = \"SegNet/CamVid\"", "\n", "original_img_dir", "=", "\"\"", "\n", "augmented_img_dir", "=", "\"camvid_aug3/CamVid\"", "\n", "\n", "img_path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "original_img_dir", ",", "'train'", ")", "\n", "mask_path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "original_img_dir", ",", "'trainannot'", ")", "\n", "aug_img_path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "augmented_img_dir", ",", "'train'", ")", "\n", "aug_mask_path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "augmented_img_dir", ",", "'trainannot'", ")", "\n", "\n", "train_items", ",", "train_aug_items", "=", "add_items", "(", "img_path", ",", "mask_path", ",", "aug_img_path", ",", "aug_mask_path", ",", "mode", ",", "maxSkip", ")", "\n", "logging", ".", "info", "(", "'Camvid has a total of {} train images'", ".", "format", "(", "len", "(", "train_items", ")", ")", ")", "\n", "\n", "img_path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "original_img_dir", ",", "'val'", ")", "\n", "mask_path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "original_img_dir", ",", "'valannot'", ")", "\n", "aug_img_path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "augmented_img_dir", ",", "'val'", ")", "\n", "aug_mask_path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "augmented_img_dir", ",", "'valannot'", ")", "\n", "\n", "val_items", ",", "val_aug_items", "=", "add_items", "(", "img_path", ",", "mask_path", ",", "aug_img_path", ",", "aug_mask_path", ",", "mode", ",", "maxSkip", ")", "\n", "logging", ".", "info", "(", "'Camvid has a total of {} validation images'", ".", "format", "(", "len", "(", "val_items", ")", ")", ")", "\n", "\n", "if", "mode", "==", "'test'", ":", "\n", "        ", "img_path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "original_img_dir", ",", "'test'", ")", "\n", "mask_path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "original_img_dir", ",", "'testannot'", ")", "\n", "test_items", ",", "test_aug_items", "=", "add_items", "(", "img_path", ",", "mask_path", ",", "aug_img_path", ",", "aug_mask_path", ",", "mode", ",", "maxSkip", ")", "\n", "logging", ".", "info", "(", "'Camvid has a total of {} test images'", ".", "format", "(", "len", "(", "test_items", ")", ")", ")", "\n", "\n", "", "if", "mode", "==", "'train'", ":", "\n", "        ", "items", "=", "train_items", "\n", "", "elif", "mode", "==", "'val'", ":", "\n", "        ", "items", "=", "val_items", "\n", "", "elif", "mode", "==", "'trainval'", ":", "\n", "        ", "items", "=", "train_items", "+", "val_items", "\n", "aug_items", "=", "[", "]", "#train_aug_items + val_aug_items", "\n", "", "elif", "mode", "==", "'test'", ":", "\n", "        ", "items", "=", "test_items", "\n", "aug_items", "=", "[", "]", "\n", "", "else", ":", "\n", "        ", "logging", ".", "info", "(", "'Unknown mode {}'", ".", "format", "(", "mode", ")", ")", "\n", "sys", ".", "exit", "(", ")", "\n", "\n", "", "logging", ".", "info", "(", "'Camvid-{}: {} images'", ".", "format", "(", "mode", ",", "len", "(", "items", ")", ")", ")", "\n", "\n", "return", "items", ",", "aug_items", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.sampler.DistributedSampler.__init__": [[61, 77], ["torch.distributed.get_world_size", "torch.distributed.get_rank", "int", "int", "math.ceil", "math.floor", "len", "len"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "dataset", ",", "pad", "=", "False", ",", "consecutive_sample", "=", "False", ",", "permutation", "=", "False", ",", "num_replicas", "=", "None", ",", "rank", "=", "None", ")", ":", "\n", "        ", "if", "num_replicas", "is", "None", ":", "\n", "            ", "num_replicas", "=", "get_world_size", "(", ")", "\n", "", "if", "rank", "is", "None", ":", "\n", "            ", "rank", "=", "get_rank", "(", ")", "\n", "", "self", ".", "dataset", "=", "dataset", "\n", "self", ".", "num_replicas", "=", "num_replicas", "\n", "self", ".", "rank", "=", "rank", "\n", "self", ".", "epoch", "=", "0", "\n", "self", ".", "consecutive_sample", "=", "consecutive_sample", "\n", "self", ".", "permutation", "=", "permutation", "\n", "if", "pad", ":", "\n", "            ", "self", ".", "num_samples", "=", "int", "(", "math", ".", "ceil", "(", "len", "(", "self", ".", "dataset", ")", "*", "1.0", "/", "self", ".", "num_replicas", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "num_samples", "=", "int", "(", "math", ".", "floor", "(", "len", "(", "self", ".", "dataset", ")", "*", "1.0", "/", "self", ".", "num_replicas", ")", ")", "\n", "", "self", ".", "total_size", "=", "self", ".", "num_samples", "*", "self", ".", "num_replicas", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.sampler.DistributedSampler.__iter__": [[78, 101], ["torch.Generator", "torch.Generator.manual_seed", "iter", "list", "list", "len", "len", "torch.randperm", "len", "range", "len", "len"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "# deterministically shuffle based on epoch", "\n", "        ", "g", "=", "torch", ".", "Generator", "(", ")", "\n", "g", ".", "manual_seed", "(", "self", ".", "epoch", ")", "\n", "\n", "if", "self", ".", "permutation", ":", "\n", "            ", "indices", "=", "list", "(", "torch", ".", "randperm", "(", "len", "(", "self", ".", "dataset", ")", ",", "generator", "=", "g", ")", ")", "\n", "", "else", ":", "\n", "            ", "indices", "=", "list", "(", "[", "x", "for", "x", "in", "range", "(", "len", "(", "self", ".", "dataset", ")", ")", "]", ")", "\n", "\n", "# add extra samples to make it evenly divisible", "\n", "", "if", "self", ".", "total_size", ">", "len", "(", "indices", ")", ":", "\n", "            ", "indices", "+=", "indices", "[", ":", "(", "self", ".", "total_size", "-", "len", "(", "indices", ")", ")", "]", "\n", "\n", "# subsample", "\n", "", "if", "self", ".", "consecutive_sample", ":", "\n", "            ", "offset", "=", "self", ".", "num_samples", "*", "self", ".", "rank", "\n", "indices", "=", "indices", "[", "offset", ":", "offset", "+", "self", ".", "num_samples", "]", "\n", "", "else", ":", "\n", "            ", "indices", "=", "indices", "[", "self", ".", "rank", ":", "self", ".", "total_size", ":", "self", ".", "num_replicas", "]", "\n", "", "assert", "len", "(", "indices", ")", "==", "self", ".", "num_samples", "\n", "\n", "return", "iter", "(", "indices", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.sampler.DistributedSampler.__len__": [[102, 104], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "num_samples", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.sampler.DistributedSampler.set_epoch": [[105, 107], ["None"], "methods", ["None"], ["", "def", "set_epoch", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "self", ".", "epoch", "=", "epoch", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.sampler.DistributedSampler.set_num_samples": [[108, 111], ["int", "math.ceil", "len"], "methods", ["None"], ["", "def", "set_num_samples", "(", "self", ")", ":", "\n", "        ", "self", ".", "num_samples", "=", "int", "(", "math", ".", "ceil", "(", "len", "(", "self", ".", "dataset", ")", "*", "1.0", "/", "self", ".", "num_replicas", ")", ")", "\n", "self", ".", "total_size", "=", "self", ".", "num_samples", "*", "self", ".", "num_replicas", "", "", "", ""]], "home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.kitti.KITTI.__init__": [[114, 170], ["kitti.make_dataset", "len", "kitti.KITTI.build_epoch", "os.path.isfile", "open", "json.load", "int", "kitti_uniform.class_centroids_all", "datasets.class_centroids_all", "datasets.class_centroids_all", "open", "json.dump"], "methods", ["home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.bdd100k.make_dataset", "home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.uniform.build_epoch", "home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.uniform.class_centroids_all", "home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.uniform.class_centroids_all", "home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.uniform.class_centroids_all"], ["    ", "def", "__init__", "(", "self", ",", "quality", ",", "mode", ",", "maxSkip", "=", "0", ",", "joint_transform_list", "=", "None", ",", "\n", "transform", "=", "None", ",", "target_transform", "=", "None", ",", "dump_images", "=", "False", ",", "\n", "class_uniform_pct", "=", "0", ",", "class_uniform_tile", "=", "0", ",", "test", "=", "False", ",", "\n", "cv_split", "=", "None", ",", "scf", "=", "None", ",", "hardnm", "=", "0", ")", ":", "\n", "\n", "        ", "self", ".", "quality", "=", "quality", "\n", "self", ".", "mode", "=", "mode", "\n", "self", ".", "maxSkip", "=", "maxSkip", "\n", "self", ".", "joint_transform_list", "=", "joint_transform_list", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "target_transform", "=", "target_transform", "\n", "self", ".", "dump_images", "=", "dump_images", "\n", "self", ".", "class_uniform_pct", "=", "class_uniform_pct", "\n", "self", ".", "class_uniform_tile", "=", "class_uniform_tile", "\n", "self", ".", "scf", "=", "scf", "\n", "self", ".", "hardnm", "=", "hardnm", "\n", "\n", "if", "cv_split", ":", "\n", "            ", "self", ".", "cv_split", "=", "cv_split", "\n", "assert", "cv_split", "<", "cfg", ".", "DATASET", ".", "CV_SPLITS", ",", "'expected cv_split {} to be < CV_SPLITS {}'", ".", "format", "(", "\n", "cv_split", ",", "cfg", ".", "DATASET", ".", "CV_SPLITS", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "cv_split", "=", "0", "\n", "\n", "", "self", ".", "imgs", ",", "_", "=", "make_dataset", "(", "quality", ",", "mode", ",", "self", ".", "maxSkip", ",", "cv_split", "=", "self", ".", "cv_split", ",", "hardnm", "=", "self", ".", "hardnm", ")", "\n", "assert", "len", "(", "self", ".", "imgs", ")", ",", "'Found 0 images, please check the data set'", "\n", "# self.cal_shape(self.imgs)", "\n", "\n", "# Centroids for GT data", "\n", "if", "self", ".", "class_uniform_pct", ">", "0", ":", "\n", "            ", "if", "self", ".", "scf", ":", "\n", "                ", "json_fn", "=", "'kitti_tile{}_cv{}_scf.json'", ".", "format", "(", "self", ".", "class_uniform_tile", ",", "self", ".", "cv_split", ")", "\n", "", "else", ":", "\n", "                ", "json_fn", "=", "'kitti_tile{}_cv{}_{}_hardnm{}.json'", ".", "format", "(", "self", ".", "class_uniform_tile", ",", "self", ".", "cv_split", ",", "self", ".", "mode", ",", "self", ".", "hardnm", ")", "\n", "", "if", "os", ".", "path", ".", "isfile", "(", "json_fn", ")", ":", "\n", "                ", "with", "open", "(", "json_fn", ",", "'r'", ")", "as", "json_data", ":", "\n", "                    ", "centroids", "=", "json", ".", "load", "(", "json_data", ")", "\n", "", "self", ".", "centroids", "=", "{", "int", "(", "idx", ")", ":", "centroids", "[", "idx", "]", "for", "idx", "in", "centroids", "}", "\n", "", "else", ":", "\n", "                ", "if", "self", ".", "scf", ":", "\n", "                    ", "self", ".", "centroids", "=", "kitti_uniform", ".", "class_centroids_all", "(", "\n", "self", ".", "imgs", ",", "\n", "num_classes", ",", "\n", "id2trainid", "=", "id_to_trainid", ",", "\n", "tile_size", "=", "class_uniform_tile", ")", "\n", "", "else", ":", "\n", "                    ", "self", ".", "centroids", "=", "uniform", ".", "class_centroids_all", "(", "\n", "self", ".", "imgs", ",", "\n", "num_classes", ",", "\n", "id2trainid", "=", "id_to_trainid", ",", "\n", "tile_size", "=", "class_uniform_tile", ")", "\n", "", "with", "open", "(", "json_fn", ",", "'w'", ")", "as", "outfile", ":", "\n", "                    ", "json", ".", "dump", "(", "self", ".", "centroids", ",", "outfile", ",", "indent", "=", "4", ")", "\n", "\n", "", "", "", "self", ".", "build_epoch", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.kitti.KITTI.cal_shape": [[172, 178], ["PIL.Image.open().convert", "print", "PIL.Image.open"], "methods", ["None"], ["", "def", "cal_shape", "(", "self", ",", "imgs", ")", ":", "\n", "\n", "        ", "for", "i", "in", "imgs", ":", "\n", "            ", "img_path", ",", "mask_path", "=", "i", "\n", "img", "=", "Image", ".", "open", "(", "img_path", ")", ".", "convert", "(", "'RGB'", ")", "\n", "print", "(", "img", ".", "size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.kitti.KITTI.build_epoch": [[179, 187], ["datasets.build_epoch", "datasets.build_epoch"], "methods", ["home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.uniform.build_epoch", "home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.uniform.build_epoch"], ["", "", "def", "build_epoch", "(", "self", ",", "cut", "=", "False", ")", ":", "\n", "        ", "if", "self", ".", "class_uniform_pct", ">", "0", ":", "\n", "            ", "self", ".", "imgs_uniform", "=", "uniform", ".", "build_epoch", "(", "self", ".", "imgs", ",", "\n", "self", ".", "centroids", ",", "\n", "num_classes", ",", "\n", "cfg", ".", "CLASS_UNIFORM_PCT", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "imgs_uniform", "=", "self", ".", "imgs", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.kitti.KITTI.__getitem__": [[188, 248], ["numpy.array", "mask.resize.resize.copy", "id_to_trainid.items", "PIL.Image.fromarray", "len", "PIL.Image.open().convert", "PIL.Image.open", "os.path.splitext", "mask.resize.copy.astype", "enumerate", "os.makedirs", "os.path.join", "os.path.join", "kitti.colorize_mask", "img.resize.resize.save", "colorize_mask.save", "kitti.KITTI.transform", "kitti.KITTI.target_transform", "os.path.basename", "img.resize.resize.resize", "mask.resize.resize.resize", "img.resize.resize.resize", "mask.resize.resize.resize", "logging.info", "sys.exit", "numpy.array", "PIL.Image.open", "xform", "xform"], "methods", ["home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.bdd100k.colorize_mask"], ["", "", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "elem", "=", "self", ".", "imgs_uniform", "[", "index", "]", "\n", "centroid", "=", "None", "\n", "if", "len", "(", "elem", ")", "==", "4", ":", "\n", "            ", "img_path", ",", "mask_path", ",", "centroid", ",", "class_id", "=", "elem", "\n", "", "else", ":", "\n", "            ", "img_path", ",", "mask_path", "=", "elem", "\n", "\n", "", "img", ",", "mask", "=", "Image", ".", "open", "(", "img_path", ")", ".", "convert", "(", "'RGB'", ")", ",", "Image", ".", "open", "(", "mask_path", ")", "\n", "img_name", "=", "os", ".", "path", ".", "splitext", "(", "os", ".", "path", ".", "basename", "(", "img_path", ")", ")", "[", "0", "]", "\n", "\n", "# kitti scale correction factor", "\n", "if", "self", ".", "mode", "==", "'train'", "or", "self", ".", "mode", "==", "'trainval'", ":", "\n", "            ", "if", "self", ".", "scf", ":", "\n", "                ", "width", ",", "height", "=", "img", ".", "size", "\n", "img", "=", "img", ".", "resize", "(", "(", "width", "*", "2", ",", "height", "*", "2", ")", ",", "Image", ".", "BICUBIC", ")", "\n", "mask", "=", "mask", ".", "resize", "(", "(", "width", "*", "2", ",", "height", "*", "2", ")", ",", "Image", ".", "NEAREST", ")", "\n", "", "", "elif", "self", ".", "mode", "==", "'val'", ":", "\n", "            ", "width", ",", "height", "=", "1242", ",", "376", "\n", "img", "=", "img", ".", "resize", "(", "(", "width", ",", "height", ")", ",", "Image", ".", "BICUBIC", ")", "\n", "mask", "=", "mask", ".", "resize", "(", "(", "width", ",", "height", ")", ",", "Image", ".", "NEAREST", ")", "\n", "", "else", ":", "\n", "            ", "logging", ".", "info", "(", "'Unknown mode {}'", ".", "format", "(", "mode", ")", ")", "\n", "sys", ".", "exit", "(", ")", "\n", "\n", "", "mask", "=", "np", ".", "array", "(", "mask", ")", "\n", "mask_copy", "=", "mask", ".", "copy", "(", ")", "\n", "\n", "for", "k", ",", "v", "in", "id_to_trainid", ".", "items", "(", ")", ":", "\n", "            ", "mask_copy", "[", "mask", "==", "k", "]", "=", "v", "\n", "", "mask", "=", "Image", ".", "fromarray", "(", "mask_copy", ".", "astype", "(", "np", ".", "uint8", ")", ")", "\n", "\n", "# Image Transformations", "\n", "if", "self", ".", "joint_transform_list", "is", "not", "None", ":", "\n", "            ", "for", "idx", ",", "xform", "in", "enumerate", "(", "self", ".", "joint_transform_list", ")", ":", "\n", "                ", "if", "idx", "==", "0", "and", "centroid", "is", "not", "None", ":", "\n", "# HACK", "\n", "# We assume that the first transform is capable of taking", "\n", "# in a centroid", "\n", "                    ", "img", ",", "mask", "=", "xform", "(", "img", ",", "mask", ",", "centroid", ")", "\n", "", "else", ":", "\n", "                    ", "img", ",", "mask", "=", "xform", "(", "img", ",", "mask", ")", "\n", "\n", "# Debug", "\n", "", "", "", "if", "self", ".", "dump_images", "and", "centroid", "is", "not", "None", ":", "\n", "            ", "outdir", "=", "'./dump_imgs_{}'", ".", "format", "(", "self", ".", "mode", ")", "\n", "os", ".", "makedirs", "(", "outdir", ",", "exist_ok", "=", "True", ")", "\n", "dump_img_name", "=", "trainid_to_name", "[", "class_id", "]", "+", "'_'", "+", "img_name", "\n", "out_img_fn", "=", "os", ".", "path", ".", "join", "(", "outdir", ",", "dump_img_name", "+", "'.png'", ")", "\n", "out_msk_fn", "=", "os", ".", "path", ".", "join", "(", "outdir", ",", "dump_img_name", "+", "'_mask.png'", ")", "\n", "mask_img", "=", "colorize_mask", "(", "np", ".", "array", "(", "mask", ")", ")", "\n", "img", ".", "save", "(", "out_img_fn", ")", "\n", "mask_img", ".", "save", "(", "out_msk_fn", ")", "\n", "\n", "", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "", "if", "self", ".", "target_transform", "is", "not", "None", ":", "\n", "            ", "mask", "=", "self", ".", "target_transform", "(", "mask", ")", "\n", "\n", "", "return", "img", ",", "mask", ",", "img_name", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.kitti.KITTI.__len__": [[249, 251], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "imgs_uniform", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.kitti.colorize_mask": [[33, 38], ["PIL.Image.fromarray().convert", "Image.fromarray().convert.putpalette", "PIL.Image.fromarray", "mask.astype"], "function", ["None"], ["", "def", "colorize_mask", "(", "mask", ")", ":", "\n", "# mask: numpy array of the mask", "\n", "    ", "new_mask", "=", "Image", ".", "fromarray", "(", "mask", ".", "astype", "(", "np", ".", "uint8", ")", ")", ".", "convert", "(", "'P'", ")", "\n", "new_mask", ".", "putpalette", "(", "palette", ")", "\n", "return", "new_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.kitti.get_train_val": [[39, 72], ["range", "range", "val_set.append", "train_set.append", "range", "logging.info", "sys.exit", "val_set.append", "train_set.append", "val_set.append", "train_set.append"], "function", ["None"], ["", "def", "get_train_val", "(", "cv_split", ",", "all_items", ")", ":", "\n", "\n", "# 90/10 train/val split, three random splits", "\n", "    ", "val_0", "=", "[", "1", ",", "5", ",", "11", ",", "29", ",", "35", ",", "49", ",", "57", ",", "68", ",", "72", ",", "82", ",", "93", ",", "115", ",", "119", ",", "130", ",", "145", ",", "154", ",", "156", ",", "167", ",", "169", ",", "189", ",", "198", "]", "\n", "val_1", "=", "[", "0", ",", "12", ",", "24", ",", "31", ",", "42", ",", "50", ",", "63", ",", "71", ",", "84", ",", "96", ",", "101", ",", "112", ",", "121", ",", "133", ",", "141", ",", "155", ",", "164", ",", "171", ",", "187", ",", "191", ",", "197", "]", "\n", "val_2", "=", "[", "3", ",", "6", ",", "13", ",", "21", ",", "41", ",", "54", ",", "61", ",", "73", ",", "88", ",", "91", ",", "110", ",", "121", ",", "126", ",", "131", ",", "142", ",", "149", ",", "150", ",", "163", ",", "173", ",", "183", ",", "199", "]", "\n", "\n", "train_set", "=", "[", "]", "\n", "val_set", "=", "[", "]", "\n", "\n", "if", "cv_split", "==", "0", ":", "\n", "        ", "for", "i", "in", "range", "(", "200", ")", ":", "\n", "            ", "if", "i", "in", "val_0", ":", "\n", "                ", "val_set", ".", "append", "(", "all_items", "[", "i", "]", ")", "\n", "", "else", ":", "\n", "                ", "train_set", ".", "append", "(", "all_items", "[", "i", "]", ")", "\n", "", "", "", "elif", "cv_split", "==", "1", ":", "\n", "        ", "for", "i", "in", "range", "(", "200", ")", ":", "\n", "            ", "if", "i", "in", "val_1", ":", "\n", "                ", "val_set", ".", "append", "(", "all_items", "[", "i", "]", ")", "\n", "", "else", ":", "\n", "                ", "train_set", ".", "append", "(", "all_items", "[", "i", "]", ")", "\n", "", "", "", "elif", "cv_split", "==", "2", ":", "\n", "        ", "for", "i", "in", "range", "(", "200", ")", ":", "\n", "            ", "if", "i", "in", "val_2", ":", "\n", "                ", "val_set", ".", "append", "(", "all_items", "[", "i", "]", ")", "\n", "", "else", ":", "\n", "                ", "train_set", ".", "append", "(", "all_items", "[", "i", "]", ")", "\n", "", "", "", "else", ":", "\n", "        ", "logging", ".", "info", "(", "'Unknown cv_split {}'", ".", "format", "(", "cv_split", ")", ")", "\n", "sys", ".", "exit", "(", ")", "\n", "\n", "", "return", "train_set", ",", "val_set", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.kitti.make_dataset": [[73, 111], ["os.path.join", "os.path.join", "os.listdir", "os.listdir.sort", "logging.info", "kitti.get_train_val", "logging.info", "all_items.append", "os.path.join", "os.path.join", "len", "len", "logging.info", "sys.exit"], "function", ["home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.kitti.get_train_val"], ["", "def", "make_dataset", "(", "quality", ",", "mode", ",", "maxSkip", "=", "0", ",", "cv_split", "=", "0", ",", "hardnm", "=", "0", ")", ":", "\n", "\n", "    ", "items", "=", "[", "]", "\n", "all_items", "=", "[", "]", "\n", "aug_items", "=", "[", "]", "\n", "\n", "assert", "quality", "==", "'semantic'", "\n", "assert", "mode", "in", "[", "'train'", ",", "'val'", ",", "'trainval'", "]", "\n", "# note that train and val are randomly determined, no official split", "\n", "\n", "img_dir_name", "=", "\"training\"", "\n", "img_path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "img_dir_name", ",", "'image_2'", ")", "\n", "mask_path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "img_dir_name", ",", "'semantic'", ")", "\n", "\n", "c_items", "=", "os", ".", "listdir", "(", "img_path", ")", "\n", "c_items", ".", "sort", "(", ")", "\n", "\n", "for", "it", "in", "c_items", ":", "\n", "        ", "item", "=", "(", "os", ".", "path", ".", "join", "(", "img_path", ",", "it", ")", ",", "os", ".", "path", ".", "join", "(", "mask_path", ",", "it", ")", ")", "\n", "all_items", ".", "append", "(", "item", ")", "\n", "", "logging", ".", "info", "(", "'KITTI has a total of {} images'", ".", "format", "(", "len", "(", "all_items", ")", ")", ")", "\n", "\n", "# split into train/val ", "\n", "train_set", ",", "val_set", "=", "get_train_val", "(", "cv_split", ",", "all_items", ")", "\n", "\n", "if", "mode", "==", "'train'", ":", "\n", "        ", "items", "=", "train_set", "\n", "", "elif", "mode", "==", "'val'", ":", "\n", "        ", "items", "=", "val_set", "\n", "", "elif", "mode", "==", "'trainval'", ":", "\n", "        ", "items", "=", "train_set", "+", "val_set", "\n", "", "else", ":", "\n", "        ", "logging", ".", "info", "(", "'Unknown mode {}'", ".", "format", "(", "mode", ")", ")", "\n", "sys", ".", "exit", "(", ")", "\n", "\n", "", "logging", ".", "info", "(", "'KITTI-{}: {} images'", ".", "format", "(", "mode", ",", "len", "(", "items", ")", ")", ")", "\n", "\n", "return", "items", ",", "aug_items", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.cityscapes_labels.assureSingleInstanceName": [[168, 185], ["name.endswith", "len"], "function", ["None"], ["", "", "def", "assureSingleInstanceName", "(", "name", ")", ":", "\n", "# if the name is known, it is not a group", "\n", "    ", "if", "name", "in", "name2label", ":", "\n", "        ", "return", "name", "\n", "# test if the name actually denotes a group", "\n", "", "if", "not", "name", ".", "endswith", "(", "\"group\"", ")", ":", "\n", "        ", "return", "None", "\n", "# remove group", "\n", "", "name", "=", "name", "[", ":", "-", "len", "(", "\"group\"", ")", "]", "\n", "# test if the new name exists", "\n", "if", "not", "name", "in", "name2label", ":", "\n", "        ", "return", "None", "\n", "# test if the new name denotes a label that actually has instances", "\n", "", "if", "not", "name2label", "[", "name", "]", ".", "hasInstances", ":", "\n", "        ", "return", "None", "\n", "# all good then", "\n", "", "return", "name", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.bdd100k.BDD100K.__init__": [[184, 219], ["bdd100k.make_dataset", "len", "RuntimeError", "float", "eval_scales.split"], "methods", ["home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.bdd100k.make_dataset"], ["    ", "def", "__init__", "(", "self", ",", "mode", ",", "maxSkip", "=", "0", ",", "joint_transform", "=", "None", ",", "sliding_crop", "=", "None", ",", "\n", "transform", "=", "None", ",", "target_transform", "=", "None", ",", "target_aux_transform", "=", "None", ",", "dump_images", "=", "False", ",", "\n", "cv_split", "=", "None", ",", "eval_mode", "=", "False", ",", "\n", "eval_scales", "=", "None", ",", "eval_flip", "=", "False", ",", "image_in", "=", "False", ",", "\n", "extract_feature", "=", "False", ")", ":", "\n", "        ", "self", ".", "mode", "=", "mode", "\n", "self", ".", "maxSkip", "=", "maxSkip", "\n", "self", ".", "joint_transform", "=", "joint_transform", "\n", "self", ".", "sliding_crop", "=", "sliding_crop", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "target_transform", "=", "target_transform", "\n", "self", ".", "target_aux_transform", "=", "target_aux_transform", "\n", "self", ".", "dump_images", "=", "dump_images", "\n", "self", ".", "eval_mode", "=", "eval_mode", "\n", "self", ".", "eval_flip", "=", "eval_flip", "\n", "self", ".", "eval_scales", "=", "None", "\n", "self", ".", "image_in", "=", "image_in", "\n", "self", ".", "extract_feature", "=", "extract_feature", "\n", "\n", "\n", "if", "eval_scales", "!=", "None", ":", "\n", "            ", "self", ".", "eval_scales", "=", "[", "float", "(", "scale", ")", "for", "scale", "in", "eval_scales", ".", "split", "(", "\",\"", ")", "]", "\n", "\n", "", "if", "cv_split", ":", "\n", "            ", "self", ".", "cv_split", "=", "cv_split", "\n", "assert", "cv_split", "<", "cfg", ".", "DATASET", ".", "CV_SPLITS", ",", "'expected cv_split {} to be < CV_SPLITS {}'", ".", "format", "(", "\n", "cv_split", ",", "cfg", ".", "DATASET", ".", "CV_SPLITS", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "cv_split", "=", "0", "\n", "", "self", ".", "imgs", ",", "_", "=", "make_dataset", "(", "mode", ",", "self", ".", "maxSkip", ",", "cv_split", "=", "self", ".", "cv_split", ")", "\n", "if", "len", "(", "self", ".", "imgs", ")", "==", "0", ":", "\n", "            ", "raise", "RuntimeError", "(", "'Found 0 images, please check the data set'", ")", "\n", "\n", "", "self", ".", "mean_std", "=", "(", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.bdd100k.BDD100K._eval_get_item": [[220, 235], ["range", "return_imgs.append", "int", "img.transpose.transpose.transpose", "img.transpose.transpose.resize", "imgs.append", "int", "int", "torchvision.ToTensor", "torchvision.Normalize"], "methods", ["None"], ["", "def", "_eval_get_item", "(", "self", ",", "img", ",", "mask", ",", "scales", ",", "flip_bool", ")", ":", "\n", "        ", "return_imgs", "=", "[", "]", "\n", "for", "flip", "in", "range", "(", "int", "(", "flip_bool", ")", "+", "1", ")", ":", "\n", "            ", "imgs", "=", "[", "]", "\n", "if", "flip", ":", "\n", "                ", "img", "=", "img", ".", "transpose", "(", "Image", ".", "FLIP_LEFT_RIGHT", ")", "\n", "", "for", "scale", "in", "scales", ":", "\n", "                ", "w", ",", "h", "=", "img", ".", "size", "\n", "target_w", ",", "target_h", "=", "int", "(", "w", "*", "scale", ")", ",", "int", "(", "h", "*", "scale", ")", "\n", "resize_img", "=", "img", ".", "resize", "(", "(", "target_w", ",", "target_h", ")", ")", "\n", "tensor_img", "=", "transforms", ".", "ToTensor", "(", ")", "(", "resize_img", ")", "\n", "final_tensor", "=", "transforms", ".", "Normalize", "(", "*", "self", ".", "mean_std", ")", "(", "tensor_img", ")", "\n", "imgs", ".", "append", "(", "final_tensor", ")", "\n", "", "return_imgs", ".", "append", "(", "imgs", ")", "\n", "", "return", "return_imgs", ",", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.bdd100k.BDD100K.__getitem__": [[236, 291], ["numpy.array", "bdd100k.BDD100K.copy", "trainid_to_trainid.items", "PIL.Image.fromarray", "PIL.Image.open().convert", "PIL.Image.open", "os.path.splitext", "bdd100k.BDD100K.copy.astype", "bdd100k.BDD100K.transform", "torchvision.Normalize", "torchvision.Normalize", "bdd100k.BDD100K.target_aux_transform", "torch.tensor", "bdd100k.BDD100K.target_transform", "os.makedirs", "os.path.join", "os.path.join", "bdd100k.colorize_mask", "bdd100k.BDD100K.save", "colorize_mask.save", "os.path.basename", "bdd100k.BDD100K._eval_get_item", "bdd100k.BDD100K.joint_transform", "numpy.array", "PIL.Image.open", "torch.mean", "torch.mean", "torch.mean", "torchvision.ToTensor", "torch.std", "torch.std", "torch.std"], "methods", ["home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.bdd100k.colorize_mask", "home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.bdd100k.BDD100KAug._eval_get_item"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "\n", "        ", "img_path", ",", "mask_path", "=", "self", ".", "imgs", "[", "index", "]", "\n", "\n", "img", ",", "mask", "=", "Image", ".", "open", "(", "img_path", ")", ".", "convert", "(", "'RGB'", ")", ",", "Image", ".", "open", "(", "mask_path", ")", "\n", "img_name", "=", "os", ".", "path", ".", "splitext", "(", "os", ".", "path", ".", "basename", "(", "img_path", ")", ")", "[", "0", "]", "\n", "\n", "mask", "=", "np", ".", "array", "(", "mask", ")", "\n", "mask_copy", "=", "mask", ".", "copy", "(", ")", "\n", "for", "k", ",", "v", "in", "trainid_to_trainid", ".", "items", "(", ")", ":", "\n", "            ", "mask_copy", "[", "mask", "==", "k", "]", "=", "v", "\n", "\n", "", "if", "self", ".", "eval_mode", ":", "\n", "            ", "return", "[", "transforms", ".", "ToTensor", "(", ")", "(", "img", ")", "]", ",", "self", ".", "_eval_get_item", "(", "img", ",", "mask_copy", ",", "\n", "self", ".", "eval_scales", ",", "\n", "self", ".", "eval_flip", ")", ",", "img_name", "\n", "\n", "", "mask", "=", "Image", ".", "fromarray", "(", "mask_copy", ".", "astype", "(", "np", ".", "uint8", ")", ")", "\n", "\n", "# Image Transformations", "\n", "if", "self", ".", "extract_feature", "is", "not", "True", ":", "\n", "            ", "if", "self", ".", "joint_transform", "is", "not", "None", ":", "\n", "                ", "img", ",", "mask", "=", "self", ".", "joint_transform", "(", "img", ",", "mask", ")", "\n", "\n", "", "", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "\n", "", "rgb_mean_std_gt", "=", "(", "[", "0.5", ",", "0.5", ",", "0.5", "]", ",", "[", "0.5", ",", "0.5", ",", "0.5", "]", ")", "\n", "img_gt", "=", "transforms", ".", "Normalize", "(", "*", "rgb_mean_std_gt", ")", "(", "img", ")", "\n", "\n", "rgb_mean_std", "=", "(", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "\n", "if", "self", ".", "image_in", ":", "\n", "            ", "eps", "=", "1e-5", "\n", "rgb_mean_std", "=", "(", "[", "torch", ".", "mean", "(", "img", "[", "0", "]", ")", ",", "torch", ".", "mean", "(", "img", "[", "1", "]", ")", ",", "torch", ".", "mean", "(", "img", "[", "2", "]", ")", "]", ",", "\n", "[", "torch", ".", "std", "(", "img", "[", "0", "]", ")", "+", "eps", ",", "torch", ".", "std", "(", "img", "[", "1", "]", ")", "+", "eps", ",", "torch", ".", "std", "(", "img", "[", "2", "]", ")", "+", "eps", "]", ")", "\n", "", "img", "=", "transforms", ".", "Normalize", "(", "*", "rgb_mean_std", ")", "(", "img", ")", "\n", "\n", "if", "self", ".", "target_aux_transform", "is", "not", "None", ":", "\n", "            ", "mask_aux", "=", "self", ".", "target_aux_transform", "(", "mask", ")", "\n", "", "else", ":", "\n", "            ", "mask_aux", "=", "torch", ".", "tensor", "(", "[", "0", "]", ")", "\n", "", "if", "self", ".", "target_transform", "is", "not", "None", ":", "\n", "            ", "mask", "=", "self", ".", "target_transform", "(", "mask", ")", "\n", "\n", "# Debug", "\n", "", "if", "self", ".", "dump_images", ":", "\n", "            ", "outdir", "=", "'../../dump_imgs_{}'", ".", "format", "(", "self", ".", "mode", ")", "\n", "os", ".", "makedirs", "(", "outdir", ",", "exist_ok", "=", "True", ")", "\n", "out_img_fn", "=", "os", ".", "path", ".", "join", "(", "outdir", ",", "img_name", "+", "'.png'", ")", "\n", "out_msk_fn", "=", "os", ".", "path", ".", "join", "(", "outdir", ",", "img_name", "+", "'_mask.png'", ")", "\n", "mask_img", "=", "colorize_mask", "(", "np", ".", "array", "(", "mask", ")", ")", "\n", "img", ".", "save", "(", "out_img_fn", ")", "\n", "mask_img", ".", "save", "(", "out_msk_fn", ")", "\n", "\n", "", "return", "img", ",", "mask", ",", "img_name", ",", "mask_aux", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.bdd100k.BDD100K.__len__": [[292, 294], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "imgs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.bdd100k.BDD100KUniform.__init__": [[300, 349], ["bdd100k.make_dataset", "len", "os.path.isfile", "bdd100k.BDD100KUniform.centroids.copy", "bdd100k.BDD100KUniform.build_epoch", "datasets.class_centroids_all", "datasets.class_centroids_all", "open", "json.load", "int", "open", "json.dump"], "methods", ["home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.bdd100k.make_dataset", "home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.uniform.build_epoch", "home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.uniform.class_centroids_all", "home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.uniform.class_centroids_all"], ["def", "__init__", "(", "self", ",", "mode", ",", "maxSkip", "=", "0", ",", "joint_transform_list", "=", "None", ",", "sliding_crop", "=", "None", ",", "\n", "transform", "=", "None", ",", "target_transform", "=", "None", ",", "target_aux_transform", "=", "None", ",", "dump_images", "=", "False", ",", "\n", "cv_split", "=", "None", ",", "class_uniform_pct", "=", "0.5", ",", "class_uniform_tile", "=", "1024", ",", "\n", "test", "=", "False", ",", "coarse_boost_classes", "=", "None", ",", "image_in", "=", "False", ",", "extract_feature", "=", "False", ")", ":", "\n", "        ", "self", ".", "mode", "=", "mode", "\n", "self", ".", "maxSkip", "=", "maxSkip", "\n", "self", ".", "joint_transform_list", "=", "joint_transform_list", "\n", "self", ".", "sliding_crop", "=", "sliding_crop", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "target_transform", "=", "target_transform", "\n", "self", ".", "target_aux_transform", "=", "target_aux_transform", "\n", "self", ".", "dump_images", "=", "dump_images", "\n", "self", ".", "class_uniform_pct", "=", "class_uniform_pct", "\n", "self", ".", "class_uniform_tile", "=", "class_uniform_tile", "\n", "self", ".", "coarse_boost_classes", "=", "coarse_boost_classes", "\n", "self", ".", "image_in", "=", "image_in", "\n", "self", ".", "extract_feature", "=", "extract_feature", "\n", "\n", "\n", "if", "cv_split", ":", "\n", "            ", "self", ".", "cv_split", "=", "cv_split", "\n", "assert", "cv_split", "<", "cfg", ".", "DATASET", ".", "CV_SPLITS", ",", "'expected cv_split {} to be < CV_SPLITS {}'", ".", "format", "(", "\n", "cv_split", ",", "cfg", ".", "DATASET", ".", "CV_SPLITS", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "cv_split", "=", "0", "\n", "\n", "", "self", ".", "imgs", ",", "self", ".", "aug_imgs", "=", "make_dataset", "(", "mode", ",", "self", ".", "maxSkip", ",", "cv_split", "=", "self", ".", "cv_split", ")", "\n", "assert", "len", "(", "self", ".", "imgs", ")", ",", "'Found 0 images, please check the data set'", "\n", "\n", "# Centroids for fine data", "\n", "json_fn", "=", "'bdd100k_{}_cv{}_tile{}.json'", ".", "format", "(", "\n", "self", ".", "mode", ",", "self", ".", "cv_split", ",", "self", ".", "class_uniform_tile", ")", "\n", "if", "os", ".", "path", ".", "isfile", "(", "json_fn", ")", ":", "\n", "            ", "with", "open", "(", "json_fn", ",", "'r'", ")", "as", "json_data", ":", "\n", "                ", "centroids", "=", "json", ".", "load", "(", "json_data", ")", "\n", "", "self", ".", "centroids", "=", "{", "int", "(", "idx", ")", ":", "centroids", "[", "idx", "]", "for", "idx", "in", "centroids", "}", "\n", "", "else", ":", "\n", "            ", "self", ".", "centroids", "=", "uniform", ".", "class_centroids_all", "(", "\n", "self", ".", "imgs", ",", "\n", "num_classes", ",", "\n", "id2trainid", "=", "trainid_to_trainid", ",", "\n", "tile_size", "=", "class_uniform_tile", ")", "\n", "with", "open", "(", "json_fn", ",", "'w'", ")", "as", "outfile", ":", "\n", "                ", "json", ".", "dump", "(", "self", ".", "centroids", ",", "outfile", ",", "indent", "=", "4", ")", "\n", "\n", "", "", "self", ".", "fine_centroids", "=", "self", ".", "centroids", ".", "copy", "(", ")", "\n", "\n", "self", ".", "build_epoch", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.bdd100k.BDD100KUniform.cities_uniform": [[350, 360], ["cities.keys", "logging.info", "os.path.basename", "os.path.basename.split", "str", "sorted"], "methods", ["None"], ["", "def", "cities_uniform", "(", "self", ",", "imgs", ",", "name", ")", ":", "\n", "        ", "\"\"\" list out cities in imgs_uniform \"\"\"", "\n", "cities", "=", "{", "}", "\n", "for", "item", "in", "imgs", ":", "\n", "            ", "img_fn", "=", "item", "[", "0", "]", "\n", "img_fn", "=", "os", ".", "path", ".", "basename", "(", "img_fn", ")", "\n", "city", "=", "img_fn", ".", "split", "(", "'_'", ")", "[", "0", "]", "\n", "cities", "[", "city", "]", "=", "1", "\n", "", "city_names", "=", "cities", ".", "keys", "(", ")", "\n", "logging", ".", "info", "(", "'Cities for {} '", ".", "format", "(", "name", ")", "+", "str", "(", "sorted", "(", "city_names", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.bdd100k.BDD100KUniform.build_epoch": [[361, 380], ["datasets.build_epoch", "datasets.build_epoch", "datasets.build_epoch", "datasets.build_epoch"], "methods", ["home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.uniform.build_epoch", "home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.uniform.build_epoch", "home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.uniform.build_epoch", "home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.uniform.build_epoch"], ["", "def", "build_epoch", "(", "self", ",", "cut", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Perform Uniform Sampling per epoch to create a new list for training such that it\n        uniformly samples all classes\n        \"\"\"", "\n", "if", "self", ".", "class_uniform_pct", ">", "0", ":", "\n", "            ", "if", "cut", ":", "\n", "# after max_cu_epoch, we only fine images to fine tune", "\n", "                ", "self", ".", "imgs_uniform", "=", "uniform", ".", "build_epoch", "(", "self", ".", "imgs", ",", "\n", "self", ".", "fine_centroids", ",", "\n", "num_classes", ",", "\n", "cfg", ".", "CLASS_UNIFORM_PCT", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "imgs_uniform", "=", "uniform", ".", "build_epoch", "(", "self", ".", "imgs", "+", "self", ".", "aug_imgs", ",", "\n", "self", ".", "centroids", ",", "\n", "num_classes", ",", "\n", "cfg", ".", "CLASS_UNIFORM_PCT", ")", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "imgs_uniform", "=", "self", ".", "imgs", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.bdd100k.BDD100KUniform.__getitem__": [[381, 441], ["numpy.array", "bdd100k.BDD100KUniform.copy", "trainid_to_trainid.items", "PIL.Image.fromarray", "len", "PIL.Image.open().convert", "PIL.Image.open", "os.path.splitext", "bdd100k.BDD100KUniform.copy.astype", "os.makedirs", "os.path.join", "os.path.join", "bdd100k.colorize_mask", "bdd100k.BDD100KUniform.save", "colorize_mask.save", "bdd100k.BDD100KUniform.transform", "torchvision.Normalize", "torchvision.Normalize", "bdd100k.BDD100KUniform.target_aux_transform", "torch.tensor", "bdd100k.BDD100KUniform.target_transform", "os.path.basename", "enumerate", "numpy.array", "PIL.Image.open", "torch.mean", "torch.mean", "torch.mean", "xform", "xform", "torch.std", "torch.std", "torch.std"], "methods", ["home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.bdd100k.colorize_mask"], ["", "", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "elem", "=", "self", ".", "imgs_uniform", "[", "index", "]", "\n", "centroid", "=", "None", "\n", "if", "len", "(", "elem", ")", "==", "4", ":", "\n", "            ", "img_path", ",", "mask_path", ",", "centroid", ",", "class_id", "=", "elem", "\n", "", "else", ":", "\n", "            ", "img_path", ",", "mask_path", "=", "elem", "\n", "", "img", ",", "mask", "=", "Image", ".", "open", "(", "img_path", ")", ".", "convert", "(", "'RGB'", ")", ",", "Image", ".", "open", "(", "mask_path", ")", "\n", "img_name", "=", "os", ".", "path", ".", "splitext", "(", "os", ".", "path", ".", "basename", "(", "img_path", ")", ")", "[", "0", "]", "\n", "\n", "mask", "=", "np", ".", "array", "(", "mask", ")", "\n", "mask_copy", "=", "mask", ".", "copy", "(", ")", "\n", "for", "k", ",", "v", "in", "trainid_to_trainid", ".", "items", "(", ")", ":", "\n", "            ", "mask_copy", "[", "mask", "==", "k", "]", "=", "v", "\n", "", "mask", "=", "Image", ".", "fromarray", "(", "mask_copy", ".", "astype", "(", "np", ".", "uint8", ")", ")", "\n", "\n", "# Image Transformations", "\n", "if", "self", ".", "extract_feature", "is", "not", "True", ":", "\n", "            ", "if", "self", ".", "joint_transform_list", "is", "not", "None", ":", "\n", "                ", "for", "idx", ",", "xform", "in", "enumerate", "(", "self", ".", "joint_transform_list", ")", ":", "\n", "                    ", "if", "idx", "==", "0", "and", "centroid", "is", "not", "None", ":", "\n", "# HACK", "\n", "# We assume that the first transform is capable of taking", "\n", "# in a centroid", "\n", "                        ", "img", ",", "mask", "=", "xform", "(", "img", ",", "mask", ",", "centroid", ")", "\n", "", "else", ":", "\n", "                        ", "img", ",", "mask", "=", "xform", "(", "img", ",", "mask", ")", "\n", "\n", "# Debug", "\n", "", "", "", "", "if", "self", ".", "dump_images", "and", "centroid", "is", "not", "None", ":", "\n", "            ", "outdir", "=", "'../../dump_imgs_{}'", ".", "format", "(", "self", ".", "mode", ")", "\n", "os", ".", "makedirs", "(", "outdir", ",", "exist_ok", "=", "True", ")", "\n", "dump_img_name", "=", "trainid_to_name", "[", "class_id", "]", "+", "'_'", "+", "img_name", "\n", "out_img_fn", "=", "os", ".", "path", ".", "join", "(", "outdir", ",", "dump_img_name", "+", "'.png'", ")", "\n", "out_msk_fn", "=", "os", ".", "path", ".", "join", "(", "outdir", ",", "dump_img_name", "+", "'_mask.png'", ")", "\n", "mask_img", "=", "colorize_mask", "(", "np", ".", "array", "(", "mask", ")", ")", "\n", "img", ".", "save", "(", "out_img_fn", ")", "\n", "mask_img", ".", "save", "(", "out_msk_fn", ")", "\n", "\n", "", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "\n", "", "rgb_mean_std_gt", "=", "(", "[", "0.5", ",", "0.5", ",", "0.5", "]", ",", "[", "0.5", ",", "0.5", ",", "0.5", "]", ")", "\n", "img_gt", "=", "transforms", ".", "Normalize", "(", "*", "rgb_mean_std_gt", ")", "(", "img", ")", "\n", "\n", "rgb_mean_std", "=", "(", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "\n", "if", "self", ".", "image_in", ":", "\n", "            ", "eps", "=", "1e-5", "\n", "rgb_mean_std", "=", "(", "[", "torch", ".", "mean", "(", "img", "[", "0", "]", ")", ",", "torch", ".", "mean", "(", "img", "[", "1", "]", ")", ",", "torch", ".", "mean", "(", "img", "[", "2", "]", ")", "]", ",", "\n", "[", "torch", ".", "std", "(", "img", "[", "0", "]", ")", "+", "eps", ",", "torch", ".", "std", "(", "img", "[", "1", "]", ")", "+", "eps", ",", "torch", ".", "std", "(", "img", "[", "2", "]", ")", "+", "eps", "]", ")", "\n", "", "img", "=", "transforms", ".", "Normalize", "(", "*", "rgb_mean_std", ")", "(", "img", ")", "\n", "\n", "if", "self", ".", "target_aux_transform", "is", "not", "None", ":", "\n", "            ", "mask_aux", "=", "self", ".", "target_aux_transform", "(", "mask", ")", "\n", "", "else", ":", "\n", "            ", "mask_aux", "=", "torch", ".", "tensor", "(", "[", "0", "]", ")", "\n", "", "if", "self", ".", "target_transform", "is", "not", "None", ":", "\n", "            ", "mask", "=", "self", ".", "target_transform", "(", "mask", ")", "\n", "\n", "", "return", "img", ",", "mask", ",", "img_name", ",", "mask_aux", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.bdd100k.BDD100KUniform.__len__": [[442, 444], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "imgs_uniform", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.bdd100k.BDD100KAug.__init__": [[447, 484], ["bdd100k.make_dataset", "len", "RuntimeError", "float", "eval_scales.split"], "methods", ["home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.bdd100k.make_dataset"], ["    ", "def", "__init__", "(", "self", ",", "mode", ",", "maxSkip", "=", "0", ",", "joint_transform", "=", "None", ",", "sliding_crop", "=", "None", ",", "\n", "transform", "=", "None", ",", "color_transform", "=", "None", ",", "geometric_transform", "=", "None", ",", "target_transform", "=", "None", ",", "target_aux_transform", "=", "None", ",", "dump_images", "=", "False", ",", "\n", "cv_split", "=", "None", ",", "eval_mode", "=", "False", ",", "\n", "eval_scales", "=", "None", ",", "eval_flip", "=", "False", ",", "image_in", "=", "False", ",", "\n", "extract_feature", "=", "False", ")", ":", "\n", "        ", "self", ".", "mode", "=", "mode", "\n", "self", ".", "maxSkip", "=", "maxSkip", "\n", "self", ".", "joint_transform", "=", "joint_transform", "\n", "self", ".", "sliding_crop", "=", "sliding_crop", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "color_transform", "=", "color_transform", "\n", "self", ".", "geometric_transform", "=", "geometric_transform", "\n", "self", ".", "target_transform", "=", "target_transform", "\n", "self", ".", "target_aux_transform", "=", "target_aux_transform", "\n", "self", ".", "dump_images", "=", "dump_images", "\n", "self", ".", "eval_mode", "=", "eval_mode", "\n", "self", ".", "eval_flip", "=", "eval_flip", "\n", "self", ".", "eval_scales", "=", "None", "\n", "self", ".", "image_in", "=", "image_in", "\n", "self", ".", "extract_feature", "=", "extract_feature", "\n", "\n", "\n", "if", "eval_scales", "!=", "None", ":", "\n", "            ", "self", ".", "eval_scales", "=", "[", "float", "(", "scale", ")", "for", "scale", "in", "eval_scales", ".", "split", "(", "\",\"", ")", "]", "\n", "\n", "", "if", "cv_split", ":", "\n", "            ", "self", ".", "cv_split", "=", "cv_split", "\n", "assert", "cv_split", "<", "cfg", ".", "DATASET", ".", "CV_SPLITS", ",", "'expected cv_split {} to be < CV_SPLITS {}'", ".", "format", "(", "\n", "cv_split", ",", "cfg", ".", "DATASET", ".", "CV_SPLITS", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "cv_split", "=", "0", "\n", "", "self", ".", "imgs", ",", "_", "=", "make_dataset", "(", "mode", ",", "self", ".", "maxSkip", ",", "cv_split", "=", "self", ".", "cv_split", ")", "\n", "if", "len", "(", "self", ".", "imgs", ")", "==", "0", ":", "\n", "            ", "raise", "RuntimeError", "(", "'Found 0 images, please check the data set'", ")", "\n", "\n", "", "self", ".", "mean_std", "=", "(", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.bdd100k.BDD100KAug._eval_get_item": [[485, 500], ["range", "return_imgs.append", "int", "img.transpose.transpose.transpose", "img.transpose.transpose.resize", "imgs.append", "int", "int", "torchvision.ToTensor", "torchvision.Normalize"], "methods", ["None"], ["", "def", "_eval_get_item", "(", "self", ",", "img", ",", "mask", ",", "scales", ",", "flip_bool", ")", ":", "\n", "        ", "return_imgs", "=", "[", "]", "\n", "for", "flip", "in", "range", "(", "int", "(", "flip_bool", ")", "+", "1", ")", ":", "\n", "            ", "imgs", "=", "[", "]", "\n", "if", "flip", ":", "\n", "                ", "img", "=", "img", ".", "transpose", "(", "Image", ".", "FLIP_LEFT_RIGHT", ")", "\n", "", "for", "scale", "in", "scales", ":", "\n", "                ", "w", ",", "h", "=", "img", ".", "size", "\n", "target_w", ",", "target_h", "=", "int", "(", "w", "*", "scale", ")", ",", "int", "(", "h", "*", "scale", ")", "\n", "resize_img", "=", "img", ".", "resize", "(", "(", "target_w", ",", "target_h", ")", ")", "\n", "tensor_img", "=", "transforms", ".", "ToTensor", "(", ")", "(", "resize_img", ")", "\n", "final_tensor", "=", "transforms", ".", "Normalize", "(", "*", "self", ".", "mean_std", ")", "(", "tensor_img", ")", "\n", "imgs", ".", "append", "(", "final_tensor", ")", "\n", "", "return_imgs", ".", "append", "(", "imgs", ")", "\n", "", "return", "return_imgs", ",", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.bdd100k.BDD100KAug.__getitem__": [[501, 548], ["numpy.array", "PIL.Image.fromarray.copy", "trainid_to_trainid.items", "PIL.Image.fromarray", "PIL.Image.open().convert", "PIL.Image.open", "os.path.splitext", "Image.fromarray.copy.astype", "bdd100k.BDD100KAug.joint_transform", "bdd100k.BDD100KAug.transform", "bdd100k.BDD100KAug.color_transform", "bdd100k.BDD100KAug.geometric_transform", "torchvision.Normalize", "torchvision.Normalize", "torchvision.Normalize", "os.path.basename", "bdd100k.BDD100KAug._eval_get_item", "PIL.Image.open", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torchvision.ToTensor", "torch.std", "torch.std", "torch.std", "torch.std", "torch.std", "torch.std", "torch.std", "torch.std", "torch.std"], "methods", ["home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.bdd100k.BDD100KAug._eval_get_item"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "\n", "        ", "img_path", ",", "mask_path", "=", "self", ".", "imgs", "[", "index", "]", "\n", "\n", "img", ",", "mask", "=", "Image", ".", "open", "(", "img_path", ")", ".", "convert", "(", "'RGB'", ")", ",", "Image", ".", "open", "(", "mask_path", ")", "\n", "img_name", "=", "os", ".", "path", ".", "splitext", "(", "os", ".", "path", ".", "basename", "(", "img_path", ")", ")", "[", "0", "]", "\n", "\n", "mask", "=", "np", ".", "array", "(", "mask", ")", "\n", "mask_copy", "=", "mask", ".", "copy", "(", ")", "\n", "for", "k", ",", "v", "in", "trainid_to_trainid", ".", "items", "(", ")", ":", "\n", "            ", "mask_copy", "[", "mask", "==", "k", "]", "=", "v", "\n", "\n", "", "if", "self", ".", "eval_mode", ":", "\n", "            ", "return", "[", "transforms", ".", "ToTensor", "(", ")", "(", "img", ")", "]", ",", "self", ".", "_eval_get_item", "(", "img", ",", "mask_copy", ",", "\n", "self", ".", "eval_scales", ",", "\n", "self", ".", "eval_flip", ")", ",", "img_name", "\n", "\n", "", "mask", "=", "Image", ".", "fromarray", "(", "mask_copy", ".", "astype", "(", "np", ".", "uint8", ")", ")", "\n", "\n", "if", "self", ".", "joint_transform", "is", "not", "None", ":", "\n", "            ", "img", ",", "mask", "=", "self", ".", "joint_transform", "(", "img", ",", "mask", ")", "\n", "\n", "", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "img_or", "=", "self", ".", "transform", "(", "img", ")", "\n", "\n", "", "if", "self", ".", "color_transform", "is", "not", "None", ":", "\n", "            ", "img_color", "=", "self", ".", "color_transform", "(", "img", ")", "\n", "\n", "", "if", "self", ".", "geometric_transform", "is", "not", "None", ":", "\n", "            ", "img_geometric", "=", "self", ".", "geometric_transform", "(", "img", ")", "\n", "\n", "", "rgb_mean_std_or", "=", "(", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "\n", "rgb_mean_std_color", "=", "(", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "\n", "rgb_mean_std_geometric", "=", "(", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "\n", "if", "self", ".", "image_in", ":", "\n", "            ", "eps", "=", "1e-5", "\n", "rgb_mean_std_or", "=", "(", "[", "torch", ".", "mean", "(", "img_or", "[", "0", "]", ")", ",", "torch", ".", "mean", "(", "img_or", "[", "1", "]", ")", ",", "torch", ".", "mean", "(", "img_or", "[", "2", "]", ")", "]", ",", "\n", "[", "torch", ".", "std", "(", "img_or", "[", "0", "]", ")", "+", "eps", ",", "torch", ".", "std", "(", "img_or", "[", "1", "]", ")", "+", "eps", ",", "torch", ".", "std", "(", "img_or", "[", "2", "]", ")", "+", "eps", "]", ")", "\n", "rgb_mean_std_color", "=", "(", "[", "torch", ".", "mean", "(", "img_color", "[", "0", "]", ")", ",", "torch", ".", "mean", "(", "img_color", "[", "1", "]", ")", ",", "torch", ".", "mean", "(", "img_color", "[", "2", "]", ")", "]", ",", "\n", "[", "torch", ".", "std", "(", "img_color", "[", "0", "]", ")", "+", "eps", ",", "torch", ".", "std", "(", "img_color", "[", "1", "]", ")", "+", "eps", ",", "torch", ".", "std", "(", "img_color", "[", "2", "]", ")", "+", "eps", "]", ")", "\n", "rgb_mean_std_geometric", "=", "(", "[", "torch", ".", "mean", "(", "img_geometric", "[", "0", "]", ")", ",", "torch", ".", "mean", "(", "img_geometric", "[", "1", "]", ")", ",", "torch", ".", "mean", "(", "img_geometric", "[", "2", "]", ")", "]", ",", "\n", "[", "torch", ".", "std", "(", "img_geometric", "[", "0", "]", ")", "+", "eps", ",", "torch", ".", "std", "(", "img_geometric", "[", "1", "]", ")", "+", "eps", ",", "torch", ".", "std", "(", "img_geometric", "[", "2", "]", ")", "+", "eps", "]", ")", "\n", "", "img_or", "=", "transforms", ".", "Normalize", "(", "*", "rgb_mean_std_or", ")", "(", "img_or", ")", "\n", "img_color", "=", "transforms", ".", "Normalize", "(", "*", "rgb_mean_std_color", ")", "(", "img_color", ")", "\n", "img_geometric", "=", "transforms", ".", "Normalize", "(", "*", "rgb_mean_std_geometric", ")", "(", "img_geometric", ")", "\n", "\n", "return", "img_or", ",", "img_color", ",", "img_geometric", ",", "img_name", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.bdd100k.BDD100KAug.__len__": [[549, 551], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "imgs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.bdd100k.colorize_mask": [[38, 46], ["PIL.Image.fromarray().convert", "Image.fromarray().convert.putpalette", "PIL.Image.fromarray", "mask.astype"], "function", ["None"], ["", "def", "colorize_mask", "(", "mask", ")", ":", "\n", "    ", "\"\"\"\n    Colorize a segmentation mask.\n    \"\"\"", "\n", "# mask: numpy array of the mask", "\n", "new_mask", "=", "Image", ".", "fromarray", "(", "mask", ".", "astype", "(", "np", ".", "uint8", ")", ")", ".", "convert", "(", "'P'", ")", "\n", "new_mask", ".", "putpalette", "(", "palette", ")", "\n", "return", "new_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.bdd100k.add_items": [[48, 88], ["os.path.join", "os.path.join", "items.append", "os.path.join", "os.path.join", "name.split", "os.listdir", "os.path.join", "os.path.join"], "function", ["None"], ["", "def", "add_items", "(", "items", ",", "aug_items", ",", "img_path", ",", "mask_path", ",", "mask_postfix", ",", "mode", ",", "maxSkip", ")", ":", "\n", "    ", "\"\"\"\n\n    Add More items ot the list from the augmented dataset\n    \"\"\"", "\n", "\n", "if", "mode", "==", "\"train\"", ":", "\n", "        ", "img_path", "=", "os", ".", "path", ".", "join", "(", "img_path", ",", "'train'", ")", "\n", "mask_path", "=", "os", ".", "path", ".", "join", "(", "mask_path", ",", "'train'", ")", "\n", "", "elif", "mode", "==", "\"val\"", ":", "\n", "        ", "img_path", "=", "os", ".", "path", ".", "join", "(", "img_path", ",", "'val'", ")", "\n", "mask_path", "=", "os", ".", "path", ".", "join", "(", "mask_path", ",", "'val'", ")", "\n", "\n", "", "list_items", "=", "[", "name", ".", "split", "(", "img_postfix", ")", "[", "0", "]", "for", "name", "in", "\n", "os", ".", "listdir", "(", "img_path", ")", "]", "\n", "for", "it", "in", "list_items", ":", "\n", "        ", "item", "=", "(", "os", ".", "path", ".", "join", "(", "img_path", ",", "it", "+", "img_postfix", ")", ",", "\n", "os", ".", "path", ".", "join", "(", "mask_path", ",", "it", "+", "mask_postfix", ")", ")", "\n", "# ########################################################", "\n", "# ###### dataset augmentation ############################", "\n", "# ########################################################", "\n", "# if mode == \"train\" and maxSkip > 0:", "\n", "#     new_img_path = os.path.join(aug_root, 'leftImg8bit_trainvaltest', 'leftImg8bit')", "\n", "#     new_mask_path = os.path.join(aug_root, 'gtFine_trainvaltest', 'gtFine')", "\n", "#     file_info = it.split(\"_\")", "\n", "#     cur_seq_id = file_info[-1]", "\n", "\n", "#     prev_seq_id = \"%06d\" % (int(cur_seq_id) - maxSkip)", "\n", "#     next_seq_id = \"%06d\" % (int(cur_seq_id) + maxSkip)", "\n", "#     prev_it = file_info[0] + \"_\" + file_info[1] + \"_\" + prev_seq_id", "\n", "#     next_it = file_info[0] + \"_\" + file_info[1] + \"_\" + next_seq_id", "\n", "#     prev_item = (os.path.join(new_img_path, c, prev_it + img_postfix),", "\n", "#                  os.path.join(new_mask_path, c, prev_it + mask_postfix))", "\n", "#     if os.path.isfile(prev_item[0]) and os.path.isfile(prev_item[1]):", "\n", "#         aug_items.append(prev_item)", "\n", "#     next_item = (os.path.join(new_img_path, c, next_it + img_postfix),", "\n", "#                  os.path.join(new_mask_path, c, next_it + mask_postfix))", "\n", "#     if os.path.isfile(next_item[0]) and os.path.isfile(next_item[1]):", "\n", "#         aug_items.append(next_item)", "\n", "items", ".", "append", "(", "item", ")", "\n", "# items.extend(extra_items)", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.bdd100k.make_cv_splits": [[91, 124], ["os.path.join", "os.path.join", "sorted", "len", "len", "range", "range", "cv_splits.append", "os.listdir", "os.listdir", "split[].append", "split[].append"], "function", ["None"], ["", "", "def", "make_cv_splits", "(", "img_dir_name", ")", ":", "\n", "    ", "\"\"\"\n    Create splits of train/val data.\n    A split is a lists of cities.\n    split0 is aligned with the default Cityscapes train/val.\n    \"\"\"", "\n", "trn_path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "img_dir_name", ",", "'train'", ")", "\n", "val_path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "img_dir_name", ",", "'val'", ")", "\n", "\n", "trn_cities", "=", "[", "'train/'", "+", "c", "for", "c", "in", "os", ".", "listdir", "(", "trn_path", ")", "]", "\n", "val_cities", "=", "[", "'val/'", "+", "c", "for", "c", "in", "os", ".", "listdir", "(", "val_path", ")", "]", "\n", "\n", "# want reproducible randomly shuffled", "\n", "trn_cities", "=", "sorted", "(", "trn_cities", ")", "\n", "\n", "all_cities", "=", "val_cities", "+", "trn_cities", "\n", "num_val_cities", "=", "len", "(", "val_cities", ")", "\n", "num_cities", "=", "len", "(", "all_cities", ")", "\n", "\n", "cv_splits", "=", "[", "]", "\n", "for", "split_idx", "in", "range", "(", "cfg", ".", "DATASET", ".", "CV_SPLITS", ")", ":", "\n", "        ", "split", "=", "{", "}", "\n", "split", "[", "'train'", "]", "=", "[", "]", "\n", "split", "[", "'val'", "]", "=", "[", "]", "\n", "offset", "=", "split_idx", "*", "num_cities", "//", "cfg", ".", "DATASET", ".", "CV_SPLITS", "\n", "for", "j", "in", "range", "(", "num_cities", ")", ":", "\n", "            ", "if", "j", ">=", "offset", "and", "j", "<", "(", "offset", "+", "num_val_cities", ")", ":", "\n", "                ", "split", "[", "'val'", "]", ".", "append", "(", "all_cities", "[", "j", "]", ")", "\n", "", "else", ":", "\n", "                ", "split", "[", "'train'", "]", ".", "append", "(", "all_cities", "[", "j", "]", ")", "\n", "", "", "cv_splits", ".", "append", "(", "split", ")", "\n", "\n", "", "return", "cv_splits", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.bdd100k.make_split_coarse": [[126, 139], ["os.listdir", "sorted"], "function", ["None"], ["", "def", "make_split_coarse", "(", "img_path", ")", ":", "\n", "    ", "\"\"\"\n    Create a train/val split for coarse\n    return: city split in train\n    \"\"\"", "\n", "all_cities", "=", "os", ".", "listdir", "(", "img_path", ")", "\n", "all_cities", "=", "sorted", "(", "all_cities", ")", "# needs to always be the same", "\n", "val_cities", "=", "[", "]", "# Can manually set cities to not be included into train split", "\n", "\n", "split", "=", "{", "}", "\n", "split", "[", "'val'", "]", "=", "val_cities", "\n", "split", "[", "'train'", "]", "=", "[", "c", "for", "c", "in", "all_cities", "if", "c", "not", "in", "val_cities", "]", "\n", "return", "split", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.bdd100k.make_test_split": [[141, 146], ["os.path.join", "os.listdir"], "function", ["None"], ["", "def", "make_test_split", "(", "img_dir_name", ")", ":", "\n", "    ", "test_path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "img_dir_name", ",", "'leftImg8bit'", ",", "'test'", ")", "\n", "test_cities", "=", "[", "'test/'", "+", "c", "for", "c", "in", "os", ".", "listdir", "(", "test_path", ")", "]", "\n", "\n", "return", "test_cities", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.bdd100k.make_dataset": [[148, 180], ["os.path.join", "os.path.join", "logging.info", "logging.info", "bdd100k.add_items", "len", "len"], "function", ["home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.bdd100k.add_items"], ["", "def", "make_dataset", "(", "mode", ",", "maxSkip", "=", "0", ",", "cv_split", "=", "0", ")", ":", "\n", "    ", "\"\"\"\n    Assemble list of images + mask files\n\n    fine -   modes: train/val/test/trainval    cv:0,1,2\n    coarse - modes: train/val                  cv:na\n\n    path examples:\n    leftImg8bit_trainextra/leftImg8bit/train_extra/augsburg\n    gtCoarse/gtCoarse/train_extra/augsburg\n    \"\"\"", "\n", "items", "=", "[", "]", "\n", "aug_items", "=", "[", "]", "\n", "\n", "assert", "mode", "in", "[", "'train'", ",", "'val'", ",", "'test'", ",", "'trainval'", "]", "\n", "img_dir_name", "=", "'images'", "\n", "img_path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "img_dir_name", ")", "\n", "mask_path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "'labels'", ")", "\n", "mask_postfix", "=", "'_train_id.png'", "\n", "# cv_splits = make_cv_splits(img_dir_name)", "\n", "if", "mode", "==", "'trainval'", ":", "\n", "        ", "modes", "=", "[", "'train'", ",", "'val'", "]", "\n", "", "else", ":", "\n", "        ", "modes", "=", "[", "mode", "]", "\n", "", "for", "mode", "in", "modes", ":", "\n", "        ", "logging", ".", "info", "(", "'{} fine cities: '", ".", "format", "(", "mode", ")", ")", "\n", "add_items", "(", "items", ",", "aug_items", ",", "img_path", ",", "mask_path", ",", "\n", "mask_postfix", ",", "mode", ",", "maxSkip", ")", "\n", "\n", "# logging.info('Cityscapes-{}: {} images'.format(mode, len(items)))", "\n", "", "logging", ".", "info", "(", "'BDD100K-{}: {} images'", ".", "format", "(", "mode", ",", "len", "(", "items", ")", "+", "len", "(", "aug_items", ")", ")", ")", "\n", "return", "items", ",", "aug_items", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.__init__.get_train_joint_transform": [[28, 59], ["transforms.Compose", "transforms.RandomSizeAndCrop", "transforms.Resize", "transforms.RandomHorizontallyFlip", "transforms.RandomRotate"], "function", ["None"], []], "home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.__init__.get_input_transforms": [[61, 93], ["torchvision.Compose", "torchvision.Compose", "torchvision.ToTensor", "torchvision.ToTensor", "torchvision.RandomApply", "transforms.RandomBilateralBlur", "transforms.RandomGaussianBlur", "torchvision.ColorJitter"], "function", ["None"], []], "home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.__init__.get_color_geometric_transforms": [[94, 123], ["torchvision.Compose", "torchvision.Compose", "torchvision.ColorJitter", "transforms.RandomGaussianBlur", "torchvision.RandomHorizontalFlip", "torchvision.ToTensor", "torchvision.ToTensor"], "function", ["None"], []], "home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.__init__.get_target_transforms": [[124, 144], ["transforms.MaskToTensor", "transforms.MaskToTensor", "transforms.RelaxedBoundaryLossToTensor", "transforms.MaskToTensor"], "function", ["None"], []], "home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.__init__.create_extra_val_loader": [[146, 208], ["torch.utils.data.DataLoader", "datasets.cityscapes.CityScapes", "datasets.sampler.DistributedSampler", "datasets.bdd100k.BDD100K", "datasets.gtav.GTAV", "datasets.synthia.Synthia", "datasets.mapillary.Mapillary", "transforms.ResizeHeight", "transforms.CenterCropPad", "datasets.nullloader.nullloader", "Exception"], "function", ["None"], []], "home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.__init__.create_covstat_val_loader": [[209, 272], ["__init__.get_color_geometric_transforms", "torch.utils.data.DataLoader", "datasets.cityscapes.CityScapesAug", "datasets.bdd100k.BDD100KAug", "datasets.gtav.GTAVAug", "datasets.synthia.SynthiaAug", "print", "exit", "datasets.nullloader.nullloader", "Exception"], "function", ["home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.__init__.get_color_geometric_transforms"], []], "home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.__init__.setup_loaders": [[273, 570], ["enumerate", "torch.utils.data.DataLoader", "__init__.get_train_joint_transform", "__init__.get_input_transforms", "__init__.get_target_transforms", "dataset.CityScapes", "train_sets.append", "val_sets.append", "val_dataset_names.append", "__init__.get_train_joint_transform", "__init__.get_input_transforms", "__init__.get_target_transforms", "dataset.BDD100K", "train_sets.append", "val_sets.append", "val_dataset_names.append", "__init__.get_train_joint_transform", "__init__.get_input_transforms", "__init__.get_target_transforms", "datasets.gtav.GTAV", "train_sets.append", "val_sets.append", "val_dataset_names.append", "__init__.get_train_joint_transform", "__init__.get_input_transforms", "__init__.get_target_transforms", "dataset.Synthia", "train_sets.append", "val_sets.append", "val_dataset_names.append", "__init__.get_train_joint_transform", "__init__.get_input_transforms", "__init__.get_target_transforms", "dataset.Mapillary", "dataset.Mapillary", "train_sets.append", "val_sets.append", "val_dataset_names.append", "datasets.nullloader.nullloader", "datasets.nullloader.nullloader", "train_sets.append", "val_sets.append", "val_dataset_names.append", "len", "Exception", "len", "len", "Exception", "len", "torch.utils.data.DataLoader", "datasets.sampler.DistributedSampler", "__init__.create_extra_val_loader", "__init__.create_covstat_val_loader", "dataset.CityScapesUniform", "dataset.CityScapes", "dataset.BDD100KUniform", "dataset.BDD100K", "dataset.GTAVUniform", "datasets.gtav.GTAV", "dataset.SynthiaUniform", "dataset.Synthia", "transforms.ResizeHeight", "transforms.CenterCropPad", "torch.utils.data.ConcatDataset", "datasets.multi_loader.DomainUniformConcatDataset", "datasets.sampler.DistributedSampler", "int", "int", "int", "int", "args.coarse_boost_classes.split", "args.coarse_boost_classes.split", "args.coarse_boost_classes.split", "args.coarse_boost_classes.split"], "function", ["home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.__init__.get_train_joint_transform", "home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.__init__.get_input_transforms", "home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.__init__.get_target_transforms", "home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.__init__.get_train_joint_transform", "home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.__init__.get_input_transforms", "home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.__init__.get_target_transforms", "home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.__init__.get_train_joint_transform", "home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.__init__.get_input_transforms", "home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.__init__.get_target_transforms", "home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.__init__.get_train_joint_transform", "home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.__init__.get_input_transforms", "home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.__init__.get_target_transforms", "home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.__init__.get_train_joint_transform", "home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.__init__.get_input_transforms", "home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.__init__.get_target_transforms", "home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.__init__.create_extra_val_loader", "home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.__init__.create_covstat_val_loader"], []], "home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.uniform.Point.__init__": [[25, 28], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "        ", "self", ".", "x", "=", "x", "\n", "self", ".", "y", "=", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.uniform.calc_tile_locations": [[30, 45], ["range", "range", "locations.append"], "function", ["None"], ["", "", "def", "calc_tile_locations", "(", "tile_size", ",", "image_size", ")", ":", "\n", "    ", "\"\"\"\n    Divide an image into tiles to help us cover classes that are spread out.\n    tile_size: size of tile to distribute\n    image_size: original image size\n    return: locations of the tiles\n    \"\"\"", "\n", "image_size_y", ",", "image_size_x", "=", "image_size", "\n", "locations", "=", "[", "]", "\n", "for", "y", "in", "range", "(", "image_size_y", "//", "tile_size", ")", ":", "\n", "        ", "for", "x", "in", "range", "(", "image_size_x", "//", "tile_size", ")", ":", "\n", "            ", "x_offs", "=", "x", "*", "tile_size", "\n", "y_offs", "=", "y", "*", "tile_size", "\n", "locations", ".", "append", "(", "(", "x_offs", ",", "y_offs", ")", ")", "\n", "", "", "return", "locations", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.uniform.class_centroids_image": [[47, 82], ["collections.defaultdict", "numpy.array", "uniform.calc_tile_locations", "np.array.copy", "pbar.update", "PIL.Image.open", "len", "id2trainid.items", "range", "scipy.ndimage.measurements.center_of_mass", "centroids[].append", "int", "int"], "function", ["home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.uniform.calc_tile_locations", "home.repos.pwc.inspect_result.shachoi_RobustNet.utils.misc.AverageMeter.update"], ["", "def", "class_centroids_image", "(", "item", ",", "tile_size", ",", "num_classes", ",", "id2trainid", ")", ":", "\n", "    ", "\"\"\"\n    For one image, calculate centroids for all classes present in image.\n    item: image, image_name\n    tile_size:\n    num_classes:\n    id2trainid: mapping from original id to training ids\n    return: Centroids are calculated for each tile.\n    \"\"\"", "\n", "image_fn", ",", "label_fn", "=", "item", "\n", "centroids", "=", "defaultdict", "(", "list", ")", "\n", "mask", "=", "np", ".", "array", "(", "Image", ".", "open", "(", "label_fn", ")", ")", "\n", "if", "len", "(", "mask", ".", "shape", ")", "==", "3", ":", "\n", "# Remove instance mask", "\n", "        ", "mask", "=", "mask", "[", ":", ",", ":", ",", "0", "]", "\n", "", "image_size", "=", "mask", ".", "shape", "\n", "tile_locations", "=", "calc_tile_locations", "(", "tile_size", ",", "image_size", ")", "\n", "\n", "mask_copy", "=", "mask", ".", "copy", "(", ")", "\n", "if", "id2trainid", ":", "\n", "        ", "for", "k", ",", "v", "in", "id2trainid", ".", "items", "(", ")", ":", "\n", "            ", "mask", "[", "mask_copy", "==", "k", "]", "=", "v", "\n", "\n", "", "", "for", "x_offs", ",", "y_offs", "in", "tile_locations", ":", "\n", "        ", "patch", "=", "mask", "[", "y_offs", ":", "y_offs", "+", "tile_size", ",", "x_offs", ":", "x_offs", "+", "tile_size", "]", "\n", "for", "class_id", "in", "range", "(", "num_classes", ")", ":", "\n", "            ", "if", "class_id", "in", "patch", ":", "\n", "                ", "patch_class", "=", "(", "patch", "==", "class_id", ")", ".", "astype", "(", "int", ")", "\n", "centroid_y", ",", "centroid_x", "=", "ndimage", ".", "measurements", ".", "center_of_mass", "(", "patch_class", ")", "\n", "centroid_y", "=", "int", "(", "centroid_y", ")", "+", "y_offs", "\n", "centroid_x", "=", "int", "(", "centroid_x", ")", "+", "x_offs", "\n", "centroid", "=", "(", "centroid_x", ",", "centroid_y", ")", "\n", "centroids", "[", "class_id", "]", ".", "append", "(", "(", "image_fn", ",", "label_fn", ",", "centroid", ",", "class_id", ")", ")", "\n", "", "", "", "pbar", ".", "update", "(", "1", ")", "\n", "return", "centroids", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.uniform.class_centroids_image_from_color": [[85, 146], ["collections.defaultdict", "scipy.imread", "uniform.calc_tile_locations", "numpy.full", "pbar.update", "id2trainid.items", "range", "scipy.ndimage.measurements.center_of_mass", "centroids[].append", "int", "int", "numpy.array", "numpy.array", "numpy.array"], "function", ["home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.uniform.calc_tile_locations", "home.repos.pwc.inspect_result.shachoi_RobustNet.utils.misc.AverageMeter.update"], ["def", "class_centroids_image_from_color", "(", "item", ",", "tile_size", ",", "num_classes", ",", "id2trainid", ")", ":", "\n", "    ", "\"\"\"\n    For one image, calculate centroids for all classes present in image.\n    item: image, image_name\n    tile_size:\n    num_classes:\n    id2trainid: mapping from original id to training ids\n    return: Centroids are calculated for each tile.\n    \"\"\"", "\n", "image_fn", ",", "label_fn", "=", "item", "\n", "centroids", "=", "defaultdict", "(", "list", ")", "\n", "mask", "=", "m", ".", "imread", "(", "label_fn", ")", "\n", "image_size", "=", "mask", "[", ":", ",", ":", ",", "0", "]", ".", "shape", "\n", "tile_locations", "=", "calc_tile_locations", "(", "tile_size", ",", "image_size", ")", "\n", "\n", "# mask = m.imread(label_fn)", "\n", "# mask_copy = np.full((img.size[1], img.size[0]), 255, dtype=np.uint8)", "\n", "# for k, v in id2trainid.items():", "\n", "#     mask_copy[(mask == k)[:,:,0]] = v", "\n", "# mask = Image.fromarray(mask_copy.astype(np.uint8))", "\n", "\n", "# mask_copy = mask.copy()", "\n", "# mask_copy = mask.copy()", "\n", "# if id2trainid:", "\n", "#     for k, v in id2trainid.items():", "\n", "#         mask[mask_copy == k] = v", "\n", "\n", "mask_copy", "=", "np", ".", "full", "(", "image_size", ",", "255", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "\n", "if", "id2trainid", ":", "\n", "        ", "for", "k", ",", "v", "in", "id2trainid", ".", "items", "(", ")", ":", "\n", "# print(\"0\", mask.shape)", "\n", "# print(\"1\", ((mask == np.array(k))[:,:,0]).shape)    # 1052, 1914", "\n", "# # print(\"2\", mask == np.array(k)[:,:,0])", "\n", "# break", "\n", "# if v != 255:", "\n", "#     print(v)", "\n", "# if v == 2:", "\n", "#     print(k, v, \"num\", np.count_nonzero(mask == np.array(k)))", "\n", "# break", "\n", "            ", "if", "v", "!=", "255", "and", "v", "!=", "-", "1", ":", "\n", "                ", "mask_copy", "[", "(", "mask", "==", "np", ".", "array", "(", "k", ")", ")", "[", ":", ",", ":", ",", "0", "]", "&", "(", "mask", "==", "np", ".", "array", "(", "k", ")", ")", "[", ":", ",", ":", ",", "1", "]", "&", "(", "mask", "==", "np", ".", "array", "(", "k", ")", ")", "[", ":", ",", ":", ",", "2", "]", "]", "=", "v", "\n", "", "", "", "mask", "=", "mask_copy", "\n", "\n", "# mask_copy = mask.copy()", "\n", "# if id2trainid:", "\n", "#     for k, v in id2trainid.items():", "\n", "#         mask[mask_copy == k] = v", "\n", "\n", "for", "x_offs", ",", "y_offs", "in", "tile_locations", ":", "\n", "        ", "patch", "=", "mask", "[", "y_offs", ":", "y_offs", "+", "tile_size", ",", "x_offs", ":", "x_offs", "+", "tile_size", "]", "\n", "for", "class_id", "in", "range", "(", "num_classes", ")", ":", "\n", "            ", "if", "class_id", "in", "patch", ":", "\n", "                ", "patch_class", "=", "(", "patch", "==", "class_id", ")", ".", "astype", "(", "int", ")", "\n", "centroid_y", ",", "centroid_x", "=", "ndimage", ".", "measurements", ".", "center_of_mass", "(", "patch_class", ")", "\n", "centroid_y", "=", "int", "(", "centroid_y", ")", "+", "y_offs", "\n", "centroid_x", "=", "int", "(", "centroid_x", ")", "+", "x_offs", "\n", "centroid", "=", "(", "centroid_x", ",", "centroid_y", ")", "\n", "centroids", "[", "class_id", "]", ".", "append", "(", "(", "image_fn", ",", "label_fn", ",", "centroid", ",", "class_id", ")", ")", "\n", "", "", "", "pbar", ".", "update", "(", "1", ")", "\n", "return", "centroids", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.uniform.pooled_class_centroids_all_from_color": [[147, 174], ["Pool", "tqdm.tqdm", "partial", "collections.defaultdict", "Pool.map", "Pool.close", "Pool.join", "len", "centroids[].extend"], "function", ["None"], ["", "def", "pooled_class_centroids_all_from_color", "(", "items", ",", "num_classes", ",", "id2trainid", ",", "tile_size", "=", "1024", ")", ":", "\n", "    ", "\"\"\"\n    Calculate class centroids for all classes for all images for all tiles.\n    items: list of (image_fn, label_fn)\n    tile size: size of tile\n    returns: dict that contains a list of centroids for each class\n    \"\"\"", "\n", "from", "multiprocessing", ".", "dummy", "import", "Pool", "\n", "from", "functools", "import", "partial", "\n", "pool", "=", "Pool", "(", "32", ")", "\n", "global", "pbar", "\n", "pbar", "=", "tqdm", "(", "total", "=", "len", "(", "items", ")", ",", "desc", "=", "'pooled centroid extraction'", ")", "\n", "class_centroids_item", "=", "partial", "(", "class_centroids_image_from_color", ",", "\n", "num_classes", "=", "num_classes", ",", "\n", "id2trainid", "=", "id2trainid", ",", "\n", "tile_size", "=", "tile_size", ")", "\n", "\n", "centroids", "=", "defaultdict", "(", "list", ")", "\n", "new_centroids", "=", "pool", ".", "map", "(", "class_centroids_item", ",", "items", ")", "\n", "pool", ".", "close", "(", ")", "\n", "pool", ".", "join", "(", ")", "\n", "\n", "# combine each image's items into a single global dict", "\n", "for", "image_items", "in", "new_centroids", ":", "\n", "        ", "for", "class_id", "in", "image_items", ":", "\n", "            ", "centroids", "[", "class_id", "]", ".", "extend", "(", "image_items", "[", "class_id", "]", ")", "\n", "", "", "return", "centroids", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.uniform.pooled_class_centroids_all": [[176, 203], ["Pool", "tqdm.tqdm", "partial", "collections.defaultdict", "Pool.map", "Pool.close", "Pool.join", "len", "centroids[].extend"], "function", ["None"], ["", "def", "pooled_class_centroids_all", "(", "items", ",", "num_classes", ",", "id2trainid", ",", "tile_size", "=", "1024", ")", ":", "\n", "    ", "\"\"\"\n    Calculate class centroids for all classes for all images for all tiles.\n    items: list of (image_fn, label_fn)\n    tile size: size of tile\n    returns: dict that contains a list of centroids for each class\n    \"\"\"", "\n", "from", "multiprocessing", ".", "dummy", "import", "Pool", "\n", "from", "functools", "import", "partial", "\n", "pool", "=", "Pool", "(", "80", ")", "\n", "global", "pbar", "\n", "pbar", "=", "tqdm", "(", "total", "=", "len", "(", "items", ")", ",", "desc", "=", "'pooled centroid extraction'", ")", "\n", "class_centroids_item", "=", "partial", "(", "class_centroids_image", ",", "\n", "num_classes", "=", "num_classes", ",", "\n", "id2trainid", "=", "id2trainid", ",", "\n", "tile_size", "=", "tile_size", ")", "\n", "\n", "centroids", "=", "defaultdict", "(", "list", ")", "\n", "new_centroids", "=", "pool", ".", "map", "(", "class_centroids_item", ",", "items", ")", "\n", "pool", ".", "close", "(", ")", "\n", "pool", ".", "join", "(", ")", "\n", "\n", "# combine each image's items into a single global dict", "\n", "for", "image_items", "in", "new_centroids", ":", "\n", "        ", "for", "class_id", "in", "image_items", ":", "\n", "            ", "centroids", "[", "class_id", "]", ".", "extend", "(", "image_items", "[", "class_id", "]", ")", "\n", "", "", "return", "centroids", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.uniform.unpooled_class_centroids_all": [[205, 223], ["collections.defaultdict", "tqdm.tqdm", "uniform.class_centroids_image", "len", "centroids[].extend"], "function", ["home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.uniform.class_centroids_image"], ["", "def", "unpooled_class_centroids_all", "(", "items", ",", "num_classes", ",", "tile_size", "=", "1024", ")", ":", "\n", "    ", "\"\"\"\n    Calculate class centroids for all classes for all images for all tiles.\n    items: list of (image_fn, label_fn)\n    tile size: size of tile\n    returns: dict that contains a list of centroids for each class\n    \"\"\"", "\n", "centroids", "=", "defaultdict", "(", "list", ")", "\n", "global", "pbar", "\n", "pbar", "=", "tqdm", "(", "total", "=", "len", "(", "items", ")", ",", "desc", "=", "'centroid extraction'", ")", "\n", "for", "image", ",", "label", "in", "items", ":", "\n", "        ", "new_centroids", "=", "class_centroids_image", "(", "(", "image", ",", "label", ")", ",", "\n", "tile_size", ",", "\n", "num_classes", ")", "\n", "for", "class_id", "in", "new_centroids", ":", "\n", "            ", "centroids", "[", "class_id", "]", ".", "extend", "(", "new_centroids", "[", "class_id", "]", ")", "\n", "\n", "", "", "return", "centroids", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.uniform.class_centroids_all_from_color": [[225, 233], ["uniform.pooled_class_centroids_all_from_color"], "function", ["home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.uniform.pooled_class_centroids_all_from_color"], ["", "def", "class_centroids_all_from_color", "(", "items", ",", "num_classes", ",", "id2trainid", ",", "tile_size", "=", "1024", ")", ":", "\n", "    ", "\"\"\"\n    intermediate function to call pooled_class_centroid\n    \"\"\"", "\n", "\n", "pooled_centroids", "=", "pooled_class_centroids_all_from_color", "(", "items", ",", "num_classes", ",", "\n", "id2trainid", ",", "tile_size", ")", "\n", "return", "pooled_centroids", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.uniform.class_centroids_all": [[235, 243], ["uniform.pooled_class_centroids_all"], "function", ["home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.uniform.pooled_class_centroids_all"], ["", "def", "class_centroids_all", "(", "items", ",", "num_classes", ",", "id2trainid", ",", "tile_size", "=", "1024", ")", ":", "\n", "    ", "\"\"\"\n    intermediate function to call pooled_class_centroid\n    \"\"\"", "\n", "\n", "pooled_centroids", "=", "pooled_class_centroids_all", "(", "items", ",", "num_classes", ",", "\n", "id2trainid", ",", "tile_size", ")", "\n", "return", "pooled_centroids", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.uniform.random_sampling": [[245, 262], ["len", "numpy.arange", "numpy.random.shuffle", "range", "sampling.append"], "function", ["None"], ["", "def", "random_sampling", "(", "alist", ",", "num", ")", ":", "\n", "    ", "\"\"\"\n    Randomly sample num items from the list\n    alist: list of centroids to sample from\n    num: can be larger than the list and if so, then wrap around\n    return: class uniform samples from the list\n    \"\"\"", "\n", "sampling", "=", "[", "]", "\n", "len_list", "=", "len", "(", "alist", ")", "\n", "assert", "len_list", ",", "'len_list is zero!'", "\n", "indices", "=", "np", ".", "arange", "(", "len_list", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "indices", ")", "\n", "\n", "for", "i", "in", "range", "(", "num", ")", ":", "\n", "        ", "item", "=", "alist", "[", "indices", "[", "i", "%", "len_list", "]", "]", "\n", "sampling", ".", "append", "(", "item", ")", "\n", "", "return", "sampling", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.uniform.build_epoch": [[264, 294], ["logging.info", "int", "logging.info", "int", "uniform.random_sampling", "range", "range", "str", "len", "str", "logging.info", "len", "uniform.random_sampling", "random_sampling.extend", "len"], "function", ["home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.uniform.random_sampling", "home.repos.pwc.inspect_result.shachoi_RobustNet.datasets.uniform.random_sampling"], ["", "def", "build_epoch", "(", "imgs", ",", "centroids", ",", "num_classes", ",", "class_uniform_pct", ")", ":", "\n", "    ", "\"\"\"\n    Generate an epochs-worth of crops using uniform sampling. Needs to be called every\n    imgs: list of imgs\n    centroids:\n    num_classes:\n    class_uniform_pct: class uniform sampling percent ( % of uniform images in one epoch )\n    \"\"\"", "\n", "logging", ".", "info", "(", "\"Class Uniform Percentage: %s\"", ",", "str", "(", "class_uniform_pct", ")", ")", "\n", "num_epoch", "=", "int", "(", "len", "(", "imgs", ")", ")", "\n", "\n", "logging", ".", "info", "(", "'Class Uniform items per Epoch:%s'", ",", "str", "(", "num_epoch", ")", ")", "\n", "num_per_class", "=", "int", "(", "(", "num_epoch", "*", "class_uniform_pct", ")", "/", "num_classes", ")", "\n", "num_rand", "=", "num_epoch", "-", "num_per_class", "*", "num_classes", "\n", "# create random crops", "\n", "imgs_uniform", "=", "random_sampling", "(", "imgs", ",", "num_rand", ")", "\n", "\n", "# now add uniform sampling", "\n", "for", "class_id", "in", "range", "(", "num_classes", ")", ":", "\n", "        ", "string_format", "=", "\"cls %d len %d\"", "%", "(", "class_id", ",", "len", "(", "centroids", "[", "class_id", "]", ")", ")", "\n", "logging", ".", "info", "(", "string_format", ")", "\n", "", "for", "class_id", "in", "range", "(", "num_classes", ")", ":", "\n", "        ", "centroid_len", "=", "len", "(", "centroids", "[", "class_id", "]", ")", "\n", "if", "centroid_len", "==", "0", ":", "\n", "            ", "pass", "\n", "", "else", ":", "\n", "            ", "class_centroids", "=", "random_sampling", "(", "centroids", "[", "class_id", "]", ",", "num_per_class", ")", "\n", "imgs_uniform", ".", "extend", "(", "class_centroids", ")", "\n", "\n", "", "", "return", "imgs_uniform", "\n", "", ""]], "home.repos.pwc.inspect_result.shachoi_RobustNet.transforms.transforms.RandomVerticalFlip.__call__": [[54, 58], ["random.random", "img.transpose"], "methods", ["None"], ["    ", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "if", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "            ", "return", "img", ".", "transpose", "(", "Image", ".", "FLIP_TOP_BOTTOM", ")", "\n", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.transforms.transforms.DeNormalize.__init__": [[61, 64], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "mean", ",", "std", ")", ":", "\n", "        ", "self", ".", "mean", "=", "mean", "\n", "self", ".", "std", "=", "std", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.transforms.transforms.DeNormalize.__call__": [[65, 69], ["zip", "t.mul_().add_", "t.mul_"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "tensor", ")", ":", "\n", "        ", "for", "t", ",", "m", ",", "s", "in", "zip", "(", "tensor", ",", "self", ".", "mean", ",", "self", ".", "std", ")", ":", "\n", "            ", "t", ".", "mul_", "(", "s", ")", ".", "add_", "(", "m", ")", "\n", "", "return", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.transforms.transforms.MaskToTensor.__call__": [[72, 74], ["torch.from_numpy().long", "torch.from_numpy", "numpy.array"], "methods", ["None"], ["    ", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "return", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "img", ",", "dtype", "=", "np", ".", "int32", ")", ")", ".", "long", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.transforms.transforms.RelaxedBoundaryLossToTensor.__init__": [[79, 82], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "ignore_id", ",", "num_classes", ")", ":", "\n", "        ", "self", ".", "ignore_id", "=", "ignore_id", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.transforms.transforms.RelaxedBoundaryLossToTensor.new_one_hot_converter": [[84, 90], ["numpy.zeros", "numpy.arange", "a.ravel"], "methods", ["None"], ["", "def", "new_one_hot_converter", "(", "self", ",", "a", ")", ":", "\n", "        ", "ncols", "=", "self", ".", "num_classes", "+", "1", "\n", "out", "=", "np", ".", "zeros", "(", "(", "a", ".", "size", ",", "ncols", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "out", "[", "np", ".", "arange", "(", "a", ".", "size", ")", ",", "a", ".", "ravel", "(", ")", "]", "=", "1", "\n", "out", ".", "shape", "=", "a", ".", "shape", "+", "(", "ncols", ",", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.transforms.transforms.RelaxedBoundaryLossToTensor.__call__": [[91, 125], ["numpy.array", "range", "numpy.moveaxis", "torch.from_numpy().byte", "transforms.RelaxedBoundaryLossToTensor.new_one_hot_converter", "numpy.zeros", "skimage.segmentation.find_boundaries().astype", "range", "numpy.where", "numpy.where", "numpy.logical_or", "scipy.ndimage.interpolation.shift", "transforms.RelaxedBoundaryLossToTensor.new_one_hot_converter", "numpy.expand_dims", "torch.from_numpy", "skimage.segmentation.find_boundaries"], "methods", ["home.repos.pwc.inspect_result.shachoi_RobustNet.transforms.transforms.RelaxedBoundaryLossToTensor.new_one_hot_converter", "home.repos.pwc.inspect_result.shachoi_RobustNet.transforms.transforms.RelaxedBoundaryLossToTensor.new_one_hot_converter"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "\n", "        ", "img_arr", "=", "np", ".", "array", "(", "img", ")", "\n", "img_arr", "[", "img_arr", "==", "self", ".", "ignore_id", "]", "=", "self", ".", "num_classes", "\n", "\n", "if", "cfg", ".", "STRICTBORDERCLASS", "!=", "None", ":", "\n", "            ", "one_hot_orig", "=", "self", ".", "new_one_hot_converter", "(", "img_arr", ")", "\n", "mask", "=", "np", ".", "zeros", "(", "(", "img_arr", ".", "shape", "[", "0", "]", ",", "img_arr", ".", "shape", "[", "1", "]", ")", ")", "\n", "for", "cls", "in", "cfg", ".", "STRICTBORDERCLASS", ":", "\n", "                ", "mask", "=", "np", ".", "logical_or", "(", "mask", ",", "(", "img_arr", "==", "cls", ")", ")", "\n", "", "", "one_hot", "=", "0", "\n", "\n", "border", "=", "cfg", ".", "BORDER_WINDOW", "\n", "if", "(", "cfg", ".", "REDUCE_BORDER_ITER", "!=", "-", "1", "and", "cfg", ".", "ITER", ">", "cfg", ".", "REDUCE_BORDER_ITER", ")", ":", "\n", "            ", "border", "=", "border", "//", "2", "\n", "border_prediction", "=", "find_boundaries", "(", "img_arr", ",", "mode", "=", "'thick'", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "-", "border", ",", "border", "+", "1", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "-", "border", ",", "border", "+", "1", ")", ":", "\n", "                ", "shifted", "=", "shift", "(", "img_arr", ",", "(", "i", ",", "j", ")", ",", "cval", "=", "self", ".", "num_classes", ")", "\n", "one_hot", "+=", "self", ".", "new_one_hot_converter", "(", "shifted", ")", "\n", "\n", "", "", "one_hot", "[", "one_hot", ">", "1", "]", "=", "1", "\n", "\n", "if", "cfg", ".", "STRICTBORDERCLASS", "!=", "None", ":", "\n", "            ", "one_hot", "=", "np", ".", "where", "(", "np", ".", "expand_dims", "(", "mask", ",", "2", ")", ",", "one_hot_orig", ",", "one_hot", ")", "\n", "\n", "", "one_hot", "=", "np", ".", "moveaxis", "(", "one_hot", ",", "-", "1", ",", "0", ")", "\n", "\n", "\n", "if", "(", "cfg", ".", "REDUCE_BORDER_ITER", "!=", "-", "1", "and", "cfg", ".", "ITER", ">", "cfg", ".", "REDUCE_BORDER_ITER", ")", ":", "\n", "                ", "one_hot", "=", "np", ".", "where", "(", "border_prediction", ",", "2", "*", "one_hot", ",", "1", "*", "one_hot", ")", "\n", "# print(one_hot.shape)", "\n", "", "return", "torch", ".", "from_numpy", "(", "one_hot", ")", ".", "byte", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.transforms.transforms.ResizeHeight.__init__": [[127, 130], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "size", ",", "interpolation", "=", "Image", ".", "BILINEAR", ")", ":", "\n", "        ", "self", ".", "target_h", "=", "size", "\n", "self", ".", "interpolation", "=", "interpolation", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.transforms.transforms.ResizeHeight.__call__": [[131, 135], ["int", "img.resize"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "w", ",", "h", "=", "img", ".", "size", "\n", "target_w", "=", "int", "(", "w", "/", "h", "*", "self", ".", "target_h", ")", "\n", "return", "img", ".", "resize", "(", "(", "target_w", ",", "self", ".", "target_h", ")", ",", "self", ".", "interpolation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.transforms.transforms.FreeScale.__init__": [[138, 141], ["tuple", "reversed"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "size", ",", "interpolation", "=", "Image", ".", "BILINEAR", ")", ":", "\n", "        ", "self", ".", "size", "=", "tuple", "(", "reversed", "(", "size", ")", ")", "# size: (h, w)", "\n", "self", ".", "interpolation", "=", "interpolation", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.transforms.transforms.FreeScale.__call__": [[142, 144], ["img.resize"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "return", "img", ".", "resize", "(", "self", ".", "size", ",", "self", ".", "interpolation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.transforms.transforms.FlipChannels.__call__": [[150, 153], ["PIL.Image.fromarray", "numpy.array", "img.astype"], "methods", ["None"], ["def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "img", "=", "np", ".", "array", "(", "img", ")", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", "\n", "return", "Image", ".", "fromarray", "(", "img", ".", "astype", "(", "np", ".", "uint8", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.transforms.transforms.RandomGaussianBlur.__call__": [[159, 164], ["skimage.filters.gaussian", "PIL.Image.fromarray", "numpy.array", "skimage.filters.gaussian.astype", "random.random"], "methods", ["None"], ["def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "sigma", "=", "0.15", "+", "random", ".", "random", "(", ")", "*", "1.15", "\n", "blurred_img", "=", "gaussian", "(", "np", ".", "array", "(", "img", ")", ",", "sigma", "=", "sigma", ",", "multichannel", "=", "True", ")", "\n", "blurred_img", "*=", "255", "\n", "return", "Image", ".", "fromarray", "(", "blurred_img", ".", "astype", "(", "np", ".", "uint8", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.transforms.transforms.RandomGaussianNoise.__call__": [[167, 171], ["skimage.util.random_noise", "PIL.Image.fromarray", "numpy.array", "skimage.util.random_noise.astype"], "methods", ["None"], ["    ", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "noised_img", "=", "random_noise", "(", "np", ".", "array", "(", "img", ")", ",", "mode", "=", "'gaussian'", ")", "\n", "noised_img", "*=", "255", "\n", "return", "Image", ".", "fromarray", "(", "noised_img", ".", "astype", "(", "np", ".", "uint8", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.transforms.transforms.RandomBilateralBlur.__call__": [[178, 183], ["random.uniform", "skimage.restoration.denoise_bilateral", "PIL.Image.fromarray", "numpy.array", "skimage.restoration.denoise_bilateral.astype"], "methods", ["None"], ["def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "sigma", "=", "random", ".", "uniform", "(", "0.05", ",", "0.75", ")", "\n", "blurred_img", "=", "denoise_bilateral", "(", "np", ".", "array", "(", "img", ")", ",", "sigma_spatial", "=", "sigma", ",", "multichannel", "=", "True", ")", "\n", "blurred_img", "*=", "255", "\n", "return", "Image", ".", "fromarray", "(", "blurred_img", ".", "astype", "(", "np", ".", "uint8", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.transforms.transforms.ColorJitter.__init__": [[307, 312], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "brightness", "=", "0", ",", "contrast", "=", "0", ",", "saturation", "=", "0", ",", "hue", "=", "0", ")", ":", "\n", "        ", "self", ".", "brightness", "=", "brightness", "\n", "self", ".", "contrast", "=", "contrast", "\n", "self", ".", "saturation", "=", "saturation", "\n", "self", ".", "hue", "=", "hue", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.transforms.transforms.ColorJitter.get_params": [[313, 348], ["numpy.random.shuffle", "torchvision.Compose", "numpy.random.uniform", "transforms.append", "numpy.random.uniform", "transforms.append", "numpy.random.uniform", "transforms.append", "numpy.random.uniform", "transforms.append", "max", "torchvision.Lambda", "max", "torchvision.Lambda", "max", "torchvision.Lambda", "torchvision.Lambda", "transforms.adjust_brightness", "transforms.adjust_contrast", "transforms.adjust_saturation", "transforms.adjust_hue"], "methods", ["home.repos.pwc.inspect_result.shachoi_RobustNet.transforms.transforms.adjust_brightness", "home.repos.pwc.inspect_result.shachoi_RobustNet.transforms.transforms.adjust_contrast", "home.repos.pwc.inspect_result.shachoi_RobustNet.transforms.transforms.adjust_saturation", "home.repos.pwc.inspect_result.shachoi_RobustNet.transforms.transforms.adjust_hue"], ["", "@", "staticmethod", "\n", "def", "get_params", "(", "brightness", ",", "contrast", ",", "saturation", ",", "hue", ")", ":", "\n", "        ", "\"\"\"Get a randomized transform to be applied on image.\n\n        Arguments are same as that of __init__.\n\n        Returns:\n            Transform which randomly adjusts brightness, contrast and\n            saturation in a random order.\n        \"\"\"", "\n", "transforms", "=", "[", "]", "\n", "if", "brightness", ">", "0", ":", "\n", "            ", "brightness_factor", "=", "np", ".", "random", ".", "uniform", "(", "max", "(", "0", ",", "1", "-", "brightness", ")", ",", "1", "+", "brightness", ")", "\n", "transforms", ".", "append", "(", "\n", "torch_tr", ".", "Lambda", "(", "lambda", "img", ":", "adjust_brightness", "(", "img", ",", "brightness_factor", ")", ")", ")", "\n", "\n", "", "if", "contrast", ">", "0", ":", "\n", "            ", "contrast_factor", "=", "np", ".", "random", ".", "uniform", "(", "max", "(", "0", ",", "1", "-", "contrast", ")", ",", "1", "+", "contrast", ")", "\n", "transforms", ".", "append", "(", "\n", "torch_tr", ".", "Lambda", "(", "lambda", "img", ":", "adjust_contrast", "(", "img", ",", "contrast_factor", ")", ")", ")", "\n", "\n", "", "if", "saturation", ">", "0", ":", "\n", "            ", "saturation_factor", "=", "np", ".", "random", ".", "uniform", "(", "max", "(", "0", ",", "1", "-", "saturation", ")", ",", "1", "+", "saturation", ")", "\n", "transforms", ".", "append", "(", "\n", "torch_tr", ".", "Lambda", "(", "lambda", "img", ":", "adjust_saturation", "(", "img", ",", "saturation_factor", ")", ")", ")", "\n", "\n", "", "if", "hue", ">", "0", ":", "\n", "            ", "hue_factor", "=", "np", ".", "random", ".", "uniform", "(", "-", "hue", ",", "hue", ")", "\n", "transforms", ".", "append", "(", "\n", "torch_tr", ".", "Lambda", "(", "lambda", "img", ":", "adjust_hue", "(", "img", ",", "hue_factor", ")", ")", ")", "\n", "\n", "", "np", ".", "random", ".", "shuffle", "(", "transforms", ")", "\n", "transform", "=", "torch_tr", ".", "Compose", "(", "transforms", ")", "\n", "\n", "return", "transform", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.transforms.transforms.ColorJitter.__call__": [[349, 360], ["transforms.ColorJitter.get_params", "transforms.ColorJitter."], "methods", ["home.repos.pwc.inspect_result.shachoi_RobustNet.transforms.transforms.ColorJitter.get_params"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            img (PIL Image): Input image.\n\n        Returns:\n            PIL Image: Color jittered image.\n        \"\"\"", "\n", "transform", "=", "self", ".", "get_params", "(", "self", ".", "brightness", ",", "self", ".", "contrast", ",", "\n", "self", ".", "saturation", ",", "self", ".", "hue", ")", "\n", "return", "transform", "(", "img", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.shachoi_RobustNet.transforms.transforms._is_pil_image": [[184, 189], ["isinstance", "isinstance"], "function", ["None"], ["", "", "def", "_is_pil_image", "(", "img", ")", ":", "\n", "    ", "if", "accimage", "is", "not", "None", ":", "\n", "        ", "return", "isinstance", "(", "img", ",", "(", "Image", ".", "Image", ",", "accimage", ".", "Image", ")", ")", "\n", "", "else", ":", "\n", "        ", "return", "isinstance", "(", "img", ",", "Image", ".", "Image", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.transforms.transforms.adjust_brightness": [[191, 209], ["PIL.ImageEnhance.Brightness", "ImageEnhance.Brightness.enhance", "transforms._is_pil_image", "TypeError", "type"], "function", ["home.repos.pwc.inspect_result.shachoi_RobustNet.transforms.transforms._is_pil_image"], ["", "", "def", "adjust_brightness", "(", "img", ",", "brightness_factor", ")", ":", "\n", "    ", "\"\"\"Adjust brightness of an Image.\n\n    Args:\n        img (PIL Image): PIL Image to be adjusted.\n        brightness_factor (float):  How much to adjust the brightness. Can be\n            any non negative number. 0 gives a black image, 1 gives the\n            original image while 2 increases the brightness by a factor of 2.\n\n    Returns:\n        PIL Image: Brightness adjusted image.\n    \"\"\"", "\n", "if", "not", "_is_pil_image", "(", "img", ")", ":", "\n", "        ", "raise", "TypeError", "(", "'img should be PIL Image. Got {}'", ".", "format", "(", "type", "(", "img", ")", ")", ")", "\n", "\n", "", "enhancer", "=", "ImageEnhance", ".", "Brightness", "(", "img", ")", "\n", "img", "=", "enhancer", ".", "enhance", "(", "brightness_factor", ")", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.transforms.transforms.adjust_contrast": [[211, 229], ["PIL.ImageEnhance.Contrast", "ImageEnhance.Contrast.enhance", "transforms._is_pil_image", "TypeError", "type"], "function", ["home.repos.pwc.inspect_result.shachoi_RobustNet.transforms.transforms._is_pil_image"], ["", "def", "adjust_contrast", "(", "img", ",", "contrast_factor", ")", ":", "\n", "    ", "\"\"\"Adjust contrast of an Image.\n\n    Args:\n        img (PIL Image): PIL Image to be adjusted.\n        contrast_factor (float): How much to adjust the contrast. Can be any\n            non negative number. 0 gives a solid gray image, 1 gives the\n            original image while 2 increases the contrast by a factor of 2.\n\n    Returns:\n        PIL Image: Contrast adjusted image.\n    \"\"\"", "\n", "if", "not", "_is_pil_image", "(", "img", ")", ":", "\n", "        ", "raise", "TypeError", "(", "'img should be PIL Image. Got {}'", ".", "format", "(", "type", "(", "img", ")", ")", ")", "\n", "\n", "", "enhancer", "=", "ImageEnhance", ".", "Contrast", "(", "img", ")", "\n", "img", "=", "enhancer", ".", "enhance", "(", "contrast_factor", ")", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.transforms.transforms.adjust_saturation": [[231, 249], ["PIL.ImageEnhance.Color", "ImageEnhance.Color.enhance", "transforms._is_pil_image", "TypeError", "type"], "function", ["home.repos.pwc.inspect_result.shachoi_RobustNet.transforms.transforms._is_pil_image"], ["", "def", "adjust_saturation", "(", "img", ",", "saturation_factor", ")", ":", "\n", "    ", "\"\"\"Adjust color saturation of an image.\n\n    Args:\n        img (PIL Image): PIL Image to be adjusted.\n        saturation_factor (float):  How much to adjust the saturation. 0 will\n            give a black and white image, 1 will give the original image while\n            2 will enhance the saturation by a factor of 2.\n\n    Returns:\n        PIL Image: Saturation adjusted image.\n    \"\"\"", "\n", "if", "not", "_is_pil_image", "(", "img", ")", ":", "\n", "        ", "raise", "TypeError", "(", "'img should be PIL Image. Got {}'", ".", "format", "(", "type", "(", "img", ")", ")", ")", "\n", "\n", "", "enhancer", "=", "ImageEnhance", ".", "Color", "(", "img", ")", "\n", "img", "=", "enhancer", ".", "enhance", "(", "saturation_factor", ")", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.transforms.transforms.adjust_hue": [[251, 292], ["Image.merge().convert.convert().split", "numpy.array", "PIL.Image.fromarray", "PIL.Image.merge().convert", "ValueError", "transforms._is_pil_image", "TypeError", "numpy.errstate", "numpy.uint8", "Image.merge().convert.convert", "PIL.Image.merge", "type"], "function", ["home.repos.pwc.inspect_result.shachoi_RobustNet.transforms.transforms._is_pil_image"], ["", "def", "adjust_hue", "(", "img", ",", "hue_factor", ")", ":", "\n", "    ", "\"\"\"Adjust hue of an image.\n\n    The image hue is adjusted by converting the image to HSV and\n    cyclically shifting the intensities in the hue channel (H).\n    The image is then converted back to original image mode.\n\n    `hue_factor` is the amount of shift in H channel and must be in the\n    interval `[-0.5, 0.5]`.\n\n    See https://en.wikipedia.org/wiki/Hue for more details on Hue.\n\n    Args:\n        img (PIL Image): PIL Image to be adjusted.\n        hue_factor (float):  How much to shift the hue channel. Should be in\n            [-0.5, 0.5]. 0.5 and -0.5 give complete reversal of hue channel in\n            HSV space in positive and negative direction respectively.\n            0 means no shift. Therefore, both -0.5 and 0.5 will give an image\n            with complementary colors while 0 gives the original image.\n\n    Returns:\n        PIL Image: Hue adjusted image.\n    \"\"\"", "\n", "if", "not", "(", "-", "0.5", "<=", "hue_factor", "<=", "0.5", ")", ":", "\n", "        ", "raise", "ValueError", "(", "'hue_factor is not in [-0.5, 0.5].'", ".", "format", "(", "hue_factor", ")", ")", "\n", "\n", "", "if", "not", "_is_pil_image", "(", "img", ")", ":", "\n", "        ", "raise", "TypeError", "(", "'img should be PIL Image. Got {}'", ".", "format", "(", "type", "(", "img", ")", ")", ")", "\n", "", "input_mode", "=", "img", ".", "mode", "\n", "if", "input_mode", "in", "{", "'L'", ",", "'1'", ",", "'I'", ",", "'F'", "}", ":", "\n", "        ", "return", "img", "\n", "\n", "", "h", ",", "s", ",", "v", "=", "img", ".", "convert", "(", "'HSV'", ")", ".", "split", "(", ")", "\n", "\n", "np_h", "=", "np", ".", "array", "(", "h", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "# uint8 addition take cares of rotation across boundaries", "\n", "with", "np", ".", "errstate", "(", "over", "=", "'ignore'", ")", ":", "\n", "        ", "np_h", "+=", "np", ".", "uint8", "(", "hue_factor", "*", "255", ")", "\n", "", "h", "=", "Image", ".", "fromarray", "(", "np_h", ",", "'L'", ")", "\n", "img", "=", "Image", ".", "merge", "(", "'HSV'", ",", "(", "h", ",", "s", ",", "v", ")", ")", ".", "convert", "(", "input_mode", ")", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.transforms.joint_transforms.Compose.__init__": [[45, 47], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "transforms", ")", ":", "\n", "        ", "self", ".", "transforms", "=", "transforms", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.transforms.joint_transforms.Compose.__call__": [[48, 59], ["t", "t"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ",", "mask", ",", "pos", "=", "None", ")", ":", "\n", "        ", "assert", "img", ".", "size", "==", "mask", ".", "size", "\n", "\n", "if", "pos", "is", "not", "None", ":", "\n", "            ", "for", "t", "in", "self", ".", "transforms", ":", "\n", "                ", "img", ",", "mask", ",", "pos", "=", "t", "(", "img", ",", "mask", ",", "pos", "=", "pos", ")", "\n", "", "return", "img", ",", "mask", ",", "pos", "\n", "", "else", ":", "\n", "            ", "for", "t", "in", "self", ".", "transforms", ":", "\n", "                ", "img", ",", "mask", "=", "t", "(", "img", ",", "mask", ")", "\n", "", "return", "img", ",", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.transforms.joint_transforms.RandomCrop.__init__": [[75, 83], ["isinstance", "int", "int"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "size", ",", "ignore_index", "=", "0", ",", "nopad", "=", "True", ")", ":", "\n", "        ", "if", "isinstance", "(", "size", ",", "numbers", ".", "Number", ")", ":", "\n", "            ", "self", ".", "size", "=", "(", "int", "(", "size", ")", ",", "int", "(", "size", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "size", "=", "size", "\n", "", "self", ".", "ignore_index", "=", "ignore_index", "\n", "self", ".", "nopad", "=", "nopad", "\n", "self", ".", "pad_color", "=", "(", "0", ",", "0", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.transforms.joint_transforms.RandomCrop.__call__": [[84, 142], ["random.randint", "min", "random.randint", "min", "PIL.ImageOps.expand.crop", "PIL.ImageOps.expand.crop", "min", "PIL.ImageOps.expand", "PIL.ImageOps.expand", "max", "max", "random.randint", "random.randint", "pos[].crop", "pos[].crop", "PIL.ImageOps.expand.crop", "PIL.ImageOps.expand.crop", "PIL.ImageOps.expand", "PIL.ImageOps.expand"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ",", "mask", ",", "centroid", "=", "None", ",", "pos", "=", "None", ")", ":", "\n", "        ", "assert", "img", ".", "size", "==", "mask", ".", "size", "\n", "w", ",", "h", "=", "img", ".", "size", "\n", "# ASSUME H, W", "\n", "th", ",", "tw", "=", "self", ".", "size", "\n", "if", "w", "==", "tw", "and", "h", "==", "th", ":", "\n", "            ", "if", "pos", "is", "not", "None", ":", "\n", "                ", "return", "img", ",", "mask", ",", "pos", "\n", "", "return", "img", ",", "mask", "\n", "\n", "", "if", "self", ".", "nopad", ":", "\n", "            ", "if", "th", ">", "h", "or", "tw", ">", "w", ":", "\n", "# Instead of padding, adjust crop size to the shorter edge of image.", "\n", "                ", "shorter_side", "=", "min", "(", "w", ",", "h", ")", "\n", "th", ",", "tw", "=", "shorter_side", ",", "shorter_side", "\n", "", "", "else", ":", "\n", "# Check if we need to pad img to fit for crop_size.", "\n", "            ", "if", "th", ">", "h", ":", "\n", "                ", "pad_h", "=", "(", "th", "-", "h", ")", "//", "2", "+", "1", "\n", "", "else", ":", "\n", "                ", "pad_h", "=", "0", "\n", "", "if", "tw", ">", "w", ":", "\n", "                ", "pad_w", "=", "(", "tw", "-", "w", ")", "//", "2", "+", "1", "\n", "", "else", ":", "\n", "                ", "pad_w", "=", "0", "\n", "", "border", "=", "(", "pad_w", ",", "pad_h", ",", "pad_w", ",", "pad_h", ")", "\n", "if", "pad_h", "or", "pad_w", ":", "\n", "                ", "img", "=", "ImageOps", ".", "expand", "(", "img", ",", "border", "=", "border", ",", "fill", "=", "self", ".", "pad_color", ")", "\n", "mask", "=", "ImageOps", ".", "expand", "(", "mask", ",", "border", "=", "border", ",", "fill", "=", "self", ".", "ignore_index", ")", "\n", "w", ",", "h", "=", "img", ".", "size", "\n", "if", "pos", "is", "not", "None", ":", "\n", "                    ", "pos", "=", "ImageOps", ".", "expand", "(", "pos", "[", "0", "]", ",", "border", "=", "border", ",", "fill", "=", "IGNORE_POS", ")", ",", "ImageOps", ".", "expand", "(", "pos", "[", "1", "]", ",", "border", "=", "border", ",", "fill", "=", "IGNORE_POS", ")", "\n", "\n", "", "", "", "if", "centroid", "is", "not", "None", ":", "\n", "# Need to insure that centroid is covered by crop and that crop", "\n", "# sits fully within the image", "\n", "            ", "c_x", ",", "c_y", "=", "centroid", "\n", "max_x", "=", "w", "-", "tw", "\n", "max_y", "=", "h", "-", "th", "\n", "x1", "=", "random", ".", "randint", "(", "c_x", "-", "tw", ",", "c_x", ")", "\n", "x1", "=", "min", "(", "max_x", ",", "max", "(", "0", ",", "x1", ")", ")", "\n", "y1", "=", "random", ".", "randint", "(", "c_y", "-", "th", ",", "c_y", ")", "\n", "y1", "=", "min", "(", "max_y", ",", "max", "(", "0", ",", "y1", ")", ")", "\n", "", "else", ":", "\n", "            ", "if", "w", "==", "tw", ":", "\n", "                ", "x1", "=", "0", "\n", "", "else", ":", "\n", "                ", "x1", "=", "random", ".", "randint", "(", "0", ",", "w", "-", "tw", ")", "\n", "", "if", "h", "==", "th", ":", "\n", "                ", "y1", "=", "0", "\n", "", "else", ":", "\n", "                ", "y1", "=", "random", ".", "randint", "(", "0", ",", "h", "-", "th", ")", "\n", "\n", "", "", "if", "pos", "is", "not", "None", ":", "\n", "            ", "pos", "=", "pos", "[", "0", "]", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x1", "+", "tw", ",", "y1", "+", "th", ")", ")", ",", "pos", "[", "1", "]", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x1", "+", "tw", ",", "y1", "+", "th", ")", ")", "\n", "return", "img", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x1", "+", "tw", ",", "y1", "+", "th", ")", ")", ",", "mask", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x1", "+", "tw", ",", "y1", "+", "th", ")", ")", ",", "pos", "\n", "\n", "", "return", "img", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x1", "+", "tw", ",", "y1", "+", "th", ")", ")", ",", "mask", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x1", "+", "tw", ",", "y1", "+", "th", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.transforms.joint_transforms.ResizeHeight.__init__": [[145, 148], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "size", ",", "interpolation", "=", "Image", ".", "BICUBIC", ")", ":", "\n", "        ", "self", ".", "target_h", "=", "size", "\n", "self", ".", "interpolation", "=", "interpolation", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.transforms.joint_transforms.ResizeHeight.__call__": [[149, 154], ["int", "img.resize", "mask.resize"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "        ", "w", ",", "h", "=", "img", ".", "size", "\n", "target_w", "=", "int", "(", "w", "/", "h", "*", "self", ".", "target_h", ")", "\n", "return", "(", "img", ".", "resize", "(", "(", "target_w", ",", "self", ".", "target_h", ")", ",", "self", ".", "interpolation", ")", ",", "\n", "mask", ".", "resize", "(", "(", "target_w", ",", "self", ".", "target_h", ")", ",", "Image", ".", "NEAREST", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.transforms.joint_transforms.CenterCrop.__init__": [[157, 162], ["isinstance", "int", "int"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "size", ")", ":", "\n", "        ", "if", "isinstance", "(", "size", ",", "numbers", ".", "Number", ")", ":", "\n", "            ", "self", ".", "size", "=", "(", "int", "(", "size", ")", ",", "int", "(", "size", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "size", "=", "size", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.transforms.joint_transforms.CenterCrop.__call__": [[163, 170], ["int", "int", "round", "round", "img.crop", "mask.crop"], "methods", ["None"], ["", "", "def", "__call__", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "        ", "assert", "img", ".", "size", "==", "mask", ".", "size", "\n", "w", ",", "h", "=", "img", ".", "size", "\n", "th", ",", "tw", "=", "self", ".", "size", "\n", "x1", "=", "int", "(", "round", "(", "(", "w", "-", "tw", ")", "/", "2.", ")", ")", "\n", "y1", "=", "int", "(", "round", "(", "(", "h", "-", "th", ")", "/", "2.", ")", ")", "\n", "return", "img", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x1", "+", "tw", ",", "y1", "+", "th", ")", ")", ",", "mask", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x1", "+", "tw", ",", "y1", "+", "th", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.transforms.joint_transforms.CenterCropPad.__init__": [[173, 179], ["isinstance", "int", "int"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "size", ",", "ignore_index", "=", "0", ")", ":", "\n", "        ", "if", "isinstance", "(", "size", ",", "numbers", ".", "Number", ")", ":", "\n", "            ", "self", ".", "size", "=", "(", "int", "(", "size", ")", ",", "int", "(", "size", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "size", "=", "size", "\n", "", "self", ".", "ignore_index", "=", "ignore_index", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.transforms.joint_transforms.CenterCropPad.__call__": [[180, 208], ["isinstance", "int", "int", "PIL.ImageOps.expand", "PIL.ImageOps.expand", "round", "round", "PIL.ImageOps.expand.crop", "PIL.ImageOps.expand.crop"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "\n", "        ", "assert", "img", ".", "size", "==", "mask", ".", "size", "\n", "w", ",", "h", "=", "img", ".", "size", "\n", "if", "isinstance", "(", "self", ".", "size", ",", "tuple", ")", ":", "\n", "                ", "tw", ",", "th", "=", "self", ".", "size", "[", "0", "]", ",", "self", ".", "size", "[", "1", "]", "\n", "", "else", ":", "\n", "                ", "th", ",", "tw", "=", "self", ".", "size", ",", "self", ".", "size", "\n", "\n", "\n", "", "if", "w", "<", "tw", ":", "\n", "            ", "pad_x", "=", "tw", "-", "w", "\n", "", "else", ":", "\n", "            ", "pad_x", "=", "0", "\n", "", "if", "h", "<", "th", ":", "\n", "            ", "pad_y", "=", "th", "-", "h", "\n", "", "else", ":", "\n", "            ", "pad_y", "=", "0", "\n", "\n", "", "if", "pad_x", "or", "pad_y", ":", "\n", "# left, top, right, bottom", "\n", "            ", "img", "=", "ImageOps", ".", "expand", "(", "img", ",", "border", "=", "(", "pad_x", ",", "pad_y", ",", "pad_x", ",", "pad_y", ")", ",", "fill", "=", "0", ")", "\n", "mask", "=", "ImageOps", ".", "expand", "(", "mask", ",", "border", "=", "(", "pad_x", ",", "pad_y", ",", "pad_x", ",", "pad_y", ")", ",", "\n", "fill", "=", "self", ".", "ignore_index", ")", "\n", "\n", "", "x1", "=", "int", "(", "round", "(", "(", "w", "-", "tw", ")", "/", "2.", ")", ")", "\n", "y1", "=", "int", "(", "round", "(", "(", "h", "-", "th", ")", "/", "2.", ")", ")", "\n", "return", "img", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x1", "+", "tw", ",", "y1", "+", "th", ")", ")", ",", "mask", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x1", "+", "tw", ",", "y1", "+", "th", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.transforms.joint_transforms.PadImage.__init__": [[212, 215], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "size", ",", "ignore_index", ")", ":", "\n", "        ", "self", ".", "size", "=", "size", "\n", "self", ".", "ignore_index", "=", "ignore_index", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.transforms.joint_transforms.PadImage.__call__": [[217, 235], ["PIL.ImageOps.expand", "PIL.ImageOps.expand", "int", "float", "PIL.ImageOps.expand.resize", "PIL.ImageOps.expand.resize", "float", "float"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "        ", "assert", "img", ".", "size", "==", "mask", ".", "size", "\n", "th", ",", "tw", "=", "self", ".", "size", ",", "self", ".", "size", "\n", "\n", "\n", "w", ",", "h", "=", "img", ".", "size", "\n", "\n", "if", "w", ">", "tw", "or", "h", ">", "th", ":", "\n", "            ", "wpercent", "=", "(", "tw", "/", "float", "(", "w", ")", ")", "\n", "target_h", "=", "int", "(", "(", "float", "(", "img", ".", "size", "[", "1", "]", ")", "*", "float", "(", "wpercent", ")", ")", ")", "\n", "img", ",", "mask", "=", "img", ".", "resize", "(", "(", "tw", ",", "target_h", ")", ",", "Image", ".", "BICUBIC", ")", ",", "mask", ".", "resize", "(", "(", "tw", ",", "target_h", ")", ",", "Image", ".", "NEAREST", ")", "\n", "\n", "", "w", ",", "h", "=", "img", ".", "size", "\n", "##Pad", "\n", "img", "=", "ImageOps", ".", "expand", "(", "img", ",", "border", "=", "(", "0", ",", "0", ",", "tw", "-", "w", ",", "th", "-", "h", ")", ",", "fill", "=", "0", ")", "\n", "mask", "=", "ImageOps", ".", "expand", "(", "mask", ",", "border", "=", "(", "0", ",", "0", ",", "tw", "-", "w", ",", "th", "-", "h", ")", ",", "fill", "=", "self", ".", "ignore_index", ")", "\n", "\n", "return", "img", ",", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.transforms.joint_transforms.RandomHorizontallyFlip.__call__": [[237, 250], ["random.random", "pos[].transpose", "pos[].transpose", "img.transpose", "mask.transpose", "img.transpose", "mask.transpose"], "methods", ["None"], ["    ", "def", "__call__", "(", "self", ",", "img", ",", "mask", ",", "pos", "=", "None", ")", ":", "\n", "        ", "if", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "            ", "if", "pos", "is", "not", "None", ":", "\n", "                ", "pos", "=", "pos", "[", "0", "]", ".", "transpose", "(", "Image", ".", "FLIP_LEFT_RIGHT", ")", ",", "pos", "[", "1", "]", ".", "transpose", "(", "Image", ".", "FLIP_LEFT_RIGHT", ")", "\n", "return", "img", ".", "transpose", "(", "Image", ".", "FLIP_LEFT_RIGHT", ")", ",", "mask", ".", "transpose", "(", "\n", "Image", ".", "FLIP_LEFT_RIGHT", ")", ",", "pos", "\n", "", "else", ":", "\n", "                ", "return", "img", ".", "transpose", "(", "Image", ".", "FLIP_LEFT_RIGHT", ")", ",", "mask", ".", "transpose", "(", "\n", "Image", ".", "FLIP_LEFT_RIGHT", ")", "\n", "\n", "", "", "if", "pos", "is", "not", "None", ":", "\n", "            ", "return", "img", ",", "mask", ",", "pos", "\n", "", "return", "img", ",", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.transforms.joint_transforms.FreeScale.__init__": [[253, 255], ["tuple", "reversed"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "size", ")", ":", "\n", "        ", "self", ".", "size", "=", "tuple", "(", "reversed", "(", "size", ")", ")", "# size: (h, w)", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.transforms.joint_transforms.FreeScale.__call__": [[256, 259], ["img.resize", "mask.resize"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "        ", "assert", "img", ".", "size", "==", "mask", ".", "size", "\n", "return", "img", ".", "resize", "(", "self", ".", "size", ",", "Image", ".", "BICUBIC", ")", ",", "mask", ".", "resize", "(", "self", ".", "size", ",", "Image", ".", "NEAREST", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.transforms.joint_transforms.Scale.__init__": [[266, 268], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "size", ")", ":", "\n", "        ", "self", ".", "size", "=", "size", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.transforms.joint_transforms.Scale.__call__": [[269, 284], ["int", "int", "img.resize", "mask.resize", "img.resize", "mask.resize"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "        ", "assert", "img", ".", "size", "==", "mask", ".", "size", "\n", "w", ",", "h", "=", "img", ".", "size", "\n", "if", "(", "w", ">=", "h", "and", "w", "==", "self", ".", "size", ")", "or", "(", "h", ">=", "w", "and", "h", "==", "self", ".", "size", ")", ":", "\n", "            ", "return", "img", ",", "mask", "\n", "", "if", "w", ">", "h", ":", "\n", "            ", "ow", "=", "self", ".", "size", "\n", "oh", "=", "int", "(", "self", ".", "size", "*", "h", "/", "w", ")", "\n", "return", "img", ".", "resize", "(", "(", "ow", ",", "oh", ")", ",", "Image", ".", "BICUBIC", ")", ",", "mask", ".", "resize", "(", "\n", "(", "ow", ",", "oh", ")", ",", "Image", ".", "NEAREST", ")", "\n", "", "else", ":", "\n", "            ", "oh", "=", "self", ".", "size", "\n", "ow", "=", "int", "(", "self", ".", "size", "*", "w", "/", "h", ")", "\n", "return", "img", ".", "resize", "(", "(", "ow", ",", "oh", ")", ",", "Image", ".", "BICUBIC", ")", ",", "mask", ".", "resize", "(", "\n", "(", "ow", ",", "oh", ")", ",", "Image", ".", "NEAREST", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.transforms.joint_transforms.ScaleMin.__init__": [[291, 293], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "size", ")", ":", "\n", "        ", "self", ".", "size", "=", "size", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.transforms.joint_transforms.ScaleMin.__call__": [[294, 309], ["int", "int", "img.resize", "mask.resize", "img.resize", "mask.resize"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "        ", "assert", "img", ".", "size", "==", "mask", ".", "size", "\n", "w", ",", "h", "=", "img", ".", "size", "\n", "if", "(", "w", "<=", "h", "and", "w", "==", "self", ".", "size", ")", "or", "(", "h", "<=", "w", "and", "h", "==", "self", ".", "size", ")", ":", "\n", "            ", "return", "img", ",", "mask", "\n", "", "if", "w", "<", "h", ":", "\n", "            ", "ow", "=", "self", ".", "size", "\n", "oh", "=", "int", "(", "self", ".", "size", "*", "h", "/", "w", ")", "\n", "return", "img", ".", "resize", "(", "(", "ow", ",", "oh", ")", ",", "Image", ".", "BICUBIC", ")", ",", "mask", ".", "resize", "(", "\n", "(", "ow", ",", "oh", ")", ",", "Image", ".", "NEAREST", ")", "\n", "", "else", ":", "\n", "            ", "oh", "=", "self", ".", "size", "\n", "ow", "=", "int", "(", "self", ".", "size", "*", "w", "/", "h", ")", "\n", "return", "img", ".", "resize", "(", "(", "ow", ",", "oh", ")", ",", "Image", ".", "BICUBIC", ")", ",", "mask", ".", "resize", "(", "\n", "(", "ow", ",", "oh", ")", ",", "Image", ".", "NEAREST", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.transforms.joint_transforms.Resize.__init__": [[316, 318], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "size", ")", ":", "\n", "        ", "self", ".", "size", "=", "(", "size", ",", "size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.transforms.joint_transforms.Resize.__call__": [[319, 333], ["img.resize", "mask.resize", "pos[].resize", "pos[].resize", "img.resize", "mask.resize"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ",", "mask", ",", "pos", "=", "None", ")", ":", "\n", "        ", "assert", "img", ".", "size", "==", "mask", ".", "size", "\n", "w", ",", "h", "=", "img", ".", "size", "\n", "if", "pos", "is", "not", "None", ":", "\n", "            ", "if", "(", "w", "==", "h", "and", "w", "==", "self", ".", "size", ")", ":", "\n", "                ", "return", "img", ",", "mask", ",", "pos", "\n", "", "pos", "=", "pos", "[", "0", "]", ".", "resize", "(", "self", ".", "size", ",", "Image", ".", "NEAREST", ")", ",", "pos", "[", "1", "]", ".", "resize", "(", "self", ".", "size", ",", "Image", ".", "NEAREST", ")", "\n", "return", "(", "img", ".", "resize", "(", "self", ".", "size", ",", "Image", ".", "BICUBIC", ")", ",", "\n", "mask", ".", "resize", "(", "self", ".", "size", ",", "Image", ".", "NEAREST", ")", ",", "pos", ")", "\n", "\n", "", "if", "(", "w", "==", "h", "and", "w", "==", "self", ".", "size", ")", ":", "\n", "            ", "return", "img", ",", "mask", "\n", "", "return", "(", "img", ".", "resize", "(", "self", ".", "size", ",", "Image", ".", "BICUBIC", ")", ",", "\n", "mask", ".", "resize", "(", "self", ".", "size", ",", "Image", ".", "NEAREST", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.transforms.joint_transforms.RandomSizedCrop.__init__": [[336, 338], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "size", ")", ":", "\n", "        ", "self", ".", "size", "=", "size", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.transforms.joint_transforms.RandomSizedCrop.__call__": [[339, 367], ["range", "joint_transforms.Scale", "joint_transforms.CenterCrop", "CenterCrop.", "random.uniform", "int", "int", "random.uniform", "round", "round", "random.random", "random.randint", "random.randint", "img.crop.crop.crop", "mask.crop.crop.crop", "Scale.", "math.sqrt", "math.sqrt", "img.crop.crop.resize", "mask.crop.crop.resize"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "        ", "assert", "img", ".", "size", "==", "mask", ".", "size", "\n", "for", "attempt", "in", "range", "(", "10", ")", ":", "\n", "            ", "area", "=", "img", ".", "size", "[", "0", "]", "*", "img", ".", "size", "[", "1", "]", "\n", "target_area", "=", "random", ".", "uniform", "(", "0.45", ",", "1.0", ")", "*", "area", "\n", "aspect_ratio", "=", "random", ".", "uniform", "(", "0.5", ",", "2", ")", "\n", "\n", "w", "=", "int", "(", "round", "(", "math", ".", "sqrt", "(", "target_area", "*", "aspect_ratio", ")", ")", ")", "\n", "h", "=", "int", "(", "round", "(", "math", ".", "sqrt", "(", "target_area", "/", "aspect_ratio", ")", ")", ")", "\n", "\n", "if", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "                ", "w", ",", "h", "=", "h", ",", "w", "\n", "\n", "", "if", "w", "<=", "img", ".", "size", "[", "0", "]", "and", "h", "<=", "img", ".", "size", "[", "1", "]", ":", "\n", "                ", "x1", "=", "random", ".", "randint", "(", "0", ",", "img", ".", "size", "[", "0", "]", "-", "w", ")", "\n", "y1", "=", "random", ".", "randint", "(", "0", ",", "img", ".", "size", "[", "1", "]", "-", "h", ")", "\n", "\n", "img", "=", "img", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x1", "+", "w", ",", "y1", "+", "h", ")", ")", "\n", "mask", "=", "mask", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x1", "+", "w", ",", "y1", "+", "h", ")", ")", "\n", "assert", "(", "img", ".", "size", "==", "(", "w", ",", "h", ")", ")", "\n", "\n", "return", "img", ".", "resize", "(", "(", "self", ".", "size", ",", "self", ".", "size", ")", ",", "Image", ".", "BICUBIC", ")", ",", "mask", ".", "resize", "(", "(", "self", ".", "size", ",", "self", ".", "size", ")", ",", "Image", ".", "NEAREST", ")", "\n", "\n", "# Fallback", "\n", "", "", "scale", "=", "Scale", "(", "self", ".", "size", ")", "\n", "crop", "=", "CenterCrop", "(", "self", ".", "size", ")", "\n", "return", "crop", "(", "*", "scale", "(", "img", ",", "mask", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.transforms.joint_transforms.RandomRotate.__init__": [[370, 374], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "degree", ",", "ignore_index", ")", ":", "\n", "        ", "self", ".", "degree", "=", "degree", "\n", "self", ".", "ignore_index", "=", "ignore_index", "\n", "self", ".", "pad_color", "=", "(", "0", ",", "0", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.transforms.joint_transforms.RandomRotate.__call__": [[376, 410], ["torchvision.affine", "torchvision.affine", "torchvision.affine", "torchvision.affine", "random.random"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ",", "mask", ",", "centroid", "=", "None", ",", "pos", "=", "None", ")", ":", "\n", "        ", "rotate_degree", "=", "random", ".", "random", "(", ")", "*", "2", "*", "self", ".", "degree", "-", "self", ".", "degree", "\n", "img", "=", "tf", ".", "affine", "(", "img", ",", "\n", "translate", "=", "(", "0", ",", "0", ")", ",", "\n", "scale", "=", "1.0", ",", "\n", "angle", "=", "rotate_degree", ",", "\n", "resample", "=", "Image", ".", "BICUBIC", ",", "\n", "fillcolor", "=", "self", ".", "pad_color", ",", "\n", "shear", "=", "0.0", ")", "\n", "mask", "=", "tf", ".", "affine", "(", "mask", ",", "\n", "translate", "=", "(", "0", ",", "0", ")", ",", "\n", "scale", "=", "1.0", ",", "\n", "angle", "=", "rotate_degree", ",", "\n", "resample", "=", "Image", ".", "NEAREST", ",", "\n", "fillcolor", "=", "self", ".", "ignore_index", ",", "\n", "shear", "=", "0.0", ")", "\n", "if", "pos", "is", "not", "None", ":", "\n", "            ", "pos", "=", "(", "tf", ".", "affine", "(", "pos", "[", "0", "]", ",", "\n", "translate", "=", "(", "0", ",", "0", ")", ",", "\n", "scale", "=", "1.0", ",", "\n", "angle", "=", "rotate_degree", ",", "\n", "resample", "=", "Image", ".", "NEAREST", ",", "\n", "fillcolor", "=", "IGNORE_POS", ",", "\n", "shear", "=", "0.0", ")", ",", "\n", "tf", ".", "affine", "(", "pos", "[", "1", "]", ",", "\n", "translate", "=", "(", "0", ",", "0", ")", ",", "\n", "scale", "=", "1.0", ",", "\n", "angle", "=", "rotate_degree", ",", "\n", "resample", "=", "Image", ".", "NEAREST", ",", "\n", "fillcolor", "=", "IGNORE_POS", ",", "\n", "shear", "=", "0.0", ")", ")", "\n", "return", "img", ",", "mask", ",", "pos", "\n", "\n", "", "return", "img", ",", "mask", "\n", "# return img.rotate(rotate_degree, Image.BICUBIC), mask.rotate(", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.transforms.joint_transforms.RandomSizeAndCrop.__init__": [[415, 422], ["joint_transforms.RandomCrop"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "size", ",", "crop_nopad", ",", "\n", "scale_min", "=", "0.5", ",", "scale_max", "=", "2.0", ",", "ignore_index", "=", "0", ",", "pre_size", "=", "None", ")", ":", "\n", "        ", "self", ".", "size", "=", "size", "\n", "self", ".", "crop", "=", "RandomCrop", "(", "self", ".", "size", ",", "ignore_index", "=", "ignore_index", ",", "nopad", "=", "crop_nopad", ")", "\n", "self", ".", "scale_min", "=", "scale_min", "\n", "self", ".", "scale_max", "=", "scale_max", "\n", "self", ".", "pre_size", "=", "pre_size", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.transforms.joint_transforms.RandomSizeAndCrop.__call__": [[423, 445], ["random.uniform", "joint_transforms.RandomSizeAndCrop.crop", "int", "img.resize", "mask.resize", "int", "pos[].resize", "pos[].resize"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ",", "mask", ",", "centroid", "=", "None", ",", "pos", "=", "None", ")", ":", "\n", "        ", "assert", "img", ".", "size", "==", "mask", ".", "size", "\n", "\n", "# first, resize such that shorter edge is pre_size", "\n", "if", "self", ".", "pre_size", "is", "None", ":", "\n", "            ", "scale_amt", "=", "1.", "\n", "", "elif", "img", ".", "size", "[", "1", "]", "<", "img", ".", "size", "[", "0", "]", ":", "\n", "            ", "scale_amt", "=", "self", ".", "pre_size", "/", "img", ".", "size", "[", "1", "]", "\n", "", "else", ":", "\n", "            ", "scale_amt", "=", "self", ".", "pre_size", "/", "img", ".", "size", "[", "0", "]", "\n", "", "scale_amt", "*=", "random", ".", "uniform", "(", "self", ".", "scale_min", ",", "self", ".", "scale_max", ")", "\n", "w", ",", "h", "=", "[", "int", "(", "i", "*", "scale_amt", ")", "for", "i", "in", "img", ".", "size", "]", "\n", "\n", "if", "centroid", "is", "not", "None", ":", "\n", "            ", "centroid", "=", "[", "int", "(", "c", "*", "scale_amt", ")", "for", "c", "in", "centroid", "]", "\n", "\n", "", "img", ",", "mask", "=", "img", ".", "resize", "(", "(", "w", ",", "h", ")", ",", "Image", ".", "BICUBIC", ")", ",", "mask", ".", "resize", "(", "(", "w", ",", "h", ")", ",", "Image", ".", "NEAREST", ")", "\n", "\n", "if", "pos", "is", "not", "None", ":", "\n", "            ", "pos", "=", "pos", "[", "0", "]", ".", "resize", "(", "(", "w", ",", "h", ")", ",", "Image", ".", "NEAREST", ")", ",", "pos", "[", "1", "]", ".", "resize", "(", "(", "w", ",", "h", ")", ",", "Image", ".", "NEAREST", ")", "\n", "\n", "", "return", "self", ".", "crop", "(", "img", ",", "mask", ",", "centroid", ",", "pos", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.transforms.joint_transforms.SlidingCropOld.__init__": [[448, 452], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "crop_size", ",", "stride_rate", ",", "ignore_label", ")", ":", "\n", "        ", "self", ".", "crop_size", "=", "crop_size", "\n", "self", ".", "stride_rate", "=", "stride_rate", "\n", "self", ".", "ignore_label", "=", "ignore_label", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.transforms.joint_transforms.SlidingCropOld._pad": [[453, 461], ["max", "max", "numpy.pad", "numpy.pad"], "methods", ["None"], ["", "def", "_pad", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "        ", "h", ",", "w", "=", "img", ".", "shape", "[", ":", "2", "]", "\n", "pad_h", "=", "max", "(", "self", ".", "crop_size", "-", "h", ",", "0", ")", "\n", "pad_w", "=", "max", "(", "self", ".", "crop_size", "-", "w", ",", "0", ")", "\n", "img", "=", "np", ".", "pad", "(", "img", ",", "(", "(", "0", ",", "pad_h", ")", ",", "(", "0", ",", "pad_w", ")", ",", "(", "0", ",", "0", ")", ")", ",", "'constant'", ")", "\n", "mask", "=", "np", ".", "pad", "(", "mask", ",", "(", "(", "0", ",", "pad_h", ")", ",", "(", "0", ",", "pad_w", ")", ")", ",", "'constant'", ",", "\n", "constant_values", "=", "self", ".", "ignore_label", ")", "\n", "return", "img", ",", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.transforms.joint_transforms.SlidingCropOld.__call__": [[462, 497], ["max", "numpy.array", "numpy.array", "int", "range", "joint_transforms.SlidingCropOld._pad", "PIL.Image.fromarray().convert", "PIL.Image.fromarray().convert", "math.ceil", "int", "int", "range", "math.ceil", "math.ceil", "joint_transforms.SlidingCropOld._pad", "img_sublist.append", "mask_sublist.append", "PIL.Image.fromarray", "PIL.Image.fromarray", "PIL.Image.fromarray().convert", "PIL.Image.fromarray().convert", "PIL.Image.fromarray().convert.astype", "PIL.Image.fromarray().convert.astype", "float", "float", "PIL.Image.fromarray", "PIL.Image.fromarray", "img_sub.astype", "mask_sub.astype"], "methods", ["home.repos.pwc.inspect_result.shachoi_RobustNet.transforms.joint_transforms.SlidingCrop._pad", "home.repos.pwc.inspect_result.shachoi_RobustNet.transforms.joint_transforms.SlidingCrop._pad"], ["", "def", "__call__", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "        ", "assert", "img", ".", "size", "==", "mask", ".", "size", "\n", "\n", "w", ",", "h", "=", "img", ".", "size", "\n", "long_size", "=", "max", "(", "h", ",", "w", ")", "\n", "\n", "img", "=", "np", ".", "array", "(", "img", ")", "\n", "mask", "=", "np", ".", "array", "(", "mask", ")", "\n", "\n", "if", "long_size", ">", "self", ".", "crop_size", ":", "\n", "            ", "stride", "=", "int", "(", "math", ".", "ceil", "(", "self", ".", "crop_size", "*", "self", ".", "stride_rate", ")", ")", "\n", "h_step_num", "=", "int", "(", "math", ".", "ceil", "(", "(", "h", "-", "self", ".", "crop_size", ")", "/", "float", "(", "stride", ")", ")", ")", "+", "1", "\n", "w_step_num", "=", "int", "(", "math", ".", "ceil", "(", "(", "w", "-", "self", ".", "crop_size", ")", "/", "float", "(", "stride", ")", ")", ")", "+", "1", "\n", "img_sublist", ",", "mask_sublist", "=", "[", "]", ",", "[", "]", "\n", "for", "yy", "in", "range", "(", "h_step_num", ")", ":", "\n", "                ", "for", "xx", "in", "range", "(", "w_step_num", ")", ":", "\n", "                    ", "sy", ",", "sx", "=", "yy", "*", "stride", ",", "xx", "*", "stride", "\n", "ey", ",", "ex", "=", "sy", "+", "self", ".", "crop_size", ",", "sx", "+", "self", ".", "crop_size", "\n", "img_sub", "=", "img", "[", "sy", ":", "ey", ",", "sx", ":", "ex", ",", ":", "]", "\n", "mask_sub", "=", "mask", "[", "sy", ":", "ey", ",", "sx", ":", "ex", "]", "\n", "img_sub", ",", "mask_sub", "=", "self", ".", "_pad", "(", "img_sub", ",", "mask_sub", ")", "\n", "img_sublist", ".", "append", "(", "\n", "Image", ".", "fromarray", "(", "\n", "img_sub", ".", "astype", "(", "\n", "np", ".", "uint8", ")", ")", ".", "convert", "(", "'RGB'", ")", ")", "\n", "mask_sublist", ".", "append", "(", "\n", "Image", ".", "fromarray", "(", "\n", "mask_sub", ".", "astype", "(", "\n", "np", ".", "uint8", ")", ")", ".", "convert", "(", "'P'", ")", ")", "\n", "", "", "return", "img_sublist", ",", "mask_sublist", "\n", "", "else", ":", "\n", "            ", "img", ",", "mask", "=", "self", ".", "_pad", "(", "img", ",", "mask", ")", "\n", "img", "=", "Image", ".", "fromarray", "(", "img", ".", "astype", "(", "np", ".", "uint8", ")", ")", ".", "convert", "(", "'RGB'", ")", "\n", "mask", "=", "Image", ".", "fromarray", "(", "mask", ".", "astype", "(", "np", ".", "uint8", ")", ")", ".", "convert", "(", "'P'", ")", "\n", "return", "img", ",", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.transforms.joint_transforms.SlidingCrop.__init__": [[500, 504], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "crop_size", ",", "stride_rate", ",", "ignore_label", ")", ":", "\n", "        ", "self", ".", "crop_size", "=", "crop_size", "\n", "self", ".", "stride_rate", "=", "stride_rate", "\n", "self", ".", "ignore_label", "=", "ignore_label", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.transforms.joint_transforms.SlidingCrop._pad": [[505, 513], ["max", "max", "numpy.pad", "numpy.pad"], "methods", ["None"], ["", "def", "_pad", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "        ", "h", ",", "w", "=", "img", ".", "shape", "[", ":", "2", "]", "\n", "pad_h", "=", "max", "(", "self", ".", "crop_size", "-", "h", ",", "0", ")", "\n", "pad_w", "=", "max", "(", "self", ".", "crop_size", "-", "w", ",", "0", ")", "\n", "img", "=", "np", ".", "pad", "(", "img", ",", "(", "(", "0", ",", "pad_h", ")", ",", "(", "0", ",", "pad_w", ")", ",", "(", "0", ",", "0", ")", ")", ",", "'constant'", ")", "\n", "mask", "=", "np", ".", "pad", "(", "mask", ",", "(", "(", "0", ",", "pad_h", ")", ",", "(", "0", ",", "pad_w", ")", ")", ",", "'constant'", ",", "\n", "constant_values", "=", "self", ".", "ignore_label", ")", "\n", "return", "img", ",", "mask", ",", "h", ",", "w", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.transforms.joint_transforms.SlidingCrop.__call__": [[514, 550], ["max", "numpy.array", "numpy.array", "int", "range", "joint_transforms.SlidingCrop._pad", "PIL.Image.fromarray().convert", "PIL.Image.fromarray().convert", "math.ceil", "int", "int", "range", "math.ceil", "math.ceil", "joint_transforms.SlidingCrop._pad", "img_slices.append", "mask_slices.append", "slices_info.append", "PIL.Image.fromarray", "PIL.Image.fromarray", "PIL.Image.fromarray().convert", "PIL.Image.fromarray().convert", "PIL.Image.fromarray().convert.astype", "PIL.Image.fromarray().convert.astype", "float", "float", "PIL.Image.fromarray", "PIL.Image.fromarray", "img_sub.astype", "mask_sub.astype"], "methods", ["home.repos.pwc.inspect_result.shachoi_RobustNet.transforms.joint_transforms.SlidingCrop._pad", "home.repos.pwc.inspect_result.shachoi_RobustNet.transforms.joint_transforms.SlidingCrop._pad"], ["", "def", "__call__", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "        ", "assert", "img", ".", "size", "==", "mask", ".", "size", "\n", "\n", "w", ",", "h", "=", "img", ".", "size", "\n", "long_size", "=", "max", "(", "h", ",", "w", ")", "\n", "\n", "img", "=", "np", ".", "array", "(", "img", ")", "\n", "mask", "=", "np", ".", "array", "(", "mask", ")", "\n", "\n", "if", "long_size", ">", "self", ".", "crop_size", ":", "\n", "            ", "stride", "=", "int", "(", "math", ".", "ceil", "(", "self", ".", "crop_size", "*", "self", ".", "stride_rate", ")", ")", "\n", "h_step_num", "=", "int", "(", "math", ".", "ceil", "(", "(", "h", "-", "self", ".", "crop_size", ")", "/", "float", "(", "stride", ")", ")", ")", "+", "1", "\n", "w_step_num", "=", "int", "(", "math", ".", "ceil", "(", "(", "w", "-", "self", ".", "crop_size", ")", "/", "float", "(", "stride", ")", ")", ")", "+", "1", "\n", "img_slices", ",", "mask_slices", ",", "slices_info", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "yy", "in", "range", "(", "h_step_num", ")", ":", "\n", "                ", "for", "xx", "in", "range", "(", "w_step_num", ")", ":", "\n", "                    ", "sy", ",", "sx", "=", "yy", "*", "stride", ",", "xx", "*", "stride", "\n", "ey", ",", "ex", "=", "sy", "+", "self", ".", "crop_size", ",", "sx", "+", "self", ".", "crop_size", "\n", "img_sub", "=", "img", "[", "sy", ":", "ey", ",", "sx", ":", "ex", ",", ":", "]", "\n", "mask_sub", "=", "mask", "[", "sy", ":", "ey", ",", "sx", ":", "ex", "]", "\n", "img_sub", ",", "mask_sub", ",", "sub_h", ",", "sub_w", "=", "self", ".", "_pad", "(", "img_sub", ",", "mask_sub", ")", "\n", "img_slices", ".", "append", "(", "\n", "Image", ".", "fromarray", "(", "\n", "img_sub", ".", "astype", "(", "\n", "np", ".", "uint8", ")", ")", ".", "convert", "(", "'RGB'", ")", ")", "\n", "mask_slices", ".", "append", "(", "\n", "Image", ".", "fromarray", "(", "\n", "mask_sub", ".", "astype", "(", "\n", "np", ".", "uint8", ")", ")", ".", "convert", "(", "'P'", ")", ")", "\n", "slices_info", ".", "append", "(", "[", "sy", ",", "ey", ",", "sx", ",", "ex", ",", "sub_h", ",", "sub_w", "]", ")", "\n", "", "", "return", "img_slices", ",", "mask_slices", ",", "slices_info", "\n", "", "else", ":", "\n", "            ", "img", ",", "mask", ",", "sub_h", ",", "sub_w", "=", "self", ".", "_pad", "(", "img", ",", "mask", ")", "\n", "img", "=", "Image", ".", "fromarray", "(", "img", ".", "astype", "(", "np", ".", "uint8", ")", ")", ".", "convert", "(", "'RGB'", ")", "\n", "mask", "=", "Image", ".", "fromarray", "(", "mask", ".", "astype", "(", "np", ".", "uint8", ")", ")", ".", "convert", "(", "'P'", ")", "\n", "return", "[", "img", "]", ",", "[", "mask", "]", ",", "[", "[", "0", ",", "sub_h", ",", "0", ",", "sub_w", ",", "sub_h", ",", "sub_w", "]", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.transforms.joint_transforms.ClassUniform.__init__": [[553, 571], ["joint_transforms.RandomCrop", "class_list.replace().split", "class_list.replace"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "size", ",", "crop_nopad", ",", "scale_min", "=", "0.5", ",", "scale_max", "=", "2.0", ",", "ignore_index", "=", "0", ",", "\n", "class_list", "=", "[", "16", ",", "15", ",", "14", "]", ")", ":", "\n", "        ", "\"\"\"\n        This is the initialization for class uniform sampling\n        :param size: crop size (int)\n        :param crop_nopad: Padding or no padding (bool)\n        :param scale_min: Minimum Scale (float)\n        :param scale_max: Maximum Scale (float)\n        :param ignore_index: The index value to ignore in the GT images (unsigned int)\n        :param class_list: A list of class to sample around, by default Truck, train, bus\n        \"\"\"", "\n", "self", ".", "size", "=", "size", "\n", "self", ".", "crop", "=", "RandomCrop", "(", "self", ".", "size", ",", "ignore_index", "=", "ignore_index", ",", "nopad", "=", "crop_nopad", ")", "\n", "\n", "self", ".", "class_list", "=", "class_list", ".", "replace", "(", "\" \"", ",", "\"\"", ")", ".", "split", "(", "\",\"", ")", "\n", "\n", "self", ".", "scale_min", "=", "scale_min", "\n", "self", ".", "scale_max", "=", "scale_max", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.transforms.joint_transforms.ClassUniform.detect_peaks": [[572, 607], ["generate_binary_structure", "binary_erosion", "maximum_filter"], "methods", ["None"], ["", "def", "detect_peaks", "(", "self", ",", "image", ")", ":", "\n", "        ", "\"\"\"\n        Takes an image and detect the peaks usingthe local maximum filter.\n        Returns a boolean mask of the peaks (i.e. 1 when\n        the pixel's value is the neighborhood maximum, 0 otherwise)\n\n        :param image: An 2d input images\n        :return: Binary output images of the same size as input with pixel value equal\n        to 1 indicating that there is peak at that point\n        \"\"\"", "\n", "\n", "# define an 8-connected neighborhood", "\n", "neighborhood", "=", "generate_binary_structure", "(", "2", ",", "2", ")", "\n", "\n", "# apply the local maximum filter; all pixel of maximal value", "\n", "# in their neighborhood are set to 1", "\n", "local_max", "=", "maximum_filter", "(", "image", ",", "footprint", "=", "neighborhood", ")", "==", "image", "\n", "# local_max is a mask that contains the peaks we are", "\n", "# looking for, but also the background.", "\n", "# In order to isolate the peaks we must remove the background from the mask.", "\n", "\n", "# we create the mask of the background", "\n", "background", "=", "(", "image", "==", "0", ")", "\n", "\n", "# a little technicality: we must erode the background in order to", "\n", "# successfully subtract it form local_max, otherwise a line will", "\n", "# appear along the background border (artifact of the local maximum filter)", "\n", "eroded_background", "=", "binary_erosion", "(", "background", ",", "structure", "=", "neighborhood", ",", "\n", "border_value", "=", "1", ")", "\n", "\n", "# we obtain the final mask, containing only peaks,", "\n", "# by removing the background from the local_max mask (xor operation)", "\n", "detected_peaks", "=", "local_max", "^", "eroded_background", "\n", "\n", "return", "detected_peaks", "\n", "\n"]], "home.repos.pwc.inspect_result.shachoi_RobustNet.transforms.joint_transforms.ClassUniform.__call__": [[608, 686], ["random.uniform", "int", "int", "joint_transforms.ClassUniform.crop", "numpy.array", "numpy.zeros", "numpy.zeros().astype", "numpy.zeros().astype", "range", "joint_transforms.ClassUniform.detect_peaks", "numpy.column_stack().tolist", "img.resize", "mask.resize", "img.resize", "mask.resize", "numpy.where", "range", "len", "joint_transforms.ClassUniform.crop", "numpy.random.randint", "random.uniform", "random.uniform", "img_new.crop", "mask_new.crop", "numpy.zeros", "numpy.zeros", "origarr[].sum", "origarr[].sum", "float", "float", "numpy.column_stack", "len", "int", "int", "max", "max", "max", "max", "numpy.where.astype", "numpy.where.sum", "numpy.isnan", "numpy.where", "int", "int"], "methods", ["home.repos.pwc.inspect_result.shachoi_RobustNet.transforms.joint_transforms.ClassUniform.detect_peaks"], ["", "def", "__call__", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "        ", "\"\"\"\n        :param img: PIL Input Image\n        :param mask: PIL Input Mask\n        :return: PIL output PIL (mask, crop) of self.crop_size\n        \"\"\"", "\n", "assert", "img", ".", "size", "==", "mask", ".", "size", "\n", "\n", "scale_amt", "=", "random", ".", "uniform", "(", "self", ".", "scale_min", ",", "self", ".", "scale_max", ")", "\n", "w", "=", "int", "(", "scale_amt", "*", "img", ".", "size", "[", "0", "]", ")", "\n", "h", "=", "int", "(", "scale_amt", "*", "img", ".", "size", "[", "1", "]", ")", "\n", "\n", "if", "scale_amt", "<", "1.0", ":", "\n", "            ", "img", ",", "mask", "=", "img", ".", "resize", "(", "(", "w", ",", "h", ")", ",", "Image", ".", "BICUBIC", ")", ",", "mask", ".", "resize", "(", "(", "w", ",", "h", ")", ",", "\n", "Image", ".", "NEAREST", ")", "\n", "return", "self", ".", "crop", "(", "img", ",", "mask", ")", "\n", "", "else", ":", "\n", "# Smart Crop ( Class Uniform's ABN)", "\n", "            ", "origw", ",", "origh", "=", "mask", ".", "size", "\n", "img_new", ",", "mask_new", "=", "img", ".", "resize", "(", "(", "w", ",", "h", ")", ",", "Image", ".", "BICUBIC", ")", ",", "mask", ".", "resize", "(", "(", "w", ",", "h", ")", ",", "Image", ".", "NEAREST", ")", "\n", "interested_class", "=", "self", ".", "class_list", "# [16, 15, 14]  # Train, Truck, Bus", "\n", "data", "=", "np", ".", "array", "(", "mask", ")", "\n", "arr", "=", "np", ".", "zeros", "(", "(", "1024", ",", "2048", ")", ")", "\n", "for", "class_of_interest", "in", "interested_class", ":", "\n", "# hist = np.histogram(data==class_of_interest)", "\n", "                ", "map", "=", "np", ".", "where", "(", "data", "==", "class_of_interest", ",", "data", ",", "0", ")", "\n", "map", "=", "map", ".", "astype", "(", "'float64'", ")", "/", "map", ".", "sum", "(", ")", "/", "class_of_interest", "\n", "map", "[", "np", ".", "isnan", "(", "map", ")", "]", "=", "0", "\n", "arr", "=", "arr", "+", "map", "\n", "\n", "", "origarr", "=", "arr", "\n", "window_size", "=", "250", "\n", "\n", "# Given a list of classes of interest find the points on the image that are", "\n", "# of interest to crop from", "\n", "sum_arr", "=", "np", ".", "zeros", "(", "(", "1024", ",", "2048", ")", ")", ".", "astype", "(", "'float32'", ")", "\n", "tmp", "=", "np", ".", "zeros", "(", "(", "1024", ",", "2048", ")", ")", ".", "astype", "(", "'float32'", ")", "\n", "for", "x", "in", "range", "(", "0", ",", "arr", ".", "shape", "[", "0", "]", "-", "window_size", ",", "window_size", ")", ":", "\n", "                ", "for", "y", "in", "range", "(", "0", ",", "arr", ".", "shape", "[", "1", "]", "-", "window_size", ",", "window_size", ")", ":", "\n", "                    ", "sum_arr", "[", "int", "(", "x", "+", "window_size", "/", "2", ")", ",", "int", "(", "y", "+", "window_size", "/", "2", ")", "]", "=", "origarr", "[", "\n", "x", ":", "x", "+", "window_size", ",", "\n", "y", ":", "y", "+", "window_size", "]", ".", "sum", "(", ")", "\n", "tmp", "[", "x", ":", "x", "+", "window_size", ",", "y", ":", "y", "+", "window_size", "]", "=", "origarr", "[", "x", ":", "x", "+", "window_size", ",", "y", ":", "y", "+", "window_size", "]", ".", "sum", "(", ")", "\n", "\n", "# Scaling Ratios in X and Y for non-uniform images", "\n", "", "", "ratio", "=", "(", "float", "(", "origw", ")", "/", "w", ",", "float", "(", "origh", ")", "/", "h", ")", "\n", "output", "=", "self", ".", "detect_peaks", "(", "sum_arr", ")", "\n", "coord", "=", "(", "np", ".", "column_stack", "(", "np", ".", "where", "(", "output", ")", ")", ")", ".", "tolist", "(", ")", "\n", "\n", "# Check if there are any peaks in the images to crop from if not do standard", "\n", "# cropping behaviour", "\n", "if", "len", "(", "coord", ")", "==", "0", ":", "\n", "                ", "return", "self", ".", "crop", "(", "img_new", ",", "mask_new", ")", "\n", "", "else", ":", "\n", "# If peaks are detected, random peak selection followed by peak", "\n", "# coordinate scaling to new scaled image and then random", "\n", "# cropping around the peak point in the scaled image", "\n", "                ", "randompick", "=", "np", ".", "random", ".", "randint", "(", "len", "(", "coord", ")", ")", "\n", "y", ",", "x", "=", "coord", "[", "randompick", "]", "\n", "y", ",", "x", "=", "int", "(", "y", "*", "ratio", "[", "0", "]", ")", ",", "int", "(", "x", "*", "ratio", "[", "1", "]", ")", "\n", "window_size", "=", "window_size", "*", "ratio", "[", "0", "]", "\n", "cropx", "=", "random", ".", "uniform", "(", "\n", "max", "(", "0", ",", "(", "x", "-", "window_size", "/", "2", ")", "-", "(", "self", ".", "size", "-", "window_size", ")", ")", ",", "\n", "max", "(", "(", "x", "-", "window_size", "/", "2", ")", ",", "(", "x", "-", "window_size", "/", "2", ")", "-", "(", "\n", "(", "w", "-", "window_size", ")", "-", "x", "+", "window_size", "/", "2", ")", ")", ")", "\n", "\n", "cropy", "=", "random", ".", "uniform", "(", "\n", "max", "(", "0", ",", "(", "y", "-", "window_size", "/", "2", ")", "-", "(", "self", ".", "size", "-", "window_size", ")", ")", ",", "\n", "max", "(", "(", "y", "-", "window_size", "/", "2", ")", ",", "(", "y", "-", "window_size", "/", "2", ")", "-", "(", "\n", "(", "h", "-", "window_size", ")", "-", "y", "+", "window_size", "/", "2", ")", ")", ")", "\n", "\n", "return_img", "=", "img_new", ".", "crop", "(", "\n", "(", "cropx", ",", "cropy", ",", "cropx", "+", "self", ".", "size", ",", "cropy", "+", "self", ".", "size", ")", ")", "\n", "return_mask", "=", "mask_new", ".", "crop", "(", "\n", "(", "cropx", ",", "cropy", ",", "cropx", "+", "self", ".", "size", ",", "cropy", "+", "self", ".", "size", ")", ")", "\n", "return", "(", "return_img", ",", "return_mask", ")", "\n", "", "", "", "", ""]]}