{"home.repos.pwc.inspect_result.EpistasisLab_pmlb.None.setup.calculate_version": [[5, 10], ["open().read().split", "[].split", "open().read", "open", "list", "filter"], "function", ["None"], ["def", "calculate_version", "(", ")", ":", "\n", "    ", "initpy", "=", "open", "(", "'pmlb/_version.py'", ")", ".", "read", "(", ")", ".", "split", "(", "'\\n'", ")", "\n", "version", "=", "list", "(", "filter", "(", "\n", "lambda", "x", ":", "'__version__'", "in", "x", ",", "initpy", ")", ")", "[", "0", "]", ".", "split", "(", "'\\''", ")", "[", "1", "]", "\n", "return", "version", "\n", "\n"]], "home.repos.pwc.inspect_result.EpistasisLab_pmlb.tests.test_pmlb.test_fetch_data_1": [[13, 19], ["pmlb.fetch_data", "pmlb.fetch_data.isnull().values.any", "pmlb.fetch_data.isnull"], "function", ["home.repos.pwc.inspect_result.EpistasisLab_pmlb.pmlb.pmlb.fetch_data"], ["def", "test_fetch_data_1", "(", ")", ":", "\n", "    ", "\"\"\"Test fetch_data can fetch data from GitHub.\"\"\"", "\n", "\n", "mushroom", "=", "fetch_data", "(", "'mushroom'", ")", "\n", "assert", "not", "mushroom", ".", "empty", "\n", "assert", "not", "mushroom", ".", "isnull", "(", ")", ".", "values", ".", "any", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.EpistasisLab_pmlb.tests.test_pmlb.test_fetch_data_2": [[21, 26], ["pmlb.fetch_data"], "function", ["home.repos.pwc.inspect_result.EpistasisLab_pmlb.pmlb.pmlb.fetch_data"], ["", "def", "test_fetch_data_2", "(", ")", ":", "\n", "    ", "\"\"\"Test fetch_data can fetch data from local cache.\"\"\"", "\n", "\n", "mushroom", "=", "fetch_data", "(", "'mushroom'", ",", "local_cache_dir", "=", "\"datasets/\"", ")", "\n", "assert", "not", "mushroom", ".", "empty", "\n", "\n"]], "home.repos.pwc.inspect_result.EpistasisLab_pmlb.tests.test_pmlb.test_fetch_data_3": [[27, 31], ["nose.tools.assert_raises"], "function", ["None"], ["", "def", "test_fetch_data_3", "(", ")", ":", "\n", "    ", "\"\"\"Test fetch_data can not fetch data with incorrect dataset name.\"\"\"", "\n", "\n", "assert_raises", "(", "ValueError", ",", "fetch_data", ",", "\"musroom\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.EpistasisLab_pmlb.tests.test_pmlb.test_fetch_data_4": [[32, 37], ["nose.tools.assert_raises"], "function", ["None"], ["", "def", "test_fetch_data_4", "(", ")", ":", "\n", "    ", "\"\"\"Test fetch_data can not fetch data from local cache\n     with incorrect dataset name.\"\"\"", "\n", "\n", "assert_raises", "(", "ValueError", ",", "fetch_data", ",", "\"musroom\"", ",", "local_cache_dir", "=", "\"datasets/\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.EpistasisLab_pmlb.tests.test_pmlb.test_fetch_data_5": [[38, 50], ["tempfile.mkdtemp", "pmlb.fetch_data", "os.path.join", "os.path.isfile", "shutil.rmtree"], "function", ["home.repos.pwc.inspect_result.EpistasisLab_pmlb.pmlb.pmlb.fetch_data"], ["", "def", "test_fetch_data_5", "(", ")", ":", "\n", "    ", "\"\"\"Test fetch_data can fetch data from local cache\n     but the dataset is not available in local cache\"\"\"", "\n", "\n", "cachedir", "=", "mkdtemp", "(", ")", "\n", "dataset_name", "=", "'mushroom'", "\n", "mushroom", "=", "fetch_data", "(", "dataset_name", ",", "local_cache_dir", "=", "cachedir", ")", "\n", "out_cache_data", "=", "path", ".", "join", "(", "cachedir", ",", "dataset_name", ",", "\n", "dataset_name", "+", "'.tsv.gz'", ")", "\n", "assert", "not", "mushroom", ".", "empty", "\n", "assert", "path", ".", "isfile", "(", "out_cache_data", ")", "\n", "rmtree", "(", "cachedir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.EpistasisLab_pmlb.tests.test_pmlb.test_fetch_data_6": [[51, 56], ["pmlb.fetch_data", "isinstance", "isinstance"], "function", ["home.repos.pwc.inspect_result.EpistasisLab_pmlb.pmlb.pmlb.fetch_data"], ["", "def", "test_fetch_data_6", "(", ")", ":", "\n", "    ", "\"\"\"Test fetch_data can fetch data from GitHub with return_X_y.\"\"\"", "\n", "X", ",", "y", "=", "fetch_data", "(", "'mushroom'", ",", "return_X_y", "=", "True", ")", "\n", "assert", "isinstance", "(", "X", ",", "np", ".", "ndarray", ")", "\n", "assert", "isinstance", "(", "y", ",", "np", ".", "ndarray", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.EpistasisLab_pmlb.tests.test_pmlb.test_get_dataset_url_1": [[57, 66], ["pmlb.pmlb.get_dataset_url"], "function", ["home.repos.pwc.inspect_result.EpistasisLab_pmlb.pmlb.pmlb.get_dataset_url"], ["", "def", "test_get_dataset_url_1", "(", ")", ":", "\n", "    ", "\"\"\"Test get_dataset_url can fetch data from GitHub.\"\"\"", "\n", "dataset_name", "=", "'mushroom'", "\n", "dataset_url", "=", "get_dataset_url", "(", "GITHUB_URL", ",", "\n", "dataset_name", ",", "suffix", ")", "\n", "expected_url", "=", "(", "\"https://github.com/EpistasisLab/pmlb\"", "\n", "\"/raw/master/datasets/mushroom/mushroom.tsv.gz\"", ")", "\n", "\n", "assert", "dataset_url", "==", "expected_url", "\n", "\n"]], "home.repos.pwc.inspect_result.EpistasisLab_pmlb.tests.test_pmlb.test_get_dataset_url_2": [[67, 75], ["nose.tools.assert_raises"], "function", ["None"], ["", "def", "test_get_dataset_url_2", "(", ")", ":", "\n", "    ", "\"\"\"Test get_dataset_url can not fetch data from GitHub with\n    incorrect dataset name.\"\"\"", "\n", "dataset_name", "=", "'mushrom'", "\n", "assert_raises", "(", "ValueError", ",", "get_dataset_url", ",", "\n", "GITHUB_URL", ",", "\n", "dataset_name", ",", "\n", "suffix", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.EpistasisLab_pmlb.tests.test_pmlb.test_get_updated_datasets": [[76, 80], ["pmlb.pmlb.get_updated_datasets", "print"], "function", ["home.repos.pwc.inspect_result.EpistasisLab_pmlb.pmlb.pmlb.get_updated_datasets"], ["", "def", "test_get_updated_datasets", "(", ")", ":", "\n", "    ", "\"\"\"Test get_updated_datasets can run without error.\"\"\"", "\n", "updated_datasets", "=", "get_updated_datasets", "(", ")", "\n", "print", "(", "updated_datasets", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.EpistasisLab_pmlb.tests.test_metadata.test_all_yaml_files": [[9, 19], ["parameterized.parameterized.expand", "print", "yf.split", "open", "yaml.load"], "function", ["None"], ["@", "parameterized", ".", "expand", "(", "all_yfs", ")", "\n", "def", "test_all_yaml_files", "(", "yf", ")", ":", "\n", "    ", "\"Check basic information in yaml files.\"", "\n", "print", "(", "\"\\nTesting {}\"", ".", "format", "(", "yf", ")", ")", "\n", "folder_name", "=", "yf", ".", "split", "(", "\"/\"", ")", "[", "-", "2", "]", "\n", "with", "open", "(", "yf", ")", "as", "f", ":", "\n", "        ", "metadata", "=", "yaml", ".", "load", "(", "f", ",", "Loader", "=", "yaml", ".", "FullLoader", ")", "\n", "# check if folder name is correct", "\n", "", "assert", "metadata", "[", "'dataset'", "]", "==", "folder_name", "\n", "assert", "metadata", "[", "'task'", "]", "in", "[", "\"classification\"", ",", "\"regression\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.EpistasisLab_pmlb.tests.test_metadata.test_dataset": [[20, 42], ["parameterized.parameterized.expand", "print", "pandas.read_csv", "set", "set", "yf.split", "open", "yaml.load", "list", "print", "print", "print", "print", "print", "set.difference", "yf.split", "str"], "function", ["None"], ["", "@", "parameterized", ".", "expand", "(", "all_yfs", ")", "\n", "def", "test_dataset", "(", "yf", ")", ":", "\n", "    ", "\"Check basic information in dataset files.\"", "\n", "print", "(", "\"\\nTesting {}\"", ".", "format", "(", "yf", ")", ")", "\n", "folder_name", "=", "yf", ".", "split", "(", "\"/\"", ")", "[", "-", "2", "]", "\n", "file_name", "=", "yf", ".", "split", "(", "'metadata.yaml'", ")", "[", "0", "]", "+", "folder_name", "+", "'.tsv.gz'", "\n", "with", "open", "(", "yf", ")", "as", "f", ":", "\n", "        ", "metadata", "=", "yaml", ".", "load", "(", "f", ",", "Loader", "=", "yaml", ".", "FullLoader", ")", "\n", "", "dataset", "=", "pd", ".", "read_csv", "(", "file_name", ",", "sep", "=", "'\\t'", ",", "compression", "=", "'gzip'", ")", "\n", "cols", "=", "set", "(", "list", "(", "dataset", ".", "columns", ")", ")", "\n", "\n", "exported_cols", "=", "set", "(", "[", "str", "(", "s", "[", "'name'", "]", ")", "for", "s", "in", "metadata", "[", "'features'", "]", "]", "\n", "+", "[", "'target'", "]", ")", "\n", "\n", "if", "exported_cols", "!=", "cols", ":", "\n", "        ", "print", "(", "'filename:'", ",", "file_name", ")", "\n", "print", "(", "'metadata:'", ",", "metadata", ")", "\n", "print", "(", "'exported_cols:'", ",", "exported_cols", ")", "\n", "print", "(", "'cols:'", ",", "cols", ")", "\n", "print", "(", "'set diff:'", ",", "cols", ".", "difference", "(", "exported_cols", ")", ")", "\n", "\n", "", "assert", "exported_cols", "==", "cols", "\n", "", ""]], "home.repos.pwc.inspect_result.EpistasisLab_pmlb.tests.test_fetch_nearest_dataset_names.test_nearest_dataset_is_itself": [[5, 13], ["pmlb.fetch_data", "pmlb.nearest_datasets", "print"], "function", ["home.repos.pwc.inspect_result.EpistasisLab_pmlb.pmlb.pmlb.fetch_data", "home.repos.pwc.inspect_result.EpistasisLab_pmlb.pmlb.pmlb.nearest_datasets"], ["def", "test_nearest_dataset_is_itself", "(", ")", ":", "\n", "    ", "\"\"\"Tests whether the nearest dataset is itself\"\"\"", "\n", "\n", "for", "test_dataset", "in", "[", "'lupus'", ",", "'analcatdata_aids'", ",", "'car'", "]", ":", "\n", "        ", "df", "=", "fetch_data", "(", "test_dataset", ",", "local_cache_dir", "=", "'../datasets/'", ")", "\n", "nearest", "=", "nearest_datasets", "(", "df", ",", "task", "=", "'classification'", ",", "n", "=", "10", ")", "\n", "print", "(", "'nearest to'", ",", "test_dataset", ",", "':'", ",", "nearest", ")", "\n", "assert", "(", "nearest", "[", "0", "]", "==", "test_dataset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.EpistasisLab_pmlb.pmlb.profiling.make_profiling": [[13, 30], ["print", "pmlb.fetch_data", "write_dir.joinpath", "pandas_profiling.ProfileReport.to_file", "len", "pd.concat.drop().sample", "pandas.concat", "pandas_profiling.ProfileReport", "pandas_profiling.ProfileReport", "pd.concat.drop"], "function", ["home.repos.pwc.inspect_result.EpistasisLab_pmlb.pmlb.pmlb.fetch_data"], ["def", "make_profiling", "(", "dataset", ",", "write_dir", ",", "dat_dir", "=", "'datasets/'", ")", ":", "\n", "    ", "print", "(", "f'Processing {dataset}'", ")", "\n", "df", "=", "fetch_data", "(", "dataset", ",", "local_cache_dir", "=", "dat_dir", ",", "dropna", "=", "False", ")", "\n", "write_path", "=", "write_dir", ".", "joinpath", "(", "dataset", "+", "'.html'", ")", "\n", "\n", "if", "len", "(", "df", ".", "columns", ")", ">", "20", ":", "\n", "        ", "df_rand", "=", "(", "\n", "df", "\n", ".", "drop", "(", "columns", "=", "[", "'target'", "]", ")", "\n", ".", "sample", "(", "n", "=", "19", ",", "axis", "=", "1", ",", "random_state", "=", "42", ")", "\n", ")", "\n", "df", "=", "pd", ".", "concat", "(", "[", "df_rand", ",", "df", ".", "loc", "[", ":", ",", "[", "'target'", "]", "]", "]", ",", "axis", "=", "1", ")", "\n", "profile", "=", "ProfileReport", "(", "df", ",", "title", "=", "dataset", ",", "explorative", "=", "True", ")", "\n", "", "else", ":", "\n", "        ", "profile", "=", "ProfileReport", "(", "df", ",", "title", "=", "dataset", ",", "explorative", "=", "True", ")", "\n", "\n", "", "profile", ".", "to_file", "(", "write_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.EpistasisLab_pmlb.pmlb.profiling.datasets_to_gen": [[31, 42], ["pmlb.get_updated_datasets", "pmlb.last_commit_message", "print"], "function", ["home.repos.pwc.inspect_result.EpistasisLab_pmlb.pmlb.pmlb.get_updated_datasets", "home.repos.pwc.inspect_result.EpistasisLab_pmlb.pmlb.support_funcs.last_commit_message"], ["", "def", "datasets_to_gen", "(", ")", "->", "list", ":", "\n", "    ", "\"\"\"\n    Return datasets to regenerate profiles for \n    \"\"\"", "\n", "if", "'[regenerate_profiles]'", "in", "last_commit_message", "(", ")", ":", "\n", "        ", "print", "(", "'\"regenerate_profiles=true\" >> $GITHUB_ENV'", ")", "\n", "return", "dataset_names", "\n", "", "if", "'regenerate_profiles'", "in", "os", ".", "environ", ":", "\n", "        ", "return", "dataset_names", "\n", "", "updated_sets", "=", "get_updated_datasets", "(", ")", "\n", "return", "updated_sets", "[", "'changed_datasets'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.EpistasisLab_pmlb.pmlb.pmlb.fetch_data": [[49, 109], ["pmlb.get_dataset_url", "pandas.read_csv", "os.path.join", "os.path.exists", "pd.read_csv.dropna", "ValueError", "pandas.read_csv", "pmlb.get_dataset_url", "pandas.read_csv", "pd.read_csv.to_csv", "pd.read_csv.drop", "ValueError", "os.path.split", "os.path.isdir", "os.makedirs"], "function", ["home.repos.pwc.inspect_result.EpistasisLab_pmlb.pmlb.pmlb.get_dataset_url", "home.repos.pwc.inspect_result.EpistasisLab_pmlb.pmlb.pmlb.get_dataset_url"], ["def", "fetch_data", "(", "dataset_name", ",", "return_X_y", "=", "False", ",", "local_cache_dir", "=", "None", ",", "dropna", "=", "True", ")", ":", "\n", "    ", "\"\"\"Download a data set from the PMLB, (optionally) store it locally, and return the data set.\n\n    You must be connected to the internet if you are fetching a data set that is not cached locally.\n\n    Parameters\n    ----------\n    dataset_name: str\n        The name of the data set to load from PMLB.\n    return_X_y: bool (default: False)\n        Whether to return the data in scikit-learn format, with the features \n        and labels stored in separate NumPy arrays.\n    local_cache_dir: str (default: None)\n        The directory on your local machine to store the data files.\n        If None, then the local data cache will not be used.\n    dropna: bool\n        If True, pmlb will drop NAs in exported dataset.\n\n    Returns\n    ----------\n    dataset: pd.DataFrame or (array-like, array-like)\n        if return_X_y == False: A pandas DataFrame containing the fetched data set.\n        if return_X_y == True: A tuple of NumPy arrays containing (features, labels)\n\n    \"\"\"", "\n", "\n", "if", "local_cache_dir", "is", "None", ":", "\n", "        ", "if", "dataset_name", "not", "in", "dataset_names", ":", "\n", "            ", "raise", "ValueError", "(", "'Dataset not found in PMLB.'", ")", "\n", "", "dataset_url", "=", "get_dataset_url", "(", "GITHUB_URL", ",", "\n", "dataset_name", ",", "suffix", ")", "\n", "dataset", "=", "pd", ".", "read_csv", "(", "dataset_url", ",", "sep", "=", "'\\t'", ",", "compression", "=", "'gzip'", ")", "\n", "", "else", ":", "\n", "        ", "dataset_path", "=", "os", ".", "path", ".", "join", "(", "local_cache_dir", ",", "dataset_name", ",", "\n", "dataset_name", "+", "suffix", ")", "\n", "\n", "# Use the local cache if the file already exists there", "\n", "if", "os", ".", "path", ".", "exists", "(", "dataset_path", ")", ":", "\n", "            ", "dataset", "=", "pd", ".", "read_csv", "(", "dataset_path", ",", "sep", "=", "'\\t'", ",", "compression", "=", "'gzip'", ")", "\n", "# Download the data to the local cache if it is not already there", "\n", "", "else", ":", "\n", "            ", "if", "dataset_name", "not", "in", "dataset_names", ":", "\n", "                ", "raise", "ValueError", "(", "'Dataset not found in PMLB.'", ")", "\n", "", "dataset_url", "=", "get_dataset_url", "(", "GITHUB_URL", ",", "\n", "dataset_name", ",", "suffix", ")", "\n", "dataset", "=", "pd", ".", "read_csv", "(", "dataset_url", ",", "sep", "=", "'\\t'", ",", "compression", "=", "'gzip'", ")", "\n", "dataset_dir", "=", "os", ".", "path", ".", "split", "(", "dataset_path", ")", "[", "0", "]", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "dataset_dir", ")", ":", "\n", "                ", "os", ".", "makedirs", "(", "dataset_dir", ")", "\n", "", "dataset", ".", "to_csv", "(", "dataset_path", ",", "sep", "=", "'\\t'", ",", "compression", "=", "'gzip'", ",", "\n", "index", "=", "False", ")", "\n", "\n", "", "", "if", "dropna", ":", "\n", "        ", "dataset", ".", "dropna", "(", "inplace", "=", "True", ")", "\n", "", "if", "return_X_y", ":", "\n", "        ", "X", "=", "dataset", ".", "drop", "(", "'target'", ",", "axis", "=", "1", ")", ".", "values", "\n", "y", "=", "dataset", "[", "'target'", "]", ".", "values", "\n", "return", "(", "X", ",", "y", ")", "\n", "", "else", ":", "\n", "        ", "return", "dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.EpistasisLab_pmlb.pmlb.pmlb.get_dataset_url": [[111, 122], ["requests.get", "ValueError"], "function", ["None"], ["", "", "def", "get_dataset_url", "(", "GITHUB_URL", ",", "dataset_name", ",", "suffix", ")", ":", "\n", "    ", "dataset_url", "=", "'{GITHUB_URL}/{DATASET_NAME}/{DATASET_NAME}{SUFFIX}'", ".", "format", "(", "\n", "GITHUB_URL", "=", "GITHUB_URL", ",", "\n", "DATASET_NAME", "=", "dataset_name", ",", "\n", "SUFFIX", "=", "suffix", "\n", ")", "\n", "\n", "re", "=", "requests", ".", "get", "(", "dataset_url", ")", "\n", "if", "re", ".", "status_code", "!=", "200", ":", "\n", "        ", "raise", "ValueError", "(", "'Dataset not found in PMLB.'", ")", "\n", "", "return", "dataset_url", "\n", "\n"]], "home.repos.pwc.inspect_result.EpistasisLab_pmlb.pmlb.pmlb.get_updated_datasets": [[123, 150], ["subprocess.check_output().rstrip", "set", "set", "subprocess.check_output().rstrip.splitlines", "set", "set", "sorted", "sorted", "print", "pathlib.Path", "pathlib.Path.name.endswith", "subprocess.check_output", "sorted.add", "sorted.add", "pathlib.Path().iterdir", "cmd.split", "pathlib.Path"], "function", ["None"], ["", "def", "get_updated_datasets", "(", "local_cache_dir", "=", "'datasets'", ")", ":", "\n", "    ", "\"\"\"Looks at commit and returns a list of datasets that were updated.\"\"\"", "\n", "cmd", "=", "'git diff --name-only HEAD HEAD~1'", "\n", "res", "=", "subprocess", ".", "check_output", "(", "cmd", ".", "split", "(", ")", ",", "universal_newlines", "=", "True", ")", ".", "rstrip", "(", ")", "\n", "changed_datasets", "=", "set", "(", ")", "\n", "changed_metadatas", "=", "set", "(", ")", "\n", "for", "path", "in", "res", ".", "splitlines", "(", ")", ":", "\n", "        ", "path", "=", "pathlib", ".", "Path", "(", "path", ")", "\n", "if", "path", ".", "parts", "[", "0", "]", "!=", "'datasets'", ":", "\n", "            ", "continue", "\n", "", "if", "path", ".", "name", ".", "endswith", "(", "'.tsv.gz'", ")", ":", "\n", "            ", "changed_datasets", ".", "add", "(", "path", ".", "parts", "[", "-", "2", "]", ")", "\n", "", "if", "path", ".", "name", "==", "'metadata.yaml'", ":", "\n", "            ", "changed_metadatas", ".", "add", "(", "path", ".", "parts", "[", "-", "2", "]", ")", "\n", "\n", "", "", "datasets_remain", "=", "[", "x", ".", "name", "for", "x", "in", "pathlib", ".", "Path", "(", "local_cache_dir", ")", ".", "iterdir", "(", ")", "]", "\n", "changed_metadatas", "&=", "set", "(", "datasets_remain", ")", "\n", "changed_datasets", "&=", "set", "(", "datasets_remain", ")", "\n", "\n", "changed_datasets", "=", "sorted", "(", "changed_datasets", ")", "\n", "changed_metadatas", "=", "sorted", "(", "changed_metadatas", ")", "\n", "print", "(", "\n", "f'changed datasets: {changed_datasets}\\n'", "\n", "f'changed metadata: {changed_metadatas}'", "\n", ")", "\n", "return", "{", "'changed_datasets'", ":", "changed_datasets", ",", "\n", "'changed_metadatas'", ":", "changed_metadatas", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.EpistasisLab_pmlb.pmlb.pmlb.nearest_datasets": [[151, 178], ["isinstance", "pmlb.fetch_nearest_dataset_names", "pandas.DataFrame", "isinstance", "ValueError", "str", "enumerate"], "function", ["home.repos.pwc.inspect_result.EpistasisLab_pmlb.pmlb.pmlb.fetch_nearest_dataset_names"], ["", "def", "nearest_datasets", "(", "X", ",", "y", "=", "None", ",", "task", "=", "'classification'", ",", "n", "=", "1", ",", "\n", "dimensions", "=", "[", "'n_instances'", ",", "'n_features'", "]", ")", ":", "\n", "    ", "\"\"\"\n    X: numpy array or pandas DataFrame\n        an n_samples x n_features array of independent variables\n    y: numpy array or None (default: None)\n        a n_samples array of dependent variables\n    task: 'regression' or 'classification' (default: 'classification')\n        specify the task.\n    n: int (default: 1)\n        the number of dataset names to return\n    dimensions: list of str or str (default: ['NumberOfInstances',\n    'NumberOfFeatures'])\n        a list of dataset characteristics to include in similarity calculation.\n        Dimensions must correspond to columns of datasets/all_summary_stats.csv.\n        If 'all', uses all numeric columns.\n    \"\"\"", "\n", "if", "isinstance", "(", "X", ",", "np", ".", "ndarray", ")", ":", "\n", "        ", "if", "y", "==", "None", ":", "\n", "            ", "ValueError", "(", "'the target (y) must be specified if a np array '", "\n", "'is passed.'", ")", "\n", "", "df", "=", "pd", ".", "DataFrame", "(", "{", "**", "{", "'x_'", "+", "str", "(", "i", ")", ":", "x", "for", "i", ",", "x", "in", "enumerate", "(", "X", ".", "transpose", ")", "}", "\n", "**", "{", "'target'", ":", "y", "}", "}", ")", "\n", "", "elif", "isinstance", "(", "X", ",", "pd", ".", "DataFrame", ")", ":", "\n", "        ", "df", "=", "X", "\n", "\n", "", "return", "fetch_nearest_dataset_names", "(", "df", ",", "task", ",", "n", ",", "dimensions", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.EpistasisLab_pmlb.pmlb.pmlb.fetch_nearest_dataset_names": [[179, 239], ["pandas.read_csv", "pmlb_stats.apply().dropna.apply().dropna", "support_funcs.get_dataset_stats", "support_funcs.generate_summarystats", "sklearn.preprocessing.StandardScaler", "sklearn.preprocessing.StandardScaler.fit_transform", "sklearn.neighbors.NearestNeighbors().fit", "NearestNeighbors().fit.kneighbors", "list", "all", "sklearn.preprocessing.StandardScaler.transform", "pathlib.Path", "pmlb_stats.apply().dropna.apply", "sklearn.neighbors.NearestNeighbors", "ds.flatten", "pandas.to_numeric"], "function", ["home.repos.pwc.inspect_result.EpistasisLab_pmlb.pmlb.support_funcs.get_dataset_stats", "home.repos.pwc.inspect_result.EpistasisLab_pmlb.pmlb.support_funcs.generate_summarystats"], ["", "def", "fetch_nearest_dataset_names", "(", "df", ",", "task", ",", "n", ",", "dimensions", ")", ":", "\n", "    ", "\"\"\"Returns names of most similar datasets to df, in order of similarity. \n\n    Parameters\n    ----------\n    df: pandas Dataframe \n        a dataframe of n_samples x n_features+1 with a target column labeled\n        'target'\n    task: str \n        specify classification or regression for summary stat generation. \n    n: int (default: 1)\n        the number of dataset names to return\n    dimensions: list of str or str (default: ['NumberOfInstances',\n    'NumberOfFeatures'])\n        a list of dataset characteristics to include in similarity calculation.\n        Dimensions must correspond to columns of datasets/all_summary_stats.csv.\n        If 'all', uses all numeric columns.\n\n    Returns\n    -------\n    dataset_names: an n-element list of dataset names in order of most similar \n        to least similar.\n    \"\"\"", "\n", "\n", "# load pmlb summary stats", "\n", "path", "=", "pathlib", ".", "Path", "(", "__file__", ")", ".", "parent", "/", "\"all_summary_stats.tsv\"", "\n", "pmlb_stats", "=", "pd", ".", "read_csv", "(", "path", ",", "sep", "=", "'\\t'", ")", "\n", "# restrict to same task", "\n", "pmlb_stats", "=", "pmlb_stats", ".", "loc", "[", "pmlb_stats", ".", "task", "==", "task", "]", "\n", "all_names", "=", "pmlb_stats", "[", "'dataset'", "]", ".", "values", "\n", "# restrict to floating point data in stats", "\n", "pmlb_stats", "=", "pmlb_stats", ".", "apply", "(", "\n", "lambda", "x", ":", "pd", ".", "to_numeric", "(", "x", ",", "errors", "=", "'coerce'", ")", ")", ".", "dropna", "(", "axis", "=", "1", ",", "how", "=", "'all'", ")", "\n", "\n", "if", "dimensions", "==", "'all'", ":", "\n", "        ", "dimensions", "=", "list", "(", "pmlb_stats", ".", "columns", ")", "\n", "", "else", ":", "\n", "        ", "pmlb_stats", "=", "pmlb_stats", "[", "dimensions", "]", "\n", "assert", "(", "all", "(", "[", "d", "in", "pmlb_stats", ".", "columns", "for", "d", "in", "dimensions", "]", ")", ")", "\n", "\n", "", "dataset_stats_tmp", "=", "get_dataset_stats", "(", "df", ")", "\n", "dataset_stats_tmp", "[", "'yaml_task'", "]", "=", "task", "\n", "dataset_stats", "=", "generate_summarystats", "(", "'dataset'", ",", "dataset_stats_tmp", ",", "\n", "write_summary", "=", "False", ")", "\n", "dataset_stats", "=", "dataset_stats", "[", "dimensions", "]", "\n", "\n", "\n", "# #categorical and #continuous features columns", "\n", "ss", "=", "StandardScaler", "(", ")", "\n", "pmlb_stats_norm", "=", "ss", ".", "fit_transform", "(", "pmlb_stats", ")", "\n", "\n", "# find nearest neighbors", "\n", "nn", "=", "NearestNeighbors", "(", "n_neighbors", "=", "n", ")", ".", "fit", "(", "pmlb_stats_norm", ")", "\n", "distances", ",", "ds", "=", "nn", ".", "kneighbors", "(", "ss", ".", "transform", "(", "dataset_stats", ")", ",", "n_neighbors", "=", "n", ",", "\n", "return_distance", "=", "True", ")", "\n", "# print([(name, dist) for name, dist in zip(all_names[ds.flatten()],", "\n", "#     distances.flatten())])", "\n", "dataset_names", "=", "all_names", "[", "ds", ".", "flatten", "(", ")", "]", "\n", "\n", "return", "dataset_names", "\n", "\n"]], "home.repos.pwc.inspect_result.EpistasisLab_pmlb.pmlb.pmlb.get_reviewed_datasets": [[240, 260], ["sorted", "pathlib.Path", "pathlib.Path.exists", "reviewed_datasets.append", "open", "f.readline", "requests.get().text.splitlines", "requests.get"], "function", ["None"], ["", "def", "get_reviewed_datasets", "(", "dataset_names", ",", "local_cache_dir", "=", "'datasets/'", ")", ":", "\n", "    ", "reviewed_datasets", "=", "[", "]", "\n", "\n", "for", "dataset_name", "in", "dataset_names", ":", "\n", "        ", "if", "local_cache_dir", "!=", "None", ":", "\n", "            ", "meta_path", "=", "pathlib", ".", "Path", "(", "f'{local_cache_dir}{dataset_name}/metadata.yaml'", ")", "\n", "if", "meta_path", ".", "exists", "(", ")", ":", "\n", "                ", "with", "open", "(", "meta_path", ",", "'r'", ")", "as", "f", ":", "\n", "                    ", "header", "=", "f", ".", "readline", "(", ")", "\n", "", "", "", "else", ":", "\n", "            ", "meta_url", "=", "'{GITHUB_URL}/{DATASET_NAME}/metadata.yaml'", ".", "format", "(", "\n", "GITHUB_URL", "=", "GITHUB_URL", ",", "\n", "DATASET_NAME", "=", "dataset_name", "\n", ")", "\n", "header", "=", "requests", ".", "get", "(", "meta_url", ")", ".", "text", ".", "splitlines", "(", ")", "[", "0", "]", "+", "'\\n'", "\n", "\n", "", "if", "header", "!=", "'# Reviewed by [your name here]\\n'", ":", "\n", "            ", "reviewed_datasets", ".", "append", "(", "dataset_name", ")", "\n", "\n", "", "", "return", "sorted", "(", "reviewed_datasets", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.EpistasisLab_pmlb.pmlb.pmlb.select_datasets": [[261, 313], ["pandas.read_csv", "list", "pathlib.Path"], "function", ["None"], ["", "def", "select_datasets", "(", "obs_min", "=", "None", ",", "obs_max", "=", "None", ",", "feat_min", "=", "None", ",", "feat_max", "=", "None", ",", "class_min", "=", "None", ",", "class_max", "=", "None", ",", "endpt", "=", "None", ",", "max_imbalance", "=", "None", ",", "task", "=", "None", ")", ":", "\n", "    ", "\"\"\"Filters existing datasets by given parameters, and returns a list of their names.\n\n    Parameters\n    ----------\n    obs_min: int (default: None)\n        The minimum acceptable number of observations/instances in the dataset\n    obs_Max: int (default: None)\n        The maximum acceptable number of observations/instances in the dataset\n    feat_min: int (default: None)\n        The minimum acceptable number of features in the dataset\n    feat_max: int (default: None)\n        The maximum acceptable number of features in the dataset\n    class_min: int (default: None)\n        The minimum acceptable number of classes in the dataset\n    class_max: int (default: None)\n        The maximum acceptable number of classes in the dataset\n    max_imbalance: float (default: None)\n        Maximum acceptable imbalance value for the dataset\n    endpt: str (default: None)\n        Whether the dataset endpoint type should be discrete, continuous, categorical, or binary\n    task: str (default: None)\n        Whether the dataset is suited for classification or regression problems\n    Returns\n    ----------\n    list (str): \n        list of names of datasets within filters. Will return an empty list if no datasets match.\n\n\n    \"\"\"", "\n", "\n", "path", "=", "pathlib", ".", "Path", "(", "__file__", ")", ".", "parent", "/", "\"all_summary_stats.tsv\"", "\n", "tempdf", "=", "pd", ".", "read_csv", "(", "path", ",", "sep", "=", "'\\t'", ")", "\n", "if", "obs_min", "is", "not", "None", ":", "\n", "        ", "tempdf", "=", "tempdf", ".", "loc", "[", "tempdf", "[", "'n_instances'", "]", ">=", "obs_min", "]", "\n", "", "if", "obs_max", "is", "not", "None", ":", "\n", "        ", "tempdf", "=", "tempdf", ".", "loc", "[", "tempdf", "[", "'n_instances'", "]", "<=", "obs_max", "]", "\n", "", "if", "feat_min", "is", "not", "None", ":", "\n", "        ", "tempdf", "=", "tempdf", ".", "loc", "[", "tempdf", "[", "'n_features'", "]", ">=", "feat_min", "]", "\n", "", "if", "feat_max", "is", "not", "None", ":", "\n", "        ", "tempdf", "=", "tempdf", ".", "loc", "[", "tempdf", "[", "'n_features'", "]", "<=", "feat_max", "]", "\n", "", "if", "class_min", "is", "not", "None", ":", "\n", "        ", "tempdf", "=", "tempdf", ".", "loc", "[", "tempdf", "[", "'n_classes'", "]", ">=", "class_min", "]", "\n", "", "if", "class_max", "is", "not", "None", ":", "\n", "        ", "tempdf", "=", "tempdf", ".", "loc", "[", "tempdf", "[", "'n_classes'", "]", "<=", "class_max", "]", "\n", "", "if", "max_imbalance", "is", "not", "None", ":", "\n", "        ", "tempdf", "=", "tempdf", ".", "loc", "[", "tempdf", "[", "'imbalance'", "]", "<", "max_imbalance", "]", "\n", "", "if", "endpt", "is", "not", "None", ":", "\n", "        ", "tempdf", "=", "tempdf", ".", "loc", "[", "tempdf", "[", "'endpoint_type'", "]", "==", "endpt", "]", "\n", "", "if", "task", "is", "not", "None", ":", "\n", "        ", "tempdf", "=", "tempdf", ".", "loc", "[", "tempdf", "[", "'task'", "]", "==", "task", "]", "\n", "", "return", "list", "(", "tempdf", "[", "'dataset'", "]", ".", "values", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.EpistasisLab_pmlb.pmlb.update_dataset_files.update_metadata_summary": [[51, 64], ["pmlb.fetch_data", "support_funcs.get_dataset_stats", "support_funcs.generate_summarystats", "support_funcs.generate_metadata", "open", "yaml.load", "pathlib.Path"], "function", ["home.repos.pwc.inspect_result.EpistasisLab_pmlb.pmlb.pmlb.fetch_data", "home.repos.pwc.inspect_result.EpistasisLab_pmlb.pmlb.support_funcs.get_dataset_stats", "home.repos.pwc.inspect_result.EpistasisLab_pmlb.pmlb.support_funcs.generate_summarystats", "home.repos.pwc.inspect_result.EpistasisLab_pmlb.pmlb.support_funcs.generate_metadata"], ["def", "update_metadata_summary", "(", "dataset_name", ",", "reviewed_datasets", ",", "overwrite", "=", "True", ",", "\n", "local_cache_dir", "=", "None", ",", "write_summary", "=", "False", ")", ":", "\n", "    ", "df", "=", "fetch_data", "(", "dataset_name", ",", "local_cache_dir", "=", "local_cache_dir", ",", "dropna", "=", "False", ")", "\n", "dataset_stats", "=", "get_dataset_stats", "(", "df", ")", "\n", "if", "dataset_name", "not", "in", "reviewed_datasets", ":", "\n", "        ", "generate_metadata", "(", "df", ",", "dataset_name", ",", "dataset_stats", ",", "overwrite", ",", "local_cache_dir", ")", "\n", "\n", "", "with", "open", "(", "pathlib", ".", "Path", "(", "f'{local_cache_dir}{dataset_name}/metadata.yaml'", ")", ")", "as", "f", ":", "\n", "        ", "meta_dict", "=", "yaml", ".", "load", "(", "f", ",", "Loader", "=", "yaml", ".", "FullLoader", ")", "\n", "\n", "", "dataset_stats", "[", "'yaml_task'", "]", "=", "meta_dict", "[", "'task'", "]", "\n", "\n", "generate_summarystats", "(", "dataset_name", ",", "dataset_stats", ",", "local_cache_dir", ",", "write_summary", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.EpistasisLab_pmlb.pmlb.update_dataset_files.datasets_to_update": [[65, 82], ["pmlb.get_updated_datasets", "support_funcs.last_commit_message", "print"], "function", ["home.repos.pwc.inspect_result.EpistasisLab_pmlb.pmlb.pmlb.get_updated_datasets", "home.repos.pwc.inspect_result.EpistasisLab_pmlb.pmlb.support_funcs.last_commit_message"], ["", "def", "datasets_to_update", "(", ")", "->", "list", ":", "\n", "    ", "\"\"\"\n    Return datasets to regenerate profiles for \n    \"\"\"", "\n", "if", "'[update_all_datasets]'", "in", "last_commit_message", "(", ")", ":", "\n", "        ", "print", "(", "'\"update_all_datasets=true\" >> $GITHUB_ENV'", ")", "\n", "return", "{", "\n", "'changed_datasets'", ":", "dataset_names", ",", "\n", "'changed_metadatas'", ":", "dataset_names", "\n", "}", "\n", "", "if", "'update_all_datasets'", "in", "os", ".", "environ", ":", "\n", "        ", "return", "{", "\n", "'changed_datasets'", ":", "dataset_names", ",", "\n", "'changed_metadatas'", ":", "dataset_names", "\n", "}", "\n", "", "updated_sets", "=", "get_updated_datasets", "(", ")", "\n", "return", "updated_sets", "\n", "\n"]], "home.repos.pwc.inspect_result.EpistasisLab_pmlb.pmlb.support_funcs.get_feature_type": [[12, 23], ["x.dropna", "support_funcs.check_if_all_integers", "x.nunique", "x.nunique"], "function", ["home.repos.pwc.inspect_result.EpistasisLab_pmlb.pmlb.support_funcs.check_if_all_integers"], ["def", "get_feature_type", "(", "x", ",", "include_binary", "=", "False", ")", ":", "\n", "    ", "x", ".", "dropna", "(", "inplace", "=", "True", ")", "\n", "if", "not", "check_if_all_integers", "(", "x", ")", ":", "\n", "        ", "return", "'continuous'", "\n", "", "else", ":", "\n", "        ", "if", "x", ".", "nunique", "(", ")", ">", "10", ":", "\n", "            ", "return", "'continuous'", "\n", "", "if", "include_binary", ":", "\n", "            ", "if", "x", ".", "nunique", "(", ")", "==", "2", ":", "\n", "                ", "return", "'binary'", "\n", "", "", "return", "'categorical'", "\n", "\n"]], "home.repos.pwc.inspect_result.EpistasisLab_pmlb.pmlb.support_funcs.get_target_type": [[24, 35], ["x.dropna", "ValueError", "x.nunique"], "function", ["None"], ["", "", "def", "get_target_type", "(", "x", ",", "include_binary", "=", "False", ")", ":", "\n", "    ", "x", ".", "dropna", "(", "inplace", "=", "True", ")", "\n", "if", "x", ".", "dtype", "==", "'float64'", ":", "\n", "        ", "return", "'continuous'", "\n", "", "elif", "x", ".", "dtype", "==", "'int64'", ":", "\n", "        ", "if", "include_binary", ":", "\n", "            ", "if", "x", ".", "nunique", "(", ")", "==", "2", ":", "\n", "                ", "return", "'binary'", "\n", "", "", "return", "'categorical'", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"Error getting type\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.EpistasisLab_pmlb.pmlb.support_funcs.check_if_all_integers": [[36, 39], ["all", "float().is_integer", "x.unique", "float"], "function", ["None"], ["", "", "def", "check_if_all_integers", "(", "x", ")", ":", "\n", "    ", "\"check a pandas.Series is made of all integers.\"", "\n", "return", "all", "(", "float", "(", "i", ")", ".", "is_integer", "(", ")", "for", "i", "in", "x", ".", "unique", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.EpistasisLab_pmlb.pmlb.support_funcs.generate_summarystats": [[40, 76], ["print", "pandas.DataFrame", "pd.DataFrame.to_csv", "pathlib.Path"], "function", ["None"], ["", "def", "generate_summarystats", "(", "dataset_name", ",", "dataset_stats", ",", "local_cache_dir", "=", "None", ",", "\n", "write_summary", "=", "False", ")", ":", "\n", "    ", "\"\"\"Generates summary stats for a given dataset in its summary_stats.csv\n    file in a dataset local_cache_dir file.\n    :param dataset_name: str\n        The name of the data set to load from PMLB.\n    :param local_cache_dir: str (required)\n        The directory on your local machine to store the data files.\n        If None, then the local data cache will not be used.\n    :param write_summary: bool\n        Whether new summary statistics should be written out to directory.\n    \"\"\"", "\n", "print", "(", "'generating summary stats for'", ",", "dataset_name", ")", "\n", "\n", "feat", "=", "dataset_stats", "[", "'feat'", "]", "\n", "mse", "=", "dataset_stats", "[", "'mse'", "]", "\n", "\n", "stats_df", "=", "pd", ".", "DataFrame", "(", "{", "\n", "'dataset'", ":", "dataset_name", ",", "\n", "'n_instances'", ":", "dataset_stats", "[", "'n_instances'", "]", ",", "\n", "'n_features'", ":", "dataset_stats", "[", "'n_features'", "]", ",", "\n", "'n_binary_features'", ":", "feat", "[", "0", "]", ",", "\n", "'n_categorical_features'", ":", "feat", "[", "1", "]", ",", "\n", "'n_continuous_features'", ":", "feat", "[", "2", "]", ",", "\n", "'endpoint_type'", ":", "dataset_stats", "[", "'endpoint'", "]", ",", "\n", "'n_classes'", ":", "mse", "[", "0", "]", ",", "\n", "'imbalance'", ":", "mse", "[", "1", "]", ",", "\n", "'task'", ":", "dataset_stats", "[", "'yaml_task'", "]", "\n", "}", ",", "index", "=", "[", "0", "]", ")", "\n", "\n", "if", "write_summary", ":", "\n", "        ", "assert", "(", "local_cache_dir", "!=", "None", ")", "\n", "stats_df", ".", "to_csv", "(", "pathlib", ".", "Path", "(", "f'{local_cache_dir}{dataset_name}'", "\n", "'/summary_stats.tsv'", ")", ",", "index", "=", "False", ",", "sep", "=", "'\\t'", ")", "\n", "\n", "", "return", "stats_df", "\n", "\n"]], "home.repos.pwc.inspect_result.EpistasisLab_pmlb.pmlb.support_funcs.get_dataset_stats": [[77, 94], ["support_funcs.count_features_type", "support_funcs.get_target_type", "support_funcs.compute_imbalance", "support_funcs.get_feature_type", "df[].tolist", "len", "len"], "function", ["home.repos.pwc.inspect_result.EpistasisLab_pmlb.pmlb.support_funcs.count_features_type", "home.repos.pwc.inspect_result.EpistasisLab_pmlb.pmlb.support_funcs.get_target_type", "home.repos.pwc.inspect_result.EpistasisLab_pmlb.pmlb.support_funcs.compute_imbalance", "home.repos.pwc.inspect_result.EpistasisLab_pmlb.pmlb.support_funcs.get_feature_type"], ["", "def", "get_dataset_stats", "(", "df", ")", ":", "\n", "    ", "feat_names", "=", "[", "col", "for", "col", "in", "df", ".", "columns", "if", "col", "!=", "TARGET_NAME", "]", "\n", "types", "=", "[", "get_feature_type", "(", "df", "[", "col", "]", ",", "include_binary", "=", "True", ")", "for", "col", "in", "feat_names", "]", "\n", "feat", "=", "count_features_type", "(", "types", ",", "include_binary", "=", "True", ")", "\n", "endpoint", "=", "get_target_type", "(", "df", "[", "TARGET_NAME", "]", ")", "\n", "mse", "=", "compute_imbalance", "(", "df", "[", "TARGET_NAME", "]", ".", "tolist", "(", ")", ")", "\n", "task", "=", "'regression'", "if", "endpoint", "==", "'continuous'", "else", "'classification'", "\n", "\n", "return", "{", "\n", "'n_instances'", ":", "len", "(", "df", ")", ",", "\n", "'n_features'", ":", "len", "(", "df", ".", "columns", ")", "-", "1", ",", "\n", "'feat_names'", ":", "feat_names", ",", "\n", "'types'", ":", "types", ",", "\n", "'feat'", ":", "feat", ",", "\n", "'endpoint'", ":", "endpoint", ",", "\n", "'task'", ":", "task", ",", "\n", "'mse'", ":", "mse", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.EpistasisLab_pmlb.pmlb.support_funcs.compute_imbalance": [[96, 120], ["float", "collections.Counter().values", "len", "pow", "collections.Counter", "collections.Counter", "float", "len", "pow"], "function", ["None"], ["", "def", "compute_imbalance", "(", "data", ")", ":", "\n", "    ", "\"\"\" Computes imbalance metric for a given dataset.\n    Imbalance metric is equal to 0 when a dataset is perfectly balanced\n    (i.e. number of in each class is exact).\n    :param data : pandas.DataFrame\n        A dataset in a panda's data frame\n    :returns int\n        A value of imbalance metric, where zero means that the dataset is\n        perfectly balanced and the higher the value, the more imbalanced the\n        dataset.\n    \"\"\"", "\n", "if", "not", "data", ":", "\n", "        ", "return", "0", "\n", "#imb - shows measure of inbalance within a dataset", "\n", "", "imb", "=", "0", "\n", "num_classes", "=", "float", "(", "len", "(", "Counter", "(", "data", ")", ")", ")", "\n", "for", "x", "in", "Counter", "(", "data", ")", ".", "values", "(", ")", ":", "\n", "        ", "p_x", "=", "float", "(", "x", ")", "/", "len", "(", "data", ")", "\n", "if", "p_x", ">", "0", ":", "\n", "            ", "imb", "+=", "(", "p_x", "-", "1", "/", "num_classes", ")", "*", "(", "p_x", "-", "1", "/", "num_classes", ")", "\n", "#worst case scenario: all but 1 examplars in 1st class, the remaining one", "\n", "#in 2nd class", "\n", "", "", "worst_case", "=", "(", "num_classes", "-", "1", ")", "*", "pow", "(", "1", "/", "num_classes", ",", "2", ")", "+", "pow", "(", "1", "-", "1", "/", "num_classes", ",", "2", ")", "\n", "return", "(", "num_classes", ",", "imb", "/", "worst_case", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.EpistasisLab_pmlb.pmlb.support_funcs.count_features_type": [[121, 137], ["types.count", "types.count", "types.count", "types.count", "types.count"], "function", ["None"], ["", "def", "count_features_type", "(", "types", ",", "include_binary", "=", "False", ")", ":", "\n", "    ", "\"\"\" Counts two or three different types of features\n    (binary (optional), categorical, continuous).\n    :param types: list of types from get_type\n    :returns a tuple (binary (optional), categorical, continuous)\n    \"\"\"", "\n", "if", "include_binary", ":", "\n", "        ", "return", "(", "\n", "types", ".", "count", "(", "'binary'", ")", ",", "\n", "types", ".", "count", "(", "'categorical'", ")", ",", "\n", "types", ".", "count", "(", "'continuous'", ")", "\n", ")", "\n", "", "else", ":", "\n", "        ", "return", "(", "\n", "types", ".", "count", "(", "'categorical'", ")", ",", "\n", "types", ".", "count", "(", "'continuous'", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.EpistasisLab_pmlb.pmlb.support_funcs.generate_all_summaries": [[139, 144], ["sorted", "pandas.concat().to_csv", "pathlib.Path().glob", "frames.append", "pandas.read_csv", "pandas.concat", "pathlib.Path"], "function", ["None"], ["", "", "def", "generate_all_summaries", "(", "local_cache_dir", "=", "'datasets/'", ")", ":", "\n", "    ", "frames", "=", "[", "]", "\n", "for", "f", "in", "sorted", "(", "pathlib", ".", "Path", "(", "local_cache_dir", ")", ".", "glob", "(", "'*/summary_stats.tsv'", ")", ")", ":", "\n", "        ", "frames", ".", "append", "(", "pd", ".", "read_csv", "(", "f", ",", "sep", "=", "'\\t'", ")", ")", "\n", "", "pd", ".", "concat", "(", "frames", ")", ".", "to_csv", "(", "'pmlb/all_summary_stats.tsv'", ",", "index", "=", "False", ",", "sep", "=", "'\\t'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.EpistasisLab_pmlb.pmlb.support_funcs.generate_metadata": [[145, 231], ["pathlib.Path", "pathlib.Path.exists", "print", "zip", "metadata_template.format", "print", "feature_template.format", "pathlib.Path.write_text", "logger.warning", "print"], "function", ["None"], ["", "def", "generate_metadata", "(", "df", ",", "dataset_name", ",", "dataset_stats", ",", "overwrite_existing", "=", "True", ",", "\n", "local_cache_dir", "=", "None", ")", ":", "\n", "    ", "\"\"\"Generates description for a given dataset in its metadata.yaml file in a\n    dataset local_cache_dir file.\n\n    :param dataset_name: str\n        The name of the data set to load from PMLB.\n    :param local_cache_dir: str (required)\n        The directory on your local machine to store the data files.\n        If None, then the local data cache will not be used.\n    \"\"\"", "\n", "\n", "metadata_template", "=", "'''\\\n{header_to_print}\ndataset: {dataset_name}\ndescription: {none_yet}\nsource: {none_yet}\npublication: {none_yet}\ntask: {task}\nkeywords:\n  -\n  -\ntarget:\n  type: {endpoint}\n  description: {none_yet}\n  code: {none_yet}\nfeatures:\n{all_features}\\\n'''", "\n", "feature_template", "=", "'''\\\n  - name: {feat_name}\n    type: {feat_type}\n'''", "\n", "feat_extra_template", "=", "'''\\\n    description:\n    code:\n    transform:\n'''", "\n", "feat_extra_first", "=", "'''\\\n    description: # optional but recommended, what the feature measures/indicates, unit\n    code: # optional, coding information, e.g., Control = 0, Case = 1\n    transform: # optional, any transformation performed on the feature, e.g., log scaled\n'''", "\n", "\n", "none_yet", "=", "(", "'None yet. See our contributing guide to help us add one.'", ")", "\n", "header_to_print", "=", "'# Reviewed by [your name here]'", "\n", "assert", "(", "local_cache_dir", "!=", "None", ")", "\n", "meta_path", "=", "pathlib", ".", "Path", "(", "f'{local_cache_dir}{dataset_name}/metadata.yaml'", ")", "\n", "if", "meta_path", ".", "exists", "(", ")", ":", "\n", "        ", "if", "(", "not", "overwrite_existing", ")", ":", "\n", "            ", "logger", ".", "warning", "(", "f'Not writing {dataset_name}/metadata.yaml ; '", "\n", "'File exists (use overwrite_existing=True to override.\\n'", ")", "\n", "return", "None", "\n", "\n", "", "print", "(", "f'WARNING: {meta_path} exists. Overwriting...'", ")", "\n", "\n", "", "print", "(", "'Generating metadata for'", ",", "dataset_name", ")", "\n", "\n", "all_features", "=", "''", "\n", "first", "=", "True", "\n", "for", "feature", ",", "feature_type", "in", "zip", "(", "dataset_stats", "[", "'feat_names'", "]", ",", "dataset_stats", "[", "'types'", "]", ")", ":", "\n", "        ", "if", "feature", "in", "protected_feature_names", ":", "\n", "            ", "feature", "=", "f'\"{feature}\"'", "\n", "", "all_features", "+=", "feature_template", ".", "format", "(", "\n", "feat_name", "=", "feature", ",", "\n", "feat_type", "=", "feature_type", "\n", ")", "\n", "if", "first", ":", "\n", "            ", "all_features", "+=", "feat_extra_first", "\n", "first", "=", "False", "\n", "", "else", ":", "\n", "            ", "all_features", "+=", "feat_extra_template", "\n", "\n", "", "", "metadata", "=", "metadata_template", ".", "format", "(", "\n", "header_to_print", "=", "header_to_print", ",", "\n", "dataset_name", "=", "dataset_name", ",", "\n", "none_yet", "=", "none_yet", ",", "\n", "endpoint", "=", "dataset_stats", "[", "'endpoint'", "]", ",", "\n", "task", "=", "dataset_stats", "[", "'task'", "]", ",", "\n", "all_features", "=", "all_features", "\n", ")", "\n", "\n", "try", ":", "\n", "        ", "meta_path", ".", "write_text", "(", "metadata", ")", "\n", "", "except", "IOError", "as", "err", ":", "\n", "        ", "print", "(", "err", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.EpistasisLab_pmlb.pmlb.support_funcs.write_readme": [[232, 249], ["print", "pathlib.Path", "pathlib.Path.exists", "readme_template.format", "pathlib.Path.write_text", "print"], "function", ["None"], ["", "", "def", "write_readme", "(", "dataset", ",", "local_cache_dir", "=", "'datasets/'", ")", ":", "\n", "    ", "readme_template", "=", "'''\\\n# {dataset}\n\n[**Pandas Profiling Report**](https://epistasislab.github.io/pmlb/profile/{dataset}.html)\n\n[Metadata](metadata.yaml) | [Summary Statistics](summary_stats.tsv)\n\n'''", "\n", "\"\"\"Writes a readme file for a dataset.\"\"\"", "\n", "print", "(", "dataset", ")", "\n", "path", "=", "pathlib", ".", "Path", "(", "f'{local_cache_dir}{dataset}/README.md'", ")", "\n", "\n", "if", "path", ".", "exists", "(", ")", ":", "\n", "        ", "print", "(", "f'WARNING: {path} exists. Overwriting...'", ")", "\n", "", "readme", "=", "readme_template", ".", "format", "(", "dataset", "=", "dataset", ")", "\n", "path", ".", "write_text", "(", "readme", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.EpistasisLab_pmlb.pmlb.support_funcs.last_commit_message": [[250, 257], ["subprocess.check_output"], "function", ["None"], ["", "def", "last_commit_message", "(", ")", "->", "str", ":", "\n", "    ", "\"\"\"\n    Get commit message from last commit, excluding merge commits\n    \"\"\"", "\n", "command", "=", "\"git log --no-merges -1 --pretty=%B\"", ".", "split", "(", ")", "\n", "message", "=", "subprocess", ".", "check_output", "(", "command", ",", "universal_newlines", "=", "True", ")", "\n", "return", "message", "\n", "", ""]]}