{"home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.None.train_model.init_argparser": [[38, 112], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument"], "function", ["None"], ["def", "init_argparser", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "\n", "# Model arguments", "\n", "parser", ".", "add_argument", "(", "'--train'", ",", "help", "=", "'Training data'", ")", "\n", "parser", ".", "add_argument", "(", "'--dev'", ",", "help", "=", "'Development data'", ")", "\n", "parser", ".", "add_argument", "(", "'--monitor'", ",", "nargs", "=", "'+'", ",", "default", "=", "[", "]", ",", "\n", "help", "=", "'Data to monitor during training'", ")", "\n", "parser", ".", "add_argument", "(", "'--output_dir'", ",", "default", "=", "'models/'", ",", "\n", "help", "=", "'Path to model directory. If load_checkpoint is True, then path to checkpoint directory has to be provided'", ")", "\n", "parser", ".", "add_argument", "(", "'--epochs'", ",", "type", "=", "int", ",", "\n", "help", "=", "'Number of epochs'", ",", "default", "=", "6", ")", "\n", "parser", ".", "add_argument", "(", "'--optim'", ",", "type", "=", "str", ",", "help", "=", "'Choose optimizer'", ",", "\n", "choices", "=", "[", "'adam'", ",", "'adadelta'", ",", "'adagrad'", ",", "'adamax'", ",", "'rmsprop'", ",", "'sgd'", "]", ")", "\n", "parser", ".", "add_argument", "(", "'--max_len'", ",", "type", "=", "int", ",", "\n", "help", "=", "'Maximum sequence length'", ",", "default", "=", "50", ")", "\n", "parser", ".", "add_argument", "(", "'--encoder'", ",", "type", "=", "str", ",", "\n", "help", "=", "'Which encoder to use'", ",", "choices", "=", "[", "'rnn'", ",", "'conv'", "]", ")", "\n", "parser", ".", "add_argument", "(", "'--decoder'", ",", "type", "=", "str", ",", "\n", "help", "=", "'Which decoder to use'", ",", "choices", "=", "[", "'rnn'", ",", "'conv'", "]", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--rnn_cell'", ",", "help", "=", "\"Chose type of rnn cell\"", ",", "default", "=", "'lstm'", ")", "\n", "parser", ".", "add_argument", "(", "'--bidirectional'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "\"Flag for bidirectional encoder\"", ")", "\n", "parser", ".", "add_argument", "(", "'--embedding_size'", ",", "type", "=", "int", ",", "\n", "help", "=", "'Embedding size'", ",", "default", "=", "128", ")", "\n", "parser", ".", "add_argument", "(", "'--hidden_size'", ",", "type", "=", "int", ",", "\n", "help", "=", "'Hidden layer size'", ",", "default", "=", "128", ")", "\n", "parser", ".", "add_argument", "(", "'--n_layers'", ",", "type", "=", "int", ",", "\n", "help", "=", "'Number of RNN layers in both encoder and decoder'", ",", "default", "=", "2", ")", "\n", "parser", ".", "add_argument", "(", "'--n_conv_layers'", ",", "type", "=", "int", ",", "\n", "help", "=", "'Number of Convolutional layers in both encoder and decoder'", ",", "default", "=", "3", ")", "\n", "parser", ".", "add_argument", "(", "'--blck_vocab'", ",", "type", "=", "int", ",", "\n", "help", "=", "'blocks vocabulary size'", ",", "default", "=", "50000", ")", "\n", "parser", ".", "add_argument", "(", "'--ins_vocab'", ",", "type", "=", "int", ",", "\n", "help", "=", "'instructions vocabulary size'", ",", "default", "=", "50000", ")", "\n", "parser", ".", "add_argument", "(", "'--dropout_p_encoder'", ",", "type", "=", "float", ",", "\n", "help", "=", "'Dropout probability for the encoder'", ",", "default", "=", "0.2", ")", "\n", "parser", ".", "add_argument", "(", "'--dropout_p_decoder'", ",", "type", "=", "float", ",", "\n", "help", "=", "'Dropout probability for the decoder'", ",", "default", "=", "0.2", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--attention'", ",", "choices", "=", "[", "'pre-rnn'", ",", "'post-rnn'", "]", ",", "default", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "'--attention_method'", ",", "\n", "choices", "=", "[", "'dot'", ",", "'mlp'", ",", "'concat'", ",", "'general'", "]", ",", "default", "=", "None", ")", "\n", "parser", ".", "add_argument", "(", "'--metrics'", ",", "nargs", "=", "'+'", ",", "default", "=", "[", "'word_acc'", ",", "'seq_acc'", "]", ",", "choices", "=", "[", "\n", "'word_acc'", ",", "'seq_acc'", "]", ",", "help", "=", "'Metrics to use'", ")", "\n", "parser", ".", "add_argument", "(", "'--full_focus'", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "'--batch_size'", ",", "type", "=", "int", ",", "\n", "help", "=", "'Batch size'", ",", "default", "=", "32", ")", "\n", "parser", ".", "add_argument", "(", "'--eval_batch_size'", ",", "type", "=", "int", ",", "\n", "help", "=", "'Batch size'", ",", "default", "=", "128", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--lr'", ",", "type", "=", "float", ",", "help", "=", "'Learning rate, recommended settings.'", "\n", "'\\nrecommended settings: adam=0.001 '", "\n", "'adadelta=1.0 adamax=0.002 rmsprop=0.01 sgd=0.1'", ",", "default", "=", "0.001", ")", "\n", "# Data management", "\n", "parser", ".", "add_argument", "(", "'--load_checkpoint'", ",", "\n", "help", "=", "'The name of the checkpoint to load, usually an encoded time string'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--save_every'", ",", "type", "=", "int", ",", "\n", "help", "=", "'Every how many batches the model should be saved'", ",", "default", "=", "100", ")", "\n", "parser", ".", "add_argument", "(", "'--print_every'", ",", "type", "=", "int", ",", "\n", "help", "=", "'Every how many batches to print results'", ",", "default", "=", "100", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--resume-training'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'Indicates if training has to be resumed from the latest checkpoint'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--log-level'", ",", "default", "=", "'info'", ",", "help", "=", "'Logging level.'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--write-logs'", ",", "help", "=", "'Specify file to write logs to after training'", ")", "\n", "parser", ".", "add_argument", "(", "'--cuda_device'", ",", "default", "=", "0", ",", "\n", "type", "=", "int", ",", "help", "=", "'set cuda device to use'", ")", "\n", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.None.train_model.init_logging": [[113, 117], ["logging.basicConfig", "logging.info", "getattr", "opt.log_level.upper"], "function", ["None"], ["", "def", "init_logging", "(", "opt", ")", ":", "\n", "    ", "logging", ".", "basicConfig", "(", "format", "=", "LOG_FORMAT", ",", "level", "=", "getattr", "(", "\n", "logging", ",", "opt", ".", "log_level", ".", "upper", "(", ")", ")", ")", "\n", "logging", ".", "info", "(", "opt", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.None.train_model.prepare_iters": [[118, 154], ["src.data.fields.MechField", "src.data.fields.MechField", "src.data.fields.MechField", "src.data.get_standard_iter.get_standard_iter", "collections.OrderedDict", "torchtext.data.TabularDataset", "src.data.get_standard_iter.get_standard_iter", "src.data.get_standard_iter.get_standard_iter", "torchtext.data.TabularDataset", "torchtext.data.TabularDataset", "len", "len"], "function", ["home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.data.get_standard_iter.get_standard_iter", "home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.data.get_standard_iter.get_standard_iter", "home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.data.get_standard_iter.get_standard_iter"], ["", "def", "prepare_iters", "(", "opt", ")", ":", "\n", "# use_output_eos = not opt.ignore_output_eos", "\n", "    ", "src", "=", "MechField", "(", "batch_first", "=", "True", ")", "\n", "ins", "=", "MechField", "(", "batch_first", "=", "True", ")", "\n", "tgt", "=", "MechField", "(", "batch_first", "=", "True", ")", "\n", "tabular_data_fields", "=", "[", "(", "'src'", ",", "src", ")", ",", "(", "'ins'", ",", "ins", ")", ",", "(", "'tgt'", ",", "tgt", ")", "]", "\n", "\n", "max_len", "=", "opt", ".", "max_len", "\n", "\n", "def", "len_filter", "(", "example", ")", ":", "\n", "        ", "return", "len", "(", "example", ".", "src", ")", "<=", "max_len", "and", "len", "(", "example", ".", "tgt", ")", "<=", "max_len", "\n", "\n", "# generate training and testing data", "\n", "", "train", "=", "get_standard_iter", "(", "torchtext", ".", "data", ".", "TabularDataset", "(", "\n", "path", "=", "opt", ".", "train", ",", "format", "=", "'tsv'", ",", "\n", "fields", "=", "tabular_data_fields", ",", "\n", "filter_pred", "=", "len_filter", "\n", ")", ",", "batch_size", "=", "opt", ".", "batch_size", ")", "\n", "\n", "if", "opt", ".", "dev", ":", "\n", "        ", "dev", "=", "get_standard_iter", "(", "torchtext", ".", "data", ".", "TabularDataset", "(", "\n", "path", "=", "opt", ".", "dev", ",", "format", "=", "'tsv'", ",", "\n", "fields", "=", "tabular_data_fields", ",", "\n", "filter_pred", "=", "len_filter", ")", ",", "batch_size", "=", "opt", ".", "eval_batch_size", ")", "\n", "", "else", ":", "\n", "        ", "dev", "=", "None", "\n", "\n", "", "monitor_data", "=", "OrderedDict", "(", ")", "\n", "for", "dataset", "in", "opt", ".", "monitor", ":", "\n", "        ", "m", "=", "get_standard_iter", "(", "torchtext", ".", "data", ".", "TabularDataset", "(", "\n", "path", "=", "dataset", ",", "format", "=", "'tsv'", ",", "\n", "fields", "=", "tabular_data_fields", ",", "\n", "filter_pred", "=", "len_filter", ")", ",", "batch_size", "=", "opt", ".", "eval_batch_size", ")", "\n", "monitor_data", "[", "dataset", "]", "=", "m", "\n", "\n", "", "return", "src", ",", "ins", ",", "tgt", ",", "train", ",", "dev", ",", "monitor_data", "\n", "\n"]], "home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.None.train_model.prepare_losses_and_metrics": [[155, 171], ["src.loss.loss.NLLLoss", "loss.to", "metrics.append", "metrics.append", "src.metrics.metrics.WordAccuracy", "src.metrics.metrics.SequenceAccuracy"], "function", ["home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.loss.loss.Loss.to"], ["", "def", "prepare_losses_and_metrics", "(", "opt", ",", "pad", ")", ":", "\n", "# Prepare loss and metrics", "\n", "    ", "losses", "=", "[", "NLLLoss", "(", "ignore_index", "=", "pad", ")", "]", "\n", "loss_weights", "=", "[", "1.", "]", "\n", "\n", "for", "loss", "in", "losses", ":", "\n", "        ", "loss", ".", "to", "(", "device", ")", "\n", "\n", "", "metrics", "=", "[", "]", "\n", "\n", "if", "'word_acc'", "in", "opt", ".", "metrics", ":", "\n", "        ", "metrics", ".", "append", "(", "WordAccuracy", "(", "ignore_index", "=", "pad", ")", ")", "\n", "", "if", "'seq_acc'", "in", "opt", ".", "metrics", ":", "\n", "        ", "metrics", ".", "append", "(", "SequenceAccuracy", "(", "ignore_index", "=", "pad", ")", ")", "\n", "\n", "", "return", "losses", ",", "loss_weights", ",", "metrics", "\n", "\n"]], "home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.None.train_model.load_model_from_checkpoint": [[172, 189], ["logging.info", "os.path.join", "src.utils.Checkpoint.load", "os.path.join"], "function", ["home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.utils.checkpoint.Checkpoint.load"], ["", "def", "load_model_from_checkpoint", "(", "opt", ",", "src", ",", "tgt", ")", ":", "\n", "    ", "logging", ".", "info", "(", "\"loading checkpoint from {}\"", ".", "format", "(", "\n", "os", ".", "path", ".", "join", "(", "opt", ".", "output_dir", ",", "opt", ".", "load_checkpoint", ")", ")", ")", "\n", "checkpoint_path", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "output_dir", ",", "opt", ".", "load_checkpoint", ")", "\n", "checkpoint", "=", "Checkpoint", ".", "load", "(", "checkpoint_path", ")", "\n", "seq2seq", "=", "checkpoint", ".", "model", "\n", "\n", "input_vocab", "=", "checkpoint", ".", "input_vocab", "\n", "src", ".", "vocab", "=", "input_vocab", "\n", "\n", "output_vocab", "=", "checkpoint", ".", "output_vocab", "\n", "tgt", ".", "vocab", "=", "output_vocab", "\n", "\n", "ins_vocab", "=", "checkpoint", ".", "ins_vocab", "\n", "ins", ".", "vocab", "=", "ins_vocab", "\n", "\n", "return", "seq2seq", ",", "input_vocab", ",", "ins_vocab", ",", "output_vocab", "\n", "\n"]], "home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.None.train_model.initialize_model": [[191, 249], ["src.build_vocab", "ins.build_vocab", "tgt.build_vocab", "src.models.enc2dec.Enc2dec", "torch.nn.DataParallel.to", "src.models.EncoderRNN.EncoderRNN", "src.models.EncoderConv.EncoderConv.to", "src.models.EncoderConv.EncoderConv", "src.models.EncoderConv.EncoderConv.to", "src.models.DecoderRNN.DecoderRNN", "src.models.DecoderConv.DecoderConv.to", "src.models.DecoderConv.DecoderConv", "src.models.DecoderConv.DecoderConv.to", "torch.cuda.device_count", "torch.cuda.device_count", "logging.info", "torch.nn.DataParallel", "torch.nn.DataParallel", "len", "len", "len", "len", "torch.cuda.device_count", "torch.cuda.device_count"], "function", ["home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.data.fields.MechField.build_vocab", "home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.data.fields.MechField.build_vocab", "home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.data.fields.MechField.build_vocab", "home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.loss.loss.Loss.to", "home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.loss.loss.Loss.to", "home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.loss.loss.Loss.to", "home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.loss.loss.Loss.to", "home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.loss.loss.Loss.to"], ["", "def", "initialize_model", "(", "opt", ",", "src", ",", "ins", ",", "tgt", ",", "train", ")", ":", "\n", "# build vocabulary", "\n", "    ", "src", ".", "build_vocab", "(", "train", ".", "dataset", ",", "max_size", "=", "opt", ".", "blck_vocab", ")", "\n", "ins", ".", "build_vocab", "(", "train", ".", "dataset", ",", "max_size", "=", "opt", ".", "ins_vocab", ")", "\n", "tgt", ".", "build_vocab", "(", "train", ".", "dataset", ",", "max_size", "=", "opt", ".", "blck_vocab", ")", "\n", "input_vocab", "=", "src", ".", "vocab", "\n", "ins_vocab", "=", "ins", ".", "vocab", "\n", "output_vocab", "=", "tgt", ".", "vocab", "\n", "\n", "# Initialize model", "\n", "hidden_size", "=", "opt", ".", "hidden_size", "\n", "# decoder_hidden_size = hidden_size * 2 if opt.bidirectional else hidden_size", "\n", "\n", "if", "opt", ".", "encoder", "==", "\"rnn\"", ":", "\n", "        ", "encoder", "=", "EncoderRNN", "(", "len", "(", "ins", ".", "vocab", ")", ",", "opt", ".", "max_len", ",", "opt", ".", "embedding_size", ",", "opt", ".", "hidden_size", ",", "\n", "dropout_p", "=", "opt", ".", "dropout_p_encoder", ",", "\n", "n_layers", "=", "opt", ".", "n_layers", ",", "\n", "bidirectional", "=", "opt", ".", "bidirectional", ",", "\n", "rnn_cell", "=", "opt", ".", "rnn_cell", ",", "\n", "variable_lengths", "=", "True", ")", "\n", "encoder", ".", "to", "(", "device", ")", "\n", "", "else", ":", "\n", "        ", "encoder", "=", "EncoderConv", "(", "len", "(", "ins", ".", "vocab", ")", ",", "3", ",", "opt", ".", "hidden_size", ",", "opt", ".", "hidden_size", ",", "\n", "n_layers", "=", "opt", ".", "n_conv_layers", ",", "\n", "dropout_p", "=", "opt", ".", "dropout_p_decoder", ",", "\n", "max_len_blocks", "=", "5", ")", "\n", "encoder", ".", "to", "(", "device", ")", "\n", "\n", "", "if", "opt", ".", "decoder", "==", "\"rnn\"", ":", "\n", "        ", "decoder", "=", "DecoderRNN", "(", "len", "(", "src", ".", "vocab", ")", ",", "opt", ".", "max_len", ",", "opt", ".", "hidden_size", ",", "\n", "dropout_p", "=", "opt", ".", "dropout_p_decoder", ",", "\n", "n_layers", "=", "opt", ".", "n_layers", ",", "\n", "use_attention", "=", "opt", ".", "attention", ",", "\n", "attention_method", "=", "opt", ".", "attention_method", ",", "\n", "full_focus", "=", "opt", ".", "full_focus", ",", "\n", "bidirectional", "=", "opt", ".", "bidirectional", ",", "\n", "rnn_cell", "=", "opt", ".", "rnn_cell", ")", "\n", "decoder", ".", "to", "(", "device", ")", "\n", "", "else", ":", "\n", "        ", "decoder", "=", "DecoderConv", "(", "len", "(", "src", ".", "vocab", ")", ",", "3", ",", "opt", ".", "hidden_size", ",", "opt", ".", "hidden_size", ",", "\n", "n_layers", "=", "opt", ".", "n_conv_layers", ",", "\n", "dropout_p", "=", "opt", ".", "dropout_p_decoder", ",", "\n", "max_len_blocks", "=", "23", ",", "\n", "use_attention", "=", "opt", ".", "attention", ",", "\n", "attention_method", "=", "opt", ".", "attention_method", ",", "\n", "full_focus", "=", "opt", ".", "full_focus", ")", "\n", "decoder", ".", "to", "(", "device", ")", "\n", "\n", "", "enc2dec", "=", "Enc2dec", "(", "encoder", ",", "decoder", ",", "which_enc", "=", "opt", ".", "encoder", ",", "which_dec", "=", "opt", ".", "decoder", ")", "\n", "\n", "# This enables using all GPUs available", "\n", "if", "torch", ".", "cuda", ".", "device_count", "(", ")", ">", "1", ":", "\n", "        ", "logging", ".", "info", "(", "\"Using {} GPUs\"", ".", "format", "(", "torch", ".", "cuda", ".", "device_count", "(", ")", ")", ")", "\n", "enc2dec", "=", "torch", ".", "nn", ".", "DataParallel", "(", "enc2dec", ")", "\n", "\n", "", "enc2dec", ".", "to", "(", "device", ")", "\n", "\n", "return", "enc2dec", ",", "input_vocab", ",", "ins_vocab", ",", "output_vocab", "\n", "\n"]], "home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.utils.log.Log.__init__": [[20, 26], ["collections.defaultdict", "log.Log.read_from_file", "collections.defaultdict"], "methods", ["home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.utils.log.Log.read_from_file"], ["def", "__init__", "(", "self", ",", "path", "=", "None", ")", ":", "\n", "        ", "self", ".", "steps", "=", "[", "]", "\n", "self", ".", "data", "=", "defaultdict", "(", "lambda", ":", "defaultdict", "(", "list", ")", ")", "\n", "\n", "if", "path", "is", "not", "None", ":", "\n", "            ", "self", ".", "read_from_file", "(", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.utils.log.Log.write_to_log": [[27, 38], ["metric.get_val", "[].append", "loss.get_loss", "[].append"], "methods", ["home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.metrics.metrics.SequenceAccuracy.get_val", "home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.loss.loss.Perplexity.get_loss"], ["", "", "def", "write_to_log", "(", "self", ",", "dataname", ",", "losses", ",", "metrics", ")", ":", "\n", "        ", "\"\"\"\n        Add new losses to Log object.\n        \"\"\"", "\n", "for", "metric", "in", "metrics", ":", "\n", "            ", "val", "=", "metric", ".", "get_val", "(", ")", "\n", "self", ".", "data", "[", "dataname", "]", "[", "metric", ".", "log_name", "]", ".", "append", "(", "val", ")", "\n", "\n", "", "for", "loss", "in", "losses", ":", "\n", "            ", "val", "=", "loss", ".", "get_loss", "(", ")", "\n", "self", ".", "data", "[", "dataname", "]", "[", "loss", ".", "log_name", "]", ".", "append", "(", "val", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.utils.log.Log.update_step": [[39, 41], ["log.Log.steps.append"], "methods", ["None"], ["", "", "def", "update_step", "(", "self", ",", "step", ")", ":", "\n", "        ", "self", ".", "steps", ".", "append", "(", "step", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.utils.log.Log.write_to_file": [[42, 69], ["open", "open.write", "log.Log.data.keys", "open.close", "steps.encode", "open.write", "open.write", "dataset.encode", "data.encode", "str"], "methods", ["None"], ["", "def", "write_to_file", "(", "self", ",", "path", ")", ":", "\n", "        ", "\"\"\"\n        Write the contents of the log object to a file. Format:\n        steps step1 step2 step3 ...\n        name_of_dataset1\n            metric_name val1 val2 val3 val4 ...\n            loss_name val1 val2 val3 val4 ...\n            ...\n        name_of_dataset2\n            ...\n        \"\"\"", "\n", "\n", "f", "=", "open", "(", "path", ",", "'wb'", ")", "\n", "\n", "# write steps", "\n", "steps", "=", "\"steps %s\\n\"", "%", "' '", ".", "join", "(", "[", "'%i'", "%", "step", "for", "step", "in", "self", ".", "steps", "]", ")", "\n", "f", ".", "write", "(", "steps", ".", "encode", "(", ")", ")", "\n", "\n", "# write logs", "\n", "for", "dataset", "in", "self", ".", "data", ".", "keys", "(", ")", ":", "\n", "            ", "f", ".", "write", "(", "dataset", ".", "encode", "(", ")", "+", "b'\\n'", ")", "\n", "for", "metric", "in", "self", ".", "data", "[", "dataset", "]", ":", "\n", "                ", "data", "=", "\"\\t%s %s\\n\"", "%", "(", "metric", ",", "' '", ".", "join", "(", "\n", "[", "str", "(", "v", ")", "for", "v", "in", "self", ".", "data", "[", "dataset", "]", "[", "metric", "]", "]", ")", ")", "\n", "f", ".", "write", "(", "data", ".", "encode", "(", ")", ")", "\n", "\n", "", "", "f", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.utils.log.Log.read_from_file": [[70, 95], ["open", "open.readlines", "int", "line.split", "len", "l_list[].decode", "lines[].split", "float", "l_list[].decode"], "methods", ["None"], ["", "def", "read_from_file", "(", "self", ",", "path", ")", ":", "\n", "        ", "\"\"\"\n        Fill the contents of a log object reading information\n        from a file that was also generated by a log object.\n        The format of this file should be:\n        steps step1 step2 step3 ...\n        name_of_dataset1\n            metric_name val1 val2 val3 val4 ...\n            loss_name val1 val2 val3 val4 ...\n            ...\n        name_of_dataset2\n            ...\n        \"\"\"", "\n", "f", "=", "open", "(", "path", ",", "'rb'", ")", "\n", "\n", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "self", ".", "steps", "=", "[", "int", "(", "i", ")", "for", "i", "in", "lines", "[", "0", "]", ".", "split", "(", ")", "[", "1", ":", "]", "]", "\n", "\n", "for", "line", "in", "lines", "[", "1", ":", "]", ":", "\n", "            ", "l_list", "=", "line", ".", "split", "(", ")", "\n", "if", "len", "(", "l_list", ")", "==", "1", ":", "\n", "                ", "cur_set", "=", "l_list", "[", "0", "]", ".", "decode", "(", ")", "\n", "", "else", ":", "\n", "                ", "data", "=", "[", "float", "(", "i", ")", "for", "i", "in", "l_list", "[", "1", ":", "]", "]", "\n", "self", ".", "data", "[", "cur_set", "]", "[", "l_list", "[", "0", "]", ".", "decode", "(", ")", "]", "=", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.utils.log.Log.get_logs": [[96, 98], ["None"], "methods", ["None"], ["", "", "", "def", "get_logs", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.utils.log.Log.get_steps": [[99, 101], ["None"], "methods", ["None"], ["", "def", "get_steps", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "steps", "\n", "\n"]], "home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.utils.log.LogCollection.__init__": [[105, 108], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "logs", "=", "[", "]", "\n", "self", ".", "log_names", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.utils.log.LogCollection.add_log_from_file": [[109, 112], ["log.LogCollection.logs.append", "log.LogCollection.log_names.append", "log.Log"], "methods", ["None"], ["", "def", "add_log_from_file", "(", "self", ",", "path", ")", ":", "\n", "        ", "self", ".", "logs", ".", "append", "(", "Log", "(", "path", ")", ")", "\n", "self", ".", "log_names", ".", "append", "(", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.utils.log.LogCollection.add_log_from_folder": [[113, 131], ["os.walk", "os.path.join", "os.path.join.endswith", "log.LogCollection.logs.append", "log.LogCollection.log_names.append", "name_parser", "log.Log"], "methods", ["None"], ["", "def", "add_log_from_folder", "(", "self", ",", "folder_path", ",", "ext", "=", "''", ",", "name_parser", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Recursively loop through a folder and add all its\n        the files with appropriate extension to self.logs.\n        \"\"\"", "\n", "\n", "for", "subdir", ",", "dirs", ",", "files", "in", "os", ".", "walk", "(", "folder_path", ")", ":", "\n", "            ", "for", "fname", "in", "files", ":", "\n", "                ", "f", "=", "os", ".", "path", ".", "join", "(", "subdir", ",", "fname", ")", "\n", "\n", "if", "f", ".", "endswith", "(", "ext", ")", ":", "\n", "                    ", "if", "name_parser", ":", "\n", "                        ", "log_name", "=", "name_parser", "(", "f", ",", "subdir", ")", "\n", "", "else", ":", "\n", "                        ", "log_name", "=", "f", "\n", "\n", "", "self", ".", "logs", ".", "append", "(", "Log", "(", "f", ")", ")", "\n", "self", ".", "log_names", ".", "append", "(", "log_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.utils.log.LogCollection.plot_metric": [[132, 185], ["matplotlib.subplots", "matplotlib.subplots", "matplotlib.subplots", "ax.spines[].set_visible", "ax.spines[].set_visible", "enumerate", "matplotlib.legend", "matplotlib.legend", "matplotlib.legend", "restrict_model", "matplotlib.show", "matplotlib.show", "matplotlib.show", "log.data.keys", "restrict_data", "ax.tick_params", "matplotlib.xlabel", "matplotlib.xlabel", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.ylabel", "matplotlib.ylabel", "matplotlib.title", "matplotlib.title", "matplotlib.title", "data_name_parser", "log.LogCollection.prune_data", "ax.plot", "ax.plot", "float", "color_group"], "methods", ["home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.utils.log.LogCollection.prune_data"], ["", "", "", "", "def", "plot_metric", "(", "self", ",", "metric_name", ",", "restrict_model", "=", "lambda", "x", ":", "True", ",", "\n", "restrict_data", "=", "lambda", "x", ":", "True", ",", "data_name_parser", "=", "None", ",", "\n", "color_group", "=", "False", ",", "title", "=", "''", ",", "eor", "=", "-", "1", ",", "\n", "show_figure", "=", "True", ",", "ylabel", "=", "None", ",", "**", "line_kwargs", ")", ":", "\n", "        ", "\"\"\"\n        Plot all values for a specific metrics. A function restrict can be\n        inputted to restrict the set of models being plotted. A function group\n        can be used to group the results colour-wise.\n        Args\n            restrict (func):\n            group (func):\n        \"\"\"", "\n", "\n", "# colormap = plt.get_cmap('plasma')(np.linspace(0,1, 25))", "\n", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", "figsize", "=", "(", "13", ",", "11", ")", ")", "\n", "ax", ".", "spines", "[", "'top'", "]", ".", "set_visible", "(", "False", ")", "\n", "ax", ".", "spines", "[", "'right'", "]", ".", "set_visible", "(", "False", ")", "\n", "# ax.spines['bottom'].set_visible(False)", "\n", "# ax.spines['left'].set_visible(False)", "\n", "# ax.set_color_cycle(colormap)", "\n", "\n", "for", "i", ",", "name", "in", "enumerate", "(", "self", ".", "log_names", ")", ":", "\n", "            ", "if", "restrict_model", "(", "name", ")", ":", "\n", "                ", "label", "=", "name", "+", "' '", "\n", "log", "=", "self", ".", "logs", "[", "i", "]", "\n", "for", "dataset", "in", "log", ".", "data", ".", "keys", "(", ")", ":", "\n", "                    ", "if", "restrict_data", "(", "dataset", ")", ":", "\n", "                        ", "label_name", "=", "data_name_parser", "(", "\n", "dataset", ",", "name", ")", "if", "data_name_parser", "else", "dataset", "\n", "steps", "=", "[", "step", "/", "float", "(", "232", ")", "for", "step", "in", "log", ".", "steps", "[", ":", "eor", "]", "]", "\n", "if", "color_group", ":", "\n", "                            ", "steps", ",", "data", "=", "self", ".", "prune_data", "(", "\n", "steps", ",", "log", ".", "data", "[", "dataset", "]", "[", "metric_name", "]", "[", ":", "eor", "]", ")", "\n", "ax", ".", "plot", "(", "steps", ",", "data", ",", "\n", "color_group", "(", "name", ",", "dataset", ")", ",", "\n", "label", "=", "label", "+", "label_name", ",", "linewidth", "=", "3.0", ",", "**", "line_kwargs", ")", "\n", "", "else", ":", "\n", "                            ", "ax", ".", "plot", "(", "steps", ",", "\n", "log", ".", "data", "[", "dataset", "]", "[", "metric_name", "]", "[", ":", "eor", "]", ",", "\n", "label", "=", "label", "+", "label_name", ",", "**", "line_kwargs", ")", "\n", "", "ax", ".", "tick_params", "(", "\n", "axis", "=", "'both'", ",", "which", "=", "'major'", ",", "labelsize", "=", "20", ")", "\n", "plt", ".", "xlabel", "(", "\"Epochs\"", ",", "fontsize", "=", "24", ")", "\n", "plt", ".", "ylabel", "(", "\n", "metric_name", "if", "ylabel", "is", "None", "else", "ylabel", ",", "fontsize", "=", "24", ")", "\n", "plt", ".", "title", "(", "title", ")", "\n", "\n", "", "", "", "", "plt", ".", "legend", "(", ")", "\n", "\n", "if", "show_figure", ":", "\n", "            ", "plt", ".", "show", "(", ")", "\n", "\n", "", "return", "fig", "\n", "\n"]], "home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.utils.log.LogCollection.find_highest_average": [[186, 229], ["dict", "dict", "enumerate", "dict.items", "restrict_model", "dict", "find_basename", "log.data.keys", "find_data_name", "restrict_data", "max", "dict", "dict"], "methods", ["None"], ["", "def", "find_highest_average", "(", "self", ",", "metric_name", ",", "find_basename", ",", "\n", "restrict_model", "=", "lambda", "x", ":", "True", ",", "\n", "restrict_data", "=", "lambda", "x", ":", "True", ",", "\n", "find_data_name", "=", "lambda", "x", ":", "x", ")", ":", "\n", "        ", "\"\"\"\n        Find the highest average over runs, things that have the same\n        basename (as returned by 'find_basename') will be averaged.\n        \"\"\"", "\n", "\n", "data", "=", "dict", "(", ")", "\n", "counts", "=", "dict", "(", ")", "\n", "\n", "for", "i", ",", "name", "in", "enumerate", "(", "self", ".", "log_names", ")", ":", "\n", "            ", "if", "restrict_model", "(", "name", ")", ":", "\n", "                ", "log", "=", "self", ".", "logs", "[", "i", "]", "\n", "basename", "=", "find_basename", "(", "name", ")", "\n", "for", "dataset", "in", "log", ".", "data", ".", "keys", "(", ")", ":", "\n", "                    ", "dataname", "=", "find_data_name", "(", "dataset", ")", "\n", "if", "restrict_data", "(", "dataset", ")", ":", "\n", "                        ", "log_max", "=", "max", "(", "log", ".", "data", "[", "dataset", "]", "[", "metric_name", "]", ")", "\n", "if", "basename", "in", "data", ":", "\n", "                            ", "if", "dataname", "in", "data", "[", "basename", "]", ":", "\n", "                                ", "data", "[", "basename", "]", "[", "dataname", "]", "+=", "log_max", "\n", "counts", "[", "basename", "]", "[", "dataname", "]", "+=", "1", "\n", "", "else", ":", "\n", "                                ", "data", "[", "basename", "]", "[", "dataname", "]", "=", "log_max", "\n", "counts", "[", "basename", "]", "[", "dataname", "]", "=", "1", "\n", "", "", "else", ":", "\n", "                            ", "data", "[", "basename", "]", "=", "dict", "(", ")", "\n", "data", "[", "basename", "]", "[", "dataname", "]", "=", "log_max", "\n", "counts", "[", "basename", "]", "=", "dict", "(", ")", "\n", "counts", "[", "basename", "]", "[", "dataname", "]", "=", "1", "\n", "\n", "# find max", "\n", "", "", "", "", "", "max_scores", "=", "{", "}", "\n", "for", "basename", ",", "datasets", "in", "data", ".", "items", "(", ")", ":", "\n", "            ", "max_scores", "[", "basename", "]", "=", "dict", "(", ")", "\n", "for", "dataset", "in", "datasets", ":", "\n", "                ", "c", "=", "counts", "[", "basename", "]", "[", "dataset", "]", "\n", "max_av", "=", "data", "[", "basename", "]", "[", "dataset", "]", "/", "c", "\n", "max_scores", "[", "basename", "]", "[", "dataset", "]", "=", "max_av", "\n", "\n", "", "", "return", "max_scores", "\n", "\n"]], "home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.utils.log.LogCollection.group_data": [[230, 253], ["collections.defaultdict", "enumerate", "find_basename", "log.data.keys", "collections.defaultdict", "restrict_model", "find_data_name", "[].append", "restrict_data"], "methods", ["None"], ["", "def", "group_data", "(", "self", ",", "metric_name", ",", "find_basename", ",", "\n", "restrict_model", "=", "lambda", "x", ":", "True", ",", "\n", "restrict_data", "=", "lambda", "x", ":", "True", ",", "\n", "find_data_name", "=", "lambda", "x", ":", "x", ")", ":", "\n", "\n", "        ", "group_data", "=", "defaultdict", "(", "lambda", ":", "defaultdict", "(", "list", ")", ")", "\n", "\n", "for", "i", ",", "name", "in", "enumerate", "(", "self", ".", "log_names", ")", ":", "\n", "            ", "if", "not", "restrict_model", "(", "name", ")", ":", "\n", "                ", "continue", "\n", "\n", "", "log", "=", "self", ".", "logs", "[", "i", "]", "\n", "\n", "basename", "=", "find_basename", "(", "name", ")", "\n", "for", "dataset", "in", "log", ".", "data", ".", "keys", "(", ")", ":", "\n", "                ", "if", "not", "restrict_data", "(", "dataset", ")", ":", "\n", "                    ", "continue", "\n", "\n", "", "dataname", "=", "find_data_name", "(", "dataset", ")", "\n", "group_data", "[", "basename", "]", "[", "dataname", "]", ".", "append", "(", "\n", "log", ".", "data", "[", "dataset", "]", "[", "metric_name", "]", ")", "\n", "\n", "", "", "return", "group_data", "\n", "\n"]], "home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.utils.log.LogCollection.plot_groups": [[254, 290], ["matplotlib.subplots", "matplotlib.subplots", "matplotlib.subplots", "ax.spines[].set_visible", "ax.spines[].set_visible", "log.LogCollection.group_data", "log.LogCollection.items", "ax.tick_params", "matplotlib.xlabel", "matplotlib.xlabel", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.ylabel", "matplotlib.ylabel", "matplotlib.legend", "matplotlib.legend", "matplotlib.legend", "matplotlib.show", "matplotlib.show", "matplotlib.show", "float", "np.mean", "print", "ax.plot", "ax.plot", "color_group", "color_group"], "methods", ["home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.utils.log.LogCollection.group_data"], ["", "def", "plot_groups", "(", "self", ",", "metric_name", ",", "find_basename", ",", "\n", "restrict_model", "=", "lambda", "x", ":", "True", ",", "\n", "restrict_data", "=", "lambda", "x", ":", "True", ",", "\n", "find_data_name", "=", "lambda", "x", ":", "x", ",", "\n", "color_group", "=", "False", ",", "eor", "=", "-", "1", ")", ":", "\n", "\n", "        ", "import", "numpy", "as", "np", "\n", "\n", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", "figsize", "=", "(", "13", ",", "11", ")", ")", "\n", "ax", ".", "spines", "[", "'top'", "]", ".", "set_visible", "(", "False", ")", "\n", "ax", ".", "spines", "[", "'right'", "]", ".", "set_visible", "(", "False", ")", "\n", "\n", "group_data", "=", "self", ".", "group_data", "(", "metric_name", "=", "metric_name", ",", "\n", "restrict_model", "=", "restrict_model", ",", "\n", "find_basename", "=", "find_basename", ",", "\n", "find_data_name", "=", "find_data_name", ",", "\n", "restrict_data", "=", "restrict_data", ")", "\n", "\n", "steps", "=", "[", "step", "/", "float", "(", "232", ")", "for", "step", "in", "self", ".", "logs", "[", "0", "]", ".", "steps", "[", ":", "eor", "]", "]", "\n", "for", "model", ",", "data", "in", "group_data", ".", "items", "(", ")", ":", "\n", "            ", "for", "dataset", "in", "data", ":", "\n", "                ", "av", "=", "np", ".", "mean", "(", "data", "[", "dataset", "]", ",", "axis", "=", "0", ")", "[", ":", "eor", "]", "\n", "if", "color_group", ":", "\n", "                    ", "print", "(", "dataset", ",", "model", ",", "color_group", "(", "model", ",", "dataset", ")", ")", "\n", "ax", ".", "plot", "(", "steps", ",", "av", ",", "color_group", "(", "model", ",", "dataset", ")", ",", "\n", "label", "=", "model", "+", "dataset", ",", "linewidth", "=", "3.0", ")", "\n", "", "else", ":", "\n", "                    ", "ax", ".", "plot", "(", "steps", ",", "av", ",", "dataset", ",", "label", "=", "model", "+", "dataset", ")", "\n", "\n", "", "", "", "ax", ".", "tick_params", "(", "axis", "=", "'both'", ",", "which", "=", "'major'", ",", "labelsize", "=", "20", ")", "\n", "plt", ".", "xlabel", "(", "\"Epochs\"", ",", "fontsize", "=", "24", ")", "\n", "plt", ".", "ylabel", "(", "\"Loss\"", ",", "fontsize", "=", "24", ")", "\n", "plt", ".", "legend", "(", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n", "return", "fig", "\n", "\n"]], "home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.utils.log.LogCollection.prune_data": [[291, 305], ["len"], "methods", ["None"], ["", "def", "prune_data", "(", "self", ",", "steps", ",", "data", ")", ":", "\n", "        ", "return", "steps", ",", "data", "\n", "\n", "i", "=", "1", "\n", "while", "i", "<", "len", "(", "data", ")", ":", "\n", "            ", "d1", ",", "d2", "=", "data", "[", "i", "-", "1", "]", ",", "data", "[", "i", "]", "\n", "if", "d1", "-", "d2", ">", "1", ":", "\n", "                ", "del", "steps", "[", "i", "]", "\n", "del", "data", "[", "i", "]", "\n", "continue", "\n", "\n", "", "i", "+=", "1", "\n", "\n", "", "return", "steps", ",", "data", "", "", "", ""]], "home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.utils.checkpoint.Checkpoint.__init__": [[39, 49], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "model", ",", "optimizer", ",", "epoch", ",", "step", ",", "\n", "input_vocab", ",", "ins_vocab", ",", "output_vocab", ",", "path", "=", "None", ")", ":", "\n", "        ", "self", ".", "model", "=", "model", "\n", "self", ".", "optimizer", "=", "optimizer", "\n", "self", ".", "input_vocab", "=", "input_vocab", "\n", "self", ".", "ins_vocab", "=", "ins_vocab", "\n", "self", ".", "output_vocab", "=", "output_vocab", "\n", "self", ".", "epoch", "=", "epoch", "\n", "self", ".", "step", "=", "step", "\n", "self", ".", "_path", "=", "path", "\n", "\n"]], "home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.utils.checkpoint.Checkpoint.path": [[50, 55], ["LookupError"], "methods", ["None"], ["", "@", "property", "\n", "def", "path", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_path", "is", "None", ":", "\n", "            ", "raise", "LookupError", "(", "\"The checkpoint has not been saved.\"", ")", "\n", "", "return", "self", ".", "_path", "\n", "\n"]], "home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.utils.checkpoint.Checkpoint.save": [[56, 93], ["os.path.join", "os.path.exists", "os.makedirs", "torch.save", "isinstance", "time.strftime", "shutil.rmtree", "os.path.join", "torch.save", "torch.save", "open", "dill.dump", "open", "dill.dump", "open", "dill.dump", "time.localtime", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.utils.checkpoint.Checkpoint.save", "home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.utils.checkpoint.Checkpoint.save", "home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.utils.checkpoint.Checkpoint.save"], ["", "def", "save", "(", "self", ",", "experiment_dir", ",", "name", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Saves the current model and related training parameters into a subdirectory of the checkpoint directory.\n        By default, the name of the subdirectory is the current local time in Y_M_D_H_M_S format, optionally a variable name can be passed to give the checkpoint a different name.\n        Args:\n            experiment_dir (str): path to the experiment root directory\n            name (str): alternative name for the model\n        Returns:\n             str: path to the saved checkpoint subdirectory\n        \"\"\"", "\n", "name", "=", "name", "or", "time", ".", "strftime", "(", "'%Y_%m_%d_%H_%M_%S'", ",", "time", ".", "localtime", "(", ")", ")", "\n", "\n", "self", ".", "_path", "=", "os", ".", "path", ".", "join", "(", "experiment_dir", ",", "name", ")", "\n", "path", "=", "self", ".", "_path", "\n", "\n", "if", "os", ".", "path", ".", "exists", "(", "path", ")", ":", "\n", "            ", "shutil", ".", "rmtree", "(", "path", ")", "\n", "", "os", ".", "makedirs", "(", "path", ")", "\n", "torch", ".", "save", "(", "{", "'epoch'", ":", "self", ".", "epoch", ",", "\n", "'step'", ":", "self", ".", "step", ",", "\n", "'optimizer'", ":", "self", ".", "optimizer", "\n", "}", ",", "\n", "os", ".", "path", ".", "join", "(", "path", ",", "self", ".", "TRAINER_STATE_NAME", ")", ")", "\n", "\n", "if", "isinstance", "(", "self", ".", "model", ",", "DataParallel", ")", ":", "\n", "            ", "torch", ".", "save", "(", "self", ".", "model", ".", "module", ",", "os", ".", "path", ".", "join", "(", "path", ",", "self", ".", "MODEL_NAME", ")", ")", "\n", "", "else", ":", "\n", "            ", "torch", ".", "save", "(", "self", ".", "model", ",", "os", ".", "path", ".", "join", "(", "path", ",", "self", ".", "MODEL_NAME", ")", ")", "\n", "\n", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "path", ",", "self", ".", "INPUT_VOCAB_FILE", ")", ",", "'wb'", ")", "as", "fout", ":", "\n", "            ", "dill", ".", "dump", "(", "self", ".", "input_vocab", ",", "fout", ")", "\n", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "path", ",", "self", ".", "INS_VOCAB_FILE", ")", ",", "'wb'", ")", "as", "fout", ":", "\n", "            ", "dill", ".", "dump", "(", "self", ".", "ins_vocab", ",", "fout", ")", "\n", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "path", ",", "self", ".", "OUTPUT_VOCAB_FILE", ")", ",", "'wb'", ")", "as", "fout", ":", "\n", "            ", "dill", ".", "dump", "(", "self", ".", "output_vocab", ",", "fout", ")", "\n", "\n", "", "return", "path", "\n", "\n"]], "home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.utils.checkpoint.Checkpoint.load": [[94, 130], ["logging.getLogger", "logging.getLogger.info", "torch.cuda.is_available", "checkpoint.Checkpoint", "torch.load", "torch.load", "torch.load", "torch.load", "open", "dill.load", "open", "dill.load", "open", "dill.load", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.utils.checkpoint.Checkpoint.load", "home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.utils.checkpoint.Checkpoint.load", "home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.utils.checkpoint.Checkpoint.load", "home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.utils.checkpoint.Checkpoint.load", "home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.utils.checkpoint.Checkpoint.load", "home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.utils.checkpoint.Checkpoint.load", "home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.utils.checkpoint.Checkpoint.load"], ["", "@", "classmethod", "\n", "def", "load", "(", "cls", ",", "path", ")", ":", "\n", "        ", "\"\"\"\n        Loads a Checkpoint object that was previously saved to disk.\n        Args:\n            path (str): path to the checkpoint subdirectory\n        Returns:\n            checkpoint (Checkpoint): checkpoint object with fields copied from those stored on disk\n        \"\"\"", "\n", "logger", "=", "logging", ".", "getLogger", "(", "__name__", ")", "\n", "logger", ".", "info", "(", "\"Loading checkpoints from {}\"", ".", "format", "(", "path", ")", ")", "\n", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "            ", "resume_checkpoint", "=", "torch", ".", "load", "(", "\n", "os", ".", "path", ".", "join", "(", "path", ",", "cls", ".", "TRAINER_STATE_NAME", ")", ")", "\n", "model", "=", "torch", ".", "load", "(", "os", ".", "path", ".", "join", "(", "path", ",", "cls", ".", "MODEL_NAME", ")", ")", "\n", "", "else", ":", "\n", "            ", "resume_checkpoint", "=", "torch", ".", "load", "(", "os", ".", "path", ".", "join", "(", "\n", "path", ",", "cls", ".", "TRAINER_STATE_NAME", ")", ",", "map_location", "=", "lambda", "storage", ",", "loc", ":", "storage", ")", "\n", "model", "=", "torch", ".", "load", "(", "os", ".", "path", ".", "join", "(", "path", ",", "cls", ".", "MODEL_NAME", ")", ",", "\n", "map_location", "=", "lambda", "storage", ",", "loc", ":", "storage", ")", "\n", "\n", "# model.flatten_parameters()  # make RNN parameters contiguous", "\n", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "path", ",", "cls", ".", "INPUT_VOCAB_FILE", ")", ",", "'rb'", ")", "as", "fin", ":", "\n", "            ", "input_vocab", "=", "dill", ".", "load", "(", "fin", ")", "\n", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "path", ",", "cls", ".", "OUTPUT_VOCAB_FILE", ")", ",", "'rb'", ")", "as", "fin", ":", "\n", "            ", "output_vocab", "=", "dill", ".", "load", "(", "fin", ")", "\n", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "path", ",", "cls", ".", "INS_VOCAB_FILE", ")", ",", "'rb'", ")", "as", "fin", ":", "\n", "            ", "ins_vocab", "=", "dill", ".", "load", "(", "fin", ")", "\n", "", "optimizer", "=", "resume_checkpoint", "[", "'optimizer'", "]", "\n", "return", "Checkpoint", "(", "model", "=", "model", ",", "input_vocab", "=", "input_vocab", ",", "ins_vocab", "=", "ins_vocab", ",", "\n", "output_vocab", "=", "output_vocab", ",", "\n", "optimizer", "=", "optimizer", ",", "\n", "epoch", "=", "resume_checkpoint", "[", "'epoch'", "]", ",", "\n", "step", "=", "resume_checkpoint", "[", "'step'", "]", ",", "\n", "path", "=", "path", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.callbacks.callback_container.CallbackContainer.__init__": [[14, 18], ["callback_container.CallbackContainer.set_trainer"], "methods", ["home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.callbacks.callback.Callback.set_trainer"], ["def", "__init__", "(", "self", ",", "trainer", ",", "callbacks", "=", "[", "]", ")", ":", "\n", "        ", "self", ".", "callbacks", "=", "callbacks", "\n", "self", ".", "info", "=", "{", "}", "\n", "self", ".", "set_trainer", "(", "trainer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.callbacks.callback_container.CallbackContainer.set_trainer": [[19, 23], ["callback.set_trainer"], "methods", ["home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.callbacks.callback.Callback.set_trainer"], ["", "def", "set_trainer", "(", "self", ",", "trainer", ")", ":", "\n", "        ", "self", ".", "trainer", "=", "trainer", "\n", "for", "callback", "in", "self", ".", "callbacks", ":", "\n", "            ", "callback", ".", "set_trainer", "(", "trainer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.callbacks.callback_container.CallbackContainer.set_info": [[24, 36], ["None"], "methods", ["None"], ["", "", "def", "set_info", "(", "self", ",", "start_step", ",", "start_epoch", ",", "\n", "steps_per_epoch", ",", "total_steps", ",", "\n", "step_elapsed", "=", "0", ")", ":", "\n", "        ", "self", ".", "info", "[", "'start_step'", "]", "=", "start_step", "\n", "self", ".", "info", "[", "'step'", "]", "=", "start_step", "\n", "self", ".", "info", "[", "'start_epoch'", "]", "=", "start_epoch", "\n", "self", ".", "info", "[", "'epoch'", "]", "=", "start_epoch", "\n", "self", ".", "info", "[", "'step_elapsed'", "]", "=", "step_elapsed", "\n", "self", ".", "info", "[", "'steps_per_epoch'", "]", "=", "steps_per_epoch", "\n", "self", ".", "info", "[", "'total_steps'", "]", "=", "total_steps", "\n", "self", ".", "info", "[", "'print'", "]", "=", "False", "\n", "self", ".", "info", "[", "'checkpoint'", "]", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.callbacks.callback_container.CallbackContainer.on_epoch_begin": [[37, 41], ["callback.on_epoch_begin"], "methods", ["home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.callbacks.callback.Callback.on_epoch_begin"], ["", "def", "on_epoch_begin", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "self", ".", "info", "[", "'epoch'", "]", "=", "epoch", "\n", "for", "callback", "in", "self", ".", "callbacks", ":", "\n", "            ", "callback", ".", "on_epoch_begin", "(", "self", ".", "info", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.callbacks.callback_container.CallbackContainer.on_epoch_end": [[42, 55], ["callback_container.CallbackContainer.trainer.evaluator.evaluate", "callback_container.CallbackContainer._evaluate_model_on_validation", "callback.on_epoch_end"], "methods", ["home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.evaluator.evaluator.Evaluator.evaluate", "home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.callbacks.callback_container.CallbackContainer._evaluate_model_on_validation", "home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.callbacks.callback.Callback.on_epoch_end"], ["", "", "def", "on_epoch_end", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "self", ".", "info", "[", "'epoch'", "]", "=", "epoch", "\n", "\n", "# we evaluate for loss on whole train", "\n", "self", ".", "info", "[", "'train_losses'", "]", ",", "self", ".", "info", "[", "'train_metrics'", "]", "=", "self", ".", "trainer", ".", "evaluator", ".", "evaluate", "(", "\n", "self", ".", "trainer", ".", "model", ",", "self", ".", "trainer", ".", "train_data", ",", "self", ".", "trainer", ".", "get_position_ids", ")", "\n", "\n", "# evaluate on whole validation set", "\n", "self", ".", "info", "[", "'eval_losses'", "]", ",", "self", ".", "info", "[", "'eval_metrics'", "]", "=", "self", ".", "_evaluate_model_on_validation", "(", ")", "\n", "\n", "for", "callback", "in", "self", ".", "callbacks", ":", "\n", "            ", "callback", ".", "on_epoch_end", "(", "self", ".", "info", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.callbacks.callback_container.CallbackContainer.on_batch_begin": [[56, 62], ["callback.on_batch_begin"], "methods", ["home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.callbacks.callback.Callback.on_batch_begin"], ["", "", "def", "on_batch_begin", "(", "self", ",", "batch", ")", ":", "\n", "        ", "for", "callback", "in", "self", ".", "callbacks", ":", "\n", "            ", "callback", ".", "on_batch_begin", "(", "batch", ",", "self", ".", "info", ")", "\n", "\n", "", "self", ".", "info", "[", "'step'", "]", "+=", "1", "\n", "self", ".", "info", "[", "'step_elapsed'", "]", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.callbacks.callback_container.CallbackContainer.on_batch_end": [[63, 97], ["callback_container.CallbackContainer._evaluate_model_on_validation", "callback.on_batch_end", "callback_container.CallbackContainer.trainer.evaluator.evaluate"], "methods", ["home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.callbacks.callback_container.CallbackContainer._evaluate_model_on_validation", "home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.callbacks.callback.Callback.on_batch_end", "home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.evaluator.evaluator.Evaluator.evaluate"], ["", "def", "on_batch_end", "(", "self", ",", "batch", ")", ":", "\n", "\n", "# Necessary check for logger (done here so as to pass", "\n", "# losses + metrics to info and allow other callbacks to", "\n", "# access the information", "\n", "        ", "if", "self", ".", "info", "[", "'step'", "]", "%", "self", ".", "trainer", ".", "print_every", "==", "0", "and", "self", ".", "info", "[", "'step_elapsed'", "]", ">", "self", ".", "trainer", ".", "print_every", ":", "\n", "            ", "self", ".", "info", "[", "'print'", "]", "=", "True", "\n", "# If we 'print' then we want to log,", "\n", "# therefore we evaluate on all monitored datasets", "\n", "\n", "# Evaluate on all Monitor datasets", "\n", "self", ".", "info", "[", "'monitor_losses'", "]", "=", "{", "}", "\n", "self", ".", "info", "[", "'monitor_metrics'", "]", "=", "{", "}", "\n", "for", "m_data", "in", "self", ".", "trainer", ".", "monitor_data", ":", "\n", "                ", "self", ".", "info", "[", "'monitor_losses'", "]", "[", "m_data", "]", ",", "self", ".", "info", "[", "'monitor_metrics'", "]", "[", "m_data", "]", "=", "self", ".", "trainer", ".", "evaluator", ".", "evaluate", "(", "self", ".", "trainer", ".", "model", ",", "\n", "self", ".", "trainer", ".", "monitor_data", "[", "m_data", "]", ",", "\n", "self", ".", "trainer", ".", "get_batch_data", ")", "\n", "\n", "# If checkpoint time then evaluate on validation set", "\n", "# Again this is done here in order for other callbacks", "\n", "# to have access to the evaluation results", "\n", "", "", "if", "self", ".", "info", "[", "'step'", "]", "%", "self", ".", "trainer", ".", "checkpoint_every", "==", "0", "or", "self", ".", "info", "[", "'step'", "]", "==", "self", ".", "info", "[", "'total_steps'", "]", ":", "\n", "            ", "self", ".", "info", "[", "'checkpoint'", "]", "=", "True", "\n", "self", ".", "info", "[", "'eval_losses'", "]", ",", "self", ".", "info", "[", "'eval_metrics'", "]", "=", "self", ".", "_evaluate_model_on_validation", "(", ")", "\n", "\n", "", "for", "callback", "in", "self", ".", "callbacks", ":", "\n", "            ", "callback", ".", "on_batch_end", "(", "batch", ",", "self", ".", "info", ")", "\n", "\n", "", "self", ".", "info", "[", "'print'", "]", "=", "False", "\n", "self", ".", "info", "[", "'checkpoint'", "]", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.callbacks.callback_container.CallbackContainer.on_train_begin": [[98, 106], ["callback_container.CallbackContainer._evaluate_model_on_validation", "callback.on_train_begin"], "methods", ["home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.callbacks.callback_container.CallbackContainer._evaluate_model_on_validation", "home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.callbacks.callback.Callback.on_train_begin"], ["", "def", "on_train_begin", "(", "self", ")", ":", "\n", "\n", "# set the best eval losses based on starting accuracies", "\n", "        ", "self", ".", "info", "[", "'eval_losses'", "]", ",", "self", ".", "info", "[", "'eval_metrics'", "]", "=", "self", ".", "_evaluate_model_on_validation", "(", ")", "\n", "\n", "for", "callback", "in", "self", ".", "callbacks", ":", "\n", "            ", "callback", ".", "on_train_begin", "(", "self", ".", "info", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.callbacks.callback_container.CallbackContainer.on_train_end": [[107, 116], ["callback.on_train_end", "hasattr"], "methods", ["home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.callbacks.callback.Callback.on_train_end"], ["", "", "def", "on_train_end", "(", "self", ")", ":", "\n", "        ", "logs", "=", "{", "}", "\n", "for", "callback", "in", "self", ".", "callbacks", ":", "\n", "            ", "callback", ".", "on_train_end", "(", "self", ".", "info", ")", "\n", "\n", "# Gets log object from History call back", "\n", "if", "hasattr", "(", "callback", ",", "'logs'", ")", ":", "\n", "                ", "logs", "=", "callback", ".", "logs", "\n", "", "", "return", "logs", "\n", "\n"]], "home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.callbacks.callback_container.CallbackContainer._evaluate_model_on_validation": [[117, 125], ["callback_container.CallbackContainer.trainer.evaluator.evaluate"], "methods", ["home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.evaluator.evaluator.Evaluator.evaluate"], ["", "def", "_evaluate_model_on_validation", "(", "self", ")", ":", "\n", "# No dev_set", "\n", "        ", "if", "self", ".", "trainer", ".", "val_data", "is", "None", ":", "\n", "            ", "return", "[", "]", ",", "[", "]", "\n", "\n", "", "return", "self", ".", "trainer", ".", "evaluator", ".", "evaluate", "(", "self", ".", "trainer", ".", "model", ",", "\n", "self", ".", "trainer", ".", "val_data", ",", "\n", "self", ".", "trainer", ".", "get_position_ids", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.callbacks.model_checkpoint.ModelCheckpoint.__init__": [[15, 21], ["src.utils.callbacks.Callback.__init__"], "methods", ["home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.loss.loss.Perplexity.__init__"], ["def", "__init__", "(", "self", ",", "top_k", "=", "5", ",", "monitor", "=", "'val'", ",", "\n", "save_best_only", "=", "True", ")", ":", "\n", "        ", "super", "(", "ModelCheckpoint", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "top_k", "=", "top_k", "\n", "self", ".", "monitor", "=", "monitor", "\n", "self", ".", "save_best_only", "=", "save_best_only", "\n", "\n"]], "home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.callbacks.model_checkpoint.ModelCheckpoint.set_trainer": [[22, 25], ["None"], "methods", ["None"], ["", "def", "set_trainer", "(", "self", ",", "trainer", ")", ":", "\n", "        ", "self", ".", "trainer", "=", "trainer", "\n", "self", ".", "expt_dir", "=", "trainer", ".", "expt_dir", "\n", "\n"]], "home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.callbacks.model_checkpoint.ModelCheckpoint.on_epoch_begin": [[26, 28], ["None"], "methods", ["None"], ["", "def", "on_epoch_begin", "(", "self", ",", "info", "=", "None", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.callbacks.model_checkpoint.ModelCheckpoint.on_epoch_end": [[29, 31], ["None"], "methods", ["None"], ["", "def", "on_epoch_end", "(", "self", ",", "info", "=", "None", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.callbacks.model_checkpoint.ModelCheckpoint.on_batch_begin": [[32, 34], ["None"], "methods", ["None"], ["", "def", "on_batch_begin", "(", "self", ",", "batch", ",", "info", "=", "None", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.callbacks.model_checkpoint.ModelCheckpoint.on_batch_end": [[35, 64], ["model_checkpoint.ModelCheckpoint.get_losses", "max", "model_checkpoint.ModelCheckpoint.loss_best.index", "src.utils.Checkpoint().save", "shutil.rmtree", "os.path.join", "src.utils.Checkpoint"], "methods", ["home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.callbacks.callback.Callback.get_losses", "home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.utils.checkpoint.Checkpoint.save"], ["", "def", "on_batch_end", "(", "self", ",", "batch", ",", "info", "=", "None", ")", ":", "\n", "\n", "        ", "if", "info", "[", "'checkpoint'", "]", ":", "\n", "            ", "total_loss", ",", "_", ",", "model_name", "=", "self", ".", "get_losses", "(", "info", "[", "'eval_losses'", "]", ",", "\n", "info", "[", "'eval_metrics'", "]", ",", "\n", "info", "[", "'step'", "]", ")", "\n", "\n", "max_eval_loss", "=", "max", "(", "self", ".", "loss_best", ")", "\n", "\n", "if", "total_loss", "<", "max_eval_loss", ":", "\n", "                ", "index_max", "=", "self", ".", "loss_best", ".", "index", "(", "max_eval_loss", ")", "\n", "# rm prev model", "\n", "if", "self", ".", "best_checkpoints", "[", "index_max", "]", "is", "not", "None", ":", "\n", "                    ", "shutil", ".", "rmtree", "(", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "expt_dir", ",", "self", ".", "best_checkpoints", "[", "index_max", "]", ")", ")", "\n", "", "self", ".", "best_checkpoints", "[", "index_max", "]", "=", "model_name", "\n", "self", ".", "loss_best", "[", "index_max", "]", "=", "total_loss", "\n", "\n", "# save model", "\n", "Checkpoint", "(", "model", "=", "self", ".", "trainer", ".", "model", ",", "\n", "optimizer", "=", "self", ".", "trainer", ".", "optimizer", ",", "\n", "epoch", "=", "info", "[", "'epoch'", "]", ",", "step", "=", "info", "[", "'step'", "]", ",", "\n", "input_vocab", "=", "self", ".", "trainer", ".", "train_data", ".", "dataset", ".", "fields", "[", "\n", "'src'", "]", ".", "vocab", ",", "\n", "ins_vocab", "=", "self", ".", "trainer", ".", "train_data", ".", "dataset", ".", "fields", "[", "\n", "'ins'", "]", ".", "vocab", ",", "\n", "output_vocab", "=", "self", ".", "trainer", ".", "train_data", ".", "dataset", ".", "fields", "[", "\n", "'tgt'", "]", ".", "vocab", ")", ".", "save", "(", "self", ".", "expt_dir", ",", "name", "=", "model_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.callbacks.model_checkpoint.ModelCheckpoint.on_train_begin": [[65, 85], ["model_checkpoint.ModelCheckpoint.get_losses", "src.utils.Checkpoint().save", "src.utils.Checkpoint"], "methods", ["home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.callbacks.callback.Callback.get_losses", "home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.utils.checkpoint.Checkpoint.save"], ["", "", "", "def", "on_train_begin", "(", "self", ",", "info", ")", ":", "\n", "\n", "        ", "total_loss", ",", "_", ",", "model_name", "=", "self", ".", "get_losses", "(", "info", "[", "'eval_losses'", "]", ",", "\n", "info", "[", "'eval_metrics'", "]", ",", "\n", "info", "[", "'step'", "]", ")", "\n", "\n", "self", ".", "loss_best", "=", "self", ".", "top_k", "*", "[", "total_loss", "]", "\n", "self", ".", "best_checkpoints", "=", "self", ".", "top_k", "*", "[", "None", "]", "\n", "self", ".", "best_checkpoints", "[", "0", "]", "=", "model_name", "\n", "\n", "# store first model", "\n", "Checkpoint", "(", "model", "=", "self", ".", "trainer", ".", "model", ",", "\n", "optimizer", "=", "self", ".", "trainer", ".", "optimizer", ",", "\n", "epoch", "=", "info", "[", "'start_epoch'", "]", ",", "step", "=", "info", "[", "'start_step'", "]", ",", "\n", "input_vocab", "=", "self", ".", "trainer", ".", "train_data", ".", "dataset", ".", "fields", "[", "\n", "'src'", "]", ".", "vocab", ",", "\n", "ins_vocab", "=", "self", ".", "trainer", ".", "train_data", ".", "dataset", ".", "fields", "[", "\n", "'ins'", "]", ".", "vocab", ",", "\n", "output_vocab", "=", "self", ".", "trainer", ".", "train_data", ".", "dataset", ".", "fields", "[", "\n", "'tgt'", "]", ".", "vocab", ")", ".", "save", "(", "self", ".", "expt_dir", ",", "name", "=", "model_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.callbacks.model_checkpoint.ModelCheckpoint.on_train_end": [[86, 89], ["None"], "methods", ["None"], ["", "def", "on_train_end", "(", "self", ",", "info", "=", "None", ")", ":", "\n", "# TODO perhaps here also the model should be saved?", "\n", "        ", "pass", "\n", "", "", ""]], "home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.callbacks.logger.Logger.__init__": [[13, 21], ["src.utils.callbacks.Callback.__init__", "logging.getLogger", "collections.defaultdict", "collections.defaultdict", "collections.defaultdict", "collections.defaultdict"], "methods", ["home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.loss.loss.Perplexity.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Logger", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "logger", "=", "logging", ".", "getLogger", "(", "__name__", ")", "\n", "self", ".", "print_loss_total", "=", "defaultdict", "(", "float", ")", "# Reset every print_every", "\n", "self", ".", "epoch_loss_total", "=", "defaultdict", "(", "float", ")", "# Reset every epoch", "\n", "self", ".", "epoch_loss_avg", "=", "defaultdict", "(", "float", ")", "\n", "self", ".", "print_loss_avg", "=", "defaultdict", "(", "float", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.callbacks.logger.Logger.set_trainer": [[22, 24], ["None"], "methods", ["None"], ["", "def", "set_trainer", "(", "self", ",", "trainer", ")", ":", "\n", "        ", "self", ".", "trainer", "=", "trainer", "\n", "\n"]], "home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.callbacks.logger.Logger.on_epoch_begin": [[25, 27], ["logger.Logger.logger.info"], "methods", ["None"], ["", "def", "on_epoch_begin", "(", "self", ",", "info", "=", "None", ")", ":", "\n", "        ", "self", ".", "logger", ".", "info", "(", "\"Epoch: %d, Step: %d\"", "%", "(", "info", "[", "'epoch'", "]", ",", "info", "[", "'step'", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.callbacks.logger.Logger.on_epoch_end": [[28, 53], ["logger.Logger.get_losses", "logger.Logger.get_losses", "logger.Logger.logger.info", "logger.Logger.logger.warning", "max", "min"], "methods", ["home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.callbacks.callback.Callback.get_losses", "home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.callbacks.callback.Callback.get_losses"], ["", "def", "on_epoch_end", "(", "self", ",", "info", "=", "None", ")", ":", "\n", "        ", "for", "loss", "in", "self", ".", "trainer", ".", "losses", ":", "\n", "            ", "self", ".", "epoch_loss_avg", "[", "loss", ".", "log_name", "]", "=", "self", ".", "epoch_loss_total", "[", "loss", ".", "log_name", "]", "/", "max", "(", "min", "(", "info", "[", "'steps_per_epoch'", "]", ",", "info", "[", "'step'", "]", "-", "info", "[", "'start_step'", "]", ")", ",", "1", ")", "\n", "self", ".", "epoch_loss_total", "[", "loss", ".", "log_name", "]", "=", "0", "\n", "\n", "", "if", "info", "[", "'step_elapsed'", "]", "<", "1", ":", "\n", "            ", "self", ".", "logger", ".", "warning", "(", "\"0 Steps elapsed so avg. loss is 0\"", ")", "\n", "\n", "", "loss_msg", "=", "' '", ".", "join", "(", "\n", "[", "'%s: %.4f'", "%", "(", "loss", ".", "log_name", ",", "self", ".", "epoch_loss_avg", "[", "loss", ".", "log_name", "]", ")", "for", "loss", "in", "self", ".", "trainer", ".", "losses", "]", ")", "\n", "\n", "_", ",", "train_log_msg", ",", "_", "=", "self", ".", "get_losses", "(", "\n", "info", "[", "'train_losses'", "]", ",", "info", "[", "'train_metrics'", "]", ",", "info", "[", "'step'", "]", ")", "\n", "\n", "log_msg", "=", "\"Finished epoch %d: Avg Train loss %s, Full Train: %s\"", "%", "(", "\n", "info", "[", "'epoch'", "]", ",", "loss_msg", ",", "train_log_msg", ")", "\n", "\n", "loss_total", ",", "log_", ",", "_", "=", "self", ".", "get_losses", "(", "\n", "info", "[", "'eval_losses'", "]", ",", "info", "[", "'eval_metrics'", "]", ",", "info", "[", "'step'", "]", ")", "\n", "\n", "log_msg", "+=", "\", Dev set: \"", "+", "log_", "\n", "\n", "self", ".", "logger", ".", "info", "(", "log_msg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.callbacks.logger.Logger.on_batch_begin": [[54, 56], ["None"], "methods", ["None"], ["", "def", "on_batch_begin", "(", "self", ",", "batch", ",", "info", "=", "None", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.callbacks.logger.Logger.on_batch_end": [[57, 95], ["loss.get_loss", "loss.get_loss", "logger.Logger.logger.info", "logger.Logger.get_losses", "logger.Logger.print_loss_avg.items", "os.path.basename"], "methods", ["home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.loss.loss.Perplexity.get_loss", "home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.loss.loss.Perplexity.get_loss", "home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.callbacks.callback.Callback.get_losses"], ["", "def", "on_batch_end", "(", "self", ",", "batch", ",", "info", "=", "None", ")", ":", "\n", "# update batch losses", "\n", "        ", "for", "loss", "in", "self", ".", "trainer", ".", "batch_losses", ":", "\n", "            ", "name", "=", "loss", ".", "log_name", "\n", "self", ".", "print_loss_total", "[", "name", "]", "+=", "loss", ".", "get_loss", "(", ")", "\n", "self", ".", "epoch_loss_total", "[", "name", "]", "+=", "loss", ".", "get_loss", "(", ")", "\n", "\n", "# scheduled printing of losses", "\n", "", "if", "info", "[", "'print'", "]", ":", "\n", "\n", "# all losses have been already computed and now should be printed", "\n", "\n", "            ", "for", "loss", "in", "self", ".", "trainer", ".", "batch_losses", ":", "\n", "                ", "name", "=", "loss", ".", "log_name", "\n", "self", ".", "print_loss_avg", "[", "name", "]", "=", "self", ".", "print_loss_total", "[", "name", "]", "/", "self", ".", "trainer", ".", "print_every", "\n", "self", ".", "print_loss_total", "[", "name", "]", "=", "0", "\n", "\n", "", "m_logs", "=", "{", "}", "\n", "\n", "m_logs", "[", "'Train Batch'", "]", "=", "' '", ".", "join", "(", "\n", "[", "'%s %s'", "%", "(", "loss_name", ",", "avg_loss", ")", "for", "loss_name", ",", "avg_loss", "in", "self", ".", "print_loss_avg", ".", "items", "(", ")", "]", ")", "\n", "# compute vals for all monitored sets", "\n", "for", "m_data", "in", "self", ".", "trainer", ".", "monitor_data", ":", "\n", "                ", "losses", "=", "info", "[", "'monitor_losses'", "]", "[", "m_data", "]", "\n", "metrics", "=", "info", "[", "'monitor_metrics'", "]", "[", "m_data", "]", "\n", "_", ",", "log_msg", ",", "_", "=", "self", ".", "get_losses", "(", "\n", "losses", ",", "metrics", ",", "info", "[", "'step'", "]", ")", "\n", "m_logs", "[", "m_data", "]", "=", "log_msg", "\n", "\n", "", "all_losses", "=", "' '", ".", "join", "(", "\n", "[", "'%s:\\t %s\\n'", "%", "(", "os", ".", "path", ".", "basename", "(", "name", ")", ",", "m_logs", "[", "name", "]", ")", "for", "name", "in", "m_logs", "]", ")", "\n", "\n", "log_msg", "=", "'Progress %d%%, %s'", "%", "(", "\n", "info", "[", "'step'", "]", "/", "info", "[", "'total_steps'", "]", "*", "100", ",", "\n", "all_losses", ")", "\n", "\n", "self", ".", "logger", ".", "info", "(", "log_msg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.callbacks.logger.Logger.on_train_begin": [[96, 100], ["logger.Logger.get_losses", "logger.Logger.logger.info"], "methods", ["home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.callbacks.callback.Callback.get_losses"], ["", "", "def", "on_train_begin", "(", "self", ",", "info", "=", "None", ")", ":", "\n", "        ", "_", ",", "log_msg", ",", "_", "=", "self", ".", "get_losses", "(", "\n", "info", "[", "'eval_losses'", "]", ",", "info", "[", "'eval_metrics'", "]", ",", "info", "[", "'step'", "]", ")", "\n", "self", ".", "logger", ".", "info", "(", "log_msg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.callbacks.logger.Logger.on_train_end": [[101, 107], ["logger.Logger.logger.info"], "methods", ["None"], ["", "def", "on_train_end", "(", "self", ",", "info", "=", "None", ")", ":", "\n", "# Log if training was ended early with flag _stop_training", "\n", "        ", "if", "self", ".", "trainer", ".", "_stop_training", ":", "\n", "            ", "log_msg", "=", "'Terminated Training Early at Epoch {}'", ".", "format", "(", "\n", "info", "[", "'epoch'", "]", ")", "\n", "self", ".", "logger", ".", "info", "(", "log_msg", ")", "", "", "", "", ""]], "home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.callbacks.history.History.__init__": [[12, 15], ["src.utils.callbacks.Callback.__init__", "src.utils.Log"], "methods", ["home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.loss.loss.Perplexity.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "History", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "logs", "=", "Log", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.callbacks.history.History.set_trainer": [[16, 18], ["None"], "methods", ["None"], ["", "def", "set_trainer", "(", "self", ",", "trainer", ")", ":", "\n", "        ", "self", ".", "trainer", "=", "trainer", "\n", "\n"]], "home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.callbacks.history.History.on_epoch_begin": [[19, 21], ["None"], "methods", ["None"], ["", "def", "on_epoch_begin", "(", "self", ",", "info", "=", "None", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.callbacks.history.History.on_epoch_end": [[22, 24], ["history.History.logs.write_to_log"], "methods", ["home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.utils.log.Log.write_to_log"], ["", "def", "on_epoch_end", "(", "self", ",", "info", "=", "None", ")", ":", "\n", "        ", "self", ".", "logs", ".", "write_to_log", "(", "'Train'", ",", "info", "[", "'train_losses'", "]", ",", "info", "[", "'train_metrics'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.callbacks.history.History.on_batch_begin": [[25, 27], ["None"], "methods", ["None"], ["", "def", "on_batch_begin", "(", "self", ",", "batch", ",", "info", "=", "None", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.callbacks.history.History.on_batch_end": [[28, 34], ["history.History.logs.update_step", "history.History.logs.write_to_log"], "methods", ["home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.utils.log.Log.update_step", "home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.utils.log.Log.write_to_log"], ["", "def", "on_batch_end", "(", "self", ",", "batch", ",", "info", "=", "None", ")", ":", "\n", "        ", "if", "info", "[", "'print'", "]", ":", "\n", "            ", "self", ".", "logs", ".", "update_step", "(", "info", "[", "'step'", "]", ")", "\n", "for", "m_data", "in", "self", ".", "trainer", ".", "monitor_data", ":", "\n", "                ", "self", ".", "logs", ".", "write_to_log", "(", "m_data", ",", "info", "[", "'monitor_losses'", "]", "[", "m_data", "]", ",", "\n", "info", "[", "'monitor_metrics'", "]", "[", "m_data", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.callbacks.history.History.on_train_begin": [[35, 37], ["None"], "methods", ["None"], ["", "", "", "def", "on_train_begin", "(", "self", ",", "info", "=", "None", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.callbacks.history.History.on_train_end": [[38, 40], ["None"], "methods", ["None"], ["", "def", "on_train_end", "(", "self", ",", "info", "=", "None", ")", ":", "\n", "        ", "pass", "", "", "", ""]], "home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.callbacks.callback.Callback.__init__": [[14, 16], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.callbacks.callback.Callback.set_trainer": [[17, 19], ["None"], "methods", ["None"], ["", "def", "set_trainer", "(", "self", ",", "trainer", ")", ":", "\n", "        ", "self", ".", "trainer", "=", "trainer", "\n", "\n"]], "home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.callbacks.callback.Callback.on_epoch_begin": [[20, 22], ["None"], "methods", ["None"], ["", "def", "on_epoch_begin", "(", "self", ",", "info", "=", "None", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.callbacks.callback.Callback.on_epoch_end": [[23, 30], ["None"], "methods", ["None"], ["", "def", "on_epoch_end", "(", "self", ",", "info", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Function called at the end of every epoch\n        self.info['train_losses'] and self.info['train_metrics'] should be available to use here.\n        self.info['eval_losses'] and self.info['eval_metrics'] should be available to use here.\n        \"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.callbacks.callback.Callback.on_batch_begin": [[31, 33], ["None"], "methods", ["None"], ["", "def", "on_batch_begin", "(", "self", ",", "batch", ",", "info", "=", "None", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.callbacks.callback.Callback.on_batch_end": [[34, 45], ["None"], "methods", ["None"], ["", "def", "on_batch_end", "(", "self", ",", "batch", ",", "info", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Function called at the end of every batch\n        If self.info['print'] = True:\n            Then self.info['monitor_losses'] and self.info['monitor_metrics']\n            should be available to use here.\n        If self.info['checkpoint'] = True:,\n            Then self.info['eval_losses'] and self.info['eval_metrics']\n            should be available to use here.\n        \"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.callbacks.callback.Callback.on_train_begin": [[46, 52], ["None"], "methods", ["None"], ["", "def", "on_train_begin", "(", "self", ",", "info", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Function called at the very beginning of every training\n        self.info['eval_losses'] and self.info['eval_metrics'] should be available to use here.\n        \"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.callbacks.callback.Callback.on_train_end": [[53, 55], ["None"], "methods", ["None"], ["", "def", "on_train_end", "(", "self", ",", "info", "=", "None", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.callbacks.callback.Callback.get_losses": [[56, 76], ["metric.get_val", "loss.get_loss"], "methods", ["home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.metrics.metrics.SequenceAccuracy.get_val", "home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.loss.loss.Perplexity.get_loss"], ["", "@", "staticmethod", "\n", "def", "get_losses", "(", "losses", ",", "metrics", ",", "step", ")", ":", "\n", "        ", "total_loss", "=", "0", "\n", "model_name", "=", "''", "\n", "log_msg", "=", "''", "\n", "\n", "for", "metric", "in", "metrics", ":", "\n", "            ", "val", "=", "metric", ".", "get_val", "(", ")", "\n", "log_msg", "+=", "'%s %.4f '", "%", "(", "metric", ".", "name", ",", "val", ")", "\n", "model_name", "+=", "'%s_%.2f_'", "%", "(", "metric", ".", "log_name", ",", "val", ")", "\n", "\n", "", "for", "loss", "in", "losses", ":", "\n", "            ", "val", "=", "loss", ".", "get_loss", "(", ")", "\n", "log_msg", "+=", "'%s %.4f '", "%", "(", "loss", ".", "name", ",", "val", ")", "\n", "model_name", "+=", "'%s_%.2f_'", "%", "(", "loss", ".", "log_name", ",", "val", ")", "\n", "total_loss", "+=", "val", "\n", "\n", "", "model_name", "+=", "'s%d'", "%", "step", "\n", "\n", "return", "total_loss", ",", "log_msg", ",", "model_name", "", "", "", ""]], "home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.models.baseConv.BaseConv.__init__": [[28, 41], ["torch.Module.__init__", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.loss.loss.Perplexity.__init__"], ["def", "__init__", "(", "self", ",", "vocab_size", ",", "kernel_size", ",", "hidden_size", ",", "n_channels", ",", "\n", "n_layers", ",", "input_dropout_p", ",", "dropout_p", ",", "max_len_blocks", ")", ":", "\n", "        ", "super", "(", "BaseConv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "vocab_size", "=", "vocab_size", "\n", "self", ".", "kernel_size", "=", "kernel_size", "\n", "self", ".", "hidden_size", "=", "hidden_size", "\n", "self", ".", "n_channels", "=", "n_channels", "\n", "self", ".", "n_layers", "=", "n_layers", "\n", "self", ".", "input_dropout_p", "=", "input_dropout_p", "\n", "self", ".", "input_dropout", "=", "nn", ".", "Dropout", "(", "p", "=", "input_dropout_p", ")", "\n", "self", ".", "dropout_p", "=", "dropout_p", "\n", "self", ".", "max_len_blocks", "=", "max_len_blocks", "\n", "self", ".", "conv_method", "=", "nn", ".", "Conv1d", "\n", "\n"]], "home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.models.baseConv.BaseConv.forward": [[42, 44], ["NotImplementedError"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.models.enc2dec.Enc2dec.__init__": [[10, 16], ["baseModel.BaseModel.__init__"], "methods", ["home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.loss.loss.Perplexity.__init__"], ["def", "__init__", "(", "self", ",", "encoder", ",", "decoder", ",", "decode_function", "=", "F", ".", "log_softmax", ",", "which_enc", "=", "\"rnn\"", ",", "which_dec", "=", "\"rnn\"", ")", ":", "\n", "        ", "super", "(", "Enc2dec", ",", "self", ")", ".", "__init__", "(", "encoder_module", "=", "encoder", ",", "\n", "decoder_module", "=", "decoder", ",", "decode_function", "=", "decode_function", ")", "\n", "\n", "self", ".", "which_enc", "=", "which_enc", "\n", "self", ".", "which_dec", "=", "which_dec", "\n", "\n"]], "home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.models.enc2dec.Enc2dec.forward": [[24, 40], ["enc2dec.Enc2dec.encoder_module", "enc2dec.Enc2dec.encoder_module", "enc2dec.Enc2dec.decoder_module", "enc2dec.Enc2dec.decoder_module"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "block_inputs", ",", "input_lengths", "=", "None", ",", "\n", "ins_position_variables", "=", "None", ",", "position_variables", "=", "None", ")", ":", "\n", "# Unpack target variables", "\n", "\n", "        ", "hidden", "=", "None", "\n", "if", "self", ".", "which_enc", "==", "\"conv\"", ":", "\n", "            ", "output", "=", "self", ".", "encoder_module", "(", "inputs", ",", "ins_position_variables", ")", "\n", "", "else", ":", "\n", "            ", "output", ",", "hidden", "=", "self", ".", "encoder_module", "(", "inputs", ",", "input_lengths", "=", "input_lengths", ")", "\n", "", "if", "self", ".", "which_dec", "==", "\"conv\"", ":", "\n", "            ", "predicted_softmax", ",", "attn", "=", "self", ".", "decoder_module", "(", "block_inputs", ",", "position_variables", ",", "output", ",", "F", ".", "log_softmax", ")", "\n", "", "else", ":", "\n", "            ", "if", "self", ".", "which_enc", "==", "\"conv\"", ":", "\n", "                ", "hidden", "=", "None", "\n", "", "predicted_softmax", ",", "hidden", ",", "attn", "=", "self", ".", "decoder_module", "(", "block_inputs", ",", "hidden", ",", "output", ",", "F", ".", "log_softmax", ")", "\n", "", "return", "predicted_softmax", ",", "attn", "", "", "", ""]], "home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.models.DecoderConv.DecoderConv.__init__": [[47, 99], ["baseConv.BaseConv.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "ValueError", "ValueError", "ValueError", "attention.Attention", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "DecoderConv.DecoderConv.conv_method", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "range"], "methods", ["home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.loss.loss.Perplexity.__init__"], ["def", "__init__", "(", "self", ",", "vocab_size", ",", "kernel_size", ",", "hidden_size", ",", "n_channels", ",", "\n", "n_layers", "=", "1", ",", "input_dropout_p", "=", "0", ",", "dropout_p", "=", "0", ",", "max_len_blocks", "=", "23", ",", "\n", "use_attention", "=", "False", ",", "attention_method", "=", "None", ",", "full_focus", "=", "False", ")", ":", "\n", "        ", "super", "(", "DecoderConv", ",", "self", ")", ".", "__init__", "(", "vocab_size", ",", "kernel_size", ",", "hidden_size", ",", "n_channels", ",", "n_layers", ",", "\n", "input_dropout_p", ",", "dropout_p", ",", "max_len_blocks", ")", "\n", "\n", "input_size", "=", "n_channels", "\n", "\n", "if", "use_attention", "and", "attention_method", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"Method for computing attention should be provided\"", ")", "\n", "\n", "", "if", "use_attention", "is", "False", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"Attention must be specified for convolutional decoder\"", ")", "\n", "\n", "", "if", "not", "full_focus", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"Full focus on both pre-rnn and post-rnn must be used in the case of convolutional decoder\"", ")", "\n", "\n", "", "self", ".", "attention_method", "=", "attention_method", "\n", "self", ".", "full_focus", "=", "full_focus", "\n", "\n", "# increase input size decoder if attention is applied before decoder", "\n", "# rnn", "\n", "if", "use_attention", "==", "'pre-rnn'", "and", "not", "full_focus", ":", "\n", "            ", "input_size", "*=", "2", "\n", "\n", "", "self", ".", "conv", "=", "nn", ".", "ModuleList", "(", "[", "self", ".", "conv_method", "(", "input_size", ",", "input_size", ",", "kernel_size", ",", "\n", "padding", "=", "kernel_size", "//", "2", ")", "for", "_", "in", "range", "(", "n_layers", ")", "]", ")", "\n", "\n", "self", ".", "output_size", "=", "vocab_size", "\n", "self", ".", "use_attention", "=", "use_attention", "\n", "\n", "self", ".", "embedding", "=", "nn", ".", "Embedding", "(", "self", ".", "output_size", ",", "self", ".", "hidden_size", ")", "\n", "self", ".", "position_embedding", "=", "nn", ".", "Embedding", "(", "self", ".", "max_len_blocks", ",", "self", ".", "hidden_size", ")", "\n", "\n", "if", "use_attention", ":", "\n", "            ", "self", ".", "attention", "=", "Attention", "(", "self", ".", "hidden_size", ",", "self", ".", "attention_method", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "attention", "=", "None", "\n", "\n", "", "if", "use_attention", "==", "'post-rnn'", ":", "\n", "            ", "self", ".", "out", "=", "nn", ".", "Linear", "(", "2", "*", "self", ".", "hidden_size", ",", "self", ".", "output_size", ")", "\n", "if", "self", ".", "full_focus", ":", "\n", "                ", "self", ".", "ffocus_merge", "=", "nn", ".", "Linear", "(", "\n", "2", "*", "self", ".", "hidden_size", ",", "hidden_size", ")", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "out", "=", "nn", ".", "Linear", "(", "self", ".", "hidden_size", ",", "self", ".", "output_size", ")", "\n", "if", "self", ".", "full_focus", ":", "\n", "                ", "self", ".", "ffocus_merge", "=", "nn", ".", "Linear", "(", "\n", "2", "*", "self", ".", "hidden_size", ",", "hidden_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.models.DecoderConv.DecoderConv.forward": [[100, 149], ["input_var.size", "input_var.size", "DecoderConv.DecoderConv.embedding", "DecoderConv.DecoderConv.position_embedding", "DecoderConv.DecoderConv.input_dropout", "enumerate", "function().view", "DecoderConv.DecoderConv.attention", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "function", "torch.relu", "torch.relu", "torch.relu", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "combined_input.transpose.transpose.transpose", "torch.tanh", "torch.tanh", "torch.tanh", "torch.relu.transpose", "torch.relu.transpose", "torch.tanh", "torch.tanh", "torch.tanh", "torch.relu.transpose", "DecoderConv.DecoderConv.attention", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "DecoderConv.DecoderConv.out", "DecoderConv.DecoderConv.ffocus_merge", "torch.relu", "torch.relu", "torch.relu", "output.contiguous().view", "layer", "layer", "DecoderConv.DecoderConv.ffocus_merge", "output.contiguous"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "input_var", ",", "input_pos", ",", "encoder_outputs", ",", "function", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n        Performs one or multiple forward decoder steps.\n        Args:\n            input_var (torch.tensor): Variable containing the input(s) to the decoder Convolution\n            input_pos (torch.tensor): Variable containing the position input(s) to the decoder Convolution\n            encoder_outputs (torch.tensor): Variable containing the target outputs of the encoder\n            function (torch.tensor): Activation function over the last output of the decoder Convolution at every time step.\n        Returns:\n            predicted_softmax: The output softmax distribution at every time step of the decoder Convolution\n            attn: The attention distribution at every time step of the decoder Convolution\n        \"\"\"", "\n", "batch_size", "=", "input_var", ".", "size", "(", "0", ")", "\n", "output_size", "=", "input_var", ".", "size", "(", "1", ")", "\n", "embedded", "=", "self", ".", "embedding", "(", "input_var", ")", "\n", "position_embedded", "=", "self", ".", "position_embedding", "(", "input_pos", ")", "\n", "embedded", "=", "self", ".", "input_dropout", "(", "embedded", "+", "position_embedded", ")", "\n", "\n", "h", "=", "embedded", "\n", "attn", "=", "None", "\n", "for", "i", ",", "layer", "in", "enumerate", "(", "self", ".", "conv", ")", ":", "\n", "            ", "if", "self", ".", "use_attention", "==", "'pre-rnn'", ":", "\n", "# Apply the attention method to get the attention vector and weighted context vector. Provide decoder step for hard attention", "\n", "# transpose to get batch at the second index", "\n", "                ", "context", ",", "attn", "=", "self", ".", "attention", "(", "h", ",", "encoder_outputs", ",", "**", "kwargs", ")", "\n", "combined_input", "=", "torch", ".", "cat", "(", "(", "context", ",", "embedded", ")", ",", "dim", "=", "2", ")", "\n", "if", "self", ".", "full_focus", ":", "\n", "                    ", "merged_input", "=", "F", ".", "relu", "(", "self", ".", "ffocus_merge", "(", "combined_input", ")", ")", "\n", "combined_input", "=", "torch", ".", "mul", "(", "context", ",", "merged_input", ")", "\n", "combined_input", "=", "combined_input", ".", "transpose", "(", "1", ",", "2", ")", "\n", "h", "=", "F", ".", "tanh", "(", "layer", "(", "combined_input", ")", "+", "combined_input", ")", "\n", "h", "=", "h", ".", "transpose", "(", "1", ",", "2", ")", "\n", "\n", "", "", "elif", "self", ".", "use_attention", "==", "'post-rnn'", ":", "\n", "                ", "h", "=", "h", ".", "transpose", "(", "1", ",", "2", ")", "\n", "h", "=", "F", ".", "tanh", "(", "layer", "(", "h", ")", "+", "h", ")", "\n", "h", "=", "h", ".", "transpose", "(", "1", ",", "2", ")", "\n", "# Apply the attention method to get the attention vector and", "\n", "# weighted context vector. Provide decoder step for hard attention", "\n", "context", ",", "attn", "=", "self", ".", "attention", "(", "h", ",", "encoder_outputs", ",", "**", "kwargs", ")", "\n", "h", "=", "torch", ".", "cat", "(", "(", "context", ",", "h", ")", ",", "dim", "=", "2", ")", "\n", "if", "self", ".", "full_focus", ":", "\n", "                    ", "h", "=", "F", ".", "relu", "(", "self", ".", "ffocus_merge", "(", "h", ")", ")", "\n", "\n", "", "", "", "output", "=", "h", "\n", "predicted_softmax", "=", "function", "(", "self", ".", "out", "(", "\n", "output", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "self", ".", "out", ".", "in_features", ")", ")", ",", "dim", "=", "1", ")", ".", "view", "(", "batch_size", ",", "output_size", ",", "-", "1", ")", "\n", "\n", "return", "predicted_softmax", ",", "attn", "", "", "", ""]], "home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.models.EncoderRNN.EncoderRNN.__init__": [[31, 43], ["baseRNN.BaseRNN.__init__", "torch.Embedding", "EncoderRNN.EncoderRNN.rnn_cell"], "methods", ["home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.loss.loss.Perplexity.__init__"], ["def", "__init__", "(", "self", ",", "vocab_size", ",", "max_len", ",", "hidden_size", ",", "embedding_size", ",", "\n", "input_dropout_p", "=", "0", ",", "dropout_p", "=", "0", ",", "\n", "n_layers", "=", "1", ",", "bidirectional", "=", "False", ",", "rnn_cell", "=", "'gru'", ",", "variable_lengths", "=", "False", ")", ":", "\n", "        ", "super", "(", "EncoderRNN", ",", "self", ")", ".", "__init__", "(", "vocab_size", ",", "max_len", ",", "hidden_size", ",", "\n", "input_dropout_p", ",", "dropout_p", ",", "n_layers", ",", "rnn_cell", ")", "\n", "\n", "self", ".", "embedding_size", "=", "embedding_size", "\n", "self", ".", "variable_lengths", "=", "variable_lengths", "\n", "self", ".", "embedding", "=", "nn", ".", "Embedding", "(", "vocab_size", ",", "embedding_size", ")", "\n", "self", ".", "rnn", "=", "self", ".", "rnn_cell", "(", "embedding_size", ",", "hidden_size", ",", "n_layers", ",", "\n", "batch_first", "=", "True", ",", "bidirectional", "=", "bidirectional", ",", "\n", "dropout", "=", "dropout_p", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.models.EncoderRNN.EncoderRNN.forward": [[44, 79], ["EncoderRNN.EncoderRNN.embedding", "EncoderRNN.EncoderRNN.input_dropout", "EncoderRNN.EncoderRNN.rnn.flatten_parameters", "torch.utils.rnn.pack_padded_sequence.size", "torch.utils.rnn.pack_padded_sequence", "EncoderRNN.EncoderRNN.rnn", "EncoderRNN.EncoderRNN.rnn", "torch.utils.rnn.pad_packed_sequence"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_var", ",", "hidden", "=", "None", ",", "input_lengths", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Applies a multi-layer RNN to an input sequence.\n        Args:\n            input_var (batch, seq_len): tensor containing the features of the input sequence.\n            input_lengths (tensor int, optional): A tensor that contains the lengths of sequences\n              in the mini-batch\n            **hidden** : Tuple of (h_0, c_0), each of shape (num_layers * num_directions, batch, hidden_size)\n              where h_0 is tensor containing the initial hidden state, and c_0 is a tensor\n              containing the initial cell state for for each element in the batch.\n              If none is provided then defaults to zero\n        Returns: output, hidden\n            - **output** (batch, seq_len, hidden_size): variable containing the encoded features of the input sequence\n            - **hidden** (num_layers * num_directions, batch, hidden_size): variable containing the features in the hidden state h\n        \"\"\"", "\n", "embedded", "=", "self", ".", "embedding", "(", "input_var", ")", "\n", "embedded", "=", "self", ".", "input_dropout", "(", "embedded", ")", "\n", "\n", "self", ".", "rnn", ".", "flatten_parameters", "(", ")", "\n", "\n", "if", "self", ".", "variable_lengths", ":", "\n", "            ", "total_length", "=", "embedded", ".", "size", "(", "1", ")", "# get the max sequence length", "\n", "embedded", "=", "nn", ".", "utils", ".", "rnn", ".", "pack_padded_sequence", "(", "\n", "embedded", ",", "input_lengths", ",", "batch_first", "=", "True", ")", "\n", "\n", "", "if", "hidden", "is", "not", "None", ":", "\n", "            ", "output", ",", "hidden", "=", "self", ".", "rnn", "(", "embedded", ",", "hidden", ")", "\n", "", "else", ":", "\n", "            ", "output", ",", "hidden", "=", "self", ".", "rnn", "(", "embedded", ")", "\n", "\n", "", "if", "self", ".", "variable_lengths", ":", "\n", "            ", "output", ",", "_", "=", "nn", ".", "utils", ".", "rnn", ".", "pad_packed_sequence", "(", "\n", "output", ",", "batch_first", "=", "True", ",", "total_length", "=", "total_length", ")", "\n", "\n", "", "return", "output", ",", "hidden", "\n", "", "", ""]], "home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.models.attention.Attention.__init__": [[34, 38], ["torch.Module.__init__", "attention.Attention.get_method"], "methods", ["home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.loss.loss.Perplexity.__init__", "home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.models.attention.Attention.get_method"], ["def", "__init__", "(", "self", ",", "dim", ",", "method", ")", ":", "\n", "        ", "super", "(", "Attention", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "mask", "=", "None", "\n", "self", ".", "method", "=", "self", ".", "get_method", "(", "method", ",", "dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.models.attention.Attention.set_mask": [[39, 46], ["None"], "methods", ["None"], ["", "def", "set_mask", "(", "self", ",", "mask", ")", ":", "\n", "        ", "\"\"\"\n        Sets indices to be masked\n        Args:\n            mask (torch.Tensor): tensor containing indices to be masked\n        \"\"\"", "\n", "self", ".", "mask", "=", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.models.attention.Attention.forward": [[47, 74], ["decoder_states.size", "decoder_states.size", "encoder_states.size", "[].transpose", "attention.Attention.method", "torch.softmax().view.masked_fill_", "torch.softmax().view", "torch.softmax().view", "torch.softmax().view", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.softmax().view.masked_fill_", "float", "torch.softmax", "torch.softmax", "torch.softmax", "encoder_states.eq", "float", "torch.softmax().view.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "decoder_states", ",", "encoder_states", ",", "\n", "**", "attention_method_kwargs", ")", ":", "\n", "\n", "        ", "batch_size", "=", "decoder_states", ".", "size", "(", "0", ")", "\n", "decoder_states", ".", "size", "(", "2", ")", "\n", "input_size", "=", "encoder_states", ".", "size", "(", "1", ")", "\n", "\n", "# compute mask", "\n", "mask", "=", "encoder_states", ".", "eq", "(", "0.", ")", "[", ":", ",", ":", ",", ":", "1", "]", ".", "transpose", "(", "1", ",", "2", ")", "\n", "\n", "# Compute attention vals", "\n", "attn", "=", "self", ".", "method", "(", "decoder_states", ",", "encoder_states", ",", "\n", "**", "attention_method_kwargs", ")", "\n", "\n", "if", "self", ".", "mask", "is", "not", "None", ":", "\n", "            ", "attn", ".", "masked_fill_", "(", "self", ".", "mask", ",", "-", "float", "(", "'inf'", ")", ")", "\n", "\n", "# apply local mask", "\n", "", "attn", ".", "masked_fill_", "(", "mask", ",", "-", "float", "(", "'inf'", ")", ")", "\n", "\n", "attn", "=", "F", ".", "softmax", "(", "attn", ".", "view", "(", "-", "1", ",", "input_size", ")", ",", "\n", "dim", "=", "1", ")", ".", "view", "(", "batch_size", ",", "-", "1", ",", "input_size", ")", "\n", "\n", "# (batch, out_len, in_len) * (batch, in_len, dim) -> (batch, out_len, dim)", "\n", "context", "=", "torch", ".", "bmm", "(", "attn", ",", "encoder_states", ")", "\n", "\n", "return", "context", ",", "attn", "\n", "\n"]], "home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.models.attention.Attention.get_method": [[75, 92], ["attention.MLP", "attention.Concat", "attention.General", "attention.Dot", "ValueError"], "methods", ["None"], ["", "def", "get_method", "(", "self", ",", "method", ",", "dim", ")", ":", "\n", "        ", "\"\"\"\n        Set method to compute attention\n        \"\"\"", "\n", "if", "method", "==", "'mlp'", ":", "\n", "            ", "method", "=", "MLP", "(", "dim", ")", "\n", "", "elif", "method", "==", "'concat'", ":", "\n", "            ", "method", "=", "Concat", "(", "dim", ")", "\n", "", "elif", "method", "==", "'general'", ":", "\n", "            ", "method", "=", "General", "(", "dim", ")", "\n", "", "elif", "method", "==", "'dot'", ":", "\n", "            ", "method", "=", "Dot", "(", ")", "\n", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Unknown attention method\"", ")", "\n", "\n", "", "return", "method", "\n", "\n"]], "home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.models.attention.Concat.__init__": [[101, 104], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.loss.loss.Perplexity.__init__"], ["def", "__init__", "(", "self", ",", "dim", ")", ":", "\n", "        ", "super", "(", "Concat", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "mlp", "=", "nn", ".", "Linear", "(", "dim", "*", "2", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.models.attention.Concat.forward": [[105, 136], ["encoder_states.size", "decoder_states.size", "encoder_states.unsqueeze", "encoder_states_exp.expand.expand.expand", "decoder_states.unsqueeze", "decoder_states_exp.expand.expand.expand", "decoder_states_exp.expand.expand.contiguous().view", "encoder_states_exp.expand.expand.contiguous().view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "attention.Concat.mlp", "attention.Concat.view", "decoder_states_exp.expand.expand.contiguous", "encoder_states_exp.expand.expand.contiguous"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "decoder_states", ",", "encoder_states", ")", ":", "\n", "# apply mlp to all encoder states for current decoder", "\n", "\n", "# decoder_states --> (batch, dec_seqlen, hl_size)", "\n", "# encoder_states --> (batch, enc_seqlen, hl_size)", "\n", "        ", "batch_size", ",", "enc_seqlen", ",", "hl_size", "=", "encoder_states", ".", "size", "(", ")", "\n", "_", ",", "dec_seqlen", ",", "_", "=", "decoder_states", ".", "size", "(", ")", "\n", "\n", "# (batch, enc_seqlen, hl_size) -> (batch, dec_seqlen, enc_seqlen, hl_size)", "\n", "encoder_states_exp", "=", "encoder_states", ".", "unsqueeze", "(", "1", ")", "\n", "encoder_states_exp", "=", "encoder_states_exp", ".", "expand", "(", "\n", "batch_size", ",", "dec_seqlen", ",", "enc_seqlen", ",", "hl_size", ")", "\n", "\n", "# (batch, dec_seqlen, hl_size) -> (batch, dec_seqlen, enc_seqlen, hl_size)", "\n", "decoder_states_exp", "=", "decoder_states", ".", "unsqueeze", "(", "2", ")", "\n", "decoder_states_exp", "=", "decoder_states_exp", ".", "expand", "(", "\n", "batch_size", ",", "dec_seqlen", ",", "enc_seqlen", ",", "hl_size", ")", "\n", "\n", "# reshape encoder and decoder states to allow batchwise computation. We will have", "\n", "# batch_size x enc_seqlen x dec_seqlen batches. So we apply the Linear", "\n", "# layer for each of them", "\n", "decoder_states_tr", "=", "decoder_states_exp", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "hl_size", ")", "\n", "encoder_states_tr", "=", "encoder_states_exp", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "hl_size", ")", "\n", "\n", "mlp_input", "=", "torch", ".", "cat", "(", "(", "encoder_states_tr", ",", "decoder_states_tr", ")", ",", "dim", "=", "1", ")", "\n", "\n", "# apply mlp and respape to get in correct form", "\n", "mlp_output", "=", "self", ".", "mlp", "(", "mlp_input", ")", "\n", "attn", "=", "mlp_output", ".", "view", "(", "batch_size", ",", "dec_seqlen", ",", "enc_seqlen", ")", "\n", "\n", "return", "attn", "\n", "\n"]], "home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.models.attention.Dot.__init__": [[140, 142], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.loss.loss.Perplexity.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Dot", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.models.attention.Dot.forward": [[143, 146], ["torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "encoder_states.transpose"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "decoder_states", ",", "encoder_states", ")", ":", "\n", "        ", "attn", "=", "torch", ".", "bmm", "(", "decoder_states", ",", "encoder_states", ".", "transpose", "(", "1", ",", "2", ")", ")", "\n", "return", "attn", "\n", "\n"]], "home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.models.attention.MLP.__init__": [[150, 155], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.loss.loss.Perplexity.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ")", ":", "\n", "        ", "super", "(", "MLP", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "mlp", "=", "nn", ".", "Linear", "(", "dim", "*", "2", ",", "dim", ")", "\n", "self", ".", "activation", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "out", "=", "nn", ".", "Linear", "(", "dim", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.models.attention.MLP.forward": [[156, 189], ["encoder_states.size", "decoder_states.size", "encoder_states.unsqueeze", "encoder_states_exp.expand.expand.expand", "decoder_states.unsqueeze", "decoder_states_exp.expand.expand.expand", "decoder_states_exp.expand.expand.contiguous().view", "encoder_states_exp.expand.expand.contiguous().view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "attention.MLP.mlp", "attention.MLP.activation", "attention.MLP.out", "attention.MLP.view", "decoder_states_exp.expand.expand.contiguous", "encoder_states_exp.expand.expand.contiguous"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "decoder_states", ",", "encoder_states", ")", ":", "\n", "# apply mlp to all encoder states for current decoder", "\n", "\n", "# decoder_states --> (batch, dec_seqlen, hl_size)", "\n", "# encoder_states --> (batch, enc_seqlen, hl_size)", "\n", "        ", "batch_size", ",", "enc_seqlen", ",", "hl_size", "=", "encoder_states", ".", "size", "(", ")", "\n", "_", ",", "dec_seqlen", ",", "_", "=", "decoder_states", ".", "size", "(", ")", "\n", "\n", "# (batch, enc_seqlen, hl_size) -> (batch, dec_seqlen, enc_seqlen, hl_size)", "\n", "encoder_states_exp", "=", "encoder_states", ".", "unsqueeze", "(", "1", ")", "\n", "encoder_states_exp", "=", "encoder_states_exp", ".", "expand", "(", "\n", "batch_size", ",", "dec_seqlen", ",", "enc_seqlen", ",", "hl_size", ")", "\n", "\n", "# (batch, dec_seqlen, hl_size) -> (batch, dec_seqlen, enc_seqlen, hl_size)", "\n", "decoder_states_exp", "=", "decoder_states", ".", "unsqueeze", "(", "2", ")", "\n", "decoder_states_exp", "=", "decoder_states_exp", ".", "expand", "(", "\n", "batch_size", ",", "dec_seqlen", ",", "enc_seqlen", ",", "hl_size", ")", "\n", "\n", "# reshape encoder and decoder states to allow batchwise computation. We will have", "\n", "# batch_size x enc_seqlen x dec_seqlen batches. So we apply the Linear", "\n", "# layer for each of them", "\n", "decoder_states_tr", "=", "decoder_states_exp", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "hl_size", ")", "\n", "encoder_states_tr", "=", "encoder_states_exp", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "hl_size", ")", "\n", "\n", "mlp_input", "=", "torch", ".", "cat", "(", "(", "encoder_states_tr", ",", "decoder_states_tr", ")", ",", "dim", "=", "1", ")", "\n", "\n", "# apply mlp and reshape to get in correct form", "\n", "mlp_output", "=", "self", ".", "mlp", "(", "mlp_input", ")", "\n", "mlp_output", "=", "self", ".", "activation", "(", "mlp_output", ")", "\n", "out", "=", "self", ".", "out", "(", "mlp_output", ")", "\n", "attn", "=", "out", ".", "view", "(", "batch_size", ",", "dec_seqlen", ",", "enc_seqlen", ")", "\n", "\n", "return", "attn", "\n", "\n"]], "home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.models.attention.General.__init__": [[197, 200], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.loss.loss.Perplexity.__init__"], ["def", "__init__", "(", "self", ",", "dim", ")", ":", "\n", "        ", "super", "(", "General", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "linear_in", "=", "nn", ".", "Linear", "(", "dim", ",", "dim", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.models.attention.General.forward": [[201, 214], ["decoder_states.contiguous().view.contiguous().view.size", "decoder_states.contiguous().view.contiguous().view.contiguous().view", "attention.General.linear_in", "decoder_states.contiguous().view.contiguous().view.contiguous().view", "encoder_states.transpose.transpose.transpose", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "decoder_states.contiguous().view.contiguous().view.contiguous", "decoder_states.contiguous().view.contiguous().view.contiguous"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "decoder_states", ",", "encoder_states", ")", ":", "\n", "\n", "# decoder_states (FloatTensor): sequence of queries ``(batch, tgt_len, dim)``", "\n", "# encoder_states (FloatTensor): sequence of sources ``(batch, src_len, dim``", "\n", "        ", "tgt_batch", ",", "tgt_len", ",", "tgt_dim", "=", "decoder_states", ".", "size", "(", ")", "\n", "\n", "decoder_states", "=", "decoder_states", ".", "contiguous", "(", ")", ".", "view", "(", "tgt_batch", "*", "tgt_len", ",", "tgt_dim", ")", "\n", "decoder_states", "=", "self", ".", "linear_in", "(", "decoder_states", ")", "\n", "decoder_states", "=", "decoder_states", ".", "contiguous", "(", ")", ".", "view", "(", "tgt_batch", ",", "tgt_len", ",", "tgt_dim", ")", "\n", "encoder_states", "=", "encoder_states", ".", "transpose", "(", "1", ",", "2", ")", "\n", "attn", "=", "torch", ".", "bmm", "(", "decoder_states", ",", "encoder_states", ")", "\n", "\n", "return", "attn", "\n", "", "", ""]], "home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.models.DecoderRNN.DecoderRNN.__init__": [[58, 102], ["baseRNN.BaseRNN.__init__", "DecoderRNN.DecoderRNN.rnn_cell", "torch.Embedding", "torch.Embedding", "torch.Embedding", "ValueError", "attention.Attention", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.loss.loss.Perplexity.__init__"], ["def", "__init__", "(", "self", ",", "vocab_size", ",", "max_len", ",", "hidden_size", ",", "\n", "n_layers", "=", "1", ",", "rnn_cell", "=", "'gru'", ",", "bidirectional", "=", "False", ",", "\n", "input_dropout_p", "=", "0", ",", "dropout_p", "=", "0", ",", "use_attention", "=", "False", ",", "attention_method", "=", "None", ",", "full_focus", "=", "False", ")", ":", "\n", "        ", "super", "(", "DecoderRNN", ",", "self", ")", ".", "__init__", "(", "vocab_size", ",", "max_len", ",", "hidden_size", ",", "\n", "input_dropout_p", ",", "dropout_p", ",", "\n", "n_layers", ",", "rnn_cell", ")", "\n", "\n", "self", ".", "bidirectional_encoder", "=", "bidirectional", "\n", "input_size", "=", "hidden_size", "\n", "\n", "if", "use_attention", "and", "attention_method", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"Method for computing attention should be provided\"", ")", "\n", "\n", "", "self", ".", "attention_method", "=", "attention_method", "\n", "self", ".", "full_focus", "=", "full_focus", "\n", "\n", "# increase input size decoder if attention is applied before decoder", "\n", "# rnn", "\n", "if", "use_attention", "==", "'pre-rnn'", "and", "not", "full_focus", ":", "\n", "            ", "input_size", "*=", "2", "\n", "\n", "", "self", ".", "rnn", "=", "self", ".", "rnn_cell", "(", "input_size", ",", "hidden_size", ",", "n_layers", ",", "\n", "batch_first", "=", "True", ",", "dropout", "=", "dropout_p", ")", "\n", "\n", "self", ".", "output_size", "=", "vocab_size", "\n", "self", ".", "max_length", "=", "max_len", "\n", "self", ".", "use_attention", "=", "use_attention", "\n", "\n", "self", ".", "init_input", "=", "None", "\n", "\n", "self", ".", "embedding", "=", "nn", ".", "Embedding", "(", "self", ".", "output_size", ",", "self", ".", "hidden_size", ")", "\n", "if", "use_attention", ":", "\n", "            ", "self", ".", "attention", "=", "Attention", "(", "self", ".", "hidden_size", ",", "self", ".", "attention_method", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "attention", "=", "None", "\n", "\n", "", "if", "use_attention", "==", "'post-rnn'", ":", "\n", "            ", "self", ".", "out", "=", "nn", ".", "Linear", "(", "2", "*", "self", ".", "hidden_size", ",", "self", ".", "output_size", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "out", "=", "nn", ".", "Linear", "(", "self", ".", "hidden_size", ",", "self", ".", "output_size", ")", "\n", "if", "self", ".", "full_focus", ":", "\n", "                ", "self", ".", "ffocus_merge", "=", "nn", ".", "Linear", "(", "\n", "2", "*", "self", ".", "hidden_size", ",", "hidden_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.models.DecoderRNN.DecoderRNN.forward": [[103, 153], ["input_var.size", "input_var.size", "DecoderRNN.DecoderRNN.embedding", "DecoderRNN.DecoderRNN.input_dropout", "DecoderRNN.DecoderRNN._init_state", "function().view", "DecoderRNN.DecoderRNN.attention", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "DecoderRNN.DecoderRNN.rnn", "torch.relu", "torch.relu", "torch.relu", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "DecoderRNN.DecoderRNN.rnn", "DecoderRNN.DecoderRNN.attention", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "function", "DecoderRNN.DecoderRNN.ffocus_merge", "DecoderRNN.DecoderRNN.rnn", "DecoderRNN.DecoderRNN.out", "torch.cat.contiguous().view", "torch.cat.contiguous().view", "torch.cat.contiguous().view", "torch.cat.contiguous", "torch.cat.contiguous", "torch.cat.contiguous"], "methods", ["home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.models.DecoderRNN.DecoderRNN._init_state"], ["", "", "", "def", "forward", "(", "self", ",", "input_var", ",", "hidden", ",", "\n", "encoder_outputs", ",", "function", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n        Performs one or multiple forward decoder steps.\n        Args:\n            input_var (torch.tensor): Variable containing the input(s) to the decoder RNN\n            hidden (torch.tensor): Variable containing the previous decoder hidden state.\n            encoder_outputs (torch.tensor): Variable containing the target outputs of the decoder RNN\n            function (torch.tensor): Activation function over the last output of the decoder RNN at every time step.\n        Returns:\n            predicted_softmax: The output softmax distribution at every time step of the decoder RNN\n            hidden: The hidden state at every time step of the decoder RNN\n            attn: The attention distribution at every time step of the decoder RNN\n        \"\"\"", "\n", "batch_size", "=", "input_var", ".", "size", "(", "0", ")", "\n", "output_size", "=", "input_var", ".", "size", "(", "1", ")", "\n", "embedded", "=", "self", ".", "embedding", "(", "input_var", ")", "\n", "embedded", "=", "self", ".", "input_dropout", "(", "embedded", ")", "\n", "output", "=", "None", "\n", "hidden", "=", "self", ".", "_init_state", "(", "hidden", ")", "\n", "\n", "if", "self", ".", "use_attention", "==", "'pre-rnn'", ":", "\n", "            ", "h", "=", "embedded", "\n", "# Apply the attention method to get the attention vector and weighted context vector. Provide decoder step for hard attention", "\n", "# transpose to get batch at the second index", "\n", "#print(h.size(), encoder_outputs.size())", "\n", "context", ",", "attn", "=", "self", ".", "attention", "(", "h", ",", "encoder_outputs", ",", "**", "kwargs", ")", "\n", "#print(context.size(), attn.size(), embedded.size())", "\n", "#context = context.repeat(1, embedded.size(1), 1)", "\n", "combined_input", "=", "torch", ".", "cat", "(", "(", "context", ",", "embedded", ")", ",", "dim", "=", "2", ")", "\n", "if", "self", ".", "full_focus", ":", "\n", "                ", "merged_input", "=", "F", ".", "relu", "(", "self", ".", "ffocus_merge", "(", "combined_input", ")", ")", "\n", "combined_input", "=", "torch", ".", "mul", "(", "context", ",", "merged_input", ")", "\n", "", "output", ",", "hidden", "=", "self", ".", "rnn", "(", "combined_input", ",", "hidden", ")", "\n", "\n", "", "elif", "self", ".", "use_attention", "==", "'post-rnn'", ":", "\n", "            ", "output", ",", "hidden", "=", "self", ".", "rnn", "(", "embedded", ",", "hidden", ")", "\n", "# Apply the attention method to get the attention vector and", "\n", "# weighted context vector. Provide decoder step for hard attention", "\n", "context", ",", "attn", "=", "self", ".", "attention", "(", "output", ",", "encoder_outputs", ",", "**", "kwargs", ")", "\n", "output", "=", "torch", ".", "cat", "(", "(", "context", ",", "output", ")", ",", "dim", "=", "2", ")", "\n", "\n", "", "elif", "not", "self", ".", "use_attention", ":", "\n", "            ", "attn", "=", "None", "\n", "output", ",", "hidden", "=", "self", ".", "rnn", "(", "embedded", ",", "hidden", ")", "\n", "\n", "", "predicted_softmax", "=", "function", "(", "self", ".", "out", "(", "\n", "output", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "self", ".", "out", ".", "in_features", ")", ")", ",", "dim", "=", "1", ")", ".", "view", "(", "batch_size", ",", "output_size", ",", "-", "1", ")", "\n", "\n", "return", "predicted_softmax", ",", "hidden", ",", "attn", "\n", "\n"]], "home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.models.DecoderRNN.DecoderRNN._init_state": [[154, 164], ["isinstance", "tuple", "DecoderRNN.DecoderRNN._cat_directions", "DecoderRNN.DecoderRNN._cat_directions"], "methods", ["home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.models.DecoderRNN.DecoderRNN._cat_directions", "home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.models.DecoderRNN.DecoderRNN._cat_directions"], ["", "def", "_init_state", "(", "self", ",", "encoder_hidden", ")", ":", "\n", "        ", "\"\"\" Initialize the encoder hidden state. \"\"\"", "\n", "if", "encoder_hidden", "is", "None", ":", "\n", "            ", "return", "None", "\n", "", "if", "isinstance", "(", "encoder_hidden", ",", "tuple", ")", ":", "\n", "            ", "encoder_hidden", "=", "tuple", "(", "[", "self", ".", "_cat_directions", "(", "h", ")", "\n", "for", "h", "in", "encoder_hidden", "]", ")", "\n", "", "else", ":", "\n", "            ", "encoder_hidden", "=", "self", ".", "_cat_directions", "(", "encoder_hidden", ")", "\n", "", "return", "encoder_hidden", "\n", "\n"]], "home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.models.DecoderRNN.DecoderRNN._cat_directions": [[165, 172], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size"], "methods", ["None"], ["", "def", "_cat_directions", "(", "self", ",", "h", ")", ":", "\n", "        ", "\"\"\" If the encoder is bidirectional, do the following transformation.\n            (#directions * #layers, #batch, hidden_size) -> (#layers, #batch, #directions * hidden_size)\n        \"\"\"", "\n", "if", "self", ".", "bidirectional_encoder", ":", "\n", "            ", "h", "=", "torch", ".", "cat", "(", "[", "h", "[", "0", ":", "h", ".", "size", "(", "0", ")", ":", "2", "]", ",", "h", "[", "1", ":", "h", ".", "size", "(", "0", ")", ":", "2", "]", "]", ",", "2", ")", "\n", "", "return", "h", "", "", "", ""]], "home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.models.EncoderConv.EncoderConv.__init__": [[45, 58], ["baseConv.BaseConv.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "EncoderConv.EncoderConv.conv_method", "range"], "methods", ["home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.loss.loss.Perplexity.__init__"], ["def", "__init__", "(", "self", ",", "vocab_size", ",", "kernel_size", ",", "hidden_size", ",", "n_channels", ",", "\n", "n_layers", "=", "1", ",", "input_dropout_p", "=", "0", ",", "dropout_p", "=", "0", ",", "max_len_blocks", "=", "23", ")", ":", "\n", "        ", "super", "(", "EncoderConv", ",", "self", ")", ".", "__init__", "(", "vocab_size", ",", "kernel_size", ",", "hidden_size", ",", "n_channels", ",", "n_layers", ",", "\n", "input_dropout_p", ",", "dropout_p", ",", "max_len_blocks", ")", "\n", "\n", "input_size", "=", "n_channels", "\n", "self", ".", "output_size", "=", "vocab_size", "\n", "\n", "self", ".", "conv", "=", "nn", ".", "ModuleList", "(", "[", "self", ".", "conv_method", "(", "input_size", ",", "input_size", ",", "kernel_size", ",", "\n", "padding", "=", "kernel_size", "//", "2", ")", "for", "_", "in", "range", "(", "n_layers", ")", "]", ")", "\n", "\n", "self", ".", "embedding", "=", "nn", ".", "Embedding", "(", "self", ".", "output_size", ",", "self", ".", "hidden_size", ")", "\n", "self", ".", "position_embedding", "=", "nn", ".", "Embedding", "(", "self", ".", "max_len_blocks", ",", "self", ".", "hidden_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.models.EncoderConv.EncoderConv.forward": [[59, 82], ["EncoderConv.EncoderConv.embedding", "EncoderConv.EncoderConv.position_embedding", "EncoderConv.EncoderConv.input_dropout", "torch.tanh.transpose", "enumerate", "torch.tanh.transpose", "torch.tanh", "torch.tanh", "torch.tanh", "layer"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_var", ",", "input_pos", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n        Performs one or multiple forward decoder steps.\n        Args:\n            input_var (torch.tensor): Variable containing the input(s) to the decoder Convolution\n            input_pos (torch.tensor): Variable containing the position input(s) to the decoder Convolution\n        Returns:\n            predicted_softmax: The output softmax distribution at every time step of the decoder Convolution\n        \"\"\"", "\n", "embedded", "=", "self", ".", "embedding", "(", "input_var", ")", "\n", "position_embedded", "=", "self", ".", "position_embedding", "(", "input_pos", ")", "\n", "embedded", "=", "self", ".", "input_dropout", "(", "embedded", "+", "position_embedded", ")", "\n", "\n", "h", "=", "embedded", "\n", "\n", "h", "=", "h", ".", "transpose", "(", "1", ",", "2", ")", "\n", "for", "i", ",", "layer", "in", "enumerate", "(", "self", ".", "conv", ")", ":", "\n", "            ", "h", "=", "F", ".", "tanh", "(", "layer", "(", "h", ")", "+", "h", ")", "\n", "", "h", "=", "h", ".", "transpose", "(", "1", ",", "2", ")", "\n", "\n", "output", "=", "h", "\n", "\n", "return", "output", "", "", "", ""]], "home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.models.baseModel.BaseModel.__init__": [[23, 29], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.loss.loss.Perplexity.__init__"], ["def", "__init__", "(", "self", ",", "encoder_module", ",", "decoder_module", "=", "None", ",", "\n", "decode_function", "=", "F", ".", "log_softmax", ")", ":", "\n", "        ", "super", "(", "BaseModel", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "encoder_module", "=", "encoder_module", "\n", "self", ".", "decoder_module", "=", "decoder_module", "\n", "self", ".", "decode_function", "=", "decode_function", "\n", "\n"]], "home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.models.baseModel.BaseModel.reset_parameters": [[37, 43], ["NotImplementedError"], "methods", ["None"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Reset the parameters of all components in the model.\n        \"\"\"", "\n", "raise", "NotImplementedError", "(", "\n", "\"A generic version of this function should be implemented\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.models.baseModel.BaseModel.forward": [[44, 51], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "block_inputs", ",", "input_lengths", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        :param inputs:\n        :param block_inputs:\n        :param input_lengths:\n        :return:\n        \"\"\"", "", "", "", ""]], "home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.models.baseRNN.BaseRNN.__init__": [[28, 45], ["torch.Module.__init__", "torch.Dropout", "rnn_cell.lower", "rnn_cell.lower", "ValueError"], "methods", ["home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.loss.loss.Perplexity.__init__"], ["def", "__init__", "(", "self", ",", "vocab_size", ",", "max_len", ",", "hidden_size", ",", "\n", "input_dropout_p", ",", "dropout_p", ",", "n_layers", ",", "rnn_cell", ")", ":", "\n", "        ", "super", "(", "BaseRNN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "vocab_size", "=", "vocab_size", "\n", "self", ".", "max_len", "=", "max_len", "\n", "self", ".", "hidden_size", "=", "hidden_size", "\n", "self", ".", "n_layers", "=", "n_layers", "\n", "self", ".", "input_dropout_p", "=", "input_dropout_p", "\n", "self", ".", "input_dropout", "=", "nn", ".", "Dropout", "(", "p", "=", "input_dropout_p", ")", "\n", "if", "rnn_cell", ".", "lower", "(", ")", "==", "'lstm'", ":", "\n", "            ", "self", ".", "rnn_cell", "=", "nn", ".", "LSTM", "\n", "", "elif", "rnn_cell", ".", "lower", "(", ")", "==", "'gru'", ":", "\n", "            ", "self", ".", "rnn_cell", "=", "nn", ".", "GRU", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Unsupported RNN Cell: {0}\"", ".", "format", "(", "rnn_cell", ")", ")", "\n", "\n", "", "self", ".", "dropout_p", "=", "dropout_p", "\n", "\n"]], "home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.models.baseRNN.BaseRNN.forward": [[46, 48], ["NotImplementedError"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.evaluator.evaluator.Evaluator.__init__": [[18, 22], ["src.loss.NLLLoss", "src.metrics.WordAccuracy", "src.metrics.SequenceAccuracy"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "loss", "=", "[", "NLLLoss", "(", ")", "]", ",", "metrics", "=", "[", "\n", "WordAccuracy", "(", ")", ",", "SequenceAccuracy", "(", ")", "]", ")", ":", "\n", "        ", "self", ".", "losses", "=", "loss", "\n", "self", ".", "metrics", "=", "metrics", "\n", "\n"]], "home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.evaluator.evaluator.Evaluator.update_batch_metrics": [[23, 41], ["predicted.argmax", "metric.eval_batch"], "methods", ["home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.loss.loss.Loss.eval_batch"], ["", "@", "staticmethod", "\n", "def", "update_batch_metrics", "(", "metrics", ",", "predicted", ",", "target_variable", ")", ":", "\n", "        ", "\"\"\"\n        Update a list with metrics for current batch.\n        Args:\n            metrics (list): list with of machine.metric.Metric objects\n            predicted (Tensor): prediction made by the model\n            target_variable (Tensor): gold label\n        Returns:\n            metrics (list): list with updated metrics\n        \"\"\"", "\n", "\n", "outputs", "=", "predicted", ".", "argmax", "(", "dim", "=", "2", ")", "\n", "\n", "for", "metric", "in", "metrics", ":", "\n", "            ", "metric", ".", "eval_batch", "(", "outputs", ",", "target_variable", ")", "\n", "\n", "", "return", "metrics", "\n", "\n"]], "home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.evaluator.evaluator.Evaluator.compute_batch_loss": [[42, 60], ["evaluator.Evaluator.update_loss", "loss.reset"], "methods", ["home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.evaluator.evaluator.Evaluator.update_loss", "home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.loss.loss.Loss.reset"], ["", "def", "compute_batch_loss", "(", "self", ",", "decoder_outputs", ",", "target_variable", ")", ":", "\n", "        ", "\"\"\"\n        Compute the loss for the current batch.\n        Args:\n            decoder_outputs (torch.Tensor): decoder outputs of a batch\n            decoder_hidden (torch.Tensor): (batch first) decoder hidden states for a batch\n            target_variable (dict): map of keys to different targets\n        Returns:\n           losses (list): a list with machine.loss.Loss objects\n        \"\"\"", "\n", "\n", "losses", "=", "self", ".", "losses", "\n", "for", "loss", "in", "losses", ":", "\n", "            ", "loss", ".", "reset", "(", ")", "\n", "\n", "", "losses", "=", "self", ".", "update_loss", "(", "losses", ",", "decoder_outputs", ",", "target_variable", ")", "\n", "\n", "return", "losses", "\n", "\n"]], "home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.evaluator.evaluator.Evaluator.update_loss": [[61, 77], ["loss.eval_batch"], "methods", ["home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.loss.loss.Loss.eval_batch"], ["", "@", "staticmethod", "\n", "def", "update_loss", "(", "losses", ",", "decoder_outputs", ",", "target_variable", ")", ":", "\n", "        ", "\"\"\"\n        Update a list with losses for current batch\n        Args:\n            losses (list): a list with machine.loss.Loss objects\n            decoder_outputs (torch.Tensor): decoder outputs of a batch\n            target_variable (dict): map of keys to different targets\n        Returns:\n           losses (list): a list with machine.loss.Loss objects\n        \"\"\"", "\n", "\n", "for", "loss", "in", "losses", ":", "\n", "            ", "loss", ".", "eval_batch", "(", "decoder_outputs", ",", "target_variable", ")", "\n", "\n", "", "return", "losses", "\n", "\n"]], "home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.evaluator.evaluator.Evaluator.evaluate": [[78, 131], ["model.eval", "copy.deepcopy", "copy.deepcopy", "model.train", "Warning", "loss.reset", "metric.reset", "torch.no_grad", "len", "getattr", "getattr", "gen_position_ids", "gen_position_ids", "model", "evaluator.Evaluator.update_batch_metrics", "evaluator.Evaluator.update_loss", "getattr"], "methods", ["home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.trainer.supervised_trainer.SupervisedTrainer.train", "home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.loss.loss.Loss.reset", "home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.loss.loss.Loss.reset", "home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.evaluator.evaluator.Evaluator.update_batch_metrics", "home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.evaluator.evaluator.Evaluator.update_loss"], ["", "def", "evaluate", "(", "self", ",", "model", ",", "data_iterator", ",", "gen_position_ids", ")", ":", "\n", "        ", "\"\"\" Evaluate a model on given dataset and return performance.\n        Args:\n            model (machine.models): model to evaluate\n            data_iterator (torchtext.data.Iterator): data iterator to evaluate against\n        Returns:\n            loss (float): loss of the given model on the given dataset\n            accuracy (float): accuracy of the given model on the given dataset\n        \"\"\"", "\n", "# If the model was in train mode before this method was called, we make sure it still is", "\n", "# after this method.", "\n", "\n", "# Since we are passing data_iterator", "\n", "# We evaluate on whole batches - so exhaust all batches first", "\n", "# and store the initial point", "\n", "# data_iterator_reset = False", "\n", "initial_iteration", "=", "data_iterator", ".", "iterations", "\n", "if", "initial_iteration", ">", "1", "and", "initial_iteration", "!=", "len", "(", "data_iterator", ")", ":", "\n", "            ", "raise", "Warning", "(", "\"Passed in data_iterator in middle of iterations\"", ")", "\n", "\n", "", "previous_train_mode", "=", "model", ".", "training", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "for", "loss", "in", "self", ".", "losses", ":", "\n", "            ", "loss", ".", "reset", "(", ")", "\n", "", "losses", "=", "copy", ".", "deepcopy", "(", "self", ".", "losses", ")", "\n", "\n", "for", "metric", "in", "self", ".", "metrics", ":", "\n", "            ", "metric", ".", "reset", "(", ")", "\n", "", "metrics", "=", "copy", ".", "deepcopy", "(", "self", ".", "metrics", ")", "\n", "\n", "# loop over batches", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "batch", "in", "data_iterator", ":", "\n", "\n", "                ", "ins_variables", "=", "getattr", "(", "batch", ",", "'ins'", ")", "\n", "src_variables", "=", "getattr", "(", "batch", ",", "'src'", ")", "\n", "tgt_variables", "=", "getattr", "(", "batch", ",", "'tgt'", ")", "[", "0", "]", "\n", "ins_position_variables", "=", "gen_position_ids", "(", "ins_variables", "[", "1", "]", ")", "\n", "position_variables", "=", "gen_position_ids", "(", "src_variables", "[", "1", "]", ")", "\n", "\n", "predicted_softmax", ",", "attn", "=", "model", "(", "ins_variables", "[", "0", "]", ",", "src_variables", "[", "0", "]", ",", "\n", "ins_variables", "[", "1", "]", ",", "ins_position_variables", ",", "position_variables", ")", "\n", "\n", "# Compute metric(s) over one batch", "\n", "metrics", "=", "self", ".", "update_batch_metrics", "(", "metrics", ",", "predicted_softmax", ",", "tgt_variables", ")", "\n", "\n", "# Compute loss(es) over one batch", "\n", "losses", "=", "self", ".", "update_loss", "(", "losses", ",", "predicted_softmax", ",", "tgt_variables", ")", "\n", "\n", "", "", "model", ".", "train", "(", "previous_train_mode", ")", "\n", "\n", "return", "losses", ",", "metrics", "", "", "", ""]], "home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.trainer.supervised_trainer.SupervisedTrainer.__init__": [[29, 37], ["os.path.isabs", "os.path.join", "os.path.exists", "os.makedirs", "os.getcwd"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "expt_dir", "=", "'experiment'", ")", ":", "\n", "        ", "self", ".", "_trainer", "=", "\"Simple Trainer\"", "\n", "\n", "if", "not", "os", ".", "path", ".", "isabs", "(", "expt_dir", ")", ":", "\n", "            ", "expt_dir", "=", "os", ".", "path", ".", "join", "(", "os", ".", "getcwd", "(", ")", ",", "expt_dir", ")", "\n", "", "self", ".", "expt_dir", "=", "expt_dir", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "expt_dir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "self", ".", "expt_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.trainer.supervised_trainer.SupervisedTrainer.set_local_parameters": [[38, 54], ["src.evaluator.Evaluator", "logging.getLogger", "random.seed", "torch.manual_seed", "len"], "methods", ["None"], ["", "", "def", "set_local_parameters", "(", "self", ",", "random_seed", ",", "losses", ",", "metrics", ",", "\n", "loss_weights", ",", "checkpoint_every", ",", "print_every", ")", ":", "\n", "        ", "self", ".", "random_seed", "=", "random_seed", "\n", "if", "random_seed", "is", "not", "None", ":", "\n", "            ", "random", ".", "seed", "(", "random_seed", ")", "\n", "torch", ".", "manual_seed", "(", "random_seed", ")", "\n", "\n", "", "self", ".", "losses", "=", "losses", "\n", "self", ".", "metrics", "=", "metrics", "\n", "self", ".", "loss_weights", "=", "loss_weights", "or", "len", "(", "losses", ")", "*", "[", "1.", "]", "\n", "self", ".", "evaluator", "=", "Evaluator", "(", "loss", "=", "self", ".", "losses", ",", "metrics", "=", "self", ".", "metrics", ")", "\n", "self", ".", "optimizer", "=", "None", "\n", "self", ".", "checkpoint_every", "=", "checkpoint_every", "\n", "self", ".", "print_every", "=", "print_every", "\n", "self", ".", "logger", "=", "logging", ".", "getLogger", "(", "__name__", ")", "\n", "self", ".", "_stop_training", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.trainer.supervised_trainer.SupervisedTrainer._train_batch": [[55, 71], ["supervised_trainer.SupervisedTrainer.model", "supervised_trainer.SupervisedTrainer.evaluator.compute_batch_loss", "enumerate", "supervised_trainer.SupervisedTrainer.optimizer.step", "supervised_trainer.SupervisedTrainer.model.zero_grad", "loss.scale_loss", "loss.backward"], "methods", ["home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.evaluator.evaluator.Evaluator.compute_batch_loss", "home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.optimizer.optimizer.Optimizer.step", "home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.loss.loss.Loss.scale_loss", "home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.loss.loss.Loss.backward"], ["", "def", "_train_batch", "(", "self", ",", "ins_variable", ",", "src_variable", ",", "ins_len_variable", ",", "ins_position_variables", ",", "position_variables", ",", "\n", "tgt_variable", ")", ":", "\n", "# Forward propagation", "\n", "        ", "predicted_softmax", ",", "attn", "=", "self", ".", "model", "(", "ins_variable", ",", "src_variable", ",", "ins_len_variable", ",", "\n", "ins_position_variables", ",", "position_variables", ")", "\n", "\n", "losses", "=", "self", ".", "evaluator", ".", "compute_batch_loss", "(", "predicted_softmax", ",", "tgt_variable", ")", "\n", "\n", "# Backward propagation", "\n", "for", "i", ",", "loss", "in", "enumerate", "(", "losses", ",", "0", ")", ":", "\n", "            ", "loss", ".", "scale_loss", "(", "self", ".", "loss_weights", "[", "i", "]", ")", "\n", "loss", ".", "backward", "(", "retain_graph", "=", "True", ")", "\n", "", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "self", ".", "model", ".", "zero_grad", "(", ")", "\n", "\n", "return", "losses", "\n", "\n"]], "home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.trainer.supervised_trainer.SupervisedTrainer._train_epoches": [[72, 131], ["len", "callbacks.set_info", "callbacks.on_train_begin", "range", "callbacks.on_train_end", "callbacks.on_epoch_begin", "supervised_trainer.SupervisedTrainer.model.train", "callbacks.on_epoch_end", "callbacks.on_batch_begin", "supervised_trainer.SupervisedTrainer.get_batch_data", "supervised_trainer.SupervisedTrainer.get_position_ids", "supervised_trainer.SupervisedTrainer.get_position_ids", "supervised_trainer.SupervisedTrainer._train_batch", "callbacks.on_batch_end"], "methods", ["home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.callbacks.callback_container.CallbackContainer.set_info", "home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.callbacks.callback.Callback.on_train_begin", "home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.callbacks.callback.Callback.on_train_end", "home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.callbacks.callback.Callback.on_epoch_begin", "home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.trainer.supervised_trainer.SupervisedTrainer.train", "home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.callbacks.callback.Callback.on_epoch_end", "home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.callbacks.callback.Callback.on_batch_begin", "home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.trainer.supervised_trainer.SupervisedTrainer.get_batch_data", "home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.trainer.supervised_trainer.SupervisedTrainer.get_position_ids", "home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.trainer.supervised_trainer.SupervisedTrainer.get_position_ids", "home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.trainer.supervised_trainer.SupervisedTrainer._train_batch", "home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.callbacks.callback.Callback.on_batch_end"], ["", "def", "_train_epoches", "(", "self", ",", "data", ",", "n_epochs", ",", "\n", "start_epoch", ",", "start_step", ",", "\n", "callbacks", ",", "\n", "dev_data", ",", "monitor_data", "=", "[", "]", ")", ":", "\n", "\n", "        ", "steps_per_epoch", "=", "len", "(", "data", ")", "\n", "total_steps", "=", "steps_per_epoch", "*", "n_epochs", "\n", "\n", "callbacks", ".", "set_info", "(", "start_step", ",", "start_epoch", ",", "\n", "steps_per_epoch", ",", "\n", "total_steps", ")", "\n", "\n", "# set data as attribute to trainer", "\n", "self", ".", "train_data", "=", "data", "\n", "self", ".", "val_data", "=", "dev_data", "\n", "self", ".", "monitor_data", "=", "monitor_data", "\n", "\n", "# ########################################", "\n", "# This is used to resume training from same place in dataset", "\n", "# after loading from checkpoint", "\n", "s", "=", "start_step", "\n", "if", "start_epoch", ">", "1", ":", "\n", "            ", "s", "-=", "(", "start_epoch", "-", "1", ")", "*", "steps_per_epoch", "\n", "\n", "########################################", "\n", "\n", "", "callbacks", ".", "on_train_begin", "(", ")", "\n", "\n", "for", "epoch", "in", "range", "(", "start_epoch", ",", "n_epochs", "+", "1", ")", ":", "\n", "\n", "            ", "callbacks", ".", "on_epoch_begin", "(", "epoch", ")", "\n", "\n", "self", ".", "model", ".", "train", "(", ")", "\n", "for", "batch", "in", "data", ":", "\n", "\n", "# Skip over the batches that are below start step", "\n", "                ", "if", "epoch", "==", "start_epoch", "and", "s", ">", "0", ":", "\n", "                    ", "s", "-=", "1", "\n", "continue", "\n", "\n", "", "callbacks", ".", "on_batch_begin", "(", "batch", ")", "\n", "\n", "ins_variables", ",", "src_variables", ",", "tgt_variable", "=", "self", ".", "get_batch_data", "(", "batch", ")", "\n", "ins_position_variables", "=", "self", ".", "get_position_ids", "(", "ins_variables", "[", "1", "]", ")", "\n", "position_variables", "=", "self", ".", "get_position_ids", "(", "src_variables", "[", "1", "]", ")", "\n", "\n", "self", ".", "batch_losses", "=", "self", ".", "_train_batch", "(", "ins_variables", "[", "0", "]", ",", "src_variables", "[", "0", "]", ",", "ins_variables", "[", "1", "]", ",", "\n", "ins_position_variables", ",", "position_variables", ",", "tgt_variable", ")", "\n", "\n", "callbacks", ".", "on_batch_end", "(", "batch", ")", "\n", "\n", "", "callbacks", ".", "on_epoch_end", "(", "epoch", ")", "\n", "\n", "# Stop training early if flag _stop_training is True", "\n", "if", "self", ".", "_stop_training", ":", "\n", "                ", "break", "\n", "\n", "", "", "logs", "=", "callbacks", ".", "on_train_end", "(", ")", "\n", "return", "logs", "\n", "\n"]], "home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.trainer.supervised_trainer.SupervisedTrainer.train": [[132, 223], ["supervised_trainer.SupervisedTrainer.set_local_parameters", "supervised_trainer.SupervisedTrainer.logger.info", "src.utils.callbacks.CallbackContainer", "supervised_trainer.SupervisedTrainer._train_epoches", "src.loss.NLLLoss", "src.utils.checkpoint.Checkpoint.load", "defaults.pop", "defaults.pop", "resume_optim.__class__", "src.optimizer.Optimizer", "supervised_trainer.SupervisedTrainer.model.parameters", "supervised_trainer.SupervisedTrainer.train.get_optim"], "methods", ["home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.trainer.supervised_trainer.SupervisedTrainer.set_local_parameters", "home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.trainer.supervised_trainer.SupervisedTrainer._train_epoches", "home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.utils.checkpoint.Checkpoint.load"], ["", "def", "train", "(", "self", ",", "model", ",", "data", ",", "\n", "dev_data", ",", "\n", "num_epochs", "=", "5", ",", "\n", "resume_training", "=", "False", ",", "\n", "monitor_data", "=", "{", "}", ",", "\n", "optimizer", "=", "None", ",", "\n", "custom_callbacks", "=", "[", "]", ",", "\n", "learning_rate", "=", "0.001", ",", "\n", "checkpoint_path", "=", "None", ",", "\n", "top_k", "=", "5", ",", "\n", "losses", "=", "[", "NLLLoss", "(", ")", "]", ",", "\n", "loss_weights", "=", "None", ",", "\n", "metrics", "=", "[", "]", ",", "\n", "random_seed", "=", "None", ",", "\n", "checkpoint_every", "=", "100", ",", "\n", "print_every", "=", "100", ")", ":", "\n", "        ", "\"\"\" Run training for a given model.\n        Args:\n            model (machine.models): model to run training on, if `resume=True`, it would be\n               overwritten by the model loaded from the latest checkpoint.\n            data (torchtext.data.Iterator: torchtext iterator object to train on\n            num_epochs (int, optional): number of epochs to run (default 5)\n            resume_training(bool, optional): resume training with the latest checkpoint up until the number of epochs (default False)\n            dev_data (torchtext.data.Iterator): dev/validation set iterator\n                Note: must not pass in the train iterator here as this gets evaluated during training (in between batches)\n                If you want to evaluate on the full train during training then make two iterators and pass the second one here\n            monitor_data (list of torchtext.data.Iterator, optional): list of iterators to test on (default None)\n                Note: must not pass in the train iterator here as this gets evaluated during training (in between batches)\n                      If you want to evaluate on the full train during training then make two iterators and pass the second one here\n            optimizer (machine.optim.Optimizer, optional): optimizer for training\n               (default: Optimizer(pytorch.optim.Adam, max_grad_norm=5))\n            custom_callbacks (list, optional): list of custom call backs (see utils.callbacks.callback for base class)\n            learing_rate (float, optional): learning rate used by the optimizer (default 0.001)\n            checkpoint_path (str, optional): path to load checkpoint from in case training should be resumed\n            top_k (int): how many models should be stored during training\n            loss (list, optional): list of machine.loss.Loss objects for training (default: [machine.loss.NLLLoss])\n            metrics (list, optional): list of machine.metric.metric objects to be computed during evaluation\n            checkpoint_every (int, optional): number of epochs to checkpoint after, (default: 100)\n            print_every (int, optional): number of iterations to print after, (default: 100)\n        Returns:\n            model (machine.models): trained model.\n        \"\"\"", "\n", "self", ".", "set_local_parameters", "(", "random_seed", ",", "losses", ",", "metrics", ",", "\n", "loss_weights", ",", "checkpoint_every", ",", "print_every", ")", "\n", "# If training is set to resume", "\n", "if", "resume_training", ":", "\n", "            ", "resume_checkpoint", "=", "Checkpoint", ".", "load", "(", "checkpoint_path", ")", "\n", "model", "=", "resume_checkpoint", ".", "model", "\n", "self", ".", "model", "=", "model", "\n", "self", ".", "optimizer", "=", "resume_checkpoint", ".", "optimizer", "\n", "\n", "# A walk around to set optimizing parameters properly", "\n", "resume_optim", "=", "self", ".", "optimizer", ".", "optimizer", "\n", "defaults", "=", "resume_optim", ".", "param_groups", "[", "0", "]", "\n", "defaults", ".", "pop", "(", "'params'", ",", "None", ")", "\n", "defaults", ".", "pop", "(", "'initial_lr'", ",", "None", ")", "\n", "self", ".", "optimizer", ".", "optimizer", "=", "resume_optim", ".", "__class__", "(", "\n", "self", ".", "model", ".", "parameters", "(", ")", ",", "**", "defaults", ")", "\n", "\n", "start_epoch", "=", "resume_checkpoint", ".", "epoch", "\n", "step", "=", "resume_checkpoint", ".", "step", "\n", "\n", "", "else", ":", "\n", "            ", "start_epoch", "=", "1", "\n", "step", "=", "0", "\n", "self", ".", "model", "=", "model", "\n", "\n", "def", "get_optim", "(", "optim_name", ")", ":", "\n", "                ", "optims", "=", "{", "'adam'", ":", "optim", ".", "Adam", ",", "'adagrad'", ":", "optim", ".", "Adagrad", ",", "\n", "'adadelta'", ":", "optim", ".", "Adadelta", ",", "'adamax'", ":", "optim", ".", "Adamax", ",", "\n", "'rmsprop'", ":", "optim", ".", "RMSprop", ",", "'sgd'", ":", "optim", ".", "SGD", ",", "\n", "None", ":", "optim", ".", "Adam", "}", "\n", "return", "optims", "[", "optim_name", "]", "\n", "\n", "", "self", ".", "optimizer", "=", "Optimizer", "(", "get_optim", "(", "optimizer", ")", "(", "self", ".", "model", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "learning_rate", ")", ",", "\n", "max_grad_norm", "=", "5", ")", "\n", "\n", "", "self", ".", "logger", ".", "info", "(", "\"Optimizer: %s, Scheduler: %s\"", "%", "\n", "(", "self", ".", "optimizer", ".", "optimizer", ",", "self", ".", "optimizer", ".", "scheduler", ")", ")", "\n", "\n", "callbacks", "=", "CallbackContainer", "(", "self", ",", "\n", "[", "Logger", "(", ")", ",", "\n", "ModelCheckpoint", "(", "top_k", "=", "top_k", ")", ",", "\n", "History", "(", ")", "]", "+", "custom_callbacks", ")", "\n", "\n", "logs", "=", "self", ".", "_train_epoches", "(", "data", ",", "num_epochs", ",", "start_epoch", ",", "step", ",", "dev_data", "=", "dev_data", ",", "\n", "monitor_data", "=", "monitor_data", ",", "\n", "callbacks", "=", "callbacks", ")", "\n", "\n", "return", "self", ".", "model", ",", "logs", "\n", "\n"]], "home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.trainer.supervised_trainer.SupervisedTrainer.get_batch_data": [[224, 231], ["getattr", "getattr", "getattr"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "get_batch_data", "(", "batch", ")", ":", "\n", "        ", "ins_variables", "=", "getattr", "(", "batch", ",", "'ins'", ")", "\n", "src_variables", "=", "getattr", "(", "batch", ",", "'src'", ")", "\n", "tgt_variable", "=", "getattr", "(", "batch", ",", "'tgt'", ")", "[", "0", "]", "\n", "\n", "return", "ins_variables", ",", "src_variables", ",", "tgt_variable", "\n", "\n"]], "home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.trainer.supervised_trainer.SupervisedTrainer.get_position_ids": [[232, 240], ["len", "max().item", "torch.zeros().long", "range", "torch.autograd.Variable", "torch.LongTensor", "max", "torch.zeros", "range"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "get_position_ids", "(", "length_list", ")", ":", "\n", "        ", "batch_size", "=", "len", "(", "length_list", ")", "\n", "length", "=", "max", "(", "length_list", ")", ".", "item", "(", ")", "\n", "pos_tensor", "=", "torch", ".", "zeros", "(", "batch_size", ",", "length", ")", ".", "long", "(", ")", "\n", "for", "i", "in", "range", "(", "batch_size", ")", ":", "\n", "            ", "pos_tensor", "[", "i", "]", "=", "torch", ".", "LongTensor", "(", "range", "(", "0", ",", "length", ")", ")", "\n", "", "return", "Variable", "(", "pos_tensor", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.metrics.metrics.Metric.__init__": [[27, 31], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "name", ",", "log_name", ",", "input_var", ")", ":", "\n", "        ", "self", ".", "name", "=", "name", "\n", "self", ".", "log_name", "=", "log_name", "\n", "self", ".", "input", "=", "input_var", "\n", "\n"]], "home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.metrics.metrics.Metric.reset": [[32, 35], ["NotImplementedError"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "\"\"\" Reset accumulated metric values\"\"\"", "\n", "raise", "NotImplementedError", "(", "\"Implement in subclass\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.metrics.metrics.Metric.get_val": [[36, 43], ["NotImplementedError"], "methods", ["None"], ["", "def", "get_val", "(", "self", ")", ":", "\n", "        ", "\"\"\" Get the value for the metric given the accumulated loss\n        and the normalisation term\n        Returns:\n            loss (float): value of the metric.\n        \"\"\"", "\n", "raise", "NotImplementedError", "(", "\"Implement in subclass\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.metrics.metrics.Metric.eval_batch": [[44, 51], ["NotImplementedError"], "methods", ["None"], ["", "def", "eval_batch", "(", "self", ",", "outputs", ",", "target", ")", ":", "\n", "        ", "\"\"\" Compute the metric for the batch given results and target results.\n        Args:\n            outputs (torch.Tensor): outputs of a batch.\n            target (torch.Tensor): expected output of a batch.\n        \"\"\"", "\n", "raise", "NotImplementedError", "(", "\"Implement in subclass\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.metrics.metrics.WordAccuracy.__init__": [[64, 71], ["metrics.Metric.__init__"], "methods", ["home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.loss.loss.Perplexity.__init__"], ["def", "__init__", "(", "self", ",", "ignore_index", "=", "None", ")", ":", "\n", "        ", "self", ".", "ignore_index", "=", "ignore_index", "\n", "self", ".", "word_match", "=", "0", "\n", "self", ".", "word_total", "=", "0", "\n", "\n", "super", "(", "WordAccuracy", ",", "self", ")", ".", "__init__", "(", "\n", "self", ".", "_NAME", ",", "self", ".", "_SHORTNAME", ",", "self", ".", "_INPUT", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.metrics.metrics.WordAccuracy.get_val": [[72, 77], ["float"], "methods", ["None"], ["", "def", "get_val", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "word_total", "!=", "0", ":", "\n", "            ", "return", "float", "(", "self", ".", "word_match", ")", "/", "self", ".", "word_total", "\n", "", "else", ":", "\n", "            ", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.metrics.metrics.WordAccuracy.reset": [[78, 81], ["None"], "methods", ["None"], ["", "", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "word_match", "=", "0", "\n", "self", ".", "word_total", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.metrics.metrics.WordAccuracy.eval_batch": [[82, 88], ["targets.ne", "outputs.eq().long().sum().item", "targets.ne.long().sum().item", "outputs.eq().long().sum", "targets.ne.long().sum", "outputs.eq().long", "targets.ne.long", "outputs.eq"], "methods", ["None"], ["", "def", "eval_batch", "(", "self", ",", "outputs", ",", "targets", ")", ":", "\n", "# batch_size x seq_len", "\n", "        ", "non_padding", "=", "targets", ".", "ne", "(", "self", ".", "ignore_index", ")", "\n", "correct", "=", "outputs", ".", "eq", "(", "targets", ")", ".", "long", "(", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "self", ".", "word_match", "+=", "correct", "\n", "self", ".", "word_total", "+=", "non_padding", ".", "long", "(", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.metrics.metrics.SequenceAccuracy.__init__": [[101, 112], ["metrics.Metric.__init__", "torch.device", "torch.cuda.is_available"], "methods", ["home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.loss.loss.Perplexity.__init__"], ["def", "__init__", "(", "self", ",", "ignore_index", "=", "None", ",", "device", "=", "None", ")", ":", "\n", "        ", "self", ".", "ignore_index", "=", "ignore_index", "\n", "self", ".", "seq_match", "=", "0", "\n", "self", ".", "seq_total", "=", "0", "\n", "\n", "if", "device", "is", "None", ":", "\n", "            ", "self", ".", "device", "=", "torch", ".", "device", "(", "\n", "\"cuda\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "\n", "\n", "", "super", "(", "SequenceAccuracy", ",", "self", ")", ".", "__init__", "(", "\n", "self", ".", "_NAME", ",", "self", ".", "_SHORTNAME", ",", "self", ".", "_INPUT", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.metrics.metrics.SequenceAccuracy.get_val": [[113, 118], ["float"], "methods", ["None"], ["", "def", "get_val", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "seq_total", "!=", "0", ":", "\n", "            ", "return", "float", "(", "self", ".", "seq_match", ")", "/", "self", ".", "seq_total", "\n", "", "else", ":", "\n", "            ", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.metrics.metrics.SequenceAccuracy.reset": [[119, 122], ["None"], "methods", ["None"], ["", "", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "seq_match", "=", "0", "\n", "self", ".", "seq_total", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.metrics.metrics.SequenceAccuracy.eval_batch": [[123, 129], ["outputs.size", "outputs.eq().long().sum", "outputs.eq().long().sum.eq().sum", "torch.ones", "outputs.eq().long", "outputs.eq().long().sum.eq", "outputs.eq"], "methods", ["None"], ["", "def", "eval_batch", "(", "self", ",", "outputs", ",", "targets", ")", ":", "\n", "        ", "batch_size", "=", "outputs", ".", "size", "(", "0", ")", "\n", "truth", "=", "torch", ".", "ones", "(", "batch_size", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "self", ".", "device", ")", "*", "23", "\n", "correct", "=", "outputs", ".", "eq", "(", "targets", ")", ".", "long", "(", ")", ".", "sum", "(", "dim", "=", "1", ")", "\n", "self", ".", "seq_match", "+=", "correct", ".", "eq", "(", "truth", ")", ".", "sum", "(", ")", "\n", "self", ".", "seq_total", "+=", "batch_size", "\n", "\n"]], "home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.data.fields.MechField.__init__": [[10, 28], ["logging.getLogger", "super().__init__", "kwargs.get", "logging.getLogger.warning", "kwargs.get", "logging.getLogger.warning"], "methods", ["home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.loss.loss.Perplexity.__init__"], ["def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Initialize the datafield, but force batch_first and include_lengths to be True.\n        Args:\n            **kwargs: Description\n        \"\"\"", "\n", "logger", "=", "logging", ".", "getLogger", "(", "__name__", ")", "\n", "\n", "if", "kwargs", ".", "get", "(", "'batch_first'", ")", "is", "False", ":", "\n", "            ", "logger", ".", "warning", "(", "\n", "\"Option batch_first has to be set to use machine.  Changed to True.\"", ")", "\n", "", "kwargs", "[", "'batch_first'", "]", "=", "True", "\n", "\n", "if", "kwargs", ".", "get", "(", "'include_lengths'", ")", "is", "False", ":", "\n", "            ", "logger", ".", "warning", "(", "\n", "\"Option include_lengths has to be set to use machine.  Changed to True.\"", ")", "\n", "", "kwargs", "[", "'include_lengths'", "]", "=", "True", "\n", "\n", "super", "(", "MechField", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.data.fields.MechField.build_vocab": [[29, 31], ["super().build_vocab"], "methods", ["home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.data.fields.MechField.build_vocab"], ["", "def", "build_vocab", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "MechField", ",", "self", ")", ".", "build_vocab", "(", "*", "args", ",", "**", "kwargs", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.data.get_standard_iter.get_standard_iter": [[5, 23], ["torchtext.data.BucketIterator", "torch.device", "torch.cuda.is_available", "len"], "function", ["None"], ["def", "get_standard_iter", "(", "data", ",", "batch_size", "=", "64", ",", "device", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Helper function to get the batch iter from a torchtext dataset\n    Args:\n        data (torchtext Dataset)\n        batch_size (int, optional)\n        device (torch.device, optional): if need to force data\n                                        to be run on specific device\n    \"\"\"", "\n", "if", "device", "is", "None", ":", "\n", "        ", "device", "=", "torch", ".", "device", "(", "\"cuda\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "\n", "# device = torch.device(\"cpu\")", "\n", "\n", "", "return", "torchtext", ".", "data", ".", "BucketIterator", "(", "\n", "dataset", "=", "data", ",", "batch_size", "=", "batch_size", ",", "\n", "sort", "=", "False", ",", "sort_within_batch", "=", "True", ",", "\n", "sort_key", "=", "lambda", "x", ":", "len", "(", "x", ".", "ins", ")", ",", "\n", "device", "=", "device", ",", "repeat", "=", "False", ")", "", "", ""]], "home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.optimizer.optimizer.Optimizer.__init__": [[17, 21], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "optim", ",", "max_grad_norm", "=", "0", ")", ":", "\n", "        ", "self", ".", "optimizer", "=", "optim", "\n", "self", ".", "scheduler", "=", "None", "\n", "self", ".", "max_grad_norm", "=", "max_grad_norm", "\n", "\n"]], "home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.optimizer.optimizer.Optimizer.set_scheduler": [[22, 29], ["None"], "methods", ["None"], ["", "def", "set_scheduler", "(", "self", ",", "scheduler", ")", ":", "\n", "        ", "\"\"\" Set the learning rate scheduler.\n        Args:\n            scheduler (torch.optim.lr_scheduler.*): object of learning rate scheduler,\n               e.g. torch.optim.lr_scheduler.StepLR\n        \"\"\"", "\n", "self", ".", "scheduler", "=", "scheduler", "\n", "\n"]], "home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.optimizer.optimizer.Optimizer.step": [[30, 37], ["optimizer.Optimizer.optimizer.step", "itertools.chain.from_iterable", "torch.nn.utils.clip_grad_norm_"], "methods", ["home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.optimizer.optimizer.Optimizer.step"], ["", "def", "step", "(", "self", ")", ":", "\n", "        ", "\"\"\" Performs a single optimization step, including gradient norm clipping if necessary. \"\"\"", "\n", "if", "self", ".", "max_grad_norm", ">", "0", ":", "\n", "            ", "params", "=", "itertools", ".", "chain", ".", "from_iterable", "(", "\n", "[", "group", "[", "'params'", "]", "for", "group", "in", "self", ".", "optimizer", ".", "param_groups", "]", ")", "\n", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "params", ",", "self", ".", "max_grad_norm", ")", "\n", "", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.optimizer.optimizer.Optimizer.update": [[38, 52], ["isinstance", "optimizer.Optimizer.scheduler.step", "optimizer.Optimizer.scheduler.step"], "methods", ["home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.optimizer.optimizer.Optimizer.step", "home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.optimizer.optimizer.Optimizer.step"], ["", "def", "update", "(", "self", ",", "loss", ")", ":", "\n", "        ", "\"\"\" Update the learning rate if the criteria of the scheduler are met.\n        Args:\n            loss (float): The current loss.  It could be training loss or developing loss\n                depending on the caller.  By default the supervised trainer uses developing\n                loss.\n            epoch (int): The current epoch number.\n        \"\"\"", "\n", "if", "self", ".", "scheduler", "is", "None", ":", "\n", "            ", "pass", "\n", "", "elif", "isinstance", "(", "self", ".", "scheduler", ",", "torch", ".", "optim", ".", "lr_scheduler", ".", "ReduceLROnPlateau", ")", ":", "\n", "            ", "self", ".", "scheduler", ".", "step", "(", "loss", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "scheduler", ".", "step", "(", ")", "", "", "", "", ""]], "home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.loss.loss.Loss.__init__": [[31, 44], ["issubclass", "ValueError", "type"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "name", ",", "log_name", ",", "inputs", ",", "target", ",", "criterion", ")", ":", "\n", "        ", "self", ".", "name", "=", "name", "\n", "self", ".", "log_name", "=", "log_name", "\n", "self", ".", "inputs", "=", "inputs", "\n", "self", ".", "target", "=", "target", "\n", "self", ".", "criterion", "=", "criterion", "\n", "if", "not", "issubclass", "(", "type", "(", "self", ".", "criterion", ")", ",", "nn", ".", "modules", ".", "loss", ".", "_Loss", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"Criterion has to be a subclass of torch.nn._Loss\"", ")", "\n", "# accumulated loss", "\n", "", "self", ".", "acc_loss", "=", "0", "\n", "# normalization term", "\n", "self", ".", "norm_term", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.loss.loss.Loss.reset": [[45, 49], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "\"\"\" Reset the accumulated loss. \"\"\"", "\n", "self", ".", "acc_loss", "=", "0", "\n", "self", ".", "norm_term", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.loss.loss.Loss.get_loss": [[50, 59], ["None"], "methods", ["None"], ["", "def", "get_loss", "(", "self", ")", ":", "\n", "        ", "\"\"\" Get the loss.\n        This method defines how to calculate the averaged loss given the\n        accumulated loss and the normalization term.  Override to define your\n        own logic.\n        Returns:\n            loss (float): value of the loss.\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.loss.loss.Loss.eval_batch": [[60, 85], ["outputs.size", "range", "loss.Loss.eval_step"], "methods", ["home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.loss.loss.Perplexity.eval_step"], ["", "def", "eval_batch", "(", "self", ",", "decoder_outputs", ",", "target_variable", ")", ":", "\n", "        ", "\"\"\" Evaluate and accumulate loss given outputs and expected results.\n        This method is called after each batch with the batch outputs and\n        the target (expected) results.  The loss and normalization term are\n        accumulated in this method.  Override it to define your own accumulation\n        method.\n        Args:\n            decoder_outputs (torch.Tensor): outputs of a batch.\n            target_variable (torch.Tensor): expected output of a batch.\n        \"\"\"", "\n", "\n", "# lists with:", "\n", "# decoder outputs # (batch, vocab_size?)", "\n", "# attention scores # (batch, 1, input_length)", "\n", "\n", "outputs", "=", "decoder_outputs", "\n", "\n", "targets", "=", "target_variable", "\n", "\n", "step_len", "=", "outputs", ".", "size", "(", "1", ")", "\n", "\n", "for", "step", "in", "range", "(", "step_len", ")", ":", "\n", "            ", "step_target", "=", "targets", "[", ":", ",", "step", "]", "\n", "step_output", "=", "outputs", "[", ":", ",", "step", ",", ":", "]", "\n", "self", ".", "eval_step", "(", "step_output", ",", "step_target", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.loss.loss.Loss.eval_step": [[86, 94], ["None"], "methods", ["None"], ["", "", "def", "eval_step", "(", "self", ",", "outputs", ",", "target", ")", ":", "\n", "        ", "\"\"\" Function called by eval batch to evaluate a timestep of the batch.\n        When called it updates self.acc_loss with the loss of the current step.\n        Args:\n            outputs (torch.Tensor): outputs of a batch.\n            target (torch.Tensor): expected output of a batch.\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.loss.loss.Loss.cuda": [[95, 97], ["loss.Loss.criterion.cuda"], "methods", ["home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.loss.loss.Loss.cuda"], ["", "def", "cuda", "(", "self", ")", ":", "\n", "        ", "self", ".", "criterion", ".", "cuda", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.loss.loss.Loss.to": [[98, 100], ["loss.Loss.criterion.to"], "methods", ["home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.loss.loss.Loss.to"], ["", "def", "to", "(", "self", ",", "device", ")", ":", "\n", "        ", "self", ".", "criterion", ".", "to", "(", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.loss.loss.Loss.backward": [[101, 107], ["isinstance", "loss.Loss.acc_loss.backward", "ValueError"], "methods", ["home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.loss.loss.Loss.backward"], ["", "def", "backward", "(", "self", ",", "retain_graph", "=", "False", ")", ":", "\n", "        ", "\"\"\" Backpropagate the computed loss.\n        \"\"\"", "\n", "if", "isinstance", "(", "self", ".", "acc_loss", ",", "int", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"No loss to back propagate.\"", ")", "\n", "", "self", ".", "acc_loss", ".", "backward", "(", "retain_graph", "=", "retain_graph", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.loss.loss.Loss.scale_loss": [[108, 112], ["None"], "methods", ["None"], ["", "def", "scale_loss", "(", "self", ",", "factor", ")", ":", "\n", "        ", "\"\"\" Scale loss with a factor\n        \"\"\"", "\n", "self", ".", "acc_loss", "*=", "factor", "\n", "\n"]], "home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.loss.loss.NLLLoss.__init__": [[126, 133], ["loss.Loss.__init__", "torch.NLLLoss"], "methods", ["home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.loss.loss.Perplexity.__init__"], ["def", "__init__", "(", "self", ",", "ignore_index", "=", "-", "1", ",", "size_average", "=", "True", ")", ":", "\n", "        ", "self", ".", "ignore_index", "=", "ignore_index", "\n", "self", ".", "size_average", "=", "size_average", "\n", "\n", "super", "(", "NLLLoss", ",", "self", ")", ".", "__init__", "(", "\n", "self", ".", "_NAME", ",", "self", ".", "_SHORTNAME", ",", "self", ".", "_INPUTS", ",", "self", ".", "_TARGETS", ",", "\n", "nn", ".", "NLLLoss", "(", "ignore_index", "=", "ignore_index", ",", "reduction", "=", "'mean'", "if", "size_average", "else", "'sum'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.loss.loss.NLLLoss.get_loss": [[134, 143], ["isinstance", "loss.NLLLoss.NLLLoss.acc_loss.item"], "methods", ["None"], ["", "def", "get_loss", "(", "self", ")", ":", "\n", "        ", "if", "isinstance", "(", "self", ".", "acc_loss", ",", "int", ")", ":", "\n", "            ", "return", "0", "\n", "# total loss for all batches", "\n", "", "loss", "=", "self", ".", "acc_loss", ".", "item", "(", ")", "\n", "if", "self", ".", "size_average", ":", "\n", "# average loss per batch", "\n", "            ", "loss", "/=", "self", ".", "norm_term", "\n", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.loss.loss.NLLLoss.eval_step": [[144, 149], ["target.size", "step_outputs.contiguous().view", "loss.NLLLoss.criterion", "step_outputs.contiguous"], "methods", ["None"], ["", "def", "eval_step", "(", "self", ",", "step_outputs", ",", "target", ")", ":", "\n", "        ", "batch_size", "=", "target", ".", "size", "(", "0", ")", "\n", "outputs", "=", "step_outputs", ".", "contiguous", "(", ")", ".", "view", "(", "batch_size", ",", "-", "1", ")", "\n", "self", ".", "acc_loss", "+=", "self", ".", "criterion", "(", "outputs", ",", "target", ")", "\n", "self", ".", "norm_term", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.loss.loss.Perplexity.__init__": [[164, 167], ["loss.NLLLoss.__init__"], "methods", ["home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.loss.loss.Perplexity.__init__"], ["def", "__init__", "(", "self", ",", "ignore_index", "=", "-", "100", ")", ":", "\n", "        ", "super", "(", "Perplexity", ",", "self", ")", ".", "__init__", "(", "\n", "ignore_index", "=", "ignore_index", ",", "size_average", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.loss.loss.Perplexity.eval_step": [[168, 174], ["loss.Perplexity.criterion", "numpy.prod", "target.data.ne().sum", "target.size", "target.data.ne"], "methods", ["None"], ["", "def", "eval_step", "(", "self", ",", "outputs", ",", "target", ")", ":", "\n", "        ", "self", ".", "acc_loss", "+=", "self", ".", "criterion", "(", "outputs", ",", "target", ")", "\n", "if", "self", ".", "ignore_index", "is", "-", "100", ":", "\n", "            ", "self", ".", "norm_term", "+=", "np", ".", "prod", "(", "target", ".", "size", "(", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "norm_term", "+=", "target", ".", "data", ".", "ne", "(", "self", ".", "ignore_index", ")", ".", "sum", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.loss.loss.Perplexity.get_loss": [[175, 182], ["loss.NLLLoss.get_loss", "loss.Perplexity.norm_term.item", "math.exp", "print", "math.exp"], "methods", ["home.repos.pwc.inspect_result.rezkaaufar_fast-and-flexible.loss.loss.Perplexity.get_loss"], ["", "", "def", "get_loss", "(", "self", ")", ":", "\n", "        ", "nll", "=", "super", "(", "Perplexity", ",", "self", ")", ".", "get_loss", "(", ")", "\n", "nll", "/=", "self", ".", "norm_term", ".", "item", "(", ")", "\n", "if", "nll", ">", "Perplexity", ".", "_MAX_EXP", ":", "\n", "            ", "print", "(", "\"WARNING: Loss exceeded maximum value, capping to e^100\"", ")", "\n", "return", "math", ".", "exp", "(", "Perplexity", ".", "_MAX_EXP", ")", "\n", "", "return", "math", ".", "exp", "(", "nll", ")", "", "", "", ""]]}