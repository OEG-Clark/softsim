{"home.repos.pwc.inspect_result.rongguangw_flow-scm.None.train.save_checkpoint": [[17, 22], ["utils.mkdir", "torch.save", "torch.save", "torch.save", "torch.save", "os.path.join", "shutil.copyfile", "os.path.join", "os.path.join"], "function", ["home.repos.pwc.inspect_result.rongguangw_flow-scm.None.utils.mkdir"], ["def", "save_checkpoint", "(", "state", ",", "is_best", ",", "filepath", ")", ":", "\n", "    ", "mkdir", "(", "filepath", ")", "\n", "torch", ".", "save", "(", "state", ",", "os", ".", "path", ".", "join", "(", "filepath", ",", "'flow_ckpt.pth.tar'", ")", ")", "\n", "if", "is_best", ":", "\n", "        ", "shutil", ".", "copyfile", "(", "os", ".", "path", ".", "join", "(", "filepath", ",", "'flow_ckpt.pth.tar'", ")", ",", "os", ".", "path", ".", "join", "(", "filepath", ",", "'flow_best.pth.tar'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rongguangw_flow-scm.None.train.train": [[23, 41], ["enumerate", "optimizer.zero_grad", "model", "loss.item", "loss.backward", "optimizer.step", "model.clear", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "print", "roi.cuda", "age.cuda", "sex.cuda", "scanner.cuda", "len", "loss.item", "len", "len", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean"], "function", ["home.repos.pwc.inspect_result.rongguangw_flow-scm.models.nfs.ConditionalSCM.model", "home.repos.pwc.inspect_result.rongguangw_flow-scm.models.nfs.ConditionalSCM.clear"], ["", "", "def", "train", "(", "args", ",", "model", ",", "optimizer", ",", "train_loader", ",", "epoch", ")", ":", "\n", "    ", "avg_loss", "=", "0.", "\n", "for", "batch_idx", ",", "(", "roi", ",", "age", ",", "sex", ",", "scanner", ")", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "        ", "if", "args", ".", "cuda", ":", "\n", "            ", "roi", ",", "age", ",", "sex", ",", "scanner", "=", "roi", ".", "cuda", "(", ")", ",", "age", ".", "cuda", "(", ")", ",", "sex", ".", "cuda", "(", ")", ",", "scanner", ".", "cuda", "(", ")", "\n", "", "optimizer", ".", "zero_grad", "(", ")", "\n", "log_p", "=", "model", "(", "roi", ",", "sex", ",", "age", ",", "scanner", ")", "\n", "loss", "=", "-", "torch", ".", "mean", "(", "log_p", "[", "'sex'", "]", "+", "log_p", "[", "'age'", "]", "+", "log_p", "[", "'scanner'", "]", "+", "log_p", "[", "'roi'", "]", ")", "\n", "avg_loss", "+=", "loss", ".", "item", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "model", ".", "clear", "(", ")", "\n", "if", "batch_idx", "%", "args", ".", "log_interval", "==", "0", ":", "\n", "            ", "print", "(", "'Train Epoch: {} [{}/{} ({:.1f}%)]\\t| -LogProb Sex: {:.6f}\\tAge: {:.6f}\\t\\\n                Scanner: {:.6f}\\tROI: {:.6f}\\tTotal: {:.6f}'", ".", "format", "(", "epoch", ",", "batch_idx", "*", "len", "(", "roi", ")", ",", "\n", "len", "(", "train_loader", ".", "dataset", ")", ",", "100.", "*", "batch_idx", "/", "len", "(", "train_loader", ")", ",", "\n", "-", "torch", ".", "mean", "(", "log_p", "[", "'sex'", "]", ")", ".", "item", "(", ")", ",", "-", "torch", ".", "mean", "(", "log_p", "[", "'age'", "]", ")", ".", "item", "(", ")", ",", "\n", "-", "torch", ".", "mean", "(", "log_p", "[", "'scanner'", "]", ")", ".", "item", "(", ")", ",", "-", "torch", ".", "mean", "(", "log_p", "[", "'roi'", "]", ")", ".", "item", "(", ")", ",", "loss", ".", "item", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rongguangw_flow-scm.None.train.test": [[42, 54], ["len", "print", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "model", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "roi.cuda", "age.cuda", "sex.cuda", "scanner.cuda", "torch.mean", "torch.mean", "torch.mean", "torch.mean"], "function", ["home.repos.pwc.inspect_result.rongguangw_flow-scm.models.nfs.ConditionalSCM.model"], ["", "", "", "def", "test", "(", "args", ",", "model", ",", "test_loader", ")", ":", "\n", "    ", "test_loss", "=", "0.", "\n", "for", "roi", ",", "age", ",", "sex", ",", "scanner", "in", "test_loader", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "if", "args", ".", "cuda", ":", "\n", "                ", "roi", ",", "age", ",", "sex", ",", "scanner", "=", "roi", ".", "cuda", "(", ")", ",", "age", ".", "cuda", "(", ")", ",", "sex", ".", "cuda", "(", ")", ",", "scanner", ".", "cuda", "(", ")", "\n", "", "log_p", "=", "model", "(", "roi", ",", "sex", ",", "age", ",", "scanner", ")", "\n", "test_loss", "+=", "torch", ".", "mean", "(", "log_p", "[", "'sex'", "]", "+", "log_p", "[", "'age'", "]", "+", "log_p", "[", "'scanner'", "]", "+", "log_p", "[", "'roi'", "]", ")", ".", "item", "(", ")", "\n", "\n", "", "", "test_loss", "/=", "len", "(", "test_loader", ".", "dataset", ")", "\n", "print", "(", "'\\nTest set: Average LogProb: {:.6f}\\n'", ".", "format", "(", "test_loss", ")", ")", "\n", "return", "test_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.rongguangw_flow-scm.None.train.main": [[55, 94], ["loaders.get_features_dataset", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.Adam", "torch.lr_scheduler.CosineAnnealingLR", "time.time", "range", "print", "model.cuda", "model.parameters", "train.train", "train.test", "max", "train.save_checkpoint", "torch.cuda.device", "torch.cuda.device", "torch.cuda.device", "torch.cuda.device", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "multiprocessing.cpu_count", "utils.milestone_step", "optim.lr_scheduler.CosineAnnealingLR.step", "model.state_dict", "optim.Adam.state_dict", "time.time"], "function", ["home.repos.pwc.inspect_result.rongguangw_flow-scm.loaders.features.get_features_dataset", "home.repos.pwc.inspect_result.rongguangw_flow-scm.None.train.train", "home.repos.pwc.inspect_result.rongguangw_flow-scm.None.train.test", "home.repos.pwc.inspect_result.rongguangw_flow-scm.None.train.save_checkpoint", "home.repos.pwc.inspect_result.rongguangw_flow-scm.None.utils.milestone_step"], ["", "def", "main", "(", "args", ")", ":", "\n", "    ", "kwargs", "=", "{", "'num_workers'", ":", "mp", ".", "cpu_count", "(", ")", ",", "'pin_memory'", ":", "True", "}", "if", "args", ".", "cuda", "else", "{", "}", "\n", "dataset_train", ",", "dataset_test", "=", "get_features_dataset", "(", "\n", "filename", "=", "args", ".", "data_filename", ",", "feature_dim", "=", "args", ".", "feature_dim", ",", "random_seed", "=", "args", ".", "data_seed", ")", "\n", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "dataset_train", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "True", ",", "**", "kwargs", ")", "\n", "test_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "dataset_test", ",", "batch_size", "=", "args", ".", "test_batch_size", ",", "shuffle", "=", "False", ",", "**", "kwargs", ")", "\n", "\n", "model", "=", "models", ".", "__dict__", "[", "args", ".", "arch", "]", "(", "\n", "flow_dict", "=", "dataset_train", ".", "flow_dict", ",", "flow_type", "=", "args", ".", "flow_type", ",", "order", "=", "args", ".", "flow_order", ")", "\n", "if", "args", ".", "cuda", ":", "\n", "        ", "model", ".", "cuda", "(", ")", "\n", "\n", "", "optimizer", "=", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "lr", ",", "weight_decay", "=", "args", ".", "weight_decay", ")", "\n", "scheduler", "=", "optim", ".", "lr_scheduler", ".", "CosineAnnealingLR", "(", "optimizer", ",", "args", ".", "epochs", ",", "0", ")", "\n", "\n", "best_loss", "=", "-", "100.", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "for", "epoch", "in", "range", "(", "args", ".", "epochs", ")", ":", "\n", "        ", "if", "not", "args", ".", "lr_annealing", ":", "\n", "            ", "milestone_step", "(", "args", ",", "optimizer", ",", "epoch", ")", "\n", "", "else", ":", "\n", "            ", "scheduler", ".", "step", "(", ")", "\n", "", "train", "(", "args", ",", "model", ",", "optimizer", ",", "train_loader", ",", "epoch", ")", "\n", "loss", "=", "test", "(", "args", ",", "model", ",", "test_loader", ")", "\n", "is_best", "=", "loss", ">", "best_loss", "\n", "best_loss", "=", "max", "(", "loss", ",", "best_loss", ")", "\n", "save_checkpoint", "(", "{", "\n", "'epoch'", ":", "epoch", "+", "1", ",", "\n", "'state_dict'", ":", "model", ".", "state_dict", "(", ")", ",", "\n", "'best_loss'", ":", "best_loss", ",", "\n", "'optimizer'", ":", "optimizer", ".", "state_dict", "(", ")", "\n", "}", ",", "is_best", ",", "filepath", "=", "args", ".", "save", ")", "\n", "\n", "", "del", "model", "\n", "with", "torch", ".", "cuda", ".", "device", "(", "'cuda:'", "+", "args", ".", "gpu_id", ")", ":", "\n", "        ", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "", "print", "(", "'==> Best LogProb: {:.6f}, Time: {:.2f} min\\n'", ".", "format", "(", "best_loss", ",", "(", "time", ".", "time", "(", ")", "-", "start_time", ")", "/", "60.", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rongguangw_flow-scm.None.infer.FeaturesInference.__init__": [[20, 33], ["super().__init__", "os.path.join", "utils.mkdir", "os.path.join", "pandas.DataFrame", "re.sub", "re.sub"], "methods", ["home.repos.pwc.inspect_result.rongguangw_flow-scm.models.nfs.ConditionalSCM.__init__", "home.repos.pwc.inspect_result.rongguangw_flow-scm.None.utils.mkdir"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "model", ",", "loader", ",", "original_data", ",", "covariates_dict", ")", ":", "\n", "        ", "super", "(", "FeaturesInference", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "args", "=", "args", "\n", "self", ".", "model", "=", "model", "\n", "self", ".", "loader", "=", "loader", "\n", "self", ".", "feature_dim", "=", "args", ".", "feature_dim", "\n", "self", ".", "original_df", "=", "original_data", "\n", "self", ".", "covariates_dict", "=", "covariates_dict", "\n", "self", ".", "output_path", "=", "os", ".", "path", ".", "join", "(", "'./datasets'", ",", "'counterfactuals'", ")", "\n", "mkdir", "(", "self", ".", "output_path", ")", "\n", "self", ".", "key", "=", "re", ".", "sub", "(", "' '", ",", "''", ",", "re", ".", "sub", "(", "'[(=,)]'", ",", "'_'", ",", "args", ".", "condition", ")", ")", "[", ":", "-", "1", "]", "\n", "self", ".", "output_file", "=", "os", ".", "path", ".", "join", "(", "self", ".", "output_path", ",", "args", ".", "data_filename", "[", ":", "-", "4", "]", "+", "'_'", "+", "self", ".", "key", "+", "'.csv'", ")", "\n", "self", ".", "counter_df", "=", "pd", ".", "DataFrame", "(", "columns", "=", "self", ".", "original_df", ".", "columns", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rongguangw_flow-scm.None.infer.FeaturesInference.update_csv": [[34, 45], ["samples[].cpu().numpy", "samples[].cpu().numpy().squeeze", "samples[].cpu().numpy().squeeze", "samples[].cpu().numpy().squeeze", "range", "len", "infer.FeaturesInference.counter_df.append", "samples[].cpu", "samples[].cpu().numpy", "samples[].cpu().numpy", "samples[].cpu().numpy", "infer.FeaturesInference.covariates_dict[].inverse_transform", "infer.FeaturesInference.covariates_dict[].inverse_transform", "samples[].cpu", "samples[].cpu", "samples[].cpu", "int", "int"], "methods", ["None"], ["", "def", "update_csv", "(", "self", ",", "samples", ",", "ids", ")", ":", "\n", "        ", "roi", "=", "samples", "[", "'roi'", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "sex", "=", "samples", "[", "'sex'", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "squeeze", "(", ")", "\n", "age", "=", "samples", "[", "'age'", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "squeeze", "(", ")", "\n", "scanner", "=", "samples", "[", "'scanner'", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "squeeze", "(", ")", "\n", "for", "idx", "in", "range", "(", "len", "(", "ids", ")", ")", ":", "\n", "            ", "self", ".", "counter_df", "=", "self", ".", "counter_df", ".", "append", "(", "self", ".", "original_df", "[", "self", ".", "original_df", ".", "PTID", "==", "ids", "[", "idx", "]", "]", ",", "ignore_index", "=", "True", ")", "\n", "self", ".", "counter_df", ".", "iloc", "[", "self", ".", "counter_df", ".", "index", "[", "-", "1", "]", ",", "-", "self", ".", "feature_dim", ":", "]", "=", "roi", "[", "idx", "]", "\n", "self", ".", "counter_df", ".", "loc", "[", "self", ".", "counter_df", ".", "index", "[", "-", "1", "]", ",", "'Sex'", "]", "=", "self", ".", "covariates_dict", "[", "'sex'", "]", ".", "inverse_transform", "(", "[", "int", "(", "sex", "[", "idx", "]", ")", "]", ")", "[", "-", "1", "]", "\n", "self", ".", "counter_df", ".", "loc", "[", "self", ".", "counter_df", ".", "index", "[", "-", "1", "]", ",", "'Age'", "]", "=", "age", "[", "idx", "]", "\n", "self", ".", "counter_df", ".", "loc", "[", "self", ".", "counter_df", ".", "index", "[", "-", "1", "]", ",", "'Site'", "]", "=", "self", ".", "covariates_dict", "[", "'scanner'", "]", ".", "inverse_transform", "(", "[", "int", "(", "scanner", "[", "idx", "]", ")", "]", ")", "[", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.rongguangw_flow-scm.None.infer.FeaturesInference.close_csv": [[46, 57], ["infer.FeaturesInference.original_df.copy", "infer.FeaturesInference.counter_df.copy", "infer.FeaturesInference.iloc[].to_numpy", "numpy.repeat", "numpy.repeat", "infer.FeaturesInference.counter_df.to_csv", "print", "numpy.expand_dims", "numpy.expand_dims", "numpy.min", "numpy.max", "infer.FeaturesInference.output_file.split"], "methods", ["None"], ["", "", "def", "close_csv", "(", "self", ")", ":", "\n", "# recover", "\n", "        ", "raw_df", "=", "self", ".", "original_df", ".", "copy", "(", ")", "\n", "har_df", "=", "self", ".", "counter_df", ".", "copy", "(", ")", "\n", "img", "=", "raw_df", ".", "iloc", "[", ":", ",", "-", "self", ".", "feature_dim", ":", "]", ".", "to_numpy", "(", ")", "\n", "min", "=", "np", ".", "repeat", "(", "np", ".", "expand_dims", "(", "np", ".", "min", "(", "img", ",", "axis", "=", "1", ")", ",", "axis", "=", "1", ")", ",", "self", ".", "feature_dim", ",", "axis", "=", "1", ")", "\n", "max", "=", "np", ".", "repeat", "(", "np", ".", "expand_dims", "(", "np", ".", "max", "(", "img", ",", "axis", "=", "1", ")", ",", "axis", "=", "1", ")", ",", "self", ".", "feature_dim", ",", "axis", "=", "1", ")", "\n", "self", ".", "counter_df", ".", "iloc", "[", ":", ",", "-", "self", ".", "feature_dim", ":", "]", "=", "har_df", ".", "iloc", "[", ":", ",", "-", "self", ".", "feature_dim", ":", "]", "*", "(", "max", "-", "min", ")", "+", "min", "# recover back from standardize", "\n", "# save", "\n", "self", ".", "counter_df", ".", "to_csv", "(", "self", ".", "output_file", ",", "index", "=", "False", ")", "\n", "print", "(", "'\\n=> Conterfactuals has been stored at {}.'", ".", "format", "(", "self", ".", "output_file", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rongguangw_flow-scm.None.infer.FeaturesInference.counterfactual_conditions": [[58, 63], ["torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like"], "methods", ["None"], ["", "def", "counterfactual_conditions", "(", "self", ",", "data", ")", ":", "\n", "        ", "counterfactuals", "=", "{", "\n", "'do(scanner=0)'", ":", "{", "'scanner'", ":", "torch", ".", "zeros_like", "(", "data", "[", "'scanner'", "]", ")", "}", ",", "\n", "'do(scanner=1)'", ":", "{", "'scanner'", ":", "torch", ".", "ones_like", "(", "data", "[", "'scanner'", "]", ")", "*", "1", "}", "}", "\n", "return", "counterfactuals", "\n", "\n"]], "home.repos.pwc.inspect_result.rongguangw_flow-scm.None.infer.FeaturesInference.inference": [[64, 77], ["enumerate", "infer.FeaturesInference.close_csv", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "infer.FeaturesInference.model.counterfactual", "infer.FeaturesInference.update_csv", "infer.FeaturesInference.counterfactual_conditions", "print", "roi.cuda", "age.cuda", "sex.cuda", "scanner.cuda", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.rongguangw_flow-scm.None.infer.FeaturesInference.close_csv", "home.repos.pwc.inspect_result.rongguangw_flow-scm.models.nfs.ConditionalSCM.counterfactual", "home.repos.pwc.inspect_result.rongguangw_flow-scm.None.infer.FeaturesInference.update_csv", "home.repos.pwc.inspect_result.rongguangw_flow-scm.None.infer.FeaturesInference.counterfactual_conditions"], ["", "def", "inference", "(", "self", ")", ":", "\n", "        ", "for", "batch_idx", ",", "(", "roi", ",", "age", ",", "sex", ",", "scanner", ",", "id", ")", "in", "enumerate", "(", "self", ".", "loader", ")", ":", "\n", "            ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "if", "self", ".", "args", ".", "cuda", ":", "\n", "                    ", "roi", ",", "age", ",", "sex", ",", "scanner", "=", "roi", ".", "cuda", "(", ")", ",", "age", ".", "cuda", "(", ")", ",", "sex", ".", "cuda", "(", ")", ",", "scanner", ".", "cuda", "(", ")", "\n", "", "data", "=", "{", "'roi'", ":", "roi", ",", "'sex'", ":", "sex", ",", "'age'", ":", "age", ",", "'scanner'", ":", "scanner", "}", "\n", "condition", "=", "self", ".", "counterfactual_conditions", "(", "data", ")", "[", "self", ".", "args", ".", "condition", "]", "\n", "samples", "=", "self", ".", "model", ".", "counterfactual", "(", "obs", "=", "data", ",", "condition", "=", "condition", ",", "num_particles", "=", "self", ".", "args", ".", "particles", ")", "\n", "self", ".", "update_csv", "(", "samples", ",", "id", ")", "\n", "if", "batch_idx", "%", "self", ".", "args", ".", "log_interval", "==", "0", ":", "\n", "                    ", "print", "(", "'Inference: [{}/{} ({:.1f}%)]\\tCondition: {}'", ".", "format", "(", "\n", "batch_idx", "*", "len", "(", "roi", ")", ",", "len", "(", "self", ".", "loader", ".", "dataset", ")", ",", "100.", "*", "batch_idx", "/", "len", "(", "self", ".", "loader", ")", ",", "self", ".", "args", ".", "condition", ")", ")", "\n", "", "", "", "self", ".", "close_csv", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rongguangw_flow-scm.None.infer.main": [[79, 95], ["loaders.get_features_dataset", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.load", "torch.load", "torch.load", "torch.load", "print", "model.load_state_dict", "infer.FeaturesInference", "FeaturesInference.inference", "model.cuda", "multiprocessing.cpu_count"], "function", ["home.repos.pwc.inspect_result.rongguangw_flow-scm.loaders.features.get_features_dataset", "home.repos.pwc.inspect_result.rongguangw_flow-scm.None.infer.FeaturesInference.inference"], ["", "", "def", "main", "(", "args", ")", ":", "\n", "    ", "kwargs", "=", "{", "'num_workers'", ":", "mp", ".", "cpu_count", "(", ")", ",", "'pin_memory'", ":", "True", "}", "if", "args", ".", "cuda", "else", "{", "}", "\n", "dataset", "=", "get_features_dataset", "(", "\n", "inference", "=", "True", ",", "filename", "=", "args", ".", "data_filename", ",", "feature_dim", "=", "args", ".", "feature_dim", ",", "random_seed", "=", "args", ".", "data_seed", ")", "\n", "loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataset", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "False", ",", "**", "kwargs", ")", "\n", "\n", "model", "=", "models", ".", "__dict__", "[", "args", ".", "arch", "]", "(", "\n", "flow_dict", "=", "dataset", ".", "flow_dict", ",", "flow_type", "=", "args", ".", "flow_type", ",", "order", "=", "args", ".", "flow_order", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "args", ".", "model_path", ")", "\n", "print", "(", "'==> Best LogProb: {:.6f}\\n'", ".", "format", "(", "checkpoint", "[", "'best_loss'", "]", ")", ")", "\n", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "if", "args", ".", "cuda", ":", "\n", "        ", "model", ".", "cuda", "(", ")", "\n", "\n", "", "feature", "=", "FeaturesInference", "(", "args", ",", "model", ",", "loader", ",", "dataset", ".", "data", ",", "dataset", ".", "covariates_dict", ")", "\n", "feature", ".", "inference", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rongguangw_flow-scm.None.utils.mkdir": [[7, 10], ["os.path.exists", "os.makedirs"], "function", ["None"], ["def", "mkdir", "(", "dir", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rongguangw_flow-scm.None.utils.milestone_step": [[11, 15], ["None"], "function", ["None"], ["", "", "def", "milestone_step", "(", "args", ",", "optimizer", ",", "epoch", ")", ":", "\n", "    ", "if", "epoch", "in", "[", "args", ".", "epochs", "*", "0.5", ",", "args", ".", "epochs", "*", "0.75", "]", ":", "\n", "        ", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "            ", "param_group", "[", "'lr'", "]", "*=", "0.1", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.rongguangw_flow-scm.loaders.features.featuresDataset.__init__": [[18, 62], ["torch.utils.data.Dataset.__init__", "os.path.join", "pandas.read_csv", "features.featuresDataset.label_idx", "features.featuresDataset.flow_prepare", "print", "features.featuresDataset.data.iterrows", "print", "features.featuresDataset.image_list.append", "numpy.arange", "numpy.random.seed", "numpy.random.shuffle", "int", "numpy.arange", "dict", "len", "len", "len", "numpy.asarray().astype", "features.featuresDataset.sex_dict.transform", "round", "features.featuresDataset.scanner_dict.transform", "numpy.asarray"], "methods", ["home.repos.pwc.inspect_result.rongguangw_flow-scm.models.nfs.ConditionalSCM.__init__", "home.repos.pwc.inspect_result.rongguangw_flow-scm.loaders.features.featuresDataset.label_idx", "home.repos.pwc.inspect_result.rongguangw_flow-scm.loaders.features.featuresDataset.flow_prepare"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "filename", ",", "\n", "feature_dim", "=", "145", ",", "\n", "inference", "=", "False", ",", "\n", "train", "=", "True", ",", "\n", "train_ratio", "=", "0.8", ",", "\n", "random_seed", "=", "42", ",", "\n", "zscore", "=", "True", "\n", ")", ":", "\n", "        ", "super", "(", "featuresDataset", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "filename", "=", "filename", "\n", "self", ".", "data_path", "=", "os", ".", "path", ".", "join", "(", "'./datasets'", ",", "self", ".", "filename", ")", "\n", "self", ".", "data", "=", "pd", ".", "read_csv", "(", "self", ".", "data_path", ",", "low_memory", "=", "False", ")", "\n", "self", ".", "feature_dim", "=", "feature_dim", "\n", "self", ".", "random_seed", "=", "random_seed", "\n", "self", ".", "inference", "=", "inference", "\n", "self", ".", "zscore", "=", "zscore", "\n", "self", ".", "label_idx", "(", ")", "\n", "self", ".", "flow_prepare", "(", ")", "\n", "\n", "self", ".", "image_list", ",", "self", ".", "y", "=", "[", "]", ",", "[", "]", "\n", "print", "(", "'==> start preprocessing csv ...'", ")", "\n", "for", "index", ",", "row", "in", "self", ".", "data", ".", "iterrows", "(", ")", ":", "\n", "            ", "self", ".", "image_list", ".", "append", "(", "dict", "(", "\n", "image", "=", "np", ".", "asarray", "(", "row", "[", "-", "self", ".", "feature_dim", ":", "]", ")", ".", "astype", "(", "np", ".", "float32", ")", ",", "\n", "image_id", "=", "row", "[", "'PTID'", "]", ",", "\n", "sex", "=", "self", ".", "sex_dict", ".", "transform", "(", "[", "row", "[", "'Sex'", "]", "]", ")", ",", "\n", "age", "=", "round", "(", "row", "[", "'Age'", "]", ",", "2", ")", ",", "\n", "scanner", "=", "self", ".", "scanner_dict", ".", "transform", "(", "[", "row", "[", "'Site'", "]", "]", ")", "\n", ")", ")", "\n", "", "print", "(", "'==> finished preprocessing csv ...'", ")", "\n", "\n", "if", "not", "self", ".", "inference", ":", "\n", "            ", "self", ".", "img_idxes", "=", "np", ".", "arange", "(", "0", ",", "len", "(", "self", ".", "image_list", ")", ")", "\n", "np", ".", "random", ".", "seed", "(", "self", ".", "random_seed", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "self", ".", "img_idxes", ")", "\n", "last_train_sample", "=", "int", "(", "len", "(", "self", ".", "img_idxes", ")", "*", "train_ratio", ")", "\n", "if", "train", ":", "\n", "                ", "self", ".", "img_idxes", "=", "self", ".", "img_idxes", "[", ":", "last_train_sample", "]", "\n", "", "else", ":", "\n", "                ", "self", ".", "img_idxes", "=", "self", ".", "img_idxes", "[", "last_train_sample", ":", "]", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "img_idxes", "=", "np", ".", "arange", "(", "0", ",", "len", "(", "self", ".", "image_list", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rongguangw_flow-scm.loaders.features.featuresDataset.label_idx": [[63, 72], ["sklearn.preprocessing.LabelEncoder", "features.featuresDataset.sex_dict.fit", "len", "sklearn.preprocessing.LabelEncoder", "features.featuresDataset.scanner_dict.fit", "len", "features.featuresDataset.data.Sex.tolist", "features.featuresDataset.data.Site.tolist"], "methods", ["None"], ["", "", "def", "label_idx", "(", "self", ")", ":", "\n", "        ", "self", ".", "sex_dict", "=", "LabelEncoder", "(", ")", "\n", "self", ".", "sex_dict", ".", "fit", "(", "self", ".", "data", ".", "Sex", ".", "tolist", "(", ")", ")", "\n", "self", ".", "sex_class", "=", "len", "(", "self", ".", "sex_dict", ".", "classes_", ")", "\n", "self", ".", "scanner_dict", "=", "LabelEncoder", "(", ")", "\n", "self", ".", "scanner_dict", ".", "fit", "(", "self", ".", "data", ".", "Site", ".", "tolist", "(", ")", ")", "\n", "self", ".", "scanner_class", "=", "len", "(", "self", ".", "scanner_dict", ".", "classes_", ")", "\n", "self", ".", "covariates_dict", "=", "{", "'sex'", ":", "self", ".", "sex_dict", ",", "\n", "'scanner'", ":", "self", ".", "scanner_dict", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.rongguangw_flow-scm.loaders.features.featuresDataset.flow_prepare": [[73, 108], ["sklearn.preprocessing.LabelEncoder", "sklearn.preprocessing.LabelEncoder.fit", "sklearn.preprocessing.LabelEncoder.transform", "collections.Counter", "torch.distributions.utils.probs_to_logits", "torch.as_tensor().log().mean", "torch.as_tensor().log().std", "features.featuresDataset.scanner_dict.transform", "collections.Counter", "torch.distributions.utils.probs_to_logits", "range", "torch.as_tensor().mean", "torch.as_tensor().mean", "features.featuresDataset.data.Sex.tolist", "features.featuresDataset.data.Sex.tolist", "torch.as_tensor", "features.featuresDataset.data.Site.tolist", "torch.as_tensor", "len", "torch.as_tensor().log().mean", "mean_list.append", "torch.as_tensor().log().std", "std_list.append", "torch.distributions.utils.probs_to_logits.unsqueeze().float", "torch.as_tensor().log().mean.float", "torch.as_tensor().log().std.float", "torch.distributions.utils.probs_to_logits.unsqueeze().float", "torch.as_tensor().mean.float", "torch.as_tensor().mean.float", "sum", "collections.Counter.items", "torch.as_tensor().log", "torch.as_tensor().log", "sum", "collections.Counter.items", "torch.as_tensor", "torch.as_tensor", "collections.Counter.values", "collections.Counter.values", "torch.as_tensor().log", "torch.as_tensor().log", "torch.distributions.utils.probs_to_logits.unsqueeze", "torch.distributions.utils.probs_to_logits.unsqueeze", "torch.as_tensor", "torch.as_tensor", "math.isnan", "math.isinf", "math.isnan", "math.isinf", "features.featuresDataset.data.Age.to_numpy", "features.featuresDataset.data.Age.to_numpy", "torch.as_tensor", "torch.as_tensor", "features.featuresDataset.data[].to_numpy", "features.featuresDataset.data[].to_numpy"], "methods", ["None"], ["", "def", "flow_prepare", "(", "self", ")", ":", "\n", "# sex", "\n", "        ", "sex_dict", "=", "LabelEncoder", "(", ")", "\n", "sex_dict", ".", "fit", "(", "self", ".", "data", ".", "Sex", ".", "tolist", "(", ")", ")", "\n", "sex", "=", "sex_dict", ".", "transform", "(", "self", ".", "data", ".", "Sex", ".", "tolist", "(", ")", ")", "\n", "sex_counts", "=", "Counter", "(", "sex", ")", "\n", "sex_mass", "=", "[", "v", "/", "sum", "(", "sex_counts", ".", "values", "(", ")", ")", "for", "k", ",", "v", "in", "sex_counts", ".", "items", "(", ")", "]", "\n", "sex_logits", "=", "probs_to_logits", "(", "torch", ".", "as_tensor", "(", "sex_mass", ")", ",", "is_binary", "=", "False", ")", "\n", "# age", "\n", "age_mean", "=", "torch", ".", "as_tensor", "(", "self", ".", "data", ".", "Age", ".", "to_numpy", "(", ")", ")", ".", "log", "(", ")", ".", "mean", "(", ")", "\n", "age_std", "=", "torch", ".", "as_tensor", "(", "self", ".", "data", ".", "Age", ".", "to_numpy", "(", ")", ")", ".", "log", "(", ")", ".", "std", "(", ")", "\n", "# scanner", "\n", "scanner", "=", "self", ".", "scanner_dict", ".", "transform", "(", "self", ".", "data", ".", "Site", ".", "tolist", "(", ")", ")", "\n", "scanner_counts", "=", "Counter", "(", "scanner", ")", "\n", "scanner_mass", "=", "[", "v", "/", "sum", "(", "scanner_counts", ".", "values", "(", ")", ")", "for", "k", ",", "v", "in", "scanner_counts", ".", "items", "(", ")", "]", "\n", "scanner_logits", "=", "probs_to_logits", "(", "torch", ".", "as_tensor", "(", "scanner_mass", ")", ",", "is_binary", "=", "False", ")", "\n", "# roi", "\n", "mean_list", ",", "std_list", "=", "[", "]", ",", "[", "]", "\n", "n", "=", "len", "(", "self", ".", "data", ".", "columns", ")", "-", "self", ".", "feature_dim", "\n", "for", "i", "in", "range", "(", "self", ".", "feature_dim", ")", ":", "\n", "            ", "mean", "=", "torch", ".", "as_tensor", "(", "self", ".", "data", "[", "self", ".", "data", ".", "columns", "[", "n", "+", "i", "]", "]", ".", "to_numpy", "(", ")", ")", ".", "log", "(", ")", ".", "mean", "(", ")", "\n", "mean_list", ".", "append", "(", "mean", ")", "\n", "std", "=", "torch", ".", "as_tensor", "(", "self", ".", "data", "[", "self", ".", "data", ".", "columns", "[", "n", "+", "i", "]", "]", ".", "to_numpy", "(", ")", ")", ".", "log", "(", ")", ".", "std", "(", ")", "\n", "std_list", ".", "append", "(", "std", ")", "\n", "", "filtered_mean", "=", "[", "x", "for", "x", "in", "mean_list", "if", "not", "isnan", "(", "x", ")", "and", "not", "isinf", "(", "x", ")", "]", "\n", "filtered_std", "=", "[", "x", "for", "x", "in", "std_list", "if", "not", "isnan", "(", "x", ")", "and", "not", "isinf", "(", "x", ")", "]", "\n", "roi_mean", "=", "torch", ".", "as_tensor", "(", "filtered_mean", ")", ".", "mean", "(", ")", "\n", "roi_std", "=", "torch", ".", "as_tensor", "(", "filtered_std", ")", ".", "mean", "(", ")", "\n", "\n", "self", ".", "flow_dict", "=", "{", "'sex_logits'", ":", "sex_logits", ".", "unsqueeze", "(", "0", ")", ".", "float", "(", ")", ",", "\n", "'age_mean'", ":", "age_mean", ".", "float", "(", ")", ",", "\n", "'age_std'", ":", "age_std", ".", "float", "(", ")", ",", "\n", "'scanner_logits'", ":", "scanner_logits", ".", "unsqueeze", "(", "0", ")", ".", "float", "(", ")", ",", "\n", "'roi_mean'", ":", "roi_mean", ".", "float", "(", ")", ",", "\n", "'roi_std'", ":", "roi_std", ".", "float", "(", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.rongguangw_flow-scm.loaders.features.featuresDataset.zScoreNorm": [[109, 116], ["numpy.max", "numpy.std", "numpy.min", "numpy.max", "numpy.min", "numpy.min", "numpy.mean"], "methods", ["None"], ["", "def", "zScoreNorm", "(", "self", ",", "img", ",", "min_max", "=", "True", ")", ":", "\n", "        ", "if", "min_max", ":", "\n", "            ", "res", "=", "(", "img", "-", "np", ".", "min", "(", "img", ")", ")", "/", "(", "np", ".", "max", "(", "img", ")", "-", "np", ".", "min", "(", "img", ")", ")", "\n", "", "else", ":", "\n", "            ", "res", "=", "(", "img", "-", "np", ".", "min", "(", "img", ")", ")", "/", "np", ".", "max", "(", "img", ")", "\n", "res", "=", "(", "res", "*", "1.0", "-", "np", ".", "mean", "(", "res", ")", ")", "/", "np", ".", "std", "(", "res", ")", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.rongguangw_flow-scm.loaders.features.featuresDataset.__len__": [[117, 119], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "img_idxes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rongguangw_flow-scm.loaders.features.featuresDataset.__getitem__": [[120, 138], ["torch.from_numpy().float", "torch.tensor().float", "torch.tensor().unsqueeze().float", "torch.tensor().float", "features.featuresDataset.zScoreNorm", "torch.from_numpy", "torch.tensor", "torch.tensor().unsqueeze", "torch.tensor", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.rongguangw_flow-scm.loaders.features.featuresDataset.zScoreNorm"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "img_idx", "=", "self", ".", "img_idxes", "[", "index", "]", "\n", "img_info", "=", "self", ".", "image_list", "[", "img_idx", "]", "\n", "img", "=", "img_info", "[", "'image'", "]", "\n", "\n", "if", "self", ".", "zscore", ":", "\n", "            ", "img", "=", "self", ".", "zScoreNorm", "(", "img", ")", "\n", "\n", "", "id", "=", "img_info", "[", "'image_id'", "]", "\n", "img", "=", "torch", ".", "from_numpy", "(", "img", ")", ".", "float", "(", ")", "\n", "sex", "=", "torch", ".", "tensor", "(", "img_info", "[", "'sex'", "]", ")", ".", "float", "(", ")", "\n", "age", "=", "torch", ".", "tensor", "(", "img_info", "[", "'age'", "]", ")", ".", "unsqueeze", "(", "-", "1", ")", ".", "float", "(", ")", "\n", "scanner", "=", "torch", ".", "tensor", "(", "img_info", "[", "'scanner'", "]", ")", ".", "float", "(", ")", "\n", "\n", "if", "self", ".", "inference", ":", "\n", "            ", "return", "img", ",", "age", ",", "sex", ",", "scanner", ",", "id", "\n", "", "else", ":", "\n", "            ", "return", "img", ",", "age", ",", "sex", ",", "scanner", "\n", "\n"]], "home.repos.pwc.inspect_result.rongguangw_flow-scm.loaders.features.get_features_dataset": [[140, 161], ["features.featuresDataset", "features.featuresDataset", "features.featuresDataset"], "function", ["None"], ["", "", "", "def", "get_features_dataset", "(", "\n", "filename", ",", "\n", "feature_dim", "=", "145", ",", "\n", "inference", "=", "False", ",", "\n", "train_ratio", "=", "0.8", ",", "\n", "random_seed", "=", "42", ",", "\n", "zscore", "=", "True", "\n", ")", ":", "\n", "\n", "    ", "if", "not", "inference", ":", "\n", "        ", "dataset_train", "=", "featuresDataset", "(", "train", "=", "True", ",", "filename", "=", "filename", ",", "feature_dim", "=", "feature_dim", ",", "\n", "train_ratio", "=", "train_ratio", ",", "random_seed", "=", "random_seed", ",", "zscore", "=", "zscore", ")", "\n", "dataset_test", "=", "featuresDataset", "(", "train", "=", "False", ",", "filename", "=", "filename", ",", "feature_dim", "=", "feature_dim", ",", "\n", "train_ratio", "=", "train_ratio", ",", "random_seed", "=", "random_seed", ",", "zscore", "=", "zscore", ")", "\n", "\n", "return", "dataset_train", ",", "dataset_test", "\n", "", "else", ":", "\n", "        ", "dataset", "=", "featuresDataset", "(", "inference", "=", "True", ",", "filename", "=", "filename", ",", "feature_dim", "=", "feature_dim", ",", "\n", "train_ratio", "=", "train_ratio", ",", "random_seed", "=", "random_seed", ",", "zscore", "=", "zscore", ")", "\n", "\n", "return", "dataset", "\n", "", "", ""]], "home.repos.pwc.inspect_result.rongguangw_flow-scm.models.transforms.ConditionalAffineTransform.__init__": [[11, 16], ["pyro.distributions.conditional.ConditionalTransformModule.__init__"], "methods", ["home.repos.pwc.inspect_result.rongguangw_flow-scm.models.nfs.ConditionalSCM.__init__"], ["    ", "def", "__init__", "(", "self", ",", "context_nn", ",", "event_dim", "=", "0", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n", "self", ".", "event_dim", "=", "event_dim", "\n", "self", ".", "context_nn", "=", "context_nn", "\n", "\n"]], "home.repos.pwc.inspect_result.rongguangw_flow-scm.models.transforms.ConditionalAffineTransform.condition": [[17, 23], ["torch.distributions.transforms.ConditionalAffineTransform.context_nn", "torch.exp", "torch.distributions.transforms.AffineTransform"], "methods", ["None"], ["", "def", "condition", "(", "self", ",", "context", ")", ":", "\n", "        ", "loc", ",", "log_scale", "=", "self", ".", "context_nn", "(", "context", ")", "\n", "scale", "=", "torch", ".", "exp", "(", "log_scale", ")", "\n", "\n", "ac", "=", "transforms", ".", "AffineTransform", "(", "loc", ",", "scale", ",", "event_dim", "=", "self", ".", "event_dim", ")", "\n", "return", "ac", "\n", "\n"]], "home.repos.pwc.inspect_result.rongguangw_flow-scm.models.transforms.spline_autoregressive": [[25, 55], ["pyro.nn.AutoRegressiveNN", "pyro.distributions.transforms.SplineAutoregressive"], "function", ["None"], ["", "", "def", "spline_autoregressive", "(", "input_dim", ",", "hidden_dims", "=", "None", ",", "count_bins", "=", "8", ",", "bound", "=", "3.0", ",", "order", "=", "'linear'", ")", ":", "\n", "    ", "r\"\"\"\n    A helper function to create an\n    :class:`~pyro.distributions.transforms.SplineAutoregressive` object that takes\n    care of constructing an autoregressive network with the correct input/output\n    dimensions.\n    :param input_dim: Dimension of input variable\n    :type input_dim: int\n    :param hidden_dims: The desired hidden dimensions of the autoregressive network.\n        Defaults to using [3*input_dim + 1]\n    :type hidden_dims: list[int]\n    :param count_bins: The number of segments comprising the spline.\n    :type count_bins: int\n    :param bound: The quantity :math:`K` determining the bounding box,\n        :math:`[-K,K]\\times[-K,K]`, of the spline.\n    :type bound: float\n    :param order: One of ['linear', 'quadratic'] specifying the order of the spline.\n    :type order: string\n    \"\"\"", "\n", "\n", "if", "hidden_dims", "is", "None", ":", "\n", "        ", "hidden_dims", "=", "[", "input_dim", "*", "10", ",", "input_dim", "*", "10", "]", "\n", "\n", "", "if", "order", "==", "'linear'", ":", "\n", "        ", "param_dims", "=", "[", "count_bins", ",", "count_bins", ",", "count_bins", "-", "1", ",", "count_bins", "]", "\n", "", "elif", "order", "==", "'quadratic'", ":", "\n", "        ", "param_dims", "=", "[", "count_bins", ",", "count_bins", ",", "count_bins", "-", "1", "]", "\n", "\n", "", "arn", "=", "AutoRegressiveNN", "(", "input_dim", ",", "hidden_dims", ",", "param_dims", "=", "param_dims", ")", "\n", "return", "SplineAutoregressive", "(", "input_dim", ",", "arn", ",", "count_bins", "=", "count_bins", ",", "bound", "=", "bound", ",", "order", "=", "order", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rongguangw_flow-scm.models.transforms.conditional_spline_autoregressive": [[57, 89], ["pyro.nn.ConditionalAutoRegressiveNN", "pyro.distributions.transforms.ConditionalSplineAutoregressive"], "function", ["None"], ["", "def", "conditional_spline_autoregressive", "(", "input_dim", ",", "context_dim", ",", "hidden_dims", "=", "None", ",", "count_bins", "=", "8", ",", "bound", "=", "3.0", ",", "order", "=", "'linear'", ")", ":", "\n", "    ", "r\"\"\"\n    A helper function to create a\n    :class:`~pyro.distributions.transforms.ConditionalSplineAutoregressive` object\n    that takes care of constructing an autoregressive network with the correct\n    input/output dimensions.\n    :param input_dim: Dimension of input variable\n    :type input_dim: int\n    :param context_dim: Dimension of context variable\n    :type context_dim: int\n    :param hidden_dims: The desired hidden dimensions of the autoregressive network.\n        Defaults to using [input_dim * 10, input_dim * 10]\n    :type hidden_dims: list[int]\n    :param count_bins: The number of segments comprising the spline.\n    :type count_bins: int\n    :param bound: The quantity :math:`K` determining the bounding box,\n        :math:`[-K,K]\\times[-K,K]`, of the spline.\n    :type bound: float\n    :param order: One of ['linear', 'quadratic'] specifying the order of the spline.\n    :type order: string\n    \"\"\"", "\n", "\n", "if", "hidden_dims", "is", "None", ":", "\n", "        ", "hidden_dims", "=", "[", "input_dim", "*", "10", ",", "input_dim", "*", "10", "]", "\n", "\n", "", "if", "order", "==", "'linear'", ":", "\n", "        ", "param_dims", "=", "[", "count_bins", ",", "count_bins", ",", "count_bins", "-", "1", ",", "count_bins", "]", "\n", "", "elif", "order", "==", "'quadratic'", ":", "\n", "        ", "param_dims", "=", "[", "count_bins", ",", "count_bins", ",", "count_bins", "-", "1", "]", "\n", "\n", "", "arn", "=", "ConditionalAutoRegressiveNN", "(", "input_dim", ",", "context_dim", ",", "hidden_dims", ",", "param_dims", "=", "param_dims", ")", "\n", "return", "ConditionalSplineAutoregressive", "(", "input_dim", ",", "arn", ",", "count_bins", "=", "count_bins", ",", "bound", "=", "bound", ",", "order", "=", "order", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.rongguangw_flow-scm.models.nfs.ConditionalSCM.__init__": [[18, 83], ["pyro.nn.PyroModule.__init__", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "nfs.ConditionalSCM.register_buffer", "nfs.ConditionalSCM.register_buffer", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "nfs.ConditionalSCM.register_buffer", "nfs.ConditionalSCM.register_buffer", "pyro.distributions.transforms.Spline", "nfs.ConditionalSCM.flow_dict[].cuda", "nfs.ConditionalSCM.flow_dict[].cuda", "pyro.distributions.transforms.AffineTransform", "pyro.distributions.transforms.ComposeTransform", "pyro.distributions.transforms.ComposeTransform", "nfs.ConditionalSCM.flow_dict[].cuda", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "nfs.ConditionalSCM.flow_dict[].cuda", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "pyro.nn.DenseNN", "transforms.ConditionalAffineTransform", "nfs.ConditionalSCM.flow_dict[].cuda", "nfs.ConditionalSCM.flow_dict[].cuda", "pyro.distributions.transforms.AffineTransform", "pyro.distributions.transforms.ComposeTransform", "pyro.distributions.torch_transform.ComposeTransformModule", "nfs.ConditionalSCM.age_flow_lognorm_loc.item", "nfs.ConditionalSCM.age_flow_lognorm_scale.item", "pyro.distributions.transforms.ExpTransform", "pyro.distributions.transforms.conditional_spline", "torch.nn.LeakyReLU", "torch.nn.LeakyReLU", "torch.nn.LeakyReLU", "torch.nn.LeakyReLU", "transforms.conditional_spline_autoregressive", "nfs.ConditionalSCM.roi_flow_lognorm_loc.item", "nfs.ConditionalSCM.roi_flow_lognorm_scale.item", "pyro.distributions.transforms.ExpTransform"], "methods", ["home.repos.pwc.inspect_result.rongguangw_flow-scm.models.nfs.ConditionalSCM.__init__", "home.repos.pwc.inspect_result.rongguangw_flow-scm.models.transforms.conditional_spline_autoregressive"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "age_dim", "=", "1", ",", "\n", "sex_dim", "=", "1", ",", "\n", "scanner_dim", "=", "6", ",", "\n", "context_dim", "=", "3", ",", "\n", "roi_dim", "=", "145", ",", "\n", "flow_dict", "=", "None", ",", "\n", "flow_type", "=", "'affine'", ",", "\n", "spline_bins", "=", "8", ",", "\n", "spline_order", "=", "'linear'", ",", "\n", "spline_hidden_dims", "=", "None", ",", "\n", "normalize", "=", "False", "\n", ")", ":", "\n", "        ", "super", "(", "ConditionalSCM", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "sex_dim", "=", "sex_dim", "\n", "self", ".", "age_dim", "=", "age_dim", "\n", "self", ".", "roi_dim", "=", "roi_dim", "\n", "self", ".", "scanner_dim", "=", "scanner_dim", "\n", "self", ".", "context_dim", "=", "context_dim", "\n", "self", ".", "flow_dict", "=", "flow_dict", "\n", "self", ".", "flow_type", "=", "flow_type", "\n", "self", ".", "spline_bins", "=", "spline_bins", "\n", "self", ".", "spline_order", "=", "spline_order", "\n", "self", ".", "spline_hidden_dims", "=", "spline_hidden_dims", "\n", "self", ".", "normalize", "=", "normalize", "\n", "\n", "# sex prior", "\n", "self", ".", "sex_logits", "=", "torch", ".", "nn", ".", "Parameter", "(", "self", ".", "flow_dict", "[", "'sex_logits'", "]", ".", "cuda", "(", ")", ")", "\n", "# age priors", "\n", "self", ".", "age_base_loc", "=", "torch", ".", "zeros", "(", "[", "self", ".", "age_dim", ",", "]", ",", "device", "=", "'cuda'", ",", "requires_grad", "=", "False", ")", "\n", "self", ".", "age_base_scale", "=", "torch", ".", "ones", "(", "[", "self", ".", "age_dim", ",", "]", ",", "device", "=", "'cuda'", ",", "requires_grad", "=", "False", ")", "\n", "self", ".", "register_buffer", "(", "'age_flow_lognorm_loc'", ",", "torch", ".", "zeros", "(", "[", "]", ",", "requires_grad", "=", "False", ")", ")", "\n", "self", ".", "register_buffer", "(", "'age_flow_lognorm_scale'", ",", "torch", ".", "ones", "(", "[", "]", ",", "requires_grad", "=", "False", ")", ")", "\n", "# scanner prior", "\n", "self", ".", "scanner_logits", "=", "torch", ".", "nn", ".", "Parameter", "(", "self", ".", "flow_dict", "[", "'scanner_logits'", "]", ".", "cuda", "(", ")", ")", "\n", "# roi priors", "\n", "self", ".", "roi_base_loc", "=", "torch", ".", "zeros", "(", "[", "self", ".", "roi_dim", ",", "]", ",", "device", "=", "'cuda'", ",", "requires_grad", "=", "False", ")", "\n", "self", ".", "roi_base_scale", "=", "torch", ".", "ones", "(", "[", "self", ".", "roi_dim", ",", "]", ",", "device", "=", "'cuda'", ",", "requires_grad", "=", "False", ")", "\n", "self", ".", "register_buffer", "(", "'roi_flow_lognorm_loc'", ",", "torch", ".", "zeros", "(", "[", "]", ",", "requires_grad", "=", "False", ")", ")", "\n", "self", ".", "register_buffer", "(", "'roi_flow_lognorm_scale'", ",", "torch", ".", "ones", "(", "[", "]", ",", "requires_grad", "=", "False", ")", ")", "\n", "\n", "# age flows", "\n", "self", ".", "age_flow_component", "=", "Spline", "(", "self", ".", "age_dim", ",", "count_bins", "=", "self", ".", "spline_bins", ")", "\n", "self", ".", "age_flow_lognorm_loc", "=", "self", ".", "flow_dict", "[", "'age_mean'", "]", ".", "cuda", "(", ")", "\n", "self", ".", "age_flow_lognorm_scale", "=", "self", ".", "flow_dict", "[", "'age_std'", "]", ".", "cuda", "(", ")", "\n", "self", ".", "age_flow_normalize", "=", "AffineTransform", "(", "loc", "=", "self", ".", "age_flow_lognorm_loc", ".", "item", "(", ")", ",", "scale", "=", "self", ".", "age_flow_lognorm_scale", ".", "item", "(", ")", ")", "\n", "self", ".", "age_flow_constraint", "=", "ComposeTransform", "(", "[", "self", ".", "age_flow_normalize", ",", "ExpTransform", "(", ")", "]", ")", "\n", "self", ".", "age_flow_transforms", "=", "ComposeTransform", "(", "[", "self", ".", "age_flow_component", ",", "self", ".", "age_flow_constraint", "]", ")", "\n", "# roi flows", "\n", "if", "self", ".", "flow_type", "==", "'affine'", ":", "\n", "            ", "roi_net", "=", "DenseNN", "(", "self", ".", "context_dim", ",", "[", "8", ",", "16", "]", ",", "param_dims", "=", "[", "1", ",", "1", "]", ",", "nonlinearity", "=", "torch", ".", "nn", ".", "LeakyReLU", "(", ".1", ")", ")", "\n", "self", ".", "roi_flow_component", "=", "ConditionalAffineTransform", "(", "context_nn", "=", "roi_net", ",", "event_dim", "=", "0", ")", "\n", "", "elif", "self", ".", "flow_type", "==", "'spline'", ":", "\n", "            ", "self", ".", "roi_flow_component", "=", "conditional_spline", "(", "self", ".", "roi_dim", ",", "context_dim", "=", "self", ".", "context_dim", ",", "count_bins", "=", "self", ".", "spline_bins", ",", "order", "=", "self", ".", "spline_order", ")", "\n", "", "elif", "self", ".", "flow_type", "==", "'autoregressive'", ":", "\n", "            ", "self", ".", "roi_flow_component", "=", "conditional_spline_autoregressive", "(", "self", ".", "roi_dim", ",", "context_dim", "=", "self", ".", "context_dim", ",", "hidden_dims", "=", "self", ".", "spline_hidden_dims", ",", "count_bins", "=", "self", ".", "spline_bins", ",", "order", "=", "self", ".", "spline_order", ")", "\n", "", "if", "self", ".", "normalize", ":", "\n", "            ", "self", ".", "roi_flow_lognorm_loc", "=", "self", ".", "flow_dict", "[", "'roi_mean'", "]", ".", "cuda", "(", ")", "\n", "self", ".", "roi_flow_lognorm_scale", "=", "self", ".", "flow_dict", "[", "'roi_std'", "]", ".", "cuda", "(", ")", "\n", "self", ".", "roi_flow_normalize", "=", "AffineTransform", "(", "loc", "=", "self", ".", "roi_flow_lognorm_loc", ".", "item", "(", ")", ",", "scale", "=", "self", ".", "roi_flow_lognorm_scale", ".", "item", "(", ")", ")", "\n", "self", ".", "roi_flow_constraint", "=", "ComposeTransform", "(", "[", "self", ".", "roi_flow_normalize", ",", "ExpTransform", "(", ")", "]", ")", "\n", "self", ".", "roi_flow_transforms", "=", "[", "self", ".", "roi_flow_component", ",", "self", ".", "roi_flow_constraint", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "roi_flow_transforms", "=", "ComposeTransformModule", "(", "[", "self", ".", "roi_flow_component", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rongguangw_flow-scm.models.nfs.ConditionalSCM.pgm_model": [[84, 101], ["pyro.distributions.Categorical().to_event", "pyro.sample", "pyro.distributions.Normal().to_event", "pyro.distributions.TransformedDistribution", "pyro.sample", "nfs.ConditionalSCM.age_flow_constraint.inv", "pyro.distributions.Categorical().to_event", "pyro.sample", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "pyro.distributions.Normal().to_event", "pyro.distributions.conditional.ConditionalTransformedDistribution().condition", "pyro.sample", "pyro.distributions.Categorical", "pyro.distributions.Normal", "pyro.distributions.Categorical", "pyro.distributions.Normal", "pyro.distributions.conditional.ConditionalTransformedDistribution"], "methods", ["home.repos.pwc.inspect_result.rongguangw_flow-scm.models.nfs.ConditionalSCM.sample", "home.repos.pwc.inspect_result.rongguangw_flow-scm.models.nfs.ConditionalSCM.sample", "home.repos.pwc.inspect_result.rongguangw_flow-scm.models.nfs.ConditionalSCM.sample", "home.repos.pwc.inspect_result.rongguangw_flow-scm.models.transforms.ConditionalAffineTransform.condition", "home.repos.pwc.inspect_result.rongguangw_flow-scm.models.nfs.ConditionalSCM.sample"], ["", "", "def", "pgm_model", "(", "self", ")", ":", "\n", "# sex", "\n", "        ", "self", ".", "sex_dist", "=", "Categorical", "(", "logits", "=", "self", ".", "sex_logits", ")", ".", "to_event", "(", "1", ")", "\n", "self", ".", "sex", "=", "pyro", ".", "sample", "(", "'sex'", ",", "self", ".", "sex_dist", ")", "\n", "# age", "\n", "self", ".", "age_base_dist", "=", "Normal", "(", "self", ".", "age_base_loc", ",", "self", ".", "age_base_scale", ")", ".", "to_event", "(", "1", ")", "\n", "self", ".", "age_dist", "=", "TransformedDistribution", "(", "self", ".", "age_base_dist", ",", "self", ".", "age_flow_transforms", ")", "\n", "self", ".", "age", "=", "pyro", ".", "sample", "(", "'age'", ",", "self", ".", "age_dist", ")", "\n", "age_", "=", "self", ".", "age_flow_constraint", ".", "inv", "(", "self", ".", "age", ")", "\n", "# scanner", "\n", "self", ".", "scanner_dist", "=", "Categorical", "(", "logits", "=", "self", ".", "scanner_logits", ")", ".", "to_event", "(", "1", ")", "\n", "self", ".", "scanner", "=", "pyro", ".", "sample", "(", "'scanner'", ",", "self", ".", "scanner_dist", ")", "\n", "# roi", "\n", "context", "=", "torch", ".", "cat", "(", "[", "self", ".", "sex", ",", "age_", ",", "self", ".", "scanner", "]", ",", "-", "1", ")", "\n", "self", ".", "roi_base_dist", "=", "Normal", "(", "self", ".", "roi_base_loc", ",", "self", ".", "roi_base_scale", ")", ".", "to_event", "(", "1", ")", "\n", "self", ".", "roi_dist", "=", "ConditionalTransformedDistribution", "(", "self", ".", "roi_base_dist", ",", "self", ".", "roi_flow_transforms", ")", ".", "condition", "(", "context", ")", "\n", "self", ".", "roi", "=", "pyro", ".", "sample", "(", "'roi'", ",", "self", ".", "roi_dist", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rongguangw_flow-scm.models.nfs.ConditionalSCM.forward": [[102, 109], ["nfs.ConditionalSCM.pgm_model", "nfs.ConditionalSCM.sex_dist.log_prob", "nfs.ConditionalSCM.age_dist.log_prob", "nfs.ConditionalSCM.scanner_dist.log_prob", "nfs.ConditionalSCM.roi_dist.log_prob"], "methods", ["home.repos.pwc.inspect_result.rongguangw_flow-scm.models.nfs.ConditionalSCM.pgm_model"], ["", "def", "forward", "(", "self", ",", "roi", ",", "sex", ",", "age", ",", "scanner", ")", ":", "\n", "        ", "self", ".", "pgm_model", "(", ")", "\n", "sex_logp", "=", "self", ".", "sex_dist", ".", "log_prob", "(", "sex", ")", "\n", "age_logp", "=", "self", ".", "age_dist", ".", "log_prob", "(", "age", ")", "\n", "scanner_logp", "=", "self", ".", "scanner_dist", ".", "log_prob", "(", "scanner", ")", "\n", "roi_logp", "=", "self", ".", "roi_dist", ".", "log_prob", "(", "roi", ")", "\n", "return", "{", "'sex'", ":", "sex_logp", ",", "'age'", ":", "age_logp", ",", "'scanner'", ":", "scanner_logp", ",", "'roi'", ":", "roi_logp", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.rongguangw_flow-scm.models.nfs.ConditionalSCM.clear": [[110, 113], ["nfs.ConditionalSCM.age_dist.clear_cache", "nfs.ConditionalSCM.roi_dist.clear_cache"], "methods", ["None"], ["", "def", "clear", "(", "self", ")", ":", "\n", "        ", "self", ".", "age_dist", ".", "clear_cache", "(", ")", "\n", "self", ".", "roi_dist", ".", "clear_cache", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rongguangw_flow-scm.models.nfs.ConditionalSCM.model": [[114, 117], ["nfs.ConditionalSCM.pgm_model"], "methods", ["home.repos.pwc.inspect_result.rongguangw_flow-scm.models.nfs.ConditionalSCM.pgm_model"], ["", "def", "model", "(", "self", ")", ":", "\n", "        ", "self", ".", "pgm_model", "(", ")", "\n", "return", "self", ".", "sex", ",", "self", ".", "age", ",", "self", ".", "scanner", ",", "self", ".", "roi", "\n", "\n"]], "home.repos.pwc.inspect_result.rongguangw_flow-scm.models.nfs.ConditionalSCM.scm": [[118, 125], ["isinstance", "pyro.poutine.reparam", "pyro.infer.reparam.transform.TransformReparam"], "methods", ["None"], ["", "def", "scm", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "def", "config", "(", "msg", ")", ":", "\n", "            ", "if", "isinstance", "(", "msg", "[", "'fn'", "]", ",", "TransformedDistribution", ")", ":", "\n", "                ", "return", "TransformReparam", "(", ")", "\n", "", "else", ":", "\n", "                ", "return", "None", "\n", "", "", "return", "pyro", ".", "poutine", ".", "reparam", "(", "self", ".", "model", ",", "config", "=", "config", ")", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rongguangw_flow-scm.models.nfs.ConditionalSCM.sample": [[126, 130], ["pyro.plate", "nfs.ConditionalSCM.model"], "methods", ["home.repos.pwc.inspect_result.rongguangw_flow-scm.models.nfs.ConditionalSCM.model"], ["", "def", "sample", "(", "self", ",", "n_samples", "=", "1", ")", ":", "\n", "        ", "with", "pyro", ".", "plate", "(", "'observations'", ",", "n_samples", ")", ":", "\n", "            ", "samples", "=", "self", ".", "model", "(", ")", "\n", "", "return", "(", "*", "samples", ",", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rongguangw_flow-scm.models.nfs.ConditionalSCM.sample_scm": [[131, 135], ["pyro.plate", "nfs.ConditionalSCM.scm"], "methods", ["home.repos.pwc.inspect_result.rongguangw_flow-scm.models.nfs.ConditionalSCM.scm"], ["", "def", "sample_scm", "(", "self", ",", "n_samples", "=", "1", ")", ":", "\n", "        ", "with", "pyro", ".", "plate", "(", "'observations'", ",", "n_samples", ")", ":", "\n", "            ", "samples", "=", "self", ".", "scm", "(", ")", "\n", "", "return", "(", "*", "samples", ",", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rongguangw_flow-scm.models.nfs.ConditionalSCM.infer_exogeneous": [[136, 150], ["pyro.condition", "pyro.poutine.trace().get_trace", "pyro.poutine.trace().get_trace.nodes.items", "isinstance", "isinstance", "pyro.poutine.trace", "node.keys", "pyro.distributions.transforms.ComposeTransform().inv", "pyro.distributions.transforms.ComposeTransform"], "methods", ["home.repos.pwc.inspect_result.rongguangw_flow-scm.models.transforms.ConditionalAffineTransform.condition"], ["", "def", "infer_exogeneous", "(", "self", ",", "**", "obs", ")", ":", "\n", "        ", "cond_sample", "=", "pyro", ".", "condition", "(", "self", ".", "sample", ",", "data", "=", "obs", ")", "\n", "cond_trace", "=", "pyro", ".", "poutine", ".", "trace", "(", "cond_sample", ")", ".", "get_trace", "(", "obs", "[", "'roi'", "]", ".", "shape", "[", "0", "]", ")", "\n", "\n", "output", "=", "{", "}", "\n", "for", "name", ",", "node", "in", "cond_trace", ".", "nodes", ".", "items", "(", ")", ":", "\n", "            ", "if", "'fn'", "not", "in", "node", ".", "keys", "(", ")", ":", "\n", "                ", "continue", "\n", "", "fn", "=", "node", "[", "'fn'", "]", "\n", "if", "isinstance", "(", "fn", ",", "Independent", ")", ":", "\n", "                ", "fn", "=", "fn", ".", "base_dist", "\n", "", "if", "isinstance", "(", "fn", ",", "TransformedDistribution", ")", ":", "\n", "                ", "output", "[", "name", "+", "'_base'", "]", "=", "ComposeTransform", "(", "fn", ".", "transforms", ")", ".", "inv", "(", "node", "[", "'value'", "]", ")", "\n", "", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.rongguangw_flow-scm.models.nfs.ConditionalSCM.counterfactual": [[151, 163], ["range", "nfs.ConditionalSCM.infer_exogeneous", "condition.keys", "condition.keys", "pyro.poutine.do", "zip", "pyro.poutine.condition", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "zip", "torch.stack", "torch.stack", "torch.stack", "torch.stack"], "methods", ["home.repos.pwc.inspect_result.rongguangw_flow-scm.models.nfs.ConditionalSCM.infer_exogeneous", "home.repos.pwc.inspect_result.rongguangw_flow-scm.models.transforms.ConditionalAffineTransform.condition"], ["", "def", "counterfactual", "(", "self", ",", "obs", ",", "condition", ",", "num_particles", "=", "1", ")", ":", "\n", "        ", "counterfactuals", "=", "[", "]", "\n", "for", "_", "in", "range", "(", "num_particles", ")", ":", "\n", "            ", "exogeneous", "=", "self", ".", "infer_exogeneous", "(", "**", "obs", ")", "\n", "if", "'sex'", "not", "in", "condition", ".", "keys", "(", ")", ":", "\n", "                ", "exogeneous", "[", "'sex'", "]", "=", "obs", "[", "'sex'", "]", "\n", "", "if", "'scanner'", "not", "in", "condition", ".", "keys", "(", ")", ":", "\n", "                ", "exogeneous", "[", "'scanner'", "]", "=", "obs", "[", "'scanner'", "]", "\n", "\n", "", "counter", "=", "pyro", ".", "poutine", ".", "do", "(", "pyro", ".", "poutine", ".", "condition", "(", "self", ".", "sample_scm", ",", "data", "=", "exogeneous", ")", ",", "data", "=", "condition", ")", "(", "obs", "[", "'roi'", "]", ".", "shape", "[", "0", "]", ")", "\n", "counterfactuals", "+=", "[", "counter", "]", "\n", "", "return", "{", "k", ":", "v", "for", "k", ",", "v", "in", "zip", "(", "(", "'sex'", ",", "'age'", ",", "'scanner'", ",", "'roi'", ")", ",", "(", "torch", ".", "stack", "(", "c", ")", ".", "mean", "(", "0", ")", "for", "c", "in", "zip", "(", "*", "counterfactuals", ")", ")", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.rongguangw_flow-scm.models.nfs._conditionalscm": [[165, 169], ["nfs.ConditionalSCM"], "function", ["None"], ["", "", "def", "_conditionalscm", "(", "arch", ",", "flow_dict", ",", "scanner_dim", ",", "flow_type", ",", "bins", ",", "order", ")", ":", "\n", "    ", "model", "=", "ConditionalSCM", "(", "flow_dict", "=", "flow_dict", ",", "scanner_dim", "=", "scanner_dim", ",", "\n", "flow_type", "=", "flow_type", ",", "spline_bins", "=", "bins", ",", "spline_order", "=", "order", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.rongguangw_flow-scm.models.nfs.conditionalscm": [[170, 172], ["nfs._conditionalscm"], "function", ["home.repos.pwc.inspect_result.rongguangw_flow-scm.models.nfs._conditionalscm"], ["", "def", "conditionalscm", "(", "flow_dict", "=", "None", ",", "scanner_dim", "=", "6", ",", "flow_type", "=", "'affine'", ",", "bins", "=", "8", ",", "order", "=", "'linear'", ")", ":", "\n", "    ", "return", "_conditionalscm", "(", "'conditionalscm'", ",", "flow_dict", ",", "scanner_dim", ",", "flow_type", ",", "bins", ",", "order", ")", "\n", "", ""]]}