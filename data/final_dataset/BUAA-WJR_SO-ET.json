{"home.repos.pwc.inspect_result.BUAA-WJR_SO-ET.None.encodingTreeLearning.train": [[20, 37], ["model.train", "range", "model", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "criterion", "optimizer.zero_grad", "loss.detach().cpu().numpy.backward", "optimizer.step", "loss.detach().cpu().numpy.detach().cpu().numpy", "numpy.random.permutation", "len", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "loss.detach().cpu().numpy.detach().cpu", "loss.detach().cpu().numpy.detach"], "function", ["home.repos.pwc.inspect_result.BUAA-WJR_SO-ET.None.encodingTreeLearning.train"], ["def", "train", "(", "args", ",", "model", ",", "device", ",", "train_trees", ",", "optimizer", ")", ":", "\n", "    ", "model", ".", "train", "(", ")", "\n", "total_iters", "=", "args", ".", "iters_per_epoch", "\n", "loss_accum", "=", "0", "\n", "for", "pos", "in", "range", "(", "total_iters", ")", ":", "\n", "        ", "selected_idx", "=", "np", ".", "random", ".", "permutation", "(", "len", "(", "train_trees", ")", ")", "[", ":", "args", ".", "batch_size", "]", "\n", "batch_tree", "=", "[", "train_trees", "[", "idx", "]", "for", "idx", "in", "selected_idx", "]", "\n", "output", "=", "model", "(", "batch_tree", ")", "\n", "labels", "=", "torch", ".", "LongTensor", "(", "[", "tree", "[", "'label'", "]", "for", "tree", "in", "batch_tree", "]", ")", ".", "to", "(", "device", ")", "\n", "loss", "=", "criterion", "(", "output", ",", "labels", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "loss", "=", "loss", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "loss_accum", "+=", "loss", "\n", "", "average_loss", "=", "loss_accum", "/", "total_iters", "\n", "return", "average_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.BUAA-WJR_SO-ET.None.encodingTreeLearning.pass_data_iteratively": [[39, 49], ["model.eval", "numpy.arange", "range", "torch.cat", "torch.cat", "torch.cat", "len", "len", "output.append", "len", "model().detach", "model"], "function", ["None"], ["", "def", "pass_data_iteratively", "(", "model", ",", "trees", ",", "minibatch_size", "=", "64", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "output", "=", "[", "]", "\n", "idx", "=", "np", ".", "arange", "(", "len", "(", "trees", ")", ")", "\n", "for", "i", "in", "range", "(", "0", ",", "len", "(", "trees", ")", ",", "minibatch_size", ")", ":", "\n", "        ", "sampled_idx", "=", "idx", "[", "i", ":", "i", "+", "minibatch_size", "]", "\n", "if", "len", "(", "sampled_idx", ")", "==", "0", ":", "\n", "            ", "continue", "\n", "", "output", ".", "append", "(", "model", "(", "[", "trees", "[", "j", "]", "for", "j", "in", "sampled_idx", "]", ")", ".", "detach", "(", ")", ")", "\n", "", "return", "torch", ".", "cat", "(", "output", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BUAA-WJR_SO-ET.None.encodingTreeLearning.test": [[50, 65], ["model.eval", "encodingTreeLearning.pass_data_iteratively", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "pred.eq().sum().cpu().item", "encodingTreeLearning.pass_data_iteratively", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "pred.eq().sum().cpu().item", "pass_data_iteratively.max", "float", "pass_data_iteratively.max", "float", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "pred.eq().sum().cpu", "len", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "pred.eq().sum().cpu", "len", "pred.eq().sum", "pred.eq().sum", "pred.eq", "pred.eq", "torch.LongTensor().to.view_as", "torch.LongTensor().to.view_as"], "function", ["home.repos.pwc.inspect_result.BUAA-WJR_SO-ET.None.encodingTreeLearning.pass_data_iteratively", "home.repos.pwc.inspect_result.BUAA-WJR_SO-ET.None.encodingTreeLearning.pass_data_iteratively"], ["", "def", "test", "(", "args", ",", "model", ",", "device", ",", "train_trees", ",", "test_trees", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "\n", "output", "=", "pass_data_iteratively", "(", "model", ",", "train_trees", ")", "\n", "pred", "=", "output", ".", "max", "(", "1", ",", "keepdim", "=", "True", ")", "[", "1", "]", "\n", "labels", "=", "torch", ".", "LongTensor", "(", "[", "tree", "[", "'label'", "]", "for", "tree", "in", "train_trees", "]", ")", ".", "to", "(", "device", ")", "\n", "correct", "=", "pred", ".", "eq", "(", "labels", ".", "view_as", "(", "pred", ")", ")", ".", "sum", "(", ")", ".", "cpu", "(", ")", ".", "item", "(", ")", "\n", "acc_train", "=", "correct", "/", "float", "(", "len", "(", "train_trees", ")", ")", "\n", "\n", "output", "=", "pass_data_iteratively", "(", "model", ",", "test_trees", ")", "\n", "pred", "=", "output", ".", "max", "(", "1", ",", "keepdim", "=", "True", ")", "[", "1", "]", "\n", "labels", "=", "torch", ".", "LongTensor", "(", "[", "tree", "[", "'label'", "]", "for", "tree", "in", "test_trees", "]", ")", ".", "to", "(", "device", ")", "\n", "correct", "=", "pred", ".", "eq", "(", "labels", ".", "view_as", "(", "pred", ")", ")", ".", "sum", "(", ")", ".", "cpu", "(", ")", ".", "item", "(", ")", "\n", "acc_test", "=", "correct", "/", "float", "(", "len", "(", "test_trees", ")", ")", "\n", "return", "acc_train", ",", "acc_test", "\n", "\n"]], "home.repos.pwc.inspect_result.BUAA-WJR_SO-ET.None.encodingTreeLearning.main": [[66, 103], ["random.seed", "numpy.random.seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "len", "tree_data.separate_data", "tcn().to", "torch.Adam", "torch.lr_scheduler.StepLR", "range", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "tree_data.load_tree", "set", "tcn().to.parameters", "encodingTreeLearning.train", "encodingTreeLearning.test", "optim.lr_scheduler.StepLR.step", "accs.append", "tcn", "str"], "function", ["home.repos.pwc.inspect_result.BUAA-WJR_SO-ET.None.tree_data.separate_data", "home.repos.pwc.inspect_result.BUAA-WJR_SO-ET.None.tree_data.load_tree", "home.repos.pwc.inspect_result.BUAA-WJR_SO-ET.None.encodingTreeLearning.train", "home.repos.pwc.inspect_result.BUAA-WJR_SO-ET.None.encodingTreeLearning.test"], ["", "def", "main", "(", "args", ")", ":", "\n", "#set up seeds and gpu device", "\n", "    ", "random", ".", "seed", "(", "0", ")", "\n", "np", ".", "random", ".", "seed", "(", "0", ")", "\n", "torch", ".", "manual_seed", "(", "0", ")", "\n", "device", "=", "torch", ".", "device", "(", "\"cuda:\"", "+", "str", "(", "args", ".", "device", ")", ")", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "torch", ".", "device", "(", "\"cpu\"", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "torch", ".", "cuda", ".", "manual_seed_all", "(", "0", ")", "\n", "\n", "", "global", "global_data", "\n", "if", "global_data", "is", "None", ":", "\n", "        ", "global_data", "=", "load_tree", "(", "args", ".", "dataset", ",", "args", ".", "tree_depth", ",", "args", ".", "global_degree", ")", "\n", "", "trees", "=", "global_data", "\n", "num_classes", "=", "len", "(", "set", "(", "[", "t", "[", "'label'", "]", "for", "t", "in", "trees", "]", ")", ")", "\n", "\n", "train_trees", ",", "test_trees", "=", "separate_data", "(", "trees", ",", "args", ".", "seed", ",", "args", ".", "fold_idx", ")", "\n", "\n", "tcn", "=", "TreeCNN", "\n", "model", "=", "tcn", "(", "args", ".", "tree_depth", ",", "\n", "args", ".", "num_mlp_layers", ",", "\n", "train_trees", "[", "0", "]", "[", "'node_features'", "]", ".", "shape", "[", "1", "]", ",", "\n", "args", ".", "hidden_dim", ",", "\n", "num_classes", ",", "\n", "args", ".", "final_dropout", ",", "\n", "args", ".", "tree_pooling_type", ",", "\n", "device", "\n", ")", ".", "to", "(", "device", ")", "\n", "\n", "optimizer", "=", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "learning_rate", ")", "\n", "scheduler", "=", "optim", ".", "lr_scheduler", ".", "StepLR", "(", "optimizer", ",", "step_size", "=", "50", ",", "gamma", "=", "0.5", ")", "\n", "accs", "=", "[", "]", "\n", "for", "epoch", "in", "range", "(", "args", ".", "epochs", ")", ":", "\n", "        ", "avg_loss", "=", "train", "(", "args", ",", "model", ",", "device", ",", "train_trees", ",", "optimizer", ")", "\n", "acc_train", ",", "acc_test", "=", "test", "(", "args", ",", "model", ",", "device", ",", "train_trees", ",", "test_trees", ")", "\n", "scheduler", ".", "step", "(", ")", "\n", "accs", ".", "append", "(", "acc_test", ")", "\n", "", "return", "accs", "\n", "\n"]], "home.repos.pwc.inspect_result.BUAA-WJR_SO-ET.None.treeKernel.tuple_int_sort": [[22, 29], ["type", "type", "isinstance", "isinstance", "isinstance", "isinstance"], "function", ["None"], ["def", "tuple_int_sort", "(", "a", ",", "b", ")", ":", "\n", "    ", "if", "type", "(", "a", ")", "==", "type", "(", "b", ")", ":", "\n", "        ", "return", "a", ">", "b", "\n", "", "elif", "isinstance", "(", "a", ",", "tuple", ")", "and", "isinstance", "(", "b", ",", "int", ")", ":", "\n", "        ", "return", "0", "\n", "", "elif", "isinstance", "(", "a", ",", "int", ")", "and", "isinstance", "(", "b", ",", "tuple", ")", ":", "\n", "        ", "return", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.BUAA-WJR_SO-ET.None.treeKernel.tree_tags": [[31, 53], ["graph[].items", "n.get", "child_tags.sort", "map", "len", "int", "graph[].nodes[].get", "int", "graph[].nodes[].get"], "function", ["None"], ["", "", "def", "tree_tags", "(", "graph", ",", "depth", ",", "tagV", ")", ":", "\n", "    ", "global", "global_tags", "\n", "for", "i", ",", "n", "in", "graph", "[", "'tree'", "]", ".", "items", "(", ")", ":", "\n", "        ", "graphID", "=", "n", ".", "get", "(", "'graphID'", ",", "n", "[", "'ID'", "]", ")", "\n", "if", "n", "[", "'depth'", "]", "!=", "depth", ":", "\n", "            ", "continue", "\n", "", "if", "n", "[", "'depth'", "]", "==", "0", ":", "\n", "            ", "if", "tagV", "==", "0", ":", "# tag0: \u53f6\u5b50\u7ed3\u70b9\u76f4\u63a5\u4e3a0", "\n", "                ", "n", "[", "'tag0'", "]", "=", "0", "\n", "", "elif", "tagV", "==", "1", ":", "# tag1: \u4f7f\u7528\u6587\u4ef6\u91cc\u672c\u8eabtag", "\n", "                ", "n", "[", "'tag1'", "]", "=", "int", "(", "graph", "[", "'G'", "]", ".", "nodes", "[", "graphID", "]", ".", "get", "(", "'tag'", ",", "0", ")", ")", "\n", "", "elif", "tagV", "==", "2", ":", "# tag2: \u4f7f\u7528\u8282\u70b9\u7684\u5ea6", "\n", "                ", "n", "[", "'tag2'", "]", "=", "graph", "[", "'G'", "]", ".", "degree", "[", "graphID", "]", "\n", "", "elif", "tagV", "==", "3", ":", "\n", "                ", "n", "[", "'tag3'", "]", "=", "(", "int", "(", "graph", "[", "'G'", "]", ".", "nodes", "[", "graphID", "]", ".", "get", "(", "'tag'", ",", "0", ")", ")", ",", "graph", "[", "'G'", "]", ".", "degree", "[", "graphID", "]", ")", "\n", "", "continue", "\n", "", "child_tags", "=", "[", "graph", "[", "'tree'", "]", "[", "c", "]", "[", "'tag%s'", "%", "tagV", "]", "for", "c", "in", "n", "[", "'children'", "]", "]", "\n", "child_tags", ".", "sort", "(", ")", "\n", "child_tags", "=", "','", ".", "join", "(", "map", "(", "str", ",", "child_tags", ")", ")", "\n", "if", "child_tags", "not", "in", "global_tags", ":", "\n", "            ", "global_tags", "[", "child_tags", "]", "=", "len", "(", "global_tags", ")", "\n", "", "n", "[", "'tag%s'", "%", "tagV", "]", "=", "global_tags", "[", "child_tags", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.BUAA-WJR_SO-ET.None.treeKernel.load_data": [[56, 77], ["set", "list", "open", "pickle.load", "treeKernel.tree_tags", "list.sort", "list.sort", "ys.append", "xs.append", "range", "tags.count", "g[].items", "functools.cmp_to_key", "g[].items"], "function", ["home.repos.pwc.inspect_result.BUAA-WJR_SO-ET.None.treeKernel.tree_tags"], ["def", "load_data", "(", "dataset", ",", "tree_depth", ")", ":", "\n", "    ", "with", "open", "(", "'trees/%s_%s.pickle'", "%", "(", "dataset", ",", "tree_depth", ")", ",", "'rb'", ")", "as", "fp", ":", "\n", "        ", "g_list", "=", "pickle", ".", "load", "(", "fp", ")", "\n", "", "global", "global_tags", "\n", "global_tags", "=", "{", "0", ":", "0", "}", "\n", "tagV", "=", "2", "if", "dataset", "in", "social_dataset", "else", "3", "\n", "[", "tree_tags", "(", "g", ",", "k", ",", "tagV", ")", "for", "k", "in", "range", "(", "tree_depth", "+", "1", ")", "for", "g", "in", "g_list", "]", "\n", "all_tags", "=", "set", "(", "[", "n", "[", "'tag%s'", "%", "tagV", "]", "for", "g", "in", "g_list", "for", "i", ",", "n", "in", "g", "[", "'tree'", "]", ".", "items", "(", ")", "]", ")", "\n", "all_tags", "=", "list", "(", "all_tags", ")", "\n", "if", "tagV", "==", "3", ":", "\n", "        ", "all_tags", ".", "sort", "(", "key", "=", "functools", ".", "cmp_to_key", "(", "tuple_int_sort", ")", ")", "\n", "", "else", ":", "\n", "        ", "all_tags", ".", "sort", "(", ")", "\n", "", "xs", "=", "[", "]", "\n", "ys", "=", "[", "]", "\n", "for", "g", "in", "g_list", ":", "\n", "        ", "ys", ".", "append", "(", "g", "[", "'label'", "]", ")", "\n", "tags", "=", "[", "n", "[", "'tag%s'", "%", "tagV", "]", "for", "i", ",", "n", "in", "g", "[", "'tree'", "]", ".", "items", "(", ")", "]", "\n", "x", "=", "[", "tags", ".", "count", "(", "t", ")", "for", "t", "in", "all_tags", "]", "\n", "xs", ".", "append", "(", "x", ")", "\n", "", "return", "xs", ",", "ys", "\n", "\n"]], "home.repos.pwc.inspect_result.BUAA-WJR_SO-ET.None.treeKernel.pool_crossV": [[79, 84], ["sklearn.svm.SVC", "sklearn.model_selection.cross_val_score", "numpy.array", "numpy.array"], "function", ["None"], ["", "def", "pool_crossV", "(", "input_", ")", ":", "\n", "    ", "xs", ",", "ys", ",", "c", ",", "gamma", "=", "input_", "\n", "clf", "=", "svm", ".", "SVC", "(", "C", "=", "c", ",", "gamma", "=", "gamma", ")", "\n", "scores", "=", "cross_val_score", "(", "clf", ",", "np", ".", "array", "(", "xs", ")", ",", "np", ".", "array", "(", "ys", ")", ",", "cv", "=", "10", ",", "scoring", "=", "'accuracy'", ")", "\n", "return", "(", "c", ",", "scores", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BUAA-WJR_SO-ET.None.treeKernel.gridSearch": [[86, 110], ["print", "treeKernel.load_data", "range", "list", "list.sort", "numpy.array().mean", "max", "print", "sys.stdout.flush", "cs.index", "range", "treeKernel.pool_crossV", "list.append", "numpy.array", "max", "min", "range", "numpy.array().mean", "len", "numpy.array"], "function", ["home.repos.pwc.inspect_result.BUAA-WJR_SO-ET.None.load_graph.load_data", "home.repos.pwc.inspect_result.BUAA-WJR_SO-ET.None.treeKernel.pool_crossV"], ["", "def", "gridSearch", "(", "dataset", ",", "tree_depth", ")", ":", "\n", "    ", "print", "(", "dataset", ",", "tree_depth", ")", "\n", "xs", ",", "ys", "=", "load_data", "(", "dataset", ",", "tree_depth", ")", "\n", "cs", "=", "[", "2", "**", "i", "for", "i", "in", "range", "(", "-", "5", ",", "15", ")", "]", "\n", "gamma", "=", "'auto'", "if", "dataset", "in", "[", "'IMDBBINARY'", ",", "'IMDBMULTI'", ",", "'REDDITBINARY'", ",", "'REDDITMULTI5K'", "]", "else", "'scale'", "\n", "max_acc", "=", "0", "\n", "for", "r", "in", "range", "(", "10", ")", ":", "\n", "        ", "c_accs", "=", "[", "]", "\n", "for", "c", "in", "cs", ":", "\n", "            ", "c_acc", "=", "pool_crossV", "(", "(", "xs", ",", "ys", ",", "c", ",", "gamma", ")", ")", "\n", "c_accs", ".", "append", "(", "c_acc", ")", "\n", "", "c_accs", "=", "list", "(", "c_accs", ")", "\n", "c_accs", ".", "sort", "(", "key", "=", "lambda", "ca", ":", "np", ".", "array", "(", "ca", "[", "1", "]", ")", ".", "mean", "(", ")", ",", "reverse", "=", "True", ")", "\n", "max_c", ",", "accs", "=", "c_accs", "[", "0", "]", "\n", "acc_mean", "=", "np", ".", "array", "(", "accs", ")", ".", "mean", "(", ")", "\n", "if", "acc_mean", "<=", "max_acc", ":", "\n", "            ", "break", "\n", "", "max_acc", "=", "max", "(", "max_acc", ",", "acc_mean", ")", "\n", "print", "(", "r", ",", "'%.6f'", "%", "max_c", ",", "'%.6f'", "%", "acc_mean", ",", "'[%s]'", "%", "', '", ".", "join", "(", "[", "'%.4f'", "%", "a", "for", "a", "in", "accs", "]", ")", ")", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "max_c_i", "=", "cs", ".", "index", "(", "max_c", ")", "\n", "max_c_left", "=", "cs", "[", "max", "(", "max_c_i", "-", "1", ",", "0", ")", "]", "\n", "max_c_right", "=", "cs", "[", "min", "(", "max_c_i", "+", "1", ",", "len", "(", "cs", ")", "-", "1", ")", "]", "\n", "cs", "=", "[", "max_c_left", "+", "(", "max_c_right", "-", "max_c_left", ")", "/", "20", "*", "i", "for", "i", "in", "range", "(", "20", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.BUAA-WJR_SO-ET.None.tree_data.extract_tree": [[21, 51], ["len", "copy.deepcopy", "range", "copy.deepcopy.items", "layer_idx.append", "len", "n.get", "int", "[].extend", "graph[].nodes[].get", "range", "copy.deepcopy.items", "len"], "function", ["None"], ["def", "extract_tree", "(", "graph", ",", "tree_depth", ",", "global_degree", "=", "False", ")", ":", "\n", "    ", "leaf_size", "=", "len", "(", "graph", "[", "'G'", "]", ")", "\n", "tree", "=", "{", "'label'", ":", "graph", "[", "'label'", "]", ",", "\n", "'node_size'", ":", "[", "0", "]", "*", "(", "tree_depth", "+", "1", ")", ",", "\n", "'edges'", ":", "[", "[", "]", "for", "i", "in", "range", "(", "tree_depth", "+", "1", ")", "]", ",", "\n", "'node_features'", ":", "[", "0", "]", "*", "leaf_size", ",", "\n", "'node_degrees'", ":", "[", "0", "]", "*", "leaf_size", ",", "\n", "}", "\n", "old_tree", "=", "copy", ".", "deepcopy", "(", "graph", "[", "'tree'", "]", ")", "\n", "# tree layer mask", "\n", "layer_idx", "=", "[", "0", "]", "\n", "for", "layer", "in", "range", "(", "tree_depth", "+", "1", ")", ":", "\n", "        ", "layer_nodes", "=", "[", "i", "for", "i", ",", "n", "in", "old_tree", ".", "items", "(", ")", "if", "n", "[", "'depth'", "]", "==", "layer", "]", "\n", "layer_idx", ".", "append", "(", "layer_idx", "[", "-", "1", "]", "+", "len", "(", "layer_nodes", ")", ")", "\n", "tree", "[", "'node_size'", "]", "[", "layer", "]", "=", "len", "(", "layer_nodes", ")", "\n", "\n", "", "for", "i", ",", "n", "in", "old_tree", ".", "items", "(", ")", ":", "\n", "# edge", "\n", "        ", "if", "n", "[", "'depth'", "]", ">", "0", ":", "\n", "            ", "n_idx", "=", "n", "[", "'ID'", "]", "-", "layer_idx", "[", "n", "[", "'depth'", "]", "]", "\n", "c_base", "=", "layer_idx", "[", "n", "[", "'depth'", "]", "-", "1", "]", "\n", "tree", "[", "'edges'", "]", "[", "n", "[", "'depth'", "]", "]", ".", "extend", "(", "[", "(", "n_idx", ",", "c", "-", "c_base", ")", "for", "c", "in", "n", "[", "'children'", "]", "]", ")", "\n", "continue", "\n", "# leaf: node feature", "\n", "", "graphID", "=", "n", ".", "get", "(", "'graphID'", ",", "n", "[", "'ID'", "]", ")", "\n", "nid", "=", "n", "[", "'ID'", "]", "\n", "tree", "[", "'node_features'", "]", "[", "nid", "]", "=", "int", "(", "graph", "[", "'G'", "]", ".", "nodes", "[", "graphID", "]", ".", "get", "(", "'tag'", ",", "0", ")", ")", "\n", "if", "global_degree", ":", "\n", "            ", "tree", "[", "'node_degrees'", "]", "[", "nid", "]", "=", "graph", "[", "'G'", "]", ".", "degree", "[", "graphID", "]", "\n", "", "", "return", "tree", "\n", "\n"]], "home.repos.pwc.inspect_result.BUAA-WJR_SO-ET.None.tree_data.integrate_label": [[53, 60], ["list", "list.sort", "set", "list.index"], "function", ["None"], ["", "def", "integrate_label", "(", "trees", ")", ":", "\n", "    ", "labels", "=", "[", "t", "[", "'label'", "]", "for", "t", "in", "trees", "]", "\n", "labels", "=", "list", "(", "set", "(", "labels", ")", ")", "\n", "labels", ".", "sort", "(", ")", "\n", "for", "t", "in", "trees", ":", "\n", "        ", "t", "[", "'label'", "]", "=", "labels", ".", "index", "(", "t", "[", "'label'", "]", ")", "\n", "", "return", "trees", "\n", "\n"]], "home.repos.pwc.inspect_result.BUAA-WJR_SO-ET.None.tree_data.one_hot_features": [[62, 70], ["list", "list.sort", "set", "torch.zeros", "sum", "len", "range", "list.index"], "function", ["None"], ["", "def", "one_hot_features", "(", "trees", ")", ":", "\n", "    ", "label_set", "=", "list", "(", "set", "(", "sum", "(", "[", "t", "[", "'node_features'", "]", "for", "t", "in", "trees", "]", ",", "[", "]", ")", ")", ")", "\n", "label_set", ".", "sort", "(", ")", "\n", "for", "t", "in", "trees", ":", "\n", "        ", "leaf_size", "=", "t", "[", "'node_size'", "]", "[", "0", "]", "\n", "node_features", "=", "torch", ".", "zeros", "(", "leaf_size", ",", "len", "(", "label_set", ")", ")", "\n", "node_features", "[", "range", "(", "leaf_size", ")", ",", "[", "label_set", ".", "index", "(", "d", ")", "for", "d", "in", "t", "[", "'node_features'", "]", "]", "]", "=", "1", "\n", "t", "[", "'node_features'", "]", "=", "node_features", "\n", "\n"]], "home.repos.pwc.inspect_result.BUAA-WJR_SO-ET.None.tree_data.add_additional_features": [[72, 80], ["list", "list.sort", "set", "torch.zeros", "torch.cat", "sum", "len", "range", "list.index"], "function", ["None"], ["", "", "def", "add_additional_features", "(", "trees", ",", "fField", ")", ":", "\n", "    ", "fset", "=", "list", "(", "set", "(", "sum", "(", "[", "t", "[", "fField", "]", "for", "t", "in", "trees", "]", ",", "[", "]", ")", ")", ")", "\n", "fset", ".", "sort", "(", ")", "\n", "for", "t", "in", "trees", ":", "\n", "        ", "leaf_size", "=", "t", "[", "'node_size'", "]", "[", "0", "]", "\n", "features", "=", "torch", ".", "zeros", "(", "leaf_size", ",", "len", "(", "fset", ")", ")", "\n", "features", "[", "range", "(", "leaf_size", ")", ",", "[", "fset", ".", "index", "(", "f", ")", "for", "f", "in", "t", "[", "fField", "]", "]", "]", "=", "1", "\n", "t", "[", "'node_features'", "]", "=", "torch", ".", "cat", "(", "[", "t", "[", "'node_features'", "]", ",", "features", "]", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BUAA-WJR_SO-ET.None.tree_data.load_tree": [[82, 92], ["os.path.join", "tree_data.integrate_label", "tree_data.one_hot_features", "open", "pickle.load", "tree_data.extract_tree", "tree_data.add_additional_features"], "function", ["home.repos.pwc.inspect_result.BUAA-WJR_SO-ET.None.tree_data.integrate_label", "home.repos.pwc.inspect_result.BUAA-WJR_SO-ET.None.tree_data.one_hot_features", "home.repos.pwc.inspect_result.BUAA-WJR_SO-ET.None.tree_data.extract_tree", "home.repos.pwc.inspect_result.BUAA-WJR_SO-ET.None.tree_data.add_additional_features"], ["", "", "def", "load_tree", "(", "dataset", ",", "tree_depth", ",", "global_degree", "=", "False", ")", ":", "\n", "    ", "t_path", "=", "os", ".", "path", ".", "join", "(", "PWD", ",", "'trees'", ",", "'%s_%s.pickle'", "%", "(", "dataset", ",", "tree_depth", ")", ")", "\n", "with", "open", "(", "t_path", ",", "'rb'", ")", "as", "fp", ":", "\n", "        ", "graphs", "=", "pickle", ".", "load", "(", "fp", ")", "\n", "", "trees", "=", "[", "extract_tree", "(", "g", ",", "tree_depth", ",", "global_degree", ")", "for", "g", "in", "graphs", "]", "\n", "integrate_label", "(", "trees", ")", "\n", "one_hot_features", "(", "trees", ")", "\n", "if", "global_degree", ":", "\n", "        ", "add_additional_features", "(", "trees", ",", "'node_degrees'", ")", "\n", "", "return", "trees", "\n", "\n"]], "home.repos.pwc.inspect_result.BUAA-WJR_SO-ET.None.tree_data.separate_data": [[94, 108], ["sklearn.model_selection.StratifiedKFold", "sklearn.model_selection.StratifiedKFold.split", "numpy.zeros", "idx_list.append", "len"], "function", ["None"], ["", "def", "separate_data", "(", "tree_list", ",", "seed", ",", "fold_idx", ")", ":", "\n", "    ", "assert", "0", "<=", "fold_idx", "and", "fold_idx", "<", "10", ",", "\"fold_idx must be from 0 to 9.\"", "\n", "skf", "=", "StratifiedKFold", "(", "n_splits", "=", "10", ",", "shuffle", "=", "True", ",", "random_state", "=", "seed", ")", "\n", "\n", "labels", "=", "[", "tree", "[", "'label'", "]", "for", "tree", "in", "tree_list", "]", "\n", "idx_list", "=", "[", "]", "\n", "for", "idx", "in", "skf", ".", "split", "(", "np", ".", "zeros", "(", "len", "(", "labels", ")", ")", ",", "labels", ")", ":", "\n", "        ", "idx_list", ".", "append", "(", "idx", ")", "\n", "", "train_idx", ",", "test_idx", "=", "idx_list", "[", "fold_idx", "]", "\n", "\n", "train_tree_list", "=", "[", "tree_list", "[", "i", "]", "for", "i", "in", "train_idx", "]", "\n", "test_tree_list", "=", "[", "tree_list", "[", "i", "]", "for", "i", "in", "test_idx", "]", "\n", "\n", "return", "train_tree_list", ",", "test_tree_list", "\n", "\n"]], "home.repos.pwc.inspect_result.BUAA-WJR_SO-ET.None.load_graph.load_data": [[11, 69], ["print", "print", "open", "int", "range", "open", "pickle.dump", "f.readline().strip", "f.readline().strip().split", "networkx.Graph", "range", "g_list.append", "int", "len", "f.readline().strip().split", "nx.Graph.add_node", "node_tags.append", "range", "numpy.stack", "len", "len", "len", "f.readline", "f.readline().strip", "int", "len", "len", "len", "np.stack.append", "len", "nx.Graph.add_edge", "f.readline().strip", "int", "numpy.array", "f.readline", "int", "f.readline", "float"], "function", ["None"], ["def", "load_data", "(", "dataset", ")", ":", "\n", "    ", "'''\n        dataset: name of dataset\n        test_proportion: ratio of test train split\n        seed: random seed for random splitting of dataset\n    '''", "\n", "\n", "print", "(", "'loading data'", ")", "\n", "g_list", "=", "[", "]", "\n", "label_dict", "=", "{", "}", "\n", "feat_dict", "=", "{", "}", "\n", "\n", "with", "open", "(", "'datasets/%s.txt'", "%", "dataset", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "n_g", "=", "int", "(", "f", ".", "readline", "(", ")", ".", "strip", "(", ")", ")", "\n", "for", "i", "in", "range", "(", "n_g", ")", ":", "\n", "            ", "row", "=", "f", ".", "readline", "(", ")", ".", "strip", "(", ")", ".", "split", "(", ")", "\n", "n", ",", "l", "=", "[", "int", "(", "w", ")", "for", "w", "in", "row", "]", "\n", "if", "not", "l", "in", "label_dict", ":", "\n", "                ", "mapped", "=", "len", "(", "label_dict", ")", "\n", "label_dict", "[", "l", "]", "=", "mapped", "\n", "", "g", "=", "nx", ".", "Graph", "(", ")", "\n", "node_tags", "=", "[", "]", "\n", "node_features", "=", "[", "]", "\n", "n_edges", "=", "0", "\n", "for", "j", "in", "range", "(", "n", ")", ":", "\n", "                ", "row", "=", "f", ".", "readline", "(", ")", ".", "strip", "(", ")", ".", "split", "(", ")", "\n", "tmp", "=", "int", "(", "row", "[", "1", "]", ")", "+", "2", "\n", "g", ".", "add_node", "(", "j", ",", "tag", "=", "row", "[", "0", "]", ")", "\n", "if", "tmp", "==", "len", "(", "row", ")", ":", "\n", "# no node attributes", "\n", "                    ", "row", "=", "[", "int", "(", "w", ")", "for", "w", "in", "row", "]", "\n", "attr", "=", "None", "\n", "", "else", ":", "\n", "                    ", "row", ",", "attr", "=", "[", "int", "(", "w", ")", "for", "w", "in", "row", "[", ":", "tmp", "]", "]", ",", "np", ".", "array", "(", "[", "float", "(", "w", ")", "for", "w", "in", "row", "[", "tmp", ":", "]", "]", ")", "\n", "", "if", "not", "row", "[", "0", "]", "in", "feat_dict", ":", "\n", "                    ", "mapped", "=", "len", "(", "feat_dict", ")", "\n", "feat_dict", "[", "row", "[", "0", "]", "]", "=", "mapped", "\n", "", "node_tags", ".", "append", "(", "feat_dict", "[", "row", "[", "0", "]", "]", ")", "\n", "\n", "if", "tmp", ">", "len", "(", "row", ")", ":", "\n", "                    ", "node_features", ".", "append", "(", "attr", ")", "\n", "\n", "", "n_edges", "+=", "row", "[", "1", "]", "\n", "for", "k", "in", "range", "(", "2", ",", "len", "(", "row", ")", ")", ":", "\n", "                    ", "g", ".", "add_edge", "(", "j", ",", "row", "[", "k", "]", ")", "\n", "\n", "", "", "if", "node_features", "!=", "[", "]", ":", "\n", "                ", "node_features", "=", "np", ".", "stack", "(", "node_features", ")", "\n", "node_feature_flag", "=", "True", "\n", "", "else", ":", "\n", "                ", "node_features", "=", "None", "\n", "node_feature_flag", "=", "False", "\n", "\n", "", "assert", "len", "(", "g", ")", "==", "n", "\n", "g_list", ".", "append", "(", "{", "'G'", ":", "g", ",", "'label'", ":", "l", "}", ")", "\n", "", "", "print", "(", "\"# data: %d\\tlabel:%s\"", "%", "(", "len", "(", "g_list", ")", ",", "len", "(", "label_dict", ")", ")", ")", "\n", "with", "open", "(", "'graphs/%s.pickle'", "%", "dataset", ",", "'wb'", ")", "as", "fp", ":", "\n", "        ", "pickle", ".", "dump", "(", "g_list", ",", "fp", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BUAA-WJR_SO-ET.None.structural_optimization.trans_to_adj": [[25, 29], ["graph.remove_edges_from", "range", "networkx.to_numpy_array", "networkx.selfloop_edges", "len"], "function", ["None"], ["def", "trans_to_adj", "(", "graph", ")", ":", "\n", "    ", "graph", ".", "remove_edges_from", "(", "nx", ".", "selfloop_edges", "(", "graph", ")", ")", "\n", "nodes", "=", "range", "(", "len", "(", "graph", ".", "nodes", ")", ")", "\n", "return", "nx", ".", "to_numpy_array", "(", "graph", ",", "nodelist", "=", "nodes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BUAA-WJR_SO-ET.None.structural_optimization.trans_to_tree": [[31, 36], ["numpy.array", "lib.encoding_tree.PartitionTree", "lib.encoding_tree.PartitionTree.build_encoding_tree"], "function", ["home.repos.pwc.inspect_result.BUAA-WJR_SO-ET.lib.encoding_tree.PartitionTree.build_encoding_tree"], ["", "def", "trans_to_tree", "(", "adj", ",", "k", "=", "2", ")", ":", "\n", "    ", "undirected_adj", "=", "np", ".", "array", "(", "adj", ")", "\n", "y", "=", "PartitionTree", "(", "adj_matrix", "=", "undirected_adj", ")", "\n", "x", "=", "y", ".", "build_encoding_tree", "(", "k", ")", "\n", "return", "y", ".", "tree_node", "\n", "\n"]], "home.repos.pwc.inspect_result.BUAA-WJR_SO-ET.None.structural_optimization.update_depth": [[38, 49], ["set", "tree.items", "list"], "function", ["None"], ["", "def", "update_depth", "(", "tree", ")", ":", "\n", "# set leaf depth", "\n", "    ", "wait_update", "=", "[", "k", "for", "k", ",", "v", "in", "tree", ".", "items", "(", ")", "if", "v", ".", "children", "is", "None", "]", "\n", "while", "wait_update", ":", "\n", "        ", "for", "nid", "in", "wait_update", ":", "\n", "            ", "node", "=", "tree", "[", "nid", "]", "\n", "if", "node", ".", "children", "is", "None", ":", "\n", "                ", "node", ".", "child_h", "=", "0", "\n", "", "else", ":", "\n", "                ", "node", ".", "child_h", "=", "tree", "[", "list", "(", "node", ".", "children", ")", "[", "0", "]", "]", ".", "child_h", "+", "1", "\n", "", "", "wait_update", "=", "set", "(", "[", "tree", "[", "nid", "]", ".", "parent", "for", "nid", "in", "wait_update", "if", "tree", "[", "nid", "]", ".", "parent", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BUAA-WJR_SO-ET.None.structural_optimization.update_node": [[51, 67], ["structural_optimization.update_depth", "d_id.sort", "tree.items", "copy.deepcopy", "d_id.index", "tree.items", "d_id.index", "d_id.index"], "function", ["home.repos.pwc.inspect_result.BUAA-WJR_SO-ET.None.structural_optimization.update_depth"], ["", "", "def", "update_node", "(", "tree", ")", ":", "\n", "    ", "update_depth", "(", "tree", ")", "\n", "d_id", "=", "[", "(", "v", ".", "child_h", ",", "v", ".", "ID", ")", "for", "k", ",", "v", "in", "tree", ".", "items", "(", ")", "]", "\n", "d_id", ".", "sort", "(", ")", "\n", "new_tree", "=", "{", "}", "\n", "for", "k", ",", "v", "in", "tree", ".", "items", "(", ")", ":", "\n", "        ", "n", "=", "copy", ".", "deepcopy", "(", "v", ")", "\n", "n", ".", "ID", "=", "d_id", ".", "index", "(", "(", "n", ".", "child_h", ",", "n", ".", "ID", ")", ")", "\n", "if", "n", ".", "parent", "is", "not", "None", ":", "\n", "            ", "n", ".", "parent", "=", "d_id", ".", "index", "(", "(", "n", ".", "child_h", "+", "1", ",", "n", ".", "parent", ")", ")", "\n", "", "if", "n", ".", "children", "is", "not", "None", ":", "\n", "            ", "n", ".", "children", "=", "[", "d_id", ".", "index", "(", "(", "n", ".", "child_h", "-", "1", ",", "c", ")", ")", "for", "c", "in", "n", ".", "children", "]", "\n", "", "n", "=", "n", ".", "__dict__", "\n", "n", "[", "'depth'", "]", "=", "n", "[", "'child_h'", "]", "\n", "new_tree", "[", "n", "[", "'ID'", "]", "]", "=", "n", "\n", "", "return", "new_tree", "\n", "\n"]], "home.repos.pwc.inspect_result.BUAA-WJR_SO-ET.None.structural_optimization.pool_trans": [[69, 75], ["structural_optimization.trans_to_adj", "structural_optimization.trans_to_tree", "structural_optimization.update_node"], "function", ["home.repos.pwc.inspect_result.BUAA-WJR_SO-ET.None.structural_optimization.trans_to_adj", "home.repos.pwc.inspect_result.BUAA-WJR_SO-ET.None.structural_optimization.trans_to_tree", "home.repos.pwc.inspect_result.BUAA-WJR_SO-ET.None.structural_optimization.update_node"], ["", "def", "pool_trans", "(", "input_", ")", ":", "\n", "    ", "g", ",", "tree_depth", "=", "input_", "\n", "adj_mat", "=", "trans_to_adj", "(", "g", "[", "'G'", "]", ")", "\n", "tree", "=", "trans_to_tree", "(", "adj_mat", ",", "tree_depth", ")", "\n", "g", "[", "'tree'", "]", "=", "update_node", "(", "tree", ")", "\n", "return", "g", "\n", "\n"]], "home.repos.pwc.inspect_result.BUAA-WJR_SO-ET.None.structural_optimization.pool_trans_disconnected": [[77, 146], ["networkx.is_connected", "enumerate", "range", "min", "list", "structural_optimization.pool_trans", "networkx.connected_components", "trees.append", "itertools.chain.from_iterable", "update_node.pop", "len", "range", "g[].subgraph", "list", "list.sort", "networkx.relabel_nodes", "structural_optimization.trans_to_adj", "structural_optimization.trans_to_tree", "structural_optimization.update_node", "list", "copy.deepcopy", "list", "list.append", "list.index", "update_node.values", "list.index", "root_ids.append", "len"], "function", ["home.repos.pwc.inspect_result.BUAA-WJR_SO-ET.None.structural_optimization.pool_trans", "home.repos.pwc.inspect_result.BUAA-WJR_SO-ET.None.structural_optimization.trans_to_adj", "home.repos.pwc.inspect_result.BUAA-WJR_SO-ET.None.structural_optimization.trans_to_tree", "home.repos.pwc.inspect_result.BUAA-WJR_SO-ET.None.structural_optimization.update_node"], ["", "def", "pool_trans_disconnected", "(", "input_", ")", ":", "\n", "    ", "g", ",", "tree_depth", "=", "input_", "\n", "# \u4e00\u4e2a\u6570\u636e\u96c6\u91cc\u4e5f\u6709\u8fde\u901a\u7684\u56fe", "\n", "if", "nx", ".", "is_connected", "(", "g", "[", "'G'", "]", ")", ":", "\n", "        ", "return", "pool_trans", "(", "(", "g", ",", "tree_depth", ")", ")", "\n", "", "trees", "=", "[", "]", "\n", "# gi: \u7528\u6765\u6807\u8bb0\u662f\u7b2c\u51e0\u4e2a\u5b50\u56fe, graph index", "\n", "for", "gi", ",", "sub_nodes", "in", "enumerate", "(", "nx", ".", "connected_components", "(", "g", "[", "'G'", "]", ")", ")", ":", "\n", "        ", "if", "len", "(", "sub_nodes", ")", "==", "1", ":", "\n", "# \u7f16\u7801\u6811\u6ca1\u529e\u6cd5\u5904\u7406\u5355\u4e2a\u70b9, \u624b\u52a8\u7ec4\u6210\u5355\u8282\u70b9\u6811", "\n", "            ", "node", "=", "list", "(", "sub_nodes", ")", "[", "0", "]", "\n", "# leaf node, parent\u7684\u7ec4\u6210\uff1agraphIndex_layerIndex_nodeIndex", "\n", "js", "=", "[", "{", "'ID'", ":", "node", ",", "'parent'", ":", "'%s_%s_0'", "%", "(", "gi", ",", "1", ")", ",", "'depth'", ":", "0", ",", "'children'", ":", "None", "}", "]", "\n", "for", "d", "in", "range", "(", "1", ",", "tree_depth", "+", "1", ")", ":", "\n", "                ", "js", ".", "append", "(", "{", "'ID'", ":", "'%s_%s_0'", "%", "(", "gi", ",", "d", ")", ",", "\n", "'parent'", ":", "'%s_%s_0'", "%", "(", "gi", ",", "d", "+", "1", ")", "if", "d", "<", "tree_depth", "else", "None", ",", "\n", "'depth'", ":", "d", ",", "\n", "'children'", ":", "[", "js", "[", "-", "1", "]", "[", "'ID'", "]", "]", "\n", "}", ")", "\n", "", "", "else", ":", "\n", "            ", "sg", "=", "g", "[", "'G'", "]", ".", "subgraph", "(", "sub_nodes", ")", "# sub graph", "\n", "nodes", "=", "list", "(", "sg", ".", "nodes", ")", "\n", "nodes", ".", "sort", "(", ")", "\n", "nmap", "=", "{", "n", ":", "nodes", ".", "index", "(", "n", ")", "for", "n", "in", "nodes", "}", "\n", "sg", "=", "nx", ".", "relabel_nodes", "(", "sg", ",", "nmap", ")", "\n", "# \u56fe\u8f6c\u6811", "\n", "adj_mat", "=", "trans_to_adj", "(", "sg", ")", "\n", "tree", "=", "trans_to_tree", "(", "adj_mat", ",", "tree_depth", ")", "\n", "tree", "=", "update_node", "(", "tree", ")", "\n", "# relable tree id", "\n", "js", "=", "list", "(", "tree", ".", "values", "(", ")", ")", "\n", "rmap", "=", "{", "nodes", ".", "index", "(", "n", ")", ":", "n", "for", "n", "in", "nodes", "}", "# \u53f6\u5b50\u8282\u70b9\u7528\u539fID", "\n", "for", "j", "in", "js", ":", "\n", "                ", "if", "j", "[", "'depth'", "]", ">", "0", ":", "\n", "                    ", "rmap", "[", "j", "[", "'ID'", "]", "]", "=", "'%s_%s_%s'", "%", "(", "gi", ",", "j", "[", "'depth'", "]", ",", "j", "[", "'ID'", "]", ")", "\n", "", "", "for", "j", "in", "js", ":", "\n", "                ", "j", "[", "'ID'", "]", "=", "rmap", "[", "j", "[", "'ID'", "]", "]", "\n", "j", "[", "'parent'", "]", "=", "rmap", "[", "j", "[", "'parent'", "]", "]", "if", "j", "[", "'depth'", "]", "<", "tree_depth", "else", "None", "\n", "j", "[", "'children'", "]", "=", "[", "rmap", "[", "c", "]", "for", "c", "in", "j", "[", "'children'", "]", "]", "if", "j", "[", "'children'", "]", "else", "None", "\n", "", "", "trees", ".", "append", "(", "js", ")", "\n", "# \u6574\u6811\u8282\u70b9id relabel", "\n", "", "id_map", "=", "{", "}", "\n", "for", "d", "in", "range", "(", "0", ",", "tree_depth", "+", "1", ")", ":", "\n", "        ", "for", "js", "in", "trees", ":", "\n", "            ", "for", "j", "in", "js", ":", "\n", "                ", "if", "j", "[", "'depth'", "]", "==", "d", ":", "\n", "# \u53f6\u5b50\u8282\u70b9\u7ef4\u6301\u539f\u56feID", "\n", "                    ", "id_map", "[", "j", "[", "'ID'", "]", "]", "=", "len", "(", "id_map", ")", "if", "d", ">", "0", "else", "j", "[", "'ID'", "]", "\n", "", "", "", "", "tree", "=", "{", "}", "\n", "root_ids", "=", "[", "]", "\n", "for", "js", "in", "trees", ":", "\n", "        ", "for", "j", "in", "js", ":", "\n", "            ", "n", "=", "copy", ".", "deepcopy", "(", "j", ")", "\n", "n", "[", "'parent'", "]", "=", "id_map", "[", "n", "[", "'parent'", "]", "]", "if", "n", "[", "'parent'", "]", "else", "None", "\n", "n", "[", "'children'", "]", "=", "[", "id_map", "[", "c", "]", "for", "c", "in", "n", "[", "'children'", "]", "]", "if", "n", "[", "'children'", "]", "else", "None", "\n", "n", "[", "'ID'", "]", "=", "id_map", "[", "n", "[", "'ID'", "]", "]", "\n", "tree", "[", "n", "[", "'ID'", "]", "]", "=", "n", "\n", "if", "n", "[", "'parent'", "]", "is", "None", ":", "\n", "                ", "root_ids", ".", "append", "(", "n", "[", "'ID'", "]", ")", "\n", "# \u6839\u8282\u70b9\u5408\u5e76", "\n", "", "", "", "root_id", "=", "min", "(", "root_ids", ")", "\n", "root_children", "=", "list", "(", "itertools", ".", "chain", ".", "from_iterable", "(", "[", "tree", "[", "i", "]", "[", "'children'", "]", "for", "i", "in", "root_ids", "]", ")", ")", "\n", "root_node", "=", "{", "'ID'", ":", "root_id", ",", "'parent'", ":", "None", ",", "'children'", ":", "root_children", ",", "'depth'", ":", "tree_depth", "}", "\n", "[", "tree", ".", "pop", "(", "i", ")", "for", "i", "in", "root_ids", "]", "# \u5220\u6389\u6240\u6709\u6839\u8282\u70b9", "\n", "for", "c", "in", "root_children", ":", "# \u4fee\u6539\u4e2d\u95f4\u8282\u70b9\u5230\u6839\u8282\u70b9\u7684\u6620\u5c04\u5230\u6700\u65b0\u6839\u8282\u70b9", "\n", "        ", "tree", "[", "c", "]", "[", "'parent'", "]", "=", "root_id", "\n", "", "tree", "[", "root_id", "]", "=", "root_node", "# \u52a0\u5165\u6839\u8282", "\n", "g", "[", "'tree'", "]", "=", "tree", "\n", "return", "g", "\n", "\n"]], "home.repos.pwc.inspect_result.BUAA-WJR_SO-ET.None.structural_optimization.struct_tree": [[148, 161], ["os.path.exists", "multiprocessing.Pool", "multiprocessing.Pool.map", "multiprocessing.Pool.close", "multiprocessing.Pool.join", "filter", "open", "pickle.load", "open", "pickle.dump", "list"], "function", ["None"], ["", "def", "struct_tree", "(", "dataset", ",", "tree_depth", ")", ":", "\n", "    ", "if", "os", ".", "path", ".", "exists", "(", "'trees/%s_%s.pickle'", "%", "(", "dataset", ",", "tree_depth", ")", ")", ":", "\n", "        ", "return", "\n", "", "with", "open", "(", "'graphs/%s.pickle'", "%", "dataset", ",", "'rb'", ")", "as", "fp", ":", "\n", "        ", "g_list", "=", "pickle", ".", "load", "(", "fp", ")", "\n", "", "pool_func", "=", "pool_trans_disconnected", "if", "dataset", "in", "disconnected_dataset", "else", "pool_trans", "\n", "pool", "=", "Pool", "(", ")", "\n", "g_list", "=", "pool", ".", "map", "(", "pool_func", ",", "[", "(", "g", ",", "tree_depth", ")", "for", "g", "in", "g_list", "]", ")", "\n", "pool", ".", "close", "(", ")", "\n", "pool", ".", "join", "(", ")", "\n", "g_list", "=", "filter", "(", "lambda", "g", ":", "g", "is", "not", "None", ",", "g_list", ")", "\n", "with", "open", "(", "'trees/%s_%s.pickle'", "%", "(", "dataset", ",", "tree_depth", ")", ",", "'wb'", ")", "as", "fp", ":", "\n", "        ", "pickle", ".", "dump", "(", "list", "(", "g_list", ")", ",", "fp", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BUAA-WJR_SO-ET.lib.mlp.MLP.__init__": [[7, 39], ["torch.Module.__init__", "ValueError", "torch.Linear", "torch.Linear", "torch.Linear", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "mlp.MLP.linears.append", "range", "mlp.MLP.linears.append", "range", "torch.Linear", "torch.Linear", "torch.Linear", "mlp.MLP.linears.append", "torch.Linear", "torch.Linear", "torch.Linear", "mlp.MLP.batch_norms.append", "torch.Linear", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d"], "methods", ["home.repos.pwc.inspect_result.BUAA-WJR_SO-ET.lib.encoding_tree.PartitionTree.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_layers", ",", "input_dim", ",", "hidden_dim", ",", "output_dim", ")", ":", "\n", "        ", "'''\n            num_layers: number of layers in the neural networks (EXCLUDING the input layer). If num_layers=1, this reduces to linear model.\n            input_dim: dimensionality of input features\n            hidden_dim: dimensionality of hidden units at ALL layers\n            output_dim: number of classes for prediction\n            device: which device to use\n        '''", "\n", "\n", "super", "(", "MLP", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "linear_or_not", "=", "True", "#default is linear model", "\n", "self", ".", "num_layers", "=", "num_layers", "\n", "\n", "if", "num_layers", "<", "1", ":", "\n", "            ", "raise", "ValueError", "(", "\"number of layers should be positive!\"", ")", "\n", "", "elif", "num_layers", "==", "1", ":", "\n", "#Linear model", "\n", "            ", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "input_dim", ",", "output_dim", ")", "\n", "", "else", ":", "\n", "#Multi-layer model", "\n", "            ", "self", ".", "linear_or_not", "=", "False", "\n", "self", ".", "linears", "=", "torch", ".", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "batch_norms", "=", "torch", ".", "nn", ".", "ModuleList", "(", ")", "\n", "\n", "self", ".", "linears", ".", "append", "(", "nn", ".", "Linear", "(", "input_dim", ",", "hidden_dim", ")", ")", "\n", "for", "layer", "in", "range", "(", "num_layers", "-", "2", ")", ":", "\n", "                ", "self", ".", "linears", ".", "append", "(", "nn", ".", "Linear", "(", "hidden_dim", ",", "hidden_dim", ")", ")", "\n", "", "self", ".", "linears", ".", "append", "(", "nn", ".", "Linear", "(", "hidden_dim", ",", "output_dim", ")", ")", "\n", "\n", "for", "layer", "in", "range", "(", "num_layers", "-", "1", ")", ":", "\n", "                ", "self", ".", "batch_norms", ".", "append", "(", "nn", ".", "BatchNorm1d", "(", "(", "hidden_dim", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BUAA-WJR_SO-ET.lib.mlp.MLP.forward": [[40, 50], ["mlp.MLP.linear", "range", "torch.relu", "torch.relu", "torch.relu"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "linear_or_not", ":", "\n", "#If linear model", "\n", "            ", "return", "self", ".", "linear", "(", "x", ")", "\n", "", "else", ":", "\n", "#If MLP", "\n", "            ", "h", "=", "x", "\n", "for", "layer", "in", "range", "(", "self", ".", "num_layers", "-", "1", ")", ":", "\n", "                ", "h", "=", "F", ".", "relu", "(", "self", ".", "batch_norms", "[", "layer", "]", "(", "self", ".", "linears", "[", "layer", "]", "(", "h", ")", ")", ")", "\n", "", "return", "self", ".", "linears", "[", "self", ".", "num_layers", "-", "1", "]", "(", "h", ")", "", "", "", "", ""]], "home.repos.pwc.inspect_result.BUAA-WJR_SO-ET.lib.treecnn.TreeCNN.__init__": [[14, 48], ["torch.Module.__init__", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "range", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "range", "treecnn.TreeCNN.batch_norms.append", "treecnn.TreeCNN.mlps.append", "treecnn.TreeCNN.mlps.append", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "treecnn.TreeCNN.linears_prediction.append", "treecnn.TreeCNN.linears_prediction.append", "mlp.MLP", "mlp.MLP", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.BUAA-WJR_SO-ET.lib.encoding_tree.PartitionTree.__init__"], ["    ", "def", "__init__", "(", "self", ",", "depth", ",", "num_mlp_layers", ",", "input_dim", ",", "hidden_dim", ",", "output_dim", ",", "final_dropout", ",", "tree_pooling_type", ",", "device", ")", ":", "\n", "        ", "'''\n        depth: the depth of coding trees (EXCLUDING the leaf layer)\n        num_mlp_layers: number of layers in mlps (EXCLUDING the leaf nodes)\n        input_dim: dimensionality of input features\n        hidden_dim: dimensionality of hidden units at ALL layers\n        output_dim: number of classes for prediction\n        final_dropout: dropout ratio on the final linear layer\n        tree_pooling_type: how to aggregate entire nodes in a tree (root, sum, mean)\n        device: which device to use\n        '''", "\n", "super", "(", "TreeCNN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "final_dropout", "=", "final_dropout", "\n", "self", ".", "device", "=", "device", "\n", "self", ".", "depth", "=", "depth", "\n", "self", ".", "tree_pooling_type", "=", "tree_pooling_type", "\n", "\n", "###List of MLPs", "\n", "self", ".", "mlps", "=", "torch", ".", "nn", ".", "ModuleList", "(", "[", "None", "]", ")", "\n", "###List of batchnorms applied to the output of MLP (input of the final prediction linear layer)", "\n", "self", ".", "batch_norms", "=", "torch", ".", "nn", ".", "ModuleList", "(", "[", "None", "]", ")", "\n", "for", "layer", "in", "range", "(", "1", ",", "self", ".", "depth", "+", "1", ")", ":", "\n", "            ", "if", "layer", "==", "1", ":", "\n", "                ", "self", ".", "mlps", ".", "append", "(", "MLP", "(", "num_mlp_layers", ",", "input_dim", ",", "hidden_dim", ",", "hidden_dim", ")", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "mlps", ".", "append", "(", "MLP", "(", "num_mlp_layers", ",", "hidden_dim", ",", "hidden_dim", ",", "hidden_dim", ")", ")", "\n", "", "self", ".", "batch_norms", ".", "append", "(", "nn", ".", "BatchNorm1d", "(", "hidden_dim", ")", ")", "\n", "\n", "", "self", ".", "linears_prediction", "=", "torch", ".", "nn", ".", "ModuleList", "(", ")", "\n", "for", "layer", "in", "range", "(", "self", ".", "depth", "+", "1", ")", ":", "\n", "            ", "if", "layer", "==", "0", ":", "\n", "                ", "self", ".", "linears_prediction", ".", "append", "(", "nn", ".", "Linear", "(", "input_dim", ",", "output_dim", ")", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "linears_prediction", ".", "append", "(", "nn", ".", "Linear", "(", "hidden_dim", ",", "output_dim", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BUAA-WJR_SO-ET.lib.treecnn.TreeCNN.__preprocess_children_sumpool": [[49, 68], ["range", "enumerate", "torch.cat().transpose", "torch.cat().transpose", "torch.cat().transpose", "torch.cat().transpose", "torch.cat().transpose", "torch.cat().transpose", "torch.cat().transpose", "torch.cat().transpose", "torch.cat().transpose", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.sparse.FloatTensor", "torch.sparse.FloatTensor", "torch.sparse.FloatTensor", "torch.sparse.FloatTensor", "torch.sparse.FloatTensor", "torch.sparse.FloatTensor", "torch.sparse.FloatTensor", "torch.sparse.FloatTensor", "torch.sparse.FloatTensor", "Adj_blocks.append", "start_pdx.append", "start_idx.append", "edge_mat_list.append", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.sparse.FloatTensor.to", "torch.sparse.FloatTensor.to", "torch.sparse.FloatTensor.to", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor"], "methods", ["None"], ["", "", "", "def", "__preprocess_children_sumpool", "(", "self", ",", "batch_tree", ")", ":", "\n", "### \u6bcf\u5c42\u6839\u636e\u548c\u4e0b\u5c42\u7684\u8fde\u63a5\u6765\u751f\u6210\u81ea\u5df1\u7684\u8868\u5f81", "\n", "        ", "Adj_blocks", "=", "[", "None", "]", "# jump leaf layer", "\n", "for", "layer", "in", "range", "(", "1", ",", "self", ".", "depth", "+", "1", ")", ":", "\n", "            ", "edge_mat_list", "=", "[", "]", "\n", "start_pdx", "=", "[", "0", "]", "# \u4e0a\u4e00\u5c42\u7684\u8282\u70b9\u7edf\u8ba1", "\n", "start_idx", "=", "[", "0", "]", "\n", "for", "i", ",", "tree", "in", "enumerate", "(", "batch_tree", ")", ":", "\n", "                ", "start_pdx", ".", "append", "(", "start_pdx", "[", "i", "]", "+", "tree", "[", "'node_size'", "]", "[", "layer", "-", "1", "]", ")", "\n", "start_idx", ".", "append", "(", "start_idx", "[", "i", "]", "+", "tree", "[", "'node_size'", "]", "[", "layer", "]", ")", "\n", "edge_mat_list", ".", "append", "(", "torch", ".", "LongTensor", "(", "tree", "[", "'edges'", "]", "[", "layer", "]", ")", "+", "torch", ".", "LongTensor", "(", "[", "start_idx", "[", "i", "]", ",", "start_pdx", "[", "i", "]", "]", ")", ")", "\n", "\n", "", "Adj_block_idx", "=", "torch", ".", "cat", "(", "edge_mat_list", ",", "0", ")", ".", "transpose", "(", "0", ",", "1", ")", "\n", "Adj_block_elem", "=", "torch", ".", "ones", "(", "Adj_block_idx", ".", "shape", "[", "1", "]", ")", "\n", "Adj_block", "=", "torch", ".", "sparse", ".", "FloatTensor", "(", "Adj_block_idx", ",", "Adj_block_elem", ",", "\n", "torch", ".", "Size", "(", "[", "start_idx", "[", "-", "1", "]", ",", "start_pdx", "[", "-", "1", "]", "]", ")", ")", "\n", "Adj_blocks", ".", "append", "(", "Adj_block", ".", "to", "(", "self", ".", "device", ")", ")", "\n", "", "return", "Adj_blocks", "\n", "\n"]], "home.repos.pwc.inspect_result.BUAA-WJR_SO-ET.lib.treecnn.TreeCNN.__preprocess_treepool": [[69, 95], ["range", "enumerate", "enumerate", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.LongTensor().transpose", "torch.LongTensor().transpose", "torch.LongTensor().transpose", "torch.LongTensor().transpose", "torch.LongTensor().transpose", "torch.LongTensor().transpose", "torch.LongTensor().transpose", "torch.LongTensor().transpose", "torch.LongTensor().transpose", "torch.sparse.FloatTensor", "torch.sparse.FloatTensor", "torch.sparse.FloatTensor", "torch.sparse.FloatTensor", "torch.sparse.FloatTensor", "torch.sparse.FloatTensor", "torch.sparse.FloatTensor", "torch.sparse.FloatTensor", "torch.sparse.FloatTensor", "pools.append", "start_idx.append", "torch.LongTensor().transpose.extend", "torch.LongTensor().transpose.extend", "torch.LongTensor().transpose.extend", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.sparse.FloatTensor.to", "torch.sparse.FloatTensor.to", "torch.sparse.FloatTensor.to", "torch.FloatTensor.extend", "torch.FloatTensor.extend", "torch.FloatTensor.extend", "torch.FloatTensor.extend", "torch.FloatTensor.extend", "torch.FloatTensor.extend", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "len", "range"], "methods", ["None"], ["", "def", "__preprocess_treepool", "(", "self", ",", "batch_tree", ")", ":", "\n", "### create sum or average pooling sparse matrix over entire nodes in each tree (num trees x num nodes)", "\n", "        ", "pools", "=", "[", "]", "\n", "# \u6839\u8282\u70b9\u53ea\u6709\u4e00\u4e2a\uff0c\u4e0d\u9700\u8981readout", "\n", "for", "layer", "in", "range", "(", "self", ".", "depth", ")", ":", "\n", "            ", "start_idx", "=", "[", "0", "]", "\n", "#compute the padded neighbor list", "\n", "for", "i", ",", "tree", "in", "enumerate", "(", "batch_tree", ")", ":", "\n", "                ", "start_idx", ".", "append", "(", "start_idx", "[", "i", "]", "+", "tree", "[", "'node_size'", "]", "[", "layer", "]", ")", "\n", "\n", "", "idx", "=", "[", "]", "\n", "elem", "=", "[", "]", "\n", "for", "i", ",", "tree", "in", "enumerate", "(", "batch_tree", ")", ":", "\n", "                ", "node_size", "=", "tree", "[", "'node_size'", "]", "[", "layer", "]", "\n", "### average pooling", "\n", "if", "self", ".", "tree_pooling_type", "==", "\"average\"", ":", "\n", "                    ", "elem", ".", "extend", "(", "[", "1.", "/", "node_size", "]", "*", "node_size", ")", "\n", "### sum pooling", "\n", "", "else", ":", "\n", "                    ", "elem", ".", "extend", "(", "[", "1", "]", "*", "node_size", ")", "\n", "", "idx", ".", "extend", "(", "[", "[", "i", ",", "j", "]", "for", "j", "in", "range", "(", "start_idx", "[", "i", "]", ",", "start_idx", "[", "i", "+", "1", "]", ")", "]", ")", "\n", "", "elem", "=", "torch", ".", "FloatTensor", "(", "elem", ")", "\n", "idx", "=", "torch", ".", "LongTensor", "(", "idx", ")", ".", "transpose", "(", "0", ",", "1", ")", "\n", "tree_pool", "=", "torch", ".", "sparse", ".", "FloatTensor", "(", "idx", ",", "elem", ",", "torch", ".", "Size", "(", "[", "len", "(", "batch_tree", ")", ",", "start_idx", "[", "-", "1", "]", "]", ")", ")", "\n", "pools", ".", "append", "(", "tree_pool", ".", "to", "(", "self", ".", "device", ")", ")", "\n", "", "return", "pools", "\n", "\n"]], "home.repos.pwc.inspect_result.BUAA-WJR_SO-ET.lib.treecnn.TreeCNN.next_layer": [[96, 104], ["torch.spmm", "torch.spmm", "torch.spmm", "torch.spmm", "torch.spmm", "torch.spmm", "torch.spmm", "torch.spmm", "torch.spmm", "torch.relu", "torch.relu", "torch.relu"], "methods", ["None"], ["", "def", "next_layer", "(", "self", ",", "h", ",", "layer", ",", "padded_neighbor_list", "=", "None", ",", "Adj_block", "=", "None", ")", ":", "\n", "# pooling children nodes", "\n", "        ", "pooled", "=", "torch", ".", "spmm", "(", "Adj_block", ",", "h", ")", "\n", "hn", "=", "self", ".", "mlps", "[", "layer", "]", "(", "pooled", ")", "\n", "hn", "=", "self", ".", "batch_norms", "[", "layer", "]", "(", "hn", ")", "\n", "# non-linearity", "\n", "hn", "=", "F", ".", "relu", "(", "hn", ")", "\n", "return", "hn", "\n", "\n"]], "home.repos.pwc.inspect_result.BUAA-WJR_SO-ET.lib.treecnn.TreeCNN.forward": [[106, 134], ["torch.cat().to", "torch.cat().to", "torch.cat().to", "torch.cat().to", "torch.cat().to", "torch.cat().to", "torch.cat().to", "torch.cat().to", "torch.cat().to", "treecnn.TreeCNN.__preprocess_treepool", "treecnn.TreeCNN.__preprocess_children_sumpool", "range", "torch.dropout", "torch.dropout", "torch.dropout", "treecnn.TreeCNN.next_layer", "h_rep.append", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.spmm", "torch.spmm", "torch.spmm", "torch.spmm", "torch.spmm", "torch.spmm", "torch.spmm", "torch.spmm", "torch.spmm", "torch.dropout", "torch.dropout", "torch.dropout"], "methods", ["home.repos.pwc.inspect_result.BUAA-WJR_SO-ET.lib.treecnn.TreeCNN.__preprocess_treepool", "home.repos.pwc.inspect_result.BUAA-WJR_SO-ET.lib.treecnn.TreeCNN.__preprocess_children_sumpool", "home.repos.pwc.inspect_result.BUAA-WJR_SO-ET.lib.treecnn.TreeCNN.next_layer"], ["", "def", "forward", "(", "self", ",", "batch_tree", ")", ":", "\n", "# node_feature: (node_size, node_embedding)", "\n", "        ", "X_concat", "=", "torch", ".", "cat", "(", "[", "tree", "[", "'node_features'", "]", "for", "tree", "in", "batch_tree", "]", ",", "0", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "pools", "=", "self", ".", "__preprocess_treepool", "(", "batch_tree", ")", "\n", "\n", "h", "=", "X_concat", "\n", "h_rep", "=", "[", "h", "]", "\n", "\n", "# \u5206\u5c42\u7684\u4f20\u64ad\u77e9\u9635", "\n", "Adj_blocks", "=", "self", ".", "__preprocess_children_sumpool", "(", "batch_tree", ")", "\n", "# \u9010\u5c42\u6536\u655b", "\n", "for", "layer", "in", "range", "(", "1", ",", "self", ".", "depth", "+", "1", ")", ":", "\n", "            ", "h", "=", "self", ".", "next_layer", "(", "h", ",", "layer", ",", "Adj_block", "=", "Adj_blocks", "[", "layer", "]", ")", "\n", "h_rep", ".", "append", "(", "h", ")", "\n", "# print(layer, h)", "\n", "\n", "", "score_over_layer", "=", "0", "\n", "# batch_size * hidden_size  tree_embedding", "\n", "if", "self", ".", "tree_pooling_type", "!=", "'root'", ":", "\n", "            ", "for", "layer", "in", "range", "(", "self", ".", "depth", ")", ":", "\n", "                ", "pooled_h", "=", "torch", ".", "spmm", "(", "pools", "[", "layer", "]", ",", "h_rep", "[", "layer", "]", ")", "\n", "score_over_layer", "+=", "F", ".", "dropout", "(", "self", ".", "linears_prediction", "[", "layer", "]", "(", "pooled_h", ")", ",", "self", ".", "final_dropout", ",", "training", "=", "self", ".", "training", ")", "\n", "\n", "# root pool, \u6839\u8282\u70b9\u53ea\u6709\u4e00\u4e2a", "\n", "", "", "score", "=", "F", ".", "dropout", "(", "self", ".", "linears_prediction", "[", "self", ".", "depth", "]", "(", "h", ")", ",", "self", ".", "final_dropout", ",", "training", "=", "self", ".", "training", ")", "\n", "score_over_layer", "+=", "score", "\n", "\n", "return", "score_over_layer", "\n", "", "", ""]], "home.repos.pwc.inspect_result.BUAA-WJR_SO-ET.lib.encoding_tree.PartitionTreeNode.__init__": [[112, 122], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "ID", ",", "partition", ",", "vol", ",", "g", ",", "children", ":", "set", "=", "None", ",", "parent", "=", "None", ",", "child_h", "=", "0", ",", "child_cut", "=", "0", ")", ":", "\n", "        ", "self", ".", "ID", "=", "ID", "\n", "self", ".", "partition", "=", "partition", "\n", "self", ".", "parent", "=", "parent", "\n", "self", ".", "children", "=", "children", "\n", "self", ".", "vol", "=", "vol", "\n", "self", ".", "g", "=", "g", "\n", "self", ".", "merged", "=", "False", "\n", "self", ".", "child_h", "=", "child_h", "#\u4e0d\u5305\u62ec\u8be5\u8282\u70b9\u7684\u5b50\u6811\u9ad8\u5ea6", "\n", "self", ".", "child_cut", "=", "child_cut", "\n", "\n"]], "home.repos.pwc.inspect_result.BUAA-WJR_SO-ET.lib.encoding_tree.PartitionTreeNode.__str__": [[123, 125], ["encoding_tree.PartitionTreeNode.gatherAttrs"], "methods", ["home.repos.pwc.inspect_result.BUAA-WJR_SO-ET.lib.encoding_tree.PartitionTreeNode.gatherAttrs"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "\"{\"", "+", "\"{}:{}\"", ".", "format", "(", "self", ".", "__class__", ".", "__name__", ",", "self", ".", "gatherAttrs", "(", ")", ")", "+", "\"}\"", "\n", "\n"]], "home.repos.pwc.inspect_result.BUAA-WJR_SO-ET.lib.encoding_tree.PartitionTreeNode.gatherAttrs": [[126, 130], ["getattr", "encoding_tree.PartitionTreeNode.__dict__.keys"], "methods", ["None"], ["", "def", "gatherAttrs", "(", "self", ")", ":", "\n", "        ", "return", "\",\"", ".", "join", "(", "\"{}={}\"", "\n", ".", "format", "(", "k", ",", "getattr", "(", "self", ",", "k", ")", ")", "\n", "for", "k", "in", "self", ".", "__dict__", ".", "keys", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BUAA-WJR_SO-ET.lib.encoding_tree.PartitionTree.__init__": [[133, 140], ["encoding_tree.graph_parse", "encoding_tree.get_id", "encoding_tree.PartitionTree.build_leaves"], "methods", ["home.repos.pwc.inspect_result.BUAA-WJR_SO-ET.lib.encoding_tree.graph_parse", "home.repos.pwc.inspect_result.BUAA-WJR_SO-ET.lib.encoding_tree.get_id", "home.repos.pwc.inspect_result.BUAA-WJR_SO-ET.lib.encoding_tree.PartitionTree.build_leaves"], ["    ", "def", "__init__", "(", "self", ",", "adj_matrix", ")", ":", "\n", "        ", "self", ".", "adj_matrix", "=", "adj_matrix", "\n", "self", ".", "tree_node", "=", "{", "}", "\n", "self", ".", "g_num_nodes", ",", "self", ".", "VOL", ",", "self", ".", "node_vol", ",", "self", ".", "adj_table", "=", "graph_parse", "(", "adj_matrix", ")", "\n", "self", ".", "id_g", "=", "get_id", "(", ")", "\n", "self", ".", "leaves", "=", "[", "]", "\n", "self", ".", "build_leaves", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BUAA-WJR_SO-ET.lib.encoding_tree.PartitionTree.build_leaves": [[143, 150], ["range", "next", "encoding_tree.PartitionTreeNode", "encoding_tree.PartitionTree.leaves.append"], "methods", ["None"], ["", "def", "build_leaves", "(", "self", ")", ":", "\n", "        ", "for", "vertex", "in", "range", "(", "self", ".", "g_num_nodes", ")", ":", "\n", "            ", "ID", "=", "next", "(", "self", ".", "id_g", ")", "\n", "v", "=", "self", ".", "node_vol", "[", "vertex", "]", "\n", "leaf_node", "=", "PartitionTreeNode", "(", "ID", "=", "ID", ",", "partition", "=", "[", "vertex", "]", ",", "g", "=", "v", ",", "vol", "=", "v", ")", "\n", "self", ".", "tree_node", "[", "ID", "]", "=", "leaf_node", "\n", "self", ".", "leaves", ".", "append", "(", "ID", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BUAA-WJR_SO-ET.lib.encoding_tree.PartitionTree.build_sub_leaves": [[152, 170], ["set", "encoding_tree.PartitionTreeNode", "math.log2", "set.add"], "methods", ["None"], ["", "", "def", "build_sub_leaves", "(", "self", ",", "node_list", ",", "p_vol", ")", ":", "\n", "        ", "subgraph_node_dict", "=", "{", "}", "\n", "ori_ent", "=", "0", "\n", "for", "vertex", "in", "node_list", ":", "\n", "            ", "ori_ent", "+=", "-", "(", "self", ".", "tree_node", "[", "vertex", "]", ".", "g", "/", "self", ".", "VOL", ")", "*", "math", ".", "log2", "(", "self", ".", "tree_node", "[", "vertex", "]", ".", "vol", "/", "p_vol", ")", "\n", "sub_n", "=", "set", "(", ")", "\n", "vol", "=", "0", "\n", "for", "vertex_n", "in", "node_list", ":", "\n", "                ", "c", "=", "self", ".", "adj_matrix", "[", "vertex", ",", "vertex_n", "]", "\n", "if", "c", "!=", "0", ":", "\n", "                    ", "vol", "+=", "c", "\n", "sub_n", ".", "add", "(", "vertex_n", ")", "\n", "", "", "sub_leaf", "=", "PartitionTreeNode", "(", "ID", "=", "vertex", ",", "partition", "=", "[", "vertex", "]", ",", "g", "=", "vol", ",", "vol", "=", "vol", ")", "\n", "subgraph_node_dict", "[", "vertex", "]", "=", "sub_leaf", "\n", "self", ".", "adj_table", "[", "vertex", "]", "=", "sub_n", "\n", "\n", "", "return", "subgraph_node_dict", ",", "ori_ent", "\n", "\n"]], "home.repos.pwc.inspect_result.BUAA-WJR_SO-ET.lib.encoding_tree.PartitionTree.build_root_down": [[171, 189], ["set", "encoding_tree.PartitionTreeNode", "math.log2", "set.add"], "methods", ["None"], ["", "def", "build_root_down", "(", "self", ")", ":", "\n", "        ", "root_child", "=", "self", ".", "tree_node", "[", "self", ".", "root_id", "]", ".", "children", "\n", "subgraph_node_dict", "=", "{", "}", "\n", "ori_en", "=", "0", "\n", "g_vol", "=", "self", ".", "tree_node", "[", "self", ".", "root_id", "]", ".", "vol", "\n", "for", "node_id", "in", "root_child", ":", "\n", "            ", "node", "=", "self", ".", "tree_node", "[", "node_id", "]", "\n", "ori_en", "+=", "-", "(", "node", ".", "g", "/", "g_vol", ")", "*", "math", ".", "log2", "(", "node", ".", "vol", "/", "g_vol", ")", "\n", "new_n", "=", "set", "(", ")", "\n", "for", "nei", "in", "self", ".", "adj_table", "[", "node_id", "]", ":", "\n", "                ", "if", "nei", "in", "root_child", ":", "\n", "                    ", "new_n", ".", "add", "(", "nei", ")", "\n", "", "", "self", ".", "adj_table", "[", "node_id", "]", "=", "new_n", "\n", "\n", "new_node", "=", "PartitionTreeNode", "(", "ID", "=", "node_id", ",", "partition", "=", "node", ".", "partition", ",", "vol", "=", "node", ".", "vol", ",", "g", "=", "node", ".", "g", ",", "children", "=", "node", ".", "children", ")", "\n", "subgraph_node_dict", "[", "node_id", "]", "=", "new_node", "\n", "\n", "", "return", "subgraph_node_dict", ",", "ori_en", "\n", "\n"]], "home.repos.pwc.inspect_result.BUAA-WJR_SO-ET.lib.encoding_tree.PartitionTree.entropy": [[191, 203], ["node_dict.items", "math.log2"], "methods", ["None"], ["", "def", "entropy", "(", "self", ",", "node_dict", "=", "None", ")", ":", "\n", "        ", "if", "node_dict", "is", "None", ":", "\n", "            ", "node_dict", "=", "self", ".", "tree_node", "\n", "", "ent", "=", "0", "\n", "for", "node_id", ",", "node", "in", "node_dict", ".", "items", "(", ")", ":", "\n", "            ", "if", "node", ".", "parent", "is", "not", "None", ":", "\n", "                ", "node_p", "=", "node_dict", "[", "node", ".", "parent", "]", "\n", "node_vol", "=", "node", ".", "vol", "\n", "node_g", "=", "node", ".", "g", "\n", "node_p_vol", "=", "node_p", ".", "vol", "\n", "ent", "+=", "-", "(", "node_g", "/", "self", ".", "VOL", ")", "*", "math", ".", "log2", "(", "node_vol", "/", "node_p_vol", ")", "\n", "", "", "return", "ent", "\n", "\n"]], "home.repos.pwc.inspect_result.BUAA-WJR_SO-ET.lib.encoding_tree.PartitionTree.__build_k_tree": [[205, 292], ["nodes_dict.keys", "len", "heapq.heappop", "next", "encoding_tree.merge", "encoding_tree.PartitionTree.adj_table[].union", "next", "encoding_tree.PartitionTreeNode", "len", "encoding_tree.PartitionTree.adj_table[].add", "heapq.heappush", "heapq.heappush", "len", "max", "heapq.heappop", "encoding_tree.compressNode", "heapq.heapify", "encoding_tree.CombineDelta", "heapq.heappush", "encoding_tree.cut_volume", "encoding_tree.CombineDelta", "heapq.heappush", "nodes_dict.items", "list", "heapq.heappush", "encoding_tree.child_tree_deepth", "encoding_tree.cut_volume", "encoding_tree.CompressDelta", "encoding_tree.CompressDelta", "numpy.array", "numpy.array", "len", "len", "encoding_tree.CompressDelta", "encoding_tree.child_tree_deepth", "encoding_tree.CompressDelta", "encoding_tree.child_tree_deepth", "encoding_tree.CompressDelta", "numpy.array", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.BUAA-WJR_SO-ET.lib.encoding_tree.merge", "home.repos.pwc.inspect_result.BUAA-WJR_SO-ET.lib.encoding_tree.compressNode", "home.repos.pwc.inspect_result.BUAA-WJR_SO-ET.lib.encoding_tree.CombineDelta", "home.repos.pwc.inspect_result.BUAA-WJR_SO-ET.lib.encoding_tree.cut_volume", "home.repos.pwc.inspect_result.BUAA-WJR_SO-ET.lib.encoding_tree.CombineDelta", "home.repos.pwc.inspect_result.BUAA-WJR_SO-ET.lib.encoding_tree.child_tree_deepth", "home.repos.pwc.inspect_result.BUAA-WJR_SO-ET.lib.encoding_tree.cut_volume", "home.repos.pwc.inspect_result.BUAA-WJR_SO-ET.lib.encoding_tree.CompressDelta", "home.repos.pwc.inspect_result.BUAA-WJR_SO-ET.lib.encoding_tree.CompressDelta", "home.repos.pwc.inspect_result.BUAA-WJR_SO-ET.lib.encoding_tree.CompressDelta", "home.repos.pwc.inspect_result.BUAA-WJR_SO-ET.lib.encoding_tree.child_tree_deepth", "home.repos.pwc.inspect_result.BUAA-WJR_SO-ET.lib.encoding_tree.CompressDelta", "home.repos.pwc.inspect_result.BUAA-WJR_SO-ET.lib.encoding_tree.child_tree_deepth", "home.repos.pwc.inspect_result.BUAA-WJR_SO-ET.lib.encoding_tree.CompressDelta"], ["", "def", "__build_k_tree", "(", "self", ",", "g_vol", ",", "nodes_dict", ":", "dict", ",", "k", "=", "None", ",", ")", ":", "\n", "        ", "min_heap", "=", "[", "]", "\n", "cmp_heap", "=", "[", "]", "\n", "nodes_ids", "=", "nodes_dict", ".", "keys", "(", ")", "\n", "new_id", "=", "None", "\n", "for", "i", "in", "nodes_ids", ":", "\n", "            ", "for", "j", "in", "self", ".", "adj_table", "[", "i", "]", ":", "\n", "                ", "if", "j", ">", "i", ":", "\n", "                    ", "n1", "=", "nodes_dict", "[", "i", "]", "\n", "n2", "=", "nodes_dict", "[", "j", "]", "\n", "if", "len", "(", "n1", ".", "partition", ")", "==", "1", "and", "len", "(", "n2", ".", "partition", ")", "==", "1", ":", "\n", "                        ", "cut_v", "=", "self", ".", "adj_matrix", "[", "n1", ".", "partition", "[", "0", "]", ",", "n2", ".", "partition", "[", "0", "]", "]", "\n", "", "else", ":", "\n", "                        ", "cut_v", "=", "cut_volume", "(", "self", ".", "adj_matrix", ",", "p1", "=", "np", ".", "array", "(", "n1", ".", "partition", ")", ",", "p2", "=", "np", ".", "array", "(", "n2", ".", "partition", ")", ")", "\n", "", "diff", "=", "CombineDelta", "(", "nodes_dict", "[", "i", "]", ",", "nodes_dict", "[", "j", "]", ",", "cut_v", ",", "g_vol", ")", "\n", "heapq", ".", "heappush", "(", "min_heap", ",", "(", "diff", ",", "i", ",", "j", ",", "cut_v", ")", ")", "\n", "", "", "", "unmerged_count", "=", "len", "(", "nodes_ids", ")", "\n", "while", "unmerged_count", ">", "1", ":", "\n", "            ", "if", "len", "(", "min_heap", ")", "==", "0", ":", "\n", "                ", "break", "\n", "", "diff", ",", "id1", ",", "id2", ",", "cut_v", "=", "heapq", ".", "heappop", "(", "min_heap", ")", "\n", "if", "nodes_dict", "[", "id1", "]", ".", "merged", "or", "nodes_dict", "[", "id2", "]", ".", "merged", ":", "\n", "                ", "continue", "\n", "", "nodes_dict", "[", "id1", "]", ".", "merged", "=", "True", "\n", "nodes_dict", "[", "id2", "]", ".", "merged", "=", "True", "\n", "new_id", "=", "next", "(", "self", ".", "id_g", ")", "\n", "merge", "(", "new_id", ",", "id1", ",", "id2", ",", "cut_v", ",", "nodes_dict", ")", "\n", "self", ".", "adj_table", "[", "new_id", "]", "=", "self", ".", "adj_table", "[", "id1", "]", ".", "union", "(", "self", ".", "adj_table", "[", "id2", "]", ")", "\n", "for", "i", "in", "self", ".", "adj_table", "[", "new_id", "]", ":", "\n", "                ", "self", ".", "adj_table", "[", "i", "]", ".", "add", "(", "new_id", ")", "\n", "#compress delta", "\n", "", "if", "nodes_dict", "[", "id1", "]", ".", "child_h", ">", "0", ":", "\n", "                ", "heapq", ".", "heappush", "(", "cmp_heap", ",", "[", "CompressDelta", "(", "nodes_dict", "[", "id1", "]", ",", "nodes_dict", "[", "new_id", "]", ")", ",", "id1", ",", "new_id", "]", ")", "\n", "", "if", "nodes_dict", "[", "id2", "]", ".", "child_h", ">", "0", ":", "\n", "                ", "heapq", ".", "heappush", "(", "cmp_heap", ",", "[", "CompressDelta", "(", "nodes_dict", "[", "id2", "]", ",", "nodes_dict", "[", "new_id", "]", ")", ",", "id2", ",", "new_id", "]", ")", "\n", "", "unmerged_count", "-=", "1", "\n", "\n", "for", "ID", "in", "self", ".", "adj_table", "[", "new_id", "]", ":", "\n", "                ", "if", "not", "nodes_dict", "[", "ID", "]", ".", "merged", ":", "\n", "                    ", "n1", "=", "nodes_dict", "[", "ID", "]", "\n", "n2", "=", "nodes_dict", "[", "new_id", "]", "\n", "cut_v", "=", "cut_volume", "(", "self", ".", "adj_matrix", ",", "np", ".", "array", "(", "n1", ".", "partition", ")", ",", "np", ".", "array", "(", "n2", ".", "partition", ")", ")", "\n", "\n", "new_diff", "=", "CombineDelta", "(", "nodes_dict", "[", "ID", "]", ",", "nodes_dict", "[", "new_id", "]", ",", "cut_v", ",", "g_vol", ")", "\n", "heapq", ".", "heappush", "(", "min_heap", ",", "(", "new_diff", ",", "ID", ",", "new_id", ",", "cut_v", ")", ")", "\n", "", "", "", "root", "=", "new_id", "\n", "\n", "if", "unmerged_count", ">", "1", ":", "\n", "#combine solitary node", "\n", "# print('processing solitary node')", "\n", "            ", "assert", "len", "(", "min_heap", ")", "==", "0", "\n", "unmerged_nodes", "=", "{", "i", "for", "i", ",", "j", "in", "nodes_dict", ".", "items", "(", ")", "if", "not", "j", ".", "merged", "}", "\n", "new_child_h", "=", "max", "(", "[", "nodes_dict", "[", "i", "]", ".", "child_h", "for", "i", "in", "unmerged_nodes", "]", ")", "+", "1", "\n", "\n", "new_id", "=", "next", "(", "self", ".", "id_g", ")", "\n", "new_node", "=", "PartitionTreeNode", "(", "ID", "=", "new_id", ",", "partition", "=", "list", "(", "nodes_ids", ")", ",", "children", "=", "unmerged_nodes", ",", "\n", "vol", "=", "g_vol", ",", "g", "=", "0", ",", "child_h", "=", "new_child_h", ")", "\n", "nodes_dict", "[", "new_id", "]", "=", "new_node", "\n", "\n", "for", "i", "in", "unmerged_nodes", ":", "\n", "                ", "nodes_dict", "[", "i", "]", ".", "merged", "=", "True", "\n", "nodes_dict", "[", "i", "]", ".", "parent", "=", "new_id", "\n", "if", "nodes_dict", "[", "i", "]", ".", "child_h", ">", "0", ":", "\n", "                    ", "heapq", ".", "heappush", "(", "cmp_heap", ",", "[", "CompressDelta", "(", "nodes_dict", "[", "i", "]", ",", "nodes_dict", "[", "new_id", "]", ")", ",", "i", ",", "new_id", "]", ")", "\n", "", "", "root", "=", "new_id", "\n", "\n", "", "if", "k", "is", "not", "None", ":", "\n", "            ", "while", "nodes_dict", "[", "root", "]", ".", "child_h", ">", "k", ":", "\n", "                ", "diff", ",", "node_id", ",", "p_id", "=", "heapq", ".", "heappop", "(", "cmp_heap", ")", "\n", "if", "child_tree_deepth", "(", "nodes_dict", ",", "node_id", ")", "<=", "k", ":", "\n", "                    ", "continue", "\n", "", "children", "=", "nodes_dict", "[", "node_id", "]", ".", "children", "\n", "compressNode", "(", "nodes_dict", ",", "node_id", ",", "p_id", ")", "\n", "if", "nodes_dict", "[", "root", "]", ".", "child_h", "==", "k", ":", "\n", "                    ", "break", "\n", "", "for", "e", "in", "cmp_heap", ":", "\n", "                    ", "if", "e", "[", "1", "]", "==", "p_id", ":", "\n", "                        ", "if", "child_tree_deepth", "(", "nodes_dict", ",", "p_id", ")", ">", "k", ":", "\n", "                            ", "e", "[", "0", "]", "=", "CompressDelta", "(", "nodes_dict", "[", "e", "[", "1", "]", "]", ",", "nodes_dict", "[", "e", "[", "2", "]", "]", ")", "\n", "", "", "if", "e", "[", "1", "]", "in", "children", ":", "\n", "                        ", "if", "nodes_dict", "[", "e", "[", "1", "]", "]", ".", "child_h", "==", "0", ":", "\n", "                            ", "continue", "\n", "", "if", "child_tree_deepth", "(", "nodes_dict", ",", "e", "[", "1", "]", ")", ">", "k", ":", "\n", "                            ", "e", "[", "2", "]", "=", "p_id", "\n", "e", "[", "0", "]", "=", "CompressDelta", "(", "nodes_dict", "[", "e", "[", "1", "]", "]", ",", "nodes_dict", "[", "p_id", "]", ")", "\n", "", "", "", "heapq", ".", "heapify", "(", "cmp_heap", ")", "\n", "", "", "return", "root", "\n", "\n"]], "home.repos.pwc.inspect_result.BUAA-WJR_SO-ET.lib.encoding_tree.PartitionTree.check_balance": [[294, 299], ["copy.deepcopy", "encoding_tree.PartitionTree.single_up"], "methods", ["home.repos.pwc.inspect_result.BUAA-WJR_SO-ET.lib.encoding_tree.PartitionTree.single_up"], ["", "def", "check_balance", "(", "self", ",", "node_dict", ",", "root_id", ")", ":", "\n", "        ", "root_c", "=", "copy", ".", "deepcopy", "(", "node_dict", "[", "root_id", "]", ".", "children", ")", "\n", "for", "c", "in", "root_c", ":", "\n", "            ", "if", "node_dict", "[", "c", "]", ".", "child_h", "==", "0", ":", "\n", "                ", "self", ".", "single_up", "(", "node_dict", ",", "c", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BUAA-WJR_SO-ET.lib.encoding_tree.PartitionTree.single_up": [[300, 313], ["next", "encoding_tree.PartitionTreeNode", "node_dict[].children.remove", "node_dict[].children.add", "encoding_tree.PartitionTree.adj_table[].add"], "methods", ["None"], ["", "", "", "def", "single_up", "(", "self", ",", "node_dict", ",", "node_id", ")", ":", "\n", "        ", "new_id", "=", "next", "(", "self", ".", "id_g", ")", "\n", "p_id", "=", "node_dict", "[", "node_id", "]", ".", "parent", "\n", "grow_node", "=", "PartitionTreeNode", "(", "ID", "=", "new_id", ",", "partition", "=", "node_dict", "[", "node_id", "]", ".", "partition", ",", "parent", "=", "p_id", ",", "\n", "children", "=", "{", "node_id", "}", ",", "vol", "=", "node_dict", "[", "node_id", "]", ".", "vol", ",", "g", "=", "node_dict", "[", "node_id", "]", ".", "g", ")", "\n", "node_dict", "[", "node_id", "]", ".", "parent", "=", "new_id", "\n", "node_dict", "[", "p_id", "]", ".", "children", ".", "remove", "(", "node_id", ")", "\n", "node_dict", "[", "p_id", "]", ".", "children", ".", "add", "(", "new_id", ")", "\n", "node_dict", "[", "new_id", "]", "=", "grow_node", "\n", "node_dict", "[", "new_id", "]", ".", "child_h", "=", "node_dict", "[", "node_id", "]", ".", "child_h", "+", "1", "\n", "self", ".", "adj_table", "[", "new_id", "]", "=", "self", ".", "adj_table", "[", "node_id", "]", "\n", "for", "i", "in", "self", ".", "adj_table", "[", "node_id", "]", ":", "\n", "            ", "self", ".", "adj_table", "[", "i", "]", ".", "add", "(", "new_id", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BUAA-WJR_SO-ET.lib.encoding_tree.PartitionTree.root_down_delta": [[316, 327], ["encoding_tree.PartitionTree.build_root_down", "encoding_tree.PartitionTree.__build_k_tree", "encoding_tree.PartitionTree.check_balance", "encoding_tree.PartitionTree.entropy", "len", "len"], "methods", ["home.repos.pwc.inspect_result.BUAA-WJR_SO-ET.lib.encoding_tree.PartitionTree.build_root_down", "home.repos.pwc.inspect_result.BUAA-WJR_SO-ET.lib.encoding_tree.PartitionTree.__build_k_tree", "home.repos.pwc.inspect_result.BUAA-WJR_SO-ET.lib.encoding_tree.PartitionTree.check_balance", "home.repos.pwc.inspect_result.BUAA-WJR_SO-ET.lib.encoding_tree.PartitionTree.entropy"], ["", "", "def", "root_down_delta", "(", "self", ")", ":", "\n", "        ", "if", "len", "(", "self", ".", "tree_node", "[", "self", ".", "root_id", "]", ".", "children", ")", "<", "3", ":", "\n", "            ", "return", "0", ",", "None", ",", "None", "\n", "", "subgraph_node_dict", ",", "ori_entropy", "=", "self", ".", "build_root_down", "(", ")", "\n", "g_vol", "=", "self", ".", "tree_node", "[", "self", ".", "root_id", "]", ".", "vol", "\n", "new_root", "=", "self", ".", "__build_k_tree", "(", "g_vol", "=", "g_vol", ",", "nodes_dict", "=", "subgraph_node_dict", ",", "k", "=", "2", ")", "\n", "self", ".", "check_balance", "(", "subgraph_node_dict", ",", "new_root", ")", "\n", "\n", "new_entropy", "=", "self", ".", "entropy", "(", "subgraph_node_dict", ")", "\n", "delta", "=", "(", "ori_entropy", "-", "new_entropy", ")", "/", "len", "(", "self", ".", "tree_node", "[", "self", ".", "root_id", "]", ".", "children", ")", "\n", "return", "delta", ",", "new_root", ",", "subgraph_node_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.BUAA-WJR_SO-ET.lib.encoding_tree.PartitionTree.leaf_up_entropy": [[328, 352], ["encoding_tree.LayerFirst", "sum", "math.log2", "math.log2"], "methods", ["home.repos.pwc.inspect_result.BUAA-WJR_SO-ET.lib.encoding_tree.LayerFirst"], ["", "def", "leaf_up_entropy", "(", "self", ",", "sub_node_dict", ",", "sub_root_id", ",", "node_id", ")", ":", "\n", "        ", "ent", "=", "0", "\n", "for", "sub_node_id", "in", "LayerFirst", "(", "sub_node_dict", ",", "sub_root_id", ")", ":", "\n", "            ", "if", "sub_node_id", "==", "sub_root_id", ":", "\n", "                ", "sub_node_dict", "[", "sub_root_id", "]", ".", "vol", "=", "self", ".", "tree_node", "[", "node_id", "]", ".", "vol", "\n", "sub_node_dict", "[", "sub_root_id", "]", ".", "g", "=", "self", ".", "tree_node", "[", "node_id", "]", ".", "g", "\n", "\n", "", "elif", "sub_node_dict", "[", "sub_node_id", "]", ".", "child_h", "==", "1", ":", "\n", "                ", "node", "=", "sub_node_dict", "[", "sub_node_id", "]", "\n", "inner_vol", "=", "node", ".", "vol", "-", "node", ".", "g", "\n", "partition", "=", "node", ".", "partition", "\n", "ori_vol", "=", "sum", "(", "self", ".", "tree_node", "[", "i", "]", ".", "vol", "for", "i", "in", "partition", ")", "\n", "ori_g", "=", "ori_vol", "-", "inner_vol", "\n", "node", ".", "vol", "=", "ori_vol", "\n", "node", ".", "g", "=", "ori_g", "\n", "node_p", "=", "sub_node_dict", "[", "node", ".", "parent", "]", "\n", "ent", "+=", "-", "(", "node", ".", "g", "/", "self", ".", "VOL", ")", "*", "math", ".", "log2", "(", "node", ".", "vol", "/", "node_p", ".", "vol", ")", "\n", "", "else", ":", "\n", "                ", "node", "=", "sub_node_dict", "[", "sub_node_id", "]", "\n", "node", ".", "g", "=", "self", ".", "tree_node", "[", "sub_node_id", "]", ".", "g", "\n", "node", ".", "vol", "=", "self", ".", "tree_node", "[", "sub_node_id", "]", ".", "vol", "\n", "node_p", "=", "sub_node_dict", "[", "node", ".", "parent", "]", "\n", "ent", "+=", "-", "(", "node", ".", "g", "/", "self", ".", "VOL", ")", "*", "math", ".", "log2", "(", "node", ".", "vol", "/", "node_p", ".", "vol", ")", "\n", "", "", "return", "ent", "\n", "\n"]], "home.repos.pwc.inspect_result.BUAA-WJR_SO-ET.lib.encoding_tree.PartitionTree.leaf_up": [[353, 379], ["set", "set.add", "len", "len", "len", "encoding_tree.PartitionTree.build_sub_leaves", "encoding_tree.PartitionTree.__build_k_tree", "encoding_tree.PartitionTree.check_balance", "encoding_tree.PartitionTree.leaf_up_entropy"], "methods", ["home.repos.pwc.inspect_result.BUAA-WJR_SO-ET.lib.encoding_tree.PartitionTree.build_sub_leaves", "home.repos.pwc.inspect_result.BUAA-WJR_SO-ET.lib.encoding_tree.PartitionTree.__build_k_tree", "home.repos.pwc.inspect_result.BUAA-WJR_SO-ET.lib.encoding_tree.PartitionTree.check_balance", "home.repos.pwc.inspect_result.BUAA-WJR_SO-ET.lib.encoding_tree.PartitionTree.leaf_up_entropy"], ["", "def", "leaf_up", "(", "self", ")", ":", "\n", "        ", "h1_id", "=", "set", "(", ")", "\n", "h1_new_child_tree", "=", "{", "}", "\n", "id_mapping", "=", "{", "}", "\n", "for", "l", "in", "self", ".", "leaves", ":", "\n", "            ", "p", "=", "self", ".", "tree_node", "[", "l", "]", ".", "parent", "\n", "h1_id", ".", "add", "(", "p", ")", "\n", "", "delta", "=", "0", "\n", "for", "node_id", "in", "h1_id", ":", "\n", "            ", "candidate_node", "=", "self", ".", "tree_node", "[", "node_id", "]", "\n", "sub_nodes", "=", "candidate_node", ".", "partition", "\n", "if", "len", "(", "sub_nodes", ")", "==", "1", ":", "\n", "                ", "id_mapping", "[", "node_id", "]", "=", "None", "\n", "", "if", "len", "(", "sub_nodes", ")", "==", "2", ":", "\n", "                ", "id_mapping", "[", "node_id", "]", "=", "None", "\n", "", "if", "len", "(", "sub_nodes", ")", ">=", "3", ":", "\n", "                ", "sub_g_vol", "=", "candidate_node", ".", "vol", "-", "candidate_node", ".", "g", "\n", "subgraph_node_dict", ",", "ori_ent", "=", "self", ".", "build_sub_leaves", "(", "sub_nodes", ",", "candidate_node", ".", "vol", ")", "\n", "sub_root", "=", "self", ".", "__build_k_tree", "(", "g_vol", "=", "sub_g_vol", ",", "nodes_dict", "=", "subgraph_node_dict", ",", "k", "=", "2", ")", "\n", "self", ".", "check_balance", "(", "subgraph_node_dict", ",", "sub_root", ")", "\n", "new_ent", "=", "self", ".", "leaf_up_entropy", "(", "subgraph_node_dict", ",", "sub_root", ",", "node_id", ")", "\n", "delta", "+=", "(", "ori_ent", "-", "new_ent", ")", "\n", "h1_new_child_tree", "[", "node_id", "]", "=", "subgraph_node_dict", "\n", "id_mapping", "[", "node_id", "]", "=", "sub_root", "\n", "", "", "delta", "=", "delta", "/", "self", ".", "g_num_nodes", "\n", "return", "delta", ",", "id_mapping", ",", "h1_new_child_tree", "\n", "\n"]], "home.repos.pwc.inspect_result.BUAA-WJR_SO-ET.lib.encoding_tree.PartitionTree.leaf_up_update": [[380, 395], ["id_mapping.items", "copy.deepcopy", "h1_dict.pop", "encoding_tree.PartitionTree.tree_node.update", "encoding_tree.PartitionTree.single_up"], "methods", ["home.repos.pwc.inspect_result.BUAA-WJR_SO-ET.lib.encoding_tree.PartitionTree.single_up"], ["", "def", "leaf_up_update", "(", "self", ",", "id_mapping", ",", "leaf_up_dict", ")", ":", "\n", "        ", "for", "node_id", ",", "h1_root", "in", "id_mapping", ".", "items", "(", ")", ":", "\n", "            ", "if", "h1_root", "is", "None", ":", "\n", "                ", "children", "=", "copy", ".", "deepcopy", "(", "self", ".", "tree_node", "[", "node_id", "]", ".", "children", ")", "\n", "for", "i", "in", "children", ":", "\n", "                    ", "self", ".", "single_up", "(", "self", ".", "tree_node", ",", "i", ")", "\n", "", "", "else", ":", "\n", "                ", "h1_dict", "=", "leaf_up_dict", "[", "node_id", "]", "\n", "self", ".", "tree_node", "[", "node_id", "]", ".", "children", "=", "h1_dict", "[", "h1_root", "]", ".", "children", "\n", "for", "h1_c", "in", "h1_dict", "[", "h1_root", "]", ".", "children", ":", "\n", "                    ", "assert", "h1_c", "not", "in", "self", ".", "tree_node", "\n", "h1_dict", "[", "h1_c", "]", ".", "parent", "=", "node_id", "\n", "", "h1_dict", ".", "pop", "(", "h1_root", ")", "\n", "self", ".", "tree_node", ".", "update", "(", "h1_dict", ")", "\n", "", "", "self", ".", "tree_node", "[", "self", ".", "root_id", "]", ".", "child_h", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.BUAA-WJR_SO-ET.lib.encoding_tree.PartitionTree.root_down_update": [[397, 405], ["root_down_dict.pop", "encoding_tree.PartitionTree.tree_node.update"], "methods", ["None"], ["", "def", "root_down_update", "(", "self", ",", "new_id", ",", "root_down_dict", ")", ":", "\n", "        ", "self", ".", "tree_node", "[", "self", ".", "root_id", "]", ".", "children", "=", "root_down_dict", "[", "new_id", "]", ".", "children", "\n", "for", "node_id", "in", "root_down_dict", "[", "new_id", "]", ".", "children", ":", "\n", "            ", "assert", "node_id", "not", "in", "self", ".", "tree_node", "\n", "root_down_dict", "[", "node_id", "]", ".", "parent", "=", "self", ".", "root_id", "\n", "", "root_down_dict", ".", "pop", "(", "new_id", ")", "\n", "self", ".", "tree_node", ".", "update", "(", "root_down_dict", ")", "\n", "self", ".", "tree_node", "[", "self", ".", "root_id", "]", ".", "child_h", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.BUAA-WJR_SO-ET.lib.encoding_tree.PartitionTree.build_encoding_tree": [[406, 456], ["encoding_tree.LayerFirst", "encoding_tree.PartitionTree.__build_k_tree", "len", "encoding_tree.PartitionTree.__build_k_tree", "encoding_tree.PartitionTree.check_balance", "encoding_tree.PartitionTree.leaf_up", "encoding_tree.PartitionTree.root_down_delta", "encoding_tree.PartitionTree.root_down_update", "encoding_tree.PartitionTree.leaf_up_update", "encoding_tree.PartitionTree.leaf_up", "root_down_dict.items", "encoding_tree.PartitionTree.root_down_delta"], "methods", ["home.repos.pwc.inspect_result.BUAA-WJR_SO-ET.lib.encoding_tree.LayerFirst", "home.repos.pwc.inspect_result.BUAA-WJR_SO-ET.lib.encoding_tree.PartitionTree.__build_k_tree", "home.repos.pwc.inspect_result.BUAA-WJR_SO-ET.lib.encoding_tree.PartitionTree.__build_k_tree", "home.repos.pwc.inspect_result.BUAA-WJR_SO-ET.lib.encoding_tree.PartitionTree.check_balance", "home.repos.pwc.inspect_result.BUAA-WJR_SO-ET.lib.encoding_tree.PartitionTree.leaf_up", "home.repos.pwc.inspect_result.BUAA-WJR_SO-ET.lib.encoding_tree.PartitionTree.root_down_delta", "home.repos.pwc.inspect_result.BUAA-WJR_SO-ET.lib.encoding_tree.PartitionTree.root_down_update", "home.repos.pwc.inspect_result.BUAA-WJR_SO-ET.lib.encoding_tree.PartitionTree.leaf_up_update", "home.repos.pwc.inspect_result.BUAA-WJR_SO-ET.lib.encoding_tree.PartitionTree.leaf_up", "home.repos.pwc.inspect_result.BUAA-WJR_SO-ET.lib.encoding_tree.PartitionTree.root_down_delta"], ["", "def", "build_encoding_tree", "(", "self", ",", "k", "=", "2", ",", "mode", "=", "'v2'", ")", ":", "\n", "        ", "if", "k", "==", "1", ":", "\n", "            ", "return", "\n", "", "if", "mode", "==", "'v1'", "or", "k", "is", "None", ":", "\n", "            ", "self", ".", "root_id", "=", "self", ".", "__build_k_tree", "(", "self", ".", "VOL", ",", "self", ".", "tree_node", ",", "k", "=", "k", ")", "\n", "", "elif", "mode", "==", "'v2'", ":", "\n", "            ", "self", ".", "root_id", "=", "self", ".", "__build_k_tree", "(", "self", ".", "VOL", ",", "self", ".", "tree_node", ",", "k", "=", "2", ")", "\n", "self", ".", "check_balance", "(", "self", ".", "tree_node", ",", "self", ".", "root_id", ")", "\n", "\n", "if", "self", ".", "tree_node", "[", "self", ".", "root_id", "]", ".", "child_h", "<", "2", ":", "\n", "                ", "self", ".", "tree_node", "[", "self", ".", "root_id", "]", ".", "child_h", "=", "2", "\n", "\n", "\n", "", "flag", "=", "0", "\n", "while", "self", ".", "tree_node", "[", "self", ".", "root_id", "]", ".", "child_h", "<", "k", ":", "\n", "                ", "if", "flag", "==", "0", ":", "\n", "                    ", "leaf_up_delta", ",", "id_mapping", ",", "leaf_up_dict", "=", "self", ".", "leaf_up", "(", ")", "\n", "root_down_delta", ",", "new_id", ",", "root_down_dict", "=", "self", ".", "root_down_delta", "(", ")", "\n", "\n", "", "elif", "flag", "==", "1", ":", "\n", "                    ", "leaf_up_delta", ",", "id_mapping", ",", "leaf_up_dict", "=", "self", ".", "leaf_up", "(", ")", "\n", "", "elif", "flag", "==", "2", ":", "\n", "                    ", "root_down_delta", ",", "new_id", ",", "root_down_dict", "=", "self", ".", "root_down_delta", "(", ")", "\n", "", "else", ":", "\n", "                    ", "raise", "ValueError", "\n", "\n", "", "if", "leaf_up_delta", "<", "root_down_delta", ":", "\n", "# print('root down')", "\n", "# root down update and recompute root down delta", "\n", "                    ", "flag", "=", "2", "\n", "self", ".", "root_down_update", "(", "new_id", ",", "root_down_dict", ")", "\n", "\n", "", "else", ":", "\n", "# leaf up update", "\n", "# print('leave up')", "\n", "                    ", "flag", "=", "1", "\n", "# print(self.tree_node[self.root_id].child_h)", "\n", "self", ".", "leaf_up_update", "(", "id_mapping", ",", "leaf_up_dict", ")", "\n", "# print(self.tree_node[self.root_id].child_h)", "\n", "\n", "\n", "# update root down leave nodes' children", "\n", "if", "root_down_delta", "!=", "0", ":", "\n", "                        ", "for", "root_down_id", ",", "root_down_node", "in", "root_down_dict", ".", "items", "(", ")", ":", "\n", "                            ", "if", "root_down_node", ".", "child_h", "==", "0", ":", "\n", "                                ", "root_down_node", ".", "children", "=", "self", ".", "tree_node", "[", "root_down_id", "]", ".", "children", "\n", "", "", "", "", "", "", "count", "=", "0", "\n", "for", "_", "in", "LayerFirst", "(", "self", ".", "tree_node", ",", "self", ".", "root_id", ")", ":", "\n", "            ", "count", "+=", "1", "\n", "", "assert", "len", "(", "self", ".", "tree_node", ")", "==", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.BUAA-WJR_SO-ET.lib.encoding_tree.get_id": [[7, 12], ["None"], "function", ["None"], ["def", "get_id", "(", ")", ":", "\n", "    ", "i", "=", "0", "\n", "while", "True", ":", "\n", "        ", "yield", "i", "\n", "i", "+=", "1", "\n", "", "", "def", "graph_parse", "(", "adj_matrix", ")", ":", "\n"]], "home.repos.pwc.inspect_result.BUAA-WJR_SO-ET.lib.encoding_tree.graph_parse": [[12, 28], ["range", "set", "range", "node_vol.append", "set.add"], "function", ["None"], ["", "", "def", "graph_parse", "(", "adj_matrix", ")", ":", "\n", "    ", "g_num_nodes", "=", "adj_matrix", ".", "shape", "[", "0", "]", "\n", "adj_table", "=", "{", "}", "\n", "VOL", "=", "0", "\n", "node_vol", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "g_num_nodes", ")", ":", "\n", "        ", "n_v", "=", "0", "\n", "adj", "=", "set", "(", ")", "\n", "for", "j", "in", "range", "(", "g_num_nodes", ")", ":", "\n", "            ", "if", "adj_matrix", "[", "i", ",", "j", "]", "!=", "0", ":", "\n", "                ", "n_v", "+=", "adj_matrix", "[", "i", ",", "j", "]", "\n", "VOL", "+=", "adj_matrix", "[", "i", ",", "j", "]", "\n", "adj", ".", "add", "(", "j", ")", "\n", "", "", "adj_table", "[", "i", "]", "=", "adj", "\n", "node_vol", ".", "append", "(", "n_v", ")", "\n", "", "return", "g_num_nodes", ",", "VOL", ",", "node_vol", ",", "adj_table", "\n", "\n"]], "home.repos.pwc.inspect_result.BUAA-WJR_SO-ET.lib.encoding_tree.cut_volume": [[29, 38], ["numba.jit", "range", "len", "range", "len"], "function", ["None"], ["", "@", "nb", ".", "jit", "(", "nopython", "=", "True", ")", "\n", "def", "cut_volume", "(", "adj_matrix", ",", "p1", ",", "p2", ")", ":", "\n", "    ", "c12", "=", "0", "\n", "for", "i", "in", "range", "(", "len", "(", "p1", ")", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "len", "(", "p2", ")", ")", ":", "\n", "            ", "c", "=", "adj_matrix", "[", "p1", "[", "i", "]", ",", "p2", "[", "j", "]", "]", "\n", "if", "c", "!=", "0", ":", "\n", "                ", "c12", "+=", "c", "\n", "", "", "", "return", "c12", "\n", "\n"]], "home.repos.pwc.inspect_result.BUAA-WJR_SO-ET.lib.encoding_tree.LayerFirst": [[39, 47], ["len", "stack.pop", "stack.append"], "function", ["None"], ["", "def", "LayerFirst", "(", "node_dict", ",", "start_id", ")", ":", "\n", "    ", "stack", "=", "[", "start_id", "]", "\n", "while", "len", "(", "stack", ")", "!=", "0", ":", "\n", "        ", "node_id", "=", "stack", ".", "pop", "(", "0", ")", "\n", "yield", "node_id", "\n", "if", "node_dict", "[", "node_id", "]", ".", "children", ":", "\n", "            ", "for", "c_id", "in", "node_dict", "[", "node_id", "]", ".", "children", ":", "\n", "                ", "stack", ".", "append", "(", "c_id", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BUAA-WJR_SO-ET.lib.encoding_tree.merge": [[49, 59], ["encoding_tree.PartitionTreeNode", "max"], "function", ["None"], ["", "", "", "", "def", "merge", "(", "new_ID", ",", "id1", ",", "id2", ",", "cut_v", ",", "node_dict", ")", ":", "\n", "    ", "new_partition", "=", "node_dict", "[", "id1", "]", ".", "partition", "+", "node_dict", "[", "id2", "]", ".", "partition", "\n", "v", "=", "node_dict", "[", "id1", "]", ".", "vol", "+", "node_dict", "[", "id2", "]", ".", "vol", "\n", "g", "=", "node_dict", "[", "id1", "]", ".", "g", "+", "node_dict", "[", "id2", "]", ".", "g", "-", "2", "*", "cut_v", "\n", "child_h", "=", "max", "(", "node_dict", "[", "id1", "]", ".", "child_h", ",", "node_dict", "[", "id2", "]", ".", "child_h", ")", "+", "1", "\n", "new_node", "=", "PartitionTreeNode", "(", "ID", "=", "new_ID", ",", "partition", "=", "new_partition", ",", "children", "=", "{", "id1", ",", "id2", "}", ",", "\n", "g", "=", "g", ",", "vol", "=", "v", ",", "child_h", "=", "child_h", ",", "child_cut", "=", "cut_v", ")", "\n", "node_dict", "[", "id1", "]", ".", "parent", "=", "new_ID", "\n", "node_dict", "[", "id2", "]", ".", "parent", "=", "new_ID", "\n", "node_dict", "[", "new_ID", "]", "=", "new_node", "\n", "\n"]], "home.repos.pwc.inspect_result.BUAA-WJR_SO-ET.lib.encoding_tree.compressNode": [[61, 81], ["node_dict[].children.remove", "node_dict[].children.union", "node_dict.pop", "max"], "function", ["None"], ["", "def", "compressNode", "(", "node_dict", ",", "node_id", ",", "parent_id", ")", ":", "\n", "    ", "p_child_h", "=", "node_dict", "[", "parent_id", "]", ".", "child_h", "\n", "node_children", "=", "node_dict", "[", "node_id", "]", ".", "children", "\n", "node_dict", "[", "parent_id", "]", ".", "child_cut", "+=", "node_dict", "[", "node_id", "]", ".", "child_cut", "\n", "node_dict", "[", "parent_id", "]", ".", "children", ".", "remove", "(", "node_id", ")", "\n", "node_dict", "[", "parent_id", "]", ".", "children", "=", "node_dict", "[", "parent_id", "]", ".", "children", ".", "union", "(", "node_children", ")", "\n", "for", "c", "in", "node_children", ":", "\n", "        ", "node_dict", "[", "c", "]", ".", "parent", "=", "parent_id", "\n", "", "com_node_child_h", "=", "node_dict", "[", "node_id", "]", ".", "child_h", "\n", "node_dict", ".", "pop", "(", "node_id", ")", "\n", "\n", "if", "(", "p_child_h", "-", "com_node_child_h", ")", "==", "1", ":", "\n", "        ", "while", "True", ":", "\n", "            ", "max_child_h", "=", "max", "(", "[", "node_dict", "[", "f_c", "]", ".", "child_h", "for", "f_c", "in", "node_dict", "[", "parent_id", "]", ".", "children", "]", ")", "\n", "if", "node_dict", "[", "parent_id", "]", ".", "child_h", "==", "(", "max_child_h", "+", "1", ")", ":", "\n", "                ", "break", "\n", "", "node_dict", "[", "parent_id", "]", ".", "child_h", "=", "max_child_h", "+", "1", "\n", "parent_id", "=", "node_dict", "[", "parent_id", "]", ".", "parent", "\n", "if", "parent_id", "is", "None", ":", "\n", "                ", "break", "\n", "\n"]], "home.repos.pwc.inspect_result.BUAA-WJR_SO-ET.lib.encoding_tree.child_tree_deepth": [[84, 92], ["None"], "function", ["None"], ["", "", "", "", "def", "child_tree_deepth", "(", "node_dict", ",", "nid", ")", ":", "\n", "    ", "node", "=", "node_dict", "[", "nid", "]", "\n", "deepth", "=", "0", "\n", "while", "node", ".", "parent", "is", "not", "None", ":", "\n", "        ", "node", "=", "node_dict", "[", "node", ".", "parent", "]", "\n", "deepth", "+=", "1", "\n", "", "deepth", "+=", "node_dict", "[", "nid", "]", ".", "child_h", "\n", "return", "deepth", "\n", "\n"]], "home.repos.pwc.inspect_result.BUAA-WJR_SO-ET.lib.encoding_tree.CompressDelta": [[94, 99], ["math.log"], "function", ["None"], ["", "def", "CompressDelta", "(", "node1", ",", "p_node", ")", ":", "\n", "    ", "a", "=", "node1", ".", "child_cut", "\n", "v1", "=", "node1", ".", "vol", "\n", "v2", "=", "p_node", ".", "vol", "\n", "return", "a", "*", "math", ".", "log", "(", "v2", "/", "v1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BUAA-WJR_SO-ET.lib.encoding_tree.CombineDelta": [[101, 108], ["math.log", "math.log", "math.log"], "function", ["None"], ["", "def", "CombineDelta", "(", "node1", ",", "node2", ",", "cut_v", ",", "g_vol", ")", ":", "\n", "    ", "v1", "=", "node1", ".", "vol", "\n", "v2", "=", "node2", ".", "vol", "\n", "g1", "=", "node1", ".", "g", "\n", "g2", "=", "node2", ".", "g", "\n", "v12", "=", "v1", "+", "v2", "\n", "return", "(", "(", "v1", "-", "g1", ")", "*", "math", ".", "log", "(", "v12", "/", "v1", ",", "2", ")", "+", "(", "v2", "-", "g2", ")", "*", "math", ".", "log", "(", "v12", "/", "v2", ",", "2", ")", "-", "2", "*", "cut_v", "*", "math", ".", "log", "(", "g_vol", "/", "v12", ",", "2", ")", ")", "/", "g_vol", "\n", "\n"]]}