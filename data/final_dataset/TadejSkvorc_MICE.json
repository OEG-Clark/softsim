{"home.repos.pwc.inspect_result.TadejSkvorc_MICE.models.tensorflow_bilstm_elmo_per_expression_multiple_files.get_xy": [[27, 94], ["print", "print", "open", "enumerate", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "print", "print", "print", "print", "print", "print", "line.split", "debug_sent.append", "classes.append", "words.append", "curr_sent_X.append", "curr_sent_Y.append", "collections.Counter", "collections.Counter", "print", "len", "ast.literal_eval", "np.array.append", "np.array.append", "sent_wide_Y.append", "numpy.array", "numpy.array"], "function", ["None"], ["def", "get_xy", "(", "filename", ")", ":", "\n", "    ", "sent_wide_Y", "=", "[", "]", "\n", "sents_X", "=", "[", "]", "\n", "sents_Y", "=", "[", "]", "\n", "curr_sent_X", "=", "[", "]", "\n", "curr_sent_Y", "=", "[", "]", "\n", "print", "(", "'starting'", ")", "\n", "CLS_TO_INT_DICT", "=", "{", "'NE'", ":", "3", ",", "'DA'", ":", "2", ",", "'*'", ":", "1", ",", "'NEJASEN_ZGLED'", ":", "4", "}", "\n", "classes", "=", "[", "]", "\n", "words", "=", "[", "]", "\n", "X", "=", "[", "]", "\n", "Y", "=", "[", "]", "\n", "print", "(", "'reading file'", ")", "\n", "with", "open", "(", "filename", ",", "'r'", ",", "encoding", "=", "'utf-8'", ")", "as", "f", ":", "\n", "        ", "debug_sent", "=", "[", "]", "\n", "for", "i", ",", "line", "in", "enumerate", "(", "f", ")", ":", "\n", "            ", "if", "i", "%", "500", "==", "0", ":", "\n", "                ", "print", "(", "i", ")", "\n", "#if i >= 1500:", "\n", "#    break", "\n", "", "parts", "=", "line", ".", "split", "(", "'\\t'", ")", "\n", "word", "=", "parts", "[", "0", "]", "\n", "if", "len", "(", "word", ")", "==", "0", ":", "\n", "                ", "continue", "\n", "\n", "", "vector", "=", "parts", "[", "1", "]", "\n", "cls", "=", "parts", "[", "2", "]", "[", ":", "-", "1", "]", "\n", "debug_sent", ".", "append", "(", "(", "word", ",", "cls", ")", ")", "\n", "#print(word, cls)", "\n", "classes", ".", "append", "(", "cls", ")", "\n", "words", ".", "append", "(", "word", ")", "\n", "if", "not", "(", "cls", "==", "'DA'", "or", "cls", "==", "'NE'", "or", "cls", "==", "'*'", ")", ":", "\n", "                ", "continue", "\n", "", "curr_sent_X", ".", "append", "(", "literal_eval", "(", "vector", ")", ")", "\n", "#print(len(literal_eval(vector)))", "\n", "curr_sent_Y", ".", "append", "(", "CLS_TO_INT_DICT", "[", "cls", "]", ")", "\n", "\n", "if", "word", "[", "-", "1", "]", "==", "'.'", ":", "\n", "                ", "sents_X", ".", "append", "(", "np", ".", "array", "(", "curr_sent_X", ")", ")", "\n", "sents_Y", ".", "append", "(", "np", ".", "array", "(", "curr_sent_Y", ")", ")", "\n", "sent_wide_cls", "=", "None", "\n", "if", "CLS_TO_INT_DICT", "[", "'DA'", "]", "in", "curr_sent_Y", ":", "\n", "                    ", "sent_wide_cls", "=", "CLS_TO_INT_DICT", "[", "'DA'", "]", "\n", "", "elif", "CLS_TO_INT_DICT", "[", "'NE'", "]", "in", "curr_sent_Y", ":", "\n", "                    ", "sent_wide_cls", "=", "CLS_TO_INT_DICT", "[", "'NE'", "]", "\n", "", "else", ":", "\n", "                    ", "sent_wide_cls", "=", "CLS_TO_INT_DICT", "[", "'NEJASEN_ZGLED'", "]", "\n", "#print('debug sent', debug_sent)", "\n", "", "sent_wide_Y", ".", "append", "(", "sent_wide_cls", ")", "\n", "debug_sent", "=", "[", "]", "\n", "curr_sent_X", "=", "[", "]", "\n", "curr_sent_Y", "=", "[", "]", "\n", "#if cls == '5':", "\n", "#    print(line)", "\n", "", "", "X", "=", "np", ".", "array", "(", "X", ")", "\n", "Y", "=", "np", ".", "array", "(", "Y", ")", "\n", "sents_X", "=", "np", ".", "array", "(", "sents_X", ")", "\n", "sents_Y", "=", "np", ".", "array", "(", "sents_Y", ")", "\n", "\n", "print", "(", "Counter", "(", "classes", ")", ")", "\n", "print", "(", "Counter", "(", "words", ")", ")", "\n", "print", "(", "X", ".", "shape", ")", "\n", "print", "(", "Y", ".", "shape", ")", "\n", "print", "(", "sents_X", ".", "shape", ")", "\n", "print", "(", "sents_Y", ".", "shape", ")", "\n", "#return sents_X, sents_Y", "\n", "", "return", "sents_X", ",", "sent_wide_Y", "\n", "\n"]], "home.repos.pwc.inspect_result.TadejSkvorc_MICE.models.tensorflow_bilstm_elmo_per_expression_multiple_files.get_xy_per_expression": [[96, 174], ["print", "print", "print", "print", "print", "print", "print", "print", "open", "enumerate", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "collections.Counter", "collections.Counter", "line.split", "debug_sent.append", "classes.append", "words.append", "curr_sent_X.append", "curr_sent_Y.append", "print", "len", "len", "ast.literal_eval", "sent_wide_Y.append", "data_by_expressions.keys", "data_by_expressions[].append", "print", "numpy.array", "numpy.array", "numpy.array", "numpy.array"], "function", ["None"], ["", "def", "get_xy_per_expression", "(", "filenames", ")", ":", "\n", "    ", "data_by_expressions", "=", "{", "}", "\n", "sent_wide_Y", "=", "[", "]", "\n", "sents_X", "=", "[", "]", "\n", "sents_Y", "=", "[", "]", "\n", "curr_sent_X", "=", "[", "]", "\n", "curr_sent_Y", "=", "[", "]", "\n", "expressions", "=", "[", "]", "\n", "print", "(", "'starting'", ")", "\n", "CLS_TO_INT_DICT", "=", "{", "'NE'", ":", "3", ",", "'DA'", ":", "2", ",", "'*'", ":", "1", ",", "'NEJASEN_ZGLED'", ":", "4", "}", "\n", "classes", "=", "[", "]", "\n", "words", "=", "[", "]", "\n", "X", "=", "[", "]", "\n", "Y", "=", "[", "]", "\n", "for", "filename", "in", "filenames", ":", "\n", "        ", "print", "(", "'reading file'", ",", "filename", ")", "\n", "with", "open", "(", "filename", ",", "'r'", ",", "encoding", "=", "'utf-8'", ")", "as", "f", ":", "\n", "            ", "debug_sent", "=", "[", "]", "\n", "for", "i", ",", "line", "in", "enumerate", "(", "f", ")", ":", "\n", "                ", "if", "i", "%", "500", "==", "0", ":", "\n", "                    ", "print", "(", "i", ")", "\n", "#if i >= 1500:", "\n", "#    break", "\n", "", "parts", "=", "line", ".", "split", "(", "'\\t'", ")", "\n", "word", "=", "parts", "[", "0", "]", "\n", "if", "len", "(", "word", ")", "==", "0", ":", "\n", "                    ", "continue", "\n", "", "if", "len", "(", "parts", ")", "!=", "4", ":", "\n", "                    ", "continue", "\n", "#print('len of parts', len(parts))", "\n", "", "exp", "=", "parts", "[", "0", "]", "\n", "vector", "=", "parts", "[", "1", "]", "\n", "cls", "=", "parts", "[", "2", "]", "\n", "expression", "=", "parts", "[", "3", "]", "\n", "debug_sent", ".", "append", "(", "(", "word", ",", "cls", ",", "expression", ")", ")", "\n", "#print(word, cls)", "\n", "classes", ".", "append", "(", "cls", ")", "\n", "words", ".", "append", "(", "word", ")", "\n", "#print(exp, vector[:10], cls, expression)", "\n", "if", "not", "(", "cls", "==", "'DA'", "or", "cls", "==", "'NE'", "or", "cls", "==", "'*'", ")", ":", "\n", "                    ", "continue", "\n", "", "curr_sent_X", ".", "append", "(", "literal_eval", "(", "vector", ")", ")", "\n", "#print(len(literal_eval(vector)))", "\n", "curr_sent_Y", ".", "append", "(", "CLS_TO_INT_DICT", "[", "cls", "]", ")", "\n", "if", "word", "[", "-", "1", "]", "==", "'.'", ":", "\n", "                    ", "if", "expression", "not", "in", "data_by_expressions", ".", "keys", "(", ")", ":", "\n", "#print(expression)", "\n", "                        ", "data_by_expressions", "[", "expression", "]", "=", "[", "(", "np", ".", "array", "(", "curr_sent_X", ")", ",", "np", ".", "array", "(", "curr_sent_Y", ")", ")", "]", "\n", "", "else", ":", "\n", "#print(expression)", "\n", "                        ", "data_by_expressions", "[", "expression", "]", ".", "append", "(", "(", "np", ".", "array", "(", "curr_sent_X", ")", ",", "np", ".", "array", "(", "curr_sent_Y", ")", ")", ")", "\n", "", "sent_wide_cls", "=", "None", "\n", "if", "CLS_TO_INT_DICT", "[", "'DA'", "]", "in", "curr_sent_Y", ":", "\n", "                        ", "sent_wide_cls", "=", "CLS_TO_INT_DICT", "[", "'DA'", "]", "\n", "", "elif", "CLS_TO_INT_DICT", "[", "'NE'", "]", "in", "curr_sent_Y", ":", "\n", "                        ", "sent_wide_cls", "=", "CLS_TO_INT_DICT", "[", "'NE'", "]", "\n", "", "else", ":", "\n", "                        ", "sent_wide_cls", "=", "CLS_TO_INT_DICT", "[", "'NEJASEN_ZGLED'", "]", "\n", "print", "(", "'debug sent'", ",", "debug_sent", ")", "\n", "", "sent_wide_Y", ".", "append", "(", "sent_wide_cls", ")", "\n", "debug_sent", "=", "[", "]", "\n", "curr_sent_X", "=", "[", "]", "\n", "curr_sent_Y", "=", "[", "]", "\n", "#if cls == '5':", "\n", "#    print(line)", "\n", "", "", "X", "=", "np", ".", "array", "(", "X", ")", "\n", "Y", "=", "np", ".", "array", "(", "Y", ")", "\n", "sents_X", "=", "np", ".", "array", "(", "sents_X", ")", "\n", "sents_Y", "=", "np", ".", "array", "(", "sents_Y", ")", "\n", "\n", "", "print", "(", "Counter", "(", "classes", ")", ")", "\n", "print", "(", "Counter", "(", "words", ")", ")", "\n", "print", "(", "X", ".", "shape", ")", "\n", "print", "(", "Y", ".", "shape", ")", "\n", "print", "(", "sents_X", ".", "shape", ")", "\n", "print", "(", "sents_Y", ".", "shape", ")", "\n", "#return sents_X, sents_Y", "\n", "", "return", "data_by_expressions", "\n", "\n"]], "home.repos.pwc.inspect_result.TadejSkvorc_MICE.models.tensorflow_bilstm_elmo_per_expression_multiple_files.get_bert_data_per_expression": [[175, 177], ["tensorflow_bilstm_elmo_per_expression_multiple_files.get_xy"], "function", ["home.repos.pwc.inspect_result.TadejSkvorc_MICE.models.tensorflow_bilstm_bert_per_expression_multiple_files.get_xy"], ["", "def", "get_bert_data_per_expression", "(", "IN_FILENAME", ")", ":", "\n", "    ", "X", ",", "Y", "=", "get_xy", "(", "IN_FILENAME", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TadejSkvorc_MICE.models.tensorflow_bilstm_elmo_per_expression_multiple_files.get_bert_data": [[180, 220], ["print", "print", "print", "tensorflow_bilstm_elmo_per_expression_multiple_files.get_xy", "print", "tensorflow.keras.utils.to_categorical", "numpy.array", "tensorflow_bilstm_elmo_per_expression_multiple_files.get_xy", "tensorflow.keras.utils.to_categorical", "numpy.array", "tensorflow.keras.preprocessing.sequence.pad_sequences", "tensorflow.keras.preprocessing.sequence.pad_sequences", "tensorflow_bilstm_elmo_per_expression_multiple_files.get_xy", "print", "print", "tensorflow.keras.utils.to_categorical", "numpy.array", "print", "print", "print", "print", "print", "tensorflow.keras.preprocessing.sequence.pad_sequences", "print", "print", "print", "sklearn.model_selection.train_test_split", "len", "len"], "function", ["home.repos.pwc.inspect_result.TadejSkvorc_MICE.models.tensorflow_bilstm_bert_per_expression_multiple_files.get_xy", "home.repos.pwc.inspect_result.TadejSkvorc_MICE.models.tensorflow_bilstm_bert_per_expression_multiple_files.get_xy", "home.repos.pwc.inspect_result.TadejSkvorc_MICE.models.tensorflow_bilstm_bert_per_expression_multiple_files.get_xy"], ["", "def", "get_bert_data", "(", "IN_FILENAME", ",", "IN_FILENAME_TEST", ")", ":", "\n", "    ", "if", "IN_FILENAME_TEST", "!=", "None", ":", "\n", "        ", "X_train", ",", "Y_train", "=", "get_xy", "(", "IN_FILENAME", ")", "\n", "print", "(", "Y_train", "[", ":", "5", "]", ")", "\n", "Y_train", "=", "to_categorical", "(", "Y_train", ",", "num_classes", "=", "NUM_CLASSES", ")", "\n", "Y_train", "=", "np", ".", "array", "(", "Y_train", ")", "\n", "X_test", ",", "Y_test", "=", "get_xy", "(", "IN_FILENAME_TEST", ")", "\n", "Y_test", "=", "to_categorical", "(", "Y_test", ",", "num_classes", "=", "NUM_CLASSES", ")", "\n", "Y_test", "=", "np", ".", "array", "(", "Y_test", ")", "\n", "# Pad everything", "\n", "X_train", "=", "pad_sequences", "(", "X_train", ",", "padding", "=", "'post'", ",", "maxlen", "=", "MAX_SEQUENCE_LEN", ",", "dtype", "=", "'float'", ")", "\n", "X_test", "=", "pad_sequences", "(", "X_test", ",", "padding", "=", "'post'", ",", "maxlen", "=", "MAX_SEQUENCE_LEN", ",", "dtype", "=", "'float'", ")", "\n", "#Y_train = pad_sequences(Y_train, padding='post', maxlen=MAX_SEQUENCE_LEN)", "\n", "#Y_test = pad_sequences(Y_test, padding='post', maxlen=MAX_SEQUENCE_LEN)", "\n", "", "else", ":", "\n", "        ", "X", ",", "Y", "=", "get_xy", "(", "IN_FILENAME", ")", "\n", "print", "(", "'first X'", ")", "\n", "print", "(", "X", "[", "0", "]", ")", "\n", "Y", "=", "to_categorical", "(", "Y", ",", "num_classes", "=", "NUM_CLASSES", ")", "\n", "Y", "=", "np", ".", "array", "(", "Y", ")", "\n", "print", "(", "'y shape'", ",", "Y", ".", "shape", ")", "\n", "print", "(", "'y[0]'", ",", "Y", "[", "0", "]", ")", "\n", "print", "(", "'y[1]'", ",", "Y", "[", "1", "]", ")", "\n", "print", "(", "'y[2]'", ",", "Y", "[", "2", "]", ")", "\n", "sent_lens", "=", "[", "len", "(", "x", ")", "for", "x", "in", "X", "]", "\n", "print", "(", "sent_lens", ")", "\n", "padded_X", "=", "pad_sequences", "(", "X", ",", "padding", "=", "'post'", ",", "maxlen", "=", "MAX_SEQUENCE_LEN", ",", "dtype", "=", "'float'", ")", "\n", "print", "(", "'padded_X'", ")", "\n", "print", "(", "padded_X", "[", "0", "]", ")", "\n", "#padded_Y = pad_sequences(Y, padding='post', maxlen=MAX_SEQUENCE_LEN)", "\n", "sent_lens", "=", "[", "len", "(", "x", ")", "for", "x", "in", "padded_X", "]", "\n", "print", "(", "sent_lens", ")", "\n", "\n", "#exit()", "\n", "X_train", ",", "X_test", ",", "Y_train", ",", "Y_test", "=", "train_test_split", "(", "padded_X", ",", "Y", ",", "test_size", "=", "0.33", ",", "shuffle", "=", "True", ")", "\n", "\n", "", "print", "(", "X_train", ".", "shape", ",", "X_train", "[", "0", "]", ".", "shape", ")", "\n", "print", "(", "'first X_test'", ")", "\n", "print", "(", "X_test", "[", "0", "]", ")", "\n", "return", "X_train", ",", "X_test", ",", "Y_train", ",", "Y_test", "\n", "\n"]], "home.repos.pwc.inspect_result.TadejSkvorc_MICE.models.tensorflow_bilstm_elmo_per_expression_multiple_files.bert_tensorflow_test": [[222, 289], ["tensorflow.keras.Sequential", "tensorflow.keras.Sequential.add", "tensorflow.keras.layers.GRU", "tensorflow.keras.layers.GRU", "tensorflow.keras.Sequential.add", "tensorflow.keras.Sequential.add", "tensorflow.keras.Sequential.add", "print", "tensorflow.keras.Sequential.compile", "print", "tensorflow.keras.Sequential.fit", "print", "tensorflow.keras.Sequential.evaluate", "tensorflow.keras.Sequential.predict_proba", "print", "print", "collections.Counter", "print", "print", "tensorflow.keras.layers.Masking", "tensorflow.keras.layers.Bidirectional", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Activation", "numpy.argmax", "classes.append", "collections.Counter", "open", "zip", "numpy.argmax", "classes.append", "numpy.argmax", "numpy.argmax", "numpy.argmax", "numpy.argmax", "numpy.argmax", "numpy.argmax", "numpy.argmax", "numpy.argmax", "numpy.argmax", "numpy.argmax", "numpy.argmax", "numpy.argmax"], "function", ["None"], ["", "def", "bert_tensorflow_test", "(", "X_train", ",", "X_test", ",", "Y_train", ",", "Y_test", ")", ":", "\n", "# Model", "\n", "    ", "model", "=", "Sequential", "(", ")", "\n", "model", ".", "add", "(", "Masking", "(", "mask_value", "=", "0.", ",", "input_shape", "=", "(", "MAX_SEQUENCE_LEN", ",", "VECTOR_DIM", ")", ")", ")", "\n", "#forward_layer = LSTM(200, return_sequences=True)", "\n", "forward_layer", "=", "GRU", "(", "10", ",", "return_sequences", "=", "False", ",", "dropout", "=", "0.5", ")", "\n", "#backward_layer = LSTM(200, activation='relu', return_sequences=True,", "\n", "backward_layer", "=", "GRU", "(", "10", ",", "return_sequences", "=", "False", ",", "dropout", "=", "0.5", ",", "\n", "go_backwards", "=", "True", ")", "\n", "model", ".", "add", "(", "Bidirectional", "(", "forward_layer", ",", "backward_layer", "=", "backward_layer", ",", "\n", "input_shape", "=", "(", "MAX_SEQUENCE_LEN", ",", "VECTOR_DIM", ")", ")", ")", "\n", "#model.add(TimeDistributed(Dense(NUM_CLASSES)))", "\n", "# Remove TimeDistributed() so that predictions are now made for the entire sentence", "\n", "model", ".", "add", "(", "Dense", "(", "NUM_CLASSES", ")", ")", "\n", "model", ".", "add", "(", "Activation", "(", "'softmax'", ")", ")", "\n", "\n", "#print('preds shape', model.predict(X_train[:3]).shape)", "\n", "#print('Y_train shape', Y_train[:3].shape)", "\n", "#print(list(Y_train[:3]))", "\n", "classes", "=", "[", "]", "\n", "for", "y", "in", "Y_train", ":", "\n", "        ", "cls", "=", "np", ".", "argmax", "(", "y", ")", "\n", "classes", ".", "append", "(", "cls", ")", "\n", "", "print", "(", "Counter", "(", "classes", ")", ")", "\n", "\n", "model", ".", "compile", "(", "loss", "=", "'binary_crossentropy'", ",", "optimizer", "=", "'rmsprop'", ",", "metrics", "=", "[", "'accuracy'", "]", ")", "\n", "print", "(", "'compiled model'", ")", "\n", "model", ".", "fit", "(", "X_train", ",", "Y_train", ",", "batch_size", "=", "8", ",", "epochs", "=", "10", ")", "#, validation_split=0.1)", "\n", "print", "(", "'fit model'", ")", "\n", "eval", "=", "model", ".", "evaluate", "(", "X_test", ",", "Y_test", ",", "batch_size", "=", "8", ")", "\n", "#print('X_test[0]')", "\n", "#print(X_test[0])", "\n", "#print(X_train[0])", "\n", "preds", "=", "model", ".", "predict_proba", "(", "X_test", ",", "verbose", "=", "1", ",", "batch_size", "=", "8", ")", "\n", "print", "(", "preds", ")", "\n", "num_correct", "=", "0", "\n", "num_incorrect", "=", "0", "\n", "TP", "=", "0", "\n", "TN", "=", "0", "\n", "FP", "=", "0", "\n", "FN", "=", "0", "\n", "# idiomatic = 2, non-idiomatic = 3", "\n", "with", "open", "(", "'preds_out_temp.txt'", ",", "'w'", ")", "as", "tempoutf", ":", "\n", "        ", "for", "pred", ",", "y", "in", "zip", "(", "preds", ",", "Y_test", ")", ":", "\n", "            ", "if", "np", ".", "argmax", "(", "y", ")", "==", "2", "or", "np", ".", "argmax", "(", "y", ")", "==", "3", ":", "\n", "                ", "if", "np", ".", "argmax", "(", "y", ")", "==", "np", ".", "argmax", "(", "pred", ")", ":", "\n", "                    ", "num_correct", "+=", "1", "\n", "", "else", ":", "\n", "                    ", "num_incorrect", "+=", "1", "\n", "", "", "if", "np", ".", "argmax", "(", "pred", ")", "==", "2", "and", "np", ".", "argmax", "(", "y", ")", "==", "2", ":", "\n", "                ", "TP", "+=", "1", "\n", "", "if", "np", ".", "argmax", "(", "pred", ")", "==", "3", "and", "np", ".", "argmax", "(", "y", ")", "==", "3", ":", "\n", "                ", "TN", "+=", "1", "\n", "", "if", "np", ".", "argmax", "(", "pred", ")", "==", "2", "and", "np", ".", "argmax", "(", "y", ")", "==", "3", ":", "\n", "                ", "FP", "+=", "1", "\n", "", "if", "np", ".", "argmax", "(", "pred", ")", "==", "3", "and", "np", ".", "argmax", "(", "y", ")", "==", "2", ":", "\n", "                ", "FN", "+=", "1", "\n", "", "", "", "custom_accuracy", "=", "num_correct", "/", "(", "num_correct", "+", "num_incorrect", ")", "\n", "print", "(", "'custom accuracy is'", ",", "num_correct", "/", "(", "num_correct", "+", "num_incorrect", ")", ")", "\n", "for", "y", "in", "Y_test", ":", "\n", "        ", "cls", "=", "np", ".", "argmax", "(", "y", ")", "\n", "classes", ".", "append", "(", "cls", ")", "\n", "", "class_nums", "=", "Counter", "(", "classes", ")", "\n", "print", "(", "class_nums", ")", "\n", "default_acc", "=", "class_nums", "[", "2", "]", "/", "(", "class_nums", "[", "2", "]", "+", "class_nums", "[", "3", "]", ")", "\n", "print", "(", "'default accuracy is'", ",", "default_acc", ",", "'or'", ",", "1", "-", "default_acc", ")", "\n", "return", "eval", ",", "custom_accuracy", ",", "default_acc", ",", "[", "TP", ",", "TN", ",", "FP", ",", "FN", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.TadejSkvorc_MICE.models.tensorflow_bilstm_elmo_per_expression_multiple_files.get_already_processed": [[291, 301], ["set", "set", "open", "line.split", "already_processed.append"], "function", ["None"], ["", "def", "get_already_processed", "(", "filename", ")", ":", "\n", "    ", "if", "filename", "==", "None", ":", "\n", "        ", "return", "set", "(", "[", "]", ")", "\n", "", "already_processed", "=", "[", "]", "\n", "with", "open", "(", "filename", ",", "'r'", ",", "encoding", "=", "'utf-8'", ")", "as", "f", ":", "\n", "        ", "for", "line", "in", "f", ":", "\n", "            ", "words", "=", "line", ".", "split", "(", "' '", ")", "\n", "if", "words", "[", "0", "]", "==", "'EXP'", ":", "\n", "                ", "already_processed", ".", "append", "(", "' '", ".", "join", "(", "words", "[", "1", ":", "]", ")", ")", "\n", "", "", "", "return", "set", "(", "already_processed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TadejSkvorc_MICE.models.tensorflow_bilstm_bert_multiple_files_shuffled.get_xy": [[27, 94], ["print", "print", "open", "enumerate", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "print", "print", "print", "print", "print", "print", "line.split", "debug_sent.append", "classes.append", "words.append", "curr_sent_X.append", "curr_sent_Y.append", "collections.Counter", "collections.Counter", "print", "len", "ast.literal_eval", "np.array.append", "np.array.append", "sent_wide_Y.append", "numpy.array", "numpy.array"], "function", ["None"], ["def", "get_xy", "(", "filename", ")", ":", "\n", "    ", "sent_wide_Y", "=", "[", "]", "\n", "sents_X", "=", "[", "]", "\n", "sents_Y", "=", "[", "]", "\n", "curr_sent_X", "=", "[", "]", "\n", "curr_sent_Y", "=", "[", "]", "\n", "print", "(", "'starting'", ")", "\n", "CLS_TO_INT_DICT", "=", "{", "'NE'", ":", "3", ",", "'DA'", ":", "2", ",", "'*'", ":", "1", ",", "'NEJASEN_ZGLED'", ":", "4", "}", "\n", "classes", "=", "[", "]", "\n", "words", "=", "[", "]", "\n", "X", "=", "[", "]", "\n", "Y", "=", "[", "]", "\n", "print", "(", "'reading file'", ")", "\n", "with", "open", "(", "filename", ",", "'r'", ",", "encoding", "=", "'utf-8'", ")", "as", "f", ":", "\n", "        ", "debug_sent", "=", "[", "]", "\n", "for", "i", ",", "line", "in", "enumerate", "(", "f", ")", ":", "\n", "            ", "if", "i", "%", "500", "==", "0", ":", "\n", "                ", "print", "(", "i", ")", "\n", "#if i >= 1500:", "\n", "#    break", "\n", "", "parts", "=", "line", ".", "split", "(", "'\\t'", ")", "\n", "word", "=", "parts", "[", "0", "]", "\n", "if", "len", "(", "word", ")", "==", "0", ":", "\n", "                ", "continue", "\n", "\n", "", "vector", "=", "parts", "[", "1", "]", "\n", "cls", "=", "parts", "[", "2", "]", "[", ":", "-", "1", "]", "\n", "debug_sent", ".", "append", "(", "(", "word", ",", "cls", ")", ")", "\n", "#print(word, cls)", "\n", "classes", ".", "append", "(", "cls", ")", "\n", "words", ".", "append", "(", "word", ")", "\n", "if", "not", "(", "cls", "==", "'DA'", "or", "cls", "==", "'NE'", "or", "cls", "==", "'*'", ")", ":", "\n", "                ", "continue", "\n", "", "curr_sent_X", ".", "append", "(", "literal_eval", "(", "vector", ")", ")", "\n", "#print(len(literal_eval(vector)))", "\n", "curr_sent_Y", ".", "append", "(", "CLS_TO_INT_DICT", "[", "cls", "]", ")", "\n", "\n", "if", "word", "[", "-", "1", "]", "==", "'.'", ":", "\n", "                ", "sents_X", ".", "append", "(", "np", ".", "array", "(", "curr_sent_X", ")", ")", "\n", "sents_Y", ".", "append", "(", "np", ".", "array", "(", "curr_sent_Y", ")", ")", "\n", "sent_wide_cls", "=", "None", "\n", "if", "CLS_TO_INT_DICT", "[", "'DA'", "]", "in", "curr_sent_Y", ":", "\n", "                    ", "sent_wide_cls", "=", "CLS_TO_INT_DICT", "[", "'DA'", "]", "\n", "", "elif", "CLS_TO_INT_DICT", "[", "'NE'", "]", "in", "curr_sent_Y", ":", "\n", "                    ", "sent_wide_cls", "=", "CLS_TO_INT_DICT", "[", "'NE'", "]", "\n", "", "else", ":", "\n", "                    ", "sent_wide_cls", "=", "CLS_TO_INT_DICT", "[", "'NEJASEN_ZGLED'", "]", "\n", "#print('debug sent', debug_sent)", "\n", "", "sent_wide_Y", ".", "append", "(", "sent_wide_cls", ")", "\n", "debug_sent", "=", "[", "]", "\n", "curr_sent_X", "=", "[", "]", "\n", "curr_sent_Y", "=", "[", "]", "\n", "#if cls == '5':", "\n", "#    print(line)", "\n", "", "", "X", "=", "np", ".", "array", "(", "X", ")", "\n", "Y", "=", "np", ".", "array", "(", "Y", ")", "\n", "sents_X", "=", "np", ".", "array", "(", "sents_X", ")", "\n", "sents_Y", "=", "np", ".", "array", "(", "sents_Y", ")", "\n", "\n", "print", "(", "Counter", "(", "classes", ")", ")", "\n", "print", "(", "Counter", "(", "words", ")", ")", "\n", "print", "(", "X", ".", "shape", ")", "\n", "print", "(", "Y", ".", "shape", ")", "\n", "print", "(", "sents_X", ".", "shape", ")", "\n", "print", "(", "sents_Y", ".", "shape", ")", "\n", "#return sents_X, sents_Y", "\n", "", "return", "sents_X", ",", "sent_wide_Y", "\n", "\n"]], "home.repos.pwc.inspect_result.TadejSkvorc_MICE.models.tensorflow_bilstm_bert_multiple_files_shuffled.get_xy_per_expression": [[96, 176], ["print", "print", "print", "print", "print", "print", "print", "print", "open", "enumerate", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "collections.Counter", "collections.Counter", "line.split", "debug_sent.append", "classes.append", "words.append", "curr_sent_X.append", "curr_sent_Y.append", "print", "len", "len", "ast.literal_eval", "sent_wide_Y.append", "data_by_expressions.keys", "data_by_expressions[].append", "print", "numpy.array", "numpy.array", "numpy.array", "numpy.array"], "function", ["None"], ["", "def", "get_xy_per_expression", "(", "filenames", ")", ":", "\n", "    ", "data_by_expressions", "=", "{", "}", "\n", "sent_wide_Y", "=", "[", "]", "\n", "sents_X", "=", "[", "]", "\n", "sents_Y", "=", "[", "]", "\n", "curr_sent_X", "=", "[", "]", "\n", "curr_sent_Y", "=", "[", "]", "\n", "expressions", "=", "[", "]", "\n", "print", "(", "'starting'", ")", "\n", "CLS_TO_INT_DICT", "=", "{", "'NE'", ":", "3", ",", "'DA'", ":", "2", ",", "'*'", ":", "1", ",", "'NEJASEN_ZGLED'", ":", "4", "}", "\n", "classes", "=", "[", "]", "\n", "words", "=", "[", "]", "\n", "X", "=", "[", "]", "\n", "Y", "=", "[", "]", "\n", "for", "filename", "in", "filenames", ":", "\n", "        ", "print", "(", "'reading file'", ",", "filename", ")", "\n", "with", "open", "(", "filename", ",", "'r'", ",", "encoding", "=", "'utf-8'", ")", "as", "f", ":", "\n", "            ", "debug_sent", "=", "[", "]", "\n", "for", "i", ",", "line", "in", "enumerate", "(", "f", ")", ":", "\n", "                ", "if", "i", "%", "500", "==", "0", ":", "\n", "                    ", "print", "(", "i", ")", "\n", "#if i >= 3000:", "\n", "#    break", "\n", "", "parts", "=", "line", ".", "split", "(", "'\\t'", ")", "\n", "word", "=", "parts", "[", "0", "]", "\n", "#print(len(parts))", "\n", "if", "len", "(", "word", ")", "==", "0", ":", "\n", "                    ", "continue", "\n", "", "if", "len", "(", "parts", ")", "!=", "4", ":", "\n", "                    ", "continue", "\n", "#print('len of parts', len(parts))", "\n", "", "exp", "=", "parts", "[", "0", "]", "\n", "vector", "=", "parts", "[", "1", "]", "\n", "cls", "=", "parts", "[", "2", "]", "\n", "expression", "=", "parts", "[", "3", "]", "\n", "#print(word, cls, expression)", "\n", "debug_sent", ".", "append", "(", "(", "word", ",", "cls", ",", "expression", ")", ")", "\n", "#print(word, cls)", "\n", "classes", ".", "append", "(", "cls", ")", "\n", "words", ".", "append", "(", "word", ")", "\n", "#print(exp, vector[:10], cls, expression)", "\n", "if", "not", "(", "cls", "==", "'DA'", "or", "cls", "==", "'NE'", "or", "cls", "==", "'*'", ")", ":", "\n", "                    ", "continue", "\n", "", "curr_sent_X", ".", "append", "(", "literal_eval", "(", "vector", ")", ")", "\n", "#print(len(literal_eval(vector)))", "\n", "curr_sent_Y", ".", "append", "(", "CLS_TO_INT_DICT", "[", "cls", "]", ")", "\n", "if", "word", "[", "-", "1", "]", "==", "'.'", ":", "\n", "                    ", "if", "expression", "not", "in", "data_by_expressions", ".", "keys", "(", ")", ":", "\n", "#print(expression)", "\n", "                        ", "data_by_expressions", "[", "expression", "]", "=", "[", "(", "np", ".", "array", "(", "curr_sent_X", ")", ",", "np", ".", "array", "(", "curr_sent_Y", ")", ")", "]", "\n", "", "else", ":", "\n", "#print(expression)", "\n", "                        ", "data_by_expressions", "[", "expression", "]", ".", "append", "(", "(", "np", ".", "array", "(", "curr_sent_X", ")", ",", "np", ".", "array", "(", "curr_sent_Y", ")", ")", ")", "\n", "", "sent_wide_cls", "=", "None", "\n", "if", "CLS_TO_INT_DICT", "[", "'DA'", "]", "in", "curr_sent_Y", ":", "\n", "                        ", "sent_wide_cls", "=", "CLS_TO_INT_DICT", "[", "'DA'", "]", "\n", "", "elif", "CLS_TO_INT_DICT", "[", "'NE'", "]", "in", "curr_sent_Y", ":", "\n", "                        ", "sent_wide_cls", "=", "CLS_TO_INT_DICT", "[", "'NE'", "]", "\n", "", "else", ":", "\n", "                        ", "sent_wide_cls", "=", "CLS_TO_INT_DICT", "[", "'NEJASEN_ZGLED'", "]", "\n", "print", "(", "'debug sent'", ",", "debug_sent", ")", "\n", "", "sent_wide_Y", ".", "append", "(", "sent_wide_cls", ")", "\n", "debug_sent", "=", "[", "]", "\n", "curr_sent_X", "=", "[", "]", "\n", "curr_sent_Y", "=", "[", "]", "\n", "#if cls == '5':", "\n", "#    print(line)", "\n", "", "", "X", "=", "np", ".", "array", "(", "X", ")", "\n", "Y", "=", "np", ".", "array", "(", "Y", ")", "\n", "sents_X", "=", "np", ".", "array", "(", "sents_X", ")", "\n", "sents_Y", "=", "np", ".", "array", "(", "sents_Y", ")", "\n", "\n", "", "print", "(", "Counter", "(", "classes", ")", ")", "\n", "print", "(", "Counter", "(", "words", ")", ")", "\n", "print", "(", "X", ".", "shape", ")", "\n", "print", "(", "Y", ".", "shape", ")", "\n", "print", "(", "sents_X", ".", "shape", ")", "\n", "print", "(", "sents_Y", ".", "shape", ")", "\n", "#return sents_X, sents_Y", "\n", "", "return", "data_by_expressions", "\n", "\n"]], "home.repos.pwc.inspect_result.TadejSkvorc_MICE.models.tensorflow_bilstm_bert_multiple_files_shuffled.get_bert_data_per_expression": [[177, 179], ["tensorflow_bilstm_bert_multiple_files_shuffled.get_xy"], "function", ["home.repos.pwc.inspect_result.TadejSkvorc_MICE.models.tensorflow_bilstm_bert_per_expression_multiple_files.get_xy"], ["", "def", "get_bert_data_per_expression", "(", "IN_FILENAME", ")", ":", "\n", "    ", "X", ",", "Y", "=", "get_xy", "(", "IN_FILENAME", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TadejSkvorc_MICE.models.tensorflow_bilstm_bert_multiple_files_shuffled.get_bert_data": [[182, 222], ["print", "print", "print", "tensorflow_bilstm_bert_multiple_files_shuffled.get_xy", "print", "tensorflow.keras.utils.to_categorical", "numpy.array", "tensorflow_bilstm_bert_multiple_files_shuffled.get_xy", "tensorflow.keras.utils.to_categorical", "numpy.array", "tensorflow.keras.preprocessing.sequence.pad_sequences", "tensorflow.keras.preprocessing.sequence.pad_sequences", "tensorflow_bilstm_bert_multiple_files_shuffled.get_xy", "print", "print", "tensorflow.keras.utils.to_categorical", "numpy.array", "print", "print", "print", "print", "print", "tensorflow.keras.preprocessing.sequence.pad_sequences", "print", "print", "print", "sklearn.model_selection.train_test_split", "len", "len"], "function", ["home.repos.pwc.inspect_result.TadejSkvorc_MICE.models.tensorflow_bilstm_bert_per_expression_multiple_files.get_xy", "home.repos.pwc.inspect_result.TadejSkvorc_MICE.models.tensorflow_bilstm_bert_per_expression_multiple_files.get_xy", "home.repos.pwc.inspect_result.TadejSkvorc_MICE.models.tensorflow_bilstm_bert_per_expression_multiple_files.get_xy"], ["", "def", "get_bert_data", "(", "IN_FILENAME", ",", "IN_FILENAME_TEST", ")", ":", "\n", "    ", "if", "IN_FILENAME_TEST", "!=", "None", ":", "\n", "        ", "X_train", ",", "Y_train", "=", "get_xy", "(", "IN_FILENAME", ")", "\n", "print", "(", "Y_train", "[", ":", "5", "]", ")", "\n", "Y_train", "=", "to_categorical", "(", "Y_train", ",", "num_classes", "=", "NUM_CLASSES", ")", "\n", "Y_train", "=", "np", ".", "array", "(", "Y_train", ")", "\n", "X_test", ",", "Y_test", "=", "get_xy", "(", "IN_FILENAME_TEST", ")", "\n", "Y_test", "=", "to_categorical", "(", "Y_test", ",", "num_classes", "=", "NUM_CLASSES", ")", "\n", "Y_test", "=", "np", ".", "array", "(", "Y_test", ")", "\n", "# Pad everything", "\n", "X_train", "=", "pad_sequences", "(", "X_train", ",", "padding", "=", "'post'", ",", "maxlen", "=", "MAX_SEQUENCE_LEN", ",", "dtype", "=", "'float'", ")", "\n", "X_test", "=", "pad_sequences", "(", "X_test", ",", "padding", "=", "'post'", ",", "maxlen", "=", "MAX_SEQUENCE_LEN", ",", "dtype", "=", "'float'", ")", "\n", "#Y_train = pad_sequences(Y_train, padding='post', maxlen=MAX_SEQUENCE_LEN)", "\n", "#Y_test = pad_sequences(Y_test, padding='post', maxlen=MAX_SEQUENCE_LEN)", "\n", "", "else", ":", "\n", "        ", "X", ",", "Y", "=", "get_xy", "(", "IN_FILENAME", ")", "\n", "print", "(", "'first X'", ")", "\n", "print", "(", "X", "[", "0", "]", ")", "\n", "Y", "=", "to_categorical", "(", "Y", ",", "num_classes", "=", "NUM_CLASSES", ")", "\n", "Y", "=", "np", ".", "array", "(", "Y", ")", "\n", "print", "(", "'y shape'", ",", "Y", ".", "shape", ")", "\n", "print", "(", "'y[0]'", ",", "Y", "[", "0", "]", ")", "\n", "print", "(", "'y[1]'", ",", "Y", "[", "1", "]", ")", "\n", "print", "(", "'y[2]'", ",", "Y", "[", "2", "]", ")", "\n", "sent_lens", "=", "[", "len", "(", "x", ")", "for", "x", "in", "X", "]", "\n", "print", "(", "sent_lens", ")", "\n", "padded_X", "=", "pad_sequences", "(", "X", ",", "padding", "=", "'post'", ",", "maxlen", "=", "MAX_SEQUENCE_LEN", ",", "dtype", "=", "'float'", ")", "\n", "print", "(", "'padded_X'", ")", "\n", "print", "(", "padded_X", "[", "0", "]", ")", "\n", "#padded_Y = pad_sequences(Y, padding='post', maxlen=MAX_SEQUENCE_LEN)", "\n", "sent_lens", "=", "[", "len", "(", "x", ")", "for", "x", "in", "padded_X", "]", "\n", "print", "(", "sent_lens", ")", "\n", "\n", "#exit()", "\n", "X_train", ",", "X_test", ",", "Y_train", ",", "Y_test", "=", "train_test_split", "(", "padded_X", ",", "Y", ",", "test_size", "=", "0.33", ",", "shuffle", "=", "True", ")", "\n", "\n", "", "print", "(", "X_train", ".", "shape", ",", "X_train", "[", "0", "]", ".", "shape", ")", "\n", "print", "(", "'first X_test'", ")", "\n", "print", "(", "X_test", "[", "0", "]", ")", "\n", "return", "X_train", ",", "X_test", ",", "Y_train", ",", "Y_test", "\n", "\n"]], "home.repos.pwc.inspect_result.TadejSkvorc_MICE.models.tensorflow_bilstm_bert_multiple_files_shuffled.bert_tensorflow_test": [[224, 291], ["tensorflow.keras.Sequential", "tensorflow.keras.Sequential.add", "tensorflow.keras.layers.GRU", "tensorflow.keras.layers.GRU", "tensorflow.keras.Sequential.add", "tensorflow.keras.Sequential.add", "tensorflow.keras.Sequential.add", "print", "tensorflow.keras.Sequential.compile", "print", "tensorflow.keras.Sequential.fit", "print", "tensorflow.keras.Sequential.evaluate", "tensorflow.keras.Sequential.predict_proba", "print", "print", "collections.Counter", "print", "print", "tensorflow.keras.layers.Masking", "tensorflow.keras.layers.Bidirectional", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Activation", "numpy.argmax", "classes.append", "collections.Counter", "open", "zip", "numpy.argmax", "classes.append", "numpy.argmax", "numpy.argmax", "numpy.argmax", "numpy.argmax", "numpy.argmax", "numpy.argmax", "numpy.argmax", "numpy.argmax", "numpy.argmax", "numpy.argmax", "numpy.argmax", "numpy.argmax"], "function", ["None"], ["", "def", "bert_tensorflow_test", "(", "X_train", ",", "X_test", ",", "Y_train", ",", "Y_test", ")", ":", "\n", "# Model", "\n", "    ", "model", "=", "Sequential", "(", ")", "\n", "model", ".", "add", "(", "Masking", "(", "mask_value", "=", "0.", ",", "input_shape", "=", "(", "MAX_SEQUENCE_LEN", ",", "VECTOR_DIM", ")", ")", ")", "\n", "#forward_layer = LSTM(200, return_sequences=True)", "\n", "forward_layer", "=", "GRU", "(", "10", ",", "return_sequences", "=", "False", ",", "dropout", "=", "0.5", ")", "\n", "#backward_layer = LSTM(200, activation='relu', return_sequences=True,", "\n", "backward_layer", "=", "GRU", "(", "10", ",", "return_sequences", "=", "False", ",", "dropout", "=", "0.5", ",", "\n", "go_backwards", "=", "True", ")", "\n", "model", ".", "add", "(", "Bidirectional", "(", "forward_layer", ",", "backward_layer", "=", "backward_layer", ",", "\n", "input_shape", "=", "(", "MAX_SEQUENCE_LEN", ",", "VECTOR_DIM", ")", ")", ")", "\n", "#model.add(TimeDistributed(Dense(NUM_CLASSES)))", "\n", "# Remove TimeDistributed() so that predictions are now made for the entire sentence", "\n", "model", ".", "add", "(", "Dense", "(", "NUM_CLASSES", ")", ")", "\n", "model", ".", "add", "(", "Activation", "(", "'softmax'", ")", ")", "\n", "\n", "#print('preds shape', model.predict(X_train[:3]).shape)", "\n", "#print('Y_train shape', Y_train[:3].shape)", "\n", "#print(list(Y_train[:3]))", "\n", "classes", "=", "[", "]", "\n", "for", "y", "in", "Y_train", ":", "\n", "        ", "cls", "=", "np", ".", "argmax", "(", "y", ")", "\n", "classes", ".", "append", "(", "cls", ")", "\n", "", "print", "(", "Counter", "(", "classes", ")", ")", "\n", "\n", "model", ".", "compile", "(", "loss", "=", "'binary_crossentropy'", ",", "optimizer", "=", "'rmsprop'", ",", "metrics", "=", "[", "'accuracy'", "]", ")", "\n", "print", "(", "'compiled model'", ")", "\n", "model", ".", "fit", "(", "X_train", ",", "Y_train", ",", "batch_size", "=", "8", ",", "epochs", "=", "10", ")", "#, validation_split=0.1)", "\n", "print", "(", "'fit model'", ")", "\n", "eval", "=", "model", ".", "evaluate", "(", "X_test", ",", "Y_test", ",", "batch_size", "=", "8", ")", "\n", "#print('X_test[0]')", "\n", "#print(X_test[0])", "\n", "#print(X_train[0])", "\n", "preds", "=", "model", ".", "predict_proba", "(", "X_test", ",", "verbose", "=", "1", ",", "batch_size", "=", "8", ")", "\n", "print", "(", "preds", ")", "\n", "num_correct", "=", "0", "\n", "num_incorrect", "=", "0", "\n", "TP", "=", "0", "\n", "TN", "=", "0", "\n", "FP", "=", "0", "\n", "FN", "=", "0", "\n", "# idiomatic = 2, non-idiomatic = 3", "\n", "with", "open", "(", "'preds_out_temp.txt'", ",", "'w'", ")", "as", "tempoutf", ":", "\n", "        ", "for", "pred", ",", "y", "in", "zip", "(", "preds", ",", "Y_test", ")", ":", "\n", "            ", "if", "np", ".", "argmax", "(", "y", ")", "==", "2", "or", "np", ".", "argmax", "(", "y", ")", "==", "3", ":", "\n", "                ", "if", "np", ".", "argmax", "(", "y", ")", "==", "np", ".", "argmax", "(", "pred", ")", ":", "\n", "                    ", "num_correct", "+=", "1", "\n", "", "else", ":", "\n", "                    ", "num_incorrect", "+=", "1", "\n", "", "", "if", "np", ".", "argmax", "(", "pred", ")", "==", "2", "and", "np", ".", "argmax", "(", "y", ")", "==", "2", ":", "\n", "                ", "TP", "+=", "1", "\n", "", "if", "np", ".", "argmax", "(", "pred", ")", "==", "3", "and", "np", ".", "argmax", "(", "y", ")", "==", "3", ":", "\n", "                ", "TN", "+=", "1", "\n", "", "if", "np", ".", "argmax", "(", "pred", ")", "==", "2", "and", "np", ".", "argmax", "(", "y", ")", "==", "3", ":", "\n", "                ", "FP", "+=", "1", "\n", "", "if", "np", ".", "argmax", "(", "pred", ")", "==", "3", "and", "np", ".", "argmax", "(", "y", ")", "==", "2", ":", "\n", "                ", "FN", "+=", "1", "\n", "", "", "", "custom_accuracy", "=", "num_correct", "/", "(", "num_correct", "+", "num_incorrect", ")", "\n", "print", "(", "'custom accuracy is'", ",", "num_correct", "/", "(", "num_correct", "+", "num_incorrect", ")", ")", "\n", "for", "y", "in", "Y_test", ":", "\n", "        ", "cls", "=", "np", ".", "argmax", "(", "y", ")", "\n", "classes", ".", "append", "(", "cls", ")", "\n", "", "class_nums", "=", "Counter", "(", "classes", ")", "\n", "print", "(", "class_nums", ")", "\n", "default_acc", "=", "class_nums", "[", "2", "]", "/", "(", "class_nums", "[", "2", "]", "+", "class_nums", "[", "3", "]", ")", "\n", "print", "(", "'default accuracy is'", ",", "default_acc", ",", "'or'", ",", "1", "-", "default_acc", ")", "\n", "return", "eval", ",", "custom_accuracy", ",", "default_acc", ",", "[", "TP", ",", "TN", ",", "FP", ",", "FN", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.TadejSkvorc_MICE.models.tensorflow_bilstm_bert_multiple_files_shuffled.get_already_processed": [[293, 303], ["set", "set", "open", "line.split", "already_processed.append"], "function", ["None"], ["", "def", "get_already_processed", "(", "filename", ")", ":", "\n", "    ", "if", "filename", "==", "None", ":", "\n", "        ", "return", "set", "(", "[", "]", ")", "\n", "", "already_processed", "=", "[", "]", "\n", "with", "open", "(", "filename", ",", "'r'", ",", "encoding", "=", "'utf-8'", ")", "as", "f", ":", "\n", "        ", "for", "line", "in", "f", ":", "\n", "            ", "words", "=", "line", ".", "split", "(", "' '", ")", "\n", "if", "words", "[", "0", "]", "==", "'EXP'", ":", "\n", "                ", "already_processed", ".", "append", "(", "' '", ".", "join", "(", "words", "[", "1", ":", "]", ")", ")", "\n", "", "", "", "return", "set", "(", "already_processed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TadejSkvorc_MICE.models.crosloengual_bert_multiple_files.get_xy_per_expression": [[34, 153], ["print", "print", "print", "open", "enumerate", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "collections.Counter", "line.split", "debug_sent.append", "classes.append", "words.append", "curr_sent_words.append", "curr_sent_Y.append", "print", "len", "len", "tokenizer.tokenize", "tokenizer.convert_tokens_to_ids", "torch.tensor", "sent_wide_Y.append", "len", "len", "print", "print", "print", "len", "torch.no_grad", "model", "predictions.numpy", "data_by_expressions.keys", "data_by_expressions[].append", "expanded_classes.append", "expanded_classes.append", "print", "numpy.array", "numpy.array"], "function", ["None"], ["def", "get_xy_per_expression", "(", "filenames", ",", "tokenizer", ",", "model", ")", ":", "\n", "    ", "data_by_expressions", "=", "{", "}", "\n", "sent_wide_Y", "=", "[", "]", "\n", "sents_X", "=", "[", "]", "\n", "sents_Y", "=", "[", "]", "\n", "curr_sent_X", "=", "[", "]", "\n", "curr_sent_Y", "=", "[", "]", "\n", "expressions", "=", "[", "]", "\n", "curr_sent_words", "=", "[", "]", "\n", "print", "(", "'starting'", ")", "\n", "CLS_TO_INT_DICT", "=", "{", "'NE'", ":", "3", ",", "'DA'", ":", "2", ",", "'*'", ":", "1", ",", "'NEJASEN_ZGLED'", ":", "4", "}", "\n", "classes", "=", "[", "]", "\n", "words", "=", "[", "]", "\n", "X", "=", "[", "]", "\n", "Y", "=", "[", "]", "\n", "for", "filename", "in", "filenames", ":", "\n", "        ", "print", "(", "'reading file'", ",", "filename", ")", "\n", "with", "open", "(", "filename", ",", "'r'", ",", "encoding", "=", "'utf-8'", ")", "as", "f", ":", "\n", "            ", "debug_sent", "=", "[", "]", "\n", "for", "i", ",", "line", "in", "enumerate", "(", "f", ")", ":", "\n", "                ", "if", "i", "%", "500", "==", "0", ":", "\n", "                    ", "print", "(", "i", ")", "\n", "#if i >= 1500:", "\n", "#    break", "\n", "", "parts", "=", "line", ".", "split", "(", "'\\t'", ")", "\n", "word", "=", "parts", "[", "0", "]", "\n", "#print(len(parts))", "\n", "if", "len", "(", "word", ")", "==", "0", ":", "\n", "                    ", "continue", "\n", "", "if", "len", "(", "parts", ")", "!=", "3", ":", "\n", "                    ", "continue", "\n", "\n", "#print('len of parts', len(parts))", "\n", "", "word", "=", "parts", "[", "0", "]", "\n", "cls", "=", "parts", "[", "1", "]", "\n", "expression", "=", "parts", "[", "2", "]", "\n", "debug_sent", ".", "append", "(", "(", "word", ",", "cls", ",", "expression", ")", ")", "\n", "#print(word, cls)", "\n", "classes", ".", "append", "(", "cls", ")", "\n", "words", ".", "append", "(", "word", ")", "\n", "#print(exp, vector[:10], cls, expression)", "\n", "if", "not", "(", "cls", "==", "'DA'", "or", "cls", "==", "'NE'", "or", "cls", "==", "'*'", ")", ":", "\n", "                    ", "continue", "\n", "", "curr_sent_words", ".", "append", "(", "word", ")", "\n", "#print(len(literal_eval(vector)))", "\n", "curr_sent_Y", ".", "append", "(", "CLS_TO_INT_DICT", "[", "cls", "]", ")", "\n", "if", "word", "[", "-", "1", "]", "==", "'.'", ":", "\n", "#print('curr sent words', curr_sent_words)", "\n", "                    ", "str_sentence", "=", "' '", ".", "join", "(", "[", "x", "for", "x", "in", "curr_sent_words", "]", ")", "\n", "basic_tokens", "=", "[", "x", "for", "x", "in", "curr_sent_words", "]", "\n", "tokenized_text", "=", "tokenizer", ".", "tokenize", "(", "str_sentence", ")", "\n", "tokenized_text", "=", "[", "x", "for", "x", "in", "tokenized_text", "if", "x", "not", "in", "[", "','", ",", "':'", ",", "';'", ",", "'!'", ",", "'?'", ",", "'.'", ",", "'\"'", ",", "\"'\"", ",", "'/'", ",", "'\\\\'", "]", "]", "\n", "if", "len", "(", "basic_tokens", ")", "==", "len", "(", "tokenized_text", ")", ":", "\n", "                        ", "print", "(", "'tokenizer didn\\'t do anything'", ")", "\n", "print", "(", "basic_tokens", ")", "\n", "print", "(", "tokenized_text", ")", "\n", "", "if", "len", "(", "tokenized_text", ")", ">", "510", ":", "\n", "                        ", "curr_sent", "=", "[", "]", "\n", "curr_sent_words", "=", "[", "]", "\n", "curr_sent_X", "=", "[", "]", "\n", "curr_sent_Y", "=", "[", "]", "\n", "debug_sent", "=", "[", "]", "\n", "continue", "\n", "#print(expression)", "\n", "", "expanded_classes", "=", "[", "]", "\n", "current_class_index", "=", "-", "1", "\n", "#print(basic_tokens)", "\n", "for", "w", "in", "tokenized_text", ":", "\n", "#print(w[0:2])", "\n", "                        ", "if", "w", "[", "0", ":", "2", "]", "==", "'##'", ":", "\n", "                            ", "expanded_classes", ".", "append", "(", "curr_sent_Y", "[", "current_class_index", "]", ")", "\n", "#print(w, curr_sent_Y[current_class_index], current_class_index, len(curr_sent_Y))", "\n", "", "else", ":", "\n", "                            ", "current_class_index", "+=", "1", "\n", "expanded_classes", ".", "append", "(", "curr_sent_Y", "[", "current_class_index", "]", ")", "\n", "#print(w, curr_sent_Y[current_class_index], current_class_index, len(curr_sent_Y))", "\n", "\n", "#for x, y in zip(tokenized_text, expanded_classes):", "\n", "#    print(x,y)", "\n", "", "", "indexed_tokens", "=", "tokenizer", ".", "convert_tokens_to_ids", "(", "tokenized_text", ")", "\n", "tokens_tensor", "=", "torch", ".", "tensor", "(", "[", "indexed_tokens", "]", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                        ", "outputs", "=", "model", "(", "tokens_tensor", ")", "\n", "predictions", "=", "outputs", "[", "0", "]", "\n", "", "vectors", "=", "predictions", ".", "numpy", "(", ")", "[", "0", "]", "\n", "if", "expression", "not", "in", "data_by_expressions", ".", "keys", "(", ")", ":", "\n", "#print(expression)", "\n", "                        ", "data_by_expressions", "[", "expression", "]", "=", "[", "(", "vectors", ",", "np", ".", "array", "(", "expanded_classes", ")", ")", "]", "\n", "", "else", ":", "\n", "#print(expression)", "\n", "                        ", "data_by_expressions", "[", "expression", "]", ".", "append", "(", "(", "vectors", ",", "np", ".", "array", "(", "expanded_classes", ")", ")", ")", "\n", "", "sent_wide_cls", "=", "None", "\n", "if", "CLS_TO_INT_DICT", "[", "'DA'", "]", "in", "curr_sent_Y", ":", "\n", "                        ", "sent_wide_cls", "=", "CLS_TO_INT_DICT", "[", "'DA'", "]", "\n", "", "elif", "CLS_TO_INT_DICT", "[", "'NE'", "]", "in", "curr_sent_Y", ":", "\n", "                        ", "sent_wide_cls", "=", "CLS_TO_INT_DICT", "[", "'NE'", "]", "\n", "", "else", ":", "\n", "                        ", "sent_wide_cls", "=", "CLS_TO_INT_DICT", "[", "'NEJASEN_ZGLED'", "]", "\n", "print", "(", "'debug sent'", ",", "debug_sent", ")", "\n", "", "sent_wide_Y", ".", "append", "(", "sent_wide_cls", ")", "\n", "debug_sent", "=", "[", "]", "\n", "curr_sent_X", "=", "[", "]", "\n", "curr_sent_words", "=", "[", "]", "\n", "curr_sent_Y", "=", "[", "]", "\n", "#if cls == '5':", "\n", "#    print(line)", "\n", "", "", "X", "=", "np", ".", "array", "(", "X", ")", "\n", "Y", "=", "np", ".", "array", "(", "Y", ")", "\n", "sents_X", "=", "np", ".", "array", "(", "sents_X", ")", "\n", "sents_Y", "=", "np", ".", "array", "(", "sents_Y", ")", "\n", "\n", "", "print", "(", "Counter", "(", "classes", ")", ")", "\n", "#print(Counter(words))", "\n", "#print(X.shape)", "\n", "#print(Y.shape)", "\n", "#print(sents_X.shape)", "\n", "#print(sents_Y.shape)", "\n", "#return sents_X, sents_Y", "\n", "", "return", "data_by_expressions", "\n", "\n"]], "home.repos.pwc.inspect_result.TadejSkvorc_MICE.models.crosloengual_bert_multiple_files.bert_tensorflow_test": [[155, 228], ["tensorflow.keras.Sequential", "tensorflow.keras.Sequential.add", "tensorflow.keras.layers.GRU", "tensorflow.keras.layers.GRU", "tensorflow.keras.Sequential.add", "tensorflow.keras.Sequential.add", "tensorflow.keras.Sequential.add", "print", "tensorflow.keras.Sequential.compile", "print", "tensorflow.keras.Sequential.fit", "print", "tensorflow.keras.Sequential.evaluate", "tensorflow.keras.Sequential.predict_proba", "print", "collections.Counter", "print", "print", "tensorflow.keras.layers.Masking", "tensorflow.keras.layers.Bidirectional", "tensorflow.keras.layers.TimeDistributed", "tensorflow.keras.layers.Activation", "numpy.argmax", "classes.append", "collections.Counter", "open", "zip", "numpy.argmax", "classes.append", "tensorflow.keras.layers.Dense", "zip", "numpy.argmax", "numpy.argmax", "numpy.argmax", "numpy.argmax", "numpy.argmax", "numpy.argmax", "numpy.argmax", "numpy.argmax", "numpy.argmax", "numpy.argmax", "numpy.argmax", "numpy.argmax"], "function", ["None"], ["", "def", "bert_tensorflow_test", "(", "X_train", ",", "X_test", ",", "Y_train", ",", "Y_test", ")", ":", "\n", "# Model", "\n", "    ", "model", "=", "Sequential", "(", ")", "\n", "\n", "#model.add(Masking(mask_value=0.0, input_shape=(MAX_SEQUENCE_LEN,VECTOR_DIM)))", "\n", "model", ".", "add", "(", "Masking", "(", "mask_value", "=", "0.0", ",", "dtype", "=", "'float64'", ")", ")", "\n", "#forward_layer = LSTM(200, return_sequences=True)", "\n", "forward_layer", "=", "GRU", "(", "10", ",", "return_sequences", "=", "True", ",", "dropout", "=", "0.5", ")", "\n", "#backward_layer = LSTM(200, activation='relu', return_sequences=True,", "\n", "backward_layer", "=", "GRU", "(", "10", ",", "return_sequences", "=", "True", ",", "dropout", "=", "0.5", ",", "\n", "go_backwards", "=", "True", ")", "\n", "model", ".", "add", "(", "Bidirectional", "(", "forward_layer", ",", "backward_layer", "=", "backward_layer", ")", ")", "#,", "\n", "#input_shape=(MAX_SEQUENCE_LEN,VECTOR_DIM)))", "\n", "#model.add(TimeDistributed(Dense(NUM_CLASSES)))", "\n", "# Remove TimeDistributed() so that predictions are now made for the entire sentence", "\n", "model", ".", "add", "(", "TimeDistributed", "(", "Dense", "(", "NUM_CLASSES", ")", ")", ")", "\n", "model", ".", "add", "(", "Activation", "(", "'softmax'", ")", ")", "\n", "#print('preds shape', model.predict(X_train[:3]).shape)", "\n", "#print('Y_train shape', Y_train[:3].shape)", "\n", "#print(list(Y_train[:3]))", "\n", "classes", "=", "[", "]", "\n", "for", "y", "in", "Y_train", ":", "\n", "        ", "cls", "=", "np", ".", "argmax", "(", "y", ")", "\n", "classes", ".", "append", "(", "cls", ")", "\n", "", "print", "(", "Counter", "(", "classes", ")", ")", "\n", "\n", "model", ".", "compile", "(", "loss", "=", "'binary_crossentropy'", ",", "optimizer", "=", "'rmsprop'", ",", "metrics", "=", "[", "'accuracy'", "]", ")", "\n", "print", "(", "'compiled model'", ")", "\n", "model", ".", "fit", "(", "X_train", ",", "Y_train", ",", "batch_size", "=", "4", ",", "epochs", "=", "2", ",", "validation_split", "=", "0.0", ")", "\n", "print", "(", "'fit model'", ")", "\n", "eval", "=", "model", ".", "evaluate", "(", "X_test", ",", "Y_test", ",", "batch_size", "=", "4", ")", "\n", "#print('X_test[0]')", "\n", "#print(X_test[0])", "\n", "#print(X_train[0])", "\n", "preds", "=", "model", ".", "predict_proba", "(", "X_test", ",", "verbose", "=", "1", ",", "batch_size", "=", "4", ")", "\n", "#print(preds)", "\n", "num_correct", "=", "0", "\n", "num_incorrect", "=", "0", "\n", "TP", "=", "0", "\n", "TN", "=", "0", "\n", "FP", "=", "0", "\n", "FN", "=", "0", "\n", "# idiomatic = 2, non-idiomatic = 3", "\n", "with", "open", "(", "'preds_out_temp.txt'", ",", "'w'", ")", "as", "tempoutf", ":", "\n", "        ", "for", "pred", ",", "y", "in", "zip", "(", "preds", ",", "Y_test", ")", ":", "\n", "            ", "for", "token_pred", ",", "token_y", "in", "zip", "(", "pred", ",", "y", ")", ":", "\n", "#print(np.argmax(token_pred), np.argmax(token_y))", "\n", "                ", "if", "np", ".", "argmax", "(", "token_y", ")", "==", "2", "or", "np", ".", "argmax", "(", "token_y", ")", "==", "3", ":", "\n", "                    ", "if", "np", ".", "argmax", "(", "token_y", ")", "==", "np", ".", "argmax", "(", "token_pred", ")", ":", "\n", "                        ", "num_correct", "+=", "1", "\n", "", "else", ":", "\n", "                        ", "num_incorrect", "+=", "1", "\n", "", "", "if", "np", ".", "argmax", "(", "token_pred", ")", "==", "2", "and", "np", ".", "argmax", "(", "token_y", ")", "==", "2", ":", "\n", "                    ", "TP", "+=", "1", "\n", "", "if", "np", ".", "argmax", "(", "token_pred", ")", "!=", "2", "and", "np", ".", "argmax", "(", "token_y", ")", "!=", "2", ":", "\n", "                    ", "TN", "+=", "1", "\n", "", "if", "np", ".", "argmax", "(", "token_pred", ")", "==", "2", "and", "np", ".", "argmax", "(", "token_y", ")", "!=", "2", ":", "\n", "                    ", "FP", "+=", "1", "\n", "", "if", "np", ".", "argmax", "(", "token_pred", ")", "!=", "2", "and", "np", ".", "argmax", "(", "token_y", ")", "==", "2", ":", "\n", "                    ", "FN", "+=", "1", "\n", "", "", "", "", "if", "num_correct", "+", "num_incorrect", "==", "0", ":", "\n", "        ", "custom_accuracy", "=", "0", "\n", "", "else", ":", "\n", "        ", "custom_accuracy", "=", "num_correct", "/", "(", "num_correct", "+", "num_incorrect", ")", "\n", "", "print", "(", "'custom accuracy is'", ",", "custom_accuracy", ")", "\n", "for", "y", "in", "Y_test", ":", "\n", "        ", "cls", "=", "np", ".", "argmax", "(", "y", ")", "\n", "classes", ".", "append", "(", "cls", ")", "\n", "", "class_nums", "=", "Counter", "(", "classes", ")", "\n", "print", "(", "class_nums", ")", "\n", "default_acc", "=", "class_nums", "[", "2", "]", "/", "(", "class_nums", "[", "2", "]", "+", "class_nums", "[", "3", "]", ")", "\n", "print", "(", "'default accuracy is'", ",", "default_acc", ",", "'or'", ",", "1", "-", "default_acc", ")", "\n", "return", "eval", ",", "custom_accuracy", ",", "default_acc", ",", "[", "TP", ",", "TN", ",", "FP", ",", "FN", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.TadejSkvorc_MICE.models.crosloengual_bert_multiple_files.get_already_processed": [[230, 240], ["set", "set", "open", "line.split", "already_processed.append"], "function", ["None"], ["", "def", "get_already_processed", "(", "filename", ")", ":", "\n", "    ", "if", "filename", "==", "None", ":", "\n", "        ", "return", "set", "(", "[", "]", ")", "\n", "", "already_processed", "=", "[", "]", "\n", "with", "open", "(", "filename", ",", "'r'", ",", "encoding", "=", "'utf-8'", ")", "as", "f", ":", "\n", "        ", "for", "line", "in", "f", ":", "\n", "            ", "words", "=", "line", ".", "split", "(", "' '", ")", "\n", "if", "words", "[", "0", "]", "==", "'EXP'", ":", "\n", "                ", "already_processed", ".", "append", "(", "' '", ".", "join", "(", "words", "[", "1", ":", "]", ")", ")", "\n", "", "", "", "return", "set", "(", "already_processed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TadejSkvorc_MICE.models.tensorflow_bilstm_elmo_multiple_files_shuffled.get_xy": [[27, 94], ["print", "print", "open", "enumerate", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "print", "print", "print", "print", "print", "print", "line.split", "debug_sent.append", "classes.append", "words.append", "curr_sent_X.append", "curr_sent_Y.append", "collections.Counter", "collections.Counter", "print", "len", "ast.literal_eval", "np.array.append", "np.array.append", "sent_wide_Y.append", "numpy.array", "numpy.array"], "function", ["None"], ["def", "get_xy", "(", "filename", ")", ":", "\n", "    ", "sent_wide_Y", "=", "[", "]", "\n", "sents_X", "=", "[", "]", "\n", "sents_Y", "=", "[", "]", "\n", "curr_sent_X", "=", "[", "]", "\n", "curr_sent_Y", "=", "[", "]", "\n", "print", "(", "'starting'", ")", "\n", "CLS_TO_INT_DICT", "=", "{", "'NE'", ":", "3", ",", "'DA'", ":", "2", ",", "'*'", ":", "1", ",", "'NEJASEN_ZGLED'", ":", "4", "}", "\n", "classes", "=", "[", "]", "\n", "words", "=", "[", "]", "\n", "X", "=", "[", "]", "\n", "Y", "=", "[", "]", "\n", "print", "(", "'reading file'", ")", "\n", "with", "open", "(", "filename", ",", "'r'", ",", "encoding", "=", "'utf-8'", ")", "as", "f", ":", "\n", "        ", "debug_sent", "=", "[", "]", "\n", "for", "i", ",", "line", "in", "enumerate", "(", "f", ")", ":", "\n", "            ", "if", "i", "%", "500", "==", "0", ":", "\n", "                ", "print", "(", "i", ")", "\n", "#if i >= 1500:", "\n", "#    break", "\n", "", "parts", "=", "line", ".", "split", "(", "'\\t'", ")", "\n", "word", "=", "parts", "[", "0", "]", "\n", "if", "len", "(", "word", ")", "==", "0", ":", "\n", "                ", "continue", "\n", "\n", "", "vector", "=", "parts", "[", "1", "]", "\n", "cls", "=", "parts", "[", "2", "]", "[", ":", "-", "1", "]", "\n", "debug_sent", ".", "append", "(", "(", "word", ",", "cls", ")", ")", "\n", "#print(word, cls)", "\n", "classes", ".", "append", "(", "cls", ")", "\n", "words", ".", "append", "(", "word", ")", "\n", "if", "not", "(", "cls", "==", "'DA'", "or", "cls", "==", "'NE'", "or", "cls", "==", "'*'", ")", ":", "\n", "                ", "continue", "\n", "", "curr_sent_X", ".", "append", "(", "literal_eval", "(", "vector", ")", ")", "\n", "#print(len(literal_eval(vector)))", "\n", "curr_sent_Y", ".", "append", "(", "CLS_TO_INT_DICT", "[", "cls", "]", ")", "\n", "\n", "if", "word", "[", "-", "1", "]", "==", "'.'", ":", "\n", "                ", "sents_X", ".", "append", "(", "np", ".", "array", "(", "curr_sent_X", ")", ")", "\n", "sents_Y", ".", "append", "(", "np", ".", "array", "(", "curr_sent_Y", ")", ")", "\n", "sent_wide_cls", "=", "None", "\n", "if", "CLS_TO_INT_DICT", "[", "'DA'", "]", "in", "curr_sent_Y", ":", "\n", "                    ", "sent_wide_cls", "=", "CLS_TO_INT_DICT", "[", "'DA'", "]", "\n", "", "elif", "CLS_TO_INT_DICT", "[", "'NE'", "]", "in", "curr_sent_Y", ":", "\n", "                    ", "sent_wide_cls", "=", "CLS_TO_INT_DICT", "[", "'NE'", "]", "\n", "", "else", ":", "\n", "                    ", "sent_wide_cls", "=", "CLS_TO_INT_DICT", "[", "'NEJASEN_ZGLED'", "]", "\n", "#print('debug sent', debug_sent)", "\n", "", "sent_wide_Y", ".", "append", "(", "sent_wide_cls", ")", "\n", "debug_sent", "=", "[", "]", "\n", "curr_sent_X", "=", "[", "]", "\n", "curr_sent_Y", "=", "[", "]", "\n", "#if cls == '5':", "\n", "#    print(line)", "\n", "", "", "X", "=", "np", ".", "array", "(", "X", ")", "\n", "Y", "=", "np", ".", "array", "(", "Y", ")", "\n", "sents_X", "=", "np", ".", "array", "(", "sents_X", ")", "\n", "sents_Y", "=", "np", ".", "array", "(", "sents_Y", ")", "\n", "\n", "print", "(", "Counter", "(", "classes", ")", ")", "\n", "print", "(", "Counter", "(", "words", ")", ")", "\n", "print", "(", "X", ".", "shape", ")", "\n", "print", "(", "Y", ".", "shape", ")", "\n", "print", "(", "sents_X", ".", "shape", ")", "\n", "print", "(", "sents_Y", ".", "shape", ")", "\n", "#return sents_X, sents_Y", "\n", "", "return", "sents_X", ",", "sent_wide_Y", "\n", "\n"]], "home.repos.pwc.inspect_result.TadejSkvorc_MICE.models.tensorflow_bilstm_elmo_multiple_files_shuffled.get_xy_per_expression": [[96, 176], ["print", "print", "print", "print", "print", "print", "print", "print", "open", "enumerate", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "collections.Counter", "collections.Counter", "line.split", "debug_sent.append", "classes.append", "words.append", "curr_sent_X.append", "curr_sent_Y.append", "print", "len", "len", "ast.literal_eval", "sent_wide_Y.append", "data_by_expressions.keys", "data_by_expressions[].append", "print", "numpy.array", "numpy.array", "numpy.array", "numpy.array"], "function", ["None"], ["", "def", "get_xy_per_expression", "(", "filenames", ")", ":", "\n", "    ", "data_by_expressions", "=", "{", "}", "\n", "sent_wide_Y", "=", "[", "]", "\n", "sents_X", "=", "[", "]", "\n", "sents_Y", "=", "[", "]", "\n", "curr_sent_X", "=", "[", "]", "\n", "curr_sent_Y", "=", "[", "]", "\n", "expressions", "=", "[", "]", "\n", "print", "(", "'starting'", ")", "\n", "CLS_TO_INT_DICT", "=", "{", "'NE'", ":", "3", ",", "'DA'", ":", "2", ",", "'*'", ":", "1", ",", "'NEJASEN_ZGLED'", ":", "4", "}", "\n", "classes", "=", "[", "]", "\n", "words", "=", "[", "]", "\n", "X", "=", "[", "]", "\n", "Y", "=", "[", "]", "\n", "for", "filename", "in", "filenames", ":", "\n", "        ", "print", "(", "'reading file'", ",", "filename", ")", "\n", "with", "open", "(", "filename", ",", "'r'", ",", "encoding", "=", "'utf-8'", ")", "as", "f", ":", "\n", "            ", "debug_sent", "=", "[", "]", "\n", "for", "i", ",", "line", "in", "enumerate", "(", "f", ")", ":", "\n", "                ", "if", "i", "%", "500", "==", "0", ":", "\n", "                    ", "print", "(", "i", ")", "\n", "#if i >= 3000:", "\n", "#    break", "\n", "", "parts", "=", "line", ".", "split", "(", "'\\t'", ")", "\n", "word", "=", "parts", "[", "0", "]", "\n", "#print(len(parts))", "\n", "if", "len", "(", "word", ")", "==", "0", ":", "\n", "                    ", "continue", "\n", "", "if", "len", "(", "parts", ")", "!=", "4", ":", "\n", "                    ", "continue", "\n", "#print('len of parts', len(parts))", "\n", "", "exp", "=", "parts", "[", "0", "]", "\n", "vector", "=", "parts", "[", "1", "]", "\n", "cls", "=", "parts", "[", "2", "]", "\n", "expression", "=", "parts", "[", "3", "]", "\n", "#print(word, cls, expression)", "\n", "debug_sent", ".", "append", "(", "(", "word", ",", "cls", ",", "expression", ")", ")", "\n", "#print(word, cls)", "\n", "classes", ".", "append", "(", "cls", ")", "\n", "words", ".", "append", "(", "word", ")", "\n", "#print(exp, vector[:10], cls, expression)", "\n", "if", "not", "(", "cls", "==", "'DA'", "or", "cls", "==", "'NE'", "or", "cls", "==", "'*'", ")", ":", "\n", "                    ", "continue", "\n", "", "curr_sent_X", ".", "append", "(", "literal_eval", "(", "vector", ")", ")", "\n", "#print(len(literal_eval(vector)))", "\n", "curr_sent_Y", ".", "append", "(", "CLS_TO_INT_DICT", "[", "cls", "]", ")", "\n", "if", "word", "[", "-", "1", "]", "==", "'.'", ":", "\n", "                    ", "if", "expression", "not", "in", "data_by_expressions", ".", "keys", "(", ")", ":", "\n", "#print(expression)", "\n", "                        ", "data_by_expressions", "[", "expression", "]", "=", "[", "(", "np", ".", "array", "(", "curr_sent_X", ")", ",", "np", ".", "array", "(", "curr_sent_Y", ")", ")", "]", "\n", "", "else", ":", "\n", "#print(expression)", "\n", "                        ", "data_by_expressions", "[", "expression", "]", ".", "append", "(", "(", "np", ".", "array", "(", "curr_sent_X", ")", ",", "np", ".", "array", "(", "curr_sent_Y", ")", ")", ")", "\n", "", "sent_wide_cls", "=", "None", "\n", "if", "CLS_TO_INT_DICT", "[", "'DA'", "]", "in", "curr_sent_Y", ":", "\n", "                        ", "sent_wide_cls", "=", "CLS_TO_INT_DICT", "[", "'DA'", "]", "\n", "", "elif", "CLS_TO_INT_DICT", "[", "'NE'", "]", "in", "curr_sent_Y", ":", "\n", "                        ", "sent_wide_cls", "=", "CLS_TO_INT_DICT", "[", "'NE'", "]", "\n", "", "else", ":", "\n", "                        ", "sent_wide_cls", "=", "CLS_TO_INT_DICT", "[", "'NEJASEN_ZGLED'", "]", "\n", "print", "(", "'debug sent'", ",", "debug_sent", ")", "\n", "", "sent_wide_Y", ".", "append", "(", "sent_wide_cls", ")", "\n", "debug_sent", "=", "[", "]", "\n", "curr_sent_X", "=", "[", "]", "\n", "curr_sent_Y", "=", "[", "]", "\n", "#if cls == '5':", "\n", "#    print(line)", "\n", "", "", "X", "=", "np", ".", "array", "(", "X", ")", "\n", "Y", "=", "np", ".", "array", "(", "Y", ")", "\n", "sents_X", "=", "np", ".", "array", "(", "sents_X", ")", "\n", "sents_Y", "=", "np", ".", "array", "(", "sents_Y", ")", "\n", "\n", "", "print", "(", "Counter", "(", "classes", ")", ")", "\n", "print", "(", "Counter", "(", "words", ")", ")", "\n", "print", "(", "X", ".", "shape", ")", "\n", "print", "(", "Y", ".", "shape", ")", "\n", "print", "(", "sents_X", ".", "shape", ")", "\n", "print", "(", "sents_Y", ".", "shape", ")", "\n", "#return sents_X, sents_Y", "\n", "", "return", "data_by_expressions", "\n", "\n"]], "home.repos.pwc.inspect_result.TadejSkvorc_MICE.models.tensorflow_bilstm_elmo_multiple_files_shuffled.get_bert_data_per_expression": [[177, 179], ["tensorflow_bilstm_elmo_multiple_files_shuffled.get_xy"], "function", ["home.repos.pwc.inspect_result.TadejSkvorc_MICE.models.tensorflow_bilstm_bert_per_expression_multiple_files.get_xy"], ["", "def", "get_bert_data_per_expression", "(", "IN_FILENAME", ")", ":", "\n", "    ", "X", ",", "Y", "=", "get_xy", "(", "IN_FILENAME", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TadejSkvorc_MICE.models.tensorflow_bilstm_elmo_multiple_files_shuffled.get_bert_data": [[182, 222], ["print", "print", "print", "tensorflow_bilstm_elmo_multiple_files_shuffled.get_xy", "print", "tensorflow.keras.utils.to_categorical", "numpy.array", "tensorflow_bilstm_elmo_multiple_files_shuffled.get_xy", "tensorflow.keras.utils.to_categorical", "numpy.array", "tensorflow.keras.preprocessing.sequence.pad_sequences", "tensorflow.keras.preprocessing.sequence.pad_sequences", "tensorflow_bilstm_elmo_multiple_files_shuffled.get_xy", "print", "print", "tensorflow.keras.utils.to_categorical", "numpy.array", "print", "print", "print", "print", "print", "tensorflow.keras.preprocessing.sequence.pad_sequences", "print", "print", "print", "sklearn.model_selection.train_test_split", "len", "len"], "function", ["home.repos.pwc.inspect_result.TadejSkvorc_MICE.models.tensorflow_bilstm_bert_per_expression_multiple_files.get_xy", "home.repos.pwc.inspect_result.TadejSkvorc_MICE.models.tensorflow_bilstm_bert_per_expression_multiple_files.get_xy", "home.repos.pwc.inspect_result.TadejSkvorc_MICE.models.tensorflow_bilstm_bert_per_expression_multiple_files.get_xy"], ["", "def", "get_bert_data", "(", "IN_FILENAME", ",", "IN_FILENAME_TEST", ")", ":", "\n", "    ", "if", "IN_FILENAME_TEST", "!=", "None", ":", "\n", "        ", "X_train", ",", "Y_train", "=", "get_xy", "(", "IN_FILENAME", ")", "\n", "print", "(", "Y_train", "[", ":", "5", "]", ")", "\n", "Y_train", "=", "to_categorical", "(", "Y_train", ",", "num_classes", "=", "NUM_CLASSES", ")", "\n", "Y_train", "=", "np", ".", "array", "(", "Y_train", ")", "\n", "X_test", ",", "Y_test", "=", "get_xy", "(", "IN_FILENAME_TEST", ")", "\n", "Y_test", "=", "to_categorical", "(", "Y_test", ",", "num_classes", "=", "NUM_CLASSES", ")", "\n", "Y_test", "=", "np", ".", "array", "(", "Y_test", ")", "\n", "# Pad everything", "\n", "X_train", "=", "pad_sequences", "(", "X_train", ",", "padding", "=", "'post'", ",", "maxlen", "=", "MAX_SEQUENCE_LEN", ",", "dtype", "=", "'float'", ")", "\n", "X_test", "=", "pad_sequences", "(", "X_test", ",", "padding", "=", "'post'", ",", "maxlen", "=", "MAX_SEQUENCE_LEN", ",", "dtype", "=", "'float'", ")", "\n", "#Y_train = pad_sequences(Y_train, padding='post', maxlen=MAX_SEQUENCE_LEN)", "\n", "#Y_test = pad_sequences(Y_test, padding='post', maxlen=MAX_SEQUENCE_LEN)", "\n", "", "else", ":", "\n", "        ", "X", ",", "Y", "=", "get_xy", "(", "IN_FILENAME", ")", "\n", "print", "(", "'first X'", ")", "\n", "print", "(", "X", "[", "0", "]", ")", "\n", "Y", "=", "to_categorical", "(", "Y", ",", "num_classes", "=", "NUM_CLASSES", ")", "\n", "Y", "=", "np", ".", "array", "(", "Y", ")", "\n", "print", "(", "'y shape'", ",", "Y", ".", "shape", ")", "\n", "print", "(", "'y[0]'", ",", "Y", "[", "0", "]", ")", "\n", "print", "(", "'y[1]'", ",", "Y", "[", "1", "]", ")", "\n", "print", "(", "'y[2]'", ",", "Y", "[", "2", "]", ")", "\n", "sent_lens", "=", "[", "len", "(", "x", ")", "for", "x", "in", "X", "]", "\n", "print", "(", "sent_lens", ")", "\n", "padded_X", "=", "pad_sequences", "(", "X", ",", "padding", "=", "'post'", ",", "maxlen", "=", "MAX_SEQUENCE_LEN", ",", "dtype", "=", "'float'", ")", "\n", "print", "(", "'padded_X'", ")", "\n", "print", "(", "padded_X", "[", "0", "]", ")", "\n", "#padded_Y = pad_sequences(Y, padding='post', maxlen=MAX_SEQUENCE_LEN)", "\n", "sent_lens", "=", "[", "len", "(", "x", ")", "for", "x", "in", "padded_X", "]", "\n", "print", "(", "sent_lens", ")", "\n", "\n", "#exit()", "\n", "X_train", ",", "X_test", ",", "Y_train", ",", "Y_test", "=", "train_test_split", "(", "padded_X", ",", "Y", ",", "test_size", "=", "0.33", ",", "shuffle", "=", "True", ")", "\n", "\n", "", "print", "(", "X_train", ".", "shape", ",", "X_train", "[", "0", "]", ".", "shape", ")", "\n", "print", "(", "'first X_test'", ")", "\n", "print", "(", "X_test", "[", "0", "]", ")", "\n", "return", "X_train", ",", "X_test", ",", "Y_train", ",", "Y_test", "\n", "\n"]], "home.repos.pwc.inspect_result.TadejSkvorc_MICE.models.tensorflow_bilstm_elmo_multiple_files_shuffled.bert_tensorflow_test": [[224, 291], ["tensorflow.keras.Sequential", "tensorflow.keras.Sequential.add", "tensorflow.keras.layers.GRU", "tensorflow.keras.layers.GRU", "tensorflow.keras.Sequential.add", "tensorflow.keras.Sequential.add", "tensorflow.keras.Sequential.add", "print", "tensorflow.keras.Sequential.compile", "print", "tensorflow.keras.Sequential.fit", "print", "tensorflow.keras.Sequential.evaluate", "tensorflow.keras.Sequential.predict_proba", "print", "print", "collections.Counter", "print", "print", "tensorflow.keras.layers.Masking", "tensorflow.keras.layers.Bidirectional", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Activation", "numpy.argmax", "classes.append", "collections.Counter", "open", "zip", "numpy.argmax", "classes.append", "numpy.argmax", "numpy.argmax", "numpy.argmax", "numpy.argmax", "numpy.argmax", "numpy.argmax", "numpy.argmax", "numpy.argmax", "numpy.argmax", "numpy.argmax", "numpy.argmax", "numpy.argmax"], "function", ["None"], ["", "def", "bert_tensorflow_test", "(", "X_train", ",", "X_test", ",", "Y_train", ",", "Y_test", ")", ":", "\n", "# Model", "\n", "    ", "model", "=", "Sequential", "(", ")", "\n", "model", ".", "add", "(", "Masking", "(", "mask_value", "=", "0.", ",", "input_shape", "=", "(", "MAX_SEQUENCE_LEN", ",", "VECTOR_DIM", ")", ")", ")", "\n", "#forward_layer = LSTM(200, return_sequences=True)", "\n", "forward_layer", "=", "GRU", "(", "10", ",", "return_sequences", "=", "False", ",", "dropout", "=", "0.5", ")", "\n", "#backward_layer = LSTM(200, activation='relu', return_sequences=True,", "\n", "backward_layer", "=", "GRU", "(", "10", ",", "return_sequences", "=", "False", ",", "dropout", "=", "0.5", ",", "\n", "go_backwards", "=", "True", ")", "\n", "model", ".", "add", "(", "Bidirectional", "(", "forward_layer", ",", "backward_layer", "=", "backward_layer", ",", "\n", "input_shape", "=", "(", "MAX_SEQUENCE_LEN", ",", "VECTOR_DIM", ")", ")", ")", "\n", "#model.add(TimeDistributed(Dense(NUM_CLASSES)))", "\n", "# Remove TimeDistributed() so that predictions are now made for the entire sentence", "\n", "model", ".", "add", "(", "Dense", "(", "NUM_CLASSES", ")", ")", "\n", "model", ".", "add", "(", "Activation", "(", "'softmax'", ")", ")", "\n", "\n", "#print('preds shape', model.predict(X_train[:3]).shape)", "\n", "#print('Y_train shape', Y_train[:3].shape)", "\n", "#print(list(Y_train[:3]))", "\n", "classes", "=", "[", "]", "\n", "for", "y", "in", "Y_train", ":", "\n", "        ", "cls", "=", "np", ".", "argmax", "(", "y", ")", "\n", "classes", ".", "append", "(", "cls", ")", "\n", "", "print", "(", "Counter", "(", "classes", ")", ")", "\n", "\n", "model", ".", "compile", "(", "loss", "=", "'binary_crossentropy'", ",", "optimizer", "=", "'rmsprop'", ",", "metrics", "=", "[", "'accuracy'", "]", ")", "\n", "print", "(", "'compiled model'", ")", "\n", "model", ".", "fit", "(", "X_train", ",", "Y_train", ",", "batch_size", "=", "8", ",", "epochs", "=", "10", ")", "#, validation_split=0.1)", "\n", "print", "(", "'fit model'", ")", "\n", "eval", "=", "model", ".", "evaluate", "(", "X_test", ",", "Y_test", ",", "batch_size", "=", "8", ")", "\n", "#print('X_test[0]')", "\n", "#print(X_test[0])", "\n", "#print(X_train[0])", "\n", "preds", "=", "model", ".", "predict_proba", "(", "X_test", ",", "verbose", "=", "1", ",", "batch_size", "=", "8", ")", "\n", "print", "(", "preds", ")", "\n", "num_correct", "=", "0", "\n", "num_incorrect", "=", "0", "\n", "TP", "=", "0", "\n", "TN", "=", "0", "\n", "FP", "=", "0", "\n", "FN", "=", "0", "\n", "# idiomatic = 2, non-idiomatic = 3", "\n", "with", "open", "(", "'preds_out_temp.txt'", ",", "'w'", ")", "as", "tempoutf", ":", "\n", "        ", "for", "pred", ",", "y", "in", "zip", "(", "preds", ",", "Y_test", ")", ":", "\n", "            ", "if", "np", ".", "argmax", "(", "y", ")", "==", "2", "or", "np", ".", "argmax", "(", "y", ")", "==", "3", ":", "\n", "                ", "if", "np", ".", "argmax", "(", "y", ")", "==", "np", ".", "argmax", "(", "pred", ")", ":", "\n", "                    ", "num_correct", "+=", "1", "\n", "", "else", ":", "\n", "                    ", "num_incorrect", "+=", "1", "\n", "", "", "if", "np", ".", "argmax", "(", "pred", ")", "==", "2", "and", "np", ".", "argmax", "(", "y", ")", "==", "2", ":", "\n", "                ", "TP", "+=", "1", "\n", "", "if", "np", ".", "argmax", "(", "pred", ")", "==", "3", "and", "np", ".", "argmax", "(", "y", ")", "==", "3", ":", "\n", "                ", "TN", "+=", "1", "\n", "", "if", "np", ".", "argmax", "(", "pred", ")", "==", "2", "and", "np", ".", "argmax", "(", "y", ")", "==", "3", ":", "\n", "                ", "FP", "+=", "1", "\n", "", "if", "np", ".", "argmax", "(", "pred", ")", "==", "3", "and", "np", ".", "argmax", "(", "y", ")", "==", "2", ":", "\n", "                ", "FN", "+=", "1", "\n", "", "", "", "custom_accuracy", "=", "num_correct", "/", "(", "num_correct", "+", "num_incorrect", ")", "\n", "print", "(", "'custom accuracy is'", ",", "num_correct", "/", "(", "num_correct", "+", "num_incorrect", ")", ")", "\n", "for", "y", "in", "Y_test", ":", "\n", "        ", "cls", "=", "np", ".", "argmax", "(", "y", ")", "\n", "classes", ".", "append", "(", "cls", ")", "\n", "", "class_nums", "=", "Counter", "(", "classes", ")", "\n", "print", "(", "class_nums", ")", "\n", "default_acc", "=", "class_nums", "[", "2", "]", "/", "(", "class_nums", "[", "2", "]", "+", "class_nums", "[", "3", "]", ")", "\n", "print", "(", "'default accuracy is'", ",", "default_acc", ",", "'or'", ",", "1", "-", "default_acc", ")", "\n", "return", "eval", ",", "custom_accuracy", ",", "default_acc", ",", "[", "TP", ",", "TN", ",", "FP", ",", "FN", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.TadejSkvorc_MICE.models.tensorflow_bilstm_elmo_multiple_files_shuffled.get_already_processed": [[293, 303], ["set", "set", "open", "line.split", "already_processed.append"], "function", ["None"], ["", "def", "get_already_processed", "(", "filename", ")", ":", "\n", "    ", "if", "filename", "==", "None", ":", "\n", "        ", "return", "set", "(", "[", "]", ")", "\n", "", "already_processed", "=", "[", "]", "\n", "with", "open", "(", "filename", ",", "'r'", ",", "encoding", "=", "'utf-8'", ")", "as", "f", ":", "\n", "        ", "for", "line", "in", "f", ":", "\n", "            ", "words", "=", "line", ".", "split", "(", "' '", ")", "\n", "if", "words", "[", "0", "]", "==", "'EXP'", ":", "\n", "                ", "already_processed", ".", "append", "(", "' '", ".", "join", "(", "words", "[", "1", ":", "]", ")", ")", "\n", "", "", "", "return", "set", "(", "already_processed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TadejSkvorc_MICE.models.tensorflow_bilstm_bert_per_expression_multiple_files.get_xy": [[27, 94], ["print", "print", "open", "enumerate", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "print", "print", "print", "print", "print", "print", "line.split", "debug_sent.append", "classes.append", "words.append", "curr_sent_X.append", "curr_sent_Y.append", "collections.Counter", "collections.Counter", "print", "len", "ast.literal_eval", "np.array.append", "np.array.append", "sent_wide_Y.append", "numpy.array", "numpy.array"], "function", ["None"], ["def", "get_xy", "(", "filename", ")", ":", "\n", "    ", "sent_wide_Y", "=", "[", "]", "\n", "sents_X", "=", "[", "]", "\n", "sents_Y", "=", "[", "]", "\n", "curr_sent_X", "=", "[", "]", "\n", "curr_sent_Y", "=", "[", "]", "\n", "print", "(", "'starting'", ")", "\n", "CLS_TO_INT_DICT", "=", "{", "'NE'", ":", "3", ",", "'DA'", ":", "2", ",", "'*'", ":", "1", ",", "'NEJASEN_ZGLED'", ":", "4", "}", "\n", "classes", "=", "[", "]", "\n", "words", "=", "[", "]", "\n", "X", "=", "[", "]", "\n", "Y", "=", "[", "]", "\n", "print", "(", "'reading file'", ")", "\n", "with", "open", "(", "filename", ",", "'r'", ",", "encoding", "=", "'utf-8'", ")", "as", "f", ":", "\n", "        ", "debug_sent", "=", "[", "]", "\n", "for", "i", ",", "line", "in", "enumerate", "(", "f", ")", ":", "\n", "            ", "if", "i", "%", "500", "==", "0", ":", "\n", "                ", "print", "(", "i", ")", "\n", "#if i >= 1500:", "\n", "#    break", "\n", "", "parts", "=", "line", ".", "split", "(", "'\\t'", ")", "\n", "word", "=", "parts", "[", "0", "]", "\n", "if", "len", "(", "word", ")", "==", "0", ":", "\n", "                ", "continue", "\n", "\n", "", "vector", "=", "parts", "[", "1", "]", "\n", "cls", "=", "parts", "[", "2", "]", "[", ":", "-", "1", "]", "\n", "debug_sent", ".", "append", "(", "(", "word", ",", "cls", ")", ")", "\n", "#print(word, cls)", "\n", "classes", ".", "append", "(", "cls", ")", "\n", "words", ".", "append", "(", "word", ")", "\n", "if", "not", "(", "cls", "==", "'DA'", "or", "cls", "==", "'NE'", "or", "cls", "==", "'*'", ")", ":", "\n", "                ", "continue", "\n", "", "curr_sent_X", ".", "append", "(", "literal_eval", "(", "vector", ")", ")", "\n", "#print(len(literal_eval(vector)))", "\n", "curr_sent_Y", ".", "append", "(", "CLS_TO_INT_DICT", "[", "cls", "]", ")", "\n", "\n", "if", "word", "[", "-", "1", "]", "==", "'.'", ":", "\n", "                ", "sents_X", ".", "append", "(", "np", ".", "array", "(", "curr_sent_X", ")", ")", "\n", "sents_Y", ".", "append", "(", "np", ".", "array", "(", "curr_sent_Y", ")", ")", "\n", "sent_wide_cls", "=", "None", "\n", "if", "CLS_TO_INT_DICT", "[", "'DA'", "]", "in", "curr_sent_Y", ":", "\n", "                    ", "sent_wide_cls", "=", "CLS_TO_INT_DICT", "[", "'DA'", "]", "\n", "", "elif", "CLS_TO_INT_DICT", "[", "'NE'", "]", "in", "curr_sent_Y", ":", "\n", "                    ", "sent_wide_cls", "=", "CLS_TO_INT_DICT", "[", "'NE'", "]", "\n", "", "else", ":", "\n", "                    ", "sent_wide_cls", "=", "CLS_TO_INT_DICT", "[", "'NEJASEN_ZGLED'", "]", "\n", "#print('debug sent', debug_sent)", "\n", "", "sent_wide_Y", ".", "append", "(", "sent_wide_cls", ")", "\n", "debug_sent", "=", "[", "]", "\n", "curr_sent_X", "=", "[", "]", "\n", "curr_sent_Y", "=", "[", "]", "\n", "#if cls == '5':", "\n", "#    print(line)", "\n", "", "", "X", "=", "np", ".", "array", "(", "X", ")", "\n", "Y", "=", "np", ".", "array", "(", "Y", ")", "\n", "sents_X", "=", "np", ".", "array", "(", "sents_X", ")", "\n", "sents_Y", "=", "np", ".", "array", "(", "sents_Y", ")", "\n", "\n", "print", "(", "Counter", "(", "classes", ")", ")", "\n", "print", "(", "Counter", "(", "words", ")", ")", "\n", "print", "(", "X", ".", "shape", ")", "\n", "print", "(", "Y", ".", "shape", ")", "\n", "print", "(", "sents_X", ".", "shape", ")", "\n", "print", "(", "sents_Y", ".", "shape", ")", "\n", "#return sents_X, sents_Y", "\n", "", "return", "sents_X", ",", "sent_wide_Y", "\n", "\n"]], "home.repos.pwc.inspect_result.TadejSkvorc_MICE.models.tensorflow_bilstm_bert_per_expression_multiple_files.get_xy_per_expression": [[96, 176], ["print", "print", "print", "print", "print", "print", "print", "print", "open", "enumerate", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "collections.Counter", "collections.Counter", "line.split", "debug_sent.append", "classes.append", "words.append", "curr_sent_X.append", "curr_sent_Y.append", "print", "len", "len", "ast.literal_eval", "sent_wide_Y.append", "data_by_expressions.keys", "data_by_expressions[].append", "print", "numpy.array", "numpy.array", "numpy.array", "numpy.array"], "function", ["None"], ["", "def", "get_xy_per_expression", "(", "filenames", ")", ":", "\n", "    ", "data_by_expressions", "=", "{", "}", "\n", "sent_wide_Y", "=", "[", "]", "\n", "sents_X", "=", "[", "]", "\n", "sents_Y", "=", "[", "]", "\n", "curr_sent_X", "=", "[", "]", "\n", "curr_sent_Y", "=", "[", "]", "\n", "expressions", "=", "[", "]", "\n", "print", "(", "'starting'", ")", "\n", "CLS_TO_INT_DICT", "=", "{", "'NE'", ":", "3", ",", "'DA'", ":", "2", ",", "'*'", ":", "1", ",", "'NEJASEN_ZGLED'", ":", "4", "}", "\n", "classes", "=", "[", "]", "\n", "words", "=", "[", "]", "\n", "X", "=", "[", "]", "\n", "Y", "=", "[", "]", "\n", "for", "filename", "in", "filenames", ":", "\n", "        ", "print", "(", "'reading file'", ",", "filename", ")", "\n", "with", "open", "(", "filename", ",", "'r'", ",", "encoding", "=", "'utf-8'", ")", "as", "f", ":", "\n", "            ", "debug_sent", "=", "[", "]", "\n", "for", "i", ",", "line", "in", "enumerate", "(", "f", ")", ":", "\n", "                ", "if", "i", "%", "500", "==", "0", ":", "\n", "                    ", "print", "(", "i", ")", "\n", "#if i >= 30000:", "\n", "#    break", "\n", "", "parts", "=", "line", ".", "split", "(", "'\\t'", ")", "\n", "word", "=", "parts", "[", "0", "]", "\n", "#print(len(parts))", "\n", "if", "len", "(", "word", ")", "==", "0", ":", "\n", "                    ", "continue", "\n", "", "if", "len", "(", "parts", ")", "!=", "4", ":", "\n", "                    ", "continue", "\n", "#print('len of parts', len(parts))", "\n", "", "exp", "=", "parts", "[", "0", "]", "\n", "vector", "=", "parts", "[", "1", "]", "\n", "cls", "=", "parts", "[", "2", "]", "\n", "expression", "=", "parts", "[", "3", "]", "\n", "#print(word, cls, expression)", "\n", "debug_sent", ".", "append", "(", "(", "word", ",", "cls", ",", "expression", ")", ")", "\n", "#print(word, cls)", "\n", "classes", ".", "append", "(", "cls", ")", "\n", "words", ".", "append", "(", "word", ")", "\n", "#print(exp, vector[:10], cls, expression)", "\n", "if", "not", "(", "cls", "==", "'DA'", "or", "cls", "==", "'NE'", "or", "cls", "==", "'*'", ")", ":", "\n", "                    ", "continue", "\n", "", "curr_sent_X", ".", "append", "(", "literal_eval", "(", "vector", ")", ")", "\n", "#print(len(literal_eval(vector)))", "\n", "curr_sent_Y", ".", "append", "(", "CLS_TO_INT_DICT", "[", "cls", "]", ")", "\n", "if", "word", "[", "-", "1", "]", "==", "'.'", ":", "\n", "                    ", "if", "expression", "not", "in", "data_by_expressions", ".", "keys", "(", ")", ":", "\n", "#print(expression)", "\n", "                        ", "data_by_expressions", "[", "expression", "]", "=", "[", "(", "np", ".", "array", "(", "curr_sent_X", ")", ",", "np", ".", "array", "(", "curr_sent_Y", ")", ")", "]", "\n", "", "else", ":", "\n", "#print(expression)", "\n", "                        ", "data_by_expressions", "[", "expression", "]", ".", "append", "(", "(", "np", ".", "array", "(", "curr_sent_X", ")", ",", "np", ".", "array", "(", "curr_sent_Y", ")", ")", ")", "\n", "", "sent_wide_cls", "=", "None", "\n", "if", "CLS_TO_INT_DICT", "[", "'DA'", "]", "in", "curr_sent_Y", ":", "\n", "                        ", "sent_wide_cls", "=", "CLS_TO_INT_DICT", "[", "'DA'", "]", "\n", "", "elif", "CLS_TO_INT_DICT", "[", "'NE'", "]", "in", "curr_sent_Y", ":", "\n", "                        ", "sent_wide_cls", "=", "CLS_TO_INT_DICT", "[", "'NE'", "]", "\n", "", "else", ":", "\n", "                        ", "sent_wide_cls", "=", "CLS_TO_INT_DICT", "[", "'NEJASEN_ZGLED'", "]", "\n", "print", "(", "'debug sent'", ",", "debug_sent", ")", "\n", "", "sent_wide_Y", ".", "append", "(", "sent_wide_cls", ")", "\n", "debug_sent", "=", "[", "]", "\n", "curr_sent_X", "=", "[", "]", "\n", "curr_sent_Y", "=", "[", "]", "\n", "#if cls == '5':", "\n", "#    print(line)", "\n", "", "", "X", "=", "np", ".", "array", "(", "X", ")", "\n", "Y", "=", "np", ".", "array", "(", "Y", ")", "\n", "sents_X", "=", "np", ".", "array", "(", "sents_X", ")", "\n", "sents_Y", "=", "np", ".", "array", "(", "sents_Y", ")", "\n", "\n", "", "print", "(", "Counter", "(", "classes", ")", ")", "\n", "print", "(", "Counter", "(", "words", ")", ")", "\n", "print", "(", "X", ".", "shape", ")", "\n", "print", "(", "Y", ".", "shape", ")", "\n", "print", "(", "sents_X", ".", "shape", ")", "\n", "print", "(", "sents_Y", ".", "shape", ")", "\n", "#return sents_X, sents_Y", "\n", "", "return", "data_by_expressions", "\n", "\n"]], "home.repos.pwc.inspect_result.TadejSkvorc_MICE.models.tensorflow_bilstm_bert_per_expression_multiple_files.get_bert_data_per_expression": [[177, 179], ["tensorflow_bilstm_bert_per_expression_multiple_files.get_xy"], "function", ["home.repos.pwc.inspect_result.TadejSkvorc_MICE.models.tensorflow_bilstm_bert_per_expression_multiple_files.get_xy"], ["", "def", "get_bert_data_per_expression", "(", "IN_FILENAME", ")", ":", "\n", "    ", "X", ",", "Y", "=", "get_xy", "(", "IN_FILENAME", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TadejSkvorc_MICE.models.tensorflow_bilstm_bert_per_expression_multiple_files.get_bert_data": [[182, 222], ["print", "print", "print", "tensorflow_bilstm_bert_per_expression_multiple_files.get_xy", "print", "tensorflow.keras.utils.to_categorical", "numpy.array", "tensorflow_bilstm_bert_per_expression_multiple_files.get_xy", "tensorflow.keras.utils.to_categorical", "numpy.array", "tensorflow.keras.preprocessing.sequence.pad_sequences", "tensorflow.keras.preprocessing.sequence.pad_sequences", "tensorflow_bilstm_bert_per_expression_multiple_files.get_xy", "print", "print", "tensorflow.keras.utils.to_categorical", "numpy.array", "print", "print", "print", "print", "print", "tensorflow.keras.preprocessing.sequence.pad_sequences", "print", "print", "print", "sklearn.model_selection.train_test_split", "len", "len"], "function", ["home.repos.pwc.inspect_result.TadejSkvorc_MICE.models.tensorflow_bilstm_bert_per_expression_multiple_files.get_xy", "home.repos.pwc.inspect_result.TadejSkvorc_MICE.models.tensorflow_bilstm_bert_per_expression_multiple_files.get_xy", "home.repos.pwc.inspect_result.TadejSkvorc_MICE.models.tensorflow_bilstm_bert_per_expression_multiple_files.get_xy"], ["", "def", "get_bert_data", "(", "IN_FILENAME", ",", "IN_FILENAME_TEST", ")", ":", "\n", "    ", "if", "IN_FILENAME_TEST", "!=", "None", ":", "\n", "        ", "X_train", ",", "Y_train", "=", "get_xy", "(", "IN_FILENAME", ")", "\n", "print", "(", "Y_train", "[", ":", "5", "]", ")", "\n", "Y_train", "=", "to_categorical", "(", "Y_train", ",", "num_classes", "=", "NUM_CLASSES", ")", "\n", "Y_train", "=", "np", ".", "array", "(", "Y_train", ")", "\n", "X_test", ",", "Y_test", "=", "get_xy", "(", "IN_FILENAME_TEST", ")", "\n", "Y_test", "=", "to_categorical", "(", "Y_test", ",", "num_classes", "=", "NUM_CLASSES", ")", "\n", "Y_test", "=", "np", ".", "array", "(", "Y_test", ")", "\n", "# Pad everything", "\n", "X_train", "=", "pad_sequences", "(", "X_train", ",", "padding", "=", "'post'", ",", "maxlen", "=", "MAX_SEQUENCE_LEN", ",", "dtype", "=", "'float'", ")", "\n", "X_test", "=", "pad_sequences", "(", "X_test", ",", "padding", "=", "'post'", ",", "maxlen", "=", "MAX_SEQUENCE_LEN", ",", "dtype", "=", "'float'", ")", "\n", "#Y_train = pad_sequences(Y_train, padding='post', maxlen=MAX_SEQUENCE_LEN)", "\n", "#Y_test = pad_sequences(Y_test, padding='post', maxlen=MAX_SEQUENCE_LEN)", "\n", "", "else", ":", "\n", "        ", "X", ",", "Y", "=", "get_xy", "(", "IN_FILENAME", ")", "\n", "print", "(", "'first X'", ")", "\n", "print", "(", "X", "[", "0", "]", ")", "\n", "Y", "=", "to_categorical", "(", "Y", ",", "num_classes", "=", "NUM_CLASSES", ")", "\n", "Y", "=", "np", ".", "array", "(", "Y", ")", "\n", "print", "(", "'y shape'", ",", "Y", ".", "shape", ")", "\n", "print", "(", "'y[0]'", ",", "Y", "[", "0", "]", ")", "\n", "print", "(", "'y[1]'", ",", "Y", "[", "1", "]", ")", "\n", "print", "(", "'y[2]'", ",", "Y", "[", "2", "]", ")", "\n", "sent_lens", "=", "[", "len", "(", "x", ")", "for", "x", "in", "X", "]", "\n", "print", "(", "sent_lens", ")", "\n", "padded_X", "=", "pad_sequences", "(", "X", ",", "padding", "=", "'post'", ",", "maxlen", "=", "MAX_SEQUENCE_LEN", ",", "dtype", "=", "'float'", ")", "\n", "print", "(", "'padded_X'", ")", "\n", "print", "(", "padded_X", "[", "0", "]", ")", "\n", "#padded_Y = pad_sequences(Y, padding='post', maxlen=MAX_SEQUENCE_LEN)", "\n", "sent_lens", "=", "[", "len", "(", "x", ")", "for", "x", "in", "padded_X", "]", "\n", "print", "(", "sent_lens", ")", "\n", "\n", "#exit()", "\n", "X_train", ",", "X_test", ",", "Y_train", ",", "Y_test", "=", "train_test_split", "(", "padded_X", ",", "Y", ",", "test_size", "=", "0.33", ",", "shuffle", "=", "True", ")", "\n", "\n", "", "print", "(", "X_train", ".", "shape", ",", "X_train", "[", "0", "]", ".", "shape", ")", "\n", "print", "(", "'first X_test'", ")", "\n", "print", "(", "X_test", "[", "0", "]", ")", "\n", "return", "X_train", ",", "X_test", ",", "Y_train", ",", "Y_test", "\n", "\n"]], "home.repos.pwc.inspect_result.TadejSkvorc_MICE.models.tensorflow_bilstm_bert_per_expression_multiple_files.bert_tensorflow_test": [[224, 291], ["tensorflow.keras.Sequential", "tensorflow.keras.Sequential.add", "tensorflow.keras.layers.GRU", "tensorflow.keras.layers.GRU", "tensorflow.keras.Sequential.add", "tensorflow.keras.Sequential.add", "tensorflow.keras.Sequential.add", "print", "tensorflow.keras.Sequential.compile", "print", "tensorflow.keras.Sequential.fit", "print", "tensorflow.keras.Sequential.evaluate", "tensorflow.keras.Sequential.predict_proba", "print", "print", "collections.Counter", "print", "print", "tensorflow.keras.layers.Masking", "tensorflow.keras.layers.Bidirectional", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Activation", "numpy.argmax", "classes.append", "collections.Counter", "open", "zip", "numpy.argmax", "classes.append", "numpy.argmax", "numpy.argmax", "numpy.argmax", "numpy.argmax", "numpy.argmax", "numpy.argmax", "numpy.argmax", "numpy.argmax", "numpy.argmax", "numpy.argmax", "numpy.argmax", "numpy.argmax"], "function", ["None"], ["", "def", "bert_tensorflow_test", "(", "X_train", ",", "X_test", ",", "Y_train", ",", "Y_test", ")", ":", "\n", "# Model", "\n", "    ", "model", "=", "Sequential", "(", ")", "\n", "model", ".", "add", "(", "Masking", "(", "mask_value", "=", "0.", ",", "input_shape", "=", "(", "MAX_SEQUENCE_LEN", ",", "VECTOR_DIM", ")", ")", ")", "\n", "#forward_layer = LSTM(200, return_sequences=True)", "\n", "forward_layer", "=", "GRU", "(", "10", ",", "return_sequences", "=", "False", ",", "dropout", "=", "0.5", ")", "\n", "#backward_layer = LSTM(200, activation='relu', return_sequences=True,", "\n", "backward_layer", "=", "GRU", "(", "10", ",", "return_sequences", "=", "False", ",", "dropout", "=", "0.5", ",", "\n", "go_backwards", "=", "True", ")", "\n", "model", ".", "add", "(", "Bidirectional", "(", "forward_layer", ",", "backward_layer", "=", "backward_layer", ",", "\n", "input_shape", "=", "(", "MAX_SEQUENCE_LEN", ",", "VECTOR_DIM", ")", ")", ")", "\n", "#model.add(TimeDistributed(Dense(NUM_CLASSES)))", "\n", "# Remove TimeDistributed() so that predictions are now made for the entire sentence", "\n", "model", ".", "add", "(", "Dense", "(", "NUM_CLASSES", ")", ")", "\n", "model", ".", "add", "(", "Activation", "(", "'softmax'", ")", ")", "\n", "\n", "#print('preds shape', model.predict(X_train[:3]).shape)", "\n", "#print('Y_train shape', Y_train[:3].shape)", "\n", "#print(list(Y_train[:3]))", "\n", "classes", "=", "[", "]", "\n", "for", "y", "in", "Y_train", ":", "\n", "        ", "cls", "=", "np", ".", "argmax", "(", "y", ")", "\n", "classes", ".", "append", "(", "cls", ")", "\n", "", "print", "(", "Counter", "(", "classes", ")", ")", "\n", "\n", "model", ".", "compile", "(", "loss", "=", "'binary_crossentropy'", ",", "optimizer", "=", "'rmsprop'", ",", "metrics", "=", "[", "'accuracy'", "]", ")", "\n", "print", "(", "'compiled model'", ")", "\n", "model", ".", "fit", "(", "X_train", ",", "Y_train", ",", "batch_size", "=", "8", ",", "epochs", "=", "10", ")", "#, validation_split=0.1)", "\n", "print", "(", "'fit model'", ")", "\n", "eval", "=", "model", ".", "evaluate", "(", "X_test", ",", "Y_test", ",", "batch_size", "=", "8", ")", "\n", "#print('X_test[0]')", "\n", "#print(X_test[0])", "\n", "#print(X_train[0])", "\n", "preds", "=", "model", ".", "predict_proba", "(", "X_test", ",", "verbose", "=", "1", ",", "batch_size", "=", "8", ")", "\n", "print", "(", "preds", ")", "\n", "num_correct", "=", "0", "\n", "num_incorrect", "=", "0", "\n", "TP", "=", "0", "\n", "TN", "=", "0", "\n", "FP", "=", "0", "\n", "FN", "=", "0", "\n", "# idiomatic = 2, non-idiomatic = 3", "\n", "with", "open", "(", "'preds_out_temp.txt'", ",", "'w'", ")", "as", "tempoutf", ":", "\n", "        ", "for", "pred", ",", "y", "in", "zip", "(", "preds", ",", "Y_test", ")", ":", "\n", "            ", "if", "np", ".", "argmax", "(", "y", ")", "==", "2", "or", "np", ".", "argmax", "(", "y", ")", "==", "3", ":", "\n", "                ", "if", "np", ".", "argmax", "(", "y", ")", "==", "np", ".", "argmax", "(", "pred", ")", ":", "\n", "                    ", "num_correct", "+=", "1", "\n", "", "else", ":", "\n", "                    ", "num_incorrect", "+=", "1", "\n", "", "", "if", "np", ".", "argmax", "(", "pred", ")", "==", "2", "and", "np", ".", "argmax", "(", "y", ")", "==", "2", ":", "\n", "                ", "TP", "+=", "1", "\n", "", "if", "np", ".", "argmax", "(", "pred", ")", "==", "3", "and", "np", ".", "argmax", "(", "y", ")", "==", "3", ":", "\n", "                ", "TN", "+=", "1", "\n", "", "if", "np", ".", "argmax", "(", "pred", ")", "==", "2", "and", "np", ".", "argmax", "(", "y", ")", "==", "3", ":", "\n", "                ", "FP", "+=", "1", "\n", "", "if", "np", ".", "argmax", "(", "pred", ")", "==", "3", "and", "np", ".", "argmax", "(", "y", ")", "==", "2", ":", "\n", "                ", "FN", "+=", "1", "\n", "", "", "", "custom_accuracy", "=", "num_correct", "/", "(", "num_correct", "+", "num_incorrect", ")", "\n", "print", "(", "'custom accuracy is'", ",", "num_correct", "/", "(", "num_correct", "+", "num_incorrect", ")", ")", "\n", "for", "y", "in", "Y_test", ":", "\n", "        ", "cls", "=", "np", ".", "argmax", "(", "y", ")", "\n", "classes", ".", "append", "(", "cls", ")", "\n", "", "class_nums", "=", "Counter", "(", "classes", ")", "\n", "print", "(", "class_nums", ")", "\n", "default_acc", "=", "class_nums", "[", "2", "]", "/", "(", "class_nums", "[", "2", "]", "+", "class_nums", "[", "3", "]", ")", "\n", "print", "(", "'default accuracy is'", ",", "default_acc", ",", "'or'", ",", "1", "-", "default_acc", ")", "\n", "return", "eval", ",", "custom_accuracy", ",", "default_acc", ",", "[", "TP", ",", "TN", ",", "FP", ",", "FN", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.TadejSkvorc_MICE.models.tensorflow_bilstm_bert_per_expression_multiple_files.get_already_processed": [[293, 303], ["set", "set", "open", "line.split", "already_processed.append"], "function", ["None"], ["", "def", "get_already_processed", "(", "filename", ")", ":", "\n", "    ", "if", "filename", "==", "None", ":", "\n", "        ", "return", "set", "(", "[", "]", ")", "\n", "", "already_processed", "=", "[", "]", "\n", "with", "open", "(", "filename", ",", "'r'", ",", "encoding", "=", "'utf-8'", ")", "as", "f", ":", "\n", "        ", "for", "line", "in", "f", ":", "\n", "            ", "words", "=", "line", ".", "split", "(", "' '", ")", "\n", "if", "words", "[", "0", "]", "==", "'EXP'", ":", "\n", "                ", "already_processed", ".", "append", "(", "' '", ".", "join", "(", "words", "[", "1", ":", "]", ")", ")", "\n", "", "", "", "return", "set", "(", "already_processed", ")", "\n", "\n"]]}