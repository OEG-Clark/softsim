{"home.repos.pwc.inspect_result.GRAAL-Research_deepparse.None.setup.get_readme": [[9, 13], ["os.path.join", "open", "f.read"], "function", ["None"], ["def", "get_readme", "(", ")", ":", "\n", "    ", "readme_file_path", "=", "os", ".", "path", ".", "join", "(", "current_file_path", ",", "\"README.md\"", ")", "\n", "with", "open", "(", "readme_file_path", ",", "\"r\"", ",", "encoding", "=", "\"utf-8\"", ")", "as", "f", ":", "\n", "        ", "return", "f", ".", "read", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.None.setup.get_version": [[15, 30], ["os.path.join", "open", "f.read().strip", "subprocess.check_output().decode().strip", "os.getenv", "f.read", "subprocess.check_output().decode", "subprocess.check_output"], "function", ["None"], ["", "", "def", "get_version", "(", ")", ":", "\n", "    ", "version_file_path", "=", "os", ".", "path", ".", "join", "(", "current_file_path", ",", "\"version.txt\"", ")", "\n", "with", "open", "(", "version_file_path", ",", "\"r\"", ",", "encoding", "=", "\"utf-8\"", ")", "as", "f", ":", "\n", "        ", "version", "=", "f", ".", "read", "(", ")", ".", "strip", "(", ")", "\n", "\n", "", "try", ":", "\n", "        ", "sha", "=", "subprocess", ".", "check_output", "(", "[", "\"git\"", ",", "\"rev-parse\"", ",", "\"HEAD\"", "]", ")", ".", "decode", "(", "\"ascii\"", ")", ".", "strip", "(", ")", "\n", "", "except", "Exception", ":", "# pylint: disable=broad-except", "\n", "        ", "sha", "=", "\"Unknown\"", "\n", "\n", "", "if", "os", ".", "getenv", "(", "\"DEEPPARSE_RELEASE_BUILD\"", ")", "!=", "\"1\"", ":", "\n", "        ", "version", "+=", "\".dev1\"", "\n", "if", "sha", "!=", "\"Unknown\"", ":", "\n", "            ", "version", "+=", "\"+\"", "+", "sha", "[", ":", "7", "]", "\n", "", "", "return", "version", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.None.setup.write_version_python_file": [[32, 36], ["os.path.join", "open", "f.write", "repr"], "function", ["None"], ["", "def", "write_version_python_file", "(", "version", ")", ":", "\n", "    ", "version_python_file", "=", "os", ".", "path", ".", "join", "(", "current_file_path", ",", "\"deepparse\"", ",", "\"version.py\"", ")", "\n", "with", "open", "(", "version_python_file", ",", "\"w\"", ",", "encoding", "=", "\"utf-8\"", ")", "as", "f", ":", "\n", "        ", "f", ".", "write", "(", "f\"__version__ = {repr(version)}\\n\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.None.setup.main": [[38, 84], ["setup.get_readme", "setup.get_version", "print", "setup.write_version_python_file", "setuptools.find_packages", "setuptools.setup"], "function", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.None.setup.get_readme", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.None.setup.get_version", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.None.setup.write_version_python_file"], ["", "", "def", "main", "(", ")", ":", "\n", "    ", "readme", "=", "get_readme", "(", ")", "\n", "\n", "version", "=", "get_version", "(", ")", "\n", "print", "(", "\"Building version\"", ",", "version", ")", "\n", "write_version_python_file", "(", "version", ")", "\n", "\n", "packages", "=", "find_packages", "(", ")", "\n", "setup", "(", "\n", "name", "=", "\"deepparse\"", ",", "\n", "version", "=", "version", ",", "\n", "author", "=", "\"Marouane Yassine, David Beauchemin\"", ",", "\n", "author_email", "=", "\"marouane.yassine.1@ulaval.ca, david.beauchemin.5@ulaval.ca\"", ",", "\n", "url", "=", "\"https://deepparse.org/\"", ",", "\n", "download_url", "=", "\"https://github.com/GRAAL-Research/deepparse/archive/v\"", "+", "version", "+", "\".zip\"", ",", "\n", "license", "=", "\"LGPLv3\"", ",", "\n", "classifiers", "=", "[", "\n", "\"Development Status :: 3 - Alpha\"", ",", "\n", "\"Intended Audience :: Developers\"", ",", "\n", "\"Intended Audience :: Education\"", ",", "\n", "\"Intended Audience :: Science/Research\"", ",", "\n", "\"License :: OSI Approved :: GNU Lesser General Public License v3 (LGPLv3)\"", ",", "\n", "\"Programming Language :: Python :: 3\"", ",", "\n", "\"Programming Language :: Python :: 3.7\"", ",", "\n", "\"Programming Language :: Python :: 3.8\"", ",", "\n", "\"Programming Language :: Python :: 3.9\"", ",", "\n", "\"Topic :: Software Development :: Libraries\"", ",", "\n", "\"Topic :: Software Development :: Libraries :: Python Modules\"", ",", "\n", "]", ",", "\n", "packages", "=", "packages", ",", "\n", "install_requires", "=", "[", "\n", "\"numpy\"", ",", "\n", "\"torch\"", ",", "\n", "\"bpemb\"", ",", "\n", "\"gensim>=4.0.0\"", ",", "\n", "\"requests\"", ",", "\n", "\"fasttext\"", ",", "\n", "\"pymagnitude-light\"", ",", "\n", "\"poutyne\"", ",", "\n", "\"pandas\"", ",", "\n", "]", ",", "\n", "python_requires", "=", "\">=3.7\"", ",", "\n", "description", "=", "\"A library for parsing multinational street addresses using deep learning.\"", ",", "\n", "long_description", "=", "readme", ",", "\n", "long_description_content_type", "=", "\"text/markdown\"", ",", "\n", "extras_require", "=", "{", "\"colorama\"", ":", "\"colorama>=0.4.3\"", "}", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.deepparse.fasttext_tools.download_fasttext_magnitude_embeddings": [[13, 44], ["os.makedirs", "os.path.join", "warnings.warn", "os.path.isfile", "tools.download_from_url", "os.remove", "print", "gzip.open", "os.path.join", "os.path.join", "open", "shutil.copyfileobj", "os.path.join"], "function", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.deepparse.tools.download_from_url"], ["def", "download_fasttext_magnitude_embeddings", "(", "cache_dir", ":", "str", ",", "verbose", ":", "bool", "=", "True", ",", "saving_dir", "=", "None", ")", "->", "str", ":", "\n", "    ", "\"\"\"\n    Function to download the magnitude pretrained fastText model.\n    \"\"\"", "\n", "if", "saving_dir", "is", "not", "None", ":", "# pragma: no cover", "\n", "# Deprecated argument handling", "\n", "        ", "warnings", ".", "warn", "(", "\n", "\"Argument saving_dir is deprecated. Use cache_dir instead. The argument will be removed \"", "\"in release 0.8.\"", ",", "\n", "DeprecationWarning", ",", "\n", ")", "\n", "cache_dir", "=", "saving_dir", "\n", "\n", "", "os", ".", "makedirs", "(", "cache_dir", ",", "exist_ok", "=", "True", ")", "\n", "\n", "model", "=", "\"fasttext\"", "\n", "extension", "=", "\"magnitude\"", "\n", "file_name", "=", "os", ".", "path", ".", "join", "(", "cache_dir", ",", "f\"{model}.{extension}\"", ")", "\n", "if", "not", "os", ".", "path", ".", "isfile", "(", "file_name", ")", ":", "\n", "        ", "if", "verbose", ":", "\n", "            ", "print", "(", "\n", "\"The fastText pretrained word embeddings will be download in magnitude format (2.3 GO), \"", "\n", "\"this process will take several minutes.\"", "\n", ")", "\n", "", "extension", "=", "extension", "+", "\".gz\"", "\n", "download_from_url", "(", "file_name", "=", "model", ",", "saving_dir", "=", "cache_dir", ",", "file_extension", "=", "extension", ")", "\n", "gz_file_name", "=", "file_name", "+", "\".gz\"", "\n", "with", "gzip", ".", "open", "(", "os", ".", "path", ".", "join", "(", "cache_dir", ",", "gz_file_name", ")", ",", "\"rb\"", ")", "as", "f", ":", "\n", "            ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "cache_dir", ",", "file_name", ")", ",", "\"wb\"", ")", "as", "f_out", ":", "\n", "                ", "shutil", ".", "copyfileobj", "(", "f", ",", "f_out", ")", "\n", "", "", "os", ".", "remove", "(", "os", ".", "path", ".", "join", "(", "cache_dir", ",", "gz_file_name", ")", ")", "\n", "", "return", "file_name", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.deepparse.fasttext_tools.download_fasttext_embeddings": [[80, 112], ["os.makedirs", "os.path.join", "os.path.isfile", "os.path.join", "fasttext_tools.download_gz_model", "os.remove", "warnings.warn", "gzip.open", "os.path.join", "os.path.join", "open", "shutil.copyfileobj", "os.path.join"], "function", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.deepparse.fasttext_tools.download_gz_model"], ["def", "download_fasttext_embeddings", "(", "cache_dir", ":", "str", ",", "verbose", ":", "bool", "=", "True", ",", "saving_dir", "=", "None", ")", "->", "str", ":", "\n", "    ", "\"\"\"\n    Simpler version of the download_model function from fastText to download pretrained common-crawl\n    vectors from fastText's website https://fasttext.cc/docs/en/crawl-vectors.html and save it in the\n    saving directory (saving_dir).\n    \"\"\"", "\n", "if", "saving_dir", "is", "not", "None", ":", "# pragma: no cover", "\n", "# Deprecated argument handling", "\n", "        ", "warnings", ".", "warn", "(", "\n", "\"Argument saving_dir is deprecated. Use cache_dir instead. The argument will be removed \"", "\"in release 0.8.\"", ",", "\n", "DeprecationWarning", ",", "\n", ")", "\n", "cache_dir", "=", "saving_dir", "\n", "\n", "", "os", ".", "makedirs", "(", "cache_dir", ",", "exist_ok", "=", "True", ")", "\n", "\n", "file_name", "=", "\"cc.fr.300.bin\"", "\n", "gz_file_name", "=", "f\"{file_name}.gz\"", "\n", "\n", "file_name_path", "=", "os", ".", "path", ".", "join", "(", "cache_dir", ",", "file_name", ")", "\n", "if", "os", ".", "path", ".", "isfile", "(", "file_name_path", ")", ":", "\n", "        ", "return", "file_name_path", "# return the full path to the fastText embeddings", "\n", "\n", "", "saving_file_path", "=", "os", ".", "path", ".", "join", "(", "cache_dir", ",", "gz_file_name", ")", "\n", "\n", "download_gz_model", "(", "gz_file_name", ",", "saving_file_path", ",", "verbose", "=", "verbose", ")", "\n", "with", "gzip", ".", "open", "(", "os", ".", "path", ".", "join", "(", "cache_dir", ",", "gz_file_name", ")", ",", "\"rb\"", ")", "as", "f", ":", "\n", "        ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "cache_dir", ",", "file_name", ")", ",", "\"wb\"", ")", "as", "f_out", ":", "\n", "            ", "shutil", ".", "copyfileobj", "(", "f", ",", "f_out", ")", "\n", "", "", "os", ".", "remove", "(", "os", ".", "path", ".", "join", "(", "cache_dir", ",", "gz_file_name", ")", ")", "\n", "\n", "return", "file_name_path", "# return the full path to the fastText embeddings", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.deepparse.fasttext_tools.download_gz_model": [[115, 129], ["fasttext_tools._download_file", "print"], "function", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.deepparse.fasttext_tools._download_file"], ["", "def", "download_gz_model", "(", "gz_file_name", ":", "str", ",", "saving_path", ":", "str", ",", "verbose", ":", "bool", "=", "True", ")", "->", "None", ":", "\n", "    ", "\"\"\"\n    Simpler version of the _download_gz_model function from fastText to download pretrained common-crawl\n    vectors from fastText's website https://fasttext.cc/docs/en/crawl-vectors.html and save it in the\n    saving directory (saving_path).\n    \"\"\"", "\n", "\n", "url", "=", "f\"https://dl.fbaipublicfiles.com/fasttext/vectors-crawl/{gz_file_name}\"", "\n", "if", "verbose", ":", "\n", "        ", "print", "(", "\n", "\"The fastText pretrained word embeddings will be downloaded (6.8 GO), \"", "\n", "\"this process will take several minutes.\"", "\n", ")", "\n", "", "_download_file", "(", "url", ",", "saving_path", ",", "verbose", "=", "verbose", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.deepparse.fasttext_tools._download_file": [[132, 153], ["urllib.request.urlopen", "hasattr", "os.rename", "print", "int", "int", "open", "urllib.request.urlopen.getheader().strip", "urllib.request.urlopen.info().getheader().strip", "urllib.request.urlopen.read", "len", "f.write", "fasttext_tools._print_progress", "urllib.request.urlopen.getheader", "urllib.request.urlopen.info().getheader", "urllib.request.urlopen.info"], "function", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.deepparse.fasttext_tools._print_progress"], ["", "def", "_download_file", "(", "url", ":", "str", ",", "write_file_name", ":", "str", ",", "chunk_size", ":", "int", "=", "2", "**", "13", ",", "verbose", ":", "bool", "=", "True", ")", "->", "None", ":", "\n", "    ", "if", "verbose", ":", "\n", "        ", "print", "(", "f\"Downloading {url}\"", ")", "\n", "", "response", "=", "urlopen", "(", "url", ")", "\n", "if", "hasattr", "(", "response", ",", "\"getheader\"", ")", ":", "\n", "        ", "file_size", "=", "int", "(", "response", ".", "getheader", "(", "\"Content-Length\"", ")", ".", "strip", "(", ")", ")", "\n", "", "else", ":", "# pragma: no cover", "\n", "        ", "file_size", "=", "int", "(", "response", ".", "info", "(", ")", ".", "getheader", "(", "\"Content-Length\"", ")", ".", "strip", "(", ")", ")", "\n", "", "downloaded", "=", "0", "\n", "download_file_name", "=", "write_file_name", "+", "\".part\"", "\n", "with", "open", "(", "download_file_name", ",", "\"wb\"", ")", "as", "f", ":", "\n", "        ", "while", "True", ":", "\n", "            ", "chunk", "=", "response", ".", "read", "(", "chunk_size", ")", "\n", "downloaded", "+=", "len", "(", "chunk", ")", "\n", "if", "not", "chunk", ":", "\n", "                ", "break", "\n", "", "f", ".", "write", "(", "chunk", ")", "\n", "if", "verbose", ":", "\n", "                ", "_print_progress", "(", "downloaded", ",", "file_size", ")", "\n", "\n", "", "", "", "os", ".", "rename", "(", "download_file_name", ",", "write_file_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.deepparse.fasttext_tools._print_progress": [[156, 169], ["int", "round", "sys.stdout.write", "sys.stdout.flush", "float", "sys.stdout.write"], "function", ["None"], ["", "def", "_print_progress", "(", "downloaded_bytes", ",", "total_size", ")", ":", "\n", "    ", "percent", "=", "float", "(", "downloaded_bytes", ")", "/", "total_size", "\n", "bar_size", "=", "50", "\n", "progress_bar", "=", "int", "(", "percent", "*", "bar_size", ")", "\n", "percent", "=", "round", "(", "percent", "*", "100", ",", "2", ")", "\n", "bar_print", "=", "\"=\"", "*", "progress_bar", "+", "\">\"", "+", "\" \"", "*", "(", "bar_size", "-", "progress_bar", ")", "\n", "update", "=", "f\"\\r(%0.2f%%) [{bar_print}]\"", "%", "percent", "\n", "\n", "sys", ".", "stdout", ".", "write", "(", "update", ")", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "\n", "if", "downloaded_bytes", ">=", "total_size", ":", "\n", "        ", "sys", ".", "stdout", ".", "write", "(", "\"\\n\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.deepparse.fasttext_tools.load_fasttext_embeddings": [[172, 177], ["fasttext.FastText._FastText"], "function", ["None"], ["", "", "def", "load_fasttext_embeddings", "(", "path", ")", ":", "\n", "    ", "\"\"\"\n    Load a model given a filepath and return a model object.\n    \"\"\"", "\n", "return", "_FastText", "(", "model_path", "=", "path", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.deepparse.tools.latest_version": [[19, 29], ["tools.download_from_url", "open", "local_model_hash_file.readline", "open", "remote_model_hash_file.readline", "local_model_hash_file.readline.strip", "remote_model_hash_file.readline.strip", "os.path.join", "os.path.join"], "function", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.deepparse.tools.download_from_url"], ["def", "latest_version", "(", "model", ":", "str", ",", "cache_path", ":", "str", ")", "->", "bool", ":", "\n", "    ", "\"\"\"\n    Verify if the local model is the latest.\n    \"\"\"", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "cache_path", ",", "model", "+", "\".version\"", ")", ",", "encoding", "=", "\"utf-8\"", ")", "as", "local_model_hash_file", ":", "\n", "        ", "local_model_hash_version", "=", "local_model_hash_file", ".", "readline", "(", ")", "\n", "", "download_from_url", "(", "model", ",", "cache_path", ",", "\"version\"", ")", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "cache_path", ",", "model", "+", "\".version\"", ")", ",", "encoding", "=", "\"utf-8\"", ")", "as", "remote_model_hash_file", ":", "\n", "        ", "remote_model_hash_version", "=", "remote_model_hash_file", ".", "readline", "(", ")", "\n", "", "return", "local_model_hash_version", ".", "strip", "(", ")", "==", "remote_model_hash_version", ".", "strip", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.deepparse.tools.download_from_url": [[31, 43], ["BASE_URL.format", "requests.get", "requests.get.raise_for_status", "os.makedirs", "open", "file.write", "os.path.join"], "function", ["None"], ["", "def", "download_from_url", "(", "file_name", ":", "str", ",", "saving_dir", ":", "str", ",", "file_extension", ":", "str", ")", ":", "\n", "    ", "\"\"\"\n    Simple function to download the content of a file from a distant repository.\n    The repository URL string is  \u0300`'https://graal.ift.ulaval.ca/public/deepparse/{}.{}'``\n    where the first bracket is the file name and the second is the file extension.\n    \"\"\"", "\n", "url", "=", "BASE_URL", ".", "format", "(", "file_name", ",", "file_extension", ")", "\n", "r", "=", "requests", ".", "get", "(", "url", ",", "timeout", "=", "5", ")", "\n", "r", ".", "raise_for_status", "(", ")", "# Raise exception", "\n", "os", ".", "makedirs", "(", "saving_dir", ",", "exist_ok", "=", "True", ")", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "saving_dir", ",", "f\"{file_name}.{file_extension}\"", ")", ",", "\"wb\"", ")", "as", "file", ":", "\n", "        ", "file", ".", "write", "(", "r", ".", "content", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.deepparse.tools.download_weights": [[45, 57], ["tools.download_from_url", "tools.download_from_url", "print"], "function", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.deepparse.tools.download_from_url", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.deepparse.tools.download_from_url"], ["", "", "def", "download_weights", "(", "model", ":", "str", ",", "saving_dir", ":", "str", ",", "verbose", ":", "bool", "=", "True", ")", "->", "None", ":", "\n", "    ", "\"\"\"\n    Function to download the pretrained weights of the models.\n    Args:\n        model: The network type (i.e. fasttext or bpemb).\n        saving_dir: The path to the saving directory.\n        verbose (bool): Turn on/off the verbosity of the model. The default value is True.\n    \"\"\"", "\n", "if", "verbose", ":", "\n", "        ", "print", "(", "f\"Downloading the weights for the network {model}.\"", ")", "\n", "", "download_from_url", "(", "model", ",", "saving_dir", ",", "\"ckpt\"", ")", "\n", "download_from_url", "(", "model", ",", "saving_dir", ",", "\"version\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.deepparse.tools.handle_poutyne_version": [[59, 69], ["full_version.split"], "function", ["None"], ["", "def", "handle_poutyne_version", "(", ")", "->", "str", ":", "\n", "    ", "\"\"\"\n    Handle the retrieval of the major and minor part of the Poutyne version\n    \"\"\"", "\n", "full_version", "=", "poutyne", ".", "version", ".", "__version__", "\n", "components_parts", "=", "full_version", ".", "split", "(", "\".\"", ")", "\n", "major", "=", "components_parts", "[", "0", "]", "\n", "minor", "=", "components_parts", "[", "1", "]", "\n", "version", "=", "f\"{major}.{minor}\"", "\n", "return", "version", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.deepparse.tools.valid_poutyne_version": [[71, 88], ["handle_poutyne_version().split", "int", "int", "tools.handle_poutyne_version"], "function", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.deepparse.tools.handle_poutyne_version"], ["", "def", "valid_poutyne_version", "(", "min_major", ":", "int", "=", "1", ",", "min_minor", ":", "int", "=", "2", ")", ":", "\n", "    ", "\"\"\"\n    Validate Poutyne version is greater than min_major.min_minor for using a str checkpoint. Some version before\n    does not support all the features we need. By default, min_major.min_minor equal version 1.2 which is the\n    lowest version we can use.\n    \"\"\"", "\n", "version_components", "=", "handle_poutyne_version", "(", ")", ".", "split", "(", "\".\"", ")", "\n", "\n", "major", "=", "int", "(", "version_components", "[", "0", "]", ")", "\n", "minor", "=", "int", "(", "version_components", "[", "1", "]", ")", "\n", "\n", "if", "major", ">", "min_major", ":", "\n", "        ", "is_valid_poutyne_version", "=", "True", "\n", "", "else", ":", "\n", "        ", "is_valid_poutyne_version", "=", "major", ">=", "min_major", "and", "minor", ">=", "min_minor", "\n", "\n", "", "return", "is_valid_poutyne_version", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.deepparse.tools.handle_pre_trained_checkpoint": [[90, 110], ["os.path.join", "os.path.join", "tools.valid_poutyne_version", "NotImplementedError", "os.path.isfile", "tools.download_weights", "tools.latest_version", "warnings.warn"], "function", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.deepparse.tools.valid_poutyne_version", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.deepparse.tools.download_weights", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.deepparse.tools.latest_version"], ["", "def", "handle_pre_trained_checkpoint", "(", "model_type_checkpoint", ":", "str", ")", "->", "str", ":", "\n", "    ", "\"\"\"\n    Handle the checkpoint formatting for pretrained models.\n    \"\"\"", "\n", "if", "not", "valid_poutyne_version", "(", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", "\n", "f\"To load the pretrained {model_type_checkpoint} model, you need to have a Poutyne version\"", "\n", "\"greater than 1.1 (>1.1)\"", "\n", ")", "\n", "", "model_path", "=", "os", ".", "path", ".", "join", "(", "CACHE_PATH", ",", "f\"{model_type_checkpoint}.ckpt\"", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "isfile", "(", "model_path", ")", ":", "\n", "        ", "download_weights", "(", "model_type_checkpoint", ",", "CACHE_PATH", ",", "verbose", "=", "True", ")", "\n", "", "elif", "not", "latest_version", "(", "model_type_checkpoint", ",", "cache_path", "=", "CACHE_PATH", ")", ":", "\n", "        ", "warnings", ".", "warn", "(", "\n", "\"A newer model of fasttext is available, you can download it using the download script.\"", ",", "\n", "UserWarning", ",", "\n", ")", "\n", "", "checkpoint", "=", "os", ".", "path", ".", "join", "(", "CACHE_PATH", ",", "f\"{model_type_checkpoint}.ckpt\"", ")", "\n", "return", "checkpoint", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.deepparse.tools.handle_model_path": [[112, 130], ["tools.handle_pre_trained_checkpoint", "isinstance", "handle_pre_trained_checkpoint.endswith", "ValueError", "tools.valid_poutyne_version", "NotImplementedError"], "function", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.deepparse.tools.handle_pre_trained_checkpoint", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.deepparse.tools.valid_poutyne_version"], ["", "def", "handle_model_path", "(", "checkpoint", ":", "str", ")", "->", "str", ":", "\n", "    ", "\"\"\"\n    Handle the validity of path.\n    \"\"\"", "\n", "if", "checkpoint", "in", "(", "\"fasttext\"", ",", "\"bpemb\"", ")", ":", "\n", "        ", "checkpoint", "=", "handle_pre_trained_checkpoint", "(", "checkpoint", ")", "\n", "", "elif", "isinstance", "(", "checkpoint", ",", "str", ")", "and", "checkpoint", ".", "endswith", "(", "\".ckpt\"", ")", ":", "\n", "        ", "if", "not", "valid_poutyne_version", "(", ")", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\n", "\"To load a string path to a model, you need to have a Poutyne version\"", "\"greater than 1.1 (>1.1)\"", "\n", ")", "\n", "", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\n", "\"The checkpoint is not valid. Can be a path in a string format (e.g. 'a_path_.ckpt'), \"", "\n", "\"'fasttext' or 'bpemb'.\"", "\n", ")", "\n", "\n", "", "return", "checkpoint", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.deepparse.tools.validate_data_to_parse": [[132, 150], ["isinstance", "data_validation.validate_if_any_none", "data_validation.validate_if_any_empty", "data_validation.validate_if_any_whitespace_only", "data_error.DataError", "data_error.DataError", "data_error.DataError", "data_error.DataError"], "function", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.data_validation.data_validation.validate_if_any_none", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.data_validation.data_validation.validate_if_any_empty", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.data_validation.data_validation.validate_if_any_whitespace_only"], ["", "def", "validate_data_to_parse", "(", "addresses_to_parse", ":", "List", ")", "->", "None", ":", "\n", "    ", "\"\"\"\n    Validation tests on the addresses to parse to respect the following two criteria:\n        - addresses are not tuple,\n        - no addresses are None value,\n        - no addresses are empty strings, and\n        - no addresses are whitespace-only strings.\n    \"\"\"", "\n", "if", "isinstance", "(", "addresses_to_parse", "[", "0", "]", ",", "tuple", ")", ":", "\n", "        ", "raise", "DataError", "(", "\n", "\"Addresses to parsed are tuples. They need to be a list of string. Are you using training data?\"", "\n", ")", "\n", "", "if", "validate_if_any_none", "(", "addresses_to_parse", ")", ":", "\n", "        ", "raise", "DataError", "(", "\"Some addresses are None value.\"", ")", "\n", "", "if", "validate_if_any_empty", "(", "addresses_to_parse", ")", ":", "\n", "        ", "raise", "DataError", "(", "\"Some addresses are empty.\"", ")", "\n", "", "if", "validate_if_any_whitespace_only", "(", "addresses_to_parse", ")", ":", "\n", "        ", "raise", "DataError", "(", "\"Some addresses only include whitespace thus cannot be parsed.\"", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.deepparse.weights_init.weights_init": [[5, 21], ["isinstance", "torch.xavier_normal_", "torch.normal_", "isinstance", "m.parameters", "len", "torch.orthogonal_", "torch.normal_"], "function", ["None"], ["def", "weights_init", "(", "m", ")", ":", "\n", "    ", "\"\"\"\n    Function to initialize the weights of our layers.\n    Usage:\n        network = Model()\n        network.apply(weight_init)\n    \"\"\"", "\n", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "        ", "init", ".", "xavier_normal_", "(", "m", ".", "weight", ".", "data", ")", "\n", "init", ".", "normal_", "(", "m", ".", "bias", ".", "data", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "(", "nn", ".", "LSTM", ",", "nn", ".", "LSTMCell", ",", "nn", ".", "GRU", ",", "nn", ".", "GRUCell", ")", ")", ":", "\n", "        ", "for", "param", "in", "m", ".", "parameters", "(", ")", ":", "\n", "            ", "if", "len", "(", "param", ".", "shape", ")", ">=", "2", ":", "\n", "                ", "init", ".", "orthogonal_", "(", "param", ".", "data", ")", "\n", "", "else", ":", "\n", "                ", "init", ".", "normal_", "(", "param", ".", "data", ")", "\n", "", "", "", "", ""]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.preprocessing.address_cleaner.AddressCleaner.clean": [[5, 15], ["address_cleaner.AddressCleaner.coma_cleaning", "address_cleaner.AddressCleaner.lower_cleaning", "res.append", "address_cleaner.AddressCleaner.split"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.preprocessing.address_cleaner.AddressCleaner.coma_cleaning", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.preprocessing.address_cleaner.AddressCleaner.lower_cleaning"], ["    ", "def", "clean", "(", "self", ",", "addresses", ":", "List", "[", "str", "]", ")", "->", "List", "[", "str", "]", ":", "\n", "        ", "res", "=", "[", "]", "\n", "\n", "for", "address", "in", "addresses", ":", "\n", "            ", "processed_address", "=", "self", ".", "coma_cleaning", "(", "address", ")", "\n", "\n", "processed_address", "=", "self", ".", "lower_cleaning", "(", "processed_address", ")", "\n", "\n", "res", ".", "append", "(", "\" \"", ".", "join", "(", "processed_address", ".", "split", "(", ")", ")", ")", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.preprocessing.address_cleaner.AddressCleaner.coma_cleaning": [[16, 20], ["text.replace"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "coma_cleaning", "(", "text", ":", "str", ")", "->", "str", ":", "\n", "# See issue 56 https://github.com/GRAAL-Research/deepparse/issues/56", "\n", "        ", "return", "text", ".", "replace", "(", "\",\"", ",", "\"\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.preprocessing.address_cleaner.AddressCleaner.lower_cleaning": [[21, 25], ["text.lower"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "lower_cleaning", "(", "text", ":", "str", ")", "->", "str", ":", "\n", "# Since the original training data was in lowercase", "\n", "        ", "return", "text", ".", "lower", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.preprocessing.test_address_cleaner.AddressCleanerTest.setUpClass": [[7, 13], ["None"], "methods", ["None"], ["    ", "@", "classmethod", "\n", "def", "setUpClass", "(", "cls", ")", ":", "\n", "        ", "cls", ".", "a_clean_address", "=", "\"350 rue des lilas ouest qu\u00e9bec qu\u00e9bec g1l 1b6\"", "\n", "cls", ".", "a_dirty_address_with_commas", "=", "\"350 rue des lilas , ouest ,qu\u00e9bec qu\u00e9bec, g1l 1b6\"", "\n", "cls", ".", "a_dirty_address_with_uppercase", "=", "\"350 rue des Lilas Ouest Qu\u00e9bec Qu\u00e9bec G1L 1B6\"", "\n", "cls", ".", "a_dirty_address_with_whitespaces", "=", "\"350     rue des Lilas Ouest Qu\u00e9bec Qu\u00e9bec G1L 1B6\"", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.preprocessing.test_address_cleaner.AddressCleanerTest.test_givenACleanAddress_whenCleaningAddress_thenShouldNotMakeAnyChange": [[14, 18], ["deepparse.preprocessing.AddressCleaner().clean", "test_address_cleaner.AddressCleanerTest.assertEqual", "deepparse.preprocessing.AddressCleaner"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.preprocessing.address_cleaner.AddressCleaner.clean"], ["", "def", "test_givenACleanAddress_whenCleaningAddress_thenShouldNotMakeAnyChange", "(", "self", ")", ":", "\n", "        ", "cleaned_address", "=", "AddressCleaner", "(", ")", ".", "clean", "(", "[", "self", ".", "a_clean_address", "]", ")", "\n", "\n", "self", ".", "assertEqual", "(", "self", ".", "a_clean_address", ",", "cleaned_address", "[", "0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.preprocessing.test_address_cleaner.AddressCleanerTest.test_givenADirtyAddressWithCommas_whenCleaningAddress_thenShouldRemoveCommas": [[19, 25], ["deepparse.preprocessing.AddressCleaner().clean", "test_address_cleaner.AddressCleanerTest.assertEqual", "deepparse.preprocessing.AddressCleaner"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.preprocessing.address_cleaner.AddressCleaner.clean"], ["", "def", "test_givenADirtyAddressWithCommas_whenCleaningAddress_thenShouldRemoveCommas", "(", "\n", "self", ",", "\n", ")", ":", "\n", "        ", "cleaned_address", "=", "AddressCleaner", "(", ")", ".", "clean", "(", "[", "self", ".", "a_dirty_address_with_commas", "]", ")", "\n", "\n", "self", ".", "assertEqual", "(", "self", ".", "a_clean_address", ",", "cleaned_address", "[", "0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.preprocessing.test_address_cleaner.AddressCleanerTest.test_givenADirtyAddressWithUppercase_whenCleaningAddress_thenShouldLower": [[26, 30], ["deepparse.preprocessing.AddressCleaner().clean", "test_address_cleaner.AddressCleanerTest.assertEqual", "deepparse.preprocessing.AddressCleaner"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.preprocessing.address_cleaner.AddressCleaner.clean"], ["", "def", "test_givenADirtyAddressWithUppercase_whenCleaningAddress_thenShouldLower", "(", "self", ")", ":", "\n", "        ", "cleaned_address", "=", "AddressCleaner", "(", ")", ".", "clean", "(", "[", "self", ".", "a_dirty_address_with_uppercase", "]", ")", "\n", "\n", "self", ".", "assertEqual", "(", "self", ".", "a_clean_address", ",", "cleaned_address", "[", "0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.preprocessing.test_address_cleaner.AddressCleanerTest.test_givenADirtyAddressWithWhitespaces_whenCleaningAddress_thenShouldRemoveWhitespaces": [[31, 37], ["deepparse.preprocessing.AddressCleaner().clean", "test_address_cleaner.AddressCleanerTest.assertEqual", "deepparse.preprocessing.AddressCleaner"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.preprocessing.address_cleaner.AddressCleaner.clean"], ["", "def", "test_givenADirtyAddressWithWhitespaces_whenCleaningAddress_thenShouldRemoveWhitespaces", "(", "\n", "self", ",", "\n", ")", ":", "\n", "        ", "cleaned_address", "=", "AddressCleaner", "(", ")", ".", "clean", "(", "[", "self", ".", "a_dirty_address_with_whitespaces", "]", ")", "\n", "\n", "self", ".", "assertEqual", "(", "self", ".", "a_clean_address", ",", "cleaned_address", "[", "0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.preprocessing.test_address_cleaner.AddressCleanerTest.test_givenMultipleDirtyAddresses_whenCleaningAddresses_thenShouldCleanAllAddresses": [[38, 47], ["deepparse.preprocessing.AddressCleaner().clean", "test_address_cleaner.AddressCleanerTest.assertEqual", "test_address_cleaner.AddressCleanerTest.assertEqual", "deepparse.preprocessing.AddressCleaner"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.preprocessing.address_cleaner.AddressCleaner.clean"], ["", "def", "test_givenMultipleDirtyAddresses_whenCleaningAddresses_thenShouldCleanAllAddresses", "(", "\n", "self", ",", "\n", ")", ":", "\n", "        ", "cleaned_address", "=", "AddressCleaner", "(", ")", ".", "clean", "(", "\n", "[", "self", ".", "a_dirty_address_with_whitespaces", ",", "self", ".", "a_dirty_address_with_uppercase", "]", "\n", ")", "\n", "\n", "self", ".", "assertEqual", "(", "self", ".", "a_clean_address", ",", "cleaned_address", "[", "0", "]", ")", "\n", "self", ".", "assertEqual", "(", "self", ".", "a_clean_address", ",", "cleaned_address", "[", "1", "]", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.capturing.Capturing.__enter__": [[10, 14], ["io.StringIO"], "methods", ["None"], ["def", "__enter__", "(", "self", ")", ":", "\n", "        ", "self", ".", "_stdout", "=", "sys", ".", "stdout", "\n", "sys", ".", "stdout", "=", "self", ".", "_stringio", "=", "StringIO", "(", ")", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.capturing.Capturing.__exit__": [[15, 19], ["capturing.Capturing.extend", "capturing.Capturing._stringio.getvalue().splitlines", "capturing.Capturing._stringio.getvalue"], "methods", ["None"], ["", "def", "__exit__", "(", "self", ",", "*", "args", ")", ":", "\n", "        ", "self", ".", "extend", "(", "self", ".", "_stringio", ".", "getvalue", "(", ")", ".", "splitlines", "(", ")", ")", "\n", "del", "self", ".", "_stringio", "\n", "sys", ".", "stdout", "=", "self", ".", "_stdout", "\n", "", "", ""]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.formatted_parsed_address.FormattedParsedAddress.__init__": [[52, 62], ["formatted_parsed_address.FormattedParsedAddress._infer_tags_order", "formatted_parsed_address.FormattedParsedAddress._resolve_tagged_affectation", "setattr", "list", "address.keys"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.formatted_parsed_address.FormattedParsedAddress._infer_tags_order", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.formatted_parsed_address.FormattedParsedAddress._resolve_tagged_affectation"], ["def", "__init__", "(", "self", ",", "address", ":", "Dict", ")", ":", "\n", "        ", "for", "key", "in", "FIELDS", ":", "\n", "            ", "setattr", "(", "self", ",", "key", ",", "None", ")", "\n", "\n", "", "self", ".", "raw_address", "=", "list", "(", "address", ".", "keys", "(", ")", ")", "[", "0", "]", "\n", "self", ".", "address_parsed_components", "=", "address", "[", "self", ".", "raw_address", "]", "\n", "\n", "self", ".", "_infer_tags_order", "(", ")", "\n", "\n", "self", ".", "_resolve_tagged_affectation", "(", "self", ".", "address_parsed_components", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.formatted_parsed_address.FormattedParsedAddress.__str__": [[63, 69], ["formatted_parsed_address.FormattedParsedAddress._formatted_parsed_address_components"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.formatted_parsed_address.FormattedParsedAddress._formatted_parsed_address_components"], ["", "def", "__str__", "(", "self", ")", "->", "str", ":", "\n", "        ", "\"\"\"\n        Return the unparsed address plus the parsed address components.\n        \"\"\"", "\n", "return", "(", "\n", "f\"The unparsed address is '{self.raw_address}' and the parsed address is \"", "\n", "f\"'{self._formatted_parsed_address_components()}'\"", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.formatted_parsed_address.FormattedParsedAddress._formatted_parsed_address_components": [[72, 77], ["formatted_string.strip", "str"], "methods", ["None"], ["", "def", "_formatted_parsed_address_components", "(", "self", ")", "->", "str", ":", "\n", "        ", "formatted_string", "=", "\"\"", "\n", "for", "component_tuple", "in", "self", ".", "address_parsed_components", ":", "\n", "            ", "formatted_string", "+=", "str", "(", "component_tuple", ")", "+", "\" \"", "\n", "", "return", "formatted_string", ".", "strip", "(", ")", "# Strip to remove trailing ending whitespace", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.formatted_parsed_address.FormattedParsedAddress.__repr__": [[78, 86], ["formatted_parsed_address.FormattedParsedAddress._get_attr_repr"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.formatted_parsed_address.FormattedParsedAddress._get_attr_repr"], ["", "def", "__repr__", "(", "self", ")", "->", "str", ":", "\n", "        ", "values", "=", "[", "\n", "self", ".", "_get_attr_repr", "(", "name", ")", "\n", "for", "name", "in", "self", ".", "__dict__", "\n", "if", "name", "not", "in", "(", "\"raw_address\"", ",", "\"address_parsed_components\"", ",", "\"inferred_order\"", ")", "\n", "]", "\n", "joined_values", "=", "\", \"", ".", "join", "(", "v", "for", "v", "in", "values", "if", "v", "!=", "\"\"", ")", "\n", "return", "self", ".", "__class__", ".", "__name__", "+", "\"<\"", "+", "joined_values", "+", "\">\"", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.formatted_parsed_address.FormattedParsedAddress.__eq__": [[87, 102], ["getattr", "other.__getattribute__"], "methods", ["None"], ["", "def", "__eq__", "(", "self", ",", "other", ")", "->", "bool", ":", "\n", "        ", "\"\"\"\n        Equal if all address components elements are equals. If attributes are not the same, will return False.\n        \"\"\"", "\n", "for", "field", "in", "self", ".", "__dict__", ":", "\n", "            ", "address_component", "=", "getattr", "(", "self", ",", "field", ")", "\n", "try", ":", "\n", "                ", "other_address_component", "=", "other", ".", "__getattribute__", "(", "field", ")", "\n", "", "except", "AttributeError", ":", "\n", "# Attribute not the same.", "\n", "                ", "return", "False", "\n", "", "if", "address_component", "!=", "other_address_component", ":", "\n", "# An element is different.", "\n", "                ", "return", "False", "\n", "", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.formatted_parsed_address.FormattedParsedAddress.format_address": [[103, 172], ["formatted_parsed_address.FormattedParsedAddress._validate_argument", "formatted_parsed_address.FormattedParsedAddress._validate_argument", "formatted_parsed_address.FormattedParsedAddress._validate_argument", "formatted_parsed_address.strip", "getattr", "getattr.capitalize", "getattr.upper"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.formatted_parsed_address.FormattedParsedAddress._validate_argument", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.formatted_parsed_address.FormattedParsedAddress._validate_argument", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.formatted_parsed_address.FormattedParsedAddress._validate_argument"], ["", "def", "format_address", "(", "\n", "self", ",", "\n", "fields", ":", "Union", "[", "List", ",", "None", "]", "=", "None", ",", "\n", "capitalize_fields", ":", "Union", "[", "List", "[", "str", "]", ",", "None", "]", "=", "None", ",", "\n", "upper_case_fields", ":", "Union", "[", "List", "[", "str", "]", ",", "None", "]", "=", "None", ",", "\n", "field_separator", ":", "Union", "[", "str", ",", "None", "]", "=", "None", ",", "\n", ")", "->", "str", ":", "\n", "        ", "\"\"\"\n        Method to format the address components in a specific order. We also filter the empty components (None).\n        By default, the order is `'StreetNumber, Unit, StreetName, Orientation, Municipality, Province, PostalCode,\n        GeneralDelivery'` and we filter the empty components.\n\n        Args:\n            fields (Union[list, None]): Optional argument to define the fields to order the address components of\n                the address. If None, we will use the inferred order base on the address tags appearance. For example,\n                if the parsed address is ``(305, StreetNumber), (rue, StreetName), (des, StreetName),\n                (Lilas, StreetName)``, the inferred order will be ``StreetNumber, StreetName``.\n            capitalize_fields (Union[list, None]): Optional argument to define the capitalized fields for the formatted\n                address. If None, no fields are capitalized.\n            upper_case_fields (Union[list, None]): Optional argument to define the upper-cased fields for the\n                formatted address. If None, no fields are capitalized.\n            field_separator (Union[list, None]): Optional argument to define the field separator between address\n                components. If None, the default field separator is ``\" \"``.\n\n        Return:\n            A string of the formatted address in the fields order.\n\n        Examples:\n\n            .. code-block:: python\n\n                address_parser = AddressParser()\n                parse_address = address_parser(\"350 rue des Lilas Ouest Quebec city Quebec G1L 1B6\")\n\n                parse_address.formatted_address(fields_separator=\", \")\n                # > 350, rue des lilas, ouest, quebec city, quebec, g1l 1b6\n\n                parse_address.formatted_address(fields_separator=\", \", capitalize_fields=[\"StreetName\", \"Orientation\"])\n                # > 350, Rue des lilas, Ouest, quebec city, quebec, g1l 1b6\n\n                parse_address.formatted_address(fields_separator=\", \", upper_case_fields=[\"PostalCode\"\"])\n                # > 350 rue des lilas ouest quebec city quebec G1L 1B6\n        \"\"\"", "\n", "if", "fields", "is", "None", ":", "\n", "            ", "fields", "=", "self", ".", "inferred_order", "\n", "", "self", ".", "_validate_argument", "(", "fields", ")", "\n", "\n", "if", "capitalize_fields", "is", "None", ":", "\n", "            ", "capitalize_fields", "=", "[", "]", "\n", "", "self", ".", "_validate_argument", "(", "capitalize_fields", ")", "\n", "\n", "if", "upper_case_fields", "is", "None", ":", "\n", "            ", "upper_case_fields", "=", "[", "]", "\n", "", "self", ".", "_validate_argument", "(", "upper_case_fields", ")", "\n", "\n", "if", "field_separator", "is", "None", ":", "\n", "            ", "field_separator", "=", "\" \"", "\n", "\n", "", "formatted_parsed_address", "=", "\"\"", "\n", "for", "field", "in", "fields", ":", "\n", "            ", "address_component", "=", "getattr", "(", "self", ",", "field", ")", "\n", "if", "address_component", "is", "not", "None", ":", "\n", "# Format address", "\n", "                ", "address_component", "=", "address_component", ".", "capitalize", "(", ")", "if", "field", "in", "capitalize_fields", "else", "address_component", "\n", "address_component", "=", "address_component", ".", "upper", "(", ")", "if", "field", "in", "upper_case_fields", "else", "address_component", "\n", "\n", "formatted_parsed_address", "+=", "address_component", "+", "field_separator", "\n", "\n", "", "", "return", "formatted_parsed_address", ".", "strip", "(", "field_separator", ")", "# To remove last field separator", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.formatted_parsed_address.FormattedParsedAddress.to_dict": [[173, 192], ["getattr"], "methods", ["None"], ["", "def", "to_dict", "(", "self", ",", "fields", ":", "Union", "[", "List", ",", "None", "]", "=", "None", ")", "->", "dict", ":", "\n", "        ", "\"\"\"\n        Method to convert a parsed address into a dictionary where the keys are the address components, and the values\n        are the value of those components. For example, the parsed address ``<StreetNumber> 305 <StreetName>\n        rue des Lilas`` will be converted into the following dictionary:\n        ``{'StreetNumber':'305', 'StreetName': 'rue des Lilas'}``.\n\n        Args:\n            fields (Union[list, None]): Optional argument to define the fields to extract from the address and the\n                order of it. If None, will use the default order and value `'StreetNumber, Unit, StreetName,\n                Orientation, Municipality, Province, PostalCode, GeneralDelivery'`.\n\n        Return:\n            A dictionary where the keys are the selected (or default) fields and the values are the corresponding value\n            of the address components.\n        \"\"\"", "\n", "if", "fields", "is", "None", ":", "\n", "            ", "fields", "=", "FIELDS", "\n", "", "return", "{", "field", ":", "getattr", "(", "self", ",", "field", ")", "for", "field", "in", "fields", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.formatted_parsed_address.FormattedParsedAddress.to_list_of_tuples": [[193, 213], ["formatted_parsed_address.FormattedParsedAddress.to_dict", "formatted_parsed_address.FormattedParsedAddress.items"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.formatted_parsed_address.FormattedParsedAddress.to_dict"], ["", "def", "to_list_of_tuples", "(", "self", ",", "fields", ":", "Union", "[", "List", ",", "None", "]", "=", "None", ")", "->", "List", "[", "tuple", "]", ":", "\n", "        ", "\"\"\"\n        Method to convert a parsed address into a list of tuples where the first element of the tuples\n        is the value of the components, and the second value is the name of the components.\n\n        For example, the parsed address ``<StreetNumber> 305 <StreetName> rue des Lilas`` will be converted into the\n        following list of tuples: ``('305', 'StreetNumber'), ('rue des Lilas', 'StreetName')]``.\n\n        Args:\n            fields (Union[list, None]): Optional argument to define the fields to extract from the address and its\n                order. If None, it will use the default order and value `'StreetNumber, Unit, StreetName,\n                Orientation, Municipality, Province, PostalCode, GeneralDelivery'`.\n\n        Return:\n            A list of tuples where the first element of the tuples are the value of the address components\n            and the second values are the name of the address components.\n\n        \"\"\"", "\n", "dict_of_attr", "=", "self", ".", "to_dict", "(", "fields", ")", "\n", "return", "[", "(", "value", ",", "key", ")", "for", "key", ",", "value", "in", "dict_of_attr", ".", "items", "(", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.formatted_parsed_address.FormattedParsedAddress.to_pandas": [[214, 227], ["formatted_parsed_address.FormattedParsedAddress.to_dict"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.formatted_parsed_address.FormattedParsedAddress.to_dict"], ["", "def", "to_pandas", "(", "self", ")", "->", "Dict", ":", "\n", "        ", "\"\"\"\n        Method to convert a parsed address into a dictionary for pandas where the first key is the raw address and\n        the followings keys are the address components, and the values are the value of those components.\n        For example, the parsed address ``<StreetNumber> 305 <StreetName> rue des Lilas`` will be converted into\n        the following dictionary: ``{'Address': '305 rue des Lilas', 'StreetNumber':'305', 'StreetName':\n        'rue des Lilas'}``.\n\n        Return:\n            A dictionary of the raw address and all is parsed components.\n\n        \"\"\"", "\n", "return", "{", "\"Address\"", ":", "self", ".", "raw_address", ",", "**", "self", ".", "to_dict", "(", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.formatted_parsed_address.FormattedParsedAddress.to_pickle": [[228, 243], ["formatted_parsed_address.FormattedParsedAddress.to_list_of_tuples"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.formatted_parsed_address.FormattedParsedAddress.to_list_of_tuples"], ["", "def", "to_pickle", "(", "self", ")", "->", "Tuple", "[", "str", ",", "List", "]", ":", "\n", "        ", "\"\"\"\n        Method to convert a parsed address into a list of tuple for pickle where the first tuple element is the\n        raw address and the followings tuples are the address components, and the values are the value of\n        those components. For example, the parsed address ``<StreetNumber> 305 <StreetName> rue des Lilas``\n        will be converted into the following list of tuples: ``'305 rue des Lilas', ('305', 'StreetNumber'),\n        ('rue des Lilas', 'StreetName')]``.\n\n        Return:\n            A tuple where the first element is the raw address (a string) and the second element is a list of\n            tuple of the parsed addresses. The first element of each tuple is the address components and the second\n            is the tag.\n\n        \"\"\"", "\n", "return", "self", ".", "raw_address", ",", "self", ".", "to_list_of_tuples", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.formatted_parsed_address.FormattedParsedAddress._resolve_tagged_affectation": [[244, 261], ["isinstance", "getattr", "setattr", "setattr", "getattr"], "methods", ["None"], ["", "def", "_resolve_tagged_affectation", "(", "self", ",", "tagged_address", ":", "List", "[", "Tuple", "]", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        Private method to resolve the parsing of the tagged address.\n        Args:\n            tagged_address: The tagged address where the keys are the address component and the values are the\n                associated tag.\n        \"\"\"", "\n", "for", "address_component", ",", "tag", "in", "tagged_address", ":", "\n", "            ", "if", "isinstance", "(", "tag", ",", "tuple", ")", ":", "# when tag is also the tag and the probability of the tag", "\n", "                ", "tag", "=", "tag", "[", "0", "]", "\n", "\n", "", "if", "getattr", "(", "self", ",", "tag", ")", "is", "None", ":", "\n", "# empty address components", "\n", "                ", "setattr", "(", "self", ",", "tag", ",", "address_component", ")", "\n", "", "else", ":", "\n", "# we merge the previous components with the new element", "\n", "                ", "setattr", "(", "self", ",", "tag", ",", "\" \"", ".", "join", "(", "[", "getattr", "(", "self", ",", "tag", ")", ",", "address_component", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.formatted_parsed_address.FormattedParsedAddress._get_attr_repr": [[262, 267], ["getattr", "repr", "getattr"], "methods", ["None"], ["", "", "", "def", "_get_attr_repr", "(", "self", ",", "name", ")", ":", "\n", "        ", "value", "=", "getattr", "(", "self", ",", "name", ")", "\n", "if", "value", "is", "not", "None", ":", "\n", "            ", "return", "name", "+", "\"=\"", "+", "repr", "(", "getattr", "(", "self", ",", "name", ")", ")", "\n", "", "return", "\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.formatted_parsed_address.FormattedParsedAddress._validate_argument": [[268, 272], ["hasattr", "KeyError"], "methods", ["None"], ["", "def", "_validate_argument", "(", "self", ",", "arg", ":", "List", ")", "->", "None", ":", "\n", "        ", "for", "arg_element", "in", "arg", ":", "\n", "            ", "if", "not", "hasattr", "(", "self", ",", "arg_element", ")", ":", "\n", "                ", "raise", "KeyError", "(", "arg_element", "+", "\" not an attribute of the formatted parsed address.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.formatted_parsed_address.FormattedParsedAddress._infer_tags_order": [[273, 283], ["inferred_order.append"], "methods", ["None"], ["", "", "", "def", "_infer_tags_order", "(", "self", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        Private method to infer the order of the tags base on the address order tag.\n        \"\"\"", "\n", "tags", "=", "[", "tag", "for", "_", ",", "tag", "in", "self", ".", "address_parsed_components", "]", "\n", "inferred_order", "=", "[", "]", "\n", "for", "tag", "in", "tags", ":", "\n", "            ", "if", "tag", "not", "in", "inferred_order", ":", "\n", "                ", "inferred_order", ".", "append", "(", "tag", ")", "\n", "", "", "self", ".", "inferred_order", "=", "inferred_order", "\n", "", "", ""]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.tools.validate_if_new_prediction_tags": [[9, 11], ["checkpoint_weights.get"], "function", ["None"], ["from", ".", "data_validation", "import", "(", "\n", "validate_if_any_none", ",", "\n", "validate_if_any_whitespace_only", ",", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.tools.validate_if_new_seq2seq_params": [[13, 15], ["checkpoint_weights.get"], "function", ["None"], [")", "\n", "\n", "BASE_URL", "=", "\"https://graal.ift.ulaval.ca/public/deepparse/{}.{}\"", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.tools.pretrained_parser_in_directory": [[17, 22], ["tools.get_files_in_directory", "len", "tools.get_address_parser_in_directory"], "function", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.tools.get_files_in_directory", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.tools.get_address_parser_in_directory"], ["\n", "\n", "def", "latest_version", "(", "model", ":", "str", ",", "cache_path", ":", "str", ")", "->", "bool", ":", "\n", "    ", "\"\"\"\n    Verify if the local model is the latest.\n    \"\"\"", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.tools.get_files_in_directory": [[24, 30], ["os.walk", "os.path.abspath"], "function", ["None"], ["        ", "local_model_hash_version", "=", "local_model_hash_file", ".", "readline", "(", ")", "\n", "", "download_from_url", "(", "model", ",", "cache_path", ",", "\"version\"", ")", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "cache_path", ",", "model", "+", "\".version\"", ")", ",", "encoding", "=", "\"utf-8\"", ")", "as", "remote_model_hash_file", ":", "\n", "        ", "remote_model_hash_version", "=", "remote_model_hash_file", ".", "readline", "(", ")", "\n", "", "return", "local_model_hash_version", ".", "strip", "(", ")", "==", "remote_model_hash_version", ".", "strip", "(", ")", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.tools.get_address_parser_in_directory": [[32, 35], ["None"], "function", ["None"], ["    "]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.tools.load_tuple_to_device": [[38, 45], ["tuple", "isinstance", "element.to"], "function", ["None"], ["r", "=", "requests", ".", "get", "(", "url", ",", "timeout", "=", "5", ")", "\n", "r", ".", "raise_for_status", "(", ")", "# Raise exception", "\n", "os", ".", "makedirs", "(", "saving_dir", ",", "exist_ok", "=", "True", ")", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "saving_dir", ",", "f\"{file_name}.{file_extension}\"", ")", ",", "\"wb\"", ")", "as", "file", ":", "\n", "        ", "file", ".", "write", "(", "r", ".", "content", ")", "\n", "\n", "\n", "", "", "def", "download_weights", "(", "model", ":", "str", ",", "saving_dir", ":", "str", ",", "verbose", ":", "bool", "=", "True", ")", "->", "None", ":", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.tools.indices_splitting": [[47, 61], ["numpy.random.seed", "list", "numpy.random.shuffle", "math.floor", "range"], "function", ["None"], ["\n", "if", "verbose", ":", "\n", "        ", "print", "(", "f\"Downloading the weights for the network {model}.\"", ")", "\n", "", "download_from_url", "(", "model", ",", "saving_dir", ",", "\"ckpt\"", ")", "\n", "download_from_url", "(", "model", ",", "saving_dir", ",", "\"version\"", ")", "\n", "\n", "\n", "", "def", "handle_poutyne_version", "(", ")", "->", "str", ":", "\n", "    "]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.tools.handle_model_name": [[63, 101], ["model_type.replace.lower", "model_type.replace.replace", "ValueError", "ValueError"], "function", ["None"], ["full_version", "=", "poutyne", ".", "version", ".", "__version__", "\n", "components_parts", "=", "full_version", ".", "split", "(", "\".\"", ")", "\n", "major", "=", "components_parts", "[", "0", "]", "\n", "minor", "=", "components_parts", "[", "1", "]", "\n", "version", "=", "f\"{major}.{minor}\"", "\n", "return", "version", "\n", "\n", "\n", "", "def", "valid_poutyne_version", "(", "min_major", ":", "int", "=", "1", ",", "min_minor", ":", "int", "=", "2", ")", ":", "\n", "    ", "\"\"\"\n    Validate Poutyne version is greater than min_major.min_minor for using a str checkpoint. Some version before\n    does not support all the features we need. By default, min_major.min_minor equal version 1.2 which is the\n    lowest version we can use.\n    \"\"\"", "\n", "version_components", "=", "handle_poutyne_version", "(", ")", ".", "split", "(", "\".\"", ")", "\n", "\n", "major", "=", "int", "(", "version_components", "[", "0", "]", ")", "\n", "minor", "=", "int", "(", "version_components", "[", "1", "]", ")", "\n", "\n", "if", "major", ">", "min_major", ":", "\n", "        ", "is_valid_poutyne_version", "=", "True", "\n", "", "else", ":", "\n", "        ", "is_valid_poutyne_version", "=", "major", ">=", "min_major", "and", "minor", ">=", "min_minor", "\n", "\n", "", "return", "is_valid_poutyne_version", "\n", "\n", "\n", "", "def", "handle_pre_trained_checkpoint", "(", "model_type_checkpoint", ":", "str", ")", "->", "str", ":", "\n", "    ", "\"\"\"\n    Handle the checkpoint formatting for pretrained models.\n    \"\"\"", "\n", "if", "not", "valid_poutyne_version", "(", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", "\n", "f\"To load the pretrained {model_type_checkpoint} model, you need to have a Poutyne version\"", "\n", "\"greater than 1.1 (>1.1)\"", "\n", ")", "\n", "", "model_path", "=", "os", ".", "path", ".", "join", "(", "CACHE_PATH", ",", "f\"{model_type_checkpoint}.ckpt\"", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "isfile", "(", "model_path", ")", ":", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.tools.infer_model_type": [[103, 135], ["checkpoint_weights.get", "checkpoint_weights.keys", "checkpoint_weights.keys"], "function", ["None"], ["", "elif", "not", "latest_version", "(", "model_type_checkpoint", ",", "cache_path", "=", "CACHE_PATH", ")", ":", "\n", "        ", "warnings", ".", "warn", "(", "\n", "\"A newer model of fasttext is available, you can download it using the download script.\"", ",", "\n", "UserWarning", ",", "\n", ")", "\n", "", "checkpoint", "=", "os", ".", "path", ".", "join", "(", "CACHE_PATH", ",", "f\"{model_type_checkpoint}.ckpt\"", ")", "\n", "return", "checkpoint", "\n", "\n", "\n", "", "def", "handle_model_path", "(", "checkpoint", ":", "str", ")", "->", "str", ":", "\n", "    ", "\"\"\"\n    Handle the validity of path.\n    \"\"\"", "\n", "if", "checkpoint", "in", "(", "\"fasttext\"", ",", "\"bpemb\"", ")", ":", "\n", "        ", "checkpoint", "=", "handle_pre_trained_checkpoint", "(", "checkpoint", ")", "\n", "", "elif", "isinstance", "(", "checkpoint", ",", "str", ")", "and", "checkpoint", ".", "endswith", "(", "\".ckpt\"", ")", ":", "\n", "        ", "if", "not", "valid_poutyne_version", "(", ")", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\n", "\"To load a string path to a model, you need to have a Poutyne version\"", "\"greater than 1.1 (>1.1)\"", "\n", ")", "\n", "", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\n", "\"The checkpoint is not valid. Can be a path in a string format (e.g. 'a_path_.ckpt'), \"", "\n", "\"'fasttext' or 'bpemb'.\"", "\n", ")", "\n", "\n", "", "return", "checkpoint", "\n", "\n", "\n", "", "def", "validate_data_to_parse", "(", "addresses_to_parse", ":", "List", ")", "->", "None", ":", "\n", "    "]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.address_parser.AddressParser.__init__": [[182, 240], ["address_parser.AddressParser._process_device", "list", "converter.TagsConverter", "tools.handle_model_name", "address_parser.AddressParser._model_factory", "address_parser.AddressParser.model.eval", "torch.load", "tools.validate_if_new_seq2seq_params", "tools.validate_if_new_prediction_tags", "torch.load.get", "tools.infer_model_type", "torch.load.get", "torch.load.get", "list"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.address_parser.AddressParser._process_device", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.tools.handle_model_name", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.address_parser.AddressParser._model_factory", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.tools.validate_if_new_seq2seq_params", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.tools.validate_if_new_prediction_tags", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.tools.infer_model_type"], ["def", "__init__", "(", "\n", "self", ",", "\n", "model_type", ":", "str", "=", "\"best\"", ",", "\n", "attention_mechanism", ":", "bool", "=", "False", ",", "\n", "device", ":", "Union", "[", "int", ",", "str", ",", "torch", ".", "device", "]", "=", "0", ",", "\n", "rounding", ":", "int", "=", "4", ",", "\n", "verbose", ":", "bool", "=", "True", ",", "\n", "path_to_retrained_model", ":", "Union", "[", "str", ",", "None", "]", "=", "None", ",", "\n", "cache_dir", ":", "Union", "[", "str", ",", "None", "]", "=", "None", ",", "\n", ")", "->", "None", ":", "\n", "# pylint: disable=too-many-arguments", "\n", "        ", "self", ".", "_process_device", "(", "device", ")", "\n", "\n", "self", ".", "rounding", "=", "rounding", "\n", "self", ".", "verbose", "=", "verbose", "\n", "\n", "named_parser", "=", "None", "\n", "\n", "# Default pretrained tag are loaded", "\n", "tags_to_idx", "=", "_pre_trained_tags_to_idx", "\n", "# Default FIELDS of the formatted address", "\n", "fields", "=", "list", "(", "tags_to_idx", ")", "\n", "# Default new config seq2seq model params", "\n", "seq2seq_kwargs", "=", "{", "}", "# Empty for default settings", "\n", "\n", "if", "path_to_retrained_model", "is", "not", "None", ":", "\n", "            ", "checkpoint_weights", "=", "torch", ".", "load", "(", "path_to_retrained_model", ",", "map_location", "=", "\"cpu\"", ")", "\n", "if", "validate_if_new_seq2seq_params", "(", "checkpoint_weights", ")", ":", "\n", "                ", "seq2seq_kwargs", "=", "checkpoint_weights", ".", "get", "(", "\"seq2seq_params\"", ")", "\n", "", "if", "validate_if_new_prediction_tags", "(", "checkpoint_weights", ")", ":", "\n", "# We load the new tags_to_idx", "\n", "                ", "tags_to_idx", "=", "checkpoint_weights", ".", "get", "(", "\"prediction_tags\"", ")", "\n", "# We change the FIELDS for the FormattedParsedAddress", "\n", "fields", "=", "list", "(", "tags_to_idx", ")", "\n", "\n", "# In any case, we have given a new name to the parser using either the default or user given name", "\n", "", "named_parser", "=", "checkpoint_weights", ".", "get", "(", "\"named_parser\"", ")", "\n", "\n", "# We \"infer\" the model type, thus we also had to handle the attention_mechanism bool", "\n", "model_type", ",", "attention_mechanism", "=", "infer_model_type", "(", "\n", "checkpoint_weights", ",", "attention_mechanism", "=", "attention_mechanism", "\n", ")", "\n", "\n", "", "formatted_parsed_address", ".", "FIELDS", "=", "fields", "\n", "self", ".", "tags_converter", "=", "TagsConverter", "(", "tags_to_idx", ")", "\n", "\n", "self", ".", "named_parser", "=", "named_parser", "\n", "\n", "self", ".", "model_type", ",", "self", ".", "_model_type_formatted", "=", "handle_model_name", "(", "model_type", ",", "attention_mechanism", ")", "\n", "self", ".", "_model_factory", "(", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", "path_to_retrained_model", "=", "path_to_retrained_model", ",", "\n", "prediction_layer_len", "=", "self", ".", "tags_converter", ".", "dim", ",", "\n", "attention_mechanism", "=", "attention_mechanism", ",", "\n", "seq2seq_kwargs", "=", "seq2seq_kwargs", ",", "\n", "cache_dir", "=", "cache_dir", ",", "\n", ")", "\n", "self", ".", "model", ".", "eval", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.address_parser.AddressParser.__str__": [[241, 245], ["None"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", "->", "str", ":", "\n", "        ", "if", "self", ".", "named_parser", "is", "not", "None", ":", "\n", "            ", "return", "self", ".", "named_parser", "\n", "", "return", "f\"PreTrained{self._model_type_formatted}AddressParser\"", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.address_parser.AddressParser.__call__": [[248, 358], ["isinstance", "isinstance", "isinstance", "preprocessing.AddressCleaner().clean", "torch.utils.data.DataLoader", "address_parser.AddressParser._fill_tagged_addresses_components", "validate_data_to_parse", "print", "address_parser.AddressParser.model", "tags_predictions.extend", "tags_predictions_prob.extend", "preprocessing.AddressCleaner", "len", "[].transpose().cpu().numpy().tolist", "torch.exp().transpose().detach().cpu().numpy().tolist", "tools.load_tuple_to_device", "[].transpose().cpu().numpy", "torch.exp().transpose().detach().cpu().numpy", "[].transpose().cpu", "torch.exp().transpose().detach().cpu", "[].transpose", "torch.exp().transpose().detach", "torch.exp().transpose", "address_parser.AddressParser.max", "torch.exp", "address_parser.AddressParser.max"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.preprocessing.address_cleaner.AddressCleaner.clean", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.address_parser.AddressParser._fill_tagged_addresses_components", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.deepparse.tools.validate_data_to_parse", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.tools.load_tuple_to_device"], ["def", "__call__", "(", "\n", "self", ",", "\n", "addresses_to_parse", ":", "Union", "[", "List", "[", "str", "]", ",", "str", ",", "DatasetContainer", "]", ",", "\n", "with_prob", ":", "bool", "=", "False", ",", "\n", "batch_size", ":", "int", "=", "32", ",", "\n", "num_workers", ":", "int", "=", "0", ",", "\n", ")", "->", "Union", "[", "FormattedParsedAddress", ",", "List", "[", "FormattedParsedAddress", "]", "]", ":", "\n", "        ", "\"\"\"\n        Callable method to parse the components of an address or a list of address.\n\n        Args:\n            addresses_to_parse (Union[list[str], str, ~deepparse.dataset_container.DatasetContainer]): The addresses to\n                be parsed, can be either a single address (when using str), a list of address or a DatasetContainer.\n                We apply some validation tests before parsing to validate its content if the data to parse is a string\n                or a list of strings. We apply the following basic criteria:\n\n                    - no addresses are ``None`` value,\n                    - no addresses are empty string, and\n                    - no addresses are whitespace-only strings.\n\n                When using a list of addresses, the addresses are processed in batch, allowing a faster process.\n                For example, using fastText model, a single address takes around 0.003 seconds to be parsed using a\n                batch of 1 (1 element at the time is processed). This time can be reduced to 0.00035 seconds per\n                address when using a batch of 128 (128 elements at the time are processed).\n            with_prob (bool): If true, return the probability of all the tags with the specified\n                rounding.\n            batch_size (int): The size of the batch (by default, ``32``).\n            num_workers (int): Number of workers to use for the data loader (default is ``0``, which means that the data\n                will be loaded in the main process).\n\n        Return:\n            Either a :class:`~FormattedParsedAddress` or a list of\n            :class:`~FormattedParsedAddress` when given more than one address.\n\n        Examples:\n\n            .. code-block:: python\n\n                address_parser = AddressParser(device=0)  # on gpu device 0\n                parse_address = address_parser(\"350 rue des Lilas Ouest Quebec city Quebec G1L 1B6\")\n\n                # It also can be a list of addresses\n                parse_address = address_parser([\"350 rue des Lilas Ouest Quebec city Quebec G1L 1B6\",\n                                                \"350 rue des Lilas Ouest Quebec city Quebec G1L 1B6\"])\n\n                # It can also output the prob of the predictions\n                parse_address = address_parser(\"350 rue des Lilas Ouest Quebec city Quebec G1L 1B6\",\n                                               with_prob=True)\n\n                # Print the parsed address\n                print(parsed_address)\n\n            Using a larger batch size\n\n            .. code-block:: python\n\n                address_parser = AddressParser(device=0) #on gpu device 0\n                parse_address = address_parser(a_large_list_dataset, batch_size=1024)\n\n                # You can also use more worker\n                parse_address = address_parser(a_large_list_dataset, batch_size=1024, num_workers=2)\n\n\n            Or using one of our dataset container\n\n            .. code-block:: python\n\n                addresses_to_parse = CSVDatasetContainer(\"./a_path.csv\", column_names=[\"address_column_name\"],\n                                                         is_training_container=False)\n                address_parser(addresses_to_parse)\n        \"\"\"", "\n", "if", "isinstance", "(", "addresses_to_parse", ",", "str", ")", ":", "\n", "            ", "addresses_to_parse", "=", "[", "addresses_to_parse", "]", "\n", "\n", "", "if", "isinstance", "(", "addresses_to_parse", ",", "List", ")", ":", "\n", "            ", "validate_data_to_parse", "(", "addresses_to_parse", ")", "\n", "\n", "", "if", "isinstance", "(", "addresses_to_parse", ",", "DatasetContainer", ")", ":", "\n", "            ", "addresses_to_parse", "=", "addresses_to_parse", ".", "data", "\n", "\n", "", "clean_addresses", "=", "AddressCleaner", "(", ")", ".", "clean", "(", "addresses_to_parse", ")", "\n", "\n", "if", "self", ".", "verbose", "and", "len", "(", "addresses_to_parse", ")", ">", "PREDICTION_TIME_PERFORMANCE_THRESHOLD", ":", "\n", "            ", "print", "(", "\"Vectorizing the address\"", ")", "\n", "\n", "", "predict_data_loader", "=", "DataLoader", "(", "\n", "clean_addresses", ",", "\n", "collate_fn", "=", "self", ".", "_predict_pipeline", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "num_workers", "=", "num_workers", ",", "\n", ")", "\n", "\n", "tags_predictions", "=", "[", "]", "\n", "tags_predictions_prob", "=", "[", "]", "\n", "for", "x", "in", "predict_data_loader", ":", "\n", "            ", "tensor_prediction", "=", "self", ".", "model", "(", "*", "load_tuple_to_device", "(", "x", ",", "self", ".", "device", ")", ")", "\n", "tags_predictions", ".", "extend", "(", "tensor_prediction", ".", "max", "(", "2", ")", "[", "1", "]", ".", "transpose", "(", "0", ",", "1", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "tolist", "(", ")", ")", "\n", "tags_predictions_prob", ".", "extend", "(", "\n", "torch", ".", "exp", "(", "tensor_prediction", ".", "max", "(", "2", ")", "[", "0", "]", ")", ".", "transpose", "(", "0", ",", "1", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "tolist", "(", ")", "\n", ")", "\n", "\n", "", "tagged_addresses_components", "=", "self", ".", "_fill_tagged_addresses_components", "(", "\n", "tags_predictions", ",", "\n", "tags_predictions_prob", ",", "\n", "addresses_to_parse", ",", "\n", "clean_addresses", ",", "\n", "with_prob", ",", "\n", ")", "\n", "\n", "return", "tagged_addresses_components", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.address_parser.AddressParser.retrain": [[359, 708], ["address_parser.AddressParser._create_training_data_generator", "torch.optim.SGD", "poutyne.framework.Experiment", "ValueError", "dataset_container.is_a_train_container", "ValueError", "converter.TagsConverter", "seq2seq_params.update", "model_factory_dict.update", "address_parser.AddressParser._model_factory", "address_parser.AddressParser._freeze_model_params", "address_parser.AddressParser.model.parameters", "address_parser.AddressParser._retrain", "os.path.join", "torch_save.update", "torch.save", "len", "ValueError", "prediction_tags.keys", "ValueError", "address_parser.AddressParser.model.same_output_dim", "tools.valid_poutyne_version", "print", "os.listdir", "poutyne.framework.Experiment.model.network.state_dict", "torch_save.update", "torch_save.update", "name_of_the_retrain_parser.split", "address_parser.AddressParser.model.handle_new_output_dim", "model_factory_dict.update", "len", "tools.pretrained_parser_in_directory", "RuntimeError", "tools.get_files_in_directory", "address_parser.AddressParser._formatted_named_parser_name", "[].split", "ValueError", "ValueError", "tools.get_address_parser_in_directory"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.address_parser.AddressParser._create_training_data_generator", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.dataset_container.dataset_container.DatasetContainer.is_a_train_container", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.address_parser.AddressParser._model_factory", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.address_parser.AddressParser._freeze_model_params", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.address_parser.AddressParser._retrain", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.network.seq2seq.Seq2SeqModel.same_output_dim", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.deepparse.tools.valid_poutyne_version", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.network.seq2seq.Seq2SeqModel.handle_new_output_dim", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.tools.pretrained_parser_in_directory", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.tools.get_files_in_directory", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.address_parser.AddressParser._formatted_named_parser_name", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.tools.get_address_parser_in_directory"], ["", "def", "retrain", "(", "\n", "self", ",", "\n", "dataset_container", ":", "DatasetContainer", ",", "\n", "train_ratio", ":", "float", "=", "0.8", ",", "\n", "batch_size", ":", "int", "=", "32", ",", "\n", "epochs", ":", "int", "=", "5", ",", "\n", "num_workers", ":", "int", "=", "1", ",", "\n", "learning_rate", ":", "float", "=", "0.01", ",", "\n", "callbacks", ":", "Union", "[", "List", ",", "None", "]", "=", "None", ",", "\n", "seed", ":", "int", "=", "42", ",", "\n", "logging_path", ":", "str", "=", "\"./checkpoints\"", ",", "\n", "disable_tensorboard", ":", "bool", "=", "True", ",", "\n", "prediction_tags", ":", "Union", "[", "Dict", ",", "None", "]", "=", "None", ",", "\n", "seq2seq_params", ":", "Union", "[", "Dict", ",", "None", "]", "=", "None", ",", "\n", "layers_to_freeze", ":", "Union", "[", "str", ",", "None", "]", "=", "None", ",", "\n", "name_of_the_retrain_parser", ":", "Union", "[", "None", ",", "str", "]", "=", "None", ",", "\n", ")", "->", "List", "[", "Dict", "]", ":", "\n", "# pylint: disable=too-many-arguments, line-too-long, too-many-locals, too-many-branches, too-many-statements", "\n", "        ", "\"\"\"\n        Method to retrain the address parser model using a dataset with the same tags. We train using\n        `experiment <https://poutyne.org/experiment.html>`_ from `poutyne <https://poutyne.org/index.html>`_\n        framework. The experiment module allows us to save checkpoints (``ckpt``, in a pickle format) and a log.tsv\n        where the best epochs can be found (the best epoch is used for the test). The retrained model file name are\n        formatted as ``retrained_{model_type}_address_parser.ckpt``. For example, if you retrain a fasttext model,\n        the file name will be ``retrained_fasttext_address_parser.ckpt``. The retrained saved model included, in a\n        dictionary format, the model weights, the model type, if new ``prediction_tags`` were used, the new\n        prediction tags, and if new ``seq2seq_params`` were used, the new seq2seq parameters.\n\n        Args:\n            dataset_container (~deepparse.dataset_container.DatasetContainer): The dataset container of the data to use\n                such as any PyTorch Dataset (:class:`~torch.utils.data.Dataset`) user define class or one of our two\n                DatasetContainer (:class:`~deepparse.dataset_container.PickleDatasetContainer` or\n                :class:`~deepparse.dataset_container.CSVDatasetContainer`)\n            train_ratio (float): The ratio to use of the dataset for the training. The rest of the data is used for the\n                validation (e.g. a train ratio of 0.8 mean a 80-20 train-valid split) (by default, ``0.8``).\n            batch_size (int): The size of the batch (by default, ``32``).\n            epochs (int): The number of training epochs (by default, ``5``).\n            num_workers (int): The number of workers to use for the data loader (by default, ``1`` worker).\n            learning_rate (float): The learning rate (LR) to use for training (default 0.01).\n            callbacks (Union[list, None]): List of callbacks to use during training.\n                See Poutyne `callback <https://poutyne.org/callbacks.html#callback-class>`_ for more information. By\n                default, we set no callback.\n            seed (int): The seed to use (default 42).\n            logging_path (str): The logging path for the checkpoints. Poutyne will use the best one and reload the\n                state if any checkpoints are there. Thus, an error will be raised if you change the model type.\n                For example,  you retrain a FastText model and then retrain a BPEmb in the same logging path directory.\n                By default, the path is ``./checkpoints``.\n            disable_tensorboard (bool): To disable Poutyne automatic Tensorboard monitoring. By default, we disable them\n                (true).\n            prediction_tags (Union[dict, None]): A dictionary where the keys are the address components\n                (e.g. street name) and the values are the components indices (from 0 to N + 1) to use during retraining\n                of a model. The ``+ 1`` corresponds to the End Of Sequence (EOS) token that needs to be included in the\n                dictionary. We will use the length of this dictionary for the output size of the prediction layer.\n                We also save the dictionary to be used later on when you load the model. Default is ``None``, meaning\n                we use our pretrained model prediction tags.\n            seq2seq_params (Union[dict, None]): A dictionary of seq2seq parameters to modify the seq2seq architecture\n                to train. Note that if you change the seq2seq parameters, a new model will be trained from scratch.\n                Parameters that can be modified are:\n\n                    - The ``input_size`` of the encoder (i.e. the embeddings size). The default value is 300.\n                    - The size of the ``encoder_hidden_size`` of the encoder. The default value is 1024.\n                    - The number of ``encoder_num_layers`` of the encoder. The default value is 1.\n                    - The size of the ``decoder_hidden_size`` of the decoder. The default value is 1024.\n                    - The number of ``decoder_num_layers`` of the decoder. The default value is 1.\n\n                Default is ``None``, meaning we use the default seq2seq architecture.\n            layers_to_freeze (Union[str, None]): Name of the portion of the seq2seq to freeze layers. Thus, it reduces\n                the number of parameters to learn. Will be ignored if ``seq2seq_params`` is not ``None``. A seq2seq is\n                composed of three part, an encoder, decoder, and prediction layer. The encoder is the part that\n                encodes the address into a more dense representation. The decoder is the part that decodes a dense\n                address representation. The prediction layer is a fully-connected with an output size of the same\n                length as the prediction tags. Available freezing settings are:\n\n                    - ``None``: No layers are frozen.\n                    - ``\"encoder\"``: To freeze the encoder part of the seq2seq.\n                    - ``\"decoder\"``: To freeze the decoder part of the seq2seq.\n                    - ``\"prediction_layer\"``: To freeze the last layer that predicts a tag class .\n                    - ``\"seq2seq\"``: To freeze the encoder and decoder but **not** the prediction layer.\n\n                Default is ``None``, meaning we do not freeze any layers.\n            name_of_the_retrain_parser (Union[str, None]): Name to give to the retrained parser that will be use\n                when reloaded as the printed name, and to the saving file name (note that we will manually add\n                the extension ``\".ckpt\"`` to the name for the file name). By default, ``None``.\n\n                Default settings for the parser name will use the training settings for the name using the\n                following pattern:\n\n                    - the pretrained architecture (fasttext or bpemb and with or without attention mechanism),\n                    - if prediction_tags is not ``None``, the following tag: ``ModifiedPredictionTags``,\n                    - if seq2seq_params is not ``None``, the following tag: ``ModifiedSeq2SeqConfiguration``, and\n                    - if layers_to_freeze is not ``None``, the following tag: ``FreezedLayer{portion}``.\n\n\n        Return:\n            A list of dictionary with the best epoch stats (see `Experiment class\n            <https://poutyne.org/experiment.html#poutyne.Experiment.train>`_ for details). The pretrained is\n            saved using a default file name of using the name_of_the_retrain_parser. See the last note for\n            more details.\n\n        Note:\n            We recommend using a learning rate scheduler procedure during retraining to reduce the chance\n            of losing too much of our learned weights, thus increasing retraining time. We\n            personally use the following ``poutyne.StepLR(step_size=1, gamma=0.1)``.\n            Also, starting learning rate should be relatively low (i.e. 0.01 or lower).\n\n        Note:\n            We use SGD optimizer, NLL loss and accuracy as a metric, the data is shuffled, and we use teacher forcing\n            during training (with a prob of 0.5) as in the `article <https://arxiv.org/abs/2006.16152>`_.\n\n        Note:\n            Due to pymagnitude, we could not train using the Magnitude embeddings, meaning it's not possible to\n            train using the fasttext-light model. But, since we don't update the embeddings weights, one can retrain\n            using the fasttext model and later on use the weights with the fasttext-light.\n\n        Note:\n            When retraining a model, Poutyne will create checkpoints. After the training, we use the best checkpoint\n            in a directory as the model to load. Thus, if you train two different models in the same directory,\n            the second retrain will not work due to model differences.\n\n        Note:\n            The default settings for the file name to save the retrained model use following pattern\n            \"retrained_{model_type}_address_parser.ckpt\" if name_of_the_retrain_parser is set to\n            ``None``. Otherwise, the file name to save the retrained model will correspond to\n            ``name_of_the_retrain_parser`` plus the file extension ``\".ckpt\"``.\n\n        Examples:\n\n            .. code-block:: python\n\n                address_parser = AddressParser(device=0) #on gpu device 0\n                data_path = \"path_to_a_pickle_dataset.p\"\n\n                container = PickleDatasetContainer(data_path)\n\n                address_parser.retrain(container, 0.8, epochs=1, batch_size=128)\n\n            Using the freezing layers parameters to freeze layers during training\n\n            .. code-block:: python\n\n                address_parser = AddressParser(device=0)\n                data_path = \"path_to_a_csv_dataset.p\"\n\n                container = CSVDatasetContainer(data_path)\n                address_parser.retrain(container, 0.8, epochs=5, batch_size=128, layers_to_freeze=\"encoder\")\n\n            Using learning rate scheduler callback.\n\n            .. code-block:: python\n\n                import poutyne\n\n                address_parser = AddressParser(device=0)\n                data_path = \"path_to_a_csv_dataset.p\"\n\n                container = CSVDatasetContainer(data_path)\n\n                lr_scheduler = poutyne.StepLR(step_size=1, gamma=0.1) # reduce LR by a factor of 10 each epoch\n                address_parser.retrain(container, 0.8, epochs=5, batch_size=128, callbacks=[lr_scheduler])\n\n            Using your own prediction tags dictionary.\n\n            .. code-block:: python\n\n                address_components = {\"ATag\":0, \"AnotherTag\": 1, \"EOS\": 2}\n\n                address_parser = AddressParser(device=0) #on gpu device 0\n                data_path = \"path_to_a_pickle_dataset.p\"\n\n                container = PickleDatasetContainer(data_path)\n\n                address_parser.retrain(container, 0.8, epochs=1, batch_size=128, prediction_tags=address_components)\n\n            Using your own seq2seq parameters.\n\n            .. code-block:: python\n\n                seq2seq_params = {\"encoder_hidden_size\": 512, \"decoder_hidden_size\": 512}\n\n                address_parser = AddressParser(device=0) #on gpu device 0\n                data_path = \"path_to_a_pickle_dataset.p\"\n\n                container = PickleDatasetContainer(data_path)\n\n                address_parser.retrain(container, 0.8, epochs=1, batch_size=128, seq2seq_params=seq2seq_params)\n\n\n            Using your own seq2seq parameters and prediction tags dictionary.\n\n            .. code-block:: python\n\n                seq2seq_params = {\"encoder_hidden_size\": 512, \"decoder_hidden_size\": 512}\n                address_components = {\"ATag\":0, \"AnotherTag\": 1, \"EOS\": 2}\n\n                address_parser = AddressParser(device=0) #on gpu device 0\n                data_path = \"path_to_a_pickle_dataset.p\"\n\n                container = PickleDatasetContainer(data_path)\n\n                address_parser.retrain(container, 0.8, epochs=1, batch_size=128, seq2seq_params=seq2seq_params,\n                    prediction_tags=address_components)\n\n            Using a named retrain parser name.\n\n            .. code-block:: python\n\n                address_parser = AddressParser(device=0) #on gpu device 0\n                data_path = \"path_to_a_pickle_dataset.p\"\n\n                container = PickleDatasetContainer(data_path)\n\n                address_parser.retrain(container, 0.8, epochs=1, batch_size=128,\n                    name_of_the_retrain_parser=\"MyParserName\")\n\n        \"\"\"", "\n", "if", "name_of_the_retrain_parser", "is", "not", "None", ":", "\n", "            ", "if", "len", "(", "name_of_the_retrain_parser", ".", "split", "(", "\".\"", ")", ")", ">", "1", ":", "\n", "                ", "raise", "ValueError", "(", "\n", "\"The name_of_the_retrain_parser should NOT include a file extension or a dot-like\"", "\"filename style.\"", "\n", ")", "\n", "\n", "", "", "if", "\"fasttext-light\"", "in", "self", ".", "model_type", ":", "\n", "            ", "raise", "ValueError", "(", "\"It's not possible to retrain a fasttext-light due to pymagnitude problem.\"", ")", "\n", "\n", "", "if", "not", "dataset_container", ".", "is_a_train_container", "(", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"The dataset container is not a train container.\"", ")", "\n", "\n", "", "model_factory_dict", "=", "{", "\"prediction_layer_len\"", ":", "9", "}", "# We set the default output dim size", "\n", "\n", "if", "prediction_tags", "is", "not", "None", ":", "\n", "# Handle prediction tags", "\n", "            ", "if", "\"EOS\"", "not", "in", "prediction_tags", ".", "keys", "(", ")", ":", "\n", "                ", "raise", "ValueError", "(", "\"The prediction tags dictionary is missing the EOS tag.\"", ")", "\n", "\n", "", "fields", "=", "[", "field", "for", "field", "in", "prediction_tags", "if", "field", "!=", "\"EOS\"", "]", "\n", "formatted_parsed_address", ".", "FIELDS", "=", "fields", "\n", "\n", "self", ".", "tags_converter", "=", "TagsConverter", "(", "prediction_tags", ")", "\n", "\n", "if", "not", "self", ".", "model", ".", "same_output_dim", "(", "self", ".", "tags_converter", ".", "dim", ")", ":", "\n", "# Since we have change the output layer dim, we need to handle the prediction layer dim", "\n", "                ", "new_dim", "=", "self", ".", "tags_converter", ".", "dim", "\n", "if", "seq2seq_params", "is", "None", ":", "\n", "                    ", "self", ".", "model", ".", "handle_new_output_dim", "(", "new_dim", ")", "\n", "", "else", ":", "\n", "# We update the output dim size", "\n", "                    ", "model_factory_dict", ".", "update", "(", "{", "\"prediction_layer_len\"", ":", "new_dim", "}", ")", "\n", "\n", "", "", "", "if", "seq2seq_params", "is", "not", "None", ":", "\n", "# Handle seq2seq params", "\n", "# We set the flag to use the pretrained weights to false since we train new ones", "\n", "            ", "seq2seq_params", ".", "update", "(", "{", "\"pre_trained_weights\"", ":", "False", "}", ")", "\n", "\n", "model_factory_dict", ".", "update", "(", "{", "\"seq2seq_kwargs\"", ":", "seq2seq_params", "}", ")", "\n", "# We set verbose to false since model is reloaded", "\n", "self", ".", "_model_factory", "(", "verbose", "=", "False", ",", "path_to_retrained_model", "=", "None", ",", "**", "model_factory_dict", ")", "\n", "\n", "", "callbacks", "=", "[", "]", "if", "callbacks", "is", "None", "else", "callbacks", "\n", "train_generator", ",", "valid_generator", "=", "self", ".", "_create_training_data_generator", "(", "\n", "dataset_container", ",", "train_ratio", ",", "batch_size", ",", "num_workers", ",", "seed", "=", "seed", "\n", ")", "\n", "\n", "if", "layers_to_freeze", "is", "not", "None", "and", "seq2seq_params", "is", "None", ":", "\n", "# We ignore the layers to freeze if seq2seq_params is not None", "\n", "            ", "self", ".", "_freeze_model_params", "(", "layers_to_freeze", ")", "\n", "\n", "", "optimizer", "=", "SGD", "(", "self", ".", "model", ".", "parameters", "(", ")", ",", "learning_rate", ")", "\n", "\n", "exp", "=", "Experiment", "(", "\n", "logging_path", ",", "\n", "self", ".", "model", ",", "\n", "device", "=", "self", ".", "device", ",", "\n", "optimizer", "=", "optimizer", ",", "\n", "loss_function", "=", "nll_loss", ",", "\n", "batch_metrics", "=", "[", "accuracy", "]", ",", "\n", ")", "\n", "\n", "try", ":", "\n", "            ", "with_capturing_context", "=", "False", "\n", "if", "not", "valid_poutyne_version", "(", "min_major", "=", "1", ",", "min_minor", "=", "8", ")", ":", "\n", "                ", "print", "(", "\n", "\"You are using a older version of Poutyne that does not support properly error management.\"", "\n", "\" Due to that, we cannot show retrain progress. To fix that, update Poutyne to \"", "\n", "\"the newest version.\"", "\n", ")", "\n", "with_capturing_context", "=", "True", "\n", "", "train_res", "=", "self", ".", "_retrain", "(", "\n", "experiment", "=", "exp", ",", "\n", "train_generator", "=", "train_generator", ",", "\n", "valid_generator", "=", "valid_generator", ",", "\n", "epochs", "=", "epochs", ",", "\n", "seed", "=", "seed", ",", "\n", "callbacks", "=", "callbacks", ",", "\n", "disable_tensorboard", "=", "disable_tensorboard", ",", "\n", "capturing_context", "=", "with_capturing_context", ",", "\n", ")", "\n", "", "except", "RuntimeError", "as", "error", ":", "\n", "            ", "list_of_file_path", "=", "os", ".", "listdir", "(", "path", "=", "\".\"", ")", "\n", "if", "len", "(", "list_of_file_path", ")", ">", "0", ":", "\n", "                ", "if", "pretrained_parser_in_directory", "(", "logging_path", ")", ":", "\n", "# Mean we might already have checkpoint in the training directory", "\n", "                    ", "files_in_directory", "=", "get_files_in_directory", "(", "logging_path", ")", "\n", "retrained_address_parser_in_directory", "=", "get_address_parser_in_directory", "(", "files_in_directory", ")", "[", "\n", "0", "\n", "]", ".", "split", "(", "\"_\"", ")", "[", "1", "]", "\n", "if", "self", ".", "model_type", "!=", "retrained_address_parser_in_directory", ":", "\n", "                        ", "raise", "ValueError", "(", "\n", "f\"You are currently training a {self.model_type} in the directory \"", "\n", "f\"{logging_path} where a different retrained \"", "\n", "f\"{retrained_address_parser_in_directory} is currently his.\"", "\n", "f\" Thus, the loading of the model is failing. Change directory to retrain the\"", "\n", "f\" {self.model_type}.\"", "\n", ")", "from", "error", "\n", "", "if", "self", ".", "model_type", "==", "retrained_address_parser_in_directory", ":", "\n", "                        ", "raise", "ValueError", "(", "\n", "f\"You are currently training a different {self.model_type} version from\"", "\n", "f\" the one in the {logging_path}. Verify version.\"", "\n", ")", "from", "error", "\n", "", "", "", "else", ":", "\n", "                ", "raise", "RuntimeError", "(", "error", ".", "args", "[", "0", "]", ")", "from", "error", "\n", "", "", "else", ":", "\n", "            ", "file_name", "=", "(", "\n", "name_of_the_retrain_parser", "+", "\".ckpt\"", "\n", "if", "name_of_the_retrain_parser", "is", "not", "None", "\n", "else", "f\"retrained_{self.model_type}_address_parser.ckpt\"", "\n", ")", "\n", "file_path", "=", "os", ".", "path", ".", "join", "(", "logging_path", ",", "file_name", ")", "\n", "torch_save", "=", "{", "\n", "\"address_tagger_model\"", ":", "exp", ".", "model", ".", "network", ".", "state_dict", "(", ")", ",", "\n", "\"model_type\"", ":", "self", ".", "model_type", ",", "\n", "}", "\n", "\n", "if", "seq2seq_params", "is", "not", "None", ":", "\n", "# Means we have changed the seq2seq params", "\n", "                ", "torch_save", ".", "update", "(", "{", "\"seq2seq_params\"", ":", "seq2seq_params", "}", ")", "\n", "", "if", "prediction_tags", "is", "not", "None", ":", "\n", "#  Means we have changed the predictions tags", "\n", "                ", "torch_save", ".", "update", "(", "{", "\"prediction_tags\"", ":", "prediction_tags", "}", ")", "\n", "\n", "", "torch_save", ".", "update", "(", "\n", "{", "\n", "\"named_parser\"", ":", "name_of_the_retrain_parser", "\n", "if", "name_of_the_retrain_parser", "is", "not", "None", "\n", "else", "self", ".", "_formatted_named_parser_name", "(", "prediction_tags", ",", "seq2seq_params", ",", "layers_to_freeze", ")", "\n", "}", "\n", ")", "\n", "\n", "torch", ".", "save", "(", "torch_save", ",", "file_path", ")", "\n", "return", "train_res", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.address_parser.AddressParser.test": [[709, 804], ["address_parser.AddressParser._set_data_transformer", "torch.utils.data.DataLoader", "poutyne.framework.Experiment", "poutyne.framework.Experiment.test", "ValueError", "test_dataset_container.is_a_train_container", "ValueError"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.address_parser.AddressParser._set_data_transformer", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.address_parser.AddressParser.test", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.dataset_container.dataset_container.DatasetContainer.is_a_train_container"], ["", "", "def", "test", "(", "\n", "self", ",", "\n", "test_dataset_container", ":", "DatasetContainer", ",", "\n", "batch_size", ":", "int", "=", "32", ",", "\n", "num_workers", ":", "int", "=", "1", ",", "\n", "callbacks", ":", "Union", "[", "List", ",", "None", "]", "=", "None", ",", "\n", "seed", ":", "int", "=", "42", ",", "\n", ")", "->", "Dict", ":", "\n", "# pylint: disable=too-many-arguments, too-many-locals", "\n", "        ", "\"\"\"\n        Method to test a retrained or a pretrained model using a dataset with the default tags. If you test a\n        retrained model with different prediction tags, we will use those tags.\n\n        Args:\n            test_dataset_container (~deepparse.dataset_container.DatasetContainer):\n                The test dataset container of the data to use.\n            batch_size (int): The size of the batch (by default, ``32``).\n            num_workers (int): Number of workers to use for the data loader (by default, ``1`` worker).\n            callbacks (Union[list, None]): List of callbacks to use during training.\n                See Poutyne `callback <https://poutyne.org/callbacks.html#callback-class>`_ for more information.\n                By default, we set no callback.\n            seed (int): Seed to use (by default, ``42``).\n\n        Return:\n            A dictionary with the stats (see `Experiment class\n            <https://poutyne.org/experiment.html#poutyne.Experiment.train>`_ for details).\n\n        Note:\n            We use NLL loss and accuracy as in the `article <https://arxiv.org/abs/2006.16152>`_.\n\n        Examples:\n\n            .. code-block:: python\n\n                address_parser = AddressParser(device=0) #on gpu device 0\n                data_path = \"path_to_a_pickle_test_dataset.p\"\n\n                test_container = PickleDatasetContainer(data_path, is_training_container=False)\n\n                address_parser.test(test_container) # We test the model on the data\n\n            You can also test your fine-tuned model\n\n            .. code-block:: python\n\n                address_components = {\"ATag\":0, \"AnotherTag\": 1, \"EOS\": 2}\n\n                address_parser = AddressParser(device=0) #on gpu device 0\n\n                # Train phase\n                data_path = \"path_to_a_pickle_train_dataset.p\"\n\n                train_container = PickleDatasetContainer(data_path)\n\n                address_parser.retrain(container, 0.8, epochs=1, batch_size=128, prediction_tags=address_components)\n\n                # Test phase\n                data_path = \"path_to_a_pickle_test_dataset.p\"\n\n                test_container = PickleDatasetContainer(data_path, is_training_container=False)\n\n                address_parser.test(test_container) # Test the retrained model\n\n        \"\"\"", "\n", "if", "\"fasttext-light\"", "in", "self", ".", "model_type", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"It's not possible to test a fasttext-light due to pymagnitude problem. See Retrain method\"", "\n", "\"doc for more details.\"", "\n", ")", "\n", "\n", "", "if", "not", "test_dataset_container", ".", "is_a_train_container", "(", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"The dataset container is not a train container.\"", ")", "\n", "\n", "", "callbacks", "=", "[", "]", "if", "callbacks", "is", "None", "else", "callbacks", "\n", "data_transform", "=", "self", ".", "_set_data_transformer", "(", ")", "\n", "\n", "test_generator", "=", "DataLoader", "(", "\n", "test_dataset_container", ",", "\n", "collate_fn", "=", "data_transform", ".", "output_transform", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "num_workers", "=", "num_workers", ",", "\n", ")", "\n", "\n", "exp", "=", "Experiment", "(", "\n", "\"./checkpoint\"", ",", "\n", "self", ".", "model", ",", "\n", "device", "=", "self", ".", "device", ",", "\n", "loss_function", "=", "nll_loss", ",", "\n", "batch_metrics", "=", "[", "accuracy", "]", ",", "\n", "logging", "=", "False", ",", "\n", ")", "# We set logging to false since we don't need it", "\n", "\n", "test_res", "=", "exp", ".", "test", "(", "test_generator", ",", "seed", "=", "seed", ",", "callbacks", "=", "callbacks", ",", "verbose", "=", "self", ".", "verbose", ")", "\n", "\n", "return", "test_res", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.address_parser.AddressParser._fill_tagged_addresses_components": [[805, 836], ["zip", "zip", "tagged_addresses_components.append", "len", "clean_address.split", "address_parser.AddressParser.tags_converter", "tagged_address_components.append", "formatted_parsed_address.FormattedParsedAddress", "round"], "methods", ["None"], ["", "def", "_fill_tagged_addresses_components", "(", "\n", "self", ",", "\n", "tags_predictions", ":", "List", ",", "\n", "tags_predictions_prob", ":", "List", ",", "\n", "addresses_to_parse", ":", "List", "[", "str", "]", ",", "\n", "clean_addresses", ":", "List", "[", "str", "]", ",", "\n", "with_prob", ":", "bool", ",", "\n", ")", "->", "Union", "[", "FormattedParsedAddress", ",", "List", "[", "FormattedParsedAddress", "]", "]", ":", "\n", "# pylint: disable=too-many-arguments, too-many-locals", "\n", "        ", "\"\"\"\n        Method to fill the mapping for every address between a address components and is associated predicted tag (or\n        tag and prob).\n        \"\"\"", "\n", "tagged_addresses_components", "=", "[", "]", "\n", "for", "(", "\n", "address_to_parse", ",", "\n", "clean_address", ",", "\n", "tags_prediction", ",", "\n", "tags_prediction_prob", ",", "\n", ")", "in", "zip", "(", "addresses_to_parse", ",", "clean_addresses", ",", "tags_predictions", ",", "tags_predictions_prob", ")", ":", "\n", "            ", "tagged_address_components", "=", "[", "]", "\n", "for", "word", ",", "predicted_idx_tag", ",", "tag_proba", "in", "zip", "(", "clean_address", ".", "split", "(", ")", ",", "tags_prediction", ",", "tags_prediction_prob", ")", ":", "\n", "                ", "tag", "=", "self", ".", "tags_converter", "(", "predicted_idx_tag", ")", "\n", "if", "with_prob", ":", "\n", "                    ", "tag", "=", "(", "tag", ",", "round", "(", "tag_proba", ",", "self", ".", "rounding", ")", ")", "\n", "", "tagged_address_components", ".", "append", "(", "(", "word", ",", "tag", ")", ")", "\n", "", "tagged_addresses_components", ".", "append", "(", "FormattedParsedAddress", "(", "{", "address_to_parse", ":", "tagged_address_components", "}", ")", ")", "\n", "\n", "", "if", "len", "(", "tagged_addresses_components", ")", "==", "1", ":", "\n", "            ", "return", "tagged_addresses_components", "[", "0", "]", "\n", "", "return", "tagged_addresses_components", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.address_parser.AddressParser._process_device": [[837, 864], ["torch.device", "torch.cuda.is_available", "isinstance", "warnings.warn", "torch.device", "isinstance", "re.fullmatch", "isinstance", "device.lower", "torch.device", "ValueError", "ValueError", "torch.device", "ValueError"], "methods", ["None"], ["", "def", "_process_device", "(", "self", ",", "device", ":", "Union", "[", "int", ",", "str", ",", "torch", ".", "device", "]", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        Function to process the device depending on the argument type.\n\n        Set the device as a torch device object.\n        \"\"\"", "\n", "if", "device", "==", "\"cpu\"", ":", "\n", "            ", "self", ".", "device", "=", "torch", ".", "device", "(", "\"cpu\"", ")", "\n", "", "else", ":", "\n", "            ", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "device", ",", "torch", ".", "device", ")", ":", "\n", "                    ", "self", ".", "device", "=", "device", "\n", "", "elif", "isinstance", "(", "device", ",", "str", ")", ":", "\n", "                    ", "if", "re", ".", "fullmatch", "(", "r\"cuda:\\d+\"", ",", "device", ".", "lower", "(", ")", ")", ":", "\n", "                        ", "self", ".", "device", "=", "torch", ".", "device", "(", "device", ")", "\n", "", "else", ":", "\n", "                        ", "raise", "ValueError", "(", "\"String value should follow the pattern 'cuda:[int]'.\"", ")", "\n", "", "", "elif", "isinstance", "(", "device", ",", "int", ")", ":", "\n", "                    ", "if", "device", ">=", "0", ":", "\n", "                        ", "self", ".", "device", "=", "torch", ".", "device", "(", "f\"cuda:{device}\"", ")", "\n", "", "else", ":", "\n", "                        ", "raise", "ValueError", "(", "\"Device should not be a negative number.\"", ")", "\n", "", "", "else", ":", "\n", "                    ", "raise", "ValueError", "(", "\"Device should be a string, an int or a torch device.\"", ")", "\n", "", "", "else", ":", "\n", "                ", "warnings", ".", "warn", "(", "\"No CUDA device detected, device will be set to 'CPU'.\"", ")", "\n", "self", ".", "device", "=", "torch", ".", "device", "(", "\"cpu\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.address_parser.AddressParser._set_data_transformer": [[865, 871], ["vectorizer.TrainVectorizer", "converter.DataTransform"], "methods", ["None"], ["", "", "", "def", "_set_data_transformer", "(", "self", ")", "->", "DataTransform", ":", "\n", "        ", "train_vectorizer", "=", "TrainVectorizer", "(", "self", ".", "vectorizer", ",", "self", ".", "tags_converter", ")", "# Vectorize to provide also the target", "\n", "data_transform", "=", "DataTransform", "(", "\n", "train_vectorizer", ",", "self", ".", "model_type", "\n", ")", "# Use for transforming the data prior to training", "\n", "return", "data_transform", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.address_parser.AddressParser._create_training_data_generator": [[872, 905], ["address_parser.AddressParser._set_data_transformer", "tools.indices_splitting", "torch.utils.data.Subset", "torch.utils.data.DataLoader", "torch.utils.data.Subset", "torch.utils.data.DataLoader", "len"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.address_parser.AddressParser._set_data_transformer", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.tools.indices_splitting"], ["", "def", "_create_training_data_generator", "(", "\n", "self", ",", "\n", "dataset_container", ":", "DatasetContainer", ",", "\n", "train_ratio", ":", "float", ",", "\n", "batch_size", ":", "int", ",", "\n", "num_workers", ":", "int", ",", "\n", "seed", ":", "int", ",", "\n", ")", "->", "Tuple", ":", "\n", "# pylint: disable=too-many-arguments", "\n", "        ", "data_transform", "=", "self", ".", "_set_data_transformer", "(", ")", "\n", "\n", "train_indices", ",", "valid_indices", "=", "indices_splitting", "(", "\n", "num_data", "=", "len", "(", "dataset_container", ")", ",", "train_ratio", "=", "train_ratio", ",", "seed", "=", "seed", "\n", ")", "\n", "\n", "train_dataset", "=", "Subset", "(", "dataset_container", ",", "train_indices", ")", "\n", "train_generator", "=", "DataLoader", "(", "\n", "train_dataset", ",", "\n", "collate_fn", "=", "data_transform", ".", "teacher_forcing_transform", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "num_workers", "=", "num_workers", ",", "\n", "shuffle", "=", "True", ",", "\n", ")", "\n", "\n", "valid_dataset", "=", "Subset", "(", "dataset_container", ",", "valid_indices", ")", "\n", "valid_generator", "=", "DataLoader", "(", "\n", "valid_dataset", ",", "\n", "collate_fn", "=", "data_transform", ".", "output_transform", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "num_workers", "=", "num_workers", ",", "\n", ")", "\n", "\n", "return", "train_generator", ",", "valid_generator", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.address_parser.AddressParser._model_factory": [[906, 968], ["network.fasttext_seq2seq.FastTextSeq2SeqModel", "fasttext_tools.download_fasttext_magnitude_embeddings", "embeddings_models.MagnitudeEmbeddingsModel", "vectorizer.magnitude_vectorizer.MagnitudeVectorizer", "fasttext_tools.download_fasttext_embeddings", "embeddings_models.FastTextEmbeddingsModel", "vectorizer.FastTextVectorizer", "embeddings_models.BPEmbEmbeddingsModel", "vectorizer.BPEmbVectorizer", "network.bpemb_seq2seq.BPEmbSeq2SeqModel", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.deepparse.fasttext_tools.download_fasttext_magnitude_embeddings", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.deepparse.fasttext_tools.download_fasttext_embeddings"], ["", "def", "_model_factory", "(", "\n", "self", ",", "\n", "verbose", ":", "bool", ",", "\n", "path_to_retrained_model", ":", "Union", "[", "str", ",", "None", "]", "=", "None", ",", "\n", "prediction_layer_len", ":", "int", "=", "9", ",", "\n", "attention_mechanism", "=", "False", ",", "\n", "seq2seq_kwargs", ":", "Union", "[", "dict", ",", "None", "]", "=", "None", ",", "\n", "cache_dir", ":", "Union", "[", "dict", ",", "None", "]", "=", "None", ",", "\n", ")", "->", "None", ":", "\n", "# pylint: disable=too-many-arguments", "\n", "        ", "\"\"\"\n        Model factory to create the vectorizer, the data converter and the pretrained model\n        \"\"\"", "\n", "# We switch the case where seq2seq_kwargs is None to an empty dict", "\n", "seq2seq_kwargs", "=", "seq2seq_kwargs", "if", "seq2seq_kwargs", "is", "not", "None", "else", "{", "}", "\n", "\n", "if", "cache_dir", "is", "None", ":", "\n", "# Set to default cache_path value", "\n", "            ", "cache_dir", "=", "CACHE_PATH", "\n", "\n", "", "if", "\"fasttext\"", "in", "self", ".", "model_type", ":", "\n", "            ", "if", "\"fasttext-light\"", "in", "self", ".", "model_type", ":", "\n", "                ", "file_name", "=", "download_fasttext_magnitude_embeddings", "(", "cache_dir", "=", "cache_dir", ",", "verbose", "=", "verbose", ")", "\n", "\n", "embeddings_model", "=", "MagnitudeEmbeddingsModel", "(", "file_name", ",", "verbose", "=", "verbose", ")", "\n", "self", ".", "vectorizer", "=", "MagnitudeVectorizer", "(", "embeddings_model", "=", "embeddings_model", ")", "\n", "", "else", ":", "\n", "                ", "file_name", "=", "download_fasttext_embeddings", "(", "cache_dir", "=", "cache_dir", ",", "verbose", "=", "verbose", ")", "\n", "\n", "embeddings_model", "=", "FastTextEmbeddingsModel", "(", "file_name", ",", "verbose", "=", "verbose", ")", "\n", "self", ".", "vectorizer", "=", "FastTextVectorizer", "(", "embeddings_model", "=", "embeddings_model", ")", "\n", "\n", "", "self", ".", "data_converter", "=", "fasttext_data_padding", "\n", "\n", "self", ".", "model", "=", "FastTextSeq2SeqModel", "(", "\n", "cache_dir", "=", "cache_dir", ",", "\n", "device", "=", "self", ".", "device", ",", "\n", "output_size", "=", "prediction_layer_len", ",", "\n", "verbose", "=", "verbose", ",", "\n", "path_to_retrained_model", "=", "path_to_retrained_model", ",", "\n", "attention_mechanism", "=", "attention_mechanism", ",", "\n", "**", "seq2seq_kwargs", ",", "\n", ")", "\n", "\n", "", "elif", "\"bpemb\"", "in", "self", ".", "model_type", ":", "\n", "            ", "embeddings_model", "=", "BPEmbEmbeddingsModel", "(", "verbose", "=", "verbose", ",", "cache_dir", "=", "cache_dir", ")", "\n", "self", ".", "vectorizer", "=", "BPEmbVectorizer", "(", "embeddings_model", "=", "embeddings_model", ")", "\n", "\n", "self", ".", "data_converter", "=", "bpemb_data_padding", "\n", "\n", "self", ".", "model", "=", "BPEmbSeq2SeqModel", "(", "\n", "cache_dir", "=", "cache_dir", ",", "\n", "device", "=", "self", ".", "device", ",", "\n", "output_size", "=", "prediction_layer_len", ",", "\n", "verbose", "=", "verbose", ",", "\n", "path_to_retrained_model", "=", "path_to_retrained_model", ",", "\n", "attention_mechanism", "=", "attention_mechanism", ",", "\n", "**", "seq2seq_kwargs", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\n", "f\"There is no {self.model_type} network implemented. Value should be: \"", "\n", "f\"fasttext, bpemb, lightest (fasttext-light), fastest (fasttext) \"", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.address_parser.AddressParser._predict_pipeline": [[972, 977], ["address_parser.AddressParser.data_converter", "address_parser.AddressParser.vectorizer"], "methods", ["None"], ["", "", "def", "_predict_pipeline", "(", "self", ",", "data", ":", "List", ")", "->", "Tuple", ":", "\n", "        ", "\"\"\"\n        Pipeline to process data in a data loader for prediction.\n        \"\"\"", "\n", "return", "self", ".", "data_converter", "(", "self", ".", "vectorizer", "(", "data", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.address_parser.AddressParser.get_formatted_model_name": [[978, 984], ["None"], "methods", ["None"], ["", "def", "get_formatted_model_name", "(", "self", ")", "->", "str", ":", "\n", "        ", "\"\"\"\n        Return the model type formatted name. For example, if the model type is ``\"fasttext\"`` the formatted name is\n        ``\"FastText\"``.\n        \"\"\"", "\n", "return", "self", ".", "_model_type_formatted", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.address_parser.AddressParser._retrain": [[985, 1010], ["experiment.train", "capturing.Capturing", "contextlib.nullcontext"], "methods", ["None"], ["", "def", "_retrain", "(", "\n", "self", ",", "\n", "experiment", ":", "Experiment", ",", "\n", "train_generator", ":", "DatasetContainer", ",", "\n", "valid_generator", ":", "DatasetContainer", ",", "\n", "epochs", ":", "int", ",", "\n", "seed", ":", "int", ",", "\n", "callbacks", ":", "List", ",", "\n", "disable_tensorboard", ":", "bool", ",", "\n", "capturing_context", ":", "bool", ",", "\n", ")", "->", "List", "[", "Dict", "]", ":", "\n", "# pylint: disable=too-many-arguments", "\n", "# If Poutyne 1.7 and before, we capture poutyne print since it print some exception.", "\n", "# Otherwise, we use a null context manager.", "\n", "        ", "with", "Capturing", "(", ")", "if", "capturing_context", "else", "contextlib", ".", "nullcontext", "(", ")", ":", "\n", "            ", "train_res", "=", "experiment", ".", "train", "(", "\n", "train_generator", ",", "\n", "valid_generator", "=", "valid_generator", ",", "\n", "epochs", "=", "epochs", ",", "\n", "seed", "=", "seed", ",", "\n", "callbacks", "=", "callbacks", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", "disable_tensorboard", "=", "disable_tensorboard", ",", "\n", ")", "\n", "", "return", "train_res", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.address_parser.AddressParser._freeze_model_params": [[1011, 1046], ["layers_to_freeze.lower.lower.lower", "address_parser.AddressParser.model.named_parameters", "ValueError", "any", "layers_to_freeze.lower.lower.append", "layers_to_freeze.lower.lower.append"], "methods", ["None"], ["", "def", "_freeze_model_params", "(", "self", ",", "layers_to_freeze", ":", "Union", "[", "str", "]", ")", "->", "None", ":", "\n", "        ", "layers_to_freeze", "=", "layers_to_freeze", ".", "lower", "(", ")", "\n", "if", "layers_to_freeze", "not", "in", "[", "\"encoder\"", ",", "\"decoder\"", ",", "\"prediction_layer\"", ",", "\"seq2seq\"", "]", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "f\"{layers_to_freeze} freezing setting is not supported. Value can be 'encoder', 'decoder', \"", "\n", "f\"'prediction_layer' and 'seq2seq'. See doc for more details.\"", "\n", ")", "\n", "", "layer_exclude", "=", "None", "\n", "if", "layers_to_freeze", "==", "\"decoder\"", ":", "\n", "            ", "layers_to_freeze", "=", "[", "layers_to_freeze", "+", "\".\"", "]", "\n", "if", "\"bpemb\"", "in", "self", ".", "model_type", ":", "\n", "                ", "layers_to_freeze", ".", "append", "(", "\"embedding_network.\"", ")", "\n", "", "layer_exclude", "=", "\"decoder.linear.\"", "\n", "", "elif", "layers_to_freeze", "==", "\"prediction_layer\"", ":", "\n", "            ", "layers_to_freeze", "=", "[", "\"decoder.linear.\"", "]", "\n", "", "elif", "\"seq2seq\"", "in", "layers_to_freeze", ":", "\n", "            ", "layers_to_freeze", "=", "[", "\"encoder.\"", ",", "\"decoder.\"", "]", "\n", "if", "\"bpemb\"", "in", "self", ".", "model_type", ":", "\n", "                ", "layers_to_freeze", ".", "append", "(", "\"embedding_network.\"", ")", "\n", "", "layer_exclude", "=", "\"decoder.linear.\"", "\n", "", "else", ":", "\n", "            ", "layers_to_freeze", "=", "[", "layers_to_freeze", "+", "\".\"", "]", "\n", "\n", "", "for", "layer_name", ",", "param", "in", "self", ".", "model", ".", "named_parameters", "(", ")", ":", "\n", "# If the layer name is in the layer list to freeze, we set the weights update to false", "\n", "# except if the layer name is a layers exclude. Namely, the decoder.linear when we freeze the decoder,", "\n", "# but we expect the final layer to be unfrozen.", "\n", "# The layers_exclude is not None was added since the base case: \"\" not in layer_name is equal to False.", "\n", "            ", "if", "any", "(", "layer_to_freeze", "for", "layer_to_freeze", "in", "layers_to_freeze", "if", "layer_to_freeze", "in", "layer_name", ")", ":", "\n", "                ", "if", "layer_exclude", "is", "None", ":", "\n", "# Meaning we don't have a layer to exclude from the layer to freeze.", "\n", "                    ", "param", ".", "requires_grad", "=", "False", "\n", "", "elif", "layer_exclude", "not", "in", "layer_name", ":", "\n", "# Meaning the layer is not in the layer to exclude from the layer to freeze.", "\n", "                    ", "param", ".", "requires_grad", "=", "False", "\n", "# The implicit else mean the layer_name is in a layers to exclude BUT it is a layer to exclude from", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.address_parser.AddressParser._formatted_named_parser_name": [[1050, 1056], ["layers_to_freeze.capitalize"], "methods", ["None"], ["", "", "", "", "def", "_formatted_named_parser_name", "(", "self", ",", "prediction_tags", ":", "Dict", ",", "seq2seq_params", ":", "Dict", ",", "layers_to_freeze", ":", "str", ")", "->", "str", ":", "\n", "        ", "prediction_tags_str", "=", "\"ModifiedPredictionTags\"", "if", "prediction_tags", "is", "not", "None", "else", "\"\"", "\n", "seq2seq_params_str", "=", "\"ModifiedSeq2SeqConfiguration\"", "if", "seq2seq_params", "is", "not", "None", "else", "\"\"", "\n", "layers_to_freeze_str", "=", "f\"FreezedLayer{layers_to_freeze.capitalize()}\"", "if", "layers_to_freeze", "is", "not", "None", "else", "\"\"", "\n", "parser_name", "=", "self", ".", "_model_type_formatted", "+", "prediction_tags_str", "+", "seq2seq_params_str", "+", "layers_to_freeze_str", "\n", "return", "parser_name", "\n", "", "", ""]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.base.AddressParserPredictTestCase.setUpClass": [[17, 35], ["None"], "methods", ["None"], ["    ", "@", "classmethod", "\n", "def", "setUpClass", "(", "cls", ")", ":", "\n", "        ", "cls", ".", "a_best_model_type", "=", "\"best\"", "\n", "cls", ".", "a_bpemb_model_type", "=", "\"bpemb\"", "\n", "cls", ".", "a_fastest_model_type", "=", "\"fastest\"", "\n", "cls", ".", "a_fasttext_model_type", "=", "\"fasttext\"", "\n", "cls", ".", "a_fasttext_lightest_model_type", "=", "\"lightest\"", "\n", "cls", ".", "a_fasttext_light_model_type", "=", "\"fasttext-light\"", "\n", "\n", "# A address parsing example", "\n", "cls", ".", "a_complete_address", "=", "\"15 major st london ontario n5z1e1\"", "\n", "cls", ".", "a_municipality", "=", "\"london\"", "\n", "cls", ".", "a_postal_code", "=", "\"n5z1e1\"", "\n", "cls", ".", "a_province", "=", "\"ontario\"", "\n", "cls", ".", "a_street_name", "=", "\"major st\"", "\n", "cls", ".", "a_street_number", "=", "\"15\"", "\n", "\n", "cls", ".", "a_logging_path", "=", "\"data\"", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.base.AddressParserPredictTestCase.setUp": [[36, 142], ["torch.tensor", "os.makedirs", "os.makedirs", "os.path.join"], "methods", ["None"], ["", "def", "setUp", "(", "self", ")", ":", "\n", "# a prediction vector with real values", "\n", "        ", "self", ".", "a_prediction_vector_for_a_complete_address", "=", "tensor", "(", "\n", "[", "\n", "[", "\n", "[", "\n", "-", "6.7080e-04", ",", "\n", "-", "7.3572e00", ",", "\n", "-", "1.4086e01", ",", "\n", "-", "1.1092e01", ",", "\n", "-", "2.1749e01", ",", "\n", "-", "1.1060e01", ",", "\n", "-", "1.4627e01", ",", "\n", "-", "1.4654e01", ",", "\n", "-", "2.8624e01", ",", "\n", "]", "\n", "]", ",", "\n", "[", "\n", "[", "\n", "-", "1.5119e01", ",", "\n", "-", "1.7881e-06", ",", "\n", "-", "1.7613e01", ",", "\n", "-", "1.3365e01", ",", "\n", "-", "2.9415e01", ",", "\n", "-", "2.3198e01", ",", "\n", "-", "2.2065e01", ",", "\n", "-", "2.2009e01", ",", "\n", "-", "4.0588e01", ",", "\n", "]", "\n", "]", ",", "\n", "[", "\n", "[", "\n", "-", "1.5922e01", ",", "\n", "-", "1.1903e-03", ",", "\n", "-", "1.3102e01", ",", "\n", "-", "6.7359e00", ",", "\n", "-", "2.4669e01", ",", "\n", "-", "1.7328e01", ",", "\n", "-", "1.9970e01", ",", "\n", "-", "1.9923e01", ",", "\n", "-", "4.0041e01", ",", "\n", "]", "\n", "]", ",", "\n", "[", "\n", "[", "\n", "-", "1.9461e01", ",", "\n", "-", "1.3808e01", ",", "\n", "-", "1.5707e01", ",", "\n", "-", "2.0146e-05", ",", "\n", "-", "1.0881e01", ",", "\n", "-", "1.5345e01", ",", "\n", "-", "2.1945e01", ",", "\n", "-", "2.2081e01", ",", "\n", "-", "4.6854e01", ",", "\n", "]", "\n", "]", ",", "\n", "[", "\n", "[", "\n", "-", "1.7136e01", ",", "\n", "-", "1.8420e01", ",", "\n", "-", "1.5489e01", ",", "\n", "-", "1.5802e01", ",", "\n", "-", "1.2159e-05", ",", "\n", "-", "1.1350e01", ",", "\n", "-", "2.1703e01", ",", "\n", "-", "2.1866e01", ",", "\n", "-", "4.2224e01", ",", "\n", "]", "\n", "]", ",", "\n", "[", "\n", "[", "\n", "-", "1.4736e01", ",", "\n", "-", "1.7999e01", ",", "\n", "-", "1.5483e01", ",", "\n", "-", "2.1751e01", ",", "\n", "-", "1.3005e01", ",", "\n", "-", "3.4571e-06", ",", "\n", "-", "1.7897e01", ",", "\n", "-", "1.7965e01", ",", "\n", "-", "1.4235e01", ",", "\n", "]", "\n", "]", ",", "\n", "[", "\n", "[", "\n", "-", "1.7509e01", ",", "\n", "-", "1.8191e01", ",", "\n", "-", "1.7853e01", ",", "\n", "-", "2.6309e01", ",", "\n", "-", "1.7179e01", ",", "\n", "-", "1.0518e01", ",", "\n", "-", "1.9438e01", ",", "\n", "-", "1.9542e01", ",", "\n", "-", "2.7060e-05", ",", "\n", "]", "\n", "]", ",", "\n", "]", "\n", ")", "\n", "self", ".", "attention_mechanism_weights", "=", "self", ".", "a_prediction_vector_for_a_complete_address", "\n", "\n", "# to create the dirs for dumping the prediction tags since we mock Poutyne that usually will do it", "\n", "os", ".", "makedirs", "(", "self", ".", "a_logging_path", ",", "exist_ok", "=", "True", ")", "\n", "\n", "# to create the dir for the model and dump the prediction_tags.p if needed", "\n", "self", ".", "a_model_root_path", "=", "\"model\"", "\n", "os", ".", "makedirs", "(", "self", ".", "a_model_root_path", ",", "exist_ok", "=", "True", ")", "\n", "self", ".", "a_model_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "a_model_root_path", ",", "\"model.p\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.base.AddressParserPredictTestCase.mock_predictions_vectors": [[143, 147], ["model.__call__"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.timer.timer.Timer.__call__"], ["", "def", "mock_predictions_vectors", "(", "self", ",", "model", ")", ":", "\n", "        ", "returned_prediction_vectors", "=", "self", ".", "a_prediction_vector_for_a_complete_address", "\n", "returned_value", "=", "returned_prediction_vectors", "\n", "model", ".", "__call__", "(", ")", ".", "return_value", "=", "returned_value", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.base.AddressParserPredictTestCase.mock_multiple_predictions_vectors": [[148, 158], ["torch.cat", "model.__call__"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.timer.timer.Timer.__call__"], ["", "def", "mock_multiple_predictions_vectors", "(", "self", ",", "model", ")", ":", "\n", "        ", "returned_prediction_vectors", "=", "torch", ".", "cat", "(", "\n", "(", "\n", "self", ".", "a_prediction_vector_for_a_complete_address", ",", "\n", "self", ".", "a_prediction_vector_for_a_complete_address", ",", "\n", ")", ",", "\n", "1", ",", "\n", ")", "\n", "returned_value", "=", "returned_prediction_vectors", "\n", "model", ".", "__call__", "(", ")", ".", "return_value", "=", "returned_value", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.base.AddressParserPredictTestCase.setup_retrain_new_tags_model": [[159, 166], ["torch.save"], "methods", ["None"], ["", "def", "setup_retrain_new_tags_model", "(", "self", ",", "address_components", ",", "model_type", ")", ":", "\n", "        ", "data_dict", "=", "{", "\n", "\"address_tagger_model\"", ":", "{", "\"a_key\"", ":", "1", ",", "\"another_key\"", ":", "2", "}", ",", "\n", "\"prediction_tags\"", ":", "address_components", ",", "\n", "\"model_type\"", ":", "model_type", ",", "\n", "}", "\n", "torch", ".", "save", "(", "data_dict", ",", "self", ".", "a_model_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.base.AddressParserPredictTestCase.setup_retrain_new_params_model": [[167, 174], ["torch.save"], "methods", ["None"], ["", "def", "setup_retrain_new_params_model", "(", "self", ",", "seq2seq_params", ",", "model_type", ")", ":", "\n", "        ", "data_dict", "=", "{", "\n", "\"address_tagger_model\"", ":", "{", "\"a_key\"", ":", "1", ",", "\"another_key\"", ":", "2", "}", ",", "\n", "\"seq2seq_params\"", ":", "seq2seq_params", ",", "\n", "\"model_type\"", ":", "model_type", ",", "\n", "}", "\n", "torch", ".", "save", "(", "data_dict", ",", "self", ".", "a_model_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.base.FormattedParsedAddressBase.reset_fields": [[177, 191], ["base.FormattedParsedAddressBase.set_fields"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.base.FormattedParsedAddressBase.set_fields"], ["    ", "def", "reset_fields", "(", "self", ")", ":", "\n", "# We reset the FIELDS of the address to default values since we change it in some tests", "\n", "        ", "default_value", "=", "[", "\n", "\"StreetNumber\"", ",", "\n", "\"Unit\"", ",", "\n", "\"StreetName\"", ",", "\n", "\"Orientation\"", ",", "\n", "\"Municipality\"", ",", "\n", "\"Province\"", ",", "\n", "\"PostalCode\"", ",", "\n", "\"GeneralDelivery\"", ",", "\n", "\"EOS\"", ",", "\n", "]", "\n", "self", ".", "set_fields", "(", "default_value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.base.FormattedParsedAddressBase.set_fields": [[192, 195], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "set_fields", "(", "fields_value", ")", ":", "\n", "        ", "formatted_parsed_address", ".", "FIELDS", "=", "fields_value", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.base.PretrainedWeightsBase.download_pre_trained_weights": [[198, 210], ["tempfile.TemporaryDirectory", "os.path.join", "deepparse.download_from_url", "os.path.join", "deepparse.download_from_url", "os.path.join", "deepparse.download_from_url", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.deepparse.tools.download_from_url", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.deepparse.tools.download_from_url", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.deepparse.tools.download_from_url"], ["    ", "def", "download_pre_trained_weights", "(", "self", ")", ":", "\n", "        ", "self", ".", "model_weights_temp_dir", "=", "TemporaryDirectory", "(", ")", "\n", "self", ".", "fake_cache_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "model_weights_temp_dir", ".", "name", ",", "\"fake_cache\"", ")", "\n", "\n", "download_from_url", "(", "\"retrained_fasttext_address_parser\"", ",", "self", ".", "fake_cache_path", ",", "\"ckpt\"", ")", "\n", "self", ".", "path_to_retrain_fasttext", "=", "os", ".", "path", ".", "join", "(", "self", ".", "fake_cache_path", ",", "\"retrained_fasttext_address_parser.ckpt\"", ")", "\n", "\n", "download_from_url", "(", "\"retrained_bpemb_address_parser\"", ",", "self", ".", "fake_cache_path", ",", "\"ckpt\"", ")", "\n", "self", ".", "path_to_retrain_bpemb", "=", "os", ".", "path", ".", "join", "(", "self", ".", "fake_cache_path", ",", "\"retrained_bpemb_address_parser.ckpt\"", ")", "\n", "\n", "download_from_url", "(", "\"retrained_named_address_parser\"", ",", "self", ".", "fake_cache_path", ",", "\"ckpt\"", ")", "\n", "self", ".", "path_to_named_model", "=", "os", ".", "path", ".", "join", "(", "self", ".", "fake_cache_path", ",", "\"retrained_named_address_parser.ckpt\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.base.PretrainedWeightsBase.tearDownClass": [[211, 215], ["cls.model_weights_temp_dir.cleanup"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "tearDownClass", "(", "cls", ")", "->", "None", ":", "\n", "# pylint: disable=no-member", "\n", "        ", "cls", ".", "model_weights_temp_dir", ".", "cleanup", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_address_parser.AddressParserTest.setUpClass": [[19, 61], ["super().setUpClass", "torch.device", "torch.device", "os.path.join", "os.makedirs", "os.path.expanduser"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_seq2seq_fasttext_model_gpu.FastTextSeq2SeqIntegrationTest.setUpClass"], ["    ", "@", "classmethod", "\n", "def", "setUpClass", "(", "cls", ")", ":", "\n", "        ", "super", "(", "AddressParserTest", ",", "cls", ")", ".", "setUpClass", "(", ")", "\n", "cls", ".", "a_BPEmb_name", "=", "\"PreTrainedBPEmbAddressParser\"", "\n", "cls", ".", "a_fasttext_name", "=", "\"PreTrainedFastTextAddressParser\"", "\n", "cls", ".", "a_fasttext_light_name", "=", "\"PreTrainedFastTextLightAddressParser\"", "\n", "cls", ".", "a_BPEmb_att_name", "=", "\"PreTrainedBPEmbAttentionAddressParser\"", "\n", "cls", ".", "a_fasttext_att_name", "=", "\"PreTrainedFastTextAttentionAddressParser\"", "\n", "cls", ".", "a_fasttext_att_light_name", "=", "\"PreTrainedFastTextLightAttentionAddressParser\"", "\n", "cls", ".", "a_rounding", "=", "5", "\n", "cls", ".", "a_cpu_device", "=", "\"cpu\"", "\n", "cls", ".", "a_cpu_torch_device", "=", "device", "(", "cls", ".", "a_cpu_device", ")", "\n", "cls", ".", "a_gpu_device", "=", "0", "\n", "cls", ".", "a_gpu_torch_device", "=", "device", "(", "cls", ".", "a_gpu_device", ")", "\n", "cls", ".", "verbose", "=", "False", "\n", "cls", ".", "number_tags", "=", "9", "\n", "cls", ".", "a_cache_dir", "=", "\"a_cache_dir_path\"", "\n", "\n", "cls", ".", "correct_address_components", "=", "{", "\"ATag\"", ":", "0", ",", "\"AnotherTag\"", ":", "1", ",", "\"EOS\"", ":", "2", "}", "\n", "cls", ".", "incorrect_address_components", "=", "{", "\"ATag\"", ":", "0", ",", "\"AnotherTag\"", ":", "1", "}", "\n", "\n", "cls", ".", "BPEmb_embeddings_model_param", "=", "{", "\"lang\"", ":", "\"multi\"", ",", "\"vs\"", ":", "100000", ",", "\"dim\"", ":", "300", "}", "\n", "cls", ".", "fasttext_download_path", "=", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "expanduser", "(", "\"~\"", ")", ",", "\".cache\"", ",", "\"deepparse\"", ")", "\n", "os", ".", "makedirs", "(", "cls", ".", "fasttext_download_path", ",", "exist_ok", "=", "True", ")", "\n", "cls", ".", "cache_dir", "=", "cls", ".", "fasttext_download_path", "\n", "cls", ".", "a_embeddings_path", "=", "\".\"", "\n", "\n", "cls", ".", "new_seq2seq_params", "=", "{", "\n", "\"encoder_hidden_size\"", ":", "512", ",", "\n", "\"decoder_hidden_size\"", ":", "512", ",", "\n", "}", "\n", "\n", "cls", ".", "expected_fields", "=", "[", "\n", "\"StreetNumber\"", ",", "\n", "\"Unit\"", ",", "\n", "\"StreetName\"", ",", "\n", "\"Orientation\"", ",", "\n", "\"Municipality\"", ",", "\n", "\"Province\"", ",", "\n", "\"PostalCode\"", ",", "\n", "\"GeneralDelivery\"", ",", "\n", "\"EOS\"", ",", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_address_parser.AddressParserTest.setUp": [[63, 69], ["super().setUp", "unittest.mock.MagicMock", "unittest.mock.MagicMock", "unittest.mock.MagicMock"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.models_evaluation.test_tools_models_evaluation.ToolsTests.setUp"], ["", "def", "setUp", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "setUp", "(", ")", "\n", "self", ".", "BPEmb_mock", "=", "MagicMock", "(", ")", "\n", "self", ".", "fasttext_mock", "=", "MagicMock", "(", ")", "\n", "\n", "self", ".", "embeddings_model_mock", "=", "MagicMock", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_address_parser.AddressParserTest.assert_equal_not_ordered": [[70, 73], ["test_address_parser.AddressParserTest.assertIn"], "methods", ["None"], ["", "def", "assert_equal_not_ordered", "(", "self", ",", "actual", ",", "expected_elements", ")", ":", "\n", "        ", "for", "expected", "in", "expected_elements", ":", "\n", "            ", "self", ".", "assertIn", "(", "expected", ",", "actual", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_address_parser.AddressParserTest.test_givenAModel_whenInit_thenProperFieldsSet": [[74, 86], ["unittest.mock.patch", "unittest.mock.patch", "deepparse.parser.address_parser.AddressParser", "list", "test_address_parser.AddressParserTest.assert_equal_not_ordered", "test_address_parser.AddressParserTest.assert_equal_not_ordered", "deepparse.parser.address_parser.AddressParser.tags_converter.tags_to_idx.keys"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_address_parser_cpu.AddressParserTest.assert_equal_not_ordered", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_address_parser_cpu.AddressParserTest.assert_equal_not_ordered"], ["", "", "@", "patch", "(", "\"deepparse.parser.address_parser.BPEmbSeq2SeqModel\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.BPEmbEmbeddingsModel\"", ")", "\n", "def", "test_givenAModel_whenInit_thenProperFieldsSet", "(", "self", ",", "embeddings_model_mock", ",", "model_mock", ")", ":", "\n", "        ", "address_parser", "=", "AddressParser", "(", "model_type", "=", "self", ".", "a_bpemb_model_type", ",", "device", "=", "self", ".", "a_cpu_device", ",", "verbose", "=", "True", ")", "\n", "expected_fields", "=", "self", ".", "expected_fields", "\n", "\n", "actual_tags", "=", "list", "(", "address_parser", ".", "tags_converter", ".", "tags_to_idx", ".", "keys", "(", ")", ")", "\n", "self", ".", "assert_equal_not_ordered", "(", "actual_tags", ",", "expected_fields", ")", "\n", "\n", "actual_fields", "=", "formatted_parsed_address", ".", "FIELDS", "\n", "\n", "self", ".", "assert_equal_not_ordered", "(", "actual_fields", ",", "expected_fields", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_address_parser.AddressParserTest.test_givenACPUDeviceSetup_whenInstantiatingParser_thenDeviceIsCPU": [[87, 98], ["unittest.mock.patch", "unittest.mock.patch", "deepparse.parser.address_parser.AddressParser", "test_address_parser.AddressParserTest.assertEqual", "test_address_parser.AddressParserTest.a_best_model_type.capitalize"], "methods", ["None"], ["", "@", "patch", "(", "\"deepparse.parser.address_parser.BPEmbSeq2SeqModel\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.BPEmbEmbeddingsModel\"", ")", "\n", "def", "test_givenACPUDeviceSetup_whenInstantiatingParser_thenDeviceIsCPU", "(", "self", ",", "embeddings_model_mock", ",", "model_mock", ")", ":", "\n", "        ", "address_parser", "=", "AddressParser", "(", "\n", "model_type", "=", "self", ".", "a_best_model_type", ".", "capitalize", "(", ")", ",", "\n", "# we use BPEmb for simplicity", "\n", "device", "=", "self", ".", "a_cpu_device", ",", "\n", ")", "\n", "actual", "=", "address_parser", ".", "device", "\n", "expected", "=", "self", ".", "a_cpu_torch_device", "\n", "self", ".", "assertEqual", "(", "actual", ",", "expected", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_address_parser.AddressParserTest.test_givenAGPUDeviceSetup_whenInstantiatingParserWithoutGPU_thenRaiseWarningAndCPU": [[100, 116], ["unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "test_address_parser.AddressParserTest.assertEqual", "test_address_parser.AddressParserTest.assertWarns", "deepparse.parser.address_parser.AddressParser", "test_address_parser.AddressParserTest.a_best_model_type.capitalize"], "methods", ["None"], ["", "@", "patch", "(", "\"deepparse.parser.address_parser.torch.cuda\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.BPEmbSeq2SeqModel\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.BPEmbEmbeddingsModel\"", ")", "\n", "def", "test_givenAGPUDeviceSetup_whenInstantiatingParserWithoutGPU_thenRaiseWarningAndCPU", "(", "\n", "self", ",", "embeddings_model_mock", ",", "model_mock", ",", "cuda_mock", "\n", ")", ":", "\n", "        ", "cuda_mock", ".", "is_available", ".", "return_value", "=", "False", "\n", "with", "self", ".", "assertWarns", "(", "UserWarning", ")", ":", "\n", "            ", "address_parser", "=", "AddressParser", "(", "\n", "model_type", "=", "self", ".", "a_best_model_type", ".", "capitalize", "(", ")", ",", "\n", "# we use BPEmb for simplicity", "\n", "device", "=", "self", ".", "a_gpu_device", ",", "\n", ")", "\n", "", "actual", "=", "address_parser", ".", "device", "\n", "expected", "=", "self", ".", "a_cpu_torch_device", "\n", "self", ".", "assertEqual", "(", "actual", ",", "expected", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_address_parser.AddressParserTest.test_givenAGPUDeviceSetup_whenInstantiatingParser_thenDeviceIsGPU": [[117, 129], ["unittest.mock.patch", "unittest.mock.patch", "unittest.skipIf", "deepparse.parser.address_parser.AddressParser", "test_address_parser.AddressParserTest.assertEqual", "torch.cuda.is_available", "test_address_parser.AddressParserTest.a_best_model_type.capitalize"], "methods", ["None"], ["", "@", "patch", "(", "\"deepparse.parser.address_parser.BPEmbSeq2SeqModel\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.BPEmbEmbeddingsModel\"", ")", "\n", "@", "skipIf", "(", "not", "torch", ".", "cuda", ".", "is_available", "(", ")", ",", "\"no gpu available\"", ")", "\n", "def", "test_givenAGPUDeviceSetup_whenInstantiatingParser_thenDeviceIsGPU", "(", "self", ",", "embeddings_model_mock", ",", "model_mock", ")", ":", "\n", "        ", "address_parser", "=", "AddressParser", "(", "\n", "model_type", "=", "self", ".", "a_best_model_type", ".", "capitalize", "(", ")", ",", "\n", "# we use BPEmb for simplicity", "\n", "device", "=", "self", ".", "a_gpu_device", ",", "\n", ")", "\n", "actual", "=", "address_parser", ".", "device", "\n", "expected", "=", "self", ".", "a_gpu_torch_device", "\n", "self", ".", "assertEqual", "(", "actual", ",", "expected", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_address_parser.AddressParserTest.test_givenAGPUDeviceSetupSTRFormat_whenInstantiatingParser_thenDeviceIsGPU": [[130, 144], ["unittest.mock.patch", "unittest.mock.patch", "unittest.skipIf", "deepparse.parser.address_parser.AddressParser", "test_address_parser.AddressParserTest.assertEqual", "torch.cuda.is_available", "test_address_parser.AddressParserTest.a_best_model_type.capitalize"], "methods", ["None"], ["", "@", "patch", "(", "\"deepparse.parser.address_parser.BPEmbSeq2SeqModel\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.BPEmbEmbeddingsModel\"", ")", "\n", "@", "skipIf", "(", "not", "torch", ".", "cuda", ".", "is_available", "(", ")", ",", "\"no gpu available\"", ")", "\n", "def", "test_givenAGPUDeviceSetupSTRFormat_whenInstantiatingParser_thenDeviceIsGPU", "(", "\n", "self", ",", "embeddings_model_mock", ",", "model_mock", "\n", ")", ":", "\n", "        ", "address_parser", "=", "AddressParser", "(", "\n", "model_type", "=", "self", ".", "a_best_model_type", ".", "capitalize", "(", ")", ",", "\n", "# we use BPEmb for simplicity", "\n", "device", "=", "\"cuda:0\"", ",", "\n", ")", "\n", "actual", "=", "address_parser", ".", "device", "\n", "expected", "=", "self", ".", "a_gpu_torch_device", "\n", "self", ".", "assertEqual", "(", "actual", ",", "expected", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_address_parser.AddressParserTest.test_givenAGPUDeviceSetupINTFormat_whenInstantiatingParser_thenDeviceIsGPU": [[145, 159], ["unittest.mock.patch", "unittest.mock.patch", "unittest.skipIf", "deepparse.parser.address_parser.AddressParser", "test_address_parser.AddressParserTest.assertEqual", "torch.cuda.is_available", "test_address_parser.AddressParserTest.a_best_model_type.capitalize"], "methods", ["None"], ["", "@", "patch", "(", "\"deepparse.parser.address_parser.BPEmbSeq2SeqModel\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.BPEmbEmbeddingsModel\"", ")", "\n", "@", "skipIf", "(", "not", "torch", ".", "cuda", ".", "is_available", "(", ")", ",", "\"no gpu available\"", ")", "\n", "def", "test_givenAGPUDeviceSetupINTFormat_whenInstantiatingParser_thenDeviceIsGPU", "(", "\n", "self", ",", "embeddings_model_mock", ",", "model_mock", "\n", ")", ":", "\n", "        ", "address_parser", "=", "AddressParser", "(", "\n", "model_type", "=", "self", ".", "a_best_model_type", ".", "capitalize", "(", ")", ",", "\n", "# we use BPEmb for simplicity", "\n", "device", "=", "0", ",", "\n", ")", "\n", "actual", "=", "address_parser", ".", "device", "\n", "expected", "=", "self", ".", "a_gpu_torch_device", "\n", "self", ".", "assertEqual", "(", "actual", ",", "expected", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_address_parser.AddressParserTest.test_givenAGPUTorchDeviceSetup_whenInstantiatingParser_thenDeviceIsGPU": [[160, 172], ["unittest.mock.patch", "unittest.mock.patch", "unittest.skipIf", "deepparse.parser.address_parser.AddressParser", "test_address_parser.AddressParserTest.assertEqual", "torch.cuda.is_available", "test_address_parser.AddressParserTest.a_best_model_type.capitalize"], "methods", ["None"], ["", "@", "patch", "(", "\"deepparse.parser.address_parser.BPEmbSeq2SeqModel\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.BPEmbEmbeddingsModel\"", ")", "\n", "@", "skipIf", "(", "not", "torch", ".", "cuda", ".", "is_available", "(", ")", ",", "\"no gpu available\"", ")", "\n", "def", "test_givenAGPUTorchDeviceSetup_whenInstantiatingParser_thenDeviceIsGPU", "(", "self", ",", "embeddings_model_mock", ",", "model_mock", ")", ":", "\n", "        ", "address_parser", "=", "AddressParser", "(", "\n", "model_type", "=", "self", ".", "a_best_model_type", ".", "capitalize", "(", ")", ",", "\n", "# we use BPEmb for simplicity", "\n", "device", "=", "self", ".", "a_gpu_torch_device", ",", "\n", ")", "\n", "actual", "=", "address_parser", ".", "device", "\n", "expected", "=", "self", ".", "a_gpu_torch_device", "\n", "self", ".", "assertEqual", "(", "actual", ",", "expected", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_address_parser.AddressParserTest.test_givenACapitalizeBPEmbModelType_whenInstantiatingParser_thenInstantiateModelWithCorrectParameters": [[173, 194], ["unittest.mock.patch", "unittest.mock.patch", "deepparse.parser.address_parser.AddressParser", "embeddings_model_mock.assert_called_with", "unittest.mock.patch", "deepparse.parser.address_parser.AddressParser", "embeddings_model_mock.assert_called_with", "test_address_parser.AddressParserTest.a_best_model_type.capitalize", "test_address_parser.AddressParserTest.a_bpemb_model_type.capitalize"], "methods", ["None"], ["", "@", "patch", "(", "\"deepparse.parser.address_parser.BPEmbSeq2SeqModel\"", ")", "\n", "def", "test_givenACapitalizeBPEmbModelType_whenInstantiatingParser_thenInstantiateModelWithCorrectParameters", "(", "\n", "self", ",", "model_mock", "\n", ")", ":", "\n", "        ", "with", "patch", "(", "\"deepparse.parser.address_parser.BPEmbEmbeddingsModel\"", ")", "as", "embeddings_model_mock", ":", "\n", "            ", "AddressParser", "(", "\n", "model_type", "=", "self", ".", "a_best_model_type", ".", "capitalize", "(", ")", ",", "\n", "device", "=", "self", ".", "a_cpu_device", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", ")", "\n", "\n", "embeddings_model_mock", ".", "assert_called_with", "(", "verbose", "=", "self", ".", "verbose", ",", "cache_dir", "=", "self", ".", "cache_dir", ")", "\n", "\n", "", "with", "patch", "(", "\"deepparse.parser.address_parser.BPEmbEmbeddingsModel\"", ")", "as", "embeddings_model_mock", ":", "\n", "            ", "AddressParser", "(", "\n", "model_type", "=", "self", ".", "a_bpemb_model_type", ".", "capitalize", "(", ")", ",", "\n", "device", "=", "self", ".", "a_cpu_device", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", ")", "\n", "\n", "embeddings_model_mock", ".", "assert_called_with", "(", "verbose", "=", "self", ".", "verbose", ",", "cache_dir", "=", "self", ".", "cache_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_address_parser.AddressParserTest.test_givenACapitalizeFastTextModelType_whenInstantiatingParser_thenInstantiateModelWithCorrectParameters": [[195, 217], ["unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "deepparse.parser.address_parser.AddressParser", "downloader_mock.assert_called_with", "unittest.mock.patch", "deepparse.parser.address_parser.AddressParser", "downloader_mock.assert_called_with", "test_address_parser.AddressParserTest.a_fastest_model_type.capitalize", "test_address_parser.AddressParserTest.a_fasttext_model_type.capitalize"], "methods", ["None"], ["", "", "@", "patch", "(", "\"deepparse.parser.address_parser.FastTextEmbeddingsModel\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.FastTextSeq2SeqModel\"", ")", "\n", "def", "test_givenACapitalizeFastTextModelType_whenInstantiatingParser_thenInstantiateModelWithCorrectParameters", "(", "\n", "self", ",", "embeddings_model_mock", ",", "model_mock", "\n", ")", ":", "\n", "        ", "with", "patch", "(", "\"deepparse.parser.address_parser.download_fasttext_embeddings\"", ")", "as", "downloader_mock", ":", "\n", "            ", "AddressParser", "(", "\n", "model_type", "=", "self", ".", "a_fastest_model_type", ".", "capitalize", "(", ")", ",", "\n", "device", "=", "self", ".", "a_cpu_device", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", ")", "\n", "\n", "downloader_mock", ".", "assert_called_with", "(", "cache_dir", "=", "self", ".", "fasttext_download_path", ",", "verbose", "=", "self", ".", "verbose", ")", "\n", "\n", "", "with", "patch", "(", "\"deepparse.parser.address_parser.download_fasttext_embeddings\"", ")", "as", "downloader_mock", ":", "\n", "            ", "AddressParser", "(", "\n", "model_type", "=", "self", ".", "a_fasttext_model_type", ".", "capitalize", "(", ")", ",", "\n", "device", "=", "self", ".", "a_cpu_device", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", ")", "\n", "\n", "downloader_mock", ".", "assert_called_with", "(", "cache_dir", "=", "self", ".", "fasttext_download_path", ",", "verbose", "=", "self", ".", "verbose", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_address_parser.AddressParserTest.test_givenAFastTextAttModelType_whenInstantiatingParser_thenInstantiateModelWithCorrectParameters": [[218, 232], ["unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "deepparse.parser.address_parser.AddressParser", "downloader_mock.assert_called_with"], "methods", ["None"], ["", "", "@", "patch", "(", "\"deepparse.parser.address_parser.FastTextEmbeddingsModel\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.FastTextSeq2SeqModel\"", ")", "\n", "def", "test_givenAFastTextAttModelType_whenInstantiatingParser_thenInstantiateModelWithCorrectParameters", "(", "\n", "self", ",", "embeddings_model_mock", ",", "model_mock", "\n", ")", ":", "\n", "        ", "with", "patch", "(", "\"deepparse.parser.address_parser.download_fasttext_embeddings\"", ")", "as", "downloader_mock", ":", "\n", "            ", "AddressParser", "(", "\n", "model_type", "=", "self", ".", "a_fastest_model_type", ",", "\n", "device", "=", "self", ".", "a_cpu_device", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", "attention_mechanism", "=", "True", ",", "\n", ")", "\n", "\n", "downloader_mock", ".", "assert_called_with", "(", "cache_dir", "=", "self", ".", "fasttext_download_path", ",", "verbose", "=", "self", ".", "verbose", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_address_parser.AddressParserTest.test_givenABestModelType_whenInstantiatingParser_thenInstantiateBPEmbEmbeddingsModelWithCorrectParameters": [[233, 245], ["unittest.mock.patch", "unittest.mock.patch", "deepparse.parser.address_parser.AddressParser", "embeddings_model_mock.assert_called_with"], "methods", ["None"], ["", "", "@", "patch", "(", "\"deepparse.parser.address_parser.BPEmbSeq2SeqModel\"", ")", "\n", "def", "test_givenABestModelType_whenInstantiatingParser_thenInstantiateBPEmbEmbeddingsModelWithCorrectParameters", "(", "\n", "self", ",", "model_mock", "\n", ")", ":", "\n", "        ", "with", "patch", "(", "\"deepparse.parser.address_parser.BPEmbEmbeddingsModel\"", ")", "as", "embeddings_model_mock", ":", "\n", "            ", "AddressParser", "(", "\n", "model_type", "=", "self", ".", "a_best_model_type", ",", "\n", "device", "=", "self", ".", "a_cpu_device", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", ")", "\n", "\n", "embeddings_model_mock", ".", "assert_called_with", "(", "verbose", "=", "self", ".", "verbose", ",", "cache_dir", "=", "self", ".", "cache_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_address_parser.AddressParserTest.test_givenABPEmbModelType_whenInstantiatingParser_thenInstantiateBPEmbEmbeddingsModelWithCorrectParameters": [[246, 258], ["unittest.mock.patch", "unittest.mock.patch", "deepparse.parser.address_parser.AddressParser", "embeddings_model_mock.assert_called_with"], "methods", ["None"], ["", "", "@", "patch", "(", "\"deepparse.parser.address_parser.BPEmbSeq2SeqModel\"", ")", "\n", "def", "test_givenABPEmbModelType_whenInstantiatingParser_thenInstantiateBPEmbEmbeddingsModelWithCorrectParameters", "(", "\n", "self", ",", "model_mock", "\n", ")", ":", "\n", "        ", "with", "patch", "(", "\"deepparse.parser.address_parser.BPEmbEmbeddingsModel\"", ")", "as", "embeddings_model_mock", ":", "\n", "            ", "AddressParser", "(", "\n", "model_type", "=", "self", ".", "a_bpemb_model_type", ",", "\n", "device", "=", "self", ".", "a_cpu_device", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", ")", "\n", "\n", "embeddings_model_mock", ".", "assert_called_with", "(", "verbose", "=", "self", ".", "verbose", ",", "cache_dir", "=", "self", ".", "cache_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_address_parser.AddressParserTest.test_givenABestModelType_whenInstantiatingParser_thenInstantiateBPEmbVectorizerWithCorrectParameters": [[259, 275], ["unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "deepparse.parser.address_parser.AddressParser", "vectorizer_mock.assert_called_with"], "methods", ["None"], ["", "", "@", "patch", "(", "\"deepparse.parser.address_parser.BPEmbSeq2SeqModel\"", ")", "\n", "def", "test_givenABestModelType_whenInstantiatingParser_thenInstantiateBPEmbVectorizerWithCorrectParameters", "(", "\n", "self", ",", "model_mock", "\n", ")", ":", "\n", "        ", "with", "patch", "(", "\n", "\"deepparse.parser.address_parser.BPEmbEmbeddingsModel\"", ",", "\n", "return_value", "=", "self", ".", "embeddings_model_mock", ",", "\n", ")", ":", "\n", "            ", "with", "patch", "(", "\"deepparse.parser.address_parser.BPEmbVectorizer\"", ")", "as", "vectorizer_mock", ":", "\n", "                ", "AddressParser", "(", "\n", "model_type", "=", "self", ".", "a_best_model_type", ",", "\n", "device", "=", "self", ".", "a_cpu_device", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", ")", "\n", "\n", "vectorizer_mock", ".", "assert_called_with", "(", "embeddings_model", "=", "self", ".", "embeddings_model_mock", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_address_parser.AddressParserTest.test_givenABPEmbModelType_whenInstantiatingParser_thenInstantiateBPEmbVectorizerWithCorrectParameters": [[276, 292], ["unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "deepparse.parser.address_parser.AddressParser", "vectorizer_mock.assert_called_with"], "methods", ["None"], ["", "", "", "@", "patch", "(", "\"deepparse.parser.address_parser.BPEmbSeq2SeqModel\"", ")", "\n", "def", "test_givenABPEmbModelType_whenInstantiatingParser_thenInstantiateBPEmbVectorizerWithCorrectParameters", "(", "\n", "self", ",", "model_mock", "\n", ")", ":", "\n", "        ", "with", "patch", "(", "\n", "\"deepparse.parser.address_parser.BPEmbEmbeddingsModel\"", ",", "\n", "return_value", "=", "self", ".", "embeddings_model_mock", ",", "\n", ")", ":", "\n", "            ", "with", "patch", "(", "\"deepparse.parser.address_parser.BPEmbVectorizer\"", ")", "as", "vectorizer_mock", ":", "\n", "                ", "AddressParser", "(", "\n", "model_type", "=", "self", ".", "a_bpemb_model_type", ",", "\n", "device", "=", "self", ".", "a_cpu_device", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", ")", "\n", "\n", "vectorizer_mock", ".", "assert_called_with", "(", "embeddings_model", "=", "self", ".", "embeddings_model_mock", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_address_parser.AddressParserTest.test_givenABestModelType_whenInstantiatingParser_thenInstantiateModelWithCorrectParameters": [[293, 311], ["unittest.mock.patch", "unittest.mock.patch", "deepparse.parser.address_parser.AddressParser", "model_mock.assert_called_with"], "methods", ["None"], ["", "", "", "@", "patch", "(", "\"deepparse.parser.address_parser.BPEmbEmbeddingsModel\"", ")", "\n", "def", "test_givenABestModelType_whenInstantiatingParser_thenInstantiateModelWithCorrectParameters", "(", "\n", "self", ",", "embeddings_model_mock", "\n", ")", ":", "\n", "        ", "with", "patch", "(", "\"deepparse.parser.address_parser.BPEmbSeq2SeqModel\"", ")", "as", "model_mock", ":", "\n", "            ", "AddressParser", "(", "\n", "model_type", "=", "self", ".", "a_best_model_type", ",", "\n", "device", "=", "self", ".", "a_cpu_device", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", ")", "\n", "\n", "model_mock", ".", "assert_called_with", "(", "\n", "cache_dir", "=", "self", ".", "cache_dir", ",", "\n", "device", "=", "self", ".", "a_cpu_torch_device", ",", "\n", "output_size", "=", "self", ".", "number_tags", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", "path_to_retrained_model", "=", "None", ",", "\n", "attention_mechanism", "=", "False", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_address_parser.AddressParserTest.test_givenABPEmbModelType_whenInstantiatingParserWithUserComponent_thenCorrectNumberOfOutputDim": [[313, 333], ["unittest.mock.patch", "unittest.mock.patch", "test_address_parser.AddressParserTest.setup_retrain_new_tags_model", "deepparse.parser.address_parser.AddressParser", "model_mock.assert_called_with", "len"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.base.AddressParserPredictTestCase.setup_retrain_new_tags_model"], ["", "", "@", "patch", "(", "\"deepparse.parser.address_parser.BPEmbEmbeddingsModel\"", ")", "\n", "def", "test_givenABPEmbModelType_whenInstantiatingParserWithUserComponent_thenCorrectNumberOfOutputDim", "(", "\n", "self", ",", "embeddings_model_mock", "\n", ")", ":", "\n", "        ", "with", "patch", "(", "\"deepparse.parser.address_parser.BPEmbSeq2SeqModel\"", ")", "as", "model_mock", ":", "\n", "            ", "self", ".", "setup_retrain_new_tags_model", "(", "self", ".", "correct_address_components", ",", "self", ".", "a_bpemb_model_type", ")", "\n", "AddressParser", "(", "\n", "model_type", "=", "self", ".", "a_bpemb_model_type", ",", "\n", "device", "=", "self", ".", "a_cpu_device", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", "path_to_retrained_model", "=", "self", ".", "a_model_path", ",", "\n", ")", "\n", "\n", "model_mock", ".", "assert_called_with", "(", "\n", "cache_dir", "=", "self", ".", "cache_dir", ",", "\n", "device", "=", "self", ".", "a_cpu_torch_device", ",", "\n", "output_size", "=", "len", "(", "self", ".", "correct_address_components", ")", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", "path_to_retrained_model", "=", "self", ".", "a_model_path", ",", "\n", "attention_mechanism", "=", "False", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_address_parser.AddressParserTest.test_givenABPEmbModelType_whenInstantiatingParserWithUserSeq2seqParams_thenCorrectSettings": [[335, 357], ["unittest.mock.patch", "unittest.mock.patch", "test_address_parser.AddressParserTest.setup_retrain_new_params_model", "deepparse.parser.address_parser.AddressParser", "model_mock.assert_called_with"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.base.AddressParserPredictTestCase.setup_retrain_new_params_model"], ["", "", "@", "patch", "(", "\"deepparse.parser.address_parser.BPEmbEmbeddingsModel\"", ")", "\n", "def", "test_givenABPEmbModelType_whenInstantiatingParserWithUserSeq2seqParams_thenCorrectSettings", "(", "\n", "self", ",", "embeddings_model_mock", "\n", ")", ":", "\n", "        ", "with", "patch", "(", "\"deepparse.parser.address_parser.BPEmbSeq2SeqModel\"", ")", "as", "model_mock", ":", "\n", "            ", "self", ".", "setup_retrain_new_params_model", "(", "self", ".", "new_seq2seq_params", ",", "self", ".", "a_bpemb_model_type", ")", "\n", "AddressParser", "(", "\n", "model_type", "=", "self", ".", "a_bpemb_model_type", ",", "\n", "device", "=", "self", ".", "a_cpu_device", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", "path_to_retrained_model", "=", "self", ".", "a_model_path", ",", "\n", ")", "\n", "\n", "model_mock", ".", "assert_called_with", "(", "\n", "cache_dir", "=", "self", ".", "cache_dir", ",", "\n", "device", "=", "self", ".", "a_cpu_torch_device", ",", "\n", "output_size", "=", "self", ".", "number_tags", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", "path_to_retrained_model", "=", "self", ".", "a_model_path", ",", "\n", "attention_mechanism", "=", "False", ",", "\n", "encoder_hidden_size", "=", "512", ",", "\n", "decoder_hidden_size", "=", "512", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_address_parser.AddressParserTest.test_givenAFasttextModelType_whenInstantiatingParserWithUserComponent_thenCorrectNumberOfOutputDim": [[359, 380], ["unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "test_address_parser.AddressParserTest.setup_retrain_new_tags_model", "deepparse.parser.address_parser.AddressParser", "model_mock.assert_called_with", "len"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.base.AddressParserPredictTestCase.setup_retrain_new_tags_model"], ["", "", "@", "patch", "(", "\"deepparse.parser.address_parser.download_fasttext_embeddings\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.FastTextEmbeddingsModel\"", ")", "\n", "def", "test_givenAFasttextModelType_whenInstantiatingParserWithUserComponent_thenCorrectNumberOfOutputDim", "(", "\n", "self", ",", "download_weights_mock", ",", "embeddings_model_mock", "\n", ")", ":", "\n", "        ", "with", "patch", "(", "\"deepparse.parser.address_parser.FastTextSeq2SeqModel\"", ")", "as", "model_mock", ":", "\n", "            ", "self", ".", "setup_retrain_new_tags_model", "(", "self", ".", "incorrect_address_components", ",", "self", ".", "a_fasttext_model_type", ")", "\n", "AddressParser", "(", "\n", "model_type", "=", "self", ".", "a_fasttext_model_type", ",", "\n", "device", "=", "self", ".", "a_cpu_device", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", "path_to_retrained_model", "=", "self", ".", "a_model_path", ",", "\n", ")", "\n", "\n", "model_mock", ".", "assert_called_with", "(", "\n", "cache_dir", "=", "self", ".", "cache_dir", ",", "\n", "device", "=", "self", ".", "a_cpu_torch_device", ",", "\n", "output_size", "=", "len", "(", "self", ".", "incorrect_address_components", ")", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", "path_to_retrained_model", "=", "self", ".", "a_model_path", ",", "\n", "attention_mechanism", "=", "False", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_address_parser.AddressParserTest.test_givenAFasttextModelType_whenInstantiatingParserWithUserSeq2seqParams_thenCorrectSettings": [[382, 405], ["unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "test_address_parser.AddressParserTest.setup_retrain_new_params_model", "deepparse.parser.address_parser.AddressParser", "model_mock.assert_called_with"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.base.AddressParserPredictTestCase.setup_retrain_new_params_model"], ["", "", "@", "patch", "(", "\"deepparse.parser.address_parser.download_fasttext_embeddings\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.FastTextEmbeddingsModel\"", ")", "\n", "def", "test_givenAFasttextModelType_whenInstantiatingParserWithUserSeq2seqParams_thenCorrectSettings", "(", "\n", "self", ",", "download_weights_mock", ",", "embeddings_model_mock", "\n", ")", ":", "\n", "        ", "with", "patch", "(", "\"deepparse.parser.address_parser.FastTextSeq2SeqModel\"", ")", "as", "model_mock", ":", "\n", "            ", "self", ".", "setup_retrain_new_params_model", "(", "self", ".", "new_seq2seq_params", ",", "self", ".", "a_fasttext_model_type", ")", "\n", "AddressParser", "(", "\n", "model_type", "=", "self", ".", "a_fasttext_model_type", ",", "\n", "device", "=", "self", ".", "a_cpu_device", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", "path_to_retrained_model", "=", "self", ".", "a_model_path", ",", "\n", ")", "\n", "\n", "model_mock", ".", "assert_called_with", "(", "\n", "cache_dir", "=", "self", ".", "cache_dir", ",", "\n", "device", "=", "self", ".", "a_cpu_torch_device", ",", "\n", "output_size", "=", "self", ".", "number_tags", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", "path_to_retrained_model", "=", "self", ".", "a_model_path", ",", "\n", "attention_mechanism", "=", "False", ",", "\n", "encoder_hidden_size", "=", "512", ",", "\n", "decoder_hidden_size", "=", "512", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_address_parser.AddressParserTest.test_givenABPEmbModelType_whenInstantiatingParser_thenInstantiateModelWithCorrectParameters": [[407, 425], ["unittest.mock.patch", "unittest.mock.patch", "deepparse.parser.address_parser.AddressParser", "model_mock.assert_called_with"], "methods", ["None"], ["", "", "@", "patch", "(", "\"deepparse.parser.address_parser.BPEmbEmbeddingsModel\"", ")", "\n", "def", "test_givenABPEmbModelType_whenInstantiatingParser_thenInstantiateModelWithCorrectParameters", "(", "\n", "self", ",", "embeddings_model_mock", "\n", ")", ":", "\n", "        ", "with", "patch", "(", "\"deepparse.parser.address_parser.BPEmbSeq2SeqModel\"", ")", "as", "model_mock", ":", "\n", "            ", "AddressParser", "(", "\n", "model_type", "=", "self", ".", "a_bpemb_model_type", ",", "\n", "device", "=", "self", ".", "a_cpu_device", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", ")", "\n", "\n", "model_mock", ".", "assert_called_with", "(", "\n", "cache_dir", "=", "self", ".", "cache_dir", ",", "\n", "device", "=", "self", ".", "a_cpu_torch_device", ",", "\n", "output_size", "=", "self", ".", "number_tags", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", "path_to_retrained_model", "=", "None", ",", "\n", "attention_mechanism", "=", "False", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_address_parser.AddressParserTest.test_givenAFastestModelType_whenInstantiatingParser_thenDownloadFasttextModelWithCorrectPath": [[427, 440], ["unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "deepparse.parser.address_parser.AddressParser", "downloader.assert_called_with"], "methods", ["None"], ["", "", "@", "patch", "(", "\"deepparse.parser.address_parser.FastTextEmbeddingsModel\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.FastTextSeq2SeqModel\"", ")", "\n", "def", "test_givenAFastestModelType_whenInstantiatingParser_thenDownloadFasttextModelWithCorrectPath", "(", "\n", "self", ",", "embeddings_model_mock", ",", "model_mock", "\n", ")", ":", "\n", "        ", "with", "patch", "(", "\"deepparse.parser.address_parser.download_fasttext_embeddings\"", ")", "as", "downloader", ":", "\n", "            ", "AddressParser", "(", "\n", "model_type", "=", "self", ".", "a_fastest_model_type", ",", "\n", "device", "=", "self", ".", "a_cpu_device", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", ")", "\n", "\n", "downloader", ".", "assert_called_with", "(", "cache_dir", "=", "self", ".", "fasttext_download_path", ",", "verbose", "=", "self", ".", "verbose", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_address_parser.AddressParserTest.test_givenAFasttextModelType_whenInstantiatingParser_thenDownloadFasttextModelWithCorrectPath": [[441, 454], ["unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "deepparse.parser.address_parser.AddressParser", "downloader.assert_called_with"], "methods", ["None"], ["", "", "@", "patch", "(", "\"deepparse.parser.address_parser.FastTextEmbeddingsModel\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.FastTextSeq2SeqModel\"", ")", "\n", "def", "test_givenAFasttextModelType_whenInstantiatingParser_thenDownloadFasttextModelWithCorrectPath", "(", "\n", "self", ",", "embeddings_model_mock", ",", "model_mock", "\n", ")", ":", "\n", "        ", "with", "patch", "(", "\"deepparse.parser.address_parser.download_fasttext_embeddings\"", ")", "as", "downloader", ":", "\n", "            ", "AddressParser", "(", "\n", "model_type", "=", "self", ".", "a_fasttext_model_type", ",", "\n", "device", "=", "self", ".", "a_cpu_device", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", ")", "\n", "\n", "downloader", ".", "assert_called_with", "(", "cache_dir", "=", "self", ".", "fasttext_download_path", ",", "verbose", "=", "self", ".", "verbose", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_address_parser.AddressParserTest.test_givenAFasttextLightModelType_whenInstantiatingParser_thenDownloadFasttextMagnitudeModelWithCorrectPath": [[455, 468], ["unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "deepparse.parser.address_parser.AddressParser", "downloader.assert_called_with"], "methods", ["None"], ["", "", "@", "patch", "(", "\"deepparse.parser.address_parser.MagnitudeEmbeddingsModel\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.FastTextSeq2SeqModel\"", ")", "\n", "def", "test_givenAFasttextLightModelType_whenInstantiatingParser_thenDownloadFasttextMagnitudeModelWithCorrectPath", "(", "\n", "self", ",", "embeddings_model_mock", ",", "model_mock", "\n", ")", ":", "\n", "        ", "with", "patch", "(", "\"deepparse.parser.address_parser.download_fasttext_magnitude_embeddings\"", ")", "as", "downloader", ":", "\n", "            ", "AddressParser", "(", "\n", "model_type", "=", "self", ".", "a_fasttext_light_model_type", ",", "\n", "device", "=", "self", ".", "a_cpu_device", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", ")", "\n", "\n", "downloader", ".", "assert_called_with", "(", "cache_dir", "=", "self", ".", "fasttext_download_path", ",", "verbose", "=", "self", ".", "verbose", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_address_parser.AddressParserTest.test_givenAFastestModelType_whenInstantiatingParser_thenInstantiateModelWithCorrectPath": [[469, 483], ["unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "deepparse.parser.address_parser.AddressParser", "embeddings_model_mock.assert_called_with"], "methods", ["None"], ["", "", "@", "patch", "(", "\"deepparse.parser.address_parser.FastTextSeq2SeqModel\"", ")", "\n", "def", "test_givenAFastestModelType_whenInstantiatingParser_thenInstantiateModelWithCorrectPath", "(", "self", ",", "model_mock", ")", ":", "\n", "        ", "with", "patch", "(", "\n", "\"deepparse.parser.address_parser.download_fasttext_embeddings\"", ",", "\n", "return_value", "=", "self", ".", "a_embeddings_path", ",", "\n", ")", ":", "\n", "            ", "with", "patch", "(", "\"deepparse.parser.address_parser.FastTextEmbeddingsModel\"", ")", "as", "embeddings_model_mock", ":", "\n", "                ", "AddressParser", "(", "\n", "model_type", "=", "self", ".", "a_fastest_model_type", ",", "\n", "device", "=", "self", ".", "a_cpu_device", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", ")", "\n", "\n", "embeddings_model_mock", ".", "assert_called_with", "(", "self", ".", "a_embeddings_path", ",", "verbose", "=", "self", ".", "verbose", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_address_parser.AddressParserTest.test_givenAFasttextModelType_whenInstantiatingParser_thenInstantiateModelWithCorrectPath": [[484, 498], ["unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "deepparse.parser.address_parser.AddressParser", "embeddings_model_mock.assert_called_with"], "methods", ["None"], ["", "", "", "@", "patch", "(", "\"deepparse.parser.address_parser.FastTextSeq2SeqModel\"", ")", "\n", "def", "test_givenAFasttextModelType_whenInstantiatingParser_thenInstantiateModelWithCorrectPath", "(", "self", ",", "model_mock", ")", ":", "\n", "        ", "with", "patch", "(", "\n", "\"deepparse.parser.address_parser.download_fasttext_embeddings\"", ",", "\n", "return_value", "=", "self", ".", "a_embeddings_path", ",", "\n", ")", ":", "\n", "            ", "with", "patch", "(", "\"deepparse.parser.address_parser.FastTextEmbeddingsModel\"", ")", "as", "embeddings_model_mock", ":", "\n", "                ", "AddressParser", "(", "\n", "model_type", "=", "self", ".", "a_fasttext_model_type", ",", "\n", "device", "=", "self", ".", "a_cpu_device", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", ")", "\n", "\n", "embeddings_model_mock", ".", "assert_called_with", "(", "self", ".", "a_embeddings_path", ",", "verbose", "=", "self", ".", "verbose", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_address_parser.AddressParserTest.test_givenAFasttextLightModelType_whenInstanciatingParser_thenInstanciateModelWithCorrectPath": [[499, 513], ["unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "deepparse.parser.address_parser.AddressParser", "embeddings_model_mock.assert_called_with"], "methods", ["None"], ["", "", "", "@", "patch", "(", "\"deepparse.parser.address_parser.FastTextSeq2SeqModel\"", ")", "\n", "def", "test_givenAFasttextLightModelType_whenInstanciatingParser_thenInstanciateModelWithCorrectPath", "(", "self", ",", "model_mock", ")", ":", "\n", "        ", "with", "patch", "(", "\n", "\"deepparse.parser.address_parser.download_fasttext_magnitude_embeddings\"", ",", "\n", "return_value", "=", "self", ".", "a_embeddings_path", ",", "\n", ")", ":", "\n", "            ", "with", "patch", "(", "\"deepparse.parser.address_parser.MagnitudeEmbeddingsModel\"", ")", "as", "embeddings_model_mock", ":", "\n", "                ", "AddressParser", "(", "\n", "model_type", "=", "self", ".", "a_fasttext_light_model_type", ",", "\n", "device", "=", "self", ".", "a_cpu_device", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", ")", "\n", "\n", "embeddings_model_mock", ".", "assert_called_with", "(", "self", ".", "a_embeddings_path", ",", "verbose", "=", "self", ".", "verbose", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_address_parser.AddressParserTest.test_givenAFastestModelType_whenInstantiatingParser_thenInstantiateFasttextVectorizerWithCorrectParameters": [[514, 531], ["unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "deepparse.parser.address_parser.AddressParser", "vectorizer_mock.assert_called_with"], "methods", ["None"], ["", "", "", "@", "patch", "(", "\"deepparse.parser.address_parser.FastTextSeq2SeqModel\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.download_fasttext_embeddings\"", ")", "\n", "def", "test_givenAFastestModelType_whenInstantiatingParser_thenInstantiateFasttextVectorizerWithCorrectParameters", "(", "\n", "self", ",", "model_mock", ",", "downloader_mock", "\n", ")", ":", "\n", "        ", "with", "patch", "(", "\n", "\"deepparse.parser.address_parser.FastTextEmbeddingsModel\"", ",", "\n", "return_value", "=", "self", ".", "embeddings_model_mock", ",", "\n", ")", ":", "\n", "            ", "with", "patch", "(", "\"deepparse.parser.address_parser.FastTextVectorizer\"", ")", "as", "vectorizer_mock", ":", "\n", "                ", "AddressParser", "(", "\n", "model_type", "=", "self", ".", "a_fastest_model_type", ",", "\n", "device", "=", "self", ".", "a_cpu_device", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", ")", "\n", "\n", "vectorizer_mock", ".", "assert_called_with", "(", "embeddings_model", "=", "self", ".", "embeddings_model_mock", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_address_parser.AddressParserTest.test_givenAFasttextModelType_whenInstantiatingParser_thenInstantiateFasttextVectorizerWithCorrectParameters": [[532, 549], ["unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "deepparse.parser.address_parser.AddressParser", "vectorizer_mock.assert_called_with"], "methods", ["None"], ["", "", "", "@", "patch", "(", "\"deepparse.parser.address_parser.FastTextSeq2SeqModel\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.download_fasttext_embeddings\"", ")", "\n", "def", "test_givenAFasttextModelType_whenInstantiatingParser_thenInstantiateFasttextVectorizerWithCorrectParameters", "(", "\n", "self", ",", "model_mock", ",", "downloader_mock", "\n", ")", ":", "\n", "        ", "with", "patch", "(", "\n", "\"deepparse.parser.address_parser.FastTextEmbeddingsModel\"", ",", "\n", "return_value", "=", "self", ".", "embeddings_model_mock", ",", "\n", ")", ":", "\n", "            ", "with", "patch", "(", "\"deepparse.parser.address_parser.FastTextVectorizer\"", ")", "as", "vectorizer_mock", ":", "\n", "                ", "AddressParser", "(", "\n", "model_type", "=", "self", ".", "a_fasttext_model_type", ",", "\n", "device", "=", "self", ".", "a_cpu_device", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", ")", "\n", "\n", "vectorizer_mock", ".", "assert_called_with", "(", "embeddings_model", "=", "self", ".", "embeddings_model_mock", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_address_parser.AddressParserTest.test_givenAFasttextLightModelType_whenInstanciatingParser_thenInstanciateMagnitudeVectorizerWithCorrectParameters": [[550, 568], ["unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "deepparse.parser.address_parser.AddressParser", "vectorizer_mock.assert_called_with"], "methods", ["None"], ["", "", "", "@", "patch", "(", "\"deepparse.parser.address_parser.FastTextSeq2SeqModel\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.download_fasttext_magnitude_embeddings\"", ")", "\n", "# pylint: disable=C0301", "\n", "def", "test_givenAFasttextLightModelType_whenInstanciatingParser_thenInstanciateMagnitudeVectorizerWithCorrectParameters", "(", "\n", "self", ",", "model_mock", ",", "downloader_mock", "\n", ")", ":", "\n", "        ", "with", "patch", "(", "\n", "\"deepparse.parser.address_parser.MagnitudeEmbeddingsModel\"", ",", "\n", "return_value", "=", "self", ".", "embeddings_model_mock", ",", "\n", ")", ":", "\n", "            ", "with", "patch", "(", "\"deepparse.parser.address_parser.MagnitudeVectorizer\"", ")", "as", "vectorizer_mock", ":", "\n", "                ", "AddressParser", "(", "\n", "model_type", "=", "self", ".", "a_fasttext_light_model_type", ",", "\n", "device", "=", "self", ".", "a_cpu_device", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", ")", "\n", "\n", "vectorizer_mock", ".", "assert_called_with", "(", "embeddings_model", "=", "self", ".", "embeddings_model_mock", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_address_parser.AddressParserTest.test_givenALightestModelType_whenInstanciatingParser_thenInstanciateMagnitudeVectorizerWithCorrectParameters": [[569, 587], ["unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "deepparse.parser.address_parser.AddressParser", "vectorizer_mock.assert_called_with"], "methods", ["None"], ["", "", "", "@", "patch", "(", "\"deepparse.parser.address_parser.FastTextSeq2SeqModel\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.download_fasttext_magnitude_embeddings\"", ")", "\n", "# pylint: disable=C0301", "\n", "def", "test_givenALightestModelType_whenInstanciatingParser_thenInstanciateMagnitudeVectorizerWithCorrectParameters", "(", "\n", "self", ",", "model_mock", ",", "downloader_mock", "\n", ")", ":", "\n", "        ", "with", "patch", "(", "\n", "\"deepparse.parser.address_parser.MagnitudeEmbeddingsModel\"", ",", "\n", "return_value", "=", "self", ".", "embeddings_model_mock", ",", "\n", ")", ":", "\n", "            ", "with", "patch", "(", "\"deepparse.parser.address_parser.MagnitudeVectorizer\"", ")", "as", "vectorizer_mock", ":", "\n", "                ", "AddressParser", "(", "\n", "model_type", "=", "self", ".", "a_fasttext_lightest_model_type", ",", "\n", "device", "=", "self", ".", "a_cpu_device", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", ")", "\n", "\n", "vectorizer_mock", ".", "assert_called_with", "(", "embeddings_model", "=", "self", ".", "embeddings_model_mock", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_address_parser.AddressParserTest.test_givenAFastestModelType_whenInstantiatingParser_thenInstantiateModelWithCorrectParameters": [[588, 607], ["unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "deepparse.parser.address_parser.AddressParser", "model_mock.assert_called_with"], "methods", ["None"], ["", "", "", "@", "patch", "(", "\"deepparse.parser.address_parser.download_fasttext_embeddings\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.FastTextEmbeddingsModel\"", ")", "\n", "def", "test_givenAFastestModelType_whenInstantiatingParser_thenInstantiateModelWithCorrectParameters", "(", "\n", "self", ",", "download_weights_mock", ",", "embeddings_model_mock", "\n", ")", ":", "\n", "        ", "with", "patch", "(", "\"deepparse.parser.address_parser.FastTextSeq2SeqModel\"", ")", "as", "model_mock", ":", "\n", "            ", "AddressParser", "(", "\n", "model_type", "=", "self", ".", "a_fastest_model_type", ",", "\n", "device", "=", "self", ".", "a_cpu_device", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", ")", "\n", "\n", "model_mock", ".", "assert_called_with", "(", "\n", "cache_dir", "=", "self", ".", "cache_dir", ",", "\n", "device", "=", "self", ".", "a_cpu_torch_device", ",", "\n", "output_size", "=", "self", ".", "number_tags", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", "path_to_retrained_model", "=", "None", ",", "\n", "attention_mechanism", "=", "False", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_address_parser.AddressParserTest.test_givenAFasttextModelType_whenInstantiatingParser_thenInstantiateModelWithCorrectParameters": [[609, 628], ["unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "deepparse.parser.address_parser.AddressParser", "model_mock.assert_called_with"], "methods", ["None"], ["", "", "@", "patch", "(", "\"deepparse.parser.address_parser.download_fasttext_embeddings\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.FastTextEmbeddingsModel\"", ")", "\n", "def", "test_givenAFasttextModelType_whenInstantiatingParser_thenInstantiateModelWithCorrectParameters", "(", "\n", "self", ",", "download_weights_mock", ",", "embeddings_model_mock", "\n", ")", ":", "\n", "        ", "with", "patch", "(", "\"deepparse.parser.address_parser.FastTextSeq2SeqModel\"", ")", "as", "model_mock", ":", "\n", "            ", "AddressParser", "(", "\n", "model_type", "=", "self", ".", "a_fasttext_model_type", ",", "\n", "device", "=", "self", ".", "a_cpu_device", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", ")", "\n", "\n", "model_mock", ".", "assert_called_with", "(", "\n", "cache_dir", "=", "self", ".", "cache_dir", ",", "\n", "device", "=", "self", ".", "a_cpu_torch_device", ",", "\n", "output_size", "=", "self", ".", "number_tags", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", "path_to_retrained_model", "=", "None", ",", "\n", "attention_mechanism", "=", "False", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_address_parser.AddressParserTest.test_givenAFasttextModel_whenAddressParsingAString_thenParseAddress": [[630, 653], ["unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "test_address_parser.AddressParserTest.mock_predictions_vectors", "deepparse.parser.address_parser.AddressParser", "deepparse.parser.address_parser.AddressParser.", "test_address_parser.AddressParserTest.assertIsInstance", "test_address_parser.AddressParserTest.assertEqual"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.base.AddressParserPredictTestCase.mock_predictions_vectors"], ["", "", "@", "patch", "(", "\"deepparse.parser.address_parser.download_fasttext_embeddings\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.FastTextEmbeddingsModel\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.FastTextVectorizer\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.fasttext_data_padding\"", ")", "\n", "def", "test_givenAFasttextModel_whenAddressParsingAString_thenParseAddress", "(", "\n", "self", ",", "\n", "download_weights_mock", ",", "\n", "embeddings_model_mock", ",", "\n", "vectorizer_model_mock", ",", "\n", "data_padding_mock", ",", "\n", ")", ":", "\n", "        ", "with", "patch", "(", "\"deepparse.parser.address_parser.FastTextSeq2SeqModel\"", ")", "as", "model_mock", ":", "\n", "            ", "self", ".", "mock_predictions_vectors", "(", "model_mock", ")", "\n", "address_parser", "=", "AddressParser", "(", "\n", "model_type", "=", "self", ".", "a_fasttext_model_type", ",", "\n", "device", "=", "self", ".", "a_cpu_device", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", ")", "\n", "\n", "parse_address", "=", "address_parser", "(", "self", ".", "a_complete_address", ")", "\n", "\n", "self", ".", "assertIsInstance", "(", "parse_address", ",", "FormattedParsedAddress", ")", "\n", "self", ".", "assertEqual", "(", "parse_address", ".", "raw_address", ",", "self", ".", "a_complete_address", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_address_parser.AddressParserTest.test_givenAFasttextAttModel_whenAddressParsingAString_thenParseAddress": [[654, 678], ["unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "test_address_parser.AddressParserTest.mock_predictions_vectors", "deepparse.parser.address_parser.AddressParser", "deepparse.parser.address_parser.AddressParser.", "test_address_parser.AddressParserTest.assertIsInstance", "test_address_parser.AddressParserTest.assertEqual"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.base.AddressParserPredictTestCase.mock_predictions_vectors"], ["", "", "@", "patch", "(", "\"deepparse.parser.address_parser.download_fasttext_embeddings\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.FastTextEmbeddingsModel\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.FastTextVectorizer\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.fasttext_data_padding\"", ")", "\n", "def", "test_givenAFasttextAttModel_whenAddressParsingAString_thenParseAddress", "(", "\n", "self", ",", "\n", "download_weights_mock", ",", "\n", "embeddings_model_mock", ",", "\n", "vectorizer_model_mock", ",", "\n", "data_padding_mock", ",", "\n", ")", ":", "\n", "        ", "with", "patch", "(", "\"deepparse.parser.address_parser.FastTextSeq2SeqModel\"", ")", "as", "model_mock", ":", "\n", "            ", "self", ".", "mock_predictions_vectors", "(", "model_mock", ")", "\n", "address_parser", "=", "AddressParser", "(", "\n", "model_type", "=", "self", ".", "a_fasttext_model_type", ",", "\n", "device", "=", "self", ".", "a_cpu_device", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", "attention_mechanism", "=", "True", ",", "\n", ")", "\n", "\n", "parse_address", "=", "address_parser", "(", "self", ".", "a_complete_address", ")", "\n", "\n", "self", ".", "assertIsInstance", "(", "parse_address", ",", "FormattedParsedAddress", ")", "\n", "self", ".", "assertEqual", "(", "parse_address", ".", "raw_address", ",", "self", ".", "a_complete_address", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_address_parser.AddressParserTest.test_givenAFasttextModel_whenAddressParsingAListOfAddress_thenParseAllAddress": [[679, 704], ["unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "test_address_parser.AddressParserTest.mock_multiple_predictions_vectors", "deepparse.parser.address_parser.AddressParser", "deepparse.parser.address_parser.AddressParser.", "test_address_parser.AddressParserTest.assertIsInstance", "test_address_parser.AddressParserTest.assertIsInstance", "test_address_parser.AddressParserTest.assertEqual", "test_address_parser.AddressParserTest.assertEqual"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.base.AddressParserPredictTestCase.mock_multiple_predictions_vectors"], ["", "", "@", "patch", "(", "\"deepparse.parser.address_parser.download_fasttext_embeddings\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.FastTextEmbeddingsModel\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.FastTextVectorizer\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.fasttext_data_padding\"", ")", "\n", "def", "test_givenAFasttextModel_whenAddressParsingAListOfAddress_thenParseAllAddress", "(", "\n", "self", ",", "\n", "download_weights_mock", ",", "\n", "embeddings_model_mock", ",", "\n", "vectorizer_model_mock", ",", "\n", "data_padding_mock", ",", "\n", ")", ":", "\n", "        ", "with", "patch", "(", "\"deepparse.parser.address_parser.FastTextSeq2SeqModel\"", ")", "as", "model_mock", ":", "\n", "            ", "self", ".", "mock_multiple_predictions_vectors", "(", "model_mock", ")", "\n", "address_parser", "=", "AddressParser", "(", "\n", "model_type", "=", "self", ".", "a_fasttext_model_type", ",", "\n", "device", "=", "self", ".", "a_cpu_device", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", ")", "\n", "\n", "parse_address", "=", "address_parser", "(", "[", "self", ".", "a_complete_address", ",", "self", ".", "a_complete_address", "]", ")", "\n", "\n", "self", ".", "assertIsInstance", "(", "parse_address", ",", "list", ")", "\n", "self", ".", "assertIsInstance", "(", "parse_address", "[", "0", "]", ",", "FormattedParsedAddress", ")", "\n", "self", ".", "assertEqual", "(", "parse_address", "[", "0", "]", ".", "raw_address", ",", "self", ".", "a_complete_address", ")", "\n", "self", ".", "assertEqual", "(", "parse_address", "[", "1", "]", ".", "raw_address", ",", "self", ".", "a_complete_address", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_address_parser.AddressParserTest.test_givenAFasttextAttModel_whenAddressParsingAListOfAddress_thenParseAllAddress": [[705, 731], ["unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "test_address_parser.AddressParserTest.mock_multiple_predictions_vectors", "deepparse.parser.address_parser.AddressParser", "deepparse.parser.address_parser.AddressParser.", "test_address_parser.AddressParserTest.assertIsInstance", "test_address_parser.AddressParserTest.assertIsInstance", "test_address_parser.AddressParserTest.assertEqual", "test_address_parser.AddressParserTest.assertEqual"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.base.AddressParserPredictTestCase.mock_multiple_predictions_vectors"], ["", "", "@", "patch", "(", "\"deepparse.parser.address_parser.download_fasttext_embeddings\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.FastTextEmbeddingsModel\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.FastTextVectorizer\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.fasttext_data_padding\"", ")", "\n", "def", "test_givenAFasttextAttModel_whenAddressParsingAListOfAddress_thenParseAllAddress", "(", "\n", "self", ",", "\n", "download_weights_mock", ",", "\n", "embeddings_model_mock", ",", "\n", "vectorizer_model_mock", ",", "\n", "data_padding_mock", ",", "\n", ")", ":", "\n", "        ", "with", "patch", "(", "\"deepparse.parser.address_parser.FastTextSeq2SeqModel\"", ")", "as", "model_mock", ":", "\n", "            ", "self", ".", "mock_multiple_predictions_vectors", "(", "model_mock", ")", "\n", "address_parser", "=", "AddressParser", "(", "\n", "model_type", "=", "self", ".", "a_fasttext_model_type", ",", "\n", "device", "=", "self", ".", "a_cpu_device", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", "attention_mechanism", "=", "True", ",", "\n", ")", "\n", "\n", "parse_address", "=", "address_parser", "(", "[", "self", ".", "a_complete_address", ",", "self", ".", "a_complete_address", "]", ")", "\n", "\n", "self", ".", "assertIsInstance", "(", "parse_address", ",", "list", ")", "\n", "self", ".", "assertIsInstance", "(", "parse_address", "[", "0", "]", ",", "FormattedParsedAddress", ")", "\n", "self", ".", "assertEqual", "(", "parse_address", "[", "0", "]", ".", "raw_address", ",", "self", ".", "a_complete_address", ")", "\n", "self", ".", "assertEqual", "(", "parse_address", "[", "1", "]", ".", "raw_address", ",", "self", ".", "a_complete_address", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_address_parser.AddressParserTest.test_givenAFasttextModel_whenAddressParsingAnAddress_thenParseAddressCorrectly": [[732, 760], ["unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "test_address_parser.AddressParserTest.mock_predictions_vectors", "deepparse.parser.address_parser.AddressParser", "deepparse.parser.address_parser.AddressParser.", "test_address_parser.AddressParserTest.assertIsNone", "test_address_parser.AddressParserTest.assertEqual", "test_address_parser.AddressParserTest.assertIsNone", "test_address_parser.AddressParserTest.assertEqual", "test_address_parser.AddressParserTest.assertEqual", "test_address_parser.AddressParserTest.assertEqual", "test_address_parser.AddressParserTest.assertEqual"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.base.AddressParserPredictTestCase.mock_predictions_vectors"], ["", "", "@", "patch", "(", "\"deepparse.parser.address_parser.download_fasttext_embeddings\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.FastTextEmbeddingsModel\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.FastTextVectorizer\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.fasttext_data_padding\"", ")", "\n", "def", "test_givenAFasttextModel_whenAddressParsingAnAddress_thenParseAddressCorrectly", "(", "\n", "self", ",", "\n", "download_weights_mock", ",", "\n", "embeddings_model_mock", ",", "\n", "vectorizer_model_mock", ",", "\n", "data_padding_mock", ",", "\n", ")", ":", "\n", "        ", "with", "patch", "(", "\"deepparse.parser.address_parser.FastTextSeq2SeqModel\"", ")", "as", "model_mock", ":", "\n", "            ", "self", ".", "mock_predictions_vectors", "(", "model_mock", ")", "\n", "address_parser", "=", "AddressParser", "(", "\n", "model_type", "=", "self", ".", "a_fasttext_model_type", ",", "\n", "device", "=", "self", ".", "a_cpu_device", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", ")", "\n", "\n", "parse_address", "=", "address_parser", "(", "self", ".", "a_complete_address", ")", "\n", "\n", "self", ".", "assertIsNone", "(", "parse_address", ".", "GeneralDelivery", ")", "\n", "self", ".", "assertEqual", "(", "parse_address", ".", "Municipality", ",", "self", ".", "a_municipality", ")", "\n", "self", ".", "assertIsNone", "(", "parse_address", ".", "Orientation", ")", "\n", "self", ".", "assertEqual", "(", "parse_address", ".", "PostalCode", ",", "self", ".", "a_postal_code", ")", "\n", "self", ".", "assertEqual", "(", "parse_address", ".", "Province", ",", "self", ".", "a_province", ")", "\n", "self", ".", "assertEqual", "(", "parse_address", ".", "StreetName", ",", "self", ".", "a_street_name", ")", "\n", "self", ".", "assertEqual", "(", "parse_address", ".", "StreetNumber", ",", "self", ".", "a_street_number", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_address_parser.AddressParserTest.test_givenAFasttextAttModel_whenAddressParsingAnAddress_thenParseAddressCorrectly": [[761, 790], ["unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "test_address_parser.AddressParserTest.mock_predictions_vectors", "deepparse.parser.address_parser.AddressParser", "deepparse.parser.address_parser.AddressParser.", "test_address_parser.AddressParserTest.assertIsNone", "test_address_parser.AddressParserTest.assertEqual", "test_address_parser.AddressParserTest.assertIsNone", "test_address_parser.AddressParserTest.assertEqual", "test_address_parser.AddressParserTest.assertEqual", "test_address_parser.AddressParserTest.assertEqual", "test_address_parser.AddressParserTest.assertEqual"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.base.AddressParserPredictTestCase.mock_predictions_vectors"], ["", "", "@", "patch", "(", "\"deepparse.parser.address_parser.download_fasttext_embeddings\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.FastTextEmbeddingsModel\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.FastTextVectorizer\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.fasttext_data_padding\"", ")", "\n", "def", "test_givenAFasttextAttModel_whenAddressParsingAnAddress_thenParseAddressCorrectly", "(", "\n", "self", ",", "\n", "download_weights_mock", ",", "\n", "embeddings_model_mock", ",", "\n", "vectorizer_model_mock", ",", "\n", "data_padding_mock", ",", "\n", ")", ":", "\n", "        ", "with", "patch", "(", "\"deepparse.parser.address_parser.FastTextSeq2SeqModel\"", ")", "as", "model_mock", ":", "\n", "            ", "self", ".", "mock_predictions_vectors", "(", "model_mock", ")", "\n", "address_parser", "=", "AddressParser", "(", "\n", "model_type", "=", "self", ".", "a_fasttext_model_type", ",", "\n", "device", "=", "self", ".", "a_cpu_device", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", "attention_mechanism", "=", "True", ",", "\n", ")", "\n", "\n", "parse_address", "=", "address_parser", "(", "self", ".", "a_complete_address", ")", "\n", "\n", "self", ".", "assertIsNone", "(", "parse_address", ".", "GeneralDelivery", ")", "\n", "self", ".", "assertEqual", "(", "parse_address", ".", "Municipality", ",", "self", ".", "a_municipality", ")", "\n", "self", ".", "assertIsNone", "(", "parse_address", ".", "Orientation", ")", "\n", "self", ".", "assertEqual", "(", "parse_address", ".", "PostalCode", ",", "self", ".", "a_postal_code", ")", "\n", "self", ".", "assertEqual", "(", "parse_address", ".", "Province", ",", "self", ".", "a_province", ")", "\n", "self", ".", "assertEqual", "(", "parse_address", ".", "StreetName", ",", "self", ".", "a_street_name", ")", "\n", "self", ".", "assertEqual", "(", "parse_address", ".", "StreetNumber", ",", "self", ".", "a_street_number", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_address_parser.AddressParserTest.test_givenAMagnitudeModel_whenAddressParsingAString_thenParseAddress": [[791, 814], ["unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "test_address_parser.AddressParserTest.mock_predictions_vectors", "deepparse.parser.address_parser.AddressParser", "deepparse.parser.address_parser.AddressParser.", "test_address_parser.AddressParserTest.assertIsInstance", "test_address_parser.AddressParserTest.assertEqual"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.base.AddressParserPredictTestCase.mock_predictions_vectors"], ["", "", "@", "patch", "(", "\"deepparse.parser.address_parser.download_fasttext_magnitude_embeddings\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.MagnitudeEmbeddingsModel\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.MagnitudeVectorizer\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.fasttext_data_padding\"", ")", "\n", "def", "test_givenAMagnitudeModel_whenAddressParsingAString_thenParseAddress", "(", "\n", "self", ",", "\n", "download_weights_mock", ",", "\n", "embeddings_model_mock", ",", "\n", "vectorizer_model_mock", ",", "\n", "data_padding_mock", ",", "\n", ")", ":", "\n", "        ", "with", "patch", "(", "\"deepparse.parser.address_parser.FastTextSeq2SeqModel\"", ")", "as", "model_mock", ":", "\n", "            ", "self", ".", "mock_predictions_vectors", "(", "model_mock", ")", "\n", "address_parser", "=", "AddressParser", "(", "\n", "model_type", "=", "self", ".", "a_fasttext_light_model_type", ",", "\n", "device", "=", "self", ".", "a_cpu_device", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", ")", "\n", "\n", "parse_address", "=", "address_parser", "(", "self", ".", "a_complete_address", ")", "\n", "\n", "self", ".", "assertIsInstance", "(", "parse_address", ",", "FormattedParsedAddress", ")", "\n", "self", ".", "assertEqual", "(", "parse_address", ".", "raw_address", ",", "self", ".", "a_complete_address", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_address_parser.AddressParserTest.test_givenAMagnitudeAttModel_whenAddressParsingAString_thenParseAddress": [[815, 839], ["unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "test_address_parser.AddressParserTest.mock_predictions_vectors", "deepparse.parser.address_parser.AddressParser", "deepparse.parser.address_parser.AddressParser.", "test_address_parser.AddressParserTest.assertIsInstance", "test_address_parser.AddressParserTest.assertEqual"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.base.AddressParserPredictTestCase.mock_predictions_vectors"], ["", "", "@", "patch", "(", "\"deepparse.parser.address_parser.download_fasttext_magnitude_embeddings\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.MagnitudeEmbeddingsModel\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.MagnitudeVectorizer\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.fasttext_data_padding\"", ")", "\n", "def", "test_givenAMagnitudeAttModel_whenAddressParsingAString_thenParseAddress", "(", "\n", "self", ",", "\n", "download_weights_mock", ",", "\n", "embeddings_model_mock", ",", "\n", "vectorizer_model_mock", ",", "\n", "data_padding_mock", ",", "\n", ")", ":", "\n", "        ", "with", "patch", "(", "\"deepparse.parser.address_parser.FastTextSeq2SeqModel\"", ")", "as", "model_mock", ":", "\n", "            ", "self", ".", "mock_predictions_vectors", "(", "model_mock", ")", "\n", "address_parser", "=", "AddressParser", "(", "\n", "model_type", "=", "self", ".", "a_fasttext_light_model_type", ",", "\n", "device", "=", "self", ".", "a_cpu_device", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", "attention_mechanism", "=", "True", ",", "\n", ")", "\n", "\n", "parse_address", "=", "address_parser", "(", "self", ".", "a_complete_address", ")", "\n", "\n", "self", ".", "assertIsInstance", "(", "parse_address", ",", "FormattedParsedAddress", ")", "\n", "self", ".", "assertEqual", "(", "parse_address", ".", "raw_address", ",", "self", ".", "a_complete_address", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_address_parser.AddressParserTest.test_givenAMagnitudeModel_whenAddressParsingAListOfAddress_thenParseAllAddress": [[840, 865], ["unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "test_address_parser.AddressParserTest.mock_multiple_predictions_vectors", "deepparse.parser.address_parser.AddressParser", "deepparse.parser.address_parser.AddressParser.", "test_address_parser.AddressParserTest.assertIsInstance", "test_address_parser.AddressParserTest.assertIsInstance", "test_address_parser.AddressParserTest.assertEqual", "test_address_parser.AddressParserTest.assertEqual"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.base.AddressParserPredictTestCase.mock_multiple_predictions_vectors"], ["", "", "@", "patch", "(", "\"deepparse.parser.address_parser.download_fasttext_magnitude_embeddings\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.MagnitudeEmbeddingsModel\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.MagnitudeVectorizer\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.fasttext_data_padding\"", ")", "\n", "def", "test_givenAMagnitudeModel_whenAddressParsingAListOfAddress_thenParseAllAddress", "(", "\n", "self", ",", "\n", "download_weights_mock", ",", "\n", "embeddings_model_mock", ",", "\n", "vectorizer_model_mock", ",", "\n", "data_padding_mock", ",", "\n", ")", ":", "\n", "        ", "with", "patch", "(", "\"deepparse.parser.address_parser.FastTextSeq2SeqModel\"", ")", "as", "model_mock", ":", "\n", "            ", "self", ".", "mock_multiple_predictions_vectors", "(", "model_mock", ")", "\n", "address_parser", "=", "AddressParser", "(", "\n", "model_type", "=", "self", ".", "a_fasttext_light_model_type", ",", "\n", "device", "=", "self", ".", "a_cpu_device", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", ")", "\n", "\n", "parse_address", "=", "address_parser", "(", "[", "self", ".", "a_complete_address", ",", "self", ".", "a_complete_address", "]", ")", "\n", "\n", "self", ".", "assertIsInstance", "(", "parse_address", ",", "list", ")", "\n", "self", ".", "assertIsInstance", "(", "parse_address", "[", "0", "]", ",", "FormattedParsedAddress", ")", "\n", "self", ".", "assertEqual", "(", "parse_address", "[", "0", "]", ".", "raw_address", ",", "self", ".", "a_complete_address", ")", "\n", "self", ".", "assertEqual", "(", "parse_address", "[", "1", "]", ".", "raw_address", ",", "self", ".", "a_complete_address", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_address_parser.AddressParserTest.test_givenAMagnitudeAttModel_whenAddressParsingAListOfAddress_thenParseAllAddress": [[866, 892], ["unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "test_address_parser.AddressParserTest.mock_multiple_predictions_vectors", "deepparse.parser.address_parser.AddressParser", "deepparse.parser.address_parser.AddressParser.", "test_address_parser.AddressParserTest.assertIsInstance", "test_address_parser.AddressParserTest.assertIsInstance", "test_address_parser.AddressParserTest.assertEqual", "test_address_parser.AddressParserTest.assertEqual"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.base.AddressParserPredictTestCase.mock_multiple_predictions_vectors"], ["", "", "@", "patch", "(", "\"deepparse.parser.address_parser.download_fasttext_magnitude_embeddings\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.MagnitudeEmbeddingsModel\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.MagnitudeVectorizer\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.fasttext_data_padding\"", ")", "\n", "def", "test_givenAMagnitudeAttModel_whenAddressParsingAListOfAddress_thenParseAllAddress", "(", "\n", "self", ",", "\n", "download_weights_mock", ",", "\n", "embeddings_model_mock", ",", "\n", "vectorizer_model_mock", ",", "\n", "data_padding_mock", ",", "\n", ")", ":", "\n", "        ", "with", "patch", "(", "\"deepparse.parser.address_parser.FastTextSeq2SeqModel\"", ")", "as", "model_mock", ":", "\n", "            ", "self", ".", "mock_multiple_predictions_vectors", "(", "model_mock", ")", "\n", "address_parser", "=", "AddressParser", "(", "\n", "model_type", "=", "self", ".", "a_fasttext_light_model_type", ",", "\n", "device", "=", "self", ".", "a_cpu_device", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", "attention_mechanism", "=", "True", ",", "\n", ")", "\n", "\n", "parse_address", "=", "address_parser", "(", "[", "self", ".", "a_complete_address", ",", "self", ".", "a_complete_address", "]", ")", "\n", "\n", "self", ".", "assertIsInstance", "(", "parse_address", ",", "list", ")", "\n", "self", ".", "assertIsInstance", "(", "parse_address", "[", "0", "]", ",", "FormattedParsedAddress", ")", "\n", "self", ".", "assertEqual", "(", "parse_address", "[", "0", "]", ".", "raw_address", ",", "self", ".", "a_complete_address", ")", "\n", "self", ".", "assertEqual", "(", "parse_address", "[", "1", "]", ".", "raw_address", ",", "self", ".", "a_complete_address", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_address_parser.AddressParserTest.test_givenAMagnitudeModel_whenAddressParsingAnAddress_thenParseAddressCorrectly": [[893, 921], ["unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "test_address_parser.AddressParserTest.mock_predictions_vectors", "deepparse.parser.address_parser.AddressParser", "deepparse.parser.address_parser.AddressParser.", "test_address_parser.AddressParserTest.assertIsNone", "test_address_parser.AddressParserTest.assertEqual", "test_address_parser.AddressParserTest.assertIsNone", "test_address_parser.AddressParserTest.assertEqual", "test_address_parser.AddressParserTest.assertEqual", "test_address_parser.AddressParserTest.assertEqual", "test_address_parser.AddressParserTest.assertEqual"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.base.AddressParserPredictTestCase.mock_predictions_vectors"], ["", "", "@", "patch", "(", "\"deepparse.parser.address_parser.download_fasttext_magnitude_embeddings\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.MagnitudeEmbeddingsModel\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.MagnitudeVectorizer\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.fasttext_data_padding\"", ")", "\n", "def", "test_givenAMagnitudeModel_whenAddressParsingAnAddress_thenParseAddressCorrectly", "(", "\n", "self", ",", "\n", "download_weights_mock", ",", "\n", "embeddings_model_mock", ",", "\n", "vectorizer_model_mock", ",", "\n", "data_padding_mock", ",", "\n", ")", ":", "\n", "        ", "with", "patch", "(", "\"deepparse.parser.address_parser.FastTextSeq2SeqModel\"", ")", "as", "model_mock", ":", "\n", "            ", "self", ".", "mock_predictions_vectors", "(", "model_mock", ")", "\n", "address_parser", "=", "AddressParser", "(", "\n", "model_type", "=", "self", ".", "a_fasttext_light_model_type", ",", "\n", "device", "=", "self", ".", "a_cpu_device", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", ")", "\n", "\n", "parse_address", "=", "address_parser", "(", "self", ".", "a_complete_address", ")", "\n", "\n", "self", ".", "assertIsNone", "(", "parse_address", ".", "GeneralDelivery", ")", "\n", "self", ".", "assertEqual", "(", "parse_address", ".", "Municipality", ",", "self", ".", "a_municipality", ")", "\n", "self", ".", "assertIsNone", "(", "parse_address", ".", "Orientation", ")", "\n", "self", ".", "assertEqual", "(", "parse_address", ".", "PostalCode", ",", "self", ".", "a_postal_code", ")", "\n", "self", ".", "assertEqual", "(", "parse_address", ".", "Province", ",", "self", ".", "a_province", ")", "\n", "self", ".", "assertEqual", "(", "parse_address", ".", "StreetName", ",", "self", ".", "a_street_name", ")", "\n", "self", ".", "assertEqual", "(", "parse_address", ".", "StreetNumber", ",", "self", ".", "a_street_number", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_address_parser.AddressParserTest.test_givenAMagnitudeAttModel_whenAddressParsingAnAddress_thenParseAddressCorrectly": [[922, 951], ["unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "test_address_parser.AddressParserTest.mock_predictions_vectors", "deepparse.parser.address_parser.AddressParser", "deepparse.parser.address_parser.AddressParser.", "test_address_parser.AddressParserTest.assertIsNone", "test_address_parser.AddressParserTest.assertEqual", "test_address_parser.AddressParserTest.assertIsNone", "test_address_parser.AddressParserTest.assertEqual", "test_address_parser.AddressParserTest.assertEqual", "test_address_parser.AddressParserTest.assertEqual", "test_address_parser.AddressParserTest.assertEqual"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.base.AddressParserPredictTestCase.mock_predictions_vectors"], ["", "", "@", "patch", "(", "\"deepparse.parser.address_parser.download_fasttext_magnitude_embeddings\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.MagnitudeEmbeddingsModel\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.MagnitudeVectorizer\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.fasttext_data_padding\"", ")", "\n", "def", "test_givenAMagnitudeAttModel_whenAddressParsingAnAddress_thenParseAddressCorrectly", "(", "\n", "self", ",", "\n", "download_weights_mock", ",", "\n", "embeddings_model_mock", ",", "\n", "vectorizer_model_mock", ",", "\n", "data_padding_mock", ",", "\n", ")", ":", "\n", "        ", "with", "patch", "(", "\"deepparse.parser.address_parser.FastTextSeq2SeqModel\"", ")", "as", "model_mock", ":", "\n", "            ", "self", ".", "mock_predictions_vectors", "(", "model_mock", ")", "\n", "address_parser", "=", "AddressParser", "(", "\n", "model_type", "=", "self", ".", "a_fasttext_light_model_type", ",", "\n", "device", "=", "self", ".", "a_cpu_device", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", "attention_mechanism", "=", "True", ",", "\n", ")", "\n", "\n", "parse_address", "=", "address_parser", "(", "self", ".", "a_complete_address", ")", "\n", "\n", "self", ".", "assertIsNone", "(", "parse_address", ".", "GeneralDelivery", ")", "\n", "self", ".", "assertEqual", "(", "parse_address", ".", "Municipality", ",", "self", ".", "a_municipality", ")", "\n", "self", ".", "assertIsNone", "(", "parse_address", ".", "Orientation", ")", "\n", "self", ".", "assertEqual", "(", "parse_address", ".", "PostalCode", ",", "self", ".", "a_postal_code", ")", "\n", "self", ".", "assertEqual", "(", "parse_address", ".", "Province", ",", "self", ".", "a_province", ")", "\n", "self", ".", "assertEqual", "(", "parse_address", ".", "StreetName", ",", "self", ".", "a_street_name", ")", "\n", "self", ".", "assertEqual", "(", "parse_address", ".", "StreetNumber", ",", "self", ".", "a_street_number", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_address_parser.AddressParserTest.test_givenABPEmbModel_whenAddressParsingAString_thenParseAddress": [[952, 970], ["unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "test_address_parser.AddressParserTest.mock_predictions_vectors", "deepparse.parser.address_parser.AddressParser", "deepparse.parser.address_parser.AddressParser.", "test_address_parser.AddressParserTest.assertIsInstance", "test_address_parser.AddressParserTest.assertEqual"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.base.AddressParserPredictTestCase.mock_predictions_vectors"], ["", "", "@", "patch", "(", "\"deepparse.parser.address_parser.BPEmbEmbeddingsModel\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.BPEmbVectorizer\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.bpemb_data_padding\"", ")", "\n", "def", "test_givenABPEmbModel_whenAddressParsingAString_thenParseAddress", "(", "\n", "self", ",", "embeddings_model_mock", ",", "vectorizer_model_mock", ",", "data_padding_mock", "\n", ")", ":", "\n", "        ", "with", "patch", "(", "\"deepparse.parser.address_parser.BPEmbSeq2SeqModel\"", ")", "as", "model_mock", ":", "\n", "            ", "self", ".", "mock_predictions_vectors", "(", "model_mock", ")", "\n", "address_parser", "=", "AddressParser", "(", "\n", "model_type", "=", "self", ".", "a_bpemb_model_type", ",", "\n", "device", "=", "self", ".", "a_cpu_device", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", ")", "\n", "\n", "parse_address", "=", "address_parser", "(", "self", ".", "a_complete_address", ")", "\n", "\n", "self", ".", "assertIsInstance", "(", "parse_address", ",", "FormattedParsedAddress", ")", "\n", "self", ".", "assertEqual", "(", "parse_address", ".", "raw_address", ",", "self", ".", "a_complete_address", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_address_parser.AddressParserTest.test_givenABPEmbAttModel_whenAddressParsingAString_thenParseAddress": [[971, 990], ["unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "test_address_parser.AddressParserTest.mock_predictions_vectors", "deepparse.parser.address_parser.AddressParser", "deepparse.parser.address_parser.AddressParser.", "test_address_parser.AddressParserTest.assertIsInstance", "test_address_parser.AddressParserTest.assertEqual"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.base.AddressParserPredictTestCase.mock_predictions_vectors"], ["", "", "@", "patch", "(", "\"deepparse.parser.address_parser.BPEmbEmbeddingsModel\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.BPEmbVectorizer\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.bpemb_data_padding\"", ")", "\n", "def", "test_givenABPEmbAttModel_whenAddressParsingAString_thenParseAddress", "(", "\n", "self", ",", "embeddings_model_mock", ",", "vectorizer_model_mock", ",", "data_padding_mock", "\n", ")", ":", "\n", "        ", "with", "patch", "(", "\"deepparse.parser.address_parser.BPEmbSeq2SeqModel\"", ")", "as", "model_mock", ":", "\n", "            ", "self", ".", "mock_predictions_vectors", "(", "model_mock", ")", "\n", "address_parser", "=", "AddressParser", "(", "\n", "model_type", "=", "self", ".", "a_bpemb_model_type", ",", "\n", "device", "=", "self", ".", "a_cpu_device", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", "attention_mechanism", "=", "True", ",", "\n", ")", "\n", "\n", "parse_address", "=", "address_parser", "(", "self", ".", "a_complete_address", ")", "\n", "\n", "self", ".", "assertIsInstance", "(", "parse_address", ",", "FormattedParsedAddress", ")", "\n", "self", ".", "assertEqual", "(", "parse_address", ".", "raw_address", ",", "self", ".", "a_complete_address", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_address_parser.AddressParserTest.test_givenABPEmbModel_whenAddressParsingAListOfAddress_thenParseAllAddress": [[991, 1011], ["unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "test_address_parser.AddressParserTest.mock_multiple_predictions_vectors", "deepparse.parser.address_parser.AddressParser", "deepparse.parser.address_parser.AddressParser.", "test_address_parser.AddressParserTest.assertIsInstance", "test_address_parser.AddressParserTest.assertIsInstance", "test_address_parser.AddressParserTest.assertEqual", "test_address_parser.AddressParserTest.assertEqual"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.base.AddressParserPredictTestCase.mock_multiple_predictions_vectors"], ["", "", "@", "patch", "(", "\"deepparse.parser.address_parser.BPEmbEmbeddingsModel\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.BPEmbVectorizer\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.bpemb_data_padding\"", ")", "\n", "def", "test_givenABPEmbModel_whenAddressParsingAListOfAddress_thenParseAllAddress", "(", "\n", "self", ",", "embeddings_model_mock", ",", "vectorizer_model_mock", ",", "data_padding_mock", "\n", ")", ":", "\n", "        ", "with", "patch", "(", "\"deepparse.parser.address_parser.BPEmbSeq2SeqModel\"", ")", "as", "model_mock", ":", "\n", "            ", "self", ".", "mock_multiple_predictions_vectors", "(", "model_mock", ")", "\n", "address_parser", "=", "AddressParser", "(", "\n", "model_type", "=", "self", ".", "a_bpemb_model_type", ",", "\n", "device", "=", "self", ".", "a_cpu_device", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", ")", "\n", "\n", "parse_address", "=", "address_parser", "(", "[", "self", ".", "a_complete_address", ",", "self", ".", "a_complete_address", "]", ")", "\n", "\n", "self", ".", "assertIsInstance", "(", "parse_address", ",", "list", ")", "\n", "self", ".", "assertIsInstance", "(", "parse_address", "[", "0", "]", ",", "FormattedParsedAddress", ")", "\n", "self", ".", "assertEqual", "(", "parse_address", "[", "0", "]", ".", "raw_address", ",", "self", ".", "a_complete_address", ")", "\n", "self", ".", "assertEqual", "(", "parse_address", "[", "1", "]", ".", "raw_address", ",", "self", ".", "a_complete_address", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_address_parser.AddressParserTest.test_givenABPEmbAttModel_whenAddressParsingAListOfAddress_thenParseAllAddress": [[1012, 1033], ["unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "test_address_parser.AddressParserTest.mock_multiple_predictions_vectors", "deepparse.parser.address_parser.AddressParser", "deepparse.parser.address_parser.AddressParser.", "test_address_parser.AddressParserTest.assertIsInstance", "test_address_parser.AddressParserTest.assertIsInstance", "test_address_parser.AddressParserTest.assertEqual", "test_address_parser.AddressParserTest.assertEqual"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.base.AddressParserPredictTestCase.mock_multiple_predictions_vectors"], ["", "", "@", "patch", "(", "\"deepparse.parser.address_parser.BPEmbEmbeddingsModel\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.BPEmbVectorizer\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.bpemb_data_padding\"", ")", "\n", "def", "test_givenABPEmbAttModel_whenAddressParsingAListOfAddress_thenParseAllAddress", "(", "\n", "self", ",", "embeddings_model_mock", ",", "vectorizer_model_mock", ",", "data_padding_mock", "\n", ")", ":", "\n", "        ", "with", "patch", "(", "\"deepparse.parser.address_parser.BPEmbSeq2SeqModel\"", ")", "as", "model_mock", ":", "\n", "            ", "self", ".", "mock_multiple_predictions_vectors", "(", "model_mock", ")", "\n", "address_parser", "=", "AddressParser", "(", "\n", "model_type", "=", "self", ".", "a_bpemb_model_type", ",", "\n", "device", "=", "self", ".", "a_cpu_device", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", "attention_mechanism", "=", "True", ",", "\n", ")", "\n", "\n", "parse_address", "=", "address_parser", "(", "[", "self", ".", "a_complete_address", ",", "self", ".", "a_complete_address", "]", ")", "\n", "\n", "self", ".", "assertIsInstance", "(", "parse_address", ",", "list", ")", "\n", "self", ".", "assertIsInstance", "(", "parse_address", "[", "0", "]", ",", "FormattedParsedAddress", ")", "\n", "self", ".", "assertEqual", "(", "parse_address", "[", "0", "]", ".", "raw_address", ",", "self", ".", "a_complete_address", ")", "\n", "self", ".", "assertEqual", "(", "parse_address", "[", "1", "]", ".", "raw_address", ",", "self", ".", "a_complete_address", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_address_parser.AddressParserTest.test_givenABPEmbModel_whenAddressParsingAnAddress_thenParseAddressCorrectly": [[1034, 1057], ["unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "test_address_parser.AddressParserTest.mock_predictions_vectors", "deepparse.parser.address_parser.AddressParser", "deepparse.parser.address_parser.AddressParser.", "test_address_parser.AddressParserTest.assertIsNone", "test_address_parser.AddressParserTest.assertEqual", "test_address_parser.AddressParserTest.assertIsNone", "test_address_parser.AddressParserTest.assertEqual", "test_address_parser.AddressParserTest.assertEqual", "test_address_parser.AddressParserTest.assertEqual", "test_address_parser.AddressParserTest.assertEqual"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.base.AddressParserPredictTestCase.mock_predictions_vectors"], ["", "", "@", "patch", "(", "\"deepparse.parser.address_parser.BPEmbEmbeddingsModel\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.BPEmbVectorizer\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.bpemb_data_padding\"", ")", "\n", "def", "test_givenABPEmbModel_whenAddressParsingAnAddress_thenParseAddressCorrectly", "(", "\n", "self", ",", "embeddings_model_mock", ",", "vectorizer_model_mock", ",", "data_padding_mock", "\n", ")", ":", "\n", "        ", "with", "patch", "(", "\"deepparse.parser.address_parser.BPEmbSeq2SeqModel\"", ")", "as", "model_mock", ":", "\n", "            ", "self", ".", "mock_predictions_vectors", "(", "model_mock", ")", "\n", "address_parser", "=", "AddressParser", "(", "\n", "model_type", "=", "self", ".", "a_bpemb_model_type", ",", "\n", "device", "=", "self", ".", "a_cpu_device", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", ")", "\n", "\n", "parse_address", "=", "address_parser", "(", "self", ".", "a_complete_address", ")", "\n", "\n", "self", ".", "assertIsNone", "(", "parse_address", ".", "GeneralDelivery", ")", "\n", "self", ".", "assertEqual", "(", "parse_address", ".", "Municipality", ",", "self", ".", "a_municipality", ")", "\n", "self", ".", "assertIsNone", "(", "parse_address", ".", "Orientation", ")", "\n", "self", ".", "assertEqual", "(", "parse_address", ".", "PostalCode", ",", "self", ".", "a_postal_code", ")", "\n", "self", ".", "assertEqual", "(", "parse_address", ".", "Province", ",", "self", ".", "a_province", ")", "\n", "self", ".", "assertEqual", "(", "parse_address", ".", "StreetName", ",", "self", ".", "a_street_name", ")", "\n", "self", ".", "assertEqual", "(", "parse_address", ".", "StreetNumber", ",", "self", ".", "a_street_number", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_address_parser.AddressParserTest.test_givenABPEmbAttModel_whenAddressParsingAnAddress_thenParseAddressCorrectly": [[1058, 1082], ["unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "test_address_parser.AddressParserTest.mock_predictions_vectors", "deepparse.parser.address_parser.AddressParser", "deepparse.parser.address_parser.AddressParser.", "test_address_parser.AddressParserTest.assertIsNone", "test_address_parser.AddressParserTest.assertEqual", "test_address_parser.AddressParserTest.assertIsNone", "test_address_parser.AddressParserTest.assertEqual", "test_address_parser.AddressParserTest.assertEqual", "test_address_parser.AddressParserTest.assertEqual", "test_address_parser.AddressParserTest.assertEqual"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.base.AddressParserPredictTestCase.mock_predictions_vectors"], ["", "", "@", "patch", "(", "\"deepparse.parser.address_parser.BPEmbEmbeddingsModel\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.BPEmbVectorizer\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.bpemb_data_padding\"", ")", "\n", "def", "test_givenABPEmbAttModel_whenAddressParsingAnAddress_thenParseAddressCorrectly", "(", "\n", "self", ",", "embeddings_model_mock", ",", "vectorizer_model_mock", ",", "data_padding_mock", "\n", ")", ":", "\n", "        ", "with", "patch", "(", "\"deepparse.parser.address_parser.BPEmbSeq2SeqModel\"", ")", "as", "model_mock", ":", "\n", "            ", "self", ".", "mock_predictions_vectors", "(", "model_mock", ")", "\n", "address_parser", "=", "AddressParser", "(", "\n", "model_type", "=", "self", ".", "a_bpemb_model_type", ",", "\n", "device", "=", "self", ".", "a_cpu_device", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", "attention_mechanism", "=", "True", ",", "\n", ")", "\n", "\n", "parse_address", "=", "address_parser", "(", "self", ".", "a_complete_address", ")", "\n", "\n", "self", ".", "assertIsNone", "(", "parse_address", ".", "GeneralDelivery", ")", "\n", "self", ".", "assertEqual", "(", "parse_address", ".", "Municipality", ",", "self", ".", "a_municipality", ")", "\n", "self", ".", "assertIsNone", "(", "parse_address", ".", "Orientation", ")", "\n", "self", ".", "assertEqual", "(", "parse_address", ".", "PostalCode", ",", "self", ".", "a_postal_code", ")", "\n", "self", ".", "assertEqual", "(", "parse_address", ".", "Province", ",", "self", ".", "a_province", ")", "\n", "self", ".", "assertEqual", "(", "parse_address", ".", "StreetName", ",", "self", ".", "a_street_name", ")", "\n", "self", ".", "assertEqual", "(", "parse_address", ".", "StreetNumber", ",", "self", ".", "a_street_number", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_address_parser.AddressParserTest.test_givenABPEmbModel_whenAddressParsingAnAddressVerbose_thenVerbose": [[1083, 1106], ["unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "test_address_parser.AddressParserTest._capture_output", "unittest.mock.patch", "unittest.mock.patch", "test_address_parser.AddressParserTest.mock_predictions_vectors", "deepparse.parser.address_parser.AddressParser", "deepparse.parser.address_parser.AddressParser.", "test_address_parser.AddressParserTest.test_out.getvalue().strip", "test_address_parser.AddressParserTest.assertEqual", "test_address_parser.AddressParserTest.test_out.getvalue"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.tests.base_capture_output.CaptureOutputTestCase._capture_output", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.base.AddressParserPredictTestCase.mock_predictions_vectors"], ["", "", "@", "patch", "(", "\"deepparse.parser.address_parser.BPEmbEmbeddingsModel\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.BPEmbVectorizer\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.bpemb_data_padding\"", ")", "\n", "def", "test_givenABPEmbModel_whenAddressParsingAnAddressVerbose_thenVerbose", "(", "\n", "self", ",", "embeddings_model_mock", ",", "vectorizer_model_mock", ",", "data_padding_mock", "\n", ")", ":", "\n", "        ", "self", ".", "_capture_output", "(", ")", "\n", "with", "patch", "(", "\"deepparse.parser.address_parser.BPEmbSeq2SeqModel\"", ")", "as", "model_mock", ":", "\n", "            ", "with", "patch", "(", "\n", "\"deepparse.parser.address_parser.PREDICTION_TIME_PERFORMANCE_THRESHOLD\"", ",", "\n", "0", ",", "\n", ")", ":", "\n", "                ", "self", ".", "mock_predictions_vectors", "(", "model_mock", ")", "\n", "address_parser", "=", "AddressParser", "(", "\n", "model_type", "=", "self", ".", "a_bpemb_model_type", ",", "\n", "device", "=", "self", ".", "a_cpu_device", ",", "\n", "verbose", "=", "True", ",", "\n", ")", "\n", "\n", "address_parser", "(", "self", ".", "a_complete_address", ")", "\n", "actual", "=", "self", ".", "test_out", ".", "getvalue", "(", ")", ".", "strip", "(", ")", "\n", "expect", "=", "\"Vectorizing the address\"", "\n", "self", ".", "assertEqual", "(", "actual", ",", "expect", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_address_parser.AddressParserTest.test_givenABPEmbAttModel_whenAddressParsingAnAddressVerbose_thenVerbose": [[1107, 1131], ["unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "test_address_parser.AddressParserTest._capture_output", "unittest.mock.patch", "unittest.mock.patch", "test_address_parser.AddressParserTest.mock_predictions_vectors", "deepparse.parser.address_parser.AddressParser", "deepparse.parser.address_parser.AddressParser.", "test_address_parser.AddressParserTest.test_out.getvalue().strip", "test_address_parser.AddressParserTest.assertEqual", "test_address_parser.AddressParserTest.test_out.getvalue"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.tests.base_capture_output.CaptureOutputTestCase._capture_output", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.base.AddressParserPredictTestCase.mock_predictions_vectors"], ["", "", "", "@", "patch", "(", "\"deepparse.parser.address_parser.BPEmbEmbeddingsModel\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.BPEmbVectorizer\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.bpemb_data_padding\"", ")", "\n", "def", "test_givenABPEmbAttModel_whenAddressParsingAnAddressVerbose_thenVerbose", "(", "\n", "self", ",", "embeddings_model_mock", ",", "vectorizer_model_mock", ",", "data_padding_mock", "\n", ")", ":", "\n", "        ", "self", ".", "_capture_output", "(", ")", "\n", "with", "patch", "(", "\"deepparse.parser.address_parser.BPEmbSeq2SeqModel\"", ")", "as", "model_mock", ":", "\n", "            ", "with", "patch", "(", "\n", "\"deepparse.parser.address_parser.PREDICTION_TIME_PERFORMANCE_THRESHOLD\"", ",", "\n", "0", ",", "\n", ")", ":", "\n", "                ", "self", ".", "mock_predictions_vectors", "(", "model_mock", ")", "\n", "address_parser", "=", "AddressParser", "(", "\n", "model_type", "=", "self", ".", "a_bpemb_model_type", ",", "\n", "device", "=", "self", ".", "a_cpu_device", ",", "\n", "verbose", "=", "True", ",", "\n", "attention_mechanism", "=", "True", ",", "\n", ")", "\n", "\n", "address_parser", "(", "self", ".", "a_complete_address", ")", "\n", "actual", "=", "self", ".", "test_out", ".", "getvalue", "(", ")", ".", "strip", "(", ")", "\n", "expect", "=", "\"Vectorizing the address\"", "\n", "self", ".", "assertEqual", "(", "actual", ",", "expect", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_address_parser.AddressParserTest.test_givenAnBPEmbAddressParser_whenStrAddressParser_thenStringIsModelTypeAddressParse": [[1132, 1150], ["unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "test_address_parser.AddressParserTest._capture_output", "unittest.mock.patch", "test_address_parser.AddressParserTest.mock_predictions_vectors", "deepparse.parser.address_parser.AddressParser", "print", "test_address_parser.AddressParserTest.assertEqual", "test_address_parser.AddressParserTest.test_out.getvalue().strip", "test_address_parser.AddressParserTest.test_out.getvalue"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.tests.base_capture_output.CaptureOutputTestCase._capture_output", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.base.AddressParserPredictTestCase.mock_predictions_vectors"], ["", "", "", "@", "patch", "(", "\"deepparse.parser.address_parser.BPEmbEmbeddingsModel\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.BPEmbVectorizer\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.bpemb_data_padding\"", ")", "\n", "def", "test_givenAnBPEmbAddressParser_whenStrAddressParser_thenStringIsModelTypeAddressParse", "(", "\n", "self", ",", "embeddings_model_mock", ",", "vectorizer_model_mock", ",", "data_padding_mock", "\n", ")", ":", "\n", "        ", "self", ".", "_capture_output", "(", ")", "\n", "\n", "with", "patch", "(", "\"deepparse.parser.address_parser.BPEmbSeq2SeqModel\"", ")", "as", "model_mock", ":", "\n", "            ", "self", ".", "mock_predictions_vectors", "(", "model_mock", ")", "\n", "address_parser", "=", "AddressParser", "(", "\n", "model_type", "=", "self", ".", "a_bpemb_model_type", ",", "\n", "device", "=", "self", ".", "a_cpu_device", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", ")", "\n", "print", "(", "address_parser", ")", "\n", "\n", "self", ".", "assertEqual", "(", "self", ".", "a_BPEmb_name", ",", "self", ".", "test_out", ".", "getvalue", "(", ")", ".", "strip", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_address_parser.AddressParserTest.test_givenAnBPEmbAttAddressParser_whenStrAddressParser_thenStringIsModelTypeAddressParse": [[1151, 1170], ["unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "test_address_parser.AddressParserTest._capture_output", "unittest.mock.patch", "test_address_parser.AddressParserTest.mock_predictions_vectors", "deepparse.parser.address_parser.AddressParser", "print", "test_address_parser.AddressParserTest.assertEqual", "test_address_parser.AddressParserTest.test_out.getvalue().strip", "test_address_parser.AddressParserTest.test_out.getvalue"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.tests.base_capture_output.CaptureOutputTestCase._capture_output", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.base.AddressParserPredictTestCase.mock_predictions_vectors"], ["", "", "@", "patch", "(", "\"deepparse.parser.address_parser.BPEmbEmbeddingsModel\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.BPEmbVectorizer\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.bpemb_data_padding\"", ")", "\n", "def", "test_givenAnBPEmbAttAddressParser_whenStrAddressParser_thenStringIsModelTypeAddressParse", "(", "\n", "self", ",", "embeddings_model_mock", ",", "vectorizer_model_mock", ",", "data_padding_mock", "\n", ")", ":", "\n", "        ", "self", ".", "_capture_output", "(", ")", "\n", "\n", "with", "patch", "(", "\"deepparse.parser.address_parser.BPEmbSeq2SeqModel\"", ")", "as", "model_mock", ":", "\n", "            ", "self", ".", "mock_predictions_vectors", "(", "model_mock", ")", "\n", "address_parser", "=", "AddressParser", "(", "\n", "model_type", "=", "self", ".", "a_bpemb_model_type", ",", "\n", "device", "=", "self", ".", "a_cpu_device", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", "attention_mechanism", "=", "True", ",", "\n", ")", "\n", "print", "(", "address_parser", ")", "\n", "\n", "self", ".", "assertEqual", "(", "self", ".", "a_BPEmb_att_name", ",", "self", ".", "test_out", ".", "getvalue", "(", ")", ".", "strip", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_address_parser.AddressParserTest.test_givenAnBPEmbAddressParser_whenReprAddressParser_thenStringIsModelTypeAddressParse": [[1171, 1189], ["unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "test_address_parser.AddressParserTest._capture_output", "unittest.mock.patch", "test_address_parser.AddressParserTest.mock_predictions_vectors", "deepparse.parser.address_parser.AddressParser", "print", "test_address_parser.AddressParserTest.assertEqual", "deepparse.parser.address_parser.AddressParser.__repr__", "test_address_parser.AddressParserTest.test_out.getvalue().strip", "test_address_parser.AddressParserTest.test_out.getvalue"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.tests.base_capture_output.CaptureOutputTestCase._capture_output", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.base.AddressParserPredictTestCase.mock_predictions_vectors", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.formatted_parsed_address.FormattedParsedAddress.__repr__"], ["", "", "@", "patch", "(", "\"deepparse.parser.address_parser.BPEmbEmbeddingsModel\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.BPEmbVectorizer\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.bpemb_data_padding\"", ")", "\n", "def", "test_givenAnBPEmbAddressParser_whenReprAddressParser_thenStringIsModelTypeAddressParse", "(", "\n", "self", ",", "embeddings_model_mock", ",", "vectorizer_model_mock", ",", "data_padding_mock", "\n", ")", ":", "\n", "        ", "self", ".", "_capture_output", "(", ")", "\n", "\n", "with", "patch", "(", "\"deepparse.parser.address_parser.BPEmbSeq2SeqModel\"", ")", "as", "model_mock", ":", "\n", "            ", "self", ".", "mock_predictions_vectors", "(", "model_mock", ")", "\n", "address_parser", "=", "AddressParser", "(", "\n", "model_type", "=", "self", ".", "a_best_model_type", ",", "\n", "device", "=", "self", ".", "a_cpu_device", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", ")", "\n", "print", "(", "address_parser", ".", "__repr__", "(", ")", ")", "\n", "\n", "self", ".", "assertEqual", "(", "self", ".", "a_BPEmb_name", ",", "self", ".", "test_out", ".", "getvalue", "(", ")", ".", "strip", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_address_parser.AddressParserTest.test_givenAnBPEmbAttAddressParser_whenReprAddressParser_thenStringIsModelTypeAddressParse": [[1190, 1209], ["unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "test_address_parser.AddressParserTest._capture_output", "unittest.mock.patch", "test_address_parser.AddressParserTest.mock_predictions_vectors", "deepparse.parser.address_parser.AddressParser", "print", "test_address_parser.AddressParserTest.assertEqual", "deepparse.parser.address_parser.AddressParser.__repr__", "test_address_parser.AddressParserTest.test_out.getvalue().strip", "test_address_parser.AddressParserTest.test_out.getvalue"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.tests.base_capture_output.CaptureOutputTestCase._capture_output", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.base.AddressParserPredictTestCase.mock_predictions_vectors", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.formatted_parsed_address.FormattedParsedAddress.__repr__"], ["", "", "@", "patch", "(", "\"deepparse.parser.address_parser.BPEmbEmbeddingsModel\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.BPEmbVectorizer\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.bpemb_data_padding\"", ")", "\n", "def", "test_givenAnBPEmbAttAddressParser_whenReprAddressParser_thenStringIsModelTypeAddressParse", "(", "\n", "self", ",", "embeddings_model_mock", ",", "vectorizer_model_mock", ",", "data_padding_mock", "\n", ")", ":", "\n", "        ", "self", ".", "_capture_output", "(", ")", "\n", "\n", "with", "patch", "(", "\"deepparse.parser.address_parser.BPEmbSeq2SeqModel\"", ")", "as", "model_mock", ":", "\n", "            ", "self", ".", "mock_predictions_vectors", "(", "model_mock", ")", "\n", "address_parser", "=", "AddressParser", "(", "\n", "model_type", "=", "self", ".", "a_best_model_type", ",", "\n", "device", "=", "self", ".", "a_cpu_device", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", "attention_mechanism", "=", "True", ",", "\n", ")", "\n", "print", "(", "address_parser", ".", "__repr__", "(", ")", ")", "\n", "\n", "self", ".", "assertEqual", "(", "self", ".", "a_BPEmb_att_name", ",", "self", ".", "test_out", ".", "getvalue", "(", ")", ".", "strip", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_address_parser.AddressParserTest.test_givenAnFasttextAddressParser_whenStrAddressParser_thenStringIsModelTypeAddressParse": [[1210, 1233], ["unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "test_address_parser.AddressParserTest._capture_output", "unittest.mock.patch", "test_address_parser.AddressParserTest.mock_predictions_vectors", "deepparse.parser.address_parser.AddressParser", "print", "test_address_parser.AddressParserTest.assertEqual", "test_address_parser.AddressParserTest.test_out.getvalue().strip", "test_address_parser.AddressParserTest.test_out.getvalue"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.tests.base_capture_output.CaptureOutputTestCase._capture_output", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.base.AddressParserPredictTestCase.mock_predictions_vectors"], ["", "", "@", "patch", "(", "\"deepparse.parser.address_parser.download_fasttext_embeddings\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.FastTextEmbeddingsModel\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.FastTextVectorizer\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.fasttext_data_padding\"", ")", "\n", "def", "test_givenAnFasttextAddressParser_whenStrAddressParser_thenStringIsModelTypeAddressParse", "(", "\n", "self", ",", "\n", "download_weights_mock", ",", "\n", "embeddings_model_mock", ",", "\n", "vectorizer_model_mock", ",", "\n", "data_padding_mock", ",", "\n", ")", ":", "\n", "        ", "self", ".", "_capture_output", "(", ")", "\n", "\n", "with", "patch", "(", "\"deepparse.parser.address_parser.FastTextSeq2SeqModel\"", ")", "as", "model_mock", ":", "\n", "            ", "self", ".", "mock_predictions_vectors", "(", "model_mock", ")", "\n", "address_parser", "=", "AddressParser", "(", "\n", "model_type", "=", "self", ".", "a_fasttext_model_type", ",", "\n", "device", "=", "self", ".", "a_cpu_device", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", ")", "\n", "print", "(", "address_parser", ")", "\n", "\n", "self", ".", "assertEqual", "(", "self", ".", "a_fasttext_name", ",", "self", ".", "test_out", ".", "getvalue", "(", ")", ".", "strip", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_address_parser.AddressParserTest.test_givenAnFasttextAttAddressParser_whenStrAddressParser_thenStringIsModelTypeAddressParse": [[1234, 1258], ["unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "test_address_parser.AddressParserTest._capture_output", "unittest.mock.patch", "test_address_parser.AddressParserTest.mock_predictions_vectors", "deepparse.parser.address_parser.AddressParser", "print", "test_address_parser.AddressParserTest.assertEqual", "test_address_parser.AddressParserTest.test_out.getvalue().strip", "test_address_parser.AddressParserTest.test_out.getvalue"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.tests.base_capture_output.CaptureOutputTestCase._capture_output", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.base.AddressParserPredictTestCase.mock_predictions_vectors"], ["", "", "@", "patch", "(", "\"deepparse.parser.address_parser.download_fasttext_embeddings\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.FastTextEmbeddingsModel\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.FastTextVectorizer\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.fasttext_data_padding\"", ")", "\n", "def", "test_givenAnFasttextAttAddressParser_whenStrAddressParser_thenStringIsModelTypeAddressParse", "(", "\n", "self", ",", "\n", "download_weights_mock", ",", "\n", "embeddings_model_mock", ",", "\n", "vectorizer_model_mock", ",", "\n", "data_padding_mock", ",", "\n", ")", ":", "\n", "        ", "self", ".", "_capture_output", "(", ")", "\n", "\n", "with", "patch", "(", "\"deepparse.parser.address_parser.FastTextSeq2SeqModel\"", ")", "as", "model_mock", ":", "\n", "            ", "self", ".", "mock_predictions_vectors", "(", "model_mock", ")", "\n", "address_parser", "=", "AddressParser", "(", "\n", "model_type", "=", "self", ".", "a_fasttext_model_type", ",", "\n", "device", "=", "self", ".", "a_cpu_device", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", "attention_mechanism", "=", "True", ",", "\n", ")", "\n", "print", "(", "address_parser", ")", "\n", "\n", "self", ".", "assertEqual", "(", "self", ".", "a_fasttext_att_name", ",", "self", ".", "test_out", ".", "getvalue", "(", ")", ".", "strip", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_address_parser.AddressParserTest.test_givenAnFasttextAddressParser_whenReprAddressParser_thenStringIsModelTypeAddressParse": [[1259, 1282], ["unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "test_address_parser.AddressParserTest._capture_output", "unittest.mock.patch", "test_address_parser.AddressParserTest.mock_predictions_vectors", "deepparse.parser.address_parser.AddressParser", "print", "test_address_parser.AddressParserTest.assertEqual", "deepparse.parser.address_parser.AddressParser.__repr__", "test_address_parser.AddressParserTest.test_out.getvalue().strip", "test_address_parser.AddressParserTest.test_out.getvalue"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.tests.base_capture_output.CaptureOutputTestCase._capture_output", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.base.AddressParserPredictTestCase.mock_predictions_vectors", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.formatted_parsed_address.FormattedParsedAddress.__repr__"], ["", "", "@", "patch", "(", "\"deepparse.parser.address_parser.download_fasttext_embeddings\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.FastTextEmbeddingsModel\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.FastTextVectorizer\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.fasttext_data_padding\"", ")", "\n", "def", "test_givenAnFasttextAddressParser_whenReprAddressParser_thenStringIsModelTypeAddressParse", "(", "\n", "self", ",", "\n", "download_weights_mock", ",", "\n", "embeddings_model_mock", ",", "\n", "vectorizer_model_mock", ",", "\n", "data_padding_mock", ",", "\n", ")", ":", "\n", "        ", "self", ".", "_capture_output", "(", ")", "\n", "\n", "with", "patch", "(", "\"deepparse.parser.address_parser.FastTextSeq2SeqModel\"", ")", "as", "model_mock", ":", "\n", "            ", "self", ".", "mock_predictions_vectors", "(", "model_mock", ")", "\n", "address_parser", "=", "AddressParser", "(", "\n", "model_type", "=", "self", ".", "a_fasttext_model_type", ",", "\n", "device", "=", "self", ".", "a_cpu_device", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", ")", "\n", "print", "(", "address_parser", ".", "__repr__", "(", ")", ")", "\n", "\n", "self", ".", "assertEqual", "(", "self", ".", "a_fasttext_name", ",", "self", ".", "test_out", ".", "getvalue", "(", ")", ".", "strip", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_address_parser.AddressParserTest.test_givenAnFasttextAttAddressParser_whenReprAddressParser_thenStringIsModelTypeAddressParse": [[1283, 1307], ["unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "test_address_parser.AddressParserTest._capture_output", "unittest.mock.patch", "test_address_parser.AddressParserTest.mock_predictions_vectors", "deepparse.parser.address_parser.AddressParser", "print", "test_address_parser.AddressParserTest.assertEqual", "deepparse.parser.address_parser.AddressParser.__repr__", "test_address_parser.AddressParserTest.test_out.getvalue().strip", "test_address_parser.AddressParserTest.test_out.getvalue"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.tests.base_capture_output.CaptureOutputTestCase._capture_output", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.base.AddressParserPredictTestCase.mock_predictions_vectors", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.formatted_parsed_address.FormattedParsedAddress.__repr__"], ["", "", "@", "patch", "(", "\"deepparse.parser.address_parser.download_fasttext_embeddings\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.FastTextEmbeddingsModel\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.FastTextVectorizer\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.fasttext_data_padding\"", ")", "\n", "def", "test_givenAnFasttextAttAddressParser_whenReprAddressParser_thenStringIsModelTypeAddressParse", "(", "\n", "self", ",", "\n", "download_weights_mock", ",", "\n", "embeddings_model_mock", ",", "\n", "vectorizer_model_mock", ",", "\n", "data_padding_mock", ",", "\n", ")", ":", "\n", "        ", "self", ".", "_capture_output", "(", ")", "\n", "\n", "with", "patch", "(", "\"deepparse.parser.address_parser.FastTextSeq2SeqModel\"", ")", "as", "model_mock", ":", "\n", "            ", "self", ".", "mock_predictions_vectors", "(", "model_mock", ")", "\n", "address_parser", "=", "AddressParser", "(", "\n", "model_type", "=", "self", ".", "a_fasttext_model_type", ",", "\n", "device", "=", "self", ".", "a_cpu_device", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", "attention_mechanism", "=", "True", ",", "\n", ")", "\n", "print", "(", "address_parser", ".", "__repr__", "(", ")", ")", "\n", "\n", "self", ".", "assertEqual", "(", "self", ".", "a_fasttext_att_name", ",", "self", ".", "test_out", ".", "getvalue", "(", ")", ".", "strip", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_address_parser.AddressParserTest.test_givenAnFasttextLightAddressParser_whenStrAddressParser_thenStringIsModelTypeAddressParse": [[1308, 1331], ["unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "test_address_parser.AddressParserTest._capture_output", "unittest.mock.patch", "test_address_parser.AddressParserTest.mock_predictions_vectors", "deepparse.parser.address_parser.AddressParser", "print", "test_address_parser.AddressParserTest.assertEqual", "test_address_parser.AddressParserTest.test_out.getvalue().strip", "test_address_parser.AddressParserTest.test_out.getvalue"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.tests.base_capture_output.CaptureOutputTestCase._capture_output", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.base.AddressParserPredictTestCase.mock_predictions_vectors"], ["", "", "@", "patch", "(", "\"deepparse.parser.address_parser.download_fasttext_magnitude_embeddings\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.MagnitudeEmbeddingsModel\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.MagnitudeVectorizer\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.fasttext_data_padding\"", ")", "\n", "def", "test_givenAnFasttextLightAddressParser_whenStrAddressParser_thenStringIsModelTypeAddressParse", "(", "\n", "self", ",", "\n", "download_weights_mock", ",", "\n", "embeddings_model_mock", ",", "\n", "vectorizer_model_mock", ",", "\n", "data_padding_mock", ",", "\n", ")", ":", "\n", "        ", "self", ".", "_capture_output", "(", ")", "\n", "\n", "with", "patch", "(", "\"deepparse.parser.address_parser.FastTextSeq2SeqModel\"", ")", "as", "model_mock", ":", "\n", "            ", "self", ".", "mock_predictions_vectors", "(", "model_mock", ")", "\n", "address_parser", "=", "AddressParser", "(", "\n", "model_type", "=", "self", ".", "a_fasttext_lightest_model_type", ",", "\n", "device", "=", "self", ".", "a_cpu_device", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", ")", "\n", "print", "(", "address_parser", ")", "\n", "\n", "self", ".", "assertEqual", "(", "self", ".", "a_fasttext_light_name", ",", "self", ".", "test_out", ".", "getvalue", "(", ")", ".", "strip", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_address_parser.AddressParserTest.test_givenAnFasttextLightAttAddressParser_whenStrAddressParser_thenStringIsModelTypeAddressParse": [[1332, 1356], ["unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "test_address_parser.AddressParserTest._capture_output", "unittest.mock.patch", "test_address_parser.AddressParserTest.mock_predictions_vectors", "deepparse.parser.address_parser.AddressParser", "print", "test_address_parser.AddressParserTest.assertEqual", "test_address_parser.AddressParserTest.test_out.getvalue().strip", "test_address_parser.AddressParserTest.test_out.getvalue"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.tests.base_capture_output.CaptureOutputTestCase._capture_output", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.base.AddressParserPredictTestCase.mock_predictions_vectors"], ["", "", "@", "patch", "(", "\"deepparse.parser.address_parser.download_fasttext_magnitude_embeddings\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.MagnitudeEmbeddingsModel\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.MagnitudeVectorizer\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.fasttext_data_padding\"", ")", "\n", "def", "test_givenAnFasttextLightAttAddressParser_whenStrAddressParser_thenStringIsModelTypeAddressParse", "(", "\n", "self", ",", "\n", "download_weights_mock", ",", "\n", "embeddings_model_mock", ",", "\n", "vectorizer_model_mock", ",", "\n", "data_padding_mock", ",", "\n", ")", ":", "\n", "        ", "self", ".", "_capture_output", "(", ")", "\n", "\n", "with", "patch", "(", "\"deepparse.parser.address_parser.FastTextSeq2SeqModel\"", ")", "as", "model_mock", ":", "\n", "            ", "self", ".", "mock_predictions_vectors", "(", "model_mock", ")", "\n", "address_parser", "=", "AddressParser", "(", "\n", "model_type", "=", "self", ".", "a_fasttext_lightest_model_type", ",", "\n", "device", "=", "self", ".", "a_cpu_device", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", "attention_mechanism", "=", "True", ",", "\n", ")", "\n", "print", "(", "address_parser", ")", "\n", "\n", "self", ".", "assertEqual", "(", "self", ".", "a_fasttext_att_light_name", ",", "self", ".", "test_out", ".", "getvalue", "(", ")", ".", "strip", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_address_parser.AddressParserTest.test_givenAnFasttextLightAddressParser_whenReprAddressParser_thenStringIsModelTypeAddressParse": [[1357, 1380], ["unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "test_address_parser.AddressParserTest._capture_output", "unittest.mock.patch", "test_address_parser.AddressParserTest.mock_predictions_vectors", "deepparse.parser.address_parser.AddressParser", "print", "test_address_parser.AddressParserTest.assertEqual", "deepparse.parser.address_parser.AddressParser.__repr__", "test_address_parser.AddressParserTest.test_out.getvalue().strip", "test_address_parser.AddressParserTest.test_out.getvalue"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.tests.base_capture_output.CaptureOutputTestCase._capture_output", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.base.AddressParserPredictTestCase.mock_predictions_vectors", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.formatted_parsed_address.FormattedParsedAddress.__repr__"], ["", "", "@", "patch", "(", "\"deepparse.parser.address_parser.download_fasttext_magnitude_embeddings\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.MagnitudeEmbeddingsModel\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.MagnitudeVectorizer\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.fasttext_data_padding\"", ")", "\n", "def", "test_givenAnFasttextLightAddressParser_whenReprAddressParser_thenStringIsModelTypeAddressParse", "(", "\n", "self", ",", "\n", "download_weights_mock", ",", "\n", "embeddings_model_mock", ",", "\n", "vectorizer_model_mock", ",", "\n", "data_padding_mock", ",", "\n", ")", ":", "\n", "        ", "self", ".", "_capture_output", "(", ")", "\n", "\n", "with", "patch", "(", "\"deepparse.parser.address_parser.FastTextSeq2SeqModel\"", ")", "as", "model_mock", ":", "\n", "            ", "self", ".", "mock_predictions_vectors", "(", "model_mock", ")", "\n", "address_parser", "=", "AddressParser", "(", "\n", "model_type", "=", "self", ".", "a_fasttext_lightest_model_type", ",", "\n", "device", "=", "self", ".", "a_cpu_device", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", ")", "\n", "print", "(", "address_parser", ".", "__repr__", "(", ")", ")", "\n", "\n", "self", ".", "assertEqual", "(", "self", ".", "a_fasttext_light_name", ",", "self", ".", "test_out", ".", "getvalue", "(", ")", ".", "strip", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_address_parser.AddressParserTest.test_givenAnFasttextLightAttAddressParser_whenReprAddressParser_thenStringIsModelTypeAddressParse": [[1381, 1405], ["unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "test_address_parser.AddressParserTest._capture_output", "unittest.mock.patch", "test_address_parser.AddressParserTest.mock_predictions_vectors", "deepparse.parser.address_parser.AddressParser", "print", "test_address_parser.AddressParserTest.assertEqual", "deepparse.parser.address_parser.AddressParser.__repr__", "test_address_parser.AddressParserTest.test_out.getvalue().strip", "test_address_parser.AddressParserTest.test_out.getvalue"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.tests.base_capture_output.CaptureOutputTestCase._capture_output", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.base.AddressParserPredictTestCase.mock_predictions_vectors", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.formatted_parsed_address.FormattedParsedAddress.__repr__"], ["", "", "@", "patch", "(", "\"deepparse.parser.address_parser.download_fasttext_magnitude_embeddings\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.MagnitudeEmbeddingsModel\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.MagnitudeVectorizer\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.fasttext_data_padding\"", ")", "\n", "def", "test_givenAnFasttextLightAttAddressParser_whenReprAddressParser_thenStringIsModelTypeAddressParse", "(", "\n", "self", ",", "\n", "download_weights_mock", ",", "\n", "embeddings_model_mock", ",", "\n", "vectorizer_model_mock", ",", "\n", "data_padding_mock", ",", "\n", ")", ":", "\n", "        ", "self", ".", "_capture_output", "(", ")", "\n", "\n", "with", "patch", "(", "\"deepparse.parser.address_parser.FastTextSeq2SeqModel\"", ")", "as", "model_mock", ":", "\n", "            ", "self", ".", "mock_predictions_vectors", "(", "model_mock", ")", "\n", "address_parser", "=", "AddressParser", "(", "\n", "model_type", "=", "self", ".", "a_fasttext_lightest_model_type", ",", "\n", "device", "=", "self", ".", "a_cpu_device", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", "attention_mechanism", "=", "True", ",", "\n", ")", "\n", "print", "(", "address_parser", ".", "__repr__", "(", ")", ")", "\n", "\n", "self", ".", "assertEqual", "(", "self", ".", "a_fasttext_att_light_name", ",", "self", ".", "test_out", ".", "getvalue", "(", ")", ".", "strip", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_address_parser.AddressParserTest.test_givenABPEmbModelType_whenRetrainWithIncorrectPredictionTags_thenRaiseValueError": [[1406, 1418], ["unittest.mock.patch", "unittest.mock.patch", "deepparse.parser.address_parser.AddressParser", "test_address_parser.AddressParserTest.assertRaises", "deepparse.parser.address_parser.AddressParser.retrain", "unittest.mock.MagicMock"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.address_parser.AddressParser.retrain"], ["", "", "@", "patch", "(", "\"deepparse.parser.address_parser.BPEmbEmbeddingsModel\"", ")", "\n", "def", "test_givenABPEmbModelType_whenRetrainWithIncorrectPredictionTags_thenRaiseValueError", "(", "\n", "self", ",", "embeddings_model_mock", "\n", ")", ":", "\n", "        ", "with", "patch", "(", "\"deepparse.parser.address_parser.BPEmbSeq2SeqModel\"", ")", ":", "\n", "            ", "address_parser", "=", "AddressParser", "(", "\n", "model_type", "=", "self", ".", "a_bpemb_model_type", ",", "\n", "device", "=", "self", ".", "a_cpu_device", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", ")", "\n", "with", "self", ".", "assertRaises", "(", "ValueError", ")", ":", "\n", "                ", "address_parser", ".", "retrain", "(", "MagicMock", "(", ")", ",", "0.8", ",", "1", ",", "1", ",", "prediction_tags", "=", "self", ".", "incorrect_address_components", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_address_parser.AddressParserTest.test_givenAFasttextModelType_whenInstantiatingParserWithUserComponent_thenRaiseValueError": [[1419, 1432], ["unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "deepparse.parser.address_parser.AddressParser", "test_address_parser.AddressParserTest.assertRaises", "deepparse.parser.address_parser.AddressParser.retrain", "unittest.mock.MagicMock"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.address_parser.AddressParser.retrain"], ["", "", "", "@", "patch", "(", "\"deepparse.parser.address_parser.download_fasttext_embeddings\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.FastTextEmbeddingsModel\"", ")", "\n", "def", "test_givenAFasttextModelType_whenInstantiatingParserWithUserComponent_thenRaiseValueError", "(", "\n", "self", ",", "download_weights_mock", ",", "embeddings_model_mock", "\n", ")", ":", "\n", "        ", "with", "patch", "(", "\"deepparse.parser.address_parser.FastTextSeq2SeqModel\"", ")", ":", "\n", "            ", "address_parser", "=", "AddressParser", "(", "\n", "model_type", "=", "self", ".", "a_fasttext_model_type", ",", "\n", "device", "=", "self", ".", "a_cpu_device", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", ")", "\n", "with", "self", ".", "assertRaises", "(", "ValueError", ")", ":", "\n", "                ", "address_parser", ".", "retrain", "(", "MagicMock", "(", ")", ",", "0.8", ",", "1", ",", "1", ",", "prediction_tags", "=", "self", ".", "incorrect_address_components", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_address_parser.AddressParserTest.test_givenAModel_whenAddressParsingAnAddressVerbose_thenVerbose": [[1434, 1457], ["unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "test_address_parser.AddressParserTest._capture_output", "unittest.mock.patch", "unittest.mock.patch", "test_address_parser.AddressParserTest.mock_predictions_vectors", "deepparse.parser.address_parser.AddressParser", "deepparse.parser.address_parser.AddressParser.", "test_address_parser.AddressParserTest.test_out.getvalue().strip", "test_address_parser.AddressParserTest.assertEqual", "test_address_parser.AddressParserTest.test_out.getvalue"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.tests.base_capture_output.CaptureOutputTestCase._capture_output", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.base.AddressParserPredictTestCase.mock_predictions_vectors"], ["", "", "", "@", "patch", "(", "\"deepparse.parser.address_parser.BPEmbEmbeddingsModel\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.BPEmbVectorizer\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.bpemb_data_padding\"", ")", "\n", "def", "test_givenAModel_whenAddressParsingAnAddressVerbose_thenVerbose", "(", "\n", "self", ",", "embeddings_model_mock", ",", "vectorizer_model_mock", ",", "data_padding_mock", "\n", ")", ":", "\n", "        ", "self", ".", "_capture_output", "(", ")", "\n", "with", "patch", "(", "\"deepparse.parser.address_parser.BPEmbSeq2SeqModel\"", ")", "as", "model_mock", ":", "\n", "            ", "with", "patch", "(", "\n", "\"deepparse.parser.address_parser.PREDICTION_TIME_PERFORMANCE_THRESHOLD\"", ",", "\n", "0", ",", "\n", ")", ":", "\n", "                ", "self", ".", "mock_predictions_vectors", "(", "model_mock", ")", "\n", "address_parser", "=", "AddressParser", "(", "\n", "model_type", "=", "self", ".", "a_bpemb_model_type", ",", "\n", "device", "=", "self", ".", "a_cpu_device", ",", "\n", "verbose", "=", "True", ",", "\n", ")", "\n", "\n", "address_parser", "(", "self", ".", "a_complete_address", ")", "\n", "actual", "=", "self", ".", "test_out", ".", "getvalue", "(", ")", ".", "strip", "(", ")", "\n", "expect", "=", "\"Vectorizing the address\"", "\n", "self", ".", "assertEqual", "(", "actual", ",", "expect", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_address_parser.AddressParserTest.test_givenAModel_whenAddressParsingAnAddressWithProb_thenIncludeProb": [[1458, 1475], ["unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "test_address_parser.AddressParserTest.mock_predictions_vectors", "deepparse.parser.address_parser.AddressParser", "deepparse.parser.address_parser.AddressParser.", "test_address_parser.AddressParserTest.assertIsInstance", "test_address_parser.AddressParserTest.assertIsInstance"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.base.AddressParserPredictTestCase.mock_predictions_vectors"], ["", "", "", "@", "patch", "(", "\"deepparse.parser.address_parser.BPEmbEmbeddingsModel\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.BPEmbVectorizer\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.bpemb_data_padding\"", ")", "\n", "def", "test_givenAModel_whenAddressParsingAnAddressWithProb_thenIncludeProb", "(", "\n", "self", ",", "embeddings_model_mock", ",", "vectorizer_model_mock", ",", "data_padding_mock", "\n", ")", ":", "\n", "        ", "with", "patch", "(", "\"deepparse.parser.address_parser.BPEmbSeq2SeqModel\"", ")", "as", "model_mock", ":", "\n", "            ", "self", ".", "mock_predictions_vectors", "(", "model_mock", ")", "\n", "address_parser", "=", "AddressParser", "(", "\n", "model_type", "=", "self", ".", "a_bpemb_model_type", ",", "\n", "device", "=", "self", ".", "a_cpu_device", ",", "\n", "verbose", "=", "True", ",", "\n", ")", "\n", "\n", "output", "=", "address_parser", "(", "self", ".", "a_complete_address", ",", "with_prob", "=", "True", ")", "\n", "self", ".", "assertIsInstance", "(", "output", ".", "address_parsed_components", "[", "0", "]", "[", "1", "]", ",", "tuple", ")", "# tuple of prob", "\n", "self", ".", "assertIsInstance", "(", "output", ".", "address_parsed_components", "[", "1", "]", "[", "1", "]", ",", "tuple", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_address_parser.AddressParserTest.test_givenAFasttextModel_whenGetFormattedModelType_thenReturnFastText": [[1476, 1490], ["unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "deepparse.parser.address_parser.AddressParser", "deepparse.parser.address_parser.AddressParser.get_formatted_model_name", "test_address_parser.AddressParserTest.assertEqual"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.address_parser.AddressParser.get_formatted_model_name"], ["", "", "@", "patch", "(", "\"deepparse.parser.address_parser.download_fasttext_embeddings\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.FastTextEmbeddingsModel\"", ")", "\n", "def", "test_givenAFasttextModel_whenGetFormattedModelType_thenReturnFastText", "(", "\n", "self", ",", "download_weights_mock", ",", "embeddings_model_mock", "\n", ")", ":", "\n", "        ", "with", "patch", "(", "\"deepparse.parser.address_parser.FastTextSeq2SeqModel\"", ")", ":", "\n", "            ", "address_parser", "=", "AddressParser", "(", "\n", "model_type", "=", "self", ".", "a_fasttext_model_type", ",", "\n", "device", "=", "self", ".", "a_cpu_device", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", ")", "\n", "actual", "=", "address_parser", ".", "get_formatted_model_name", "(", ")", "\n", "expected", "=", "\"FastText\"", "\n", "self", ".", "assertEqual", "(", "expected", ",", "actual", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_address_parser.AddressParserTest.test_givenAFasttextAttModel_whenGetFormattedModelType_thenReturnFastText": [[1491, 1506], ["unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "deepparse.parser.address_parser.AddressParser", "deepparse.parser.address_parser.AddressParser.get_formatted_model_name", "test_address_parser.AddressParserTest.assertEqual"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.address_parser.AddressParser.get_formatted_model_name"], ["", "", "@", "patch", "(", "\"deepparse.parser.address_parser.download_fasttext_embeddings\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.FastTextEmbeddingsModel\"", ")", "\n", "def", "test_givenAFasttextAttModel_whenGetFormattedModelType_thenReturnFastText", "(", "\n", "self", ",", "download_weights_mock", ",", "embeddings_model_mock", "\n", ")", ":", "\n", "        ", "with", "patch", "(", "\"deepparse.parser.address_parser.FastTextSeq2SeqModel\"", ")", ":", "\n", "            ", "address_parser", "=", "AddressParser", "(", "\n", "model_type", "=", "self", ".", "a_fasttext_model_type", ",", "\n", "device", "=", "self", ".", "a_cpu_device", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", "attention_mechanism", "=", "True", ",", "\n", ")", "\n", "actual", "=", "address_parser", ".", "get_formatted_model_name", "(", ")", "\n", "expected", "=", "\"FastTextAttention\"", "\n", "self", ".", "assertEqual", "(", "expected", ",", "actual", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_address_parser.AddressParserTest.test_givenABpembModel_whenGetFormattedModelType_thenReturnBPEmb": [[1507, 1523], ["unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "deepparse.parser.address_parser.AddressParser", "deepparse.parser.address_parser.AddressParser.get_formatted_model_name", "test_address_parser.AddressParserTest.assertEqual"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.address_parser.AddressParser.get_formatted_model_name"], ["", "", "@", "patch", "(", "\"deepparse.parser.address_parser.BPEmbEmbeddingsModel\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.BPEmbVectorizer\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.bpemb_data_padding\"", ")", "\n", "def", "test_givenABpembModel_whenGetFormattedModelType_thenReturnBPEmb", "(", "\n", "self", ",", "embeddings_model_mock", ",", "vectorizer_model_mock", ",", "data_padding_mock", "\n", ")", ":", "\n", "        ", "with", "patch", "(", "\"deepparse.parser.address_parser.BPEmbSeq2SeqModel\"", ")", ":", "\n", "            ", "address_parser", "=", "AddressParser", "(", "\n", "model_type", "=", "self", ".", "a_bpemb_model_type", ",", "\n", "device", "=", "self", ".", "a_cpu_device", ",", "\n", "verbose", "=", "True", ",", "\n", ")", "\n", "\n", "actual", "=", "address_parser", ".", "get_formatted_model_name", "(", ")", "\n", "expected", "=", "\"BPEmb\"", "\n", "self", ".", "assertEqual", "(", "expected", ",", "actual", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_address_parser.AddressParserTest.test_givenABpembAttModel_whenGetFormattedModelType_thenReturnBPEmbAtt": [[1524, 1542], ["unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "test_address_parser.AddressParserTest.mock_predictions_vectors", "deepparse.parser.address_parser.AddressParser", "deepparse.parser.address_parser.AddressParser.get_formatted_model_name", "test_address_parser.AddressParserTest.assertEqual"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.base.AddressParserPredictTestCase.mock_predictions_vectors", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.address_parser.AddressParser.get_formatted_model_name"], ["", "", "@", "patch", "(", "\"deepparse.parser.address_parser.BPEmbEmbeddingsModel\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.BPEmbVectorizer\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.bpemb_data_padding\"", ")", "\n", "def", "test_givenABpembAttModel_whenGetFormattedModelType_thenReturnBPEmbAtt", "(", "\n", "self", ",", "embeddings_model_mock", ",", "vectorizer_model_mock", ",", "data_padding_mock", "\n", ")", ":", "\n", "        ", "with", "patch", "(", "\"deepparse.parser.address_parser.BPEmbSeq2SeqModel\"", ")", "as", "model_mock", ":", "\n", "            ", "self", ".", "mock_predictions_vectors", "(", "model_mock", ")", "\n", "address_parser", "=", "AddressParser", "(", "\n", "model_type", "=", "self", ".", "a_bpemb_model_type", ",", "\n", "device", "=", "self", ".", "a_cpu_device", ",", "\n", "verbose", "=", "True", ",", "\n", "attention_mechanism", "=", "True", ",", "\n", ")", "\n", "\n", "actual", "=", "address_parser", ".", "get_formatted_model_name", "(", ")", "\n", "expected", "=", "\"BPEmbAttention\"", "\n", "self", ".", "assertEqual", "(", "expected", ",", "actual", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_address_parser.AddressParserTest.test_givenEmptyData_whenParse_raiseDataError": [[1543, 1559], ["unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "test_address_parser.AddressParserTest.mock_predictions_vectors", "deepparse.parser.address_parser.AddressParser", "test_address_parser.AddressParserTest.assertRaises", "deepparse.parser.address_parser.AddressParser.", "test_address_parser.AddressParserTest.assertRaises", "deepparse.parser.address_parser.AddressParser."], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.base.AddressParserPredictTestCase.mock_predictions_vectors"], ["", "", "@", "patch", "(", "\"deepparse.parser.address_parser.BPEmbEmbeddingsModel\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.BPEmbVectorizer\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.bpemb_data_padding\"", ")", "\n", "def", "test_givenEmptyData_whenParse_raiseDataError", "(", "\n", "self", ",", "embeddings_model_mock", ",", "vectorizer_model_mock", ",", "data_padding_mock", "\n", ")", ":", "\n", "        ", "empty_data", "=", "[", "\"an address\"", ",", "\"\"", "]", "\n", "another_empty_address", "=", "\"\"", "\n", "with", "patch", "(", "\"deepparse.parser.address_parser.BPEmbSeq2SeqModel\"", ")", "as", "model_mock", ":", "\n", "            ", "self", ".", "mock_predictions_vectors", "(", "model_mock", ")", "\n", "address_parser", "=", "AddressParser", "(", "model_type", "=", "self", ".", "a_bpemb_model_type", ",", "device", "=", "self", ".", "a_cpu_device", ")", "\n", "with", "self", ".", "assertRaises", "(", "DataError", ")", ":", "\n", "                ", "address_parser", "(", "empty_data", ")", "\n", "\n", "", "with", "self", ".", "assertRaises", "(", "DataError", ")", ":", "\n", "                ", "address_parser", "(", "another_empty_address", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_address_parser.AddressParserTest.test_givenWhiteSpaceOnlyData_whenParse_raiseDataError": [[1560, 1576], ["unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "test_address_parser.AddressParserTest.mock_predictions_vectors", "deepparse.parser.address_parser.AddressParser", "test_address_parser.AddressParserTest.assertRaises", "deepparse.parser.address_parser.AddressParser.", "test_address_parser.AddressParserTest.assertRaises", "deepparse.parser.address_parser.AddressParser."], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.base.AddressParserPredictTestCase.mock_predictions_vectors"], ["", "", "", "@", "patch", "(", "\"deepparse.parser.address_parser.BPEmbEmbeddingsModel\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.BPEmbVectorizer\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.bpemb_data_padding\"", ")", "\n", "def", "test_givenWhiteSpaceOnlyData_whenParse_raiseDataError", "(", "\n", "self", ",", "embeddings_model_mock", ",", "vectorizer_model_mock", ",", "data_padding_mock", "\n", ")", ":", "\n", "        ", "whitespace_data", "=", "[", "\"an address\"", ",", "\" \"", "]", "\n", "another_whitespace_address", "=", "\" \"", "\n", "with", "patch", "(", "\"deepparse.parser.address_parser.BPEmbSeq2SeqModel\"", ")", "as", "model_mock", ":", "\n", "            ", "self", ".", "mock_predictions_vectors", "(", "model_mock", ")", "\n", "address_parser", "=", "AddressParser", "(", "model_type", "=", "self", ".", "a_bpemb_model_type", ",", "device", "=", "self", ".", "a_cpu_device", ")", "\n", "with", "self", ".", "assertRaises", "(", "DataError", ")", ":", "\n", "                ", "address_parser", "(", "whitespace_data", ")", "\n", "\n", "", "with", "self", ".", "assertRaises", "(", "DataError", ")", ":", "\n", "                ", "address_parser", "(", "another_whitespace_address", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_address_parser.AddressParserTest.test_givenANewCacheDirBPEmb_thenInitWeightsInNewCacheDir": [[1577, 1588], ["unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "deepparse.parser.address_parser.AddressParser", "embeddings_model_mock.assert_called_with"], "methods", ["None"], ["", "", "", "@", "patch", "(", "\"deepparse.parser.address_parser.BPEmbVectorizer\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.bpemb_data_padding\"", ")", "\n", "def", "test_givenANewCacheDirBPEmb_thenInitWeightsInNewCacheDir", "(", "self", ",", "vectorizer_model_mock", ",", "data_padding_mock", ")", ":", "\n", "        ", "with", "patch", "(", "\"deepparse.parser.address_parser.BPEmbEmbeddingsModel\"", ")", "as", "embeddings_model_mock", ":", "\n", "            ", "AddressParser", "(", "\n", "model_type", "=", "self", ".", "a_bpemb_model_type", ",", "\n", "device", "=", "self", ".", "a_cpu_device", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", "cache_dir", "=", "self", ".", "a_cache_dir", ",", "\n", ")", "\n", "embeddings_model_mock", ".", "assert_called_with", "(", "verbose", "=", "self", ".", "verbose", ",", "cache_dir", "=", "self", ".", "a_cache_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_address_parser.AddressParserTest.test_givenANewCacheDirFastText_thenInitWeightsInNewCacheDir": [[1589, 1599], ["unittest.mock.patch", "unittest.mock.patch", "deepparse.parser.address_parser.AddressParser", "download_weights_mock.assert_called_with"], "methods", ["None"], ["", "", "@", "patch", "(", "\"deepparse.parser.address_parser.FastTextEmbeddingsModel\"", ")", "\n", "def", "test_givenANewCacheDirFastText_thenInitWeightsInNewCacheDir", "(", "self", ",", "embeddings_model_mock", ")", ":", "\n", "        ", "with", "patch", "(", "\"deepparse.parser.address_parser.download_fasttext_embeddings\"", ")", "as", "download_weights_mock", ":", "\n", "            ", "AddressParser", "(", "\n", "model_type", "=", "self", ".", "a_fastest_model_type", ",", "\n", "device", "=", "self", ".", "a_cpu_device", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", "cache_dir", "=", "self", ".", "a_cache_dir", ",", "\n", ")", "\n", "download_weights_mock", ".", "assert_called_with", "(", "verbose", "=", "self", ".", "verbose", ",", "cache_dir", "=", "self", ".", "a_cache_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_formatted_parsed_address.FormattedParsedAddressTest.setUpClass": [[12, 72], ["None"], "methods", ["None"], ["    ", "@", "classmethod", "\n", "def", "setUpClass", "(", "cls", ")", ":", "\n", "        ", "cls", ".", "a_address_str", "=", "\"3 test road\"", "\n", "cls", ".", "a_complete_address_str", "=", "\"3 test road unit west city province postal_code delivery\"", "\n", "cls", ".", "a_parsed_address", "=", "[", "\n", "(", "\"3\"", ",", "\"StreetNumber\"", ")", ",", "\n", "(", "\"test\"", ",", "\"StreetName\"", ")", ",", "\n", "(", "\"road\"", ",", "\"StreetName\"", ")", ",", "\n", "]", "\n", "cls", ".", "a_complete_parsed_address", "=", "[", "\n", "(", "\"3\"", ",", "\"StreetNumber\"", ")", ",", "\n", "(", "\"test\"", ",", "\"StreetName\"", ")", ",", "\n", "(", "\"road\"", ",", "\"StreetName\"", ")", ",", "\n", "(", "\"unit\"", ",", "\"Unit\"", ")", ",", "\n", "(", "\"west\"", ",", "\"Orientation\"", ")", ",", "\n", "(", "\"city\"", ",", "\"Municipality\"", ")", ",", "\n", "(", "\"province\"", ",", "\"Province\"", ")", ",", "\n", "(", "\"postal_code\"", ",", "\"PostalCode\"", ")", ",", "\n", "(", "\"delivery\"", ",", "\"GeneralDelivery\"", ")", ",", "\n", "]", "\n", "\n", "cls", ".", "a_address_repr", "=", "\"FormattedParsedAddress<StreetNumber='3', StreetName='test road'>\"", "\n", "cls", ".", "a_address", "=", "{", "cls", ".", "a_address_str", ":", "cls", ".", "a_parsed_address", "}", "\n", "cls", ".", "a_complete_address", "=", "{", "cls", ".", "a_complete_address_str", ":", "cls", ".", "a_complete_parsed_address", "}", "\n", "cls", ".", "a_existing_tag", "=", "\"3\"", "\n", "\n", "cls", ".", "a_parsed_address_in_dict_format", "=", "{", "\n", "\"StreetNumber\"", ":", "\"3\"", ",", "\n", "\"Unit\"", ":", "None", ",", "\n", "\"StreetName\"", ":", "\"test road\"", ",", "\n", "\"Orientation\"", ":", "None", ",", "\n", "\"Municipality\"", ":", "None", ",", "\n", "\"Province\"", ":", "None", ",", "\n", "\"PostalCode\"", ":", "None", ",", "\n", "\"GeneralDelivery\"", ":", "None", ",", "\n", "\"EOS\"", ":", "None", ",", "\n", "}", "\n", "\n", "cls", ".", "a_parsed_address_in_list_format", "=", "[", "\n", "(", "\"3\"", ",", "\"StreetNumber\"", ")", ",", "\n", "(", "None", ",", "\"Unit\"", ")", ",", "\n", "(", "\"test road\"", ",", "\"StreetName\"", ")", ",", "\n", "(", "None", ",", "\"Orientation\"", ")", ",", "\n", "(", "None", ",", "\"Municipality\"", ")", ",", "\n", "(", "None", ",", "\"Province\"", ")", ",", "\n", "(", "None", ",", "\"PostalCode\"", ")", ",", "\n", "(", "None", ",", "\"GeneralDelivery\"", ")", ",", "\n", "(", "None", ",", "\"EOS\"", ")", ",", "\n", "]", "\n", "\n", "cls", ".", "a_complete_parsed_address_in_dict_format", "=", "{", "\n", "\"StreetNumber\"", ":", "\"3\"", ",", "\n", "\"Unit\"", ":", "\"unit\"", ",", "\n", "\"StreetName\"", ":", "\"test road\"", ",", "\n", "\"Orientation\"", ":", "\"west\"", ",", "\n", "\"Municipality\"", ":", "\"city\"", ",", "\n", "\"Province\"", ":", "\"province\"", ",", "\n", "\"PostalCode\"", ":", "\"postal_code\"", ",", "\n", "\"GeneralDelivery\"", ":", "\"delivery\"", ",", "\n", "\"EOS\"", ":", "None", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_formatted_parsed_address.FormattedParsedAddressTest._capture_output": [[74, 78], ["io.StringIO"], "methods", ["None"], ["", "def", "_capture_output", "(", "self", ")", ":", "\n", "        ", "self", ".", "test_out", "=", "io", ".", "StringIO", "(", ")", "\n", "self", ".", "original_output", "=", "sys", ".", "stdout", "\n", "sys", ".", "stdout", "=", "self", ".", "test_out", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_formatted_parsed_address.FormattedParsedAddressTest.setUp": [[79, 83], ["deepparse.parser.FormattedParsedAddress", "deepparse.parser.FormattedParsedAddress", "test_formatted_parsed_address.FormattedParsedAddressTest.reset_fields"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.base.FormattedParsedAddressBase.reset_fields"], ["", "def", "setUp", "(", "self", ")", ":", "\n", "        ", "self", ".", "parsed_address", "=", "FormattedParsedAddress", "(", "self", ".", "a_address", ")", "\n", "self", ".", "complete_parsed_address", "=", "FormattedParsedAddress", "(", "self", ".", "a_complete_address", ")", "\n", "self", ".", "reset_fields", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_formatted_parsed_address.FormattedParsedAddressTest.test_whenInstantiatedWithAddress_thenShouldReturnCorrectRawAddress": [[84, 88], ["test_formatted_parsed_address.FormattedParsedAddressTest.assertEqual"], "methods", ["None"], ["", "def", "test_whenInstantiatedWithAddress_thenShouldReturnCorrectRawAddress", "(", "self", ")", ":", "\n", "        ", "address", "=", "self", ".", "parsed_address", ".", "raw_address", "\n", "\n", "self", ".", "assertEqual", "(", "address", ",", "self", ".", "a_address_str", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_formatted_parsed_address.FormattedParsedAddressTest.test_whenInstantiatedWithAddress_thenShouldReturnCorrectParsedAddress": [[89, 93], ["test_formatted_parsed_address.FormattedParsedAddressTest.assertEqual"], "methods", ["None"], ["", "def", "test_whenInstantiatedWithAddress_thenShouldReturnCorrectParsedAddress", "(", "self", ")", ":", "\n", "        ", "parsed_address", "=", "self", ".", "parsed_address", ".", "address_parsed_components", "\n", "\n", "self", ".", "assertEqual", "(", "parsed_address", ",", "self", ".", "a_parsed_address", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_formatted_parsed_address.FormattedParsedAddressTest.test_whenInstantiatedWithAddress_thenShouldReturnCorrectTagIfExists": [[94, 98], ["test_formatted_parsed_address.FormattedParsedAddressTest.assertEqual"], "methods", ["None"], ["", "def", "test_whenInstantiatedWithAddress_thenShouldReturnCorrectTagIfExists", "(", "self", ")", ":", "\n", "        ", "street_number", "=", "self", ".", "parsed_address", ".", "StreetNumber", "\n", "\n", "self", ".", "assertEqual", "(", "street_number", ",", "self", ".", "a_existing_tag", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_formatted_parsed_address.FormattedParsedAddressTest.test_whenInstantiatedWithAddress_thenShouldReturnNoneIfTagDoesntExist": [[99, 103], ["test_formatted_parsed_address.FormattedParsedAddressTest.assertIsNone"], "methods", ["None"], ["", "def", "test_whenInstantiatedWithAddress_thenShouldReturnNoneIfTagDoesntExist", "(", "self", ")", ":", "\n", "        ", "unit", "=", "self", ".", "parsed_address", ".", "Unit", "\n", "\n", "self", ".", "assertIsNone", "(", "unit", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_formatted_parsed_address.FormattedParsedAddressTest.test_whenStrAnParseAddress_thenStringIsTheRawAddressPlusParsedComponents": [[104, 116], ["test_formatted_parsed_address.FormattedParsedAddressTest._capture_output", "print", "test_formatted_parsed_address.FormattedParsedAddressTest.test_out.getvalue().strip", "test_formatted_parsed_address.FormattedParsedAddressTest.assertEqual", "test_formatted_parsed_address.FormattedParsedAddressTest.test_out.getvalue"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.tests.base_capture_output.CaptureOutputTestCase._capture_output"], ["", "def", "test_whenStrAnParseAddress_thenStringIsTheRawAddressPlusParsedComponents", "(", "self", ")", ":", "\n", "        ", "self", ".", "_capture_output", "(", ")", "\n", "\n", "print", "(", "self", ".", "parsed_address", ")", "\n", "actual", "=", "self", ".", "test_out", ".", "getvalue", "(", ")", ".", "strip", "(", ")", "\n", "\n", "expected", "=", "(", "\n", "\"The unparsed address is '3 test road' and the parsed address is '('3', \"", "\n", "\"'StreetNumber') ('test', 'StreetName') ('road', 'StreetName')'\"", "\n", ")", "\n", "\n", "self", ".", "assertEqual", "(", "expected", ",", "actual", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_formatted_parsed_address.FormattedParsedAddressTest.test_whenReprAnParseAddress_thenStringIsTheAddressFormatted": [[117, 123], ["test_formatted_parsed_address.FormattedParsedAddressTest._capture_output", "print", "test_formatted_parsed_address.FormattedParsedAddressTest.assertEqual", "test_formatted_parsed_address.FormattedParsedAddressTest.parsed_address.__repr__", "test_formatted_parsed_address.FormattedParsedAddressTest.test_out.getvalue().strip", "test_formatted_parsed_address.FormattedParsedAddressTest.test_out.getvalue"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.tests.base_capture_output.CaptureOutputTestCase._capture_output", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.formatted_parsed_address.FormattedParsedAddress.__repr__"], ["", "def", "test_whenReprAnParseAddress_thenStringIsTheAddressFormatted", "(", "self", ")", ":", "\n", "        ", "self", ".", "_capture_output", "(", ")", "\n", "\n", "print", "(", "self", ".", "parsed_address", ".", "__repr__", "(", ")", ")", "\n", "\n", "self", ".", "assertEqual", "(", "self", ".", "a_address_repr", ",", "self", ".", "test_out", ".", "getvalue", "(", ")", ".", "strip", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_formatted_parsed_address.FormattedParsedAddressTest.test_whenToDictDefaultFields_thenReturnTheProperDict": [[124, 132], ["test_formatted_parsed_address.FormattedParsedAddressTest.parsed_address.to_dict", "test_formatted_parsed_address.FormattedParsedAddressTest.assertEqual", "test_formatted_parsed_address.FormattedParsedAddressTest.complete_parsed_address.to_dict", "test_formatted_parsed_address.FormattedParsedAddressTest.assertEqual"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.formatted_parsed_address.FormattedParsedAddress.to_dict", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.formatted_parsed_address.FormattedParsedAddress.to_dict"], ["", "def", "test_whenToDictDefaultFields_thenReturnTheProperDict", "(", "self", ")", ":", "\n", "        ", "actual", "=", "self", ".", "parsed_address", ".", "to_dict", "(", ")", "\n", "expected", "=", "self", ".", "a_parsed_address_in_dict_format", "\n", "self", ".", "assertEqual", "(", "actual", ",", "expected", ")", "\n", "\n", "actual", "=", "self", ".", "complete_parsed_address", ".", "to_dict", "(", ")", "\n", "expected", "=", "self", ".", "a_complete_parsed_address_in_dict_format", "\n", "self", ".", "assertEqual", "(", "actual", ",", "expected", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_formatted_parsed_address.FormattedParsedAddressTest.test_whenToDictUserFields_thenReturnTheProperDict": [[133, 141], ["test_formatted_parsed_address.FormattedParsedAddressTest.parsed_address.to_dict", "test_formatted_parsed_address.FormattedParsedAddressTest.assertEqual", "test_formatted_parsed_address.FormattedParsedAddressTest.complete_parsed_address.to_dict", "test_formatted_parsed_address.FormattedParsedAddressTest.assertEqual"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.formatted_parsed_address.FormattedParsedAddress.to_dict", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.formatted_parsed_address.FormattedParsedAddress.to_dict"], ["", "def", "test_whenToDictUserFields_thenReturnTheProperDict", "(", "self", ")", ":", "\n", "        ", "actual", "=", "self", ".", "parsed_address", ".", "to_dict", "(", "fields", "=", "[", "\"StreetNumber\"", "]", ")", "\n", "expected", "=", "{", "\"StreetNumber\"", ":", "\"3\"", "}", "\n", "self", ".", "assertEqual", "(", "actual", ",", "expected", ")", "\n", "\n", "actual", "=", "self", ".", "complete_parsed_address", ".", "to_dict", "(", "fields", "=", "[", "\"StreetNumber\"", "]", ")", "\n", "expected", "=", "{", "\"StreetNumber\"", ":", "\"3\"", "}", "\n", "self", ".", "assertEqual", "(", "actual", ",", "expected", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_formatted_parsed_address.FormattedParsedAddressTest.test_whenFormattedAddressDefaultSettings_thenReturnExpectedOrderAndDontReturnNoneComponents": [[142, 154], ["test_formatted_parsed_address.FormattedParsedAddressTest.parsed_address.format_address", "test_formatted_parsed_address.FormattedParsedAddressTest.assertEqual", "test_formatted_parsed_address.FormattedParsedAddressTest.complete_parsed_address.format_address", "test_formatted_parsed_address.FormattedParsedAddressTest.assertEqual"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.formatted_parsed_address.FormattedParsedAddress.format_address", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.formatted_parsed_address.FormattedParsedAddress.format_address"], ["", "def", "test_whenFormattedAddressDefaultSettings_thenReturnExpectedOrderAndDontReturnNoneComponents", "(", "\n", "self", ",", "\n", ")", ":", "\n", "        ", "actual", "=", "self", ".", "parsed_address", ".", "format_address", "(", ")", "\n", "expected", "=", "self", ".", "a_address_str", "\n", "\n", "self", ".", "assertEqual", "(", "actual", ",", "expected", ")", "\n", "\n", "actual", "=", "self", ".", "complete_parsed_address", ".", "format_address", "(", ")", "\n", "expected", "=", "\"3 test road unit west city province postal_code delivery\"", "\n", "\n", "self", ".", "assertEqual", "(", "actual", ",", "expected", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_formatted_parsed_address.FormattedParsedAddressTest.test_whenFormattedAddressFieldsChanged_thenReturnNewOrderFields": [[155, 175], ["test_formatted_parsed_address.FormattedParsedAddressTest.parsed_address.format_address", "test_formatted_parsed_address.FormattedParsedAddressTest.assertEqual", "test_formatted_parsed_address.FormattedParsedAddressTest.complete_parsed_address.format_address", "test_formatted_parsed_address.FormattedParsedAddressTest.assertEqual"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.formatted_parsed_address.FormattedParsedAddress.format_address", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.formatted_parsed_address.FormattedParsedAddress.format_address"], ["", "def", "test_whenFormattedAddressFieldsChanged_thenReturnNewOrderFields", "(", "self", ")", ":", "\n", "        ", "a_different_order", "=", "[", "\n", "\"GeneralDelivery\"", ",", "\n", "\"Unit\"", ",", "\n", "\"StreetName\"", ",", "\n", "\"StreetNumber\"", ",", "\n", "\"Orientation\"", ",", "\n", "\"Municipality\"", ",", "\n", "\"Province\"", ",", "\n", "\"PostalCode\"", ",", "\n", "]", "\n", "actual", "=", "self", ".", "parsed_address", ".", "format_address", "(", "fields", "=", "a_different_order", ")", "\n", "expected", "=", "\"test road 3\"", "\n", "\n", "self", ".", "assertEqual", "(", "actual", ",", "expected", ")", "\n", "\n", "actual", "=", "self", ".", "complete_parsed_address", ".", "format_address", "(", "fields", "=", "a_different_order", ")", "\n", "expected", "=", "\"delivery unit test road 3 west city province postal_code\"", "\n", "\n", "self", ".", "assertEqual", "(", "actual", ",", "expected", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_formatted_parsed_address.FormattedParsedAddressTest.test_whenFormattedAddressFieldsSeparator_thenReturnAddressWithFieldsSeparator": [[176, 188], ["test_formatted_parsed_address.FormattedParsedAddressTest.parsed_address.format_address", "test_formatted_parsed_address.FormattedParsedAddressTest.assertEqual", "test_formatted_parsed_address.FormattedParsedAddressTest.complete_parsed_address.format_address", "test_formatted_parsed_address.FormattedParsedAddressTest.assertEqual"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.formatted_parsed_address.FormattedParsedAddress.format_address", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.formatted_parsed_address.FormattedParsedAddress.format_address"], ["", "def", "test_whenFormattedAddressFieldsSeparator_thenReturnAddressWithFieldsSeparator", "(", "\n", "self", ",", "\n", ")", ":", "\n", "        ", "actual", "=", "self", ".", "parsed_address", ".", "format_address", "(", "field_separator", "=", "\", \"", ")", "\n", "expected", "=", "\"3, test road\"", "\n", "\n", "self", ".", "assertEqual", "(", "actual", ",", "expected", ")", "\n", "\n", "actual", "=", "self", ".", "complete_parsed_address", ".", "format_address", "(", "field_separator", "=", "\", \"", ")", "\n", "expected", "=", "\"3, test road, unit, west, city, province, postal_code, delivery\"", "\n", "\n", "self", ".", "assertEqual", "(", "actual", ",", "expected", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_formatted_parsed_address.FormattedParsedAddressTest.test_whenFormattedAddressCapitalizeFields_thenReturnAddressWithFieldsCapitalize": [[189, 201], ["test_formatted_parsed_address.FormattedParsedAddressTest.parsed_address.format_address", "test_formatted_parsed_address.FormattedParsedAddressTest.assertEqual", "test_formatted_parsed_address.FormattedParsedAddressTest.complete_parsed_address.format_address", "test_formatted_parsed_address.FormattedParsedAddressTest.assertEqual"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.formatted_parsed_address.FormattedParsedAddress.format_address", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.formatted_parsed_address.FormattedParsedAddress.format_address"], ["", "def", "test_whenFormattedAddressCapitalizeFields_thenReturnAddressWithFieldsCapitalize", "(", "\n", "self", ",", "\n", ")", ":", "\n", "        ", "actual", "=", "self", ".", "parsed_address", ".", "format_address", "(", "capitalize_fields", "=", "[", "\"StreetName\"", "]", ")", "\n", "expected", "=", "\"3 Test road\"", "\n", "\n", "self", ".", "assertEqual", "(", "actual", ",", "expected", ")", "\n", "\n", "actual", "=", "self", ".", "complete_parsed_address", ".", "format_address", "(", "capitalize_fields", "=", "[", "\"PostalCode\"", ",", "\"Province\"", "]", ")", "\n", "expected", "=", "\"3 test road unit west city Province Postal_code delivery\"", "\n", "\n", "self", ".", "assertEqual", "(", "actual", ",", "expected", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_formatted_parsed_address.FormattedParsedAddressTest.test_whenFormattedAddressCapitalizeFieldsNotAddressFields_thenRaiseError": [[202, 208], ["test_formatted_parsed_address.FormattedParsedAddressTest.assertRaises", "test_formatted_parsed_address.FormattedParsedAddressTest.parsed_address.format_address", "test_formatted_parsed_address.FormattedParsedAddressTest.assertRaises", "test_formatted_parsed_address.FormattedParsedAddressTest.complete_parsed_address.format_address"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.formatted_parsed_address.FormattedParsedAddress.format_address", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.formatted_parsed_address.FormattedParsedAddress.format_address"], ["", "def", "test_whenFormattedAddressCapitalizeFieldsNotAddressFields_thenRaiseError", "(", "self", ")", ":", "\n", "        ", "with", "self", ".", "assertRaises", "(", "KeyError", ")", ":", "\n", "            ", "self", ".", "parsed_address", ".", "format_address", "(", "capitalize_fields", "=", "[", "\"not_a_field\"", "]", ")", "\n", "\n", "", "with", "self", ".", "assertRaises", "(", "KeyError", ")", ":", "\n", "            ", "self", ".", "complete_parsed_address", ".", "format_address", "(", "capitalize_fields", "=", "[", "\"not_a_field\"", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_formatted_parsed_address.FormattedParsedAddressTest.test_whenFormattedAddressUpperCaseFields_thenReturnAddressWithFieldsUpperCase": [[209, 221], ["test_formatted_parsed_address.FormattedParsedAddressTest.parsed_address.format_address", "test_formatted_parsed_address.FormattedParsedAddressTest.assertEqual", "test_formatted_parsed_address.FormattedParsedAddressTest.complete_parsed_address.format_address", "test_formatted_parsed_address.FormattedParsedAddressTest.assertEqual"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.formatted_parsed_address.FormattedParsedAddress.format_address", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.formatted_parsed_address.FormattedParsedAddress.format_address"], ["", "", "def", "test_whenFormattedAddressUpperCaseFields_thenReturnAddressWithFieldsUpperCase", "(", "\n", "self", ",", "\n", ")", ":", "\n", "        ", "actual", "=", "self", ".", "parsed_address", ".", "format_address", "(", "upper_case_fields", "=", "[", "\"StreetName\"", "]", ")", "\n", "expected", "=", "\"3 TEST ROAD\"", "\n", "\n", "self", ".", "assertEqual", "(", "actual", ",", "expected", ")", "\n", "\n", "actual", "=", "self", ".", "complete_parsed_address", ".", "format_address", "(", "upper_case_fields", "=", "[", "\"PostalCode\"", ",", "\"Province\"", "]", ")", "\n", "expected", "=", "\"3 test road unit west city PROVINCE POSTAL_CODE delivery\"", "\n", "\n", "self", ".", "assertEqual", "(", "actual", ",", "expected", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_formatted_parsed_address.FormattedParsedAddressTest.test_whenFormattedAddressUpperCaseFieldsNotAddressFields_thenRaiseError": [[222, 228], ["test_formatted_parsed_address.FormattedParsedAddressTest.assertRaises", "test_formatted_parsed_address.FormattedParsedAddressTest.parsed_address.format_address", "test_formatted_parsed_address.FormattedParsedAddressTest.assertRaises", "test_formatted_parsed_address.FormattedParsedAddressTest.complete_parsed_address.format_address"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.formatted_parsed_address.FormattedParsedAddress.format_address", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.formatted_parsed_address.FormattedParsedAddress.format_address"], ["", "def", "test_whenFormattedAddressUpperCaseFieldsNotAddressFields_thenRaiseError", "(", "self", ")", ":", "\n", "        ", "with", "self", ".", "assertRaises", "(", "KeyError", ")", ":", "\n", "            ", "self", ".", "parsed_address", ".", "format_address", "(", "upper_case_fields", "=", "[", "\"not_a_field\"", "]", ")", "\n", "\n", "", "with", "self", ".", "assertRaises", "(", "KeyError", ")", ":", "\n", "            ", "self", ".", "complete_parsed_address", ".", "format_address", "(", "upper_case_fields", "=", "[", "\"not_a_field\"", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_formatted_parsed_address.FormattedParsedAddressTest.test_whenFormattedAddressAllArgsChanged_thenReturnAddressProperlyFormatted": [[229, 252], ["test_formatted_parsed_address.FormattedParsedAddressTest.complete_parsed_address.format_address", "test_formatted_parsed_address.FormattedParsedAddressTest.assertEqual"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.formatted_parsed_address.FormattedParsedAddress.format_address"], ["", "", "def", "test_whenFormattedAddressAllArgsChanged_thenReturnAddressProperlyFormatted", "(", "\n", "self", ",", "\n", ")", ":", "\n", "        ", "a_different_order", "=", "[", "\n", "\"GeneralDelivery\"", ",", "\n", "\"Unit\"", ",", "\n", "\"StreetName\"", ",", "\n", "\"StreetNumber\"", ",", "\n", "\"Orientation\"", ",", "\n", "\"Municipality\"", ",", "\n", "\"Province\"", ",", "\n", "\"PostalCode\"", ",", "\n", "]", "\n", "\n", "actual", "=", "self", ".", "complete_parsed_address", ".", "format_address", "(", "\n", "fields", "=", "a_different_order", ",", "\n", "field_separator", "=", "\", \"", ",", "\n", "capitalize_fields", "=", "[", "\"StreetName\"", "]", ",", "\n", "upper_case_fields", "=", "[", "\"PostalCode\"", ",", "\"Province\"", "]", ",", "\n", ")", "\n", "expected", "=", "\"delivery, unit, Test road, 3, west, city, PROVINCE, POSTAL_CODE\"", "\n", "\n", "self", ".", "assertEqual", "(", "actual", ",", "expected", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_formatted_parsed_address.FormattedParsedAddressTest.test_whenFormattedParsedAddressInferredOrder_thenProperlyInferred": [[253, 272], ["test_formatted_parsed_address.FormattedParsedAddressTest.assertEqual", "test_formatted_parsed_address.FormattedParsedAddressTest.assertEqual"], "methods", ["None"], ["", "def", "test_whenFormattedParsedAddressInferredOrder_thenProperlyInferred", "(", "self", ")", ":", "\n", "        ", "actual", "=", "self", ".", "parsed_address", ".", "inferred_order", "\n", "expected", "=", "[", "\"StreetNumber\"", ",", "\"StreetName\"", "]", "\n", "\n", "self", ".", "assertEqual", "(", "actual", ",", "expected", ")", "\n", "\n", "actual", "=", "self", ".", "complete_parsed_address", ".", "inferred_order", "\n", "expected", "=", "[", "\n", "\"StreetNumber\"", ",", "\n", "\"StreetName\"", ",", "\n", "\"Unit\"", ",", "\n", "\"Orientation\"", ",", "\n", "\"Municipality\"", ",", "\n", "\"Province\"", ",", "\n", "\"PostalCode\"", ",", "\n", "\"GeneralDelivery\"", ",", "\n", "]", "\n", "\n", "self", ".", "assertEqual", "(", "actual", ",", "expected", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_formatted_parsed_address.FormattedParsedAddressTest.test_whenEqualParsedAddress_then__eq__ReturnTrue": [[273, 276], ["test_formatted_parsed_address.FormattedParsedAddressTest.assertTrue", "test_formatted_parsed_address.FormattedParsedAddressTest.assertTrue"], "methods", ["None"], ["", "def", "test_whenEqualParsedAddress_then__eq__ReturnTrue", "(", "self", ")", ":", "\n", "        ", "self", ".", "assertTrue", "(", "self", ".", "parsed_address", "==", "self", ".", "parsed_address", ")", "\n", "self", ".", "assertTrue", "(", "self", ".", "complete_parsed_address", "==", "self", ".", "complete_parsed_address", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_formatted_parsed_address.FormattedParsedAddressTest.test_whenNotEqualParsedAddress_then__eq__ReturnFalse": [[277, 280], ["test_formatted_parsed_address.FormattedParsedAddressTest.assertFalse", "test_formatted_parsed_address.FormattedParsedAddressTest.assertFalse"], "methods", ["None"], ["", "def", "test_whenNotEqualParsedAddress_then__eq__ReturnFalse", "(", "self", ")", ":", "\n", "        ", "self", ".", "assertFalse", "(", "self", ".", "parsed_address", "==", "self", ".", "complete_parsed_address", ")", "\n", "self", ".", "assertFalse", "(", "self", ".", "complete_parsed_address", "==", "self", ".", "parsed_address", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_formatted_parsed_address.FormattedParsedAddressTest.test_whenParsedAddressAsEOSTag_thenProperlySet": [[281, 293], ["deepparse.parser.FormattedParsedAddress", "test_formatted_parsed_address.FormattedParsedAddressTest.assertIsNotNone"], "methods", ["None"], ["", "def", "test_whenParsedAddressAsEOSTag_thenProperlySet", "(", "self", ")", ":", "\n", "        ", "a_parsed_address_with_eos_tag", "=", "{", "\n", "self", ".", "a_address_str", ":", "[", "\n", "(", "\"3\"", ",", "\"StreetNumber\"", ")", ",", "\n", "(", "\"test\"", ",", "\"StreetName\"", ")", ",", "\n", "(", "\"road\"", ",", "\"EOS\"", ")", ",", "\n", "]", "\n", "}", "\n", "\n", "actual_parsed_address", "=", "FormattedParsedAddress", "(", "a_parsed_address_with_eos_tag", ")", "\n", "\n", "self", ".", "assertIsNotNone", "(", "actual_parsed_address", ".", "EOS", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_formatted_parsed_address.FormattedParsedAddressTest.test_integration_to_pandas": [[294, 302], ["test_formatted_parsed_address.FormattedParsedAddressTest.parsed_address.to_pandas", "test_formatted_parsed_address.FormattedParsedAddressTest.assertEqual", "test_formatted_parsed_address.FormattedParsedAddressTest.complete_parsed_address.to_pandas", "test_formatted_parsed_address.FormattedParsedAddressTest.assertEqual"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.formatted_parsed_address.FormattedParsedAddress.to_pandas", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.formatted_parsed_address.FormattedParsedAddress.to_pandas"], ["", "def", "test_integration_to_pandas", "(", "self", ")", ":", "\n", "        ", "actual", "=", "self", ".", "parsed_address", ".", "to_pandas", "(", ")", "\n", "expected", "=", "{", "\"Address\"", ":", "self", ".", "a_address_str", ",", "**", "self", ".", "a_parsed_address_in_dict_format", "}", "\n", "self", ".", "assertEqual", "(", "actual", ",", "expected", ")", "\n", "\n", "actual", "=", "self", ".", "complete_parsed_address", ".", "to_pandas", "(", ")", "\n", "expected", "=", "{", "\"Address\"", ":", "self", ".", "a_complete_address_str", ",", "**", "self", ".", "a_complete_parsed_address_in_dict_format", "}", "\n", "self", ".", "assertEqual", "(", "actual", ",", "expected", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_formatted_parsed_address.FormattedParsedAddressTest.test_integration_to_pickle": [[303, 307], ["test_formatted_parsed_address.FormattedParsedAddressTest.parsed_address.to_pickle", "test_formatted_parsed_address.FormattedParsedAddressTest.assertEqual"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.tools.to_pickle"], ["", "def", "test_integration_to_pickle", "(", "self", ")", ":", "\n", "        ", "actual", "=", "self", ".", "parsed_address", ".", "to_pickle", "(", ")", "\n", "expected", "=", "(", "self", ".", "a_address_str", ",", "self", ".", "a_parsed_address_in_list_format", ")", "\n", "self", ".", "assertEqual", "(", "actual", ",", "expected", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_address_parser_retrain_api.AddressParserRetrainTest.setUpClass": [[19, 44], ["super().setUpClass", "torch.device", "torch.device", "tests.tools.ADataContainer"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_seq2seq_fasttext_model_gpu.FastTextSeq2SeqIntegrationTest.setUpClass"], ["    ", "@", "classmethod", "\n", "def", "setUpClass", "(", "cls", ")", ":", "\n", "        ", "super", "(", "AddressParserRetrainTest", ",", "cls", ")", ".", "setUpClass", "(", ")", "\n", "cls", ".", "a_device", "=", "torch", ".", "device", "(", "\"cpu\"", ")", "\n", "\n", "cls", ".", "a_train_ratio", "=", "0.8", "\n", "cls", ".", "a_batch_size", "=", "BATCH_SIZE", "\n", "cls", ".", "a_epoch_number", "=", "1", "\n", "cls", ".", "a_number_of_workers", "=", "1", "\n", "cls", ".", "a_learning_rate", "=", "0.01", "\n", "cls", ".", "a_callbacks_list", "=", "[", "]", "\n", "cls", ".", "a_seed", "=", "42", "\n", "cls", ".", "a_torch_device", "=", "torch", ".", "device", "(", "\"cuda:0\"", ")", "\n", "\n", "cls", ".", "mocked_data_container", "=", "ADataContainer", "(", ")", "\n", "\n", "cls", ".", "a_best_checkpoint", "=", "\"best\"", "\n", "\n", "cls", ".", "verbose", "=", "False", "\n", "\n", "cls", ".", "address_components", "=", "{", "\"ATag\"", ":", "0", ",", "\"AnotherTag\"", ":", "1", ",", "\"EOS\"", ":", "2", "}", "\n", "\n", "cls", ".", "seq2seq_params", "=", "{", "\"encoder_hidden_size\"", ":", "512", ",", "\"decoder_hidden_size\"", ":", "512", "}", "\n", "\n", "cls", ".", "a_named_parser_name", "=", "\"AModelName\"", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_address_parser_retrain_api.AddressParserRetrainTest.setUp": [[45, 50], ["tempfile.TemporaryDirectory", "os.path.join", "os.makedirs", "os.path.join"], "methods", ["None"], ["", "def", "setUp", "(", "self", ")", ":", "\n", "        ", "self", ".", "temp_dir_obj", "=", "TemporaryDirectory", "(", ")", "\n", "self", ".", "a_logging_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "temp_dir_obj", ".", "name", ",", "\"ckpts\"", ")", "\n", "os", ".", "makedirs", "(", "self", ".", "a_logging_path", ")", "\n", "self", ".", "saving_template_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "a_logging_path", ",", "\"retrained_{}_address_parser.ckpt\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_address_parser_retrain_api.AddressParserRetrainTest.populate_directory": [[51, 55], ["tests.tools.create_file", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.tests.tools.create_file"], ["", "def", "populate_directory", "(", "self", ")", ":", "\n", "        ", "create_file", "(", "\n", "os", ".", "path", ".", "join", "(", "self", ".", "a_logging_path", ",", "\"retrained_fasttext_address_parser.ckpt\"", ")", ",", "\n", "\"a content\"", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_address_parser_retrain_api.AddressParserRetrainTest.tearDown": [[57, 59], ["test_address_parser_retrain_api.AddressParserRetrainTest.temp_dir_obj.cleanup"], "methods", ["None"], ["", "def", "tearDown", "(", "self", ")", "->", "None", ":", "\n", "        ", "self", ".", "temp_dir_obj", ".", "cleanup", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_address_parser_retrain_api.AddressParserRetrainTest.address_parser_retrain_call": [[60, 77], ["test_address_parser_retrain_api.AddressParserRetrainTest.address_parser.retrain"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.address_parser.AddressParser.retrain"], ["", "def", "address_parser_retrain_call", "(", "\n", "self", ",", "prediction_tags", "=", "None", ",", "seq2seq_params", "=", "None", ",", "layers_to_freeze", "=", "None", ",", "name_of_the_retrain_parser", "=", "None", "\n", ")", ":", "\n", "        ", "self", ".", "address_parser", ".", "retrain", "(", "\n", "self", ".", "mocked_data_container", ",", "\n", "self", ".", "a_train_ratio", ",", "\n", "self", ".", "a_batch_size", ",", "\n", "self", ".", "a_epoch_number", ",", "\n", "num_workers", "=", "self", ".", "a_number_of_workers", ",", "\n", "learning_rate", "=", "self", ".", "a_learning_rate", ",", "\n", "callbacks", "=", "self", ".", "a_callbacks_list", ",", "\n", "seed", "=", "self", ".", "a_seed", ",", "\n", "logging_path", "=", "self", ".", "a_logging_path", ",", "\n", "prediction_tags", "=", "prediction_tags", ",", "\n", "seq2seq_params", "=", "seq2seq_params", ",", "\n", "layers_to_freeze", "=", "layers_to_freeze", ",", "\n", "name_of_the_retrain_parser", "=", "name_of_the_retrain_parser", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_address_parser_retrain_api.AddressParserRetrainTest.assert_experiment_retrain": [[79, 90], ["experiment_mock.assert_called_with", "model_mock", "optimizer_mock"], "methods", ["None"], ["", "def", "assert_experiment_retrain", "(", "self", ",", "experiment_mock", ",", "model_mock", ",", "optimizer_mock", ",", "device", ")", ":", "\n", "        ", "experiment_mock", ".", "assert_called_with", "(", "\n", "self", ".", "a_logging_path", ",", "\n", "model_mock", "(", ")", ",", "\n", "device", "=", "device", ",", "\n", "optimizer", "=", "optimizer_mock", "(", ")", ",", "\n", "# For a reason I don\"t understand if I use self.nll_loss and set it in the", "\n", "# class setup, it return a bound method for the nll_loss but it work for", "\n", "# the accuracy. So fuck it, here a fix.", "\n", "loss_function", "=", "nll_loss", ",", "\n", "batch_metrics", "=", "[", "accuracy", "]", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_address_parser_retrain_api.AddressParserRetrainTest.assert_experiment_train_method_is_call": [[92, 105], ["experiment_mock.assert_has_calls", "unittest.mock.call().train", "data_loader_mock", "unittest.mock.call", "data_loader_mock"], "methods", ["None"], ["", "def", "assert_experiment_train_method_is_call", "(", "self", ",", "data_loader_mock", ",", "experiment_mock", ")", ":", "\n", "        ", "train_call", "=", "[", "\n", "call", "(", ")", ".", "train", "(", "\n", "data_loader_mock", "(", ")", ",", "\n", "valid_generator", "=", "data_loader_mock", "(", ")", ",", "\n", "epochs", "=", "self", ".", "a_epoch_number", ",", "\n", "seed", "=", "self", ".", "a_seed", ",", "\n", "callbacks", "=", "[", "]", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", "disable_tensorboard", "=", "True", ",", "\n", ")", "\n", "]", "\n", "experiment_mock", ".", "assert_has_calls", "(", "train_call", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_address_parser_retrain_api.AddressParserRetrainTest.test_givenAFasttextModel_whenRetrain_thenInstantiateOptimizer": [[106, 135], ["unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "deepparse.parser.AddressParser", "test_address_parser_retrain_api.AddressParserRetrainTest.address_parser_retrain_call", "optimizer_mock.assert_called_with", "model_mock().parameters", "model_mock"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_address_parser_retrain_api.AddressParserRetrainTest.address_parser_retrain_call"], ["", "@", "patch", "(", "\"deepparse.parser.address_parser.torch.save\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.Experiment\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.SGD\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.DataTransform\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.FastTextSeq2SeqModel\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.fasttext_data_padding\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.FastTextVectorizer\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.FastTextEmbeddingsModel\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.download_fasttext_embeddings\"", ")", "\n", "def", "test_givenAFasttextModel_whenRetrain_thenInstantiateOptimizer", "(", "\n", "self", ",", "\n", "download_weights_mock", ",", "\n", "embeddings_model_mock", ",", "\n", "vectorizer_model_mock", ",", "\n", "data_padding_mock", ",", "\n", "model_mock", ",", "\n", "data_transform_mock", ",", "\n", "optimizer_mock", ",", "\n", "experiment_mock", ",", "\n", "torch_save_mock", ",", "\n", ")", ":", "\n", "        ", "self", ".", "address_parser", "=", "AddressParser", "(", "\n", "model_type", "=", "self", ".", "a_fasttext_model_type", ",", "\n", "device", "=", "self", ".", "a_device", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", ")", "\n", "self", ".", "address_parser_retrain_call", "(", ")", "\n", "\n", "optimizer_mock", ".", "assert_called_with", "(", "model_mock", "(", ")", ".", "parameters", "(", ")", ",", "self", ".", "a_learning_rate", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_address_parser_retrain_api.AddressParserRetrainTest.test_givenAModel_whenRetrainWithPoutyneBefore18_thenPrintMessage": [[136, 175], ["unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "test_address_parser_retrain_api.AddressParserRetrainTest._capture_output", "deepparse.parser.AddressParser", "test_address_parser_retrain_api.AddressParserRetrainTest.address_parser_retrain_call", "test_address_parser_retrain_api.AddressParserRetrainTest.test_out.getvalue", "test_address_parser_retrain_api.AddressParserRetrainTest.assertEqual"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.tests.base_capture_output.CaptureOutputTestCase._capture_output", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_address_parser_retrain_api.AddressParserRetrainTest.address_parser_retrain_call"], ["", "@", "patch", "(", "\"deepparse.tools.poutyne\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.torch.save\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.Experiment\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.SGD\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.DataTransform\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.FastTextSeq2SeqModel\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.fasttext_data_padding\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.FastTextVectorizer\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.FastTextEmbeddingsModel\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.download_fasttext_embeddings\"", ")", "\n", "def", "test_givenAModel_whenRetrainWithPoutyneBefore18_thenPrintMessage", "(", "\n", "self", ",", "\n", "download_weights_mock", ",", "\n", "embeddings_model_mock", ",", "\n", "vectorizer_model_mock", ",", "\n", "data_padding_mock", ",", "\n", "model_mock", ",", "\n", "data_transform_mock", ",", "\n", "optimizer_mock", ",", "\n", "experiment_mock", ",", "\n", "torch_save_mock", ",", "\n", "poutyne_mock", ",", "\n", ")", ":", "\n", "        ", "poutyne_mock", ".", "version", ".", "__version__", "=", "\"1.7\"", "\n", "self", ".", "_capture_output", "(", ")", "\n", "self", ".", "address_parser", "=", "AddressParser", "(", "\n", "model_type", "=", "self", ".", "a_fasttext_model_type", ",", "\n", "device", "=", "self", ".", "a_device", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", ")", "\n", "self", ".", "address_parser_retrain_call", "(", ")", "\n", "\n", "actual", "=", "self", ".", "test_out", ".", "getvalue", "(", ")", "\n", "expected", "=", "(", "\n", "\"You are using a older version of Poutyne that does not support properly error management.\"", "\n", "\" Due to that, we cannot show retrain progress. To fix that, update Poutyne to the newest version.\\n\"", "\n", ")", "\n", "\n", "self", ".", "assertEqual", "(", "actual", ",", "expected", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_address_parser_retrain_api.AddressParserRetrainTest.test_givenAModel_whenRetrainWithPoutyneAfter17_thenDoNotPrintMessage": [[176, 220], ["unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "test_address_parser_retrain_api.AddressParserRetrainTest._capture_output", "deepparse.parser.AddressParser", "test_address_parser_retrain_api.AddressParserRetrainTest.address_parser_retrain_call", "test_address_parser_retrain_api.AddressParserRetrainTest.test_out.getvalue", "test_address_parser_retrain_api.AddressParserRetrainTest.assertEqual", "test_address_parser_retrain_api.AddressParserRetrainTest.assertNotRegex"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.tests.base_capture_output.CaptureOutputTestCase._capture_output", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_address_parser_retrain_api.AddressParserRetrainTest.address_parser_retrain_call"], ["", "@", "patch", "(", "\"deepparse.tools.poutyne\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.torch.save\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.Experiment\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.SGD\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.DataTransform\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.FastTextSeq2SeqModel\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.fasttext_data_padding\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.FastTextVectorizer\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.FastTextEmbeddingsModel\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.download_fasttext_embeddings\"", ")", "\n", "def", "test_givenAModel_whenRetrainWithPoutyneAfter17_thenDoNotPrintMessage", "(", "\n", "self", ",", "\n", "download_weights_mock", ",", "\n", "embeddings_model_mock", ",", "\n", "vectorizer_model_mock", ",", "\n", "data_padding_mock", ",", "\n", "model_mock", ",", "\n", "data_transform_mock", ",", "\n", "optimizer_mock", ",", "\n", "experiment_mock", ",", "\n", "torch_save_mock", ",", "\n", "poutyne_mock", ",", "\n", ")", ":", "\n", "        ", "poutyne_mock", ".", "version", ".", "__version__", "=", "\"1.8\"", "\n", "self", ".", "_capture_output", "(", ")", "\n", "self", ".", "address_parser", "=", "AddressParser", "(", "\n", "model_type", "=", "self", ".", "a_fasttext_model_type", ",", "\n", "device", "=", "self", ".", "a_device", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", ")", "\n", "self", ".", "address_parser_retrain_call", "(", ")", "\n", "\n", "actual", "=", "self", ".", "test_out", ".", "getvalue", "(", ")", "\n", "\n", "expected", "=", "\"\"", "\n", "self", ".", "assertEqual", "(", "actual", ",", "expected", ")", "\n", "\n", "not_expected", "=", "(", "\n", "\"You are using a older version of Poutyne that does not support properly error management.\"", "\n", "\" Due to that, we cannot show retrain progress. To fix that, update Poutyne to the newest \"", "\n", "\"version.\\n\"", "\n", ")", "\n", "\n", "self", ".", "assertNotRegex", "(", "actual", ",", "not_expected", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_address_parser_retrain_api.AddressParserRetrainTest.test_givenAFasttextModelDirectoryWithOtherRetrainModel_whenRetrain_thenRaiseError": [[221, 262], ["unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "test_address_parser_retrain_api.AddressParserRetrainTest.populate_directory", "deepparse.parser.AddressParser", "test_address_parser_retrain_api.AddressParserRetrainTest.assertRaises", "test_address_parser_retrain_api.AddressParserRetrainTest.address_parser_retrain_call", "test_address_parser_retrain_api.AddressParserRetrainTest.address_parser_retrain_call", "test_address_parser_retrain_api.AddressParserRetrainTest.assertEqual", "RuntimeError"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_tools.ToolsTests.populate_directory", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_address_parser_retrain_api.AddressParserRetrainTest.address_parser_retrain_call", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_address_parser_retrain_api.AddressParserRetrainTest.address_parser_retrain_call"], ["", "@", "patch", "(", "\"deepparse.parser.address_parser.torch.save\"", ")", "\n", "@", "patch", "(", "\n", "\"deepparse.parser.address_parser.Experiment\"", ",", "\n", "**", "{", "\"return_value.train.side_effect\"", ":", "RuntimeError", "(", ")", "}", ",", "\n", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.SGD\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.DataTransform\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.FastTextSeq2SeqModel\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.fasttext_data_padding\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.FastTextVectorizer\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.FastTextEmbeddingsModel\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.download_fasttext_embeddings\"", ")", "\n", "def", "test_givenAFasttextModelDirectoryWithOtherRetrainModel_whenRetrain_thenRaiseError", "(", "\n", "self", ",", "\n", "download_weights_mock", ",", "\n", "embeddings_model_mock", ",", "\n", "vectorizer_model_mock", ",", "\n", "data_padding_mock", ",", "\n", "model_mock", ",", "\n", "data_transform_mock", ",", "\n", "optimizer_mock", ",", "\n", "experiment_mock", ",", "\n", "torch_save_mock", ",", "\n", ")", ":", "\n", "        ", "self", ".", "populate_directory", "(", ")", "\n", "self", ".", "address_parser", "=", "AddressParser", "(", "\n", "model_type", "=", "self", ".", "a_fasttext_model_type", ",", "\n", "device", "=", "self", ".", "a_device", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", ")", "\n", "with", "self", ".", "assertRaises", "(", "ValueError", ")", ":", "\n", "            ", "self", ".", "address_parser_retrain_call", "(", ")", "\n", "\n", "", "expect_error_message", "=", "(", "\n", "f\"You are currently training a different fasttext version from the one in\"", "\n", "f\" the {self.a_logging_path}. Verify version.\"", "\n", ")", "\n", "try", ":", "\n", "            ", "self", ".", "address_parser_retrain_call", "(", ")", "\n", "", "except", "ValueError", "as", "actual_error_message", ":", "\n", "            ", "self", ".", "assertEqual", "(", "actual_error_message", ".", "args", "[", "0", "]", ",", "expect_error_message", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_address_parser_retrain_api.AddressParserRetrainTest.test_givenABPEmbModelDirectoryWithOtherFastTextRetrainModel_whenRetrain_thenRaiseError": [[263, 306], ["unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "test_address_parser_retrain_api.AddressParserRetrainTest.populate_directory", "deepparse.parser.AddressParser", "test_address_parser_retrain_api.AddressParserRetrainTest.assertRaises", "test_address_parser_retrain_api.AddressParserRetrainTest.address_parser_retrain_call", "test_address_parser_retrain_api.AddressParserRetrainTest.address_parser_retrain_call", "test_address_parser_retrain_api.AddressParserRetrainTest.assertEqual", "RuntimeError"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_tools.ToolsTests.populate_directory", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_address_parser_retrain_api.AddressParserRetrainTest.address_parser_retrain_call", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_address_parser_retrain_api.AddressParserRetrainTest.address_parser_retrain_call"], ["", "", "@", "patch", "(", "\"deepparse.parser.address_parser.torch.save\"", ")", "\n", "@", "patch", "(", "\n", "\"deepparse.parser.address_parser.Experiment\"", ",", "\n", "**", "{", "\"return_value.train.side_effect\"", ":", "RuntimeError", "(", ")", "}", ",", "\n", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.SGD\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.DataTransform\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.FastTextSeq2SeqModel\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.fasttext_data_padding\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.FastTextVectorizer\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.FastTextEmbeddingsModel\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.download_fasttext_embeddings\"", ")", "\n", "def", "test_givenABPEmbModelDirectoryWithOtherFastTextRetrainModel_whenRetrain_thenRaiseError", "(", "\n", "self", ",", "\n", "download_weights_mock", ",", "\n", "embeddings_model_mock", ",", "\n", "vectorizer_model_mock", ",", "\n", "data_padding_mock", ",", "\n", "model_mock", ",", "\n", "data_transform_mock", ",", "\n", "optimizer_mock", ",", "\n", "experiment_mock", ",", "\n", "torch_save_mock", ",", "\n", ")", ":", "\n", "        ", "self", ".", "populate_directory", "(", ")", "\n", "self", ".", "address_parser", "=", "AddressParser", "(", "\n", "model_type", "=", "self", ".", "a_best_model_type", ",", "\n", "device", "=", "self", ".", "a_device", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", ")", "\n", "\n", "with", "self", ".", "assertRaises", "(", "ValueError", ")", ":", "\n", "            ", "self", ".", "address_parser_retrain_call", "(", ")", "\n", "\n", "", "expect_error_message", "=", "(", "\n", "f\"You are currently training a bpemb in the directory {self.a_logging_path} where a \"", "\n", "f\"different retrained fasttext is currently his. Thus, the loading of the model is \"", "\n", "f\"failing. Change directory to retrain the bpemb.\"", "\n", ")", "\n", "try", ":", "\n", "            ", "self", ".", "address_parser_retrain_call", "(", ")", "\n", "", "except", "ValueError", "as", "actual_error_message", ":", "\n", "            ", "self", ".", "assertEqual", "(", "actual_error_message", ".", "args", "[", "0", "]", ",", "expect_error_message", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_address_parser_retrain_api.AddressParserRetrainTest.test_givenAModelDirectoryWithoutOtherRetrainModel_whenRetrainRaisesRuntimeError_thenReRaiseError": [[307, 348], ["unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "deepparse.parser.AddressParser", "test_address_parser_retrain_api.AddressParserRetrainTest.assertRaises", "test_address_parser_retrain_api.AddressParserRetrainTest.address_parser_retrain_call", "test_address_parser_retrain_api.AddressParserRetrainTest.address_parser_retrain_call", "test_address_parser_retrain_api.AddressParserRetrainTest.assertEqual", "RuntimeError"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_address_parser_retrain_api.AddressParserRetrainTest.address_parser_retrain_call", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_address_parser_retrain_api.AddressParserRetrainTest.address_parser_retrain_call"], ["", "", "@", "patch", "(", "\"deepparse.parser.address_parser.torch.save\"", ")", "\n", "@", "patch", "(", "\n", "\"deepparse.parser.address_parser.Experiment\"", ",", "\n", "**", "{", "\"return_value.train.side_effect\"", ":", "RuntimeError", "(", "\"Error during training\"", ")", "}", ",", "\n", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.os.listdir\"", ",", "return_value", "=", "[", "]", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.SGD\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.DataTransform\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.FastTextSeq2SeqModel\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.fasttext_data_padding\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.FastTextVectorizer\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.FastTextEmbeddingsModel\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.download_fasttext_embeddings\"", ")", "\n", "def", "test_givenAModelDirectoryWithoutOtherRetrainModel_whenRetrainRaisesRuntimeError_thenReRaiseError", "(", "\n", "self", ",", "\n", "download_weights_mock", ",", "\n", "embeddings_model_mock", ",", "\n", "vectorizer_model_mock", ",", "\n", "data_padding_mock", ",", "\n", "model_mock", ",", "\n", "data_transform_mock", ",", "\n", "optimizer_mock", ",", "\n", "experiment_mock", ",", "\n", "torch_save_mock", ",", "\n", "os_mock", ",", "\n", ")", ":", "\n", "# os_mock.listdir.return_value = []", "\n", "        ", "self", ".", "address_parser", "=", "AddressParser", "(", "\n", "model_type", "=", "self", ".", "a_best_model_type", ",", "\n", "device", "=", "self", ".", "a_device", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", ")", "\n", "\n", "with", "self", ".", "assertRaises", "(", "RuntimeError", ")", ":", "\n", "            ", "self", ".", "address_parser_retrain_call", "(", ")", "\n", "\n", "", "expect_error_message", "=", "\"Error during training\"", "\n", "try", ":", "\n", "            ", "self", ".", "address_parser_retrain_call", "(", ")", "\n", "", "except", "RuntimeError", "as", "actual_error_message", ":", "\n", "            ", "self", ".", "assertEqual", "(", "actual_error_message", ".", "args", "[", "0", "]", ",", "expect_error_message", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_address_parser_retrain_api.AddressParserRetrainTest.test_givenAFasttextMagnitudeModel_whenRetrain_thenRaiseError": [[349, 372], ["unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "deepparse.parser.AddressParser", "test_address_parser_retrain_api.AddressParserRetrainTest.assertRaises", "test_address_parser_retrain_api.AddressParserRetrainTest.address_parser_retrain_call"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_address_parser_retrain_api.AddressParserRetrainTest.address_parser_retrain_call"], ["", "", "@", "patch", "(", "\"deepparse.parser.address_parser.Experiment\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.FastTextSeq2SeqModel\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.fasttext_data_padding\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.MagnitudeVectorizer\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.MagnitudeEmbeddingsModel\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.download_fasttext_magnitude_embeddings\"", ")", "\n", "def", "test_givenAFasttextMagnitudeModel_whenRetrain_thenRaiseError", "(", "\n", "self", ",", "\n", "download_weights_mock", ",", "\n", "embeddings_model_mock", ",", "\n", "vectorizer_model_mock", ",", "\n", "data_padding_mock", ",", "\n", "mock_model", ",", "\n", "experiment_mock", ",", "\n", ")", ":", "\n", "        ", "self", ".", "address_parser", "=", "AddressParser", "(", "\n", "model_type", "=", "self", ".", "a_fasttext_light_model_type", ",", "\n", "device", "=", "self", ".", "a_device", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", ")", "\n", "\n", "with", "self", ".", "assertRaises", "(", "ValueError", ")", ":", "\n", "            ", "self", ".", "address_parser_retrain_call", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_address_parser_retrain_api.AddressParserRetrainTest.test_givenAFasttextModel_whenRetrain_thenSaveModelProperly": [[373, 416], ["unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "deepparse.parser.AddressParser", "test_address_parser_retrain_api.AddressParserRetrainTest.address_parser_retrain_call", "test_address_parser_retrain_api.AddressParserRetrainTest.saving_template_path.format", "torch_save_mock.assert_has_calls", "unittest.mock.call", "experiment_mock().model.network.state_dict", "experiment_mock"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_address_parser_retrain_api.AddressParserRetrainTest.address_parser_retrain_call"], ["", "", "@", "patch", "(", "\"deepparse.parser.address_parser.torch.save\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.DataLoader\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.Experiment\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.SGD\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.DataTransform\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.FastTextSeq2SeqModel\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.fasttext_data_padding\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.FastTextVectorizer\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.FastTextEmbeddingsModel\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.download_fasttext_embeddings\"", ")", "\n", "def", "test_givenAFasttextModel_whenRetrain_thenSaveModelProperly", "(", "\n", "self", ",", "\n", "download_weights_mock", ",", "\n", "embeddings_model_mock", ",", "\n", "vectorizer_model_mock", ",", "\n", "data_padding_mock", ",", "\n", "model_mock", ",", "\n", "data_transform_mock", ",", "\n", "optimizer_mock", ",", "\n", "experiment_mock", ",", "\n", "data_loader_mock", ",", "\n", "torch_save_mock", ",", "\n", ")", ":", "\n", "        ", "self", ".", "address_parser", "=", "AddressParser", "(", "\n", "model_type", "=", "self", ".", "a_fasttext_model_type", ",", "\n", "device", "=", "self", ".", "a_device", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", ")", "\n", "self", ".", "address_parser_retrain_call", "(", ")", "\n", "expected_named_parser_name", "=", "\"FastText\"", "\n", "saving_model_path", "=", "self", ".", "saving_template_path", ".", "format", "(", "self", ".", "a_fasttext_model_type", ")", "\n", "save_call", "=", "[", "\n", "call", "(", "\n", "{", "\n", "\"address_tagger_model\"", ":", "experiment_mock", "(", ")", ".", "model", ".", "network", ".", "state_dict", "(", ")", ",", "\n", "\"model_type\"", ":", "self", ".", "a_fasttext_model_type", ",", "\n", "\"named_parser\"", ":", "expected_named_parser_name", ",", "\n", "}", ",", "\n", "saving_model_path", ",", "\n", ")", "\n", "]", "\n", "\n", "torch_save_mock", ".", "assert_has_calls", "(", "save_call", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_address_parser_retrain_api.AddressParserRetrainTest.test_givenFastTextModel_whenRetrainCPU_thenInstantiateExperimentProperly": [[417, 448], ["unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "deepparse.parser.AddressParser", "test_address_parser_retrain_api.AddressParserRetrainTest.address_parser_retrain_call", "test_address_parser_retrain_api.AddressParserRetrainTest.assert_experiment_retrain"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_address_parser_retrain_api.AddressParserRetrainTest.address_parser_retrain_call", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_address_parser_retrain_api.AddressParserRetrainTest.assert_experiment_retrain"], ["", "@", "patch", "(", "\"deepparse.parser.address_parser.torch.save\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.DataLoader\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.Experiment\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.SGD\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.DataTransform\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.FastTextSeq2SeqModel\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.fasttext_data_padding\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.FastTextVectorizer\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.FastTextEmbeddingsModel\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.download_fasttext_embeddings\"", ")", "\n", "def", "test_givenFastTextModel_whenRetrainCPU_thenInstantiateExperimentProperly", "(", "\n", "self", ",", "\n", "download_weights_mock", ",", "\n", "embeddings_model_mock", ",", "\n", "vectorizer_model_mock", ",", "\n", "data_padding_mock", ",", "\n", "model_mock", ",", "\n", "data_transform_mock", ",", "\n", "optimizer_mock", ",", "\n", "experiment_mock", ",", "\n", "data_loader_mock", ",", "\n", "torch_save_mock", ",", "\n", ")", ":", "\n", "        ", "self", ".", "address_parser", "=", "AddressParser", "(", "\n", "model_type", "=", "self", ".", "a_fasttext_model_type", ",", "\n", "device", "=", "self", ".", "a_device", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", ")", "\n", "self", ".", "address_parser_retrain_call", "(", ")", "\n", "\n", "self", ".", "assert_experiment_retrain", "(", "experiment_mock", ",", "model_mock", ",", "optimizer_mock", ",", "device", "=", "self", ".", "a_device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_address_parser_retrain_api.AddressParserRetrainTest.test_givenFastTextModel_whenRetrainGPU_thenInstantiateExperimentProperly": [[449, 481], ["unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.skipIf", "deepparse.parser.AddressParser", "test_address_parser_retrain_api.AddressParserRetrainTest.address_parser_retrain_call", "test_address_parser_retrain_api.AddressParserRetrainTest.assert_experiment_retrain", "torch.cuda.is_available"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_address_parser_retrain_api.AddressParserRetrainTest.address_parser_retrain_call", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_address_parser_retrain_api.AddressParserRetrainTest.assert_experiment_retrain"], ["", "@", "patch", "(", "\"deepparse.parser.address_parser.torch.save\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.DataLoader\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.Experiment\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.SGD\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.DataTransform\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.FastTextSeq2SeqModel\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.fasttext_data_padding\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.FastTextVectorizer\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.FastTextEmbeddingsModel\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.download_fasttext_embeddings\"", ")", "\n", "@", "skipIf", "(", "not", "torch", ".", "cuda", ".", "is_available", "(", ")", ",", "\"no gpu available\"", ")", "\n", "def", "test_givenFastTextModel_whenRetrainGPU_thenInstantiateExperimentProperly", "(", "\n", "self", ",", "\n", "download_weights_mock", ",", "\n", "embeddings_model_mock", ",", "\n", "vectorizer_model_mock", ",", "\n", "data_padding_mock", ",", "\n", "model_mock", ",", "\n", "data_transform_mock", ",", "\n", "optimizer_mock", ",", "\n", "experiment_mock", ",", "\n", "data_loader_mock", ",", "\n", "torch_save_mock", ",", "\n", ")", ":", "\n", "        ", "self", ".", "address_parser", "=", "AddressParser", "(", "\n", "model_type", "=", "self", ".", "a_fasttext_model_type", ",", "\n", "device", "=", "self", ".", "a_torch_device", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", ")", "\n", "self", ".", "address_parser_retrain_call", "(", ")", "\n", "\n", "self", ".", "assert_experiment_retrain", "(", "experiment_mock", ",", "model_mock", ",", "optimizer_mock", ",", "device", "=", "self", ".", "a_torch_device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_address_parser_retrain_api.AddressParserRetrainTest.test_givenAFasttextModel_whenRetrainWithUserTags_thenSaveTagsDict": [[482, 528], ["unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "deepparse.parser.AddressParser", "test_address_parser_retrain_api.AddressParserRetrainTest.address_parser_retrain_call", "test_address_parser_retrain_api.AddressParserRetrainTest.saving_template_path.format", "torch_save_mock.assert_has_calls", "unittest.mock.call", "experiment_mock().model.network.state_dict", "experiment_mock"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_address_parser_retrain_api.AddressParserRetrainTest.address_parser_retrain_call"], ["", "@", "patch", "(", "\"deepparse.parser.address_parser.torch.save\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.DataLoader\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.Experiment\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.SGD\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.DataTransform\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.FastTextSeq2SeqModel\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.fasttext_data_padding\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.FastTextVectorizer\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.FastTextEmbeddingsModel\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.download_fasttext_embeddings\"", ")", "\n", "def", "test_givenAFasttextModel_whenRetrainWithUserTags_thenSaveTagsDict", "(", "\n", "self", ",", "\n", "download_weights_mock", ",", "\n", "embeddings_model_mock", ",", "\n", "vectorizer_model_mock", ",", "\n", "data_padding_mock", ",", "\n", "model_mock", ",", "\n", "data_transform_mock", ",", "\n", "optimizer_mock", ",", "\n", "experiment_mock", ",", "\n", "data_loader_mock", ",", "\n", "torch_save_mock", ",", "\n", ")", ":", "\n", "        ", "self", ".", "address_parser", "=", "AddressParser", "(", "\n", "model_type", "=", "self", ".", "a_fasttext_model_type", ",", "\n", "device", "=", "self", ".", "a_device", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", ")", "\n", "self", ".", "address_parser_retrain_call", "(", "prediction_tags", "=", "self", ".", "address_components", ")", "\n", "\n", "expected_named_parser_name", "=", "\"FastTextModifiedPredictionTags\"", "\n", "\n", "saving_model_path", "=", "self", ".", "saving_template_path", ".", "format", "(", "self", ".", "a_fasttext_model_type", ")", "\n", "save_call", "=", "[", "\n", "call", "(", "\n", "{", "\n", "\"address_tagger_model\"", ":", "experiment_mock", "(", ")", ".", "model", ".", "network", ".", "state_dict", "(", ")", ",", "\n", "\"prediction_tags\"", ":", "self", ".", "address_components", ",", "\n", "\"model_type\"", ":", "self", ".", "a_fasttext_model_type", ",", "\n", "\"named_parser\"", ":", "expected_named_parser_name", ",", "\n", "}", ",", "\n", "saving_model_path", ",", "\n", ")", "\n", "]", "\n", "\n", "torch_save_mock", ".", "assert_has_calls", "(", "save_call", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_address_parser_retrain_api.AddressParserRetrainTest.test_givenAFasttextModel_whenRetrainWithNewParams_thenModelFactoryIsCalled": [[529, 562], ["unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "deepparse.parser.AddressParser", "unittest.mock.MagicMock", "test_address_parser_retrain_api.AddressParserRetrainTest.address_parser_retrain_call", "unittest.mock.MagicMock.assert_called"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_address_parser_retrain_api.AddressParserRetrainTest.address_parser_retrain_call"], ["", "@", "patch", "(", "\"deepparse.parser.address_parser.torch.save\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.DataLoader\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.Experiment\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.SGD\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.DataTransform\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.FastTextSeq2SeqModel\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.fasttext_data_padding\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.FastTextVectorizer\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.FastTextEmbeddingsModel\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.download_fasttext_embeddings\"", ")", "\n", "def", "test_givenAFasttextModel_whenRetrainWithNewParams_thenModelFactoryIsCalled", "(", "\n", "self", ",", "\n", "download_weights_mock", ",", "\n", "embeddings_model_mock", ",", "\n", "vectorizer_model_mock", ",", "\n", "data_padding_mock", ",", "\n", "model_mock", ",", "\n", "data_transform_mock", ",", "\n", "optimizer_mock", ",", "\n", "experiment_mock", ",", "\n", "data_loader_mock", ",", "\n", "torch_save_mock", ",", "\n", ")", ":", "\n", "        ", "self", ".", "address_parser", "=", "AddressParser", "(", "\n", "model_type", "=", "self", ".", "a_fasttext_model_type", ",", "\n", "device", "=", "self", ".", "a_device", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", ")", "\n", "model_factory_mock", "=", "MagicMock", "(", ")", "\n", "self", ".", "address_parser", ".", "_model_factory", "=", "model_factory_mock", "\n", "self", ".", "address_parser_retrain_call", "(", "seq2seq_params", "=", "self", ".", "seq2seq_params", ")", "\n", "\n", "model_factory_mock", ".", "assert_called", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_address_parser_retrain_api.AddressParserRetrainTest.test_givenAFasttextModel_whenRetrainWithNewParams_thenSaveNewParamsDict": [[563, 609], ["unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "deepparse.parser.AddressParser", "test_address_parser_retrain_api.AddressParserRetrainTest.address_parser_retrain_call", "test_address_parser_retrain_api.AddressParserRetrainTest.saving_template_path.format", "torch_save_mock.assert_has_calls", "unittest.mock.call", "experiment_mock().model.network.state_dict", "experiment_mock"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_address_parser_retrain_api.AddressParserRetrainTest.address_parser_retrain_call"], ["", "@", "patch", "(", "\"deepparse.parser.address_parser.torch.save\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.DataLoader\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.Experiment\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.SGD\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.DataTransform\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.FastTextSeq2SeqModel\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.fasttext_data_padding\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.FastTextVectorizer\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.FastTextEmbeddingsModel\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.download_fasttext_embeddings\"", ")", "\n", "def", "test_givenAFasttextModel_whenRetrainWithNewParams_thenSaveNewParamsDict", "(", "\n", "self", ",", "\n", "download_weights_mock", ",", "\n", "embeddings_model_mock", ",", "\n", "vectorizer_model_mock", ",", "\n", "data_padding_mock", ",", "\n", "model_mock", ",", "\n", "data_transform_mock", ",", "\n", "optimizer_mock", ",", "\n", "experiment_mock", ",", "\n", "data_loader_mock", ",", "\n", "torch_save_mock", ",", "\n", ")", ":", "\n", "        ", "self", ".", "address_parser", "=", "AddressParser", "(", "\n", "model_type", "=", "self", ".", "a_fasttext_model_type", ",", "\n", "device", "=", "self", ".", "a_device", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", ")", "\n", "self", ".", "address_parser_retrain_call", "(", "seq2seq_params", "=", "self", ".", "seq2seq_params", ")", "\n", "\n", "expected_named_parser_name", "=", "\"FastTextModifiedSeq2SeqConfiguration\"", "\n", "\n", "saving_model_path", "=", "self", ".", "saving_template_path", ".", "format", "(", "self", ".", "a_fasttext_model_type", ")", "\n", "save_call", "=", "[", "\n", "call", "(", "\n", "{", "\n", "\"address_tagger_model\"", ":", "experiment_mock", "(", ")", ".", "model", ".", "network", ".", "state_dict", "(", ")", ",", "\n", "\"model_type\"", ":", "self", ".", "a_fasttext_model_type", ",", "\n", "\"seq2seq_params\"", ":", "self", ".", "seq2seq_params", ",", "\n", "\"named_parser\"", ":", "expected_named_parser_name", ",", "\n", "}", ",", "\n", "saving_model_path", ",", "\n", ")", "\n", "]", "\n", "\n", "torch_save_mock", ".", "assert_has_calls", "(", "save_call", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_address_parser_retrain_api.AddressParserRetrainTest.test_givenAFasttextModel_whenRetrainWithNewParamsAndNewTags_thenSaveNewParamsDictAndParams": [[610, 657], ["unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "deepparse.parser.AddressParser", "test_address_parser_retrain_api.AddressParserRetrainTest.address_parser_retrain_call", "test_address_parser_retrain_api.AddressParserRetrainTest.saving_template_path.format", "torch_save_mock.assert_has_calls", "unittest.mock.call", "experiment_mock().model.network.state_dict", "experiment_mock"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_address_parser_retrain_api.AddressParserRetrainTest.address_parser_retrain_call"], ["", "@", "patch", "(", "\"deepparse.parser.address_parser.torch.save\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.DataLoader\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.Experiment\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.SGD\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.DataTransform\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.FastTextSeq2SeqModel\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.fasttext_data_padding\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.FastTextVectorizer\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.FastTextEmbeddingsModel\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.download_fasttext_embeddings\"", ")", "\n", "def", "test_givenAFasttextModel_whenRetrainWithNewParamsAndNewTags_thenSaveNewParamsDictAndParams", "(", "\n", "self", ",", "\n", "download_weights_mock", ",", "\n", "embeddings_model_mock", ",", "\n", "vectorizer_model_mock", ",", "\n", "data_padding_mock", ",", "\n", "model_mock", ",", "\n", "data_transform_mock", ",", "\n", "optimizer_mock", ",", "\n", "experiment_mock", ",", "\n", "data_loader_mock", ",", "\n", "torch_save_mock", ",", "\n", ")", ":", "\n", "        ", "self", ".", "address_parser", "=", "AddressParser", "(", "\n", "model_type", "=", "self", ".", "a_fasttext_model_type", ",", "\n", "device", "=", "self", ".", "a_device", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", ")", "\n", "self", ".", "address_parser_retrain_call", "(", "prediction_tags", "=", "self", ".", "address_components", ",", "seq2seq_params", "=", "self", ".", "seq2seq_params", ")", "\n", "\n", "expected_named_parser_name", "=", "\"FastTextModifiedPredictionTagsModifiedSeq2SeqConfiguration\"", "\n", "\n", "saving_model_path", "=", "self", ".", "saving_template_path", ".", "format", "(", "self", ".", "a_fasttext_model_type", ")", "\n", "save_call", "=", "[", "\n", "call", "(", "\n", "{", "\n", "\"address_tagger_model\"", ":", "experiment_mock", "(", ")", ".", "model", ".", "network", ".", "state_dict", "(", ")", ",", "\n", "\"model_type\"", ":", "self", ".", "a_fasttext_model_type", ",", "\n", "\"seq2seq_params\"", ":", "self", ".", "seq2seq_params", ",", "\n", "\"prediction_tags\"", ":", "self", ".", "address_components", ",", "\n", "\"named_parser\"", ":", "expected_named_parser_name", ",", "\n", "}", ",", "\n", "saving_model_path", ",", "\n", ")", "\n", "]", "\n", "\n", "torch_save_mock", ".", "assert_has_calls", "(", "save_call", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_address_parser_retrain_api.AddressParserRetrainTest.test_givenAFasttextModel_whenRetrainWithNewParamsAndNewTagsAndFreezeLayers_thenSaveNewParamsDictAndParams": [[658, 707], ["unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "deepparse.parser.AddressParser", "test_address_parser_retrain_api.AddressParserRetrainTest.address_parser_retrain_call", "test_address_parser_retrain_api.AddressParserRetrainTest.saving_template_path.format", "torch_save_mock.assert_has_calls", "unittest.mock.call", "experiment_mock().model.network.state_dict", "experiment_mock"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_address_parser_retrain_api.AddressParserRetrainTest.address_parser_retrain_call"], ["", "@", "patch", "(", "\"deepparse.parser.address_parser.torch.save\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.DataLoader\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.Experiment\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.SGD\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.DataTransform\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.FastTextSeq2SeqModel\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.fasttext_data_padding\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.FastTextVectorizer\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.FastTextEmbeddingsModel\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.download_fasttext_embeddings\"", ")", "\n", "def", "test_givenAFasttextModel_whenRetrainWithNewParamsAndNewTagsAndFreezeLayers_thenSaveNewParamsDictAndParams", "(", "\n", "self", ",", "\n", "download_weights_mock", ",", "\n", "embeddings_model_mock", ",", "\n", "vectorizer_model_mock", ",", "\n", "data_padding_mock", ",", "\n", "model_mock", ",", "\n", "data_transform_mock", ",", "\n", "optimizer_mock", ",", "\n", "experiment_mock", ",", "\n", "data_loader_mock", ",", "\n", "torch_save_mock", ",", "\n", ")", ":", "\n", "        ", "self", ".", "address_parser", "=", "AddressParser", "(", "\n", "model_type", "=", "self", ".", "a_fasttext_model_type", ",", "\n", "device", "=", "self", ".", "a_device", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", ")", "\n", "self", ".", "address_parser_retrain_call", "(", "\n", "prediction_tags", "=", "self", ".", "address_components", ",", "seq2seq_params", "=", "self", ".", "seq2seq_params", ",", "layers_to_freeze", "=", "\"encoder\"", "\n", ")", "\n", "\n", "expected_named_parser_name", "=", "\"FastTextModifiedPredictionTagsModifiedSeq2SeqConfigurationFreezedLayerEncoder\"", "\n", "\n", "saving_model_path", "=", "self", ".", "saving_template_path", ".", "format", "(", "self", ".", "a_fasttext_model_type", ")", "\n", "save_call", "=", "[", "\n", "call", "(", "\n", "{", "\n", "\"address_tagger_model\"", ":", "experiment_mock", "(", ")", ".", "model", ".", "network", ".", "state_dict", "(", ")", ",", "\n", "\"model_type\"", ":", "self", ".", "a_fasttext_model_type", ",", "\n", "\"seq2seq_params\"", ":", "self", ".", "seq2seq_params", ",", "\n", "\"prediction_tags\"", ":", "self", ".", "address_components", ",", "\n", "\"named_parser\"", ":", "expected_named_parser_name", ",", "\n", "}", ",", "\n", "saving_model_path", ",", "\n", ")", "\n", "]", "\n", "\n", "torch_save_mock", ".", "assert_has_calls", "(", "save_call", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_address_parser_retrain_api.AddressParserRetrainTest.test_givenABPEmbModel_whenRetrainCPU_thenInstantiateExperimentProperly": [[708, 737], ["unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "deepparse.parser.AddressParser", "test_address_parser_retrain_api.AddressParserRetrainTest.address_parser_retrain_call", "test_address_parser_retrain_api.AddressParserRetrainTest.assert_experiment_retrain"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_address_parser_retrain_api.AddressParserRetrainTest.address_parser_retrain_call", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_address_parser_retrain_api.AddressParserRetrainTest.assert_experiment_retrain"], ["", "@", "patch", "(", "\"deepparse.parser.address_parser.torch.save\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.DataLoader\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.Experiment\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.SGD\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.DataTransform\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.BPEmbSeq2SeqModel\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.bpemb_data_padding\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.BPEmbVectorizer\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.BPEmbEmbeddingsModel\"", ")", "\n", "def", "test_givenABPEmbModel_whenRetrainCPU_thenInstantiateExperimentProperly", "(", "\n", "self", ",", "\n", "embeddings_model_mock", ",", "\n", "vectorizer_model_mock", ",", "\n", "data_padding_mock", ",", "\n", "model_mock", ",", "\n", "data_transform_mock", ",", "\n", "optimizer_mock", ",", "\n", "experiment_mock", ",", "\n", "data_loader_mock", ",", "\n", "torch_save_mock", ",", "\n", ")", ":", "\n", "        ", "self", ".", "address_parser", "=", "AddressParser", "(", "\n", "model_type", "=", "self", ".", "a_bpemb_model_type", ",", "\n", "device", "=", "self", ".", "a_device", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", ")", "\n", "self", ".", "address_parser_retrain_call", "(", ")", "\n", "\n", "self", ".", "assert_experiment_retrain", "(", "experiment_mock", ",", "model_mock", ",", "optimizer_mock", ",", "device", "=", "self", ".", "a_device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_address_parser_retrain_api.AddressParserRetrainTest.test_givenABPEmbModel_whenRetrainGPU_thenInstantiateExperimentProperly": [[738, 768], ["unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.skipIf", "deepparse.parser.AddressParser", "test_address_parser_retrain_api.AddressParserRetrainTest.address_parser_retrain_call", "test_address_parser_retrain_api.AddressParserRetrainTest.assert_experiment_retrain", "torch.cuda.is_available"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_address_parser_retrain_api.AddressParserRetrainTest.address_parser_retrain_call", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_address_parser_retrain_api.AddressParserRetrainTest.assert_experiment_retrain"], ["", "@", "patch", "(", "\"deepparse.parser.address_parser.torch.save\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.DataLoader\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.Experiment\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.SGD\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.DataTransform\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.BPEmbSeq2SeqModel\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.bpemb_data_padding\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.BPEmbVectorizer\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.BPEmbEmbeddingsModel\"", ")", "\n", "@", "skipIf", "(", "not", "torch", ".", "cuda", ".", "is_available", "(", ")", ",", "\"no gpu available\"", ")", "\n", "def", "test_givenABPEmbModel_whenRetrainGPU_thenInstantiateExperimentProperly", "(", "\n", "self", ",", "\n", "embeddings_model_mock", ",", "\n", "vectorizer_model_mock", ",", "\n", "data_padding_mock", ",", "\n", "model_mock", ",", "\n", "data_transform_mock", ",", "\n", "optimizer_mock", ",", "\n", "experiment_mock", ",", "\n", "data_loader_mock", ",", "\n", "torch_save_mock", ",", "\n", ")", ":", "\n", "        ", "self", ".", "address_parser", "=", "AddressParser", "(", "\n", "model_type", "=", "self", ".", "a_bpemb_model_type", ",", "\n", "device", "=", "self", ".", "a_torch_device", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", ")", "\n", "self", ".", "address_parser_retrain_call", "(", ")", "\n", "\n", "self", ".", "assert_experiment_retrain", "(", "experiment_mock", ",", "model_mock", ",", "optimizer_mock", ",", "device", "=", "self", ".", "a_torch_device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_address_parser_retrain_api.AddressParserRetrainTest.test_givenABPEmbModel_whenRetrainCPU_thenInstantiateDataLoaderAndTrainProperly": [[769, 798], ["unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "deepparse.parser.AddressParser", "test_address_parser_retrain_api.AddressParserRetrainTest.address_parser_retrain_call", "test_address_parser_retrain_api.AddressParserRetrainTest.assert_experiment_retrain"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_address_parser_retrain_api.AddressParserRetrainTest.address_parser_retrain_call", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_address_parser_retrain_api.AddressParserRetrainTest.assert_experiment_retrain"], ["", "@", "patch", "(", "\"deepparse.parser.address_parser.torch.save\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.DataLoader\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.Experiment\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.SGD\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.DataTransform\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.BPEmbSeq2SeqModel\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.bpemb_data_padding\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.BPEmbVectorizer\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.BPEmbEmbeddingsModel\"", ")", "\n", "def", "test_givenABPEmbModel_whenRetrainCPU_thenInstantiateDataLoaderAndTrainProperly", "(", "\n", "self", ",", "\n", "embeddings_model_mock", ",", "\n", "vectorizer_model_mock", ",", "\n", "data_padding_mock", ",", "\n", "model_mock", ",", "\n", "data_transform_mock", ",", "\n", "optimizer_mock", ",", "\n", "experiment_mock", ",", "\n", "data_loader_mock", ",", "\n", "torch_save_mock", ",", "\n", ")", ":", "\n", "        ", "self", ".", "address_parser", "=", "AddressParser", "(", "\n", "model_type", "=", "self", ".", "a_bpemb_model_type", ",", "\n", "device", "=", "self", ".", "a_device", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", ")", "\n", "self", ".", "address_parser_retrain_call", "(", ")", "\n", "\n", "self", ".", "assert_experiment_retrain", "(", "experiment_mock", ",", "model_mock", ",", "optimizer_mock", ",", "device", "=", "self", ".", "a_device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_address_parser_retrain_api.AddressParserRetrainTest.test_givenABPEmbModel_whenRetrainGPU_thenInstantiateDataLoaderAndTrainProperly": [[799, 829], ["unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.skipIf", "deepparse.parser.AddressParser", "test_address_parser_retrain_api.AddressParserRetrainTest.address_parser_retrain_call", "test_address_parser_retrain_api.AddressParserRetrainTest.assert_experiment_retrain", "torch.cuda.is_available"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_address_parser_retrain_api.AddressParserRetrainTest.address_parser_retrain_call", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_address_parser_retrain_api.AddressParserRetrainTest.assert_experiment_retrain"], ["", "@", "patch", "(", "\"deepparse.parser.address_parser.torch.save\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.DataLoader\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.Experiment\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.SGD\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.DataTransform\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.BPEmbSeq2SeqModel\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.bpemb_data_padding\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.BPEmbVectorizer\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.BPEmbEmbeddingsModel\"", ")", "\n", "@", "skipIf", "(", "not", "torch", ".", "cuda", ".", "is_available", "(", ")", ",", "\"no gpu available\"", ")", "\n", "def", "test_givenABPEmbModel_whenRetrainGPU_thenInstantiateDataLoaderAndTrainProperly", "(", "\n", "self", ",", "\n", "embeddings_model_mock", ",", "\n", "vectorizer_model_mock", ",", "\n", "data_padding_mock", ",", "\n", "model_mock", ",", "\n", "data_transform_mock", ",", "\n", "optimizer_mock", ",", "\n", "experiment_mock", ",", "\n", "data_loader_mock", ",", "\n", "torch_save_mock", ",", "\n", ")", ":", "\n", "        ", "self", ".", "address_parser", "=", "AddressParser", "(", "\n", "model_type", "=", "self", ".", "a_bpemb_model_type", ",", "\n", "device", "=", "self", ".", "a_torch_device", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", ")", "\n", "self", ".", "address_parser_retrain_call", "(", ")", "\n", "\n", "self", ".", "assert_experiment_retrain", "(", "experiment_mock", ",", "model_mock", ",", "optimizer_mock", ",", "device", "=", "self", ".", "a_torch_device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_address_parser_retrain_api.AddressParserRetrainTest.test_givenABPEmbModel_whenRetrain_thenSaveModelProperly": [[830, 871], ["unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "deepparse.parser.AddressParser", "test_address_parser_retrain_api.AddressParserRetrainTest.address_parser_retrain_call", "test_address_parser_retrain_api.AddressParserRetrainTest.saving_template_path.format", "torch_save_mock.assert_has_calls", "unittest.mock.call", "experiment_mock().model.network.state_dict", "experiment_mock"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_address_parser_retrain_api.AddressParserRetrainTest.address_parser_retrain_call"], ["", "@", "patch", "(", "\"deepparse.parser.address_parser.torch.save\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.DataLoader\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.Experiment\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.SGD\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.DataTransform\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.BPEmbSeq2SeqModel\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.bpemb_data_padding\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.BPEmbVectorizer\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.BPEmbEmbeddingsModel\"", ")", "\n", "def", "test_givenABPEmbModel_whenRetrain_thenSaveModelProperly", "(", "\n", "self", ",", "\n", "embeddings_model_mock", ",", "\n", "vectorizer_model_mock", ",", "\n", "data_padding_mock", ",", "\n", "model_mock", ",", "\n", "data_transform_mock", ",", "\n", "optimizer_mock", ",", "\n", "experiment_mock", ",", "\n", "data_loader_mock", ",", "\n", "torch_save_mock", ",", "\n", ")", ":", "\n", "        ", "self", ".", "address_parser", "=", "AddressParser", "(", "\n", "model_type", "=", "self", ".", "a_bpemb_model_type", ",", "\n", "device", "=", "self", ".", "a_device", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", ")", "\n", "self", ".", "address_parser_retrain_call", "(", ")", "\n", "expected_named_parser_name", "=", "\"BPEmb\"", "\n", "saving_model_path", "=", "self", ".", "saving_template_path", ".", "format", "(", "self", ".", "a_bpemb_model_type", ")", "\n", "save_call", "=", "[", "\n", "call", "(", "\n", "{", "\n", "\"address_tagger_model\"", ":", "experiment_mock", "(", ")", ".", "model", ".", "network", ".", "state_dict", "(", ")", ",", "\n", "\"model_type\"", ":", "self", ".", "a_bpemb_model_type", ",", "\n", "\"named_parser\"", ":", "expected_named_parser_name", ",", "\n", "}", ",", "\n", "saving_model_path", ",", "\n", ")", "\n", "]", "\n", "\n", "torch_save_mock", ".", "assert_has_calls", "(", "save_call", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_address_parser_retrain_api.AddressParserRetrainTest.test_givenABPEmbModel_whenRetrainWithUserTags_thenSaveTagsDict": [[872, 917], ["unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "deepparse.parser.AddressParser", "test_address_parser_retrain_api.AddressParserRetrainTest.address_parser_retrain_call", "test_address_parser_retrain_api.AddressParserRetrainTest.saving_template_path.format", "torch_save_mock.assert_has_calls", "unittest.mock.call", "experiment_mock().model.network.state_dict", "experiment_mock"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_address_parser_retrain_api.AddressParserRetrainTest.address_parser_retrain_call"], ["", "@", "patch", "(", "\"deepparse.parser.address_parser.torch.save\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.DataLoader\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.Experiment\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.SGD\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.DataTransform\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.BPEmbSeq2SeqModel\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.bpemb_data_padding\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.BPEmbVectorizer\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.BPEmbEmbeddingsModel\"", ")", "\n", "def", "test_givenABPEmbModel_whenRetrainWithUserTags_thenSaveTagsDict", "(", "\n", "self", ",", "\n", "embeddings_model_mock", ",", "\n", "vectorizer_model_mock", ",", "\n", "data_padding_mock", ",", "\n", "model_mock", ",", "\n", "data_transform_mock", ",", "\n", "optimizer_mock", ",", "\n", "experiment_mock", ",", "\n", "data_loader_mock", ",", "\n", "torch_save_mock", ",", "\n", ")", ":", "\n", "        ", "self", ".", "address_parser", "=", "AddressParser", "(", "\n", "model_type", "=", "self", ".", "a_bpemb_model_type", ",", "\n", "device", "=", "self", ".", "a_device", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", ")", "\n", "\n", "self", ".", "address_parser_retrain_call", "(", "prediction_tags", "=", "self", ".", "address_components", ")", "\n", "\n", "expected_named_parser_name", "=", "\"BPEmbModifiedPredictionTags\"", "\n", "\n", "saving_model_path", "=", "self", ".", "saving_template_path", ".", "format", "(", "self", ".", "a_bpemb_model_type", ")", "\n", "save_call", "=", "[", "\n", "call", "(", "\n", "{", "\n", "\"address_tagger_model\"", ":", "experiment_mock", "(", ")", ".", "model", ".", "network", ".", "state_dict", "(", ")", ",", "\n", "\"prediction_tags\"", ":", "self", ".", "address_components", ",", "\n", "\"model_type\"", ":", "self", ".", "a_bpemb_model_type", ",", "\n", "\"named_parser\"", ":", "expected_named_parser_name", ",", "\n", "}", ",", "\n", "saving_model_path", ",", "\n", ")", "\n", "]", "\n", "\n", "torch_save_mock", ".", "assert_has_calls", "(", "save_call", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_address_parser_retrain_api.AddressParserRetrainTest.test_givenABPEmbModel_whenRetrainWithNewParams_thenModelFactoryIsCalled": [[918, 949], ["unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "deepparse.parser.AddressParser", "unittest.mock.MagicMock", "test_address_parser_retrain_api.AddressParserRetrainTest.address_parser_retrain_call", "unittest.mock.MagicMock.assert_called"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_address_parser_retrain_api.AddressParserRetrainTest.address_parser_retrain_call"], ["", "@", "patch", "(", "\"deepparse.parser.address_parser.torch.save\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.DataLoader\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.Experiment\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.SGD\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.DataTransform\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.BPEmbSeq2SeqModel\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.bpemb_data_padding\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.BPEmbVectorizer\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.BPEmbEmbeddingsModel\"", ")", "\n", "def", "test_givenABPEmbModel_whenRetrainWithNewParams_thenModelFactoryIsCalled", "(", "\n", "self", ",", "\n", "embeddings_model_mock", ",", "\n", "vectorizer_model_mock", ",", "\n", "data_padding_mock", ",", "\n", "model_mock", ",", "\n", "data_transform_mock", ",", "\n", "optimizer_mock", ",", "\n", "experiment_mock", ",", "\n", "data_loader_mock", ",", "\n", "torch_save_mock", ",", "\n", ")", ":", "\n", "        ", "self", ".", "address_parser", "=", "AddressParser", "(", "\n", "model_type", "=", "self", ".", "a_bpemb_model_type", ",", "\n", "device", "=", "self", ".", "a_device", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", ")", "\n", "model_factory_mock", "=", "MagicMock", "(", ")", "\n", "self", ".", "address_parser", ".", "_model_factory", "=", "model_factory_mock", "\n", "self", ".", "address_parser_retrain_call", "(", "seq2seq_params", "=", "self", ".", "seq2seq_params", ")", "\n", "\n", "model_factory_mock", ".", "assert_called", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_address_parser_retrain_api.AddressParserRetrainTest.test_givenABPEmbModel_whenRetrainWithNewParams_thenSaveNewParamsDict": [[950, 994], ["unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "deepparse.parser.AddressParser", "test_address_parser_retrain_api.AddressParserRetrainTest.address_parser_retrain_call", "test_address_parser_retrain_api.AddressParserRetrainTest.saving_template_path.format", "torch_save_mock.assert_has_calls", "unittest.mock.call", "experiment_mock().model.network.state_dict", "experiment_mock"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_address_parser_retrain_api.AddressParserRetrainTest.address_parser_retrain_call"], ["", "@", "patch", "(", "\"deepparse.parser.address_parser.torch.save\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.DataLoader\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.Experiment\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.SGD\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.DataTransform\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.BPEmbSeq2SeqModel\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.bpemb_data_padding\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.BPEmbVectorizer\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.BPEmbEmbeddingsModel\"", ")", "\n", "def", "test_givenABPEmbModel_whenRetrainWithNewParams_thenSaveNewParamsDict", "(", "\n", "self", ",", "\n", "embeddings_model_mock", ",", "\n", "vectorizer_model_mock", ",", "\n", "data_padding_mock", ",", "\n", "model_mock", ",", "\n", "data_transform_mock", ",", "\n", "optimizer_mock", ",", "\n", "experiment_mock", ",", "\n", "data_loader_mock", ",", "\n", "torch_save_mock", ",", "\n", ")", ":", "\n", "        ", "self", ".", "address_parser", "=", "AddressParser", "(", "\n", "model_type", "=", "self", ".", "a_bpemb_model_type", ",", "\n", "device", "=", "self", ".", "a_device", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", ")", "\n", "self", ".", "address_parser_retrain_call", "(", "seq2seq_params", "=", "self", ".", "seq2seq_params", ")", "\n", "\n", "expected_named_parser_name", "=", "\"BPEmbModifiedSeq2SeqConfiguration\"", "\n", "\n", "saving_model_path", "=", "self", ".", "saving_template_path", ".", "format", "(", "self", ".", "a_bpemb_model_type", ")", "\n", "save_call", "=", "[", "\n", "call", "(", "\n", "{", "\n", "\"address_tagger_model\"", ":", "experiment_mock", "(", ")", ".", "model", ".", "network", ".", "state_dict", "(", ")", ",", "\n", "\"model_type\"", ":", "self", ".", "a_bpemb_model_type", ",", "\n", "\"seq2seq_params\"", ":", "self", ".", "seq2seq_params", ",", "\n", "\"named_parser\"", ":", "expected_named_parser_name", ",", "\n", "}", ",", "\n", "saving_model_path", ",", "\n", ")", "\n", "]", "\n", "\n", "torch_save_mock", ".", "assert_has_calls", "(", "save_call", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_address_parser_retrain_api.AddressParserRetrainTest.test_givenABPEmbModel_whenRetrainWithNewParamsAndNewTags_thenSaveNewParamsDictAndParams": [[995, 1040], ["unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "deepparse.parser.AddressParser", "test_address_parser_retrain_api.AddressParserRetrainTest.address_parser_retrain_call", "test_address_parser_retrain_api.AddressParserRetrainTest.saving_template_path.format", "torch_save_mock.assert_has_calls", "unittest.mock.call", "experiment_mock().model.network.state_dict", "experiment_mock"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_address_parser_retrain_api.AddressParserRetrainTest.address_parser_retrain_call"], ["", "@", "patch", "(", "\"deepparse.parser.address_parser.torch.save\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.DataLoader\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.Experiment\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.SGD\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.DataTransform\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.BPEmbSeq2SeqModel\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.bpemb_data_padding\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.BPEmbVectorizer\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.BPEmbEmbeddingsModel\"", ")", "\n", "def", "test_givenABPEmbModel_whenRetrainWithNewParamsAndNewTags_thenSaveNewParamsDictAndParams", "(", "\n", "self", ",", "\n", "embeddings_model_mock", ",", "\n", "vectorizer_model_mock", ",", "\n", "data_padding_mock", ",", "\n", "model_mock", ",", "\n", "data_transform_mock", ",", "\n", "optimizer_mock", ",", "\n", "experiment_mock", ",", "\n", "data_loader_mock", ",", "\n", "torch_save_mock", ",", "\n", ")", ":", "\n", "        ", "self", ".", "address_parser", "=", "AddressParser", "(", "\n", "model_type", "=", "self", ".", "a_bpemb_model_type", ",", "\n", "device", "=", "self", ".", "a_device", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", ")", "\n", "self", ".", "address_parser_retrain_call", "(", "prediction_tags", "=", "self", ".", "address_components", ",", "seq2seq_params", "=", "self", ".", "seq2seq_params", ")", "\n", "\n", "expected_named_parser_name", "=", "\"BPEmbModifiedPredictionTagsModifiedSeq2SeqConfiguration\"", "\n", "\n", "saving_model_path", "=", "self", ".", "saving_template_path", ".", "format", "(", "self", ".", "a_bpemb_model_type", ")", "\n", "save_call", "=", "[", "\n", "call", "(", "\n", "{", "\n", "\"address_tagger_model\"", ":", "experiment_mock", "(", ")", ".", "model", ".", "network", ".", "state_dict", "(", ")", ",", "\n", "\"model_type\"", ":", "self", ".", "a_bpemb_model_type", ",", "\n", "\"seq2seq_params\"", ":", "self", ".", "seq2seq_params", ",", "\n", "\"prediction_tags\"", ":", "self", ".", "address_components", ",", "\n", "\"named_parser\"", ":", "expected_named_parser_name", ",", "\n", "}", ",", "\n", "saving_model_path", ",", "\n", ")", "\n", "]", "\n", "\n", "torch_save_mock", ".", "assert_has_calls", "(", "save_call", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_address_parser_retrain_api.AddressParserRetrainTest.test_givenABPEmbModel_whenRetrainWithNewParamsAndNewTagsAndFreezeLayers_thenSaveNewParamsDictAndParams": [[1041, 1088], ["unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "deepparse.parser.AddressParser", "test_address_parser_retrain_api.AddressParserRetrainTest.address_parser_retrain_call", "test_address_parser_retrain_api.AddressParserRetrainTest.saving_template_path.format", "torch_save_mock.assert_has_calls", "unittest.mock.call", "experiment_mock().model.network.state_dict", "experiment_mock"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_address_parser_retrain_api.AddressParserRetrainTest.address_parser_retrain_call"], ["", "@", "patch", "(", "\"deepparse.parser.address_parser.torch.save\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.DataLoader\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.Experiment\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.SGD\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.DataTransform\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.BPEmbSeq2SeqModel\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.bpemb_data_padding\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.BPEmbVectorizer\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.BPEmbEmbeddingsModel\"", ")", "\n", "def", "test_givenABPEmbModel_whenRetrainWithNewParamsAndNewTagsAndFreezeLayers_thenSaveNewParamsDictAndParams", "(", "\n", "self", ",", "\n", "embeddings_model_mock", ",", "\n", "vectorizer_model_mock", ",", "\n", "data_padding_mock", ",", "\n", "model_mock", ",", "\n", "data_transform_mock", ",", "\n", "optimizer_mock", ",", "\n", "experiment_mock", ",", "\n", "data_loader_mock", ",", "\n", "torch_save_mock", ",", "\n", ")", ":", "\n", "        ", "self", ".", "address_parser", "=", "AddressParser", "(", "\n", "model_type", "=", "self", ".", "a_bpemb_model_type", ",", "\n", "device", "=", "self", ".", "a_device", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", ")", "\n", "self", ".", "address_parser_retrain_call", "(", "\n", "prediction_tags", "=", "self", ".", "address_components", ",", "seq2seq_params", "=", "self", ".", "seq2seq_params", ",", "layers_to_freeze", "=", "\"encoder\"", "\n", ")", "\n", "\n", "expected_named_parser_name", "=", "\"BPEmbModifiedPredictionTagsModifiedSeq2SeqConfigurationFreezedLayerEncoder\"", "\n", "\n", "saving_model_path", "=", "self", ".", "saving_template_path", ".", "format", "(", "self", ".", "a_bpemb_model_type", ")", "\n", "save_call", "=", "[", "\n", "call", "(", "\n", "{", "\n", "\"address_tagger_model\"", ":", "experiment_mock", "(", ")", ".", "model", ".", "network", ".", "state_dict", "(", ")", ",", "\n", "\"model_type\"", ":", "self", ".", "a_bpemb_model_type", ",", "\n", "\"seq2seq_params\"", ":", "self", ".", "seq2seq_params", ",", "\n", "\"prediction_tags\"", ":", "self", ".", "address_components", ",", "\n", "\"named_parser\"", ":", "expected_named_parser_name", ",", "\n", "}", ",", "\n", "saving_model_path", ",", "\n", ")", "\n", "]", "\n", "\n", "torch_save_mock", ".", "assert_has_calls", "(", "save_call", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_address_parser_retrain_api.AddressParserRetrainTest.test_givenNewPredictionTagsNewDimSize_thenHandleNewOutputDimProperly": [[1089, 1129], ["unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.MagicMock", "unittest.mock.MagicMock", "deepparse.parser.AddressParser", "test_address_parser_retrain_api.AddressParserRetrainTest.address_parser_retrain_call", "unittest.mock.MagicMock.assert_has_calls", "unittest.mock.call.handle_new_output_dim"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_address_parser_retrain_api.AddressParserRetrainTest.address_parser_retrain_call", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.network.seq2seq.Seq2SeqModel.handle_new_output_dim"], ["", "@", "patch", "(", "\"deepparse.parser.address_parser.TagsConverter\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.torch.save\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.DataLoader\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.Experiment\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.SGD\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.DataTransform\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.BPEmbSeq2SeqModel\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.bpemb_data_padding\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.BPEmbVectorizer\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.BPEmbEmbeddingsModel\"", ")", "\n", "def", "test_givenNewPredictionTagsNewDimSize_thenHandleNewOutputDimProperly", "(", "\n", "self", ",", "\n", "embeddings_model_mock", ",", "\n", "vectorizer_model_mock", ",", "\n", "data_padding_mock", ",", "\n", "model_patch", ",", "\n", "data_transform_mock", ",", "\n", "optimizer_mock", ",", "\n", "experiment_mock", ",", "\n", "data_loader_mock", ",", "\n", "torch_save_mock", ",", "\n", "tags_converter_patch", ",", "\n", ")", ":", "\n", "# we test with BPEmb but fasttext would give same results", "\n", "        ", "model_mock", "=", "MagicMock", "(", ")", "\n", "model_mock", ".", "same_output_dim", ".", "return_value", "=", "False", "\n", "model_patch", ".", "return_value", "=", "model_mock", "\n", "\n", "tags_converter_mock", "=", "MagicMock", "(", "spec", "=", "TagsConverter", ")", "\n", "tags_converter_patch", ".", "return_value", "=", "tags_converter_mock", "\n", "\n", "self", ".", "address_parser", "=", "AddressParser", "(", "\n", "model_type", "=", "self", ".", "a_bpemb_model_type", ",", "\n", "device", "=", "self", ".", "a_device", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", ")", "\n", "self", ".", "address_parser_retrain_call", "(", "prediction_tags", "=", "self", ".", "address_components", ")", "\n", "new_dim_call", "=", "[", "call", ".", "handle_new_output_dim", "(", "tags_converter_mock", ".", "dim", ")", "]", "\n", "\n", "model_mock", ".", "assert_has_calls", "(", "new_dim_call", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_address_parser_retrain_api.AddressParserRetrainTest.test_givenNotTrainingDataContainer_thenRaiseValueError": [[1130, 1158], ["unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "deepparse.parser.AddressParser", "tests.tools.ADataContainer", "test_address_parser_retrain_api.AddressParserRetrainTest.assertRaises", "test_address_parser_retrain_api.AddressParserRetrainTest.address_parser.retrain"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.address_parser.AddressParser.retrain"], ["", "@", "patch", "(", "\"deepparse.parser.address_parser.BPEmbSeq2SeqModel\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.bpemb_data_padding\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.BPEmbVectorizer\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.BPEmbEmbeddingsModel\"", ")", "\n", "def", "test_givenNotTrainingDataContainer_thenRaiseValueError", "(", "\n", "self", ",", "\n", "embeddings_model_mock", ",", "\n", "vectorizer_model_mock", ",", "\n", "data_padding_mock", ",", "\n", "model_patch", ",", "\n", ")", ":", "\n", "        ", "self", ".", "address_parser", "=", "AddressParser", "(", "\n", "model_type", "=", "self", ".", "a_bpemb_model_type", ",", "\n", "device", "=", "self", ".", "a_device", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", ")", "\n", "mocked_data_container", "=", "ADataContainer", "(", "is_training_container", "=", "False", ")", "\n", "with", "self", ".", "assertRaises", "(", "ValueError", ")", ":", "\n", "            ", "self", ".", "address_parser", ".", "retrain", "(", "\n", "mocked_data_container", ",", "\n", "self", ".", "a_train_ratio", ",", "\n", "self", ".", "a_batch_size", ",", "\n", "self", ".", "a_epoch_number", ",", "\n", "num_workers", "=", "self", ".", "a_number_of_workers", ",", "\n", "learning_rate", "=", "self", ".", "a_learning_rate", ",", "\n", "callbacks", "=", "self", ".", "a_callbacks_list", ",", "\n", "seed", "=", "self", ".", "a_seed", ",", "\n", "logging_path", "=", "self", ".", "a_logging_path", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_address_parser_retrain_api.AddressParserRetrainTest.test_givenNotFreezeLayers_thenFreezeLayerMethodNotCalled": [[1160, 1193], ["unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "deepparse.parser.AddressParser", "unittest.mock.MagicMock", "test_address_parser_retrain_api.AddressParserRetrainTest.address_parser_retrain_call", "unittest.mock.MagicMock.assert_not_called"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_address_parser_retrain_api.AddressParserRetrainTest.address_parser_retrain_call"], ["", "", "@", "patch", "(", "\"deepparse.parser.address_parser.torch.save\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.DataLoader\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.Experiment\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.SGD\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.DataTransform\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.FastTextSeq2SeqModel\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.fasttext_data_padding\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.FastTextVectorizer\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.FastTextEmbeddingsModel\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.download_fasttext_embeddings\"", ")", "\n", "def", "test_givenNotFreezeLayers_thenFreezeLayerMethodNotCalled", "(", "\n", "self", ",", "\n", "download_weights_mock", ",", "\n", "embeddings_model_mock", ",", "\n", "vectorizer_model_mock", ",", "\n", "data_padding_mock", ",", "\n", "model_mock", ",", "\n", "data_transform_mock", ",", "\n", "optimizer_mock", ",", "\n", "experiment_mock", ",", "\n", "data_loader_mock", ",", "\n", "torch_save_mock", ",", "\n", ")", ":", "\n", "        ", "self", ".", "address_parser", "=", "AddressParser", "(", "\n", "model_type", "=", "self", ".", "a_fasttext_model_type", ",", "\n", "device", "=", "self", ".", "a_device", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", ")", "\n", "freeze_model_params_method_mock", "=", "MagicMock", "(", ")", "\n", "self", ".", "address_parser", ".", "_freeze_model_params", "=", "freeze_model_params_method_mock", "\n", "self", ".", "address_parser_retrain_call", "(", "layers_to_freeze", "=", "None", ")", "\n", "\n", "freeze_model_params_method_mock", ".", "assert_not_called", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_address_parser_retrain_api.AddressParserRetrainTest.test_givenFreezeLayersEncoder_thenFreezeLayerMethodCalledWithEncoder": [[1194, 1228], ["unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "deepparse.parser.AddressParser", "unittest.mock.MagicMock", "test_address_parser_retrain_api.AddressParserRetrainTest.address_parser_retrain_call", "unittest.mock.MagicMock.assert_called", "unittest.mock.MagicMock.assert_called_with"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_address_parser_retrain_api.AddressParserRetrainTest.address_parser_retrain_call"], ["", "@", "patch", "(", "\"deepparse.parser.address_parser.torch.save\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.DataLoader\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.Experiment\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.SGD\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.DataTransform\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.FastTextSeq2SeqModel\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.fasttext_data_padding\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.FastTextVectorizer\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.FastTextEmbeddingsModel\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.download_fasttext_embeddings\"", ")", "\n", "def", "test_givenFreezeLayersEncoder_thenFreezeLayerMethodCalledWithEncoder", "(", "\n", "self", ",", "\n", "download_weights_mock", ",", "\n", "embeddings_model_mock", ",", "\n", "vectorizer_model_mock", ",", "\n", "data_padding_mock", ",", "\n", "model_mock", ",", "\n", "data_transform_mock", ",", "\n", "optimizer_mock", ",", "\n", "experiment_mock", ",", "\n", "data_loader_mock", ",", "\n", "torch_save_mock", ",", "\n", ")", ":", "\n", "        ", "self", ".", "address_parser", "=", "AddressParser", "(", "\n", "model_type", "=", "self", ".", "a_fasttext_model_type", ",", "\n", "device", "=", "self", ".", "a_device", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", ")", "\n", "freeze_model_params_method_mock", "=", "MagicMock", "(", ")", "\n", "self", ".", "address_parser", ".", "_freeze_model_params", "=", "freeze_model_params_method_mock", "\n", "self", ".", "address_parser_retrain_call", "(", "layers_to_freeze", "=", "\"encoder\"", ")", "\n", "\n", "freeze_model_params_method_mock", ".", "assert_called", "(", ")", "\n", "freeze_model_params_method_mock", ".", "assert_called_with", "(", "\"encoder\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_address_parser_retrain_api.AddressParserRetrainTest.test_givenFreezeLayersDecoder_thenFreezeLayerMethodCalledWithDecoder": [[1229, 1263], ["unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "deepparse.parser.AddressParser", "unittest.mock.MagicMock", "test_address_parser_retrain_api.AddressParserRetrainTest.address_parser_retrain_call", "unittest.mock.MagicMock.assert_called", "unittest.mock.MagicMock.assert_called_with"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_address_parser_retrain_api.AddressParserRetrainTest.address_parser_retrain_call"], ["", "@", "patch", "(", "\"deepparse.parser.address_parser.torch.save\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.DataLoader\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.Experiment\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.SGD\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.DataTransform\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.FastTextSeq2SeqModel\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.fasttext_data_padding\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.FastTextVectorizer\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.FastTextEmbeddingsModel\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.download_fasttext_embeddings\"", ")", "\n", "def", "test_givenFreezeLayersDecoder_thenFreezeLayerMethodCalledWithDecoder", "(", "\n", "self", ",", "\n", "download_weights_mock", ",", "\n", "embeddings_model_mock", ",", "\n", "vectorizer_model_mock", ",", "\n", "data_padding_mock", ",", "\n", "model_mock", ",", "\n", "data_transform_mock", ",", "\n", "optimizer_mock", ",", "\n", "experiment_mock", ",", "\n", "data_loader_mock", ",", "\n", "torch_save_mock", ",", "\n", ")", ":", "\n", "        ", "self", ".", "address_parser", "=", "AddressParser", "(", "\n", "model_type", "=", "self", ".", "a_fasttext_model_type", ",", "\n", "device", "=", "self", ".", "a_device", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", ")", "\n", "freeze_model_params_method_mock", "=", "MagicMock", "(", ")", "\n", "self", ".", "address_parser", ".", "_freeze_model_params", "=", "freeze_model_params_method_mock", "\n", "self", ".", "address_parser_retrain_call", "(", "layers_to_freeze", "=", "\"decoder\"", ")", "\n", "\n", "freeze_model_params_method_mock", ".", "assert_called", "(", ")", "\n", "freeze_model_params_method_mock", ".", "assert_called_with", "(", "\"decoder\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_address_parser_retrain_api.AddressParserRetrainTest.test_givenFreezeLayersPredictionLayer_thenFreezeLayerMethodCalledWithPredictionLayer": [[1264, 1298], ["unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "deepparse.parser.AddressParser", "unittest.mock.MagicMock", "test_address_parser_retrain_api.AddressParserRetrainTest.address_parser_retrain_call", "unittest.mock.MagicMock.assert_called", "unittest.mock.MagicMock.assert_called_with"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_address_parser_retrain_api.AddressParserRetrainTest.address_parser_retrain_call"], ["", "@", "patch", "(", "\"deepparse.parser.address_parser.torch.save\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.DataLoader\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.Experiment\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.SGD\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.DataTransform\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.FastTextSeq2SeqModel\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.fasttext_data_padding\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.FastTextVectorizer\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.FastTextEmbeddingsModel\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.download_fasttext_embeddings\"", ")", "\n", "def", "test_givenFreezeLayersPredictionLayer_thenFreezeLayerMethodCalledWithPredictionLayer", "(", "\n", "self", ",", "\n", "download_weights_mock", ",", "\n", "embeddings_model_mock", ",", "\n", "vectorizer_model_mock", ",", "\n", "data_padding_mock", ",", "\n", "model_mock", ",", "\n", "data_transform_mock", ",", "\n", "optimizer_mock", ",", "\n", "experiment_mock", ",", "\n", "data_loader_mock", ",", "\n", "torch_save_mock", ",", "\n", ")", ":", "\n", "        ", "self", ".", "address_parser", "=", "AddressParser", "(", "\n", "model_type", "=", "self", ".", "a_fasttext_model_type", ",", "\n", "device", "=", "self", ".", "a_device", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", ")", "\n", "freeze_model_params_method_mock", "=", "MagicMock", "(", ")", "\n", "self", ".", "address_parser", ".", "_freeze_model_params", "=", "freeze_model_params_method_mock", "\n", "self", ".", "address_parser_retrain_call", "(", "layers_to_freeze", "=", "\"prediction_layer\"", ")", "\n", "\n", "freeze_model_params_method_mock", ".", "assert_called", "(", ")", "\n", "freeze_model_params_method_mock", ".", "assert_called_with", "(", "\"prediction_layer\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_address_parser_retrain_api.AddressParserRetrainTest.test_givenFreezeLayersSeq2Seq_thenFreezeLayerMethodCalledWithSeq2Seq": [[1299, 1333], ["unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "deepparse.parser.AddressParser", "unittest.mock.MagicMock", "test_address_parser_retrain_api.AddressParserRetrainTest.address_parser_retrain_call", "unittest.mock.MagicMock.assert_called", "unittest.mock.MagicMock.assert_called_with"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_address_parser_retrain_api.AddressParserRetrainTest.address_parser_retrain_call"], ["", "@", "patch", "(", "\"deepparse.parser.address_parser.torch.save\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.DataLoader\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.Experiment\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.SGD\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.DataTransform\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.FastTextSeq2SeqModel\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.fasttext_data_padding\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.FastTextVectorizer\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.FastTextEmbeddingsModel\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.download_fasttext_embeddings\"", ")", "\n", "def", "test_givenFreezeLayersSeq2Seq_thenFreezeLayerMethodCalledWithSeq2Seq", "(", "\n", "self", ",", "\n", "download_weights_mock", ",", "\n", "embeddings_model_mock", ",", "\n", "vectorizer_model_mock", ",", "\n", "data_padding_mock", ",", "\n", "model_mock", ",", "\n", "data_transform_mock", ",", "\n", "optimizer_mock", ",", "\n", "experiment_mock", ",", "\n", "data_loader_mock", ",", "\n", "torch_save_mock", ",", "\n", ")", ":", "\n", "        ", "self", ".", "address_parser", "=", "AddressParser", "(", "\n", "model_type", "=", "self", ".", "a_fasttext_model_type", ",", "\n", "device", "=", "self", ".", "a_device", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", ")", "\n", "freeze_model_params_method_mock", "=", "MagicMock", "(", ")", "\n", "self", ".", "address_parser", ".", "_freeze_model_params", "=", "freeze_model_params_method_mock", "\n", "self", ".", "address_parser_retrain_call", "(", "layers_to_freeze", "=", "\"seq2seq\"", ")", "\n", "\n", "freeze_model_params_method_mock", ".", "assert_called", "(", ")", "\n", "freeze_model_params_method_mock", ".", "assert_called_with", "(", "\"seq2seq\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_address_parser_retrain_api.AddressParserRetrainTest.test_givenWrongFreezeLayersName_thenRaiseValueError": [[1334, 1365], ["unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "deepparse.parser.AddressParser", "test_address_parser_retrain_api.AddressParserRetrainTest.assertRaises", "test_address_parser_retrain_api.AddressParserRetrainTest.address_parser_retrain_call"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_address_parser_retrain_api.AddressParserRetrainTest.address_parser_retrain_call"], ["", "@", "patch", "(", "\"deepparse.parser.address_parser.torch.save\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.DataLoader\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.Experiment\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.SGD\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.DataTransform\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.FastTextSeq2SeqModel\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.fasttext_data_padding\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.FastTextVectorizer\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.FastTextEmbeddingsModel\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.download_fasttext_embeddings\"", ")", "\n", "def", "test_givenWrongFreezeLayersName_thenRaiseValueError", "(", "\n", "self", ",", "\n", "download_weights_mock", ",", "\n", "embeddings_model_mock", ",", "\n", "vectorizer_model_mock", ",", "\n", "data_padding_mock", ",", "\n", "model_mock", ",", "\n", "data_transform_mock", ",", "\n", "optimizer_mock", ",", "\n", "experiment_mock", ",", "\n", "data_loader_mock", ",", "\n", "torch_save_mock", ",", "\n", ")", ":", "\n", "        ", "self", ".", "address_parser", "=", "AddressParser", "(", "\n", "model_type", "=", "self", ".", "a_fasttext_model_type", ",", "\n", "device", "=", "self", ".", "a_device", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", ")", "\n", "\n", "with", "self", ".", "assertRaises", "(", "ValueError", ")", ":", "\n", "            ", "self", ".", "address_parser_retrain_call", "(", "layers_to_freeze", "=", "\"error_in_name\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_address_parser_retrain_api.AddressParserRetrainTest.test_givenRetrainSettings_whenFormattedNameParserName_thenReturnProperNaming": [[1366, 1435], ["unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "deepparse.parser.AddressParser", "test_address_parser_retrain_api.AddressParserRetrainTest.address_parser._formatted_named_parser_name", "test_address_parser_retrain_api.AddressParserRetrainTest.assertNotIn", "test_address_parser_retrain_api.AddressParserRetrainTest.assertIn", "test_address_parser_retrain_api.AddressParserRetrainTest.assertNotIn", "test_address_parser_retrain_api.AddressParserRetrainTest.assertIn", "test_address_parser_retrain_api.AddressParserRetrainTest.assertNotIn", "test_address_parser_retrain_api.AddressParserRetrainTest.assertIn", "test_address_parser_retrain_api.AddressParserRetrainTest.assertIn", "test_address_parser_retrain_api.AddressParserRetrainTest.assertIn", "test_address_parser_retrain_api.AddressParserRetrainTest.assertIn", "test_address_parser_retrain_api.AddressParserRetrainTest.assertIn"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.address_parser.AddressParser._formatted_named_parser_name"], ["", "", "@", "patch", "(", "\"deepparse.parser.address_parser.torch.save\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.DataLoader\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.Experiment\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.SGD\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.DataTransform\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.FastTextSeq2SeqModel\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.fasttext_data_padding\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.FastTextVectorizer\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.FastTextEmbeddingsModel\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.download_fasttext_embeddings\"", ")", "\n", "def", "test_givenRetrainSettings_whenFormattedNameParserName_thenReturnProperNaming", "(", "\n", "self", ",", "\n", "download_weights_mock", ",", "\n", "embeddings_model_mock", ",", "\n", "vectorizer_model_mock", ",", "\n", "data_padding_mock", ",", "\n", "model_mock", ",", "\n", "data_transform_mock", ",", "\n", "optimizer_mock", ",", "\n", "experiment_mock", ",", "\n", "data_loader_mock", ",", "\n", "torch_save_mock", ",", "\n", ")", ":", "\n", "# pylint: disable=too-many-locals, too-many-branches", "\n", "        ", "self", ".", "address_parser", "=", "AddressParser", "(", "\n", "model_type", "=", "self", ".", "a_fasttext_model_type", ",", "\n", "device", "=", "self", ".", "a_device", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", ")", "\n", "\n", "# We set possible params type with a value", "\n", "prediction_tags_settings", "=", "[", "{", "\"A dict\"", ":", "1.0", "}", ",", "None", "]", "# Can be a dict or a None", "\n", "seq2seq_params_settings", "=", "[", "{", "\"A dict\"", ":", "1.0", "}", ",", "None", "]", "# Can be a dict or a None", "\n", "layers_to_freeze_settings", "=", "[", "None", ",", "\"encoder\"", ",", "\"decoder\"", ",", "\"prediction_layer\"", ",", "\"seq2seq\"", "]", "# From the doc", "\n", "\n", "# We loop all possible settings", "\n", "# Namely, not only elements settings but combinaison of settings altogether", "\n", "for", "prediction_tags_setting", "in", "prediction_tags_settings", ":", "\n", "            ", "for", "seq2seq_params_setting", "in", "seq2seq_params_settings", ":", "\n", "                ", "for", "layers_to_freeze_setting", "in", "layers_to_freeze_settings", ":", "\n", "                    ", "actual", "=", "self", ".", "address_parser", ".", "_formatted_named_parser_name", "(", "\n", "prediction_tags", "=", "prediction_tags_setting", ",", "\n", "seq2seq_params", "=", "seq2seq_params_setting", ",", "\n", "layers_to_freeze", "=", "layers_to_freeze_setting", ",", "\n", ")", "\n", "# We test if extected text is include depending on the settings", "\n", "if", "prediction_tags_setting", "is", "None", ":", "\n", "                        ", "self", ".", "assertNotIn", "(", "\"ModifiedPredictionTags\"", ",", "actual", ")", "\n", "", "else", ":", "\n", "                        ", "self", ".", "assertIn", "(", "\"ModifiedPredictionTags\"", ",", "actual", ")", "\n", "\n", "", "if", "seq2seq_params_setting", "is", "None", ":", "\n", "                        ", "self", ".", "assertNotIn", "(", "\"ModifiedSeq2SeqConfiguration\"", ",", "actual", ")", "\n", "", "else", ":", "\n", "                        ", "self", ".", "assertIn", "(", "\"ModifiedSeq2SeqConfiguration\"", ",", "actual", ")", "\n", "\n", "", "if", "layers_to_freeze_setting", "is", "None", ":", "\n", "                        ", "self", ".", "assertNotIn", "(", "\"FreezedLayer\"", ",", "actual", ")", "\n", "", "else", ":", "\n", "                        ", "self", ".", "assertIn", "(", "\"FreezedLayer\"", ",", "actual", ")", "\n", "\n", "if", "seq2seq_params_setting", "==", "\"encoder\"", ":", "\n", "                            ", "self", ".", "assertIn", "(", "\"encoder\"", ",", "actual", ")", "\n", "", "elif", "seq2seq_params_setting", "==", "\"decoder\"", ":", "\n", "                            ", "self", ".", "assertIn", "(", "\"decoder\"", ",", "actual", ")", "\n", "", "elif", "seq2seq_params_setting", "==", "\"prediction_layer\"", ":", "\n", "                            ", "self", ".", "assertIn", "(", "\"prediction_layer\"", ",", "actual", ")", "\n", "", "elif", "seq2seq_params_setting", "==", "\"seq2seq\"", ":", "\n", "                            ", "self", ".", "assertIn", "(", "\"seq2seq\"", ",", "actual", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_address_parser_retrain_api.AddressParserRetrainTest.test_givenNoneNewNamedModelName_thenSavingPathIsDefaultPathWithExtension": [[1436, 1473], ["unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "deepparse.parser.AddressParser", "test_address_parser_retrain_api.AddressParserRetrainTest.address_parser_retrain_call", "os_path_join_mock.assert_called", "os_path_join_mock.assert_called_with"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_address_parser_retrain_api.AddressParserRetrainTest.address_parser_retrain_call"], ["", "", "", "", "", "", "@", "patch", "(", "\"deepparse.parser.address_parser.os.path.join\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.torch.save\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.DataLoader\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.Experiment\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.SGD\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.DataTransform\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.FastTextSeq2SeqModel\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.fasttext_data_padding\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.FastTextVectorizer\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.FastTextEmbeddingsModel\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.download_fasttext_embeddings\"", ")", "\n", "def", "test_givenNoneNewNamedModelName_thenSavingPathIsDefaultPathWithExtension", "(", "\n", "self", ",", "\n", "download_weights_mock", ",", "\n", "embeddings_model_mock", ",", "\n", "vectorizer_model_mock", ",", "\n", "data_padding_mock", ",", "\n", "model_mock", ",", "\n", "data_transform_mock", ",", "\n", "optimizer_mock", ",", "\n", "experiment_mock", ",", "\n", "data_loader_mock", ",", "\n", "torch_save_mock", ",", "\n", "os_path_join_mock", ",", "\n", ")", ":", "\n", "        ", "self", ".", "address_parser", "=", "AddressParser", "(", "\n", "model_type", "=", "self", ".", "a_fasttext_model_type", ",", "\n", "device", "=", "self", ".", "a_device", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", ")", "\n", "\n", "self", ".", "address_parser_retrain_call", "(", "name_of_the_retrain_parser", "=", "None", ")", "\n", "\n", "os_path_join_mock", ".", "assert_called", "(", ")", "\n", "\n", "default_filename", "=", "\"retrained_fasttext_address_parser.ckpt\"", "\n", "os_path_join_mock", ".", "assert_called_with", "(", "self", ".", "a_logging_path", ",", "default_filename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_address_parser_retrain_api.AddressParserRetrainTest.test_givenNewNamedModelName_thenSavingPathIsModified": [[1474, 1512], ["unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "deepparse.parser.AddressParser", "test_address_parser_retrain_api.AddressParserRetrainTest.address_parser_retrain_call", "os_path_join_mock.assert_called", "os_path_join_mock.assert_called_with"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_address_parser_retrain_api.AddressParserRetrainTest.address_parser_retrain_call"], ["", "@", "patch", "(", "\"deepparse.parser.address_parser.os.path.join\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.torch.save\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.DataLoader\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.Experiment\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.SGD\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.DataTransform\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.FastTextSeq2SeqModel\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.fasttext_data_padding\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.FastTextVectorizer\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.FastTextEmbeddingsModel\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.download_fasttext_embeddings\"", ")", "\n", "def", "test_givenNewNamedModelName_thenSavingPathIsModified", "(", "\n", "self", ",", "\n", "download_weights_mock", ",", "\n", "embeddings_model_mock", ",", "\n", "vectorizer_model_mock", ",", "\n", "data_padding_mock", ",", "\n", "model_mock", ",", "\n", "data_transform_mock", ",", "\n", "optimizer_mock", ",", "\n", "experiment_mock", ",", "\n", "data_loader_mock", ",", "\n", "torch_save_mock", ",", "\n", "os_path_join_mock", ",", "\n", ")", ":", "\n", "        ", "self", ".", "address_parser", "=", "AddressParser", "(", "\n", "model_type", "=", "self", ".", "a_fasttext_model_type", ",", "\n", "device", "=", "self", ".", "a_device", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", ")", "\n", "\n", "self", ".", "address_parser_retrain_call", "(", "name_of_the_retrain_parser", "=", "self", ".", "a_named_parser_name", ")", "\n", "\n", "os_path_join_mock", ".", "assert_called", "(", ")", "\n", "\n", "file_extension", "=", "\".ckpt\"", "\n", "expected_filename", "=", "self", ".", "a_named_parser_name", "+", "file_extension", "\n", "os_path_join_mock", ".", "assert_called_with", "(", "self", ".", "a_logging_path", ",", "expected_filename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_address_parser_retrain_api.AddressParserRetrainTest.test_givenWrongNewNamedModelName_thenRaiseValueError": [[1513, 1546], ["unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "deepparse.parser.AddressParser", "test_address_parser_retrain_api.AddressParserRetrainTest.assertRaises", "test_address_parser_retrain_api.AddressParserRetrainTest.address_parser_retrain_call"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_address_parser_retrain_api.AddressParserRetrainTest.address_parser_retrain_call"], ["", "@", "patch", "(", "\"deepparse.parser.address_parser.os.path.join\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.torch.save\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.DataLoader\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.Experiment\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.SGD\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.DataTransform\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.FastTextSeq2SeqModel\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.fasttext_data_padding\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.FastTextVectorizer\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.FastTextEmbeddingsModel\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.download_fasttext_embeddings\"", ")", "\n", "def", "test_givenWrongNewNamedModelName_thenRaiseValueError", "(", "\n", "self", ",", "\n", "download_weights_mock", ",", "\n", "embeddings_model_mock", ",", "\n", "vectorizer_model_mock", ",", "\n", "data_padding_mock", ",", "\n", "model_mock", ",", "\n", "data_transform_mock", ",", "\n", "optimizer_mock", ",", "\n", "experiment_mock", ",", "\n", "data_loader_mock", ",", "\n", "torch_save_mock", ",", "\n", "os_path_join_mock", ",", "\n", ")", ":", "\n", "        ", "self", ".", "address_parser", "=", "AddressParser", "(", "\n", "model_type", "=", "self", ".", "a_fasttext_model_type", ",", "\n", "device", "=", "self", ".", "a_device", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", ")", "\n", "\n", "with", "self", ".", "assertRaises", "(", "ValueError", ")", ":", "\n", "            ", "self", ".", "address_parser_retrain_call", "(", "name_of_the_retrain_parser", "=", "\"a_wrong_named_parser_name.ckpt\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_tools.ToolsTests.setUpClass": [[26, 29], ["cls.download_pre_trained_weights"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.base.PretrainedWeightsBase.download_pre_trained_weights"], ["class", "ToolsTests", "(", "CaptureOutputTestCase", ")", ":", "\n", "    ", "def", "setUp", "(", "self", ")", "->", "None", ":", "\n", "        ", "self", ".", "temp_dir_obj", "=", "TemporaryDirectory", "(", ")", "\n", "self", ".", "fake_cache_path", "=", "self", ".", "temp_dir_obj", ".", "name", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_tools.ToolsTests.setUp": [[30, 34], ["tempfile.TemporaryDirectory"], "methods", ["None"], ["self", ".", "a_file_extension", "=", "\"version\"", "\n", "self", ".", "latest_fasttext_version", "=", "\"b4f098bb8909b1c8a8d24eea07df3435\"", "\n", "self", ".", "latest_bpemb_version", "=", "\"ac0dc019748b6853dca412add7234203\"", "\n", "self", ".", "a_seed", "=", "42", "\n", "self", ".", "verbose", "=", "False", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_tools.ToolsTests.tearDown": [[35, 37], ["test_tools.ToolsTests.temp_dir_obj.cleanup"], "methods", ["None"], ["\n", "self", ".", "a_model_type_checkpoint", "=", "\"a_fake_model_type\"", "\n", "self", ".", "a_fasttext_model_type_checkpoint", "=", "\"fasttext\"", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_tools.ToolsTests.populate_directory": [[38, 51], ["os.makedirs", "tests.tools.create_file", "tests.tools.create_file", "tests.tools.create_file", "os.path.join", "os.makedirs", "tests.tools.create_file", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "tests.tools.create_file", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.tests.tools.create_file", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.tests.tools.create_file", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.tests.tools.create_file", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.tests.tools.create_file", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.tests.tools.create_file"], ["self", ".", "a_bpemb_model_type_checkpoint", "=", "\"bpemb\"", "\n", "\n", "", "def", "tearDown", "(", "self", ")", "->", "None", ":", "\n", "        ", "self", ".", "temp_dir_obj", ".", "cleanup", "(", ")", "\n", "\n", "", "def", "create_cache_version", "(", "self", ",", "model_name", ",", "content", ")", ":", "\n", "        ", "version_file_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "fake_cache_path", ",", "model_name", "+", "\".version\"", ")", "\n", "create_file", "(", "version_file_path", ",", "content", ")", "\n", "\n", "", "def", "test_givenAFasttextLatestVersion_whenVerifyIfLastVersion_thenReturnTrue", "(", "self", ")", ":", "\n", "        ", "self", ".", "create_cache_version", "(", "\"fasttext\"", ",", "self", ".", "latest_fasttext_version", ")", "\n", "self", ".", "assertTrue", "(", "latest_version", "(", "\"fasttext\"", ",", "self", ".", "fake_cache_path", ")", ")", "\n", "\n", "", "def", "test_givenAFasttextNotTheLatestVersion_whenVerifyIfLastVersion_thenReturnFalse", "(", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_tools.ToolsTests.test_givenACheckpointNewTags_whenValidateIfNewTags_thenReturnTrue": [[53, 61], ["deepparse.parser.tools.validate_if_new_prediction_tags", "test_tools.ToolsTests.assertTrue"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.tools.validate_if_new_prediction_tags"], [")", ":", "\n", "        ", "self", ".", "create_cache_version", "(", "\"fasttext\"", ",", "\"not_the_last_version\"", ")", "\n", "self", ".", "assertFalse", "(", "latest_version", "(", "\"fasttext\"", ",", "self", ".", "fake_cache_path", ")", ")", "\n", "\n", "", "def", "test_givenABPEmbLatestVersion_whenVerifyIfLastVersion_thenReturnTrue", "(", "self", ")", ":", "\n", "        ", "self", ".", "create_cache_version", "(", "\"bpemb\"", ",", "self", ".", "latest_bpemb_version", ")", "\n", "self", ".", "assertTrue", "(", "latest_version", "(", "\"bpemb\"", ",", "self", ".", "fake_cache_path", ")", ")", "\n", "\n", "", "def", "test_givenABPEmbNotTheLatestVersion_whenVerifyIfLastVersion_thenReturnFalse", "(", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_tools.ToolsTests.test_givenACheckpointNoNewTags_whenValidateIfNewTags_thenReturnFalse": [[62, 67], ["deepparse.parser.tools.validate_if_new_prediction_tags", "test_tools.ToolsTests.assertFalse"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.tools.validate_if_new_prediction_tags"], ["self", ",", "\n", ")", ":", "\n", "        ", "self", ".", "create_cache_version", "(", "\"bpemb\"", ",", "\"not_the_last_version\"", ")", "\n", "self", ".", "assertFalse", "(", "latest_version", "(", "\"bpemb\"", ",", "self", ".", "fake_cache_path", ")", ")", "\n", "\n", "", "def", "test_givenFasttextVersion_whenDownloadOk_thenDownloadIt", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_tools.ToolsTests.test_givenACheckpointNewParams_whenValidateIfParams_thenReturnTrue": [[68, 76], ["deepparse.parser.tools.validate_if_new_seq2seq_params", "test_tools.ToolsTests.assertTrue"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.tools.validate_if_new_seq2seq_params"], ["        ", "file_name", "=", "\"fasttext\"", "\n", "\n", "download_from_url", "(", "file_name", ",", "self", ".", "fake_cache_path", ",", "self", ".", "a_file_extension", ")", "\n", "\n", "self", ".", "assertTrue", "(", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "self", ".", "fake_cache_path", ",", "f\"{file_name}.{self.a_file_extension}\"", ")", ")", ")", "\n", "\n", "", "def", "test_givenFasttextVersion_whenDownload404_thenHTTPError", "(", "self", ")", ":", "\n", "        ", "wrong_file_name", "=", "\"wrong_fasttext\"", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_tools.ToolsTests.test_givenACheckpointNoNewParams_whenValidateIfParams_thenReturnFalse": [[77, 82], ["deepparse.parser.tools.validate_if_new_seq2seq_params", "test_tools.ToolsTests.assertFalse"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.tools.validate_if_new_seq2seq_params"], ["with", "self", ".", "assertRaises", "(", "requests", ".", "exceptions", ".", "HTTPError", ")", ":", "\n", "            ", "download_from_url", "(", "wrong_file_name", ",", "self", ".", "fake_cache_path", ",", "self", ".", "a_file_extension", ")", "\n", "\n", "", "", "def", "test_givenBPEmbVersion_whenDownloadOk_thenDownloadIt", "(", "self", ")", ":", "\n", "        ", "file_name", "=", "\"bpemb\"", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_tools.ToolsTests.test_givenADirectoryWithARetrainedModel_whenPretrainedParserInDirectory_thenReturnTrue": [[83, 90], ["test_tools.ToolsTests.populate_directory", "deepparse.parser.tools.pretrained_parser_in_directory", "test_tools.ToolsTests.assertTrue"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_tools.ToolsTests.populate_directory", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.tools.pretrained_parser_in_directory"], ["download_from_url", "(", "file_name", ",", "self", ".", "fake_cache_path", ",", "self", ".", "a_file_extension", ")", "\n", "\n", "self", ".", "assertTrue", "(", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "self", ".", "fake_cache_path", ",", "f\"{file_name}.{self.a_file_extension}\"", ")", ")", ")", "\n", "\n", "", "def", "test_givenBPEmbVersion_whenDownload404_thenHTTPError", "(", "self", ")", ":", "\n", "        ", "wrong_file_name", "=", "\"wrong_bpemb\"", "\n", "\n", "with", "self", ".", "assertRaises", "(", "requests", ".", "exceptions", ".", "HTTPError", ")", ":", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_tools.ToolsTests.test_givenADirectoryWithoutARetrainedModel_whenPretrainedParserInDirectory_thenReturnFalse": [[91, 98], ["test_tools.ToolsTests.populate_directory", "deepparse.parser.tools.pretrained_parser_in_directory", "test_tools.ToolsTests.assertFalse"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_tools.ToolsTests.populate_directory", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.tools.pretrained_parser_in_directory"], ["            ", "download_from_url", "(", "wrong_file_name", ",", "self", ".", "fake_cache_path", ",", "self", ".", "a_file_extension", ")", "\n", "\n", "", "", "def", "test_givenModelWeightsToDownload_whenDownloadOk_thenWeightsAreDownloaded", "(", "self", ")", ":", "\n", "        ", "with", "patch", "(", "\"deepparse.tools.download_from_url\"", ")", "as", "downloader", ":", "\n", "            ", "download_weights", "(", "model", "=", "\"fasttext\"", ",", "saving_dir", "=", "\"./\"", ",", "verbose", "=", "self", ".", "verbose", ")", "\n", "\n", "downloader", ".", "assert_any_call", "(", "\"fasttext\"", ",", "\"./\"", ",", "\"ckpt\"", ")", "\n", "downloader", ".", "assert_any_call", "(", "\"fasttext\"", ",", "\"./\"", ",", "\"version\"", ")", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_tools.ToolsTests.test_givenADirectory_whenGetFilesInDirectory_thenReturnListWithAllFiles": [[99, 113], ["test_tools.ToolsTests.populate_directory", "deepparse.parser.tools.get_files_in_directory", "test_tools.ToolsTests.assertEqual", "test_tools.ToolsTests.assertIn", "len", "len"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_tools.ToolsTests.populate_directory", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.tools.get_files_in_directory"], ["\n", "", "with", "patch", "(", "\"deepparse.tools.download_from_url\"", ")", "as", "downloader", ":", "\n", "            ", "download_weights", "(", "model", "=", "\"bpemb\"", ",", "saving_dir", "=", "\"./\"", ",", "verbose", "=", "self", ".", "verbose", ")", "\n", "\n", "downloader", ".", "assert_any_call", "(", "\"bpemb\"", ",", "\"./\"", ",", "\"ckpt\"", ")", "\n", "downloader", ".", "assert_any_call", "(", "\"bpemb\"", ",", "\"./\"", ",", "\"version\"", ")", "\n", "\n", "", "", "def", "test_givenModelFasttextWeightsToDownloadVerbose_whenDownloadOk_thenVerbose", "(", "\n", "self", ",", "\n", ")", ":", "\n", "        ", "self", ".", "_capture_output", "(", ")", "\n", "with", "patch", "(", "\"deepparse.tools.download_from_url\"", ")", ":", "\n", "            ", "download_weights", "(", "model", "=", "\"fasttext\"", ",", "saving_dir", "=", "\"./\"", ",", "verbose", "=", "True", ")", "\n", "\n", "", "actual", "=", "self", ".", "test_out", ".", "getvalue", "(", ")", ".", "strip", "(", ")", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_tools.ToolsTests.test_givenAEmptyDirectory_whenGetFilesInDirectory_thenReturnEmptyList": [[114, 120], ["deepparse.parser.tools.get_files_in_directory", "test_tools.ToolsTests.assertEqual"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.tools.get_files_in_directory"], ["expected", "=", "\"Downloading the weights for the network fasttext.\"", "\n", "\n", "self", ".", "assertEqual", "(", "actual", ",", "expected", ")", "\n", "\n", "", "def", "test_givenModelBPEmbWeightsToDownloadVerbose_whenDownloadOk_thenVerbose", "(", "self", ")", ":", "\n", "        ", "self", ".", "_capture_output", "(", ")", "\n", "with", "patch", "(", "\"deepparse.tools.download_from_url\"", ")", ":", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_tools.ToolsTests.test_givenAEmptyDirectory_whenGetAddressParserInDirectory_thenReturnEmptyList": [[121, 130], ["deepparse.parser.tools.get_address_parser_in_directory", "test_tools.ToolsTests.assertEqual"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.tools.get_address_parser_in_directory"], ["            ", "download_weights", "(", "model", "=", "\"bpemb\"", ",", "saving_dir", "=", "\"./\"", ",", "verbose", "=", "True", ")", "\n", "\n", "", "actual", "=", "self", ".", "test_out", ".", "getvalue", "(", ")", ".", "strip", "(", ")", "\n", "expected", "=", "\"Downloading the weights for the network bpemb.\"", "\n", "\n", "self", ".", "assertEqual", "(", "actual", ",", "expected", ")", "\n", "\n", "", "@", "patch", "(", "\"os.path.isfile\"", ")", "\n", "@", "patch", "(", "\"deepparse.tools.latest_version\"", ")", "\n", "def", "test_givenAFasttextCheckpoint_whenHandleCheckpoint_thenReturnCachedFasttextPath", "(", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_tools.ToolsTests.test_givenADirectoryWithARetrainParser_whenGetAddressParserInDirectory_thenReturnThePath": [[131, 144], ["deepparse.parser.tools.get_address_parser_in_directory", "test_tools.ToolsTests.assertEqual"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.tools.get_address_parser_in_directory"], ["self", ",", "latest_version_check", ",", "isfile_mock", "\n", ")", ":", "\n", "        ", "isfile_mock", ".", "return_value", "=", "True", "\n", "checkpoint", "=", "\"fasttext\"", "\n", "\n", "actual", "=", "handle_model_path", "(", "checkpoint", ")", "\n", "expected", "=", "os", ".", "path", ".", "join", "(", "CACHE_PATH", ",", "checkpoint", "+", "\".ckpt\"", ")", "\n", "\n", "self", ".", "assertEqual", "(", "actual", ",", "expected", ")", "\n", "\n", "", "@", "patch", "(", "\"os.path.isfile\"", ")", "\n", "@", "patch", "(", "\"deepparse.tools.latest_version\"", ")", "\n", "def", "test_givenABPEmbCheckpoint_whenHandleCheckpoint_thenReturnCachedBPEmbPath", "(", "\n", "self", ",", "latest_version_check", ",", "isfile_mock", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_tools.ToolsTests.test_givenATupleToLoadOfTensorIntoDevice_whenLoad_thenProperlyLoad": [[145, 155], ["unittest.skipIf", "torch.device", "torch.rand", "deepparse.parser.tools.load_tuple_to_device", "test_tools.ToolsTests.assertEqual", "torch.cuda.is_available"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.tools.load_tuple_to_device"], [")", ":", "\n", "        ", "isfile_mock", ".", "return_value", "=", "True", "\n", "checkpoint", "=", "\"bpemb\"", "\n", "\n", "actual", "=", "handle_model_path", "(", "checkpoint", ")", "\n", "expected", "=", "os", ".", "path", ".", "join", "(", "CACHE_PATH", ",", "checkpoint", "+", "\".ckpt\"", ")", "\n", "\n", "self", ".", "assertEqual", "(", "actual", ",", "expected", ")", "\n", "\n", "", "def", "test_givenAStringCheckpoint_whenHandleCheckpoint_thenReturnSamePath", "(", "self", ")", ":", "\n", "        ", "pickle_checkpoint", "=", "\"/a/path/to/a/model.ckpt\"", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_tools.ToolsTests.test_givenADataset_whenIndicesSplittingRatio8020_thenSplitIndices80Train20Valid": [[156, 275], ["deepparse.parser.tools.indices_splitting", "test_tools.ToolsTests.assertEqual", "test_tools.ToolsTests.assertEqual", "test_tools.ToolsTests.assertEqual", "test_tools.ToolsTests.assertEqual", "len", "len"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.tools.indices_splitting"], ["\n", "actual", "=", "handle_model_path", "(", "pickle_checkpoint", ")", "\n", "expected", "=", "pickle_checkpoint", "\n", "\n", "self", ".", "assertEqual", "(", "actual", ",", "expected", ")", "\n", "\n", "", "def", "test_givenBadNamesCheckpoint_whenHandleCheckpoint_thenRaiseErrors", "(", "self", ")", ":", "\n", "        ", "with", "self", ".", "assertRaises", "(", "ValueError", ")", ":", "\n", "            ", "bad_best_checkpoint", "=", "\"bests\"", "\n", "handle_model_path", "(", "bad_best_checkpoint", ")", "\n", "\n", "", "with", "self", ".", "assertRaises", "(", "ValueError", ")", ":", "\n", "            ", "bad_last_checkpoint", "=", "\"lasts\"", "\n", "handle_model_path", "(", "bad_last_checkpoint", ")", "\n", "\n", "", "with", "self", ".", "assertRaises", "(", "ValueError", ")", ":", "\n", "            ", "string_int_bad_checkpoint", "=", "\"1\"", "\n", "handle_model_path", "(", "string_int_bad_checkpoint", ")", "\n", "\n", "", "with", "self", ".", "assertRaises", "(", "ValueError", ")", ":", "\n", "            ", "bad_fasttext_checkpoint", "=", "\"fasttexts\"", "\n", "handle_model_path", "(", "bad_fasttext_checkpoint", ")", "\n", "\n", "", "with", "self", ".", "assertRaises", "(", "ValueError", ")", ":", "\n", "            ", "bad_bpemb_checkpoint", "=", "\"bpembds\"", "\n", "handle_model_path", "(", "bad_bpemb_checkpoint", ")", "\n", "\n", "", "with", "self", ".", "assertRaises", "(", "ValueError", ")", ":", "\n", "            ", "bad_pickle_extension_checkpoint", "=", "\"/a/path/to/a/model.pck\"", "\n", "handle_model_path", "(", "bad_pickle_extension_checkpoint", ")", "\n", "\n", "", "", "@", "patch", "(", "\"deepparse.tools.poutyne\"", ")", "\n", "def", "test_givenPoutyneVersionLowerThan12_givenHandlePreTrainedCheckpoint_thenRaiseError", "(", "self", ",", "poutyne_mock", ")", ":", "\n", "        ", "poutyne_mock", ".", "version", ".", "__version__", "=", "\"1.1\"", "\n", "\n", "with", "self", ".", "assertRaises", "(", "NotImplementedError", ")", ":", "\n", "            ", "handle_pre_trained_checkpoint", "(", "self", ".", "a_model_type_checkpoint", ")", "\n", "\n", "", "", "@", "patch", "(", "\"os.path.isfile\"", ")", "\n", "@", "patch", "(", "\"deepparse.tools.latest_version\"", ")", "\n", "@", "patch", "(", "\"deepparse.tools.poutyne\"", ")", "\n", "def", "test_givenPoutyneVersionGreaterThan12_givenHandlePreTrainedCheckpointFasttext_thenReturnFasttext", "(", "\n", "self", ",", "poutyne_mock", ",", "latest_version_mock", ",", "isfile_mock", "\n", ")", ":", "\n", "        ", "poutyne_mock", ".", "version", ".", "__version__", "=", "\"1.2\"", "\n", "isfile_mock", ".", "return_value", "=", "True", "\n", "\n", "actual", "=", "handle_pre_trained_checkpoint", "(", "self", ".", "a_fasttext_model_type_checkpoint", ")", "\n", "expected", "=", "os", ".", "path", ".", "join", "(", "CACHE_PATH", ",", "f\"{self.a_fasttext_model_type_checkpoint}.ckpt\"", ")", "\n", "self", ".", "assertEqual", "(", "expected", ",", "actual", ")", "\n", "\n", "", "@", "patch", "(", "\"os.path.isfile\"", ")", "\n", "@", "patch", "(", "\"deepparse.tools.latest_version\"", ")", "\n", "@", "patch", "(", "\"deepparse.tools.poutyne\"", ")", "\n", "def", "test_givenPoutyneVersionGreaterThan12_givenHandlePreTrainedCheckpointFasttextNoLocalFile_thenReturnFasttext", "(", "\n", "self", ",", "poutyne_mock", ",", "latest_version_mock", ",", "isfile_mock", "\n", ")", ":", "\n", "        ", "poutyne_mock", ".", "version", ".", "__version__", "=", "\"1.2\"", "\n", "isfile_mock", ".", "return_value", "=", "False", "\n", "\n", "with", "patch", "(", "\"deepparse.tools.download_weights\"", ")", ":", "\n", "            ", "actual", "=", "handle_pre_trained_checkpoint", "(", "self", ".", "a_fasttext_model_type_checkpoint", ")", "\n", "", "expected", "=", "os", ".", "path", ".", "join", "(", "CACHE_PATH", ",", "f\"{self.a_fasttext_model_type_checkpoint}.ckpt\"", ")", "\n", "self", ".", "assertEqual", "(", "expected", ",", "actual", ")", "\n", "\n", "", "@", "patch", "(", "\"os.path.isfile\"", ")", "\n", "@", "patch", "(", "\"deepparse.tools.latest_version\"", ")", "\n", "@", "patch", "(", "\"deepparse.tools.poutyne\"", ")", "\n", "def", "test_givenPoutyneVersionGreaterThan12_givenHandlePreTrainedCheckpointBPEmb_thenReturnBPEmb", "(", "\n", "self", ",", "poutyne_mock", ",", "latest_version_mock", ",", "isfile_mock", "\n", ")", ":", "\n", "        ", "poutyne_mock", ".", "version", ".", "__version__", "=", "\"1.2\"", "\n", "isfile_mock", ".", "return_value", "=", "True", "\n", "\n", "actual", "=", "handle_pre_trained_checkpoint", "(", "self", ".", "a_bpemb_model_type_checkpoint", ")", "\n", "expected", "=", "os", ".", "path", ".", "join", "(", "CACHE_PATH", ",", "f\"{self.a_bpemb_model_type_checkpoint}.ckpt\"", ")", "\n", "self", ".", "assertEqual", "(", "expected", ",", "actual", ")", "\n", "\n", "", "@", "patch", "(", "\"os.path.isfile\"", ")", "\n", "@", "patch", "(", "\"deepparse.tools.latest_version\"", ")", "\n", "@", "patch", "(", "\"deepparse.tools.poutyne\"", ")", "\n", "def", "test_givenPoutyneVersionGreaterThan12_givenHandlePreTrainedCheckpointBPEmbNoLocalFile_thenReturnBPEmb", "(", "\n", "self", ",", "poutyne_mock", ",", "latest_version_mock", ",", "isfile_mock", "\n", ")", ":", "\n", "        ", "poutyne_mock", ".", "version", ".", "__version__", "=", "\"1.2\"", "\n", "isfile_mock", ".", "return_value", "=", "False", "\n", "\n", "with", "patch", "(", "\"deepparse.tools.download_weights\"", ")", ":", "\n", "            ", "actual", "=", "handle_pre_trained_checkpoint", "(", "self", ".", "a_fasttext_model_type_checkpoint", ")", "\n", "", "expected", "=", "os", ".", "path", ".", "join", "(", "CACHE_PATH", ",", "f\"{self.a_fasttext_model_type_checkpoint}.ckpt\"", ")", "\n", "self", ".", "assertEqual", "(", "expected", ",", "actual", ")", "\n", "\n", "", "@", "patch", "(", "\"os.path.isfile\"", ")", "\n", "@", "patch", "(", "\"deepparse.tools.latest_version\"", ")", "\n", "@", "patch", "(", "\"deepparse.tools.poutyne\"", ")", "\n", "def", "test_givenPoutyneVersionGreaterThan12_givenHandlePreTrainedCheckpointFasttextNotLatestVersion_thenRaiseWarning", "(", "\n", "self", ",", "poutyne_mock", ",", "latest_version_mock", ",", "isfile_mock", "\n", ")", ":", "\n", "        ", "isfile_mock", ".", "return_value", "=", "True", "\n", "latest_version_mock", ".", "return_value", "=", "False", "# Not the latest version", "\n", "poutyne_mock", ".", "version", ".", "__version__", "=", "\"1.2\"", "\n", "\n", "with", "self", ".", "assertWarns", "(", "UserWarning", ")", ":", "\n", "            ", "handle_pre_trained_checkpoint", "(", "self", ".", "a_bpemb_model_type_checkpoint", ")", "\n", "\n", "", "", "@", "patch", "(", "\"os.path.isfile\"", ")", "\n", "@", "patch", "(", "\"deepparse.tools.latest_version\"", ")", "\n", "@", "patch", "(", "\"deepparse.tools.poutyne\"", ")", "\n", "def", "test_givenPoutyneVersionGreaterThan12_givenHandlePreTrainedCheckpointBPEmbNotLatestVersion_thenRaiseWarning", "(", "\n", "self", ",", "poutyne_mock", ",", "latest_version_mock", ",", "isfile_mock", "\n", ")", ":", "\n", "        ", "isfile_mock", ".", "return_value", "=", "True", "\n", "latest_version_mock", ".", "return_value", "=", "False", "# Not the latest version", "\n", "poutyne_mock", ".", "version", ".", "__version__", "=", "\"1.2\"", "\n", "\n", "with", "self", ".", "assertWarns", "(", "UserWarning", ")", ":", "\n", "            ", "handle_pre_trained_checkpoint", "(", "self", ".", "a_bpemb_model_type_checkpoint", ")", "\n", "\n", "", "", "@", "patch", "(", "\"deepparse.tools.poutyne\"", ")", "\n", "def", "test_givenPoutyneVersion1_1_1_givenHandlePoutyneVersion_thenReturnVersion1_1", "(", "self", ",", "poutyne_mock", ")", ":", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_tools.ToolsTests.test_givenModelTypes_whenHandleThem_then_ReturnProperModelType": [[276, 307], ["deepparse.parser.tools.handle_model_name", "test_tools.ToolsTests.assertEqual", "deepparse.parser.tools.handle_model_name", "test_tools.ToolsTests.assertEqual", "deepparse.parser.tools.handle_model_name", "test_tools.ToolsTests.assertEqual"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.tools.handle_model_name", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.tools.handle_model_name", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.tools.handle_model_name"], ["        ", "poutyne_mock", ".", "version", ".", "__version__", "=", "\"1.1.1\"", "\n", "\n", "actual", "=", "handle_poutyne_version", "(", ")", "\n", "expected", "=", "\"1.1\"", "\n", "self", ".", "assertEqual", "(", "expected", ",", "actual", ")", "\n", "\n", "", "@", "patch", "(", "\"deepparse.tools.poutyne\"", ")", "\n", "def", "test_givenPoutyneVersion1_1_1_1_givenHandlePoutyneVersion_thenReturnVersion1_1", "(", "self", ",", "poutyne_mock", ")", ":", "\n", "        ", "poutyne_mock", ".", "version", ".", "__version__", "=", "\"1.1.1.1\"", "\n", "\n", "actual", "=", "handle_poutyne_version", "(", ")", "\n", "expected", "=", "\"1.1\"", "\n", "self", ".", "assertEqual", "(", "expected", ",", "actual", ")", "\n", "\n", "", "@", "patch", "(", "\"deepparse.tools.poutyne\"", ")", "\n", "def", "test_givenPoutyneVersion1_1_dev_givenHandlePoutyneVersion_thenReturnVersion1_1", "(", "self", ",", "poutyne_mock", ")", ":", "\n", "        ", "poutyne_mock", ".", "version", ".", "__version__", "=", "\"1.1.dev1+81b3c7b\"", "\n", "\n", "actual", "=", "handle_poutyne_version", "(", ")", "\n", "expected", "=", "\"1.1\"", "\n", "self", ".", "assertEqual", "(", "expected", ",", "actual", ")", "\n", "\n", "", "@", "patch", "(", "\"deepparse.tools.poutyne\"", ")", "\n", "def", "test_givenPoutyneVersion1_1_1_dev_givenHandlePoutyneVersion_thenReturnVersion1_1", "(", "self", ",", "poutyne_mock", ")", ":", "\n", "        ", "poutyne_mock", ".", "version", ".", "__version__", "=", "\"1.1.dev1+81b3c7b\"", "\n", "\n", "actual", "=", "handle_poutyne_version", "(", ")", "\n", "expected", "=", "\"1.1\"", "\n", "self", ".", "assertEqual", "(", "expected", ",", "actual", ")", "\n", "\n", "", "@", "patch", "(", "\"deepparse.tools.poutyne\"", ")", "\n", "def", "test_givenPoutyneVersion1_2_givenHandlePoutyneVersion_thenReturnVersion1_2", "(", "self", ",", "poutyne_mock", ")", ":", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_tools.ToolsTests.test_givenModelTypes_whenHandleThem_then_ReturnProperFormattedModelType": [[308, 343], ["deepparse.parser.tools.handle_model_name", "test_tools.ToolsTests.assertEqual", "deepparse.parser.tools.handle_model_name", "test_tools.ToolsTests.assertEqual", "deepparse.parser.tools.handle_model_name", "test_tools.ToolsTests.assertEqual"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.tools.handle_model_name", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.tools.handle_model_name", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.tools.handle_model_name"], ["        ", "poutyne_mock", ".", "version", ".", "__version__", "=", "\"1.2\"", "\n", "\n", "actual", "=", "handle_poutyne_version", "(", ")", "\n", "expected", "=", "\"1.2\"", "\n", "self", ".", "assertEqual", "(", "expected", ",", "actual", ")", "\n", "\n", "", "@", "patch", "(", "\"deepparse.tools.poutyne\"", ")", "\n", "def", "test_givenPoutyneVersion1_2_givenValidPoutyneVersion_thenReturnTrue", "(", "self", ",", "poutyne_mock", ")", ":", "\n", "        ", "poutyne_mock", ".", "version", ".", "__version__", "=", "\"1.2\"", "\n", "\n", "actual", "=", "valid_poutyne_version", "(", ")", "\n", "self", ".", "assertTrue", "(", "actual", ")", "\n", "\n", "", "@", "patch", "(", "\"deepparse.tools.poutyne\"", ")", "\n", "def", "test_givenPoutyneVersion1_2_dev_givenValidPoutyneVersion_thenReturnTrue", "(", "self", ",", "poutyne_mock", ")", ":", "\n", "        ", "poutyne_mock", ".", "version", ".", "__version__", "=", "\"1.2.dev1+81b3c7b\"", "\n", "\n", "actual", "=", "valid_poutyne_version", "(", ")", "\n", "self", ".", "assertTrue", "(", "actual", ")", "\n", "\n", "", "@", "patch", "(", "\"deepparse.tools.poutyne\"", ")", "\n", "def", "test_givenPoutyneVersion1_1_givenValidPoutyneVersion_thenReturnFalse", "(", "self", ",", "poutyne_mock", ")", ":", "\n", "        ", "poutyne_mock", ".", "version", ".", "__version__", "=", "\"1.1\"", "\n", "\n", "actual", "=", "valid_poutyne_version", "(", ")", "\n", "self", ".", "assertFalse", "(", "actual", ")", "\n", "\n", "", "@", "patch", "(", "\"deepparse.tools.poutyne\"", ")", "\n", "def", "test_givenPoutyneVersion1_1_dev_givenValidPoutyneVersion_thenReturnFalse", "(", "self", ",", "poutyne_mock", ")", ":", "\n", "        ", "poutyne_mock", ".", "version", ".", "__version__", "=", "\"1.1.dev1+81b3c7b\"", "\n", "\n", "actual", "=", "valid_poutyne_version", "(", ")", "\n", "self", ".", "assertFalse", "(", "actual", ")", "\n", "\n", "", "@", "patch", "(", "\"deepparse.tools.poutyne\"", ")", "\n", "def", "test_givenPoutyneVersion1_8_givenValidPoutyneVersion1_8_thenReturnTrue", "(", "self", ",", "poutyne_mock", ")", ":", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_tools.ToolsTests.test_givenAModelTypeWithAttentionInName_whenHandleModelNameWithAttFlag_thenReturnProperModelType": [[344, 352], ["deepparse.parser.tools.handle_model_name", "test_tools.ToolsTests.assertEqual", "deepparse.parser.tools.handle_model_name", "test_tools.ToolsTests.assertEqual"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.tools.handle_model_name", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.tools.handle_model_name"], ["        ", "poutyne_mock", ".", "version", ".", "__version__", "=", "\"1.8\"", "\n", "\n", "actual", "=", "valid_poutyne_version", "(", "min_major", "=", "1", ",", "min_minor", "=", "8", ")", "\n", "self", ".", "assertTrue", "(", "actual", ")", "\n", "\n", "", "@", "patch", "(", "\"deepparse.tools.poutyne\"", ")", "\n", "def", "test_givenPoutyneVersion1_11_givenValidPoutyneVersion1_8_thenReturnTrue", "(", "self", ",", "poutyne_mock", ")", ":", "\n", "        ", "poutyne_mock", ".", "version", ".", "__version__", "=", "\"1.11\"", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_tools.ToolsTests.test_givenAModelTypeWithAttentionInName_whenHandleModelNameWithAttFlag_thenReturnProperFormattedModelType": [[353, 361], ["deepparse.parser.tools.handle_model_name", "test_tools.ToolsTests.assertEqual", "deepparse.parser.tools.handle_model_name", "test_tools.ToolsTests.assertEqual"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.tools.handle_model_name", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.tools.handle_model_name"], ["actual", "=", "valid_poutyne_version", "(", "min_major", "=", "1", ",", "min_minor", "=", "8", ")", "\n", "self", ".", "assertTrue", "(", "actual", ")", "\n", "\n", "", "@", "patch", "(", "\"deepparse.tools.poutyne\"", ")", "\n", "def", "test_givenPoutyneVersion2_givenValidPoutyneVersion1_8_thenReturnTrue", "(", "self", ",", "poutyne_mock", ")", ":", "\n", "        ", "poutyne_mock", ".", "version", ".", "__version__", "=", "\"2.0\"", "\n", "\n", "actual", "=", "valid_poutyne_version", "(", "min_major", "=", "1", ",", "min_minor", "=", "8", ")", "\n", "self", ".", "assertTrue", "(", "actual", ")", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_tools.ToolsTests.test_givenAModelTypeWithAttentionInName_whenHandleModelNameWithoutAttFlag_thenRaiseError": [[362, 368], ["test_tools.ToolsTests.assertRaises", "deepparse.parser.tools.handle_model_name", "test_tools.ToolsTests.assertRaises", "deepparse.parser.tools.handle_model_name"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.tools.handle_model_name", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.tools.handle_model_name"], ["\n", "", "@", "patch", "(", "\"deepparse.tools.poutyne\"", ")", "\n", "def", "test_givenPoutyneVersion2_11_givenValidPoutyneVersion1_8_thenReturnTrue", "(", "self", ",", "poutyne_mock", ")", ":", "\n", "        ", "poutyne_mock", ".", "version", ".", "__version__", "=", "\"2.11\"", "\n", "\n", "actual", "=", "valid_poutyne_version", "(", "min_major", "=", "1", ",", "min_minor", "=", "8", ")", "\n", "self", ".", "assertTrue", "(", "actual", ")", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_tools.ToolsTests.test_givenAInvalidModelType_whenHandleModelName_thenRaiseError": [[369, 382], ["test_tools.ToolsTests.assertRaises", "deepparse.parser.tools.handle_model_name", "deepparse.parser.tools.handle_model_name", "test_tools.ToolsTests.assertEqual"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.tools.handle_model_name", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.tools.handle_model_name"], ["\n", "", "@", "patch", "(", "\"deepparse.tools.poutyne\"", ")", "\n", "def", "test_givenPoutyneVersion2_givenValidPoutyneVersion3_thenReturnFalse", "(", "self", ",", "poutyne_mock", ")", ":", "\n", "        ", "poutyne_mock", ".", "version", ".", "__version__", "=", "\"2.0\"", "\n", "\n", "actual", "=", "valid_poutyne_version", "(", "min_major", "=", "3", ",", "min_minor", "=", "0", ")", "\n", "self", ".", "assertFalse", "(", "actual", ")", "\n", "\n", "", "def", "test_integrationValidateDataToParse", "(", "self", ")", ":", "\n", "        ", "valid_data", "=", "[", "\"An address\"", ",", "\"another address\"", "]", "\n", "validate_data_to_parse", "(", "valid_data", ")", "\n", "\n", "", "def", "test_givenEmptyAddress_thenRaiseDataError", "(", "self", ")", ":", "\n", "        ", "empty_data", "=", "[", "\"An address\"", ",", "\"\"", ",", "''", "]", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_tools.ToolsTests.test_givenAModelTypeToInfer_whenNotRealRetrainFastText_thenReturnFasttext": [[383, 401], ["unittest.skipIf", "os.path.join", "torch.load", "deepparse.parser.tools.infer_model_type", "test_tools.ToolsTests.assertEqual", "test_tools.ToolsTests.assertEqual", "os.path.expanduser", "os.path.exists", "os.path.join", "os.path.expanduser"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.tools.infer_model_type"], ["with", "self", ".", "assertRaises", "(", "DataError", ")", ":", "\n", "            ", "validate_data_to_parse", "(", "empty_data", ")", "\n", "\n", "", "", "def", "test_givenWhiteSpaceAddress_thenRaiseDataError", "(", "self", ")", ":", "\n", "        ", "whitespace_data", "=", "[", "\"An address\"", ",", "\" \"", "]", "\n", "with", "self", ".", "assertRaises", "(", "DataError", ")", ":", "\n", "            ", "validate_data_to_parse", "(", "whitespace_data", ")", "\n", "\n", "", "whitespace_data", "=", "[", "\"An address\"", ",", "\"   \"", "]", "\n", "with", "self", ".", "assertRaises", "(", "DataError", ")", ":", "\n", "            ", "validate_data_to_parse", "(", "whitespace_data", ")", "\n", "\n", "", "", "def", "test_givenNoneAddress_then_raiseDataError", "(", "self", ")", ":", "\n", "        ", "none_data", "=", "[", "\"An address\"", ",", "None", "]", "\n", "with", "self", ".", "assertRaises", "(", "DataError", ")", ":", "\n", "            ", "validate_data_to_parse", "(", "none_data", ")", "\n", "\n", "", "none_data", "=", "[", "None", "]", "\n", "with", "self", ".", "assertRaises", "(", "DataError", ")", ":", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_tools.ToolsTests.test_givenAModelTypeToInfer_whenNotRealRetrainFastTextAttention_thenReturnAttention": [[402, 422], ["unittest.skipIf", "os.path.join", "torch.load", "deepparse.parser.tools.infer_model_type", "test_tools.ToolsTests.assertEqual", "test_tools.ToolsTests.assertEqual", "os.path.expanduser", "os.path.exists", "os.path.join", "os.path.expanduser"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.tools.infer_model_type"], ["            ", "validate_data_to_parse", "(", "none_data", ")", "\n", "\n", "", "", "def", "test_givenTupleAddressesToParse_then_raiseDataError", "(", "self", ")", ":", "\n", "        ", "tuple_data", "=", "[", "(", "\"An address\"", ",", "0", ")", ",", "(", "\"Another address\"", ",", "1", ")", "]", "\n", "with", "self", ".", "assertRaises", "(", "DataError", ")", ":", "\n", "            ", "validate_data_to_parse", "(", "tuple_data", ")", "\n", "\n", "\n", "", "", "", "if", "__name__", "==", "\"__main__\"", ":", "\n", "    ", "unittest", ".", "main", "(", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_tools.ToolsTests.test_givenAModelTypeToInfer_whenNotRealRetrainBPEmb_thenReturnBPEmb": [[423, 441], ["unittest.skipIf", "os.path.join", "torch.load", "deepparse.parser.tools.infer_model_type", "test_tools.ToolsTests.assertEqual", "test_tools.ToolsTests.assertEqual", "os.path.expanduser", "os.path.exists", "os.path.join", "os.path.expanduser"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.tools.infer_model_type"], []], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_tools.ToolsTests.test_givenAModelTypeToInfer_whenNotRealRetrainBPEmbAttention_thenReturnAttention": [[442, 460], ["unittest.skipIf", "os.path.join", "torch.load", "deepparse.parser.tools.infer_model_type", "test_tools.ToolsTests.assertEqual", "test_tools.ToolsTests.assertEqual", "os.path.expanduser", "os.path.exists", "os.path.join", "os.path.expanduser"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.tools.infer_model_type"], []], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_tools.ToolsTests.test_givenAModelTypeToInfer_whenRealRetrainFastText_thenReturnFastText": [[461, 475], ["unittest.skipIf", "torch.load", "deepparse.parser.tools.infer_model_type", "test_tools.ToolsTests.assertEqual", "os.path.exists", "os.path.join", "os.path.expanduser"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.tools.infer_model_type"], []], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_tools.ToolsTests.test_givenAModelTypeToInfer_whenRealRetrainBPEmb_thenReturnBPEmb": [[476, 490], ["unittest.skipIf", "torch.load", "deepparse.parser.tools.infer_model_type", "test_tools.ToolsTests.assertEqual", "os.path.exists", "os.path.join", "os.path.expanduser"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.tools.infer_model_type"], []], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_user_fromatted_parsed_address.UserFormattedParsedAddressTest.setUpClass": [[12, 28], ["None"], "methods", ["None"], ["    ", "@", "classmethod", "\n", "def", "setUpClass", "(", "cls", ")", ":", "\n", "        ", "cls", ".", "a_address_str", "=", "\"3 test road\"", "\n", "cls", ".", "a_parsed_address", "=", "[", "\n", "(", "\"3\"", ",", "\"ATag\"", ")", ",", "\n", "(", "\"test\"", ",", "\"AnotherTag\"", ")", ",", "\n", "(", "\"road\"", ",", "\"AnotherTag\"", ")", ",", "\n", "]", "\n", "cls", ".", "a_address_repr", "=", "\"FormattedParsedAddress<ATag='3', AnotherTag='test road'>\"", "\n", "cls", ".", "a_address", "=", "{", "cls", ".", "a_address_str", ":", "cls", ".", "a_parsed_address", "}", "\n", "cls", ".", "a_existing_tag", "=", "\"3\"", "\n", "\n", "cls", ".", "a_parsed_address_in_dict_format", "=", "{", "\n", "\"ALastTag\"", ":", "None", ",", "\n", "\"ATag\"", ":", "\"3\"", ",", "\n", "\"AnotherTag\"", ":", "\"test road\"", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_user_fromatted_parsed_address.UserFormattedParsedAddressTest._capture_output": [[30, 34], ["io.StringIO"], "methods", ["None"], ["", "def", "_capture_output", "(", "self", ")", ":", "\n", "        ", "self", ".", "test_out", "=", "io", ".", "StringIO", "(", ")", "\n", "self", ".", "original_output", "=", "sys", ".", "stdout", "\n", "sys", ".", "stdout", "=", "self", ".", "test_out", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_user_fromatted_parsed_address.UserFormattedParsedAddressTest.setUp": [[35, 41], ["test_user_fromatted_parsed_address.UserFormattedParsedAddressTest.set_fields", "deepparse.parser.FormattedParsedAddress"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.base.FormattedParsedAddressBase.set_fields"], ["", "def", "setUp", "(", "self", ")", ":", "\n", "# We set the FIELDS of the address base on the prediction tags", "\n", "        ", "new_fields", "=", "[", "\"ATag\"", ",", "\"AnotherTag\"", ",", "\"ALastTag\"", "]", "\n", "self", ".", "set_fields", "(", "new_fields", ")", "\n", "\n", "self", ".", "parsed_address", "=", "FormattedParsedAddress", "(", "self", ".", "a_address", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_user_fromatted_parsed_address.UserFormattedParsedAddressTest.test_whenInstantiatedWithAddress_thenShouldReturnCorrectRawAddress": [[42, 46], ["test_user_fromatted_parsed_address.UserFormattedParsedAddressTest.assertEqual"], "methods", ["None"], ["", "def", "test_whenInstantiatedWithAddress_thenShouldReturnCorrectRawAddress", "(", "self", ")", ":", "\n", "        ", "address", "=", "self", ".", "parsed_address", ".", "raw_address", "\n", "\n", "self", ".", "assertEqual", "(", "address", ",", "self", ".", "a_address_str", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_user_fromatted_parsed_address.UserFormattedParsedAddressTest.test_whenInstantiatedWithAddress_thenShouldReturnCorrectParsedAddress": [[47, 51], ["test_user_fromatted_parsed_address.UserFormattedParsedAddressTest.assertEqual"], "methods", ["None"], ["", "def", "test_whenInstantiatedWithAddress_thenShouldReturnCorrectParsedAddress", "(", "self", ")", ":", "\n", "        ", "parsed_address", "=", "self", ".", "parsed_address", ".", "address_parsed_components", "\n", "\n", "self", ".", "assertEqual", "(", "parsed_address", ",", "self", ".", "a_parsed_address", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_user_fromatted_parsed_address.UserFormattedParsedAddressTest.test_whenInstantiatedWithAddress_thenShouldReturnCorrectTagIfExists": [[52, 56], ["test_user_fromatted_parsed_address.UserFormattedParsedAddressTest.assertEqual"], "methods", ["None"], ["", "def", "test_whenInstantiatedWithAddress_thenShouldReturnCorrectTagIfExists", "(", "self", ")", ":", "\n", "        ", "street_number", "=", "self", ".", "parsed_address", ".", "ATag", "\n", "\n", "self", ".", "assertEqual", "(", "street_number", ",", "self", ".", "a_existing_tag", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_user_fromatted_parsed_address.UserFormattedParsedAddressTest.test_whenInstantiatedWithAddress_thenShouldReturnNoneIfTagDoesntExist": [[57, 61], ["test_user_fromatted_parsed_address.UserFormattedParsedAddressTest.assertIsNone"], "methods", ["None"], ["", "def", "test_whenInstantiatedWithAddress_thenShouldReturnNoneIfTagDoesntExist", "(", "self", ")", ":", "\n", "        ", "unit", "=", "self", ".", "parsed_address", ".", "ALastTag", "\n", "\n", "self", ".", "assertIsNone", "(", "unit", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_user_fromatted_parsed_address.UserFormattedParsedAddressTest.test_whenStrAnParseAddress_thenStringIsTheRawAddressPlusParsedComponents": [[62, 74], ["test_user_fromatted_parsed_address.UserFormattedParsedAddressTest._capture_output", "print", "test_user_fromatted_parsed_address.UserFormattedParsedAddressTest.test_out.getvalue().strip", "test_user_fromatted_parsed_address.UserFormattedParsedAddressTest.assertEqual", "test_user_fromatted_parsed_address.UserFormattedParsedAddressTest.test_out.getvalue"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.tests.base_capture_output.CaptureOutputTestCase._capture_output"], ["", "def", "test_whenStrAnParseAddress_thenStringIsTheRawAddressPlusParsedComponents", "(", "self", ")", ":", "\n", "        ", "self", ".", "_capture_output", "(", ")", "\n", "\n", "print", "(", "self", ".", "parsed_address", ")", "\n", "actual", "=", "self", ".", "test_out", ".", "getvalue", "(", ")", ".", "strip", "(", ")", "\n", "\n", "expected", "=", "(", "\n", "\"The unparsed address is '3 test road' and the parsed address is '('3', \"", "\n", "\"'ATag') ('test', 'AnotherTag') ('road', 'AnotherTag')'\"", "\n", ")", "\n", "\n", "self", ".", "assertEqual", "(", "expected", ",", "actual", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_user_fromatted_parsed_address.UserFormattedParsedAddressTest.test_whenReprAnParseAddress_thenStringIsTheAddressFormatted": [[75, 81], ["test_user_fromatted_parsed_address.UserFormattedParsedAddressTest._capture_output", "print", "test_user_fromatted_parsed_address.UserFormattedParsedAddressTest.assertEqual", "test_user_fromatted_parsed_address.UserFormattedParsedAddressTest.parsed_address.__repr__", "test_user_fromatted_parsed_address.UserFormattedParsedAddressTest.test_out.getvalue().strip", "test_user_fromatted_parsed_address.UserFormattedParsedAddressTest.test_out.getvalue"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.tests.base_capture_output.CaptureOutputTestCase._capture_output", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.formatted_parsed_address.FormattedParsedAddress.__repr__"], ["", "def", "test_whenReprAnParseAddress_thenStringIsTheAddressFormatted", "(", "self", ")", ":", "\n", "        ", "self", ".", "_capture_output", "(", ")", "\n", "\n", "print", "(", "self", ".", "parsed_address", ".", "__repr__", "(", ")", ")", "\n", "\n", "self", ".", "assertEqual", "(", "self", ".", "a_address_repr", ",", "self", ".", "test_out", ".", "getvalue", "(", ")", ".", "strip", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_user_fromatted_parsed_address.UserFormattedParsedAddressTest.test_whenToDictDefaultFields_thenReturnTheProperDict": [[82, 86], ["test_user_fromatted_parsed_address.UserFormattedParsedAddressTest.parsed_address.to_dict", "test_user_fromatted_parsed_address.UserFormattedParsedAddressTest.assertEqual"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.formatted_parsed_address.FormattedParsedAddress.to_dict"], ["", "def", "test_whenToDictDefaultFields_thenReturnTheProperDict", "(", "self", ")", ":", "\n", "        ", "actual", "=", "self", ".", "parsed_address", ".", "to_dict", "(", ")", "\n", "expected", "=", "self", ".", "a_parsed_address_in_dict_format", "\n", "self", ".", "assertEqual", "(", "actual", ",", "expected", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_user_fromatted_parsed_address.UserFormattedParsedAddressTest.test_whenToDictUserFields_thenReturnTheProperDict": [[87, 91], ["test_user_fromatted_parsed_address.UserFormattedParsedAddressTest.parsed_address.to_dict", "test_user_fromatted_parsed_address.UserFormattedParsedAddressTest.assertEqual"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.formatted_parsed_address.FormattedParsedAddress.to_dict"], ["", "def", "test_whenToDictUserFields_thenReturnTheProperDict", "(", "self", ")", ":", "\n", "        ", "actual", "=", "self", ".", "parsed_address", ".", "to_dict", "(", "fields", "=", "[", "\"ATag\"", "]", ")", "\n", "expected", "=", "{", "\"ATag\"", ":", "\"3\"", "}", "\n", "self", ".", "assertEqual", "(", "actual", ",", "expected", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_user_fromatted_parsed_address.UserFormattedParsedAddressTest.test_whenFormattedAddressUpperCaseFields_thenReturnAddressWithFieldsUpperCase": [[92, 99], ["test_user_fromatted_parsed_address.UserFormattedParsedAddressTest.parsed_address.format_address", "test_user_fromatted_parsed_address.UserFormattedParsedAddressTest.assertEqual"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.formatted_parsed_address.FormattedParsedAddress.format_address"], ["", "def", "test_whenFormattedAddressUpperCaseFields_thenReturnAddressWithFieldsUpperCase", "(", "\n", "self", ",", "\n", ")", ":", "\n", "        ", "actual", "=", "self", ".", "parsed_address", ".", "format_address", "(", "upper_case_fields", "=", "[", "\"AnotherTag\"", "]", ")", "\n", "expected", "=", "\"3 TEST ROAD\"", "\n", "\n", "self", ".", "assertEqual", "(", "actual", ",", "expected", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_user_fromatted_parsed_address.UserFormattedParsedAddressTest.test_whenFormattedAddressUpperCaseFieldsNotAddressFields_thenRaiseError": [[100, 103], ["test_user_fromatted_parsed_address.UserFormattedParsedAddressTest.assertRaises", "test_user_fromatted_parsed_address.UserFormattedParsedAddressTest.parsed_address.format_address"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.formatted_parsed_address.FormattedParsedAddress.format_address"], ["", "def", "test_whenFormattedAddressUpperCaseFieldsNotAddressFields_thenRaiseError", "(", "self", ")", ":", "\n", "        ", "with", "self", ".", "assertRaises", "(", "KeyError", ")", ":", "\n", "            ", "self", ".", "parsed_address", ".", "format_address", "(", "upper_case_fields", "=", "[", "\"not_a_field\"", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_user_fromatted_parsed_address.UserFormattedParsedAddressTest.test_whenEqualParsedAddress_then__eq__ReturnTrue": [[104, 106], ["test_user_fromatted_parsed_address.UserFormattedParsedAddressTest.assertTrue"], "methods", ["None"], ["", "", "def", "test_whenEqualParsedAddress_then__eq__ReturnTrue", "(", "self", ")", ":", "\n", "        ", "self", ".", "assertTrue", "(", "self", ".", "parsed_address", "==", "self", ".", "parsed_address", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_user_fromatted_parsed_address.UserFormattedParsedAddressTest.test_whenNotEqualParsedAddressNotSameElements_then__eq__ReturnFalse": [[107, 128], ["test_user_fromatted_parsed_address.UserFormattedParsedAddressTest.reset_fields", "deepparse.parser.FormattedParsedAddress", "test_user_fromatted_parsed_address.UserFormattedParsedAddressTest.assertFalse"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.base.FormattedParsedAddressBase.reset_fields"], ["", "def", "test_whenNotEqualParsedAddressNotSameElements_then__eq__ReturnFalse", "(", "self", ")", ":", "\n", "        ", "a_different_address_str", "=", "\"3 test road unit west city province postal_code delivery\"", "\n", "\n", "an_address_with_different_components_tags", "=", "[", "\n", "(", "\"3\"", ",", "\"StreetNumber\"", ")", ",", "\n", "(", "\"test\"", ",", "\"StreetName\"", ")", ",", "\n", "(", "\"road\"", ",", "\"StreetName\"", ")", ",", "\n", "(", "\"unit\"", ",", "\"Unit\"", ")", ",", "\n", "(", "\"west\"", ",", "\"Orientation\"", ")", ",", "\n", "(", "\"city\"", ",", "\"Municipality\"", ")", ",", "\n", "(", "\"province\"", ",", "\"Province\"", ")", ",", "\n", "(", "\"postal_code\"", ",", "\"PostalCode\"", ")", ",", "\n", "(", "\"delivery\"", ",", "\"GeneralDelivery\"", ")", ",", "\n", "]", "\n", "another_address", "=", "{", "a_different_address_str", ":", "an_address_with_different_components_tags", "}", "\n", "\n", "self", ".", "reset_fields", "(", ")", "\n", "\n", "different_parsed_address", "=", "FormattedParsedAddress", "(", "another_address", ")", "\n", "\n", "self", ".", "assertFalse", "(", "self", ".", "parsed_address", "==", "different_parsed_address", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_address_parser_test_api.AddressParserRetrainTest.setUpClass": [[17, 37], ["super().setUpClass", "torch.device", "torch.device", "tests.tools.ADataContainer"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_seq2seq_fasttext_model_gpu.FastTextSeq2SeqIntegrationTest.setUpClass"], ["    ", "@", "classmethod", "\n", "def", "setUpClass", "(", "cls", ")", ":", "\n", "        ", "super", "(", "AddressParserRetrainTest", ",", "cls", ")", ".", "setUpClass", "(", ")", "\n", "cls", ".", "a_device", "=", "torch", ".", "device", "(", "\"cpu\"", ")", "\n", "\n", "cls", ".", "a_train_ratio", "=", "0.8", "\n", "cls", ".", "a_batch_size", "=", "BATCH_SIZE", "\n", "cls", ".", "a_epoch_number", "=", "1", "\n", "cls", ".", "a_number_of_workers", "=", "1", "\n", "cls", ".", "a_learning_rate", "=", "0.01", "\n", "cls", ".", "a_callbacks_list", "=", "[", "]", "\n", "cls", ".", "a_seed", "=", "42", "\n", "cls", ".", "a_torch_device", "=", "torch", ".", "device", "(", "\"cuda:0\"", ")", "\n", "\n", "cls", ".", "mocked_data_container", "=", "ADataContainer", "(", ")", "\n", "\n", "cls", ".", "a_fasttext_path", "=", "\"fasttext\"", "\n", "cls", ".", "a_bpemb_path", "=", "\"bpemb\"", "\n", "\n", "cls", ".", "verbose", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_address_parser_test_api.AddressParserRetrainTest.address_parser_test_call": [[38, 45], ["test_address_parser_test_api.AddressParserRetrainTest.address_parser.test"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.address_parser.AddressParser.test"], ["", "def", "address_parser_test_call", "(", "self", ")", ":", "\n", "        ", "self", ".", "address_parser", ".", "test", "(", "\n", "self", ".", "mocked_data_container", ",", "\n", "self", ".", "a_batch_size", ",", "\n", "num_workers", "=", "self", ".", "a_number_of_workers", ",", "\n", "callbacks", "=", "self", ".", "a_callbacks_list", ",", "\n", "seed", "=", "self", ".", "a_seed", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_address_parser_test_api.AddressParserRetrainTest.assert_experiment_test": [[47, 58], ["experiment_mock.assert_called_with", "model_mock"], "methods", ["None"], ["", "def", "assert_experiment_test", "(", "self", ",", "experiment_mock", ",", "model_mock", ",", "device", ")", ":", "\n", "        ", "experiment_mock", ".", "assert_called_with", "(", "\n", "\"./checkpoint\"", ",", "# We always use this as default logging dir.", "\n", "model_mock", "(", ")", ",", "\n", "device", "=", "device", ",", "\n", "# For a reason I don't understand if I use self.nll_loss and set it in the", "\n", "# class setup, it return a bound method for the nll_loss but it work for", "\n", "# the accuracy. So fuck it, here a fix.", "\n", "loss_function", "=", "nll_loss", ",", "\n", "batch_metrics", "=", "[", "accuracy", "]", ",", "\n", "logging", "=", "False", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_address_parser_test_api.AddressParserRetrainTest.assert_experiment_test_method_is_call": [[60, 63], ["experiment_mock.assert_has_calls", "unittest.mock.call().test", "data_loader_mock", "unittest.mock.call"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.address_parser.AddressParser.test"], ["", "def", "assert_experiment_test_method_is_call", "(", "self", ",", "data_loader_mock", ",", "experiment_mock", ",", "verbose", ")", ":", "\n", "        ", "test_call", "=", "[", "call", "(", ")", ".", "test", "(", "data_loader_mock", "(", ")", ",", "seed", "=", "self", ".", "a_seed", ",", "callbacks", "=", "[", "]", ",", "verbose", "=", "verbose", ")", "]", "\n", "experiment_mock", ".", "assert_has_calls", "(", "test_call", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_address_parser_test_api.AddressParserRetrainTest.test_givenAFasttextModel_whenTestCPU_thenInstantiateExperimentProperly": [[64, 93], ["unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "deepparse.parser.AddressParser", "test_address_parser_test_api.AddressParserRetrainTest.address_parser_test_call", "test_address_parser_test_api.AddressParserRetrainTest.assert_experiment_test"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_address_parser_test_api.AddressParserRetrainTest.address_parser_test_call", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_address_parser_test_api.AddressParserRetrainTest.assert_experiment_test"], ["", "@", "patch", "(", "\"deepparse.parser.address_parser.DataLoader\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.Experiment\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.SGD\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.DataTransform\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.FastTextSeq2SeqModel\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.fasttext_data_padding\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.FastTextVectorizer\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.FastTextEmbeddingsModel\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.download_fasttext_embeddings\"", ")", "\n", "def", "test_givenAFasttextModel_whenTestCPU_thenInstantiateExperimentProperly", "(", "\n", "self", ",", "\n", "download_weights_mock", ",", "\n", "embeddings_model_mock", ",", "\n", "vectorizer_model_mock", ",", "\n", "data_padding_mock", ",", "\n", "model_mock", ",", "\n", "data_transform_mock", ",", "\n", "optimizer_mock", ",", "\n", "experiment_mock", ",", "\n", "data_loader_mock", ",", "\n", ")", ":", "\n", "        ", "self", ".", "address_parser", "=", "AddressParser", "(", "\n", "model_type", "=", "self", ".", "a_fasttext_model_type", ",", "\n", "device", "=", "self", ".", "a_device", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", ")", "\n", "self", ".", "address_parser_test_call", "(", ")", "\n", "\n", "self", ".", "assert_experiment_test", "(", "experiment_mock", ",", "model_mock", ",", "device", "=", "self", ".", "a_device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_address_parser_test_api.AddressParserRetrainTest.test_givenAFasttextModel_whenTestGPU_thenInstantiateExperimentProperly": [[94, 124], ["unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.skipIf", "deepparse.parser.AddressParser", "test_address_parser_test_api.AddressParserRetrainTest.address_parser_test_call", "test_address_parser_test_api.AddressParserRetrainTest.assert_experiment_test", "torch.cuda.is_available"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_address_parser_test_api.AddressParserRetrainTest.address_parser_test_call", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_address_parser_test_api.AddressParserRetrainTest.assert_experiment_test"], ["", "@", "patch", "(", "\"deepparse.parser.address_parser.DataLoader\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.Experiment\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.SGD\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.DataTransform\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.FastTextSeq2SeqModel\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.fasttext_data_padding\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.FastTextVectorizer\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.FastTextEmbeddingsModel\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.download_fasttext_embeddings\"", ")", "\n", "@", "skipIf", "(", "not", "torch", ".", "cuda", ".", "is_available", "(", ")", ",", "\"no gpu available\"", ")", "\n", "def", "test_givenAFasttextModel_whenTestGPU_thenInstantiateExperimentProperly", "(", "\n", "self", ",", "\n", "download_weights_mock", ",", "\n", "embeddings_model_mock", ",", "\n", "vectorizer_model_mock", ",", "\n", "data_padding_mock", ",", "\n", "model_mock", ",", "\n", "data_transform_mock", ",", "\n", "optimizer_mock", ",", "\n", "experiment_mock", ",", "\n", "data_loader_mock", ",", "\n", ")", ":", "\n", "        ", "self", ".", "address_parser", "=", "AddressParser", "(", "\n", "model_type", "=", "self", ".", "a_fasttext_model_type", ",", "\n", "device", "=", "self", ".", "a_torch_device", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", ")", "\n", "self", ".", "address_parser_test_call", "(", ")", "\n", "\n", "self", ".", "assert_experiment_test", "(", "experiment_mock", ",", "model_mock", ",", "device", "=", "self", ".", "a_torch_device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_address_parser_test_api.AddressParserRetrainTest.test_givenAFasttextModel_whenTest_thenInstantiateDataLoaderAndTestProperly": [[125, 154], ["unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "deepparse.parser.AddressParser", "test_address_parser_test_api.AddressParserRetrainTest.address_parser_test_call", "test_address_parser_test_api.AddressParserRetrainTest.assert_experiment_test_method_is_call"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_address_parser_test_api.AddressParserRetrainTest.address_parser_test_call", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_address_parser_test_api.AddressParserRetrainTest.assert_experiment_test_method_is_call"], ["", "@", "patch", "(", "\"deepparse.parser.address_parser.DataLoader\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.Experiment\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.SGD\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.DataTransform\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.FastTextSeq2SeqModel\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.fasttext_data_padding\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.FastTextVectorizer\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.FastTextEmbeddingsModel\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.download_fasttext_embeddings\"", ")", "\n", "def", "test_givenAFasttextModel_whenTest_thenInstantiateDataLoaderAndTestProperly", "(", "\n", "self", ",", "\n", "download_weights_mock", ",", "\n", "embeddings_model_mock", ",", "\n", "vectorizer_model_mock", ",", "\n", "data_padding_mock", ",", "\n", "model_mock", ",", "\n", "data_transform_mock", ",", "\n", "optimizer_mock", ",", "\n", "experiment_mock", ",", "\n", "data_loader_mock", ",", "\n", ")", ":", "\n", "        ", "self", ".", "address_parser", "=", "AddressParser", "(", "\n", "model_type", "=", "self", ".", "a_fasttext_model_type", ",", "\n", "device", "=", "self", ".", "a_device", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", ")", "\n", "self", ".", "address_parser_test_call", "(", ")", "\n", "\n", "self", ".", "assert_experiment_test_method_is_call", "(", "data_loader_mock", ",", "experiment_mock", ",", "verbose", "=", "self", ".", "verbose", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_address_parser_test_api.AddressParserRetrainTest.test_givenAFasttextModel_whenTestVerbose_thenInstantiateWithVerbose": [[155, 183], ["unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "deepparse.parser.AddressParser", "test_address_parser_test_api.AddressParserRetrainTest.address_parser_test_call", "test_address_parser_test_api.AddressParserRetrainTest.assert_experiment_test_method_is_call"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_address_parser_test_api.AddressParserRetrainTest.address_parser_test_call", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_address_parser_test_api.AddressParserRetrainTest.assert_experiment_test_method_is_call"], ["", "@", "patch", "(", "\"deepparse.parser.address_parser.DataLoader\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.Experiment\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.SGD\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.DataTransform\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.FastTextSeq2SeqModel\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.fasttext_data_padding\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.FastTextVectorizer\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.FastTextEmbeddingsModel\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.download_fasttext_embeddings\"", ")", "\n", "def", "test_givenAFasttextModel_whenTestVerbose_thenInstantiateWithVerbose", "(", "\n", "self", ",", "\n", "download_weights_mock", ",", "\n", "embeddings_model_mock", ",", "\n", "vectorizer_model_mock", ",", "\n", "data_padding_mock", ",", "\n", "model_mock", ",", "\n", "data_transform_mock", ",", "\n", "optimizer_mock", ",", "\n", "experiment_mock", ",", "\n", "data_loader_mock", ",", "\n", ")", ":", "\n", "        ", "verbose", "=", "True", "\n", "self", ".", "address_parser", "=", "AddressParser", "(", "\n", "model_type", "=", "self", ".", "a_fasttext_model_type", ",", "device", "=", "self", ".", "a_device", ",", "verbose", "=", "verbose", "\n", ")", "\n", "self", ".", "address_parser_test_call", "(", ")", "\n", "\n", "self", ".", "assert_experiment_test_method_is_call", "(", "data_loader_mock", ",", "experiment_mock", ",", "verbose", "=", "verbose", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_address_parser_test_api.AddressParserRetrainTest.test_givenABPEmbModel_whenTestCPU_thenInstantiateExperimentProperly": [[184, 211], ["unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "deepparse.parser.AddressParser", "test_address_parser_test_api.AddressParserRetrainTest.address_parser_test_call", "test_address_parser_test_api.AddressParserRetrainTest.assert_experiment_test"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_address_parser_test_api.AddressParserRetrainTest.address_parser_test_call", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_address_parser_test_api.AddressParserRetrainTest.assert_experiment_test"], ["", "@", "patch", "(", "\"deepparse.parser.address_parser.DataLoader\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.Experiment\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.SGD\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.DataTransform\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.BPEmbSeq2SeqModel\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.bpemb_data_padding\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.BPEmbVectorizer\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.BPEmbEmbeddingsModel\"", ")", "\n", "def", "test_givenABPEmbModel_whenTestCPU_thenInstantiateExperimentProperly", "(", "\n", "self", ",", "\n", "embeddings_model_mock", ",", "\n", "vectorizer_model_mock", ",", "\n", "data_padding_mock", ",", "\n", "model_mock", ",", "\n", "data_transform_mock", ",", "\n", "optimizer_mock", ",", "\n", "experiment_mock", ",", "\n", "data_loader_mock", ",", "\n", ")", ":", "\n", "        ", "self", ".", "address_parser", "=", "AddressParser", "(", "\n", "model_type", "=", "self", ".", "a_bpemb_model_type", ",", "\n", "device", "=", "self", ".", "a_device", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", ")", "\n", "self", ".", "address_parser_test_call", "(", ")", "\n", "\n", "self", ".", "assert_experiment_test", "(", "experiment_mock", ",", "model_mock", ",", "device", "=", "self", ".", "a_device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_address_parser_test_api.AddressParserRetrainTest.test_givenABPEmbModel_whenTestGPU_thenInstantiateExperimentProperly": [[212, 240], ["unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.skipIf", "deepparse.parser.AddressParser", "test_address_parser_test_api.AddressParserRetrainTest.address_parser_test_call", "test_address_parser_test_api.AddressParserRetrainTest.assert_experiment_test", "torch.cuda.is_available"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_address_parser_test_api.AddressParserRetrainTest.address_parser_test_call", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_address_parser_test_api.AddressParserRetrainTest.assert_experiment_test"], ["", "@", "patch", "(", "\"deepparse.parser.address_parser.DataLoader\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.Experiment\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.SGD\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.DataTransform\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.BPEmbSeq2SeqModel\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.bpemb_data_padding\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.BPEmbVectorizer\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.BPEmbEmbeddingsModel\"", ")", "\n", "@", "skipIf", "(", "not", "torch", ".", "cuda", ".", "is_available", "(", ")", ",", "\"no gpu available\"", ")", "\n", "def", "test_givenABPEmbModel_whenTestGPU_thenInstantiateExperimentProperly", "(", "\n", "self", ",", "\n", "embeddings_model_mock", ",", "\n", "vectorizer_model_mock", ",", "\n", "data_padding_mock", ",", "\n", "model_mock", ",", "\n", "data_transform_mock", ",", "\n", "optimizer_mock", ",", "\n", "experiment_mock", ",", "\n", "data_loader_mock", ",", "\n", ")", ":", "\n", "        ", "self", ".", "address_parser", "=", "AddressParser", "(", "\n", "model_type", "=", "self", ".", "a_bpemb_model_type", ",", "\n", "device", "=", "self", ".", "a_torch_device", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", ")", "\n", "self", ".", "address_parser_test_call", "(", ")", "\n", "\n", "self", ".", "assert_experiment_test", "(", "experiment_mock", ",", "model_mock", ",", "device", "=", "self", ".", "a_torch_device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_address_parser_test_api.AddressParserRetrainTest.test_givenABPEmbModel_whenTest_thenInstantiateDataLoaderAndTestProperly": [[241, 268], ["unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "deepparse.parser.AddressParser", "test_address_parser_test_api.AddressParserRetrainTest.address_parser_test_call", "test_address_parser_test_api.AddressParserRetrainTest.assert_experiment_test_method_is_call"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_address_parser_test_api.AddressParserRetrainTest.address_parser_test_call", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_address_parser_test_api.AddressParserRetrainTest.assert_experiment_test_method_is_call"], ["", "@", "patch", "(", "\"deepparse.parser.address_parser.DataLoader\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.Experiment\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.SGD\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.DataTransform\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.BPEmbSeq2SeqModel\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.bpemb_data_padding\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.BPEmbVectorizer\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.BPEmbEmbeddingsModel\"", ")", "\n", "def", "test_givenABPEmbModel_whenTest_thenInstantiateDataLoaderAndTestProperly", "(", "\n", "self", ",", "\n", "embeddings_model_mock", ",", "\n", "vectorizer_model_mock", ",", "\n", "data_padding_mock", ",", "\n", "model_mock", ",", "\n", "data_transform_mock", ",", "\n", "optimizer_mock", ",", "\n", "experiment_mock", ",", "\n", "data_loader_mock", ",", "\n", ")", ":", "\n", "        ", "self", ".", "address_parser", "=", "AddressParser", "(", "\n", "model_type", "=", "self", ".", "a_bpemb_model_type", ",", "\n", "device", "=", "self", ".", "a_device", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", ")", "\n", "self", ".", "address_parser_test_call", "(", ")", "\n", "\n", "self", ".", "assert_experiment_test_method_is_call", "(", "data_loader_mock", ",", "experiment_mock", ",", "verbose", "=", "self", ".", "verbose", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_address_parser_test_api.AddressParserRetrainTest.test_givenABPEmbModel_whenTestVerboseTrue_thenInstantiateWithVerbose": [[269, 293], ["unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "deepparse.parser.AddressParser", "test_address_parser_test_api.AddressParserRetrainTest.address_parser_test_call", "test_address_parser_test_api.AddressParserRetrainTest.assert_experiment_test_method_is_call"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_address_parser_test_api.AddressParserRetrainTest.address_parser_test_call", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_address_parser_test_api.AddressParserRetrainTest.assert_experiment_test_method_is_call"], ["", "@", "patch", "(", "\"deepparse.parser.address_parser.DataLoader\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.Experiment\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.SGD\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.DataTransform\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.BPEmbSeq2SeqModel\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.bpemb_data_padding\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.BPEmbVectorizer\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.BPEmbEmbeddingsModel\"", ")", "\n", "def", "test_givenABPEmbModel_whenTestVerboseTrue_thenInstantiateWithVerbose", "(", "\n", "self", ",", "\n", "embeddings_model_mock", ",", "\n", "vectorizer_model_mock", ",", "\n", "data_padding_mock", ",", "\n", "model_mock", ",", "\n", "data_transform_mock", ",", "\n", "optimizer_mock", ",", "\n", "experiment_mock", ",", "\n", "data_loader_mock", ",", "\n", ")", ":", "\n", "        ", "verbose", "=", "True", "\n", "self", ".", "address_parser", "=", "AddressParser", "(", "model_type", "=", "self", ".", "a_bpemb_model_type", ",", "device", "=", "self", ".", "a_device", ",", "verbose", "=", "verbose", ")", "\n", "self", ".", "address_parser_test_call", "(", ")", "\n", "\n", "self", ".", "assert_experiment_test_method_is_call", "(", "data_loader_mock", ",", "experiment_mock", ",", "verbose", "=", "verbose", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.test_address_parser_test_api.AddressParserRetrainTest.test_givenNotTrainingDataContainer_thenRaiseValueError": [[294, 318], ["unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "deepparse.parser.AddressParser", "tests.tools.ADataContainer", "test_address_parser_test_api.AddressParserRetrainTest.assertRaises", "test_address_parser_test_api.AddressParserRetrainTest.address_parser.test"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.address_parser.AddressParser.test"], ["", "@", "patch", "(", "\"deepparse.parser.address_parser.BPEmbSeq2SeqModel\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.bpemb_data_padding\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.BPEmbVectorizer\"", ")", "\n", "@", "patch", "(", "\"deepparse.parser.address_parser.BPEmbEmbeddingsModel\"", ")", "\n", "def", "test_givenNotTrainingDataContainer_thenRaiseValueError", "(", "\n", "self", ",", "\n", "embeddings_model_mock", ",", "\n", "vectorizer_model_mock", ",", "\n", "data_padding_mock", ",", "\n", "model_patch", ",", "\n", ")", ":", "\n", "        ", "self", ".", "address_parser", "=", "AddressParser", "(", "\n", "model_type", "=", "self", ".", "a_bpemb_model_type", ",", "\n", "device", "=", "self", ".", "a_device", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", ")", "\n", "mocked_data_container", "=", "ADataContainer", "(", "is_training_container", "=", "False", ")", "\n", "with", "self", ".", "assertRaises", "(", "ValueError", ")", ":", "\n", "            ", "self", ".", "address_parser", ".", "test", "(", "\n", "mocked_data_container", ",", "\n", "self", ".", "a_batch_size", ",", "\n", "num_workers", "=", "self", ".", "a_number_of_workers", ",", "\n", "callbacks", "=", "self", ".", "a_callbacks_list", ",", "\n", "seed", "=", "self", ".", "a_seed", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.converter.data_padding.fasttext_data_padding": [[15, 37], ["zip", "torch.tensor", "torch.nn.utils.rnn.pad_sequence", "torch.FloatTensor", "len", "numpy.array"], "function", ["None"], ["def", "fasttext_data_padding", "(", "batch", ":", "List", ")", "->", "Tuple", ":", "\n", "    ", "\"\"\"\n    Function that adds padding to the sequences so all can have the same length as the longest one for fastText model.\n\n    Args:\n        batch (List): The vectorized batch data.\n\n    Returns:\n        A tuple (``x``, ``y``). The element ``x`` is a tensor of padded word vectors and ``y``  is their respective\n        lengths of the sequences.\n    \"\"\"", "\n", "\n", "# We convert into np.array before as per PyTorch optimization recommendation", "\n", "sequences_vectors", ",", "lengths", "=", "zip", "(", "\n", "*", "[", "(", "torch", ".", "FloatTensor", "(", "np", ".", "array", "(", "seq_vectors", ")", ")", ",", "len", "(", "seq_vectors", ")", ")", "for", "seq_vectors", "in", "batch", "]", "\n", ")", "\n", "\n", "lengths", "=", "torch", ".", "tensor", "(", "lengths", ")", "\n", "\n", "padded_sequences_vectors", "=", "pad_sequence", "(", "sequences_vectors", ",", "batch_first", "=", "True", ",", "padding_value", "=", "padding_value", ")", "\n", "\n", "return", "padded_sequences_vectors", ",", "lengths", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.converter.data_padding.bpemb_data_padding": [[39, 72], ["zip", "torch.tensor", "torch.nn.utils.rnn.pad_sequence", "torch.tensor.max().item", "list", "torch.tensor.max", "len", "decomposition_length.extend", "torch.tensor", "len", "numpy.array", "len"], "function", ["None"], ["", "def", "bpemb_data_padding", "(", "batch", ":", "List", "[", "Tuple", "]", ")", "->", "Tuple", ":", "\n", "    ", "\"\"\"\n    Function that add padding to the sequences and to the decomposition lengths so all can have the same length as\n    the longest one.\n\n    Args:\n        batch (list[tuple]): The list of vectorize tupled batch data where the first element is the address embeddings\n            and the second is the word decomposition lengths.\n\n    Returns:\n        A tuple (``x``, ``y``, ``z``). The element ``x`` is a tensor of padded word vectors, ``y`` is the padded\n        decomposition lengths, and ``z`` is the original lengths of the sequences before padding.\n    \"\"\"", "\n", "\n", "# We convert into np.array before as per PyTorch optimization recommendation", "\n", "sequences_vectors", ",", "decomp_len", ",", "lengths", "=", "zip", "(", "\n", "*", "[", "\n", "(", "torch", ".", "tensor", "(", "np", ".", "array", "(", "vectors", ")", ")", ",", "word_decomposition_len", ",", "len", "(", "vectors", ")", ")", "\n", "for", "vectors", ",", "word_decomposition_len", "in", "batch", "\n", "]", "\n", ")", "\n", "\n", "lengths", "=", "torch", ".", "tensor", "(", "lengths", ")", "\n", "\n", "padded_sequences_vectors", "=", "pad_sequence", "(", "sequences_vectors", ",", "batch_first", "=", "True", ",", "padding_value", "=", "padding_value", ")", "\n", "\n", "# pad decomposition length", "\n", "max_sequence_length", "=", "lengths", ".", "max", "(", ")", ".", "item", "(", ")", "\n", "for", "decomposition_length", "in", "decomp_len", ":", "\n", "        ", "if", "len", "(", "decomposition_length", ")", "<", "max_sequence_length", ":", "\n", "            ", "decomposition_length", ".", "extend", "(", "[", "1", "]", "*", "(", "max_sequence_length", "-", "len", "(", "decomposition_length", ")", ")", ")", "\n", "\n", "", "", "return", "padded_sequences_vectors", ",", "list", "(", "decomp_len", ")", ",", "lengths", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.converter.data_padding.fasttext_data_padding_teacher_forcing": [[74, 100], ["data_padding._convert_sequence_to_tensor", "torch.tensor", "torch.nn.utils.rnn.pad_sequence", "torch.nn.utils.rnn.pad_sequence"], "function", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.converter.data_padding._convert_sequence_to_tensor"], ["", "def", "fasttext_data_padding_teacher_forcing", "(", "batch", ":", "List", ")", "->", "Tuple", ":", "\n", "    ", "\"\"\"\n    Function that adds padding to the sequences so all can have the same length as the longest one,\n    using teacher forcing training (i.e. we also provide the target during training).\n\n    Args:\n        batch (List): The vectorized batch data\n\n    Returns:\n        A tuple ((``x``, ``y``, ``z``), ``z``). The element ``x`` is a tensor of padded word vectors, ``y`` is their\n        respective lengths of the sequences and ``z`` is a tensor of padded target idx. We use teacher forcing so we\n        also need to pass the target during training (``z``).\n    \"\"\"", "\n", "\n", "sequences_vectors", ",", "target_vectors", ",", "lengths", "=", "_convert_sequence_to_tensor", "(", "batch", ")", "\n", "\n", "lengths", "=", "torch", ".", "tensor", "(", "lengths", ")", "\n", "\n", "padded_sequences_vectors", "=", "pad_sequence", "(", "sequences_vectors", ",", "batch_first", "=", "True", ",", "padding_value", "=", "padding_value", ")", "\n", "padded_target_vectors", "=", "pad_sequence", "(", "target_vectors", ",", "batch_first", "=", "True", ",", "padding_value", "=", "padding_value", ")", "\n", "\n", "return", "(", "\n", "padded_sequences_vectors", ",", "\n", "lengths", ",", "\n", "padded_target_vectors", ",", "\n", ")", ",", "padded_target_vectors", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.converter.data_padding.bpemb_data_padding_teacher_forcing": [[102, 142], ["data_padding._convert_bpemb_sequence_to_tensor", "torch.tensor", "torch.nn.utils.rnn.pad_sequence", "torch.nn.utils.rnn.pad_sequence", "torch.tensor.max().item", "torch.tensor.max", "len", "decomposition_length.extend", "list", "len"], "function", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.converter.data_padding._convert_bpemb_sequence_to_tensor"], ["", "def", "bpemb_data_padding_teacher_forcing", "(", "batch", ":", "List", "[", "Tuple", "]", ")", "->", "Tuple", ":", "\n", "    ", "\"\"\"\n    Function that add padding to the sequences and to the decomposition lengths so all can have the same length as\n    the longest one, using teacher forcing training (i.e. we also provide the target during training).\n\n    Args:\n        batch (list[tuple]): The list of vectorize tupled batch data where the first element is the address embeddings\n            and the second is the word decomposition lengths.\n\n    Returns:\n        A tuple ((``x``, ``y``, ``z``, ``w``), ``w``). The element ``x`` is a tensor of padded word vectors,\n        ``y`` is the padded decomposition lengths, ``z`` is the original lengths of the sequences before padding, and\n        ``w`` is a tensor of padded target idx. We use teacher forcing so we also need to pass the target during\n        training (``w``).\n    \"\"\"", "\n", "\n", "(", "\n", "sequences_vectors", ",", "\n", "decomp_len", ",", "\n", "target_vectors", ",", "\n", "lengths", ",", "\n", ")", "=", "_convert_bpemb_sequence_to_tensor", "(", "batch", ")", "\n", "\n", "lengths", "=", "torch", ".", "tensor", "(", "lengths", ")", "\n", "\n", "padded_sequences_vectors", "=", "pad_sequence", "(", "sequences_vectors", ",", "batch_first", "=", "True", ",", "padding_value", "=", "padding_value", ")", "\n", "padded_target_vectors", "=", "pad_sequence", "(", "target_vectors", ",", "batch_first", "=", "True", ",", "padding_value", "=", "padding_value", ")", "\n", "\n", "# pad decomposition length", "\n", "max_sequence_length", "=", "lengths", ".", "max", "(", ")", ".", "item", "(", ")", "\n", "for", "decomposition_length", "in", "decomp_len", ":", "\n", "        ", "if", "len", "(", "decomposition_length", ")", "<", "max_sequence_length", ":", "\n", "            ", "decomposition_length", ".", "extend", "(", "[", "1", "]", "*", "(", "max_sequence_length", "-", "len", "(", "decomposition_length", ")", ")", ")", "\n", "\n", "", "", "return", "(", "\n", "padded_sequences_vectors", ",", "\n", "list", "(", "decomp_len", ")", ",", "\n", "lengths", ",", "\n", "padded_target_vectors", ",", "\n", ")", ",", "padded_target_vectors", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.converter.data_padding.fasttext_data_padding_with_target": [[144, 164], ["data_padding._convert_sequence_to_tensor", "torch.tensor", "torch.nn.utils.rnn.pad_sequence", "torch.nn.utils.rnn.pad_sequence"], "function", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.converter.data_padding._convert_sequence_to_tensor"], ["", "def", "fasttext_data_padding_with_target", "(", "batch", ":", "List", ")", "->", "Tuple", ":", "\n", "    ", "\"\"\"\n    Function that adds padding to the sequences so all can have the same length as the longest one.\n\n    Args:\n        batch (List): The vectorized batch data\n\n    Returns:\n        A tuple ((``x``, ``y``), ``z``). The element ``x`` is a tensor of padded word vectors, ``y`` is their\n        respective lengths of the sequences and ``z`` is a tensor of padded target idx.\n    \"\"\"", "\n", "\n", "sequences_vectors", ",", "target_vectors", ",", "lengths", "=", "_convert_sequence_to_tensor", "(", "batch", ")", "\n", "\n", "lengths", "=", "torch", ".", "tensor", "(", "lengths", ")", "\n", "\n", "padded_sequences_vectors", "=", "pad_sequence", "(", "sequences_vectors", ",", "batch_first", "=", "True", ",", "padding_value", "=", "padding_value", ")", "\n", "padded_target_vectors", "=", "pad_sequence", "(", "target_vectors", ",", "batch_first", "=", "True", ",", "padding_value", "=", "padding_value", ")", "\n", "\n", "return", "(", "padded_sequences_vectors", ",", "lengths", ")", ",", "padded_target_vectors", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.converter.data_padding.bpemb_data_padding_with_target": [[166, 200], ["data_padding._convert_bpemb_sequence_to_tensor", "torch.tensor", "torch.nn.utils.rnn.pad_sequence", "torch.nn.utils.rnn.pad_sequence", "torch.tensor.max().item", "torch.tensor.max", "len", "decomposition_length.extend", "list", "len"], "function", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.converter.data_padding._convert_bpemb_sequence_to_tensor"], ["", "def", "bpemb_data_padding_with_target", "(", "batch", ":", "List", "[", "Tuple", "]", ")", "->", "Tuple", ":", "\n", "    ", "\"\"\"\n    Function that add padding to the sequences and to the decomposition lengths so all can have the same length as\n    the longest one.\n\n    Args:\n        batch (list[tuple]): The list of vectorize tupled batch data where the first element is the address embeddings\n            and the second is the word decomposition lengths.\n\n    Returns:\n        A tuple ((``x``, ``y`` , ``z``), ``w``). The element ``x`` is a tensor of padded word vectors,\n        ``y`` is the padded decomposition lengths, ``z`` is the original lengths of the sequences before padding, and\n        ``w`` is a tensor of padded target idx.\n    \"\"\"", "\n", "\n", "(", "\n", "sequences_vectors", ",", "\n", "decomp_len", ",", "\n", "target_vectors", ",", "\n", "lengths", ",", "\n", ")", "=", "_convert_bpemb_sequence_to_tensor", "(", "batch", ")", "\n", "\n", "lengths", "=", "torch", ".", "tensor", "(", "lengths", ")", "\n", "\n", "padded_sequences_vectors", "=", "pad_sequence", "(", "sequences_vectors", ",", "batch_first", "=", "True", ",", "padding_value", "=", "padding_value", ")", "\n", "padded_target_vectors", "=", "pad_sequence", "(", "target_vectors", ",", "batch_first", "=", "True", ",", "padding_value", "=", "padding_value", ")", "\n", "\n", "# pad decomposition length", "\n", "max_sequence_length", "=", "lengths", ".", "max", "(", ")", ".", "item", "(", ")", "\n", "for", "decomposition_length", "in", "decomp_len", ":", "\n", "        ", "if", "len", "(", "decomposition_length", ")", "<", "max_sequence_length", ":", "\n", "            ", "decomposition_length", ".", "extend", "(", "[", "1", "]", "*", "(", "max_sequence_length", "-", "len", "(", "decomposition_length", ")", ")", ")", "\n", "\n", "", "", "return", "(", "padded_sequences_vectors", ",", "list", "(", "decomp_len", ")", ",", "lengths", ")", ",", "padded_target_vectors", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.converter.data_padding._convert_sequence_to_tensor": [[202, 217], ["sorted", "zip", "len", "torch.FloatTensor", "torch.tensor", "len", "numpy.array"], "function", ["None"], ["", "def", "_convert_sequence_to_tensor", "(", "batch", ")", ":", "\n", "    ", "\"\"\"\n    Sort and convert sequence into a tensor with target element\n    \"\"\"", "\n", "sorted_batch", "=", "sorted", "(", "batch", ",", "key", "=", "lambda", "x", ":", "len", "(", "x", "[", "0", "]", ")", ",", "reverse", "=", "True", ")", "\n", "\n", "# We convert into np.array before as per PyTorch optimization recommendation", "\n", "return", "zip", "(", "\n", "*", "[", "\n", "(", "\n", "torch", ".", "FloatTensor", "(", "np", ".", "array", "(", "seq_vectors", ")", ")", ",", "\n", "torch", ".", "tensor", "(", "target_vector", ")", ",", "\n", "len", "(", "seq_vectors", ")", ",", "\n", ")", "\n", "for", "seq_vectors", ",", "target_vector", "in", "sorted_batch", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.converter.data_padding._convert_bpemb_sequence_to_tensor": [[221, 237], ["sorted", "zip", "len", "torch.tensor", "torch.tensor", "len", "numpy.array"], "function", ["None"], ["", "def", "_convert_bpemb_sequence_to_tensor", "(", "batch", ")", ":", "\n", "    ", "\"\"\"\n    Sort and convert a BPEmb sequence into a tensor with target element\n    \"\"\"", "\n", "sorted_batch", "=", "sorted", "(", "batch", ",", "key", "=", "lambda", "x", ":", "len", "(", "x", "[", "0", "]", "[", "1", "]", ")", ",", "reverse", "=", "True", ")", "\n", "\n", "# We convert into np.array before as per PyTorch optimization recommendation", "\n", "return", "zip", "(", "\n", "*", "[", "\n", "(", "\n", "torch", ".", "tensor", "(", "np", ".", "array", "(", "vectors", ")", ")", ",", "\n", "word_decomposition_len", ",", "\n", "torch", ".", "tensor", "(", "target_vectors", ")", ",", "\n", "len", "(", "vectors", ")", ",", "\n", ")", "\n", "for", "(", "vectors", ",", "word_decomposition_len", ")", ",", "target_vectors", "in", "sorted_batch", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.converter.target_converter.TagsConverter.__init__": [[13, 16], ["tags_to_idx.items"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "tags_to_idx", ":", "Dict", ")", "->", "None", ":", "\n", "        ", "self", ".", "tags_to_idx", "=", "tags_to_idx", "\n", "self", ".", "idx_to_tags", "=", "{", "v", ":", "k", "for", "k", ",", "v", "in", "tags_to_idx", ".", "items", "(", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.converter.target_converter.TagsConverter.__call__": [[17, 24], ["isinstance"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "key", ":", "Union", "[", "str", ",", "int", "]", ")", "->", "int", ":", "\n", "        ", "\"\"\"\n        If str convert from a tag to idx and if int convert from a idx to a tag using the convert table.\n        \"\"\"", "\n", "if", "isinstance", "(", "key", ",", "str", ")", ":", "\n", "            ", "return", "self", ".", "tags_to_idx", "[", "key", "]", "\n", "", "return", "self", ".", "idx_to_tags", "[", "key", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.converter.target_converter.TagsConverter.dim": [[25, 28], ["len"], "methods", ["None"], ["", "@", "property", "\n", "def", "dim", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "tags_to_idx", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.converter.data_transform.DataTransform.__init__": [[29, 42], ["NotImplementedError"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "vectorizer", ":", "TrainVectorizer", ",", "model_type", ":", "str", ")", ":", "\n", "        ", "self", ".", "vectorizer", "=", "vectorizer", "\n", "if", "\"fasttext\"", "in", "model_type", "and", "\"light\"", "not", "in", "model_type", ":", "\n", "            ", "self", ".", "teacher_forcing_data_padding_fn", "=", "fasttext_data_padding_teacher_forcing", "\n", "self", ".", "output_transform_data_padding_fn", "=", "fasttext_data_padding_with_target", "\n", "", "elif", "\"bpemb\"", "in", "model_type", ":", "\n", "            ", "self", ".", "teacher_forcing_data_padding_fn", "=", "bpemb_data_padding_teacher_forcing", "\n", "self", ".", "output_transform_data_padding_fn", "=", "bpemb_data_padding_with_target", "\n", "", "else", ":", "\n", "# Note that we don't have lightest here since lightest is fasttext-light (magnitude) and we cannot train", "\n", "# with that model type (see doc note).", "\n", "            ", "raise", "NotImplementedError", "(", "\n", "f\"There is no {model_type} network implemented. Value should be: \"", "\n", "f\"fasttext, bpemb or their attention variant.\"", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.converter.data_transform.DataTransform.teacher_forcing_transform": [[45, 52], ["data_transform.DataTransform.vectorizer", "data_transform.DataTransform.teacher_forcing_data_padding_fn"], "methods", ["None"], ["", "", "def", "teacher_forcing_transform", "(", "self", ",", "batch_pairs", ":", "Tuple", ")", "->", "Tuple", ":", "\n", "        ", "\"\"\"\n        Apply a teacher forcing transform (into tensor) to a batch of pairs (address, target).\n        \"\"\"", "\n", "vectorize_batch_pairs", "=", "self", ".", "vectorizer", "(", "batch_pairs", ")", "\n", "\n", "return", "self", ".", "teacher_forcing_data_padding_fn", "(", "vectorize_batch_pairs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.converter.data_transform.DataTransform.output_transform": [[53, 60], ["data_transform.DataTransform.vectorizer", "data_transform.DataTransform.output_transform_data_padding_fn"], "methods", ["None"], ["", "def", "output_transform", "(", "self", ",", "batch_pairs", ":", "Tuple", ")", "->", "Tuple", ":", "\n", "        ", "\"\"\"\n        Apply a transform (into tensor) to a batch of pairs (address, target).\n        \"\"\"", "\n", "vectorize_batch_pairs", "=", "self", ".", "vectorizer", "(", "batch_pairs", ")", "\n", "\n", "return", "self", ".", "output_transform_data_padding_fn", "(", "vectorize_batch_pairs", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.converter.test_data_transform.DataTransformTest.setUp": [[15, 21], ["unittest.mock.MagicMock"], "methods", ["None"], ["    ", "def", "setUp", "(", "self", ")", "->", "None", ":", "\n", "        ", "self", ".", "train_vectorizer_mock", "=", "MagicMock", "(", ")", "\n", "self", ".", "a_fasttext_model_type", "=", "\"fasttext\"", "\n", "self", ".", "a_bpemb_model_type", "=", "\"bpemb\"", "\n", "self", ".", "a_fasttext_light_model_type", "=", "\"fasttext-light\"", "\n", "self", ".", "an_attention_model", "=", "\"fasttextAttention\"", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.converter.test_data_transform.DataTransformTest.test_whenInstantiateAFastTextDataTransform_thenParametersAreOk": [[22, 32], ["deepparse.converter.DataTransform", "test_data_transform.DataTransformTest.assertIs", "test_data_transform.DataTransformTest.assertIs"], "methods", ["None"], ["", "def", "test_whenInstantiateAFastTextDataTransform_thenParametersAreOk", "(", "self", ")", ":", "\n", "        ", "data_transform", "=", "DataTransform", "(", "self", ".", "train_vectorizer_mock", ",", "self", ".", "a_fasttext_model_type", ")", "\n", "\n", "# teacher forcing padding test", "\n", "expected", "=", "fasttext_data_padding_teacher_forcing", "\n", "self", ".", "assertIs", "(", "expected", ",", "data_transform", ".", "teacher_forcing_data_padding_fn", ")", "\n", "\n", "# output transform padding test", "\n", "expected", "=", "fasttext_data_padding_with_target", "\n", "self", ".", "assertIs", "(", "expected", ",", "data_transform", ".", "output_transform_data_padding_fn", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.converter.test_data_transform.DataTransformTest.test_whenInstantiateABPEmbDataTransform_thenParametersAreOk": [[33, 43], ["deepparse.converter.DataTransform", "test_data_transform.DataTransformTest.assertIs", "test_data_transform.DataTransformTest.assertIs"], "methods", ["None"], ["", "def", "test_whenInstantiateABPEmbDataTransform_thenParametersAreOk", "(", "self", ")", ":", "\n", "        ", "data_transform", "=", "DataTransform", "(", "self", ".", "train_vectorizer_mock", ",", "self", ".", "a_bpemb_model_type", ")", "\n", "\n", "# teacher forcing padding test", "\n", "expected", "=", "bpemb_data_padding_teacher_forcing", "\n", "self", ".", "assertIs", "(", "expected", ",", "data_transform", ".", "teacher_forcing_data_padding_fn", ")", "\n", "\n", "# output transform padding test", "\n", "expected", "=", "bpemb_data_padding_with_target", "\n", "self", ".", "assertIs", "(", "expected", ",", "data_transform", ".", "output_transform_data_padding_fn", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.converter.test_data_transform.DataTransformTest.test_whenInstantiateAFasttextLightDataTransform_thenRaiseError": [[44, 47], ["test_data_transform.DataTransformTest.assertRaises", "deepparse.converter.DataTransform"], "methods", ["None"], ["", "def", "test_whenInstantiateAFasttextLightDataTransform_thenRaiseError", "(", "self", ")", ":", "\n", "        ", "with", "self", ".", "assertRaises", "(", "NotImplementedError", ")", ":", "\n", "            ", "_", "=", "DataTransform", "(", "self", ".", "train_vectorizer_mock", ",", "self", ".", "a_fasttext_light_model_type", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.converter.test_data_transform.DataTransformTest.test_givenAFasttextDataTransform_whenTeacherForcingTransform_thenComponentsAreCall": [[48, 61], ["unittest.mock.patch", "deepparse.converter.DataTransform", "unittest.mock.MagicMock", "deepparse.converter.DataTransform.teacher_forcing_transform", "test_data_transform.DataTransformTest.train_vectorizer_mock.assert_has_calls", "teacher_forcing_mock.assert_has_calls", "unittest.mock.call", "unittest.mock.call", "test_data_transform.DataTransformTest.train_vectorizer_mock"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.converter.data_transform.DataTransform.teacher_forcing_transform"], ["", "", "@", "patch", "(", "\"deepparse.converter.data_transform.fasttext_data_padding_teacher_forcing\"", ")", "\n", "def", "test_givenAFasttextDataTransform_whenTeacherForcingTransform_thenComponentsAreCall", "(", "self", ",", "teacher_forcing_mock", ")", ":", "\n", "        ", "data_transform", "=", "DataTransform", "(", "self", ".", "train_vectorizer_mock", ",", "self", ".", "a_fasttext_model_type", ")", "\n", "\n", "batch_pairs_mock", "=", "MagicMock", "(", ")", "\n", "\n", "data_transform", ".", "teacher_forcing_transform", "(", "batch_pairs_mock", ")", "\n", "\n", "train_vectorizer_call", "=", "[", "call", "(", "batch_pairs_mock", ")", "]", "\n", "self", ".", "train_vectorizer_mock", ".", "assert_has_calls", "(", "train_vectorizer_call", ")", "\n", "\n", "train_vectorizer_call", "=", "[", "call", "(", "self", ".", "train_vectorizer_mock", "(", ")", ")", "]", "\n", "teacher_forcing_mock", ".", "assert_has_calls", "(", "train_vectorizer_call", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.converter.test_data_transform.DataTransformTest.test_givenABPEmbDataTransform_whenTeacherForcingTransform_thenComponentsAreCall": [[62, 75], ["unittest.mock.patch", "deepparse.converter.DataTransform", "unittest.mock.MagicMock", "deepparse.converter.DataTransform.teacher_forcing_transform", "test_data_transform.DataTransformTest.train_vectorizer_mock.assert_has_calls", "teacher_forcing_mock.assert_has_calls", "unittest.mock.call", "unittest.mock.call", "test_data_transform.DataTransformTest.train_vectorizer_mock"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.converter.data_transform.DataTransform.teacher_forcing_transform"], ["", "@", "patch", "(", "\"deepparse.converter.data_transform.bpemb_data_padding_teacher_forcing\"", ")", "\n", "def", "test_givenABPEmbDataTransform_whenTeacherForcingTransform_thenComponentsAreCall", "(", "self", ",", "teacher_forcing_mock", ")", ":", "\n", "        ", "data_transform", "=", "DataTransform", "(", "self", ".", "train_vectorizer_mock", ",", "self", ".", "a_bpemb_model_type", ")", "\n", "\n", "batch_pairs_mock", "=", "MagicMock", "(", ")", "\n", "\n", "data_transform", ".", "teacher_forcing_transform", "(", "batch_pairs_mock", ")", "\n", "\n", "train_vectorizer_call", "=", "[", "call", "(", "batch_pairs_mock", ")", "]", "\n", "self", ".", "train_vectorizer_mock", ".", "assert_has_calls", "(", "train_vectorizer_call", ")", "\n", "\n", "train_vectorizer_call", "=", "[", "call", "(", "self", ".", "train_vectorizer_mock", "(", ")", ")", "]", "\n", "teacher_forcing_mock", ".", "assert_has_calls", "(", "train_vectorizer_call", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.converter.test_data_transform.DataTransformTest.test_givenAFasttextDataTransform_whenOutputTransform_thenComponentsAreCall": [[76, 89], ["unittest.mock.patch", "deepparse.converter.DataTransform", "unittest.mock.MagicMock", "deepparse.converter.DataTransform.output_transform", "test_data_transform.DataTransformTest.train_vectorizer_mock.assert_has_calls", "output_transform_mock.assert_has_calls", "unittest.mock.call", "unittest.mock.call", "test_data_transform.DataTransformTest.train_vectorizer_mock"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.converter.data_transform.DataTransform.output_transform"], ["", "@", "patch", "(", "\"deepparse.converter.data_transform.fasttext_data_padding_with_target\"", ")", "\n", "def", "test_givenAFasttextDataTransform_whenOutputTransform_thenComponentsAreCall", "(", "self", ",", "output_transform_mock", ")", ":", "\n", "        ", "data_transform", "=", "DataTransform", "(", "self", ".", "train_vectorizer_mock", ",", "self", ".", "a_fasttext_model_type", ")", "\n", "\n", "batch_pairs_mock", "=", "MagicMock", "(", ")", "\n", "\n", "data_transform", ".", "output_transform", "(", "batch_pairs_mock", ")", "\n", "\n", "train_vectorizer_call", "=", "[", "call", "(", "batch_pairs_mock", ")", "]", "\n", "self", ".", "train_vectorizer_mock", ".", "assert_has_calls", "(", "train_vectorizer_call", ")", "\n", "\n", "train_vectorizer_call", "=", "[", "call", "(", "self", ".", "train_vectorizer_mock", "(", ")", ")", "]", "\n", "output_transform_mock", ".", "assert_has_calls", "(", "train_vectorizer_call", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.converter.test_data_transform.DataTransformTest.test_givenAFasttextAttDataTransform_whenOutputTransform_thenComponentsAreCall": [[90, 103], ["unittest.mock.patch", "deepparse.converter.DataTransform", "unittest.mock.MagicMock", "deepparse.converter.DataTransform.output_transform", "test_data_transform.DataTransformTest.train_vectorizer_mock.assert_has_calls", "output_transform_mock.assert_has_calls", "unittest.mock.call", "unittest.mock.call", "test_data_transform.DataTransformTest.train_vectorizer_mock"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.converter.data_transform.DataTransform.output_transform"], ["", "@", "patch", "(", "\"deepparse.converter.data_transform.fasttext_data_padding_with_target\"", ")", "\n", "def", "test_givenAFasttextAttDataTransform_whenOutputTransform_thenComponentsAreCall", "(", "self", ",", "output_transform_mock", ")", ":", "\n", "        ", "data_transform", "=", "DataTransform", "(", "self", ".", "train_vectorizer_mock", ",", "self", ".", "an_attention_model", ")", "\n", "\n", "batch_pairs_mock", "=", "MagicMock", "(", ")", "\n", "\n", "data_transform", ".", "output_transform", "(", "batch_pairs_mock", ")", "\n", "\n", "train_vectorizer_call", "=", "[", "call", "(", "batch_pairs_mock", ")", "]", "\n", "self", ".", "train_vectorizer_mock", ".", "assert_has_calls", "(", "train_vectorizer_call", ")", "\n", "\n", "train_vectorizer_call", "=", "[", "call", "(", "self", ".", "train_vectorizer_mock", "(", ")", ")", "]", "\n", "output_transform_mock", ".", "assert_has_calls", "(", "train_vectorizer_call", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.converter.test_data_transform.DataTransformTest.test_givenABPEmbDataTransform_whenOutputTransform_thenComponentsAreCall": [[104, 117], ["unittest.mock.patch", "deepparse.converter.DataTransform", "unittest.mock.MagicMock", "deepparse.converter.DataTransform.output_transform", "test_data_transform.DataTransformTest.train_vectorizer_mock.assert_has_calls", "output_transform_mock.assert_has_calls", "unittest.mock.call", "unittest.mock.call", "test_data_transform.DataTransformTest.train_vectorizer_mock"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.converter.data_transform.DataTransform.output_transform"], ["", "@", "patch", "(", "\"deepparse.converter.data_transform.bpemb_data_padding_with_target\"", ")", "\n", "def", "test_givenABPEmbDataTransform_whenOutputTransform_thenComponentsAreCall", "(", "self", ",", "output_transform_mock", ")", ":", "\n", "        ", "data_transform", "=", "DataTransform", "(", "self", ".", "train_vectorizer_mock", ",", "self", ".", "a_bpemb_model_type", ")", "\n", "\n", "batch_pairs_mock", "=", "MagicMock", "(", ")", "\n", "\n", "data_transform", ".", "output_transform", "(", "batch_pairs_mock", ")", "\n", "\n", "train_vectorizer_call", "=", "[", "call", "(", "batch_pairs_mock", ")", "]", "\n", "self", ".", "train_vectorizer_mock", ".", "assert_has_calls", "(", "train_vectorizer_call", ")", "\n", "\n", "train_vectorizer_call", "=", "[", "call", "(", "self", ".", "train_vectorizer_mock", "(", ")", ")", "]", "\n", "output_transform_mock", ".", "assert_has_calls", "(", "train_vectorizer_call", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.converter.test_data_padding.DataPaddingTest.setUpClass": [[19, 36], ["None"], "methods", ["None"], ["    ", "@", "classmethod", "\n", "def", "setUpClass", "(", "cls", ")", ":", "\n", "        ", "cls", ".", "a_number_of_sequences", "=", "5", "\n", "cls", ".", "a_max_length", "=", "10", "\n", "\n", "cls", ".", "a_non_padded_word_embedding_batch_length_list", "=", "[", "]", "\n", "cls", ".", "a_non_padded_word_embedding_batch", "=", "[", "]", "\n", "cls", ".", "a_fasttext_padded_batch", "=", "[", "]", "\n", "\n", "cls", ".", "a_non_padded_subword_embedding_batch_lenght_list", "=", "[", "]", "\n", "cls", ".", "a_non_padded_subword_embedding_batch_decomposition_lenght_list", "=", "[", "]", "\n", "cls", ".", "a_non_padded_subword_embedding_batch", "=", "[", "]", "\n", "cls", ".", "a_bpemb_padded_batch", "=", "[", "]", "\n", "\n", "cls", ".", "a_training_non_padded_word_embedding_batch", "=", "[", "]", "\n", "cls", ".", "a_training_non_padded_subword_embedding_batch", "=", "[", "]", "\n", "cls", ".", "a_padded_target_tensor", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.converter.test_data_padding.DataPaddingTest.setUp": [[37, 123], ["torch.tensor", "torch.FloatTensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["None"], ["", "def", "setUp", "(", "self", ")", ":", "\n", "        ", "self", ".", "a_non_padded_word_embedding_batch_length_list", "=", "torch", ".", "tensor", "(", "[", "3", ",", "2", ",", "1", "]", ")", "\n", "self", ".", "a_non_padded_word_embedding_batch", "=", "[", "\n", "[", "[", "1", ",", "1", "]", ",", "[", "1", ",", "1", "]", ",", "[", "1", ",", "1", "]", "]", ",", "\n", "[", "[", "1", ",", "1", "]", ",", "[", "1", ",", "1", "]", "]", ",", "\n", "[", "[", "1", ",", "1", "]", "]", ",", "\n", "]", "\n", "self", ".", "a_fasttext_padded_batch", "=", "torch", ".", "FloatTensor", "(", "\n", "[", "\n", "[", "[", "1", ",", "1", "]", ",", "[", "1", ",", "1", "]", ",", "[", "1", ",", "1", "]", "]", ",", "\n", "[", "[", "1", ",", "1", "]", ",", "[", "1", ",", "1", "]", ",", "[", "-", "100", ",", "-", "100", "]", "]", ",", "\n", "[", "[", "1", ",", "1", "]", ",", "[", "-", "100", ",", "-", "100", "]", ",", "[", "-", "100", ",", "-", "100", "]", "]", ",", "\n", "]", "\n", ")", "\n", "\n", "self", ".", "a_non_padded_subword_embedding_batch_lenght_list", "=", "torch", ".", "tensor", "(", "[", "3", ",", "2", ",", "1", "]", ")", "\n", "self", ".", "a_non_padded_subword_embedding_batch", "=", "[", "\n", "(", "\n", "[", "\n", "[", "[", "1", ",", "1", "]", ",", "[", "1", ",", "1", "]", ",", "[", "-", "1", ",", "-", "1", "]", "]", ",", "\n", "[", "[", "1", ",", "1", "]", ",", "[", "1", ",", "1", "]", ",", "[", "1", ",", "1", "]", "]", ",", "\n", "[", "[", "1", ",", "1", "]", ",", "[", "-", "1", ",", "-", "1", "]", ",", "[", "-", "1", ",", "-", "1", "]", "]", ",", "\n", "]", ",", "\n", "[", "2", ",", "3", ",", "1", "]", ",", "\n", ")", ",", "\n", "(", "[", "[", "[", "1", ",", "1", "]", ",", "[", "1", ",", "1", "]", ",", "[", "-", "1", ",", "-", "1", "]", "]", ",", "[", "[", "1", ",", "1", "]", ",", "[", "1", ",", "1", "]", ",", "[", "-", "1", ",", "-", "1", "]", "]", "]", ",", "[", "2", ",", "2", "]", ")", ",", "\n", "(", "[", "[", "[", "1", ",", "1", "]", ",", "[", "1", ",", "1", "]", ",", "[", "1", ",", "1", "]", "]", "]", ",", "[", "3", "]", ")", ",", "\n", "]", "\n", "self", ".", "a_bpemb_padded_batch", "=", "torch", ".", "tensor", "(", "\n", "[", "\n", "[", "\n", "[", "[", "1", ",", "1", "]", ",", "[", "1", ",", "1", "]", ",", "[", "-", "1", ",", "-", "1", "]", "]", ",", "\n", "[", "[", "1", ",", "1", "]", ",", "[", "1", ",", "1", "]", ",", "[", "1", ",", "1", "]", "]", ",", "\n", "[", "[", "1", ",", "1", "]", ",", "[", "-", "1", ",", "-", "1", "]", ",", "[", "-", "1", ",", "-", "1", "]", "]", ",", "\n", "]", ",", "\n", "[", "\n", "[", "[", "1", ",", "1", "]", ",", "[", "1", ",", "1", "]", ",", "[", "-", "1", ",", "-", "1", "]", "]", ",", "\n", "[", "[", "1", ",", "1", "]", ",", "[", "1", ",", "1", "]", ",", "[", "-", "1", ",", "-", "1", "]", "]", ",", "\n", "[", "[", "-", "100", ",", "-", "100", "]", ",", "[", "-", "100", ",", "-", "100", "]", ",", "[", "-", "100", ",", "-", "100", "]", "]", ",", "\n", "]", ",", "\n", "[", "\n", "[", "[", "1", ",", "1", "]", ",", "[", "1", ",", "1", "]", ",", "[", "1", ",", "1", "]", "]", ",", "\n", "[", "[", "-", "100", ",", "-", "100", "]", ",", "[", "-", "100", ",", "-", "100", "]", ",", "[", "-", "100", ",", "-", "100", "]", "]", ",", "\n", "[", "[", "-", "100", ",", "-", "100", "]", ",", "[", "-", "100", ",", "-", "100", "]", ",", "[", "-", "100", ",", "-", "100", "]", "]", ",", "\n", "]", ",", "\n", "]", "\n", ")", "\n", "self", ".", "a_non_padded_subword_embedding_batch_decomposition_lenght_list", "=", "[", "\n", "[", "2", ",", "3", ",", "1", "]", ",", "\n", "[", "2", ",", "2", ",", "1", "]", ",", "\n", "[", "3", ",", "1", ",", "1", "]", ",", "\n", "]", "\n", "\n", "self", ".", "a_training_non_padded_word_embedding_batch", "=", "[", "\n", "(", "[", "[", "1", ",", "1", "]", ",", "[", "1", ",", "1", "]", ",", "[", "1", ",", "1", "]", "]", ",", "[", "0", ",", "3", ",", "5", "]", ")", ",", "\n", "(", "[", "[", "1", ",", "1", "]", ",", "[", "1", ",", "1", "]", "]", ",", "[", "4", ",", "7", "]", ")", ",", "\n", "(", "[", "[", "1", ",", "1", "]", "]", ",", "[", "8", "]", ")", ",", "\n", "]", "\n", "\n", "self", ".", "a_training_non_padded_subword_embedding_batch", "=", "[", "\n", "(", "\n", "(", "\n", "[", "\n", "[", "[", "1", ",", "1", "]", ",", "[", "1", ",", "1", "]", ",", "[", "-", "1", ",", "-", "1", "]", "]", ",", "\n", "[", "[", "1", ",", "1", "]", ",", "[", "1", ",", "1", "]", ",", "[", "1", ",", "1", "]", "]", ",", "\n", "[", "[", "1", ",", "1", "]", ",", "[", "-", "1", ",", "-", "1", "]", ",", "[", "-", "1", ",", "-", "1", "]", "]", ",", "\n", "]", ",", "\n", "[", "2", ",", "3", ",", "1", "]", ",", "\n", ")", ",", "\n", "[", "0", ",", "3", ",", "5", "]", ",", "\n", ")", ",", "\n", "(", "\n", "(", "[", "[", "[", "1", ",", "1", "]", ",", "[", "1", ",", "1", "]", ",", "[", "-", "1", ",", "-", "1", "]", "]", ",", "[", "[", "1", ",", "1", "]", ",", "[", "1", ",", "1", "]", ",", "[", "-", "1", ",", "-", "1", "]", "]", "]", ",", "[", "2", ",", "2", "]", ")", ",", "\n", "[", "4", ",", "7", "]", ",", "\n", ")", ",", "\n", "(", "(", "[", "[", "[", "1", ",", "1", "]", ",", "[", "1", ",", "1", "]", ",", "[", "1", ",", "1", "]", "]", "]", ",", "[", "3", "]", ")", ",", "[", "8", "]", ")", ",", "\n", "]", "\n", "\n", "self", ".", "a_padded_target_tensor", "=", "torch", ".", "tensor", "(", "[", "[", "0", ",", "3", ",", "5", "]", ",", "[", "4", ",", "7", ",", "-", "100", "]", ",", "[", "8", ",", "-", "100", ",", "-", "100", "]", "]", ")", "\n", "\n", "self", ".", "fasttext_data_padding", "=", "fasttext_data_padding", "\n", "self", ".", "bpemb_data_padding", "=", "bpemb_data_padding", "\n", "self", ".", "fasttext_data_padding_with_target", "=", "fasttext_data_padding_with_target", "\n", "self", ".", "bpemb_data_padding_with_target", "=", "bpemb_data_padding_with_target", "\n", "self", ".", "fasttext_data_padding_teacher_Forcing", "=", "fasttext_data_padding_teacher_forcing", "\n", "self", ".", "bpemb_data_padding_teacher_forcing", "=", "bpemb_data_padding_teacher_forcing", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.converter.test_data_padding.DataPaddingTest.test_givenbatch_whenfasttextpadding_thenshouldreturnrightlengths": [[124, 128], ["test_data_padding.DataPaddingTest.fasttext_data_padding", "test_data_padding.DataPaddingTest.assertTrue", "torch.all", "lengths.eq"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.converter.data_padding.fasttext_data_padding"], ["", "def", "test_givenbatch_whenfasttextpadding_thenshouldreturnrightlengths", "(", "self", ")", ":", "\n", "        ", "_", ",", "lengths", "=", "self", ".", "fasttext_data_padding", "(", "self", ".", "a_non_padded_word_embedding_batch", ")", "\n", "\n", "self", ".", "assertTrue", "(", "torch", ".", "all", "(", "lengths", ".", "eq", "(", "self", ".", "a_non_padded_word_embedding_batch_length_list", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.converter.test_data_padding.DataPaddingTest.test_whenfasttextpadding_thenshouldreturnbatchastensor": [[129, 133], ["test_data_padding.DataPaddingTest.fasttext_data_padding", "test_data_padding.DataPaddingTest.assertIsInstance"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.converter.data_padding.fasttext_data_padding"], ["", "def", "test_whenfasttextpadding_thenshouldreturnbatchastensor", "(", "self", ")", ":", "\n", "        ", "padded_batch", ",", "_", "=", "self", ".", "fasttext_data_padding", "(", "self", ".", "a_non_padded_word_embedding_batch", ")", "\n", "\n", "self", ".", "assertIsInstance", "(", "padded_batch", ",", "torch", ".", "Tensor", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.converter.test_data_padding.DataPaddingTest.test_givenbatch_whenfasttextpadding_thenshoulddorightpadding": [[134, 138], ["test_data_padding.DataPaddingTest.fasttext_data_padding", "test_data_padding.DataPaddingTest.assertTrue", "torch.all", "padded_batch.eq"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.converter.data_padding.fasttext_data_padding"], ["", "def", "test_givenbatch_whenfasttextpadding_thenshoulddorightpadding", "(", "self", ")", ":", "\n", "        ", "padded_batch", ",", "_", "=", "self", ".", "fasttext_data_padding", "(", "self", ".", "a_non_padded_word_embedding_batch", ")", "\n", "\n", "self", ".", "assertTrue", "(", "torch", ".", "all", "(", "padded_batch", ".", "eq", "(", "self", ".", "a_fasttext_padded_batch", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.converter.test_data_padding.DataPaddingTest.test_givenbatch_whenbpembpadding_thenshouldreturnrightlengths": [[139, 143], ["test_data_padding.DataPaddingTest.bpemb_data_padding", "test_data_padding.DataPaddingTest.assertTrue", "torch.all", "lengths.eq"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.converter.data_padding.bpemb_data_padding"], ["", "def", "test_givenbatch_whenbpembpadding_thenshouldreturnrightlengths", "(", "self", ")", ":", "\n", "        ", "_", ",", "_", ",", "lengths", "=", "self", ".", "bpemb_data_padding", "(", "self", ".", "a_non_padded_subword_embedding_batch", ")", "\n", "\n", "self", ".", "assertTrue", "(", "torch", ".", "all", "(", "lengths", ".", "eq", "(", "self", ".", "a_non_padded_subword_embedding_batch_lenght_list", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.converter.test_data_padding.DataPaddingTest.test_givenbatch_whenbpembpadding_thenshouldreturnrightdecomposition_lengths": [[144, 152], ["test_data_padding.DataPaddingTest.bpemb_data_padding", "test_data_padding.DataPaddingTest.assertEqual"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.converter.data_padding.bpemb_data_padding"], ["", "def", "test_givenbatch_whenbpembpadding_thenshouldreturnrightdecomposition_lengths", "(", "\n", "self", ",", "\n", ")", ":", "\n", "        ", "_", ",", "decomposition_lengths", ",", "_", "=", "self", ".", "bpemb_data_padding", "(", "self", ".", "a_non_padded_subword_embedding_batch", ")", "\n", "\n", "self", ".", "assertEqual", "(", "\n", "decomposition_lengths", ",", "\n", "self", ".", "a_non_padded_subword_embedding_batch_decomposition_lenght_list", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.converter.test_data_padding.DataPaddingTest.test_whenbpembpadding_thenshouldreturnbatchastensor": [[154, 158], ["test_data_padding.DataPaddingTest.bpemb_data_padding", "test_data_padding.DataPaddingTest.assertIsInstance"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.converter.data_padding.bpemb_data_padding"], ["", "def", "test_whenbpembpadding_thenshouldreturnbatchastensor", "(", "self", ")", ":", "\n", "        ", "padded_batch", ",", "_", ",", "_", "=", "self", ".", "bpemb_data_padding", "(", "self", ".", "a_non_padded_subword_embedding_batch", ")", "\n", "\n", "self", ".", "assertIsInstance", "(", "padded_batch", ",", "torch", ".", "Tensor", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.converter.test_data_padding.DataPaddingTest.test_givenbatch_whenbpembpadding_thenshoulddorightpadding": [[159, 163], ["test_data_padding.DataPaddingTest.bpemb_data_padding", "test_data_padding.DataPaddingTest.assertTrue", "torch.all", "padded_batch.eq"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.converter.data_padding.bpemb_data_padding"], ["", "def", "test_givenbatch_whenbpembpadding_thenshoulddorightpadding", "(", "self", ")", ":", "\n", "        ", "padded_batch", ",", "_", ",", "_", "=", "self", ".", "bpemb_data_padding", "(", "self", ".", "a_non_padded_subword_embedding_batch", ")", "\n", "\n", "self", ".", "assertTrue", "(", "torch", ".", "all", "(", "padded_batch", ".", "eq", "(", "self", ".", "a_bpemb_padded_batch", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.converter.test_data_padding.DataPaddingTest.test_givenBatch_whenFasttextPaddingWithTarget_thenShouldReturnRightLengths": [[164, 170], ["test_data_padding.DataPaddingTest.fasttext_data_padding_with_target", "test_data_padding.DataPaddingTest.assertTrue", "torch.all", "lengths.eq"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.converter.data_padding.fasttext_data_padding_with_target"], ["", "def", "test_givenBatch_whenFasttextPaddingWithTarget_thenShouldReturnRightLengths", "(", "\n", "self", ",", "\n", ")", ":", "\n", "        ", "(", "_", ",", "lengths", ")", ",", "_", "=", "self", ".", "fasttext_data_padding_with_target", "(", "self", ".", "a_training_non_padded_word_embedding_batch", ")", "\n", "\n", "self", ".", "assertTrue", "(", "torch", ".", "all", "(", "lengths", ".", "eq", "(", "self", ".", "a_non_padded_word_embedding_batch_length_list", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.converter.test_data_padding.DataPaddingTest.test_givenBatch_whenFasttextPaddingWithTarget_thenShouldReturnBatchAsTensor": [[171, 177], ["test_data_padding.DataPaddingTest.fasttext_data_padding_with_target", "test_data_padding.DataPaddingTest.assertIsInstance"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.converter.data_padding.fasttext_data_padding_with_target"], ["", "def", "test_givenBatch_whenFasttextPaddingWithTarget_thenShouldReturnBatchAsTensor", "(", "\n", "self", ",", "\n", ")", ":", "\n", "        ", "(", "padded_batch", ",", "_", ")", ",", "_", "=", "self", ".", "fasttext_data_padding_with_target", "(", "self", ".", "a_training_non_padded_word_embedding_batch", ")", "\n", "\n", "self", ".", "assertIsInstance", "(", "padded_batch", ",", "torch", ".", "Tensor", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.converter.test_data_padding.DataPaddingTest.test_givenBatch_whenFasttextPaddingWithTarget_thenShouldPerformRightPadding": [[178, 184], ["test_data_padding.DataPaddingTest.fasttext_data_padding_with_target", "test_data_padding.DataPaddingTest.assertTrue", "torch.all", "padded_batch.eq"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.converter.data_padding.fasttext_data_padding_with_target"], ["", "def", "test_givenBatch_whenFasttextPaddingWithTarget_thenShouldPerformRightPadding", "(", "\n", "self", ",", "\n", ")", ":", "\n", "        ", "(", "padded_batch", ",", "_", ")", ",", "_", "=", "self", ".", "fasttext_data_padding_with_target", "(", "self", ".", "a_training_non_padded_word_embedding_batch", ")", "\n", "\n", "self", ".", "assertTrue", "(", "torch", ".", "all", "(", "padded_batch", ".", "eq", "(", "self", ".", "a_fasttext_padded_batch", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.converter.test_data_padding.DataPaddingTest.test_givenBatch_whenFasttextPaddingWithTarget_thenShouldReturnPaddedTarget": [[185, 191], ["test_data_padding.DataPaddingTest.fasttext_data_padding_with_target", "test_data_padding.DataPaddingTest.assertTrue", "torch.all", "target_tensor.eq"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.converter.data_padding.fasttext_data_padding_with_target"], ["", "def", "test_givenBatch_whenFasttextPaddingWithTarget_thenShouldReturnPaddedTarget", "(", "\n", "self", ",", "\n", ")", ":", "\n", "        ", "(", "_", ",", "_", ")", ",", "target_tensor", "=", "self", ".", "fasttext_data_padding_with_target", "(", "self", ".", "a_training_non_padded_word_embedding_batch", ")", "\n", "\n", "self", ".", "assertTrue", "(", "torch", ".", "all", "(", "target_tensor", ".", "eq", "(", "self", ".", "a_padded_target_tensor", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.converter.test_data_padding.DataPaddingTest.test_givenBatch_whenBpembDataPaddingWithTarget_thenShouldReturnRightLengths": [[192, 198], ["test_data_padding.DataPaddingTest.bpemb_data_padding_with_target", "test_data_padding.DataPaddingTest.assertTrue", "torch.all", "lengths.eq"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.converter.data_padding.bpemb_data_padding_with_target"], ["", "def", "test_givenBatch_whenBpembDataPaddingWithTarget_thenShouldReturnRightLengths", "(", "\n", "self", ",", "\n", ")", ":", "\n", "        ", "(", "_", ",", "_", ",", "lengths", ")", ",", "_", "=", "self", ".", "bpemb_data_padding_with_target", "(", "self", ".", "a_training_non_padded_subword_embedding_batch", ")", "\n", "\n", "self", ".", "assertTrue", "(", "torch", ".", "all", "(", "lengths", ".", "eq", "(", "self", ".", "a_non_padded_subword_embedding_batch_lenght_list", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.converter.test_data_padding.DataPaddingTest.test_givenBatch_whenBpembDataPaddingWithTarget_thenShouldReturnBatchAsTensor": [[199, 207], ["test_data_padding.DataPaddingTest.bpemb_data_padding_with_target", "test_data_padding.DataPaddingTest.assertIsInstance"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.converter.data_padding.bpemb_data_padding_with_target"], ["", "def", "test_givenBatch_whenBpembDataPaddingWithTarget_thenShouldReturnBatchAsTensor", "(", "\n", "self", ",", "\n", ")", ":", "\n", "        ", "(", "padded_batch", ",", "_", ",", "_", ")", ",", "_", "=", "self", ".", "bpemb_data_padding_with_target", "(", "\n", "self", ".", "a_training_non_padded_subword_embedding_batch", "\n", ")", "\n", "\n", "self", ".", "assertIsInstance", "(", "padded_batch", ",", "torch", ".", "Tensor", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.converter.test_data_padding.DataPaddingTest.test_givenBatch_whenBpembDataPaddingWithTarget_thenShouldPerformRightPadding": [[208, 216], ["test_data_padding.DataPaddingTest.bpemb_data_padding_with_target", "test_data_padding.DataPaddingTest.assertTrue", "torch.all", "padded_batch.eq"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.converter.data_padding.bpemb_data_padding_with_target"], ["", "def", "test_givenBatch_whenBpembDataPaddingWithTarget_thenShouldPerformRightPadding", "(", "\n", "self", ",", "\n", ")", ":", "\n", "        ", "(", "padded_batch", ",", "_", ",", "_", ")", ",", "_", "=", "self", ".", "bpemb_data_padding_with_target", "(", "\n", "self", ".", "a_training_non_padded_subword_embedding_batch", "\n", ")", "\n", "\n", "self", ".", "assertTrue", "(", "torch", ".", "all", "(", "padded_batch", ".", "eq", "(", "self", ".", "a_bpemb_padded_batch", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.converter.test_data_padding.DataPaddingTest.test_givenBatch_whenBpembDataPaddingWithTarget_thenShouldReturnRightDecompositionLengths": [[217, 227], ["test_data_padding.DataPaddingTest.bpemb_data_padding_with_target", "test_data_padding.DataPaddingTest.assertEqual"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.converter.data_padding.bpemb_data_padding_with_target"], ["", "def", "test_givenBatch_whenBpembDataPaddingWithTarget_thenShouldReturnRightDecompositionLengths", "(", "\n", "self", ",", "\n", ")", ":", "\n", "        ", "(", "_", ",", "decomposition_lengths", ",", "_", ")", ",", "_", "=", "self", ".", "bpemb_data_padding_with_target", "(", "\n", "self", ".", "a_training_non_padded_subword_embedding_batch", "\n", ")", "\n", "\n", "self", ".", "assertEqual", "(", "\n", "decomposition_lengths", ",", "\n", "self", ".", "a_non_padded_subword_embedding_batch_decomposition_lenght_list", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.converter.test_data_padding.DataPaddingTest.test_givenBatch_whenBpembDataPaddingWithTarget_thenShouldReturnPaddedTarget": [[229, 237], ["test_data_padding.DataPaddingTest.bpemb_data_padding_with_target", "test_data_padding.DataPaddingTest.assertTrue", "torch.all", "target_tensor.eq"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.converter.data_padding.bpemb_data_padding_with_target"], ["", "def", "test_givenBatch_whenBpembDataPaddingWithTarget_thenShouldReturnPaddedTarget", "(", "\n", "self", ",", "\n", ")", ":", "\n", "        ", "(", "_", ",", "_", ",", "_", ")", ",", "target_tensor", "=", "self", ".", "bpemb_data_padding_with_target", "(", "\n", "self", ".", "a_training_non_padded_subword_embedding_batch", "\n", ")", "\n", "\n", "self", ".", "assertTrue", "(", "torch", ".", "all", "(", "target_tensor", ".", "eq", "(", "self", ".", "a_padded_target_tensor", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.converter.test_data_padding.DataPaddingTest.test_givenBatch_whenFasttextPaddingTeacherForcing_thenShouldReturnRightLengths": [[238, 244], ["test_data_padding.DataPaddingTest.fasttext_data_padding_teacher_Forcing", "test_data_padding.DataPaddingTest.assertTrue", "torch.all", "lengths.eq"], "methods", ["None"], ["", "def", "test_givenBatch_whenFasttextPaddingTeacherForcing_thenShouldReturnRightLengths", "(", "\n", "self", ",", "\n", ")", ":", "\n", "        ", "(", "_", ",", "lengths", ",", "_", ")", ",", "_", "=", "self", ".", "fasttext_data_padding_teacher_Forcing", "(", "self", ".", "a_training_non_padded_word_embedding_batch", ")", "\n", "\n", "self", ".", "assertTrue", "(", "torch", ".", "all", "(", "lengths", ".", "eq", "(", "self", ".", "a_non_padded_word_embedding_batch_length_list", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.converter.test_data_padding.DataPaddingTest.test_givenBatch_whenFasttextPaddingTeacherForcing_thenShouldReturnBatchAsTensor": [[245, 253], ["test_data_padding.DataPaddingTest.fasttext_data_padding_teacher_Forcing", "test_data_padding.DataPaddingTest.assertIsInstance"], "methods", ["None"], ["", "def", "test_givenBatch_whenFasttextPaddingTeacherForcing_thenShouldReturnBatchAsTensor", "(", "\n", "self", ",", "\n", ")", ":", "\n", "        ", "(", "padded_batch", ",", "_", ",", "_", ")", ",", "_", "=", "self", ".", "fasttext_data_padding_teacher_Forcing", "(", "\n", "self", ".", "a_training_non_padded_word_embedding_batch", "\n", ")", "\n", "\n", "self", ".", "assertIsInstance", "(", "padded_batch", ",", "torch", ".", "Tensor", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.converter.test_data_padding.DataPaddingTest.test_givenBatch_whenFasttextPaddingTeacherForcing_thenShouldPerformRightPadding": [[254, 262], ["test_data_padding.DataPaddingTest.fasttext_data_padding_teacher_Forcing", "test_data_padding.DataPaddingTest.assertTrue", "torch.all", "padded_batch.eq"], "methods", ["None"], ["", "def", "test_givenBatch_whenFasttextPaddingTeacherForcing_thenShouldPerformRightPadding", "(", "\n", "self", ",", "\n", ")", ":", "\n", "        ", "(", "padded_batch", ",", "_", ",", "_", ")", ",", "_", "=", "self", ".", "fasttext_data_padding_teacher_Forcing", "(", "\n", "self", ".", "a_training_non_padded_word_embedding_batch", "\n", ")", "\n", "\n", "self", ".", "assertTrue", "(", "torch", ".", "all", "(", "padded_batch", ".", "eq", "(", "self", ".", "a_fasttext_padded_batch", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.converter.test_data_padding.DataPaddingTest.test_givenBatch_whenFasttextPaddingTeacherForcing_thenShouldReturnPaddedTarget": [[263, 271], ["test_data_padding.DataPaddingTest.fasttext_data_padding_teacher_Forcing", "test_data_padding.DataPaddingTest.assertTrue", "torch.all", "target_tensor.eq"], "methods", ["None"], ["", "def", "test_givenBatch_whenFasttextPaddingTeacherForcing_thenShouldReturnPaddedTarget", "(", "\n", "self", ",", "\n", ")", ":", "\n", "        ", "(", "_", ",", "_", ",", "_", ")", ",", "target_tensor", "=", "self", ".", "fasttext_data_padding_teacher_Forcing", "(", "\n", "self", ".", "a_training_non_padded_word_embedding_batch", "\n", ")", "\n", "\n", "self", ".", "assertTrue", "(", "torch", ".", "all", "(", "target_tensor", ".", "eq", "(", "self", ".", "a_padded_target_tensor", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.converter.test_data_padding.DataPaddingTest.test_givenBatch_whenFasttextPaddingTeacherForcing_thenShouldReturnPaddedTargetInBatch": [[272, 280], ["test_data_padding.DataPaddingTest.fasttext_data_padding_teacher_Forcing", "test_data_padding.DataPaddingTest.assertTrue", "torch.all", "target_tensor.eq"], "methods", ["None"], ["", "def", "test_givenBatch_whenFasttextPaddingTeacherForcing_thenShouldReturnPaddedTargetInBatch", "(", "\n", "self", ",", "\n", ")", ":", "\n", "        ", "(", "_", ",", "_", ",", "target_tensor", ")", ",", "_", "=", "self", ".", "fasttext_data_padding_teacher_Forcing", "(", "\n", "self", ".", "a_training_non_padded_word_embedding_batch", "\n", ")", "\n", "\n", "self", ".", "assertTrue", "(", "torch", ".", "all", "(", "target_tensor", ".", "eq", "(", "self", ".", "a_padded_target_tensor", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.converter.test_data_padding.DataPaddingTest.test_givenBatch_whenBpembDataPaddingTeacherForcing_thenShouldReturnRightLengths": [[281, 289], ["test_data_padding.DataPaddingTest.bpemb_data_padding_teacher_forcing", "test_data_padding.DataPaddingTest.assertTrue", "torch.all", "lengths.eq"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.converter.data_padding.bpemb_data_padding_teacher_forcing"], ["", "def", "test_givenBatch_whenBpembDataPaddingTeacherForcing_thenShouldReturnRightLengths", "(", "\n", "self", ",", "\n", ")", ":", "\n", "        ", "(", "_", ",", "_", ",", "lengths", ",", "_", ")", ",", "_", "=", "self", ".", "bpemb_data_padding_teacher_forcing", "(", "\n", "self", ".", "a_training_non_padded_subword_embedding_batch", "\n", ")", "\n", "\n", "self", ".", "assertTrue", "(", "torch", ".", "all", "(", "lengths", ".", "eq", "(", "self", ".", "a_non_padded_subword_embedding_batch_lenght_list", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.converter.test_data_padding.DataPaddingTest.test_givenBatch_whenBpembDataPaddingTeacherForcing_thenShouldReturnBatchAsTensor": [[290, 298], ["test_data_padding.DataPaddingTest.bpemb_data_padding_teacher_forcing", "test_data_padding.DataPaddingTest.assertIsInstance"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.converter.data_padding.bpemb_data_padding_teacher_forcing"], ["", "def", "test_givenBatch_whenBpembDataPaddingTeacherForcing_thenShouldReturnBatchAsTensor", "(", "\n", "self", ",", "\n", ")", ":", "\n", "        ", "(", "padded_batch", ",", "_", ",", "_", ",", "_", ")", ",", "_", "=", "self", ".", "bpemb_data_padding_teacher_forcing", "(", "\n", "self", ".", "a_training_non_padded_subword_embedding_batch", "\n", ")", "\n", "\n", "self", ".", "assertIsInstance", "(", "padded_batch", ",", "torch", ".", "Tensor", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.converter.test_data_padding.DataPaddingTest.test_givenBatch_whenBpembDataPaddingTeacherForcing_thenShouldPerformRightPadding": [[299, 307], ["test_data_padding.DataPaddingTest.bpemb_data_padding_teacher_forcing", "test_data_padding.DataPaddingTest.assertTrue", "torch.all", "padded_batch.eq"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.converter.data_padding.bpemb_data_padding_teacher_forcing"], ["", "def", "test_givenBatch_whenBpembDataPaddingTeacherForcing_thenShouldPerformRightPadding", "(", "\n", "self", ",", "\n", ")", ":", "\n", "        ", "(", "padded_batch", ",", "_", ",", "_", ",", "_", ")", ",", "_", "=", "self", ".", "bpemb_data_padding_teacher_forcing", "(", "\n", "self", ".", "a_training_non_padded_subword_embedding_batch", "\n", ")", "\n", "\n", "self", ".", "assertTrue", "(", "torch", ".", "all", "(", "padded_batch", ".", "eq", "(", "self", ".", "a_bpemb_padded_batch", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.converter.test_data_padding.DataPaddingTest.test_givenBatch_whenBpembDataPaddingTeacherForcing_thenShouldReturnRightDecompositionLengths": [[308, 318], ["test_data_padding.DataPaddingTest.bpemb_data_padding_teacher_forcing", "test_data_padding.DataPaddingTest.assertEqual"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.converter.data_padding.bpemb_data_padding_teacher_forcing"], ["", "def", "test_givenBatch_whenBpembDataPaddingTeacherForcing_thenShouldReturnRightDecompositionLengths", "(", "\n", "self", ",", "\n", ")", ":", "\n", "        ", "(", "_", ",", "decomposition_lengths", ",", "_", ",", "_", ")", ",", "_", "=", "self", ".", "bpemb_data_padding_teacher_forcing", "(", "\n", "self", ".", "a_training_non_padded_subword_embedding_batch", "\n", ")", "\n", "\n", "self", ".", "assertEqual", "(", "\n", "decomposition_lengths", ",", "\n", "self", ".", "a_non_padded_subword_embedding_batch_decomposition_lenght_list", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.converter.test_data_padding.DataPaddingTest.test_givenBatch_whenBpembDataPaddingTeacherForcing_thenShouldReturnPaddedTarget": [[320, 328], ["test_data_padding.DataPaddingTest.bpemb_data_padding_teacher_forcing", "test_data_padding.DataPaddingTest.assertTrue", "torch.all", "target_tensor.eq"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.converter.data_padding.bpemb_data_padding_teacher_forcing"], ["", "def", "test_givenBatch_whenBpembDataPaddingTeacherForcing_thenShouldReturnPaddedTarget", "(", "\n", "self", ",", "\n", ")", ":", "\n", "        ", "(", "_", ",", "_", ",", "_", ",", "_", ")", ",", "target_tensor", "=", "self", ".", "bpemb_data_padding_teacher_forcing", "(", "\n", "self", ".", "a_training_non_padded_subword_embedding_batch", "\n", ")", "\n", "\n", "self", ".", "assertTrue", "(", "torch", ".", "all", "(", "target_tensor", ".", "eq", "(", "self", ".", "a_padded_target_tensor", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.converter.test_data_padding.DataPaddingTest.test_givenBatch_whenBpembDataPaddingTeacherForcing_thenShouldReturnTargetTensorInBatch": [[329, 337], ["test_data_padding.DataPaddingTest.bpemb_data_padding_teacher_forcing", "test_data_padding.DataPaddingTest.assertTrue", "torch.all", "target_tensor.eq"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.converter.data_padding.bpemb_data_padding_teacher_forcing"], ["", "def", "test_givenBatch_whenBpembDataPaddingTeacherForcing_thenShouldReturnTargetTensorInBatch", "(", "\n", "self", ",", "\n", ")", ":", "\n", "        ", "(", "_", ",", "_", ",", "_", ",", "target_tensor", ")", ",", "_", "=", "self", ".", "bpemb_data_padding_teacher_forcing", "(", "\n", "self", ".", "a_training_non_padded_subword_embedding_batch", "\n", ")", "\n", "\n", "self", ".", "assertTrue", "(", "torch", ".", "all", "(", "target_tensor", ".", "eq", "(", "self", ".", "a_padded_target_tensor", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.converter.test_target_converter.TargetConverterTest.setUpClass": [[8, 16], ["None"], "methods", ["None"], ["    ", "@", "classmethod", "\n", "def", "setUpClass", "(", "cls", ")", ":", "\n", "        ", "cls", ".", "a_tag", "=", "\"first_tag\"", "\n", "cls", ".", "a_index", "=", "1", "\n", "cls", ".", "another_tag", "=", "\"second_tag\"", "\n", "cls", ".", "another_index", "=", "2", "\n", "\n", "cls", ".", "tag_to_idx", "=", "{", "cls", ".", "a_tag", ":", "cls", ".", "a_index", ",", "cls", ".", "another_tag", ":", "cls", ".", "another_index", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.converter.test_target_converter.TargetConverterTest.setUp": [[17, 19], ["deepparse.converter.TagsConverter"], "methods", ["None"], ["", "def", "setUp", "(", "self", ")", ":", "\n", "        ", "self", ".", "target_converter", "=", "TagsConverter", "(", "self", ".", "tag_to_idx", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.converter.test_target_converter.TargetConverterTest.test_whenCalledWithString_thenShouldReturnIndex": [[20, 24], ["test_target_converter.TargetConverterTest.target_converter", "test_target_converter.TargetConverterTest.assertEqual"], "methods", ["None"], ["", "def", "test_whenCalledWithString_thenShouldReturnIndex", "(", "self", ")", ":", "\n", "        ", "index", "=", "self", ".", "target_converter", "(", "self", ".", "a_tag", ")", "\n", "\n", "self", ".", "assertEqual", "(", "index", ",", "self", ".", "a_index", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.converter.test_target_converter.TargetConverterTest.test_whenCalledWithInt_thenShouldReturnTag": [[25, 29], ["test_target_converter.TargetConverterTest.target_converter", "test_target_converter.TargetConverterTest.assertEqual"], "methods", ["None"], ["", "def", "test_whenCalledWithInt_thenShouldReturnTag", "(", "self", ")", ":", "\n", "        ", "tag", "=", "self", ".", "target_converter", "(", "self", ".", "another_index", ")", "\n", "\n", "self", ".", "assertEqual", "(", "tag", ",", "self", ".", "another_tag", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.embeddings_models.fasttext_embeddings_model.FastTextEmbeddingsModel.__init__": [[26, 33], ["embeddings_model.EmbeddingsModel.__init__", "platform.system", "gensim.models.fasttext.load_facebook_vectors", "load_fasttext_embeddings"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.timer.timer.Timer.__init__", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.deepparse.fasttext_tools.load_fasttext_embeddings"], ["def", "__init__", "(", "self", ",", "embeddings_path", ":", "str", ",", "verbose", ":", "bool", "=", "True", ")", "->", "None", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "verbose", "=", "verbose", ")", "\n", "\n", "if", "platform", ".", "system", "(", ")", "==", "\"Windows\"", ":", "\n", "            ", "self", ".", "model", "=", "load_facebook_vectors", "(", "embeddings_path", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "model", "=", "load_fasttext_embeddings", "(", "embeddings_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.embeddings_models.fasttext_embeddings_model.FastTextEmbeddingsModel.__call__": [[34, 45], ["None"], "methods", ["None"], ["", "", "def", "__call__", "(", "self", ",", "word", ":", "str", ")", "->", "ndarray", ":", "\n", "        ", "\"\"\"\n        Callable method to get a word vector.\n\n        Args:\n            word (str): Word to get vector.\n\n        Return:\n            The fastText embedding for a word.\n        \"\"\"", "\n", "return", "self", ".", "model", "[", "word", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.embeddings_models.fasttext_embeddings_model.FastTextEmbeddingsModel.dim": [[46, 49], ["fasttext_embeddings_model.FastTextEmbeddingsModel.model.get_dimension"], "methods", ["None"], ["", "@", "property", "\n", "def", "dim", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "model", ".", "get_dimension", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.embeddings_models.magnitude_embeddings_model.MagnitudeEmbeddingsModel.__init__": [[17, 20], ["embeddings_model.EmbeddingsModel.__init__", "pymagnitudelight.Magnitude"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.timer.timer.Timer.__init__"], ["def", "__init__", "(", "self", ",", "embeddings_path", ":", "str", ",", "verbose", ":", "bool", "=", "True", ")", "->", "None", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "verbose", "=", "verbose", ")", "\n", "self", ".", "model", "=", "Magnitude", "(", "embeddings_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.embeddings_models.magnitude_embeddings_model.MagnitudeEmbeddingsModel.__call__": [[21, 33], ["magnitude_embeddings_model.MagnitudeEmbeddingsModel.model.query", "words.split"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "words", ":", "str", ")", "->", "ndarray", ":", "\n", "        ", "\"\"\"\n        Callable method to get word vector of a complete address.\n\n        Args:\n            words (str): Address to get vector for words.\n\n        Return:\n            The fastText embedding for a list of words.\n        \"\"\"", "\n", "# we leverage the multiple word query which are faster than single word query", "\n", "return", "self", ".", "model", ".", "query", "(", "words", ".", "split", "(", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.embeddings_models.bpemb_embeddings_model.BPEmbEmbeddingsModel.__init__": [[21, 29], ["embeddings_model.EmbeddingsModel.__init__", "warnings.catch_warnings", "warnings.filterwarnings", "bpemb.BPEmb", "pathlib.Path"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.timer.timer.Timer.__init__"], ["def", "__init__", "(", "self", ",", "cache_dir", ":", "str", ",", "verbose", ":", "bool", "=", "True", ")", "->", "None", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "verbose", "=", "verbose", ")", "\n", "with", "warnings", ".", "catch_warnings", "(", ")", ":", "\n", "# annoying scipy.sparcetools private module warnings removal", "\n", "# annoying boto warnings", "\n", "            ", "warnings", ".", "filterwarnings", "(", "\"ignore\"", ")", "\n", "model", "=", "BPEmb", "(", "lang", "=", "\"multi\"", ",", "vs", "=", "100000", ",", "dim", "=", "300", ",", "cache_dir", "=", "Path", "(", "cache_dir", ")", ")", "# defaults parameters", "\n", "", "self", ".", "model", "=", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.embeddings_models.bpemb_embeddings_model.BPEmbEmbeddingsModel.__call__": [[30, 41], ["bpemb_embeddings_model.BPEmbEmbeddingsModel.model.embed"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "word", ":", "str", ")", "->", "ndarray", ":", "\n", "        ", "\"\"\"\n        Callable method to get a word vector.\n\n        Args:\n            word (str): Word to get vector.\n\n        Return:\n            The BP embedding for a word.\n        \"\"\"", "\n", "return", "self", ".", "model", ".", "embed", "(", "word", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.embeddings_models.embeddings_model.EmbeddingsModel.__init__": [[11, 15], ["print"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "verbose", ":", "bool", "=", "True", ")", "->", "None", ":", "\n", "        ", "self", ".", "model", "=", "None", "\n", "if", "verbose", ":", "\n", "            ", "print", "(", "\"Loading the embeddings model\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.embeddings_models.embeddings_model.EmbeddingsModel.__call__": [[16, 19], ["None"], "methods", ["None"], ["", "", "@", "abstractmethod", "\n", "def", "__call__", "(", "self", ",", "words", ":", "str", ")", "->", "ndarray", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.embeddings_models.embeddings_model.EmbeddingsModel.dim": [[20, 23], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "dim", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "model", ".", "dim", "\n", "", "", ""]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.embeddings_models.test_fasttext_embeddings_model.FasttextEmbeddingsModelTest.setUpClass": [[10, 16], ["None"], "methods", ["None"], ["    ", "@", "classmethod", "\n", "def", "setUpClass", "(", "cls", ")", ":", "\n", "        ", "cls", ".", "a_path", "=", "\".\"", "\n", "cls", ".", "a_word", "=", "\"test\"", "\n", "cls", ".", "verbose", "=", "False", "\n", "cls", ".", "dim", "=", "9", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.embeddings_models.test_fasttext_embeddings_model.FasttextEmbeddingsModelTest.setUp": [[17, 23], ["unittest.mock.MagicMock", "unittest.mock.MagicMock"], "methods", ["None"], ["", "def", "setUp", "(", "self", ")", ":", "\n", "        ", "model", "=", "MagicMock", "(", ")", "\n", "shape_mock", "=", "MagicMock", "(", ")", "\n", "shape_mock", ".", "return_value", "=", "self", ".", "dim", "\n", "model", ".", "get_dimension", "=", "shape_mock", "\n", "self", ".", "model", "=", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.embeddings_models.test_fasttext_embeddings_model.FasttextEmbeddingsModelTest.test_whenInstantiatedWithPath_thenShouldLoadFasttextModel": [[24, 33], ["unittest.skipIf", "unittest.mock.patch", "deepparse.embeddings_models.FastTextEmbeddingsModel", "loader.assert_called_with", "platform.system"], "methods", ["None"], ["", "@", "skipIf", "(", "platform", ".", "system", "(", ")", "==", "\"Windows\"", ",", "\"Integration test not on Windows env.\"", ")", "\n", "def", "test_whenInstantiatedWithPath_thenShouldLoadFasttextModel", "(", "self", ")", ":", "\n", "        ", "with", "patch", "(", "\n", "\"deepparse.embeddings_models.fasttext_embeddings_model.load_fasttext_embeddings\"", ",", "\n", "return_value", "=", "self", ".", "model", ",", "\n", ")", "as", "loader", ":", "\n", "            ", "_", "=", "FastTextEmbeddingsModel", "(", "self", ".", "a_path", ",", "verbose", "=", "self", ".", "verbose", ")", "\n", "\n", "loader", ".", "assert_called_with", "(", "self", ".", "a_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.embeddings_models.test_fasttext_embeddings_model.FasttextEmbeddingsModelTest.test_whenCalledToEmbed_thenShouldCallLoadedModel": [[34, 45], ["unittest.skipIf", "unittest.mock.patch", "deepparse.embeddings_models.FastTextEmbeddingsModel", "deepparse.embeddings_models.FastTextEmbeddingsModel.", "test_fasttext_embeddings_model.FasttextEmbeddingsModelTest.model.__getitem__.assert_called_with", "platform.system"], "methods", ["None"], ["", "", "@", "skipIf", "(", "platform", ".", "system", "(", ")", "==", "\"Windows\"", ",", "\"Integration test not on Windows env.\"", ")", "\n", "def", "test_whenCalledToEmbed_thenShouldCallLoadedModel", "(", "self", ")", ":", "\n", "        ", "with", "patch", "(", "\n", "\"deepparse.embeddings_models.fasttext_embeddings_model.load_fasttext_embeddings\"", ",", "\n", "return_value", "=", "self", ".", "model", ",", "\n", ")", ":", "\n", "            ", "embeddings_model", "=", "FastTextEmbeddingsModel", "(", "self", ".", "a_path", ",", "verbose", "=", "self", ".", "verbose", ")", "\n", "\n", "embeddings_model", "(", "self", ".", "a_word", ")", "\n", "\n", "self", ".", "model", ".", "__getitem__", ".", "assert_called_with", "(", "self", ".", "a_word", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.embeddings_models.test_fasttext_embeddings_model.FasttextEmbeddingsModelTest.test_whenInstantiatedOnWindows_thenShouldLoadFasttextModelGensim": [[46, 57], ["unittest.mock.patch", "unittest.mock.patch", "platform_mock.system", "deepparse.embeddings_models.FastTextEmbeddingsModel", "loader.assert_called_with"], "methods", ["None"], ["", "", "@", "patch", "(", "\"deepparse.embeddings_models.fasttext_embeddings_model.platform\"", ")", "\n", "def", "test_whenInstantiatedOnWindows_thenShouldLoadFasttextModelGensim", "(", "self", ",", "platform_mock", ")", ":", "\n", "        ", "platform_mock", ".", "system", "(", ")", ".", "__eq__", ".", "return_value", "=", "True", "\n", "with", "patch", "(", "\n", "\"deepparse.embeddings_models.fasttext_embeddings_model.load_facebook_vectors\"", ",", "\n", "return_value", "=", "self", ".", "model", ",", "\n", ")", "as", "loader", ":", "\n", "            ", "with", "platform_mock", ":", "\n", "                ", "self", ".", "embeddings_model", "=", "FastTextEmbeddingsModel", "(", "self", ".", "a_path", ",", "verbose", "=", "self", ".", "verbose", ")", "\n", "\n", "loader", ".", "assert_called_with", "(", "self", ".", "a_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.embeddings_models.test_fasttext_embeddings_model.FasttextEmbeddingsModelTest.test_whenInstantiatedOnLinux_thenShouldLoadFasttextModel": [[58, 69], ["unittest.mock.patch", "unittest.mock.patch", "platform_mock.system", "deepparse.embeddings_models.FastTextEmbeddingsModel", "loader.assert_called_with"], "methods", ["None"], ["", "", "", "@", "patch", "(", "\"deepparse.embeddings_models.fasttext_embeddings_model.platform\"", ")", "\n", "def", "test_whenInstantiatedOnLinux_thenShouldLoadFasttextModel", "(", "self", ",", "platform_mock", ")", ":", "\n", "        ", "platform_mock", ".", "system", "(", ")", ".", "__eq__", ".", "return_value", "=", "False", "\n", "with", "patch", "(", "\n", "\"deepparse.embeddings_models.fasttext_embeddings_model.load_fasttext_embeddings\"", ",", "\n", "return_value", "=", "self", ".", "model", ",", "\n", ")", "as", "loader", ":", "\n", "            ", "with", "platform_mock", ":", "\n", "                ", "self", ".", "embeddings_model", "=", "FastTextEmbeddingsModel", "(", "self", ".", "a_path", ",", "verbose", "=", "self", ".", "verbose", ")", "\n", "\n", "loader", ".", "assert_called_with", "(", "self", ".", "a_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.embeddings_models.test_fasttext_embeddings_model.FasttextEmbeddingsModelTest.test_whenInstantiatedOnMacOS_thenShouldLoadFasttextModel": [[70, 81], ["unittest.mock.patch", "unittest.mock.patch", "platform_mock.system", "deepparse.embeddings_models.FastTextEmbeddingsModel", "loader.assert_called_with"], "methods", ["None"], ["", "", "", "@", "patch", "(", "\"deepparse.embeddings_models.fasttext_embeddings_model.platform\"", ")", "\n", "def", "test_whenInstantiatedOnMacOS_thenShouldLoadFasttextModel", "(", "self", ",", "platform_mock", ")", ":", "\n", "        ", "platform_mock", ".", "system", "(", ")", ".", "__eq__", ".", "return_value", "=", "False", "\n", "with", "patch", "(", "\n", "\"deepparse.embeddings_models.fasttext_embeddings_model.load_fasttext_embeddings\"", ",", "\n", "return_value", "=", "self", ".", "model", ",", "\n", ")", "as", "loader", ":", "\n", "            ", "with", "platform_mock", ":", "\n", "                ", "self", ".", "embeddings_model", "=", "FastTextEmbeddingsModel", "(", "self", ".", "a_path", ",", "verbose", "=", "self", ".", "verbose", ")", "\n", "\n", "loader", ".", "assert_called_with", "(", "self", ".", "a_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.embeddings_models.test_fasttext_embeddings_model.FasttextEmbeddingsModelTest.test_givenADimOf9Windows_whenAskDimProperty_thenReturnProperDim": [[82, 93], ["unittest.skipIf", "unittest.mock.patch", "deepparse.embeddings_models.FastTextEmbeddingsModel", "test_fasttext_embeddings_model.FasttextEmbeddingsModelTest.assertEqual", "platform.system"], "methods", ["None"], ["", "", "", "@", "skipIf", "(", "not", "platform", ".", "system", "(", ")", "==", "\"Windows\"", ",", "\"Integration test on Windows env.\"", ")", "\n", "def", "test_givenADimOf9Windows_whenAskDimProperty_thenReturnProperDim", "(", "self", ")", ":", "\n", "        ", "with", "patch", "(", "\n", "\"deepparse.embeddings_models.fasttext_embeddings_model.load_facebook_vectors\"", ",", "\n", "return_value", "=", "self", ".", "model", ",", "\n", ")", ":", "\n", "            ", "embeddings_model", "=", "FastTextEmbeddingsModel", "(", "self", ".", "a_path", ",", "verbose", "=", "self", ".", "verbose", ")", "\n", "\n", "actual", "=", "embeddings_model", ".", "dim", "\n", "expected", "=", "self", ".", "dim", "\n", "self", ".", "assertEqual", "(", "actual", ",", "expected", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.embeddings_models.test_fasttext_embeddings_model.FasttextEmbeddingsModelTest.test_givenADimOf9Linux_whenAskDimProperty_thenReturnProperDim": [[94, 105], ["unittest.skipIf", "unittest.mock.patch", "deepparse.embeddings_models.FastTextEmbeddingsModel", "test_fasttext_embeddings_model.FasttextEmbeddingsModelTest.assertEqual", "platform.system"], "methods", ["None"], ["", "", "@", "skipIf", "(", "platform", ".", "system", "(", ")", "==", "\"Windows\"", ",", "\"Integration test not on Windows env.\"", ")", "\n", "def", "test_givenADimOf9Linux_whenAskDimProperty_thenReturnProperDim", "(", "self", ")", ":", "\n", "        ", "with", "patch", "(", "\n", "\"deepparse.embeddings_models.fasttext_embeddings_model.load_fasttext_embeddings\"", ",", "\n", "return_value", "=", "self", ".", "model", ",", "\n", ")", ":", "\n", "            ", "embeddings_model", "=", "FastTextEmbeddingsModel", "(", "self", ".", "a_path", ",", "verbose", "=", "self", ".", "verbose", ")", "\n", "\n", "actual", "=", "embeddings_model", ".", "dim", "\n", "expected", "=", "self", ".", "dim", "\n", "self", ".", "assertEqual", "(", "actual", ",", "expected", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.embeddings_models.test_magnitude_embeddings_model.MagnitudeEmbeddingsModelTest.setUpClass": [[9, 15], ["None"], "methods", ["None"], ["    ", "@", "classmethod", "\n", "def", "setUpClass", "(", "cls", ")", ":", "\n", "        ", "cls", ".", "a_path", "=", "\".\"", "\n", "cls", ".", "a_sentence_of_word", "=", "\"a test sentence\"", "\n", "cls", ".", "verbose", "=", "False", "\n", "cls", ".", "dim", "=", "9", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.embeddings_models.test_magnitude_embeddings_model.MagnitudeEmbeddingsModelTest.setUp": [[16, 19], ["unittest.mock.MagicMock"], "methods", ["None"], ["", "def", "setUp", "(", "self", ")", ":", "\n", "        ", "self", ".", "model", "=", "MagicMock", "(", ")", "\n", "self", ".", "model", ".", "dim", "=", "self", ".", "dim", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.embeddings_models.test_magnitude_embeddings_model.MagnitudeEmbeddingsModelTest.test_whenInstanciatedWithPath_thenShouldLoadFasttextModel": [[20, 28], ["unittest.mock.patch", "deepparse.embeddings_models.MagnitudeEmbeddingsModel", "loader.assert_called_with"], "methods", ["None"], ["", "def", "test_whenInstanciatedWithPath_thenShouldLoadFasttextModel", "(", "self", ")", ":", "\n", "        ", "with", "patch", "(", "\n", "\"deepparse.embeddings_models.magnitude_embeddings_model.Magnitude\"", ",", "\n", "return_value", "=", "self", ".", "model", ",", "\n", ")", "as", "loader", ":", "\n", "            ", "_", "=", "MagnitudeEmbeddingsModel", "(", "self", ".", "a_path", ",", "verbose", "=", "self", ".", "verbose", ")", "\n", "\n", "loader", ".", "assert_called_with", "(", "self", ".", "a_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.embeddings_models.test_magnitude_embeddings_model.MagnitudeEmbeddingsModelTest.test_whenCalledToEmbed_thenShouldCallLoadedModel": [[29, 39], ["unittest.mock.patch", "deepparse.embeddings_models.MagnitudeEmbeddingsModel", "deepparse.embeddings_models.MagnitudeEmbeddingsModel.", "test_magnitude_embeddings_model.MagnitudeEmbeddingsModelTest.model.query.assert_called_with", "test_magnitude_embeddings_model.MagnitudeEmbeddingsModelTest.a_sentence_of_word.split"], "methods", ["None"], ["", "", "def", "test_whenCalledToEmbed_thenShouldCallLoadedModel", "(", "self", ")", ":", "\n", "        ", "with", "patch", "(", "\n", "\"deepparse.embeddings_models.magnitude_embeddings_model.Magnitude\"", ",", "\n", "return_value", "=", "self", ".", "model", ",", "\n", ")", ":", "\n", "            ", "embeddings_model", "=", "MagnitudeEmbeddingsModel", "(", "self", ".", "a_path", ",", "verbose", "=", "self", ".", "verbose", ")", "\n", "\n", "embeddings_model", "(", "self", ".", "a_sentence_of_word", ")", "\n", "\n", "self", ".", "model", ".", "query", ".", "assert_called_with", "(", "self", ".", "a_sentence_of_word", ".", "split", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.embeddings_models.test_magnitude_embeddings_model.MagnitudeEmbeddingsModelTest.test_givenADimOf9_whenAskDimProperty_thenReturnProperDim": [[40, 50], ["unittest.mock.patch", "deepparse.embeddings_models.MagnitudeEmbeddingsModel", "test_magnitude_embeddings_model.MagnitudeEmbeddingsModelTest.assertEqual"], "methods", ["None"], ["", "", "def", "test_givenADimOf9_whenAskDimProperty_thenReturnProperDim", "(", "self", ")", ":", "\n", "        ", "with", "patch", "(", "\n", "\"deepparse.embeddings_models.magnitude_embeddings_model.Magnitude\"", ",", "\n", "return_value", "=", "self", ".", "model", ",", "\n", ")", ":", "\n", "            ", "embeddings_model", "=", "MagnitudeEmbeddingsModel", "(", "self", ".", "a_path", ",", "verbose", "=", "self", ".", "verbose", ")", "\n", "\n", "actual", "=", "embeddings_model", ".", "dim", "\n", "expected", "=", "self", ".", "dim", "\n", "self", ".", "assertEqual", "(", "actual", ",", "expected", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.embeddings_models.test_embeddings_model.CallAbstractedEmbeddingsModel.__call__": [[8, 10], ["None"], "methods", ["None"], ["    ", "def", "__call__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.embeddings_models.test_embeddings_model.EmbeddingsModelInterfaceTest.test_whenInstantiated_thenInitProperly": [[13, 17], ["test_embeddings_model.CallAbstractedEmbeddingsModel", "test_embeddings_model.EmbeddingsModelInterfaceTest.assertIsNone"], "methods", ["None"], ["    ", "def", "test_whenInstantiated_thenInitProperly", "(", "self", ")", ":", "\n", "        ", "embeddings_model", "=", "CallAbstractedEmbeddingsModel", "(", "verbose", "=", "False", ")", "\n", "\n", "self", ".", "assertIsNone", "(", "embeddings_model", ".", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.embeddings_models.test_embeddings_model.EmbeddingsModelInterfaceTest.test_whenInstantiatedVerbose_thenVerbose": [[18, 25], ["test_embeddings_model.EmbeddingsModelInterfaceTest._capture_output", "test_embeddings_model.CallAbstractedEmbeddingsModel", "test_embeddings_model.EmbeddingsModelInterfaceTest.test_out.getvalue().strip", "test_embeddings_model.EmbeddingsModelInterfaceTest.assertEqual", "test_embeddings_model.EmbeddingsModelInterfaceTest.test_out.getvalue"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.tests.base_capture_output.CaptureOutputTestCase._capture_output"], ["", "def", "test_whenInstantiatedVerbose_thenVerbose", "(", "self", ")", ":", "\n", "        ", "self", ".", "_capture_output", "(", ")", "\n", "_", "=", "CallAbstractedEmbeddingsModel", "(", "verbose", "=", "True", ")", "\n", "\n", "actual", "=", "self", ".", "test_out", ".", "getvalue", "(", ")", ".", "strip", "(", ")", "\n", "expected", "=", "\"Loading the embeddings model\"", "\n", "self", ".", "assertEqual", "(", "actual", ",", "expected", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.embeddings_models.test_embeddings_model.EmbeddingsModelInterfaceTest.test_whenInstantiatedNotVerbose_thenNoVerbose": [[26, 33], ["test_embeddings_model.EmbeddingsModelInterfaceTest._capture_output", "test_embeddings_model.CallAbstractedEmbeddingsModel", "test_embeddings_model.EmbeddingsModelInterfaceTest.test_out.getvalue().strip", "test_embeddings_model.EmbeddingsModelInterfaceTest.assertEqual", "test_embeddings_model.EmbeddingsModelInterfaceTest.test_out.getvalue"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.tests.base_capture_output.CaptureOutputTestCase._capture_output"], ["", "def", "test_whenInstantiatedNotVerbose_thenNoVerbose", "(", "self", ")", ":", "\n", "        ", "self", ".", "_capture_output", "(", ")", "\n", "_", "=", "CallAbstractedEmbeddingsModel", "(", "verbose", "=", "False", ")", "\n", "\n", "actual", "=", "self", ".", "test_out", ".", "getvalue", "(", ")", ".", "strip", "(", ")", "\n", "expected", "=", "\"\"", "\n", "self", ".", "assertEqual", "(", "actual", ",", "expected", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.embeddings_models.test_embeddings_model.EmbeddingsModelInterfaceTest.test_whenInstantiated_thenInitWithoutDim": [[34, 38], ["test_embeddings_model.CallAbstractedEmbeddingsModel", "test_embeddings_model.EmbeddingsModelInterfaceTest.assertRaises"], "methods", ["None"], ["", "def", "test_whenInstantiated_thenInitWithoutDim", "(", "self", ")", ":", "\n", "        ", "embeddings_model", "=", "CallAbstractedEmbeddingsModel", "(", "verbose", "=", "False", ")", "\n", "with", "self", ".", "assertRaises", "(", "AttributeError", ")", ":", "\n", "            ", "_", "=", "embeddings_model", ".", "dim", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.embeddings_models.test_bpemb_embeddings_model.BPEmbEmbeddingsModelTest.setUpClass": [[10, 15], ["None"], "methods", ["None"], ["    ", "@", "classmethod", "\n", "def", "setUpClass", "(", "cls", ")", ":", "\n", "        ", "cls", ".", "a_path", "=", "\".\"", "\n", "cls", ".", "a_word", "=", "\"test\"", "\n", "cls", ".", "dim", "=", "9", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.embeddings_models.test_bpemb_embeddings_model.BPEmbEmbeddingsModelTest.setUp": [[16, 19], ["unittest.mock.MagicMock"], "methods", ["None"], ["", "def", "setUp", "(", "self", ")", ":", "\n", "        ", "self", ".", "model", "=", "MagicMock", "(", ")", "\n", "self", ".", "model", ".", "dim", "=", "self", ".", "dim", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.embeddings_models.test_bpemb_embeddings_model.BPEmbEmbeddingsModelTest.test_whenInstantiatedWithPath_thenShouldLoadBPEmbModel": [[20, 28], ["unittest.mock.patch", "deepparse.embeddings_models.BPEmbEmbeddingsModel", "loader.assert_called_with", "pathlib.Path"], "methods", ["None"], ["", "def", "test_whenInstantiatedWithPath_thenShouldLoadBPEmbModel", "(", "self", ")", ":", "\n", "        ", "with", "patch", "(", "\n", "\"deepparse.embeddings_models.bpemb_embeddings_model.BPEmb\"", ",", "\n", "return_value", "=", "self", ".", "model", ",", "\n", ")", "as", "loader", ":", "\n", "            ", "_", "=", "BPEmbEmbeddingsModel", "(", "self", ".", "a_path", ",", "verbose", "=", "False", ")", "\n", "\n", "loader", ".", "assert_called_with", "(", "lang", "=", "\"multi\"", ",", "vs", "=", "100000", ",", "dim", "=", "300", ",", "cache_dir", "=", "Path", "(", "self", ".", "a_path", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.embeddings_models.test_bpemb_embeddings_model.BPEmbEmbeddingsModelTest.test_whenCalledToEmbed_thenShouldCallLoadedModel": [[29, 39], ["unittest.mock.patch", "deepparse.embeddings_models.BPEmbEmbeddingsModel", "deepparse.embeddings_models.BPEmbEmbeddingsModel.", "test_bpemb_embeddings_model.BPEmbEmbeddingsModelTest.model.embed.assert_called_with"], "methods", ["None"], ["", "", "def", "test_whenCalledToEmbed_thenShouldCallLoadedModel", "(", "self", ")", ":", "\n", "        ", "with", "patch", "(", "\n", "\"deepparse.embeddings_models.bpemb_embeddings_model.BPEmb\"", ",", "\n", "return_value", "=", "self", ".", "model", ",", "\n", ")", ":", "\n", "            ", "embeddings_model", "=", "BPEmbEmbeddingsModel", "(", "self", ".", "a_path", ",", "verbose", "=", "False", ")", "\n", "\n", "embeddings_model", "(", "self", ".", "a_word", ")", "\n", "\n", "self", ".", "model", ".", "embed", ".", "assert_called_with", "(", "self", ".", "a_word", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.embeddings_models.test_bpemb_embeddings_model.BPEmbEmbeddingsModelTest.test_givenADimOf9_whenAskDimProperty_thenReturnProperDim": [[40, 50], ["unittest.mock.patch", "deepparse.embeddings_models.BPEmbEmbeddingsModel", "test_bpemb_embeddings_model.BPEmbEmbeddingsModelTest.assertEqual"], "methods", ["None"], ["", "", "def", "test_givenADimOf9_whenAskDimProperty_thenReturnProperDim", "(", "self", ")", ":", "\n", "        ", "with", "patch", "(", "\n", "\"deepparse.embeddings_models.bpemb_embeddings_model.BPEmb\"", ",", "\n", "return_value", "=", "self", ".", "model", ",", "\n", ")", ":", "\n", "            ", "embeddings_model", "=", "BPEmbEmbeddingsModel", "(", "self", ".", "a_path", ",", "verbose", "=", "False", ")", "\n", "\n", "actual", "=", "embeddings_model", ".", "dim", "\n", "expected", "=", "self", ".", "dim", "\n", "self", ".", "assertEqual", "(", "actual", ",", "expected", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.data_error.data_error.DataError.__init__": [[6, 9], ["Exception.__init__"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.timer.timer.Timer.__init__"], ["def", "__init__", "(", "self", ",", "value", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "value", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.data_error.data_error.DataError.__str__": [[10, 12], ["repr"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "repr", "(", "self", ".", "value", ")", "# pragma: no cover", "\n", "", "", ""]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.network.encoder.Encoder.__init__": [[23, 28], ["torch.Module.__init__", "torch.LSTM", "torch.LSTM", "encoder.Encoder.lstm.apply"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.timer.timer.Timer.__init__"], ["def", "__init__", "(", "self", ",", "input_size", ":", "int", ",", "hidden_size", ":", "int", ",", "num_layers", ":", "int", ")", "->", "None", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "lstm", "=", "nn", ".", "LSTM", "(", "input_size", ",", "hidden_size", ",", "num_layers", "=", "num_layers", ",", "batch_first", "=", "True", ")", "\n", "self", ".", "lstm", ".", "apply", "(", "weights_init", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.network.encoder.Encoder.forward": [[29, 48], ["torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "encoder.Encoder.lstm", "torch.nn.utils.rnn.pad_packed_sequence", "torch.nn.utils.rnn.pad_packed_sequence", "lengths_tensor.cpu"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "to_predict", ":", "torch", ".", "Tensor", ",", "lengths_tensor", ":", "torch", ".", "Tensor", ")", "->", "Tuple", ":", "\n", "        ", "\"\"\"\n        Callable method to encode the components of an address.\n\n        Args:\n            to_predict (~torch.Tensor): The elements to predict the tags.\n            lengths_tensor (~torch.Tensor): The lengths of the batch elements (since packed).\n\n        Return:\n            A tuple of the address components encoding.\n        \"\"\"", "\n", "\n", "packed_sequence", "=", "pack_padded_sequence", "(", "to_predict", ",", "lengths_tensor", ".", "cpu", "(", ")", ",", "batch_first", "=", "True", ",", "enforce_sorted", "=", "False", ")", "\n", "\n", "packed_outputs", ",", "hidden", "=", "self", ".", "lstm", "(", "packed_sequence", ")", "\n", "\n", "outputs", ",", "_", "=", "pad_packed_sequence", "(", "packed_outputs", ",", "batch_first", "=", "True", ")", "\n", "\n", "return", "outputs", ",", "hidden", "\n", "", "", ""]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.network.bpemb_seq2seq.BPEmbSeq2SeqModel.__init__": [[30, 70], ["seq2seq.Seq2SeqModel.__init__", "embedding_network.EmbeddingNetwork", "bpemb_seq2seq.BPEmbSeq2SeqModel.embedding_network.to", "bpemb_seq2seq.BPEmbSeq2SeqModel._load_weights", "bpemb_seq2seq.BPEmbSeq2SeqModel._load_pre_trained_weights"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.timer.timer.Timer.__init__", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.network.seq2seq.Seq2SeqModel._load_weights", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.network.seq2seq.Seq2SeqModel._load_pre_trained_weights"], ["def", "__init__", "(", "\n", "self", ",", "\n", "cache_dir", ":", "str", ",", "\n", "device", ":", "torch", ".", "device", ",", "\n", "input_size", ":", "int", "=", "300", ",", "\n", "encoder_hidden_size", ":", "int", "=", "1024", ",", "\n", "encoder_num_layers", ":", "int", "=", "1", ",", "\n", "decoder_hidden_size", ":", "int", "=", "1024", ",", "\n", "decoder_num_layers", ":", "int", "=", "1", ",", "\n", "output_size", ":", "int", "=", "9", ",", "\n", "attention_mechanism", ":", "bool", "=", "False", ",", "\n", "verbose", ":", "bool", "=", "True", ",", "\n", "path_to_retrained_model", ":", "Union", "[", "str", ",", "None", "]", "=", "None", ",", "\n", "pre_trained_weights", ":", "bool", "=", "True", ",", "\n", ")", "->", "None", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\n", "device", ",", "\n", "input_size", "=", "input_size", ",", "\n", "encoder_hidden_size", "=", "encoder_hidden_size", ",", "\n", "encoder_num_layers", "=", "encoder_num_layers", ",", "\n", "decoder_hidden_size", "=", "decoder_hidden_size", ",", "\n", "decoder_num_layers", "=", "decoder_num_layers", ",", "\n", "output_size", "=", "output_size", ",", "\n", "attention_mechanism", "=", "attention_mechanism", ",", "\n", "verbose", "=", "verbose", ",", "\n", ")", "\n", "\n", "self", ".", "embedding_network", "=", "EmbeddingNetwork", "(", "\n", "input_size", "=", "input_size", ",", "hidden_size", "=", "input_size", ",", "projection_size", "=", "input_size", "\n", ")", "\n", "self", ".", "embedding_network", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "if", "path_to_retrained_model", "is", "not", "None", ":", "\n", "            ", "self", ".", "_load_weights", "(", "path_to_retrained_model", ")", "\n", "", "elif", "pre_trained_weights", ":", "\n", "# Means we use the pretrained weights", "\n", "            ", "model_weights_name", "=", "\"bpemb\"", "\n", "if", "attention_mechanism", ":", "\n", "                ", "model_weights_name", "+=", "\"_attention\"", "\n", "", "self", ".", "_load_pre_trained_weights", "(", "model_weights_name", ",", "cache_dir", "=", "cache_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.network.bpemb_seq2seq.BPEmbSeq2SeqModel.forward": [[71, 106], ["to_predict.size", "bpemb_seq2seq.BPEmbSeq2SeqModel.embedding_network", "bpemb_seq2seq.BPEmbSeq2SeqModel._encoder_step", "bpemb_seq2seq.BPEmbSeq2SeqModel._decoder_step"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.network.seq2seq.Seq2SeqModel._encoder_step", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.network.seq2seq.Seq2SeqModel._decoder_step"], ["", "", "def", "forward", "(", "\n", "self", ",", "\n", "to_predict", ":", "torch", ".", "Tensor", ",", "\n", "decomposition_lengths", ":", "List", ",", "\n", "lengths_tensor", ":", "torch", ".", "Tensor", ",", "\n", "target", ":", "Union", "[", "torch", ".", "Tensor", ",", "None", "]", "=", "None", ",", "\n", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "\"\"\"\n        Callable method as per PyTorch forward method to get tags prediction over the components of\n        an address.\n        Args:\n            to_predict (~torch.Tensor): The elements to predict the tags.\n            decomposition_lengths (list) : The lengths of the decomposed words of the batch elements (since packed).\n            lengths_tensor (~torch.Tensor) : The lengths of the batch elements (since packed).\n            target (~torch.Tensor) : The target of the batch element, use only when we retrain the model since we do\n                `teacher forcing <https://machinelearningmastery.com/teacher-forcing-for-recurrent-neural-networks/>`_.\n                Default value is None since we mostly don't have the target except for retrain.\n        Return:\n            A Tensor of the predicted sequence.\n        \"\"\"", "\n", "batch_size", "=", "to_predict", ".", "size", "(", "0", ")", "\n", "\n", "embedded_output", "=", "self", ".", "embedding_network", "(", "to_predict", ",", "decomposition_lengths", ")", "\n", "\n", "decoder_input", ",", "decoder_hidden", ",", "encoder_outputs", "=", "self", ".", "_encoder_step", "(", "embedded_output", ",", "lengths_tensor", ",", "batch_size", ")", "\n", "\n", "prediction_sequence", "=", "self", ".", "_decoder_step", "(", "\n", "decoder_input", ",", "\n", "decoder_hidden", ",", "\n", "encoder_outputs", ",", "\n", "target", ",", "\n", "lengths_tensor", ",", "\n", "batch_size", ",", "\n", ")", "\n", "return", "prediction_sequence", "\n", "", "", ""]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.network.decoder.Decoder.__init__": [[24, 44], ["torch.Module.__init__", "torch.LogSoftmax", "torch.LogSoftmax", "torch.LSTM", "torch.LSTM", "decoder.Decoder.lstm.apply", "decoder.Decoder.linear_layer_set_up", "decoder.Decoder.attention_mechanism_set_up"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.timer.timer.Timer.__init__", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.network.decoder.Decoder.linear_layer_set_up", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.network.decoder.Decoder.attention_mechanism_set_up"], ["def", "__init__", "(", "\n", "self", ",", "\n", "input_size", ":", "int", ",", "\n", "hidden_size", ":", "int", ",", "\n", "num_layers", ":", "int", ",", "\n", "output_size", ":", "int", ",", "\n", "attention_mechanism", ":", "bool", ",", "\n", ")", "->", "None", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "attention_mechanism", "=", "attention_mechanism", "\n", "if", "attention_mechanism", ":", "\n", "# Since layer also have attention mechanism", "\n", "            ", "self", ".", "hidden_size", "=", "hidden_size", "\n", "input_size", "=", "input_size", "+", "hidden_size", "\n", "self", ".", "attention_mechanism_set_up", "(", ")", "\n", "", "self", ".", "softmax", "=", "nn", ".", "LogSoftmax", "(", "dim", "=", "1", ")", "\n", "self", ".", "lstm", "=", "nn", ".", "LSTM", "(", "input_size", ",", "hidden_size", ",", "num_layers", "=", "num_layers", ")", "\n", "self", ".", "lstm", ".", "apply", "(", "weights_init", ")", "\n", "\n", "self", ".", "linear_layer_set_up", "(", "output_size", ",", "hidden_size", "=", "hidden_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.network.decoder.Decoder.forward": [[45, 81], ["to_predict.float.float.float", "decoder.Decoder.lstm", "decoder.Decoder.softmax", "decoder.Decoder._attention_mechanism_forward", "decoder.Decoder.linear"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.network.decoder.Decoder._attention_mechanism_forward"], ["", "def", "forward", "(", "\n", "self", ",", "\n", "to_predict", ":", "torch", ".", "Tensor", ",", "\n", "hidden", ":", "torch", ".", "Tensor", ",", "\n", "encoder_outputs", ":", "torch", ".", "Tensor", ",", "\n", "lengths", ":", "torch", ".", "Tensor", ",", "\n", ")", "->", "Tuple", ":", "\n", "        ", "\"\"\"\n        Callable method to decode the components of an address using attention mechanism.\n\n        Args:\n            to_predict (~torch.Tensor): The elements to predict the tags.\n            hidden (~torch.Tensor): The hidden state of the decoder.\n            encoder_outputs (~torch.Tensor): The encoder outputs for the attention mechanism weighs if needed.\n            lengths (~torch.Tensor) : The lengths of the batch elements (since packed).\n\n        Return:\n            A tuple (``x``, ``y``, ``z``) where ``x`` is the address components tags predictions, y is the hidden\n            states and `\u0300`z`` is None if no attention mechanism is setter or the attention weights.\n\n        \"\"\"", "\n", "to_predict", "=", "to_predict", ".", "float", "(", ")", "\n", "attention_weights", "=", "None", "\n", "if", "self", ".", "attention_mechanism", ":", "\n", "            ", "to_predict", ",", "attention_weights", "=", "self", ".", "_attention_mechanism_forward", "(", "\n", "to_predict", ",", "hidden", ",", "encoder_outputs", ",", "lengths", "\n", ")", "\n", "\n", "", "output", ",", "hidden", "=", "self", ".", "lstm", "(", "to_predict", ",", "hidden", ")", "\n", "\n", "output_prob", "=", "self", ".", "softmax", "(", "self", ".", "linear", "(", "output", "[", "0", "]", ")", ")", "\n", "\n", "return", "(", "\n", "output_prob", ",", "\n", "hidden", ",", "\n", "attention_weights", ",", "\n", ")", "# attention_weights: None or the real attention weights", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.network.decoder.Decoder.linear_layer_set_up": [[83, 86], ["torch.Linear", "torch.Linear", "decoder.Decoder.linear.apply"], "methods", ["None"], ["", "def", "linear_layer_set_up", "(", "self", ",", "output_size", ":", "int", ",", "hidden_size", ":", "int", "=", "1024", ")", ":", "\n", "        ", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "hidden_size", ",", "output_size", ")", "\n", "self", ".", "linear", ".", "apply", "(", "weights_init", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.network.decoder.Decoder.attention_mechanism_set_up": [[87, 95], ["torch.Linear", "torch.Linear", "decoder.Decoder.linear_attention_mechanism_encoder_outputs.apply", "torch.Linear", "torch.Linear", "decoder.Decoder.linear_attention_mechanism_previous_hidden.apply", "torch.Parameter", "torch.Parameter", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["None"], ["", "def", "attention_mechanism_set_up", "(", "self", ",", "hidden_size", ":", "int", "=", "1024", ")", ":", "\n", "        ", "self", ".", "linear_attention_mechanism_encoder_outputs", "=", "nn", ".", "Linear", "(", "hidden_size", ",", "hidden_size", ")", "\n", "self", ".", "linear_attention_mechanism_encoder_outputs", ".", "apply", "(", "weights_init", ")", "\n", "\n", "self", ".", "linear_attention_mechanism_previous_hidden", "=", "nn", ".", "Linear", "(", "hidden_size", ",", "hidden_size", ")", "\n", "self", ".", "linear_attention_mechanism_previous_hidden", ".", "apply", "(", "weights_init", ")", "\n", "\n", "self", ".", "weights", "=", "nn", ".", "Parameter", "(", "torch", ".", "ones", "(", "1", ",", "hidden_size", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.network.decoder.Decoder._attention_mechanism_forward": [[96, 131], ["torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "lengths.max().item", "mask.unsqueeze.unsqueeze.unsqueeze", "float", "torch.functional.softmax", "torch.functional.softmax", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "decoder.Decoder.weights.view", "torch.tanh.transpose", "torch.tanh.transpose", "lengths[].to", "decoder.Decoder.linear_attention_mechanism_encoder_outputs", "decoder.Decoder.linear_attention_mechanism_previous_hidden", "lengths.max", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.matmul.transpose", "torch.matmul.transpose", "hidden[].transpose"], "methods", ["None"], ["", "def", "_attention_mechanism_forward", "(", "\n", "self", ",", "\n", "to_predict", ":", "torch", ".", "Tensor", ",", "\n", "hidden", ":", "torch", ".", "Tensor", ",", "\n", "encoder_outputs", ":", "torch", ".", "Tensor", ",", "\n", "lengths", ":", "torch", ".", "Tensor", ",", "\n", ")", "->", "Tuple", ":", "\n", "        ", "\"\"\"\n        Compute the attention mechanism weights and context vector\n        Return:\n            A tuple (``x``, ``y``) where ``x`` is the to_predict vector with the context vector and y is the attention\n            weights.\n        \"\"\"", "\n", "unweighted_alignments", "=", "torch", ".", "tanh", "(", "\n", "self", ".", "linear_attention_mechanism_encoder_outputs", "(", "encoder_outputs", ")", "\n", "+", "self", ".", "linear_attention_mechanism_previous_hidden", "(", "hidden", "[", "0", "]", ".", "transpose", "(", "0", ",", "1", ")", ")", "\n", ")", "\n", "alignments_scores", "=", "torch", ".", "matmul", "(", "\n", "self", ".", "weights", ".", "view", "(", "1", ",", "1", ",", "self", ".", "hidden_size", ")", ",", "\n", "unweighted_alignments", ".", "transpose", "(", "1", ",", "2", ")", ",", "\n", ")", "\n", "\n", "max_length", "=", "lengths", ".", "max", "(", ")", ".", "item", "(", ")", "\n", "mask", "=", "torch", ".", "arange", "(", "max_length", ")", "[", "None", ",", ":", "]", "<", "lengths", "[", ":", ",", "None", "]", ".", "to", "(", "\n", "\"cpu\"", "\n", ")", "# We switch the lengths to cpu for the comparison", "\n", "mask", "=", "mask", ".", "unsqueeze", "(", "1", ")", "\n", "alignments_scores", "[", "~", "mask", "]", "=", "float", "(", "\"-inf\"", ")", "\n", "\n", "attention_weights", "=", "nn", ".", "functional", ".", "softmax", "(", "alignments_scores", ",", "dim", "=", "2", ")", "\n", "\n", "context_vector", "=", "torch", ".", "matmul", "(", "attention_weights", ",", "encoder_outputs", ")", "\n", "\n", "attention_input", "=", "torch", ".", "cat", "(", "(", "to_predict", ",", "context_vector", ".", "transpose", "(", "0", ",", "1", ")", ")", ",", "2", ")", "\n", "return", "attention_input", ",", "attention_weights", "\n", "", "", ""]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.network.seq2seq.Seq2SeqModel.__init__": [[33, 68], ["super().__init__", "encoder.Encoder", "seq2seq.Seq2SeqModel.encoder.to", "decoder.Decoder", "seq2seq.Seq2SeqModel.decoder.to"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.timer.timer.Timer.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "device", ":", "torch", ".", "device", ",", "\n", "input_size", ":", "int", ",", "\n", "encoder_hidden_size", ":", "int", ",", "\n", "encoder_num_layers", ":", "int", ",", "\n", "decoder_hidden_size", ":", "int", ",", "\n", "decoder_num_layers", ":", "int", ",", "\n", "output_size", ":", "int", ",", "\n", "attention_mechanism", ":", "bool", "=", "False", ",", "\n", "verbose", ":", "bool", "=", "True", ",", "\n", ")", "->", "None", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "device", "=", "device", "\n", "self", ".", "verbose", "=", "verbose", "\n", "self", ".", "attention_mechanism", "=", "attention_mechanism", "\n", "\n", "self", ".", "encoder", "=", "Encoder", "(", "\n", "input_size", "=", "input_size", ",", "\n", "hidden_size", "=", "encoder_hidden_size", ",", "\n", "num_layers", "=", "encoder_num_layers", ",", "\n", ")", "\n", "self", ".", "encoder", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "self", ".", "decoder", "=", "Decoder", "(", "\n", "input_size", "=", "encoder_num_layers", ",", "\n", "hidden_size", "=", "decoder_hidden_size", ",", "\n", "num_layers", "=", "decoder_num_layers", ",", "\n", "output_size", "=", "output_size", ",", "\n", "attention_mechanism", "=", "self", ".", "attention_mechanism", ",", "\n", ")", "\n", "\n", "self", ".", "decoder", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "self", ".", "output_size", "=", "output_size", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.network.seq2seq.Seq2SeqModel.same_output_dim": [[69, 79], ["None"], "methods", ["None"], ["", "def", "same_output_dim", "(", "self", ",", "size", ":", "int", ")", "->", "bool", ":", "\n", "        ", "\"\"\"\n        Verify if the output dimension is similar to ``size``.\n\n        Args:\n            size (int): The dimension size to compare the output dim to.\n\n        Return: A bool, True if output dim is equal to ``size``, False otherwise.\n        \"\"\"", "\n", "return", "size", "==", "self", ".", "output_size", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.network.seq2seq.Seq2SeqModel.handle_new_output_dim": [[80, 86], ["seq2seq.Seq2SeqModel.decoder.linear_layer_set_up"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.network.decoder.Decoder.linear_layer_set_up"], ["", "def", "handle_new_output_dim", "(", "self", ",", "new_dim", ":", "int", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        Update the new output dimension\n        \"\"\"", "\n", "self", ".", "decoder", ".", "linear_layer_set_up", "(", "output_size", "=", "new_dim", ")", "\n", "self", ".", "output_size", "=", "new_dim", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.network.seq2seq.Seq2SeqModel._load_pre_trained_weights": [[87, 109], ["os.path.join", "torch.load", "torch.load", "torch.load", "torch.load", "seq2seq.Seq2SeqModel.load_state_dict", "os.path.isfile", "tools.download_weights", "tools.latest_version", "tools.download_weights", "warnings.warn"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.deepparse.tools.download_weights", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.deepparse.tools.latest_version", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.deepparse.tools.download_weights"], ["", "def", "_load_pre_trained_weights", "(", "self", ",", "model_type", ":", "str", ",", "cache_dir", ":", "str", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        Method to download and resolved the loading (into the network) of the pretrained weights.\n\n        Args:\n            model_type (str): The network pretrained weights to load.\n            cache_dir (str): The path to the cached directory to use for downloading (and loading) the\n                model weights.\n        \"\"\"", "\n", "model_path", "=", "os", ".", "path", ".", "join", "(", "cache_dir", ",", "f\"{model_type}.ckpt\"", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "isfile", "(", "model_path", ")", ":", "\n", "            ", "download_weights", "(", "model_type", ",", "cache_dir", ",", "verbose", "=", "self", ".", "verbose", ")", "\n", "", "elif", "not", "latest_version", "(", "model_type", ",", "cache_path", "=", "cache_dir", ")", ":", "\n", "            ", "if", "self", ".", "verbose", ":", "\n", "                ", "warnings", ".", "warn", "(", "\n", "\"A new version of the pretrained model is available. \"", "\"The newest model will be downloaded.\"", "\n", ")", "\n", "", "download_weights", "(", "model_type", ",", "cache_dir", ",", "verbose", "=", "self", ".", "verbose", ")", "\n", "\n", "", "all_layers_params", "=", "torch", ".", "load", "(", "model_path", ",", "map_location", "=", "self", ".", "device", ")", "\n", "self", ".", "load_state_dict", "(", "all_layers_params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.network.seq2seq.Seq2SeqModel._load_weights": [[110, 122], ["torch.load", "torch.load", "torch.load", "torch.load", "seq2seq.Seq2SeqModel.load_state_dict", "isinstance", "all_layers_params.get.get.get", "isinstance"], "methods", ["None"], ["", "def", "_load_weights", "(", "self", ",", "path_to_retrained_model", ":", "str", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        Method to load (into the network) the weights.\n\n        Args:\n            path_to_retrained_model (str): The path to the fine-tuned model.\n        \"\"\"", "\n", "all_layers_params", "=", "torch", ".", "load", "(", "path_to_retrained_model", ",", "map_location", "=", "self", ".", "device", ")", "\n", "if", "isinstance", "(", "all_layers_params", ",", "dict", ")", "and", "not", "isinstance", "(", "all_layers_params", ",", "OrderedDict", ")", ":", "\n", "# Case where we have a retrained model with a different tagging space", "\n", "            ", "all_layers_params", "=", "all_layers_params", ".", "get", "(", "\"address_tagger_model\"", ")", "\n", "", "self", ".", "load_state_dict", "(", "all_layers_params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.network.seq2seq.Seq2SeqModel._encoder_step": [[123, 142], ["seq2seq.Seq2SeqModel.encoder", "torch.zeros().to().new_full", "torch.zeros().to().new_full", "torch.zeros().to().new_full", "torch.zeros().to().new_full", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["None"], ["", "def", "_encoder_step", "(", "self", ",", "to_predict", ":", "torch", ".", "Tensor", ",", "lengths_tensor", ":", "torch", ".", "Tensor", ",", "batch_size", ":", "int", ")", "->", "Tuple", ":", "\n", "        ", "\"\"\"\n        Step of the encoder.\n\n        Args:\n            to_predict (~torch.Tensor): The elements to predict the tags.\n            lengths_tensor (~torch.Tensor): The lengths of the batch elements (since packed).\n            batch_size (int): The number of element in the batch.\n\n        Return:\n            A tuple (``x``, ``y``, ``z``) where ``x`` is the decoder input (a zeros tensor), ``y`` is the decoder\n            hidden states and ``z`` is the encoder outputs for the attention weighs if needed.\n        \"\"\"", "\n", "encoder_outputs", ",", "decoder_hidden", "=", "self", ".", "encoder", "(", "to_predict", ",", "lengths_tensor", ")", "\n", "\n", "# -1 for BOS token", "\n", "decoder_input", "=", "torch", ".", "zeros", "(", "1", ",", "batch_size", ",", "1", ")", ".", "to", "(", "self", ".", "device", ")", ".", "new_full", "(", "(", "1", ",", "batch_size", ",", "1", ")", ",", "-", "1", ")", "\n", "\n", "return", "decoder_input", ",", "decoder_hidden", ",", "encoder_outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.network.seq2seq.Seq2SeqModel._decoder_step": [[143, 214], ["lengths_tensor.max().item", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "seq2seq.Seq2SeqModel.decoder", "decoder_output.topk", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "target.transpose.transpose.transpose", "range", "range", "lengths_tensor.max", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "random.random", "target[].view", "seq2seq.Seq2SeqModel.decoder", "seq2seq.Seq2SeqModel.decoder", "decoder_output.topk", "target[].view.view"], "methods", ["None"], ["", "def", "_decoder_step", "(", "\n", "self", ",", "\n", "decoder_input", ":", "torch", ".", "Tensor", ",", "\n", "decoder_hidden", ":", "tuple", ",", "\n", "encoder_outputs", ":", "torch", ".", "Tensor", ",", "\n", "target", ":", "Union", "[", "torch", ".", "Tensor", ",", "None", "]", ",", "\n", "lengths_tensor", ":", "torch", ".", "Tensor", ",", "\n", "batch_size", ":", "int", ",", "\n", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "\"\"\"\n        Step of the encoder.\n\n        Args:\n            decoder_input (~torch.Tensor): The decoder input (so the encode output).\n            decoder_hidden (~torch.Tensor): The encoder hidden state (so the encode hidden state).\n            encoder_outputs (~torch.Tensor): The encoder outputs for the attention mechanism weighs if needed.\n            target (~torch.Tensor) : The target of the batch element, use only when we retrain the model since we do\n                `teacher forcing <https://machinelearningmastery.com/teacher-forcing-for-recurrent-neural-networks/>`_.\n            lengths_tensor (~torch.Tensor): The lengths of the batch elements (since packed).\n            batch_size (int): Number of element in the batch.\n\n        Return:\n            A Tensor of the predicted sequence.\n        \"\"\"", "\n", "max_length", "=", "lengths_tensor", ".", "max", "(", ")", ".", "item", "(", ")", "\n", "\n", "# The empty prediction sequence", "\n", "# +1 for the EOS", "\n", "prediction_sequence", "=", "torch", ".", "zeros", "(", "max_length", "+", "1", ",", "batch_size", ",", "self", ".", "output_size", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "# We decode the first token", "\n", "decoder_output", ",", "decoder_hidden", ",", "attention_weights", "=", "self", ".", "decoder", "(", "\n", "decoder_input", ",", "decoder_hidden", ",", "encoder_outputs", ",", "lengths_tensor", "\n", ")", "\n", "\n", "if", "attention_weights", "is", "not", "None", ":", "\n", "# We fill the attention", "\n", "            ", "attention_output", "=", "torch", ".", "ones", "(", "max_length", "+", "1", ",", "batch_size", ",", "1", ",", "max_length", ")", "\n", "attention_output", "[", "0", "]", "=", "attention_weights", "\n", "\n", "# We fill the first token prediction", "\n", "", "prediction_sequence", "[", "0", "]", "=", "decoder_output", "\n", "\n", "# The decoder next step input (the predicted idx of the previous token)", "\n", "_", ",", "decoder_input", "=", "decoder_output", ".", "topk", "(", "1", ")", "\n", "\n", "# we loop the same steps for the rest of the sequence", "\n", "if", "target", "is", "not", "None", "and", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "# force the real target value instead of the predicted one to help learning", "\n", "            ", "target", "=", "target", ".", "transpose", "(", "0", ",", "1", ")", "\n", "for", "idx", "in", "range", "(", "max_length", ")", ":", "\n", "                ", "decoder_input", "=", "target", "[", "idx", "]", ".", "view", "(", "1", ",", "batch_size", ",", "1", ")", "\n", "decoder_output", ",", "decoder_hidden", ",", "attention_weights", "=", "self", ".", "decoder", "(", "\n", "decoder_input", ",", "decoder_hidden", ",", "encoder_outputs", ",", "lengths_tensor", "\n", ")", "\n", "prediction_sequence", "[", "idx", "+", "1", "]", "=", "decoder_output", "\n", "\n", "", "", "else", ":", "\n", "            ", "for", "idx", "in", "range", "(", "max_length", ")", ":", "\n", "                ", "decoder_output", ",", "decoder_hidden", ",", "attention_weights", "=", "self", ".", "decoder", "(", "\n", "decoder_input", ".", "view", "(", "1", ",", "batch_size", ",", "1", ")", ",", "\n", "decoder_hidden", ",", "\n", "encoder_outputs", ",", "\n", "lengths_tensor", ",", "\n", ")", "\n", "\n", "prediction_sequence", "[", "idx", "+", "1", "]", "=", "decoder_output", "\n", "\n", "_", ",", "decoder_input", "=", "decoder_output", ".", "topk", "(", "1", ")", "\n", "\n", "", "", "return", "prediction_sequence", "\n", "", "", ""]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.network.fasttext_seq2seq.FastTextSeq2SeqModel.__init__": [[29, 64], ["seq2seq.Seq2SeqModel.__init__", "fasttext_seq2seq.FastTextSeq2SeqModel._load_weights", "fasttext_seq2seq.FastTextSeq2SeqModel._load_pre_trained_weights"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.timer.timer.Timer.__init__", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.network.seq2seq.Seq2SeqModel._load_weights", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.network.seq2seq.Seq2SeqModel._load_pre_trained_weights"], ["def", "__init__", "(", "\n", "self", ",", "\n", "cache_dir", ":", "str", ",", "\n", "device", ":", "torch", ".", "device", ",", "\n", "input_size", ":", "int", "=", "300", ",", "\n", "encoder_hidden_size", ":", "int", "=", "1024", ",", "\n", "encoder_num_layers", ":", "int", "=", "1", ",", "\n", "decoder_hidden_size", ":", "int", "=", "1024", ",", "\n", "decoder_num_layers", ":", "int", "=", "1", ",", "\n", "output_size", ":", "int", "=", "9", ",", "\n", "attention_mechanism", ":", "bool", "=", "False", ",", "\n", "verbose", ":", "bool", "=", "True", ",", "\n", "path_to_retrained_model", ":", "Union", "[", "str", ",", "None", "]", "=", "None", ",", "\n", "pre_trained_weights", ":", "bool", "=", "True", ",", "\n", ")", "->", "None", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\n", "device", ",", "\n", "input_size", "=", "input_size", ",", "\n", "encoder_hidden_size", "=", "encoder_hidden_size", ",", "\n", "encoder_num_layers", "=", "encoder_num_layers", ",", "\n", "decoder_hidden_size", "=", "decoder_hidden_size", ",", "\n", "decoder_num_layers", "=", "decoder_num_layers", ",", "\n", "output_size", "=", "output_size", ",", "\n", "attention_mechanism", "=", "attention_mechanism", ",", "\n", "verbose", "=", "verbose", ",", "\n", ")", "\n", "\n", "if", "path_to_retrained_model", "is", "not", "None", ":", "\n", "            ", "self", ".", "_load_weights", "(", "path_to_retrained_model", ")", "\n", "", "elif", "pre_trained_weights", ":", "\n", "# Means we use the pretrained weights", "\n", "            ", "model_weights_name", "=", "\"fasttext\"", "\n", "if", "attention_mechanism", ":", "\n", "                ", "model_weights_name", "+=", "\"_attention\"", "\n", "", "self", ".", "_load_pre_trained_weights", "(", "model_weights_name", ",", "cache_dir", "=", "cache_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.network.fasttext_seq2seq.FastTextSeq2SeqModel.forward": [[65, 99], ["to_predict.size", "fasttext_seq2seq.FastTextSeq2SeqModel._encoder_step", "fasttext_seq2seq.FastTextSeq2SeqModel._decoder_step"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.network.seq2seq.Seq2SeqModel._encoder_step", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.network.seq2seq.Seq2SeqModel._decoder_step"], ["", "", "def", "forward", "(", "\n", "self", ",", "\n", "to_predict", ":", "torch", ".", "Tensor", ",", "\n", "lengths_tensor", ":", "torch", ".", "Tensor", ",", "\n", "target", ":", "Union", "[", "torch", ".", "Tensor", ",", "None", "]", "=", "None", ",", "\n", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "\"\"\"\n        Callable method as per PyTorch forward method to get tags prediction over the components of\n        an address.\n\n        Args:\n            to_predict (~torch.Tensor): The elements to predict the tags.\n            lengths_tensor (~torch.Tensor) : The lengths of the batch elements (since packed).\n            target (~torch.Tensor) : The target of the batch element, use only when we retrain the model since we do\n                `teacher forcing <https://machinelearningmastery.com/teacher-forcing-for-recurrent-neural-networks/>`_.\n                Default value is None since we mostly don't have the target except for retrain.\n\n        Return:\n            A Tensor of the predicted sequence.\n        \"\"\"", "\n", "batch_size", "=", "to_predict", ".", "size", "(", "0", ")", "\n", "\n", "decoder_input", ",", "decoder_hidden", ",", "encoder_outputs", "=", "self", ".", "_encoder_step", "(", "to_predict", ",", "lengths_tensor", ",", "batch_size", ")", "\n", "\n", "prediction_sequence", "=", "self", ".", "_decoder_step", "(", "\n", "decoder_input", ",", "\n", "decoder_hidden", ",", "\n", "encoder_outputs", ",", "\n", "target", ",", "\n", "lengths_tensor", ",", "\n", "batch_size", ",", "\n", ")", "\n", "\n", "return", "prediction_sequence", "\n", "", "", ""]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.network.embedding_network.EmbeddingNetwork.__init__": [[26, 51], ["torch.Module.__init__", "torch.LSTM", "torch.LSTM", "torch.Linear", "torch.Linear", "torch.MaxPool1d", "torch.MaxPool1d"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.timer.timer.Timer.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "input_size", ":", "int", ",", "\n", "hidden_size", ":", "int", ",", "\n", "projection_size", ":", "int", ",", "\n", "num_layers", ":", "int", "=", "1", ",", "\n", "maxpool", "=", "False", ",", "\n", "maxpool_kernel_size", "=", "3", ",", "\n", ")", "->", "None", ":", "\n", "# pylint: disable=too-many-arguments", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "hidden_size", "=", "hidden_size", "\n", "self", ".", "model", "=", "nn", ".", "LSTM", "(", "\n", "input_size", ",", "\n", "self", ".", "hidden_size", ",", "\n", "num_layers", "=", "num_layers", ",", "\n", "batch_first", "=", "True", ",", "\n", "bidirectional", "=", "True", ",", "\n", ")", "\n", "\n", "self", ".", "projection_layer", "=", "nn", ".", "Linear", "(", "2", "*", "hidden_size", ",", "projection_size", ")", "\n", "\n", "self", ".", "maxpool_kernel_size", "=", "maxpool_kernel_size", "if", "maxpool", "else", "1", "\n", "self", ".", "maxpooling_layer", "=", "nn", ".", "MaxPool1d", "(", "maxpool_kernel_size", ")", "if", "maxpool", "else", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.network.embedding_network.EmbeddingNetwork.forward": [[52, 108], ["to_predict.transpose().float.transpose().float.size", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "to_predict.transpose().float.transpose().float.transpose().float", "range", "torch.zeros().to.transpose", "torch.zeros().to.transpose", "to_predict.transpose().float.transpose().float.size", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "embedding_network.EmbeddingNetwork.model", "torch.nn.utils.rnn.pad_packed_sequence", "torch.nn.utils.rnn.pad_packed_sequence", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "range", "embedding_network.EmbeddingNetwork.projection_layer", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "to_predict.transpose().float.transpose().float.transpose", "lengths.append", "torch.tensor().cpu", "torch.tensor().cpu", "torch.tensor().cpu", "torch.tensor().cpu", "embedding_network.EmbeddingNetwork._max_pool", "to_predict.transpose().float.transpose().float.size", "to_predict.transpose().float.transpose().float.size", "int", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "padded_output.size", "padded_output.size", "to_predict.transpose().float.transpose().float.size"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.network.embedding_network.EmbeddingNetwork._max_pool"], ["", "def", "forward", "(", "self", ",", "to_predict", ":", "torch", ".", "Tensor", ",", "decomposition_lengths", ":", "Tuple", "[", "List", "]", ")", "->", "torch", ".", "Tensor", ":", "\n", "# pylint: disable=too-many-locals", "\n", "        ", "\"\"\"\n        Callable method to aggregate the byte-pair embeddings from decomposed words.\n\n        Args:\n            to_predict (~torch.Tensor): The address to extract the embedding on.\n            decomposition_lengths (tuple[list]) : The decomposition lengths of the address components.\n\n        Return:\n            The embedded address vector tensor.\n        \"\"\"", "\n", "device", "=", "to_predict", ".", "device", "\n", "batch_size", "=", "to_predict", ".", "size", "(", "0", ")", "\n", "\n", "embeddings", "=", "torch", ".", "zeros", "(", "\n", "to_predict", ".", "size", "(", "1", ")", ",", "\n", "to_predict", ".", "size", "(", "0", ")", ",", "\n", "int", "(", "to_predict", ".", "size", "(", "3", ")", "/", "self", ".", "maxpool_kernel_size", ")", ",", "\n", ")", ".", "to", "(", "device", ")", "\n", "\n", "to_predict", "=", "to_predict", ".", "transpose", "(", "0", ",", "1", ")", ".", "float", "(", ")", "\n", "\n", "for", "i", "in", "range", "(", "to_predict", ".", "size", "(", "0", ")", ")", ":", "\n", "            ", "lengths", "=", "[", "]", "\n", "\n", "# reorder decomposition, could use a transpose but take a LOT (like a LOT) of memory", "\n", "for", "decomposition_length", "in", "decomposition_lengths", ":", "\n", "                ", "lengths", ".", "append", "(", "decomposition_length", "[", "i", "]", ")", "\n", "\n", "", "packed_sequence", "=", "pack_padded_sequence", "(", "\n", "to_predict", "[", "i", "]", ",", "\n", "torch", ".", "tensor", "(", "lengths", ")", ".", "cpu", "(", ")", ",", "\n", "batch_first", "=", "True", ",", "\n", "enforce_sorted", "=", "False", ",", "\n", ")", "\n", "\n", "packed_output", ",", "_", "=", "self", ".", "model", "(", "packed_sequence", ")", "\n", "\n", "# pad packed the output to be applied later on in the projection layer", "\n", "padded_output", ",", "padded_output_lengths", "=", "pad_packed_sequence", "(", "packed_output", ",", "batch_first", "=", "True", ")", "\n", "\n", "# filling the embedding by idx", "\n", "word_context", "=", "torch", ".", "zeros", "(", "padded_output", ".", "size", "(", "0", ")", ",", "padded_output", ".", "size", "(", "2", ")", ")", ".", "to", "(", "device", ")", "\n", "for", "j", "in", "range", "(", "batch_size", ")", ":", "\n", "                ", "word_context", "[", "j", "]", "=", "padded_output", "[", "j", ",", "padded_output_lengths", "[", "j", "]", "-", "1", ",", ":", "]", "\n", "\n", "# projection layer from dim 600 to 300", "\n", "", "projection_output", "=", "self", ".", "projection_layer", "(", "word_context", ")", "\n", "\n", "if", "self", ".", "maxpooling_layer", "is", "not", "None", ":", "\n", "                ", "projection_output", "=", "self", ".", "_max_pool", "(", "projection_output", ")", "\n", "\n", "", "embeddings", "[", "i", "]", "=", "projection_output", "\n", "\n", "", "return", "embeddings", ".", "transpose", "(", "0", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.network.embedding_network.EmbeddingNetwork._max_pool": [[109, 119], ["embedding_network.EmbeddingNetwork.maxpooling_layer", "embedding_network.EmbeddingNetwork.view", "embedding_network.EmbeddingNetwork.view.view", "embedding_network.EmbeddingNetwork.size", "embedding_network.EmbeddingNetwork.size", "embedding_network.EmbeddingNetwork.view.size", "embedding_network.EmbeddingNetwork.view.size"], "methods", ["None"], ["", "def", "_max_pool", "(", "self", ",", "projection_output", ")", ":", "\n", "        ", "\"\"\"\n        Max pooling the projection output of the projection layer.\n        \"\"\"", "\n", "pooled_output", "=", "self", ".", "maxpooling_layer", "(", "\n", "projection_output", ".", "view", "(", "1", ",", "projection_output", ".", "size", "(", "0", ")", ",", "projection_output", ".", "size", "(", "1", ")", ")", "\n", ")", "\n", "projection_output", "=", "pooled_output", ".", "view", "(", "pooled_output", ".", "size", "(", "1", ")", ",", "pooled_output", ".", "size", "(", "2", ")", ")", "\n", "\n", "return", "projection_output", "\n", "", "", ""]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.network.test_seq2seq.Seq2SeqTest.setUpClass": [[18, 34], ["torch.device", "torch.device", "os.path.join", "os.path.expanduser"], "methods", ["None"], ["    ", "@", "classmethod", "\n", "def", "setUpClass", "(", "cls", ")", "->", "None", ":", "\n", "        ", "cls", ".", "a_torch_device", "=", "torch", ".", "device", "(", "\"cuda:0\"", ")", "\n", "cls", ".", "a_cpu_device", "=", "torch", ".", "device", "(", "\"cpu\"", ")", "\n", "\n", "cls", ".", "encoder_input_size_dim", "=", "300", "\n", "cls", ".", "encoder_hidden_size", "=", "1024", "\n", "cls", ".", "encoder_num_layers", "=", "1", "\n", "cls", ".", "decoder_input_size_dim", "=", "1", "\n", "cls", ".", "decoder_hidden_size", "=", "1024", "\n", "cls", ".", "decoder_num_layers", "=", "1", "\n", "cls", ".", "decoder_output_size", "=", "9", "\n", "\n", "cls", ".", "a_fake_retrain_path", "=", "\"a/fake/path/retrain/model\"", "\n", "\n", "cls", ".", "cache_dir", "=", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "expanduser", "(", "\"~\"", ")", ",", "\".cache\"", ",", "\"deepparse\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.network.test_seq2seq.Seq2SeqTest.test_whenInstantiateASeq2SeqModel_thenParametersAreOk": [[35, 58], ["deepparse.network.Seq2SeqModel", "test_seq2seq.Seq2SeqTest.assertEqual", "test_seq2seq.Seq2SeqTest.assertEqual", "test_seq2seq.Seq2SeqTest.assertEqual", "test_seq2seq.Seq2SeqTest.assertEqual", "test_seq2seq.Seq2SeqTest.assertEqual", "test_seq2seq.Seq2SeqTest.assertEqual", "test_seq2seq.Seq2SeqTest.assertEqual", "test_seq2seq.Seq2SeqTest.assertEqual", "test_seq2seq.Seq2SeqTest.assertEqual", "test_seq2seq.Seq2SeqTest.assertEqual"], "methods", ["None"], ["", "def", "test_whenInstantiateASeq2SeqModel_thenParametersAreOk", "(", "self", ")", ":", "\n", "        ", "seq2seq_model", "=", "Seq2SeqModel", "(", "\n", "self", ".", "a_cpu_device", ",", "\n", "input_size", "=", "self", ".", "encoder_input_size_dim", ",", "\n", "encoder_hidden_size", "=", "self", ".", "encoder_hidden_size", ",", "\n", "encoder_num_layers", "=", "self", ".", "encoder_num_layers", ",", "\n", "decoder_hidden_size", "=", "self", ".", "decoder_hidden_size", ",", "\n", "decoder_num_layers", "=", "self", ".", "decoder_num_layers", ",", "\n", "output_size", "=", "self", ".", "decoder_output_size", ",", "\n", ")", "\n", "\n", "self", ".", "assertEqual", "(", "self", ".", "a_cpu_device", ",", "seq2seq_model", ".", "device", ")", "\n", "\n", "self", ".", "assertEqual", "(", "self", ".", "encoder_input_size_dim", ",", "seq2seq_model", ".", "encoder", ".", "lstm", ".", "input_size", ")", "\n", "self", ".", "assertEqual", "(", "self", ".", "encoder_hidden_size", ",", "seq2seq_model", ".", "encoder", ".", "lstm", ".", "hidden_size", ")", "\n", "self", ".", "assertEqual", "(", "self", ".", "encoder_num_layers", ",", "seq2seq_model", ".", "encoder", ".", "lstm", ".", "num_layers", ")", "\n", "self", ".", "assertEqual", "(", "self", ".", "a_cpu_device", ",", "seq2seq_model", ".", "encoder", ".", "lstm", ".", "all_weights", "[", "0", "]", "[", "0", "]", ".", "device", ")", "\n", "\n", "self", ".", "assertEqual", "(", "self", ".", "decoder_input_size_dim", ",", "seq2seq_model", ".", "decoder", ".", "lstm", ".", "input_size", ")", "\n", "self", ".", "assertEqual", "(", "self", ".", "decoder_hidden_size", ",", "seq2seq_model", ".", "decoder", ".", "lstm", ".", "hidden_size", ")", "\n", "self", ".", "assertEqual", "(", "self", ".", "decoder_num_layers", ",", "seq2seq_model", ".", "decoder", ".", "lstm", ".", "num_layers", ")", "\n", "self", ".", "assertEqual", "(", "self", ".", "decoder_output_size", ",", "seq2seq_model", ".", "decoder", ".", "linear", ".", "out_features", ")", "\n", "self", ".", "assertEqual", "(", "self", ".", "a_cpu_device", ",", "seq2seq_model", ".", "decoder", ".", "lstm", ".", "all_weights", "[", "0", "]", "[", "0", "]", ".", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.network.test_seq2seq.Seq2SeqTest.test_whenInstantiateASeq2SeqModelGPU_thenParametersAreOk": [[59, 83], ["unittest.skipIf", "deepparse.network.Seq2SeqModel", "test_seq2seq.Seq2SeqTest.assertEqual", "test_seq2seq.Seq2SeqTest.assertEqual", "test_seq2seq.Seq2SeqTest.assertEqual", "test_seq2seq.Seq2SeqTest.assertEqual", "test_seq2seq.Seq2SeqTest.assertEqual", "test_seq2seq.Seq2SeqTest.assertEqual", "test_seq2seq.Seq2SeqTest.assertEqual", "test_seq2seq.Seq2SeqTest.assertEqual", "test_seq2seq.Seq2SeqTest.assertEqual", "test_seq2seq.Seq2SeqTest.assertEqual", "torch.cuda.is_available"], "methods", ["None"], ["", "@", "skipIf", "(", "not", "torch", ".", "cuda", ".", "is_available", "(", ")", ",", "\"no gpu available\"", ")", "\n", "def", "test_whenInstantiateASeq2SeqModelGPU_thenParametersAreOk", "(", "self", ")", ":", "\n", "        ", "seq2seq_model", "=", "Seq2SeqModel", "(", "\n", "self", ".", "a_torch_device", ",", "\n", "input_size", "=", "self", ".", "encoder_input_size_dim", ",", "\n", "encoder_hidden_size", "=", "self", ".", "encoder_hidden_size", ",", "\n", "encoder_num_layers", "=", "self", ".", "encoder_num_layers", ",", "\n", "decoder_hidden_size", "=", "self", ".", "decoder_hidden_size", ",", "\n", "decoder_num_layers", "=", "self", ".", "decoder_num_layers", ",", "\n", "output_size", "=", "self", ".", "decoder_output_size", ",", "\n", ")", "\n", "\n", "self", ".", "assertEqual", "(", "self", ".", "a_torch_device", ",", "seq2seq_model", ".", "device", ")", "\n", "\n", "self", ".", "assertEqual", "(", "self", ".", "encoder_input_size_dim", ",", "seq2seq_model", ".", "encoder", ".", "lstm", ".", "input_size", ")", "\n", "self", ".", "assertEqual", "(", "self", ".", "encoder_hidden_size", ",", "seq2seq_model", ".", "encoder", ".", "lstm", ".", "hidden_size", ")", "\n", "self", ".", "assertEqual", "(", "self", ".", "encoder_num_layers", ",", "seq2seq_model", ".", "encoder", ".", "lstm", ".", "num_layers", ")", "\n", "self", ".", "assertEqual", "(", "self", ".", "a_torch_device", ",", "seq2seq_model", ".", "encoder", ".", "lstm", ".", "all_weights", "[", "0", "]", "[", "0", "]", ".", "device", ")", "\n", "\n", "self", ".", "assertEqual", "(", "self", ".", "decoder_input_size_dim", ",", "seq2seq_model", ".", "decoder", ".", "lstm", ".", "input_size", ")", "\n", "self", ".", "assertEqual", "(", "self", ".", "decoder_hidden_size", ",", "seq2seq_model", ".", "decoder", ".", "lstm", ".", "hidden_size", ")", "\n", "self", ".", "assertEqual", "(", "self", ".", "decoder_num_layers", ",", "seq2seq_model", ".", "decoder", ".", "lstm", ".", "num_layers", ")", "\n", "self", ".", "assertEqual", "(", "self", ".", "decoder_output_size", ",", "seq2seq_model", ".", "decoder", ".", "linear", ".", "out_features", ")", "\n", "self", ".", "assertEqual", "(", "self", ".", "a_torch_device", ",", "seq2seq_model", ".", "decoder", ".", "lstm", ".", "all_weights", "[", "0", "]", "[", "0", "]", ".", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.network.test_seq2seq.Seq2SeqTest.test_whenSameOutput_thenReturnTrue": [[84, 95], ["deepparse.network.Seq2SeqModel", "test_seq2seq.Seq2SeqTest.assertTrue", "deepparse.network.Seq2SeqModel.same_output_dim"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.network.seq2seq.Seq2SeqModel.same_output_dim"], ["", "def", "test_whenSameOutput_thenReturnTrue", "(", "self", ")", ":", "\n", "        ", "seq2seq_model", "=", "Seq2SeqModel", "(", "\n", "self", ".", "a_cpu_device", ",", "\n", "input_size", "=", "self", ".", "encoder_input_size_dim", ",", "\n", "encoder_hidden_size", "=", "self", ".", "encoder_hidden_size", ",", "\n", "encoder_num_layers", "=", "self", ".", "encoder_num_layers", ",", "\n", "decoder_hidden_size", "=", "self", ".", "decoder_hidden_size", ",", "\n", "decoder_num_layers", "=", "self", ".", "decoder_num_layers", ",", "\n", "output_size", "=", "self", ".", "decoder_output_size", ",", "\n", ")", "\n", "self", ".", "assertTrue", "(", "seq2seq_model", ".", "same_output_dim", "(", "self", ".", "decoder_output_size", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.network.test_seq2seq.Seq2SeqTest.test_whenNotSameOutput_thenReturnFalse": [[96, 107], ["deepparse.network.Seq2SeqModel", "test_seq2seq.Seq2SeqTest.assertFalse", "deepparse.network.Seq2SeqModel.same_output_dim"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.network.seq2seq.Seq2SeqModel.same_output_dim"], ["", "def", "test_whenNotSameOutput_thenReturnFalse", "(", "self", ")", ":", "\n", "        ", "seq2seq_model", "=", "Seq2SeqModel", "(", "\n", "self", ".", "a_cpu_device", ",", "\n", "input_size", "=", "self", ".", "encoder_input_size_dim", ",", "\n", "encoder_hidden_size", "=", "self", ".", "encoder_hidden_size", ",", "\n", "encoder_num_layers", "=", "self", ".", "encoder_num_layers", ",", "\n", "decoder_hidden_size", "=", "self", ".", "decoder_hidden_size", ",", "\n", "decoder_num_layers", "=", "self", ".", "decoder_num_layers", ",", "\n", "output_size", "=", "self", ".", "decoder_output_size", ",", "\n", ")", "\n", "self", ".", "assertFalse", "(", "seq2seq_model", ".", "same_output_dim", "(", "self", ".", "decoder_output_size", "-", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.network.test_seq2seq.Seq2SeqTest.test_whenHandleNewOutputDim_thenProperlyHandleNewDim": [[108, 128], ["deepparse.network.Seq2SeqModel", "deepparse.network.Seq2SeqModel.handle_new_output_dim", "test_seq2seq.Seq2SeqTest.assertEqual", "test_seq2seq.Seq2SeqTest.assertEqual"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.network.seq2seq.Seq2SeqModel.handle_new_output_dim"], ["", "def", "test_whenHandleNewOutputDim_thenProperlyHandleNewDim", "(", "self", ")", ":", "\n", "        ", "seq2seq_model", "=", "Seq2SeqModel", "(", "\n", "self", ".", "a_cpu_device", ",", "\n", "input_size", "=", "self", ".", "encoder_input_size_dim", ",", "\n", "encoder_hidden_size", "=", "self", ".", "encoder_hidden_size", ",", "\n", "encoder_num_layers", "=", "self", ".", "encoder_num_layers", ",", "\n", "decoder_hidden_size", "=", "self", ".", "decoder_hidden_size", ",", "\n", "decoder_num_layers", "=", "self", ".", "decoder_num_layers", ",", "\n", "output_size", "=", "self", ".", "decoder_output_size", ",", "\n", ")", "\n", "\n", "a_new_dim", "=", "1", "\n", "seq2seq_model", ".", "handle_new_output_dim", "(", "a_new_dim", ")", "\n", "\n", "expected", "=", "a_new_dim", "\n", "actual", "=", "seq2seq_model", ".", "output_size", "\n", "self", ".", "assertEqual", "(", "expected", ",", "actual", ")", "\n", "\n", "actual", "=", "seq2seq_model", ".", "decoder", ".", "linear", ".", "out_features", "\n", "self", ".", "assertEqual", "(", "expected", ",", "actual", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.network.test_seq2seq.Seq2SeqTest.test_givenSeq2seqModel_whenLoadPreTrainedWeightsVerboseGPU_thenWarningsRaised": [[129, 152], ["unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.skipIf", "deepparse.network.Seq2SeqModel", "unittest.mock.patch", "torch.cuda.is_available", "test_seq2seq.Seq2SeqTest.assertWarns", "deepparse.network.Seq2SeqModel._load_pre_trained_weights"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.network.seq2seq.Seq2SeqModel._load_pre_trained_weights"], ["", "@", "patch", "(", "\"deepparse.network.seq2seq.latest_version\"", ")", "\n", "@", "patch", "(", "\"os.path.isfile\"", ")", "\n", "@", "patch", "(", "\"deepparse.network.seq2seq.torch\"", ")", "\n", "@", "patch", "(", "\"deepparse.network.seq2seq.torch.nn.Module.load_state_dict\"", ")", "\n", "@", "skipIf", "(", "not", "torch", ".", "cuda", ".", "is_available", "(", ")", ",", "\"no gpu available\"", ")", "\n", "def", "test_givenSeq2seqModel_whenLoadPreTrainedWeightsVerboseGPU_thenWarningsRaised", "(", "\n", "self", ",", "torch_nn_mock", ",", "torch_mock", ",", "isfile_mock", ",", "last_version_mock", "\n", ")", ":", "\n", "        ", "seq2seq_model", "=", "Seq2SeqModel", "(", "\n", "self", ".", "a_torch_device", ",", "\n", "input_size", "=", "self", ".", "encoder_input_size_dim", ",", "\n", "encoder_hidden_size", "=", "self", ".", "encoder_hidden_size", ",", "\n", "encoder_num_layers", "=", "self", ".", "encoder_num_layers", ",", "\n", "decoder_hidden_size", "=", "self", ".", "decoder_hidden_size", ",", "\n", "decoder_num_layers", "=", "self", ".", "decoder_num_layers", ",", "\n", "output_size", "=", "self", ".", "decoder_output_size", ",", "\n", "verbose", "=", "True", ",", "\n", ")", "\n", "isfile_mock", ".", "return_value", "=", "True", "\n", "last_version_mock", ".", "return_value", "=", "False", "\n", "with", "patch", "(", "\"deepparse.network.seq2seq.download_weights\"", ")", ":", "\n", "            ", "with", "self", ".", "assertWarns", "(", "UserWarning", ")", ":", "\n", "                ", "seq2seq_model", ".", "_load_pre_trained_weights", "(", "\"a_model_type\"", ",", "cache_dir", "=", "self", ".", "cache_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.network.test_seq2seq.Seq2SeqTest.test_givenSeq2seqModel_whenLoadPreTrainedWeightsNotVerboseGPU_thenWarningsNotRaised": [[153, 177], ["unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.skipIf", "deepparse.network.Seq2SeqModel", "unittest.mock.patch", "test_seq2seq.Seq2SeqTest.assertEqual", "torch.cuda.is_available", "pytest.warns", "deepparse.network.Seq2SeqModel._load_pre_trained_weights", "len"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.network.seq2seq.Seq2SeqModel._load_pre_trained_weights"], ["", "", "", "@", "patch", "(", "\"deepparse.network.seq2seq.latest_version\"", ")", "\n", "@", "patch", "(", "\"os.path.isfile\"", ")", "\n", "@", "patch", "(", "\"deepparse.network.seq2seq.torch\"", ")", "\n", "@", "patch", "(", "\"deepparse.network.seq2seq.torch.nn.Module.load_state_dict\"", ")", "\n", "@", "skipIf", "(", "not", "torch", ".", "cuda", ".", "is_available", "(", ")", ",", "\"no gpu available\"", ")", "\n", "def", "test_givenSeq2seqModel_whenLoadPreTrainedWeightsNotVerboseGPU_thenWarningsNotRaised", "(", "\n", "self", ",", "torch_nn_mock", ",", "torch_mock", ",", "isfile_mock", ",", "last_version_mock", "\n", ")", ":", "\n", "        ", "seq2seq_model", "=", "Seq2SeqModel", "(", "\n", "self", ".", "a_cpu_device", ",", "\n", "input_size", "=", "self", ".", "encoder_input_size_dim", ",", "\n", "encoder_hidden_size", "=", "self", ".", "encoder_hidden_size", ",", "\n", "encoder_num_layers", "=", "self", ".", "encoder_num_layers", ",", "\n", "decoder_hidden_size", "=", "self", ".", "decoder_hidden_size", ",", "\n", "decoder_num_layers", "=", "self", ".", "decoder_num_layers", ",", "\n", "output_size", "=", "self", ".", "decoder_output_size", ",", "\n", "verbose", "=", "False", ",", "\n", ")", "\n", "isfile_mock", ".", "return_value", "=", "True", "\n", "last_version_mock", ".", "return_value", "=", "False", "\n", "with", "patch", "(", "\"deepparse.network.seq2seq.download_weights\"", ")", ":", "\n", "            ", "with", "pytest", ".", "warns", "(", "None", ")", "as", "record", ":", "\n", "                ", "seq2seq_model", ".", "_load_pre_trained_weights", "(", "\"a_model_type\"", ",", "cache_dir", "=", "self", ".", "cache_dir", ")", "\n", "", "self", ".", "assertEqual", "(", "0", ",", "len", "(", "record", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.network.test_seq2seq.Seq2SeqTest.test_givenSeq2seqModel_whenLoadPreTrainedWeightsVerboseCPU_thenWarningsRaised": [[178, 200], ["unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "deepparse.network.Seq2SeqModel", "unittest.mock.patch", "test_seq2seq.Seq2SeqTest.assertWarns", "deepparse.network.Seq2SeqModel._load_pre_trained_weights"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.network.seq2seq.Seq2SeqModel._load_pre_trained_weights"], ["", "", "@", "patch", "(", "\"deepparse.network.seq2seq.latest_version\"", ")", "\n", "@", "patch", "(", "\"os.path.isfile\"", ")", "\n", "@", "patch", "(", "\"deepparse.network.seq2seq.torch\"", ")", "\n", "@", "patch", "(", "\"deepparse.network.seq2seq.torch.nn.Module.load_state_dict\"", ")", "\n", "def", "test_givenSeq2seqModel_whenLoadPreTrainedWeightsVerboseCPU_thenWarningsRaised", "(", "\n", "self", ",", "torch_nn_mock", ",", "torch_mock", ",", "isfile_mock", ",", "last_version_mock", "\n", ")", ":", "\n", "        ", "seq2seq_model", "=", "Seq2SeqModel", "(", "\n", "self", ".", "a_cpu_device", ",", "\n", "input_size", "=", "self", ".", "encoder_input_size_dim", ",", "\n", "encoder_hidden_size", "=", "self", ".", "encoder_hidden_size", ",", "\n", "encoder_num_layers", "=", "self", ".", "encoder_num_layers", ",", "\n", "decoder_hidden_size", "=", "self", ".", "decoder_hidden_size", ",", "\n", "decoder_num_layers", "=", "self", ".", "decoder_num_layers", ",", "\n", "output_size", "=", "self", ".", "decoder_output_size", ",", "\n", "verbose", "=", "True", ",", "\n", ")", "\n", "isfile_mock", ".", "return_value", "=", "True", "\n", "last_version_mock", ".", "return_value", "=", "False", "\n", "with", "patch", "(", "\"deepparse.network.seq2seq.download_weights\"", ")", ":", "\n", "            ", "with", "self", ".", "assertWarns", "(", "UserWarning", ")", ":", "\n", "                ", "seq2seq_model", ".", "_load_pre_trained_weights", "(", "\"a_model_type\"", ",", "cache_dir", "=", "self", ".", "cache_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.network.test_seq2seq.Seq2SeqTest.test_givenSeq2seqModel_whenLoadPreTrainedWeightsNotVerboseCPU_thenWarningsNotRaised": [[201, 224], ["unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "deepparse.network.Seq2SeqModel", "unittest.mock.patch", "test_seq2seq.Seq2SeqTest.assertEqual", "pytest.warns", "deepparse.network.Seq2SeqModel._load_pre_trained_weights", "len"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.network.seq2seq.Seq2SeqModel._load_pre_trained_weights"], ["", "", "", "@", "patch", "(", "\"deepparse.network.seq2seq.latest_version\"", ")", "\n", "@", "patch", "(", "\"os.path.isfile\"", ")", "\n", "@", "patch", "(", "\"deepparse.network.seq2seq.torch\"", ")", "\n", "@", "patch", "(", "\"deepparse.network.seq2seq.torch.nn.Module.load_state_dict\"", ")", "\n", "def", "test_givenSeq2seqModel_whenLoadPreTrainedWeightsNotVerboseCPU_thenWarningsNotRaised", "(", "\n", "self", ",", "torch_nn_mock", ",", "torch_mock", ",", "isfile_mock", ",", "last_version_mock", "\n", ")", ":", "\n", "        ", "seq2seq_model", "=", "Seq2SeqModel", "(", "\n", "self", ".", "a_cpu_device", ",", "\n", "input_size", "=", "self", ".", "encoder_input_size_dim", ",", "\n", "encoder_hidden_size", "=", "self", ".", "encoder_hidden_size", ",", "\n", "encoder_num_layers", "=", "self", ".", "encoder_num_layers", ",", "\n", "decoder_hidden_size", "=", "self", ".", "decoder_hidden_size", ",", "\n", "decoder_num_layers", "=", "self", ".", "decoder_num_layers", ",", "\n", "output_size", "=", "self", ".", "decoder_output_size", ",", "\n", "verbose", "=", "False", ",", "\n", ")", "\n", "isfile_mock", ".", "return_value", "=", "True", "\n", "last_version_mock", ".", "return_value", "=", "False", "\n", "with", "patch", "(", "\"deepparse.network.seq2seq.download_weights\"", ")", ":", "\n", "            ", "with", "pytest", ".", "warns", "(", "None", ")", "as", "record", ":", "\n", "                ", "seq2seq_model", ".", "_load_pre_trained_weights", "(", "\"a_model_type\"", ",", "cache_dir", "=", "self", ".", "cache_dir", ")", "\n", "", "self", ".", "assertEqual", "(", "0", ",", "len", "(", "record", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.network.test_seq2seq.Seq2SeqTest.test_givenSeq2SeqModelRetrained_whenLoadRetrainedWeights_thenLoadProperly": [[225, 248], ["unittest.mock.patch", "unittest.mock.patch", "unittest.mock.MagicMock", "deepparse.network.Seq2SeqModel", "deepparse.network.Seq2SeqModel._load_weights", "torch_mock.assert_has_calls", "torch_nn_mock.assert_called", "torch_nn_mock.asser_has_calls", "unittest.mock.MagicMock.__getitem__", "unittest.mock.call.load", "unittest.mock.call"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.network.seq2seq.Seq2SeqModel._load_weights", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.dataset_container.dataset_container.DatasetContainer.__getitem__"], ["", "", "@", "patch", "(", "\"deepparse.network.seq2seq.torch\"", ")", "\n", "@", "patch", "(", "\"deepparse.network.seq2seq.torch.nn.Module.load_state_dict\"", ")", "\n", "def", "test_givenSeq2SeqModelRetrained_whenLoadRetrainedWeights_thenLoadProperly", "(", "self", ",", "torch_nn_mock", ",", "torch_mock", ")", ":", "\n", "        ", "all_layers_params_mock", "=", "MagicMock", "(", ")", "\n", "all_layers_params_mock", ".", "__getitem__", "(", ")", ".", "__len__", ".", "return_value", "=", "self", ".", "decoder_output_size", "\n", "torch_mock", ".", "load", ".", "return_value", "=", "all_layers_params_mock", "\n", "\n", "seq2seq_model", "=", "Seq2SeqModel", "(", "\n", "self", ".", "a_cpu_device", ",", "\n", "input_size", "=", "self", ".", "encoder_input_size_dim", ",", "\n", "encoder_hidden_size", "=", "self", ".", "encoder_hidden_size", ",", "\n", "encoder_num_layers", "=", "self", ".", "encoder_num_layers", ",", "\n", "decoder_hidden_size", "=", "self", ".", "decoder_hidden_size", ",", "\n", "decoder_num_layers", "=", "self", ".", "decoder_num_layers", ",", "\n", "output_size", "=", "self", ".", "decoder_output_size", ",", "\n", "verbose", "=", "True", ",", "\n", ")", "\n", "seq2seq_model", ".", "_load_weights", "(", "self", ".", "a_fake_retrain_path", ")", "\n", "\n", "torch_mock", ".", "assert_has_calls", "(", "[", "call", ".", "load", "(", "self", ".", "a_fake_retrain_path", ",", "map_location", "=", "self", ".", "a_cpu_device", ")", "]", ")", "\n", "\n", "torch_nn_mock", ".", "assert_called", "(", ")", "\n", "torch_nn_mock", ".", "asser_has_calls", "(", "[", "call", "(", "all_layers_params_mock", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.network.test_seq2seq.Seq2SeqTest.test_givenSeq2SeqModelRetrained_whenLoadRetrainedWeightsNewTagModel_thenLoadProperDict": [[249, 271], ["unittest.mock.patch", "unittest.mock.patch", "unittest.mock.MagicMock", "deepparse.network.Seq2SeqModel", "deepparse.network.Seq2SeqModel._load_weights", "unittest.mock.MagicMock.get.assert_called", "unittest.mock.MagicMock.__getitem__"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.network.seq2seq.Seq2SeqModel._load_weights", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.dataset_container.dataset_container.DatasetContainer.__getitem__"], ["", "@", "patch", "(", "\"deepparse.network.seq2seq.torch\"", ")", "\n", "@", "patch", "(", "\"deepparse.network.seq2seq.torch.nn.Module.load_state_dict\"", ")", "\n", "def", "test_givenSeq2SeqModelRetrained_whenLoadRetrainedWeightsNewTagModel_thenLoadProperDict", "(", "\n", "self", ",", "torch_nn_mock", ",", "torch_mock", "\n", ")", ":", "\n", "        ", "all_layers_params_mock", "=", "MagicMock", "(", "spec", "=", "dict", ")", "\n", "all_layers_params_mock", ".", "__getitem__", "(", ")", ".", "__len__", ".", "return_value", "=", "self", ".", "decoder_output_size", "\n", "torch_mock", ".", "load", ".", "return_value", "=", "all_layers_params_mock", "\n", "\n", "seq2seq_model", "=", "Seq2SeqModel", "(", "\n", "self", ".", "a_cpu_device", ",", "\n", "input_size", "=", "self", ".", "encoder_input_size_dim", ",", "\n", "encoder_hidden_size", "=", "self", ".", "encoder_hidden_size", ",", "\n", "encoder_num_layers", "=", "self", ".", "encoder_num_layers", ",", "\n", "decoder_hidden_size", "=", "self", ".", "decoder_hidden_size", ",", "\n", "decoder_num_layers", "=", "self", ".", "decoder_num_layers", ",", "\n", "output_size", "=", "self", ".", "decoder_output_size", ",", "\n", "verbose", "=", "True", ",", "\n", ")", "\n", "seq2seq_model", ".", "_load_weights", "(", "self", ".", "a_fake_retrain_path", ")", "\n", "\n", "all_layers_params_mock", ".", "get", ".", "assert_called", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.network.test_embedding_network.EmbeddingNetworkTest.setUpClass": [[9, 16], ["None"], "methods", ["None"], ["    ", "@", "classmethod", "\n", "def", "setUpClass", "(", "cls", ")", ":", "\n", "        ", "cls", ".", "a_input_size", "=", "2", "\n", "cls", ".", "a_hidden_size", "=", "2", "\n", "cls", ".", "a_projection_size", "=", "2", "\n", "cls", ".", "a_number_of_layers", "=", "1", "\n", "cls", ".", "a_maxpool_kernel_size", "=", "5", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.network.test_embedding_network.EmbeddingNetworkTest.setUp": [[17, 19], ["deepparse.network.EmbeddingNetwork"], "methods", ["None"], ["", "def", "setUp", "(", "self", ")", ":", "\n", "        ", "self", ".", "embedding_network", "=", "EmbeddingNetwork", "(", "self", ".", "a_input_size", ",", "self", ".", "a_hidden_size", ",", "self", ".", "a_projection_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.network.test_embedding_network.EmbeddingNetworkTest.test_whenInstanciatingEmbeddingNetwork_thenShouldInstanciateLSTMWithCorrectParameters": [[20, 35], ["unittest.mock.patch", "deepparse.network.EmbeddingNetwork", "lstm_mock.assert_called_with"], "methods", ["None"], ["", "@", "patch", "(", "\"deepparse.network.embedding_network.torch.nn.LSTM\"", ")", "\n", "def", "test_whenInstanciatingEmbeddingNetwork_thenShouldInstanciateLSTMWithCorrectParameters", "(", "self", ",", "lstm_mock", ")", ":", "\n", "        ", "self", ".", "embedding_network", "=", "EmbeddingNetwork", "(", "\n", "self", ".", "a_input_size", ",", "\n", "self", ".", "a_hidden_size", ",", "\n", "self", ".", "a_projection_size", ",", "\n", "self", ".", "a_number_of_layers", ",", "\n", ")", "\n", "\n", "lstm_mock", ".", "assert_called_with", "(", "\n", "self", ".", "a_input_size", ",", "\n", "self", ".", "a_hidden_size", ",", "\n", "num_layers", "=", "self", ".", "a_number_of_layers", ",", "\n", "batch_first", "=", "True", ",", "\n", "bidirectional", "=", "True", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.network.test_embedding_network.EmbeddingNetworkTest.test_whenInstanciatingEmbeddingNetwork_thenShouldInstanciateLinearLayerWithCorrectParameters": [[37, 47], ["unittest.mock.patch", "deepparse.network.EmbeddingNetwork", "linear_mock.assert_called_with"], "methods", ["None"], ["", "@", "patch", "(", "\"deepparse.network.embedding_network.torch.nn.Linear\"", ")", "\n", "def", "test_whenInstanciatingEmbeddingNetwork_thenShouldInstanciateLinearLayerWithCorrectParameters", "(", "self", ",", "linear_mock", ")", ":", "\n", "        ", "self", ".", "embedding_network", "=", "EmbeddingNetwork", "(", "\n", "self", ".", "a_input_size", ",", "\n", "self", ".", "a_hidden_size", ",", "\n", "self", ".", "a_projection_size", ",", "\n", "self", ".", "a_number_of_layers", ",", "\n", ")", "\n", "\n", "linear_mock", ".", "assert_called_with", "(", "2", "*", "self", ".", "a_hidden_size", ",", "self", ".", "a_projection_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.network.test_embedding_network.EmbeddingNetworkTest.test_givenMaxpool_whenInstanciatingEmbeddingNetwork_thenShouldInstanciateMaxpoolLayerWithCorrectParameters": [[48, 62], ["unittest.mock.patch", "deepparse.network.EmbeddingNetwork", "maxpool_mock.asset_called_with"], "methods", ["None"], ["", "@", "patch", "(", "\"deepparse.network.embedding_network.torch.nn.MaxPool1d\"", ")", "\n", "def", "test_givenMaxpool_whenInstanciatingEmbeddingNetwork_thenShouldInstanciateMaxpoolLayerWithCorrectParameters", "(", "\n", "self", ",", "maxpool_mock", "\n", ")", ":", "\n", "        ", "self", ".", "embedding_network", "=", "EmbeddingNetwork", "(", "\n", "self", ".", "a_input_size", ",", "\n", "self", ".", "a_hidden_size", ",", "\n", "self", ".", "a_projection_size", ",", "\n", "self", ".", "a_number_of_layers", ",", "\n", "maxpool", "=", "True", ",", "\n", "maxpool_kernel_size", "=", "self", ".", "a_maxpool_kernel_size", ",", "\n", ")", "\n", "\n", "maxpool_mock", ".", "asset_called_with", "(", "self", ".", "a_maxpool_kernel_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.network.base.Seq2SeqTestCase.setUpClass": [[12, 32], ["torch.device", "torch.device", "os.path.join", "os.path.join", "os.path.expanduser", "os.path.expanduser"], "methods", ["None"], ["from", "deepparse", ".", "parser", "import", "formatted_parsed_address", "\n", "from", "tests", ".", "base_capture_output", "import", "CaptureOutputTestCase", "\n", "\n", "\n", "class", "AddressParserPredictTestCase", "(", "CaptureOutputTestCase", ")", ":", "\n", "    ", "@", "classmethod", "\n", "def", "setUpClass", "(", "cls", ")", ":", "\n", "        ", "cls", ".", "a_best_model_type", "=", "\"best\"", "\n", "cls", ".", "a_bpemb_model_type", "=", "\"bpemb\"", "\n", "cls", ".", "a_fastest_model_type", "=", "\"fastest\"", "\n", "cls", ".", "a_fasttext_model_type", "=", "\"fasttext\"", "\n", "cls", ".", "a_fasttext_lightest_model_type", "=", "\"lightest\"", "\n", "cls", ".", "a_fasttext_light_model_type", "=", "\"fasttext-light\"", "\n", "\n", "# A address parsing example", "\n", "cls", ".", "a_complete_address", "=", "\"15 major st london ontario n5z1e1\"", "\n", "cls", ".", "a_municipality", "=", "\"london\"", "\n", "cls", ".", "a_postal_code", "=", "\"n5z1e1\"", "\n", "cls", ".", "a_province", "=", "\"ontario\"", "\n", "cls", ".", "a_street_name", "=", "\"major st\"", "\n", "cls", ".", "a_street_number", "=", "\"15\"", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.network.base.Seq2SeqTestCase.setup_encoder_mocks": [[33, 37], ["unittest.mock.MagicMock", "unittest.mock.MagicMock"], "methods", ["None"], ["\n", "cls", ".", "a_logging_path", "=", "\"data\"", "\n", "\n", "", "def", "setUp", "(", "self", ")", ":", "\n", "# a prediction vector with real values", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.network.base.Seq2SeqTestCase.setUp_decoder_mocks": [[38, 53], ["unittest.mock.MagicMock", "unittest.mock.MagicMock", "unittest.mock.MagicMock", "unittest.mock.MagicMock", "unittest.mock.MagicMock", "decoder_mock.__call__"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.timer.timer.Timer.__call__"], ["        ", "self", ".", "a_prediction_vector_for_a_complete_address", "=", "tensor", "(", "\n", "[", "\n", "[", "\n", "[", "\n", "-", "6.7080e-04", ",", "\n", "-", "7.3572e00", ",", "\n", "-", "1.4086e01", ",", "\n", "-", "1.1092e01", ",", "\n", "-", "2.1749e01", ",", "\n", "-", "1.1060e01", ",", "\n", "-", "1.4627e01", ",", "\n", "-", "1.4654e01", ",", "\n", "-", "2.8624e01", ",", "\n", "]", "\n", "]", ",", "\n", "[", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.network.base.Seq2SeqTestCase.assert_has_calls_tensor_equals": [[54, 60], ["zip", "base.Seq2SeqTestCase.assertEqual", "base.Seq2SeqTestCase.assertEqual", "[].tolist", "[].tolist"], "methods", ["None"], ["[", "\n", "-", "1.5119e01", ",", "\n", "-", "1.7881e-06", ",", "\n", "-", "1.7613e01", ",", "\n", "-", "1.3365e01", ",", "\n", "-", "2.9415e01", ",", "\n", "-", "2.3198e01", ",", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.network.test_bpemb_seq2seq_model_cpu.BPEmbSeq2SeqCPUTest.setUpClass": [[16, 23], ["super().setUpClass", "torch.tensor", "cls.a_target_vector.transpose"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_seq2seq_fasttext_model_gpu.FastTextSeq2SeqIntegrationTest.setUpClass"], ["    ", "@", "classmethod", "\n", "def", "setUpClass", "(", "cls", ")", ":", "\n", "        ", "super", "(", "BPEmbSeq2SeqCPUTest", ",", "cls", ")", ".", "setUpClass", "(", ")", "\n", "cls", ".", "model_type", "=", "\"bpemb\"", "\n", "\n", "cls", ".", "a_target_vector", "=", "torch", ".", "tensor", "(", "[", "[", "0", ",", "1", ",", "1", ",", "4", ",", "5", ",", "8", "]", ",", "[", "1", ",", "0", ",", "3", ",", "8", ",", "0", ",", "0", "]", "]", ",", "device", "=", "cls", ".", "a_cpu_device", ")", "\n", "cls", ".", "a_transpose_target_vector", "=", "cls", ".", "a_target_vector", ".", "transpose", "(", "0", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.network.test_bpemb_seq2seq_model_cpu.BPEmbSeq2SeqCPUTest.test_whenInstantiatingABPEmbSeq2SeqModel_thenShouldInstantiateAEmbeddingNetwork": [[24, 37], ["unittest.mock.patch", "deepparse.network.BPEmbSeq2SeqModel", "test_bpemb_seq2seq_model_cpu.BPEmbSeq2SeqCPUTest.assertEqual", "test_bpemb_seq2seq_model_cpu.BPEmbSeq2SeqCPUTest.assertEqual", "test_bpemb_seq2seq_model_cpu.BPEmbSeq2SeqCPUTest.assertEqual"], "methods", ["None"], ["", "@", "patch", "(", "\"deepparse.network.seq2seq.Seq2SeqModel._load_pre_trained_weights\"", ")", "\n", "def", "test_whenInstantiatingABPEmbSeq2SeqModel_thenShouldInstantiateAEmbeddingNetwork", "(", "\n", "self", ",", "load_pre_trained_weights_mock", "\n", ")", ":", "\n", "        ", "seq2seq_model", "=", "BPEmbSeq2SeqModel", "(", "\n", "self", ".", "cache_dir", ",", "self", ".", "a_cpu_device", ",", "output_size", "=", "self", ".", "output_size", ",", "verbose", "=", "self", ".", "verbose", "\n", ")", "\n", "\n", "self", ".", "assertEqual", "(", "self", ".", "input_size", ",", "seq2seq_model", ".", "embedding_network", ".", "model", ".", "input_size", ")", "\n", "self", ".", "assertEqual", "(", "self", ".", "hidden_size", ",", "seq2seq_model", ".", "embedding_network", ".", "model", ".", "hidden_size", ")", "\n", "self", ".", "assertEqual", "(", "\n", "self", ".", "projection_size", ",", "\n", "seq2seq_model", ".", "embedding_network", ".", "projection_layer", ".", "out_features", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.network.test_bpemb_seq2seq_model_cpu.BPEmbSeq2SeqCPUTest.test_givenNotLocalWeights_whenInstantiatingABPEmbSeq2SeqModel_thenShouldDownloadWeights": [[39, 49], ["unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "deepparse.network.BPEmbSeq2SeqModel", "download_weights_mock.assert_called_with"], "methods", ["None"], ["", "@", "patch", "(", "\"os.path.isfile\"", ")", "\n", "@", "patch", "(", "\"deepparse.network.seq2seq.torch\"", ")", "\n", "@", "patch", "(", "\"deepparse.network.seq2seq.Seq2SeqModel.load_state_dict\"", ")", "\n", "def", "test_givenNotLocalWeights_whenInstantiatingABPEmbSeq2SeqModel_thenShouldDownloadWeights", "(", "\n", "self", ",", "load_state_dict_mock", ",", "torch_mock", ",", "isfile_mock", "\n", ")", ":", "\n", "        ", "isfile_mock", ".", "return_value", "=", "False", "\n", "with", "patch", "(", "\"deepparse.network.seq2seq.download_weights\"", ")", "as", "download_weights_mock", ":", "\n", "            ", "BPEmbSeq2SeqModel", "(", "self", ".", "cache_dir", ",", "self", ".", "a_cpu_device", ",", "output_size", "=", "self", ".", "output_size", ",", "verbose", "=", "self", ".", "verbose", ")", "\n", "download_weights_mock", ".", "assert_called_with", "(", "self", ".", "model_type", ",", "self", ".", "a_root_path", ",", "verbose", "=", "self", ".", "verbose", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.network.test_bpemb_seq2seq_model_cpu.BPEmbSeq2SeqCPUTest.test_givenLocalWeightsNotLastVersion_whenInstantiatingABPEmbSeq2SeqModel_thenShouldDownloadWeights": [[50, 62], ["unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "deepparse.network.BPEmbSeq2SeqModel", "download_weights_mock.assert_called_with"], "methods", ["None"], ["", "", "@", "patch", "(", "\"deepparse.network.seq2seq.latest_version\"", ")", "\n", "@", "patch", "(", "\"os.path.isfile\"", ")", "\n", "@", "patch", "(", "\"deepparse.network.seq2seq.torch\"", ")", "\n", "@", "patch", "(", "\"deepparse.network.seq2seq.Seq2SeqModel.load_state_dict\"", ")", "\n", "def", "test_givenLocalWeightsNotLastVersion_whenInstantiatingABPEmbSeq2SeqModel_thenShouldDownloadWeights", "(", "\n", "self", ",", "load_state_dict_mock", ",", "torch_mock", ",", "isfile_mock", ",", "last_version_mock", "\n", ")", ":", "\n", "        ", "isfile_mock", ".", "return_value", "=", "True", "\n", "last_version_mock", ".", "return_value", "=", "False", "\n", "with", "patch", "(", "\"deepparse.network.seq2seq.download_weights\"", ")", "as", "download_weights_mock", ":", "\n", "            ", "BPEmbSeq2SeqModel", "(", "self", ".", "cache_dir", ",", "self", ".", "a_cpu_device", ",", "output_size", "=", "self", ".", "output_size", ",", "verbose", "=", "self", ".", "verbose", ")", "\n", "download_weights_mock", ".", "assert_called_with", "(", "self", ".", "model_type", ",", "self", ".", "a_root_path", ",", "verbose", "=", "self", ".", "verbose", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.network.test_bpemb_seq2seq_model_cpu.BPEmbSeq2SeqCPUTest.test_givenLocalWeights_whenInstantiatingABPEmbSeq2SeqModel_thenShouldntDownloadWeights": [[63, 75], ["unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "deepparse.network.BPEmbSeq2SeqModel", "download_weights_mock.assert_not_called"], "methods", ["None"], ["", "", "@", "patch", "(", "\"deepparse.network.seq2seq.latest_version\"", ")", "\n", "@", "patch", "(", "\"os.path.isfile\"", ")", "\n", "@", "patch", "(", "\"deepparse.network.seq2seq.torch\"", ")", "\n", "@", "patch", "(", "\"deepparse.network.seq2seq.Seq2SeqModel.load_state_dict\"", ")", "\n", "def", "test_givenLocalWeights_whenInstantiatingABPEmbSeq2SeqModel_thenShouldntDownloadWeights", "(", "\n", "self", ",", "load_state_dict_mock", ",", "torch_mock", ",", "isfile_mock", ",", "last_version_mock", "\n", ")", ":", "\n", "        ", "isfile_mock", ".", "return_value", "=", "True", "\n", "last_version_mock", ".", "return_value", "=", "True", "\n", "with", "patch", "(", "\"deepparse.network.seq2seq.download_weights\"", ")", "as", "download_weights_mock", ":", "\n", "            ", "BPEmbSeq2SeqModel", "(", "self", ".", "cache_dir", ",", "self", ".", "a_cpu_device", ",", "output_size", "=", "self", ".", "output_size", ",", "verbose", "=", "self", ".", "verbose", ")", "\n", "download_weights_mock", ".", "assert_not_called", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.network.test_bpemb_seq2seq_model_cpu.BPEmbSeq2SeqCPUTest.test_givenRetrainedWeights_whenInstantiatingAFastTextSeq2SeqModel_thenShouldUseRetrainedWeights": [[76, 96], ["unittest.mock.patch", "unittest.mock.patch", "unittest.mock.MagicMock", "deepparse.network.BPEmbSeq2SeqModel", "torch_mock.assert_has_calls", "load_state_dict_mock.assert_has_calls", "unittest.mock.call.load", "unittest.mock.call"], "methods", ["None"], ["", "", "@", "patch", "(", "\"deepparse.network.seq2seq.torch\"", ")", "\n", "@", "patch", "(", "\"deepparse.network.seq2seq.Seq2SeqModel.load_state_dict\"", ")", "\n", "def", "test_givenRetrainedWeights_whenInstantiatingAFastTextSeq2SeqModel_thenShouldUseRetrainedWeights", "(", "\n", "self", ",", "load_state_dict_mock", ",", "torch_mock", "\n", ")", ":", "\n", "        ", "all_layers_params", "=", "MagicMock", "(", ")", "\n", "torch_mock", ".", "load", ".", "return_value", "=", "all_layers_params", "\n", "BPEmbSeq2SeqModel", "(", "\n", "self", ".", "cache_dir", ",", "\n", "self", ".", "a_cpu_device", ",", "\n", "output_size", "=", "self", ".", "output_size", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", "path_to_retrained_model", "=", "self", ".", "a_path_to_retrained_model", ",", "\n", ")", "\n", "\n", "torch_load_call", "=", "[", "call", ".", "load", "(", "self", ".", "a_path_to_retrained_model", ",", "map_location", "=", "self", ".", "a_cpu_device", ")", "]", "\n", "torch_mock", ".", "assert_has_calls", "(", "torch_load_call", ")", "\n", "\n", "load_state_dict_call", "=", "[", "call", "(", "all_layers_params", ")", "]", "\n", "load_state_dict_mock", ".", "assert_has_calls", "(", "load_state_dict_call", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.network.test_bpemb_seq2seq_model_cpu.BPEmbSeq2SeqCPUTest.test_whenInstantiateASeq2SeqModel_thenEncoderIsCalledOnce": [[97, 121], ["unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "deepparse.network.BPEmbSeq2SeqModel", "test_bpemb_seq2seq_model_cpu.BPEmbSeq2SeqCPUTest.setup_encoder_mocks", "deepparse.network.BPEmbSeq2SeqModel._encoder_step", "encoder_mock.assert_has_calls", "encoder_mock.__call__", "unittest.mock.MagicMock", "unittest.mock.MagicMock", "unittest.mock.call"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.network.base.Seq2SeqTestCase.setup_encoder_mocks", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.network.seq2seq.Seq2SeqModel._encoder_step", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.timer.timer.Timer.__call__"], ["", "@", "patch", "(", "\"deepparse.network.seq2seq.Encoder\"", ")", "\n", "@", "patch", "(", "\"deepparse.network.seq2seq.download_weights\"", ")", "\n", "@", "patch", "(", "\"deepparse.network.seq2seq.latest_version\"", ")", "\n", "@", "patch", "(", "\"os.path.isfile\"", ")", "\n", "@", "patch", "(", "\"deepparse.network.seq2seq.torch\"", ")", "\n", "@", "patch", "(", "\"deepparse.network.seq2seq.Seq2SeqModel.load_state_dict\"", ")", "\n", "def", "test_whenInstantiateASeq2SeqModel_thenEncoderIsCalledOnce", "(", "\n", "self", ",", "\n", "load_state_dict_mock", ",", "\n", "torch_mock", ",", "\n", "isfile_mock", ",", "\n", "last_version_mock", ",", "\n", "download_weights_mock", ",", "\n", "encoder_mock", ",", "\n", ")", ":", "\n", "        ", "seq2seq_model", "=", "BPEmbSeq2SeqModel", "(", "self", ".", "cache_dir", ",", "self", ".", "a_cpu_device", ",", "self", ".", "output_size", ",", "self", ".", "verbose", ")", "\n", "\n", "to_predict_mock", ",", "lengths_tensor_mock", "=", "self", ".", "setup_encoder_mocks", "(", ")", "\n", "encoder_mock", ".", "__call__", "(", ")", ".", "return_value", "=", "(", "MagicMock", "(", ")", ",", "MagicMock", "(", ")", ")", "\n", "seq2seq_model", ".", "_encoder_step", "(", "to_predict_mock", ",", "lengths_tensor_mock", ",", "self", ".", "a_batch_size", ")", "\n", "\n", "encoder_call", "=", "[", "call", "(", ")", "(", "to_predict_mock", ",", "lengths_tensor_mock", ")", "]", "\n", "\n", "encoder_mock", ".", "assert_has_calls", "(", "encoder_call", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.network.test_bpemb_seq2seq_model_cpu.BPEmbSeq2SeqCPUTest.test_whenInstantiateASeq2SeqModelNoTarget_thenDecoderIsCalled": [[122, 162], ["unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "deepparse.network.BPEmbSeq2SeqModel", "test_bpemb_seq2seq_model_cpu.BPEmbSeq2SeqCPUTest.setUp_decoder_mocks", "unittest.mock.MagicMock", "unittest.mock.MagicMock", "unittest.mock.MagicMock", "deepparse.network.BPEmbSeq2SeqModel._decoder_step", "decoder_mock.assert_has_calls", "unittest.mock.MagicMock.max", "unittest.mock.call"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.network.base.Seq2SeqTestCase.setUp_decoder_mocks", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.network.seq2seq.Seq2SeqModel._decoder_step"], ["", "@", "patch", "(", "\"deepparse.network.seq2seq.Decoder\"", ")", "\n", "@", "patch", "(", "\"deepparse.network.seq2seq.download_weights\"", ")", "\n", "@", "patch", "(", "\"deepparse.network.seq2seq.latest_version\"", ")", "\n", "@", "patch", "(", "\"os.path.isfile\"", ")", "\n", "@", "patch", "(", "\"deepparse.network.seq2seq.torch\"", ")", "\n", "@", "patch", "(", "\"deepparse.network.seq2seq.Seq2SeqModel.load_state_dict\"", ")", "\n", "def", "test_whenInstantiateASeq2SeqModelNoTarget_thenDecoderIsCalled", "(", "\n", "self", ",", "\n", "load_state_dict_mock", ",", "\n", "torch_mock", ",", "\n", "isfile_mock", ",", "\n", "last_version_mock", ",", "\n", "download_weights_mock", ",", "\n", "decoder_mock", ",", "\n", ")", ":", "\n", "        ", "seq2seq_model", "=", "BPEmbSeq2SeqModel", "(", "\n", "self", ".", "cache_dir", ",", "self", ".", "a_cpu_device", ",", "output_size", "=", "self", ".", "output_size", ",", "verbose", "=", "self", ".", "verbose", "\n", ")", "\n", "\n", "decoder_input_mock", ",", "decoder_hidden_mock", "=", "self", ".", "setUp_decoder_mocks", "(", "decoder_mock", ",", "attention_mechanism", "=", "False", ")", "\n", "\n", "view_mock", "=", "MagicMock", "(", ")", "\n", "decoder_input_mock", ".", "view", ".", "return_value", "=", "view_mock", "\n", "\n", "lengths_tensor_mock", "=", "MagicMock", "(", ")", "\n", "max_length", "=", "4", "# a sequence of 4 tokens", "\n", "lengths_tensor_mock", ".", "max", "(", ")", ".", "item", ".", "return_value", "=", "max_length", "\n", "encoder_outputs", "=", "MagicMock", "(", ")", "\n", "seq2seq_model", ".", "_decoder_step", "(", "\n", "decoder_input_mock", ",", "\n", "decoder_hidden_mock", ",", "\n", "encoder_outputs", ",", "\n", "self", ".", "a_none_target", ",", "\n", "lengths_tensor_mock", ",", "\n", "self", ".", "a_batch_size", ",", "\n", ")", "\n", "\n", "decoder_call", "=", "[", "call", "(", ")", "(", "view_mock", ",", "decoder_hidden_mock", ",", "encoder_outputs", ",", "lengths_tensor_mock", ")", "]", "*", "max_length", "\n", "\n", "decoder_mock", ".", "assert_has_calls", "(", "decoder_call", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.network.test_bpemb_seq2seq_model_cpu.BPEmbSeq2SeqCPUTest.test_whenInstantiateASeq2SeqAttModelNoTarget_thenDecoderIsCalled": [[163, 207], ["unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "deepparse.network.BPEmbSeq2SeqModel", "test_bpemb_seq2seq_model_cpu.BPEmbSeq2SeqCPUTest.setUp_decoder_mocks", "unittest.mock.MagicMock", "unittest.mock.MagicMock", "unittest.mock.MagicMock", "deepparse.network.BPEmbSeq2SeqModel._decoder_step", "decoder_mock.assert_has_calls", "unittest.mock.MagicMock.max", "unittest.mock.call"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.network.base.Seq2SeqTestCase.setUp_decoder_mocks", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.network.seq2seq.Seq2SeqModel._decoder_step"], ["", "@", "patch", "(", "\"deepparse.network.seq2seq.Decoder\"", ")", "\n", "@", "patch", "(", "\"deepparse.network.seq2seq.download_weights\"", ")", "\n", "@", "patch", "(", "\"deepparse.network.seq2seq.latest_version\"", ")", "\n", "@", "patch", "(", "\"os.path.isfile\"", ")", "\n", "@", "patch", "(", "\"deepparse.network.seq2seq.torch\"", ")", "\n", "@", "patch", "(", "\"deepparse.network.seq2seq.Seq2SeqModel.load_state_dict\"", ")", "\n", "def", "test_whenInstantiateASeq2SeqAttModelNoTarget_thenDecoderIsCalled", "(", "\n", "self", ",", "\n", "load_state_dict_mock", ",", "\n", "torch_mock", ",", "\n", "isfile_mock", ",", "\n", "last_version_mock", ",", "\n", "download_weights_mock", ",", "\n", "decoder_mock", ",", "\n", ")", ":", "\n", "        ", "seq2seq_model", "=", "BPEmbSeq2SeqModel", "(", "\n", "self", ".", "cache_dir", ",", "\n", "self", ".", "a_cpu_device", ",", "\n", "output_size", "=", "self", ".", "output_size", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", "attention_mechanism", "=", "True", ",", "\n", ")", "\n", "\n", "decoder_input_mock", ",", "decoder_hidden_mock", "=", "self", ".", "setUp_decoder_mocks", "(", "decoder_mock", ",", "attention_mechanism", "=", "True", ")", "\n", "\n", "view_mock", "=", "MagicMock", "(", ")", "\n", "decoder_input_mock", ".", "view", ".", "return_value", "=", "view_mock", "\n", "\n", "lengths_tensor_mock", "=", "MagicMock", "(", ")", "\n", "max_length", "=", "4", "# a sequence of 4 tokens", "\n", "lengths_tensor_mock", ".", "max", "(", ")", ".", "item", ".", "return_value", "=", "max_length", "\n", "encoder_outputs", "=", "MagicMock", "(", ")", "\n", "seq2seq_model", ".", "_decoder_step", "(", "\n", "decoder_input_mock", ",", "\n", "decoder_hidden_mock", ",", "\n", "encoder_outputs", ",", "\n", "self", ".", "a_none_target", ",", "\n", "lengths_tensor_mock", ",", "\n", "self", ".", "a_batch_size", ",", "\n", ")", "\n", "\n", "decoder_call", "=", "[", "call", "(", ")", "(", "view_mock", ",", "decoder_hidden_mock", ",", "encoder_outputs", ",", "lengths_tensor_mock", ")", "]", "*", "max_length", "\n", "\n", "decoder_mock", ".", "assert_has_calls", "(", "decoder_call", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.network.test_bpemb_seq2seq_model_cpu.BPEmbSeq2SeqCPUTest.test_whenInstantiateASeq2SeqModelWithTarget_thenDecoderIsCalled": [[208, 257], ["unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "deepparse.network.BPEmbSeq2SeqModel", "test_bpemb_seq2seq_model_cpu.BPEmbSeq2SeqCPUTest.setUp_decoder_mocks", "unittest.mock.MagicMock", "unittest.mock.MagicMock", "deepparse.network.BPEmbSeq2SeqModel._decoder_step", "range", "test_bpemb_seq2seq_model_cpu.BPEmbSeq2SeqCPUTest.assert_has_calls_tensor_equals", "decoder_call.append", "unittest.mock.MagicMock.max", "unittest.mock.call", "test_bpemb_seq2seq_model_cpu.BPEmbSeq2SeqCPUTest.a_transpose_target_vector[].view"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.network.base.Seq2SeqTestCase.setUp_decoder_mocks", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.network.seq2seq.Seq2SeqModel._decoder_step", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.network.base.Seq2SeqTestCase.assert_has_calls_tensor_equals"], ["", "@", "patch", "(", "\"deepparse.network.seq2seq.random.random\"", ")", "\n", "@", "patch", "(", "\"deepparse.network.seq2seq.Decoder\"", ")", "\n", "@", "patch", "(", "\"deepparse.network.seq2seq.download_weights\"", ")", "\n", "@", "patch", "(", "\"deepparse.network.seq2seq.latest_version\"", ")", "\n", "@", "patch", "(", "\"os.path.isfile\"", ")", "\n", "@", "patch", "(", "\"deepparse.network.seq2seq.torch\"", ")", "\n", "@", "patch", "(", "\"deepparse.network.seq2seq.Seq2SeqModel.load_state_dict\"", ")", "\n", "def", "test_whenInstantiateASeq2SeqModelWithTarget_thenDecoderIsCalled", "(", "\n", "self", ",", "\n", "load_state_dict_mock", ",", "\n", "torch_mock", ",", "\n", "isfile_mock", ",", "\n", "last_version_mock", ",", "\n", "download_weights_mock", ",", "\n", "decoder_mock", ",", "\n", "random_mock", ",", "\n", ")", ":", "\n", "        ", "random_mock", ".", "return_value", "=", "self", ".", "a_value_lower_than_threshold", "\n", "\n", "seq2seq_model", "=", "BPEmbSeq2SeqModel", "(", "\n", "self", ".", "cache_dir", ",", "self", ".", "a_cpu_device", ",", "output_size", "=", "self", ".", "output_size", ",", "verbose", "=", "self", ".", "verbose", "\n", ")", "\n", "\n", "decoder_input_mock", ",", "decoder_hidden_mock", "=", "self", ".", "setUp_decoder_mocks", "(", "decoder_mock", ",", "attention_mechanism", "=", "False", ")", "\n", "\n", "lengths_tensor_mock", "=", "MagicMock", "(", ")", "\n", "max_length", "=", "4", "# a sequence of 4 tokens", "\n", "lengths_tensor_mock", ".", "max", "(", ")", ".", "item", ".", "return_value", "=", "max_length", "\n", "encoder_outputs", "=", "MagicMock", "(", ")", "\n", "seq2seq_model", ".", "_decoder_step", "(", "\n", "decoder_input_mock", ",", "\n", "decoder_hidden_mock", ",", "\n", "encoder_outputs", ",", "\n", "self", ".", "a_none_target", ",", "\n", "lengths_tensor_mock", ",", "\n", "self", ".", "a_batch_size", ",", "\n", ")", "\n", "\n", "decoder_call", "=", "[", "]", "\n", "\n", "for", "idx", "in", "range", "(", "max_length", ")", ":", "\n", "            ", "decoder_call", ".", "append", "(", "\n", "call", "(", ")", "(", "\n", "self", ".", "a_transpose_target_vector", "[", "idx", "]", ".", "view", "(", "1", ",", "self", ".", "a_batch_size", ",", "1", ")", ",", "\n", "decoder_hidden_mock", ",", "\n", ")", "\n", ")", "\n", "\n", "", "self", ".", "assert_has_calls_tensor_equals", "(", "decoder_mock", ",", "decoder_call", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.network.test_bpemb_seq2seq_model_cpu.BPEmbSeq2SeqCPUTest.test_givenABPEmbSeq2SeqModel_whenForwardPass_thenProperlyDoPAss": [[258, 316], ["unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "test_bpemb_seq2seq_model_cpu.BPEmbSeq2SeqCPUTest.setup_encoder_mocks", "test_bpemb_seq2seq_model_cpu.BPEmbSeq2SeqCPUTest.setUp_decoder_mocks", "unittest.mock.MagicMock", "unittest.mock.MagicMock", "unittest.mock.MagicMock", "encoder_mock.__call__", "unittest.mock.patch", "unittest.mock.MagicMock", "torch_mock.zeros().to", "embedding_network_patch", "torch_mock.zeros", "deepparse.network.BPEmbSeq2SeqModel", "deepparse.network.BPEmbSeq2SeqModel.forward", "embedding_network_patch.assert_has_calls", "encoder_mock.assert_has_calls", "lengths_tensor_mock.assert_has_calls", "decoder_mock.assert_has_calls", "unittest.mock.call.max().item", "unittest.mock.call", "unittest.mock.call", "unittest.mock.call", "unittest.mock.call.max"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.network.base.Seq2SeqTestCase.setup_encoder_mocks", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.network.base.Seq2SeqTestCase.setUp_decoder_mocks", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.timer.timer.Timer.__call__", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.network.embedding_network.EmbeddingNetwork.forward"], ["", "@", "patch", "(", "\"deepparse.network.seq2seq.Encoder\"", ")", "\n", "@", "patch", "(", "\"deepparse.network.seq2seq.Decoder\"", ")", "\n", "@", "patch", "(", "\"deepparse.network.seq2seq.download_weights\"", ")", "\n", "@", "patch", "(", "\"deepparse.network.seq2seq.latest_version\"", ")", "\n", "@", "patch", "(", "\"os.path.isfile\"", ")", "\n", "@", "patch", "(", "\"deepparse.network.seq2seq.torch\"", ")", "\n", "@", "patch", "(", "\"deepparse.network.seq2seq.Seq2SeqModel.load_state_dict\"", ")", "\n", "def", "test_givenABPEmbSeq2SeqModel_whenForwardPass_thenProperlyDoPAss", "(", "\n", "self", ",", "\n", "load_state_dict_mock", ",", "\n", "torch_mock", ",", "\n", "isfile_mock", ",", "\n", "last_version_mock", ",", "\n", "download_weights_mock", ",", "\n", "decoder_mock", ",", "\n", "encoder_mock", ",", "\n", ")", ":", "\n", "        ", "to_predict_mock", ",", "lengths_tensor_mock", "=", "self", ".", "setup_encoder_mocks", "(", ")", "\n", "\n", "_", ",", "decoder_hidden_mock", "=", "self", ".", "setUp_decoder_mocks", "(", "decoder_mock", ",", "attention_mechanism", "=", "False", ")", "\n", "decomposition_lengths_mock", "=", "MagicMock", "(", ")", "\n", "\n", "# we don't use the one of the setUp_decoder_mocks since we do the full loop", "\n", "decoder_input_mock", "=", "MagicMock", "(", ")", "\n", "to_mock", "=", "MagicMock", "(", ")", "\n", "torch_mock", ".", "zeros", "(", ")", ".", "to", "(", ")", ".", "new_full", ".", "return_value", "=", "to_mock", "\n", "\n", "# We mock the return of the decoder output", "\n", "encoder_mock", ".", "__call__", "(", ")", ".", "return_value", "=", "(", "decoder_input_mock", ",", "decoder_hidden_mock", ")", "\n", "\n", "with", "patch", "(", "\"deepparse.network.bpemb_seq2seq.EmbeddingNetwork\"", ")", "as", "embedding_network_patch", ":", "\n", "# we mock the output of the embedding layer", "\n", "            ", "embedded_output_mock", "=", "MagicMock", "(", ")", "\n", "embedding_network_patch", "(", ")", ".", "return_value", "=", "embedded_output_mock", "\n", "with", "torch_mock", ":", "\n", "                ", "with", "encoder_mock", ":", "\n", "                    ", "with", "decoder_mock", ":", "\n", "                        ", "seq2seq_model", "=", "BPEmbSeq2SeqModel", "(", "\n", "self", ".", "cache_dir", ",", "self", ".", "a_cpu_device", ",", "self", ".", "output_size", ",", "self", ".", "verbose", "\n", ")", "\n", "\n", "seq2seq_model", ".", "forward", "(", "\n", "to_predict", "=", "to_predict_mock", ",", "\n", "decomposition_lengths", "=", "decomposition_lengths_mock", ",", "\n", "lengths_tensor", "=", "lengths_tensor_mock", ",", "\n", "target", "=", "None", ",", "\n", ")", "\n", "\n", "embedding_network_patch", ".", "assert_has_calls", "(", "[", "call", "(", ")", "(", "to_predict_mock", ",", "decomposition_lengths_mock", ")", "]", ")", "\n", "encoder_mock", ".", "assert_has_calls", "(", "[", "call", "(", ")", "(", "embedded_output_mock", ",", "lengths_tensor_mock", ")", "]", ")", "\n", "lengths_tensor_mock", ".", "assert_has_calls", "(", "[", "call", ".", "max", "(", ")", ".", "item", "(", ")", "]", ")", "\n", "decoder_mock", ".", "assert_has_calls", "(", "\n", "[", "\n", "call", "(", ")", "(", "\n", "to_mock", ",", "\n", "decoder_hidden_mock", ",", "\n", "decoder_input_mock", ",", "\n", "lengths_tensor_mock", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.network.test_bpemb_seq2seq_model_cpu.BPEmbSeq2SeqCPUTest.test_givenABPEmbSeq2SeqModel_whenForwardPassWithTarget_thenProperlyDoPAss": [[320, 383], ["unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.MagicMock", "test_bpemb_seq2seq_model_cpu.BPEmbSeq2SeqCPUTest.setup_encoder_mocks", "test_bpemb_seq2seq_model_cpu.BPEmbSeq2SeqCPUTest.setUp_decoder_mocks", "unittest.mock.MagicMock", "unittest.mock.MagicMock", "unittest.mock.MagicMock", "encoder_mock.__call__", "unittest.mock.patch", "unittest.mock.MagicMock", "deepparse.network.BPEmbSeq2SeqModel", "deepparse.network.BPEmbSeq2SeqModel.forward", "embedding_network_patch.assert_has_calls", "encoder_mock.assert_has_calls", "lengths_tensor_mock.assert_has_calls", "decoder_mock.assert_has_calls", "unittest.mock.MagicMock.assert_has_calls", "torch_mock.zeros().to", "embedding_network_patch", "unittest.mock.call.max().item", "unittest.mock.call.transpose", "torch_mock.zeros", "unittest.mock.call", "unittest.mock.call", "unittest.mock.call", "unittest.mock.call.max"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.network.base.Seq2SeqTestCase.setup_encoder_mocks", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.network.base.Seq2SeqTestCase.setUp_decoder_mocks", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.timer.timer.Timer.__call__", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.network.embedding_network.EmbeddingNetwork.forward"], ["", "", "", "", "", "@", "patch", "(", "\"deepparse.network.seq2seq.random.random\"", ")", "\n", "@", "patch", "(", "\"deepparse.network.seq2seq.Encoder\"", ")", "\n", "@", "patch", "(", "\"deepparse.network.seq2seq.Decoder\"", ")", "\n", "@", "patch", "(", "\"deepparse.network.seq2seq.download_weights\"", ")", "\n", "@", "patch", "(", "\"deepparse.network.seq2seq.latest_version\"", ")", "\n", "@", "patch", "(", "\"os.path.isfile\"", ")", "\n", "@", "patch", "(", "\"deepparse.network.seq2seq.torch\"", ")", "\n", "@", "patch", "(", "\"deepparse.network.seq2seq.Seq2SeqModel.load_state_dict\"", ")", "\n", "def", "test_givenABPEmbSeq2SeqModel_whenForwardPassWithTarget_thenProperlyDoPAss", "(", "\n", "self", ",", "\n", "load_state_dict_mock", ",", "\n", "torch_mock", ",", "\n", "isfile_mock", ",", "\n", "last_version_mock", ",", "\n", "download_weights_mock", ",", "\n", "decoder_mock", ",", "\n", "encoder_mock", ",", "\n", "random_mock", ",", "\n", ")", ":", "\n", "        ", "random_mock", ".", "return_value", "=", "self", ".", "a_value_lower_than_threshold", "\n", "\n", "target_mock", "=", "MagicMock", "(", ")", "\n", "to_predict_mock", ",", "lengths_tensor_mock", "=", "self", ".", "setup_encoder_mocks", "(", ")", "\n", "\n", "# 1) We reset it later", "\n", "_", ",", "decoder_hidden_mock", "=", "self", ".", "setUp_decoder_mocks", "(", "decoder_mock", ",", "attention_mechanism", "=", "False", ")", "\n", "decomposition_lengths_mock", "=", "MagicMock", "(", ")", "\n", "\n", "# We don't use the one of the setUp_decoder_mocks since we do the full loop", "\n", "decoder_input_mock", "=", "MagicMock", "(", ")", "\n", "to_mock", "=", "MagicMock", "(", ")", "\n", "torch_mock", ".", "zeros", "(", ")", ".", "to", "(", ")", ".", "new_full", ".", "return_value", "=", "to_mock", "\n", "\n", "# We mock the return of the decoder output", "\n", "encoder_mock", ".", "__call__", "(", ")", ".", "return_value", "=", "(", "decoder_input_mock", ",", "decoder_hidden_mock", ")", "\n", "\n", "with", "patch", "(", "\"deepparse.network.bpemb_seq2seq.EmbeddingNetwork\"", ")", "as", "embedding_network_patch", ":", "\n", "# we mock the output of the embedding layer", "\n", "            ", "embedded_output_mock", "=", "MagicMock", "(", ")", "\n", "embedding_network_patch", "(", ")", ".", "return_value", "=", "embedded_output_mock", "\n", "seq2seq_model", "=", "BPEmbSeq2SeqModel", "(", "self", ".", "cache_dir", ",", "self", ".", "a_cpu_device", ",", "self", ".", "output_size", ",", "self", ".", "verbose", ")", "\n", "\n", "seq2seq_model", ".", "forward", "(", "\n", "to_predict", "=", "to_predict_mock", ",", "\n", "decomposition_lengths", "=", "decomposition_lengths_mock", ",", "\n", "lengths_tensor", "=", "lengths_tensor_mock", ",", "\n", "target", "=", "target_mock", ",", "\n", ")", "\n", "\n", "embedding_network_patch", ".", "assert_has_calls", "(", "[", "call", "(", ")", "(", "to_predict_mock", ",", "decomposition_lengths_mock", ")", "]", ")", "\n", "encoder_mock", ".", "assert_has_calls", "(", "[", "call", "(", ")", "(", "embedded_output_mock", ",", "lengths_tensor_mock", ")", "]", ")", "\n", "lengths_tensor_mock", ".", "assert_has_calls", "(", "[", "call", ".", "max", "(", ")", ".", "item", "(", ")", "]", ")", "\n", "decoder_mock", ".", "assert_has_calls", "(", "\n", "[", "\n", "call", "(", ")", "(", "\n", "to_mock", ",", "\n", "decoder_hidden_mock", ",", "\n", "decoder_input_mock", ",", "\n", "lengths_tensor_mock", ",", "\n", ")", "\n", "]", "\n", ")", "\n", "target_mock", ".", "assert_has_calls", "(", "[", "call", ".", "transpose", "(", "0", ",", "1", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.network.test_bpemb_seq2seq_model_cpu.BPEmbSeq2SeqCPUTest.test_givenABPEmbAttSeq2SeqModel_whenForwardPassWithTarget_thenProperlyDoPAss": [[384, 452], ["unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.MagicMock", "test_bpemb_seq2seq_model_cpu.BPEmbSeq2SeqCPUTest.setup_encoder_mocks", "test_bpemb_seq2seq_model_cpu.BPEmbSeq2SeqCPUTest.setUp_decoder_mocks", "unittest.mock.MagicMock", "unittest.mock.MagicMock", "unittest.mock.MagicMock", "encoder_mock.__call__", "unittest.mock.patch", "unittest.mock.MagicMock", "deepparse.network.BPEmbSeq2SeqModel", "deepparse.network.BPEmbSeq2SeqModel.forward", "embedding_network_patch.assert_has_calls", "encoder_mock.assert_has_calls", "lengths_tensor_mock.assert_has_calls", "decoder_mock.assert_has_calls", "unittest.mock.MagicMock.assert_has_calls", "torch_mock.zeros().to", "embedding_network_patch", "unittest.mock.call.max().item", "unittest.mock.call.transpose", "torch_mock.zeros", "unittest.mock.call", "unittest.mock.call", "unittest.mock.call", "unittest.mock.call.max"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.network.base.Seq2SeqTestCase.setup_encoder_mocks", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.network.base.Seq2SeqTestCase.setUp_decoder_mocks", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.timer.timer.Timer.__call__", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.network.embedding_network.EmbeddingNetwork.forward"], ["", "", "@", "patch", "(", "\"deepparse.network.seq2seq.random.random\"", ")", "\n", "@", "patch", "(", "\"deepparse.network.seq2seq.Encoder\"", ")", "\n", "@", "patch", "(", "\"deepparse.network.seq2seq.Decoder\"", ")", "\n", "@", "patch", "(", "\"deepparse.network.seq2seq.download_weights\"", ")", "\n", "@", "patch", "(", "\"deepparse.network.seq2seq.latest_version\"", ")", "\n", "@", "patch", "(", "\"os.path.isfile\"", ")", "\n", "@", "patch", "(", "\"deepparse.network.seq2seq.torch\"", ")", "\n", "@", "patch", "(", "\"deepparse.network.seq2seq.Seq2SeqModel.load_state_dict\"", ")", "\n", "def", "test_givenABPEmbAttSeq2SeqModel_whenForwardPassWithTarget_thenProperlyDoPAss", "(", "\n", "self", ",", "\n", "load_state_dict_mock", ",", "\n", "torch_mock", ",", "\n", "isfile_mock", ",", "\n", "last_version_mock", ",", "\n", "download_weights_mock", ",", "\n", "decoder_mock", ",", "\n", "encoder_mock", ",", "\n", "random_mock", ",", "\n", ")", ":", "\n", "        ", "random_mock", ".", "return_value", "=", "self", ".", "a_value_lower_than_threshold", "\n", "\n", "target_mock", "=", "MagicMock", "(", ")", "\n", "to_predict_mock", ",", "lengths_tensor_mock", "=", "self", ".", "setup_encoder_mocks", "(", ")", "\n", "\n", "_", ",", "decoder_hidden_mock", "=", "self", ".", "setUp_decoder_mocks", "(", "decoder_mock", ",", "attention_mechanism", "=", "True", ")", "\n", "decomposition_lengths_mock", "=", "MagicMock", "(", ")", "\n", "\n", "# We don't use the one of the setUp_decoder_mocks since we do the full loop", "\n", "decoder_input_mock", "=", "MagicMock", "(", ")", "\n", "to_mock", "=", "MagicMock", "(", ")", "\n", "torch_mock", ".", "zeros", "(", ")", ".", "to", "(", ")", ".", "new_full", ".", "return_value", "=", "to_mock", "\n", "\n", "# We mock the return of the decoder output", "\n", "encoder_mock", ".", "__call__", "(", ")", ".", "return_value", "=", "(", "decoder_input_mock", ",", "decoder_hidden_mock", ")", "\n", "\n", "with", "patch", "(", "\"deepparse.network.bpemb_seq2seq.EmbeddingNetwork\"", ")", "as", "embedding_network_patch", ":", "\n", "# we mock the output of the embedding layer", "\n", "            ", "embedded_output_mock", "=", "MagicMock", "(", ")", "\n", "embedding_network_patch", "(", ")", ".", "return_value", "=", "embedded_output_mock", "\n", "seq2seq_model", "=", "BPEmbSeq2SeqModel", "(", "\n", "self", ".", "cache_dir", ",", "\n", "self", ".", "a_cpu_device", ",", "\n", "self", ".", "output_size", ",", "\n", "self", ".", "verbose", ",", "\n", "attention_mechanism", "=", "True", ",", "\n", ")", "\n", "\n", "seq2seq_model", ".", "forward", "(", "\n", "to_predict", "=", "to_predict_mock", ",", "\n", "decomposition_lengths", "=", "decomposition_lengths_mock", ",", "\n", "lengths_tensor", "=", "lengths_tensor_mock", ",", "\n", "target", "=", "target_mock", ",", "\n", ")", "\n", "\n", "embedding_network_patch", ".", "assert_has_calls", "(", "[", "call", "(", ")", "(", "to_predict_mock", ",", "decomposition_lengths_mock", ")", "]", ")", "\n", "encoder_mock", ".", "assert_has_calls", "(", "[", "call", "(", ")", "(", "embedded_output_mock", ",", "lengths_tensor_mock", ")", "]", ")", "\n", "lengths_tensor_mock", ".", "assert_has_calls", "(", "[", "call", ".", "max", "(", ")", ".", "item", "(", ")", "]", ")", "\n", "decoder_mock", ".", "assert_has_calls", "(", "\n", "[", "\n", "call", "(", ")", "(", "\n", "to_mock", ",", "\n", "decoder_hidden_mock", ",", "\n", "decoder_input_mock", ",", "\n", "lengths_tensor_mock", ",", "\n", ")", "\n", "]", "\n", ")", "\n", "target_mock", ".", "assert_has_calls", "(", "[", "call", ".", "transpose", "(", "0", ",", "1", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.network.test_encoder.EncoderTest.setUp": [[9, 13], ["None"], "methods", ["None"], ["    ", "def", "setUp", "(", "self", ")", "->", "None", ":", "\n", "        ", "self", ".", "input_size_dim", "=", "300", "\n", "self", ".", "hidden_size", "=", "1024", "\n", "self", ".", "num_layers", "=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.network.test_encoder.EncoderTest.test_whenInstantiateEncoder_thenParametersAreOk": [[14, 19], ["deepparse.network.Encoder", "test_encoder.EncoderTest.assertEqual", "test_encoder.EncoderTest.assertEqual", "test_encoder.EncoderTest.assertEqual"], "methods", ["None"], ["", "def", "test_whenInstantiateEncoder_thenParametersAreOk", "(", "self", ")", ":", "\n", "        ", "encoder", "=", "Encoder", "(", "self", ".", "input_size_dim", ",", "self", ".", "hidden_size", ",", "self", ".", "num_layers", ")", "\n", "self", ".", "assertEqual", "(", "self", ".", "input_size_dim", ",", "encoder", ".", "lstm", ".", "input_size", ")", "\n", "self", ".", "assertEqual", "(", "self", ".", "hidden_size", ",", "encoder", ".", "lstm", ".", "hidden_size", ")", "\n", "self", ".", "assertEqual", "(", "self", ".", "num_layers", ",", "encoder", ".", "lstm", ".", "num_layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.network.test_encoder.EncoderTest.test_whenEncoderForward_thenPass": [[20, 48], ["unittest.mock.patch", "unittest.mock.MagicMock", "unittest.mock.MagicMock", "lstm_mock", "unittest.mock.patch", "unittest.mock.MagicMock", "unittest.mock.patch", "deepparse.network.Encoder", "unittest.mock.MagicMock", "unittest.mock.MagicMock", "deepparse.network.Encoder.forward", "pack_padded_sequence_mock.assert_has_calls", "lstm_mock.assert_has_calls", "unittest.mock.MagicMock", "unittest.mock.MagicMock", "unittest.mock.call", "unittest.mock.MagicMock.cpu", "unittest.mock.call"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.network.embedding_network.EmbeddingNetwork.forward"], ["", "def", "test_whenEncoderForward_thenPass", "(", "self", ")", ":", "\n", "        ", "with", "patch", "(", "\"deepparse.network.nn.LSTM\"", ")", "as", "lstm_mock", ":", "\n", "            ", "output_mock", "=", "MagicMock", "(", ")", "\n", "hidden_mock", "=", "MagicMock", "(", ")", "\n", "lstm_mock", "(", ")", ".", "return_value", "=", "output_mock", ",", "hidden_mock", "\n", "\n", "with", "patch", "(", "\"deepparse.network.encoder.pack_padded_sequence\"", ")", "as", "pack_padded_sequence_mock", ":", "\n", "                ", "packed_sequence_mock", "=", "MagicMock", "(", ")", "\n", "pack_padded_sequence_mock", ".", "return_value", "=", "packed_sequence_mock", "\n", "with", "patch", "(", "\"deepparse.network.encoder.pad_packed_sequence\"", ")", "as", "pad_packed_sequence_mock", ":", "\n", "                    ", "pad_packed_sequence_mock", ".", "return_value", "=", "(", "MagicMock", "(", ")", ",", "MagicMock", "(", ")", ")", "\n", "\n", "encoder", "=", "Encoder", "(", "self", ".", "input_size_dim", ",", "self", ".", "hidden_size", ",", "self", ".", "num_layers", ")", "\n", "to_predict_mock", "=", "MagicMock", "(", ")", "\n", "lengths_tensor_mock", "=", "MagicMock", "(", ")", "\n", "encoder", ".", "forward", "(", "to_predict_mock", ",", "lengths_tensor_mock", ")", "\n", "\n", "pack_padded_sequence_mock", ".", "assert_has_calls", "(", "\n", "[", "\n", "call", "(", "\n", "to_predict_mock", ",", "\n", "lengths_tensor_mock", ".", "cpu", "(", ")", ",", "\n", "batch_first", "=", "True", ",", "\n", "enforce_sorted", "=", "False", ",", "\n", ")", "\n", "]", "\n", ")", "\n", "lstm_mock", ".", "assert_has_calls", "(", "[", "call", "(", ")", "(", "packed_sequence_mock", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.network.test_decoder.DecoderTest.setUp": [[11, 16], ["None"], "methods", ["None"], ["    ", "def", "setUp", "(", "self", ")", "->", "None", ":", "\n", "        ", "self", ".", "input_size_dim", "=", "1", "\n", "self", ".", "hidden_size", "=", "1024", "\n", "self", ".", "num_layers", "=", "1", "\n", "self", ".", "output_size", "=", "9", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.network.test_decoder.DecoderTest.test_whenInstantiateASeq2SeqModel_thenParametersAreOk": [[17, 30], ["deepparse.network.Decoder", "test_decoder.DecoderTest.assertEqual", "test_decoder.DecoderTest.assertEqual", "test_decoder.DecoderTest.assertEqual", "test_decoder.DecoderTest.assertEqual"], "methods", ["None"], ["", "def", "test_whenInstantiateASeq2SeqModel_thenParametersAreOk", "(", "self", ")", ":", "\n", "        ", "decoder", "=", "Decoder", "(", "\n", "self", ".", "input_size_dim", ",", "\n", "self", ".", "hidden_size", ",", "\n", "self", ".", "num_layers", ",", "\n", "self", ".", "output_size", ",", "\n", "attention_mechanism", "=", "False", ",", "\n", ")", "\n", "\n", "self", ".", "assertEqual", "(", "self", ".", "input_size_dim", ",", "decoder", ".", "lstm", ".", "input_size", ")", "\n", "self", ".", "assertEqual", "(", "self", ".", "hidden_size", ",", "decoder", ".", "lstm", ".", "hidden_size", ")", "\n", "self", ".", "assertEqual", "(", "self", ".", "num_layers", ",", "decoder", ".", "lstm", ".", "num_layers", ")", "\n", "self", ".", "assertEqual", "(", "self", ".", "output_size", ",", "decoder", ".", "linear", ".", "out_features", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.network.test_decoder.DecoderTest.test_whenInstantiateASeq2SeqAttModel_thenParametersAreOk": [[31, 44], ["deepparse.network.Decoder", "test_decoder.DecoderTest.assertEqual", "test_decoder.DecoderTest.assertEqual", "test_decoder.DecoderTest.assertEqual", "test_decoder.DecoderTest.assertEqual"], "methods", ["None"], ["", "def", "test_whenInstantiateASeq2SeqAttModel_thenParametersAreOk", "(", "self", ")", ":", "\n", "        ", "decoder", "=", "Decoder", "(", "\n", "self", ".", "input_size_dim", ",", "\n", "self", ".", "hidden_size", ",", "\n", "self", ".", "num_layers", ",", "\n", "self", ".", "output_size", ",", "\n", "attention_mechanism", "=", "True", ",", "\n", ")", "\n", "\n", "self", ".", "assertEqual", "(", "self", ".", "input_size_dim", "+", "self", ".", "hidden_size", ",", "decoder", ".", "lstm", ".", "input_size", ")", "\n", "self", ".", "assertEqual", "(", "self", ".", "hidden_size", ",", "decoder", ".", "lstm", ".", "hidden_size", ")", "\n", "self", ".", "assertEqual", "(", "self", ".", "num_layers", ",", "decoder", ".", "lstm", ".", "num_layers", ")", "\n", "self", ".", "assertEqual", "(", "self", ".", "output_size", ",", "decoder", ".", "linear", ".", "out_features", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.network.test_decoder.DecoderTest.test_whenDecoderForward_thenPass": [[45, 71], ["unittest.mock.patch", "unittest.mock.MagicMock", "unittest.mock.MagicMock", "lstm_mock", "unittest.mock.patch", "unittest.mock.MagicMock", "linear_mock", "unittest.mock.patch", "deepparse.network.Decoder", "unittest.mock.MagicMock", "unittest.mock.MagicMock", "unittest.mock.MagicMock", "unittest.mock.MagicMock", "deepparse.network.Decoder.forward", "lstm_mock.assert_has_calls", "linear_mock.assert_has_calls", "log_soft_max_mock.assert_has_calls", "unittest.mock.call", "unittest.mock.MagicMock.float", "unittest.mock.call", "unittest.mock.MagicMock.__getitem__", "unittest.mock.call"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.network.embedding_network.EmbeddingNetwork.forward", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.dataset_container.dataset_container.DatasetContainer.__getitem__"], ["", "def", "test_whenDecoderForward_thenPass", "(", "self", ")", ":", "\n", "        ", "with", "patch", "(", "\"deepparse.network.nn.LSTM\"", ")", "as", "lstm_mock", ":", "\n", "            ", "output_mock", "=", "MagicMock", "(", ")", "\n", "hidden_mock", "=", "MagicMock", "(", ")", "\n", "lstm_mock", "(", ")", ".", "return_value", "=", "output_mock", ",", "hidden_mock", "\n", "\n", "with", "patch", "(", "\"deepparse.network.nn.Linear\"", ")", "as", "linear_mock", ":", "\n", "                ", "linear_output", "=", "MagicMock", "(", ")", "\n", "linear_mock", "(", ")", ".", "return_value", "=", "linear_output", "\n", "with", "patch", "(", "\"deepparse.network.nn.LogSoftmax\"", ")", "as", "log_soft_max_mock", ":", "\n", "                    ", "decoder", "=", "Decoder", "(", "\n", "self", ".", "input_size_dim", ",", "\n", "self", ".", "hidden_size", ",", "\n", "self", ".", "num_layers", ",", "\n", "self", ".", "output_size", ",", "\n", "attention_mechanism", "=", "False", ",", "\n", ")", "\n", "to_predict_mock", "=", "MagicMock", "(", ")", "\n", "hidden_mock", "=", "MagicMock", "(", ")", "\n", "encoder_mock", "=", "MagicMock", "(", ")", "\n", "lengths_mock", "=", "MagicMock", "(", ")", "\n", "decoder", ".", "forward", "(", "to_predict_mock", ",", "hidden_mock", ",", "encoder_mock", ",", "lengths_mock", ")", "\n", "\n", "lstm_mock", ".", "assert_has_calls", "(", "[", "call", "(", ")", "(", "to_predict_mock", ".", "float", "(", ")", ",", "hidden_mock", ")", "]", ")", "\n", "linear_mock", ".", "assert_has_calls", "(", "[", "call", "(", ")", "(", "output_mock", ".", "__getitem__", "(", ")", ")", "]", ")", "\n", "log_soft_max_mock", ".", "assert_has_calls", "(", "[", "call", "(", ")", "(", "linear_output", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.network.test_decoder.DecoderTest.test_whenDecoderAttForward_thenReturnAttWeights": [[72, 105], ["unittest.mock.patch", "unittest.mock.MagicMock", "unittest.mock.MagicMock", "lstm_mock", "unittest.mock.patch", "unittest.mock.MagicMock", "linear_mock", "unittest.mock.patch", "unittest.mock.MagicMock", "tanh_mock", "unittest.mock.patch", "unittest.mock.MagicMock", "matmul_mock", "unittest.mock.patch", "unittest.mock.MagicMock", "cat_mock", "unittest.mock.patch", "deepparse.network.Decoder", "unittest.mock.MagicMock", "unittest.mock.MagicMock", "unittest.mock.MagicMock", "torch.ones", "deepparse.network.Decoder.forward", "test_decoder.DecoderTest.assertIsNotNone"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.network.embedding_network.EmbeddingNetwork.forward"], ["", "", "", "", "def", "test_whenDecoderAttForward_thenReturnAttWeights", "(", "self", ")", ":", "\n", "        ", "with", "patch", "(", "\"deepparse.network.nn.LSTM\"", ")", "as", "lstm_mock", ":", "\n", "            ", "output_mock", "=", "MagicMock", "(", ")", "\n", "hidden_mock", "=", "MagicMock", "(", ")", "\n", "lstm_mock", "(", ")", ".", "return_value", "=", "output_mock", ",", "hidden_mock", "\n", "\n", "with", "patch", "(", "\"deepparse.network.nn.Linear\"", ")", "as", "linear_mock", ":", "\n", "                ", "linear_mock", "(", ")", ".", "return_value", "=", "MagicMock", "(", ")", "\n", "with", "patch", "(", "\"deepparse.network.torch.tanh\"", ")", "as", "tanh_mock", ":", "\n", "                    ", "tanh_mock", "(", ")", ".", "return_value", "=", "MagicMock", "(", ")", "\n", "with", "patch", "(", "\"deepparse.network.torch.matmul\"", ")", "as", "matmul_mock", ":", "\n", "                        ", "matmul_mock", "(", ")", ".", "return_value", "=", "MagicMock", "(", ")", "\n", "with", "patch", "(", "\"deepparse.network.torch.cat\"", ")", "as", "cat_mock", ":", "\n", "                            ", "cat_mock", "(", ")", ".", "return_value", "=", "MagicMock", "(", ")", "\n", "with", "patch", "(", "\"deepparse.network.nn.LogSoftmax\"", ")", ":", "\n", "                                ", "decoder", "=", "Decoder", "(", "\n", "self", ".", "input_size_dim", ",", "\n", "self", ".", "hidden_size", ",", "\n", "self", ".", "num_layers", ",", "\n", "self", ".", "output_size", ",", "\n", "attention_mechanism", "=", "True", ",", "\n", ")", "\n", "to_predict_mock", "=", "MagicMock", "(", ")", "\n", "hidden_mock", "=", "MagicMock", "(", ")", "\n", "encoder_mock", "=", "MagicMock", "(", ")", "\n", "lengths_mock", "=", "torch", ".", "ones", "(", "1", ",", "2", ")", "\n", "_", ",", "_", ",", "attention_weights", "=", "decoder", ".", "forward", "(", "\n", "to_predict_mock", ",", "\n", "hidden_mock", ",", "\n", "encoder_mock", ",", "\n", "lengths_mock", ",", "\n", ")", "\n", "self", ".", "assertIsNotNone", "(", "attention_weights", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.network.test_decoder.DecoderTest.test_whenDecoderNotAttForward_thenReturnAttWeightsToNone": [[106, 129], ["unittest.mock.patch", "unittest.mock.MagicMock", "unittest.mock.MagicMock", "lstm_mock", "unittest.mock.patch", "unittest.mock.MagicMock", "linear_mock", "unittest.mock.patch", "deepparse.network.Decoder", "unittest.mock.MagicMock", "unittest.mock.MagicMock", "unittest.mock.MagicMock", "unittest.mock.MagicMock", "deepparse.network.Decoder.forward", "test_decoder.DecoderTest.assertIsNone"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.network.embedding_network.EmbeddingNetwork.forward"], ["", "", "", "", "", "", "", "def", "test_whenDecoderNotAttForward_thenReturnAttWeightsToNone", "(", "self", ")", ":", "\n", "        ", "with", "patch", "(", "\"deepparse.network.nn.LSTM\"", ")", "as", "lstm_mock", ":", "\n", "            ", "output_mock", "=", "MagicMock", "(", ")", "\n", "hidden_mock", "=", "MagicMock", "(", ")", "\n", "lstm_mock", "(", ")", ".", "return_value", "=", "output_mock", ",", "hidden_mock", "\n", "\n", "with", "patch", "(", "\"deepparse.network.nn.Linear\"", ")", "as", "linear_mock", ":", "\n", "                ", "linear_output", "=", "MagicMock", "(", ")", "\n", "linear_mock", "(", ")", ".", "return_value", "=", "linear_output", "\n", "with", "patch", "(", "\"deepparse.network.nn.LogSoftmax\"", ")", ":", "\n", "                    ", "decoder", "=", "Decoder", "(", "\n", "self", ".", "input_size_dim", ",", "\n", "self", ".", "hidden_size", ",", "\n", "self", ".", "num_layers", ",", "\n", "self", ".", "output_size", ",", "\n", "attention_mechanism", "=", "False", ",", "\n", ")", "\n", "to_predict_mock", "=", "MagicMock", "(", ")", "\n", "hidden_mock", "=", "MagicMock", "(", ")", "\n", "encoder_mock", "=", "MagicMock", "(", ")", "\n", "lengths_mock", "=", "MagicMock", "(", ")", "\n", "_", ",", "_", ",", "attention_weights", "=", "decoder", ".", "forward", "(", "to_predict_mock", ",", "hidden_mock", ",", "encoder_mock", ",", "lengths_mock", ")", "\n", "self", ".", "assertIsNone", "(", "attention_weights", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.network.test_bpemb_seq2seq_model_gpu.BPEmbSeq2SeqGPUTest.setUpClass": [[17, 24], ["super().setUpClass", "torch.tensor", "cls.a_target_vector.transpose"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_seq2seq_fasttext_model_gpu.FastTextSeq2SeqIntegrationTest.setUpClass"], ["    ", "@", "classmethod", "\n", "def", "setUpClass", "(", "cls", ")", ":", "\n", "        ", "super", "(", "BPEmbSeq2SeqGPUTest", ",", "cls", ")", ".", "setUpClass", "(", ")", "\n", "cls", ".", "model_type", "=", "\"bpemb\"", "\n", "\n", "cls", ".", "a_target_vector", "=", "torch", ".", "tensor", "(", "[", "[", "0", ",", "1", ",", "1", ",", "4", ",", "5", ",", "8", "]", ",", "[", "1", ",", "0", ",", "3", ",", "8", ",", "0", ",", "0", "]", "]", ",", "device", "=", "cls", ".", "a_cpu_device", ")", "\n", "cls", ".", "a_transpose_target_vector", "=", "cls", ".", "a_target_vector", ".", "transpose", "(", "0", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.network.test_bpemb_seq2seq_model_gpu.BPEmbSeq2SeqGPUTest.test_whenInstantiatingABPEmbSeq2SeqModel_thenShouldInstantiateAEmbeddingNetwork": [[25, 38], ["unittest.mock.patch", "deepparse.network.BPEmbSeq2SeqModel", "test_bpemb_seq2seq_model_gpu.BPEmbSeq2SeqGPUTest.assertEqual", "test_bpemb_seq2seq_model_gpu.BPEmbSeq2SeqGPUTest.assertEqual", "test_bpemb_seq2seq_model_gpu.BPEmbSeq2SeqGPUTest.assertEqual"], "methods", ["None"], ["", "@", "patch", "(", "\"deepparse.network.seq2seq.Seq2SeqModel._load_pre_trained_weights\"", ")", "\n", "def", "test_whenInstantiatingABPEmbSeq2SeqModel_thenShouldInstantiateAEmbeddingNetwork", "(", "\n", "self", ",", "load_pre_trained_weights_mock", "\n", ")", ":", "\n", "        ", "seq2seq_model", "=", "BPEmbSeq2SeqModel", "(", "\n", "self", ".", "cache_dir", ",", "self", ".", "a_torch_device", ",", "output_size", "=", "self", ".", "output_size", ",", "verbose", "=", "self", ".", "verbose", "\n", ")", "\n", "\n", "self", ".", "assertEqual", "(", "self", ".", "input_size", ",", "seq2seq_model", ".", "embedding_network", ".", "model", ".", "input_size", ")", "\n", "self", ".", "assertEqual", "(", "self", ".", "hidden_size", ",", "seq2seq_model", ".", "embedding_network", ".", "model", ".", "hidden_size", ")", "\n", "self", ".", "assertEqual", "(", "\n", "self", ".", "projection_size", ",", "\n", "seq2seq_model", ".", "embedding_network", ".", "projection_layer", ".", "out_features", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.network.test_bpemb_seq2seq_model_gpu.BPEmbSeq2SeqGPUTest.test_givenNotLocalWeights_whenInstantiatingABPEmbSeq2SeqModel_thenShouldDownloadWeights": [[40, 50], ["unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "deepparse.network.BPEmbSeq2SeqModel", "download_weights_mock.assert_called_with"], "methods", ["None"], ["", "@", "patch", "(", "\"os.path.isfile\"", ")", "\n", "@", "patch", "(", "\"deepparse.network.seq2seq.torch\"", ")", "\n", "@", "patch", "(", "\"deepparse.network.seq2seq.Seq2SeqModel.load_state_dict\"", ")", "\n", "def", "test_givenNotLocalWeights_whenInstantiatingABPEmbSeq2SeqModel_thenShouldDownloadWeights", "(", "\n", "self", ",", "load_state_dict_mock", ",", "torch_mock", ",", "isfile_mock", "\n", ")", ":", "\n", "        ", "isfile_mock", ".", "return_value", "=", "False", "\n", "with", "patch", "(", "\"deepparse.network.seq2seq.download_weights\"", ")", "as", "download_weights_mock", ":", "\n", "            ", "BPEmbSeq2SeqModel", "(", "self", ".", "cache_dir", ",", "self", ".", "a_torch_device", ",", "output_size", "=", "self", ".", "output_size", ",", "verbose", "=", "self", ".", "verbose", ")", "\n", "download_weights_mock", ".", "assert_called_with", "(", "self", ".", "model_type", ",", "self", ".", "a_root_path", ",", "verbose", "=", "self", ".", "verbose", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.network.test_bpemb_seq2seq_model_gpu.BPEmbSeq2SeqGPUTest.test_givenLocalWeightsNotLastVersion_whenInstantiatingABPEmbSeq2SeqModel_thenShouldDownloadWeights": [[51, 63], ["unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "deepparse.network.BPEmbSeq2SeqModel", "download_weights_mock.assert_called_with"], "methods", ["None"], ["", "", "@", "patch", "(", "\"deepparse.network.seq2seq.latest_version\"", ")", "\n", "@", "patch", "(", "\"os.path.isfile\"", ")", "\n", "@", "patch", "(", "\"deepparse.network.seq2seq.torch\"", ")", "\n", "@", "patch", "(", "\"deepparse.network.seq2seq.Seq2SeqModel.load_state_dict\"", ")", "\n", "def", "test_givenLocalWeightsNotLastVersion_whenInstantiatingABPEmbSeq2SeqModel_thenShouldDownloadWeights", "(", "\n", "self", ",", "load_state_dict_mock", ",", "torch_mock", ",", "isfile_mock", ",", "last_version_mock", "\n", ")", ":", "\n", "        ", "isfile_mock", ".", "return_value", "=", "True", "\n", "last_version_mock", ".", "return_value", "=", "False", "\n", "with", "patch", "(", "\"deepparse.network.seq2seq.download_weights\"", ")", "as", "download_weights_mock", ":", "\n", "            ", "BPEmbSeq2SeqModel", "(", "self", ".", "cache_dir", ",", "self", ".", "a_torch_device", ",", "output_size", "=", "self", ".", "output_size", ",", "verbose", "=", "self", ".", "verbose", ")", "\n", "download_weights_mock", ".", "assert_called_with", "(", "self", ".", "model_type", ",", "self", ".", "a_root_path", ",", "verbose", "=", "self", ".", "verbose", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.network.test_bpemb_seq2seq_model_gpu.BPEmbSeq2SeqGPUTest.test_givenLocalWeights_whenInstantiatingABPEmbSeq2SeqModel_thenShouldntDownloadWeights": [[64, 76], ["unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "deepparse.network.BPEmbSeq2SeqModel", "download_weights_mock.assert_not_called"], "methods", ["None"], ["", "", "@", "patch", "(", "\"deepparse.network.seq2seq.latest_version\"", ")", "\n", "@", "patch", "(", "\"os.path.isfile\"", ")", "\n", "@", "patch", "(", "\"deepparse.network.seq2seq.torch\"", ")", "\n", "@", "patch", "(", "\"deepparse.network.seq2seq.Seq2SeqModel.load_state_dict\"", ")", "\n", "def", "test_givenLocalWeights_whenInstantiatingABPEmbSeq2SeqModel_thenShouldntDownloadWeights", "(", "\n", "self", ",", "load_state_dict_mock", ",", "torch_mock", ",", "isfile_mock", ",", "last_version_mock", "\n", ")", ":", "\n", "        ", "isfile_mock", ".", "return_value", "=", "True", "\n", "last_version_mock", ".", "return_value", "=", "True", "\n", "with", "patch", "(", "\"deepparse.network.seq2seq.download_weights\"", ")", "as", "download_weights_mock", ":", "\n", "            ", "BPEmbSeq2SeqModel", "(", "self", ".", "cache_dir", ",", "self", ".", "a_torch_device", ",", "output_size", "=", "self", ".", "output_size", ",", "verbose", "=", "self", ".", "verbose", ")", "\n", "download_weights_mock", ".", "assert_not_called", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.network.test_bpemb_seq2seq_model_gpu.BPEmbSeq2SeqGPUTest.test_givenRetrainedWeights_whenInstantiatingAFastTextSeq2SeqModel_thenShouldUseRetrainedWeights": [[77, 97], ["unittest.mock.patch", "unittest.mock.patch", "unittest.mock.MagicMock", "deepparse.network.BPEmbSeq2SeqModel", "torch_mock.assert_has_calls", "load_state_dict_mock.assert_has_calls", "unittest.mock.call.load", "unittest.mock.call"], "methods", ["None"], ["", "", "@", "patch", "(", "\"deepparse.network.seq2seq.torch\"", ")", "\n", "@", "patch", "(", "\"deepparse.network.seq2seq.Seq2SeqModel.load_state_dict\"", ")", "\n", "def", "test_givenRetrainedWeights_whenInstantiatingAFastTextSeq2SeqModel_thenShouldUseRetrainedWeights", "(", "\n", "self", ",", "load_state_dict_mock", ",", "torch_mock", "\n", ")", ":", "\n", "        ", "all_layers_params", "=", "MagicMock", "(", ")", "\n", "torch_mock", ".", "load", ".", "return_value", "=", "all_layers_params", "\n", "BPEmbSeq2SeqModel", "(", "\n", "self", ".", "cache_dir", ",", "\n", "self", ".", "a_torch_device", ",", "\n", "output_size", "=", "self", ".", "output_size", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", "path_to_retrained_model", "=", "self", ".", "a_path_to_retrained_model", ",", "\n", ")", "\n", "\n", "torch_load_call", "=", "[", "call", ".", "load", "(", "self", ".", "a_path_to_retrained_model", ",", "map_location", "=", "self", ".", "a_torch_device", ")", "]", "\n", "torch_mock", ".", "assert_has_calls", "(", "torch_load_call", ")", "\n", "\n", "load_state_dict_call", "=", "[", "call", "(", "all_layers_params", ")", "]", "\n", "load_state_dict_mock", ".", "assert_has_calls", "(", "load_state_dict_call", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.network.test_bpemb_seq2seq_model_gpu.BPEmbSeq2SeqGPUTest.test_whenInstantiateASeq2SeqModel_thenEncoderIsCalledOnce": [[98, 122], ["unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "deepparse.network.BPEmbSeq2SeqModel", "test_bpemb_seq2seq_model_gpu.BPEmbSeq2SeqGPUTest.setup_encoder_mocks", "deepparse.network.BPEmbSeq2SeqModel._encoder_step", "encoder_mock.assert_has_calls", "encoder_mock.__call__", "unittest.mock.MagicMock", "unittest.mock.MagicMock", "unittest.mock.call"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.network.base.Seq2SeqTestCase.setup_encoder_mocks", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.network.seq2seq.Seq2SeqModel._encoder_step", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.timer.timer.Timer.__call__"], ["", "@", "patch", "(", "\"deepparse.network.seq2seq.Encoder\"", ")", "\n", "@", "patch", "(", "\"deepparse.network.seq2seq.download_weights\"", ")", "\n", "@", "patch", "(", "\"deepparse.network.seq2seq.latest_version\"", ")", "\n", "@", "patch", "(", "\"os.path.isfile\"", ")", "\n", "@", "patch", "(", "\"deepparse.network.seq2seq.torch\"", ")", "\n", "@", "patch", "(", "\"deepparse.network.seq2seq.Seq2SeqModel.load_state_dict\"", ")", "\n", "def", "test_whenInstantiateASeq2SeqModel_thenEncoderIsCalledOnce", "(", "\n", "self", ",", "\n", "load_state_dict_mock", ",", "\n", "torch_mock", ",", "\n", "isfile_mock", ",", "\n", "last_version_mock", ",", "\n", "download_weights_mock", ",", "\n", "encoder_mock", ",", "\n", ")", ":", "\n", "        ", "seq2seq_model", "=", "BPEmbSeq2SeqModel", "(", "self", ".", "cache_dir", ",", "self", ".", "a_torch_device", ",", "self", ".", "output_size", ",", "self", ".", "verbose", ")", "\n", "\n", "to_predict_mock", ",", "lengths_tensor_mock", "=", "self", ".", "setup_encoder_mocks", "(", ")", "\n", "encoder_mock", ".", "__call__", "(", ")", ".", "return_value", "=", "(", "MagicMock", "(", ")", ",", "MagicMock", "(", ")", ")", "\n", "seq2seq_model", ".", "_encoder_step", "(", "to_predict_mock", ",", "lengths_tensor_mock", ",", "self", ".", "a_batch_size", ")", "\n", "\n", "encoder_call", "=", "[", "call", "(", ")", "(", "to_predict_mock", ",", "lengths_tensor_mock", ")", "]", "\n", "\n", "encoder_mock", ".", "assert_has_calls", "(", "encoder_call", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.network.test_bpemb_seq2seq_model_gpu.BPEmbSeq2SeqGPUTest.test_whenInstantiateASeq2SeqModelNoTarget_thenDecoderIsCalled": [[123, 163], ["unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "deepparse.network.BPEmbSeq2SeqModel", "test_bpemb_seq2seq_model_gpu.BPEmbSeq2SeqGPUTest.setUp_decoder_mocks", "unittest.mock.MagicMock", "unittest.mock.MagicMock", "unittest.mock.MagicMock", "deepparse.network.BPEmbSeq2SeqModel._decoder_step", "decoder_mock.assert_has_calls", "unittest.mock.MagicMock.max", "unittest.mock.call"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.network.base.Seq2SeqTestCase.setUp_decoder_mocks", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.network.seq2seq.Seq2SeqModel._decoder_step"], ["", "@", "patch", "(", "\"deepparse.network.seq2seq.Decoder\"", ")", "\n", "@", "patch", "(", "\"deepparse.network.seq2seq.download_weights\"", ")", "\n", "@", "patch", "(", "\"deepparse.network.seq2seq.latest_version\"", ")", "\n", "@", "patch", "(", "\"os.path.isfile\"", ")", "\n", "@", "patch", "(", "\"deepparse.network.seq2seq.torch\"", ")", "\n", "@", "patch", "(", "\"deepparse.network.seq2seq.Seq2SeqModel.load_state_dict\"", ")", "\n", "def", "test_whenInstantiateASeq2SeqModelNoTarget_thenDecoderIsCalled", "(", "\n", "self", ",", "\n", "load_state_dict_mock", ",", "\n", "torch_mock", ",", "\n", "isfile_mock", ",", "\n", "last_version_mock", ",", "\n", "download_weights_mock", ",", "\n", "decoder_mock", ",", "\n", ")", ":", "\n", "        ", "seq2seq_model", "=", "BPEmbSeq2SeqModel", "(", "\n", "self", ".", "cache_dir", ",", "self", ".", "a_torch_device", ",", "output_size", "=", "self", ".", "output_size", ",", "verbose", "=", "self", ".", "verbose", "\n", ")", "\n", "\n", "decoder_input_mock", ",", "decoder_hidden_mock", "=", "self", ".", "setUp_decoder_mocks", "(", "decoder_mock", ",", "attention_mechanism", "=", "False", ")", "\n", "\n", "view_mock", "=", "MagicMock", "(", ")", "\n", "decoder_input_mock", ".", "view", ".", "return_value", "=", "view_mock", "\n", "\n", "lengths_tensor_mock", "=", "MagicMock", "(", ")", "\n", "max_length", "=", "4", "# a sequence of 4 tokens", "\n", "lengths_tensor_mock", ".", "max", "(", ")", ".", "item", ".", "return_value", "=", "max_length", "\n", "encoder_outputs", "=", "MagicMock", "(", ")", "\n", "seq2seq_model", ".", "_decoder_step", "(", "\n", "decoder_input_mock", ",", "\n", "decoder_hidden_mock", ",", "\n", "encoder_outputs", ",", "\n", "self", ".", "a_none_target", ",", "\n", "lengths_tensor_mock", ",", "\n", "self", ".", "a_batch_size", ",", "\n", ")", "\n", "\n", "decoder_call", "=", "[", "call", "(", ")", "(", "view_mock", ",", "decoder_hidden_mock", ",", "encoder_outputs", ",", "lengths_tensor_mock", ")", "]", "*", "max_length", "\n", "\n", "decoder_mock", ".", "assert_has_calls", "(", "decoder_call", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.network.test_bpemb_seq2seq_model_gpu.BPEmbSeq2SeqGPUTest.test_whenInstantiateASeq2SeqAttModelNoTarget_thenDecoderIsCalled": [[164, 208], ["unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "deepparse.network.BPEmbSeq2SeqModel", "test_bpemb_seq2seq_model_gpu.BPEmbSeq2SeqGPUTest.setUp_decoder_mocks", "unittest.mock.MagicMock", "unittest.mock.MagicMock", "unittest.mock.MagicMock", "deepparse.network.BPEmbSeq2SeqModel._decoder_step", "decoder_mock.assert_has_calls", "unittest.mock.MagicMock.max", "unittest.mock.call"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.network.base.Seq2SeqTestCase.setUp_decoder_mocks", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.network.seq2seq.Seq2SeqModel._decoder_step"], ["", "@", "patch", "(", "\"deepparse.network.seq2seq.Decoder\"", ")", "\n", "@", "patch", "(", "\"deepparse.network.seq2seq.download_weights\"", ")", "\n", "@", "patch", "(", "\"deepparse.network.seq2seq.latest_version\"", ")", "\n", "@", "patch", "(", "\"os.path.isfile\"", ")", "\n", "@", "patch", "(", "\"deepparse.network.seq2seq.torch\"", ")", "\n", "@", "patch", "(", "\"deepparse.network.seq2seq.Seq2SeqModel.load_state_dict\"", ")", "\n", "def", "test_whenInstantiateASeq2SeqAttModelNoTarget_thenDecoderIsCalled", "(", "\n", "self", ",", "\n", "load_state_dict_mock", ",", "\n", "torch_mock", ",", "\n", "isfile_mock", ",", "\n", "last_version_mock", ",", "\n", "download_weights_mock", ",", "\n", "decoder_mock", ",", "\n", ")", ":", "\n", "        ", "seq2seq_model", "=", "BPEmbSeq2SeqModel", "(", "\n", "self", ".", "cache_dir", ",", "\n", "self", ".", "a_torch_device", ",", "\n", "output_size", "=", "self", ".", "output_size", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", "attention_mechanism", "=", "True", ",", "\n", ")", "\n", "\n", "decoder_input_mock", ",", "decoder_hidden_mock", "=", "self", ".", "setUp_decoder_mocks", "(", "decoder_mock", ",", "attention_mechanism", "=", "True", ")", "\n", "\n", "view_mock", "=", "MagicMock", "(", ")", "\n", "decoder_input_mock", ".", "view", ".", "return_value", "=", "view_mock", "\n", "\n", "lengths_tensor_mock", "=", "MagicMock", "(", ")", "\n", "max_length", "=", "4", "# a sequence of 4 tokens", "\n", "lengths_tensor_mock", ".", "max", "(", ")", ".", "item", ".", "return_value", "=", "max_length", "\n", "encoder_outputs", "=", "MagicMock", "(", ")", "\n", "seq2seq_model", ".", "_decoder_step", "(", "\n", "decoder_input_mock", ",", "\n", "decoder_hidden_mock", ",", "\n", "encoder_outputs", ",", "\n", "self", ".", "a_none_target", ",", "\n", "lengths_tensor_mock", ",", "\n", "self", ".", "a_batch_size", ",", "\n", ")", "\n", "\n", "decoder_call", "=", "[", "call", "(", ")", "(", "view_mock", ",", "decoder_hidden_mock", ",", "encoder_outputs", ",", "lengths_tensor_mock", ")", "]", "*", "max_length", "\n", "\n", "decoder_mock", ".", "assert_has_calls", "(", "decoder_call", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.network.test_bpemb_seq2seq_model_gpu.BPEmbSeq2SeqGPUTest.test_whenInstantiateASeq2SeqModelWithTarget_thenDecoderIsCalled": [[209, 258], ["unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "deepparse.network.BPEmbSeq2SeqModel", "test_bpemb_seq2seq_model_gpu.BPEmbSeq2SeqGPUTest.setUp_decoder_mocks", "unittest.mock.MagicMock", "unittest.mock.MagicMock", "deepparse.network.BPEmbSeq2SeqModel._decoder_step", "range", "test_bpemb_seq2seq_model_gpu.BPEmbSeq2SeqGPUTest.assert_has_calls_tensor_equals", "decoder_call.append", "unittest.mock.MagicMock.max", "unittest.mock.call", "test_bpemb_seq2seq_model_gpu.BPEmbSeq2SeqGPUTest.a_transpose_target_vector[].view"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.network.base.Seq2SeqTestCase.setUp_decoder_mocks", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.network.seq2seq.Seq2SeqModel._decoder_step", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.network.base.Seq2SeqTestCase.assert_has_calls_tensor_equals"], ["", "@", "patch", "(", "\"deepparse.network.seq2seq.random.random\"", ")", "\n", "@", "patch", "(", "\"deepparse.network.seq2seq.Decoder\"", ")", "\n", "@", "patch", "(", "\"deepparse.network.seq2seq.download_weights\"", ")", "\n", "@", "patch", "(", "\"deepparse.network.seq2seq.latest_version\"", ")", "\n", "@", "patch", "(", "\"os.path.isfile\"", ")", "\n", "@", "patch", "(", "\"deepparse.network.seq2seq.torch\"", ")", "\n", "@", "patch", "(", "\"deepparse.network.seq2seq.Seq2SeqModel.load_state_dict\"", ")", "\n", "def", "test_whenInstantiateASeq2SeqModelWithTarget_thenDecoderIsCalled", "(", "\n", "self", ",", "\n", "load_state_dict_mock", ",", "\n", "torch_mock", ",", "\n", "isfile_mock", ",", "\n", "last_version_mock", ",", "\n", "download_weights_mock", ",", "\n", "decoder_mock", ",", "\n", "random_mock", ",", "\n", ")", ":", "\n", "        ", "random_mock", ".", "return_value", "=", "self", ".", "a_value_lower_than_threshold", "\n", "\n", "seq2seq_model", "=", "BPEmbSeq2SeqModel", "(", "\n", "self", ".", "cache_dir", ",", "self", ".", "a_torch_device", ",", "output_size", "=", "self", ".", "output_size", ",", "verbose", "=", "self", ".", "verbose", "\n", ")", "\n", "\n", "decoder_input_mock", ",", "decoder_hidden_mock", "=", "self", ".", "setUp_decoder_mocks", "(", "decoder_mock", ",", "attention_mechanism", "=", "False", ")", "\n", "\n", "lengths_tensor_mock", "=", "MagicMock", "(", ")", "\n", "max_length", "=", "4", "# a sequence of 4 tokens", "\n", "lengths_tensor_mock", ".", "max", "(", ")", ".", "item", ".", "return_value", "=", "max_length", "\n", "encoder_outputs", "=", "MagicMock", "(", ")", "\n", "seq2seq_model", ".", "_decoder_step", "(", "\n", "decoder_input_mock", ",", "\n", "decoder_hidden_mock", ",", "\n", "encoder_outputs", ",", "\n", "self", ".", "a_none_target", ",", "\n", "lengths_tensor_mock", ",", "\n", "self", ".", "a_batch_size", ",", "\n", ")", "\n", "\n", "decoder_call", "=", "[", "]", "\n", "\n", "for", "idx", "in", "range", "(", "max_length", ")", ":", "\n", "            ", "decoder_call", ".", "append", "(", "\n", "call", "(", ")", "(", "\n", "self", ".", "a_transpose_target_vector", "[", "idx", "]", ".", "view", "(", "1", ",", "self", ".", "a_batch_size", ",", "1", ")", ",", "\n", "decoder_hidden_mock", ",", "\n", ")", "\n", ")", "\n", "\n", "", "self", ".", "assert_has_calls_tensor_equals", "(", "decoder_mock", ",", "decoder_call", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.network.test_bpemb_seq2seq_model_gpu.BPEmbSeq2SeqGPUTest.test_givenABPEmbSeq2SeqModel_whenForwardPass_thenProperlyDoPAss": [[259, 312], ["unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "test_bpemb_seq2seq_model_gpu.BPEmbSeq2SeqGPUTest.setup_encoder_mocks", "test_bpemb_seq2seq_model_gpu.BPEmbSeq2SeqGPUTest.setUp_decoder_mocks", "unittest.mock.MagicMock", "unittest.mock.MagicMock", "unittest.mock.MagicMock", "encoder_mock.__call__", "unittest.mock.patch", "unittest.mock.MagicMock", "deepparse.network.BPEmbSeq2SeqModel", "deepparse.network.BPEmbSeq2SeqModel.forward", "embedding_network_patch.assert_has_calls", "encoder_mock.assert_has_calls", "lengths_tensor_mock.assert_has_calls", "decoder_mock.assert_has_calls", "torch_mock.zeros().to", "embedding_network_patch", "unittest.mock.call.max().item", "torch_mock.zeros", "unittest.mock.call", "unittest.mock.call", "unittest.mock.call", "unittest.mock.call.max"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.network.base.Seq2SeqTestCase.setup_encoder_mocks", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.network.base.Seq2SeqTestCase.setUp_decoder_mocks", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.timer.timer.Timer.__call__", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.network.embedding_network.EmbeddingNetwork.forward"], ["", "@", "patch", "(", "\"deepparse.network.seq2seq.Encoder\"", ")", "\n", "@", "patch", "(", "\"deepparse.network.seq2seq.Decoder\"", ")", "\n", "@", "patch", "(", "\"deepparse.network.seq2seq.download_weights\"", ")", "\n", "@", "patch", "(", "\"deepparse.network.seq2seq.latest_version\"", ")", "\n", "@", "patch", "(", "\"os.path.isfile\"", ")", "\n", "@", "patch", "(", "\"deepparse.network.seq2seq.torch\"", ")", "\n", "@", "patch", "(", "\"deepparse.network.seq2seq.Seq2SeqModel.load_state_dict\"", ")", "\n", "def", "test_givenABPEmbSeq2SeqModel_whenForwardPass_thenProperlyDoPAss", "(", "\n", "self", ",", "\n", "load_state_dict_mock", ",", "\n", "torch_mock", ",", "\n", "isfile_mock", ",", "\n", "last_version_mock", ",", "\n", "download_weights_mock", ",", "\n", "decoder_mock", ",", "\n", "encoder_mock", ",", "\n", ")", ":", "\n", "        ", "to_predict_mock", ",", "lengths_tensor_mock", "=", "self", ".", "setup_encoder_mocks", "(", ")", "\n", "\n", "_", ",", "decoder_hidden_mock", "=", "self", ".", "setUp_decoder_mocks", "(", "decoder_mock", ",", "attention_mechanism", "=", "False", ")", "\n", "decomposition_lengths_mock", "=", "MagicMock", "(", ")", "\n", "\n", "# we don't use the one of the setUp_decoder_mocks since we do the full loop", "\n", "decoder_input_mock", "=", "MagicMock", "(", ")", "\n", "to_mock", "=", "MagicMock", "(", ")", "\n", "torch_mock", ".", "zeros", "(", ")", ".", "to", "(", ")", ".", "new_full", ".", "return_value", "=", "to_mock", "\n", "\n", "# We mock the return of the decoder output", "\n", "encoder_mock", ".", "__call__", "(", ")", ".", "return_value", "=", "(", "decoder_input_mock", ",", "decoder_hidden_mock", ")", "\n", "\n", "with", "patch", "(", "\"deepparse.network.bpemb_seq2seq.EmbeddingNetwork\"", ")", "as", "embedding_network_patch", ":", "\n", "# we mock the output of the embedding layer", "\n", "            ", "embedded_output_mock", "=", "MagicMock", "(", ")", "\n", "embedding_network_patch", "(", ")", ".", "return_value", "=", "embedded_output_mock", "\n", "seq2seq_model", "=", "BPEmbSeq2SeqModel", "(", "self", ".", "cache_dir", ",", "self", ".", "a_torch_device", ",", "self", ".", "output_size", ",", "self", ".", "verbose", ")", "\n", "\n", "seq2seq_model", ".", "forward", "(", "\n", "to_predict", "=", "to_predict_mock", ",", "\n", "decomposition_lengths", "=", "decomposition_lengths_mock", ",", "\n", "lengths_tensor", "=", "lengths_tensor_mock", ",", "\n", "target", "=", "None", ",", "\n", ")", "\n", "\n", "embedding_network_patch", ".", "assert_has_calls", "(", "[", "call", "(", ")", "(", "to_predict_mock", ",", "decomposition_lengths_mock", ")", "]", ")", "\n", "encoder_mock", ".", "assert_has_calls", "(", "[", "call", "(", ")", "(", "embedded_output_mock", ",", "lengths_tensor_mock", ")", "]", ")", "\n", "lengths_tensor_mock", ".", "assert_has_calls", "(", "[", "call", ".", "max", "(", ")", ".", "item", "(", ")", "]", ")", "\n", "decoder_mock", ".", "assert_has_calls", "(", "\n", "[", "\n", "call", "(", ")", "(", "\n", "to_mock", ",", "\n", "decoder_hidden_mock", ",", "\n", "decoder_input_mock", ",", "\n", "lengths_tensor_mock", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.network.test_bpemb_seq2seq_model_gpu.BPEmbSeq2SeqGPUTest.test_givenABPEmbSeq2SeqModel_whenForwardPassWithTarget_thenProperlyDoPAss": [[316, 379], ["unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.MagicMock", "test_bpemb_seq2seq_model_gpu.BPEmbSeq2SeqGPUTest.setup_encoder_mocks", "test_bpemb_seq2seq_model_gpu.BPEmbSeq2SeqGPUTest.setUp_decoder_mocks", "unittest.mock.MagicMock", "unittest.mock.MagicMock", "unittest.mock.MagicMock", "encoder_mock.__call__", "unittest.mock.patch", "unittest.mock.MagicMock", "deepparse.network.BPEmbSeq2SeqModel", "deepparse.network.BPEmbSeq2SeqModel.forward", "embedding_network_patch.assert_has_calls", "encoder_mock.assert_has_calls", "lengths_tensor_mock.assert_has_calls", "decoder_mock.assert_has_calls", "unittest.mock.MagicMock.assert_has_calls", "torch_mock.zeros().to", "embedding_network_patch", "unittest.mock.call.max().item", "unittest.mock.call.transpose", "torch_mock.zeros", "unittest.mock.call", "unittest.mock.call", "unittest.mock.call", "unittest.mock.call.max"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.network.base.Seq2SeqTestCase.setup_encoder_mocks", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.network.base.Seq2SeqTestCase.setUp_decoder_mocks", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.timer.timer.Timer.__call__", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.network.embedding_network.EmbeddingNetwork.forward"], ["", "", "@", "patch", "(", "\"deepparse.network.seq2seq.random.random\"", ")", "\n", "@", "patch", "(", "\"deepparse.network.seq2seq.Encoder\"", ")", "\n", "@", "patch", "(", "\"deepparse.network.seq2seq.Decoder\"", ")", "\n", "@", "patch", "(", "\"deepparse.network.seq2seq.download_weights\"", ")", "\n", "@", "patch", "(", "\"deepparse.network.seq2seq.latest_version\"", ")", "\n", "@", "patch", "(", "\"os.path.isfile\"", ")", "\n", "@", "patch", "(", "\"deepparse.network.seq2seq.torch\"", ")", "\n", "@", "patch", "(", "\"deepparse.network.seq2seq.Seq2SeqModel.load_state_dict\"", ")", "\n", "def", "test_givenABPEmbSeq2SeqModel_whenForwardPassWithTarget_thenProperlyDoPAss", "(", "\n", "self", ",", "\n", "load_state_dict_mock", ",", "\n", "torch_mock", ",", "\n", "isfile_mock", ",", "\n", "last_version_mock", ",", "\n", "download_weights_mock", ",", "\n", "decoder_mock", ",", "\n", "encoder_mock", ",", "\n", "random_mock", ",", "\n", ")", ":", "\n", "        ", "random_mock", ".", "return_value", "=", "self", ".", "a_value_lower_than_threshold", "\n", "\n", "target_mock", "=", "MagicMock", "(", ")", "\n", "to_predict_mock", ",", "lengths_tensor_mock", "=", "self", ".", "setup_encoder_mocks", "(", ")", "\n", "\n", "# 1) We reset it later", "\n", "_", ",", "decoder_hidden_mock", "=", "self", ".", "setUp_decoder_mocks", "(", "decoder_mock", ",", "attention_mechanism", "=", "False", ")", "\n", "decomposition_lengths_mock", "=", "MagicMock", "(", ")", "\n", "\n", "# We don't use the one of the setUp_decoder_mocks since we do the full loop", "\n", "decoder_input_mock", "=", "MagicMock", "(", ")", "\n", "to_mock", "=", "MagicMock", "(", ")", "\n", "torch_mock", ".", "zeros", "(", ")", ".", "to", "(", ")", ".", "new_full", ".", "return_value", "=", "to_mock", "\n", "\n", "# We mock the return of the decoder output", "\n", "encoder_mock", ".", "__call__", "(", ")", ".", "return_value", "=", "(", "decoder_input_mock", ",", "decoder_hidden_mock", ")", "\n", "\n", "with", "patch", "(", "\"deepparse.network.bpemb_seq2seq.EmbeddingNetwork\"", ")", "as", "embedding_network_patch", ":", "\n", "# we mock the output of the embedding layer", "\n", "            ", "embedded_output_mock", "=", "MagicMock", "(", ")", "\n", "embedding_network_patch", "(", ")", ".", "return_value", "=", "embedded_output_mock", "\n", "seq2seq_model", "=", "BPEmbSeq2SeqModel", "(", "self", ".", "cache_dir", ",", "self", ".", "a_torch_device", ",", "self", ".", "output_size", ",", "self", ".", "verbose", ")", "\n", "\n", "seq2seq_model", ".", "forward", "(", "\n", "to_predict", "=", "to_predict_mock", ",", "\n", "decomposition_lengths", "=", "decomposition_lengths_mock", ",", "\n", "lengths_tensor", "=", "lengths_tensor_mock", ",", "\n", "target", "=", "target_mock", ",", "\n", ")", "\n", "\n", "embedding_network_patch", ".", "assert_has_calls", "(", "[", "call", "(", ")", "(", "to_predict_mock", ",", "decomposition_lengths_mock", ")", "]", ")", "\n", "encoder_mock", ".", "assert_has_calls", "(", "[", "call", "(", ")", "(", "embedded_output_mock", ",", "lengths_tensor_mock", ")", "]", ")", "\n", "lengths_tensor_mock", ".", "assert_has_calls", "(", "[", "call", ".", "max", "(", ")", ".", "item", "(", ")", "]", ")", "\n", "decoder_mock", ".", "assert_has_calls", "(", "\n", "[", "\n", "call", "(", ")", "(", "\n", "to_mock", ",", "\n", "decoder_hidden_mock", ",", "\n", "decoder_input_mock", ",", "\n", "lengths_tensor_mock", ",", "\n", ")", "\n", "]", "\n", ")", "\n", "target_mock", ".", "assert_has_calls", "(", "[", "call", ".", "transpose", "(", "0", ",", "1", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.network.test_bpemb_seq2seq_model_gpu.BPEmbSeq2SeqGPUTest.test_givenABPEmbAttSeq2SeqModel_whenForwardPassWithTarget_thenProperlyDoPAss": [[380, 448], ["unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.MagicMock", "test_bpemb_seq2seq_model_gpu.BPEmbSeq2SeqGPUTest.setup_encoder_mocks", "test_bpemb_seq2seq_model_gpu.BPEmbSeq2SeqGPUTest.setUp_decoder_mocks", "unittest.mock.MagicMock", "unittest.mock.MagicMock", "unittest.mock.MagicMock", "encoder_mock.__call__", "unittest.mock.patch", "unittest.mock.MagicMock", "deepparse.network.BPEmbSeq2SeqModel", "deepparse.network.BPEmbSeq2SeqModel.forward", "embedding_network_patch.assert_has_calls", "encoder_mock.assert_has_calls", "lengths_tensor_mock.assert_has_calls", "decoder_mock.assert_has_calls", "unittest.mock.MagicMock.assert_has_calls", "torch_mock.zeros().to", "embedding_network_patch", "unittest.mock.call.max().item", "unittest.mock.call.transpose", "torch_mock.zeros", "unittest.mock.call", "unittest.mock.call", "unittest.mock.call", "unittest.mock.call.max"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.network.base.Seq2SeqTestCase.setup_encoder_mocks", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.network.base.Seq2SeqTestCase.setUp_decoder_mocks", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.timer.timer.Timer.__call__", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.network.embedding_network.EmbeddingNetwork.forward"], ["", "", "@", "patch", "(", "\"deepparse.network.seq2seq.random.random\"", ")", "\n", "@", "patch", "(", "\"deepparse.network.seq2seq.Encoder\"", ")", "\n", "@", "patch", "(", "\"deepparse.network.seq2seq.Decoder\"", ")", "\n", "@", "patch", "(", "\"deepparse.network.seq2seq.download_weights\"", ")", "\n", "@", "patch", "(", "\"deepparse.network.seq2seq.latest_version\"", ")", "\n", "@", "patch", "(", "\"os.path.isfile\"", ")", "\n", "@", "patch", "(", "\"deepparse.network.seq2seq.torch\"", ")", "\n", "@", "patch", "(", "\"deepparse.network.seq2seq.Seq2SeqModel.load_state_dict\"", ")", "\n", "def", "test_givenABPEmbAttSeq2SeqModel_whenForwardPassWithTarget_thenProperlyDoPAss", "(", "\n", "self", ",", "\n", "load_state_dict_mock", ",", "\n", "torch_mock", ",", "\n", "isfile_mock", ",", "\n", "last_version_mock", ",", "\n", "download_weights_mock", ",", "\n", "decoder_mock", ",", "\n", "encoder_mock", ",", "\n", "random_mock", ",", "\n", ")", ":", "\n", "        ", "random_mock", ".", "return_value", "=", "self", ".", "a_value_lower_than_threshold", "\n", "\n", "target_mock", "=", "MagicMock", "(", ")", "\n", "to_predict_mock", ",", "lengths_tensor_mock", "=", "self", ".", "setup_encoder_mocks", "(", ")", "\n", "\n", "_", ",", "decoder_hidden_mock", "=", "self", ".", "setUp_decoder_mocks", "(", "decoder_mock", ",", "attention_mechanism", "=", "True", ")", "\n", "decomposition_lengths_mock", "=", "MagicMock", "(", ")", "\n", "\n", "# We don't use the one of the setUp_decoder_mocks since we do the full loop", "\n", "decoder_input_mock", "=", "MagicMock", "(", ")", "\n", "to_mock", "=", "MagicMock", "(", ")", "\n", "torch_mock", ".", "zeros", "(", ")", ".", "to", "(", ")", ".", "new_full", ".", "return_value", "=", "to_mock", "\n", "\n", "# We mock the return of the decoder output", "\n", "encoder_mock", ".", "__call__", "(", ")", ".", "return_value", "=", "(", "decoder_input_mock", ",", "decoder_hidden_mock", ")", "\n", "\n", "with", "patch", "(", "\"deepparse.network.bpemb_seq2seq.EmbeddingNetwork\"", ")", "as", "embedding_network_patch", ":", "\n", "# we mock the output of the embedding layer", "\n", "            ", "embedded_output_mock", "=", "MagicMock", "(", ")", "\n", "embedding_network_patch", "(", ")", ".", "return_value", "=", "embedded_output_mock", "\n", "seq2seq_model", "=", "BPEmbSeq2SeqModel", "(", "\n", "self", ".", "cache_dir", ",", "\n", "self", ".", "a_torch_device", ",", "\n", "self", ".", "output_size", ",", "\n", "self", ".", "verbose", ",", "\n", "attention_mechanism", "=", "True", ",", "\n", ")", "\n", "\n", "seq2seq_model", ".", "forward", "(", "\n", "to_predict", "=", "to_predict_mock", ",", "\n", "decomposition_lengths", "=", "decomposition_lengths_mock", ",", "\n", "lengths_tensor", "=", "lengths_tensor_mock", ",", "\n", "target", "=", "target_mock", ",", "\n", ")", "\n", "\n", "embedding_network_patch", ".", "assert_has_calls", "(", "[", "call", "(", ")", "(", "to_predict_mock", ",", "decomposition_lengths_mock", ")", "]", ")", "\n", "encoder_mock", ".", "assert_has_calls", "(", "[", "call", "(", ")", "(", "embedded_output_mock", ",", "lengths_tensor_mock", ")", "]", ")", "\n", "lengths_tensor_mock", ".", "assert_has_calls", "(", "[", "call", ".", "max", "(", ")", ".", "item", "(", ")", "]", ")", "\n", "decoder_mock", ".", "assert_has_calls", "(", "\n", "[", "\n", "call", "(", ")", "(", "\n", "to_mock", ",", "\n", "decoder_hidden_mock", ",", "\n", "decoder_input_mock", ",", "\n", "lengths_tensor_mock", ",", "\n", ")", "\n", "]", "\n", ")", "\n", "target_mock", ".", "assert_has_calls", "(", "[", "call", ".", "transpose", "(", "0", ",", "1", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.network.test_fasttext_seq2seq_model_cpu.FasttextSeq2SeqCPUTest.setUpClass": [[16, 23], ["super().setUpClass", "torch.tensor", "cls.a_target_vector.transpose"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_seq2seq_fasttext_model_gpu.FastTextSeq2SeqIntegrationTest.setUpClass"], ["    ", "@", "classmethod", "\n", "def", "setUpClass", "(", "cls", ")", ":", "\n", "        ", "super", "(", "FasttextSeq2SeqCPUTest", ",", "cls", ")", ".", "setUpClass", "(", ")", "\n", "cls", ".", "model_type", "=", "\"fasttext\"", "\n", "\n", "cls", ".", "a_target_vector", "=", "torch", ".", "tensor", "(", "[", "[", "0", ",", "1", ",", "1", ",", "4", ",", "5", ",", "8", "]", ",", "[", "1", ",", "0", ",", "3", ",", "8", ",", "0", ",", "0", "]", "]", ",", "device", "=", "cls", ".", "a_cpu_device", ")", "\n", "cls", ".", "a_transpose_target_vector", "=", "cls", ".", "a_target_vector", ".", "transpose", "(", "0", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.network.test_fasttext_seq2seq_model_cpu.FasttextSeq2SeqCPUTest.test_givenNotLocalWeights_whenInstantiatingAFastTextSeq2SeqModel_thenShouldDownloadWeights": [[24, 34], ["unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "deepparse.network.FastTextSeq2SeqModel", "download_weights_mock.assert_called_with"], "methods", ["None"], ["", "@", "patch", "(", "\"os.path.isfile\"", ")", "\n", "@", "patch", "(", "\"deepparse.network.seq2seq.torch\"", ")", "\n", "@", "patch", "(", "\"deepparse.network.seq2seq.Seq2SeqModel.load_state_dict\"", ")", "\n", "def", "test_givenNotLocalWeights_whenInstantiatingAFastTextSeq2SeqModel_thenShouldDownloadWeights", "(", "\n", "self", ",", "load_state_dict_mock", ",", "torch_mock", ",", "isfile_mock", "\n", ")", ":", "\n", "        ", "isfile_mock", ".", "return_value", "=", "False", "\n", "with", "patch", "(", "\"deepparse.network.seq2seq.download_weights\"", ")", "as", "download_weights_mock", ":", "\n", "            ", "FastTextSeq2SeqModel", "(", "self", ".", "cache_dir", ",", "self", ".", "a_cpu_device", ",", "output_size", "=", "self", ".", "output_size", ",", "verbose", "=", "self", ".", "verbose", ")", "\n", "download_weights_mock", ".", "assert_called_with", "(", "self", ".", "model_type", ",", "self", ".", "a_root_path", ",", "verbose", "=", "self", ".", "verbose", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.network.test_fasttext_seq2seq_model_cpu.FasttextSeq2SeqCPUTest.test_givenLocalWeightsNotLastVersion_whenInstantiatingAFastTextSeq2SeqModel_thenShouldDownloadWeights": [[35, 47], ["unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "deepparse.network.FastTextSeq2SeqModel", "download_weights_mock.assert_called_with"], "methods", ["None"], ["", "", "@", "patch", "(", "\"deepparse.network.seq2seq.latest_version\"", ")", "\n", "@", "patch", "(", "\"os.path.isfile\"", ")", "\n", "@", "patch", "(", "\"deepparse.network.seq2seq.torch\"", ")", "\n", "@", "patch", "(", "\"deepparse.network.seq2seq.Seq2SeqModel.load_state_dict\"", ")", "\n", "def", "test_givenLocalWeightsNotLastVersion_whenInstantiatingAFastTextSeq2SeqModel_thenShouldDownloadWeights", "(", "\n", "self", ",", "load_state_dict_mock", ",", "torch_mock", ",", "isfile_mock", ",", "last_version_mock", "\n", ")", ":", "\n", "        ", "isfile_mock", ".", "return_value", "=", "True", "\n", "last_version_mock", ".", "return_value", "=", "False", "\n", "with", "patch", "(", "\"deepparse.network.seq2seq.download_weights\"", ")", "as", "download_weights_mock", ":", "\n", "            ", "FastTextSeq2SeqModel", "(", "self", ".", "cache_dir", ",", "self", ".", "a_cpu_device", ",", "output_size", "=", "self", ".", "output_size", ",", "verbose", "=", "self", ".", "verbose", ")", "\n", "download_weights_mock", ".", "assert_called_with", "(", "self", ".", "model_type", ",", "self", ".", "a_root_path", ",", "verbose", "=", "self", ".", "verbose", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.network.test_fasttext_seq2seq_model_cpu.FasttextSeq2SeqCPUTest.test_givenRetrainedWeights_whenInstantiatingAFastTextSeq2SeqModel_thenShouldUseRetrainedWeights": [[48, 68], ["unittest.mock.patch", "unittest.mock.patch", "unittest.mock.MagicMock", "deepparse.network.FastTextSeq2SeqModel", "torch_mock.assert_has_calls", "load_state_dict_mock.assert_has_calls", "unittest.mock.call.load", "unittest.mock.call"], "methods", ["None"], ["", "", "@", "patch", "(", "\"deepparse.network.seq2seq.torch\"", ")", "\n", "@", "patch", "(", "\"deepparse.network.seq2seq.Seq2SeqModel.load_state_dict\"", ")", "\n", "def", "test_givenRetrainedWeights_whenInstantiatingAFastTextSeq2SeqModel_thenShouldUseRetrainedWeights", "(", "\n", "self", ",", "load_state_dict_mock", ",", "torch_mock", "\n", ")", ":", "\n", "        ", "all_layers_params", "=", "MagicMock", "(", ")", "\n", "torch_mock", ".", "load", ".", "return_value", "=", "all_layers_params", "\n", "FastTextSeq2SeqModel", "(", "\n", "self", ".", "cache_dir", ",", "\n", "self", ".", "a_cpu_device", ",", "\n", "output_size", "=", "self", ".", "output_size", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", "path_to_retrained_model", "=", "self", ".", "a_path_to_retrained_model", ",", "\n", ")", "\n", "\n", "torch_load_call", "=", "[", "call", ".", "load", "(", "self", ".", "a_path_to_retrained_model", ",", "map_location", "=", "self", ".", "a_cpu_device", ")", "]", "\n", "torch_mock", ".", "assert_has_calls", "(", "torch_load_call", ")", "\n", "\n", "load_state_dict_call", "=", "[", "call", "(", "all_layers_params", ")", "]", "\n", "load_state_dict_mock", ".", "assert_has_calls", "(", "load_state_dict_call", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.network.test_fasttext_seq2seq_model_cpu.FasttextSeq2SeqCPUTest.test_whenInstantiateASeq2SeqModel_thenEncodeIsCalledOnce": [[69, 94], ["unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "deepparse.network.FastTextSeq2SeqModel", "test_fasttext_seq2seq_model_cpu.FasttextSeq2SeqCPUTest.setup_encoder_mocks", "deepparse.network.FastTextSeq2SeqModel._encoder_step", "encoder_mock.assert_has_calls", "encoder_mock.__call__", "unittest.mock.MagicMock", "unittest.mock.MagicMock", "unittest.mock.call"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.network.base.Seq2SeqTestCase.setup_encoder_mocks", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.network.seq2seq.Seq2SeqModel._encoder_step", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.timer.timer.Timer.__call__"], ["", "@", "patch", "(", "\"deepparse.network.seq2seq.Encoder\"", ")", "\n", "@", "patch", "(", "\"deepparse.network.seq2seq.download_weights\"", ")", "\n", "@", "patch", "(", "\"deepparse.network.seq2seq.latest_version\"", ")", "\n", "@", "patch", "(", "\"os.path.isfile\"", ")", "\n", "@", "patch", "(", "\"deepparse.network.seq2seq.torch\"", ")", "\n", "@", "patch", "(", "\"deepparse.network.seq2seq.Seq2SeqModel.load_state_dict\"", ")", "\n", "def", "test_whenInstantiateASeq2SeqModel_thenEncodeIsCalledOnce", "(", "\n", "self", ",", "\n", "load_state_dict_mock", ",", "\n", "torch_mock", ",", "\n", "isfile_mock", ",", "\n", "last_version_mock", ",", "\n", "download_weights_mock", ",", "\n", "encoder_mock", ",", "\n", ")", ":", "\n", "        ", "seq2seq_model", "=", "FastTextSeq2SeqModel", "(", "self", ".", "cache_dir", ",", "self", ".", "a_cpu_device", ",", "self", ".", "output_size", ",", "self", ".", "verbose", ")", "\n", "\n", "to_predict_mock", ",", "lengths_tensor_mock", "=", "self", ".", "setup_encoder_mocks", "(", ")", "\n", "encoder_mock", ".", "__call__", "(", ")", ".", "return_value", "=", "(", "MagicMock", "(", ")", ",", "MagicMock", "(", ")", ")", "\n", "\n", "seq2seq_model", ".", "_encoder_step", "(", "to_predict_mock", ",", "lengths_tensor_mock", ",", "self", ".", "a_batch_size", ")", "\n", "\n", "encoder_call", "=", "[", "call", "(", ")", "(", "to_predict_mock", ",", "lengths_tensor_mock", ")", "]", "\n", "\n", "encoder_mock", ".", "assert_has_calls", "(", "encoder_call", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.network.test_fasttext_seq2seq_model_cpu.FasttextSeq2SeqCPUTest.test_whenInstantiateASeq2SeqModelNoTarget_thenDecoderIsCalled": [[95, 139], ["unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "deepparse.network.FastTextSeq2SeqModel", "test_fasttext_seq2seq_model_cpu.FasttextSeq2SeqCPUTest.setUp_decoder_mocks", "unittest.mock.MagicMock", "unittest.mock.MagicMock", "unittest.mock.MagicMock", "deepparse.network.FastTextSeq2SeqModel._decoder_step", "decoder_mock.assert_has_calls", "unittest.mock.MagicMock.max", "unittest.mock.call"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.network.base.Seq2SeqTestCase.setUp_decoder_mocks", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.network.seq2seq.Seq2SeqModel._decoder_step"], ["", "@", "patch", "(", "\"deepparse.network.seq2seq.Decoder\"", ")", "\n", "@", "patch", "(", "\"deepparse.network.seq2seq.download_weights\"", ")", "\n", "@", "patch", "(", "\"deepparse.network.seq2seq.latest_version\"", ")", "\n", "@", "patch", "(", "\"os.path.isfile\"", ")", "\n", "@", "patch", "(", "\"deepparse.network.seq2seq.torch\"", ")", "\n", "@", "patch", "(", "\"deepparse.network.seq2seq.Seq2SeqModel.load_state_dict\"", ")", "\n", "def", "test_whenInstantiateASeq2SeqModelNoTarget_thenDecoderIsCalled", "(", "\n", "self", ",", "\n", "load_state_dict_mock", ",", "\n", "torch_mock", ",", "\n", "isfile_mock", ",", "\n", "last_version_mock", ",", "\n", "download_weights_mock", ",", "\n", "decoder_mock", ",", "\n", ")", ":", "\n", "        ", "seq2seq_model", "=", "FastTextSeq2SeqModel", "(", "\n", "self", ".", "cache_dir", ",", "\n", "self", ".", "a_cpu_device", ",", "\n", "output_size", "=", "self", ".", "output_size", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", "attention_mechanism", "=", "False", ",", "\n", ")", "\n", "\n", "decoder_input_mock", ",", "decoder_hidden_mock", "=", "self", ".", "setUp_decoder_mocks", "(", "decoder_mock", ",", "attention_mechanism", "=", "True", ")", "\n", "\n", "view_mock", "=", "MagicMock", "(", ")", "\n", "decoder_input_mock", ".", "view", ".", "return_value", "=", "view_mock", "\n", "\n", "lengths_tensor_mock", "=", "MagicMock", "(", ")", "\n", "max_length", "=", "4", "# a sequence of 4 tokens", "\n", "lengths_tensor_mock", ".", "max", "(", ")", ".", "item", ".", "return_value", "=", "max_length", "\n", "encoder_outputs", "=", "MagicMock", "(", ")", "\n", "seq2seq_model", ".", "_decoder_step", "(", "\n", "decoder_input_mock", ",", "\n", "decoder_hidden_mock", ",", "\n", "encoder_outputs", ",", "\n", "self", ".", "a_none_target", ",", "\n", "lengths_tensor_mock", ",", "\n", "self", ".", "a_batch_size", ",", "\n", ")", "\n", "\n", "decoder_call", "=", "[", "call", "(", ")", "(", "view_mock", ",", "decoder_hidden_mock", ",", "encoder_outputs", ",", "lengths_tensor_mock", ")", "]", "*", "max_length", "\n", "\n", "decoder_mock", ".", "assert_has_calls", "(", "decoder_call", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.network.test_fasttext_seq2seq_model_cpu.FasttextSeq2SeqCPUTest.test_whenInstantiateASeq2SeqAttModelNoTarget_thenDecoderIsCalled": [[140, 184], ["unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "deepparse.network.FastTextSeq2SeqModel", "test_fasttext_seq2seq_model_cpu.FasttextSeq2SeqCPUTest.setUp_decoder_mocks", "unittest.mock.MagicMock", "unittest.mock.MagicMock", "unittest.mock.MagicMock", "deepparse.network.FastTextSeq2SeqModel._decoder_step", "decoder_mock.assert_has_calls", "unittest.mock.MagicMock.max", "unittest.mock.call"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.network.base.Seq2SeqTestCase.setUp_decoder_mocks", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.network.seq2seq.Seq2SeqModel._decoder_step"], ["", "@", "patch", "(", "\"deepparse.network.seq2seq.Decoder\"", ")", "\n", "@", "patch", "(", "\"deepparse.network.seq2seq.download_weights\"", ")", "\n", "@", "patch", "(", "\"deepparse.network.seq2seq.latest_version\"", ")", "\n", "@", "patch", "(", "\"os.path.isfile\"", ")", "\n", "@", "patch", "(", "\"deepparse.network.seq2seq.torch\"", ")", "\n", "@", "patch", "(", "\"deepparse.network.seq2seq.Seq2SeqModel.load_state_dict\"", ")", "\n", "def", "test_whenInstantiateASeq2SeqAttModelNoTarget_thenDecoderIsCalled", "(", "\n", "self", ",", "\n", "load_state_dict_mock", ",", "\n", "torch_mock", ",", "\n", "isfile_mock", ",", "\n", "last_version_mock", ",", "\n", "download_weights_mock", ",", "\n", "decoder_mock", ",", "\n", ")", ":", "\n", "        ", "seq2seq_model", "=", "FastTextSeq2SeqModel", "(", "\n", "self", ".", "cache_dir", ",", "\n", "self", ".", "a_cpu_device", ",", "\n", "output_size", "=", "self", ".", "output_size", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", "attention_mechanism", "=", "True", ",", "\n", ")", "\n", "\n", "decoder_input_mock", ",", "decoder_hidden_mock", "=", "self", ".", "setUp_decoder_mocks", "(", "decoder_mock", ",", "attention_mechanism", "=", "True", ")", "\n", "\n", "view_mock", "=", "MagicMock", "(", ")", "\n", "decoder_input_mock", ".", "view", ".", "return_value", "=", "view_mock", "\n", "\n", "lengths_tensor_mock", "=", "MagicMock", "(", ")", "\n", "max_length", "=", "4", "# a sequence of 4 tokens", "\n", "lengths_tensor_mock", ".", "max", "(", ")", ".", "item", ".", "return_value", "=", "max_length", "\n", "encoder_outputs", "=", "MagicMock", "(", ")", "\n", "seq2seq_model", ".", "_decoder_step", "(", "\n", "decoder_input_mock", ",", "\n", "decoder_hidden_mock", ",", "\n", "encoder_outputs", ",", "\n", "self", ".", "a_none_target", ",", "\n", "lengths_tensor_mock", ",", "\n", "self", ".", "a_batch_size", ",", "\n", ")", "\n", "\n", "decoder_call", "=", "[", "call", "(", ")", "(", "view_mock", ",", "decoder_hidden_mock", ",", "encoder_outputs", ",", "lengths_tensor_mock", ")", "]", "*", "max_length", "\n", "\n", "decoder_mock", ".", "assert_has_calls", "(", "decoder_call", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.network.test_fasttext_seq2seq_model_cpu.FasttextSeq2SeqCPUTest.test_whenInstantiateASeq2SeqModelWithTarget_thenDecoderIsCalled": [[185, 234], ["unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "deepparse.network.FastTextSeq2SeqModel", "test_fasttext_seq2seq_model_cpu.FasttextSeq2SeqCPUTest.setUp_decoder_mocks", "unittest.mock.MagicMock", "unittest.mock.MagicMock", "deepparse.network.FastTextSeq2SeqModel._decoder_step", "range", "test_fasttext_seq2seq_model_cpu.FasttextSeq2SeqCPUTest.assert_has_calls_tensor_equals", "decoder_call.append", "unittest.mock.MagicMock.max", "unittest.mock.call", "test_fasttext_seq2seq_model_cpu.FasttextSeq2SeqCPUTest.a_transpose_target_vector[].view"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.network.base.Seq2SeqTestCase.setUp_decoder_mocks", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.network.seq2seq.Seq2SeqModel._decoder_step", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.network.base.Seq2SeqTestCase.assert_has_calls_tensor_equals"], ["", "@", "patch", "(", "\"deepparse.network.seq2seq.random.random\"", ")", "\n", "@", "patch", "(", "\"deepparse.network.seq2seq.Decoder\"", ")", "\n", "@", "patch", "(", "\"deepparse.network.seq2seq.download_weights\"", ")", "\n", "@", "patch", "(", "\"deepparse.network.seq2seq.latest_version\"", ")", "\n", "@", "patch", "(", "\"os.path.isfile\"", ")", "\n", "@", "patch", "(", "\"deepparse.network.seq2seq.torch\"", ")", "\n", "@", "patch", "(", "\"deepparse.network.seq2seq.Seq2SeqModel.load_state_dict\"", ")", "\n", "def", "test_whenInstantiateASeq2SeqModelWithTarget_thenDecoderIsCalled", "(", "\n", "self", ",", "\n", "load_state_dict_mock", ",", "\n", "torch_mock", ",", "\n", "isfile_mock", ",", "\n", "last_version_mock", ",", "\n", "download_weights_mock", ",", "\n", "decoder_mock", ",", "\n", "random_mock", ",", "\n", ")", ":", "\n", "        ", "random_mock", ".", "return_value", "=", "self", ".", "a_value_lower_than_threshold", "\n", "\n", "seq2seq_model", "=", "FastTextSeq2SeqModel", "(", "\n", "self", ".", "cache_dir", ",", "self", ".", "a_cpu_device", ",", "output_size", "=", "self", ".", "output_size", ",", "verbose", "=", "self", ".", "verbose", "\n", ")", "\n", "\n", "decoder_input_mock", ",", "decoder_hidden_mock", "=", "self", ".", "setUp_decoder_mocks", "(", "decoder_mock", ",", "attention_mechanism", "=", "False", ")", "\n", "\n", "lengths_tensor_mock", "=", "MagicMock", "(", ")", "\n", "max_length", "=", "4", "# a sequence of 4 tokens", "\n", "lengths_tensor_mock", ".", "max", "(", ")", ".", "item", ".", "return_value", "=", "max_length", "\n", "encoder_outputs", "=", "MagicMock", "(", ")", "\n", "seq2seq_model", ".", "_decoder_step", "(", "\n", "decoder_input_mock", ",", "\n", "decoder_hidden_mock", ",", "\n", "encoder_outputs", ",", "\n", "self", ".", "a_none_target", ",", "\n", "lengths_tensor_mock", ",", "\n", "self", ".", "a_batch_size", ",", "\n", ")", "\n", "\n", "decoder_call", "=", "[", "]", "\n", "\n", "for", "idx", "in", "range", "(", "max_length", ")", ":", "\n", "            ", "decoder_call", ".", "append", "(", "\n", "call", "(", ")", "(", "\n", "self", ".", "a_transpose_target_vector", "[", "idx", "]", ".", "view", "(", "1", ",", "self", ".", "a_batch_size", ",", "1", ")", ",", "\n", "decoder_hidden_mock", ",", "\n", ")", "\n", ")", "\n", "\n", "", "self", ".", "assert_has_calls_tensor_equals", "(", "decoder_mock", ",", "decoder_call", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.network.test_fasttext_seq2seq_model_cpu.FasttextSeq2SeqCPUTest.test_givenAFasttextSeq2SeqModel_whenForwardPass_thenProperlyDoPAss": [[235, 277], ["unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "test_fasttext_seq2seq_model_cpu.FasttextSeq2SeqCPUTest.setup_encoder_mocks", "test_fasttext_seq2seq_model_cpu.FasttextSeq2SeqCPUTest.setUp_decoder_mocks", "unittest.mock.MagicMock", "unittest.mock.MagicMock", "deepparse.network.FastTextSeq2SeqModel", "deepparse.network.FastTextSeq2SeqModel.forward", "encoder_mock.assert_has_calls", "lengths_tensor_mock.assert_has_calls", "decoder_mock.assert_has_calls", "encoder_mock.__call__", "torch_mock.zeros().to", "unittest.mock.call.max().item", "unittest.mock.call", "unittest.mock.call", "torch_mock.zeros", "unittest.mock.call.max"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.network.base.Seq2SeqTestCase.setup_encoder_mocks", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.network.base.Seq2SeqTestCase.setUp_decoder_mocks", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.network.embedding_network.EmbeddingNetwork.forward", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.timer.timer.Timer.__call__"], ["", "@", "patch", "(", "\"deepparse.network.seq2seq.Encoder\"", ")", "\n", "@", "patch", "(", "\"deepparse.network.seq2seq.Decoder\"", ")", "\n", "@", "patch", "(", "\"deepparse.network.seq2seq.download_weights\"", ")", "\n", "@", "patch", "(", "\"deepparse.network.seq2seq.latest_version\"", ")", "\n", "@", "patch", "(", "\"os.path.isfile\"", ")", "\n", "@", "patch", "(", "\"deepparse.network.seq2seq.torch\"", ")", "\n", "@", "patch", "(", "\"deepparse.network.seq2seq.Seq2SeqModel.load_state_dict\"", ")", "\n", "def", "test_givenAFasttextSeq2SeqModel_whenForwardPass_thenProperlyDoPAss", "(", "\n", "self", ",", "\n", "load_state_dict_mock", ",", "\n", "torch_mock", ",", "\n", "isfile_mock", ",", "\n", "last_version_mock", ",", "\n", "download_weights_mock", ",", "\n", "decoder_mock", ",", "\n", "encoder_mock", ",", "\n", ")", ":", "\n", "        ", "to_predict_mock", ",", "lengths_tensor_mock", "=", "self", ".", "setup_encoder_mocks", "(", ")", "\n", "\n", "_", ",", "decoder_hidden_mock", "=", "self", ".", "setUp_decoder_mocks", "(", "decoder_mock", ",", "attention_mechanism", "=", "False", ")", "\n", "\n", "# we don't use the one of the setUp_decoder_mocks since we do the full loop", "\n", "decoder_input_mock", "=", "MagicMock", "(", ")", "\n", "to_mock", "=", "MagicMock", "(", ")", "\n", "torch_mock", ".", "zeros", "(", ")", ".", "to", "(", ")", ".", "new_full", ".", "return_value", "=", "to_mock", "\n", "\n", "# We mock the return of the decoder output", "\n", "encoder_mock", ".", "__call__", "(", ")", ".", "return_value", "=", "(", "decoder_input_mock", ",", "decoder_hidden_mock", ")", "\n", "\n", "seq2seq_model", "=", "FastTextSeq2SeqModel", "(", "self", ".", "cache_dir", ",", "self", ".", "a_cpu_device", ",", "self", ".", "output_size", ",", "self", ".", "verbose", ")", "\n", "\n", "seq2seq_model", ".", "forward", "(", "to_predict", "=", "to_predict_mock", ",", "lengths_tensor", "=", "lengths_tensor_mock", ",", "target", "=", "None", ")", "\n", "\n", "encoder_mock", ".", "assert_has_calls", "(", "[", "call", "(", ")", "(", "to_predict_mock", ",", "lengths_tensor_mock", ")", "]", ")", "\n", "lengths_tensor_mock", ".", "assert_has_calls", "(", "[", "call", ".", "max", "(", ")", ".", "item", "(", ")", "]", ")", "\n", "decoder_mock", ".", "assert_has_calls", "(", "\n", "[", "\n", "call", "(", ")", "(", "\n", "to_mock", ",", "\n", "decoder_hidden_mock", ",", "\n", "decoder_input_mock", ",", "\n", "lengths_tensor_mock", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.network.test_fasttext_seq2seq_model_cpu.FasttextSeq2SeqCPUTest.test_givenAFasttext2SeqModel_whenForwardPassWithTarget_thenProperlyDoPAss": [[281, 336], ["unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.MagicMock", "test_fasttext_seq2seq_model_cpu.FasttextSeq2SeqCPUTest.setup_encoder_mocks", "test_fasttext_seq2seq_model_cpu.FasttextSeq2SeqCPUTest.setUp_decoder_mocks", "unittest.mock.MagicMock", "unittest.mock.MagicMock", "deepparse.network.FastTextSeq2SeqModel", "deepparse.network.FastTextSeq2SeqModel.forward", "encoder_mock.assert_has_calls", "lengths_tensor_mock.assert_has_calls", "decoder_mock.assert_has_calls", "unittest.mock.MagicMock.assert_has_calls", "encoder_mock.__call__", "torch_mock.zeros().to", "unittest.mock.call.max().item", "unittest.mock.call.transpose", "unittest.mock.call", "unittest.mock.call", "torch_mock.zeros", "unittest.mock.call.max"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.network.base.Seq2SeqTestCase.setup_encoder_mocks", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.network.base.Seq2SeqTestCase.setUp_decoder_mocks", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.network.embedding_network.EmbeddingNetwork.forward", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.timer.timer.Timer.__call__"], ["", "@", "patch", "(", "\"deepparse.network.seq2seq.random.random\"", ")", "\n", "@", "patch", "(", "\"deepparse.network.seq2seq.Encoder\"", ")", "\n", "@", "patch", "(", "\"deepparse.network.seq2seq.Decoder\"", ")", "\n", "@", "patch", "(", "\"deepparse.network.seq2seq.download_weights\"", ")", "\n", "@", "patch", "(", "\"deepparse.network.seq2seq.latest_version\"", ")", "\n", "@", "patch", "(", "\"os.path.isfile\"", ")", "\n", "@", "patch", "(", "\"deepparse.network.seq2seq.torch\"", ")", "\n", "@", "patch", "(", "\"deepparse.network.seq2seq.Seq2SeqModel.load_state_dict\"", ")", "\n", "def", "test_givenAFasttext2SeqModel_whenForwardPassWithTarget_thenProperlyDoPAss", "(", "\n", "self", ",", "\n", "load_state_dict_mock", ",", "\n", "torch_mock", ",", "\n", "isfile_mock", ",", "\n", "last_version_mock", ",", "\n", "download_weights_mock", ",", "\n", "decoder_mock", ",", "\n", "encoder_mock", ",", "\n", "random_mock", ",", "\n", ")", ":", "\n", "        ", "random_mock", ".", "return_value", "=", "self", ".", "a_value_lower_than_threshold", "\n", "\n", "target_mock", "=", "MagicMock", "(", ")", "\n", "to_predict_mock", ",", "lengths_tensor_mock", "=", "self", ".", "setup_encoder_mocks", "(", ")", "\n", "\n", "_", ",", "decoder_hidden_mock", "=", "self", ".", "setUp_decoder_mocks", "(", "decoder_mock", ",", "attention_mechanism", "=", "False", ")", "\n", "\n", "# we don't use the one of the setUp_decoder_mocks since we do the full loop", "\n", "decoder_input_mock", "=", "MagicMock", "(", ")", "\n", "to_mock", "=", "MagicMock", "(", ")", "\n", "torch_mock", ".", "zeros", "(", ")", ".", "to", "(", ")", ".", "new_full", ".", "return_value", "=", "to_mock", "\n", "\n", "# We mock the return of the decoder output", "\n", "encoder_mock", ".", "__call__", "(", ")", ".", "return_value", "=", "(", "decoder_input_mock", ",", "decoder_hidden_mock", ")", "\n", "\n", "seq2seq_model", "=", "FastTextSeq2SeqModel", "(", "self", ".", "cache_dir", ",", "self", ".", "a_cpu_device", ",", "self", ".", "output_size", ",", "self", ".", "verbose", ")", "\n", "\n", "seq2seq_model", ".", "forward", "(", "\n", "to_predict", "=", "to_predict_mock", ",", "\n", "lengths_tensor", "=", "lengths_tensor_mock", ",", "\n", "target", "=", "target_mock", ",", "\n", ")", "\n", "\n", "encoder_mock", ".", "assert_has_calls", "(", "[", "call", "(", ")", "(", "to_predict_mock", ",", "lengths_tensor_mock", ")", "]", ")", "\n", "lengths_tensor_mock", ".", "assert_has_calls", "(", "[", "call", ".", "max", "(", ")", ".", "item", "(", ")", "]", ")", "\n", "decoder_mock", ".", "assert_has_calls", "(", "\n", "[", "\n", "call", "(", ")", "(", "\n", "to_mock", ",", "\n", "decoder_hidden_mock", ",", "\n", "decoder_input_mock", ",", "\n", "lengths_tensor_mock", ",", "\n", ")", "\n", "]", "\n", ")", "\n", "target_mock", ".", "assert_has_calls", "(", "[", "call", ".", "transpose", "(", "0", ",", "1", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.network.test_fasttext_seq2seq_model_cpu.FasttextSeq2SeqCPUTest.test_givenAFasttext2SeqAttModel_whenForwardPassWithTarget_thenProperlyDoPAss": [[337, 393], ["unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.MagicMock", "test_fasttext_seq2seq_model_cpu.FasttextSeq2SeqCPUTest.setup_encoder_mocks", "test_fasttext_seq2seq_model_cpu.FasttextSeq2SeqCPUTest.setUp_decoder_mocks", "unittest.mock.MagicMock", "unittest.mock.MagicMock", "deepparse.network.FastTextSeq2SeqModel", "deepparse.network.FastTextSeq2SeqModel.forward", "encoder_mock.assert_has_calls", "lengths_tensor_mock.assert_has_calls", "decoder_mock.assert_has_calls", "unittest.mock.MagicMock.assert_has_calls", "encoder_mock.__call__", "torch_mock.zeros().to", "unittest.mock.call.max().item", "unittest.mock.call.transpose", "unittest.mock.call", "unittest.mock.call", "torch_mock.zeros", "unittest.mock.call.max"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.network.base.Seq2SeqTestCase.setup_encoder_mocks", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.network.base.Seq2SeqTestCase.setUp_decoder_mocks", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.network.embedding_network.EmbeddingNetwork.forward", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.timer.timer.Timer.__call__"], ["", "@", "patch", "(", "\"deepparse.network.seq2seq.random.random\"", ")", "\n", "@", "patch", "(", "\"deepparse.network.seq2seq.Encoder\"", ")", "\n", "@", "patch", "(", "\"deepparse.network.seq2seq.Decoder\"", ")", "\n", "@", "patch", "(", "\"deepparse.network.seq2seq.download_weights\"", ")", "\n", "@", "patch", "(", "\"deepparse.network.seq2seq.latest_version\"", ")", "\n", "@", "patch", "(", "\"os.path.isfile\"", ")", "\n", "@", "patch", "(", "\"deepparse.network.seq2seq.torch\"", ")", "\n", "@", "patch", "(", "\"deepparse.network.seq2seq.Seq2SeqModel.load_state_dict\"", ")", "\n", "def", "test_givenAFasttext2SeqAttModel_whenForwardPassWithTarget_thenProperlyDoPAss", "(", "\n", "self", ",", "\n", "load_state_dict_mock", ",", "\n", "torch_mock", ",", "\n", "isfile_mock", ",", "\n", "last_version_mock", ",", "\n", "download_weights_mock", ",", "\n", "decoder_mock", ",", "\n", "encoder_mock", ",", "\n", "random_mock", ",", "\n", ")", ":", "\n", "        ", "random_mock", ".", "return_value", "=", "self", ".", "a_value_lower_than_threshold", "\n", "\n", "target_mock", "=", "MagicMock", "(", ")", "\n", "to_predict_mock", ",", "lengths_tensor_mock", "=", "self", ".", "setup_encoder_mocks", "(", ")", "\n", "\n", "_", ",", "decoder_hidden_mock", "=", "self", ".", "setUp_decoder_mocks", "(", "decoder_mock", ",", "attention_mechanism", "=", "True", ")", "\n", "\n", "# we don't use the one of the setUp_decoder_mocks since we do the full loop", "\n", "decoder_input_mock", "=", "MagicMock", "(", ")", "\n", "to_mock", "=", "MagicMock", "(", ")", "\n", "torch_mock", ".", "zeros", "(", ")", ".", "to", "(", ")", ".", "new_full", ".", "return_value", "=", "to_mock", "\n", "\n", "# We mock the return of the decoder output", "\n", "encoder_mock", ".", "__call__", "(", ")", ".", "return_value", "=", "(", "decoder_input_mock", ",", "decoder_hidden_mock", ")", "\n", "seq2seq_model", "=", "FastTextSeq2SeqModel", "(", "\n", "self", ".", "cache_dir", ",", "self", ".", "a_cpu_device", ",", "self", ".", "output_size", ",", "self", ".", "verbose", ",", "attention_mechanism", "=", "True", "\n", ")", "\n", "\n", "seq2seq_model", ".", "forward", "(", "\n", "to_predict", "=", "to_predict_mock", ",", "\n", "lengths_tensor", "=", "lengths_tensor_mock", ",", "\n", "target", "=", "target_mock", ",", "\n", ")", "\n", "\n", "encoder_mock", ".", "assert_has_calls", "(", "[", "call", "(", ")", "(", "to_predict_mock", ",", "lengths_tensor_mock", ")", "]", ")", "\n", "lengths_tensor_mock", ".", "assert_has_calls", "(", "[", "call", ".", "max", "(", ")", ".", "item", "(", ")", "]", ")", "\n", "decoder_mock", ".", "assert_has_calls", "(", "\n", "[", "\n", "call", "(", ")", "(", "\n", "to_mock", ",", "\n", "decoder_hidden_mock", ",", "\n", "decoder_input_mock", ",", "\n", "lengths_tensor_mock", ",", "\n", ")", "\n", "]", "\n", ")", "\n", "target_mock", ".", "assert_has_calls", "(", "[", "call", ".", "transpose", "(", "0", ",", "1", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.network.test_fasttext_seq2seq_model_gpu.FasttextSeq2SeqGPUTest.setUpClass": [[17, 24], ["super().setUpClass", "torch.tensor", "cls.a_target_vector.transpose"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_seq2seq_fasttext_model_gpu.FastTextSeq2SeqIntegrationTest.setUpClass"], ["    ", "@", "classmethod", "\n", "def", "setUpClass", "(", "cls", ")", ":", "\n", "        ", "super", "(", "FasttextSeq2SeqGPUTest", ",", "cls", ")", ".", "setUpClass", "(", ")", "\n", "cls", ".", "model_type", "=", "\"fasttext\"", "\n", "\n", "cls", ".", "a_target_vector", "=", "torch", ".", "tensor", "(", "[", "[", "0", ",", "1", ",", "1", ",", "4", ",", "5", ",", "8", "]", ",", "[", "1", ",", "0", ",", "3", ",", "8", ",", "0", ",", "0", "]", "]", ",", "device", "=", "cls", ".", "a_torch_device", ")", "\n", "cls", ".", "a_transpose_target_vector", "=", "cls", ".", "a_target_vector", ".", "transpose", "(", "0", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.network.test_fasttext_seq2seq_model_gpu.FasttextSeq2SeqGPUTest.test_givenNotLocalWeights_whenInstantiatingAFastTextSeq2SeqModel_thenShouldDownloadWeights": [[25, 37], ["unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "deepparse.network.FastTextSeq2SeqModel", "download_weights_mock.assert_called_with"], "methods", ["None"], ["", "@", "patch", "(", "\"os.path.isfile\"", ")", "\n", "@", "patch", "(", "\"deepparse.network.seq2seq.torch\"", ")", "\n", "@", "patch", "(", "\"deepparse.network.seq2seq.Seq2SeqModel.load_state_dict\"", ")", "\n", "def", "test_givenNotLocalWeights_whenInstantiatingAFastTextSeq2SeqModel_thenShouldDownloadWeights", "(", "\n", "self", ",", "load_state_dict_mock", ",", "torch_mock", ",", "isfile_mock", "\n", ")", ":", "\n", "        ", "isfile_mock", ".", "return_value", "=", "False", "\n", "with", "patch", "(", "\"deepparse.network.seq2seq.download_weights\"", ")", "as", "download_weights_mock", ":", "\n", "            ", "FastTextSeq2SeqModel", "(", "\n", "self", ".", "cache_dir", ",", "self", ".", "a_torch_device", ",", "output_size", "=", "self", ".", "output_size", ",", "verbose", "=", "self", ".", "verbose", "\n", ")", "\n", "download_weights_mock", ".", "assert_called_with", "(", "self", ".", "model_type", ",", "self", ".", "a_root_path", ",", "verbose", "=", "self", ".", "verbose", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.network.test_fasttext_seq2seq_model_gpu.FasttextSeq2SeqGPUTest.test_givenLocalWeightsNotLastVersion_whenInstantiatingAFastTextSeq2SeqModel_thenShouldDownloadWeights": [[38, 52], ["unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "deepparse.network.FastTextSeq2SeqModel", "download_weights_mock.assert_called_with"], "methods", ["None"], ["", "", "@", "patch", "(", "\"deepparse.network.seq2seq.latest_version\"", ")", "\n", "@", "patch", "(", "\"os.path.isfile\"", ")", "\n", "@", "patch", "(", "\"deepparse.network.seq2seq.torch\"", ")", "\n", "@", "patch", "(", "\"deepparse.network.seq2seq.Seq2SeqModel.load_state_dict\"", ")", "\n", "def", "test_givenLocalWeightsNotLastVersion_whenInstantiatingAFastTextSeq2SeqModel_thenShouldDownloadWeights", "(", "\n", "self", ",", "load_state_dict_mock", ",", "torch_mock", ",", "isfile_mock", ",", "last_version_mock", "\n", ")", ":", "\n", "        ", "isfile_mock", ".", "return_value", "=", "True", "\n", "last_version_mock", ".", "return_value", "=", "False", "\n", "with", "patch", "(", "\"deepparse.network.seq2seq.download_weights\"", ")", "as", "download_weights_mock", ":", "\n", "            ", "FastTextSeq2SeqModel", "(", "\n", "self", ".", "cache_dir", ",", "self", ".", "a_torch_device", ",", "output_size", "=", "self", ".", "output_size", ",", "verbose", "=", "self", ".", "verbose", "\n", ")", "\n", "download_weights_mock", ".", "assert_called_with", "(", "self", ".", "model_type", ",", "self", ".", "a_root_path", ",", "verbose", "=", "self", ".", "verbose", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.network.test_fasttext_seq2seq_model_gpu.FasttextSeq2SeqGPUTest.test_givenRetrainedWeights_whenInstantiatingAFastTextSeq2SeqModel_thenShouldUseRetrainedWeights": [[53, 73], ["unittest.mock.patch", "unittest.mock.patch", "unittest.mock.MagicMock", "deepparse.network.FastTextSeq2SeqModel", "torch_mock.assert_has_calls", "load_state_dict_mock.assert_has_calls", "unittest.mock.call.load", "unittest.mock.call"], "methods", ["None"], ["", "", "@", "patch", "(", "\"deepparse.network.seq2seq.torch\"", ")", "\n", "@", "patch", "(", "\"deepparse.network.seq2seq.Seq2SeqModel.load_state_dict\"", ")", "\n", "def", "test_givenRetrainedWeights_whenInstantiatingAFastTextSeq2SeqModel_thenShouldUseRetrainedWeights", "(", "\n", "self", ",", "load_state_dict_mock", ",", "torch_mock", "\n", ")", ":", "\n", "        ", "all_layers_params", "=", "MagicMock", "(", ")", "\n", "torch_mock", ".", "load", ".", "return_value", "=", "all_layers_params", "\n", "FastTextSeq2SeqModel", "(", "\n", "self", ".", "cache_dir", ",", "\n", "self", ".", "a_torch_device", ",", "\n", "output_size", "=", "self", ".", "output_size", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", "path_to_retrained_model", "=", "self", ".", "a_path_to_retrained_model", ",", "\n", ")", "\n", "\n", "torch_load_call", "=", "[", "call", ".", "load", "(", "self", ".", "a_path_to_retrained_model", ",", "map_location", "=", "self", ".", "a_torch_device", ")", "]", "\n", "torch_mock", ".", "assert_has_calls", "(", "torch_load_call", ")", "\n", "\n", "load_state_dict_call", "=", "[", "call", "(", "all_layers_params", ")", "]", "\n", "load_state_dict_mock", ".", "assert_has_calls", "(", "load_state_dict_call", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.network.test_fasttext_seq2seq_model_gpu.FasttextSeq2SeqGPUTest.test_whenInstantiateASeq2SeqModel_thenEncodeIsCalledOnce": [[74, 99], ["unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "deepparse.network.FastTextSeq2SeqModel", "test_fasttext_seq2seq_model_gpu.FasttextSeq2SeqGPUTest.setup_encoder_mocks", "deepparse.network.FastTextSeq2SeqModel._encoder_step", "encoder_mock.assert_has_calls", "encoder_mock.__call__", "unittest.mock.MagicMock", "unittest.mock.MagicMock", "unittest.mock.call"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.network.base.Seq2SeqTestCase.setup_encoder_mocks", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.network.seq2seq.Seq2SeqModel._encoder_step", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.timer.timer.Timer.__call__"], ["", "@", "patch", "(", "\"deepparse.network.seq2seq.Encoder\"", ")", "\n", "@", "patch", "(", "\"deepparse.network.seq2seq.download_weights\"", ")", "\n", "@", "patch", "(", "\"deepparse.network.seq2seq.latest_version\"", ")", "\n", "@", "patch", "(", "\"os.path.isfile\"", ")", "\n", "@", "patch", "(", "\"deepparse.network.seq2seq.torch\"", ")", "\n", "@", "patch", "(", "\"deepparse.network.seq2seq.Seq2SeqModel.load_state_dict\"", ")", "\n", "def", "test_whenInstantiateASeq2SeqModel_thenEncodeIsCalledOnce", "(", "\n", "self", ",", "\n", "load_state_dict_mock", ",", "\n", "torch_mock", ",", "\n", "isfile_mock", ",", "\n", "last_version_mock", ",", "\n", "download_weights_mock", ",", "\n", "encoder_mock", ",", "\n", ")", ":", "\n", "        ", "seq2seq_model", "=", "FastTextSeq2SeqModel", "(", "self", ".", "cache_dir", ",", "self", ".", "a_torch_device", ",", "self", ".", "output_size", ",", "self", ".", "verbose", ")", "\n", "\n", "to_predict_mock", ",", "lengths_tensor_mock", "=", "self", ".", "setup_encoder_mocks", "(", ")", "\n", "encoder_mock", ".", "__call__", "(", ")", ".", "return_value", "=", "(", "MagicMock", "(", ")", ",", "MagicMock", "(", ")", ")", "\n", "\n", "seq2seq_model", ".", "_encoder_step", "(", "to_predict_mock", ",", "lengths_tensor_mock", ",", "self", ".", "a_batch_size", ")", "\n", "\n", "encoder_call", "=", "[", "call", "(", ")", "(", "to_predict_mock", ",", "lengths_tensor_mock", ")", "]", "\n", "\n", "encoder_mock", ".", "assert_has_calls", "(", "encoder_call", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.network.test_fasttext_seq2seq_model_gpu.FasttextSeq2SeqGPUTest.test_whenInstantiateASeq2SeqModelNoTarget_thenDecoderIsCalled": [[100, 144], ["unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "deepparse.network.FastTextSeq2SeqModel", "test_fasttext_seq2seq_model_gpu.FasttextSeq2SeqGPUTest.setUp_decoder_mocks", "unittest.mock.MagicMock", "unittest.mock.MagicMock", "unittest.mock.MagicMock", "deepparse.network.FastTextSeq2SeqModel._decoder_step", "decoder_mock.assert_has_calls", "unittest.mock.MagicMock.max", "unittest.mock.call"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.network.base.Seq2SeqTestCase.setUp_decoder_mocks", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.network.seq2seq.Seq2SeqModel._decoder_step"], ["", "@", "patch", "(", "\"deepparse.network.seq2seq.Decoder\"", ")", "\n", "@", "patch", "(", "\"deepparse.network.seq2seq.download_weights\"", ")", "\n", "@", "patch", "(", "\"deepparse.network.seq2seq.latest_version\"", ")", "\n", "@", "patch", "(", "\"os.path.isfile\"", ")", "\n", "@", "patch", "(", "\"deepparse.network.seq2seq.torch\"", ")", "\n", "@", "patch", "(", "\"deepparse.network.seq2seq.Seq2SeqModel.load_state_dict\"", ")", "\n", "def", "test_whenInstantiateASeq2SeqModelNoTarget_thenDecoderIsCalled", "(", "\n", "self", ",", "\n", "load_state_dict_mock", ",", "\n", "torch_mock", ",", "\n", "isfile_mock", ",", "\n", "last_version_mock", ",", "\n", "download_weights_mock", ",", "\n", "decoder_mock", ",", "\n", ")", ":", "\n", "        ", "seq2seq_model", "=", "FastTextSeq2SeqModel", "(", "\n", "self", ".", "cache_dir", ",", "\n", "self", ".", "a_torch_device", ",", "\n", "output_size", "=", "self", ".", "output_size", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", "attention_mechanism", "=", "False", ",", "\n", ")", "\n", "\n", "decoder_input_mock", ",", "decoder_hidden_mock", "=", "self", ".", "setUp_decoder_mocks", "(", "decoder_mock", ",", "attention_mechanism", "=", "True", ")", "\n", "\n", "view_mock", "=", "MagicMock", "(", ")", "\n", "decoder_input_mock", ".", "view", ".", "return_value", "=", "view_mock", "\n", "\n", "lengths_tensor_mock", "=", "MagicMock", "(", ")", "\n", "max_length", "=", "4", "# a sequence of 4 tokens", "\n", "lengths_tensor_mock", ".", "max", "(", ")", ".", "item", ".", "return_value", "=", "max_length", "\n", "encoder_outputs", "=", "MagicMock", "(", ")", "\n", "seq2seq_model", ".", "_decoder_step", "(", "\n", "decoder_input_mock", ",", "\n", "decoder_hidden_mock", ",", "\n", "encoder_outputs", ",", "\n", "self", ".", "a_none_target", ",", "\n", "lengths_tensor_mock", ",", "\n", "self", ".", "a_batch_size", ",", "\n", ")", "\n", "\n", "decoder_call", "=", "[", "call", "(", ")", "(", "view_mock", ",", "decoder_hidden_mock", ",", "encoder_outputs", ",", "lengths_tensor_mock", ")", "]", "*", "max_length", "\n", "\n", "decoder_mock", ".", "assert_has_calls", "(", "decoder_call", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.network.test_fasttext_seq2seq_model_gpu.FasttextSeq2SeqGPUTest.test_whenInstantiateASeq2SeqAttModelNoTarget_thenDecoderIsCalled": [[145, 189], ["unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "deepparse.network.FastTextSeq2SeqModel", "test_fasttext_seq2seq_model_gpu.FasttextSeq2SeqGPUTest.setUp_decoder_mocks", "unittest.mock.MagicMock", "unittest.mock.MagicMock", "unittest.mock.MagicMock", "deepparse.network.FastTextSeq2SeqModel._decoder_step", "decoder_mock.assert_has_calls", "unittest.mock.MagicMock.max", "unittest.mock.call"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.network.base.Seq2SeqTestCase.setUp_decoder_mocks", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.network.seq2seq.Seq2SeqModel._decoder_step"], ["", "@", "patch", "(", "\"deepparse.network.seq2seq.Decoder\"", ")", "\n", "@", "patch", "(", "\"deepparse.network.seq2seq.download_weights\"", ")", "\n", "@", "patch", "(", "\"deepparse.network.seq2seq.latest_version\"", ")", "\n", "@", "patch", "(", "\"os.path.isfile\"", ")", "\n", "@", "patch", "(", "\"deepparse.network.seq2seq.torch\"", ")", "\n", "@", "patch", "(", "\"deepparse.network.seq2seq.Seq2SeqModel.load_state_dict\"", ")", "\n", "def", "test_whenInstantiateASeq2SeqAttModelNoTarget_thenDecoderIsCalled", "(", "\n", "self", ",", "\n", "load_state_dict_mock", ",", "\n", "torch_mock", ",", "\n", "isfile_mock", ",", "\n", "last_version_mock", ",", "\n", "download_weights_mock", ",", "\n", "decoder_mock", ",", "\n", ")", ":", "\n", "        ", "seq2seq_model", "=", "FastTextSeq2SeqModel", "(", "\n", "self", ".", "cache_dir", ",", "\n", "self", ".", "a_torch_device", ",", "\n", "output_size", "=", "self", ".", "output_size", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", "attention_mechanism", "=", "True", ",", "\n", ")", "\n", "\n", "decoder_input_mock", ",", "decoder_hidden_mock", "=", "self", ".", "setUp_decoder_mocks", "(", "decoder_mock", ",", "attention_mechanism", "=", "True", ")", "\n", "\n", "view_mock", "=", "MagicMock", "(", ")", "\n", "decoder_input_mock", ".", "view", ".", "return_value", "=", "view_mock", "\n", "\n", "lengths_tensor_mock", "=", "MagicMock", "(", ")", "\n", "max_length", "=", "4", "# a sequence of 4 tokens", "\n", "lengths_tensor_mock", ".", "max", "(", ")", ".", "item", ".", "return_value", "=", "max_length", "\n", "encoder_outputs", "=", "MagicMock", "(", ")", "\n", "seq2seq_model", ".", "_decoder_step", "(", "\n", "decoder_input_mock", ",", "\n", "decoder_hidden_mock", ",", "\n", "encoder_outputs", ",", "\n", "self", ".", "a_none_target", ",", "\n", "lengths_tensor_mock", ",", "\n", "self", ".", "a_batch_size", ",", "\n", ")", "\n", "\n", "decoder_call", "=", "[", "call", "(", ")", "(", "view_mock", ",", "decoder_hidden_mock", ",", "encoder_outputs", ",", "lengths_tensor_mock", ")", "]", "*", "max_length", "\n", "\n", "decoder_mock", ".", "assert_has_calls", "(", "decoder_call", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.network.test_fasttext_seq2seq_model_gpu.FasttextSeq2SeqGPUTest.test_whenInstantiateASeq2SeqModelWithTarget_thenDecoderIsCalled": [[190, 239], ["unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "deepparse.network.FastTextSeq2SeqModel", "test_fasttext_seq2seq_model_gpu.FasttextSeq2SeqGPUTest.setUp_decoder_mocks", "unittest.mock.MagicMock", "unittest.mock.MagicMock", "deepparse.network.FastTextSeq2SeqModel._decoder_step", "range", "test_fasttext_seq2seq_model_gpu.FasttextSeq2SeqGPUTest.assert_has_calls_tensor_equals", "decoder_call.append", "unittest.mock.MagicMock.max", "unittest.mock.call", "test_fasttext_seq2seq_model_gpu.FasttextSeq2SeqGPUTest.a_transpose_target_vector[].view"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.network.base.Seq2SeqTestCase.setUp_decoder_mocks", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.network.seq2seq.Seq2SeqModel._decoder_step", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.network.base.Seq2SeqTestCase.assert_has_calls_tensor_equals"], ["", "@", "patch", "(", "\"deepparse.network.seq2seq.random.random\"", ")", "\n", "@", "patch", "(", "\"deepparse.network.seq2seq.Decoder\"", ")", "\n", "@", "patch", "(", "\"deepparse.network.seq2seq.download_weights\"", ")", "\n", "@", "patch", "(", "\"deepparse.network.seq2seq.latest_version\"", ")", "\n", "@", "patch", "(", "\"os.path.isfile\"", ")", "\n", "@", "patch", "(", "\"deepparse.network.seq2seq.torch\"", ")", "\n", "@", "patch", "(", "\"deepparse.network.seq2seq.Seq2SeqModel.load_state_dict\"", ")", "\n", "def", "test_whenInstantiateASeq2SeqModelWithTarget_thenDecoderIsCalled", "(", "\n", "self", ",", "\n", "load_state_dict_mock", ",", "\n", "torch_mock", ",", "\n", "isfile_mock", ",", "\n", "last_version_mock", ",", "\n", "download_weights_mock", ",", "\n", "decoder_mock", ",", "\n", "random_mock", ",", "\n", ")", ":", "\n", "        ", "random_mock", ".", "return_value", "=", "self", ".", "a_value_lower_than_threshold", "\n", "\n", "seq2seq_model", "=", "FastTextSeq2SeqModel", "(", "\n", "self", ".", "cache_dir", ",", "self", ".", "a_torch_device", ",", "output_size", "=", "self", ".", "output_size", ",", "verbose", "=", "self", ".", "verbose", "\n", ")", "\n", "\n", "decoder_input_mock", ",", "decoder_hidden_mock", "=", "self", ".", "setUp_decoder_mocks", "(", "decoder_mock", ",", "attention_mechanism", "=", "False", ")", "\n", "\n", "lengths_tensor_mock", "=", "MagicMock", "(", ")", "\n", "max_length", "=", "4", "# a sequence of 4 tokens", "\n", "lengths_tensor_mock", ".", "max", "(", ")", ".", "item", ".", "return_value", "=", "max_length", "\n", "encoder_outputs", "=", "MagicMock", "(", ")", "\n", "seq2seq_model", ".", "_decoder_step", "(", "\n", "decoder_input_mock", ",", "\n", "decoder_hidden_mock", ",", "\n", "encoder_outputs", ",", "\n", "self", ".", "a_none_target", ",", "\n", "lengths_tensor_mock", ",", "\n", "self", ".", "a_batch_size", ",", "\n", ")", "\n", "\n", "decoder_call", "=", "[", "]", "\n", "\n", "for", "idx", "in", "range", "(", "max_length", ")", ":", "\n", "            ", "decoder_call", ".", "append", "(", "\n", "call", "(", ")", "(", "\n", "self", ".", "a_transpose_target_vector", "[", "idx", "]", ".", "view", "(", "1", ",", "self", ".", "a_batch_size", ",", "1", ")", ",", "\n", "decoder_hidden_mock", ",", "\n", ")", "\n", ")", "\n", "\n", "", "self", ".", "assert_has_calls_tensor_equals", "(", "decoder_mock", ",", "decoder_call", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.network.test_fasttext_seq2seq_model_gpu.FasttextSeq2SeqGPUTest.test_givenAFasttextSeq2SeqModel_whenForwardPass_thenProperlyDoPAss": [[240, 282], ["unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "test_fasttext_seq2seq_model_gpu.FasttextSeq2SeqGPUTest.setup_encoder_mocks", "test_fasttext_seq2seq_model_gpu.FasttextSeq2SeqGPUTest.setUp_decoder_mocks", "unittest.mock.MagicMock", "unittest.mock.MagicMock", "deepparse.network.FastTextSeq2SeqModel", "deepparse.network.FastTextSeq2SeqModel.forward", "encoder_mock.assert_has_calls", "lengths_tensor_mock.assert_has_calls", "decoder_mock.assert_has_calls", "encoder_mock.__call__", "torch_mock.zeros().to", "unittest.mock.call.max().item", "unittest.mock.call", "unittest.mock.call", "torch_mock.zeros", "unittest.mock.call.max"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.network.base.Seq2SeqTestCase.setup_encoder_mocks", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.network.base.Seq2SeqTestCase.setUp_decoder_mocks", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.network.embedding_network.EmbeddingNetwork.forward", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.timer.timer.Timer.__call__"], ["", "@", "patch", "(", "\"deepparse.network.seq2seq.Encoder\"", ")", "\n", "@", "patch", "(", "\"deepparse.network.seq2seq.Decoder\"", ")", "\n", "@", "patch", "(", "\"deepparse.network.seq2seq.download_weights\"", ")", "\n", "@", "patch", "(", "\"deepparse.network.seq2seq.latest_version\"", ")", "\n", "@", "patch", "(", "\"os.path.isfile\"", ")", "\n", "@", "patch", "(", "\"deepparse.network.seq2seq.torch\"", ")", "\n", "@", "patch", "(", "\"deepparse.network.seq2seq.Seq2SeqModel.load_state_dict\"", ")", "\n", "def", "test_givenAFasttextSeq2SeqModel_whenForwardPass_thenProperlyDoPAss", "(", "\n", "self", ",", "\n", "load_state_dict_mock", ",", "\n", "torch_mock", ",", "\n", "isfile_mock", ",", "\n", "last_version_mock", ",", "\n", "download_weights_mock", ",", "\n", "decoder_mock", ",", "\n", "encoder_mock", ",", "\n", ")", ":", "\n", "        ", "to_predict_mock", ",", "lengths_tensor_mock", "=", "self", ".", "setup_encoder_mocks", "(", ")", "\n", "\n", "_", ",", "decoder_hidden_mock", "=", "self", ".", "setUp_decoder_mocks", "(", "decoder_mock", ",", "attention_mechanism", "=", "False", ")", "\n", "\n", "# we don't use the one of the setUp_decoder_mocks since we do the full loop", "\n", "decoder_input_mock", "=", "MagicMock", "(", ")", "\n", "to_mock", "=", "MagicMock", "(", ")", "\n", "torch_mock", ".", "zeros", "(", ")", ".", "to", "(", ")", ".", "new_full", ".", "return_value", "=", "to_mock", "\n", "\n", "# We mock the return of the decoder output", "\n", "encoder_mock", ".", "__call__", "(", ")", ".", "return_value", "=", "(", "decoder_input_mock", ",", "decoder_hidden_mock", ")", "\n", "\n", "seq2seq_model", "=", "FastTextSeq2SeqModel", "(", "self", ".", "cache_dir", ",", "self", ".", "a_torch_device", ",", "self", ".", "output_size", ",", "self", ".", "verbose", ")", "\n", "\n", "seq2seq_model", ".", "forward", "(", "to_predict", "=", "to_predict_mock", ",", "lengths_tensor", "=", "lengths_tensor_mock", ",", "target", "=", "None", ")", "\n", "\n", "encoder_mock", ".", "assert_has_calls", "(", "[", "call", "(", ")", "(", "to_predict_mock", ",", "lengths_tensor_mock", ")", "]", ")", "\n", "lengths_tensor_mock", ".", "assert_has_calls", "(", "[", "call", ".", "max", "(", ")", ".", "item", "(", ")", "]", ")", "\n", "decoder_mock", ".", "assert_has_calls", "(", "\n", "[", "\n", "call", "(", ")", "(", "\n", "to_mock", ",", "\n", "decoder_hidden_mock", ",", "\n", "decoder_input_mock", ",", "\n", "lengths_tensor_mock", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.network.test_fasttext_seq2seq_model_gpu.FasttextSeq2SeqGPUTest.test_givenAFasttext2SeqModel_whenForwardPassWithTarget_thenProperlyDoPAss": [[286, 341], ["unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.MagicMock", "test_fasttext_seq2seq_model_gpu.FasttextSeq2SeqGPUTest.setup_encoder_mocks", "test_fasttext_seq2seq_model_gpu.FasttextSeq2SeqGPUTest.setUp_decoder_mocks", "unittest.mock.MagicMock", "unittest.mock.MagicMock", "deepparse.network.FastTextSeq2SeqModel", "deepparse.network.FastTextSeq2SeqModel.forward", "encoder_mock.assert_has_calls", "lengths_tensor_mock.assert_has_calls", "decoder_mock.assert_has_calls", "unittest.mock.MagicMock.assert_has_calls", "encoder_mock.__call__", "torch_mock.zeros().to", "unittest.mock.call.max().item", "unittest.mock.call.transpose", "unittest.mock.call", "unittest.mock.call", "torch_mock.zeros", "unittest.mock.call.max"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.network.base.Seq2SeqTestCase.setup_encoder_mocks", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.network.base.Seq2SeqTestCase.setUp_decoder_mocks", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.network.embedding_network.EmbeddingNetwork.forward", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.timer.timer.Timer.__call__"], ["", "@", "patch", "(", "\"deepparse.network.seq2seq.random.random\"", ")", "\n", "@", "patch", "(", "\"deepparse.network.seq2seq.Encoder\"", ")", "\n", "@", "patch", "(", "\"deepparse.network.seq2seq.Decoder\"", ")", "\n", "@", "patch", "(", "\"deepparse.network.seq2seq.download_weights\"", ")", "\n", "@", "patch", "(", "\"deepparse.network.seq2seq.latest_version\"", ")", "\n", "@", "patch", "(", "\"os.path.isfile\"", ")", "\n", "@", "patch", "(", "\"deepparse.network.seq2seq.torch\"", ")", "\n", "@", "patch", "(", "\"deepparse.network.seq2seq.Seq2SeqModel.load_state_dict\"", ")", "\n", "def", "test_givenAFasttext2SeqModel_whenForwardPassWithTarget_thenProperlyDoPAss", "(", "\n", "self", ",", "\n", "load_state_dict_mock", ",", "\n", "torch_mock", ",", "\n", "isfile_mock", ",", "\n", "last_version_mock", ",", "\n", "download_weights_mock", ",", "\n", "decoder_mock", ",", "\n", "encoder_mock", ",", "\n", "random_mock", ",", "\n", ")", ":", "\n", "        ", "random_mock", ".", "return_value", "=", "self", ".", "a_value_lower_than_threshold", "\n", "\n", "target_mock", "=", "MagicMock", "(", ")", "\n", "to_predict_mock", ",", "lengths_tensor_mock", "=", "self", ".", "setup_encoder_mocks", "(", ")", "\n", "\n", "_", ",", "decoder_hidden_mock", "=", "self", ".", "setUp_decoder_mocks", "(", "decoder_mock", ",", "attention_mechanism", "=", "False", ")", "\n", "\n", "# we don't use the one of the setUp_decoder_mocks since we do the full loop", "\n", "decoder_input_mock", "=", "MagicMock", "(", ")", "\n", "to_mock", "=", "MagicMock", "(", ")", "\n", "torch_mock", ".", "zeros", "(", ")", ".", "to", "(", ")", ".", "new_full", ".", "return_value", "=", "to_mock", "\n", "\n", "# We mock the return of the decoder output", "\n", "encoder_mock", ".", "__call__", "(", ")", ".", "return_value", "=", "(", "decoder_input_mock", ",", "decoder_hidden_mock", ")", "\n", "\n", "seq2seq_model", "=", "FastTextSeq2SeqModel", "(", "self", ".", "cache_dir", ",", "self", ".", "a_torch_device", ",", "self", ".", "output_size", ",", "self", ".", "verbose", ")", "\n", "\n", "seq2seq_model", ".", "forward", "(", "\n", "to_predict", "=", "to_predict_mock", ",", "\n", "lengths_tensor", "=", "lengths_tensor_mock", ",", "\n", "target", "=", "target_mock", ",", "\n", ")", "\n", "\n", "encoder_mock", ".", "assert_has_calls", "(", "[", "call", "(", ")", "(", "to_predict_mock", ",", "lengths_tensor_mock", ")", "]", ")", "\n", "lengths_tensor_mock", ".", "assert_has_calls", "(", "[", "call", ".", "max", "(", ")", ".", "item", "(", ")", "]", ")", "\n", "decoder_mock", ".", "assert_has_calls", "(", "\n", "[", "\n", "call", "(", ")", "(", "\n", "to_mock", ",", "\n", "decoder_hidden_mock", ",", "\n", "decoder_input_mock", ",", "\n", "lengths_tensor_mock", ",", "\n", ")", "\n", "]", "\n", ")", "\n", "target_mock", ".", "assert_has_calls", "(", "[", "call", ".", "transpose", "(", "0", ",", "1", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.network.test_fasttext_seq2seq_model_gpu.FasttextSeq2SeqGPUTest.test_givenAFasttext2SeqAttModel_whenForwardPassWithTarget_thenProperlyDoPAss": [[342, 403], ["unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.MagicMock", "test_fasttext_seq2seq_model_gpu.FasttextSeq2SeqGPUTest.setup_encoder_mocks", "test_fasttext_seq2seq_model_gpu.FasttextSeq2SeqGPUTest.setUp_decoder_mocks", "unittest.mock.MagicMock", "unittest.mock.MagicMock", "deepparse.network.FastTextSeq2SeqModel", "deepparse.network.FastTextSeq2SeqModel.forward", "encoder_mock.assert_has_calls", "lengths_tensor_mock.assert_has_calls", "decoder_mock.assert_has_calls", "unittest.mock.MagicMock.assert_has_calls", "encoder_mock.__call__", "torch_mock.zeros().to", "unittest.mock.call.max().item", "unittest.mock.call.transpose", "unittest.mock.call", "unittest.mock.call", "torch_mock.zeros", "unittest.mock.call.max"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.network.base.Seq2SeqTestCase.setup_encoder_mocks", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.network.base.Seq2SeqTestCase.setUp_decoder_mocks", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.network.embedding_network.EmbeddingNetwork.forward", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.timer.timer.Timer.__call__"], ["", "@", "patch", "(", "\"deepparse.network.seq2seq.random.random\"", ")", "\n", "@", "patch", "(", "\"deepparse.network.seq2seq.Encoder\"", ")", "\n", "@", "patch", "(", "\"deepparse.network.seq2seq.Decoder\"", ")", "\n", "@", "patch", "(", "\"deepparse.network.seq2seq.download_weights\"", ")", "\n", "@", "patch", "(", "\"deepparse.network.seq2seq.latest_version\"", ")", "\n", "@", "patch", "(", "\"os.path.isfile\"", ")", "\n", "@", "patch", "(", "\"deepparse.network.seq2seq.torch\"", ")", "\n", "@", "patch", "(", "\"deepparse.network.seq2seq.Seq2SeqModel.load_state_dict\"", ")", "\n", "def", "test_givenAFasttext2SeqAttModel_whenForwardPassWithTarget_thenProperlyDoPAss", "(", "\n", "self", ",", "\n", "load_state_dict_mock", ",", "\n", "torch_mock", ",", "\n", "isfile_mock", ",", "\n", "last_version_mock", ",", "\n", "download_weights_mock", ",", "\n", "decoder_mock", ",", "\n", "encoder_mock", ",", "\n", "random_mock", ",", "\n", ")", ":", "\n", "        ", "random_mock", ".", "return_value", "=", "self", ".", "a_value_lower_than_threshold", "\n", "\n", "target_mock", "=", "MagicMock", "(", ")", "\n", "to_predict_mock", ",", "lengths_tensor_mock", "=", "self", ".", "setup_encoder_mocks", "(", ")", "\n", "\n", "_", ",", "decoder_hidden_mock", "=", "self", ".", "setUp_decoder_mocks", "(", "decoder_mock", ",", "attention_mechanism", "=", "True", ")", "\n", "\n", "# we don't use the one of the setUp_decoder_mocks since we do the full loop", "\n", "decoder_input_mock", "=", "MagicMock", "(", ")", "\n", "to_mock", "=", "MagicMock", "(", ")", "\n", "torch_mock", ".", "zeros", "(", ")", ".", "to", "(", ")", ".", "new_full", ".", "return_value", "=", "to_mock", "\n", "\n", "# We mock the return of the decoder output", "\n", "encoder_mock", ".", "__call__", "(", ")", ".", "return_value", "=", "(", "decoder_input_mock", ",", "decoder_hidden_mock", ")", "\n", "\n", "seq2seq_model", "=", "FastTextSeq2SeqModel", "(", "\n", "self", ".", "cache_dir", ",", "\n", "self", ".", "a_torch_device", ",", "\n", "self", ".", "output_size", ",", "\n", "self", ".", "verbose", ",", "\n", "attention_mechanism", "=", "True", ",", "\n", ")", "\n", "\n", "seq2seq_model", ".", "forward", "(", "\n", "to_predict", "=", "to_predict_mock", ",", "\n", "lengths_tensor", "=", "lengths_tensor_mock", ",", "\n", "target", "=", "target_mock", ",", "\n", ")", "\n", "\n", "encoder_mock", ".", "assert_has_calls", "(", "[", "call", "(", ")", "(", "to_predict_mock", ",", "lengths_tensor_mock", ")", "]", ")", "\n", "lengths_tensor_mock", ".", "assert_has_calls", "(", "[", "call", ".", "max", "(", ")", ".", "item", "(", ")", "]", ")", "\n", "decoder_mock", ".", "assert_has_calls", "(", "\n", "[", "\n", "call", "(", ")", "(", "\n", "to_mock", ",", "\n", "decoder_hidden_mock", ",", "\n", "decoder_input_mock", ",", "\n", "lengths_tensor_mock", ",", "\n", ")", "\n", "]", "\n", ")", "\n", "target_mock", ".", "assert_has_calls", "(", "[", "call", ".", "transpose", "(", "0", ",", "1", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.tools.is_csv_path": [[13, 25], ["None"], "function", ["None"], [")", "\n", "\n", "BASE_URL", "=", "\"https://graal.ift.ulaval.ca/public/deepparse/{}.{}\"", "\n", "CACHE_PATH", "=", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "expanduser", "(", "\"~\"", ")", ",", "\".cache\"", ",", "\"deepparse\"", ")", "\n", "\n", "\n", "def", "latest_version", "(", "model", ":", "str", ",", "cache_path", ":", "str", ")", "->", "bool", ":", "\n", "    ", "\"\"\"\n    Verify if the local model is the latest.\n    \"\"\"", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "cache_path", ",", "model", "+", "\".version\"", ")", ",", "encoding", "=", "\"utf-8\"", ")", "as", "local_model_hash_file", ":", "\n", "        ", "local_model_hash_version", "=", "local_model_hash_file", ".", "readline", "(", ")", "\n", "", "download_from_url", "(", "model", ",", "cache_path", ",", "\"version\"", ")", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.tools.is_pickle_path": [[27, 38], ["None"], "function", ["None"], ["        ", "remote_model_hash_version", "=", "remote_model_hash_file", ".", "readline", "(", ")", "\n", "", "return", "local_model_hash_version", ".", "strip", "(", ")", "==", "remote_model_hash_version", ".", "strip", "(", ")", "\n", "\n", "\n", "", "def", "download_from_url", "(", "file_name", ":", "str", ",", "saving_dir", ":", "str", ",", "file_extension", ":", "str", ")", ":", "\n", "    ", "\"\"\"\n    Simple function to download the content of a file from a distant repository.\n    The repository URL string is  \u0300`'https://graal.ift.ulaval.ca/public/deepparse/{}.{}'``\n    where the first bracket is the file name and the second is the file extension.\n    \"\"\"", "\n", "url", "=", "BASE_URL", ".", "format", "(", "file_name", ",", "file_extension", ")", "\n", "r", "=", "requests", ".", "get", "(", "url", ",", "timeout", "=", "5", ")", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.tools.is_json_path": [[40, 51], ["None"], "function", ["None"], ["os", ".", "makedirs", "(", "saving_dir", ",", "exist_ok", "=", "True", ")", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "saving_dir", ",", "f\"{file_name}.{file_extension}\"", ")", ",", "\"wb\"", ")", "as", "file", ":", "\n", "        ", "file", ".", "write", "(", "r", ".", "content", ")", "\n", "\n", "\n", "", "", "def", "download_weights", "(", "model", ":", "str", ",", "saving_dir", ":", "str", ",", "verbose", ":", "bool", "=", "True", ")", "->", "None", ":", "\n", "    "]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.tools.to_csv": [[53, 64], ["isinstance", "pandas.DataFrame().to_csv", "print", "parsed_address.to_pandas", "pandas.DataFrame"], "function", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.tools.to_csv", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.formatted_parsed_address.FormattedParsedAddress.to_pandas"], ["if", "verbose", ":", "\n", "        ", "print", "(", "f\"Downloading the weights for the network {model}.\"", ")", "\n", "", "download_from_url", "(", "model", ",", "saving_dir", ",", "\"ckpt\"", ")", "\n", "download_from_url", "(", "model", ",", "saving_dir", ",", "\"version\"", ")", "\n", "\n", "\n", "", "def", "handle_poutyne_version", "(", ")", "->", "str", ":", "\n", "    ", "\"\"\"\n    Handle the retrieval of the major and minor part of the Poutyne version\n    \"\"\"", "\n", "full_version", "=", "poutyne", ".", "version", ".", "__version__", "\n", "components_parts", "=", "full_version", ".", "split", "(", "\".\"", ")", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.tools.to_pickle": [[66, 76], ["isinstance", "print", "parsed_address.to_pickle", "open", "pickle.dump"], "function", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.tools.to_pickle"], ["minor", "=", "components_parts", "[", "1", "]", "\n", "version", "=", "f\"{major}.{minor}\"", "\n", "return", "version", "\n", "\n", "\n", "", "def", "valid_poutyne_version", "(", "min_major", ":", "int", "=", "1", ",", "min_minor", ":", "int", "=", "2", ")", ":", "\n", "    ", "\"\"\"\n    Validate Poutyne version is greater than min_major.min_minor for using a str checkpoint. Some version before\n    does not support all the features we need. By default, min_major.min_minor equal version 1.2 which is the\n    lowest version we can use.\n    \"\"\"", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.tools.to_json": [[78, 88], ["isinstance", "print", "parsed_address.to_pandas", "open", "json.dump"], "function", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.formatted_parsed_address.FormattedParsedAddress.to_pandas"], ["\n", "major", "=", "int", "(", "version_components", "[", "0", "]", ")", "\n", "minor", "=", "int", "(", "version_components", "[", "1", "]", ")", "\n", "\n", "if", "major", ">", "min_major", ":", "\n", "        ", "is_valid_poutyne_version", "=", "True", "\n", "", "else", ":", "\n", "        ", "is_valid_poutyne_version", "=", "major", ">=", "min_major", "and", "minor", ">=", "min_minor", "\n", "\n", "", "return", "is_valid_poutyne_version", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.tools.bool_parse": [[90, 107], ["arg.lower", "arg.lower", "argparse.ArgumentTypeError"], "function", ["None"], ["", "def", "handle_pre_trained_checkpoint", "(", "model_type_checkpoint", ":", "str", ")", "->", "str", ":", "\n", "    ", "\"\"\"\n    Handle the checkpoint formatting for pretrained models.\n    \"\"\"", "\n", "if", "not", "valid_poutyne_version", "(", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", "\n", "f\"To load the pretrained {model_type_checkpoint} model, you need to have a Poutyne version\"", "\n", "\"greater than 1.1 (>1.1)\"", "\n", ")", "\n", "", "model_path", "=", "os", ".", "path", ".", "join", "(", "CACHE_PATH", ",", "f\"{model_type_checkpoint}.ckpt\"", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "isfile", "(", "model_path", ")", ":", "\n", "        ", "download_weights", "(", "model_type_checkpoint", ",", "CACHE_PATH", ",", "verbose", "=", "True", ")", "\n", "", "elif", "not", "latest_version", "(", "model_type_checkpoint", ",", "cache_path", "=", "CACHE_PATH", ")", ":", "\n", "        ", "warnings", ".", "warn", "(", "\n", "\"A newer model of fasttext is available, you can download it using the download script.\"", ",", "\n", "UserWarning", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.tools.generate_export_path": [[109, 121], ["os.path.join", "os.path.dirname"], "function", ["None"], ["return", "checkpoint", "\n", "\n", "\n", "", "def", "handle_model_path", "(", "checkpoint", ":", "str", ")", "->", "str", ":", "\n", "    ", "\"\"\"\n    Handle the validity of path.\n    \"\"\"", "\n", "if", "checkpoint", "in", "(", "\"fasttext\"", ",", "\"bpemb\"", ")", ":", "\n", "        ", "checkpoint", "=", "handle_pre_trained_checkpoint", "(", "checkpoint", ")", "\n", "", "elif", "isinstance", "(", "checkpoint", ",", "str", ")", "and", "checkpoint", ".", "endswith", "(", "\".ckpt\"", ")", ":", "\n", "        ", "if", "not", "valid_poutyne_version", "(", ")", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\n", "\"To load a string path to a model, you need to have a Poutyne version\"", "\"greater than 1.1 (>1.1)\"", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.tools.replace_path_extension": [[123, 136], ["os.path.splitext", "os.path.join"], "function", ["None"], ["", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\n", "\"The checkpoint is not valid. Can be a path in a string format (e.g. 'a_path_.ckpt'), \"", "\n", "\"'fasttext' or 'bpemb'.\"", "\n", ")", "\n", "\n", "", "return", "checkpoint", "\n", "\n", "\n", "", "def", "validate_data_to_parse", "(", "addresses_to_parse", ":", "List", ")", "->", "None", ":", "\n", "    "]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.tools.attention_model_type_handling": [[138, 150], ["parser_args_update_args.update", "parser_args_update_args.update", "parsing_model.strip().strip.strip().strip", "parsing_model.strip().strip.strip"], "function", ["None"], ["\n", "if", "isinstance", "(", "addresses_to_parse", "[", "0", "]", ",", "tuple", ")", ":", "\n", "        ", "raise", "DataError", "(", "\n", "\"Addresses to parsed are tuples. They need to be a list of string. Are you using training data?\"", "\n", ")", "\n", "", "if", "validate_if_any_none", "(", "addresses_to_parse", ")", ":", "\n", "        ", "raise", "DataError", "(", "\"Some addresses are None value.\"", ")", "\n", "", "if", "validate_if_any_empty", "(", "addresses_to_parse", ")", ":", "\n", "        ", "raise", "DataError", "(", "\"Some addresses are empty.\"", ")", "\n", "", "if", "validate_if_any_whitespace_only", "(", "addresses_to_parse", ")", ":", "\n", "        ", "raise", "DataError", "(", "\"Some addresses only include whitespace thus cannot be parsed.\"", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.tools.wrap": [[173, 182], ["text.splitlines.splitlines", "textwrap.fill"], "function", ["None"], []], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.parse.main": [[23, 118], ["parse.get_args", "deepparse.cli.tools.is_csv_path", "deepparse.cli.tools.generate_export_path", "deepparse.cli.tools.is_csv_path", "deepparse.cli.tools.attention_model_type_handling", "parser_args.update", "deepparse.parser.AddressParser", "deepparse.parser.AddressParser.", "functools.partial.", "print", "deepparse.dataset_container.CSVDatasetContainer", "deepparse.cli.tools.is_pickle_path", "functools.partial", "deepparse.cli.tools.is_pickle_path", "int", "parser_args.update", "deepparse.cli.tools.replace_path_extension", "logging.basicConfig", "logging.info", "logging.info", "ValueError", "deepparse.dataset_container.PickleDatasetContainer", "ValueError", "functools.partial", "deepparse.cli.tools.is_json_path", "functools.partial", "ValueError", "str", "len", "len"], "function", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.retrain.get_args", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.tools.is_csv_path", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.tools.generate_export_path", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.tools.is_csv_path", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.tools.attention_model_type_handling", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.tools.is_pickle_path", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.tools.is_pickle_path", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.tools.replace_path_extension", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.tools.is_json_path"], ["def", "main", "(", "args", "=", "None", ")", "->", "None", ":", "\n", "# pylint: disable=too-many-locals, too-many-branches", "\n", "    ", "\"\"\"\n    CLI function to rapidly parse an addresses dataset and output it in another file.\n\n    Examples of usage:\n\n    .. code-block:: sh\n\n        parse fasttext ./dataset_path.csv parsed_address.pickle\n\n    Using a gpu device\n\n    .. code-block:: sh\n\n        parse fasttext ./dataset_path.csv parsed_address.p --device 0\n\n    Using a CSV dataset\n\n    .. code-block:: sh\n\n        parse fasttext ./dataset.csv parsed_address.pckl --path_to_retrained_model ./path\n\n    \"\"\"", "\n", "if", "args", "is", "None", ":", "# pragma: no cover", "\n", "        ", "args", "=", "sys", ".", "argv", "[", "1", ":", "]", "\n", "\n", "", "parsed_args", "=", "get_args", "(", "args", ")", "\n", "\n", "dataset_path", "=", "parsed_args", ".", "dataset_path", "\n", "if", "is_csv_path", "(", "dataset_path", ")", ":", "\n", "        ", "csv_column_name", "=", "parsed_args", ".", "csv_column_name", "\n", "if", "csv_column_name", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"For a CSV dataset path, you need to specify the 'csv_column_name' argument to provide the\"", "\n", "\" column name to extract address.\"", "\n", ")", "\n", "", "csv_column_separator", "=", "parsed_args", ".", "csv_column_separator", "\n", "addresses_to_parse", "=", "CSVDatasetContainer", "(", "\n", "dataset_path", ",", "column_names", "=", "csv_column_name", ",", "separator", "=", "csv_column_separator", ",", "is_training_container", "=", "False", "\n", ")", "\n", "", "elif", "is_pickle_path", "(", "dataset_path", ")", ":", "\n", "        ", "addresses_to_parse", "=", "PickleDatasetContainer", "(", "dataset_path", ",", "is_training_container", "=", "False", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"The dataset path argument is not a CSV or a pickle file.\"", ")", "\n", "\n", "", "export_filename", "=", "parsed_args", ".", "export_filename", "\n", "export_path", "=", "generate_export_path", "(", "dataset_path", ",", "export_filename", ")", "\n", "\n", "if", "is_csv_path", "(", "export_filename", ")", ":", "\n", "        ", "export_fn", "=", "partial", "(", "to_csv", ",", "export_path", "=", "export_path", ",", "sep", "=", "csv_column_separator", ")", "\n", "", "elif", "is_pickle_path", "(", "export_filename", ")", ":", "\n", "        ", "export_fn", "=", "partial", "(", "to_pickle", ",", "export_path", "=", "export_path", ")", "\n", "", "elif", "is_json_path", "(", "export_filename", ")", ":", "\n", "        ", "export_fn", "=", "partial", "(", "to_json", ",", "export_path", "=", "export_path", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"We do not support this type of export.\"", ")", "\n", "\n", "", "parsing_model", "=", "parsed_args", ".", "parsing_model", "\n", "device", "=", "parsed_args", ".", "device", "\n", "path_to_retrained_model", "=", "parsed_args", ".", "path_to_retrained_model", "\n", "\n", "if", "\"cpu\"", "not", "in", "device", ":", "\n", "        ", "device", "=", "int", "(", "device", ")", "\n", "", "parser_args", "=", "{", "\"device\"", ":", "device", "}", "\n", "\n", "parser_args_update_args", "=", "attention_model_type_handling", "(", "parsing_model", ")", "\n", "parser_args", ".", "update", "(", "**", "parser_args_update_args", ")", "\n", "\n", "if", "path_to_retrained_model", "is", "not", "None", ":", "\n", "        ", "parser_args", ".", "update", "(", "{", "\"path_to_retrained_model\"", ":", "path_to_retrained_model", "}", ")", "\n", "\n", "", "address_parser", "=", "AddressParser", "(", "**", "parser_args", ")", "\n", "\n", "if", "parsed_args", ".", "log", ":", "\n", "        ", "logging_export_path", "=", "replace_path_extension", "(", "export_path", ",", "\".log\"", ")", "\n", "logging", ".", "basicConfig", "(", "\n", "filename", "=", "logging_export_path", ",", "format", "=", "\"%(asctime)s : %(levelname)s : %(message)s\"", ",", "level", "=", "logging", ".", "INFO", "\n", ")", "\n", "\n", "text_to_log", "=", "f\"Parsing dataset file {dataset_path} using the parser {str(address_parser)}\"", "\n", "logging", ".", "info", "(", "text_to_log", ")", "\n", "\n", "", "parsed_address", "=", "address_parser", "(", "addresses_to_parse", ",", "batch_size", "=", "parsed_args", ".", "batch_size", ")", "\n", "\n", "export_fn", "(", "parsed_address", ")", "\n", "\n", "print", "(", "f\"{len(addresses_to_parse)} addresses have been parsed.\"", ")", "\n", "\n", "if", "parsed_args", ".", "log", ":", "\n", "        ", "text_to_log", "=", "(", "\n", "f\"{len(addresses_to_parse)} addresses have been parsed.\\n\"", "\n", "f\"The parsed addresses are outputted here: {export_path}\"", "\n", ")", "\n", "logging", ".", "info", "(", "text_to_log", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.parse.get_parser": [[120, 206], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "deepparse.cli.tools.wrap", "deepparse.cli.tools.wrap", "deepparse.cli.tools.wrap", "deepparse.cli.tools.wrap", "deepparse.cli.tools.wrap", "deepparse.cli.tools.wrap", "deepparse.cli.tools.wrap", "deepparse.cli.tools.wrap", "deepparse.cli.tools.wrap"], "function", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.tools.wrap", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.tools.wrap", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.tools.wrap", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.tools.wrap", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.tools.wrap", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.tools.wrap", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.tools.wrap", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.tools.wrap", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.tools.wrap"], ["", "", "def", "get_parser", "(", ")", "->", "argparse", ".", "ArgumentParser", ":", "\n", "    ", "\"\"\"Return ArgumentParser for the cli.\"\"\"", "\n", "\n", "parser", "=", "argparse", ".", "ArgumentParser", "(", "formatter_class", "=", "argparse", ".", "RawTextHelpFormatter", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"parsing_model\"", ",", "\n", "choices", "=", "[", "\n", "\"fasttext\"", ",", "\n", "\"fasttext-attention\"", ",", "\n", "\"fasttext-light\"", ",", "\n", "\"bpemb\"", ",", "\n", "\"bpemb-attention\"", ",", "\n", "]", ",", "\n", "help", "=", "wrap", "(", "\"The parsing module to use.\"", ")", ",", "\n", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "\"dataset_path\"", ",", "\n", "help", "=", "wrap", "(", "\"The path to the dataset file in a pickle (.p, .pickle or .pckl) or CSV format.\"", ")", ",", "\n", "type", "=", "str", ",", "\n", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "\"export_filename\"", ",", "\n", "help", "=", "wrap", "(", "\n", "\"The filename to use to export the parsed addresses. We will infer the file format base on the \"", "\n", "\"file extension. That is, if the file is a pickle (.p or .pickle), we will export it into a pickle file. \"", "\n", "\"The supported format are Pickle, CSV and JSON. \"", "\n", "\"The file will be exported in the same repositories as the dataset_path. \"", "\n", "\"See the doc for more details on the format exporting.\"", "\n", ")", ",", "\n", "type", "=", "str", ",", "\n", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "\"--device\"", ",", "\n", "help", "=", "wrap", "(", "\"The device to use. It can be 'cpu' or a GPU device index such as '0' or '1'. By default '0'.\"", ")", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "\"0\"", ",", "\n", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "\"--batch_size\"", ",", "\n", "help", "=", "wrap", "(", "\"The size of the batch (default is 32).\"", ")", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "32", ",", "\n", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "\"--path_to_retrained_model\"", ",", "\n", "help", "=", "wrap", "(", "\"A path to a retrained model to use for parsing.\"", ")", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "None", ",", "\n", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "\"--csv_column_name\"", ",", "\n", "help", "=", "wrap", "(", "\n", "\"The column name to extract address in the CSV. Need to be specified if the provided dataset_path \"", "\n", "\"leads to a CSV file.\"", "\n", ")", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "None", ",", "\n", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "\"--csv_column_separator\"", ",", "\n", "help", "=", "wrap", "(", "\n", "\"The column separator for the dataset container will only be used if the dataset is a CSV one.\"", "\n", "\" By default '\\t'.\"", "\n", ")", ",", "\n", "default", "=", "\"\\t\"", ",", "\n", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "\"--log\"", ",", "\n", "help", "=", "wrap", "(", "\n", "\"Either or not to log the parsing process into a `.log` file exported at the same place as the \"", "\n", "\"parsed data using the same name as the export file. \"", "\n", "\"The bool value can be (not case sensitive) 'true/false', 't/f', 'yes/no', 'y/n' or '0/1'.\"", "\n", ")", ",", "\n", "type", "=", "bool_parse", ",", "\n", "default", "=", "\"True\"", ",", "\n", ")", "\n", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.parse.get_args": [[208, 211], ["get_parser().parse_args", "parse.get_parser"], "function", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.retrain.get_parser"], ["", "def", "get_args", "(", "args", ")", ":", "# pragma: no cover", "\n", "    ", "\"\"\"Parse arguments passed in from shell.\"\"\"", "\n", "return", "get_parser", "(", ")", ".", "parse_args", "(", "args", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.download.main": [[16, 47], ["download.get_args", "os.path.join", "os.path.join", "deepparse.download_fasttext_embeddings", "deepparse.download_weights", "deepparse.download_fasttext_magnitude_embeddings", "os.path.isfile", "os.path.isfile", "deepparse.latest_version", "print", "deepparse.download_weights", "bpemb.BPEmb"], "function", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.retrain.get_args", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.deepparse.fasttext_tools.download_fasttext_embeddings", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.deepparse.tools.download_weights", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.deepparse.fasttext_tools.download_fasttext_magnitude_embeddings", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.deepparse.tools.latest_version", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.deepparse.tools.download_weights"], ["def", "main", "(", "args", "=", "None", ")", "->", "None", ":", "\n", "    ", "\"\"\"\n    CLI function to manually download all the dependencies for a pretrained model.\n\n    Example of usage:\n\n    .. code-block:: sh\n\n        download_model fasttext\n    \"\"\"", "\n", "if", "args", "is", "None", ":", "# pragma: no cover", "\n", "        ", "args", "=", "sys", ".", "argv", "[", "1", ":", "]", "\n", "\n", "", "parsed_args", "=", "get_args", "(", "args", ")", "\n", "\n", "model_type", "=", "parsed_args", ".", "model_type", "\n", "\n", "if", "\"fasttext\"", "in", "model_type", "and", "\"fasttext-light\"", "not", "in", "model_type", ":", "\n", "        ", "download_fasttext_embeddings", "(", "cache_dir", "=", "CACHE_PATH", ")", "\n", "", "elif", "model_type", "==", "\"fasttext-light\"", ":", "\n", "        ", "download_fasttext_magnitude_embeddings", "(", "cache_dir", "=", "CACHE_PATH", ")", "\n", "", "elif", "\"bpemb\"", "in", "model_type", ":", "\n", "        ", "BPEmb", "(", "lang", "=", "\"multi\"", ",", "vs", "=", "100000", ",", "dim", "=", "300", ")", "# The class manage the download of the pretrained words embedding", "\n", "\n", "", "model_path", "=", "os", ".", "path", ".", "join", "(", "CACHE_PATH", ",", "f\"{model_type}.ckpt\"", ")", "\n", "version_path", "=", "os", ".", "path", ".", "join", "(", "CACHE_PATH", ",", "f\"{model_type}.version\"", ")", "\n", "if", "not", "os", ".", "path", ".", "isfile", "(", "model_path", ")", "or", "not", "os", ".", "path", ".", "isfile", "(", "version_path", ")", ":", "\n", "        ", "download_weights", "(", "model_type", ",", "CACHE_PATH", ")", "\n", "", "elif", "not", "latest_version", "(", "model_type", ",", "cache_path", "=", "CACHE_PATH", ")", ":", "\n", "        ", "print", "(", "\"A new version of the pretrained model is available. The newest model will be downloaded.\"", ")", "\n", "download_weights", "(", "model_type", ",", "CACHE_PATH", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.download.get_parser": [[49, 65], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument"], "function", ["None"], ["", "", "def", "get_parser", "(", ")", "->", "argparse", ".", "ArgumentParser", ":", "\n", "    ", "\"\"\"Return ArgumentParser for the cli.\"\"\"", "\n", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"model_type\"", ",", "\n", "choices", "=", "[", "\n", "\"fasttext\"", ",", "\n", "\"fasttext-attention\"", ",", "\n", "\"fasttext-light\"", ",", "\n", "\"bpemb\"", ",", "\n", "\"bpemb-attention\"", ",", "\n", "]", ",", "\n", "help", "=", "\"The model type to download.\"", ",", "\n", ")", "\n", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.download.get_args": [[67, 70], ["get_parser().parse_args", "download.get_parser"], "function", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.retrain.get_parser"], ["", "def", "get_args", "(", "args", ")", ":", "# pragma: no cover", "\n", "    ", "\"\"\"Parse arguments passed in from shell.\"\"\"", "\n", "return", "get_parser", "(", ")", ".", "parse_args", "(", "args", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.test.main": [[20, 110], ["test.get_args", "deepparse.cli.tools.is_csv_path", "deepparse.cli.tools.attention_model_type_handling", "parser_args.update", "deepparse.parser.AddressParser", "deepparse.cli.tools.generate_export_path", "deepparse.parser.AddressParser.test", "pandas.DataFrame().to_csv", "deepparse.dataset_container.CSVDatasetContainer", "deepparse.cli.tools.is_pickle_path", "int", "parser_args.update", "deepparse.cli.tools.replace_path_extension", "logging.basicConfig", "logging.info", "logging.info", "ValueError", "deepparse.dataset_container.PickleDatasetContainer", "ValueError", "pandas.DataFrame", "str", "str"], "function", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.retrain.get_args", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.tools.is_csv_path", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.tools.attention_model_type_handling", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.tools.generate_export_path", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.address_parser.AddressParser.test", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.tools.to_csv", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.tools.is_pickle_path", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.tools.replace_path_extension"], ["def", "main", "(", "args", "=", "None", ")", "->", "None", ":", "\n", "# pylint: disable=too-many-locals, too-many-branches", "\n", "    ", "\"\"\"\n    CLI function to rapidly test an address parser on test data using the same argument as the\n    :meth:`~AddressParser.test` method (with the same default values) except for the callbacks.\n    The results will be logged in a CSV file next to the test dataset.\n\n\n    Examples of usage:\n\n    .. code-block:: sh\n\n        test fasttext ./test_dataset_path.csv\n\n    Modifying testing parameters\n\n    .. code-block:: sh\n\n        test bpemb ./test_dataset_path.csv --batch_size 128 --logging_path \"./logging_test\"\n\n    \"\"\"", "\n", "if", "args", "is", "None", ":", "# pragma: no cover", "\n", "        ", "args", "=", "sys", ".", "argv", "[", "1", ":", "]", "\n", "\n", "", "parsed_args", "=", "get_args", "(", "args", ")", "\n", "\n", "test_dataset_path", "=", "parsed_args", ".", "test_dataset_path", "\n", "if", "is_csv_path", "(", "test_dataset_path", ")", ":", "\n", "        ", "csv_column_names", "=", "parsed_args", ".", "csv_column_names", "\n", "if", "csv_column_names", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"To use a CSV dataset to test on, you need to specify the 'csv_column_names' argument to provide the\"", "\n", "\" column name to extract address.\"", "\n", ")", "\n", "", "csv_column_separator", "=", "parsed_args", ".", "csv_column_separator", "\n", "testing_data", "=", "CSVDatasetContainer", "(", "\n", "test_dataset_path", ",", "\n", "column_names", "=", "csv_column_names", ",", "\n", "separator", "=", "csv_column_separator", ",", "\n", "is_training_container", "=", "True", ",", "\n", ")", "\n", "", "elif", "is_pickle_path", "(", "test_dataset_path", ")", ":", "\n", "        ", "testing_data", "=", "PickleDatasetContainer", "(", "test_dataset_path", ",", "is_training_container", "=", "True", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"The test dataset path argument is not a CSV or a pickle file.\"", ")", "\n", "\n", "", "device", "=", "parsed_args", ".", "device", "\n", "\n", "if", "\"cpu\"", "not", "in", "device", ":", "\n", "        ", "device", "=", "int", "(", "device", ")", "\n", "", "parser_args", "=", "{", "\"device\"", ":", "device", "}", "\n", "\n", "path_to_retrained_model", "=", "parsed_args", ".", "path_to_retrained_model", "\n", "if", "path_to_retrained_model", "is", "not", "None", ":", "\n", "        ", "parser_args", ".", "update", "(", "{", "\"path_to_retrained_model\"", ":", "path_to_retrained_model", "}", ")", "\n", "\n", "", "base_parsing_model", "=", "parsed_args", ".", "base_parsing_model", "\n", "parser_args_update_args", "=", "attention_model_type_handling", "(", "base_parsing_model", ")", "\n", "parser_args", ".", "update", "(", "**", "parser_args_update_args", ")", "\n", "\n", "address_parser", "=", "AddressParser", "(", "**", "parser_args", ")", "\n", "\n", "batch_size", "=", "parsed_args", ".", "batch_size", "\n", "num_workers", "=", "parsed_args", ".", "num_workers", "\n", "seed", "=", "parsed_args", ".", "seed", "\n", "parser_args", "=", "{", "\n", "\"batch_size\"", ":", "batch_size", ",", "\n", "\"num_workers\"", ":", "num_workers", ",", "\n", "\"seed\"", ":", "seed", ",", "\n", "}", "\n", "\n", "results_export_path", "=", "generate_export_path", "(", "test_dataset_path", ",", "f\"{str(address_parser)}_testing.tsv\"", ")", "\n", "if", "parsed_args", ".", "log", ":", "\n", "        ", "logging_export_path", "=", "replace_path_extension", "(", "results_export_path", ",", "\".log\"", ")", "\n", "logging", ".", "basicConfig", "(", "\n", "filename", "=", "logging_export_path", ",", "format", "=", "\"%(asctime)s : %(levelname)s : %(message)s\"", ",", "level", "=", "logging", ".", "INFO", "\n", ")", "\n", "\n", "text_to_log", "=", "f\"Testing results on dataset file {test_dataset_path} using the parser {str(address_parser)}.\"", "\n", "logging", ".", "info", "(", "text_to_log", ")", "\n", "\n", "", "results", "=", "address_parser", ".", "test", "(", "test_dataset_container", "=", "testing_data", ",", "**", "parser_args", ")", "\n", "\n", "pd", ".", "DataFrame", "(", "results", ",", "index", "=", "[", "0", "]", ")", ".", "to_csv", "(", "results_export_path", ",", "index", "=", "False", ",", "sep", "=", "\"\\t\"", ")", "\n", "if", "parsed_args", ".", "log", ":", "\n", "        ", "text_to_log", "=", "(", "\n", "f\"Testing on the dataset file {test_dataset_path} is finished. The results are logged in \"", "\n", "f\"the CSV file at {results_export_path}.\"", "\n", ")", "\n", "logging", ".", "info", "(", "text_to_log", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.test.get_parser": [[112, 202], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "deepparse.cli.tools.wrap", "deepparse.cli.tools.wrap", "deepparse.cli.tools.wrap", "deepparse.cli.tools.wrap", "deepparse.cli.tools.wrap", "deepparse.cli.tools.wrap", "deepparse.cli.tools.wrap", "deepparse.cli.tools.wrap", "deepparse.cli.tools.wrap", "deepparse.cli.tools.wrap"], "function", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.tools.wrap", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.tools.wrap", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.tools.wrap", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.tools.wrap", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.tools.wrap", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.tools.wrap", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.tools.wrap", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.tools.wrap", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.tools.wrap", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.tools.wrap"], ["", "", "def", "get_parser", "(", ")", "->", "argparse", ".", "ArgumentParser", ":", "\n", "    ", "\"\"\"Return ArgumentParser for the cli.\"\"\"", "\n", "\n", "parser", "=", "argparse", ".", "ArgumentParser", "(", "formatter_class", "=", "argparse", ".", "RawTextHelpFormatter", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"base_parsing_model\"", ",", "\n", "choices", "=", "[", "\n", "\"fasttext\"", ",", "\n", "\"fasttext-attention\"", ",", "\n", "\"fasttext-light\"", ",", "\n", "\"bpemb\"", ",", "\n", "\"bpemb-attention\"", ",", "\n", "]", ",", "\n", "help", "=", "wrap", "(", "\"The base parsing module to use for testing.\"", ")", ",", "\n", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "\"test_dataset_path\"", ",", "\n", "help", "=", "wrap", "(", "\"The path to the dataset file in a pickle (.p, .pickle or .pckl) or CSV format.\"", ")", ",", "\n", "type", "=", "str", ",", "\n", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "\"--device\"", ",", "\n", "help", "=", "wrap", "(", "\"The device to use. It can be 'cpu' or a GPU device index such as '0' or '1'. By default '0'.\"", ")", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "\"0\"", ",", "\n", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "\"--path_to_retrained_model\"", ",", "\n", "help", "=", "wrap", "(", "\"A path to a retrained model to use for testing.\"", ")", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "None", ",", "\n", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "\"--batch_size\"", ",", "\n", "help", "=", "wrap", "(", "\"The size of the batch (default is 32).\"", ")", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "32", ",", "\n", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "\"--num_workers\"", ",", "\n", "help", "=", "wrap", "(", "\"The number of workers to use for the data loader (default is 1 worker).\"", ")", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "1", ",", "\n", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "\"--seed\"", ",", "\n", "help", "=", "wrap", "(", "\"The seed to use to make the sampling deterministic (default 42).\"", ")", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "42", ",", "\n", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "\"--csv_column_names\"", ",", "\n", "help", "=", "wrap", "(", "\n", "\"The column names to extract address and tags in the CSV. Need to be specified if the provided \"", "\n", "\"dataset_path leads to a CSV file. Column names have to be separated by a whitespace. For\"", "\n", "\"example, --csv_column_names column1 column2. By default, None.\"", "\n", ")", ",", "\n", "default", "=", "None", ",", "\n", "nargs", "=", "2", ",", "\n", "type", "=", "str", ",", "\n", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "\"--csv_column_separator\"", ",", "\n", "help", "=", "wrap", "(", "\n", "\"The column separator for the dataset container will only be used if the dataset is a CSV one.\"", "\n", "\" By default '\\t'.\"", "\n", ")", ",", "\n", "default", "=", "\"\\t\"", ",", "\n", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "\"--log\"", ",", "\n", "help", "=", "wrap", "(", "\n", "\"Either or not to log the parsing process into a `.log` file exported at the same place as the \"", "\n", "\"parsed data using the same name as the export file. \"", "\n", "\"The bool value can be (not case sensitive) 'true/false', 't/f', 'yes/no', 'y/n' or '0/1'.\"", "\n", ")", ",", "\n", "type", "=", "bool_parse", ",", "\n", "default", "=", "\"True\"", ",", "\n", ")", "\n", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.test.get_args": [[204, 207], ["get_parser().parse_args", "test.get_parser"], "function", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.retrain.get_parser"], ["", "def", "get_args", "(", "args", ")", ":", "# pragma: no cover", "\n", "    ", "\"\"\"Parse arguments passed in from shell.\"\"\"", "\n", "return", "get_parser", "(", ")", ".", "parse_args", "(", "args", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.retrain.parse_retrained_arguments": [[29, 38], ["vars", "vars.get", "parsed_retain_arguments.update"], "function", ["None"], ["def", "parse_retrained_arguments", "(", "parsed_args", ")", "->", "Dict", ":", "\n", "    ", "dict_parsed_args", "=", "vars", "(", "parsed_args", ")", "\n", "parsed_retain_arguments", "=", "{", "}", "\n", "\n", "for", "retrain_parameter", "in", "_retrain_parameters", ":", "\n", "        ", "value", "=", "dict_parsed_args", ".", "get", "(", "retrain_parameter", ")", "\n", "parsed_retain_arguments", ".", "update", "(", "{", "retrain_parameter", ":", "value", "}", ")", "\n", "\n", "", "return", "parsed_retain_arguments", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.retrain.main": [[40, 117], ["retrain.get_args", "deepparse.cli.tools.is_csv_path", "deepparse.cli.tools.attention_model_type_handling", "parser_args.update", "deepparse.parser.AddressParser", "retrain.parse_retrained_arguments", "deepparse.parser.AddressParser.retrain", "deepparse.dataset_container.CSVDatasetContainer", "deepparse.cli.tools.is_pickle_path", "int", "ValueError", "deepparse.dataset_container.PickleDatasetContainer", "ValueError"], "function", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.retrain.get_args", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.tools.is_csv_path", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.tools.attention_model_type_handling", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.retrain.parse_retrained_arguments", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.address_parser.AddressParser.retrain", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.tools.is_pickle_path"], ["", "def", "main", "(", "args", "=", "None", ")", "->", "None", ":", "\n", "# pylint: disable=too-many-locals, too-many-branches", "\n", "    ", "\"\"\"\n    CLI function to rapidly fine-tuned an addresses parser and saves it. One can retrain a base pretrained model\n    using most of the arguments as the :meth:`~AddressParser.retrain` method. By default, all the parameters have\n    the same default value as the :meth:`~AddressParser.retrain` method. The supported parameters are the following:\n\n    - `train_ratio`,\n    - `batch_size`,\n    - `epochs`,\n    - `num_workers`,\n    - `learning_rate`,\n    - `seed`,\n    - `logging_path`,\n    - `disable_tensorboard`,\n    - `layers_to_freeze`, and\n    - `name_of_the_retrain_parser`.\n\n\n    Examples of usage:\n\n    .. code-block:: sh\n\n        retrain fasttext ./train_dataset_path.csv\n\n    Using a gpu device\n\n    .. code-block:: sh\n\n        retrain bpemb ./train_dataset_path.csv --device 0\n\n    Modifying training parameters\n\n    .. code-block:: sh\n\n        retrain bpemb ./train_dataset_path.csv --device 0 --batch_size 128 --learning_rate 0.001\n\n    \"\"\"", "\n", "if", "args", "is", "None", ":", "# pragma: no cover", "\n", "        ", "args", "=", "sys", ".", "argv", "[", "1", ":", "]", "\n", "\n", "", "parsed_args", "=", "get_args", "(", "args", ")", "\n", "\n", "train_dataset_path", "=", "parsed_args", ".", "train_dataset_path", "\n", "if", "is_csv_path", "(", "train_dataset_path", ")", ":", "\n", "        ", "csv_column_names", "=", "parsed_args", ".", "csv_column_names", "\n", "if", "csv_column_names", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"To use a CSV dataset to retrain on, you need to specify the 'csv_column_names' argument to provide the\"", "\n", "\" column names to extract address and labels (respectively). For example, Address Tags.\"", "\n", ")", "\n", "", "csv_column_separator", "=", "parsed_args", ".", "csv_column_separator", "\n", "training_data", "=", "CSVDatasetContainer", "(", "\n", "train_dataset_path", ",", "\n", "column_names", "=", "csv_column_names", ",", "\n", "separator", "=", "csv_column_separator", ",", "\n", "is_training_container", "=", "True", ",", "\n", ")", "\n", "", "elif", "is_pickle_path", "(", "train_dataset_path", ")", ":", "\n", "        ", "training_data", "=", "PickleDatasetContainer", "(", "train_dataset_path", ",", "is_training_container", "=", "True", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"The train dataset path argument is not a CSV or a pickle file.\"", ")", "\n", "\n", "", "base_parsing_model", "=", "parsed_args", ".", "base_parsing_model", "\n", "device", "=", "parsed_args", ".", "device", "\n", "\n", "if", "\"cpu\"", "not", "in", "device", ":", "\n", "        ", "device", "=", "int", "(", "device", ")", "\n", "", "parser_args", "=", "{", "\"device\"", ":", "device", "}", "\n", "parser_args_update_args", "=", "attention_model_type_handling", "(", "base_parsing_model", ")", "\n", "parser_args", ".", "update", "(", "**", "parser_args_update_args", ")", "\n", "\n", "address_parser", "=", "AddressParser", "(", "**", "parser_args", ")", "\n", "\n", "parsed_retain_arguments", "=", "parse_retrained_arguments", "(", "parsed_args", ")", "\n", "\n", "address_parser", ".", "retrain", "(", "dataset_container", "=", "training_data", ",", "**", "parsed_retain_arguments", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.retrain.get_parser": [[119, 258], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "deepparse.cli.tools.wrap", "deepparse.cli.tools.wrap", "deepparse.cli.tools.wrap", "deepparse.cli.tools.wrap", "deepparse.cli.tools.wrap", "deepparse.cli.tools.wrap", "deepparse.cli.tools.wrap", "deepparse.cli.tools.wrap", "deepparse.cli.tools.wrap", "deepparse.cli.tools.wrap", "deepparse.cli.tools.wrap", "deepparse.cli.tools.wrap", "deepparse.cli.tools.wrap", "deepparse.cli.tools.wrap", "deepparse.cli.tools.wrap"], "function", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.tools.wrap", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.tools.wrap", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.tools.wrap", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.tools.wrap", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.tools.wrap", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.tools.wrap", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.tools.wrap", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.tools.wrap", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.tools.wrap", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.tools.wrap", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.tools.wrap", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.tools.wrap", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.tools.wrap", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.tools.wrap", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.tools.wrap"], ["", "def", "get_parser", "(", ")", "->", "argparse", ".", "ArgumentParser", ":", "\n", "    ", "\"\"\"Return ArgumentParser for the cli.\"\"\"", "\n", "\n", "parser", "=", "argparse", ".", "ArgumentParser", "(", "formatter_class", "=", "argparse", ".", "RawTextHelpFormatter", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"base_parsing_model\"", ",", "\n", "choices", "=", "[", "\n", "\"fasttext\"", ",", "\n", "\"fasttext-attention\"", ",", "\n", "\"fasttext-light\"", ",", "\n", "\"bpemb\"", ",", "\n", "\"bpemb-attention\"", ",", "\n", "]", ",", "\n", "help", "=", "wrap", "(", "\"The base parsing module to use for retraining.\"", ")", ",", "\n", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "\"train_dataset_path\"", ",", "\n", "help", "=", "wrap", "(", "\"The path to the dataset file in a pickle (.p, .pickle or .pckl) or CSV format.\"", ")", ",", "\n", "type", "=", "str", ",", "\n", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "\"--train_ratio\"", ",", "\n", "help", "=", "wrap", "(", "\n", "\"The ratio to use of the dataset for the training. The rest of the data is used for the \"", "\n", "\"validation (e.g. a training ratio of 0.8 mean an 80-20 train-valid split) (default is 0.8).\"", "\n", ")", ",", "\n", "type", "=", "float", ",", "\n", "default", "=", "0.8", ",", "\n", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "\"--batch_size\"", ",", "\n", "help", "=", "wrap", "(", "\"The size of the batch (default is 32).\"", ")", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "32", ",", "\n", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "\"--epochs\"", ",", "\n", "help", "=", "wrap", "(", "\"The number of training epochs (default is 5).\"", ")", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "5", ",", "\n", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "\"--num_workers\"", ",", "\n", "help", "=", "wrap", "(", "\"The number of workers to use for the data loader (default is 1 worker).\"", ")", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "1", ",", "\n", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "\"--learning_rate\"", ",", "\n", "help", "=", "wrap", "(", "\"The learning rate (LR) to use for training (default 0.01).\"", ")", ",", "\n", "type", "=", "float", ",", "\n", "default", "=", "0.01", ",", "\n", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "\"--seed\"", ",", "\n", "help", "=", "wrap", "(", "\"The seed to use (default 42).\"", ")", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "42", ",", "\n", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "\"--logging_path\"", ",", "\n", "help", "=", "wrap", "(", "\n", "\"The logging path for the checkpoints and the retrained model. \"", "\n", "\"Note that training creates checkpoints, and we use Poutyne library that use the best epoch \"", "\n", "\"model and reloads the state if any checkpoints are already there. \"", "\n", "\"Thus, an error will be raised if you change the model type. For example, \"", "\n", "\"you retrain a FastText model and then retrain a BPEmb in the same logging path directory.\"", "\n", "\"By default, the path is './checkpoints'.\"", "\n", ")", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "\"./checkpoints\"", ",", "\n", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "\"--disable_tensorboard\"", ",", "\n", "help", "=", "wrap", "(", "\"To disable Poutyne automatic Tensorboard monitoring. By default, we disable them (true).\"", ")", ",", "\n", "type", "=", "bool_parse", ",", "\n", "default", "=", "\"True\"", ",", "\n", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "\"--layers_to_freeze\"", ",", "\n", "help", "=", "wrap", "(", "\n", "\"Name of the portion of the seq2seq to freeze layers, thus reducing the number of parameters to learn. \"", "\n", "\"Default to None.\"", "\n", ")", ",", "\n", "choices", "=", "[", "None", ",", "\"encoder\"", ",", "\"decoder\"", ",", "\"prediction_layer\"", ",", "\"seq2seq\"", "]", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "None", ",", "\n", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "\"--name_of_the_retrain_parser\"", ",", "\n", "help", "=", "wrap", "(", "\n", "\"Name to give to the retrained parser that will be used when reloaded as the printed name, \"", "\n", "\"and to the saving file name. By default, None, thus, the default name. See the complete parser retrain \"", "\n", "\"method for more details.\"", "\n", ")", ",", "\n", "default", "=", "None", ",", "\n", "type", "=", "str", ",", "\n", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "\"--device\"", ",", "\n", "help", "=", "wrap", "(", "\"The device to use. It can be 'cpu' or a GPU device index such as '0' or '1'. By default, '0'.\"", ")", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "\"0\"", ",", "\n", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "\"--csv_column_names\"", ",", "\n", "help", "=", "wrap", "(", "\n", "\"The column names to extract address and tags in the CSV. Need to be specified if the provided \"", "\n", "\"dataset_path leads to a CSV file. Column names have to be separated by a whitespace. For\"", "\n", "\"example, --csv_column_names column1 column2. By default, None.\"", "\n", ")", ",", "\n", "default", "=", "None", ",", "\n", "nargs", "=", "2", ",", "\n", "type", "=", "str", ",", "\n", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "\"--csv_column_separator\"", ",", "\n", "help", "=", "wrap", "(", "\n", "\"The column separator for the dataset container will only be used if the dataset is a CSV one.\"", "\n", "\" By default, '\\t'.\"", "\n", ")", ",", "\n", "default", "=", "\"\\t\"", ",", "\n", ")", "\n", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.retrain.get_args": [[260, 263], ["get_parser().parse_args", "retrain.get_parser"], "function", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.retrain.get_parser"], ["", "def", "get_args", "(", "args", ")", ":", "# pragma: no cover", "\n", "    ", "\"\"\"Parse arguments passed in from shell.\"\"\"", "\n", "return", "get_parser", "(", ")", ".", "parse_args", "(", "args", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.test_testing.TestingTests.inject_fixtures": [[17, 20], ["pytest.fixture"], "methods", ["None"], ["    ", "@", "pytest", ".", "fixture", "(", "autouse", "=", "True", ")", "\n", "def", "inject_fixtures", "(", "self", ",", "caplog", ")", ":", "\n", "        ", "self", ".", "_caplog", "=", "caplog", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.test_testing.TestingTests.setUpClass": [[21, 41], ["super().setUpClass", "cls.download_pre_trained_weights"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_seq2seq_fasttext_model_gpu.FastTextSeq2SeqIntegrationTest.setUpClass", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.base.PretrainedWeightsBase.download_pre_trained_weights"], ["", "@", "classmethod", "\n", "def", "setUpClass", "(", "cls", ")", ":", "\n", "        ", "super", "(", "TestingTests", ",", "cls", ")", ".", "setUpClass", "(", ")", "\n", "\n", "cls", ".", "download_pre_trained_weights", "(", "cls", ")", "\n", "\n", "cls", ".", "a_fasttext_model_type", "=", "\"fasttext\"", "\n", "cls", ".", "a_fasttext_att_model_type", "=", "\"fasttext-attention\"", "\n", "cls", ".", "a_fasttext_light_model_type", "=", "\"fasttext-light\"", "\n", "cls", ".", "a_bpemb_model_type", "=", "\"bpemb\"", "\n", "cls", ".", "a_bpemb_att_model_type", "=", "\"bpemd-attention\"", "\n", "\n", "cls", ".", "cpu_device", "=", "\"cpu\"", "\n", "cls", ".", "gpu_device", "=", "\"0\"", "\n", "\n", "cls", ".", "a_named_model", "=", "\"a_retrained_model\"", "\n", "\n", "cls", ".", "fasttext_parser_formatted_name", "=", "\"PreTrainedFastTextAddressParser\"", "\n", "cls", ".", "bpemb_parser_formatted_name", "=", "\"PreTrainedBPEmbAddressParser\"", "\n", "cls", ".", "fasttext_att_parser_formatted_name", "=", "\"PreTrainedFastTextAttentionAddressParser\"", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.test_testing.TestingTests.test_integration_cpu": [[42, 61], ["unittest.skipIf", "deepparse.cli.test.main", "deepparse.cli.generate_export_path", "test_testing.TestingTests.assertTrue", "os.path.isfile", "os.path.exists", "os.path.join", "os.path.join", "os.path.expanduser"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.models_evaluation.evaluate_model.main", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.tools.generate_export_path"], ["", "@", "skipIf", "(", "\n", "not", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "expanduser", "(", "\"~\"", ")", ",", "\".cache\"", ",", "\"deepparse\"", ",", "\"cc.fr.300.bin\"", ")", ")", ",", "\n", "\"download of model too long for test in runner\"", ",", "\n", ")", "\n", "def", "test_integration_cpu", "(", "self", ")", ":", "\n", "        ", "parser_params", "=", "[", "\n", "self", ".", "a_fasttext_model_type", ",", "\n", "self", ".", "a_train_pickle_dataset_path", ",", "\n", "\"--device\"", ",", "\n", "self", ".", "cpu_device", ",", "\n", "]", "\n", "\n", "test", ".", "main", "(", "parser_params", ")", "\n", "\n", "expected_file_path", "=", "generate_export_path", "(", "\n", "self", ".", "a_fasttext_model_type", ",", "f\"{self.fasttext_parser_formatted_name}_testing.tsv\"", "\n", ")", "\n", "\n", "self", ".", "assertTrue", "(", "os", ".", "path", ".", "isfile", "(", "os", ".", "path", ".", "join", "(", "self", ".", "temp_dir_obj", ".", "name", ",", "\"data\"", ",", "expected_file_path", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.test_testing.TestingTests.test_integration_gpu": [[62, 78], ["unittest.skipIf", "deepparse.cli.test.main", "deepparse.cli.generate_export_path", "test_testing.TestingTests.assertTrue", "os.path.isfile", "torch.cuda.is_available", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.models_evaluation.evaluate_model.main", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.tools.generate_export_path"], ["", "@", "skipIf", "(", "not", "torch", ".", "cuda", ".", "is_available", "(", ")", ",", "\"no gpu available\"", ")", "\n", "def", "test_integration_gpu", "(", "self", ")", ":", "\n", "        ", "parser_params", "=", "[", "\n", "self", ".", "a_fasttext_model_type", ",", "\n", "self", ".", "a_train_pickle_dataset_path", ",", "\n", "\"--device\"", ",", "\n", "self", ".", "gpu_device", ",", "\n", "]", "\n", "\n", "test", ".", "main", "(", "parser_params", ")", "\n", "\n", "expected_file_path", "=", "generate_export_path", "(", "\n", "self", ".", "a_fasttext_model_type", ",", "f\"{self.fasttext_parser_formatted_name}_testing.tsv\"", "\n", ")", "\n", "\n", "self", ".", "assertTrue", "(", "os", ".", "path", ".", "isfile", "(", "os", ".", "path", ".", "join", "(", "self", ".", "temp_dir_obj", ".", "name", ",", "\"data\"", ",", "expected_file_path", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.test_testing.TestingTests.test_integration_logging": [[79, 113], ["unittest.skipIf", "os.path.join", "test_testing.TestingTests.assertEqual", "os.path.join", "test_testing.TestingTests.assertEqual", "test_testing.TestingTests._caplog.at_level", "deepparse.cli.test.main", "deepparse.cli.generate_export_path", "os.path.exists", "os.path.join", "os.path.expanduser"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.models_evaluation.evaluate_model.main", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.tools.generate_export_path"], ["", "@", "skipIf", "(", "\n", "not", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "expanduser", "(", "\"~\"", ")", ",", "\".cache\"", ",", "\"deepparse\"", ",", "\"cc.fr.300.bin\"", ")", ")", ",", "\n", "\"download of model too long for test in runner\"", ",", "\n", ")", "\n", "def", "test_integration_logging", "(", "self", ")", ":", "\n", "        ", "with", "self", ".", "_caplog", ".", "at_level", "(", "logging", ".", "INFO", ")", ":", "\n", "            ", "parser_params", "=", "[", "\n", "self", ".", "a_fasttext_model_type", ",", "\n", "self", ".", "a_train_pickle_dataset_path", ",", "\n", "\"--device\"", ",", "\n", "self", ".", "cpu_device", ",", "\n", "]", "\n", "\n", "test", ".", "main", "(", "parser_params", ")", "\n", "\n", "", "data_file_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "temp_dir_obj", ".", "name", ",", "'data'", ",", "self", ".", "a_train_pickle_dataset_path", ")", "\n", "\n", "expected_first_message", "=", "(", "\n", "f\"Testing results on dataset file {data_file_path} using the parser {self.fasttext_parser_formatted_name}.\"", "\n", ")", "\n", "actual_first_message", "=", "self", ".", "_caplog", ".", "records", "[", "0", "]", ".", "message", "\n", "self", ".", "assertEqual", "(", "expected_first_message", ",", "actual_first_message", ")", "\n", "\n", "expected_file_path", "=", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "temp_dir_obj", ".", "name", ",", "\n", "\"data\"", ",", "\n", "generate_export_path", "(", "self", ".", "a_fasttext_model_type", ",", "f\"{self.fasttext_parser_formatted_name}_testing.tsv\"", ")", ",", "\n", ")", "\n", "expected_second_message", "=", "(", "\n", "f\"Testing on the dataset file {data_file_path} is finished. \"", "\n", "f\"The results are logged in the CSV file at {expected_file_path}.\"", "\n", ")", "\n", "actual_second_message", "=", "self", ".", "_caplog", ".", "records", "[", "1", "]", ".", "message", "\n", "self", ".", "assertEqual", "(", "expected_second_message", ",", "actual_second_message", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.test_testing.TestingTests.test_integration_no_logging": [[114, 132], ["unittest.skipIf", "test_testing.TestingTests.assertEqual", "test_testing.TestingTests._caplog.at_level", "deepparse.cli.test.main", "len", "os.path.exists", "os.path.join", "os.path.expanduser"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.models_evaluation.evaluate_model.main"], ["", "@", "skipIf", "(", "\n", "not", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "expanduser", "(", "\"~\"", ")", ",", "\".cache\"", ",", "\"deepparse\"", ",", "\"cc.fr.300.bin\"", ")", ")", ",", "\n", "\"download of model too long for test in runner\"", ",", "\n", ")", "\n", "def", "test_integration_no_logging", "(", "self", ")", ":", "\n", "        ", "with", "self", ".", "_caplog", ".", "at_level", "(", "logging", ".", "INFO", ")", ":", "\n", "            ", "parser_params", "=", "[", "\n", "self", ".", "a_fasttext_model_type", ",", "\n", "self", ".", "a_train_pickle_dataset_path", ",", "\n", "\"--device\"", ",", "\n", "self", ".", "cpu_device", ",", "\n", "\"--log\"", ",", "\n", "\"False\"", ",", "\n", "]", "\n", "\n", "test", ".", "main", "(", "parser_params", ")", "\n", "\n", "", "self", ".", "assertEqual", "(", "0", ",", "len", "(", "self", ".", "_caplog", ".", "records", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.test_testing.TestingTests.test_integration_attention_model": [[133, 149], ["unittest.skipIf", "deepparse.cli.test.main", "deepparse.cli.generate_export_path", "test_testing.TestingTests.assertTrue", "os.path.isfile", "torch.cuda.is_available", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.models_evaluation.evaluate_model.main", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.tools.generate_export_path"], ["", "@", "skipIf", "(", "not", "torch", ".", "cuda", ".", "is_available", "(", ")", ",", "\"no gpu available\"", ")", "\n", "def", "test_integration_attention_model", "(", "self", ")", ":", "\n", "        ", "parser_params", "=", "[", "\n", "self", ".", "a_fasttext_att_model_type", ",", "\n", "self", ".", "a_train_pickle_dataset_path", ",", "\n", "\"--device\"", ",", "\n", "self", ".", "gpu_device", ",", "\n", "]", "\n", "\n", "test", ".", "main", "(", "parser_params", ")", "\n", "\n", "expected_file_path", "=", "generate_export_path", "(", "\n", "self", ".", "a_fasttext_att_model_type", ",", "f\"{self.fasttext_att_parser_formatted_name}_testing.tsv\"", "\n", ")", "\n", "\n", "self", ".", "assertTrue", "(", "os", ".", "path", ".", "isfile", "(", "os", ".", "path", ".", "join", "(", "self", ".", "temp_dir_obj", ".", "name", ",", "\"data\"", ",", "expected_file_path", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.test_testing.TestingTests.test_integration_csv": [[150, 174], ["unittest.skipIf", "deepparse.cli.test.main", "deepparse.cli.generate_export_path", "test_testing.TestingTests.assertTrue", "os.path.isfile", "os.path.exists", "os.path.join", "os.path.join", "os.path.expanduser"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.models_evaluation.evaluate_model.main", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.tools.generate_export_path"], ["", "@", "skipIf", "(", "\n", "not", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "expanduser", "(", "\"~\"", ")", ",", "\".cache\"", ",", "\"deepparse\"", ",", "\"cc.fr.300.bin\"", ")", ")", ",", "\n", "\"download of model too long for test in runner\"", ",", "\n", ")", "\n", "def", "test_integration_csv", "(", "self", ")", ":", "\n", "        ", "parser_params", "=", "[", "\n", "self", ".", "a_fasttext_model_type", ",", "\n", "self", ".", "a_train_csv_dataset_path", ",", "\n", "\"--device\"", ",", "\n", "self", ".", "cpu_device", ",", "\n", "\"--csv_column_names\"", ",", "\n", "\"Address\"", ",", "\n", "\"Tags\"", ",", "\n", "\"--csv_column_separator\"", ",", "# Our dataset use a comma as separator", "\n", "\",\"", ",", "\n", "]", "\n", "\n", "test", ".", "main", "(", "parser_params", ")", "\n", "\n", "expected_file_path", "=", "generate_export_path", "(", "\n", "self", ".", "a_fasttext_model_type", ",", "f\"{self.fasttext_parser_formatted_name}_testing.tsv\"", "\n", ")", "\n", "\n", "self", ".", "assertTrue", "(", "os", ".", "path", ".", "isfile", "(", "os", ".", "path", ".", "join", "(", "self", ".", "temp_dir_obj", ".", "name", ",", "\"data\"", ",", "expected_file_path", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.test_testing.TestingTests.test_ifIsCSVFile_noColumnName_raiseValueError": [[175, 189], ["unittest.skipIf", "test_testing.TestingTests.assertRaises", "deepparse.cli.test.main", "os.path.exists", "os.path.join", "os.path.expanduser"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.models_evaluation.evaluate_model.main"], ["", "@", "skipIf", "(", "\n", "not", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "expanduser", "(", "\"~\"", ")", ",", "\".cache\"", ",", "\"deepparse\"", ",", "\"cc.fr.300.bin\"", ")", ")", ",", "\n", "\"download of model too long for test in runner\"", ",", "\n", ")", "\n", "def", "test_ifIsCSVFile_noColumnName_raiseValueError", "(", "self", ")", ":", "\n", "        ", "with", "self", ".", "assertRaises", "(", "ValueError", ")", ":", "\n", "            ", "parser_params", "=", "[", "\n", "self", ".", "a_fasttext_model_type", ",", "\n", "self", ".", "a_train_csv_dataset_path", ",", "\n", "\"--device\"", ",", "\n", "self", ".", "cpu_device", ",", "\n", "]", "\n", "\n", "test", ".", "main", "(", "parser_params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.test_testing.TestingTests.test_ifIsNotSupportedFile_raiseValueError": [[190, 204], ["unittest.skipIf", "test_testing.TestingTests.assertRaises", "deepparse.cli.test.main", "os.path.exists", "os.path.join", "os.path.expanduser"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.models_evaluation.evaluate_model.main"], ["", "", "@", "skipIf", "(", "\n", "not", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "expanduser", "(", "\"~\"", ")", ",", "\".cache\"", ",", "\"deepparse\"", ",", "\"cc.fr.300.bin\"", ")", ")", ",", "\n", "\"download of model too long for test in runner\"", ",", "\n", ")", "\n", "def", "test_ifIsNotSupportedFile_raiseValueError", "(", "self", ")", ":", "\n", "        ", "with", "self", ".", "assertRaises", "(", "ValueError", ")", ":", "\n", "            ", "parser_params", "=", "[", "\n", "self", ".", "a_fasttext_model_type", ",", "\n", "\"an_unsupported_extension.json\"", ",", "\n", "\"--device\"", ",", "\n", "self", ".", "cpu_device", ",", "\n", "]", "\n", "\n", "test", ".", "main", "(", "parser_params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.test_testing.TestingTests.test_ifPathToFakeRetrainModel_thenUseFakeRetrainModel": [[205, 244], ["unittest.skipIf", "os.path.join", "test_testing.TestingTests.assertEqual", "os.path.join", "test_testing.TestingTests.assertEqual", "test_testing.TestingTests._caplog.at_level", "os.path.join", "deepparse.cli.test.main", "deepparse.cli.generate_export_path", "os.path.exists", "os.path.expanduser", "os.path.join", "os.path.expanduser"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.models_evaluation.evaluate_model.main", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.tools.generate_export_path"], ["", "", "@", "skipIf", "(", "\n", "not", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "expanduser", "(", "\"~\"", ")", ",", "\".cache\"", ",", "\"deepparse\"", ",", "\"cc.fr.300.bin\"", ")", ")", ",", "\n", "\"download of model too long for test in runner\"", ",", "\n", ")", "\n", "def", "test_ifPathToFakeRetrainModel_thenUseFakeRetrainModel", "(", "self", ")", ":", "\n", "        ", "with", "self", ".", "_caplog", ".", "at_level", "(", "logging", ".", "INFO", ")", ":", "\n", "# We use the default path to fasttext model as a \"retrain model path\"", "\n", "            ", "path_to_retrained_model", "=", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "expanduser", "(", "\"~\"", ")", ",", "\".cache\"", ",", "\"deepparse\"", ",", "\"fasttext.ckpt\"", ")", "\n", "\n", "parser_params", "=", "[", "\n", "self", ".", "a_fasttext_model_type", ",", "\n", "self", ".", "a_train_pickle_dataset_path", ",", "\n", "\"--path_to_retrained_model\"", ",", "\n", "path_to_retrained_model", ",", "\n", "\"--device\"", ",", "\n", "self", ".", "cpu_device", ",", "\n", "]", "\n", "\n", "test", ".", "main", "(", "parser_params", ")", "\n", "\n", "", "data_file_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "temp_dir_obj", ".", "name", ",", "'data'", ",", "self", ".", "a_train_pickle_dataset_path", ")", "\n", "\n", "expected_first_message", "=", "(", "\n", "f\"Testing results on dataset file {data_file_path} using the parser {self.fasttext_parser_formatted_name}.\"", "\n", ")", "\n", "actual_first_message", "=", "self", ".", "_caplog", ".", "records", "[", "0", "]", ".", "message", "\n", "self", ".", "assertEqual", "(", "expected_first_message", ",", "actual_first_message", ")", "\n", "\n", "expected_file_path", "=", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "temp_dir_obj", ".", "name", ",", "\n", "\"data\"", ",", "\n", "generate_export_path", "(", "self", ".", "a_fasttext_model_type", ",", "f\"{self.fasttext_parser_formatted_name}_testing.tsv\"", ")", ",", "\n", ")", "\n", "expected_second_message", "=", "(", "\n", "f\"Testing on the dataset file {data_file_path} is finished. \"", "\n", "f\"The results are logged in the CSV file at {expected_file_path}.\"", "\n", ")", "\n", "actual_second_message", "=", "self", ".", "_caplog", ".", "records", "[", "1", "]", ".", "message", "\n", "self", ".", "assertEqual", "(", "expected_second_message", ",", "actual_second_message", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.test_testing.TestingTests.test_ifPathToBPEmbRetrainModel_thenUseBPEmbRetrainModel": [[245, 281], ["unittest.skipIf", "os.path.join", "test_testing.TestingTests.assertEqual", "os.path.join", "test_testing.TestingTests.assertEqual", "test_testing.TestingTests._caplog.at_level", "deepparse.cli.test.main", "deepparse.cli.generate_export_path", "os.path.exists", "os.path.join", "os.path.expanduser"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.models_evaluation.evaluate_model.main", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.tools.generate_export_path"], ["", "@", "skipIf", "(", "\n", "not", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "expanduser", "(", "\"~\"", ")", ",", "\".cache\"", ",", "\"deepparse\"", ",", "\"cc.fr.300.bin\"", ")", ")", ",", "\n", "\"download of model too long for test in runner\"", ",", "\n", ")", "\n", "def", "test_ifPathToBPEmbRetrainModel_thenUseBPEmbRetrainModel", "(", "self", ")", ":", "\n", "        ", "with", "self", ".", "_caplog", ".", "at_level", "(", "logging", ".", "INFO", ")", ":", "\n", "            ", "parser_params", "=", "[", "\n", "self", ".", "a_bpemb_model_type", ",", "\n", "self", ".", "a_train_pickle_dataset_path", ",", "\n", "\"--device\"", ",", "\n", "self", ".", "cpu_device", ",", "\n", "]", "\n", "\n", "test", ".", "main", "(", "parser_params", ")", "\n", "\n", "", "data_file_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "temp_dir_obj", ".", "name", ",", "'data'", ",", "self", ".", "a_train_pickle_dataset_path", ")", "\n", "\n", "expected_first_message", "=", "(", "\n", "f\"Testing results on dataset file {data_file_path} using the parser {self.bpemb_parser_formatted_name}.\"", "\n", ")", "\n", "# Not the same position as with fasttext due to BPEmb messages", "\n", "actual_first_message", "=", "self", ".", "_caplog", ".", "records", "[", "2", "]", ".", "message", "\n", "self", ".", "assertEqual", "(", "expected_first_message", ",", "actual_first_message", ")", "\n", "\n", "expected_file_path", "=", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "temp_dir_obj", ".", "name", ",", "\n", "\"data\"", ",", "\n", "generate_export_path", "(", "self", ".", "a_fasttext_model_type", ",", "f\"{self.bpemb_parser_formatted_name}_testing.tsv\"", ")", ",", "\n", ")", "\n", "expected_second_message", "=", "(", "\n", "f\"Testing on the dataset file {data_file_path} is finished. \"", "\n", "f\"The results are logged in the CSV file at {expected_file_path}.\"", "\n", ")", "\n", "# Not the same position as with fasttext due to BPEmb messages", "\n", "actual_second_message", "=", "self", ".", "_caplog", ".", "records", "[", "3", "]", ".", "message", "\n", "self", ".", "assertEqual", "(", "expected_second_message", ",", "actual_second_message", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.test_download.DownloadTests.setUp": [[15, 27], ["tempfile.TemporaryDirectory", "os.path.join", "test_download.DownloadTests.create_parser"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.test_download.DownloadTests.create_parser"], ["    ", "def", "setUp", "(", "self", ")", "->", "None", ":", "\n", "        ", "self", ".", "temp_dir_obj", "=", "TemporaryDirectory", "(", ")", "\n", "self", ".", "fake_cache_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "temp_dir_obj", ".", "name", ",", "\"fake_cache\"", ")", "\n", "self", ".", "a_fasttext_model_type", "=", "\"fasttext\"", "\n", "self", ".", "a_fasttext_att_model_type", "=", "\"fasttext-attention\"", "\n", "self", ".", "a_fasttext_light_model_type", "=", "\"fasttext-light\"", "\n", "self", ".", "a_bpemb_model_type", "=", "\"bpemb\"", "\n", "self", ".", "a_bpemb_att_model_type", "=", "\"bpemb-attention\"", "\n", "self", ".", "latest_fasttext_version", "=", "\"617a417a2f2b02654f7deb5b5cbc60ab2f6334ba\"", "\n", "self", ".", "latest_bpemb_version", "=", "\"6d01367745157066ea6e621ac087be828137711f\"", "\n", "\n", "self", ".", "create_parser", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.test_download.DownloadTests.tearDown": [[28, 30], ["test_download.DownloadTests.temp_dir_obj.cleanup"], "methods", ["None"], ["", "def", "tearDown", "(", "self", ")", "->", "None", ":", "\n", "        ", "self", ".", "temp_dir_obj", ".", "cleanup", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.test_download.DownloadTests.create_parser": [[31, 41], ["argparse.ArgumentParser", "test_download.DownloadTests.parser.add_argument"], "methods", ["None"], ["", "def", "create_parser", "(", "self", ")", ":", "\n", "        ", "self", ".", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\n", "\"model_type\"", ",", "\n", "choices", "=", "[", "\n", "self", ".", "a_fasttext_model_type", ",", "\n", "self", ".", "a_fasttext_att_model_type", ",", "\n", "self", ".", "a_fasttext_light_model_type", ",", "\n", "self", ".", "a_bpemb_model_type", ",", "\n", "self", ".", "a_bpemb_att_model_type", ",", "\n", "]", ",", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.test_download.DownloadTests.test_givenAFasttextDownload_whenModelIsNotLocal_thenDownloadEmbeddings": [[44, 52], ["unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "deepparse.cli.download.main", "downloader.assert_called", "downloader.assert_called_with"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.models_evaluation.evaluate_model.main"], ["", "@", "patch", "(", "\"deepparse.cli.download.download_weights\"", ")", "\n", "def", "test_givenAFasttextDownload_whenModelIsNotLocal_thenDownloadEmbeddings", "(", "self", ",", "weights_download_mock", ")", ":", "\n", "        ", "with", "patch", "(", "\"deepparse.cli.download.CACHE_PATH\"", ",", "self", ".", "fake_cache_path", ")", ":", "\n", "            ", "with", "patch", "(", "\"deepparse.cli.download.download_fasttext_embeddings\"", ")", "as", "downloader", ":", "\n", "                ", "download", ".", "main", "(", "[", "self", ".", "a_fasttext_model_type", "]", ")", "\n", "\n", "downloader", ".", "assert_called", "(", ")", "\n", "downloader", ".", "assert_called_with", "(", "cache_dir", "=", "self", ".", "fake_cache_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.test_download.DownloadTests.test_givenAFasttextMagnitudeDownload_whenModelIsNotLocal_thenDownloadEmbeddings": [[53, 61], ["unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "deepparse.cli.download.main", "downloader.assert_called", "downloader.assert_called_with"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.models_evaluation.evaluate_model.main"], ["", "", "", "@", "patch", "(", "\"deepparse.cli.download.download_weights\"", ")", "\n", "def", "test_givenAFasttextMagnitudeDownload_whenModelIsNotLocal_thenDownloadEmbeddings", "(", "self", ",", "weights_download_mock", ")", ":", "\n", "        ", "with", "patch", "(", "\"deepparse.cli.download.CACHE_PATH\"", ",", "self", ".", "fake_cache_path", ")", ":", "\n", "            ", "with", "patch", "(", "\"deepparse.cli.download.download_fasttext_magnitude_embeddings\"", ")", "as", "downloader", ":", "\n", "                ", "download", ".", "main", "(", "[", "self", ".", "a_fasttext_light_model_type", "]", ")", "\n", "\n", "downloader", ".", "assert_called", "(", ")", "\n", "downloader", ".", "assert_called_with", "(", "cache_dir", "=", "self", ".", "fake_cache_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.test_download.DownloadTests.test_givenABPembDownload_whenModelIsNotLocal_thenDownloadEmbeddings": [[62, 70], ["unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "deepparse.cli.download.main", "downloader.assert_called", "downloader.assert_any_call"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.models_evaluation.evaluate_model.main"], ["", "", "", "@", "patch", "(", "\"deepparse.cli.download.download_weights\"", ")", "\n", "def", "test_givenABPembDownload_whenModelIsNotLocal_thenDownloadEmbeddings", "(", "self", ",", "weights_download_mock", ")", ":", "\n", "        ", "with", "patch", "(", "\"deepparse.cli.download.CACHE_PATH\"", ",", "self", ".", "fake_cache_path", ")", ":", "\n", "            ", "with", "patch", "(", "\"deepparse.cli.download.BPEmb\"", ")", "as", "downloader", ":", "\n", "                ", "download", ".", "main", "(", "[", "self", ".", "a_bpemb_model_type", "]", ")", "\n", "\n", "downloader", ".", "assert_called", "(", ")", "\n", "downloader", ".", "assert_any_call", "(", "lang", "=", "\"multi\"", ",", "vs", "=", "100000", ",", "dim", "=", "300", ")", "# settings for BPemb", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.test_download.DownloadTests.test_givenAFasttextDownload_whenModelIsNotLocal_thenDownloadWeights": [[71, 79], ["unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "deepparse.cli.download.main", "downloader.assert_called", "downloader.assert_any_call"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.models_evaluation.evaluate_model.main"], ["", "", "", "@", "patch", "(", "\"deepparse.cli.download.download_fasttext_embeddings\"", ")", "\n", "def", "test_givenAFasttextDownload_whenModelIsNotLocal_thenDownloadWeights", "(", "self", ",", "download_embeddings_mock", ")", ":", "\n", "        ", "with", "patch", "(", "\"deepparse.cli.download.CACHE_PATH\"", ",", "self", ".", "fake_cache_path", ")", ":", "\n", "            ", "with", "patch", "(", "\"deepparse.cli.download.download_weights\"", ")", "as", "downloader", ":", "\n", "                ", "download", ".", "main", "(", "[", "self", ".", "a_fasttext_model_type", "]", ")", "\n", "\n", "downloader", ".", "assert_called", "(", ")", "\n", "downloader", ".", "assert_any_call", "(", "self", ".", "a_fasttext_model_type", ",", "self", ".", "fake_cache_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.test_download.DownloadTests.test_givenAFasttextAttDownload_whenModelIsNotLocal_thenDownloadWeights": [[80, 88], ["unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "deepparse.cli.download.main", "downloader.assert_called", "downloader.assert_any_call"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.models_evaluation.evaluate_model.main"], ["", "", "", "@", "patch", "(", "\"deepparse.cli.download.download_fasttext_embeddings\"", ")", "\n", "def", "test_givenAFasttextAttDownload_whenModelIsNotLocal_thenDownloadWeights", "(", "self", ",", "download_embeddings_mock", ")", ":", "\n", "        ", "with", "patch", "(", "\"deepparse.cli.download.CACHE_PATH\"", ",", "self", ".", "fake_cache_path", ")", ":", "\n", "            ", "with", "patch", "(", "\"deepparse.cli.download.download_weights\"", ")", "as", "downloader", ":", "\n", "                ", "download", ".", "main", "(", "[", "self", ".", "a_fasttext_att_model_type", "]", ")", "\n", "\n", "downloader", ".", "assert_called", "(", ")", "\n", "downloader", ".", "assert_any_call", "(", "self", ".", "a_fasttext_att_model_type", ",", "self", ".", "fake_cache_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.test_download.DownloadTests.test_givenAFasttextLightDownload_whenModelIsNotLocal_thenDownloadWeights": [[89, 97], ["unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "deepparse.cli.download.main", "downloader.assert_called", "downloader.assert_any_call"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.models_evaluation.evaluate_model.main"], ["", "", "", "@", "patch", "(", "\"deepparse.cli.download.download_fasttext_magnitude_embeddings\"", ")", "\n", "def", "test_givenAFasttextLightDownload_whenModelIsNotLocal_thenDownloadWeights", "(", "self", ",", "download_embeddings_mock", ")", ":", "\n", "        ", "with", "patch", "(", "\"deepparse.cli.download.CACHE_PATH\"", ",", "self", ".", "fake_cache_path", ")", ":", "\n", "            ", "with", "patch", "(", "\"deepparse.cli.download.download_weights\"", ")", "as", "downloader", ":", "\n", "                ", "download", ".", "main", "(", "[", "self", ".", "a_fasttext_light_model_type", "]", ")", "\n", "\n", "downloader", ".", "assert_called", "(", ")", "\n", "downloader", ".", "assert_any_call", "(", "self", ".", "a_fasttext_light_model_type", ",", "self", ".", "fake_cache_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.test_download.DownloadTests.test_givenABPembDownload_whenModelIsNotLocal_thenDownloadWeights": [[98, 106], ["unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "deepparse.cli.download.main", "downloader.assert_called", "downloader.assert_any_call"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.models_evaluation.evaluate_model.main"], ["", "", "", "@", "patch", "(", "\"deepparse.cli.download.BPEmb\"", ")", "\n", "def", "test_givenABPembDownload_whenModelIsNotLocal_thenDownloadWeights", "(", "self", ",", "download_embeddings_mock", ")", ":", "\n", "        ", "with", "patch", "(", "\"deepparse.cli.download.CACHE_PATH\"", ",", "self", ".", "fake_cache_path", ")", ":", "\n", "            ", "with", "patch", "(", "\"deepparse.cli.download.download_weights\"", ")", "as", "downloader", ":", "\n", "                ", "download", ".", "main", "(", "[", "self", ".", "a_bpemb_model_type", "]", ")", "\n", "\n", "downloader", ".", "assert_called", "(", ")", "\n", "downloader", ".", "assert_any_call", "(", "self", ".", "a_bpemb_model_type", ",", "self", ".", "fake_cache_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.test_download.DownloadTests.test_givenABPembAttDownload_whenModelIsNotLocal_thenDownloadWeights": [[107, 115], ["unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "deepparse.cli.download.main", "downloader.assert_called", "downloader.assert_any_call"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.models_evaluation.evaluate_model.main"], ["", "", "", "@", "patch", "(", "\"deepparse.cli.download.BPEmb\"", ")", "\n", "def", "test_givenABPembAttDownload_whenModelIsNotLocal_thenDownloadWeights", "(", "self", ",", "download_embeddings_mock", ")", ":", "\n", "        ", "with", "patch", "(", "\"deepparse.cli.download.CACHE_PATH\"", ",", "self", ".", "fake_cache_path", ")", ":", "\n", "            ", "with", "patch", "(", "\"deepparse.cli.download.download_weights\"", ")", "as", "downloader", ":", "\n", "                ", "download", ".", "main", "(", "[", "self", ".", "a_bpemb_att_model_type", "]", ")", "\n", "\n", "downloader", ".", "assert_called", "(", ")", "\n", "downloader", ".", "assert_any_call", "(", "self", ".", "a_bpemb_att_model_type", ",", "self", ".", "fake_cache_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.test_download.DownloadTests.test_givenAFasttextDownload_whenModelIsLocalButNotLatest_thenDownloadWeights": [[116, 128], ["unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "deepparse.cli.download.main", "downloader.assert_called", "downloader.assert_any_call"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.models_evaluation.evaluate_model.main"], ["", "", "", "@", "patch", "(", "\"deepparse.cli.download.download_fasttext_embeddings\"", ")", "\n", "@", "patch", "(", "\"deepparse.cli.download.os.path.isfile\"", ",", "return_value", "=", "True", ")", "\n", "@", "patch", "(", "\"deepparse.cli.download.latest_version\"", ",", "return_value", "=", "False", ")", "# not the latest version", "\n", "def", "test_givenAFasttextDownload_whenModelIsLocalButNotLatest_thenDownloadWeights", "(", "\n", "self", ",", "download_embeddings_mock", ",", "os_is_file_mock", ",", "latest_version_mock", "\n", ")", ":", "\n", "        ", "with", "patch", "(", "\"deepparse.cli.download.CACHE_PATH\"", ",", "self", ".", "fake_cache_path", ")", ":", "\n", "            ", "with", "patch", "(", "\"deepparse.cli.download.download_weights\"", ")", "as", "downloader", ":", "\n", "                ", "download", ".", "main", "(", "[", "self", ".", "a_fasttext_model_type", "]", ")", "\n", "\n", "downloader", ".", "assert_called", "(", ")", "\n", "downloader", ".", "assert_any_call", "(", "self", ".", "a_fasttext_model_type", ",", "self", ".", "fake_cache_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.test_download.DownloadTests.test_givenAFasttextLightDownload_whenModelIsLocalButNotLatest_thenDownloadWeights": [[129, 141], ["unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "deepparse.cli.download.main", "downloader.assert_called", "downloader.assert_any_call"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.models_evaluation.evaluate_model.main"], ["", "", "", "@", "patch", "(", "\"deepparse.cli.download.download_fasttext_magnitude_embeddings\"", ")", "\n", "@", "patch", "(", "\"deepparse.cli.download.os.path.isfile\"", ",", "return_value", "=", "True", ")", "\n", "@", "patch", "(", "\"deepparse.cli.download.latest_version\"", ",", "return_value", "=", "False", ")", "# not the latest version", "\n", "def", "test_givenAFasttextLightDownload_whenModelIsLocalButNotLatest_thenDownloadWeights", "(", "\n", "self", ",", "download_embeddings_mock", ",", "os_is_file_mock", ",", "latest_version_mock", "\n", ")", ":", "\n", "        ", "with", "patch", "(", "\"deepparse.cli.download.CACHE_PATH\"", ",", "self", ".", "fake_cache_path", ")", ":", "\n", "            ", "with", "patch", "(", "\"deepparse.cli.download.download_weights\"", ")", "as", "downloader", ":", "\n", "                ", "download", ".", "main", "(", "[", "self", ".", "a_fasttext_light_model_type", "]", ")", "\n", "\n", "downloader", ".", "assert_called", "(", ")", "\n", "downloader", ".", "assert_any_call", "(", "self", ".", "a_fasttext_light_model_type", ",", "self", ".", "fake_cache_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.test_download.DownloadTests.test_givenABPembDownload_whenModelIsLocalButNotLatest_thenDownloadWeights": [[142, 154], ["unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "deepparse.cli.download.main", "downloader.assert_called", "downloader.assert_any_call"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.models_evaluation.evaluate_model.main"], ["", "", "", "@", "patch", "(", "\"deepparse.cli.download.BPEmb\"", ")", "\n", "@", "patch", "(", "\"deepparse.cli.download.os.path.isfile\"", ",", "return_value", "=", "True", ")", "\n", "@", "patch", "(", "\"deepparse.cli.download.latest_version\"", ",", "return_value", "=", "False", ")", "# not the latest version", "\n", "def", "test_givenABPembDownload_whenModelIsLocalButNotLatest_thenDownloadWeights", "(", "\n", "self", ",", "download_embeddings_mock", ",", "os_is_file_mock", ",", "latest_version_mock", "\n", ")", ":", "\n", "        ", "with", "patch", "(", "\"deepparse.cli.download.CACHE_PATH\"", ",", "self", ".", "fake_cache_path", ")", ":", "\n", "            ", "with", "patch", "(", "\"deepparse.cli.download.download_weights\"", ")", "as", "downloader", ":", "\n", "                ", "download", ".", "main", "(", "[", "self", ".", "a_bpemb_model_type", "]", ")", "\n", "\n", "downloader", ".", "assert_called", "(", ")", "\n", "downloader", ".", "assert_any_call", "(", "self", ".", "a_bpemb_model_type", ",", "self", ".", "fake_cache_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.test_download.DownloadTests.test_givenAFasttextDownload_whenModelIsLocalAndGoodVersion_thenDoNoting": [[155, 166], ["unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "deepparse.cli.download.main", "downloader.assert_not_called"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.models_evaluation.evaluate_model.main"], ["", "", "", "@", "patch", "(", "\"deepparse.cli.download.download_fasttext_embeddings\"", ")", "\n", "@", "patch", "(", "\"deepparse.cli.download.os.path.isfile\"", ",", "return_value", "=", "True", ")", "\n", "@", "patch", "(", "\"deepparse.cli.download.latest_version\"", ",", "return_value", "=", "True", ")", "# the latest version", "\n", "def", "test_givenAFasttextDownload_whenModelIsLocalAndGoodVersion_thenDoNoting", "(", "\n", "self", ",", "download_embeddings_mock", ",", "os_is_file_mock", ",", "latest_version_mock", "\n", ")", ":", "\n", "        ", "with", "patch", "(", "\"deepparse.cli.download.CACHE_PATH\"", ",", "self", ".", "fake_cache_path", ")", ":", "\n", "            ", "with", "patch", "(", "\"deepparse.cli.download.download_weights\"", ")", "as", "downloader", ":", "\n", "                ", "download", ".", "main", "(", "[", "self", ".", "a_fasttext_model_type", "]", ")", "\n", "\n", "downloader", ".", "assert_not_called", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.test_download.DownloadTests.test_givenAFasttextLightDownload_whenModelIsLocalAndGoodVersion_thenDoNoting": [[167, 181], ["unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "deepparse.cli.download.main", "downloader.assert_not_called"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.models_evaluation.evaluate_model.main"], ["", "", "", "@", "patch", "(", "\"deepparse.cli.download.download_fasttext_magnitude_embeddings\"", ")", "\n", "@", "patch", "(", "\"deepparse.cli.download.os.path.isfile\"", ",", "return_value", "=", "True", ")", "\n", "@", "patch", "(", "\"deepparse.cli.download.latest_version\"", ",", "return_value", "=", "True", ")", "# the latest version", "\n", "def", "test_givenAFasttextLightDownload_whenModelIsLocalAndGoodVersion_thenDoNoting", "(", "\n", "self", ",", "download_embeddings_mock", ",", "os_is_file_mock", ",", "latest_version_mock", "\n", ")", ":", "\n", "        ", "os_is_file_mock", ".", "return_value", "=", "True", "\n", "latest_version_mock", ".", "return_value", "=", "True", "# the latest version", "\n", "\n", "with", "patch", "(", "\"deepparse.cli.download.CACHE_PATH\"", ",", "self", ".", "fake_cache_path", ")", ":", "\n", "            ", "with", "patch", "(", "\"deepparse.cli.download.download_weights\"", ")", "as", "downloader", ":", "\n", "                ", "download", ".", "main", "(", "[", "self", ".", "a_fasttext_light_model_type", "]", ")", "\n", "\n", "downloader", ".", "assert_not_called", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.test_download.DownloadTests.test_givenABPembDownload_whenModelIsLocalAndGoodVersion_thenDoNoting": [[182, 196], ["unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "deepparse.cli.download.main", "downloader.assert_not_called"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.models_evaluation.evaluate_model.main"], ["", "", "", "@", "patch", "(", "\"deepparse.cli.download.BPEmb\"", ")", "\n", "@", "patch", "(", "\"deepparse.cli.download.os.path.isfile\"", ",", "return_value", "=", "True", ")", "\n", "@", "patch", "(", "\"deepparse.cli.download.latest_version\"", ",", "return_value", "=", "True", ")", "# the latest version", "\n", "def", "test_givenABPembDownload_whenModelIsLocalAndGoodVersion_thenDoNoting", "(", "\n", "self", ",", "download_embeddings_mock", ",", "os_is_file_mock", ",", "latest_version_mock", "\n", ")", ":", "\n", "        ", "os_is_file_mock", ".", "return_value", "=", "True", "\n", "latest_version_mock", ".", "return_value", "=", "True", "# the latest version", "\n", "\n", "with", "patch", "(", "\"deepparse.cli.download.CACHE_PATH\"", ",", "self", ".", "fake_cache_path", ")", ":", "\n", "            ", "with", "patch", "(", "\"deepparse.cli.download.download_weights\"", ")", "as", "downloader", ":", "\n", "                ", "download", ".", "main", "(", "[", "self", ".", "a_bpemb_model_type", "]", ")", "\n", "\n", "downloader", ".", "assert_not_called", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.test_download.DownloadTests.test_givenAFasttextDownload_whenModelIsNotLocalButNotLatest_thenDownloadWeights": [[197, 208], ["unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "deepparse.cli.download.main", "downloader.assert_called", "downloader.assert_any_call"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.models_evaluation.evaluate_model.main"], ["", "", "", "@", "patch", "(", "\"deepparse.cli.download.download_fasttext_embeddings\"", ")", "\n", "@", "patch", "(", "\"deepparse.cli.download.os.path.isfile\"", ",", "side_effect", "=", "[", "False", ",", "True", "]", ")", "# no version file in local", "\n", "def", "test_givenAFasttextDownload_whenModelIsNotLocalButNotLatest_thenDownloadWeights", "(", "\n", "self", ",", "download_embeddings_mock", ",", "os_is_file_mock", "\n", ")", ":", "\n", "        ", "with", "patch", "(", "\"deepparse.cli.download.CACHE_PATH\"", ",", "self", ".", "fake_cache_path", ")", ":", "\n", "            ", "with", "patch", "(", "\"deepparse.cli.download.download_weights\"", ")", "as", "downloader", ":", "\n", "                ", "download", ".", "main", "(", "[", "self", ".", "a_fasttext_model_type", "]", ")", "\n", "\n", "downloader", ".", "assert_called", "(", ")", "\n", "downloader", ".", "assert_any_call", "(", "self", ".", "a_fasttext_model_type", ",", "self", ".", "fake_cache_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.test_download.DownloadTests.test_givenAFasttextLightDownload_whenModelIsNotLocalButNotLatest_thenDownloadWeights": [[209, 220], ["unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "deepparse.cli.download.main", "downloader.assert_called", "downloader.assert_any_call"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.models_evaluation.evaluate_model.main"], ["", "", "", "@", "patch", "(", "\"deepparse.cli.download.download_fasttext_magnitude_embeddings\"", ")", "\n", "@", "patch", "(", "\"deepparse.cli.download.os.path.isfile\"", ",", "side_effect", "=", "[", "False", ",", "True", "]", ")", "# no version file in local", "\n", "def", "test_givenAFasttextLightDownload_whenModelIsNotLocalButNotLatest_thenDownloadWeights", "(", "\n", "self", ",", "download_embeddings_mock", ",", "os_is_file_mock", "\n", ")", ":", "\n", "        ", "with", "patch", "(", "\"deepparse.cli.download.CACHE_PATH\"", ",", "self", ".", "fake_cache_path", ")", ":", "\n", "            ", "with", "patch", "(", "\"deepparse.cli.download.download_weights\"", ")", "as", "downloader", ":", "\n", "                ", "download", ".", "main", "(", "[", "self", ".", "a_fasttext_light_model_type", "]", ")", "\n", "\n", "downloader", ".", "assert_called", "(", ")", "\n", "downloader", ".", "assert_any_call", "(", "self", ".", "a_fasttext_light_model_type", ",", "self", ".", "fake_cache_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.test_download.DownloadTests.test_givenABPembDownload_whenModelIsNotLocalButNotLatest_thenDownloadWeights": [[221, 232], ["unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "deepparse.cli.download.main", "downloader.assert_called", "downloader.assert_any_call"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.models_evaluation.evaluate_model.main"], ["", "", "", "@", "patch", "(", "\"deepparse.cli.download.BPEmb\"", ")", "\n", "@", "patch", "(", "\"deepparse.cli.download.os.path.isfile\"", ",", "side_effect", "=", "[", "False", ",", "True", "]", ")", "# no version file in local", "\n", "def", "test_givenABPembDownload_whenModelIsNotLocalButNotLatest_thenDownloadWeights", "(", "\n", "self", ",", "download_embeddings_mock", ",", "os_is_file_mock", "\n", ")", ":", "\n", "        ", "with", "patch", "(", "\"deepparse.cli.download.CACHE_PATH\"", ",", "self", ".", "fake_cache_path", ")", ":", "\n", "            ", "with", "patch", "(", "\"deepparse.cli.download.download_weights\"", ")", "as", "downloader", ":", "\n", "                ", "download", ".", "main", "(", "[", "self", ".", "a_bpemb_model_type", "]", ")", "\n", "\n", "downloader", ".", "assert_called", "(", ")", "\n", "downloader", ".", "assert_any_call", "(", "self", ".", "a_bpemb_model_type", ",", "self", ".", "fake_cache_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.test_parse.ParseTests.setUpClass": [[18, 21], ["cls.download_pre_trained_weights"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.base.PretrainedWeightsBase.download_pre_trained_weights"], ["    ", "@", "classmethod", "\n", "def", "setUpClass", "(", "cls", ")", ":", "\n", "        ", "cls", ".", "download_pre_trained_weights", "(", "cls", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.test_parse.ParseTests.inject_fixtures": [[22, 25], ["pytest.fixture"], "methods", ["None"], ["", "@", "pytest", ".", "fixture", "(", "autouse", "=", "True", ")", "\n", "def", "inject_fixtures", "(", "self", ",", "caplog", ")", ":", "\n", "        ", "self", ".", "_caplog", "=", "caplog", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.test_parse.ParseTests.setUp": [[26, 47], ["tempfile.TemporaryDirectory", "os.path.join", "os.path.join", "os.path.join"], "methods", ["None"], ["", "def", "setUp", "(", "self", ")", "->", "None", ":", "\n", "        ", "self", ".", "temp_dir_obj", "=", "TemporaryDirectory", "(", ")", "\n", "\n", "self", ".", "fake_data_path_pickle", "=", "os", ".", "path", ".", "join", "(", "self", ".", "temp_dir_obj", ".", "name", ",", "\"fake_data.p\"", ")", "\n", "\n", "self", ".", "fake_data_path_csv", "=", "os", ".", "path", ".", "join", "(", "self", ".", "temp_dir_obj", ".", "name", ",", "\"fake_data.csv\"", ")", "\n", "self", ".", "a_unsupported_data_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "temp_dir_obj", ".", "name", ",", "\"fake_data.txt\"", ")", "\n", "\n", "self", ".", "pickle_p_export_filename", "=", "\"a_file.p\"", "\n", "self", ".", "pickle_pickle_export_filename", "=", "\"a_file.pickle\"", "\n", "self", ".", "csv_export_filename", "=", "\"a_file.csv\"", "\n", "self", ".", "json_export_filename", "=", "\"a_file.json\"", "\n", "\n", "self", ".", "a_fasttext_model_type", "=", "\"fasttext\"", "\n", "self", ".", "a_fasttext_att_model_type", "=", "\"fasttext-attention\"", "\n", "self", ".", "a_fasttext_light_model_type", "=", "\"fasttext-light\"", "\n", "self", ".", "a_bpemb_model_type", "=", "\"bpemb\"", "\n", "self", ".", "a_bpemb_att_model_type", "=", "\"bpemd-attention\"", "\n", "\n", "self", ".", "cpu_device", "=", "\"cpu\"", "\n", "self", ".", "gpu_device", "=", "\"0\"", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.test_parse.ParseTests.tearDown": [[48, 50], ["test_parse.ParseTests.temp_dir_obj.cleanup"], "methods", ["None"], ["", "def", "tearDown", "(", "self", ")", "->", "None", ":", "\n", "        ", "self", ".", "temp_dir_obj", ".", "cleanup", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.test_parse.ParseTests.test_integration_cpu": [[51, 70], ["unittest.skipIf", "tests.tools.create_pickle_file", "deepparse.cli.parse.main", "deepparse.cli.generate_export_path", "test_parse.ParseTests.assertTrue", "os.path.isfile", "os.path.exists", "os.path.join", "os.path.expanduser"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.tests.tools.create_pickle_file", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.models_evaluation.evaluate_model.main", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.tools.generate_export_path"], ["", "@", "skipIf", "(", "\n", "not", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "expanduser", "(", "\"~\"", ")", ",", "\".cache\"", ",", "\"deepparse\"", ",", "\"cc.fr.300.bin\"", ")", ")", ",", "\n", "\"download of model too long for test in runner\"", ",", "\n", ")", "\n", "def", "test_integration_cpu", "(", "self", ")", ":", "\n", "        ", "create_pickle_file", "(", "self", ".", "fake_data_path_pickle", ",", "predict_container", "=", "True", ")", "\n", "\n", "parse", ".", "main", "(", "\n", "[", "\n", "self", ".", "a_fasttext_model_type", ",", "\n", "self", ".", "fake_data_path_pickle", ",", "\n", "self", ".", "pickle_p_export_filename", ",", "\n", "\"--device\"", ",", "\n", "self", ".", "cpu_device", ",", "\n", "]", "\n", ")", "\n", "\n", "export_path", "=", "generate_export_path", "(", "self", ".", "fake_data_path_pickle", ",", "self", ".", "pickle_p_export_filename", ")", "\n", "self", ".", "assertTrue", "(", "os", ".", "path", ".", "isfile", "(", "export_path", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.test_parse.ParseTests.test_integration_gpu": [[71, 87], ["unittest.skipIf", "tests.tools.create_pickle_file", "deepparse.cli.parse.main", "deepparse.cli.generate_export_path", "test_parse.ParseTests.assertTrue", "os.path.isfile", "torch.cuda.is_available"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.tests.tools.create_pickle_file", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.models_evaluation.evaluate_model.main", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.tools.generate_export_path"], ["", "@", "skipIf", "(", "not", "torch", ".", "cuda", ".", "is_available", "(", ")", ",", "\"no gpu available\"", ")", "\n", "def", "test_integration_gpu", "(", "self", ")", ":", "\n", "        ", "create_pickle_file", "(", "self", ".", "fake_data_path_pickle", ",", "predict_container", "=", "True", ")", "\n", "\n", "parse", ".", "main", "(", "\n", "[", "\n", "self", ".", "a_fasttext_model_type", ",", "\n", "self", ".", "fake_data_path_pickle", ",", "\n", "self", ".", "pickle_p_export_filename", ",", "\n", "\"--device\"", ",", "\n", "self", ".", "gpu_device", ",", "\n", "]", "\n", ")", "\n", "\n", "export_path", "=", "generate_export_path", "(", "self", ".", "fake_data_path_pickle", ",", "self", ".", "pickle_p_export_filename", ")", "\n", "self", ".", "assertTrue", "(", "os", ".", "path", ".", "isfile", "(", "export_path", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.test_parse.ParseTests.test_integration_logging": [[88, 116], ["unittest.skipIf", "test_parse.ParseTests.assertEqual", "deepparse.cli.generate_export_path", "test_parse.ParseTests.assertEqual", "test_parse.ParseTests._caplog.at_level", "tests.tools.create_pickle_file", "deepparse.cli.parse.main", "os.path.exists", "os.path.join", "os.path.expanduser"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.tools.generate_export_path", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.tests.tools.create_pickle_file", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.models_evaluation.evaluate_model.main"], ["", "@", "skipIf", "(", "\n", "not", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "expanduser", "(", "\"~\"", ")", ",", "\".cache\"", ",", "\"deepparse\"", ",", "\"cc.fr.300.bin\"", ")", ")", ",", "\n", "\"download of model too long for test in runner\"", ",", "\n", ")", "\n", "def", "test_integration_logging", "(", "self", ")", ":", "\n", "        ", "with", "self", ".", "_caplog", ".", "at_level", "(", "logging", ".", "INFO", ")", ":", "\n", "            ", "create_pickle_file", "(", "self", ".", "fake_data_path_pickle", ",", "predict_container", "=", "True", ")", "\n", "parse", ".", "main", "(", "\n", "[", "\n", "self", ".", "a_fasttext_model_type", ",", "\n", "self", ".", "fake_data_path_pickle", ",", "\n", "self", ".", "pickle_p_export_filename", ",", "\n", "\"--device\"", ",", "\n", "self", ".", "cpu_device", ",", "\n", "]", "\n", ")", "\n", "", "expected_first_message", "=", "(", "\n", "f\"Parsing dataset file {self.fake_data_path_pickle} using the parser \"", "f\"PreTrainedFastTextAddressParser\"", "\n", ")", "\n", "actual_first_message", "=", "self", ".", "_caplog", ".", "records", "[", "0", "]", ".", "message", "\n", "self", ".", "assertEqual", "(", "expected_first_message", ",", "actual_first_message", ")", "\n", "\n", "export_path", "=", "generate_export_path", "(", "self", ".", "fake_data_path_pickle", ",", "\"a_file.p\"", ")", "\n", "expected_second_message", "=", "(", "\n", "f\"4 addresses have been parsed.\\n\"", "f\"The parsed addresses are outputted here: {export_path}\"", "\n", ")", "\n", "actual_second_message", "=", "self", ".", "_caplog", ".", "records", "[", "1", "]", ".", "message", "\n", "self", ".", "assertEqual", "(", "expected_second_message", ",", "actual_second_message", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.test_parse.ParseTests.test_integration_no_logging": [[117, 136], ["unittest.skipIf", "test_parse.ParseTests.assertEqual", "test_parse.ParseTests._caplog.at_level", "tests.tools.create_pickle_file", "deepparse.cli.parse.main", "len", "os.path.exists", "os.path.join", "os.path.expanduser"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.tests.tools.create_pickle_file", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.models_evaluation.evaluate_model.main"], ["", "@", "skipIf", "(", "\n", "not", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "expanduser", "(", "\"~\"", ")", ",", "\".cache\"", ",", "\"deepparse\"", ",", "\"cc.fr.300.bin\"", ")", ")", ",", "\n", "\"download of model too long for test in runner\"", ",", "\n", ")", "\n", "def", "test_integration_no_logging", "(", "self", ")", ":", "\n", "        ", "with", "self", ".", "_caplog", ".", "at_level", "(", "logging", ".", "INFO", ")", ":", "\n", "            ", "create_pickle_file", "(", "self", ".", "fake_data_path_pickle", ",", "predict_container", "=", "True", ")", "\n", "parse", ".", "main", "(", "\n", "[", "\n", "self", ".", "a_fasttext_model_type", ",", "\n", "self", ".", "fake_data_path_pickle", ",", "\n", "self", ".", "pickle_p_export_filename", ",", "\n", "\"--device\"", ",", "\n", "self", ".", "cpu_device", ",", "\n", "\"--log\"", ",", "\n", "\"False\"", ",", "\n", "]", "\n", ")", "\n", "", "self", ".", "assertEqual", "(", "0", ",", "len", "(", "self", ".", "_caplog", ".", "records", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.test_parse.ParseTests.test_integration_attention_model": [[137, 153], ["unittest.skipIf", "tests.tools.create_pickle_file", "deepparse.cli.parse.main", "deepparse.cli.generate_export_path", "test_parse.ParseTests.assertTrue", "os.path.isfile", "torch.cuda.is_available"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.tests.tools.create_pickle_file", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.models_evaluation.evaluate_model.main", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.tools.generate_export_path"], ["", "@", "skipIf", "(", "not", "torch", ".", "cuda", ".", "is_available", "(", ")", ",", "\"no gpu available\"", ")", "\n", "def", "test_integration_attention_model", "(", "self", ")", ":", "\n", "        ", "create_pickle_file", "(", "self", ".", "fake_data_path_pickle", ",", "predict_container", "=", "True", ")", "\n", "\n", "parse", ".", "main", "(", "\n", "[", "\n", "self", ".", "a_fasttext_att_model_type", ",", "\n", "self", ".", "fake_data_path_pickle", ",", "\n", "self", ".", "pickle_p_export_filename", ",", "\n", "\"--device\"", ",", "\n", "self", ".", "cpu_device", ",", "\n", "]", "\n", ")", "\n", "\n", "export_path", "=", "generate_export_path", "(", "self", ".", "fake_data_path_pickle", ",", "self", ".", "pickle_p_export_filename", ")", "\n", "self", ".", "assertTrue", "(", "os", ".", "path", ".", "isfile", "(", "export_path", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.test_parse.ParseTests.test_integration_json": [[154, 173], ["unittest.skipIf", "tests.tools.create_pickle_file", "deepparse.cli.parse.main", "deepparse.cli.generate_export_path", "test_parse.ParseTests.assertTrue", "os.path.isfile", "os.path.exists", "os.path.join", "os.path.expanduser"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.tests.tools.create_pickle_file", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.models_evaluation.evaluate_model.main", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.tools.generate_export_path"], ["", "@", "skipIf", "(", "\n", "not", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "expanduser", "(", "\"~\"", ")", ",", "\".cache\"", ",", "\"deepparse\"", ",", "\"cc.fr.300.bin\"", ")", ")", ",", "\n", "\"download of model too long for test in runner\"", ",", "\n", ")", "\n", "def", "test_integration_json", "(", "self", ")", ":", "\n", "        ", "create_pickle_file", "(", "self", ".", "fake_data_path_pickle", ",", "predict_container", "=", "True", ")", "\n", "\n", "parse", ".", "main", "(", "\n", "[", "\n", "self", ".", "a_fasttext_att_model_type", ",", "\n", "self", ".", "fake_data_path_pickle", ",", "\n", "self", ".", "json_export_filename", ",", "\n", "\"--device\"", ",", "\n", "self", ".", "cpu_device", ",", "\n", "]", "\n", ")", "\n", "\n", "export_path", "=", "generate_export_path", "(", "self", ".", "fake_data_path_pickle", ",", "self", ".", "json_export_filename", ")", "\n", "self", ".", "assertTrue", "(", "os", ".", "path", ".", "isfile", "(", "export_path", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.test_parse.ParseTests.test_integration_csv": [[174, 195], ["unittest.skipIf", "tests.tools.create_csv_file", "deepparse.cli.parse.main", "deepparse.cli.generate_export_path", "test_parse.ParseTests.assertTrue", "os.path.isfile", "os.path.exists", "os.path.join", "os.path.expanduser"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.tests.tools.create_csv_file", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.models_evaluation.evaluate_model.main", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.tools.generate_export_path"], ["", "@", "skipIf", "(", "\n", "not", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "expanduser", "(", "\"~\"", ")", ",", "\".cache\"", ",", "\"deepparse\"", ",", "\"cc.fr.300.bin\"", ")", ")", ",", "\n", "\"download of model too long for test in runner\"", ",", "\n", ")", "\n", "def", "test_integration_csv", "(", "self", ")", ":", "\n", "        ", "create_csv_file", "(", "self", ".", "fake_data_path_csv", ",", "predict_container", "=", "True", ")", "\n", "\n", "parse", ".", "main", "(", "\n", "[", "\n", "self", ".", "a_fasttext_att_model_type", ",", "\n", "self", ".", "fake_data_path_csv", ",", "\n", "self", ".", "csv_export_filename", ",", "\n", "\"--device\"", ",", "\n", "self", ".", "cpu_device", ",", "\n", "\"--csv_column_name\"", ",", "\n", "\"Address\"", ",", "\n", "]", "\n", ")", "\n", "\n", "export_path", "=", "generate_export_path", "(", "self", ".", "fake_data_path_csv", ",", "self", ".", "csv_export_filename", ")", "\n", "self", ".", "assertTrue", "(", "os", ".", "path", ".", "isfile", "(", "export_path", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.test_parse.ParseTests.test_integration_csv_separator": [[196, 220], ["unittest.skipIf", "tests.tools.create_csv_file", "deepparse.cli.parse.main", "deepparse.cli.generate_export_path", "test_parse.ParseTests.assertTrue", "os.path.isfile", "os.path.exists", "os.path.join", "os.path.expanduser"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.tests.tools.create_csv_file", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.models_evaluation.evaluate_model.main", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.tools.generate_export_path"], ["", "@", "skipIf", "(", "\n", "not", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "expanduser", "(", "\"~\"", ")", ",", "\".cache\"", ",", "\"deepparse\"", ",", "\"cc.fr.300.bin\"", ")", ")", ",", "\n", "\"download of model too long for test in runner\"", ",", "\n", ")", "\n", "def", "test_integration_csv_separator", "(", "self", ")", ":", "\n", "        ", "sep", "=", "\";\"", "\n", "create_csv_file", "(", "self", ".", "fake_data_path_csv", ",", "predict_container", "=", "True", ",", "separator", "=", "sep", ")", "\n", "\n", "parse", ".", "main", "(", "\n", "[", "\n", "self", ".", "a_fasttext_model_type", ",", "\n", "self", ".", "fake_data_path_csv", ",", "\n", "self", ".", "csv_export_filename", ",", "\n", "\"--device\"", ",", "\n", "self", ".", "cpu_device", ",", "\n", "\"--csv_column_name\"", ",", "\n", "\"Address\"", ",", "\n", "\"--csv_column_separator\"", ",", "\n", "sep", ",", "\n", "]", "\n", ")", "\n", "\n", "export_path", "=", "generate_export_path", "(", "self", ".", "fake_data_path_pickle", ",", "self", ".", "csv_export_filename", ")", "\n", "self", ".", "assertTrue", "(", "os", ".", "path", ".", "isfile", "(", "export_path", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.test_parse.ParseTests.test_ifIsCSVFile_noColumnName_raiseValueError": [[221, 236], ["unittest.skipIf", "tests.tools.create_csv_file", "test_parse.ParseTests.assertRaises", "deepparse.cli.parse.main", "os.path.exists", "os.path.join", "os.path.expanduser"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.tests.tools.create_csv_file", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.models_evaluation.evaluate_model.main"], ["", "@", "skipIf", "(", "\n", "not", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "expanduser", "(", "\"~\"", ")", ",", "\".cache\"", ",", "\"deepparse\"", ",", "\"cc.fr.300.bin\"", ")", ")", ",", "\n", "\"download of model too long for test in runner\"", ",", "\n", ")", "\n", "def", "test_ifIsCSVFile_noColumnName_raiseValueError", "(", "self", ")", ":", "\n", "        ", "create_csv_file", "(", "self", ".", "fake_data_path_csv", ",", "predict_container", "=", "True", ")", "\n", "\n", "with", "self", ".", "assertRaises", "(", "ValueError", ")", ":", "\n", "            ", "parse", ".", "main", "(", "\n", "[", "\n", "self", ".", "a_fasttext_model_type", ",", "\n", "self", ".", "fake_data_path_csv", ",", "\n", "self", ".", "csv_export_filename", ",", "\n", "\"--device\"", ",", "\n", "self", ".", "cpu_device", ",", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.test_parse.ParseTests.test_ifIsNotSupportedFile_raiseValueError": [[239, 254], ["unittest.skipIf", "tests.tools.create_csv_file", "test_parse.ParseTests.assertRaises", "deepparse.cli.parse.main", "os.path.exists", "os.path.join", "os.path.expanduser"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.tests.tools.create_csv_file", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.models_evaluation.evaluate_model.main"], ["", "", "@", "skipIf", "(", "\n", "not", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "expanduser", "(", "\"~\"", ")", ",", "\".cache\"", ",", "\"deepparse\"", ",", "\"cc.fr.300.bin\"", ")", ")", ",", "\n", "\"download of model too long for test in runner\"", ",", "\n", ")", "\n", "def", "test_ifIsNotSupportedFile_raiseValueError", "(", "self", ")", ":", "\n", "        ", "create_csv_file", "(", "self", ".", "fake_data_path_csv", ",", "predict_container", "=", "True", ")", "\n", "\n", "with", "self", ".", "assertRaises", "(", "ValueError", ")", ":", "\n", "            ", "parse", ".", "main", "(", "\n", "[", "\n", "self", ".", "a_fasttext_model_type", ",", "\n", "self", ".", "a_unsupported_data_path", ",", "\n", "self", ".", "csv_export_filename", ",", "\n", "\"--device\"", ",", "\n", "self", ".", "cpu_device", ",", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.test_parse.ParseTests.test_ifIsNotSupportedExportFile_raiseValueError": [[257, 272], ["unittest.skipIf", "tests.tools.create_csv_file", "test_parse.ParseTests.assertRaises", "deepparse.cli.parse.main", "os.path.exists", "os.path.join", "os.path.expanduser"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.tests.tools.create_csv_file", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.models_evaluation.evaluate_model.main"], ["", "", "@", "skipIf", "(", "\n", "not", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "expanduser", "(", "\"~\"", ")", ",", "\".cache\"", ",", "\"deepparse\"", ",", "\"cc.fr.300.bin\"", ")", ")", ",", "\n", "\"download of model too long for test in runner\"", ",", "\n", ")", "\n", "def", "test_ifIsNotSupportedExportFile_raiseValueError", "(", "self", ")", ":", "\n", "        ", "create_csv_file", "(", "self", ".", "fake_data_path_csv", ",", "predict_container", "=", "True", ")", "\n", "\n", "with", "self", ".", "assertRaises", "(", "ValueError", ")", ":", "\n", "            ", "parse", ".", "main", "(", "\n", "[", "\n", "self", ".", "a_fasttext_model_type", ",", "\n", "self", ".", "fake_data_path_csv", ",", "\n", "self", ".", "a_unsupported_data_path", ",", "\n", "\"--device\"", ",", "\n", "self", ".", "cpu_device", ",", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.test_parse.ParseTests.test_ifPathToFakeRetrainModel_thenUseFakeRetrainModel": [[275, 302], ["unittest.skipIf", "test_parse.ParseTests.assertEqual", "test_parse.ParseTests._caplog.at_level", "os.path.join", "tests.tools.create_pickle_file", "deepparse.cli.parse.main", "os.path.exists", "os.path.expanduser", "os.path.join", "os.path.expanduser"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.tests.tools.create_pickle_file", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.models_evaluation.evaluate_model.main"], ["", "", "@", "skipIf", "(", "\n", "not", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "expanduser", "(", "\"~\"", ")", ",", "\".cache\"", ",", "\"deepparse\"", ",", "\"cc.fr.300.bin\"", ")", ")", ",", "\n", "\"download of model too long for test in runner\"", ",", "\n", ")", "\n", "def", "test_ifPathToFakeRetrainModel_thenUseFakeRetrainModel", "(", "self", ")", ":", "\n", "        ", "with", "self", ".", "_caplog", ".", "at_level", "(", "logging", ".", "INFO", ")", ":", "\n", "# We use the default path to fasttext model as a \"retrain model path\"", "\n", "            ", "path_to_retrained_model", "=", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "expanduser", "(", "\"~\"", ")", ",", "\".cache\"", ",", "\"deepparse\"", ",", "\"fasttext.ckpt\"", ")", "\n", "create_pickle_file", "(", "self", ".", "fake_data_path_pickle", ",", "predict_container", "=", "True", ")", "\n", "\n", "parse", ".", "main", "(", "\n", "[", "\n", "self", ".", "a_fasttext_model_type", ",", "\n", "self", ".", "fake_data_path_pickle", ",", "\n", "self", ".", "pickle_p_export_filename", ",", "\n", "\"--device\"", ",", "\n", "self", ".", "cpu_device", ",", "\n", "\"--path_to_retrained_model\"", ",", "\n", "path_to_retrained_model", ",", "\n", "]", "\n", ")", "\n", "\n", "", "expected_first_message", "=", "(", "\n", "f\"Parsing dataset file {self.fake_data_path_pickle} using the parser \"", "f\"PreTrainedFastTextAddressParser\"", "\n", ")", "\n", "actual_first_message", "=", "self", ".", "_caplog", ".", "records", "[", "0", "]", ".", "message", "\n", "self", ".", "assertEqual", "(", "expected_first_message", ",", "actual_first_message", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.test_parse.ParseTests.test_ifPathToFastTextRetrainModel_thenUseFastTextRetrainModel": [[303, 329], ["unittest.skipIf", "test_parse.ParseTests.assertEqual", "test_parse.ParseTests._caplog.at_level", "tests.tools.create_pickle_file", "deepparse.cli.parse.main", "os.path.exists", "os.path.join", "os.path.expanduser"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.tests.tools.create_pickle_file", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.models_evaluation.evaluate_model.main"], ["", "@", "skipIf", "(", "\n", "not", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "expanduser", "(", "\"~\"", ")", ",", "\".cache\"", ",", "\"deepparse\"", ",", "\"cc.fr.300.bin\"", ")", ")", ",", "\n", "\"download of model too long for test in runner\"", ",", "\n", ")", "\n", "def", "test_ifPathToFastTextRetrainModel_thenUseFastTextRetrainModel", "(", "self", ")", ":", "\n", "        ", "with", "self", ".", "_caplog", ".", "at_level", "(", "logging", ".", "INFO", ")", ":", "\n", "            ", "path_to_retrained_model", "=", "self", ".", "path_to_retrain_fasttext", "\n", "create_pickle_file", "(", "self", ".", "fake_data_path_pickle", ",", "predict_container", "=", "True", ")", "\n", "\n", "parse", ".", "main", "(", "\n", "[", "\n", "self", ".", "a_fasttext_model_type", ",", "\n", "self", ".", "fake_data_path_pickle", ",", "\n", "self", ".", "pickle_p_export_filename", ",", "\n", "\"--device\"", ",", "\n", "self", ".", "cpu_device", ",", "\n", "\"--path_to_retrained_model\"", ",", "\n", "path_to_retrained_model", ",", "\n", "]", "\n", ")", "\n", "\n", "", "expected_first_message", "=", "(", "\n", "f\"Parsing dataset file {self.fake_data_path_pickle} using the parser \"", "f\"PreTrainedFastTextAddressParser\"", "\n", ")", "\n", "actual_first_message", "=", "self", ".", "_caplog", ".", "records", "[", "0", "]", ".", "message", "\n", "self", ".", "assertEqual", "(", "expected_first_message", ",", "actual_first_message", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.test_parse.ParseTests.test_ifPathToBPEmbRetrainModel_thenUseBPEmbRetrainModel": [[330, 355], ["unittest.skipIf", "test_parse.ParseTests.assertEqual", "test_parse.ParseTests._caplog.at_level", "tests.tools.create_pickle_file", "deepparse.cli.parse.main", "os.path.exists", "os.path.join", "os.path.expanduser"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.tests.tools.create_pickle_file", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.models_evaluation.evaluate_model.main"], ["", "@", "skipIf", "(", "\n", "not", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "expanduser", "(", "\"~\"", ")", ",", "\".cache\"", ",", "\"deepparse\"", ",", "\"cc.fr.300.bin\"", ")", ")", ",", "\n", "\"download of model too long for test in runner\"", ",", "\n", ")", "\n", "def", "test_ifPathToBPEmbRetrainModel_thenUseBPEmbRetrainModel", "(", "self", ")", ":", "\n", "        ", "with", "self", ".", "_caplog", ".", "at_level", "(", "logging", ".", "INFO", ")", ":", "\n", "            ", "create_pickle_file", "(", "self", ".", "fake_data_path_pickle", ",", "predict_container", "=", "True", ")", "\n", "\n", "parse", ".", "main", "(", "\n", "[", "\n", "self", ".", "a_bpemb_model_type", ",", "\n", "self", ".", "fake_data_path_pickle", ",", "\n", "self", ".", "pickle_p_export_filename", ",", "\n", "\"--device\"", ",", "\n", "self", ".", "cpu_device", ",", "\n", "]", "\n", ")", "\n", "\n", "", "expected_first_message", "=", "(", "\n", "f\"Parsing dataset file {self.fake_data_path_pickle} using the parser \"", "f\"PreTrainedBPEmbAddressParser\"", "\n", ")", "\n", "\n", "# Not the same position as with fasttext due to BPEmb messages", "\n", "actual_first_message", "=", "self", ".", "_caplog", ".", "records", "[", "2", "]", ".", "message", "\n", "self", ".", "assertEqual", "(", "expected_first_message", ",", "actual_first_message", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.test_tools.ToolsTest.setUp": [[28, 32], ["tempfile.TemporaryDirectory", "os.path.join"], "methods", ["None"], ["        ", "self", ".", "temp_dir_obj", "=", "TemporaryDirectory", "(", ")", "\n", "self", ".", "fake_cache_path", "=", "self", ".", "temp_dir_obj", ".", "name", "\n", "self", ".", "a_file_extension", "=", "\"version\"", "\n", "self", ".", "latest_fasttext_version", "=", "\"b4f098bb8909b1c8a8d24eea07df3435\"", "\n", "self", ".", "latest_bpemb_version", "=", "\"ac0dc019748b6853dca412add7234203\"", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.test_tools.ToolsTest.tearDown": [[33, 35], ["test_tools.ToolsTest.temp_dir_obj.cleanup"], "methods", ["None"], ["self", ".", "a_seed", "=", "42", "\n", "self", ".", "verbose", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.test_tools.ToolsTest.test_givenCSVPath_whenCSVPath_returnTrue": [[36, 48], ["test_tools.ToolsTest.assertTrue", "test_tools.ToolsTest.assertTrue", "test_tools.ToolsTest.assertTrue", "deepparse.cli.is_csv_path", "deepparse.cli.is_csv_path", "deepparse.cli.is_csv_path"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.tools.is_csv_path", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.tools.is_csv_path", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.tools.is_csv_path"], ["self", ".", "a_model_type_checkpoint", "=", "\"a_fake_model_type\"", "\n", "self", ".", "a_fasttext_model_type_checkpoint", "=", "\"fasttext\"", "\n", "self", ".", "a_bpemb_model_type_checkpoint", "=", "\"bpemb\"", "\n", "\n", "", "def", "tearDown", "(", "self", ")", "->", "None", ":", "\n", "        ", "self", ".", "temp_dir_obj", ".", "cleanup", "(", ")", "\n", "\n", "", "def", "create_cache_version", "(", "self", ",", "model_name", ",", "content", ")", ":", "\n", "        ", "version_file_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "fake_cache_path", ",", "model_name", "+", "\".version\"", ")", "\n", "create_file", "(", "version_file_path", ",", "content", ")", "\n", "\n", "", "def", "test_givenAFasttextLatestVersion_whenVerifyIfLastVersion_thenReturnTrue", "(", "self", ")", ":", "\n", "        ", "self", ".", "create_cache_version", "(", "\"fasttext\"", ",", "self", ".", "latest_fasttext_version", ")", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.test_tools.ToolsTest.test_givenNotACSVPath_whenCSVPath_returnFalse": [[49, 69], ["test_tools.ToolsTest.assertFalse", "test_tools.ToolsTest.assertFalse", "test_tools.ToolsTest.assertFalse", "test_tools.ToolsTest.assertFalse", "test_tools.ToolsTest.assertFalse", "deepparse.cli.is_csv_path", "deepparse.cli.is_csv_path", "deepparse.cli.is_csv_path", "deepparse.cli.is_csv_path", "deepparse.cli.is_csv_path"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.tools.is_csv_path", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.tools.is_csv_path", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.tools.is_csv_path", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.tools.is_csv_path", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.tools.is_csv_path"], ["self", ".", "assertTrue", "(", "latest_version", "(", "\"fasttext\"", ",", "self", ".", "fake_cache_path", ")", ")", "\n", "\n", "", "def", "test_givenAFasttextNotTheLatestVersion_whenVerifyIfLastVersion_thenReturnFalse", "(", "\n", "self", ",", "\n", ")", ":", "\n", "        ", "self", ".", "create_cache_version", "(", "\"fasttext\"", ",", "\"not_the_last_version\"", ")", "\n", "self", ".", "assertFalse", "(", "latest_version", "(", "\"fasttext\"", ",", "self", ".", "fake_cache_path", ")", ")", "\n", "\n", "", "def", "test_givenABPEmbLatestVersion_whenVerifyIfLastVersion_thenReturnTrue", "(", "self", ")", ":", "\n", "        ", "self", ".", "create_cache_version", "(", "\"bpemb\"", ",", "self", ".", "latest_bpemb_version", ")", "\n", "self", ".", "assertTrue", "(", "latest_version", "(", "\"bpemb\"", ",", "self", ".", "fake_cache_path", ")", ")", "\n", "\n", "", "def", "test_givenABPEmbNotTheLatestVersion_whenVerifyIfLastVersion_thenReturnFalse", "(", "\n", "self", ",", "\n", ")", ":", "\n", "        ", "self", ".", "create_cache_version", "(", "\"bpemb\"", ",", "\"not_the_last_version\"", ")", "\n", "self", ".", "assertFalse", "(", "latest_version", "(", "\"bpemb\"", ",", "self", ".", "fake_cache_path", ")", ")", "\n", "\n", "", "def", "test_givenFasttextVersion_whenDownloadOk_thenDownloadIt", "(", "self", ")", ":", "\n", "        ", "file_name", "=", "\"fasttext\"", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.test_tools.ToolsTest.test_givenPicklePath_whenPicklePath_returnTrue": [[70, 94], ["test_tools.ToolsTest.assertTrue", "test_tools.ToolsTest.assertTrue", "test_tools.ToolsTest.assertTrue", "test_tools.ToolsTest.assertTrue", "test_tools.ToolsTest.assertTrue", "test_tools.ToolsTest.assertTrue", "deepparse.cli.is_pickle_path", "deepparse.cli.is_pickle_path", "deepparse.cli.is_pickle_path", "deepparse.cli.is_pickle_path", "deepparse.cli.is_pickle_path", "deepparse.cli.is_pickle_path"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.tools.is_pickle_path", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.tools.is_pickle_path", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.tools.is_pickle_path", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.tools.is_pickle_path", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.tools.is_pickle_path", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.tools.is_pickle_path"], ["download_from_url", "(", "file_name", ",", "self", ".", "fake_cache_path", ",", "self", ".", "a_file_extension", ")", "\n", "\n", "self", ".", "assertTrue", "(", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "self", ".", "fake_cache_path", ",", "f\"{file_name}.{self.a_file_extension}\"", ")", ")", ")", "\n", "\n", "", "def", "test_givenFasttextVersion_whenDownload404_thenHTTPError", "(", "self", ")", ":", "\n", "        ", "wrong_file_name", "=", "\"wrong_fasttext\"", "\n", "\n", "with", "self", ".", "assertRaises", "(", "requests", ".", "exceptions", ".", "HTTPError", ")", ":", "\n", "            ", "download_from_url", "(", "wrong_file_name", ",", "self", ".", "fake_cache_path", ",", "self", ".", "a_file_extension", ")", "\n", "\n", "", "", "def", "test_givenBPEmbVersion_whenDownloadOk_thenDownloadIt", "(", "self", ")", ":", "\n", "        ", "file_name", "=", "\"bpemb\"", "\n", "\n", "download_from_url", "(", "file_name", ",", "self", ".", "fake_cache_path", ",", "self", ".", "a_file_extension", ")", "\n", "\n", "self", ".", "assertTrue", "(", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "self", ".", "fake_cache_path", ",", "f\"{file_name}.{self.a_file_extension}\"", ")", ")", ")", "\n", "\n", "", "def", "test_givenBPEmbVersion_whenDownload404_thenHTTPError", "(", "self", ")", ":", "\n", "        ", "wrong_file_name", "=", "\"wrong_bpemb\"", "\n", "\n", "with", "self", ".", "assertRaises", "(", "requests", ".", "exceptions", ".", "HTTPError", ")", ":", "\n", "            ", "download_from_url", "(", "wrong_file_name", ",", "self", ".", "fake_cache_path", ",", "self", ".", "a_file_extension", ")", "\n", "\n", "", "", "def", "test_givenModelWeightsToDownload_whenDownloadOk_thenWeightsAreDownloaded", "(", "self", ")", ":", "\n", "        ", "with", "patch", "(", "\"deepparse.tools.download_from_url\"", ")", "as", "downloader", ":", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.test_tools.ToolsTest.test_givenNotAPicklePath_whenPicklePath_returnFalse": [[95, 115], ["test_tools.ToolsTest.assertFalse", "test_tools.ToolsTest.assertFalse", "test_tools.ToolsTest.assertFalse", "test_tools.ToolsTest.assertFalse", "test_tools.ToolsTest.assertFalse", "deepparse.cli.is_pickle_path", "deepparse.cli.is_pickle_path", "deepparse.cli.is_pickle_path", "deepparse.cli.is_pickle_path", "deepparse.cli.is_pickle_path"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.tools.is_pickle_path", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.tools.is_pickle_path", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.tools.is_pickle_path", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.tools.is_pickle_path", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.tools.is_pickle_path"], ["            ", "download_weights", "(", "model", "=", "\"fasttext\"", ",", "saving_dir", "=", "\"./\"", ",", "verbose", "=", "self", ".", "verbose", ")", "\n", "\n", "downloader", ".", "assert_any_call", "(", "\"fasttext\"", ",", "\"./\"", ",", "\"ckpt\"", ")", "\n", "downloader", ".", "assert_any_call", "(", "\"fasttext\"", ",", "\"./\"", ",", "\"version\"", ")", "\n", "\n", "", "with", "patch", "(", "\"deepparse.tools.download_from_url\"", ")", "as", "downloader", ":", "\n", "            ", "download_weights", "(", "model", "=", "\"bpemb\"", ",", "saving_dir", "=", "\"./\"", ",", "verbose", "=", "self", ".", "verbose", ")", "\n", "\n", "downloader", ".", "assert_any_call", "(", "\"bpemb\"", ",", "\"./\"", ",", "\"ckpt\"", ")", "\n", "downloader", ".", "assert_any_call", "(", "\"bpemb\"", ",", "\"./\"", ",", "\"version\"", ")", "\n", "\n", "", "", "def", "test_givenModelFasttextWeightsToDownloadVerbose_whenDownloadOk_thenVerbose", "(", "\n", "self", ",", "\n", ")", ":", "\n", "        ", "self", ".", "_capture_output", "(", ")", "\n", "with", "patch", "(", "\"deepparse.tools.download_from_url\"", ")", ":", "\n", "            ", "download_weights", "(", "model", "=", "\"fasttext\"", ",", "saving_dir", "=", "\"./\"", ",", "verbose", "=", "True", ")", "\n", "\n", "", "actual", "=", "self", ".", "test_out", ".", "getvalue", "(", ")", ".", "strip", "(", ")", "\n", "expected", "=", "\"Downloading the weights for the network fasttext.\"", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.test_tools.ToolsTest.test_givenJSONPath_whenJSONPath_returnTrue": [[116, 128], ["test_tools.ToolsTest.assertTrue", "test_tools.ToolsTest.assertTrue", "test_tools.ToolsTest.assertTrue", "deepparse.cli.is_json_path", "deepparse.cli.is_json_path", "deepparse.cli.is_json_path"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.tools.is_json_path", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.tools.is_json_path", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.tools.is_json_path"], ["self", ".", "assertEqual", "(", "actual", ",", "expected", ")", "\n", "\n", "", "def", "test_givenModelBPEmbWeightsToDownloadVerbose_whenDownloadOk_thenVerbose", "(", "self", ")", ":", "\n", "        ", "self", ".", "_capture_output", "(", ")", "\n", "with", "patch", "(", "\"deepparse.tools.download_from_url\"", ")", ":", "\n", "            ", "download_weights", "(", "model", "=", "\"bpemb\"", ",", "saving_dir", "=", "\"./\"", ",", "verbose", "=", "True", ")", "\n", "\n", "", "actual", "=", "self", ".", "test_out", ".", "getvalue", "(", ")", ".", "strip", "(", ")", "\n", "expected", "=", "\"Downloading the weights for the network bpemb.\"", "\n", "\n", "self", ".", "assertEqual", "(", "actual", ",", "expected", ")", "\n", "\n", "", "@", "patch", "(", "\"os.path.isfile\"", ")", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.test_tools.ToolsTest.test_givenNotAJSONPath_whenJSONPath_returnFalse": [[129, 149], ["test_tools.ToolsTest.assertFalse", "test_tools.ToolsTest.assertFalse", "test_tools.ToolsTest.assertFalse", "test_tools.ToolsTest.assertFalse", "test_tools.ToolsTest.assertFalse", "deepparse.cli.is_json_path", "deepparse.cli.is_json_path", "deepparse.cli.is_json_path", "deepparse.cli.is_json_path", "deepparse.cli.is_json_path"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.tools.is_json_path", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.tools.is_json_path", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.tools.is_json_path", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.tools.is_json_path", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.tools.is_json_path"], ["@", "patch", "(", "\"deepparse.tools.latest_version\"", ")", "\n", "def", "test_givenAFasttextCheckpoint_whenHandleCheckpoint_thenReturnCachedFasttextPath", "(", "\n", "self", ",", "latest_version_check", ",", "isfile_mock", "\n", ")", ":", "\n", "        ", "isfile_mock", ".", "return_value", "=", "True", "\n", "checkpoint", "=", "\"fasttext\"", "\n", "\n", "actual", "=", "handle_model_path", "(", "checkpoint", ")", "\n", "expected", "=", "os", ".", "path", ".", "join", "(", "CACHE_PATH", ",", "checkpoint", "+", "\".ckpt\"", ")", "\n", "\n", "self", ".", "assertEqual", "(", "actual", ",", "expected", ")", "\n", "\n", "", "@", "patch", "(", "\"os.path.isfile\"", ")", "\n", "@", "patch", "(", "\"deepparse.tools.latest_version\"", ")", "\n", "def", "test_givenABPEmbCheckpoint_whenHandleCheckpoint_thenReturnCachedBPEmbPath", "(", "\n", "self", ",", "latest_version_check", ",", "isfile_mock", "\n", ")", ":", "\n", "        ", "isfile_mock", ".", "return_value", "=", "True", "\n", "checkpoint", "=", "\"bpemb\"", "\n", "\n", "actual", "=", "handle_model_path", "(", "checkpoint", ")", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.test_tools.ToolsTest.test_integration_list_formatted_addresses_to_csv": [[150, 167], ["deepparse.cli.to_csv", "pandas.read_csv", "test_tools.ToolsTest.assertEqual", "test_tools.ToolsTest.assertEqual", "deepparse.parser.FormattedParsedAddress", "deepparse.parser.FormattedParsedAddress"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.tools.to_csv"], ["expected", "=", "os", ".", "path", ".", "join", "(", "CACHE_PATH", ",", "checkpoint", "+", "\".ckpt\"", ")", "\n", "\n", "self", ".", "assertEqual", "(", "actual", ",", "expected", ")", "\n", "\n", "", "def", "test_givenAStringCheckpoint_whenHandleCheckpoint_thenReturnSamePath", "(", "self", ")", ":", "\n", "        ", "pickle_checkpoint", "=", "\"/a/path/to/a/model.ckpt\"", "\n", "\n", "actual", "=", "handle_model_path", "(", "pickle_checkpoint", ")", "\n", "expected", "=", "pickle_checkpoint", "\n", "\n", "self", ".", "assertEqual", "(", "actual", ",", "expected", ")", "\n", "\n", "", "def", "test_givenBadNamesCheckpoint_whenHandleCheckpoint_thenRaiseErrors", "(", "self", ")", ":", "\n", "        ", "with", "self", ".", "assertRaises", "(", "ValueError", ")", ":", "\n", "            ", "bad_best_checkpoint", "=", "\"bests\"", "\n", "handle_model_path", "(", "bad_best_checkpoint", ")", "\n", "\n", "", "with", "self", ".", "assertRaises", "(", "ValueError", ")", ":", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.test_tools.ToolsTest.test_integration_formatted_address_to_csv": [[168, 181], ["deepparse.parser.FormattedParsedAddress", "deepparse.cli.to_csv", "pandas.read_csv", "test_tools.ToolsTest.assertEqual"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.tools.to_csv"], ["            ", "bad_last_checkpoint", "=", "\"lasts\"", "\n", "handle_model_path", "(", "bad_last_checkpoint", ")", "\n", "\n", "", "with", "self", ".", "assertRaises", "(", "ValueError", ")", ":", "\n", "            ", "string_int_bad_checkpoint", "=", "\"1\"", "\n", "handle_model_path", "(", "string_int_bad_checkpoint", ")", "\n", "\n", "", "with", "self", ".", "assertRaises", "(", "ValueError", ")", ":", "\n", "            ", "bad_fasttext_checkpoint", "=", "\"fasttexts\"", "\n", "handle_model_path", "(", "bad_fasttext_checkpoint", ")", "\n", "\n", "", "with", "self", ".", "assertRaises", "(", "ValueError", ")", ":", "\n", "            ", "bad_bpemb_checkpoint", "=", "\"bpembds\"", "\n", "handle_model_path", "(", "bad_bpemb_checkpoint", ")", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.test_tools.ToolsTest.test_integration_list_formatted_addresses_to_pickle": [[182, 200], ["deepparse.cli.to_pickle", "test_tools.ToolsTest.assertEqual", "test_tools.ToolsTest.assertEqual", "deepparse.parser.FormattedParsedAddress", "deepparse.parser.FormattedParsedAddress", "open", "pickle.load"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.tools.to_pickle"], ["\n", "", "with", "self", ".", "assertRaises", "(", "ValueError", ")", ":", "\n", "            ", "bad_pickle_extension_checkpoint", "=", "\"/a/path/to/a/model.pck\"", "\n", "handle_model_path", "(", "bad_pickle_extension_checkpoint", ")", "\n", "\n", "", "", "@", "patch", "(", "\"deepparse.tools.poutyne\"", ")", "\n", "def", "test_givenPoutyneVersionLowerThan12_givenHandlePreTrainedCheckpoint_thenRaiseError", "(", "self", ",", "poutyne_mock", ")", ":", "\n", "        ", "poutyne_mock", ".", "version", ".", "__version__", "=", "\"1.1\"", "\n", "\n", "with", "self", ".", "assertRaises", "(", "NotImplementedError", ")", ":", "\n", "            ", "handle_pre_trained_checkpoint", "(", "self", ".", "a_model_type_checkpoint", ")", "\n", "\n", "", "", "@", "patch", "(", "\"os.path.isfile\"", ")", "\n", "@", "patch", "(", "\"deepparse.tools.latest_version\"", ")", "\n", "@", "patch", "(", "\"deepparse.tools.poutyne\"", ")", "\n", "def", "test_givenPoutyneVersionGreaterThan12_givenHandlePreTrainedCheckpointFasttext_thenReturnFasttext", "(", "\n", "self", ",", "poutyne_mock", ",", "latest_version_mock", ",", "isfile_mock", "\n", ")", ":", "\n", "        ", "poutyne_mock", ".", "version", ".", "__version__", "=", "\"1.2\"", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.test_tools.ToolsTest.test_integration_formatted_address_to_pickle": [[201, 215], ["deepparse.parser.FormattedParsedAddress", "deepparse.cli.to_pickle", "test_tools.ToolsTest.assertEqual", "open", "pickle.load"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.tools.to_pickle"], ["isfile_mock", ".", "return_value", "=", "True", "\n", "\n", "actual", "=", "handle_pre_trained_checkpoint", "(", "self", ".", "a_fasttext_model_type_checkpoint", ")", "\n", "expected", "=", "os", ".", "path", ".", "join", "(", "CACHE_PATH", ",", "f\"{self.a_fasttext_model_type_checkpoint}.ckpt\"", ")", "\n", "self", ".", "assertEqual", "(", "expected", ",", "actual", ")", "\n", "\n", "", "@", "patch", "(", "\"os.path.isfile\"", ")", "\n", "@", "patch", "(", "\"deepparse.tools.latest_version\"", ")", "\n", "@", "patch", "(", "\"deepparse.tools.poutyne\"", ")", "\n", "def", "test_givenPoutyneVersionGreaterThan12_givenHandlePreTrainedCheckpointFasttextNoLocalFile_thenReturnFasttext", "(", "\n", "self", ",", "poutyne_mock", ",", "latest_version_mock", ",", "isfile_mock", "\n", ")", ":", "\n", "        ", "poutyne_mock", ".", "version", ".", "__version__", "=", "\"1.2\"", "\n", "isfile_mock", ".", "return_value", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.test_tools.ToolsTest.test_integration_list_formatted_addresses_to_json": [[216, 235], ["deepparse.cli.to_json", "test_tools.ToolsTest.assertIsInstance", "test_tools.ToolsTest.assertEqual", "test_tools.ToolsTest.assertEqual", "deepparse.parser.FormattedParsedAddress", "deepparse.parser.FormattedParsedAddress", "open", "json.load", "parsed_data[].get", "parsed_data[].get"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.tools.to_json"], ["with", "patch", "(", "\"deepparse.tools.download_weights\"", ")", ":", "\n", "            ", "actual", "=", "handle_pre_trained_checkpoint", "(", "self", ".", "a_fasttext_model_type_checkpoint", ")", "\n", "", "expected", "=", "os", ".", "path", ".", "join", "(", "CACHE_PATH", ",", "f\"{self.a_fasttext_model_type_checkpoint}.ckpt\"", ")", "\n", "self", ".", "assertEqual", "(", "expected", ",", "actual", ")", "\n", "\n", "", "@", "patch", "(", "\"os.path.isfile\"", ")", "\n", "@", "patch", "(", "\"deepparse.tools.latest_version\"", ")", "\n", "@", "patch", "(", "\"deepparse.tools.poutyne\"", ")", "\n", "def", "test_givenPoutyneVersionGreaterThan12_givenHandlePreTrainedCheckpointBPEmb_thenReturnBPEmb", "(", "\n", "self", ",", "poutyne_mock", ",", "latest_version_mock", ",", "isfile_mock", "\n", ")", ":", "\n", "        ", "poutyne_mock", ".", "version", ".", "__version__", "=", "\"1.2\"", "\n", "isfile_mock", ".", "return_value", "=", "True", "\n", "\n", "actual", "=", "handle_pre_trained_checkpoint", "(", "self", ".", "a_bpemb_model_type_checkpoint", ")", "\n", "expected", "=", "os", ".", "path", ".", "join", "(", "CACHE_PATH", ",", "f\"{self.a_bpemb_model_type_checkpoint}.ckpt\"", ")", "\n", "self", ".", "assertEqual", "(", "expected", ",", "actual", ")", "\n", "\n", "", "@", "patch", "(", "\"os.path.isfile\"", ")", "\n", "@", "patch", "(", "\"deepparse.tools.latest_version\"", ")", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.test_tools.ToolsTest.test_integration_formatted_address_to_json": [[236, 251], ["deepparse.parser.FormattedParsedAddress", "deepparse.cli.to_json", "test_tools.ToolsTest.assertIsInstance", "test_tools.ToolsTest.assertEqual", "open", "json.load", "parsed_data[].get"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.tools.to_json"], ["@", "patch", "(", "\"deepparse.tools.poutyne\"", ")", "\n", "def", "test_givenPoutyneVersionGreaterThan12_givenHandlePreTrainedCheckpointBPEmbNoLocalFile_thenReturnBPEmb", "(", "\n", "self", ",", "poutyne_mock", ",", "latest_version_mock", ",", "isfile_mock", "\n", ")", ":", "\n", "        ", "poutyne_mock", ".", "version", ".", "__version__", "=", "\"1.2\"", "\n", "isfile_mock", ".", "return_value", "=", "False", "\n", "\n", "with", "patch", "(", "\"deepparse.tools.download_weights\"", ")", ":", "\n", "            ", "actual", "=", "handle_pre_trained_checkpoint", "(", "self", ".", "a_fasttext_model_type_checkpoint", ")", "\n", "", "expected", "=", "os", ".", "path", ".", "join", "(", "CACHE_PATH", ",", "f\"{self.a_fasttext_model_type_checkpoint}.ckpt\"", ")", "\n", "self", ".", "assertEqual", "(", "expected", ",", "actual", ")", "\n", "\n", "", "@", "patch", "(", "\"os.path.isfile\"", ")", "\n", "@", "patch", "(", "\"deepparse.tools.latest_version\"", ")", "\n", "@", "patch", "(", "\"deepparse.tools.poutyne\"", ")", "\n", "def", "test_givenPoutyneVersionGreaterThan12_givenHandlePreTrainedCheckpointFasttextNotLatestVersion_thenRaiseWarning", "(", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.test_tools.ToolsTest.test_generate_export_path_export_proper_path": [[252, 264], ["os.path.join", "deepparse.cli.generate_export_path", "os.path.join", "test_tools.ToolsTest.assertEqual", "os.path.join", "deepparse.cli.generate_export_path", "os.path.join", "test_tools.ToolsTest.assertEqual"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.tools.generate_export_path", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.tools.generate_export_path"], ["self", ",", "poutyne_mock", ",", "latest_version_mock", ",", "isfile_mock", "\n", ")", ":", "\n", "        ", "isfile_mock", ".", "return_value", "=", "True", "\n", "latest_version_mock", ".", "return_value", "=", "False", "# Not the latest version", "\n", "poutyne_mock", ".", "version", ".", "__version__", "=", "\"1.2\"", "\n", "\n", "with", "self", ".", "assertWarns", "(", "UserWarning", ")", ":", "\n", "            ", "handle_pre_trained_checkpoint", "(", "self", ".", "a_bpemb_model_type_checkpoint", ")", "\n", "\n", "", "", "@", "patch", "(", "\"os.path.isfile\"", ")", "\n", "@", "patch", "(", "\"deepparse.tools.latest_version\"", ")", "\n", "@", "patch", "(", "\"deepparse.tools.poutyne\"", ")", "\n", "def", "test_givenPoutyneVersionGreaterThan12_givenHandlePreTrainedCheckpointBPEmbNotLatestVersion_thenRaiseWarning", "(", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.test_tools.ToolsTest.test_replace_path_extension": [[265, 283], ["os.path.join", "deepparse.cli.replace_path_extension", "os.path.join.replace", "test_tools.ToolsTest.assertEqual", "os.path.join", "deepparse.cli.replace_path_extension", "os.path.join.replace", "test_tools.ToolsTest.assertEqual", "os.path.join", "deepparse.cli.replace_path_extension", "os.path.join.replace", "test_tools.ToolsTest.assertEqual"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.tools.replace_path_extension", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.tools.replace_path_extension", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.tools.replace_path_extension"], ["self", ",", "poutyne_mock", ",", "latest_version_mock", ",", "isfile_mock", "\n", ")", ":", "\n", "        ", "isfile_mock", ".", "return_value", "=", "True", "\n", "latest_version_mock", ".", "return_value", "=", "False", "# Not the latest version", "\n", "poutyne_mock", ".", "version", ".", "__version__", "=", "\"1.2\"", "\n", "\n", "with", "self", ".", "assertWarns", "(", "UserWarning", ")", ":", "\n", "            ", "handle_pre_trained_checkpoint", "(", "self", ".", "a_bpemb_model_type_checkpoint", ")", "\n", "\n", "", "", "@", "patch", "(", "\"deepparse.tools.poutyne\"", ")", "\n", "def", "test_givenPoutyneVersion1_1_1_givenHandlePoutyneVersion_thenReturnVersion1_1", "(", "self", ",", "poutyne_mock", ")", ":", "\n", "        ", "poutyne_mock", ".", "version", ".", "__version__", "=", "\"1.1.1\"", "\n", "\n", "actual", "=", "handle_poutyne_version", "(", ")", "\n", "expected", "=", "\"1.1\"", "\n", "self", ".", "assertEqual", "(", "expected", ",", "actual", ")", "\n", "\n", "", "@", "patch", "(", "\"deepparse.tools.poutyne\"", ")", "\n", "def", "test_givenPoutyneVersion1_1_1_1_givenHandlePoutyneVersion_thenReturnVersion1_1", "(", "self", ",", "poutyne_mock", ")", ":", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.test_tools.ToolsTest.test_givenAnAttModel_whenHandlingAttentionModelType_returnTrue": [[284, 292], ["deepparse.cli.attention_model_type_handling", "test_tools.ToolsTest.assertTrue", "deepparse.cli.attention_model_type_handling", "test_tools.ToolsTest.assertTrue", "deepparse.cli.attention_model_type_handling.get", "deepparse.cli.attention_model_type_handling.get"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.tools.attention_model_type_handling", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.tools.attention_model_type_handling"], ["        ", "poutyne_mock", ".", "version", ".", "__version__", "=", "\"1.1.1.1\"", "\n", "\n", "actual", "=", "handle_poutyne_version", "(", ")", "\n", "expected", "=", "\"1.1\"", "\n", "self", ".", "assertEqual", "(", "expected", ",", "actual", ")", "\n", "\n", "", "@", "patch", "(", "\"deepparse.tools.poutyne\"", ")", "\n", "def", "test_givenPoutyneVersion1_1_dev_givenHandlePoutyneVersion_thenReturnVersion1_1", "(", "self", ",", "poutyne_mock", ")", ":", "\n", "        ", "poutyne_mock", ".", "version", ".", "__version__", "=", "\"1.1.dev1+81b3c7b\"", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.test_tools.ToolsTest.test_givenNotAnAttModel_whenHandlingAttentionModelType_returnFalse": [[293, 301], ["deepparse.cli.attention_model_type_handling", "test_tools.ToolsTest.assertFalse", "deepparse.cli.attention_model_type_handling", "test_tools.ToolsTest.assertFalse", "deepparse.cli.attention_model_type_handling.get", "deepparse.cli.attention_model_type_handling.get"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.tools.attention_model_type_handling", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.tools.attention_model_type_handling"], ["\n", "actual", "=", "handle_poutyne_version", "(", ")", "\n", "expected", "=", "\"1.1\"", "\n", "self", ".", "assertEqual", "(", "expected", ",", "actual", ")", "\n", "\n", "", "@", "patch", "(", "\"deepparse.tools.poutyne\"", ")", "\n", "def", "test_givenPoutyneVersion1_1_1_dev_givenHandlePoutyneVersion_thenReturnVersion1_1", "(", "self", ",", "poutyne_mock", ")", ":", "\n", "        ", "poutyne_mock", ".", "version", ".", "__version__", "=", "\"1.1.dev1+81b3c7b\"", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.test_tools.ToolsTest.test_givenVariousTrueArgValue_whenCallBoolParse_thenReturnTrue": [[302, 307], ["test_tools.ToolsTest.assertTrue", "deepparse.cli.bool_parse"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.tools.bool_parse"], ["actual", "=", "handle_poutyne_version", "(", ")", "\n", "expected", "=", "\"1.1\"", "\n", "self", ".", "assertEqual", "(", "expected", ",", "actual", ")", "\n", "\n", "", "@", "patch", "(", "\"deepparse.tools.poutyne\"", ")", "\n", "def", "test_givenPoutyneVersion1_2_givenHandlePoutyneVersion_thenReturnVersion1_2", "(", "self", ",", "poutyne_mock", ")", ":", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.test_tools.ToolsTest.test_givenVariousFalseArgValue_whenCallBoolParse_thenReturnFalse": [[308, 313], ["test_tools.ToolsTest.assertFalse", "deepparse.cli.bool_parse"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.tools.bool_parse"], ["        ", "poutyne_mock", ".", "version", ".", "__version__", "=", "\"1.2\"", "\n", "\n", "actual", "=", "handle_poutyne_version", "(", ")", "\n", "expected", "=", "\"1.2\"", "\n", "self", ".", "assertEqual", "(", "expected", ",", "actual", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.test_tools.ToolsTest.test_givenNotVariousTrueOrFalseValue_whenCallBoolParse_thenRaiseError": [[314, 320], ["test_tools.ToolsTest.assertRaises", "deepparse.cli.bool_parse"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.tools.bool_parse"], ["", "@", "patch", "(", "\"deepparse.tools.poutyne\"", ")", "\n", "def", "test_givenPoutyneVersion1_2_givenValidPoutyneVersion_thenReturnTrue", "(", "self", ",", "poutyne_mock", ")", ":", "\n", "        ", "poutyne_mock", ".", "version", ".", "__version__", "=", "\"1.2\"", "\n", "\n", "actual", "=", "valid_poutyne_version", "(", ")", "\n", "self", ".", "assertTrue", "(", "actual", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.test_retrain.RetrainTests.setUpClass": [[17, 31], ["super().setUpClass"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_seq2seq_fasttext_model_gpu.FastTextSeq2SeqIntegrationTest.setUpClass"], ["    ", "@", "classmethod", "\n", "def", "setUpClass", "(", "cls", ")", ":", "\n", "        ", "super", "(", "RetrainTests", ",", "cls", ")", ".", "setUpClass", "(", ")", "\n", "\n", "cls", ".", "a_fasttext_model_type", "=", "\"fasttext\"", "\n", "cls", ".", "a_fasttext_att_model_type", "=", "\"fasttext-attention\"", "\n", "cls", ".", "a_fasttext_light_model_type", "=", "\"fasttext-light\"", "\n", "cls", ".", "a_bpemb_model_type", "=", "\"bpemb\"", "\n", "cls", ".", "a_bpemb_att_model_type", "=", "\"bpemd-attention\"", "\n", "\n", "cls", ".", "cpu_device", "=", "\"cpu\"", "\n", "cls", ".", "gpu_device", "=", "\"0\"", "\n", "\n", "cls", ".", "a_named_model", "=", "\"a_retrained_model\"", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.test_retrain.RetrainTests.setUp": [[32, 46], ["tempfile.TemporaryDirectory", "os.path.join", "os.path.join"], "methods", ["None"], ["", "def", "setUp", "(", "self", ")", "->", "None", ":", "\n", "        ", "self", ".", "temp_checkpoints_obj", "=", "TemporaryDirectory", "(", ")", "\n", "\n", "self", ".", "export_named_retrain_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "temp_checkpoints_obj", ".", "name", ",", "self", ".", "a_named_model", "+", "\".ckpt\"", ")", "\n", "\n", "# We use the default checkpoints logging path but redirect it into the", "\n", "# temp directory", "\n", "self", ".", "logging_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "temp_checkpoints_obj", ".", "name", ",", "\"checkpoints\"", ")", "\n", "\n", "# We set a set of defaults parser argument to adjust it for the tests", "\n", "# We change the default logging path to the one created as a temp", "\n", "# directory for cleanup, and we reduce the number of epoch tho reduce", "\n", "# test duration.", "\n", "self", ".", "parser_test_default_settings", "=", "[", "\"--logging_path\"", ",", "self", ".", "logging_path", ",", "\"--epochs\"", ",", "\"1\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.test_retrain.RetrainTests.tearDown": [[47, 49], ["test_retrain.RetrainTests.temp_checkpoints_obj.cleanup"], "methods", ["None"], ["", "def", "tearDown", "(", "self", ")", "->", "None", ":", "\n", "        ", "self", ".", "temp_checkpoints_obj", ".", "cleanup", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.test_retrain.RetrainTests.set_up_params": [[50, 88], ["None"], "methods", ["None"], ["", "def", "set_up_params", "(", "\n", "self", ",", "\n", "train_ratio", "=", "\"0.8\"", ",", "\n", "batch_size", "=", "\"32\"", ",", "\n", "epochs", "=", "\"5\"", ",", "\n", "num_workers", "=", "\"1\"", ",", "\n", "learning_rate", "=", "\"0.01\"", ",", "\n", "seed", "=", "\"42\"", ",", "\n", "logging_path", "=", "\"./checkpoints\"", ",", "\n", "disable_tensorboard", "=", "\"False\"", ",", "\n", "layers_to_freeze", "=", "'seq2seq'", ",", "\n", "name_of_the_retrain_parser", "=", "\"\"", ",", "\n", ")", "->", "List", ":", "\n", "        ", "parser_params", "=", "[", "\n", "self", ".", "a_fasttext_model_type", ",", "\n", "self", ".", "a_train_pickle_dataset_path", ",", "\n", "\"--train_ratio\"", ",", "\n", "train_ratio", ",", "\n", "\"--batch_size\"", ",", "\n", "batch_size", ",", "\n", "\"--epochs\"", ",", "\n", "epochs", ",", "\n", "\"--num_workers\"", ",", "\n", "num_workers", ",", "\n", "\"--learning_rate\"", ",", "\n", "learning_rate", ",", "\n", "\"--seed\"", ",", "\n", "seed", ",", "\n", "\"--logging_path\"", ",", "\n", "logging_path", ",", "\n", "\"--disable_tensorboard\"", ",", "\n", "disable_tensorboard", ",", "\n", "\"--layers_to_freeze\"", ",", "\n", "layers_to_freeze", ",", "\n", "\"--name_of_the_retrain_parser\"", ",", "\n", "name_of_the_retrain_parser", ",", "\n", "]", "\n", "return", "parser_params", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.test_retrain.RetrainTests.test_integration_cpu": [[89, 106], ["unittest.skipIf", "parser_params.extend", "deepparse.cli.retrain.main", "test_retrain.RetrainTests.assertTrue", "os.path.isfile", "os.path.exists", "os.path.join", "os.path.join", "os.path.expanduser"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.models_evaluation.evaluate_model.main"], ["", "@", "skipIf", "(", "\n", "not", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "expanduser", "(", "\"~\"", ")", ",", "\".cache\"", ",", "\"deepparse\"", ",", "\"cc.fr.300.bin\"", ")", ")", ",", "\n", "\"download of model too long for test in runner\"", ",", "\n", ")", "\n", "def", "test_integration_cpu", "(", "self", ")", ":", "\n", "        ", "parser_params", "=", "[", "\n", "self", ".", "a_fasttext_model_type", ",", "\n", "self", ".", "a_train_pickle_dataset_path", ",", "\n", "\"--device\"", ",", "\n", "self", ".", "cpu_device", ",", "\n", "]", "\n", "parser_params", ".", "extend", "(", "self", ".", "parser_test_default_settings", ")", "\n", "retrain", ".", "main", "(", "parser_params", ")", "\n", "\n", "self", ".", "assertTrue", "(", "\n", "os", ".", "path", ".", "isfile", "(", "\n", "os", ".", "path", ".", "join", "(", "self", ".", "temp_checkpoints_obj", ".", "name", ",", "\"checkpoints\"", ",", "\"retrained_fasttext_address_parser.ckpt\"", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.test_retrain.RetrainTests.test_integration_gpu": [[109, 124], ["unittest.skipIf", "parser_params.extend", "deepparse.cli.retrain.main", "test_retrain.RetrainTests.assertTrue", "os.path.isfile", "torch.cuda.is_available", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.models_evaluation.evaluate_model.main"], ["", "@", "skipIf", "(", "not", "torch", ".", "cuda", ".", "is_available", "(", ")", ",", "\"no gpu available\"", ")", "\n", "def", "test_integration_gpu", "(", "self", ")", ":", "\n", "        ", "parser_params", "=", "[", "\n", "self", ".", "a_fasttext_model_type", ",", "\n", "self", ".", "a_train_pickle_dataset_path", ",", "\n", "\"--device\"", ",", "\n", "self", ".", "gpu_device", ",", "\n", "]", "\n", "\n", "parser_params", ".", "extend", "(", "self", ".", "parser_test_default_settings", ")", "\n", "retrain", ".", "main", "(", "parser_params", ")", "\n", "\n", "self", ".", "assertTrue", "(", "\n", "os", ".", "path", ".", "isfile", "(", "\n", "os", ".", "path", ".", "join", "(", "self", ".", "temp_checkpoints_obj", ".", "name", ",", "\"checkpoints\"", ",", "\"retrained_fasttext_address_parser.ckpt\"", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.test_retrain.RetrainTests.test_integration_attention_model": [[127, 143], ["unittest.skipIf", "parser_params.extend", "deepparse.cli.retrain.main", "test_retrain.RetrainTests.assertTrue", "os.path.isfile", "torch.cuda.is_available", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.models_evaluation.evaluate_model.main"], ["", "@", "skipIf", "(", "not", "torch", ".", "cuda", ".", "is_available", "(", ")", ",", "\"no gpu available\"", ")", "\n", "def", "test_integration_attention_model", "(", "self", ")", ":", "\n", "        ", "parser_params", "=", "[", "\n", "self", ".", "a_fasttext_att_model_type", ",", "\n", "self", ".", "a_train_pickle_dataset_path", ",", "\n", "\"--device\"", ",", "\n", "self", ".", "cpu_device", ",", "\n", "]", "\n", "\n", "parser_params", ".", "extend", "(", "self", ".", "parser_test_default_settings", ")", "\n", "retrain", ".", "main", "(", "parser_params", ")", "\n", "\n", "self", ".", "assertTrue", "(", "\n", "os", ".", "path", ".", "isfile", "(", "\n", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "temp_checkpoints_obj", ".", "name", ",", "\"checkpoints\"", ",", "\"retrained_fasttext_attention_address_parser.ckpt\"", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.test_retrain.RetrainTests.test_integration_csv": [[147, 170], ["unittest.skipIf", "parser_params.extend", "deepparse.cli.retrain.main", "test_retrain.RetrainTests.assertTrue", "os.path.isfile", "os.path.exists", "os.path.join", "os.path.join", "os.path.expanduser"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.models_evaluation.evaluate_model.main"], ["", "@", "skipIf", "(", "\n", "not", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "expanduser", "(", "\"~\"", ")", ",", "\".cache\"", ",", "\"deepparse\"", ",", "\"cc.fr.300.bin\"", ")", ")", ",", "\n", "\"download of model too long for test in runner\"", ",", "\n", ")", "\n", "def", "test_integration_csv", "(", "self", ")", ":", "\n", "        ", "parser_params", "=", "[", "\n", "self", ".", "a_fasttext_model_type", ",", "\n", "self", ".", "a_train_csv_dataset_path", ",", "\n", "\"--device\"", ",", "\n", "self", ".", "cpu_device", ",", "\n", "\"--csv_column_names\"", ",", "\n", "\"Address\"", ",", "\n", "\"Tags\"", ",", "\n", "\"--csv_column_separator\"", ",", "# Our dataset use a comma as separator", "\n", "\",\"", ",", "\n", "]", "\n", "\n", "parser_params", ".", "extend", "(", "self", ".", "parser_test_default_settings", ")", "\n", "retrain", ".", "main", "(", "parser_params", ")", "\n", "\n", "self", ".", "assertTrue", "(", "\n", "os", ".", "path", ".", "isfile", "(", "\n", "os", ".", "path", ".", "join", "(", "self", ".", "temp_checkpoints_obj", ".", "name", ",", "\"checkpoints\"", ",", "\"retrained_fasttext_address_parser.ckpt\"", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.test_retrain.RetrainTests.test_ifIsCSVFile_noColumnName_raiseValueError": [[173, 188], ["unittest.skipIf", "test_retrain.RetrainTests.assertRaises", "parser_params.extend", "deepparse.cli.retrain.main", "os.path.exists", "os.path.join", "os.path.expanduser"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.models_evaluation.evaluate_model.main"], ["", "@", "skipIf", "(", "\n", "not", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "expanduser", "(", "\"~\"", ")", ",", "\".cache\"", ",", "\"deepparse\"", ",", "\"cc.fr.300.bin\"", ")", ")", ",", "\n", "\"download of model too long for test in runner\"", ",", "\n", ")", "\n", "def", "test_ifIsCSVFile_noColumnName_raiseValueError", "(", "self", ")", ":", "\n", "        ", "with", "self", ".", "assertRaises", "(", "ValueError", ")", ":", "\n", "            ", "parser_params", "=", "[", "\n", "self", ".", "a_fasttext_model_type", ",", "\n", "self", ".", "a_train_csv_dataset_path", ",", "\n", "\"--device\"", ",", "\n", "self", ".", "cpu_device", ",", "\n", "]", "\n", "\n", "parser_params", ".", "extend", "(", "self", ".", "parser_test_default_settings", ")", "\n", "retrain", ".", "main", "(", "parser_params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.test_retrain.RetrainTests.test_ifIsNotSupportedFile_raiseValueError": [[189, 204], ["unittest.skipIf", "test_retrain.RetrainTests.assertRaises", "parser_params.extend", "deepparse.cli.retrain.main", "os.path.exists", "os.path.join", "os.path.expanduser"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.models_evaluation.evaluate_model.main"], ["", "", "@", "skipIf", "(", "\n", "not", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "expanduser", "(", "\"~\"", ")", ",", "\".cache\"", ",", "\"deepparse\"", ",", "\"cc.fr.300.bin\"", ")", ")", ",", "\n", "\"download of model too long for test in runner\"", ",", "\n", ")", "\n", "def", "test_ifIsNotSupportedFile_raiseValueError", "(", "self", ")", ":", "\n", "        ", "with", "self", ".", "assertRaises", "(", "ValueError", ")", ":", "\n", "            ", "parser_params", "=", "[", "\n", "self", ".", "a_fasttext_model_type", ",", "\n", "\"an_unsupported_extension.json\"", ",", "\n", "\"--device\"", ",", "\n", "self", ".", "cpu_device", ",", "\n", "]", "\n", "\n", "parser_params", ".", "extend", "(", "self", ".", "parser_test_default_settings", ")", "\n", "retrain", ".", "main", "(", "parser_params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.test_retrain.RetrainTests.test_givenSetOfParams_whenParseTrainingParams_thenReturnProperParams": [[205, 254], ["test_retrain.RetrainTests.set_up_params", "deepparse.cli.retrain.get_args", "deepparse.cli.retrain.parse_retrained_arguments", "deepparse.cli.retrain.parse_retrained_arguments.items", "test_retrain.RetrainTests.set_up_params", "deepparse.cli.retrain.get_args", "deepparse.cli.retrain.parse_retrained_arguments", "deepparse.cli.retrain.parse_retrained_arguments.items", "test_retrain.RetrainTests.set_up_params", "deepparse.cli.retrain.get_args", "deepparse.cli.retrain.parse_retrained_arguments", "deepparse.cli.retrain.parse_retrained_arguments.items", "float", "int", "int", "int", "bool", "test_retrain.RetrainTests.assertTrue", "test_retrain.RetrainTests.assertTrue", "test_retrain.RetrainTests.assertTrue"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.test_retrain.RetrainTests.set_up_params", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.retrain.get_args", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.retrain.parse_retrained_arguments", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.test_retrain.RetrainTests.set_up_params", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.retrain.get_args", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.retrain.parse_retrained_arguments", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.test_retrain.RetrainTests.set_up_params", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.retrain.get_args", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.retrain.parse_retrained_arguments"], ["", "", "def", "test_givenSetOfParams_whenParseTrainingParams_thenReturnProperParams", "(", "self", ")", ":", "\n", "        ", "override_keys", "=", "[", "\"train_ratio\"", ",", "\"batch_size\"", "]", "\n", "train_ratio", "=", "\"0.8\"", "\n", "batch_size", "=", "\"64\"", "\n", "override_values", "=", "[", "float", "(", "train_ratio", ")", ",", "int", "(", "batch_size", ")", "]", "\n", "parser_params", "=", "self", ".", "set_up_params", "(", "train_ratio", "=", "train_ratio", ",", "batch_size", "=", "batch_size", ")", "\n", "\n", "parsed_args", "=", "get_args", "(", "parser_params", ")", "\n", "\n", "parse_retrained_args", "=", "parse_retrained_arguments", "(", "parsed_args", ")", "\n", "\n", "for", "key", ",", "value", "in", "parse_retrained_args", ".", "items", "(", ")", ":", "\n", "            ", "if", "key", "in", "override_keys", ":", "\n", "                ", "self", ".", "assertTrue", "(", "value", "in", "override_values", ")", "\n", "\n", "", "", "override_keys", "=", "[", "\"num_workers\"", ",", "\"epochs\"", "]", "\n", "num_workers", "=", "\"2\"", "\n", "epochs", "=", "\"64\"", "\n", "override_values", "=", "[", "int", "(", "num_workers", ")", ",", "int", "(", "epochs", ")", "]", "\n", "parser_params", "=", "self", ".", "set_up_params", "(", "num_workers", "=", "num_workers", ",", "epochs", "=", "epochs", ")", "\n", "\n", "parsed_args", "=", "get_args", "(", "parser_params", ")", "\n", "\n", "parse_retrained_args", "=", "parse_retrained_arguments", "(", "parsed_args", ")", "\n", "\n", "for", "key", ",", "value", "in", "parse_retrained_args", ".", "items", "(", ")", ":", "\n", "            ", "if", "key", "in", "override_keys", ":", "\n", "                ", "self", ".", "assertTrue", "(", "value", "in", "override_values", ")", "\n", "\n", "", "", "override_keys", "=", "[", "\"disable_tensorboard\"", ",", "\"layers_to_freeze\"", ",", "\"name_of_the_retrain_parser\"", ",", "\"logging_path\"", "]", "\n", "disable_tensorboard", "=", "\"True\"", "\n", "layers_to_freeze", "=", "\"encoder\"", "\n", "name_of_the_retrain_parser", "=", "\"AName\"", "\n", "logging_path", "=", "\"APath/\"", "\n", "override_values", "=", "[", "layers_to_freeze", ",", "bool", "(", "disable_tensorboard", ")", ",", "name_of_the_retrain_parser", ",", "logging_path", "]", "\n", "parser_params", "=", "self", ".", "set_up_params", "(", "\n", "layers_to_freeze", "=", "layers_to_freeze", ",", "\n", "disable_tensorboard", "=", "disable_tensorboard", ",", "\n", "name_of_the_retrain_parser", "=", "name_of_the_retrain_parser", ",", "\n", "logging_path", "=", "logging_path", ",", "\n", ")", "\n", "\n", "parsed_args", "=", "get_args", "(", "parser_params", ")", "\n", "\n", "parse_retrained_args", "=", "parse_retrained_arguments", "(", "parsed_args", ")", "\n", "\n", "for", "key", ",", "value", "in", "parse_retrained_args", ".", "items", "(", ")", ":", "\n", "            ", "if", "key", "in", "override_keys", ":", "\n", "                ", "self", ".", "assertTrue", "(", "value", "in", "override_values", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.test_retrain.RetrainTests.test_integration_multiple_retrain_overrides": [[255, 282], ["unittest.skipIf", "test_retrain.RetrainTests.set_up_params", "deepparse.cli.retrain.main", "test_retrain.RetrainTests.assertTrue", "os.path.isfile", "os.path.exists", "os.path.join", "os.path.join", "os.path.expanduser"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.test_retrain.RetrainTests.set_up_params", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.models_evaluation.evaluate_model.main"], ["", "", "", "@", "skipIf", "(", "\n", "not", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "expanduser", "(", "\"~\"", ")", ",", "\".cache\"", ",", "\"deepparse\"", ",", "\"cc.fr.300.bin\"", ")", ")", ",", "\n", "\"download of model too long for test in runner\"", ",", "\n", ")", "\n", "def", "test_integration_multiple_retrain_overrides", "(", "self", ")", ":", "\n", "        ", "train_ratio", "=", "\"0.8\"", "\n", "batch_size", "=", "\"64\"", "\n", "num_workers", "=", "\"2\"", "\n", "epochs", "=", "\"2\"", "\n", "disable_tensorboard", "=", "\"True\"", "\n", "layers_to_freeze", "=", "\"encoder\"", "\n", "name_of_the_retrain_parser", "=", "\"AName\"", "\n", "logging_path", "=", "self", ".", "logging_path", "\n", "\n", "parser_params", "=", "self", ".", "set_up_params", "(", "\n", "train_ratio", "=", "train_ratio", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "num_workers", "=", "num_workers", ",", "\n", "epochs", "=", "epochs", ",", "\n", "layers_to_freeze", "=", "layers_to_freeze", ",", "\n", "disable_tensorboard", "=", "disable_tensorboard", ",", "\n", "name_of_the_retrain_parser", "=", "name_of_the_retrain_parser", ",", "\n", "logging_path", "=", "logging_path", ",", "\n", ")", "\n", "retrain", ".", "main", "(", "parser_params", ")", "\n", "\n", "self", ".", "assertTrue", "(", "os", ".", "path", ".", "isfile", "(", "os", ".", "path", ".", "join", "(", "self", ".", "temp_checkpoints_obj", ".", "name", ",", "\"checkpoints\"", ",", "\"AName.ckpt\"", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.dataset_container.tools.former_python_list": [[6, 23], ["tag.strip", "tags.replace().replace().replace().split", "tags.replace().replace().replace", "tags.replace().replace", "tags.replace"], "function", ["None"], ["import", "requests", "\n", "\n", "from", ".", "data_error", "import", "DataError", "\n", "from", ".", "data_validation", "import", "(", "\n", "validate_if_any_none", ",", "\n", "validate_if_any_whitespace_only", ",", "\n", "validate_if_any_empty", ",", "\n", ")", "\n", "\n", "BASE_URL", "=", "\"https://graal.ift.ulaval.ca/public/deepparse/{}.{}\"", "\n", "CACHE_PATH", "=", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "expanduser", "(", "\"~\"", ")", ",", "\".cache\"", ",", "\"deepparse\"", ")", "\n", "\n", "\n", "def", "latest_version", "(", "model", ":", "str", ",", "cache_path", ":", "str", ")", "->", "bool", ":", "\n", "    ", "\"\"\"\n    Verify if the local model is the latest.\n    \"\"\"", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "cache_path", ",", "model", "+", "\".version\"", ")", ",", "encoding", "=", "\"utf-8\"", ")", "as", "local_model_hash_file", ":", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.dataset_container.tools.validate_column_names": [[25, 39], ["deepparse.data_validation.validate_if_any_empty", "deepparse.data_validation.validate_if_any_whitespace_only"], "function", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.data_validation.data_validation.validate_if_any_empty", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.data_validation.data_validation.validate_if_any_whitespace_only"], ["", "download_from_url", "(", "model", ",", "cache_path", ",", "\"version\"", ")", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "cache_path", ",", "model", "+", "\".version\"", ")", ",", "encoding", "=", "\"utf-8\"", ")", "as", "remote_model_hash_file", ":", "\n", "        ", "remote_model_hash_version", "=", "remote_model_hash_file", ".", "readline", "(", ")", "\n", "", "return", "local_model_hash_version", ".", "strip", "(", ")", "==", "remote_model_hash_version", ".", "strip", "(", ")", "\n", "\n", "\n", "", "def", "download_from_url", "(", "file_name", ":", "str", ",", "saving_dir", ":", "str", ",", "file_extension", ":", "str", ")", ":", "\n", "    ", "\"\"\"\n    Simple function to download the content of a file from a distant repository.\n    The repository URL string is  \u0300`'https://graal.ift.ulaval.ca/public/deepparse/{}.{}'``\n    where the first bracket is the file name and the second is the file extension.\n    \"\"\"", "\n", "url", "=", "BASE_URL", ".", "format", "(", "file_name", ",", "file_extension", ")", "\n", "r", "=", "requests", ".", "get", "(", "url", ",", "timeout", "=", "5", ")", "\n", "r", ".", "raise_for_status", "(", ")", "# Raise exception", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.dataset_container.dataset_container.DatasetContainer.__init__": [[42, 49], ["None"], "methods", ["None"], ["@", "abstractmethod", "\n", "def", "__init__", "(", "self", ",", "is_training_container", ":", "bool", "=", "True", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        Need to be defined by the child class.\n        \"\"\"", "\n", "self", ".", "data", "=", "None", "\n", "self", ".", "is_training_container", "=", "is_training_container", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.dataset_container.dataset_container.DatasetContainer.__len__": [[50, 52], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", "->", "int", ":", "\n", "        ", "return", "len", "(", "self", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.dataset_container.dataset_container.DatasetContainer.__getitem__": [[53, 60], ["isinstance", "idx.indices", "len", "range"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ":", "Union", "[", "int", ",", "slice", "]", ")", ":", "\n", "        ", "if", "isinstance", "(", "idx", ",", "slice", ")", ":", "\n", "            ", "start", ",", "stop", ",", "_", "=", "idx", ".", "indices", "(", "len", "(", "self", ")", ")", "\n", "result", "=", "[", "self", ".", "data", "[", "index", "]", "for", "index", "in", "range", "(", "start", ",", "stop", ")", "]", "\n", "", "else", ":", "\n", "            ", "result", "=", "self", ".", "data", "[", "idx", "]", "\n", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.dataset_container.dataset_container.DatasetContainer.validate_dataset": [[61, 82], ["data_validation.validate_if_any_none", "data_validation.validate_if_any_empty", "data_validation.validate_if_any_whitespace_only", "dataset_container.DatasetContainer._data_is_a_list", "TypeError", "data_error.DataError", "dataset_container.DatasetContainer._training_validation", "data_error.DataError", "data_error.DataError"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.data_validation.data_validation.validate_if_any_none", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.data_validation.data_validation.validate_if_any_empty", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.data_validation.data_validation.validate_if_any_whitespace_only", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.dataset_container.dataset_container.DatasetContainer._data_is_a_list", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.dataset_container.dataset_container.DatasetContainer._training_validation"], ["", "def", "validate_dataset", "(", "self", ")", "->", "None", ":", "\n", "        ", "if", "not", "self", ".", "_data_is_a_list", "(", ")", ":", "\n", "            ", "raise", "TypeError", "(", "\"The dataset is not a list.\"", ")", "\n", "\n", "", "if", "self", ".", "is_training_container", ":", "\n", "            ", "data_to_validate", "=", "[", "data", "[", "0", "]", "for", "data", "in", "self", ".", "data", "]", "\n", "", "else", ":", "\n", "            ", "data_to_validate", "=", "self", ".", "data", "\n", "\n", "", "if", "validate_if_any_none", "(", "string_elements", "=", "data_to_validate", ")", ":", "\n", "            ", "raise", "DataError", "(", "\"Some addresses data points are None value.\"", ")", "\n", "\n", "", "if", "self", ".", "is_training_container", ":", "\n", "# Not done in previous similar if since none test not applied", "\n", "            ", "self", ".", "_training_validation", "(", ")", "\n", "\n", "", "if", "validate_if_any_empty", "(", "string_elements", "=", "data_to_validate", ")", ":", "\n", "            ", "raise", "DataError", "(", "\"Some addresses data points are empty.\"", ")", "\n", "\n", "", "if", "validate_if_any_whitespace_only", "(", "string_elements", "=", "data_to_validate", ")", ":", "\n", "            ", "raise", "DataError", "(", "\"Some addresses only include whitespace thus cannot be parsed.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.dataset_container.dataset_container.DatasetContainer._data_is_a_list": [[83, 85], ["isinstance"], "methods", ["None"], ["", "", "def", "_data_is_a_list", "(", "self", ")", ":", "\n", "        ", "return", "isinstance", "(", "self", ".", "data", ",", "list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.dataset_container.dataset_container.DatasetContainer._training_validation": [[86, 105], ["dataset_container.DatasetContainer._empty_tags", "dataset_container.DatasetContainer._data_is_list_of_tuple", "TypeError", "data_error.DataError", "dataset_container.DatasetContainer._data_tags_is_same_len_then_address", "print", "data_error.DataError", "dataset_container.DatasetContainer._data_tags_not_the_same_len_diff"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.dataset_container.dataset_container.DatasetContainer._empty_tags", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.dataset_container.dataset_container.DatasetContainer._data_is_list_of_tuple", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.dataset_container.dataset_container.DatasetContainer._data_tags_is_same_len_then_address", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.dataset_container.dataset_container.DatasetContainer._data_tags_not_the_same_len_diff"], ["", "def", "_training_validation", "(", "self", ")", ":", "\n", "        ", "if", "not", "self", ".", "_data_is_list_of_tuple", "(", ")", ":", "\n", "            ", "raise", "TypeError", "(", "\n", "\"The pickled dataset data are not in a tuple format. Data\"", "\n", "\"is expected to be a list of tuples where the first element is\"", "\n", "\"the address, and the second is the address tag.\"", "\n", ")", "\n", "\n", "", "if", "self", ".", "_empty_tags", "(", ")", ":", "\n", "            ", "raise", "DataError", "(", "\"Some tags data points are empty.\"", ")", "\n", "\n", "", "if", "not", "self", ".", "_data_tags_is_same_len_then_address", "(", ")", ":", "\n", "            ", "print", "(", "\n", "f\"Some addresses (whitespace-split) and the tags associated with them are not the same len. \"", "\n", "f\"If you are using a CSVDatasetContainer, consider using the tag_seperator_reformat_fn argument.\"", "\n", "f\"Here is the report of those cases where len differ to help you out:\\n\"", "\n", "f\"{self._data_tags_not_the_same_len_diff()}\"", "\n", ")", "\n", "raise", "DataError", "(", "\"Some addresses (whitespace-split) and the tags associated with them are not the same len.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.dataset_container.dataset_container.DatasetContainer._data_is_list_of_tuple": [[106, 111], ["all", "isinstance"], "methods", ["None"], ["", "", "def", "_data_is_list_of_tuple", "(", "self", ")", "->", "bool", ":", "\n", "        ", "\"\"\"\n        Return true if one of the elements in the dataset is not a tuple.\n        \"\"\"", "\n", "return", "all", "(", "isinstance", "(", "data", ",", "tuple", ")", "for", "data", "in", "self", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.dataset_container.dataset_container.DatasetContainer._empty_tags": [[112, 117], ["all", "len"], "methods", ["None"], ["", "def", "_empty_tags", "(", "self", ")", "->", "bool", ":", "\n", "        ", "\"\"\"\n        Return true if one of the tag sets is empty.\n        \"\"\"", "\n", "return", "all", "(", "len", "(", "data", "[", "1", "]", ")", "==", "0", "for", "data", "in", "self", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.dataset_container.dataset_container.DatasetContainer._data_tags_is_same_len_then_address": [[118, 123], ["all", "len", "len", "data[].split"], "methods", ["None"], ["", "def", "_data_tags_is_same_len_then_address", "(", "self", ")", "->", "bool", ":", "\n", "        ", "\"\"\"\n        Return true if all the data tags are the same len as the address split at each whitespace.\n        \"\"\"", "\n", "return", "all", "(", "len", "(", "data", "[", "0", "]", ".", "split", "(", "\" \"", ")", ")", "==", "len", "(", "data", "[", "1", "]", ")", "for", "data", "in", "self", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.dataset_container.dataset_container.DatasetContainer.is_a_train_container": [[124, 126], ["None"], "methods", ["None"], ["", "def", "is_a_train_container", "(", "self", ")", "->", "bool", ":", "\n", "        ", "return", "self", ".", "is_training_container", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.dataset_container.dataset_container.DatasetContainer._data_tags_not_the_same_len_diff": [[127, 137], ["enumerate", "len", "len", "len", "len", "data[].split", "[].split"], "methods", ["None"], ["", "def", "_data_tags_not_the_same_len_diff", "(", "self", ")", "->", "str", ":", "\n", "        ", "diff_indexes", "=", "[", "index", "for", "index", ",", "data", "in", "enumerate", "(", "self", ".", "data", ")", "if", "len", "(", "data", "[", "0", "]", ".", "split", "(", "\" \"", ")", ")", "!=", "len", "(", "data", "[", "1", "]", ")", "]", "\n", "report", "=", "\"\"", "\n", "for", "diff_index", "in", "diff_indexes", ":", "\n", "            ", "report", "+=", "(", "\n", "f\"The data point (with index: {diff_index}: {self.data[diff_index]}\"", "\n", "f\"\\n\\tLen of the address: {len(self.data[diff_index][0].split(' '))}\"", "\n", "f\"\\n\\tLen of the tags: {len(self.data[diff_index][1])}\\n\"", "\n", ")", "\n", "", "return", "report", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.dataset_container.dataset_container.PickleDatasetContainer.__init__": [[170, 183], ["dataset_container.DatasetContainer.__init__", "dataset_container.PickleDatasetContainer.validate_dataset", "open", "pickle.load", "dataset_container.PickleDatasetContainer._test_predict_container_is_list_of_tuple", "data_error.DataError"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.timer.timer.Timer.__init__", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.dataset_container.dataset_container.DatasetContainer.validate_dataset", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.dataset_container.dataset_container.PickleDatasetContainer._test_predict_container_is_list_of_tuple"], ["def", "__init__", "(", "self", ",", "data_path", ":", "str", ",", "is_training_container", ":", "bool", "=", "True", ")", "->", "None", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "is_training_container", "=", "is_training_container", ")", "\n", "with", "open", "(", "data_path", ",", "\"rb\"", ")", "as", "f", ":", "\n", "            ", "self", ".", "data", "=", "load", "(", "f", ")", "\n", "\n", "", "if", "not", "is_training_container", ":", "\n", "            ", "if", "self", ".", "_test_predict_container_is_list_of_tuple", "(", ")", ":", "\n", "                ", "raise", "DataError", "(", "\n", "\"The data is a list of tuple by the dataset container is a predict container. \"", "\n", "\"Predict container should contains only a list of address.\"", "\n", ")", "\n", "\n", "", "", "self", ".", "validate_dataset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.dataset_container.dataset_container.PickleDatasetContainer._test_predict_container_is_list_of_tuple": [[184, 186], ["any", "isinstance"], "methods", ["None"], ["", "def", "_test_predict_container_is_list_of_tuple", "(", "self", ")", "->", "bool", ":", "\n", "        ", "return", "any", "(", "(", "isinstance", "(", "data", ",", "tuple", ")", "for", "data", "in", "self", ".", "data", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.dataset_container.dataset_container.CSVDatasetContainer.__init__": [[231, 278], ["dataset_container.DatasetContainer.__init__", "tools.validate_column_names", "dataset_container.CSVDatasetContainer.validate_dataset", "isinstance", "isinstance", "ValueError", "ValueError", "len", "ValueError", "len", "ValueError", "tag_seperator_reformat_fn", "[].to_numpy", "[].to_numpy", "pandas.read_csv", "pandas.read_csv"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.timer.timer.Timer.__init__", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.dataset_container.tools.validate_column_names", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.dataset_container.dataset_container.DatasetContainer.validate_dataset"], ["def", "__init__", "(", "\n", "self", ",", "\n", "data_path", ":", "str", ",", "\n", "column_names", ":", "Union", "[", "List", ",", "str", "]", ",", "\n", "is_training_container", ":", "bool", "=", "True", ",", "\n", "separator", ":", "str", "=", "\"\\t\"", ",", "\n", "tag_seperator_reformat_fn", ":", "Union", "[", "None", ",", "Callable", "]", "=", "None", ",", "\n", "csv_reader_kwargs", ":", "Union", "[", "None", ",", "Dict", "]", "=", "None", ",", "\n", ")", "->", "None", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "is_training_container", "=", "is_training_container", ")", "\n", "if", "is_training_container", ":", "\n", "            ", "if", "isinstance", "(", "column_names", ",", "str", ")", ":", "\n", "                ", "raise", "ValueError", "(", "\n", "\"When the dataset is a training container, the column names should be a list of\"", "\"column name.\"", "\n", ")", "\n", "", "if", "len", "(", "column_names", ")", "!=", "2", ":", "\n", "                ", "raise", "ValueError", "(", "\"When the dataset is a training container, two column names must be provided.\"", ")", "\n", "", "", "else", ":", "# It means it is a predict container", "\n", "            ", "if", "isinstance", "(", "column_names", ",", "str", ")", ":", "\n", "# We transform the str into a list to assess is len", "\n", "                ", "column_names", "=", "[", "column_names", "]", "\n", "", "if", "len", "(", "column_names", ")", "!=", "1", ":", "\n", "                ", "raise", "ValueError", "(", "\"When the dataset is a predict container, one column name must be provided.\"", ")", "\n", "\n", "", "", "if", "validate_column_names", "(", "column_names", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"A column name is an empty string or whitespace only.\"", ")", "\n", "\n", "", "if", "csv_reader_kwargs", "is", "None", ":", "\n", "            ", "csv_reader_kwargs", "=", "{", "}", "\n", "", "csv_reader_kwargs", "=", "{", "\n", "\"filepath_or_buffer\"", ":", "data_path", ",", "\n", "\"sep\"", ":", "separator", ",", "\n", "\"encoding\"", ":", "\"utf-8\"", ",", "\n", "**", "csv_reader_kwargs", ",", "\n", "}", "\n", "if", "tag_seperator_reformat_fn", "is", "None", ":", "\n", "            ", "tag_seperator_reformat_fn", "=", "former_python_list", "\n", "\n", "", "if", "is_training_container", ":", "\n", "            ", "data", "=", "[", "\n", "(", "data_point", "[", "0", "]", ",", "tag_seperator_reformat_fn", "(", "data_point", "[", "1", "]", ")", ")", "\n", "for", "data_point", "in", "pd", ".", "read_csv", "(", "**", "csv_reader_kwargs", ")", "[", "column_names", "]", ".", "to_numpy", "(", ")", "\n", "]", "\n", "", "else", ":", "\n", "            ", "data", "=", "[", "data_point", "[", "0", "]", "for", "data_point", "in", "pd", ".", "read_csv", "(", "**", "csv_reader_kwargs", ")", "[", "column_names", "]", ".", "to_numpy", "(", ")", "]", "\n", "", "self", ".", "data", "=", "data", "\n", "self", ".", "validate_dataset", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.dataset_container.test_dataset_container.ADatasetContainer.__init__": [[32, 36], ["deepparse.dataset_container.DatasetContainer.__init__", "test_dataset_container.ADatasetContainer.validate_dataset"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.timer.timer.Timer.__init__", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.dataset_container.dataset_container.DatasetContainer.validate_dataset"], ["    ", "def", "__init__", "(", "self", ",", "data", ",", "is_training_container", "=", "True", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "is_training_container", ")", "\n", "self", ".", "data", "=", "data", "\n", "self", ".", "validate_dataset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.dataset_container.test_dataset_container.DatasetContainerTest.test_integration": [[39, 43], ["test_dataset_container.ADatasetContainer", "test_dataset_container.DatasetContainerTest.assertIsNotNone"], "methods", ["None"], ["    ", "def", "test_integration", "(", "self", ")", ":", "\n", "        ", "some_valid_data", "=", "[", "(", "\"An address\"", ",", "[", "1", ",", "0", "]", ")", ",", "(", "\"Another address\"", ",", "[", "2", ",", "0", "]", ")", ",", "(", "\"A last address\"", ",", "[", "3", ",", "4", ",", "0", "]", ")", "]", "\n", "a_dataset_container", "=", "ADatasetContainer", "(", "some_valid_data", ")", "\n", "self", ".", "assertIsNotNone", "(", "a_dataset_container", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.dataset_container.test_dataset_container.DatasetContainerTest.test_integration_predict_container": [[44, 48], ["test_dataset_container.ADatasetContainer", "test_dataset_container.DatasetContainerTest.assertIsNotNone"], "methods", ["None"], ["", "def", "test_integration_predict_container", "(", "self", ")", ":", "\n", "        ", "some_valid_data", "=", "[", "\"An address\"", ",", "\"Another address\"", ",", "\"A last address\"", "]", "\n", "a_dataset_container", "=", "ADatasetContainer", "(", "some_valid_data", ",", "is_training_container", "=", "False", ")", "\n", "self", ".", "assertIsNotNone", "(", "a_dataset_container", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.dataset_container.test_dataset_container.DatasetContainerTest.test_integration_slicing": [[49, 64], ["test_dataset_container.ADatasetContainer", "test_dataset_container.DatasetContainerTest.assertEqual", "test_dataset_container.ADatasetContainer", "test_dataset_container.DatasetContainerTest.assertEqual", "test_dataset_container.ADatasetContainer", "test_dataset_container.DatasetContainerTest.assertEqual", "len", "len", "len"], "methods", ["None"], ["", "def", "test_integration_slicing", "(", "self", ")", ":", "\n", "        ", "some_valid_data", "=", "[", "\"An address\"", ",", "\"Another address\"", ",", "\"A last address\"", "]", "\n", "a_dataset_container", "=", "ADatasetContainer", "(", "some_valid_data", ",", "is_training_container", "=", "False", ")", "\n", "expected", "=", "2", "\n", "self", ".", "assertEqual", "(", "len", "(", "a_dataset_container", "[", "0", ":", "2", "]", ")", ",", "expected", ")", "\n", "\n", "some_valid_data", "=", "[", "\"An address\"", ",", "\"Another address\"", ",", "\"A last address\"", "]", "\n", "a_dataset_container", "=", "ADatasetContainer", "(", "some_valid_data", ",", "is_training_container", "=", "False", ")", "\n", "expected", "=", "2", "\n", "self", ".", "assertEqual", "(", "len", "(", "a_dataset_container", "[", ":", "2", "]", ")", ",", "expected", ")", "\n", "\n", "some_valid_data", "=", "[", "\"An address\"", ",", "\"Another address\"", ",", "\"A last address\"", "]", "\n", "a_dataset_container", "=", "ADatasetContainer", "(", "some_valid_data", ",", "is_training_container", "=", "False", ")", "\n", "expected", "=", "1", "\n", "self", ".", "assertEqual", "(", "len", "(", "a_dataset_container", "[", "1", ":", "2", "]", ")", ",", "expected", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.dataset_container.test_dataset_container.DatasetContainerTest.test_when_not_list_of_tuple_then_raise_type_error": [[65, 77], ["test_dataset_container.DatasetContainerTest.assertRaises", "test_dataset_container.ADatasetContainer", "test_dataset_container.DatasetContainerTest.assertRaises", "test_dataset_container.ADatasetContainer", "test_dataset_container.DatasetContainerTest.assertRaises", "test_dataset_container.ADatasetContainer"], "methods", ["None"], ["", "def", "test_when_not_list_of_tuple_then_raise_type_error", "(", "self", ")", ":", "\n", "        ", "some_invalid_data", "=", "[", "1", ",", "0", "]", "\n", "with", "self", ".", "assertRaises", "(", "TypeError", ")", ":", "\n", "            ", "ADatasetContainer", "(", "some_invalid_data", ")", "\n", "\n", "", "some_invalid_data", "=", "\"An address\"", "\n", "with", "self", ".", "assertRaises", "(", "TypeError", ")", ":", "\n", "            ", "ADatasetContainer", "(", "some_invalid_data", ")", "\n", "\n", "", "some_invalid_data", "=", "{", "\"An address\"", ":", "[", "1", ",", "0", "]", "}", "\n", "with", "self", ".", "assertRaises", "(", "TypeError", ")", ":", "\n", "            ", "ADatasetContainer", "(", "some_invalid_data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.dataset_container.test_dataset_container.DatasetContainerTest.test_when_data_is_not_a_list_then_raise_type_error": [[78, 82], ["test_dataset_container.DatasetContainerTest.assertRaises", "test_dataset_container.ADatasetContainer"], "methods", ["None"], ["", "", "def", "test_when_data_is_not_a_list_then_raise_type_error", "(", "self", ")", ":", "\n", "        ", "some_invalid_data", "=", "(", "\"An address\"", ",", "[", "1", ",", "0", "]", ")", "\n", "with", "self", ".", "assertRaises", "(", "TypeError", ")", ":", "\n", "            ", "ADatasetContainer", "(", "some_invalid_data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.dataset_container.test_dataset_container.DatasetContainerTest.test_when_none_then_raise_data_error": [[83, 87], ["test_dataset_container.DatasetContainerTest.assertRaises", "test_dataset_container.ADatasetContainer"], "methods", ["None"], ["", "", "def", "test_when_none_then_raise_data_error", "(", "self", ")", ":", "\n", "        ", "some_invalid_data", "=", "[", "(", "\"An address\"", ",", "[", "1", ",", "0", "]", ")", ",", "(", "None", ",", "[", "]", ")", ",", "(", "\"A last address\"", ",", "[", "3", ",", "4", ",", "0", "]", ")", "]", "\n", "with", "self", ".", "assertRaises", "(", "DataError", ")", ":", "\n", "            ", "ADatasetContainer", "(", "some_invalid_data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.dataset_container.test_dataset_container.DatasetContainerTest.test_when_empty_address_then_raise_data_error": [[88, 92], ["test_dataset_container.DatasetContainerTest.assertRaises", "test_dataset_container.ADatasetContainer"], "methods", ["None"], ["", "", "def", "test_when_empty_address_then_raise_data_error", "(", "self", ")", ":", "\n", "        ", "some_invalid_data", "=", "[", "(", "\"An address\"", ",", "[", "1", ",", "0", "]", ")", ",", "(", "\"\"", ",", "[", "]", ")", ",", "(", "\"A last address\"", ",", "[", "3", ",", "4", ",", "0", "]", ")", "]", "\n", "with", "self", ".", "assertRaises", "(", "DataError", ")", ":", "\n", "            ", "ADatasetContainer", "(", "some_invalid_data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.dataset_container.test_dataset_container.DatasetContainerTest.test_when_whitespace_only_address_then_raise_data_error": [[93, 101], ["test_dataset_container.DatasetContainerTest.assertRaises", "test_dataset_container.ADatasetContainer", "test_dataset_container.DatasetContainerTest.assertRaises", "test_dataset_container.ADatasetContainer"], "methods", ["None"], ["", "", "def", "test_when_whitespace_only_address_then_raise_data_error", "(", "self", ")", ":", "\n", "        ", "some_invalid_data", "=", "[", "(", "\"An address\"", ",", "[", "1", ",", "0", "]", ")", ",", "(", "\" \"", ",", "[", "]", ")", ",", "(", "\"A last address\"", ",", "[", "3", ",", "4", ",", "0", "]", ")", "]", "\n", "with", "self", ".", "assertRaises", "(", "DataError", ")", ":", "\n", "            ", "ADatasetContainer", "(", "some_invalid_data", ")", "\n", "\n", "", "some_invalid_data", "=", "[", "(", "\"An address\"", ",", "[", "1", ",", "0", "]", ")", ",", "(", "\"    \"", ",", "[", "]", ")", ",", "(", "\"A last address\"", ",", "[", "3", ",", "4", ",", "0", "]", ")", "]", "\n", "with", "self", ".", "assertRaises", "(", "DataError", ")", ":", "\n", "            ", "ADatasetContainer", "(", "some_invalid_data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.dataset_container.test_dataset_container.DatasetContainerTest.test_when_empty_tags_set_then_raise_data_error": [[102, 106], ["test_dataset_container.DatasetContainerTest.assertRaises", "test_dataset_container.ADatasetContainer"], "methods", ["None"], ["", "", "def", "test_when_empty_tags_set_then_raise_data_error", "(", "self", ")", ":", "\n", "        ", "some_invalid_data", "=", "[", "(", "\"An address\"", ",", "[", "1", ",", "0", "]", ")", ",", "(", "\"another address\"", ",", "[", "]", ")", ",", "(", "\"A last address\"", ",", "[", "3", ",", "4", ",", "0", "]", ")", "]", "\n", "with", "self", ".", "assertRaises", "(", "DataError", ")", ":", "\n", "            ", "ADatasetContainer", "(", "some_invalid_data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.dataset_container.test_dataset_container.DatasetContainerTest.test_when_tags_set_not_same_len_as_address_then_raise_data_error": [[107, 115], ["test_dataset_container.DatasetContainerTest.assertRaises", "test_dataset_container.ADatasetContainer", "test_dataset_container.DatasetContainerTest.assertRaises", "test_dataset_container.ADatasetContainer"], "methods", ["None"], ["", "", "def", "test_when_tags_set_not_same_len_as_address_then_raise_data_error", "(", "self", ")", ":", "\n", "        ", "some_invalid_data", "=", "[", "(", "\"An address\"", ",", "[", "1", ",", "0", "]", ")", ",", "(", "\"another address\"", ",", "[", "1", "]", ")", ",", "(", "\"A last address\"", ",", "[", "3", ",", "4", ",", "0", "]", ")", "]", "\n", "with", "self", ".", "assertRaises", "(", "DataError", ")", ":", "\n", "            ", "ADatasetContainer", "(", "some_invalid_data", ")", "\n", "\n", "", "some_invalid_data", "=", "[", "(", "\"An address\"", ",", "[", "1", ",", "0", "]", ")", ",", "(", "\"another address\"", ",", "[", "1", ",", "2", ",", "4", "]", ")", ",", "(", "\"A last address\"", ",", "[", "3", ",", "4", ",", "0", "]", ")", "]", "\n", "with", "self", ".", "assertRaises", "(", "DataError", ")", ":", "\n", "            ", "ADatasetContainer", "(", "some_invalid_data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.dataset_container.test_dataset_container.DatasetContainerTest.test_when_predict_container_when_data_is_not_a_list_raise_type_error": [[116, 120], ["test_dataset_container.DatasetContainerTest.assertRaises", "test_dataset_container.ADatasetContainer"], "methods", ["None"], ["", "", "def", "test_when_predict_container_when_data_is_not_a_list_raise_type_error", "(", "self", ")", ":", "\n", "        ", "some_invalid_data", "=", "\"An address\"", "\n", "with", "self", ".", "assertRaises", "(", "TypeError", ")", ":", "\n", "            ", "ADatasetContainer", "(", "some_invalid_data", ",", "is_training_container", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.dataset_container.test_dataset_container.DatasetContainerTest.test_when_predict_container_when_data_is_empty_raise_data_error": [[121, 125], ["test_dataset_container.DatasetContainerTest.assertRaises", "test_dataset_container.ADatasetContainer"], "methods", ["None"], ["", "", "def", "test_when_predict_container_when_data_is_empty_raise_data_error", "(", "self", ")", ":", "\n", "        ", "some_invalid_data", "=", "[", "\"\"", "]", "\n", "with", "self", ".", "assertRaises", "(", "DataError", ")", ":", "\n", "            ", "ADatasetContainer", "(", "some_invalid_data", ",", "is_training_container", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.dataset_container.test_dataset_container.DatasetContainerTest.test_when_predict_container_when_data_is_whitespace_only_raise_data_error": [[126, 134], ["test_dataset_container.DatasetContainerTest.assertRaises", "test_dataset_container.ADatasetContainer", "test_dataset_container.DatasetContainerTest.assertRaises", "test_dataset_container.ADatasetContainer"], "methods", ["None"], ["", "", "def", "test_when_predict_container_when_data_is_whitespace_only_raise_data_error", "(", "self", ")", ":", "\n", "        ", "some_invalid_data", "=", "[", "\" \"", "]", "\n", "with", "self", ".", "assertRaises", "(", "DataError", ")", ":", "\n", "            ", "ADatasetContainer", "(", "some_invalid_data", ",", "is_training_container", "=", "False", ")", "\n", "\n", "", "some_invalid_data", "=", "[", "\"    \"", "]", "\n", "with", "self", ".", "assertRaises", "(", "DataError", ")", ":", "\n", "            ", "ADatasetContainer", "(", "some_invalid_data", ",", "is_training_container", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.dataset_container.test_dataset_container.DatasetContainerTest.test_when_training_container_when_is_data_set_container_return_true": [[135, 139], ["test_dataset_container.ADatasetContainer", "test_dataset_container.DatasetContainerTest.assertTrue"], "methods", ["None"], ["", "", "def", "test_when_training_container_when_is_data_set_container_return_true", "(", "self", ")", ":", "\n", "        ", "some_valid_data", "=", "[", "(", "\"An address\"", ",", "[", "1", ",", "0", "]", ")", ",", "(", "\"Another address\"", ",", "[", "2", ",", "0", "]", ")", ",", "(", "\"A last address\"", ",", "[", "3", ",", "4", ",", "0", "]", ")", "]", "\n", "a_dataset_container", "=", "ADatasetContainer", "(", "some_valid_data", ",", "is_training_container", "=", "True", ")", "\n", "self", ".", "assertTrue", "(", "a_dataset_container", ".", "is_training_container", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.dataset_container.test_dataset_container.DatasetContainerTest.test_when_training_container_when_is_data_set_container_return_false": [[140, 144], ["test_dataset_container.ADatasetContainer", "test_dataset_container.DatasetContainerTest.assertFalse"], "methods", ["None"], ["", "def", "test_when_training_container_when_is_data_set_container_return_false", "(", "self", ")", ":", "\n", "        ", "some_valid_data", "=", "[", "\"An address\"", ",", "\"Another address\"", ",", "\"A last address\"", "]", "\n", "a_dataset_container", "=", "ADatasetContainer", "(", "some_valid_data", ",", "is_training_container", "=", "False", ")", "\n", "self", ".", "assertFalse", "(", "a_dataset_container", ".", "is_training_container", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.dataset_container.test_dataset_container.PickleDatasetContainerTest.setUp": [[147, 151], ["tempfile.TemporaryDirectory", "os.path.join"], "methods", ["None"], ["    ", "def", "setUp", "(", "self", ")", "->", "None", ":", "\n", "        ", "self", ".", "temp_dir_obj", "=", "TemporaryDirectory", "(", ")", "\n", "\n", "self", ".", "a_pickle_data_container_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "temp_dir_obj", ".", "name", ",", "\"fake_pickle_data_container.p\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.dataset_container.test_dataset_container.PickleDatasetContainerTest.tearDown": [[152, 154], ["test_dataset_container.PickleDatasetContainerTest.temp_dir_obj.cleanup"], "methods", ["None"], ["", "def", "tearDown", "(", "self", ")", "->", "None", ":", "\n", "        ", "self", ".", "temp_dir_obj", ".", "cleanup", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.dataset_container.test_dataset_container.PickleDatasetContainerTest.test_integration": [[155, 175], ["tests.tools.create_pickle_file", "deepparse.dataset_container.PickleDatasetContainer", "test_dataset_container.PickleDatasetContainerTest.assertEqual", "tests.tools.create_pickle_file", "deepparse.dataset_container.PickleDatasetContainer", "test_dataset_container.PickleDatasetContainerTest.assertEqual", "len", "len"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.tests.tools.create_pickle_file", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.tests.tools.create_pickle_file"], ["", "def", "test_integration", "(", "self", ")", ":", "\n", "        ", "number_of_data_points", "=", "4", "\n", "create_pickle_file", "(", "\n", "self", ".", "a_pickle_data_container_path", ",", "\n", "number_of_data_points", "=", "number_of_data_points", ",", "\n", ")", "\n", "\n", "pickle_dataset_container", "=", "PickleDatasetContainer", "(", "self", ".", "a_pickle_data_container_path", ")", "\n", "expected", "=", "number_of_data_points", "\n", "self", ".", "assertEqual", "(", "expected", ",", "len", "(", "pickle_dataset_container", ")", ")", "\n", "\n", "number_of_data_points", "=", "5", "\n", "create_pickle_file", "(", "\n", "self", ".", "a_pickle_data_container_path", ",", "\n", "number_of_data_points", "=", "number_of_data_points", ",", "\n", ")", "\n", "\n", "pickle_dataset_container", "=", "PickleDatasetContainer", "(", "self", ".", "a_pickle_data_container_path", ")", "\n", "expected", "=", "number_of_data_points", "\n", "self", ".", "assertEqual", "(", "expected", ",", "len", "(", "pickle_dataset_container", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.dataset_container.test_dataset_container.PickleDatasetContainerTest.test_integration_predict_container": [[176, 198], ["tests.tools.create_pickle_file", "deepparse.dataset_container.PickleDatasetContainer", "test_dataset_container.PickleDatasetContainerTest.assertEqual", "tests.tools.create_pickle_file", "deepparse.dataset_container.PickleDatasetContainer", "test_dataset_container.PickleDatasetContainerTest.assertEqual", "len", "len"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.tests.tools.create_pickle_file", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.tests.tools.create_pickle_file"], ["", "def", "test_integration_predict_container", "(", "self", ")", ":", "\n", "        ", "number_of_data_points", "=", "4", "\n", "create_pickle_file", "(", "\n", "self", ".", "a_pickle_data_container_path", ",", "number_of_data_points", "=", "number_of_data_points", ",", "predict_container", "=", "True", "\n", ")", "\n", "\n", "pickle_dataset_container", "=", "PickleDatasetContainer", "(", "\n", "self", ".", "a_pickle_data_container_path", ",", "is_training_container", "=", "False", "\n", ")", "\n", "expected", "=", "number_of_data_points", "\n", "self", ".", "assertEqual", "(", "expected", ",", "len", "(", "pickle_dataset_container", ")", ")", "\n", "\n", "number_of_data_points", "=", "5", "\n", "create_pickle_file", "(", "\n", "self", ".", "a_pickle_data_container_path", ",", "number_of_data_points", "=", "number_of_data_points", ",", "predict_container", "=", "True", "\n", ")", "\n", "\n", "pickle_dataset_container", "=", "PickleDatasetContainer", "(", "\n", "self", ".", "a_pickle_data_container_path", ",", "is_training_container", "=", "False", "\n", ")", "\n", "expected", "=", "number_of_data_points", "\n", "self", ".", "assertEqual", "(", "expected", ",", "len", "(", "pickle_dataset_container", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.dataset_container.test_dataset_container.PickleDatasetContainerTest.test_givenAPickleDatasetContainer_whenGetOneItem_thenReturnTheCorrectItem": [[199, 230], ["tests.tools.create_pickle_file", "deepparse.dataset_container.PickleDatasetContainer", "tests.tools.base_string.format", "test_dataset_container.PickleDatasetContainerTest.assertEqual", "test_dataset_container.PickleDatasetContainerTest.assertListEqual", "tests.tools.base_string.format", "test_dataset_container.PickleDatasetContainerTest.assertEqual", "test_dataset_container.PickleDatasetContainerTest.assertListEqual", "tests.tools.base_string.format", "test_dataset_container.PickleDatasetContainerTest.assertEqual", "test_dataset_container.PickleDatasetContainerTest.assertListEqual"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.tests.tools.create_pickle_file"], ["", "def", "test_givenAPickleDatasetContainer_whenGetOneItem_thenReturnTheCorrectItem", "(", "self", ")", ":", "\n", "        ", "create_pickle_file", "(", "self", ".", "a_pickle_data_container_path", ")", "\n", "\n", "pickle_dataset_container", "=", "PickleDatasetContainer", "(", "self", ".", "a_pickle_data_container_path", ")", "\n", "\n", "# first data point", "\n", "idx", "=", "0", "\n", "expected_address", "=", "base_string", ".", "format", "(", "idx", ")", "\n", "expected_tags_idx", "=", "a_tags_sequence", "\n", "\n", "actual_address", ",", "actual_tags_idx", "=", "pickle_dataset_container", "[", "idx", "]", "\n", "self", ".", "assertEqual", "(", "expected_address", ",", "actual_address", ")", "\n", "self", ".", "assertListEqual", "(", "expected_tags_idx", ",", "actual_tags_idx", ")", "\n", "\n", "# second data point", "\n", "idx", "=", "1", "\n", "expected_address", "=", "base_string", ".", "format", "(", "idx", ")", "\n", "expected_tags_idx", "=", "a_tags_sequence", "\n", "\n", "actual_address", ",", "actual_tags_idx", "=", "pickle_dataset_container", "[", "idx", "]", "\n", "self", ".", "assertEqual", "(", "expected_address", ",", "actual_address", ")", "\n", "self", ".", "assertListEqual", "(", "expected_tags_idx", ",", "actual_tags_idx", ")", "\n", "\n", "# third data point", "\n", "idx", "=", "2", "\n", "expected_address", "=", "base_string", ".", "format", "(", "idx", ")", "\n", "expected_tags_idx", "=", "a_tags_sequence", "\n", "\n", "actual_address", ",", "actual_tags_idx", "=", "pickle_dataset_container", "[", "idx", "]", "\n", "self", ".", "assertEqual", "(", "expected_address", ",", "actual_address", ")", "\n", "self", ".", "assertListEqual", "(", "expected_tags_idx", ",", "actual_tags_idx", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.dataset_container.test_dataset_container.PickleDatasetContainerTest.test_givenAPickleDatasetContainer_whenGetSlice_thenReturnTheCorrectItems": [[231, 263], ["tests.tools.create_pickle_file", "deepparse.dataset_container.PickleDatasetContainer", "test_dataset_container.PickleDatasetContainerTest.assertIsInstance", "zip", "test_dataset_container.PickleDatasetContainerTest.assertIsInstance", "zip", "tests.tools.base_string.format", "test_dataset_container.PickleDatasetContainerTest.assertEqual", "test_dataset_container.PickleDatasetContainerTest.assertListEqual", "tests.tools.base_string.format", "test_dataset_container.PickleDatasetContainerTest.assertEqual", "test_dataset_container.PickleDatasetContainerTest.assertListEqual", "range", "range"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.tests.tools.create_pickle_file"], ["", "def", "test_givenAPickleDatasetContainer_whenGetSlice_thenReturnTheCorrectItems", "(", "self", ")", ":", "\n", "        ", "create_pickle_file", "(", "self", ".", "a_pickle_data_container_path", ")", "\n", "\n", "pickle_dataset_container", "=", "PickleDatasetContainer", "(", "self", ".", "a_pickle_data_container_path", ")", "\n", "\n", "start_idx", "=", "0", "\n", "end_idx", "=", "2", "\n", "expected_addresses", "=", "[", "base_string", ".", "format", "(", "idx", ")", "for", "idx", "in", "range", "(", "start_idx", ",", "end_idx", ")", "]", "\n", "expected_tags_idxs", "=", "[", "a_tags_sequence", "]", "*", "(", "end_idx", "-", "start_idx", ")", "\n", "\n", "sliced_addresses", "=", "pickle_dataset_container", "[", "start_idx", ":", "end_idx", "]", "\n", "self", ".", "assertIsInstance", "(", "sliced_addresses", ",", "list", ")", "\n", "for", "actual_address_tuple", ",", "expected_address", ",", "expected_tags_idx", "in", "zip", "(", "\n", "sliced_addresses", ",", "expected_addresses", ",", "expected_tags_idxs", "\n", ")", ":", "\n", "            ", "actual_address", ",", "actual_tags_idx", "=", "actual_address_tuple", "[", "0", "]", ",", "actual_address_tuple", "[", "1", "]", "\n", "self", ".", "assertEqual", "(", "expected_address", ",", "actual_address", ")", "\n", "self", ".", "assertListEqual", "(", "expected_tags_idx", ",", "actual_tags_idx", ")", "\n", "\n", "", "start_idx", "=", "2", "\n", "end_idx", "=", "4", "\n", "expected_addresses", "=", "[", "base_string", ".", "format", "(", "idx", ")", "for", "idx", "in", "range", "(", "start_idx", ",", "end_idx", ")", "]", "\n", "expected_tags_idxs", "=", "[", "a_tags_sequence", "]", "*", "(", "end_idx", "-", "start_idx", ")", "\n", "\n", "sliced_addresses", "=", "pickle_dataset_container", "[", "start_idx", ":", "end_idx", "]", "\n", "self", ".", "assertIsInstance", "(", "sliced_addresses", ",", "list", ")", "\n", "for", "actual_address_tuple", ",", "expected_address", ",", "expected_tags_idx", "in", "zip", "(", "\n", "sliced_addresses", ",", "expected_addresses", ",", "expected_tags_idxs", "\n", ")", ":", "\n", "            ", "actual_address", ",", "actual_tags_idx", "=", "actual_address_tuple", "[", "0", "]", ",", "actual_address_tuple", "[", "1", "]", "\n", "self", ".", "assertEqual", "(", "expected_address", ",", "actual_address", ")", "\n", "self", ".", "assertListEqual", "(", "expected_tags_idx", ",", "actual_tags_idx", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.dataset_container.test_dataset_container.PickleDatasetContainerTest.test_given_list_of_tuple_data_when_predict_container_raise_data_error": [[264, 272], ["tests.tools.create_pickle_file", "test_dataset_container.PickleDatasetContainerTest.assertRaises", "deepparse.dataset_container.PickleDatasetContainer"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.tests.tools.create_pickle_file"], ["", "", "def", "test_given_list_of_tuple_data_when_predict_container_raise_data_error", "(", "self", ")", ":", "\n", "        ", "number_of_data_points", "=", "4", "\n", "create_pickle_file", "(", "\n", "self", ".", "a_pickle_data_container_path", ",", "number_of_data_points", "=", "number_of_data_points", ",", "predict_container", "=", "False", "\n", ")", "\n", "\n", "with", "self", ".", "assertRaises", "(", "DataError", ")", ":", "\n", "            ", "PickleDatasetContainer", "(", "self", ".", "a_pickle_data_container_path", ",", "is_training_container", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.dataset_container.test_dataset_container.CSVDatasetContainerTest.setUp": [[275, 279], ["tempfile.TemporaryDirectory", "os.path.join"], "methods", ["None"], ["    ", "def", "setUp", "(", "self", ")", "->", "None", ":", "\n", "        ", "self", ".", "temp_dir_obj", "=", "TemporaryDirectory", "(", ")", "\n", "\n", "self", ".", "a_data_container_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "temp_dir_obj", ".", "name", ",", "\"fake_csv_data_container.csv\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.dataset_container.test_dataset_container.CSVDatasetContainerTest.tearDown": [[280, 282], ["test_dataset_container.CSVDatasetContainerTest.temp_dir_obj.cleanup"], "methods", ["None"], ["", "def", "tearDown", "(", "self", ")", "->", "None", ":", "\n", "        ", "self", ".", "temp_dir_obj", ".", "cleanup", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.dataset_container.test_dataset_container.CSVDatasetContainerTest._test_integration": [[283, 286], ["test_dataset_container.CSVDatasetContainerTest.assertEqual", "len"], "methods", ["None"], ["", "def", "_test_integration", "(", "self", ",", "number_of_data_points", ",", "csv_dataset_container", ")", ":", "\n", "        ", "expected", "=", "number_of_data_points", "\n", "self", ".", "assertEqual", "(", "expected", ",", "len", "(", "csv_dataset_container", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.dataset_container.test_dataset_container.CSVDatasetContainerTest.test_integration": [[287, 305], ["tests.tools.create_csv_file", "deepparse.dataset_container.CSVDatasetContainer", "test_dataset_container.CSVDatasetContainerTest._test_integration", "tests.tools.create_csv_file", "deepparse.dataset_container.CSVDatasetContainer", "test_dataset_container.CSVDatasetContainerTest._test_integration"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.tests.tools.create_csv_file", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.dataset_container.test_dataset_container.CSVDatasetContainerTest._test_integration", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.tests.tools.create_csv_file", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.dataset_container.test_dataset_container.CSVDatasetContainerTest._test_integration"], ["", "def", "test_integration", "(", "self", ")", ":", "\n", "        ", "number_of_data_points", "=", "4", "\n", "create_csv_file", "(", "\n", "self", ".", "a_data_container_path", ",", "\n", "number_of_data_points", "=", "number_of_data_points", ",", "\n", ")", "\n", "\n", "csv_dataset_container", "=", "CSVDatasetContainer", "(", "self", ".", "a_data_container_path", ",", "column_names", "=", "default_csv_column_name", ")", "\n", "self", ".", "_test_integration", "(", "number_of_data_points", ",", "csv_dataset_container", ")", "\n", "\n", "number_of_data_points", "=", "5", "\n", "create_csv_file", "(", "\n", "self", ".", "a_data_container_path", ",", "\n", "number_of_data_points", "=", "number_of_data_points", ",", "\n", ")", "\n", "\n", "csv_dataset_container", "=", "CSVDatasetContainer", "(", "self", ".", "a_data_container_path", ",", "column_names", "=", "default_csv_column_name", ")", "\n", "self", ".", "_test_integration", "(", "number_of_data_points", ",", "csv_dataset_container", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.dataset_container.test_dataset_container.CSVDatasetContainerTest.test_integration_predict_container": [[306, 331], ["tests.tools.create_csv_file", "deepparse.dataset_container.CSVDatasetContainer", "test_dataset_container.CSVDatasetContainerTest._test_integration", "tests.tools.create_csv_file", "deepparse.dataset_container.CSVDatasetContainer", "test_dataset_container.CSVDatasetContainerTest._test_integration", "deepparse.dataset_container.CSVDatasetContainer", "test_dataset_container.CSVDatasetContainerTest._test_integration"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.tests.tools.create_csv_file", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.dataset_container.test_dataset_container.CSVDatasetContainerTest._test_integration", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.tests.tools.create_csv_file", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.dataset_container.test_dataset_container.CSVDatasetContainerTest._test_integration", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.dataset_container.test_dataset_container.CSVDatasetContainerTest._test_integration"], ["", "def", "test_integration_predict_container", "(", "self", ")", ":", "\n", "        ", "number_of_data_points", "=", "4", "\n", "create_csv_file", "(", "\n", "self", ".", "a_data_container_path", ",", "number_of_data_points", "=", "number_of_data_points", ",", "predict_container", "=", "False", "\n", ")", "\n", "\n", "csv_dataset_container", "=", "CSVDatasetContainer", "(", "\n", "self", ".", "a_data_container_path", ",", "column_names", "=", "[", "\"Address\"", "]", ",", "is_training_container", "=", "False", "\n", ")", "\n", "self", ".", "_test_integration", "(", "number_of_data_points", ",", "csv_dataset_container", ")", "\n", "\n", "number_of_data_points", "=", "5", "\n", "create_csv_file", "(", "\n", "self", ".", "a_data_container_path", ",", "number_of_data_points", "=", "number_of_data_points", ",", "predict_container", "=", "False", "\n", ")", "\n", "\n", "csv_dataset_container", "=", "CSVDatasetContainer", "(", "\n", "self", ".", "a_data_container_path", ",", "column_names", "=", "[", "\"Address\"", "]", ",", "is_training_container", "=", "False", "\n", ")", "\n", "self", ".", "_test_integration", "(", "number_of_data_points", ",", "csv_dataset_container", ")", "\n", "\n", "csv_dataset_container", "=", "CSVDatasetContainer", "(", "\n", "self", ".", "a_data_container_path", ",", "column_names", "=", "\"Address\"", ",", "is_training_container", "=", "False", "\n", ")", "\n", "self", ".", "_test_integration", "(", "number_of_data_points", ",", "csv_dataset_container", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.dataset_container.test_dataset_container.CSVDatasetContainerTest.test_integration_user_define_column_names": [[332, 355], ["tests.tools.create_csv_file", "deepparse.dataset_container.CSVDatasetContainer", "test_dataset_container.CSVDatasetContainerTest._test_integration", "tests.tools.create_csv_file", "deepparse.dataset_container.CSVDatasetContainer", "test_dataset_container.CSVDatasetContainerTest._test_integration"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.tests.tools.create_csv_file", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.dataset_container.test_dataset_container.CSVDatasetContainerTest._test_integration", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.tests.tools.create_csv_file", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.dataset_container.test_dataset_container.CSVDatasetContainerTest._test_integration"], ["", "def", "test_integration_user_define_column_names", "(", "self", ")", ":", "\n", "        ", "user_define_column_names", "=", "[", "\"a_name\"", ",", "\"Another_name\"", "]", "\n", "number_of_data_points", "=", "4", "\n", "create_csv_file", "(", "\n", "self", ".", "a_data_container_path", ",", "\n", "number_of_data_points", "=", "number_of_data_points", ",", "\n", "column_names", "=", "user_define_column_names", ",", "\n", ")", "\n", "\n", "csv_dataset_container", "=", "CSVDatasetContainer", "(", "self", ".", "a_data_container_path", ",", "column_names", "=", "user_define_column_names", ")", "\n", "\n", "self", ".", "_test_integration", "(", "number_of_data_points", ",", "csv_dataset_container", ")", "\n", "\n", "number_of_data_points", "=", "5", "\n", "create_csv_file", "(", "\n", "self", ".", "a_data_container_path", ",", "\n", "number_of_data_points", "=", "number_of_data_points", ",", "\n", "column_names", "=", "user_define_column_names", ",", "\n", ")", "\n", "\n", "csv_dataset_container", "=", "CSVDatasetContainer", "(", "self", ".", "a_data_container_path", ",", "column_names", "=", "user_define_column_names", ")", "\n", "\n", "self", ".", "_test_integration", "(", "number_of_data_points", ",", "csv_dataset_container", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.dataset_container.test_dataset_container.CSVDatasetContainerTest.test_integration_user_define_separator": [[356, 375], ["tests.tools.create_csv_file", "deepparse.dataset_container.CSVDatasetContainer", "test_dataset_container.CSVDatasetContainerTest._test_integration", "tests.tools.create_csv_file", "deepparse.dataset_container.CSVDatasetContainer", "test_dataset_container.CSVDatasetContainerTest._test_integration"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.tests.tools.create_csv_file", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.dataset_container.test_dataset_container.CSVDatasetContainerTest._test_integration", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.tests.tools.create_csv_file", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.dataset_container.test_dataset_container.CSVDatasetContainerTest._test_integration"], ["", "def", "test_integration_user_define_separator", "(", "self", ")", ":", "\n", "        ", "separator", "=", "\";\"", "\n", "number_of_data_points", "=", "4", "\n", "create_csv_file", "(", "self", ".", "a_data_container_path", ",", "number_of_data_points", "=", "number_of_data_points", ",", "separator", "=", "separator", ")", "\n", "\n", "csv_dataset_container", "=", "CSVDatasetContainer", "(", "\n", "self", ".", "a_data_container_path", ",", "column_names", "=", "default_csv_column_name", ",", "separator", "=", "separator", "\n", ")", "\n", "\n", "self", ".", "_test_integration", "(", "number_of_data_points", ",", "csv_dataset_container", ")", "\n", "\n", "number_of_data_points", "=", "5", "\n", "create_csv_file", "(", "self", ".", "a_data_container_path", ",", "number_of_data_points", "=", "number_of_data_points", ",", "separator", "=", "separator", ")", "\n", "\n", "csv_dataset_container", "=", "CSVDatasetContainer", "(", "\n", "self", ".", "a_data_container_path", ",", "column_names", "=", "default_csv_column_name", ",", "separator", "=", "separator", "\n", ")", "\n", "\n", "self", ".", "_test_integration", "(", "number_of_data_points", ",", "csv_dataset_container", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.dataset_container.test_dataset_container.CSVDatasetContainerTest.test_integration_user_define_tag_separator_fn": [[376, 409], ["tests.tools.create_csv_file", "deepparse.dataset_container.CSVDatasetContainer", "test_dataset_container.CSVDatasetContainerTest._test_integration", "tests.tools.create_csv_file", "deepparse.dataset_container.CSVDatasetContainer", "test_dataset_container.CSVDatasetContainerTest._test_integration", "str().replace().replace().replace", "str().replace().replace", "str().replace", "str"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.tests.tools.create_csv_file", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.dataset_container.test_dataset_container.CSVDatasetContainerTest._test_integration", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.tests.tools.create_csv_file", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.dataset_container.test_dataset_container.CSVDatasetContainerTest._test_integration"], ["", "def", "test_integration_user_define_tag_separator_fn", "(", "self", ")", ":", "\n", "        ", "def", "internal_conversion_of_list_to_comma_separated_list", "(", "tags", ")", ":", "\n", "            ", "return", "str", "(", "tags", ")", ".", "replace", "(", "\"[\"", ",", "\"\"", ")", ".", "replace", "(", "\"]\"", ",", "\"\"", ")", ".", "replace", "(", "\"'\"", ",", "\"\"", ")", "\n", "\n", "", "number_of_data_points", "=", "4", "\n", "create_csv_file", "(", "\n", "self", ".", "a_data_container_path", ",", "\n", "number_of_data_points", "=", "number_of_data_points", ",", "\n", "reformat_list_fn", "=", "internal_conversion_of_list_to_comma_separated_list", ",", "\n", ")", "\n", "\n", "csv_dataset_container", "=", "CSVDatasetContainer", "(", "\n", "self", ".", "a_data_container_path", ",", "\n", "column_names", "=", "default_csv_column_name", ",", "\n", "tag_seperator_reformat_fn", "=", "comma_separated_list_reformat", ",", "\n", ")", "\n", "\n", "self", ".", "_test_integration", "(", "number_of_data_points", ",", "csv_dataset_container", ")", "\n", "\n", "number_of_data_points", "=", "5", "\n", "create_csv_file", "(", "\n", "self", ".", "a_data_container_path", ",", "\n", "number_of_data_points", "=", "number_of_data_points", ",", "\n", "reformat_list_fn", "=", "internal_conversion_of_list_to_comma_separated_list", ",", "\n", ")", "\n", "\n", "csv_dataset_container", "=", "CSVDatasetContainer", "(", "\n", "self", ".", "a_data_container_path", ",", "\n", "column_names", "=", "default_csv_column_name", ",", "\n", "tag_seperator_reformat_fn", "=", "comma_separated_list_reformat", ",", "\n", ")", "\n", "\n", "self", ".", "_test_integration", "(", "number_of_data_points", ",", "csv_dataset_container", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.dataset_container.test_dataset_container.CSVDatasetContainerTest.test_givenACSVDatasetContainer_whenGetOneItem_thenReturnTheCorrectItem": [[410, 441], ["tests.tools.create_csv_file", "deepparse.dataset_container.CSVDatasetContainer", "tests.tools.base_string.format", "test_dataset_container.CSVDatasetContainerTest.assertEqual", "test_dataset_container.CSVDatasetContainerTest.assertListEqual", "tests.tools.base_string.format", "test_dataset_container.CSVDatasetContainerTest.assertEqual", "test_dataset_container.CSVDatasetContainerTest.assertListEqual", "tests.tools.base_string.format", "test_dataset_container.CSVDatasetContainerTest.assertEqual", "test_dataset_container.CSVDatasetContainerTest.assertListEqual"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.tests.tools.create_csv_file"], ["", "def", "test_givenACSVDatasetContainer_whenGetOneItem_thenReturnTheCorrectItem", "(", "self", ")", ":", "\n", "        ", "create_csv_file", "(", "self", ".", "a_data_container_path", ")", "\n", "\n", "csv_dataset_container", "=", "CSVDatasetContainer", "(", "self", ".", "a_data_container_path", ",", "column_names", "=", "default_csv_column_name", ")", "\n", "\n", "# first data point", "\n", "idx", "=", "0", "\n", "expected_address", "=", "base_string", ".", "format", "(", "idx", ")", "\n", "expected_tags_idx", "=", "a_tags_sequence", "\n", "\n", "actual_address", ",", "actual_tags_idx", "=", "csv_dataset_container", "[", "idx", "]", "\n", "self", ".", "assertEqual", "(", "expected_address", ",", "actual_address", ")", "\n", "self", ".", "assertListEqual", "(", "expected_tags_idx", ",", "actual_tags_idx", ")", "\n", "\n", "# second data point", "\n", "idx", "=", "1", "\n", "expected_address", "=", "base_string", ".", "format", "(", "idx", ")", "\n", "expected_tags_idx", "=", "a_tags_sequence", "\n", "\n", "actual_address", ",", "actual_tags_idx", "=", "csv_dataset_container", "[", "idx", "]", "\n", "self", ".", "assertEqual", "(", "expected_address", ",", "actual_address", ")", "\n", "self", ".", "assertListEqual", "(", "expected_tags_idx", ",", "actual_tags_idx", ")", "\n", "\n", "# third data point", "\n", "idx", "=", "2", "\n", "expected_address", "=", "base_string", ".", "format", "(", "idx", ")", "\n", "expected_tags_idx", "=", "a_tags_sequence", "\n", "\n", "actual_address", ",", "actual_tags_idx", "=", "csv_dataset_container", "[", "idx", "]", "\n", "self", ".", "assertEqual", "(", "expected_address", ",", "actual_address", ")", "\n", "self", ".", "assertListEqual", "(", "expected_tags_idx", ",", "actual_tags_idx", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.dataset_container.test_dataset_container.CSVDatasetContainerTest.test_givenAPickleDatasetContainer_whenGetSlice_thenReturnTheCorrectItems": [[442, 474], ["tests.tools.create_csv_file", "deepparse.dataset_container.CSVDatasetContainer", "test_dataset_container.CSVDatasetContainerTest.assertIsInstance", "zip", "test_dataset_container.CSVDatasetContainerTest.assertIsInstance", "zip", "tests.tools.base_string.format", "test_dataset_container.CSVDatasetContainerTest.assertEqual", "test_dataset_container.CSVDatasetContainerTest.assertListEqual", "tests.tools.base_string.format", "test_dataset_container.CSVDatasetContainerTest.assertEqual", "test_dataset_container.CSVDatasetContainerTest.assertListEqual", "range", "range"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.tests.tools.create_csv_file"], ["", "def", "test_givenAPickleDatasetContainer_whenGetSlice_thenReturnTheCorrectItems", "(", "self", ")", ":", "\n", "        ", "create_csv_file", "(", "self", ".", "a_data_container_path", ")", "\n", "\n", "csv_dataset_container", "=", "CSVDatasetContainer", "(", "self", ".", "a_data_container_path", ",", "column_names", "=", "default_csv_column_name", ")", "\n", "\n", "start_idx", "=", "0", "\n", "end_idx", "=", "2", "\n", "expected_addresses", "=", "[", "base_string", ".", "format", "(", "idx", ")", "for", "idx", "in", "range", "(", "start_idx", ",", "end_idx", ")", "]", "\n", "expected_tags_idxs", "=", "[", "a_tags_sequence", "]", "*", "(", "end_idx", "-", "start_idx", ")", "\n", "\n", "sliced_addresses", "=", "csv_dataset_container", "[", "start_idx", ":", "end_idx", "]", "\n", "self", ".", "assertIsInstance", "(", "sliced_addresses", ",", "list", ")", "\n", "for", "actual_address_tuple", ",", "expected_address", ",", "expected_tags_idx", "in", "zip", "(", "\n", "sliced_addresses", ",", "expected_addresses", ",", "expected_tags_idxs", "\n", ")", ":", "\n", "            ", "actual_address", ",", "actual_tags_idx", "=", "actual_address_tuple", "[", "0", "]", ",", "actual_address_tuple", "[", "1", "]", "\n", "self", ".", "assertEqual", "(", "expected_address", ",", "actual_address", ")", "\n", "self", ".", "assertListEqual", "(", "expected_tags_idx", ",", "actual_tags_idx", ")", "\n", "\n", "", "start_idx", "=", "2", "\n", "end_idx", "=", "4", "\n", "expected_addresses", "=", "[", "base_string", ".", "format", "(", "idx", ")", "for", "idx", "in", "range", "(", "start_idx", ",", "end_idx", ")", "]", "\n", "expected_tags_idxs", "=", "[", "a_tags_sequence", "]", "*", "(", "end_idx", "-", "start_idx", ")", "\n", "\n", "sliced_addresses", "=", "csv_dataset_container", "[", "start_idx", ":", "end_idx", "]", "\n", "self", ".", "assertIsInstance", "(", "sliced_addresses", ",", "list", ")", "\n", "for", "actual_address_tuple", ",", "expected_address", ",", "expected_tags_idx", "in", "zip", "(", "\n", "sliced_addresses", ",", "expected_addresses", ",", "expected_tags_idxs", "\n", ")", ":", "\n", "            ", "actual_address", ",", "actual_tags_idx", "=", "actual_address_tuple", "[", "0", "]", ",", "actual_address_tuple", "[", "1", "]", "\n", "self", ".", "assertEqual", "(", "expected_address", ",", "actual_address", ")", "\n", "self", ".", "assertListEqual", "(", "expected_tags_idx", ",", "actual_tags_idx", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.dataset_container.test_dataset_container.CSVDatasetContainerTest.test_given_a_training_container_when_column_names_a_str_raise_value_error": [[475, 481], ["test_dataset_container.CSVDatasetContainerTest.assertRaises", "deepparse.dataset_container.CSVDatasetContainer", "test_dataset_container.CSVDatasetContainerTest.assertRaises", "deepparse.dataset_container.CSVDatasetContainer"], "methods", ["None"], ["", "", "def", "test_given_a_training_container_when_column_names_a_str_raise_value_error", "(", "self", ")", ":", "\n", "        ", "with", "self", ".", "assertRaises", "(", "ValueError", ")", ":", "\n", "            ", "CSVDatasetContainer", "(", "self", ".", "a_data_container_path", ",", "\"\"", ")", "\n", "\n", "", "with", "self", ".", "assertRaises", "(", "ValueError", ")", ":", "\n", "            ", "CSVDatasetContainer", "(", "self", ".", "a_data_container_path", ",", "column_names", "=", "\"a single colum name\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.dataset_container.test_dataset_container.CSVDatasetContainerTest.test_given_a_training_container_when_column_names_not_2_raise_value_error": [[482, 492], ["test_dataset_container.CSVDatasetContainerTest.assertRaises", "deepparse.dataset_container.CSVDatasetContainer", "test_dataset_container.CSVDatasetContainerTest.assertRaises", "deepparse.dataset_container.CSVDatasetContainer", "test_dataset_container.CSVDatasetContainerTest.assertRaises", "deepparse.dataset_container.CSVDatasetContainer"], "methods", ["None"], ["", "", "def", "test_given_a_training_container_when_column_names_not_2_raise_value_error", "(", "self", ")", ":", "\n", "        ", "with", "self", ".", "assertRaises", "(", "ValueError", ")", ":", "\n", "            ", "CSVDatasetContainer", "(", "self", ".", "a_data_container_path", ",", "column_names", "=", "[", "\"\"", "]", ")", "\n", "\n", "", "with", "self", ".", "assertRaises", "(", "ValueError", ")", ":", "\n", "            ", "CSVDatasetContainer", "(", "self", ".", "a_data_container_path", ",", "column_names", "=", "[", "\"a single colum name\"", "]", ")", "\n", "\n", "", "with", "self", ".", "assertRaises", "(", "ValueError", ")", ":", "\n", "            ", "CSVDatasetContainer", "(", "\n", "self", ".", "a_data_container_path", ",", "column_names", "=", "[", "\"a three colum name\"", ",", "\"second name\"", ",", "\"third name\"", "]", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.dataset_container.test_dataset_container.CSVDatasetContainerTest.test_given_a_predict_container_when_column_names_not_1_raise_value_error": [[494, 507], ["test_dataset_container.CSVDatasetContainerTest.assertRaises", "deepparse.dataset_container.CSVDatasetContainer", "test_dataset_container.CSVDatasetContainerTest.assertRaises", "deepparse.dataset_container.CSVDatasetContainer"], "methods", ["None"], ["", "", "def", "test_given_a_predict_container_when_column_names_not_1_raise_value_error", "(", "self", ")", ":", "\n", "        ", "with", "self", ".", "assertRaises", "(", "ValueError", ")", ":", "\n", "            ", "CSVDatasetContainer", "(", "\n", "self", ".", "a_data_container_path", ",", "\n", "column_names", "=", "[", "\"a two colum name\"", ",", "\"second name\"", "]", ",", "\n", "is_training_container", "=", "False", ",", "\n", ")", "\n", "\n", "", "with", "self", ".", "assertRaises", "(", "ValueError", ")", ":", "\n", "            ", "CSVDatasetContainer", "(", "\n", "self", ".", "a_data_container_path", ",", "\n", "column_names", "=", "[", "\"a three colum name\"", ",", "\"second name\"", ",", "\"third name\"", "]", ",", "\n", "is_training_container", "=", "False", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.dataset_container.test_dataset_container.CSVDatasetContainerTest.test_given_a_data_container_with_improper_column_names_raise_value_error": [[509, 521], ["test_dataset_container.CSVDatasetContainerTest.assertRaises", "deepparse.dataset_container.CSVDatasetContainer", "test_dataset_container.CSVDatasetContainerTest.assertRaises", "deepparse.dataset_container.CSVDatasetContainer", "test_dataset_container.CSVDatasetContainerTest.assertRaises", "deepparse.dataset_container.CSVDatasetContainer", "test_dataset_container.CSVDatasetContainerTest.assertRaises", "deepparse.dataset_container.CSVDatasetContainer"], "methods", ["None"], ["", "", "def", "test_given_a_data_container_with_improper_column_names_raise_value_error", "(", "self", ")", ":", "\n", "        ", "with", "self", ".", "assertRaises", "(", "ValueError", ")", ":", "\n", "            ", "CSVDatasetContainer", "(", "self", ".", "a_data_container_path", ",", "column_names", "=", "[", "\"\"", "]", ",", "is_training_container", "=", "False", ")", "\n", "\n", "", "with", "self", ".", "assertRaises", "(", "ValueError", ")", ":", "\n", "            ", "CSVDatasetContainer", "(", "self", ".", "a_data_container_path", ",", "column_names", "=", "[", "\" \"", "]", ",", "is_training_container", "=", "False", ")", "\n", "\n", "", "with", "self", ".", "assertRaises", "(", "ValueError", ")", ":", "\n", "            ", "CSVDatasetContainer", "(", "self", ".", "a_data_container_path", ",", "column_names", "=", "[", "\"\"", ",", "\"\"", "]", ",", "is_training_container", "=", "True", ")", "\n", "\n", "", "with", "self", ".", "assertRaises", "(", "ValueError", ")", ":", "\n", "            ", "CSVDatasetContainer", "(", "self", ".", "a_data_container_path", ",", "column_names", "=", "[", "\" \"", ",", "\" \"", "]", ",", "is_training_container", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.dataset_container.test_dataset_container.comma_separated_list_reformat": [[18, 29], ["tags.split"], "function", ["None"], ["def", "comma_separated_list_reformat", "(", "tags", ":", "str", ")", "->", "List", ":", "\n", "    ", "\"\"\"\n    Function to parse a comma separated \"list\" of tag.\n\n    Args:\n        tags (str): A tag set string to parse.\n\n    Return:\n        A list of the parsed tag set.\n    \"\"\"", "\n", "return", "tags", ".", "split", "(", "\", \"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.dataset_container.test_tools.DatasetContainerToolsTests.test_given_a_str_list_split_comma_and_whitespace_when_parse_return_properly_parse_list": [[7, 14], ["str", "deepparse.dataset_container.former_python_list", "test_tools.DatasetContainerToolsTests.assertEqual", "str"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.dataset_container.tools.former_python_list"], ["from", "unittest", ".", "mock", "import", "patch", "\n", "\n", "import", "requests", "\n", "\n", "from", "deepparse", "import", "(", "\n", "download_from_url", ",", "\n", "latest_version", ",", "\n", "download_weights", ",", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.dataset_container.test_tools.DatasetContainerToolsTests.test_given_a_str_list_split_comma_when_parse_return_properly_parse_list": [[15, 22], ["deepparse.dataset_container.former_python_list", "test_tools.DatasetContainerToolsTests.assertEqual", "str"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.dataset_container.tools.former_python_list"], ["handle_pre_trained_checkpoint", ",", "\n", "handle_poutyne_version", ",", "\n", "valid_poutyne_version", ",", "\n", "validate_data_to_parse", ",", "\n", "DataError", ",", "\n", ")", "\n", "from", "deepparse", "import", "handle_model_path", ",", "CACHE_PATH", "\n", "from", "tests", ".", "base_capture_output", "import", "CaptureOutputTestCase", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.data_validation.data_validation.validate_if_any_empty": [[4, 12], ["any", "data_validation.is_empty"], "function", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.data_validation.data_validation.is_empty"], ["def", "validate_if_any_empty", "(", "string_elements", ":", "List", ")", "->", "bool", ":", "\n", "    ", "\"\"\"\n    Return true if one of the string element is an empty one.\n\n    Args:\n        string_elements (List): A list of string to validate.\n    \"\"\"", "\n", "return", "any", "(", "is_empty", "(", "string_element", ")", "for", "string_element", "in", "string_elements", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.data_validation.data_validation.validate_if_any_whitespace_only": [[14, 22], ["any", "data_validation.is_whitespace_only"], "function", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.data_validation.data_validation.is_whitespace_only"], ["", "def", "validate_if_any_whitespace_only", "(", "string_elements", ":", "List", ")", "->", "bool", ":", "\n", "    ", "\"\"\"\n    Return true if one of the string element is only whitespace.\n\n    Args:\n        string_elements (List): A list of string to validate.\n    \"\"\"", "\n", "return", "any", "(", "is_whitespace_only", "(", "string_element", ")", "for", "string_element", "in", "string_elements", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.data_validation.data_validation.validate_if_any_none": [[24, 32], ["any", "data_validation.is_none"], "function", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.data_validation.data_validation.is_none"], ["", "def", "validate_if_any_none", "(", "string_elements", ":", "List", ")", "->", "bool", ":", "\n", "    ", "\"\"\"\n    Return true if one of the string element is a None value.\n\n    Args:\n        string_elements (List): A list of string to validate.\n    \"\"\"", "\n", "return", "any", "(", "is_none", "(", "string_element", ")", "for", "string_element", "in", "string_elements", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.data_validation.data_validation.is_whitespace_only": [[34, 45], ["len", "a_string.strip().split", "a_string.strip"], "function", ["None"], ["", "def", "is_whitespace_only", "(", "a_string", ":", "str", ")", "->", "bool", ":", "\n", "    ", "\"\"\"\n    Validate if a string is composed of only whitespace.\n\n    Args:\n        a_string (str): A string to validate.\n\n    Return:\n        Either or not, the string is composed only of whitespace or not.\n    \"\"\"", "\n", "return", "len", "(", "a_string", ".", "strip", "(", "\" \"", ")", ".", "split", "(", ")", ")", "==", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.data_validation.data_validation.is_empty": [[47, 58], ["len"], "function", ["None"], ["", "def", "is_empty", "(", "a_string", ":", "str", ")", "->", "bool", ":", "\n", "    ", "\"\"\"\n    Validate if a string is empty.\n\n    Args:\n        a_string (str): A string to validate.\n\n    Return:\n        Either or not, the string is empty.\n    \"\"\"", "\n", "return", "len", "(", "a_string", ")", "==", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.data_validation.data_validation.is_none": [[60, 71], ["None"], "function", ["None"], ["", "def", "is_none", "(", "a_string", ":", "str", ")", "->", "bool", ":", "\n", "    ", "\"\"\"\n    Validate if a string is a None.\n\n    Args:\n        a_string (str): A string to validate.\n\n    Return:\n        Either or not, the string is a None type.\n    \"\"\"", "\n", "return", "a_string", "is", "None", "\n", "", ""]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.data_validation.test_data_validation.DataValidationTest.test_integration_validate_if_any_empty": [[8, 11], ["test_data_validation.DataValidationTest.assertFalse", "deepparse.validate_if_any_empty"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.data_validation.data_validation.validate_if_any_empty"], ["    ", "def", "test_integration_validate_if_any_empty", "(", "self", ")", ":", "\n", "        ", "a_list_of_string_element", "=", "[", "\"an address\"", ",", "\"another address\"", "]", "\n", "self", ".", "assertFalse", "(", "validate_if_any_empty", "(", "a_list_of_string_element", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.data_validation.test_data_validation.DataValidationTest.test_integration_validate_if_any_whitespace_only": [[12, 15], ["test_data_validation.DataValidationTest.assertFalse", "deepparse.validate_if_any_whitespace_only"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.data_validation.data_validation.validate_if_any_whitespace_only"], ["", "def", "test_integration_validate_if_any_whitespace_only", "(", "self", ")", ":", "\n", "        ", "a_list_of_string_element", "=", "[", "\"an address\"", ",", "\"another address\"", "]", "\n", "self", ".", "assertFalse", "(", "validate_if_any_whitespace_only", "(", "a_list_of_string_element", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.data_validation.test_data_validation.DataValidationTest.test_integration_validate_if_any_none": [[16, 19], ["test_data_validation.DataValidationTest.assertFalse", "deepparse.validate_if_any_none"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.data_validation.data_validation.validate_if_any_none"], ["", "def", "test_integration_validate_if_any_none", "(", "self", ")", ":", "\n", "        ", "a_list_of_string_element", "=", "[", "\"an address\"", ",", "\"another address\"", "]", "\n", "self", ".", "assertFalse", "(", "validate_if_any_none", "(", "a_list_of_string_element", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.data_validation.test_data_validation.DataValidationTest.test_integration_validate_if_any_empty_with_empty_return_true": [[20, 23], ["test_data_validation.DataValidationTest.assertTrue", "deepparse.validate_if_any_empty"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.data_validation.data_validation.validate_if_any_empty"], ["", "def", "test_integration_validate_if_any_empty_with_empty_return_true", "(", "self", ")", ":", "\n", "        ", "a_list_of_string_element", "=", "[", "\"an address\"", ",", "\"\"", "]", "\n", "self", ".", "assertTrue", "(", "validate_if_any_empty", "(", "a_list_of_string_element", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.data_validation.test_data_validation.DataValidationTest.test_integration_validate_if_any_whitespace_only_with_whitespace_return_true": [[24, 27], ["test_data_validation.DataValidationTest.assertTrue", "deepparse.validate_if_any_whitespace_only"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.data_validation.data_validation.validate_if_any_whitespace_only"], ["", "def", "test_integration_validate_if_any_whitespace_only_with_whitespace_return_true", "(", "self", ")", ":", "\n", "        ", "a_list_of_string_element", "=", "[", "\"an address\"", ",", "\"  \"", "]", "\n", "self", ".", "assertTrue", "(", "validate_if_any_whitespace_only", "(", "a_list_of_string_element", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.data_validation.test_data_validation.DataValidationTest.test_integration_validate_if_any_none_with_none_return_true": [[28, 31], ["test_data_validation.DataValidationTest.assertTrue", "deepparse.validate_if_any_none"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.data_validation.data_validation.validate_if_any_none"], ["", "def", "test_integration_validate_if_any_none_with_none_return_true", "(", "self", ")", ":", "\n", "        ", "a_list_of_string_element", "=", "[", "\"an address\"", ",", "None", "]", "\n", "self", ".", "assertTrue", "(", "validate_if_any_none", "(", "a_list_of_string_element", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.data_validation.test_data_validation.DataValidationTest.test_if_no_whitespace_address_when_is_white_space_return_false": [[32, 40], ["test_data_validation.DataValidationTest.assertFalse", "test_data_validation.DataValidationTest.assertFalse", "deepparse.data_validation.is_whitespace_only", "deepparse.data_validation.is_whitespace_only"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.data_validation.data_validation.is_whitespace_only", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.data_validation.data_validation.is_whitespace_only"], ["", "def", "test_if_no_whitespace_address_when_is_white_space_return_false", "(", "self", ")", ":", "\n", "        ", "an_address_not_whitespace_only", "=", "\"an address\"", "\n", "\n", "self", ".", "assertFalse", "(", "is_whitespace_only", "(", "an_address_not_whitespace_only", ")", ")", "\n", "\n", "another_address_not_whitespace_only", "=", "\"address\"", "\n", "\n", "self", ".", "assertFalse", "(", "is_whitespace_only", "(", "another_address_not_whitespace_only", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.data_validation.test_data_validation.DataValidationTest.test_if_whitespace_address_when_is_white_space_return_true": [[41, 53], ["test_data_validation.DataValidationTest.assertTrue", "test_data_validation.DataValidationTest.assertTrue", "test_data_validation.DataValidationTest.assertTrue", "deepparse.data_validation.is_whitespace_only", "deepparse.data_validation.is_whitespace_only", "deepparse.data_validation.is_whitespace_only"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.data_validation.data_validation.is_whitespace_only", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.data_validation.data_validation.is_whitespace_only", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.data_validation.data_validation.is_whitespace_only"], ["", "def", "test_if_whitespace_address_when_is_white_space_return_true", "(", "self", ")", ":", "\n", "        ", "an_address_whitespace_only", "=", "\" \"", "\n", "\n", "self", ".", "assertTrue", "(", "is_whitespace_only", "(", "an_address_whitespace_only", ")", ")", "\n", "\n", "another_address_whitespace_only", "=", "\"  \"", "\n", "\n", "self", ".", "assertTrue", "(", "is_whitespace_only", "(", "another_address_whitespace_only", ")", ")", "\n", "\n", "a_last_address_whitespace_only", "=", "\"       \"", "\n", "\n", "self", ".", "assertTrue", "(", "is_whitespace_only", "(", "a_last_address_whitespace_only", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.data_validation.test_data_validation.DataValidationTest.test_if_no_empty_address_when_is_empty_address_return_false": [[54, 62], ["test_data_validation.DataValidationTest.assertFalse", "test_data_validation.DataValidationTest.assertFalse", "deepparse.data_validation.is_empty", "deepparse.data_validation.is_empty"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.data_validation.data_validation.is_empty", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.data_validation.data_validation.is_empty"], ["", "def", "test_if_no_empty_address_when_is_empty_address_return_false", "(", "self", ")", ":", "\n", "        ", "an_address_not_empty", "=", "\"an address\"", "\n", "\n", "self", ".", "assertFalse", "(", "is_empty", "(", "an_address_not_empty", ")", ")", "\n", "\n", "another_address_not_empty", "=", "\"address\"", "\n", "\n", "self", ".", "assertFalse", "(", "is_empty", "(", "another_address_not_empty", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.data_validation.test_data_validation.DataValidationTest.test_if_empty_address_when_is_empty_address_return_true": [[63, 71], ["test_data_validation.DataValidationTest.assertTrue", "test_data_validation.DataValidationTest.assertTrue", "deepparse.data_validation.is_empty", "deepparse.data_validation.is_empty"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.data_validation.data_validation.is_empty", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.data_validation.data_validation.is_empty"], ["", "def", "test_if_empty_address_when_is_empty_address_return_true", "(", "self", ")", ":", "\n", "        ", "an_address_empty", "=", "\"\"", "\n", "\n", "self", ".", "assertTrue", "(", "is_empty", "(", "an_address_empty", ")", ")", "\n", "\n", "another_address_empty", "=", "''", "\n", "\n", "self", ".", "assertTrue", "(", "is_empty", "(", "another_address_empty", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.data_validation.test_data_validation.DataValidationTest.test_if_no_none_when_is_none_return_false": [[72, 80], ["test_data_validation.DataValidationTest.assertFalse", "test_data_validation.DataValidationTest.assertFalse", "deepparse.data_validation.is_none", "deepparse.data_validation.is_none"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.data_validation.data_validation.is_none", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.data_validation.data_validation.is_none"], ["", "def", "test_if_no_none_when_is_none_return_false", "(", "self", ")", ":", "\n", "        ", "an_address_not_empty", "=", "\"an address\"", "\n", "\n", "self", ".", "assertFalse", "(", "is_none", "(", "an_address_not_empty", ")", ")", "\n", "\n", "another_address_not_empty", "=", "\"address\"", "\n", "\n", "self", ".", "assertFalse", "(", "is_none", "(", "another_address_not_empty", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.data_validation.test_data_validation.DataValidationTest.test_if_no_none_when_is_none_return_true": [[81, 89], ["test_data_validation.DataValidationTest.assertTrue", "test_data_validation.DataValidationTest.assertTrue", "deepparse.data_validation.is_none", "deepparse.data_validation.is_none"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.data_validation.data_validation.is_none", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.data_validation.data_validation.is_none"], ["", "def", "test_if_no_none_when_is_none_return_true", "(", "self", ")", ":", "\n", "        ", "an_address_not_empty", "=", "None", "\n", "\n", "self", ".", "assertTrue", "(", "is_none", "(", "an_address_not_empty", ")", ")", "\n", "\n", "another_address_not_empty", "=", "None", "\n", "\n", "self", ".", "assertTrue", "(", "is_none", "(", "another_address_not_empty", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.comparer.formatted_compared_addresses.FormattedComparedAddresses.list_of_bool": [[38, 51], ["formatted_compared_addresses.FormattedComparedAddresses._bool_address_tags_are_the_same", "formatted_compared_addresses.FormattedComparedAddresses.first_address.to_list_of_tuples", "formatted_compared_addresses.FormattedComparedAddresses.second_address.to_list_of_tuples"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.comparer.formatted_compared_addresses.FormattedComparedAddresses._bool_address_tags_are_the_same", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.formatted_parsed_address.FormattedParsedAddress.to_list_of_tuples", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.formatted_parsed_address.FormattedParsedAddress.to_list_of_tuples"], ["@", "property", "\n", "def", "list_of_bool", "(", "self", ")", "->", "List", ":", "\n", "        ", "\"\"\"\n        A list of boolean that contains all the address components names and indicates if it is the same for the\n        two addresses.\n\n        Return:\n            A list of the boolean.\n        \"\"\"", "\n", "return", "self", ".", "_bool_address_tags_are_the_same", "(", "\n", "[", "\n", "self", ".", "first_address", ".", "to_list_of_tuples", "(", ")", ",", "\n", "self", ".", "second_address", ".", "to_list_of_tuples", "(", ")", ",", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.comparer.formatted_compared_addresses.FormattedComparedAddresses.equivalent": [[54, 63], ["all"], "methods", ["None"], ["", "@", "property", "\n", "def", "equivalent", "(", "self", ")", "->", "bool", ":", "\n", "        ", "\"\"\"\n        Check if the parsing is the same for the two addresses.\n\n        Return:\n            A bool.\n        \"\"\"", "\n", "return", "all", "(", "(", "bool_address", "[", "1", "]", "for", "bool_address", "in", "self", ".", "list_of_bool", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.comparer.formatted_compared_addresses.FormattedComparedAddresses.identical": [[64, 78], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "identical", "(", "self", ")", "->", "bool", ":", "\n", "        ", "\"\"\"\n        Check if the parsing is the same for the two addresses and if the raw addresses are identical.\n\n        Return:\n            A bool.\n        \"\"\"", "\n", "is_identical", "=", "False", "\n", "if", "self", ".", "equivalent", ":", "\n", "            ", "if", "self", ".", "first_address", ".", "raw_address", "==", "self", ".", "second_address", ".", "raw_address", ":", "\n", "                ", "is_identical", "=", "True", "\n", "\n", "", "", "return", "is_identical", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.comparer.formatted_compared_addresses.FormattedComparedAddresses.comparison_report": [[79, 84], ["sys.stdout.writelines", "formatted_compared_addresses.FormattedComparedAddresses._comparison_report"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.comparer.formatted_compared_addresses.FormattedComparedAddresses._comparison_report"], ["", "def", "comparison_report", "(", "self", ",", "nb_delimiters", ":", "Union", "[", "int", ",", "None", "]", "=", "None", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        Print a formatted comparison report of the two addresses.\n        \"\"\"", "\n", "sys", ".", "stdout", ".", "writelines", "(", "self", ".", "_comparison_report", "(", "nb_delimiters", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.comparer.formatted_compared_addresses.FormattedComparedAddresses._comparison_report": [[85, 99], ["formatted_compared_addresses.FormattedComparedAddresses._comparison_report_builder", "os.get_terminal_size"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.comparer.test_formatted_compared_addresses.AbstractFormattedComparedAddresses._comparison_report_builder"], ["", "def", "_comparison_report", "(", "self", ",", "nb_delimiters", ":", "Union", "[", "int", ",", "None", "]", ")", "->", "str", ":", "\n", "        ", "\"\"\"\n        Builds a comparison_report with delimiters to make the beginning and the end of the comparison easier to spot.\n        \"\"\"", "\n", "\n", "# Get terminal size to adapt the output to the user", "\n", "nb_delimiters", "=", "os", ".", "get_terminal_size", "(", ")", ".", "columns", "if", "nb_delimiters", "is", "None", "else", "nb_delimiters", "\n", "\n", "formatted_str", "=", "\"\"", "\n", "comparison_report_signal", "=", "\"=\"", "*", "nb_delimiters", "\n", "formatted_str", "+=", "comparison_report_signal", "+", "\"\\n\"", "\n", "formatted_str", "+=", "self", ".", "_comparison_report_builder", "(", ")", "\n", "formatted_str", "+=", "comparison_report_signal", "+", "\"\\n\\n\"", "\n", "return", "formatted_str", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.comparer.formatted_compared_addresses.FormattedComparedAddresses._comparison_report_builder": [[100, 107], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "_comparison_report_builder", "(", "self", ")", "->", "str", ":", "\n", "        ", "\"\"\"\n        Builds the core of a comparison report for the different comparisons. Since the procedure to make a tags\n        comparison and the raw addresses comparison is different, the comparison report is not the same for the two.\n        It is then implemented in each specific class.\n        \"\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.comparer.formatted_compared_addresses.FormattedComparedAddresses._get_probs": [[108, 114], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "_get_probs", "(", "self", ")", "->", "Dict", ":", "\n", "        ", "\"\"\"\n        Get the tags from the parsing with their associated probabilities, the method needs to be implemented in each\n        class because they don't use the probabilities the same way.\n        \"\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.comparer.formatted_compared_addresses.FormattedComparedAddresses._get_color_diff": [[115, 169], ["difflib.SequenceMatcher().get_opcodes", "difflib.SequenceMatcher", "white.format", "color_1.format", "color_2.format", "color_1.format", "color_2.format", "color_2.format", "color_1.format"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_get_color_diff", "(", "string_one", ":", "str", ",", "string_two", ":", "str", ",", "highlight", "=", "False", ")", "->", "str", ":", "\n", "        ", "\"\"\"\n        Compare two strings and determine the difference between the two. The differences are noted with colour code;\n        if the first string has more elements than the second one, it will be noted in one colour; on the contrary,\n        if the other string has something more, it will have a different colour notation.\n\n        Args:\n            string_one (str): The first string to compare.\n            string_two (str): The second string to compare.\n            highlight (bool, optional): If set to yes, the difference will be highlighted in colour instead of the\n                character itself in colour. This might be used to have information where the discrepancies between\n                two strings are spaces. The default is False.\n\n        Notes:\n            the method is colorblind-friendly, which means that the output will be\n            in colours that minimize the risk that a user cannot see the difference as\n            defined here https://davidmathlogic.com/colorblind/#%23D81B60-%231E88E5-%23FFC107-%23004D40.\n\n            If both the strings share the same character, it will be written in white.\n            If the first string has something more than the second one, it will be indicated in blue.\n            If the second string has something more than the first one, it will be noted in yellow.\n\n            It uses SequenceMatcher to get the different codes to be later converted into colour codes.\n\n        Return:\n            str: The two strings joined, and the differences are noted in colour codes\n        \"\"\"", "\n", "code_type", "=", "48", "if", "highlight", "else", "38", "\n", "\n", "color_1", "=", "\"\\033[{code_type};2;26;123;220m{text}\\033[0m\"", "# blue", "\n", "color_2", "=", "\"\\033[{code_type};2;255;194;10m{text}\\033[0m\"", "# yellow", "\n", "\n", "white", "=", "\"\\033[38;2;255;255;255m{text}\\033[0m\"", "\n", "\n", "result", "=", "\"\"", "\n", "codes", "=", "SequenceMatcher", "(", "a", "=", "string_one", ",", "b", "=", "string_two", ")", ".", "get_opcodes", "(", ")", "\n", "for", "code", "in", "codes", ":", "\n", "            ", "if", "code", "[", "0", "]", "==", "\"equal\"", ":", "\n", "                ", "result", "+=", "white", ".", "format", "(", "text", "=", "(", "string_one", "[", "code", "[", "1", "]", ":", "code", "[", "2", "]", "]", ")", ")", "\n", "", "elif", "code", "[", "0", "]", "==", "\"delete\"", ":", "\n", "                ", "result", "+=", "color_1", ".", "format", "(", "code_type", "=", "code_type", ",", "text", "=", "string_one", "[", "code", "[", "1", "]", ":", "code", "[", "2", "]", "]", ")", "\n", "", "elif", "code", "[", "0", "]", "==", "\"insert\"", ":", "\n", "                ", "result", "+=", "color_2", ".", "format", "(", "code_type", "=", "code_type", ",", "text", "=", "string_two", "[", "code", "[", "3", "]", ":", "code", "[", "4", "]", "]", ")", "\n", "", "elif", "code", "[", "0", "]", "==", "\"replace\"", ":", "\n", "                ", "if", "code", "[", "1", "]", "<=", "code", "[", "3", "]", ":", "\n", "                    ", "result", "+=", "color_1", ".", "format", "(", "code_type", "=", "code_type", ",", "text", "=", "string_one", "[", "code", "[", "1", "]", ":", "code", "[", "2", "]", "]", ")", "+", "color_2", ".", "format", "(", "\n", "code_type", "=", "code_type", ",", "text", "=", "string_two", "[", "code", "[", "3", "]", ":", "code", "[", "4", "]", "]", "\n", ")", "\n", "", "else", ":", "\n", "                    ", "result", "+=", "color_2", ".", "format", "(", "code_type", "=", "code_type", ",", "text", "=", "string_two", "[", "code", "[", "3", "]", ":", "code", "[", "4", "]", "]", ")", "+", "color_1", ".", "format", "(", "\n", "code_type", "=", "code_type", ",", "text", "=", "string_one", "[", "code", "[", "1", "]", ":", "code", "[", "2", "]", "]", "\n", ")", "\n", "", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.comparer.formatted_compared_addresses.FormattedComparedAddresses._get_tags_diff_color": [[170, 218], ["formatted_compared_addresses.FormattedComparedAddresses._get_color_diff", "formatted_compared_addresses.FormattedComparedAddresses.first_address.to_list_of_tuples", "formatted_compared_addresses.FormattedComparedAddresses.second_address.to_list_of_tuples", "list_of_list_tag.append"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.comparer.formatted_compared_addresses.FormattedComparedAddresses._get_color_diff", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.formatted_parsed_address.FormattedParsedAddress.to_list_of_tuples", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.formatted_parsed_address.FormattedParsedAddress.to_list_of_tuples"], ["", "def", "_get_tags_diff_color", "(", "\n", "self", ",", "\n", "name_one", ":", "str", "=", "\"first address\"", ",", "\n", "name_two", ":", "str", "=", "\"second address\"", ",", "\n", "verbose", "=", "True", ",", "\n", ")", "->", "str", ":", "\n", "        ", "\"\"\"\n        Print the output of the string with colour codes that represent the differences between the two strings.\n\n        Args:\n            name_one (str, optional) : Name associated with first color. The default value is the first address.\n            name_two (str, optional) : Name associated with second color. The default value is the second address.\n            verbose (bool, optional): If True, it will print a presentation of the colours and what they mean.\n                The default value is True.\n\n        \"\"\"", "\n", "\n", "formatted_str", "=", "\"\"", "\n", "if", "verbose", ":", "\n", "            ", "formatted_str", "+=", "\"White: Shared\\n\"", "\n", "formatted_str", "+=", "\"Blue: Belongs only to the \"", "+", "name_one", "+", "\"\\n\"", "\n", "formatted_str", "+=", "\"Yellow: Belongs only to the \"", "+", "name_two", "+", "\"\\n\"", "\n", "formatted_str", "+=", "\"\\n\"", "\n", "\n", "", "address_component_names", "=", "[", "tag", "[", "0", "]", "for", "tag", "in", "self", ".", "list_of_bool", "if", "not", "tag", "[", "1", "]", "]", "\n", "\n", "for", "address_component_name", "in", "address_component_names", ":", "\n", "            ", "list_of_list_tag", "=", "[", "]", "\n", "for", "parsed_address", "in", "[", "\n", "self", ".", "first_address", ".", "to_list_of_tuples", "(", ")", ",", "\n", "self", ".", "second_address", ".", "to_list_of_tuples", "(", ")", ",", "\n", "]", ":", "\n", "                ", "list_of_list_tag", ".", "append", "(", "\n", "\" \"", ".", "join", "(", "\n", "[", "\n", "tag", "\n", "for", "(", "tag", ",", "tag_name", ")", "in", "parsed_address", "\n", "if", "tag_name", "==", "address_component_name", "and", "tag", "is", "not", "None", "\n", "]", "\n", ")", "\n", ")", "\n", "\n", "", "result", "=", "self", ".", "_get_color_diff", "(", "list_of_list_tag", "[", "0", "]", ",", "list_of_list_tag", "[", "1", "]", ")", "\n", "\n", "formatted_str", "+=", "address_component_name", "+", "\": \\n\"", "\n", "formatted_str", "+=", "result", "+", "\"\\n\"", "\n", "\n", "", "return", "formatted_str", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.comparer.formatted_compared_addresses.FormattedComparedAddresses._bool_address_tags_are_the_same": [[219, 255], ["formatted_compared_addresses.FormattedComparedAddresses._unique_addresses_component_names", "list_of_bool_and_tag.append", "list_of_list_tag.append", "all"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.comparer.formatted_compared_addresses.FormattedComparedAddresses._unique_addresses_component_names"], ["", "def", "_bool_address_tags_are_the_same", "(", "self", ",", "parsed_addresses", ":", "Union", "[", "List", "[", "List", "[", "tuple", "]", "]", ",", "List", "[", "tuple", "]", "]", ")", "->", "List", "[", "tuple", "]", ":", "\n", "        ", "\"\"\"\n        Compare addresses components and put the differences in a dictionary where the keys are the\n        names of the addresses components, and the values are the value of the addresses component.\n\n        Args:\n            parsed_addresses (Union[List[List[tuple]], List[tuple]]): Contains the tags and the\n            address components name for the parsed addresses.\n\n        Return:\n            List[tuple]: List of tuples that contains all addresses components that differ from each other.\n        \"\"\"", "\n", "unique_address_component_names", "=", "self", ".", "_unique_addresses_component_names", "(", "parsed_addresses", ")", "\n", "\n", "list_of_bool_and_tag", "=", "[", "]", "\n", "for", "address_component_name", "in", "unique_address_component_names", ":", "\n", "            ", "list_of_list_tag", "=", "[", "]", "\n", "for", "parsed_address", "in", "parsed_addresses", ":", "\n", "                ", "list_of_list_tag", ".", "append", "(", "\n", "\" \"", ".", "join", "(", "\n", "[", "\n", "tag", "\n", "for", "(", "tag", ",", "tag_name", ")", "in", "parsed_address", "\n", "if", "tag_name", "==", "address_component_name", "and", "tag", "is", "not", "None", "\n", "]", "\n", ")", "\n", ")", "\n", "\n", "", "list_of_bool_and_tag", ".", "append", "(", "\n", "(", "\n", "address_component_name", ",", "\n", "all", "(", "x", "==", "list_of_list_tag", "[", "0", "]", "for", "x", "in", "list_of_list_tag", ")", ",", "\n", ")", "\n", ")", "\n", "\n", "", "return", "list_of_bool_and_tag", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.comparer.formatted_compared_addresses.FormattedComparedAddresses._unique_addresses_component_names": [[256, 276], ["unique_address_component_names.append"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_unique_addresses_component_names", "(", "parsed_addresses", ":", "List", "[", "List", "[", "tuple", "]", "]", ")", "->", "List", ":", "\n", "        ", "\"\"\"\n        Retrieves all the unique address components names from the comparison then returns it.\n\n        Args:\n            parsed_addresses (List[List[tuple]]): Contains the tags and the\n            address components name for the parsed addresses.\n\n        Return:\n            Returns a list of all the unique address components names.\n        \"\"\"", "\n", "# Here we don't use a set since order will change and report will also change.", "\n", "unique_address_component_names", "=", "[", "]", "\n", "for", "tuple_values", "in", "parsed_addresses", ":", "\n", "            ", "for", "address_component", "in", "tuple_values", ":", "\n", "                ", "address_component", "=", "address_component", "[", "1", "]", "\n", "if", "address_component", "not", "in", "unique_address_component_names", ":", "\n", "                    ", "unique_address_component_names", ".", "append", "(", "address_component", ")", "\n", "", "", "", "return", "unique_address_component_names", "\n", "", "", ""]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.comparer.formatted_compared_addresses_tags.FormattedComparedAddressesTags._get_probs": [[13, 21], ["None"], "methods", ["None"], ["def", "_get_probs", "(", "self", ")", "->", "Dict", ":", "\n", "        ", "\"\"\"\n        Get the tags from the parsing with their associated probabilities, the method needs to be implemented in each\n        class because they don't use the probabilities the same way.\n        \"\"\"", "\n", "return", "{", "\n", "self", ".", "origin", "[", "0", "]", ":", "self", ".", "first_address", ".", "address_parsed_components", ",", "\n", "self", ".", "origin", "[", "1", "]", ":", "self", ".", "second_address", ".", "address_parsed_components", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.comparer.formatted_compared_addresses_tags.FormattedComparedAddressesTags._get_probs_of_tags": [[23, 37], ["enumerate", "formatted_compared_addresses_tags.FormattedComparedAddressesTags._get_probs().items", "str", "formatted_compared_addresses_tags.FormattedComparedAddressesTags._get_probs"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.comparer.test_formatted_compared_addresses.AbstractFormattedComparedAddresses._get_probs"], ["", "def", "_get_probs_of_tags", "(", "self", ",", "verbose", ":", "bool", "=", "True", ")", "->", "str", ":", "\n", "        ", "\"\"\"\n        Takes the tags and their probabilities for the report.\n        \"\"\"", "\n", "formatted_str", "=", "\"\"", "\n", "if", "verbose", ":", "\n", "            ", "formatted_str", "+=", "\"Probabilities of parsed tags: \\n\"", "\n", "", "for", "index", ",", "tuple_dict", "in", "enumerate", "(", "self", ".", "_get_probs", "(", ")", ".", "items", "(", ")", ")", ":", "\n", "            ", "key", ",", "value", "=", "tuple_dict", "\n", "formatted_str", "+=", "key", "+", "\": \"", "\n", "formatted_str", "+=", "str", "(", "value", ")", "+", "\"\\n\"", "\n", "if", "index", "==", "0", ":", "\n", "                ", "formatted_str", "+=", "\"\\n\"", "\n", "", "", "return", "formatted_str", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.comparer.formatted_compared_addresses_tags.FormattedComparedAddressesTags._comparison_report_builder": [[38, 66], ["formatted_compared_addresses_tags.FormattedComparedAddressesTags._get_probs_of_tags", "formatted_compared_addresses_tags.FormattedComparedAddressesTags._get_tags_diff_color", "str", "str", "formatted_compared_addresses_tags.FormattedComparedAddressesTags.first_address.to_list_of_tuples", "formatted_compared_addresses_tags.FormattedComparedAddressesTags.second_address.to_list_of_tuples"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.comparer.formatted_compared_addresses_tags.FormattedComparedAddressesTags._get_probs_of_tags", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.comparer.formatted_compared_addresses.FormattedComparedAddresses._get_tags_diff_color", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.formatted_parsed_address.FormattedParsedAddress.to_list_of_tuples", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.formatted_parsed_address.FormattedParsedAddress.to_list_of_tuples"], ["", "def", "_comparison_report_builder", "(", "self", ")", "->", "str", ":", "\n", "        ", "\"\"\"\n        Builds the core of a comparison report for the different comparisons. Since the procedure to make a tags\n        comparison and the raw addresses comparison is different, the comparison report is not the same for the two.\n        It is then implemented in each specific class.\n        \"\"\"", "\n", "\n", "formatted_str", "=", "\"\"", "\n", "intro_str", "=", "\"Comparison report of tags for parsed address: \"", "\n", "if", "self", ".", "identical", ":", "\n", "            ", "formatted_str", "+=", "intro_str", "+", "\"Identical\\n\\n\"", "\n", "", "else", ":", "\n", "            ", "formatted_str", "+=", "intro_str", "+", "\"Not equivalent\\n\\n\"", "\n", "", "formatted_str", "+=", "\"Raw address: \"", "+", "self", ".", "first_address", ".", "raw_address", "+", "\"\\n\\n\\n\"", "\n", "\n", "formatted_str", "+=", "\"Tags: \\n\"", "\n", "formatted_str", "+=", "self", ".", "origin", "[", "0", "]", "+", "\": \"", "+", "str", "(", "self", ".", "first_address", ".", "to_list_of_tuples", "(", ")", ")", "+", "\"\\n\\n\"", "\n", "formatted_str", "+=", "self", ".", "origin", "[", "1", "]", "+", "\": \"", "+", "str", "(", "self", ".", "second_address", ".", "to_list_of_tuples", "(", ")", ")", "+", "\"\\n\\n\\n\"", "\n", "\n", "if", "self", ".", "with_prob", ":", "\n", "            ", "formatted_str", "+=", "self", ".", "_get_probs_of_tags", "(", ")", "\n", "\n", "", "if", "not", "self", ".", "identical", ":", "\n", "            ", "formatted_str", "+=", "\"\\n\"", "\n", "formatted_str", "+=", "\"Addresses tags differences between the two parsing:\\n\"", "\n", "formatted_str", "+=", "self", ".", "_get_tags_diff_color", "(", "self", ".", "origin", "[", "0", "]", ",", "self", ".", "origin", "[", "1", "]", ")", "\n", "\n", "", "return", "formatted_str", "\n", "", "", ""]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.comparer.addresses_comparer.AddressesComparer.__str__": [[30, 33], ["addresses_comparer.AddressesComparer.parser.get_formatted_model_name"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.address_parser.AddressParser.get_formatted_model_name"], ["def", "__str__", "(", "self", ")", "->", "str", ":", "\n", "        ", "model_type_formatted", "=", "self", ".", "parser", ".", "get_formatted_model_name", "(", ")", "\n", "return", "f\"Compare addresses with {model_type_formatted}AddressParser\"", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.comparer.addresses_comparer.AddressesComparer.compare_tags": [[36, 118], ["isinstance", "list", "addresses_comparer.AddressesComparer.parser.model_type.capitalize", "addresses_comparer.AddressesComparer._format_comparisons_dict", "any", "parser.formatted_parsed_address.FormattedParsedAddress", "addresses_comparer.AddressesComparer.parser", "zip", "formatted_compared_addresses_tags.FormattedComparedAddressesTags", "zip", "len", "addresses_comparer.AddressesComparer._check_if_with_prob"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.comparer.addresses_comparer.AddressesComparer._format_comparisons_dict", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.comparer.addresses_comparer.AddressesComparer._check_if_with_prob"], ["def", "compare_tags", "(", "\n", "self", ",", "\n", "addresses_tags_to_compare", ":", "Union", "[", "List", "[", "tuple", "]", ",", "List", "[", "List", "[", "tuple", "]", "]", "]", ",", "\n", "with_prob", ":", "Union", "[", "None", ",", "bool", "]", "=", "None", ",", "\n", ")", "->", "Union", "[", "List", "[", "FormattedComparedAddressesTags", "]", ",", "FormattedComparedAddressesTags", "]", ":", "\n", "        ", "\"\"\"\n        Compare tags of a source parsing with the parsing from AddressParser. First, it reconstructs the\n        raw address from the parsing, then AddressParser generates tags and then compares the two parsings.\n\n        Args:\n            addresses_tags_to_compare (Union[List[tuple], List[List[tuple]]]): list of tuple that contains\n            the tags for the address components from the source. Can compare multiples parsings if passed as a\n            list of tuples.\n            with_prob (Union[None, bool]): A option flag to either or not include prob in the comparison report.\n                The probabilities are not compared but only included in the report.\n                The default value is None, which means not taking into account.\n\n        Return:\n            Either a :class:`~FormattedComparedAddressesTags` or a list of :class:`~FormattedComparedAddressTags`\n            when there is more than one comparison to make.\n\n        Examples:\n\n            .. code-block:: python\n\n                first_parsed_address = [\n                    (\"350\", \"StreetNumber\"),\n                    (\"rue des Lilas\", \"StreetName\"),\n                    (\"Ouest Qu\u00e9bec\", \"Municipality\"),\n                    (\"Qu\u00e9bec\", \"Province\"),\n                    (\"G1L 1B6\", \"PostalCode\")]\n                second_parsed_address_with_prob = [\n                    ('350', ('StreetNumber', 1.0)),\n                    ('rue', ('StreetName', 0.9987)),\n                    ('des', ('StreetName', 0.9993)),\n                    ('Lilas', ('StreetName', 0.8176)),\n                    ('Ouest', ('Orientation', 0.781)),\n                    ('Quebec', ('Municipality', 0.9768)),\n                    ('Quebec', ('Province', 1.0)),\n                    ('G1L', ('PostalCode', 0.9993)),\n                    ('1B6', ('PostalCode', 1.0))]\n\n                address_parser = AddressParser(model_type=\"bpemb\")\n                addresses_comparer = AddressesComparer(address_parser)\n\n                list_of_compared_addresses = addresses_comparer.compare_tags([first_parsed_address,\n                                                                              second_parsed_address_with_prob])\n                list_of_compared_addresses[0].comparison_report()\n                list_of_compared_addresses[1].comparison_report()\n\n        \"\"\"", "\n", "\n", "if", "isinstance", "(", "addresses_tags_to_compare", "[", "0", "]", ",", "tuple", ")", ":", "\n", "            ", "addresses_tags_to_compare", "=", "[", "addresses_tags_to_compare", "]", "\n", "\n", "", "with_prob", "=", "(", "\n", "any", "(", "(", "self", ".", "_check_if_with_prob", "(", "address", ")", "for", "address", "in", "addresses_tags_to_compare", ")", ")", "\n", "if", "with_prob", "is", "None", "\n", "else", "with_prob", "\n", ")", "\n", "\n", "raw_addresses", "=", "[", "\" \"", ".", "join", "(", "[", "element", "[", "0", "]", "for", "element", "in", "address", "]", ")", "for", "address", "in", "addresses_tags_to_compare", "]", "\n", "\n", "formatted_addresses", "=", "[", "\n", "FormattedParsedAddress", "(", "{", "raw_address", ":", "address_tags", "}", ")", "\n", "for", "raw_address", ",", "address_tags", "in", "zip", "(", "raw_addresses", ",", "addresses_tags_to_compare", ")", "\n", "]", "\n", "\n", "deepparsed_formatted_addresses", "=", "[", "\n", "self", ".", "parser", "(", "raw_address", ",", "with_prob", "=", "with_prob", ")", "for", "raw_address", "in", "raw_addresses", "\n", "]", "\n", "\n", "comparison_tuples", "=", "list", "(", "zip", "(", "formatted_addresses", ",", "deepparsed_formatted_addresses", ")", ")", "\n", "\n", "parsing_model", "=", "self", ".", "parser", ".", "model_type", ".", "capitalize", "(", ")", "\n", "origin_tuple", "=", "(", "\"source\"", ",", "\"deepparse using \"", "+", "parsing_model", ")", "\n", "list_of_comparison_dict", "=", "self", ".", "_format_comparisons_dict", "(", "comparison_tuples", ",", "origin_tuple", ",", "with_prob", ")", "\n", "\n", "formatted_comparisons", "=", "[", "\n", "FormattedComparedAddressesTags", "(", "**", "comparison_info", ")", "for", "comparison_info", "in", "list_of_comparison_dict", "\n", "]", "\n", "return", "formatted_comparisons", "if", "len", "(", "formatted_comparisons", ")", ">", "1", "else", "formatted_comparisons", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.comparer.addresses_comparer.AddressesComparer.compare_raw": [[119, 183], ["isinstance", "addresses_comparer.AddressesComparer.parser.model_type.capitalize", "addresses_comparer.AddressesComparer._format_comparisons_dict", "list_of_deepparsed_addresses.append", "formatted_compared_addresses_raw.FormattedComparedAddressesRaw", "len", "ValueError", "addresses_comparer.AddressesComparer.parser", "len"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.comparer.addresses_comparer.AddressesComparer._format_comparisons_dict"], ["", "def", "compare_raw", "(", "\n", "self", ",", "\n", "raw_addresses_to_compare", ":", "Union", "[", "Tuple", "[", "str", "]", ",", "List", "[", "Tuple", "[", "str", "]", "]", "]", ",", "\n", "with_prob", ":", "Union", "[", "None", ",", "bool", "]", "=", "None", ",", "\n", ")", "->", "List", "[", "FormattedComparedAddressesRaw", "]", ":", "\n", "        ", "\"\"\"\n        Compare a list of raw addresses together, it starts by parsing the addresses\n        with the setted parser and then return the differences between the addresses components\n        retrieved with our model.\n\n        Args:\n            raw_addresses_to_compare (Union[Tuple[str], List[Tuple[str]]]):\n                List of string that represent raw addresses to compare.\n            with_prob (Union[None, bool]): A option flag to either or not include prob in the comparison report.\n                The probabilities are not compared but only included in the report.\n                The default value is None, which means not taking into account.\n\n        Return:\n            Either a :class:`~FormattedComparedAddressesRaw` or a list of\n            :class:`~FormattedComparedAddressesRaw` when given more than one comparison to make.\n\n        Examples:\n\n            .. code-block:: python\n\n                raw_address_original = \"350 rue des Lilas Ouest Quebec Quebec G1L 1B6\"\n                raw_address_identical = \"350 rue des Lilas Ouest Quebec Quebec G1L 1B6\"\n                raw_address_equivalent = \"350  rue des Lilas Ouest Quebec Quebec G1L 1B6\"\n                raw_address_diff_streetNumber = \"450 rue des Lilas Ouest Quebec Quebec G1L 1B6\"\n\n                raw_addresses_multiples_comparisons = addresses_comparer.compare_raw([(raw_address_original,\n                                                                                       raw_address_identical),\n                                                                                      (raw_address_original,\n                                                                                       raw_address_equivalent),\n                                                                                      (raw_address_original,\n                                                                                       raw_address_diff_streetNumber)])\n                raw_addresses_multiples_comparisons[0].comparison_report()\n                raw_addresses_multiples_comparisons[1].comparison_report()\n                raw_addresses_multiples_comparisons[2].comparison_report()\n\n        \"\"\"", "\n", "if", "isinstance", "(", "raw_addresses_to_compare", "[", "0", "]", ",", "str", ")", ":", "\n", "            ", "raw_addresses_to_compare", "=", "[", "raw_addresses_to_compare", "]", "\n", "\n", "", "with_prob", "=", "True", "if", "with_prob", "is", "None", "else", "with_prob", "\n", "\n", "list_of_deepparsed_addresses", "=", "[", "]", "\n", "for", "addresses_to_compare", "in", "raw_addresses_to_compare", ":", "\n", "            ", "if", "len", "(", "addresses_to_compare", ")", "!=", "2", ":", "\n", "                ", "raise", "ValueError", "(", "\"You need to compare two addresses\"", ")", "\n", "", "list_of_deepparsed_addresses", ".", "append", "(", "self", ".", "parser", "(", "addresses_to_compare", ",", "with_prob", "=", "with_prob", ")", ")", "\n", "\n", "", "parsing_model", "=", "self", ".", "parser", ".", "model_type", ".", "capitalize", "(", ")", "\n", "origin_tuple", "=", "(", "\n", "\"deepparse using \"", "+", "parsing_model", ",", "\n", "\"deepparse using \"", "+", "parsing_model", ",", "\n", ")", "\n", "list_of_comparison_dict", "=", "self", ".", "_format_comparisons_dict", "(", "list_of_deepparsed_addresses", ",", "origin_tuple", ",", "with_prob", ")", "\n", "\n", "formatted_comparisons", "=", "[", "\n", "FormattedComparedAddressesRaw", "(", "**", "comparison_info", ")", "for", "comparison_info", "in", "list_of_comparison_dict", "\n", "]", "\n", "\n", "return", "formatted_comparisons", "if", "len", "(", "formatted_comparisons", ")", ">", "1", "else", "formatted_comparisons", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.comparer.addresses_comparer.AddressesComparer._format_comparisons_dict": [[184, 204], ["list_of_formatted_comparisons_dict.append"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_format_comparisons_dict", "(", "comparison_tuples", ":", "List", ",", "origin_tuple", ":", "Tuple", "[", "str", ",", "str", "]", ",", "with_prob", ":", "bool", ")", "->", "List", "[", "Dict", "]", ":", "\n", "        ", "\"\"\"\n        Return formatted dict that contains two FormattedParsedAddress and the origin name tuple and output it in a\n        dict format.\n        \"\"\"", "\n", "\n", "list_of_formatted_comparisons_dict", "=", "[", "]", "\n", "\n", "for", "comparison_tuple", "in", "comparison_tuples", ":", "\n", "            ", "comparison_info", "=", "{", "\n", "\"first_address\"", ":", "comparison_tuple", "[", "0", "]", ",", "\n", "\"second_address\"", ":", "comparison_tuple", "[", "1", "]", ",", "\n", "\"origin\"", ":", "origin_tuple", ",", "\n", "\"with_prob\"", ":", "with_prob", ",", "\n", "}", "\n", "\n", "list_of_formatted_comparisons_dict", ".", "append", "(", "comparison_info", ")", "\n", "\n", "", "return", "list_of_formatted_comparisons_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.comparer.addresses_comparer.AddressesComparer._check_if_with_prob": [[205, 208], ["isinstance", "len"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_check_if_with_prob", "(", "list_of_tuple", ")", ":", "\n", "        ", "return", "len", "(", "list_of_tuple", "[", "0", "]", "[", "1", "]", ")", "==", "2", "and", "isinstance", "(", "list_of_tuple", "[", "0", "]", "[", "1", "]", "[", "1", "]", ",", "float", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.comparer.formatted_compared_addresses_raw.FormattedComparedAddressesRaw._get_probs": [[13, 21], ["None"], "methods", ["None"], ["def", "_get_probs", "(", "self", ")", "->", "Dict", ":", "\n", "        ", "\"\"\"\n        Get the tags from the parsing with their associated probabilities, the method needs to be implemented in each\n        class because they don't use the probabilities the same way.\n        \"\"\"", "\n", "return", "{", "\n", "self", ".", "first_address", ".", "raw_address", ":", "self", ".", "first_address", ".", "address_parsed_components", ",", "\n", "self", ".", "second_address", ".", "raw_address", ":", "self", ".", "second_address", ".", "address_parsed_components", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.comparer.formatted_compared_addresses_raw.FormattedComparedAddressesRaw._get_raw_diff_color": [[23, 45], ["formatted_compared_addresses_raw.FormattedComparedAddressesRaw._get_color_diff"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.comparer.formatted_compared_addresses.FormattedComparedAddresses._get_color_diff"], ["", "def", "_get_raw_diff_color", "(", "self", ",", "verbose", "=", "True", ")", "->", "str", ":", "\n", "        ", "\"\"\"\n        Print the raw addresses and highlight the differences between them.\n        \"\"\"", "\n", "\n", "str_formatted", "=", "\"\"", "\n", "\n", "if", "verbose", ":", "\n", "            ", "str_formatted", "+=", "\"White: Shared\\n\"", "\n", "str_formatted", "+=", "\"Blue: Belongs only to the first address\\n\"", "\n", "str_formatted", "+=", "\"Yellow: Belongs only to the second address\\n\"", "\n", "str_formatted", "+=", "\"\\n\"", "\n", "\n", "", "str_formatted", "+=", "(", "\n", "self", ".", "_get_color_diff", "(", "\n", "self", ".", "first_address", ".", "raw_address", ",", "\n", "self", ".", "second_address", ".", "raw_address", ",", "\n", "highlight", "=", "True", ",", "\n", ")", "\n", "+", "\"\\n\"", "\n", ")", "\n", "return", "str_formatted", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.comparer.formatted_compared_addresses_raw.FormattedComparedAddressesRaw._comparison_report_builder": [[46, 85], ["list", "formatted_compared_addresses_raw.FormattedComparedAddressesRaw._get_probs().values", "str", "repr", "str", "formatted_compared_addresses_raw.FormattedComparedAddressesRaw._get_raw_diff_color", "formatted_compared_addresses_raw.FormattedComparedAddressesRaw._get_tags_diff_color", "formatted_compared_addresses_raw.FormattedComparedAddressesRaw._get_probs", "repr"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.comparer.formatted_compared_addresses_raw.FormattedComparedAddressesRaw._get_raw_diff_color", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.comparer.formatted_compared_addresses.FormattedComparedAddresses._get_tags_diff_color", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.comparer.test_formatted_compared_addresses.AbstractFormattedComparedAddresses._get_probs"], ["", "def", "_comparison_report_builder", "(", "self", ")", "->", "str", ":", "\n", "        ", "\"\"\"\n        Builds the core of a comparison report for the different comparisons. Since the procedure to make a tags\n        comparison and the raw addresses comparison is different, the comparison report is not the same for the two.\n        It is then implemented in each specific class.\n        \"\"\"", "\n", "str_formatted", "=", "\"\"", "\n", "intro_str", "=", "\"Comparison report of the two raw addresses: \"", "\n", "if", "self", ".", "identical", ":", "\n", "            ", "str_formatted", "+=", "intro_str", "+", "\"Identical\\n\\n\"", "\n", "str_formatted", "+=", "\"Address : \"", "+", "self", ".", "first_address", ".", "raw_address", "+", "\"\\n\\n\\n\"", "\n", "", "else", ":", "\n", "            ", "if", "self", ".", "equivalent", ":", "\n", "                ", "str_formatted", "+=", "intro_str", "+", "\"Equivalent\\n\\n\"", "\n", "", "else", ":", "\n", "                ", "str_formatted", "+=", "intro_str", "+", "\"Not equivalent\\n\\n\"", "\n", "\n", "", "str_formatted", "+=", "\"First address : \"", "+", "self", ".", "first_address", ".", "raw_address", "+", "\"\\n\"", "\n", "str_formatted", "+=", "\"and\\n\"", "\n", "str_formatted", "+=", "\"Second address: \"", "+", "self", ".", "second_address", ".", "raw_address", "+", "\"\\n\\n\\n\"", "\n", "", "str_formatted", "+=", "\"Probabilities of parsed tags for the addresses with \"", "+", "self", ".", "origin", "[", "0", "]", "+", "\": \\n\\n\"", "\n", "probs", "=", "list", "(", "self", ".", "_get_probs", "(", ")", ".", "values", "(", ")", ")", "\n", "str_formatted", "+=", "\"Parsed address: \"", "+", "repr", "(", "self", ".", "first_address", ")", "+", "\"\\n\"", "\n", "str_formatted", "+=", "str", "(", "probs", "[", "0", "]", ")", "+", "\"\\n\"", "\n", "if", "not", "self", ".", "identical", ":", "\n", "\n", "            ", "str_formatted", "+=", "\"\\nParsed address: \"", "+", "repr", "(", "self", ".", "second_address", ")", "+", "\"\\n\"", "\n", "str_formatted", "+=", "str", "(", "probs", "[", "1", "]", ")", "+", "\"\\n\"", "\n", "\n", "if", "self", ".", "equivalent", ":", "\n", "\n", "                ", "str_formatted", "+=", "\"\\n\\nRaw differences between the two addresses: \\n\"", "\n", "str_formatted", "+=", "self", ".", "_get_raw_diff_color", "(", ")", "\n", "", "else", ":", "\n", "\n", "                ", "str_formatted", "+=", "\"\\n\\nAddresses tags differences between the two addresses: \\n\"", "\n", "str_formatted", "+=", "self", ".", "_get_tags_diff_color", "(", ")", "\n", "\n", "", "", "return", "str_formatted", "\n", "", "", ""]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.comparer.test_addresses_comparer.TestAdressesComparer.setUpClass": [[13, 47], ["None"], "methods", ["None"], ["    ", "@", "classmethod", "\n", "def", "setUpClass", "(", "cls", ")", ":", "\n", "        ", "cls", ".", "model_type", "=", "\"bpemb\"", "\n", "\n", "cls", ".", "raw_address_original", "=", "\"350 rue des Lilas Ouest Quebec Quebec G1L 1B6\"", "\n", "cls", ".", "raw_address_original_parsed", "=", "[", "\n", "(", "\"350\"", ",", "\"StreetNumber\"", ")", ",", "\n", "(", "\"rue des Lilas\"", ",", "\"StreetName\"", ")", ",", "\n", "(", "\"Ouest\"", ",", "\"Orientation\"", ")", ",", "\n", "(", "\"Qu\u00e9bec\"", ",", "\"Municipality\"", ")", ",", "\n", "(", "\"Qu\u00e9bec\"", ",", "\"Province\"", ")", ",", "\n", "(", "\"G1L 1B6\"", ",", "\"PostalCode\"", ")", ",", "\n", "]", "\n", "\n", "cls", ".", "tagged_addresses_components_with_prob", "=", "[", "\n", "(", "\"305\"", ",", "(", "\"StreetNumber\"", ",", "1.0", ")", ")", ",", "\n", "(", "\"rue\"", ",", "(", "\"StreetName\"", ",", "0.9989", ")", ")", ",", "\n", "(", "\"des\"", ",", "(", "\"StreetName\"", ",", "0.9998", ")", ")", ",", "\n", "(", "\"Lilas\"", ",", "(", "\"StreetName\"", ",", "0.9343", ")", ")", ",", "\n", "(", "\"Ouest\"", ",", "(", "\"Municipality\"", ",", "0.781", ")", ")", ",", "\n", "(", "\"Qu\u00e9bec\"", ",", "(", "\"Municipality\"", ",", "0.9467", ")", ")", ",", "\n", "(", "\"Qu\u00e9bec\"", ",", "(", "\"Province\"", ",", "1.0", ")", ")", ",", "\n", "(", "\"G1L\"", ",", "(", "\"PostalCode\"", ",", "0.9997", ")", ")", ",", "\n", "(", "\"1B6\"", ",", "(", "\"PostalCode\"", ",", "1.0", ")", ")", ",", "\n", "]", "\n", "cls", ".", "tagged_addresses_components", "=", "[", "\n", "(", "\"305\"", ",", "\"StreetNumber\"", ")", ",", "\n", "(", "\"rue des Lilas\"", ",", "\"StreetName\"", ")", ",", "\n", "(", "None", ",", "\"Unit\"", ")", ",", "\n", "(", "\"Ouest Qu\u00e9bec\"", ",", "\"Municipality\"", ")", ",", "\n", "(", "\"Qu\u00e9bec\"", ",", "\"Province\"", ")", ",", "\n", "(", "\"G1L 1B6\"", ",", "\"PostalCode\"", ")", ",", "\n", "(", "None", ",", "\"Orientation\"", ")", ",", "\n", "(", "None", ",", "\"GeneralDelivery\"", ")", ",", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.comparer.test_addresses_comparer.TestAdressesComparer.setup_address_parser_mock": [[49, 56], ["unittest.mock.MagicMock", "unittest.mock.MagicMock.__call__"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.timer.timer.Timer.__call__"], ["", "def", "setup_address_parser_mock", "(", "self", ",", "comparison_list", ",", "formatted_model_type_value", "=", "\"BPEmb\"", ")", ":", "\n", "        ", "address_parser_mock", "=", "MagicMock", "(", ")", "\n", "\n", "address_parser_mock", ".", "__call__", "(", ")", ".", "return_value", "=", "comparison_list", "\n", "address_parser_mock", ".", "get_formatted_model_name", ".", "return_value", "=", "formatted_model_type_value", "\n", "\n", "return", "address_parser_mock", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.comparer.test_addresses_comparer.TestAdressesComparer.test_givenARawAddress_whenCompareRaw_thenReturnProperClass": [[57, 73], ["test_addresses_comparer.TestAdressesComparer.setup_address_parser_mock", "deepparse.comparer.addresses_comparer.AddressesComparer", "deepparse.comparer.addresses_comparer.AddressesComparer.compare_raw", "test_addresses_comparer.TestAdressesComparer.assertIsInstance"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.comparer.test_addresses_comparer.TestAdressesComparer.setup_address_parser_mock", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.comparer.addresses_comparer.AddressesComparer.compare_raw"], ["", "def", "test_givenARawAddress_whenCompareRaw_thenReturnProperClass", "(", "self", ")", ":", "\n", "        ", "raw_address_identical", "=", "\"350 rue des Lilas Ouest Quebec Quebec G1L 1B6\"", "\n", "\n", "raw_address_identical_parsed", "=", "[", "\n", "(", "\"350\"", ",", "\"StreetNumber\"", ")", ",", "\n", "(", "\"rue des Lilas\"", ",", "\"StreetName\"", ")", ",", "\n", "(", "\"Ouest\"", ",", "\"Orientation\"", ")", ",", "\n", "(", "\"Qu\u00e9bec\"", ",", "\"Municipality\"", ")", ",", "\n", "(", "\"Qu\u00e9bec\"", ",", "\"Province\"", ")", ",", "\n", "(", "\"G1L 1B6\"", ",", "\"PostalCode\"", ")", ",", "\n", "]", "\n", "\n", "mocked_parser", "=", "self", ".", "setup_address_parser_mock", "(", "[", "self", ".", "raw_address_original_parsed", ",", "raw_address_identical_parsed", "]", ")", "\n", "address_comparer", "=", "AddressesComparer", "(", "mocked_parser", ")", "\n", "raw_one_comparison", "=", "address_comparer", ".", "compare_raw", "(", "(", "self", ".", "raw_address_original", ",", "raw_address_identical", ")", ")", "\n", "self", ".", "assertIsInstance", "(", "raw_one_comparison", ",", "FormattedComparedAddressesRaw", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.comparer.test_addresses_comparer.TestAdressesComparer.test_givenMultipleRawAddresses_whenCompareRaw_thenReturnProperClass": [[74, 117], ["test_addresses_comparer.TestAdressesComparer.setup_address_parser_mock", "deepparse.comparer.addresses_comparer.AddressesComparer", "deepparse.comparer.addresses_comparer.AddressesComparer.compare_raw", "test_addresses_comparer.TestAdressesComparer.assertIsInstance", "test_addresses_comparer.TestAdressesComparer.assertIsInstance", "test_addresses_comparer.TestAdressesComparer.assertIsInstance"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.comparer.test_addresses_comparer.TestAdressesComparer.setup_address_parser_mock", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.comparer.addresses_comparer.AddressesComparer.compare_raw"], ["", "def", "test_givenMultipleRawAddresses_whenCompareRaw_thenReturnProperClass", "(", "self", ")", ":", "\n", "        ", "raw_address_identical", "=", "\"350 rue des Lilas Ouest Quebec Quebec G1L 1B6\"", "\n", "\n", "raw_address_identical_parsed", "=", "[", "\n", "(", "\"350\"", ",", "\"StreetNumber\"", ")", ",", "\n", "(", "\"rue des Lilas\"", ",", "\"StreetName\"", ")", ",", "\n", "(", "\"Ouest\"", ",", "\"Orientation\"", ")", ",", "\n", "(", "\"Qu\u00e9bec\"", ",", "\"Municipality\"", ")", ",", "\n", "(", "\"Qu\u00e9bec\"", ",", "\"Province\"", ")", ",", "\n", "(", "\"G1L 1B6\"", ",", "\"PostalCode\"", ")", ",", "\n", "]", "\n", "\n", "raw_address_diff_StreetNumber", "=", "\"450 rue des Lilas Ouest Quebec Quebec G1L 1B6\"", "\n", "\n", "raw_address_diff_StreetNumber_parsed", "=", "[", "\n", "(", "\"450\"", ",", "\"StreetNumber\"", ")", ",", "\n", "(", "\"rue des Lilas\"", ",", "\"StreetName\"", ")", ",", "\n", "(", "\"Ouest\"", ",", "\"Orientation\"", ")", ",", "\n", "(", "\"Qu\u00e9bec\"", ",", "\"Municipality\"", ")", ",", "\n", "(", "\"Qu\u00e9bec\"", ",", "\"Province\"", ")", ",", "\n", "(", "\"G1L 1B6\"", ",", "\"PostalCode\"", ")", ",", "\n", "]", "\n", "\n", "mocked_parser", "=", "self", ".", "setup_address_parser_mock", "(", "\n", "[", "\n", "[", "self", ".", "raw_address_original_parsed", ",", "raw_address_identical_parsed", "]", ",", "\n", "[", "\n", "self", ".", "raw_address_original_parsed", ",", "\n", "raw_address_diff_StreetNumber_parsed", ",", "\n", "]", ",", "\n", "]", "\n", ")", "\n", "address_comparer", "=", "AddressesComparer", "(", "mocked_parser", ")", "\n", "\n", "raw_multiple_comparisons", "=", "address_comparer", ".", "compare_raw", "(", "\n", "[", "\n", "(", "self", ".", "raw_address_original", ",", "raw_address_identical", ")", ",", "\n", "(", "self", ".", "raw_address_original", ",", "raw_address_diff_StreetNumber", ")", ",", "\n", "]", "\n", ")", "\n", "self", ".", "assertIsInstance", "(", "raw_multiple_comparisons", ",", "list", ")", "\n", "self", ".", "assertIsInstance", "(", "raw_multiple_comparisons", "[", "0", "]", ",", "FormattedComparedAddressesRaw", ")", "\n", "self", ".", "assertIsInstance", "(", "raw_multiple_comparisons", "[", "1", "]", ",", "FormattedComparedAddressesRaw", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.comparer.test_addresses_comparer.TestAdressesComparer.test_givenATaggedAddress_whenCompareTags_thenReturnProperClass": [[118, 124], ["test_addresses_comparer.TestAdressesComparer.setup_address_parser_mock", "deepparse.comparer.addresses_comparer.AddressesComparer", "deepparse.comparer.addresses_comparer.AddressesComparer.compare_tags", "test_addresses_comparer.TestAdressesComparer.assertIsInstance"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.comparer.test_addresses_comparer.TestAdressesComparer.setup_address_parser_mock", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.comparer.addresses_comparer.AddressesComparer.compare_tags"], ["", "def", "test_givenATaggedAddress_whenCompareTags_thenReturnProperClass", "(", "self", ")", ":", "\n", "        ", "mocked_parser", "=", "self", ".", "setup_address_parser_mock", "(", "self", ".", "raw_address_original_parsed", ")", "\n", "address_comparer", "=", "AddressesComparer", "(", "mocked_parser", ")", "\n", "\n", "tags_one_comparison", "=", "address_comparer", ".", "compare_tags", "(", "self", ".", "raw_address_original_parsed", ")", "\n", "self", ".", "assertIsInstance", "(", "tags_one_comparison", ",", "FormattedComparedAddressesTags", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.comparer.test_addresses_comparer.TestAdressesComparer.test_givenMultipleTaggedAddresses_whenCompareTags_thenReturnProperClass": [[125, 146], ["test_addresses_comparer.TestAdressesComparer.setup_address_parser_mock", "deepparse.comparer.addresses_comparer.AddressesComparer", "deepparse.comparer.addresses_comparer.AddressesComparer.compare_tags", "test_addresses_comparer.TestAdressesComparer.assertIsInstance", "test_addresses_comparer.TestAdressesComparer.assertIsInstance", "test_addresses_comparer.TestAdressesComparer.assertIsInstance"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.comparer.test_addresses_comparer.TestAdressesComparer.setup_address_parser_mock", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.comparer.addresses_comparer.AddressesComparer.compare_tags"], ["", "def", "test_givenMultipleTaggedAddresses_whenCompareTags_thenReturnProperClass", "(", "self", ")", ":", "\n", "        ", "raw_address_diff_StreetNumber_parsed", "=", "[", "\n", "(", "\"450\"", ",", "\"StreetNumber\"", ")", ",", "\n", "(", "\"rue des Lilas\"", ",", "\"StreetName\"", ")", ",", "\n", "(", "\"Ouest\"", ",", "\"Orientation\"", ")", ",", "\n", "(", "\"Qu\u00e9bec\"", ",", "\"Municipality\"", ")", ",", "\n", "(", "\"Qu\u00e9bec\"", ",", "\"Province\"", ")", ",", "\n", "(", "\"G1L 1B6\"", ",", "\"PostalCode\"", ")", ",", "\n", "]", "\n", "\n", "mocked_parser", "=", "self", ".", "setup_address_parser_mock", "(", "\n", "[", "self", ".", "raw_address_original_parsed", ",", "raw_address_diff_StreetNumber_parsed", "]", "\n", ")", "\n", "address_comparer", "=", "AddressesComparer", "(", "mocked_parser", ")", "\n", "\n", "tags_multiple_comparisons", "=", "address_comparer", ".", "compare_tags", "(", "\n", "[", "self", ".", "raw_address_original_parsed", ",", "raw_address_diff_StreetNumber_parsed", "]", "\n", ")", "\n", "self", ".", "assertIsInstance", "(", "tags_multiple_comparisons", ",", "list", ")", "\n", "self", ".", "assertIsInstance", "(", "tags_multiple_comparisons", "[", "0", "]", ",", "FormattedComparedAddressesTags", ")", "\n", "self", ".", "assertIsInstance", "(", "tags_multiple_comparisons", "[", "1", "]", ",", "FormattedComparedAddressesTags", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.comparer.test_addresses_comparer.TestAdressesComparer.test_given_anAddressComparerFastText_whenStr_thenUsedProperRep": [[147, 156], ["test_addresses_comparer.TestAdressesComparer.setup_address_parser_mock", "deepparse.comparer.addresses_comparer.AddressesComparer", "str", "test_addresses_comparer.TestAdressesComparer.assertEqual"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.comparer.test_addresses_comparer.TestAdressesComparer.setup_address_parser_mock"], ["", "def", "test_given_anAddressComparerFastText_whenStr_thenUsedProperRep", "(", "self", ")", ":", "\n", "        ", "mocked_parser", "=", "self", ".", "setup_address_parser_mock", "(", "\n", "self", ".", "raw_address_original_parsed", ",", "formatted_model_type_value", "=", "\"FastText\"", "\n", ")", "\n", "address_comparer", "=", "AddressesComparer", "(", "mocked_parser", ")", "\n", "\n", "actual", "=", "str", "(", "address_comparer", ")", "\n", "expected", "=", "\"Compare addresses with FastTextAddressParser\"", "\n", "self", ".", "assertEqual", "(", "expected", ",", "actual", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.comparer.test_addresses_comparer.TestAdressesComparer.test_given_anAddressComparerBPEmb_whenStr_thenUsedProperRep": [[157, 166], ["test_addresses_comparer.TestAdressesComparer.setup_address_parser_mock", "deepparse.comparer.addresses_comparer.AddressesComparer", "str", "test_addresses_comparer.TestAdressesComparer.assertEqual"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.comparer.test_addresses_comparer.TestAdressesComparer.setup_address_parser_mock"], ["", "def", "test_given_anAddressComparerBPEmb_whenStr_thenUsedProperRep", "(", "self", ")", ":", "\n", "        ", "mocked_parser", "=", "self", ".", "setup_address_parser_mock", "(", "\n", "self", ".", "raw_address_original_parsed", ",", "formatted_model_type_value", "=", "\"BPEmb\"", "\n", ")", "\n", "address_comparer", "=", "AddressesComparer", "(", "mocked_parser", ")", "\n", "\n", "actual", "=", "str", "(", "address_comparer", ")", "\n", "expected", "=", "\"Compare addresses with BPEmbAddressParser\"", "\n", "self", ".", "assertEqual", "(", "expected", ",", "actual", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.comparer.test_formatted_compared_addresses.AbstractFormattedComparedAddresses._comparison_report_builder": [[11, 13], ["None"], "methods", ["None"], ["    ", "def", "_comparison_report_builder", "(", "self", ")", ":", "\n", "        ", "return", "\"Comparison report\\n\"", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.comparer.test_formatted_compared_addresses.AbstractFormattedComparedAddresses._get_probs": [[14, 16], ["None"], "methods", ["None"], ["", "def", "_get_probs", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.comparer.test_formatted_compared_addresses.TestFormattedComparedAddresses.setUp": [[19, 37], ["deepparse.parser.FormattedParsedAddress"], "methods", ["None"], ["    ", "def", "setUp", "(", "self", ")", ":", "\n", "        ", "self", ".", "a_address_parser_model", "=", "\"bpemb\"", "\n", "\n", "self", ".", "original_raw_address", "=", "\"350 rue des Lilas Ouest Quebec Quebec G1L 1B6\"", "\n", "self", ".", "original_parsed_address", "=", "[", "\n", "(", "\"350\"", ",", "(", "\"StreetNumber\"", ",", "1.0", ")", ")", ",", "\n", "(", "\"rue\"", ",", "(", "\"StreetName\"", ",", "0.9987", ")", ")", ",", "\n", "(", "\"des\"", ",", "(", "\"StreetName\"", ",", "0.9993", ")", ")", ",", "\n", "(", "\"Lilas\"", ",", "(", "\"StreetName\"", ",", "0.8176", ")", ")", ",", "\n", "(", "\"Ouest\"", ",", "(", "\"Orientation\"", ",", "0.781", ")", ")", ",", "\n", "(", "\"Quebec\"", ",", "(", "\"Municipality\"", ",", "0.9768", ")", ")", ",", "\n", "(", "\"Quebec\"", ",", "(", "\"Province\"", ",", "1.0", ")", ")", ",", "\n", "(", "\"G1L\"", ",", "(", "\"PostalCode\"", ",", "0.9993", ")", ")", ",", "\n", "(", "\"1B6\"", ",", "(", "\"PostalCode\"", ",", "1.0", ")", ")", ",", "\n", "]", "\n", "\n", "self", ".", "original_formatted_parsed_address", "=", "FormattedParsedAddress", "(", "\n", "{", "self", ".", "original_raw_address", ":", "self", ".", "original_parsed_address", "}", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.comparer.test_formatted_compared_addresses.TestFormattedComparedAddresses.test_givenIdenticalComparison_thenReturnIdentical": [[39, 63], ["deepparse.parser.FormattedParsedAddress", "test_formatted_compared_addresses.AbstractFormattedComparedAddresses", "test_formatted_compared_addresses.TestFormattedComparedAddresses.assertTrue"], "methods", ["None"], ["", "def", "test_givenIdenticalComparison_thenReturnIdentical", "(", "self", ")", ":", "\n", "        ", "identical_address", "=", "\"350 rue des Lilas Ouest Quebec Quebec G1L 1B6\"", "\n", "identical_address_parsing", "=", "[", "\n", "(", "\"350\"", ",", "(", "\"StreetNumber\"", ",", "1.0", ")", ")", ",", "\n", "(", "\"rue\"", ",", "(", "\"StreetName\"", ",", "0.9987", ")", ")", ",", "\n", "(", "\"des\"", ",", "(", "\"StreetName\"", ",", "0.9993", ")", ")", ",", "\n", "(", "\"Lilas\"", ",", "(", "\"StreetName\"", ",", "0.8176", ")", ")", ",", "\n", "(", "\"Ouest\"", ",", "(", "\"Orientation\"", ",", "0.781", ")", ")", ",", "\n", "(", "\"Quebec\"", ",", "(", "\"Municipality\"", ",", "0.9768", ")", ")", ",", "\n", "(", "\"Quebec\"", ",", "(", "\"Province\"", ",", "1.0", ")", ")", ",", "\n", "(", "\"G1L\"", ",", "(", "\"PostalCode\"", ",", "0.9993", ")", ")", ",", "\n", "(", "\"1B6\"", ",", "(", "\"PostalCode\"", ",", "1.0", ")", ")", ",", "\n", "]", "\n", "\n", "identical_formatted_parsed_address", "=", "FormattedParsedAddress", "(", "{", "identical_address", ":", "identical_address_parsing", "}", ")", "\n", "\n", "raw_identical_comparison", "=", "AbstractFormattedComparedAddresses", "(", "\n", "first_address", "=", "self", ".", "original_formatted_parsed_address", ",", "\n", "second_address", "=", "identical_formatted_parsed_address", ",", "\n", "origin", "=", "(", "\"deepparse using bpemb\"", ",", "\"deepparse using bpemb\"", ")", ",", "\n", "with_prob", "=", "True", ",", "\n", ")", "\n", "\n", "self", ".", "assertTrue", "(", "raw_identical_comparison", ".", "identical", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.comparer.test_formatted_compared_addresses.TestFormattedComparedAddresses.test_givenEquivalentComparison_thenReturnEquivalent": [[64, 89], ["deepparse.parser.FormattedParsedAddress", "test_formatted_compared_addresses.AbstractFormattedComparedAddresses", "test_formatted_compared_addresses.TestFormattedComparedAddresses.assertTrue", "test_formatted_compared_addresses.TestFormattedComparedAddresses.assertFalse"], "methods", ["None"], ["", "def", "test_givenEquivalentComparison_thenReturnEquivalent", "(", "self", ")", ":", "\n", "        ", "equivalent_address", "=", "\"350  rue des Lilas Ouest Quebec Quebec G1L 1B6\"", "\n", "equivalent_address_parsing", "=", "[", "\n", "(", "\"350\"", ",", "(", "\"StreetNumber\"", ",", "1.0", ")", ")", ",", "\n", "(", "\"rue\"", ",", "(", "\"StreetName\"", ",", "0.9987", ")", ")", ",", "\n", "(", "\"des\"", ",", "(", "\"StreetName\"", ",", "0.9993", ")", ")", ",", "\n", "(", "\"Lilas\"", ",", "(", "\"StreetName\"", ",", "0.8176", ")", ")", ",", "\n", "(", "\"Ouest\"", ",", "(", "\"Orientation\"", ",", "0.781", ")", ")", ",", "\n", "(", "\"Quebec\"", ",", "(", "\"Municipality\"", ",", "0.9768", ")", ")", ",", "\n", "(", "\"Quebec\"", ",", "(", "\"Province\"", ",", "1.0", ")", ")", ",", "\n", "(", "\"G1L\"", ",", "(", "\"PostalCode\"", ",", "0.9993", ")", ")", ",", "\n", "(", "\"1B6\"", ",", "(", "\"PostalCode\"", ",", "1.0", ")", ")", ",", "\n", "]", "\n", "\n", "equivalent_formatted_address_parsing", "=", "FormattedParsedAddress", "(", "{", "equivalent_address", ":", "equivalent_address_parsing", "}", ")", "\n", "\n", "raw_identical_comparison", "=", "AbstractFormattedComparedAddresses", "(", "\n", "first_address", "=", "self", ".", "original_formatted_parsed_address", ",", "\n", "second_address", "=", "equivalent_formatted_address_parsing", ",", "\n", "origin", "=", "(", "\"deepparse using bpemb\"", ",", "\"deepparse using bpemb\"", ")", ",", "\n", "with_prob", "=", "True", ",", "\n", ")", "\n", "\n", "self", ".", "assertTrue", "(", "raw_identical_comparison", ".", "equivalent", ")", "\n", "self", ".", "assertFalse", "(", "raw_identical_comparison", ".", "identical", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.comparer.test_formatted_compared_addresses.TestFormattedComparedAddresses.test_givenNotEquivalentComparison_thenReturnNotEquivalent": [[90, 116], ["deepparse.parser.FormattedParsedAddress", "test_formatted_compared_addresses.AbstractFormattedComparedAddresses", "test_formatted_compared_addresses.TestFormattedComparedAddresses.assertFalse"], "methods", ["None"], ["", "def", "test_givenNotEquivalentComparison_thenReturnNotEquivalent", "(", "self", ")", ":", "\n", "        ", "not_equivalent_address", "=", "\"450 rue des Lilas Ouest Quebec Quebec G1L 1B6\"", "\n", "not_equivalent_address_parsing", "=", "[", "\n", "(", "\"450\"", ",", "(", "\"StreetNumber\"", ",", "1.0", ")", ")", ",", "\n", "(", "\"rue\"", ",", "(", "\"StreetName\"", ",", "0.9987", ")", ")", ",", "\n", "(", "\"des\"", ",", "(", "\"StreetName\"", ",", "0.9993", ")", ")", ",", "\n", "(", "\"Lilas\"", ",", "(", "\"StreetName\"", ",", "0.8176", ")", ")", ",", "\n", "(", "\"Ouest\"", ",", "(", "\"Orientation\"", ",", "0.781", ")", ")", ",", "\n", "(", "\"Quebec\"", ",", "(", "\"Municipality\"", ",", "0.9768", ")", ")", ",", "\n", "(", "\"Quebec\"", ",", "(", "\"Province\"", ",", "1.0", ")", ")", ",", "\n", "(", "\"G1L\"", ",", "(", "\"PostalCode\"", ",", "0.9993", ")", ")", ",", "\n", "(", "\"1B6\"", ",", "(", "\"PostalCode\"", ",", "1.0", ")", ")", ",", "\n", "]", "\n", "\n", "not_equivalent_formatted_address_parsing", "=", "FormattedParsedAddress", "(", "\n", "{", "not_equivalent_address", ":", "not_equivalent_address_parsing", "}", "\n", ")", "\n", "\n", "raw_identical_comparison", "=", "AbstractFormattedComparedAddresses", "(", "\n", "first_address", "=", "self", ".", "original_formatted_parsed_address", ",", "\n", "second_address", "=", "not_equivalent_formatted_address_parsing", ",", "\n", "origin", "=", "(", "\"deepparse using bpemb\"", ",", "\"deepparse using bpemb\"", ")", ",", "\n", "with_prob", "=", "True", ",", "\n", ")", "\n", "\n", "self", ".", "assertFalse", "(", "raw_identical_comparison", ".", "equivalent", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.comparer.test_formatted_compared_addresses.TestFormattedComparedAddresses.test__comparisonReportSignal": [[117, 143], ["deepparse.parser.FormattedParsedAddress", "test_formatted_compared_addresses.AbstractFormattedComparedAddresses", "test_formatted_compared_addresses.TestFormattedComparedAddresses.assertEqual", "AbstractFormattedComparedAddresses._comparison_report"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.comparer.formatted_compared_addresses.FormattedComparedAddresses._comparison_report"], ["", "def", "test__comparisonReportSignal", "(", "self", ")", ":", "\n", "        ", "identical_address", "=", "\"350 rue des Lilas Ouest Quebec Quebec G1L 1B6\"", "\n", "identical_address_parsing", "=", "[", "\n", "(", "\"350\"", ",", "(", "\"StreetNumber\"", ",", "1.0", ")", ")", ",", "\n", "(", "\"rue\"", ",", "(", "\"StreetName\"", ",", "0.9987", ")", ")", ",", "\n", "(", "\"des\"", ",", "(", "\"StreetName\"", ",", "0.9993", ")", ")", ",", "\n", "(", "\"Lilas\"", ",", "(", "\"StreetName\"", ",", "0.8176", ")", ")", ",", "\n", "(", "\"Ouest\"", ",", "(", "\"Orientation\"", ",", "0.781", ")", ")", ",", "\n", "(", "\"Quebec\"", ",", "(", "\"Municipality\"", ",", "0.9768", ")", ")", ",", "\n", "(", "\"Quebec\"", ",", "(", "\"Province\"", ",", "1.0", ")", ")", ",", "\n", "(", "\"G1L\"", ",", "(", "\"PostalCode\"", ",", "0.9993", ")", ")", ",", "\n", "(", "\"1B6\"", ",", "(", "\"PostalCode\"", ",", "1.0", ")", ")", ",", "\n", "]", "\n", "\n", "identical_formatted_parsed_address", "=", "FormattedParsedAddress", "(", "{", "identical_address", ":", "identical_address_parsing", "}", ")", "\n", "\n", "raw_identical_comparison", "=", "AbstractFormattedComparedAddresses", "(", "\n", "first_address", "=", "self", ".", "original_formatted_parsed_address", ",", "\n", "second_address", "=", "identical_formatted_parsed_address", ",", "\n", "origin", "=", "(", "\"deepparse using bpemb\"", ",", "\"deepparse using bpemb\"", ")", ",", "\n", "with_prob", "=", "True", ",", "\n", ")", "\n", "\n", "self", ".", "assertEqual", "(", "\n", "raw_identical_comparison", ".", "_comparison_report", "(", "nb_delimiters", "=", "20", ")", ",", "\n", "\"====================\\nComparison report\\n====================\\n\\n\"", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.comparer.test_formatted_compared_addresses.TestFormattedComparedAddresses.test_comparisonReportSignal": [[145, 175], ["deepparse.parser.FormattedParsedAddress", "test_formatted_compared_addresses.AbstractFormattedComparedAddresses", "test_formatted_compared_addresses.TestFormattedComparedAddresses._capture_output", "AbstractFormattedComparedAddresses.comparison_report", "test_formatted_compared_addresses.TestFormattedComparedAddresses.test_out.getvalue", "test_formatted_compared_addresses.TestFormattedComparedAddresses.assertEqual"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.tests.base_capture_output.CaptureOutputTestCase._capture_output", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.comparer.formatted_compared_addresses.FormattedComparedAddresses.comparison_report"], ["", "def", "test_comparisonReportSignal", "(", "self", ")", ":", "\n", "        ", "identical_address", "=", "\"350 rue des Lilas Ouest Quebec Quebec G1L 1B6\"", "\n", "identical_address_parsing", "=", "[", "\n", "(", "\"350\"", ",", "(", "\"StreetNumber\"", ",", "1.0", ")", ")", ",", "\n", "(", "\"rue\"", ",", "(", "\"StreetName\"", ",", "0.9987", ")", ")", ",", "\n", "(", "\"des\"", ",", "(", "\"StreetName\"", ",", "0.9993", ")", ")", ",", "\n", "(", "\"Lilas\"", ",", "(", "\"StreetName\"", ",", "0.8176", ")", ")", ",", "\n", "(", "\"Ouest\"", ",", "(", "\"Orientation\"", ",", "0.781", ")", ")", ",", "\n", "(", "\"Quebec\"", ",", "(", "\"Municipality\"", ",", "0.9768", ")", ")", ",", "\n", "(", "\"Quebec\"", ",", "(", "\"Province\"", ",", "1.0", ")", ")", ",", "\n", "(", "\"G1L\"", ",", "(", "\"PostalCode\"", ",", "0.9993", ")", ")", ",", "\n", "(", "\"1B6\"", ",", "(", "\"PostalCode\"", ",", "1.0", ")", ")", ",", "\n", "]", "\n", "\n", "identical_formatted_parsed_address", "=", "FormattedParsedAddress", "(", "{", "identical_address", ":", "identical_address_parsing", "}", ")", "\n", "\n", "raw_identical_comparison", "=", "AbstractFormattedComparedAddresses", "(", "\n", "first_address", "=", "self", ".", "original_formatted_parsed_address", ",", "\n", "second_address", "=", "identical_formatted_parsed_address", ",", "\n", "origin", "=", "(", "\"deepparse using bpemb\"", ",", "\"deepparse using bpemb\"", ")", ",", "\n", "with_prob", "=", "True", ",", "\n", ")", "\n", "\n", "self", ".", "_capture_output", "(", ")", "\n", "raw_identical_comparison", ".", "comparison_report", "(", "nb_delimiters", "=", "20", ")", "\n", "\n", "actual", "=", "self", ".", "test_out", ".", "getvalue", "(", ")", "\n", "expected", "=", "\"====================\\nComparison report\\n====================\\n\\n\"", "\n", "\n", "self", ".", "assertEqual", "(", "actual", ",", "expected", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.comparer.test_formatted_compared_addresses.TestFormattedComparedAddresses.test_given_anyFormattedComparedAddressesWithAddress_whenListOfBool_thenReturnProperBool": [[176, 216], ["deepparse.parser.FormattedParsedAddress", "test_formatted_compared_addresses.AbstractFormattedComparedAddresses", "test_formatted_compared_addresses.TestFormattedComparedAddresses.assertIn"], "methods", ["None"], ["", "def", "test_given_anyFormattedComparedAddressesWithAddress_whenListOfBool_thenReturnProperBool", "(", "\n", "self", ",", "\n", ")", ":", "\n", "        ", "any_address", "=", "\"350 rue des Lilas Ouest Quebec Quebec G1L 1B6\"", "\n", "any_address_parsing", "=", "[", "\n", "(", "\"350\"", ",", "(", "\"StreetNumber\"", ",", "1.0", ")", ")", ",", "\n", "(", "\"rue\"", ",", "(", "\"StreetName\"", ",", "0.9987", ")", ")", ",", "\n", "(", "\"des\"", ",", "(", "\"StreetName\"", ",", "0.9993", ")", ")", ",", "\n", "(", "\"Lilas\"", ",", "(", "\"StreetName\"", ",", "0.8176", ")", ")", ",", "\n", "(", "\"Ouest\"", ",", "(", "\"Orientation\"", ",", "0.781", ")", ")", ",", "\n", "(", "\"Quebec\"", ",", "(", "\"Municipality\"", ",", "0.9768", ")", ")", ",", "\n", "(", "\"Quebec\"", ",", "(", "\"Province\"", ",", "1.0", ")", ")", ",", "\n", "(", "\"G1L\"", ",", "(", "\"PostalCode\"", ",", "0.9993", ")", ")", ",", "\n", "(", "\"1B6\"", ",", "(", "\"PostalCode\"", ",", "1.0", ")", ")", ",", "\n", "]", "\n", "\n", "any_formatted_parsed_address", "=", "FormattedParsedAddress", "(", "{", "any_address", ":", "any_address_parsing", "}", ")", "\n", "\n", "any_comparison", "=", "AbstractFormattedComparedAddresses", "(", "\n", "first_address", "=", "any_formatted_parsed_address", ",", "\n", "second_address", "=", "any_formatted_parsed_address", ",", "\n", "origin", "=", "(", "\"deepparse using bpemb\"", ",", "\"deepparse using bpemb\"", ")", ",", "\n", "with_prob", "=", "True", ",", "\n", ")", "\n", "\n", "actual_list_of_bool", "=", "any_comparison", ".", "list_of_bool", "\n", "expected", "=", "[", "\n", "(", "\"StreetNumber\"", ",", "True", ")", ",", "\n", "(", "\"Unit\"", ",", "True", ")", ",", "\n", "(", "\"StreetName\"", ",", "True", ")", ",", "\n", "(", "\"Orientation\"", ",", "True", ")", ",", "\n", "(", "\"Municipality\"", ",", "True", ")", ",", "\n", "(", "\"Province\"", ",", "True", ")", ",", "\n", "(", "\"PostalCode\"", ",", "True", ")", ",", "\n", "(", "\"GeneralDelivery\"", ",", "True", ")", ",", "\n", "(", "\"EOS\"", ",", "True", ")", ",", "\n", "]", "\n", "\n", "for", "element", "in", "actual_list_of_bool", ":", "\n", "            ", "self", ".", "assertIn", "(", "element", ",", "expected", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.comparer.test_formatted_compared_addresses_raw.TestFormattedComparedAddressesRaw.setUp": [[11, 27], ["deepparse.parser.FormattedParsedAddress"], "methods", ["None"], ["    ", "def", "setUp", "(", "self", ")", ":", "\n", "        ", "self", ".", "original_raw_address", "=", "\"350 rue des Lilas Ouest Quebec Quebec G1L 1B6\"", "\n", "self", ".", "original_parsed_address", "=", "[", "\n", "(", "\"350\"", ",", "(", "\"StreetNumber\"", ",", "1.0", ")", ")", ",", "\n", "(", "\"rue\"", ",", "(", "\"StreetName\"", ",", "0.9987", ")", ")", ",", "\n", "(", "\"des\"", ",", "(", "\"StreetName\"", ",", "0.9993", ")", ")", ",", "\n", "(", "\"Lilas\"", ",", "(", "\"StreetName\"", ",", "0.8176", ")", ")", ",", "\n", "(", "\"Ouest\"", ",", "(", "\"Orientation\"", ",", "0.781", ")", ")", ",", "\n", "(", "\"Quebec\"", ",", "(", "\"Municipality\"", ",", "0.9768", ")", ")", ",", "\n", "(", "\"Quebec\"", ",", "(", "\"Province\"", ",", "1.0", ")", ")", ",", "\n", "(", "\"G1L\"", ",", "(", "\"PostalCode\"", ",", "0.9993", ")", ")", ",", "\n", "(", "\"1B6\"", ",", "(", "\"PostalCode\"", ",", "1.0", ")", ")", ",", "\n", "]", "\n", "\n", "self", ".", "original_formatted_parsed_address", "=", "FormattedParsedAddress", "(", "\n", "{", "self", ".", "original_raw_address", ":", "self", ".", "original_parsed_address", "}", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.comparer.test_formatted_compared_addresses_raw.TestFormattedComparedAddressesRaw.test_givenIdenticalAddressesRaw_whenCompareRaw_thenReturnIdenticalComparisonReport": [[29, 66], ["deepparse.parser.FormattedParsedAddress", "deepparse.comparer.formatted_compared_addresses_raw.FormattedComparedAddressesRaw", "deepparse.comparer.formatted_compared_addresses_raw.FormattedComparedAddressesRaw._comparison_report_builder", "test_formatted_compared_addresses_raw.TestFormattedComparedAddressesRaw.assertIn"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.comparer.test_formatted_compared_addresses.AbstractFormattedComparedAddresses._comparison_report_builder"], ["", "def", "test_givenIdenticalAddressesRaw_whenCompareRaw_thenReturnIdenticalComparisonReport", "(", "\n", "self", ",", "\n", ")", ":", "\n", "        ", "identical_address", "=", "\"350 rue des Lilas Ouest Quebec Quebec G1L 1B6\"", "\n", "identical_address_parsing", "=", "[", "\n", "(", "\"350\"", ",", "(", "\"StreetNumber\"", ",", "1.0", ")", ")", ",", "\n", "(", "\"rue\"", ",", "(", "\"StreetName\"", ",", "0.9987", ")", ")", ",", "\n", "(", "\"des\"", ",", "(", "\"StreetName\"", ",", "0.9993", ")", ")", ",", "\n", "(", "\"Lilas\"", ",", "(", "\"StreetName\"", ",", "0.8176", ")", ")", ",", "\n", "(", "\"Ouest\"", ",", "(", "\"Orientation\"", ",", "0.781", ")", ")", ",", "\n", "(", "\"Quebec\"", ",", "(", "\"Municipality\"", ",", "0.9768", ")", ")", ",", "\n", "(", "\"Quebec\"", ",", "(", "\"Province\"", ",", "1.0", ")", ")", ",", "\n", "(", "\"G1L\"", ",", "(", "\"PostalCode\"", ",", "0.9993", ")", ")", ",", "\n", "(", "\"1B6\"", ",", "(", "\"PostalCode\"", ",", "1.0", ")", ")", ",", "\n", "]", "\n", "\n", "identical_formatted_parsed_address", "=", "FormattedParsedAddress", "(", "{", "identical_address", ":", "identical_address_parsing", "}", ")", "\n", "\n", "identical_formatted_compared_addresses_raw", "=", "FormattedComparedAddressesRaw", "(", "\n", "first_address", "=", "self", ".", "original_formatted_parsed_address", ",", "\n", "second_address", "=", "identical_formatted_parsed_address", ",", "\n", "origin", "=", "(", "\"deepparse using Bpemb\"", ",", "\"deepparse using Bpemb\"", ")", ",", "\n", "with_prob", "=", "True", ",", "\n", ")", "\n", "\n", "expected_sentences", "=", "[", "\n", "\"Comparison report of the two raw addresses: Identical\\n\\nAddress : 350 rue des Lilas Ouest \"", "\n", "\"Quebec Quebec G1L 1B6\\n\\n\\nProbabilities of parsed tags for the addresses with deepparse using \"", "\n", "\"Bpemb:\"", ",", "\n", "\"('350', ('StreetNumber', 1.0))\"", ",", "\n", "\"('rue', ('StreetName', 0.9987))\"", ",", "\n", "]", "\n", "\n", "actual", "=", "identical_formatted_compared_addresses_raw", ".", "_comparison_report_builder", "(", ")", "\n", "\n", "for", "expected_sentence", "in", "expected_sentences", ":", "\n", "            ", "self", ".", "assertIn", "(", "expected_sentence", ",", "actual", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.comparer.test_formatted_compared_addresses_raw.TestFormattedComparedAddressesRaw.test_givenEquivalentAddressesRaw_whenCompareRaw_thenReturnEquivalentComparisonReport": [[67, 107], ["deepparse.parser.FormattedParsedAddress", "deepparse.comparer.formatted_compared_addresses_raw.FormattedComparedAddressesRaw", "deepparse.comparer.formatted_compared_addresses_raw.FormattedComparedAddressesRaw._comparison_report_builder", "test_formatted_compared_addresses_raw.TestFormattedComparedAddressesRaw.assertIn"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.comparer.test_formatted_compared_addresses.AbstractFormattedComparedAddresses._comparison_report_builder"], ["", "", "def", "test_givenEquivalentAddressesRaw_whenCompareRaw_thenReturnEquivalentComparisonReport", "(", "\n", "self", ",", "\n", ")", ":", "\n", "# Not identical address with the preceding", "\n", "        ", "equivalent_address", "=", "\"350  rue des Lilas Ouest Quebec Quebec G1L 1B6\"", "\n", "equivalent_address_parsing", "=", "[", "\n", "(", "\"350\"", ",", "(", "\"StreetNumber\"", ",", "1.0", ")", ")", ",", "\n", "(", "\"rue\"", ",", "(", "\"StreetName\"", ",", "0.9987", ")", ")", ",", "\n", "(", "\"des\"", ",", "(", "\"StreetName\"", ",", "0.9993", ")", ")", ",", "\n", "(", "\"Lilas\"", ",", "(", "\"StreetName\"", ",", "0.8176", ")", ")", ",", "\n", "(", "\"Ouest\"", ",", "(", "\"Orientation\"", ",", "0.781", ")", ")", ",", "\n", "(", "\"Quebec\"", ",", "(", "\"Municipality\"", ",", "0.9768", ")", ")", ",", "\n", "(", "\"Quebec\"", ",", "(", "\"Province\"", ",", "1.0", ")", ")", ",", "\n", "(", "\"G1L\"", ",", "(", "\"PostalCode\"", ",", "0.9993", ")", ")", ",", "\n", "(", "\"1B6\"", ",", "(", "\"PostalCode\"", ",", "1.0", ")", ")", ",", "\n", "]", "\n", "\n", "equivalent_formatted_parsed_address", "=", "FormattedParsedAddress", "(", "{", "equivalent_address", ":", "equivalent_address_parsing", "}", ")", "\n", "\n", "equivalent_formatted_compared_addresses_raw_", "=", "FormattedComparedAddressesRaw", "(", "\n", "first_address", "=", "self", ".", "original_formatted_parsed_address", ",", "\n", "second_address", "=", "equivalent_formatted_parsed_address", ",", "\n", "origin", "=", "(", "\"deepparse using Bpemb\"", ",", "\"deepparse using Bpemb\"", ")", ",", "\n", "with_prob", "=", "True", ",", "\n", ")", "\n", "\n", "expected_sentences", "=", "[", "\n", "\"Equivalent\"", ",", "\n", "\"Quebec Quebec G1L 1B6\\n\\n\\nProbabilities of parsed tags for the addresses with deepparse using \"", ",", "\n", "\"Bpemb:\"", ",", "\n", "\"('350', ('StreetNumber', 1.0))\"", ",", "\n", "\"('rue', ('StreetName', 0.9987))\"", ",", "\n", "\"('Municipality', 0.9768))\"", ",", "\n", "\"differences between the two addresses: \\nWhite: Shared\\nBlue:\"", ",", "\n", "]", "\n", "\n", "actual", "=", "equivalent_formatted_compared_addresses_raw_", ".", "_comparison_report_builder", "(", ")", "\n", "\n", "for", "expected_sentence", "in", "expected_sentences", ":", "\n", "            ", "self", ".", "assertIn", "(", "expected_sentence", ",", "actual", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.comparer.test_formatted_compared_addresses_raw.TestFormattedComparedAddressesRaw.test_givenDifferentAddressesRaw_whenCompareRaw_thenReturnDifferentComparisonReport": [[108, 150], ["deepparse.parser.FormattedParsedAddress", "deepparse.comparer.formatted_compared_addresses_raw.FormattedComparedAddressesRaw", "deepparse.comparer.formatted_compared_addresses_raw.FormattedComparedAddressesRaw._comparison_report_builder", "test_formatted_compared_addresses_raw.TestFormattedComparedAddressesRaw.assertIn"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.comparer.test_formatted_compared_addresses.AbstractFormattedComparedAddresses._comparison_report_builder"], ["", "", "def", "test_givenDifferentAddressesRaw_whenCompareRaw_thenReturnDifferentComparisonReport", "(", "\n", "self", ",", "\n", ")", ":", "\n", "# Not identical address with the preceding", "\n", "        ", "not_equivalent_address", "=", "\"450 rue des Lilas Ouest Quebec Quebec G1L 1B6\"", "\n", "not_equivalent_address_parsing", "=", "[", "\n", "(", "\"450\"", ",", "(", "\"StreetNumber\"", ",", "1.0", ")", ")", ",", "\n", "(", "\"rue\"", ",", "(", "\"StreetName\"", ",", "0.9987", ")", ")", ",", "\n", "(", "\"des\"", ",", "(", "\"StreetName\"", ",", "0.9993", ")", ")", ",", "\n", "(", "\"Lilas\"", ",", "(", "\"StreetName\"", ",", "0.8176", ")", ")", ",", "\n", "(", "\"Ouest\"", ",", "(", "\"Orientation\"", ",", "0.781", ")", ")", ",", "\n", "(", "\"Quebec\"", ",", "(", "\"Municipality\"", ",", "0.9768", ")", ")", ",", "\n", "(", "\"Quebec\"", ",", "(", "\"Province\"", ",", "1.0", ")", ")", ",", "\n", "(", "\"G1L\"", ",", "(", "\"PostalCode\"", ",", "0.9993", ")", ")", ",", "\n", "(", "\"1B6\"", ",", "(", "\"PostalCode\"", ",", "1.0", ")", ")", ",", "\n", "]", "\n", "\n", "not_equivalent_formatted_parsed_address", "=", "FormattedParsedAddress", "(", "\n", "{", "not_equivalent_address", ":", "not_equivalent_address_parsing", "}", "\n", ")", "\n", "\n", "not_equivalent_formatted_compared_addresses_raw_", "=", "FormattedComparedAddressesRaw", "(", "\n", "first_address", "=", "self", ".", "original_formatted_parsed_address", ",", "\n", "second_address", "=", "not_equivalent_formatted_parsed_address", ",", "\n", "origin", "=", "(", "\"deepparse using Bpemb\"", ",", "\"deepparse using Bpemb\"", ")", ",", "\n", "with_prob", "=", "True", ",", "\n", ")", "\n", "\n", "expected_sentences", "=", "[", "\n", "\"Not equivalent\"", ",", "\n", "\"Quebec Quebec G1L 1B6\\n\\n\\nProbabilities of parsed tags for the addresses with deepparse using \"", ",", "\n", "\"Bpemb:\"", ",", "\n", "\"('350', ('StreetNumber', 1.0))\"", ",", "\n", "\"('rue', ('StreetName', 0.9987))\"", ",", "\n", "\"('Municipality', 0.9768))\"", ",", "\n", "\" \\n\\x1b[38;2;26;123;220m3\\x1b[0m\\x1b[38;2;255;194;10m4\\x1b[0\"", ",", "\n", "\"m\\x1b[38;2;255;255;255m50\\x1b[0m\\n\"", ",", "\n", "]", "\n", "\n", "actual", "=", "not_equivalent_formatted_compared_addresses_raw_", ".", "_comparison_report_builder", "(", ")", "\n", "for", "expected_sentence", "in", "expected_sentences", ":", "\n", "            ", "self", ".", "assertIn", "(", "expected_sentence", ",", "actual", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.comparer.test_formatted_compared_addresses_tags.TestFormattedComparedAddressesTags.test_givenIdenticalAddressesTags_whenCompareTags_thenReturnIdenticalComparisonReport": [[11, 61], ["deepparse.parser.FormattedParsedAddress", "deepparse.parser.FormattedParsedAddress", "deepparse.comparer.formatted_compared_addresses_tags.FormattedComparedAddressesTags", "deepparse.comparer.formatted_compared_addresses_tags.FormattedComparedAddressesTags._comparison_report_builder", "test_formatted_compared_addresses_tags.TestFormattedComparedAddressesTags.assertIn"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.comparer.test_formatted_compared_addresses.AbstractFormattedComparedAddresses._comparison_report_builder"], ["    ", "def", "test_givenIdenticalAddressesTags_whenCompareTags_thenReturnIdenticalComparisonReport", "(", "\n", "self", ",", "\n", ")", ":", "\n", "        ", "original_raw_address", "=", "\"350 rue des Lilas Ouest Quebec Quebec G1L 1B6\"", "\n", "original_parsed_address", "=", "[", "\n", "(", "\"350\"", ",", "\"StreetNumber\"", ")", ",", "\n", "(", "\"rue des Lilas\"", ",", "\"StreetName\"", ")", ",", "\n", "(", "\"Ouest\"", ",", "\"Orientation\"", ")", ",", "\n", "(", "\"Quebec\"", ",", "\"Municipality\"", ")", ",", "\n", "(", "\"Quebec\"", ",", "\"Province\"", ")", ",", "\n", "(", "\"G1L 1B6\"", ",", "\"PostalCode\"", ")", ",", "\n", "]", "\n", "\n", "original_formatted_parsed_address", "=", "FormattedParsedAddress", "(", "{", "original_raw_address", ":", "original_parsed_address", "}", ")", "\n", "\n", "identical_address", "=", "\"350 rue des Lilas Ouest Quebec Quebec G1L 1B6\"", "\n", "identical_address_parsing_with_probs", "=", "[", "\n", "(", "\"350\"", ",", "(", "\"StreetNumber\"", ",", "1.0", ")", ")", ",", "\n", "(", "\"rue\"", ",", "(", "\"StreetName\"", ",", "0.9987", ")", ")", ",", "\n", "(", "\"des\"", ",", "(", "\"StreetName\"", ",", "0.9993", ")", ")", ",", "\n", "(", "\"Lilas\"", ",", "(", "\"StreetName\"", ",", "0.8176", ")", ")", ",", "\n", "(", "\"Ouest\"", ",", "(", "\"Orientation\"", ",", "0.781", ")", ")", ",", "\n", "(", "\"Quebec\"", ",", "(", "\"Municipality\"", ",", "0.9768", ")", ")", ",", "\n", "(", "\"Quebec\"", ",", "(", "\"Province\"", ",", "1.0", ")", ")", ",", "\n", "(", "\"G1L\"", ",", "(", "\"PostalCode\"", ",", "0.9993", ")", ")", ",", "\n", "(", "\"1B6\"", ",", "(", "\"PostalCode\"", ",", "1.0", ")", ")", ",", "\n", "]", "\n", "\n", "identical_formatted_parsed_address", "=", "FormattedParsedAddress", "(", "\n", "{", "identical_address", ":", "identical_address_parsing_with_probs", "}", "\n", ")", "\n", "\n", "identical_formatted_compared_addresses_tags", "=", "FormattedComparedAddressesTags", "(", "\n", "first_address", "=", "original_formatted_parsed_address", ",", "\n", "second_address", "=", "identical_formatted_parsed_address", ",", "\n", "origin", "=", "(", "\"source\"", ",", "\"deepparse using Bpemb\"", ")", ",", "\n", "with_prob", "=", "True", ",", "\n", ")", "\n", "\n", "expected_sentences", "=", "[", "\n", "\"Comparison report of tags for parsed address: Identical\\n\\nRaw address: 350 rue des Lilas Ouest \"", ",", "\n", "\"Quebec Quebec G1L 1B6\\n\\n\\nTags: \\nsource:\"", ",", "\n", "\"('StreetName', 0.8176))\"", ",", "\n", "\"('1B6', ('PostalCode', 1.0))\"", ",", "\n", "]", "\n", "\n", "actual", "=", "identical_formatted_compared_addresses_tags", ".", "_comparison_report_builder", "(", ")", "\n", "\n", "for", "expected_sentence", "in", "expected_sentences", ":", "\n", "            ", "self", ".", "assertIn", "(", "expected_sentence", ",", "actual", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.comparer.test_formatted_compared_addresses_tags.TestFormattedComparedAddressesTags.test_givenNotEquivalentAddressesTags_whenCompareTags_thenReturnNotEquivalentComparisonReport": [[62, 117], ["deepparse.parser.FormattedParsedAddress", "deepparse.parser.FormattedParsedAddress", "deepparse.comparer.formatted_compared_addresses_tags.FormattedComparedAddressesTags", "deepparse.comparer.formatted_compared_addresses_tags.FormattedComparedAddressesTags._comparison_report_builder", "test_formatted_compared_addresses_tags.TestFormattedComparedAddressesTags.assertIn"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.comparer.test_formatted_compared_addresses.AbstractFormattedComparedAddresses._comparison_report_builder"], ["", "", "def", "test_givenNotEquivalentAddressesTags_whenCompareTags_thenReturnNotEquivalentComparisonReport", "(", "\n", "self", ",", "\n", ")", ":", "\n", "        ", "original_raw_address", "=", "\"350 rue des Lilas Ouest Quebec Quebec G1L 1B6\"", "\n", "original_raw_address_with_probs", "=", "[", "\n", "(", "\"350\"", ",", "(", "\"StreetNumber\"", ",", "1.0", ")", ")", ",", "\n", "(", "\"rue\"", ",", "(", "\"StreetName\"", ",", "0.9987", ")", ")", ",", "\n", "(", "\"des\"", ",", "(", "\"StreetName\"", ",", "0.9993", ")", ")", ",", "\n", "(", "\"Lilas\"", ",", "(", "\"StreetName\"", ",", "0.8176", ")", ")", ",", "\n", "(", "\"Ouest\"", ",", "(", "\"Orientation\"", ",", "0.781", ")", ")", ",", "\n", "(", "\"Quebec\"", ",", "(", "\"Municipality\"", ",", "0.9768", ")", ")", ",", "\n", "(", "\"Quebec\"", ",", "(", "\"Province\"", ",", "1.0", ")", ")", ",", "\n", "(", "\"G1L\"", ",", "(", "\"PostalCode\"", ",", "0.9993", ")", ")", ",", "\n", "(", "\"1B6\"", ",", "(", "\"PostalCode\"", ",", "1.0", ")", ")", ",", "\n", "]", "\n", "\n", "original_formatted_parsed_address", "=", "FormattedParsedAddress", "(", "\n", "{", "original_raw_address", ":", "original_raw_address_with_probs", "}", "\n", ")", "\n", "\n", "# Not identical address with the preceding", "\n", "not_equivalent_address", "=", "\"350 rue des Lilas Ouest Quebec Quebec G1L 1B6\"", "\n", "not_equivalent_address_parsing", "=", "[", "\n", "(", "\"350\"", ",", "(", "\"StreetNumber\"", ",", "1.0", ")", ")", ",", "\n", "(", "\"rue\"", ",", "(", "\"StreetName\"", ",", "0.9987", ")", ")", ",", "\n", "(", "\"des\"", ",", "(", "\"StreetName\"", ",", "0.9993", ")", ")", ",", "\n", "(", "\"Lilas\"", ",", "(", "\"StreetName\"", ",", "0.8176", ")", ")", ",", "\n", "(", "\"Ouest\"", ",", "(", "\"Municipality\"", ",", "0.781", ")", ")", ",", "\n", "(", "\"Quebec\"", ",", "(", "\"Municipality\"", ",", "0.9768", ")", ")", ",", "\n", "(", "\"Quebec\"", ",", "(", "\"Province\"", ",", "1.0", ")", ")", ",", "\n", "(", "\"G1L\"", ",", "(", "\"PostalCode\"", ",", "0.9993", ")", ")", ",", "\n", "(", "\"1B6\"", ",", "(", "\"PostalCode\"", ",", "1.0", ")", ")", ",", "\n", "]", "\n", "\n", "not_equivalent_formatted_parsed_address", "=", "FormattedParsedAddress", "(", "\n", "{", "not_equivalent_address", ":", "not_equivalent_address_parsing", "}", "\n", ")", "\n", "\n", "not_equivalent_formatted_compared_addresses_raw_", "=", "FormattedComparedAddressesTags", "(", "\n", "first_address", "=", "original_formatted_parsed_address", ",", "\n", "second_address", "=", "not_equivalent_formatted_parsed_address", ",", "\n", "origin", "=", "(", "\"source\"", ",", "\"deepparse using Bpemb\"", ")", ",", "\n", "with_prob", "=", "True", ",", "\n", ")", "\n", "\n", "expected_sentences", "=", "[", "\n", "\"Shared\\nBlue: Belongs only to the source\\nYellow: Belongs only to the deepparse using \"", ",", "\n", "\"\\n\\x1b[38;2;26;123;220mOuest\\x1b[0m\\n\"", ",", "\n", "\"Municipality: \\n\\x1b[38;2;255;194;10mOuest \\x1b[0m\\x1b[38;2;255;255;255m\"", ",", "\n", "\"Quebec\\x1b[0m\\n\"", ",", "\n", "]", "\n", "\n", "actual", "=", "not_equivalent_formatted_compared_addresses_raw_", ".", "_comparison_report_builder", "(", ")", "\n", "for", "expected_sentence", "in", "expected_sentences", ":", "\n", "            ", "self", ".", "assertIn", "(", "expected_sentence", ",", "actual", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.metrics.nll_loss.nll_loss": [[6, 16], ["ground_truth.transpose.transpose", "range", "pred.size", "criterion"], "function", ["None"], ["def", "nll_loss", "(", "pred", ",", "ground_truth", ")", ":", "\n", "    ", "\"\"\"\n    NLL loss compute per tag.\n    \"\"\"", "\n", "loss", "=", "0", "\n", "\n", "ground_truth", "=", "ground_truth", ".", "transpose", "(", "0", ",", "1", ")", "\n", "for", "i", "in", "range", "(", "pred", ".", "size", "(", "0", ")", ")", ":", "\n", "        ", "loss", "+=", "criterion", "(", "pred", "[", "i", "]", ",", "ground_truth", "[", "i", "]", ")", "\n", "", "return", "loss", "\n", "", ""]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.metrics.accuracy.accuracy": [[4, 9], ["poutyne.framework.metrics.acc", "pred.transpose().transpose", "pred.transpose"], "function", ["None"], ["def", "accuracy", "(", "pred", ",", "ground_truth", ")", ":", "\n", "    ", "\"\"\"\n    Accuracy per tag.\n    \"\"\"", "\n", "return", "acc", "(", "pred", ".", "transpose", "(", "0", ",", "1", ")", ".", "transpose", "(", "-", "1", ",", "1", ")", ",", "ground_truth", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.metrics.test_accuracy.AccuracyTest.setUp": [[12, 171], ["torch.device", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["None"], ["    ", "def", "setUp", "(", "self", ")", "->", "None", ":", "\n", "        ", "self", ".", "a_device", "=", "torch", ".", "device", "(", "\"cpu\"", ")", "\n", "\n", "# 2 address of six elements each", "\n", "self", ".", "ground_truth", "=", "torch", ".", "tensor", "(", "[", "[", "0", ",", "1", ",", "1", ",", "4", ",", "5", ",", "8", "]", ",", "[", "1", ",", "0", ",", "3", ",", "8", ",", "0", ",", "0", "]", "]", ",", "device", "=", "self", ".", "a_device", ")", "\n", "self", ".", "a_prediction_tensor", "=", "torch", ".", "tensor", "(", "\n", "[", "\n", "[", "\n", "[", "\n", "-", "2.2366e-03", ",", "\n", "-", "7.1717e00", ",", "\n", "-", "1.2499e01", ",", "\n", "-", "6.7893e00", ",", "\n", "-", "1.3376e01", ",", "\n", "-", "8.6677e00", ",", "\n", "-", "9.3836e00", ",", "\n", "-", "9.4463e00", ",", "\n", "-", "1.9178e01", ",", "\n", "]", ",", "\n", "[", "\n", "-", "1.7175e01", ",", "\n", "-", "7.4981e-02", ",", "\n", "-", "1.5088e01", ",", "\n", "-", "7.0761e00", ",", "\n", "-", "2.7295e00", ",", "\n", "-", "5.0936e00", ",", "\n", "-", "1.2763e01", ",", "\n", "-", "1.2705e01", ",", "\n", "-", "4.2618e01", ",", "\n", "]", ",", "\n", "]", ",", "\n", "[", "\n", "[", "\n", "-", "1.3740e01", ",", "\n", "-", "3.1232e-05", ",", "\n", "-", "2.0795e01", ",", "\n", "-", "1.0409e01", ",", "\n", "-", "2.6400e01", ",", "\n", "-", "2.3393e01", ",", "\n", "-", "2.1003e01", ",", "\n", "-", "2.1134e01", ",", "\n", "-", "3.9064e01", ",", "\n", "]", ",", "\n", "[", "\n", "-", "3.3409e00", ",", "\n", "-", "2.4993e00", ",", "\n", "-", "1.7771e01", ",", "\n", "-", "1.2612e-01", ",", "\n", "-", "1.5750e01", ",", "\n", "-", "6.9642e00", ",", "\n", "-", "1.5144e01", ",", "\n", "-", "1.5204e01", ",", "\n", "-", "3.5160e01", ",", "\n", "]", ",", "\n", "]", ",", "\n", "[", "\n", "[", "\n", "-", "1.6033e01", ",", "\n", "-", "3.2526e00", ",", "\n", "-", "1.6328e01", ",", "\n", "-", "3.9443e-02", ",", "\n", "-", "1.6613e01", ",", "\n", "-", "1.7416e01", ",", "\n", "-", "1.8283e01", ",", "\n", "-", "1.8346e01", ",", "\n", "-", "3.1463e01", ",", "\n", "]", ",", "\n", "[", "\n", "-", "9.6402e00", ",", "\n", "-", "8.4887e00", ",", "\n", "-", "1.7941e01", ",", "\n", "-", "5.0700e00", ",", "\n", "-", "6.8180e-03", ",", "\n", "-", "8.3299e00", ",", "\n", "-", "1.6193e01", ",", "\n", "-", "1.6284e01", ",", "\n", "-", "3.3004e01", ",", "\n", "]", ",", "\n", "]", ",", "\n", "[", "\n", "[", "\n", "-", "1.3168e01", ",", "\n", "-", "1.4217e01", ",", "\n", "-", "1.3901e01", ",", "\n", "-", "1.2135e01", ",", "\n", "-", "9.6559e-06", ",", "\n", "-", "1.4170e01", ",", "\n", "-", "1.9320e01", ",", "\n", "-", "1.9513e01", ",", "\n", "-", "3.6137e01", ",", "\n", "]", ",", "\n", "[", "\n", "-", "1.3708e01", ",", "\n", "-", "1.5111e01", ",", "\n", "-", "1.7616e01", ",", "\n", "-", "1.7709e01", ",", "\n", "-", "1.5568e-04", ",", "\n", "-", "8.7770e00", ",", "\n", "-", "1.7401e01", ",", "\n", "-", "1.7421e01", ",", "\n", "-", "1.9826e01", ",", "\n", "]", ",", "\n", "]", ",", "\n", "[", "\n", "[", "\n", "-", "1.2694e01", ",", "\n", "-", "1.7848e01", ",", "\n", "-", "1.5564e01", ",", "\n", "-", "2.3230e01", ",", "\n", "-", "1.0867e01", ",", "\n", "-", "2.7418e-05", ",", "\n", "-", "1.7265e01", ",", "\n", "-", "1.7370e01", ",", "\n", "-", "1.2187e01", ",", "\n", "]", ",", "\n", "[", "\n", "-", "1.8689e01", ",", "\n", "-", "1.8121e01", ",", "\n", "-", "2.0229e01", ",", "\n", "-", "2.5230e01", ",", "\n", "-", "6.5044e00", ",", "\n", "-", "1.6420e01", ",", "\n", "-", "1.9653e01", ",", "\n", "-", "1.9648e01", ",", "\n", "-", "1.4981e-03", ",", "\n", "]", ",", "\n", "]", ",", "\n", "[", "\n", "[", "\n", "-", "1.7753e01", ",", "\n", "-", "1.9364e01", ",", "\n", "-", "1.9066e01", ",", "\n", "-", "2.8301e01", ",", "\n", "-", "1.8600e01", ",", "\n", "-", "1.0906e01", ",", "\n", "-", "2.0326e01", ",", "\n", "-", "2.0414e01", ",", "\n", "-", "1.8358e-05", ",", "\n", "]", ",", "\n", "[", "\n", "-", "2.4182e01", ",", "\n", "-", "2.5269e01", ",", "\n", "-", "2.6161e01", ",", "\n", "-", "3.2104e01", ",", "\n", "-", "1.4497e01", ",", "\n", "-", "2.2898e01", ",", "\n", "-", "2.4870e01", ",", "\n", "-", "2.4851e01", ",", "\n", "-", "4.7684e-07", ",", "\n", "]", ",", "\n", "]", ",", "\n", "]", ",", "\n", "device", "=", "self", ".", "a_device", ",", "\n", "requires_grad", "=", "True", ",", "\n", ")", "\n", "self", ".", "an_accuracy_score", "=", "torch", ".", "tensor", "(", "50.0", ",", "device", "=", "self", ".", "a_device", ")", "\n", "\n", "# 2 address of two element each", "\n", "self", ".", "a_short_ground_truth", "=", "torch", ".", "tensor", "(", "[", "[", "0", ",", "1", "]", ",", "[", "1", ",", "0", "]", "]", ",", "device", "=", "self", ".", "a_device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.metrics.test_accuracy.AccuracyTest.test_givenAPredictionTensor_whenAccuracyPerTag_thenAccuracyIsOk": [[172, 176], ["deepparse.metrics.accuracy", "test_accuracy.AccuracyTest.assertEqual"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.metrics.accuracy.accuracy"], ["", "def", "test_givenAPredictionTensor_whenAccuracyPerTag_thenAccuracyIsOk", "(", "self", ")", ":", "\n", "        ", "actual", "=", "accuracy", "(", "self", ".", "a_prediction_tensor", ",", "self", ".", "ground_truth", ")", "\n", "expected", "=", "self", ".", "an_accuracy_score", "\n", "self", ".", "assertEqual", "(", "expected", ",", "actual", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.metrics.test_accuracy.AccuracyTest.test_givenAPerfectPredictionTensor_whenAccuracyPerTag_thenAccuracyIs100": [[177, 211], ["torch.tensor", "deepparse.metrics.accuracy", "torch.tensor", "test_accuracy.AccuracyTest.assertEqual"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.metrics.accuracy.accuracy"], ["", "def", "test_givenAPerfectPredictionTensor_whenAccuracyPerTag_thenAccuracyIs100", "(", "self", ")", ":", "\n", "        ", "first_token_first_element_of_the_batch", "=", "[", "\n", "1", ",", "\n", "0", ",", "\n", "]", "# the predicted token is the first class", "\n", "first_token_second_element_of_the_batch", "=", "[", "\n", "0", ",", "\n", "1", ",", "\n", "]", "# the predicted token is the second class", "\n", "second_token_first_element_of_the_batch", "=", "[", "\n", "0", ",", "\n", "1", ",", "\n", "]", "# the predicted token is the second class", "\n", "second_token_second_element_of_the_batch", "=", "[", "\n", "1", ",", "\n", "0", ",", "\n", "]", "# the predicted token is the first class", "\n", "predict_tensor", "=", "torch", ".", "tensor", "(", "\n", "[", "\n", "[", "\n", "first_token_first_element_of_the_batch", ",", "\n", "first_token_second_element_of_the_batch", ",", "\n", "]", ",", "\n", "[", "\n", "second_token_first_element_of_the_batch", ",", "\n", "second_token_second_element_of_the_batch", ",", "\n", "]", ",", "\n", "]", ",", "\n", "device", "=", "self", ".", "a_device", ",", "\n", ")", "\n", "\n", "actual", "=", "accuracy", "(", "predict_tensor", ",", "self", ".", "a_short_ground_truth", ")", "\n", "expected", "=", "torch", ".", "tensor", "(", "100.0", ",", "device", "=", "self", ".", "a_device", ")", "\n", "self", ".", "assertEqual", "(", "expected", ",", "actual", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.metrics.test_accuracy.AccuracyTest.test_givenACompletelyWrongPredictionTensor_whenAccuracyPerTag_thenAccuracyIs0": [[212, 248], ["torch.tensor", "deepparse.metrics.accuracy", "torch.tensor", "test_accuracy.AccuracyTest.assertEqual"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.metrics.accuracy.accuracy"], ["", "def", "test_givenACompletelyWrongPredictionTensor_whenAccuracyPerTag_thenAccuracyIs0", "(", "\n", "self", ",", "\n", ")", ":", "\n", "        ", "first_token_first_element_of_the_batch", "=", "[", "\n", "0", ",", "\n", "1", ",", "\n", "]", "# the predicted token is the second class", "\n", "first_token_second_element_of_the_batch", "=", "[", "\n", "1", ",", "\n", "0", ",", "\n", "]", "# the predicted token is the first class", "\n", "second_token_first_element_of_the_batch", "=", "[", "\n", "1", ",", "\n", "0", ",", "\n", "]", "# the predicted token is the first class", "\n", "second_token_second_element_of_the_batch", "=", "[", "\n", "0", ",", "\n", "1", ",", "\n", "]", "# the predicted token is the second class", "\n", "predict_tensor", "=", "torch", ".", "tensor", "(", "\n", "[", "\n", "[", "\n", "first_token_first_element_of_the_batch", ",", "\n", "first_token_second_element_of_the_batch", ",", "\n", "]", ",", "\n", "[", "\n", "second_token_first_element_of_the_batch", ",", "\n", "second_token_second_element_of_the_batch", ",", "\n", "]", ",", "\n", "]", ",", "\n", "device", "=", "self", ".", "a_device", ",", "\n", ")", "\n", "\n", "actual", "=", "accuracy", "(", "predict_tensor", ",", "self", ".", "a_short_ground_truth", ")", "\n", "expected", "=", "torch", ".", "tensor", "(", "0.0", ",", "device", "=", "self", ".", "a_device", ")", "\n", "self", ".", "assertEqual", "(", "expected", ",", "actual", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.metrics.test_nll_loss.NLLLossTest.setUp": [[12, 171], ["torch.device", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["None"], ["    ", "def", "setUp", "(", "self", ")", "->", "None", ":", "\n", "        ", "self", ".", "a_device", "=", "torch", ".", "device", "(", "\"cpu\"", ")", "\n", "\n", "# 2 address of six elements each", "\n", "self", ".", "ground_truth", "=", "torch", ".", "tensor", "(", "[", "[", "0", ",", "1", ",", "1", ",", "4", ",", "5", ",", "8", "]", ",", "[", "1", ",", "0", ",", "3", ",", "8", ",", "0", ",", "0", "]", "]", ",", "device", "=", "self", ".", "a_device", ")", "\n", "self", ".", "a_prediction_tensor", "=", "torch", ".", "tensor", "(", "\n", "[", "\n", "[", "\n", "[", "\n", "-", "2.2366e-03", ",", "\n", "-", "7.1717e00", ",", "\n", "-", "1.2499e01", ",", "\n", "-", "6.7893e00", ",", "\n", "-", "1.3376e01", ",", "\n", "-", "8.6677e00", ",", "\n", "-", "9.3836e00", ",", "\n", "-", "9.4463e00", ",", "\n", "-", "1.9178e01", ",", "\n", "]", ",", "\n", "[", "\n", "-", "1.7175e01", ",", "\n", "-", "7.4981e-02", ",", "\n", "-", "1.5088e01", ",", "\n", "-", "7.0761e00", ",", "\n", "-", "2.7295e00", ",", "\n", "-", "5.0936e00", ",", "\n", "-", "1.2763e01", ",", "\n", "-", "1.2705e01", ",", "\n", "-", "4.2618e01", ",", "\n", "]", ",", "\n", "]", ",", "\n", "[", "\n", "[", "\n", "-", "1.3740e01", ",", "\n", "-", "3.1232e-05", ",", "\n", "-", "2.0795e01", ",", "\n", "-", "1.0409e01", ",", "\n", "-", "2.6400e01", ",", "\n", "-", "2.3393e01", ",", "\n", "-", "2.1003e01", ",", "\n", "-", "2.1134e01", ",", "\n", "-", "3.9064e01", ",", "\n", "]", ",", "\n", "[", "\n", "-", "3.3409e00", ",", "\n", "-", "2.4993e00", ",", "\n", "-", "1.7771e01", ",", "\n", "-", "1.2612e-01", ",", "\n", "-", "1.5750e01", ",", "\n", "-", "6.9642e00", ",", "\n", "-", "1.5144e01", ",", "\n", "-", "1.5204e01", ",", "\n", "-", "3.5160e01", ",", "\n", "]", ",", "\n", "]", ",", "\n", "[", "\n", "[", "\n", "-", "1.6033e01", ",", "\n", "-", "3.2526e00", ",", "\n", "-", "1.6328e01", ",", "\n", "-", "3.9443e-02", ",", "\n", "-", "1.6613e01", ",", "\n", "-", "1.7416e01", ",", "\n", "-", "1.8283e01", ",", "\n", "-", "1.8346e01", ",", "\n", "-", "3.1463e01", ",", "\n", "]", ",", "\n", "[", "\n", "-", "9.6402e00", ",", "\n", "-", "8.4887e00", ",", "\n", "-", "1.7941e01", ",", "\n", "-", "5.0700e00", ",", "\n", "-", "6.8180e-03", ",", "\n", "-", "8.3299e00", ",", "\n", "-", "1.6193e01", ",", "\n", "-", "1.6284e01", ",", "\n", "-", "3.3004e01", ",", "\n", "]", ",", "\n", "]", ",", "\n", "[", "\n", "[", "\n", "-", "1.3168e01", ",", "\n", "-", "1.4217e01", ",", "\n", "-", "1.3901e01", ",", "\n", "-", "1.2135e01", ",", "\n", "-", "9.6559e-06", ",", "\n", "-", "1.4170e01", ",", "\n", "-", "1.9320e01", ",", "\n", "-", "1.9513e01", ",", "\n", "-", "3.6137e01", ",", "\n", "]", ",", "\n", "[", "\n", "-", "1.3708e01", ",", "\n", "-", "1.5111e01", ",", "\n", "-", "1.7616e01", ",", "\n", "-", "1.7709e01", ",", "\n", "-", "1.5568e-04", ",", "\n", "-", "8.7770e00", ",", "\n", "-", "1.7401e01", ",", "\n", "-", "1.7421e01", ",", "\n", "-", "1.9826e01", ",", "\n", "]", ",", "\n", "]", ",", "\n", "[", "\n", "[", "\n", "-", "1.2694e01", ",", "\n", "-", "1.7848e01", ",", "\n", "-", "1.5564e01", ",", "\n", "-", "2.3230e01", ",", "\n", "-", "1.0867e01", ",", "\n", "-", "2.7418e-05", ",", "\n", "-", "1.7265e01", ",", "\n", "-", "1.7370e01", ",", "\n", "-", "1.2187e01", ",", "\n", "]", ",", "\n", "[", "\n", "-", "1.8689e01", ",", "\n", "-", "1.8121e01", ",", "\n", "-", "2.0229e01", ",", "\n", "-", "2.5230e01", ",", "\n", "-", "6.5044e00", ",", "\n", "-", "1.6420e01", ",", "\n", "-", "1.9653e01", ",", "\n", "-", "1.9648e01", ",", "\n", "-", "1.4981e-03", ",", "\n", "]", ",", "\n", "]", ",", "\n", "[", "\n", "[", "\n", "-", "1.7753e01", ",", "\n", "-", "1.9364e01", ",", "\n", "-", "1.9066e01", ",", "\n", "-", "2.8301e01", ",", "\n", "-", "1.8600e01", ",", "\n", "-", "1.0906e01", ",", "\n", "-", "2.0326e01", ",", "\n", "-", "2.0414e01", ",", "\n", "-", "1.8358e-05", ",", "\n", "]", ",", "\n", "[", "\n", "-", "2.4182e01", ",", "\n", "-", "2.5269e01", ",", "\n", "-", "2.6161e01", ",", "\n", "-", "3.2104e01", ",", "\n", "-", "1.4497e01", ",", "\n", "-", "2.2898e01", ",", "\n", "-", "2.4870e01", ",", "\n", "-", "2.4851e01", ",", "\n", "-", "4.7684e-07", ",", "\n", "]", ",", "\n", "]", ",", "\n", "]", ",", "\n", "device", "=", "self", ".", "a_device", ",", "\n", "requires_grad", "=", "True", ",", "\n", ")", "\n", "self", ".", "a_loss", "=", "torch", ".", "tensor", "(", "37.2189", ",", "device", "=", "self", ".", "a_device", ")", "\n", "\n", "# 2 address of two element each", "\n", "self", ".", "a_short_ground_truth", "=", "torch", ".", "tensor", "(", "[", "[", "0", ",", "1", "]", ",", "[", "1", ",", "0", "]", "]", ",", "device", "=", "self", ".", "a_device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.metrics.test_nll_loss.NLLLossTest.test_givenAPredictionTensor_whenNLLLossPerTag_thenLossIsOk": [[172, 177], ["deepparse.metrics.nll_loss().detach().tolist", "test_nll_loss.NLLLossTest.a_loss.tolist", "test_nll_loss.NLLLossTest.assertAlmostEqual", "deepparse.metrics.nll_loss().detach", "deepparse.metrics.nll_loss"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.metrics.nll_loss.nll_loss"], ["", "def", "test_givenAPredictionTensor_whenNLLLossPerTag_thenLossIsOk", "(", "self", ")", ":", "\n", "# need to convert to list and use float since not working almost equal for tensor", "\n", "        ", "actual", "=", "nll_loss", "(", "self", ".", "a_prediction_tensor", ",", "self", ".", "ground_truth", ")", ".", "detach", "(", ")", ".", "tolist", "(", ")", "\n", "expected", "=", "self", ".", "a_loss", ".", "tolist", "(", ")", "\n", "self", ".", "assertAlmostEqual", "(", "expected", ",", "actual", ",", "delta", "=", "5", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.metrics.test_nll_loss.NLLLossTest.test_givenAPerfectPredictionTensor_whenNLLLossPerTag_thenLossIs0": [[178, 213], ["torch.tensor", "deepparse.metrics.nll_loss().detach().tolist", "torch.tensor().tolist", "test_nll_loss.NLLLossTest.assertAlmostEqual", "deepparse.metrics.nll_loss().detach", "torch.tensor", "deepparse.metrics.nll_loss"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.metrics.nll_loss.nll_loss"], ["", "def", "test_givenAPerfectPredictionTensor_whenNLLLossPerTag_thenLossIs0", "(", "self", ")", ":", "\n", "# Tags prediction value are \"inverted\" to mimic the log", "\n", "        ", "first_token_first_element_of_the_batch", "=", "[", "\n", "0.0", ",", "\n", "1.0", ",", "\n", "]", "# the predicted token is the first class", "\n", "first_token_second_element_of_the_batch", "=", "[", "\n", "1.0", ",", "\n", "0.0", ",", "\n", "]", "# the predicted token is the second class", "\n", "second_token_first_element_of_the_batch", "=", "[", "\n", "1.0", ",", "\n", "0.0", ",", "\n", "]", "# the predicted token is the second class", "\n", "second_token_second_element_of_the_batch", "=", "[", "\n", "0.0", ",", "\n", "1.0", ",", "\n", "]", "# the predicted token is the first class", "\n", "predict_tensor", "=", "torch", ".", "tensor", "(", "\n", "[", "\n", "[", "\n", "first_token_first_element_of_the_batch", ",", "\n", "first_token_second_element_of_the_batch", ",", "\n", "]", ",", "\n", "[", "\n", "second_token_first_element_of_the_batch", ",", "\n", "second_token_second_element_of_the_batch", ",", "\n", "]", ",", "\n", "]", ",", "\n", "device", "=", "self", ".", "a_device", ",", "\n", ")", "\n", "\n", "actual", "=", "nll_loss", "(", "predict_tensor", ",", "self", ".", "a_short_ground_truth", ")", ".", "detach", "(", ")", ".", "tolist", "(", ")", "\n", "expected", "=", "torch", ".", "tensor", "(", "1", ",", "device", "=", "self", ".", "a_device", ")", ".", "tolist", "(", ")", "\n", "self", ".", "assertAlmostEqual", "(", "expected", ",", "actual", ",", "delta", "=", "5", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.metrics.test_nll_loss.NLLLossTest.test_givenACompletelyWrongPredictionTensor_whenNLLLossPerTag_thenLossIsMinus2": [[214, 251], ["torch.tensor", "deepparse.metrics.nll_loss().detach().tolist", "torch.tensor", "test_nll_loss.NLLLossTest.assertAlmostEqual", "deepparse.metrics.nll_loss().detach", "deepparse.metrics.nll_loss"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.metrics.nll_loss.nll_loss"], ["", "def", "test_givenACompletelyWrongPredictionTensor_whenNLLLossPerTag_thenLossIsMinus2", "(", "\n", "self", ",", "\n", ")", ":", "\n", "# Tags prediction value are \"inverted\" to mimic the log", "\n", "        ", "first_token_first_element_of_the_batch", "=", "[", "\n", "1.0", ",", "\n", "0.0", ",", "\n", "]", "# the predicted token is the second class", "\n", "first_token_second_element_of_the_batch", "=", "[", "\n", "0.0", ",", "\n", "1.0", ",", "\n", "]", "# the predicted token is the first class", "\n", "second_token_first_element_of_the_batch", "=", "[", "\n", "0.0", ",", "\n", "1.0", ",", "\n", "]", "# the predicted token is the first class", "\n", "second_token_second_element_of_the_batch", "=", "[", "\n", "1.0", ",", "\n", "0.0", ",", "\n", "]", "# the predicted token is the second class", "\n", "predict_tensor", "=", "torch", ".", "tensor", "(", "\n", "[", "\n", "[", "\n", "first_token_first_element_of_the_batch", ",", "\n", "first_token_second_element_of_the_batch", ",", "\n", "]", ",", "\n", "[", "\n", "second_token_first_element_of_the_batch", ",", "\n", "second_token_second_element_of_the_batch", ",", "\n", "]", ",", "\n", "]", ",", "\n", "device", "=", "self", ".", "a_device", ",", "\n", ")", "\n", "\n", "actual", "=", "nll_loss", "(", "predict_tensor", ",", "self", ".", "a_short_ground_truth", ")", ".", "detach", "(", ")", ".", "tolist", "(", ")", "\n", "expected", "=", "torch", ".", "tensor", "(", "0.0", ",", "device", "=", "self", ".", "a_device", ")", "\n", "self", ".", "assertAlmostEqual", "(", "expected", ",", "actual", ",", "delta", "=", "5", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.vectorizer.fasttext_vectorizer.FastTextVectorizer.__call__": [[12, 25], ["validate_data_to_parse", "fasttext_vectorizer.FastTextVectorizer._vectorize_sequence"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.deepparse.tools.validate_data_to_parse", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.vectorizer.magnitude_vectorizer.MagnitudeVectorizer._vectorize_sequence"], ["def", "__call__", "(", "self", ",", "addresses", ":", "List", "[", "str", "]", ")", "->", "List", ":", "\n", "        ", "\"\"\"\n        Method to vectorizer addresses.\n\n        Args:\n            addresses (list[str]): The addresses to vectorize.\n\n        Return:\n            A list of embeddings corresponding to the addresses' elements.\n        \"\"\"", "\n", "validate_data_to_parse", "(", "addresses", ")", "\n", "\n", "return", "[", "self", ".", "_vectorize_sequence", "(", "address", ")", "for", "address", "in", "addresses", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.vectorizer.fasttext_vectorizer.FastTextVectorizer._vectorize_sequence": [[26, 37], ["fasttext_vectorizer.FastTextVectorizer.embeddings_model", "address.split"], "methods", ["None"], ["", "def", "_vectorize_sequence", "(", "self", ",", "address", ":", "str", ")", "->", "List", ":", "\n", "        ", "\"\"\"\n        Method to vectorize the address.\n\n        Args:\n            address (str): Address to vectorize using fastText.\n\n        Return:\n            A list of word vector.\n        \"\"\"", "\n", "return", "[", "self", ".", "embeddings_model", "(", "word", ")", "for", "word", "in", "address", ".", "split", "(", ")", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.vectorizer.bpemb_vectorizer.BPEmbVectorizer.__init__": [[16, 20], ["vectorizer.Vectorizer.__init__"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.timer.timer.Timer.__init__"], ["def", "__init__", "(", "self", ",", "embeddings_model", ":", "EmbeddingsModel", ")", "->", "None", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "embeddings_model", ")", "\n", "\n", "self", ".", "padding_value", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.vectorizer.bpemb_vectorizer.BPEmbVectorizer.__call__": [[21, 37], ["validate_data_to_parse", "bpemb_vectorizer.BPEmbVectorizer._decomposed_sequence_padding", "bpemb_vectorizer.BPEmbVectorizer._vectorize_sequence"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.deepparse.tools.validate_data_to_parse", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.vectorizer.bpemb_vectorizer.BPEmbVectorizer._decomposed_sequence_padding", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.vectorizer.magnitude_vectorizer.MagnitudeVectorizer._vectorize_sequence"], ["", "def", "__call__", "(", "self", ",", "addresses", ":", "List", "[", "str", "]", ")", "->", "List", "[", "Tuple", "]", ":", "\n", "        ", "\"\"\"\n        Method to vectorizer addresses.\n\n        Args:\n            addresses (list[str]): The addresses to vectorize.\n\n        Return:\n            A tuple of the addresses elements (components) embedding vector and the word decomposition lengths.\n        \"\"\"", "\n", "validate_data_to_parse", "(", "addresses", ")", "\n", "\n", "self", ".", "_max_length", "=", "0", "\n", "batch", "=", "[", "self", ".", "_vectorize_sequence", "(", "address", ")", "for", "address", "in", "addresses", "]", "\n", "self", ".", "_decomposed_sequence_padding", "(", "batch", ")", "\n", "return", "batch", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.vectorizer.bpemb_vectorizer.BPEmbVectorizer._vectorize_sequence": [[38, 59], ["address.split", "max", "bpemb_vectorizer.BPEmbVectorizer.embeddings_model", "word_decomposition_lengths.append", "input_sequence.append", "max", "len", "list"], "methods", ["None"], ["", "def", "_vectorize_sequence", "(", "self", ",", "address", ":", "str", ")", "->", "Tuple", "[", "List", ",", "List", "]", ":", "\n", "        ", "\"\"\"\n        Method to vectorize the address.\n\n        Args:\n            address (str): Address to vectorize using BPEmb.\n\n        Return:\n            A tuple of list of word vector and the word decomposition lengths.\n        \"\"\"", "\n", "\n", "input_sequence", "=", "[", "]", "\n", "word_decomposition_lengths", "=", "[", "]", "\n", "for", "word", "in", "address", ".", "split", "(", ")", ":", "\n", "            ", "bpe_decomposition", "=", "self", ".", "embeddings_model", "(", "word", ")", "\n", "word_decomposition_lengths", ".", "append", "(", "len", "(", "bpe_decomposition", ")", ")", "\n", "input_sequence", ".", "append", "(", "list", "(", "bpe_decomposition", ")", ")", "\n", "\n", "", "self", ".", "_max_length", "=", "max", "(", "self", ".", "_max_length", ",", "max", "(", "word_decomposition_lengths", ")", ")", "\n", "\n", "return", "input_sequence", ",", "word_decomposition_lengths", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.vectorizer.bpemb_vectorizer.BPEmbVectorizer._decomposed_sequence_padding": [[60, 70], ["len", "decomposition.extend", "len", "numpy.ones"], "methods", ["None"], ["", "def", "_decomposed_sequence_padding", "(", "self", ",", "batch", ":", "List", "[", "Tuple", "]", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        Method to add padding to the decomposed sequence.\n        \"\"\"", "\n", "for", "decomposed_sequence", ",", "_", "in", "batch", ":", "\n", "            ", "for", "decomposition", "in", "decomposed_sequence", ":", "\n", "                ", "if", "len", "(", "decomposition", ")", "!=", "self", ".", "_max_length", ":", "\n", "                    ", "decomposition", ".", "extend", "(", "\n", "[", "np", ".", "ones", "(", "self", ".", "embeddings_model", ".", "dim", ")", "*", "[", "self", ".", "padding_value", "]", "]", "\n", "*", "(", "self", ".", "_max_length", "-", "len", "(", "decomposition", ")", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.vectorizer.vectorizer.Vectorizer.__init__": [[16, 19], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "embeddings_model", ":", "EmbeddingsModel", ")", "->", "None", ":", "\n", "        ", "self", ".", "embeddings_model", "=", "embeddings_model", "\n", "self", ".", "eos_token", "=", "8", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.vectorizer.vectorizer.Vectorizer.__call__": [[20, 33], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "__call__", "(", "self", ",", "addresses", ":", "List", "[", "str", "]", ")", "->", "List", ":", "\n", "        ", "\"\"\"\n        Method to vectorizer addresses.\n\n        Args:\n            addresses (list[str]): The addresses to vectorize.\n\n        Return:\n            The addresses elements (components) embeddings vector.\n        \"\"\"", "\n", "\n", "pass", "\n", "", "", ""]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.vectorizer.train_vectorizer.TrainVectorizer.__init__": [[5, 11], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "embedding_vectorizer", ",", "tags_vectorizer", ")", ":", "\n", "        ", "\"\"\"\n        Vectorizer use during training to convert an address into word embeddings and to provide the target.\n        \"\"\"", "\n", "self", ".", "embedding_vectorizer", "=", "embedding_vectorizer", "\n", "self", ".", "tags_vectorizer", "=", "tags_vectorizer", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.vectorizer.train_vectorizer.TrainVectorizer.__call__": [[12, 35], ["input_sequence.extend", "zip", "train_vectorizer.TrainVectorizer.embedding_vectorizer", "target_tmp.append", "target_sequence.append", "train_vectorizer.TrainVectorizer.tags_vectorizer", "train_vectorizer.TrainVectorizer.tags_vectorizer"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "addresses", ":", "List", "[", "str", "]", ")", ":", "\n", "        ", "\"\"\"\n        Method to vectorizer addresses for training.\n\n        Args:\n            addresses (list[str]): The addresses to vectorize.\n\n        Return:\n            A tuple compose of embeddings word addresses' and the target idxs.\n        \"\"\"", "\n", "input_sequence", "=", "[", "]", "\n", "target_sequence", "=", "[", "]", "\n", "\n", "input_sequence", ".", "extend", "(", "\n", "self", ".", "embedding_vectorizer", "(", "[", "address", "[", "0", "]", "for", "address", "in", "addresses", "]", ")", "\n", ")", "# Need to be pass in batch", "\n", "\n", "# Otherwise, the padding for byte-pair encoding will be broken", "\n", "for", "address", "in", "addresses", ":", "\n", "            ", "target_tmp", "=", "[", "self", ".", "tags_vectorizer", "(", "target", ")", "for", "target", "in", "address", "[", "1", "]", "]", "\n", "target_tmp", ".", "append", "(", "self", ".", "tags_vectorizer", "(", "\"EOS\"", ")", ")", "# to append the End Of Sequence token", "\n", "target_sequence", ".", "append", "(", "target_tmp", ")", "\n", "", "return", "zip", "(", "input_sequence", ",", "target_sequence", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.vectorizer.magnitude_vectorizer.MagnitudeVectorizer.__call__": [[14, 27], ["validate_data_to_parse", "magnitude_vectorizer.MagnitudeVectorizer._vectorize_sequence"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.deepparse.tools.validate_data_to_parse", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.vectorizer.magnitude_vectorizer.MagnitudeVectorizer._vectorize_sequence"], ["def", "__call__", "(", "self", ",", "addresses", ":", "List", "[", "str", "]", ")", "->", "List", ":", "\n", "        ", "\"\"\"\n        Method to vectorizer addresses.\n\n        Args:\n            addresses (list[str]): The addresses to vectorize.\n\n        Return:\n            A list of embeddings corresponding to the addresses' elements.\n        \"\"\"", "\n", "validate_data_to_parse", "(", "addresses", ")", "\n", "\n", "return", "[", "self", ".", "_vectorize_sequence", "(", "address", ")", "for", "address", "in", "addresses", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.vectorizer.magnitude_vectorizer.MagnitudeVectorizer._vectorize_sequence": [[28, 39], ["magnitude_vectorizer.MagnitudeVectorizer.embeddings_model"], "methods", ["None"], ["", "def", "_vectorize_sequence", "(", "self", ",", "address", ":", "str", ")", "->", "ndarray", ":", "\n", "        ", "\"\"\"\n        Method to vectorize the address.\n\n        Args:\n            address (str): Address to vectorize using fastText.\n\n        Return:\n            A list of word vector.\n        \"\"\"", "\n", "return", "self", ".", "embeddings_model", "(", "address", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.vectorizer.test_fasttext_vectorizer.FasttextVectorizerTest.setUpClass": [[11, 30], ["None"], "methods", ["None"], ["    ", "@", "classmethod", "\n", "def", "setUpClass", "(", "cls", ")", ":", "\n", "        ", "cls", ".", "a_embedding_matrix", "=", "[", "\n", "[", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "1", "]", ",", "\n", "[", "1", ",", "0", "]", ",", "\n", "[", "1", ",", "1", "]", ",", "\n", "[", "0", ",", "2", "]", ",", "\n", "[", "2", ",", "1", "]", ",", "\n", "[", "2", ",", "2", "]", ",", "\n", "[", "1", ",", "2", "]", ",", "\n", "[", "2", ",", "1", "]", ",", "\n", "]", "\n", "cls", ".", "a_address", "=", "[", "\"5 test street\"", "]", "\n", "cls", ".", "a_vectorized_address", "=", "[", "[", "[", "0", ",", "0", "]", ",", "[", "0", ",", "1", "]", ",", "[", "1", ",", "0", "]", "]", "]", "\n", "cls", ".", "a_address_list", "=", "[", "\"3 test way\"", ",", "\"2 test road quebec\"", "]", "\n", "cls", ".", "a_vectorized_address_list", "=", "[", "\n", "[", "[", "0", ",", "0", "]", ",", "[", "0", ",", "1", "]", ",", "[", "1", ",", "0", "]", "]", ",", "\n", "[", "[", "1", ",", "1", "]", ",", "[", "0", ",", "2", "]", ",", "[", "2", ",", "1", "]", ",", "[", "2", ",", "2", "]", "]", ",", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.vectorizer.test_fasttext_vectorizer.FasttextVectorizerTest.setUp": [[32, 35], ["unittest.mock.MagicMock", "deepparse.vectorizer.FastTextVectorizer"], "methods", ["None"], ["", "def", "setUp", "(", "self", ")", ":", "\n", "        ", "self", ".", "embedding_network", "=", "MagicMock", "(", "spec", "=", "EmbeddingsModel", ",", "side_effect", "=", "self", ".", "a_embedding_matrix", ")", "\n", "self", ".", "fasttext_vectorizer", "=", "FastTextVectorizer", "(", "self", ".", "embedding_network", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.vectorizer.test_fasttext_vectorizer.FasttextVectorizerTest.test_given_a_empty_only_address_when_call_then_raise_error": [[36, 40], ["test_fasttext_vectorizer.FasttextVectorizerTest.assertRaises", "test_fasttext_vectorizer.FasttextVectorizerTest.fasttext_vectorizer"], "methods", ["None"], ["", "def", "test_given_a_empty_only_address_when_call_then_raise_error", "(", "self", ")", ":", "\n", "        ", "empty_only_address", "=", "\"\"", "\n", "with", "self", ".", "assertRaises", "(", "DataError", ")", ":", "\n", "            ", "self", ".", "fasttext_vectorizer", "(", "[", "empty_only_address", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.vectorizer.test_fasttext_vectorizer.FasttextVectorizerTest.test_given_a_whitespace_only_address_when_call_then_raise_error": [[41, 49], ["test_fasttext_vectorizer.FasttextVectorizerTest.assertRaises", "test_fasttext_vectorizer.FasttextVectorizerTest.fasttext_vectorizer", "test_fasttext_vectorizer.FasttextVectorizerTest.assertRaises", "test_fasttext_vectorizer.FasttextVectorizerTest.fasttext_vectorizer"], "methods", ["None"], ["", "", "def", "test_given_a_whitespace_only_address_when_call_then_raise_error", "(", "self", ")", ":", "\n", "        ", "a_whitespace_only_address", "=", "\" \"", "\n", "with", "self", ".", "assertRaises", "(", "DataError", ")", ":", "\n", "            ", "self", ".", "fasttext_vectorizer", "(", "[", "a_whitespace_only_address", "]", ")", "\n", "\n", "", "another_whitespace_only_address", "=", "\"    \"", "\n", "with", "self", ".", "assertRaises", "(", "DataError", ")", ":", "\n", "            ", "self", ".", "fasttext_vectorizer", "(", "[", "another_whitespace_only_address", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.vectorizer.test_fasttext_vectorizer.FasttextVectorizerTest.test_givenAnAddress_whenVectorizingTheAddress_thenShouldCallEmbeddingModelForEachWord": [[50, 56], ["test_fasttext_vectorizer.FasttextVectorizerTest.fasttext_vectorizer", "test_fasttext_vectorizer.FasttextVectorizerTest.assertEqual", "len", "test_fasttext_vectorizer.FasttextVectorizerTest.a_address[].split"], "methods", ["None"], ["", "", "def", "test_givenAnAddress_whenVectorizingTheAddress_thenShouldCallEmbeddingModelForEachWord", "(", "\n", "self", ",", "\n", ")", ":", "\n", "        ", "self", ".", "fasttext_vectorizer", "(", "self", ".", "a_address", ")", "\n", "\n", "self", ".", "assertEqual", "(", "self", ".", "embedding_network", ".", "call_count", ",", "len", "(", "self", ".", "a_address", "[", "0", "]", ".", "split", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.vectorizer.test_fasttext_vectorizer.FasttextVectorizerTest.test_givenAnAddress_whenVectorizingTheAddress_thenShouldReturnCorrectEmbeddings": [[57, 63], ["test_fasttext_vectorizer.FasttextVectorizerTest.fasttext_vectorizer", "test_fasttext_vectorizer.FasttextVectorizerTest.assertEqual"], "methods", ["None"], ["", "def", "test_givenAnAddress_whenVectorizingTheAddress_thenShouldReturnCorrectEmbeddings", "(", "\n", "self", ",", "\n", ")", ":", "\n", "        ", "embedded_address", "=", "self", ".", "fasttext_vectorizer", "(", "self", ".", "a_address", ")", "\n", "\n", "self", ".", "assertEqual", "(", "embedded_address", ",", "self", ".", "a_vectorized_address", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.vectorizer.test_fasttext_vectorizer.FasttextVectorizerTest.test_givenAnAddressList_whenVectorizingTheAddress_thenShouldReturnCorrectEmbeddings": [[64, 70], ["test_fasttext_vectorizer.FasttextVectorizerTest.fasttext_vectorizer", "test_fasttext_vectorizer.FasttextVectorizerTest.assertEqual"], "methods", ["None"], ["", "def", "test_givenAnAddressList_whenVectorizingTheAddress_thenShouldReturnCorrectEmbeddings", "(", "\n", "self", ",", "\n", ")", ":", "\n", "        ", "embedded_address", "=", "self", ".", "fasttext_vectorizer", "(", "self", ".", "a_address_list", ")", "\n", "\n", "self", ".", "assertEqual", "(", "embedded_address", ",", "self", ".", "a_vectorized_address_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.vectorizer.test_train_vectorizer.TrainVectorizerTest.test_givenAEmbeddingVectorizer_whenCallVectorizer_thenProcess": [[10, 16], ["deepparse.vectorizer.TrainVectorizer", "deepparse.vectorizer.TrainVectorizer.", "test_train_vectorizer.TrainVectorizerTest.assertIsInstance", "unittest.mock.MagicMock", "unittest.mock.MagicMock"], "methods", ["None"], ["    ", "def", "test_givenAEmbeddingVectorizer_whenCallVectorizer_thenProcess", "(", "self", ")", ":", "\n", "        ", "train_vectorizer", "=", "TrainVectorizer", "(", "MagicMock", "(", ")", ",", "MagicMock", "(", ")", ")", "\n", "\n", "output", "=", "train_vectorizer", "(", "[", "\"A list\"", "]", ")", "\n", "\n", "self", ".", "assertIsInstance", "(", "output", ",", "zip", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.vectorizer.test_train_vectorizer.TrainVectorizerTest.test_givenAVectorizer_whenCallAnAddress_thenProcess": [[17, 22], ["deepparse.vectorizer.TrainVectorizer", "deepparse.vectorizer.TrainVectorizer.", "test_train_vectorizer.TrainVectorizerTest.assertEqual", "unittest.mock.MagicMock", "unittest.mock.MagicMock", "list"], "methods", ["None"], ["", "def", "test_givenAVectorizer_whenCallAnAddress_thenProcess", "(", "self", ")", ":", "\n", "        ", "train_vectorizer", "=", "TrainVectorizer", "(", "MagicMock", "(", "side_effect", "=", "[", "[", "0", "]", "]", ")", ",", "MagicMock", "(", "side_effect", "=", "[", "0", ",", "0", "]", ")", ")", "\n", "\n", "output", "=", "train_vectorizer", "(", "[", "\"A list of\"", "]", ")", "\n", "self", ".", "assertEqual", "(", "list", "(", "output", ")", ",", "[", "(", "0", ",", "[", "0", ",", "0", "]", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.vectorizer.test_train_vectorizer.TrainVectorizerTest.test_givenAVectorizer_whenCallWithAnWhiteSpaceOnlyAddress_thenRaiseError": [[23, 32], ["unittest.mock.MagicMock", "deepparse.vectorizer.BPEmbVectorizer", "deepparse.vectorizer.TrainVectorizer", "unittest.mock.MagicMock", "test_train_vectorizer.TrainVectorizerTest.assertRaises", "deepparse.vectorizer.TrainVectorizer."], "methods", ["None"], ["", "def", "test_givenAVectorizer_whenCallWithAnWhiteSpaceOnlyAddress_thenRaiseError", "(", "self", ")", ":", "\n", "        ", "embedding_network", "=", "MagicMock", "(", "spec", "=", "EmbeddingsModel", ")", "\n", "embedding_network", ".", "dim", "=", "2", "\n", "bpemb_vectorizer", "=", "BPEmbVectorizer", "(", "embedding_network", ")", "\n", "\n", "train_vectorizer", "=", "TrainVectorizer", "(", "bpemb_vectorizer", ",", "MagicMock", "(", ")", ")", "\n", "a_whitespace_only_address", "=", "\" \"", "\n", "with", "self", ".", "assertRaises", "(", "DataError", ")", ":", "\n", "            ", "train_vectorizer", "(", "[", "a_whitespace_only_address", "]", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.vectorizer.test_bpemb_vectorizer.BpembVectorizerTest.setUpClass": [[13, 44], ["numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.zeros", "numpy.array", "numpy.array", "numpy.array", "numpy.zeros", "numpy.zeros", "numpy.array", "numpy.array", "numpy.zeros", "numpy.array", "numpy.array", "numpy.array", "numpy.zeros", "numpy.zeros", "numpy.array", "numpy.array", "numpy.zeros", "numpy.array", "numpy.zeros", "numpy.zeros", "numpy.array", "numpy.zeros", "numpy.zeros", "numpy.array", "numpy.array", "numpy.zeros"], "methods", ["None"], ["    ", "@", "classmethod", "\n", "def", "setUpClass", "(", "cls", ")", ":", "\n", "        ", "cls", ".", "a_embedding_matrix", "=", "[", "\n", "[", "np", ".", "array", "(", "[", "0", ",", "0", "]", ")", ",", "np", ".", "array", "(", "[", "1", ",", "1", "]", ")", "]", ",", "\n", "[", "np", ".", "array", "(", "[", "0", ",", "1", "]", ")", ",", "np", ".", "array", "(", "[", "1", ",", "2", "]", ")", ",", "np", ".", "array", "(", "[", "2", ",", "3", "]", ")", "]", ",", "\n", "[", "np", ".", "array", "(", "[", "1", ",", "0", "]", ")", "]", ",", "\n", "[", "np", ".", "array", "(", "[", "1", ",", "1", "]", ")", ",", "np", ".", "array", "(", "[", "2", ",", "2", "]", ")", "]", ",", "\n", "[", "np", ".", "array", "(", "[", "0", ",", "2", "]", ")", "]", ",", "\n", "[", "np", ".", "array", "(", "[", "2", ",", "1", "]", ")", "]", ",", "\n", "[", "np", ".", "array", "(", "[", "2", ",", "2", "]", ")", ",", "np", ".", "array", "(", "[", "3", ",", "3", "]", ")", "]", ",", "\n", "[", "np", ".", "array", "(", "[", "1", ",", "2", "]", ")", "]", ",", "\n", "[", "np", ".", "array", "(", "[", "2", ",", "1", "]", ")", "]", ",", "\n", "]", "\n", "cls", ".", "a_address", "=", "[", "\"5 test street\"", "]", "\n", "cls", ".", "a_vectorized_address", "=", "[", "\n", "[", "np", ".", "array", "(", "[", "0", ",", "0", "]", ")", ",", "np", ".", "array", "(", "[", "1", ",", "1", "]", ")", ",", "np", ".", "zeros", "(", "2", ")", "]", ",", "\n", "[", "np", ".", "array", "(", "[", "0", ",", "1", "]", ")", ",", "np", ".", "array", "(", "[", "1", ",", "2", "]", ")", ",", "np", ".", "array", "(", "[", "2", ",", "3", "]", ")", "]", ",", "\n", "[", "[", "1", ",", "0", "]", ",", "np", ".", "zeros", "(", "2", ")", ",", "np", ".", "zeros", "(", "2", ")", "]", ",", "\n", "]", "\n", "cls", ".", "a_address_list", "=", "[", "\"3 test way\"", ",", "\"2 test road quebec\"", "]", "\n", "cls", ".", "a_vectorized_address_list", "=", "[", "\n", "[", "\n", "[", "np", ".", "array", "(", "[", "0", ",", "0", "]", ")", ",", "np", ".", "array", "(", "[", "1", ",", "1", "]", ")", ",", "np", ".", "zeros", "(", "2", ")", "]", ",", "\n", "[", "np", ".", "array", "(", "[", "0", ",", "1", "]", ")", ",", "np", ".", "array", "(", "[", "1", ",", "2", "]", ")", ",", "np", ".", "array", "(", "[", "2", ",", "3", "]", ")", "]", ",", "\n", "[", "[", "1", ",", "0", "]", ",", "np", ".", "zeros", "(", "2", ")", ",", "np", ".", "zeros", "(", "2", ")", "]", ",", "\n", "]", ",", "\n", "[", "\n", "[", "np", ".", "array", "(", "[", "1", ",", "1", "]", ")", ",", "np", ".", "array", "(", "[", "2", ",", "2", "]", ")", ",", "np", ".", "zeros", "(", "2", ")", "]", ",", "\n", "[", "np", ".", "array", "(", "[", "0", ",", "2", "]", ")", ",", "np", ".", "zeros", "(", "2", ")", ",", "np", ".", "zeros", "(", "2", ")", "]", ",", "\n", "[", "np", ".", "array", "(", "[", "2", ",", "1", "]", ")", ",", "np", ".", "zeros", "(", "2", ")", ",", "np", ".", "zeros", "(", "2", ")", "]", ",", "\n", "[", "np", ".", "array", "(", "[", "2", ",", "2", "]", ")", ",", "np", ".", "array", "(", "[", "3", ",", "3", "]", ")", ",", "np", ".", "zeros", "(", "2", ")", "]", ",", "\n", "]", ",", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.vectorizer.test_bpemb_vectorizer.BpembVectorizerTest.setUp": [[47, 51], ["unittest.mock.MagicMock", "deepparse.vectorizer.BPEmbVectorizer"], "methods", ["None"], ["", "def", "setUp", "(", "self", ")", ":", "\n", "        ", "self", ".", "embedding_network", "=", "MagicMock", "(", "spec", "=", "EmbeddingsModel", ",", "side_effect", "=", "self", ".", "a_embedding_matrix", ")", "\n", "self", ".", "embedding_network", ".", "dim", "=", "2", "\n", "self", ".", "bpemb_vectorizer", "=", "BPEmbVectorizer", "(", "self", ".", "embedding_network", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.vectorizer.test_bpemb_vectorizer.BpembVectorizerTest.test_given_a_empty_only_address_when_call_then_raise_error": [[52, 56], ["test_bpemb_vectorizer.BpembVectorizerTest.assertRaises", "test_bpemb_vectorizer.BpembVectorizerTest.bpemb_vectorizer"], "methods", ["None"], ["", "def", "test_given_a_empty_only_address_when_call_then_raise_error", "(", "self", ")", ":", "\n", "        ", "empty_only_address", "=", "\"\"", "\n", "with", "self", ".", "assertRaises", "(", "DataError", ")", ":", "\n", "            ", "self", ".", "bpemb_vectorizer", "(", "[", "empty_only_address", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.vectorizer.test_bpemb_vectorizer.BpembVectorizerTest.test_given_a_whitespace_only_address_when_call_then_raise_error": [[57, 65], ["test_bpemb_vectorizer.BpembVectorizerTest.assertRaises", "test_bpemb_vectorizer.BpembVectorizerTest.bpemb_vectorizer", "test_bpemb_vectorizer.BpembVectorizerTest.assertRaises", "test_bpemb_vectorizer.BpembVectorizerTest.bpemb_vectorizer"], "methods", ["None"], ["", "", "def", "test_given_a_whitespace_only_address_when_call_then_raise_error", "(", "self", ")", ":", "\n", "        ", "a_whitespace_only_address", "=", "\" \"", "\n", "with", "self", ".", "assertRaises", "(", "DataError", ")", ":", "\n", "            ", "self", ".", "bpemb_vectorizer", "(", "[", "a_whitespace_only_address", "]", ")", "\n", "\n", "", "another_whitespace_only_address", "=", "\"    \"", "\n", "with", "self", ".", "assertRaises", "(", "DataError", ")", ":", "\n", "            ", "self", ".", "bpemb_vectorizer", "(", "[", "another_whitespace_only_address", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.vectorizer.test_bpemb_vectorizer.BpembVectorizerTest.test_givenAnAddress_whenVectorizingTheAddress_thenShouldCallEmbeddingModelForEachWord": [[66, 72], ["test_bpemb_vectorizer.BpembVectorizerTest.bpemb_vectorizer", "test_bpemb_vectorizer.BpembVectorizerTest.assertEqual", "len", "test_bpemb_vectorizer.BpembVectorizerTest.a_address[].split"], "methods", ["None"], ["", "", "def", "test_givenAnAddress_whenVectorizingTheAddress_thenShouldCallEmbeddingModelForEachWord", "(", "\n", "self", ",", "\n", ")", ":", "\n", "        ", "self", ".", "bpemb_vectorizer", "(", "self", ".", "a_address", ")", "\n", "\n", "self", ".", "assertEqual", "(", "self", ".", "embedding_network", ".", "call_count", ",", "len", "(", "self", ".", "a_address", "[", "0", "]", ".", "split", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.vectorizer.test_bpemb_vectorizer.BpembVectorizerTest.test_givenAnAddress_whenVectorizingTheAddress_thenShouldReturnCorrectEmbeddings": [[73, 80], ["test_bpemb_vectorizer.BpembVectorizerTest.bpemb_vectorizer", "test_bpemb_vectorizer.BpembVectorizerTest.assertTrue", "test_bpemb_vectorizer.BpembVectorizerTest._compare_two_vectorized_addresses"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.vectorizer.test_bpemb_vectorizer.BpembVectorizerTest._compare_two_vectorized_addresses"], ["", "def", "test_givenAnAddress_whenVectorizingTheAddress_thenShouldReturnCorrectEmbeddings", "(", "\n", "self", ",", "\n", ")", ":", "\n", "        ", "embedded_address", "=", "self", ".", "bpemb_vectorizer", "(", "self", ".", "a_address", ")", "\n", "embedded_address", "=", "embedded_address", "[", "0", "]", "[", "0", "]", "\n", "\n", "self", ".", "assertTrue", "(", "self", ".", "_compare_two_vectorized_addresses", "(", "embedded_address", ",", "self", ".", "a_vectorized_address", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.vectorizer.test_bpemb_vectorizer.BpembVectorizerTest.test_givenAnAddressList_whenVectorizingTheAddress_thenShouldReturnCorrectEmbeddings": [[81, 91], ["test_bpemb_vectorizer.BpembVectorizerTest.bpemb_vectorizer", "test_bpemb_vectorizer.BpembVectorizerTest.assertTrue", "test_bpemb_vectorizer.BpembVectorizerTest.assertTrue", "test_bpemb_vectorizer.BpembVectorizerTest._compare_two_vectorized_addresses", "test_bpemb_vectorizer.BpembVectorizerTest._compare_two_vectorized_addresses"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.vectorizer.test_bpemb_vectorizer.BpembVectorizerTest._compare_two_vectorized_addresses", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.vectorizer.test_bpemb_vectorizer.BpembVectorizerTest._compare_two_vectorized_addresses"], ["", "def", "test_givenAnAddressList_whenVectorizingTheAddress_thenShouldReturnCorrectEmbeddings", "(", "\n", "self", ",", "\n", ")", ":", "\n", "        ", "embedded_address", "=", "self", ".", "bpemb_vectorizer", "(", "self", ".", "a_address_list", ")", "\n", "\n", "self", ".", "assertTrue", "(", "\n", "self", ".", "_compare_two_vectorized_addresses", "(", "embedded_address", "[", "0", "]", "[", "0", "]", ",", "self", ".", "a_vectorized_address_list", "[", "0", "]", ")", "\n", ")", "\n", "self", ".", "assertTrue", "(", "\n", "self", ".", "_compare_two_vectorized_addresses", "(", "embedded_address", "[", "1", "]", "[", "0", "]", ",", "self", ".", "a_vectorized_address_list", "[", "1", "]", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.vectorizer.test_bpemb_vectorizer.BpembVectorizerTest._compare_two_vectorized_addresses": [[93, 100], ["zip", "zip", "numpy.array_equal"], "methods", ["None"], ["", "def", "_compare_two_vectorized_addresses", "(", "self", ",", "embedded_address", ",", "vectorized_address", ")", ":", "\n", "        ", "res", "=", "True", "\n", "for", "embedded_word", ",", "word_truth", "in", "zip", "(", "embedded_address", ",", "vectorized_address", ")", ":", "\n", "            ", "for", "subword_embedding", ",", "subword_truth", "in", "zip", "(", "embedded_word", ",", "word_truth", ")", ":", "\n", "                ", "res", "=", "np", ".", "array_equal", "(", "subword_embedding", ",", "subword_truth", ")", "\n", "\n", "", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.vectorizer.test_magnitude_vectorizer.MagnitudeVectorizerTest.setUpClass": [[11, 23], ["None"], "methods", ["None"], ["    ", "@", "classmethod", "\n", "def", "setUpClass", "(", "cls", ")", ":", "\n", "        ", "cls", ".", "a_embedding_matrix", "=", "[", "\n", "[", "[", "0", ",", "0", "]", ",", "[", "0", ",", "1", "]", ",", "[", "1", ",", "0", "]", "]", ",", "\n", "[", "[", "1", ",", "1", "]", ",", "[", "0", ",", "2", "]", ",", "[", "2", ",", "1", "]", ",", "[", "2", ",", "2", "]", "]", ",", "\n", "]", "\n", "cls", ".", "a_address", "=", "[", "\"5 test street\"", "]", "\n", "cls", ".", "a_vectorized_address", "=", "[", "[", "[", "0", ",", "0", "]", ",", "[", "0", ",", "1", "]", ",", "[", "1", ",", "0", "]", "]", "]", "\n", "cls", ".", "a_list_address", "=", "[", "\"3 test way\"", ",", "\"2 test road quebec\"", "]", "\n", "cls", ".", "a_vectorized_address_list", "=", "[", "\n", "[", "[", "0", ",", "0", "]", ",", "[", "0", ",", "1", "]", ",", "[", "1", ",", "0", "]", "]", ",", "\n", "[", "[", "1", ",", "1", "]", ",", "[", "0", ",", "2", "]", ",", "[", "2", ",", "1", "]", ",", "[", "2", ",", "2", "]", "]", ",", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.vectorizer.test_magnitude_vectorizer.MagnitudeVectorizerTest.setUp": [[25, 28], ["unittest.mock.MagicMock", "deepparse.vectorizer.MagnitudeVectorizer"], "methods", ["None"], ["", "def", "setUp", "(", "self", ")", ":", "\n", "        ", "self", ".", "embedding_network", "=", "MagicMock", "(", "spec", "=", "EmbeddingsModel", ",", "side_effect", "=", "self", ".", "a_embedding_matrix", ")", "\n", "self", ".", "magnitude_vectorizer", "=", "MagnitudeVectorizer", "(", "self", ".", "embedding_network", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.vectorizer.test_magnitude_vectorizer.MagnitudeVectorizerTest.test_given_a_empty_only_address_when_call_then_raise_error": [[29, 33], ["test_magnitude_vectorizer.MagnitudeVectorizerTest.assertRaises", "test_magnitude_vectorizer.MagnitudeVectorizerTest.magnitude_vectorizer"], "methods", ["None"], ["", "def", "test_given_a_empty_only_address_when_call_then_raise_error", "(", "self", ")", ":", "\n", "        ", "empty_only_address", "=", "\"\"", "\n", "with", "self", ".", "assertRaises", "(", "DataError", ")", ":", "\n", "            ", "self", ".", "magnitude_vectorizer", "(", "[", "empty_only_address", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.vectorizer.test_magnitude_vectorizer.MagnitudeVectorizerTest.test_given_a_whitespace_only_address_when_call_then_raise_error": [[34, 42], ["test_magnitude_vectorizer.MagnitudeVectorizerTest.assertRaises", "test_magnitude_vectorizer.MagnitudeVectorizerTest.magnitude_vectorizer", "test_magnitude_vectorizer.MagnitudeVectorizerTest.assertRaises", "test_magnitude_vectorizer.MagnitudeVectorizerTest.magnitude_vectorizer"], "methods", ["None"], ["", "", "def", "test_given_a_whitespace_only_address_when_call_then_raise_error", "(", "self", ")", ":", "\n", "        ", "a_whitespace_only_address", "=", "\" \"", "\n", "with", "self", ".", "assertRaises", "(", "DataError", ")", ":", "\n", "            ", "self", ".", "magnitude_vectorizer", "(", "[", "a_whitespace_only_address", "]", ")", "\n", "\n", "", "another_whitespace_only_address", "=", "\"    \"", "\n", "with", "self", ".", "assertRaises", "(", "DataError", ")", ":", "\n", "            ", "self", ".", "magnitude_vectorizer", "(", "[", "another_whitespace_only_address", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.vectorizer.test_magnitude_vectorizer.MagnitudeVectorizerTest.test_givenAnAddress_whenVectorizingTheAddress_thenShouldCallEmbeddingModelInBatch": [[43, 49], ["test_magnitude_vectorizer.MagnitudeVectorizerTest.magnitude_vectorizer", "test_magnitude_vectorizer.MagnitudeVectorizerTest.assertEqual", "len"], "methods", ["None"], ["", "", "def", "test_givenAnAddress_whenVectorizingTheAddress_thenShouldCallEmbeddingModelInBatch", "(", "\n", "self", ",", "\n", ")", ":", "\n", "        ", "self", ".", "magnitude_vectorizer", "(", "self", ".", "a_address", ")", "\n", "\n", "self", ".", "assertEqual", "(", "self", ".", "embedding_network", ".", "call_count", ",", "len", "(", "self", ".", "a_address", ")", ")", "# since in batch", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.vectorizer.test_magnitude_vectorizer.MagnitudeVectorizerTest.test_givenAnAddress_whenVectorizingTheAddress_thenShouldReturnCorrectEmbeddings": [[50, 56], ["test_magnitude_vectorizer.MagnitudeVectorizerTest.magnitude_vectorizer", "test_magnitude_vectorizer.MagnitudeVectorizerTest.assertEqual"], "methods", ["None"], ["", "def", "test_givenAnAddress_whenVectorizingTheAddress_thenShouldReturnCorrectEmbeddings", "(", "\n", "self", ",", "\n", ")", ":", "\n", "        ", "embedded_address", "=", "self", ".", "magnitude_vectorizer", "(", "self", ".", "a_address", ")", "\n", "\n", "self", ".", "assertEqual", "(", "embedded_address", ",", "self", ".", "a_vectorized_address", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.vectorizer.test_magnitude_vectorizer.MagnitudeVectorizerTest.test_givenAnAddressList_whenVectorizingTheAddress_thenShouldReturnCorrectEmbeddings": [[57, 63], ["test_magnitude_vectorizer.MagnitudeVectorizerTest.magnitude_vectorizer", "test_magnitude_vectorizer.MagnitudeVectorizerTest.assertEqual"], "methods", ["None"], ["", "def", "test_givenAnAddressList_whenVectorizingTheAddress_thenShouldReturnCorrectEmbeddings", "(", "\n", "self", ",", "\n", ")", ":", "\n", "        ", "embedded_address", "=", "self", ".", "magnitude_vectorizer", "(", "self", ".", "a_list_address", ")", "\n", "\n", "self", ".", "assertEqual", "(", "embedded_address", ",", "self", ".", "a_vectorized_address_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.tests.test_fasttext_tools.ToolsTests.setUpClass": [[24, 37], ["tempfile.TemporaryDirectory", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join"], "methods", ["None"], ["    ", "@", "classmethod", "\n", "def", "setUpClass", "(", "cls", ")", "->", "None", ":", "\n", "        ", "cls", ".", "temp_dir_obj", "=", "TemporaryDirectory", "(", ")", "\n", "cls", ".", "a_directory_path", "=", "os", ".", "path", ".", "join", "(", "cls", ".", "temp_dir_obj", ".", "name", ",", "\"./\"", ")", "\n", "cls", ".", "a_fasttext_file_name_path", "=", "os", ".", "path", ".", "join", "(", "cls", ".", "a_directory_path", ",", "\"cc.fr.300.bin\"", ")", "\n", "cls", ".", "a_fasttext_gz_file_name_path", "=", "os", ".", "path", ".", "join", "(", "cls", ".", "a_directory_path", ",", "\"cc.fr.300.bin.gz\"", ")", "\n", "cls", ".", "a_fasttext_light_name_path", "=", "os", ".", "path", ".", "join", "(", "cls", ".", "a_directory_path", ",", "\"fasttext.magnitude\"", ")", "\n", "cls", ".", "a_fasttext_light_gz_file_name_path", "=", "os", ".", "path", ".", "join", "(", "cls", ".", "a_directory_path", ",", "\"fasttext.magnitude.gz\"", ")", "\n", "\n", "# the payload is a first \"chunk\" a, a second chunk \"b\" and a empty chunk \"\" to end the loop", "\n", "cls", ".", "a_response_payload", "=", "[", "\"a\"", ",", "\"b\"", ",", "\"\"", "]", "\n", "\n", "cls", ".", "a_fake_embeddings_path", "=", "os", ".", "path", ".", "join", "(", "cls", ".", "temp_dir_obj", ".", "name", ",", "\"fake_embeddings_cc.fr.300.bin\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.tests.test_fasttext_tools.ToolsTests.tearDown": [[38, 40], ["test_fasttext_tools.ToolsTests.temp_dir_obj.cleanup"], "methods", ["None"], ["", "def", "tearDown", "(", "self", ")", "->", "None", ":", "\n", "        ", "self", ".", "temp_dir_obj", ".", "cleanup", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.tests.test_fasttext_tools.ToolsTests.assertStdoutContains": [[41, 44], ["test_fasttext_tools.ToolsTests.assertIn", "test_fasttext_tools.ToolsTests.test_out.getvalue().strip", "test_fasttext_tools.ToolsTests.test_out.getvalue"], "methods", ["None"], ["", "def", "assertStdoutContains", "(", "self", ",", "values", ")", ":", "\n", "        ", "for", "value", "in", "values", ":", "\n", "            ", "self", ".", "assertIn", "(", "value", ",", "self", ".", "test_out", ".", "getvalue", "(", ")", ".", "strip", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.tests.test_fasttext_tools.ToolsTests.test_givenAFasttextEmbeddingsLocal_whenDownloadFasttextEmbeddings_thenReturnFilePath": [[45, 50], ["unittest.mock.patch", "deepparse.download_fasttext_embeddings", "test_fasttext_tools.ToolsTests.assertEqual"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.deepparse.fasttext_tools.download_fasttext_embeddings"], ["", "", "@", "patch", "(", "\"os.path.isfile\"", ")", "\n", "def", "test_givenAFasttextEmbeddingsLocal_whenDownloadFasttextEmbeddings_thenReturnFilePath", "(", "self", ",", "isfile_mock", ")", ":", "\n", "        ", "expected", "=", "self", ".", "a_fasttext_file_name_path", "\n", "actual", "=", "download_fasttext_embeddings", "(", "self", ".", "a_directory_path", ")", "\n", "self", ".", "assertEqual", "(", "expected", ",", "actual", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.tests.test_fasttext_tools.ToolsTests.test_givenAFasttextEmbeddingsNotLocal_whenDownloadFasttextEmbeddings_thenDownloadIt": [[51, 65], ["unittest.mock.patch", "tests.tools.create_file", "gzip.open", "f.write", "unittest.mock.patch", "deepparse.download_fasttext_embeddings", "test_fasttext_tools.ToolsTests.assertEqual", "test_fasttext_tools.ToolsTests.a_fasttext_file_name_path.encode"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.tests.tools.create_file", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.deepparse.fasttext_tools.download_fasttext_embeddings"], ["", "@", "patch", "(", "\"os.path.isfile\"", ")", "\n", "def", "test_givenAFasttextEmbeddingsNotLocal_whenDownloadFasttextEmbeddings_thenDownloadIt", "(", "self", ",", "isfile_mock", ")", ":", "\n", "# since we create a local fake file, the file exist, so we mock that the file doest not exist.", "\n", "        ", "isfile_mock", ".", "return_value", "=", "False", "\n", "create_file", "(", "self", ".", "a_fasttext_file_name_path", ",", "content", "=", "\"Fake fasttext embedding content\"", ")", "\n", "\n", "# we create a fake fasttext archive", "\n", "with", "gzip", ".", "open", "(", "self", ".", "a_fasttext_gz_file_name_path", ",", "\"wb\"", ")", "as", "f", ":", "\n", "            ", "f", ".", "write", "(", "self", ".", "a_fasttext_file_name_path", ".", "encode", "(", "\"utf-8\"", ")", ")", "\n", "\n", "", "with", "patch", "(", "\"deepparse.fasttext_tools.download_gz_model\"", ")", ":", "\n", "            ", "actual", "=", "download_fasttext_embeddings", "(", "self", ".", "a_directory_path", ")", "\n", "expected", "=", "self", ".", "a_fasttext_file_name_path", "\n", "self", ".", "assertEqual", "(", "expected", ",", "actual", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.tests.test_fasttext_tools.ToolsTests.test_givenAFasttextLightEmbeddingsLocal_whenDownloadFasttextLightEmbeddings_thenReturnFilePath": [[66, 73], ["unittest.mock.patch", "deepparse.download_fasttext_magnitude_embeddings", "test_fasttext_tools.ToolsTests.assertEqual"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.deepparse.fasttext_tools.download_fasttext_magnitude_embeddings"], ["", "", "@", "patch", "(", "\"os.path.isfile\"", ")", "\n", "def", "test_givenAFasttextLightEmbeddingsLocal_whenDownloadFasttextLightEmbeddings_thenReturnFilePath", "(", "\n", "self", ",", "isfile_mock", "\n", ")", ":", "\n", "        ", "expected", "=", "self", ".", "a_fasttext_light_name_path", "\n", "actual", "=", "download_fasttext_magnitude_embeddings", "(", "self", ".", "a_directory_path", ")", "\n", "self", ".", "assertEqual", "(", "expected", ",", "actual", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.tests.test_fasttext_tools.ToolsTests.test_givenAFasttextLightEmbeddingsNotLocal_whenDownloadFasttextLightEmbeddings_thenDownloadIt": [[74, 90], ["unittest.mock.patch", "tests.tools.create_file", "gzip.open", "f.write", "unittest.mock.patch", "deepparse.download_fasttext_magnitude_embeddings", "test_fasttext_tools.ToolsTests.assertEqual", "test_fasttext_tools.ToolsTests.a_fasttext_light_name_path.encode"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.tests.tools.create_file", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.deepparse.fasttext_tools.download_fasttext_magnitude_embeddings"], ["", "@", "patch", "(", "\"os.path.isfile\"", ")", "\n", "def", "test_givenAFasttextLightEmbeddingsNotLocal_whenDownloadFasttextLightEmbeddings_thenDownloadIt", "(", "\n", "self", ",", "isfile_mock", "\n", ")", ":", "\n", "# since we create a local fake file, the file exist, so we mock that the file doest not exist.", "\n", "        ", "isfile_mock", ".", "return_value", "=", "False", "\n", "create_file", "(", "self", ".", "a_fasttext_light_name_path", ",", "content", "=", "\"Fake fasttext embedding content\"", ")", "\n", "\n", "# we create a fake fasttext archive", "\n", "with", "gzip", ".", "open", "(", "self", ".", "a_fasttext_light_gz_file_name_path", ",", "\"wb\"", ")", "as", "f", ":", "\n", "            ", "f", ".", "write", "(", "self", ".", "a_fasttext_light_name_path", ".", "encode", "(", "\"utf-8\"", ")", ")", "\n", "\n", "", "with", "patch", "(", "\"deepparse.fasttext_tools.download_from_url\"", ")", "as", "_", ":", "\n", "            ", "actual", "=", "download_fasttext_magnitude_embeddings", "(", "self", ".", "a_directory_path", ")", "\n", "expected", "=", "self", ".", "a_fasttext_light_name_path", "\n", "self", ".", "assertEqual", "(", "expected", ",", "actual", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.tests.test_fasttext_tools.ToolsTests.test_givenAFasttextLightEmbeddingsNotLocal_whenDownloadFasttextEmbeddingsNoVerbose_thenNoVerbose": [[91, 112], ["unittest.mock.patch", "test_fasttext_tools.ToolsTests._capture_output", "tests.tools.create_file", "gzip.open", "f.write", "unittest.mock.patch", "deepparse.download_fasttext_magnitude_embeddings", "test_fasttext_tools.ToolsTests.test_out.getvalue().strip", "test_fasttext_tools.ToolsTests.assertEqual", "test_fasttext_tools.ToolsTests.a_fasttext_light_name_path.encode", "test_fasttext_tools.ToolsTests.test_out.getvalue"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.tests.base_capture_output.CaptureOutputTestCase._capture_output", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.tests.tools.create_file", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.deepparse.fasttext_tools.download_fasttext_magnitude_embeddings"], ["", "", "@", "patch", "(", "\"os.path.isfile\"", ")", "\n", "def", "test_givenAFasttextLightEmbeddingsNotLocal_whenDownloadFasttextEmbeddingsNoVerbose_thenNoVerbose", "(", "\n", "self", ",", "isfile_mock", "\n", ")", ":", "\n", "        ", "self", ".", "_capture_output", "(", ")", "\n", "\n", "# since we create a local fake file, the file exist, so we mock that the file doest not exist.", "\n", "isfile_mock", ".", "return_value", "=", "False", "\n", "create_file", "(", "self", ".", "a_fasttext_light_name_path", ",", "content", "=", "\"Fake fasttext embedding content\"", ")", "\n", "\n", "# we create a fake fasttext archive", "\n", "with", "gzip", ".", "open", "(", "self", ".", "a_fasttext_light_gz_file_name_path", ",", "\"wb\"", ")", "as", "f", ":", "\n", "            ", "f", ".", "write", "(", "self", ".", "a_fasttext_light_name_path", ".", "encode", "(", "\"utf-8\"", ")", ")", "\n", "\n", "", "with", "patch", "(", "\"deepparse.fasttext_tools.download_from_url\"", ")", ":", "\n", "            ", "download_fasttext_magnitude_embeddings", "(", "self", ".", "a_directory_path", ",", "verbose", "=", "False", ")", "\n", "\n", "expected", "=", "\"\"", "\n", "\n", "actual", "=", "self", ".", "test_out", ".", "getvalue", "(", ")", ".", "strip", "(", ")", "\n", "self", ".", "assertEqual", "(", "expected", ",", "actual", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.tests.test_fasttext_tools.ToolsTests.test_givenAFasttextLightEmbeddingsNotLocal_whenDownloadFasttextEmbeddingsVerbose_thenVerbose": [[113, 135], ["unittest.mock.patch", "test_fasttext_tools.ToolsTests._capture_output", "tests.tools.create_file", "gzip.open", "f.write", "unittest.mock.patch", "deepparse.download_fasttext_magnitude_embeddings", "test_fasttext_tools.ToolsTests.test_out.getvalue().strip", "test_fasttext_tools.ToolsTests.assertEqual", "test_fasttext_tools.ToolsTests.a_fasttext_light_name_path.encode", "test_fasttext_tools.ToolsTests.test_out.getvalue"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.tests.base_capture_output.CaptureOutputTestCase._capture_output", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.tests.tools.create_file", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.deepparse.fasttext_tools.download_fasttext_magnitude_embeddings"], ["", "", "@", "patch", "(", "\"os.path.isfile\"", ")", "\n", "def", "test_givenAFasttextLightEmbeddingsNotLocal_whenDownloadFasttextEmbeddingsVerbose_thenVerbose", "(", "self", ",", "isfile_mock", ")", ":", "\n", "        ", "self", ".", "_capture_output", "(", ")", "\n", "\n", "# since we create a local fake file, the file exist, so we mock that the file doest not exist.", "\n", "isfile_mock", ".", "return_value", "=", "False", "\n", "create_file", "(", "self", ".", "a_fasttext_light_name_path", ",", "content", "=", "\"Fake fasttext embedding content\"", ")", "\n", "\n", "# we create a fake fasttext archive", "\n", "with", "gzip", ".", "open", "(", "self", ".", "a_fasttext_light_gz_file_name_path", ",", "\"wb\"", ")", "as", "f", ":", "\n", "            ", "f", ".", "write", "(", "self", ".", "a_fasttext_light_name_path", ".", "encode", "(", "\"utf-8\"", ")", ")", "\n", "\n", "", "with", "patch", "(", "\"deepparse.fasttext_tools.download_from_url\"", ")", ":", "\n", "            ", "download_fasttext_magnitude_embeddings", "(", "self", ".", "a_directory_path", ",", "verbose", "=", "True", ")", "\n", "\n", "expected", "=", "(", "\n", "\"The fastText pretrained word embeddings will be download in magnitude format (2.3 GO), \"", "\n", "\"this process will take several minutes.\"", "\n", ")", "\n", "\n", "actual", "=", "self", ".", "test_out", ".", "getvalue", "(", ")", ".", "strip", "(", ")", "\n", "self", ".", "assertEqual", "(", "expected", ",", "actual", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.tests.test_fasttext_tools.ToolsTests.test_givenAFileToDownload_whenPrintProgress_thenPrintProperly": [[136, 161], ["test_fasttext_tools.ToolsTests._capture_output", "range", "test_fasttext_tools.ToolsTests.assertStdoutContains", "deepparse.fasttext_tools._print_progress", "test_fasttext_tools.ToolsTests.assertEqual", "test_fasttext_tools.ToolsTests.test_out.getvalue().strip", "test_fasttext_tools.ToolsTests.assertIn", "test_fasttext_tools.ToolsTests.test_out.getvalue().strip", "test_fasttext_tools.ToolsTests.assertIn", "test_fasttext_tools.ToolsTests.test_out.getvalue", "test_fasttext_tools.ToolsTests.test_out.getvalue().strip", "test_fasttext_tools.ToolsTests.test_out.getvalue", "test_fasttext_tools.ToolsTests.test_out.getvalue"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.tests.base_capture_output.CaptureOutputTestCase._capture_output", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.tests.test_fasttext_tools.ToolsTests.assertStdoutContains", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.deepparse.fasttext_tools._print_progress"], ["", "", "def", "test_givenAFileToDownload_whenPrintProgress_thenPrintProperly", "(", "self", ")", ":", "\n", "        ", "self", ".", "_capture_output", "(", ")", "\n", "\n", "a_total_size", "=", "10", "\n", "for", "downloaded_bytes", "in", "range", "(", "1", ",", "a_total_size", "+", "1", ")", ":", "\n", "            ", "_print_progress", "(", "downloaded_bytes", ",", "a_total_size", ")", "\n", "\n", "# we verify some cases", "\n", "if", "downloaded_bytes", "==", "1", ":", "\n", "                ", "self", ".", "assertEqual", "(", "\n", "self", ".", "test_out", ".", "getvalue", "(", ")", ".", "strip", "(", ")", ",", "\n", "\"(10.00%) [=====>                                             ]\"", ",", "\n", ")", "\n", "", "elif", "downloaded_bytes", "==", "7", ":", "\n", "                ", "self", ".", "assertIn", "(", "\n", "\"(70.00%) [===================================>               ]\"", ",", "\n", "self", ".", "test_out", ".", "getvalue", "(", ")", ".", "strip", "(", ")", ",", "\n", ")", "\n", "", "elif", "downloaded_bytes", "==", "10", ":", "\n", "                ", "self", ".", "assertIn", "(", "\n", "\"(100.00%) [==================================================>]\"", ",", "\n", "self", ".", "test_out", ".", "getvalue", "(", ")", ".", "strip", "(", ")", ",", "\n", ")", "\n", "\n", "", "", "self", ".", "assertStdoutContains", "(", "[", "\"[\"", ",", "\">\"", ",", "\"=\"", ",", "\"]\"", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.tests.test_fasttext_tools.ToolsTests.test_givenADownloadFasttext_whenPrintProgressSetToVerbose_thenDontPrint": [[162, 187], ["unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "test_fasttext_tools.ToolsTests._capture_output", "test_fasttext_tools.ToolsTests.test_out.getvalue().strip", "test_fasttext_tools.ToolsTests.assertEqual", "deepparse.download_fasttext_embeddings", "urlopen_mock", "test_fasttext_tools.ToolsTests.test_out.getvalue"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.tests.base_capture_output.CaptureOutputTestCase._capture_output", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.deepparse.fasttext_tools.download_fasttext_embeddings"], ["", "@", "patch", "(", "\"builtins.open\"", ",", "new_callable", "=", "mock_open", ",", "read_data", "=", "\"a sentence\"", ")", "\n", "@", "patch", "(", "\"deepparse.fasttext_tools.urlopen\"", ")", "\n", "@", "patch", "(", "\"deepparse.fasttext_tools.gzip\"", ")", "\n", "@", "patch", "(", "\"deepparse.fasttext_tools.os.rename\"", ")", "\n", "@", "patch", "(", "\"deepparse.fasttext_tools.shutil\"", ")", "\n", "@", "patch", "(", "\"deepparse.fasttext_tools.os.remove\"", ")", "\n", "def", "test_givenADownloadFasttext_whenPrintProgressSetToVerbose_thenDontPrint", "(", "\n", "self", ",", "\n", "os_remove_mock", ",", "\n", "shutil_mock", ",", "\n", "os_rename_mock", ",", "\n", "g_zip_mock", ",", "\n", "urlopen_mock", ",", "\n", "open_mock", ",", "\n", ")", ":", "\n", "# pylint: disable=too-many-arguments", "\n", "        ", "urlopen_mock", "(", ")", ".", "read", ".", "side_effect", "=", "self", ".", "a_response_payload", "\n", "self", ".", "_capture_output", "(", ")", "\n", "with", "urlopen_mock", ":", "\n", "            ", "_", "=", "download_fasttext_embeddings", "(", "self", ".", "a_directory_path", ",", "verbose", "=", "False", ")", "\n", "\n", "", "expected", "=", "\"\"", "\n", "actual", "=", "self", ".", "test_out", ".", "getvalue", "(", ")", ".", "strip", "(", ")", "\n", "\n", "self", ".", "assertEqual", "(", "expected", ",", "actual", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.tests.test_fasttext_tools.ToolsTests.test_givenADownloadFasttext_whenPrintProgressSetToVerbose_thenPrint": [[188, 225], ["unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "test_fasttext_tools.ToolsTests._capture_output", "test_fasttext_tools.ToolsTests.test_out.getvalue().strip", "test_fasttext_tools.ToolsTests.assertIn", "test_fasttext_tools.ToolsTests.assertIn", "test_fasttext_tools.ToolsTests.assertIn", "test_fasttext_tools.ToolsTests.assertIn", "deepparse.download_fasttext_embeddings", "urlopen_mock", "urlopen_mock", "test_fasttext_tools.ToolsTests.test_out.getvalue"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.tests.base_capture_output.CaptureOutputTestCase._capture_output", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.deepparse.fasttext_tools.download_fasttext_embeddings"], ["", "@", "patch", "(", "\"builtins.open\"", ",", "new_callable", "=", "mock_open", ",", "read_data", "=", "\"a sentence\"", ")", "\n", "@", "patch", "(", "\"deepparse.fasttext_tools.urlopen\"", ")", "\n", "@", "patch", "(", "\"deepparse.fasttext_tools.gzip\"", ")", "\n", "@", "patch", "(", "\"deepparse.fasttext_tools.os.rename\"", ")", "\n", "@", "patch", "(", "\"deepparse.fasttext_tools.shutil\"", ")", "\n", "@", "patch", "(", "\"deepparse.fasttext_tools.os.remove\"", ")", "\n", "def", "test_givenADownloadFasttext_whenPrintProgressSetToVerbose_thenPrint", "(", "\n", "self", ",", "\n", "os_remove_mock", ",", "\n", "shutil_mock", ",", "\n", "os_rename_mock", ",", "\n", "g_zip_mock", ",", "\n", "urlopen_mock", ",", "\n", "open_mock", ",", "\n", ")", ":", "\n", "# pylint: disable=too-many-arguments", "\n", "        ", "urlopen_mock", "(", ")", ".", "read", ".", "side_effect", "=", "self", ".", "a_response_payload", "\n", "urlopen_mock", "(", ")", ".", "getheader", ".", "return_value", "=", "\"2\"", "\n", "self", ".", "_capture_output", "(", ")", "\n", "with", "urlopen_mock", ":", "\n", "            ", "_", "=", "download_fasttext_embeddings", "(", "self", ".", "a_directory_path", ",", "verbose", "=", "True", ")", "\n", "", "actual", "=", "self", ".", "test_out", ".", "getvalue", "(", ")", ".", "strip", "(", ")", "\n", "\n", "expected", "=", "(", "\n", "\"The fastText pretrained word embeddings will be downloaded (6.8 GO), \"", "\n", "\"this process will take several minutes.\"", "\n", ")", "\n", "self", ".", "assertIn", "(", "expected", ",", "actual", ")", "\n", "\n", "expected", "=", "\"Downloading https://dl.fbaipublicfiles.com/fasttext/vectors-crawl/cc.fr.300.bin.gz\"", "\n", "self", ".", "assertIn", "(", "expected", ",", "actual", ")", "\n", "\n", "expected", "=", "\"(50.00%) [=========================>                         ]\"", "\n", "self", ".", "assertIn", "(", "expected", ",", "actual", ")", "\n", "\n", "expected", "=", "\"(100.00%) [==================================================>]\"", "\n", "self", ".", "assertIn", "(", "expected", ",", "actual", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.tests.test_fasttext_tools.ToolsTests.test_givenAFasttextEmbeddingsToLoad_whenLoad_thenLoadProperly": [[226, 233], ["deepparse.download_from_url", "deepparse.load_fasttext_embeddings", "test_fasttext_tools.ToolsTests.assertIsInstance"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.deepparse.tools.download_from_url", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.deepparse.fasttext_tools.load_fasttext_embeddings"], ["", "def", "test_givenAFasttextEmbeddingsToLoad_whenLoad_thenLoadProperly", "(", "self", ")", ":", "\n", "        ", "download_from_url", "(", "\"fake_embeddings_cc.fr.300\"", ",", "self", ".", "a_directory_path", ",", "\"bin\"", ")", "\n", "embeddings_path", "=", "self", ".", "a_fake_embeddings_path", "\n", "\n", "embeddings", "=", "load_fasttext_embeddings", "(", "embeddings_path", ")", "\n", "\n", "self", ".", "assertIsInstance", "(", "embeddings", ",", "_FastText", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.tests.tools.ADataContainer.__init__": [[25, 28], ["deepparse.dataset_container.DatasetContainer.__init__", "torch.rand", "torch.rand"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.timer.timer.Timer.__init__"], ["", "download_from_url", "(", "model", ",", "cache_path", ",", "\"version\"", ")", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "cache_path", ",", "model", "+", "\".version\"", ")", ",", "encoding", "=", "\"utf-8\"", ")", "as", "remote_model_hash_file", ":", "\n", "        ", "remote_model_hash_version", "=", "remote_model_hash_file", ".", "readline", "(", ")", "\n", "", "return", "local_model_hash_version", ".", "strip", "(", ")", "==", "remote_model_hash_version", ".", "strip", "(", ")", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.tests.tools.create_file": [[12, 19], ["open", "f.write"], "function", ["None"], ["validate_if_any_empty", ",", "\n", ")", "\n", "\n", "BASE_URL", "=", "\"https://graal.ift.ulaval.ca/public/deepparse/{}.{}\"", "\n", "CACHE_PATH", "=", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "expanduser", "(", "\"~\"", ")", ",", "\".cache\"", ",", "\"deepparse\"", ")", "\n", "\n", "\n", "def", "latest_version", "(", "model", ":", "str", ",", "cache_path", ":", "str", ")", "->", "bool", ":", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.tests.tools.create_data": [[36, 45], ["base_string.format", "str", "range", "base_string.format", "range", "str"], "function", ["None"], ["\n", "url", "=", "BASE_URL", ".", "format", "(", "file_name", ",", "file_extension", ")", "\n", "r", "=", "requests", ".", "get", "(", "url", ",", "timeout", "=", "5", ")", "\n", "r", ".", "raise_for_status", "(", ")", "# Raise exception", "\n", "os", ".", "makedirs", "(", "saving_dir", ",", "exist_ok", "=", "True", ")", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "saving_dir", ",", "f\"{file_name}.{file_extension}\"", ")", ",", "\"wb\"", ")", "as", "file", ":", "\n", "        ", "file", ".", "write", "(", "r", ".", "content", ")", "\n", "\n", "\n", "", "", "def", "download_weights", "(", "model", ":", "str", ",", "saving_dir", ":", "str", ",", "verbose", ":", "bool", "=", "True", ")", "->", "None", ":", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.tests.tools.create_pickle_file": [[47, 52], ["tools.create_data", "open", "pickle.dump"], "function", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.tests.tools.create_data"], ["\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.tests.tools.create_csv_file": [[54, 73], ["tools.create_data", "pandas.DataFrame", "pd.DataFrame.to_csv", "pd.DataFrame.Tags.apply"], "function", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.tests.tools.create_data", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.cli.tools.to_csv"], ["        ", "print", "(", "f\"Downloading the weights for the network {model}.\"", ")", "\n", "", "download_from_url", "(", "model", ",", "saving_dir", ",", "\"ckpt\"", ")", "\n", "download_from_url", "(", "model", ",", "saving_dir", ",", "\"version\"", ")", "\n", "\n", "\n", "", "def", "handle_poutyne_version", "(", ")", "->", "str", ":", "\n", "    ", "\"\"\"\n    Handle the retrieval of the major and minor part of the Poutyne version\n    \"\"\"", "\n", "full_version", "=", "poutyne", ".", "version", ".", "__version__", "\n", "components_parts", "=", "full_version", ".", "split", "(", "\".\"", ")", "\n", "major", "=", "components_parts", "[", "0", "]", "\n", "minor", "=", "components_parts", "[", "1", "]", "\n", "version", "=", "f\"{major}.{minor}\"", "\n", "return", "version", "\n", "\n", "\n", "", "def", "valid_poutyne_version", "(", "min_major", ":", "int", "=", "1", ",", "min_minor", ":", "int", "=", "2", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.tests.test_tools.ToolsTests.setUp": [[27, 39], ["tempfile.TemporaryDirectory"], "methods", ["None"], ["    ", "def", "setUp", "(", "self", ")", "->", "None", ":", "\n", "        ", "self", ".", "temp_dir_obj", "=", "TemporaryDirectory", "(", ")", "\n", "self", ".", "fake_cache_path", "=", "self", ".", "temp_dir_obj", ".", "name", "\n", "self", ".", "a_file_extension", "=", "\"version\"", "\n", "self", ".", "latest_fasttext_version", "=", "\"b4f098bb8909b1c8a8d24eea07df3435\"", "\n", "self", ".", "latest_bpemb_version", "=", "\"ac0dc019748b6853dca412add7234203\"", "\n", "self", ".", "a_seed", "=", "42", "\n", "self", ".", "verbose", "=", "False", "\n", "\n", "self", ".", "a_model_type_checkpoint", "=", "\"a_fake_model_type\"", "\n", "self", ".", "a_fasttext_model_type_checkpoint", "=", "\"fasttext\"", "\n", "self", ".", "a_bpemb_model_type_checkpoint", "=", "\"bpemb\"", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.tests.test_tools.ToolsTests.tearDown": [[40, 42], ["test_tools.ToolsTests.temp_dir_obj.cleanup"], "methods", ["None"], ["", "def", "tearDown", "(", "self", ")", "->", "None", ":", "\n", "        ", "self", ".", "temp_dir_obj", ".", "cleanup", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.tests.test_tools.ToolsTests.create_cache_version": [[43, 46], ["os.path.join", "tests.tools.create_file"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.tests.tools.create_file"], ["", "def", "create_cache_version", "(", "self", ",", "model_name", ",", "content", ")", ":", "\n", "        ", "version_file_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "fake_cache_path", ",", "model_name", "+", "\".version\"", ")", "\n", "create_file", "(", "version_file_path", ",", "content", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.tests.test_tools.ToolsTests.test_givenAFasttextLatestVersion_whenVerifyIfLastVersion_thenReturnTrue": [[47, 50], ["test_tools.ToolsTests.create_cache_version", "test_tools.ToolsTests.assertTrue", "deepparse.latest_version"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.tests.test_tools.ToolsTests.create_cache_version", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.deepparse.tools.latest_version"], ["", "def", "test_givenAFasttextLatestVersion_whenVerifyIfLastVersion_thenReturnTrue", "(", "self", ")", ":", "\n", "        ", "self", ".", "create_cache_version", "(", "\"fasttext\"", ",", "self", ".", "latest_fasttext_version", ")", "\n", "self", ".", "assertTrue", "(", "latest_version", "(", "\"fasttext\"", ",", "self", ".", "fake_cache_path", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.tests.test_tools.ToolsTests.test_givenAFasttextNotTheLatestVersion_whenVerifyIfLastVersion_thenReturnFalse": [[51, 56], ["test_tools.ToolsTests.create_cache_version", "test_tools.ToolsTests.assertFalse", "deepparse.latest_version"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.tests.test_tools.ToolsTests.create_cache_version", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.deepparse.tools.latest_version"], ["", "def", "test_givenAFasttextNotTheLatestVersion_whenVerifyIfLastVersion_thenReturnFalse", "(", "\n", "self", ",", "\n", ")", ":", "\n", "        ", "self", ".", "create_cache_version", "(", "\"fasttext\"", ",", "\"not_the_last_version\"", ")", "\n", "self", ".", "assertFalse", "(", "latest_version", "(", "\"fasttext\"", ",", "self", ".", "fake_cache_path", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.tests.test_tools.ToolsTests.test_givenABPEmbLatestVersion_whenVerifyIfLastVersion_thenReturnTrue": [[57, 60], ["test_tools.ToolsTests.create_cache_version", "test_tools.ToolsTests.assertTrue", "deepparse.latest_version"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.tests.test_tools.ToolsTests.create_cache_version", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.deepparse.tools.latest_version"], ["", "def", "test_givenABPEmbLatestVersion_whenVerifyIfLastVersion_thenReturnTrue", "(", "self", ")", ":", "\n", "        ", "self", ".", "create_cache_version", "(", "\"bpemb\"", ",", "self", ".", "latest_bpemb_version", ")", "\n", "self", ".", "assertTrue", "(", "latest_version", "(", "\"bpemb\"", ",", "self", ".", "fake_cache_path", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.tests.test_tools.ToolsTests.test_givenABPEmbNotTheLatestVersion_whenVerifyIfLastVersion_thenReturnFalse": [[61, 66], ["test_tools.ToolsTests.create_cache_version", "test_tools.ToolsTests.assertFalse", "deepparse.latest_version"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.tests.test_tools.ToolsTests.create_cache_version", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.deepparse.tools.latest_version"], ["", "def", "test_givenABPEmbNotTheLatestVersion_whenVerifyIfLastVersion_thenReturnFalse", "(", "\n", "self", ",", "\n", ")", ":", "\n", "        ", "self", ".", "create_cache_version", "(", "\"bpemb\"", ",", "\"not_the_last_version\"", ")", "\n", "self", ".", "assertFalse", "(", "latest_version", "(", "\"bpemb\"", ",", "self", ".", "fake_cache_path", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.tests.test_tools.ToolsTests.test_givenFasttextVersion_whenDownloadOk_thenDownloadIt": [[67, 73], ["deepparse.download_from_url", "test_tools.ToolsTests.assertTrue", "os.path.exists", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.deepparse.tools.download_from_url"], ["", "def", "test_givenFasttextVersion_whenDownloadOk_thenDownloadIt", "(", "self", ")", ":", "\n", "        ", "file_name", "=", "\"fasttext\"", "\n", "\n", "download_from_url", "(", "file_name", ",", "self", ".", "fake_cache_path", ",", "self", ".", "a_file_extension", ")", "\n", "\n", "self", ".", "assertTrue", "(", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "self", ".", "fake_cache_path", ",", "f\"{file_name}.{self.a_file_extension}\"", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.tests.test_tools.ToolsTests.test_givenFasttextVersion_whenDownload404_thenHTTPError": [[74, 79], ["test_tools.ToolsTests.assertRaises", "deepparse.download_from_url"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.deepparse.tools.download_from_url"], ["", "def", "test_givenFasttextVersion_whenDownload404_thenHTTPError", "(", "self", ")", ":", "\n", "        ", "wrong_file_name", "=", "\"wrong_fasttext\"", "\n", "\n", "with", "self", ".", "assertRaises", "(", "requests", ".", "exceptions", ".", "HTTPError", ")", ":", "\n", "            ", "download_from_url", "(", "wrong_file_name", ",", "self", ".", "fake_cache_path", ",", "self", ".", "a_file_extension", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.tests.test_tools.ToolsTests.test_givenBPEmbVersion_whenDownloadOk_thenDownloadIt": [[80, 86], ["deepparse.download_from_url", "test_tools.ToolsTests.assertTrue", "os.path.exists", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.deepparse.tools.download_from_url"], ["", "", "def", "test_givenBPEmbVersion_whenDownloadOk_thenDownloadIt", "(", "self", ")", ":", "\n", "        ", "file_name", "=", "\"bpemb\"", "\n", "\n", "download_from_url", "(", "file_name", ",", "self", ".", "fake_cache_path", ",", "self", ".", "a_file_extension", ")", "\n", "\n", "self", ".", "assertTrue", "(", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "self", ".", "fake_cache_path", ",", "f\"{file_name}.{self.a_file_extension}\"", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.tests.test_tools.ToolsTests.test_givenBPEmbVersion_whenDownload404_thenHTTPError": [[87, 92], ["test_tools.ToolsTests.assertRaises", "deepparse.download_from_url"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.deepparse.tools.download_from_url"], ["", "def", "test_givenBPEmbVersion_whenDownload404_thenHTTPError", "(", "self", ")", ":", "\n", "        ", "wrong_file_name", "=", "\"wrong_bpemb\"", "\n", "\n", "with", "self", ".", "assertRaises", "(", "requests", ".", "exceptions", ".", "HTTPError", ")", ":", "\n", "            ", "download_from_url", "(", "wrong_file_name", ",", "self", ".", "fake_cache_path", ",", "self", ".", "a_file_extension", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.tests.test_tools.ToolsTests.test_givenModelWeightsToDownload_whenDownloadOk_thenWeightsAreDownloaded": [[93, 105], ["unittest.mock.patch", "deepparse.download_weights", "downloader.assert_any_call", "downloader.assert_any_call", "unittest.mock.patch", "deepparse.download_weights", "downloader.assert_any_call", "downloader.assert_any_call"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.deepparse.tools.download_weights", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.deepparse.tools.download_weights"], ["", "", "def", "test_givenModelWeightsToDownload_whenDownloadOk_thenWeightsAreDownloaded", "(", "self", ")", ":", "\n", "        ", "with", "patch", "(", "\"deepparse.tools.download_from_url\"", ")", "as", "downloader", ":", "\n", "            ", "download_weights", "(", "model", "=", "\"fasttext\"", ",", "saving_dir", "=", "\"./\"", ",", "verbose", "=", "self", ".", "verbose", ")", "\n", "\n", "downloader", ".", "assert_any_call", "(", "\"fasttext\"", ",", "\"./\"", ",", "\"ckpt\"", ")", "\n", "downloader", ".", "assert_any_call", "(", "\"fasttext\"", ",", "\"./\"", ",", "\"version\"", ")", "\n", "\n", "", "with", "patch", "(", "\"deepparse.tools.download_from_url\"", ")", "as", "downloader", ":", "\n", "            ", "download_weights", "(", "model", "=", "\"bpemb\"", ",", "saving_dir", "=", "\"./\"", ",", "verbose", "=", "self", ".", "verbose", ")", "\n", "\n", "downloader", ".", "assert_any_call", "(", "\"bpemb\"", ",", "\"./\"", ",", "\"ckpt\"", ")", "\n", "downloader", ".", "assert_any_call", "(", "\"bpemb\"", ",", "\"./\"", ",", "\"version\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.tests.test_tools.ToolsTests.test_givenModelFasttextWeightsToDownloadVerbose_whenDownloadOk_thenVerbose": [[106, 117], ["test_tools.ToolsTests._capture_output", "test_tools.ToolsTests.test_out.getvalue().strip", "test_tools.ToolsTests.assertEqual", "unittest.mock.patch", "deepparse.download_weights", "test_tools.ToolsTests.test_out.getvalue"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.tests.base_capture_output.CaptureOutputTestCase._capture_output", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.deepparse.tools.download_weights"], ["", "", "def", "test_givenModelFasttextWeightsToDownloadVerbose_whenDownloadOk_thenVerbose", "(", "\n", "self", ",", "\n", ")", ":", "\n", "        ", "self", ".", "_capture_output", "(", ")", "\n", "with", "patch", "(", "\"deepparse.tools.download_from_url\"", ")", ":", "\n", "            ", "download_weights", "(", "model", "=", "\"fasttext\"", ",", "saving_dir", "=", "\"./\"", ",", "verbose", "=", "True", ")", "\n", "\n", "", "actual", "=", "self", ".", "test_out", ".", "getvalue", "(", ")", ".", "strip", "(", ")", "\n", "expected", "=", "\"Downloading the weights for the network fasttext.\"", "\n", "\n", "self", ".", "assertEqual", "(", "actual", ",", "expected", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.tests.test_tools.ToolsTests.test_givenModelBPEmbWeightsToDownloadVerbose_whenDownloadOk_thenVerbose": [[118, 127], ["test_tools.ToolsTests._capture_output", "test_tools.ToolsTests.test_out.getvalue().strip", "test_tools.ToolsTests.assertEqual", "unittest.mock.patch", "deepparse.download_weights", "test_tools.ToolsTests.test_out.getvalue"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.tests.base_capture_output.CaptureOutputTestCase._capture_output", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.deepparse.tools.download_weights"], ["", "def", "test_givenModelBPEmbWeightsToDownloadVerbose_whenDownloadOk_thenVerbose", "(", "self", ")", ":", "\n", "        ", "self", ".", "_capture_output", "(", ")", "\n", "with", "patch", "(", "\"deepparse.tools.download_from_url\"", ")", ":", "\n", "            ", "download_weights", "(", "model", "=", "\"bpemb\"", ",", "saving_dir", "=", "\"./\"", ",", "verbose", "=", "True", ")", "\n", "\n", "", "actual", "=", "self", ".", "test_out", ".", "getvalue", "(", ")", ".", "strip", "(", ")", "\n", "expected", "=", "\"Downloading the weights for the network bpemb.\"", "\n", "\n", "self", ".", "assertEqual", "(", "actual", ",", "expected", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.tests.test_tools.ToolsTests.test_givenAFasttextCheckpoint_whenHandleCheckpoint_thenReturnCachedFasttextPath": [[128, 140], ["unittest.mock.patch", "unittest.mock.patch", "deepparse.handle_model_path", "os.path.join", "test_tools.ToolsTests.assertEqual"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.deepparse.tools.handle_model_path"], ["", "@", "patch", "(", "\"os.path.isfile\"", ")", "\n", "@", "patch", "(", "\"deepparse.tools.latest_version\"", ")", "\n", "def", "test_givenAFasttextCheckpoint_whenHandleCheckpoint_thenReturnCachedFasttextPath", "(", "\n", "self", ",", "latest_version_check", ",", "isfile_mock", "\n", ")", ":", "\n", "        ", "isfile_mock", ".", "return_value", "=", "True", "\n", "checkpoint", "=", "\"fasttext\"", "\n", "\n", "actual", "=", "handle_model_path", "(", "checkpoint", ")", "\n", "expected", "=", "os", ".", "path", ".", "join", "(", "CACHE_PATH", ",", "checkpoint", "+", "\".ckpt\"", ")", "\n", "\n", "self", ".", "assertEqual", "(", "actual", ",", "expected", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.tests.test_tools.ToolsTests.test_givenABPEmbCheckpoint_whenHandleCheckpoint_thenReturnCachedBPEmbPath": [[141, 153], ["unittest.mock.patch", "unittest.mock.patch", "deepparse.handle_model_path", "os.path.join", "test_tools.ToolsTests.assertEqual"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.deepparse.tools.handle_model_path"], ["", "@", "patch", "(", "\"os.path.isfile\"", ")", "\n", "@", "patch", "(", "\"deepparse.tools.latest_version\"", ")", "\n", "def", "test_givenABPEmbCheckpoint_whenHandleCheckpoint_thenReturnCachedBPEmbPath", "(", "\n", "self", ",", "latest_version_check", ",", "isfile_mock", "\n", ")", ":", "\n", "        ", "isfile_mock", ".", "return_value", "=", "True", "\n", "checkpoint", "=", "\"bpemb\"", "\n", "\n", "actual", "=", "handle_model_path", "(", "checkpoint", ")", "\n", "expected", "=", "os", ".", "path", ".", "join", "(", "CACHE_PATH", ",", "checkpoint", "+", "\".ckpt\"", ")", "\n", "\n", "self", ".", "assertEqual", "(", "actual", ",", "expected", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.tests.test_tools.ToolsTests.test_givenAStringCheckpoint_whenHandleCheckpoint_thenReturnSamePath": [[154, 161], ["deepparse.handle_model_path", "test_tools.ToolsTests.assertEqual"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.deepparse.tools.handle_model_path"], ["", "def", "test_givenAStringCheckpoint_whenHandleCheckpoint_thenReturnSamePath", "(", "self", ")", ":", "\n", "        ", "pickle_checkpoint", "=", "\"/a/path/to/a/model.ckpt\"", "\n", "\n", "actual", "=", "handle_model_path", "(", "pickle_checkpoint", ")", "\n", "expected", "=", "pickle_checkpoint", "\n", "\n", "self", ".", "assertEqual", "(", "actual", ",", "expected", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.tests.test_tools.ToolsTests.test_givenBadNamesCheckpoint_whenHandleCheckpoint_thenRaiseErrors": [[162, 186], ["test_tools.ToolsTests.assertRaises", "deepparse.handle_model_path", "test_tools.ToolsTests.assertRaises", "deepparse.handle_model_path", "test_tools.ToolsTests.assertRaises", "deepparse.handle_model_path", "test_tools.ToolsTests.assertRaises", "deepparse.handle_model_path", "test_tools.ToolsTests.assertRaises", "deepparse.handle_model_path", "test_tools.ToolsTests.assertRaises", "deepparse.handle_model_path"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.deepparse.tools.handle_model_path", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.deepparse.tools.handle_model_path", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.deepparse.tools.handle_model_path", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.deepparse.tools.handle_model_path", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.deepparse.tools.handle_model_path", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.deepparse.tools.handle_model_path"], ["", "def", "test_givenBadNamesCheckpoint_whenHandleCheckpoint_thenRaiseErrors", "(", "self", ")", ":", "\n", "        ", "with", "self", ".", "assertRaises", "(", "ValueError", ")", ":", "\n", "            ", "bad_best_checkpoint", "=", "\"bests\"", "\n", "handle_model_path", "(", "bad_best_checkpoint", ")", "\n", "\n", "", "with", "self", ".", "assertRaises", "(", "ValueError", ")", ":", "\n", "            ", "bad_last_checkpoint", "=", "\"lasts\"", "\n", "handle_model_path", "(", "bad_last_checkpoint", ")", "\n", "\n", "", "with", "self", ".", "assertRaises", "(", "ValueError", ")", ":", "\n", "            ", "string_int_bad_checkpoint", "=", "\"1\"", "\n", "handle_model_path", "(", "string_int_bad_checkpoint", ")", "\n", "\n", "", "with", "self", ".", "assertRaises", "(", "ValueError", ")", ":", "\n", "            ", "bad_fasttext_checkpoint", "=", "\"fasttexts\"", "\n", "handle_model_path", "(", "bad_fasttext_checkpoint", ")", "\n", "\n", "", "with", "self", ".", "assertRaises", "(", "ValueError", ")", ":", "\n", "            ", "bad_bpemb_checkpoint", "=", "\"bpembds\"", "\n", "handle_model_path", "(", "bad_bpemb_checkpoint", ")", "\n", "\n", "", "with", "self", ".", "assertRaises", "(", "ValueError", ")", ":", "\n", "            ", "bad_pickle_extension_checkpoint", "=", "\"/a/path/to/a/model.pck\"", "\n", "handle_model_path", "(", "bad_pickle_extension_checkpoint", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.tests.test_tools.ToolsTests.test_givenPoutyneVersionLowerThan12_givenHandlePreTrainedCheckpoint_thenRaiseError": [[187, 193], ["unittest.mock.patch", "test_tools.ToolsTests.assertRaises", "deepparse.handle_pre_trained_checkpoint"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.deepparse.tools.handle_pre_trained_checkpoint"], ["", "", "@", "patch", "(", "\"deepparse.tools.poutyne\"", ")", "\n", "def", "test_givenPoutyneVersionLowerThan12_givenHandlePreTrainedCheckpoint_thenRaiseError", "(", "self", ",", "poutyne_mock", ")", ":", "\n", "        ", "poutyne_mock", ".", "version", ".", "__version__", "=", "\"1.1\"", "\n", "\n", "with", "self", ".", "assertRaises", "(", "NotImplementedError", ")", ":", "\n", "            ", "handle_pre_trained_checkpoint", "(", "self", ".", "a_model_type_checkpoint", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.tests.test_tools.ToolsTests.test_givenPoutyneVersionGreaterThan12_givenHandlePreTrainedCheckpointFasttext_thenReturnFasttext": [[194, 206], ["unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "deepparse.handle_pre_trained_checkpoint", "os.path.join", "test_tools.ToolsTests.assertEqual"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.deepparse.tools.handle_pre_trained_checkpoint"], ["", "", "@", "patch", "(", "\"os.path.isfile\"", ")", "\n", "@", "patch", "(", "\"deepparse.tools.latest_version\"", ")", "\n", "@", "patch", "(", "\"deepparse.tools.poutyne\"", ")", "\n", "def", "test_givenPoutyneVersionGreaterThan12_givenHandlePreTrainedCheckpointFasttext_thenReturnFasttext", "(", "\n", "self", ",", "poutyne_mock", ",", "latest_version_mock", ",", "isfile_mock", "\n", ")", ":", "\n", "        ", "poutyne_mock", ".", "version", ".", "__version__", "=", "\"1.2\"", "\n", "isfile_mock", ".", "return_value", "=", "True", "\n", "\n", "actual", "=", "handle_pre_trained_checkpoint", "(", "self", ".", "a_fasttext_model_type_checkpoint", ")", "\n", "expected", "=", "os", ".", "path", ".", "join", "(", "CACHE_PATH", ",", "f\"{self.a_fasttext_model_type_checkpoint}.ckpt\"", ")", "\n", "self", ".", "assertEqual", "(", "expected", ",", "actual", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.tests.test_tools.ToolsTests.test_givenPoutyneVersionGreaterThan12_givenHandlePreTrainedCheckpointFasttextNoLocalFile_thenReturnFasttext": [[207, 220], ["unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "os.path.join", "test_tools.ToolsTests.assertEqual", "unittest.mock.patch", "deepparse.handle_pre_trained_checkpoint"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.deepparse.tools.handle_pre_trained_checkpoint"], ["", "@", "patch", "(", "\"os.path.isfile\"", ")", "\n", "@", "patch", "(", "\"deepparse.tools.latest_version\"", ")", "\n", "@", "patch", "(", "\"deepparse.tools.poutyne\"", ")", "\n", "def", "test_givenPoutyneVersionGreaterThan12_givenHandlePreTrainedCheckpointFasttextNoLocalFile_thenReturnFasttext", "(", "\n", "self", ",", "poutyne_mock", ",", "latest_version_mock", ",", "isfile_mock", "\n", ")", ":", "\n", "        ", "poutyne_mock", ".", "version", ".", "__version__", "=", "\"1.2\"", "\n", "isfile_mock", ".", "return_value", "=", "False", "\n", "\n", "with", "patch", "(", "\"deepparse.tools.download_weights\"", ")", ":", "\n", "            ", "actual", "=", "handle_pre_trained_checkpoint", "(", "self", ".", "a_fasttext_model_type_checkpoint", ")", "\n", "", "expected", "=", "os", ".", "path", ".", "join", "(", "CACHE_PATH", ",", "f\"{self.a_fasttext_model_type_checkpoint}.ckpt\"", ")", "\n", "self", ".", "assertEqual", "(", "expected", ",", "actual", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.tests.test_tools.ToolsTests.test_givenPoutyneVersionGreaterThan12_givenHandlePreTrainedCheckpointBPEmb_thenReturnBPEmb": [[221, 233], ["unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "deepparse.handle_pre_trained_checkpoint", "os.path.join", "test_tools.ToolsTests.assertEqual"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.deepparse.tools.handle_pre_trained_checkpoint"], ["", "@", "patch", "(", "\"os.path.isfile\"", ")", "\n", "@", "patch", "(", "\"deepparse.tools.latest_version\"", ")", "\n", "@", "patch", "(", "\"deepparse.tools.poutyne\"", ")", "\n", "def", "test_givenPoutyneVersionGreaterThan12_givenHandlePreTrainedCheckpointBPEmb_thenReturnBPEmb", "(", "\n", "self", ",", "poutyne_mock", ",", "latest_version_mock", ",", "isfile_mock", "\n", ")", ":", "\n", "        ", "poutyne_mock", ".", "version", ".", "__version__", "=", "\"1.2\"", "\n", "isfile_mock", ".", "return_value", "=", "True", "\n", "\n", "actual", "=", "handle_pre_trained_checkpoint", "(", "self", ".", "a_bpemb_model_type_checkpoint", ")", "\n", "expected", "=", "os", ".", "path", ".", "join", "(", "CACHE_PATH", ",", "f\"{self.a_bpemb_model_type_checkpoint}.ckpt\"", ")", "\n", "self", ".", "assertEqual", "(", "expected", ",", "actual", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.tests.test_tools.ToolsTests.test_givenPoutyneVersionGreaterThan12_givenHandlePreTrainedCheckpointBPEmbNoLocalFile_thenReturnBPEmb": [[234, 247], ["unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "os.path.join", "test_tools.ToolsTests.assertEqual", "unittest.mock.patch", "deepparse.handle_pre_trained_checkpoint"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.deepparse.tools.handle_pre_trained_checkpoint"], ["", "@", "patch", "(", "\"os.path.isfile\"", ")", "\n", "@", "patch", "(", "\"deepparse.tools.latest_version\"", ")", "\n", "@", "patch", "(", "\"deepparse.tools.poutyne\"", ")", "\n", "def", "test_givenPoutyneVersionGreaterThan12_givenHandlePreTrainedCheckpointBPEmbNoLocalFile_thenReturnBPEmb", "(", "\n", "self", ",", "poutyne_mock", ",", "latest_version_mock", ",", "isfile_mock", "\n", ")", ":", "\n", "        ", "poutyne_mock", ".", "version", ".", "__version__", "=", "\"1.2\"", "\n", "isfile_mock", ".", "return_value", "=", "False", "\n", "\n", "with", "patch", "(", "\"deepparse.tools.download_weights\"", ")", ":", "\n", "            ", "actual", "=", "handle_pre_trained_checkpoint", "(", "self", ".", "a_fasttext_model_type_checkpoint", ")", "\n", "", "expected", "=", "os", ".", "path", ".", "join", "(", "CACHE_PATH", ",", "f\"{self.a_fasttext_model_type_checkpoint}.ckpt\"", ")", "\n", "self", ".", "assertEqual", "(", "expected", ",", "actual", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.tests.test_tools.ToolsTests.test_givenPoutyneVersionGreaterThan12_givenHandlePreTrainedCheckpointFasttextNotLatestVersion_thenRaiseWarning": [[248, 260], ["unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "test_tools.ToolsTests.assertWarns", "deepparse.handle_pre_trained_checkpoint"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.deepparse.tools.handle_pre_trained_checkpoint"], ["", "@", "patch", "(", "\"os.path.isfile\"", ")", "\n", "@", "patch", "(", "\"deepparse.tools.latest_version\"", ")", "\n", "@", "patch", "(", "\"deepparse.tools.poutyne\"", ")", "\n", "def", "test_givenPoutyneVersionGreaterThan12_givenHandlePreTrainedCheckpointFasttextNotLatestVersion_thenRaiseWarning", "(", "\n", "self", ",", "poutyne_mock", ",", "latest_version_mock", ",", "isfile_mock", "\n", ")", ":", "\n", "        ", "isfile_mock", ".", "return_value", "=", "True", "\n", "latest_version_mock", ".", "return_value", "=", "False", "# Not the latest version", "\n", "poutyne_mock", ".", "version", ".", "__version__", "=", "\"1.2\"", "\n", "\n", "with", "self", ".", "assertWarns", "(", "UserWarning", ")", ":", "\n", "            ", "handle_pre_trained_checkpoint", "(", "self", ".", "a_bpemb_model_type_checkpoint", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.tests.test_tools.ToolsTests.test_givenPoutyneVersionGreaterThan12_givenHandlePreTrainedCheckpointBPEmbNotLatestVersion_thenRaiseWarning": [[261, 273], ["unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "test_tools.ToolsTests.assertWarns", "deepparse.handle_pre_trained_checkpoint"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.deepparse.tools.handle_pre_trained_checkpoint"], ["", "", "@", "patch", "(", "\"os.path.isfile\"", ")", "\n", "@", "patch", "(", "\"deepparse.tools.latest_version\"", ")", "\n", "@", "patch", "(", "\"deepparse.tools.poutyne\"", ")", "\n", "def", "test_givenPoutyneVersionGreaterThan12_givenHandlePreTrainedCheckpointBPEmbNotLatestVersion_thenRaiseWarning", "(", "\n", "self", ",", "poutyne_mock", ",", "latest_version_mock", ",", "isfile_mock", "\n", ")", ":", "\n", "        ", "isfile_mock", ".", "return_value", "=", "True", "\n", "latest_version_mock", ".", "return_value", "=", "False", "# Not the latest version", "\n", "poutyne_mock", ".", "version", ".", "__version__", "=", "\"1.2\"", "\n", "\n", "with", "self", ".", "assertWarns", "(", "UserWarning", ")", ":", "\n", "            ", "handle_pre_trained_checkpoint", "(", "self", ".", "a_bpemb_model_type_checkpoint", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.tests.test_tools.ToolsTests.test_givenPoutyneVersion1_1_1_givenHandlePoutyneVersion_thenReturnVersion1_1": [[274, 281], ["unittest.mock.patch", "deepparse.handle_poutyne_version", "test_tools.ToolsTests.assertEqual"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.deepparse.tools.handle_poutyne_version"], ["", "", "@", "patch", "(", "\"deepparse.tools.poutyne\"", ")", "\n", "def", "test_givenPoutyneVersion1_1_1_givenHandlePoutyneVersion_thenReturnVersion1_1", "(", "self", ",", "poutyne_mock", ")", ":", "\n", "        ", "poutyne_mock", ".", "version", ".", "__version__", "=", "\"1.1.1\"", "\n", "\n", "actual", "=", "handle_poutyne_version", "(", ")", "\n", "expected", "=", "\"1.1\"", "\n", "self", ".", "assertEqual", "(", "expected", ",", "actual", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.tests.test_tools.ToolsTests.test_givenPoutyneVersion1_1_1_1_givenHandlePoutyneVersion_thenReturnVersion1_1": [[282, 289], ["unittest.mock.patch", "deepparse.handle_poutyne_version", "test_tools.ToolsTests.assertEqual"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.deepparse.tools.handle_poutyne_version"], ["", "@", "patch", "(", "\"deepparse.tools.poutyne\"", ")", "\n", "def", "test_givenPoutyneVersion1_1_1_1_givenHandlePoutyneVersion_thenReturnVersion1_1", "(", "self", ",", "poutyne_mock", ")", ":", "\n", "        ", "poutyne_mock", ".", "version", ".", "__version__", "=", "\"1.1.1.1\"", "\n", "\n", "actual", "=", "handle_poutyne_version", "(", ")", "\n", "expected", "=", "\"1.1\"", "\n", "self", ".", "assertEqual", "(", "expected", ",", "actual", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.tests.test_tools.ToolsTests.test_givenPoutyneVersion1_1_dev_givenHandlePoutyneVersion_thenReturnVersion1_1": [[290, 297], ["unittest.mock.patch", "deepparse.handle_poutyne_version", "test_tools.ToolsTests.assertEqual"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.deepparse.tools.handle_poutyne_version"], ["", "@", "patch", "(", "\"deepparse.tools.poutyne\"", ")", "\n", "def", "test_givenPoutyneVersion1_1_dev_givenHandlePoutyneVersion_thenReturnVersion1_1", "(", "self", ",", "poutyne_mock", ")", ":", "\n", "        ", "poutyne_mock", ".", "version", ".", "__version__", "=", "\"1.1.dev1+81b3c7b\"", "\n", "\n", "actual", "=", "handle_poutyne_version", "(", ")", "\n", "expected", "=", "\"1.1\"", "\n", "self", ".", "assertEqual", "(", "expected", ",", "actual", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.tests.test_tools.ToolsTests.test_givenPoutyneVersion1_1_1_dev_givenHandlePoutyneVersion_thenReturnVersion1_1": [[298, 305], ["unittest.mock.patch", "deepparse.handle_poutyne_version", "test_tools.ToolsTests.assertEqual"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.deepparse.tools.handle_poutyne_version"], ["", "@", "patch", "(", "\"deepparse.tools.poutyne\"", ")", "\n", "def", "test_givenPoutyneVersion1_1_1_dev_givenHandlePoutyneVersion_thenReturnVersion1_1", "(", "self", ",", "poutyne_mock", ")", ":", "\n", "        ", "poutyne_mock", ".", "version", ".", "__version__", "=", "\"1.1.dev1+81b3c7b\"", "\n", "\n", "actual", "=", "handle_poutyne_version", "(", ")", "\n", "expected", "=", "\"1.1\"", "\n", "self", ".", "assertEqual", "(", "expected", ",", "actual", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.tests.test_tools.ToolsTests.test_givenPoutyneVersion1_2_givenHandlePoutyneVersion_thenReturnVersion1_2": [[306, 313], ["unittest.mock.patch", "deepparse.handle_poutyne_version", "test_tools.ToolsTests.assertEqual"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.deepparse.tools.handle_poutyne_version"], ["", "@", "patch", "(", "\"deepparse.tools.poutyne\"", ")", "\n", "def", "test_givenPoutyneVersion1_2_givenHandlePoutyneVersion_thenReturnVersion1_2", "(", "self", ",", "poutyne_mock", ")", ":", "\n", "        ", "poutyne_mock", ".", "version", ".", "__version__", "=", "\"1.2\"", "\n", "\n", "actual", "=", "handle_poutyne_version", "(", ")", "\n", "expected", "=", "\"1.2\"", "\n", "self", ".", "assertEqual", "(", "expected", ",", "actual", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.tests.test_tools.ToolsTests.test_givenPoutyneVersion1_2_givenValidPoutyneVersion_thenReturnTrue": [[314, 320], ["unittest.mock.patch", "deepparse.valid_poutyne_version", "test_tools.ToolsTests.assertTrue"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.deepparse.tools.valid_poutyne_version"], ["", "@", "patch", "(", "\"deepparse.tools.poutyne\"", ")", "\n", "def", "test_givenPoutyneVersion1_2_givenValidPoutyneVersion_thenReturnTrue", "(", "self", ",", "poutyne_mock", ")", ":", "\n", "        ", "poutyne_mock", ".", "version", ".", "__version__", "=", "\"1.2\"", "\n", "\n", "actual", "=", "valid_poutyne_version", "(", ")", "\n", "self", ".", "assertTrue", "(", "actual", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.tests.test_tools.ToolsTests.test_givenPoutyneVersion1_2_dev_givenValidPoutyneVersion_thenReturnTrue": [[321, 327], ["unittest.mock.patch", "deepparse.valid_poutyne_version", "test_tools.ToolsTests.assertTrue"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.deepparse.tools.valid_poutyne_version"], ["", "@", "patch", "(", "\"deepparse.tools.poutyne\"", ")", "\n", "def", "test_givenPoutyneVersion1_2_dev_givenValidPoutyneVersion_thenReturnTrue", "(", "self", ",", "poutyne_mock", ")", ":", "\n", "        ", "poutyne_mock", ".", "version", ".", "__version__", "=", "\"1.2.dev1+81b3c7b\"", "\n", "\n", "actual", "=", "valid_poutyne_version", "(", ")", "\n", "self", ".", "assertTrue", "(", "actual", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.tests.test_tools.ToolsTests.test_givenPoutyneVersion1_1_givenValidPoutyneVersion_thenReturnFalse": [[328, 334], ["unittest.mock.patch", "deepparse.valid_poutyne_version", "test_tools.ToolsTests.assertFalse"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.deepparse.tools.valid_poutyne_version"], ["", "@", "patch", "(", "\"deepparse.tools.poutyne\"", ")", "\n", "def", "test_givenPoutyneVersion1_1_givenValidPoutyneVersion_thenReturnFalse", "(", "self", ",", "poutyne_mock", ")", ":", "\n", "        ", "poutyne_mock", ".", "version", ".", "__version__", "=", "\"1.1\"", "\n", "\n", "actual", "=", "valid_poutyne_version", "(", ")", "\n", "self", ".", "assertFalse", "(", "actual", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.tests.test_tools.ToolsTests.test_givenPoutyneVersion1_1_dev_givenValidPoutyneVersion_thenReturnFalse": [[335, 341], ["unittest.mock.patch", "deepparse.valid_poutyne_version", "test_tools.ToolsTests.assertFalse"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.deepparse.tools.valid_poutyne_version"], ["", "@", "patch", "(", "\"deepparse.tools.poutyne\"", ")", "\n", "def", "test_givenPoutyneVersion1_1_dev_givenValidPoutyneVersion_thenReturnFalse", "(", "self", ",", "poutyne_mock", ")", ":", "\n", "        ", "poutyne_mock", ".", "version", ".", "__version__", "=", "\"1.1.dev1+81b3c7b\"", "\n", "\n", "actual", "=", "valid_poutyne_version", "(", ")", "\n", "self", ".", "assertFalse", "(", "actual", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.tests.test_tools.ToolsTests.test_givenPoutyneVersion1_8_givenValidPoutyneVersion1_8_thenReturnTrue": [[342, 348], ["unittest.mock.patch", "deepparse.valid_poutyne_version", "test_tools.ToolsTests.assertTrue"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.deepparse.tools.valid_poutyne_version"], ["", "@", "patch", "(", "\"deepparse.tools.poutyne\"", ")", "\n", "def", "test_givenPoutyneVersion1_8_givenValidPoutyneVersion1_8_thenReturnTrue", "(", "self", ",", "poutyne_mock", ")", ":", "\n", "        ", "poutyne_mock", ".", "version", ".", "__version__", "=", "\"1.8\"", "\n", "\n", "actual", "=", "valid_poutyne_version", "(", "min_major", "=", "1", ",", "min_minor", "=", "8", ")", "\n", "self", ".", "assertTrue", "(", "actual", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.tests.test_tools.ToolsTests.test_givenPoutyneVersion1_11_givenValidPoutyneVersion1_8_thenReturnTrue": [[349, 355], ["unittest.mock.patch", "deepparse.valid_poutyne_version", "test_tools.ToolsTests.assertTrue"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.deepparse.tools.valid_poutyne_version"], ["", "@", "patch", "(", "\"deepparse.tools.poutyne\"", ")", "\n", "def", "test_givenPoutyneVersion1_11_givenValidPoutyneVersion1_8_thenReturnTrue", "(", "self", ",", "poutyne_mock", ")", ":", "\n", "        ", "poutyne_mock", ".", "version", ".", "__version__", "=", "\"1.11\"", "\n", "\n", "actual", "=", "valid_poutyne_version", "(", "min_major", "=", "1", ",", "min_minor", "=", "8", ")", "\n", "self", ".", "assertTrue", "(", "actual", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.tests.test_tools.ToolsTests.test_givenPoutyneVersion2_givenValidPoutyneVersion1_8_thenReturnTrue": [[356, 362], ["unittest.mock.patch", "deepparse.valid_poutyne_version", "test_tools.ToolsTests.assertTrue"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.deepparse.tools.valid_poutyne_version"], ["", "@", "patch", "(", "\"deepparse.tools.poutyne\"", ")", "\n", "def", "test_givenPoutyneVersion2_givenValidPoutyneVersion1_8_thenReturnTrue", "(", "self", ",", "poutyne_mock", ")", ":", "\n", "        ", "poutyne_mock", ".", "version", ".", "__version__", "=", "\"2.0\"", "\n", "\n", "actual", "=", "valid_poutyne_version", "(", "min_major", "=", "1", ",", "min_minor", "=", "8", ")", "\n", "self", ".", "assertTrue", "(", "actual", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.tests.test_tools.ToolsTests.test_givenPoutyneVersion2_11_givenValidPoutyneVersion1_8_thenReturnTrue": [[363, 369], ["unittest.mock.patch", "deepparse.valid_poutyne_version", "test_tools.ToolsTests.assertTrue"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.deepparse.tools.valid_poutyne_version"], ["", "@", "patch", "(", "\"deepparse.tools.poutyne\"", ")", "\n", "def", "test_givenPoutyneVersion2_11_givenValidPoutyneVersion1_8_thenReturnTrue", "(", "self", ",", "poutyne_mock", ")", ":", "\n", "        ", "poutyne_mock", ".", "version", ".", "__version__", "=", "\"2.11\"", "\n", "\n", "actual", "=", "valid_poutyne_version", "(", "min_major", "=", "1", ",", "min_minor", "=", "8", ")", "\n", "self", ".", "assertTrue", "(", "actual", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.tests.test_tools.ToolsTests.test_givenPoutyneVersion2_givenValidPoutyneVersion3_thenReturnFalse": [[370, 376], ["unittest.mock.patch", "deepparse.valid_poutyne_version", "test_tools.ToolsTests.assertFalse"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.deepparse.tools.valid_poutyne_version"], ["", "@", "patch", "(", "\"deepparse.tools.poutyne\"", ")", "\n", "def", "test_givenPoutyneVersion2_givenValidPoutyneVersion3_thenReturnFalse", "(", "self", ",", "poutyne_mock", ")", ":", "\n", "        ", "poutyne_mock", ".", "version", ".", "__version__", "=", "\"2.0\"", "\n", "\n", "actual", "=", "valid_poutyne_version", "(", "min_major", "=", "3", ",", "min_minor", "=", "0", ")", "\n", "self", ".", "assertFalse", "(", "actual", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.tests.test_tools.ToolsTests.test_integrationValidateDataToParse": [[377, 380], ["deepparse.validate_data_to_parse"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.deepparse.tools.validate_data_to_parse"], ["", "def", "test_integrationValidateDataToParse", "(", "self", ")", ":", "\n", "        ", "valid_data", "=", "[", "\"An address\"", ",", "\"another address\"", "]", "\n", "validate_data_to_parse", "(", "valid_data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.tests.test_tools.ToolsTests.test_givenEmptyAddress_thenRaiseDataError": [[381, 385], ["test_tools.ToolsTests.assertRaises", "deepparse.validate_data_to_parse"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.deepparse.tools.validate_data_to_parse"], ["", "def", "test_givenEmptyAddress_thenRaiseDataError", "(", "self", ")", ":", "\n", "        ", "empty_data", "=", "[", "\"An address\"", ",", "\"\"", ",", "''", "]", "\n", "with", "self", ".", "assertRaises", "(", "DataError", ")", ":", "\n", "            ", "validate_data_to_parse", "(", "empty_data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.tests.test_tools.ToolsTests.test_givenWhiteSpaceAddress_thenRaiseDataError": [[386, 394], ["test_tools.ToolsTests.assertRaises", "deepparse.validate_data_to_parse", "test_tools.ToolsTests.assertRaises", "deepparse.validate_data_to_parse"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.deepparse.tools.validate_data_to_parse", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.deepparse.tools.validate_data_to_parse"], ["", "", "def", "test_givenWhiteSpaceAddress_thenRaiseDataError", "(", "self", ")", ":", "\n", "        ", "whitespace_data", "=", "[", "\"An address\"", ",", "\" \"", "]", "\n", "with", "self", ".", "assertRaises", "(", "DataError", ")", ":", "\n", "            ", "validate_data_to_parse", "(", "whitespace_data", ")", "\n", "\n", "", "whitespace_data", "=", "[", "\"An address\"", ",", "\"   \"", "]", "\n", "with", "self", ".", "assertRaises", "(", "DataError", ")", ":", "\n", "            ", "validate_data_to_parse", "(", "whitespace_data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.tests.test_tools.ToolsTests.test_givenNoneAddress_then_raiseDataError": [[395, 403], ["test_tools.ToolsTests.assertRaises", "deepparse.validate_data_to_parse", "test_tools.ToolsTests.assertRaises", "deepparse.validate_data_to_parse"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.deepparse.tools.validate_data_to_parse", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.deepparse.tools.validate_data_to_parse"], ["", "", "def", "test_givenNoneAddress_then_raiseDataError", "(", "self", ")", ":", "\n", "        ", "none_data", "=", "[", "\"An address\"", ",", "None", "]", "\n", "with", "self", ".", "assertRaises", "(", "DataError", ")", ":", "\n", "            ", "validate_data_to_parse", "(", "none_data", ")", "\n", "\n", "", "none_data", "=", "[", "None", "]", "\n", "with", "self", ".", "assertRaises", "(", "DataError", ")", ":", "\n", "            ", "validate_data_to_parse", "(", "none_data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.tests.test_tools.ToolsTests.test_givenTupleAddressesToParse_then_raiseDataError": [[404, 408], ["test_tools.ToolsTests.assertRaises", "deepparse.validate_data_to_parse"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.deepparse.tools.validate_data_to_parse"], ["", "", "def", "test_givenTupleAddressesToParse_then_raiseDataError", "(", "self", ")", ":", "\n", "        ", "tuple_data", "=", "[", "(", "\"An address\"", ",", "0", ")", ",", "(", "\"Another address\"", ",", "1", ")", "]", "\n", "with", "self", ".", "assertRaises", "(", "DataError", ")", ":", "\n", "            ", "validate_data_to_parse", "(", "tuple_data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.tests.base_capture_output.CaptureOutputTestCase._capture_output": [[7, 11], ["io.StringIO"], "methods", ["None"], ["    ", "def", "_capture_output", "(", "self", ")", ":", "\n", "        ", "self", ".", "test_out", "=", "io", ".", "StringIO", "(", ")", "\n", "self", ".", "original_output", "=", "sys", ".", "stdout", "\n", "sys", ".", "stdout", "=", "self", ".", "test_out", "\n", "", "", ""]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_address_parser_cpu.AddressParserTest.setUp": [[20, 34], ["test_integration_address_parser_cpu.AddressParserTest.setup_model_with_config"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.base_predict.AddressParserBase.setup_model_with_config"], ["    ", "def", "setUp", "(", "self", ")", "->", "None", ":", "\n", "        ", "a_config", "=", "{", "\"model_type\"", ":", "\"fasttext\"", ",", "\"device\"", ":", "\"cpu\"", ",", "\"verbose\"", ":", "False", "}", "\n", "self", ".", "setup_model_with_config", "(", "a_config", ")", "\n", "\n", "self", ".", "expected_fields", "=", "[", "\n", "\"StreetNumber\"", ",", "\n", "\"Unit\"", ",", "\n", "\"StreetName\"", ",", "\n", "\"Orientation\"", ",", "\n", "\"Municipality\"", ",", "\n", "\"Province\"", ",", "\n", "\"PostalCode\"", ",", "\n", "\"GeneralDelivery\"", ",", "\n", "\"EOS\"", ",", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_address_parser_cpu.AddressParserTest.test_proper_tags_set_up": [[36, 42], ["list", "test_integration_address_parser_cpu.AddressParserTest.assert_equal_not_ordered", "test_integration_address_parser_cpu.AddressParserTest.a_model.tags_converter.tags_to_idx.keys"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_address_parser_cpu.AddressParserTest.assert_equal_not_ordered"], ["", "def", "test_proper_tags_set_up", "(", "self", ")", ":", "\n", "        ", "actual_tags", "=", "list", "(", "self", ".", "a_model", ".", "tags_converter", ".", "tags_to_idx", ".", "keys", "(", ")", ")", "\n", "\n", "expected_fields", "=", "self", ".", "expected_fields", "\n", "\n", "self", ".", "assert_equal_not_ordered", "(", "actual_tags", ",", "expected_fields", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_address_parser_cpu.AddressParserTest.test_proper_fields_set_up": [[43, 49], ["test_integration_address_parser_cpu.AddressParserTest.assert_equal_not_ordered"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_address_parser_cpu.AddressParserTest.assert_equal_not_ordered"], ["", "def", "test_proper_fields_set_up", "(", "self", ")", ":", "\n", "        ", "actual_fields", "=", "formatted_parsed_address", ".", "FIELDS", "\n", "\n", "expected_fields", "=", "self", ".", "expected_fields", "\n", "\n", "self", ".", "assert_equal_not_ordered", "(", "actual_fields", ",", "expected_fields", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_address_parser_cpu.AddressParserTest.assert_equal_not_ordered": [[50, 53], ["test_integration_address_parser_cpu.AddressParserTest.assertIn"], "methods", ["None"], ["", "def", "assert_equal_not_ordered", "(", "self", ",", "actual", ",", "expected_elements", ")", ":", "\n", "        ", "for", "expected", "in", "expected_elements", ":", "\n", "            ", "self", ".", "assertIn", "(", "expected", ",", "actual", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_address_parser_cpu.AddressParserPredictCPUTest.setUpClass": [[60, 64], ["super().setUpClass"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_seq2seq_fasttext_model_gpu.FastTextSeq2SeqIntegrationTest.setUpClass"], ["    ", "@", "classmethod", "\n", "def", "setUpClass", "(", "cls", ")", ":", "\n", "        ", "super", "(", "AddressParserPredictCPUTest", ",", "cls", ")", ".", "setUpClass", "(", ")", "\n", "cls", ".", "device", "=", "\"cpu\"", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_address_parser_cpu.AddressParserPredictCPUTest.test_givenAAddress_whenParseFastText_thenParseAddress": [[65, 71], ["test_integration_address_parser_cpu.AddressParserPredictCPUTest.setup_model_with_config", "test_integration_address_parser_cpu.AddressParserPredictCPUTest.a_model", "test_integration_address_parser_cpu.AddressParserPredictCPUTest.assert_properly_parse"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.base_predict.AddressParserBase.setup_model_with_config", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.base_predict.AddressParserPredictBase.assert_properly_parse"], ["", "def", "test_givenAAddress_whenParseFastText_thenParseAddress", "(", "self", ")", ":", "\n", "        ", "config", "=", "{", "\"model_type\"", ":", "\"fasttext\"", ",", "\"device\"", ":", "self", ".", "device", ",", "\"verbose\"", ":", "False", "}", "\n", "self", ".", "setup_model_with_config", "(", "config", ")", "\n", "\n", "parse_address", "=", "self", ".", "a_model", "(", "self", ".", "an_address_to_parse", ")", "\n", "self", ".", "assert_properly_parse", "(", "parse_address", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_address_parser_cpu.AddressParserPredictCPUTest.test_givenAAddress_whenParseBPEmb_thenParseAddress": [[72, 78], ["test_integration_address_parser_cpu.AddressParserPredictCPUTest.setup_model_with_config", "test_integration_address_parser_cpu.AddressParserPredictCPUTest.a_model", "test_integration_address_parser_cpu.AddressParserPredictCPUTest.assert_properly_parse"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.base_predict.AddressParserBase.setup_model_with_config", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.base_predict.AddressParserPredictBase.assert_properly_parse"], ["", "def", "test_givenAAddress_whenParseBPEmb_thenParseAddress", "(", "self", ")", ":", "\n", "        ", "config", "=", "{", "\"model_type\"", ":", "\"bpemb\"", ",", "\"device\"", ":", "self", ".", "device", ",", "\"verbose\"", ":", "False", "}", "\n", "self", ".", "setup_model_with_config", "(", "config", ")", "\n", "\n", "parse_address", "=", "self", ".", "a_model", "(", "self", ".", "an_address_to_parse", ")", "\n", "self", ".", "assert_properly_parse", "(", "parse_address", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_address_parser_cpu.AddressParserPredictCPUTest.test_givenAAddress_whenParseFastTextAtt_thenParseAddress": [[79, 90], ["test_integration_address_parser_cpu.AddressParserPredictCPUTest.setup_model_with_config", "test_integration_address_parser_cpu.AddressParserPredictCPUTest.a_model", "test_integration_address_parser_cpu.AddressParserPredictCPUTest.assert_properly_parse"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.base_predict.AddressParserBase.setup_model_with_config", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.base_predict.AddressParserPredictBase.assert_properly_parse"], ["", "def", "test_givenAAddress_whenParseFastTextAtt_thenParseAddress", "(", "self", ")", ":", "\n", "        ", "config", "=", "{", "\n", "\"model_type\"", ":", "\"fasttext\"", ",", "\n", "\"device\"", ":", "self", ".", "device", ",", "\n", "\"verbose\"", ":", "False", ",", "\n", "\"attention_mechanism\"", ":", "True", ",", "\n", "}", "\n", "self", ".", "setup_model_with_config", "(", "config", ")", "\n", "\n", "parse_address", "=", "self", ".", "a_model", "(", "self", ".", "an_address_to_parse", ")", "\n", "self", ".", "assert_properly_parse", "(", "parse_address", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_address_parser_cpu.AddressParserPredictCPUTest.test_givenAAddress_whenParseBPEmbAtt_thenParseAddress": [[91, 102], ["test_integration_address_parser_cpu.AddressParserPredictCPUTest.setup_model_with_config", "test_integration_address_parser_cpu.AddressParserPredictCPUTest.a_model", "test_integration_address_parser_cpu.AddressParserPredictCPUTest.assert_properly_parse"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.base_predict.AddressParserBase.setup_model_with_config", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.base_predict.AddressParserPredictBase.assert_properly_parse"], ["", "def", "test_givenAAddress_whenParseBPEmbAtt_thenParseAddress", "(", "self", ")", ":", "\n", "        ", "config", "=", "{", "\n", "\"model_type\"", ":", "\"bpemb\"", ",", "\n", "\"device\"", ":", "self", ".", "device", ",", "\n", "\"verbose\"", ":", "False", ",", "\n", "\"attention_mechanism\"", ":", "True", ",", "\n", "}", "\n", "self", ".", "setup_model_with_config", "(", "config", ")", "\n", "\n", "parse_address", "=", "self", ".", "a_model", "(", "self", ".", "an_address_to_parse", ")", "\n", "self", ".", "assert_properly_parse", "(", "parse_address", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_address_parser_cpu.AddressParserPredictCPUTest.test_givenAListOfAddress_whenParseFastText_thenParseAllAddress": [[103, 109], ["test_integration_address_parser_cpu.AddressParserPredictCPUTest.setup_model_with_config", "test_integration_address_parser_cpu.AddressParserPredictCPUTest.a_model", "test_integration_address_parser_cpu.AddressParserPredictCPUTest.assert_properly_parse"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.base_predict.AddressParserBase.setup_model_with_config", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.base_predict.AddressParserPredictBase.assert_properly_parse"], ["", "def", "test_givenAListOfAddress_whenParseFastText_thenParseAllAddress", "(", "self", ")", ":", "\n", "        ", "config", "=", "{", "\"model_type\"", ":", "\"fasttext\"", ",", "\"device\"", ":", "self", ".", "device", ",", "\"verbose\"", ":", "False", "}", "\n", "self", ".", "setup_model_with_config", "(", "config", ")", "\n", "\n", "parse_address", "=", "self", ".", "a_model", "(", "[", "self", ".", "an_address_to_parse", ",", "self", ".", "an_address_to_parse", "]", ")", "\n", "self", ".", "assert_properly_parse", "(", "parse_address", ",", "multiple_address", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_address_parser_cpu.AddressParserPredictCPUTest.test_givenAListOfAddress_whenParseBPEmb_thenParseAllAddress": [[110, 116], ["test_integration_address_parser_cpu.AddressParserPredictCPUTest.setup_model_with_config", "test_integration_address_parser_cpu.AddressParserPredictCPUTest.a_model", "test_integration_address_parser_cpu.AddressParserPredictCPUTest.assert_properly_parse"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.base_predict.AddressParserBase.setup_model_with_config", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.base_predict.AddressParserPredictBase.assert_properly_parse"], ["", "def", "test_givenAListOfAddress_whenParseBPEmb_thenParseAllAddress", "(", "self", ")", ":", "\n", "        ", "config", "=", "{", "\"model_type\"", ":", "\"bpemb\"", ",", "\"device\"", ":", "self", ".", "device", ",", "\"verbose\"", ":", "False", "}", "\n", "self", ".", "setup_model_with_config", "(", "config", ")", "\n", "\n", "parse_address", "=", "self", ".", "a_model", "(", "[", "self", ".", "an_address_to_parse", ",", "self", ".", "an_address_to_parse", "]", ")", "\n", "self", ".", "assert_properly_parse", "(", "parse_address", ",", "multiple_address", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_address_parser_cpu.AddressParserPredictCPUMultiProcessTest.setUpClass": [[124, 128], ["super().setUpClass"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_seq2seq_fasttext_model_gpu.FastTextSeq2SeqIntegrationTest.setUpClass"], ["    ", "@", "classmethod", "\n", "def", "setUpClass", "(", "cls", ")", ":", "\n", "        ", "super", "(", "AddressParserPredictCPUMultiProcessTest", ",", "cls", ")", ".", "setUpClass", "(", ")", "\n", "cls", ".", "device", "=", "\"cpu\"", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_address_parser_cpu.AddressParserPredictCPUMultiProcessTest.test_givenAAddress_whenParseFastTextNumWorkers1_thenParseAddress": [[129, 135], ["test_integration_address_parser_cpu.AddressParserPredictCPUMultiProcessTest.setup_model_with_config", "test_integration_address_parser_cpu.AddressParserPredictCPUMultiProcessTest.a_model", "test_integration_address_parser_cpu.AddressParserPredictCPUMultiProcessTest.assert_properly_parse"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.base_predict.AddressParserBase.setup_model_with_config", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.base_predict.AddressParserPredictBase.assert_properly_parse"], ["", "def", "test_givenAAddress_whenParseFastTextNumWorkers1_thenParseAddress", "(", "self", ")", ":", "\n", "        ", "config", "=", "{", "\"model_type\"", ":", "\"fasttext\"", ",", "\"device\"", ":", "self", ".", "device", ",", "\"verbose\"", ":", "False", "}", "\n", "self", ".", "setup_model_with_config", "(", "config", ")", "\n", "\n", "parse_address", "=", "self", ".", "a_model", "(", "self", ".", "an_address_to_parse", ",", "num_workers", "=", "1", ")", "\n", "self", ".", "assert_properly_parse", "(", "parse_address", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_address_parser_cpu.AddressParserPredictCPUMultiProcessTest.test_givenAAddress_whenParseBPEmbNumWorkers1_thenParseAddress": [[136, 142], ["test_integration_address_parser_cpu.AddressParserPredictCPUMultiProcessTest.setup_model_with_config", "test_integration_address_parser_cpu.AddressParserPredictCPUMultiProcessTest.a_model", "test_integration_address_parser_cpu.AddressParserPredictCPUMultiProcessTest.assert_properly_parse"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.base_predict.AddressParserBase.setup_model_with_config", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.base_predict.AddressParserPredictBase.assert_properly_parse"], ["", "def", "test_givenAAddress_whenParseBPEmbNumWorkers1_thenParseAddress", "(", "self", ")", ":", "\n", "        ", "config", "=", "{", "\"model_type\"", ":", "\"bpemb\"", ",", "\"device\"", ":", "self", ".", "device", ",", "\"verbose\"", ":", "False", "}", "\n", "self", ".", "setup_model_with_config", "(", "config", ")", "\n", "\n", "parse_address", "=", "self", ".", "a_model", "(", "self", ".", "an_address_to_parse", ",", "num_workers", "=", "1", ")", "\n", "self", ".", "assert_properly_parse", "(", "parse_address", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_address_parser_cpu.AddressParserPredictCPUMultiProcessTest.test_givenAListOfAddress_whenParseFastTextNumWorkers1_thenParseAllAddress": [[143, 149], ["test_integration_address_parser_cpu.AddressParserPredictCPUMultiProcessTest.setup_model_with_config", "test_integration_address_parser_cpu.AddressParserPredictCPUMultiProcessTest.a_model", "test_integration_address_parser_cpu.AddressParserPredictCPUMultiProcessTest.assert_properly_parse"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.base_predict.AddressParserBase.setup_model_with_config", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.base_predict.AddressParserPredictBase.assert_properly_parse"], ["", "def", "test_givenAListOfAddress_whenParseFastTextNumWorkers1_thenParseAllAddress", "(", "self", ")", ":", "\n", "        ", "config", "=", "{", "\"model_type\"", ":", "\"fasttext\"", ",", "\"device\"", ":", "self", ".", "device", ",", "\"verbose\"", ":", "False", "}", "\n", "self", ".", "setup_model_with_config", "(", "config", ")", "\n", "\n", "parse_address", "=", "self", ".", "a_model", "(", "[", "self", ".", "an_address_to_parse", ",", "self", ".", "an_address_to_parse", "]", ",", "num_workers", "=", "1", ")", "\n", "self", ".", "assert_properly_parse", "(", "parse_address", ",", "multiple_address", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_address_parser_cpu.AddressParserPredictCPUMultiProcessTest.test_givenAListOfAddress_whenParseBPEmbNumWorkers1_thenParseAllAddress": [[150, 156], ["test_integration_address_parser_cpu.AddressParserPredictCPUMultiProcessTest.setup_model_with_config", "test_integration_address_parser_cpu.AddressParserPredictCPUMultiProcessTest.a_model", "test_integration_address_parser_cpu.AddressParserPredictCPUMultiProcessTest.assert_properly_parse"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.base_predict.AddressParserBase.setup_model_with_config", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.base_predict.AddressParserPredictBase.assert_properly_parse"], ["", "def", "test_givenAListOfAddress_whenParseBPEmbNumWorkers1_thenParseAllAddress", "(", "self", ")", ":", "\n", "        ", "config", "=", "{", "\"model_type\"", ":", "\"bpemb\"", ",", "\"device\"", ":", "self", ".", "device", ",", "\"verbose\"", ":", "False", "}", "\n", "self", ".", "setup_model_with_config", "(", "config", ")", "\n", "\n", "parse_address", "=", "self", ".", "a_model", "(", "[", "self", ".", "an_address_to_parse", ",", "self", ".", "an_address_to_parse", "]", ",", "num_workers", "=", "1", ")", "\n", "self", ".", "assert_properly_parse", "(", "parse_address", ",", "multiple_address", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_address_parser_cpu.AddressParserPredictCPUMultiProcessTest.test_givenAAddress_whenParseFastTextNumWorkers2_thenParseAddress": [[157, 163], ["test_integration_address_parser_cpu.AddressParserPredictCPUMultiProcessTest.setup_model_with_config", "test_integration_address_parser_cpu.AddressParserPredictCPUMultiProcessTest.a_model", "test_integration_address_parser_cpu.AddressParserPredictCPUMultiProcessTest.assert_properly_parse"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.base_predict.AddressParserBase.setup_model_with_config", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.base_predict.AddressParserPredictBase.assert_properly_parse"], ["", "def", "test_givenAAddress_whenParseFastTextNumWorkers2_thenParseAddress", "(", "self", ")", ":", "\n", "        ", "config", "=", "{", "\"model_type\"", ":", "\"fasttext\"", ",", "\"device\"", ":", "self", ".", "device", ",", "\"verbose\"", ":", "False", "}", "\n", "self", ".", "setup_model_with_config", "(", "config", ")", "\n", "\n", "parse_address", "=", "self", ".", "a_model", "(", "self", ".", "an_address_to_parse", ",", "num_workers", "=", "2", ")", "\n", "self", ".", "assert_properly_parse", "(", "parse_address", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_address_parser_cpu.AddressParserPredictCPUMultiProcessTest.test_givenAAddress_whenParseBPEmbNumWorkers2_thenParseAddress": [[164, 170], ["test_integration_address_parser_cpu.AddressParserPredictCPUMultiProcessTest.setup_model_with_config", "test_integration_address_parser_cpu.AddressParserPredictCPUMultiProcessTest.a_model", "test_integration_address_parser_cpu.AddressParserPredictCPUMultiProcessTest.assert_properly_parse"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.base_predict.AddressParserBase.setup_model_with_config", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.base_predict.AddressParserPredictBase.assert_properly_parse"], ["", "def", "test_givenAAddress_whenParseBPEmbNumWorkers2_thenParseAddress", "(", "self", ")", ":", "\n", "        ", "config", "=", "{", "\"model_type\"", ":", "\"bpemb\"", ",", "\"device\"", ":", "self", ".", "device", ",", "\"verbose\"", ":", "False", "}", "\n", "self", ".", "setup_model_with_config", "(", "config", ")", "\n", "\n", "parse_address", "=", "self", ".", "a_model", "(", "self", ".", "an_address_to_parse", ",", "num_workers", "=", "2", ")", "\n", "self", ".", "assert_properly_parse", "(", "parse_address", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_address_parser_cpu.AddressParserPredictCPUMultiProcessTest.test_givenAListOfAddress_whenParseFastTextNumWorkers2_thenParseAllAddress": [[171, 177], ["test_integration_address_parser_cpu.AddressParserPredictCPUMultiProcessTest.setup_model_with_config", "test_integration_address_parser_cpu.AddressParserPredictCPUMultiProcessTest.a_model", "test_integration_address_parser_cpu.AddressParserPredictCPUMultiProcessTest.assert_properly_parse"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.base_predict.AddressParserBase.setup_model_with_config", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.base_predict.AddressParserPredictBase.assert_properly_parse"], ["", "def", "test_givenAListOfAddress_whenParseFastTextNumWorkers2_thenParseAllAddress", "(", "self", ")", ":", "\n", "        ", "config", "=", "{", "\"model_type\"", ":", "\"fasttext\"", ",", "\"device\"", ":", "self", ".", "device", ",", "\"verbose\"", ":", "False", "}", "\n", "self", ".", "setup_model_with_config", "(", "config", ")", "\n", "\n", "parse_address", "=", "self", ".", "a_model", "(", "[", "self", ".", "an_address_to_parse", ",", "self", ".", "an_address_to_parse", "]", ",", "num_workers", "=", "2", ")", "\n", "self", ".", "assert_properly_parse", "(", "parse_address", ",", "multiple_address", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_address_parser_cpu.AddressParserPredictCPUMultiProcessTest.test_givenAListOfAddress_whenParseBPEmbNumWorkers2_thenParseAllAddress": [[178, 184], ["test_integration_address_parser_cpu.AddressParserPredictCPUMultiProcessTest.setup_model_with_config", "test_integration_address_parser_cpu.AddressParserPredictCPUMultiProcessTest.a_model", "test_integration_address_parser_cpu.AddressParserPredictCPUMultiProcessTest.assert_properly_parse"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.base_predict.AddressParserBase.setup_model_with_config", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.base_predict.AddressParserPredictBase.assert_properly_parse"], ["", "def", "test_givenAListOfAddress_whenParseBPEmbNumWorkers2_thenParseAllAddress", "(", "self", ")", ":", "\n", "        ", "config", "=", "{", "\"model_type\"", ":", "\"bpemb\"", ",", "\"device\"", ":", "self", ".", "device", ",", "\"verbose\"", ":", "False", "}", "\n", "self", ".", "setup_model_with_config", "(", "config", ")", "\n", "\n", "parse_address", "=", "self", ".", "a_model", "(", "[", "self", ".", "an_address_to_parse", ",", "self", ".", "an_address_to_parse", "]", ",", "num_workers", "=", "2", ")", "\n", "self", ".", "assert_properly_parse", "(", "parse_address", ",", "multiple_address", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_address_parser_cpu.AddressParserPredictCPUMultiProcessTest.test_givenAAttentionModel_whenParseFastTextNumWorkers2_thenProperlyParseAddress": [[185, 198], ["test_integration_address_parser_cpu.AddressParserPredictCPUMultiProcessTest.setup_model_with_config", "test_integration_address_parser_cpu.AddressParserPredictCPUMultiProcessTest.a_model", "test_integration_address_parser_cpu.AddressParserPredictCPUMultiProcessTest.assert_properly_parse"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.base_predict.AddressParserBase.setup_model_with_config", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.base_predict.AddressParserPredictBase.assert_properly_parse"], ["", "def", "test_givenAAttentionModel_whenParseFastTextNumWorkers2_thenProperlyParseAddress", "(", "\n", "self", ",", "\n", ")", ":", "\n", "        ", "config", "=", "{", "\n", "\"model_type\"", ":", "\"fasttext\"", ",", "\n", "\"device\"", ":", "self", ".", "device", ",", "\n", "\"verbose\"", ":", "False", ",", "\n", "\"attention_mechanism\"", ":", "True", ",", "\n", "}", "\n", "self", ".", "setup_model_with_config", "(", "config", ")", "\n", "\n", "parse_address", "=", "self", ".", "a_model", "(", "self", ".", "an_address_to_parse", ",", "num_workers", "=", "2", ")", "\n", "self", ".", "assert_properly_parse", "(", "parse_address", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_address_parser_cpu.AddressParserPredictCPUMultiProcessTest.test_givenAAttentionModel_whenParseBPEmbNumWorkers2_thenProperlyParseAddress": [[199, 212], ["test_integration_address_parser_cpu.AddressParserPredictCPUMultiProcessTest.setup_model_with_config", "test_integration_address_parser_cpu.AddressParserPredictCPUMultiProcessTest.a_model", "test_integration_address_parser_cpu.AddressParserPredictCPUMultiProcessTest.assert_properly_parse"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.base_predict.AddressParserBase.setup_model_with_config", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.base_predict.AddressParserPredictBase.assert_properly_parse"], ["", "def", "test_givenAAttentionModel_whenParseBPEmbNumWorkers2_thenProperlyParseAddress", "(", "\n", "self", ",", "\n", ")", ":", "\n", "        ", "config", "=", "{", "\n", "\"model_type\"", ":", "\"bpemb\"", ",", "\n", "\"device\"", ":", "self", ".", "device", ",", "\n", "\"verbose\"", ":", "False", ",", "\n", "\"attention_mechanism\"", ":", "True", ",", "\n", "}", "\n", "self", ".", "setup_model_with_config", "(", "config", ")", "\n", "\n", "parse_address", "=", "self", ".", "a_model", "(", "self", ".", "an_address_to_parse", ",", "num_workers", "=", "2", ")", "\n", "self", ".", "assert_properly_parse", "(", "parse_address", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_address_parser_cpu.AddressParserPredictCPUMultiProcessTest.test_givenAModel_whenParseWithEmptyString_raiseDataError": [[213, 229], ["test_integration_address_parser_cpu.AddressParserPredictCPUMultiProcessTest.setup_model_with_config", "test_integration_address_parser_cpu.AddressParserPredictCPUMultiProcessTest.assertRaises", "test_integration_address_parser_cpu.AddressParserPredictCPUMultiProcessTest.a_model", "test_integration_address_parser_cpu.AddressParserPredictCPUMultiProcessTest.assertRaises", "test_integration_address_parser_cpu.AddressParserPredictCPUMultiProcessTest.a_model"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.base_predict.AddressParserBase.setup_model_with_config"], ["", "def", "test_givenAModel_whenParseWithEmptyString_raiseDataError", "(", "self", ")", ":", "\n", "        ", "config", "=", "{", "\n", "\"model_type\"", ":", "\"bpemb\"", ",", "\n", "\"device\"", ":", "self", ".", "device", ",", "\n", "\"verbose\"", ":", "False", ",", "\n", "\"attention_mechanism\"", ":", "True", ",", "\n", "}", "\n", "self", ".", "setup_model_with_config", "(", "config", ")", "\n", "\n", "empty_data", "=", "[", "\"an address\"", ",", "\"\"", "]", "\n", "another_empty_address", "=", "\"\"", "\n", "with", "self", ".", "assertRaises", "(", "DataError", ")", ":", "\n", "            ", "self", ".", "a_model", "(", "empty_data", ")", "\n", "\n", "", "with", "self", ".", "assertRaises", "(", "DataError", ")", ":", "\n", "            ", "self", ".", "a_model", "(", "another_empty_address", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_address_parser_cpu.AddressParserPredictCPUMultiProcessTest.test_givenAModel_whenParseWithWhitespaceString_raiseDataError": [[230, 246], ["test_integration_address_parser_cpu.AddressParserPredictCPUMultiProcessTest.setup_model_with_config", "test_integration_address_parser_cpu.AddressParserPredictCPUMultiProcessTest.assertRaises", "test_integration_address_parser_cpu.AddressParserPredictCPUMultiProcessTest.a_model", "test_integration_address_parser_cpu.AddressParserPredictCPUMultiProcessTest.assertRaises", "test_integration_address_parser_cpu.AddressParserPredictCPUMultiProcessTest.a_model"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.base_predict.AddressParserBase.setup_model_with_config"], ["", "", "def", "test_givenAModel_whenParseWithWhitespaceString_raiseDataError", "(", "self", ")", ":", "\n", "        ", "config", "=", "{", "\n", "\"model_type\"", ":", "\"bpemb\"", ",", "\n", "\"device\"", ":", "self", ".", "device", ",", "\n", "\"verbose\"", ":", "False", ",", "\n", "\"attention_mechanism\"", ":", "True", ",", "\n", "}", "\n", "self", ".", "setup_model_with_config", "(", "config", ")", "\n", "\n", "whitespace_data", "=", "[", "\"an address\"", ",", "\" \"", "]", "\n", "another_whitespace_address", "=", "\" \"", "\n", "with", "self", ".", "assertRaises", "(", "DataError", ")", ":", "\n", "            ", "self", ".", "a_model", "(", "whitespace_data", ")", "\n", "\n", "", "with", "self", ".", "assertRaises", "(", "DataError", ")", ":", "\n", "            ", "self", ".", "a_model", "(", "another_whitespace_address", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_address_parser_new_params_new_tags.AddressParserPredictTest.setUpClass": [[23, 60], ["tempfile.TemporaryDirectory", "os.path.join", "os.makedirs", "deepparse.download_from_url", "deepparse.dataset_container.PickleDatasetContainer", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.deepparse.tools.download_from_url"], ["    ", "@", "classmethod", "\n", "def", "setUpClass", "(", "cls", ")", ":", "\n", "        ", "cls", ".", "an_address_to_parse", "=", "\"350 rue des lilas o\"", "\n", "cls", ".", "temp_dir_obj", "=", "TemporaryDirectory", "(", ")", "\n", "cls", ".", "a_data_saving_dir", "=", "os", ".", "path", ".", "join", "(", "cls", ".", "temp_dir_obj", ".", "name", ",", "\"data\"", ")", "\n", "os", ".", "makedirs", "(", "cls", ".", "a_data_saving_dir", ",", "exist_ok", "=", "True", ")", "\n", "file_extension", "=", "\"p\"", "\n", "training_dataset_name", "=", "\"test_sample_data_new_prediction_tags\"", "\n", "download_from_url", "(", "training_dataset_name", ",", "cls", ".", "a_data_saving_dir", ",", "file_extension", "=", "file_extension", ")", "\n", "\n", "cls", ".", "training_container", "=", "PickleDatasetContainer", "(", "\n", "os", ".", "path", ".", "join", "(", "cls", ".", "a_data_saving_dir", ",", "training_dataset_name", "+", "\".\"", "+", "file_extension", ")", "\n", ")", "\n", "\n", "cls", ".", "a_fasttext_model_type", "=", "\"fasttext\"", "\n", "cls", ".", "a_bpemb_model_type", "=", "\"bpemb\"", "\n", "\n", "cls", ".", "verbose", "=", "False", "\n", "\n", "# training constant", "\n", "cls", ".", "a_single_epoch", "=", "1", "\n", "cls", ".", "a_train_ratio", "=", "0.8", "\n", "cls", ".", "a_batch_size", "=", "128", "\n", "cls", ".", "a_number_of_workers", "=", "2", "\n", "cls", ".", "a_learning_rate", "=", "0.001", "\n", "\n", "cls", ".", "a_cpu_device", "=", "\"cpu\"", "\n", "\n", "cls", ".", "with_new_prediction_tags", "=", "{", "\n", "\"ALastTag\"", ":", "0", ",", "\n", "\"ATag\"", ":", "1", ",", "\n", "\"AnotherTag\"", ":", "2", ",", "\n", "\"EOS\"", ":", "3", ",", "\n", "}", "\n", "cls", ".", "seq2seq_params", "=", "{", "\"encoder_hidden_size\"", ":", "512", ",", "\"decoder_hidden_size\"", ":", "512", "}", "\n", "\n", "cls", ".", "retrain_file_name_format", "=", "\"retrained_{}_address_parser\"", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_address_parser_new_params_new_tags.AddressParserPredictTest.setUp": [[61, 71], ["tempfile.TemporaryDirectory", "os.path.join", "os.path.join", "os.path.join", "test_integration_address_parser_new_params_new_tags.AddressParserPredictTest.retrain_file_name_format.format", "test_integration_address_parser_new_params_new_tags.AddressParserPredictTest.retrain_file_name_format.format"], "methods", ["None"], ["", "def", "setUp", "(", "self", ")", "->", "None", ":", "\n", "        ", "self", ".", "training_temp_dir_obj", "=", "TemporaryDirectory", "(", ")", "\n", "self", ".", "a_checkpoints_saving_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "training_temp_dir_obj", ".", "name", ",", "\"checkpoints\"", ")", "\n", "self", ".", "a_fasttext_retrain_model_path", "=", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "a_checkpoints_saving_dir", ",", "\n", "self", ".", "retrain_file_name_format", ".", "format", "(", "\"fasttext\"", ")", "+", "\".ckpt\"", ",", "\n", ")", "\n", "self", ".", "a_bpemb_retrain_model_path", "=", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "a_checkpoints_saving_dir", ",", "\n", "self", ".", "retrain_file_name_format", ".", "format", "(", "\"bpemb\"", ")", "+", "\".ckpt\"", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_address_parser_new_params_new_tags.AddressParserPredictTest.tearDownClass": [[73, 76], ["cls.temp_dir_obj.cleanup"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "tearDownClass", "(", "cls", ")", "->", "None", ":", "\n", "        ", "cls", ".", "temp_dir_obj", ".", "cleanup", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_address_parser_new_params_new_tags.AddressParserPredictTest.tearDown": [[77, 79], ["test_integration_address_parser_new_params_new_tags.AddressParserPredictTest.training_temp_dir_obj.cleanup"], "methods", ["None"], ["", "def", "tearDown", "(", "self", ")", "->", "None", ":", "\n", "        ", "self", ".", "training_temp_dir_obj", ".", "cleanup", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_address_parser_new_params_new_tags.AddressParserPredictTest.training": [[80, 97], ["address_parser.retrain"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.address_parser.AddressParser.retrain"], ["", "def", "training", "(", "\n", "self", ",", "\n", "address_parser", ":", "AddressParser", ",", "\n", "data_container", ":", "DatasetContainer", ",", "\n", "num_workers", ":", "int", ",", "\n", "prediction_tags", "=", "None", ",", "\n", "seq2seq_params", "=", "None", ",", "\n", ")", ":", "\n", "        ", "address_parser", ".", "retrain", "(", "\n", "data_container", ",", "\n", "self", ".", "a_train_ratio", ",", "\n", "epochs", "=", "self", ".", "a_single_epoch", ",", "\n", "batch_size", "=", "self", ".", "a_batch_size", ",", "\n", "num_workers", "=", "num_workers", ",", "\n", "logging_path", "=", "self", ".", "a_checkpoints_saving_dir", ",", "\n", "prediction_tags", "=", "prediction_tags", ",", "\n", "seq2seq_params", "=", "seq2seq_params", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_address_parser_new_params_new_tags.AddressParserPredictTest.test_givenAAddress_whenParseNewParamsNewTagsBPEmb_thenParseAddressProperly": [[99, 130], ["deepparse.parser.AddressParser", "test_integration_address_parser_new_params_new_tags.AddressParserPredictTest.training", "deepparse.parser.AddressParser", "test_integration_address_parser_new_params_new_tags.AddressParserPredictTest.with_new_prediction_tags.keys", "deepparse.parser.AddressParser.", "test_integration_address_parser_new_params_new_tags.AddressParserPredictTest.assertIsInstance"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.base_retrain.AddressParserRetrainTestCase.training"], ["", "def", "test_givenAAddress_whenParseNewParamsNewTagsBPEmb_thenParseAddressProperly", "(", "\n", "self", ",", "\n", ")", ":", "\n", "# Training setup", "\n", "        ", "bpemb_address_parser", "=", "AddressParser", "(", "\n", "model_type", "=", "self", ".", "a_bpemb_model_type", ",", "\n", "device", "=", "self", ".", "a_cpu_device", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", ")", "\n", "self", ".", "training", "(", "\n", "bpemb_address_parser", ",", "\n", "self", ".", "training_container", ",", "\n", "self", ".", "a_number_of_workers", ",", "\n", "seq2seq_params", "=", "self", ".", "seq2seq_params", ",", "\n", "prediction_tags", "=", "self", ".", "with_new_prediction_tags", ",", "\n", ")", "\n", "\n", "# Test", "\n", "bpemb_address_parser", "=", "AddressParser", "(", "\n", "model_type", "=", "self", ".", "a_bpemb_model_type", ",", "\n", "device", "=", "self", ".", "a_cpu_device", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", "path_to_retrained_model", "=", "self", ".", "a_bpemb_retrain_model_path", ",", "\n", ")", "\n", "\n", "# Since we train a smaller model, it sometime return EOS, so we manage it by adding the EOS tag", "\n", "formatted_parsed_address", ".", "FIELDS", "=", "self", ".", "with_new_prediction_tags", ".", "keys", "(", ")", "\n", "\n", "# We validate that the new settings are loaded", "\n", "parse_address", "=", "bpemb_address_parser", "(", "self", ".", "an_address_to_parse", ")", "\n", "self", ".", "assertIsInstance", "(", "parse_address", ",", "FormattedParsedAddress", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_address_parser_new_params_new_tags.AddressParserPredictTest.test_givenAAddress_whenParseNewParamsNewTagsFastText_thenParseAddressProperly": [[131, 162], ["deepparse.parser.AddressParser", "test_integration_address_parser_new_params_new_tags.AddressParserPredictTest.training", "deepparse.parser.AddressParser", "test_integration_address_parser_new_params_new_tags.AddressParserPredictTest.with_new_prediction_tags.keys", "deepparse.parser.AddressParser.", "test_integration_address_parser_new_params_new_tags.AddressParserPredictTest.assertIsInstance"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.base_retrain.AddressParserRetrainTestCase.training"], ["", "def", "test_givenAAddress_whenParseNewParamsNewTagsFastText_thenParseAddressProperly", "(", "\n", "self", ",", "\n", ")", ":", "\n", "# Training setup", "\n", "        ", "fasttext_address_parser", "=", "AddressParser", "(", "\n", "model_type", "=", "self", ".", "a_fasttext_model_type", ",", "\n", "device", "=", "self", ".", "a_cpu_device", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", ")", "\n", "self", ".", "training", "(", "\n", "fasttext_address_parser", ",", "\n", "self", ".", "training_container", ",", "\n", "self", ".", "a_number_of_workers", ",", "\n", "seq2seq_params", "=", "self", ".", "seq2seq_params", ",", "\n", "prediction_tags", "=", "self", ".", "with_new_prediction_tags", ",", "\n", ")", "\n", "\n", "# Test", "\n", "fasttext_address_parser", "=", "AddressParser", "(", "\n", "model_type", "=", "self", ".", "a_fasttext_model_type", ",", "\n", "device", "=", "self", ".", "a_cpu_device", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", "path_to_retrained_model", "=", "self", ".", "a_fasttext_retrain_model_path", ",", "\n", ")", "\n", "\n", "# Since we train a smaller model, it sometime return EOS, so we manage it by adding the EOS tag", "\n", "formatted_parsed_address", ".", "FIELDS", "=", "self", ".", "with_new_prediction_tags", ".", "keys", "(", ")", "\n", "\n", "# We validate that the new settings are loaded", "\n", "parse_address", "=", "fasttext_address_parser", "(", "self", ".", "an_address_to_parse", ")", "\n", "self", ".", "assertIsInstance", "(", "parse_address", ",", "FormattedParsedAddress", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_address_parser_test_gpu.AddressParserIntegrationTestAPITest.test_givenAFasttextAddressParser_whenTestWithNumWorkerAt0_thenTestOccur": [[16, 31], ["deepparse.parser.AddressParser", "test_integration_address_parser_test_gpu.AddressParserIntegrationTestAPITest.training", "deepparse.parser.AddressParser.test", "test_integration_address_parser_test_gpu.AddressParserIntegrationTestAPITest.assertIsNotNone"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.base_retrain.AddressParserRetrainTestCase.training", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.address_parser.AddressParser.test"], ["    ", "def", "test_givenAFasttextAddressParser_whenTestWithNumWorkerAt0_thenTestOccur", "(", "self", ")", ":", "\n", "        ", "address_parser", "=", "AddressParser", "(", "\n", "model_type", "=", "self", ".", "a_fasttext_model_type", ",", "\n", "device", "=", "self", ".", "a_torch_device", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", ")", "\n", "self", ".", "training", "(", "address_parser", ",", "self", ".", "training_container", ",", "self", ".", "a_zero_number_of_workers", ")", "\n", "\n", "performance_after_test", "=", "address_parser", ".", "test", "(", "\n", "self", ".", "test_container", ",", "\n", "batch_size", "=", "self", ".", "a_batch_size", ",", "\n", "num_workers", "=", "self", ".", "a_number_of_workers", ",", "\n", ")", "\n", "\n", "self", ".", "assertIsNotNone", "(", "performance_after_test", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_address_parser_test_gpu.AddressParserIntegrationTestAPITest.test_givenAFasttextAddressParser_whenTestWithNumWorkerGreaterThen0_thenTestOccur": [[32, 49], ["deepparse.parser.AddressParser", "test_integration_address_parser_test_gpu.AddressParserIntegrationTestAPITest.training", "deepparse.parser.AddressParser.test", "test_integration_address_parser_test_gpu.AddressParserIntegrationTestAPITest.assertIsNotNone"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.base_retrain.AddressParserRetrainTestCase.training", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.address_parser.AddressParser.test"], ["", "def", "test_givenAFasttextAddressParser_whenTestWithNumWorkerGreaterThen0_thenTestOccur", "(", "\n", "self", ",", "\n", ")", ":", "\n", "        ", "address_parser", "=", "AddressParser", "(", "\n", "model_type", "=", "self", ".", "a_fasttext_model_type", ",", "\n", "device", "=", "self", ".", "a_torch_device", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", ")", "\n", "self", ".", "training", "(", "address_parser", ",", "self", ".", "training_container", ",", "self", ".", "a_number_of_workers", ")", "\n", "\n", "performance_after_test", "=", "address_parser", ".", "test", "(", "\n", "self", ".", "test_container", ",", "\n", "batch_size", "=", "self", ".", "a_batch_size", ",", "\n", "num_workers", "=", "self", ".", "a_number_of_workers", ",", "\n", ")", "\n", "\n", "self", ".", "assertIsNotNone", "(", "performance_after_test", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_address_parser_test_gpu.AddressParserIntegrationTestAPITest.test_givenAFasttextAddressParser_whenTestMultipleEpochs_thenTestOccurCorrectly": [[50, 68], ["deepparse.parser.AddressParser", "test_integration_address_parser_test_gpu.AddressParserIntegrationTestAPITest.training", "deepparse.parser.AddressParser.test", "test_integration_address_parser_test_gpu.AddressParserIntegrationTestAPITest.assertIsNotNone"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.base_retrain.AddressParserRetrainTestCase.training", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.address_parser.AddressParser.test"], ["", "def", "test_givenAFasttextAddressParser_whenTestMultipleEpochs_thenTestOccurCorrectly", "(", "\n", "self", ",", "\n", ")", ":", "\n", "        ", "address_parser", "=", "AddressParser", "(", "\n", "model_type", "=", "self", ".", "a_fasttext_model_type", ",", "\n", "device", "=", "self", ".", "a_torch_device", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", ")", "\n", "\n", "self", ".", "training", "(", "address_parser", ",", "self", ".", "training_container", ",", "self", ".", "a_number_of_workers", ")", "\n", "\n", "performance_after_test", "=", "address_parser", ".", "test", "(", "\n", "self", ".", "test_container", ",", "\n", "batch_size", "=", "self", ".", "a_batch_size", ",", "\n", "num_workers", "=", "self", ".", "a_number_of_workers", ",", "\n", ")", "\n", "\n", "self", ".", "assertIsNotNone", "(", "performance_after_test", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_address_parser_test_gpu.AddressParserIntegrationTestAPITest.test_givenAFasttextAddressParser_whenTestWithConfig_thenTestOccur": [[69, 85], ["deepparse.parser.AddressParser", "test_integration_address_parser_test_gpu.AddressParserIntegrationTestAPITest.training", "deepparse.parser.AddressParser.test", "test_integration_address_parser_test_gpu.AddressParserIntegrationTestAPITest.assertIsNotNone"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.base_retrain.AddressParserRetrainTestCase.training", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.address_parser.AddressParser.test"], ["", "def", "test_givenAFasttextAddressParser_whenTestWithConfig_thenTestOccur", "(", "self", ")", ":", "\n", "        ", "address_parser", "=", "AddressParser", "(", "\n", "model_type", "=", "self", ".", "a_fasttext_model_type", ",", "\n", "device", "=", "self", ".", "a_torch_device", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", ")", "\n", "\n", "self", ".", "training", "(", "address_parser", ",", "self", ".", "training_container", ",", "self", ".", "a_number_of_workers", ")", "\n", "\n", "performance_after_test", "=", "address_parser", ".", "test", "(", "\n", "self", ".", "test_container", ",", "\n", "batch_size", "=", "self", ".", "a_batch_size", ",", "\n", "num_workers", "=", "self", ".", "a_number_of_workers", ",", "\n", ")", "\n", "\n", "self", ".", "assertIsNotNone", "(", "performance_after_test", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_address_parser_test_gpu.AddressParserIntegrationTestAPITest.test_givenAFasttextAddressParser_whenTestWithConfigWithCallbacks_thenCallbackAreUse": [[86, 120], ["deepparse.parser.AddressParser", "test_integration_address_parser_test_gpu.AddressParserIntegrationTestAPITest.training", "unittest.mock.MagicMock", "deepparse.parser.AddressParser.test", "test_integration_address_parser_test_gpu.AddressParserIntegrationTestAPITest.assertIsNotNone", "unittest.mock.MagicMock.assert_has_calls", "unittest.mock.MagicMock.assert_has_calls", "unittest.mock.MagicMock.assert_not_called", "unittest.mock.call.on_test_begin", "unittest.mock.call.on_test_end"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.base_retrain.AddressParserRetrainTestCase.training", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.address_parser.AddressParser.test"], ["", "def", "test_givenAFasttextAddressParser_whenTestWithConfigWithCallbacks_thenCallbackAreUse", "(", "\n", "self", ",", "\n", ")", ":", "\n", "        ", "address_parser", "=", "AddressParser", "(", "\n", "model_type", "=", "self", ".", "a_fasttext_model_type", ",", "\n", "device", "=", "self", ".", "a_torch_device", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", ")", "\n", "\n", "self", ".", "training", "(", "address_parser", ",", "self", ".", "training_container", ",", "self", ".", "a_number_of_workers", ")", "\n", "\n", "callback_mock", "=", "MagicMock", "(", ")", "\n", "performance_after_test", "=", "address_parser", ".", "test", "(", "\n", "self", ".", "test_container", ",", "\n", "batch_size", "=", "self", ".", "a_batch_size", ",", "\n", "num_workers", "=", "self", ".", "a_number_of_workers", ",", "\n", "callbacks", "=", "[", "callback_mock", "]", ",", "\n", ")", "\n", "\n", "self", ".", "assertIsNotNone", "(", "performance_after_test", ")", "\n", "\n", "callback_test_start_call", "=", "[", "call", ".", "on_test_begin", "(", "{", "}", ")", "]", "\n", "callback_mock", ".", "assert_has_calls", "(", "callback_test_start_call", ")", "\n", "callback_test_end_call", "=", "[", "\n", "call", ".", "on_test_end", "(", "\n", "{", "\n", "\"time\"", ":", "ANY", ",", "\n", "\"test_loss\"", ":", "performance_after_test", "[", "\"test_loss\"", "]", ",", "\n", "\"test_accuracy\"", ":", "performance_after_test", "[", "\"test_accuracy\"", "]", ",", "\n", "}", "\n", ")", "\n", "]", "\n", "callback_mock", ".", "assert_has_calls", "(", "callback_test_end_call", ")", "\n", "callback_mock", ".", "assert_not_called", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_address_parser_test_gpu.AddressParserIntegrationTestAPITest.test_givenAFasttextAddressParser_whenTestWithFasttextCkpt_thenTestOccur": [[121, 137], ["deepparse.parser.AddressParser", "test_integration_address_parser_test_gpu.AddressParserIntegrationTestAPITest.training", "deepparse.parser.AddressParser.test", "test_integration_address_parser_test_gpu.AddressParserIntegrationTestAPITest.assertIsNotNone"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.base_retrain.AddressParserRetrainTestCase.training", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.address_parser.AddressParser.test"], ["", "def", "test_givenAFasttextAddressParser_whenTestWithFasttextCkpt_thenTestOccur", "(", "self", ")", ":", "\n", "        ", "address_parser", "=", "AddressParser", "(", "\n", "model_type", "=", "self", ".", "a_fasttext_model_type", ",", "\n", "device", "=", "self", ".", "a_torch_device", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", ")", "\n", "\n", "self", ".", "training", "(", "address_parser", ",", "self", ".", "training_container", ",", "self", ".", "a_number_of_workers", ")", "\n", "\n", "performance_after_test", "=", "address_parser", ".", "test", "(", "\n", "self", ".", "test_container", ",", "\n", "batch_size", "=", "self", ".", "a_batch_size", ",", "\n", "num_workers", "=", "self", ".", "a_number_of_workers", ",", "\n", ")", "\n", "\n", "self", ".", "assertIsNotNone", "(", "performance_after_test", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_address_parser_test_gpu.AddressParserIntegrationTestAPITest.test_givenAFasttextAddressParser_whenTestWithStrCkpt_thenTestOccur": [[138, 154], ["deepparse.parser.AddressParser", "test_integration_address_parser_test_gpu.AddressParserIntegrationTestAPITest.training", "deepparse.parser.AddressParser.test", "test_integration_address_parser_test_gpu.AddressParserIntegrationTestAPITest.assertIsNotNone"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.base_retrain.AddressParserRetrainTestCase.training", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.address_parser.AddressParser.test"], ["", "def", "test_givenAFasttextAddressParser_whenTestWithStrCkpt_thenTestOccur", "(", "self", ")", ":", "\n", "        ", "address_parser", "=", "AddressParser", "(", "\n", "model_type", "=", "self", ".", "a_fasttext_model_type", ",", "\n", "device", "=", "self", ".", "a_torch_device", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", ")", "\n", "\n", "self", ".", "training", "(", "address_parser", ",", "self", ".", "training_container", ",", "self", ".", "a_number_of_workers", ")", "\n", "\n", "performance_after_test", "=", "address_parser", ".", "test", "(", "\n", "self", ".", "test_container", ",", "\n", "batch_size", "=", "self", ".", "a_batch_size", ",", "\n", "num_workers", "=", "self", ".", "a_number_of_workers", ",", "\n", ")", "\n", "\n", "self", ".", "assertIsNotNone", "(", "performance_after_test", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_address_parser_test_gpu.AddressParserIntegrationTestAPITest.test_givenABPEmbAddressParser_whenTestWithNumWorkerAt0_thenTestOccur": [[155, 170], ["deepparse.parser.AddressParser", "test_integration_address_parser_test_gpu.AddressParserIntegrationTestAPITest.training", "deepparse.parser.AddressParser.test", "test_integration_address_parser_test_gpu.AddressParserIntegrationTestAPITest.assertIsNotNone"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.base_retrain.AddressParserRetrainTestCase.training", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.address_parser.AddressParser.test"], ["", "def", "test_givenABPEmbAddressParser_whenTestWithNumWorkerAt0_thenTestOccur", "(", "self", ")", ":", "\n", "        ", "address_parser", "=", "AddressParser", "(", "\n", "model_type", "=", "self", ".", "a_bpemb_model_type", ",", "\n", "device", "=", "self", ".", "a_torch_device", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", ")", "\n", "self", ".", "training", "(", "address_parser", ",", "self", ".", "training_container", ",", "self", ".", "a_zero_number_of_workers", ")", "\n", "\n", "performance_after_test", "=", "address_parser", ".", "test", "(", "\n", "self", ".", "test_container", ",", "\n", "batch_size", "=", "self", ".", "a_batch_size", ",", "\n", "num_workers", "=", "self", ".", "a_number_of_workers", ",", "\n", ")", "\n", "\n", "self", ".", "assertIsNotNone", "(", "performance_after_test", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_address_parser_test_gpu.AddressParserIntegrationTestAPITest.test_givenABPEmbAddressParser_whenTestWithNumWorkerGreaterThen0_thenTestOccur": [[171, 188], ["deepparse.parser.AddressParser", "test_integration_address_parser_test_gpu.AddressParserIntegrationTestAPITest.training", "deepparse.parser.AddressParser.test", "test_integration_address_parser_test_gpu.AddressParserIntegrationTestAPITest.assertIsNotNone"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.base_retrain.AddressParserRetrainTestCase.training", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.address_parser.AddressParser.test"], ["", "def", "test_givenABPEmbAddressParser_whenTestWithNumWorkerGreaterThen0_thenTestOccur", "(", "\n", "self", ",", "\n", ")", ":", "\n", "        ", "address_parser", "=", "AddressParser", "(", "\n", "model_type", "=", "self", ".", "a_bpemb_model_type", ",", "\n", "device", "=", "self", ".", "a_torch_device", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", ")", "\n", "self", ".", "training", "(", "address_parser", ",", "self", ".", "training_container", ",", "self", ".", "a_number_of_workers", ")", "\n", "\n", "performance_after_test", "=", "address_parser", ".", "test", "(", "\n", "self", ".", "test_container", ",", "\n", "batch_size", "=", "self", ".", "a_batch_size", ",", "\n", "num_workers", "=", "self", ".", "a_number_of_workers", ",", "\n", ")", "\n", "\n", "self", ".", "assertIsNotNone", "(", "performance_after_test", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_address_parser_test_gpu.AddressParserIntegrationTestAPITest.test_givenABPEmbAddressParser_whenTestMultipleEpochs_thenTestOccurCorrectly": [[189, 207], ["deepparse.parser.AddressParser", "test_integration_address_parser_test_gpu.AddressParserIntegrationTestAPITest.training", "deepparse.parser.AddressParser.test", "test_integration_address_parser_test_gpu.AddressParserIntegrationTestAPITest.assertIsNotNone"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.base_retrain.AddressParserRetrainTestCase.training", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.address_parser.AddressParser.test"], ["", "def", "test_givenABPEmbAddressParser_whenTestMultipleEpochs_thenTestOccurCorrectly", "(", "\n", "self", ",", "\n", ")", ":", "\n", "        ", "address_parser", "=", "AddressParser", "(", "\n", "model_type", "=", "self", ".", "a_bpemb_model_type", ",", "\n", "device", "=", "self", ".", "a_torch_device", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", ")", "\n", "\n", "self", ".", "training", "(", "address_parser", ",", "self", ".", "training_container", ",", "self", ".", "a_number_of_workers", ")", "\n", "\n", "performance_after_test", "=", "address_parser", ".", "test", "(", "\n", "self", ".", "test_container", ",", "\n", "batch_size", "=", "self", ".", "a_batch_size", ",", "\n", "num_workers", "=", "self", ".", "a_number_of_workers", ",", "\n", ")", "\n", "\n", "self", ".", "assertIsNotNone", "(", "performance_after_test", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_address_parser_test_gpu.AddressParserIntegrationTestAPITest.test_givenABPEmbAddressParser_whenTestWithConfig_thenTestOccur": [[208, 224], ["deepparse.parser.AddressParser", "test_integration_address_parser_test_gpu.AddressParserIntegrationTestAPITest.training", "deepparse.parser.AddressParser.test", "test_integration_address_parser_test_gpu.AddressParserIntegrationTestAPITest.assertIsNotNone"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.base_retrain.AddressParserRetrainTestCase.training", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.address_parser.AddressParser.test"], ["", "def", "test_givenABPEmbAddressParser_whenTestWithConfig_thenTestOccur", "(", "self", ")", ":", "\n", "        ", "address_parser", "=", "AddressParser", "(", "\n", "model_type", "=", "self", ".", "a_bpemb_model_type", ",", "\n", "device", "=", "self", ".", "a_torch_device", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", ")", "\n", "\n", "self", ".", "training", "(", "address_parser", ",", "self", ".", "training_container", ",", "self", ".", "a_number_of_workers", ")", "\n", "\n", "performance_after_test", "=", "address_parser", ".", "test", "(", "\n", "self", ".", "test_container", ",", "\n", "batch_size", "=", "self", ".", "a_batch_size", ",", "\n", "num_workers", "=", "self", ".", "a_number_of_workers", ",", "\n", ")", "\n", "\n", "self", ".", "assertIsNotNone", "(", "performance_after_test", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_address_parser_test_gpu.AddressParserIntegrationTestAPITest.test_givenABPEmbAddressParser_whenTestWithConfigWithCallbacks_thenCallbackAreUse": [[225, 259], ["deepparse.parser.AddressParser", "test_integration_address_parser_test_gpu.AddressParserIntegrationTestAPITest.training", "unittest.mock.MagicMock", "deepparse.parser.AddressParser.test", "test_integration_address_parser_test_gpu.AddressParserIntegrationTestAPITest.assertIsNotNone", "unittest.mock.MagicMock.assert_has_calls", "unittest.mock.MagicMock.assert_has_calls", "unittest.mock.MagicMock.assert_not_called", "unittest.mock.call.on_test_begin", "unittest.mock.call.on_test_end"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.base_retrain.AddressParserRetrainTestCase.training", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.address_parser.AddressParser.test"], ["", "def", "test_givenABPEmbAddressParser_whenTestWithConfigWithCallbacks_thenCallbackAreUse", "(", "\n", "self", ",", "\n", ")", ":", "\n", "        ", "address_parser", "=", "AddressParser", "(", "\n", "model_type", "=", "self", ".", "a_bpemb_model_type", ",", "\n", "device", "=", "self", ".", "a_torch_device", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", ")", "\n", "\n", "self", ".", "training", "(", "address_parser", ",", "self", ".", "training_container", ",", "self", ".", "a_number_of_workers", ")", "\n", "\n", "callback_mock", "=", "MagicMock", "(", ")", "\n", "performance_after_test", "=", "address_parser", ".", "test", "(", "\n", "self", ".", "test_container", ",", "\n", "batch_size", "=", "self", ".", "a_batch_size", ",", "\n", "num_workers", "=", "self", ".", "a_number_of_workers", ",", "\n", "callbacks", "=", "[", "callback_mock", "]", ",", "\n", ")", "\n", "\n", "self", ".", "assertIsNotNone", "(", "performance_after_test", ")", "\n", "\n", "callback_test_start_call", "=", "[", "call", ".", "on_test_begin", "(", "{", "}", ")", "]", "\n", "callback_mock", ".", "assert_has_calls", "(", "callback_test_start_call", ")", "\n", "callback_test_end_call", "=", "[", "\n", "call", ".", "on_test_end", "(", "\n", "{", "\n", "\"time\"", ":", "ANY", ",", "\n", "\"test_loss\"", ":", "performance_after_test", "[", "\"test_loss\"", "]", ",", "\n", "\"test_accuracy\"", ":", "performance_after_test", "[", "\"test_accuracy\"", "]", ",", "\n", "}", "\n", ")", "\n", "]", "\n", "callback_mock", ".", "assert_has_calls", "(", "callback_test_end_call", ")", "\n", "callback_mock", ".", "assert_not_called", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_address_parser_test_gpu.AddressParserIntegrationTestAPITest.test_givenABPEmbAddressParser_whenTestWithBPEmbCkpt_thenTestOccur": [[260, 276], ["deepparse.parser.AddressParser", "test_integration_address_parser_test_gpu.AddressParserIntegrationTestAPITest.training", "deepparse.parser.AddressParser.test", "test_integration_address_parser_test_gpu.AddressParserIntegrationTestAPITest.assertIsNotNone"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.base_retrain.AddressParserRetrainTestCase.training", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.address_parser.AddressParser.test"], ["", "def", "test_givenABPEmbAddressParser_whenTestWithBPEmbCkpt_thenTestOccur", "(", "self", ")", ":", "\n", "        ", "address_parser", "=", "AddressParser", "(", "\n", "model_type", "=", "self", ".", "a_bpemb_model_type", ",", "\n", "device", "=", "self", ".", "a_torch_device", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", ")", "\n", "\n", "self", ".", "training", "(", "address_parser", ",", "self", ".", "training_container", ",", "self", ".", "a_number_of_workers", ")", "\n", "\n", "performance_after_test", "=", "address_parser", ".", "test", "(", "\n", "self", ".", "test_container", ",", "\n", "batch_size", "=", "self", ".", "a_batch_size", ",", "\n", "num_workers", "=", "self", ".", "a_number_of_workers", ",", "\n", ")", "\n", "\n", "self", ".", "assertIsNotNone", "(", "performance_after_test", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_address_parser_test_gpu.AddressParserIntegrationTestAPITest.test_givenABPEmbAddressParser_whenTestWithStrCkpt_thenTestOccur": [[277, 293], ["deepparse.parser.AddressParser", "test_integration_address_parser_test_gpu.AddressParserIntegrationTestAPITest.training", "deepparse.parser.AddressParser.test", "test_integration_address_parser_test_gpu.AddressParserIntegrationTestAPITest.assertIsNotNone"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.base_retrain.AddressParserRetrainTestCase.training", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.address_parser.AddressParser.test"], ["", "def", "test_givenABPEmbAddressParser_whenTestWithStrCkpt_thenTestOccur", "(", "self", ")", ":", "\n", "        ", "address_parser", "=", "AddressParser", "(", "\n", "model_type", "=", "self", ".", "a_bpemb_model_type", ",", "\n", "device", "=", "self", ".", "a_torch_device", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", ")", "\n", "\n", "self", ".", "training", "(", "address_parser", ",", "self", ".", "training_container", ",", "self", ".", "a_number_of_workers", ")", "\n", "\n", "performance_after_test", "=", "address_parser", ".", "test", "(", "\n", "self", ".", "test_container", ",", "\n", "batch_size", "=", "self", ".", "a_batch_size", ",", "\n", "num_workers", "=", "self", ".", "a_number_of_workers", ",", "\n", ")", "\n", "\n", "self", ".", "assertIsNotNone", "(", "performance_after_test", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.base_predict.AddressParserBase.setUpClass": [[18, 21], ["None"], "methods", ["None"], ["    ", "@", "classmethod", "\n", "def", "setUpClass", "(", "cls", ")", ":", "\n", "        ", "cls", ".", "an_address_to_parse", "=", "\"350 rue des lilas o\"", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.base_predict.AddressParserBase.setup_model_with_config": [[22, 24], ["deepparse.parser.AddressParser"], "methods", ["None"], ["", "def", "setup_model_with_config", "(", "self", ",", "config", ")", ":", "\n", "        ", "self", ".", "a_model", "=", "AddressParser", "(", "**", "config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.base_predict.AddressParserPredictBase.assert_properly_parse": [[27, 32], ["base_predict.AddressParserPredictBase.assertIsInstance", "base_predict.AddressParserPredictBase.assertIsInstance"], "methods", ["None"], ["    ", "def", "assert_properly_parse", "(", "self", ",", "parsed_address", ",", "multiple_address", "=", "False", ")", ":", "\n", "        ", "if", "multiple_address", ":", "\n", "            ", "self", ".", "assertIsInstance", "(", "parsed_address", ",", "List", ")", "\n", "parsed_address", "=", "parsed_address", "[", "0", "]", "\n", "", "self", ".", "assertIsInstance", "(", "parsed_address", ",", "FormattedParsedAddress", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.base_predict.AddressParserPredictBase.tearDown": [[33, 35], ["None"], "methods", ["None"], ["", "def", "tearDown", "(", "self", ")", "->", "None", ":", "\n", "        ", "del", "self", ".", "a_model", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.base_predict.AddressParserPredictNewParamsBase.setUpClass": [[38, 70], ["tempfile.TemporaryDirectory", "os.path.join", "os.makedirs", "deepparse.download_from_url", "deepparse.dataset_container.PickleDatasetContainer", "torch.device", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.deepparse.tools.download_from_url"], ["    ", "@", "classmethod", "\n", "def", "setUpClass", "(", "cls", ")", ":", "\n", "        ", "cls", ".", "an_address_to_parse", "=", "\"350 rue des lilas o\"", "\n", "cls", ".", "temp_dir_obj", "=", "TemporaryDirectory", "(", ")", "\n", "cls", ".", "a_data_saving_dir", "=", "os", ".", "path", ".", "join", "(", "cls", ".", "temp_dir_obj", ".", "name", ",", "\"data\"", ")", "\n", "os", ".", "makedirs", "(", "cls", ".", "a_data_saving_dir", ",", "exist_ok", "=", "True", ")", "\n", "file_extension", "=", "\"p\"", "\n", "training_dataset_name", "=", "\"sample_incomplete_data\"", "\n", "download_from_url", "(", "training_dataset_name", ",", "cls", ".", "a_data_saving_dir", ",", "file_extension", "=", "file_extension", ")", "\n", "\n", "cls", ".", "training_container", "=", "PickleDatasetContainer", "(", "\n", "os", ".", "path", ".", "join", "(", "cls", ".", "a_data_saving_dir", ",", "training_dataset_name", "+", "\".\"", "+", "file_extension", ")", "\n", ")", "\n", "\n", "cls", ".", "a_fasttext_model_type", "=", "\"fasttext\"", "\n", "cls", ".", "a_bpemb_model_type", "=", "\"bpemb\"", "\n", "\n", "cls", ".", "verbose", "=", "False", "\n", "\n", "# training constant", "\n", "cls", ".", "a_single_epoch", "=", "1", "\n", "cls", ".", "a_train_ratio", "=", "0.8", "\n", "cls", ".", "a_batch_size", "=", "128", "\n", "cls", ".", "a_number_of_workers", "=", "2", "\n", "cls", ".", "a_learning_rate", "=", "0.001", "\n", "\n", "cls", ".", "a_torch_device", "=", "torch", ".", "device", "(", "\"cuda:0\"", ")", "\n", "cls", ".", "a_cpu_device", "=", "\"cpu\"", "\n", "\n", "cls", ".", "seq2seq_params", "=", "{", "\"encoder_hidden_size\"", ":", "512", ",", "\"decoder_hidden_size\"", ":", "512", "}", "\n", "\n", "cls", ".", "retrain_file_name_format", "=", "\"retrained_{}_address_parser\"", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.base_predict.AddressParserPredictNewParamsBase.setUp": [[71, 81], ["tempfile.TemporaryDirectory", "os.path.join", "os.path.join", "os.path.join", "base_predict.AddressParserPredictNewParamsBase.retrain_file_name_format.format", "base_predict.AddressParserPredictNewParamsBase.retrain_file_name_format.format"], "methods", ["None"], ["", "def", "setUp", "(", "self", ")", "->", "None", ":", "\n", "        ", "self", ".", "training_temp_dir_obj", "=", "TemporaryDirectory", "(", ")", "\n", "self", ".", "a_checkpoints_saving_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "training_temp_dir_obj", ".", "name", ",", "\"checkpoints\"", ")", "\n", "self", ".", "a_fasttext_retrain_model_path", "=", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "a_checkpoints_saving_dir", ",", "\n", "self", ".", "retrain_file_name_format", ".", "format", "(", "\"fasttext\"", ")", "+", "\".ckpt\"", ",", "\n", ")", "\n", "self", ".", "a_bpemb_retrain_model_path", "=", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "a_checkpoints_saving_dir", ",", "\n", "self", ".", "retrain_file_name_format", ".", "format", "(", "\"bpemb\"", ")", "+", "\".ckpt\"", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.base_predict.AddressParserPredictNewParamsBase.tearDownClass": [[83, 86], ["cls.temp_dir_obj.cleanup"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "tearDownClass", "(", "cls", ")", "->", "None", ":", "\n", "        ", "cls", ".", "temp_dir_obj", ".", "cleanup", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.base_predict.AddressParserPredictNewParamsBase.tearDown": [[87, 89], ["base_predict.AddressParserPredictNewParamsBase.training_temp_dir_obj.cleanup"], "methods", ["None"], ["", "def", "tearDown", "(", "self", ")", "->", "None", ":", "\n", "        ", "self", ".", "training_temp_dir_obj", ".", "cleanup", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.base_predict.AddressParserPredictNewParamsBase.training": [[90, 107], ["address_parser.retrain"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.address_parser.AddressParser.retrain"], ["", "def", "training", "(", "\n", "self", ",", "\n", "address_parser", ":", "AddressParser", ",", "\n", "data_container", ":", "DatasetContainer", ",", "\n", "num_workers", ":", "int", ",", "\n", "prediction_tags", "=", "None", ",", "\n", "seq2seq_params", "=", "None", ",", "\n", ")", ":", "\n", "        ", "address_parser", ".", "retrain", "(", "\n", "data_container", ",", "\n", "self", ".", "a_train_ratio", ",", "\n", "epochs", "=", "self", ".", "a_single_epoch", ",", "\n", "batch_size", "=", "self", ".", "a_batch_size", ",", "\n", "num_workers", "=", "num_workers", ",", "\n", "logging_path", "=", "self", ".", "a_checkpoints_saving_dir", ",", "\n", "prediction_tags", "=", "prediction_tags", ",", "\n", "seq2seq_params", "=", "seq2seq_params", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_address_parser_retrain_freeze_layers.AddressParserIntegrationTestFreezeLayers.assert_layer_frozen": [[17, 21], ["model_part.parameters", "test_integration_address_parser_retrain_freeze_layers.AddressParserIntegrationTestFreezeLayers.assertFalse"], "methods", ["None"], ["    ", "def", "assert_layer_frozen", "(", "self", ",", "model_part", ")", ":", "\n", "# A frozen layer does not requires grad", "\n", "        ", "for", "param", "in", "model_part", ".", "parameters", "(", ")", ":", "\n", "            ", "self", ".", "assertFalse", "(", "param", ".", "requires_grad", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_address_parser_retrain_freeze_layers.AddressParserIntegrationTestFreezeLayers.assert_layer_not_frozen": [[22, 26], ["model_part.parameters", "test_integration_address_parser_retrain_freeze_layers.AddressParserIntegrationTestFreezeLayers.assertTrue"], "methods", ["None"], ["", "", "def", "assert_layer_not_frozen", "(", "self", ",", "model_part", ")", ":", "\n", "# A frozen layer does requires grad", "\n", "        ", "for", "param", "in", "model_part", ".", "parameters", "(", ")", ":", "\n", "            ", "self", ".", "assertTrue", "(", "param", ".", "requires_grad", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_address_parser_retrain_freeze_layers.AddressParserIntegrationTestFreezeLayers.test_givenEncoderToFreeze_thenFreezeLayer": [[27, 46], ["deepparse.parser.AddressParser", "deepparse.parser.AddressParser.retrain", "test_integration_address_parser_retrain_freeze_layers.AddressParserIntegrationTestFreezeLayers.assert_layer_frozen", "test_integration_address_parser_retrain_freeze_layers.AddressParserIntegrationTestFreezeLayers.assert_layer_not_frozen", "test_integration_address_parser_retrain_freeze_layers.AddressParserIntegrationTestFreezeLayers.assert_layer_not_frozen"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.address_parser.AddressParser.retrain", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_address_parser_retrain_freeze_layers.AddressParserIntegrationTestFreezeLayers.assert_layer_frozen", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_address_parser_retrain_freeze_layers.AddressParserIntegrationTestFreezeLayers.assert_layer_not_frozen", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_address_parser_retrain_freeze_layers.AddressParserIntegrationTestFreezeLayers.assert_layer_not_frozen"], ["", "", "def", "test_givenEncoderToFreeze_thenFreezeLayer", "(", "self", ")", ":", "\n", "        ", "address_parser", "=", "AddressParser", "(", "\n", "model_type", "=", "self", ".", "a_fasttext_model_type", ",", "\n", "device", "=", "self", ".", "a_cpu_device", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", ")", "\n", "address_parser", ".", "retrain", "(", "\n", "self", ".", "training_container", ",", "\n", "self", ".", "a_train_ratio", ",", "\n", "epochs", "=", "self", ".", "a_single_epoch", ",", "\n", "batch_size", "=", "self", ".", "a_batch_size", ",", "\n", "num_workers", "=", "self", ".", "a_number_of_workers", ",", "\n", "logging_path", "=", "self", ".", "a_checkpoints_saving_dir", ",", "\n", "layers_to_freeze", "=", "\"encoder\"", ",", "\n", ")", "\n", "\n", "self", ".", "assert_layer_frozen", "(", "address_parser", ".", "model", ".", "encoder", ".", "lstm", ")", "\n", "self", ".", "assert_layer_not_frozen", "(", "address_parser", ".", "model", ".", "decoder", ".", "lstm", ")", "\n", "self", ".", "assert_layer_not_frozen", "(", "address_parser", ".", "model", ".", "decoder", ".", "linear", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_address_parser_retrain_freeze_layers.AddressParserIntegrationTestFreezeLayers.test_givenDecoderToFreeze_thenFreezeLayer": [[47, 66], ["deepparse.parser.AddressParser", "deepparse.parser.AddressParser.retrain", "test_integration_address_parser_retrain_freeze_layers.AddressParserIntegrationTestFreezeLayers.assert_layer_not_frozen", "test_integration_address_parser_retrain_freeze_layers.AddressParserIntegrationTestFreezeLayers.assert_layer_frozen", "test_integration_address_parser_retrain_freeze_layers.AddressParserIntegrationTestFreezeLayers.assert_layer_not_frozen"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.address_parser.AddressParser.retrain", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_address_parser_retrain_freeze_layers.AddressParserIntegrationTestFreezeLayers.assert_layer_not_frozen", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_address_parser_retrain_freeze_layers.AddressParserIntegrationTestFreezeLayers.assert_layer_frozen", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_address_parser_retrain_freeze_layers.AddressParserIntegrationTestFreezeLayers.assert_layer_not_frozen"], ["", "def", "test_givenDecoderToFreeze_thenFreezeLayer", "(", "self", ")", ":", "\n", "        ", "address_parser", "=", "AddressParser", "(", "\n", "model_type", "=", "self", ".", "a_fasttext_model_type", ",", "\n", "device", "=", "self", ".", "a_cpu_device", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", ")", "\n", "address_parser", ".", "retrain", "(", "\n", "self", ".", "training_container", ",", "\n", "self", ".", "a_train_ratio", ",", "\n", "epochs", "=", "self", ".", "a_single_epoch", ",", "\n", "batch_size", "=", "self", ".", "a_batch_size", ",", "\n", "num_workers", "=", "self", ".", "a_number_of_workers", ",", "\n", "logging_path", "=", "self", ".", "a_checkpoints_saving_dir", ",", "\n", "layers_to_freeze", "=", "\"decoder\"", ",", "\n", ")", "\n", "\n", "self", ".", "assert_layer_not_frozen", "(", "address_parser", ".", "model", ".", "encoder", ".", "lstm", ")", "\n", "self", ".", "assert_layer_frozen", "(", "address_parser", ".", "model", ".", "decoder", ".", "lstm", ")", "\n", "self", ".", "assert_layer_not_frozen", "(", "address_parser", ".", "model", ".", "decoder", ".", "linear", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_address_parser_retrain_freeze_layers.AddressParserIntegrationTestFreezeLayers.test_givenDecoderBPEmbToFreeze_thenFreezeEmbeddingsLayer": [[67, 84], ["deepparse.parser.AddressParser", "deepparse.parser.AddressParser.retrain", "test_integration_address_parser_retrain_freeze_layers.AddressParserIntegrationTestFreezeLayers.assert_layer_frozen"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.address_parser.AddressParser.retrain", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_address_parser_retrain_freeze_layers.AddressParserIntegrationTestFreezeLayers.assert_layer_frozen"], ["", "def", "test_givenDecoderBPEmbToFreeze_thenFreezeEmbeddingsLayer", "(", "self", ")", ":", "\n", "        ", "address_parser", "=", "AddressParser", "(", "\n", "model_type", "=", "self", ".", "a_bpemb_model_type", ",", "\n", "device", "=", "self", ".", "a_cpu_device", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", ")", "\n", "address_parser", ".", "retrain", "(", "\n", "self", ".", "training_container", ",", "\n", "self", ".", "a_train_ratio", ",", "\n", "epochs", "=", "self", ".", "a_single_epoch", ",", "\n", "batch_size", "=", "self", ".", "a_batch_size", ",", "\n", "num_workers", "=", "self", ".", "a_number_of_workers", ",", "\n", "logging_path", "=", "self", ".", "a_checkpoints_saving_dir", ",", "\n", "layers_to_freeze", "=", "\"decoder\"", ",", "\n", ")", "\n", "\n", "self", ".", "assert_layer_frozen", "(", "address_parser", ".", "model", ".", "embedding_network", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_address_parser_retrain_freeze_layers.AddressParserIntegrationTestFreezeLayers.test_givenSeq2SeqToFreeze_thenFreezeLayer": [[85, 104], ["deepparse.parser.AddressParser", "deepparse.parser.AddressParser.retrain", "test_integration_address_parser_retrain_freeze_layers.AddressParserIntegrationTestFreezeLayers.assert_layer_frozen", "test_integration_address_parser_retrain_freeze_layers.AddressParserIntegrationTestFreezeLayers.assert_layer_frozen", "test_integration_address_parser_retrain_freeze_layers.AddressParserIntegrationTestFreezeLayers.assert_layer_not_frozen"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.address_parser.AddressParser.retrain", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_address_parser_retrain_freeze_layers.AddressParserIntegrationTestFreezeLayers.assert_layer_frozen", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_address_parser_retrain_freeze_layers.AddressParserIntegrationTestFreezeLayers.assert_layer_frozen", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_address_parser_retrain_freeze_layers.AddressParserIntegrationTestFreezeLayers.assert_layer_not_frozen"], ["", "def", "test_givenSeq2SeqToFreeze_thenFreezeLayer", "(", "self", ")", ":", "\n", "        ", "address_parser", "=", "AddressParser", "(", "\n", "model_type", "=", "self", ".", "a_fasttext_model_type", ",", "\n", "device", "=", "self", ".", "a_cpu_device", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", ")", "\n", "address_parser", ".", "retrain", "(", "\n", "self", ".", "training_container", ",", "\n", "self", ".", "a_train_ratio", ",", "\n", "epochs", "=", "self", ".", "a_single_epoch", ",", "\n", "batch_size", "=", "self", ".", "a_batch_size", ",", "\n", "num_workers", "=", "self", ".", "a_number_of_workers", ",", "\n", "logging_path", "=", "self", ".", "a_checkpoints_saving_dir", ",", "\n", "layers_to_freeze", "=", "\"seq2seq\"", ",", "\n", ")", "\n", "\n", "self", ".", "assert_layer_frozen", "(", "address_parser", ".", "model", ".", "encoder", ".", "lstm", ")", "\n", "self", ".", "assert_layer_frozen", "(", "address_parser", ".", "model", ".", "decoder", ".", "lstm", ")", "\n", "self", ".", "assert_layer_not_frozen", "(", "address_parser", ".", "model", ".", "decoder", ".", "linear", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_address_parser_retrain_freeze_layers.AddressParserIntegrationTestFreezeLayers.test_givenSeq2SeqBPEmbToFreeze_thenFreezeEmbeddingsLayer": [[105, 122], ["deepparse.parser.AddressParser", "deepparse.parser.AddressParser.retrain", "test_integration_address_parser_retrain_freeze_layers.AddressParserIntegrationTestFreezeLayers.assert_layer_frozen"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.address_parser.AddressParser.retrain", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_address_parser_retrain_freeze_layers.AddressParserIntegrationTestFreezeLayers.assert_layer_frozen"], ["", "def", "test_givenSeq2SeqBPEmbToFreeze_thenFreezeEmbeddingsLayer", "(", "self", ")", ":", "\n", "        ", "address_parser", "=", "AddressParser", "(", "\n", "model_type", "=", "self", ".", "a_bpemb_model_type", ",", "\n", "device", "=", "self", ".", "a_cpu_device", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", ")", "\n", "address_parser", ".", "retrain", "(", "\n", "self", ".", "training_container", ",", "\n", "self", ".", "a_train_ratio", ",", "\n", "epochs", "=", "self", ".", "a_single_epoch", ",", "\n", "batch_size", "=", "self", ".", "a_batch_size", ",", "\n", "num_workers", "=", "self", ".", "a_number_of_workers", ",", "\n", "logging_path", "=", "self", ".", "a_checkpoints_saving_dir", ",", "\n", "layers_to_freeze", "=", "\"seq2seq\"", ",", "\n", ")", "\n", "\n", "self", ".", "assert_layer_frozen", "(", "address_parser", ".", "model", ".", "embedding_network", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_address_parser_retrain_freeze_layers.AddressParserIntegrationTestFreezeLayers.test_givenLinearToFreeze_thenFreezeLayer": [[123, 142], ["deepparse.parser.AddressParser", "deepparse.parser.AddressParser.retrain", "test_integration_address_parser_retrain_freeze_layers.AddressParserIntegrationTestFreezeLayers.assert_layer_not_frozen", "test_integration_address_parser_retrain_freeze_layers.AddressParserIntegrationTestFreezeLayers.assert_layer_not_frozen", "test_integration_address_parser_retrain_freeze_layers.AddressParserIntegrationTestFreezeLayers.assert_layer_frozen"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.address_parser.AddressParser.retrain", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_address_parser_retrain_freeze_layers.AddressParserIntegrationTestFreezeLayers.assert_layer_not_frozen", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_address_parser_retrain_freeze_layers.AddressParserIntegrationTestFreezeLayers.assert_layer_not_frozen", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_address_parser_retrain_freeze_layers.AddressParserIntegrationTestFreezeLayers.assert_layer_frozen"], ["", "def", "test_givenLinearToFreeze_thenFreezeLayer", "(", "self", ")", ":", "\n", "        ", "address_parser", "=", "AddressParser", "(", "\n", "model_type", "=", "self", ".", "a_fasttext_model_type", ",", "\n", "device", "=", "self", ".", "a_cpu_device", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", ")", "\n", "address_parser", ".", "retrain", "(", "\n", "self", ".", "training_container", ",", "\n", "self", ".", "a_train_ratio", ",", "\n", "epochs", "=", "self", ".", "a_single_epoch", ",", "\n", "batch_size", "=", "self", ".", "a_batch_size", ",", "\n", "num_workers", "=", "self", ".", "a_number_of_workers", ",", "\n", "logging_path", "=", "self", ".", "a_checkpoints_saving_dir", ",", "\n", "layers_to_freeze", "=", "\"prediction_layer\"", ",", "\n", ")", "\n", "\n", "self", ".", "assert_layer_not_frozen", "(", "address_parser", ".", "model", ".", "encoder", ".", "lstm", ")", "\n", "self", ".", "assert_layer_not_frozen", "(", "address_parser", ".", "model", ".", "decoder", ".", "lstm", ")", "\n", "self", ".", "assert_layer_frozen", "(", "address_parser", ".", "model", ".", "decoder", ".", "linear", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_address_parser_retrain_cpu.AddressParserIntegrationRetrainTest.test_givenAFasttextAddressParser_whenRetrain_thenTrainingOccur": [[22, 39], ["deepparse.parser.AddressParser", "deepparse.parser.AddressParser.retrain", "test_integration_address_parser_retrain_cpu.AddressParserIntegrationRetrainTest.assertIsNotNone"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.address_parser.AddressParser.retrain"], ["    ", "def", "test_givenAFasttextAddressParser_whenRetrain_thenTrainingOccur", "(", "self", ")", ":", "\n", "        ", "address_parser", "=", "AddressParser", "(", "\n", "model_type", "=", "self", ".", "a_fasttext_model_type", ",", "\n", "device", "=", "self", ".", "a_cpu_device", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", ")", "\n", "\n", "performance_after_training", "=", "address_parser", ".", "retrain", "(", "\n", "self", ".", "training_container", ",", "\n", "self", ".", "a_train_ratio", ",", "\n", "epochs", "=", "self", ".", "a_single_epoch", ",", "\n", "batch_size", "=", "self", ".", "a_batch_size", ",", "\n", "num_workers", "=", "self", ".", "a_number_of_workers", ",", "\n", "logging_path", "=", "self", ".", "a_checkpoints_saving_dir", ",", "\n", ")", "\n", "\n", "self", ".", "assertIsNotNone", "(", "performance_after_training", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_address_parser_retrain_cpu.AddressParserIntegrationRetrainTest.test_givenAnAddressParser_whenRetrainWithPoutyne17andBefore_thenTrainingOccurWithAWarningPrint": [[40, 69], ["unittest.mock.patch", "test_integration_address_parser_retrain_cpu.AddressParserIntegrationRetrainTest._capture_output", "deepparse.parser.AddressParser", "deepparse.parser.AddressParser.retrain", "test_integration_address_parser_retrain_cpu.AddressParserIntegrationRetrainTest.test_out.getvalue", "test_integration_address_parser_retrain_cpu.AddressParserIntegrationRetrainTest.assertEqual"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.tests.base_capture_output.CaptureOutputTestCase._capture_output", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.address_parser.AddressParser.retrain"], ["", "@", "patch", "(", "\"deepparse.tools.poutyne\"", ")", "\n", "def", "test_givenAnAddressParser_whenRetrainWithPoutyne17andBefore_thenTrainingOccurWithAWarningPrint", "(", "\n", "self", ",", "poutyne_mock", "\n", ")", ":", "\n", "        ", "poutyne_mock", ".", "version", ".", "__version__", "=", "\"1.7\"", "\n", "self", ".", "_capture_output", "(", ")", "\n", "address_parser", "=", "AddressParser", "(", "\n", "model_type", "=", "self", ".", "a_fasttext_model_type", ",", "\n", "device", "=", "self", ".", "a_cpu_device", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", ")", "\n", "\n", "address_parser", ".", "retrain", "(", "\n", "self", ".", "training_container", ",", "\n", "self", ".", "a_train_ratio", ",", "\n", "epochs", "=", "self", ".", "a_single_epoch", ",", "\n", "batch_size", "=", "self", ".", "a_batch_size", ",", "\n", "num_workers", "=", "self", ".", "a_number_of_workers", ",", "\n", "logging_path", "=", "self", ".", "a_checkpoints_saving_dir", ",", "\n", ")", "\n", "\n", "actual", "=", "self", ".", "test_out", ".", "getvalue", "(", ")", "\n", "\n", "expected", "=", "(", "\n", "\"You are using a older version of Poutyne that does not support properly error management.\"", "\n", "\" Due to that, we cannot show retrain progress. To fix that, update Poutyne to the newest version.\\n\"", "\n", ")", "\n", "\n", "self", ".", "assertEqual", "(", "actual", ",", "expected", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_address_parser_retrain_cpu.AddressParserIntegrationRetrainTest.test_givenAnAddressParser_whenRetrainWithPoutyne18andAfter_thenTrainingOccurWithoutAWarningPrint": [[70, 100], ["unittest.mock.patch", "test_integration_address_parser_retrain_cpu.AddressParserIntegrationRetrainTest._capture_output", "deepparse.parser.AddressParser", "deepparse.parser.AddressParser.retrain", "test_integration_address_parser_retrain_cpu.AddressParserIntegrationRetrainTest.test_out.getvalue", "test_integration_address_parser_retrain_cpu.AddressParserIntegrationRetrainTest.assertNotRegex"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.tests.base_capture_output.CaptureOutputTestCase._capture_output", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.address_parser.AddressParser.retrain"], ["", "@", "patch", "(", "\"deepparse.tools.poutyne\"", ")", "\n", "def", "test_givenAnAddressParser_whenRetrainWithPoutyne18andAfter_thenTrainingOccurWithoutAWarningPrint", "(", "\n", "self", ",", "poutyne_mock", "\n", ")", ":", "\n", "        ", "poutyne_mock", ".", "version", ".", "__version__", "=", "\"1.8\"", "\n", "self", ".", "_capture_output", "(", ")", "\n", "address_parser", "=", "AddressParser", "(", "\n", "model_type", "=", "self", ".", "a_fasttext_model_type", ",", "\n", "device", "=", "self", ".", "a_cpu_device", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", ")", "\n", "\n", "address_parser", ".", "retrain", "(", "\n", "self", ".", "training_container", ",", "\n", "self", ".", "a_train_ratio", ",", "\n", "epochs", "=", "self", ".", "a_single_epoch", ",", "\n", "batch_size", "=", "self", ".", "a_batch_size", ",", "\n", "num_workers", "=", "self", ".", "a_number_of_workers", ",", "\n", "logging_path", "=", "self", ".", "a_checkpoints_saving_dir", ",", "\n", ")", "\n", "\n", "actual", "=", "self", ".", "test_out", ".", "getvalue", "(", ")", "\n", "\n", "not_expected", "=", "(", "\n", "\"You are using a older version of Poutyne that does not support properly error management.\"", "\n", "\" Due to that, we cannot show retrain progress. To fix that, update Poutyne to the newest \"", "\n", "\"version.\\n\"", "\n", ")", "\n", "\n", "self", ".", "assertNotRegex", "(", "actual", ",", "not_expected", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_address_parser_retrain_cpu.AddressParserIntegrationRetrainTest.test_givenAnAddressParser_whenRetrainWithPoutyne111andAfter_thenTrainingOccurWithoutAWarningPrint": [[101, 131], ["unittest.mock.patch", "test_integration_address_parser_retrain_cpu.AddressParserIntegrationRetrainTest._capture_output", "deepparse.parser.AddressParser", "deepparse.parser.AddressParser.retrain", "test_integration_address_parser_retrain_cpu.AddressParserIntegrationRetrainTest.test_out.getvalue", "test_integration_address_parser_retrain_cpu.AddressParserIntegrationRetrainTest.assertNotRegex"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.tests.base_capture_output.CaptureOutputTestCase._capture_output", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.address_parser.AddressParser.retrain"], ["", "@", "patch", "(", "\"deepparse.tools.poutyne\"", ")", "\n", "def", "test_givenAnAddressParser_whenRetrainWithPoutyne111andAfter_thenTrainingOccurWithoutAWarningPrint", "(", "\n", "self", ",", "poutyne_mock", "\n", ")", ":", "\n", "        ", "poutyne_mock", ".", "version", ".", "__version__", "=", "\"1.11\"", "\n", "self", ".", "_capture_output", "(", ")", "\n", "address_parser", "=", "AddressParser", "(", "\n", "model_type", "=", "self", ".", "a_fasttext_model_type", ",", "\n", "device", "=", "self", ".", "a_cpu_device", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", ")", "\n", "\n", "address_parser", ".", "retrain", "(", "\n", "self", ".", "training_container", ",", "\n", "self", ".", "a_train_ratio", ",", "\n", "epochs", "=", "self", ".", "a_single_epoch", ",", "\n", "batch_size", "=", "self", ".", "a_batch_size", ",", "\n", "num_workers", "=", "self", ".", "a_number_of_workers", ",", "\n", "logging_path", "=", "self", ".", "a_checkpoints_saving_dir", ",", "\n", ")", "\n", "\n", "actual", "=", "self", ".", "test_out", ".", "getvalue", "(", ")", "\n", "\n", "not_expected", "=", "(", "\n", "\"You are using a older version of Poutyne that does not support properly error management.\"", "\n", "\" Due to that, we cannot show retrain progress. To fix that, update Poutyne to the newest \"", "\n", "\"version.\\n\"", "\n", ")", "\n", "\n", "self", ".", "assertNotRegex", "(", "actual", ",", "not_expected", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_address_parser_retrain_cpu.AddressParserIntegrationRetrainTest.test_givenAnAddressParser_whenRetrainWithPoutyne2_thenTrainingOccurWithoutAWarningPrint": [[132, 160], ["unittest.mock.patch", "test_integration_address_parser_retrain_cpu.AddressParserIntegrationRetrainTest._capture_output", "deepparse.parser.AddressParser", "deepparse.parser.AddressParser.retrain", "test_integration_address_parser_retrain_cpu.AddressParserIntegrationRetrainTest.test_out.getvalue", "test_integration_address_parser_retrain_cpu.AddressParserIntegrationRetrainTest.assertNotRegex"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.tests.base_capture_output.CaptureOutputTestCase._capture_output", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.address_parser.AddressParser.retrain"], ["", "@", "patch", "(", "\"deepparse.tools.poutyne\"", ")", "\n", "def", "test_givenAnAddressParser_whenRetrainWithPoutyne2_thenTrainingOccurWithoutAWarningPrint", "(", "self", ",", "poutyne_mock", ")", ":", "\n", "        ", "poutyne_mock", ".", "version", ".", "__version__", "=", "\"2.0\"", "\n", "self", ".", "_capture_output", "(", ")", "\n", "address_parser", "=", "AddressParser", "(", "\n", "model_type", "=", "self", ".", "a_fasttext_model_type", ",", "\n", "device", "=", "self", ".", "a_cpu_device", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", ")", "\n", "\n", "address_parser", ".", "retrain", "(", "\n", "self", ".", "training_container", ",", "\n", "self", ".", "a_train_ratio", ",", "\n", "epochs", "=", "self", ".", "a_single_epoch", ",", "\n", "batch_size", "=", "self", ".", "a_batch_size", ",", "\n", "num_workers", "=", "self", ".", "a_number_of_workers", ",", "\n", "logging_path", "=", "self", ".", "a_checkpoints_saving_dir", ",", "\n", ")", "\n", "\n", "actual", "=", "self", ".", "test_out", ".", "getvalue", "(", ")", "\n", "\n", "not_expected", "=", "(", "\n", "\"You are using a older version of Poutyne that does not support properly error management.\"", "\n", "\" Due to that, we cannot show retrain progress. To fix that, update Poutyne to the newest \"", "\n", "\"version.\\n\"", "\n", ")", "\n", "\n", "self", ".", "assertNotRegex", "(", "actual", ",", "not_expected", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_address_parser_retrain_cpu.AddressParserIntegrationRetrainTest.test_givenAFasttextAddressParser_whenRetrainMultipleEpochs_thenTrainingOccurCorrectly": [[161, 180], ["deepparse.parser.AddressParser", "deepparse.parser.AddressParser.retrain", "test_integration_address_parser_retrain_cpu.AddressParserIntegrationRetrainTest.assertIsNotNone"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.address_parser.AddressParser.retrain"], ["", "def", "test_givenAFasttextAddressParser_whenRetrainMultipleEpochs_thenTrainingOccurCorrectly", "(", "\n", "self", ",", "\n", ")", ":", "\n", "        ", "address_parser", "=", "AddressParser", "(", "\n", "model_type", "=", "self", ".", "a_fasttext_model_type", ",", "\n", "device", "=", "self", ".", "a_cpu_device", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", ")", "\n", "\n", "performance_after_training", "=", "address_parser", ".", "retrain", "(", "\n", "self", ".", "training_container", ",", "\n", "self", ".", "a_train_ratio", ",", "\n", "epochs", "=", "self", ".", "a_three_epoch", ",", "\n", "batch_size", "=", "self", ".", "a_batch_size", ",", "\n", "num_workers", "=", "self", ".", "a_number_of_workers", ",", "\n", "logging_path", "=", "self", ".", "a_checkpoints_saving_dir", ",", "\n", ")", "\n", "\n", "self", ".", "assertIsNotNone", "(", "performance_after_training", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_address_parser_retrain_cpu.AddressParserIntegrationRetrainTest.test_givenAFasttextAddressParser_whenRetrainWithConfig_thenTrainingOccur": [[181, 199], ["deepparse.parser.AddressParser", "deepparse.parser.AddressParser.retrain", "test_integration_address_parser_retrain_cpu.AddressParserIntegrationRetrainTest.assertIsNotNone"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.address_parser.AddressParser.retrain"], ["", "def", "test_givenAFasttextAddressParser_whenRetrainWithConfig_thenTrainingOccur", "(", "self", ")", ":", "\n", "        ", "address_parser", "=", "AddressParser", "(", "\n", "model_type", "=", "self", ".", "a_fasttext_model_type", ",", "\n", "device", "=", "self", ".", "a_cpu_device", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", ")", "\n", "\n", "performance_after_training", "=", "address_parser", ".", "retrain", "(", "\n", "self", ".", "training_container", ",", "\n", "self", ".", "a_train_ratio", ",", "\n", "epochs", "=", "self", ".", "a_single_epoch", ",", "\n", "batch_size", "=", "self", ".", "a_batch_size", ",", "\n", "num_workers", "=", "self", ".", "a_number_of_workers", ",", "\n", "learning_rate", "=", "self", ".", "a_learning_rate", ",", "\n", "logging_path", "=", "self", ".", "a_checkpoints_saving_dir", ",", "\n", ")", "\n", "\n", "self", ".", "assertIsNotNone", "(", "performance_after_training", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_address_parser_retrain_cpu.AddressParserIntegrationRetrainTest.test_givenAFasttextAddressParser_whenRetrainWithConfigWithCallbacks_thenCallbackAreUse": [[200, 228], ["deepparse.parser.AddressParser", "unittest.mock.MagicMock", "deepparse.parser.AddressParser.retrain", "test_integration_address_parser_retrain_cpu.AddressParserIntegrationRetrainTest.assertIsNotNone", "unittest.mock.MagicMock.assert_has_calls", "unittest.mock.MagicMock.assert_has_calls", "unittest.mock.MagicMock.assert_not_called", "unittest.mock.call.on_train_begin", "unittest.mock.call.on_train_end"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.address_parser.AddressParser.retrain"], ["", "def", "test_givenAFasttextAddressParser_whenRetrainWithConfigWithCallbacks_thenCallbackAreUse", "(", "\n", "self", ",", "\n", ")", ":", "\n", "        ", "address_parser", "=", "AddressParser", "(", "\n", "model_type", "=", "self", ".", "a_fasttext_model_type", ",", "\n", "device", "=", "self", ".", "a_cpu_device", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", ")", "\n", "\n", "callback_mock", "=", "MagicMock", "(", "spec", "=", "Callback", ")", "\n", "performance_after_training", "=", "address_parser", ".", "retrain", "(", "\n", "self", ".", "training_container", ",", "\n", "self", ".", "a_train_ratio", ",", "\n", "epochs", "=", "self", ".", "a_single_epoch", ",", "\n", "batch_size", "=", "self", ".", "a_batch_size", ",", "\n", "num_workers", "=", "self", ".", "a_number_of_workers", ",", "\n", "learning_rate", "=", "self", ".", "a_learning_rate", ",", "\n", "callbacks", "=", "[", "callback_mock", "]", ",", "\n", "logging_path", "=", "self", ".", "a_checkpoints_saving_dir", ",", "\n", ")", "\n", "\n", "self", ".", "assertIsNotNone", "(", "performance_after_training", ")", "\n", "\n", "callback_train_start_call", "=", "[", "call", ".", "on_train_begin", "(", "{", "}", ")", "]", "\n", "callback_mock", ".", "assert_has_calls", "(", "callback_train_start_call", ")", "\n", "callback_train_end_call", "=", "[", "call", ".", "on_train_end", "(", "{", "}", ")", "]", "\n", "callback_mock", ".", "assert_has_calls", "(", "callback_train_end_call", ")", "\n", "callback_mock", ".", "assert_not_called", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_address_parser_retrain_cpu.AddressParserIntegrationRetrainTest.test_givenAFasttextLightAddressParser_whenRetrain_thenTrainingDoesNotOccur": [[229, 245], ["deepparse.parser.AddressParser", "test_integration_address_parser_retrain_cpu.AddressParserIntegrationRetrainTest.assertRaises", "deepparse.parser.AddressParser.retrain"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.address_parser.AddressParser.retrain"], ["", "def", "test_givenAFasttextLightAddressParser_whenRetrain_thenTrainingDoesNotOccur", "(", "\n", "self", ",", "\n", ")", ":", "\n", "        ", "address_parser", "=", "AddressParser", "(", "\n", "model_type", "=", "self", ".", "a_fasttext_light_model_type", ",", "\n", "device", "=", "self", ".", "a_cpu_device", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", ")", "\n", "with", "self", ".", "assertRaises", "(", "ValueError", ")", ":", "\n", "            ", "address_parser", ".", "retrain", "(", "\n", "self", ".", "training_container", ",", "\n", "self", ".", "a_train_ratio", ",", "\n", "epochs", "=", "self", ".", "a_single_epoch", ",", "\n", "batch_size", "=", "self", ".", "a_batch_size", ",", "\n", "num_workers", "=", "self", ".", "a_number_of_workers", ",", "\n", "logging_path", "=", "self", ".", "a_checkpoints_saving_dir", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_address_parser_retrain_cpu.AddressParserIntegrationRetrainTest.test_givenABPEmbAddressParser_whenRetrain_thenTrainingOccur": [[247, 264], ["deepparse.parser.AddressParser", "deepparse.parser.AddressParser.retrain", "test_integration_address_parser_retrain_cpu.AddressParserIntegrationRetrainTest.assertIsNotNone"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.address_parser.AddressParser.retrain"], ["", "", "def", "test_givenABPEmbAddressParser_whenRetrain_thenTrainingOccur", "(", "self", ")", ":", "\n", "        ", "address_parser", "=", "AddressParser", "(", "\n", "model_type", "=", "self", ".", "a_bpemb_model_type", ",", "\n", "device", "=", "self", ".", "a_cpu_device", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", ")", "\n", "\n", "performance_after_training", "=", "address_parser", ".", "retrain", "(", "\n", "self", ".", "training_container", ",", "\n", "self", ".", "a_train_ratio", ",", "\n", "epochs", "=", "self", ".", "a_single_epoch", ",", "\n", "batch_size", "=", "self", ".", "a_batch_size", ",", "\n", "num_workers", "=", "self", ".", "a_number_of_workers", ",", "\n", "logging_path", "=", "self", ".", "a_checkpoints_saving_dir", ",", "\n", ")", "\n", "\n", "self", ".", "assertIsNotNone", "(", "performance_after_training", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_address_parser_retrain_cpu.AddressParserIntegrationRetrainTest.test_givenABPEmbAddressParser_whenRetrainMultipleEpochs_thenTrainingOccurCorrectly": [[265, 284], ["deepparse.parser.AddressParser", "deepparse.parser.AddressParser.retrain", "test_integration_address_parser_retrain_cpu.AddressParserIntegrationRetrainTest.assertIsNotNone"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.address_parser.AddressParser.retrain"], ["", "def", "test_givenABPEmbAddressParser_whenRetrainMultipleEpochs_thenTrainingOccurCorrectly", "(", "\n", "self", ",", "\n", ")", ":", "\n", "        ", "address_parser", "=", "AddressParser", "(", "\n", "model_type", "=", "self", ".", "a_bpemb_model_type", ",", "\n", "device", "=", "self", ".", "a_cpu_device", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", ")", "\n", "\n", "performance_after_training", "=", "address_parser", ".", "retrain", "(", "\n", "self", ".", "training_container", ",", "\n", "self", ".", "a_train_ratio", ",", "\n", "epochs", "=", "self", ".", "a_three_epoch", ",", "\n", "batch_size", "=", "self", ".", "a_batch_size", ",", "\n", "num_workers", "=", "self", ".", "a_number_of_workers", ",", "\n", "logging_path", "=", "self", ".", "a_checkpoints_saving_dir", ",", "\n", ")", "\n", "\n", "self", ".", "assertIsNotNone", "(", "performance_after_training", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_address_parser_retrain_cpu.AddressParserIntegrationRetrainTest.test_givenABPEmbAddressParser_whenRetrainWithConfig_thenTrainingOccur": [[285, 303], ["deepparse.parser.AddressParser", "deepparse.parser.AddressParser.retrain", "test_integration_address_parser_retrain_cpu.AddressParserIntegrationRetrainTest.assertIsNotNone"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.address_parser.AddressParser.retrain"], ["", "def", "test_givenABPEmbAddressParser_whenRetrainWithConfig_thenTrainingOccur", "(", "self", ")", ":", "\n", "        ", "address_parser", "=", "AddressParser", "(", "\n", "model_type", "=", "self", ".", "a_bpemb_model_type", ",", "\n", "device", "=", "self", ".", "a_cpu_device", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", ")", "\n", "\n", "performance_after_training", "=", "address_parser", ".", "retrain", "(", "\n", "self", ".", "training_container", ",", "\n", "self", ".", "a_train_ratio", ",", "\n", "epochs", "=", "self", ".", "a_single_epoch", ",", "\n", "batch_size", "=", "self", ".", "a_batch_size", ",", "\n", "num_workers", "=", "self", ".", "a_number_of_workers", ",", "\n", "learning_rate", "=", "self", ".", "a_learning_rate", ",", "\n", "logging_path", "=", "self", ".", "a_checkpoints_saving_dir", ",", "\n", ")", "\n", "\n", "self", ".", "assertIsNotNone", "(", "performance_after_training", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_address_parser_retrain_cpu.AddressParserIntegrationRetrainTest.test_givenABPEmbAddressParser_whenRetrainWithConfigWithCallbacks_thenCallbackAreUse": [[304, 332], ["deepparse.parser.AddressParser", "unittest.mock.MagicMock", "deepparse.parser.AddressParser.retrain", "test_integration_address_parser_retrain_cpu.AddressParserIntegrationRetrainTest.assertIsNotNone", "unittest.mock.MagicMock.assert_has_calls", "unittest.mock.MagicMock.assert_has_calls", "unittest.mock.MagicMock.assert_not_called", "unittest.mock.call.on_train_begin", "unittest.mock.call.on_train_end"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.address_parser.AddressParser.retrain"], ["", "def", "test_givenABPEmbAddressParser_whenRetrainWithConfigWithCallbacks_thenCallbackAreUse", "(", "\n", "self", ",", "\n", ")", ":", "\n", "        ", "address_parser", "=", "AddressParser", "(", "\n", "model_type", "=", "self", ".", "a_bpemb_model_type", ",", "\n", "device", "=", "self", ".", "a_cpu_device", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", ")", "\n", "\n", "callback_mock", "=", "MagicMock", "(", "spec", "=", "Callback", ")", "\n", "performance_after_training", "=", "address_parser", ".", "retrain", "(", "\n", "self", ".", "training_container", ",", "\n", "self", ".", "a_train_ratio", ",", "\n", "epochs", "=", "self", ".", "a_single_epoch", ",", "\n", "batch_size", "=", "self", ".", "a_batch_size", ",", "\n", "num_workers", "=", "self", ".", "a_number_of_workers", ",", "\n", "learning_rate", "=", "self", ".", "a_learning_rate", ",", "\n", "callbacks", "=", "[", "callback_mock", "]", ",", "\n", "logging_path", "=", "self", ".", "a_checkpoints_saving_dir", ",", "\n", ")", "\n", "\n", "self", ".", "assertIsNotNone", "(", "performance_after_training", ")", "\n", "\n", "callback_train_start_call", "=", "[", "call", ".", "on_train_begin", "(", "{", "}", ")", "]", "\n", "callback_mock", ".", "assert_has_calls", "(", "callback_train_start_call", ")", "\n", "callback_train_end_call", "=", "[", "call", ".", "on_train_end", "(", "{", "}", ")", "]", "\n", "callback_mock", ".", "assert_has_calls", "(", "callback_train_end_call", ")", "\n", "callback_mock", ".", "assert_not_called", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_address_parser_new_params.AddressParserPredictTest.test_givenAAddress_whenParseNewParamsFastTextCPU_thenParseAddressProperly": [[16, 53], ["deepparse.parser.AddressParser", "test_integration_address_parser_new_params.AddressParserPredictTest.training", "deepparse.parser.AddressParser", "deepparse.parser.AddressParser.", "test_integration_address_parser_new_params.AddressParserPredictTest.assertIsInstance"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.base_retrain.AddressParserRetrainTestCase.training"], ["    ", "def", "test_givenAAddress_whenParseNewParamsFastTextCPU_thenParseAddressProperly", "(", "self", ")", ":", "\n", "# Training setup", "\n", "        ", "fasttext_address_parser", "=", "AddressParser", "(", "\n", "model_type", "=", "self", ".", "a_fasttext_model_type", ",", "\n", "device", "=", "self", ".", "a_cpu_device", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", ")", "\n", "self", ".", "training", "(", "\n", "fasttext_address_parser", ",", "\n", "self", ".", "training_container", ",", "\n", "self", ".", "a_number_of_workers", ",", "\n", "seq2seq_params", "=", "self", ".", "seq2seq_params", ",", "\n", ")", "\n", "\n", "# Test", "\n", "fasttext_address_parser", "=", "AddressParser", "(", "\n", "model_type", "=", "self", ".", "a_fasttext_model_type", ",", "\n", "device", "=", "self", ".", "a_cpu_device", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", "path_to_retrained_model", "=", "self", ".", "a_fasttext_retrain_model_path", ",", "\n", ")", "\n", "\n", "# Since we train a smaller model, it sometime return EOS, so we manage it by adding the EOS tag", "\n", "formatted_parsed_address", ".", "FIELDS", "=", "[", "\n", "\"StreetNumber\"", ",", "\n", "\"Unit\"", ",", "\n", "\"StreetName\"", ",", "\n", "\"Orientation\"", ",", "\n", "\"Municipality\"", ",", "\n", "\"Province\"", ",", "\n", "\"PostalCode\"", ",", "\n", "\"GeneralDelivery\"", ",", "\n", "\"EOS\"", ",", "\n", "]", "\n", "# We validate that the new settings are loaded and we can parse", "\n", "parse_address", "=", "fasttext_address_parser", "(", "self", ".", "an_address_to_parse", ")", "\n", "self", ".", "assertIsInstance", "(", "parse_address", ",", "FormattedParsedAddress", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_address_parser_new_params.AddressParserPredictTest.test_givenAAddress_whenParseNewParamsFastTextGPU_thenParseAddressProperly": [[54, 91], ["deepparse.parser.AddressParser", "test_integration_address_parser_new_params.AddressParserPredictTest.training", "deepparse.parser.AddressParser", "deepparse.parser.AddressParser.", "test_integration_address_parser_new_params.AddressParserPredictTest.assertIsInstance"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.base_retrain.AddressParserRetrainTestCase.training"], ["", "def", "test_givenAAddress_whenParseNewParamsFastTextGPU_thenParseAddressProperly", "(", "self", ")", ":", "\n", "# Training setup", "\n", "        ", "fasttext_address_parser", "=", "AddressParser", "(", "\n", "model_type", "=", "self", ".", "a_fasttext_model_type", ",", "\n", "device", "=", "self", ".", "a_torch_device", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", ")", "\n", "self", ".", "training", "(", "\n", "fasttext_address_parser", ",", "\n", "self", ".", "training_container", ",", "\n", "self", ".", "a_number_of_workers", ",", "\n", "seq2seq_params", "=", "self", ".", "seq2seq_params", ",", "\n", ")", "\n", "\n", "# Test", "\n", "fasttext_address_parser", "=", "AddressParser", "(", "\n", "model_type", "=", "self", ".", "a_fasttext_model_type", ",", "\n", "device", "=", "self", ".", "a_cpu_device", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", "path_to_retrained_model", "=", "self", ".", "a_fasttext_retrain_model_path", ",", "\n", ")", "\n", "\n", "# Since we train a smaller model, it sometime return EOS, so we manage it by adding the EOS tag", "\n", "formatted_parsed_address", ".", "FIELDS", "=", "[", "\n", "\"StreetNumber\"", ",", "\n", "\"Unit\"", ",", "\n", "\"StreetName\"", ",", "\n", "\"Orientation\"", ",", "\n", "\"Municipality\"", ",", "\n", "\"Province\"", ",", "\n", "\"PostalCode\"", ",", "\n", "\"GeneralDelivery\"", ",", "\n", "\"EOS\"", ",", "\n", "]", "\n", "# We validate that the new settings are loaded and we can parse", "\n", "parse_address", "=", "fasttext_address_parser", "(", "self", ".", "an_address_to_parse", ")", "\n", "self", ".", "assertIsInstance", "(", "parse_address", ",", "FormattedParsedAddress", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_address_parser_new_params.AddressParserPredictTest.test_givenAAddress_whenParseNewParamsBPEmbCPU_thenParseAddressProperly": [[92, 130], ["deepparse.parser.AddressParser", "test_integration_address_parser_new_params.AddressParserPredictTest.training", "deepparse.parser.AddressParser", "deepparse.parser.AddressParser.", "test_integration_address_parser_new_params.AddressParserPredictTest.assertIsInstance"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.base_retrain.AddressParserRetrainTestCase.training"], ["", "def", "test_givenAAddress_whenParseNewParamsBPEmbCPU_thenParseAddressProperly", "(", "self", ")", ":", "\n", "# Training setup", "\n", "        ", "bpemb_address_parser", "=", "AddressParser", "(", "\n", "model_type", "=", "self", ".", "a_bpemb_model_type", ",", "\n", "device", "=", "self", ".", "a_cpu_device", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", ")", "\n", "self", ".", "training", "(", "\n", "bpemb_address_parser", ",", "\n", "self", ".", "training_container", ",", "\n", "self", ".", "a_number_of_workers", ",", "\n", "seq2seq_params", "=", "self", ".", "seq2seq_params", ",", "\n", ")", "\n", "\n", "# Test", "\n", "bpemb_address_parser", "=", "AddressParser", "(", "\n", "model_type", "=", "self", ".", "a_bpemb_model_type", ",", "\n", "device", "=", "self", ".", "a_cpu_device", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", "path_to_retrained_model", "=", "self", ".", "a_bpemb_retrain_model_path", ",", "\n", ")", "\n", "\n", "# Since we train a smaller model, it sometime return EOS, so we manage it by adding the EOS tag", "\n", "formatted_parsed_address", ".", "FIELDS", "=", "[", "\n", "\"StreetNumber\"", ",", "\n", "\"Unit\"", ",", "\n", "\"StreetName\"", ",", "\n", "\"Orientation\"", ",", "\n", "\"Municipality\"", ",", "\n", "\"Province\"", ",", "\n", "\"PostalCode\"", ",", "\n", "\"GeneralDelivery\"", ",", "\n", "\"EOS\"", ",", "\n", "]", "\n", "\n", "# We validate that the new settings are loaded", "\n", "parse_address", "=", "bpemb_address_parser", "(", "self", ".", "an_address_to_parse", ")", "\n", "self", ".", "assertIsInstance", "(", "parse_address", ",", "FormattedParsedAddress", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_address_parser_new_params.AddressParserPredictTest.test_givenAAddress_whenParseNewParamsBPEmbGPU_thenParseAddressProperly": [[131, 169], ["deepparse.parser.AddressParser", "test_integration_address_parser_new_params.AddressParserPredictTest.training", "deepparse.parser.AddressParser", "deepparse.parser.AddressParser.", "test_integration_address_parser_new_params.AddressParserPredictTest.assertIsInstance"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.base_retrain.AddressParserRetrainTestCase.training"], ["", "def", "test_givenAAddress_whenParseNewParamsBPEmbGPU_thenParseAddressProperly", "(", "self", ")", ":", "\n", "# Training setup", "\n", "        ", "bpemb_address_parser", "=", "AddressParser", "(", "\n", "model_type", "=", "self", ".", "a_bpemb_model_type", ",", "\n", "device", "=", "self", ".", "a_torch_device", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", ")", "\n", "self", ".", "training", "(", "\n", "bpemb_address_parser", ",", "\n", "self", ".", "training_container", ",", "\n", "self", ".", "a_number_of_workers", ",", "\n", "seq2seq_params", "=", "self", ".", "seq2seq_params", ",", "\n", ")", "\n", "\n", "# Test", "\n", "bpemb_address_parser", "=", "AddressParser", "(", "\n", "model_type", "=", "self", ".", "a_bpemb_model_type", ",", "\n", "device", "=", "self", ".", "a_torch_device", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", "path_to_retrained_model", "=", "self", ".", "a_bpemb_retrain_model_path", ",", "\n", ")", "\n", "\n", "# Since we train a smaller model, it sometime return EOS, so we manage it by adding the EOS tag", "\n", "formatted_parsed_address", ".", "FIELDS", "=", "[", "\n", "\"StreetNumber\"", ",", "\n", "\"Unit\"", ",", "\n", "\"StreetName\"", ",", "\n", "\"Orientation\"", ",", "\n", "\"Municipality\"", ",", "\n", "\"Province\"", ",", "\n", "\"PostalCode\"", ",", "\n", "\"GeneralDelivery\"", ",", "\n", "\"EOS\"", ",", "\n", "]", "\n", "\n", "# We validate that the new settings are loaded", "\n", "parse_address", "=", "bpemb_address_parser", "(", "self", ".", "an_address_to_parse", ")", "\n", "self", ".", "assertIsInstance", "(", "parse_address", ",", "FormattedParsedAddress", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_reload_retrain_parser.AddressParserIntegrationTestAPITest.setUpClass": [[18, 22], ["super().setUpClass", "cls.download_pre_trained_weights"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_seq2seq_fasttext_model_gpu.FastTextSeq2SeqIntegrationTest.setUpClass", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.base.PretrainedWeightsBase.download_pre_trained_weights"], ["    ", "@", "classmethod", "\n", "def", "setUpClass", "(", "cls", ")", ":", "\n", "        ", "super", "(", "AddressParserIntegrationTestAPITest", ",", "cls", ")", ".", "setUpClass", "(", ")", "\n", "cls", ".", "download_pre_trained_weights", "(", "cls", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_reload_retrain_parser.AddressParserIntegrationTestAPITest.test_integration_parsing_with_retrain_fasttext": [[23, 29], ["deepparse.parser.AddressParser", "test_integration_reload_retrain_parser.AddressParserIntegrationTestAPITest.assertEqual"], "methods", ["None"], ["", "def", "test_integration_parsing_with_retrain_fasttext", "(", "self", ")", ":", "\n", "        ", "model_type", "=", "\"fasttext\"", "\n", "path_to_retrained_model", "=", "self", ".", "path_to_retrain_fasttext", "\n", "\n", "address_parser", "=", "AddressParser", "(", "model_type", "=", "model_type", ",", "path_to_retrained_model", "=", "path_to_retrained_model", ")", "\n", "self", ".", "assertEqual", "(", "model_type", ",", "address_parser", ".", "model_type", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_reload_retrain_parser.AddressParserIntegrationTestAPITest.test_integration_parsing_with_retrain_bpemb": [[30, 36], ["deepparse.parser.AddressParser", "test_integration_reload_retrain_parser.AddressParserIntegrationTestAPITest.assertEqual"], "methods", ["None"], ["", "def", "test_integration_parsing_with_retrain_bpemb", "(", "self", ")", ":", "\n", "        ", "model_type", "=", "\"bpemb\"", "\n", "path_to_retrained_model", "=", "self", ".", "path_to_retrain_bpemb", "\n", "\n", "address_parser", "=", "AddressParser", "(", "model_type", "=", "model_type", ",", "path_to_retrained_model", "=", "path_to_retrained_model", ")", "\n", "self", ".", "assertEqual", "(", "model_type", ",", "address_parser", ".", "model_type", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_reload_retrain_parser.AddressParserIntegrationTestAPITest.test_integration_parsing_with_retrain_named_model": [[37, 47], ["deepparse.parser.AddressParser", "test_integration_reload_retrain_parser.AddressParserIntegrationTestAPITest.assertEqual", "str", "test_integration_reload_retrain_parser.AddressParserIntegrationTestAPITest.assertEqual"], "methods", ["None"], ["", "def", "test_integration_parsing_with_retrain_named_model", "(", "self", ")", ":", "\n", "        ", "model_type", "=", "\"fasttext\"", "# Base architecture of the named model is a FastText", "\n", "path_to_retrained_model", "=", "self", ".", "path_to_named_model", "\n", "\n", "address_parser", "=", "AddressParser", "(", "model_type", "=", "model_type", ",", "path_to_retrained_model", "=", "path_to_retrained_model", ")", "\n", "self", ".", "assertEqual", "(", "model_type", ",", "address_parser", ".", "model_type", ")", "\n", "\n", "expected_name", "=", "\"MyModelNewName\"", "\n", "actual_name", "=", "str", "(", "address_parser", ")", "\n", "self", ".", "assertEqual", "(", "expected_name", ",", "actual_name", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_address_parser_retrain_new_address_components.AddressParserIntegrationTestNewTags.setUpClass": [[23, 33], ["super().setUpClass", "deepparse.download_from_url", "deepparse.dataset_container.PickleDatasetContainer", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_seq2seq_fasttext_model_gpu.FastTextSeq2SeqIntegrationTest.setUpClass", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.deepparse.tools.download_from_url"], ["    ", "@", "classmethod", "\n", "def", "setUpClass", "(", "cls", ")", ":", "\n", "        ", "super", "(", "AddressParserIntegrationTestNewTags", ",", "cls", ")", ".", "setUpClass", "(", ")", "\n", "\n", "file_extension", "=", "\"p\"", "\n", "training_dataset_name", "=", "\"test_sample_data_new_prediction_tags\"", "\n", "download_from_url", "(", "training_dataset_name", ",", "cls", ".", "a_data_saving_dir", ",", "file_extension", "=", "file_extension", ")", "\n", "\n", "cls", ".", "new_prediction_data_container", "=", "PickleDatasetContainer", "(", "\n", "os", ".", "path", ".", "join", "(", "cls", ".", "a_data_saving_dir", ",", "training_dataset_name", "+", "\".\"", "+", "file_extension", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_address_parser_retrain_new_address_components.AddressParserIntegrationTestNewTags.test_givenAFasttextAddressParser_whenRetrainNewTags_thenTrainingOccur": [[36, 54], ["deepparse.parser.AddressParser", "deepparse.parser.AddressParser.retrain", "test_integration_address_parser_retrain_new_address_components.AddressParserIntegrationTestNewTags.assertIsNotNone"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.address_parser.AddressParser.retrain"], ["", "def", "test_givenAFasttextAddressParser_whenRetrainNewTags_thenTrainingOccur", "(", "self", ")", ":", "\n", "        ", "address_parser", "=", "AddressParser", "(", "\n", "model_type", "=", "self", ".", "a_fasttext_model_type", ",", "\n", "device", "=", "self", ".", "a_cpu_device", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", ")", "\n", "\n", "performance_after_training", "=", "address_parser", ".", "retrain", "(", "\n", "self", ".", "new_prediction_data_container", ",", "\n", "self", ".", "a_train_ratio", ",", "\n", "epochs", "=", "self", ".", "a_single_epoch", ",", "\n", "batch_size", "=", "self", ".", "a_batch_size", ",", "\n", "num_workers", "=", "self", ".", "a_number_of_workers", ",", "\n", "logging_path", "=", "self", ".", "a_checkpoints_saving_dir", ",", "\n", "prediction_tags", "=", "self", ".", "with_new_prediction_tags", ",", "\n", ")", "\n", "\n", "self", ".", "assertIsNotNone", "(", "performance_after_training", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_address_parser_retrain_new_address_components.AddressParserIntegrationTestNewTags.test_givenAFasttextAddressParser_whenRetrainMultipleEpochsNewTags_thenTrainingOccurCorrectly": [[55, 75], ["deepparse.parser.AddressParser", "deepparse.parser.AddressParser.retrain", "test_integration_address_parser_retrain_new_address_components.AddressParserIntegrationTestNewTags.assertIsNotNone"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.address_parser.AddressParser.retrain"], ["", "def", "test_givenAFasttextAddressParser_whenRetrainMultipleEpochsNewTags_thenTrainingOccurCorrectly", "(", "\n", "self", ",", "\n", ")", ":", "\n", "        ", "address_parser", "=", "AddressParser", "(", "\n", "model_type", "=", "self", ".", "a_fasttext_model_type", ",", "\n", "device", "=", "self", ".", "a_cpu_device", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", ")", "\n", "\n", "performance_after_training", "=", "address_parser", ".", "retrain", "(", "\n", "self", ".", "new_prediction_data_container", ",", "\n", "self", ".", "a_train_ratio", ",", "\n", "epochs", "=", "self", ".", "a_three_epoch", ",", "\n", "batch_size", "=", "self", ".", "a_batch_size", ",", "\n", "num_workers", "=", "self", ".", "a_number_of_workers", ",", "\n", "logging_path", "=", "self", ".", "a_checkpoints_saving_dir", ",", "\n", "prediction_tags", "=", "self", ".", "with_new_prediction_tags", ",", "\n", ")", "\n", "\n", "self", ".", "assertIsNotNone", "(", "performance_after_training", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_address_parser_retrain_new_address_components.AddressParserIntegrationTestNewTags.test_givenAFasttextAddressParser_whenRetrainWithConfigNewTags_thenTrainingOccur": [[76, 97], ["deepparse.parser.AddressParser", "deepparse.parser.AddressParser.retrain", "test_integration_address_parser_retrain_new_address_components.AddressParserIntegrationTestNewTags.assertIsNotNone"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.address_parser.AddressParser.retrain"], ["", "def", "test_givenAFasttextAddressParser_whenRetrainWithConfigNewTags_thenTrainingOccur", "(", "\n", "self", ",", "\n", ")", ":", "\n", "        ", "address_parser", "=", "AddressParser", "(", "\n", "model_type", "=", "self", ".", "a_fasttext_model_type", ",", "\n", "device", "=", "self", ".", "a_cpu_device", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", ")", "\n", "\n", "performance_after_training", "=", "address_parser", ".", "retrain", "(", "\n", "self", ".", "new_prediction_data_container", ",", "\n", "self", ".", "a_train_ratio", ",", "\n", "epochs", "=", "self", ".", "a_single_epoch", ",", "\n", "batch_size", "=", "self", ".", "a_batch_size", ",", "\n", "num_workers", "=", "self", ".", "a_number_of_workers", ",", "\n", "learning_rate", "=", "self", ".", "a_learning_rate", ",", "\n", "logging_path", "=", "self", ".", "a_checkpoints_saving_dir", ",", "\n", "prediction_tags", "=", "self", ".", "with_new_prediction_tags", ",", "\n", ")", "\n", "\n", "self", ".", "assertIsNotNone", "(", "performance_after_training", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_address_parser_retrain_new_address_components.AddressParserIntegrationTestNewTags.test_givenAFasttextAddressParser_whenRetrainWithConfigWithCallbacksNewTags_thenCallbackAreUse": [[98, 127], ["deepparse.parser.AddressParser", "unittest.mock.MagicMock", "deepparse.parser.AddressParser.retrain", "test_integration_address_parser_retrain_new_address_components.AddressParserIntegrationTestNewTags.assertIsNotNone", "unittest.mock.MagicMock.assert_has_calls", "unittest.mock.MagicMock.assert_has_calls", "unittest.mock.MagicMock.assert_not_called", "unittest.mock.call.on_train_begin", "unittest.mock.call.on_train_end"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.address_parser.AddressParser.retrain"], ["", "def", "test_givenAFasttextAddressParser_whenRetrainWithConfigWithCallbacksNewTags_thenCallbackAreUse", "(", "\n", "self", ",", "\n", ")", ":", "\n", "        ", "address_parser", "=", "AddressParser", "(", "\n", "model_type", "=", "self", ".", "a_fasttext_model_type", ",", "\n", "device", "=", "self", ".", "a_cpu_device", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", ")", "\n", "\n", "callback_mock", "=", "MagicMock", "(", "spec", "=", "Callback", ")", "\n", "performance_after_training", "=", "address_parser", ".", "retrain", "(", "\n", "self", ".", "new_prediction_data_container", ",", "\n", "self", ".", "a_train_ratio", ",", "\n", "epochs", "=", "self", ".", "a_single_epoch", ",", "\n", "batch_size", "=", "self", ".", "a_batch_size", ",", "\n", "num_workers", "=", "self", ".", "a_number_of_workers", ",", "\n", "learning_rate", "=", "self", ".", "a_learning_rate", ",", "\n", "callbacks", "=", "[", "callback_mock", "]", ",", "\n", "logging_path", "=", "self", ".", "a_checkpoints_saving_dir", ",", "\n", "prediction_tags", "=", "self", ".", "with_new_prediction_tags", ",", "\n", ")", "\n", "\n", "self", ".", "assertIsNotNone", "(", "performance_after_training", ")", "\n", "\n", "callback_train_start_call", "=", "[", "call", ".", "on_train_begin", "(", "{", "}", ")", "]", "\n", "callback_mock", ".", "assert_has_calls", "(", "callback_train_start_call", ")", "\n", "callback_train_end_call", "=", "[", "call", ".", "on_train_end", "(", "{", "}", ")", "]", "\n", "callback_mock", ".", "assert_has_calls", "(", "callback_train_end_call", ")", "\n", "callback_mock", ".", "assert_not_called", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_address_parser_retrain_new_address_components.AddressParserIntegrationTestNewTags.test_givenAFasttextLightAddressParser_whenRetrainNewTags_thenTrainingDoesNotOccur": [[128, 145], ["deepparse.parser.AddressParser", "test_integration_address_parser_retrain_new_address_components.AddressParserIntegrationTestNewTags.assertRaises", "deepparse.parser.AddressParser.retrain"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.address_parser.AddressParser.retrain"], ["", "def", "test_givenAFasttextLightAddressParser_whenRetrainNewTags_thenTrainingDoesNotOccur", "(", "\n", "self", ",", "\n", ")", ":", "\n", "        ", "address_parser", "=", "AddressParser", "(", "\n", "model_type", "=", "self", ".", "a_fasttext_light_model_type", ",", "\n", "device", "=", "self", ".", "a_cpu_device", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", ")", "\n", "with", "self", ".", "assertRaises", "(", "ValueError", ")", ":", "\n", "            ", "_", "=", "address_parser", ".", "retrain", "(", "\n", "self", ".", "new_prediction_data_container", ",", "\n", "self", ".", "a_train_ratio", ",", "\n", "epochs", "=", "self", ".", "a_single_epoch", ",", "\n", "batch_size", "=", "self", ".", "a_batch_size", ",", "\n", "num_workers", "=", "self", ".", "a_number_of_workers", ",", "\n", "logging_path", "=", "self", ".", "a_checkpoints_saving_dir", ",", "\n", "prediction_tags", "=", "self", ".", "with_new_prediction_tags", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_address_parser_retrain_new_address_components.AddressParserIntegrationTestNewTags.test_givenAddressParser_whenRetrainNewTagsNoEOS_thenTrainingDoesNotOccur": [[147, 162], ["deepparse.parser.AddressParser", "test_integration_address_parser_retrain_new_address_components.AddressParserIntegrationTestNewTags.assertRaises", "deepparse.parser.AddressParser.retrain"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.address_parser.AddressParser.retrain"], ["", "", "def", "test_givenAddressParser_whenRetrainNewTagsNoEOS_thenTrainingDoesNotOccur", "(", "self", ")", ":", "\n", "        ", "address_parser", "=", "AddressParser", "(", "\n", "model_type", "=", "self", ".", "a_fasttext_light_model_type", ",", "\n", "device", "=", "self", ".", "a_cpu_device", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", ")", "\n", "with", "self", ".", "assertRaises", "(", "ValueError", ")", ":", "\n", "            ", "_", "=", "address_parser", ".", "retrain", "(", "\n", "self", ".", "new_prediction_data_container", ",", "\n", "self", ".", "a_train_ratio", ",", "\n", "epochs", "=", "self", ".", "a_single_epoch", ",", "\n", "batch_size", "=", "self", ".", "a_batch_size", ",", "\n", "num_workers", "=", "self", ".", "a_number_of_workers", ",", "\n", "logging_path", "=", "self", ".", "a_checkpoints_saving_dir", ",", "\n", "prediction_tags", "=", "{", "\"ATag\"", ":", "0", "}", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_address_parser_retrain_new_address_components.AddressParserIntegrationTestNewTags.test_givenABPEmbAddressParser_whenRetrainNewTags_thenTrainingOccur": [[164, 182], ["deepparse.parser.AddressParser", "deepparse.parser.AddressParser.retrain", "test_integration_address_parser_retrain_new_address_components.AddressParserIntegrationTestNewTags.assertIsNotNone"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.address_parser.AddressParser.retrain"], ["", "", "def", "test_givenABPEmbAddressParser_whenRetrainNewTags_thenTrainingOccur", "(", "self", ")", ":", "\n", "        ", "address_parser", "=", "AddressParser", "(", "\n", "model_type", "=", "self", ".", "a_bpemb_model_type", ",", "\n", "device", "=", "self", ".", "a_cpu_device", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", ")", "\n", "\n", "performance_after_training", "=", "address_parser", ".", "retrain", "(", "\n", "self", ".", "new_prediction_data_container", ",", "\n", "self", ".", "a_train_ratio", ",", "\n", "epochs", "=", "self", ".", "a_single_epoch", ",", "\n", "batch_size", "=", "self", ".", "a_batch_size", ",", "\n", "num_workers", "=", "self", ".", "a_number_of_workers", ",", "\n", "logging_path", "=", "self", ".", "a_checkpoints_saving_dir", ",", "\n", "prediction_tags", "=", "self", ".", "with_new_prediction_tags", ",", "\n", ")", "\n", "\n", "self", ".", "assertIsNotNone", "(", "performance_after_training", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_address_parser_retrain_new_address_components.AddressParserIntegrationTestNewTags.test_givenABPEmbAddressParser_whenRetrainMultipleEpochsNewTags_thenTrainingOccurCorrectly": [[183, 203], ["deepparse.parser.AddressParser", "deepparse.parser.AddressParser.retrain", "test_integration_address_parser_retrain_new_address_components.AddressParserIntegrationTestNewTags.assertIsNotNone"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.address_parser.AddressParser.retrain"], ["", "def", "test_givenABPEmbAddressParser_whenRetrainMultipleEpochsNewTags_thenTrainingOccurCorrectly", "(", "\n", "self", ",", "\n", ")", ":", "\n", "        ", "address_parser", "=", "AddressParser", "(", "\n", "model_type", "=", "self", ".", "a_bpemb_model_type", ",", "\n", "device", "=", "self", ".", "a_cpu_device", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", ")", "\n", "\n", "performance_after_training", "=", "address_parser", ".", "retrain", "(", "\n", "self", ".", "new_prediction_data_container", ",", "\n", "self", ".", "a_train_ratio", ",", "\n", "epochs", "=", "self", ".", "a_three_epoch", ",", "\n", "batch_size", "=", "self", ".", "a_batch_size", ",", "\n", "num_workers", "=", "self", ".", "a_number_of_workers", ",", "\n", "logging_path", "=", "self", ".", "a_checkpoints_saving_dir", ",", "\n", "prediction_tags", "=", "self", ".", "with_new_prediction_tags", ",", "\n", ")", "\n", "\n", "self", ".", "assertIsNotNone", "(", "performance_after_training", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_address_parser_retrain_new_address_components.AddressParserIntegrationTestNewTags.test_givenABPEmbAddressParser_whenRetrainWithConfigNewTags_thenTrainingOccur": [[204, 225], ["deepparse.parser.AddressParser", "deepparse.parser.AddressParser.retrain", "test_integration_address_parser_retrain_new_address_components.AddressParserIntegrationTestNewTags.assertIsNotNone"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.address_parser.AddressParser.retrain"], ["", "def", "test_givenABPEmbAddressParser_whenRetrainWithConfigNewTags_thenTrainingOccur", "(", "\n", "self", ",", "\n", ")", ":", "\n", "        ", "address_parser", "=", "AddressParser", "(", "\n", "model_type", "=", "self", ".", "a_bpemb_model_type", ",", "\n", "device", "=", "self", ".", "a_cpu_device", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", ")", "\n", "\n", "performance_after_training", "=", "address_parser", ".", "retrain", "(", "\n", "self", ".", "new_prediction_data_container", ",", "\n", "self", ".", "a_train_ratio", ",", "\n", "epochs", "=", "self", ".", "a_single_epoch", ",", "\n", "batch_size", "=", "self", ".", "a_batch_size", ",", "\n", "num_workers", "=", "self", ".", "a_number_of_workers", ",", "\n", "learning_rate", "=", "self", ".", "a_learning_rate", ",", "\n", "logging_path", "=", "self", ".", "a_checkpoints_saving_dir", ",", "\n", "prediction_tags", "=", "self", ".", "with_new_prediction_tags", ",", "\n", ")", "\n", "\n", "self", ".", "assertIsNotNone", "(", "performance_after_training", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_address_parser_retrain_new_address_components.AddressParserIntegrationTestNewTags.test_givenABPEmbAddressParser_whenRetrainWithConfigWithCallbacksNewTags_thenCallbackAreUse": [[226, 255], ["deepparse.parser.AddressParser", "unittest.mock.MagicMock", "deepparse.parser.AddressParser.retrain", "test_integration_address_parser_retrain_new_address_components.AddressParserIntegrationTestNewTags.assertIsNotNone", "unittest.mock.MagicMock.assert_has_calls", "unittest.mock.MagicMock.assert_has_calls", "unittest.mock.MagicMock.assert_not_called", "unittest.mock.call.on_train_begin", "unittest.mock.call.on_train_end"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.address_parser.AddressParser.retrain"], ["", "def", "test_givenABPEmbAddressParser_whenRetrainWithConfigWithCallbacksNewTags_thenCallbackAreUse", "(", "\n", "self", ",", "\n", ")", ":", "\n", "        ", "address_parser", "=", "AddressParser", "(", "\n", "model_type", "=", "self", ".", "a_bpemb_model_type", ",", "\n", "device", "=", "self", ".", "a_cpu_device", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", ")", "\n", "\n", "callback_mock", "=", "MagicMock", "(", "spec", "=", "Callback", ")", "\n", "performance_after_training", "=", "address_parser", ".", "retrain", "(", "\n", "self", ".", "new_prediction_data_container", ",", "\n", "self", ".", "a_train_ratio", ",", "\n", "epochs", "=", "self", ".", "a_single_epoch", ",", "\n", "batch_size", "=", "self", ".", "a_batch_size", ",", "\n", "num_workers", "=", "self", ".", "a_number_of_workers", ",", "\n", "learning_rate", "=", "self", ".", "a_learning_rate", ",", "\n", "callbacks", "=", "[", "callback_mock", "]", ",", "\n", "logging_path", "=", "self", ".", "a_checkpoints_saving_dir", ",", "\n", "prediction_tags", "=", "self", ".", "with_new_prediction_tags", ",", "\n", ")", "\n", "\n", "self", ".", "assertIsNotNone", "(", "performance_after_training", ")", "\n", "\n", "callback_train_start_call", "=", "[", "call", ".", "on_train_begin", "(", "{", "}", ")", "]", "\n", "callback_mock", ".", "assert_has_calls", "(", "callback_train_start_call", ")", "\n", "callback_train_end_call", "=", "[", "call", ".", "on_train_end", "(", "{", "}", ")", "]", "\n", "callback_mock", ".", "assert_has_calls", "(", "callback_train_end_call", ")", "\n", "callback_mock", ".", "assert_not_called", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_address_parser_retrain_new_address_components.AddressParserIntegrationTestNewTags.test_givenAFasttextAddressParser_whenTestWithNumWorkerAt0NewTags_thenTestOccur": [[257, 279], ["deepparse.parser.AddressParser", "test_integration_address_parser_retrain_new_address_components.AddressParserIntegrationTestNewTags.training", "deepparse.parser.AddressParser.test", "test_integration_address_parser_retrain_new_address_components.AddressParserIntegrationTestNewTags.assertIsNotNone"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.base_retrain.AddressParserRetrainTestCase.training", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.address_parser.AddressParser.test"], ["", "def", "test_givenAFasttextAddressParser_whenTestWithNumWorkerAt0NewTags_thenTestOccur", "(", "\n", "self", ",", "\n", ")", ":", "\n", "        ", "address_parser", "=", "AddressParser", "(", "\n", "model_type", "=", "self", ".", "a_fasttext_model_type", ",", "\n", "device", "=", "self", ".", "a_cpu_device", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", ")", "\n", "self", ".", "training", "(", "\n", "address_parser", ",", "\n", "self", ".", "new_prediction_data_container", ",", "\n", "self", ".", "a_zero_number_of_workers", ",", "\n", "prediction_tags", "=", "self", ".", "with_new_prediction_tags", ",", "\n", ")", "\n", "\n", "performance_after_test", "=", "address_parser", ".", "test", "(", "\n", "self", ".", "new_prediction_data_container", ",", "\n", "batch_size", "=", "self", ".", "a_batch_size", ",", "\n", "num_workers", "=", "self", ".", "a_number_of_workers", ",", "\n", ")", "\n", "\n", "self", ".", "assertIsNotNone", "(", "performance_after_test", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_address_parser_retrain_new_address_components.AddressParserIntegrationTestNewTags.test_givenAFasttextAddressParser_whenTestWithNumWorkerGreaterThen0NewTags_thenTestOccur": [[280, 302], ["deepparse.parser.AddressParser", "test_integration_address_parser_retrain_new_address_components.AddressParserIntegrationTestNewTags.training", "deepparse.parser.AddressParser.test", "test_integration_address_parser_retrain_new_address_components.AddressParserIntegrationTestNewTags.assertIsNotNone"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.base_retrain.AddressParserRetrainTestCase.training", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.address_parser.AddressParser.test"], ["", "def", "test_givenAFasttextAddressParser_whenTestWithNumWorkerGreaterThen0NewTags_thenTestOccur", "(", "\n", "self", ",", "\n", ")", ":", "\n", "        ", "address_parser", "=", "AddressParser", "(", "\n", "model_type", "=", "self", ".", "a_fasttext_model_type", ",", "\n", "device", "=", "self", ".", "a_cpu_device", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", ")", "\n", "self", ".", "training", "(", "\n", "address_parser", ",", "\n", "self", ".", "new_prediction_data_container", ",", "\n", "self", ".", "a_number_of_workers", ",", "\n", "prediction_tags", "=", "self", ".", "with_new_prediction_tags", ",", "\n", ")", "\n", "\n", "performance_after_test", "=", "address_parser", ".", "test", "(", "\n", "self", ".", "new_prediction_data_container", ",", "\n", "batch_size", "=", "self", ".", "a_batch_size", ",", "\n", "num_workers", "=", "self", ".", "a_number_of_workers", ",", "\n", ")", "\n", "\n", "self", ".", "assertIsNotNone", "(", "performance_after_test", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_address_parser_retrain_new_address_components.AddressParserIntegrationTestNewTags.test_givenAFasttextAddressParser_whenTestMultipleEpochsNewTags_thenTestOccurCorrectly": [[303, 326], ["deepparse.parser.AddressParser", "test_integration_address_parser_retrain_new_address_components.AddressParserIntegrationTestNewTags.training", "deepparse.parser.AddressParser.test", "test_integration_address_parser_retrain_new_address_components.AddressParserIntegrationTestNewTags.assertIsNotNone"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.base_retrain.AddressParserRetrainTestCase.training", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.address_parser.AddressParser.test"], ["", "def", "test_givenAFasttextAddressParser_whenTestMultipleEpochsNewTags_thenTestOccurCorrectly", "(", "\n", "self", ",", "\n", ")", ":", "\n", "        ", "address_parser", "=", "AddressParser", "(", "\n", "model_type", "=", "self", ".", "a_fasttext_model_type", ",", "\n", "device", "=", "self", ".", "a_cpu_device", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", ")", "\n", "\n", "self", ".", "training", "(", "\n", "address_parser", ",", "\n", "self", ".", "new_prediction_data_container", ",", "\n", "self", ".", "a_number_of_workers", ",", "\n", "prediction_tags", "=", "self", ".", "with_new_prediction_tags", ",", "\n", ")", "\n", "\n", "performance_after_test", "=", "address_parser", ".", "test", "(", "\n", "self", ".", "new_prediction_data_container", ",", "\n", "batch_size", "=", "self", ".", "a_batch_size", ",", "\n", "num_workers", "=", "self", ".", "a_number_of_workers", ",", "\n", ")", "\n", "\n", "self", ".", "assertIsNotNone", "(", "performance_after_test", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_address_parser_retrain_new_address_components.AddressParserIntegrationTestNewTags.test_givenAFasttextAddressParser_whenTestWithConfigNewTags_thenTestOccur": [[327, 348], ["deepparse.parser.AddressParser", "test_integration_address_parser_retrain_new_address_components.AddressParserIntegrationTestNewTags.training", "deepparse.parser.AddressParser.test", "test_integration_address_parser_retrain_new_address_components.AddressParserIntegrationTestNewTags.assertIsNotNone"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.base_retrain.AddressParserRetrainTestCase.training", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.address_parser.AddressParser.test"], ["", "def", "test_givenAFasttextAddressParser_whenTestWithConfigNewTags_thenTestOccur", "(", "self", ")", ":", "\n", "        ", "address_parser", "=", "AddressParser", "(", "\n", "model_type", "=", "self", ".", "a_fasttext_model_type", ",", "\n", "device", "=", "self", ".", "a_cpu_device", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", ")", "\n", "\n", "self", ".", "training", "(", "\n", "address_parser", ",", "\n", "self", ".", "new_prediction_data_container", ",", "\n", "self", ".", "a_number_of_workers", ",", "\n", "prediction_tags", "=", "self", ".", "with_new_prediction_tags", ",", "\n", ")", "\n", "\n", "performance_after_test", "=", "address_parser", ".", "test", "(", "\n", "self", ".", "new_prediction_data_container", ",", "\n", "batch_size", "=", "self", ".", "a_batch_size", ",", "\n", "num_workers", "=", "self", ".", "a_number_of_workers", ",", "\n", ")", "\n", "\n", "self", ".", "assertIsNotNone", "(", "performance_after_test", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_address_parser_retrain_new_address_components.AddressParserIntegrationTestNewTags.test_givenAFasttextAddressParser_whenTestWithConfigWithCallbacksNewTags_thenCallbackAreUse": [[349, 388], ["deepparse.parser.AddressParser", "test_integration_address_parser_retrain_new_address_components.AddressParserIntegrationTestNewTags.training", "unittest.mock.MagicMock", "deepparse.parser.AddressParser.test", "test_integration_address_parser_retrain_new_address_components.AddressParserIntegrationTestNewTags.assertIsNotNone", "unittest.mock.MagicMock.assert_has_calls", "unittest.mock.MagicMock.assert_has_calls", "unittest.mock.MagicMock.assert_not_called", "unittest.mock.call.on_test_begin", "unittest.mock.call.on_test_end"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.base_retrain.AddressParserRetrainTestCase.training", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.address_parser.AddressParser.test"], ["", "def", "test_givenAFasttextAddressParser_whenTestWithConfigWithCallbacksNewTags_thenCallbackAreUse", "(", "\n", "self", ",", "\n", ")", ":", "\n", "        ", "address_parser", "=", "AddressParser", "(", "\n", "model_type", "=", "self", ".", "a_fasttext_model_type", ",", "\n", "device", "=", "self", ".", "a_cpu_device", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", ")", "\n", "\n", "self", ".", "training", "(", "\n", "address_parser", ",", "\n", "self", ".", "new_prediction_data_container", ",", "\n", "self", ".", "a_number_of_workers", ",", "\n", "prediction_tags", "=", "self", ".", "with_new_prediction_tags", ",", "\n", ")", "\n", "\n", "callback_mock", "=", "MagicMock", "(", ")", "\n", "performance_after_test", "=", "address_parser", ".", "test", "(", "\n", "self", ".", "new_prediction_data_container", ",", "\n", "batch_size", "=", "self", ".", "a_batch_size", ",", "\n", "num_workers", "=", "self", ".", "a_number_of_workers", ",", "\n", "callbacks", "=", "[", "callback_mock", "]", ",", "\n", ")", "\n", "\n", "self", ".", "assertIsNotNone", "(", "performance_after_test", ")", "\n", "\n", "callback_test_start_call", "=", "[", "call", ".", "on_test_begin", "(", "{", "}", ")", "]", "\n", "callback_mock", ".", "assert_has_calls", "(", "callback_test_start_call", ")", "\n", "callback_test_end_call", "=", "[", "\n", "call", ".", "on_test_end", "(", "\n", "{", "\n", "\"time\"", ":", "ANY", ",", "\n", "\"test_loss\"", ":", "performance_after_test", "[", "\"test_loss\"", "]", ",", "\n", "\"test_accuracy\"", ":", "performance_after_test", "[", "\"test_accuracy\"", "]", ",", "\n", "}", "\n", ")", "\n", "]", "\n", "callback_mock", ".", "assert_has_calls", "(", "callback_test_end_call", ")", "\n", "callback_mock", ".", "assert_not_called", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_address_parser_retrain_new_address_components.AddressParserIntegrationTestNewTags.test_givenAFasttextAddressParser_whenTestWithFasttextCkptNewTags_thenTestOccur": [[389, 412], ["deepparse.parser.AddressParser", "test_integration_address_parser_retrain_new_address_components.AddressParserIntegrationTestNewTags.training", "deepparse.parser.AddressParser.test", "test_integration_address_parser_retrain_new_address_components.AddressParserIntegrationTestNewTags.assertIsNotNone"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.base_retrain.AddressParserRetrainTestCase.training", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.address_parser.AddressParser.test"], ["", "def", "test_givenAFasttextAddressParser_whenTestWithFasttextCkptNewTags_thenTestOccur", "(", "\n", "self", ",", "\n", ")", ":", "\n", "        ", "address_parser", "=", "AddressParser", "(", "\n", "model_type", "=", "self", ".", "a_fasttext_model_type", ",", "\n", "device", "=", "self", ".", "a_cpu_device", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", ")", "\n", "\n", "self", ".", "training", "(", "\n", "address_parser", ",", "\n", "self", ".", "new_prediction_data_container", ",", "\n", "self", ".", "a_number_of_workers", ",", "\n", "prediction_tags", "=", "self", ".", "with_new_prediction_tags", ",", "\n", ")", "\n", "\n", "performance_after_test", "=", "address_parser", ".", "test", "(", "\n", "self", ".", "new_prediction_data_container", ",", "\n", "batch_size", "=", "self", ".", "a_batch_size", ",", "\n", "num_workers", "=", "self", ".", "a_number_of_workers", ",", "\n", ")", "\n", "\n", "self", ".", "assertIsNotNone", "(", "performance_after_test", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_address_parser_retrain_new_address_components.AddressParserIntegrationTestNewTags.test_givenAFasttextAddressParser_whenTestWithStrCkptNewTags_thenTestOccur": [[413, 434], ["deepparse.parser.AddressParser", "test_integration_address_parser_retrain_new_address_components.AddressParserIntegrationTestNewTags.training", "deepparse.parser.AddressParser.test", "test_integration_address_parser_retrain_new_address_components.AddressParserIntegrationTestNewTags.assertIsNotNone"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.base_retrain.AddressParserRetrainTestCase.training", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.address_parser.AddressParser.test"], ["", "def", "test_givenAFasttextAddressParser_whenTestWithStrCkptNewTags_thenTestOccur", "(", "self", ")", ":", "\n", "        ", "address_parser", "=", "AddressParser", "(", "\n", "model_type", "=", "self", ".", "a_fasttext_model_type", ",", "\n", "device", "=", "self", ".", "a_cpu_device", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", ")", "\n", "\n", "self", ".", "training", "(", "\n", "address_parser", ",", "\n", "self", ".", "new_prediction_data_container", ",", "\n", "self", ".", "a_number_of_workers", ",", "\n", "prediction_tags", "=", "self", ".", "with_new_prediction_tags", ",", "\n", ")", "\n", "\n", "performance_after_test", "=", "address_parser", ".", "test", "(", "\n", "self", ".", "new_prediction_data_container", ",", "\n", "batch_size", "=", "self", ".", "a_batch_size", ",", "\n", "num_workers", "=", "self", ".", "a_number_of_workers", ",", "\n", ")", "\n", "\n", "self", ".", "assertIsNotNone", "(", "performance_after_test", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_address_parser_retrain_new_address_components.AddressParserIntegrationTestNewTags.test_givenABPEmbAddressParser_whenTestWithNumberWorkersAt0NewTags_thenTestOccur": [[435, 457], ["deepparse.parser.AddressParser", "test_integration_address_parser_retrain_new_address_components.AddressParserIntegrationTestNewTags.training", "deepparse.parser.AddressParser.test", "test_integration_address_parser_retrain_new_address_components.AddressParserIntegrationTestNewTags.assertIsNotNone"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.base_retrain.AddressParserRetrainTestCase.training", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.address_parser.AddressParser.test"], ["", "def", "test_givenABPEmbAddressParser_whenTestWithNumberWorkersAt0NewTags_thenTestOccur", "(", "\n", "self", ",", "\n", ")", ":", "\n", "        ", "address_parser", "=", "AddressParser", "(", "\n", "model_type", "=", "self", ".", "a_bpemb_model_type", ",", "\n", "device", "=", "self", ".", "a_cpu_device", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", ")", "\n", "self", ".", "training", "(", "\n", "address_parser", ",", "\n", "self", ".", "new_prediction_data_container", ",", "\n", "self", ".", "a_zero_number_of_workers", ",", "\n", "prediction_tags", "=", "self", ".", "with_new_prediction_tags", ",", "\n", ")", "\n", "\n", "performance_after_test", "=", "address_parser", ".", "test", "(", "\n", "self", ".", "new_prediction_data_container", ",", "\n", "batch_size", "=", "self", ".", "a_batch_size", ",", "\n", "num_workers", "=", "self", ".", "a_number_of_workers", ",", "\n", ")", "\n", "\n", "self", ".", "assertIsNotNone", "(", "performance_after_test", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_address_parser_retrain_new_address_components.AddressParserIntegrationTestNewTags.test_givenABPEmbAddressParser_whenTestWithNumberWorkersGreaterThen0NewTags_thenTestOccur": [[458, 480], ["deepparse.parser.AddressParser", "test_integration_address_parser_retrain_new_address_components.AddressParserIntegrationTestNewTags.training", "deepparse.parser.AddressParser.test", "test_integration_address_parser_retrain_new_address_components.AddressParserIntegrationTestNewTags.assertIsNotNone"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.base_retrain.AddressParserRetrainTestCase.training", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.address_parser.AddressParser.test"], ["", "def", "test_givenABPEmbAddressParser_whenTestWithNumberWorkersGreaterThen0NewTags_thenTestOccur", "(", "\n", "self", ",", "\n", ")", ":", "\n", "        ", "address_parser", "=", "AddressParser", "(", "\n", "model_type", "=", "self", ".", "a_bpemb_model_type", ",", "\n", "device", "=", "self", ".", "a_cpu_device", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", ")", "\n", "self", ".", "training", "(", "\n", "address_parser", ",", "\n", "self", ".", "new_prediction_data_container", ",", "\n", "self", ".", "a_number_of_workers", ",", "\n", "prediction_tags", "=", "self", ".", "with_new_prediction_tags", ",", "\n", ")", "\n", "\n", "performance_after_test", "=", "address_parser", ".", "test", "(", "\n", "self", ".", "new_prediction_data_container", ",", "\n", "batch_size", "=", "self", ".", "a_batch_size", ",", "\n", "num_workers", "=", "self", ".", "a_number_of_workers", ",", "\n", ")", "\n", "\n", "self", ".", "assertIsNotNone", "(", "performance_after_test", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_address_parser_retrain_new_address_components.AddressParserIntegrationTestNewTags.test_givenABPEmbAddressParser_whenTestMultipleEpochsNewTags_thenTestOccurCorrectly": [[481, 504], ["deepparse.parser.AddressParser", "test_integration_address_parser_retrain_new_address_components.AddressParserIntegrationTestNewTags.training", "deepparse.parser.AddressParser.test", "test_integration_address_parser_retrain_new_address_components.AddressParserIntegrationTestNewTags.assertIsNotNone"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.base_retrain.AddressParserRetrainTestCase.training", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.address_parser.AddressParser.test"], ["", "def", "test_givenABPEmbAddressParser_whenTestMultipleEpochsNewTags_thenTestOccurCorrectly", "(", "\n", "self", ",", "\n", ")", ":", "\n", "        ", "address_parser", "=", "AddressParser", "(", "\n", "model_type", "=", "self", ".", "a_bpemb_model_type", ",", "\n", "device", "=", "self", ".", "a_cpu_device", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", ")", "\n", "\n", "self", ".", "training", "(", "\n", "address_parser", ",", "\n", "self", ".", "new_prediction_data_container", ",", "\n", "self", ".", "a_number_of_workers", ",", "\n", "prediction_tags", "=", "self", ".", "with_new_prediction_tags", ",", "\n", ")", "\n", "\n", "performance_after_test", "=", "address_parser", ".", "test", "(", "\n", "self", ".", "new_prediction_data_container", ",", "\n", "batch_size", "=", "self", ".", "a_batch_size", ",", "\n", "num_workers", "=", "self", ".", "a_number_of_workers", ",", "\n", ")", "\n", "\n", "self", ".", "assertIsNotNone", "(", "performance_after_test", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_address_parser_retrain_new_address_components.AddressParserIntegrationTestNewTags.test_givenABPEmbAddressParser_whenTestWithConfigNewTags_thenTestOccur": [[505, 526], ["deepparse.parser.AddressParser", "test_integration_address_parser_retrain_new_address_components.AddressParserIntegrationTestNewTags.training", "deepparse.parser.AddressParser.test", "test_integration_address_parser_retrain_new_address_components.AddressParserIntegrationTestNewTags.assertIsNotNone"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.base_retrain.AddressParserRetrainTestCase.training", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.address_parser.AddressParser.test"], ["", "def", "test_givenABPEmbAddressParser_whenTestWithConfigNewTags_thenTestOccur", "(", "self", ")", ":", "\n", "        ", "address_parser", "=", "AddressParser", "(", "\n", "model_type", "=", "self", ".", "a_bpemb_model_type", ",", "\n", "device", "=", "self", ".", "a_cpu_device", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", ")", "\n", "\n", "self", ".", "training", "(", "\n", "address_parser", ",", "\n", "self", ".", "new_prediction_data_container", ",", "\n", "self", ".", "a_number_of_workers", ",", "\n", "prediction_tags", "=", "self", ".", "with_new_prediction_tags", ",", "\n", ")", "\n", "\n", "performance_after_test", "=", "address_parser", ".", "test", "(", "\n", "self", ".", "new_prediction_data_container", ",", "\n", "batch_size", "=", "self", ".", "a_batch_size", ",", "\n", "num_workers", "=", "self", ".", "a_number_of_workers", ",", "\n", ")", "\n", "\n", "self", ".", "assertIsNotNone", "(", "performance_after_test", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_address_parser_retrain_new_address_components.AddressParserIntegrationTestNewTags.test_givenABPEmbAddressParser_whenTestWithConfigWithCallbacksNewTags_thenCallbackAreUse": [[527, 566], ["deepparse.parser.AddressParser", "test_integration_address_parser_retrain_new_address_components.AddressParserIntegrationTestNewTags.training", "unittest.mock.MagicMock", "deepparse.parser.AddressParser.test", "test_integration_address_parser_retrain_new_address_components.AddressParserIntegrationTestNewTags.assertIsNotNone", "unittest.mock.MagicMock.assert_has_calls", "unittest.mock.MagicMock.assert_has_calls", "unittest.mock.MagicMock.assert_not_called", "unittest.mock.call.on_test_begin", "unittest.mock.call.on_test_end"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.base_retrain.AddressParserRetrainTestCase.training", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.address_parser.AddressParser.test"], ["", "def", "test_givenABPEmbAddressParser_whenTestWithConfigWithCallbacksNewTags_thenCallbackAreUse", "(", "\n", "self", ",", "\n", ")", ":", "\n", "        ", "address_parser", "=", "AddressParser", "(", "\n", "model_type", "=", "self", ".", "a_bpemb_model_type", ",", "\n", "device", "=", "self", ".", "a_cpu_device", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", ")", "\n", "\n", "self", ".", "training", "(", "\n", "address_parser", ",", "\n", "self", ".", "new_prediction_data_container", ",", "\n", "self", ".", "a_number_of_workers", ",", "\n", "prediction_tags", "=", "self", ".", "with_new_prediction_tags", ",", "\n", ")", "\n", "\n", "callback_mock", "=", "MagicMock", "(", ")", "\n", "performance_after_test", "=", "address_parser", ".", "test", "(", "\n", "self", ".", "new_prediction_data_container", ",", "\n", "batch_size", "=", "self", ".", "a_batch_size", ",", "\n", "num_workers", "=", "self", ".", "a_number_of_workers", ",", "\n", "callbacks", "=", "[", "callback_mock", "]", ",", "\n", ")", "\n", "\n", "self", ".", "assertIsNotNone", "(", "performance_after_test", ")", "\n", "\n", "callback_test_start_call", "=", "[", "call", ".", "on_test_begin", "(", "{", "}", ")", "]", "\n", "callback_mock", ".", "assert_has_calls", "(", "callback_test_start_call", ")", "\n", "callback_test_end_call", "=", "[", "\n", "call", ".", "on_test_end", "(", "\n", "{", "\n", "\"time\"", ":", "ANY", ",", "\n", "\"test_loss\"", ":", "performance_after_test", "[", "\"test_loss\"", "]", ",", "\n", "\"test_accuracy\"", ":", "performance_after_test", "[", "\"test_accuracy\"", "]", ",", "\n", "}", "\n", ")", "\n", "]", "\n", "callback_mock", ".", "assert_has_calls", "(", "callback_test_end_call", ")", "\n", "callback_mock", ".", "assert_not_called", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_address_parser_retrain_new_address_components.AddressParserIntegrationTestNewTags.test_givenABPEmbAddressParser_whenTestWithBPEmbCkptNewTags_thenTestOccur": [[567, 588], ["deepparse.parser.AddressParser", "test_integration_address_parser_retrain_new_address_components.AddressParserIntegrationTestNewTags.training", "deepparse.parser.AddressParser.test", "test_integration_address_parser_retrain_new_address_components.AddressParserIntegrationTestNewTags.assertIsNotNone"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.base_retrain.AddressParserRetrainTestCase.training", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.address_parser.AddressParser.test"], ["", "def", "test_givenABPEmbAddressParser_whenTestWithBPEmbCkptNewTags_thenTestOccur", "(", "self", ")", ":", "\n", "        ", "address_parser", "=", "AddressParser", "(", "\n", "model_type", "=", "self", ".", "a_bpemb_model_type", ",", "\n", "device", "=", "self", ".", "a_cpu_device", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", ")", "\n", "\n", "self", ".", "training", "(", "\n", "address_parser", ",", "\n", "self", ".", "new_prediction_data_container", ",", "\n", "self", ".", "a_number_of_workers", ",", "\n", "prediction_tags", "=", "self", ".", "with_new_prediction_tags", ",", "\n", ")", "\n", "\n", "performance_after_test", "=", "address_parser", ".", "test", "(", "\n", "self", ".", "new_prediction_data_container", ",", "\n", "batch_size", "=", "self", ".", "a_batch_size", ",", "\n", "num_workers", "=", "self", ".", "a_number_of_workers", ",", "\n", ")", "\n", "\n", "self", ".", "assertIsNotNone", "(", "performance_after_test", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_address_parser_retrain_new_address_components.AddressParserIntegrationTestNewTags.test_givenABPEmbAddressParser_whenTestWithStrCkptNewTags_thenTestOccur": [[589, 610], ["deepparse.parser.AddressParser", "test_integration_address_parser_retrain_new_address_components.AddressParserIntegrationTestNewTags.training", "deepparse.parser.AddressParser.test", "test_integration_address_parser_retrain_new_address_components.AddressParserIntegrationTestNewTags.assertIsNotNone"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.base_retrain.AddressParserRetrainTestCase.training", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.address_parser.AddressParser.test"], ["", "def", "test_givenABPEmbAddressParser_whenTestWithStrCkptNewTags_thenTestOccur", "(", "self", ")", ":", "\n", "        ", "address_parser", "=", "AddressParser", "(", "\n", "model_type", "=", "self", ".", "a_bpemb_model_type", ",", "\n", "device", "=", "self", ".", "a_cpu_device", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", ")", "\n", "\n", "self", ".", "training", "(", "\n", "address_parser", ",", "\n", "self", ".", "new_prediction_data_container", ",", "\n", "self", ".", "a_number_of_workers", ",", "\n", "prediction_tags", "=", "self", ".", "with_new_prediction_tags", ",", "\n", ")", "\n", "\n", "performance_after_test", "=", "address_parser", ".", "test", "(", "\n", "self", ".", "new_prediction_data_container", ",", "\n", "batch_size", "=", "self", ".", "a_batch_size", ",", "\n", "num_workers", "=", "self", ".", "a_number_of_workers", ",", "\n", ")", "\n", "\n", "self", ".", "assertIsNotNone", "(", "performance_after_test", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.base_retrain.RetrainTestCase.setUpClass": [[17, 38], ["tempfile.TemporaryDirectory", "os.path.join", "os.makedirs", "deepparse.download_from_url", "deepparse.download_from_url", "os.path.join", "os.path.join", "deepparse.download_from_url", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.deepparse.tools.download_from_url", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.deepparse.tools.download_from_url", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.deepparse.tools.download_from_url"], ["    ", "@", "classmethod", "\n", "def", "setUpClass", "(", "cls", ")", ":", "\n", "        ", "cls", ".", "temp_dir_obj", "=", "TemporaryDirectory", "(", ")", "\n", "cls", ".", "a_data_saving_dir", "=", "os", ".", "path", ".", "join", "(", "cls", ".", "temp_dir_obj", ".", "name", ",", "\"data\"", ")", "\n", "os", ".", "makedirs", "(", "cls", ".", "a_data_saving_dir", ",", "exist_ok", "=", "True", ")", "\n", "file_extension", "=", "\"p\"", "\n", "training_dataset_name", "=", "\"sample_incomplete_data\"", "\n", "test_dataset_name", "=", "\"test_sample_data\"", "\n", "download_from_url", "(", "training_dataset_name", ",", "cls", ".", "a_data_saving_dir", ",", "file_extension", "=", "file_extension", ")", "\n", "download_from_url", "(", "test_dataset_name", ",", "cls", ".", "a_data_saving_dir", ",", "file_extension", "=", "file_extension", ")", "\n", "\n", "cls", ".", "a_train_pickle_dataset_path", "=", "os", ".", "path", ".", "join", "(", "\n", "cls", ".", "a_data_saving_dir", ",", "training_dataset_name", "+", "\".\"", "+", "file_extension", "\n", ")", "\n", "\n", "cls", ".", "a_test_pickle_dataset_path", "=", "os", ".", "path", ".", "join", "(", "cls", ".", "a_data_saving_dir", ",", "test_dataset_name", "+", "\".\"", "+", "file_extension", ")", "\n", "\n", "file_extension", "=", "\"csv\"", "\n", "download_from_url", "(", "training_dataset_name", ",", "cls", ".", "a_data_saving_dir", ",", "file_extension", "=", "file_extension", ")", "\n", "\n", "cls", ".", "a_train_csv_dataset_path", "=", "os", ".", "path", ".", "join", "(", "cls", ".", "a_data_saving_dir", ",", "training_dataset_name", "+", "\".\"", "+", "file_extension", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.base_retrain.RetrainTestCase.tearDownClass": [[39, 42], ["cls.temp_dir_obj.cleanup"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "tearDownClass", "(", "cls", ")", "->", "None", ":", "\n", "        ", "cls", ".", "temp_dir_obj", ".", "cleanup", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.base_retrain.AddressParserRetrainTestCase.setUpClass": [[45, 79], ["base_retrain.RetrainTestCase.setUpClass", "deepparse.dataset_container.PickleDatasetContainer", "deepparse.dataset_container.PickleDatasetContainer", "torch.device", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_seq2seq_fasttext_model_gpu.FastTextSeq2SeqIntegrationTest.setUpClass"], ["    ", "@", "classmethod", "\n", "def", "setUpClass", "(", "cls", ")", ":", "\n", "        ", "super", "(", "AddressParserRetrainTestCase", ",", "cls", ")", ".", "setUpClass", "(", ")", "\n", "\n", "cls", ".", "training_container", "=", "PickleDatasetContainer", "(", "cls", ".", "a_train_pickle_dataset_path", ")", "\n", "cls", ".", "test_container", "=", "PickleDatasetContainer", "(", "cls", ".", "a_test_pickle_dataset_path", ")", "\n", "\n", "cls", ".", "a_fasttext_model_type", "=", "\"fasttext\"", "\n", "cls", ".", "a_fasttext_light_model_type", "=", "\"fasttext-light\"", "\n", "cls", ".", "a_bpemb_model_type", "=", "\"bpemb\"", "\n", "\n", "cls", ".", "verbose", "=", "False", "\n", "\n", "# training constant", "\n", "cls", ".", "a_single_epoch", "=", "1", "\n", "cls", ".", "a_three_epoch", "=", "3", "\n", "cls", ".", "a_train_ratio", "=", "0.8", "\n", "cls", ".", "a_batch_size", "=", "128", "\n", "cls", ".", "a_number_of_workers", "=", "2", "\n", "cls", ".", "a_learning_rate", "=", "0.001", "\n", "\n", "cls", ".", "a_torch_device", "=", "torch", ".", "device", "(", "\"cuda:0\"", ")", "\n", "cls", ".", "a_cpu_device", "=", "\"cpu\"", "\n", "\n", "cls", ".", "a_zero_number_of_workers", "=", "0", "\n", "\n", "cls", ".", "fasttext_local_path", "=", "os", ".", "path", ".", "join", "(", "CACHE_PATH", ",", "\"fasttext.ckpt\"", ")", "\n", "cls", ".", "bpemb_local_path", "=", "os", ".", "path", ".", "join", "(", "CACHE_PATH", ",", "\"bpemb.ckpt\"", ")", "\n", "\n", "cls", ".", "with_new_prediction_tags", "=", "{", "\n", "\"ALastTag\"", ":", "0", ",", "\n", "\"ATag\"", ":", "1", ",", "\n", "\"AnotherTag\"", ":", "2", ",", "\n", "\"EOS\"", ":", "3", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.base_retrain.AddressParserRetrainTestCase.setUp": [[81, 84], ["tempfile.TemporaryDirectory", "os.path.join"], "methods", ["None"], ["", "def", "setUp", "(", "self", ")", "->", "None", ":", "\n", "        ", "self", ".", "training_temp_dir_obj", "=", "TemporaryDirectory", "(", ")", "\n", "self", ".", "a_checkpoints_saving_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "training_temp_dir_obj", ".", "name", ",", "\"checkpoints\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.base_retrain.AddressParserRetrainTestCase.tearDown": [[85, 87], ["base_retrain.AddressParserRetrainTestCase.training_temp_dir_obj.cleanup"], "methods", ["None"], ["", "def", "tearDown", "(", "self", ")", "->", "None", ":", "\n", "        ", "self", ".", "training_temp_dir_obj", ".", "cleanup", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.base_retrain.AddressParserRetrainTestCase.training": [[88, 103], ["address_parser.retrain"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.address_parser.AddressParser.retrain"], ["", "def", "training", "(", "\n", "self", ",", "\n", "address_parser", ":", "AddressParser", ",", "\n", "data_container", ":", "DatasetContainer", ",", "\n", "num_workers", ":", "int", ",", "\n", "prediction_tags", "=", "None", ",", "\n", ")", ":", "\n", "        ", "address_parser", ".", "retrain", "(", "\n", "data_container", ",", "\n", "self", ".", "a_train_ratio", ",", "\n", "epochs", "=", "self", ".", "a_single_epoch", ",", "\n", "batch_size", "=", "self", ".", "a_batch_size", ",", "\n", "num_workers", "=", "num_workers", ",", "\n", "logging_path", "=", "self", ".", "a_checkpoints_saving_dir", ",", "\n", "prediction_tags", "=", "prediction_tags", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_address_parser_test_cpu.AddressParserIntegrationTestAPITest.test_givenAFasttextAddressParser_whenTestWithNumWorkerAt0_thenTestOccur": [[19, 34], ["deepparse.parser.AddressParser", "test_integration_address_parser_test_cpu.AddressParserIntegrationTestAPITest.training", "deepparse.parser.AddressParser.test", "test_integration_address_parser_test_cpu.AddressParserIntegrationTestAPITest.assertIsNotNone"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.base_retrain.AddressParserRetrainTestCase.training", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.address_parser.AddressParser.test"], ["    ", "def", "test_givenAFasttextAddressParser_whenTestWithNumWorkerAt0_thenTestOccur", "(", "self", ")", ":", "\n", "        ", "address_parser", "=", "AddressParser", "(", "\n", "model_type", "=", "self", ".", "a_fasttext_model_type", ",", "\n", "device", "=", "self", ".", "a_cpu_device", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", ")", "\n", "self", ".", "training", "(", "address_parser", ",", "self", ".", "training_container", ",", "self", ".", "a_zero_number_of_workers", ")", "\n", "\n", "performance_after_test", "=", "address_parser", ".", "test", "(", "\n", "self", ".", "test_container", ",", "\n", "batch_size", "=", "self", ".", "a_batch_size", ",", "\n", "num_workers", "=", "self", ".", "a_number_of_workers", ",", "\n", ")", "\n", "\n", "self", ".", "assertIsNotNone", "(", "performance_after_test", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_address_parser_test_cpu.AddressParserIntegrationTestAPITest.test_givenAFasttextAddressParser_whenTestWithNumWorkerGreaterThen0_thenTestOccur": [[35, 52], ["deepparse.parser.AddressParser", "test_integration_address_parser_test_cpu.AddressParserIntegrationTestAPITest.training", "deepparse.parser.AddressParser.test", "test_integration_address_parser_test_cpu.AddressParserIntegrationTestAPITest.assertIsNotNone"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.base_retrain.AddressParserRetrainTestCase.training", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.address_parser.AddressParser.test"], ["", "def", "test_givenAFasttextAddressParser_whenTestWithNumWorkerGreaterThen0_thenTestOccur", "(", "\n", "self", ",", "\n", ")", ":", "\n", "        ", "address_parser", "=", "AddressParser", "(", "\n", "model_type", "=", "self", ".", "a_fasttext_model_type", ",", "\n", "device", "=", "self", ".", "a_cpu_device", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", ")", "\n", "self", ".", "training", "(", "address_parser", ",", "self", ".", "training_container", ",", "self", ".", "a_number_of_workers", ")", "\n", "\n", "performance_after_test", "=", "address_parser", ".", "test", "(", "\n", "self", ".", "test_container", ",", "\n", "batch_size", "=", "self", ".", "a_batch_size", ",", "\n", "num_workers", "=", "self", ".", "a_number_of_workers", ",", "\n", ")", "\n", "\n", "self", ".", "assertIsNotNone", "(", "performance_after_test", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_address_parser_test_cpu.AddressParserIntegrationTestAPITest.test_givenAFasttextAddressParser_whenTestMultipleEpochs_thenTestOccurCorrectly": [[53, 71], ["deepparse.parser.AddressParser", "test_integration_address_parser_test_cpu.AddressParserIntegrationTestAPITest.training", "deepparse.parser.AddressParser.test", "test_integration_address_parser_test_cpu.AddressParserIntegrationTestAPITest.assertIsNotNone"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.base_retrain.AddressParserRetrainTestCase.training", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.address_parser.AddressParser.test"], ["", "def", "test_givenAFasttextAddressParser_whenTestMultipleEpochs_thenTestOccurCorrectly", "(", "\n", "self", ",", "\n", ")", ":", "\n", "        ", "address_parser", "=", "AddressParser", "(", "\n", "model_type", "=", "self", ".", "a_fasttext_model_type", ",", "\n", "device", "=", "self", ".", "a_cpu_device", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", ")", "\n", "\n", "self", ".", "training", "(", "address_parser", ",", "self", ".", "training_container", ",", "self", ".", "a_number_of_workers", ")", "\n", "\n", "performance_after_test", "=", "address_parser", ".", "test", "(", "\n", "self", ".", "test_container", ",", "\n", "batch_size", "=", "self", ".", "a_batch_size", ",", "\n", "num_workers", "=", "self", ".", "a_number_of_workers", ",", "\n", ")", "\n", "\n", "self", ".", "assertIsNotNone", "(", "performance_after_test", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_address_parser_test_cpu.AddressParserIntegrationTestAPITest.test_givenAFasttextAddressParser_whenTestWithConfig_thenTestOccur": [[72, 88], ["deepparse.parser.AddressParser", "test_integration_address_parser_test_cpu.AddressParserIntegrationTestAPITest.training", "deepparse.parser.AddressParser.test", "test_integration_address_parser_test_cpu.AddressParserIntegrationTestAPITest.assertIsNotNone"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.base_retrain.AddressParserRetrainTestCase.training", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.address_parser.AddressParser.test"], ["", "def", "test_givenAFasttextAddressParser_whenTestWithConfig_thenTestOccur", "(", "self", ")", ":", "\n", "        ", "address_parser", "=", "AddressParser", "(", "\n", "model_type", "=", "self", ".", "a_fasttext_model_type", ",", "\n", "device", "=", "self", ".", "a_cpu_device", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", ")", "\n", "\n", "self", ".", "training", "(", "address_parser", ",", "self", ".", "training_container", ",", "self", ".", "a_number_of_workers", ")", "\n", "\n", "performance_after_test", "=", "address_parser", ".", "test", "(", "\n", "self", ".", "test_container", ",", "\n", "batch_size", "=", "self", ".", "a_batch_size", ",", "\n", "num_workers", "=", "self", ".", "a_number_of_workers", ",", "\n", ")", "\n", "\n", "self", ".", "assertIsNotNone", "(", "performance_after_test", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_address_parser_test_cpu.AddressParserIntegrationTestAPITest.test_givenAFasttextAddressParser_whenTestWithConfigWithCallbacks_thenCallbackAreUse": [[89, 123], ["deepparse.parser.AddressParser", "test_integration_address_parser_test_cpu.AddressParserIntegrationTestAPITest.training", "unittest.mock.MagicMock", "deepparse.parser.AddressParser.test", "test_integration_address_parser_test_cpu.AddressParserIntegrationTestAPITest.assertIsNotNone", "unittest.mock.MagicMock.assert_has_calls", "unittest.mock.MagicMock.assert_has_calls", "unittest.mock.MagicMock.assert_not_called", "unittest.mock.call.on_test_begin", "unittest.mock.call.on_test_end"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.base_retrain.AddressParserRetrainTestCase.training", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.address_parser.AddressParser.test"], ["", "def", "test_givenAFasttextAddressParser_whenTestWithConfigWithCallbacks_thenCallbackAreUse", "(", "\n", "self", ",", "\n", ")", ":", "\n", "        ", "address_parser", "=", "AddressParser", "(", "\n", "model_type", "=", "self", ".", "a_fasttext_model_type", ",", "\n", "device", "=", "self", ".", "a_cpu_device", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", ")", "\n", "\n", "self", ".", "training", "(", "address_parser", ",", "self", ".", "training_container", ",", "self", ".", "a_number_of_workers", ")", "\n", "\n", "callback_mock", "=", "MagicMock", "(", ")", "\n", "performance_after_test", "=", "address_parser", ".", "test", "(", "\n", "self", ".", "test_container", ",", "\n", "batch_size", "=", "self", ".", "a_batch_size", ",", "\n", "num_workers", "=", "self", ".", "a_number_of_workers", ",", "\n", "callbacks", "=", "[", "callback_mock", "]", ",", "\n", ")", "\n", "\n", "self", ".", "assertIsNotNone", "(", "performance_after_test", ")", "\n", "\n", "callback_test_start_call", "=", "[", "call", ".", "on_test_begin", "(", "{", "}", ")", "]", "\n", "callback_mock", ".", "assert_has_calls", "(", "callback_test_start_call", ")", "\n", "callback_test_end_call", "=", "[", "\n", "call", ".", "on_test_end", "(", "\n", "{", "\n", "\"time\"", ":", "ANY", ",", "\n", "\"test_loss\"", ":", "performance_after_test", "[", "\"test_loss\"", "]", ",", "\n", "\"test_accuracy\"", ":", "performance_after_test", "[", "\"test_accuracy\"", "]", ",", "\n", "}", "\n", ")", "\n", "]", "\n", "callback_mock", ".", "assert_has_calls", "(", "callback_test_end_call", ")", "\n", "callback_mock", ".", "assert_not_called", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_address_parser_test_cpu.AddressParserIntegrationTestAPITest.test_givenAFasttextAddressParser_whenTestWithFasttextCkpt_thenTestOccur": [[124, 140], ["deepparse.parser.AddressParser", "test_integration_address_parser_test_cpu.AddressParserIntegrationTestAPITest.training", "deepparse.parser.AddressParser.test", "test_integration_address_parser_test_cpu.AddressParserIntegrationTestAPITest.assertIsNotNone"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.base_retrain.AddressParserRetrainTestCase.training", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.address_parser.AddressParser.test"], ["", "def", "test_givenAFasttextAddressParser_whenTestWithFasttextCkpt_thenTestOccur", "(", "self", ")", ":", "\n", "        ", "address_parser", "=", "AddressParser", "(", "\n", "model_type", "=", "self", ".", "a_fasttext_model_type", ",", "\n", "device", "=", "self", ".", "a_cpu_device", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", ")", "\n", "\n", "self", ".", "training", "(", "address_parser", ",", "self", ".", "training_container", ",", "self", ".", "a_number_of_workers", ")", "\n", "\n", "performance_after_test", "=", "address_parser", ".", "test", "(", "\n", "self", ".", "test_container", ",", "\n", "batch_size", "=", "self", ".", "a_batch_size", ",", "\n", "num_workers", "=", "self", ".", "a_number_of_workers", ",", "\n", ")", "\n", "\n", "self", ".", "assertIsNotNone", "(", "performance_after_test", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_address_parser_test_cpu.AddressParserIntegrationTestAPITest.test_givenAFasttextAddressParser_whenTestWithStrCkpt_thenTestOccur": [[141, 157], ["deepparse.parser.AddressParser", "test_integration_address_parser_test_cpu.AddressParserIntegrationTestAPITest.training", "deepparse.parser.AddressParser.test", "test_integration_address_parser_test_cpu.AddressParserIntegrationTestAPITest.assertIsNotNone"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.base_retrain.AddressParserRetrainTestCase.training", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.address_parser.AddressParser.test"], ["", "def", "test_givenAFasttextAddressParser_whenTestWithStrCkpt_thenTestOccur", "(", "self", ")", ":", "\n", "        ", "address_parser", "=", "AddressParser", "(", "\n", "model_type", "=", "self", ".", "a_fasttext_model_type", ",", "\n", "device", "=", "self", ".", "a_cpu_device", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", ")", "\n", "\n", "self", ".", "training", "(", "address_parser", ",", "self", ".", "training_container", ",", "self", ".", "a_number_of_workers", ")", "\n", "\n", "performance_after_test", "=", "address_parser", ".", "test", "(", "\n", "self", ".", "test_container", ",", "\n", "batch_size", "=", "self", ".", "a_batch_size", ",", "\n", "num_workers", "=", "self", ".", "a_number_of_workers", ",", "\n", ")", "\n", "\n", "self", ".", "assertIsNotNone", "(", "performance_after_test", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_address_parser_test_cpu.AddressParserIntegrationTestAPITest.test_givenABPEmbAddressParser_whenTestWithNumberWorkersAt0_thenTestOccur": [[158, 173], ["deepparse.parser.AddressParser", "test_integration_address_parser_test_cpu.AddressParserIntegrationTestAPITest.training", "deepparse.parser.AddressParser.test", "test_integration_address_parser_test_cpu.AddressParserIntegrationTestAPITest.assertIsNotNone"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.base_retrain.AddressParserRetrainTestCase.training", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.address_parser.AddressParser.test"], ["", "def", "test_givenABPEmbAddressParser_whenTestWithNumberWorkersAt0_thenTestOccur", "(", "self", ")", ":", "\n", "        ", "address_parser", "=", "AddressParser", "(", "\n", "model_type", "=", "self", ".", "a_bpemb_model_type", ",", "\n", "device", "=", "self", ".", "a_cpu_device", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", ")", "\n", "self", ".", "training", "(", "address_parser", ",", "self", ".", "training_container", ",", "self", ".", "a_zero_number_of_workers", ")", "\n", "\n", "performance_after_test", "=", "address_parser", ".", "test", "(", "\n", "self", ".", "test_container", ",", "\n", "batch_size", "=", "self", ".", "a_batch_size", ",", "\n", "num_workers", "=", "self", ".", "a_number_of_workers", ",", "\n", ")", "\n", "\n", "self", ".", "assertIsNotNone", "(", "performance_after_test", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_address_parser_test_cpu.AddressParserIntegrationTestAPITest.test_givenABPEmbAddressParser_whenTestWithNumberWorkersGreaterThen0_thenTestOccur": [[174, 191], ["deepparse.parser.AddressParser", "test_integration_address_parser_test_cpu.AddressParserIntegrationTestAPITest.training", "deepparse.parser.AddressParser.test", "test_integration_address_parser_test_cpu.AddressParserIntegrationTestAPITest.assertIsNotNone"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.base_retrain.AddressParserRetrainTestCase.training", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.address_parser.AddressParser.test"], ["", "def", "test_givenABPEmbAddressParser_whenTestWithNumberWorkersGreaterThen0_thenTestOccur", "(", "\n", "self", ",", "\n", ")", ":", "\n", "        ", "address_parser", "=", "AddressParser", "(", "\n", "model_type", "=", "self", ".", "a_bpemb_model_type", ",", "\n", "device", "=", "self", ".", "a_cpu_device", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", ")", "\n", "self", ".", "training", "(", "address_parser", ",", "self", ".", "training_container", ",", "self", ".", "a_number_of_workers", ")", "\n", "\n", "performance_after_test", "=", "address_parser", ".", "test", "(", "\n", "self", ".", "test_container", ",", "\n", "batch_size", "=", "self", ".", "a_batch_size", ",", "\n", "num_workers", "=", "self", ".", "a_number_of_workers", ",", "\n", ")", "\n", "\n", "self", ".", "assertIsNotNone", "(", "performance_after_test", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_address_parser_test_cpu.AddressParserIntegrationTestAPITest.test_givenABPEmbAddressParser_whenTestMultipleEpochs_thenTestOccurCorrectly": [[192, 210], ["deepparse.parser.AddressParser", "test_integration_address_parser_test_cpu.AddressParserIntegrationTestAPITest.training", "deepparse.parser.AddressParser.test", "test_integration_address_parser_test_cpu.AddressParserIntegrationTestAPITest.assertIsNotNone"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.base_retrain.AddressParserRetrainTestCase.training", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.address_parser.AddressParser.test"], ["", "def", "test_givenABPEmbAddressParser_whenTestMultipleEpochs_thenTestOccurCorrectly", "(", "\n", "self", ",", "\n", ")", ":", "\n", "        ", "address_parser", "=", "AddressParser", "(", "\n", "model_type", "=", "self", ".", "a_bpemb_model_type", ",", "\n", "device", "=", "self", ".", "a_cpu_device", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", ")", "\n", "\n", "self", ".", "training", "(", "address_parser", ",", "self", ".", "training_container", ",", "self", ".", "a_number_of_workers", ")", "\n", "\n", "performance_after_test", "=", "address_parser", ".", "test", "(", "\n", "self", ".", "test_container", ",", "\n", "batch_size", "=", "self", ".", "a_batch_size", ",", "\n", "num_workers", "=", "self", ".", "a_number_of_workers", ",", "\n", ")", "\n", "\n", "self", ".", "assertIsNotNone", "(", "performance_after_test", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_address_parser_test_cpu.AddressParserIntegrationTestAPITest.test_givenABPEmbAddressParser_whenTestWithConfig_thenTestOccur": [[211, 227], ["deepparse.parser.AddressParser", "test_integration_address_parser_test_cpu.AddressParserIntegrationTestAPITest.training", "deepparse.parser.AddressParser.test", "test_integration_address_parser_test_cpu.AddressParserIntegrationTestAPITest.assertIsNotNone"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.base_retrain.AddressParserRetrainTestCase.training", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.address_parser.AddressParser.test"], ["", "def", "test_givenABPEmbAddressParser_whenTestWithConfig_thenTestOccur", "(", "self", ")", ":", "\n", "        ", "address_parser", "=", "AddressParser", "(", "\n", "model_type", "=", "self", ".", "a_bpemb_model_type", ",", "\n", "device", "=", "self", ".", "a_cpu_device", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", ")", "\n", "\n", "self", ".", "training", "(", "address_parser", ",", "self", ".", "training_container", ",", "self", ".", "a_number_of_workers", ")", "\n", "\n", "performance_after_test", "=", "address_parser", ".", "test", "(", "\n", "self", ".", "test_container", ",", "\n", "batch_size", "=", "self", ".", "a_batch_size", ",", "\n", "num_workers", "=", "self", ".", "a_number_of_workers", ",", "\n", ")", "\n", "\n", "self", ".", "assertIsNotNone", "(", "performance_after_test", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_address_parser_test_cpu.AddressParserIntegrationTestAPITest.test_givenABPEmbAddressParser_whenTestWithConfigWithCallbacks_thenCallbackAreUse": [[228, 262], ["deepparse.parser.AddressParser", "test_integration_address_parser_test_cpu.AddressParserIntegrationTestAPITest.training", "unittest.mock.MagicMock", "deepparse.parser.AddressParser.test", "test_integration_address_parser_test_cpu.AddressParserIntegrationTestAPITest.assertIsNotNone", "unittest.mock.MagicMock.assert_has_calls", "unittest.mock.MagicMock.assert_has_calls", "unittest.mock.MagicMock.assert_not_called", "unittest.mock.call.on_test_begin", "unittest.mock.call.on_test_end"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.base_retrain.AddressParserRetrainTestCase.training", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.address_parser.AddressParser.test"], ["", "def", "test_givenABPEmbAddressParser_whenTestWithConfigWithCallbacks_thenCallbackAreUse", "(", "\n", "self", ",", "\n", ")", ":", "\n", "        ", "address_parser", "=", "AddressParser", "(", "\n", "model_type", "=", "self", ".", "a_bpemb_model_type", ",", "\n", "device", "=", "self", ".", "a_cpu_device", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", ")", "\n", "\n", "self", ".", "training", "(", "address_parser", ",", "self", ".", "training_container", ",", "self", ".", "a_number_of_workers", ")", "\n", "\n", "callback_mock", "=", "MagicMock", "(", ")", "\n", "performance_after_test", "=", "address_parser", ".", "test", "(", "\n", "self", ".", "test_container", ",", "\n", "batch_size", "=", "self", ".", "a_batch_size", ",", "\n", "num_workers", "=", "self", ".", "a_number_of_workers", ",", "\n", "callbacks", "=", "[", "callback_mock", "]", ",", "\n", ")", "\n", "\n", "self", ".", "assertIsNotNone", "(", "performance_after_test", ")", "\n", "\n", "callback_test_start_call", "=", "[", "call", ".", "on_test_begin", "(", "{", "}", ")", "]", "\n", "callback_mock", ".", "assert_has_calls", "(", "callback_test_start_call", ")", "\n", "callback_test_end_call", "=", "[", "\n", "call", ".", "on_test_end", "(", "\n", "{", "\n", "\"time\"", ":", "ANY", ",", "\n", "\"test_loss\"", ":", "performance_after_test", "[", "\"test_loss\"", "]", ",", "\n", "\"test_accuracy\"", ":", "performance_after_test", "[", "\"test_accuracy\"", "]", ",", "\n", "}", "\n", ")", "\n", "]", "\n", "callback_mock", ".", "assert_has_calls", "(", "callback_test_end_call", ")", "\n", "callback_mock", ".", "assert_not_called", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_address_parser_test_cpu.AddressParserIntegrationTestAPITest.test_givenABPEmbAddressParser_whenTestWithBPEmbCkpt_thenTestOccur": [[263, 279], ["deepparse.parser.AddressParser", "test_integration_address_parser_test_cpu.AddressParserIntegrationTestAPITest.training", "deepparse.parser.AddressParser.test", "test_integration_address_parser_test_cpu.AddressParserIntegrationTestAPITest.assertIsNotNone"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.base_retrain.AddressParserRetrainTestCase.training", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.address_parser.AddressParser.test"], ["", "def", "test_givenABPEmbAddressParser_whenTestWithBPEmbCkpt_thenTestOccur", "(", "self", ")", ":", "\n", "        ", "address_parser", "=", "AddressParser", "(", "\n", "model_type", "=", "self", ".", "a_bpemb_model_type", ",", "\n", "device", "=", "self", ".", "a_cpu_device", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", ")", "\n", "\n", "self", ".", "training", "(", "address_parser", ",", "self", ".", "training_container", ",", "self", ".", "a_number_of_workers", ")", "\n", "\n", "performance_after_test", "=", "address_parser", ".", "test", "(", "\n", "self", ".", "test_container", ",", "\n", "batch_size", "=", "self", ".", "a_batch_size", ",", "\n", "num_workers", "=", "self", ".", "a_number_of_workers", ",", "\n", ")", "\n", "\n", "self", ".", "assertIsNotNone", "(", "performance_after_test", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_address_parser_test_cpu.AddressParserIntegrationTestAPITest.test_givenABPEmbAddressParser_whenTestWithStrCkpt_thenTestOccur": [[280, 296], ["deepparse.parser.AddressParser", "test_integration_address_parser_test_cpu.AddressParserIntegrationTestAPITest.training", "deepparse.parser.AddressParser.test", "test_integration_address_parser_test_cpu.AddressParserIntegrationTestAPITest.assertIsNotNone"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.base_retrain.AddressParserRetrainTestCase.training", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.address_parser.AddressParser.test"], ["", "def", "test_givenABPEmbAddressParser_whenTestWithStrCkpt_thenTestOccur", "(", "self", ")", ":", "\n", "        ", "address_parser", "=", "AddressParser", "(", "\n", "model_type", "=", "self", ".", "a_bpemb_model_type", ",", "\n", "device", "=", "self", ".", "a_cpu_device", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", ")", "\n", "\n", "self", ".", "training", "(", "address_parser", ",", "self", ".", "training_container", ",", "self", ".", "a_number_of_workers", ")", "\n", "\n", "performance_after_test", "=", "address_parser", ".", "test", "(", "\n", "self", ".", "test_container", ",", "\n", "batch_size", "=", "self", ".", "a_batch_size", ",", "\n", "num_workers", "=", "self", ".", "a_number_of_workers", ",", "\n", ")", "\n", "\n", "self", ".", "assertIsNotNone", "(", "performance_after_test", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_address_parser_retrain_gpu.AddressParserIntegrationRetrainTest.test_givenAFasttextAddressParser_whenRetrain_thenTrainingOccur": [[17, 34], ["deepparse.parser.AddressParser", "deepparse.parser.AddressParser.retrain", "test_integration_address_parser_retrain_gpu.AddressParserIntegrationRetrainTest.assertIsNotNone"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.address_parser.AddressParser.retrain"], ["    ", "def", "test_givenAFasttextAddressParser_whenRetrain_thenTrainingOccur", "(", "self", ")", ":", "\n", "        ", "address_parser", "=", "AddressParser", "(", "\n", "model_type", "=", "self", ".", "a_fasttext_model_type", ",", "\n", "device", "=", "self", ".", "a_torch_device", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", ")", "\n", "\n", "performance_after_training", "=", "address_parser", ".", "retrain", "(", "\n", "self", ".", "training_container", ",", "\n", "self", ".", "a_train_ratio", ",", "\n", "epochs", "=", "self", ".", "a_single_epoch", ",", "\n", "batch_size", "=", "self", ".", "a_batch_size", ",", "\n", "num_workers", "=", "self", ".", "a_number_of_workers", ",", "\n", "logging_path", "=", "self", ".", "a_checkpoints_saving_dir", ",", "\n", ")", "\n", "\n", "self", ".", "assertIsNotNone", "(", "performance_after_training", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_address_parser_retrain_gpu.AddressParserIntegrationRetrainTest.test_givenAFasttextAddressParser_whenRetrainMultipleEpochs_thenTrainingOccurCorrectly": [[35, 54], ["deepparse.parser.AddressParser", "deepparse.parser.AddressParser.retrain", "test_integration_address_parser_retrain_gpu.AddressParserIntegrationRetrainTest.assertIsNotNone"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.address_parser.AddressParser.retrain"], ["", "def", "test_givenAFasttextAddressParser_whenRetrainMultipleEpochs_thenTrainingOccurCorrectly", "(", "\n", "self", ",", "\n", ")", ":", "\n", "        ", "address_parser", "=", "AddressParser", "(", "\n", "model_type", "=", "self", ".", "a_fasttext_model_type", ",", "\n", "device", "=", "self", ".", "a_torch_device", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", ")", "\n", "\n", "performance_after_training", "=", "address_parser", ".", "retrain", "(", "\n", "self", ".", "training_container", ",", "\n", "self", ".", "a_train_ratio", ",", "\n", "epochs", "=", "self", ".", "a_three_epoch", ",", "\n", "batch_size", "=", "self", ".", "a_batch_size", ",", "\n", "num_workers", "=", "self", ".", "a_number_of_workers", ",", "\n", "logging_path", "=", "self", ".", "a_checkpoints_saving_dir", ",", "\n", ")", "\n", "\n", "self", ".", "assertIsNotNone", "(", "performance_after_training", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_address_parser_retrain_gpu.AddressParserIntegrationRetrainTest.test_givenAFasttextAddressParser_whenRetrainWithConfig_thenTrainingOccur": [[55, 73], ["deepparse.parser.AddressParser", "deepparse.parser.AddressParser.retrain", "test_integration_address_parser_retrain_gpu.AddressParserIntegrationRetrainTest.assertIsNotNone"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.address_parser.AddressParser.retrain"], ["", "def", "test_givenAFasttextAddressParser_whenRetrainWithConfig_thenTrainingOccur", "(", "self", ")", ":", "\n", "        ", "address_parser", "=", "AddressParser", "(", "\n", "model_type", "=", "self", ".", "a_fasttext_model_type", ",", "\n", "device", "=", "self", ".", "a_torch_device", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", ")", "\n", "\n", "performance_after_training", "=", "address_parser", ".", "retrain", "(", "\n", "self", ".", "training_container", ",", "\n", "self", ".", "a_train_ratio", ",", "\n", "epochs", "=", "self", ".", "a_single_epoch", ",", "\n", "batch_size", "=", "self", ".", "a_batch_size", ",", "\n", "num_workers", "=", "self", ".", "a_number_of_workers", ",", "\n", "learning_rate", "=", "self", ".", "a_learning_rate", ",", "\n", "logging_path", "=", "self", ".", "a_checkpoints_saving_dir", ",", "\n", ")", "\n", "\n", "self", ".", "assertIsNotNone", "(", "performance_after_training", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_address_parser_retrain_gpu.AddressParserIntegrationRetrainTest.test_givenAFasttextAddressParser_whenRetrainWithConfigWithCallbacks_thenCallbackAreUse": [[74, 102], ["deepparse.parser.AddressParser", "unittest.mock.MagicMock", "deepparse.parser.AddressParser.retrain", "test_integration_address_parser_retrain_gpu.AddressParserIntegrationRetrainTest.assertIsNotNone", "unittest.mock.MagicMock.assert_has_calls", "unittest.mock.MagicMock.assert_has_calls", "unittest.mock.MagicMock.assert_not_called", "unittest.mock.call.on_train_begin", "unittest.mock.call.on_train_end"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.address_parser.AddressParser.retrain"], ["", "def", "test_givenAFasttextAddressParser_whenRetrainWithConfigWithCallbacks_thenCallbackAreUse", "(", "\n", "self", ",", "\n", ")", ":", "\n", "        ", "address_parser", "=", "AddressParser", "(", "\n", "model_type", "=", "self", ".", "a_fasttext_model_type", ",", "\n", "device", "=", "self", ".", "a_torch_device", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", ")", "\n", "\n", "callback_mock", "=", "MagicMock", "(", "spec", "=", "Callback", ")", "\n", "performance_after_training", "=", "address_parser", ".", "retrain", "(", "\n", "self", ".", "training_container", ",", "\n", "self", ".", "a_train_ratio", ",", "\n", "epochs", "=", "self", ".", "a_single_epoch", ",", "\n", "batch_size", "=", "self", ".", "a_batch_size", ",", "\n", "num_workers", "=", "self", ".", "a_number_of_workers", ",", "\n", "learning_rate", "=", "self", ".", "a_learning_rate", ",", "\n", "callbacks", "=", "[", "callback_mock", "]", ",", "\n", "logging_path", "=", "self", ".", "a_checkpoints_saving_dir", ",", "\n", ")", "\n", "\n", "self", ".", "assertIsNotNone", "(", "performance_after_training", ")", "\n", "\n", "callback_train_start_call", "=", "[", "call", ".", "on_train_begin", "(", "{", "}", ")", "]", "\n", "callback_mock", ".", "assert_has_calls", "(", "callback_train_start_call", ")", "\n", "callback_train_end_call", "=", "[", "call", ".", "on_train_end", "(", "{", "}", ")", "]", "\n", "callback_mock", ".", "assert_has_calls", "(", "callback_train_end_call", ")", "\n", "callback_mock", ".", "assert_not_called", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_address_parser_retrain_gpu.AddressParserIntegrationRetrainTest.test_givenAFasttextLightAddressParser_whenRetrain_thenTrainingDoesNotOccur": [[103, 119], ["deepparse.parser.AddressParser", "test_integration_address_parser_retrain_gpu.AddressParserIntegrationRetrainTest.assertRaises", "deepparse.parser.AddressParser.retrain"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.address_parser.AddressParser.retrain"], ["", "def", "test_givenAFasttextLightAddressParser_whenRetrain_thenTrainingDoesNotOccur", "(", "\n", "self", ",", "\n", ")", ":", "\n", "        ", "address_parser", "=", "AddressParser", "(", "\n", "model_type", "=", "self", ".", "a_fasttext_light_model_type", ",", "\n", "device", "=", "self", ".", "a_torch_device", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", ")", "\n", "with", "self", ".", "assertRaises", "(", "ValueError", ")", ":", "\n", "            ", "_", "=", "address_parser", ".", "retrain", "(", "\n", "self", ".", "training_container", ",", "\n", "self", ".", "a_train_ratio", ",", "\n", "epochs", "=", "self", ".", "a_single_epoch", ",", "\n", "batch_size", "=", "self", ".", "a_batch_size", ",", "\n", "num_workers", "=", "self", ".", "a_number_of_workers", ",", "\n", "logging_path", "=", "self", ".", "a_checkpoints_saving_dir", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_address_parser_retrain_gpu.AddressParserIntegrationRetrainTest.test_givenABPEmbAddressParser_whenRetrain_thenTrainingOccur": [[121, 138], ["deepparse.parser.AddressParser", "deepparse.parser.AddressParser.retrain", "test_integration_address_parser_retrain_gpu.AddressParserIntegrationRetrainTest.assertIsNotNone"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.address_parser.AddressParser.retrain"], ["", "", "def", "test_givenABPEmbAddressParser_whenRetrain_thenTrainingOccur", "(", "self", ")", ":", "\n", "        ", "address_parser", "=", "AddressParser", "(", "\n", "model_type", "=", "self", ".", "a_bpemb_model_type", ",", "\n", "device", "=", "self", ".", "a_torch_device", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", ")", "\n", "\n", "performance_after_training", "=", "address_parser", ".", "retrain", "(", "\n", "self", ".", "training_container", ",", "\n", "self", ".", "a_train_ratio", ",", "\n", "epochs", "=", "self", ".", "a_single_epoch", ",", "\n", "batch_size", "=", "self", ".", "a_batch_size", ",", "\n", "num_workers", "=", "self", ".", "a_number_of_workers", ",", "\n", "logging_path", "=", "self", ".", "a_checkpoints_saving_dir", ",", "\n", ")", "\n", "\n", "self", ".", "assertIsNotNone", "(", "performance_after_training", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_address_parser_retrain_gpu.AddressParserIntegrationRetrainTest.test_givenABPEmbAddressParser_whenRetrainMultipleEpochs_thenTrainingOccurCorrectly": [[139, 158], ["deepparse.parser.AddressParser", "deepparse.parser.AddressParser.retrain", "test_integration_address_parser_retrain_gpu.AddressParserIntegrationRetrainTest.assertIsNotNone"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.address_parser.AddressParser.retrain"], ["", "def", "test_givenABPEmbAddressParser_whenRetrainMultipleEpochs_thenTrainingOccurCorrectly", "(", "\n", "self", ",", "\n", ")", ":", "\n", "        ", "address_parser", "=", "AddressParser", "(", "\n", "model_type", "=", "self", ".", "a_bpemb_model_type", ",", "\n", "device", "=", "self", ".", "a_torch_device", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", ")", "\n", "\n", "performance_after_training", "=", "address_parser", ".", "retrain", "(", "\n", "self", ".", "training_container", ",", "\n", "self", ".", "a_train_ratio", ",", "\n", "epochs", "=", "self", ".", "a_three_epoch", ",", "\n", "batch_size", "=", "self", ".", "a_batch_size", ",", "\n", "num_workers", "=", "self", ".", "a_number_of_workers", ",", "\n", "logging_path", "=", "self", ".", "a_checkpoints_saving_dir", ",", "\n", ")", "\n", "\n", "self", ".", "assertIsNotNone", "(", "performance_after_training", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_address_parser_retrain_gpu.AddressParserIntegrationRetrainTest.test_givenABPEmbAddressParser_whenRetrainWithConfig_thenTrainingOccur": [[159, 177], ["deepparse.parser.AddressParser", "deepparse.parser.AddressParser.retrain", "test_integration_address_parser_retrain_gpu.AddressParserIntegrationRetrainTest.assertIsNotNone"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.address_parser.AddressParser.retrain"], ["", "def", "test_givenABPEmbAddressParser_whenRetrainWithConfig_thenTrainingOccur", "(", "self", ")", ":", "\n", "        ", "address_parser", "=", "AddressParser", "(", "\n", "model_type", "=", "self", ".", "a_bpemb_model_type", ",", "\n", "device", "=", "self", ".", "a_torch_device", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", ")", "\n", "\n", "performance_after_training", "=", "address_parser", ".", "retrain", "(", "\n", "self", ".", "training_container", ",", "\n", "self", ".", "a_train_ratio", ",", "\n", "epochs", "=", "self", ".", "a_single_epoch", ",", "\n", "batch_size", "=", "self", ".", "a_batch_size", ",", "\n", "num_workers", "=", "self", ".", "a_number_of_workers", ",", "\n", "learning_rate", "=", "self", ".", "a_learning_rate", ",", "\n", "logging_path", "=", "self", ".", "a_checkpoints_saving_dir", ",", "\n", ")", "\n", "\n", "self", ".", "assertIsNotNone", "(", "performance_after_training", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_address_parser_retrain_gpu.AddressParserIntegrationRetrainTest.test_givenABPEmbAddressParser_whenRetrainWithConfigWithCallbacks_thenCallbackAreUse": [[178, 206], ["deepparse.parser.AddressParser", "unittest.mock.MagicMock", "deepparse.parser.AddressParser.retrain", "test_integration_address_parser_retrain_gpu.AddressParserIntegrationRetrainTest.assertIsNotNone", "unittest.mock.MagicMock.assert_has_calls", "unittest.mock.MagicMock.assert_has_calls", "unittest.mock.MagicMock.assert_not_called", "unittest.mock.call.on_train_begin", "unittest.mock.call.on_train_end"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.address_parser.AddressParser.retrain"], ["", "def", "test_givenABPEmbAddressParser_whenRetrainWithConfigWithCallbacks_thenCallbackAreUse", "(", "\n", "self", ",", "\n", ")", ":", "\n", "        ", "address_parser", "=", "AddressParser", "(", "\n", "model_type", "=", "self", ".", "a_bpemb_model_type", ",", "\n", "device", "=", "self", ".", "a_torch_device", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", ")", "\n", "\n", "callback_mock", "=", "MagicMock", "(", "spec", "=", "Callback", ")", "\n", "performance_after_training", "=", "address_parser", ".", "retrain", "(", "\n", "self", ".", "training_container", ",", "\n", "self", ".", "a_train_ratio", ",", "\n", "epochs", "=", "self", ".", "a_single_epoch", ",", "\n", "batch_size", "=", "self", ".", "a_batch_size", ",", "\n", "num_workers", "=", "self", ".", "a_number_of_workers", ",", "\n", "learning_rate", "=", "self", ".", "a_learning_rate", ",", "\n", "callbacks", "=", "[", "callback_mock", "]", ",", "\n", "logging_path", "=", "self", ".", "a_checkpoints_saving_dir", ",", "\n", ")", "\n", "\n", "self", ".", "assertIsNotNone", "(", "performance_after_training", ")", "\n", "\n", "callback_train_start_call", "=", "[", "call", ".", "on_train_begin", "(", "{", "}", ")", "]", "\n", "callback_mock", ".", "assert_has_calls", "(", "callback_train_start_call", ")", "\n", "callback_train_end_call", "=", "[", "call", ".", "on_train_end", "(", "{", "}", ")", "]", "\n", "callback_mock", ".", "assert_has_calls", "(", "callback_train_end_call", ")", "\n", "callback_mock", ".", "assert_not_called", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_address_parser_gpu.AddressParserPredictGPUTest.setUpClass": [[13, 17], ["super().setUpClass", "torch.device"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_seq2seq_fasttext_model_gpu.FastTextSeq2SeqIntegrationTest.setUpClass"], ["    ", "@", "classmethod", "\n", "def", "setUpClass", "(", "cls", ")", ":", "\n", "        ", "super", "(", "AddressParserPredictGPUTest", ",", "cls", ")", ".", "setUpClass", "(", ")", "\n", "cls", ".", "device", "=", "torch", ".", "device", "(", "\"cuda:0\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_address_parser_gpu.AddressParserPredictGPUTest.test_givenAAddress_whenParseFastText_thenParseAddress": [[18, 24], ["test_integration_address_parser_gpu.AddressParserPredictGPUTest.setup_model_with_config", "test_integration_address_parser_gpu.AddressParserPredictGPUTest.a_model", "test_integration_address_parser_gpu.AddressParserPredictGPUTest.assert_properly_parse"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.base_predict.AddressParserBase.setup_model_with_config", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.base_predict.AddressParserPredictBase.assert_properly_parse"], ["", "def", "test_givenAAddress_whenParseFastText_thenParseAddress", "(", "self", ")", ":", "\n", "        ", "config", "=", "{", "\"model_type\"", ":", "\"fasttext\"", ",", "\"device\"", ":", "self", ".", "device", ",", "\"verbose\"", ":", "False", "}", "\n", "self", ".", "setup_model_with_config", "(", "config", ")", "\n", "\n", "parse_address", "=", "self", ".", "a_model", "(", "self", ".", "an_address_to_parse", ")", "\n", "self", ".", "assert_properly_parse", "(", "parse_address", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_address_parser_gpu.AddressParserPredictGPUTest.test_givenAAddress_whenParseBPEmb_thenParseAddress": [[25, 31], ["test_integration_address_parser_gpu.AddressParserPredictGPUTest.setup_model_with_config", "test_integration_address_parser_gpu.AddressParserPredictGPUTest.a_model", "test_integration_address_parser_gpu.AddressParserPredictGPUTest.assert_properly_parse"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.base_predict.AddressParserBase.setup_model_with_config", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.base_predict.AddressParserPredictBase.assert_properly_parse"], ["", "def", "test_givenAAddress_whenParseBPEmb_thenParseAddress", "(", "self", ")", ":", "\n", "        ", "config", "=", "{", "\"model_type\"", ":", "\"bpemb\"", ",", "\"device\"", ":", "self", ".", "device", ",", "\"verbose\"", ":", "False", "}", "\n", "self", ".", "setup_model_with_config", "(", "config", ")", "\n", "\n", "parse_address", "=", "self", ".", "a_model", "(", "self", ".", "an_address_to_parse", ")", "\n", "self", ".", "assert_properly_parse", "(", "parse_address", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_address_parser_gpu.AddressParserPredictGPUTest.test_givenAAddress_whenParseFastTextAtt_thenParseAddress": [[32, 43], ["test_integration_address_parser_gpu.AddressParserPredictGPUTest.setup_model_with_config", "test_integration_address_parser_gpu.AddressParserPredictGPUTest.a_model", "test_integration_address_parser_gpu.AddressParserPredictGPUTest.assert_properly_parse"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.base_predict.AddressParserBase.setup_model_with_config", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.base_predict.AddressParserPredictBase.assert_properly_parse"], ["", "def", "test_givenAAddress_whenParseFastTextAtt_thenParseAddress", "(", "self", ")", ":", "\n", "        ", "config", "=", "{", "\n", "\"model_type\"", ":", "\"fasttext\"", ",", "\n", "\"device\"", ":", "self", ".", "device", ",", "\n", "\"verbose\"", ":", "False", ",", "\n", "\"attention_mechanism\"", ":", "True", ",", "\n", "}", "\n", "self", ".", "setup_model_with_config", "(", "config", ")", "\n", "\n", "parse_address", "=", "self", ".", "a_model", "(", "self", ".", "an_address_to_parse", ")", "\n", "self", ".", "assert_properly_parse", "(", "parse_address", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_address_parser_gpu.AddressParserPredictGPUTest.test_givenAAddress_whenParseBPEmbAtt_thenParseAddress": [[44, 55], ["test_integration_address_parser_gpu.AddressParserPredictGPUTest.setup_model_with_config", "test_integration_address_parser_gpu.AddressParserPredictGPUTest.a_model", "test_integration_address_parser_gpu.AddressParserPredictGPUTest.assert_properly_parse"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.base_predict.AddressParserBase.setup_model_with_config", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.base_predict.AddressParserPredictBase.assert_properly_parse"], ["", "def", "test_givenAAddress_whenParseBPEmbAtt_thenParseAddress", "(", "self", ")", ":", "\n", "        ", "config", "=", "{", "\n", "\"model_type\"", ":", "\"bpemb\"", ",", "\n", "\"device\"", ":", "self", ".", "device", ",", "\n", "\"verbose\"", ":", "False", ",", "\n", "\"attention_mechanism\"", ":", "True", ",", "\n", "}", "\n", "self", ".", "setup_model_with_config", "(", "config", ")", "\n", "\n", "parse_address", "=", "self", ".", "a_model", "(", "self", ".", "an_address_to_parse", ")", "\n", "self", ".", "assert_properly_parse", "(", "parse_address", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_address_parser_gpu.AddressParserPredictGPUTest.test_givenAListOfAddress_whenParseFastText_thenParseAllAddress": [[56, 62], ["test_integration_address_parser_gpu.AddressParserPredictGPUTest.setup_model_with_config", "test_integration_address_parser_gpu.AddressParserPredictGPUTest.a_model", "test_integration_address_parser_gpu.AddressParserPredictGPUTest.assert_properly_parse"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.base_predict.AddressParserBase.setup_model_with_config", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.base_predict.AddressParserPredictBase.assert_properly_parse"], ["", "def", "test_givenAListOfAddress_whenParseFastText_thenParseAllAddress", "(", "self", ")", ":", "\n", "        ", "config", "=", "{", "\"model_type\"", ":", "\"fasttext\"", ",", "\"device\"", ":", "self", ".", "device", ",", "\"verbose\"", ":", "False", "}", "\n", "self", ".", "setup_model_with_config", "(", "config", ")", "\n", "\n", "parse_address", "=", "self", ".", "a_model", "(", "[", "self", ".", "an_address_to_parse", ",", "self", ".", "an_address_to_parse", "]", ")", "\n", "self", ".", "assert_properly_parse", "(", "parse_address", ",", "multiple_address", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_address_parser_gpu.AddressParserPredictGPUTest.test_givenAListOfAddress_whenParseBPEmb_thenParseAllAddress": [[63, 69], ["test_integration_address_parser_gpu.AddressParserPredictGPUTest.setup_model_with_config", "test_integration_address_parser_gpu.AddressParserPredictGPUTest.a_model", "test_integration_address_parser_gpu.AddressParserPredictGPUTest.assert_properly_parse"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.base_predict.AddressParserBase.setup_model_with_config", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.base_predict.AddressParserPredictBase.assert_properly_parse"], ["", "def", "test_givenAListOfAddress_whenParseBPEmb_thenParseAllAddress", "(", "self", ")", ":", "\n", "        ", "config", "=", "{", "\"model_type\"", ":", "\"bpemb\"", ",", "\"device\"", ":", "self", ".", "device", ",", "\"verbose\"", ":", "False", "}", "\n", "self", ".", "setup_model_with_config", "(", "config", ")", "\n", "\n", "parse_address", "=", "self", ".", "a_model", "(", "[", "self", ".", "an_address_to_parse", ",", "self", ".", "an_address_to_parse", "]", ")", "\n", "self", ".", "assert_properly_parse", "(", "parse_address", ",", "multiple_address", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_address_parser_gpu.AddressParserPredictGPUMultiProcessTest.setUpClass": [[74, 78], ["super().setUpClass", "torch.device"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_seq2seq_fasttext_model_gpu.FastTextSeq2SeqIntegrationTest.setUpClass"], ["    ", "@", "classmethod", "\n", "def", "setUpClass", "(", "cls", ")", ":", "\n", "        ", "super", "(", "AddressParserPredictGPUMultiProcessTest", ",", "cls", ")", ".", "setUpClass", "(", ")", "\n", "cls", ".", "device", "=", "torch", ".", "device", "(", "\"cuda:0\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_address_parser_gpu.AddressParserPredictGPUMultiProcessTest.test_givenAAddress_whenParseFastTextNumWorkers1_thenParseAddress": [[79, 85], ["test_integration_address_parser_gpu.AddressParserPredictGPUMultiProcessTest.setup_model_with_config", "test_integration_address_parser_gpu.AddressParserPredictGPUMultiProcessTest.a_model", "test_integration_address_parser_gpu.AddressParserPredictGPUMultiProcessTest.assert_properly_parse"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.base_predict.AddressParserBase.setup_model_with_config", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.base_predict.AddressParserPredictBase.assert_properly_parse"], ["", "def", "test_givenAAddress_whenParseFastTextNumWorkers1_thenParseAddress", "(", "self", ")", ":", "\n", "        ", "config", "=", "{", "\"model_type\"", ":", "\"fasttext\"", ",", "\"device\"", ":", "self", ".", "device", ",", "\"verbose\"", ":", "False", "}", "\n", "self", ".", "setup_model_with_config", "(", "config", ")", "\n", "\n", "parse_address", "=", "self", ".", "a_model", "(", "self", ".", "an_address_to_parse", ",", "num_workers", "=", "1", ")", "\n", "self", ".", "assert_properly_parse", "(", "parse_address", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_address_parser_gpu.AddressParserPredictGPUMultiProcessTest.test_givenAAddress_whenParseBPEmbNumWorkers1_thenParseAddress": [[86, 92], ["test_integration_address_parser_gpu.AddressParserPredictGPUMultiProcessTest.setup_model_with_config", "test_integration_address_parser_gpu.AddressParserPredictGPUMultiProcessTest.a_model", "test_integration_address_parser_gpu.AddressParserPredictGPUMultiProcessTest.assert_properly_parse"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.base_predict.AddressParserBase.setup_model_with_config", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.base_predict.AddressParserPredictBase.assert_properly_parse"], ["", "def", "test_givenAAddress_whenParseBPEmbNumWorkers1_thenParseAddress", "(", "self", ")", ":", "\n", "        ", "config", "=", "{", "\"model_type\"", ":", "\"bpemb\"", ",", "\"device\"", ":", "self", ".", "device", ",", "\"verbose\"", ":", "False", "}", "\n", "self", ".", "setup_model_with_config", "(", "config", ")", "\n", "\n", "parse_address", "=", "self", ".", "a_model", "(", "self", ".", "an_address_to_parse", ",", "num_workers", "=", "1", ")", "\n", "self", ".", "assert_properly_parse", "(", "parse_address", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_address_parser_gpu.AddressParserPredictGPUMultiProcessTest.test_givenAListOfAddress_whenParseFastTextNumWorkers1_thenParseAllAddress": [[93, 99], ["test_integration_address_parser_gpu.AddressParserPredictGPUMultiProcessTest.setup_model_with_config", "test_integration_address_parser_gpu.AddressParserPredictGPUMultiProcessTest.a_model", "test_integration_address_parser_gpu.AddressParserPredictGPUMultiProcessTest.assert_properly_parse"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.base_predict.AddressParserBase.setup_model_with_config", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.base_predict.AddressParserPredictBase.assert_properly_parse"], ["", "def", "test_givenAListOfAddress_whenParseFastTextNumWorkers1_thenParseAllAddress", "(", "self", ")", ":", "\n", "        ", "config", "=", "{", "\"model_type\"", ":", "\"fasttext\"", ",", "\"device\"", ":", "self", ".", "device", ",", "\"verbose\"", ":", "False", "}", "\n", "self", ".", "setup_model_with_config", "(", "config", ")", "\n", "\n", "parse_address", "=", "self", ".", "a_model", "(", "[", "self", ".", "an_address_to_parse", ",", "self", ".", "an_address_to_parse", "]", ",", "num_workers", "=", "1", ")", "\n", "self", ".", "assert_properly_parse", "(", "parse_address", ",", "multiple_address", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_address_parser_gpu.AddressParserPredictGPUMultiProcessTest.test_givenAListOfAddress_whenParseBPEmbNumWorkers1_thenParseAllAddress": [[100, 106], ["test_integration_address_parser_gpu.AddressParserPredictGPUMultiProcessTest.setup_model_with_config", "test_integration_address_parser_gpu.AddressParserPredictGPUMultiProcessTest.a_model", "test_integration_address_parser_gpu.AddressParserPredictGPUMultiProcessTest.assert_properly_parse"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.base_predict.AddressParserBase.setup_model_with_config", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.base_predict.AddressParserPredictBase.assert_properly_parse"], ["", "def", "test_givenAListOfAddress_whenParseBPEmbNumWorkers1_thenParseAllAddress", "(", "self", ")", ":", "\n", "        ", "config", "=", "{", "\"model_type\"", ":", "\"bpemb\"", ",", "\"device\"", ":", "self", ".", "device", ",", "\"verbose\"", ":", "False", "}", "\n", "self", ".", "setup_model_with_config", "(", "config", ")", "\n", "\n", "parse_address", "=", "self", ".", "a_model", "(", "[", "self", ".", "an_address_to_parse", ",", "self", ".", "an_address_to_parse", "]", ",", "num_workers", "=", "1", ")", "\n", "self", ".", "assert_properly_parse", "(", "parse_address", ",", "multiple_address", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_address_parser_gpu.AddressParserPredictGPUMultiProcessTest.test_givenAAddress_whenParseFastTextNumWorkers2_thenParseAddress": [[107, 113], ["test_integration_address_parser_gpu.AddressParserPredictGPUMultiProcessTest.setup_model_with_config", "test_integration_address_parser_gpu.AddressParserPredictGPUMultiProcessTest.a_model", "test_integration_address_parser_gpu.AddressParserPredictGPUMultiProcessTest.assert_properly_parse"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.base_predict.AddressParserBase.setup_model_with_config", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.base_predict.AddressParserPredictBase.assert_properly_parse"], ["", "def", "test_givenAAddress_whenParseFastTextNumWorkers2_thenParseAddress", "(", "self", ")", ":", "\n", "        ", "config", "=", "{", "\"model_type\"", ":", "\"fasttext\"", ",", "\"device\"", ":", "self", ".", "device", ",", "\"verbose\"", ":", "False", "}", "\n", "self", ".", "setup_model_with_config", "(", "config", ")", "\n", "\n", "parse_address", "=", "self", ".", "a_model", "(", "self", ".", "an_address_to_parse", ",", "num_workers", "=", "2", ")", "\n", "self", ".", "assert_properly_parse", "(", "parse_address", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_address_parser_gpu.AddressParserPredictGPUMultiProcessTest.test_givenAAddress_whenParseBPEmbNumWorkers2_thenParseAddress": [[114, 120], ["test_integration_address_parser_gpu.AddressParserPredictGPUMultiProcessTest.setup_model_with_config", "test_integration_address_parser_gpu.AddressParserPredictGPUMultiProcessTest.a_model", "test_integration_address_parser_gpu.AddressParserPredictGPUMultiProcessTest.assert_properly_parse"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.base_predict.AddressParserBase.setup_model_with_config", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.base_predict.AddressParserPredictBase.assert_properly_parse"], ["", "def", "test_givenAAddress_whenParseBPEmbNumWorkers2_thenParseAddress", "(", "self", ")", ":", "\n", "        ", "config", "=", "{", "\"model_type\"", ":", "\"bpemb\"", ",", "\"device\"", ":", "self", ".", "device", ",", "\"verbose\"", ":", "False", "}", "\n", "self", ".", "setup_model_with_config", "(", "config", ")", "\n", "\n", "parse_address", "=", "self", ".", "a_model", "(", "self", ".", "an_address_to_parse", ",", "num_workers", "=", "2", ")", "\n", "self", ".", "assert_properly_parse", "(", "parse_address", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_address_parser_gpu.AddressParserPredictGPUMultiProcessTest.test_givenAListOfAddress_whenParseFastTextNumWorkers2_thenParseAllAddress": [[121, 127], ["test_integration_address_parser_gpu.AddressParserPredictGPUMultiProcessTest.setup_model_with_config", "test_integration_address_parser_gpu.AddressParserPredictGPUMultiProcessTest.a_model", "test_integration_address_parser_gpu.AddressParserPredictGPUMultiProcessTest.assert_properly_parse"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.base_predict.AddressParserBase.setup_model_with_config", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.base_predict.AddressParserPredictBase.assert_properly_parse"], ["", "def", "test_givenAListOfAddress_whenParseFastTextNumWorkers2_thenParseAllAddress", "(", "self", ")", ":", "\n", "        ", "config", "=", "{", "\"model_type\"", ":", "\"fasttext\"", ",", "\"device\"", ":", "self", ".", "device", ",", "\"verbose\"", ":", "False", "}", "\n", "self", ".", "setup_model_with_config", "(", "config", ")", "\n", "\n", "parse_address", "=", "self", ".", "a_model", "(", "[", "self", ".", "an_address_to_parse", ",", "self", ".", "an_address_to_parse", "]", ",", "num_workers", "=", "2", ")", "\n", "self", ".", "assert_properly_parse", "(", "parse_address", ",", "multiple_address", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_address_parser_gpu.AddressParserPredictGPUMultiProcessTest.test_givenAListOfAddress_whenParseBPEmbNumWorkers2_thenParseAllAddress": [[128, 134], ["test_integration_address_parser_gpu.AddressParserPredictGPUMultiProcessTest.setup_model_with_config", "test_integration_address_parser_gpu.AddressParserPredictGPUMultiProcessTest.a_model", "test_integration_address_parser_gpu.AddressParserPredictGPUMultiProcessTest.assert_properly_parse"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.base_predict.AddressParserBase.setup_model_with_config", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.base_predict.AddressParserPredictBase.assert_properly_parse"], ["", "def", "test_givenAListOfAddress_whenParseBPEmbNumWorkers2_thenParseAllAddress", "(", "self", ")", ":", "\n", "        ", "config", "=", "{", "\"model_type\"", ":", "\"bpemb\"", ",", "\"device\"", ":", "self", ".", "device", ",", "\"verbose\"", ":", "False", "}", "\n", "self", ".", "setup_model_with_config", "(", "config", ")", "\n", "\n", "parse_address", "=", "self", ".", "a_model", "(", "[", "self", ".", "an_address_to_parse", ",", "self", ".", "an_address_to_parse", "]", ",", "num_workers", "=", "2", ")", "\n", "self", ".", "assert_properly_parse", "(", "parse_address", ",", "multiple_address", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_address_parser_gpu.AddressParserPredictGPUMultiProcessTest.test_givenAAttentionModel_whenParseFastTextNumWorkers2_thenProperlyParseAddress": [[135, 148], ["test_integration_address_parser_gpu.AddressParserPredictGPUMultiProcessTest.setup_model_with_config", "test_integration_address_parser_gpu.AddressParserPredictGPUMultiProcessTest.a_model", "test_integration_address_parser_gpu.AddressParserPredictGPUMultiProcessTest.assert_properly_parse"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.base_predict.AddressParserBase.setup_model_with_config", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.base_predict.AddressParserPredictBase.assert_properly_parse"], ["", "def", "test_givenAAttentionModel_whenParseFastTextNumWorkers2_thenProperlyParseAddress", "(", "\n", "self", ",", "\n", ")", ":", "\n", "        ", "config", "=", "{", "\n", "\"model_type\"", ":", "\"fasttext\"", ",", "\n", "\"device\"", ":", "self", ".", "device", ",", "\n", "\"verbose\"", ":", "False", ",", "\n", "\"attention_mechanism\"", ":", "True", ",", "\n", "}", "\n", "self", ".", "setup_model_with_config", "(", "config", ")", "\n", "\n", "parse_address", "=", "self", ".", "a_model", "(", "self", ".", "an_address_to_parse", ",", "num_workers", "=", "2", ")", "\n", "self", ".", "assert_properly_parse", "(", "parse_address", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_address_parser_gpu.AddressParserPredictGPUMultiProcessTest.test_givenAAttentionModel_whenParseBPEmbNumWorkers2_thenProperlyParseAddress": [[149, 162], ["test_integration_address_parser_gpu.AddressParserPredictGPUMultiProcessTest.setup_model_with_config", "test_integration_address_parser_gpu.AddressParserPredictGPUMultiProcessTest.a_model", "test_integration_address_parser_gpu.AddressParserPredictGPUMultiProcessTest.assert_properly_parse"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.base_predict.AddressParserBase.setup_model_with_config", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.base_predict.AddressParserPredictBase.assert_properly_parse"], ["", "def", "test_givenAAttentionModel_whenParseBPEmbNumWorkers2_thenProperlyParseAddress", "(", "\n", "self", ",", "\n", ")", ":", "\n", "        ", "config", "=", "{", "\n", "\"model_type\"", ":", "\"bpemb\"", ",", "\n", "\"device\"", ":", "self", ".", "device", ",", "\n", "\"verbose\"", ":", "False", ",", "\n", "\"attention_mechanism\"", ":", "True", ",", "\n", "}", "\n", "self", ".", "setup_model_with_config", "(", "config", ")", "\n", "\n", "parse_address", "=", "self", ".", "a_model", "(", "self", ".", "an_address_to_parse", ",", "num_workers", "=", "2", ")", "\n", "self", ".", "assert_properly_parse", "(", "parse_address", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_fasttext_embeddings_model.FastTextEmbeddingsModelIntegrationTest.setUpClass": [[18, 29], ["super().setUpClass", "tempfile.TemporaryDirectory", "os.path.join", "deepparse.download_from_url", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_seq2seq_fasttext_model_gpu.FastTextSeq2SeqIntegrationTest.setUpClass", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.deepparse.tools.download_from_url"], ["    ", "@", "classmethod", "\n", "def", "setUpClass", "(", "cls", ")", ":", "\n", "        ", "super", "(", "FastTextEmbeddingsModelIntegrationTest", ",", "cls", ")", ".", "setUpClass", "(", ")", "\n", "cls", ".", "file_name", "=", "\"fake_embeddings_cc.fr.300\"", "# We download fake embeddings for the tests", "\n", "cls", ".", "temp_dir_obj", "=", "TemporaryDirectory", "(", ")", "\n", "cls", ".", "fake_cache_path", "=", "os", ".", "path", ".", "join", "(", "cls", ".", "temp_dir_obj", ".", "name", ",", "\"fake_cache\"", ")", "\n", "download_from_url", "(", "cls", ".", "file_name", ",", "cls", ".", "fake_cache_path", ",", "\"bin\"", ")", "\n", "\n", "cls", ".", "a_fasttext_model_path", "=", "os", ".", "path", ".", "join", "(", "cls", ".", "fake_cache_path", ",", "cls", ".", "file_name", "+", "\".bin\"", ")", "\n", "\n", "cls", ".", "verbose", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_fasttext_embeddings_model.FastTextEmbeddingsModelIntegrationTest.tearDownClass": [[30, 33], ["cls.temp_dir_obj.cleanup"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "tearDownClass", "(", "cls", ")", "->", "None", ":", "\n", "        ", "cls", ".", "temp_dir_obj", ".", "cleanup", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_fasttext_embeddings_model.FastTextEmbeddingsModelIntegrationTest.test_givenAWindowsOS_whenFasttextModelInit_thenLoadWithProperFunction": [[34, 39], ["unittest.skipIf", "deepparse.embeddings_models.FastTextEmbeddingsModel", "test_integration_fasttext_embeddings_model.FastTextEmbeddingsModelIntegrationTest.assertIsInstance", "platform.system"], "methods", ["None"], ["", "@", "skipIf", "(", "platform", ".", "system", "(", ")", "!=", "\"Windows\"", ",", "\"Integration test on Windows env.\"", ")", "\n", "def", "test_givenAWindowsOS_whenFasttextModelInit_thenLoadWithProperFunction", "(", "self", ")", ":", "\n", "        ", "model", "=", "FastTextEmbeddingsModel", "(", "self", ".", "a_fasttext_model_path", ",", "verbose", "=", "self", ".", "verbose", ")", "\n", "\n", "self", ".", "assertIsInstance", "(", "model", ".", "model", ",", "FastTextKeyedVectors", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_fasttext_embeddings_model.FastTextEmbeddingsModelIntegrationTest.test_givenANotWindowsOS_whenFasttextModelInit_thenLoadWithProperFunction": [[40, 45], ["unittest.skipIf", "deepparse.embeddings_models.FastTextEmbeddingsModel", "test_integration_fasttext_embeddings_model.FastTextEmbeddingsModelIntegrationTest.assertIsInstance", "platform.system"], "methods", ["None"], ["", "@", "skipIf", "(", "platform", ".", "system", "(", ")", "==", "\"Windows\"", ",", "\"Integration test not on Windows env.\"", ")", "\n", "def", "test_givenANotWindowsOS_whenFasttextModelInit_thenLoadWithProperFunction", "(", "self", ")", ":", "\n", "        ", "model", "=", "FastTextEmbeddingsModel", "(", "self", ".", "a_fasttext_model_path", ",", "verbose", "=", "self", ".", "verbose", ")", "\n", "\n", "self", ".", "assertIsInstance", "(", "model", ".", "model", ",", "_FastText", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_fasttext_embeddings_model.FastTextEmbeddingsModelIntegrationTest.test_givenAWindowsOS_whenFasttextModelCollateFnInDataLoader_thenWorkProperly": [[46, 63], ["unittest.skipIf", "deepparse.embeddings_models.FastTextEmbeddingsModel", "tests.embeddings_models.integration.tools.MockedDataTransform", "torch.utils.data.DataLoader", "test_integration_fasttext_embeddings_model.FastTextEmbeddingsModelIntegrationTest.assertGreater", "dataset.append", "len", "platform.system"], "methods", ["None"], ["", "@", "skipIf", "(", "platform", ".", "system", "(", ")", "!=", "\"Windows\"", ",", "\"Integration test on Windows env.\"", ")", "\n", "def", "test_givenAWindowsOS_whenFasttextModelCollateFnInDataLoader_thenWorkProperly", "(", "\n", "self", ",", "\n", ")", ":", "\n", "        ", "model", "=", "FastTextEmbeddingsModel", "(", "self", ".", "a_fasttext_model_path", ",", "verbose", "=", "self", ".", "verbose", ")", "\n", "data_transform", "=", "MockedDataTransform", "(", "model", ")", "\n", "\n", "data_loader", "=", "DataLoader", "(", "\n", "self", ".", "training_container", ",", "\n", "collate_fn", "=", "data_transform", ".", "collate_fn", ",", "\n", "batch_size", "=", "32", ",", "\n", "num_workers", "=", "0", ",", "\n", ")", "\n", "dataset", "=", "[", "]", "\n", "for", "data", "in", "data_loader", ":", "\n", "            ", "dataset", ".", "append", "(", "data", ")", "\n", "", "self", ".", "assertGreater", "(", "len", "(", "dataset", ")", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_fasttext_embeddings_model.FastTextEmbeddingsModelIntegrationTest.test_givenAWindowsOS_whenFasttextModelCollateFnInDataLoaderNumWorkers1_thenWorkProperly": [[64, 81], ["unittest.skipIf", "deepparse.embeddings_models.FastTextEmbeddingsModel", "tests.embeddings_models.integration.tools.MockedDataTransform", "torch.utils.data.DataLoader", "test_integration_fasttext_embeddings_model.FastTextEmbeddingsModelIntegrationTest.assertGreater", "dataset.append", "len", "platform.system"], "methods", ["None"], ["", "@", "skipIf", "(", "platform", ".", "system", "(", ")", "!=", "\"Windows\"", ",", "\"Integration test on Windows env.\"", ")", "\n", "def", "test_givenAWindowsOS_whenFasttextModelCollateFnInDataLoaderNumWorkers1_thenWorkProperly", "(", "\n", "self", ",", "\n", ")", ":", "\n", "        ", "model", "=", "FastTextEmbeddingsModel", "(", "self", ".", "a_fasttext_model_path", ",", "verbose", "=", "self", ".", "verbose", ")", "\n", "data_transform", "=", "MockedDataTransform", "(", "model", ")", "\n", "\n", "data_loader", "=", "DataLoader", "(", "\n", "self", ".", "training_container", ",", "\n", "collate_fn", "=", "data_transform", ".", "collate_fn", ",", "\n", "batch_size", "=", "32", ",", "\n", "num_workers", "=", "1", ",", "\n", ")", "\n", "dataset", "=", "[", "]", "\n", "for", "data", "in", "data_loader", ":", "\n", "            ", "dataset", ".", "append", "(", "data", ")", "\n", "", "self", ".", "assertGreater", "(", "len", "(", "dataset", ")", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_fasttext_embeddings_model.FastTextEmbeddingsModelIntegrationTest.test_givenAWindowsOS_whenFasttextModelCollateFnInDataLoaderNumWorkers2_thenWorkProperly": [[82, 99], ["unittest.skipIf", "deepparse.embeddings_models.FastTextEmbeddingsModel", "tests.embeddings_models.integration.tools.MockedDataTransform", "torch.utils.data.DataLoader", "test_integration_fasttext_embeddings_model.FastTextEmbeddingsModelIntegrationTest.assertGreater", "dataset.append", "len", "platform.system"], "methods", ["None"], ["", "@", "skipIf", "(", "platform", ".", "system", "(", ")", "!=", "\"Windows\"", ",", "\"Integration test on Windows env.\"", ")", "\n", "def", "test_givenAWindowsOS_whenFasttextModelCollateFnInDataLoaderNumWorkers2_thenWorkProperly", "(", "\n", "self", ",", "\n", ")", ":", "\n", "        ", "model", "=", "FastTextEmbeddingsModel", "(", "self", ".", "a_fasttext_model_path", ",", "verbose", "=", "self", ".", "verbose", ")", "\n", "data_transform", "=", "MockedDataTransform", "(", "model", ")", "\n", "\n", "data_loader", "=", "DataLoader", "(", "\n", "self", ".", "training_container", ",", "\n", "collate_fn", "=", "data_transform", ".", "collate_fn", ",", "\n", "batch_size", "=", "32", ",", "\n", "num_workers", "=", "2", ",", "\n", ")", "\n", "dataset", "=", "[", "]", "\n", "for", "data", "in", "data_loader", ":", "\n", "            ", "dataset", ".", "append", "(", "data", ")", "\n", "", "self", ".", "assertGreater", "(", "len", "(", "dataset", ")", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_fasttext_embeddings_model.FastTextEmbeddingsModelIntegrationTest.test_givenAWindowsOS_whenFasttextModelCollateFnInDataLoaderEvenWithWindowsSetup_thenWorkProperly": [[100, 120], ["unittest.skipIf", "unittest.mock.patch", "tests.embeddings_models.integration.tools.MockedDataTransform", "torch.utils.data.DataLoader", "test_integration_fasttext_embeddings_model.FastTextEmbeddingsModelIntegrationTest.assertGreater", "deepparse.embeddings_models.FastTextEmbeddingsModel", "dataset.append", "len", "platform.system", "platform_mock.system"], "methods", ["None"], ["", "@", "skipIf", "(", "platform", ".", "system", "(", ")", "!=", "\"Windows\"", ",", "\"Integration test on Windows env.\"", ")", "\n", "@", "patch", "(", "\"deepparse.embeddings_models.fasttext_embeddings_model.platform\"", ")", "\n", "def", "test_givenAWindowsOS_whenFasttextModelCollateFnInDataLoaderEvenWithWindowsSetup_thenWorkProperly", "(", "\n", "self", ",", "platform_mock", "\n", ")", ":", "\n", "        ", "platform_mock", ".", "system", "(", ")", ".", "__eq__", ".", "return_value", "=", "True", "\n", "with", "platform_mock", ":", "\n", "            ", "model", "=", "FastTextEmbeddingsModel", "(", "self", ".", "a_fasttext_model_path", ",", "verbose", "=", "self", ".", "verbose", ")", "\n", "", "data_transform", "=", "MockedDataTransform", "(", "model", ")", "\n", "\n", "data_loader", "=", "DataLoader", "(", "\n", "self", ".", "training_container", ",", "\n", "collate_fn", "=", "data_transform", ".", "collate_fn", ",", "\n", "batch_size", "=", "32", ",", "\n", "num_workers", "=", "0", ",", "\n", ")", "\n", "dataset", "=", "[", "]", "\n", "for", "data", "in", "data_loader", ":", "\n", "            ", "dataset", ".", "append", "(", "data", ")", "\n", "", "self", ".", "assertGreater", "(", "len", "(", "dataset", ")", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_fasttext_embeddings_model.FastTextEmbeddingsModelIntegrationTest.test_givenAWindowsOS_whenFasttextModelCollateFnInDataLoaderForWindows_thenRaiseError": [[121, 139], ["unittest.skipIf", "deepparse.embeddings_models.FastTextEmbeddingsModel", "tests.embeddings_models.integration.tools.MockedDataTransform", "torch.utils.data.DataLoader", "test_integration_fasttext_embeddings_model.FastTextEmbeddingsModelIntegrationTest.assertGreater", "dataset.append", "len", "platform.system"], "methods", ["None"], ["", "@", "skipIf", "(", "platform", ".", "system", "(", ")", "!=", "\"Windows\"", ",", "\"Integration test on Windows env.\"", ")", "\n", "def", "test_givenAWindowsOS_whenFasttextModelCollateFnInDataLoaderForWindows_thenRaiseError", "(", "\n", "self", ",", "\n", ")", ":", "\n", "        ", "model", "=", "FastTextEmbeddingsModel", "(", "self", ".", "a_fasttext_model_path", ",", "verbose", "=", "self", ".", "verbose", ")", "\n", "\n", "data_transform", "=", "MockedDataTransform", "(", "model", ")", "\n", "\n", "data_loader", "=", "DataLoader", "(", "\n", "self", ".", "training_container", ",", "\n", "collate_fn", "=", "data_transform", ".", "collate_fn", ",", "\n", "batch_size", "=", "32", ",", "\n", "num_workers", "=", "0", ",", "\n", ")", "\n", "dataset", "=", "[", "]", "\n", "for", "data", "in", "data_loader", ":", "\n", "            ", "dataset", ".", "append", "(", "data", ")", "\n", "", "self", ".", "assertGreater", "(", "len", "(", "dataset", ")", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_fasttext_embeddings_model.FastTextEmbeddingsModelIntegrationTest.test_givenAWindowsOS_whenFasttextModelCollateFnInDataLoaderForWindowsNumWorkers1_thenRaiseError": [[140, 158], ["unittest.skipIf", "deepparse.embeddings_models.FastTextEmbeddingsModel", "tests.embeddings_models.integration.tools.MockedDataTransform", "torch.utils.data.DataLoader", "test_integration_fasttext_embeddings_model.FastTextEmbeddingsModelIntegrationTest.assertGreater", "dataset.append", "len", "platform.system"], "methods", ["None"], ["", "@", "skipIf", "(", "platform", ".", "system", "(", ")", "!=", "\"Windows\"", ",", "\"Integration test on Windows env.\"", ")", "\n", "def", "test_givenAWindowsOS_whenFasttextModelCollateFnInDataLoaderForWindowsNumWorkers1_thenRaiseError", "(", "\n", "self", ",", "\n", ")", ":", "\n", "        ", "model", "=", "FastTextEmbeddingsModel", "(", "self", ".", "a_fasttext_model_path", ",", "verbose", "=", "self", ".", "verbose", ")", "\n", "\n", "data_transform", "=", "MockedDataTransform", "(", "model", ")", "\n", "\n", "data_loader", "=", "DataLoader", "(", "\n", "self", ".", "training_container", ",", "\n", "collate_fn", "=", "data_transform", ".", "collate_fn", ",", "\n", "batch_size", "=", "32", ",", "\n", "num_workers", "=", "1", ",", "\n", ")", "\n", "dataset", "=", "[", "]", "\n", "for", "data", "in", "data_loader", ":", "\n", "            ", "dataset", ".", "append", "(", "data", ")", "\n", "", "self", ".", "assertGreater", "(", "len", "(", "dataset", ")", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_fasttext_embeddings_model.FastTextEmbeddingsModelIntegrationTest.test_givenAWindowsOS_whenFasttextModelCollateFnInDataLoaderForWindowsNumWorkers2_thenRaiseError": [[159, 177], ["unittest.skipIf", "deepparse.embeddings_models.FastTextEmbeddingsModel", "tests.embeddings_models.integration.tools.MockedDataTransform", "torch.utils.data.DataLoader", "test_integration_fasttext_embeddings_model.FastTextEmbeddingsModelIntegrationTest.assertGreater", "dataset.append", "len", "platform.system"], "methods", ["None"], ["", "@", "skipIf", "(", "platform", ".", "system", "(", ")", "!=", "\"Windows\"", ",", "\"Integration test on Windows env.\"", ")", "\n", "def", "test_givenAWindowsOS_whenFasttextModelCollateFnInDataLoaderForWindowsNumWorkers2_thenRaiseError", "(", "\n", "self", ",", "\n", ")", ":", "\n", "        ", "model", "=", "FastTextEmbeddingsModel", "(", "self", ".", "a_fasttext_model_path", ",", "verbose", "=", "self", ".", "verbose", ")", "\n", "\n", "data_transform", "=", "MockedDataTransform", "(", "model", ")", "\n", "\n", "data_loader", "=", "DataLoader", "(", "\n", "self", ".", "training_container", ",", "\n", "collate_fn", "=", "data_transform", ".", "collate_fn", ",", "\n", "batch_size", "=", "32", ",", "\n", "num_workers", "=", "2", ",", "\n", ")", "\n", "dataset", "=", "[", "]", "\n", "for", "data", "in", "data_loader", ":", "\n", "            ", "dataset", ".", "append", "(", "data", ")", "\n", "", "self", ".", "assertGreater", "(", "len", "(", "dataset", ")", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_fasttext_embeddings_model.FastTextEmbeddingsModelIntegrationTest.test_givenAWindowsOS_whenFasttextModelCollateFnInDataLoaderForNotWindows_thenRaiseError": [[178, 196], ["unittest.skipIf", "unittest.mock.patch", "tests.embeddings_models.integration.tools.MockedDataTransform", "torch.utils.data.DataLoader", "deepparse.embeddings_models.FastTextEmbeddingsModel", "test_integration_fasttext_embeddings_model.FastTextEmbeddingsModelIntegrationTest.assertRaises", "platform.system", "platform_mock.system"], "methods", ["None"], ["", "@", "skipIf", "(", "platform", ".", "system", "(", ")", "!=", "\"Windows\"", ",", "\"Integration test on Windows env.\"", ")", "\n", "@", "patch", "(", "\"deepparse.embeddings_models.fasttext_embeddings_model.platform\"", ")", "\n", "def", "test_givenAWindowsOS_whenFasttextModelCollateFnInDataLoaderForNotWindows_thenRaiseError", "(", "self", ",", "platform_mock", ")", ":", "\n", "        ", "platform_mock", ".", "system", "(", ")", ".", "__eq__", ".", "return_value", "=", "True", "\n", "with", "platform_mock", ":", "\n", "            ", "model", "=", "FastTextEmbeddingsModel", "(", "self", ".", "a_fasttext_model_path", ",", "verbose", "=", "self", ".", "verbose", ")", "\n", "\n", "", "data_transform", "=", "MockedDataTransform", "(", "model", ")", "\n", "\n", "data_loader", "=", "DataLoader", "(", "\n", "self", ".", "training_container", ",", "\n", "collate_fn", "=", "data_transform", ".", "collate_fn", ",", "\n", "batch_size", "=", "32", ",", "\n", "num_workers", "=", "0", ",", "\n", ")", "\n", "with", "self", ".", "assertRaises", "(", "TypeError", ")", ":", "\n", "            ", "for", "_", "in", "data_loader", ":", "\n", "                ", "pass", "\n", "", "", "", "", ""]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.tools.MockedDataTransform.__init__": [[3, 5], ["None"], "methods", ["None"], ["from", "typing", "import", "List", "\n", "\n", "import", "poutyne", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.tools.MockedDataTransform.collate_fn": [[6, 12], ["data_sample[].split", "words.append", "tools.MockedDataTransform.model"], "methods", ["None"], ["import", "requests", "\n", "\n", "from", ".", "data_error", "import", "DataError", "\n", "from", ".", "data_validation", "import", "(", "\n", "validate_if_any_none", ",", "\n", "validate_if_any_whitespace_only", ",", "\n", "validate_if_any_empty", ",", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_bpemb_embeddings_model.BPEmbEmbeddingsModelIntegrationTest.setUpClass": [[15, 22], ["super().setUpClass", "tempfile.TemporaryDirectory", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_seq2seq_fasttext_model_gpu.FastTextSeq2SeqIntegrationTest.setUpClass"], ["    ", "@", "classmethod", "\n", "def", "setUpClass", "(", "cls", ")", ":", "\n", "        ", "super", "(", "BPEmbEmbeddingsModelIntegrationTest", ",", "cls", ")", ".", "setUpClass", "(", ")", "\n", "cls", ".", "temp_dir_obj", "=", "TemporaryDirectory", "(", ")", "\n", "cls", ".", "fake_cache_path", "=", "os", ".", "path", ".", "join", "(", "cls", ".", "temp_dir_obj", ".", "name", ",", "\"fake_cache\"", ")", "\n", "\n", "cls", ".", "verbose", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_bpemb_embeddings_model.BPEmbEmbeddingsModelIntegrationTest.test_givenANewCacheDir_whenBPEmbModelInit_thenCreateNewCache": [[23, 28], ["unittest.skipIf", "deepparse.embeddings_models.BPEmbEmbeddingsModel", "test_integration_bpemb_embeddings_model.BPEmbEmbeddingsModelIntegrationTest.assertTrue", "os.path.exists", "platform.system", "os.path.join"], "methods", ["None"], ["", "@", "skipIf", "(", "platform", ".", "system", "(", ")", "==", "\"Windows\"", ",", "\"Integration test not on Windows env.\"", ")", "\n", "def", "test_givenANewCacheDir_whenBPEmbModelInit_thenCreateNewCache", "(", "self", ")", ":", "\n", "        ", "BPEmbEmbeddingsModel", "(", "self", ".", "fake_cache_path", ",", "verbose", "=", "self", ".", "verbose", ")", "\n", "\n", "self", ".", "assertTrue", "(", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "self", ".", "fake_cache_path", ",", "\"multi\"", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_bpemb_embeddings_model.BPEmbEmbeddingsModelIntegrationTest.test_givenAWindowsOS_whenBPEmbModelInit_thenLoadWithProperFunction": [[29, 34], ["unittest.skipIf", "deepparse.embeddings_models.BPEmbEmbeddingsModel", "test_integration_bpemb_embeddings_model.BPEmbEmbeddingsModelIntegrationTest.assertIsInstance", "platform.system"], "methods", ["None"], ["", "@", "skipIf", "(", "platform", ".", "system", "(", ")", "!=", "\"Windows\"", ",", "\"Integration test on Windows env.\"", ")", "\n", "def", "test_givenAWindowsOS_whenBPEmbModelInit_thenLoadWithProperFunction", "(", "self", ")", ":", "\n", "        ", "model", "=", "BPEmbEmbeddingsModel", "(", "self", ".", "fake_cache_path", ",", "verbose", "=", "self", ".", "verbose", ")", "\n", "\n", "self", ".", "assertIsInstance", "(", "model", ".", "model", ",", "BPEmb", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_bpemb_embeddings_model.BPEmbEmbeddingsModelIntegrationTest.test_givenANotWindowsOS_whenBPEmbModelInit_thenLoadWithProperFunction": [[35, 40], ["unittest.skipIf", "deepparse.embeddings_models.BPEmbEmbeddingsModel", "test_integration_bpemb_embeddings_model.BPEmbEmbeddingsModelIntegrationTest.assertIsInstance", "platform.system"], "methods", ["None"], ["", "@", "skipIf", "(", "platform", ".", "system", "(", ")", "==", "\"Windows\"", ",", "\"Integration test not on Windows env.\"", ")", "\n", "def", "test_givenANotWindowsOS_whenBPEmbModelInit_thenLoadWithProperFunction", "(", "self", ")", ":", "\n", "        ", "model", "=", "BPEmbEmbeddingsModel", "(", "self", ".", "fake_cache_path", ",", "verbose", "=", "self", ".", "verbose", ")", "\n", "\n", "self", ".", "assertIsInstance", "(", "model", ".", "model", ",", "BPEmb", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_bpemb_embeddings_model.BPEmbEmbeddingsModelIntegrationTest.test_givenAWindowsOS_whenBPEmbModelCollateFnInDataLoader_thenWorkProperly": [[41, 56], ["unittest.skipIf", "deepparse.embeddings_models.BPEmbEmbeddingsModel", "tests.embeddings_models.integration.tools.MockedDataTransform", "torch.utils.data.DataLoader", "test_integration_bpemb_embeddings_model.BPEmbEmbeddingsModelIntegrationTest.assertGreater", "dataset.append", "len", "platform.system"], "methods", ["None"], ["", "@", "skipIf", "(", "platform", ".", "system", "(", ")", "!=", "\"Windows\"", ",", "\"Integration test on Windows env.\"", ")", "\n", "def", "test_givenAWindowsOS_whenBPEmbModelCollateFnInDataLoader_thenWorkProperly", "(", "self", ")", ":", "\n", "        ", "model", "=", "BPEmbEmbeddingsModel", "(", "self", ".", "fake_cache_path", ",", "verbose", "=", "self", ".", "verbose", ")", "\n", "data_transform", "=", "MockedDataTransform", "(", "model", ")", "\n", "\n", "data_loader", "=", "DataLoader", "(", "\n", "self", ".", "training_container", ",", "\n", "collate_fn", "=", "data_transform", ".", "collate_fn", ",", "\n", "batch_size", "=", "32", ",", "\n", "num_workers", "=", "0", ",", "\n", ")", "\n", "dataset", "=", "[", "]", "\n", "for", "data", "in", "data_loader", ":", "\n", "            ", "dataset", ".", "append", "(", "data", ")", "\n", "", "self", ".", "assertGreater", "(", "len", "(", "dataset", ")", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_bpemb_embeddings_model.BPEmbEmbeddingsModelIntegrationTest.test_givenAWindowsOS_whenBPEmbModelCollateFnInDataLoaderNumWorkers1_thenWorkProperly": [[57, 74], ["unittest.skipIf", "deepparse.embeddings_models.BPEmbEmbeddingsModel", "tests.embeddings_models.integration.tools.MockedDataTransform", "torch.utils.data.DataLoader", "test_integration_bpemb_embeddings_model.BPEmbEmbeddingsModelIntegrationTest.assertGreater", "dataset.append", "len", "platform.system"], "methods", ["None"], ["", "@", "skipIf", "(", "platform", ".", "system", "(", ")", "!=", "\"Windows\"", ",", "\"Integration test on Windows env.\"", ")", "\n", "def", "test_givenAWindowsOS_whenBPEmbModelCollateFnInDataLoaderNumWorkers1_thenWorkProperly", "(", "\n", "self", ",", "\n", ")", ":", "\n", "        ", "model", "=", "BPEmbEmbeddingsModel", "(", "self", ".", "fake_cache_path", ",", "verbose", "=", "self", ".", "verbose", ")", "\n", "data_transform", "=", "MockedDataTransform", "(", "model", ")", "\n", "\n", "data_loader", "=", "DataLoader", "(", "\n", "self", ".", "training_container", ",", "\n", "collate_fn", "=", "data_transform", ".", "collate_fn", ",", "\n", "batch_size", "=", "32", ",", "\n", "num_workers", "=", "1", ",", "\n", ")", "\n", "dataset", "=", "[", "]", "\n", "for", "data", "in", "data_loader", ":", "\n", "            ", "dataset", ".", "append", "(", "data", ")", "\n", "", "self", ".", "assertGreater", "(", "len", "(", "dataset", ")", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_bpemb_embeddings_model.BPEmbEmbeddingsModelIntegrationTest.test_givenAWindowsOS_whenBPEmbModelCollateFnInDataLoaderNumWorkers2_thenWorkProperly": [[75, 92], ["unittest.skipIf", "deepparse.embeddings_models.BPEmbEmbeddingsModel", "tests.embeddings_models.integration.tools.MockedDataTransform", "torch.utils.data.DataLoader", "test_integration_bpemb_embeddings_model.BPEmbEmbeddingsModelIntegrationTest.assertGreater", "dataset.append", "len", "platform.system"], "methods", ["None"], ["", "@", "skipIf", "(", "platform", ".", "system", "(", ")", "!=", "\"Windows\"", ",", "\"Integration test on Windows env.\"", ")", "\n", "def", "test_givenAWindowsOS_whenBPEmbModelCollateFnInDataLoaderNumWorkers2_thenWorkProperly", "(", "\n", "self", ",", "\n", ")", ":", "\n", "        ", "model", "=", "BPEmbEmbeddingsModel", "(", "self", ".", "fake_cache_path", ",", "verbose", "=", "self", ".", "verbose", ")", "\n", "data_transform", "=", "MockedDataTransform", "(", "model", ")", "\n", "\n", "data_loader", "=", "DataLoader", "(", "\n", "self", ".", "training_container", ",", "\n", "collate_fn", "=", "data_transform", ".", "collate_fn", ",", "\n", "batch_size", "=", "32", ",", "\n", "num_workers", "=", "2", ",", "\n", ")", "\n", "dataset", "=", "[", "]", "\n", "for", "data", "in", "data_loader", ":", "\n", "            ", "dataset", ".", "append", "(", "data", ")", "\n", "", "self", ".", "assertGreater", "(", "len", "(", "dataset", ")", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_bpemb_embeddings_model.BPEmbEmbeddingsModelIntegrationTest.test_givenANotWindowsOS_whenBPEmbModelCollateFnInDataLoaderForWindows_thenWorkProperly": [[93, 111], ["unittest.skipIf", "deepparse.embeddings_models.BPEmbEmbeddingsModel", "tests.embeddings_models.integration.tools.MockedDataTransform", "torch.utils.data.DataLoader", "test_integration_bpemb_embeddings_model.BPEmbEmbeddingsModelIntegrationTest.assertGreater", "dataset.append", "len", "platform.system"], "methods", ["None"], ["", "@", "skipIf", "(", "platform", ".", "system", "(", ")", "==", "\"Windows\"", ",", "\"Integration test not on Windows env.\"", ")", "\n", "def", "test_givenANotWindowsOS_whenBPEmbModelCollateFnInDataLoaderForWindows_thenWorkProperly", "(", "\n", "self", ",", "\n", ")", ":", "\n", "        ", "model", "=", "BPEmbEmbeddingsModel", "(", "self", ".", "fake_cache_path", ",", "verbose", "=", "self", ".", "verbose", ")", "\n", "\n", "data_transform", "=", "MockedDataTransform", "(", "model", ")", "\n", "\n", "data_loader", "=", "DataLoader", "(", "\n", "self", ".", "training_container", ",", "\n", "collate_fn", "=", "data_transform", ".", "collate_fn", ",", "\n", "batch_size", "=", "32", ",", "\n", "num_workers", "=", "0", ",", "\n", ")", "\n", "dataset", "=", "[", "]", "\n", "for", "data", "in", "data_loader", ":", "\n", "            ", "dataset", ".", "append", "(", "data", ")", "\n", "", "self", ".", "assertGreater", "(", "len", "(", "dataset", ")", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_bpemb_embeddings_model.BPEmbEmbeddingsModelIntegrationTest.test_givenANotWindowsOS_whenBPEmbModelCollateFnInDataLoaderForWindowsNumWorkers1_thenWorkProperly": [[112, 130], ["unittest.skipIf", "deepparse.embeddings_models.BPEmbEmbeddingsModel", "tests.embeddings_models.integration.tools.MockedDataTransform", "torch.utils.data.DataLoader", "test_integration_bpemb_embeddings_model.BPEmbEmbeddingsModelIntegrationTest.assertGreater", "dataset.append", "len", "platform.system"], "methods", ["None"], ["", "@", "skipIf", "(", "platform", ".", "system", "(", ")", "==", "\"Windows\"", ",", "\"Integration test not on Windows env.\"", ")", "\n", "def", "test_givenANotWindowsOS_whenBPEmbModelCollateFnInDataLoaderForWindowsNumWorkers1_thenWorkProperly", "(", "\n", "self", ",", "\n", ")", ":", "\n", "        ", "model", "=", "BPEmbEmbeddingsModel", "(", "self", ".", "fake_cache_path", ",", "verbose", "=", "self", ".", "verbose", ")", "\n", "\n", "data_transform", "=", "MockedDataTransform", "(", "model", ")", "\n", "\n", "data_loader", "=", "DataLoader", "(", "\n", "self", ".", "training_container", ",", "\n", "collate_fn", "=", "data_transform", ".", "collate_fn", ",", "\n", "batch_size", "=", "32", ",", "\n", "num_workers", "=", "1", ",", "\n", ")", "\n", "dataset", "=", "[", "]", "\n", "for", "data", "in", "data_loader", ":", "\n", "            ", "dataset", ".", "append", "(", "data", ")", "\n", "", "self", ".", "assertGreater", "(", "len", "(", "dataset", ")", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_bpemb_embeddings_model.BPEmbEmbeddingsModelIntegrationTest.test_givenANotWindowsOS_whenBPEmbModelCollateFnInDataLoaderForWindowsNumWorkers2_thenWorkProperly": [[131, 149], ["unittest.skipIf", "deepparse.embeddings_models.BPEmbEmbeddingsModel", "tests.embeddings_models.integration.tools.MockedDataTransform", "torch.utils.data.DataLoader", "test_integration_bpemb_embeddings_model.BPEmbEmbeddingsModelIntegrationTest.assertGreater", "dataset.append", "len", "platform.system"], "methods", ["None"], ["", "@", "skipIf", "(", "platform", ".", "system", "(", ")", "==", "\"Windows\"", ",", "\"Integration test not on Windows env.\"", ")", "\n", "def", "test_givenANotWindowsOS_whenBPEmbModelCollateFnInDataLoaderForWindowsNumWorkers2_thenWorkProperly", "(", "\n", "self", ",", "\n", ")", ":", "\n", "        ", "model", "=", "BPEmbEmbeddingsModel", "(", "self", ".", "fake_cache_path", ",", "verbose", "=", "self", ".", "verbose", ")", "\n", "\n", "data_transform", "=", "MockedDataTransform", "(", "model", ")", "\n", "\n", "data_loader", "=", "DataLoader", "(", "\n", "self", ".", "training_container", ",", "\n", "collate_fn", "=", "data_transform", ".", "collate_fn", ",", "\n", "batch_size", "=", "32", ",", "\n", "num_workers", "=", "2", ",", "\n", ")", "\n", "dataset", "=", "[", "]", "\n", "for", "data", "in", "data_loader", ":", "\n", "            ", "dataset", ".", "append", "(", "data", ")", "\n", "", "self", ".", "assertGreater", "(", "len", "(", "dataset", ")", ",", "0", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_seq2seq_model_gpu.Seq2SeqIntegrationTest.setUp": [[16, 36], ["super().setUp", "deepparse.network.Seq2SeqModel", "test_integration_seq2seq_model_gpu.Seq2SeqIntegrationTest.encoder_input_setUp", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.models_evaluation.test_tools_models_evaluation.ToolsTests.setUp", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.base.Seq2SeqIntegrationTestCase.encoder_input_setUp"], ["    ", "def", "setUp", "(", "self", ")", "->", "None", ":", "\n", "        ", "super", "(", ")", ".", "setUp", "(", ")", "\n", "\n", "self", ".", "pre_trained_seq2seq_model", "=", "Seq2SeqModel", "(", "\n", "self", ".", "a_torch_device", ",", "\n", "input_size", "=", "self", ".", "input_size", ",", "\n", "encoder_hidden_size", "=", "self", ".", "encoder_hidden_size", ",", "\n", "encoder_num_layers", "=", "self", ".", "num_layers", ",", "\n", "decoder_hidden_size", "=", "self", ".", "decoder_hidden_size", ",", "\n", "decoder_num_layers", "=", "self", ".", "num_layers", ",", "\n", "output_size", "=", "self", ".", "output_size", ",", "\n", ")", "\n", "\n", "self", ".", "encoder_input_setUp", "(", "\n", "\"fasttext\"", ",", "self", ".", "a_torch_device", "\n", ")", "# fasttext since the simplest case (bpemb use a embedding layer)", "\n", "self", ".", "none_target", "=", "None", "# No target (for teacher forcing)", "\n", "self", ".", "a_value_greater_than_threshold", "=", "0.1", "\n", "\n", "self", ".", "a_target_vector", "=", "torch", ".", "tensor", "(", "[", "[", "0", ",", "1", ",", "1", ",", "4", ",", "5", ",", "8", "]", ",", "[", "1", ",", "0", ",", "3", ",", "8", ",", "0", ",", "0", "]", "]", ",", "device", "=", "self", ".", "a_torch_device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_seq2seq_model_gpu.Seq2SeqIntegrationTest.test_whenEncoderStep_thenEncoderStepIsOk": [[37, 57], ["test_integration_seq2seq_model_gpu.Seq2SeqIntegrationTest.pre_trained_seq2seq_model._encoder_step", "test_integration_seq2seq_model_gpu.Seq2SeqIntegrationTest.assertEqual", "test_integration_seq2seq_model_gpu.Seq2SeqIntegrationTest.assertTrue", "test_integration_seq2seq_model_gpu.Seq2SeqIntegrationTest.assertTrue", "test_integration_seq2seq_model_gpu.Seq2SeqIntegrationTest.assertEqual", "test_integration_seq2seq_model_gpu.Seq2SeqIntegrationTest.assertTrue", "test_integration_seq2seq_model_gpu.Seq2SeqIntegrationTest.assertTrue", "test_integration_seq2seq_model_gpu.Seq2SeqIntegrationTest.assertEqual", "test_integration_seq2seq_model_gpu.Seq2SeqIntegrationTest.assertEqual", "test_integration_seq2seq_model_gpu.Seq2SeqIntegrationTest.assertEqual", "test_integration_seq2seq_model_gpu.Seq2SeqIntegrationTest.assertEqual", "test_integration_seq2seq_model_gpu.Seq2SeqIntegrationTest.assertEqual", "len"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.network.seq2seq.Seq2SeqModel._encoder_step"], ["", "def", "test_whenEncoderStep_thenEncoderStepIsOk", "(", "self", ")", ":", "\n", "# encoding for two address: \"[\"15 major st london ontario n5z1e1\", \"15 major st london ontario n5z1e1\"]\"", "\n", "\n", "        ", "(", "decoder_input", ",", "decoder_hidden", ",", "encoder_outputs", ",", ")", "=", "self", ".", "pre_trained_seq2seq_model", ".", "_encoder_step", "(", "\n", "self", ".", "to_predict_tensor", ",", "self", ".", "a_lengths_tensor", ",", "self", ".", "a_batch_size", "\n", ")", "\n", "\n", "self", ".", "assertEqual", "(", "decoder_input", ".", "shape", "[", "1", "]", ",", "self", ".", "a_batch_size", ")", "\n", "self", ".", "assertTrue", "(", "decoder_input", "[", "0", "]", "[", "0", "]", "==", "self", ".", "begin_of_sequence_idx", ")", "\n", "self", ".", "assertTrue", "(", "decoder_input", "[", "0", "]", "[", "1", "]", "==", "self", ".", "begin_of_sequence_idx", ")", "\n", "\n", "self", ".", "assertEqual", "(", "encoder_outputs", ".", "shape", "[", "0", "]", ",", "self", ".", "a_batch_size", ")", "\n", "self", ".", "assertTrue", "(", "encoder_outputs", ".", "shape", "[", "1", "]", "==", "self", ".", "a_target_vector", ".", "shape", "[", "1", "]", ")", "# number of tokens (padded)", "\n", "self", ".", "assertTrue", "(", "encoder_outputs", ".", "shape", "[", "2", "]", "==", "self", ".", "encoder_hidden_size", ")", "\n", "\n", "self", ".", "assertEqual", "(", "len", "(", "decoder_hidden", ")", ",", "self", ".", "a_batch_size", ")", "\n", "self", ".", "assertEqual", "(", "decoder_hidden", "[", "0", "]", ".", "shape", "[", "2", "]", ",", "self", ".", "encoder_hidden_size", ")", "\n", "self", ".", "assertEqual", "(", "decoder_hidden", "[", "0", "]", ".", "shape", "[", "2", "]", ",", "self", ".", "encoder_hidden_size", ")", "\n", "self", ".", "assertEqual", "(", "decoder_hidden", "[", "1", "]", ".", "shape", "[", "2", "]", ",", "self", ".", "encoder_hidden_size", ")", "\n", "self", ".", "assertEqual", "(", "decoder_hidden", "[", "1", "]", ".", "shape", "[", "2", "]", ",", "self", ".", "encoder_hidden_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_seq2seq_model_gpu.Seq2SeqIntegrationTest.test_whenDecoderStep_thenDecoderStepIsOk": [[58, 73], ["test_integration_seq2seq_model_gpu.Seq2SeqIntegrationTest.encoder_output_setUp", "test_integration_seq2seq_model_gpu.Seq2SeqIntegrationTest.decoder_input_setUp", "test_integration_seq2seq_model_gpu.Seq2SeqIntegrationTest.pre_trained_seq2seq_model._decoder_step", "test_integration_seq2seq_model_gpu.Seq2SeqIntegrationTest.assert_output_is_valid_dim"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.base.Seq2SeqIntegrationTestCase.encoder_output_setUp", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_decoder.DecoderCase.decoder_input_setUp", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.network.seq2seq.Seq2SeqModel._decoder_step", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_encoder.EncoderCase.assert_output_is_valid_dim"], ["", "def", "test_whenDecoderStep_thenDecoderStepIsOk", "(", "self", ")", ":", "\n", "# decoding for two address: \"[\"15 major st london ontario n5z1e1\", \"15 major st london ontario n5z1e1\"]\"", "\n", "        ", "self", ".", "encoder_output_setUp", "(", "self", ".", "a_torch_device", ")", "\n", "self", ".", "decoder_input_setUp", "(", ")", "\n", "\n", "actual_prediction_sequence", "=", "self", ".", "pre_trained_seq2seq_model", ".", "_decoder_step", "(", "\n", "self", ".", "decoder_input", ",", "\n", "self", ".", "decoder_hidden_tensor", ",", "\n", "self", ".", "encoder_hidden", ",", "\n", "self", ".", "none_target", ",", "\n", "self", ".", "a_lengths_tensor", ",", "\n", "self", ".", "a_batch_size", ",", "\n", ")", "\n", "\n", "self", ".", "assert_output_is_valid_dim", "(", "actual_prediction_sequence", ",", "output_dim", "=", "self", ".", "number_of_tags", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_seq2seq_model_gpu.Seq2SeqIntegrationTest.test_whenDecoderStepTeacherForcing_thenDecoderStepIsOk": [[74, 89], ["test_integration_seq2seq_model_gpu.Seq2SeqIntegrationTest.encoder_output_setUp", "test_integration_seq2seq_model_gpu.Seq2SeqIntegrationTest.decoder_input_setUp", "test_integration_seq2seq_model_gpu.Seq2SeqIntegrationTest.pre_trained_seq2seq_model._decoder_step", "test_integration_seq2seq_model_gpu.Seq2SeqIntegrationTest.assert_output_is_valid_dim"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.base.Seq2SeqIntegrationTestCase.encoder_output_setUp", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_decoder.DecoderCase.decoder_input_setUp", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.network.seq2seq.Seq2SeqModel._decoder_step", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_encoder.EncoderCase.assert_output_is_valid_dim"], ["", "def", "test_whenDecoderStepTeacherForcing_thenDecoderStepIsOk", "(", "self", ")", ":", "\n", "# decoding for two address: \"[\"15 major st london ontario n5z1e1\", \"15 major st london ontario n5z1e1\"]\"", "\n", "        ", "self", ".", "encoder_output_setUp", "(", "self", ".", "a_torch_device", ")", "\n", "self", ".", "decoder_input_setUp", "(", ")", "\n", "\n", "actual_prediction_sequence", "=", "self", ".", "pre_trained_seq2seq_model", ".", "_decoder_step", "(", "\n", "self", ".", "decoder_input", ",", "\n", "self", ".", "decoder_hidden_tensor", ",", "\n", "self", ".", "encoder_hidden", ",", "\n", "self", ".", "a_target_vector", ",", "\n", "self", ".", "a_lengths_tensor", ",", "\n", "self", ".", "a_batch_size", ",", "\n", ")", "\n", "\n", "self", ".", "assert_output_is_valid_dim", "(", "actual_prediction_sequence", ",", "output_dim", "=", "self", ".", "number_of_tags", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_seq2seq_model_gpu.Seq2SeqIntegrationTest.test_whenDecoderStepWithTarget_thenUsesTarget": [[90, 108], ["unittest.mock.patch", "test_integration_seq2seq_model_gpu.Seq2SeqIntegrationTest.encoder_output_setUp", "test_integration_seq2seq_model_gpu.Seq2SeqIntegrationTest.decoder_input_setUp", "test_integration_seq2seq_model_gpu.Seq2SeqIntegrationTest.pre_trained_seq2seq_model._decoder_step", "random_mock.assert_called_once"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.base.Seq2SeqIntegrationTestCase.encoder_output_setUp", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_decoder.DecoderCase.decoder_input_setUp", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.network.seq2seq.Seq2SeqModel._decoder_step"], ["", "@", "patch", "(", "\"deepparse.network.seq2seq.random.random\"", ")", "\n", "def", "test_whenDecoderStepWithTarget_thenUsesTarget", "(", "self", ",", "random_mock", ")", ":", "\n", "        ", "random_mock", ".", "return_value", "=", "self", ".", "a_value_greater_than_threshold", "\n", "\n", "# decoding for two address: \"[\"15 major st london ontario n5z1e1\", \"15 major st london ontario n5z1e1\"]\"", "\n", "self", ".", "encoder_output_setUp", "(", "self", ".", "a_torch_device", ")", "\n", "self", ".", "decoder_input_setUp", "(", ")", "\n", "\n", "self", ".", "pre_trained_seq2seq_model", ".", "_decoder_step", "(", "\n", "self", ".", "decoder_input", ",", "\n", "self", ".", "decoder_hidden_tensor", ",", "\n", "self", ".", "encoder_hidden", ",", "\n", "self", ".", "a_target_vector", ",", "\n", "self", ".", "a_lengths_tensor", ",", "\n", "self", ".", "a_batch_size", ",", "\n", ")", "\n", "\n", "random_mock", ".", "assert_called_once", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_seq2seq_model_gpu.Seq2SeqIntegrationTest.test_whenDecoderStepWithoutTarget_thenDontUsesTarget": [[109, 127], ["unittest.mock.patch", "test_integration_seq2seq_model_gpu.Seq2SeqIntegrationTest.encoder_output_setUp", "test_integration_seq2seq_model_gpu.Seq2SeqIntegrationTest.decoder_input_setUp", "test_integration_seq2seq_model_gpu.Seq2SeqIntegrationTest.pre_trained_seq2seq_model._decoder_step", "random_mock.assert_not_called"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.base.Seq2SeqIntegrationTestCase.encoder_output_setUp", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_decoder.DecoderCase.decoder_input_setUp", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.network.seq2seq.Seq2SeqModel._decoder_step"], ["", "@", "patch", "(", "\"deepparse.network.seq2seq.random.random\"", ")", "\n", "def", "test_whenDecoderStepWithoutTarget_thenDontUsesTarget", "(", "self", ",", "random_mock", ")", ":", "\n", "        ", "random_mock", ".", "return_value", "=", "self", ".", "a_value_greater_than_threshold", "\n", "\n", "# decoding for two address: \"[\"15 major st london ontario n5z1e1\", \"15 major st london ontario n5z1e1\"]\"", "\n", "self", ".", "encoder_output_setUp", "(", "self", ".", "a_torch_device", ")", "\n", "self", ".", "decoder_input_setUp", "(", ")", "\n", "\n", "self", ".", "pre_trained_seq2seq_model", ".", "_decoder_step", "(", "\n", "self", ".", "decoder_input", ",", "\n", "self", ".", "decoder_hidden_tensor", ",", "\n", "self", ".", "encoder_hidden", ",", "\n", "self", ".", "none_target", ",", "\n", "self", ".", "a_lengths_tensor", ",", "\n", "self", ".", "a_batch_size", ",", "\n", ")", "\n", "\n", "random_mock", ".", "assert_not_called", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_embedding_network.EmbeddingNetworkTest.setUpClass": [[11, 38], ["torch.Tensor"], "methods", ["None"], ["    ", "@", "classmethod", "\n", "def", "setUpClass", "(", "cls", ")", ":", "\n", "        ", "cls", ".", "a_input_size", "=", "4", "\n", "cls", ".", "a_hidden_size", "=", "2", "\n", "cls", ".", "a_projection_size", "=", "4", "\n", "\n", "cls", ".", "a_subword_embeddings_tensor", "=", "torch", ".", "Tensor", "(", "\n", "[", "\n", "[", "\n", "[", "[", "1", ",", "1", ",", "1", ",", "1", "]", ",", "[", "1", ",", "1", ",", "1", ",", "1", "]", ",", "[", "1", ",", "1", ",", "1", ",", "1", "]", "]", ",", "\n", "[", "[", "1", ",", "1", ",", "1", ",", "1", "]", ",", "[", "0", ",", "0", ",", "0", ",", "0", "]", ",", "[", "0", ",", "0", ",", "0", ",", "0", "]", "]", ",", "\n", "[", "[", "1", ",", "1", ",", "1", ",", "1", "]", ",", "[", "1", ",", "1", ",", "1", ",", "1", "]", ",", "[", "0", ",", "0", ",", "0", ",", "0", "]", "]", ",", "\n", "]", ",", "\n", "[", "\n", "[", "[", "1", ",", "1", ",", "1", ",", "1", "]", ",", "[", "0", ",", "0", ",", "0", ",", "0", "]", ",", "[", "0", ",", "0", ",", "0", ",", "0", "]", "]", ",", "\n", "[", "[", "1", ",", "1", ",", "1", ",", "1", "]", ",", "[", "1", ",", "1", ",", "1", ",", "1", "]", ",", "[", "1", ",", "1", ",", "1", ",", "1", "]", "]", ",", "\n", "[", "[", "1", ",", "1", ",", "1", ",", "1", "]", ",", "[", "1", ",", "1", ",", "1", ",", "1", "]", ",", "[", "0", ",", "0", ",", "0", ",", "0", "]", "]", ",", "\n", "]", ",", "\n", "]", "\n", ")", "\n", "\n", "cls", ".", "a_decomposition_lengths_tuple", "=", "(", "[", "3", ",", "1", ",", "2", "]", ",", "[", "1", ",", "3", ",", "2", "]", ")", "\n", "\n", "cls", ".", "a_max_sequence_length", "=", "3", "\n", "cls", ".", "a_batch_size", "=", "2", "\n", "cls", ".", "a_embedding_dimension", "=", "4", "\n", "cls", ".", "a_post_maxpool_embedding_dimension", "=", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_embedding_network.EmbeddingNetworkTest.test_givenASubwordEmbeddingsTensor_whenCallingEmbeddingNetwork_thenShouldReturnTensorWithCorrectDimension": [[39, 49], ["deepparse.network.EmbeddingNetwork", "test_integration_embedding_network.EmbeddingNetworkTest.embedding_network", "test_integration_embedding_network.EmbeddingNetworkTest.assertEqual", "test_integration_embedding_network.EmbeddingNetworkTest.assertEqual", "test_integration_embedding_network.EmbeddingNetworkTest.assertEqual", "test_integration_embedding_network.EmbeddingNetworkTest.size", "test_integration_embedding_network.EmbeddingNetworkTest.size", "test_integration_embedding_network.EmbeddingNetworkTest.size"], "methods", ["None"], ["", "def", "test_givenASubwordEmbeddingsTensor_whenCallingEmbeddingNetwork_thenShouldReturnTensorWithCorrectDimension", "(", "\n", "self", ",", "\n", ")", ":", "\n", "        ", "self", ".", "embedding_network", "=", "EmbeddingNetwork", "(", "self", ".", "a_input_size", ",", "self", ".", "a_hidden_size", ",", "self", ".", "a_projection_size", ")", "\n", "\n", "result", "=", "self", ".", "embedding_network", "(", "self", ".", "a_subword_embeddings_tensor", ",", "self", ".", "a_decomposition_lengths_tuple", ")", "\n", "\n", "self", ".", "assertEqual", "(", "result", ".", "size", "(", "0", ")", ",", "self", ".", "a_batch_size", ")", "\n", "self", ".", "assertEqual", "(", "result", ".", "size", "(", "1", ")", ",", "self", ".", "a_max_sequence_length", ")", "\n", "self", ".", "assertEqual", "(", "result", ".", "size", "(", "2", ")", ",", "self", ".", "a_embedding_dimension", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_embedding_network.EmbeddingNetworkTest.test_givenASubwordEmbeddingsTensorAndMaxPool_whenCallingEmbeddingNetwork_thenShouldReturnTensorWithCorrectDimension": [[50, 66], ["deepparse.network.EmbeddingNetwork", "test_integration_embedding_network.EmbeddingNetworkTest.embedding_network", "test_integration_embedding_network.EmbeddingNetworkTest.assertEqual", "test_integration_embedding_network.EmbeddingNetworkTest.assertEqual", "test_integration_embedding_network.EmbeddingNetworkTest.assertEqual", "test_integration_embedding_network.EmbeddingNetworkTest.size", "test_integration_embedding_network.EmbeddingNetworkTest.size", "test_integration_embedding_network.EmbeddingNetworkTest.size"], "methods", ["None"], ["", "def", "test_givenASubwordEmbeddingsTensorAndMaxPool_whenCallingEmbeddingNetwork_thenShouldReturnTensorWithCorrectDimension", "(", "\n", "self", ",", "\n", ")", ":", "\n", "        ", "self", ".", "embedding_network", "=", "EmbeddingNetwork", "(", "\n", "self", ".", "a_input_size", ",", "\n", "self", ".", "a_hidden_size", ",", "\n", "self", ".", "a_projection_size", ",", "\n", "maxpool", "=", "True", ",", "\n", "maxpool_kernel_size", "=", "2", ",", "\n", ")", "\n", "\n", "result", "=", "self", ".", "embedding_network", "(", "self", ".", "a_subword_embeddings_tensor", ",", "self", ".", "a_decomposition_lengths_tuple", ")", "\n", "\n", "self", ".", "assertEqual", "(", "result", ".", "size", "(", "0", ")", ",", "self", ".", "a_batch_size", ")", "\n", "self", ".", "assertEqual", "(", "result", ".", "size", "(", "1", ")", ",", "self", ".", "a_max_sequence_length", ")", "\n", "self", ".", "assertEqual", "(", "result", ".", "size", "(", "2", ")", ",", "self", ".", "a_post_maxpool_embedding_dimension", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.base.Seq2SeqIntegrationTestCase.setUpClass": [[14, 45], ["torch.device", "torch.device", "torch.tensor", "tempfile.TemporaryDirectory", "os.path.join", "deepparse.download_from_url", "deepparse.download_from_url", "deepparse.download_from_url", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.deepparse.tools.download_from_url", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.deepparse.tools.download_from_url", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.deepparse.tools.download_from_url"], ["\n", "\n", "class", "AddressParserPredictTestCase", "(", "CaptureOutputTestCase", ")", ":", "\n", "    ", "@", "classmethod", "\n", "def", "setUpClass", "(", "cls", ")", ":", "\n", "        ", "cls", ".", "a_best_model_type", "=", "\"best\"", "\n", "cls", ".", "a_bpemb_model_type", "=", "\"bpemb\"", "\n", "cls", ".", "a_fastest_model_type", "=", "\"fastest\"", "\n", "cls", ".", "a_fasttext_model_type", "=", "\"fasttext\"", "\n", "cls", ".", "a_fasttext_lightest_model_type", "=", "\"lightest\"", "\n", "cls", ".", "a_fasttext_light_model_type", "=", "\"fasttext-light\"", "\n", "\n", "# A address parsing example", "\n", "cls", ".", "a_complete_address", "=", "\"15 major st london ontario n5z1e1\"", "\n", "cls", ".", "a_municipality", "=", "\"london\"", "\n", "cls", ".", "a_postal_code", "=", "\"n5z1e1\"", "\n", "cls", ".", "a_province", "=", "\"ontario\"", "\n", "cls", ".", "a_street_name", "=", "\"major st\"", "\n", "cls", ".", "a_street_number", "=", "\"15\"", "\n", "\n", "cls", ".", "a_logging_path", "=", "\"data\"", "\n", "\n", "", "def", "setUp", "(", "self", ")", ":", "\n", "# a prediction vector with real values", "\n", "        ", "self", ".", "a_prediction_vector_for_a_complete_address", "=", "tensor", "(", "\n", "[", "\n", "[", "\n", "[", "\n", "-", "6.7080e-04", ",", "\n", "-", "7.3572e00", ",", "\n", "-", "1.4086e01", ",", "\n", "-", "1.1092e01", ",", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.base.Seq2SeqIntegrationTestCase.models_setup": [[46, 55], ["deepparse.download_weights", "cls.retrain_file_name_format.format", "deepparse.download_from_url"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.deepparse.tools.download_weights", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.deepparse.tools.download_from_url"], ["-", "2.1749e01", ",", "\n", "-", "1.1060e01", ",", "\n", "-", "1.4627e01", ",", "\n", "-", "1.4654e01", ",", "\n", "-", "2.8624e01", ",", "\n", "]", "\n", "]", ",", "\n", "[", "\n", "[", "\n", "-", "1.5119e01", ",", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.base.Seq2SeqIntegrationTestCase.tearDownClass": [[56, 59], ["cls.temp_dir_obj.cleanup"], "methods", ["None"], ["-", "1.7881e-06", ",", "\n", "-", "1.7613e01", ",", "\n", "-", "1.3365e01", ",", "\n", "-", "2.9415e01", ",", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.base.Seq2SeqIntegrationTestCase.encoder_input_setUp": [[60, 67], ["base.Seq2SeqIntegrationTestCase.to_predict_tensor.to", "torch.tensor", "open", "pickle.load", "os.path.join"], "methods", ["None"], ["-", "2.3198e01", ",", "\n", "-", "2.2065e01", ",", "\n", "-", "2.2009e01", ",", "\n", "-", "4.0588e01", ",", "\n", "]", "\n", "]", ",", "\n", "[", "\n", "[", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.base.Seq2SeqIntegrationTestCase.encoder_output_setUp": [[68, 77], ["torch.tensor", "torch.rand", "open", "pickle.load", "base.Seq2SeqIntegrationTestCase.decoder_hidden_tensor[].to", "base.Seq2SeqIntegrationTestCase.decoder_hidden_tensor[].to", "os.path.join"], "methods", ["None"], ["-", "1.5922e01", ",", "\n", "-", "1.1903e-03", ",", "\n", "-", "1.3102e01", ",", "\n", "-", "6.7359e00", ",", "\n", "-", "2.4669e01", ",", "\n", "-", "1.7328e01", ",", "\n", "-", "1.9970e01", ",", "\n", "-", "1.9923e01", ",", "\n", "-", "4.0041e01", ",", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.base.Seq2SeqIntegrationTestCase.decoder_input_setUp": [[78, 80], ["base.Seq2SeqIntegrationTestCase.a_lengths_tensor[].item"], "methods", ["None"], ["]", ",", "\n", "[", "\n", "[", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.base.Seq2SeqIntegrationTestCase.assert_output_is_valid_dim": [[81, 85], ["base.Seq2SeqIntegrationTestCase.assertEqual", "base.Seq2SeqIntegrationTestCase.assertEqual", "base.Seq2SeqIntegrationTestCase.assertEqual"], "methods", ["None"], ["-", "1.9461e01", ",", "\n", "-", "1.3808e01", ",", "\n", "-", "1.5707e01", ",", "\n", "-", "2.0146e-05", ",", "\n", "-", "1.0881e01", ",", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_seq2seq_model_cpu.Seq2SeqIntegrationTest.setUp": [[20, 38], ["super().setUp", "deepparse.network.Seq2SeqModel", "test_integration_seq2seq_model_cpu.Seq2SeqIntegrationTest.encoder_input_setUp", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.models_evaluation.test_tools_models_evaluation.ToolsTests.setUp", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.base.Seq2SeqIntegrationTestCase.encoder_input_setUp"], ["    ", "def", "setUp", "(", "self", ")", "->", "None", ":", "\n", "        ", "super", "(", ")", ".", "setUp", "(", ")", "\n", "self", ".", "pre_trained_seq2seq_model", "=", "Seq2SeqModel", "(", "\n", "self", ".", "a_cpu_device", ",", "\n", "input_size", "=", "self", ".", "input_size", ",", "\n", "encoder_hidden_size", "=", "self", ".", "encoder_hidden_size", ",", "\n", "encoder_num_layers", "=", "self", ".", "num_layers", ",", "\n", "decoder_hidden_size", "=", "self", ".", "decoder_hidden_size", ",", "\n", "decoder_num_layers", "=", "self", ".", "num_layers", ",", "\n", "output_size", "=", "self", ".", "output_size", ",", "\n", ")", "\n", "self", ".", "encoder_input_setUp", "(", "\n", "\"fasttext\"", ",", "self", ".", "a_cpu_device", "\n", ")", "# fasttext since the simplest case (bpemb use a embedding layer)", "\n", "self", ".", "none_target", "=", "None", "# No target (for teacher forcing)", "\n", "self", ".", "a_value_greater_than_threshold", "=", "0.1", "\n", "\n", "self", ".", "a_target_vector", "=", "torch", ".", "tensor", "(", "[", "[", "0", ",", "1", ",", "1", ",", "4", ",", "5", ",", "8", "]", ",", "[", "1", ",", "0", ",", "3", ",", "8", ",", "0", ",", "0", "]", "]", ",", "device", "=", "self", ".", "a_cpu_device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_seq2seq_model_cpu.Seq2SeqIntegrationTest.test_whenEncoderStep_thenEncoderStepIsOk": [[39, 59], ["test_integration_seq2seq_model_cpu.Seq2SeqIntegrationTest.pre_trained_seq2seq_model._encoder_step", "test_integration_seq2seq_model_cpu.Seq2SeqIntegrationTest.assertEqual", "test_integration_seq2seq_model_cpu.Seq2SeqIntegrationTest.assertTrue", "test_integration_seq2seq_model_cpu.Seq2SeqIntegrationTest.assertTrue", "test_integration_seq2seq_model_cpu.Seq2SeqIntegrationTest.assertEqual", "test_integration_seq2seq_model_cpu.Seq2SeqIntegrationTest.assertTrue", "test_integration_seq2seq_model_cpu.Seq2SeqIntegrationTest.assertTrue", "test_integration_seq2seq_model_cpu.Seq2SeqIntegrationTest.assertEqual", "test_integration_seq2seq_model_cpu.Seq2SeqIntegrationTest.assertEqual", "test_integration_seq2seq_model_cpu.Seq2SeqIntegrationTest.assertEqual", "test_integration_seq2seq_model_cpu.Seq2SeqIntegrationTest.assertEqual", "test_integration_seq2seq_model_cpu.Seq2SeqIntegrationTest.assertEqual", "len"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.network.seq2seq.Seq2SeqModel._encoder_step"], ["", "def", "test_whenEncoderStep_thenEncoderStepIsOk", "(", "self", ")", ":", "\n", "# encoding for two address: \"[\"15 major st london ontario n5z1e1\", \"15 major st london ontario n5z1e1\"]\"", "\n", "\n", "        ", "(", "decoder_input", ",", "decoder_hidden", ",", "encoder_outputs", ",", ")", "=", "self", ".", "pre_trained_seq2seq_model", ".", "_encoder_step", "(", "\n", "self", ".", "to_predict_tensor", ",", "self", ".", "a_lengths_tensor", ",", "self", ".", "a_batch_size", "\n", ")", "\n", "\n", "self", ".", "assertEqual", "(", "decoder_input", ".", "shape", "[", "1", "]", ",", "self", ".", "a_batch_size", ")", "\n", "self", ".", "assertTrue", "(", "decoder_input", "[", "0", "]", "[", "0", "]", "==", "self", ".", "begin_of_sequence_idx", ")", "\n", "self", ".", "assertTrue", "(", "decoder_input", "[", "0", "]", "[", "1", "]", "==", "self", ".", "begin_of_sequence_idx", ")", "\n", "\n", "self", ".", "assertEqual", "(", "encoder_outputs", ".", "shape", "[", "0", "]", ",", "self", ".", "a_batch_size", ")", "\n", "self", ".", "assertTrue", "(", "encoder_outputs", ".", "shape", "[", "1", "]", "==", "self", ".", "a_target_vector", ".", "shape", "[", "1", "]", ")", "# number of tokens (padded)", "\n", "self", ".", "assertTrue", "(", "encoder_outputs", ".", "shape", "[", "2", "]", "==", "self", ".", "encoder_hidden_size", ")", "\n", "\n", "self", ".", "assertEqual", "(", "len", "(", "decoder_hidden", ")", ",", "self", ".", "a_batch_size", ")", "\n", "self", ".", "assertEqual", "(", "decoder_hidden", "[", "0", "]", ".", "shape", "[", "2", "]", ",", "self", ".", "encoder_hidden_size", ")", "\n", "self", ".", "assertEqual", "(", "decoder_hidden", "[", "0", "]", ".", "shape", "[", "2", "]", ",", "self", ".", "encoder_hidden_size", ")", "\n", "self", ".", "assertEqual", "(", "decoder_hidden", "[", "1", "]", ".", "shape", "[", "2", "]", ",", "self", ".", "encoder_hidden_size", ")", "\n", "self", ".", "assertEqual", "(", "decoder_hidden", "[", "1", "]", ".", "shape", "[", "2", "]", ",", "self", ".", "encoder_hidden_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_seq2seq_model_cpu.Seq2SeqIntegrationTest.test_whenDecoderStep_thenDecoderStepIsOk": [[60, 75], ["test_integration_seq2seq_model_cpu.Seq2SeqIntegrationTest.encoder_output_setUp", "test_integration_seq2seq_model_cpu.Seq2SeqIntegrationTest.decoder_input_setUp", "test_integration_seq2seq_model_cpu.Seq2SeqIntegrationTest.pre_trained_seq2seq_model._decoder_step", "test_integration_seq2seq_model_cpu.Seq2SeqIntegrationTest.assert_output_is_valid_dim"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.base.Seq2SeqIntegrationTestCase.encoder_output_setUp", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_decoder.DecoderCase.decoder_input_setUp", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.network.seq2seq.Seq2SeqModel._decoder_step", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_encoder.EncoderCase.assert_output_is_valid_dim"], ["", "def", "test_whenDecoderStep_thenDecoderStepIsOk", "(", "self", ")", ":", "\n", "# decoding for two address: \"[\"15 major st london ontario n5z1e1\", \"15 major st london ontario n5z1e1\"]\"", "\n", "        ", "self", ".", "encoder_output_setUp", "(", "self", ".", "a_cpu_device", ")", "\n", "self", ".", "decoder_input_setUp", "(", ")", "\n", "\n", "actual_prediction_sequence", "=", "self", ".", "pre_trained_seq2seq_model", ".", "_decoder_step", "(", "\n", "self", ".", "decoder_input", ",", "\n", "self", ".", "decoder_hidden_tensor", ",", "\n", "self", ".", "encoder_hidden", ",", "\n", "self", ".", "none_target", ",", "\n", "self", ".", "a_lengths_tensor", ",", "\n", "self", ".", "a_batch_size", ",", "\n", ")", "\n", "\n", "self", ".", "assert_output_is_valid_dim", "(", "actual_prediction_sequence", ",", "output_dim", "=", "self", ".", "number_of_tags", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_seq2seq_model_cpu.Seq2SeqIntegrationTest.test_whenDecoderStepTeacherForcing_thenDecoderStepIsOk": [[76, 91], ["test_integration_seq2seq_model_cpu.Seq2SeqIntegrationTest.encoder_output_setUp", "test_integration_seq2seq_model_cpu.Seq2SeqIntegrationTest.decoder_input_setUp", "test_integration_seq2seq_model_cpu.Seq2SeqIntegrationTest.pre_trained_seq2seq_model._decoder_step", "test_integration_seq2seq_model_cpu.Seq2SeqIntegrationTest.assert_output_is_valid_dim"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.base.Seq2SeqIntegrationTestCase.encoder_output_setUp", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_decoder.DecoderCase.decoder_input_setUp", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.network.seq2seq.Seq2SeqModel._decoder_step", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_encoder.EncoderCase.assert_output_is_valid_dim"], ["", "def", "test_whenDecoderStepTeacherForcing_thenDecoderStepIsOk", "(", "self", ")", ":", "\n", "# decoding for two address: \"[\"15 major st london ontario n5z1e1\", \"15 major st london ontario n5z1e1\"]\"", "\n", "        ", "self", ".", "encoder_output_setUp", "(", "self", ".", "a_cpu_device", ")", "\n", "self", ".", "decoder_input_setUp", "(", ")", "\n", "\n", "actual_prediction_sequence", "=", "self", ".", "pre_trained_seq2seq_model", ".", "_decoder_step", "(", "\n", "self", ".", "decoder_input", ",", "\n", "self", ".", "decoder_hidden_tensor", ",", "\n", "self", ".", "encoder_hidden", ",", "\n", "self", ".", "a_target_vector", ",", "\n", "self", ".", "a_lengths_tensor", ",", "\n", "self", ".", "a_batch_size", ",", "\n", ")", "\n", "\n", "self", ".", "assert_output_is_valid_dim", "(", "actual_prediction_sequence", ",", "output_dim", "=", "self", ".", "number_of_tags", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_seq2seq_model_cpu.Seq2SeqIntegrationTest.test_whenDecoderStepWithTarget_thenUsesTarget": [[92, 110], ["unittest.mock.patch", "test_integration_seq2seq_model_cpu.Seq2SeqIntegrationTest.encoder_output_setUp", "test_integration_seq2seq_model_cpu.Seq2SeqIntegrationTest.decoder_input_setUp", "test_integration_seq2seq_model_cpu.Seq2SeqIntegrationTest.pre_trained_seq2seq_model._decoder_step", "random_mock.assert_called_once"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.base.Seq2SeqIntegrationTestCase.encoder_output_setUp", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_decoder.DecoderCase.decoder_input_setUp", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.network.seq2seq.Seq2SeqModel._decoder_step"], ["", "@", "patch", "(", "\"deepparse.network.seq2seq.random.random\"", ")", "\n", "def", "test_whenDecoderStepWithTarget_thenUsesTarget", "(", "self", ",", "random_mock", ")", ":", "\n", "        ", "random_mock", ".", "return_value", "=", "self", ".", "a_value_greater_than_threshold", "\n", "\n", "# decoding for two address: \"[\"15 major st london ontario n5z1e1\", \"15 major st london ontario n5z1e1\"]\"", "\n", "self", ".", "encoder_output_setUp", "(", "self", ".", "a_cpu_device", ")", "\n", "self", ".", "decoder_input_setUp", "(", ")", "\n", "\n", "self", ".", "pre_trained_seq2seq_model", ".", "_decoder_step", "(", "\n", "self", ".", "decoder_input", ",", "\n", "self", ".", "decoder_hidden_tensor", ",", "\n", "self", ".", "encoder_hidden", ",", "\n", "self", ".", "a_target_vector", ",", "\n", "self", ".", "a_lengths_tensor", ",", "\n", "self", ".", "a_batch_size", ",", "\n", ")", "\n", "\n", "random_mock", ".", "assert_called_once", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_seq2seq_model_cpu.Seq2SeqIntegrationTest.test_whenDecoderStepWithoutTarget_thenDontUsesTarget": [[111, 129], ["unittest.mock.patch", "test_integration_seq2seq_model_cpu.Seq2SeqIntegrationTest.encoder_output_setUp", "test_integration_seq2seq_model_cpu.Seq2SeqIntegrationTest.decoder_input_setUp", "test_integration_seq2seq_model_cpu.Seq2SeqIntegrationTest.pre_trained_seq2seq_model._decoder_step", "random_mock.assert_not_called"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.base.Seq2SeqIntegrationTestCase.encoder_output_setUp", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_decoder.DecoderCase.decoder_input_setUp", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.network.seq2seq.Seq2SeqModel._decoder_step"], ["", "@", "patch", "(", "\"deepparse.network.seq2seq.random.random\"", ")", "\n", "def", "test_whenDecoderStepWithoutTarget_thenDontUsesTarget", "(", "self", ",", "random_mock", ")", ":", "\n", "        ", "random_mock", ".", "return_value", "=", "self", ".", "a_value_greater_than_threshold", "\n", "\n", "# decoding for two address: \"[\"15 major st london ontario n5z1e1\", \"15 major st london ontario n5z1e1\"]\"", "\n", "self", ".", "encoder_output_setUp", "(", "self", ".", "a_cpu_device", ")", "\n", "self", ".", "decoder_input_setUp", "(", ")", "\n", "\n", "self", ".", "pre_trained_seq2seq_model", ".", "_decoder_step", "(", "\n", "self", ".", "decoder_input", ",", "\n", "self", ".", "decoder_hidden_tensor", ",", "\n", "self", ".", "encoder_hidden", ",", "\n", "self", ".", "none_target", ",", "\n", "self", ".", "a_lengths_tensor", ",", "\n", "self", ".", "a_batch_size", ",", "\n", ")", "\n", "\n", "random_mock", ".", "assert_not_called", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_seq2seq_bpemb_model_cpu.BPEmbSeq2SeqIntegrationTest.setUpClass": [[19, 24], ["super().setUpClass", "cls.models_setup", "os.path.join", "cls.retrain_file_name_format.format"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_seq2seq_fasttext_model_gpu.FastTextSeq2SeqIntegrationTest.setUpClass", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.base.Seq2SeqIntegrationTestCase.models_setup"], ["    ", "@", "classmethod", "\n", "def", "setUpClass", "(", "cls", ")", ":", "\n", "        ", "super", "(", "BPEmbSeq2SeqIntegrationTest", ",", "cls", ")", ".", "setUpClass", "(", ")", "\n", "cls", ".", "models_setup", "(", "model_type", "=", "\"bpemb\"", ",", "cache_dir", "=", "cls", ".", "path", ")", "\n", "cls", ".", "a_retrain_model_path", "=", "os", ".", "path", ".", "join", "(", "cls", ".", "path", ",", "cls", ".", "retrain_file_name_format", ".", "format", "(", "\"bpemb\"", ")", "+", "\".ckpt\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_seq2seq_bpemb_model_cpu.BPEmbSeq2SeqIntegrationTest.setUp": [[25, 31], ["test_integration_seq2seq_bpemb_model_cpu.BPEmbSeq2SeqIntegrationTest.encoder_input_setUp", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.base.Seq2SeqIntegrationTestCase.encoder_input_setUp"], ["", "def", "setUp", "(", "self", ")", "->", "None", ":", "\n", "# will load the weights if not local", "\n", "        ", "self", ".", "encoder_input_setUp", "(", "\"bpemb\"", ",", "self", ".", "a_cpu_device", ")", "\n", "self", ".", "decomposition_lengths", "=", "[", "[", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "6", "]", ",", "[", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "6", "]", "]", "\n", "\n", "self", ".", "a_target_vector", "=", "torch", ".", "tensor", "(", "[", "[", "0", ",", "1", ",", "1", ",", "4", ",", "5", ",", "8", "]", ",", "[", "1", ",", "0", ",", "3", ",", "8", ",", "0", ",", "0", "]", "]", ",", "device", "=", "self", ".", "a_cpu_device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_seq2seq_bpemb_model_cpu.BPEmbSeq2SeqIntegrationTest.test_whenForwardStep_thenStepIsOk": [[32, 42], ["deepparse.network.BPEmbSeq2SeqModel", "test_integration_seq2seq_bpemb_model_cpu.BPEmbSeq2SeqIntegrationTest.decoder_input_setUp", "test_integration_seq2seq_bpemb_model_cpu.BPEmbSeq2SeqIntegrationTest.seq2seq_model.forward", "test_integration_seq2seq_bpemb_model_cpu.BPEmbSeq2SeqIntegrationTest.assert_output_is_valid_dim"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_decoder.DecoderCase.decoder_input_setUp", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.network.embedding_network.EmbeddingNetwork.forward", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_encoder.EncoderCase.assert_output_is_valid_dim"], ["", "def", "test_whenForwardStep_thenStepIsOk", "(", "self", ")", ":", "\n", "        ", "self", ".", "seq2seq_model", "=", "BPEmbSeq2SeqModel", "(", "self", ".", "cache_dir", ",", "self", ".", "a_cpu_device", ",", "output_size", "=", "self", ".", "number_of_tags", ")", "\n", "# forward pass for two address: \"[\"15 major st london ontario n5z1e1\", \"15 major st london ontario n5z1e1\"]\"", "\n", "self", ".", "decoder_input_setUp", "(", ")", "\n", "\n", "predictions", "=", "self", ".", "seq2seq_model", ".", "forward", "(", "\n", "self", ".", "to_predict_tensor", ",", "self", ".", "decomposition_lengths", ",", "self", ".", "a_lengths_tensor", "\n", ")", "\n", "\n", "self", ".", "assert_output_is_valid_dim", "(", "predictions", ",", "output_dim", "=", "self", ".", "number_of_tags", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_seq2seq_bpemb_model_cpu.BPEmbSeq2SeqIntegrationTest.test_whenForwardStepWithTarget_thenStepIsOk": [[43, 56], ["deepparse.network.BPEmbSeq2SeqModel", "test_integration_seq2seq_bpemb_model_cpu.BPEmbSeq2SeqIntegrationTest.decoder_input_setUp", "test_integration_seq2seq_bpemb_model_cpu.BPEmbSeq2SeqIntegrationTest.seq2seq_model.forward", "test_integration_seq2seq_bpemb_model_cpu.BPEmbSeq2SeqIntegrationTest.assert_output_is_valid_dim"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_decoder.DecoderCase.decoder_input_setUp", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.network.embedding_network.EmbeddingNetwork.forward", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_encoder.EncoderCase.assert_output_is_valid_dim"], ["", "def", "test_whenForwardStepWithTarget_thenStepIsOk", "(", "self", ")", ":", "\n", "        ", "self", ".", "seq2seq_model", "=", "BPEmbSeq2SeqModel", "(", "self", ".", "cache_dir", ",", "self", ".", "a_cpu_device", ",", "output_size", "=", "self", ".", "number_of_tags", ")", "\n", "# forward pass for two address: \"[\"15 major st london ontario n5z1e1\", \"15 major st london ontario n5z1e1\"]\"", "\n", "self", ".", "decoder_input_setUp", "(", ")", "\n", "\n", "predictions", "=", "self", ".", "seq2seq_model", ".", "forward", "(", "\n", "self", ".", "to_predict_tensor", ",", "\n", "self", ".", "decomposition_lengths", ",", "\n", "self", ".", "a_lengths_tensor", ",", "\n", "self", ".", "a_target_vector", ",", "\n", ")", "\n", "\n", "self", ".", "assert_output_is_valid_dim", "(", "predictions", ",", "output_dim", "=", "self", ".", "number_of_tags", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_seq2seq_bpemb_model_cpu.BPEmbSeq2SeqIntegrationTest.test_retrainedModel_whenForwardStep_thenStepIsOk": [[57, 73], ["deepparse.network.BPEmbSeq2SeqModel", "test_integration_seq2seq_bpemb_model_cpu.BPEmbSeq2SeqIntegrationTest.decoder_input_setUp", "test_integration_seq2seq_bpemb_model_cpu.BPEmbSeq2SeqIntegrationTest.seq2seq_model.forward", "test_integration_seq2seq_bpemb_model_cpu.BPEmbSeq2SeqIntegrationTest.assert_output_is_valid_dim"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_decoder.DecoderCase.decoder_input_setUp", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.network.embedding_network.EmbeddingNetwork.forward", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_encoder.EncoderCase.assert_output_is_valid_dim"], ["", "def", "test_retrainedModel_whenForwardStep_thenStepIsOk", "(", "self", ")", ":", "\n", "        ", "self", ".", "seq2seq_model", "=", "BPEmbSeq2SeqModel", "(", "\n", "self", ".", "cache_dir", ",", "\n", "self", ".", "a_cpu_device", ",", "\n", "output_size", "=", "self", ".", "re_trained_output_dim", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", "path_to_retrained_model", "=", "self", ".", "a_retrain_model_path", ",", "\n", ")", "\n", "# forward pass for two address: \"[\"15 major st london ontario n5z1e1\", \"15 major st london ontario n5z1e1\"]\"", "\n", "self", ".", "decoder_input_setUp", "(", ")", "\n", "\n", "predictions", "=", "self", ".", "seq2seq_model", ".", "forward", "(", "\n", "self", ".", "to_predict_tensor", ",", "self", ".", "decomposition_lengths", ",", "self", ".", "a_lengths_tensor", "\n", ")", "\n", "\n", "self", ".", "assert_output_is_valid_dim", "(", "predictions", ",", "output_dim", "=", "self", ".", "re_trained_output_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_seq2seq_bpemb_model_cpu.BPEmbSeq2SeqIntegrationTest.test_retrainedModel_whenForwardStepWithTarget_thenStepIsOk": [[74, 93], ["deepparse.network.BPEmbSeq2SeqModel", "test_integration_seq2seq_bpemb_model_cpu.BPEmbSeq2SeqIntegrationTest.decoder_input_setUp", "test_integration_seq2seq_bpemb_model_cpu.BPEmbSeq2SeqIntegrationTest.seq2seq_model.forward", "test_integration_seq2seq_bpemb_model_cpu.BPEmbSeq2SeqIntegrationTest.assert_output_is_valid_dim"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_decoder.DecoderCase.decoder_input_setUp", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.network.embedding_network.EmbeddingNetwork.forward", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_encoder.EncoderCase.assert_output_is_valid_dim"], ["", "def", "test_retrainedModel_whenForwardStepWithTarget_thenStepIsOk", "(", "self", ")", ":", "\n", "        ", "self", ".", "seq2seq_model", "=", "BPEmbSeq2SeqModel", "(", "\n", "self", ".", "cache_dir", ",", "\n", "self", ".", "a_cpu_device", ",", "\n", "output_size", "=", "self", ".", "re_trained_output_dim", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", "path_to_retrained_model", "=", "self", ".", "a_retrain_model_path", ",", "\n", ")", "\n", "# forward pass for two address: \"[\"15 major st london ontario n5z1e1\", \"15 major st london ontario n5z1e1\"]\"", "\n", "self", ".", "decoder_input_setUp", "(", ")", "\n", "\n", "predictions", "=", "self", ".", "seq2seq_model", ".", "forward", "(", "\n", "self", ".", "to_predict_tensor", ",", "\n", "self", ".", "decomposition_lengths", ",", "\n", "self", ".", "a_lengths_tensor", ",", "\n", "self", ".", "a_target_vector", ",", "\n", ")", "\n", "\n", "self", ".", "assert_output_is_valid_dim", "(", "predictions", ",", "output_dim", "=", "self", ".", "re_trained_output_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_decoder.DecoderCase.setUpClass": [[16, 31], ["tempfile.TemporaryDirectory", "os.path.join", "deepparse.download_from_url", "torch.device", "torch.device"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.deepparse.tools.download_from_url"], ["    ", "@", "classmethod", "\n", "def", "setUpClass", "(", "cls", ")", ":", "\n", "        ", "cls", ".", "temp_dir_obj", "=", "TemporaryDirectory", "(", ")", "\n", "cls", ".", "weights_dir", "=", "os", ".", "path", ".", "join", "(", "cls", ".", "temp_dir_obj", ".", "name", ",", "\"./weights\"", ")", "\n", "\n", "download_from_url", "(", "file_name", "=", "\"decoder_hidden\"", ",", "saving_dir", "=", "cls", ".", "weights_dir", ",", "file_extension", "=", "\"p\"", ")", "\n", "\n", "cls", ".", "a_torch_device", "=", "torch", ".", "device", "(", "\"cuda:0\"", ")", "\n", "cls", ".", "a_cpu_device", "=", "torch", ".", "device", "(", "\"cpu\"", ")", "\n", "\n", "cls", ".", "input_size_dim", "=", "1", "\n", "cls", ".", "hidden_size", "=", "1024", "\n", "cls", ".", "num_layers", "=", "1", "\n", "cls", ".", "a_batch_size", "=", "2", "\n", "cls", ".", "sequence_len", "=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_decoder.DecoderCase.tearDownClass": [[32, 35], ["cls.temp_dir_obj.cleanup"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "tearDownClass", "(", "cls", ")", "->", "None", ":", "\n", "        ", "cls", ".", "temp_dir_obj", ".", "cleanup", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_decoder.DecoderCase.setUp_encoder_decoder": [[36, 46], ["deepparse.network.Decoder", "test_integration_decoder.DecoderCase.decoder.to", "test_integration_decoder.DecoderCase.decoder_input_setUp"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_decoder.DecoderCase.decoder_input_setUp"], ["", "def", "setUp_encoder_decoder", "(", "self", ",", "output_size", ":", "int", ",", "device", ":", "torch", ".", "device", ",", "attention_mechanism", ")", "->", "None", ":", "\n", "        ", "self", ".", "decoder", "=", "Decoder", "(", "\n", "self", ".", "input_size_dim", ",", "\n", "self", ".", "hidden_size", ",", "\n", "self", ".", "num_layers", ",", "\n", "output_size", ",", "\n", "attention_mechanism", "=", "attention_mechanism", ",", "\n", ")", "\n", "self", ".", "decoder", ".", "to", "(", "device", ")", "# we mount it into the device", "\n", "self", ".", "decoder_input_setUp", "(", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_decoder.DecoderCase.decoder_input_setUp": [[47, 58], ["torch.tensor", "torch.tensor", "torch.rand", "open", "pickle.load", "test_integration_decoder.DecoderCase.decoder_hidden_tensor[].to", "test_integration_decoder.DecoderCase.decoder_hidden_tensor[].to", "os.path.join"], "methods", ["None"], ["", "def", "decoder_input_setUp", "(", "self", ",", "device", ":", "torch", ".", "device", ")", ":", "\n", "        ", "self", ".", "decoder_input", "=", "torch", ".", "tensor", "(", "[", "[", "[", "-", "1", "]", ",", "[", "-", "1", "]", "]", "]", ",", "device", "=", "device", ")", "\n", "self", ".", "a_lengths_tensor", "=", "torch", ".", "tensor", "(", "(", "[", "self", ".", "sequence_len", ",", "self", ".", "sequence_len", "]", ")", ",", "device", "=", "\"cpu\"", ")", "\n", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "weights_dir", ",", "\"decoder_hidden.p\"", ")", ",", "\"rb\"", ")", "as", "file", ":", "\n", "            ", "self", ".", "decoder_hidden_tensor", "=", "pickle", ".", "load", "(", "file", ")", "\n", "", "self", ".", "decoder_hidden_tensor", "=", "(", "\n", "self", ".", "decoder_hidden_tensor", "[", "0", "]", ".", "to", "(", "device", ")", ",", "\n", "self", ".", "decoder_hidden_tensor", "[", "1", "]", ".", "to", "(", "device", ")", ",", "\n", ")", "\n", "self", ".", "decoder_output", "=", "torch", ".", "rand", "(", "(", "1", ",", "self", ".", "sequence_len", ",", "self", ".", "hidden_size", ")", ",", "device", "=", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_decoder.DecoderCase.assert_predictions_is_valid_dim": [[59, 62], ["test_integration_decoder.DecoderCase.assertEqual", "test_integration_decoder.DecoderCase.assertEqual"], "methods", ["None"], ["", "def", "assert_predictions_is_valid_dim", "(", "self", ",", "actual_predictions", ",", "output_size", ":", "int", ")", ":", "\n", "        ", "self", ".", "assertEqual", "(", "self", ".", "a_batch_size", ",", "actual_predictions", ".", "shape", "[", "0", "]", ")", "\n", "self", ".", "assertEqual", "(", "output_size", ",", "actual_predictions", ".", "shape", "[", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_decoder.DecoderCase.assert_hidden_is_valid_dim": [[63, 68], ["test_integration_decoder.DecoderCase.assertEqual", "test_integration_decoder.DecoderCase.assertEqual", "test_integration_decoder.DecoderCase.assertEqual"], "methods", ["None"], ["", "def", "assert_hidden_is_valid_dim", "(", "self", ",", "actual_predictions", ")", ":", "\n", "        ", "for", "actual_prediction", "in", "actual_predictions", ":", "\n", "            ", "self", ".", "assertEqual", "(", "self", ".", "num_layers", ",", "actual_prediction", ".", "shape", "[", "0", "]", ")", "\n", "self", ".", "assertEqual", "(", "self", ".", "a_batch_size", ",", "actual_prediction", ".", "shape", "[", "1", "]", ")", "\n", "self", ".", "assertEqual", "(", "self", ".", "hidden_size", ",", "actual_prediction", ".", "shape", "[", "2", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_decoder.DecoderGPUTest.test_whenForwardStepGPU_thenStepIsOk": [[72, 85], ["test_integration_decoder.DecoderGPUTest.setUp_encoder_decoder", "test_integration_decoder.DecoderGPUTest.decoder.forward", "test_integration_decoder.DecoderGPUTest.assert_predictions_is_valid_dim", "test_integration_decoder.DecoderGPUTest.assert_hidden_is_valid_dim", "test_integration_decoder.DecoderGPUTest.assertIsNone"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_decoder.DecoderCase.setUp_encoder_decoder", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.network.embedding_network.EmbeddingNetwork.forward", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_decoder.DecoderCase.assert_predictions_is_valid_dim", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_decoder.DecoderCase.assert_hidden_is_valid_dim"], ["    ", "def", "test_whenForwardStepGPU_thenStepIsOk", "(", "self", ")", ":", "\n", "        ", "output_size", "=", "9", "\n", "self", ".", "setUp_encoder_decoder", "(", "output_size", ",", "self", ".", "a_torch_device", ",", "attention_mechanism", "=", "False", ")", "\n", "predictions", ",", "hidden", ",", "att_weights", "=", "self", ".", "decoder", ".", "forward", "(", "\n", "self", ".", "decoder_input", ",", "\n", "self", ".", "decoder_hidden_tensor", ",", "\n", "self", ".", "decoder_output", ",", "\n", "self", ".", "a_lengths_tensor", ",", "\n", ")", "\n", "\n", "self", ".", "assert_predictions_is_valid_dim", "(", "predictions", ",", "output_size", ")", "\n", "self", ".", "assert_hidden_is_valid_dim", "(", "hidden", ")", "\n", "self", ".", "assertIsNone", "(", "att_weights", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_decoder.DecoderGPUTest.test_whenForwardAttStepGPU_thenStepIsOk": [[86, 99], ["test_integration_decoder.DecoderGPUTest.setUp_encoder_decoder", "test_integration_decoder.DecoderGPUTest.decoder.forward", "test_integration_decoder.DecoderGPUTest.assert_predictions_is_valid_dim", "test_integration_decoder.DecoderGPUTest.assert_hidden_is_valid_dim", "test_integration_decoder.DecoderGPUTest.assertIsNotNone"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_decoder.DecoderCase.setUp_encoder_decoder", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.network.embedding_network.EmbeddingNetwork.forward", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_decoder.DecoderCase.assert_predictions_is_valid_dim", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_decoder.DecoderCase.assert_hidden_is_valid_dim"], ["", "def", "test_whenForwardAttStepGPU_thenStepIsOk", "(", "self", ")", ":", "\n", "        ", "output_size", "=", "9", "\n", "self", ".", "setUp_encoder_decoder", "(", "output_size", ",", "self", ".", "a_torch_device", ",", "attention_mechanism", "=", "True", ")", "\n", "predictions", ",", "hidden", ",", "att_weights", "=", "self", ".", "decoder", ".", "forward", "(", "\n", "self", ".", "decoder_input", ",", "\n", "self", ".", "decoder_hidden_tensor", ",", "\n", "self", ".", "decoder_output", ",", "\n", "self", ".", "a_lengths_tensor", ",", "\n", ")", "\n", "\n", "self", ".", "assert_predictions_is_valid_dim", "(", "predictions", ",", "output_size", ")", "\n", "self", ".", "assert_hidden_is_valid_dim", "(", "hidden", ")", "\n", "self", ".", "assertIsNotNone", "(", "att_weights", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_decoder.DecoderGPUTest.test_whenForwardStepDim10GPU_thenStepIsOk": [[100, 113], ["test_integration_decoder.DecoderGPUTest.setUp_encoder_decoder", "test_integration_decoder.DecoderGPUTest.decoder.forward", "test_integration_decoder.DecoderGPUTest.assert_predictions_is_valid_dim", "test_integration_decoder.DecoderGPUTest.assert_hidden_is_valid_dim", "test_integration_decoder.DecoderGPUTest.assertIsNone"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_decoder.DecoderCase.setUp_encoder_decoder", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.network.embedding_network.EmbeddingNetwork.forward", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_decoder.DecoderCase.assert_predictions_is_valid_dim", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_decoder.DecoderCase.assert_hidden_is_valid_dim"], ["", "def", "test_whenForwardStepDim10GPU_thenStepIsOk", "(", "self", ")", ":", "\n", "        ", "output_size", "=", "10", "\n", "self", ".", "setUp_encoder_decoder", "(", "output_size", ",", "self", ".", "a_torch_device", ",", "attention_mechanism", "=", "False", ")", "\n", "predictions", ",", "hidden", ",", "att_weights", "=", "self", ".", "decoder", ".", "forward", "(", "\n", "self", ".", "decoder_input", ",", "\n", "self", ".", "decoder_hidden_tensor", ",", "\n", "self", ".", "decoder_output", ",", "\n", "self", ".", "a_lengths_tensor", ",", "\n", ")", "\n", "\n", "self", ".", "assert_predictions_is_valid_dim", "(", "predictions", ",", "output_size", ")", "\n", "self", ".", "assert_hidden_is_valid_dim", "(", "hidden", ")", "\n", "self", ".", "assertIsNone", "(", "att_weights", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_decoder.DecoderCPUTest.test_whenForwardStepCPU_thenStepIsOk": [[116, 129], ["test_integration_decoder.DecoderCPUTest.setUp_encoder_decoder", "test_integration_decoder.DecoderCPUTest.decoder.forward", "test_integration_decoder.DecoderCPUTest.assert_predictions_is_valid_dim", "test_integration_decoder.DecoderCPUTest.assert_hidden_is_valid_dim", "test_integration_decoder.DecoderCPUTest.assertIsNone"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_decoder.DecoderCase.setUp_encoder_decoder", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.network.embedding_network.EmbeddingNetwork.forward", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_decoder.DecoderCase.assert_predictions_is_valid_dim", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_decoder.DecoderCase.assert_hidden_is_valid_dim"], ["    ", "def", "test_whenForwardStepCPU_thenStepIsOk", "(", "self", ")", ":", "\n", "        ", "output_size", "=", "9", "\n", "self", ".", "setUp_encoder_decoder", "(", "output_size", ",", "self", ".", "a_cpu_device", ",", "attention_mechanism", "=", "False", ")", "\n", "predictions", ",", "hidden", ",", "att_weights", "=", "self", ".", "decoder", ".", "forward", "(", "\n", "self", ".", "decoder_input", ",", "\n", "self", ".", "decoder_hidden_tensor", ",", "\n", "self", ".", "decoder_output", ",", "\n", "self", ".", "a_lengths_tensor", ",", "\n", ")", "\n", "\n", "self", ".", "assert_predictions_is_valid_dim", "(", "predictions", ",", "output_size", ")", "\n", "self", ".", "assert_hidden_is_valid_dim", "(", "hidden", ")", "\n", "self", ".", "assertIsNone", "(", "att_weights", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_decoder.DecoderCPUTest.test_whenForwardAttStepCPU_thenStepIsOk": [[130, 143], ["test_integration_decoder.DecoderCPUTest.setUp_encoder_decoder", "test_integration_decoder.DecoderCPUTest.decoder.forward", "test_integration_decoder.DecoderCPUTest.assert_predictions_is_valid_dim", "test_integration_decoder.DecoderCPUTest.assert_hidden_is_valid_dim", "test_integration_decoder.DecoderCPUTest.assertIsNotNone"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_decoder.DecoderCase.setUp_encoder_decoder", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.network.embedding_network.EmbeddingNetwork.forward", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_decoder.DecoderCase.assert_predictions_is_valid_dim", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_decoder.DecoderCase.assert_hidden_is_valid_dim"], ["", "def", "test_whenForwardAttStepCPU_thenStepIsOk", "(", "self", ")", ":", "\n", "        ", "output_size", "=", "9", "\n", "self", ".", "setUp_encoder_decoder", "(", "output_size", ",", "self", ".", "a_cpu_device", ",", "attention_mechanism", "=", "True", ")", "\n", "predictions", ",", "hidden", ",", "att_weights", "=", "self", ".", "decoder", ".", "forward", "(", "\n", "self", ".", "decoder_input", ",", "\n", "self", ".", "decoder_hidden_tensor", ",", "\n", "self", ".", "decoder_output", ",", "\n", "self", ".", "a_lengths_tensor", ",", "\n", ")", "\n", "\n", "self", ".", "assert_predictions_is_valid_dim", "(", "predictions", ",", "output_size", ")", "\n", "self", ".", "assert_hidden_is_valid_dim", "(", "hidden", ")", "\n", "self", ".", "assertIsNotNone", "(", "att_weights", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_decoder.DecoderCPUTest.test_whenForwardStepDim10CPU_thenStepIsOk": [[144, 157], ["test_integration_decoder.DecoderCPUTest.setUp_encoder_decoder", "test_integration_decoder.DecoderCPUTest.decoder.forward", "test_integration_decoder.DecoderCPUTest.assert_predictions_is_valid_dim", "test_integration_decoder.DecoderCPUTest.assert_hidden_is_valid_dim", "test_integration_decoder.DecoderCPUTest.assertIsNone"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_decoder.DecoderCase.setUp_encoder_decoder", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.network.embedding_network.EmbeddingNetwork.forward", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_decoder.DecoderCase.assert_predictions_is_valid_dim", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_decoder.DecoderCase.assert_hidden_is_valid_dim"], ["", "def", "test_whenForwardStepDim10CPU_thenStepIsOk", "(", "self", ")", ":", "\n", "        ", "output_size", "=", "10", "\n", "self", ".", "setUp_encoder_decoder", "(", "output_size", ",", "self", ".", "a_cpu_device", ",", "attention_mechanism", "=", "False", ")", "\n", "predictions", ",", "hidden", ",", "att_weights", "=", "self", ".", "decoder", ".", "forward", "(", "\n", "self", ".", "decoder_input", ",", "\n", "self", ".", "decoder_hidden_tensor", ",", "\n", "self", ".", "decoder_output", ",", "\n", "self", ".", "a_lengths_tensor", ",", "\n", ")", "\n", "\n", "self", ".", "assert_predictions_is_valid_dim", "(", "predictions", ",", "output_size", ")", "\n", "self", ".", "assert_hidden_is_valid_dim", "(", "hidden", ")", "\n", "self", ".", "assertIsNone", "(", "att_weights", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_encoder.EncoderCase.setUpClass": [[16, 32], ["torch.device", "torch.device", "tempfile.TemporaryDirectory", "os.path.join", "deepparse.download_from_url"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.deepparse.tools.download_from_url"], ["    ", "@", "classmethod", "\n", "def", "setUpClass", "(", "cls", ")", ":", "\n", "        ", "cls", ".", "a_torch_device", "=", "torch", ".", "device", "(", "\"cuda:0\"", ")", "\n", "cls", ".", "a_cpu_device", "=", "torch", ".", "device", "(", "\"cpu\"", ")", "\n", "\n", "cls", ".", "input_size_dim", "=", "300", "\n", "cls", ".", "hidden_size", "=", "1024", "\n", "cls", ".", "num_layers", "=", "1", "\n", "cls", ".", "a_batch_size", "=", "2", "\n", "\n", "cls", ".", "temp_dir_obj", "=", "TemporaryDirectory", "(", ")", "\n", "cls", ".", "weights_dir", "=", "os", ".", "path", ".", "join", "(", "cls", ".", "temp_dir_obj", ".", "name", ",", "\"weights\"", ")", "\n", "download_from_url", "(", "\n", "file_name", "=", "\"to_predict_fasttext\"", ",", "\n", "saving_dir", "=", "cls", ".", "weights_dir", ",", "\n", "file_extension", "=", "\"p\"", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_encoder.EncoderCase.tearDownClass": [[34, 37], ["cls.temp_dir_obj.cleanup"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "tearDownClass", "(", "cls", ")", "->", "None", ":", "\n", "        ", "cls", ".", "temp_dir_obj", ".", "cleanup", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_encoder.EncoderCase.setUp_encoder": [[38, 49], ["deepparse.network.Encoder", "test_integration_encoder.EncoderCase.encoder.to", "test_integration_encoder.EncoderCase.to_predict_tensor.to", "torch.tensor", "test_integration_encoder.EncoderCase.a_lengths_tensor[].item", "open", "pickle.load", "os.path.join"], "methods", ["None"], ["", "def", "setUp_encoder", "(", "self", ",", "device", ":", "torch", ".", "device", ")", "->", "None", ":", "\n", "        ", "self", ".", "encoder", "=", "Encoder", "(", "self", ".", "input_size_dim", ",", "self", ".", "hidden_size", ",", "self", ".", "num_layers", ")", "\n", "self", ".", "encoder", ".", "to", "(", "device", ")", "# we mount it into the device", "\n", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "weights_dir", ",", "\"to_predict_fasttext.p\"", ")", ",", "\"rb\"", ")", "as", "file", ":", "\n", "            ", "self", ".", "to_predict_tensor", "=", "pickle", ".", "load", "(", "file", ")", "\n", "", "self", ".", "to_predict_tensor", "=", "self", ".", "to_predict_tensor", ".", "to", "(", "device", ")", "\n", "\n", "self", ".", "a_lengths_tensor", "=", "torch", ".", "tensor", "(", "[", "6", ",", "6", "]", ",", "device", "=", "device", ")", "\n", "\n", "self", ".", "max_length", "=", "self", ".", "a_lengths_tensor", "[", "0", "]", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_encoder.EncoderCase.assert_output_is_valid_dim": [[50, 55], ["test_integration_encoder.EncoderCase.assertEqual", "len", "test_integration_encoder.EncoderCase.assertEqual", "test_integration_encoder.EncoderCase.assertEqual"], "methods", ["None"], ["", "def", "assert_output_is_valid_dim", "(", "self", ",", "actual_predictions", ")", ":", "\n", "        ", "self", ".", "assertEqual", "(", "self", ".", "a_batch_size", ",", "len", "(", "actual_predictions", ")", ")", "\n", "for", "actual_prediction", "in", "actual_predictions", ":", "\n", "            ", "self", ".", "assertEqual", "(", "self", ".", "max_length", ",", "actual_prediction", ".", "shape", "[", "0", "]", ")", "\n", "self", ".", "assertEqual", "(", "self", ".", "hidden_size", ",", "actual_prediction", ".", "shape", "[", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_encoder.EncoderGPUTest.test_whenForwardStepGPU_thenStepIsOk": [[59, 64], ["test_integration_encoder.EncoderGPUTest.setUp_encoder", "test_integration_encoder.EncoderGPUTest.encoder.forward", "test_integration_encoder.EncoderGPUTest.assert_output_is_valid_dim"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_encoder.EncoderCase.setUp_encoder", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.network.embedding_network.EmbeddingNetwork.forward", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_encoder.EncoderCase.assert_output_is_valid_dim"], ["    ", "def", "test_whenForwardStepGPU_thenStepIsOk", "(", "self", ")", ":", "\n", "        ", "self", ".", "setUp_encoder", "(", "self", ".", "a_torch_device", ")", "\n", "predictions", ",", "_", "=", "self", ".", "encoder", ".", "forward", "(", "self", ".", "to_predict_tensor", ",", "self", ".", "a_lengths_tensor", ")", "\n", "\n", "self", ".", "assert_output_is_valid_dim", "(", "predictions", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_encoder.EncoderCPUTest.test_whenForwardStepCPU_thenStepIsOk": [[67, 73], ["test_integration_encoder.EncoderCPUTest.setUp_encoder", "test_integration_encoder.EncoderCPUTest.encoder.forward", "test_integration_encoder.EncoderCPUTest.assert_output_is_valid_dim"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_encoder.EncoderCase.setUp_encoder", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.network.embedding_network.EmbeddingNetwork.forward", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_encoder.EncoderCase.assert_output_is_valid_dim"], ["    ", "def", "test_whenForwardStepCPU_thenStepIsOk", "(", "self", ")", ":", "\n", "        ", "self", ".", "setUp_encoder", "(", "self", ".", "a_cpu_device", ")", "\n", "\n", "predictions", ",", "_", "=", "self", ".", "encoder", ".", "forward", "(", "self", ".", "to_predict_tensor", ",", "self", ".", "a_lengths_tensor", ")", "\n", "\n", "self", ".", "assert_output_is_valid_dim", "(", "predictions", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_seq2seq_bpemb_model_gpu.BPEmbSeq2SeqIntegrationTest.setUpClass": [[16, 21], ["super().setUpClass", "cls.models_setup", "os.path.join", "cls.retrain_file_name_format.format"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_seq2seq_fasttext_model_gpu.FastTextSeq2SeqIntegrationTest.setUpClass", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.base.Seq2SeqIntegrationTestCase.models_setup"], ["    ", "@", "classmethod", "\n", "def", "setUpClass", "(", "cls", ")", ":", "\n", "        ", "super", "(", "BPEmbSeq2SeqIntegrationTest", ",", "cls", ")", ".", "setUpClass", "(", ")", "\n", "cls", ".", "models_setup", "(", "model_type", "=", "\"bpemb\"", ",", "cache_dir", "=", "cls", ".", "path", ")", "\n", "cls", ".", "a_retrain_model_path", "=", "os", ".", "path", ".", "join", "(", "cls", ".", "path", ",", "cls", ".", "retrain_file_name_format", ".", "format", "(", "\"bpemb\"", ")", "+", "\".ckpt\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_seq2seq_bpemb_model_gpu.BPEmbSeq2SeqIntegrationTest.setUp": [[22, 28], ["test_integration_seq2seq_bpemb_model_gpu.BPEmbSeq2SeqIntegrationTest.encoder_input_setUp", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.base.Seq2SeqIntegrationTestCase.encoder_input_setUp"], ["", "def", "setUp", "(", "self", ")", "->", "None", ":", "\n", "# will load the weights if not local", "\n", "        ", "self", ".", "encoder_input_setUp", "(", "\"bpemb\"", ",", "self", ".", "a_torch_device", ")", "\n", "self", ".", "decomposition_lengths", "=", "[", "[", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "6", "]", ",", "[", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "6", "]", "]", "\n", "\n", "self", ".", "a_target_vector", "=", "torch", ".", "tensor", "(", "[", "[", "0", ",", "1", ",", "1", ",", "4", ",", "5", ",", "8", "]", ",", "[", "1", ",", "0", ",", "3", ",", "8", ",", "0", ",", "0", "]", "]", ",", "device", "=", "self", ".", "a_torch_device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_seq2seq_bpemb_model_gpu.BPEmbSeq2SeqIntegrationTest.test_whenForwardStep_thenStepIsOk": [[29, 39], ["deepparse.network.BPEmbSeq2SeqModel", "test_integration_seq2seq_bpemb_model_gpu.BPEmbSeq2SeqIntegrationTest.decoder_input_setUp", "test_integration_seq2seq_bpemb_model_gpu.BPEmbSeq2SeqIntegrationTest.seq2seq_model.forward", "test_integration_seq2seq_bpemb_model_gpu.BPEmbSeq2SeqIntegrationTest.assert_output_is_valid_dim"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_decoder.DecoderCase.decoder_input_setUp", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.network.embedding_network.EmbeddingNetwork.forward", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_encoder.EncoderCase.assert_output_is_valid_dim"], ["", "def", "test_whenForwardStep_thenStepIsOk", "(", "self", ")", ":", "\n", "        ", "self", ".", "seq2seq_model", "=", "BPEmbSeq2SeqModel", "(", "self", ".", "cache_dir", ",", "self", ".", "a_torch_device", ",", "output_size", "=", "self", ".", "number_of_tags", ")", "\n", "# forward pass for two address: \"[\"15 major st london ontario n5z1e1\", \"15 major st london ontario n5z1e1\"]\"", "\n", "self", ".", "decoder_input_setUp", "(", ")", "\n", "\n", "predictions", "=", "self", ".", "seq2seq_model", ".", "forward", "(", "\n", "self", ".", "to_predict_tensor", ",", "self", ".", "decomposition_lengths", ",", "self", ".", "a_lengths_tensor", "\n", ")", "\n", "\n", "self", ".", "assert_output_is_valid_dim", "(", "predictions", ",", "output_dim", "=", "self", ".", "number_of_tags", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_seq2seq_bpemb_model_gpu.BPEmbSeq2SeqIntegrationTest.test_whenForwardStepWithTarget_thenStepIsOk": [[40, 53], ["deepparse.network.BPEmbSeq2SeqModel", "test_integration_seq2seq_bpemb_model_gpu.BPEmbSeq2SeqIntegrationTest.decoder_input_setUp", "test_integration_seq2seq_bpemb_model_gpu.BPEmbSeq2SeqIntegrationTest.seq2seq_model.forward", "test_integration_seq2seq_bpemb_model_gpu.BPEmbSeq2SeqIntegrationTest.assert_output_is_valid_dim"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_decoder.DecoderCase.decoder_input_setUp", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.network.embedding_network.EmbeddingNetwork.forward", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_encoder.EncoderCase.assert_output_is_valid_dim"], ["", "def", "test_whenForwardStepWithTarget_thenStepIsOk", "(", "self", ")", ":", "\n", "        ", "self", ".", "seq2seq_model", "=", "BPEmbSeq2SeqModel", "(", "self", ".", "cache_dir", ",", "self", ".", "a_torch_device", ",", "output_size", "=", "self", ".", "number_of_tags", ")", "\n", "# forward pass for two address: \"[\"15 major st london ontario n5z1e1\", \"15 major st london ontario n5z1e1\"]\"", "\n", "self", ".", "decoder_input_setUp", "(", ")", "\n", "\n", "predictions", "=", "self", ".", "seq2seq_model", ".", "forward", "(", "\n", "self", ".", "to_predict_tensor", ",", "\n", "self", ".", "decomposition_lengths", ",", "\n", "self", ".", "a_lengths_tensor", ",", "\n", "self", ".", "a_target_vector", ",", "\n", ")", "\n", "\n", "self", ".", "assert_output_is_valid_dim", "(", "predictions", ",", "output_dim", "=", "self", ".", "number_of_tags", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_seq2seq_bpemb_model_gpu.BPEmbSeq2SeqIntegrationTest.test_retrainedModel_whenForwardStep_thenStepIsOk": [[54, 70], ["deepparse.network.BPEmbSeq2SeqModel", "test_integration_seq2seq_bpemb_model_gpu.BPEmbSeq2SeqIntegrationTest.decoder_input_setUp", "test_integration_seq2seq_bpemb_model_gpu.BPEmbSeq2SeqIntegrationTest.seq2seq_model.forward", "test_integration_seq2seq_bpemb_model_gpu.BPEmbSeq2SeqIntegrationTest.assert_output_is_valid_dim"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_decoder.DecoderCase.decoder_input_setUp", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.network.embedding_network.EmbeddingNetwork.forward", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_encoder.EncoderCase.assert_output_is_valid_dim"], ["", "def", "test_retrainedModel_whenForwardStep_thenStepIsOk", "(", "self", ")", ":", "\n", "        ", "self", ".", "seq2seq_model", "=", "BPEmbSeq2SeqModel", "(", "\n", "self", ".", "cache_dir", ",", "\n", "self", ".", "a_torch_device", ",", "\n", "output_size", "=", "self", ".", "re_trained_output_dim", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", "path_to_retrained_model", "=", "self", ".", "a_retrain_model_path", ",", "\n", ")", "\n", "# forward pass for two address: \"[\"15 major st london ontario n5z1e1\", \"15 major st london ontario n5z1e1\"]\"", "\n", "self", ".", "decoder_input_setUp", "(", ")", "\n", "\n", "predictions", "=", "self", ".", "seq2seq_model", ".", "forward", "(", "\n", "self", ".", "to_predict_tensor", ",", "self", ".", "decomposition_lengths", ",", "self", ".", "a_lengths_tensor", "\n", ")", "\n", "\n", "self", ".", "assert_output_is_valid_dim", "(", "predictions", ",", "output_dim", "=", "self", ".", "re_trained_output_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_seq2seq_bpemb_model_gpu.BPEmbSeq2SeqIntegrationTest.test_retrainedModel_whenForwardStepWithTarget_thenStepIsOk": [[71, 90], ["deepparse.network.BPEmbSeq2SeqModel", "test_integration_seq2seq_bpemb_model_gpu.BPEmbSeq2SeqIntegrationTest.decoder_input_setUp", "test_integration_seq2seq_bpemb_model_gpu.BPEmbSeq2SeqIntegrationTest.seq2seq_model.forward", "test_integration_seq2seq_bpemb_model_gpu.BPEmbSeq2SeqIntegrationTest.assert_output_is_valid_dim"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_decoder.DecoderCase.decoder_input_setUp", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.network.embedding_network.EmbeddingNetwork.forward", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_encoder.EncoderCase.assert_output_is_valid_dim"], ["", "def", "test_retrainedModel_whenForwardStepWithTarget_thenStepIsOk", "(", "self", ")", ":", "\n", "        ", "self", ".", "seq2seq_model", "=", "BPEmbSeq2SeqModel", "(", "\n", "self", ".", "cache_dir", ",", "\n", "self", ".", "a_torch_device", ",", "\n", "output_size", "=", "self", ".", "re_trained_output_dim", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", "path_to_retrained_model", "=", "self", ".", "a_retrain_model_path", ",", "\n", ")", "\n", "# forward pass for two address: \"[\"15 major st london ontario n5z1e1\", \"15 major st london ontario n5z1e1\"]\"", "\n", "self", ".", "decoder_input_setUp", "(", ")", "\n", "\n", "predictions", "=", "self", ".", "seq2seq_model", ".", "forward", "(", "\n", "self", ".", "to_predict_tensor", ",", "\n", "self", ".", "decomposition_lengths", ",", "\n", "self", ".", "a_lengths_tensor", ",", "\n", "self", ".", "a_target_vector", ",", "\n", ")", "\n", "\n", "self", ".", "assert_output_is_valid_dim", "(", "predictions", ",", "output_dim", "=", "self", ".", "re_trained_output_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_seq2seq_fasttext_model_cpu.FastTextSeq2SeqIntegrationTest.setUpClass": [[19, 24], ["super().setUpClass", "cls.models_setup", "os.path.join", "cls.retrain_file_name_format.format"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_seq2seq_fasttext_model_gpu.FastTextSeq2SeqIntegrationTest.setUpClass", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.base.Seq2SeqIntegrationTestCase.models_setup"], ["    ", "@", "classmethod", "\n", "def", "setUpClass", "(", "cls", ")", ":", "\n", "        ", "super", "(", "FastTextSeq2SeqIntegrationTest", ",", "cls", ")", ".", "setUpClass", "(", ")", "\n", "cls", ".", "models_setup", "(", "model_type", "=", "\"fasttext\"", ",", "cache_dir", "=", "cls", ".", "path", ")", "\n", "cls", ".", "a_retrain_model_path", "=", "os", ".", "path", ".", "join", "(", "cls", ".", "path", ",", "cls", ".", "retrain_file_name_format", ".", "format", "(", "\"fasttext\"", ")", "+", "\".ckpt\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_seq2seq_fasttext_model_cpu.FastTextSeq2SeqIntegrationTest.setUp": [[25, 31], ["super().setUp", "test_integration_seq2seq_fasttext_model_cpu.FastTextSeq2SeqIntegrationTest.encoder_input_setUp", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.models_evaluation.test_tools_models_evaluation.ToolsTests.setUp", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.base.Seq2SeqIntegrationTestCase.encoder_input_setUp"], ["", "def", "setUp", "(", "self", ")", "->", "None", ":", "\n", "        ", "super", "(", ")", ".", "setUp", "(", ")", "\n", "# will load the weights if not local", "\n", "self", ".", "encoder_input_setUp", "(", "\"fasttext\"", ",", "self", ".", "a_cpu_device", ")", "\n", "\n", "self", ".", "a_target_vector", "=", "torch", ".", "tensor", "(", "[", "[", "0", ",", "1", ",", "1", ",", "4", ",", "5", ",", "8", "]", ",", "[", "1", ",", "0", ",", "3", ",", "8", ",", "0", ",", "0", "]", "]", ",", "device", "=", "self", ".", "a_cpu_device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_seq2seq_fasttext_model_cpu.FastTextSeq2SeqIntegrationTest.test_whenForwardStep_thenStepIsOk": [[32, 40], ["deepparse.network.FastTextSeq2SeqModel", "test_integration_seq2seq_fasttext_model_cpu.FastTextSeq2SeqIntegrationTest.decoder_input_setUp", "test_integration_seq2seq_fasttext_model_cpu.FastTextSeq2SeqIntegrationTest.seq2seq_model.forward", "test_integration_seq2seq_fasttext_model_cpu.FastTextSeq2SeqIntegrationTest.assert_output_is_valid_dim"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_decoder.DecoderCase.decoder_input_setUp", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.network.embedding_network.EmbeddingNetwork.forward", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_encoder.EncoderCase.assert_output_is_valid_dim"], ["", "def", "test_whenForwardStep_thenStepIsOk", "(", "self", ")", ":", "\n", "        ", "self", ".", "seq2seq_model", "=", "FastTextSeq2SeqModel", "(", "self", ".", "cache_dir", ",", "self", ".", "a_cpu_device", ",", "output_size", "=", "self", ".", "number_of_tags", ")", "\n", "# forward pass for two address: \"[\"15 major st london ontario n5z1e1\", \"15 major st london ontario n5z1e1\"]\"", "\n", "self", ".", "decoder_input_setUp", "(", ")", "\n", "\n", "predictions", "=", "self", ".", "seq2seq_model", ".", "forward", "(", "self", ".", "to_predict_tensor", ",", "self", ".", "a_lengths_tensor", ")", "\n", "\n", "self", ".", "assert_output_is_valid_dim", "(", "predictions", ",", "output_dim", "=", "self", ".", "number_of_tags", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_seq2seq_fasttext_model_cpu.FastTextSeq2SeqIntegrationTest.test_whenForwardStepWithTarget_thenStepIsOk": [[41, 49], ["deepparse.network.FastTextSeq2SeqModel", "test_integration_seq2seq_fasttext_model_cpu.FastTextSeq2SeqIntegrationTest.decoder_input_setUp", "test_integration_seq2seq_fasttext_model_cpu.FastTextSeq2SeqIntegrationTest.seq2seq_model.forward", "test_integration_seq2seq_fasttext_model_cpu.FastTextSeq2SeqIntegrationTest.assert_output_is_valid_dim"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_decoder.DecoderCase.decoder_input_setUp", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.network.embedding_network.EmbeddingNetwork.forward", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_encoder.EncoderCase.assert_output_is_valid_dim"], ["", "def", "test_whenForwardStepWithTarget_thenStepIsOk", "(", "self", ")", ":", "\n", "        ", "self", ".", "seq2seq_model", "=", "FastTextSeq2SeqModel", "(", "self", ".", "cache_dir", ",", "self", ".", "a_cpu_device", ",", "output_size", "=", "self", ".", "number_of_tags", ")", "\n", "# forward pass for two address: \"[\"15 major st london ontario n5z1e1\", \"15 major st london ontario n5z1e1\"]\"", "\n", "self", ".", "decoder_input_setUp", "(", ")", "\n", "\n", "predictions", "=", "self", ".", "seq2seq_model", ".", "forward", "(", "self", ".", "to_predict_tensor", ",", "self", ".", "a_lengths_tensor", ",", "self", ".", "a_target_vector", ")", "\n", "\n", "self", ".", "assert_output_is_valid_dim", "(", "predictions", ",", "output_dim", "=", "self", ".", "number_of_tags", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_seq2seq_fasttext_model_cpu.FastTextSeq2SeqIntegrationTest.test_retrainedModel_whenForwardStep_thenStepIsOk": [[50, 64], ["deepparse.network.FastTextSeq2SeqModel", "test_integration_seq2seq_fasttext_model_cpu.FastTextSeq2SeqIntegrationTest.decoder_input_setUp", "test_integration_seq2seq_fasttext_model_cpu.FastTextSeq2SeqIntegrationTest.seq2seq_model.forward", "test_integration_seq2seq_fasttext_model_cpu.FastTextSeq2SeqIntegrationTest.assert_output_is_valid_dim"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_decoder.DecoderCase.decoder_input_setUp", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.network.embedding_network.EmbeddingNetwork.forward", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_encoder.EncoderCase.assert_output_is_valid_dim"], ["", "def", "test_retrainedModel_whenForwardStep_thenStepIsOk", "(", "self", ")", ":", "\n", "        ", "self", ".", "seq2seq_model", "=", "FastTextSeq2SeqModel", "(", "\n", "self", ".", "cache_dir", ",", "\n", "self", ".", "a_cpu_device", ",", "\n", "output_size", "=", "self", ".", "re_trained_output_dim", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", "path_to_retrained_model", "=", "self", ".", "a_retrain_model_path", ",", "\n", ")", "\n", "# forward pass for two address: \"[\"15 major st london ontario n5z1e1\", \"15 major st london ontario n5z1e1\"]\"", "\n", "self", ".", "decoder_input_setUp", "(", ")", "\n", "\n", "predictions", "=", "self", ".", "seq2seq_model", ".", "forward", "(", "self", ".", "to_predict_tensor", ",", "self", ".", "a_lengths_tensor", ")", "\n", "\n", "self", ".", "assert_output_is_valid_dim", "(", "predictions", ",", "output_dim", "=", "self", ".", "re_trained_output_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_seq2seq_fasttext_model_cpu.FastTextSeq2SeqIntegrationTest.test_retrainedModel_whenForwardStepWithTarget_thenStepIsOk": [[65, 79], ["deepparse.network.FastTextSeq2SeqModel", "test_integration_seq2seq_fasttext_model_cpu.FastTextSeq2SeqIntegrationTest.decoder_input_setUp", "test_integration_seq2seq_fasttext_model_cpu.FastTextSeq2SeqIntegrationTest.seq2seq_model.forward", "test_integration_seq2seq_fasttext_model_cpu.FastTextSeq2SeqIntegrationTest.assert_output_is_valid_dim"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_decoder.DecoderCase.decoder_input_setUp", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.network.embedding_network.EmbeddingNetwork.forward", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_encoder.EncoderCase.assert_output_is_valid_dim"], ["", "def", "test_retrainedModel_whenForwardStepWithTarget_thenStepIsOk", "(", "self", ")", ":", "\n", "        ", "self", ".", "seq2seq_model", "=", "FastTextSeq2SeqModel", "(", "\n", "self", ".", "cache_dir", ",", "\n", "self", ".", "a_cpu_device", ",", "\n", "output_size", "=", "self", ".", "re_trained_output_dim", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", "path_to_retrained_model", "=", "self", ".", "a_retrain_model_path", ",", "\n", ")", "\n", "# forward pass for two address: \"[\"15 major st london ontario n5z1e1\", \"15 major st london ontario n5z1e1\"]\"", "\n", "self", ".", "decoder_input_setUp", "(", ")", "\n", "\n", "predictions", "=", "self", ".", "seq2seq_model", ".", "forward", "(", "self", ".", "to_predict_tensor", ",", "self", ".", "a_lengths_tensor", ",", "self", ".", "a_target_vector", ")", "\n", "\n", "self", ".", "assert_output_is_valid_dim", "(", "predictions", ",", "output_dim", "=", "self", ".", "re_trained_output_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_seq2seq_fasttext_model_gpu.FastTextSeq2SeqIntegrationTest.setUpClass": [[16, 21], ["super().setUpClass", "cls.models_setup", "os.path.join", "cls.retrain_file_name_format.format"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_seq2seq_fasttext_model_gpu.FastTextSeq2SeqIntegrationTest.setUpClass", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.base.Seq2SeqIntegrationTestCase.models_setup"], ["    ", "@", "classmethod", "\n", "def", "setUpClass", "(", "cls", ")", ":", "\n", "        ", "super", "(", "FastTextSeq2SeqIntegrationTest", ",", "cls", ")", ".", "setUpClass", "(", ")", "\n", "cls", ".", "models_setup", "(", "model_type", "=", "\"fasttext\"", ",", "cache_dir", "=", "cls", ".", "path", ")", "\n", "cls", ".", "a_retrain_model_path", "=", "os", ".", "path", ".", "join", "(", "cls", ".", "path", ",", "cls", ".", "retrain_file_name_format", ".", "format", "(", "\"fasttext\"", ")", "+", "\".ckpt\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_seq2seq_fasttext_model_gpu.FastTextSeq2SeqIntegrationTest.setUp": [[22, 28], ["super().setUp", "test_integration_seq2seq_fasttext_model_gpu.FastTextSeq2SeqIntegrationTest.encoder_input_setUp", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.models_evaluation.test_tools_models_evaluation.ToolsTests.setUp", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.base.Seq2SeqIntegrationTestCase.encoder_input_setUp"], ["", "def", "setUp", "(", "self", ")", "->", "None", ":", "\n", "        ", "super", "(", ")", ".", "setUp", "(", ")", "\n", "# will load the weights if not local", "\n", "self", ".", "encoder_input_setUp", "(", "\"fasttext\"", ",", "self", ".", "a_torch_device", ")", "\n", "\n", "self", ".", "a_target_vector", "=", "torch", ".", "tensor", "(", "[", "[", "0", ",", "1", ",", "1", ",", "4", ",", "5", ",", "8", "]", ",", "[", "1", ",", "0", ",", "3", ",", "8", ",", "0", ",", "0", "]", "]", ",", "device", "=", "self", ".", "a_torch_device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_seq2seq_fasttext_model_gpu.FastTextSeq2SeqIntegrationTest.test_whenForwardStep_thenStepIsOk": [[29, 37], ["deepparse.network.FastTextSeq2SeqModel", "test_integration_seq2seq_fasttext_model_gpu.FastTextSeq2SeqIntegrationTest.decoder_input_setUp", "test_integration_seq2seq_fasttext_model_gpu.FastTextSeq2SeqIntegrationTest.seq2seq_model.forward", "test_integration_seq2seq_fasttext_model_gpu.FastTextSeq2SeqIntegrationTest.assert_output_is_valid_dim"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_decoder.DecoderCase.decoder_input_setUp", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.network.embedding_network.EmbeddingNetwork.forward", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_encoder.EncoderCase.assert_output_is_valid_dim"], ["", "def", "test_whenForwardStep_thenStepIsOk", "(", "self", ")", ":", "\n", "        ", "self", ".", "seq2seq_model", "=", "FastTextSeq2SeqModel", "(", "self", ".", "cache_dir", ",", "self", ".", "a_torch_device", ",", "output_size", "=", "self", ".", "number_of_tags", ")", "\n", "# forward pass for two address: \"[\"15 major st london ontario n5z1e1\", \"15 major st london ontario n5z1e1\"]\"", "\n", "self", ".", "decoder_input_setUp", "(", ")", "\n", "\n", "predictions", "=", "self", ".", "seq2seq_model", ".", "forward", "(", "self", ".", "to_predict_tensor", ",", "self", ".", "a_lengths_tensor", ")", "\n", "\n", "self", ".", "assert_output_is_valid_dim", "(", "predictions", ",", "output_dim", "=", "self", ".", "number_of_tags", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_seq2seq_fasttext_model_gpu.FastTextSeq2SeqIntegrationTest.test_whenForwardStepWithTarget_thenStepIsOk": [[38, 46], ["deepparse.network.FastTextSeq2SeqModel", "test_integration_seq2seq_fasttext_model_gpu.FastTextSeq2SeqIntegrationTest.decoder_input_setUp", "test_integration_seq2seq_fasttext_model_gpu.FastTextSeq2SeqIntegrationTest.seq2seq_model.forward", "test_integration_seq2seq_fasttext_model_gpu.FastTextSeq2SeqIntegrationTest.assert_output_is_valid_dim"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_decoder.DecoderCase.decoder_input_setUp", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.network.embedding_network.EmbeddingNetwork.forward", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_encoder.EncoderCase.assert_output_is_valid_dim"], ["", "def", "test_whenForwardStepWithTarget_thenStepIsOk", "(", "self", ")", ":", "\n", "        ", "self", ".", "seq2seq_model", "=", "FastTextSeq2SeqModel", "(", "self", ".", "cache_dir", ",", "self", ".", "a_torch_device", ",", "output_size", "=", "self", ".", "number_of_tags", ")", "\n", "# forward pass for two address: \"[\"15 major st london ontario n5z1e1\", \"15 major st london ontario n5z1e1\"]\"", "\n", "self", ".", "decoder_input_setUp", "(", ")", "\n", "\n", "predictions", "=", "self", ".", "seq2seq_model", ".", "forward", "(", "self", ".", "to_predict_tensor", ",", "self", ".", "a_lengths_tensor", ",", "self", ".", "a_target_vector", ")", "\n", "\n", "self", ".", "assert_output_is_valid_dim", "(", "predictions", ",", "output_dim", "=", "self", ".", "number_of_tags", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_seq2seq_fasttext_model_gpu.FastTextSeq2SeqIntegrationTest.test_retrainedModel_whenForwardStep_thenStepIsOk": [[47, 61], ["deepparse.network.FastTextSeq2SeqModel", "test_integration_seq2seq_fasttext_model_gpu.FastTextSeq2SeqIntegrationTest.decoder_input_setUp", "test_integration_seq2seq_fasttext_model_gpu.FastTextSeq2SeqIntegrationTest.seq2seq_model.forward", "test_integration_seq2seq_fasttext_model_gpu.FastTextSeq2SeqIntegrationTest.assert_output_is_valid_dim"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_decoder.DecoderCase.decoder_input_setUp", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.network.embedding_network.EmbeddingNetwork.forward", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_encoder.EncoderCase.assert_output_is_valid_dim"], ["", "def", "test_retrainedModel_whenForwardStep_thenStepIsOk", "(", "self", ")", ":", "\n", "        ", "self", ".", "seq2seq_model", "=", "FastTextSeq2SeqModel", "(", "\n", "self", ".", "cache_dir", ",", "\n", "self", ".", "a_torch_device", ",", "\n", "output_size", "=", "self", ".", "re_trained_output_dim", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", "path_to_retrained_model", "=", "self", ".", "a_retrain_model_path", ",", "\n", ")", "\n", "# forward pass for two address: \"[\"15 major st london ontario n5z1e1\", \"15 major st london ontario n5z1e1\"]\"", "\n", "self", ".", "decoder_input_setUp", "(", ")", "\n", "\n", "predictions", "=", "self", ".", "seq2seq_model", ".", "forward", "(", "self", ".", "to_predict_tensor", ",", "self", ".", "a_lengths_tensor", ")", "\n", "\n", "self", ".", "assert_output_is_valid_dim", "(", "predictions", ",", "output_dim", "=", "self", ".", "re_trained_output_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_seq2seq_fasttext_model_gpu.FastTextSeq2SeqIntegrationTest.test_retrainedModel_whenForwardStepWithTarget_thenStepIsOk": [[62, 76], ["deepparse.network.FastTextSeq2SeqModel", "test_integration_seq2seq_fasttext_model_gpu.FastTextSeq2SeqIntegrationTest.decoder_input_setUp", "test_integration_seq2seq_fasttext_model_gpu.FastTextSeq2SeqIntegrationTest.seq2seq_model.forward", "test_integration_seq2seq_fasttext_model_gpu.FastTextSeq2SeqIntegrationTest.assert_output_is_valid_dim"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_decoder.DecoderCase.decoder_input_setUp", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.network.embedding_network.EmbeddingNetwork.forward", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.integration.test_integration_encoder.EncoderCase.assert_output_is_valid_dim"], ["", "def", "test_retrainedModel_whenForwardStepWithTarget_thenStepIsOk", "(", "self", ")", ":", "\n", "        ", "self", ".", "seq2seq_model", "=", "FastTextSeq2SeqModel", "(", "\n", "self", ".", "cache_dir", ",", "\n", "self", ".", "a_torch_device", ",", "\n", "output_size", "=", "self", ".", "re_trained_output_dim", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", "path_to_retrained_model", "=", "self", ".", "a_retrain_model_path", ",", "\n", ")", "\n", "# forward pass for two address: \"[\"15 major st london ontario n5z1e1\", \"15 major st london ontario n5z1e1\"]\"", "\n", "self", ".", "decoder_input_setUp", "(", ")", "\n", "\n", "predictions", "=", "self", ".", "seq2seq_model", ".", "forward", "(", "self", ".", "to_predict_tensor", ",", "self", ".", "a_lengths_tensor", ",", "self", ".", "a_target_vector", ")", "\n", "\n", "self", ".", "assert_output_is_valid_dim", "(", "predictions", ",", "output_dim", "=", "self", ".", "re_trained_output_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.models_evaluation.test_tools_models_evaluation.ToolsTests.setUp": [[12, 34], ["None"], "methods", ["None"], ["    ", "def", "setUp", "(", "self", ")", "->", "None", ":", "\n", "        ", "self", ".", "a_list_of_country_name_to_reformat", "=", "[", "\n", "\"Korea\"", ",", "\n", "\"Venezuela republic country\"", ",", "\n", "\"Russian Federation\"", ",", "\n", "]", "\n", "self", ".", "reformatted_country_names", "=", "[", "\"South Korea\"", ",", "\"Venezuela\"", ",", "\"Russia\"", "]", "\n", "self", ".", "a_list_of_country_name_not_to_reformat", "=", "[", "\n", "\"Canada\"", ",", "\n", "\"Ireland\"", ",", "\n", "\"Mexico\"", ",", "\n", "\"Australia\"", ",", "\n", "]", "\n", "self", ".", "some_train_test_files", "=", "[", "\"br.p\"", ",", "\"us.p\"", ",", "\"kp.p\"", ",", "\"ru.p\"", ",", "\"de.p\"", ",", "\"fr.p\"", "]", "\n", "self", ".", "some_zero_shot_test_files", "=", "[", "\n", "\"ie.p\"", ",", "\n", "\"rs.p\"", ",", "\n", "\"uz.p\"", ",", "\n", "\"ua.p\"", ",", "\n", "\"za.p\"", ",", "\n", "\"py.p\"", ",", "\n", "\"gr.p\"", ",", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.models_evaluation.test_tools_models_evaluation.ToolsTests.test_givenSomeNonFormattedCountryName_whenCleanUpName_thenReformatThem": [[36, 44], ["zip", "models_evaluation.tools.clean_up_name", "test_tools_models_evaluation.ToolsTests.assertEqual"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.models_evaluation.tools.clean_up_name"], ["", "def", "test_givenSomeNonFormattedCountryName_whenCleanUpName_thenReformatThem", "(", "self", ")", ":", "\n", "        ", "for", "country_to_reformat", ",", "reformatted_country_name", "in", "zip", "(", "\n", "self", ".", "a_list_of_country_name_to_reformat", ",", "self", ".", "reformatted_country_names", "\n", ")", ":", "\n", "            ", "actual", "=", "clean_up_name", "(", "country_to_reformat", ")", "\n", "expected", "=", "reformatted_country_name", "\n", "\n", "self", ".", "assertEqual", "(", "expected", ",", "actual", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.models_evaluation.test_tools_models_evaluation.ToolsTests.test_givenSomeCountryName_whenCleanUpName_thenReturnSameName": [[45, 54], ["zip", "models_evaluation.tools.clean_up_name", "test_tools_models_evaluation.ToolsTests.assertEqual"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.models_evaluation.tools.clean_up_name"], ["", "", "def", "test_givenSomeCountryName_whenCleanUpName_thenReturnSameName", "(", "self", ")", ":", "\n", "        ", "for", "country_to_reformat", ",", "reformatted_country_name", "in", "zip", "(", "\n", "self", ".", "a_list_of_country_name_not_to_reformat", ",", "\n", "self", ".", "a_list_of_country_name_not_to_reformat", ",", "\n", ")", ":", "\n", "            ", "actual", "=", "clean_up_name", "(", "country_to_reformat", ")", "\n", "expected", "=", "reformatted_country_name", "\n", "\n", "self", ".", "assertEqual", "(", "expected", ",", "actual", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.models_evaluation.test_tools_models_evaluation.ToolsTests.test_givenATrainCountryFile_whenIsTrainCountryFile_thenReturnTrue": [[55, 58], ["test_tools_models_evaluation.ToolsTests.assertTrue", "models_evaluation.tools.train_country_file"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.models_evaluation.tools.train_country_file"], ["", "", "def", "test_givenATrainCountryFile_whenIsTrainCountryFile_thenReturnTrue", "(", "self", ")", ":", "\n", "        ", "for", "train_test_file", "in", "self", ".", "some_train_test_files", ":", "\n", "            ", "self", ".", "assertTrue", "(", "train_country_file", "(", "train_test_file", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.models_evaluation.test_tools_models_evaluation.ToolsTests.test_givenANonTrainCountryFile_whenIsTrainCountryFile_thenReturnFalse": [[59, 62], ["test_tools_models_evaluation.ToolsTests.assertFalse", "models_evaluation.tools.train_country_file"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.models_evaluation.tools.train_country_file"], ["", "", "def", "test_givenANonTrainCountryFile_whenIsTrainCountryFile_thenReturnFalse", "(", "self", ")", ":", "\n", "        ", "for", "zero_shot_test_file", "in", "self", ".", "some_zero_shot_test_files", ":", "\n", "            ", "self", ".", "assertFalse", "(", "train_country_file", "(", "zero_shot_test_file", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.models_evaluation.test_tools_models_evaluation.ToolsTests.test_givenAZeroShotCountryFile_whenIsZeroShotCountryFile_thenReturnTrue": [[63, 66], ["test_tools_models_evaluation.ToolsTests.assertTrue", "models_evaluation.tools.zero_shot_eval_country_file"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.models_evaluation.tools.zero_shot_eval_country_file"], ["", "", "def", "test_givenAZeroShotCountryFile_whenIsZeroShotCountryFile_thenReturnTrue", "(", "self", ")", ":", "\n", "        ", "for", "zero_shot_test_file", "in", "self", ".", "some_zero_shot_test_files", ":", "\n", "            ", "self", ".", "assertTrue", "(", "zero_shot_eval_country_file", "(", "zero_shot_test_file", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.models_evaluation.test_tools_models_evaluation.ToolsTests.test_givenANonZeroShotCountryFile_whenIsZeroShotCountryFile_thenReturnFalse": [[67, 72], ["test_tools_models_evaluation.ToolsTests.assertFalse", "models_evaluation.tools.train_country_file"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.models_evaluation.tools.train_country_file"], ["", "", "def", "test_givenANonZeroShotCountryFile_whenIsZeroShotCountryFile_thenReturnFalse", "(", "\n", "self", ",", "\n", ")", ":", "\n", "        ", "for", "zero_shot_test_file", "in", "self", ".", "some_zero_shot_test_files", ":", "\n", "            ", "self", ".", "assertFalse", "(", "train_country_file", "(", "zero_shot_test_file", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.models_evaluation.evaluate_model.main": [[15, 72], ["os.path.join", "os.makedirs", "deepparse.parser.AddressParser", "os.listdir", "enumerate", "os.listdir", "enumerate", "models_evaluation.tools.test_on_country_data", "print", "models_evaluation.tools.train_country_file", "open", "json.dump", "open", "json.dump", "models_evaluation.tools.test_on_country_data", "print", "models_evaluation.tools.train_country_file", "open", "json.dump", "training_test_results.update", "models_evaluation.tools.zero_shot_eval_country_file", "os.path.join", "os.path.join", "incomplete_training_test_results.update", "print", "os.path.join", "zero_shot_test_results.update", "print", "len", "len"], "function", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.models_evaluation.tools.test_on_country_data", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.models_evaluation.tools.train_country_file", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.models_evaluation.tools.test_on_country_data", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.models_evaluation.tools.train_country_file", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.models_evaluation.tools.zero_shot_eval_country_file"], ["def", "main", "(", "args", ")", ":", "\n", "    ", "results_type", "=", "args", ".", "results_type", "\n", "saving_dir", "=", "os", ".", "path", ".", "join", "(", "\".\"", ",", "\"models_evaluation\"", ",", "\"results\"", ",", "results_type", ")", "\n", "os", ".", "makedirs", "(", "saving_dir", ",", "exist_ok", "=", "True", ")", "\n", "\n", "address_parser", "=", "AddressParser", "(", "model_type", "=", "args", ".", "model_type", ",", "device", "=", "0", ")", "\n", "directory_path", "=", "args", ".", "test_directory", "\n", "test_files", "=", "os", ".", "listdir", "(", "directory_path", ")", "\n", "training_test_results", "=", "{", "}", "\n", "zero_shot_test_results", "=", "{", "}", "\n", "for", "idx", ",", "test_file", "in", "enumerate", "(", "test_files", ")", ":", "\n", "        ", "results", ",", "country", "=", "test_on_country_data", "(", "address_parser", ",", "test_file", ",", "directory_path", ",", "args", ")", "\n", "print", "(", "f\"{idx} file done of {len(test_files)}.\"", ")", "\n", "\n", "if", "train_country_file", "(", "test_file", ")", ":", "\n", "            ", "training_test_results", ".", "update", "(", "{", "country", ":", "results", "[", "\"test_accuracy\"", "]", "}", ")", "\n", "", "elif", "zero_shot_eval_country_file", "(", "test_file", ")", ":", "\n", "            ", "zero_shot_test_results", ".", "update", "(", "{", "country", ":", "results", "[", "\"test_accuracy\"", "]", "}", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "f\"Error with the identification of test file type {test_file}.\"", ")", "\n", "\n", "", "", "training_base_string", "=", "\"training_test_results\"", "\n", "training_incomplete_base_string", "=", "\"training_incomplete_test_results\"", "\n", "zero_shot_base_string", "=", "\"zero_shot_test_results\"", "\n", "\n", "with", "open", "(", "\n", "os", ".", "path", ".", "join", "(", "saving_dir", ",", "f\"{training_base_string}_{args.model_type}.json\"", ")", ",", "\n", "\"w\"", ",", "\n", "encoding", "=", "\"utf-8\"", ",", "\n", ")", "as", "file", ":", "\n", "        ", "json", ".", "dump", "(", "training_test_results", ",", "file", ",", "ensure_ascii", "=", "False", ")", "\n", "\n", "", "with", "open", "(", "\n", "os", ".", "path", ".", "join", "(", "saving_dir", ",", "f\"{zero_shot_base_string}_{args.model_type}.json\"", ")", ",", "\n", "\"w\"", ",", "\n", "encoding", "=", "\"utf-8\"", ",", "\n", ")", "as", "file", ":", "\n", "        ", "json", ".", "dump", "(", "zero_shot_test_results", ",", "file", ",", "ensure_ascii", "=", "False", ")", "\n", "\n", "", "incomplete_test_directory", "=", "args", ".", "incomplete_test_directory", "\n", "incomplete_test_files", "=", "os", ".", "listdir", "(", "incomplete_test_directory", ")", "\n", "incomplete_training_test_results", "=", "{", "}", "\n", "for", "idx", ",", "incomplete_test_file", "in", "enumerate", "(", "incomplete_test_files", ")", ":", "\n", "        ", "results", ",", "country", "=", "test_on_country_data", "(", "address_parser", ",", "incomplete_test_file", ",", "incomplete_test_directory", ",", "args", ")", "\n", "print", "(", "f\"{idx} file done of {len(incomplete_test_files)}.\"", ")", "\n", "\n", "if", "train_country_file", "(", "incomplete_test_file", ")", ":", "\n", "            ", "incomplete_training_test_results", ".", "update", "(", "{", "country", ":", "results", "[", "\"test_accuracy\"", "]", "}", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "f\"Error with the identification of test file type {incomplete_test_file}.\"", ")", "\n", "\n", "", "", "with", "open", "(", "\n", "os", ".", "path", ".", "join", "(", "saving_dir", ",", "f\"{training_incomplete_base_string}_{args.model_type}.json\"", ")", ",", "\n", "\"w\"", ",", "\n", "encoding", "=", "\"utf-8\"", ",", "\n", ")", "as", "file", ":", "\n", "        ", "json", ".", "dump", "(", "incomplete_training_test_results", ",", "file", ",", "ensure_ascii", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.models_evaluation.tools.clean_up_name": [[13, 28], ["None"], "function", ["None"], [")", "\n", "\n", "BASE_URL", "=", "\"https://graal.ift.ulaval.ca/public/deepparse/{}.{}\"", "\n", "CACHE_PATH", "=", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "expanduser", "(", "\"~\"", ")", ",", "\".cache\"", ",", "\"deepparse\"", ")", "\n", "\n", "\n", "def", "latest_version", "(", "model", ":", "str", ",", "cache_path", ":", "str", ")", "->", "bool", ":", "\n", "    ", "\"\"\"\n    Verify if the local model is the latest.\n    \"\"\"", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "cache_path", ",", "model", "+", "\".version\"", ")", ",", "encoding", "=", "\"utf-8\"", ")", "as", "local_model_hash_file", ":", "\n", "        ", "local_model_hash_version", "=", "local_model_hash_file", ".", "readline", "(", ")", "\n", "", "download_from_url", "(", "model", ",", "cache_path", ",", "\"version\"", ")", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "cache_path", ",", "model", "+", "\".version\"", ")", ",", "encoding", "=", "\"utf-8\"", ")", "as", "remote_model_hash_file", ":", "\n", "        ", "remote_model_hash_version", "=", "remote_model_hash_file", ".", "readline", "(", ")", "\n", "", "return", "local_model_hash_version", ".", "strip", "(", ")", "==", "remote_model_hash_version", ".", "strip", "(", ")", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.models_evaluation.tools.train_country_file": [[55, 60], ["None"], "function", ["None"], ["", "download_from_url", "(", "model", ",", "saving_dir", ",", "\"ckpt\"", ")", "\n", "download_from_url", "(", "model", ",", "saving_dir", ",", "\"version\"", ")", "\n", "\n", "\n", "", "def", "handle_poutyne_version", "(", ")", "->", "str", ":", "\n", "    "]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.models_evaluation.tools.zero_shot_eval_country_file": [[108, 113], ["None"], "function", ["None"], ["", "checkpoint", "=", "os", ".", "path", ".", "join", "(", "CACHE_PATH", ",", "f\"{model_type_checkpoint}.ckpt\"", ")", "\n", "return", "checkpoint", "\n", "\n", "\n", "", "def", "handle_model_path", "(", "checkpoint", ":", "str", ")", "->", "str", ":", "\n", "    "]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.models_evaluation.tools.convert_2_letters_name_into_country_name": [[115, 119], ["tools.clean_up_name", "pycountry.countries.get", "country_file_name.replace().upper", "country_file_name.replace"], "function", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.models_evaluation.tools.clean_up_name"], ["\n", "if", "checkpoint", "in", "(", "\"fasttext\"", ",", "\"bpemb\"", ")", ":", "\n", "        ", "checkpoint", "=", "handle_pre_trained_checkpoint", "(", "checkpoint", ")", "\n", "", "elif", "isinstance", "(", "checkpoint", ",", "str", ")", "and", "checkpoint", ".", "endswith", "(", "\".ckpt\"", ")", ":", "\n", "        ", "if", "not", "valid_poutyne_version", "(", ")", ":", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.models_evaluation.tools.convert_two_letter_name_to_country_name_in_json": [[121, 134], ["json.load.items", "open", "json.load", "new_data.update", "open", "json.dump", "tools.convert_2_letters_name_into_country_name"], "function", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.models_evaluation.tools.convert_2_letters_name_into_country_name"], ["\"To load a string path to a model, you need to have a Poutyne version\"", "\"greater than 1.1 (>1.1)\"", "\n", ")", "\n", "", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\n", "\"The checkpoint is not valid. Can be a path in a string format (e.g. 'a_path_.ckpt'), \"", "\n", "\"'fasttext' or 'bpemb'.\"", "\n", ")", "\n", "\n", "", "return", "checkpoint", "\n", "\n", "\n", "", "def", "validate_data_to_parse", "(", "addresses_to_parse", ":", "List", ")", "->", "None", ":", "\n", "    "]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.models_evaluation.tools.test_on_country_data": [[136, 155], ["tools.convert_2_letters_name_into_country_name", "print", "os.path.join", "deepparse.dataset_container.PickleDatasetContainer", "address_parser.test"], "function", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.models_evaluation.tools.convert_2_letters_name_into_country_name", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.parser.address_parser.AddressParser.test"], ["\n", "if", "isinstance", "(", "addresses_to_parse", "[", "0", "]", ",", "tuple", ")", ":", "\n", "        ", "raise", "DataError", "(", "\n", "\"Addresses to parsed are tuples. They need to be a list of string. Are you using training data?\"", "\n", ")", "\n", "", "if", "validate_if_any_none", "(", "addresses_to_parse", ")", ":", "\n", "        ", "raise", "DataError", "(", "\"Some addresses are None value.\"", ")", "\n", "", "if", "validate_if_any_empty", "(", "addresses_to_parse", ")", ":", "\n", "        ", "raise", "DataError", "(", "\"Some addresses are empty.\"", ")", "\n", "", "if", "validate_if_any_whitespace_only", "(", "addresses_to_parse", ")", ":", "\n", "        ", "raise", "DataError", "(", "\"Some addresses only include whitespace thus cannot be parsed.\"", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.models_evaluation.tools.make_table": [[157, 219], ["os.path.join", "os.makedirs", "json.load", "json.load", "zip", "enumerate", "pandas.DataFrame().round().to_markdown", "open", "open", "json.load.items", "json.load.items", "json.load", "json.load", "zip", "open", "file.writelines", "os.path.join", "os.path.join", "open", "open", "json.load.items", "json.load.items", "json.load.items", "json.load.items", "row_data.extend", "data.extend", "formatted_data.append", "data.extend", "pandas.DataFrame().round", "os.path.join", "os.path.join", "os.path.join", "data.extend", "formatted_data.append", "pandas.DataFrame", "len"], "function", ["None"], []], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.models_evaluation.tools.make_table_rst": [[221, 300], ["os.path.join", "os.makedirs", "json.load", "json.load", "zip", "enumerate", "pandas.DataFrame().round", "enumerate", "pd.DataFrame().round.iterrows", "open", "open", "json.load.items", "json.load.items", "json.load", "json.load", "zip", "enumerate", "open", "file.writelines", "os.path.join", "os.path.join", "open", "open", "json.load.items", "json.load.items", "json.load.items", "json.load.items", "row_data.extend", "data.extend", "formatted_data.append", "data.extend", "pandas.DataFrame", "list", "os.path.join", "os.path.join", "os.path.join", "data.extend", "formatted_data.append", "len"], "function", ["None"], []], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.models_evaluation.tools.make_comparison_table": [[302, 344], ["os.path.join", "os.makedirs", "json.load", "json.load", "enumerate", "pandas.DataFrame().round().to_markdown", "open", "open", "zip", "open", "file.writelines", "os.path.join", "os.path.join", "json.load.items", "json.load.items", "data.extend", "formatted_data.append", "pandas.DataFrame().round", "os.path.join", "formatted_data.append", "pandas.DataFrame"], "function", ["None"], []], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.timer.timer.Timer.__init__": [[36, 205], ["isinstance", "timer.Timer.wrap_function", "getattr", "getattr", "getattr", "getattr", "getattr"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.timer.timer.Timer.wrap_function"], ["def", "__init__", "(", "\n", "self", ",", "\n", "func_or_name", "=", "None", ",", "\n", "*", ",", "\n", "display_name", "=", "\"\"", ",", "\n", "datetime_format", "=", "\"%Y-%m-%d %Hh%Mm%Ss\"", ",", "\n", "elapsed_time_format", "=", "\"short\"", ",", "\n", "main_color", "=", "\"LIGHTYELLOW_EX\"", ",", "\n", "exception_exit_color", "=", "\"LIGHTRED_EX\"", ",", "\n", "name_color", "=", "\"LIGHTBLUE_EX\"", ",", "\n", "time_color", "=", "\"LIGHTCYAN_EX\"", ",", "\n", "datetime_color", "=", "\"LIGHTMAGENTA_EX\"", ",", "\n", "yield_timer", "=", "False", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            func_or_name (Union[Callable, str, None]):\n                If Timer is used as a decorator: If a callable, the callable will be wrapped and timed every time it is\n                called. If None, the callable will be set on the next call to Timer.\n                If Timer is used as a context manager: If a string, the string will be used as display name. If None,\n                no name will be displayed.\n            display_name (Union[str, None]):\n                String to be displayed to identify the timed snippet of code. Default (an empty string) will display\n                the name of the function. If set to None, will display nothing instead. Only useful if Timer\n                is used as a decorator, since the first arguments is used in the case of a context manager.\n            datetime_format (str or None, optional):\n                Datetime format used to display the date and time. The format follows the template of the 'datetime'\n                package. If None, no date or time will be displayed.\n            elapsed_time_format (either 'short' or 'long', optional):\n                Format used to display the elapsed time. If 'long', whole words will be used. If 'short', only the\n                first letters will be displayed.\n            main_color (str):\n                Color in which the main text will be displayed. Choices are those from the package colorama.\n            exception_exit_color (str):\n                Color in which the exception text will be displayed. Choices are those from the package colorama.\n            name_color (str):\n                Color in which the function name will be displayed. Choices are those from the package colorama.\n            time_color (str):\n                Color in which the time taken by the function will be displayed. Choices are those from the package\n                colorama.\n            datetime_color (str):\n                Color in which the date and time of day will be displayed. Choices are those from the package colorama.\n            yield_timer (bool):\n                Whether or not to yield the Timer object in addition to the output when Timer is used as an iterator.\n\n        Supported colors:\n            BLACK, WHITE, RED, BLUE, GREEN, CYAN, MAGENTA, YELLOW, LIGHTRED_EX, BLIGHTLUE_EX, GRLIGHTEEN_EX,\n            CLIGHTYAN_EX, MAGELIGHTNTA_EX, YELLIGHTLOW_EX\n\n        The class can be used as a context manager, a decorator or as an iterator.\n\n        Examples as a context manager:\n            Example 1:\n                >>> from graal_utils import Timer\n                >>> with Timer():\n                ...     print(\"graal\")\n                ...\n            Execution started on 2019-05-09 13h48m23s.\n\n            graal\n\n            Execution completed in 0.00 seconds on 2019-05-09 13h48m23s.\n\n            Example 2:\n                >>> from graal_utils import Timer\n                >>> with Timer(\"python\", time_color=\"MAGENTA\"):\n                ...     print(\"Python\")\n                ...\n            Execution of 'python' started on 2019-05-09 13h48m23s.\n\n            Python\n\n            Execution of 'python' completed in 0.00 seconds on 2019-05-09 13h48m23s.\n\n        Examples as a decorator:\n            Example 1:\n                >>> from graal_utils import Timer\n                >>> @Timer\n                ... def foo():\n                ...     print(\"foo!\")\n                ...\n                >>> foo()\n                Execution of 'foo' started on 2018-09-10 20h25m06s.\n\n                foo!\n\n                Execution of 'foo' completed in 0.00 seconds on 2018-09-10 20h25m06s.\n\n            Example 2:\n                >>> @Timer(datetime_format='%Hh%Mm%Ss', display_func_name=False, main_color='WHITE')\n                ... def bar():\n                ...     print(\"bar!\")\n                ...     raise RuntimeError\n                ...\n                >>> try:\n                ...     bar()\n                ... except RuntimeError: pass\n                Execution started on 20h25m06s.\n\n                bar!\n\n                Execution terminated after 0.00 seconds on 20h25m06s.\n\n                >>> bar.elapsed_time\n                0.5172324180603027\n\n            Example 3:\n                >>> class Spam:\n                ...     @Timer\n                ...     def spam(self):\n                ...         print(\"egg!\")\n\n                >>> Spam().spam()\n                Execution of 'spam' started on 2018-10-02 18h33m14s.\n\n                egg!\n\n                Execution of 'spam' completed in 0.00 seconds on 2018-10-02 18h33m14s.\n\n        Examples as an iterator:\n            Example 1: Simple case.\n                >>> for i in Timer(range(3)):\n                ...     time.sleep(.1)\n                ...     print(i)\n                Execution of 'range' started on 2021-04-23 15h09m30s.\n\n                0\n                1\n                2\n\n                Execution of 'range' completed in 0.33s on 2021-04-23 15h09m31s.\n                Mean time per iteration: 0.11s \u00b1 0.00s over 3 iterations.\n                Iteration 0 was the shortest with 0.10s.\n                Iteration 1 was the longest with 0.11s.\n\n            Example 2: Case with the Timer objected yielded.\n                >>> for i, t in Timer(range(3), yield_timer=True):\n                ...     sleep(.1)\n                ... print(t.laps)\n                Execution of 'range' started on 2021-04-23 15h16m29s.\n\n\n                Execution of 'range' completed in 0.34s on 2021-04-23 15h16m29s.\n                Mean time per iteration: 0.11s \u00b1 0.00s over 3 iterations.\n                Iteration 1 was the shortest with 0.11s.\n                Iteration 0 was the longest with 0.11s.\n\n                [0.11200141906738281, 0.11099791526794434, 0.11100339889526367]\n        \"\"\"", "\n", "if", "isinstance", "(", "func_or_name", ",", "str", ")", ":", "\n", "            ", "func", ",", "display_name", "=", "None", ",", "func_or_name", "\n", "", "else", ":", "\n", "            ", "func", "=", "func_or_name", "\n", "\n", "", "self", ".", "_wrapped_func", "=", "self", ".", "wrap_function", "(", "func", ")", "\n", "self", ".", "display_name", "=", "display_name", "\n", "self", ".", "start_time", "=", "None", "\n", "self", ".", "elapsed_time", "=", "None", "\n", "self", ".", "datetime_format", "=", "datetime_format", "\n", "self", ".", "elapsed_time_format", "=", "elapsed_time_format", "\n", "\n", "self", ".", "main_color", "=", "getattr", "(", "Fore", ",", "main_color", ")", "\n", "self", ".", "exception_exit_color", "=", "getattr", "(", "Fore", ",", "exception_exit_color", ")", "\n", "self", ".", "name_color", "=", "getattr", "(", "Fore", ",", "name_color", ")", "\n", "self", ".", "time_color", "=", "getattr", "(", "Fore", ",", "time_color", ")", "\n", "self", ".", "datetime_color", "=", "getattr", "(", "Fore", ",", "datetime_color", ")", "\n", "\n", "self", ".", "yield_timer", "=", "yield_timer", "\n", "self", ".", "iter_stats", "=", "\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.timer.timer.Timer.__enter__": [[206, 209], ["timer.Timer._start_timer"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.timer.timer.Timer._start_timer"], ["", "def", "__enter__", "(", "self", ")", ":", "\n", "        ", "self", ".", "_start_timer", "(", ")", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.timer.timer.Timer.__exit__": [[210, 216], ["time.time.time", "timer.Timer._exception_exit_end_timer", "timer.Timer._normal_exit_end_timer"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.timer.timer.Timer._exception_exit_end_timer", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.timer.timer.Timer._normal_exit_end_timer"], ["", "def", "__exit__", "(", "self", ",", "exc_type", ",", "exc_value", ",", "traceback", ")", ":", "\n", "        ", "self", ".", "elapsed_time", "=", "time", "(", ")", "-", "self", ".", "start_time", "\n", "if", "exc_type", ":", "\n", "            ", "self", ".", "_exception_exit_end_timer", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "_normal_exit_end_timer", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.timer.timer.Timer.func_name": [[217, 226], ["None"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "func_name", "(", "self", ")", ":", "\n", "# pylint: disable=no-else-return", "\n", "        ", "if", "self", ".", "display_name", ":", "\n", "            ", "return", "f\"of '{self.name_color}{self.display_name}{self.main_color}' \"", "\n", "", "elif", "self", ".", "display_name", "==", "\"\"", "and", "self", ".", "_wrapped_func", "is", "not", "None", ":", "\n", "            ", "return", "f\"of '{self.name_color}{self.__name__}{self.main_color}' \"", "\n", "", "else", ":", "\n", "            ", "return", "\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.timer.timer.Timer.datetime": [[227, 234], ["datetime.datetime.datetime.now().strftime", "datetime.datetime.datetime.now"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "datetime", "(", "self", ")", ":", "\n", "# pylint: disable=no-else-return", "\n", "        ", "if", "self", ".", "datetime_format", "is", "None", ":", "\n", "            ", "return", "\"\"", "\n", "", "else", ":", "\n", "            ", "return", "\"on \"", "+", "self", ".", "datetime_color", "+", "dt", ".", "now", "(", ")", ".", "strftime", "(", "self", ".", "datetime_format", ")", "+", "self", ".", "main_color", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.timer.timer.Timer.format_long_time": [[235, 246], ["pluralize", "int"], "methods", ["None"], ["", "", "@", "staticmethod", "\n", "def", "format_long_time", "(", "seconds", ",", "period", ")", ":", "\n", "# pylint: disable=no-else-return", "\n", "        ", "periods", "=", "{", "\"d\"", ":", "\"day\"", ",", "\"h\"", ":", "\"hour\"", ",", "\"m\"", ":", "\"minute\"", ",", "\"s\"", ":", "\"second\"", "}", "\n", "\n", "pluralize", "=", "lambda", "period_value", ":", "\"s\"", "if", "period_value", ">", "1", "else", "\"\"", "\n", "format_period_string", "=", "periods", "[", "period", "]", "+", "pluralize", "(", "seconds", ")", "\n", "if", "period", "!=", "\"s\"", ":", "\n", "            ", "return", "f\"{int(seconds)} {format_period_string}\"", "\n", "", "else", ":", "\n", "            ", "return", "f\"{seconds:.2f} {format_period_string}\"", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.timer.timer.Timer.format_short_time": [[247, 254], ["int"], "methods", ["None"], ["", "", "@", "staticmethod", "\n", "def", "format_short_time", "(", "seconds", ",", "period", ")", ":", "\n", "# pylint: disable=no-else-return", "\n", "        ", "if", "period", "!=", "\"s\"", ":", "\n", "            ", "return", "f\"{int(seconds)}{period}\"", "\n", "", "else", ":", "\n", "            ", "return", "f\"{seconds:.2f}{period}\"", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.timer.timer.Timer.format_elapsed_time": [[255, 273], ["periods.items", "time_strings.append", "format_time", "divmod", "time_strings.append", "format_time"], "methods", ["None"], ["", "", "def", "format_elapsed_time", "(", "self", ",", "seconds", ")", ":", "\n", "        ", "is_long", "=", "self", ".", "elapsed_time_format", "==", "\"long\"", "\n", "format_time", "=", "self", ".", "format_long_time", "if", "is_long", "else", "self", ".", "format_short_time", "\n", "periods", "=", "{", "\n", "\"d\"", ":", "60", "*", "60", "*", "24", ",", "\n", "\"h\"", ":", "60", "*", "60", ",", "\n", "\"m\"", ":", "60", ",", "\n", "}", "\n", "\n", "time_strings", "=", "[", "]", "\n", "for", "period_name", ",", "period_seconds", "in", "periods", ".", "items", "(", ")", ":", "\n", "            ", "if", "seconds", ">=", "period_seconds", ":", "\n", "                ", "period_value", ",", "seconds", "=", "divmod", "(", "seconds", ",", "period_seconds", ")", "\n", "time_strings", ".", "append", "(", "format_time", "(", "period_value", ",", "period_name", ")", ")", "\n", "\n", "", "", "time_strings", ".", "append", "(", "format_time", "(", "seconds", ",", "\"s\"", ")", ")", "\n", "\n", "return", "self", ".", "time_color", "+", "\" \"", ".", "join", "(", "time_strings", ")", "+", "self", ".", "main_color", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.timer.timer.Timer._start_timer": [[274, 277], ["time.time.time", "print"], "methods", ["None"], ["", "def", "_start_timer", "(", "self", ")", ":", "\n", "        ", "self", ".", "start_time", "=", "time", "(", ")", "\n", "print", "(", "self", ".", "main_color", "+", "f\"Execution {self.func_name}started {self.datetime}.\\n\"", "+", "Style", ".", "RESET_ALL", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.timer.timer.Timer._exception_exit_end_timer": [[278, 285], ["print", "timer.Timer.format_elapsed_time"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.timer.timer.Timer.format_elapsed_time"], ["", "def", "_exception_exit_end_timer", "(", "self", ")", ":", "\n", "        ", "print", "(", "\n", "self", ".", "exception_exit_color", "\n", "+", "\"\\nExecution terminated after \"", "\n", "+", "self", ".", "format_elapsed_time", "(", "self", ".", "elapsed_time", ")", "\n", "+", "f\"{self.exception_exit_color} {self.datetime}{self.exception_exit_color}.\\n{self.iter_stats}\"", "\n", "+", "Style", ".", "RESET_ALL", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.timer.timer.Timer._normal_exit_end_timer": [[287, 294], ["print", "timer.Timer.format_elapsed_time"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.timer.timer.Timer.format_elapsed_time"], ["", "def", "_normal_exit_end_timer", "(", "self", ")", ":", "\n", "        ", "print", "(", "\n", "self", ".", "main_color", "\n", "+", "f\"\\nExecution {self.func_name}completed in \"", "\n", "+", "self", ".", "format_elapsed_time", "(", "self", ".", "elapsed_time", ")", "\n", "+", "f\" {self.datetime}.\\n{self.iter_stats}\"", "\n", "+", "Style", ".", "RESET_ALL", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.timer.timer.Timer.wrap_function": [[296, 305], ["hasattr", "type"], "methods", ["None"], ["", "def", "wrap_function", "(", "self", ",", "func", ")", ":", "\n", "        ", "if", "func", "is", "not", "None", ":", "\n", "            ", "self", ".", "__doc__", "=", "func", ".", "__doc__", "\n", "if", "hasattr", "(", "func", ",", "\"__name__\"", ")", ":", "\n", "                ", "self", ".", "__name__", "=", "func", ".", "__name__", "\n", "", "else", ":", "\n", "                ", "self", ".", "__name__", "=", "type", "(", "func", ")", ".", "__name__", "# For the case when Timer is used as an iterator.", "\n", "\n", "", "", "return", "func", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.timer.timer.Timer.__call__": [[306, 314], ["timer.Timer.wrap_function", "timer.Timer._wrapped_func"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.timer.timer.Timer.wrap_function"], ["", "def", "__call__", "(", "self", ",", "*", "args", ":", "Any", ",", "**", "kwargs", ":", "Any", ")", "->", "Any", ":", "\n", "# pylint: disable=no-else-return", "\n", "        ", "if", "self", ".", "_wrapped_func", "is", "None", ":", "\n", "            ", "self", ".", "_wrapped_func", "=", "self", ".", "wrap_function", "(", "args", "[", "0", "]", ")", "\n", "return", "self", "\n", "", "else", ":", "\n", "            ", "with", "self", ":", "\n", "                ", "return", "self", ".", "_wrapped_func", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.timer.timer.Timer.__get__": [[315, 321], ["timer.Timer.__wrapped_method"], "methods", ["None"], ["", "", "", "def", "__get__", "(", "self", ",", "parent_of_wrapped_method", ",", "type_of_parent_of_wrapped_method", "=", "None", ")", ":", "\n", "# Gets called only for wrapped methods. Sets the first argument of the function as the correct", "\n", "# instance of 'self'.", "\n", "        ", "self", ".", "__wrapped_method", "=", "self", ".", "_wrapped_func", "\n", "self", ".", "_wrapped_func", "=", "lambda", "*", "args", ",", "**", "kwargs", ":", "self", ".", "__wrapped_method", "(", "parent_of_wrapped_method", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.timer.timer.Timer.__iter__": [[322, 332], ["timer.Timer._update_iter_stats", "time.time.time", "timer.Timer.laps.append", "time.time.time"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.timer.timer.Timer._update_iter_stats"], ["", "def", "__iter__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "with", "self", ":", "\n", "            ", "self", ".", "laps", "=", "[", "]", "\n", "try", ":", "\n", "                ", "for", "output", "in", "self", ".", "_wrapped_func", ":", "\n", "                    ", "start_time", "=", "time", "(", ")", "\n", "yield", "(", "output", ",", "self", ")", "if", "self", ".", "yield_timer", "else", "output", "\n", "self", ".", "laps", ".", "append", "(", "time", "(", ")", "-", "start_time", ")", "\n", "", "", "finally", ":", "\n", "                ", "self", ".", "_update_iter_stats", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.timer.timer.Timer._update_iter_stats": [[333, 344], ["math.sqrt", "min", "max", "sum", "len", "sum", "len", "enumerate", "enumerate", "timer.Timer.format_elapsed_time", "timer.Timer.format_elapsed_time", "timer.Timer.format_elapsed_time", "timer.Timer.format_elapsed_time", "len"], "methods", ["home.repos.pwc.inspect_result.GRAAL-Research_deepparse.timer.timer.Timer.format_elapsed_time", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.timer.timer.Timer.format_elapsed_time", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.timer.timer.Timer.format_elapsed_time", "home.repos.pwc.inspect_result.GRAAL-Research_deepparse.timer.timer.Timer.format_elapsed_time"], ["", "", "", "def", "_update_iter_stats", "(", "self", ")", ":", "\n", "        ", "mean_time", "=", "sum", "(", "self", ".", "laps", ")", "/", "len", "(", "self", ".", "laps", ")", "\n", "std", "=", "math", ".", "sqrt", "(", "sum", "(", "t", "**", "2", "for", "t", "in", "self", ".", "laps", ")", "/", "len", "(", "self", ".", "laps", ")", "-", "mean_time", "**", "2", ")", "\n", "shortest_time", "=", "min", "(", "(", "t", ",", "i", ")", "for", "i", ",", "t", "in", "enumerate", "(", "self", ".", "laps", ")", ")", "\n", "longest_time", "=", "max", "(", "(", "t", ",", "i", ")", "for", "i", ",", "t", "in", "enumerate", "(", "self", ".", "laps", ")", ")", "\n", "self", ".", "iter_stats", "=", "(", "\n", "self", ".", "main_color", "\n", "+", "f\"Mean time per iteration: {self.format_elapsed_time(mean_time)} \u00b1 {self.format_elapsed_time(std)} over\"", "\n", "f\" {len(self.laps)} iterations.\\n\"", "\n", "+", "f\"Iteration {shortest_time[1]} was the shortest with {self.format_elapsed_time(shortest_time[0])}.\\n\"", "\n", "+", "f\"Iteration {longest_time[1]} was the longest with {self.format_elapsed_time(longest_time[0])}.\\n\"", "\n", ")", "\n"]]}