{"home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.None.inverse_models.Controller_NN.__init__": [[28, 39], ["torch.Module.__init__", "torchvision.models.resnet18", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "list", "torchvision.models.resnet18.children"], "methods", ["home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Controller_NN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "resnet18", "=", "models", ".", "resnet18", "(", "pretrained", "=", "True", ")", "\n", "self", ".", "modified_pretrained", "=", "nn", ".", "Sequential", "(", "*", "list", "(", "resnet18", ".", "children", "(", ")", ")", "[", ":", "-", "1", "]", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "linear1", "=", "nn", ".", "Linear", "(", "512", "*", "2", ",", "512", ")", "\n", "self", ".", "linear2", "=", "nn", ".", "Linear", "(", "512", ",", "256", ")", "\n", "self", ".", "linear3", "=", "nn", ".", "Linear", "(", "256", ",", "128", ")", "\n", "self", ".", "linear4", "=", "nn", ".", "Linear", "(", "128", ",", "64", ")", "\n", "self", ".", "linear5", "=", "nn", ".", "Linear", "(", "64", ",", "32", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "32", ",", "14", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.None.inverse_models.Controller_NN.forward": [[41, 52], ["inverse_models.Controller_NN.modified_pretrained", "inverse_models.Controller_NN.modified_pretrained", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "inverse_models.Controller_NN.relu", "inverse_models.Controller_NN.relu", "inverse_models.Controller_NN.relu", "inverse_models.Controller_NN.relu", "inverse_models.Controller_NN.linear5", "inverse_models.Controller_NN.linear", "inverse_models.Controller_NN.linear1", "inverse_models.Controller_NN.linear2", "inverse_models.Controller_NN.linear3", "inverse_models.Controller_NN.linear4", "torch.cat.squeeze().squeeze", "torch.cat.squeeze().squeeze", "torch.cat.squeeze().squeeze", "torch.cat.squeeze().squeeze", "torch.cat.squeeze", "torch.cat.squeeze", "torch.cat.squeeze", "torch.cat.squeeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input1", ",", "input2", ")", ":", "\n", "        ", "i_1", "=", "self", ".", "modified_pretrained", "(", "input1", ")", "\n", "i_2", "=", "self", ".", "modified_pretrained", "(", "input2", ")", "\n", "i_combined", "=", "torch", ".", "cat", "(", "(", "i_1", ",", "i_2", ")", ",", "1", ")", "\n", "i1", "=", "self", ".", "relu", "(", "self", ".", "linear1", "(", "i_combined", ".", "squeeze", "(", "2", ")", ".", "squeeze", "(", "2", ")", ")", ")", "\n", "i2", "=", "self", ".", "relu", "(", "self", ".", "linear2", "(", "i1", ")", ")", "\n", "i3", "=", "self", ".", "relu", "(", "self", ".", "linear3", "(", "i2", ")", ")", "\n", "i4", "=", "self", ".", "relu", "(", "self", ".", "linear4", "(", "i3", ")", ")", "\n", "h_t", "=", "self", ".", "linear5", "(", "i4", ")", "\n", "output", "=", "self", ".", "linear", "(", "h_t", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.None.inverse_models.Controller_LSTM.__init__": [[55, 67], ["torch.Module.__init__", "torchvision.models.resnet18", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.LSTMCell", "torch.LSTMCell", "torch.LSTMCell", "torch.LSTMCell", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "int", "list", "torchvision.models.resnet18.children"], "methods", ["home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Controller_LSTM", ",", "self", ")", ".", "__init__", "(", ")", "\n", "resnet18", "=", "models", ".", "resnet18", "(", "pretrained", "=", "True", ")", "\n", "self", ".", "modified_pretrained", "=", "nn", ".", "Sequential", "(", "*", "list", "(", "resnet18", ".", "children", "(", ")", ")", "[", ":", "-", "3", "]", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AvgPool2d", "(", "kernel_size", "=", "int", "(", "7", "*", "(", "2", "**", "(", "3", "-", "2", ")", ")", "*", "64", "/", "224", ")", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "linear1", "=", "nn", ".", "Linear", "(", "512", "*", "2", "/", "(", "2", "**", "(", "3", "-", "2", ")", ")", ",", "256", ")", "\n", "#self.linear2 = nn.Linear(512,256)", "\n", "self", ".", "linear3", "=", "nn", ".", "Linear", "(", "256", ",", "128", ")", "\n", "self", ".", "linear4", "=", "nn", ".", "Linear", "(", "128", ",", "64", ")", "\n", "self", ".", "lstm", "=", "nn", ".", "LSTMCell", "(", "64", ",", "32", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "32", ",", "14", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.None.inverse_models.Controller_LSTM.forward": [[68, 81], ["inverse_models.Controller_LSTM.avgpool", "inverse_models.Controller_LSTM.avgpool", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "inverse_models.Controller_LSTM.relu", "inverse_models.Controller_LSTM.relu", "inverse_models.Controller_LSTM.relu", "inverse_models.Controller_LSTM.lstm", "inverse_models.Controller_LSTM.linear", "inverse_models.Controller_LSTM.modified_pretrained", "inverse_models.Controller_LSTM.modified_pretrained", "inverse_models.Controller_LSTM.linear1", "inverse_models.Controller_LSTM.linear3", "inverse_models.Controller_LSTM.linear4", "torch.cat.squeeze().squeeze", "torch.cat.squeeze().squeeze", "torch.cat.squeeze().squeeze", "torch.cat.squeeze().squeeze", "torch.cat.squeeze", "torch.cat.squeeze", "torch.cat.squeeze", "torch.cat.squeeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input1", ",", "input2", ",", "h", ",", "t", ")", ":", "\n", "        ", "h_t", "=", "h", "\n", "c_t", "=", "t", "\n", "i_1", "=", "self", ".", "avgpool", "(", "self", ".", "modified_pretrained", "(", "input1", ")", ")", "\n", "i_2", "=", "self", ".", "avgpool", "(", "self", ".", "modified_pretrained", "(", "input2", ")", ")", "\n", "i_combined", "=", "torch", ".", "cat", "(", "(", "i_1", ",", "i_2", ")", ",", "1", ")", "\n", "i1", "=", "self", ".", "relu", "(", "self", ".", "linear1", "(", "i_combined", ".", "squeeze", "(", "2", ")", ".", "squeeze", "(", "2", ")", ")", ")", "\n", "#i2 = self.relu(self.linear2(i1))", "\n", "i3", "=", "self", ".", "relu", "(", "self", ".", "linear3", "(", "i1", ")", ")", "\n", "i4", "=", "self", ".", "relu", "(", "self", ".", "linear4", "(", "i3", ")", ")", "\n", "h_t", ",", "c_t", "=", "self", ".", "lstm", "(", "i4", ",", "(", "h_t", ",", "c_t", ")", ")", "\n", "output", "=", "self", ".", "linear", "(", "h_t", ")", "\n", "return", "output", ",", "h_t", ",", "c_t", "\n", "\n"]], "home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.None.dataloader.Dataloading.__init__": [[29, 31], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "name", ")", ":", "\n", "        ", "self", ".", "name", "=", "name", "\n", "\n"]], "home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.None.dataloader.Dataloading.__len__": [[32, 34], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.None.dataloader.Dataloading.__getitem__": [[35, 40], ["open", "f.read().splitlines", "preprocess_jointangles", "f.read"], "methods", ["home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.None.utils.preprocess_jointangles"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "robot_images", "=", "self", ".", "name", "[", "idx", "]", "+", "'/robot_img/'", "\n", "with", "open", "(", "self", ".", "name", "[", "idx", "]", "+", "'/jointangles'", ")", "as", "f", ":", "\n", "            ", "joint_angles", "=", "f", ".", "read", "(", ")", ".", "splitlines", "(", ")", "\n", "", "return", "(", "robot_images", ",", "preprocess_jointangles", "(", "joint_angles", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.None.utils.pil_loader": [[26, 30], ["open", "PIL.Image.open", "Image.open.convert"], "function", ["None"], ["def", "pil_loader", "(", "path", ")", ":", "\n", "    ", "with", "open", "(", "path", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "img", "=", "Image", ".", "open", "(", "f", ")", "\n", "return", "img", ".", "convert", "(", "'RGB'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.None.utils.accimage_loader": [[31, 37], ["accimage.Image", "utils.pil_loader"], "function", ["home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.None.utils.pil_loader"], ["", "", "def", "accimage_loader", "(", "path", ")", ":", "\n", "    ", "import", "accimage", "\n", "try", ":", "\n", "        ", "return", "accimage", ".", "Image", "(", "path", ")", "\n", "", "except", "IOError", ":", "\n", "        ", "return", "pil_loader", "(", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.None.utils.default_loader": [[38, 44], ["get_image_backend", "utils.accimage_loader", "utils.pil_loader"], "function", ["home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.None.utils.accimage_loader", "home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.None.utils.pil_loader"], ["", "", "def", "default_loader", "(", "path", ")", ":", "\n", "    ", "from", "torchvision", "import", "get_image_backend", "\n", "if", "get_image_backend", "(", ")", "==", "'accimage'", ":", "\n", "        ", "return", "accimage_loader", "(", "path", ")", "\n", "", "else", ":", "\n", "        ", "return", "pil_loader", "(", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.None.utils.image_ready": [[51, 57], ["data_transforms().unsqueeze", "len", "range", "data_transforms", "len", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "utils.default_loader", "data_transforms().unsqueeze", "str", "data_transforms", "utils.default_loader", "str"], "function", ["home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.data.image_folder.default_loader", "home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.data.image_folder.default_loader"], ["def", "image_ready", "(", "array_of_path", ",", "image_no", ")", ":", "\n", "    ", "final_array", "=", "data_transforms", "(", "default_loader", "(", "array_of_path", "[", "0", "]", "+", "str", "(", "image_no", ")", "+", "'.jpg'", ")", ")", ".", "unsqueeze", "(", "0", ")", "\n", "if", "len", "(", "array_of_path", ")", ">", "1", ":", "\n", "        ", "for", "i", "in", "range", "(", "1", ",", "len", "(", "array_of_path", ")", ")", ":", "\n", "            ", "final_array", "=", "torch", ".", "cat", "(", "(", "final_array", ",", "data_transforms", "(", "default_loader", "(", "array_of_path", "[", "i", "]", "+", "str", "(", "image_no", ")", "+", "'.jpg'", ")", ")", ".", "unsqueeze", "(", "0", ")", ")", ",", "0", ")", "\n", "", "", "return", "(", "final_array", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.None.utils.preprocess_jointangles": [[59, 70], ["range", "numpy.asarray", "len", "ast.literal_eval", "numpy.zeros", "seq_array.append", "len", "range", "numpy.copy", "len"], "function", ["None"], ["", "def", "preprocess_jointangles", "(", "sequence", ")", ":", "\n", "    ", "seq_array", "=", "[", "]", "\n", "for", "index", "in", "range", "(", "0", ",", "len", "(", "sequence", ")", ")", ":", "\n", "        ", "sub_seq", "=", "literal_eval", "(", "sequence", "[", "index", "]", ")", "\n", "temp", "=", "np", ".", "zeros", "(", "14", ")", "\n", "k", "=", "[", "\"left_w0\"", ",", "\"left_w1\"", ",", "\"left_w2\"", ",", "\"right_s0\"", ",", "\"right_s1\"", ",", "\"right_w0\"", ",", "\"right_w1\"", ",", "\"right_w2\"", ",", "\"left_e0\"", ",", "\"left_e1\"", ",", "\"left_s0\"", ",", "\"left_s1\"", ",", "\"right_e0\"", ",", "\"right_e1\"", "]", "\n", "if", "len", "(", "sub_seq", ")", ">", "14", ":", "\n", "            ", "for", "i", "in", "range", "(", "0", ",", "len", "(", "k", ")", ")", ":", "\n", "                ", "temp", "[", "i", "]", "=", "sub_seq", "[", "k", "[", "i", "]", "]", "\n", "", "", "seq_array", ".", "append", "(", "np", ".", "copy", "(", "temp", ")", ")", "\n", "", "return", "np", ".", "asarray", "(", "seq_array", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.None.utils.save_checkpoint": [[71, 74], ["torch.save", "torch.save", "torch.save", "torch.save", "shutil.copyfile", "str"], "function", ["home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.util.html.HTML.save", "home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.util.html.HTML.save", "home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.util.html.HTML.save", "home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.util.html.HTML.save"], ["", "def", "save_checkpoint", "(", "state", ",", "epoch", ",", "home_folder", ",", "exp", ",", "filename", "=", "'checkpoint.pth.tar'", ")", ":", "\n", "    ", "torch", ".", "save", "(", "state", ",", "filename", ")", "\n", "shutil", ".", "copyfile", "(", "filename", ",", "home_folder", "+", "'ckpts/'", "+", "exp", "+", "'/'", "+", "str", "(", "epoch", ")", "+", "'.pth.tar'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.None.utils.postprocess_jointangles": [[75, 81], ["range", "len"], "function", ["None"], ["", "def", "postprocess_jointangles", "(", "sequence", ")", ":", "\n", "    ", "seq_array", "=", "{", "}", "\n", "for", "index", "in", "range", "(", "0", ",", "len", "(", "sequence", "[", "0", "]", ")", ")", ":", "\n", "        ", "k", "=", "[", "\"left_w0\"", ",", "\"left_w1\"", ",", "\"left_w2\"", ",", "\"right_s0\"", ",", "\"right_s1\"", ",", "\"right_w0\"", ",", "\"right_w1\"", ",", "\"right_w2\"", ",", "\"left_e0\"", ",", "\"left_e1\"", ",", "\"left_s0\"", ",", "\"left_s1\"", ",", "\"right_e0\"", ",", "\"right_e1\"", "]", "\n", "seq_array", "[", "k", "[", "index", "]", "]", "=", "sequence", "[", "0", "]", "[", "index", "]", "\n", "", "return", "seq_array", "\n", "\n"]], "home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.None.utils.write_dic": [[82, 86], ["open", "open.write", "open.close", "str"], "function", ["None"], ["", "def", "write_dic", "(", "dic", ",", "path", ")", ":", "\n", "    ", "f", "=", "open", "(", "path", ",", "\"w\"", ")", "\n", "f", ".", "write", "(", "str", "(", "dic", ")", ")", "\n", "f", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.datasets.make_dataset_aligned.get_file_paths": [[6, 18], ["os.walk", "sorted", "os.path.abspath", "os.path.join", "filename.endswith", "filename.endswith", "image_file_paths.append"], "function", ["None"], ["def", "get_file_paths", "(", "folder", ")", ":", "\n", "    ", "image_file_paths", "=", "[", "]", "\n", "for", "root", ",", "dirs", ",", "filenames", "in", "os", ".", "walk", "(", "folder", ")", ":", "\n", "        ", "filenames", "=", "sorted", "(", "filenames", ")", "\n", "for", "filename", "in", "filenames", ":", "\n", "            ", "input_path", "=", "os", ".", "path", ".", "abspath", "(", "root", ")", "\n", "file_path", "=", "os", ".", "path", ".", "join", "(", "input_path", ",", "filename", ")", "\n", "if", "filename", ".", "endswith", "(", "'.png'", ")", "or", "filename", ".", "endswith", "(", "'.jpg'", ")", ":", "\n", "                ", "image_file_paths", ".", "append", "(", "file_path", ")", "\n", "\n", "", "", "break", "# prevent descending into subfolders", "\n", "", "return", "image_file_paths", "\n", "\n"]], "home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.datasets.make_dataset_aligned.align_images": [[20, 33], ["range", "os.path.exists", "os.makedirs", "len", "PIL.Image.open", "PIL.Image.open", "PIL.Image.new", "Image.new.paste", "Image.new.paste", "Image.new.save", "os.path.join"], "function", ["home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.util.html.HTML.save"], ["", "def", "align_images", "(", "a_file_paths", ",", "b_file_paths", ",", "target_path", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "target_path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "target_path", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "len", "(", "a_file_paths", ")", ")", ":", "\n", "        ", "img_a", "=", "Image", ".", "open", "(", "a_file_paths", "[", "i", "]", ")", "\n", "img_b", "=", "Image", ".", "open", "(", "b_file_paths", "[", "i", "]", ")", "\n", "assert", "(", "img_a", ".", "size", "==", "img_b", ".", "size", ")", "\n", "\n", "aligned_image", "=", "Image", ".", "new", "(", "\"RGB\"", ",", "(", "img_a", ".", "size", "[", "0", "]", "*", "2", ",", "img_a", ".", "size", "[", "1", "]", ")", ")", "\n", "aligned_image", ".", "paste", "(", "img_a", ",", "(", "0", ",", "0", ")", ")", "\n", "aligned_image", ".", "paste", "(", "img_b", ",", "(", "img_a", ".", "size", "[", "0", "]", ",", "0", ")", ")", "\n", "aligned_image", ".", "save", "(", "os", ".", "path", ".", "join", "(", "target_path", ",", "'{:04d}.jpg'", ".", "format", "(", "i", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.util.html.HTML.__init__": [[7, 21], ["os.path.join", "dominate.document", "os.path.exists", "os.makedirs", "os.path.exists", "os.makedirs", "dominate.tags.meta", "str"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "web_dir", ",", "title", ",", "reflesh", "=", "0", ")", ":", "\n", "        ", "self", ".", "title", "=", "title", "\n", "self", ".", "web_dir", "=", "web_dir", "\n", "self", ".", "img_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "web_dir", ",", "'images'", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "web_dir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "self", ".", "web_dir", ")", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "img_dir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "self", ".", "img_dir", ")", "\n", "# print(self.img_dir)", "\n", "\n", "", "self", ".", "doc", "=", "dominate", ".", "document", "(", "title", "=", "title", ")", "\n", "if", "reflesh", ">", "0", ":", "\n", "            ", "with", "self", ".", "doc", ".", "head", ":", "\n", "                ", "meta", "(", "http_equiv", "=", "\"reflesh\"", ",", "content", "=", "str", "(", "reflesh", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.util.html.HTML.get_image_dir": [[22, 24], ["None"], "methods", ["None"], ["", "", "", "def", "get_image_dir", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "img_dir", "\n", "\n"]], "home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.util.html.HTML.add_header": [[25, 28], ["dominate.tags.h3"], "methods", ["None"], ["", "def", "add_header", "(", "self", ",", "str", ")", ":", "\n", "        ", "with", "self", ".", "doc", ":", "\n", "            ", "h3", "(", "str", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.util.html.HTML.add_table": [[29, 32], ["dominate.tags.table", "html.HTML.doc.add"], "methods", ["None"], ["", "", "def", "add_table", "(", "self", ",", "border", "=", "1", ")", ":", "\n", "        ", "self", ".", "t", "=", "table", "(", "border", "=", "border", ",", "style", "=", "\"table-layout: fixed;\"", ")", "\n", "self", ".", "doc", ".", "add", "(", "self", ".", "t", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.util.html.HTML.add_images": [[33, 44], ["html.HTML.add_table", "dominate.tags.tr", "zip", "dominate.tags.td", "dominate.tags.p", "dominate.tags.br", "dominate.tags.p", "dominate.tags.a", "dominate.tags.img", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.util.html.HTML.add_table"], ["", "def", "add_images", "(", "self", ",", "ims", ",", "txts", ",", "links", ",", "width", "=", "400", ")", ":", "\n", "        ", "self", ".", "add_table", "(", ")", "\n", "with", "self", ".", "t", ":", "\n", "            ", "with", "tr", "(", ")", ":", "\n", "                ", "for", "im", ",", "txt", ",", "link", "in", "zip", "(", "ims", ",", "txts", ",", "links", ")", ":", "\n", "                    ", "with", "td", "(", "style", "=", "\"word-wrap: break-word;\"", ",", "halign", "=", "\"center\"", ",", "valign", "=", "\"top\"", ")", ":", "\n", "                        ", "with", "p", "(", ")", ":", "\n", "                            ", "with", "a", "(", "href", "=", "os", ".", "path", ".", "join", "(", "'images'", ",", "link", ")", ")", ":", "\n", "                                ", "img", "(", "style", "=", "\"width:%dpx\"", "%", "width", ",", "src", "=", "os", ".", "path", ".", "join", "(", "'images'", ",", "im", ")", ")", "\n", "", "br", "(", ")", "\n", "p", "(", "txt", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.util.html.HTML.save": [[45, 50], ["open", "open.write", "open.close", "html.HTML.doc.render"], "methods", ["None"], ["", "", "", "", "", "", "def", "save", "(", "self", ")", ":", "\n", "        ", "html_file", "=", "'%s/index.html'", "%", "self", ".", "web_dir", "\n", "f", "=", "open", "(", "html_file", ",", "'wt'", ")", "\n", "f", ".", "write", "(", "self", ".", "doc", ".", "render", "(", ")", ")", "\n", "f", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.util.image_pool.ImagePool.__init__": [[6, 11], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "pool_size", ")", ":", "\n", "        ", "self", ".", "pool_size", "=", "pool_size", "\n", "if", "self", ".", "pool_size", ">", "0", ":", "\n", "            ", "self", ".", "num_imgs", "=", "0", "\n", "self", ".", "images", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.util.image_pool.ImagePool.query": [[12, 33], ["torch.cat", "torch.unsqueeze", "image_pool.ImagePool.images.append", "torch.cat.append", "random.uniform", "random.randint", "image_pool.ImagePool.images[].clone", "torch.cat.append", "torch.cat.append"], "methods", ["None"], ["", "", "def", "query", "(", "self", ",", "images", ")", ":", "\n", "        ", "if", "self", ".", "pool_size", "==", "0", ":", "\n", "            ", "return", "images", "\n", "", "return_images", "=", "[", "]", "\n", "for", "image", "in", "images", ":", "\n", "            ", "image", "=", "torch", ".", "unsqueeze", "(", "image", ".", "data", ",", "0", ")", "\n", "if", "self", ".", "num_imgs", "<", "self", ".", "pool_size", ":", "\n", "                ", "self", ".", "num_imgs", "=", "self", ".", "num_imgs", "+", "1", "\n", "self", ".", "images", ".", "append", "(", "image", ")", "\n", "return_images", ".", "append", "(", "image", ")", "\n", "", "else", ":", "\n", "                ", "p", "=", "random", ".", "uniform", "(", "0", ",", "1", ")", "\n", "if", "p", ">", "0.5", ":", "\n", "                    ", "random_id", "=", "random", ".", "randint", "(", "0", ",", "self", ".", "pool_size", "-", "1", ")", "# randint is inclusive", "\n", "tmp", "=", "self", ".", "images", "[", "random_id", "]", ".", "clone", "(", ")", "\n", "self", ".", "images", "[", "random_id", "]", "=", "image", "\n", "return_images", ".", "append", "(", "tmp", ")", "\n", "", "else", ":", "\n", "                    ", "return_images", ".", "append", "(", "image", ")", "\n", "", "", "", "return_images", "=", "torch", ".", "cat", "(", "return_images", ",", "0", ")", "\n", "return", "return_images", "\n", "", "", ""]], "home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.util.visualizer.Visualizer.__init__": [[43, 64], ["os.path.join", "visdom.Visdom", "os.path.join", "os.path.join", "print", "util.mkdirs", "open", "time.strftime", "log_file.write"], "methods", ["home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.util.util.mkdirs"], ["    ", "def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "        ", "self", ".", "display_id", "=", "opt", ".", "display_id", "\n", "self", ".", "use_html", "=", "opt", ".", "isTrain", "and", "not", "opt", ".", "no_html", "\n", "self", ".", "win_size", "=", "opt", ".", "display_winsize", "\n", "self", ".", "name", "=", "opt", ".", "name", "\n", "self", ".", "opt", "=", "opt", "\n", "self", ".", "saved", "=", "False", "\n", "if", "self", ".", "display_id", ">", "0", ":", "\n", "            ", "import", "visdom", "\n", "self", ".", "ncols", "=", "opt", ".", "display_ncols", "\n", "self", ".", "vis", "=", "visdom", ".", "Visdom", "(", "server", "=", "opt", ".", "display_server", ",", "port", "=", "opt", ".", "display_port", ",", "env", "=", "opt", ".", "display_env", ",", "raise_exceptions", "=", "True", ")", "\n", "\n", "", "if", "self", ".", "use_html", ":", "\n", "            ", "self", ".", "web_dir", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "checkpoints_dir", ",", "opt", ".", "name", ",", "'web'", ")", "\n", "self", ".", "img_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "web_dir", ",", "'images'", ")", "\n", "print", "(", "'create web directory %s...'", "%", "self", ".", "web_dir", ")", "\n", "util", ".", "mkdirs", "(", "[", "self", ".", "web_dir", ",", "self", ".", "img_dir", "]", ")", "\n", "", "self", ".", "log_name", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "checkpoints_dir", ",", "opt", ".", "name", ",", "'loss_log.txt'", ")", "\n", "with", "open", "(", "self", ".", "log_name", ",", "\"a\"", ")", "as", "log_file", ":", "\n", "            ", "now", "=", "time", ".", "strftime", "(", "\"%c\"", ")", "\n", "log_file", ".", "write", "(", "'================ Training Loss (%s) ================\\n'", "%", "now", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.util.visualizer.Visualizer.reset": [[65, 67], ["None"], "methods", ["None"], ["", "", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "saved", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.util.visualizer.Visualizer.throw_visdom_connection_error": [[68, 71], ["print", "exit"], "methods", ["None"], ["", "def", "throw_visdom_connection_error", "(", "self", ")", ":", "\n", "        ", "print", "(", "'\\n\\nCould not connect to Visdom server (https://github.com/facebookresearch/visdom) for displaying training progress.\\nYou can suppress connection to Visdom using the option --display_id -1. To install visdom, run \\n$ pip install visdom\\n, and start the server by \\n$ python -m visdom.server.\\n\\n'", ")", "\n", "exit", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.util.visualizer.Visualizer.display_current_results": [[73, 141], ["visuals.items", "html.HTML", "range", "html.HTML.save", "min", "visuals.items", "visuals.items", "util.tensor2im", "os.path.join", "util.save_image", "html.HTML.add_header", "visuals.items", "html.HTML.add_images", "len", "util.tensor2im", "images.append", "numpy.ones_like", "images.append", "visualizer.Visualizer.vis.images", "visualizer.Visualizer.vis.text", "util.tensor2im", "visualizer.Visualizer.vis.image", "util.tensor2im", "ims.append", "txts.append", "links.append", "next", "util.tensor2im.transpose", "util.tensor2im.transpose", "visualizer.Visualizer.throw_visdom_connection_error", "util.tensor2im.transpose", "iter", "dict", "dict", "dict", "visuals.values"], "methods", ["home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.util.html.HTML.save", "home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.util.util.tensor2im", "home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.util.util.save_image", "home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.util.html.HTML.add_header", "home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.util.html.HTML.add_images", "home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.util.util.tensor2im", "home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.util.util.tensor2im", "home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.util.util.tensor2im", "home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.util.visualizer.Visualizer.throw_visdom_connection_error"], ["", "def", "display_current_results", "(", "self", ",", "visuals", ",", "epoch", ",", "save_result", ")", ":", "\n", "        ", "if", "self", ".", "display_id", ">", "0", ":", "# show images in the browser", "\n", "            ", "ncols", "=", "self", ".", "ncols", "\n", "if", "ncols", ">", "0", ":", "\n", "                ", "ncols", "=", "min", "(", "ncols", ",", "len", "(", "visuals", ")", ")", "\n", "h", ",", "w", "=", "next", "(", "iter", "(", "visuals", ".", "values", "(", ")", ")", ")", ".", "shape", "[", ":", "2", "]", "\n", "table_css", "=", "\"\"\"<style>\n                        table {border-collapse: separate; border-spacing:4px; white-space:nowrap; text-align:center}\n                        table td {width: %dpx; height: %dpx; padding: 4px; outline: 4px solid black}\n                        </style>\"\"\"", "%", "(", "w", ",", "h", ")", "\n", "title", "=", "self", ".", "name", "\n", "label_html", "=", "''", "\n", "label_html_row", "=", "''", "\n", "images", "=", "[", "]", "\n", "idx", "=", "0", "\n", "for", "label", ",", "image", "in", "visuals", ".", "items", "(", ")", ":", "\n", "                    ", "image_numpy", "=", "util", ".", "tensor2im", "(", "image", ")", "\n", "label_html_row", "+=", "'<td>%s</td>'", "%", "label", "\n", "images", ".", "append", "(", "image_numpy", ".", "transpose", "(", "[", "2", ",", "0", ",", "1", "]", ")", ")", "\n", "idx", "+=", "1", "\n", "if", "idx", "%", "ncols", "==", "0", ":", "\n", "                        ", "label_html", "+=", "'<tr>%s</tr>'", "%", "label_html_row", "\n", "label_html_row", "=", "''", "\n", "", "", "white_image", "=", "np", ".", "ones_like", "(", "image_numpy", ".", "transpose", "(", "[", "2", ",", "0", ",", "1", "]", ")", ")", "*", "255", "\n", "while", "idx", "%", "ncols", "!=", "0", ":", "\n", "                    ", "images", ".", "append", "(", "white_image", ")", "\n", "label_html_row", "+=", "'<td></td>'", "\n", "idx", "+=", "1", "\n", "", "if", "label_html_row", "!=", "''", ":", "\n", "                    ", "label_html", "+=", "'<tr>%s</tr>'", "%", "label_html_row", "\n", "# pane col = image row", "\n", "", "try", ":", "\n", "                    ", "self", ".", "vis", ".", "images", "(", "images", ",", "nrow", "=", "ncols", ",", "win", "=", "self", ".", "display_id", "+", "1", ",", "\n", "padding", "=", "2", ",", "opts", "=", "dict", "(", "title", "=", "title", "+", "' images'", ")", ")", "\n", "label_html", "=", "'<table>%s</table>'", "%", "label_html", "\n", "self", ".", "vis", ".", "text", "(", "table_css", "+", "label_html", ",", "win", "=", "self", ".", "display_id", "+", "2", ",", "\n", "opts", "=", "dict", "(", "title", "=", "title", "+", "' labels'", ")", ")", "\n", "", "except", "VisdomExceptionBase", ":", "\n", "                    ", "self", ".", "throw_visdom_connection_error", "(", ")", "\n", "\n", "", "", "else", ":", "\n", "                ", "idx", "=", "1", "\n", "for", "label", ",", "image", "in", "visuals", ".", "items", "(", ")", ":", "\n", "                    ", "image_numpy", "=", "util", ".", "tensor2im", "(", "image", ")", "\n", "self", ".", "vis", ".", "image", "(", "image_numpy", ".", "transpose", "(", "[", "2", ",", "0", ",", "1", "]", ")", ",", "opts", "=", "dict", "(", "title", "=", "label", ")", ",", "\n", "win", "=", "self", ".", "display_id", "+", "idx", ")", "\n", "idx", "+=", "1", "\n", "\n", "", "", "", "if", "self", ".", "use_html", "and", "(", "save_result", "or", "not", "self", ".", "saved", ")", ":", "# save images to a html file", "\n", "            ", "self", ".", "saved", "=", "True", "\n", "for", "label", ",", "image", "in", "visuals", ".", "items", "(", ")", ":", "\n", "                ", "image_numpy", "=", "util", ".", "tensor2im", "(", "image", ")", "\n", "img_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "img_dir", ",", "'epoch%.3d_%s.png'", "%", "(", "epoch", ",", "label", ")", ")", "\n", "util", ".", "save_image", "(", "image_numpy", ",", "img_path", ")", "\n", "# update website", "\n", "", "webpage", "=", "html", ".", "HTML", "(", "self", ".", "web_dir", ",", "'Experiment name = %s'", "%", "self", ".", "name", ",", "reflesh", "=", "1", ")", "\n", "for", "n", "in", "range", "(", "epoch", ",", "0", ",", "-", "1", ")", ":", "\n", "                ", "webpage", ".", "add_header", "(", "'epoch [%d]'", "%", "n", ")", "\n", "ims", ",", "txts", ",", "links", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "\n", "for", "label", ",", "image_numpy", "in", "visuals", ".", "items", "(", ")", ":", "\n", "                    ", "image_numpy", "=", "util", ".", "tensor2im", "(", "image", ")", "\n", "img_path", "=", "'epoch%.3d_%s.png'", "%", "(", "n", ",", "label", ")", "\n", "ims", ".", "append", "(", "img_path", ")", "\n", "txts", ".", "append", "(", "label", ")", "\n", "links", ".", "append", "(", "img_path", ")", "\n", "", "webpage", ".", "add_images", "(", "ims", ",", "txts", ",", "links", ",", "width", "=", "self", ".", "win_size", ")", "\n", "", "webpage", ".", "save", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.util.visualizer.Visualizer.plot_current_losses": [[143, 160], ["visualizer.Visualizer.plot_data[].append", "visualizer.Visualizer.plot_data[].append", "hasattr", "visualizer.Visualizer.vis.line", "list", "visualizer.Visualizer.throw_visdom_connection_error", "losses.keys", "numpy.stack", "numpy.array", "len", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.util.visualizer.Visualizer.throw_visdom_connection_error"], ["", "", "def", "plot_current_losses", "(", "self", ",", "epoch", ",", "counter_ratio", ",", "opt", ",", "losses", ")", ":", "\n", "        ", "if", "not", "hasattr", "(", "self", ",", "'plot_data'", ")", ":", "\n", "            ", "self", ".", "plot_data", "=", "{", "'X'", ":", "[", "]", ",", "'Y'", ":", "[", "]", ",", "'legend'", ":", "list", "(", "losses", ".", "keys", "(", ")", ")", "}", "\n", "", "self", ".", "plot_data", "[", "'X'", "]", ".", "append", "(", "epoch", "+", "counter_ratio", ")", "\n", "self", ".", "plot_data", "[", "'Y'", "]", ".", "append", "(", "[", "losses", "[", "k", "]", "for", "k", "in", "self", ".", "plot_data", "[", "'legend'", "]", "]", ")", "\n", "try", ":", "\n", "            ", "self", ".", "vis", ".", "line", "(", "\n", "X", "=", "np", ".", "stack", "(", "[", "np", ".", "array", "(", "self", ".", "plot_data", "[", "'X'", "]", ")", "]", "*", "len", "(", "self", ".", "plot_data", "[", "'legend'", "]", ")", ",", "1", ")", ",", "\n", "Y", "=", "np", ".", "array", "(", "self", ".", "plot_data", "[", "'Y'", "]", ")", ",", "\n", "opts", "=", "{", "\n", "'title'", ":", "self", ".", "name", "+", "' loss over time'", ",", "\n", "'legend'", ":", "self", ".", "plot_data", "[", "'legend'", "]", ",", "\n", "'xlabel'", ":", "'epoch'", ",", "\n", "'ylabel'", ":", "'loss'", "}", ",", "\n", "win", "=", "self", ".", "display_id", ")", "\n", "", "except", "VisdomExceptionBase", ":", "\n", "            ", "self", ".", "throw_visdom_connection_error", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.util.visualizer.Visualizer.print_current_losses": [[162, 170], ["losses.items", "print", "open", "log_file.write"], "methods", ["None"], ["", "", "def", "print_current_losses", "(", "self", ",", "epoch", ",", "i", ",", "losses", ",", "t", ",", "t_data", ")", ":", "\n", "        ", "message", "=", "'(epoch: %d, iters: %d, time: %.3f, data: %.3f) '", "%", "(", "epoch", ",", "i", ",", "t", ",", "t_data", ")", "\n", "for", "k", ",", "v", "in", "losses", ".", "items", "(", ")", ":", "\n", "            ", "message", "+=", "'%s: %.3f '", "%", "(", "k", ",", "v", ")", "\n", "\n", "", "print", "(", "message", ")", "\n", "with", "open", "(", "self", ".", "log_name", ",", "\"a\"", ")", "as", "log_file", ":", "\n", "            ", "log_file", ".", "write", "(", "'%s\\n'", "%", "message", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.util.visualizer.save_images": [[17, 40], ["webpage.get_image_dir", "ntpath.basename", "webpage.add_header", "visuals.items", "webpage.add_images", "os.path.splitext", "util.tensor2im", "os.path.join", "util.save_image", "ims.append", "txts.append", "links.append", "scipy.misc.imresize", "scipy.misc.imresize", "int", "int"], "function", ["home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.util.html.HTML.get_image_dir", "home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.util.html.HTML.add_header", "home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.util.html.HTML.add_images", "home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.util.util.tensor2im", "home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.util.util.save_image"], ["", "def", "save_images", "(", "webpage", ",", "visuals", ",", "image_path", ",", "aspect_ratio", "=", "1.0", ",", "width", "=", "256", ")", ":", "\n", "    ", "image_dir", "=", "webpage", ".", "get_image_dir", "(", ")", "\n", "short_path", "=", "ntpath", ".", "basename", "(", "image_path", "[", "0", "]", ")", "\n", "name", "=", "os", ".", "path", ".", "splitext", "(", "short_path", ")", "[", "0", "]", "\n", "\n", "webpage", ".", "add_header", "(", "name", ")", "\n", "ims", ",", "txts", ",", "links", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "\n", "for", "label", ",", "im_data", "in", "visuals", ".", "items", "(", ")", ":", "\n", "        ", "im", "=", "util", ".", "tensor2im", "(", "im_data", ")", "\n", "image_name", "=", "'%s_%s.png'", "%", "(", "name", ",", "label", ")", "\n", "save_path", "=", "os", ".", "path", ".", "join", "(", "image_dir", ",", "image_name", ")", "\n", "h", ",", "w", ",", "_", "=", "im", ".", "shape", "\n", "if", "aspect_ratio", ">", "1.0", ":", "\n", "            ", "im", "=", "imresize", "(", "im", ",", "(", "h", ",", "int", "(", "w", "*", "aspect_ratio", ")", ")", ",", "interp", "=", "'bicubic'", ")", "\n", "", "if", "aspect_ratio", "<", "1.0", ":", "\n", "            ", "im", "=", "imresize", "(", "im", ",", "(", "int", "(", "h", "/", "aspect_ratio", ")", ",", "w", ")", ",", "interp", "=", "'bicubic'", ")", "\n", "", "util", ".", "save_image", "(", "im", ",", "save_path", ")", "\n", "\n", "ims", ".", "append", "(", "image_name", ")", "\n", "txts", ".", "append", "(", "label", ")", "\n", "links", ".", "append", "(", "image_name", ")", "\n", "", "webpage", ".", "add_images", "(", "ims", ",", "txts", ",", "links", ",", "width", "=", "width", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.util.get_data.GetData.__init__": [[29, 36], ["url_dict.get", "technique.lower"], "methods", ["home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.util.get_data.GetData.get"], ["def", "__init__", "(", "self", ",", "technique", "=", "'cyclegan'", ",", "verbose", "=", "True", ")", ":", "\n", "        ", "url_dict", "=", "{", "\n", "'pix2pix'", ":", "'https://people.eecs.berkeley.edu/~tinghuiz/projects/pix2pix/datasets'", ",", "\n", "'cyclegan'", ":", "'https://people.eecs.berkeley.edu/~taesung_park/CycleGAN/datasets'", "\n", "}", "\n", "self", ".", "url", "=", "url_dict", ".", "get", "(", "technique", ".", "lower", "(", ")", ")", "\n", "self", ".", "_verbose", "=", "verbose", "\n", "\n"]], "home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.util.get_data.GetData._print": [[37, 40], ["print"], "methods", ["None"], ["", "def", "_print", "(", "self", ",", "text", ")", ":", "\n", "        ", "if", "self", ".", "_verbose", ":", "\n", "            ", "print", "(", "text", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.util.get_data.GetData._get_options": [[41, 47], ["bs4.BeautifulSoup", "bs4.BeautifulSoup.find_all", "h.text.endswith"], "methods", ["None"], ["", "", "@", "staticmethod", "\n", "def", "_get_options", "(", "r", ")", ":", "\n", "        ", "soup", "=", "BeautifulSoup", "(", "r", ".", "text", ",", "'lxml'", ")", "\n", "options", "=", "[", "h", ".", "text", "for", "h", "in", "soup", ".", "find_all", "(", "'a'", ",", "href", "=", "True", ")", "\n", "if", "h", ".", "text", ".", "endswith", "(", "(", "'.zip'", ",", "'tar.gz'", ")", ")", "]", "\n", "return", "options", "\n", "\n"]], "home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.util.get_data.GetData._present_options": [[48, 57], ["requests.get", "get_data.GetData._get_options", "print", "enumerate", "input", "print", "int"], "methods", ["home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.util.get_data.GetData.get", "home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.util.get_data.GetData._get_options"], ["", "def", "_present_options", "(", "self", ")", ":", "\n", "        ", "r", "=", "requests", ".", "get", "(", "self", ".", "url", ")", "\n", "options", "=", "self", ".", "_get_options", "(", "r", ")", "\n", "print", "(", "'Options:\\n'", ")", "\n", "for", "i", ",", "o", "in", "enumerate", "(", "options", ")", ":", "\n", "            ", "print", "(", "\"{0}: {1}\"", ".", "format", "(", "i", ",", "o", ")", ")", "\n", "", "choice", "=", "input", "(", "\"\\nPlease enter the number of the \"", "\n", "\"dataset above you wish to download:\"", ")", "\n", "return", "options", "[", "int", "(", "choice", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.util.get_data.GetData._download_data": [[58, 80], ["os.path.basename", "os.path.join", "os.path.basename.endswith", "get_data.GetData._print", "zipfile.ZipFile.extractall", "zipfile.ZipFile.close", "os.remove", "os.path.isdir", "os.makedirs", "open", "requests.get", "f.write", "tarfile.open", "os.path.basename.endswith", "zipfile.ZipFile", "ValueError"], "methods", ["home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.util.get_data.GetData._print", "home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.util.get_data.GetData.get"], ["", "def", "_download_data", "(", "self", ",", "dataset_url", ",", "save_path", ")", ":", "\n", "        ", "if", "not", "isdir", "(", "save_path", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "save_path", ")", "\n", "\n", "", "base", "=", "basename", "(", "dataset_url", ")", "\n", "temp_save_path", "=", "join", "(", "save_path", ",", "base", ")", "\n", "\n", "with", "open", "(", "temp_save_path", ",", "\"wb\"", ")", "as", "f", ":", "\n", "            ", "r", "=", "requests", ".", "get", "(", "dataset_url", ")", "\n", "f", ".", "write", "(", "r", ".", "content", ")", "\n", "\n", "", "if", "base", ".", "endswith", "(", "'.tar.gz'", ")", ":", "\n", "            ", "obj", "=", "tarfile", ".", "open", "(", "temp_save_path", ")", "\n", "", "elif", "base", ".", "endswith", "(", "'.zip'", ")", ":", "\n", "            ", "obj", "=", "ZipFile", "(", "temp_save_path", ",", "'r'", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Unknown File Type: {0}.\"", ".", "format", "(", "base", ")", ")", "\n", "\n", "", "self", ".", "_print", "(", "\"Unpacking Data...\"", ")", "\n", "obj", ".", "extractall", "(", "save_path", ")", "\n", "obj", ".", "close", "(", ")", "\n", "os", ".", "remove", "(", "temp_save_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.util.get_data.GetData.get": [[81, 116], ["os.path.join", "os.path.isdir", "os.path.abspath", "get_data.GetData._present_options", "warnings.warn", "get_data.GetData._print", "get_data.GetData._download_data", "get_data.GetData.split"], "methods", ["home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.util.get_data.GetData._present_options", "home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.util.get_data.GetData._print", "home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.util.get_data.GetData._download_data"], ["", "def", "get", "(", "self", ",", "save_path", ",", "dataset", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n\n        Download a dataset.\n\n        Args:\n            save_path : str\n                A directory to save the data to.\n            dataset : str, optional\n                A specific dataset to download.\n                Note: this must include the file extension.\n                If None, options will be presented for you\n                to choose from.\n\n        Returns:\n            save_path_full : str\n                The absolute path to the downloaded data.\n\n        \"\"\"", "\n", "if", "dataset", "is", "None", ":", "\n", "            ", "selected_dataset", "=", "self", ".", "_present_options", "(", ")", "\n", "", "else", ":", "\n", "            ", "selected_dataset", "=", "dataset", "\n", "\n", "", "save_path_full", "=", "join", "(", "save_path", ",", "selected_dataset", ".", "split", "(", "'.'", ")", "[", "0", "]", ")", "\n", "\n", "if", "isdir", "(", "save_path_full", ")", ":", "\n", "            ", "warn", "(", "\"\\n'{0}' already exists. Voiding Download.\"", ".", "format", "(", "\n", "save_path_full", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "_print", "(", "'Downloading Data...'", ")", "\n", "url", "=", "\"{0}/{1}\"", ".", "format", "(", "self", ".", "url", ",", "selected_dataset", ")", "\n", "self", ".", "_download_data", "(", "url", ",", "save_path", "=", "save_path", ")", "\n", "\n", "", "return", "abspath", "(", "save_path_full", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.util.util.tensor2im": [[10, 20], ["isinstance", "image_tensor[].cpu().float().numpy", "np.tile.astype", "numpy.tile", "image_tensor[].cpu().float", "numpy.transpose", "image_tensor[].cpu"], "function", ["None"], ["def", "tensor2im", "(", "input_image", ",", "imtype", "=", "np", ".", "uint8", ")", ":", "\n", "    ", "if", "isinstance", "(", "input_image", ",", "torch", ".", "Tensor", ")", ":", "\n", "        ", "image_tensor", "=", "input_image", ".", "data", "\n", "", "else", ":", "\n", "        ", "return", "input_image", "\n", "", "image_numpy", "=", "image_tensor", "[", "0", "]", ".", "cpu", "(", ")", ".", "float", "(", ")", ".", "numpy", "(", ")", "\n", "if", "image_numpy", ".", "shape", "[", "0", "]", "==", "1", ":", "\n", "        ", "image_numpy", "=", "np", ".", "tile", "(", "image_numpy", ",", "(", "3", ",", "1", ",", "1", ")", ")", "\n", "", "image_numpy", "=", "(", "np", ".", "transpose", "(", "image_numpy", ",", "(", "1", ",", "2", ",", "0", ")", ")", "+", "1", ")", "/", "2.0", "*", "255.0", "\n", "return", "image_numpy", ".", "astype", "(", "imtype", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.util.util.diagnose_network": [[22, 33], ["net.parameters", "print", "print", "torch.mean", "torch.abs"], "function", ["None"], ["", "def", "diagnose_network", "(", "net", ",", "name", "=", "'network'", ")", ":", "\n", "    ", "mean", "=", "0.0", "\n", "count", "=", "0", "\n", "for", "param", "in", "net", ".", "parameters", "(", ")", ":", "\n", "        ", "if", "param", ".", "grad", "is", "not", "None", ":", "\n", "            ", "mean", "+=", "torch", ".", "mean", "(", "torch", ".", "abs", "(", "param", ".", "grad", ".", "data", ")", ")", "\n", "count", "+=", "1", "\n", "", "", "if", "count", ">", "0", ":", "\n", "        ", "mean", "=", "mean", "/", "count", "\n", "", "print", "(", "name", ")", "\n", "print", "(", "mean", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.util.util.save_image": [[35, 42], ["PIL.Image.fromarray", "Image.fromarray.save"], "function", ["home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.util.html.HTML.save"], ["", "def", "save_image", "(", "image_numpy", ",", "image_path", ")", ":", "\n", "    ", "if", "image_numpy", ".", "shape", "[", "2", "]", "==", "18", ":", "\n", "        ", "image_numpy", "=", "image_numpy", "[", ":", ",", ":", ",", "9", ":", "12", "]", "\n", "", "if", "image_numpy", ".", "shape", "[", "2", "]", "==", "15", ":", "\n", "        ", "image_numpy", "=", "image_numpy", "[", ":", ",", ":", ",", "0", ":", "3", "]", "\n", "", "image_pil", "=", "Image", ".", "fromarray", "(", "image_numpy", ")", "\n", "image_pil", ".", "save", "(", "image_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.util.util.print_numpy": [[44, 52], ["x.flatten.astype", "print", "x.flatten.flatten", "print", "numpy.mean", "numpy.min", "numpy.max", "numpy.median", "numpy.std"], "function", ["None"], ["", "def", "print_numpy", "(", "x", ",", "val", "=", "True", ",", "shp", "=", "False", ")", ":", "\n", "    ", "x", "=", "x", ".", "astype", "(", "np", ".", "float64", ")", "\n", "if", "shp", ":", "\n", "        ", "print", "(", "'shape,'", ",", "x", ".", "shape", ")", "\n", "", "if", "val", ":", "\n", "        ", "x", "=", "x", ".", "flatten", "(", ")", "\n", "print", "(", "'mean = %3.3f, min = %3.3f, max = %3.3f, median = %3.3f, std=%3.3f'", "%", "(", "\n", "np", ".", "mean", "(", "x", ")", ",", "np", ".", "min", "(", "x", ")", ",", "np", ".", "max", "(", "x", ")", ",", "np", ".", "median", "(", "x", ")", ",", "np", ".", "std", "(", "x", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.util.util.mkdirs": [[54, 60], ["isinstance", "util.mkdir", "isinstance", "util.mkdir"], "function", ["home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.util.util.mkdir", "home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.util.util.mkdir"], ["", "", "def", "mkdirs", "(", "paths", ")", ":", "\n", "    ", "if", "isinstance", "(", "paths", ",", "list", ")", "and", "not", "isinstance", "(", "paths", ",", "str", ")", ":", "\n", "        ", "for", "path", "in", "paths", ":", "\n", "            ", "mkdir", "(", "path", ")", "\n", "", "", "else", ":", "\n", "        ", "mkdir", "(", "paths", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.util.util.mkdir": [[62, 65], ["os.path.exists", "os.makedirs"], "function", ["None"], ["", "", "def", "mkdir", "(", "path", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "path", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.models.networks.GANLoss.__init__": [[117, 125], ["torch.Module.__init__", "networks.GANLoss.register_buffer", "networks.GANLoss.register_buffer", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.MSELoss", "torch.MSELoss", "torch.BCELoss", "torch.BCELoss"], "methods", ["home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "use_lsgan", "=", "True", ",", "target_real_label", "=", "1.0", ",", "target_fake_label", "=", "0.0", ")", ":", "\n", "        ", "super", "(", "GANLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "register_buffer", "(", "'real_label'", ",", "torch", ".", "tensor", "(", "target_real_label", ")", ")", "\n", "self", ".", "register_buffer", "(", "'fake_label'", ",", "torch", ".", "tensor", "(", "target_fake_label", ")", ")", "\n", "if", "use_lsgan", ":", "\n", "            ", "self", ".", "loss", "=", "nn", ".", "MSELoss", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "loss", "=", "nn", ".", "BCELoss", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.models.networks.GANLoss.get_target_tensor": [[126, 132], ["target_tensor.expand_as"], "methods", ["None"], ["", "", "def", "get_target_tensor", "(", "self", ",", "input", ",", "target_is_real", ")", ":", "\n", "        ", "if", "target_is_real", ":", "\n", "            ", "target_tensor", "=", "self", ".", "real_label", "\n", "", "else", ":", "\n", "            ", "target_tensor", "=", "self", ".", "fake_label", "\n", "", "return", "target_tensor", ".", "expand_as", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.models.networks.GANLoss.__call__": [[133, 136], ["networks.GANLoss.get_target_tensor", "networks.GANLoss.loss"], "methods", ["home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.models.networks.GANLoss.get_target_tensor"], ["", "def", "__call__", "(", "self", ",", "input", ",", "target_is_real", ")", ":", "\n", "        ", "target_tensor", "=", "self", ".", "get_target_tensor", "(", "input", ",", "target_is_real", ")", "\n", "return", "self", ".", "loss", "(", "input", ",", "target_tensor", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.models.networks.ResnetGenerator.__init__": [[143, 185], ["torch.Module.__init__", "range", "range", "range", "torch.Sequential", "torch.Sequential", "type", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Tanh", "torch.Tanh", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "networks.ResnetBlock", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "norm_layer", "torch.ReLU", "torch.ReLU", "int", "int"], "methods", ["home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_nc", ",", "output_nc", ",", "ngf", "=", "64", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ",", "use_dropout", "=", "False", ",", "n_blocks", "=", "6", ",", "padding_type", "=", "'reflect'", ")", ":", "\n", "        ", "assert", "(", "n_blocks", ">=", "0", ")", "\n", "super", "(", "ResnetGenerator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "input_nc", "=", "input_nc", "\n", "self", ".", "output_nc", "=", "output_nc", "\n", "self", ".", "ngf", "=", "ngf", "\n", "if", "type", "(", "norm_layer", ")", "==", "functools", ".", "partial", ":", "\n", "            ", "use_bias", "=", "norm_layer", ".", "func", "==", "nn", ".", "InstanceNorm2d", "\n", "", "else", ":", "\n", "            ", "use_bias", "=", "norm_layer", "==", "nn", ".", "InstanceNorm2d", "\n", "\n", "", "model", "=", "[", "nn", ".", "ReflectionPad2d", "(", "3", ")", ",", "\n", "nn", ".", "Conv2d", "(", "input_nc", ",", "ngf", ",", "kernel_size", "=", "7", ",", "padding", "=", "0", ",", "\n", "bias", "=", "use_bias", ")", ",", "\n", "norm_layer", "(", "ngf", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", "]", "\n", "\n", "n_downsampling", "=", "2", "\n", "for", "i", "in", "range", "(", "n_downsampling", ")", ":", "\n", "            ", "mult", "=", "2", "**", "i", "\n", "model", "+=", "[", "nn", ".", "Conv2d", "(", "ngf", "*", "mult", ",", "ngf", "*", "mult", "*", "2", ",", "kernel_size", "=", "3", ",", "\n", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "use_bias", ")", ",", "\n", "norm_layer", "(", "ngf", "*", "mult", "*", "2", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", "]", "\n", "\n", "", "mult", "=", "2", "**", "n_downsampling", "\n", "for", "i", "in", "range", "(", "n_blocks", ")", ":", "\n", "            ", "model", "+=", "[", "ResnetBlock", "(", "ngf", "*", "mult", ",", "padding_type", "=", "padding_type", ",", "norm_layer", "=", "norm_layer", ",", "use_dropout", "=", "use_dropout", ",", "use_bias", "=", "use_bias", ")", "]", "\n", "\n", "", "for", "i", "in", "range", "(", "n_downsampling", ")", ":", "\n", "            ", "mult", "=", "2", "**", "(", "n_downsampling", "-", "i", ")", "\n", "model", "+=", "[", "nn", ".", "ConvTranspose2d", "(", "ngf", "*", "mult", ",", "int", "(", "ngf", "*", "mult", "/", "2", ")", ",", "\n", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "\n", "padding", "=", "1", ",", "output_padding", "=", "1", ",", "\n", "bias", "=", "use_bias", ")", ",", "\n", "norm_layer", "(", "int", "(", "ngf", "*", "mult", "/", "2", ")", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", "]", "\n", "", "model", "+=", "[", "nn", ".", "ReflectionPad2d", "(", "3", ")", "]", "\n", "model", "+=", "[", "nn", ".", "Conv2d", "(", "ngf", ",", "output_nc", ",", "kernel_size", "=", "7", ",", "padding", "=", "0", ")", "]", "\n", "model", "+=", "[", "nn", ".", "Tanh", "(", ")", "]", "\n", "\n", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "*", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.models.networks.ResnetGenerator.forward": [[186, 188], ["networks.ResnetGenerator.model"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "self", ".", "model", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.models.networks.ResnetBlock.__init__": [[192, 195], ["torch.Module.__init__", "networks.ResnetBlock.build_conv_block"], "methods", ["home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.options.base_options.BaseOptions.__init__", "home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.models.networks.ResnetBlock.build_conv_block"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "padding_type", ",", "norm_layer", ",", "use_dropout", ",", "use_bias", ")", ":", "\n", "        ", "super", "(", "ResnetBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv_block", "=", "self", ".", "build_conv_block", "(", "dim", ",", "padding_type", ",", "norm_layer", ",", "use_dropout", ",", "use_bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.models.networks.ResnetBlock.build_conv_block": [[196, 227], ["torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Dropout", "torch.Dropout", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReplicationPad2d", "torch.ReplicationPad2d", "NotImplementedError", "torch.ReplicationPad2d", "torch.ReplicationPad2d", "NotImplementedError"], "methods", ["None"], ["", "def", "build_conv_block", "(", "self", ",", "dim", ",", "padding_type", ",", "norm_layer", ",", "use_dropout", ",", "use_bias", ")", ":", "\n", "        ", "conv_block", "=", "[", "]", "\n", "p", "=", "0", "\n", "if", "padding_type", "==", "'reflect'", ":", "\n", "            ", "conv_block", "+=", "[", "nn", ".", "ReflectionPad2d", "(", "1", ")", "]", "\n", "", "elif", "padding_type", "==", "'replicate'", ":", "\n", "            ", "conv_block", "+=", "[", "nn", ".", "ReplicationPad2d", "(", "1", ")", "]", "\n", "", "elif", "padding_type", "==", "'zero'", ":", "\n", "            ", "p", "=", "1", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "'padding [%s] is not implemented'", "%", "padding_type", ")", "\n", "\n", "", "conv_block", "+=", "[", "nn", ".", "Conv2d", "(", "dim", ",", "dim", ",", "kernel_size", "=", "3", ",", "padding", "=", "p", ",", "bias", "=", "use_bias", ")", ",", "\n", "norm_layer", "(", "dim", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", "]", "\n", "if", "use_dropout", ":", "\n", "            ", "conv_block", "+=", "[", "nn", ".", "Dropout", "(", "0.5", ")", "]", "\n", "\n", "", "p", "=", "0", "\n", "if", "padding_type", "==", "'reflect'", ":", "\n", "            ", "conv_block", "+=", "[", "nn", ".", "ReflectionPad2d", "(", "1", ")", "]", "\n", "", "elif", "padding_type", "==", "'replicate'", ":", "\n", "            ", "conv_block", "+=", "[", "nn", ".", "ReplicationPad2d", "(", "1", ")", "]", "\n", "", "elif", "padding_type", "==", "'zero'", ":", "\n", "            ", "p", "=", "1", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "'padding [%s] is not implemented'", "%", "padding_type", ")", "\n", "", "conv_block", "+=", "[", "nn", ".", "Conv2d", "(", "dim", ",", "dim", ",", "kernel_size", "=", "3", ",", "padding", "=", "p", ",", "bias", "=", "use_bias", ")", ",", "\n", "norm_layer", "(", "dim", ")", "]", "\n", "\n", "return", "nn", ".", "Sequential", "(", "*", "conv_block", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.models.networks.ResnetBlock.forward": [[228, 231], ["networks.ResnetBlock.conv_block"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "x", "+", "self", ".", "conv_block", "(", "x", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.models.networks.UnetGenerator.__init__": [[238, 252], ["torch.Module.__init__", "networks.UnetSkipConnectionBlock", "range", "networks.UnetSkipConnectionBlock", "networks.UnetSkipConnectionBlock", "networks.UnetSkipConnectionBlock", "networks.UnetSkipConnectionBlock", "networks.UnetSkipConnectionBlock"], "methods", ["home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_nc", ",", "output_nc", ",", "num_downs", ",", "ngf", "=", "64", ",", "\n", "norm_layer", "=", "nn", ".", "BatchNorm2d", ",", "use_dropout", "=", "False", ")", ":", "\n", "        ", "super", "(", "UnetGenerator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# construct unet structure", "\n", "unet_block", "=", "UnetSkipConnectionBlock", "(", "ngf", "*", "8", ",", "ngf", "*", "8", ",", "input_nc", "=", "None", ",", "submodule", "=", "None", ",", "norm_layer", "=", "norm_layer", ",", "innermost", "=", "True", ")", "\n", "for", "i", "in", "range", "(", "num_downs", "-", "5", ")", ":", "\n", "            ", "unet_block", "=", "UnetSkipConnectionBlock", "(", "ngf", "*", "8", ",", "ngf", "*", "8", ",", "input_nc", "=", "None", ",", "submodule", "=", "unet_block", ",", "norm_layer", "=", "norm_layer", ",", "use_dropout", "=", "use_dropout", ")", "\n", "", "unet_block", "=", "UnetSkipConnectionBlock", "(", "ngf", "*", "4", ",", "ngf", "*", "8", ",", "input_nc", "=", "None", ",", "submodule", "=", "unet_block", ",", "norm_layer", "=", "norm_layer", ")", "\n", "unet_block", "=", "UnetSkipConnectionBlock", "(", "ngf", "*", "2", ",", "ngf", "*", "4", ",", "input_nc", "=", "None", ",", "submodule", "=", "unet_block", ",", "norm_layer", "=", "norm_layer", ")", "\n", "unet_block", "=", "UnetSkipConnectionBlock", "(", "ngf", ",", "ngf", "*", "2", ",", "input_nc", "=", "None", ",", "submodule", "=", "unet_block", ",", "norm_layer", "=", "norm_layer", ")", "\n", "unet_block", "=", "UnetSkipConnectionBlock", "(", "output_nc", ",", "ngf", ",", "input_nc", "=", "input_nc", ",", "submodule", "=", "unet_block", ",", "outermost", "=", "True", ",", "norm_layer", "=", "norm_layer", ")", "\n", "\n", "self", ".", "model", "=", "unet_block", "\n", "\n"]], "home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.models.networks.UnetGenerator.forward": [[253, 255], ["networks.UnetGenerator.model"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "self", ".", "model", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.models.networks.UnetSkipConnectionBlock.__init__": [[261, 305], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "norm_layer", "torch.ReLU", "torch.ReLU", "norm_layer", "torch.Sequential", "torch.Sequential", "type", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.Tanh", "torch.Tanh", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "outer_nc", ",", "inner_nc", ",", "input_nc", "=", "None", ",", "\n", "submodule", "=", "None", ",", "outermost", "=", "False", ",", "innermost", "=", "False", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ",", "use_dropout", "=", "False", ")", ":", "\n", "        ", "super", "(", "UnetSkipConnectionBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "outermost", "=", "outermost", "\n", "if", "type", "(", "norm_layer", ")", "==", "functools", ".", "partial", ":", "\n", "            ", "use_bias", "=", "norm_layer", ".", "func", "==", "nn", ".", "InstanceNorm2d", "\n", "", "else", ":", "\n", "            ", "use_bias", "=", "norm_layer", "==", "nn", ".", "InstanceNorm2d", "\n", "", "if", "input_nc", "is", "None", ":", "\n", "            ", "input_nc", "=", "outer_nc", "\n", "", "downconv", "=", "nn", ".", "Conv2d", "(", "input_nc", ",", "inner_nc", ",", "kernel_size", "=", "4", ",", "\n", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "use_bias", ")", "\n", "downrelu", "=", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", "\n", "downnorm", "=", "norm_layer", "(", "inner_nc", ")", "\n", "uprelu", "=", "nn", ".", "ReLU", "(", "True", ")", "\n", "upnorm", "=", "norm_layer", "(", "outer_nc", ")", "\n", "\n", "if", "outermost", ":", "\n", "            ", "upconv", "=", "nn", ".", "ConvTranspose2d", "(", "inner_nc", "*", "2", ",", "outer_nc", ",", "\n", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "\n", "padding", "=", "1", ")", "\n", "down", "=", "[", "downconv", "]", "\n", "up", "=", "[", "uprelu", ",", "upconv", ",", "nn", ".", "Tanh", "(", ")", "]", "\n", "model", "=", "down", "+", "[", "submodule", "]", "+", "up", "\n", "", "elif", "innermost", ":", "\n", "            ", "upconv", "=", "nn", ".", "ConvTranspose2d", "(", "inner_nc", ",", "outer_nc", ",", "\n", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "\n", "padding", "=", "1", ",", "bias", "=", "use_bias", ")", "\n", "down", "=", "[", "downrelu", ",", "downconv", "]", "\n", "up", "=", "[", "uprelu", ",", "upconv", ",", "upnorm", "]", "\n", "model", "=", "down", "+", "up", "\n", "", "else", ":", "\n", "            ", "upconv", "=", "nn", ".", "ConvTranspose2d", "(", "inner_nc", "*", "2", ",", "outer_nc", ",", "\n", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "\n", "padding", "=", "1", ",", "bias", "=", "use_bias", ")", "\n", "down", "=", "[", "downrelu", ",", "downconv", ",", "downnorm", "]", "\n", "up", "=", "[", "uprelu", ",", "upconv", ",", "upnorm", "]", "\n", "\n", "if", "use_dropout", ":", "\n", "                ", "model", "=", "down", "+", "[", "submodule", "]", "+", "up", "+", "[", "nn", ".", "Dropout", "(", "0.5", ")", "]", "\n", "", "else", ":", "\n", "                ", "model", "=", "down", "+", "[", "submodule", "]", "+", "up", "\n", "\n", "", "", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "*", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.models.networks.UnetSkipConnectionBlock.forward": [[306, 311], ["networks.UnetSkipConnectionBlock.model", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "networks.UnetSkipConnectionBlock.model"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "outermost", ":", "\n", "            ", "return", "self", ".", "model", "(", "x", ")", "\n", "", "else", ":", "\n", "            ", "return", "torch", ".", "cat", "(", "[", "x", ",", "self", ".", "model", "(", "x", ")", "]", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.models.networks.NLayerDiscriminator.__init__": [[315, 356], ["torch.Module.__init__", "range", "min", "torch.Sequential", "torch.Sequential", "type", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "min", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Sigmoid", "torch.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_nc", ",", "ndf", "=", "64", ",", "n_layers", "=", "3", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ",", "use_sigmoid", "=", "False", ")", ":", "\n", "        ", "super", "(", "NLayerDiscriminator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "type", "(", "norm_layer", ")", "==", "functools", ".", "partial", ":", "\n", "            ", "use_bias", "=", "norm_layer", ".", "func", "==", "nn", ".", "InstanceNorm2d", "\n", "", "else", ":", "\n", "            ", "use_bias", "=", "norm_layer", "==", "nn", ".", "InstanceNorm2d", "\n", "\n", "", "kw", "=", "4", "\n", "padw", "=", "1", "\n", "sequence", "=", "[", "\n", "nn", ".", "Conv2d", "(", "input_nc", ",", "ndf", ",", "kernel_size", "=", "kw", ",", "stride", "=", "2", ",", "padding", "=", "padw", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", "\n", "]", "\n", "\n", "nf_mult", "=", "1", "\n", "nf_mult_prev", "=", "1", "\n", "for", "n", "in", "range", "(", "1", ",", "n_layers", ")", ":", "\n", "            ", "nf_mult_prev", "=", "nf_mult", "\n", "nf_mult", "=", "min", "(", "2", "**", "n", ",", "8", ")", "\n", "sequence", "+=", "[", "\n", "nn", ".", "Conv2d", "(", "ndf", "*", "nf_mult_prev", ",", "ndf", "*", "nf_mult", ",", "\n", "kernel_size", "=", "kw", ",", "stride", "=", "2", ",", "padding", "=", "padw", ",", "bias", "=", "use_bias", ")", ",", "\n", "norm_layer", "(", "ndf", "*", "nf_mult", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", "\n", "]", "\n", "\n", "", "nf_mult_prev", "=", "nf_mult", "\n", "nf_mult", "=", "min", "(", "2", "**", "n_layers", ",", "8", ")", "\n", "sequence", "+=", "[", "\n", "nn", ".", "Conv2d", "(", "ndf", "*", "nf_mult_prev", ",", "ndf", "*", "nf_mult", ",", "\n", "kernel_size", "=", "kw", ",", "stride", "=", "1", ",", "padding", "=", "padw", ",", "bias", "=", "use_bias", ")", ",", "\n", "norm_layer", "(", "ndf", "*", "nf_mult", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", "\n", "]", "\n", "\n", "sequence", "+=", "[", "nn", ".", "Conv2d", "(", "ndf", "*", "nf_mult", ",", "1", ",", "kernel_size", "=", "kw", ",", "stride", "=", "1", ",", "padding", "=", "padw", ")", "]", "\n", "\n", "if", "use_sigmoid", ":", "\n", "            ", "sequence", "+=", "[", "nn", ".", "Sigmoid", "(", ")", "]", "\n", "\n", "", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "*", "sequence", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.models.networks.NLayerDiscriminator.forward": [[357, 359], ["networks.NLayerDiscriminator.model"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "self", ".", "model", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.models.networks.PixelDiscriminator.__init__": [[362, 381], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "type", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "networks.PixelDiscriminator.net.append", "torch.Sigmoid", "torch.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_nc", ",", "ndf", "=", "64", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ",", "use_sigmoid", "=", "False", ")", ":", "\n", "        ", "super", "(", "PixelDiscriminator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "type", "(", "norm_layer", ")", "==", "functools", ".", "partial", ":", "\n", "            ", "use_bias", "=", "norm_layer", ".", "func", "==", "nn", ".", "InstanceNorm2d", "\n", "", "else", ":", "\n", "            ", "use_bias", "=", "norm_layer", "==", "nn", ".", "InstanceNorm2d", "\n", "\n", "", "self", ".", "net", "=", "[", "\n", "nn", ".", "Conv2d", "(", "input_nc", ",", "ndf", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "ndf", ",", "ndf", "*", "2", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "use_bias", ")", ",", "\n", "norm_layer", "(", "ndf", "*", "2", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "ndf", "*", "2", ",", "1", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "use_bias", ")", "]", "\n", "\n", "if", "use_sigmoid", ":", "\n", "            ", "self", ".", "net", ".", "append", "(", "nn", ".", "Sigmoid", "(", ")", ")", "\n", "\n", "", "self", ".", "net", "=", "nn", ".", "Sequential", "(", "*", "self", ".", "net", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.models.networks.PixelDiscriminator.forward": [[382, 384], ["networks.PixelDiscriminator.net"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "self", ".", "net", "(", "input", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.models.networks.get_norm_layer": [[12, 22], ["functools.partial", "functools.partial", "NotImplementedError"], "function", ["None"], ["def", "get_norm_layer", "(", "norm_type", "=", "'instance'", ")", ":", "\n", "    ", "if", "norm_type", "==", "'batch'", ":", "\n", "        ", "norm_layer", "=", "functools", ".", "partial", "(", "nn", ".", "BatchNorm2d", ",", "affine", "=", "True", ")", "\n", "", "elif", "norm_type", "==", "'instance'", ":", "\n", "        ", "norm_layer", "=", "functools", ".", "partial", "(", "nn", ".", "InstanceNorm2d", ",", "affine", "=", "False", ",", "track_running_stats", "=", "False", ")", "\n", "", "elif", "norm_type", "==", "'none'", ":", "\n", "        ", "norm_layer", "=", "None", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'normalization layer [%s] is not found'", "%", "norm_type", ")", "\n", "", "return", "norm_layer", "\n", "\n"]], "home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.models.networks.get_scheduler": [[24, 39], ["torch.optim.lr_scheduler.LambdaLR", "torch.optim.lr_scheduler.StepLR", "torch.optim.lr_scheduler.ReduceLROnPlateau", "max", "float", "torch.optim.lr_scheduler.CosineAnnealingLR", "NotImplementedError"], "function", ["None"], ["", "def", "get_scheduler", "(", "optimizer", ",", "opt", ")", ":", "\n", "    ", "if", "opt", ".", "lr_policy", "==", "'lambda'", ":", "\n", "        ", "def", "lambda_rule", "(", "epoch", ")", ":", "\n", "            ", "lr_l", "=", "1.0", "-", "max", "(", "0", ",", "epoch", "+", "opt", ".", "epoch_count", "-", "opt", ".", "niter", ")", "/", "float", "(", "opt", ".", "niter_decay", "+", "1", ")", "\n", "return", "lr_l", "\n", "", "scheduler", "=", "lr_scheduler", ".", "LambdaLR", "(", "optimizer", ",", "lr_lambda", "=", "lambda_rule", ")", "\n", "", "elif", "opt", ".", "lr_policy", "==", "'step'", ":", "\n", "        ", "scheduler", "=", "lr_scheduler", ".", "StepLR", "(", "optimizer", ",", "step_size", "=", "opt", ".", "lr_decay_iters", ",", "gamma", "=", "0.1", ")", "\n", "", "elif", "opt", ".", "lr_policy", "==", "'plateau'", ":", "\n", "        ", "scheduler", "=", "lr_scheduler", ".", "ReduceLROnPlateau", "(", "optimizer", ",", "mode", "=", "'min'", ",", "factor", "=", "0.2", ",", "threshold", "=", "0.01", ",", "patience", "=", "5", ")", "\n", "", "elif", "opt", ".", "lr_policy", "==", "'cosine'", ":", "\n", "        ", "scheduler", "=", "lr_scheduler", ".", "CosineAnnealingLR", "(", "optimizer", ",", "T_max", "=", "opt", ".", "niter", ",", "eta_min", "=", "0", ")", "\n", "", "else", ":", "\n", "        ", "return", "NotImplementedError", "(", "'learning rate policy [%s] is not implemented'", ",", "opt", ".", "lr_policy", ")", "\n", "", "return", "scheduler", "\n", "\n"]], "home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.models.networks.init_weights": [[41, 63], ["print", "net.apply", "hasattr", "torch.nn.init.normal_", "hasattr", "torch.nn.init.constant_", "classname.find", "torch.nn.init.normal_", "torch.nn.init.constant_", "classname.find", "classname.find", "torch.nn.init.xavier_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.orthogonal_", "NotImplementedError"], "function", ["None"], ["", "def", "init_weights", "(", "net", ",", "init_type", "=", "'normal'", ",", "gain", "=", "0.02", ")", ":", "\n", "    ", "def", "init_func", "(", "m", ")", ":", "\n", "        ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "hasattr", "(", "m", ",", "'weight'", ")", "and", "(", "classname", ".", "find", "(", "'Conv'", ")", "!=", "-", "1", "or", "classname", ".", "find", "(", "'Linear'", ")", "!=", "-", "1", ")", ":", "\n", "            ", "if", "init_type", "==", "'normal'", ":", "\n", "                ", "init", ".", "normal_", "(", "m", ".", "weight", ".", "data", ",", "0.0", ",", "gain", ")", "\n", "", "elif", "init_type", "==", "'xavier'", ":", "\n", "                ", "init", ".", "xavier_normal_", "(", "m", ".", "weight", ".", "data", ",", "gain", "=", "gain", ")", "\n", "", "elif", "init_type", "==", "'kaiming'", ":", "\n", "                ", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ".", "data", ",", "a", "=", "0", ",", "mode", "=", "'fan_in'", ")", "\n", "", "elif", "init_type", "==", "'orthogonal'", ":", "\n", "                ", "init", ".", "orthogonal_", "(", "m", ".", "weight", ".", "data", ",", "gain", "=", "gain", ")", "\n", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "(", "'initialization method [%s] is not implemented'", "%", "init_type", ")", "\n", "", "if", "hasattr", "(", "m", ",", "'bias'", ")", "and", "m", ".", "bias", "is", "not", "None", ":", "\n", "                ", "init", ".", "constant_", "(", "m", ".", "bias", ".", "data", ",", "0.0", ")", "\n", "", "", "elif", "classname", ".", "find", "(", "'BatchNorm2d'", ")", "!=", "-", "1", ":", "\n", "            ", "init", ".", "normal_", "(", "m", ".", "weight", ".", "data", ",", "1.0", ",", "gain", ")", "\n", "init", ".", "constant_", "(", "m", ".", "bias", ".", "data", ",", "0.0", ")", "\n", "\n", "", "", "print", "(", "'initialize network with %s'", "%", "init_type", ")", "\n", "net", ".", "apply", "(", "init_func", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.models.networks.init_net": [[65, 72], ["networks.init_weights", "len", "torch.cuda.is_available", "torch.cuda.is_available", "torch.nn.DataParallel.to", "torch.nn.DataParallel", "torch.nn.DataParallel"], "function", ["home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.models.networks.init_weights"], ["", "def", "init_net", "(", "net", ",", "init_type", "=", "'normal'", ",", "init_gain", "=", "0.02", ",", "gpu_ids", "=", "[", "]", ")", ":", "\n", "    ", "if", "len", "(", "gpu_ids", ")", ">", "0", ":", "\n", "        ", "assert", "(", "torch", ".", "cuda", ".", "is_available", "(", ")", ")", "\n", "net", ".", "to", "(", "gpu_ids", "[", "0", "]", ")", "\n", "net", "=", "torch", ".", "nn", ".", "DataParallel", "(", "net", ",", "gpu_ids", ")", "\n", "", "init_weights", "(", "net", ",", "init_type", ",", "gain", "=", "init_gain", ")", "\n", "return", "net", "\n", "\n"]], "home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.models.networks.define_G": [[74, 89], ["networks.get_norm_layer", "networks.init_net", "networks.ResnetGenerator", "networks.ResnetGenerator", "networks.UnetGenerator", "networks.UnetGenerator", "NotImplementedError"], "function", ["home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.models.networks.get_norm_layer", "home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.models.networks.init_net"], ["", "def", "define_G", "(", "input_nc", ",", "output_nc", ",", "ngf", ",", "netG", ",", "norm", "=", "'batch'", ",", "use_dropout", "=", "False", ",", "init_type", "=", "'normal'", ",", "init_gain", "=", "0.02", ",", "gpu_ids", "=", "[", "]", ")", ":", "\n", "    ", "net", "=", "None", "\n", "norm_layer", "=", "get_norm_layer", "(", "norm_type", "=", "norm", ")", "\n", "\n", "if", "netG", "==", "'resnet_9blocks'", ":", "\n", "        ", "net", "=", "ResnetGenerator", "(", "input_nc", ",", "output_nc", ",", "ngf", ",", "norm_layer", "=", "norm_layer", ",", "use_dropout", "=", "use_dropout", ",", "n_blocks", "=", "9", ")", "\n", "", "elif", "netG", "==", "'resnet_6blocks'", ":", "\n", "        ", "net", "=", "ResnetGenerator", "(", "input_nc", ",", "output_nc", ",", "ngf", ",", "norm_layer", "=", "norm_layer", ",", "use_dropout", "=", "use_dropout", ",", "n_blocks", "=", "6", ")", "\n", "", "elif", "netG", "==", "'unet_128'", ":", "\n", "        ", "net", "=", "UnetGenerator", "(", "input_nc", ",", "output_nc", ",", "7", ",", "ngf", ",", "norm_layer", "=", "norm_layer", ",", "use_dropout", "=", "use_dropout", ")", "\n", "", "elif", "netG", "==", "'unet_256'", ":", "\n", "        ", "net", "=", "UnetGenerator", "(", "input_nc", ",", "output_nc", ",", "8", ",", "ngf", ",", "norm_layer", "=", "norm_layer", ",", "use_dropout", "=", "use_dropout", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'Generator model name [%s] is not recognized'", "%", "netG", ")", "\n", "", "return", "init_net", "(", "net", ",", "init_type", ",", "init_gain", ",", "gpu_ids", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.models.networks.define_D": [[91, 105], ["networks.get_norm_layer", "networks.init_net", "networks.NLayerDiscriminator", "networks.NLayerDiscriminator", "networks.PixelDiscriminator", "NotImplementedError"], "function", ["home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.models.networks.get_norm_layer", "home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.models.networks.init_net"], ["", "def", "define_D", "(", "input_nc", ",", "ndf", ",", "netD", ",", "\n", "n_layers_D", "=", "3", ",", "norm", "=", "'batch'", ",", "use_sigmoid", "=", "False", ",", "init_type", "=", "'normal'", ",", "init_gain", "=", "0.02", ",", "gpu_ids", "=", "[", "]", ")", ":", "\n", "    ", "net", "=", "None", "\n", "norm_layer", "=", "get_norm_layer", "(", "norm_type", "=", "norm", ")", "\n", "\n", "if", "netD", "==", "'basic'", ":", "\n", "        ", "net", "=", "NLayerDiscriminator", "(", "input_nc", ",", "ndf", ",", "n_layers", "=", "3", ",", "norm_layer", "=", "norm_layer", ",", "use_sigmoid", "=", "use_sigmoid", ")", "\n", "", "elif", "netD", "==", "'n_layers'", ":", "\n", "        ", "net", "=", "NLayerDiscriminator", "(", "input_nc", ",", "ndf", ",", "n_layers_D", ",", "norm_layer", "=", "norm_layer", ",", "use_sigmoid", "=", "use_sigmoid", ")", "\n", "", "elif", "netD", "==", "'pixel'", ":", "\n", "        ", "net", "=", "PixelDiscriminator", "(", "input_nc", ",", "ndf", ",", "norm_layer", "=", "norm_layer", ",", "use_sigmoid", "=", "use_sigmoid", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'Discriminator model name [%s] is not recognized'", "%", "net", ")", "\n", "", "return", "init_net", "(", "net", ",", "init_type", ",", "init_gain", ",", "gpu_ids", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.models.test_model.TestModel.name": [[6, 8], ["None"], "methods", ["None"], ["    ", "def", "name", "(", "self", ")", ":", "\n", "        ", "return", "'TestModel'", "\n", "\n"]], "home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.models.test_model.TestModel.modify_commandline_options": [[9, 18], ["parser.set_defaults", "parser.add_argument"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "modify_commandline_options", "(", "parser", ",", "is_train", "=", "True", ")", ":", "\n", "        ", "assert", "not", "is_train", ",", "'TestModel cannot be used in train mode'", "\n", "parser", ".", "set_defaults", "(", "dataset_mode", "=", "'single'", ")", "\n", "parser", ".", "add_argument", "(", "'--model_suffix'", ",", "type", "=", "str", ",", "default", "=", "''", ",", "\n", "help", "=", "'In checkpoints_dir, [epoch]_net_G[model_suffix].pth will'", "\n", "' be loaded as the generator of TestModel'", ")", "\n", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.models.test_model.TestModel.initialize": [[19, 36], ["base_model.BaseModel.initialize", "networks.define_G", "setattr"], "methods", ["home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.options.base_options.BaseOptions.initialize", "home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.models.networks.define_G"], ["", "def", "initialize", "(", "self", ",", "opt", ")", ":", "\n", "        ", "assert", "(", "not", "opt", ".", "isTrain", ")", "\n", "BaseModel", ".", "initialize", "(", "self", ",", "opt", ")", "\n", "\n", "# specify the training losses you want to print out. The program will call base_model.get_current_losses", "\n", "self", ".", "loss_names", "=", "[", "]", "\n", "# specify the images you want to save/display. The program will call base_model.get_current_visuals", "\n", "self", ".", "visual_names", "=", "[", "'real_A'", ",", "'fake_B'", "]", "\n", "# specify the models you want to save to the disk. The program will call base_model.save_networks and base_model.load_networks", "\n", "self", ".", "model_names", "=", "[", "'G'", "+", "opt", ".", "model_suffix", "]", "\n", "\n", "self", ".", "netG", "=", "networks", ".", "define_G", "(", "opt", ".", "input_nc", ",", "opt", ".", "output_nc", ",", "opt", ".", "ngf", ",", "opt", ".", "netG", ",", "\n", "opt", ".", "norm", ",", "not", "opt", ".", "no_dropout", ",", "opt", ".", "init_type", ",", "opt", ".", "init_gain", ",", "self", ".", "gpu_ids", ")", "\n", "\n", "# assigns the model to self.netG_[suffix] so that it can be loaded", "\n", "# please see BaseModel.load_networks", "\n", "setattr", "(", "self", ",", "'netG'", "+", "opt", ".", "model_suffix", ",", "self", ".", "netG", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.models.test_model.TestModel.set_input": [[37, 41], ["input[].to"], "methods", ["None"], ["", "def", "set_input", "(", "self", ",", "input", ")", ":", "\n", "# we need to use single_dataset mode", "\n", "        ", "self", ".", "real_A", "=", "input", "[", "'A'", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "image_paths", "=", "input", "[", "'A_paths'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.models.test_model.TestModel.forward": [[42, 44], ["test_model.TestModel.netG"], "methods", ["None"], ["", "def", "forward", "(", "self", ")", ":", "\n", "        ", "self", ".", "fake_B", "=", "self", ".", "netG", "(", "self", ".", "real_A", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.models.cycle_gan_model.CycleGANModel.name": [[9, 11], ["None"], "methods", ["None"], ["    ", "def", "name", "(", "self", ")", ":", "\n", "        ", "return", "'CycleGANModel'", "\n", "\n"]], "home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.models.cycle_gan_model.CycleGANModel.modify_commandline_options": [[12, 23], ["parser.set_defaults", "parser.add_argument", "parser.add_argument", "parser.add_argument"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "modify_commandline_options", "(", "parser", ",", "is_train", "=", "True", ")", ":", "\n", "# default CycleGAN did not use dropout", "\n", "        ", "parser", ".", "set_defaults", "(", "no_dropout", "=", "True", ")", "\n", "if", "is_train", ":", "\n", "            ", "parser", ".", "add_argument", "(", "'--lambda_A'", ",", "type", "=", "float", ",", "default", "=", "10.0", ",", "help", "=", "'weight for cycle loss (A -> B -> A)'", ")", "\n", "parser", ".", "add_argument", "(", "'--lambda_B'", ",", "type", "=", "float", ",", "default", "=", "10.0", ",", "\n", "help", "=", "'weight for cycle loss (B -> A -> B)'", ")", "\n", "parser", ".", "add_argument", "(", "'--lambda_identity'", ",", "type", "=", "float", ",", "default", "=", "0.5", ",", "help", "=", "'use identity mapping. Setting lambda_identity other than 0 has an effect of scaling the weight of the identity mapping loss. For example, if the weight of the identity loss should be 10 times smaller than the weight of the reconstruction loss, please set lambda_identity = 0.1'", ")", "\n", "\n", "", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.models.cycle_gan_model.CycleGANModel.initialize": [[24, 73], ["base_model.BaseModel.initialize", "networks.define_G", "networks.define_G", "visual_names_A.append", "visual_names_B.append", "networks.define_D", "networks.define_D", "util.image_pool.ImagePool", "util.image_pool.ImagePool", "networks.GANLoss().to", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.optim.Adam", "torch.optim.Adam", "cycle_gan_model.CycleGANModel.optimizers.append", "cycle_gan_model.CycleGANModel.optimizers.append", "itertools.chain", "itertools.chain", "networks.GANLoss", "cycle_gan_model.CycleGANModel.netG_A.parameters", "cycle_gan_model.CycleGANModel.netG_B.parameters", "cycle_gan_model.CycleGANModel.netD_A.parameters", "cycle_gan_model.CycleGANModel.netD_B.parameters"], "methods", ["home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.options.base_options.BaseOptions.initialize", "home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.models.networks.define_G", "home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.models.networks.define_G", "home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.models.networks.define_D", "home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.models.networks.define_D"], ["", "def", "initialize", "(", "self", ",", "opt", ")", ":", "\n", "        ", "BaseModel", ".", "initialize", "(", "self", ",", "opt", ")", "\n", "\n", "# specify the training losses you want to print out. The program will call base_model.get_current_losses", "\n", "self", ".", "loss_names", "=", "[", "'D_A'", ",", "'G_A'", ",", "'cycle_A'", ",", "'idt_A'", ",", "'D_B'", ",", "'G_B'", ",", "'cycle_B'", ",", "'idt_B'", "]", "\n", "# specify the images you want to save/display. The program will call base_model.get_current_visuals", "\n", "visual_names_A", "=", "[", "'real_A'", ",", "'fake_B'", ",", "'rec_A'", "]", "\n", "visual_names_B", "=", "[", "'real_B'", ",", "'fake_A'", ",", "'rec_B'", "]", "\n", "if", "self", ".", "isTrain", "and", "self", ".", "opt", ".", "lambda_identity", ">", "0.0", ":", "\n", "            ", "visual_names_A", ".", "append", "(", "'idt_A'", ")", "\n", "visual_names_B", ".", "append", "(", "'idt_B'", ")", "\n", "\n", "", "self", ".", "visual_names", "=", "visual_names_A", "+", "visual_names_B", "\n", "# specify the models you want to save to the disk. The program will call base_model.save_networks and base_model.load_networks", "\n", "if", "self", ".", "isTrain", ":", "\n", "            ", "self", ".", "model_names", "=", "[", "'G_A'", ",", "'G_B'", ",", "'D_A'", ",", "'D_B'", "]", "\n", "", "else", ":", "# during test time, only load Gs", "\n", "            ", "self", ".", "model_names", "=", "[", "'G_A'", ",", "'G_B'", "]", "\n", "\n", "# load/define networks", "\n", "# The naming conversion is different from those used in the paper", "\n", "# Code (paper): G_A (G), G_B (F), D_A (D_Y), D_B (D_X)", "\n", "", "self", ".", "netG_A", "=", "networks", ".", "define_G", "(", "opt", ".", "input_nc", ",", "opt", ".", "output_nc", ",", "opt", ".", "ngf", ",", "opt", ".", "netG", ",", "opt", ".", "norm", ",", "\n", "not", "opt", ".", "no_dropout", ",", "opt", ".", "init_type", ",", "opt", ".", "init_gain", ",", "self", ".", "gpu_ids", ")", "\n", "self", ".", "netG_B", "=", "networks", ".", "define_G", "(", "opt", ".", "output_nc", ",", "opt", ".", "input_nc", ",", "opt", ".", "ngf", ",", "opt", ".", "netG", ",", "opt", ".", "norm", ",", "\n", "not", "opt", ".", "no_dropout", ",", "opt", ".", "init_type", ",", "opt", ".", "init_gain", ",", "self", ".", "gpu_ids", ")", "\n", "\n", "if", "self", ".", "isTrain", ":", "\n", "            ", "use_sigmoid", "=", "opt", ".", "no_lsgan", "\n", "self", ".", "netD_A", "=", "networks", ".", "define_D", "(", "opt", ".", "output_nc", ",", "opt", ".", "ndf", ",", "opt", ".", "netD", ",", "\n", "opt", ".", "n_layers_D", ",", "opt", ".", "norm", ",", "use_sigmoid", ",", "opt", ".", "init_type", ",", "opt", ".", "init_gain", ",", "self", ".", "gpu_ids", ")", "\n", "self", ".", "netD_B", "=", "networks", ".", "define_D", "(", "opt", ".", "input_nc", ",", "opt", ".", "ndf", ",", "opt", ".", "netD", ",", "\n", "opt", ".", "n_layers_D", ",", "opt", ".", "norm", ",", "use_sigmoid", ",", "opt", ".", "init_type", ",", "opt", ".", "init_gain", ",", "self", ".", "gpu_ids", ")", "\n", "\n", "", "if", "self", ".", "isTrain", ":", "\n", "            ", "self", ".", "fake_A_pool", "=", "ImagePool", "(", "opt", ".", "pool_size", ")", "\n", "self", ".", "fake_B_pool", "=", "ImagePool", "(", "opt", ".", "pool_size", ")", "\n", "# define loss functions", "\n", "self", ".", "criterionGAN", "=", "networks", ".", "GANLoss", "(", "use_lsgan", "=", "not", "opt", ".", "no_lsgan", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "criterionCycle", "=", "torch", ".", "nn", ".", "L1Loss", "(", ")", "\n", "self", ".", "criterionIdt", "=", "torch", ".", "nn", ".", "L1Loss", "(", ")", "\n", "# initialize optimizers", "\n", "self", ".", "optimizer_G", "=", "torch", ".", "optim", ".", "Adam", "(", "itertools", ".", "chain", "(", "self", ".", "netG_A", ".", "parameters", "(", ")", ",", "self", ".", "netG_B", ".", "parameters", "(", ")", ")", ",", "\n", "lr", "=", "opt", ".", "lr", ",", "betas", "=", "(", "opt", ".", "beta1", ",", "0.999", ")", ")", "\n", "self", ".", "optimizer_D", "=", "torch", ".", "optim", ".", "Adam", "(", "itertools", ".", "chain", "(", "self", ".", "netD_A", ".", "parameters", "(", ")", ",", "self", ".", "netD_B", ".", "parameters", "(", ")", ")", ",", "\n", "lr", "=", "opt", ".", "lr", ",", "betas", "=", "(", "opt", ".", "beta1", ",", "0.999", ")", ")", "\n", "self", ".", "optimizers", "=", "[", "]", "\n", "self", ".", "optimizers", ".", "append", "(", "self", ".", "optimizer_G", ")", "\n", "self", ".", "optimizers", ".", "append", "(", "self", ".", "optimizer_D", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.models.cycle_gan_model.CycleGANModel.set_input": [[74, 79], ["input[].to", "input[].to"], "methods", ["None"], ["", "", "def", "set_input", "(", "self", ",", "input", ")", ":", "\n", "        ", "AtoB", "=", "self", ".", "opt", ".", "direction", "==", "'AtoB'", "\n", "self", ".", "real_A", "=", "input", "[", "'A'", "if", "AtoB", "else", "'B'", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "real_B", "=", "input", "[", "'B'", "if", "AtoB", "else", "'A'", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "image_paths", "=", "input", "[", "'A_paths'", "if", "AtoB", "else", "'B_paths'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.models.cycle_gan_model.CycleGANModel.forward": [[80, 86], ["cycle_gan_model.CycleGANModel.netG_A", "cycle_gan_model.CycleGANModel.netG_B", "cycle_gan_model.CycleGANModel.netG_B", "cycle_gan_model.CycleGANModel.netG_A"], "methods", ["None"], ["", "def", "forward", "(", "self", ")", ":", "\n", "        ", "self", ".", "fake_B", "=", "self", ".", "netG_A", "(", "self", ".", "real_A", ")", "\n", "self", ".", "rec_A", "=", "self", ".", "netG_B", "(", "self", ".", "fake_B", ")", "\n", "\n", "self", ".", "fake_A", "=", "self", ".", "netG_B", "(", "self", ".", "real_B", ")", "\n", "self", ".", "rec_B", "=", "self", ".", "netG_A", "(", "self", ".", "fake_A", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.models.cycle_gan_model.CycleGANModel.backward_D_basic": [[87, 99], ["netD", "cycle_gan_model.CycleGANModel.criterionGAN", "netD", "cycle_gan_model.CycleGANModel.criterionGAN", "loss_D.backward", "fake.detach"], "methods", ["None"], ["", "def", "backward_D_basic", "(", "self", ",", "netD", ",", "real", ",", "fake", ")", ":", "\n", "# Real", "\n", "        ", "pred_real", "=", "netD", "(", "real", ")", "\n", "loss_D_real", "=", "self", ".", "criterionGAN", "(", "pred_real", ",", "True", ")", "\n", "# Fake", "\n", "pred_fake", "=", "netD", "(", "fake", ".", "detach", "(", ")", ")", "\n", "loss_D_fake", "=", "self", ".", "criterionGAN", "(", "pred_fake", ",", "False", ")", "\n", "# Combined loss", "\n", "loss_D", "=", "(", "loss_D_real", "+", "loss_D_fake", ")", "*", "0.5", "\n", "# backward", "\n", "loss_D", ".", "backward", "(", ")", "\n", "return", "loss_D", "\n", "\n"]], "home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.models.cycle_gan_model.CycleGANModel.backward_D_A": [[100, 103], ["cycle_gan_model.CycleGANModel.fake_B_pool.query", "cycle_gan_model.CycleGANModel.backward_D_basic"], "methods", ["home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.util.image_pool.ImagePool.query", "home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.models.cycle_gan_model.CycleGANModel.backward_D_basic"], ["", "def", "backward_D_A", "(", "self", ")", ":", "\n", "        ", "fake_B", "=", "self", ".", "fake_B_pool", ".", "query", "(", "self", ".", "fake_B", ")", "\n", "self", ".", "loss_D_A", "=", "self", ".", "backward_D_basic", "(", "self", ".", "netD_A", ",", "self", ".", "real_B", ",", "fake_B", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.models.cycle_gan_model.CycleGANModel.backward_D_B": [[104, 107], ["cycle_gan_model.CycleGANModel.fake_A_pool.query", "cycle_gan_model.CycleGANModel.backward_D_basic"], "methods", ["home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.util.image_pool.ImagePool.query", "home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.models.cycle_gan_model.CycleGANModel.backward_D_basic"], ["", "def", "backward_D_B", "(", "self", ")", ":", "\n", "        ", "fake_A", "=", "self", ".", "fake_A_pool", ".", "query", "(", "self", ".", "fake_A", ")", "\n", "self", ".", "loss_D_B", "=", "self", ".", "backward_D_basic", "(", "self", ".", "netD_B", ",", "self", ".", "real_A", ",", "fake_A", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.models.cycle_gan_model.CycleGANModel.backward_G": [[108, 135], ["cycle_gan_model.CycleGANModel.criterionGAN", "cycle_gan_model.CycleGANModel.criterionGAN", "cycle_gan_model.CycleGANModel.loss_G.backward", "cycle_gan_model.CycleGANModel.netG_A", "cycle_gan_model.CycleGANModel.netG_B", "cycle_gan_model.CycleGANModel.netD_A", "cycle_gan_model.CycleGANModel.netD_B", "cycle_gan_model.CycleGANModel.criterionCycle", "cycle_gan_model.CycleGANModel.criterionCycle", "cycle_gan_model.CycleGANModel.criterionIdt", "cycle_gan_model.CycleGANModel.criterionIdt"], "methods", ["None"], ["", "def", "backward_G", "(", "self", ")", ":", "\n", "        ", "lambda_idt", "=", "self", ".", "opt", ".", "lambda_identity", "\n", "lambda_A", "=", "self", ".", "opt", ".", "lambda_A", "\n", "lambda_B", "=", "self", ".", "opt", ".", "lambda_B", "\n", "# Identity loss", "\n", "if", "lambda_idt", ">", "0", ":", "\n", "# G_A should be identity if real_B is fed.", "\n", "            ", "self", ".", "idt_A", "=", "self", ".", "netG_A", "(", "self", ".", "real_B", ")", "\n", "self", ".", "loss_idt_A", "=", "self", ".", "criterionIdt", "(", "self", ".", "idt_A", ",", "self", ".", "real_B", ")", "*", "lambda_B", "*", "lambda_idt", "\n", "# G_B should be identity if real_A is fed.", "\n", "self", ".", "idt_B", "=", "self", ".", "netG_B", "(", "self", ".", "real_A", ")", "\n", "self", ".", "loss_idt_B", "=", "self", ".", "criterionIdt", "(", "self", ".", "idt_B", ",", "self", ".", "real_A", ")", "*", "lambda_A", "*", "lambda_idt", "\n", "", "else", ":", "\n", "            ", "self", ".", "loss_idt_A", "=", "0", "\n", "self", ".", "loss_idt_B", "=", "0", "\n", "\n", "# GAN loss D_A(G_A(A))", "\n", "", "self", ".", "loss_G_A", "=", "self", ".", "criterionGAN", "(", "self", ".", "netD_A", "(", "self", ".", "fake_B", ")", ",", "True", ")", "\n", "# GAN loss D_B(G_B(B))", "\n", "self", ".", "loss_G_B", "=", "self", ".", "criterionGAN", "(", "self", ".", "netD_B", "(", "self", ".", "fake_A", ")", ",", "True", ")", "\n", "# Forward cycle loss", "\n", "self", ".", "loss_cycle_A", "=", "self", ".", "criterionCycle", "(", "self", ".", "rec_A", ",", "self", ".", "real_A", ")", "*", "lambda_A", "\n", "# Backward cycle loss", "\n", "self", ".", "loss_cycle_B", "=", "self", ".", "criterionCycle", "(", "self", ".", "rec_B", ",", "self", ".", "real_B", ")", "*", "lambda_B", "\n", "# combined loss", "\n", "self", ".", "loss_G", "=", "self", ".", "loss_G_A", "+", "self", ".", "loss_G_B", "+", "self", ".", "loss_cycle_A", "+", "self", ".", "loss_cycle_B", "+", "self", ".", "loss_idt_A", "+", "self", ".", "loss_idt_B", "\n", "self", ".", "loss_G", ".", "backward", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.models.cycle_gan_model.CycleGANModel.optimize_parameters": [[136, 150], ["cycle_gan_model.CycleGANModel.forward", "cycle_gan_model.CycleGANModel.set_requires_grad", "cycle_gan_model.CycleGANModel.optimizer_G.zero_grad", "cycle_gan_model.CycleGANModel.backward_G", "cycle_gan_model.CycleGANModel.optimizer_G.step", "cycle_gan_model.CycleGANModel.set_requires_grad", "cycle_gan_model.CycleGANModel.optimizer_D.zero_grad", "cycle_gan_model.CycleGANModel.backward_D_A", "cycle_gan_model.CycleGANModel.backward_D_B", "cycle_gan_model.CycleGANModel.optimizer_D.step"], "methods", ["home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.models.base_model.BaseModel.forward", "home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.models.base_model.BaseModel.set_requires_grad", "home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.models.cycle_gan_model.CycleGANModel.backward_G", "home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.models.base_model.BaseModel.set_requires_grad", "home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.models.cycle_gan_model.CycleGANModel.backward_D_A", "home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.models.cycle_gan_model.CycleGANModel.backward_D_B"], ["", "def", "optimize_parameters", "(", "self", ")", ":", "\n", "# forward", "\n", "        ", "self", ".", "forward", "(", ")", "\n", "# G_A and G_B", "\n", "self", ".", "set_requires_grad", "(", "[", "self", ".", "netD_A", ",", "self", ".", "netD_B", "]", ",", "False", ")", "\n", "self", ".", "optimizer_G", ".", "zero_grad", "(", ")", "\n", "self", ".", "backward_G", "(", ")", "\n", "self", ".", "optimizer_G", ".", "step", "(", ")", "\n", "# D_A and D_B", "\n", "self", ".", "set_requires_grad", "(", "[", "self", ".", "netD_A", ",", "self", ".", "netD_B", "]", ",", "True", ")", "\n", "self", ".", "optimizer_D", ".", "zero_grad", "(", ")", "\n", "self", ".", "backward_D_A", "(", ")", "\n", "self", ".", "backward_D_B", "(", ")", "\n", "self", ".", "optimizer_D", ".", "step", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.models.__init__.find_model_using_name": [[5, 27], ["importlib.import_module", "importlib.import_module.__dict__.items", "model_name.replace", "print", "exit", "issubclass", "name.lower", "target_model_name.lower"], "function", ["None"], []], "home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.models.__init__.get_option_setter": [[29, 32], ["__init__.find_model_using_name"], "function", ["home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.models.__init__.find_model_using_name"], []], "home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.models.__init__.create_model": [[34, 40], ["__init__.find_model_using_name", "find_model_using_name.", "model.initialize", "print", "model.name"], "function", ["home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.models.__init__.find_model_using_name", "home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.options.base_options.BaseOptions.initialize", "home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.data.unaligned_dataset.UnalignedDataset.name"], []], "home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.models.base_model.BaseModel.modify_commandline_options": [[11, 14], ["None"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "modify_commandline_options", "(", "parser", ",", "is_train", ")", ":", "\n", "        ", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.models.base_model.BaseModel.name": [[15, 17], ["None"], "methods", ["None"], ["", "def", "name", "(", "self", ")", ":", "\n", "        ", "return", "'BaseModel'", "\n", "\n"]], "home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.models.base_model.BaseModel.initialize": [[18, 30], ["os.path.join", "torch.device", "torch.device"], "methods", ["None"], ["", "def", "initialize", "(", "self", ",", "opt", ")", ":", "\n", "        ", "self", ".", "opt", "=", "opt", "\n", "self", ".", "gpu_ids", "=", "opt", ".", "gpu_ids", "\n", "self", ".", "isTrain", "=", "opt", ".", "isTrain", "\n", "self", ".", "device", "=", "torch", ".", "device", "(", "'cuda:{}'", ".", "format", "(", "self", ".", "gpu_ids", "[", "0", "]", ")", ")", "if", "self", ".", "gpu_ids", "else", "torch", ".", "device", "(", "'cpu'", ")", "\n", "self", ".", "save_dir", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "checkpoints_dir", ",", "opt", ".", "name", ")", "\n", "if", "opt", ".", "resize_or_crop", "!=", "'scale_width'", ":", "\n", "            ", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "True", "\n", "", "self", ".", "loss_names", "=", "[", "]", "\n", "self", ".", "model_names", "=", "[", "]", "\n", "self", ".", "visual_names", "=", "[", "]", "\n", "self", ".", "image_paths", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.models.base_model.BaseModel.set_input": [[31, 33], ["None"], "methods", ["None"], ["", "def", "set_input", "(", "self", ",", "input", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.models.base_model.BaseModel.forward": [[34, 36], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.models.base_model.BaseModel.setup": [[38, 45], ["base_model.BaseModel.print_networks", "base_model.BaseModel.load_networks", "networks.get_scheduler"], "methods", ["home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.models.base_model.BaseModel.print_networks", "home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.models.base_model.BaseModel.load_networks", "home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.models.networks.get_scheduler"], ["", "def", "setup", "(", "self", ",", "opt", ",", "parser", "=", "None", ")", ":", "\n", "        ", "if", "self", ".", "isTrain", ":", "\n", "            ", "self", ".", "schedulers", "=", "[", "networks", ".", "get_scheduler", "(", "optimizer", ",", "opt", ")", "for", "optimizer", "in", "self", ".", "optimizers", "]", "\n", "", "if", "not", "self", ".", "isTrain", "or", "opt", ".", "continue_train", ":", "\n", "            ", "load_suffix", "=", "'iter_%d'", "%", "opt", ".", "load_iter", "if", "opt", ".", "load_iter", ">", "0", "else", "opt", ".", "epoch", "\n", "self", ".", "load_networks", "(", "load_suffix", ")", "\n", "", "self", ".", "print_networks", "(", "opt", ".", "verbose", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.models.base_model.BaseModel.eval": [[47, 52], ["isinstance", "getattr", "getattr.eval"], "methods", ["home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.models.base_model.BaseModel.eval"], ["", "def", "eval", "(", "self", ")", ":", "\n", "        ", "for", "name", "in", "self", ".", "model_names", ":", "\n", "            ", "if", "isinstance", "(", "name", ",", "str", ")", ":", "\n", "                ", "net", "=", "getattr", "(", "self", ",", "'net'", "+", "name", ")", "\n", "net", ".", "eval", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.models.base_model.BaseModel.test": [[55, 58], ["torch.no_grad", "base_model.BaseModel.forward"], "methods", ["home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.models.base_model.BaseModel.forward"], ["", "", "", "def", "test", "(", "self", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "self", ".", "forward", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.models.base_model.BaseModel.get_image_paths": [[60, 62], ["None"], "methods", ["None"], ["", "", "def", "get_image_paths", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "image_paths", "\n", "\n"]], "home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.models.base_model.BaseModel.optimize_parameters": [[63, 65], ["None"], "methods", ["None"], ["", "def", "optimize_parameters", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.models.base_model.BaseModel.update_learning_rate": [[67, 72], ["print", "scheduler.step"], "methods", ["None"], ["", "def", "update_learning_rate", "(", "self", ")", ":", "\n", "        ", "for", "scheduler", "in", "self", ".", "schedulers", ":", "\n", "            ", "scheduler", ".", "step", "(", ")", "\n", "", "lr", "=", "self", ".", "optimizers", "[", "0", "]", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", "\n", "print", "(", "'learning rate = %.7f'", "%", "lr", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.models.base_model.BaseModel.get_current_visuals": [[74, 80], ["collections.OrderedDict", "isinstance", "getattr"], "methods", ["None"], ["", "def", "get_current_visuals", "(", "self", ")", ":", "\n", "        ", "visual_ret", "=", "OrderedDict", "(", ")", "\n", "for", "name", "in", "self", ".", "visual_names", ":", "\n", "            ", "if", "isinstance", "(", "name", ",", "str", ")", ":", "\n", "                ", "visual_ret", "[", "name", "]", "=", "getattr", "(", "self", ",", "name", ")", "\n", "", "", "return", "visual_ret", "\n", "\n"]], "home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.models.base_model.BaseModel.get_current_losses": [[82, 89], ["collections.OrderedDict", "isinstance", "float", "getattr"], "methods", ["None"], ["", "def", "get_current_losses", "(", "self", ")", ":", "\n", "        ", "errors_ret", "=", "OrderedDict", "(", ")", "\n", "for", "name", "in", "self", ".", "loss_names", ":", "\n", "            ", "if", "isinstance", "(", "name", ",", "str", ")", ":", "\n", "# float(...) works for both scalar tensor and float number", "\n", "                ", "errors_ret", "[", "name", "]", "=", "float", "(", "getattr", "(", "self", ",", "'loss_'", "+", "name", ")", ")", "\n", "", "", "return", "errors_ret", "\n", "\n"]], "home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.models.base_model.BaseModel.save_networks": [[91, 103], ["isinstance", "os.path.join", "getattr", "torch.cuda.is_available", "torch.save", "getattr.cuda", "torch.save", "len", "getattr.module.cpu().state_dict", "getattr.cpu().state_dict", "getattr.module.cpu", "getattr.cpu"], "methods", ["home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.util.html.HTML.save", "home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.util.html.HTML.save"], ["", "def", "save_networks", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "for", "name", "in", "self", ".", "model_names", ":", "\n", "            ", "if", "isinstance", "(", "name", ",", "str", ")", ":", "\n", "                ", "save_filename", "=", "'%s_net_%s.pth'", "%", "(", "epoch", ",", "name", ")", "\n", "save_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "save_dir", ",", "save_filename", ")", "\n", "net", "=", "getattr", "(", "self", ",", "'net'", "+", "name", ")", "\n", "\n", "if", "len", "(", "self", ".", "gpu_ids", ")", ">", "0", "and", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "                    ", "torch", ".", "save", "(", "net", ".", "module", ".", "cpu", "(", ")", ".", "state_dict", "(", ")", ",", "save_path", ")", "\n", "net", ".", "cuda", "(", "self", ".", "gpu_ids", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "                    ", "torch", ".", "save", "(", "net", ".", "cpu", "(", ")", ".", "state_dict", "(", ")", ",", "save_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.models.base_model.BaseModel.__patch_instance_norm_state_dict": [[104, 116], ["len", "base_model.BaseModel.__patch_instance_norm_state_dict", "module.__class__.__name__.startswith", "module.__class__.__name__.startswith", "state_dict.pop", "getattr", "getattr", "state_dict.pop"], "methods", ["home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.models.base_model.BaseModel.__patch_instance_norm_state_dict"], ["", "", "", "", "def", "__patch_instance_norm_state_dict", "(", "self", ",", "state_dict", ",", "module", ",", "keys", ",", "i", "=", "0", ")", ":", "\n", "        ", "key", "=", "keys", "[", "i", "]", "\n", "if", "i", "+", "1", "==", "len", "(", "keys", ")", ":", "# at the end, pointing to a parameter/buffer", "\n", "            ", "if", "module", ".", "__class__", ".", "__name__", ".", "startswith", "(", "'InstanceNorm'", ")", "and", "(", "key", "==", "'running_mean'", "or", "key", "==", "'running_var'", ")", ":", "\n", "                ", "if", "getattr", "(", "module", ",", "key", ")", "is", "None", ":", "\n", "                    ", "state_dict", ".", "pop", "(", "'.'", ".", "join", "(", "keys", ")", ")", "\n", "", "", "if", "module", ".", "__class__", ".", "__name__", ".", "startswith", "(", "'InstanceNorm'", ")", "and", "(", "key", "==", "'num_batches_tracked'", ")", ":", "\n", "                ", "state_dict", ".", "pop", "(", "'.'", ".", "join", "(", "keys", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "__patch_instance_norm_state_dict", "(", "state_dict", ",", "getattr", "(", "module", ",", "key", ")", ",", "keys", ",", "i", "+", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.models.base_model.BaseModel.load_networks": [[118, 137], ["isinstance", "os.path.join", "getattr", "isinstance", "print", "torch.load", "hasattr", "list", "getattr.load_state_dict", "torch.load.keys", "base_model.BaseModel.__patch_instance_norm_state_dict", "str", "key.split"], "methods", ["home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.models.base_model.BaseModel.__patch_instance_norm_state_dict"], ["", "", "def", "load_networks", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "for", "name", "in", "self", ".", "model_names", ":", "\n", "            ", "if", "isinstance", "(", "name", ",", "str", ")", ":", "\n", "                ", "load_filename", "=", "'%s_net_%s.pth'", "%", "(", "epoch", ",", "name", ")", "\n", "load_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "save_dir", ",", "load_filename", ")", "\n", "net", "=", "getattr", "(", "self", ",", "'net'", "+", "name", ")", "\n", "if", "isinstance", "(", "net", ",", "torch", ".", "nn", ".", "DataParallel", ")", ":", "\n", "                    ", "net", "=", "net", ".", "module", "\n", "", "print", "(", "'loading the model from %s'", "%", "load_path", ")", "\n", "# if you are using PyTorch newer than 0.4 (e.g., built from", "\n", "# GitHub source), you can remove str() on self.device", "\n", "state_dict", "=", "torch", ".", "load", "(", "load_path", ",", "map_location", "=", "str", "(", "self", ".", "device", ")", ")", "\n", "if", "hasattr", "(", "state_dict", ",", "'_metadata'", ")", ":", "\n", "                    ", "del", "state_dict", ".", "_metadata", "\n", "\n", "# patch InstanceNorm checkpoints prior to 0.4", "\n", "", "for", "key", "in", "list", "(", "state_dict", ".", "keys", "(", ")", ")", ":", "# need to copy keys here because we mutate in loop", "\n", "                    ", "self", ".", "__patch_instance_norm_state_dict", "(", "state_dict", ",", "net", ",", "key", ".", "split", "(", "'.'", ")", ")", "\n", "", "net", ".", "load_state_dict", "(", "state_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.models.base_model.BaseModel.print_networks": [[139, 151], ["print", "print", "isinstance", "getattr", "getattr.parameters", "print", "param.numel", "print"], "methods", ["None"], ["", "", "", "def", "print_networks", "(", "self", ",", "verbose", ")", ":", "\n", "        ", "print", "(", "'---------- Networks initialized -------------'", ")", "\n", "for", "name", "in", "self", ".", "model_names", ":", "\n", "            ", "if", "isinstance", "(", "name", ",", "str", ")", ":", "\n", "                ", "net", "=", "getattr", "(", "self", ",", "'net'", "+", "name", ")", "\n", "num_params", "=", "0", "\n", "for", "param", "in", "net", ".", "parameters", "(", ")", ":", "\n", "                    ", "num_params", "+=", "param", ".", "numel", "(", ")", "\n", "", "if", "verbose", ":", "\n", "                    ", "print", "(", "net", ")", "\n", "", "print", "(", "'[Network %s] Total number of parameters : %.3f M'", "%", "(", "name", ",", "num_params", "/", "1e6", ")", ")", "\n", "", "", "print", "(", "'-----------------------------------------------'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.models.base_model.BaseModel.set_requires_grad": [[153, 160], ["isinstance", "net.parameters"], "methods", ["None"], ["", "def", "set_requires_grad", "(", "self", ",", "nets", ",", "requires_grad", "=", "False", ")", ":", "\n", "        ", "if", "not", "isinstance", "(", "nets", ",", "list", ")", ":", "\n", "            ", "nets", "=", "[", "nets", "]", "\n", "", "for", "net", "in", "nets", ":", "\n", "            ", "if", "net", "is", "not", "None", ":", "\n", "                ", "for", "param", "in", "net", ".", "parameters", "(", ")", ":", "\n", "                    ", "param", ".", "requires_grad", "=", "requires_grad", "\n", "", "", "", "", "", ""]], "home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.data.aligned_dataset.AlignedDataset.modify_commandline_options": [[12, 15], ["None"], "methods", ["None"], ["random", ".", "seed", "(", "0", ")", "\n", "\n", "class", "AlignedDataset", "(", "BaseDataset", ")", ":", "\n", "    ", "@", "staticmethod", "\n"]], "home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.data.aligned_dataset.AlignedDataset.initialize": [[16, 22], ["os.path.join", "sorted", "data.image_folder.make_dataset"], "methods", ["home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.data.image_folder.make_dataset"], ["def", "modify_commandline_options", "(", "parser", ",", "is_train", ")", ":", "\n", "        ", "return", "parser", "\n", "\n", "", "def", "initialize", "(", "self", ",", "opt", ")", ":", "\n", "        ", "self", ".", "opt", "=", "opt", "\n", "self", ".", "root", "=", "opt", ".", "dataroot", "\n", "self", ".", "dir_AB", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "dataroot", ",", "opt", ".", "phase", ")", "\n"]], "home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.data.aligned_dataset.AlignedDataset.__getitem__": [[23, 151], ["PIL.Image.open().convert", "int", "PIL.Image.open().convert.crop().resize", "PIL.Image.open().convert.crop().resize", "random.randint", "random.randint", "random.randint", "torchvision.ToTensor", "torchvision.ToTensor", "max", "max", "torchvision.Normalize", "torchvision.Normalize", "PIL.Image.open().convert", "PIL.Image.open().convert", "PIL.Image.open().convert", "PIL.Image.open().convert", "PIL.Image.open().convert", "PIL.Image.open().convert.crop().resize", "PIL.Image.open().convert.crop().resize", "PIL.Image.open().convert.crop().resize", "PIL.Image.open().convert.crop().resize", "PIL.Image.open().convert.crop().resize", "PIL.Image.open().convert.crop().resize", "torch.cat", "PIL.Image.open().convert", "PIL.Image.open().convert", "PIL.Image.open().convert", "PIL.Image.open().convert", "PIL.Image.open().convert.crop().resize", "PIL.Image.open().convert.crop().resize", "PIL.Image.open().convert.crop().resize", "PIL.Image.open().convert.crop().resize", "torch.cat", "tmp.unsqueeze", "tmp.unsqueeze", "PIL.Image.open", "PIL.Image.open().convert.crop", "PIL.Image.open().convert.crop", "torchvision.ToTensor", "torchvision.ToTensor", "torchvision.ToTensor", "torchvision.ToTensor", "torchvision.ToTensor", "torchvision.ToTensor", "torchvision.Normalize", "torchvision.Normalize", "torchvision.Normalize", "torchvision.Normalize", "torchvision.Normalize", "torchvision.Normalize", "torchvision.ToTensor", "torchvision.ToTensor", "torchvision.ToTensor", "torchvision.ToTensor", "torchvision.Normalize", "torchvision.Normalize", "torchvision.Normalize", "torchvision.Normalize", "PIL.Image.open", "PIL.Image.open", "PIL.Image.open", "PIL.Image.open", "PIL.Image.open", "PIL.Image.open().convert.crop", "PIL.Image.open().convert.crop", "PIL.Image.open().convert.crop", "PIL.Image.open().convert.crop", "PIL.Image.open().convert.crop", "PIL.Image.open().convert.crop", "PIL.Image.open", "PIL.Image.open", "PIL.Image.open", "PIL.Image.open", "PIL.Image.open().convert.crop", "PIL.Image.open().convert.crop", "PIL.Image.open().convert.crop", "PIL.Image.open().convert.crop", "len", "len", "len", "len", "len", "len", "len", "len", "len"], "methods", ["None"], ["self", ".", "AB_paths", "=", "natsorted", "(", "make_dataset", "(", "self", ".", "dir_AB", ")", ")", "\n", "assert", "(", "opt", ".", "resize_or_crop", "==", "'resize_and_crop'", ")", "\n", "\n", "", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "rand", "=", "self", ".", "opt", ".", "serial_batches_count", "\n", "AB_path", "=", "self", ".", "AB_paths", "[", "index", "]", "\n", "AB", "=", "Image", ".", "open", "(", "AB_path", ")", ".", "convert", "(", "'RGB'", ")", "\n", "w", ",", "h", "=", "AB", ".", "size", "\n", "assert", "(", "self", ".", "opt", ".", "loadSize", ">=", "self", ".", "opt", ".", "fineSize", ")", "\n", "w2", "=", "int", "(", "w", "/", "2", ")", "\n", "A", "=", "AB", ".", "crop", "(", "(", "0", ",", "0", ",", "w2", ",", "h", ")", ")", ".", "resize", "(", "(", "self", ".", "opt", ".", "loadSize", ",", "self", ".", "opt", ".", "loadSize", ")", ",", "Image", ".", "BICUBIC", ")", "\n", "\n", "B", "=", "AB", ".", "crop", "(", "(", "w2", ",", "0", ",", "w", ",", "h", ")", ")", ".", "resize", "(", "(", "self", ".", "opt", ".", "loadSize", ",", "self", ".", "opt", ".", "loadSize", ")", ",", "Image", ".", "BICUBIC", ")", "\n", "\n", "A", "=", "transforms", ".", "ToTensor", "(", ")", "(", "A", ")", "\n", "\n", "B", "=", "transforms", ".", "ToTensor", "(", ")", "(", "B", ")", "\n", "\n", "w_offset", "=", "random", ".", "randint", "(", "0", ",", "max", "(", "0", ",", "self", ".", "opt", ".", "loadSize", "-", "self", ".", "opt", ".", "fineSize", "-", "1", ")", ")", "\n", "h_offset", "=", "random", ".", "randint", "(", "0", ",", "max", "(", "0", ",", "self", ".", "opt", ".", "loadSize", "-", "self", ".", "opt", ".", "fineSize", "-", "1", ")", ")", "\n", "A", "=", "A", "[", ":", ",", "h_offset", ":", "h_offset", "+", "self", ".", "opt", ".", "fineSize", ",", "w_offset", ":", "w_offset", "+", "self", ".", "opt", ".", "fineSize", "]", "\n", "B", "=", "B", "[", ":", ",", "h_offset", ":", "h_offset", "+", "self", ".", "opt", ".", "fineSize", ",", "w_offset", ":", "w_offset", "+", "self", ".", "opt", ".", "fineSize", "]", "\n", "\n", "A", "=", "transforms", ".", "Normalize", "(", "(", "0.5", ",", "0.5", ",", "0.5", ")", ",", "(", "0.5", ",", "0.5", ",", "0.5", ")", ")", "(", "A", ")", "\n", "B", "=", "transforms", ".", "Normalize", "(", "(", "0.5", ",", "0.5", ",", "0.5", ")", ",", "(", "0.5", ",", "0.5", ",", "0.5", ")", ")", "(", "B", ")", "\n", "if", "(", "index", "+", "1", ")", "%", "30", ">", "24", ":", "\n", "            ", "AB_path_n", "=", "self", ".", "AB_paths", "[", "index", "%", "len", "(", "self", ".", "AB_paths", ")", "]", "\n", "", "else", ":", "\n", "            ", "AB_path_n", "=", "self", ".", "AB_paths", "[", "(", "index", "+", "rand", ")", "%", "len", "(", "self", ".", "AB_paths", ")", "]", "\n", "", "AB_n", "=", "Image", ".", "open", "(", "AB_path_n", ")", ".", "convert", "(", "'RGB'", ")", "\n", "A_n", "=", "AB_n", ".", "crop", "(", "(", "0", ",", "0", ",", "w2", ",", "h", ")", ")", ".", "resize", "(", "(", "self", ".", "opt", ".", "loadSize", ",", "self", ".", "opt", ".", "loadSize", ")", ",", "Image", ".", "BICUBIC", ")", "\n", "B_n", "=", "AB_n", ".", "crop", "(", "(", "w2", ",", "0", ",", "w", ",", "h", ")", ")", ".", "resize", "(", "(", "self", ".", "opt", ".", "loadSize", ",", "self", ".", "opt", ".", "loadSize", ")", ",", "Image", ".", "BICUBIC", ")", "\n", "A_n", "=", "transforms", ".", "ToTensor", "(", ")", "(", "A_n", ")", "\n", "B_n", "=", "transforms", ".", "ToTensor", "(", ")", "(", "B_n", ")", "\n", "A_n", "=", "A_n", "[", ":", ",", "h_offset", ":", "h_offset", "+", "self", ".", "opt", ".", "fineSize", ",", "w_offset", ":", "w_offset", "+", "self", ".", "opt", ".", "fineSize", "]", "\n", "B_n", "=", "B_n", "[", ":", ",", "h_offset", ":", "h_offset", "+", "self", ".", "opt", ".", "fineSize", ",", "w_offset", ":", "w_offset", "+", "self", ".", "opt", ".", "fineSize", "]", "\n", "A_n", "=", "transforms", ".", "Normalize", "(", "(", "0.5", ",", "0.5", ",", "0.5", ")", ",", "(", "0.5", ",", "0.5", ",", "0.5", ")", ")", "(", "A_n", ")", "\n", "B_n", "=", "transforms", ".", "Normalize", "(", "(", "0.5", ",", "0.5", ",", "0.5", ")", ",", "(", "0.5", ",", "0.5", ",", "0.5", ")", ")", "(", "B_n", ")", "\n", "\n", "A", "=", "torch", ".", "cat", "(", "(", "A", ",", "B", ",", "A_n", ")", ",", "dim", "=", "0", ")", "\n", "#A = B", "\n", "B", "=", "B_n", "\n", "\n", "if", "self", ".", "opt", ".", "direction", "==", "'BtoA'", ":", "\n", "            ", "input_nc", "=", "self", ".", "opt", ".", "output_nc", "\n", "output_nc", "=", "self", ".", "opt", ".", "input_nc", "\n", "", "else", ":", "\n", "            ", "input_nc", "=", "self", ".", "opt", ".", "input_nc", "\n", "output_nc", "=", "self", ".", "opt", ".", "output_nc", "\n", "\n", "", "if", "input_nc", "==", "1", ":", "# RGB to gray", "\n", "            ", "tmp", "=", "A", "[", "0", ",", "...", "]", "*", "0.299", "+", "A", "[", "1", ",", "...", "]", "*", "0.587", "+", "A", "[", "2", ",", "...", "]", "*", "0.114", "\n", "A", "=", "tmp", ".", "unsqueeze", "(", "0", ")", "\n", "\n", "", "if", "output_nc", "==", "1", ":", "# RGB to gray", "\n", "            ", "tmp", "=", "B", "[", "0", ",", "...", "]", "*", "0.299", "+", "B", "[", "1", ",", "...", "]", "*", "0.587", "+", "B", "[", "2", ",", "...", "]", "*", "0.114", "\n", "B", "=", "tmp", ".", "unsqueeze", "(", "0", ")", "\n", "\n", "", "return", "{", "'A'", ":", "A", ",", "'B'", ":", "B", ",", "\n", "'A_paths'", ":", "AB_path", ",", "'B_paths'", ":", "AB_path", "}", "\n", "\n", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "AB_paths", ")", "\n", "\n", "", "def", "name", "(", "self", ")", ":", "\n", "        ", "return", "'AlignedDataset'", "", "", "", ""]], "home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.data.aligned_dataset.AlignedDataset.__len__": [[152, 154], ["len"], "methods", ["None"], []], "home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.data.aligned_dataset.AlignedDataset.name": [[155, 157], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.data.base_dataset.BaseDataset.__init__": [[7, 9], ["torch.Dataset.__init__"], "methods", ["home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "BaseDataset", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.data.base_dataset.BaseDataset.name": [[10, 12], ["None"], "methods", ["None"], ["", "def", "name", "(", "self", ")", ":", "\n", "        ", "return", "'BaseDataset'", "\n", "\n"]], "home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.data.base_dataset.BaseDataset.modify_commandline_options": [[13, 16], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "modify_commandline_options", "(", "parser", ",", "is_train", ")", ":", "\n", "        ", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.data.base_dataset.BaseDataset.initialize": [[17, 19], ["None"], "methods", ["None"], ["", "def", "initialize", "(", "self", ",", "opt", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.data.base_dataset.BaseDataset.__len__": [[20, 22], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.data.base_dataset.get_transform": [[24, 52], ["torchvision.Compose", "transform_list.append", "transform_list.append", "transform_list.append", "torchvision.ToTensor", "torchvision.Normalize", "torchvision.Resize", "torchvision.RandomCrop", "transform_list.append", "torchvision.RandomHorizontalFlip", "torchvision.RandomCrop", "transform_list.append", "torchvision.Lambda", "transform_list.append", "transform_list.append", "torchvision.Lambda", "torchvision.RandomCrop", "transform_list.append", "ValueError", "base_dataset.__scale_width", "torchvision.Lambda", "base_dataset.__scale_width", "base_dataset.__adjust"], "function", ["home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.data.base_dataset.__scale_width", "home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.data.base_dataset.__scale_width", "home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.data.base_dataset.__adjust"], ["", "", "def", "get_transform", "(", "opt", ")", ":", "\n", "    ", "transform_list", "=", "[", "]", "\n", "if", "opt", ".", "resize_or_crop", "==", "'resize_and_crop'", ":", "\n", "        ", "osize", "=", "[", "opt", ".", "loadSize", ",", "opt", ".", "loadSize", "]", "\n", "transform_list", ".", "append", "(", "transforms", ".", "Resize", "(", "osize", ",", "Image", ".", "BICUBIC", ")", ")", "\n", "transform_list", ".", "append", "(", "transforms", ".", "RandomCrop", "(", "opt", ".", "fineSize", ")", ")", "\n", "", "elif", "opt", ".", "resize_or_crop", "==", "'crop'", ":", "\n", "        ", "transform_list", ".", "append", "(", "transforms", ".", "RandomCrop", "(", "opt", ".", "fineSize", ")", ")", "\n", "", "elif", "opt", ".", "resize_or_crop", "==", "'scale_width'", ":", "\n", "        ", "transform_list", ".", "append", "(", "transforms", ".", "Lambda", "(", "\n", "lambda", "img", ":", "__scale_width", "(", "img", ",", "opt", ".", "fineSize", ")", ")", ")", "\n", "", "elif", "opt", ".", "resize_or_crop", "==", "'scale_width_and_crop'", ":", "\n", "        ", "transform_list", ".", "append", "(", "transforms", ".", "Lambda", "(", "\n", "lambda", "img", ":", "__scale_width", "(", "img", ",", "opt", ".", "loadSize", ")", ")", ")", "\n", "transform_list", ".", "append", "(", "transforms", ".", "RandomCrop", "(", "opt", ".", "fineSize", ")", ")", "\n", "", "elif", "opt", ".", "resize_or_crop", "==", "'none'", ":", "\n", "        ", "transform_list", ".", "append", "(", "transforms", ".", "Lambda", "(", "\n", "lambda", "img", ":", "__adjust", "(", "img", ")", ")", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'--resize_or_crop %s is not a valid option.'", "%", "opt", ".", "resize_or_crop", ")", "\n", "\n", "", "if", "opt", ".", "isTrain", "and", "not", "opt", ".", "no_flip", ":", "\n", "        ", "transform_list", ".", "append", "(", "transforms", ".", "RandomHorizontalFlip", "(", ")", ")", "\n", "\n", "", "transform_list", "+=", "[", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "(", "0.5", ",", "0.5", ",", "0.5", ")", ",", "\n", "(", "0.5", ",", "0.5", ",", "0.5", ")", ")", "]", "\n", "return", "transforms", ".", "Compose", "(", "transform_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.data.base_dataset.__adjust": [[55, 73], ["img.resize", "base_dataset.__print_size_warning"], "function", ["home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.data.base_dataset.__print_size_warning"], ["", "def", "__adjust", "(", "img", ")", ":", "\n", "    ", "ow", ",", "oh", "=", "img", ".", "size", "\n", "\n", "# the size needs to be a multiple of this number,", "\n", "# because going through generator network may change img size", "\n", "# and eventually cause size mismatch error", "\n", "mult", "=", "4", "\n", "if", "ow", "%", "mult", "==", "0", "and", "oh", "%", "mult", "==", "0", ":", "\n", "        ", "return", "img", "\n", "", "w", "=", "(", "ow", "-", "1", ")", "//", "mult", "\n", "w", "=", "(", "w", "+", "1", ")", "*", "mult", "\n", "h", "=", "(", "oh", "-", "1", ")", "//", "mult", "\n", "h", "=", "(", "h", "+", "1", ")", "*", "mult", "\n", "\n", "if", "ow", "!=", "w", "or", "oh", "!=", "h", ":", "\n", "        ", "__print_size_warning", "(", "ow", ",", "oh", ",", "w", ",", "h", ")", "\n", "\n", "", "return", "img", ".", "resize", "(", "(", "w", ",", "h", ")", ",", "Image", ".", "BICUBIC", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.data.base_dataset.__scale_width": [[75, 94], ["int", "img.resize", "base_dataset.__print_size_warning"], "function", ["home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.data.base_dataset.__print_size_warning"], ["", "def", "__scale_width", "(", "img", ",", "target_width", ")", ":", "\n", "    ", "ow", ",", "oh", "=", "img", ".", "size", "\n", "\n", "# the size needs to be a multiple of this number,", "\n", "# because going through generator network may change img size", "\n", "# and eventually cause size mismatch error", "\n", "mult", "=", "4", "\n", "assert", "target_width", "%", "mult", "==", "0", ",", "\"the target width needs to be multiple of %d.\"", "%", "mult", "\n", "if", "(", "ow", "==", "target_width", "and", "oh", "%", "mult", "==", "0", ")", ":", "\n", "        ", "return", "img", "\n", "", "w", "=", "target_width", "\n", "target_height", "=", "int", "(", "target_width", "*", "oh", "/", "ow", ")", "\n", "m", "=", "(", "target_height", "-", "1", ")", "//", "mult", "\n", "h", "=", "(", "m", "+", "1", ")", "*", "mult", "\n", "\n", "if", "target_height", "!=", "h", ":", "\n", "        ", "__print_size_warning", "(", "target_width", ",", "target_height", ",", "w", ",", "h", ")", "\n", "\n", "", "return", "img", ".", "resize", "(", "(", "w", ",", "h", ")", ",", "Image", ".", "BICUBIC", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.data.base_dataset.__print_size_warning": [[96, 103], ["hasattr", "print"], "function", ["None"], ["", "def", "__print_size_warning", "(", "ow", ",", "oh", ",", "w", ",", "h", ")", ":", "\n", "    ", "if", "not", "hasattr", "(", "__print_size_warning", ",", "'has_printed'", ")", ":", "\n", "        ", "print", "(", "\"The image size needs to be a multiple of 4. \"", "\n", "\"The loaded image size was (%d, %d), so it was adjusted to \"", "\n", "\"(%d, %d). This adjustment will be done to all images \"", "\n", "\"whose sizes are not multiples of 4\"", "%", "(", "ow", ",", "oh", ",", "w", ",", "h", ")", ")", "\n", "__print_size_warning", ".", "has_printed", "=", "True", "\n", "", "", ""]], "home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.data.single_dataset.SingleDataset.modify_commandline_options": [[8, 11], ["None"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "modify_commandline_options", "(", "parser", ",", "is_train", ")", ":", "\n", "        ", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.data.single_dataset.SingleDataset.initialize": [[12, 22], ["os.path.join", "data.image_folder.make_dataset", "sorted", "data.base_dataset.get_transform"], "methods", ["home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.data.image_folder.make_dataset", "home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.data.base_dataset.get_transform"], ["", "def", "initialize", "(", "self", ",", "opt", ")", ":", "\n", "        ", "self", ".", "opt", "=", "opt", "\n", "self", ".", "root", "=", "opt", ".", "dataroot", "\n", "self", ".", "dir_A", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "dataroot", ")", "\n", "\n", "self", ".", "A_paths", "=", "make_dataset", "(", "self", ".", "dir_A", ")", "\n", "\n", "self", ".", "A_paths", "=", "sorted", "(", "self", ".", "A_paths", ")", "\n", "\n", "self", ".", "transform", "=", "get_transform", "(", "opt", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.data.single_dataset.SingleDataset.__getitem__": [[23, 37], ["PIL.Image.open().convert", "single_dataset.SingleDataset.transform", "tmp.unsqueeze", "PIL.Image.open"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "A_path", "=", "self", ".", "A_paths", "[", "index", "]", "\n", "A_img", "=", "Image", ".", "open", "(", "A_path", ")", ".", "convert", "(", "'RGB'", ")", "\n", "A", "=", "self", ".", "transform", "(", "A_img", ")", "\n", "if", "self", ".", "opt", ".", "direction", "==", "'BtoA'", ":", "\n", "            ", "input_nc", "=", "self", ".", "opt", ".", "output_nc", "\n", "", "else", ":", "\n", "            ", "input_nc", "=", "self", ".", "opt", ".", "input_nc", "\n", "\n", "", "if", "input_nc", "==", "1", ":", "# RGB to gray", "\n", "            ", "tmp", "=", "A", "[", "0", ",", "...", "]", "*", "0.299", "+", "A", "[", "1", ",", "...", "]", "*", "0.587", "+", "A", "[", "2", ",", "...", "]", "*", "0.114", "\n", "A", "=", "tmp", ".", "unsqueeze", "(", "0", ")", "\n", "\n", "", "return", "{", "'A'", ":", "A", ",", "'A_paths'", ":", "A_path", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.data.single_dataset.SingleDataset.__len__": [[38, 40], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "A_paths", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.data.single_dataset.SingleDataset.name": [[41, 43], ["None"], "methods", ["None"], ["", "def", "name", "(", "self", ")", ":", "\n", "        ", "return", "'SingleImageDataset'", "\n", "", "", ""]], "home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.data.image_folder.ImageFolder.__init__": [[43, 56], ["image_folder.make_dataset", "len", "RuntimeError"], "methods", ["home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.data.image_folder.make_dataset"], ["    ", "def", "__init__", "(", "self", ",", "root", ",", "transform", "=", "None", ",", "return_paths", "=", "False", ",", "\n", "loader", "=", "default_loader", ")", ":", "\n", "        ", "imgs", "=", "make_dataset", "(", "root", ")", "\n", "if", "len", "(", "imgs", ")", "==", "0", ":", "\n", "            ", "raise", "(", "RuntimeError", "(", "\"Found 0 images in: \"", "+", "root", "+", "\"\\n\"", "\n", "\"Supported image extensions are: \"", "+", "\n", "\",\"", ".", "join", "(", "IMG_EXTENSIONS", ")", ")", ")", "\n", "\n", "", "self", ".", "root", "=", "root", "\n", "self", ".", "imgs", "=", "imgs", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "return_paths", "=", "return_paths", "\n", "self", ".", "loader", "=", "loader", "\n", "\n"]], "home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.data.image_folder.ImageFolder.__getitem__": [[57, 66], ["image_folder.ImageFolder.loader", "image_folder.ImageFolder.transform"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "path", "=", "self", ".", "imgs", "[", "index", "]", "\n", "img", "=", "self", ".", "loader", "(", "path", ")", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "", "if", "self", ".", "return_paths", ":", "\n", "            ", "return", "img", ",", "path", "\n", "", "else", ":", "\n", "            ", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.data.image_folder.ImageFolder.__len__": [[67, 69], ["len"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "imgs", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.data.image_folder.is_image_file": [[21, 23], ["any", "filename.endswith"], "function", ["None"], ["def", "is_image_file", "(", "filename", ")", ":", "\n", "    ", "return", "any", "(", "filename", ".", "endswith", "(", "extension", ")", "for", "extension", "in", "IMG_EXTENSIONS", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.data.image_folder.make_dataset": [[25, 35], ["os.path.isdir", "os.path.isdir", "sorted", "os.walk", "os.walk", "image_folder.is_image_file", "os.path.join", "os.path.join", "images.append"], "function", ["home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.data.image_folder.is_image_file"], ["", "def", "make_dataset", "(", "dir", ")", ":", "\n", "    ", "images", "=", "[", "]", "\n", "assert", "os", ".", "path", ".", "isdir", "(", "dir", ")", ",", "'%s is not a valid directory'", "%", "dir", "\n", "\n", "for", "root", ",", "_", ",", "fnames", "in", "sorted", "(", "os", ".", "walk", "(", "dir", ")", ")", ":", "\n", "        ", "for", "fname", "in", "fnames", ":", "\n", "            ", "if", "is_image_file", "(", "fname", ")", ":", "\n", "                ", "path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "fname", ")", "\n", "images", ".", "append", "(", "path", ")", "\n", "", "", "", "return", "images", "\n", "\n"]], "home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.data.image_folder.default_loader": [[37, 39], ["PIL.Image.open().convert", "PIL.Image.open"], "function", ["None"], ["", "def", "default_loader", "(", "path", ")", ":", "\n", "    ", "return", "Image", ".", "open", "(", "path", ")", ".", "convert", "(", "'RGB'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.data.__init__.CustomDatasetDataLoader.name": [[53, 55], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.data.__init__.CustomDatasetDataLoader.initialize": [[56, 64], ["data.base_data_loader.BaseDataLoader.initialize", "__init__.create_dataset", "torch.utils.data.DataLoader", "int"], "methods", ["home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.options.base_options.BaseOptions.initialize", "home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.data.__init__.create_dataset"], []], "home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.data.__init__.CustomDatasetDataLoader.load_data": [[65, 67], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.data.__init__.CustomDatasetDataLoader.__len__": [[68, 70], ["min", "len"], "methods", ["None"], []], "home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.data.__init__.CustomDatasetDataLoader.__iter__": [[71, 76], ["enumerate"], "methods", ["None"], []], "home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.data.__init__.find_dataset_using_name": [[7, 29], ["importlib.import_module", "importlib.import_module.__dict__.items", "dataset_name.replace", "print", "exit", "issubclass", "name.lower", "target_dataset_name.lower"], "function", ["None"], []], "home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.data.__init__.get_option_setter": [[31, 34], ["__init__.find_dataset_using_name"], "function", ["home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.data.__init__.find_dataset_using_name"], []], "home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.data.__init__.create_dataset": [[36, 42], ["__init__.find_dataset_using_name", "find_dataset_using_name.", "dataset.initialize", "print", "dataset.name"], "function", ["home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.data.__init__.find_dataset_using_name", "home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.options.base_options.BaseOptions.initialize", "home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.data.unaligned_dataset.UnalignedDataset.name"], []], "home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.data.__init__.CreateDataLoader": [[44, 48], ["__init__.CustomDatasetDataLoader", "__init__.CustomDatasetDataLoader.initialize"], "function", ["home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.options.base_options.BaseOptions.initialize"], []], "home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.data.base_data_loader.BaseDataLoader.__init__": [[2, 4], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.data.base_data_loader.BaseDataLoader.initialize": [[5, 8], ["None"], "methods", ["None"], ["", "def", "initialize", "(", "self", ",", "opt", ")", ":", "\n", "        ", "self", ".", "opt", "=", "opt", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.data.base_data_loader.BaseDataLoader.load_data": [[9, 11], ["None"], "methods", ["None"], ["", "def", "load_data", "(", ")", ":", "\n", "        ", "return", "None", "\n", "", "", ""]], "home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.data.unaligned_dataset.UnalignedDataset.modify_commandline_options": [[10, 13], ["None"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "modify_commandline_options", "(", "parser", ",", "is_train", ")", ":", "\n", "        ", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.data.unaligned_dataset.UnalignedDataset.initialize": [[14, 28], ["os.path.join", "os.path.join", "data.image_folder.make_dataset", "data.image_folder.make_dataset", "sorted", "sorted", "len", "len", "data.base_dataset.get_transform"], "methods", ["home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.data.image_folder.make_dataset", "home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.data.image_folder.make_dataset", "home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.data.base_dataset.get_transform"], ["", "def", "initialize", "(", "self", ",", "opt", ")", ":", "\n", "        ", "self", ".", "opt", "=", "opt", "\n", "self", ".", "root", "=", "opt", ".", "dataroot", "\n", "self", ".", "dir_A", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "dataroot", ",", "opt", ".", "phase", "+", "'A'", ")", "\n", "self", ".", "dir_B", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "dataroot", ",", "opt", ".", "phase", "+", "'B'", ")", "\n", "\n", "self", ".", "A_paths", "=", "make_dataset", "(", "self", ".", "dir_A", ")", "\n", "self", ".", "B_paths", "=", "make_dataset", "(", "self", ".", "dir_B", ")", "\n", "\n", "self", ".", "A_paths", "=", "sorted", "(", "self", ".", "A_paths", ")", "\n", "self", ".", "B_paths", "=", "sorted", "(", "self", ".", "B_paths", ")", "\n", "self", ".", "A_size", "=", "len", "(", "self", ".", "A_paths", ")", "\n", "self", ".", "B_size", "=", "len", "(", "self", ".", "B_paths", ")", "\n", "self", ".", "transform", "=", "get_transform", "(", "opt", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.data.unaligned_dataset.UnalignedDataset.__getitem__": [[29, 58], ["PIL.Image.open().convert", "PIL.Image.open().convert", "unaligned_dataset.UnalignedDataset.transform", "unaligned_dataset.UnalignedDataset.transform", "random.randint", "tmp.unsqueeze", "tmp.unsqueeze", "PIL.Image.open", "PIL.Image.open", "random.randint"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "A_path", "=", "self", ".", "A_paths", "[", "index", "%", "self", ".", "A_size", "]", "\n", "if", "self", ".", "opt", ".", "serial_batches", ":", "\n", "            ", "rand", "=", "self", ".", "opt", ".", "serial_batches_count", "\n", "index_B", "=", "(", "index", "+", "random", ".", "randint", "(", "-", "rand", ",", "rand", ")", ")", "%", "self", ".", "B_size", "\n", "", "else", ":", "\n", "            ", "index_B", "=", "random", ".", "randint", "(", "0", ",", "self", ".", "B_size", "-", "1", ")", "\n", "", "B_path", "=", "self", ".", "B_paths", "[", "index_B", "]", "\n", "A_img", "=", "Image", ".", "open", "(", "A_path", ")", ".", "convert", "(", "'RGB'", ")", "\n", "B_img", "=", "Image", ".", "open", "(", "B_path", ")", ".", "convert", "(", "'RGB'", ")", "\n", "A", "=", "self", ".", "transform", "(", "A_img", ")", "\n", "B", "=", "self", ".", "transform", "(", "B_img", ")", "\n", "\n", "if", "self", ".", "opt", ".", "direction", "==", "'BtoA'", ":", "\n", "            ", "input_nc", "=", "self", ".", "opt", ".", "output_nc", "\n", "output_nc", "=", "self", ".", "opt", ".", "input_nc", "\n", "", "else", ":", "\n", "            ", "input_nc", "=", "self", ".", "opt", ".", "input_nc", "\n", "output_nc", "=", "self", ".", "opt", ".", "output_nc", "\n", "\n", "", "if", "input_nc", "==", "1", ":", "# RGB to gray", "\n", "            ", "tmp", "=", "A", "[", "0", ",", "...", "]", "*", "0.299", "+", "A", "[", "1", ",", "...", "]", "*", "0.587", "+", "A", "[", "2", ",", "...", "]", "*", "0.114", "\n", "A", "=", "tmp", ".", "unsqueeze", "(", "0", ")", "\n", "\n", "", "if", "output_nc", "==", "1", ":", "# RGB to gray", "\n", "            ", "tmp", "=", "B", "[", "0", ",", "...", "]", "*", "0.299", "+", "B", "[", "1", ",", "...", "]", "*", "0.587", "+", "B", "[", "2", ",", "...", "]", "*", "0.114", "\n", "B", "=", "tmp", ".", "unsqueeze", "(", "0", ")", "\n", "", "return", "{", "'A'", ":", "A", ",", "'B'", ":", "B", ",", "\n", "'A_paths'", ":", "A_path", ",", "'B_paths'", ":", "B_path", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.data.unaligned_dataset.UnalignedDataset.__len__": [[59, 61], ["max"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "max", "(", "self", ".", "A_size", ",", "self", ".", "B_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.data.unaligned_dataset.UnalignedDataset.name": [[62, 64], ["None"], "methods", ["None"], ["", "def", "name", "(", "self", ")", ":", "\n", "        ", "return", "'UnalignedDataset'", "\n", "", "", ""]], "home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.options.test_options.TestOptions.initialize": [[5, 21], ["base_options.BaseOptions.initialize", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.set_defaults", "base_options.BaseOptions.initialize.set_defaults", "float", "base_options.BaseOptions.initialize.get_default"], "methods", ["home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.options.base_options.BaseOptions.initialize"], ["    ", "def", "initialize", "(", "self", ",", "parser", ")", ":", "\n", "        ", "parser", "=", "BaseOptions", ".", "initialize", "(", "self", ",", "parser", ")", "\n", "parser", ".", "add_argument", "(", "'--ntest'", ",", "type", "=", "int", ",", "default", "=", "float", "(", "\"inf\"", ")", ",", "help", "=", "'# of test examples.'", ")", "\n", "parser", ".", "add_argument", "(", "'--results_dir'", ",", "type", "=", "str", ",", "default", "=", "'./results/'", ",", "help", "=", "'saves results here.'", ")", "\n", "parser", ".", "add_argument", "(", "'--aspect_ratio'", ",", "type", "=", "float", ",", "default", "=", "1.0", ",", "help", "=", "'aspect ratio of result images'", ")", "\n", "parser", ".", "add_argument", "(", "'--phase'", ",", "type", "=", "str", ",", "default", "=", "'test'", ",", "help", "=", "'train, val, test, etc'", ")", "\n", "#  Dropout and Batchnorm has different behavioir during training and test.", "\n", "parser", ".", "add_argument", "(", "'--eval'", ",", "action", "=", "'store_true'", ",", "help", "=", "'use eval mode during test time.'", ")", "\n", "parser", ".", "add_argument", "(", "'--num_test'", ",", "type", "=", "int", ",", "default", "=", "150", ",", "help", "=", "'how many test images to run'", ")", "\n", "# parser.add_argument('--iii', type=int, required=True, help='how many test images to run')", "\n", "\n", "parser", ".", "set_defaults", "(", "model", "=", "'test'", ")", "\n", "# To avoid cropping, the loadSize should be the same as fineSize", "\n", "parser", ".", "set_defaults", "(", "loadSize", "=", "parser", ".", "get_default", "(", "'fineSize'", ")", ")", "\n", "self", ".", "isTrain", "=", "False", "\n", "return", "parser", "\n", "", "", ""]], "home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.options.train_options.TrainOptions.initialize": [[5, 33], ["base_options.BaseOptions.initialize", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument"], "methods", ["home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.options.base_options.BaseOptions.initialize"], ["    ", "def", "initialize", "(", "self", ",", "parser", ")", ":", "\n", "        ", "parser", "=", "BaseOptions", ".", "initialize", "(", "self", ",", "parser", ")", "\n", "parser", ".", "add_argument", "(", "'--display_freq'", ",", "type", "=", "int", ",", "default", "=", "400", ",", "help", "=", "'frequency of showing training results on screen'", ")", "\n", "parser", ".", "add_argument", "(", "'--display_ncols'", ",", "type", "=", "int", ",", "default", "=", "4", ",", "help", "=", "'if positive, display all images in a single visdom web panel with certain number of images per row.'", ")", "\n", "parser", ".", "add_argument", "(", "'--display_id'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "'window id of the web display'", ")", "\n", "parser", ".", "add_argument", "(", "'--display_server'", ",", "type", "=", "str", ",", "default", "=", "\"http://localhost\"", ",", "help", "=", "'visdom server of the web display'", ")", "\n", "parser", ".", "add_argument", "(", "'--display_env'", ",", "type", "=", "str", ",", "default", "=", "'main'", ",", "help", "=", "'visdom display environment name (default is \"main\")'", ")", "\n", "parser", ".", "add_argument", "(", "'--display_port'", ",", "type", "=", "int", ",", "default", "=", "8097", ",", "help", "=", "'visdom port of the web display'", ")", "\n", "parser", ".", "add_argument", "(", "'--update_html_freq'", ",", "type", "=", "int", ",", "default", "=", "1000", ",", "help", "=", "'frequency of saving training results to html'", ")", "\n", "parser", ".", "add_argument", "(", "'--print_freq'", ",", "type", "=", "int", ",", "default", "=", "100", ",", "help", "=", "'frequency of showing training results on console'", ")", "\n", "parser", ".", "add_argument", "(", "'--save_latest_freq'", ",", "type", "=", "int", ",", "default", "=", "5000", ",", "help", "=", "'frequency of saving the latest results'", ")", "\n", "parser", ".", "add_argument", "(", "'--save_epoch_freq'", ",", "type", "=", "int", ",", "default", "=", "5", ",", "help", "=", "'frequency of saving checkpoints at the end of epochs'", ")", "\n", "parser", ".", "add_argument", "(", "'--save_by_iter'", ",", "action", "=", "'store_true'", ",", "help", "=", "'whether saves model by iteration'", ")", "\n", "parser", ".", "add_argument", "(", "'--continue_train'", ",", "action", "=", "'store_true'", ",", "help", "=", "'continue training: load the latest model'", ")", "\n", "parser", ".", "add_argument", "(", "'--epoch_count'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "'the starting epoch count, we save the model by <epoch_count>, <epoch_count>+<save_latest_freq>, ...'", ")", "\n", "parser", ".", "add_argument", "(", "'--phase'", ",", "type", "=", "str", ",", "default", "=", "'train'", ",", "help", "=", "'train, val, test, etc'", ")", "\n", "parser", ".", "add_argument", "(", "'--niter'", ",", "type", "=", "int", ",", "default", "=", "100", ",", "help", "=", "'# of iter at starting learning rate'", ")", "\n", "parser", ".", "add_argument", "(", "'--niter_decay'", ",", "type", "=", "int", ",", "default", "=", "100", ",", "help", "=", "'# of iter to linearly decay learning rate to zero'", ")", "\n", "parser", ".", "add_argument", "(", "'--beta1'", ",", "type", "=", "float", ",", "default", "=", "0.5", ",", "help", "=", "'momentum term of adam'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr'", ",", "type", "=", "float", ",", "default", "=", "0.0002", ",", "help", "=", "'initial learning rate for adam'", ")", "\n", "parser", ".", "add_argument", "(", "'--no_lsgan'", ",", "action", "=", "'store_true'", ",", "help", "=", "'do *not* use least square GAN, if false, use vanilla GAN'", ")", "\n", "parser", ".", "add_argument", "(", "'--pool_size'", ",", "type", "=", "int", ",", "default", "=", "50", ",", "help", "=", "'the size of image buffer that stores previously generated images'", ")", "\n", "parser", ".", "add_argument", "(", "'--no_html'", ",", "action", "=", "'store_true'", ",", "help", "=", "'do not save intermediate training results to [opt.checkpoints_dir]/[opt.name]/web/'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr_policy'", ",", "type", "=", "str", ",", "default", "=", "'lambda'", ",", "help", "=", "'learning rate policy: lambda|step|plateau|cosine'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr_decay_iters'", ",", "type", "=", "int", ",", "default", "=", "50", ",", "help", "=", "'multiply by a gamma every lr_decay_iters iterations'", ")", "\n", "\n", "self", ".", "isTrain", "=", "True", "\n", "return", "parser", "\n", "", "", ""]], "home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.options.base_options.BaseOptions.__init__": [[10, 12], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "initialized", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.options.base_options.BaseOptions.initialize": [[13, 48], ["parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "float"], "methods", ["None"], ["", "def", "initialize", "(", "self", ",", "parser", ")", ":", "\n", "        ", "parser", ".", "add_argument", "(", "'--dataroot'", ",", "required", "=", "True", ",", "help", "=", "'path to images (should have subfolders trainA, trainB, valA, valB, etc)'", ")", "\n", "parser", ".", "add_argument", "(", "'--batch_size'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "'input batch size'", ")", "\n", "parser", ".", "add_argument", "(", "'--loadSize'", ",", "type", "=", "int", ",", "default", "=", "286", ",", "help", "=", "'scale images to this size'", ")", "\n", "parser", ".", "add_argument", "(", "'--fineSize'", ",", "type", "=", "int", ",", "default", "=", "256", ",", "help", "=", "'then crop to this size'", ")", "\n", "parser", ".", "add_argument", "(", "'--display_winsize'", ",", "type", "=", "int", ",", "default", "=", "256", ",", "help", "=", "'display window size for both visdom and HTML'", ")", "\n", "parser", ".", "add_argument", "(", "'--input_nc'", ",", "type", "=", "int", ",", "default", "=", "3", ",", "help", "=", "'# of input image channels'", ")", "\n", "parser", ".", "add_argument", "(", "'--output_nc'", ",", "type", "=", "int", ",", "default", "=", "3", ",", "help", "=", "'# of output image channels'", ")", "\n", "parser", ".", "add_argument", "(", "'--ngf'", ",", "type", "=", "int", ",", "default", "=", "64", ",", "help", "=", "'# of gen filters in first conv layer'", ")", "\n", "parser", ".", "add_argument", "(", "'--ndf'", ",", "type", "=", "int", ",", "default", "=", "64", ",", "help", "=", "'# of discrim filters in first conv layer'", ")", "\n", "parser", ".", "add_argument", "(", "'--netD'", ",", "type", "=", "str", ",", "default", "=", "'basic'", ",", "help", "=", "'selects model to use for netD'", ")", "\n", "parser", ".", "add_argument", "(", "'--netG'", ",", "type", "=", "str", ",", "default", "=", "'resnet_9blocks'", ",", "help", "=", "'selects model to use for netG'", ")", "\n", "parser", ".", "add_argument", "(", "'--n_layers_D'", ",", "type", "=", "int", ",", "default", "=", "3", ",", "help", "=", "'only used if netD==n_layers'", ")", "\n", "parser", ".", "add_argument", "(", "'--gpu_ids'", ",", "type", "=", "str", ",", "default", "=", "'0'", ",", "help", "=", "'gpu ids: e.g. 0  0,1,2, 0,2. use -1 for CPU'", ")", "\n", "parser", ".", "add_argument", "(", "'--name'", ",", "type", "=", "str", ",", "default", "=", "'experiment_name'", ",", "help", "=", "'name of the experiment. It decides where to store samples and models'", ")", "\n", "parser", ".", "add_argument", "(", "'--dataset_mode'", ",", "type", "=", "str", ",", "default", "=", "'unaligned'", ",", "help", "=", "'chooses how datasets are loaded. [unaligned | aligned | single]'", ")", "\n", "parser", ".", "add_argument", "(", "'--model'", ",", "type", "=", "str", ",", "default", "=", "'cycle_gan'", ",", "help", "=", "'chooses which model to use. cycle_gan, pix2pix, test'", ")", "\n", "parser", ".", "add_argument", "(", "'--direction'", ",", "type", "=", "str", ",", "default", "=", "'AtoB'", ",", "help", "=", "'AtoB or BtoA'", ")", "\n", "parser", ".", "add_argument", "(", "'--epoch'", ",", "type", "=", "str", ",", "default", "=", "'latest'", ",", "help", "=", "'which epoch to load? set to latest to use latest cached model'", ")", "\n", "parser", ".", "add_argument", "(", "'--load_iter'", ",", "type", "=", "int", ",", "default", "=", "'0'", ",", "help", "=", "'which iteration to load? if load_iter > 0, the code will load models by iter_[load_iter]; otherwise, the code will load models by [epoch]'", ")", "\n", "parser", ".", "add_argument", "(", "'--num_threads'", ",", "default", "=", "4", ",", "type", "=", "int", ",", "help", "=", "'# threads for loading data'", ")", "\n", "parser", ".", "add_argument", "(", "'--checkpoints_dir'", ",", "type", "=", "str", ",", "default", "=", "'./checkpoints'", ",", "help", "=", "'models are saved here'", ")", "\n", "parser", ".", "add_argument", "(", "'--norm'", ",", "type", "=", "str", ",", "default", "=", "'instance'", ",", "help", "=", "'instance normalization or batch normalization'", ")", "\n", "parser", ".", "add_argument", "(", "'--serial_batches'", ",", "action", "=", "'store_true'", ",", "help", "=", "'if true, takes images in order to make batches, otherwise takes them randomly'", ")", "\n", "parser", ".", "add_argument", "(", "'--serial_batches_count'", ",", "default", "=", "0", ",", "type", "=", "int", ",", "help", "=", "'Neighbourhood for serial batching'", ")", "\n", "parser", ".", "add_argument", "(", "'--no_dropout'", ",", "action", "=", "'store_true'", ",", "help", "=", "'no dropout for the generator'", ")", "\n", "parser", ".", "add_argument", "(", "'--max_dataset_size'", ",", "type", "=", "int", ",", "default", "=", "float", "(", "\"inf\"", ")", ",", "help", "=", "'Maximum number of samples allowed per dataset. If the dataset directory contains more than max_dataset_size, only a subset is loaded.'", ")", "\n", "parser", ".", "add_argument", "(", "'--resize_or_crop'", ",", "type", "=", "str", ",", "default", "=", "'resize_and_crop'", ",", "help", "=", "'scaling and cropping of images at load time [resize_and_crop|crop|scale_width|scale_width_and_crop|none]'", ")", "\n", "parser", ".", "add_argument", "(", "'--no_flip'", ",", "action", "=", "'store_true'", ",", "help", "=", "'if specified, do not flip the images for data augmentation'", ")", "\n", "parser", ".", "add_argument", "(", "'--init_type'", ",", "type", "=", "str", ",", "default", "=", "'normal'", ",", "help", "=", "'network initialization [normal|xavier|kaiming|orthogonal]'", ")", "\n", "parser", ".", "add_argument", "(", "'--init_gain'", ",", "type", "=", "float", ",", "default", "=", "0.02", ",", "help", "=", "'scaling factor for normal, xavier and orthogonal.'", ")", "\n", "parser", ".", "add_argument", "(", "'--verbose'", ",", "action", "=", "'store_true'", ",", "help", "=", "'if specified, print more debugging information'", ")", "\n", "parser", ".", "add_argument", "(", "'--suffix'", ",", "default", "=", "''", ",", "type", "=", "str", ",", "help", "=", "'customized suffix: opt.name = opt.name + suffix: e.g., {model}_{netG}_size{loadSize}'", ")", "\n", "self", ".", "initialized", "=", "True", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.options.base_options.BaseOptions.gather_options": [[49, 73], ["base_options.BaseOptions.parse_known_args", "models.get_option_setter", "models.get_option_setter.", "base_options.BaseOptions.parse_known_args", "data.get_option_setter", "data.get_option_setter.", "base_options.BaseOptions.parse_args", "argparse.ArgumentParser", "base_options.BaseOptions.initialize"], "methods", ["home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.data.__init__.get_option_setter", "home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.data.__init__.get_option_setter", "home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.options.base_options.BaseOptions.initialize"], ["", "def", "gather_options", "(", "self", ")", ":", "\n", "# initialize parser with basic options", "\n", "        ", "if", "not", "self", ".", "initialized", ":", "\n", "            ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "\n", "formatter_class", "=", "argparse", ".", "ArgumentDefaultsHelpFormatter", ")", "\n", "parser", "=", "self", ".", "initialize", "(", "parser", ")", "\n", "\n", "# get the basic options", "\n", "", "opt", ",", "_", "=", "parser", ".", "parse_known_args", "(", ")", "\n", "\n", "# modify model-related parser options", "\n", "model_name", "=", "opt", ".", "model", "\n", "model_option_setter", "=", "models", ".", "get_option_setter", "(", "model_name", ")", "\n", "parser", "=", "model_option_setter", "(", "parser", ",", "self", ".", "isTrain", ")", "\n", "opt", ",", "_", "=", "parser", ".", "parse_known_args", "(", ")", "# parse again with the new defaults", "\n", "\n", "# modify dataset-related parser options", "\n", "dataset_name", "=", "opt", ".", "dataset_mode", "\n", "dataset_option_setter", "=", "data", ".", "get_option_setter", "(", "dataset_name", ")", "\n", "parser", "=", "dataset_option_setter", "(", "parser", ",", "self", ".", "isTrain", ")", "\n", "\n", "self", ".", "parser", "=", "parser", "\n", "\n", "return", "parser", ".", "parse_args", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.options.base_options.BaseOptions.print_options": [[74, 93], ["sorted", "print", "os.path.join", "util.util.util.mkdirs", "os.path.join", "vars().items", "base_options.BaseOptions.parser.get_default", "open", "opt_file.write", "opt_file.write", "str", "str", "vars", "str"], "methods", ["home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.util.util.mkdirs"], ["", "def", "print_options", "(", "self", ",", "opt", ")", ":", "\n", "        ", "message", "=", "''", "\n", "message", "+=", "'----------------- Options ---------------\\n'", "\n", "for", "k", ",", "v", "in", "sorted", "(", "vars", "(", "opt", ")", ".", "items", "(", ")", ")", ":", "\n", "            ", "comment", "=", "''", "\n", "default", "=", "self", ".", "parser", ".", "get_default", "(", "k", ")", "\n", "if", "v", "!=", "default", ":", "\n", "                ", "comment", "=", "'\\t[default: %s]'", "%", "str", "(", "default", ")", "\n", "", "message", "+=", "'{:>25}: {:<30}{}\\n'", ".", "format", "(", "str", "(", "k", ")", ",", "str", "(", "v", ")", ",", "comment", ")", "\n", "", "message", "+=", "'----------------- End -------------------'", "\n", "print", "(", "message", ")", "\n", "\n", "# save to the disk", "\n", "expr_dir", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "checkpoints_dir", ",", "opt", ".", "name", ")", "\n", "util", ".", "mkdirs", "(", "expr_dir", ")", "\n", "file_name", "=", "os", ".", "path", ".", "join", "(", "expr_dir", ",", "'opt.txt'", ")", "\n", "with", "open", "(", "file_name", ",", "'wt'", ")", "as", "opt_file", ":", "\n", "            ", "opt_file", ".", "write", "(", "message", ")", "\n", "opt_file", ".", "write", "(", "'\\n'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.options.base_options.BaseOptions.parse": [[94, 118], ["base_options.BaseOptions.gather_options", "base_options.BaseOptions.print_options", "base_options.BaseOptions.gpu_ids.split", "int", "len", "torch.cuda.set_device", "base_options.BaseOptions.gpu_ids.append", "base_options.BaseOptions.suffix.format", "vars"], "methods", ["home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.options.base_options.BaseOptions.gather_options", "home.repos.pwc.inspect_result.pathak22_hierarchical-imitation.options.base_options.BaseOptions.print_options"], ["", "", "def", "parse", "(", "self", ")", ":", "\n", "\n", "        ", "opt", "=", "self", ".", "gather_options", "(", ")", "\n", "opt", ".", "isTrain", "=", "self", ".", "isTrain", "# train or test", "\n", "\n", "# process opt.suffix", "\n", "if", "opt", ".", "suffix", ":", "\n", "            ", "suffix", "=", "(", "'_'", "+", "opt", ".", "suffix", ".", "format", "(", "**", "vars", "(", "opt", ")", ")", ")", "if", "opt", ".", "suffix", "!=", "''", "else", "''", "\n", "opt", ".", "name", "=", "opt", ".", "name", "+", "suffix", "\n", "\n", "", "self", ".", "print_options", "(", "opt", ")", "\n", "\n", "# set gpu ids", "\n", "str_ids", "=", "opt", ".", "gpu_ids", ".", "split", "(", "','", ")", "\n", "opt", ".", "gpu_ids", "=", "[", "]", "\n", "for", "str_id", "in", "str_ids", ":", "\n", "            ", "id", "=", "int", "(", "str_id", ")", "\n", "if", "id", ">=", "0", ":", "\n", "                ", "opt", ".", "gpu_ids", ".", "append", "(", "id", ")", "\n", "", "", "if", "len", "(", "opt", ".", "gpu_ids", ")", ">", "0", ":", "\n", "            ", "torch", ".", "cuda", ".", "set_device", "(", "opt", ".", "gpu_ids", "[", "0", "]", ")", "\n", "\n", "", "self", ".", "opt", "=", "opt", "\n", "return", "self", ".", "opt", "\n", "", "", ""]]}