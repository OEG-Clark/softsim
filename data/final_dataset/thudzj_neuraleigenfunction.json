{"home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.nngpk.NNGPKernel.__init__": [[14, 20], ["None"], "methods", ["None"], ["\t", "def", "__init__", "(", "self", ",", "kernel_type", ",", "b_var_list", "=", "[", "1.", ",", "0.", "]", ",", "w_var_list", "=", "[", "2.", ",", "1.", "]", ")", ":", "\n", "\t\t", "self", ".", "kernel_type", "=", "kernel_type", "\n", "self", ".", "name_", "=", "'GP'", "\n", "\n", "self", ".", "b_var_list", "=", "b_var_list", "\n", "self", ".", "w_var_list", "=", "w_var_list", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.nngpk.NNGPKernel.__relu_kernel": [[21, 56], ["numpy.zeros", "numpy.arccos", "numpy.sqrt", "numpy.sqrt", "range", "range", "numpy.sqrt", "range", "range", "numpy.tril", "print", "nngpk.NNGPKernel.__relu_kernel.relu_inner"], "methods", ["None"], ["", "def", "__relu_kernel", "(", "self", ",", "X", ",", "X2", "=", "None", ")", ":", "\n", "\t\t", "def", "relu_inner", "(", "x", ",", "x2", ")", ":", "\n", "\t\t\t", "k_x_x", "=", "self", ".", "b_var_list", "[", "0", "]", "+", "self", ".", "w_var_list", "[", "0", "]", "*", "(", "np", ".", "matmul", "(", "x", ",", "x", ".", "T", ")", ")", "/", "d_in", "\n", "k_x2_x2", "=", "self", ".", "b_var_list", "[", "0", "]", "+", "self", ".", "w_var_list", "[", "0", "]", "*", "(", "np", ".", "matmul", "(", "x2", ",", "x2", ".", "T", ")", ")", "/", "d_in", "\n", "k_x_x2", "=", "self", ".", "b_var_list", "[", "0", "]", "+", "self", ".", "w_var_list", "[", "0", "]", "*", "(", "np", ".", "matmul", "(", "x", ",", "x2", ".", "T", ")", ")", "/", "d_in", "\n", "k_s", "=", "k_x_x2", "/", "np", ".", "sqrt", "(", "k_x_x", "*", "k_x2_x2", ")", "\n", "if", "k_s", ">", "1.0", ":", "k_s", "=", "1.0", "# occasionally get some overflow errors", "\n", "theta", "=", "np", ".", "arccos", "(", "k_s", ")", "\n", "x_bar", "=", "np", ".", "sqrt", "(", "k_x_x", ")", "\n", "x2_bar", "=", "np", ".", "sqrt", "(", "k_x2_x2", ")", "\n", "return", "self", ".", "b_var_list", "[", "1", "]", "+", "self", ".", "w_var_list", "[", "1", "]", "/", "(", "2", "*", "np", ".", "pi", ")", "*", "x_bar", "*", "x2_bar", "*", "(", "np", ".", "sin", "(", "theta", ")", "+", "(", "np", ".", "pi", "-", "theta", ")", "*", "np", ".", "cos", "(", "theta", ")", ")", "\n", "\n", "", "if", "X2", "is", "None", ":", "\n", "\t\t\t", "same_inputs", "=", "True", "\n", "X2", "=", "X", "\n", "", "else", ":", "\n", "\t\t\t", "same_inputs", "=", "False", "\n", "\n", "", "cov", "=", "np", ".", "zeros", "(", "[", "X", ".", "shape", "[", "0", "]", ",", "X2", ".", "shape", "[", "0", "]", "]", ")", "\n", "d_in", "=", "X", ".", "shape", "[", "-", "1", "]", "\n", "\n", "if", "not", "same_inputs", ":", "\n", "\t\t\t", "for", "i", "in", "range", "(", "X", ".", "shape", "[", "0", "]", ")", ":", "\n", "\t\t\t\t", "if", "i", "%", "10", "==", "0", ":", "\n", "\t\t\t\t\t", "print", "(", "'compiling cov, row... '", "+", "str", "(", "i", ")", "+", "' / '", "+", "str", "(", "X", ".", "shape", "[", "0", "]", ")", ",", "end", "=", "'\\r'", ")", "\n", "", "for", "j", "in", "range", "(", "X2", ".", "shape", "[", "0", "]", ")", ":", "\n", "\t\t\t\t\t", "cov", "[", "i", ",", "j", "]", "=", "relu_inner", "(", "X", "[", "i", "]", ",", "X2", "[", "j", "]", ")", "\n", "", "", "", "else", ":", "# use symmetry", "\n", "\t\t\t", "for", "i", "in", "range", "(", "X", ".", "shape", "[", "0", "]", ")", ":", "\n", "\t\t\t\t", "if", "i", "%", "10", "==", "0", ":", "\n", "\t\t\t\t\t", "print", "(", "'compiling cov, row... '", "+", "str", "(", "i", ")", "+", "' / '", "+", "str", "(", "X", ".", "shape", "[", "0", "]", ")", ",", "end", "=", "'\\r'", ")", "\n", "", "for", "j", "in", "range", "(", "i", "+", "1", ")", ":", "\n", "\t\t\t\t\t", "cov", "[", "i", ",", "j", "]", "=", "relu_inner", "(", "X", "[", "i", "]", ",", "X2", "[", "j", "]", ")", "\n", "", "", "cov", "+=", "np", ".", "tril", "(", "cov", ",", "k", "=", "-", "1", ")", ".", "T", "\n", "", "return", "cov", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.nngpk.NNGPKernel.__relu_kernel_pt": [[57, 72], ["range", "torch.cat", "len", "K.diag().sqrt", "K.diag().sqrt.view", "K.diag().sqrt.view", "K.diag", "Theta.sin", "Theta.cos"], "methods", ["None"], ["", "def", "__relu_kernel_pt", "(", "self", ",", "X", ",", "X2", "=", "None", ")", ":", "\n", "# https://arxiv.org/pdf/1711.00165.pdf", "\n", "\t\t", "if", "X2", "is", "not", "None", ":", "\n", "\t\t\t", "X", "=", "torch", ".", "cat", "(", "[", "X", ",", "X2", "]", ",", "0", ")", "\n", "\n", "", "K", "=", "X", "@", "X", ".", "T", "/", "X", ".", "shape", "[", "-", "1", "]", "*", "self", ".", "w_var_list", "[", "0", "]", "+", "self", ".", "b_var_list", "[", "0", "]", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "self", ".", "w_var_list", ")", ")", ":", "\n", "\t\t\t", "K_diag_sqrt", "=", "K", ".", "diag", "(", ")", ".", "sqrt", "(", ")", "\n", "normalizer", "=", "K_diag_sqrt", ".", "view", "(", "-", "1", ",", "1", ")", "@", "K_diag_sqrt", ".", "view", "(", "1", ",", "-", "1", ")", "\n", "Theta", "=", "(", "(", "K", "/", "normalizer", ")", ".", "clamp_", "(", "max", "=", "1.", ")", ")", ".", "arccos", "(", ")", "\n", "K", "=", "(", "Theta", ".", "sin", "(", ")", "+", "(", "np", ".", "pi", "-", "Theta", ")", "*", "Theta", ".", "cos", "(", ")", ")", "*", "normalizer", "/", "(", "2", "*", "np", ".", "pi", ")", "*", "self", ".", "w_var_list", "[", "i", "]", "+", "self", ".", "b_var_list", "[", "i", "]", "\n", "", "if", "X2", "is", "not", "None", ":", "\n", "\t\t\t", "return", "K", "[", ":", "-", "X2", ".", "shape", "[", "0", "]", ",", "-", "X2", ".", "shape", "[", "0", "]", ":", "]", "\n", "", "else", ":", "\n", "\t\t\t", "return", "K", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.nngpk.NNGPKernel.make_relu_kernel_tf": [[73, 89], ["range", "tensorflow.concat", "len", "tensorflow.math.acos", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.linalg.tensor_diag_part", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.clip_by_value", "tensorflow.linalg.tensor_diag_part", "tensorflow.linalg.tensor_diag_part", "tensorflow.matmul", "tensorflow.cast", "tensorflow.math.sin", "tensorflow.math.cos"], "methods", ["None"], ["", "", "def", "make_relu_kernel_tf", "(", "self", ")", ":", "\n", "\t\t", "def", "__relu_kernel_tf", "(", "X", ",", "X2", "=", "None", ")", ":", "\n", "\t\t\t", "if", "X2", "is", "not", "None", ":", "\n", "\t\t\t\t", "X", "=", "tf", ".", "concat", "(", "[", "X", ",", "X2", "]", ",", "0", ")", "\n", "\n", "", "K", "=", "tf", ".", "matmul", "(", "X", ",", "X", ",", "transpose_b", "=", "True", ")", "/", "tf", ".", "cast", "(", "X", ".", "shape", "[", "-", "1", "]", ",", "tf", ".", "float32", ")", "*", "self", ".", "w_var_list", "[", "0", "]", "+", "self", ".", "b_var_list", "[", "0", "]", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "self", ".", "w_var_list", ")", ")", ":", "\n", "\t\t\t\t", "K_diag_sqrt", "=", "tf", ".", "linalg", ".", "tensor_diag_part", "(", "K", ")", "**", "0.5", "\n", "normalizer", "=", "tf", ".", "reshape", "(", "K_diag_sqrt", ",", "[", "-", "1", ",", "1", "]", ")", "@", "tf", ".", "reshape", "(", "K_diag_sqrt", ",", "[", "1", ",", "-", "1", "]", ")", "\n", "Theta", "=", "tf", ".", "math", ".", "acos", "(", "tf", ".", "clip_by_value", "(", "K", "/", "normalizer", ",", "clip_value_min", "=", "-", "1.", ",", "clip_value_max", "=", "1.", ")", ")", "\n", "K", "=", "(", "tf", ".", "math", ".", "sin", "(", "Theta", ")", "+", "(", "np", ".", "pi", "-", "Theta", ")", "*", "tf", ".", "math", ".", "cos", "(", "Theta", ")", ")", "*", "normalizer", "/", "(", "2", "*", "np", ".", "pi", ")", "*", "self", ".", "w_var_list", "[", "i", "]", "+", "self", ".", "b_var_list", "[", "i", "]", "\n", "", "if", "X2", "is", "not", "None", ":", "\n", "\t\t\t\t", "return", "tf", ".", "expand_dims", "(", "tf", ".", "linalg", ".", "tensor_diag_part", "(", "K", "[", ":", "X2", ".", "shape", "[", "0", "]", ",", "X2", ".", "shape", "[", "0", "]", ":", "]", ")", ",", "-", "1", ")", "\n", "", "else", ":", "\n", "\t\t\t\t", "return", "tf", ".", "expand_dims", "(", "tf", ".", "linalg", ".", "tensor_diag_part", "(", "K", ")", ",", "-", "1", ")", "\n", "", "", "return", "__relu_kernel_tf", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.nngpk.NNGPKernel.__Lrelu_kernel": [[91, 129], ["numpy.zeros", "numpy.arccos", "numpy.sqrt", "numpy.sqrt", "range", "range", "numpy.sqrt", "range", "range", "numpy.tril", "nngpk.NNGPKernel.__Lrelu_kernel.Lrelu_inner"], "methods", ["None"], ["", "def", "__Lrelu_kernel", "(", "self", ",", "X", ",", "X2", "=", "None", ",", "a", "=", "0.2", ")", ":", "\n", "# leaky relu kernel from Tsuchida, 2018, eq. 6", "\n", "\n", "\t\t", "def", "Lrelu_inner", "(", "x", ",", "x2", ")", ":", "\n", "# actually these should be 1/d_in going by Lee. But we leave it normal", "\n", "# to be equivalent to our NN ens implementation", "\n", "\t\t\t", "k_x_x", "=", "self", ".", "b_var_list", "[", "0", "]", "+", "self", ".", "w_var_list", "[", "0", "]", "*", "(", "np", ".", "matmul", "(", "x", ",", "x", ".", "T", ")", ")", "/", "d_in", "\n", "k_x2_x2", "=", "self", ".", "b_var_list", "[", "0", "]", "+", "self", ".", "w_var_list", "[", "0", "]", "*", "(", "np", ".", "matmul", "(", "x2", ",", "x2", ".", "T", ")", ")", "/", "d_in", "\n", "k_x_x2", "=", "self", ".", "b_var_list", "[", "0", "]", "+", "self", ".", "w_var_list", "[", "0", "]", "*", "(", "np", ".", "matmul", "(", "x", ",", "x2", ".", "T", ")", ")", "/", "d_in", "\n", "\n", "k_s", "=", "k_x_x2", "/", "np", ".", "sqrt", "(", "k_x_x", "*", "k_x2_x2", ")", "\n", "theta", "=", "np", ".", "arccos", "(", "k_s", ")", "\n", "\n", "x_bar", "=", "np", ".", "sqrt", "(", "k_x_x", ")", "\n", "x2_bar", "=", "np", ".", "sqrt", "(", "k_x2_x2", ")", "\n", "return", "self", ".", "b_var_list", "[", "1", "]", "+", "self", ".", "w_var_list", "[", "1", "]", "*", "x_bar", "*", "x2_bar", "*", "(", "np", ".", "square", "(", "1", "-", "a", ")", "/", "(", "2", "*", "np", ".", "pi", ")", "*", "(", "np", ".", "sin", "(", "theta", ")", "+", "(", "np", ".", "pi", "-", "theta", ")", "*", "np", ".", "cos", "(", "theta", ")", ")", "+", "a", "*", "np", ".", "cos", "(", "theta", ")", ")", "\n", "\n", "", "if", "X2", "is", "None", ":", "\n", "\t\t\t", "same_inputs", "=", "True", "\n", "X2", "=", "X", "\n", "", "else", ":", "\n", "\t\t\t", "same_inputs", "=", "False", "\n", "\n", "", "cov", "=", "np", ".", "zeros", "(", "[", "X", ".", "shape", "[", "0", "]", ",", "X2", ".", "shape", "[", "0", "]", "]", ")", "\n", "d_in", "=", "X", ".", "shape", "[", "-", "1", "]", "\n", "\n", "if", "not", "same_inputs", ":", "\n", "\t\t\t", "for", "i", "in", "range", "(", "X", ".", "shape", "[", "0", "]", ")", ":", "\n", "\t\t\t\t", "for", "j", "in", "range", "(", "X2", ".", "shape", "[", "0", "]", ")", ":", "\n", "\t\t\t\t\t", "cov", "[", "i", ",", "j", "]", "=", "Lrelu_inner", "(", "X", "[", "i", "]", ",", "X2", "[", "j", "]", ")", "\n", "", "", "", "else", ":", "# use symmetry", "\n", "\t\t\t", "for", "i", "in", "range", "(", "X", ".", "shape", "[", "0", "]", ")", ":", "\n", "\t\t\t\t", "if", "i", "%", "10", "==", "0", ":", "\n", "\t\t\t\t\t", "print", "(", "'compiling cov, row... '", "+", "str", "(", "i", ")", "+", "' / '", "+", "str", "(", "X", ".", "shape", "[", "0", "]", ")", ",", "end", "=", "'\\r'", ")", "\n", "", "for", "j", "in", "range", "(", "i", "+", "1", ")", ":", "\n", "\t\t\t\t\t", "cov", "[", "i", ",", "j", "]", "=", "Lrelu_inner", "(", "X", "[", "i", "]", ",", "X2", "[", "j", "]", ")", "\n", "", "", "cov", "+=", "np", ".", "tril", "(", "cov", ",", "k", "=", "-", "1", ")", ".", "T", "\n", "", "return", "cov", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.nngpk.NNGPKernel.__Lrelu_kernel_pt": [[130, 144], ["range", "torch.cat", "len", "K.diag().sqrt", "K.diag().sqrt.view", "K.diag().sqrt.view", "K.diag", "Theta.cos", "numpy.square", "Theta.sin", "Theta.cos"], "methods", ["None"], ["", "def", "__Lrelu_kernel_pt", "(", "self", ",", "X", ",", "X2", "=", "None", ",", "a", "=", "0.2", ")", ":", "\n", "\t\t", "if", "X2", "is", "not", "None", ":", "\n", "\t\t\t", "X", "=", "torch", ".", "cat", "(", "[", "X", ",", "X2", "]", ",", "0", ")", "\n", "\n", "", "K", "=", "X", "@", "X", ".", "T", "/", "X", ".", "shape", "[", "-", "1", "]", "*", "self", ".", "w_var_list", "[", "0", "]", "+", "self", ".", "b_var_list", "[", "0", "]", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "self", ".", "w_var_list", ")", ")", ":", "\n", "\t\t\t", "K_diag_sqrt", "=", "K", ".", "diag", "(", ")", ".", "sqrt", "(", ")", "\n", "normalizer", "=", "K_diag_sqrt", ".", "view", "(", "-", "1", ",", "1", ")", "@", "K_diag_sqrt", ".", "view", "(", "1", ",", "-", "1", ")", "\n", "Theta", "=", "(", "(", "K", "/", "normalizer", ")", ".", "clamp_", "(", "max", "=", "1.", ")", ")", ".", "arccos", "(", ")", "\n", "K", "=", "(", "(", "Theta", ".", "sin", "(", ")", "+", "(", "np", ".", "pi", "-", "Theta", ")", "*", "Theta", ".", "cos", "(", ")", ")", "*", "np", ".", "square", "(", "1", "-", "a", ")", "/", "(", "2", "*", "np", ".", "pi", ")", "+", "a", "*", "Theta", ".", "cos", "(", ")", ")", "*", "normalizer", "*", "self", ".", "w_var_list", "[", "i", "]", "+", "self", ".", "b_var_list", "[", "i", "]", "\n", "", "if", "X2", "is", "not", "None", ":", "\n", "\t\t\t", "return", "K", "[", ":", "-", "X2", ".", "shape", "[", "0", "]", ",", "-", "X2", ".", "shape", "[", "0", "]", ":", "]", "\n", "", "else", ":", "\n", "\t\t\t", "return", "K", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.nngpk.NNGPKernel.__erf_kernel": [[145, 176], ["numpy.zeros", "range", "range", "numpy.sqrt", "range", "range", "numpy.tril", "nngpk.NNGPKernel.__erf_kernel.erf_inner"], "methods", ["None"], ["", "", "def", "__erf_kernel", "(", "self", ",", "X", ",", "X2", "=", "None", ")", ":", "\n", "# erf kernel from Williams 1996, eq. 11", "\n", "\n", "\t\t", "def", "erf_inner", "(", "x", ",", "x2", ")", ":", "\n", "# actually these should be 1/d_in", "\n", "\t\t\t", "k_x_x", "=", "2", "*", "(", "self", ".", "b_var_list", "[", "0", "]", "+", "self", ".", "w_var_list", "[", "0", "]", "*", "(", "np", ".", "matmul", "(", "x", ",", "x", ".", "T", ")", ")", "/", "d_in", ")", "\n", "k_x2_x2", "=", "2", "*", "(", "self", ".", "b_var_list", "[", "0", "]", "+", "self", ".", "w_var_list", "[", "0", "]", "*", "(", "np", ".", "matmul", "(", "x2", ",", "x2", ".", "T", ")", ")", "/", "d_in", ")", "\n", "k_x_x2", "=", "2", "*", "(", "self", ".", "b_var_list", "[", "0", "]", "+", "self", ".", "w_var_list", "[", "0", "]", "*", "(", "np", ".", "matmul", "(", "x", ",", "x2", ".", "T", ")", ")", "/", "d_in", ")", "\n", "a", "=", "k_x_x2", "/", "np", ".", "sqrt", "(", "(", "1", "+", "k_x_x", ")", "*", "(", "1", "+", "k_x2_x2", ")", ")", "\n", "return", "self", ".", "b_var_list", "[", "1", "]", "+", "self", ".", "w_var_list", "[", "1", "]", "*", "2", "*", "np", ".", "arcsin", "(", "a", ")", "/", "np", ".", "pi", "\n", "\n", "", "if", "X2", "is", "None", ":", "\n", "\t\t\t", "same_inputs", "=", "True", "\n", "X2", "=", "X", "\n", "", "else", ":", "\n", "\t\t\t", "same_inputs", "=", "False", "\n", "\n", "", "cov", "=", "np", ".", "zeros", "(", "[", "X", ".", "shape", "[", "0", "]", ",", "X2", ".", "shape", "[", "0", "]", "]", ")", "\n", "d_in", "=", "X", ".", "shape", "[", "-", "1", "]", "\n", "\n", "if", "not", "same_inputs", ":", "\n", "\t\t\t", "for", "i", "in", "range", "(", "X", ".", "shape", "[", "0", "]", ")", ":", "\n", "\t\t\t\t", "for", "j", "in", "range", "(", "X2", ".", "shape", "[", "0", "]", ")", ":", "\n", "\t\t\t\t\t", "cov", "[", "i", ",", "j", "]", "=", "erf_inner", "(", "X", "[", "i", "]", ",", "X2", "[", "j", "]", ")", "\n", "", "", "", "else", ":", "\n", "\t\t\t", "for", "i", "in", "range", "(", "X", ".", "shape", "[", "0", "]", ")", ":", "\n", "\t\t\t\t", "for", "j", "in", "range", "(", "i", "+", "1", ")", ":", "\n", "\t\t\t\t\t", "cov", "[", "i", ",", "j", "]", "=", "erf_inner", "(", "X", "[", "i", "]", ",", "X2", "[", "j", "]", ")", "\n", "# now just reflect - saves recomputing half the matrix", "\n", "", "", "cov", "+=", "np", ".", "tril", "(", "cov", ",", "k", "=", "-", "1", ")", ".", "T", "\n", "", "return", "cov", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.nngpk.NNGPKernel.__erf_kernel_pt": [[177, 192], ["range", "torch.cat", "len", "K.diag().add().sqrt", "K.diag().add().sqrt.view", "K.diag().add().sqrt.view", "K.diag().add", "K.diag"], "methods", ["None"], ["", "def", "__erf_kernel_pt", "(", "self", ",", "X", ",", "X2", "=", "None", ")", ":", "\n", "\t\t", "if", "X2", "is", "not", "None", ":", "\n", "\t\t\t", "X", "=", "torch", ".", "cat", "(", "[", "X", ",", "X2", "]", ",", "0", ")", "\n", "\n", "", "K", "=", "X", "@", "X", ".", "T", "/", "X", ".", "shape", "[", "-", "1", "]", "*", "self", ".", "w_var_list", "[", "0", "]", "+", "self", ".", "b_var_list", "[", "0", "]", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "self", ".", "w_var_list", ")", ")", ":", "\n", "\t\t\t", "K", "=", "K", "*", "2", "\n", "K_diag_sqrt", "=", "K", ".", "diag", "(", ")", ".", "add", "(", "1.", ")", ".", "sqrt", "(", ")", "\n", "normalizer", "=", "K_diag_sqrt", ".", "view", "(", "-", "1", ",", "1", ")", "@", "K_diag_sqrt", ".", "view", "(", "1", ",", "-", "1", ")", "\n", "Theta", "=", "(", "(", "K", "/", "normalizer", ")", ".", "clamp_", "(", "max", "=", "1.", ")", ")", ".", "arcsin", "(", ")", "\n", "K", "=", "Theta", "*", "2", "/", "np", ".", "pi", "*", "self", ".", "w_var_list", "[", "i", "]", "+", "self", ".", "b_var_list", "[", "i", "]", "\n", "", "if", "X2", "is", "not", "None", ":", "\n", "\t\t\t", "return", "K", "[", ":", "-", "X2", ".", "shape", "[", "0", "]", ",", "-", "X2", ".", "shape", "[", "0", "]", ":", "]", "\n", "", "else", ":", "\n", "\t\t\t", "return", "K", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.nngpk.NNGPKernel.make_erf_kernel_tf": [[193, 211], ["print", "range", "tensorflow.concat", "len", "tensorflow.math.asin", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.clip_by_value", "tensorflow.linalg.tensor_diag_part", "tensorflow.linalg.tensor_diag_part", "tensorflow.matmul", "tensorflow.cast", "tensorflow.linalg.tensor_diag_part"], "methods", ["None"], ["", "", "def", "make_erf_kernel_tf", "(", "self", ")", ":", "\n", "\t\t", "def", "__erf_kernel_tf", "(", "X", ",", "X2", "=", "None", ")", ":", "\n", "\t\t\t", "print", "(", "X", ",", "X2", ")", "\n", "if", "X2", "is", "not", "None", ":", "\n", "\t\t\t\t", "X", "=", "tf", ".", "concat", "(", "[", "X", ",", "X2", "]", ",", "0", ")", "\n", "\n", "", "K", "=", "tf", ".", "matmul", "(", "X", ",", "X", ",", "transpose_b", "=", "True", ")", "/", "tf", ".", "cast", "(", "X", ".", "shape", "[", "-", "1", "]", ",", "tf", ".", "float32", ")", "*", "self", ".", "w_var_list", "[", "0", "]", "+", "self", ".", "b_var_list", "[", "0", "]", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "self", ".", "w_var_list", ")", ")", ":", "\n", "\t\t\t\t", "K", "=", "K", "*", "2", "\n", "K_diag_sqrt", "=", "(", "tf", ".", "linalg", ".", "tensor_diag_part", "(", "K", ")", "+", "1.", ")", "**", "0.5", "\n", "normalizer", "=", "tf", ".", "reshape", "(", "K_diag_sqrt", ",", "[", "-", "1", ",", "1", "]", ")", "@", "tf", ".", "reshape", "(", "K_diag_sqrt", ",", "[", "1", ",", "-", "1", "]", ")", "\n", "Theta", "=", "tf", ".", "math", ".", "asin", "(", "tf", ".", "clip_by_value", "(", "K", "/", "normalizer", ",", "clip_value_min", "=", "-", "1.", ",", "clip_value_max", "=", "1.", ")", ")", "\n", "K", "=", "Theta", "*", "2", "/", "np", ".", "pi", "*", "self", ".", "w_var_list", "[", "i", "]", "+", "self", ".", "b_var_list", "[", "i", "]", "\n", "", "if", "X2", "is", "not", "None", ":", "\n", "\t\t\t\t", "return", "tf", ".", "expand_dims", "(", "tf", ".", "linalg", ".", "tensor_diag_part", "(", "K", "[", ":", "X2", ".", "shape", "[", "0", "]", ",", "X2", ".", "shape", "[", "0", "]", ":", "]", ")", ",", "-", "1", ")", "\n", "", "else", ":", "\n", "\t\t\t\t", "return", "tf", ".", "expand_dims", "(", "tf", ".", "linalg", ".", "tensor_diag_part", "(", "K", ")", ",", "-", "1", ")", "\n", "", "", "return", "__erf_kernel_tf", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.nngpk.NNGPKernel.__call__": [[212, 222], ["torch.no_grad", "nngpk.NNGPKernel.__relu_kernel_pt", "nngpk.NNGPKernel.__Lrelu_kernel_pt", "nngpk.NNGPKernel.__erf_kernel_pt", "float", "nngpk.NNGPKernel.kernel_type.replace"], "methods", ["home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.nngpk.NNGPKernel.__relu_kernel_pt", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.nngpk.NNGPKernel.__Lrelu_kernel_pt", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.nngpk.NNGPKernel.__erf_kernel_pt"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "__call__", "(", "self", ",", "X", ",", "X2", "=", "None", ")", ":", "\n", "\t\t", "if", "self", ".", "kernel_type", "==", "'relu'", ":", "\n", "\t\t\t", "return", "self", ".", "__relu_kernel_pt", "(", "X", ",", "X2", ")", "\n", "", "elif", "'lrelu'", "in", "self", ".", "kernel_type", ":", "\n", "\t\t\t", "return", "self", ".", "__Lrelu_kernel_pt", "(", "X", ",", "X2", ",", "a", "=", "float", "(", "self", ".", "kernel_type", ".", "replace", "(", "\"lrelu\"", ",", "\"\"", ")", ")", ")", "\n", "", "elif", "self", ".", "kernel_type", "==", "'erf'", ":", "\n", "\t\t\t", "return", "self", ".", "__erf_kernel_pt", "(", "X", ",", "X2", ")", "\n", "", "else", ":", "\n", "\t\t\t", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.neuralef-toy-nngpkernels.NeuralEigenFunctions.__init__": [[37, 53], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "neuralef-toy-nngpkernels.NeuralEigenFunctions.register_buffer", "neuralef-toy-nngpkernels.NeuralEigenFunctions.register_buffer", "utils.build_mlp_given_config", "neuralef-toy-nngpkernels.NeuralEigenFunctions.functions.append", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.src.spin.SpectralNetwork.__init__", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.utils.build_mlp_given_config"], ["\t", "def", "__init__", "(", "self", ",", "k", ",", "kernel_type", ",", "input_size", ",", "hidden_size", ",", "num_layers", ",", "\n", "output_size", "=", "1", ",", "momentum", "=", "0.9", ",", "normalize_over", "=", "[", "0", "]", ")", ":", "\n", "\t\t", "super", "(", "NeuralEigenFunctions", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "momentum", "=", "momentum", "\n", "self", ".", "normalize_over", "=", "normalize_over", "\n", "self", ".", "functions", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "i", "in", "range", "(", "k", ")", ":", "\n", "\t\t\t", "function", "=", "build_mlp_given_config", "(", "nonlinearity", "=", "kernel_type", ",", "\n", "input_size", "=", "input_size", ",", "\n", "hidden_size", "=", "hidden_size", ",", "\n", "output_size", "=", "output_size", ",", "\n", "num_layers", "=", "num_layers", ",", "\n", "bias", "=", "True", ")", "\n", "self", ".", "functions", ".", "append", "(", "function", ")", "\n", "", "self", ".", "register_buffer", "(", "'eigennorm'", ",", "torch", ".", "zeros", "(", "k", ")", ")", "\n", "self", ".", "register_buffer", "(", "'num_calls'", ",", "torch", ".", "Tensor", "(", "[", "0", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.neuralef-toy-nngpkernels.NeuralEigenFunctions.forward": [[54, 69], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "f", "torch.cat.norm", "torch.cat.norm", "torch.cat.norm", "math.sqrt", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "numpy.prod", "neuralef-toy-nngpkernels.NeuralEigenFunctions.eigennorm.copy_", "neuralef-toy-nngpkernels.NeuralEigenFunctions.eigennorm.mul_().add_", "neuralef-toy-nngpkernels.NeuralEigenFunctions.eigennorm.mul_"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\t\t", "ret_raw", "=", "torch", ".", "cat", "(", "[", "f", "(", "x", ")", "for", "f", "in", "self", ".", "functions", "]", ",", "1", ")", "\n", "if", "self", ".", "training", ":", "\n", "\t\t\t", "norm_", "=", "ret_raw", ".", "norm", "(", "dim", "=", "self", ".", "normalize_over", ")", "/", "math", ".", "sqrt", "(", "\n", "np", ".", "prod", "(", "[", "ret_raw", ".", "shape", "[", "dim", "]", "for", "dim", "in", "self", ".", "normalize_over", "]", ")", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "\t\t\t\t", "if", "self", ".", "num_calls", "==", "0", ":", "\n", "\t\t\t\t\t", "self", ".", "eigennorm", ".", "copy_", "(", "norm_", ".", "data", ")", "\n", "", "else", ":", "\n", "\t\t\t\t\t", "self", ".", "eigennorm", ".", "mul_", "(", "self", ".", "momentum", ")", ".", "add_", "(", "\n", "norm_", ".", "data", ",", "alpha", "=", "1", "-", "self", ".", "momentum", ")", "\n", "", "self", ".", "num_calls", "+=", "1", "\n", "", "", "else", ":", "\n", "\t\t\t", "norm_", "=", "self", ".", "eigennorm", "\n", "", "return", "ret_raw", "/", "norm_", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.neuralef-toy-nngpkernels.our": [[70, 126], ["len", "min", "utils.build_mlp_given_config", "timeit.default_timer", "neuralef-toy-nngpkernels.NeuralEigenFunctions", "print", "NeuralEigenFunctions.train", "range", "timeit.default_timer", "torch.no_grad", "torch.no_grad", "torch.no_grad", "range", "torch.cat", "torch.cat", "torch.cat", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "numpy.random.choice", "NeuralEigenFunctions.", "torch.optim.SGD.zero_grad", "nef.backward", "torch.optim.SGD.step", "utils.init_NN", "samples.append", "NeuralEigenFunctions.parameters", "torch.optim.RMSprop", "torch.optim.RMSprop", "torch.optim.RMSprop", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.no_grad", "torch.no_grad", "torch.no_grad", "utils.build_mlp_given_config.", "NeuralEigenFunctions.parameters", "NeuralEigenFunctions.parameters", "torch.eye", "torch.eye", "torch.eye", "eigenvalues_our.mul_().add_", "psis_K_psis.diag", "eigenvalues_our.mul_", "psis_K_psis.diag", "psis_K_psis.diag"], "function", ["home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.utils.build_mlp_given_config", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.examples.hydrogen.train", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.utils.init_NN"], ["", "", "def", "our", "(", "X", ",", "k", ",", "kernel", ",", "kernel_type", ",", "w_var_list", ",", "b_var_list", ")", ":", "\n", "\t", "hidden_size", "=", "32", "\n", "num_layers", "=", "len", "(", "w_var_list", ")", "\n", "optimizer_type", "=", "'Adam'", "\n", "lr", "=", "1e-3", "\n", "momentum", "=", "0.9", "\n", "num_iterations", "=", "2000", "\n", "num_samples", "=", "10000", "\n", "B", "=", "min", "(", "128", ",", "X", ".", "shape", "[", "0", "]", ")", "\n", "\n", "random_model", "=", "build_mlp_given_config", "(", "nonlinearity", "=", "kernel_type", ",", "\n", "input_size", "=", "X", ".", "shape", "[", "-", "1", "]", ",", "\n", "hidden_size", "=", "16", ",", "\n", "output_size", "=", "1", ",", "\n", "bias", "=", "True", ",", "\n", "num_layers", "=", "num_layers", ")", "\n", "samples", "=", "[", "]", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "\t\t", "for", "_", "in", "range", "(", "num_samples", ")", ":", "\n", "\t\t\t", "init_NN", "(", "random_model", ",", "w_var_list", ",", "b_var_list", ")", "\n", "samples", ".", "append", "(", "random_model", "(", "X", ")", ")", "\n", "", "", "samples", "=", "torch", ".", "cat", "(", "samples", ",", "-", "1", ")", ".", "T", "\n", "\n", "start", "=", "timer", "(", ")", "\n", "nef", "=", "NeuralEigenFunctions", "(", "k", ",", "kernel_type", ",", "X", ".", "shape", "[", "-", "1", "]", ",", "hidden_size", ",", "num_layers", ")", "\n", "print", "(", "nef", ".", "functions", "[", "0", "]", ")", "\n", "if", "optimizer_type", "==", "'Adam'", ":", "\n", "\t\t", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "nef", ".", "parameters", "(", ")", ",", "lr", "=", "lr", ")", "\n", "", "elif", "optimizer_type", "==", "'RMSprop'", ":", "\n", "\t\t", "optimizer", "=", "torch", ".", "optim", ".", "RMSprop", "(", "nef", ".", "parameters", "(", ")", ",", "lr", "=", "lr", ",", "momentum", "=", "momentum", ")", "\n", "", "else", ":", "\n", "\t\t", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "nef", ".", "parameters", "(", ")", ",", "lr", "=", "lr", ",", "momentum", "=", "momentum", ")", "\n", "\n", "", "nef", ".", "train", "(", ")", "\n", "eigenvalues_our", "=", "None", "\n", "for", "ite", "in", "range", "(", "num_iterations", ")", ":", "\n", "\t\t", "idx", "=", "np", ".", "random", ".", "choice", "(", "X", ".", "shape", "[", "0", "]", ",", "B", ",", "replace", "=", "False", ")", "\n", "samples_batch", "=", "samples", "[", ":", ",", "idx", "]", "\n", "psis_X", "=", "nef", "(", "X", "[", "idx", "]", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "\t\t\t", "samples_batch_psis", "=", "samples_batch", "@", "psis_X", "\n", "psis_K_psis", "=", "samples_batch_psis", ".", "T", "@", "samples_batch_psis", "/", "num_samples", "\n", "mask", "=", "torch", ".", "eye", "(", "k", ",", "device", "=", "psis_X", ".", "device", ")", "-", "(", "psis_K_psis", "/", "psis_K_psis", ".", "diag", "(", ")", ")", ".", "tril", "(", "diagonal", "=", "-", "1", ")", ".", "T", "\n", "grad", "=", "samples_batch", ".", "T", "@", "(", "samples_batch_psis", "@", "mask", "/", "num_samples", ")", "\n", "\n", "if", "eigenvalues_our", "is", "None", ":", "\n", "\t\t\t\t", "eigenvalues_our", "=", "psis_K_psis", ".", "diag", "(", ")", "/", "(", "B", "**", "2", ")", "\n", "", "else", ":", "\n", "\t\t\t\t", "eigenvalues_our", ".", "mul_", "(", "0.9", ")", ".", "add_", "(", "psis_K_psis", ".", "diag", "(", ")", "/", "(", "B", "**", "2", ")", ",", "alpha", "=", "0.1", ")", "\n", "\n", "", "", "optimizer", ".", "zero_grad", "(", ")", "\n", "psis_X", ".", "backward", "(", "-", "grad", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "", "end", "=", "timer", "(", ")", "\n", "return", "eigenvalues_our", ",", "nef", ",", "end", "-", "start", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.neuralef-toy-nngpkernels.spin_tf": [[127, 199], ["min", "spectral_inference_networks.KernelOperator", "timeit.default_timer", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.train.AdamOptimizer", "spectral_inference_networks.SpectralNetwork", "spin.SpectralNetwork.train", "timeit.default_timer", "tensorflow.random.normal", "tensorflow.random.normal", "tensorflow.random.normal", "tensorflow.zeros", "tensorflow.zeros", "tensorflow.zeros", "tensorflow.squeeze", "kernel.make_relu_kernel_tf", "kernel.make_erf_kernel_tf", "math.sqrt", "math.sqrt", "math.sqrt", "tensorflow.tensordot", "tensorflow.math.erf", "tensorflow.matmul", "tensorflow.math.erf", "tensorflow.matmul", "tensorflow.transpose", "tensorflow.constant", "tensorflow.nn.relu", "tensorflow.nn.relu"], "function", ["home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.examples.hydrogen.train", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.nngpk.NNGPKernel.make_relu_kernel_tf", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.nngpk.NNGPKernel.make_erf_kernel_tf"], ["", "def", "spin_tf", "(", "X", ",", "X_val", ",", "k", ",", "kernel", ",", "kernel_type", ")", ":", "\n", "\n", "\t", "lr", "=", "1e-3", "\n", "num_iterations", "=", "2000", "\n", "B", "=", "min", "(", "128", ",", "X", ".", "shape", "[", "0", "]", ")", "\n", "\n", "linop", "=", "spin", ".", "KernelOperator", "(", "kernel", ".", "make_relu_kernel_tf", "(", ")", "\n", "if", "kernel_type", "==", "'relu'", "else", "kernel", ".", "make_erf_kernel_tf", "(", ")", ")", "\n", "\n", "start", "=", "timer", "(", ")", "\n", "# Create variables for simple MLP", "\n", "w1", "=", "tf", ".", "Variable", "(", "tf", ".", "random", ".", "normal", "(", "[", "k", ",", "32", ",", "X", ".", "shape", "[", "1", "]", "]", ",", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "X", ".", "shape", "[", "1", "]", ")", ")", ")", "\n", "w2", "=", "tf", ".", "Variable", "(", "tf", ".", "random", ".", "normal", "(", "[", "k", ",", "32", ",", "32", "]", ",", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "32", ")", ")", ")", "\n", "w3", "=", "tf", ".", "Variable", "(", "tf", ".", "random", ".", "normal", "(", "[", "k", ",", "1", ",", "32", "]", ",", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "32", ")", ")", ")", "\n", "\n", "b1", "=", "tf", ".", "Variable", "(", "tf", ".", "zeros", "(", "[", "k", ",", "32", ",", "1", "]", ")", ")", "\n", "b2", "=", "tf", ".", "Variable", "(", "tf", ".", "zeros", "(", "[", "k", ",", "32", ",", "1", "]", ")", ")", "\n", "b3", "=", "tf", ".", "Variable", "(", "tf", ".", "zeros", "(", "[", "k", ",", "1", ",", "1", "]", ")", ")", "\n", "\n", "# Create function to construct simple MLP", "\n", "def", "network", "(", "x", ")", ":", "\n", "\t  ", "h1", "=", "tf", ".", "tensordot", "(", "w1", ",", "x", ",", "[", "[", "2", "]", ",", "[", "1", "]", "]", ")", "+", "b1", "\n", "if", "kernel_type", "==", "'erf'", ":", "\n", "\t\t  ", "h1_act", "=", "tf", ".", "math", ".", "erf", "(", "h1", ")", "\n", "", "elif", "kernel_type", "==", "'relu'", ":", "\n", "\t\t  ", "h1_act", "=", "tf", ".", "nn", ".", "relu", "(", "h1", ")", "\n", "", "else", ":", "\n", "\t\t  ", "raise", "NotImplementedError", "\n", "\n", "", "h2", "=", "tf", ".", "matmul", "(", "w2", ",", "h1_act", ")", "+", "b2", "\n", "if", "kernel_type", "==", "'erf'", ":", "\n", "\t\t  ", "h2_act", "=", "tf", ".", "math", ".", "erf", "(", "h2", ")", "\n", "", "elif", "kernel_type", "==", "'relu'", ":", "\n", "\t\t  ", "h2_act", "=", "tf", ".", "nn", ".", "relu", "(", "h2", ")", "\n", "", "else", ":", "\n", "\t\t  ", "raise", "NotImplementedError", "\n", "\n", "", "h3", "=", "tf", ".", "matmul", "(", "w3", ",", "h2_act", ")", "+", "b3", "\n", "return", "tf", ".", "squeeze", "(", "tf", ".", "transpose", "(", "h3", ",", "perm", "=", "[", "2", ",", "1", ",", "0", "]", ")", ")", "\n", "\n", "", "optim", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "learning_rate", "=", "lr", ")", "\n", "# Constructs the internal training ops for spectral inference networks.", "\n", "spectral_net", "=", "spin", ".", "SpectralNetwork", "(", "\n", "linop", ",", "\n", "network", ",", "\n", "X", ",", "\n", "[", "w1", ",", "w2", ",", "w3", ",", "b1", ",", "b2", ",", "b3", "]", ",", "\n", "B", ",", "decay", "=", "0.99", ")", "\n", "\n", "# Trivial defaults for logging and stats hooks.", "\n", "logging_config", "=", "{", "\n", "'config'", ":", "{", "}", ",", "\n", "'log_image_every'", ":", "100000000", ",", "\n", "'save_params_every'", ":", "100000000", ",", "\n", "'saver_path'", ":", "'./tmp'", ",", "\n", "'saver_name'", ":", "'example'", ",", "\n", "}", "\n", "\n", "stats_hooks", "=", "{", "\n", "'create'", ":", "spin", ".", "util", ".", "create_default_stats", ",", "\n", "'update'", ":", "spin", ".", "util", ".", "update_default_stats", ",", "\n", "}", "\n", "\n", "# Executes the training of spectral inference networks.", "\n", "stats", ",", "outputs", "=", "spectral_net", ".", "train", "(", "\n", "optim", ",", "\n", "num_iterations", ",", "\n", "logging_config", ",", "\n", "stats_hooks", ",", "\n", "data_for_plotting", "=", "tf", ".", "constant", "(", "X_val", ")", ")", "\n", "end", "=", "timer", "(", ")", "\n", "return", "outputs", ",", "end", "-", "start", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.neuralef-toy-nngpkernels.main": [[200, 297], ["random.seed", "numpy.random.seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "nngpk.NNGPKernel", "sklearn.preprocessing.StandardScaler().fit_transform", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "matplotlib.figure", "matplotlib.colors.ListedColormap", "plt.figure.add_subplot", "figure.add_subplot.set_title", "figure.add_subplot.scatter", "figure.add_subplot.set_xlim", "figure.add_subplot.set_ylim", "figure.add_subplot.set_xticks", "figure.add_subplot.set_yticks", "figure.add_subplot.spines[].set_visible", "figure.add_subplot.spines[].set_visible", "figure.add_subplot.spines[].set_visible", "figure.add_subplot.spines[].set_visible", "figure.add_subplot.set_axisbelow", "utils.nystrom", "neuralef-toy-nngpkernels.our", "print", "print", "print", "print", "print", "nef.eval", "neuralef-toy-nngpkernels.spin_tf", "plt.figure.add_subplot", "figure.add_subplot.set_title", "figure.add_subplot.scatter", "figure.add_subplot.grid", "matplotlib.setp", "matplotlib.setp", "matplotlib.setp", "plt.figure.add_subplot", "figure.add_subplot.set_title", "figure.add_subplot.scatter", "figure.add_subplot.grid", "matplotlib.setp", "matplotlib.setp", "matplotlib.setp", "plt.figure.tight_layout", "plt.figure.savefig", "sklearn.datasets.make_moons", "torch.no_grad", "torch.no_grad", "torch.no_grad", "eigenfuncs_nystrom", "nef", "print", "print", "figure.add_subplot.get_xticklabels", "figure.add_subplot.get_yticklabels", "figure.add_subplot.get_zticklabels", "figure.add_subplot.get_xticklabels", "figure.add_subplot.get_yticklabels", "figure.add_subplot.get_zticklabels", "sklearn.datasets.make_circles", "sklearn.preprocessing.StandardScaler", "X[].min", "X[].max", "X[].min", "X[].max", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "function", ["home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.utils.nystrom", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.neuralef-classic-kernels.our", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.neuralef-classic-kernels.spin_tf"], ["", "def", "main", "(", ")", ":", "\n", "# set random seed", "\n", "\t", "seed", "=", "42", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", "=", "True", "\n", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "False", "\n", "\n", "# setup the nngp kernel", "\n", "kernel_type", "=", "'erf'", "\n", "w_var_list", "=", "[", "2.", ",", "2.", ",", "2.", "]", "\n", "b_var_list", "=", "[", "1", ",", "1", ",", "1", "]", "\n", "\n", "# general settings", "\n", "num_alldata", "=", "1000", "\n", "k", "=", "3", "\n", "# dataset settings", "\n", "dataset", "=", "'circles'", "\n", "if", "dataset", "==", "'two_moon'", ":", "\n", "\t\t", "X", ",", "y", "=", "make_moons", "(", "num_alldata", ",", "noise", "=", "0.04", ",", "random_state", "=", "seed", ")", "\n", "kernel_type", "=", "'relu'", "\n", "", "elif", "dataset", "==", "'circles'", ":", "\n", "\t\t", "X", ",", "y", "=", "make_circles", "(", "num_alldata", ",", "noise", "=", "0.04", ",", "factor", "=", "0.5", ",", "random_state", "=", "seed", ")", "\n", "", "else", ":", "\n", "\t\t", "raise", "NotImplementedError", "\n", "\n", "", "kernel", "=", "NNGPKernel", "(", "kernel_type", "=", "kernel_type", ",", "w_var_list", "=", "w_var_list", ",", "b_var_list", "=", "b_var_list", ")", "\n", "\n", "X", "=", "StandardScaler", "(", ")", ".", "fit_transform", "(", "X", ")", "\n", "x_min", ",", "x_max", "=", "X", "[", ":", ",", "0", "]", ".", "min", "(", ")", "-", ".5", ",", "X", "[", ":", ",", "0", "]", ".", "max", "(", ")", "+", ".5", "\n", "y_min", ",", "y_max", "=", "X", "[", ":", ",", "1", "]", ".", "min", "(", ")", "-", ".5", ",", "X", "[", ":", ",", "1", "]", ".", "max", "(", ")", "+", "0.6", "\n", "X", "=", "torch", ".", "from_numpy", "(", "X", ")", ".", "float", "(", ")", "\n", "\n", "# plot the dataset", "\n", "figure", "=", "plt", ".", "figure", "(", "figsize", "=", "(", "15", ",", "5", ")", ")", "\n", "cm", "=", "plt", ".", "cm", ".", "RdBu", "\n", "cm_bright", "=", "ListedColormap", "(", "[", "'#FF0000'", ",", "'#0000FF'", "]", ")", "\n", "ax", "=", "figure", ".", "add_subplot", "(", "131", ")", "\n", "ax", ".", "set_title", "(", "\"Input data\"", ")", "\n", "# Plot the training points", "\n", "ax", ".", "scatter", "(", "X", "[", ":", ",", "0", "]", ",", "X", "[", ":", ",", "1", "]", ",", "c", "=", "y", ",", "cmap", "=", "cm_bright", ",", "\n", "edgecolors", "=", "'k'", ")", "\n", "ax", ".", "set_xlim", "(", "x_min", ",", "x_max", ")", "\n", "ax", ".", "set_ylim", "(", "y_min", ",", "y_max", ")", "\n", "ax", ".", "set_xticks", "(", "(", ")", ")", "\n", "ax", ".", "set_yticks", "(", "(", ")", ")", "\n", "ax", ".", "spines", "[", "'right'", "]", ".", "set_visible", "(", "False", ")", "\n", "ax", ".", "spines", "[", "'top'", "]", ".", "set_visible", "(", "False", ")", "\n", "ax", ".", "spines", "[", "'left'", "]", ".", "set_visible", "(", "False", ")", "\n", "ax", ".", "spines", "[", "'bottom'", "]", ".", "set_visible", "(", "False", ")", "\n", "ax", ".", "set_axisbelow", "(", "True", ")", "\n", "\n", "eigenvalues_nystrom", ",", "eigenfuncs_nystrom", ",", "c_nystrom", "=", "nystrom", "(", "X", ",", "k", ",", "kernel", ")", "\n", "eigenvalues_our", ",", "nef", ",", "c_our", "=", "our", "(", "X", ",", "k", ",", "kernel", ",", "kernel_type", ",", "w_var_list", ",", "b_var_list", ")", "\n", "\n", "print", "(", "\"Eigenvalues estimated by nystrom method:\"", ")", "\n", "print", "(", "eigenvalues_nystrom", ")", "\n", "print", "(", "\"Eigenvalues estimated by our method:\"", ")", "\n", "print", "(", "eigenvalues_our", ")", "\n", "print", "(", "\"Time comparison {} vs. {}\"", ".", "format", "(", "c_nystrom", ",", "c_our", ")", ")", "\n", "\n", "nef", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "\t\t", "X_projected_by_nystrom", "=", "eigenfuncs_nystrom", "(", "X", ")", "\n", "X_projected_by_our", "=", "nef", "(", "X", ")", "\n", "print", "(", "X_projected_by_nystrom", "[", ":", "5", "]", ")", "\n", "print", "(", "X_projected_by_our", "[", ":", "5", "]", ")", "\n", "\n", "", "X_projected_by_spin", ",", "c_spin", "=", "spin_tf", "(", "X", ",", "X", ",", "k", ",", "kernel", ",", "kernel_type", ")", "\n", "\n", "ax", "=", "figure", ".", "add_subplot", "(", "132", ",", "projection", "=", "'3d'", ")", "\n", "ax", ".", "set_title", "(", "\"Projected by our method\"", ")", "\n", "X_projected_by_our_0", "=", "-", "X_projected_by_our", "[", ":", ",", "0", "]", "if", "dataset", "==", "'two_moon'", "else", "X_projected_by_our", "[", ":", ",", "0", "]", "\n", "X_projected_by_our_1", "=", "-", "X_projected_by_our", "[", ":", ",", "1", "]", "if", "dataset", "==", "'two_moon'", "else", "X_projected_by_our", "[", ":", ",", "1", "]", "\n", "X_projected_by_our_2", "=", "X_projected_by_our", "[", ":", ",", "2", "]", "\n", "ax", ".", "scatter", "(", "X_projected_by_our_0", ",", "X_projected_by_our_1", ",", "X_projected_by_our_2", ",", "c", "=", "y", ",", "cmap", "=", "cm_bright", ",", "\n", "edgecolors", "=", "'k'", ")", "\n", "ax", ".", "grid", "(", "True", ")", "\n", "plt", ".", "setp", "(", "ax", ".", "get_xticklabels", "(", ")", ",", "visible", "=", "False", ")", "\n", "plt", ".", "setp", "(", "ax", ".", "get_yticklabels", "(", ")", ",", "visible", "=", "False", ")", "\n", "plt", ".", "setp", "(", "ax", ".", "get_zticklabels", "(", ")", ",", "visible", "=", "False", ")", "\n", "\n", "ax", "=", "figure", ".", "add_subplot", "(", "133", ",", "projection", "=", "'3d'", ")", "\n", "ax", ".", "set_title", "(", "\"Projected by SpIN\"", ")", "\n", "X_projected_by_spin_0", "=", "X_projected_by_spin", "[", ":", ",", "0", "]", "if", "dataset", "==", "'two_moon'", "else", "X_projected_by_spin", "[", ":", ",", "0", "]", "\n", "X_projected_by_spin_1", "=", "-", "X_projected_by_spin", "[", ":", ",", "1", "]", "if", "dataset", "==", "'two_moon'", "else", "X_projected_by_spin", "[", ":", ",", "1", "]", "\n", "X_projected_by_spin_2", "=", "X_projected_by_spin", "[", ":", ",", "2", "]", "\n", "ax", ".", "scatter", "(", "X_projected_by_spin_0", ",", "X_projected_by_spin_1", ",", "X_projected_by_spin_2", ",", "c", "=", "y", ",", "cmap", "=", "cm_bright", ",", "\n", "edgecolors", "=", "'k'", ")", "\n", "ax", ".", "grid", "(", "True", ")", "\n", "plt", ".", "setp", "(", "ax", ".", "get_xticklabels", "(", ")", ",", "visible", "=", "False", ")", "\n", "plt", ".", "setp", "(", "ax", ".", "get_yticklabels", "(", ")", ",", "visible", "=", "False", ")", "\n", "plt", ".", "setp", "(", "ax", ".", "get_zticklabels", "(", ")", ",", "visible", "=", "False", ")", "\n", "\n", "figure", ".", "tight_layout", "(", ")", "\n", "figure", ".", "savefig", "(", "'nngp_plots/{}.pdf'", ".", "format", "(", "dataset", ")", ",", "format", "=", "'pdf'", ",", "dpi", "=", "1000", ",", "bbox_inches", "=", "'tight'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.neuralef-cifar-ntks.NeuralEigenFunctions.__init__": [[297, 325], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "neuralef-cifar-ntks.NeuralEigenFunctions.register_buffer", "neuralef-cifar-ntks.NeuralEigenFunctions.register_buffer", "hasattr", "neuralef-cifar-ntks.NeuralEigenFunctions.functions.append", "range", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "eval", "utils.ParallelMLP", "hasattr", "neuralef-cifar-ntks.NeuralEigenFunctions.functions.append", "utils.ParallelMLP", "eval"], "methods", ["home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.src.spin.SpectralNetwork.__init__"], ["\t", "def", "__init__", "(", "self", ",", "k", ",", "arch", ",", "in_planes", ",", "num_classes", ",", "no_bn", ",", "share", ",", "momentum", "=", "0.9", ",", "normalize_over", "=", "[", "0", "]", ")", ":", "\n", "\t\t", "super", "(", "NeuralEigenFunctions", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "k", "=", "k", "\n", "self", ".", "share", "=", "share", "\n", "self", ".", "momentum", "=", "momentum", "\n", "self", ".", "normalize_over", "=", "normalize_over", "\n", "self", ".", "functions", "=", "nn", ".", "ModuleList", "(", ")", "\n", "\n", "if", "share", ":", "\n", "\t\t\t", "function", "=", "eval", "(", "arch", ")", "(", "in_planes", ",", "1", ")", "\n", "if", "hasattr", "(", "function", ",", "'fc'", ")", ":", "\n", "\t\t\t\t", "fc", "=", "ParallelMLP", "(", "function", ".", "fc", ".", "in_features", ",", "num_classes", "if", "num_classes", "!=", "2", "else", "1", ",", "k", ",", "2", ")", "\n", "del", "function", ".", "fc", "\n", "function", ".", "fc", "=", "fc", "\n", "", "elif", "hasattr", "(", "function", ",", "'linear'", ")", ":", "\n", "\t\t\t\t", "linear", "=", "ParallelMLP", "(", "function", ".", "linear", ".", "in_features", ",", "num_classes", "if", "num_classes", "!=", "2", "else", "1", ",", "k", ",", "2", ")", "\n", "del", "function", ".", "linear", "\n", "function", ".", "linear", "=", "linear", "\n", "", "else", ":", "\n", "\t\t\t\t", "raise", "NotImplementedError", "\n", "", "self", ".", "functions", ".", "append", "(", "function", ")", "\n", "", "else", ":", "\n", "\t\t\t", "for", "i", "in", "range", "(", "k", ")", ":", "\n", "\t\t\t\t", "function", "=", "eval", "(", "arch", ")", "(", "in_planes", ",", "num_classes", "if", "num_classes", "!=", "2", "else", "1", ")", "\n", "self", ".", "functions", ".", "append", "(", "function", ")", "\n", "\n", "", "", "self", ".", "register_buffer", "(", "'eigennorm'", ",", "torch", ".", "zeros", "(", "k", ")", ")", "\n", "self", ".", "register_buffer", "(", "'num_calls'", ",", "torch", ".", "Tensor", "(", "[", "0", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.neuralef-cifar-ntks.NeuralEigenFunctions.forward": [[326, 342], ["torch.stack().flatten", "torch.stack().flatten", "torch.stack().flatten", "torch.stack().flatten", "torch.stack().flatten", "torch.stack().flatten", "torch.stack().flatten", "torch.stack().flatten", "torch.stack().flatten", "torch.stack().flatten", "torch.stack().flatten", "torch.stack().flatten", "torch.stack().flatten", "torch.stack().flatten", "torch.stack().flatten", "torch.stack().flatten", "torch.stack().flatten", "torch.stack().flatten", "torch.stack().flatten", "torch.stack().flatten", "torch.stack().flatten", "torch.stack().flatten", "torch.stack().flatten", "torch.stack().flatten", "torch.stack().flatten", "torch.stack().flatten", "torch.stack().flatten", "torch.stack().flatten", "torch.stack().flatten", "torch.stack().flatten", "torch.stack().flatten", "torch.stack().flatten", "torch.stack().flatten", "torch.stack().flatten", "torch.stack().flatten", "torch.stack().flatten", "torch.stack().flatten", "torch.stack().flatten", "torch.stack().flatten", "torch.stack().flatten", "torch.stack().flatten", "torch.stack().flatten", "torch.stack().flatten", "torch.stack().flatten", "torch.stack().flatten", "torch.stack().flatten", "torch.stack().flatten", "torch.stack().flatten", "torch.stack().flatten", "torch.stack().flatten.norm", "torch.stack().flatten.norm", "torch.stack().flatten.norm", "torch.stack().flatten.norm", "torch.stack().flatten.norm", "torch.stack().flatten.norm", "torch.stack().flatten.norm", "math.sqrt", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "numpy.prod", "neuralef-cifar-ntks.NeuralEigenFunctions.eigennorm.copy_", "neuralef-cifar-ntks.NeuralEigenFunctions.eigennorm.mul_().add_", "f", "neuralef-cifar-ntks.NeuralEigenFunctions.eigennorm.mul_"], "methods", ["home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.swag.flatten", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.swag.flatten", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.swag.flatten", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.swag.flatten", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.swag.flatten", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.swag.flatten", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.swag.flatten", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.swag.flatten", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.swag.flatten", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.swag.flatten", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.swag.flatten", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.swag.flatten", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.swag.flatten", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.swag.flatten", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.swag.flatten", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.swag.flatten", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.swag.flatten", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.swag.flatten", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.swag.flatten", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.swag.flatten", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.swag.flatten", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.swag.flatten", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.swag.flatten", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.swag.flatten", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.swag.flatten", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.swag.flatten", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.swag.flatten", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.swag.flatten", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.swag.flatten", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.swag.flatten", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.swag.flatten", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.swag.flatten", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.swag.flatten", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.swag.flatten", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.swag.flatten", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.swag.flatten", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.swag.flatten", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.swag.flatten", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.swag.flatten", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.swag.flatten", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.swag.flatten", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.swag.flatten", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.swag.flatten", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.swag.flatten", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.swag.flatten", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.swag.flatten", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.swag.flatten", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.swag.flatten", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.swag.flatten"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\t\t", "if", "self", ".", "share", ":", "\n", "\t\t\t", "ret_raw", "=", "self", ".", "functions", "[", "0", "]", "(", "x", ")", ".", "view", "(", "x", ".", "shape", "[", "0", "]", ",", "-", "1", ",", "self", ".", "k", ")", ".", "flatten", "(", "0", ",", "1", ")", "\n", "", "else", ":", "\n", "\t\t\t", "ret_raw", "=", "torch", ".", "stack", "(", "[", "f", "(", "x", ")", "for", "f", "in", "self", ".", "functions", "]", ",", "-", "1", ")", ".", "flatten", "(", "0", ",", "1", ")", "\n", "", "if", "self", ".", "training", ":", "\n", "\t\t\t", "norm_", "=", "ret_raw", ".", "norm", "(", "dim", "=", "self", ".", "normalize_over", ")", "/", "math", ".", "sqrt", "(", "np", ".", "prod", "(", "[", "ret_raw", ".", "shape", "[", "dim", "]", "for", "dim", "in", "self", ".", "normalize_over", "]", ")", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "\t\t\t\t", "if", "self", ".", "num_calls", "==", "0", ":", "\n", "\t\t\t\t\t", "self", ".", "eigennorm", ".", "copy_", "(", "norm_", ".", "data", ")", "\n", "", "else", ":", "\n", "\t\t\t\t\t", "self", ".", "eigennorm", ".", "mul_", "(", "self", ".", "momentum", ")", ".", "add_", "(", "norm_", ".", "data", ",", "alpha", "=", "1", "-", "self", ".", "momentum", ")", "\n", "", "self", ".", "num_calls", "+=", "1", "\n", "", "", "else", ":", "\n", "\t\t\t", "norm_", "=", "self", ".", "eigennorm", "\n", "", "return", "ret_raw", "/", "norm_", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.neuralef-cifar-ntks.main": [[112, 196], ["parser.parse_args", "os.path.join", "random.seed", "numpy.random.seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "neuralef-cifar-ntks.load_cifar", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "utils.fuse_bn_recursively.load_state_dict", "utils.fuse_bn_recursively", "sum", "print", "neuralef-cifar-ntks.validate", "neuralef-cifar-ntks.get_ground_truth_ntk", "neuralef-cifar-ntks.sample_from_ntk", "math.sqrt", "math.sqrt", "math.sqrt", "print", "print", "print", "print", "print", "NeuralEigenFunctions().cuda", "os.path.exists", "os.makedirs", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "list", "len", "list", "eval", "neuralef-cifar-ntks.finetune_binary_classifier", "utils.fuse_bn_recursively.cuda", "ground_truth_NTK[].data.numpy", "NeuralEigenFunctions().cuda.load_state_dict", "[].cuda", "neuralef-cifar-ntks.train_nef", "neuralef-cifar-ntks.clustering", "neuralef-cifar-ntks.ntkgp_validate", "range", "range", "p.numel", "torch.dist().item", "torch.dist().item", "torch.dist().item", "torch.dist().item", "torch.dist().item", "torch.dist().item", "torch.dist().item", "neuralef-cifar-ntks.NeuralEigenFunctions", "utils.fuse_bn_recursively.parameters", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.dist", "torch.dist", "torch.dist", "torch.dist", "torch.dist", "torch.dist", "torch.dist", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "math.sqrt"], "function", ["home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.utils.load_cifar", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.utils.fuse_bn_recursively", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.neuralef-cifar-sgd-trajectory.validate", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.neuralef-cifar-ntks.get_ground_truth_ntk", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.neuralef-cifar-ntks.sample_from_ntk", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.swag.SWAG.cuda", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.neuralef-cifar-ntks.finetune_binary_classifier", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.swag.SWAG.cuda", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.swag.SWAG.cuda", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.neuralef-cifar-sgd-trajectory.train_nef", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.neuralef-cifar-ntks.clustering", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.neuralef-cifar-ntks.ntkgp_validate"], ["def", "main", "(", ")", ":", "\n", "\t", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "args", ".", "save_dir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "save_dir", ",", "args", ".", "job_id", ")", "\n", "\n", "# Check the save_dir exists or not", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "args", ".", "save_dir", ")", ":", "\n", "\t\t", "os", ".", "makedirs", "(", "args", ".", "save_dir", ")", "\n", "\n", "", "random", ".", "seed", "(", "args", ".", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "args", ".", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "\t\t", "torch", ".", "cuda", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "args", ".", "seed", ")", "\n", "\n", "", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", "=", "True", "\n", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "False", "\n", "\n", "if", "args", ".", "classes", "is", "None", ":", "\n", "\t\t", "args", ".", "num_classes", "=", "10", "if", "args", ".", "dataset", "==", "'cifar10'", "else", "100", "\n", "args", ".", "classes", "=", "list", "(", "range", "(", "args", ".", "num_classes", ")", ")", "\n", "", "else", ":", "\n", "\t\t", "args", ".", "num_classes", "=", "len", "(", "args", ".", "classes", ")", "\n", "assert", "args", ".", "num_classes", "==", "2", "\n", "\n", "", "if", "args", ".", "ood_classes", "is", "None", ":", "\n", "\t\t", "args", ".", "ood_classes", "=", "list", "(", "range", "(", "10", "if", "args", ".", "dataset", "==", "'cifar10'", "else", "100", ")", ")", "\n", "\n", "", "train_loader", ",", "nef_train_loader", ",", "nef_train_val_loader", ",", "val_loader", ",", "val_loader_ood", "=", "load_cifar", "(", "args", ")", "\n", "\n", "classifier", "=", "eval", "(", "args", ".", "clf_arch", ")", "(", "args", ".", "clf_in_planes", ",", "10", "if", "args", ".", "dataset", "==", "'cifar10'", "else", "100", ")", "\n", "# load pre-trained ckpt", "\n", "checkpoint", "=", "torch", ".", "load", "(", "'snapshots/{}-cc-swalr0.1/checkpoint_150.th'", ".", "format", "(", "args", ".", "clf_arch", ")", ",", "map_location", "=", "'cpu'", ")", "\n", "classifier", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "\n", "if", "args", ".", "num_classes", "==", "2", ":", "\n", "\t\t", "finetune_binary_classifier", "(", "args", ",", "classifier", ",", "train_loader", ",", "val_loader", ")", "\n", "", "else", ":", "\n", "\t\t", "classifier", ".", "cuda", "(", ")", "\n", "\n", "", "classifier", "=", "fuse_bn_recursively", "(", "classifier", ")", "\n", "num_params", "=", "sum", "(", "p", ".", "numel", "(", ")", "for", "p", "in", "classifier", ".", "parameters", "(", ")", ")", "\n", "print", "(", "\"Number of parameters:\"", ",", "num_params", ")", "\n", "validate", "(", "args", ",", "val_loader", ",", "classifier", ")", "\n", "\n", "\n", "Jacobian", ",", "Jacobian_val", "=", "get_ground_truth_ntk", "(", "args", ",", "classifier", ",", "nef_train_val_loader", ",", "val_loader", ")", "\n", "\n", "NTK_samples", "=", "sample_from_ntk", "(", "args", ",", "classifier", ",", "nef_train_val_loader", ")", "\n", "\n", "scale_", "=", "(", "(", "NTK_samples", "/", "math", ".", "sqrt", "(", "args", ".", "num_samples", ")", ")", ".", "norm", "(", "dim", "=", "0", ")", "**", "2", ")", ".", "mean", "(", ")", ".", "item", "(", ")", "\n", "NTK_samples", "/=", "math", ".", "sqrt", "(", "scale_", ")", "\n", "Jacobian", "/=", "math", ".", "sqrt", "(", "scale_", ")", "\n", "Jacobian_val", "/=", "math", ".", "sqrt", "(", "scale_", ")", "\n", "\n", "ground_truth_NTK", ",", "ground_truth_NTK_val", "=", "Jacobian", "@", "Jacobian", ".", "T", ",", "Jacobian_val", "@", "Jacobian_val", ".", "T", "\n", "\n", "print", "(", "\"---------\"", ",", "'ground truth NTK on training data'", ",", "\"---------\"", ")", "\n", "print", "(", "ground_truth_NTK", "[", ":", "10", ",", ":", "10", "]", ".", "data", ".", "numpy", "(", ")", ")", "\n", "print", "(", "\"---------\"", ",", "'NTK estimated by sampling on training data'", ",", "\"---------\"", ")", "\n", "print", "(", "(", "NTK_samples", "[", ":", ",", ":", "10", "]", ".", "T", "@", "NTK_samples", "[", ":", ",", ":", "10", "]", "/", "args", ".", "num_samples", ")", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "\n", "print", "(", "'Distance between gd NTK and estimated NTK: noise {}, eps {}, scale {}, dist {}'", ".", "format", "(", "\n", "args", ".", "random_dist_type", ",", "args", ".", "epsilon", ",", "scale_", ",", "\n", "torch", ".", "dist", "(", "ground_truth_NTK", "[", ":", "100", ",", ":", "100", "]", ",", "\n", "NTK_samples", "[", ":", ",", ":", "100", "]", ".", "T", "@", "NTK_samples", "[", ":", ",", ":", "100", "]", "/", "args", ".", "num_samples", ")", ".", "item", "(", ")", ")", ")", "\n", "\n", "nef", "=", "NeuralEigenFunctions", "(", "args", ".", "nef_k", ",", "args", ".", "nef_arch", ",", "args", ".", "nef_in_planes", ",", "args", ".", "num_classes", ",", "args", ".", "nef_no_bn", ",", "args", ".", "nef_share", ")", ".", "cuda", "(", ")", "\n", "\n", "if", "args", ".", "nef_resume", ":", "\n", "\t\t", "nef", ".", "load_state_dict", "(", "torch", ".", "load", "(", "args", ".", "nef_resume", ",", "map_location", "=", "'cpu'", ")", "[", "'state_dict'", "]", ")", "\n", "eigenvalues", "=", "torch", ".", "load", "(", "args", ".", "nef_resume", ",", "map_location", "=", "'cpu'", ")", "[", "'eigenvalues'", "]", ".", "cuda", "(", ")", "\n", "", "else", ":", "\n", "\t\t", "eigenvalues", "=", "train_nef", "(", "\n", "args", ",", "nef", ",", "NTK_samples", ",", "nef_train_loader", ",", "\n", "args", ".", "nef_k", ",", "args", ".", "nef_epochs", ",", "args", ".", "nef_optimizer_type", ",", "\n", "args", ".", "nef_lr", ",", "args", ".", "nef_momentum", ",", "\n", "args", ".", "nef_amp", ",", "\n", "nef_train_val_loader", ",", "val_loader", ",", "ground_truth_NTK_val", ")", "\n", "\n", "", "if", "args", ".", "num_classes", "==", "2", ":", "\n", "\t\t", "clustering", "(", "args", ",", "classifier", ",", "nef", ",", "eigenvalues", ",", "val_loader", ",", "val_loader_ood", ",", "NTK_samples_val", ",", "val_proj_nystrom", ")", "\n", "", "else", ":", "\n", "\t\t", "ntkgp_validate", "(", "args", ",", "classifier", ",", "nef", ",", "eigenvalues", ",", "nef_train_loader", ",", "val_loader", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.neuralef-cifar-ntks.train_nef": [[197, 295], ["print", "torch.optim.lr_scheduler.CosineAnnealingLR", "tqdm.tqdm", "print", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.cuda.amp.GradScaler", "torch.cuda.amp.GradScaler", "torch.cuda.amp.GradScaler", "torch.cuda.amp.GradScaler", "torch.cuda.amp.GradScaler", "torch.cuda.amp.GradScaler", "torch.cuda.amp.GradScaler", "os.path.isfile", "range", "nef.train", "enumerate", "torch.optim.lr_scheduler.CosineAnnealingLR.step", "nef.eval", "checkpoint[].cuda.data.cpu().numpy", "nef.parameters", "torch.optim.RMSprop", "torch.optim.RMSprop", "torch.optim.RMSprop", "torch.optim.RMSprop", "torch.optim.RMSprop", "torch.optim.RMSprop", "torch.optim.RMSprop", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "print", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "nef.load_state_dict", "torch.optim.SGD.load_state_dict", "checkpoint[].cuda", "print", "print", "[].flatten().cuda", "torch.optim.SGD.zero_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.dist", "torch.dist", "torch.dist", "torch.dist", "torch.dist", "torch.dist", "torch.dist", "torch.dist", "torch.dist", "torch.dist", "torch.dist", "torch.dist", "torch.dist", "torch.dist", "print", "print", "nef.state_dict", "torch.optim.SGD.state_dict", "checkpoint[].cuda.data.cpu", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "nef.parameters", "nef.parameters", "torch.cuda.amp.GradScaler.load_state_dict", "amp_autocast", "nef", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "psis_K_psis.diag", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.cuda.amp.GradScaler.scale().backward", "torch.cuda.amp.GradScaler.step", "torch.cuda.amp.GradScaler.update", "nef.backward", "torch.optim.SGD.step", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "checkpoint[].cuda.sqrt", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "checkpoint[].cuda.sqrt", "eigenvalues[].data.cpu().numpy", "torch.cat().data.cpu().numpy", "torch.cat().data.cpu().numpy", "torch.cat().data.cpu().numpy", "torch.cat().data.cpu().numpy", "torch.cat().data.cpu().numpy", "torch.cat().data.cpu().numpy", "torch.cat().data.cpu().numpy", "torch.cuda.amp.GradScaler.state_dict", "os.path.join", "checkpoint[].cuda.data.cpu", "[].flatten", "data.cuda", "checkpoint[].cuda.mul_().add_", "torch.cuda.amp.GradScaler.scale", "nef", "nef", "eigenvalues[].data.cpu", "torch.cat().data.cpu", "torch.cat().data.cpu", "torch.cat().data.cpu", "torch.cat().data.cpu", "torch.cat().data.cpu", "torch.cat().data.cpu", "torch.cat().data.cpu", "checkpoint[].cuda.mul_", "data.cuda", "data.cuda", "collected_samples.view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "function", ["home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.examples.hydrogen.train", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.swag.SWAG.cuda", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.swag.SWAG.cuda", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.swag.flatten", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.swag.SWAG.cuda", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.swag.SWAG.cuda", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.swag.SWAG.cuda"], ["", "", "def", "train_nef", "(", "args", ",", "nef", ",", "collected_samples", ",", "train_loader", ",", "\n", "k", ",", "epochs", ",", "optimizer_type", ",", "lr", ",", "\n", "momentum", ",", "\n", "amp", ",", "nef_train_val_loader", ",", "val_loader", ",", "ground_truth_NTK_val", ")", ":", "\n", "\n", "\t", "num_samples", "=", "collected_samples", ".", "shape", "[", "0", "]", "\n", "print", "(", "collected_samples", ".", "shape", ")", "# 4000*(50000*num_classes)", "\n", "\n", "if", "optimizer_type", "==", "'Adam'", ":", "\n", "\t\t", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "nef", ".", "parameters", "(", ")", ",", "lr", "=", "lr", ")", "\n", "", "elif", "optimizer_type", "==", "'RMSprop'", ":", "\n", "\t\t", "optimizer", "=", "torch", ".", "optim", ".", "RMSprop", "(", "nef", ".", "parameters", "(", ")", ",", "lr", "=", "lr", ",", "momentum", "=", "momentum", ")", "\n", "", "else", ":", "\n", "\t\t", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "nef", ".", "parameters", "(", ")", ",", "lr", "=", "lr", ",", "momentum", "=", "momentum", ")", "\n", "\n", "", "if", "amp", ":", "\n", "\t\t", "amp_autocast", "=", "torch", ".", "cuda", ".", "amp", ".", "autocast", "\n", "loss_scaler", "=", "torch", ".", "cuda", ".", "amp", ".", "GradScaler", "(", ")", "\n", "", "else", ":", "\n", "\t\t", "amp_autocast", "=", "suppress", "# do nothing", "\n", "loss_scaler", "=", "None", "\n", "\n", "", "eigenvalues", "=", "None", "\n", "start_epoch", "=", "0", "\n", "if", "args", ".", "nef_resume", ":", "\n", "\t\t", "if", "os", ".", "path", ".", "isfile", "(", "args", ".", "nef_resume", ")", ":", "\n", "\t\t\t", "print", "(", "\"=> loading checkpoint '{}'\"", ".", "format", "(", "args", ".", "nef_resume", ")", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "args", ".", "nef_resume", ",", "map_location", "=", "'cpu'", ")", "\n", "start_epoch", "=", "checkpoint", "[", "'epoch'", "]", "\n", "nef", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "optimizer", ".", "load_state_dict", "(", "checkpoint", "[", "'optimizer'", "]", ")", "\n", "if", "loss_scaler", "is", "not", "None", ":", "\n", "\t\t\t\t", "loss_scaler", ".", "load_state_dict", "(", "checkpoint", "[", "'loss_scaler'", "]", ")", "\n", "", "eigenvalues", "=", "checkpoint", "[", "'eigenvalues'", "]", ".", "cuda", "(", ")", "\n", "print", "(", "\"=> loaded checkpoint '{}' (epoch {})\"", "\n", ".", "format", "(", "args", ".", "nef_resume", ",", "checkpoint", "[", "'epoch'", "]", ")", ")", "\n", "", "else", ":", "\n", "\t\t\t", "print", "(", "\"=> no checkpoint found at '{}'\"", ".", "format", "(", "args", ".", "nef_resume", ")", ")", "\n", "", "", "scheduler", "=", "CosineAnnealingLR", "(", "optimizer", ",", "epochs", ",", "last_epoch", "=", "start_epoch", "-", "1", ")", "\n", "\n", "for", "epoch", "in", "tqdm", "(", "range", "(", "start_epoch", ",", "epochs", ")", ",", "desc", "=", "\"Training NEF\"", ")", ":", "\n", "\t\t", "nef", ".", "train", "(", ")", "\n", "for", "i", ",", "(", "data", ",", "_", ",", "indices", ")", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "\n", "\t\t\t", "samples_batch", "=", "collected_samples", ".", "view", "(", "num_samples", ",", "-", "1", ",", "\n", "args", ".", "num_classes", "if", "args", ".", "num_classes", "!=", "2", "else", "1", ")", "[", ":", ",", "indices", "]", ".", "flatten", "(", "1", ")", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "with", "amp_autocast", "(", ")", ":", "\n", "\t\t\t\t", "psis_X", "=", "nef", "(", "data", ".", "cuda", "(", ")", ")", "\n", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "\t\t\t\t", "samples_batch_psis", "=", "samples_batch", "@", "psis_X", "\n", "psis_K_psis", "=", "samples_batch_psis", ".", "T", "@", "samples_batch_psis", "/", "num_samples", "\n", "\n", "cur_eigenvalues", "=", "psis_K_psis", ".", "diag", "(", ")", "\n", "mask", "=", "-", "(", "psis_K_psis", "/", "cur_eigenvalues", ")", ".", "tril", "(", "diagonal", "=", "-", "1", ")", ".", "T", "\n", "mask", "+=", "torch", ".", "eye", "(", "k", ",", "device", "=", "psis_X", ".", "device", ")", "\n", "mask", "/=", "num_samples", "\n", "grad", "=", "samples_batch", ".", "T", "@", "(", "samples_batch_psis", "@", "mask", ")", "\n", "\n", "cur_eigenvalues", "/=", "samples_batch", ".", "shape", "[", "1", "]", "**", "2", "\n", "if", "eigenvalues", "is", "None", ":", "\n", "\t\t\t\t\t", "eigenvalues", "=", "cur_eigenvalues", "\n", "", "else", ":", "\n", "\t\t\t\t\t", "eigenvalues", ".", "mul_", "(", "0.9", ")", ".", "add_", "(", "cur_eigenvalues", ",", "alpha", "=", "0.1", ")", "\n", "\n", "", "", "optimizer", ".", "zero_grad", "(", ")", "\n", "if", "loss_scaler", "is", "not", "None", ":", "\n", "\t\t\t\t", "loss_scaler", ".", "scale", "(", "psis_X", ")", ".", "backward", "(", "-", "grad", ")", "\n", "loss_scaler", ".", "step", "(", "optimizer", ")", "\n", "loss_scaler", ".", "update", "(", ")", "\n", "", "else", ":", "\n", "\t\t\t\t", "psis_X", ".", "backward", "(", "-", "grad", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "", "", "scheduler", ".", "step", "(", ")", "\n", "nef", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "\t\t\t", "nef_output", "=", "torch", ".", "cat", "(", "[", "nef", "(", "data", ".", "cuda", "(", ")", ")", "for", "(", "data", ",", "_", ")", "in", "nef_train_val_loader", "]", ")", "*", "eigenvalues", ".", "sqrt", "(", ")", "\n", "NTK_train_our", "=", "(", "nef_output", "[", ":", "ground_truth_NTK_val", ".", "shape", "[", "0", "]", "]", "@", "nef_output", "[", ":", "ground_truth_NTK_val", ".", "shape", "[", "0", "]", "]", ".", "T", ")", ".", "cpu", "(", ")", "\n", "nef_output", "=", "torch", ".", "cat", "(", "[", "nef", "(", "data", ".", "cuda", "(", ")", ")", "for", "(", "data", ",", "_", ")", "in", "val_loader", "]", ")", "*", "eigenvalues", ".", "sqrt", "(", ")", "\n", "NTK_val_our", "=", "(", "nef_output", "[", ":", "ground_truth_NTK_val", ".", "shape", "[", "0", "]", "]", "@", "nef_output", "[", ":", "ground_truth_NTK_val", ".", "shape", "[", "0", "]", "]", ".", "T", ")", ".", "cpu", "(", ")", "\n", "dist_train", "=", "torch", ".", "dist", "(", "collected_samples", "[", ":", ",", ":", "100", "]", ".", "T", "@", "collected_samples", "[", ":", ",", ":", "100", "]", "/", "num_samples", ",", "NTK_train_our", "[", ":", "100", ",", ":", "100", "]", ")", "\n", "dist_val", "=", "torch", ".", "dist", "(", "ground_truth_NTK_val", "[", ":", "100", ",", ":", "100", "]", ",", "NTK_val_our", "[", ":", "100", ",", ":", "100", "]", ")", "\n", "print", "(", "eigenvalues", "[", ":", "10", "]", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "dist_train", ",", "dist_val", ")", "\n", "print", "(", "torch", ".", "cat", "(", "[", "collected_samples", "[", ":", ",", ":", "3", "]", ".", "T", "@", "collected_samples", "[", ":", ",", ":", "3", "]", "/", "num_samples", ",", "NTK_train_our", "[", ":", "3", ",", ":", "3", "]", ",", "\n", "ground_truth_NTK_val", "[", ":", "3", ",", ":", "3", "]", ",", "NTK_val_our", "[", ":", "3", ",", ":", "3", "]", "]", ",", "-", "1", ")", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "\n", "", "if", "epoch", "%", "10", "==", "0", "or", "epoch", "==", "epochs", "-", "1", ":", "\n", "\t\t\t", "ckpt", "=", "{", "'epoch'", ":", "epoch", "+", "1", "}", "\n", "ckpt", "[", "'state_dict'", "]", "=", "nef", ".", "state_dict", "(", ")", "\n", "ckpt", "[", "'optimizer'", "]", "=", "optimizer", ".", "state_dict", "(", ")", "\n", "if", "loss_scaler", "is", "not", "None", ":", "\n", "\t\t\t\t", "ckpt", "[", "'loss_scaler'", "]", "=", "loss_scaler", ".", "state_dict", "(", ")", "\n", "", "ckpt", "[", "'eigenvalues'", "]", "=", "eigenvalues", ".", "data", ".", "cpu", "(", ")", "\n", "torch", ".", "save", "(", "ckpt", ",", "os", ".", "path", ".", "join", "(", "args", ".", "save_dir", ",", "\n", "'nef_checkpoint_{}.th'", ".", "format", "(", "epoch", ")", ")", ")", "\n", "", "", "print", "(", "'\\tEigenvalues estimated by ours:'", ",", "eigenvalues", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "return", "eigenvalues", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.neuralef-cifar-ntks.sample_from_ntk": [[343, 369], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "neuralef-cifar-ntks.logit", "copy.deepcopy", "os.path.exists", "torch.stack.flatten", "os.path.join", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "tqdm.tqdm", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "numpy.savez_compressed", "images.cuda", "numpy.load", "range", "zip", "neuralef-cifar-ntks.logit", "torch.stack.append", "os.path.join", "torch.stack.data.numpy", "os.path.join", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "copy.deepcopy.parameters", "model.parameters", "p.data.copy_().add_", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "p.data.copy_", "torch.randn_like().sign", "torch.randn_like().sign", "torch.randn_like().sign", "torch.randn_like().sign", "torch.randn_like().sign", "torch.randn_like().sign", "torch.randn_like().sign", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like"], "function", ["home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.neuralef-cifar-ntks.logit", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.swag.flatten", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.swag.SWAG.cuda", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.neuralef-cifar-ntks.logit"], ["", "", "def", "sample_from_ntk", "(", "args", ",", "model", ",", "train_loader", ")", ":", "\n", "\t", "all_images", "=", "torch", ".", "cat", "(", "[", "images", ".", "cuda", "(", "non_blocking", "=", "True", ")", "for", "images", ",", "_", "in", "train_loader", "]", ")", "\n", "logits", "=", "logit", "(", "all_images", ",", "model", ",", "args", ")", "\n", "new_model", "=", "copy", ".", "deepcopy", "(", "model", ")", "\n", "\n", "if", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "args", ".", "save_dir", ",", "'collected_samples.npz'", ")", ")", ":", "\n", "\t\t", "NTK_samples", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "args", ".", "save_dir", ",", "'collected_samples.npz'", ")", ")", "[", "'arr_0'", "]", "\n", "NTK_samples", "=", "torch", ".", "from_numpy", "(", "NTK_samples", ")", ".", "float", "(", ")", "\n", "", "else", ":", "\n", "\t\t", "NTK_samples", "=", "[", "]", "\n", "for", "i", "in", "tqdm", "(", "range", "(", "args", ".", "num_samples", ")", ",", "\n", "desc", "=", "'Sampling from the NTK kernel'", ")", ":", "\n", "\t\t\t", "for", "p", ",", "p_", "in", "zip", "(", "new_model", ".", "parameters", "(", ")", ",", "model", ".", "parameters", "(", ")", ")", ":", "\n", "\t\t\t\t", "if", "args", ".", "random_dist_type", "==", "'normal'", ":", "\n", "\t\t\t\t\t", "perturbation", "=", "torch", ".", "randn_like", "(", "p", ")", "*", "args", ".", "epsilon", "#/ math.sqrt(num_params)", "\n", "", "elif", "args", ".", "random_dist_type", "==", "'rademacher'", ":", "\n", "\t\t\t\t\t", "perturbation", "=", "torch", ".", "randn_like", "(", "p", ")", ".", "sign", "(", ")", "*", "args", ".", "epsilon", "#/ math.sqrt(num_params)", "\n", "", "else", ":", "\n", "\t\t\t\t\t", "raise", "NotImplementedError", "\n", "", "p", ".", "data", ".", "copy_", "(", "p_", ".", "data", ")", ".", "add_", "(", "perturbation", ")", "\n", "", "new_logits", "=", "logit", "(", "all_images", ",", "new_model", ",", "args", ")", "\n", "NTK_samples", ".", "append", "(", "(", "(", "new_logits", "-", "logits", ")", "/", "args", ".", "epsilon", ")", ".", "cpu", "(", ")", ")", "\n", "", "NTK_samples", "=", "torch", ".", "stack", "(", "NTK_samples", ",", "0", ")", "\n", "np", ".", "savez_compressed", "(", "os", ".", "path", ".", "join", "(", "args", ".", "save_dir", ",", "'collected_samples'", ")", ",", "\n", "NTK_samples", ".", "data", ".", "numpy", "(", ")", ")", "\n", "", "return", "NTK_samples", ".", "flatten", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.neuralef-cifar-ntks.get_ground_truth_ntk": [[370, 403], ["backpack.extend", "tqdm.tqdm", "tqdm.tqdm", "copy.deepcopy", "images.cuda.cuda", "range", "Jacobian.append", "images.cuda.cuda", "range", "Jacobian_val.append", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "Jacobian.flatten", "Jacobian_val.flatten", "backpack.extend.", "backpack.extend.zero_grad", "Jacobian_batch.append", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "backpack.extend.", "backpack.extend.zero_grad", "Jacobian_batch.append", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "len", "backpack.backpack", "output[].sum().backward", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "backpack.backpack", "output[].sum().backward", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "backpack.extensions.BatchGrad", "backpack.extensions.BatchGrad", "output[].sum", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "output[].sum", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "p.grad_batch.flatten", "p.grad_batch.flatten", "backpack.extend.parameters", "backpack.extend.parameters"], "function", ["home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.swag.SWAG.cuda", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.swag.SWAG.cuda", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.swag.flatten", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.swag.flatten", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.swag.flatten", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.swag.flatten"], ["", "def", "get_ground_truth_ntk", "(", "args", ",", "classifier", ",", "train_loader", ",", "val_loader", ")", ":", "\n", "\t", "bp_model", "=", "extend", "(", "copy", ".", "deepcopy", "(", "classifier", ")", ")", "\n", "Jacobian", ",", "Jacobian_val", "=", "[", "]", ",", "[", "]", "\n", "for", "(", "images", ",", "_", ")", "in", "tqdm", "(", "train_loader", ",", "desc", "=", "'Calc Jacobian for training data'", ")", ":", "\n", "\t\t", "images", "=", "images", ".", "cuda", "(", ")", "\n", "Jacobian_batch", "=", "[", "]", "\n", "for", "k", "in", "range", "(", "args", ".", "num_classes", "if", "args", ".", "num_classes", "!=", "2", "else", "1", ")", ":", "\n", "\t\t\t", "output", "=", "bp_model", "(", "images", ")", "\n", "bp_model", ".", "zero_grad", "(", ")", "\n", "with", "backpack", "(", "BatchGrad", "(", ")", ")", ":", "\n", "\t\t\t\t", "output", "[", ":", ",", "k", "]", ".", "sum", "(", ")", ".", "backward", "(", ")", "\n", "", "Jacobian_batch", ".", "append", "(", "torch", ".", "cat", "(", "[", "p", ".", "grad_batch", ".", "flatten", "(", "1", ")", "for", "p", "in", "bp_model", ".", "parameters", "(", ")", "]", ",", "-", "1", ")", ".", "cpu", "(", ")", ")", "\n", "", "Jacobian", ".", "append", "(", "torch", ".", "stack", "(", "Jacobian_batch", ",", "1", ")", ")", "\n", "# if len(Jacobian) == 20:", "\n", "# \tbreak", "\n", "\n", "", "for", "(", "images", ",", "_", ")", "in", "tqdm", "(", "val_loader", ",", "desc", "=", "'Calc Jacobian for validation data'", ")", ":", "\n", "\t\t", "images", "=", "images", ".", "cuda", "(", ")", "\n", "Jacobian_batch", "=", "[", "]", "\n", "for", "k", "in", "range", "(", "args", ".", "num_classes", "if", "args", ".", "num_classes", "!=", "2", "else", "1", ")", ":", "\n", "\t\t\t", "output", "=", "bp_model", "(", "images", ")", "\n", "bp_model", ".", "zero_grad", "(", ")", "\n", "with", "backpack", "(", "BatchGrad", "(", ")", ")", ":", "\n", "\t\t\t\t", "output", "[", ":", ",", "k", "]", ".", "sum", "(", ")", ".", "backward", "(", ")", "\n", "", "Jacobian_batch", ".", "append", "(", "torch", ".", "cat", "(", "[", "p", ".", "grad_batch", ".", "flatten", "(", "1", ")", "for", "p", "in", "bp_model", ".", "parameters", "(", ")", "]", ",", "-", "1", ")", ".", "cpu", "(", ")", ")", "\n", "", "Jacobian_val", ".", "append", "(", "torch", ".", "stack", "(", "Jacobian_batch", ",", "1", ")", ")", "\n", "if", "len", "(", "Jacobian_val", ")", "==", "20", ":", "\n", "\t\t\t", "break", "\n", "", "", "Jacobian", ",", "Jacobian_val", "=", "torch", ".", "cat", "(", "Jacobian", ")", ",", "torch", ".", "cat", "(", "Jacobian_val", ")", "#/math.sqrt(num_params) /math.sqrt(num_params)", "\n", "if", "args", ".", "num_classes", "==", "10", ":", "\n", "\t\t", "Jacobian", "=", "Jacobian", "[", ":", "100", "]", "\n", "Jacobian_val", "=", "Jacobian_val", "[", ":", "100", "]", "\n", "", "return", "Jacobian", ".", "flatten", "(", "0", ",", "1", ")", ",", "Jacobian_val", ".", "flatten", "(", "0", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.neuralef-cifar-ntks.clustering": [[404, 432], ["nef.eval", "classifier.eval", "sklearn.cluster.KMeans().fit_predict", "neuralef-cifar-ntks.assignment2pred", "print", "sklearn.cluster.KMeans().fit_predict", "neuralef-cifar-ntks.assignment2pred", "print", "sklearn.cluster.KMeans().fit_predict", "neuralef-cifar-ntks.assignment2pred", "print", "sklearn.cluster.KMeans().fit_predict", "neuralef-cifar-ntks.assignment2pred", "print", "sklearn.cluster.KMeans().fit_predict", "neuralef-cifar-ntks.assignment2pred", "print", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "len", "len", "len", "val_proj_nystrom.data.cpu().numpy", "len", "len", "sklearn.cluster.KMeans", "sklearn.cluster.KMeans", "sklearn.cluster.KMeans", "sklearn.cluster.KMeans", "sklearn.cluster.KMeans", "data.flatten", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "len", "len", "len", "len", "val_proj_nystrom.data.cpu", "len", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "eigenvalues.sqrt().cpu", "classifier", "data.cuda", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "eigenvalues.sqrt", "torch.cat.numpy", "torch.cat.numpy", "torch.cat.numpy", "torch.cat.numpy", "torch.cat.numpy", "nef", "data.cuda"], "function", ["home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.neuralef-cifar-ntks.assignment2pred", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.neuralef-cifar-ntks.assignment2pred", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.neuralef-cifar-ntks.assignment2pred", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.neuralef-cifar-ntks.assignment2pred", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.neuralef-cifar-ntks.assignment2pred", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.swag.flatten", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.swag.SWAG.cuda", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.swag.SWAG.cuda"], ["", "def", "clustering", "(", "args", ",", "classifier", ",", "nef", ",", "eigenvalues", ",", "val_loader", ",", "val_loader_ood", ",", "NTK_samples_val", ",", "val_proj_nystrom", ")", ":", "\n", "\t", "nef", ".", "eval", "(", ")", "\n", "classifier", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "\t\t", "val_data", "=", "torch", ".", "cat", "(", "[", "data", ".", "flatten", "(", "1", ")", "for", "(", "data", ",", "_", ")", "in", "val_loader", "]", ")", "\n", "val_clf_features", "=", "torch", ".", "cat", "(", "[", "classifier", "(", "data", ".", "cuda", "(", ")", ",", "True", ")", "for", "(", "data", ",", "_", ")", "in", "val_loader", "]", ")", ".", "cpu", "(", ")", "\n", "val_eigen_projections", "=", "(", "torch", ".", "cat", "(", "[", "nef", "(", "data", ".", "cuda", "(", ")", ")", "for", "(", "data", ",", "_", ")", "in", "val_loader", "]", ")", ".", "cpu", "(", ")", "*", "eigenvalues", ".", "sqrt", "(", ")", ".", "cpu", "(", ")", ")", ".", "view", "(", "val_data", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "val_labels", "=", "torch", ".", "cat", "(", "[", "label", "for", "(", "_", ",", "label", ")", "in", "val_loader", "]", ")", "\n", "\n", "", "assignment", "=", "KMeans", "(", "len", "(", "args", ".", "classes", ")", ")", ".", "fit_predict", "(", "val_data", ")", "\n", "preds", "=", "assignment2pred", "(", "assignment", ",", "val_labels", ",", "len", "(", "args", ".", "classes", ")", ")", "\n", "print", "(", "\"Clustering acc on in-dis. validation data\"", ",", "(", "preds", "==", "val_labels", ".", "numpy", "(", ")", ")", ".", "astype", "(", "np", ".", "float32", ")", ".", "mean", "(", ")", ")", "\n", "\n", "assignment", "=", "KMeans", "(", "len", "(", "args", ".", "classes", ")", ")", ".", "fit_predict", "(", "val_clf_features", ")", "\n", "preds", "=", "assignment2pred", "(", "assignment", ",", "val_labels", ",", "len", "(", "args", ".", "classes", ")", ")", "\n", "print", "(", "\"Clustering acc given clf features on in-dis. validation data\"", ",", "(", "preds", "==", "val_labels", ".", "numpy", "(", ")", ")", ".", "astype", "(", "np", ".", "float32", ")", ".", "mean", "(", ")", ")", "\n", "\n", "assignment", "=", "KMeans", "(", "len", "(", "args", ".", "classes", ")", ")", ".", "fit_predict", "(", "val_eigen_projections", ")", "\n", "preds", "=", "assignment2pred", "(", "assignment", ",", "val_labels", ",", "len", "(", "args", ".", "classes", ")", ")", "\n", "print", "(", "\"Clustering acc given eigen projections on in-dis. validation data\"", ",", "(", "preds", "==", "val_labels", ".", "numpy", "(", ")", ")", ".", "astype", "(", "np", ".", "float32", ")", ".", "mean", "(", ")", ")", "\n", "\n", "assignment", "=", "KMeans", "(", "len", "(", "args", ".", "classes", ")", ")", ".", "fit_predict", "(", "val_proj_nystrom", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "preds", "=", "assignment2pred", "(", "assignment", ",", "val_labels", ",", "len", "(", "args", ".", "classes", ")", ")", "\n", "print", "(", "\"Clustering acc given eigen projections on in-dis. validation data (the nystrom method)\"", ",", "(", "preds", "==", "val_labels", ".", "numpy", "(", ")", ")", ".", "astype", "(", "np", ".", "float32", ")", ".", "mean", "(", ")", ")", "\n", "\n", "assignment", "=", "KMeans", "(", "len", "(", "args", ".", "classes", ")", ")", ".", "fit_predict", "(", "NTK_samples_val", "[", ":", "10", "]", ".", "T", ")", "\n", "preds", "=", "assignment2pred", "(", "assignment", ",", "val_labels", ",", "len", "(", "args", ".", "classes", ")", ")", "\n", "print", "(", "\"Clustering acc given random features on in-dis. validation data\"", ",", "(", "preds", "==", "val_labels", ".", "numpy", "(", ")", ")", ".", "astype", "(", "np", ".", "float32", ")", ".", "mean", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.neuralef-cifar-ntks.ntkgp_validate": [[434, 540], ["nef.eval", "classifier.eval", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "uncs[].min", "len", "len", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "utils._ECELoss().cuda", "_ECELoss().cuda.item", "_ECELoss().cuda.item", "print", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "uncs_ood[].min", "utils.binary_classification_given_uncertainty", "utils.binary_classification_given_uncertainty", "utils.binary_classification_given_uncertainty", "utils.binary_classification_given_uncertainty", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "torch.zeros().cuda.diagonal().add_", "torch.zeros().cuda.inverse", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "float", "len", "float", "len", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torchvision.datasets.SVHN", "torchvision.datasets.SVHN", "torchvision.datasets.SVHN", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "x.cuda.cuda", "classifier", "classifier.softmax", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "labels.append", "classifier", "classifier.softmax", "probs.append", "F_samples.softmax().mean.argmax().eq().sum().item", "ents.append", "confs.append", "F_samples.softmax().mean", "probs_ntkunc.append", "F_samples.softmax().mean.argmax().eq().sum().item", "uncs.append", "uconfs.append", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "utils._ECELoss", "_ECELoss().cuda.", "_ECELoss().cuda.", "x.cuda.cuda", "classifier", "classifier.softmax", "ents_ood.append", "confs_ood.append", "F_samples.softmax().mean", "uncs_ood.append", "uconfs_ood.append", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "F_samples.softmax().mean.diag_embed", "nef().view", "eigenvalues.sqrt", "torch.zeros().cuda.diagonal", "x.cuda.cuda", "y.cuda", "torch.cross_entropy().item", "y.size", "neuralef-cifar-ntks.ent", "nef().view", "eigenvalues.sqrt", "E.permute", "torch.cross_entropy().item", "y.size", "neuralef-cifar-ntks.ent", "torchvision.Compose", "neuralef-cifar-ntks.ent", "nef().view", "eigenvalues.sqrt", "E.permute", "neuralef-cifar-ntks.ent", "F_samples.softmax().mean.argmax().eq().sum", "F_samples.softmax().mean.max", "EXT_LambdaX_EX.inverse.unsqueeze", "F_samples.softmax", "F_samples.softmax().mean.argmax().eq().sum", "F_samples.softmax().mean.max", "F_samples.softmax().mean.max", "F_samples.softmax", "F_samples.softmax().mean.max", "nef", "torch.cross_entropy", "nef", "torch.cross_entropy", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torchvision.ToTensor", "torchvision.Normalize", "nef", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "F_samples.softmax().mean.log", "F_samples.softmax().mean.argmax().eq", "F_samples.softmax().mean.log", "F_samples.softmax().mean.argmax().eq", "utils.psd_safe_cholesky", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "utils.psd_safe_cholesky", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "F_samples.softmax().mean.argmax", "F_samples.softmax().mean.argmax"], "function", ["home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.swag.SWAG.cuda", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.swag.SWAG.cuda", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.swag.SWAG.cuda", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.swag.SWAG.cuda", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.swag.SWAG.cuda", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.swag.SWAG.cuda", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.swag.SWAG.cuda", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.swag.SWAG.cuda", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.utils.binary_classification_given_uncertainty", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.utils.binary_classification_given_uncertainty", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.utils.binary_classification_given_uncertainty", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.utils.binary_classification_given_uncertainty", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.swag.SWAG.cuda", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.swag.SWAG.cuda", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.swag.SWAG.cuda", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.swag.SWAG.cuda", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.neuralef-cifar-sgd-trajectory.ent", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.neuralef-cifar-sgd-trajectory.ent", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.neuralef-cifar-sgd-trajectory.ent", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.neuralef-cifar-sgd-trajectory.ent", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.utils.psd_safe_cholesky", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.utils.psd_safe_cholesky"], ["", "def", "ntkgp_validate", "(", "args", ",", "classifier", ",", "nef", ",", "eigenvalues", ",", "nef_train_loader", ",", "val_loader", ")", ":", "\n", "\t", "nef", ".", "eval", "(", ")", "\n", "classifier", ".", "eval", "(", ")", "\n", "\n", "EXT_LambdaX_EX", "=", "torch", ".", "zeros", "(", "args", ".", "nef_k", ",", "args", ".", "nef_k", ")", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "\t\t", "for", "i", ",", "(", "x", ",", "_", ",", "_", ")", "in", "enumerate", "(", "nef_train_loader", ")", ":", "\n", "\t\t\t", "x", "=", "x", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "output", "=", "classifier", "(", "x", ")", "\n", "prob", "=", "output", ".", "softmax", "(", "-", "1", ")", "\n", "Lamdba", "=", "prob", ".", "diag_embed", "(", ")", "-", "prob", "[", ":", ",", ":", ",", "None", "]", "*", "prob", "[", ":", ",", "None", ",", ":", "]", "\n", "# print(Lamdba[0])", "\n", "E", "=", "nef", "(", "x", ")", ".", "view", "(", "x", ".", "shape", "[", "0", "]", ",", "-", "1", ",", "args", ".", "nef_k", ")", "*", "eigenvalues", ".", "sqrt", "(", ")", "\n", "EXT_LambdaX_EX", "+=", "torch", ".", "einsum", "(", "'bck,bcj,bjl->kl'", ",", "E", ",", "Lamdba", ",", "E", ")", "\n", "# if i == 10:", "\n", "# break", "\n", "", "EXT_LambdaX_EX", ".", "diagonal", "(", ")", ".", "add_", "(", "args", ".", "delta", ")", "\n", "K_X_inv", "=", "EXT_LambdaX_EX", ".", "inverse", "(", ")", "\n", "\n", "# test on in-distribution data", "\n", "", "test_loss", ",", "correct", ",", "test_loss_ntkunc", ",", "correct_ntkunc", "=", "0", ",", "0", ",", "0", ",", "0", "\n", "uncs", ",", "uconfs", ",", "confs", ",", "ents", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "probs", ",", "probs_ntkunc", ",", "labels", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "\t\t", "for", "x", ",", "y", "in", "val_loader", ":", "\n", "\t\t\t", "x", ",", "y", "=", "x", ".", "cuda", "(", "non_blocking", "=", "True", ")", ",", "y", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "labels", ".", "append", "(", "y", ")", "\n", "\n", "output", "=", "classifier", "(", "x", ")", "\n", "prob", "=", "output", ".", "softmax", "(", "-", "1", ")", "\n", "probs", ".", "append", "(", "prob", ")", "\n", "test_loss", "+=", "F", ".", "cross_entropy", "(", "prob", ".", "log", "(", ")", ",", "y", ")", ".", "item", "(", ")", "*", "y", ".", "size", "(", "0", ")", "\n", "correct", "+=", "prob", ".", "argmax", "(", "dim", "=", "1", ")", ".", "eq", "(", "y", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "ents", ".", "append", "(", "ent", "(", "prob", ")", ")", "\n", "confs", ".", "append", "(", "prob", ".", "max", "(", "-", "1", ")", "[", "0", "]", ")", "\n", "\n", "E", "=", "nef", "(", "x", ")", ".", "view", "(", "x", ".", "shape", "[", "0", "]", ",", "-", "1", ",", "args", ".", "nef_k", ")", "*", "eigenvalues", ".", "sqrt", "(", ")", "\n", "# print(E[0])", "\n", "F_var", "=", "E", "@", "K_X_inv", ".", "unsqueeze", "(", "0", ")", "@", "E", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "# print(F_var[0])", "\n", "F_samples", "=", "(", "psd_safe_cholesky", "(", "F_var", ")", "@", "torch", ".", "randn", "(", "F_var", ".", "shape", "[", "0", "]", ",", "F_var", ".", "shape", "[", "1", "]", ",", "args", ".", "nef_num_samples_eval", ",", "device", "=", "F_var", ".", "device", ")", ")", ".", "permute", "(", "2", ",", "0", ",", "1", ")", "*", "args", ".", "ntk_std_scale", "+", "output", "\n", "# if y[0] == 0:", "\n", "# \tprint(F_samples[0, 0, :], output[0])", "\n", "# F_samples = torch.distributions.multivariate_normal.MultivariateNormal(output, F_var).sample((args.nef_num_samples_eval,))", "\n", "prob", "=", "F_samples", ".", "softmax", "(", "-", "1", ")", ".", "mean", "(", "0", ")", "\n", "probs_ntkunc", ".", "append", "(", "prob", ")", "\n", "test_loss_ntkunc", "+=", "F", ".", "cross_entropy", "(", "prob", ".", "log", "(", ")", ",", "y", ")", ".", "item", "(", ")", "*", "y", ".", "size", "(", "0", ")", "\n", "correct_ntkunc", "+=", "prob", ".", "argmax", "(", "dim", "=", "1", ")", ".", "eq", "(", "y", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "uncs", ".", "append", "(", "ent", "(", "prob", ")", ")", "\n", "uconfs", ".", "append", "(", "prob", ".", "max", "(", "-", "1", ")", "[", "0", "]", ")", "\n", "\n", "", "", "uncs", ",", "uconfs", ",", "confs", ",", "ents", "=", "torch", ".", "cat", "(", "uncs", ")", ",", "torch", ".", "cat", "(", "uconfs", ")", ",", "torch", ".", "cat", "(", "confs", ")", ",", "torch", ".", "cat", "(", "ents", ")", "\n", "uncs", "[", "torch", ".", "isnan", "(", "uncs", ")", "]", "=", "uncs", "[", "~", "torch", ".", "isnan", "(", "uncs", ")", "]", ".", "min", "(", ")", "\n", "# print(uncs.max(), uncs.min(), confs.max(), confs.min(), ents.max(), ents.min())", "\n", "test_loss", "/=", "len", "(", "val_loader", ".", "dataset", ")", "\n", "top1", "=", "float", "(", "correct", ")", "/", "len", "(", "val_loader", ".", "dataset", ")", "\n", "test_loss_ntkunc", "/=", "len", "(", "val_loader", ".", "dataset", ")", "\n", "top1_ntkunc", "=", "float", "(", "correct_ntkunc", ")", "/", "len", "(", "val_loader", ".", "dataset", ")", "\n", "\n", "labels", ",", "probs", ",", "probs_ntkunc", "=", "torch", ".", "cat", "(", "labels", ")", ",", "torch", ".", "cat", "(", "probs", ")", ",", "torch", ".", "cat", "(", "probs_ntkunc", ")", "\n", "confidences", ",", "predictions", "=", "torch", ".", "max", "(", "probs", ",", "1", ")", "\n", "confidences_ntkunc", ",", "predictions_ntkunc", "=", "torch", ".", "max", "(", "probs_ntkunc", ",", "1", ")", "\n", "ece_func", "=", "_ECELoss", "(", ")", ".", "cuda", "(", ")", "\n", "ece", "=", "ece_func", "(", "confidences", ",", "predictions", ",", "labels", ",", "\n", "title", "=", "'cifar_plots/ntk/{}/ece.pdf'", ".", "format", "(", "args", ".", "clf_arch", ")", ")", ".", "item", "(", ")", "\n", "ece_ntkunc", "=", "ece_func", "(", "confidences_ntkunc", ",", "predictions_ntkunc", ",", "labels", ",", "\n", "title", "=", "'cifar_plots/ntk/{}/ece_ntkunc.pdf'", ".", "format", "(", "args", ".", "clf_arch", ")", ")", ".", "item", "(", ")", "\n", "\n", "print", "(", "'\\tTest set: Average loss: {:.4f},'", "\n", "' Accuracy: {:.4f}  ECE: {:.4f}\\n'", "\n", "'\\tTest set: Average loss: {:.4f},'", "\n", "' Accuracy: {:.4f}  ECE: {:.4f}'", ".", "format", "(", "test_loss", ",", "top1", ",", "ece", ",", "test_loss_ntkunc", ",", "top1_ntkunc", ",", "ece_ntkunc", ")", ")", "\n", "\n", "# test on out-of-distribution data", "\n", "ood_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "torchvision", ".", "datasets", ".", "SVHN", "(", "root", "=", "'/data/LargeData/Regular/svhn'", ",", "split", "=", "'test'", ",", "\n", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", ",", "\n", "]", ")", ",", "download", "=", "True", ")", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "args", ".", "workers", ",", "pin_memory", "=", "True", ")", "\n", "uncs_ood", ",", "uconfs_ood", ",", "confs_ood", ",", "ents_ood", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "\t\t", "for", "x", ",", "_", "in", "ood_loader", ":", "\n", "\t\t\t", "x", "=", "x", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "output", "=", "classifier", "(", "x", ")", "\n", "prob", "=", "output", ".", "softmax", "(", "-", "1", ")", "\n", "ents_ood", ".", "append", "(", "ent", "(", "prob", ")", ")", "\n", "confs_ood", ".", "append", "(", "prob", ".", "max", "(", "-", "1", ")", "[", "0", "]", ")", "\n", "\n", "E", "=", "nef", "(", "x", ")", ".", "view", "(", "x", ".", "shape", "[", "0", "]", ",", "-", "1", ",", "args", ".", "nef_k", ")", "*", "eigenvalues", ".", "sqrt", "(", ")", "\n", "F_var", "=", "E", "@", "K_X_inv", "@", "E", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "F_samples", "=", "(", "psd_safe_cholesky", "(", "F_var", ")", "@", "torch", ".", "randn", "(", "F_var", ".", "shape", "[", "0", "]", ",", "F_var", ".", "shape", "[", "1", "]", ",", "args", ".", "nef_num_samples_eval", ",", "device", "=", "F_var", ".", "device", ")", ")", ".", "permute", "(", "2", ",", "0", ",", "1", ")", "*", "args", ".", "ntk_std_scale", "+", "output", "\n", "# F_samples = torch.distributions.multivariate_normal.MultivariateNormal(output, F_var).sample((args.nef_num_samples_eval,))", "\n", "prob", "=", "F_samples", ".", "softmax", "(", "-", "1", ")", ".", "mean", "(", "0", ")", "\n", "uncs_ood", ".", "append", "(", "ent", "(", "prob", ")", ")", "\n", "uconfs_ood", ".", "append", "(", "prob", ".", "max", "(", "-", "1", ")", "[", "0", "]", ")", "\n", "\n", "", "", "uncs_ood", ",", "uconfs_ood", ",", "confs_ood", ",", "ents_ood", "=", "torch", ".", "cat", "(", "uncs_ood", ")", ",", "torch", ".", "cat", "(", "uconfs_ood", ")", ",", "torch", ".", "cat", "(", "confs_ood", ")", ",", "torch", ".", "cat", "(", "ents_ood", ")", "\n", "uncs_ood", "[", "torch", ".", "isnan", "(", "uncs_ood", ")", "]", "=", "uncs_ood", "[", "~", "torch", ".", "isnan", "(", "uncs_ood", ")", "]", ".", "min", "(", ")", "\n", "\n", "binary_classification_given_uncertainty", "(", "uncs", ",", "uncs_ood", ",", "'cifar_plots/ntk/{}/id_vs_ood_ntkunc_ent.pdf'", ".", "format", "(", "args", ".", "clf_arch", ")", ")", "\n", "binary_classification_given_uncertainty", "(", "uconfs", ",", "uconfs_ood", ",", "'cifar_plots/ntk/{}/id_vs_ood_ntkunc_conf.pdf'", ".", "format", "(", "args", ".", "clf_arch", ")", ")", "\n", "binary_classification_given_uncertainty", "(", "confs", ",", "confs_ood", ",", "'cifar_plots/ntk/{}/id_vs_conf.pdf'", ".", "format", "(", "args", ".", "clf_arch", ")", ",", "reverse", "=", "True", ")", "\n", "binary_classification_given_uncertainty", "(", "ents", ",", "ents_ood", ",", "'cifar_plots/ntk/{}/id_vs_ood_ent.pdf'", ".", "format", "(", "args", ".", "clf_arch", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.neuralef-cifar-ntks.finetune_binary_classifier": [[542, 617], ["hasattr", "classifier.cuda", "classifier.named_parameters", "print", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "time.time", "timm.utils.AverageMeter", "range", "torch.Linear", "hasattr", "len", "len", "os.path.isfile", "utils.convert_secs2time", "print", "neuralef-cifar-ntks.train_classifier_one_epoch", "torch.optim.lr_scheduler.CosineAnnealingLR.step", "neuralef-cifar-ntks.validate", "max", "timm.utils.AverageMeter.update", "time.time", "torch.Linear", "added.append", "pretrained.append", "os.path.join", "print", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "classifier.load_state_dict", "torch.optim.SGD.load_state_dict", "print", "print", "classifier.state_dict", "torch.optim.SGD.state_dict", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "os.path.join", "time.time", "utils.time_string"], "function", ["home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.swag.SWAG.cuda", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.utils.convert_secs2time", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.neuralef-cifar-sgd-trajectory.train_classifier_one_epoch", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.neuralef-cifar-sgd-trajectory.validate", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.utils.time_string"], ["", "def", "finetune_binary_classifier", "(", "args", ",", "classifier", ",", "train_loader", ",", "val_loader", ")", ":", "\n", "\t", "best_prec1", "=", "0", "\n", "\n", "if", "hasattr", "(", "classifier", ",", "'fc'", ")", ":", "\n", "\t\t", "fc", "=", "nn", ".", "Linear", "(", "classifier", ".", "fc", ".", "in_features", ",", "1", ")", "\n", "del", "classifier", ".", "fc", "\n", "classifier", ".", "fc", "=", "fc", "\n", "", "elif", "hasattr", "(", "classifier", ",", "'linear'", ")", ":", "\n", "\t\t", "linear", "=", "nn", ".", "Linear", "(", "classifier", ".", "linear", ".", "in_features", ",", "1", ")", "\n", "del", "classifier", ".", "linear", "\n", "classifier", ".", "linear", "=", "linear", "\n", "", "else", ":", "\n", "\t\t", "raise", "NotImplementedError", "\n", "\n", "", "classifier", ".", "cuda", "(", ")", "\n", "\n", "# define optimizer", "\n", "pretrained", ",", "added", "=", "[", "]", ",", "[", "]", "\n", "for", "n", ",", "p", "in", "classifier", ".", "named_parameters", "(", ")", ":", "\n", "\t\t", "if", "'fc'", "in", "n", "or", "'linear'", "in", "n", ":", "\n", "\t\t\t", "added", ".", "append", "(", "p", ")", "\n", "", "else", ":", "\n", "\t\t\t", "pretrained", ".", "append", "(", "p", ")", "\n", "", "", "print", "(", "len", "(", "pretrained", ")", ",", "len", "(", "added", ")", ")", "\n", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "[", "{", "'params'", ":", "pretrained", ",", "'lr'", ":", "1e-3", "}", ",", "\n", "{", "'params'", ":", "added", ",", "'lr'", ":", "args", ".", "lr", "}", ",", "]", ",", "\n", "momentum", "=", "args", ".", "momentum", ",", "\n", "weight_decay", "=", "args", ".", "weight_decay", ",", "\n", "nesterov", "=", "args", ".", "nesterov", ")", "\n", "\n", "# optionally resume from a checkpoint", "\n", "if", "args", ".", "resume", ":", "\n", "\t\t", "if", "args", ".", "resume", "==", "'auto'", ":", "\n", "\t\t\t", "args", ".", "resume", "=", "os", ".", "path", ".", "join", "(", "args", ".", "save_dir", ",", "'checkpoint_{}.th'", ".", "format", "(", "args", ".", "epochs", "-", "1", ")", ")", "\n", "", "if", "os", ".", "path", ".", "isfile", "(", "args", ".", "resume", ")", ":", "\n", "\t\t\t", "print", "(", "\"=> loading checkpoint '{}'\"", ".", "format", "(", "args", ".", "resume", ")", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "args", ".", "resume", ",", "map_location", "=", "'cpu'", ")", "\n", "args", ".", "start_epoch", "=", "checkpoint", "[", "'epoch'", "]", "\n", "best_prec1", "=", "checkpoint", "[", "'best_prec1'", "]", "\n", "classifier", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "optimizer", ".", "load_state_dict", "(", "checkpoint", "[", "'optimizer'", "]", ")", "\n", "print", "(", "\"=> loaded checkpoint '{}' (epoch {} acc {})\"", "\n", ".", "format", "(", "args", ".", "resume", ",", "checkpoint", "[", "'epoch'", "]", ",", "checkpoint", "[", "'prec1'", "]", ")", ")", "\n", "", "else", ":", "\n", "\t\t\t", "print", "(", "\"=> no checkpoint found at '{}'\"", ".", "format", "(", "args", ".", "resume", ")", ")", "\n", "\n", "", "", "scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "CosineAnnealingLR", "(", "optimizer", ",", "\n", "args", ".", "epochs", ",", "last_epoch", "=", "args", ".", "start_epoch", "-", "1", ")", "\n", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "epoch_time", "=", "AverageMeter", "(", ")", "\n", "for", "epoch", "in", "range", "(", "args", ".", "start_epoch", ",", "args", ".", "epochs", ")", ":", "\n", "\n", "\t\t", "need_hour", ",", "need_mins", ",", "need_secs", "=", "convert_secs2time", "(", "epoch_time", ".", "avg", "*", "(", "args", ".", "epochs", "-", "epoch", ")", ")", "\n", "need_time", "=", "'[Need: {:02d}:{:02d}:{:02d}]'", ".", "format", "(", "need_hour", ",", "need_mins", ",", "need_secs", ")", "\n", "print", "(", "'==>>{:s} [Epoch={:03d}/{:03d}] {:s}'", ".", "format", "(", "\n", "time_string", "(", ")", ",", "epoch", ",", "args", ".", "epochs", ",", "need_time", ")", "+", "' [Best : Accuracy={:.4f}]'", ".", "format", "(", "best_prec1", ")", ")", "\n", "# train for one epoch", "\n", "train_classifier_one_epoch", "(", "args", ",", "train_loader", ",", "\n", "classifier", ",", "optimizer", ",", "epoch", ")", "\n", "scheduler", ".", "step", "(", ")", "\n", "\n", "# evaluate on validation set", "\n", "_", ",", "prec1", "=", "validate", "(", "args", ",", "val_loader", ",", "classifier", ")", "\n", "best_prec1", "=", "max", "(", "prec1", ",", "best_prec1", ")", "\n", "\n", "if", "epoch", "%", "10", "==", "0", "or", "epoch", "==", "args", ".", "epochs", "-", "1", ":", "\n", "\t\t\t", "ckpt", "=", "{", "'epoch'", ":", "epoch", "+", "1", ",", "'best_prec1'", ":", "best_prec1", ",", "'prec1'", ":", "prec1", "}", "\n", "ckpt", "[", "'state_dict'", "]", "=", "classifier", ".", "state_dict", "(", ")", "\n", "ckpt", "[", "'optimizer'", "]", "=", "optimizer", ".", "state_dict", "(", ")", "\n", "torch", ".", "save", "(", "ckpt", ",", "os", ".", "path", ".", "join", "(", "args", ".", "save_dir", ",", "'checkpoint_{}.th'", ".", "format", "(", "epoch", ")", ")", ")", "\n", "\n", "", "epoch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "start_time", ")", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.neuralef-cifar-ntks.train_classifier_one_epoch": [[618, 652], ["classifier.train", "time.time", "enumerate", "print", "timm.utils.AverageMeter", "timm.utils.AverageMeter", "timm.utils.AverageMeter", "timm.utils.AverageMeter", "data_time.update", "classifier", "optimizer.zero_grad", "F.cross_entropy.backward", "optimizer.step", "losses.update", "top1.update", "batch_time.update", "time.time", "data.cuda", "label.cuda", "torch.binary_cross_entropy_with_logits", "torch.cross_entropy", "classifier.argmax().eq().float().mean", "F.cross_entropy.item", "label.size", "output.argmax().eq().float().mean.item", "label.size", "time.time", "label.unsqueeze().float", "time.time", "classifier.argmax().eq().float", "label.unsqueeze", "classifier.argmax().eq", "classifier.argmax"], "function", ["home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.examples.hydrogen.train", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.swag.SWAG.cuda", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.swag.SWAG.cuda"], ["", "", "def", "train_classifier_one_epoch", "(", "args", ",", "train_loader", ",", "classifier", ",", "optimizer", ",", "epoch", ")", ":", "\n", "\t", "batch_time", ",", "data_time", "=", "AverageMeter", "(", ")", ",", "AverageMeter", "(", ")", "\n", "losses", ",", "top1", "=", "AverageMeter", "(", ")", ",", "AverageMeter", "(", ")", "\n", "\n", "classifier", ".", "train", "(", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "for", "i", ",", "(", "data", ",", "label", ")", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "\t\t", "data_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "data", ",", "label", "=", "data", ".", "cuda", "(", "non_blocking", "=", "True", ")", ",", "label", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "\n", "output", "=", "classifier", "(", "data", ")", "\n", "if", "args", ".", "num_classes", "==", "2", ":", "\n", "\t\t\t", "loss", "=", "F", ".", "binary_cross_entropy_with_logits", "(", "output", ",", "label", ".", "unsqueeze", "(", "-", "1", ")", ".", "float", "(", ")", ")", "\n", "acc", "=", "(", "(", "output", ">", "0", ")", ".", "float", "(", ")", ".", "squeeze", "(", ")", "==", "label", ")", ".", "float", "(", ")", ".", "mean", "(", ")", "\n", "", "else", ":", "\n", "\t\t\t", "loss", "=", "F", ".", "cross_entropy", "(", "output", ",", "label", ")", "\n", "acc", "=", "output", ".", "argmax", "(", "dim", "=", "1", ")", ".", "eq", "(", "label", ")", ".", "float", "(", ")", ".", "mean", "(", ")", "\n", "\n", "", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "losses", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "label", ".", "size", "(", "0", ")", ")", "\n", "top1", ".", "update", "(", "acc", ".", "item", "(", ")", ",", "label", ".", "size", "(", "0", ")", ")", "\n", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "", "print", "(", "'\\tLr: {lr:.4f}, '", "\n", "'Time {batch_time.avg:.3f}, '", "\n", "'Data {data_time.avg:.3f}, '", "\n", "'Loss {loss.avg:.4f}, '", "\n", "'Prec@1 {top1.avg:.4f}'", ".", "format", "(", "lr", "=", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", ",", "\n", "batch_time", "=", "batch_time", ",", "data_time", "=", "data_time", ",", "loss", "=", "losses", ",", "top1", "=", "top1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.neuralef-cifar-ntks.validate": [[653, 675], ["classifier.eval", "len", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "float", "len", "print", "data.cuda", "target.cuda", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "classifier().float", "classifier().float.argmax().eq().sum().item", "torch.binary_cross_entropy_with_logits().item", "target.size", "torch.cross_entropy().item", "target.size", "classifier", "classifier().float.argmax().eq().sum", "torch.binary_cross_entropy_with_logits", "torch.cross_entropy", "target.unsqueeze().float", "classifier().float.argmax().eq", "target.unsqueeze", "classifier().float.argmax"], "function", ["home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.swag.SWAG.cuda", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.swag.SWAG.cuda"], ["", "def", "validate", "(", "args", ",", "val_loader", ",", "classifier", ",", "verbose", "=", "True", ")", ":", "\n", "\t", "classifier", ".", "eval", "(", ")", "\n", "\n", "test_loss", ",", "correct", "=", "0", ",", "0", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "\t\t", "for", "data", ",", "target", "in", "val_loader", ":", "\n", "\t\t\t", "data", ",", "target", "=", "data", ".", "cuda", "(", "non_blocking", "=", "True", ")", ",", "target", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "with", "torch", ".", "cuda", ".", "amp", ".", "autocast", "(", ")", ":", "\n", "\t\t\t\t", "output", "=", "classifier", "(", "data", ")", ".", "float", "(", ")", "\n", "\n", "", "if", "args", ".", "num_classes", "==", "2", ":", "\n", "\t\t\t\t", "test_loss", "+=", "F", ".", "binary_cross_entropy_with_logits", "(", "output", ",", "target", ".", "unsqueeze", "(", "-", "1", ")", ".", "float", "(", ")", ")", ".", "item", "(", ")", "*", "target", ".", "size", "(", "0", ")", "\n", "correct", "+=", "(", "(", "output", ">", "0", ")", ".", "float", "(", ")", ".", "squeeze", "(", ")", "==", "target", ")", ".", "float", "(", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "", "else", ":", "\n", "\t\t\t\t", "test_loss", "+=", "F", ".", "cross_entropy", "(", "output", ",", "target", ")", ".", "item", "(", ")", "*", "target", ".", "size", "(", "0", ")", "\n", "correct", "+=", "output", ".", "argmax", "(", "dim", "=", "1", ")", ".", "eq", "(", "target", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "\n", "", "", "", "test_loss", "/=", "len", "(", "val_loader", ".", "dataset", ")", "\n", "top1", "=", "float", "(", "correct", ")", "/", "len", "(", "val_loader", ".", "dataset", ")", "\n", "if", "verbose", ":", "\n", "\t\t", "print", "(", "'\\tTest set: Average loss: {:.4f}, Accuracy: {:.4f}'", ".", "format", "(", "test_loss", ",", "top1", ")", ")", "\n", "", "return", "test_loss", ",", "top1", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.neuralef-cifar-ntks.load_cifar": [[677, 755], ["torchvision.Normalize", "dataset", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "dataset", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "dataset", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "dataset", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "sum", "utils.dataset_with_indices", "sum", "sum", "sum", "sum", "torchvision.Compose", "enumerate", "torchvision.Compose", "enumerate", "torchvision.Compose", "enumerate", "torchvision.Compose", "enumerate", "torchvision.Compose", "enumerate", "torchvision.RandomHorizontalFlip", "torchvision.RandomCrop", "torchvision.ToTensor", "torchvision.ToTensor", "torchvision.ToTensor", "torchvision.ToTensor", "torchvision.ToTensor", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array"], "function", ["home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.utils.dataset_with_indices"], ["", "def", "load_cifar", "(", "args", ")", ":", "\n", "\t", "if", "args", ".", "dataset", "==", "'cifar10'", ":", "\n", "\t\t", "mean", ",", "std", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "[", "0.229", ",", "0.224", ",", "0.225", "]", "\n", "dataset", "=", "torchvision", ".", "datasets", ".", "CIFAR10", "\n", "", "elif", "args", ".", "dataset", "==", "'cifar100'", ":", "\n", "\t\t", "mean", ",", "std", "=", "[", "x", "/", "255", "for", "x", "in", "[", "129.3", ",", "124.1", ",", "112.4", "]", "]", ",", "[", "x", "/", "255", "for", "x", "in", "[", "68.2", ",", "65.4", ",", "70.4", "]", "]", "\n", "dataset", "=", "torchvision", ".", "datasets", ".", "CIFAR100", "\n", "\n", "", "normalize", "=", "transforms", ".", "Normalize", "(", "mean", "=", "mean", ",", "std", "=", "std", ")", "\n", "\n", "train_dataset", "=", "dataset", "(", "root", "=", "args", ".", "data_dir", ",", "train", "=", "True", ",", "\n", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "RandomCrop", "(", "32", ",", "4", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", ",", "\n", "]", ")", ",", "download", "=", "True", ")", "\n", "idx", "=", "sum", "(", "(", "np", ".", "array", "(", "train_dataset", ".", "targets", ")", "==", "c", ")", ".", "astype", "(", "np", ".", "int8", ")", "for", "c", "in", "args", ".", "classes", ")", ">", "0", "\n", "train_dataset", ".", "data", "=", "train_dataset", ".", "data", "[", "idx", "]", "\n", "train_dataset", ".", "targets", "=", "[", "train_dataset", ".", "targets", "[", "i", "]", "for", "i", ",", "j", "in", "enumerate", "(", "idx", ")", "if", "j", "]", "\n", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "train_dataset", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "True", ",", "\n", "num_workers", "=", "args", ".", "workers", ",", "pin_memory", "=", "True", ")", "\n", "\n", "nef_train_dataset", "=", "dataset_with_indices", "(", "dataset", ")", "(", "root", "=", "args", ".", "data_dir", ",", "train", "=", "True", ",", "\n", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", ",", "\n", "]", ")", ",", "download", "=", "True", ")", "\n", "idx", "=", "sum", "(", "(", "np", ".", "array", "(", "nef_train_dataset", ".", "targets", ")", "==", "c", ")", ".", "astype", "(", "np", ".", "int8", ")", "for", "c", "in", "args", ".", "classes", ")", ">", "0", "\n", "nef_train_dataset", ".", "data", "=", "nef_train_dataset", ".", "data", "[", "idx", "]", "\n", "nef_train_dataset", ".", "targets", "=", "[", "nef_train_dataset", ".", "targets", "[", "i", "]", "for", "i", ",", "j", "in", "enumerate", "(", "idx", ")", "if", "j", "]", "\n", "nef_train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "nef_train_dataset", ",", "\n", "batch_size", "=", "args", ".", "nef_batch_size", ",", "shuffle", "=", "True", ",", "\n", "num_workers", "=", "args", ".", "workers", ",", "pin_memory", "=", "True", ")", "\n", "\n", "nef_train_val_dataset", "=", "dataset", "(", "root", "=", "args", ".", "data_dir", ",", "train", "=", "True", ",", "\n", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", ",", "\n", "]", ")", ",", "download", "=", "True", ")", "\n", "idx", "=", "sum", "(", "(", "np", ".", "array", "(", "nef_train_val_dataset", ".", "targets", ")", "==", "c", ")", ".", "astype", "(", "np", ".", "int8", ")", "for", "c", "in", "args", ".", "classes", ")", ">", "0", "\n", "nef_train_val_dataset", ".", "data", "=", "nef_train_val_dataset", ".", "data", "[", "idx", "]", "\n", "nef_train_val_dataset", ".", "targets", "=", "[", "nef_train_val_dataset", ".", "targets", "[", "i", "]", "for", "i", ",", "j", "in", "enumerate", "(", "idx", ")", "if", "j", "]", "\n", "nef_train_val_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "nef_train_val_dataset", ",", "\n", "batch_size", "=", "args", ".", "nef_batch_size", ",", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "args", ".", "workers", ",", "pin_memory", "=", "True", ")", "\n", "\n", "val_dataset", "=", "dataset", "(", "root", "=", "args", ".", "data_dir", ",", "train", "=", "False", ",", "\n", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", ",", "\n", "]", ")", ",", "download", "=", "True", ")", "\n", "idx", "=", "sum", "(", "(", "np", ".", "array", "(", "val_dataset", ".", "targets", ")", "==", "c", ")", ".", "astype", "(", "np", ".", "int8", ")", "for", "c", "in", "args", ".", "classes", ")", ">", "0", "\n", "val_dataset", ".", "data", "=", "val_dataset", ".", "data", "[", "idx", "]", "\n", "val_dataset", ".", "targets", "=", "[", "val_dataset", ".", "targets", "[", "i", "]", "for", "i", ",", "j", "in", "enumerate", "(", "idx", ")", "if", "j", "]", "\n", "val_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "val_dataset", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "args", ".", "workers", ",", "pin_memory", "=", "True", ")", "\n", "\n", "val_dataset_ood", "=", "dataset", "(", "root", "=", "args", ".", "data_dir", ",", "train", "=", "False", ",", "\n", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", ",", "\n", "]", ")", ",", "download", "=", "True", ")", "\n", "idx", "=", "sum", "(", "(", "np", ".", "array", "(", "val_dataset_ood", ".", "targets", ")", "==", "c", ")", ".", "astype", "(", "np", ".", "int8", ")", "for", "c", "in", "args", ".", "ood_classes", ")", ">", "0", "\n", "val_dataset_ood", ".", "data", "=", "val_dataset_ood", ".", "data", "[", "idx", "]", "\n", "val_dataset_ood", ".", "targets", "=", "[", "val_dataset_ood", ".", "targets", "[", "i", "]", "for", "i", ",", "j", "in", "enumerate", "(", "idx", ")", "if", "j", "]", "\n", "val_loader_ood", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "val_dataset_ood", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "args", ".", "workers", ",", "pin_memory", "=", "True", ")", "\n", "\n", "return", "train_loader", ",", "nef_train_loader", ",", "nef_train_val_loader", ",", "val_loader", ",", "val_loader_ood", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.neuralef-cifar-ntks.assignment2pred": [[756, 764], ["range", "numpy.array", "numpy.unique", "numpy.argmax"], "function", ["None"], ["", "def", "assignment2pred", "(", "assignment", ",", "labels", ",", "num_classes", ")", ":", "\n", "\t", "m", "=", "{", "}", "\n", "for", "i", "in", "range", "(", "num_classes", ")", ":", "\n", "\t\t", "values", ",", "counts", "=", "np", ".", "unique", "(", "labels", "[", "assignment", "==", "i", "]", ",", "return_counts", "=", "True", ")", "\n", "m", "[", "i", "]", "=", "values", "[", "np", ".", "argmax", "(", "counts", ")", "]", "\n", "# print(i, values, counts, values[np.argmax(counts)])", "\n", "", "pred", "=", "np", ".", "array", "(", "[", "m", "[", "i", "]", "for", "i", "in", "assignment", "]", ")", "\n", "return", "pred", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.neuralef-cifar-ntks.logit": [[766, 773], ["range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "len", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "res.append", "model", "min", "len"], "function", ["None"], ["", "def", "logit", "(", "all_images", ",", "model", ",", "args", ")", ":", "\n", "\t", "res", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "0", ",", "len", "(", "all_images", ")", ",", "256", ")", ":", "\n", "# with torch.cuda.amp.autocast():", "\n", "\t\t", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "\t\t\t", "res", ".", "append", "(", "model", "(", "all_images", "[", "i", ":", "min", "(", "i", "+", "256", ",", "len", "(", "all_images", ")", ")", "]", ")", ")", "\n", "", "", "return", "torch", ".", "cat", "(", "res", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.neuralef-cifar-ntks.ent": [[774, 776], ["p.add().log", "p.add"], "function", ["None"], ["", "def", "ent", "(", "p", ")", ":", "\n", "\t", "return", "-", "(", "p", "*", "p", ".", "add", "(", "1e-6", ")", ".", "log", "(", ")", ")", ".", "sum", "(", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.neuralef-cifar-sgd-trajectory.NeuralEigenFunctions.__init__": [[101, 111], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "neuralef-cifar-sgd-trajectory.NeuralEigenFunctions.register_buffer", "neuralef-cifar-sgd-trajectory.NeuralEigenFunctions.register_buffer", "neuralef-cifar-sgd-trajectory.NeuralEigenFunctions.functions.append", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "eval", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "len"], "methods", ["home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.src.spin.SpectralNetwork.__init__"], ["\t", "def", "__init__", "(", "self", ",", "k", ",", "arch", ",", "in_planes", ",", "num_classes", ",", "momentum", "=", "0.9", ",", "normalize_over", "=", "[", "0", "]", ")", ":", "\n", "\t\t", "super", "(", "NeuralEigenFunctions", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "momentum", "=", "momentum", "\n", "self", ".", "normalize_over", "=", "normalize_over", "\n", "self", ".", "functions", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "i", "in", "range", "(", "k", ")", ":", "\n", "\t\t\t", "function", "=", "eval", "(", "arch", ")", "(", "in_planes", ",", "num_classes", ")", "\n", "self", ".", "functions", ".", "append", "(", "function", ")", "\n", "", "self", ".", "register_buffer", "(", "'eigennorm'", ",", "torch", ".", "zeros", "(", "num_classes", ",", "k", ")", "if", "len", "(", "normalize_over", ")", "==", "1", "else", "torch", ".", "zeros", "(", "k", ")", ")", "\n", "self", ".", "register_buffer", "(", "'num_calls'", ",", "torch", ".", "Tensor", "(", "[", "0", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.neuralef-cifar-sgd-trajectory.NeuralEigenFunctions.forward": [[112, 125], ["torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "f", "torch.stack.norm", "torch.stack.norm", "torch.stack.norm", "torch.stack.norm", "torch.stack.norm", "torch.stack.norm", "torch.stack.norm", "torch.stack.norm", "math.sqrt", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "numpy.prod", "neuralef-cifar-sgd-trajectory.NeuralEigenFunctions.eigennorm.copy_", "neuralef-cifar-sgd-trajectory.NeuralEigenFunctions.eigennorm.mul_().add_", "neuralef-cifar-sgd-trajectory.NeuralEigenFunctions.eigennorm.mul_"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\t\t", "ret_raw", "=", "torch", ".", "stack", "(", "[", "f", "(", "x", ")", "for", "f", "in", "self", ".", "functions", "]", ",", "-", "1", ")", "\n", "if", "self", ".", "training", ":", "\n", "\t\t\t", "norm_", "=", "ret_raw", ".", "norm", "(", "dim", "=", "self", ".", "normalize_over", ")", "/", "math", ".", "sqrt", "(", "np", ".", "prod", "(", "[", "ret_raw", ".", "shape", "[", "dim", "]", "for", "dim", "in", "self", ".", "normalize_over", "]", ")", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "\t\t\t\t", "if", "self", ".", "num_calls", "==", "0", ":", "\n", "\t\t\t\t\t", "self", ".", "eigennorm", ".", "copy_", "(", "norm_", ".", "data", ")", "\n", "", "else", ":", "\n", "\t\t\t\t\t", "self", ".", "eigennorm", ".", "mul_", "(", "self", ".", "momentum", ")", ".", "add_", "(", "norm_", ".", "data", ",", "alpha", "=", "1", "-", "self", ".", "momentum", ")", "\n", "", "self", ".", "num_calls", "+=", "1", "\n", "", "", "else", ":", "\n", "\t\t\t", "norm_", "=", "self", ".", "eigennorm", "\n", "", "return", "ret_raw", "/", "norm_", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.neuralef-cifar-sgd-trajectory.main": [[126, 235], ["parser.parse_args", "os.path.join", "random.seed", "numpy.random.seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "utils.load_cifar", "classifier.cuda", "torch.optim.swa_utils.AveragedModel", "print", "print", "print", "utils.binary_classification_given_uncertainty", "neuralef-cifar-sgd-trajectory.eval_corrupted_data", "print", "print", "print", "utils.binary_classification_given_uncertainty", "neuralef-cifar-sgd-trajectory.eval_corrupted_data", "NeuralEigenFunctions().cuda", "neuralef-cifar-sgd-trajectory.train_nef", "print", "print", "print", "utils.binary_classification_given_uncertainty", "neuralef-cifar-sgd-trajectory.eval_corrupted_data", "print", "print", "print", "utils.binary_classification_given_uncertainty", "neuralef-cifar-sgd-trajectory.eval_corrupted_data", "os.path.exists", "os.makedirs", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "eval", "swag.SWAG", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "classifier.load_state_dict", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.optim.swa_utils.AveragedModel.load_state_dict", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "neuralef-cifar-sgd-trajectory.train_classifier", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack.sub_", "numpy.savez_compressed", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "classifier.load_state_dict", "print", "print", "print", "utils.binary_classification_given_uncertainty", "neuralef-cifar-sgd-trajectory.eval_corrupted_data", "exit", "neuralef-cifar-sgd-trajectory.validate", "neuralef-cifar-sgd-trajectory.validate", "neuralef-cifar-sgd-trajectory.validate", "neuralef-cifar-sgd-trajectory.validate", "neuralef-cifar-sgd-trajectory.validate", "neuralef-cifar-sgd-trajectory.validate", "neuralef-cifar-sgd-trajectory.validate", "neuralef-cifar-sgd-trajectory.validate", "copy.deepcopy", "os.path.join", "os.path.join", "numpy.load", "torch.stack.mean", "os.path.join", "torch.stack.data.cpu().numpy", "os.path.join", "neuralef-cifar-sgd-trajectory.swag_validate", "neuralef-cifar-sgd-trajectory.swag_validate", "neuralef-cifar-sgd-trajectory.NeuralEigenFunctions", "os.path.join", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.stack.data.cpu", "parser.parse_args.resume.split"], "function", ["home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.utils.load_cifar", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.swag.SWAG.cuda", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.utils.binary_classification_given_uncertainty", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.neuralef-cifar-sgd-trajectory.eval_corrupted_data", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.utils.binary_classification_given_uncertainty", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.neuralef-cifar-sgd-trajectory.eval_corrupted_data", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.swag.SWAG.cuda", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.neuralef-cifar-sgd-trajectory.train_nef", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.utils.binary_classification_given_uncertainty", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.neuralef-cifar-sgd-trajectory.eval_corrupted_data", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.utils.binary_classification_given_uncertainty", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.neuralef-cifar-sgd-trajectory.eval_corrupted_data", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.neuralef-cifar-sgd-trajectory.train_classifier", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.utils.binary_classification_given_uncertainty", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.neuralef-cifar-sgd-trajectory.eval_corrupted_data", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.neuralef-cifar-sgd-trajectory.validate", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.neuralef-cifar-sgd-trajectory.validate", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.neuralef-cifar-sgd-trajectory.validate", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.neuralef-cifar-sgd-trajectory.validate", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.neuralef-cifar-sgd-trajectory.validate", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.neuralef-cifar-sgd-trajectory.validate", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.neuralef-cifar-sgd-trajectory.validate", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.neuralef-cifar-sgd-trajectory.validate", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.neuralef-cifar-sgd-trajectory.swag_validate", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.neuralef-cifar-sgd-trajectory.swag_validate"], ["", "", "def", "main", "(", ")", ":", "\n", "\t", "global", "collected_samples", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "args", ".", "save_dir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "save_dir", ",", "args", ".", "job_id", ")", "\n", "\n", "# Check the save_dir exists or not", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "args", ".", "save_dir", ")", ":", "\n", "\t\t", "os", ".", "makedirs", "(", "args", ".", "save_dir", ")", "\n", "\n", "", "random", ".", "seed", "(", "args", ".", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "args", ".", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "\t\t", "torch", ".", "cuda", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "args", ".", "seed", ")", "\n", "\n", "", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", "=", "True", "\n", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "False", "\n", "\n", "train_loader", ",", "nef_collect_train_loader", ",", "nef_train_loader", ",", "val_loader", ",", "ood_loader", ",", "num_classes", "=", "load_cifar", "(", "args", ")", "\n", "args", ".", "num_classes", "=", "num_classes", "\n", "\n", "classifier", "=", "eval", "(", "args", ".", "clf_arch", ")", "(", "args", ".", "clf_in_planes", ",", "args", ".", "num_classes", ")", "\n", "classifier", ".", "cuda", "(", ")", "\n", "swa_classifier", "=", "AveragedModel", "(", "classifier", ")", "\n", "swag_classifier", "=", "SWAG", "(", "copy", ".", "deepcopy", "(", "classifier", ")", ")", "if", "args", ".", "swag", "else", "None", "\n", "\n", "if", "args", ".", "pre_trained_dir", ":", "\n", "\t\t", "checkpoint", "=", "torch", ".", "load", "(", "os", ".", "path", ".", "join", "(", "args", ".", "pre_trained_dir", ",", "\n", "'checkpoint_{}.th'", ".", "format", "(", "args", ".", "swa_start", ")", ")", ",", "map_location", "=", "'cpu'", ")", "\n", "classifier", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "os", ".", "path", ".", "join", "(", "args", ".", "pre_trained_dir", ",", "\n", "'checkpoint_{}.th'", ".", "format", "(", "args", ".", "epochs", "-", "1", ")", ")", ",", "map_location", "=", "'cpu'", ")", "\n", "swa_classifier", ".", "load_state_dict", "(", "checkpoint", "[", "'swa_state_dict'", "]", ")", "\n", "collected_samples", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "\n", "args", ".", "pre_trained_dir", ",", "'collected_samples.npz'", ")", ")", "[", "'arr_0'", "]", "\n", "collected_samples", "=", "torch", ".", "from_numpy", "(", "collected_samples", ")", ".", "float", "(", ")", "\n", "", "else", ":", "\n", "\t\t", "train_classifier", "(", "args", ",", "classifier", ",", "swa_classifier", ",", "swag_classifier", ",", "\n", "train_loader", ",", "nef_collect_train_loader", ",", "val_loader", ")", "\n", "collected_samples", "=", "torch", ".", "stack", "(", "collected_samples", ")", "\n", "collected_samples", ".", "sub_", "(", "collected_samples", ".", "mean", "(", "0", ")", ")", "\n", "np", ".", "savez_compressed", "(", "os", ".", "path", ".", "join", "(", "args", ".", "save_dir", ",", "'collected_samples'", ")", ",", "\n", "collected_samples", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "\n", "checkpoint", "=", "torch", ".", "load", "(", "os", ".", "path", ".", "join", "(", "'/'", ".", "join", "(", "args", ".", "resume", ".", "split", "(", "\"/\"", ")", "[", ":", "-", "1", "]", ")", "if", "args", ".", "resume", "else", "args", ".", "save_dir", ",", "\n", "'checkpoint_{}.th'", ".", "format", "(", "args", ".", "swa_start", ")", ")", ",", "\n", "map_location", "=", "'cpu'", ")", "\n", "classifier", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "\n", "", "if", "args", ".", "swag", ":", "\n", "\t\t", "print", "(", "\"Performance of swag classifier\"", ")", "\n", "print", "(", "\"\\tOn in-distribution test data\"", ")", "\n", "uncs_swagclf", "=", "swag_validate", "(", "args", ",", "train_loader", ",", "val_loader", ",", "swag_classifier", ")", "[", "-", "1", "]", "\n", "print", "(", "\"\\tOn out-of-distribution test data\"", ")", "\n", "uncs_ood_swagclf", "=", "swag_validate", "(", "args", ",", "train_loader", ",", "ood_loader", ",", "swag_classifier", ")", "[", "-", "1", "]", "\n", "binary_classification_given_uncertainty", "(", "uncs_swagclf", ",", "uncs_ood_swagclf", ",", "\n", "'cifar_plots/binary_clf_given_unc/swag_clf_{}.pdf'", ".", "format", "(", "args", ".", "job_id", ")", ")", "\n", "eval_corrupted_data", "(", "args", ",", "'swag_clf_{}'", ".", "format", "(", "args", ".", "job_id", ")", ",", "train_loader", ",", "None", ",", "swag_classifier", ")", "\n", "\n", "exit", "(", ")", "\n", "\n", "", "print", "(", "\"Performance of classifier\"", ")", "\n", "print", "(", "\"\\tOn in-distribution test data\"", ")", "\n", "uncs_clf", "=", "validate", "(", "args", ",", "val_loader", ",", "classifier", ")", "[", "-", "1", "]", "\n", "print", "(", "\"\\tOn out-of-distribution test data\"", ")", "\n", "uncs_ood_clf", "=", "validate", "(", "args", ",", "ood_loader", ",", "classifier", ")", "[", "-", "1", "]", "\n", "binary_classification_given_uncertainty", "(", "uncs_clf", ",", "uncs_ood_clf", ",", "\n", "'cifar_plots/binary_clf_given_unc/clf_{}.pdf'", ".", "format", "(", "args", ".", "job_id", ")", ")", "\n", "eval_corrupted_data", "(", "args", ",", "'clf_{}'", ".", "format", "(", "args", ".", "job_id", ")", ",", "None", ",", "classifier", ")", "\n", "\n", "print", "(", "\"Performance of swa classifier\"", ")", "\n", "print", "(", "\"\\tOn in-distribution test data\"", ")", "\n", "uncs_swaclf", "=", "validate", "(", "args", ",", "val_loader", ",", "swa_classifier", ")", "[", "-", "1", "]", "\n", "print", "(", "\"\\tOn out-of-distribution test data\"", ")", "\n", "uncs_ood_swaclf", "=", "validate", "(", "args", ",", "ood_loader", ",", "swa_classifier", ")", "[", "-", "1", "]", "\n", "binary_classification_given_uncertainty", "(", "uncs_swaclf", ",", "uncs_ood_swaclf", ",", "\n", "'cifar_plots/binary_clf_given_unc/swa_clf_{}.pdf'", ".", "format", "(", "args", ".", "job_id", ")", ")", "\n", "eval_corrupted_data", "(", "args", ",", "'swa_clf_{}'", ".", "format", "(", "args", ".", "job_id", ")", ",", "None", ",", "swa_classifier", ")", "\n", "\n", "nef", "=", "NeuralEigenFunctions", "(", "args", ".", "nef_k", ",", "args", ".", "nef_arch", ",", "\n", "args", ".", "nef_in_planes", ",", "args", ".", "num_classes", ",", "\n", "normalize_over", "=", "[", "0", ",", "]", "if", "args", ".", "nef_class_cond", "else", "[", "0", ",", "1", "]", ")", ".", "cuda", "(", ")", "\n", "eigenvalues", "=", "train_nef", "(", "args", ",", "nef", ",", "collected_samples", ",", "classifier", ",", "swa_classifier", ",", "\n", "nef_train_loader", ",", "val_loader", ",", "ood_loader", ",", "\n", "args", ".", "nef_k", ",", "args", ".", "nef_epochs", ",", "args", ".", "nef_optimizer_type", ",", "args", ".", "nef_lr", ",", "\n", "args", ".", "nef_momentum", ",", "args", ".", "nef_amp", ",", "args", ".", "num_classes", ",", "args", ".", "nef_class_cond", ")", "\n", "\n", "print", "(", "\"Performance of classifier w/ nef\"", ")", "\n", "print", "(", "\"\\tOn in-distribution test data\"", ")", "\n", "uncs_clf_nef", "=", "validate", "(", "args", ",", "val_loader", ",", "classifier", ",", "nef", ",", "eigenvalues", ")", "[", "-", "1", "]", "\n", "print", "(", "\"\\tOn out-of-distribution test data\"", ")", "\n", "uncs_ood_clf_nef", "=", "validate", "(", "args", ",", "ood_loader", ",", "classifier", ",", "nef", ",", "eigenvalues", ")", "[", "-", "1", "]", "\n", "binary_classification_given_uncertainty", "(", "uncs_clf_nef", ",", "uncs_ood_clf_nef", ",", "\n", "'cifar_plots/binary_clf_given_unc/nef_clf_{}.pdf'", ".", "format", "(", "args", ".", "job_id", ")", ")", "\n", "eval_corrupted_data", "(", "args", ",", "'nef_clf_{}'", ".", "format", "(", "args", ".", "job_id", ")", ",", "None", ",", "\n", "classifier", ",", "nef", "=", "nef", ",", "eigenvalues", "=", "eigenvalues", ")", "\n", "\n", "print", "(", "\"Performance of swa classifier w/ nef\"", ")", "\n", "print", "(", "\"\\tOn in-distribution test data\"", ")", "\n", "uncs_swaclf_nef", "=", "validate", "(", "args", ",", "val_loader", ",", "swa_classifier", ",", "nef", ",", "eigenvalues", ")", "[", "-", "1", "]", "\n", "print", "(", "\"\\tOn out-of-distribution test data\"", ")", "\n", "uncs_ood_swaclf_nef", "=", "validate", "(", "args", ",", "ood_loader", ",", "swa_classifier", ",", "nef", ",", "eigenvalues", ")", "[", "-", "1", "]", "\n", "binary_classification_given_uncertainty", "(", "uncs_swaclf_nef", ",", "uncs_ood_swaclf_nef", ",", "\n", "'cifar_plots/binary_clf_given_unc/nef_swa_clf_{}.pdf'", ".", "format", "(", "args", ".", "job_id", ")", ")", "\n", "eval_corrupted_data", "(", "args", ",", "'nef_swa_clf_{}'", ".", "format", "(", "args", ".", "job_id", ")", ",", "None", ",", "\n", "swa_classifier", ",", "nef", "=", "nef", ",", "eigenvalues", "=", "eigenvalues", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.neuralef-cifar-sgd-trajectory.train_nef": [[237, 339], ["print", "torch.optim.lr_scheduler.CosineAnnealingLR", "range", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.cuda.amp.GradScaler", "torch.cuda.amp.GradScaler", "torch.cuda.amp.GradScaler", "torch.cuda.amp.GradScaler", "torch.cuda.amp.GradScaler", "torch.cuda.amp.GradScaler", "torch.cuda.amp.GradScaler", "torch.cuda.amp.GradScaler", "os.path.isfile", "nef.train", "enumerate", "print", "print", "torch.optim.lr_scheduler.CosineAnnealingLR.step", "nef.eval", "nef.parameters", "torch.optim.RMSprop", "torch.optim.RMSprop", "torch.optim.RMSprop", "torch.optim.RMSprop", "torch.optim.RMSprop", "torch.optim.RMSprop", "torch.optim.RMSprop", "torch.optim.RMSprop", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "print", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "nef.load_state_dict", "torch.optim.SGD.load_state_dict", "checkpoint[].cuda", "print", "print", "data.cuda.cuda", "collected_samples[].cuda", "torch.optim.SGD.zero_grad", "checkpoint[].cuda.data.cpu().numpy", "neuralef-cifar-sgd-trajectory.validate", "nef.state_dict", "torch.optim.SGD.state_dict", "checkpoint[].cuda.data.cpu", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "nef.parameters", "nef.parameters", "torch.cuda.amp.GradScaler.load_state_dict", "amp_autocast", "nef", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.cuda.amp.GradScaler.scale().backward", "torch.cuda.amp.GradScaler.step", "torch.cuda.amp.GradScaler.update", "nef.backward", "torch.optim.SGD.step", "torch.cuda.amp.GradScaler.state_dict", "os.path.join", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "psis_K_psis.permute.permute", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "psis_K_psis.permute.diag", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "checkpoint[].cuda.mul_().add_", "checkpoint[].cuda.data.cpu", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.cuda.amp.GradScaler.scale", "checkpoint[].cuda.mul_", "psis_K_psis.diag.unsqueeze"], "function", ["home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.examples.hydrogen.train", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.swag.SWAG.cuda", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.swag.SWAG.cuda", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.swag.SWAG.cuda", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.neuralef-cifar-sgd-trajectory.validate"], ["", "def", "train_nef", "(", "args", ",", "nef", ",", "collected_samples", ",", "classifier", ",", "swa_classifier", ",", "\n", "train_loader", ",", "val_loader", ",", "ood_loader", ",", "\n", "k", ",", "epochs", ",", "optimizer_type", ",", "lr", ",", "\n", "momentum", ",", "amp", ",", "num_classes", ",", "class_cond", ")", ":", "\n", "\n", "\t", "num_samples", "=", "collected_samples", ".", "shape", "[", "0", "]", "\n", "print", "(", "collected_samples", ".", "shape", ")", "# 1000*50000*10", "\n", "\n", "if", "optimizer_type", "==", "'Adam'", ":", "\n", "\t\t", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "nef", ".", "parameters", "(", ")", ",", "lr", "=", "lr", ")", "\n", "", "elif", "optimizer_type", "==", "'RMSprop'", ":", "\n", "\t\t", "optimizer", "=", "torch", ".", "optim", ".", "RMSprop", "(", "nef", ".", "parameters", "(", ")", ",", "lr", "=", "lr", ",", "momentum", "=", "momentum", ")", "\n", "", "else", ":", "\n", "\t\t", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "nef", ".", "parameters", "(", ")", ",", "lr", "=", "lr", ",", "momentum", "=", "momentum", ")", "\n", "\n", "", "if", "amp", ":", "\n", "\t\t", "amp_autocast", "=", "torch", ".", "cuda", ".", "amp", ".", "autocast", "\n", "loss_scaler", "=", "torch", ".", "cuda", ".", "amp", ".", "GradScaler", "(", ")", "\n", "", "else", ":", "\n", "\t\t", "amp_autocast", "=", "suppress", "# do nothing", "\n", "loss_scaler", "=", "None", "\n", "\n", "", "eigenvalues", "=", "None", "\n", "start_epoch", "=", "0", "\n", "if", "args", ".", "nef_resume", ":", "\n", "\t\t", "if", "os", ".", "path", ".", "isfile", "(", "args", ".", "nef_resume", ")", ":", "\n", "\t\t\t", "print", "(", "\"=> loading checkpoint '{}'\"", ".", "format", "(", "args", ".", "nef_resume", ")", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "args", ".", "nef_resume", ",", "map_location", "=", "'cpu'", ")", "\n", "start_epoch", "=", "checkpoint", "[", "'epoch'", "]", "\n", "nef", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "optimizer", ".", "load_state_dict", "(", "checkpoint", "[", "'optimizer'", "]", ")", "\n", "if", "loss_scaler", "is", "not", "None", ":", "\n", "\t\t\t\t", "loss_scaler", ".", "load_state_dict", "(", "checkpoint", "[", "'loss_scaler'", "]", ")", "\n", "", "eigenvalues", "=", "checkpoint", "[", "'eigenvalues'", "]", ".", "cuda", "(", ")", "\n", "print", "(", "\"=> loaded checkpoint '{}' (epoch {})\"", "\n", ".", "format", "(", "args", ".", "nef_resume", ",", "checkpoint", "[", "'epoch'", "]", ")", ")", "\n", "", "else", ":", "\n", "\t\t\t", "print", "(", "\"=> no checkpoint found at '{}'\"", ".", "format", "(", "args", ".", "nef_resume", ")", ")", "\n", "", "", "scheduler", "=", "CosineAnnealingLR", "(", "optimizer", ",", "epochs", ",", "last_epoch", "=", "start_epoch", "-", "1", ")", "\n", "\n", "for", "epoch", "in", "range", "(", "start_epoch", ",", "epochs", ")", ":", "\n", "\t\t", "nef", ".", "train", "(", ")", "\n", "for", "i", ",", "(", "data", ",", "_", ",", "indices", ")", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "\t\t\t", "data", "=", "data", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "samples_batch", "=", "collected_samples", "[", ":", ",", "indices", ",", ":", "]", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "with", "amp_autocast", "(", ")", ":", "\n", "\t\t\t\t", "psis_X", "=", "nef", "(", "data", ")", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "\t\t\t\t", "if", "class_cond", ":", "\n", "\t\t\t\t\t", "samples_batch_psis", "=", "torch", ".", "einsum", "(", "'nbc,bck->nkc'", ",", "samples_batch", ",", "psis_X", ")", "\n", "psis_K_psis", "=", "torch", ".", "einsum", "(", "'nkc,nlc->klc'", ",", "samples_batch_psis", ",", "samples_batch_psis", ")", "/", "num_samples", "\n", "psis_K_psis", "=", "psis_K_psis", ".", "permute", "(", "2", ",", "0", ",", "1", ")", "\n", "\n", "cur_eigenvalues", "=", "torch", ".", "diagonal", "(", "psis_K_psis", ",", "dim1", "=", "-", "2", ",", "dim2", "=", "-", "1", ")", "\n", "mask", "=", "-", "(", "psis_K_psis", "/", "cur_eigenvalues", ".", "unsqueeze", "(", "1", ")", ")", ".", "tril", "(", "diagonal", "=", "-", "1", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "mask", "+=", "torch", ".", "eye", "(", "k", ",", "device", "=", "psis_X", ".", "device", ")", "\n", "mask", "/=", "num_samples", "\n", "grad", "=", "torch", ".", "einsum", "(", "'nkc,ckl->nlc'", ",", "samples_batch_psis", ",", "mask", ")", "\n", "grad", "=", "torch", ".", "einsum", "(", "'nbc,nkc->bck'", ",", "samples_batch", ",", "grad", ")", "\n", "cur_eigenvalues", "/=", "psis_X", ".", "shape", "[", "0", "]", "**", "2", "\n", "", "else", ":", "\n", "\t\t\t\t\t", "samples_batch_psis", "=", "torch", ".", "einsum", "(", "'nbc,bck->nk'", ",", "samples_batch", ",", "psis_X", ")", "\n", "psis_K_psis", "=", "samples_batch_psis", ".", "T", "@", "samples_batch_psis", "/", "num_samples", "\n", "\n", "cur_eigenvalues", "=", "psis_K_psis", ".", "diag", "(", ")", "\n", "mask", "=", "-", "(", "psis_K_psis", "/", "cur_eigenvalues", ")", ".", "tril", "(", "diagonal", "=", "-", "1", ")", ".", "T", "\n", "mask", "+=", "torch", ".", "eye", "(", "k", ",", "device", "=", "psis_X", ".", "device", ")", "\n", "mask", "/=", "num_samples", "\n", "grad", "=", "samples_batch_psis", "@", "mask", "\n", "grad", "=", "torch", ".", "einsum", "(", "'nbc,nk->bck'", ",", "samples_batch", ",", "grad", ")", "\n", "cur_eigenvalues", "/=", "(", "psis_X", ".", "shape", "[", "0", "]", "*", "psis_X", ".", "shape", "[", "1", "]", ")", "**", "2", "\n", "\n", "", "if", "eigenvalues", "is", "None", ":", "\n", "\t\t\t\t\t", "eigenvalues", "=", "cur_eigenvalues", "\n", "", "else", ":", "\n", "\t\t\t\t\t", "eigenvalues", ".", "mul_", "(", "0.9", ")", ".", "add_", "(", "cur_eigenvalues", ",", "alpha", "=", "0.1", ")", "\n", "\n", "", "", "optimizer", ".", "zero_grad", "(", ")", "\n", "if", "loss_scaler", "is", "not", "None", ":", "\n", "\t\t\t\t", "loss_scaler", ".", "scale", "(", "psis_X", ")", ".", "backward", "(", "-", "grad", ")", "\n", "loss_scaler", ".", "step", "(", "optimizer", ")", "\n", "loss_scaler", ".", "update", "(", ")", "\n", "", "else", ":", "\n", "\t\t\t\t", "psis_X", ".", "backward", "(", "-", "grad", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "", "", "print", "(", "'Training neural eigenfunctions epoch {}'", ".", "format", "(", "epoch", ")", ")", "\n", "print", "(", "'\\tEigenvalues:'", ",", "eigenvalues", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "scheduler", ".", "step", "(", ")", "\n", "nef", ".", "eval", "(", ")", "\n", "validate", "(", "args", ",", "val_loader", ",", "swa_classifier", ",", "nef", ",", "eigenvalues", ")", "[", "-", "1", "]", "\n", "\n", "if", "epoch", "%", "10", "==", "0", "or", "epoch", "==", "epochs", "-", "1", ":", "\n", "\t\t\t", "ckpt", "=", "{", "'epoch'", ":", "epoch", "+", "1", "}", "\n", "ckpt", "[", "'state_dict'", "]", "=", "nef", ".", "state_dict", "(", ")", "\n", "ckpt", "[", "'optimizer'", "]", "=", "optimizer", ".", "state_dict", "(", ")", "\n", "if", "loss_scaler", "is", "not", "None", ":", "\n", "\t\t\t\t", "ckpt", "[", "'loss_scaler'", "]", "=", "loss_scaler", ".", "state_dict", "(", ")", "\n", "", "ckpt", "[", "'eigenvalues'", "]", "=", "eigenvalues", ".", "data", ".", "cpu", "(", ")", "\n", "torch", ".", "save", "(", "ckpt", ",", "os", ".", "path", ".", "join", "(", "args", ".", "save_dir", ",", "\n", "'nef_checkpoint_{}.th'", ".", "format", "(", "epoch", ")", ")", ")", "\n", "", "", "return", "eigenvalues", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.neuralef-cifar-sgd-trajectory.train_classifier": [[341, 414], ["torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.swa_utils.SWALR", "time.time", "timm.utils.AverageMeter", "range", "classifier.parameters", "os.path.isfile", "utils.convert_secs2time", "print", "neuralef-cifar-sgd-trajectory.train_classifier_one_epoch", "neuralef-cifar-sgd-trajectory.validate", "max", "timm.utils.AverageMeter.update", "time.time", "os.path.join", "print", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "classifier.load_state_dict", "swa_classifier.load_state_dict", "torch.optim.SGD.load_state_dict", "print", "print", "swa_classifier.update_parameters", "torch.optim.swa_utils.SWALR.step", "torch.optim.lr_scheduler.MultiStepLR.step", "classifier.state_dict", "swa_classifier.state_dict", "torch.optim.SGD.state_dict", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "swag_classifier.collect_model", "torch.optim.swa_utils.update_bn", "neuralef-cifar-sgd-trajectory.validate", "os.path.join", "time.time", "utils.time_string", "neuralef-cifar-sgd-trajectory.swag_validate", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device"], "function", ["home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.utils.convert_secs2time", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.neuralef-cifar-sgd-trajectory.train_classifier_one_epoch", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.neuralef-cifar-sgd-trajectory.validate", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.swag.SWAG.collect_model", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.neuralef-cifar-sgd-trajectory.validate", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.utils.time_string", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.neuralef-cifar-sgd-trajectory.swag_validate"], ["", "def", "train_classifier", "(", "args", ",", "classifier", ",", "swa_classifier", ",", "swag_classifier", ",", "\n", "train_loader", ",", "nef_collect_train_loader", ",", "val_loader", ")", ":", "\n", "\t", "global", "best_prec1", "\n", "\n", "# define optimizer", "\n", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "classifier", ".", "parameters", "(", ")", ",", "args", ".", "lr", ",", "\n", "momentum", "=", "args", ".", "momentum", ",", "\n", "weight_decay", "=", "args", ".", "weight_decay", ",", "\n", "nesterov", "=", "args", ".", "nesterov", ",", ")", "\n", "\n", "# optionally resume from a checkpoint", "\n", "if", "args", ".", "resume", ":", "\n", "\t\t", "if", "args", ".", "resume", "==", "'auto'", ":", "\n", "\t\t\t", "args", ".", "resume", "=", "os", ".", "path", ".", "join", "(", "args", ".", "save_dir", ",", "'checkpoint.th'", ")", "\n", "", "if", "os", ".", "path", ".", "isfile", "(", "args", ".", "resume", ")", ":", "\n", "\t\t\t", "print", "(", "\"=> loading checkpoint '{}'\"", ".", "format", "(", "args", ".", "resume", ")", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "args", ".", "resume", ",", "map_location", "=", "'cpu'", ")", "\n", "args", ".", "start_epoch", "=", "checkpoint", "[", "'epoch'", "]", "\n", "best_prec1", "=", "checkpoint", "[", "'best_prec1'", "]", "\n", "classifier", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "swa_classifier", ".", "load_state_dict", "(", "checkpoint", "[", "'swa_state_dict'", "]", ")", "\n", "optimizer", ".", "load_state_dict", "(", "checkpoint", "[", "'optimizer'", "]", ")", "\n", "print", "(", "\"=> loaded checkpoint '{}' (epoch {} acc {})\"", "\n", ".", "format", "(", "args", ".", "resume", ",", "checkpoint", "[", "'epoch'", "]", ",", "checkpoint", "[", "'prec1'", "]", ")", ")", "\n", "", "else", ":", "\n", "\t\t\t", "print", "(", "\"=> no checkpoint found at '{}'\"", ".", "format", "(", "args", ".", "resume", ")", ")", "\n", "\n", "", "", "scheduler", "=", "MultiStepLR", "(", "optimizer", ",", "milestones", "=", "args", ".", "milestones", ",", "\n", "gamma", "=", "args", ".", "gamma", ",", "\n", "last_epoch", "=", "args", ".", "start_epoch", "-", "1", ")", "\n", "swa_scheduler", "=", "SWALR", "(", "optimizer", ",", "anneal_strategy", "=", "\"linear\"", ",", "\n", "anneal_epochs", "=", "args", ".", "swa_anneal_epochs", ",", "\n", "swa_lr", "=", "args", ".", "swa_lr", ",", "last_epoch", "=", "args", ".", "start_epoch", "-", "1", ")", "\n", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "epoch_time", "=", "AverageMeter", "(", ")", "\n", "for", "epoch", "in", "range", "(", "args", ".", "start_epoch", ",", "args", ".", "epochs", ")", ":", "\n", "\n", "\t\t", "need_hour", ",", "need_mins", ",", "need_secs", "=", "convert_secs2time", "(", "epoch_time", ".", "avg", "*", "(", "args", ".", "epochs", "-", "epoch", ")", ")", "\n", "need_time", "=", "'[Need: {:02d}:{:02d}:{:02d}]'", ".", "format", "(", "need_hour", ",", "need_mins", ",", "need_secs", ")", "\n", "print", "(", "'==>>{:s} [Epoch={:03d}/{:03d}] {:s}'", ".", "format", "(", "\n", "time_string", "(", ")", ",", "epoch", ",", "args", ".", "epochs", ",", "need_time", ")", "+", "' [Best : Accuracy={:.4f}]'", ".", "format", "(", "best_prec1", ")", ")", "\n", "# train for one epoch", "\n", "train_classifier_one_epoch", "(", "args", ",", "train_loader", ",", "nef_collect_train_loader", ",", "\n", "classifier", ",", "optimizer", ",", "epoch", ")", "\n", "if", "epoch", ">", "args", ".", "swa_start", ":", "\n", "\t\t\t", "swa_classifier", ".", "update_parameters", "(", "classifier", ")", "\n", "if", "args", ".", "swag", ":", "\n", "\t\t\t\t", "swag_classifier", ".", "collect_model", "(", "classifier", ")", "\n", "", "swa_scheduler", ".", "step", "(", ")", "\n", "", "else", ":", "\n", "\t\t\t", "scheduler", ".", "step", "(", ")", "\n", "\n", "# evaluate on validation set", "\n", "", "_", ",", "prec1", ",", "_", ",", "_", "=", "validate", "(", "args", ",", "val_loader", ",", "classifier", ")", "\n", "best_prec1", "=", "max", "(", "prec1", ",", "best_prec1", ")", "\n", "\n", "if", "epoch", "%", "10", "==", "0", "or", "epoch", "==", "args", ".", "epochs", "-", "1", ":", "\n", "\t\t\t", "if", "epoch", ">", "args", ".", "swa_start", ":", "\n", "\t\t\t\t", "update_bn", "(", "train_loader", ",", "swa_classifier", ",", "device", "=", "torch", ".", "device", "(", "'cuda'", ")", ")", "\n", "validate", "(", "args", ",", "val_loader", ",", "swa_classifier", ")", "\n", "if", "args", ".", "swag", ":", "\n", "\t\t\t\t\t", "swag_validate", "(", "args", ",", "train_loader", ",", "val_loader", ",", "swag_classifier", ")", "\n", "\n", "", "", "ckpt", "=", "{", "'epoch'", ":", "epoch", "+", "1", ",", "'best_prec1'", ":", "best_prec1", ",", "'prec1'", ":", "prec1", "}", "\n", "ckpt", "[", "'state_dict'", "]", "=", "classifier", ".", "state_dict", "(", ")", "\n", "ckpt", "[", "'swa_state_dict'", "]", "=", "swa_classifier", ".", "state_dict", "(", ")", "\n", "ckpt", "[", "'optimizer'", "]", "=", "optimizer", ".", "state_dict", "(", ")", "\n", "torch", ".", "save", "(", "ckpt", ",", "os", ".", "path", ".", "join", "(", "args", ".", "save_dir", ",", "'checkpoint_{}.th'", ".", "format", "(", "epoch", ")", ")", ")", "\n", "\n", "", "epoch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "start_time", ")", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.neuralef-cifar-sgd-trajectory.train_classifier_one_epoch": [[415, 459], ["classifier.train", "time.time", "enumerate", "print", "timm.utils.AverageMeter", "timm.utils.AverageMeter", "timm.utils.AverageMeter", "timm.utils.AverageMeter", "data_time.update", "classifier", "torch.cross_entropy", "classifier.argmax().eq().float().mean", "optimizer.zero_grad", "F.cross_entropy.backward", "optimizer.step", "losses.update", "top1.update", "batch_time.update", "time.time", "data.cuda", "label.cuda", "F.cross_entropy.item", "label.size", "output.argmax().eq().float().mean.item", "label.size", "time.time", "classifier.argmax().eq().float", "classifier.eval", "collected_samples.append", "classifier.train", "time.time", "data_nef.cuda.cuda", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "classifier.argmax().eq", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "one_sample.append", "len", "classifier", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "classifier.argmax"], "function", ["home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.examples.hydrogen.train", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.swag.SWAG.cuda", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.swag.SWAG.cuda", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.examples.hydrogen.train", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.swag.SWAG.cuda"], ["", "", "def", "train_classifier_one_epoch", "(", "args", ",", "train_loader", ",", "nef_collect_train_loader", ",", "\n", "classifier", ",", "optimizer", ",", "epoch", ")", ":", "\n", "\t", "global", "collected_samples", "\n", "batch_time", ",", "data_time", "=", "AverageMeter", "(", ")", ",", "AverageMeter", "(", ")", "\n", "losses", ",", "top1", "=", "AverageMeter", "(", ")", ",", "AverageMeter", "(", ")", "\n", "\n", "classifier", ".", "train", "(", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "for", "i", ",", "(", "data", ",", "label", ")", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "\t\t", "data_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "data", ",", "label", "=", "data", ".", "cuda", "(", "non_blocking", "=", "True", ")", ",", "label", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "\n", "output", "=", "classifier", "(", "data", ")", "\n", "loss", "=", "F", ".", "cross_entropy", "(", "output", ",", "label", ")", "\n", "acc", "=", "output", ".", "argmax", "(", "dim", "=", "1", ")", ".", "eq", "(", "label", ")", ".", "float", "(", ")", ".", "mean", "(", ")", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "losses", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "label", ".", "size", "(", "0", ")", ")", "\n", "top1", ".", "update", "(", "acc", ".", "item", "(", ")", ",", "label", ".", "size", "(", "0", ")", ")", "\n", "\n", "if", "epoch", ">", "args", ".", "swa_start", "+", "args", ".", "swa_anneal_epochs", ":", "\n", "\t\t\t", "if", "(", "(", "epoch", "-", "args", ".", "swa_start", "-", "args", ".", "swa_anneal_epochs", "-", "1", ")", "*", "\n", "len", "(", "train_loader", ")", "+", "i", ")", "%", "args", ".", "nef_collect_freq", "==", "0", ":", "\n", "\t\t\t\t", "one_sample", "=", "[", "]", "\n", "classifier", ".", "eval", "(", ")", "\n", "for", "data_nef", ",", "_", "in", "nef_collect_train_loader", ":", "\n", "\t\t\t\t\t", "data_nef", "=", "data_nef", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "\t\t\t\t\t\t", "one_sample", ".", "append", "(", "classifier", "(", "data_nef", ")", ")", "\n", "", "", "collected_samples", ".", "append", "(", "torch", ".", "cat", "(", "one_sample", ")", ".", "cpu", "(", ")", ")", "\n", "classifier", ".", "train", "(", ")", "\n", "\n", "", "", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "", "print", "(", "'\\tLr: {lr:.4f}, '", "\n", "'Time {batch_time.avg:.3f}, '", "\n", "'Data {data_time.avg:.3f}, '", "\n", "'Loss {loss.avg:.4f}, '", "\n", "'Prec@1 {top1.avg:.4f}'", ".", "format", "(", "lr", "=", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", ",", "\n", "batch_time", "=", "batch_time", ",", "data_time", "=", "data_time", ",", "loss", "=", "losses", ",", "top1", "=", "top1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.neuralef-cifar-sgd-trajectory.validate": [[460, 504], ["classifier.eval", "len", "nef.eval", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat().softmax", "torch.cat().softmax", "torch.cat().softmax", "torch.cat().softmax", "torch.cat().softmax", "torch.cat().softmax", "torch.cat().softmax", "torch.cat().softmax", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "utils._ECELoss().cuda", "_ECELoss().cuda.item", "float", "len", "print", "data.cuda.cuda", "target.cuda.cuda", "torch.cat.append", "output.softmax().mean().log.argmax().eq().sum().item", "torch.cat().softmax.append", "torch.cat.append", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "classifier().float", "output.softmax().mean().log.softmax().mean().log", "neuralef-cifar-sgd-trajectory.ent", "torch.cross_entropy().item", "target.cuda.size", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "utils._ECELoss", "_ECELoss().cuda.", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "nef", "output.softmax().mean().log.softmax", "output.softmax().mean().log.argmax().eq().sum", "classifier", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "eigenvalues.sqrt", "output.softmax().mean().log.softmax().mean", "torch.cross_entropy", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "output.softmax().mean().log.argmax().eq", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "output.softmax().mean().log.softmax", "output.softmax().mean().log.argmax"], "function", ["home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.swag.SWAG.cuda", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.swag.SWAG.cuda", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.swag.SWAG.cuda", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.neuralef-cifar-sgd-trajectory.ent", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.swag.SWAG.cuda", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.swag.SWAG.cuda", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.swag.SWAG.cuda", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.swag.SWAG.cuda", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.swag.SWAG.cuda", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.swag.SWAG.cuda", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.swag.SWAG.cuda", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.swag.SWAG.cuda"], ["", "def", "validate", "(", "args", ",", "val_loader", ",", "classifier", ",", "nef", "=", "None", ",", "eigenvalues", "=", "None", ",", "verbose", "=", "True", ")", ":", "\n", "\t", "classifier", ".", "eval", "(", ")", "\n", "if", "nef", "is", "not", "None", ":", "\n", "\t\t", "nef", ".", "eval", "(", ")", "\n", "\n", "", "test_loss", ",", "correct", "=", "0", ",", "0", "\n", "probs", ",", "labels", ",", "uncs", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "\t\t", "for", "data", ",", "target", "in", "val_loader", ":", "\n", "\t\t\t", "data", "=", "data", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "target", "=", "target", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "with", "torch", ".", "cuda", ".", "amp", ".", "autocast", "(", ")", ":", "\n", "\t\t\t\t", "output", "=", "classifier", "(", "data", ")", ".", "float", "(", ")", "\n", "\n", "", "if", "nef", "is", "not", "None", ":", "\n", "\t\t\t\t", "with", "torch", ".", "cuda", ".", "amp", ".", "autocast", "(", ")", ":", "\n", "\t\t\t\t\t", "nef_output", "=", "nef", "(", "data", ")", "\n", "noise", "=", "torch", ".", "randn", "(", "args", ".", "nef_num_samples_eval", ",", "*", "eigenvalues", ".", "shape", ")", ".", "cuda", "(", ")", "*", "eigenvalues", ".", "sqrt", "(", ")", "\n", "if", "args", ".", "nef_class_cond", ":", "\n", "\t\t\t\t\t\t", "output", "=", "torch", ".", "einsum", "(", "\"sck,bck->sbc\"", ",", "noise", ",", "nef_output", ")", "+", "output", "\n", "", "else", ":", "\n", "\t\t\t\t\t\t", "output", "=", "torch", ".", "einsum", "(", "\"sk,bck->sbc\"", ",", "noise", ",", "nef_output", ")", "+", "output", "\n", "", "", "output", "=", "output", ".", "softmax", "(", "-", "1", ")", ".", "mean", "(", "0", ")", ".", "log", "(", ")", "\n", "", "uncs", ".", "append", "(", "ent", "(", "output", ".", "softmax", "(", "-", "1", ")", ")", ")", "\n", "test_loss", "+=", "F", ".", "cross_entropy", "(", "output", ",", "target", ")", ".", "item", "(", ")", "*", "target", ".", "size", "(", "0", ")", "\n", "correct", "+=", "output", ".", "argmax", "(", "dim", "=", "1", ")", ".", "eq", "(", "target", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "probs", ".", "append", "(", "output", ")", "\n", "labels", ".", "append", "(", "target", ")", "\n", "\n", "", "labels", "=", "torch", ".", "cat", "(", "labels", ")", "\n", "probs", "=", "torch", ".", "cat", "(", "probs", ")", ".", "softmax", "(", "-", "1", ")", "\n", "uncs", "=", "torch", ".", "cat", "(", "uncs", ")", "\n", "confidences", ",", "predictions", "=", "torch", ".", "max", "(", "probs", ",", "1", ")", "\n", "ece_func", "=", "_ECELoss", "(", ")", ".", "cuda", "(", ")", "\n", "ece", "=", "ece_func", "(", "confidences", ",", "predictions", ",", "labels", ",", "\n", "title", "=", "'cifar_plots/{}_nef{}.pdf'", ".", "format", "(", "\n", "args", ".", "job_id", ",", "nef", "is", "not", "None", ")", ")", ".", "item", "(", ")", "\n", "\n", "", "test_loss", "/=", "len", "(", "val_loader", ".", "dataset", ")", "\n", "top1", "=", "float", "(", "correct", ")", "/", "len", "(", "val_loader", ".", "dataset", ")", "\n", "if", "verbose", ":", "\n", "\t\t", "print", "(", "'\\tTest set: Average loss: {:.4f},'", "\n", "' Accuracy: {:.4f}, ECE: {:.4f}'", ".", "format", "(", "test_loss", ",", "top1", ",", "ece", ")", ")", "\n", "", "return", "test_loss", ",", "top1", ",", "ece", ",", "uncs", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.neuralef-cifar-sgd-trajectory.swag_validate": [[505, 539], ["range", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "outputs.softmax().mean.softmax().mean", "neuralef-cifar-sgd-trajectory.ent", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.cross_entropy().item", "outputs.softmax().mean.argmax().eq().float().mean().item", "utils._ECELoss().cuda", "_ECELoss().cuda.item", "swag_classifier.sample", "swag_classifier.train", "torch.optim.swa_utils.update_bn", "swag_classifier.eval", "print", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "outputs.softmax().mean.append", "outputs.softmax().mean.softmax", "torch.cross_entropy", "outputs.softmax().mean.argmax().eq().float().mean", "utils._ECELoss", "_ECELoss().cuda.", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "data.cuda.cuda", "one_run_output.append", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "outputs.softmax().mean.log", "torch.cat.append", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "swag_classifier().float", "outputs.softmax().mean.argmax().eq().float", "target.cuda", "swag_classifier", "outputs.softmax().mean.argmax().eq", "outputs.softmax().mean.argmax"], "function", ["home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.neuralef-cifar-sgd-trajectory.ent", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.swag.SWAG.cuda", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.swag.SWAG.sample", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.examples.hydrogen.train", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.swag.SWAG.cuda", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.swag.SWAG.cuda"], ["", "def", "swag_validate", "(", "args", ",", "train_loader", ",", "val_loader", ",", "swag_classifier", ",", "\n", "num_mc_samples", "=", "32", ",", "verbose", "=", "True", ")", ":", "\n", "\t", "outputs", ",", "labels", "=", "[", "]", ",", "[", "]", "\n", "for", "_", "in", "range", "(", "num_mc_samples", ")", ":", "\n", "\t\t", "swag_classifier", ".", "sample", "(", ".5", ")", "\n", "swag_classifier", ".", "train", "(", ")", "\n", "update_bn", "(", "train_loader", ",", "swag_classifier", ",", "device", "=", "torch", ".", "device", "(", "'cuda'", ")", ")", "\n", "\n", "swag_classifier", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "\t\t\t", "one_run_output", "=", "[", "]", "\n", "for", "data", ",", "target", "in", "val_loader", ":", "\n", "\t\t\t\t", "data", "=", "data", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "if", "_", "==", "0", ":", "\n", "\t\t\t\t\t", "labels", ".", "append", "(", "target", ".", "cuda", "(", "non_blocking", "=", "True", ")", ")", "\n", "", "with", "torch", ".", "cuda", ".", "amp", ".", "autocast", "(", ")", ":", "\n", "\t\t\t\t\t", "output", "=", "swag_classifier", "(", "data", ")", ".", "float", "(", ")", "\n", "", "one_run_output", ".", "append", "(", "output", ")", "\n", "", "outputs", ".", "append", "(", "torch", ".", "cat", "(", "one_run_output", ")", ")", "\n", "\n", "", "", "outputs", "=", "torch", ".", "stack", "(", "outputs", ")", "\n", "labels", "=", "torch", ".", "cat", "(", "labels", ")", "\n", "outputs", "=", "outputs", ".", "softmax", "(", "-", "1", ")", ".", "mean", "(", "0", ")", "\n", "uncs", "=", "ent", "(", "outputs", ")", "\n", "confidences", ",", "predictions", "=", "torch", ".", "max", "(", "outputs", ",", "1", ")", "\n", "test_loss", "=", "F", ".", "cross_entropy", "(", "outputs", ".", "log", "(", ")", ",", "labels", ")", ".", "item", "(", ")", "\n", "top1", "=", "outputs", ".", "argmax", "(", "dim", "=", "1", ")", ".", "eq", "(", "labels", ")", ".", "float", "(", ")", ".", "mean", "(", ")", ".", "item", "(", ")", "\n", "ece_func", "=", "_ECELoss", "(", ")", ".", "cuda", "(", ")", "\n", "ece", "=", "ece_func", "(", "confidences", ",", "predictions", ",", "labels", ",", "\n", "title", "=", "'cifar_plots/{}_swag.pdf'", ".", "format", "(", "args", ".", "job_id", ")", ")", ".", "item", "(", ")", "\n", "if", "verbose", ":", "\n", "\t\t", "print", "(", "'\\tTest set: Average loss: {:.4f},'", "\n", "' Accuracy: {:.4f}, ECE: {:.4f}'", ".", "format", "(", "test_loss", ",", "top1", ",", "ece", ")", ")", "\n", "", "return", "test_loss", ",", "top1", ",", "ece", ",", "uncs", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.neuralef-cifar-sgd-trajectory.eval_corrupted_data": [[540, 569], ["torch.tensor().view().cuda", "torch.tensor().view().cuda", "torch.tensor().view().cuda", "torch.tensor().view().cuda", "torch.tensor().view().cuda", "torch.tensor().view().cuda", "torch.tensor().view().cuda", "torch.tensor().view().cuda", "torch.tensor().view().cuda", "torch.tensor().view().cuda", "torch.tensor().view().cuda", "torch.tensor().view().cuda", "torch.tensor().view().cuda", "torch.tensor().view().cuda", "torch.tensor().view().cuda", "torch.tensor().view().cuda", "os.listdir", "os.listdir.remove", "numpy.zeros", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "enumerate", "numpy.save", "numpy.load", "range", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "len", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "os.path.join", "torch.utils.data.TensorDataset", "torch.utils.data.TensorDataset", "torch.utils.data.TensorDataset", "torch.utils.data.TensorDataset", "torch.utils.data.TensorDataset", "torch.utils.data.TensorDataset", "torch.utils.data.TensorDataset", "torch.utils.data.TensorDataset", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "numpy.array", "numpy.load", "torch.from_numpy().float().permute", "torch.from_numpy().float().permute", "torch.from_numpy().float().permute", "torch.from_numpy().float().permute", "torch.from_numpy().float().permute", "torch.from_numpy().float().permute", "torch.from_numpy().float().permute", "torch.from_numpy().float().permute", "torch.tensor().view().cuda.cpu", "neuralef-cifar-sgd-trajectory.validate", "neuralef-cifar-sgd-trajectory.swag_validate", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "os.path.join", "torch.tensor().view().cuda.cpu", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "function", ["home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.swag.SWAG.cuda", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.swag.SWAG.cuda", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.swag.SWAG.cuda", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.swag.SWAG.cuda", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.swag.SWAG.cuda", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.swag.SWAG.cuda", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.swag.SWAG.cuda", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.swag.SWAG.cuda", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.swag.SWAG.cuda", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.swag.SWAG.cuda", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.swag.SWAG.cuda", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.swag.SWAG.cuda", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.swag.SWAG.cuda", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.swag.SWAG.cuda", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.swag.SWAG.cuda", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.swag.SWAG.cuda", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.neuralef-cifar-sgd-trajectory.validate", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.neuralef-cifar-sgd-trajectory.swag_validate"], ["", "def", "eval_corrupted_data", "(", "args", ",", "token", "=", "'default'", ",", "train_loader", "=", "None", ",", "classifier", "=", "None", ",", "\n", "swag_classifier", "=", "None", ",", "nef", "=", "None", ",", "eigenvalues", "=", "None", ")", ":", "\n", "# for only cifar10", "\n", "\t", "data_mean", "=", "torch", ".", "tensor", "(", "[", "0.485", ",", "0.456", ",", "0.406", "]", ")", ".", "view", "(", "1", ",", "-", "1", ",", "1", ",", "1", ")", ".", "cuda", "(", ")", "\n", "data_std", "=", "torch", ".", "tensor", "(", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", ".", "view", "(", "1", ",", "-", "1", ",", "1", ",", "1", ")", ".", "cuda", "(", ")", "\n", "\n", "corrupted_data_path", "=", "'./CIFAR-10-C/CIFAR-10-C'", "\n", "corrupted_data_files", "=", "os", ".", "listdir", "(", "corrupted_data_path", ")", "\n", "corrupted_data_files", ".", "remove", "(", "'labels.npy'", ")", "\n", "results", "=", "np", ".", "zeros", "(", "(", "5", ",", "len", "(", "corrupted_data_files", ")", ",", "3", ")", ")", "\n", "labels", "=", "torch", ".", "from_numpy", "(", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "corrupted_data_path", ",", "'labels.npy'", ")", ")", ")", ".", "long", "(", ")", "\n", "for", "ii", ",", "corrupted_data_file", "in", "enumerate", "(", "corrupted_data_files", ")", ":", "\n", "\t\t", "corrupted_data", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "corrupted_data_path", ",", "corrupted_data_file", ")", ")", "\n", "for", "i", "in", "range", "(", "5", ")", ":", "\n", "# print(corrupted_data_file, i)", "\n", "\t\t\t", "images", "=", "torch", ".", "from_numpy", "(", "corrupted_data", "[", "i", "*", "10000", ":", "(", "i", "+", "1", ")", "*", "10000", "]", ")", ".", "float", "(", ")", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "/", "255.", "\n", "images", "=", "(", "images", "-", "data_mean", ".", "cpu", "(", ")", ")", "/", "data_std", ".", "cpu", "(", ")", "\n", "corrupted_dataset", "=", "torch", ".", "utils", ".", "data", ".", "TensorDataset", "(", "images", ",", "labels", "[", "i", "*", "10000", ":", "(", "i", "+", "1", ")", "*", "10000", "]", ")", "\n", "corrupted_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "corrupted_dataset", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "False", ",", "num_workers", "=", "args", ".", "workers", ",", "\n", "pin_memory", "=", "False", ",", "sampler", "=", "None", ",", "drop_last", "=", "False", ")", "\n", "if", "swag_classifier", "is", "None", ":", "\n", "\t\t\t\t", "r1", ",", "r2", ",", "r3", ",", "_", "=", "validate", "(", "args", ",", "corrupted_loader", ",", "classifier", ",", "\n", "nef", ",", "eigenvalues", ",", "verbose", "=", "False", ")", "\n", "", "else", ":", "\n", "\t\t\t\t", "r1", ",", "r2", ",", "r3", ",", "_", "=", "swag_validate", "(", "args", ",", "train_loader", ",", "corrupted_loader", ",", "\n", "swag_classifier", ",", "verbose", "=", "False", ")", "\n", "", "results", "[", "i", ",", "ii", "]", "=", "np", ".", "array", "(", "[", "r1", ",", "r2", ",", "r3", "]", ")", "\n", "", "", "np", ".", "save", "(", "'corrupted_results/npys/{}.npy'", ".", "format", "(", "token", ")", ",", "results", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.neuralef-cifar-sgd-trajectory.ent": [[570, 572], ["p.add().log", "p.add"], "function", ["None"], ["", "def", "ent", "(", "p", ")", ":", "\n", "\t", "return", "-", "(", "p", "*", "p", ".", "add", "(", "1e-6", ")", ".", "log", "(", ")", ")", ".", "sum", "(", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.swag.CovarianceSpace.__init__": [[15, 25], ["super().__init__", "swag.CovarianceSpace.register_buffer", "swag.CovarianceSpace.register_buffer", "torch.zeros", "torch.empty"], "methods", ["home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.src.spin.SpectralNetwork.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_parameters", ",", "max_rank", "=", "100", ")", ":", "\n", "        ", "super", "(", "CovarianceSpace", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "num_parameters", "=", "num_parameters", "\n", "\n", "self", ".", "register_buffer", "(", "'rank'", ",", "torch", ".", "zeros", "(", "1", ",", "dtype", "=", "torch", ".", "long", ")", ")", "\n", "self", ".", "register_buffer", "(", "'cov_mat_sqrt'", ",", "\n", "torch", ".", "empty", "(", "0", ",", "self", ".", "num_parameters", ",", "dtype", "=", "torch", ".", "float32", ")", ")", "\n", "\n", "self", ".", "max_rank", "=", "max_rank", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.swag.CovarianceSpace.collect_vector": [[26, 31], ["torch.cat", "torch.min().view", "swag.CovarianceSpace.rank.item", "vector.view", "torch.min", "torch.as_tensor"], "methods", ["None"], ["", "def", "collect_vector", "(", "self", ",", "vector", ")", ":", "\n", "        ", "if", "self", ".", "rank", ".", "item", "(", ")", "+", "1", ">", "self", ".", "max_rank", ":", "\n", "            ", "self", ".", "cov_mat_sqrt", "=", "self", ".", "cov_mat_sqrt", "[", "1", ":", ",", ":", "]", "\n", "", "self", ".", "cov_mat_sqrt", "=", "torch", ".", "cat", "(", "(", "self", ".", "cov_mat_sqrt", ",", "vector", ".", "view", "(", "1", ",", "-", "1", ")", ")", ",", "dim", "=", "0", ")", "\n", "self", ".", "rank", "=", "torch", ".", "min", "(", "self", ".", "rank", "+", "1", ",", "torch", ".", "as_tensor", "(", "self", ".", "max_rank", ")", ")", ".", "view", "(", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.swag.CovarianceSpace.get_space": [[32, 34], ["swag.CovarianceSpace.cov_mat_sqrt.clone", "swag.CovarianceSpace.cov_mat_sqrt.size"], "methods", ["None"], ["", "def", "get_space", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "cov_mat_sqrt", ".", "clone", "(", ")", "/", "(", "self", ".", "cov_mat_sqrt", ".", "size", "(", "0", ")", "-", "1", ")", "**", "0.5", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.swag.CovarianceSpace._load_from_state_dict": [[35, 42], ["state_dict[].item", "swag.CovarianceSpace.cov_mat_sqrt.new_empty", "super()._load_from_state_dict", "swag.CovarianceSpace.cov_mat_sqrt.size"], "methods", ["home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.swag.CovarianceSpace._load_from_state_dict"], ["", "def", "_load_from_state_dict", "(", "self", ",", "state_dict", ",", "prefix", ",", "local_metadata", ",", "strict", ",", "\n", "missing_keys", ",", "unexpected_keys", ",", "error_msgs", ")", ":", "\n", "        ", "rank", "=", "state_dict", "[", "prefix", "+", "'rank'", "]", ".", "item", "(", ")", "\n", "self", ".", "cov_mat_sqrt", "=", "self", ".", "cov_mat_sqrt", ".", "new_empty", "(", "(", "rank", ",", "self", ".", "cov_mat_sqrt", ".", "size", "(", ")", "[", "1", "]", ")", ")", "\n", "super", "(", "CovarianceSpace", ",", "self", ")", ".", "_load_from_state_dict", "(", "state_dict", ",", "prefix", ",", "local_metadata", ",", "\n", "strict", ",", "missing_keys", ",", "unexpected_keys", ",", "\n", "error_msgs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.swag.SWAG.__init__": [[45, 66], ["super().__init__", "sum", "swag.SWAG.register_buffer", "swag.SWAG.register_buffer", "swag.SWAG.register_buffer", "swag.CovarianceSpace", "torch.zeros", "torch.zeros", "torch.zeros", "dict", "param.numel", "swag.SWAG.base_model.parameters"], "methods", ["home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.src.spin.SpectralNetwork.__init__"], ["    ", "def", "__init__", "(", "self", ",", "base_model", ",", "\n", "subspace_kwargs", "=", "None", ",", "var_clamp", "=", "1e-6", ")", ":", "\n", "        ", "super", "(", "SWAG", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "base_model", "=", "base_model", "\n", "self", ".", "num_parameters", "=", "sum", "(", "param", ".", "numel", "(", ")", "for", "param", "in", "self", ".", "base_model", ".", "parameters", "(", ")", ")", "\n", "\n", "self", ".", "register_buffer", "(", "'mean'", ",", "torch", ".", "zeros", "(", "self", ".", "num_parameters", ")", ")", "\n", "self", ".", "register_buffer", "(", "'sq_mean'", ",", "torch", ".", "zeros", "(", "self", ".", "num_parameters", ")", ")", "\n", "self", ".", "register_buffer", "(", "'n_models'", ",", "torch", ".", "zeros", "(", "1", ",", "dtype", "=", "torch", ".", "long", ")", ")", "\n", "\n", "# Initialize subspace", "\n", "if", "subspace_kwargs", "is", "None", ":", "\n", "            ", "subspace_kwargs", "=", "dict", "(", ")", "\n", "", "self", ".", "subspace", "=", "CovarianceSpace", "(", "num_parameters", "=", "self", ".", "num_parameters", ",", "\n", "**", "subspace_kwargs", ")", "\n", "\n", "self", ".", "var_clamp", "=", "var_clamp", "\n", "\n", "self", ".", "cov_factor", "=", "None", "\n", "self", ".", "model_device", "=", "'cpu'", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.swag.SWAG.cuda": [[68, 71], ["swag.SWAG.base_model.cuda"], "methods", ["home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.swag.SWAG.cuda"], ["", "def", "cuda", "(", "self", ",", "device", "=", "None", ")", ":", "\n", "        ", "self", ".", "model_device", "=", "'cuda'", "\n", "self", ".", "base_model", ".", "cuda", "(", "device", "=", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.swag.SWAG.to": [[72, 77], ["swag.SWAG.base_model.to", "torch._C._nn._parse_to", "swag.SWAG.subspace.to", "torch.device"], "methods", ["home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.swag.SWAG.to", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.swag.SWAG.to"], ["", "def", "to", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "base_model", ".", "to", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "device", ",", "dtype", ",", "non_blocking", "=", "torch", ".", "_C", ".", "_nn", ".", "_parse_to", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "self", ".", "model_device", "=", "device", ".", "type", "\n", "self", ".", "subspace", ".", "to", "(", "device", "=", "torch", ".", "device", "(", "'cpu'", ")", ",", "dtype", "=", "dtype", ",", "non_blocking", "=", "non_blocking", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.swag.SWAG.forward": [[78, 80], ["swag.SWAG.base_model"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "self", ".", "base_model", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.swag.SWAG.collect_model": [[81, 98], ["swag.flatten", "swag.SWAG.mean.mul_", "swag.SWAG.mean.add_", "swag.SWAG.sq_mean.mul_", "swag.SWAG.sq_mean.add_", "swag.SWAG.subspace.collect_vector", "swag.SWAG.n_models.add_", "param.detach().cpu", "swag.SWAG.n_models.item", "swag.SWAG.n_models.item", "base_model.parameters", "swag.SWAG.n_models.item", "swag.SWAG.n_models.item", "swag.SWAG.n_models.item", "swag.SWAG.n_models.item", "param.detach"], "methods", ["home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.swag.flatten", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.swag.CovarianceSpace.collect_vector"], ["", "def", "collect_model", "(", "self", ",", "base_model", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "# need to refit the space after collecting a new model", "\n", "        ", "self", ".", "cov_factor", "=", "None", "\n", "\n", "w", "=", "flatten", "(", "[", "param", ".", "detach", "(", ")", ".", "cpu", "(", ")", "for", "param", "in", "base_model", ".", "parameters", "(", ")", "]", ")", "\n", "# first moment", "\n", "self", ".", "mean", ".", "mul_", "(", "self", ".", "n_models", ".", "item", "(", ")", "/", "(", "self", ".", "n_models", ".", "item", "(", ")", "+", "1.0", ")", ")", "\n", "self", ".", "mean", ".", "add_", "(", "w", "/", "(", "self", ".", "n_models", ".", "item", "(", ")", "+", "1.0", ")", ")", "\n", "\n", "# second moment", "\n", "self", ".", "sq_mean", ".", "mul_", "(", "self", ".", "n_models", ".", "item", "(", ")", "/", "(", "self", ".", "n_models", ".", "item", "(", ")", "+", "1.0", ")", ")", "\n", "self", ".", "sq_mean", ".", "add_", "(", "w", "**", "2", "/", "(", "self", ".", "n_models", ".", "item", "(", ")", "+", "1.0", ")", ")", "\n", "\n", "dev_vector", "=", "w", "-", "self", ".", "mean", "\n", "\n", "self", ".", "subspace", ".", "collect_vector", "(", "dev_vector", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "self", ".", "n_models", ".", "add_", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.swag.SWAG._get_mean_and_variance": [[99, 102], ["torch.clamp"], "methods", ["None"], ["", "def", "_get_mean_and_variance", "(", "self", ")", ":", "\n", "        ", "variance", "=", "torch", ".", "clamp", "(", "self", ".", "sq_mean", "-", "self", ".", "mean", "**", "2", ",", "self", ".", "var_clamp", ")", "\n", "return", "self", ".", "mean", ",", "variance", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.swag.SWAG.fit": [[103, 107], ["swag.SWAG.subspace.get_space"], "methods", ["home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.swag.SWAG.get_space"], ["", "def", "fit", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "cov_factor", "is", "not", "None", ":", "\n", "            ", "return", "\n", "", "self", ".", "cov_factor", "=", "self", ".", "subspace", ".", "get_space", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.swag.SWAG.set_swa": [[108, 110], ["swag.set_weights"], "methods", ["home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.swag.set_weights"], ["", "def", "set_swa", "(", "self", ")", ":", "\n", "        ", "set_weights", "(", "self", ".", "base_model", ",", "self", ".", "mean", ",", "self", ".", "model_device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.swag.SWAG.sample": [[111, 125], ["swag.SWAG.fit", "swag.SWAG._get_mean_and_variance", "torch.randn", "swag.set_weights", "swag.SWAG.cov_factor.t", "swag.SWAG.cov_factor.size", "torch.randn_like"], "methods", ["home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.swag.SWAG.fit", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.swag.SWAG._get_mean_and_variance", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.swag.set_weights"], ["", "def", "sample", "(", "self", ",", "scale", "=", "0.5", ",", "diag_noise", "=", "True", ")", ":", "\n", "        ", "self", ".", "fit", "(", ")", "\n", "mean", ",", "variance", "=", "self", ".", "_get_mean_and_variance", "(", ")", "\n", "\n", "eps_low_rank", "=", "torch", ".", "randn", "(", "self", ".", "cov_factor", ".", "size", "(", ")", "[", "0", "]", ")", "\n", "z", "=", "self", ".", "cov_factor", ".", "t", "(", ")", "@", "eps_low_rank", "\n", "if", "diag_noise", ":", "\n", "            ", "z", "+=", "variance", "*", "torch", ".", "randn_like", "(", "variance", ")", "\n", "", "z", "*=", "scale", "**", "0.5", "\n", "sample", "=", "mean", "+", "z", "\n", "\n", "# apply to parameters", "\n", "set_weights", "(", "self", ".", "base_model", ",", "sample", ",", "self", ".", "model_device", ")", "\n", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.swag.SWAG.get_space": [[126, 133], ["swag.SWAG._get_mean_and_variance", "swag.SWAG.fit", "mean.clone", "variance.clone", "mean.clone", "variance.clone", "swag.SWAG.cov_factor.clone"], "methods", ["home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.swag.SWAG._get_mean_and_variance", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.swag.SWAG.fit"], ["", "def", "get_space", "(", "self", ",", "export_cov_factor", "=", "True", ")", ":", "\n", "        ", "mean", ",", "variance", "=", "self", ".", "_get_mean_and_variance", "(", ")", "\n", "if", "not", "export_cov_factor", ":", "\n", "            ", "return", "mean", ".", "clone", "(", ")", ",", "variance", ".", "clone", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "fit", "(", ")", "\n", "return", "mean", ".", "clone", "(", ")", ",", "variance", ".", "clone", "(", ")", ",", "self", ".", "cov_factor", ".", "clone", "(", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.swag.flatten": [[3, 6], ["torch.cat().view", "i.contiguous().view", "torch.cat", "i.contiguous"], "function", ["None"], ["def", "flatten", "(", "lst", ")", ":", "\n", "    ", "tmp", "=", "[", "i", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "1", ")", "for", "i", "in", "lst", "]", "\n", "return", "torch", ".", "cat", "(", "tmp", ")", ".", "view", "(", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.swag.set_weights": [[7, 12], ["model.parameters", "param.data.copy_", "param.numel", "vector[].view().to", "vector[].view", "param.size", "param.numel"], "function", ["home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.swag.SWAG.to"], ["", "def", "set_weights", "(", "model", ",", "vector", ",", "device", "=", "None", ")", ":", "\n", "    ", "offset", "=", "0", "\n", "for", "param", "in", "model", ".", "parameters", "(", ")", ":", "\n", "        ", "param", ".", "data", ".", "copy_", "(", "vector", "[", "offset", ":", "offset", "+", "param", ".", "numel", "(", ")", "]", ".", "view", "(", "param", ".", "size", "(", ")", ")", ".", "to", "(", "device", ")", ")", "\n", "offset", "+=", "param", ".", "numel", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.neuralef-classic-kernels.NeuralEigenFunctions.__init__": [[34, 43], ["torch.Module.__init__", "utils.ParallelMLP", "neuralef-classic-kernels.NeuralEigenFunctions.register_buffer", "neuralef-classic-kernels.NeuralEigenFunctions.register_buffer", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.src.spin.SpectralNetwork.__init__"], ["\t", "def", "__init__", "(", "self", ",", "k", ",", "nonlinearity", "=", "'sin_and_cos'", ",", "input_size", "=", "1", ",", "\n", "hidden_size", "=", "32", ",", "num_layers", "=", "3", ",", "output_size", "=", "1", ",", "momentum", "=", "0.9", ",", "\n", "normalize_over", "=", "[", "0", "]", ")", ":", "\n", "\t\t", "super", "(", "NeuralEigenFunctions", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "momentum", "=", "momentum", "\n", "self", ".", "normalize_over", "=", "normalize_over", "\n", "self", ".", "fn", "=", "ParallelMLP", "(", "input_size", ",", "output_size", ",", "k", ",", "num_layers", ",", "hidden_size", ",", "nonlinearity", ")", "\n", "self", ".", "register_buffer", "(", "'eigennorm'", ",", "torch", ".", "zeros", "(", "k", ")", ")", "\n", "self", ".", "register_buffer", "(", "'num_calls'", ",", "torch", ".", "Tensor", "(", "[", "0", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.neuralef-classic-kernels.NeuralEigenFunctions.forward": [[44, 59], ["neuralef-classic-kernels.NeuralEigenFunctions.fn().squeeze", "neuralef-classic-kernels.NeuralEigenFunctions.fn", "neuralef-classic-kernels.NeuralEigenFunctions.norm", "math.sqrt", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "numpy.prod", "neuralef-classic-kernels.NeuralEigenFunctions.eigennorm.copy_", "neuralef-classic-kernels.NeuralEigenFunctions.eigennorm.mul_().add_", "neuralef-classic-kernels.NeuralEigenFunctions.eigennorm.mul_"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\t\t", "ret_raw", "=", "self", ".", "fn", "(", "x", ")", ".", "squeeze", "(", ")", "\n", "if", "self", ".", "training", ":", "\n", "\t\t\t", "norm_", "=", "ret_raw", ".", "norm", "(", "dim", "=", "self", ".", "normalize_over", ")", "/", "math", ".", "sqrt", "(", "\n", "np", ".", "prod", "(", "[", "ret_raw", ".", "shape", "[", "dim", "]", "for", "dim", "in", "self", ".", "normalize_over", "]", ")", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "\t\t\t\t", "if", "self", ".", "num_calls", "==", "0", ":", "\n", "\t\t\t\t\t", "self", ".", "eigennorm", ".", "copy_", "(", "norm_", ".", "data", ")", "\n", "", "else", ":", "\n", "\t\t\t\t\t", "self", ".", "eigennorm", ".", "mul_", "(", "self", ".", "momentum", ")", ".", "add_", "(", "\n", "norm_", ".", "data", ",", "alpha", "=", "1", "-", "self", ".", "momentum", ")", "\n", "", "self", ".", "num_calls", "+=", "1", "\n", "", "", "else", ":", "\n", "\t\t\t", "norm_", "=", "self", ".", "eigennorm", "\n", "", "return", "ret_raw", "/", "norm_", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.neuralef-classic-kernels.our": [[60, 99], ["X_.cuda", "X_val_.cuda", "min", "kernel", "timeit.default_timer", "model_class().cuda", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "model_class().cuda.train", "range", "timeit.default_timer", "model_class().cuda.eval", "model_class().cuda.parameters", "numpy.random.choice", "model_class().cuda.", "torch.optim.Adam.zero_grad", "nef.backward", "torch.optim.Adam.step", "torch.optim.lr_scheduler.CosineAnnealingLR.step", "torch.no_grad", "torch.no_grad", "torch.no_grad", "model_class().cuda.data.cpu().numpy", "eigenvalues.data.cpu", "model_class", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.eye", "torch.eye", "torch.eye", "eigenvalues.mul_().add_", "model_class().cuda.data.cpu", "psis_K_psis.diag", "eigenvalues.mul_", "psis_K_psis.diag", "model_class().cuda.", "psis_K_psis.diag"], "function", ["home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.swag.SWAG.cuda", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.swag.SWAG.cuda", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.swag.SWAG.cuda", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.examples.hydrogen.train"], ["", "", "def", "our", "(", "model_class", ",", "X_", ",", "X_val_", ",", "k", ",", "kernel", ")", ":", "\n", "\t", "X", "=", "X_", ".", "cuda", "(", ")", "\n", "X_val", "=", "X_val_", ".", "cuda", "(", ")", "\n", "lr", "=", "1e-3", "\n", "num_iterations", "=", "2000", "\n", "B", "=", "min", "(", "256", ",", "X", ".", "shape", "[", "0", "]", ")", "\n", "K", "=", "kernel", "(", "X", ")", "\n", "\n", "start", "=", "timer", "(", ")", "\n", "nef", "=", "model_class", "(", "k", ")", ".", "cuda", "(", ")", "\n", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "nef", ".", "parameters", "(", ")", ",", "lr", "=", "lr", ")", "\n", "scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "CosineAnnealingLR", "(", "optimizer", ",", "num_iterations", ")", "\n", "\n", "nef", ".", "train", "(", ")", "\n", "eigenvalues", "=", "None", "\n", "for", "ite", "in", "range", "(", "num_iterations", ")", ":", "\n", "\t\t", "idx", "=", "np", ".", "random", ".", "choice", "(", "X", ".", "shape", "[", "0", "]", ",", "B", ",", "replace", "=", "False", ")", "\n", "X_batch", "=", "X", "[", "idx", "]", "\n", "psis_X", "=", "nef", "(", "X_batch", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "\t\t\t", "K_psis", "=", "K", "[", "idx", "]", "[", ":", ",", "idx", "]", "@", "psis_X", "\n", "psis_K_psis", "=", "psis_X", ".", "T", "@", "K_psis", "\n", "mask", "=", "torch", ".", "eye", "(", "k", ",", "device", "=", "psis_X", ".", "device", ")", "-", "(", "psis_K_psis", "/", "psis_K_psis", ".", "diag", "(", ")", ")", ".", "tril", "(", "diagonal", "=", "-", "1", ")", ".", "T", "\n", "grad", "=", "K_psis", "@", "mask", "\n", "if", "eigenvalues", "is", "None", ":", "\n", "\t\t\t\t", "eigenvalues", "=", "psis_K_psis", ".", "diag", "(", ")", "/", "(", "B", "**", "2", ")", "\n", "", "else", ":", "\n", "\t\t\t\t", "eigenvalues", ".", "mul_", "(", "0.9", ")", ".", "add_", "(", "psis_K_psis", ".", "diag", "(", ")", "/", "(", "B", "**", "2", ")", ",", "alpha", "=", "0.1", ")", "\n", "\n", "", "", "optimizer", ".", "zero_grad", "(", ")", "\n", "psis_X", ".", "backward", "(", "-", "grad", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "scheduler", ".", "step", "(", ")", "\n", "", "end", "=", "timer", "(", ")", "\n", "nef", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "\t\t", "projections_val", "=", "nef", "(", "X_val", ")", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "return", "eigenvalues", ".", "data", ".", "cpu", "(", ")", ",", "projections_val", ",", "end", "-", "start", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.neuralef-classic-kernels.spin_tf": [[100, 167], ["min", "spectral_inference_networks.KernelOperator", "timeit.default_timer", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.train.AdamOptimizer", "spectral_inference_networks.SpectralNetwork", "spin.SpectralNetwork.train", "timeit.default_timer", "tensorflow.random.normal", "tensorflow.random.normal", "tensorflow.random.normal", "tensorflow.zeros", "tensorflow.zeros", "tensorflow.zeros", "tensorflow.split", "tensorflow.concat", "tensorflow.split", "tensorflow.concat", "tensorflow.squeeze", "tensorflow.exp", "math.sqrt", "math.sqrt", "math.sqrt", "tensorflow.tensordot", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.transpose", "tensorflow.constant", "tensorflow.math.pow", "tensorflow.math.sin", "tensorflow.math.cos", "tensorflow.math.sin", "tensorflow.math.cos", "tensorflow.math.reduce_sum", "tensorflow.norm"], "function", ["home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.examples.hydrogen.train"], ["", "def", "spin_tf", "(", "X", ",", "X_val", ",", "k", ",", "kernel_type", ")", ":", "\n", "\n", "\t", "lr", "=", "1e-3", "\n", "num_iterations", "=", "2000", "\n", "B", "=", "min", "(", "256", ",", "X", ".", "shape", "[", "0", "]", ")", "\n", "\n", "if", "kernel_type", "==", "'rbf'", ":", "\n", "\t\t", "kernel", "=", "lambda", "x", ",", "y", ":", "tf", ".", "exp", "(", "-", "(", "tf", ".", "norm", "(", "x", "-", "y", ",", "axis", "=", "1", ",", "keepdims", "=", "True", ")", "**", "2", ")", "/", "2.", ")", "\n", "", "elif", "kernel_type", "==", "'polynomial'", ":", "\n", "\t\t", "kernel", "=", "lambda", "x", ",", "y", ":", "tf", ".", "math", ".", "pow", "(", "tf", ".", "math", ".", "reduce_sum", "(", "x", "*", "y", ",", "axis", "=", "1", ",", "keepdims", "=", "True", ")", "+", "1.5", ",", "4", ")", "\n", "", "linop", "=", "spin", ".", "KernelOperator", "(", "kernel", ")", "\n", "\n", "start", "=", "timer", "(", ")", "\n", "# Create variables for simple MLP", "\n", "w1", "=", "tf", ".", "Variable", "(", "tf", ".", "random", ".", "normal", "(", "[", "k", ",", "32", ",", "X", ".", "shape", "[", "1", "]", "]", ",", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "X", ".", "shape", "[", "1", "]", ")", ")", ")", "\n", "w2", "=", "tf", ".", "Variable", "(", "tf", ".", "random", ".", "normal", "(", "[", "k", ",", "32", ",", "32", "]", ",", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "32", ")", ")", ")", "\n", "w3", "=", "tf", ".", "Variable", "(", "tf", ".", "random", ".", "normal", "(", "[", "k", ",", "1", ",", "32", "]", ",", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "32", ")", ")", ")", "\n", "\n", "b1", "=", "tf", ".", "Variable", "(", "tf", ".", "zeros", "(", "[", "k", ",", "32", ",", "1", "]", ")", ")", "\n", "b2", "=", "tf", ".", "Variable", "(", "tf", ".", "zeros", "(", "[", "k", ",", "32", ",", "1", "]", ")", ")", "\n", "b3", "=", "tf", ".", "Variable", "(", "tf", ".", "zeros", "(", "[", "k", ",", "1", ",", "1", "]", ")", ")", "\n", "\n", "# Create function to construct simple MLP", "\n", "def", "network", "(", "x", ")", ":", "\n", "\t  ", "h1", "=", "tf", ".", "tensordot", "(", "w1", ",", "x", ",", "[", "[", "2", "]", ",", "[", "1", "]", "]", ")", "+", "b1", "\n", "h1_1", ",", "h1_2", "=", "tf", ".", "split", "(", "h1", ",", "2", ",", "axis", "=", "1", ")", "\n", "h1_act", "=", "tf", ".", "concat", "(", "[", "tf", ".", "math", ".", "sin", "(", "h1_1", ")", ",", "tf", ".", "math", ".", "cos", "(", "h1_2", ")", "]", ",", "1", ")", "\n", "\n", "h2", "=", "tf", ".", "matmul", "(", "w2", ",", "h1_act", ")", "+", "b2", "\n", "h2_1", ",", "h2_2", "=", "tf", ".", "split", "(", "h2", ",", "2", ",", "axis", "=", "1", ")", "\n", "h2_act", "=", "tf", ".", "concat", "(", "[", "tf", ".", "math", ".", "sin", "(", "h2_1", ")", ",", "tf", ".", "math", ".", "cos", "(", "h2_2", ")", "]", ",", "1", ")", "\n", "\n", "h3", "=", "tf", ".", "matmul", "(", "w3", ",", "h2_act", ")", "+", "b3", "\n", "return", "tf", ".", "squeeze", "(", "tf", ".", "transpose", "(", "h3", ",", "perm", "=", "[", "2", ",", "1", ",", "0", "]", ")", ")", "\n", "\n", "", "optim", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "learning_rate", "=", "lr", ")", "\n", "# Constructs the internal training ops for spectral inference networks.", "\n", "spectral_net", "=", "spin", ".", "SpectralNetwork", "(", "\n", "linop", ",", "\n", "network", ",", "\n", "X", ",", "\n", "[", "w1", ",", "w2", ",", "w3", ",", "b1", ",", "b2", ",", "b3", "]", ",", "\n", "B", ",", "decay", "=", "0.99", ")", "\n", "\n", "# Trivial defaults for logging and stats hooks.", "\n", "logging_config", "=", "{", "\n", "'config'", ":", "{", "}", ",", "\n", "'log_image_every'", ":", "100000000", ",", "\n", "'save_params_every'", ":", "100000000", ",", "\n", "'saver_path'", ":", "'./tmp'", ",", "\n", "'saver_name'", ":", "'example'", ",", "\n", "}", "\n", "\n", "stats_hooks", "=", "{", "\n", "'create'", ":", "spin", ".", "util", ".", "create_default_stats", ",", "\n", "'update'", ":", "spin", ".", "util", ".", "update_default_stats", ",", "\n", "}", "\n", "\n", "# Executes the training of spectral inference networks.", "\n", "stats", ",", "outputs", "=", "spectral_net", ".", "train", "(", "\n", "optim", ",", "\n", "num_iterations", ",", "\n", "logging_config", ",", "\n", "stats_hooks", ",", "\n", "data_for_plotting", "=", "tf", ".", "constant", "(", "X_val", ")", ")", "\n", "end", "=", "timer", "(", ")", "\n", "return", "outputs", ",", "end", "-", "start", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.neuralef-classic-kernels.plot_efs": [[168, 197], ["ax.tick_params", "ax.tick_params", "ax.tick_params", "ax.tick_params", "seaborn.color_palette", "enumerate", "ax.set_xlabel", "ax.set_ylabel", "ax.set_xlim", "ax.set_ylim", "ax.spines[].set_color", "ax.spines[].set_color", "ax.spines[].set_color", "ax.spines[].set_color", "ax.set_axisbelow", "ax.grid", "ax.grid", "range", "ax.plot", "X_val.view", "eigenfuncs_eval[].mean"], "function", ["None"], ["", "def", "plot_efs", "(", "ax", ",", "X_val", ",", "eigenfuncs_eval_list", ",", "label_list", ",", "color_list", ",", "linestyle_list", ",", "\n", "k_lines", "=", "3", ",", "xlim", "=", "[", "-", "2.", ",", "2.", "]", ",", "ylim", "=", "[", "-", "2.", ",", "2.", "]", ")", ":", "\n", "\n", "\t", "ax", ".", "tick_params", "(", "axis", "=", "'y'", ",", "which", "=", "'major'", ",", "labelsize", "=", "12", ")", "\n", "ax", ".", "tick_params", "(", "axis", "=", "'y'", ",", "which", "=", "'minor'", ",", "labelsize", "=", "12", ")", "\n", "ax", ".", "tick_params", "(", "axis", "=", "'x'", ",", "which", "=", "'major'", ",", "labelsize", "=", "12", ")", "\n", "ax", ".", "tick_params", "(", "axis", "=", "'x'", ",", "which", "=", "'minor'", ",", "labelsize", "=", "12", ")", "\n", "\n", "sns", ".", "color_palette", "(", ")", "\n", "for", "iii", ",", "eigenfuncs_eval", "in", "enumerate", "(", "eigenfuncs_eval_list", ")", ":", "\n", "# plt.gca().set_prop_cycle(None)", "\n", "\t\t", "for", "i", "in", "range", "(", "k_lines", ")", ":", "\n", "\t\t\t", "data", "=", "eigenfuncs_eval", "[", ":", ",", "i", "]", "if", "eigenfuncs_eval", "[", "1300", ":", "1400", ",", "i", "]", ".", "mean", "(", ")", ">", "0", "else", "-", "eigenfuncs_eval", "[", ":", ",", "i", "]", "\n", "ax", ".", "plot", "(", "X_val", ".", "view", "(", "-", "1", ")", ",", "data", ",", "c", "=", "color_list", "[", "iii", "]", ",", "linestyle", "=", "linestyle_list", "[", "iii", "]", ",", "\n", "label", "=", "label_list", "[", "iii", "]", ",", "linewidth", "=", "2", ")", "#.format(i+1)", "\n", "\n", "", "", "ax", ".", "set_xlabel", "(", "'x'", ")", "\n", "ax", ".", "set_ylabel", "(", "'y'", ")", "\n", "ax", ".", "set_xlim", "(", "xlim", "[", "0", "]", ",", "xlim", "[", "1", "]", ")", "\n", "ax", ".", "set_ylim", "(", "ylim", "[", "0", "]", ",", "ylim", "[", "1", "]", ")", "\n", "\n", "ax", ".", "spines", "[", "'bottom'", "]", ".", "set_color", "(", "'gray'", ")", "\n", "ax", ".", "spines", "[", "'top'", "]", ".", "set_color", "(", "'gray'", ")", "\n", "ax", ".", "spines", "[", "'right'", "]", ".", "set_color", "(", "'gray'", ")", "\n", "ax", ".", "spines", "[", "'left'", "]", ".", "set_color", "(", "'gray'", ")", "\n", "ax", ".", "set_axisbelow", "(", "True", ")", "\n", "ax", ".", "grid", "(", "axis", "=", "'y'", ",", "color", "=", "'lightgray'", ",", "linestyle", "=", "'--'", ")", "\n", "ax", ".", "grid", "(", "axis", "=", "'x'", ",", "color", "=", "'lightgray'", ",", "linestyle", "=", "'--'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.neuralef-classic-kernels.main": [[199, 342], ["random.seed", "numpy.random.seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.arange().view", "torch.arange().view", "torch.arange().view", "matplotlib.figure", "plt.figure.add_subplot", "neuralef-classic-kernels.plot_efs", "plt.figure.add_subplot", "neuralef-classic-kernels.plot_efs", "plt.figure.add_subplot", "neuralef-classic-kernels.plot_efs", "plt.figure.add_subplot", "fig.add_subplot.tick_params", "fig.add_subplot.tick_params", "fig.add_subplot.tick_params", "fig.add_subplot.tick_params", "fig.add_subplot.plot", "fig.add_subplot.plot", "fig.add_subplot.plot", "fig.add_subplot.set_xlim", "fig.add_subplot.set_xticks", "fig.add_subplot.set_xticklabels", "fig.add_subplot.set_xlabel", "fig.add_subplot.set_ylabel", "fig.add_subplot.spines[].set_color", "fig.add_subplot.spines[].set_color", "fig.add_subplot.spines[].set_color", "fig.add_subplot.spines[].set_color", "fig.add_subplot.set_axisbelow", "fig.add_subplot.grid", "fig.add_subplot.grid", "functools.partial", "torch.empty().uniform_", "torch.empty().uniform_", "torch.empty().uniform_", "XS.insert", "neuralef-classic-kernels.our", "eigenvalues_our_list.append", "projections_our_list.append", "cost_our_list.append", "print", "print", "print", "utils.nystrom", "eigenvalues_nystrom_list.append", "projections_nystrom_list.append", "cost_nystrom_list.append", "print", "print", "neuralef-classic-kernels.spin_tf", "neuralef-classic-kernels.spin_tf", "projections_spin_list.append", "cost_spin_list.append", "fig.add_subplot.text", "fig.add_subplot.set_title", "fig.add_subplot.text", "fig.add_subplot.set_title", "fig.add_subplot.get_legend_handles_labels", "fig.add_subplot.legend", "fig.add_subplot.set_title", "fig.add_subplot.set_title", "fig.add_subplot.set_title", "fig.add_subplot.set_title", "range", "range", "range", "range", "fig.add_subplot.set_title", "fig.add_subplot.set_title", "plt.figure.tight_layout", "plt.figure.savefig", "plt.figure.tight_layout", "plt.figure.savefig", "functools.partial", "torch.arange", "torch.arange", "torch.arange", "eigenfuncs_nystrom().data.cpu().numpy", "len", "torch.empty", "torch.empty", "torch.empty", "len", "len", "len", "len", "eigenfuncs_nystrom().data.cpu", "len", "eigenfuncs_nystrom"], "function", ["home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.neuralef-classic-kernels.plot_efs", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.neuralef-classic-kernels.plot_efs", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.neuralef-classic-kernels.plot_efs", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.neuralef-classic-kernels.our", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.utils.nystrom", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.neuralef-classic-kernels.spin_tf", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.neuralef-classic-kernels.spin_tf"], ["", "def", "main", "(", ")", ":", "\n", "# set random seed", "\n", "\t", "seed", "=", "0", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", "=", "True", "\n", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "False", "\n", "\n", "# general settings", "\n", "x_dim", "=", "1", "\n", "x_range", "=", "[", "-", "2", ",", "2", "]", "\n", "k", "=", "10", "\n", "model_class", "=", "NeuralEigenFunctions", "\n", "for", "kernel_type", "in", "[", "'rbf'", ",", "'polynomial'", "]", ":", "\n", "\t\t", "if", "kernel_type", "==", "'rbf'", ":", "\n", "\t\t\t", "kernel", "=", "partial", "(", "rbf_kernel", ",", "1", ",", "1", ")", "\n", "ylim", "=", "[", "-", "1.8", ",", "1.5", "]", "\n", "", "elif", "kernel_type", "==", "'polynomial'", ":", "\n", "\t\t\t", "kernel", "=", "partial", "(", "polynomial_kernel", ",", "4", ",", "1", ",", "1.5", ")", "\n", "x_range", "=", "[", "-", "1.", ",", "1.", "]", "\n", "ylim", "=", "[", "-", "2.2", ",", "2.", "]", "\n", "", "else", ":", "\n", "\t\t\t", "raise", "NotImplementedError", "\n", "\n", "", "X_val", "=", "torch", ".", "arange", "(", "x_range", "[", "0", "]", ",", "x_range", "[", "1", "]", ",", "\n", "(", "x_range", "[", "1", "]", "-", "x_range", "[", "0", "]", ")", "/", "2000.", ")", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "\n", "NS", "=", "[", "64", ",", "512", ",", "8192", "]", "\n", "XS", "=", "[", "torch", ".", "empty", "(", "NS", "[", "-", "1", "]", ",", "x_dim", ")", ".", "uniform_", "(", "x_range", "[", "0", "]", ",", "x_range", "[", "1", "]", ")", "]", "\n", "for", "N", "in", "NS", "[", ":", "-", "1", "]", ":", "\n", "\t\t\t", "XS", ".", "insert", "(", "-", "1", ",", "XS", "[", "-", "1", "]", "[", ":", "N", "]", ")", "\n", "\n", "", "eigenvalues_nystrom_list", ",", "projections_nystrom_list", ",", "cost_nystrom_list", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "eigenvalues_our_list", ",", "projections_our_list", ",", "cost_our_list", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "projections_spin_list", ",", "cost_spin_list", "=", "[", "]", ",", "[", "]", "\n", "for", "X", "in", "XS", ":", "\n", "\t\t\t", "eigenvalues_our", ",", "projections_our", ",", "c", "=", "our", "(", "model_class", ",", "X", ",", "X_val", ",", "k", ",", "kernel", ")", "\n", "eigenvalues_our_list", ".", "append", "(", "eigenvalues_our", ")", "\n", "projections_our_list", ".", "append", "(", "projections_our", ")", "\n", "cost_our_list", ".", "append", "(", "c", ")", "\n", "print", "(", "\"---------{}---------\"", ".", "format", "(", "X", ".", "shape", "[", "0", "]", ")", ")", "\n", "print", "(", "\"Eigenvalues estimated by our method:\"", ")", "\n", "print", "(", "eigenvalues_our_list", "[", "-", "1", "]", ")", "\n", "\n", "", "for", "X", "in", "XS", ":", "\n", "\t\t\t", "eigenvalues_nystrom", ",", "eigenfuncs_nystrom", ",", "c", "=", "nystrom", "(", "X", ",", "k", ",", "kernel", ")", "\n", "eigenvalues_nystrom_list", ".", "append", "(", "eigenvalues_nystrom", ")", "\n", "projections_nystrom_list", ".", "append", "(", "eigenfuncs_nystrom", "(", "X_val", ")", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "cost_nystrom_list", ".", "append", "(", "c", ")", "\n", "print", "(", "\"Eigenvalues estimated by nystrom method:\"", ")", "\n", "print", "(", "eigenvalues_nystrom_list", "[", "-", "1", "]", ")", "\n", "\n", "", "for", "X", "in", "XS", ":", "\n", "\t\t\t", "projections_spin", ",", "c", "=", "spin_tf", "(", "X", ",", "X_val", ",", "k", ",", "kernel_type", ")", "\n", "projections_spin", ",", "c", "=", "spin_tf", "(", "X", ",", "X_val", ",", "k", ",", "kernel_type", ")", "\n", "if", "kernel_type", "==", "'polynomial'", "and", "X", ".", "shape", "[", "0", "]", "==", "64", ":", "\n", "\t\t\t\t", "projections_spin", "=", "-", "projections_spin", "\n", "", "projections_spin_list", ".", "append", "(", "projections_spin", ")", "\n", "cost_spin_list", ".", "append", "(", "c", ")", "\n", "\n", "#['$\\hat\\psi_{}$ (Nystr\u00f6m)', '$\\hat\\psi_{}$ (SpIN)', '$\\hat\\psi_{}$ (our)']", "\n", "", "label_list", "=", "[", "'Nystr\u00f6m'", ",", "'SpIN'", ",", "'Our'", "]", "\n", "\n", "linestyle_list", "=", "[", "'solid'", ",", "'dashdot'", ",", "'dotted'", "]", "\n", "color_list", "=", "[", "'orange'", ",", "'c'", ",", "'blue'", "]", "\n", "# plots", "\n", "fig", "=", "plt", ".", "figure", "(", "figsize", "=", "(", "5", "*", "len", "(", "NS", ")", "+", "5", ",", "4.5", ")", ")", "\n", "ax", "=", "fig", ".", "add_subplot", "(", "141", ")", "\n", "plot_efs", "(", "ax", ",", "X_val", ",", "\n", "[", "projections_nystrom_list", "[", "0", "]", ",", "projections_spin_list", "[", "0", "]", ",", "projections_our_list", "[", "0", "]", "]", ",", "\n", "label_list", ",", "color_list", ",", "linestyle_list", ",", "\n", "3", ",", "x_range", ",", "ylim", ")", "\n", "if", "kernel_type", "!=", "'rbf'", ":", "\n", "# ax.legend(ncol=3, columnspacing=1.2, handletextpad=0.5)", "\n", "\t\t\t", "ax", ".", "text", "(", "-", "1.5", ",", "-", "1.6", ",", "'$\\\\kappa(x, x\\')=(x^\\\\top x\\' + 1.5)^4$'", ",", "rotation", "=", "90", ",", "fontsize", "=", "16", ")", "\n", "ax", ".", "set_title", "(", "'Eigenfunction comparison ({} samples)'", ".", "format", "(", "NS", "[", "0", "]", ")", ",", "pad", "=", "20", ")", "\n", "", "else", ":", "\n", "\t\t\t", "ax", ".", "text", "(", "-", "3.1", ",", "-", "1.7", ",", "'$\\\\kappa(x, x\\')=exp(-||x - x\\'||^2/2)$'", ",", "rotation", "=", "90", ",", "fontsize", "=", "16", ")", "\n", "ax", ".", "set_title", "(", "' '", ",", "pad", "=", "20", ")", "\n", "", "if", "kernel_type", "!=", "'rbf'", ":", "\n", "\t\t\t", "handles", ",", "labels", "=", "ax", ".", "get_legend_handles_labels", "(", ")", "\n", "ax", ".", "legend", "(", "[", "handles", "[", "0", "]", ",", "handles", "[", "3", "]", ",", "handles", "[", "6", "]", "]", ",", "[", "labels", "[", "0", "]", ",", "labels", "[", "3", "]", ",", "labels", "[", "6", "]", "]", ")", "\n", "\n", "", "ax", "=", "fig", ".", "add_subplot", "(", "142", ")", "\n", "plot_efs", "(", "ax", ",", "X_val", ",", "\n", "[", "projections_nystrom_list", "[", "1", "]", ",", "projections_spin_list", "[", "1", "]", ",", "projections_our_list", "[", "1", "]", "]", ",", "\n", "label_list", ",", "color_list", ",", "linestyle_list", ",", "\n", "3", ",", "x_range", ",", "ylim", ")", "\n", "if", "kernel_type", "!=", "'rbf'", ":", "\n", "\t\t\t", "ax", ".", "set_title", "(", "'Eigenfunction comparison ({} samples)'", ".", "format", "(", "NS", "[", "1", "]", ")", ",", "pad", "=", "20", ")", "\n", "", "else", ":", "\n", "\t\t\t", "ax", ".", "set_title", "(", "' '", ",", "pad", "=", "20", ")", "\n", "\n", "# compare eigenfunctions", "\n", "", "ax", "=", "fig", ".", "add_subplot", "(", "143", ")", "\n", "plot_efs", "(", "ax", ",", "X_val", ",", "\n", "[", "projections_nystrom_list", "[", "2", "]", ",", "projections_spin_list", "[", "2", "]", ",", "projections_our_list", "[", "2", "]", "]", ",", "\n", "label_list", ",", "color_list", ",", "linestyle_list", ",", "\n", "3", ",", "x_range", ",", "ylim", ")", "\n", "if", "kernel_type", "!=", "'rbf'", ":", "\n", "\t\t\t", "ax", ".", "set_title", "(", "'Eigenfunction comparison ({} samples)'", ".", "format", "(", "NS", "[", "2", "]", ")", ",", "pad", "=", "20", ")", "\n", "", "else", ":", "\n", "\t\t\t", "ax", ".", "set_title", "(", "' '", ",", "pad", "=", "20", ")", "\n", "# handles, labels = ax.get_legend_handles_labels()", "\n", "\n", "", "ax", "=", "fig", ".", "add_subplot", "(", "144", ")", "\n", "ax", ".", "tick_params", "(", "axis", "=", "'y'", ",", "which", "=", "'major'", ",", "labelsize", "=", "12", ")", "\n", "ax", ".", "tick_params", "(", "axis", "=", "'y'", ",", "which", "=", "'minor'", ",", "labelsize", "=", "12", ")", "\n", "ax", ".", "tick_params", "(", "axis", "=", "'x'", ",", "which", "=", "'major'", ",", "labelsize", "=", "12", ")", "\n", "ax", ".", "tick_params", "(", "axis", "=", "'x'", ",", "which", "=", "'minor'", ",", "labelsize", "=", "12", ")", "\n", "ax", ".", "plot", "(", "range", "(", "1", ",", "len", "(", "NS", ")", "+", "1", ")", ",", "cost_nystrom_list", ",", "label", "=", "'Nystr\u00f6m'", ",", "linestyle", "=", "linestyle_list", "[", "0", "]", ",", "color", "=", "color_list", "[", "0", "]", ",", "linewidth", "=", "2", ")", "\n", "ax", ".", "plot", "(", "range", "(", "1", ",", "len", "(", "NS", ")", "+", "1", ")", ",", "cost_spin_list", ",", "label", "=", "'SpIN'", ",", "linestyle", "=", "linestyle_list", "[", "1", "]", ",", "color", "=", "color_list", "[", "1", "]", ",", "linewidth", "=", "2", ")", "\n", "ax", ".", "plot", "(", "range", "(", "1", ",", "len", "(", "NS", ")", "+", "1", ")", ",", "cost_our_list", ",", "label", "=", "'Our'", ",", "linestyle", "=", "linestyle_list", "[", "2", "]", ",", "color", "=", "color_list", "[", "2", "]", ",", "linewidth", "=", "2", ")", "\n", "ax", ".", "set_xlim", "(", "1", ",", "len", "(", "NS", ")", "+", "0.2", ")", "\n", "ax", ".", "set_xticks", "(", "range", "(", "1", ",", "len", "(", "NS", ")", "+", "1", ")", ")", "\n", "ax", ".", "set_xticklabels", "(", "NS", ")", "\n", "ax", ".", "set_xlabel", "(", "'Number of samples'", ")", "\n", "ax", ".", "set_ylabel", "(", "'Training time (s)'", ")", "\n", "ax", ".", "spines", "[", "'bottom'", "]", ".", "set_color", "(", "'gray'", ")", "\n", "ax", ".", "spines", "[", "'top'", "]", ".", "set_color", "(", "'gray'", ")", "\n", "ax", ".", "spines", "[", "'right'", "]", ".", "set_color", "(", "'gray'", ")", "\n", "ax", ".", "spines", "[", "'left'", "]", ".", "set_color", "(", "'gray'", ")", "\n", "ax", ".", "set_axisbelow", "(", "True", ")", "\n", "ax", ".", "grid", "(", "axis", "=", "'y'", ",", "color", "=", "'lightgray'", ",", "linestyle", "=", "'--'", ")", "\n", "ax", ".", "grid", "(", "axis", "=", "'x'", ",", "color", "=", "'lightgray'", ",", "linestyle", "=", "'--'", ")", "\n", "# ax.legend()", "\n", "if", "kernel_type", "!=", "'rbf'", ":", "\n", "\t\t\t", "ax", ".", "set_title", "(", "'Training time comparison'", ",", "pad", "=", "20", ")", "\n", "", "else", ":", "\n", "\t\t\t", "ax", ".", "set_title", "(", "' '", ",", "pad", "=", "20", ")", "\n", "\n", "", "if", "kernel_type", "==", "'rbf'", ":", "\n", "# fig.legend(handles, labels, loc='lower center',", "\n", "# \t\t   bbox_to_anchor=(0.5, -0.08), ncol=9,", "\n", "# \t\t   fancybox=True, shadow=True, prop={'size':16})", "\n", "\t\t\t", "fig", ".", "tight_layout", "(", ")", "\n", "fig", ".", "savefig", "(", "'toy_plots/eigen_funcs_comp_{}.pdf'", ".", "format", "(", "kernel_type", ")", ",", "\n", "format", "=", "'pdf'", ",", "dpi", "=", "1000", ",", "bbox_inches", "=", "'tight'", ")", "\n", "", "else", ":", "\n", "\t\t\t", "fig", ".", "tight_layout", "(", ")", "\n", "fig", ".", "savefig", "(", "'toy_plots/eigen_funcs_comp_{}.pdf'", ".", "format", "(", "kernel_type", ")", ",", "\n", "format", "=", "'pdf'", ",", "dpi", "=", "1000", ",", "bbox_inches", "=", "'tight'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.utils.Erf.__init__": [[196, 198], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.src.spin.SpectralNetwork.__init__"], ["\t", "def", "__init__", "(", "self", ")", ":", "\n", "\t\t", "super", "(", "Erf", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.utils.Erf.forward": [[199, 201], ["x.erf"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\t\t", "return", "x", ".", "erf", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.utils.SinAndCos.__init__": [[203, 205], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.src.spin.SpectralNetwork.__init__"], ["\t", "def", "__init__", "(", "self", ")", ":", "\n", "\t\t", "super", "(", "SinAndCos", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.utils.SinAndCos.forward": [[206, 210], ["x.chunk", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\t\t", "assert", "x", ".", "shape", "[", "1", "]", "%", "2", "==", "0", "\n", "x1", ",", "x2", "=", "x", ".", "chunk", "(", "2", ",", "dim", "=", "1", ")", "\n", "return", "torch", ".", "cat", "(", "[", "torch", ".", "sin", "(", "x1", ")", ",", "torch", ".", "cos", "(", "x2", ")", "]", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.utils.ConvNet.__init__": [[262, 316], ["torch.Module.__init__", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Flatten", "torch.Flatten", "torch.Flatten", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Flatten", "torch.Flatten", "torch.Flatten", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.src.spin.SpectralNetwork.__init__"], ["\t", "def", "__init__", "(", "self", ",", "arch", ",", "hs", ",", "input_size", ",", "output_size", ")", ":", "\n", "\t\t", "super", "(", "ConvNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "arch", "=", "arch", "\n", "self", ".", "input_size", "=", "input_size", "\n", "self", ".", "output_size", "=", "output_size", "\n", "\n", "if", "self", ".", "arch", "==", "'convnet1'", ":", "\n", "\t\t\t", "self", ".", "model", "=", "torch", ".", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "input_size", "[", "0", "]", ",", "out_channels", "=", "hs", "[", "0", "]", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "hs", "[", "0", "]", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "hs", "[", "0", "]", ",", "out_channels", "=", "hs", "[", "1", "]", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "0", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "hs", "[", "1", "]", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "hs", "[", "1", "]", ",", "out_channels", "=", "hs", "[", "2", "]", ",", "kernel_size", "=", "6", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "hs", "[", "2", "]", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "hs", "[", "2", "]", ",", "out_channels", "=", "output_size", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", ",", "\n", "# nn.Conv2d(in_channels=input_size[0], out_channels=hs[0], kernel_size=1, stride=1, padding=0),", "\n", "# nn.ReLU(inplace=True),", "\n", "# nn.Conv2d(in_channels=hs[0], out_channels=hs[1], kernel_size=1, stride=1, padding=0),", "\n", "# nn.ReLU(inplace=True),", "\n", "# nn.Conv2d(in_channels=hs[1], out_channels=hs[2], kernel_size=1, stride=1, padding=0),", "\n", "# nn.ReLU(inplace=True),", "\n", "# nn.Conv2d(in_channels=hs[2], out_channels=output_size, kernel_size=1, stride=1, padding=0),", "\n", ")", "\n", "", "elif", "self", ".", "arch", "==", "'convnet2'", ":", "\n", "\t\t\t", "self", ".", "model", "=", "torch", ".", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "input_size", "[", "0", "]", ",", "out_channels", "=", "hs", "[", "0", "]", ",", "kernel_size", "=", "5", ",", "padding", "=", "2", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "hs", "[", "0", "]", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "nn", ".", "MaxPool2d", "(", "2", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "hs", "[", "0", "]", ",", "out_channels", "=", "hs", "[", "1", "]", ",", "kernel_size", "=", "5", ",", "padding", "=", "2", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "hs", "[", "1", "]", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "nn", ".", "MaxPool2d", "(", "2", ")", ",", "\n", "nn", ".", "Flatten", "(", "1", ")", ",", "\n", "nn", ".", "Linear", "(", "hs", "[", "1", "]", "*", "7", "*", "7", ",", "hs", "[", "2", "]", ")", ",", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "hs", "[", "2", "]", ",", "output_size", ")", "\n", ")", "\n", "", "elif", "self", ".", "arch", "==", "'convnet3'", ":", "\n", "\t\t\t", "self", ".", "model", "=", "torch", ".", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "input_size", "[", "0", "]", ",", "out_channels", "=", "hs", "[", "0", "]", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "hs", "[", "0", "]", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "nn", ".", "MaxPool2d", "(", "2", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "hs", "[", "0", "]", ",", "out_channels", "=", "hs", "[", "1", "]", ",", "kernel_size", "=", "3", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "hs", "[", "1", "]", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "nn", ".", "MaxPool2d", "(", "2", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "hs", "[", "1", "]", ",", "out_channels", "=", "hs", "[", "2", "]", ",", "kernel_size", "=", "3", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "hs", "[", "2", "]", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "nn", ".", "MaxPool2d", "(", "2", ")", ",", "\n", "nn", ".", "Flatten", "(", "1", ")", ",", "\n", "nn", ".", "Linear", "(", "hs", "[", "2", "]", "*", "2", "*", "2", ",", "output_size", ")", "\n", ")", "\n", "", "else", ":", "\n", "\t\t\t", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.utils.ConvNet.forward": [[317, 319], ["utils.ConvNet.model().view", "utils.ConvNet.model", "x.view"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\t\t", "return", "self", ".", "model", "(", "x", ".", "view", "(", "-", "1", ",", "*", "self", ".", "input_size", ")", ")", ".", "view", "(", "x", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.utils.ConvNetNT.__init__": [[321, 370], ["super().__init__", "nt.empirical_ntk_fn", "functools.partial", "stax.serial", "functools.partial.", "functools.partial.", "functools.partial.", "functools.partial.", "functools.partial", "stax.serial", "functools.partial.", "stax.MaxPool", "functools.partial.", "stax.MaxPool", "stax.Dense", "stax.Dense"], "methods", ["home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.src.spin.SpectralNetwork.__init__"], ["\t", "def", "__init__", "(", "self", ",", "arch", ",", "hs", ",", "output_size", ")", ":", "\n", "\t\t", "super", "(", "ConvNetNT", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "arch", "=", "arch", "\n", "self", ".", "output_size", "=", "output_size", "\n", "\n", "if", "self", ".", "arch", "==", "'convnet1'", ":", "\n", "\t\t\t", "from", "jax", ".", "experimental", "import", "stax", "\n", "import", "functools", "\n", "# from neural_tangents import stax", "\n", "Conv", "=", "functools", ".", "partial", "(", "stax", ".", "GeneralConv", ",", "(", "'NCHW'", ",", "'OIHW'", ",", "'NCHW'", ")", ")", "\n", "init_fn", ",", "f", "=", "stax", ".", "serial", "(", "\n", "Conv", "(", "hs", "[", "0", "]", ",", "(", "3", ",", "3", ")", ",", "strides", "=", "(", "2", ",", "2", ")", ",", "padding", "=", "'SAME'", ")", ",", "\n", "stax", ".", "Relu", ",", "\n", "Conv", "(", "hs", "[", "1", "]", ",", "(", "3", ",", "3", ")", ",", "strides", "=", "(", "2", ",", "2", ")", ")", ",", "\n", "stax", ".", "Relu", ",", "\n", "Conv", "(", "hs", "[", "2", "]", ",", "(", "6", ",", "6", ")", ",", "strides", "=", "(", "1", ",", "1", ")", ")", ",", "\n", "stax", ".", "Relu", ",", "\n", "Conv", "(", "output_size", ",", "(", "1", ",", "1", ")", ")", ",", "\n", "stax", ".", "Flatten", "\n", ")", "\n", "self", ".", "init_fn", "=", "init_fn", "\n", "self", ".", "f", "=", "f", "\n", "self", ".", "kernel_fn", "=", "None", "#kernel_fn", "\n", "\n", "", "elif", "self", ".", "arch", "==", "'convnet2'", ":", "\n", "\t\t\t", "from", "jax", ".", "experimental", "import", "stax", "\n", "import", "functools", "\n", "Conv", "=", "functools", ".", "partial", "(", "stax", ".", "GeneralConv", ",", "(", "'NCHW'", ",", "'OIHW'", ",", "'NCHW'", ")", ")", "\n", "init_fn", ",", "f", "=", "stax", ".", "serial", "(", "\n", "Conv", "(", "hs", "[", "0", "]", ",", "(", "5", ",", "5", ")", ",", "padding", "=", "'SAME'", ")", ",", "\n", "stax", ".", "Relu", ",", "\n", "stax", ".", "MaxPool", "(", "(", "2", ",", "2", ")", ",", "strides", "=", "(", "2", ",", "2", ")", ",", "spec", "=", "'NCHW'", ")", ",", "\n", "Conv", "(", "hs", "[", "1", "]", ",", "(", "5", ",", "5", ")", ",", "padding", "=", "'SAME'", ")", ",", "\n", "stax", ".", "Relu", ",", "\n", "stax", ".", "MaxPool", "(", "(", "2", ",", "2", ")", ",", "strides", "=", "(", "2", ",", "2", ")", ",", "spec", "=", "'NCHW'", ")", ",", "\n", "stax", ".", "Flatten", ",", "\n", "stax", ".", "Dense", "(", "hs", "[", "2", "]", ")", ",", "\n", "stax", ".", "Relu", ",", "\n", "stax", ".", "Dense", "(", "output_size", ")", ",", "\n", ")", "\n", "self", ".", "init_fn", "=", "init_fn", "\n", "self", ".", "f", "=", "f", "\n", "self", ".", "kernel_fn", "=", "None", "\n", "", "else", ":", "\n", "\t\t\t", "raise", "NotImplementedError", "\n", "\n", "", "self", ".", "emp_ntk_fn", "=", "nt", ".", "empirical_ntk_fn", "(", "self", ".", "f", ",", "trace_axes", "=", "(", "-", "1", ",", ")", ",", "\n", "vmap_axes", "=", "0", ",", "implementation", "=", "1", ")", "\n", "self", ".", "params", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.utils.ConvNetNT.random_init": [[371, 374], ["utils.ConvNetNT.init_fn", "jax.random.PRNGKey"], "methods", ["None"], ["", "def", "random_init", "(", "self", ",", "input_size", ",", "seed", "=", "1", ")", ":", "\n", "\t\t", "_", ",", "params", "=", "self", ".", "init_fn", "(", "jax", ".", "random", ".", "PRNGKey", "(", "1", ")", ",", "input_size", ")", "\n", "self", ".", "params", "=", "params", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.utils.ConvNetNT.ntk": [[375, 380], ["utils.ConvNetNT.kernel_fn"], "methods", ["None"], ["", "def", "ntk", "(", "self", ",", "x1", ",", "x2", ")", ":", "\n", "\t\t", "if", "self", ".", "kernel_fn", "is", "None", ":", "\n", "\t\t\t", "return", "None", "\n", "", "else", ":", "\n", "\t\t\t", "return", "self", ".", "kernel_fn", "(", "x1", ",", "x2", ",", "'ntk'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.utils.ConvNetNT.emp_ntk": [[381, 386], ["utils.ConvNetNT.emp_ntk_fn"], "methods", ["None"], ["", "", "def", "emp_ntk", "(", "self", ",", "x1", ",", "x2", ")", ":", "\n", "\t\t", "if", "self", ".", "params", "is", "None", ":", "\n", "\t\t\t", "return", "None", "\n", "", "else", ":", "\n", "\t\t\t", "return", "self", ".", "emp_ntk_fn", "(", "x1", ",", "x2", ",", "self", ".", "params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.utils.ConvNetKernel.__init__": [[390, 414], ["torch.Module.__init__", "cnn_gp.Sequential", "cnn_gp.Conv2d", "cnn_gp.ReLU", "cnn_gp.Conv2d", "cnn_gp.ReLU", "cnn_gp.Conv2d", "cnn_gp.ReLU", "cnn_gp.Conv2d"], "methods", ["home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.src.spin.SpectralNetwork.__init__"], ["\t", "def", "__init__", "(", "self", ",", "arch", ",", "input_size", ",", "w_var", ",", "b_var", ")", ":", "\n", "\t\t", "super", "(", "ConvNetKernel", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "arch", "=", "arch", "\n", "self", ".", "input_size", "=", "input_size", "\n", "\n", "if", "self", ".", "arch", "==", "'convnet1'", ":", "\n", "\t\t\t", "self", ".", "model", "=", "cnn_gp", ".", "Sequential", "(", "\n", "cnn_gp", ".", "Conv2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "var_weight", "=", "w_var", ",", "var_bias", "=", "b_var", ")", ",", "\n", "cnn_gp", ".", "ReLU", "(", ")", ",", "\n", "cnn_gp", ".", "Conv2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "0", ",", "var_weight", "=", "w_var", ",", "var_bias", "=", "b_var", ")", ",", "\n", "cnn_gp", ".", "ReLU", "(", ")", ",", "\n", "cnn_gp", ".", "Conv2d", "(", "kernel_size", "=", "6", ",", "padding", "=", "0", ",", "var_weight", "=", "w_var", ",", "var_bias", "=", "b_var", ")", ",", "\n", "cnn_gp", ".", "ReLU", "(", ")", ",", "\n", "cnn_gp", ".", "Conv2d", "(", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "var_weight", "=", "w_var", ",", "var_bias", "=", "b_var", ")", ",", "\n", "# cnn_gp.Conv2d(kernel_size=1, stride=1, padding=0, var_weight=w_var, var_bias=b_var),", "\n", "# cnn_gp.ReLU(),", "\n", "# cnn_gp.Conv2d(kernel_size=1, stride=1, padding=0, var_weight=w_var, var_bias=b_var),", "\n", "# cnn_gp.ReLU(),", "\n", "# cnn_gp.Conv2d(kernel_size=1, padding=0, var_weight=w_var, var_bias=b_var),", "\n", "# cnn_gp.ReLU(),", "\n", "# cnn_gp.Conv2d(kernel_size=1, padding=0, var_weight=w_var, var_bias=b_var),", "\n", ")", "\n", "", "else", ":", "\n", "\t\t\t", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.utils.ConvNetKernel.forward": [[415, 418], ["utils.ConvNetKernel.model", "x.view", "x2.view"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "x2", "=", "None", ")", ":", "\n", "# print(x.shape, x.view(-1, *self.input_size).shape, x2)", "\n", "\t\t", "return", "self", ".", "model", "(", "x", ".", "view", "(", "-", "1", ",", "*", "self", ".", "input_size", ")", ",", "None", "if", "x2", "is", "None", "else", "x2", ".", "view", "(", "-", "1", ",", "*", "self", ".", "input_size", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.utils.ParallelLinear.__init__": [[420, 428], ["torch.Module.__init__", "utils.ParallelLinear.register_parameter", "utils.ParallelLinear.register_parameter", "range", "torch.init.zeros_", "torch.init.zeros_", "torch.init.zeros_", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "math.sqrt"], "methods", ["home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.src.spin.SpectralNetwork.__init__"], ["\t", "def", "__init__", "(", "self", ",", "in_features", ",", "out_features", ",", "num_copies", ")", ":", "\n", "\t\t", "super", "(", "ParallelLinear", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "register_parameter", "(", "'weight'", ",", "nn", ".", "Parameter", "(", "torch", ".", "randn", "(", "num_copies", ",", "out_features", ",", "in_features", ")", ")", ")", "\n", "self", ".", "register_parameter", "(", "'bias'", ",", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "num_copies", ",", "out_features", ",", "1", ")", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "num_copies", ")", ":", "\n", "\t\t\t", "nn", ".", "init", ".", "normal_", "(", "self", ".", "weight", "[", "i", "]", ",", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "in_features", ")", ")", "\n", "", "nn", ".", "init", ".", "zeros_", "(", "self", ".", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.utils.ParallelLinear.forward": [[429, 434], ["x.dim", "torch.tensordot", "torch.tensordot", "torch.tensordot", "torch.tensordot", "torch.tensordot", "torch.tensordot", "torch.tensordot", "torch.tensordot", "torch.tensordot"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\t\t", "if", "x", ".", "dim", "(", ")", "==", "2", ":", "\n", "\t\t\t", "return", "torch", ".", "tensordot", "(", "self", ".", "weight", ",", "x", ",", "[", "[", "2", "]", ",", "[", "1", "]", "]", ")", "+", "self", ".", "bias", "\n", "", "else", ":", "\n", "\t\t\t", "return", "self", ".", "weight", "@", "x", "+", "self", ".", "bias", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.utils.ParallelMLP.__init__": [[436, 461], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "functools.partial", "utils.ParallelLinear", "utils.ParallelLinear", "functools.partial.", "utils.ParallelLinear", "layers.insert", "layers.insert", "float", "functools.partial.", "utils.ParallelLinear", "functools.partial.replace"], "methods", ["home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.src.spin.SpectralNetwork.__init__"], ["\t", "def", "__init__", "(", "self", ",", "in_features", ",", "out_features", ",", "num_copies", ",", "num_layers", ",", "hidden_size", "=", "64", ",", "nonlinearity", "=", "'relu'", ")", ":", "\n", "\t\t", "super", "(", "ParallelMLP", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "if", "nonlinearity", "==", "'relu'", ":", "\n", "\t\t\t", "nonlinearity", "=", "nn", ".", "ReLU", "\n", "", "elif", "'lrelu'", "in", "nonlinearity", ":", "\n", "\t\t\t", "nonlinearity", "=", "partial", "(", "nn", ".", "LeakyReLU", ",", "float", "(", "nonlinearity", ".", "replace", "(", "\"lrelu\"", ",", "\"\"", ")", ")", ")", "\n", "", "elif", "nonlinearity", "==", "'erf'", ":", "\n", "\t\t\t", "nonlinearity", "=", "Erf", "\n", "", "elif", "nonlinearity", "==", "'sin_and_cos'", ":", "\n", "\t\t\t", "nonlinearity", "=", "SinAndCos", "\n", "", "else", ":", "\n", "\t\t\t", "raise", "NotImplementedError", "\n", "\n", "", "if", "num_layers", "==", "1", ":", "\n", "\t\t\t", "self", ".", "fn", "=", "nn", ".", "Sequential", "(", "\n", "ParallelLinear", "(", "in_features", ",", "out_features", ",", "num_copies", ")", ")", "\n", "", "else", ":", "\n", "\t\t\t", "layers", "=", "[", "ParallelLinear", "(", "in_features", ",", "hidden_size", ",", "num_copies", ")", ",", "\n", "nonlinearity", "(", ")", ",", "\n", "ParallelLinear", "(", "hidden_size", ",", "out_features", ",", "num_copies", ")", "]", "\n", "for", "_", "in", "range", "(", "num_layers", "-", "2", ")", ":", "\n", "\t\t\t\t", "layers", ".", "insert", "(", "2", ",", "nonlinearity", "(", ")", ")", "\n", "layers", ".", "insert", "(", "2", ",", "ParallelLinear", "(", "hidden_size", ",", "hidden_size", ",", "num_copies", ")", ")", "\n", "", "self", ".", "fn", "=", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.utils.ParallelMLP.forward": [[462, 464], ["utils.ParallelMLP.fn().permute", "utils.ParallelMLP.fn"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\t\t", "return", "self", ".", "fn", "(", "x", ")", ".", "permute", "(", "2", ",", "1", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.utils._ECELoss.__init__": [[584, 596], ["super().__init__", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace"], "methods", ["home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.src.spin.SpectralNetwork.__init__"], ["\t", "def", "__init__", "(", "self", ",", "n_bins", "=", "15", ")", ":", "\n", "\t\t", "\"\"\"\n\t\tn_bins (int): number of confidence interval bins\n\t\t\"\"\"", "\n", "super", "(", "_ECELoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "bin_boundaries", "=", "torch", ".", "linspace", "(", "0", ",", "1", ",", "n_bins", "+", "1", ")", "\n", "self", ".", "bin_lowers", "=", "bin_boundaries", "[", ":", "-", "1", "]", "\n", "self", ".", "bin_uppers", "=", "bin_boundaries", "[", "1", ":", "]", "\n", "\n", "bin_boundaries_plot", "=", "torch", ".", "linspace", "(", "0", ",", "1", ",", "11", ")", "\n", "self", ".", "bin_lowers_plot", "=", "bin_boundaries_plot", "[", ":", "-", "1", "]", "\n", "self", ".", "bin_uppers_plot", "=", "bin_boundaries_plot", "[", "1", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.utils._ECELoss.forward": [[597, 637], ["predictions.eq", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "zip", "zip", "in_bin.float().mean", "in_bin.float().mean", "accuracy_in_bin_list.append", "matplotlib.figure", "matplotlib.figure", "matplotlib.bar", "matplotlib.bar", "matplotlib.plot", "matplotlib.plot", "matplotlib.ylabel", "matplotlib.ylabel", "matplotlib.xlabel", "matplotlib.xlabel", "matplotlib.xticks", "matplotlib.xticks", "matplotlib.yticks", "matplotlib.yticks", "matplotlib.xlim", "matplotlib.xlim", "matplotlib.ylim", "matplotlib.ylim", "matplotlib.grid", "matplotlib.grid", "matplotlib.text", "matplotlib.text", "matplotlib.figure.tight_layout", "matplotlib.savefig", "matplotlib.savefig", "confidences.gt", "confidences.le", "in_bin.float().mean.item", "accuracies[].float().mean", "confidences[].mean", "confidences.gt", "confidences.le", "in_bin.float().mean.item", "accuracies[].float().mean().item", "numpy.arange", "numpy.arange", "bin_lower.item", "bin_upper.item", "in_bin.float", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "bin_lower.item", "bin_upper.item", "in_bin.float", "numpy.arange", "torch.zeros.item", "torch.zeros.item", "torch.zeros.item", "accuracies[].float", "accuracies[].float().mean", "accuracies[].float"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "confidences", ",", "predictions", ",", "labels", ",", "title", "=", "None", ")", ":", "\n", "\t\t", "accuracies", "=", "predictions", ".", "eq", "(", "labels", ")", "\n", "ece", "=", "torch", ".", "zeros", "(", "1", ",", "device", "=", "confidences", ".", "device", ")", "\n", "for", "bin_lower", ",", "bin_upper", "in", "zip", "(", "self", ".", "bin_lowers", ",", "self", ".", "bin_uppers", ")", ":", "\n", "# Calculated |confidence - accuracy| in each bin", "\n", "\t\t\t", "in_bin", "=", "confidences", ".", "gt", "(", "bin_lower", ".", "item", "(", ")", ")", "*", "confidences", ".", "le", "(", "bin_upper", ".", "item", "(", ")", ")", "\n", "prop_in_bin", "=", "in_bin", ".", "float", "(", ")", ".", "mean", "(", ")", "\n", "if", "prop_in_bin", ".", "item", "(", ")", ">", "0", ":", "\n", "\t\t\t\t", "accuracy_in_bin", "=", "accuracies", "[", "in_bin", "]", ".", "float", "(", ")", ".", "mean", "(", ")", "\n", "avg_confidence_in_bin", "=", "confidences", "[", "in_bin", "]", ".", "mean", "(", ")", "\n", "ece", "+=", "torch", ".", "abs", "(", "avg_confidence_in_bin", "-", "accuracy_in_bin", ")", "*", "prop_in_bin", "\n", "\n", "", "", "accuracy_in_bin_list", "=", "[", "]", "\n", "for", "bin_lower", ",", "bin_upper", "in", "zip", "(", "self", ".", "bin_lowers_plot", ",", "self", ".", "bin_uppers_plot", ")", ":", "\n", "\t\t\t", "in_bin", "=", "confidences", ".", "gt", "(", "bin_lower", ".", "item", "(", ")", ")", "*", "confidences", ".", "le", "(", "bin_upper", ".", "item", "(", ")", ")", "\n", "prop_in_bin", "=", "in_bin", ".", "float", "(", ")", ".", "mean", "(", ")", "\n", "accuracy_in_bin", "=", "0", "\n", "if", "prop_in_bin", ".", "item", "(", ")", ">", "0", ":", "\n", "\t\t\t\t", "accuracy_in_bin", "=", "accuracies", "[", "in_bin", "]", ".", "float", "(", ")", ".", "mean", "(", ")", ".", "item", "(", ")", "\n", "", "accuracy_in_bin_list", ".", "append", "(", "accuracy_in_bin", ")", "\n", "\n", "", "if", "title", ":", "\n", "\t\t\t", "fig", "=", "plt", ".", "figure", "(", "figsize", "=", "(", "8", ",", "6", ")", ")", "\n", "p1", "=", "plt", ".", "bar", "(", "np", ".", "arange", "(", "10", ")", "/", "10.", ",", "accuracy_in_bin_list", ",", "0.1", ",", "align", "=", "'edge'", ",", "edgecolor", "=", "'black'", ")", "\n", "p2", "=", "plt", ".", "plot", "(", "[", "0", ",", "1", "]", ",", "[", "0", ",", "1", "]", ",", "'--'", ",", "color", "=", "'gray'", ")", "\n", "\n", "plt", ".", "ylabel", "(", "'Accuracy'", ",", "fontsize", "=", "18", ")", "\n", "plt", ".", "xlabel", "(", "'Confidence'", ",", "fontsize", "=", "18", ")", "\n", "#plt.title(title)", "\n", "plt", ".", "xticks", "(", "np", ".", "arange", "(", "0", ",", "1.01", ",", "0.2", ")", ",", "fontsize", "=", "12", ")", "\n", "plt", ".", "yticks", "(", "np", ".", "arange", "(", "0", ",", "1.01", ",", "0.2", ")", ",", "fontsize", "=", "12", ")", "\n", "plt", ".", "xlim", "(", "left", "=", "0", ",", "right", "=", "1", ")", "\n", "plt", ".", "ylim", "(", "bottom", "=", "0", ",", "top", "=", "1", ")", "\n", "plt", ".", "grid", "(", "True", ")", "\n", "#plt.legend((p1[0], p2[0]), ('Men', 'Women'))", "\n", "plt", ".", "text", "(", "0.1", ",", "0.83", ",", "'ECE: {:.4f}'", ".", "format", "(", "ece", ".", "item", "(", ")", ")", ",", "fontsize", "=", "18", ")", "\n", "fig", ".", "tight_layout", "(", ")", "\n", "plt", ".", "savefig", "(", "title", ",", "format", "=", "'pdf'", ",", "dpi", "=", "600", ",", "bbox_inches", "=", "'tight'", ")", "\n", "\n", "", "return", "ece", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.utils.psd_safe_cholesky": [[38, 79], ["torch.cholesky", "torch.cholesky", "torch.cholesky", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan.any", "A.clone", "range", "NanError", "A.clone.diagonal().add_", "torch.cholesky", "torch.cholesky", "torch.cholesky", "warnings.warn", "A.clone.diagonal", "torch.isnan.sum().item", "A.numel", "torch.isnan.sum"], "function", ["None"], ["def", "psd_safe_cholesky", "(", "A", ",", "upper", "=", "False", ",", "out", "=", "None", ",", "jitter", "=", "None", ")", ":", "\n", "\t", "\"\"\"Compute the Cholesky decomposition of A. If A is only p.s.d, add a small jitter to the diagonal.\n\tArgs:\n\t\t:attr:`A` (Tensor):\n\t\t\tThe tensor to compute the Cholesky decomposition of\n\t\t:attr:`upper` (bool, optional):\n\t\t\tSee torch.cholesky\n\t\t:attr:`out` (Tensor, optional):\n\t\t\tSee torch.cholesky\n\t\t:attr:`jitter` (float, optional):\n\t\t\tThe jitter to add to the diagonal of A in case A is only p.s.d. If omitted, chosen\n\t\t\tas 1e-6 (float) or 1e-8 (double)\n\t\"\"\"", "\n", "try", ":", "\n", "\t\t", "L", "=", "torch", ".", "cholesky", "(", "A", ",", "upper", "=", "upper", ",", "out", "=", "out", ")", "\n", "return", "L", "\n", "", "except", "RuntimeError", "as", "e", ":", "\n", "\t\t", "isnan", "=", "torch", ".", "isnan", "(", "A", ")", "\n", "if", "isnan", ".", "any", "(", ")", ":", "\n", "\t\t\t", "raise", "NanError", "(", "\n", "f\"cholesky_cpu: {isnan.sum().item()} of {A.numel()} elements of the {A.shape} tensor are NaN.\"", "\n", ")", "\n", "\n", "", "if", "jitter", "is", "None", ":", "\n", "\t\t\t", "jitter", "=", "1e-6", "if", "A", ".", "dtype", "==", "torch", ".", "float32", "else", "1e-8", "\n", "", "Aprime", "=", "A", ".", "clone", "(", ")", "\n", "jitter_prev", "=", "0", "\n", "for", "i", "in", "range", "(", "5", ")", ":", "\n", "\t\t\t", "jitter_new", "=", "jitter", "*", "(", "10", "**", "i", ")", "\n", "Aprime", ".", "diagonal", "(", "dim1", "=", "-", "2", ",", "dim2", "=", "-", "1", ")", ".", "add_", "(", "jitter_new", "-", "jitter_prev", ")", "\n", "jitter_prev", "=", "jitter_new", "\n", "try", ":", "\n", "\t\t\t\t", "L", "=", "torch", ".", "cholesky", "(", "Aprime", ",", "upper", "=", "upper", ",", "out", "=", "out", ")", "\n", "warnings", ".", "warn", "(", "\n", "f\"A not p.d., added jitter of {jitter_new} to the diagonal\"", ",", "\n", "RuntimeWarning", ",", "\n", ")", "\n", "return", "L", "\n", "", "except", "RuntimeError", ":", "\n", "\t\t\t\t", "continue", "\n", "", "", "raise", "e", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.utils.polynomial_kernel": [[81, 91], ["x1.unsqueeze.flatten", "x2.unsqueeze.flatten", "x1.unsqueeze.dim", "x1.unsqueeze.unsqueeze", "x2.unsqueeze.dim", "x2.unsqueeze.unsqueeze"], "function", ["home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.swag.flatten", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.swag.flatten"], ["", "", "def", "polynomial_kernel", "(", "degree", ",", "eta", ",", "nu", ",", "x1", ",", "x2", "=", "None", ")", ":", "\n", "\t", "if", "x2", "is", "None", ":", "\n", "\t\t", "x2", "=", "x1", "\n", "", "if", "x1", ".", "dim", "(", ")", "==", "1", ":", "\n", "\t\t", "x1", "=", "x1", ".", "unsqueeze", "(", "-", "1", ")", "\n", "", "if", "x2", ".", "dim", "(", ")", "==", "1", ":", "\n", "\t\t", "x2", "=", "x2", ".", "unsqueeze", "(", "-", "1", ")", "\n", "", "x1", "=", "x1", ".", "flatten", "(", "1", ")", "\n", "x2", "=", "x2", ".", "flatten", "(", "1", ")", "\n", "return", "(", "x1", "@", "x2", ".", "T", "*", "eta", "+", "nu", ")", "**", "degree", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.utils.sigmoid_kernel": [[92, 102], ["x1.unsqueeze.flatten", "x2.unsqueeze.flatten", "x1.unsqueeze.dim", "x1.unsqueeze.unsqueeze", "x2.unsqueeze.dim", "x2.unsqueeze.unsqueeze", "x1.unsqueeze.unsqueeze", "x2.unsqueeze.unsqueeze"], "function", ["home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.swag.flatten", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.swag.flatten"], ["", "def", "sigmoid_kernel", "(", "eta", ",", "nu", ",", "x1", ",", "x2", "=", "None", ")", ":", "\n", "\t", "if", "x2", "is", "None", ":", "\n", "\t\t", "x2", "=", "x1", "\n", "", "if", "x1", ".", "dim", "(", ")", "==", "1", ":", "\n", "\t\t", "x1", "=", "x1", ".", "unsqueeze", "(", "-", "1", ")", "\n", "", "if", "x2", ".", "dim", "(", ")", "==", "1", ":", "\n", "\t\t", "x2", "=", "x2", ".", "unsqueeze", "(", "-", "1", ")", "\n", "", "x1", "=", "x1", ".", "flatten", "(", "1", ")", "\n", "x2", "=", "x2", ".", "flatten", "(", "1", ")", "\n", "return", "(", "(", "x1", ".", "unsqueeze", "(", "1", ")", "*", "x2", ".", "unsqueeze", "(", "0", ")", ")", ".", "sum", "(", "-", "1", ")", "*", "eta", "+", "nu", ")", ".", "tanh", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.utils.cosine_kernel": [[103, 113], ["x1.unsqueeze.flatten", "x2.unsqueeze.flatten", "x1.unsqueeze.dim", "x1.unsqueeze.unsqueeze", "x2.unsqueeze.dim", "x2.unsqueeze.unsqueeze", "x1.unsqueeze.unsqueeze", "x2.unsqueeze.unsqueeze"], "function", ["home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.swag.flatten", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.swag.flatten"], ["", "def", "cosine_kernel", "(", "period", ",", "output_scale", ",", "length_scale", ",", "x1", ",", "x2", "=", "None", ")", ":", "\n", "\t", "if", "x2", "is", "None", ":", "\n", "\t\t", "x2", "=", "x1", "\n", "", "if", "x1", ".", "dim", "(", ")", "==", "1", ":", "\n", "\t\t", "x1", "=", "x1", ".", "unsqueeze", "(", "-", "1", ")", "\n", "", "if", "x2", ".", "dim", "(", ")", "==", "1", ":", "\n", "\t\t", "x2", "=", "x2", ".", "unsqueeze", "(", "-", "1", ")", "\n", "", "x1", "=", "x1", ".", "flatten", "(", "1", ")", "\n", "x2", "=", "x2", ".", "flatten", "(", "1", ")", "\n", "return", "(", "(", "(", "x1", ".", "unsqueeze", "(", "1", ")", "-", "x2", ".", "unsqueeze", "(", "0", ")", ")", "**", "2", ")", ".", "sum", "(", "-", "1", ")", ".", "sqrt", "(", ")", "*", "math", ".", "pi", "/", "period", "/", "length_scale", ")", ".", "cos", "(", ")", "*", "output_scale", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.utils.rbf_kernel": [[114, 129], ["x1.unsqueeze.flatten", "x2.unsqueeze.flatten", "x1.unsqueeze.dim", "x1.unsqueeze.unsqueeze", "x2.unsqueeze.dim", "x2.unsqueeze.unsqueeze"], "function", ["home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.swag.flatten", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.swag.flatten"], ["", "def", "rbf_kernel", "(", "output_scale", ",", "length_scale", ",", "x1", ",", "x2", "=", "None", ")", ":", "\n", "\t", "if", "x2", "is", "None", ":", "\n", "\t\t", "x2", "=", "x1", "\n", "\n", "", "if", "x1", ".", "dim", "(", ")", "==", "1", ":", "\n", "\t\t", "x1", "=", "x1", ".", "unsqueeze", "(", "-", "1", ")", "\n", "", "if", "x2", ".", "dim", "(", ")", "==", "1", ":", "\n", "\t\t", "x2", "=", "x2", ".", "unsqueeze", "(", "-", "1", ")", "\n", "\n", "", "x1", "=", "x1", ".", "flatten", "(", "1", ")", "\n", "x2", "=", "x2", ".", "flatten", "(", "1", ")", "\n", "\n", "#", "\n", "# (x1 ** 2).sum(-1).view(-1, 1) + (x2 ** 2).sum(-1).view(1, -1) - 2 * x1 @ x2.T", "\n", "return", "(", "-", "(", "(", "x1", "**", "2", ")", ".", "sum", "(", "-", "1", ")", ".", "view", "(", "-", "1", ",", "1", ")", "+", "(", "x2", "**", "2", ")", ".", "sum", "(", "-", "1", ")", ".", "view", "(", "1", ",", "-", "1", ")", "-", "2", "*", "x1", "@", "x2", ".", "T", ")", "/", "2.", "/", "length_scale", ")", ".", "exp", "(", ")", "*", "output_scale", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.utils.linear_kernel": [[130, 143], ["x1.unsqueeze.flatten", "x2.unsqueeze.flatten", "x1.unsqueeze.dim", "x1.unsqueeze.unsqueeze", "x2.unsqueeze.dim", "x2.unsqueeze.unsqueeze"], "function", ["home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.swag.flatten", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.swag.flatten"], ["", "def", "linear_kernel", "(", "x1", ",", "x2", "=", "None", ")", ":", "\n", "\t", "if", "x2", "is", "None", ":", "\n", "\t\t", "x2", "=", "x1", "\n", "\n", "", "if", "x1", ".", "dim", "(", ")", "==", "1", ":", "\n", "\t\t", "x1", "=", "x1", ".", "unsqueeze", "(", "-", "1", ")", "\n", "", "if", "x2", ".", "dim", "(", ")", "==", "1", ":", "\n", "\t\t", "x2", "=", "x2", ".", "unsqueeze", "(", "-", "1", ")", "\n", "\n", "", "x1", "=", "x1", ".", "flatten", "(", "1", ")", "\n", "x2", "=", "x2", ".", "flatten", "(", "1", ")", "\n", "\n", "return", "x1", "@", "x2", ".", "T", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.utils.periodic_plus_rbf_kernel": [[144, 158], ["x1.unsqueeze.flatten", "x2.unsqueeze.flatten", "x1.unsqueeze.dim", "x1.unsqueeze.unsqueeze", "x2.unsqueeze.dim", "x2.unsqueeze.unsqueeze", "x1.unsqueeze.unsqueeze", "x2.unsqueeze.unsqueeze", "x1.unsqueeze.unsqueeze", "x2.unsqueeze.unsqueeze"], "function", ["home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.swag.flatten", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.swag.flatten"], ["", "def", "periodic_plus_rbf_kernel", "(", "period", ",", "output_scale1", ",", "length_scale1", ",", "output_scale2", ",", "length_scale2", ",", "x1", ",", "x2", "=", "None", ")", ":", "\n", "\t", "if", "x2", "is", "None", ":", "\n", "\t\t", "x2", "=", "x1", "\n", "", "if", "x1", ".", "dim", "(", ")", "==", "1", ":", "\n", "\t\t", "x1", "=", "x1", ".", "unsqueeze", "(", "-", "1", ")", "\n", "", "if", "x2", ".", "dim", "(", ")", "==", "1", ":", "\n", "\t\t", "x2", "=", "x2", ".", "unsqueeze", "(", "-", "1", ")", "\n", "\n", "", "x1", "=", "x1", ".", "flatten", "(", "1", ")", "\n", "x2", "=", "x2", ".", "flatten", "(", "1", ")", "\n", "\n", "out1", "=", "(", "-", "(", "(", "(", "x1", ".", "unsqueeze", "(", "1", ")", "-", "x2", ".", "unsqueeze", "(", "0", ")", ")", ".", "abs", "(", ")", ".", "sum", "(", "-", "1", ")", "*", "math", ".", "pi", "/", "period", ")", ".", "sin", "(", ")", "**", "2", ")", "*", "2.", "/", "length_scale1", ")", ".", "exp", "(", ")", "*", "output_scale1", "\n", "out2", "=", "(", "-", "(", "(", "x1", ".", "unsqueeze", "(", "1", ")", "-", "x2", ".", "unsqueeze", "(", "0", ")", ")", "**", "2", ")", ".", "sum", "(", "-", "1", ")", "/", "2.", "/", "length_scale2", ")", ".", "exp", "(", ")", "*", "output_scale2", "\n", "return", "out1", "+", "out2", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.utils.nystrom": [[160, 171], ["timeit.default_timer", "kernel", "scipy.linalg.eigh", "timeit.default_timer", "kernel.data.cpu().numpy", "torch.from_numpy().to().float", "torch.from_numpy().to().float", "torch.from_numpy().to().float", "torch.from_numpy().to().float", "torch.from_numpy().to().float", "torch.from_numpy().to().float", "range", "math.sqrt", "kernel.data.cpu", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "range", "kernel", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "function", ["home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.swag.SWAG.to", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.swag.SWAG.to", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.swag.SWAG.to", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.swag.SWAG.to", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.swag.SWAG.to", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.swag.SWAG.to"], ["", "def", "nystrom", "(", "X", ",", "k", ",", "kernel", ")", ":", "\n", "\t", "start", "=", "timer", "(", ")", "\n", "K", "=", "kernel", "(", "X", ")", "\n", "p", ",", "q", "=", "scipy", ".", "linalg", ".", "eigh", "(", "K", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "subset_by_index", "=", "[", "K", ".", "shape", "[", "0", "]", "-", "k", ",", "K", ".", "shape", "[", "0", "]", "-", "1", "]", ")", "\n", "p", "=", "torch", ".", "from_numpy", "(", "p", ")", ".", "to", "(", "X", ".", "device", ")", ".", "float", "(", ")", "[", "range", "(", "-", "1", ",", "-", "(", "k", "+", "1", ")", ",", "-", "1", ")", "]", "\n", "q", "=", "torch", ".", "from_numpy", "(", "q", ")", ".", "to", "(", "X", ".", "device", ")", ".", "float", "(", ")", "[", ":", ",", "range", "(", "-", "1", ",", "-", "(", "k", "+", "1", ")", ",", "-", "1", ")", "]", "\n", "# p, q = torch.symeig(K, eigenvectors=True)", "\n", "eigenvalues_nystrom", "=", "p", "/", "X", ".", "shape", "[", "0", "]", "\n", "eigenfuncs_nystrom", "=", "lambda", "x", ":", "kernel", "(", "x", ",", "X", ")", "@", "q", "/", "p", "*", "math", ".", "sqrt", "(", "X", ".", "shape", "[", "0", "]", ")", "\n", "end", "=", "timer", "(", ")", "\n", "return", "eigenvalues_nystrom", ",", "eigenfuncs_nystrom", ",", "end", "-", "start", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.utils.oas": [[173, 194], ["min"], "function", ["None"], ["", "def", "oas", "(", "X", ")", ":", "\n", "# shrinkage the covariance matrix", "\n", "\t", "n_samples", ",", "n_features", "=", "X", ".", "shape", "\n", "\n", "# emp_cov = X.T @ X / n_samples", "\n", "# tmp = torch.trace(emp_cov).item() / n_features", "\n", "\n", "mu", "=", "(", "X", "**", "2", ")", ".", "mean", "(", ")", ".", "item", "(", ")", "\n", "# assert np.isclose(mu, tmp), (mu, tmp)", "\n", "\n", "# formula from Chen et al.'s **implementation**", "\n", "# tmp = (emp_cov ** 2).mean().item()", "\n", "alpha", "=", "(", "(", "X", "@", "X", ".", "T", "/", "n_features", ")", "**", "2", ")", ".", "mean", "(", ")", ".", "item", "(", ")", "\n", "\n", "# assert np.isclose(alpha, tmp), (alpha, tmp)", "\n", "\n", "num", "=", "alpha", "+", "mu", "**", "2", "\n", "den", "=", "(", "n_samples", "+", "1.", ")", "*", "(", "alpha", "-", "(", "mu", "**", "2", ")", "/", "n_features", ")", "\n", "\n", "shrinkage", "=", "1.", "if", "den", "==", "0", "else", "min", "(", "num", "/", "den", ",", "1.", ")", "\n", "return", "mu", ",", "shrinkage", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.utils.build_mlp_given_config": [[211, 234], ["torch.Sequential", "range", "torch.Sequential", "functools.partial", "torch.Linear", "torch.Linear", "functools.partial.", "torch.Linear", "layers.insert", "layers.insert", "float", "functools.partial.", "torch.Linear", "kwargs[].replace"], "function", ["None"], ["", "", "def", "build_mlp_given_config", "(", "**", "kwargs", ")", ":", "\n", "\t", "if", "kwargs", "[", "'nonlinearity'", "]", "==", "'relu'", ":", "\n", "\t\t", "nonlinearity", "=", "nn", ".", "ReLU", "\n", "", "elif", "'lrelu'", "in", "kwargs", "[", "'nonlinearity'", "]", ":", "\n", "\t\t", "nonlinearity", "=", "partial", "(", "nn", ".", "LeakyReLU", ",", "float", "(", "kwargs", "[", "'nonlinearity'", "]", ".", "replace", "(", "\"lrelu\"", ",", "\"\"", ")", ")", ")", "\n", "", "elif", "kwargs", "[", "'nonlinearity'", "]", "==", "'erf'", ":", "\n", "\t\t", "nonlinearity", "=", "Erf", "\n", "", "elif", "kwargs", "[", "'nonlinearity'", "]", "==", "'sin_and_cos'", ":", "\n", "\t\t", "nonlinearity", "=", "SinAndCos", "\n", "", "else", ":", "\n", "\t\t", "raise", "NotImplementedError", "\n", "", "if", "kwargs", "[", "'num_layers'", "]", "==", "1", ":", "\n", "\t\t", "function", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "kwargs", "[", "'input_size'", "]", ",", "kwargs", "[", "'output_size'", "]", ",", "bias", "=", "kwargs", "[", "'bias'", "]", ")", ")", "\n", "", "else", ":", "\n", "\t\t", "layers", "=", "[", "nn", ".", "Linear", "(", "kwargs", "[", "'input_size'", "]", ",", "kwargs", "[", "'hidden_size'", "]", ",", "bias", "=", "kwargs", "[", "'bias'", "]", ")", ",", "\n", "nonlinearity", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "kwargs", "[", "'hidden_size'", "]", ",", "kwargs", "[", "'output_size'", "]", ",", "bias", "=", "kwargs", "[", "'bias'", "]", ")", "]", "\n", "for", "_", "in", "range", "(", "kwargs", "[", "'num_layers'", "]", "-", "2", ")", ":", "\n", "\t\t\t", "layers", ".", "insert", "(", "2", ",", "nonlinearity", "(", ")", ")", "\n", "layers", ".", "insert", "(", "2", ",", "nn", ".", "Linear", "(", "kwargs", "[", "'hidden_size'", "]", ",", "kwargs", "[", "'hidden_size'", "]", ",", "bias", "=", "kwargs", "[", "'bias'", "]", ")", ")", "\n", "", "function", "=", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "", "return", "function", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.utils.init_NN": [[235, 260], ["model.modules", "isinstance", "isinstance", "isinstance", "isinstance", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.init._calculate_fan_in_and_fan_out", "m.weight.normal_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "math.sqrt", "len", "math.sqrt", "m.bias.normal_", "m.bias.fill_", "math.sqrt"], "function", ["None"], ["", "def", "init_NN", "(", "model", ",", "w_var_list", ",", "b_var_list", ")", ":", "\n", "\t", "if", "not", "isinstance", "(", "w_var_list", ",", "list", ")", ":", "\n", "\t\t", "w_var_list", "=", "[", "w_var_list", "]", "\n", "", "if", "not", "isinstance", "(", "b_var_list", ",", "list", ")", ":", "\n", "\t\t", "b_var_list", "=", "[", "b_var_list", "]", "\n", "", "i", "=", "0", "\n", "for", "m", "in", "model", ".", "modules", "(", ")", ":", "\n", "\t\t", "if", "isinstance", "(", "m", ",", "(", "nn", ".", "Linear", ",", "nn", ".", "Conv2d", ")", ")", ":", "\n", "\t\t\t", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "\t\t\t\t", "fan_in", ",", "_", "=", "nn", ".", "init", ".", "_calculate_fan_in_and_fan_out", "(", "m", ".", "weight", ")", "\n", "m", ".", "weight", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "w_var_list", "[", "i", "]", "/", "fan_in", ")", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "\t\t\t\t\t", "if", "math", ".", "sqrt", "(", "b_var_list", "[", "i", "]", ")", ">", "0", ":", "\n", "\t\t\t\t\t\t", "m", ".", "bias", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "b_var_list", "[", "i", "]", ")", ")", "\n", "", "else", ":", "\n", "\t\t\t\t\t\t", "m", ".", "bias", ".", "fill_", "(", "0.", ")", "\n", "", "", "i", "+=", "1", "\n", "if", "i", ">=", "len", "(", "w_var_list", ")", ":", "\n", "\t\t\t\t\t", "i", "=", "0", "\n", "\n", "", "", "", "elif", "isinstance", "(", "m", ",", "(", "nn", ".", "BatchNorm2d", ",", "nn", ".", "GroupNorm", ")", ")", ":", "\n", "\t\t\t", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "running_mean", ",", "0", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "running_var", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.utils.data_transform": [[465, 467], ["x.flatten().mul_().sub_", "x.flatten().mul_", "x.flatten"], "function", ["home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.swag.flatten"], ["", "", "def", "data_transform", "(", "x", ")", ":", "\n", "\t", "return", "x", ".", "flatten", "(", ")", ".", "mul_", "(", "2", ")", ".", "sub_", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.utils.load_mnist": [[468, 507], ["torchvision.datasets.MNIST", "torchvision.datasets.MNIST", "hasattr", "torchvision.datasets.MNIST", "torchvision.datasets.MNIST", "hasattr", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torchvision.Compose", "torchvision.Compose", "torchvision.ToTensor", "torchvision.Lambda", "torchvision.ToTensor", "torchvision.Lambda"], "function", ["None"], ["", "def", "load_mnist", "(", "args", ")", ":", "\n", "\t", "train_dataset", "=", "torchvision", ".", "datasets", ".", "MNIST", "(", "root", "=", "args", ".", "data_path", ",", "\n", "train", "=", "True", ",", "\n", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Lambda", "(", "data_transform", ")", ",", "\n", "]", ")", ",", "\n", "download", "=", "True", ")", "\n", "if", "hasattr", "(", "args", ",", "'num_classes'", ")", ":", "\n", "\t\t", "idx", "=", "(", "train_dataset", ".", "targets", "<", "args", ".", "num_classes", ")", "\n", "train_dataset", ".", "targets", "=", "train_dataset", ".", "targets", "[", "idx", "]", "\n", "train_dataset", ".", "data", "=", "train_dataset", ".", "data", "[", "idx", "]", "\n", "\n", "\n", "", "test_dataset", "=", "torchvision", ".", "datasets", ".", "MNIST", "(", "root", "=", "args", ".", "data_path", ",", "\n", "train", "=", "False", ",", "\n", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Lambda", "(", "data_transform", ")", ",", "\n", "]", ")", "\n", ")", "\n", "if", "hasattr", "(", "args", ",", "'num_classes'", ")", ":", "\n", "\t\t", "idx", "=", "(", "test_dataset", ".", "targets", "<", "args", ".", "num_classes", ")", "\n", "test_dataset", ".", "targets", "=", "test_dataset", ".", "targets", "[", "idx", "]", "\n", "test_dataset", ".", "data", "=", "test_dataset", ".", "data", "[", "idx", "]", "\n", "\n", "", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataset", "=", "train_dataset", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "shuffle", "=", "True", ",", "\n", "num_workers", "=", "args", ".", "workers", ",", "\n", "pin_memory", "=", "True", ")", "\n", "\n", "test_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataset", "=", "test_dataset", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "args", ".", "workers", ",", "\n", "pin_memory", "=", "True", ")", "\n", "args", ".", "input_size", "=", "784", "\n", "return", "train_loader", ",", "test_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.utils.dataset_with_indices": [[509, 521], ["type", "cls.__getitem__", "torchvision.datasets.ImageFolder", "torchvision.datasets.ImageFolder"], "function", ["None"], ["", "def", "dataset_with_indices", "(", "cls", ")", ":", "\n", "\t", "\"\"\"\n\tModifies the given Dataset class to return a tuple data, target, index\n\tinstead of just data, target.\n\t\"\"\"", "\n", "\n", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "\t\t", "data", ",", "target", "=", "cls", ".", "__getitem__", "(", "self", ",", "index", ")", "\n", "return", "data", ",", "target", ",", "index", "\n", "\n", "", "return", "type", "(", "cls", ".", "__name__", ",", "(", "cls", ",", ")", ",", "{", "\n", "'__getitem__'", ":", "__getitem__", ",", "\n", "}", ")", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.utils.load_cifar": [[524, 582], ["torchvision.Normalize", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "dataset", "dataset", "dataset", "torchvision.datasets.SVHN", "torchvision.datasets.SVHN", "utils.dataset_with_indices", "torchvision.Compose", "torchvision.Compose", "torchvision.Compose", "torchvision.Compose", "torchvision.Compose", "torchvision.RandomHorizontalFlip", "torchvision.RandomCrop", "torchvision.ToTensor", "torchvision.ToTensor", "torchvision.ToTensor", "torchvision.ToTensor", "torchvision.ToTensor"], "function", ["home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.utils.dataset_with_indices"], ["", "def", "load_cifar", "(", "args", ")", ":", "\n", "\t", "if", "args", ".", "dataset", "==", "'cifar10'", ":", "\n", "\t\t", "mean", ",", "std", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "[", "0.229", ",", "0.224", ",", "0.225", "]", "\n", "dataset", "=", "torchvision", ".", "datasets", ".", "CIFAR10", "\n", "", "elif", "args", ".", "dataset", "==", "'cifar100'", ":", "\n", "\t\t", "mean", ",", "std", "=", "[", "x", "/", "255", "for", "x", "in", "[", "129.3", ",", "124.1", ",", "112.4", "]", "]", ",", "[", "x", "/", "255", "for", "x", "in", "[", "68.2", ",", "65.4", ",", "70.4", "]", "]", "\n", "dataset", "=", "torchvision", ".", "datasets", ".", "CIFAR100", "\n", "\n", "", "normalize", "=", "transforms", ".", "Normalize", "(", "mean", "=", "mean", ",", "std", "=", "std", ")", "\n", "\n", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "dataset", "(", "root", "=", "args", ".", "data_dir", ",", "train", "=", "True", ",", "\n", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "RandomCrop", "(", "32", ",", "4", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", ",", "\n", "]", ")", ",", "download", "=", "True", ")", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "True", ",", "\n", "num_workers", "=", "args", ".", "workers", ",", "pin_memory", "=", "True", ")", "\n", "\n", "nef_collect_train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "dataset", "(", "root", "=", "args", ".", "data_dir", ",", "train", "=", "True", ",", "\n", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", ",", "\n", "]", ")", ",", "download", "=", "True", ")", ",", "\n", "batch_size", "=", "args", ".", "nef_batch_size_collect", ",", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "args", ".", "workers", ",", "pin_memory", "=", "True", ")", "\n", "\n", "nef_train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "dataset_with_indices", "(", "dataset", ")", "(", "root", "=", "args", ".", "data_dir", ",", "train", "=", "True", ",", "\n", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", ",", "\n", "]", ")", ",", "download", "=", "True", ")", ",", "\n", "batch_size", "=", "args", ".", "nef_batch_size", ",", "shuffle", "=", "True", ",", "\n", "num_workers", "=", "args", ".", "workers", ",", "pin_memory", "=", "True", ")", "\n", "\n", "val_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "dataset", "(", "root", "=", "args", ".", "data_dir", ",", "train", "=", "False", ",", "\n", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", ",", "\n", "]", ")", ",", "download", "=", "True", ")", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "args", ".", "workers", ",", "pin_memory", "=", "True", ")", "\n", "\n", "ood_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "torchvision", ".", "datasets", ".", "SVHN", "(", "root", "=", "args", ".", "data_dir", ",", "split", "=", "'test'", ",", "\n", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", ",", "\n", "]", ")", ",", "download", "=", "True", ")", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "args", ".", "workers", ",", "pin_memory", "=", "True", ")", "\n", "\n", "return", "train_loader", ",", "nef_collect_train_loader", ",", "nef_train_loader", ",", "val_loader", ",", "ood_loader", ",", "10", "if", "args", ".", "dataset", "==", "'cifar10'", "else", "100", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.utils.binary_classification_given_uncertainty": [[638, 657], ["numpy.concatenate", "torch.cat().data.cpu().numpy", "torch.cat().data.cpu().numpy", "torch.cat().data.cpu().numpy", "sklearn.metrics.precision_recall_curve", "sklearn.metrics.average_precision_score", "matplotlib.figure", "plt.figure.add_subplot", "seaborn.kdeplot", "seaborn.kdeplot", "fig.add_subplot.text", "matplotlib.savefig", "print", "uncs_id.data.cpu().numpy", "uncs_ood.data.cpu().numpy", "matplotlib.legend", "numpy.zeros", "numpy.ones", "torch.cat().data.cpu", "torch.cat().data.cpu", "torch.cat().data.cpu", "uncs_id.data.cpu", "uncs_ood.data.cpu", "torch.cat", "torch.cat", "torch.cat"], "function", ["None"], ["", "", "def", "binary_classification_given_uncertainty", "(", "uncs_id", ",", "uncs_ood", ",", "file_name", ",", "reverse", "=", "False", ")", ":", "\n", "\t", "y", "=", "np", ".", "concatenate", "(", "[", "np", ".", "zeros", "(", "(", "uncs_id", ".", "shape", "[", "0", "]", ",", ")", ")", ",", "np", ".", "ones", "(", "(", "uncs_ood", ".", "shape", "[", "0", "]", ",", ")", ")", "]", ")", "\n", "if", "reverse", ":", "\n", "\t\t", "y", "=", "1", "-", "y", "\n", "", "x", "=", "torch", ".", "cat", "(", "[", "uncs_id", ",", "uncs_ood", "]", ")", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "fpr", ",", "tpr", ",", "thresholds", "=", "metrics", ".", "precision_recall_curve", "(", "y", ",", "x", ")", "\n", "auroc", "=", "metrics", ".", "average_precision_score", "(", "y", ",", "x", ")", "\n", "\n", "fig", "=", "plt", ".", "figure", "(", "figsize", "=", "(", "5", ",", "4", ")", ")", "\n", "ax", "=", "fig", ".", "add_subplot", "(", "1", ",", "1", ",", "1", ")", "\n", "sns", ".", "kdeplot", "(", "uncs_id", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "shade", "=", "True", ",", "color", "=", "\"r\"", ",", "label", "=", "'In-distribution'", ")", "\n", "sns", ".", "kdeplot", "(", "uncs_ood", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "shade", "=", "True", ",", "color", "=", "\"b\"", ",", "label", "=", "'Out-of-distribution'", ")", "\n", "ax", ".", "text", "(", "0.3", ",", "0.7", ",", "'AUPR: {:.4f}'", ".", "format", "(", "auroc", ")", ",", "fontsize", "=", "18", ",", "transform", "=", "ax", ".", "transAxes", ")", "\n", "if", "'ntkunc'", "in", "file_name", ":", "\n", "\t\t", "plt", ".", "legend", "(", "loc", "=", "'center right'", ")", "\n", "", "plt", ".", "savefig", "(", "file_name", ",", "format", "=", "'pdf'", ",", "dpi", "=", "600", ",", "bbox_inches", "=", "'tight'", ")", "\n", "\n", "print", "(", "\"\\tAUPR is {:.4f}\"", ".", "format", "(", "auroc", ")", ")", "\n", "return", "auroc", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.utils.fuse_single_conv_bn_pair": [[658, 704], ["isinstance", "isinstance", "m.state_dict", "conv.state_dict", "torch.sqrt", "torch.sqrt", "torch.sqrt", "gamma.div", "A.expand_as().transpose.expand_as().transpose", "W.mul_", "torch.zeros().float().to.add_", "conv.weight.data.copy_", "torch.zeros().float().to", "torch.zeros().float().to", "torch.zeros().float().to", "torch.zeros().float().to", "torch.zeros().float().to", "torch.zeros().float().to", "gamma.mul().div", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "conv.bias.data.copy_", "A.expand_as().transpose.expand_as", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "gamma.mul", "W.transpose", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "gamma.size", "W.size"], "function", ["home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.swag.SWAG.to", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.swag.SWAG.to", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.swag.SWAG.to", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.swag.SWAG.to", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.swag.SWAG.to", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.swag.SWAG.to"], ["", "def", "fuse_single_conv_bn_pair", "(", "block1", ",", "block2", ")", ":", "\n", "    ", "if", "isinstance", "(", "block1", ",", "nn", ".", "BatchNorm2d", ")", "and", "isinstance", "(", "block2", ",", "nn", ".", "Conv2d", ")", ":", "\n", "        ", "m", "=", "block1", "\n", "conv", "=", "block2", "\n", "\n", "bn_st_dict", "=", "m", ".", "state_dict", "(", ")", "\n", "conv_st_dict", "=", "conv", ".", "state_dict", "(", ")", "\n", "\n", "# BatchNorm params", "\n", "eps", "=", "m", ".", "eps", "\n", "mu", "=", "bn_st_dict", "[", "'running_mean'", "]", "\n", "var", "=", "bn_st_dict", "[", "'running_var'", "]", "\n", "gamma", "=", "bn_st_dict", "[", "'weight'", "]", "\n", "\n", "if", "'bias'", "in", "bn_st_dict", ":", "\n", "            ", "beta", "=", "bn_st_dict", "[", "'bias'", "]", "\n", "", "else", ":", "\n", "            ", "beta", "=", "torch", ".", "zeros", "(", "gamma", ".", "size", "(", "0", ")", ")", ".", "float", "(", ")", ".", "to", "(", "gamma", ".", "device", ")", "\n", "\n", "# Conv params", "\n", "", "W", "=", "conv_st_dict", "[", "'weight'", "]", "\n", "if", "'bias'", "in", "conv_st_dict", ":", "\n", "            ", "bias", "=", "conv_st_dict", "[", "'bias'", "]", "\n", "", "else", ":", "\n", "            ", "bias", "=", "torch", ".", "zeros", "(", "W", ".", "size", "(", "0", ")", ")", ".", "float", "(", ")", ".", "to", "(", "gamma", ".", "device", ")", "\n", "\n", "", "denom", "=", "torch", ".", "sqrt", "(", "var", "+", "eps", ")", "\n", "b", "=", "beta", "-", "gamma", ".", "mul", "(", "mu", ")", ".", "div", "(", "denom", ")", "\n", "A", "=", "gamma", ".", "div", "(", "denom", ")", "\n", "bias", "*=", "A", "\n", "A", "=", "A", ".", "expand_as", "(", "W", ".", "transpose", "(", "0", ",", "-", "1", ")", ")", ".", "transpose", "(", "0", ",", "-", "1", ")", "\n", "\n", "W", ".", "mul_", "(", "A", ")", "\n", "bias", ".", "add_", "(", "b", ")", "\n", "\n", "conv", ".", "weight", ".", "data", ".", "copy_", "(", "W", ")", "\n", "\n", "if", "conv", ".", "bias", "is", "None", ":", "\n", "            ", "conv", ".", "bias", "=", "torch", ".", "nn", ".", "Parameter", "(", "bias", ")", "\n", "", "else", ":", "\n", "            ", "conv", ".", "bias", ".", "data", ".", "copy_", "(", "bias", ")", "\n", "\n", "", "return", "conv", "\n", "\n", "", "else", ":", "\n", "        ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.utils.fuse_bn_recursively": [[705, 722], ["utils.fuse_single_conv_bn_pair", "torch.Identity", "len", "utils.fuse_bn_recursively"], "function", ["home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.utils.fuse_single_conv_bn_pair", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.utils.fuse_bn_recursively"], ["", "", "def", "fuse_bn_recursively", "(", "model", ")", ":", "\n", "    ", "previous_name", "=", "None", "\n", "\n", "for", "module_name", "in", "model", ".", "_modules", ":", "\n", "        ", "previous_name", "=", "module_name", "if", "previous_name", "is", "None", "else", "previous_name", "# Initialization", "\n", "\n", "conv_fused", "=", "fuse_single_conv_bn_pair", "(", "model", ".", "_modules", "[", "module_name", "]", ",", "model", ".", "_modules", "[", "previous_name", "]", ")", "\n", "if", "conv_fused", ":", "\n", "            ", "model", ".", "_modules", "[", "previous_name", "]", "=", "conv_fused", "\n", "model", ".", "_modules", "[", "module_name", "]", "=", "nn", ".", "Identity", "(", ")", "\n", "\n", "", "if", "len", "(", "model", ".", "_modules", "[", "module_name", "]", ".", "_modules", ")", ">", "0", ":", "\n", "            ", "fuse_bn_recursively", "(", "model", ".", "_modules", "[", "module_name", "]", ")", "\n", "\n", "", "previous_name", "=", "module_name", "\n", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.utils.load_imagenet": [[723, 796], ["os.path.join", "os.path.join", "torchvision.Normalize", "torchvision.datasets.ImageFolder", "torchvision.datasets.ImageFolder", "torchvision.datasets.ImageFolder", "torchvision.datasets.ImageFolder", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torchvision.datasets.ImageFolder", "torchvision.datasets.ImageFolder", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "print", "torchvision.Compose", "numpy.array", "torchvision.Compose", "numpy.array", "utils.dataset_with_indices", "torchvision.Compose", "numpy.array", "torchvision.Compose", "numpy.array", "len", "len", "enumerate", "enumerate", "enumerate", "enumerate", "torchvision.RandomResizedCrop", "torchvision.RandomHorizontalFlip", "torchvision.ToTensor", "torchvision.Resize", "torchvision.CenterCrop", "torchvision.ToTensor", "torchvision.Resize", "torchvision.CenterCrop", "torchvision.ToTensor", "torchvision.Resize", "torchvision.CenterCrop", "torchvision.ToTensor"], "function", ["home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.utils.dataset_with_indices"], ["", "def", "load_imagenet", "(", "args", ")", ":", "\n", "# Data loading code", "\n", "\t", "traindir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "data", ",", "'train'", ")", "\n", "valdir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "data", ",", "'val'", ")", "\n", "normalize", "=", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "\n", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "\n", "\n", "train_dataset", "=", "torchvision", ".", "datasets", ".", "ImageFolder", "(", "\n", "traindir", ",", "\n", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "RandomResizedCrop", "(", "224", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", ",", "\n", "]", ")", ")", "\n", "idx", "=", "np", ".", "array", "(", "train_dataset", ".", "targets", ")", "<", "args", ".", "num_classes", "\n", "train_dataset", ".", "samples", "=", "[", "s", "for", "i", ",", "s", "in", "enumerate", "(", "train_dataset", ".", "samples", ")", "if", "idx", "[", "i", "]", "]", "\n", "train_dataset", ".", "targets", "=", "[", "s", "[", "1", "]", "for", "s", "in", "train_dataset", ".", "samples", "]", "\n", "\n", "train_dataset_noaug", "=", "torchvision", ".", "datasets", ".", "ImageFolder", "(", "\n", "traindir", ",", "\n", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Resize", "(", "256", ")", ",", "\n", "transforms", ".", "CenterCrop", "(", "224", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", ",", "\n", "]", ")", ")", "\n", "idx", "=", "np", ".", "array", "(", "train_dataset_noaug", ".", "targets", ")", "<", "args", ".", "num_classes", "\n", "train_dataset_noaug", ".", "samples", "=", "[", "s", "for", "i", ",", "s", "in", "enumerate", "(", "train_dataset_noaug", ".", "samples", ")", "if", "idx", "[", "i", "]", "]", "\n", "train_dataset_noaug", ".", "targets", "=", "[", "s", "[", "1", "]", "for", "s", "in", "train_dataset_noaug", ".", "samples", "]", "\n", "\n", "train_dataset_noaug_with_indices", "=", "dataset_with_indices", "(", "torchvision", ".", "datasets", ".", "ImageFolder", ")", "(", "\n", "traindir", ",", "\n", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Resize", "(", "256", ")", ",", "\n", "transforms", ".", "CenterCrop", "(", "224", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", ",", "\n", "]", ")", ")", "\n", "idx", "=", "np", ".", "array", "(", "train_dataset_noaug_with_indices", ".", "targets", ")", "<", "args", ".", "num_classes", "\n", "train_dataset_noaug_with_indices", ".", "samples", "=", "[", "s", "for", "i", ",", "s", "in", "enumerate", "(", "train_dataset_noaug_with_indices", ".", "samples", ")", "if", "idx", "[", "i", "]", "]", "\n", "train_dataset_noaug_with_indices", ".", "targets", "=", "[", "s", "[", "1", "]", "for", "s", "in", "train_dataset_noaug_with_indices", ".", "samples", "]", "\n", "\n", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "train_dataset", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "True", ",", "\n", "num_workers", "=", "args", ".", "workers", ",", "pin_memory", "=", "True", ")", "\n", "train_loader_no_aug", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "train_dataset_noaug", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "args", ".", "workers", ",", "pin_memory", "=", "True", ")", "\n", "train_loader_no_aug_with_indices", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "train_dataset_noaug_with_indices", ",", "batch_size", "=", "args", ".", "nef_batch_size", ",", "shuffle", "=", "True", ",", "\n", "num_workers", "=", "args", ".", "workers", ",", "pin_memory", "=", "True", ")", "\n", "\n", "val_dataset", "=", "torchvision", ".", "datasets", ".", "ImageFolder", "(", "\n", "valdir", ",", "\n", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Resize", "(", "256", ")", ",", "\n", "transforms", ".", "CenterCrop", "(", "224", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", ",", "\n", "]", ")", ")", "\n", "idx", "=", "np", ".", "array", "(", "val_dataset", ".", "targets", ")", "<", "args", ".", "num_classes", "\n", "val_dataset", ".", "samples", "=", "[", "s", "for", "i", ",", "s", "in", "enumerate", "(", "val_dataset", ".", "samples", ")", "if", "idx", "[", "i", "]", "]", "\n", "val_dataset", ".", "targets", "=", "[", "s", "[", "1", "]", "for", "s", "in", "val_dataset", ".", "samples", "]", "\n", "\n", "val_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "val_dataset", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "args", ".", "workers", ",", "pin_memory", "=", "True", ")", "\n", "\n", "print", "(", "'# of training data:'", ",", "len", "(", "train_dataset", ".", "samples", ")", ",", "\n", "'\\n# of testing data:'", ",", "len", "(", "val_dataset", ".", "samples", ")", ",", "\n", "'\\ntraining classes:'", ",", "train_dataset", ".", "classes", "[", ":", "args", ".", "num_classes", "]", ")", "\n", "return", "train_loader", ",", "train_loader_no_aug", ",", "train_loader_no_aug_with_indices", ",", "val_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.utils.time_string": [[797, 801], ["time.strftime", "time.gmtime", "time.time"], "function", ["None"], ["", "def", "time_string", "(", ")", ":", "\n", "  ", "ISOTIMEFORMAT", "=", "'%Y-%m-%d %X'", "\n", "string", "=", "'[{}]'", ".", "format", "(", "time", ".", "strftime", "(", "ISOTIMEFORMAT", ",", "time", ".", "gmtime", "(", "time", ".", "time", "(", ")", ")", ")", ")", "\n", "return", "string", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.utils.convert_secs2time": [[802, 807], ["int", "int", "int"], "function", ["None"], ["", "def", "convert_secs2time", "(", "epoch_time", ")", ":", "\n", "  ", "need_hour", "=", "int", "(", "epoch_time", "/", "3600", ")", "\n", "need_mins", "=", "int", "(", "(", "epoch_time", "-", "3600", "*", "need_hour", ")", "/", "60", ")", "\n", "need_secs", "=", "int", "(", "epoch_time", "-", "3600", "*", "need_hour", "-", "60", "*", "need_mins", ")", "\n", "return", "need_hour", ",", "need_mins", ",", "need_secs", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.cnn_gp.kernel_patch.KernelPatch.__init__": [[14, 30], ["isinstance", "xx.size", "yy.size", "xy.size", "xy.size", "kernel_patch.KernelPatch.init"], "methods", ["home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.cnn_gp.kernel_patch.NonlinKP.init"], ["def", "__init__", "(", "self", ",", "same_or_kp", ",", "diag", "=", "False", ",", "xy", "=", "None", ",", "xx", "=", "None", ",", "yy", "=", "None", ")", ":", "\n", "        ", "if", "isinstance", "(", "same_or_kp", ",", "KernelPatch", ")", ":", "\n", "            ", "same", "=", "same_or_kp", ".", "same", "\n", "diag", "=", "same_or_kp", ".", "diag", "\n", "xy", "=", "same_or_kp", ".", "xy", "\n", "xx", "=", "same_or_kp", ".", "xx", "\n", "yy", "=", "same_or_kp", ".", "yy", "\n", "", "else", ":", "\n", "            ", "same", "=", "same_or_kp", "\n", "\n", "", "self", ".", "Nx", "=", "xx", ".", "size", "(", "0", ")", "\n", "self", ".", "Ny", "=", "yy", ".", "size", "(", "0", ")", "\n", "self", ".", "W", "=", "xy", ".", "size", "(", "-", "2", ")", "\n", "self", ".", "H", "=", "xy", ".", "size", "(", "-", "1", ")", "\n", "\n", "self", ".", "init", "(", "same", ",", "diag", ",", "xy", ",", "xx", ",", "yy", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.cnn_gp.kernel_patch.KernelPatch.__radd__": [[31, 33], ["kernel_patch.KernelPatch.__add__"], "methods", ["home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.src.spin.LinearOperator.__add__"], ["", "def", "__radd__", "(", "self", ",", "other", ")", ":", "\n", "        ", "return", "self", ".", "__add__", "(", "other", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.cnn_gp.kernel_patch.KernelPatch.__rmul__": [[34, 36], ["kernel_patch.KernelPatch.__mul__"], "methods", ["home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.src.spin.LinearOperator.__mul__"], ["", "def", "__rmul__", "(", "self", ",", "other", ")", ":", "\n", "        ", "return", "self", ".", "__mul__", "(", "other", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.cnn_gp.kernel_patch.KernelPatch.__add__": [[37, 39], ["kernel_patch.KernelPatch._do_elementwise"], "methods", ["home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.cnn_gp.kernel_patch.KernelPatch._do_elementwise"], ["", "def", "__add__", "(", "self", ",", "other", ")", ":", "\n", "        ", "return", "self", ".", "_do_elementwise", "(", "other", ",", "'__add__'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.cnn_gp.kernel_patch.KernelPatch.__mul__": [[40, 42], ["kernel_patch.KernelPatch._do_elementwise"], "methods", ["home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.cnn_gp.kernel_patch.KernelPatch._do_elementwise"], ["", "def", "__mul__", "(", "self", ",", "other", ")", ":", "\n", "        ", "return", "self", ".", "_do_elementwise", "(", "other", ",", "'__mul__'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.cnn_gp.kernel_patch.KernelPatch._do_elementwise": [[43, 63], ["type", "isinstance", "type.", "type.", "type.", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr"], "methods", ["None"], ["", "def", "_do_elementwise", "(", "self", ",", "other", ",", "op", ")", ":", "\n", "        ", "KP", "=", "type", "(", "self", ")", "\n", "if", "isinstance", "(", "other", ",", "KernelPatch", ")", ":", "\n", "            ", "other", "=", "KP", "(", "other", ")", "\n", "assert", "self", ".", "same", "==", "other", ".", "same", "\n", "assert", "self", ".", "diag", "==", "other", ".", "diag", "\n", "return", "KP", "(", "\n", "self", ".", "same", ",", "\n", "self", ".", "diag", ",", "\n", "getattr", "(", "self", ".", "xy", ",", "op", ")", "(", "other", ".", "xy", ")", ",", "\n", "getattr", "(", "self", ".", "xx", ",", "op", ")", "(", "other", ".", "xx", ")", ",", "\n", "getattr", "(", "self", ".", "yy", ",", "op", ")", "(", "other", ".", "yy", ")", "\n", ")", "\n", "", "else", ":", "\n", "            ", "return", "KP", "(", "\n", "self", ".", "same", ",", "\n", "self", ".", "diag", ",", "\n", "getattr", "(", "self", ".", "xy", ",", "op", ")", "(", "other", ")", ",", "\n", "getattr", "(", "self", ".", "xx", ",", "op", ")", "(", "other", ")", ",", "\n", "getattr", "(", "self", ".", "yy", ",", "op", ")", "(", "other", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.cnn_gp.kernel_patch.ConvKP.init": [[67, 76], ["xx.view", "yy.view", "xy.view", "xy.view"], "methods", ["None"], ["    ", "def", "init", "(", "self", ",", "same", ",", "diag", ",", "xy", ",", "xx", ",", "yy", ")", ":", "\n", "        ", "self", ".", "same", "=", "same", "\n", "self", ".", "diag", "=", "diag", "\n", "if", "diag", ":", "\n", "            ", "self", ".", "xy", "=", "xy", ".", "view", "(", "self", ".", "Nx", ",", "1", ",", "self", ".", "W", ",", "self", ".", "H", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "xy", "=", "xy", ".", "view", "(", "self", ".", "Nx", "*", "self", ".", "Ny", ",", "1", ",", "self", ".", "W", ",", "self", ".", "H", ")", "\n", "", "self", ".", "xx", "=", "xx", ".", "view", "(", "self", ".", "Nx", ",", "1", ",", "self", ".", "W", ",", "self", ".", "H", ")", "\n", "self", ".", "yy", "=", "yy", ".", "view", "(", "self", ".", "Ny", ",", "1", ",", "self", ".", "W", ",", "self", ".", "H", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.cnn_gp.kernel_patch.NonlinKP.init": [[79, 90], ["xy.view", "xx.view", "yy.view", "xy.view", "xx.view", "yy.view"], "methods", ["None"], ["    ", "def", "init", "(", "self", ",", "same", ",", "diag", ",", "xy", ",", "xx", ",", "yy", ")", ":", "\n", "        ", "self", ".", "same", "=", "same", "\n", "self", ".", "diag", "=", "diag", "\n", "if", "diag", ":", "\n", "            ", "self", ".", "xy", "=", "xy", ".", "view", "(", "self", ".", "Nx", ",", "1", ",", "self", ".", "W", ",", "self", ".", "H", ")", "\n", "self", ".", "xx", "=", "xx", ".", "view", "(", "self", ".", "Nx", ",", "1", ",", "self", ".", "W", ",", "self", ".", "H", ")", "\n", "self", ".", "yy", "=", "yy", ".", "view", "(", "self", ".", "Ny", ",", "1", ",", "self", ".", "W", ",", "self", ".", "H", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "xy", "=", "xy", ".", "view", "(", "self", ".", "Nx", ",", "self", ".", "Ny", ",", "self", ".", "W", ",", "self", ".", "H", ")", "\n", "self", ".", "xx", "=", "xx", ".", "view", "(", "self", ".", "Nx", ",", "1", ",", "self", ".", "W", ",", "self", ".", "H", ")", "\n", "self", ".", "yy", "=", "yy", ".", "view", "(", "self", ".", "Ny", ",", "self", ".", "W", ",", "self", ".", "H", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.cnn_gp.kernel_save_tools.create_h5py_dataset": [[7, 24], ["f.create_dataset", "min", "min", "min"], "function", ["None"], ["def", "create_h5py_dataset", "(", "f", ",", "batch_size", ",", "name", ",", "diag", ",", "N", ",", "N2", ")", ":", "\n", "    ", "\"\"\"\n    Creates a dataset named `name` on `f`, with chunks of size `batch_size`.\n    The chunks have leading dimension 1, so as to accommodate future resizing\n    of the leading dimension of the dataset (which starts at 1).\n    \"\"\"", "\n", "if", "diag", ":", "\n", "        ", "chunk_shape", "=", "(", "1", ",", "min", "(", "batch_size", ",", "N", ")", ")", "\n", "shape", "=", "(", "1", ",", "N", ")", "\n", "maxshape", "=", "(", "None", ",", "N", ")", "\n", "", "else", ":", "\n", "        ", "chunk_shape", "=", "(", "1", ",", "min", "(", "batch_size", ",", "N", ")", ",", "min", "(", "batch_size", ",", "N2", ")", ")", "\n", "shape", "=", "(", "1", ",", "N", ",", "N2", ")", "\n", "maxshape", "=", "(", "None", ",", "N", ",", "N2", ")", "\n", "", "return", "f", ".", "create_dataset", "(", "name", ",", "shape", "=", "shape", ",", "dtype", "=", "np", ".", "float32", ",", "\n", "fillvalue", "=", "np", ".", "nan", ",", "chunks", "=", "chunk_shape", ",", "\n", "maxshape", "=", "maxshape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.cnn_gp.kernel_save_tools.save_K": [[26, 59], ["data.print_timings", "f.keys", "print", "len", "kernel_save_tools.create_h5py_dataset", "data.DiagIterator", "data.ProductIterator", "kern", "len", "numpy.any", "numpy.any", "print", "ipdb.set_trace", "numpy.isinf", "numpy.isnan", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.cnn_gp.data.print_timings", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.cnn_gp.kernel_save_tools.create_h5py_dataset"], ["", "def", "save_K", "(", "f", ",", "kern", ",", "name", ",", "X", ",", "X2", ",", "diag", ",", "batch_size", ",", "worker_rank", "=", "0", ",", "n_workers", "=", "1", ",", "\n", "print_interval", "=", "2.", ")", ":", "\n", "    ", "\"\"\"\n    Saves a kernel to the h5py file `f`. Creates its dataset with name `name`\n    if necessary.\n    \"\"\"", "\n", "if", "name", "in", "f", ".", "keys", "(", ")", ":", "\n", "        ", "print", "(", "\"Skipping {} (group exists)\"", ".", "format", "(", "name", ")", ")", "\n", "return", "\n", "", "else", ":", "\n", "        ", "N", "=", "len", "(", "X", ")", "\n", "N2", "=", "N", "if", "X2", "is", "None", "else", "len", "(", "X2", ")", "\n", "out", "=", "create_h5py_dataset", "(", "f", ",", "batch_size", ",", "name", ",", "diag", ",", "N", ",", "N2", ")", "\n", "\n", "", "if", "diag", ":", "\n", "# Don't split the load for diagonals, they are cheap", "\n", "        ", "it", "=", "DiagIterator", "(", "batch_size", ",", "X", ",", "X2", ")", "\n", "", "else", ":", "\n", "        ", "it", "=", "ProductIterator", "(", "batch_size", ",", "X", ",", "X2", ",", "worker_rank", "=", "worker_rank", ",", "\n", "n_workers", "=", "n_workers", ")", "\n", "", "it", "=", "print_timings", "(", "it", ",", "desc", "=", "f\"{name} (worker {worker_rank}/{n_workers})\"", ",", "\n", "print_interval", "=", "print_interval", ")", "\n", "\n", "for", "same", ",", "(", "i", ",", "(", "x", ",", "_y", ")", ")", ",", "(", "j", ",", "(", "x2", ",", "_y2", ")", ")", "in", "it", ":", "\n", "        ", "k", "=", "kern", "(", "x", ",", "x2", ",", "same", ",", "diag", ")", "\n", "if", "np", ".", "any", "(", "np", ".", "isinf", "(", "k", ")", ")", "or", "np", ".", "any", "(", "np", ".", "isnan", "(", "k", ")", ")", ":", "\n", "            ", "print", "(", "f\"About to write a nan or inf for {i},{j}\"", ")", "\n", "import", "ipdb", ";", "ipdb", ".", "set_trace", "(", ")", "\n", "\n", "", "if", "diag", ":", "\n", "            ", "out", "[", "0", ",", "i", ":", "i", "+", "len", "(", "x", ")", "]", "=", "k", "\n", "", "else", ":", "\n", "            ", "out", "[", "0", ",", "i", ":", "i", "+", "len", "(", "x", ")", ",", "j", ":", "j", "+", "len", "(", "x2", ")", "]", "=", "k", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.cnn_gp.kernels.NNGPKernel.forward": [[18, 58], ["x.size", "y.size", "x.size", "x.size", "x.size", "kernel_patch.ConvKP", "kernels.NNGPKernel.propagate", "len", "len", "x.size", "y.size", "x.size", "y.size", "x.size", "y.size", "kernel_patch.NonlinKP", "r.view", "r.view", "len", "len", "x.size", "y.size", "x.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.cnn_gp.kernels.Sum.propagate"], ["def", "forward", "(", "self", ",", "x", ",", "y", "=", "None", ",", "same", "=", "None", ",", "diag", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Either takes one minibatch (x), or takes two minibatches (x and y), and\n        a boolean indicating whether they're the same.\n        \"\"\"", "\n", "if", "y", "is", "None", ":", "\n", "            ", "assert", "same", "is", "None", "\n", "y", "=", "x", "\n", "same", "=", "True", "\n", "\n", "", "assert", "not", "diag", "or", "len", "(", "x", ")", "==", "len", "(", "y", ")", ",", "(", "\n", "\"diagonal kernels must operate with data of equal length\"", ")", "\n", "\n", "assert", "4", "==", "len", "(", "x", ".", "size", "(", ")", ")", "\n", "assert", "4", "==", "len", "(", "y", ".", "size", "(", ")", ")", "\n", "assert", "x", ".", "size", "(", "1", ")", "==", "y", ".", "size", "(", "1", ")", "\n", "assert", "x", ".", "size", "(", "2", ")", "==", "y", ".", "size", "(", "2", ")", "\n", "assert", "x", ".", "size", "(", "3", ")", "==", "y", ".", "size", "(", "3", ")", "\n", "\n", "N1", "=", "x", ".", "size", "(", "0", ")", "\n", "N2", "=", "y", ".", "size", "(", "0", ")", "\n", "C", "=", "x", ".", "size", "(", "1", ")", "\n", "W", "=", "x", ".", "size", "(", "2", ")", "\n", "H", "=", "x", ".", "size", "(", "3", ")", "\n", "\n", "# [N1, C, W, H], [N2, C, W, H] -> [N1 N2, 1, W, H]", "\n", "if", "diag", ":", "\n", "            ", "xy", "=", "(", "x", "*", "y", ")", ".", "mean", "(", "1", ",", "keepdim", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "xy", "=", "(", "x", ".", "unsqueeze", "(", "1", ")", "*", "y", ")", ".", "mean", "(", "2", ")", ".", "view", "(", "N1", "*", "N2", ",", "1", ",", "W", ",", "H", ")", "\n", "", "xx", "=", "(", "x", "**", "2", ")", ".", "mean", "(", "1", ",", "keepdim", "=", "True", ")", "\n", "yy", "=", "(", "y", "**", "2", ")", ".", "mean", "(", "1", ",", "keepdim", "=", "True", ")", "\n", "\n", "initial_kp", "=", "ConvKP", "(", "same", ",", "diag", ",", "xy", ",", "xx", ",", "yy", ")", "\n", "final_kp", "=", "self", ".", "propagate", "(", "initial_kp", ")", "\n", "r", "=", "NonlinKP", "(", "final_kp", ")", ".", "xy", "\n", "if", "diag", ":", "\n", "            ", "return", "r", ".", "view", "(", "N1", ")", "\n", "", "else", ":", "\n", "            ", "return", "r", ".", "view", "(", "N1", ",", "N2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.cnn_gp.kernels.Conv2d.__init__": [[61, 91], ["torch.Module.__init__", "kernels.Conv2d.register_buffer", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.src.spin.SpectralNetwork.__init__"], ["    ", "def", "__init__", "(", "self", ",", "kernel_size", ",", "stride", "=", "1", ",", "padding", "=", "\"same\"", ",", "dilation", "=", "1", ",", "\n", "var_weight", "=", "1.", ",", "var_bias", "=", "0.", ",", "in_channel_multiplier", "=", "1", ",", "\n", "out_channel_multiplier", "=", "1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "kernel_size", "=", "kernel_size", "\n", "self", ".", "stride", "=", "stride", "\n", "self", ".", "dilation", "=", "dilation", "\n", "self", ".", "var_weight", "=", "var_weight", "\n", "self", ".", "var_bias", "=", "var_bias", "\n", "self", ".", "kernel_has_row_of_zeros", "=", "False", "\n", "if", "padding", "==", "\"same\"", ":", "\n", "            ", "self", ".", "padding", "=", "dilation", "*", "(", "kernel_size", "//", "2", ")", "\n", "if", "kernel_size", "%", "2", "==", "0", ":", "\n", "                ", "self", ".", "kernel_has_row_of_zeros", "=", "True", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "padding", "=", "padding", "\n", "\n", "", "if", "self", ".", "kernel_has_row_of_zeros", ":", "\n", "# We need to pad one side larger than the other. We just make a", "\n", "# kernel that is slightly too large and make its last column and", "\n", "# row zeros.", "\n", "            ", "kernel", "=", "t", ".", "ones", "(", "1", ",", "1", ",", "self", ".", "kernel_size", "+", "1", ",", "self", ".", "kernel_size", "+", "1", ")", "\n", "kernel", "[", ":", ",", ":", ",", "0", ",", ":", "]", "=", "0.", "\n", "kernel", "[", ":", ",", ":", ",", ":", ",", "0", "]", "=", "0.", "\n", "", "else", ":", "\n", "            ", "kernel", "=", "t", ".", "ones", "(", "1", ",", "1", ",", "self", ".", "kernel_size", ",", "self", ".", "kernel_size", ")", "\n", "", "self", ".", "register_buffer", "(", "'kernel'", ",", "kernel", "\n", "*", "(", "self", ".", "var_weight", "/", "self", ".", "kernel_size", "**", "2", ")", ")", "\n", "self", ".", "in_channel_multiplier", ",", "self", ".", "out_channel_multiplier", "=", "(", "\n", "in_channel_multiplier", ",", "out_channel_multiplier", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.cnn_gp.kernels.Conv2d.propagate": [[92, 99], ["kernel_patch.ConvKP", "kernel_patch.ConvKP", "kernels.Conv2d.propagate.f"], "methods", ["None"], ["", "def", "propagate", "(", "self", ",", "kp", ")", ":", "\n", "        ", "kp", "=", "ConvKP", "(", "kp", ")", "\n", "def", "f", "(", "patch", ")", ":", "\n", "            ", "return", "(", "F", ".", "conv2d", "(", "patch", ",", "self", ".", "kernel", ",", "stride", "=", "self", ".", "stride", ",", "\n", "padding", "=", "self", ".", "padding", ",", "dilation", "=", "self", ".", "dilation", ")", "\n", "+", "self", ".", "var_bias", ")", "\n", "", "return", "ConvKP", "(", "kp", ".", "same", ",", "kp", ".", "diag", ",", "f", "(", "kp", ".", "xy", ")", ",", "f", "(", "kp", ".", "xx", ")", ",", "f", "(", "kp", ".", "yy", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.cnn_gp.kernels.Conv2d.nn": [[100, 123], ["torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d.weight.data.normal_", "torch.Conv2d.bias.data.normal_", "math.sqrt", "math.sqrt"], "methods", ["None"], ["", "def", "nn", "(", "self", ",", "channels", ",", "in_channels", "=", "None", ",", "out_channels", "=", "None", ")", ":", "\n", "        ", "if", "in_channels", "is", "None", ":", "\n", "            ", "in_channels", "=", "channels", "\n", "", "if", "out_channels", "is", "None", ":", "\n", "            ", "out_channels", "=", "channels", "\n", "", "conv2d", "=", "nn", ".", "Conv2d", "(", "\n", "in_channels", "=", "in_channels", "*", "self", ".", "in_channel_multiplier", ",", "\n", "out_channels", "=", "out_channels", "*", "self", ".", "out_channel_multiplier", ",", "\n", "kernel_size", "=", "self", ".", "kernel_size", "+", "(", "\n", "1", "if", "self", ".", "kernel_has_row_of_zeros", "else", "0", ")", ",", "\n", "stride", "=", "self", ".", "stride", ",", "\n", "padding", "=", "self", ".", "padding", ",", "\n", "dilation", "=", "self", ".", "dilation", ",", "\n", "bias", "=", "(", "self", ".", "var_bias", ">", "0.", ")", ",", "\n", ")", "\n", "conv2d", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "\n", "self", ".", "var_weight", "/", "conv2d", ".", "in_channels", ")", "/", "self", ".", "kernel_size", ")", "\n", "if", "self", ".", "kernel_has_row_of_zeros", ":", "\n", "            ", "conv2d", ".", "weight", ".", "data", "[", ":", ",", ":", ",", "0", ",", ":", "]", "=", "0", "\n", "conv2d", ".", "weight", ".", "data", "[", ":", ",", ":", ",", ":", ",", "0", "]", "=", "0", "\n", "", "if", "self", ".", "var_bias", ">", "0.", ":", "\n", "            ", "conv2d", ".", "bias", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "self", ".", "var_bias", ")", ")", "\n", "", "return", "conv2d", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.cnn_gp.kernels.Conv2d.layers": [[124, 126], ["None"], "methods", ["None"], ["", "def", "layers", "(", "self", ")", ":", "\n", "        ", "return", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.cnn_gp.kernels.ReLU.propagate": [[134, 166], ["kernel_patch.NonlinKP", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.acos", "torch.acos", "torch.acos", "kernel_patch.NonlinKP", "torch.eye().unsqueeze().unsqueeze().to", "torch.eye().unsqueeze().unsqueeze().to", "torch.eye().unsqueeze().unsqueeze().to", "xx_yy.rsqrt", "torch.eye().unsqueeze().unsqueeze", "torch.eye().unsqueeze().unsqueeze", "torch.eye().unsqueeze().unsqueeze", "torch.eye().unsqueeze", "torch.eye().unsqueeze", "torch.eye().unsqueeze", "torch.eye", "torch.eye", "torch.eye", "xy.size"], "methods", ["home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.swag.SWAG.to", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.swag.SWAG.to", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.swag.SWAG.to"], ["def", "propagate", "(", "self", ",", "kp", ")", ":", "\n", "        ", "kp", "=", "NonlinKP", "(", "kp", ")", "\n", "\"\"\"\n        We need to calculate (xy, xx, yy == c, v\u2081, v\u2082):\n                      \u23e4\u23e4\u23e4\u23e4\u23e4\u23e4\u23e4\u23e4\u23e4\u23e4\u23e4\u23e4\u23e4\u23e4\u23e4\u23e4\u23e4\u23e4\n        \u221a(v\u2081v\u2082) / 2\u03c0 \u23b71 - c\u00b2/v\u2081v\u2082 + (\u03c0 - \u03b8)c / \u221a(v\u2081v\u2082)\n\n        which is equivalent to:\n        1/2\u03c0 ( \u221a(v\u2081v\u2082 - c\u00b2) + (\u03c0 - \u03b8)c )\n\n        # NOTE we divide by 2 to avoid multiplying the ReLU by sqrt(2)\n        \"\"\"", "\n", "xx_yy", "=", "kp", ".", "xx", "*", "kp", ".", "yy", "+", "self", ".", "f32_tiny", "\n", "\n", "# Clamp these so the outputs are not NaN", "\n", "cos_theta", "=", "(", "kp", ".", "xy", "*", "xx_yy", ".", "rsqrt", "(", ")", ")", ".", "clamp", "(", "-", "1", ",", "1", ")", "\n", "sin_theta", "=", "t", ".", "sqrt", "(", "(", "xx_yy", "-", "kp", ".", "xy", "**", "2", ")", ".", "clamp", "(", "min", "=", "0", ")", ")", "\n", "theta", "=", "t", ".", "acos", "(", "cos_theta", ")", "\n", "xy", "=", "(", "sin_theta", "+", "(", "math", ".", "pi", "-", "theta", ")", "*", "kp", ".", "xy", ")", "/", "(", "2", "*", "math", ".", "pi", ")", "\n", "\n", "xx", "=", "kp", ".", "xx", "/", "2.", "\n", "if", "kp", ".", "same", ":", "\n", "            ", "yy", "=", "xx", "\n", "if", "kp", ".", "diag", ":", "\n", "                ", "xy", "=", "xx", "\n", "", "else", ":", "\n", "# Make sure the diagonal agrees with `xx`", "\n", "                ", "eye", "=", "t", ".", "eye", "(", "xy", ".", "size", "(", ")", "[", "0", "]", ")", ".", "unsqueeze", "(", "-", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", ".", "to", "(", "kp", ".", "xy", ".", "device", ")", "\n", "xy", "=", "(", "1", "-", "eye", ")", "*", "xy", "+", "eye", "*", "xx", "\n", "", "", "else", ":", "\n", "            ", "yy", "=", "kp", ".", "yy", "/", "2.", "\n", "", "return", "NonlinKP", "(", "kp", ".", "same", ",", "kp", ".", "diag", ",", "xy", ",", "xx", ",", "yy", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.cnn_gp.kernels.ReLU.nn": [[167, 171], ["torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["None"], ["", "def", "nn", "(", "self", ",", "channels", ",", "in_channels", "=", "None", ",", "out_channels", "=", "None", ")", ":", "\n", "        ", "assert", "in_channels", "is", "None", "\n", "assert", "out_channels", "is", "None", "\n", "return", "nn", ".", "ReLU", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.cnn_gp.kernels.ReLU.layers": [[172, 174], ["None"], "methods", ["None"], ["", "def", "layers", "(", "self", ")", ":", "\n", "        ", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.cnn_gp.kernels.Sequential.__init__": [[179, 184], ["torch.Module.__init__", "enumerate", "kernels.Sequential.add_module", "str"], "methods", ["home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.src.spin.SpectralNetwork.__init__"], ["    ", "def", "__init__", "(", "self", ",", "*", "mods", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "mods", "=", "mods", "\n", "for", "idx", ",", "mod", "in", "enumerate", "(", "mods", ")", ":", "\n", "            ", "self", ".", "add_module", "(", "str", "(", "idx", ")", ",", "mod", ")", "\n", "", "", "def", "propagate", "(", "self", ",", "kp", ")", ":", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.cnn_gp.kernels.Sequential.propagate": [[184, 188], ["mod.propagate"], "methods", ["home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.cnn_gp.kernels.Sum.propagate"], ["", "", "def", "propagate", "(", "self", ",", "kp", ")", ":", "\n", "        ", "for", "mod", "in", "self", ".", "mods", ":", "\n", "            ", "kp", "=", "mod", ".", "propagate", "(", "kp", ")", "\n", "", "return", "kp", "\n", "", "def", "nn", "(", "self", ",", "channels", ",", "in_channels", "=", "None", ",", "out_channels", "=", "None", ")", ":", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.cnn_gp.kernels.Sequential.nn": [[188, 198], ["len", "torch.Sequential", "torch.Sequential", "torch.Sequential", "len", "kernels.Sequential.mods[].nn", "torch.Sequential", "torch.Sequential", "torch.Sequential", "kernels.Sequential.mods[].nn", "kernels.Sequential.mods[].nn", "mod.nn"], "methods", ["home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.cnn_gp.kernels.Sum.nn", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.cnn_gp.kernels.Sum.nn", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.cnn_gp.kernels.Sum.nn", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.cnn_gp.kernels.Sum.nn"], ["", "def", "nn", "(", "self", ",", "channels", ",", "in_channels", "=", "None", ",", "out_channels", "=", "None", ")", ":", "\n", "        ", "if", "len", "(", "self", ".", "mods", ")", "==", "0", ":", "\n", "            ", "return", "nn", ".", "Sequential", "(", ")", "\n", "", "elif", "len", "(", "self", ".", "mods", ")", "==", "1", ":", "\n", "            ", "return", "self", ".", "mods", "[", "0", "]", ".", "nn", "(", "channels", ",", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ")", "\n", "", "else", ":", "\n", "            ", "return", "nn", ".", "Sequential", "(", "\n", "self", ".", "mods", "[", "0", "]", ".", "nn", "(", "channels", ",", "in_channels", "=", "in_channels", ")", ",", "\n", "*", "[", "mod", ".", "nn", "(", "channels", ")", "for", "mod", "in", "self", ".", "mods", "[", "1", ":", "-", "1", "]", "]", ",", "\n", "self", ".", "mods", "[", "-", "1", "]", ".", "nn", "(", "channels", ",", "out_channels", "=", "out_channels", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.cnn_gp.kernels.Sequential.layers": [[199, 201], ["sum", "mod.layers"], "methods", ["home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.cnn_gp.kernels.Sum.layers"], ["", "", "def", "layers", "(", "self", ")", ":", "\n", "        ", "return", "sum", "(", "mod", ".", "layers", "(", ")", "for", "mod", "in", "self", ".", "mods", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.cnn_gp.kernels.Mixture.__init__": [[212, 220], ["torch.Module.__init__", "enumerate", "torch.Parameter", "torch.Parameter", "torch.Parameter", "kernels.Mixture.add_module", "torch.zeros", "torch.zeros", "torch.zeros", "str", "len"], "methods", ["home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.src.spin.SpectralNetwork.__init__"], ["def", "__init__", "(", "self", ",", "mods", ",", "logit_proportions", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "mods", "=", "mods", "\n", "for", "idx", ",", "mod", "in", "enumerate", "(", "mods", ")", ":", "\n", "            ", "self", ".", "add_module", "(", "str", "(", "idx", ")", ",", "mod", ")", "\n", "", "if", "logit_proportions", "is", "None", ":", "\n", "            ", "logit_proportions", "=", "t", ".", "zeros", "(", "len", "(", "mods", ")", ")", "\n", "", "self", ".", "logit", "=", "nn", ".", "Parameter", "(", "logit_proportions", ")", "\n", "", "def", "propagate", "(", "self", ",", "kp", ")", ":", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.cnn_gp.kernels.Mixture.propagate": [[220, 226], ["torch.softmax", "torch.softmax", "torch.softmax", "range", "kernels.Mixture.mods[].propagate", "len", "kernels.Mixture.mods[].propagate"], "methods", ["home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.cnn_gp.kernels.Sum.propagate", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.cnn_gp.kernels.Sum.propagate"], ["", "def", "propagate", "(", "self", ",", "kp", ")", ":", "\n", "        ", "proportions", "=", "F", ".", "softmax", "(", "self", ".", "logit", ",", "dim", "=", "0", ")", "\n", "total", "=", "self", ".", "mods", "[", "0", "]", ".", "propagate", "(", "kp", ")", "*", "proportions", "[", "0", "]", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "self", ".", "mods", ")", ")", ":", "\n", "            ", "total", "=", "total", "+", "(", "self", ".", "mods", "[", "i", "]", ".", "propagate", "(", "kp", ")", "*", "proportions", "[", "i", "]", ")", "\n", "", "return", "total", "\n", "", "def", "nn", "(", "self", ",", "channels", ",", "in_channels", "=", "None", ",", "out_channels", "=", "None", ")", ":", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.cnn_gp.kernels.Mixture.nn": [[226, 228], ["kernels.MixtureModule", "mod.nn"], "methods", ["home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.cnn_gp.kernels.Sum.nn"], ["", "def", "nn", "(", "self", ",", "channels", ",", "in_channels", "=", "None", ",", "out_channels", "=", "None", ")", ":", "\n", "        ", "return", "MixtureModule", "(", "[", "mod", ".", "nn", "(", "channels", ",", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ")", "for", "mod", "in", "self", ".", "mods", "]", ",", "self", ".", "logit", ")", "\n", "", "def", "layers", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.cnn_gp.kernels.Mixture.layers": [[228, 230], ["max", "mod.layers"], "methods", ["home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.cnn_gp.kernels.Sum.layers"], ["", "def", "layers", "(", "self", ")", ":", "\n", "        ", "return", "max", "(", "mod", ".", "layers", "(", ")", "for", "mod", "in", "self", ".", "mods", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.cnn_gp.kernels.MixtureModule.__init__": [[232, 238], ["torch.Module.__init__", "torch.tensor", "torch.tensor", "torch.tensor", "enumerate", "kernels.MixtureModule.add_module", "str"], "methods", ["home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.src.spin.SpectralNetwork.__init__"], ["    ", "def", "__init__", "(", "self", ",", "mods", ",", "logit_parameter", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "mods", "=", "mods", "\n", "self", ".", "logit", "=", "t", ".", "tensor", "(", "logit_parameter", ")", "\n", "for", "idx", ",", "mod", "in", "enumerate", "(", "mods", ")", ":", "\n", "            ", "self", ".", "add_module", "(", "str", "(", "idx", ")", ",", "mod", ")", "\n", "", "", "def", "forward", "(", "self", ",", "input", ")", ":", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.cnn_gp.kernels.MixtureModule.forward": [[238, 244], ["torch.softmax().sqrt", "torch.softmax().sqrt", "torch.softmax().sqrt", "range", "len", "torch.softmax", "torch.softmax", "torch.softmax"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "sqrt_proportions", "=", "F", ".", "softmax", "(", "self", ".", "logit", ",", "dim", "=", "0", ")", ".", "sqrt", "(", ")", "\n", "total", "=", "self", ".", "mods", "[", "0", "]", "(", "input", ")", "*", "sqrt_proportions", "[", "0", "]", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "self", ".", "mods", ")", ")", ":", "\n", "            ", "total", "=", "total", "+", "self", ".", "mods", "[", "i", "]", "(", "input", ")", "# *sqrt_proportions[i]", "\n", "", "return", "total", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.cnn_gp.kernels.Sum.__init__": [[247, 252], ["torch.Module.__init__", "enumerate", "kernels.Sum.add_module", "str"], "methods", ["home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.src.spin.SpectralNetwork.__init__"], ["    ", "def", "__init__", "(", "self", ",", "mods", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "mods", "=", "mods", "\n", "for", "idx", ",", "mod", "in", "enumerate", "(", "mods", ")", ":", "\n", "            ", "self", ".", "add_module", "(", "str", "(", "idx", ")", ",", "mod", ")", "\n", "", "", "def", "propagate", "(", "self", ",", "kp", ")", ":", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.cnn_gp.kernels.Sum.propagate": [[252, 255], ["sum", "m.propagate"], "methods", ["home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.cnn_gp.kernels.Sum.propagate"], ["", "", "def", "propagate", "(", "self", ",", "kp", ")", ":", "\n", "# This adds 0 to the first kp, hopefully that's a noop", "\n", "        ", "return", "sum", "(", "m", ".", "propagate", "(", "kp", ")", "for", "m", "in", "self", ".", "mods", ")", "\n", "", "def", "nn", "(", "self", ",", "channels", ",", "in_channels", "=", "None", ",", "out_channels", "=", "None", ")", ":", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.cnn_gp.kernels.Sum.nn": [[255, 259], ["kernels.SumModule", "mod.nn"], "methods", ["home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.cnn_gp.kernels.Sum.nn"], ["", "def", "nn", "(", "self", ",", "channels", ",", "in_channels", "=", "None", ",", "out_channels", "=", "None", ")", ":", "\n", "        ", "return", "SumModule", "(", "[", "\n", "mod", ".", "nn", "(", "channels", ",", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ")", "\n", "for", "mod", "in", "self", ".", "mods", "]", ")", "\n", "", "def", "layers", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.cnn_gp.kernels.Sum.layers": [[259, 261], ["max", "mod.layers"], "methods", ["home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.cnn_gp.kernels.Sum.layers"], ["", "def", "layers", "(", "self", ")", ":", "\n", "        ", "return", "max", "(", "mod", ".", "layers", "(", ")", "for", "mod", "in", "self", ".", "mods", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.cnn_gp.kernels.SumModule.__init__": [[264, 269], ["torch.Module.__init__", "enumerate", "kernels.SumModule.add_module", "str"], "methods", ["home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.src.spin.SpectralNetwork.__init__"], ["    ", "def", "__init__", "(", "self", ",", "mods", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "mods", "=", "mods", "\n", "for", "idx", ",", "mod", "in", "enumerate", "(", "mods", ")", ":", "\n", "            ", "self", ".", "add_module", "(", "str", "(", "idx", ")", ",", "mod", ")", "\n", "", "", "def", "forward", "(", "self", ",", "input", ")", ":", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.cnn_gp.kernels.SumModule.forward": [[269, 272], ["sum", "m"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "# This adds 0 to the first value, hopefully that's a noop", "\n", "        ", "return", "sum", "(", "m", "(", "input", ")", "for", "m", "in", "self", ".", "mods", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.cnn_gp.kernels.resnet_block": [[274, 294], ["kernels.Sum", "kernels.Sequential", "kernels.ReLU", "kernels.Sum", "kernels.Sequential", "kernels.Sequential", "kernels.ReLU", "kernels.Conv2d", "kernels.ReLU", "kernels.Conv2d", "kernels.Conv2d", "kernels.Sequential", "kernels.Conv2d", "kernels.ReLU", "kernels.Conv2d"], "function", ["None"], ["", "", "def", "resnet_block", "(", "stride", "=", "1", ",", "projection_shortcut", "=", "False", ",", "multiplier", "=", "1", ")", ":", "\n", "    ", "if", "stride", "==", "1", "and", "not", "projection_shortcut", ":", "\n", "        ", "return", "Sum", "(", "[", "\n", "Sequential", "(", ")", ",", "\n", "Sequential", "(", "\n", "ReLU", "(", ")", ",", "\n", "Conv2d", "(", "3", ",", "stride", "=", "stride", ",", "in_channel_multiplier", "=", "multiplier", ",", "out_channel_multiplier", "=", "multiplier", ")", ",", "\n", "ReLU", "(", ")", ",", "\n", "Conv2d", "(", "3", ",", "in_channel_multiplier", "=", "multiplier", ",", "out_channel_multiplier", "=", "multiplier", ")", ",", "\n", ")", "\n", "]", ")", "\n", "", "else", ":", "\n", "        ", "return", "Sequential", "(", "\n", "ReLU", "(", ")", ",", "\n", "Sum", "(", "[", "\n", "Conv2d", "(", "1", ",", "stride", "=", "stride", ",", "in_channel_multiplier", "=", "multiplier", "//", "stride", ",", "out_channel_multiplier", "=", "multiplier", ")", ",", "\n", "Sequential", "(", "\n", "Conv2d", "(", "3", ",", "stride", "=", "stride", ",", "in_channel_multiplier", "=", "multiplier", "//", "stride", ",", "out_channel_multiplier", "=", "multiplier", ")", ",", "\n", "ReLU", "(", ")", ",", "\n", "Conv2d", "(", "3", ",", "in_channel_multiplier", "=", "multiplier", ",", "out_channel_multiplier", "=", "multiplier", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.cnn_gp.data.ProductIterator.__init__": [[42, 71], ["data._round_up_div", "data._this_worker_batch", "itertools.islice", "len", "max", "data._round_up_div", "data._product_generator", "len"], "methods", ["home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.cnn_gp.data._round_up_div", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.cnn_gp.data._this_worker_batch", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.cnn_gp.data._round_up_div", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.cnn_gp.data._product_generator"], ["def", "__init__", "(", "self", ",", "batch_size", ",", "X", ",", "X2", "=", "None", ",", "worker_rank", "=", "0", ",", "n_workers", "=", "1", ")", ":", "\n", "        ", "N_batches_X", "=", "_round_up_div", "(", "len", "(", "X", ")", ",", "batch_size", ")", "\n", "if", "X2", "is", "None", ":", "\n", "            ", "same", "=", "True", "\n", "X2", "=", "X", "\n", "N_batches_X2", "=", "N_batches_X", "\n", "N_batches", "=", "max", "(", "1", ",", "N_batches_X", "*", "(", "N_batches_X", "+", "1", ")", "//", "2", ")", "\n", "", "else", ":", "\n", "            ", "same", "=", "False", "\n", "N_batches_X2", "=", "_round_up_div", "(", "len", "(", "X2", ")", ",", "batch_size", ")", "\n", "N_batches", "=", "N_batches_X", "*", "N_batches_X2", "\n", "\n", "", "start_batch", ",", "self", ".", "batches_this_worker", "=", "_this_worker_batch", "(", "\n", "N_batches", ",", "worker_rank", ",", "n_workers", ")", "\n", "\n", "self", ".", "idx_iter", "=", "itertools", ".", "islice", "(", "\n", "_product_generator", "(", "N_batches_X", ",", "N_batches_X2", ",", "same", ")", ",", "\n", "start_batch", ",", "\n", "start_batch", "+", "self", ".", "batches_this_worker", ")", "\n", "\n", "self", ".", "worker_rank", "=", "worker_rank", "\n", "self", ".", "prev_j", "=", "-", "2", "# this + 1 = -1, which is not a valid j", "\n", "self", ".", "X_loader", "=", "None", "\n", "self", ".", "X2_loader", "=", "None", "\n", "self", ".", "x_batch", "=", "None", "\n", "self", ".", "X", "=", "X", "\n", "self", ".", "X2", "=", "X2", "\n", "self", ".", "same", "=", "same", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.cnn_gp.data.ProductIterator.__len__": [[72, 74], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "batches_this_worker", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.cnn_gp.data.ProductIterator.__iter__": [[75, 77], ["None"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.cnn_gp.data.ProductIterator.dataloader_beginning_at": [[78, 82], ["iter", "torch.utils.data.DataLoader", "torch.utils.data.Subset", "range", "len"], "methods", ["None"], ["", "def", "dataloader_beginning_at", "(", "self", ",", "i", ",", "dataset", ")", ":", "\n", "        ", "return", "iter", "(", "DataLoader", "(", "\n", "Subset", "(", "dataset", ",", "range", "(", "i", "*", "self", ".", "batch_size", ",", "len", "(", "dataset", ")", ")", ")", ",", "\n", "batch_size", "=", "self", ".", "batch_size", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.cnn_gp.data.ProductIterator.__next__": [[83, 97], ["next", "data.ProductIterator.dataloader_beginning_at", "data.ProductIterator.dataloader_beginning_at", "next", "next"], "methods", ["home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.cnn_gp.data.ProductIterator.dataloader_beginning_at", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.cnn_gp.data.ProductIterator.dataloader_beginning_at"], ["", "def", "__next__", "(", "self", ")", ":", "\n", "        ", "same", ",", "i", ",", "j", "=", "next", "(", "self", ".", "idx_iter", ")", "\n", "\n", "if", "self", ".", "X_loader", "is", "None", ":", "\n", "            ", "self", ".", "X_loader", "=", "self", ".", "dataloader_beginning_at", "(", "i", ",", "self", ".", "X", ")", "\n", "\n", "", "if", "j", "!=", "self", ".", "prev_j", "+", "1", ":", "\n", "            ", "self", ".", "X2_loader", "=", "self", ".", "dataloader_beginning_at", "(", "j", ",", "self", ".", "X2", ")", "\n", "self", ".", "x_batch", "=", "next", "(", "self", ".", "X_loader", ")", "\n", "", "self", ".", "prev_j", "=", "j", "\n", "\n", "return", "(", "same", ",", "\n", "(", "i", "*", "self", ".", "batch_size", ",", "self", ".", "x_batch", ")", ",", "\n", "(", "j", "*", "self", ".", "batch_size", ",", "next", "(", "self", ".", "X2_loader", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.cnn_gp.data.DiagIterator.__init__": [[100, 112], ["torch.utils.data.DataLoader", "iter", "len", "torch.utils.data.DataLoader", "iter", "min", "enumerate", "enumerate", "len", "len", "zip"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "batch_size", ",", "X", ",", "X2", "=", "None", ")", ":", "\n", "        ", "self", ".", "batch_size", "=", "batch_size", "\n", "dl", "=", "DataLoader", "(", "X", ",", "batch_size", "=", "batch_size", ")", "\n", "if", "X2", "is", "None", ":", "\n", "            ", "self", ".", "same", "=", "True", "\n", "self", ".", "it", "=", "iter", "(", "enumerate", "(", "dl", ")", ")", "\n", "self", ".", "length", "=", "len", "(", "dl", ")", "\n", "", "else", ":", "\n", "            ", "dl2", "=", "DataLoader", "(", "X2", ",", "batch_size", "=", "batch_size", ")", "\n", "self", ".", "same", "=", "False", "\n", "self", ".", "it", "=", "iter", "(", "enumerate", "(", "zip", "(", "dl", ",", "dl2", ")", ")", ")", "\n", "self", ".", "length", "=", "min", "(", "len", "(", "dl", ")", ",", "len", "(", "dl2", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.cnn_gp.data.DiagIterator.__iter__": [[113, 115], ["None"], "methods", ["None"], ["", "", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.cnn_gp.data.DiagIterator.__len__": [[116, 118], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "length", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.cnn_gp.data.DiagIterator.__next__": [[119, 127], ["next", "next"], "methods", ["None"], ["", "def", "__next__", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "same", ":", "\n", "            ", "i", ",", "xy", "=", "next", "(", "self", ".", "it", ")", "\n", "xy2", "=", "xy", "\n", "", "else", ":", "\n", "            ", "i", ",", "xy", ",", "xy2", "=", "next", "(", "self", ".", "it", ")", "\n", "", "ib", "=", "i", "*", "self", ".", "batch_size", "\n", "return", "(", "self", ".", "same", ",", "(", "ib", ",", "xy", ")", ",", "(", "ib", ",", "xy2", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.cnn_gp.data.DatasetFromConfig.__init__": [[134, 159], ["torchvision.transforms.ToTensor", "os.path.join", "config.dataset", "config.dataset", "torch.utils.data.ConcatDataset", "torch.utils.data.Subset", "torch.utils.data.Subset", "torch.utils.data.Subset", "len", "torchvision.transforms.Compose"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "datasets_path", ",", "config", ")", ":", "\n", "        ", "\"\"\"\n        Requires:\n        config.dataset_name (e.g. \"MNIST\")\n        config.train_range\n        config.test_range\n        \"\"\"", "\n", "self", ".", "config", "=", "config", "\n", "\n", "trans", "=", "torchvision", ".", "transforms", ".", "ToTensor", "(", ")", "\n", "if", "len", "(", "config", ".", "transforms", ")", ">", "0", ":", "\n", "            ", "trans", "=", "torchvision", ".", "transforms", ".", "Compose", "(", "[", "trans", "]", "+", "config", ".", "transforms", ")", "\n", "\n", "# Full datasets", "\n", "", "datasets_path", "=", "os", ".", "path", ".", "join", "(", "datasets_path", ",", "config", ".", "dataset_name", ")", "\n", "train_full", "=", "config", ".", "dataset", "(", "datasets_path", ",", "train", "=", "True", ",", "download", "=", "True", ",", "\n", "transform", "=", "trans", ")", "\n", "test_full", "=", "config", ".", "dataset", "(", "datasets_path", ",", "train", "=", "False", ",", "transform", "=", "trans", ")", "\n", "self", ".", "data_full", "=", "ConcatDataset", "(", "[", "train_full", ",", "test_full", "]", ")", "\n", "\n", "# Our training/test split", "\n", "# (could omit some data, or include validation in test)", "\n", "self", ".", "train", "=", "Subset", "(", "self", ".", "data_full", ",", "config", ".", "train_range", ")", "\n", "self", ".", "validation", "=", "Subset", "(", "self", ".", "data_full", ",", "config", ".", "validation_range", ")", "\n", "self", ".", "test", "=", "Subset", "(", "self", ".", "data_full", ",", "config", ".", "test_range", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.cnn_gp.data.DatasetFromConfig.load_full": [[160, 163], ["next", "iter", "torch.utils.data.DataLoader", "len"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "load_full", "(", "dataset", ")", ":", "\n", "        ", "return", "next", "(", "iter", "(", "DataLoader", "(", "dataset", ",", "batch_size", "=", "len", "(", "dataset", ")", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.cnn_gp.data._this_worker_batch": [[11, 20], ["numpy.zeros", "numpy.sum", "int", "int"], "function", ["None"], ["def", "_this_worker_batch", "(", "N_batches", ",", "worker_rank", ",", "n_workers", ")", ":", "\n", "    ", "batches_per_worker", "=", "np", ".", "zeros", "(", "[", "n_workers", "]", ",", "dtype", "=", "np", ".", "int", ")", "\n", "batches_per_worker", "[", ":", "]", "=", "N_batches", "//", "n_workers", "\n", "batches_per_worker", "[", ":", "N_batches", "%", "n_workers", "]", "+=", "1", "\n", "\n", "start_batch", "=", "np", ".", "sum", "(", "batches_per_worker", "[", ":", "worker_rank", "]", ")", "\n", "batches_this_worker", "=", "batches_per_worker", "[", "worker_rank", "]", "\n", "\n", "return", "int", "(", "start_batch", ")", ",", "int", "(", "batches_this_worker", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.cnn_gp.data._product_generator": [[22, 30], ["range", "range"], "function", ["None"], ["", "def", "_product_generator", "(", "N_batches_X", ",", "N_batches_X2", ",", "same", ")", ":", "\n", "    ", "for", "i", "in", "range", "(", "N_batches_X", ")", ":", "\n", "        ", "if", "same", ":", "\n", "# Yield only upper triangle", "\n", "            ", "yield", "(", "True", ",", "i", ",", "i", ")", "\n", "", "for", "j", "in", "range", "(", "i", "+", "1", "if", "same", "else", "0", ",", "\n", "N_batches_X2", ")", ":", "\n", "            ", "yield", "(", "False", ",", "i", ",", "j", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.cnn_gp.data._round_up_div": [[32, 34], ["None"], "function", ["None"], ["", "", "", "def", "_round_up_div", "(", "a", ",", "b", ")", ":", "\n", "    ", "return", "(", "a", "+", "b", "-", "1", ")", "//", "b", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.cnn_gp.data._hhmmss": [[165, 172], ["divmod", "divmod", "int"], "function", ["None"], ["", "", "def", "_hhmmss", "(", "s", ")", ":", "\n", "    ", "m", ",", "s", "=", "divmod", "(", "int", "(", "s", ")", ",", "60", ")", "\n", "h", ",", "m", "=", "divmod", "(", "m", ",", "60", ")", "\n", "if", "h", "==", "0.0", ":", "\n", "        ", "return", "f\"{m:02d}:{s:02d}\"", "\n", "", "else", ":", "\n", "        ", "return", "f\"{h:02d}:{m:02d}:{s:02d}\"", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.cnn_gp.data.print_timings": [[174, 197], ["time.perf_counter", "len", "enumerate", "time.perf_counter", "print", "data._hhmmss", "data._hhmmss"], "function", ["home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.cnn_gp.data._hhmmss", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.cnn_gp.data._hhmmss"], ["", "", "def", "print_timings", "(", "iterator", ",", "desc", "=", "\"time\"", ",", "print_interval", "=", "2.", ")", ":", "\n", "    ", "\"\"\"\n    Prints the current total number of iterations, speed of iteration, and\n    elapsed time.\n\n    Meant as a rudimentary replacement for `tqdm` that prints a new line at\n    each iteration, and thus can be used in multiple parallel processes in the\n    same terminal.\n    \"\"\"", "\n", "import", "time", "\n", "start_time", "=", "time", ".", "perf_counter", "(", ")", "\n", "total", "=", "len", "(", "iterator", ")", "\n", "last_printed", "=", "-", "print_interval", "\n", "for", "i", ",", "value", "in", "enumerate", "(", "iterator", ")", ":", "\n", "        ", "yield", "value", "\n", "cur_time", "=", "time", ".", "perf_counter", "(", ")", "\n", "elapsed", "=", "cur_time", "-", "start_time", "\n", "it_s", "=", "(", "i", "+", "1", ")", "/", "elapsed", "\n", "total_s", "=", "total", "/", "it_s", "\n", "if", "elapsed", ">", "last_printed", "+", "print_interval", ":", "\n", "            ", "print", "(", "f\"{desc}: {i+1}/{total} it, {it_s:.02f} it/s,\"", "\n", "f\"[{_hhmmss(elapsed)}<{_hhmmss(total_s)}]\"", ")", "\n", "last_printed", "=", "elapsed", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.models.resnet_in.BasicBlock.__init__": [[24, 50], ["torch.Module.__init__", "resnet_in.conv3x3", "norm_layer", "torch.ReLU", "torch.ReLU", "resnet_in.conv3x3", "norm_layer", "ValueError", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.src.spin.SpectralNetwork.__init__", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.models.resnet_in.conv3x3", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.models.resnet_in.conv3x3"], ["def", "__init__", "(", "\n", "self", ",", "\n", "inplanes", ":", "int", ",", "\n", "planes", ":", "int", ",", "\n", "stride", ":", "int", "=", "1", ",", "\n", "downsample", ":", "Optional", "[", "nn", ".", "Module", "]", "=", "None", ",", "\n", "groups", ":", "int", "=", "1", ",", "\n", "base_width", ":", "int", "=", "64", ",", "\n", "dilation", ":", "int", "=", "1", ",", "\n", "norm_layer", ":", "Optional", "[", "Callable", "[", "...", ",", "nn", ".", "Module", "]", "]", "=", "None", "\n", ")", "->", "None", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "norm_layer", "is", "None", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "\n", "", "if", "groups", "!=", "1", "or", "base_width", "!=", "64", ":", "\n", "            ", "raise", "ValueError", "(", "'BasicBlock only supports groups=1 and base_width=64'", ")", "\n", "", "if", "dilation", ">", "1", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\"Dilation > 1 not supported in BasicBlock\"", ")", "\n", "# Both self.conv1 and self.downsample layers downsample the input when stride != 1", "\n", "", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "norm_layer", "(", "planes", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.models.resnet_in.BasicBlock.forward": [[51, 68], ["resnet_in.BasicBlock.conv1", "resnet_in.BasicBlock.bn1", "resnet_in.BasicBlock.relu", "resnet_in.BasicBlock.conv2", "resnet_in.BasicBlock.bn2", "resnet_in.BasicBlock.relu", "resnet_in.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ":", "Tensor", ")", "->", "Tensor", ":", "\n", "        ", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "identity", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.models.resnet_in.Bottleneck.__init__": [[79, 104], ["torch.Module.__init__", "resnet_in.conv1x1", "norm_layer", "resnet_in.conv3x3", "norm_layer", "resnet_in.conv1x1", "norm_layer", "torch.ReLU", "torch.ReLU", "int"], "methods", ["home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.src.spin.SpectralNetwork.__init__", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.models.resnet_in.conv1x1", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.models.resnet_in.conv3x3", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.models.resnet_in.conv1x1"], ["def", "__init__", "(", "\n", "self", ",", "\n", "inplanes", ":", "int", ",", "\n", "planes", ":", "int", ",", "\n", "stride", ":", "int", "=", "1", ",", "\n", "downsample", ":", "Optional", "[", "nn", ".", "Module", "]", "=", "None", ",", "\n", "groups", ":", "int", "=", "1", ",", "\n", "base_width", ":", "int", "=", "64", ",", "\n", "dilation", ":", "int", "=", "1", ",", "\n", "norm_layer", ":", "Optional", "[", "Callable", "[", "...", ",", "nn", ".", "Module", "]", "]", "=", "None", "\n", ")", "->", "None", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "norm_layer", "is", "None", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "\n", "", "width", "=", "int", "(", "planes", "*", "(", "base_width", "/", "64.", ")", ")", "*", "groups", "\n", "# Both self.conv2 and self.downsample layers downsample the input when stride != 1", "\n", "self", ".", "conv1", "=", "conv1x1", "(", "inplanes", ",", "width", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "width", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "width", ",", "width", ",", "stride", ",", "groups", ",", "dilation", ")", "\n", "self", ".", "bn2", "=", "norm_layer", "(", "width", ")", "\n", "self", ".", "conv3", "=", "conv1x1", "(", "width", ",", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "bn3", "=", "norm_layer", "(", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.models.resnet_in.Bottleneck.forward": [[105, 126], ["resnet_in.Bottleneck.conv1", "resnet_in.Bottleneck.bn1", "resnet_in.Bottleneck.relu", "resnet_in.Bottleneck.conv2", "resnet_in.Bottleneck.bn2", "resnet_in.Bottleneck.relu", "resnet_in.Bottleneck.conv3", "resnet_in.Bottleneck.bn3", "resnet_in.Bottleneck.relu", "resnet_in.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ":", "Tensor", ")", "->", "Tensor", ":", "\n", "        ", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "identity", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.models.resnet_in.ResNet.__init__": [[130, 188], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "resnet_in.ResNet._make_layer", "resnet_in.ResNet._make_layer", "resnet_in.ResNet._make_layer", "resnet_in.ResNet._make_layer", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Linear", "torch.Linear", "resnet_in.ResNet.modules", "len", "ValueError", "isinstance", "resnet_in.ResNet.modules", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "isinstance", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "isinstance", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.src.spin.SpectralNetwork.__init__", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.models.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.models.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.models.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.models.resnet.ResNet._make_layer"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "block", ":", "Type", "[", "Union", "[", "BasicBlock", ",", "Bottleneck", "]", "]", ",", "\n", "layers", ":", "List", "[", "int", "]", ",", "\n", "num_classes", ":", "int", "=", "1000", ",", "\n", "zero_init_residual", ":", "bool", "=", "False", ",", "\n", "groups", ":", "int", "=", "1", ",", "\n", "width_per_group", ":", "int", "=", "64", ",", "\n", "replace_stride_with_dilation", ":", "Optional", "[", "List", "[", "bool", "]", "]", "=", "None", ",", "\n", "norm_layer", ":", "Optional", "[", "Callable", "[", "...", ",", "nn", ".", "Module", "]", "]", "=", "None", "\n", ")", "->", "None", ":", "\n", "        ", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "norm_layer", "is", "None", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "\n", "", "self", ".", "_norm_layer", "=", "norm_layer", "\n", "\n", "self", ".", "inplanes", "=", "16", "\n", "self", ".", "dilation", "=", "1", "\n", "if", "replace_stride_with_dilation", "is", "None", ":", "\n", "# each element in the tuple indicates if we should replace", "\n", "# the 2x2 stride with a dilated convolution instead", "\n", "            ", "replace_stride_with_dilation", "=", "[", "False", ",", "False", ",", "False", "]", "\n", "", "if", "len", "(", "replace_stride_with_dilation", ")", "!=", "3", ":", "\n", "            ", "raise", "ValueError", "(", "\"replace_stride_with_dilation should be None \"", "\n", "\"or a 3-element tuple, got {}\"", ".", "format", "(", "replace_stride_with_dilation", ")", ")", "\n", "", "self", ".", "groups", "=", "groups", "\n", "self", ".", "base_width", "=", "width_per_group", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "self", ".", "inplanes", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "self", ".", "inplanes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "16", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "32", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ",", "\n", "dilate", "=", "replace_stride_with_dilation", "[", "0", "]", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ",", "\n", "dilate", "=", "replace_stride_with_dilation", "[", "1", "]", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ",", "\n", "dilate", "=", "replace_stride_with_dilation", "[", "2", "]", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "128", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "(", "nn", ".", "BatchNorm2d", ",", "nn", ".", "GroupNorm", ")", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n", "# Zero-initialize the last BN in each residual branch,", "\n", "# so that the residual branch starts with zeros, and each residual block behaves like an identity.", "\n", "# This improves the model by 0.2~0.3% according to https://arxiv.org/abs/1706.02677", "\n", "", "", "if", "zero_init_residual", ":", "\n", "            ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "m", ",", "Bottleneck", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bn3", ".", "weight", ",", "0", ")", "# type: ignore[arg-type]", "\n", "", "elif", "isinstance", "(", "m", ",", "BasicBlock", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bn2", ".", "weight", ",", "0", ")", "# type: ignore[arg-type]", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.models.resnet_in.ResNet._make_layer": [[189, 213], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "resnet_in.conv1x1", "norm_layer", "block"], "methods", ["home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.models.resnet_in.conv1x1"], ["", "", "", "", "def", "_make_layer", "(", "self", ",", "block", ":", "Type", "[", "Union", "[", "BasicBlock", ",", "Bottleneck", "]", "]", ",", "planes", ":", "int", ",", "blocks", ":", "int", ",", "\n", "stride", ":", "int", "=", "1", ",", "dilate", ":", "bool", "=", "False", ")", "->", "nn", ".", "Sequential", ":", "\n", "        ", "norm_layer", "=", "self", ".", "_norm_layer", "\n", "downsample", "=", "None", "\n", "previous_dilation", "=", "self", ".", "dilation", "\n", "if", "dilate", ":", "\n", "            ", "self", ".", "dilation", "*=", "stride", "\n", "stride", "=", "1", "\n", "", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "conv1x1", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "stride", ")", ",", "\n", "norm_layer", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ",", "self", ".", "groups", ",", "\n", "self", ".", "base_width", ",", "previous_dilation", ",", "norm_layer", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "_", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "groups", "=", "self", ".", "groups", ",", "\n", "base_width", "=", "self", ".", "base_width", ",", "dilation", "=", "self", ".", "dilation", ",", "\n", "norm_layer", "=", "norm_layer", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.models.resnet_in.ResNet._forward_impl": [[214, 231], ["resnet_in.ResNet.conv1", "resnet_in.ResNet.bn1", "resnet_in.ResNet.relu", "resnet_in.ResNet.maxpool", "resnet_in.ResNet.layer1", "resnet_in.ResNet.layer2", "resnet_in.ResNet.layer3", "resnet_in.ResNet.layer4", "resnet_in.ResNet.avgpool", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "resnet_in.ResNet.fc"], "methods", ["home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.swag.flatten", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.swag.flatten", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.swag.flatten", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.None.swag.flatten"], ["", "def", "_forward_impl", "(", "self", ",", "x", ":", "Tensor", ")", "->", "Tensor", ":", "\n", "# See note [TorchScript super()]", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "torch", ".", "flatten", "(", "x", ",", "1", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.models.resnet_in.ResNet.forward": [[232, 234], ["resnet_in.ResNet._forward_impl"], "methods", ["home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.models.resnet_in.ResNet._forward_impl"], ["", "def", "forward", "(", "self", ",", "x", ":", "Tensor", ")", "->", "Tensor", ":", "\n", "        ", "return", "self", ".", "_forward_impl", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.models.resnet_in.conv3x3": [[10, 14], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ":", "int", ",", "out_planes", ":", "int", ",", "stride", ":", "int", "=", "1", ",", "groups", ":", "int", "=", "1", ",", "dilation", ":", "int", "=", "1", ")", "->", "nn", ".", "Conv2d", ":", "\n", "    ", "\"\"\"3x3 convolution with padding\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "dilation", ",", "groups", "=", "groups", ",", "bias", "=", "False", ",", "dilation", "=", "dilation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.models.resnet_in.conv1x1": [[16, 19], ["torch.Conv2d"], "function", ["None"], ["", "def", "conv1x1", "(", "in_planes", ":", "int", ",", "out_planes", ":", "int", ",", "stride", ":", "int", "=", "1", ")", "->", "nn", ".", "Conv2d", ":", "\n", "    ", "\"\"\"1x1 convolution\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.models.resnet_in._resnet": [[236, 246], ["resnet_in.ResNet"], "function", ["None"], ["", "", "def", "_resnet", "(", "\n", "arch", ":", "str", ",", "\n", "block", ":", "Type", "[", "Union", "[", "BasicBlock", ",", "Bottleneck", "]", "]", ",", "\n", "layers", ":", "List", "[", "int", "]", ",", "\n", "pretrained", ":", "bool", ",", "\n", "progress", ":", "bool", ",", "\n", "**", "kwargs", ":", "Any", "\n", ")", "->", "ResNet", ":", "\n", "    ", "model", "=", "ResNet", "(", "block", ",", "layers", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.models.resnet_in.resnet18_thin": [[248, 251], ["resnet_in._resnet"], "function", ["home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.models.resnet_in._resnet"], ["", "def", "resnet18_thin", "(", "pretrained", ":", "bool", "=", "False", ",", "progress", ":", "bool", "=", "True", ",", "**", "kwargs", ":", "Any", ")", "->", "ResNet", ":", "\n", "    ", "return", "_resnet", "(", "'resnet18'", ",", "BasicBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "pretrained", ",", "progress", ",", "\n", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.models.resnet_in.resnet34_thin": [[253, 256], ["resnet_in._resnet"], "function", ["home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.models.resnet_in._resnet"], ["", "def", "resnet34_thin", "(", "pretrained", ":", "bool", "=", "False", ",", "progress", ":", "bool", "=", "True", ",", "**", "kwargs", ":", "Any", ")", "->", "ResNet", ":", "\n", "    ", "return", "_resnet", "(", "'resnet34'", ",", "BasicBlock", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "pretrained", ",", "progress", ",", "\n", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.models.resnet_in.resnet50_thin": [[258, 261], ["resnet_in._resnet"], "function", ["home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.models.resnet_in._resnet"], ["", "def", "resnet50_thin", "(", "pretrained", ":", "bool", "=", "False", ",", "progress", ":", "bool", "=", "True", ",", "**", "kwargs", ":", "Any", ")", "->", "ResNet", ":", "\n", "    ", "return", "_resnet", "(", "'resnet50'", ",", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "pretrained", ",", "progress", ",", "\n", "**", "kwargs", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.models.wide_resnet.BasicBlock.__init__": [[9, 23], ["torch.Module.__init__", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.src.spin.SpectralNetwork.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_planes", ",", "out_planes", ",", "stride", ",", "dropRate", "=", "0.0", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "in_planes", ")", "\n", "self", ".", "relu1", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "out_planes", ")", "\n", "self", ".", "relu2", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "out_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "droprate", "=", "dropRate", "\n", "self", ".", "equalInOut", "=", "(", "in_planes", "==", "out_planes", ")", "\n", "self", ".", "convShortcut", "=", "(", "not", "self", ".", "equalInOut", ")", "and", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "0", ",", "bias", "=", "False", ")", "or", "None", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.models.wide_resnet.BasicBlock.forward": [[23, 33], ["wide_resnet.BasicBlock.relu2", "wide_resnet.BasicBlock.conv2", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "wide_resnet.BasicBlock.relu1", "wide_resnet.BasicBlock.relu1", "wide_resnet.BasicBlock.bn2", "torch.dropout", "torch.dropout", "torch.dropout", "wide_resnet.BasicBlock.bn1", "wide_resnet.BasicBlock.bn1", "wide_resnet.BasicBlock.conv1", "wide_resnet.BasicBlock.convShortcut"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "not", "self", ".", "equalInOut", ":", "\n", "            ", "x", "=", "self", ".", "relu1", "(", "self", ".", "bn1", "(", "x", ")", ")", "\n", "", "else", ":", "\n", "            ", "out", "=", "self", ".", "relu1", "(", "self", ".", "bn1", "(", "x", ")", ")", "\n", "", "out", "=", "self", ".", "relu2", "(", "self", ".", "bn2", "(", "self", ".", "conv1", "(", "out", "if", "self", ".", "equalInOut", "else", "x", ")", ")", ")", "\n", "if", "self", ".", "droprate", ">", "0", ":", "\n", "            ", "out", "=", "F", ".", "dropout", "(", "out", ",", "p", "=", "self", ".", "droprate", ",", "training", "=", "self", ".", "training", ")", "\n", "", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "return", "torch", ".", "add", "(", "x", "if", "self", ".", "equalInOut", "else", "self", ".", "convShortcut", "(", "x", ")", ",", "out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.models.wide_resnet.NetworkBlock.__init__": [[35, 38], ["torch.Module.__init__", "wide_resnet.NetworkBlock._make_layer"], "methods", ["home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.src.spin.SpectralNetwork.__init__", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.models.resnet.ResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "nb_layers", ",", "in_planes", ",", "out_planes", ",", "block", ",", "stride", ",", "dropRate", "=", "0.0", ")", ":", "\n", "        ", "super", "(", "NetworkBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "layer", "=", "self", ".", "_make_layer", "(", "block", ",", "in_planes", ",", "out_planes", ",", "nb_layers", ",", "stride", ",", "dropRate", ")", "\n", "", "def", "_make_layer", "(", "self", ",", "block", ",", "in_planes", ",", "out_planes", ",", "nb_layers", ",", "stride", ",", "dropRate", ")", ":", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.models.wide_resnet.NetworkBlock._make_layer": [[38, 43], ["range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "int", "layers.append", "block"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "block", ",", "in_planes", ",", "out_planes", ",", "nb_layers", ",", "stride", ",", "dropRate", ")", ":", "\n", "        ", "layers", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "int", "(", "nb_layers", ")", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "i", "==", "0", "and", "in_planes", "or", "out_planes", ",", "out_planes", ",", "i", "==", "0", "and", "stride", "or", "1", ",", "dropRate", ")", ")", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.models.wide_resnet.NetworkBlock.forward": [[43, 45], ["wide_resnet.NetworkBlock.layer"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "layer", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.models.wide_resnet.WideResNet.__init__": [[47, 76], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "wide_resnet.NetworkBlock", "wide_resnet.NetworkBlock", "wide_resnet.NetworkBlock", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "wide_resnet.WideResNet.modules", "isinstance", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "isinstance", "m.weight.data.fill_", "m.bias.data.zero_", "isinstance", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.src.spin.SpectralNetwork.__init__"], ["    ", "def", "__init__", "(", "self", ",", "depth", ",", "num_classes", ",", "widen_factor", "=", "1", ",", "dropRate", "=", "0.0", ")", ":", "\n", "        ", "super", "(", "WideResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "nChannels", "=", "[", "16", ",", "16", "*", "widen_factor", ",", "32", "*", "widen_factor", ",", "64", "*", "widen_factor", "]", "\n", "assert", "(", "(", "depth", "-", "4", ")", "%", "6", "==", "0", ")", "\n", "n", "=", "(", "depth", "-", "4", ")", "/", "6", "\n", "block", "=", "BasicBlock", "\n", "# 1st conv before any network block", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "nChannels", "[", "0", "]", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "# 1st block", "\n", "self", ".", "block1", "=", "NetworkBlock", "(", "n", ",", "nChannels", "[", "0", "]", ",", "nChannels", "[", "1", "]", ",", "block", ",", "1", ",", "dropRate", ")", "\n", "# 2nd block", "\n", "self", ".", "block2", "=", "NetworkBlock", "(", "n", ",", "nChannels", "[", "1", "]", ",", "nChannels", "[", "2", "]", ",", "block", ",", "2", ",", "dropRate", ")", "\n", "# 3rd block", "\n", "self", ".", "block3", "=", "NetworkBlock", "(", "n", ",", "nChannels", "[", "2", "]", ",", "nChannels", "[", "3", "]", ",", "block", ",", "2", ",", "dropRate", ")", "\n", "# global average pooling and classifier", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "nChannels", "[", "3", "]", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "nChannels", "[", "3", "]", ",", "num_classes", ")", "\n", "self", ".", "nChannels", "=", "nChannels", "[", "3", "]", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.models.wide_resnet.WideResNet.forward": [[76, 85], ["wide_resnet.WideResNet.conv1", "wide_resnet.WideResNet.block1", "wide_resnet.WideResNet.block2", "wide_resnet.WideResNet.block3", "wide_resnet.WideResNet.relu", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "out.view.view.view", "wide_resnet.WideResNet.fc", "wide_resnet.WideResNet.bn1"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "block1", "(", "out", ")", "\n", "out", "=", "self", ".", "block2", "(", "out", ")", "\n", "out", "=", "self", ".", "block3", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "self", ".", "bn1", "(", "out", ")", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "8", ")", "\n", "out", "=", "out", ".", "view", "(", "-", "1", ",", "self", ".", "nChannels", ")", "\n", "return", "self", ".", "fc", "(", "out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.models.wide_resnet.wrn28_10": [[86, 88], ["wide_resnet.WideResNet"], "function", ["None"], ["", "", "def", "wrn28_10", "(", "in_planes", "=", "None", ",", "num_classes", "=", "10", ")", ":", "\n", "    ", "return", "WideResNet", "(", "28", ",", "num_classes", ",", "10", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.models.wide_resnet.wrn16_10": [[89, 91], ["wide_resnet.WideResNet"], "function", ["None"], ["", "def", "wrn16_10", "(", "in_planes", "=", "None", ",", "num_classes", "=", "10", ")", ":", "\n", "    ", "return", "WideResNet", "(", "16", ",", "num_classes", ",", "10", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.models.wide_resnet.wrn28_2": [[92, 94], ["wide_resnet.WideResNet"], "function", ["None"], ["", "def", "wrn28_2", "(", "in_planes", "=", "None", ",", "num_classes", "=", "10", ")", ":", "\n", "    ", "return", "WideResNet", "(", "28", ",", "num_classes", ",", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.models.wide_resnet.wrn16_2": [[95, 97], ["wide_resnet.WideResNet"], "function", ["None"], ["", "def", "wrn16_2", "(", "in_planes", "=", "None", ",", "num_classes", "=", "10", ")", ":", "\n", "    ", "return", "WideResNet", "(", "16", ",", "num_classes", ",", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.models.wide_resnet.wrn16_4": [[98, 100], ["wide_resnet.WideResNet"], "function", ["None"], ["", "def", "wrn16_4", "(", "in_planes", "=", "None", ",", "num_classes", "=", "10", ")", ":", "\n", "    ", "return", "WideResNet", "(", "16", ",", "num_classes", ",", "4", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.models.resnet.LambdaLayer.__init__": [[46, 49], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.src.spin.SpectralNetwork.__init__"], ["    ", "def", "__init__", "(", "self", ",", "lambd", ")", ":", "\n", "        ", "super", "(", "LambdaLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "lambd", "=", "lambd", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.models.resnet.LambdaLayer.forward": [[50, 52], ["resnet.LambdaLayer.lambd"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "lambd", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.models.resnet.BasicBlock.__init__": [[57, 76], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "resnet.LambdaLayer", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.pad", "torch.pad", "torch.pad", "torch.pad", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.src.spin.SpectralNetwork.__init__"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ",", "option", "=", "'A'", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "planes", ":", "\n", "            ", "if", "option", "==", "'A'", ":", "\n", "                ", "\"\"\"\n                For CIFAR10 ResNet paper uses option A.\n                \"\"\"", "\n", "self", ".", "shortcut", "=", "LambdaLayer", "(", "lambda", "x", ":", "\n", "F", ".", "pad", "(", "x", "[", ":", ",", ":", ",", ":", ":", "2", ",", ":", ":", "2", "]", ",", "(", "0", ",", "0", ",", "0", ",", "0", ",", "planes", "//", "4", ",", "planes", "//", "4", ")", ",", "\"constant\"", ",", "0", ")", ")", "\n", "", "elif", "option", "==", "'B'", ":", "\n", "                ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "self", ".", "expansion", "*", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "self", ".", "expansion", "*", "planes", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.models.resnet.BasicBlock.forward": [[78, 84], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "resnet.BasicBlock.bn2", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "resnet.BasicBlock.bn1", "resnet.BasicBlock.conv2", "resnet.BasicBlock.shortcut", "resnet.BasicBlock.conv1"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", "\n", "out", "=", "out", "+", "self", ".", "shortcut", "(", "x", ")", "\n", "out", "=", "F", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.models.resnet.ResNet.__init__": [[87, 99], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "resnet.ResNet.apply"], "methods", ["home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.src.spin.SpectralNetwork.__init__", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.models.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.models.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.models.resnet.ResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "num_blocks", ",", "in_planes", ",", "num_classes", "=", "10", ")", ":", "\n", "        ", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_planes", "=", "in_planes", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "in_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "in_planes", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "in_planes", ",", "num_blocks", "[", "0", "]", ",", "stride", "=", "1", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "in_planes", "*", "2", ",", "num_blocks", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "in_planes", "*", "4", ",", "num_blocks", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "in_planes", "*", "4", ",", "num_classes", ")", "\n", "\n", "self", ".", "apply", "(", "_weights_init", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.models.resnet.ResNet._make_layer": [[100, 108], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "block"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "num_blocks", ",", "stride", ")", ":", "\n", "        ", "strides", "=", "[", "stride", "]", "+", "[", "1", "]", "*", "(", "num_blocks", "-", "1", ")", "\n", "layers", "=", "[", "]", "\n", "for", "stride", "in", "strides", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "in_planes", ",", "planes", ",", "stride", ")", ")", "\n", "self", ".", "in_planes", "=", "planes", "*", "block", ".", "expansion", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.models.resnet.ResNet.forward": [[109, 120], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "resnet.ResNet.layer1", "resnet.ResNet.layer2", "resnet.ResNet.layer3", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "resnet.ResNet.view", "resnet.ResNet.linear", "resnet.ResNet.bn1", "resnet.ResNet.size", "resnet.ResNet.conv1", "resnet.ResNet.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "return_features", "=", "False", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "layer1", "(", "out", ")", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "out", "=", "self", ".", "layer3", "(", "out", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "out", ".", "size", "(", ")", "[", "3", "]", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "if", "return_features", ":", "\n", "            ", "return", "out", "\n", "", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.models.resnet._weights_init": [[39, 44], ["isinstance", "isinstance", "torch.kaiming_normal_"], "function", ["None"], ["def", "_weights_init", "(", "m", ")", ":", "\n", "    ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "#print(classname)", "\n", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", "or", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "        ", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.models.resnet.resnet20": [[122, 124], ["resnet.ResNet"], "function", ["None"], ["", "", "def", "resnet20", "(", "in_planes", "=", "16", ",", "num_classes", "=", "10", ")", ":", "\n", "\t", "return", "ResNet", "(", "BasicBlock", ",", "[", "3", ",", "3", ",", "3", "]", ",", "in_planes", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.models.resnet.resnet32": [[125, 127], ["resnet.ResNet"], "function", ["None"], ["", "def", "resnet32", "(", "in_planes", "=", "16", ",", "num_classes", "=", "10", ")", ":", "\n", "\t", "return", "ResNet", "(", "BasicBlock", ",", "[", "5", ",", "5", ",", "5", "]", ",", "in_planes", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.models.resnet.resnet44": [[128, 130], ["resnet.ResNet"], "function", ["None"], ["", "def", "resnet44", "(", "in_planes", "=", "16", ",", "num_classes", "=", "10", ")", ":", "\n", "\t", "return", "ResNet", "(", "BasicBlock", ",", "[", "7", ",", "7", ",", "7", "]", ",", "in_planes", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.models.resnet.resnet56": [[131, 133], ["resnet.ResNet"], "function", ["None"], ["", "def", "resnet56", "(", "in_planes", "=", "16", ",", "num_classes", "=", "10", ")", ":", "\n", "\t", "return", "ResNet", "(", "BasicBlock", ",", "[", "9", ",", "9", ",", "9", "]", ",", "in_planes", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.models.resnet.resnet110": [[134, 136], ["resnet.ResNet"], "function", ["None"], ["", "def", "resnet110", "(", "in_planes", "=", "16", ",", "num_classes", "=", "10", ")", ":", "\n", "\t", "return", "ResNet", "(", "BasicBlock", ",", "[", "18", ",", "18", ",", "18", "]", ",", "in_planes", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.models.resnet.resnet1202": [[137, 139], ["resnet.ResNet"], "function", ["None"], ["", "def", "resnet1202", "(", "in_planes", "=", "16", ",", "num_classes", "=", "10", ")", ":", "\n", "\t", "return", "ResNet", "(", "BasicBlock", ",", "[", "200", ",", "200", ",", "200", "]", ",", "in_planes", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.models.resnet.test": [[140, 148], ["filter", "print", "print", "net.parameters", "np.prod", "len", "list", "x.data.numpy", "filter", "net.parameters", "len", "p.data.size"], "function", ["None"], ["", "def", "test", "(", "net", ")", ":", "\n", "    ", "import", "numpy", "as", "np", "\n", "total_params", "=", "0", "\n", "\n", "for", "x", "in", "filter", "(", "lambda", "p", ":", "p", ".", "requires_grad", ",", "net", ".", "parameters", "(", ")", ")", ":", "\n", "        ", "total_params", "+=", "np", ".", "prod", "(", "x", ".", "data", ".", "numpy", "(", ")", ".", "shape", ")", "\n", "", "print", "(", "\"Total number of params\"", ",", "total_params", ")", "\n", "print", "(", "\"Total layers\"", ",", "len", "(", "list", "(", "filter", "(", "lambda", "p", ":", "p", ".", "requires_grad", "and", "len", "(", "p", ".", "data", ".", "size", "(", ")", ")", ">", "1", ",", "net", ".", "parameters", "(", ")", ")", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.src.spin.LinearOperator.__init__": [[89, 91], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "op", "=", "None", ")", ":", "\n", "    ", "self", ".", "_op", "=", "op", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.src.spin.LinearOperator.build_network": [[92, 96], ["f"], "methods", ["None"], ["", "def", "build_network", "(", "self", ",", "f", ",", "x", ")", ":", "\n", "    ", "\"\"\"Build network from a builder f'n for the network 'f' and data 'x'.\"\"\"", "\n", "self", ".", "f", "=", "f", "(", "x", ")", "\n", "return", "self", ".", "f", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.src.spin.LinearOperator.build_op": [[97, 102], ["ValueError"], "methods", ["None"], ["", "def", "build_op", "(", "self", ",", "x", ",", "logpdf", "=", "None", ")", ":", "\n", "    ", "\"\"\"Build op from data 'x'.\"\"\"", "\n", "del", "x", "\n", "del", "logpdf", "\n", "raise", "ValueError", "(", "'build_op not implemented in derived class.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.src.spin.LinearOperator.build": [[103, 116], ["spin.LinearOperator.build_network", "isinstance", "spin.LinearOperator.build_op"], "methods", ["home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.src.spin.LaplacianOperator.build_network", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.src.spin.SlownessOperator.build_op"], ["", "def", "build", "(", "self", ",", "f", ",", "x", ")", ":", "\n", "    ", "\"\"\"Combines build_network and build_op.\"\"\"", "\n", "fx", "=", "self", ".", "build_network", "(", "f", ",", "x", ")", "\n", "# For per_example Jacobian computation, the features and the Jacobian", "\n", "# of the features must be created at the same time.", "\n", "# Note that this only works if:", "\n", "#  1) build_network is never called externally", "\n", "#  2) build is never overridden by a child class", "\n", "if", "isinstance", "(", "fx", ",", "tuple", ")", ":", "\n", "      ", "self", ".", "_jac", "=", "fx", "[", "1", "]", "\n", "self", ".", "f", "=", "fx", "[", "0", "]", "\n", "", "op", "=", "self", ".", "build_op", "(", "x", ")", "\n", "return", "self", ".", "f", ",", "op", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.src.spin.LinearOperator.op": [[117, 120], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "op", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "_op", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.src.spin.LinearOperator.jac": [[121, 125], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "jac", "(", "self", ")", ":", "\n", "# Only exists if we are computing the Jacobian per-example.", "\n", "    ", "return", "self", ".", "_jac", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.src.spin.LinearOperator.__add__": [[126, 128], ["spin.AddOperator"], "methods", ["None"], ["", "def", "__add__", "(", "self", ",", "x", ")", ":", "\n", "    ", "return", "AddOperator", "(", "self", ",", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.src.spin.LinearOperator.__sub__": [[129, 131], ["spin.AddOperator"], "methods", ["None"], ["", "def", "__sub__", "(", "self", ",", "x", ")", ":", "\n", "    ", "return", "AddOperator", "(", "self", ",", "-", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.src.spin.LinearOperator.__mul__": [[132, 134], ["spin.ScaleOperator"], "methods", ["None"], ["", "def", "__mul__", "(", "self", ",", "c", ")", ":", "\n", "    ", "return", "ScaleOperator", "(", "c", ",", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.src.spin.LinearOperator.__rmul__": [[135, 137], ["spin.ScaleOperator"], "methods", ["None"], ["", "def", "__rmul__", "(", "self", ",", "c", ")", ":", "\n", "    ", "return", "ScaleOperator", "(", "c", ",", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.src.spin.LinearOperator.__neg__": [[138, 140], ["None"], "methods", ["None"], ["", "def", "__neg__", "(", "self", ")", ":", "\n", "    ", "return", "-", "1", "*", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.src.spin.LinearOperator.__lt__": [[143, 151], ["isinstance", "isinstance", "isinstance", "isinstance"], "methods", ["None"], ["", "def", "__lt__", "(", "self", ",", "x", ")", ":", "\n", "# Only Laplacians or things made of Laplacians take precedence.", "\n", "    ", "if", "isinstance", "(", "x", ",", "ScaleOperator", ")", ":", "\n", "      ", "return", "self", "<", "x", ".", "x", "\n", "", "if", "isinstance", "(", "x", ",", "AddOperator", ")", ":", "\n", "      ", "return", "self", "<", "x", ".", "x", "or", "self", "<", "x", ".", "y", "\n", "", "return", "(", "isinstance", "(", "x", ",", "LaplacianOperator", ")", "or", "\n", "isinstance", "(", "x", ",", "ExactLaplacianOperator", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.src.spin.LinearOperator.__le__": [[152, 154], ["None"], "methods", ["None"], ["", "def", "__le__", "(", "self", ",", "x", ")", ":", "\n", "    ", "return", "True", "# only override this for super-classes.", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.src.spin.LinearOperator.__gt__": [[155, 157], ["None"], "methods", ["None"], ["", "def", "__gt__", "(", "self", ",", "x", ")", ":", "\n", "    ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.src.spin.LinearOperator.__ge__": [[158, 160], ["None"], "methods", ["None"], ["", "def", "__ge__", "(", "self", ",", "x", ")", ":", "\n", "    ", "return", "not", "self", "<", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.src.spin.ScaleOperator.__init__": [[165, 169], ["spin.LinearOperator.__init__"], "methods", ["home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.src.spin.SpectralNetwork.__init__"], ["def", "__init__", "(", "self", ",", "c", ",", "x", ")", ":", "\n", "    ", "super", "(", "ScaleOperator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "c", "=", "c", "\n", "self", ".", "x", "=", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.src.spin.ScaleOperator.build_network": [[170, 173], ["spin.ScaleOperator.x.build_network"], "methods", ["home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.src.spin.LaplacianOperator.build_network"], ["", "def", "build_network", "(", "self", ",", "f", ",", "x", ")", ":", "\n", "    ", "self", ".", "f", "=", "self", ".", "x", ".", "build_network", "(", "f", ",", "x", ")", "\n", "return", "self", ".", "f", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.src.spin.ScaleOperator.build_op": [[174, 178], ["spin.ScaleOperator.x.build_op"], "methods", ["home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.src.spin.SlownessOperator.build_op"], ["", "def", "build_op", "(", "self", ",", "x", ")", ":", "\n", "    ", "self", ".", "_op_x", "=", "self", ".", "x", ".", "build_op", "(", "x", ")", "\n", "self", ".", "_op", "=", "self", ".", "c", "*", "self", ".", "_op_x", "\n", "return", "self", ".", "_op", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.src.spin.ScaleOperator.__lt__": [[179, 181], ["None"], "methods", ["None"], ["", "def", "__lt__", "(", "self", ",", "x", ")", ":", "\n", "    ", "return", "self", ".", "x", "<", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.src.spin.ScaleOperator.__le__": [[182, 184], ["None"], "methods", ["None"], ["", "def", "__le__", "(", "self", ",", "x", ")", ":", "\n", "    ", "return", "self", ".", "x", "<=", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.src.spin.ScaleOperator.__gt__": [[185, 187], ["None"], "methods", ["None"], ["", "def", "__gt__", "(", "self", ",", "x", ")", ":", "\n", "    ", "return", "self", ".", "x", ">", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.src.spin.ScaleOperator.__ge__": [[188, 190], ["None"], "methods", ["None"], ["", "def", "__ge__", "(", "self", ",", "x", ")", ":", "\n", "    ", "return", "self", ".", "x", ">=", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.src.spin.AddOperator.__init__": [[195, 199], ["spin.LinearOperator.__init__"], "methods", ["home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.src.spin.SpectralNetwork.__init__"], ["def", "__init__", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "    ", "super", "(", "AddOperator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "x", "=", "x", "\n", "self", ".", "y", "=", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.src.spin.AddOperator.build_network": [[200, 209], ["spin.AddOperator.x.build_network", "spin.AddOperator.y.build_network"], "methods", ["home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.src.spin.LaplacianOperator.build_network", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.src.spin.LaplacianOperator.build_network"], ["", "def", "build_network", "(", "self", ",", "f", ",", "x", ")", ":", "\n", "# Use comparison to choose precedence for order of building network.", "\n", "    ", "if", "self", ".", "x", ">=", "self", ".", "y", ":", "\n", "      ", "self", ".", "f", "=", "self", ".", "x", ".", "build_network", "(", "f", ",", "x", ")", "\n", "self", ".", "y", ".", "f", "=", "self", ".", "f", "\n", "", "else", ":", "\n", "      ", "self", ".", "f", "=", "self", ".", "y", ".", "build_network", "(", "f", ",", "x", ")", "\n", "self", ".", "x", ".", "f", "=", "self", ".", "f", "\n", "", "return", "self", ".", "f", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.src.spin.AddOperator.build_op": [[210, 215], ["spin.AddOperator.x.build_op", "spin.AddOperator.y.build_op"], "methods", ["home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.src.spin.SlownessOperator.build_op", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.src.spin.SlownessOperator.build_op"], ["", "def", "build_op", "(", "self", ",", "x", ",", "logpdf", "=", "None", ")", ":", "\n", "    ", "self", ".", "_op_x", "=", "self", ".", "x", ".", "build_op", "(", "x", ")", "\n", "self", ".", "_op_y", "=", "self", ".", "y", ".", "build_op", "(", "x", ")", "\n", "self", ".", "_op", "=", "self", ".", "_op_x", "+", "self", ".", "_op_y", "\n", "return", "self", ".", "_op", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.src.spin.AddOperator.__lt__": [[216, 218], ["None"], "methods", ["None"], ["", "def", "__lt__", "(", "self", ",", "x", ")", ":", "\n", "    ", "return", "self", ".", "x", "<", "x", "and", "self", ".", "y", "<", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.src.spin.AddOperator.__le__": [[219, 221], ["None"], "methods", ["None"], ["", "def", "__le__", "(", "self", ",", "x", ")", ":", "\n", "    ", "return", "self", ".", "x", "<=", "x", "and", "self", ".", "y", "<=", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.src.spin.AddOperator.__gt__": [[222, 224], ["None"], "methods", ["None"], ["", "def", "__gt__", "(", "self", ",", "x", ")", ":", "\n", "    ", "return", "not", "self", "<=", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.src.spin.LaplacianOperator.__init__": [[229, 232], ["spin.LinearOperator.__init__"], "methods", ["home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.src.spin.SpectralNetwork.__init__"], ["def", "__init__", "(", "self", ",", "eps", ")", ":", "\n", "    ", "super", "(", "LaplacianOperator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_eps", "=", "eps", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.src.spin.LaplacianOperator._perturbation": [[233, 240], ["range", "tensorflow.concat", "x.shape.as_list", "xs.append", "xs.append", "tensorflow.one_hot", "tensorflow.one_hot"], "methods", ["None"], ["", "def", "_perturbation", "(", "self", ",", "x", ",", "eps", ")", ":", "\n", "    ", "ndim", "=", "x", ".", "shape", ".", "as_list", "(", ")", "[", "1", "]", "# dimension of position vector (i.e. 1,2,3).", "\n", "xs", "=", "[", "x", "]", "\n", "for", "i", "in", "range", "(", "ndim", ")", ":", "\n", "      ", "xs", ".", "append", "(", "x", "+", "eps", "*", "tf", ".", "one_hot", "(", "i", ",", "ndim", ")", ")", "\n", "xs", ".", "append", "(", "x", "-", "eps", "*", "tf", ".", "one_hot", "(", "i", ",", "ndim", ")", ")", "\n", "", "return", "tf", ".", "concat", "(", "xs", ",", "axis", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.src.spin.LaplacianOperator.build_network": [[241, 263], ["spin.LaplacianOperator._perturbation", "f", "isinstance", "tensorflow.split", "x.shape.as_list", "tensorflow.split"], "methods", ["home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.src.spin.LaplacianOperator._perturbation"], ["", "def", "build_network", "(", "self", ",", "f", ",", "x", ")", ":", "\n", "    ", "\"\"\"Build operator from a builder f'n for the network 'f' and data 'x'.\"\"\"", "\n", "xs", "=", "self", ".", "_perturbation", "(", "x", ",", "self", ".", "_eps", ")", "\n", "fx", "=", "f", "(", "xs", ")", "# build network, then return it at the end.", "\n", "ndim", "=", "x", ".", "shape", ".", "as_list", "(", ")", "[", "1", "]", "\n", "\n", "if", "isinstance", "(", "fx", ",", "tuple", ")", ":", "\n", "      ", "jac", "=", "[", "tf", ".", "split", "(", "j", ",", "2", "*", "ndim", "+", "1", ",", "axis", "=", "0", ")", "[", "0", "]", "for", "j", "in", "fx", "[", "1", "]", "]", "\n", "fx", "=", "fx", "[", "0", "]", "\n", "", "else", ":", "\n", "      ", "jac", "=", "None", "\n", "\n", "# Split into [f(x), f(x+eps*e_i), f(x-eps*e_i), ...] for basis", "\n", "# vectors {e_i}.", "\n", "", "self", ".", "_fxs", "=", "tf", ".", "split", "(", "fx", ",", "2", "*", "ndim", "+", "1", ",", "axis", "=", "0", ")", "\n", "\n", "if", "jac", "is", "not", "None", ":", "\n", "      ", "self", ".", "f", "=", "(", "self", ".", "_fxs", "[", "0", "]", ",", "jac", ")", "\n", "", "else", ":", "\n", "      ", "self", ".", "f", "=", "self", ".", "_fxs", "[", "0", "]", "\n", "\n", "", "return", "self", ".", "f", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.src.spin.LaplacianOperator.build_op": [[264, 274], ["range", "spin._covariance", "x.shape.as_list"], "methods", ["home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.src.spin._covariance"], ["", "def", "build_op", "(", "self", ",", "x", ")", ":", "\n", "    ", "\"\"\"Build operator from a builder f'n for the network 'f' and data 'x'.\"\"\"", "\n", "ndim", "=", "x", ".", "shape", ".", "as_list", "(", ")", "[", "1", "]", "\n", "# d^2/dx_i^2 for each basis vector using finite differences.", "\n", "lapl", "=", "0.0", "\n", "for", "i", "in", "range", "(", "ndim", ")", ":", "\n", "      ", "lapl", "+=", "self", ".", "_fxs", "[", "2", "*", "i", "+", "1", "]", "+", "self", ".", "_fxs", "[", "2", "*", "i", "+", "2", "]", "-", "2", "*", "self", ".", "_fxs", "[", "0", "]", "\n", "", "lapl", "/=", "self", ".", "_eps", "**", "2", "\n", "self", ".", "_op", "=", "_covariance", "(", "self", ".", "_fxs", "[", "0", "]", ",", "lapl", ")", "\n", "return", "self", ".", "_op", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.src.spin.LaplacianOperator.__lt__": [[275, 277], ["None"], "methods", ["None"], ["", "def", "__lt__", "(", "self", ",", "x", ")", ":", "\n", "    ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.src.spin.LaplacianOperator.__le__": [[278, 285], ["isinstance", "isinstance", "isinstance", "isinstance"], "methods", ["None"], ["", "def", "__le__", "(", "self", ",", "x", ")", ":", "\n", "    ", "if", "isinstance", "(", "x", ",", "ScaleOperator", ")", ":", "\n", "      ", "return", "self", "<=", "x", ".", "x", "\n", "", "if", "isinstance", "(", "x", ",", "AddOperator", ")", ":", "\n", "      ", "return", "self", "<=", "x", ".", "x", "or", "self", "<=", "x", ".", "y", "\n", "", "return", "(", "isinstance", "(", "x", ",", "LaplacianOperator", ")", "or", "\n", "isinstance", "(", "x", ",", "ExactLaplacianOperator", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.src.spin.LaplacianOperator.__gt__": [[286, 288], ["None"], "methods", ["None"], ["", "def", "__gt__", "(", "self", ",", "x", ")", ":", "\n", "    ", "return", "not", "self", "<=", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.src.spin.LaplacianOperator.__ge__": [[289, 291], ["None"], "methods", ["None"], ["", "def", "__ge__", "(", "self", ",", "x", ")", ":", "\n", "    ", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.src.spin.ExactLaplacianOperator.__init__": [[317, 319], ["spin.LinearOperator.__init__"], "methods", ["home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.src.spin.SpectralNetwork.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "    ", "super", "(", "ExactLaplacianOperator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.src.spin.ExactLaplacianOperator.build_op": [[320, 330], ["isinstance", "spin.laplacian", "spin._covariance"], "methods", ["home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.src.spin.laplacian", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.src.spin._covariance"], ["", "def", "build_op", "(", "self", ",", "x", ")", ":", "\n", "    ", "\"\"\"Builds operator from a builder f'n for the network 'f' and data 'x'.\"\"\"", "\n", "\n", "if", "isinstance", "(", "self", ".", "f", ",", "tuple", ")", ":", "\n", "      ", "f", "=", "self", ".", "f", "[", "0", "]", "\n", "", "else", ":", "\n", "      ", "f", "=", "self", ".", "f", "\n", "", "lapl", "=", "laplacian", "(", "f", ",", "x", ")", "\n", "self", ".", "_op", "=", "_covariance", "(", "f", ",", "lapl", ")", "\n", "return", "self", ".", "_op", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.src.spin.ExactLaplacianOperator.__lt__": [[331, 333], ["None"], "methods", ["None"], ["", "def", "__lt__", "(", "self", ",", "x", ")", ":", "\n", "    ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.src.spin.ExactLaplacianOperator.__le__": [[334, 341], ["isinstance", "isinstance", "isinstance", "isinstance"], "methods", ["None"], ["", "def", "__le__", "(", "self", ",", "x", ")", ":", "\n", "    ", "if", "isinstance", "(", "x", ",", "ScaleOperator", ")", ":", "\n", "      ", "return", "self", "<=", "x", ".", "x", "\n", "", "if", "isinstance", "(", "x", ",", "AddOperator", ")", ":", "\n", "      ", "return", "self", "<=", "x", ".", "x", "or", "self", "<=", "x", ".", "y", "\n", "", "return", "(", "isinstance", "(", "x", ",", "LaplacianOperator", ")", "or", "\n", "isinstance", "(", "x", ",", "ExactLaplacianOperator", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.src.spin.ExactLaplacianOperator.__gt__": [[342, 344], ["None"], "methods", ["None"], ["", "def", "__gt__", "(", "self", ",", "x", ")", ":", "\n", "    ", "return", "not", "self", "<=", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.src.spin.ExactLaplacianOperator.__ge__": [[345, 347], ["None"], "methods", ["None"], ["", "def", "__ge__", "(", "self", ",", "x", ")", ":", "\n", "    ", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.src.spin.DiagonalOperator.__init__": [[352, 355], ["spin.LinearOperator.__init__"], "methods", ["home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.src.spin.SpectralNetwork.__init__"], ["def", "__init__", "(", "self", ",", "builder", ")", ":", "\n", "    ", "super", "(", "DiagonalOperator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_builder", "=", "builder", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.src.spin.DiagonalOperator.build_op": [[356, 365], ["spin.DiagonalOperator._builder", "isinstance", "spin._covariance", "spin._covariance"], "methods", ["home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.src.spin._covariance", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.src.spin._covariance"], ["", "def", "build_op", "(", "self", ",", "x", ")", ":", "\n", "    ", "kx", "=", "self", ".", "_builder", "(", "x", ")", "\n", "\n", "if", "isinstance", "(", "self", ".", "f", ",", "tuple", ")", ":", "\n", "      ", "self", ".", "_op", "=", "_covariance", "(", "self", ".", "f", "[", "0", "]", ",", "kx", "*", "self", ".", "f", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "      ", "self", ".", "_op", "=", "_covariance", "(", "self", ".", "f", ",", "kx", "*", "self", ".", "f", ")", "\n", "\n", "", "return", "self", ".", "_op", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.src.spin.KernelOperator.__init__": [[370, 373], ["spin.LinearOperator.__init__"], "methods", ["home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.src.spin.SpectralNetwork.__init__"], ["def", "__init__", "(", "self", ",", "kernel", ")", ":", "\n", "    ", "super", "(", "KernelOperator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_kernel", "=", "kernel", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.src.spin.KernelOperator.build_op": [[374, 380], ["tensorflow.split", "tensorflow.split", "spin.KernelOperator._kernel", "spin._covariance"], "methods", ["home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.src.spin._covariance"], ["", "def", "build_op", "(", "self", ",", "x", ")", ":", "\n", "    ", "x1", ",", "x2", "=", "tf", ".", "split", "(", "x", ",", "2", ",", "axis", "=", "0", ")", "\n", "fx1", ",", "fx2", "=", "tf", ".", "split", "(", "self", ".", "f", ",", "2", ",", "axis", "=", "0", ")", "\n", "kval", "=", "self", ".", "_kernel", "(", "x1", ",", "x2", ")", "\n", "self", ".", "_op", "=", "_covariance", "(", "fx1", ",", "kval", "*", "fx2", ")", "\n", "return", "self", ".", "_op", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.src.spin.SlownessOperator.build_op": [[385, 389], ["spin._covariance"], "methods", ["home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.src.spin._covariance"], ["def", "build_op", "(", "self", ",", "x", ")", ":", "\n", "    ", "diff", "=", "self", ".", "f", "[", ":", "-", "1", "]", "-", "self", ".", "f", "[", "1", ":", "]", "\n", "self", ".", "_op", "=", "_covariance", "(", "diff", ",", "diff", ")", "\n", "return", "self", ".", "_op", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.src.spin.SpectralNetwork.__init__": [[394, 463], ["tensorflow.placeholder", "spin.SpectralNetwork._covariances", "spin.SpectralNetwork._training_update", "spin._collapse_first_dim", "network.set_shape", "zip", "tensorflow.expand_dims", "network", "tensorflow.python.ops.parallel_for.jacobian", "tensorflow.python.ops.parallel_for.pfor", "tensorflow.python.ops.parallel_for.for_loop", "NotImplementedError", "spin._collapse_first_dim", "j.set_shape", "tensorflow.gather", "network", "len", "network.shape.as_list", "p.shape.as_list"], "methods", ["home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.src.spin.SpectralNetwork._covariances", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.src.spin.SpectralNetwork._training_update", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.src.spin._collapse_first_dim", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.src.spin._collapse_first_dim"], ["def", "__init__", "(", "self", ",", "operator", ",", "network", ",", "data", ",", "params", ",", "batch_size", ",", "\n", "decay", "=", "0.0", ",", "use_pfor", "=", "True", ",", "per_example", "=", "False", ")", ":", "\n", "    ", "\"\"\"Creates all ops and variables required to train SpIN.\n\n    Args:\n      operator: The linear operator to diagonalize.\n      network: A function that returns the TensorFlow op for the output of the\n        spectral inference network when provided an op for the input.\n      data: A TensorFlow op for the input to the spectral inference network.\n      params: The trainable parameters of the model built by 'network'.\n      decay (optional): The decay parameter for the moving average of the\n        network covariance and Jacobian.\n      use_pfor (optional): If true, use the parallel_for package to compute\n        Jacobians. This is often faster but has higher memory overhead.\n      per_example (optional): If true, computes the Jacobian of the network\n        output covariance using a more complicated but often faster method.\n        This interacts badly with anything that uses custom_gradients, so needs\n        to be avoided for some code branches.\n    \"\"\"", "\n", "self", ".", "operator", "=", "operator", "\n", "self", ".", "data", "=", "data", "\n", "self", ".", "batch_data", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "[", "batch_size", ",", "data", ".", "shape", "[", "1", "]", "]", ")", "\n", "self", ".", "params", "=", "params", "\n", "self", ".", "decay", "=", "decay", "\n", "self", ".", "use_pfor", "=", "use_pfor", "\n", "self", ".", "per_example", "=", "per_example", "\n", "\n", "if", "per_example", "and", "decay", "!=", "0.0", ":", "\n", "      ", "def", "network_builder", "(", "x", ")", ":", "\n", "        ", "\"\"\"Wraps the function 'network' to compute per-example.\"\"\"", "\n", "def", "loop_fn", "(", "i", ")", ":", "\n", "          ", "x_i", "=", "tf", ".", "expand_dims", "(", "tf", ".", "gather", "(", "x", ",", "i", ")", ",", "0", ")", "\n", "features", "=", "network", "(", "x_i", ")", "\n", "jac", "=", "pfor", ".", "jacobian", "(", "features", ",", "params", ",", "use_pfor", "=", "use_pfor", ")", "\n", "return", "features", ",", "jac", "\n", "\n", "", "if", "use_pfor", ":", "\n", "          ", "features", ",", "jac", "=", "pfor", ".", "pfor", "(", "loop_fn", ",", "x", ".", "shape", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "          ", "loop_fn_dtypes", "=", "[", "tf", ".", "float32", ",", "[", "tf", ".", "float32", "]", "*", "len", "(", "params", ")", "]", "\n", "features", ",", "jac", "=", "pfor", ".", "for_loop", "(", "loop_fn", ",", "loop_fn_dtypes", ",", "data", ".", "shape", "[", "0", "]", ")", "\n", "raise", "NotImplementedError", "(", "\n", "'use_pfor=False + per_example=True is not yet working.'", ")", "\n", "", "features", "=", "_collapse_first_dim", "(", "features", ")", "\n", "features", ".", "set_shape", "(", "network", "(", "x", ")", ".", "shape", ")", "\n", "jac", "=", "[", "_collapse_first_dim", "(", "y", ")", "for", "y", "in", "jac", "]", "\n", "for", "p", ",", "j", "in", "zip", "(", "params", ",", "jac", ")", ":", "\n", "          ", "j", ".", "set_shape", "(", "features", ".", "shape", ".", "as_list", "(", ")", "+", "p", ".", "shape", ".", "as_list", "(", ")", ")", "\n", "# Note: setting rank=2 so that we use matmul for covariance below", "\n", "# instead of batch_matmul.", "\n", "", "return", "features", ",", "jac", "\n", "", "", "else", ":", "\n", "      ", "network_builder", "=", "network", "\n", "", "self", ".", "network_builder", "=", "network_builder", "\n", "\n", "self", ".", "features", ",", "self", ".", "sigma", ",", "self", ".", "pi", "=", "self", ".", "_covariances", "(", "\n", "operator", ",", "network_builder", ",", "self", ".", "batch_data", ")", "\n", "feat_jac", "=", "None", "\n", "if", "per_example", "and", "decay", "!=", "0.0", ":", "\n", "      ", "feat_jac", "=", "operator", ".", "jac", "\n", "", "outputs", "=", "self", ".", "_training_update", "(", "\n", "self", ".", "sigma", ",", "\n", "self", ".", "pi", ",", "\n", "self", ".", "params", ",", "\n", "decay", "=", "decay", ",", "\n", "use_pfor", "=", "use_pfor", ",", "\n", "features", "=", "self", ".", "features", ",", "\n", "jac", "=", "feat_jac", ")", "\n", "self", ".", "loss", ",", "self", ".", "gradients", ",", "self", ".", "eigenvalues", ",", "self", ".", "chol", "=", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.src.spin.SpectralNetwork._moving_average": [[464, 486], ["isinstance", "tensorflow.assign", "tensorflow.Variable", "tensorflow.Variable", "spin.SpectralNetwork._moving_average", "len", "tensorflow.eye", "tensorflow.zeros_like", "tensorflow.reshape", "x.shape.as_list"], "methods", ["home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.src.spin.SpectralNetwork._moving_average"], ["", "def", "_moving_average", "(", "self", ",", "x", ",", "c", ")", ":", "\n", "    ", "\"\"\"Creates moving average operation.\n\n    Args:\n      x: The tensor or list of tensors of which to take a moving average.\n      c: The decay constant of the moving average, between 0 and 1.\n        0.0 = the moving average is constant\n        1.0 = the moving averge has no memory\n\n    Returns:\n      ma: Moving average variables.\n      ma_update: Op to update moving average.\n    \"\"\"", "\n", "if", "isinstance", "(", "x", ",", "list", ")", ":", "\n", "      ", "mas", "=", "[", "self", ".", "_moving_average", "(", "y", ",", "c", ")", "for", "y", "in", "x", "]", "\n", "return", "[", "m", "[", "0", "]", "for", "m", "in", "mas", "]", ",", "[", "m", "[", "1", "]", "for", "m", "in", "mas", "]", "\n", "", "if", "len", "(", "x", ".", "shape", ")", "==", "2", "and", "x", ".", "shape", "[", "0", "]", "==", "x", ".", "shape", "[", "1", "]", ":", "\n", "      ", "ma", "=", "tf", ".", "Variable", "(", "tf", ".", "eye", "(", "x", ".", "shape", ".", "as_list", "(", ")", "[", "0", "]", ")", ",", "trainable", "=", "False", ")", "\n", "", "else", ":", "\n", "      ", "ma", "=", "tf", ".", "Variable", "(", "tf", ".", "zeros_like", "(", "x", ")", ",", "trainable", "=", "False", ")", "\n", "", "ma_update", "=", "tf", ".", "assign", "(", "ma", ",", "(", "1", "-", "c", ")", "*", "ma", "+", "c", "*", "tf", ".", "reshape", "(", "x", ",", "ma", ".", "shape", ")", ")", "\n", "return", "ma", ",", "ma_update", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.src.spin.SpectralNetwork._covariances": [[487, 507], ["operator.build", "spin._covariance", "_covariance.set_shape", "pi.set_shape"], "methods", ["home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.src.spin.LinearOperator.build", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.src.spin._covariance"], ["", "def", "_covariances", "(", "self", ",", "operator", ",", "network", ",", "x", ")", ":", "\n", "    ", "\"\"\"Constructs loss with custom gradient for SpIN.\n\n    Args:\n      operator: The linear operator to diagonalize.\n      network: A function that returns the TensorFlow op for the output of the\n        spectral inference network when provided an op for the input.\n      x: The data used as input to network.\n\n    Returns:\n      u: The output of the spectral inference network.\n      sigma: The covariance of the outputs of the network.\n      pi: The matrix of network output covariances multiplied by the linear\n        operator to diagonalize. See paper for explicit definition.\n    \"\"\"", "\n", "u", ",", "pi", "=", "operator", ".", "build", "(", "network", ",", "x", ")", "\n", "sigma", "=", "_covariance", "(", "u", ",", "u", ")", "\n", "sigma", ".", "set_shape", "(", "(", "u", ".", "shape", "[", "1", "]", ",", "u", ".", "shape", "[", "1", "]", ")", ")", "\n", "pi", ".", "set_shape", "(", "(", "u", ".", "shape", "[", "1", "]", ",", "u", ".", "shape", "[", "1", "]", ")", ")", "\n", "return", "u", ",", "sigma", ",", "pi", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.src.spin.SpectralNetwork._training_update": [[508, 570], ["isinstance", "spin._objective", "tensorflow.gradients", "zip", "spin.SpectralNetwork._moving_average", "spin.SpectralNetwork._moving_average", "tensorflow.reduce_prod", "tensorflow.python.ops.parallel_for.jacobian", "tensorflow.python.ops.parallel_for.jacobian", "sj.set_shape", "tensorflow.shape", "tensorflow.control_dependencies", "spin._objective", "zip", "tensorflow.tensordot", "tensorflow.gradients", "tensorflow.gradients", "tensorflow.gradients.append", "sigma.shape.as_list", "p.shape.as_list", "tensorflow.reshape", "tensorflow.matmul", "tensorflow.reshape", "tensorflow.reshape"], "methods", ["home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.src.spin._objective", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.src.spin.SpectralNetwork._moving_average", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.src.spin.SpectralNetwork._moving_average", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.src.spin._objective"], ["", "def", "_training_update", "(", "self", ",", "\n", "sigma", ",", "\n", "pi", ",", "\n", "params", ",", "\n", "decay", "=", "0.0", ",", "\n", "use_pfor", "=", "False", ",", "\n", "features", "=", "None", ",", "\n", "jac", "=", "None", ")", ":", "\n", "    ", "\"\"\"Makes gradient and moving averages.\n\n    Args:\n      sigma: The covariance of the outputs of the network.\n      pi: The matrix of network output covariances multiplied by the linear\n        operator to diagonalize. See paper for explicit definition.\n      params: The trainable parameters.\n      decay (optional): The decay parameter for the moving average of the\n        network covariance and Jacobian.\n      use_pfor (optional): If true, use the parallel_for package to compute\n        Jacobians. This is often faster but has higher memory overhead.\n      features (optional): The output features of the spectral inference\n        network. Only necessary if per_example=True.\n      jac (optional): The Jacobian of the network. Only necessary if\n        per_example=True.\n\n    Returns:\n      loss: The loss function for SpIN - the sum of eigenvalues.\n      gradients: The approximate gradient of the loss using moving averages.\n      eigvals: The full array of eigenvalues, rather than just their sum.\n      chol: The Cholesky decomposition of the covariance of the network outputs,\n        which is needed to demix the network outputs.\n    \"\"\"", "\n", "if", "isinstance", "(", "decay", ",", "float", ")", ":", "\n", "      ", "assert", "decay", ">=", "0.0", "and", "decay", "<", "1.0", "\n", "", "if", "decay", "==", "0.0", ":", "\n", "# Equivalent to not using the moving averages at all.", "\n", "      ", "loss", ",", "eigval", ",", "chol", "=", "_objective", "(", "sigma", ",", "pi", ")", "# pylint: disable=unbalanced-tuple-unpacking", "\n", "gradients", "=", "tf", ".", "gradients", "(", "loss", ",", "params", ")", "\n", "", "else", ":", "\n", "      ", "if", "jac", "is", "not", "None", ":", "\n", "        ", "sig_feat_jac", "=", "pfor", ".", "jacobian", "(", "sigma", ",", "features", ",", "use_pfor", "=", "use_pfor", ")", "\n", "sigma_jac", "=", "[", "tf", ".", "tensordot", "(", "sig_feat_jac", ",", "y", ",", "axes", "=", "2", ")", "for", "y", "in", "jac", "]", "\n", "", "else", ":", "\n", "        ", "sigma_jac", "=", "pfor", ".", "jacobian", "(", "sigma", ",", "params", ",", "use_pfor", "=", "use_pfor", ")", "\n", "", "for", "p", ",", "sj", "in", "zip", "(", "params", ",", "sigma_jac", ")", ":", "\n", "        ", "sj", ".", "set_shape", "(", "sigma", ".", "shape", ".", "as_list", "(", ")", "+", "p", ".", "shape", ".", "as_list", "(", ")", ")", "\n", "\n", "", "sigma_avg", ",", "update_sigma", "=", "self", ".", "_moving_average", "(", "sigma", ",", "decay", ")", "\n", "sigma_jac_avg", ",", "update_sigma_jac", "=", "self", ".", "_moving_average", "(", "sigma_jac", ",", "decay", ")", "\n", "n", "=", "tf", ".", "reduce_prod", "(", "tf", ".", "shape", "(", "sigma", ")", ")", "\n", "with", "tf", ".", "control_dependencies", "(", "update_sigma_jac", "+", "[", "update_sigma", "]", ")", ":", "\n", "        ", "loss", ",", "eigval", ",", "chol", "=", "_objective", "(", "sigma_avg", ",", "pi", ")", "# pylint: disable=unbalanced-tuple-unpacking", "\n", "sigma_back", "=", "tf", ".", "gradients", "(", "loss", ",", "sigma_avg", ")", "[", "0", "]", "\n", "\n", "gradients", "=", "[", "]", "\n", "for", "s", ",", "p", ",", "g", "in", "zip", "(", "sigma_jac_avg", ",", "params", ",", "tf", ".", "gradients", "(", "loss", ",", "params", ")", ")", ":", "\n", "          ", "gradients", ".", "append", "(", "\n", "tf", ".", "reshape", "(", "\n", "tf", ".", "matmul", "(", "\n", "tf", ".", "reshape", "(", "sigma_back", ",", "\n", "(", "1", ",", "n", ")", ")", ",", "tf", ".", "reshape", "(", "s", ",", "(", "n", ",", "-", "1", ")", ")", ")", ",", "p", ".", "shape", ")", "+", "g", ")", "\n", "\n", "", "", "", "return", "loss", ",", "gradients", ",", "eigval", ",", "chol", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.src.spin.SpectralNetwork.train": [[571, 666], ["tensorflow.train.Saver", "absl.logging.info", "tensorflow.assign", "optim.apply_gradients", "matplotlib.ion", "tensorflow.Variable", "spin.SpectralNetwork.network_builder", "isinstance", "tensorflow.transpose", "spin.SpectralNetwork.features.shape.as_list", "zip", "tensorflow.Session", "sess.run", "range", "sess.run", "ValueError", "tensorflow.matrix_triangular_solve", "tensorflow.global_variables_initializer", "sess.run", "numpy.random.choice", "sess.run", "dict", "absl.logging.info", "tensorflow.transpose", "tensorflow.train.Saver.save", "sess.run", "sess.run", "matplotlib.show", "matplotlib.pause"], "methods", ["None"], ["", "def", "train", "(", "\n", "self", ",", "\n", "optim", ",", "\n", "iterations", ",", "\n", "logging_config", ",", "\n", "stats_hooks", ",", "\n", "plotting_hooks", "=", "None", ",", "\n", "show_plots", "=", "False", ",", "\n", "global_step", "=", "None", ",", "\n", "data_for_plotting", "=", "None", ")", ":", "\n", "    ", "\"\"\"Training loop for SpIN, with hooks for logging and plotting.\n\n    Args:\n      optim: The TensorFlow optimizer to minimize the SpIN loss.\n      iterations: The number of iterations to train for.\n      logging_config: A dictionary for logging. The field 'config' is logged\n        at the beginning of training, with metadata about the run, while the\n        fields 'saver_path' and 'saver_name' are for setting up checkpointing\n        and 'log_image_every' and 'save_params_every' set the number of\n        iterations after which logging and checkpoint saving occur.\n      stats_hooks: A dictionary with two fields, 'create' and 'update', both of\n        which are functions that take no arguments. 'create' sets up the data\n        structures for logging stats while 'update' updates them.\n      plotting_hooks (optional): If show_plots is true, this dictionary must be\n        provided. Has the same format as 'stats_hooks'.\n      show_plots (optional): A boolean. If true, will plot results to the GUI.\n      global_step (optional): A TensorFlow op that tracks the number of\n        iterations. If none is provided, one is created.\n      data_for_plotting (optional): If different data is needed for updating\n        plots than for training, this op will return that data.\n\n    Returns:\n      A dictionary of statistics accumulated during the training run.\n    \"\"\"", "\n", "\n", "if", "show_plots", ":", "\n", "      ", "plt", ".", "ion", "(", ")", "\n", "if", "plotting_hooks", "is", "None", ":", "\n", "        ", "raise", "ValueError", "(", "'Plotting hooks are required if show_plots=True'", ")", "\n", "", "plots", "=", "plotting_hooks", "[", "'create'", "]", "(", ")", "\n", "\n", "", "saver_path", "=", "logging_config", "[", "'saver_path'", "]", "\n", "saver", "=", "tf", ".", "train", ".", "Saver", "(", "var_list", "=", "self", ".", "params", ")", "\n", "\n", "if", "global_step", "is", "None", ":", "\n", "      ", "global_step", "=", "tf", ".", "Variable", "(", "0.0", ",", "trainable", "=", "False", ",", "name", "=", "'global_step'", ")", "\n", "\n", "", "if", "data_for_plotting", "is", "not", "None", ":", "\n", "      ", "features_for_plotting", "=", "self", ".", "network_builder", "(", "data_for_plotting", ")", "\n", "# If per_example is true, the network builder will return a", "\n", "# (features, jacobian) tuple. For plotting, we can discard the latter.", "\n", "if", "isinstance", "(", "features_for_plotting", ",", "tuple", ")", ":", "\n", "        ", "features_for_plotting", "=", "features_for_plotting", "[", "0", "]", "\n", "", "features_for_plotting", "=", "tf", ".", "transpose", "(", "\n", "tf", ".", "matrix_triangular_solve", "(", "self", ".", "chol", ",", "\n", "tf", ".", "transpose", "(", "features_for_plotting", ")", ")", ")", "\n", "\n", "", "neig", "=", "self", ".", "features", ".", "shape", ".", "as_list", "(", ")", "[", "-", "1", "]", "\n", "stats", "=", "stats_hooks", "[", "'create'", "]", "(", "iterations", ",", "neig", ")", "\n", "\n", "logging", ".", "info", "(", "logging_config", "[", "'config'", "]", ")", "\n", "\n", "update_global_step", "=", "tf", ".", "assign", "(", "global_step", ",", "global_step", "+", "1", ")", "\n", "step", "=", "optim", ".", "apply_gradients", "(", "zip", "(", "self", ".", "gradients", ",", "self", ".", "params", ")", ")", "\n", "\n", "with", "tf", ".", "Session", "(", ")", "as", "sess", ":", "\n", "      ", "sess", ".", "run", "(", "tf", ".", "global_variables_initializer", "(", ")", ")", "\n", "# print('Initialized variables')", "\n", "for", "t", "in", "range", "(", "iterations", ")", ":", "\n", "        ", "sess", ".", "run", "(", "update_global_step", ")", "\n", "idx", "=", "np", ".", "random", ".", "choice", "(", "self", ".", "data", ".", "shape", "[", "0", "]", ",", "self", ".", "batch_data", ".", "shape", "[", "0", "]", ",", "replace", "=", "False", ")", "\n", "loss_", ",", "eigenvalues_", ",", "_", "=", "sess", ".", "run", "(", "[", "self", ".", "loss", ",", "self", ".", "eigenvalues", ",", "step", "]", ",", "\n", "feed_dict", "=", "{", "self", ".", "batch_data", ":", "self", ".", "data", "[", "idx", "]", "}", ")", "\n", "stats_hooks", "[", "'update'", "]", "(", "t", ",", "loss_", ",", "eigenvalues_", ",", "**", "stats", ")", "\n", "current_stats", "=", "dict", "(", "(", "key", ",", "stats", "[", "key", "]", "[", "t", "]", ")", "for", "key", "in", "stats", ")", "\n", "\n", "logging", ".", "info", "(", "current_stats", ")", "\n", "\n", "if", "t", "%", "logging_config", "[", "'save_params_every'", "]", "==", "0", ":", "\n", "          ", "saver", ".", "save", "(", "sess", ",", "\n", "saver_path", "+", "'/'", "+", "logging_config", "[", "'saver_name'", "]", ",", "\n", "global_step", "=", "t", ")", "\n", "\n", "", "if", "t", "%", "logging_config", "[", "'log_image_every'", "]", "==", "0", ":", "\n", "          ", "if", "data_for_plotting", "is", "not", "None", "and", "show_plots", ":", "\n", "            ", "outputs", "=", "sess", ".", "run", "(", "features_for_plotting", ")", "\n", "inputs", "=", "sess", ".", "run", "(", "data_for_plotting", ")", "\n", "plotting_hooks", "[", "'update'", "]", "(", "t", ",", "outputs", ",", "inputs", ",", "*", "plots", ",", "**", "stats", ")", "\n", "\n", "plt", ".", "show", "(", ")", "\n", "plt", ".", "pause", "(", "0.01", ")", "\n", "\n", "", "", "", "outputs", "=", "sess", ".", "run", "(", "features_for_plotting", ",", "feed_dict", "=", "{", "self", ".", "batch_data", ":", "self", ".", "data", "[", "idx", "]", "}", ")", "\n", "\n", "", "return", "stats", ",", "outputs", "\n", "", "", ""]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.src.spin._collapse_first_dim": [[36, 39], ["tensorflow.concat", "tensorflow.reshape", "tensorflow.shape"], "function", ["None"], ["def", "_collapse_first_dim", "(", "x", ")", ":", "\n", "  ", "new_shape", "=", "tf", ".", "concat", "(", "[", "[", "-", "1", "]", ",", "tf", ".", "shape", "(", "x", ")", "[", "2", ":", "]", "]", ",", "axis", "=", "0", ")", "\n", "return", "tf", ".", "reshape", "(", "x", ",", "new_shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.src.spin._objective_grad": [[41, 56], ["tensorflow.name_scope", "tensorflow.cholesky", "tensorflow.linalg.inv", "tensorflow.matmul", "tensorflow.diag", "tensorflow.matrix_band_part", "tensorflow.matmul", "tensorflow.matrix_diag_part", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.eye", "xx.shape.as_list"], "function", ["None"], ["", "def", "_objective_grad", "(", "xx", ",", "obj", ",", "grad_loss", ",", "grad_eigval", ",", "grad_chol", ")", ":", "\n", "  ", "\"\"\"Symbolic form of the gradient of the objective with stop_gradients.\"\"\"", "\n", "del", "grad_eigval", "\n", "del", "grad_chol", "\n", "with", "tf", ".", "name_scope", "(", "'objective_grad'", ")", ":", "\n", "    ", "chol", "=", "tf", ".", "cholesky", "(", "xx", "+", "tf", ".", "eye", "(", "xx", ".", "shape", ".", "as_list", "(", ")", "[", "0", "]", ")", "*", "1e-3", ")", "\n", "choli", "=", "tf", ".", "linalg", ".", "inv", "(", "chol", ")", "\n", "rq", "=", "tf", ".", "matmul", "(", "choli", ",", "tf", ".", "matmul", "(", "obj", ",", "choli", ",", "transpose_b", "=", "True", ")", ")", "\n", "\n", "dl", "=", "tf", ".", "diag", "(", "tf", ".", "matrix_diag_part", "(", "choli", ")", ")", "\n", "triu", "=", "tf", ".", "matrix_band_part", "(", "tf", ".", "matmul", "(", "rq", ",", "dl", ")", ",", "0", ",", "-", "1", ")", "\n", "gxx", "=", "1.0", "*", "tf", ".", "matmul", "(", "choli", ",", "triu", ",", "transpose_a", "=", "True", ")", "\n", "gobj", "=", "-", "tf", ".", "matmul", "(", "choli", ",", "dl", ",", "transpose_a", "=", "True", ")", "\n", "\n", "return", "grad_loss", "*", "gxx", ",", "grad_loss", "*", "gobj", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.src.spin._objective": [[58, 70], ["tensorflow.name_scope", "tensorflow.cholesky", "tensorflow.linalg.inv", "tensorflow.matmul", "tensorflow.matrix_diag_part", "tensorflow.trace", "functools.partial", "tensorflow.matmul", "tensorflow.eye", "xx.shape.as_list"], "function", ["None"], ["", "", "@", "tf", ".", "custom_gradient", "\n", "def", "_objective", "(", "xx", ",", "obj", ")", ":", "\n", "  ", "\"\"\"Objective function as custom op so that we can overload gradients.\"\"\"", "\n", "with", "tf", ".", "name_scope", "(", "'objective'", ")", ":", "\n", "    ", "chol", "=", "tf", ".", "cholesky", "(", "xx", "+", "tf", ".", "eye", "(", "xx", ".", "shape", ".", "as_list", "(", ")", "[", "0", "]", ")", "*", "1e-3", ")", "\n", "choli", "=", "tf", ".", "linalg", ".", "inv", "(", "chol", ")", "\n", "\n", "rq", "=", "tf", ".", "matmul", "(", "choli", ",", "tf", ".", "matmul", "(", "obj", ",", "choli", ",", "transpose_b", "=", "True", ")", ")", "\n", "eigval", "=", "tf", ".", "matrix_diag_part", "(", "rq", ")", "\n", "loss", "=", "tf", ".", "trace", "(", "rq", ")", "\n", "grad", "=", "functools", ".", "partial", "(", "_objective_grad", ",", "xx", ",", "obj", ")", "\n", "", "return", "(", "loss", ",", "eigval", ",", "chol", ")", ",", "grad", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.src.spin._covariance": [[72, 84], ["tensorflow.name_scope", "tensorflow.matmul", "tensorflow.cast", "tensorflow.name_scope", "tensorflow.shape", "tensorflow.matmul", "tensorflow.cast", "tensorflow.matmul", "tensorflow.cast", "tensorflow.shape", "tensorflow.shape"], "function", ["None"], ["", "@", "tf", ".", "custom_gradient", "\n", "def", "_covariance", "(", "x", ",", "y", ")", ":", "\n", "  ", "\"\"\"Covariance function as custom op.\"\"\"", "\n", "with", "tf", ".", "name_scope", "(", "'covariance'", ")", ":", "\n", "    ", "cov", "=", "tf", ".", "matmul", "(", "x", ",", "y", ",", "transpose_a", "=", "True", ")", "/", "tf", ".", "cast", "(", "tf", ".", "shape", "(", "x", ")", "[", "0", "]", ",", "x", ".", "dtype", ")", "\n", "\n", "", "def", "_cov_grad", "(", "grad", ")", ":", "\n", "    ", "with", "tf", ".", "name_scope", "(", "'cov_grad'", ")", ":", "\n", "      ", "return", "(", "tf", ".", "matmul", "(", "y", ",", "grad", ")", "/", "tf", ".", "cast", "(", "tf", ".", "shape", "(", "x", ")", "[", "0", "]", ",", "x", ".", "dtype", ")", ",", "\n", "tf", ".", "matmul", "(", "x", ",", "grad", ")", "/", "tf", ".", "cast", "(", "tf", ".", "shape", "(", "x", ")", "[", "0", "]", ",", "x", ".", "dtype", ")", ")", "\n", "\n", "", "", "return", "cov", ",", "_cov_grad", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.src.spin.laplacian": [[293, 312], ["isinstance", "ValueError", "len", "tensorflow.stack", "len", "tensorflow.reshape", "range", "tensorflow.add_n", "ValueError", "spin.laplacian", "ddx.append", "range", "tensorflow.gradients", "tf.reshape.get_shape().as_list", "x.get_shape", "tensorflow.reshape", "f.shape.as_list", "tf.reshape.get_shape", "tensorflow.gradients", "x.get_shape"], "function", ["home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.src.spin.laplacian"], ["", "", "def", "laplacian", "(", "f", ",", "x", ")", ":", "\n", "  ", "\"\"\"Computes exact Laplacian of f(x). Beware - scales poorly with x.\"\"\"", "\n", "\n", "if", "isinstance", "(", "x", ",", "list", ")", ":", "\n", "    ", "raise", "ValueError", "(", "'Input to laplacian must be a single tensor'", ")", "\n", "", "if", "len", "(", "f", ".", "shape", ")", "==", "2", ":", "\n", "    ", "return", "tf", ".", "stack", "(", "\n", "[", "laplacian", "(", "f", "[", ":", ",", "i", "]", ",", "x", ")", "for", "i", "in", "range", "(", "f", ".", "shape", ".", "as_list", "(", ")", "[", "1", "]", ")", "]", ",", "axis", "=", "1", ")", "\n", "", "elif", "len", "(", "f", ".", "shape", ")", "==", "1", ":", "\n", "    ", "dx", "=", "tf", ".", "reshape", "(", "tf", ".", "gradients", "(", "f", ",", "x", ")", "[", "0", "]", ",", "\n", "(", "x", ".", "get_shape", "(", ")", "[", "0", "]", ",", "-", "1", ")", ")", "# first dim is batch", "\n", "ddx", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "dx", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "1", "]", ")", ":", "\n", "      ", "ddx", ".", "append", "(", "tf", ".", "reshape", "(", "tf", ".", "gradients", "(", "dx", "[", ":", ",", "i", "]", ",", "x", ")", "[", "0", "]", ",", "\n", "(", "x", ".", "get_shape", "(", ")", "[", "0", "]", ",", "-", "1", ")", ")", "[", ":", ",", "i", "]", ")", "\n", "", "lapl", "=", "tf", ".", "add_n", "(", "ddx", ")", "\n", "return", "lapl", "\n", "", "else", ":", "\n", "    ", "raise", "ValueError", "(", "'Shape of batch must be 1D or 2D'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.src.util.create_default_stats": [[27, 47], ["numpy.zeros", "numpy.zeros", "numpy.zeros"], "function", ["None"], ["def", "create_default_stats", "(", "iterations", ",", "neig", ")", ":", "\n", "  ", "\"\"\"Default stats creation function to be passed in as stats hook.\n\n  To be passed in to training loop and called back once the number of Eigen\n  values have been determined.\n\n  Args:\n    iterations: Number of iterations in training loop.\n    neig: Number of Eigen values to track.\n\n  Returns:\n    Dict of numpy arrays keyed by stat name.\n  \"\"\"", "\n", "losses", "=", "np", ".", "zeros", "(", "(", "iterations", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "eigenvalues", "=", "np", ".", "zeros", "(", "(", "iterations", ",", "neig", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "eigenvalues_ma", "=", "np", ".", "zeros", "(", "(", "iterations", ",", "neig", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "return", "{", "\n", "'losses'", ":", "losses", ",", "\n", "'eigenvalues'", ":", "eigenvalues", ",", "\n", "'eigenvalues_ma'", ":", "eigenvalues_ma", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.src.util.update_default_stats": [[50, 74], ["None"], "function", ["None"], ["", "def", "update_default_stats", "(", "t", ",", "current_loss", ",", "current_eigenvalues", ",", "losses", ",", "\n", "eigenvalues", ",", "eigenvalues_ma", ")", ":", "\n", "  ", "\"\"\"Update callback for the default stats created above.\n\n  To be passed into training loop and called back once per training step.\n  Updates total collections with stats from specified training step.\n\n  Args:\n    t: Training step index.\n    current_loss: Loss at training step `t`.\n    current_eigenvalues: Eigen values at training step `t`.\n    losses: Collection of all losses, to be updated at index `t`.\n    eigenvalues: Collection of all Eigen values, to be updated at index `t`.\n    eigenvalues_ma: Collection of moving averages for Eigen values, to be\n      updated at index `t`.\n  \"\"\"", "\n", "losses", "[", "t", "]", "=", "current_loss", "\n", "eigenvalues", "[", "t", "]", "=", "current_eigenvalues", "\n", "decay", "=", "0.01", "\n", "if", "t", ">", "0", ":", "\n", "    ", "eigenvalues_ma", "[", "t", "]", "=", "(", "\n", "decay", "*", "current_eigenvalues", "+", "(", "1", "-", "decay", ")", "*", "eigenvalues_ma", "[", "t", "-", "1", "]", ")", "\n", "", "else", ":", "\n", "    ", "eigenvalues_ma", "[", "t", "]", "=", "current_eigenvalues", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.src.util._my_softplus": [[76, 81], ["tensorflow.nn.softplus", "tensorflow.nn.sigmoid"], "function", ["None"], ["", "", "@", "tf", ".", "custom_gradient", "\n", "def", "_my_softplus", "(", "x", ")", ":", "\n", "  ", "def", "grad", "(", "dy", ")", ":", "\n", "    ", "return", "tf", ".", "nn", ".", "sigmoid", "(", "x", ")", "*", "dy", "\n", "", "return", "tf", ".", "nn", ".", "softplus", "(", "x", ")", ",", "grad", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.src.util._add_mask": [[83, 91], ["six.moves.range", "tensorflow.maximum", "tensorflow.expand_dims", "x.shape.as_list", "tensorflow.sqrt"], "function", ["None"], ["", "def", "_add_mask", "(", "x", ",", "y", ",", "lim", ")", ":", "\n", "  ", "\"\"\"Makes boundary conditions for network (fixed box).\"\"\"", "\n", "# Force the wavefunction to zero at the boundaries of the box defined by", "\n", "# [-lim, lim].", "\n", "mask", "=", "1.0", "\n", "for", "i", "in", "range", "(", "x", ".", "shape", ".", "as_list", "(", ")", "[", "1", "]", ")", ":", "\n", "    ", "mask", "*=", "tf", ".", "maximum", "(", "(", "tf", ".", "sqrt", "(", "2", "*", "lim", "**", "2", "-", "x", "[", ":", ",", "i", "]", "**", "2", ")", "-", "lim", ")", "/", "lim", ",", "0", ")", "\n", "", "return", "tf", ".", "expand_dims", "(", "mask", ",", "-", "1", ")", "*", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.src.util.make_network": [[93, 119], ["six.moves.range", "my_softplus", "tensorflow.matmul", "util._add_mask", "len", "tensorflow.matmul"], "function", ["home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.src.util._add_mask"], ["", "def", "make_network", "(", "x", ",", "hid", ",", "ws", ",", "bs", ",", "apply_boundary", ",", "lim", ",", "custom_softplus", "=", "False", ")", ":", "\n", "  ", "\"\"\"Constructs network and loss function.\n\n  Args:\n    x: Input to the network.\n    hid: List of shapes of the hidden layers of the networks.\n    ws: List of weights of the network.\n    bs: List of biases of the network.\n    apply_boundary: If true, force network output to be zero at boundary.\n    lim: The limit of the network, if apply_boundary is true.\n    custom_softplus (optional):\n\n  Returns:\n    Output of multi-layer perception network.\n  \"\"\"", "\n", "inp", "=", "x", "\n", "my_softplus", "=", "_my_softplus", "if", "custom_softplus", "else", "tf", ".", "nn", ".", "softplus", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "hid", ")", "-", "1", ")", ":", "\n", "    ", "inp", "=", "my_softplus", "(", "tf", ".", "matmul", "(", "inp", ",", "ws", "[", "i", "]", ")", "+", "bs", "[", "i", "]", ")", "\n", "\n", "", "y", "=", "tf", ".", "matmul", "(", "inp", ",", "ws", "[", "-", "1", "]", ")", "+", "bs", "[", "-", "1", "]", "\n", "if", "apply_boundary", ":", "\n", "    ", "return", "_add_mask", "(", "x", ",", "y", ",", "lim", ")", "\n", "", "else", ":", "\n", "    ", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.src.util.make_conv_network": [[121, 157], ["len", "six.moves.range", "tensorflow.ones", "tensorflow.concat", "tensorflow.matmul", "tensorflow.shape", "len", "tensorflow.nn.relu", "tensorflow.nn.relu", "len", "tensorflow.reshape", "tensorflow.nn.conv2d", "tensorflow.matmul", "numpy.prod"], "function", ["None"], ["", "", "def", "make_conv_network", "(", "x", ",", "conv_stride", ",", "paddings", ",", "ws", ",", "bs", ")", ":", "\n", "  ", "\"\"\"Creates convolutional network.\n\n  Args:\n    x: Input to the convnet.\n    conv_stride: List of strides of the convolutions, one per layer.\n    paddings: List of paddings of the convolutions, one per layer.\n    ws: List of weights. Conv or fully-connected inferred by shape.\n    bs: List of biases.\n\n  Returns:\n    Output of convolutional neural network.\n  \"\"\"", "\n", "inp", "=", "x", "\n", "nh", "=", "len", "(", "ws", ")", "\n", "for", "i", "in", "range", "(", "nh", "-", "1", ")", ":", "\n", "    ", "weight", "=", "ws", "[", "i", "]", "\n", "\n", "if", "len", "(", "weight", ".", "shape", ")", "==", "4", ":", "\n", "      ", "stride", "=", "conv_stride", "[", "i", "]", "\n", "inp", "=", "tf", ".", "nn", ".", "relu", "(", "tf", ".", "nn", ".", "conv2d", "(", "inp", ",", "weight", ",", "[", "1", ",", "stride", ",", "stride", ",", "1", "]", ",", "\n", "padding", "=", "paddings", "[", "i", "]", ")", "+", "bs", "[", "i", "]", ")", "\n", "# flatten if this is the last conv layer", "\n", "if", "len", "(", "ws", "[", "i", "+", "1", "]", ".", "shape", ")", "==", "2", ":", "\n", "        ", "inp", "=", "tf", ".", "reshape", "(", "inp", ",", "[", "inp", ".", "shape", "[", "0", "]", ",", "np", ".", "prod", "(", "inp", ".", "shape", "[", "1", ":", "]", ")", "]", ")", "\n", "\n", "", "", "else", ":", "\n", "      ", "inp", "=", "tf", ".", "nn", ".", "relu", "(", "tf", ".", "matmul", "(", "inp", ",", "weight", ")", "+", "bs", "[", "i", "]", ")", "\n", "\n", "", "", "features", "=", "tf", ".", "matmul", "(", "inp", ",", "ws", "[", "-", "1", "]", ")", "+", "bs", "[", "-", "1", "]", "\n", "\n", "dim0", "=", "tf", ".", "shape", "(", "inp", ")", "[", "0", "]", "\n", "const_feature", "=", "tf", ".", "ones", "(", "(", "dim0", ",", "1", ")", ")", "\n", "features", "=", "tf", ".", "concat", "(", "(", "const_feature", ",", "features", ")", ",", "1", ")", "\n", "\n", "return", "features", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.src.util.grid_reader": [[159, 189], ["numpy.linspace", "numpy.linspace", "numpy.array().T.reshape", "tensorflow.constant", "ValueError", "six.moves.range", "len", "numpy.meshgrid", "numpy.meshgrid", "numpy.linspace", "numpy.array"], "function", ["None"], ["", "def", "grid_reader", "(", "dim", ",", "lim", ",", "points", "=", "128", ")", ":", "\n", "  ", "\"\"\"Creates a reader function for generating a grid of position vectors.\n\n  Args:\n    dim: Dimension of position vector.\n    lim: Limit of the cell. Each vector component is in [-lim, lim].\n    points: Number of points to generate along each axis.\n\n  Returns:\n    A tensorflow op containing a constant grid of the n-dim box defined by\n    [-lim, lim] along each axis. A 2D plane defined by hyperplane is generated\n    for n>2-D systems.\n\n  Raises:\n    ValueError: len(hyperplane) + 2 != ndim.\n  \"\"\"", "\n", "hyperplane", "=", "[", "0", "for", "_", "in", "range", "(", "dim", "-", "2", ")", "]", "\n", "if", "len", "(", "hyperplane", ")", "+", "2", "!=", "dim", ":", "\n", "    ", "raise", "ValueError", "(", "'Incorrect number of hyperplane values specified.'", ")", "\n", "", "xx", "=", "np", ".", "linspace", "(", "-", "lim", ",", "lim", ",", "points", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "yy", "=", "np", ".", "linspace", "(", "-", "lim", ",", "lim", ",", "points", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "if", "dim", "==", "1", ":", "\n", "    ", "grid", "=", "xx", "\n", "", "elif", "dim", "==", "2", ":", "\n", "    ", "grid", "=", "np", ".", "meshgrid", "(", "xx", ",", "yy", ")", "\n", "", "else", ":", "\n", "    ", "zz", "=", "[", "np", ".", "linspace", "(", "z_i", ",", "z_i", ",", "1", ",", "dtype", "=", "np", ".", "float32", ")", "for", "z_i", "in", "hyperplane", "]", "\n", "grid", "=", "np", ".", "meshgrid", "(", "xx", ",", "yy", ",", "*", "zz", ")", "\n", "", "xyz", "=", "np", ".", "array", "(", "grid", ")", ".", "T", ".", "reshape", "(", "-", "1", ",", "dim", ")", "\n", "return", "tf", ".", "constant", "(", "xyz", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.examples.atari.train": [[65, 229], ["range", "tensorflow.Variable", "tensorflow.train.RMSPropOptimizer", "absl.logging.info", "numpy.load", "numpy.zeros", "data.set_shape", "spectral_inference_networks.SpectralNetwork", "spin.SpectralNetwork.train", "os.path.join", "ws.append", "bs.append", "len", "ws.append", "bs.append", "matplotlib.subplots", "range", "matplotlib.subplots", "range", "frame_fig.canvas.draw", "frame_fig.canvas.flush_events", "loss_ax.cla", "loss_ax.plot", "spectral_inference_networks.util.make_conv_network", "tensorflow.train.exponential_decay", "os.path.join", "numpy.random.randint", "numpy.any", "range", "tensorflow.py_func", "spectral_inference_networks.SlownessOperator", "numpy.sqrt", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.Variable", "range", "numpy.argsort", "frame_im[].set_data", "frame_im[].set_data", "eigenvalues_ma[].min", "eigenvalues_ma[].max", "loss_ax.set_ylim", "numpy.random.randint", "frames[].transpose", "tensorflow.truncated_normal", "tensorflow.zeros", "tensorflow.truncated_normal", "tensorflow.zeros", "frame_ax[].axis", "frame_im.append", "frame_ax[].imshow", "numpy.zeros", "numpy.sqrt", "max", "max"], "function", ["home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.examples.hydrogen.train", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.src.util.make_conv_network"], ["def", "train", "(", "iterations", ",", "\n", "lr", ",", "\n", "batch_size", ",", "\n", "neig", ",", "\n", "shards", ",", "\n", "game", ",", "\n", "step_lr", "=", "False", ",", "\n", "decay", "=", "0.01", ",", "\n", "rmsprop_decay", "=", "0.1", ",", "\n", "log_image_every", "=", "10", ",", "\n", "save_params_every", "=", "50000", ",", "\n", "use_pfor", "=", "False", ",", "\n", "per_example", "=", "False", ",", "\n", "data_dir", "=", "None", ",", "\n", "show_plots", "=", "False", ")", ":", "\n", "  ", "\"\"\"Sets up and starts training for SpIN on Atari video data.\"\"\"", "\n", "\n", "if", "data_dir", "is", "None", ":", "\n", "    ", "data_dir", "=", "os", ".", "path", ".", "join", "(", "EXAMPLES_ROOT", ",", "'atari_episodes'", ")", "\n", "\n", "", "conv_size", "=", "[", "64", ",", "64", ",", "64", "]", "# number of channels in each conv layer", "\n", "conv_stride", "=", "[", "2", ",", "2", ",", "2", "]", "# stride of each conv layer", "\n", "# number of units in fully connected layers", "\n", "fc_size", "=", "[", "6400", ",", "128", ",", "neig", "]", "\n", "paddings", "=", "[", "'VALID'", ",", "'SAME'", ",", "'SAME'", "]", "\n", "nc_", "=", "4", "# initial number of channels", "\n", "ws", "=", "[", "]", "\n", "bs", "=", "[", "]", "\n", "\n", "for", "nc", "in", "conv_size", ":", "\n", "    ", "stddev", "=", "1", "/", "np", ".", "sqrt", "(", "nc_", "*", "_KERNEL_SIZE", "**", "2", ")", "\n", "ws", ".", "append", "(", "\n", "tf", ".", "Variable", "(", "\n", "tf", ".", "truncated_normal", "(", "[", "_KERNEL_SIZE", ",", "_KERNEL_SIZE", ",", "nc_", ",", "nc", "]", ",", "\n", "stddev", "=", "stddev", ")", ")", ")", "\n", "bs", ".", "append", "(", "tf", ".", "Variable", "(", "tf", ".", "zeros", "(", "[", "nc", "]", ")", ")", ")", "\n", "nc_", "=", "nc", "\n", "\n", "", "for", "i", "in", "range", "(", "1", ",", "len", "(", "fc_size", ")", ")", ":", "\n", "    ", "ws", ".", "append", "(", "tf", ".", "Variable", "(", "tf", ".", "truncated_normal", "(", "[", "fc_size", "[", "i", "-", "1", "]", ",", "fc_size", "[", "i", "]", "]", ",", "\n", "stddev", "=", "1", "/", "np", ".", "sqrt", "(", "fc_size", "[", "i", "-", "1", "]", ")", ")", ")", ")", "\n", "bs", ".", "append", "(", "tf", ".", "Variable", "(", "tf", ".", "zeros", "(", "[", "fc_size", "[", "i", "]", "]", ")", ")", ")", "\n", "\n", "", "params", "=", "ws", "+", "bs", "\n", "saver_path", "=", "'/tmp'", "\n", "\n", "logging_config", "=", "{", "\n", "'config'", ":", "{", "\n", "'lr'", ":", "lr", ",", "\n", "'decay'", ":", "decay", ",", "\n", "'batch_size'", ":", "batch_size", ",", "\n", "'rmsprop_decay'", ":", "rmsprop_decay", ",", "\n", "'game'", ":", "game", ",", "\n", "}", ",", "\n", "'log_image_every'", ":", "log_image_every", ",", "\n", "'save_params_every'", ":", "save_params_every", ",", "\n", "'saver_path'", ":", "saver_path", ",", "\n", "'saver_name'", ":", "game", "+", "'_params'", ",", "\n", "}", "\n", "\n", "stats_hooks", "=", "{", "\n", "'create'", ":", "spin", ".", "util", ".", "create_default_stats", ",", "\n", "'update'", ":", "spin", ".", "util", ".", "update_default_stats", ",", "\n", "}", "\n", "\n", "def", "_create_plots", "(", ")", ":", "\n", "    ", "\"\"\"Hook to set up plots at start of run.\"\"\"", "\n", "frame_fig", ",", "frame_ax", "=", "plt", ".", "subplots", "(", "2", ",", "neig", ",", "figsize", "=", "(", "neig", "*", "8", ",", "8", ")", ")", "\n", "frame_im", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "2", ")", ":", "\n", "      ", "for", "j", "in", "range", "(", "neig", ")", ":", "\n", "        ", "frame_ax", "[", "i", ",", "j", "]", ".", "axis", "(", "'off'", ")", "\n", "frame_im", ".", "append", "(", "frame_ax", "[", "i", ",", "j", "]", ".", "imshow", "(", "\n", "np", ".", "zeros", "(", "(", "_IMAGE_SIZE", ",", "_IMAGE_SIZE", ")", ")", ",", "\n", "interpolation", "=", "'none'", ",", "\n", "cmap", "=", "'gray'", ",", "vmin", "=", "0.0", ",", "vmax", "=", "255.0", ")", ")", "\n", "\n", "", "", "_", ",", "loss_ax", "=", "plt", ".", "subplots", "(", "1", ",", "1", ")", "\n", "return", "frame_fig", ",", "frame_im", ",", "loss_ax", "\n", "\n", "", "def", "_update_plots", "(", "t", ",", "\n", "outputs", ",", "\n", "inputs", ",", "\n", "frame_fig", ",", "\n", "frame_im", ",", "\n", "loss_ax", ",", "\n", "losses", "=", "None", ",", "\n", "eigenvalues", "=", "None", ",", "\n", "eigenvalues_ma", "=", "None", ")", ":", "\n", "    ", "\"\"\"Hook to update the plots periodically.\"\"\"", "\n", "del", "losses", "\n", "del", "eigenvalues", "\n", "\n", "for", "i", "in", "range", "(", "neig", ")", ":", "\n", "      ", "ordered", "=", "np", ".", "argsort", "(", "outputs", "[", ":", ",", "i", "+", "1", "]", ")", "# sort features for this minibatch", "\n", "frame_im", "[", "i", "]", ".", "set_data", "(", "inputs", "[", "ordered", "[", "0", "]", ",", "...", ",", "-", "1", "]", ")", "\n", "frame_im", "[", "i", "+", "neig", "]", ".", "set_data", "(", "inputs", "[", "ordered", "[", "-", "1", "]", ",", "...", ",", "-", "1", "]", ")", "\n", "\n", "", "frame_fig", ".", "canvas", ".", "draw", "(", ")", "\n", "frame_fig", ".", "canvas", ".", "flush_events", "(", ")", "\n", "\n", "loss_ax", ".", "cla", "(", ")", "\n", "loss_ax", ".", "plot", "(", "eigenvalues_ma", "[", ":", "t", "]", ")", "\n", "\n", "if", "t", ">", "0", ":", "\n", "      ", "ymin", "=", "eigenvalues_ma", "[", "max", "(", "0", ",", "t", "-", "1000", ")", ":", "t", "]", ".", "min", "(", ")", "\n", "ymax", "=", "eigenvalues_ma", "[", "max", "(", "0", ",", "t", "-", "1000", ")", ":", "t", "]", ".", "max", "(", ")", "\n", "ydiff", "=", "ymax", "-", "ymin", "\n", "loss_ax", ".", "set_ylim", "(", "[", "ymin", "-", "0.1", "*", "ydiff", ",", "ymax", "+", "0.1", "*", "ydiff", "]", ")", "\n", "\n", "", "", "plotting_hooks", "=", "{", "\n", "'create'", ":", "_create_plots", ",", "\n", "'update'", ":", "_update_plots", ",", "\n", "}", "\n", "\n", "global_step", "=", "tf", ".", "Variable", "(", "0.0", ",", "trainable", "=", "False", ")", "\n", "\n", "def", "network_builder", "(", "x", ")", ":", "\n", "    ", "return", "spin", ".", "util", ".", "make_conv_network", "(", "x", ",", "conv_stride", ",", "paddings", ",", "ws", ",", "bs", ")", "\n", "\n", "", "if", "step_lr", ":", "\n", "    ", "lr", "=", "tf", ".", "train", ".", "exponential_decay", "(", "lr", "*", "decay", ",", "global_step", ",", "100", "/", "decay", ",", "0.8", ")", "\n", "", "optim", "=", "tf", ".", "train", ".", "RMSPropOptimizer", "(", "\n", "lr", ",", "decay", "=", "(", "1.0", "-", "decay", "*", "rmsprop_decay", ")", ",", "centered", "=", "True", ")", "\n", "\n", "logging", ".", "info", "(", "'Loading game %s'", ",", "game", ")", "\n", "episodes", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "data_dir", ",", "'{}.npz'", ".", "format", "(", "game", ")", ")", ")", "\n", "\n", "frames", "=", "episodes", "[", "'frames'", "]", "\n", "episode_starts", "=", "episodes", "[", "'episode_starts'", "]", "\n", "\n", "batch", "=", "np", ".", "zeros", "(", "(", "batch_size", "+", "1", ",", "_IMAGE_SIZE", ",", "_IMAGE_SIZE", ",", "4", ")", ",", "\n", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "def", "_reader", "(", ")", ":", "\n", "    ", "idx", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "(", "_NFRAMES", "*", "shards", ")", "-", "batch_size", "-", "4", ")", "\n", "while", "np", ".", "any", "(", "episode_starts", "[", "idx", "+", "1", ":", "idx", "+", "batch_size", "+", "4", "]", ")", ":", "\n", "      ", "idx", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "(", "_NFRAMES", "*", "shards", ")", "-", "batch_size", "-", "4", ")", "\n", "", "for", "i", "in", "range", "(", "batch_size", "+", "1", ")", ":", "\n", "      ", "batch", "[", "i", "]", "=", "frames", "[", "idx", "+", "i", ":", "idx", "+", "i", "+", "4", "]", ".", "transpose", "(", "(", "1", ",", "2", ",", "0", ")", ")", "\n", "", "return", "batch", "\n", "\n", "", "data", "=", "tf", ".", "py_func", "(", "_reader", ",", "[", "]", ",", "[", "tf", ".", "float32", "]", ")", "[", "0", "]", "\n", "data", ".", "set_shape", "(", "[", "batch_size", "+", "1", ",", "_IMAGE_SIZE", ",", "_IMAGE_SIZE", ",", "4", "]", ")", "\n", "\n", "spectral_net", "=", "spin", ".", "SpectralNetwork", "(", "\n", "spin", ".", "SlownessOperator", "(", ")", ",", "\n", "network_builder", ",", "\n", "data", ",", "\n", "params", ",", "\n", "decay", "=", "decay", ",", "\n", "use_pfor", "=", "use_pfor", ",", "\n", "per_example", "=", "per_example", ")", "\n", "\n", "spectral_net", ".", "train", "(", "\n", "optim", ",", "\n", "iterations", ",", "\n", "logging_config", ",", "\n", "stats_hooks", ",", "\n", "plotting_hooks", "=", "plotting_hooks", ",", "\n", "show_plots", "=", "show_plots", ",", "\n", "global_step", "=", "global_step", ",", "\n", "data_for_plotting", "=", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.examples.atari.main": [[231, 253], ["atari.train", "ValueError"], "function", ["home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.examples.hydrogen.train"], ["", "def", "main", "(", "argv", ")", ":", "\n", "  ", "del", "argv", "\n", "\n", "if", "FLAGS", ".", "neig", "<", "2", ":", "\n", "    ", "raise", "ValueError", "(", "'Number of Eigen values must be at least 2.'", ")", "\n", "\n", "", "train", "(", "\n", "iterations", "=", "FLAGS", ".", "niter", ",", "\n", "lr", "=", "FLAGS", ".", "lr", ",", "\n", "batch_size", "=", "FLAGS", ".", "batch_size", ",", "\n", "neig", "=", "FLAGS", ".", "neig", ",", "\n", "shards", "=", "FLAGS", ".", "shards", ",", "\n", "step_lr", "=", "FLAGS", ".", "step_lr", ",", "\n", "decay", "=", "FLAGS", ".", "decay", ",", "\n", "rmsprop_decay", "=", "FLAGS", ".", "rmsprop_decay", ",", "\n", "game", "=", "FLAGS", ".", "game", ",", "\n", "log_image_every", "=", "FLAGS", ".", "log_image_every", ",", "\n", "save_params_every", "=", "FLAGS", ".", "save_params_every", ",", "\n", "use_pfor", "=", "FLAGS", ".", "use_pfor", ",", "\n", "per_example", "=", "FLAGS", ".", "per_example", ",", "\n", "data_dir", "=", "FLAGS", ".", "data_dir", ",", "\n", "show_plots", "=", "FLAGS", ".", "show_plots", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.examples.hydrogen.train": [[56, 202], ["spectral_inference_networks.DiagonalOperator", "tensorflow.Variable", "tensorflow.train.RMSPropOptimizer", "spectral_inference_networks.util.grid_reader", "tensorflow.random_uniform", "spectral_inference_networks.SpectralNetwork", "spin.SpectralNetwork.train", "max", "matplotlib.subplots", "range", "range", "matplotlib.subplots", "max", "loss_ax.cla", "loss_ax.plot", "range", "loss_ax.set_ylim", "range", "psi_fig.canvas.draw", "psi_fig.canvas.flush_events", "ws.append", "bs.append", "spectral_inference_networks.util.make_network", "int", "psi_ax[].axis", "psi_im.append", "int", "range", "numpy.array", "loss_ax.plot", "outputs[].reshape", "psi_im[].set_data", "psi_im[].set_clim", "psi_ax[].set_title", "tensorflow.Variable", "tensorflow.Variable", "spectral_inference_networks.ExactLaplacianOperator", "spectral_inference_networks.LaplacianOperator", "numpy.ceil", "psi_ax[].imshow", "numpy.ceil", "int", "range", "range", "numpy.array", "outputs[].reshape.min", "outputs[].reshape.max", "tensorflow.random_normal", "tensorflow.norm", "numpy.sqrt", "numpy.zeros", "numpy.sqrt", "numpy.ceil", "tmp.append", "int", "range", "tensorflow.random_normal", "tensorflow.sqrt", "numpy.sqrt", "numpy.ceil", "tmp.append", "float"], "function", ["home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.src.util.grid_reader", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.examples.hydrogen.train", "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.src.util.make_network"], ["def", "train", "(", "iterations", ",", "\n", "batch_size", ",", "\n", "lr", ",", "\n", "ndim", "=", "2", ",", "\n", "apply_boundary", "=", "False", ",", "\n", "neig", "=", "1", ",", "\n", "decay", "=", "0.01", ",", "\n", "laplacian_eps", "=", "0.1", ",", "\n", "lim", "=", "20", ",", "\n", "log_image_every", "=", "50000", ",", "\n", "save_params_every", "=", "50000", ",", "\n", "show_plots", "=", "False", ",", "\n", "use_pfor", "=", "False", ",", "\n", "per_example", "=", "False", ",", "\n", "charge", "=", "0.5", ")", ":", "\n", "  ", "\"\"\"Configures and runs training loop.\"\"\"", "\n", "\n", "logging_config", "=", "{", "\n", "'config'", ":", "{", "\n", "'lr'", ":", "lr", ",", "\n", "'decay'", ":", "decay", ",", "\n", "'batch_size'", ":", "batch_size", ",", "\n", "}", ",", "\n", "'log_image_every'", ":", "log_image_every", ",", "\n", "'save_params_every'", ":", "save_params_every", ",", "\n", "'saver_path'", ":", "'/tmp'", ",", "\n", "'saver_name'", ":", "'hydrogen_params'", ",", "\n", "}", "\n", "\n", "npts", "=", "128", "\n", "def", "_create_plots", "(", ")", ":", "\n", "    ", "\"\"\"Hook to set up plots at start of run.\"\"\"", "\n", "nfig", "=", "max", "(", "2", ",", "int", "(", "np", ".", "ceil", "(", "np", ".", "sqrt", "(", "neig", ")", ")", ")", ")", "\n", "psi_fig", ",", "psi_ax", "=", "plt", ".", "subplots", "(", "nfig", ",", "nfig", ",", "figsize", "=", "(", "10", ",", "10", ")", ")", "\n", "psi_im", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "nfig", "**", "2", ")", ":", "\n", "      ", "psi_ax", "[", "i", "//", "nfig", ",", "i", "%", "nfig", "]", ".", "axis", "(", "'off'", ")", "\n", "", "for", "i", "in", "range", "(", "neig", ")", ":", "\n", "      ", "psi_im", ".", "append", "(", "psi_ax", "[", "i", "//", "nfig", ",", "i", "%", "nfig", "]", ".", "imshow", "(", "\n", "np", ".", "zeros", "(", "(", "npts", ",", "npts", ")", ")", ",", "interpolation", "=", "'none'", ",", "cmap", "=", "'plasma'", ")", ")", "\n", "", "_", ",", "loss_ax", "=", "plt", ".", "subplots", "(", "1", ",", "1", ")", "\n", "return", "psi_fig", ",", "psi_ax", ",", "psi_im", ",", "loss_ax", "\n", "\n", "", "def", "_update_plots", "(", "t", ",", "outputs", ",", "inputs", ",", "psi_fig", ",", "psi_ax", ",", "psi_im", ",", "loss_ax", ",", "\n", "losses", "=", "None", ",", "eigenvalues", "=", "None", ",", "eigenvalues_ma", "=", "None", ")", ":", "\n", "    ", "\"\"\"Hook to update the plots periodically.\"\"\"", "\n", "del", "inputs", "\n", "del", "losses", "\n", "del", "eigenvalues", "\n", "nfig", "=", "max", "(", "2", ",", "int", "(", "np", ".", "ceil", "(", "np", ".", "sqrt", "(", "neig", ")", ")", ")", ")", "\n", "loss_ax", ".", "cla", "(", ")", "\n", "loss_ax", ".", "plot", "(", "eigenvalues_ma", "[", ":", "t", "]", ")", "\n", "if", "ndim", "==", "2", ":", "\n", "# E(n;Z) = - Z^2 / [2*(n+1/2)^2]", "\n", "# Quantum numbers: n=0, 1, ...; m_l = -n, -n+1, ... n", "\n", "# degeneracy: 2n+1. Use k^2 as an upper bound to \\sum 2n+1.", "\n", "      ", "max_n", "=", "int", "(", "np", ".", "ceil", "(", "np", ".", "sqrt", "(", "neig", ")", ")", ")", "+", "1", "\n", "tmp", "=", "[", "]", "\n", "for", "n", "in", "range", "(", "0", ",", "max_n", ")", ":", "\n", "        ", "for", "_", "in", "range", "(", "2", "*", "n", "+", "1", ")", ":", "\n", "          ", "tmp", ".", "append", "(", "n", ")", "\n", "", "", "quantum_nos", "=", "np", ".", "array", "(", "tmp", ")", "\n", "ground_truth", "=", "-", "charge", "**", "2", "/", "(", "2", "*", "(", "quantum_nos", "[", ":", "neig", "]", "+", "0.5", ")", "**", "2", ")", "\n", "", "elif", "ndim", "==", "3", ":", "\n", "# E(n;Z) = - Z^2 / (2n^2)", "\n", "# Quantum numbers: n=1, 2, ...; l = 0, 1, ..., n-1; m_l = -l, -l+1, ... l", "\n", "# degeneracy: n^2. Use k^3 as an upper bound to \\sum n^2.", "\n", "      ", "max_n", "=", "int", "(", "np", ".", "ceil", "(", "neig", "**", "(", "1.", "/", "3", ")", ")", ")", "+", "1", "\n", "tmp", "=", "[", "]", "\n", "for", "n", "in", "range", "(", "1", ",", "max_n", ")", ":", "\n", "        ", "for", "_", "in", "range", "(", "n", "*", "n", ")", ":", "\n", "          ", "tmp", ".", "append", "(", "n", ")", "\n", "", "", "quantum_nos", "=", "np", ".", "array", "(", "tmp", ")", "\n", "ground_truth", "=", "-", "charge", "**", "2", "/", "(", "2", "*", "quantum_nos", "[", ":", "neig", "]", "**", "2", ")", "\n", "", "ground_truth", "/=", "2.0", "# convert back to units in the paper", "\n", "for", "i", "in", "range", "(", "neig", ")", ":", "\n", "      ", "loss_ax", ".", "plot", "(", "[", "0", ",", "t", "]", ",", "[", "ground_truth", "[", "i", "]", ",", "ground_truth", "[", "i", "]", "]", ",", "'--'", ")", "\n", "", "loss_ax", ".", "set_ylim", "(", "[", "1.0", ",", "ground_truth", "[", "0", "]", "-", "1", "]", ")", "\n", "\n", "for", "i", "in", "range", "(", "neig", ")", ":", "\n", "      ", "pimg", "=", "outputs", "[", ":", ",", "i", "]", ".", "reshape", "(", "npts", ",", "npts", ")", "\n", "psi_im", "[", "i", "]", ".", "set_data", "(", "pimg", ")", "\n", "psi_im", "[", "i", "]", ".", "set_clim", "(", "pimg", ".", "min", "(", ")", ",", "pimg", ".", "max", "(", ")", ")", "\n", "psi_ax", "[", "i", "//", "nfig", ",", "i", "%", "nfig", "]", ".", "set_title", "(", "eigenvalues_ma", "[", "t", ",", "i", "]", ")", "\n", "", "psi_fig", ".", "canvas", ".", "draw", "(", ")", "\n", "psi_fig", ".", "canvas", ".", "flush_events", "(", ")", "\n", "\n", "", "plotting_hooks", "=", "{", "\n", "'create'", ":", "_create_plots", ",", "\n", "'update'", ":", "_update_plots", ",", "\n", "}", "\n", "\n", "stats_hooks", "=", "{", "\n", "'create'", ":", "spin", ".", "util", ".", "create_default_stats", ",", "\n", "'update'", ":", "spin", ".", "util", ".", "update_default_stats", ",", "\n", "}", "\n", "\n", "k", "=", "neig", "\n", "hid", "=", "(", "64", ",", "64", ",", "64", ",", "k", ")", "\n", "h_", "=", "ndim", "\n", "ws", "=", "[", "]", "\n", "bs", "=", "[", "]", "\n", "for", "h", "in", "hid", ":", "\n", "    ", "ws", ".", "append", "(", "tf", ".", "Variable", "(", "tf", ".", "random_normal", "(", "[", "h_", ",", "h", "]", ")", "/", "tf", ".", "sqrt", "(", "float", "(", "h_", ")", ")", ")", ")", "\n", "bs", ".", "append", "(", "tf", ".", "Variable", "(", "tf", ".", "random_normal", "(", "[", "h", "]", ")", ")", ")", "\n", "h_", "=", "h", "\n", "", "params", "=", "ws", "+", "bs", "\n", "\n", "def", "network_builder", "(", "x", ")", ":", "\n", "    ", "return", "spin", ".", "util", ".", "make_network", "(", "x", ",", "hid", ",", "ws", ",", "bs", ",", "apply_boundary", ",", "lim", ",", "\n", "custom_softplus", "=", "not", "per_example", ")", "\n", "\n", "", "if", "laplacian_eps", "==", "0.0", ":", "\n", "    ", "kinetic", "=", "-", "spin", ".", "ExactLaplacianOperator", "(", ")", "\n", "", "else", ":", "\n", "    ", "kinetic", "=", "-", "spin", ".", "LaplacianOperator", "(", "eps", "=", "laplacian_eps", ")", "\n", "", "potential", "=", "spin", ".", "DiagonalOperator", "(", "\n", "lambda", "x", ":", "-", "charge", "/", "tf", ".", "norm", "(", "x", ",", "axis", "=", "1", ",", "keepdims", "=", "True", ")", ")", "\n", "hamiltonian", "=", "kinetic", "+", "potential", "\n", "\n", "global_step", "=", "tf", ".", "Variable", "(", "0.0", ",", "trainable", "=", "False", ")", "\n", "optim", "=", "tf", ".", "train", ".", "RMSPropOptimizer", "(", "lr", ",", "decay", "=", "0.999", ")", "\n", "data_for_plotting", "=", "spin", ".", "util", ".", "grid_reader", "(", "ndim", ",", "lim", ",", "npts", ")", "\n", "\n", "data", "=", "tf", ".", "random_uniform", "(", "[", "batch_size", ",", "ndim", "]", ",", "minval", "=", "-", "lim", ",", "maxval", "=", "lim", ")", "\n", "\n", "spectral_net", "=", "spin", ".", "SpectralNetwork", "(", "\n", "hamiltonian", ",", "\n", "network_builder", ",", "\n", "data", ",", "\n", "params", ",", "\n", "decay", "=", "decay", ",", "\n", "use_pfor", "=", "use_pfor", ",", "\n", "per_example", "=", "per_example", ")", "\n", "\n", "stats", "=", "spectral_net", ".", "train", "(", "\n", "optim", ",", "\n", "iterations", ",", "\n", "logging_config", ",", "\n", "stats_hooks", ",", "\n", "plotting_hooks", "=", "plotting_hooks", ",", "\n", "show_plots", "=", "show_plots", ",", "\n", "global_step", "=", "global_step", ",", "\n", "data_for_plotting", "=", "data_for_plotting", ")", "\n", "\n", "return", "stats", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.examples.hydrogen.main": [[204, 227], ["hydrogen.train", "ValueError"], "function", ["home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.examples.hydrogen.train"], ["", "def", "main", "(", "argv", ")", ":", "\n", "  ", "del", "argv", "\n", "\n", "if", "FLAGS", ".", "per_example", "and", "FLAGS", ".", "laplacian_eps", "==", "0.0", ":", "\n", "    ", "raise", "ValueError", "(", "'Exact Laplacian is incompatible '", "\n", "'with per-example Jacobian'", ")", "\n", "\n", "", "train", "(", "\n", "iterations", "=", "FLAGS", ".", "niter", ",", "\n", "batch_size", "=", "FLAGS", ".", "batch_size", ",", "\n", "lr", "=", "FLAGS", ".", "lr", ",", "\n", "ndim", "=", "FLAGS", ".", "ndim", ",", "\n", "apply_boundary", "=", "FLAGS", ".", "boundary", ",", "\n", "neig", "=", "FLAGS", ".", "neig", ",", "\n", "decay", "=", "FLAGS", ".", "decay", ",", "\n", "laplacian_eps", "=", "FLAGS", ".", "laplacian_eps", ",", "\n", "lim", "=", "FLAGS", ".", "lim", ",", "\n", "log_image_every", "=", "FLAGS", ".", "log_image_every", ",", "\n", "save_params_every", "=", "FLAGS", ".", "save_params_every", ",", "\n", "show_plots", "=", "FLAGS", ".", "show_plots", ",", "\n", "use_pfor", "=", "FLAGS", ".", "use_pfor", ",", "\n", "per_example", "=", "FLAGS", ".", "per_example", ",", "\n", "charge", "=", "FLAGS", ".", "charge", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.tests.spin_test.SpinTest._small_matrix": [[28, 99], ["tensorflow.set_random_seed", "numpy.random.seed", "tensorflow.Variable", "tensorflow.assign", "numpy.random.randn().astype", "numpy.dot", "numpy.sqrt", "spectral_inference_networks.KernelOperator", "spectral_inference_networks.SpectralNetwork", "tensorflow.train.GradientDescentOptimizer.apply_gradients", "tensorflow.global_variables_initializer", "numpy.linalg.qr", "numpy.linalg.eig", "numpy.argsort", "print", "print", "numpy.testing.assert_allclose", "numpy.dot", "numpy.diag", "numpy.testing.assert_allclose", "numpy.random.randn().astype.transpose", "tensorflow.Variable", "tensorflow.concat", "tensorflow.train.GradientDescentOptimizer", "tensorflow.one_hot", "tensorflow.train.GradientDescentOptimizer", "tensorflow.matmul", "tensorflow.reduce_sum", "zip", "tensorflow.Session", "sess.run", "sess.run", "range", "sess.run.transpose", "numpy.diag", "numpy.zeros", "numpy.random.randn", "tensorflow.random_normal", "tensorflow.cast", "sess.run", "sess.run", "numpy.zeros", "range", "sess.run", "int", "numpy.sort", "numpy.sort", "tensorflow.tile", "tensorflow.reshape", "tensorflow.floor", "tensorflow.matmul", "sess.run", "tensorflow.eye", "tensorflow.tile", "tensorflow.eye", "tensorflow.random_uniform"], "methods", ["None"], ["  ", "def", "_small_matrix", "(", "self", ",", "size", "=", "5", ",", "neig", "=", "3", ",", "batch_size", "=", "1000", ",", "niter", "=", "2000", ",", "\n", "deterministic", "=", "False", ",", "use_pfor", "=", "False", ",", "per_example", "=", "False", ")", ":", "\n", "    ", "\"\"\"Test SpIN on small matrix.\"\"\"", "\n", "tf", ".", "set_random_seed", "(", "0", ")", "\n", "np", ".", "random", ".", "seed", "(", "0", ")", "\n", "\n", "global_step", "=", "tf", ".", "Variable", "(", "0.0", ",", "trainable", "=", "False", ")", "\n", "update_global_step", "=", "tf", ".", "assign", "(", "global_step", ",", "global_step", "+", "1", ")", "\n", "\n", "mat", "=", "np", ".", "random", ".", "randn", "(", "size", ",", "size", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "xx", "=", "np", ".", "dot", "(", "mat", ".", "transpose", "(", ")", ",", "mat", ")", "# Symmetrize the matrix", "\n", "\n", "params", "=", "[", "tf", ".", "Variable", "(", "tf", ".", "random_normal", "(", "[", "size", ",", "neig", "]", ")", ")", "]", "\n", "\n", "if", "deterministic", ":", "\n", "      ", "decay", "=", "0.0", "\n", "# Data is all combinations of rows and columns of the matrix.", "\n", "data", "=", "tf", ".", "concat", "(", "(", "tf", ".", "tile", "(", "tf", ".", "eye", "(", "size", ")", ",", "(", "size", ",", "1", ")", ")", ",", "\n", "tf", ".", "reshape", "(", "tf", ".", "tile", "(", "tf", ".", "eye", "(", "size", ")", ",", "(", "1", ",", "size", ")", ")", ",", "\n", "(", "size", "**", "2", ",", "size", ")", ")", ")", ",", "axis", "=", "0", ")", "\n", "optim", "=", "tf", ".", "train", ".", "GradientDescentOptimizer", "(", "1.0", ")", "\n", "", "else", ":", "\n", "      ", "decay", "=", "0.9", "\n", "data", "=", "tf", ".", "one_hot", "(", "tf", ".", "cast", "(", "tf", ".", "floor", "(", "\n", "tf", ".", "random_uniform", "(", "[", "batch_size", "]", ")", "*", "size", ")", ",", "tf", ".", "int32", ")", ",", "size", ")", "\n", "optim", "=", "tf", ".", "train", ".", "GradientDescentOptimizer", "(", "1.0", "/", "global_step", ")", "\n", "", "data", "*=", "np", ".", "sqrt", "(", "size", ")", "# Make rows unit norm", "\n", "\n", "def", "_network", "(", "x", ")", ":", "\n", "      ", "return", "tf", ".", "matmul", "(", "x", ",", "params", "[", "0", "]", ")", "\n", "\n", "", "def", "_kernel", "(", "x1", ",", "x2", ")", ":", "\n", "      ", "return", "tf", ".", "reduce_sum", "(", "x1", "*", "tf", ".", "matmul", "(", "x2", ",", "xx", ")", ",", "axis", "=", "1", ",", "keepdims", "=", "True", ")", "\n", "\n", "", "operator", "=", "spin", ".", "KernelOperator", "(", "_kernel", ")", "\n", "spec_net", "=", "spin", ".", "SpectralNetwork", "(", "\n", "operator", ",", "_network", ",", "data", ",", "params", ",", "decay", "=", "decay", ",", "use_pfor", "=", "use_pfor", ",", "\n", "per_example", "=", "per_example", ")", "\n", "step", "=", "optim", ".", "apply_gradients", "(", "zip", "(", "spec_net", ".", "gradients", ",", "params", ")", ")", "\n", "init", "=", "tf", ".", "global_variables_initializer", "(", ")", "\n", "with", "tf", ".", "Session", "(", ")", "as", "sess", ":", "\n", "      ", "sess", ".", "run", "(", "init", ")", "\n", "sess", ".", "run", "(", "update_global_step", ")", "\n", "for", "_", "in", "range", "(", "niter", ")", ":", "\n", "        ", "sess", ".", "run", "(", "step", ")", "\n", "", "if", "deterministic", ":", "\n", "        ", "eigvec", ",", "eigval", "=", "sess", ".", "run", "(", "[", "spec_net", ".", "features", ",", "spec_net", ".", "eigenvalues", "]", ")", "\n", "", "else", ":", "\n", "        ", "eigval", "=", "np", ".", "zeros", "(", "neig", ")", "\n", "n", "=", "1000", "\n", "for", "_", "in", "range", "(", "n", ")", ":", "\n", "          ", "eigval", "+=", "sess", ".", "run", "(", "spec_net", ".", "eigenvalues", ")", "\n", "", "eigval", "/=", "n", "\n", "eigvec", "=", "sess", ".", "run", "(", "params", "[", "0", "]", ")", "\n", "\n", "", "", "eigvec", ",", "_", "=", "np", ".", "linalg", ".", "qr", "(", "eigvec", ")", "\n", "eigvec", "=", "eigvec", "[", ":", "int", "(", "size", ")", "]", "\n", "true_eigval", ",", "true_eigvec", "=", "np", ".", "linalg", ".", "eig", "(", "xx", ")", "\n", "idx", "=", "np", ".", "argsort", "(", "true_eigval", ")", "\n", "print", "(", "eigval", ")", "\n", "print", "(", "np", ".", "sort", "(", "true_eigval", ")", "[", ":", "neig", "]", ")", "\n", "if", "deterministic", ":", "\n", "      ", "atol", "=", "1e-5", "\n", "", "else", ":", "\n", "      ", "atol", "=", "1e-1", "# Stochastic case is quite noisy", "\n", "", "np", ".", "testing", ".", "assert_allclose", "(", "eigval", ",", "np", ".", "sort", "(", "true_eigval", ")", "[", ":", "neig", "]", ",", "atol", "=", "atol", ")", "\n", "\n", "# Compute dot product between true eigenvectors and learned ones.", "\n", "cross_cov", "=", "np", ".", "dot", "(", "eigvec", ".", "transpose", "(", ")", ",", "true_eigvec", "[", ":", ",", "idx", "[", ":", "neig", "]", "]", ")", "\n", "cross_cov", "-=", "np", ".", "diag", "(", "np", ".", "diag", "(", "cross_cov", ")", ")", "\n", "np", ".", "testing", ".", "assert_allclose", "(", "cross_cov", ",", "np", ".", "zeros", "(", "(", "neig", ",", "neig", ")", ")", ",", "atol", "=", "atol", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.tests.spin_test.SpinTest.test_small_matrix_stochastic_use_pfor_false_per_example_false": [[100, 102], ["spin_test.SpinTest._small_matrix"], "methods", ["home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.tests.spin_test.SpinTest._small_matrix"], ["", "def", "test_small_matrix_stochastic_use_pfor_false_per_example_false", "(", "self", ")", ":", "\n", "    ", "self", ".", "_small_matrix", "(", "deterministic", "=", "False", ",", "use_pfor", "=", "False", ",", "per_example", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.tests.spin_test.SpinTest.test_small_matrix_stochastic_use_pfor_true_per_example_false": [[103, 105], ["spin_test.SpinTest._small_matrix"], "methods", ["home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.tests.spin_test.SpinTest._small_matrix"], ["", "def", "test_small_matrix_stochastic_use_pfor_true_per_example_false", "(", "self", ")", ":", "\n", "    ", "self", ".", "_small_matrix", "(", "deterministic", "=", "False", ",", "use_pfor", "=", "True", ",", "per_example", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.tests.spin_test.SpinTest.test_small_matrix_stochastic_use_pfor_true_per_example_true": [[106, 108], ["spin_test.SpinTest._small_matrix"], "methods", ["home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.tests.spin_test.SpinTest._small_matrix"], ["", "def", "test_small_matrix_stochastic_use_pfor_true_per_example_true", "(", "self", ")", ":", "\n", "    ", "self", ".", "_small_matrix", "(", "deterministic", "=", "False", ",", "use_pfor", "=", "True", ",", "per_example", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.tests.spin_test.SpinTest.test_small_matrix_deterministic_use_pfor_false_per_example_false": [[109, 111], ["spin_test.SpinTest._small_matrix"], "methods", ["home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.tests.spin_test.SpinTest._small_matrix"], ["", "def", "test_small_matrix_deterministic_use_pfor_false_per_example_false", "(", "self", ")", ":", "\n", "    ", "self", ".", "_small_matrix", "(", "deterministic", "=", "True", ",", "use_pfor", "=", "False", ",", "per_example", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.tests.spin_test.SpinTest.test_small_matrix_deterministic_use_pfor_true_per_example_false": [[112, 114], ["spin_test.SpinTest._small_matrix"], "methods", ["home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.tests.spin_test.SpinTest._small_matrix"], ["", "def", "test_small_matrix_deterministic_use_pfor_true_per_example_false", "(", "self", ")", ":", "\n", "    ", "self", ".", "_small_matrix", "(", "deterministic", "=", "True", ",", "use_pfor", "=", "True", ",", "per_example", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.tests.spin_test.SpinTest.test_small_matrix_deterministic_use_pfor_true_per_example_true": [[115, 117], ["spin_test.SpinTest._small_matrix"], "methods", ["home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.tests.spin_test.SpinTest._small_matrix"], ["", "def", "test_small_matrix_deterministic_use_pfor_true_per_example_true", "(", "self", ")", ":", "\n", "    ", "self", ".", "_small_matrix", "(", "deterministic", "=", "True", ",", "use_pfor", "=", "True", ",", "per_example", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.tests.atari_test.AtariTest.test_atari": [[27, 35], ["spectral_inference_networks.examples.atari.train"], "methods", ["home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.examples.hydrogen.train"], ["  ", "def", "test_atari", "(", "self", ")", ":", "\n", "    ", "atari", ".", "train", "(", "\n", "iterations", "=", "10", ",", "\n", "batch_size", "=", "4", ",", "\n", "lr", "=", "1e-4", ",", "\n", "neig", "=", "2", ",", "\n", "shards", "=", "1", ",", "\n", "game", "=", "'montezuma_revenge'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.tests.atari_test.AtariTest.test_atari_with_per_example_and_pfor": [[36, 46], ["spectral_inference_networks.examples.atari.train"], "methods", ["home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.examples.hydrogen.train"], ["", "def", "test_atari_with_per_example_and_pfor", "(", "self", ")", ":", "\n", "    ", "atari", ".", "train", "(", "\n", "iterations", "=", "10", ",", "\n", "batch_size", "=", "4", ",", "\n", "lr", "=", "1e-4", ",", "\n", "neig", "=", "2", ",", "\n", "shards", "=", "1", ",", "\n", "game", "=", "'montezuma_revenge'", ",", "\n", "use_pfor", "=", "True", ",", "\n", "per_example", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.tests.hydrogen_test.HydrogenTest.test_hydrogen": [[27, 34], ["spectral_inference_networks.examples.hydrogen.train"], "methods", ["home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.examples.hydrogen.train"], ["  ", "def", "test_hydrogen", "(", "self", ")", ":", "\n", "    ", "hydrogen", ".", "train", "(", "\n", "iterations", "=", "50", ",", "\n", "batch_size", "=", "8", ",", "\n", "lr", "=", "1e-4", ",", "\n", "apply_boundary", "=", "True", ",", "\n", "neig", "=", "4", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.tests.hydrogen_test.HydrogenTest.test_hydrogen_exact_lapl": [[35, 43], ["spectral_inference_networks.examples.hydrogen.train"], "methods", ["home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.examples.hydrogen.train"], ["", "def", "test_hydrogen_exact_lapl", "(", "self", ")", ":", "\n", "    ", "hydrogen", ".", "train", "(", "\n", "iterations", "=", "50", ",", "\n", "batch_size", "=", "8", ",", "\n", "lr", "=", "1e-4", ",", "\n", "apply_boundary", "=", "True", ",", "\n", "neig", "=", "4", ",", "\n", "laplacian_eps", "=", "0.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.tests.hydrogen_test.HydrogenTest.test_hydrogen_with_pfor_and_per_example": [[44, 53], ["spectral_inference_networks.examples.hydrogen.train"], "methods", ["home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.examples.hydrogen.train"], ["", "def", "test_hydrogen_with_pfor_and_per_example", "(", "self", ")", ":", "\n", "    ", "hydrogen", ".", "train", "(", "\n", "iterations", "=", "50", ",", "\n", "batch_size", "=", "8", ",", "\n", "lr", "=", "1e-4", ",", "\n", "apply_boundary", "=", "True", ",", "\n", "neig", "=", "4", ",", "\n", "use_pfor", "=", "True", ",", "\n", "per_example", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.tests.hydrogen_test.HydrogenTest.test_hydrogen_exact_lapl_with_pfor_and_per_example": [[54, 64], ["spectral_inference_networks.examples.hydrogen.train"], "methods", ["home.repos.pwc.inspect_result.thudzj_neuraleigenfunction.examples.hydrogen.train"], ["", "def", "test_hydrogen_exact_lapl_with_pfor_and_per_example", "(", "self", ")", ":", "\n", "    ", "hydrogen", ".", "train", "(", "\n", "iterations", "=", "50", ",", "\n", "batch_size", "=", "8", ",", "\n", "lr", "=", "1e-4", ",", "\n", "apply_boundary", "=", "True", ",", "\n", "neig", "=", "4", ",", "\n", "laplacian_eps", "=", "0.0", ",", "\n", "use_pfor", "=", "True", ",", "\n", "per_example", "=", "True", ")", "\n", "\n"]]}