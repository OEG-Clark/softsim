{"home.repos.pwc.inspect_result.hsqmlzno1_Transferable-E2E-ABSA.None.evals.evaluate_ote": [[5, 45], ["len", "range", "len", "len", "evals.match_ot", "len", "len", "float", "float", "float", "float", "evals.tag2ot", "evals.tag2ot"], "function", ["home.repos.pwc.inspect_result.hsqmlzno1_Transferable-E2E-ABSA.None.evals.match_ot", "home.repos.pwc.inspect_result.hsqmlzno1_Transferable-E2E-ABSA.None.evals.tag2ot", "home.repos.pwc.inspect_result.hsqmlzno1_Transferable-E2E-ABSA.None.evals.tag2ot"], ["def", "evaluate_ote", "(", "gold_ot", ",", "pred_ot", ",", "length", ")", ":", "\n", "    ", "\"\"\"\n    evaluate the model performce for the ote task\n    :param gold_ot: gold standard ote tags\n    :param pred_ot: predicted ote tags\n    :return:\n    \"\"\"", "\n", "assert", "len", "(", "gold_ot", ")", "==", "len", "(", "pred_ot", ")", "\n", "n_samples", "=", "len", "(", "gold_ot", ")", "\n", "# number of true positive, gold standard, predicted opinion targets", "\n", "n_tp_ot", ",", "n_gold_ot", ",", "n_pred_ot", "=", "0", ",", "0", ",", "0", "\n", "for", "i", "in", "range", "(", "n_samples", ")", ":", "\n", "        ", "g_ot", "=", "gold_ot", "[", "i", "]", "\n", "p_ot", "=", "pred_ot", "[", "i", "]", "\n", "length_i", "=", "length", "[", "i", "]", "\n", "# # print(length_i)", "\n", "# # print(g_ot)", "\n", "# # print(p_ot)", "\n", "# # exit(0)", "\n", "# for tag in p_ot:", "\n", "#     if tag != 'O':", "\n", "#         print(tag)", "\n", "g_ot", "=", "g_ot", "[", ":", "length_i", "]", "\n", "p_ot", "=", "p_ot", "[", ":", "length_i", "]", "\n", "# print(g_ot)", "\n", "# print(p_ot)", "\n", "# exit(0)", "\n", "g_ot_sequence", ",", "p_ot_sequence", "=", "tag2ot", "(", "ote_tag_sequence", "=", "g_ot", ")", ",", "tag2ot", "(", "ote_tag_sequence", "=", "p_ot", ")", "\n", "# hit number", "\n", "n_hit_ot", "=", "match_ot", "(", "gold_ote_sequence", "=", "g_ot_sequence", ",", "pred_ote_sequence", "=", "p_ot_sequence", ")", "\n", "n_tp_ot", "+=", "n_hit_ot", "\n", "n_gold_ot", "+=", "len", "(", "g_ot_sequence", ")", "\n", "n_pred_ot", "+=", "len", "(", "p_ot_sequence", ")", "\n", "# add 0.001 for smoothing", "\n", "# calculate precision, recall and f1 for ote task", "\n", "", "ot_precision", "=", "float", "(", "n_tp_ot", ")", "/", "float", "(", "n_pred_ot", "+", "0.001", ")", "\n", "ot_recall", "=", "float", "(", "n_tp_ot", ")", "/", "float", "(", "n_gold_ot", "+", "0.001", ")", "\n", "ot_f1", "=", "2", "*", "ot_precision", "*", "ot_recall", "/", "(", "ot_precision", "+", "ot_recall", "+", "0.001", ")", "\n", "ote_scores", "=", "(", "ot_precision", ",", "ot_recall", ",", "ot_f1", ")", "\n", "return", "ote_scores", "\n", "\n"]], "home.repos.pwc.inspect_result.hsqmlzno1_Transferable-E2E-ABSA.None.evals.evaluate_ts": [[47, 97], ["len", "range", "range", "ts_f1.mean", "sum", "sum", "sum", "len", "len", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "evals.match_ts", "float", "float", "evals.tag2ts", "evals.tag2ts", "float", "float", "float", "float"], "function", ["home.repos.pwc.inspect_result.hsqmlzno1_Transferable-E2E-ABSA.None.evals.match_ts", "home.repos.pwc.inspect_result.hsqmlzno1_Transferable-E2E-ABSA.None.evals.tag2ts", "home.repos.pwc.inspect_result.hsqmlzno1_Transferable-E2E-ABSA.None.evals.tag2ts"], ["", "def", "evaluate_ts", "(", "gold_ts", ",", "pred_ts", ",", "length", ")", ":", "\n", "    ", "\"\"\"\n    evaluate the model performance for the ts task\n    :param gold_ts: gold standard ts tags\n    :param pred_ts: predicted ts tags\n    :return:\n    \"\"\"", "\n", "assert", "len", "(", "gold_ts", ")", "==", "len", "(", "pred_ts", ")", "\n", "n_samples", "=", "len", "(", "gold_ts", ")", "\n", "# number of true postive, gold standard, predicted targeted sentiment", "\n", "n_tp_ts", ",", "n_gold_ts", ",", "n_pred_ts", "=", "np", ".", "zeros", "(", "3", ")", ",", "np", ".", "zeros", "(", "3", ")", ",", "np", ".", "zeros", "(", "3", ")", "\n", "ts_precision", ",", "ts_recall", ",", "ts_f1", "=", "np", ".", "zeros", "(", "3", ")", ",", "np", ".", "zeros", "(", "3", ")", ",", "np", ".", "zeros", "(", "3", ")", "\n", "\n", "for", "i", "in", "range", "(", "n_samples", ")", ":", "\n", "        ", "g_ts", "=", "gold_ts", "[", "i", "]", "\n", "p_ts", "=", "pred_ts", "[", "i", "]", "\n", "length_i", "=", "length", "[", "i", "]", "\n", "g_ts", "=", "g_ts", "[", ":", "length_i", "]", "\n", "p_ts", "=", "p_ts", "[", ":", "length_i", "]", "\n", "g_ts_sequence", ",", "p_ts_sequence", "=", "tag2ts", "(", "ts_tag_sequence", "=", "g_ts", ")", ",", "tag2ts", "(", "ts_tag_sequence", "=", "p_ts", ")", "\n", "hit_ts_count", ",", "gold_ts_count", ",", "pred_ts_count", "=", "match_ts", "(", "gold_ts_sequence", "=", "g_ts_sequence", ",", "\n", "pred_ts_sequence", "=", "p_ts_sequence", ")", "\n", "\n", "n_tp_ts", "+=", "hit_ts_count", "\n", "n_gold_ts", "+=", "gold_ts_count", "\n", "n_pred_ts", "+=", "pred_ts_count", "\n", "# calculate macro-average scores for ts task", "\n", "", "for", "i", "in", "range", "(", "3", ")", ":", "\n", "        ", "n_ts", "=", "n_tp_ts", "[", "i", "]", "\n", "n_g_ts", "=", "n_gold_ts", "[", "i", "]", "\n", "n_p_ts", "=", "n_pred_ts", "[", "i", "]", "\n", "ts_precision", "[", "i", "]", "=", "float", "(", "n_ts", ")", "/", "float", "(", "n_p_ts", "+", "0.001", ")", "\n", "ts_recall", "[", "i", "]", "=", "float", "(", "n_ts", ")", "/", "float", "(", "n_g_ts", "+", "0.001", ")", "\n", "ts_f1", "[", "i", "]", "=", "2", "*", "ts_precision", "[", "i", "]", "*", "ts_recall", "[", "i", "]", "/", "(", "ts_precision", "[", "i", "]", "+", "ts_recall", "[", "i", "]", "+", "0.001", ")", "\n", "\n", "\n", "", "ts_macro_f1", "=", "ts_f1", ".", "mean", "(", ")", "\n", "\n", "# calculate micro-average scores for ts task", "\n", "n_tp_total", "=", "sum", "(", "n_tp_ts", ")", "\n", "# total sum of TP and FN", "\n", "n_g_total", "=", "sum", "(", "n_gold_ts", ")", "\n", "# total sum of TP and FP", "\n", "n_p_total", "=", "sum", "(", "n_pred_ts", ")", "\n", "\n", "ts_micro_p", "=", "float", "(", "n_tp_total", ")", "/", "(", "n_p_total", "+", "0.001", ")", "\n", "ts_micro_r", "=", "float", "(", "n_tp_total", ")", "/", "(", "n_g_total", "+", "0.001", ")", "\n", "ts_micro_f1", "=", "2", "*", "ts_micro_p", "*", "ts_micro_r", "/", "(", "ts_micro_p", "+", "ts_micro_r", "+", "0.001", ")", "\n", "ts_scores", "=", "(", "ts_macro_f1", ",", "ts_micro_p", ",", "ts_micro_r", ",", "ts_micro_f1", ")", "\n", "return", "ts_scores", "\n", "\n"]], "home.repos.pwc.inspect_result.hsqmlzno1_Transferable-E2E-ABSA.None.evals.evaluate": [[99, 112], ["evals.evaluate_ote", "evals.evaluate_ts", "len", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.hsqmlzno1_Transferable-E2E-ABSA.None.evals.evaluate_ote", "home.repos.pwc.inspect_result.hsqmlzno1_Transferable-E2E-ABSA.None.evals.evaluate_ts"], ["", "def", "evaluate", "(", "gold_ot", ",", "gold_ts", ",", "pred_ot", ",", "pred_ts", ")", ":", "\n", "    ", "\"\"\"\n    evaluate the performance of the predictions\n    :param gold_ot: gold standard opinion target tags\n    :param gold_ts: gold standard targeted sentiment tags\n    :param pred_ot: predicted opinion target tags\n    :param pred_ts: predicted targeted sentiment tags\n    :return: metric scores of ner and sa\n    \"\"\"", "\n", "assert", "len", "(", "gold_ot", ")", "==", "len", "(", "gold_ts", ")", "==", "len", "(", "pred_ot", ")", "==", "len", "(", "pred_ts", ")", "\n", "ote_scores", "=", "evaluate_ote", "(", "gold_ot", "=", "gold_ot", ",", "pred_ot", "=", "pred_ot", ")", "\n", "ts_scores", "=", "evaluate_ts", "(", "gold_ts", "=", "gold_ts", ",", "pred_ts", "=", "pred_ts", ")", "\n", "return", "ote_scores", ",", "ts_scores", "\n", "\n"]], "home.repos.pwc.inspect_result.hsqmlzno1_Transferable-E2E-ABSA.None.evals.match_ot": [[114, 126], ["None"], "function", ["None"], ["", "def", "match_ot", "(", "gold_ote_sequence", ",", "pred_ote_sequence", ")", ":", "\n", "    ", "\"\"\"\n    calculate the number of correctly predicted opinion target\n    :param gold_ote_sequence: gold standard opinion target sequence\n    :param pred_ote_sequence: predicted opinion target sequence\n    :return: matched number\n    \"\"\"", "\n", "n_hit", "=", "0", "\n", "for", "t", "in", "pred_ote_sequence", ":", "\n", "        ", "if", "t", "in", "gold_ote_sequence", ":", "\n", "            ", "n_hit", "+=", "1", "\n", "", "", "return", "n_hit", "\n", "\n"]], "home.repos.pwc.inspect_result.hsqmlzno1_Transferable-E2E-ABSA.None.evals.match_ts": [[128, 150], ["numpy.zeros", "numpy.zeros", "numpy.zeros"], "function", ["None"], ["", "def", "match_ts", "(", "gold_ts_sequence", ",", "pred_ts_sequence", ")", ":", "\n", "    ", "\"\"\"\n    calculate the number of correctly predicted targeted sentiment\n    :param gold_ts_sequence: gold standard targeted sentiment sequence\n    :param pred_ts_sequence: predicted targeted sentiment sequence\n    :return:\n    \"\"\"", "\n", "# positive, negative and neutral", "\n", "tag2tagid", "=", "{", "'POS'", ":", "0", ",", "'NEG'", ":", "1", ",", "'NEU'", ":", "2", "}", "\n", "hit_count", ",", "gold_count", ",", "pred_count", "=", "np", ".", "zeros", "(", "3", ")", ",", "np", ".", "zeros", "(", "3", ")", ",", "np", ".", "zeros", "(", "3", ")", "\n", "for", "t", "in", "gold_ts_sequence", ":", "\n", "#print(t)", "\n", "        ", "ts_tag", "=", "t", "[", "2", "]", "\n", "tid", "=", "tag2tagid", "[", "ts_tag", "]", "\n", "gold_count", "[", "tid", "]", "+=", "1", "\n", "", "for", "t", "in", "pred_ts_sequence", ":", "\n", "        ", "ts_tag", "=", "t", "[", "2", "]", "\n", "tid", "=", "tag2tagid", "[", "ts_tag", "]", "\n", "if", "t", "in", "gold_ts_sequence", ":", "\n", "            ", "hit_count", "[", "tid", "]", "+=", "1", "\n", "", "pred_count", "[", "tid", "]", "+=", "1", "\n", "", "return", "hit_count", ",", "gold_count", ",", "pred_count", "\n", "\n"]], "home.repos.pwc.inspect_result.hsqmlzno1_Transferable-E2E-ABSA.None.evals.tag2ot": [[151, 172], ["len", "range", "ot_sequence.append", "ot_sequence.append"], "function", ["None"], ["", "def", "tag2ot", "(", "ote_tag_sequence", ")", ":", "\n", "    ", "\"\"\"\n    transform ote tag sequence to a sequence of opinion target\n    :param ote_tag_sequence: tag sequence for ote task\n    :return:\n    \"\"\"", "\n", "n_tags", "=", "len", "(", "ote_tag_sequence", ")", "\n", "ot_sequence", "=", "[", "]", "\n", "beg", ",", "end", "=", "-", "1", ",", "-", "1", "\n", "for", "i", "in", "range", "(", "n_tags", ")", ":", "\n", "        ", "tag", "=", "ote_tag_sequence", "[", "i", "]", "\n", "if", "tag", "==", "'S'", ":", "\n", "            ", "ot_sequence", ".", "append", "(", "(", "i", ",", "i", ")", ")", "\n", "", "elif", "tag", "==", "'B'", ":", "\n", "            ", "beg", "=", "i", "\n", "", "elif", "tag", "==", "'E'", ":", "\n", "            ", "end", "=", "i", "\n", "if", "end", ">", "beg", ">", "-", "1", ":", "\n", "                ", "ot_sequence", ".", "append", "(", "(", "beg", ",", "end", ")", ")", "\n", "beg", ",", "end", "=", "-", "1", ",", "-", "1", "\n", "", "", "", "return", "ot_sequence", "\n", "\n"]], "home.repos.pwc.inspect_result.hsqmlzno1_Transferable-E2E-ABSA.None.evals.tag2ts": [[174, 209], ["len", "range", "ts_tag.split", "len", "sentiments.append", "ts_sequence.append", "ts_sequence.append", "len", "set"], "function", ["None"], ["", "def", "tag2ts", "(", "ts_tag_sequence", ")", ":", "\n", "    ", "\"\"\"\n    transform ts tag sequence to targeted sentiment\n    :param ts_tag_sequence: tag sequence for ts task\n    :return:\n    \"\"\"", "\n", "n_tags", "=", "len", "(", "ts_tag_sequence", ")", "\n", "ts_sequence", ",", "sentiments", "=", "[", "]", ",", "[", "]", "\n", "beg", ",", "end", "=", "-", "1", ",", "-", "1", "\n", "for", "i", "in", "range", "(", "n_tags", ")", ":", "\n", "        ", "ts_tag", "=", "ts_tag_sequence", "[", "i", "]", "\n", "# current position and sentiment", "\n", "eles", "=", "ts_tag", ".", "split", "(", "'-'", ")", "\n", "if", "len", "(", "eles", ")", "==", "2", ":", "\n", "            ", "pos", ",", "sentiment", "=", "eles", "\n", "", "else", ":", "\n", "            ", "pos", ",", "sentiment", "=", "'O'", ",", "'O'", "\n", "", "if", "sentiment", "!=", "'O'", ":", "\n", "# current word is a subjective word", "\n", "            ", "sentiments", ".", "append", "(", "sentiment", ")", "\n", "", "if", "pos", "==", "'S'", ":", "\n", "# singleton", "\n", "            ", "ts_sequence", ".", "append", "(", "(", "i", ",", "i", ",", "sentiments", "[", "0", "]", ")", ")", "\n", "sentiments", "=", "[", "]", "\n", "", "elif", "pos", "==", "'B'", ":", "\n", "            ", "beg", "=", "i", "\n", "", "elif", "pos", "==", "'E'", ":", "\n", "            ", "end", "=", "i", "\n", "# schema1: only the consistent sentiment tags are accepted", "\n", "# that is, all of the sentiment tags are the same", "\n", "if", "end", ">", "beg", ">", "-", "1", "and", "len", "(", "set", "(", "sentiments", ")", ")", "==", "1", ":", "\n", "                ", "ts_sequence", ".", "append", "(", "(", "beg", ",", "end", ",", "sentiment", ")", ")", "\n", "sentiments", "=", "[", "]", "\n", "beg", ",", "end", "=", "-", "1", ",", "-", "1", "\n", "", "", "", "return", "ts_sequence", "\n", "\n"]], "home.repos.pwc.inspect_result.hsqmlzno1_Transferable-E2E-ABSA.None.main.run": [[24, 99], ["len", "print", "time.time", "accumulator.Accumulator", "range", "print", "range", "S_batches.next", "T_batches.next", "numpy.vstack", "numpy.vstack", "numpy.hstack", "numpy.vstack", "numpy.vstack", "numpy.vstack", "numpy.vstack", "utils.get_train_feed_dict", "sess.run", "sess.run", "accumulator.Accumulator.add", "print", "print", "accumulator.Accumulator.output", "accumulator.Accumulator.clear", "utils.eval_metric", "print", "utils.eval_metric", "print", "print", "model.save_model", "print", "model.save_model", "time.time"], "function", ["home.repos.pwc.inspect_result.hsqmlzno1_Transferable-E2E-ABSA.None.utils.get_train_feed_dict", "home.repos.pwc.inspect_result.hsqmlzno1_Transferable-E2E-ABSA.None.main.run", "home.repos.pwc.inspect_result.hsqmlzno1_Transferable-E2E-ABSA.None.main.run", "home.repos.pwc.inspect_result.hsqmlzno1_Transferable-E2E-ABSA.None.utils.eval_metric", "home.repos.pwc.inspect_result.hsqmlzno1_Transferable-E2E-ABSA.None.utils.eval_metric", "home.repos.pwc.inspect_result.hsqmlzno1_Transferable-E2E-ABSA.models.model.Trans_E2E_ABSA.save_model", "home.repos.pwc.inspect_result.hsqmlzno1_Transferable-E2E-ABSA.models.model.Trans_E2E_ABSA.save_model"], ["def", "run", "(", "sess", ",", "batch_gen", ",", "dataset", ",", "model", ",", "params", ")", ":", "\n", "\n", "    ", "S_batches", ",", "T_batches", "=", "batch_gen", "\n", "train_set", ",", "val_set", ",", "tar_un_set", ",", "test_set", "=", "dataset", "\n", "\n", "n_train", "=", "len", "(", "train_set", "[", "'lm_labels'", "]", ")", "\n", "batch_num", "=", "n_train", "/", "params", ".", "batch_size", "\n", "print", "(", "'training number:%d, batch num:%d'", "%", "(", "n_train", ",", "batch_num", ")", ")", "\n", "\n", "best_val_ote_score", ",", "best_val_ts_score", "=", "-", "999.0", ",", "-", "999.0", "\n", "best_epoch", "=", "-", "1", "\n", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "losses", "=", "Accumulator", "(", "[", "'loss'", ",", "'asp_loss'", ",", "'ts_loss'", ",", "'opn_loss'", ",", "'ote_transfer_loss'", "]", ",", "batch_num", ")", "\n", "\n", "for", "epoch", "in", "range", "(", "params", ".", "n_epoch", ")", ":", "\n", "\n", "        ", "cur_lr", "=", "params", ".", "lr", "\n", "\n", "for", "i", "in", "range", "(", "batch_num", ")", ":", "\n", "\n", "            ", "xs", ",", "win_xs", ",", "length_s", ",", "ys_ote", ",", "ys_ts", ",", "ys_opn", ",", "ys_stm", ",", "_", ",", "_", "=", "S_batches", ".", "next", "(", ")", "\n", "xt", ",", "win_xt", ",", "length_t", ",", "yt_ote", ",", "yt_ts", ",", "yt_opn", ",", "yt_stm", ",", "_", ",", "_", "=", "T_batches", ".", "next", "(", ")", "\n", "x", "=", "np", ".", "vstack", "(", "[", "xs", ",", "xt", "]", ")", "\n", "win_x", "=", "np", ".", "vstack", "(", "[", "win_xs", ",", "win_xt", "]", ")", "\n", "length", "=", "np", ".", "hstack", "(", "[", "length_s", ",", "length_t", "]", ")", "\n", "y_ote", "=", "np", ".", "vstack", "(", "[", "ys_ote", ",", "yt_ote", "]", ")", "\n", "y_ts", "=", "np", ".", "vstack", "(", "[", "ys_ts", ",", "yt_ts", "]", ")", "\n", "y_opn", "=", "np", ".", "vstack", "(", "[", "ys_opn", ",", "yt_opn", "]", ")", "\n", "y_stm", "=", "np", ".", "vstack", "(", "[", "ys_stm", ",", "yt_stm", "]", ")", "\n", "\n", "feed_dict", "=", "get_train_feed_dict", "(", "model", ",", "x", ",", "win_x", ",", "length", ",", "y_ote", ",", "y_ts", ",", "y_opn", ",", "y_stm", ",", "cur_lr", ",", "params", ".", "dropout_rate", ",", "train_flag", "=", "True", ")", "\n", "\n", "_", ",", "loss", ",", "asp_loss", ",", "ts_loss", ",", "opn_loss", "=", "sess", ".", "run", "(", "[", "model", ".", "train_op", ",", "model", ".", "loss", ",", "model", ".", "asp_loss", ",", "model", ".", "ts_loss", ",", "model", ".", "opn_loss", "]", ",", "feed_dict", "=", "feed_dict", ")", "\n", "_", ",", "ote_transfer_loss", "=", "sess", ".", "run", "(", "[", "model", ".", "ote_transfer_op", ",", "model", ".", "ote_transfer_loss", "]", ",", "feed_dict", "=", "feed_dict", ")", "\n", "losses", ".", "add", "(", "[", "loss", ",", "asp_loss", ",", "ts_loss", ",", "opn_loss", ",", "ote_transfer_loss", "]", ")", "\n", "\n", "", "if", "epoch", "%", "params", ".", "evaluation_interval", "==", "0", ":", "\n", "\n", "            ", "print", "(", "'--------------------epoch %d--------------------'", "%", "(", "epoch", "+", "1", ")", ")", "\n", "print", "(", "'learning_rate:'", ",", "cur_lr", ")", "\n", "\n", "losses", ".", "output", "(", "'time %.5fs,'", "%", "(", "time", ".", "time", "(", ")", "-", "start_time", ")", ")", "\n", "losses", ".", "clear", "(", ")", "\n", "\n", "train_ote_scores", ",", "train_ts_scores", ",", "_", ",", "_", "=", "eval_metric", "(", "sess", ",", "model", ",", "params", ",", "train_set", ",", "domain_flag", "=", "True", ")", "\n", "train_ote_p", ",", "train_ote_r", ",", "train_ote_f1", "=", "train_ote_scores", "\n", "train_ts_macro_f1", ",", "train_ts_micro_p", ",", "train_ts_micro_r", ",", "train_ts_micro_f1", "=", "train_ts_scores", "\n", "\n", "print", "(", "\"train performance: ote: precision: %.4f, recall: %.4f, f1: %.4f, ts: precision: %.4f, recall: %.4f, micro-f1: %.4f\"", "\n", "%", "(", "train_ote_p", ",", "train_ote_r", ",", "train_ote_f1", ",", "train_ts_micro_p", ",", "train_ts_micro_r", ",", "train_ts_micro_f1", ")", ")", "\n", "\n", "val_ote_scores", ",", "val_ts_scores", ",", "_", ",", "_", "=", "eval_metric", "(", "sess", ",", "model", ",", "params", ",", "val_set", ",", "domain_flag", "=", "True", ")", "\n", "val_ote_p", ",", "val_ote_r", ",", "val_ote_f1", "=", "val_ote_scores", "\n", "val_ts_macro_f1", ",", "val_ts_micro_p", ",", "val_ts_micro_r", ",", "val_ts_micro_f1", "=", "val_ts_scores", "\n", "\n", "print", "(", "\"val performance: ote: precision: %.4f, recall: %.4f, f1: %.4f, ts: precision: %.4f, recall: %.4f, micro-f1: %.4f\"", "\n", "%", "(", "val_ote_p", ",", "val_ote_r", ",", "val_ote_f1", ",", "val_ts_micro_p", ",", "val_ts_micro_r", ",", "val_ts_micro_f1", ")", ")", "\n", "\n", "if", "args", ".", "selection_schema", "==", "'OTE_TS'", ":", "\n", "                ", "if", "val_ts_micro_f1", ">", "best_val_ts_score", "and", "val_ote_f1", ">", "best_val_ote_score", ":", "\n", "                    ", "best_val_ts_score", "=", "val_ts_micro_f1", "\n", "best_val_ote_score", "=", "val_ote_f1", "\n", "best_epoch", "=", "epoch", "+", "1", "\n", "print", "(", "\"Save...\"", ")", "\n", "model", ".", "save_model", "(", "sess", ")", "\n", "", "", "if", "args", ".", "selection_schema", "==", "'TS'", ":", "\n", "                ", "if", "val_ts_micro_f1", ">", "best_val_ts_score", ":", "\n", "                    ", "best_val_ts_score", "=", "val_ts_micro_f1", "\n", "best_val_ote_score", "=", "val_ote_f1", "\n", "best_epoch", "=", "epoch", "+", "1", "\n", "print", "(", "\"Save...\"", ")", "\n", "model", ".", "save_model", "(", "sess", ")", "\n", "\n", "", "", "", "", "print", "(", "'Store the best model at the epoch: %d\\n'", "%", "best_epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hsqmlzno1_Transferable-E2E-ABSA.None.utils.ot2bio_ote": [[11, 34], ["len", "range", "new_ote_sequence.append", "new_ote_sequence.append", "new_ote_sequence.append"], "function", ["None"], ["def", "ot2bio_ote", "(", "ote_tag_sequence", ")", ":", "\n", "    ", "\"\"\"\n    ot2bio function for ote tag sequence\n    :param ote_tag_sequence:\n    :return:\n    \"\"\"", "\n", "new_ote_sequence", "=", "[", "]", "\n", "n_tag", "=", "len", "(", "ote_tag_sequence", ")", "\n", "prev_ote_tag", "=", "'$$$'", "\n", "for", "i", "in", "range", "(", "n_tag", ")", ":", "\n", "        ", "cur_ote_tag", "=", "ote_tag_sequence", "[", "i", "]", "\n", "assert", "cur_ote_tag", "==", "'O'", "or", "cur_ote_tag", "==", "'T'", "\n", "if", "cur_ote_tag", "==", "'O'", ":", "\n", "            ", "new_ote_sequence", ".", "append", "(", "cur_ote_tag", ")", "\n", "", "else", ":", "\n", "# cur_ote_tag is T", "\n", "            ", "if", "prev_ote_tag", "==", "'T'", ":", "\n", "                ", "new_ote_sequence", ".", "append", "(", "'I'", ")", "\n", "", "else", ":", "\n", "# cur tag is at the beginning of the opinion target", "\n", "                ", "new_ote_sequence", ".", "append", "(", "'B'", ")", "\n", "", "", "prev_ote_tag", "=", "cur_ote_tag", "\n", "", "return", "new_ote_sequence", "\n", "\n"]], "home.repos.pwc.inspect_result.hsqmlzno1_Transferable-E2E-ABSA.None.utils.ot2bio_ts": [[36, 62], ["len", "range", "new_ts_sequence.append", "cur_ts_tag.split", "new_ts_sequence.append", "new_ts_sequence.append"], "function", ["None"], ["", "def", "ot2bio_ts", "(", "ts_tag_sequence", ")", ":", "\n", "    ", "\"\"\"\n    ot2bio function for ts tag sequence\n    :param ts_tag_sequence:\n    :return:\n    \"\"\"", "\n", "new_ts_sequence", "=", "[", "]", "\n", "n_tag", "=", "len", "(", "ts_tag_sequence", ")", "\n", "prev_pos", "=", "'$$$'", "\n", "for", "i", "in", "range", "(", "n_tag", ")", ":", "\n", "        ", "cur_ts_tag", "=", "ts_tag_sequence", "[", "i", "]", "\n", "if", "cur_ts_tag", "==", "'O'", ":", "\n", "            ", "new_ts_sequence", ".", "append", "(", "'O'", ")", "\n", "cur_pos", "=", "'O'", "\n", "", "else", ":", "\n", "# current tag is subjective tag, i.e., cur_pos is T", "\n", "# print(cur_ts_tag)", "\n", "            ", "cur_pos", ",", "cur_sentiment", "=", "cur_ts_tag", ".", "split", "(", "'-'", ")", "\n", "if", "cur_pos", "==", "prev_pos", ":", "\n", "# prev_pos is T", "\n", "                ", "new_ts_sequence", ".", "append", "(", "'I-%s'", "%", "cur_sentiment", ")", "\n", "", "else", ":", "\n", "# prev_pos is O", "\n", "                ", "new_ts_sequence", ".", "append", "(", "'B-%s'", "%", "cur_sentiment", ")", "\n", "", "", "prev_pos", "=", "cur_pos", "\n", "", "return", "new_ts_sequence", "\n", "\n"]], "home.repos.pwc.inspect_result.hsqmlzno1_Transferable-E2E-ABSA.None.utils.ot2bio": [[64, 76], ["utils.ot2bio_ote", "utils.ot2bio_ts", "len", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.hsqmlzno1_Transferable-E2E-ABSA.None.utils.ot2bio_ote", "home.repos.pwc.inspect_result.hsqmlzno1_Transferable-E2E-ABSA.None.utils.ot2bio_ts"], ["", "def", "ot2bio", "(", "ote_tag_sequence", ",", "ts_tag_sequence", ")", ":", "\n", "    ", "\"\"\"\n    perform ot--->bio for both ote tag sequence and ts tag sequence\n    :param ote_tag_sequence: input tag sequence of opinion target extraction\n    :param ts_tag_sequence: input tag sequence of targeted sentiment\n    :return:\n    \"\"\"", "\n", "new_ote_sequence", "=", "ot2bio_ote", "(", "ote_tag_sequence", "=", "ote_tag_sequence", ")", "\n", "new_ts_sequence", "=", "ot2bio_ts", "(", "ts_tag_sequence", "=", "ts_tag_sequence", ")", "\n", "assert", "len", "(", "new_ts_sequence", ")", "==", "len", "(", "ts_tag_sequence", ")", "\n", "assert", "len", "(", "new_ote_sequence", ")", "==", "len", "(", "ote_tag_sequence", ")", "\n", "return", "new_ote_sequence", ",", "new_ts_sequence", "\n", "\n"]], "home.repos.pwc.inspect_result.hsqmlzno1_Transferable-E2E-ABSA.None.utils.ot2bio_ote_batch": [[78, 90], ["len", "range", "utils.ot2bio_ote", "new_ote_tag_seqs.append"], "function", ["home.repos.pwc.inspect_result.hsqmlzno1_Transferable-E2E-ABSA.None.utils.ot2bio_ote"], ["", "def", "ot2bio_ote_batch", "(", "ote_tag_seqs", ")", ":", "\n", "    ", "\"\"\"\n    batch version of function ot2bio_ote\n    :param ote_tags:\n    :return:\n    \"\"\"", "\n", "new_ote_tag_seqs", "=", "[", "]", "\n", "n_seqs", "=", "len", "(", "ote_tag_seqs", ")", "\n", "for", "i", "in", "range", "(", "n_seqs", ")", ":", "\n", "        ", "new_ote_seq", "=", "ot2bio_ote", "(", "ote_tag_sequence", "=", "ote_tag_seqs", "[", "i", "]", ")", "\n", "new_ote_tag_seqs", ".", "append", "(", "new_ote_seq", ")", "\n", "", "return", "new_ote_tag_seqs", "\n", "\n"]], "home.repos.pwc.inspect_result.hsqmlzno1_Transferable-E2E-ABSA.None.utils.ot2bio_ts_batch": [[92, 104], ["len", "range", "utils.ot2bio_ts", "new_ts_tag_seqs.append"], "function", ["home.repos.pwc.inspect_result.hsqmlzno1_Transferable-E2E-ABSA.None.utils.ot2bio_ts"], ["", "def", "ot2bio_ts_batch", "(", "ts_tag_seqs", ")", ":", "\n", "    ", "\"\"\"\n    batch version of function ot2bio_ts\n    :param ts_tag_seqs:\n    :return:\n    \"\"\"", "\n", "new_ts_tag_seqs", "=", "[", "]", "\n", "n_seqs", "=", "len", "(", "ts_tag_seqs", ")", "\n", "for", "i", "in", "range", "(", "n_seqs", ")", ":", "\n", "        ", "new_ts_seq", "=", "ot2bio_ts", "(", "ts_tag_sequence", "=", "ts_tag_seqs", "[", "i", "]", ")", "\n", "new_ts_tag_seqs", ".", "append", "(", "new_ts_seq", ")", "\n", "", "return", "new_ts_tag_seqs", "\n", "\n"]], "home.repos.pwc.inspect_result.hsqmlzno1_Transferable-E2E-ABSA.None.utils.ot2bio_batch": [[106, 121], ["len", "range", "len", "len", "utils.ot2bio", "new_ote_tags.append", "new_ts_tags.append"], "function", ["home.repos.pwc.inspect_result.hsqmlzno1_Transferable-E2E-ABSA.None.utils.ot2bio"], ["", "def", "ot2bio_batch", "(", "ote_tags", ",", "ts_tags", ")", ":", "\n", "    ", "\"\"\"\n    batch version of function ot2bio\n    :param ote_tags: a batch of ote tag sequence\n    :param ts_tags: a batch of ts tag sequence\n    :return:\n    \"\"\"", "\n", "new_ote_tags", ",", "new_ts_tags", "=", "[", "]", ",", "[", "]", "\n", "assert", "len", "(", "ote_tags", ")", "==", "len", "(", "ts_tags", ")", "\n", "n_seqs", "=", "len", "(", "ote_tags", ")", "\n", "for", "i", "in", "range", "(", "n_seqs", ")", ":", "\n", "        ", "ote", ",", "ts", "=", "ot2bio", "(", "ote_tag_sequence", "=", "ote_tags", "[", "i", "]", ",", "ts_tag_sequence", "=", "ts_tags", "[", "i", "]", ")", "\n", "new_ote_tags", ".", "append", "(", "ote", ")", "\n", "new_ts_tags", ".", "append", "(", "ts", ")", "\n", "", "return", "new_ote_tags", ",", "new_ts_tags", "\n", "\n"]], "home.repos.pwc.inspect_result.hsqmlzno1_Transferable-E2E-ABSA.None.utils.ot2bieos_ote": [[123, 162], ["len", "range", "new_ote_sequence.append", "new_ote_sequence.append", "new_ote_sequence.append", "new_ote_sequence.append", "new_ote_sequence.append", "new_ote_sequence.append", "Exception", "new_ote_sequence.append", "Exception"], "function", ["None"], ["", "def", "ot2bieos_ote", "(", "ote_tag_sequence", ")", ":", "\n", "    ", "\"\"\"\n    ot2bieos function for ote task\n    :param ote_tag_sequence:\n    :return:\n    \"\"\"", "\n", "n_tags", "=", "len", "(", "ote_tag_sequence", ")", "\n", "new_ote_sequence", "=", "[", "]", "\n", "prev_ote_tag", "=", "'$$$'", "\n", "for", "i", "in", "range", "(", "n_tags", ")", ":", "\n", "        ", "cur_ote_tag", "=", "ote_tag_sequence", "[", "i", "]", "\n", "if", "cur_ote_tag", "==", "'O'", ":", "\n", "            ", "new_ote_sequence", ".", "append", "(", "'O'", ")", "\n", "", "else", ":", "\n", "# cur_ote_tag is T", "\n", "            ", "if", "prev_ote_tag", "!=", "cur_ote_tag", ":", "\n", "# prev_ote_tag is O, new_cur_tag can only be B or S", "\n", "                ", "if", "i", "==", "n_tags", "-", "1", ":", "\n", "                    ", "new_ote_sequence", ".", "append", "(", "'S'", ")", "\n", "", "elif", "ote_tag_sequence", "[", "i", "+", "1", "]", "==", "cur_ote_tag", ":", "\n", "                    ", "new_ote_sequence", ".", "append", "(", "'B'", ")", "\n", "", "elif", "ote_tag_sequence", "[", "i", "+", "1", "]", "!=", "cur_ote_tag", ":", "\n", "                    ", "new_ote_sequence", ".", "append", "(", "'S'", ")", "\n", "", "else", ":", "\n", "                    ", "raise", "Exception", "(", "\"Invalid ner tag value: %s\"", "%", "cur_ote_tag", ")", "\n", "", "", "else", ":", "\n", "# prev_tag is T, new_cur_tag can only be I or E", "\n", "                ", "if", "i", "==", "n_tags", "-", "1", ":", "\n", "                    ", "new_ote_sequence", ".", "append", "(", "'E'", ")", "\n", "", "elif", "ote_tag_sequence", "[", "i", "+", "1", "]", "==", "cur_ote_tag", ":", "\n", "# next_tag is T", "\n", "                    ", "new_ote_sequence", ".", "append", "(", "'I'", ")", "\n", "", "elif", "ote_tag_sequence", "[", "i", "+", "1", "]", "!=", "cur_ote_tag", ":", "\n", "# next_tag is O", "\n", "                    ", "new_ote_sequence", ".", "append", "(", "'E'", ")", "\n", "", "else", ":", "\n", "                    ", "raise", "Exception", "(", "\"Invalid ner tag value: %s\"", "%", "cur_ote_tag", ")", "\n", "", "", "", "prev_ote_tag", "=", "cur_ote_tag", "\n", "", "return", "new_ote_sequence", "\n", "\n"]], "home.repos.pwc.inspect_result.hsqmlzno1_Transferable-E2E-ABSA.None.utils.ot2bieos_ts": [[164, 203], ["len", "range", "new_ts_sequence.append", "cur_ts_tag.split", "new_ts_sequence.append", "new_ts_sequence.append", "new_ts_sequence.append", "new_ts_sequence.append", "new_ts_sequence.append", "new_ts_sequence.append"], "function", ["None"], ["", "def", "ot2bieos_ts", "(", "ts_tag_sequence", ")", ":", "\n", "    ", "\"\"\"\n    ot2bieos function for ts task\n    :param ts_tag_sequence: tag sequence for targeted sentiment\n    :return:\n    \"\"\"", "\n", "n_tags", "=", "len", "(", "ts_tag_sequence", ")", "\n", "new_ts_sequence", "=", "[", "]", "\n", "prev_pos", "=", "'$$$'", "\n", "for", "i", "in", "range", "(", "n_tags", ")", ":", "\n", "        ", "cur_ts_tag", "=", "ts_tag_sequence", "[", "i", "]", "\n", "if", "cur_ts_tag", "==", "'O'", ":", "\n", "            ", "new_ts_sequence", ".", "append", "(", "'O'", ")", "\n", "cur_pos", "=", "'O'", "\n", "", "else", ":", "\n", "            ", "cur_pos", ",", "cur_sentiment", "=", "cur_ts_tag", ".", "split", "(", "'-'", ")", "\n", "# cur_pos is T", "\n", "if", "cur_pos", "!=", "prev_pos", ":", "\n", "# prev_pos is O and new_cur_pos can only be B or S", "\n", "                ", "if", "i", "==", "n_tags", "-", "1", ":", "\n", "                    ", "new_ts_sequence", ".", "append", "(", "'S-%s'", "%", "cur_sentiment", ")", "\n", "", "else", ":", "\n", "                    ", "next_ts_tag", "=", "ts_tag_sequence", "[", "i", "+", "1", "]", "\n", "if", "next_ts_tag", "==", "'O'", ":", "\n", "                        ", "new_ts_sequence", ".", "append", "(", "'S-%s'", "%", "cur_sentiment", ")", "\n", "", "else", ":", "\n", "                        ", "new_ts_sequence", ".", "append", "(", "'B-%s'", "%", "cur_sentiment", ")", "\n", "", "", "", "else", ":", "\n", "# prev_pos is T and new_cur_pos can only be I or E", "\n", "                ", "if", "i", "==", "n_tags", "-", "1", ":", "\n", "                    ", "new_ts_sequence", ".", "append", "(", "'E-%s'", "%", "cur_sentiment", ")", "\n", "", "else", ":", "\n", "                    ", "next_ts_tag", "=", "ts_tag_sequence", "[", "i", "+", "1", "]", "\n", "if", "next_ts_tag", "==", "'O'", ":", "\n", "                        ", "new_ts_sequence", ".", "append", "(", "'E-%s'", "%", "cur_sentiment", ")", "\n", "", "else", ":", "\n", "                        ", "new_ts_sequence", ".", "append", "(", "'I-%s'", "%", "cur_sentiment", ")", "\n", "", "", "", "", "prev_pos", "=", "cur_pos", "\n", "", "return", "new_ts_sequence", "\n", "\n"]], "home.repos.pwc.inspect_result.hsqmlzno1_Transferable-E2E-ABSA.None.utils.ot2bieos": [[205, 218], ["utils.ot2bieos_ote", "utils.ot2bieos_ts", "len", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.hsqmlzno1_Transferable-E2E-ABSA.None.utils.ot2bieos_ote", "home.repos.pwc.inspect_result.hsqmlzno1_Transferable-E2E-ABSA.None.utils.ot2bieos_ts"], ["", "def", "ot2bieos", "(", "ote_tag_sequence", ",", "ts_tag_sequence", ")", ":", "\n", "    ", "\"\"\"\n    perform ot-->bieos for both ote tag and ts tag sequence\n    :param ote_tag_sequence: input tag sequence of opinion target extraction\n    :param ts_tag_sequence: input tag sequence of targeted sentiment\n    :return:\n    \"\"\"", "\n", "# new tag sequences of opinion target extraction and targeted sentiment", "\n", "new_ote_sequence", "=", "ot2bieos_ote", "(", "ote_tag_sequence", "=", "ote_tag_sequence", ")", "\n", "new_ts_sequence", "=", "ot2bieos_ts", "(", "ts_tag_sequence", "=", "ts_tag_sequence", ")", "\n", "assert", "len", "(", "ote_tag_sequence", ")", "==", "len", "(", "new_ote_sequence", ")", "\n", "assert", "len", "(", "ts_tag_sequence", ")", "==", "len", "(", "new_ts_sequence", ")", "\n", "return", "new_ote_sequence", ",", "new_ts_sequence", "\n", "\n"]], "home.repos.pwc.inspect_result.hsqmlzno1_Transferable-E2E-ABSA.None.utils.ot2bieos_ote_batch": [[220, 232], ["len", "range", "utils.ot2bieos_ote", "new_ote_tag_seqs.append"], "function", ["home.repos.pwc.inspect_result.hsqmlzno1_Transferable-E2E-ABSA.None.utils.ot2bieos_ote"], ["", "def", "ot2bieos_ote_batch", "(", "ote_tag_seqs", ")", ":", "\n", "    ", "\"\"\"\n    batch version of function ot2bieos_ote\n    :param ote_tags:\n    :return:\n    \"\"\"", "\n", "new_ote_tag_seqs", "=", "[", "]", "\n", "n_seqs", "=", "len", "(", "ote_tag_seqs", ")", "\n", "for", "i", "in", "range", "(", "n_seqs", ")", ":", "\n", "        ", "new_ote_seq", "=", "ot2bieos_ote", "(", "ote_tag_sequence", "=", "ote_tag_seqs", "[", "i", "]", ")", "\n", "new_ote_tag_seqs", ".", "append", "(", "new_ote_seq", ")", "\n", "", "return", "new_ote_tag_seqs", "\n", "\n"]], "home.repos.pwc.inspect_result.hsqmlzno1_Transferable-E2E-ABSA.None.utils.ot2bieos_ts_batch": [[234, 246], ["len", "range", "utils.ot2bieos_ts", "new_ts_tag_seqs.append"], "function", ["home.repos.pwc.inspect_result.hsqmlzno1_Transferable-E2E-ABSA.None.utils.ot2bieos_ts"], ["", "def", "ot2bieos_ts_batch", "(", "ts_tag_seqs", ")", ":", "\n", "    ", "\"\"\"\n    batch version of function ot2bieos_ts\n    :param ts_tag_seqs:\n    :return:\n    \"\"\"", "\n", "new_ts_tag_seqs", "=", "[", "]", "\n", "n_seqs", "=", "len", "(", "ts_tag_seqs", ")", "\n", "for", "i", "in", "range", "(", "n_seqs", ")", ":", "\n", "        ", "new_ts_seq", "=", "ot2bieos_ts", "(", "ts_tag_sequence", "=", "ts_tag_seqs", "[", "i", "]", ")", "\n", "new_ts_tag_seqs", ".", "append", "(", "new_ts_seq", ")", "\n", "", "return", "new_ts_tag_seqs", "\n", "\n"]], "home.repos.pwc.inspect_result.hsqmlzno1_Transferable-E2E-ABSA.None.utils.ot2bieos_batch": [[248, 266], ["len", "range", "len", "len", "utils.ot2bieos", "new_ote_tags.append", "new_ts_tags.append"], "function", ["home.repos.pwc.inspect_result.hsqmlzno1_Transferable-E2E-ABSA.None.utils.ot2bieos"], ["", "def", "ot2bieos_batch", "(", "ote_tags", ",", "ts_tags", ")", ":", "\n", "    ", "\"\"\"\n    batch version of function ot2bieos\n    :param ote_tags: a batch of ote tag sequence\n    :param ts_tags: a batch of ts tag sequence\n    :return:\n    :param ote_tags:\n    :param ts_tags:\n    :return:\n    \"\"\"", "\n", "new_ote_tags", ",", "new_ts_tags", "=", "[", "]", ",", "[", "]", "\n", "assert", "len", "(", "ote_tags", ")", "==", "len", "(", "ts_tags", ")", "\n", "n_seqs", "=", "len", "(", "ote_tags", ")", "\n", "for", "i", "in", "range", "(", "n_seqs", ")", ":", "\n", "        ", "ote", ",", "ts", "=", "ot2bieos", "(", "ote_tag_sequence", "=", "ote_tags", "[", "i", "]", ",", "ts_tag_sequence", "=", "ts_tags", "[", "i", "]", ")", "\n", "new_ote_tags", ".", "append", "(", "ote", ")", "\n", "new_ts_tags", ".", "append", "(", "ts", ")", "\n", "", "return", "new_ote_tags", ",", "new_ts_tags", "\n", "\n"]], "home.repos.pwc.inspect_result.hsqmlzno1_Transferable-E2E-ABSA.None.utils.bio2ot_ote": [[268, 283], ["len", "range", "new_ote_sequence.append", "new_ote_sequence.append"], "function", ["None"], ["", "def", "bio2ot_ote", "(", "ote_tag_sequence", ")", ":", "\n", "    ", "\"\"\"\n    perform bio-->ot for ote tag sequence\n    :param ote_tag_sequence:\n    :return:\n    \"\"\"", "\n", "new_ote_sequence", "=", "[", "]", "\n", "n_tags", "=", "len", "(", "ote_tag_sequence", ")", "\n", "for", "i", "in", "range", "(", "n_tags", ")", ":", "\n", "        ", "ote_tag", "=", "ote_tag_sequence", "[", "i", "]", "\n", "if", "ote_tag", "==", "'B'", "or", "ote_tag", "==", "'I'", ":", "\n", "            ", "new_ote_sequence", ".", "append", "(", "'T'", ")", "\n", "", "else", ":", "\n", "            ", "new_ote_sequence", ".", "append", "(", "'I'", ")", "\n", "", "", "return", "new_ote_sequence", "\n", "\n"]], "home.repos.pwc.inspect_result.hsqmlzno1_Transferable-E2E-ABSA.None.utils.bio2ot_ts": [[285, 301], ["len", "range", "new_ts_sequence.append", "ts_tag.split", "new_ts_sequence.append"], "function", ["None"], ["", "def", "bio2ot_ts", "(", "ts_tag_sequence", ")", ":", "\n", "    ", "\"\"\"\n    perform bio-->ot for ts tag sequence\n    :param ts_tag_sequence:\n    :return:\n    \"\"\"", "\n", "new_ts_sequence", "=", "[", "]", "\n", "n_tags", "=", "len", "(", "ts_tag_sequence", ")", "\n", "for", "i", "in", "range", "(", "n_tags", ")", ":", "\n", "        ", "ts_tag", "=", "ts_tag_sequence", "[", "i", "]", "\n", "if", "ts_tag", "==", "'O'", ":", "\n", "            ", "new_ts_sequence", ".", "append", "(", "'O'", ")", "\n", "", "else", ":", "\n", "            ", "pos", ",", "sentiment", "=", "ts_tag", ".", "split", "(", "'-'", ")", "\n", "new_ts_sequence", ".", "append", "(", "'T-%s'", "%", "sentiment", ")", "\n", "", "", "return", "new_ts_sequence", "\n", "\n"]], "home.repos.pwc.inspect_result.hsqmlzno1_Transferable-E2E-ABSA.None.utils.bio2ot": [[303, 316], ["utils.bio2ot_ote", "utils.bio2ot_ts", "len", "len", "len", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.hsqmlzno1_Transferable-E2E-ABSA.None.utils.bio2ot_ote", "home.repos.pwc.inspect_result.hsqmlzno1_Transferable-E2E-ABSA.None.utils.bio2ot_ts"], ["", "def", "bio2ot", "(", "ote_tag_sequence", ",", "ts_tag_sequence", ")", ":", "\n", "    ", "\"\"\"\n    perform bio-->ot for both ote and ts tag sequence\n    :param ote_tag_sequence: tag sequence for opinion target extraction\n    :param ts_tag_sequence: tag sequence for targeted sentiment\n    :return:\n    \"\"\"", "\n", "assert", "len", "(", "ote_tag_sequence", ")", "==", "len", "(", "ts_tag_sequence", ")", "\n", "new_ote_sequence", "=", "bio2ot_ote", "(", "ote_tag_sequence", "=", "ote_tag_sequence", ")", "\n", "new_ts_sequence", "=", "bio2ot_ts", "(", "ts_tag_sequence", "=", "ts_tag_sequence", ")", "\n", "assert", "len", "(", "new_ote_sequence", ")", "==", "len", "(", "ote_tag_sequence", ")", "\n", "assert", "len", "(", "new_ts_sequence", ")", "==", "len", "(", "ts_tag_sequence", ")", "\n", "return", "new_ote_sequence", ",", "new_ts_sequence", "\n", "\n"]], "home.repos.pwc.inspect_result.hsqmlzno1_Transferable-E2E-ABSA.None.utils.bio2ot_ote_batch": [[318, 330], ["len", "range", "utils.bio2ot_ote", "new_ote_tag_seqs.append"], "function", ["home.repos.pwc.inspect_result.hsqmlzno1_Transferable-E2E-ABSA.None.utils.bio2ot_ote"], ["", "def", "bio2ot_ote_batch", "(", "ote_tag_seqs", ")", ":", "\n", "    ", "\"\"\"\n    batch version of function bio2ot_ote\n    :param ote_tag_seqs: ote tag sequences\n    :return:\n    \"\"\"", "\n", "new_ote_tag_seqs", "=", "[", "]", "\n", "n_seqs", "=", "len", "(", "ote_tag_seqs", ")", "\n", "for", "i", "in", "range", "(", "n_seqs", ")", ":", "\n", "        ", "new_ote_seq", "=", "bio2ot_ote", "(", "ote_tag_sequence", "=", "ote_tag_seqs", "[", "i", "]", ")", "\n", "new_ote_tag_seqs", ".", "append", "(", "new_ote_seq", ")", "\n", "", "return", "new_ote_tag_seqs", "\n", "\n"]], "home.repos.pwc.inspect_result.hsqmlzno1_Transferable-E2E-ABSA.None.utils.bio2ot_ts_batch": [[332, 344], ["len", "range", "utils.bio2ot_ts", "new_ts_tag_seqs.append"], "function", ["home.repos.pwc.inspect_result.hsqmlzno1_Transferable-E2E-ABSA.None.utils.bio2ot_ts"], ["", "def", "bio2ot_ts_batch", "(", "ts_tag_seqs", ")", ":", "\n", "    ", "\"\"\"\n    batch version of function bio2ot_ts\n    :param ts_tag_seqs:\n    :return:\n    \"\"\"", "\n", "new_ts_tag_seqs", "=", "[", "]", "\n", "n_seqs", "=", "len", "(", "ts_tag_seqs", ")", "\n", "for", "i", "in", "range", "(", "n_seqs", ")", ":", "\n", "        ", "new_ts_seq", "=", "bio2ot_ts", "(", "ts_tag_sequence", "=", "ts_tag_seqs", "[", "i", "]", ")", "\n", "new_ts_tag_seqs", ".", "append", "(", "new_ts_seq", ")", "\n", "", "return", "new_ts_tag_seqs", "\n", "\n"]], "home.repos.pwc.inspect_result.hsqmlzno1_Transferable-E2E-ABSA.None.utils.bio2ot_batch": [[346, 361], ["len", "range", "len", "len", "utils.bio2ot", "new_ote_tags.append", "new_ts_tags.append"], "function", ["home.repos.pwc.inspect_result.hsqmlzno1_Transferable-E2E-ABSA.None.utils.bio2ot"], ["", "def", "bio2ot_batch", "(", "ote_tags", ",", "ts_tags", ")", ":", "\n", "    ", "\"\"\"\n    batch version of function bio2ot\n    :param ote_tags: a batch of ote tag sequence\n    :param ts_tags: a batch of ts tag sequence\n    :return:\n    \"\"\"", "\n", "new_ote_tags", ",", "new_ts_tags", "=", "[", "]", ",", "[", "]", "\n", "assert", "len", "(", "ote_tags", ")", "==", "len", "(", "ts_tags", ")", "\n", "n_seqs", "=", "len", "(", "ote_tags", ")", "\n", "for", "i", "in", "range", "(", "n_seqs", ")", ":", "\n", "        ", "ote", ",", "ts", "=", "bio2ot", "(", "ote_tag_sequence", "=", "ote_tags", "[", "i", "]", ",", "ts_tag_sequence", "=", "ts_tags", "[", "i", "]", ")", "\n", "new_ote_tags", ".", "append", "(", "ote", ")", "\n", "new_ts_tags", ".", "append", "(", "ts", ")", "\n", "", "return", "new_ote_tags", ",", "new_ts_tags", "\n", "\n"]], "home.repos.pwc.inspect_result.hsqmlzno1_Transferable-E2E-ABSA.None.utils.bieos2ot": [[364, 379], ["len", "len", "new_sequence.append", "new_sequence.append"], "function", ["None"], ["", "def", "bieos2ot", "(", "tag_sequence", ")", ":", "\n", "    ", "\"\"\"\n    transform BIEOS tag sequence to OT tag sequence\n    :param tag_sequence: input tag sequence\n    :return:\n    \"\"\"", "\n", "new_sequence", "=", "[", "]", "\n", "for", "t", "in", "tag_sequence", ":", "\n", "        ", "assert", "t", "==", "'B'", "or", "t", "==", "'I'", "or", "t", "==", "'E'", "or", "t", "==", "'O'", "or", "t", "==", "'S'", "\n", "if", "t", "==", "'O'", ":", "\n", "            ", "new_sequence", ".", "append", "(", "t", ")", "\n", "", "else", ":", "\n", "            ", "new_sequence", ".", "append", "(", "'T'", ")", "\n", "", "", "assert", "len", "(", "new_sequence", ")", "==", "len", "(", "tag_sequence", ")", "\n", "return", "new_sequence", "\n", "\n"]], "home.repos.pwc.inspect_result.hsqmlzno1_Transferable-E2E-ABSA.None.utils.get_vocab": [[381, 415], ["print", "print", "list", "print", "set", "len", "len", "len", "len"], "function", ["None"], ["", "def", "get_vocab", "(", "data_set", ")", ":", "\n", "    ", "\"\"\"\n    build the vocabulary of the whole dataset\n    :param train_set:\n    :param test_set:\n    :return:\n    \"\"\"", "\n", "vocab", "=", "{", "'PADDING'", ":", "0", ",", "'PUNCT'", ":", "1", "}", "\n", "inv_vocab", "=", "{", "0", ":", "'PADDING'", ",", "1", ":", "'PUNCT'", "}", "\n", "wid", "=", "2", "\n", "max_len", "=", "-", "1", "\n", "for", "record", "in", "data_set", ":", "\n", "        ", "assert", "'words'", "in", "record", "\n", "words", "=", "record", "[", "'words'", "]", "\n", "if", "len", "(", "words", ")", ">", "max_len", ":", "\n", "            ", "max_len", "=", "len", "(", "words", ")", "\n", "", "for", "w", "in", "words", ":", "\n", "            ", "if", "w", "not", "in", "vocab", ":", "\n", "                ", "vocab", "[", "w", "]", "=", "wid", "\n", "inv_vocab", "[", "wid", "]", "=", "w", "\n", "wid", "+=", "1", "\n", "", "", "", "print", "(", "\"The maximum length of the sentence is %d\"", "%", "max_len", ")", "\n", "print", "(", "\"Find %s different words in the dataset\"", "%", "len", "(", "vocab", ")", ")", "\n", "char_string", "=", "''", "\n", "for", "w", "in", "vocab", ":", "\n", "        ", "char_string", "+=", "w", "\n", "", "chars", "=", "list", "(", "set", "(", "char_string", ")", ")", "\n", "cid", ",", "char_vocab", "=", "0", ",", "{", "}", "\n", "for", "ch", "in", "chars", ":", "\n", "        ", "if", "ch", "not", "in", "char_vocab", ":", "\n", "            ", "char_vocab", "[", "ch", "]", "=", "cid", "\n", "cid", "+=", "1", "\n", "", "", "print", "(", "\"Find %s different chars in the dataset\"", "%", "len", "(", "char_vocab", ")", ")", "\n", "return", "vocab", ",", "char_vocab", ",", "max_len", "\n", "\n"]], "home.repos.pwc.inspect_result.hsqmlzno1_Transferable-E2E-ABSA.None.utils.read_lexicon": [[417, 437], ["fp.close", "open", "line.strip().split", "int", "line.strip"], "function", ["None"], ["", "def", "read_lexicon", "(", ")", ":", "\n", "    ", "\"\"\"\n    read sentiment lexicon from the disk\n    :return:\n    \"\"\"", "\n", "# path = 'mpqa_full.txt'", "\n", "\n", "path_list", "=", "[", "'mpqa_full.txt'", ",", "'sent_lexicon_14semeval_laptop.txt'", ",", "\n", "'sent_lexicon_15semeval_rest.txt'", ",", "\n", "'sent_lexicon_16semeval_rest.txt'", "]", "\n", "sent_lexicon", "=", "{", "}", "\n", "for", "path", "in", "path_list", ":", "\n", "        ", "with", "open", "(", "'work/lexicon/'", "+", "path", ")", "as", "fp", ":", "\n", "            ", "for", "line", "in", "fp", ":", "\n", "                ", "word", ",", "polarity", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "'\\t'", ")", "\n", "if", "word", "not", "in", "sent_lexicon", ":", "\n", "                    ", "sent_lexicon", "[", "word", "]", "=", "int", "(", "polarity", ")", "\n", "", "", "", "fp", ".", "close", "(", ")", "\n", "\n", "", "return", "sent_lexicon", "\n", "\n"]], "home.repos.pwc.inspect_result.hsqmlzno1_Transferable-E2E-ABSA.None.utils.read_data": [[439, 502], ["print", "open", "line.strip().split", "tag_string.split", "item.split", "list", "list", "list", "dataset.append", "len", "line.strip", "len", "words.append", "words.append", "ote_tags.append", "ts_tags.append", "len", "word.lower", "ote_tags.append", "ts_tags.append", "ote_tags.append", "ts_tags.append", "len", "ote_tags.append", "ts_tags.append", "Exception"], "function", ["None"], ["", "def", "read_data", "(", "path", ")", ":", "\n", "    ", "\"\"\"\n    read data from the specified path\n    :param path: path of dataset\n    :return:\n    \"\"\"", "\n", "dataset", "=", "[", "]", "\n", "with", "open", "(", "path", ")", "as", "fp", ":", "\n", "        ", "for", "line", "in", "fp", ":", "\n", "            ", "record", "=", "{", "}", "\n", "# print(line.strip())", "\n", "# print(line.strip().split('####'))", "\n", "sent", ",", "tag_string", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "'####'", ")", "\n", "\n", "record", "[", "'sentence'", "]", "=", "sent", "\n", "word_tag_pairs", "=", "tag_string", ".", "split", "(", "' '", ")", "\n", "# tag sequence for targeted sentiment", "\n", "ts_tags", "=", "[", "]", "\n", "# tag sequence for opinion target extraction", "\n", "ote_tags", "=", "[", "]", "\n", "# word sequence", "\n", "words", "=", "[", "]", "\n", "for", "item", "in", "word_tag_pairs", ":", "\n", "# valid label is: O, T-POS, T-NEG, T-NEU", "\n", "                ", "eles", "=", "item", ".", "split", "(", "'='", ")", "\n", "if", "len", "(", "eles", ")", "==", "2", ":", "\n", "                    ", "word", ",", "tag", "=", "eles", "\n", "", "elif", "len", "(", "eles", ")", ">", "2", ":", "\n", "                    ", "tag", "=", "eles", "[", "-", "1", "]", "\n", "word", "=", "(", "len", "(", "eles", ")", "-", "2", ")", "*", "\"=\"", "\n", "", "if", "word", "not", "in", "string", ".", "punctuation", ":", "\n", "# lowercase the words", "\n", "                    ", "words", ".", "append", "(", "word", ".", "lower", "(", ")", ")", "\n", "", "else", ":", "\n", "# replace punctuations with a special token", "\n", "                    ", "words", ".", "append", "(", "'PUNCT'", ")", "\n", "", "if", "tag", "==", "'O'", ":", "\n", "                    ", "ote_tags", ".", "append", "(", "'O'", ")", "\n", "ts_tags", ".", "append", "(", "'O'", ")", "\n", "", "elif", "tag", "==", "'T-POS'", ":", "\n", "                    ", "ote_tags", ".", "append", "(", "'T'", ")", "\n", "ts_tags", ".", "append", "(", "'T-POS'", ")", "\n", "", "elif", "tag", "==", "'T-NEG'", ":", "\n", "                    ", "ote_tags", ".", "append", "(", "'T'", ")", "\n", "ts_tags", ".", "append", "(", "'T-NEG'", ")", "\n", "", "elif", "tag", "==", "'T-NEU'", ":", "\n", "                    ", "ote_tags", ".", "append", "(", "'T'", ")", "\n", "ts_tags", ".", "append", "(", "'T-NEU'", ")", "\n", "", "else", ":", "\n", "                    ", "raise", "Exception", "(", "'Invalid tag %s!!!'", "%", "tag", ")", "\n", "", "", "flag", "=", "False", "\n", "for", "ote_tag", "in", "ote_tags", ":", "\n", "                ", "if", "ote_tag", "!=", "'O'", ":", "\n", "                    ", "flag", "=", "True", "\n", "break", "\n", "# flag = True", "\n", "", "", "if", "flag", ":", "\n", "                ", "record", "[", "'words'", "]", "=", "list", "(", "words", ")", "\n", "record", "[", "'ote_raw_tags'", "]", "=", "list", "(", "ote_tags", ")", "\n", "record", "[", "'ts_raw_tags'", "]", "=", "list", "(", "ts_tags", ")", "\n", "dataset", ".", "append", "(", "record", ")", "\n", "", "", "", "print", "(", "\"Obtain %s records from %s\"", "%", "(", "len", "(", "dataset", ")", ",", "path", ")", ")", "\n", "return", "dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.hsqmlzno1_Transferable-E2E-ABSA.None.utils.set_wid": [[504, 533], ["len", "range", "list", "list", "list", "lm_labels.append", "nltk.ngrams", "len", "len", "n_grams.append", "range", "range"], "function", ["None"], ["", "def", "set_wid", "(", "dataset", ",", "vocab", ",", "win", "=", "1", ")", ":", "\n", "    ", "\"\"\"\n    set wid field for the dataset\n    :param dataset: dataset\n    :param vocab: vocabulary\n    :param win: context window size, for window-based input, should be an odd number\n    :return: dataset with field wid\n    \"\"\"", "\n", "n_records", "=", "len", "(", "dataset", ")", "\n", "for", "i", "in", "range", "(", "n_records", ")", ":", "\n", "        ", "words", "=", "dataset", "[", "i", "]", "[", "'words'", "]", "\n", "lm_labels", "=", "[", "]", "\n", "# set labels for the auxiliary language modeling task", "\n", "for", "w", "in", "words", ":", "\n", "            ", "lm_labels", ".", "append", "(", "vocab", "[", "w", "]", ")", "\n", "", "dataset", "[", "i", "]", "[", "'lm_labels'", "]", "=", "list", "(", "lm_labels", ")", "\n", "n_padded_words", "=", "win", "//", "2", "\n", "pad_left", "=", "[", "'PADDING'", "for", "_", "in", "range", "(", "n_padded_words", ")", "]", "\n", "pad_right", "=", "[", "'PADDING'", "for", "_", "in", "range", "(", "n_padded_words", ")", "]", "\n", "padded_words", "=", "pad_left", "+", "words", "+", "pad_right", "\n", "# the window-based input", "\n", "win_input", "=", "list", "(", "ngrams", "(", "padded_words", ",", "win", ")", ")", "\n", "assert", "len", "(", "win_input", ")", "==", "len", "(", "words", ")", "\n", "n_grams", "=", "[", "]", "\n", "for", "t", "in", "win_input", ":", "\n", "            ", "n_grams", ".", "append", "(", "t", ")", "\n", "", "wids", "=", "[", "[", "vocab", "[", "w", "]", "for", "w", "in", "ngram", "]", "for", "ngram", "in", "n_grams", "]", "\n", "dataset", "[", "i", "]", "[", "'wids'", "]", "=", "list", "(", "wids", ")", "\n", "", "return", "dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.hsqmlzno1_Transferable-E2E-ABSA.None.utils.set_cid": [[535, 551], ["len", "range", "list", "cids.append", "list"], "function", ["None"], ["", "def", "set_cid", "(", "dataset", ",", "char_vocab", ")", ":", "\n", "    ", "\"\"\"\n    set cid field for the records in the dataset\n    :param dataset: dataset\n    :param char_vocab: vocabulary of character\n    :return:\n    \"\"\"", "\n", "n_records", "=", "len", "(", "dataset", ")", "\n", "cids", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "n_records", ")", ":", "\n", "        ", "words", "=", "dataset", "[", "i", "]", "[", "'words'", "]", "\n", "cids", "=", "[", "]", "\n", "for", "w", "in", "words", ":", "\n", "            ", "cids", ".", "append", "(", "[", "char_vocab", "[", "ch", "]", "for", "ch", "in", "list", "(", "w", ")", "]", ")", "\n", "", "dataset", "[", "i", "]", "[", "'cids'", "]", "=", "list", "(", "cids", ")", "\n", "", "return", "dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.hsqmlzno1_Transferable-E2E-ABSA.None.utils.set_labels": [[553, 593], ["len", "range", "list", "list", "list", "list", "Exception", "utils.ot2bio", "utils.ot2bieos", "Exception"], "function", ["home.repos.pwc.inspect_result.hsqmlzno1_Transferable-E2E-ABSA.None.utils.ot2bio", "home.repos.pwc.inspect_result.hsqmlzno1_Transferable-E2E-ABSA.None.utils.ot2bieos"], ["", "def", "set_labels", "(", "dataset", ",", "tagging_schema", "=", "'BIO'", ")", ":", "\n", "    ", "\"\"\"\n    set ote_label and ts_label for the dataset\n    :param dataset: dataset without ote_label and ts_label fields\n    :param tagging_schema: tagging schema of ote_tag and ts_tag\n    :return:\n    \"\"\"", "\n", "if", "tagging_schema", "==", "'OT'", ":", "\n", "        ", "ote_tag_vocab", "=", "{", "'O'", ":", "0", ",", "'T'", ":", "1", "}", "\n", "ts_tag_vocab", "=", "{", "'O'", ":", "0", ",", "'T-POS'", ":", "1", ",", "'T-NEG'", ":", "2", ",", "'T-NEU'", ":", "3", "}", "\n", "", "elif", "tagging_schema", "==", "'BIO'", ":", "\n", "        ", "ote_tag_vocab", "=", "{", "'O'", ":", "0", ",", "'B'", ":", "1", ",", "'I'", ":", "2", "}", "\n", "ts_tag_vocab", "=", "{", "'O'", ":", "0", ",", "'B-POS'", ":", "1", ",", "'I-POS'", ":", "2", ",", "'B-NEG'", ":", "3", ",", "'I-NEG'", ":", "4", ",", "\n", "'B-NEU'", ":", "5", ",", "'I-NEU'", ":", "6", "}", "\n", "", "elif", "tagging_schema", "==", "'BIEOS'", ":", "\n", "        ", "ote_tag_vocab", "=", "{", "'O'", ":", "0", ",", "'B'", ":", "1", ",", "'I'", ":", "2", ",", "'E'", ":", "3", ",", "'S'", ":", "4", "}", "\n", "ts_tag_vocab", "=", "{", "'O'", ":", "0", ",", "'B-POS'", ":", "1", ",", "'I-POS'", ":", "2", ",", "'E-POS'", ":", "3", ",", "'S-POS'", ":", "4", ",", "\n", "'B-NEG'", ":", "5", ",", "'I-NEG'", ":", "6", ",", "'E-NEG'", ":", "7", ",", "'S-NEG'", ":", "8", ",", "\n", "'B-NEU'", ":", "9", ",", "'I-NEU'", ":", "10", ",", "'E-NEU'", ":", "11", ",", "'S-NEU'", ":", "12", "}", "\n", "", "else", ":", "\n", "        ", "raise", "Exception", "(", "\"Invalid tagging schema %s\"", "%", "tagging_schema", ")", "\n", "", "n_records", "=", "len", "(", "dataset", ")", "\n", "for", "i", "in", "range", "(", "n_records", ")", ":", "\n", "        ", "ote_tags", "=", "dataset", "[", "i", "]", "[", "'ote_raw_tags'", "]", "\n", "ts_tags", "=", "dataset", "[", "i", "]", "[", "'ts_raw_tags'", "]", "\n", "if", "tagging_schema", "==", "'OT'", ":", "\n", "            ", "pass", "\n", "", "elif", "tagging_schema", "==", "'BIO'", ":", "\n", "            ", "ote_tags", ",", "ts_tags", "=", "ot2bio", "(", "ote_tag_sequence", "=", "ote_tags", ",", "ts_tag_sequence", "=", "ts_tags", ")", "\n", "", "elif", "tagging_schema", "==", "'BIEOS'", ":", "\n", "            ", "ote_tags", ",", "ts_tags", "=", "ot2bieos", "(", "ote_tag_sequence", "=", "ote_tags", ",", "ts_tag_sequence", "=", "ts_tags", ")", "\n", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "\"Invalid tagging schema %s\"", "%", "tagging_schema", ")", "\n", "", "ote_labels", "=", "[", "ote_tag_vocab", "[", "t", "]", "for", "t", "in", "ote_tags", "]", "\n", "ts_labels", "=", "[", "ts_tag_vocab", "[", "t", "]", "for", "t", "in", "ts_tags", "]", "\n", "dataset", "[", "i", "]", "[", "'ote_tags'", "]", "=", "list", "(", "ote_tags", ")", "\n", "dataset", "[", "i", "]", "[", "'ts_tags'", "]", "=", "list", "(", "ts_tags", ")", "\n", "dataset", "[", "i", "]", "[", "'ote_labels'", "]", "=", "list", "(", "ote_labels", ")", "\n", "dataset", "[", "i", "]", "[", "'ts_labels'", "]", "=", "list", "(", "ts_labels", ")", "\n", "", "return", "dataset", ",", "ote_tag_vocab", ",", "ts_tag_vocab", "\n", "\n"]], "home.repos.pwc.inspect_result.hsqmlzno1_Transferable-E2E-ABSA.None.utils.set_lm_labels": [[595, 661], ["len", "range", "len", "range", "range", "list", "range", "list", "list", "lm_labels_f.append", "lm_labels_b.append", "list", "opn_labels.append", "opn_labels.append", "stm_lm_labels.append", "stm_lm_labels.append"], "function", ["None"], ["", "def", "set_lm_labels", "(", "dataset", ",", "vocab", ",", "stm_lex", ",", "stm_win", "=", "3", ")", ":", "\n", "    ", "\"\"\"\n    set labels of bi-directional language modeling and sentiment-aware language modeling\n    :param dataset: dataset\n    :param vocab: vocabulary\n    :param stm_lex: sentiment lexicon\n    :param stm_win: window size (i.e., length) of sentiment context\n    :return:\n    \"\"\"", "\n", "n_records", "=", "len", "(", "dataset", ")", "\n", "for", "i", "in", "range", "(", "n_records", ")", ":", "\n", "        ", "words", "=", "dataset", "[", "i", "]", "[", "'words'", "]", "\n", "# labels of language modeling and sentiment aware language modeling", "\n", "lm_labels_f", ",", "lm_labels_b", "=", "[", "]", ",", "[", "]", "\n", "n_w", "=", "len", "(", "words", ")", "\n", "# language modeling in forward direction", "\n", "for", "j", "in", "range", "(", "n_w", ")", ":", "\n", "            ", "if", "j", "==", "n_w", "-", "1", ":", "\n", "                ", "next_word", "=", "-", "1", "\n", "", "else", ":", "\n", "                ", "if", "words", "[", "j", "+", "1", "]", "in", "stm_lex", ":", "\n", "                    ", "next_word", "=", "stm_lex", "[", "words", "[", "j", "+", "1", "]", "]", "\n", "", "else", ":", "\n", "                    ", "next_word", "=", "-", "1", "\n", "", "", "next_word", "=", "-", "1", "*", "next_word", "+", "1", "\n", "lm_labels_f", ".", "append", "(", "next_word", ")", "\n", "", "for", "j", "in", "range", "(", "n_w", "-", "1", ",", "-", "1", ",", "-", "1", ")", ":", "\n", "            ", "if", "j", "==", "0", ":", "\n", "                ", "next_word", "=", "-", "1", "\n", "", "else", ":", "\n", "                ", "if", "words", "[", "j", "-", "1", "]", "in", "stm_lex", ":", "\n", "                    ", "next_word", "=", "stm_lex", "[", "words", "[", "j", "-", "1", "]", "]", "\n", "", "else", ":", "\n", "                    ", "next_word", "=", "-", "1", "\n", "", "", "next_word", "=", "-", "1", "*", "next_word", "+", "1", "\n", "lm_labels_b", ".", "append", "(", "next_word", ")", "\n", "", "dataset", "[", "i", "]", "[", "'lm_labels_f'", "]", "=", "list", "(", "lm_labels_f", ")", "\n", "dataset", "[", "i", "]", "[", "'lm_labels_b'", "]", "=", "list", "(", "lm_labels_b", ")", "[", ":", ":", "-", "1", "]", "\n", "# sentiment aware language modeling", "\n", "stm_lm_labels", "=", "[", "]", "\n", "opn_labels", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "n_w", ")", ":", "\n", "            ", "if", "words", "[", "j", "]", "in", "stm_lex", ":", "\n", "                ", "opn_labels", ".", "append", "(", "1", ")", "\n", "", "else", ":", "\n", "                ", "opn_labels", ".", "append", "(", "0", ")", "\n", "# left boundary of sentimental context", "\n", "", "stm_ctx_lb", "=", "j", "-", "stm_win", "\n", "if", "stm_ctx_lb", "<", "0", ":", "\n", "                ", "stm_ctx_lb", "=", "0", "\n", "", "stm_ctx_rb", "=", "j", "+", "stm_win", "+", "1", "\n", "left_ctx", "=", "words", "[", "stm_ctx_lb", ":", "j", "]", "\n", "right_ctx", "=", "words", "[", "j", "+", "1", ":", "stm_ctx_rb", "]", "\n", "stm_ctx", "=", "left_ctx", "+", "right_ctx", "\n", "flag", "=", "False", "\n", "for", "w", "in", "stm_ctx", ":", "\n", "                ", "if", "w", "in", "stm_lex", ":", "\n", "                    ", "flag", "=", "True", "\n", "break", "\n", "", "", "if", "flag", ":", "\n", "                ", "stm_lm_labels", ".", "append", "(", "1", ")", "\n", "", "else", ":", "\n", "                ", "stm_lm_labels", ".", "append", "(", "0", ")", "\n", "", "", "dataset", "[", "i", "]", "[", "'stm_lm_labels'", "]", "=", "list", "(", "stm_lm_labels", ")", "\n", "dataset", "[", "i", "]", "[", "'opn_labels'", "]", "=", "list", "(", "opn_labels", ")", "\n", "", "return", "dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.hsqmlzno1_Transferable-E2E-ABSA.None.utils.set_padding": [[663, 678], ["len", "range", "len", "list", "list", "list"], "function", ["None"], ["", "def", "set_padding", "(", "dataset", ",", "max_len", ")", ":", "\n", "\n", "    ", "n_records", "=", "len", "(", "dataset", ")", "\n", "for", "i", "in", "range", "(", "n_records", ")", ":", "\n", "        ", "sent_len", "=", "len", "(", "dataset", "[", "i", "]", "[", "'words'", "]", ")", "\n", "words", "=", "dataset", "[", "i", "]", "[", "'words'", "]", "+", "[", "'PADDING'", "]", "*", "(", "max_len", "-", "sent_len", ")", "\n", "ote_tags", "=", "dataset", "[", "i", "]", "[", "'ote_raw_tags'", "]", "+", "[", "'O'", "]", "*", "(", "max_len", "-", "sent_len", ")", "\n", "ts_tags", "=", "dataset", "[", "i", "]", "[", "'ts_raw_tags'", "]", "+", "[", "'O'", "]", "*", "(", "max_len", "-", "sent_len", ")", "\n", "\n", "dataset", "[", "i", "]", "[", "'words'", "]", "=", "list", "(", "words", ")", "\n", "dataset", "[", "i", "]", "[", "'ote_raw_tags'", "]", "=", "list", "(", "ote_tags", ")", "\n", "dataset", "[", "i", "]", "[", "'ts_raw_tags'", "]", "=", "list", "(", "ts_tags", ")", "\n", "dataset", "[", "i", "]", "[", "'length'", "]", "=", "sent_len", "\n", "\n", "", "return", "dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.hsqmlzno1_Transferable-E2E-ABSA.None.utils.build_dataset": [[679, 746], ["utils.read_lexicon", "utils.read_data", "utils.read_data", "utils.read_data", "utils.read_data", "utils.get_vocab", "utils.set_padding", "utils.set_padding", "utils.set_padding", "utils.set_padding", "utils.set_wid", "utils.set_wid", "utils.set_wid", "utils.set_wid", "utils.set_labels", "utils.set_labels", "utils.set_labels", "utils.set_labels", "utils.set_lm_labels", "utils.set_lm_labels", "utils.set_lm_labels", "utils.set_lm_labels"], "function", ["home.repos.pwc.inspect_result.hsqmlzno1_Transferable-E2E-ABSA.None.utils.read_lexicon", "home.repos.pwc.inspect_result.hsqmlzno1_Transferable-E2E-ABSA.None.utils.read_data", "home.repos.pwc.inspect_result.hsqmlzno1_Transferable-E2E-ABSA.None.utils.read_data", "home.repos.pwc.inspect_result.hsqmlzno1_Transferable-E2E-ABSA.None.utils.read_data", "home.repos.pwc.inspect_result.hsqmlzno1_Transferable-E2E-ABSA.None.utils.read_data", "home.repos.pwc.inspect_result.hsqmlzno1_Transferable-E2E-ABSA.None.utils.get_vocab", "home.repos.pwc.inspect_result.hsqmlzno1_Transferable-E2E-ABSA.None.utils.set_padding", "home.repos.pwc.inspect_result.hsqmlzno1_Transferable-E2E-ABSA.None.utils.set_padding", "home.repos.pwc.inspect_result.hsqmlzno1_Transferable-E2E-ABSA.None.utils.set_padding", "home.repos.pwc.inspect_result.hsqmlzno1_Transferable-E2E-ABSA.None.utils.set_padding", "home.repos.pwc.inspect_result.hsqmlzno1_Transferable-E2E-ABSA.None.utils.set_wid", "home.repos.pwc.inspect_result.hsqmlzno1_Transferable-E2E-ABSA.None.utils.set_wid", "home.repos.pwc.inspect_result.hsqmlzno1_Transferable-E2E-ABSA.None.utils.set_wid", "home.repos.pwc.inspect_result.hsqmlzno1_Transferable-E2E-ABSA.None.utils.set_wid", "home.repos.pwc.inspect_result.hsqmlzno1_Transferable-E2E-ABSA.None.utils.set_labels", "home.repos.pwc.inspect_result.hsqmlzno1_Transferable-E2E-ABSA.None.utils.set_labels", "home.repos.pwc.inspect_result.hsqmlzno1_Transferable-E2E-ABSA.None.utils.set_labels", "home.repos.pwc.inspect_result.hsqmlzno1_Transferable-E2E-ABSA.None.utils.set_labels", "home.repos.pwc.inspect_result.hsqmlzno1_Transferable-E2E-ABSA.None.utils.set_lm_labels", "home.repos.pwc.inspect_result.hsqmlzno1_Transferable-E2E-ABSA.None.utils.set_lm_labels", "home.repos.pwc.inspect_result.hsqmlzno1_Transferable-E2E-ABSA.None.utils.set_lm_labels", "home.repos.pwc.inspect_result.hsqmlzno1_Transferable-E2E-ABSA.None.utils.set_lm_labels"], ["", "def", "build_dataset", "(", "source_domain", ",", "target_domain", ",", "input_win", "=", "1", ",", "tagging_schema", "=", "'BIO'", ",", "stm_win", "=", "1", ")", ":", "\n", "    ", "\"\"\"\n    build dataset for model training, development and inference\n    :param ds_name: dataset name\n    :param input_win: window size input\n    :param tagging_schema: tagging schema\n    :param stm_win: window size of context for the OE component\n    :return:\n    \"\"\"", "\n", "# read mpqa sentiment lexicon", "\n", "stm_lex", "=", "read_lexicon", "(", ")", "\n", "# paths of training and testing dataset", "\n", "train_path", "=", "'./data/%s_train.txt'", "%", "source_domain", "\n", "val_path", "=", "'./data/%s_test.txt'", "%", "source_domain", "\n", "tar_un_path", "=", "'./data/%s_train.txt'", "%", "target_domain", "\n", "test_path", "=", "'./data/%s_test.txt'", "%", "target_domain", "\n", "# loaded datasets", "\n", "train_set", "=", "read_data", "(", "path", "=", "train_path", ")", "\n", "val_set", "=", "read_data", "(", "path", "=", "val_path", ")", "\n", "tar_un_set", "=", "read_data", "(", "path", "=", "tar_un_path", ")", "\n", "test_set", "=", "read_data", "(", "path", "=", "test_path", ")", "\n", "\n", "vocab", ",", "char_vocab", ",", "max_len", "=", "get_vocab", "(", "train_set", "+", "val_set", "+", "tar_un_set", "+", "test_set", ")", "\n", "\n", "train_set", "=", "set_padding", "(", "dataset", "=", "train_set", ",", "max_len", "=", "max_len", ")", "\n", "val_set", "=", "set_padding", "(", "dataset", "=", "val_set", ",", "max_len", "=", "max_len", ")", "\n", "tar_un_set", "=", "set_padding", "(", "dataset", "=", "tar_un_set", ",", "max_len", "=", "max_len", ")", "\n", "test_set", "=", "set_padding", "(", "dataset", "=", "test_set", ",", "max_len", "=", "max_len", ")", "\n", "\n", "train_set", "=", "set_wid", "(", "dataset", "=", "train_set", ",", "vocab", "=", "vocab", ",", "win", "=", "input_win", ")", "\n", "val_set", "=", "set_wid", "(", "dataset", "=", "val_set", ",", "vocab", "=", "vocab", ",", "win", "=", "input_win", ")", "\n", "tar_un_set", "=", "set_wid", "(", "dataset", "=", "tar_un_set", ",", "vocab", "=", "vocab", ",", "win", "=", "input_win", ")", "\n", "test_set", "=", "set_wid", "(", "dataset", "=", "test_set", ",", "vocab", "=", "vocab", ",", "win", "=", "input_win", ")", "\n", "\n", "# train_set  = set_cid(dataset=train_set, char_vocab=char_vocab)", "\n", "# val_set    = set_cid(dataset=val_set, char_vocab=char_vocab)", "\n", "# tar_un_set = set_cid(dataset=tar_un_set, char_vocab=char_vocab)", "\n", "# test_set   = set_cid(dataset=test_set, char_vocab=char_vocab)", "\n", "\n", "train_set", ",", "ote_tag_vocab", ",", "ts_tag_vocab", "=", "set_labels", "(", "dataset", "=", "train_set", ",", "tagging_schema", "=", "tagging_schema", ")", "\n", "val_set", ",", "_", ",", "_", "=", "set_labels", "(", "dataset", "=", "val_set", ",", "tagging_schema", "=", "tagging_schema", ")", "\n", "tar_un_set", ",", "_", ",", "_", "=", "set_labels", "(", "dataset", "=", "tar_un_set", ",", "tagging_schema", "=", "tagging_schema", ")", "\n", "test_set", ",", "_", ",", "_", "=", "set_labels", "(", "dataset", "=", "test_set", ",", "tagging_schema", "=", "tagging_schema", ")", "\n", "\n", "train_set", "=", "set_lm_labels", "(", "dataset", "=", "train_set", ",", "vocab", "=", "vocab", ",", "stm_lex", "=", "stm_lex", ",", "stm_win", "=", "stm_win", ")", "\n", "val_set", "=", "set_lm_labels", "(", "dataset", "=", "val_set", ",", "vocab", "=", "vocab", ",", "stm_lex", "=", "stm_lex", ",", "stm_win", "=", "stm_win", ")", "\n", "tar_un_set", "=", "set_lm_labels", "(", "dataset", "=", "tar_un_set", ",", "vocab", "=", "vocab", ",", "stm_lex", "=", "stm_lex", ",", "stm_win", "=", "stm_win", ")", "\n", "test_set", "=", "set_lm_labels", "(", "dataset", "=", "test_set", ",", "vocab", "=", "vocab", ",", "stm_lex", "=", "stm_lex", ",", "stm_win", "=", "stm_win", ")", "\n", "\n", "# n_train = len(train_set)", "\n", "# # use 10% training data for dev experiment", "\n", "# n_val = int(n_train * 0.1)", "\n", "# # generate a uniform random sample from np.range(n_train) of size n_val", "\n", "# # This is equivalent to np.random.permutation(np.arange(n_train))[:n_val]", "\n", "#", "\n", "# val_sample_ids = np.random.choice(n_train, n_val, replace=False)", "\n", "# print(\"The first 15 validation samples:\", val_sample_ids[:15])", "\n", "# val_set, tmp_train_set = [], []", "\n", "# for i in range(n_train):", "\n", "#     record = train_set[i]", "\n", "#     if i in val_sample_ids:", "\n", "#         val_set.append(record)", "\n", "#     else:", "\n", "#         tmp_train_set.append(record)", "\n", "# train_set = [r for r in tmp_train_set]", "\n", "\n", "return", "train_set", ",", "val_set", ",", "tar_un_set", ",", "test_set", ",", "vocab", ",", "char_vocab", ",", "ote_tag_vocab", ",", "ts_tag_vocab", "\n", "\n"]], "home.repos.pwc.inspect_result.hsqmlzno1_Transferable-E2E-ABSA.None.utils.load_embeddings": [[748, 803], ["os.path.exists", "numpy.array", "print", "pickle.load", "print", "len", "len", "numpy.zeros", "print", "pickle.dump", "open", "os.path.exists", "os.mkdir", "open", "open", "open", "numpy.array", "numpy.random.uniform", "len", "numpy.asarray", "line.strip().split", "line.split", "vector_list.append", "float", "float", "line.strip", "len", "len"], "function", ["None"], ["", "def", "load_embeddings", "(", "path", ",", "vocab", ",", "source_domain", ",", "target_domain", ",", "emb_name", ")", ":", "\n", "    ", "\"\"\"\n    load pre-trained word embeddings from the disk\n    :param path: absolute path of the embedding files\n    :param vocab: vocabulary\n    :param ds_name: name of dataset\n    :param emb_name: name of word embedding\n    :return:\n    \"\"\"", "\n", "\n", "pkl", "=", "'./work/embeddings/%s_%s_%s.pkl'", "%", "(", "source_domain", ",", "target_domain", ",", "emb_name", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "pkl", ")", ":", "\n", "        ", "print", "(", "\"Load embeddings from existing pkl file %s...\"", "%", "pkl", ")", "\n", "# word embeddings weights have been loaded", "\n", "embeddings", "=", "pickle", ".", "load", "(", "open", "(", "pkl", ",", "'rb'", ")", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "\"Load embedding from %s...\"", "%", "path", ")", "\n", "raw_embeddings", "=", "{", "}", "\n", "if", "emb_name", "==", "'yelp_electronics'", ":", "\n", "            ", "with", "open", "(", "path", ")", "as", "fp", ":", "\n", "                ", "for", "line", "in", "fp", ":", "\n", "                    ", "word_vector", "=", "line", ".", "split", "(", "\",\"", ")", "[", ":", "-", "1", "]", "\n", "vector_list", "=", "[", "]", "\n", "for", "element", "in", "word_vector", "[", "len", "(", "word_vector", ")", "-", "100", ":", "]", ":", "\n", "                        ", "vector_list", ".", "append", "(", "float", "(", "element", ")", ")", "\n", "", "word", "=", "','", ".", "join", "(", "word_vector", "[", ":", "len", "(", "word_vector", ")", "-", "100", "]", ")", "\n", "vector", "=", "np", ".", "asarray", "(", "vector_list", ")", "\n", "if", "word", "in", "vocab", ":", "\n", "                        ", "raw_embeddings", "[", "word", "]", "=", "vector", "\n", "", "", "", "", "else", ":", "\n", "            ", "with", "open", "(", "path", ")", "as", "fp", ":", "\n", "                ", "for", "line", "in", "fp", ":", "\n", "                    ", "eles", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "' '", ")", "\n", "word", "=", "eles", "[", "0", "]", "\n", "if", "word", "in", "vocab", ":", "\n", "                        ", "raw_embeddings", "[", "word", "]", "=", "eles", "[", "1", ":", "]", "\n", "\n", "", "", "", "", "dim_w", "=", "len", "(", "raw_embeddings", "[", "'the'", "]", ")", "\n", "n_words", "=", "len", "(", "vocab", ")", "\n", "embeddings", "=", "np", ".", "zeros", "(", "shape", "=", "(", "n_words", ",", "dim_w", ")", ")", "\n", "for", "w", "in", "vocab", ":", "\n", "            ", "wid", "=", "vocab", "[", "w", "]", "\n", "if", "w", "in", "raw_embeddings", ":", "\n", "                ", "embeddings", "[", "wid", "]", "=", "np", ".", "array", "(", "[", "float", "(", "ele", ")", "for", "ele", "in", "raw_embeddings", "[", "w", "]", "]", ")", "\n", "", "else", ":", "\n", "# for OOV words, add random initialization", "\n", "                ", "embeddings", "[", "wid", "]", "=", "np", ".", "random", ".", "uniform", "(", "-", "0.25", ",", "0.25", ",", "dim_w", ")", "\n", "", "", "print", "(", "\"Find %s word embeddings...\"", "%", "len", "(", "embeddings", ")", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "'./work/embeddings'", ")", ":", "\n", "            ", "os", ".", "mkdir", "(", "'./work/embeddings'", ")", "\n", "", "emb_path", "=", "'./work/embeddings/%s_%s_%s.pkl'", "%", "(", "source_domain", ",", "target_domain", ",", "emb_name", ")", "\n", "# write the embedding weights back to the disk", "\n", "pickle", ".", "dump", "(", "embeddings", ",", "open", "(", "emb_path", ",", "'wb'", ")", ")", "\n", "", "embeddings", "=", "np", ".", "array", "(", "embeddings", ",", "dtype", "=", "'float32'", ")", "\n", "return", "embeddings", "\n", "\n"]], "home.repos.pwc.inspect_result.hsqmlzno1_Transferable-E2E-ABSA.None.utils.load_char_embeddings": [[805, 843], ["len", "os.path.exists", "print", "pickle.load", "print", "len", "numpy.zeros", "print", "numpy.array", "pickle.dump", "open", "open", "open", "line.strip().split", "numpy.array", "numpy.random.uniform", "float", "line.strip"], "function", ["None"], ["", "def", "load_char_embeddings", "(", "char_vocab", ",", "ds_name", ")", ":", "\n", "    ", "\"\"\"\n    load pre-trained character-level embeddings\n    :param char_vocab: vocabulary of character\n    :param ds_name: name of dataset\n    :return:\n    \"\"\"", "\n", "n_char", "=", "len", "(", "char_vocab", ")", "\n", "pkl", "=", "'./embeddings/%s_char.pkl'", "%", "ds_name", "\n", "if", "os", ".", "path", ".", "exists", "(", "pkl", ")", ":", "\n", "        ", "print", "(", "\"Load character embeddings from %s...\"", "%", "pkl", ")", "\n", "embeddings", "=", "pickle", ".", "load", "(", "open", "(", "pkl", ",", "'rb'", ")", ")", "\n", "", "else", ":", "\n", "        ", "emb_path", "=", "'./embeddings/char-embeddings.txt'", "\n", "print", "(", "\"Load character embeddings from %s...\"", "%", "emb_path", ")", "\n", "raw_embeddings", "=", "{", "}", "\n", "n_found", "=", "0", "\n", "with", "open", "(", "emb_path", ")", "as", "fp", ":", "\n", "            ", "for", "line", "in", "fp", ":", "\n", "                ", "eles", "=", "line", ".", "strip", "(", ")", ".", "split", "(", ")", "\n", "ch", "=", "eles", "[", "0", "]", "\n", "vec", "=", "[", "float", "(", "ele", ")", "for", "ele", "in", "eles", "[", "1", ":", "]", "]", "\n", "if", "ch", "not", "in", "raw_embeddings", ":", "\n", "                    ", "raw_embeddings", "[", "ch", "]", "=", "vec", "\n", "\n", "", "", "", "dim_ch", "=", "len", "(", "raw_embeddings", "[", "'A'", "]", ")", "\n", "embeddings", "=", "np", ".", "zeros", "(", "shape", "=", "(", "n_char", ",", "dim_ch", ")", ")", "\n", "for", "ch", "in", "char_vocab", ":", "\n", "            ", "cid", "=", "char_vocab", "[", "ch", "]", "\n", "if", "ch", "in", "raw_embeddings", ":", "\n", "                ", "embeddings", "[", "cid", "]", "=", "np", ".", "array", "(", "raw_embeddings", "[", "ch", "]", ")", "\n", "n_found", "+=", "1", "\n", "", "else", ":", "\n", "                ", "embeddings", "[", "cid", "]", "=", "np", ".", "random", ".", "uniform", "(", "-", "0.25", ",", "0.25", ",", "dim_ch", ")", "\n", "", "", "print", "(", "\"Find %s chars in pre-trained character embeddings...\"", "%", "n_found", ")", "\n", "embeddings", "=", "np", ".", "array", "(", "embeddings", ",", "dtype", "=", "'float32'", ")", "\n", "pickle", ".", "dump", "(", "embeddings", ",", "open", "(", "pkl", ",", "'wb'", ")", ")", "\n", "", "return", "embeddings", "\n", "\n"]], "home.repos.pwc.inspect_result.hsqmlzno1_Transferable-E2E-ABSA.None.utils.label2tag": [[845, 870], ["len", "tag_sequences.append", "tag_seq.append", "tag_seq.append", "Exception"], "function", ["None"], ["", "def", "label2tag", "(", "label_sequence", ",", "tag_vocab", ")", ":", "\n", "    ", "\"\"\"\n    convert label sequence to tag sequence\n    :param label_sequence: label sequence\n    :param tag_vocab: tag vocabulary, i.e., mapping between tag and label\n    :return:\n    \"\"\"", "\n", "inv_tag_vocab", "=", "{", "}", "\n", "for", "tag", "in", "tag_vocab", ":", "\n", "        ", "label", "=", "tag_vocab", "[", "tag", "]", "\n", "inv_tag_vocab", "[", "label", "]", "=", "tag", "\n", "", "tag_sequences", "=", "[", "]", "\n", "n_tag", "=", "len", "(", "tag_vocab", ")", "\n", "for", "seq", "in", "label_sequence", ":", "\n", "        ", "tag_seq", "=", "[", "]", "\n", "for", "l", "in", "seq", ":", "\n", "            ", "if", "l", "in", "inv_tag_vocab", ":", "\n", "                ", "tag_seq", ".", "append", "(", "inv_tag_vocab", "[", "l", "]", ")", "\n", "", "elif", "l", "==", "n_tag", "or", "l", "==", "n_tag", "+", "1", ":", "\n", "                ", "tag_seq", ".", "append", "(", "\"O\"", ")", "\n", "", "else", ":", "\n", "                ", "raise", "Exception", "(", "\"Invalid label %s\"", "%", "l", ")", "\n", "", "", "tag_sequences", ".", "append", "(", "tag_seq", ")", "\n", "\n", "", "return", "tag_sequences", "\n", "\n"]], "home.repos.pwc.inspect_result.hsqmlzno1_Transferable-E2E-ABSA.None.utils.tag2predictions": [[872, 928], ["len", "range", "range", "ts_tag.split", "ot_sequence.append", "len", "sentiments.append", "ts_sequence.append", "ot_sequence.append", "ts_sequence.append", "len", "set"], "function", ["None"], ["", "def", "tag2predictions", "(", "ote_tag_sequence", ",", "ts_tag_sequence", ")", ":", "\n", "    ", "\"\"\"\n    transform BIEOS tag sequence to the list of aspects together with sentiment\n    :param ote_tag_sequence: tag sequence for opinion target extraction\n    :param ts_tag_sequence: tag sequence for targeted sentiment\n    :return: a list of aspects/entities\n    \"\"\"", "\n", "n_tag", "=", "len", "(", "ote_tag_sequence", ")", "\n", "# opinion target sequence and targeted sentiment sequence", "\n", "ot_sequence", ",", "ts_sequence", "=", "[", "]", ",", "[", "]", "\n", "beg", ",", "end", "=", "-", "1", ",", "-", "1", "\n", "for", "i", "in", "range", "(", "n_tag", ")", ":", "\n", "        ", "tag", "=", "ote_tag_sequence", "[", "i", "]", "\n", "if", "tag", "==", "'S'", ":", "\n", "            ", "ot_sequence", ".", "append", "(", "(", "i", ",", "i", ")", ")", "\n", "", "elif", "tag", "==", "'B'", ":", "\n", "            ", "beg", "=", "i", "\n", "", "elif", "tag", "==", "'E'", ":", "\n", "            ", "end", "=", "i", "\n", "if", "end", ">", "beg", "and", "beg", "!=", "-", "1", ":", "\n", "                ", "ot_sequence", ".", "append", "(", "(", "beg", ",", "end", ")", ")", "\n", "beg", ",", "end", "=", "-", "1", ",", "-", "1", "\n", "", "", "", "sentiments", "=", "[", "]", "\n", "beg", ",", "end", "=", "-", "1", ",", "-", "1", "\n", "for", "i", "in", "range", "(", "n_tag", ")", ":", "\n", "        ", "ts_tag", "=", "ts_tag_sequence", "[", "i", "]", "\n", "# current position and sentiment", "\n", "eles", "=", "ts_tag", ".", "split", "(", "'-'", ")", "\n", "if", "len", "(", "eles", ")", "==", "2", ":", "\n", "            ", "pos", ",", "sentiment", "=", "eles", "\n", "", "else", ":", "\n", "            ", "pos", ",", "sentiment", "=", "'O'", ",", "'O'", "\n", "", "if", "sentiment", "!=", "'O'", ":", "\n", "# current word is a subjective word", "\n", "            ", "sentiments", ".", "append", "(", "sentiment", ")", "\n", "", "if", "pos", "==", "'S'", ":", "\n", "# singleton", "\n", "            ", "ts_sequence", ".", "append", "(", "(", "i", ",", "i", ",", "sentiments", "[", "0", "]", ")", ")", "\n", "sentiments", "=", "[", "]", "\n", "", "elif", "pos", "==", "'B'", ":", "\n", "            ", "beg", "=", "i", "\n", "", "elif", "pos", "==", "'E'", ":", "\n", "            ", "end", "=", "i", "\n", "# schema1: only the consistent sentiment tags are accepted", "\n", "# that is, all of the sentiment tags are the same", "\n", "if", "end", ">", "beg", ">", "-", "1", "and", "len", "(", "set", "(", "sentiments", ")", ")", "==", "1", ":", "\n", "                ", "ts_sequence", ".", "append", "(", "(", "beg", ",", "end", ",", "sentiment", ")", ")", "\n", "sentiments", "=", "[", "]", "\n", "beg", ",", "end", "=", "-", "1", ",", "-", "1", "\n", "\n", "# schema2: only consider the sentiment at the beginning of the aspect span", "\n", "# if end > beg > -1:", "\n", "#    ts_sequence.append((beg, end, sentiments[0]))", "\n", "#    sentiments = []", "\n", "#    beg, end = -1, -1", "\n", "", "", "", "return", "ot_sequence", ",", "ts_sequence", "\n", "\n"]], "home.repos.pwc.inspect_result.hsqmlzno1_Transferable-E2E-ABSA.None.utils.to_conll": [[929, 962], ["utils.semeval2conll", "utils.semeval2conll", "utils.semeval2conll", "range", "open", "fp.writelines", "open", "fp.writelines", "open", "fp.writelines", "len", "emb_lines.append", "open", "fp.writelines", "str"], "function", ["home.repos.pwc.inspect_result.hsqmlzno1_Transferable-E2E-ABSA.None.utils.semeval2conll", "home.repos.pwc.inspect_result.hsqmlzno1_Transferable-E2E-ABSA.None.utils.semeval2conll", "home.repos.pwc.inspect_result.hsqmlzno1_Transferable-E2E-ABSA.None.utils.semeval2conll"], ["", "def", "to_conll", "(", "train", ",", "val", ",", "test", ",", "embeddings", ",", "vocab", ",", "ds_name", ")", ":", "\n", "    ", "\"\"\"\n\n    :param train: training dataset\n    :param val: validation / development dataset\n    :param test: testing dataset\n    :param embeddings: pre-trained word embeddings\n    :param vocab: vocabulary\n    :return:\n    \"\"\"", "\n", "inv_vocab", "=", "{", "}", "\n", "for", "w", "in", "vocab", ":", "\n", "        ", "wid", "=", "vocab", "[", "w", "]", "\n", "inv_vocab", "[", "wid", "]", "=", "w", "\n", "", "train_lines", "=", "semeval2conll", "(", "dataset", "=", "train", ")", "\n", "dev_lines", "=", "semeval2conll", "(", "dataset", "=", "val", ")", "\n", "test_lines", "=", "semeval2conll", "(", "dataset", "=", "test", ")", "\n", "base_folder", "=", "'/projdata9/info_fil/lixin/Research/NCRFpp/sample_data'", "\n", "with", "open", "(", "'%s/%s_train.txt'", "%", "(", "base_folder", ",", "ds_name", ")", ",", "'w+'", ")", "as", "fp", ":", "\n", "        ", "fp", ".", "writelines", "(", "train_lines", ")", "\n", "", "with", "open", "(", "'%s/%s_dev.txt'", "%", "(", "base_folder", ",", "ds_name", ")", ",", "'w+'", ")", "as", "fp", ":", "\n", "        ", "fp", ".", "writelines", "(", "dev_lines", ")", "\n", "", "with", "open", "(", "'%s/%s_test.txt'", "%", "(", "base_folder", ",", "ds_name", ")", ",", "'w+'", ")", "as", "fp", ":", "\n", "        ", "fp", ".", "writelines", "(", "test_lines", ")", "\n", "\n", "", "emb_lines", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "embeddings", ")", ")", ":", "\n", "        ", "word", "=", "inv_vocab", "[", "i", "]", "\n", "emb_vec", "=", "embeddings", "[", "i", "]", "\n", "emb_lines", ".", "append", "(", "'%s %s\\n'", "%", "(", "word", ",", "' '", ".", "join", "(", "[", "str", "(", "ele", ")", "for", "ele", "in", "emb_vec", "]", ")", ")", ")", "\n", "# write the embeddings back to the NCRFpp foler", "\n", "", "with", "open", "(", "'%s/%s_emb.txt'", "%", "(", "base_folder", ",", "ds_name", ")", ",", "'w+'", ")", "as", "fp", ":", "\n", "        ", "fp", ".", "writelines", "(", "emb_lines", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hsqmlzno1_Transferable-E2E-ABSA.None.utils.semeval2conll": [[964, 981], ["utils.ot2bieos", "zip", "conll_lines.append", "conll_lines.append"], "function", ["home.repos.pwc.inspect_result.hsqmlzno1_Transferable-E2E-ABSA.None.utils.ot2bieos"], ["", "", "def", "semeval2conll", "(", "dataset", ")", ":", "\n", "    ", "\"\"\"\n    transform the format of semeval datasets to conll form\n    :param dataset: input dataset\n    :return:\n    \"\"\"", "\n", "conll_lines", "=", "[", "]", "\n", "for", "record", "in", "dataset", ":", "\n", "        ", "ote_raw_tags", "=", "record", "[", "'ote_raw_tags'", "]", "\n", "ts_raw_tags", "=", "record", "[", "'ts_raw_tags'", "]", "\n", "words", "=", "record", "[", "'words'", "]", "\n", "ote_tags", ",", "ts_tags", "=", "ot2bieos", "(", "ote_tag_sequence", "=", "ote_raw_tags", ",", "ts_tag_sequence", "=", "ts_raw_tags", ")", "\n", "for", "(", "w", ",", "t", ")", "in", "zip", "(", "words", ",", "ts_tags", ")", ":", "\n", "            ", "conll_lines", ".", "append", "(", "'%s %s\\n'", "%", "(", "w", ",", "t", ")", ")", "\n", "# use empty line to seprate the samples", "\n", "", "conll_lines", ".", "append", "(", "'\\n'", ")", "\n", "", "return", "conll_lines", "\n", "\n"]], "home.repos.pwc.inspect_result.hsqmlzno1_Transferable-E2E-ABSA.None.utils.shuffle_aligned_list": [[982, 986], ["numpy.random.permutation"], "function", ["None"], ["", "def", "shuffle_aligned_list", "(", "data", ")", ":", "\n", "    ", "num", "=", "data", "[", "0", "]", ".", "shape", "[", "0", "]", "\n", "shuffle_index", "=", "np", ".", "random", ".", "permutation", "(", "num", ")", "\n", "return", "[", "d", "[", "shuffle_index", "]", "for", "d", "in", "data", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.hsqmlzno1_Transferable-E2E-ABSA.None.utils.batch_generator": [[987, 1006], ["utils.shuffle_aligned_list", "utils.shuffle_aligned_list"], "function", ["home.repos.pwc.inspect_result.hsqmlzno1_Transferable-E2E-ABSA.None.utils.shuffle_aligned_list", "home.repos.pwc.inspect_result.hsqmlzno1_Transferable-E2E-ABSA.None.utils.shuffle_aligned_list"], ["", "def", "batch_generator", "(", "dataset", ",", "batch_size", ",", "shuffle", "=", "True", ")", ":", "\n", "\n", "    ", "attrs", "=", "[", "'lm_labels'", ",", "'wids'", ",", "'length'", ",", "'ote_labels'", ",", "'ts_labels'", ",", "'opn_labels'", ",", "'stm_lm_labels'", ",", "'lm_labels_f'", ",", "'lm_labels_b'", "]", "\n", "data", "=", "[", "dataset", "[", "a", "]", "for", "a", "in", "attrs", "]", "\n", "\n", "if", "shuffle", ":", "\n", "        ", "data", "=", "shuffle_aligned_list", "(", "data", ")", "\n", "", "num", "=", "data", "[", "0", "]", ".", "shape", "[", "0", "]", "\n", "\n", "batch_count", "=", "0", "\n", "while", "True", ":", "\n", "        ", "if", "batch_count", "*", "batch_size", "+", "batch_size", ">=", "num", ":", "\n", "            ", "batch_count", "=", "0", "\n", "if", "shuffle", ":", "\n", "                ", "data", "=", "shuffle_aligned_list", "(", "data", ")", "\n", "", "", "start", "=", "batch_count", "*", "batch_size", "\n", "end", "=", "start", "+", "batch_size", "\n", "batch_count", "+=", "1", "\n", "yield", "[", "d", "[", "start", ":", "end", "]", "for", "d", "in", "data", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.hsqmlzno1_Transferable-E2E-ABSA.None.utils.transform_data_format": [[1007, 1061], ["len", "range", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "words.append", "ote_tags.append", "ts_tags.append", "np.array.append", "np.array.append", "np.array.append", "np.array.append", "np.array.append", "np.array.append", "np.array.append", "np.array.append", "np.array.append"], "function", ["None"], ["", "", "def", "transform_data_format", "(", "data", ")", ":", "\n", "\n", "    ", "words", "=", "[", "]", "\n", "ote_tags", "=", "[", "]", "\n", "ts_tags", "=", "[", "]", "\n", "lm_labels", "=", "[", "]", "\n", "wids", "=", "[", "]", "\n", "length", "=", "[", "]", "\n", "ote_labels", "=", "[", "]", "\n", "ts_labels", "=", "[", "]", "\n", "opn_labels", "=", "[", "]", "\n", "stm_lm_labels", "=", "[", "]", "\n", "lm_labels_f", "=", "[", "]", "\n", "lm_labels_b", "=", "[", "]", "\n", "n_records", "=", "len", "(", "data", ")", "\n", "for", "i", "in", "range", "(", "n_records", ")", ":", "\n", "        ", "words", ".", "append", "(", "data", "[", "i", "]", "[", "'words'", "]", ")", "\n", "ote_tags", ".", "append", "(", "data", "[", "i", "]", "[", "'ote_tags'", "]", ")", "\n", "ts_tags", ".", "append", "(", "data", "[", "i", "]", "[", "'ts_tags'", "]", ")", "\n", "lm_labels", ".", "append", "(", "data", "[", "i", "]", "[", "'lm_labels'", "]", ")", "\n", "wids", ".", "append", "(", "data", "[", "i", "]", "[", "'wids'", "]", ")", "\n", "length", ".", "append", "(", "data", "[", "i", "]", "[", "'length'", "]", ")", "\n", "ote_labels", ".", "append", "(", "data", "[", "i", "]", "[", "'ote_labels'", "]", ")", "\n", "ts_labels", ".", "append", "(", "data", "[", "i", "]", "[", "'ts_labels'", "]", ")", "\n", "opn_labels", ".", "append", "(", "data", "[", "i", "]", "[", "'opn_labels'", "]", ")", "\n", "stm_lm_labels", ".", "append", "(", "data", "[", "i", "]", "[", "'stm_lm_labels'", "]", ")", "\n", "lm_labels_f", ".", "append", "(", "data", "[", "i", "]", "[", "'lm_labels_f'", "]", ")", "\n", "lm_labels_b", ".", "append", "(", "data", "[", "i", "]", "[", "'lm_labels_b'", "]", ")", "\n", "\n", "", "lm_labels", "=", "np", ".", "array", "(", "lm_labels", ")", "\n", "wids", "=", "np", ".", "array", "(", "wids", ")", "\n", "length", "=", "np", ".", "array", "(", "length", ")", "\n", "ote_labels", "=", "np", ".", "array", "(", "ote_labels", ")", "\n", "ts_labels", "=", "np", ".", "array", "(", "ts_labels", ")", "\n", "opn_labels", "=", "np", ".", "array", "(", "opn_labels", ")", "\n", "stm_lm_labels", "=", "np", ".", "array", "(", "stm_lm_labels", ")", "\n", "lm_labels_f", "=", "np", ".", "array", "(", "lm_labels_f", ")", "\n", "lm_labels_b", "=", "np", ".", "array", "(", "lm_labels_b", ")", "\n", "\n", "data_trans", "=", "{", "}", "\n", "data_trans", "[", "'words'", "]", "=", "words", "\n", "data_trans", "[", "'ote_tags'", "]", "=", "ote_tags", "\n", "data_trans", "[", "'ts_tags'", "]", "=", "ts_tags", "\n", "data_trans", "[", "'lm_labels'", "]", "=", "lm_labels", "\n", "data_trans", "[", "'wids'", "]", "=", "wids", "\n", "data_trans", "[", "'length'", "]", "=", "length", "\n", "data_trans", "[", "'ote_labels'", "]", "=", "ote_labels", "\n", "data_trans", "[", "'ts_labels'", "]", "=", "ts_labels", "\n", "data_trans", "[", "'opn_labels'", "]", "=", "opn_labels", "\n", "data_trans", "[", "'stm_lm_labels'", "]", "=", "stm_lm_labels", "\n", "data_trans", "[", "'lm_labels_f'", "]", "=", "lm_labels_f", "\n", "data_trans", "[", "'lm_labels_b'", "]", "=", "lm_labels_b", "\n", "\n", "return", "data_trans", "\n", "\n"]], "home.repos.pwc.inspect_result.hsqmlzno1_Transferable-E2E-ABSA.None.utils.get_train_feed_dict": [[1062, 1080], ["dict", "dict.update", "dict.update", "dict.update", "dict.update", "dict.update", "dict.update", "dict.update", "dict.update", "dict.update", "dict.update"], "function", ["None"], ["", "def", "get_train_feed_dict", "(", "model", ",", "reviews", ",", "win_reviews", ",", "batch_length", ",", "ote_labels", ",", "ts_labels", ",", "opn_labels", ",", "stm_lm_labels", ",", "lr", ",", "dropout_rate", "=", "1.0", ",", "train_flag", "=", "True", ")", ":", "\n", "    ", "\"\"\"Construct feed dictionary.\"\"\"", "\n", "\n", "feed_dict", "=", "dict", "(", ")", "\n", "feed_dict", ".", "update", "(", "{", "model", ".", "reviews", ":", "reviews", "}", ")", "\n", "feed_dict", ".", "update", "(", "{", "model", ".", "win_reviews", ":", "win_reviews", "}", ")", "\n", "feed_dict", ".", "update", "(", "{", "model", ".", "batch_length", ":", "batch_length", "}", ")", "\n", "feed_dict", ".", "update", "(", "{", "model", ".", "asp_labels", ":", "ote_labels", "}", ")", "\n", "feed_dict", ".", "update", "(", "{", "model", ".", "ts_labels", ":", "ts_labels", "}", ")", "\n", "feed_dict", ".", "update", "(", "{", "model", ".", "opn_labels", ":", "opn_labels", "}", ")", "\n", "feed_dict", ".", "update", "(", "{", "model", ".", "stm_lm_labels", ":", "stm_lm_labels", "}", ")", "\n", "# feed_dict.update({model.lmf_labels: lmf_labels})", "\n", "# feed_dict.update({model.lmb_labels: lmb_labels})", "\n", "feed_dict", ".", "update", "(", "{", "model", ".", "lr", ":", "lr", "}", ")", "\n", "feed_dict", ".", "update", "(", "{", "model", ".", "dropout_rate", ":", "dropout_rate", "}", ")", "\n", "feed_dict", ".", "update", "(", "{", "model", ".", "train_flag", ":", "train_flag", "}", ")", "\n", "\n", "return", "feed_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.hsqmlzno1_Transferable-E2E-ABSA.None.utils.get_eval_feed_dict": [[1081, 1094], ["dict", "dict.update", "dict.update", "dict.update", "dict.update", "dict.update", "dict.update", "dict.update"], "function", ["None"], ["", "def", "get_eval_feed_dict", "(", "model", ",", "reviews", ",", "win_reviews", ",", "batch_length", ",", "opn_labels", ",", "dropout_rate", "=", "1.0", ",", "train_flag", "=", "False", ",", "domain_flag", "=", "True", ")", ":", "\n", "    ", "\"\"\"Construct feed dictionary.\"\"\"", "\n", "\n", "feed_dict", "=", "dict", "(", ")", "\n", "feed_dict", ".", "update", "(", "{", "model", ".", "reviews", ":", "reviews", "}", ")", "\n", "feed_dict", ".", "update", "(", "{", "model", ".", "win_reviews", ":", "win_reviews", "}", ")", "\n", "feed_dict", ".", "update", "(", "{", "model", ".", "batch_length", ":", "batch_length", "}", ")", "\n", "feed_dict", ".", "update", "(", "{", "model", ".", "opn_labels", ":", "opn_labels", "}", ")", "\n", "feed_dict", ".", "update", "(", "{", "model", ".", "dropout_rate", ":", "dropout_rate", "}", ")", "\n", "feed_dict", ".", "update", "(", "{", "model", ".", "train_flag", ":", "train_flag", "}", ")", "\n", "feed_dict", ".", "update", "(", "{", "model", ".", "domain_flag", ":", "domain_flag", "}", ")", "\n", "\n", "return", "feed_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.hsqmlzno1_Transferable-E2E-ABSA.None.utils.eval_metric": [[1095, 1135], ["len", "math.ceil", "utils.label2tag", "utils.label2tag", "evals.evaluate_ote", "evals.evaluate_ts", "utils.get_eval_feed_dict", "sess.run", "label2tag.extend", "label2tag.extend", "float", "ote_prediction.tolist", "ts_prediction.tolist"], "function", ["home.repos.pwc.inspect_result.hsqmlzno1_Transferable-E2E-ABSA.None.utils.label2tag", "home.repos.pwc.inspect_result.hsqmlzno1_Transferable-E2E-ABSA.None.utils.label2tag", "home.repos.pwc.inspect_result.hsqmlzno1_Transferable-E2E-ABSA.None.evals.evaluate_ote", "home.repos.pwc.inspect_result.hsqmlzno1_Transferable-E2E-ABSA.None.evals.evaluate_ts", "home.repos.pwc.inspect_result.hsqmlzno1_Transferable-E2E-ABSA.None.utils.get_eval_feed_dict", "home.repos.pwc.inspect_result.hsqmlzno1_Transferable-E2E-ABSA.None.main.run"], ["", "def", "eval_metric", "(", "sess", ",", "model", ",", "params", ",", "dataset", ",", "domain_flag", "=", "True", ",", "eval_batch_size", "=", "100", ")", ":", "\n", "\n", "    ", "gold_ote", "=", "dataset", "[", "'ote_tags'", "]", "\n", "gold_ts", "=", "dataset", "[", "'ts_tags'", "]", "\n", "num", "=", "len", "(", "dataset", "[", "'ote_tags'", "]", ")", "\n", "\n", "ote_predictions", "=", "[", "]", "\n", "ts_predictions", "=", "[", "]", "\n", "batch_count", "=", "0", "\n", "batch_number", "=", "math", ".", "ceil", "(", "num", "/", "float", "(", "eval_batch_size", ")", ")", "\n", "while", "True", ":", "\n", "        ", "if", "batch_count", ">", "batch_number", ":", "\n", "            ", "break", "\n", "", "start", "=", "batch_count", "*", "eval_batch_size", "\n", "end", "=", "start", "+", "eval_batch_size", "\n", "batch_count", "+=", "1", "\n", "\n", "feed_dict", "=", "get_eval_feed_dict", "(", "model", ",", "\n", "reviews", "=", "dataset", "[", "'lm_labels'", "]", "[", "start", ":", "end", "]", ",", "\n", "win_reviews", "=", "dataset", "[", "'wids'", "]", "[", "start", ":", "end", "]", ",", "\n", "batch_length", "=", "dataset", "[", "'length'", "]", "[", "start", ":", "end", "]", ",", "\n", "opn_labels", "=", "dataset", "[", "'opn_labels'", "]", "[", "start", ":", "end", "]", ",", "\n", "dropout_rate", "=", "1.0", ",", "\n", "train_flag", "=", "False", ",", "\n", "domain_flag", "=", "domain_flag", ")", "\n", "\n", "ote_prediction", ",", "ts_prediction", "=", "sess", ".", "run", "(", "[", "model", ".", "asp_predictions", ",", "model", ".", "ts_predictions", "]", ",", "feed_dict", "=", "feed_dict", ")", "\n", "ote_predictions", ".", "extend", "(", "ote_prediction", ".", "tolist", "(", ")", ")", "\n", "ts_predictions", ".", "extend", "(", "ts_prediction", ".", "tolist", "(", ")", ")", "\n", "\n", "\n", "", "ote_predictions", "=", "label2tag", "(", "label_sequence", "=", "ote_predictions", ",", "tag_vocab", "=", "params", ".", "ote_tag_vocab", ")", "\n", "ts_predictions", "=", "label2tag", "(", "label_sequence", "=", "ts_predictions", ",", "tag_vocab", "=", "params", ".", "ts_tag_vocab", ")", "\n", "\n", "# evaluation", "\n", "ote_scores", "=", "evaluate_ote", "(", "gold_ot", "=", "gold_ote", ",", "pred_ot", "=", "ote_predictions", ",", "length", "=", "dataset", "[", "'length'", "]", ")", "\n", "ts_scores", "=", "evaluate_ts", "(", "gold_ts", "=", "gold_ts", ",", "pred_ts", "=", "ts_predictions", ",", "length", "=", "dataset", "[", "'length'", "]", ")", "\n", "\n", "\n", "return", "ote_scores", ",", "ts_scores", ",", "ote_predictions", ",", "ts_predictions", "\n", "# return ts_scores, ts_predictions", "\n"]], "home.repos.pwc.inspect_result.hsqmlzno1_Transferable-E2E-ABSA.None.utils.store_results": [[1138, 1156], ["open", "open.write", "open.close", "os.path.exists", "os.mkdir", "os.path.exists", "os.mkdir"], "function", ["None"], ["", "def", "store_results", "(", "model_name", ",", "round", ",", "source_domain", ",", "target_domain", ",", "ote_score", ",", "ts_score", ")", ":", "\n", "\n", "    ", "output_dir", "=", "\"./work/results/\"", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "output_dir", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "output_dir", ")", "\n", "\n", "", "model_dir", "=", "output_dir", "+", "\"%s/\"", "%", "model_name", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "model_dir", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "model_dir", ")", "\n", "\n", "", "ote_p", ",", "ote_r", ",", "ote_f1", "=", "ote_score", "\n", "_", ",", "ts_micro_p", ",", "ts_micro_r", ",", "ts_micro_f1", "=", "ts_score", "\n", "\n", "f", "=", "open", "(", "model_dir", "+", "'Round%d.txt'", "%", "(", "round", ")", ",", "\"a\"", ")", "\n", "f", ".", "write", "(", "'{:<20} {:.4f} {:.4f} {:.4f} {:.4f} {:.4f} {:.4f}\\n'", ".", "format", "(", "source_domain", "+", "'-'", "+", "target_domain", ",", "\n", "ote_p", ",", "ote_r", ",", "ote_f1", ",", "\n", "ts_micro_p", ",", "ts_micro_r", ",", "ts_micro_f1", ")", ")", "\n", "f", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hsqmlzno1_Transferable-E2E-ABSA.None.utils.store_predictions": [[1157, 1201], ["len", "vars", "output_lines.append", "range", "os.path.join", "os.path.join", "range", "output_lines.append", "os.path.exists", "os.mkdir", "os.path.exists", "os.mkdir", "open", "fp.writelines", "output_lines.append", "len", "len", "len", "output_lines.append"], "function", ["None"], ["", "def", "store_predictions", "(", "params", ",", "test_set", ",", "best_pred_ote", ",", "best_pred_ts", ",", "test_ts_micro_f1", ")", ":", "\n", "\n", "    ", "n_sample", "=", "len", "(", "test_set", "[", "'lm_labels'", "]", ")", "\n", "gold_ote", "=", "test_set", "[", "'ote_tags'", "]", "\n", "gold_ts", "=", "test_set", "[", "'ts_tags'", "]", "\n", "output_lines", "=", "[", "'Source domain: %s  '", "%", "params", ".", "source_domain", ",", "'Target domain: %s\\n'", "%", "params", ".", "target_domain", ",", "\n", "'Parameter settings: \\n'", "]", "\n", "params_dict", "=", "vars", "(", "params", ")", "\n", "for", "k", "in", "params_dict", ":", "\n", "        ", "if", "k", "==", "'char_vocab'", "or", "k", "==", "'vocab'", ":", "\n", "            ", "continue", "\n", "", "else", ":", "\n", "            ", "v", "=", "params_dict", "[", "k", "]", "\n", "output_lines", ".", "append", "(", "'\\t%s: %s\\n'", "%", "(", "k", ",", "v", ")", ")", "\n", "", "", "output_lines", ".", "append", "(", "\"==============================================\\n\\n\"", ")", "\n", "for", "i", "in", "range", "(", "n_sample", ")", ":", "\n", "        ", "ote_seq", "=", "best_pred_ote", "[", "i", "]", "\n", "ts_seq", "=", "best_pred_ts", "[", "i", "]", "\n", "w_seq", "=", "test_set", "[", "'words'", "]", "[", "i", "]", "\n", "length", "=", "test_set", "[", "'length'", "]", "[", "i", "]", "\n", "ote_seq_gold", "=", "gold_ote", "[", "i", "]", "\n", "ts_seq_gold", "=", "gold_ts", "[", "i", "]", "\n", "assert", "len", "(", "ote_seq", ")", "==", "len", "(", "ts_seq", ")", "==", "len", "(", "w_seq", ")", "\n", "for", "j", "in", "range", "(", "length", ")", ":", "\n", "            ", "word", "=", "w_seq", "[", "j", "]", "\n", "ote_tag", "=", "ote_seq", "[", "j", "]", "\n", "ote_tag_gold", "=", "ote_seq_gold", "[", "j", "]", "\n", "ts_tag", "=", "ts_seq", "[", "j", "]", "\n", "ts_tag_gold", "=", "ts_seq_gold", "[", "j", "]", "\n", "output_lines", ".", "append", "(", "'%20s\\t%s\\t%s\\t%s\\t%s\\n'", "%", "(", "word", ",", "ote_tag", ",", "ote_tag_gold", ",", "ts_tag", ",", "ts_tag_gold", ")", ")", "\n", "# use empty lines as the separator", "\n", "", "output_lines", ".", "append", "(", "'\\n'", ")", "\n", "\n", "", "output_dir", "=", "'./work/predictions'", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "output_dir", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "output_dir", ")", "\n", "", "output_dir", "=", "os", ".", "path", ".", "join", "(", "output_dir", ",", "params", ".", "model_name", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "output_dir", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "output_dir", ")", "\n", "\n", "", "output_file", "=", "os", ".", "path", ".", "join", "(", "output_dir", ",", "'%s_%s_%.6lf.txt'", "%", "(", "\n", "params", ".", "source_domain", ",", "params", ".", "target_domain", ",", "test_ts_micro_f1", ")", ")", "\n", "with", "open", "(", "output_file", ",", "'w+'", ")", "as", "fp", ":", "\n", "        ", "fp", ".", "writelines", "(", "output_lines", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.hsqmlzno1_Transferable-E2E-ABSA.models.flip_gradient.FlipGradientBuilder.__init__": [[6, 8], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "num_calls", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.hsqmlzno1_Transferable-E2E-ABSA.models.flip_gradient.FlipGradientBuilder.__call__": [[9, 22], ["tensorflow.python.framework.ops.RegisterGradient", "tensorflow.get_default_graph", "tensorflow.get_default_graph.gradient_override_map", "tensorflow.identity", "tensorflow.negative"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "x", ",", "l", "=", "1.0", ")", ":", "\n", "        ", "grad_name", "=", "\"FlipGradient%d\"", "%", "self", ".", "num_calls", "\n", "\n", "@", "ops", ".", "RegisterGradient", "(", "grad_name", ")", "\n", "def", "_flip_gradients", "(", "op", ",", "grad", ")", ":", "\n", "            ", "return", "[", "tf", ".", "negative", "(", "grad", ")", "*", "l", "]", "\n", "\n", "", "g", "=", "tf", ".", "get_default_graph", "(", ")", "\n", "with", "g", ".", "gradient_override_map", "(", "{", "\"Identity\"", ":", "grad_name", "}", ")", ":", "\n", "            ", "y", "=", "tf", ".", "identity", "(", "x", ")", "\n", "\n", "", "self", ".", "num_calls", "+=", "1", "\n", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.hsqmlzno1_Transferable-E2E-ABSA.models.nn_utils.fc_layer": [[6, 20], ["tensorflow.variable_scope", "inputs.shape.as_list", "tensorflow.get_variable", "tensorflow.get_variable", "activation", "tensorflow.random_uniform_initializer", "tensorflow.constant_initializer", "tensorflow.matmul", "tensorflow.matmul"], "function", ["None"], ["def", "fc_layer", "(", "inputs", ",", "output_dim", "=", "None", ",", "activation", "=", "None", ",", "scope", "=", "None", ",", "reuse", "=", "False", ")", ":", "\n", "\n", "    ", "with", "tf", ".", "variable_scope", "(", "scope", ",", "reuse", "=", "reuse", ")", ":", "\n", "\n", "        ", "_", ",", "embed_dim", "=", "inputs", ".", "shape", ".", "as_list", "(", ")", "\n", "W_fc", "=", "tf", ".", "get_variable", "(", "shape", "=", "[", "embed_dim", ",", "output_dim", "]", ",", "name", "=", "'weight'", ",", "dtype", "=", "tf", ".", "float32", ",", "initializer", "=", "tf", ".", "random_uniform_initializer", "(", "-", "0.2", ",", "0.2", ")", ")", "\n", "b_fc", "=", "tf", ".", "get_variable", "(", "shape", "=", "[", "output_dim", "]", ",", "name", "=", "'bias'", ",", "dtype", "=", "tf", ".", "float32", ",", "initializer", "=", "tf", ".", "constant_initializer", "(", "0.0", ")", ")", "\n", "\n", "if", "activation", "!=", "None", ":", "\n", "            ", "outputs", "=", "activation", "(", "tf", ".", "matmul", "(", "inputs", ",", "W_fc", ")", "+", "b_fc", ")", "\n", "", "else", ":", "\n", "            ", "outputs", "=", "tf", ".", "matmul", "(", "inputs", ",", "W_fc", ")", "+", "b_fc", "\n", "\n", "", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.hsqmlzno1_Transferable-E2E-ABSA.models.nn_utils.dense": [[21, 30], ["tensorflow.name_scope", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.truncated_normal", "tensorflow.constant", "act", "act", "tensorflow.sparse_tensor_dense_matmul", "tensorflow.matmul", "tensorflow.sqrt"], "function", ["None"], ["", "def", "dense", "(", "input_tensor", ",", "input_dim", ",", "output_dim", ",", "layer_name", ",", "act", "=", "tf", ".", "nn", ".", "relu", ",", "input_type", "=", "'dense'", ")", ":", "\n", "    ", "with", "tf", ".", "name_scope", "(", "layer_name", ")", ":", "\n", "        ", "weight", "=", "tf", ".", "Variable", "(", "tf", ".", "truncated_normal", "(", "[", "input_dim", ",", "output_dim", "]", ",", "stddev", "=", "1.", "/", "tf", ".", "sqrt", "(", "input_dim", "/", "2.", ")", ")", ",", "name", "=", "'weight'", ")", "\n", "bias", "=", "tf", ".", "Variable", "(", "tf", ".", "constant", "(", "0.1", ",", "shape", "=", "[", "output_dim", "]", ")", ",", "name", "=", "'bias'", ")", "\n", "if", "input_type", "==", "'sparse'", ":", "\n", "            ", "activations", "=", "act", "(", "tf", ".", "sparse_tensor_dense_matmul", "(", "input_tensor", ",", "weight", ")", "+", "bias", ")", "\n", "", "else", ":", "\n", "            ", "activations", "=", "act", "(", "tf", ".", "matmul", "(", "input_tensor", ",", "weight", ")", "+", "bias", ")", "\n", "", "return", "activations", "\n", "\n"]], "home.repos.pwc.inspect_result.hsqmlzno1_Transferable-E2E-ABSA.models.nn_utils.mask_softmax": [[31, 38], ["tensorflow.name_scope", "tensorflow.reduce_max", "tensorflow.reduce_sum", "tensorflow.exp"], "function", ["None"], ["", "", "def", "mask_softmax", "(", "target", ",", "axis", ",", "mask", ",", "epsilon", "=", "1e-12", ",", "name", "=", "None", ")", ":", "\n", "    ", "with", "tf", ".", "name_scope", "(", "name", ",", "'softmax'", ",", "[", "target", "]", ")", ":", "\n", "        ", "max_axis", "=", "tf", ".", "reduce_max", "(", "target", ",", "axis", ",", "keep_dims", "=", "True", ")", "\n", "target_exp", "=", "tf", ".", "exp", "(", "target", "-", "max_axis", ")", "*", "mask", "\n", "normalize", "=", "tf", ".", "reduce_sum", "(", "target_exp", ",", "axis", ",", "keep_dims", "=", "True", ")", "\n", "softmax", "=", "target_exp", "/", "(", "normalize", "+", "epsilon", ")", "\n", "return", "softmax", "\n", "\n"]], "home.repos.pwc.inspect_result.hsqmlzno1_Transferable-E2E-ABSA.models.nn_utils.add_gradient_noise": [[39, 53], ["tensorflow.name_scope", "tensorflow.convert_to_tensor", "tensorflow.random_normal", "tensorflow.add", "tensorflow.shape"], "function", ["None"], ["", "", "def", "add_gradient_noise", "(", "t", ",", "stddev", "=", "1e-3", ",", "name", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Adds gradient noise as described in http://arxiv.org/abs/1511.06807 [2].\n\n    The input Tensor `t` should be a gradient.\n\n    The output will be `t` + gaussian noise.\n\n    0.001 was said to be a good fixed value for memory networks [2].\n    \"\"\"", "\n", "with", "tf", ".", "name_scope", "(", "name", ",", "\"add_gradient_noise\"", ",", "[", "t", ",", "stddev", "]", ")", "as", "name", ":", "\n", "        ", "t", "=", "tf", ".", "convert_to_tensor", "(", "t", ",", "name", "=", "\"t\"", ")", "\n", "gn", "=", "tf", ".", "random_normal", "(", "tf", ".", "shape", "(", "t", ")", ",", "stddev", "=", "stddev", ")", "\n", "return", "tf", ".", "add", "(", "t", ",", "gn", ",", "name", "=", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hsqmlzno1_Transferable-E2E-ABSA.models.nn_utils.zero_nil_slot": [[54, 66], ["tensorflow.name_scope", "tensorflow.convert_to_tensor", "tensorflow.zeros", "tensorflow.concat", "tensorflow.shape", "tensorflow.slice"], "function", ["None"], ["", "", "def", "zero_nil_slot", "(", "t", ",", "name", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Overwrites the nil_slot (first row) of the input Tensor with zeros.\n\n    The nil_slot is a dummy slot and should not be trained and influence\n    the training algorithm.\n    \"\"\"", "\n", "with", "tf", ".", "name_scope", "(", "name", ",", "\"zero_nil_slot\"", ",", "[", "t", "]", ")", "as", "name", ":", "\n", "        ", "t", "=", "tf", ".", "convert_to_tensor", "(", "t", ",", "name", "=", "\"t\"", ")", "\n", "s", "=", "tf", ".", "shape", "(", "t", ")", "[", "1", "]", "\n", "z", "=", "tf", ".", "zeros", "(", "[", "1", ",", "s", "]", ")", "\n", "return", "tf", ".", "concat", "(", "[", "z", ",", "tf", ".", "slice", "(", "t", ",", "[", "1", ",", "0", "]", ",", "[", "-", "1", ",", "-", "1", "]", ")", "]", ",", "0", ",", "name", "=", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hsqmlzno1_Transferable-E2E-ABSA.models.nn_utils.train_network": [[67, 85], ["opt.compute_gradients", "print", "opt.apply_gradients", "print", "tensorflow.clip_by_norm", "nn_utils.add_gradient_noise", "nil_grads_and_vars.append", "nil_grads_and_vars.append", "nn_utils.zero_nil_slot"], "function", ["home.repos.pwc.inspect_result.hsqmlzno1_Transferable-E2E-ABSA.models.nn_utils.add_gradient_noise", "home.repos.pwc.inspect_result.hsqmlzno1_Transferable-E2E-ABSA.models.nn_utils.zero_nil_slot"], ["", "", "def", "train_network", "(", "opt", ",", "loss", ",", "var_list", ",", "nil_vars", ",", "max_grad_norm", ",", "scope", ")", ":", "\n", "\n", "    ", "grads_and_vars", "=", "opt", ".", "compute_gradients", "(", "loss", ",", "var_list", "=", "var_list", ")", "\n", "print", "(", "scope", ")", "\n", "for", "g", ",", "v", "in", "grads_and_vars", ":", "\n", "        ", "if", "g", "is", "not", "None", ":", "\n", "            ", "print", "(", "v", ")", "\n", "", "", "grads_and_vars", "=", "[", "(", "tf", ".", "clip_by_norm", "(", "g", ",", "max_grad_norm", ")", ",", "v", ")", "for", "g", ",", "v", "in", "grads_and_vars", "if", "g", "is", "not", "None", "]", "\n", "grads_and_vars", "=", "[", "(", "add_gradient_noise", "(", "g", ")", ",", "v", ")", "for", "g", ",", "v", "in", "grads_and_vars", "]", "\n", "nil_grads_and_vars", "=", "[", "]", "\n", "for", "g", ",", "v", "in", "grads_and_vars", ":", "\n", "        ", "if", "v", ".", "name", "in", "nil_vars", ":", "\n", "            ", "nil_grads_and_vars", ".", "append", "(", "(", "zero_nil_slot", "(", "g", ")", ",", "v", ")", ")", "\n", "", "else", ":", "\n", "            ", "nil_grads_and_vars", ".", "append", "(", "(", "g", ",", "v", ")", ")", "\n", "", "", "train_op", "=", "opt", ".", "apply_gradients", "(", "nil_grads_and_vars", ",", "name", "=", "scope", ")", "\n", "\n", "return", "train_op", "\n", "", ""]], "home.repos.pwc.inspect_result.hsqmlzno1_Transferable-E2E-ABSA.models.model.Trans_E2E_ABSA.__init__": [[16, 47], ["tensorflow.random_uniform_initializer", "model.Trans_E2E_ABSA.build_inputs", "model.Trans_E2E_ABSA.build_vars", "model.Trans_E2E_ABSA.build_graph"], "methods", ["home.repos.pwc.inspect_result.hsqmlzno1_Transferable-E2E-ABSA.models.model.Trans_E2E_ABSA.build_inputs", "home.repos.pwc.inspect_result.hsqmlzno1_Transferable-E2E-ABSA.models.architectures.SuperNN.build_vars", "home.repos.pwc.inspect_result.hsqmlzno1_Transferable-E2E-ABSA.models.model.Trans_E2E_ABSA.build_graph"], ["    ", "def", "__init__", "(", "self", ",", "\n", "args", ",", "\n", "word_vecs", ",", "\n", "init", "=", "tf", ".", "random_uniform_initializer", "(", "minval", "=", "-", "0.2", ",", "maxval", "=", "0.2", ")", ",", "\n", "name", "=", "'Trans_TBSA'", ")", ":", "\n", "\n", "        ", "self", ".", "args", "=", "args", "\n", "self", ".", "word_vecs", "=", "word_vecs", "\n", "self", ".", "init", "=", "init", "\n", "self", ".", "name", "=", "name", "\n", "\n", "self", ".", "batch_size", "=", "args", ".", "batch_size", "\n", "self", ".", "max_len", "=", "args", ".", "max_len", "\n", "\n", "self", ".", "dim_w", "=", "args", ".", "dim_w", "\n", "self", ".", "dim_asp_h", "=", "args", ".", "dim_asp_h", "\n", "self", ".", "dim_opn_h", "=", "args", ".", "dim_opn_h", "\n", "self", ".", "dim_ts_h", "=", "args", ".", "dim_ts_h", "\n", "self", ".", "dim_rel", "=", "args", ".", "dim_rel", "\n", "self", ".", "dim_ote_y", "=", "args", ".", "dim_ote_y", "\n", "self", ".", "dim_ts_y", "=", "args", ".", "dim_ts_y", "\n", "self", ".", "dim_lm_y", "=", "args", ".", "dim_lm_y", "\n", "self", ".", "input_win", "=", "args", ".", "input_win", "\n", "self", ".", "optimizer", "=", "args", ".", "optimizer", "\n", "self", ".", "lr", "=", "args", ".", "lr", "\n", "self", ".", "clip_grad", "=", "args", ".", "clip_grad", "\n", "self", ".", "batch_size", "=", "args", ".", "batch_size", "\n", "\n", "self", ".", "build_inputs", "(", ")", "\n", "self", ".", "build_vars", "(", ")", "\n", "self", ".", "build_graph", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hsqmlzno1_Transferable-E2E-ABSA.models.model.Trans_E2E_ABSA.build_inputs": [[49, 67], ["tensorflow.name_scope", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder_with_default", "tensorflow.placeholder", "tensorflow.placeholder"], "methods", ["None"], ["", "def", "build_inputs", "(", "self", ")", ":", "\n", "\n", "        ", "with", "tf", ".", "name_scope", "(", "'input'", ")", ":", "\n", "\n", "            ", "self", ".", "reviews", "=", "tf", ".", "placeholder", "(", "dtype", "=", "tf", ".", "int32", ",", "shape", "=", "[", "None", ",", "self", ".", "max_len", "]", ",", "name", "=", "\"reviews\"", ")", "\n", "self", ".", "win_reviews", "=", "tf", ".", "placeholder", "(", "dtype", "=", "tf", ".", "int32", ",", "shape", "=", "[", "None", ",", "self", ".", "max_len", ",", "self", ".", "input_win", "]", ",", "name", "=", "\"win_reviews\"", ")", "\n", "self", ".", "batch_length", "=", "tf", ".", "placeholder", "(", "dtype", "=", "tf", ".", "int32", ",", "shape", "=", "[", "None", ",", "]", ",", "name", "=", "\"batch_length\"", ")", "\n", "\n", "self", ".", "asp_labels", "=", "tf", ".", "placeholder", "(", "dtype", "=", "tf", ".", "int32", ",", "shape", "=", "[", "None", ",", "self", ".", "max_len", "]", ",", "name", "=", "\"asp_labels\"", ")", "\n", "self", ".", "opn_labels", "=", "tf", ".", "placeholder", "(", "dtype", "=", "tf", ".", "int32", ",", "shape", "=", "[", "None", ",", "self", ".", "max_len", "]", ",", "name", "=", "\"opn_labels\"", ")", "\n", "self", ".", "ts_labels", "=", "tf", ".", "placeholder", "(", "dtype", "=", "tf", ".", "int32", ",", "shape", "=", "[", "None", ",", "self", ".", "max_len", "]", ",", "name", "=", "\"ts_labels\"", ")", "\n", "self", ".", "stm_lm_labels", "=", "tf", ".", "placeholder", "(", "dtype", "=", "tf", ".", "int32", ",", "shape", "=", "[", "None", ",", "self", ".", "max_len", "]", ",", "name", "=", "\"stm_lm_labels\"", ")", "\n", "\n", "self", ".", "lr", "=", "tf", ".", "placeholder", "(", "dtype", "=", "tf", ".", "float32", ",", "shape", "=", "[", "]", ",", "name", "=", "\"learning_rate\"", ")", "\n", "self", ".", "adapt", "=", "tf", ".", "placeholder", "(", "dtype", "=", "tf", ".", "float32", ",", "shape", "=", "[", "]", ",", "name", "=", "\"adapt_rate\"", ")", "\n", "self", ".", "dropout_rate", "=", "tf", ".", "placeholder_with_default", "(", "1.", ",", "shape", "=", "(", ")", ")", "\n", "self", ".", "train_flag", "=", "tf", ".", "placeholder", "(", "dtype", "=", "tf", ".", "bool", ")", "\n", "self", ".", "domain_flag", "=", "tf", ".", "placeholder", "(", "dtype", "=", "tf", ".", "bool", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hsqmlzno1_Transferable-E2E-ABSA.models.model.Trans_E2E_ABSA.build_vars": [[68, 81], ["tensorflow.variable_scope", "tensorflow.convert_to_tensor", "tensorflow.Variable", "set", "tensorflow.Variable", "tensorflow.Variable", "architectures.SuperNN", "model.Trans_E2E_ABSA.init", "model.Trans_E2E_ABSA.init"], "methods", ["None"], ["", "", "def", "build_vars", "(", "self", ")", ":", "\n", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "self", ".", "name", ")", ":", "\n", "\n", "            ", "word_vecs", "=", "tf", ".", "convert_to_tensor", "(", "self", ".", "word_vecs", ")", "\n", "self", ".", "word2vec", "=", "tf", ".", "Variable", "(", "word_vecs", ",", "name", "=", "\"word2vec\"", ",", "trainable", "=", "True", ")", "\n", "self", ".", "nil_vars", "=", "set", "(", "[", "self", ".", "word2vec", ".", "name", "]", ")", "\n", "\n", "# global memories for aspect and opinion", "\n", "self", ".", "ma", "=", "tf", ".", "Variable", "(", "self", ".", "init", "(", "[", "1", ",", "2", "*", "self", ".", "dim_asp_h", "]", ")", ",", "name", "=", "'ma'", ")", "\n", "self", ".", "mo", "=", "tf", ".", "Variable", "(", "self", ".", "init", "(", "[", "1", ",", "2", "*", "self", ".", "dim_opn_h", "]", ")", ",", "name", "=", "'mo'", ")", "\n", "\n", "self", ".", "SuperNet", "=", "architectures", ".", "SuperNN", "(", "self", ".", "args", ",", "self", ".", "word2vec", ",", "init", "=", "self", ".", "init", ",", "scope", "=", "\"shared\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hsqmlzno1_Transferable-E2E-ABSA.models.model.Trans_E2E_ABSA.build_graph": [[82, 155], ["tensorflow.variable_scope", "tensorflow.cond", "tensorflow.cond", "tensorflow.cond", "tensorflow.cond", "tensorflow.cond", "tensorflow.cond", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.cast", "tensorflow.cast", "model.Trans_E2E_ABSA.SuperNet", "model.Trans_E2E_ABSA.SuperNet", "tensorflow.concat", "tensorflow.nn.softmax_cross_entropy_with_logits", "tensorflow.nn.softmax_cross_entropy_with_logits", "tensorflow.nn.softmax_cross_entropy_with_logits", "tensorflow.concat", "model.Trans_E2E_ABSA.add_adv_loss", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.cond", "tensorflow.cond", "tensorflow.cond", "tensorflow.cond", "tensorflow.reshape", "tensorflow.reshape", "nn_utils.train_network", "nn_utils.train_network", "tensorflow.sign", "tensorflow.sign", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reduce_sum", "tensorflow.cast", "tensorflow.reduce_sum", "tensorflow.cast", "tensorflow.reduce_sum", "tensorflow.cast", "tensorflow.argmax", "tensorflow.argmax", "tensorflow.train.AdamOptimizer", "tensorflow.slice", "tensorflow.slice", "tensorflow.slice", "tensorflow.slice", "tensorflow.slice", "tensorflow.slice", "tensorflow.one_hot", "tensorflow.one_hot", "tensorflow.one_hot", "tensorflow.train.MomentumOptimizer", "tensorflow.get_collection", "tensorflow.train.AdadeltaOptimizer", "tensorflow.train.GradientDescentOptimizer", "Exception"], "methods", ["home.repos.pwc.inspect_result.hsqmlzno1_Transferable-E2E-ABSA.models.model.Trans_E2E_ABSA.add_adv_loss", "home.repos.pwc.inspect_result.hsqmlzno1_Transferable-E2E-ABSA.models.nn_utils.train_network", "home.repos.pwc.inspect_result.hsqmlzno1_Transferable-E2E-ABSA.models.nn_utils.train_network"], ["", "", "def", "build_graph", "(", "self", ")", ":", "\n", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "self", ".", "name", ")", ":", "\n", "\n", "            ", "src_reviews", "=", "tf", ".", "cond", "(", "self", ".", "train_flag", ",", "lambda", ":", "tf", ".", "slice", "(", "self", ".", "reviews", ",", "[", "0", ",", "0", "]", ",", "[", "self", ".", "batch_size", ",", "self", ".", "max_len", "]", ")", ",", "lambda", ":", "self", ".", "reviews", ")", "\n", "tar_reviews", "=", "tf", ".", "cond", "(", "self", ".", "train_flag", ",", "lambda", ":", "tf", ".", "slice", "(", "self", ".", "reviews", ",", "[", "self", ".", "batch_size", ",", "0", "]", ",", "[", "self", ".", "batch_size", ",", "self", ".", "max_len", "]", ")", ",", "lambda", ":", "self", ".", "reviews", ")", "\n", "src_batch_length", "=", "tf", ".", "cond", "(", "self", ".", "train_flag", ",", "lambda", ":", "tf", ".", "slice", "(", "self", ".", "batch_length", ",", "[", "0", "]", ",", "[", "self", ".", "batch_size", "]", ")", ",", "lambda", ":", "self", ".", "batch_length", ")", "\n", "tar_batch_length", "=", "tf", ".", "cond", "(", "self", ".", "train_flag", ",", "lambda", ":", "tf", ".", "slice", "(", "self", ".", "batch_length", ",", "[", "self", ".", "batch_size", "]", ",", "[", "self", ".", "batch_size", "]", ")", ",", "lambda", ":", "self", ".", "batch_length", ")", "\n", "\n", "asp_labels", "=", "tf", ".", "cond", "(", "self", ".", "train_flag", ",", "lambda", ":", "tf", ".", "slice", "(", "self", ".", "asp_labels", ",", "[", "0", ",", "0", "]", ",", "[", "self", ".", "batch_size", ",", "self", ".", "max_len", "]", ")", ",", "lambda", ":", "self", ".", "asp_labels", ")", "\n", "ts_labels", "=", "tf", ".", "cond", "(", "self", ".", "train_flag", ",", "lambda", ":", "tf", ".", "slice", "(", "self", ".", "ts_labels", ",", "[", "0", ",", "0", "]", ",", "[", "self", ".", "batch_size", ",", "self", ".", "max_len", "]", ")", ",", "lambda", ":", "self", ".", "ts_labels", ")", "\n", "asp_labels", "=", "tf", ".", "reshape", "(", "asp_labels", ",", "[", "-", "1", "]", ")", "\n", "ts_labels", "=", "tf", ".", "reshape", "(", "ts_labels", ",", "[", "-", "1", "]", ")", "\n", "opn_labels", "=", "tf", ".", "reshape", "(", "self", ".", "opn_labels", ",", "[", "-", "1", "]", ")", "\n", "\n", "src_weights_mask", "=", "tf", ".", "cast", "(", "tf", ".", "sign", "(", "src_reviews", ")", ",", "tf", ".", "float32", ")", "\n", "weights_mask", "=", "tf", ".", "cast", "(", "tf", ".", "sign", "(", "self", ".", "reviews", ")", ",", "tf", ".", "float32", ")", "\n", "\n", "asp_h_s", ",", "ts_h_s", ",", "asp_pred_s", ",", "opn_pred_s", ",", "ts_pred_s", ",", "ma_s", ",", "mo_s", ",", "alpha_a_s", ",", "alpha_o_s", "=", "self", ".", "SuperNet", "(", "src_reviews", ",", "src_batch_length", ",", "self", ".", "ma", ",", "self", ".", "mo", ",", "self", ".", "dropout_rate", ",", "reuse", "=", "False", ")", "\n", "asp_h_t", ",", "ts_h_t", ",", "asp_pred_t", ",", "opn_pred_t", ",", "ts_pred_t", ",", "ma_t", ",", "mo_t", ",", "alpha_a_t", ",", "alpha_o_t", "=", "self", ".", "SuperNet", "(", "tar_reviews", ",", "tar_batch_length", ",", "self", ".", "ma", ",", "self", ".", "mo", ",", "self", ".", "dropout_rate", ",", "reuse", "=", "True", ")", "\n", "opn_pred", "=", "tf", ".", "concat", "(", "[", "opn_pred_s", ",", "opn_pred_t", "]", ",", "0", ")", "\n", "\n", "asp_loss", "=", "tf", ".", "nn", ".", "softmax_cross_entropy_with_logits", "(", "labels", "=", "tf", ".", "one_hot", "(", "asp_labels", ",", "self", ".", "dim_ote_y", ")", ",", "logits", "=", "asp_pred_s", ",", "name", "=", "'ote_tagger'", ")", "#(b*m, dim_ote_y)", "\n", "opn_loss", "=", "tf", ".", "nn", ".", "softmax_cross_entropy_with_logits", "(", "labels", "=", "tf", ".", "one_hot", "(", "opn_labels", ",", "self", ".", "dim_lm_y", ")", ",", "logits", "=", "opn_pred", ",", "name", "=", "'opn_tagger'", ")", "#(b*m, dim_lm_y)", "\n", "ts_loss", "=", "tf", ".", "nn", ".", "softmax_cross_entropy_with_logits", "(", "labels", "=", "tf", ".", "one_hot", "(", "ts_labels", ",", "self", ".", "dim_ts_y", ")", ",", "logits", "=", "ts_pred_s", ",", "name", "=", "'ts_tagger'", ")", "#(b*m, dim_ts_y)", "\n", "\n", "asp_attention", "=", "tf", ".", "concat", "(", "[", "alpha_a_s", ",", "alpha_a_t", "]", ",", "0", ")", "\n", "self", ".", "ote_transfer_loss", "=", "self", ".", "add_adv_loss", "(", "asp_h_s", ",", "asp_h_t", ",", "\n", "adapt_rate", "=", "self", ".", "args", ".", "adapt_rate", ",", "\n", "attention", "=", "asp_attention", ",", "\n", "mask", "=", "weights_mask", ",", "\n", "batch_length", "=", "self", ".", "batch_length", ",", "\n", "selective", "=", "self", ".", "args", ".", "selective", ",", "\n", "weight", "=", "self", ".", "args", ".", "adv_weight", ",", "scope", "=", "'asp_dann'", ")", "\n", "\n", "asp_loss", "=", "tf", ".", "reshape", "(", "asp_loss", ",", "[", "-", "1", ",", "self", ".", "max_len", "]", ")", "*", "src_weights_mask", "#(b, m)", "\n", "ts_loss", "=", "tf", ".", "reshape", "(", "ts_loss", ",", "[", "-", "1", ",", "self", ".", "max_len", "]", ")", "*", "src_weights_mask", "#(b, m)", "\n", "opn_loss", "=", "tf", ".", "reshape", "(", "opn_loss", ",", "[", "-", "1", ",", "self", ".", "max_len", "]", ")", "*", "weights_mask", "#(b, m)", "\n", "\n", "asp_loss", "=", "tf", ".", "reduce_sum", "(", "asp_loss", ",", "axis", "=", "-", "1", ")", "/", "tf", ".", "cast", "(", "src_batch_length", ",", "tf", ".", "float32", ")", "#(b)", "\n", "ts_loss", "=", "tf", ".", "reduce_sum", "(", "ts_loss", ",", "axis", "=", "-", "1", ")", "/", "tf", ".", "cast", "(", "src_batch_length", ",", "tf", ".", "float32", ")", "#(b)", "\n", "opn_loss", "=", "tf", ".", "reduce_sum", "(", "opn_loss", ",", "axis", "=", "-", "1", ")", "/", "tf", ".", "cast", "(", "self", ".", "batch_length", ",", "tf", ".", "float32", ")", "#(b)", "\n", "\n", "self", ".", "asp_loss", "=", "tf", ".", "reduce_mean", "(", "asp_loss", ")", "\n", "self", ".", "ts_loss", "=", "tf", ".", "reduce_mean", "(", "ts_loss", ")", "\n", "self", ".", "opn_loss", "=", "tf", ".", "reduce_mean", "(", "opn_loss", ")", "\n", "\n", "self", ".", "loss", "=", "self", ".", "asp_loss", "+", "self", ".", "opn_loss", "+", "self", ".", "ts_loss", "\n", "\n", "asp_pred", "=", "tf", ".", "cond", "(", "self", ".", "domain_flag", ",", "lambda", ":", "asp_pred_s", ",", "lambda", ":", "asp_pred_t", ")", "\n", "ts_pred", "=", "tf", ".", "cond", "(", "self", ".", "domain_flag", ",", "lambda", ":", "ts_pred_s", ",", "lambda", ":", "ts_pred_t", ")", "\n", "self", ".", "asp_attentions", "=", "tf", ".", "cond", "(", "self", ".", "domain_flag", ",", "lambda", ":", "alpha_a_s", ",", "lambda", ":", "alpha_a_t", ")", "\n", "self", ".", "opn_attentions", "=", "tf", ".", "cond", "(", "self", ".", "domain_flag", ",", "lambda", ":", "alpha_o_s", ",", "lambda", ":", "alpha_o_t", ")", "\n", "\n", "self", ".", "asp_predictions", "=", "tf", ".", "reshape", "(", "tf", ".", "argmax", "(", "asp_pred", ",", "-", "1", ",", "name", "=", "\"asp_predictions\"", ")", ",", "[", "-", "1", ",", "self", ".", "max_len", "]", ")", "\n", "self", ".", "ts_predictions", "=", "tf", ".", "reshape", "(", "tf", ".", "argmax", "(", "ts_pred", ",", "-", "1", ",", "name", "=", "\"ts_predictions\"", ")", ",", "[", "-", "1", ",", "self", ".", "max_len", "]", ")", "\n", "\n", "# determine the optimizer", "\n", "if", "self", ".", "args", ".", "optimizer", "==", "\"adam\"", ":", "\n", "                ", "self", ".", "opt", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "self", ".", "lr", ")", "\n", "", "elif", "self", ".", "args", ".", "optimizer", "==", "\"momentum\"", ":", "\n", "                ", "self", ".", "opt", "=", "tf", ".", "train", ".", "MomentumOptimizer", "(", "self", ".", "lr", ",", "0.9", ")", "\n", "", "elif", "self", ".", "args", ".", "optimizer", "==", "\"adadelta\"", ":", "\n", "                ", "self", ".", "opt", "=", "tf", ".", "train", ".", "AdadeltaOptimizer", "(", "self", ".", "lr", ")", "\n", "", "elif", "self", ".", "args", ".", "optimizer", "==", "\"sgd\"", ":", "\n", "                ", "self", ".", "opt", "=", "tf", ".", "train", ".", "GradientDescentOptimizer", "(", "self", ".", "lr", ")", "\n", "", "else", ":", "\n", "                ", "raise", "Exception", "(", "\"Unsupported optimizer type: %s\"", "%", "self", ".", "args", ".", "optimizer", ")", "\n", "\n", "", "var_list", "=", "[", "tf_var", "for", "tf_var", "in", "tf", ".", "get_collection", "(", "tf", ".", "GraphKeys", ".", "TRAINABLE_VARIABLES", ")", "]", "\n", "\n", "self", ".", "train_op", "=", "nn_utils", ".", "train_network", "(", "self", ".", "opt", ",", "self", ".", "loss", ",", "var_list", ",", "self", ".", "nil_vars", ",", "self", ".", "clip_grad", ",", "\"train_op\"", ")", "\n", "self", ".", "ote_transfer_op", "=", "nn_utils", ".", "train_network", "(", "self", ".", "opt", ",", "self", ".", "ote_transfer_loss", ",", "var_list", ",", "self", ".", "nil_vars", ",", "self", ".", "clip_grad", ",", "\"ote_dann_op\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hsqmlzno1_Transferable-E2E-ABSA.models.model.Trans_E2E_ABSA.add_adv_loss": [[156, 178], ["tensorflow.concat", "tensorflow.concat", "flip_gradient.flip_gradient.flip_gradient", "nn_utils.fc_layer", "nn_utils.fc_layer", "tensorflow.nn.softmax_cross_entropy_with_logits", "tensorflow.reshape", "print", "print", "tensorflow.reduce_mean", "tensorflow.tile", "tensorflow.tile", "tensorflow.one_hot", "tensorflow.reduce_sum", "tensorflow.cast", "tensorflow.reduce_sum", "tensorflow.cast", "tensorflow.zeros", "tensorflow.ones", "flip_gradient.flip_gradient.flip_gradient.shape.as_list", "tensorflow.shape", "tensorflow.shape"], "methods", ["home.repos.pwc.inspect_result.hsqmlzno1_Transferable-E2E-ABSA.models.nn_utils.fc_layer", "home.repos.pwc.inspect_result.hsqmlzno1_Transferable-E2E-ABSA.models.nn_utils.fc_layer"], ["", "", "def", "add_adv_loss", "(", "self", ",", "src_feat", ",", "tar_feat", ",", "adapt_rate", ",", "attention", ",", "mask", ",", "batch_length", ",", "selective", "=", "True", ",", "weight", "=", "1.0", ",", "scope", "=", "None", ")", ":", "\n", "\n", "        ", "dom_label", "=", "tf", ".", "concat", "(", "[", "tf", ".", "tile", "(", "tf", ".", "zeros", "(", "1", ",", "dtype", "=", "tf", ".", "int32", ")", ",", "[", "tf", ".", "shape", "(", "src_feat", ")", "[", "0", "]", "]", ")", ",", "\n", "tf", ".", "tile", "(", "tf", ".", "ones", "(", "1", ",", "dtype", "=", "tf", ".", "int32", ")", ",", "[", "tf", ".", "shape", "(", "tar_feat", ")", "[", "0", "]", "]", ")", "]", ",", "0", ")", "\n", "\n", "feat", "=", "tf", ".", "concat", "(", "[", "src_feat", ",", "tar_feat", "]", ",", "0", ")", "\n", "feat", "=", "flip_gradient", "(", "feat", ",", "adapt_rate", ")", "\n", "\n", "dom_fc", "=", "nn_utils", ".", "fc_layer", "(", "feat", ",", "output_dim", "=", "feat", ".", "shape", ".", "as_list", "(", ")", "[", "-", "1", "]", ",", "scope", "=", "scope", "+", "'/fc1'", ",", "reuse", "=", "False", ")", "\n", "dom_logit", "=", "nn_utils", ".", "fc_layer", "(", "dom_fc", ",", "output_dim", "=", "2", ",", "scope", "=", "scope", "+", "'/fc2'", ",", "reuse", "=", "False", ")", "\n", "domain_loss", "=", "tf", ".", "nn", ".", "softmax_cross_entropy_with_logits", "(", "labels", "=", "tf", ".", "one_hot", "(", "dom_label", ",", "2", ")", ",", "logits", "=", "dom_logit", ",", "name", "=", "'dom_classifier'", ")", "# (b*m, )", "\n", "domain_loss", "=", "tf", ".", "reshape", "(", "domain_loss", ",", "[", "-", "1", ",", "self", ".", "max_len", "]", ")", "*", "mask", "# (b, m)", "\n", "\n", "if", "selective", ":", "\n", "            ", "print", "(", "'selective adversarial loss'", ")", "\n", "domain_loss", "=", "tf", ".", "reduce_sum", "(", "domain_loss", "*", "attention", ",", "axis", "=", "-", "1", ")", "/", "tf", ".", "cast", "(", "batch_length", ",", "tf", ".", "float32", ")", "# (b)", "\n", "", "else", ":", "\n", "            ", "print", "(", "'adversarial loss'", ")", "\n", "domain_loss", "=", "tf", ".", "reduce_sum", "(", "domain_loss", ",", "axis", "=", "-", "1", ")", "/", "tf", ".", "cast", "(", "batch_length", ",", "tf", ".", "float32", ")", "# (b)", "\n", "", "domain_loss", "=", "weight", "*", "tf", ".", "reduce_mean", "(", "domain_loss", ")", "\n", "\n", "return", "domain_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.hsqmlzno1_Transferable-E2E-ABSA.models.model.Trans_E2E_ABSA.initialize_session": [[179, 197], ["sess.run", "tensorflow.train.Saver", "tensorflow.global_variables_initializer", "os.path.exists", "os.mkdir", "os.path.exists", "os.mkdir", "os.path.exists", "os.mkdir"], "methods", ["home.repos.pwc.inspect_result.hsqmlzno1_Transferable-E2E-ABSA.None.main.run"], ["", "def", "initialize_session", "(", "self", ",", "sess", ",", "round", ")", ":", "\n", "\n", "        ", "sess", ".", "run", "(", "tf", ".", "global_variables_initializer", "(", ")", ")", "\n", "self", ".", "saver", "=", "tf", ".", "train", ".", "Saver", "(", ")", "\n", "\n", "model_dir", "=", "\"./work/snapshot/\"", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "model_dir", ")", ":", "\n", "            ", "os", ".", "mkdir", "(", "model_dir", ")", "\n", "\n", "", "model_dir", "=", "model_dir", "+", "\"%s/\"", "%", "self", ".", "args", ".", "model_name", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "model_dir", ")", ":", "\n", "            ", "os", ".", "mkdir", "(", "model_dir", ")", "\n", "\n", "", "output_dir", "=", "model_dir", "+", "\"%s-%s/\"", "%", "(", "self", ".", "args", ".", "source_domain", ",", "self", ".", "args", ".", "target_domain", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "output_dir", ")", ":", "\n", "            ", "os", ".", "mkdir", "(", "output_dir", ")", "\n", "\n", "", "self", ".", "save_path", "=", "output_dir", "+", "'Round%d.ckpt'", "%", "round", "\n", "\n"]], "home.repos.pwc.inspect_result.hsqmlzno1_Transferable-E2E-ABSA.models.model.Trans_E2E_ABSA.save_model": [[198, 200], ["model.Trans_E2E_ABSA.saver.save"], "methods", ["None"], ["", "def", "save_model", "(", "self", ",", "sess", ")", ":", "\n", "        ", "self", ".", "saver", ".", "save", "(", "sess", ",", "self", ".", "save_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hsqmlzno1_Transferable-E2E-ABSA.models.model.Trans_E2E_ABSA.load_model": [[201, 208], ["model.Trans_E2E_ABSA.saver.restore", "print", "model.Trans_E2E_ABSA.saver.restore", "IOError"], "methods", ["None"], ["", "def", "load_model", "(", "self", ",", "sess", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "self", ".", "saver", ".", "restore", "(", "sess", ",", "self", ".", "save_path", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "            ", "raise", "IOError", "(", "\"Failed to to load model \"", "\"from save path: %s\"", "%", "self", ".", "save_path", ")", "\n", "", "self", ".", "saver", ".", "restore", "(", "sess", ",", "self", ".", "save_path", ")", "\n", "print", "(", "\"Successfully load model from save path: %s\"", "%", "self", ".", "save_path", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.hsqmlzno1_Transferable-E2E-ABSA.models.architectures.SuperNN.__init__": [[9, 36], ["architectures.SuperNN.build_vars"], "methods", ["home.repos.pwc.inspect_result.hsqmlzno1_Transferable-E2E-ABSA.models.architectures.SuperNN.build_vars"], ["    ", "def", "__init__", "(", "self", ",", "\n", "args", ",", "\n", "word2vec", ",", "\n", "init", "=", "None", ",", "\n", "scope", "=", "None", ")", ":", "\n", "\n", "        ", "self", ".", "args", "=", "args", "\n", "self", ".", "word2vec", "=", "word2vec", "\n", "self", ".", "init", "=", "init", "\n", "self", ".", "scope", "=", "scope", "\n", "\n", "self", ".", "hops", "=", "args", ".", "hops", "\n", "self", ".", "max_len", "=", "args", ".", "max_len", "\n", "self", ".", "input_win", "=", "args", ".", "input_win", "\n", "\n", "self", ".", "dim_w", "=", "args", ".", "dim_w", "\n", "self", ".", "dim_asp_h", "=", "args", ".", "dim_asp_h", "\n", "self", ".", "dim_opn_h", "=", "args", ".", "dim_opn_h", "\n", "self", ".", "dim_ts_h", "=", "args", ".", "dim_ts_h", "\n", "self", ".", "dim_rel", "=", "args", ".", "dim_rel", "\n", "self", ".", "dim_ote_y", "=", "args", ".", "dim_ote_y", "\n", "self", ".", "dim_ts_y", "=", "args", ".", "dim_ts_y", "\n", "self", ".", "dim_lm_y", "=", "args", ".", "dim_lm_y", "\n", "self", ".", "ote_tag_vocab", "=", "args", ".", "ote_tag_vocab", "\n", "self", ".", "ts_tag_vocab", "=", "args", ".", "ts_tag_vocab", "\n", "\n", "self", ".", "build_vars", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hsqmlzno1_Transferable-E2E-ABSA.models.architectures.SuperNN.build_vars": [[37, 53], ["tensorflow.variable_scope", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.Variable", "architectures.SuperNN.init", "architectures.SuperNN.init", "architectures.SuperNN.init", "architectures.SuperNN.init", "architectures.SuperNN.init", "architectures.SuperNN.init", "architectures.SuperNN.init", "architectures.SuperNN.init", "architectures.SuperNN.init"], "methods", ["None"], ["", "def", "build_vars", "(", "self", ")", ":", "\n", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "self", ".", "scope", ")", ":", "\n", "\n", "            ", "self", ".", "Wa", "=", "tf", ".", "Variable", "(", "self", ".", "init", "(", "[", "2", "*", "self", ".", "dim_asp_h", "+", "2", "*", "self", ".", "dim_asp_h", ",", "2", "*", "self", ".", "dim_asp_h", "]", ")", ",", "name", "=", "'Wa'", ")", "\n", "self", ".", "Wo", "=", "tf", ".", "Variable", "(", "self", ".", "init", "(", "[", "2", "*", "self", ".", "dim_asp_h", "+", "2", "*", "self", ".", "dim_opn_h", ",", "2", "*", "self", ".", "dim_asp_h", "]", ")", ",", "name", "=", "'Wo'", ")", "\n", "self", ".", "bias_a", "=", "tf", ".", "Variable", "(", "self", ".", "init", "(", "[", "2", "*", "self", ".", "dim_asp_h", ",", "]", ")", ",", "name", "=", "'bias_a'", ")", "\n", "self", ".", "bias_o", "=", "tf", ".", "Variable", "(", "self", ".", "init", "(", "[", "2", "*", "self", ".", "dim_asp_h", ",", "]", ")", ",", "name", "=", "'bias_o'", ")", "\n", "\n", "# relation matrices between aspect&aspect, opinion&opinion, aspect&opinion", "\n", "self", ".", "Ta", "=", "tf", ".", "Variable", "(", "self", ".", "init", "(", "[", "self", ".", "dim_rel", ",", "2", "*", "self", ".", "dim_asp_h", ",", "2", "*", "self", ".", "dim_asp_h", "]", ")", ",", "name", "=", "'Ta'", ")", "\n", "self", ".", "To", "=", "tf", ".", "Variable", "(", "self", ".", "init", "(", "[", "self", ".", "dim_rel", ",", "2", "*", "self", ".", "dim_opn_h", ",", "2", "*", "self", ".", "dim_opn_h", "]", ")", ",", "name", "=", "'To'", ")", "\n", "self", ".", "Tao", "=", "tf", ".", "Variable", "(", "self", ".", "init", "(", "[", "self", ".", "dim_rel", ",", "2", "*", "self", ".", "dim_asp_h", ",", "2", "*", "self", ".", "dim_opn_h", "]", ")", ",", "name", "=", "'Tao'", ")", "\n", "\n", "self", ".", "va", "=", "tf", ".", "Variable", "(", "self", ".", "init", "(", "[", "2", "*", "self", ".", "dim_rel", "]", ")", ",", "name", "=", "'v_a'", ")", "\n", "self", ".", "vo", "=", "tf", ".", "Variable", "(", "self", ".", "init", "(", "[", "2", "*", "self", ".", "dim_rel", "]", ")", ",", "name", "=", "'v_o'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hsqmlzno1_Transferable-E2E-ABSA.models.architectures.SuperNN.__call__": [[55, 145], ["tensorflow.variable_scope", "tensorflow.squeeze", "tensorflow.squeeze", "tensorflow.variable_scope", "tensorflow.cast", "tensorflow.nn.embedding_lookup", "tensorflow.nn.dropout", "tensorflow.variable_scope", "tensorflow.contrib.rnn.LSTMCell", "tensorflow.contrib.rnn.LSTMCell", "tensorflow.nn.bidirectional_dynamic_rnn", "tensorflow.concat", "tensorflow.variable_scope", "tensorflow.tile", "tensorflow.tile", "ma_list.append", "mo_list.append", "range", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.variable_scope", "tensorflow.contrib.rnn.LSTMCell", "tensorflow.contrib.rnn.LSTMCell", "tensorflow.nn.bidirectional_dynamic_rnn", "tensorflow.concat", "tensorflow.variable_scope", "tensorflow.nn.dropout", "tensorflow.nn.dropout", "tensorflow.nn.dropout", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "nn_utils.fc_layer", "nn_utils.fc_layer", "nn_utils.fc_layer", "tensorflow.sign", "tensorflow.concat", "tensorflow.concat", "tensorflow.reshape", "tensorflow.reshape", "za_list.append", "zo_list.append", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "ma_list.append", "mo_list.append", "tensorflow.multiply", "tensorflow.multiply", "nn_utils.mask_softmax", "nn_utils.mask_softmax", "tensorflow.shape", "tensorflow.shape", "architectures.SuperNN.tensor_product", "architectures.SuperNN.tensor_product", "architectures.SuperNN.tensor_product", "architectures.SuperNN.tensor_product", "tensorflow.reshape.shape.as_list", "tensorflow.reshape.shape.as_list", "tensorflow.reshape.shape.as_list", "tensorflow.transpose"], "methods", ["home.repos.pwc.inspect_result.hsqmlzno1_Transferable-E2E-ABSA.models.nn_utils.fc_layer", "home.repos.pwc.inspect_result.hsqmlzno1_Transferable-E2E-ABSA.models.nn_utils.fc_layer", "home.repos.pwc.inspect_result.hsqmlzno1_Transferable-E2E-ABSA.models.nn_utils.fc_layer", "home.repos.pwc.inspect_result.hsqmlzno1_Transferable-E2E-ABSA.models.nn_utils.mask_softmax", "home.repos.pwc.inspect_result.hsqmlzno1_Transferable-E2E-ABSA.models.nn_utils.mask_softmax", "home.repos.pwc.inspect_result.hsqmlzno1_Transferable-E2E-ABSA.models.architectures.SuperNN.tensor_product", "home.repos.pwc.inspect_result.hsqmlzno1_Transferable-E2E-ABSA.models.architectures.SuperNN.tensor_product", "home.repos.pwc.inspect_result.hsqmlzno1_Transferable-E2E-ABSA.models.architectures.SuperNN.tensor_product", "home.repos.pwc.inspect_result.hsqmlzno1_Transferable-E2E-ABSA.models.architectures.SuperNN.tensor_product"], ["", "", "def", "__call__", "(", "self", ",", "win_reviews", ",", "batch_length", ",", "ma_0", ",", "mo_0", ",", "dropout_rate", ",", "reuse", "=", "False", ")", ":", "\n", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "self", ".", "scope", ",", "reuse", "=", "reuse", ")", ":", "\n", "\n", "            ", "with", "tf", ".", "variable_scope", "(", "\"Embedding_layer\"", ")", ":", "\n", "                ", "mask", "=", "tf", ".", "cast", "(", "tf", ".", "sign", "(", "win_reviews", ")", ",", "tf", ".", "float32", ")", "\n", "self", ".", "input_emb", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "word2vec", ",", "win_reviews", ")", "#(b, m, win, d)", "\n", "self", ".", "input_emb", "=", "tf", ".", "nn", ".", "dropout", "(", "self", ".", "input_emb", ",", "dropout_rate", ")", "\n", "\n", "", "with", "tf", ".", "variable_scope", "(", "'LSTM-OTE'", ")", ":", "\n", "                ", "fw_cell", "=", "tf", ".", "contrib", ".", "rnn", ".", "LSTMCell", "(", "self", ".", "dim_asp_h", ")", "\n", "bw_cell", "=", "tf", ".", "contrib", ".", "rnn", ".", "LSTMCell", "(", "self", ".", "dim_asp_h", ")", "\n", "outputs", ",", "states", "=", "tf", ".", "nn", ".", "bidirectional_dynamic_rnn", "(", "fw_cell", ",", "bw_cell", ",", "self", ".", "input_emb", ",", "\n", "sequence_length", "=", "batch_length", ",", "\n", "dtype", "=", "tf", ".", "float32", ")", "\n", "asp_h", "=", "tf", ".", "concat", "(", "outputs", ",", "-", "1", ")", "#(b, m, 2*dim_asp_h)", "\n", "\n", "", "with", "tf", ".", "variable_scope", "(", "'Attention'", ")", ":", "\n", "\n", "                ", "ma_t", "=", "tf", ".", "tile", "(", "ma_0", ",", "[", "tf", ".", "shape", "(", "asp_h", ")", "[", "0", "]", ",", "1", "]", ")", "#(b, 2*dim_asp_h)", "\n", "mo_t", "=", "tf", ".", "tile", "(", "mo_0", ",", "[", "tf", ".", "shape", "(", "asp_h", ")", "[", "0", "]", ",", "1", "]", ")", "#(b, 2*dim_opn_h)", "\n", "\n", "za_list", ",", "zo_list", "=", "[", "]", ",", "[", "]", "\n", "ma_list", ",", "mo_list", "=", "[", "]", ",", "[", "]", "\n", "\n", "ma_list", ".", "append", "(", "ma_t", ")", "# (b, 2*dim_asp_h)", "\n", "mo_list", ".", "append", "(", "mo_t", ")", "# (b, 2*dim_opn_h)", "\n", "\n", "for", "l", "in", "range", "(", "self", ".", "hops", ")", ":", "\n", "\n", "                    ", "za", "=", "tf", ".", "concat", "(", "[", "self", ".", "tensor_product", "(", "asp_h", ",", "ma_t", ",", "self", ".", "Ta", ",", "self", ".", "Wa", ",", "self", ".", "bias_a", ",", "dropout_rate", ")", ",", "#(b, m, 2*dim_rel)", "\n", "self", ".", "tensor_product", "(", "asp_h", ",", "mo_t", ",", "self", ".", "Tao", ",", "self", ".", "Wo", ",", "self", ".", "bias_o", ",", "dropout_rate", ")", "]", ",", "#(b, m, 2*dim_rel)", "\n", "-", "1", ")", "#(b, m, 2*dim_rel)", "\n", "\n", "zo", "=", "tf", ".", "concat", "(", "[", "self", ".", "tensor_product", "(", "asp_h", ",", "mo_t", ",", "self", ".", "To", ",", "self", ".", "Wo", ",", "self", ".", "bias_o", ",", "dropout_rate", ")", ",", "#(b, m, 2*dim_rel)", "\n", "self", ".", "tensor_product", "(", "asp_h", ",", "ma_t", ",", "tf", ".", "transpose", "(", "self", ".", "Tao", ",", "[", "0", ",", "2", ",", "1", "]", ")", ",", "self", ".", "Wa", ",", "self", ".", "bias_a", ",", "dropout_rate", ")", "]", ",", "#(b, m, 2*dim_rel)", "\n", "-", "1", ")", "#(b, m, 2*dim_rel)", "\n", "\n", "za_l", "=", "tf", ".", "reshape", "(", "za", ",", "[", "-", "1", ",", "2", "*", "self", ".", "dim_rel", "]", ")", "#(b*m, 2*dim_rel)", "\n", "zo_l", "=", "tf", ".", "reshape", "(", "zo", ",", "[", "-", "1", ",", "2", "*", "self", ".", "dim_rel", "]", ")", "#(b*m, 2*dim_rel)", "\n", "\n", "za_list", ".", "append", "(", "za_l", ")", "\n", "zo_list", ".", "append", "(", "zo_l", ")", "\n", "\n", "ea_l", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "multiply", "(", "za_l", ",", "self", ".", "va", ")", ",", "-", "1", ")", "#(b*m)", "\n", "eo_l", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "multiply", "(", "zo_l", ",", "self", ".", "vo", ")", ",", "-", "1", ")", "#(b*m)", "\n", "\n", "ea_l", "=", "tf", ".", "reshape", "(", "ea_l", ",", "[", "-", "1", ",", "self", ".", "max_len", "]", ")", "#(b,m)", "\n", "eo_l", "=", "tf", ".", "reshape", "(", "eo_l", ",", "[", "-", "1", ",", "self", ".", "max_len", "]", ")", "#(b,m)", "\n", "\n", "alpha_a", "=", "tf", ".", "expand_dims", "(", "nn_utils", ".", "mask_softmax", "(", "ea_l", ",", "axis", "=", "1", ",", "mask", "=", "mask", ")", ",", "-", "1", ")", "#(b,m,1)", "\n", "alpha_o", "=", "tf", ".", "expand_dims", "(", "nn_utils", ".", "mask_softmax", "(", "eo_l", ",", "axis", "=", "1", ",", "mask", "=", "mask", ")", ",", "-", "1", ")", "#(b,m,1)", "\n", "\n", "a_summary", "=", "tf", ".", "reduce_sum", "(", "asp_h", "*", "alpha_a", ",", "1", ")", "#(b, 2*dim_ote_h)", "\n", "ma_t", "=", "ma_t", "+", "a_summary", "\n", "\n", "o_summary", "=", "tf", ".", "reduce_sum", "(", "asp_h", "*", "alpha_o", ",", "1", ")", "#(b, 2*dim_ote_h)", "\n", "mo_t", "=", "mo_t", "+", "o_summary", "\n", "\n", "ma_list", ".", "append", "(", "ma_t", ")", "#(b, 2*dim_asp_h)", "\n", "mo_list", ".", "append", "(", "mo_t", ")", "#(b, 2*dim_opn_h)", "\n", "\n", "", "asp_h", "=", "za_list", "[", "-", "1", "]", "\n", "opn_h", "=", "zo_list", "[", "-", "1", "]", "\n", "asp_h", "=", "tf", ".", "reshape", "(", "asp_h", ",", "[", "-", "1", ",", "self", ".", "max_len", ",", "2", "*", "self", ".", "dim_rel", "]", ")", "\n", "opn_h", "=", "tf", ".", "reshape", "(", "opn_h", ",", "[", "-", "1", ",", "self", ".", "max_len", ",", "2", "*", "self", ".", "dim_rel", "]", ")", "\n", "\n", "", "with", "tf", ".", "variable_scope", "(", "'LSTM-TS'", ")", ":", "\n", "                ", "fw_cell", "=", "tf", ".", "contrib", ".", "rnn", ".", "LSTMCell", "(", "self", ".", "dim_ts_h", ")", "\n", "bw_cell", "=", "tf", ".", "contrib", ".", "rnn", ".", "LSTMCell", "(", "self", ".", "dim_ts_h", ")", "\n", "outputs", ",", "states", "=", "tf", ".", "nn", ".", "bidirectional_dynamic_rnn", "(", "fw_cell", ",", "bw_cell", ",", "asp_h", ",", "\n", "sequence_length", "=", "batch_length", ",", "\n", "dtype", "=", "tf", ".", "float32", ")", "\n", "ts_h", "=", "tf", ".", "concat", "(", "outputs", ",", "-", "1", ")", "#(b, m, 2*dim_opn_h)", "\n", "\n", "", "with", "tf", ".", "variable_scope", "(", "'FC_layer'", ")", ":", "\n", "\n", "                ", "asp_h", "=", "tf", ".", "nn", ".", "dropout", "(", "asp_h", ",", "dropout_rate", ")", "#(b, m,  2*dim_ote)", "\n", "opn_h", "=", "tf", ".", "nn", ".", "dropout", "(", "opn_h", ",", "dropout_rate", ")", "#(b, m,  2*dim_ts)", "\n", "ts_h", "=", "tf", ".", "nn", ".", "dropout", "(", "ts_h", ",", "dropout_rate", ")", "#(b, m,  2*dim_asp_h+2*dim_opn_h)", "\n", "\n", "asp_h", "=", "tf", ".", "reshape", "(", "asp_h", ",", "[", "-", "1", ",", "asp_h", ".", "shape", ".", "as_list", "(", ")", "[", "-", "1", "]", "]", ")", "\n", "opn_h", "=", "tf", ".", "reshape", "(", "opn_h", ",", "[", "-", "1", ",", "opn_h", ".", "shape", ".", "as_list", "(", ")", "[", "-", "1", "]", "]", ")", "\n", "ts_h", "=", "tf", ".", "reshape", "(", "ts_h", ",", "[", "-", "1", ",", "ts_h", ".", "shape", ".", "as_list", "(", ")", "[", "-", "1", "]", "]", ")", "\n", "\n", "asp_pred", "=", "nn_utils", ".", "fc_layer", "(", "asp_h", ",", "output_dim", "=", "self", ".", "dim_ote_y", ",", "scope", "=", "\"asp_tagger\"", ",", "reuse", "=", "reuse", ")", "\n", "opn_pred", "=", "nn_utils", ".", "fc_layer", "(", "opn_h", ",", "output_dim", "=", "self", ".", "dim_lm_y", ",", "scope", "=", "\"opn_tagger\"", ",", "reuse", "=", "reuse", ")", "\n", "ts_pred", "=", "nn_utils", ".", "fc_layer", "(", "ts_h", ",", "output_dim", "=", "self", ".", "dim_ts_y", ",", "scope", "=", "\"ts_tagger\"", ",", "reuse", "=", "reuse", ")", "\n", "\n", "", "", "return", "asp_h", ",", "ts_h", ",", "asp_pred", ",", "opn_pred", ",", "ts_pred", ",", "a_summary", ",", "o_summary", ",", "tf", ".", "squeeze", "(", "alpha_a", ",", "2", ")", ",", "tf", ".", "squeeze", "(", "alpha_o", ",", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hsqmlzno1_Transferable-E2E-ABSA.models.architectures.SuperNN.tensor_product": [[146, 168], ["a.shape.as_list", "b.shape.as_list", "tensorflow.nn.dropout", "tensorflow.reshape", "tensorflow.tile", "tensorflow.reshape", "tensorflow.concat", "T.shape.as_list", "tensorflow.expand_dims", "tensorflow.concat", "tensorflow.nn.relu", "activation", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.reshape", "tensorflow.expand_dims", "tensorflow.unstack", "tensorflow.matmul"], "methods", ["None"], ["", "def", "tensor_product", "(", "self", ",", "a", ",", "b", ",", "T", ",", "W", ",", "bias", ",", "dropout_rate", ",", "activation", "=", "None", ")", ":", "\n", "\n", "        ", "_", ",", "element_size", ",", "a_dim", "=", "a", ".", "shape", ".", "as_list", "(", ")", "\n", "_", ",", "b_dim", "=", "b", ".", "shape", ".", "as_list", "(", ")", "\n", "\n", "emb_dim", "=", "T", ".", "shape", ".", "as_list", "(", ")", "[", "-", "1", "]", "\n", "T_dropout", "=", "tf", ".", "nn", ".", "dropout", "(", "T", ",", "dropout_rate", ")", "\n", "\n", "a_re", "=", "tf", ".", "reshape", "(", "a", ",", "[", "-", "1", ",", "a_dim", "]", ")", "#(b*m, d_a)", "\n", "b_tile", "=", "tf", ".", "tile", "(", "tf", ".", "expand_dims", "(", "b", ",", "1", ")", ",", "[", "1", ",", "element_size", ",", "1", "]", ")", "#(b, m, d_b)", "\n", "ab_fusion", "=", "tf", ".", "reshape", "(", "tf", ".", "concat", "(", "[", "a", ",", "b_tile", "]", ",", "-", "1", ")", ",", "[", "-", "1", ",", "a_dim", "+", "b_dim", "]", ")", "#(b*m, d_a+d_b)", "\n", "\n", "a_re", "=", "a_re", "+", "tf", ".", "nn", ".", "relu", "(", "tf", ".", "matmul", "(", "ab_fusion", ",", "W", ")", "+", "bias", ")", "#(b*m, d_a)", "\n", "\n", "output", "=", "tf", ".", "concat", "(", "[", "tf", ".", "matmul", "(", "\n", "tf", ".", "reshape", "(", "tf", ".", "matmul", "(", "a_re", ",", "T_k", ")", ",", "[", "-", "1", ",", "element_size", ",", "emb_dim", "]", ")", ",", "\n", "tf", ".", "expand_dims", "(", "b", ",", "-", "1", ")", ")", "\n", "for", "T_k", "in", "tf", ".", "unstack", "(", "T_dropout", ",", "axis", "=", "0", ")", "]", ",", "-", "1", ")", "\n", "if", "activation", "!=", "None", ":", "\n", "            ", "output", "=", "activation", "(", "output", ")", "\n", "\n", "", "return", "output", "", "", "", ""]]}