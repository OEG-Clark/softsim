{"home.repos.pwc.inspect_result.Rondorf_BOReL.None.online_training.main": [[12, 58], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_known_args", "torchkit.pytorch_utils.set_gpu_mode", "metalearner.MetaLearner", "metalearner.MetaLearner.train", "online_config.args_gridworld.get_args", "os.makedirs", "os.makedirs", "online_config.args_point_robot.get_args", "glob.glob", "glob.glob", "torch.cuda.is_available", "online_config.args_point_robot_sparse.get_args", "os.path.join", "os.remove", "os.path.join", "os.remove", "online_config.args_cheetah_vel.get_args", "online_config.args_ant_semicircle.get_args", "online_config.args_ant_semicircle_sparse.get_args"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.set_gpu_mode", "home.repos.pwc.inspect_result.Rondorf_BOReL.core.rl_algorithm.MetaRLAlgorithm.train", "home.repos.pwc.inspect_result.Rondorf_BOReL.data_collection_config.args_gridworld.get_args", "home.repos.pwc.inspect_result.Rondorf_BOReL.data_collection_config.args_gridworld.get_args", "home.repos.pwc.inspect_result.Rondorf_BOReL.data_collection_config.args_gridworld.get_args", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.join", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.join", "home.repos.pwc.inspect_result.Rondorf_BOReL.data_collection_config.args_gridworld.get_args", "home.repos.pwc.inspect_result.Rondorf_BOReL.data_collection_config.args_gridworld.get_args", "home.repos.pwc.inspect_result.Rondorf_BOReL.data_collection_config.args_gridworld.get_args"], ["def", "main", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'--env-type'", ",", "default", "=", "'cheetah_vel'", ")", "\n", "# parser.add_argument('--env-type', default='point_robot_sparse')", "\n", "# parser.add_argument('--env-type', default='gridworld')", "\n", "args", ",", "rest_args", "=", "parser", ".", "parse_known_args", "(", ")", "\n", "env", "=", "args", ".", "env_type", "\n", "\n", "# --- GridWorld ---", "\n", "if", "env", "==", "'gridworld'", ":", "\n", "        ", "args", "=", "args_gridworld", ".", "get_args", "(", "rest_args", ")", "\n", "# --- PointRobot ---", "\n", "", "elif", "env", "==", "'point_robot'", ":", "\n", "        ", "args", "=", "args_point_robot", ".", "get_args", "(", "rest_args", ")", "\n", "", "elif", "env", "==", "'point_robot_sparse'", ":", "\n", "        ", "args", "=", "args_point_robot_sparse", ".", "get_args", "(", "rest_args", ")", "\n", "# --- Mujoco ---", "\n", "", "elif", "env", "==", "'cheetah_vel'", ":", "\n", "        ", "args", "=", "args_cheetah_vel", ".", "get_args", "(", "rest_args", ")", "\n", "", "elif", "env", "==", "'ant_semicircle'", ":", "\n", "        ", "args", "=", "args_ant_semicircle", ".", "get_args", "(", "rest_args", ")", "\n", "", "elif", "env", "==", "'ant_semicircle_sparse'", ":", "\n", "        ", "args", "=", "args_ant_semicircle_sparse", ".", "get_args", "(", "rest_args", ")", "\n", "\n", "# make sure we have log directories", "\n", "", "try", ":", "\n", "        ", "os", ".", "makedirs", "(", "args", ".", "agent_log_dir", ")", "\n", "", "except", "OSError", ":", "\n", "        ", "files", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "args", ".", "agent_log_dir", ",", "'*.monitor.csv'", ")", ")", "\n", "for", "f", "in", "files", ":", "\n", "            ", "os", ".", "remove", "(", "f", ")", "\n", "", "", "eval_log_dir", "=", "args", ".", "agent_log_dir", "+", "\"_eval\"", "\n", "try", ":", "\n", "        ", "os", ".", "makedirs", "(", "eval_log_dir", ")", "\n", "", "except", "OSError", ":", "\n", "        ", "files", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "eval_log_dir", ",", "'*.monitor.csv'", ")", ")", "\n", "for", "f", "in", "files", ":", "\n", "            ", "os", ".", "remove", "(", "f", ")", "\n", "\n", "# set gpu", "\n", "", "", "set_gpu_mode", "(", "torch", ".", "cuda", ".", "is_available", "(", ")", "and", "args", ".", "use_gpu", ")", "\n", "\n", "# start training", "\n", "learner", "=", "MetaLearner", "(", "args", ")", "\n", "\n", "learner", ".", "train", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.None.offline_metalearner.OfflineMetaLearner.__init__": [[25, 65], ["utils.helpers.seed", "utils.offline_utils.expand_args", "offline_metalearner.OfflineMetaLearner.initialize_policy", "offline_metalearner.OfflineMetaLearner.load_vae", "environments.make_env.make_env", "utils.tb_logger.TBLogger", "offline_metalearner.OfflineMetaLearner.load_buffer", "tuple", "goal.astype"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.seed", "home.repos.pwc.inspect_result.Rondorf_BOReL.utils.offline_utils.expand_args", "home.repos.pwc.inspect_result.Rondorf_BOReL.None.learner.Learner.initialize_policy", "home.repos.pwc.inspect_result.Rondorf_BOReL.None.offline_metalearner.OfflineMetaLearner.load_vae", "home.repos.pwc.inspect_result.Rondorf_BOReL.environments.make_env.make_env", "home.repos.pwc.inspect_result.Rondorf_BOReL.None.offline_metalearner.OfflineMetaLearner.load_buffer"], ["def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "\"\"\"\n        Seeds everything.\n        Initialises: logger, environments, policy (+storage +optimiser).\n        \"\"\"", "\n", "\n", "self", ".", "args", "=", "args", "\n", "\n", "# make sure everything has the same seed", "\n", "utl", ".", "seed", "(", "self", ".", "args", ".", "seed", ")", "\n", "\n", "# initialize tensorboard logger", "\n", "if", "self", ".", "args", ".", "log_tensorboard", ":", "\n", "            ", "self", ".", "tb_logger", "=", "TBLogger", "(", "self", ".", "args", ")", "\n", "\n", "", "self", ".", "args", ",", "env", "=", "off_utl", ".", "expand_args", "(", "self", ".", "args", ",", "include_act_space", "=", "True", ")", "\n", "if", "self", ".", "args", ".", "act_space", ".", "__class__", ".", "__name__", "==", "\"Discrete\"", ":", "\n", "            ", "self", ".", "args", ".", "policy", "=", "'dqn'", "\n", "", "else", ":", "\n", "            ", "self", ".", "args", ".", "policy", "=", "'sac'", "\n", "\n", "# load buffers with data", "\n", "", "if", "'load_data'", "not", "in", "self", ".", "args", "or", "self", ".", "args", ".", "load_data", ":", "\n", "            ", "goals", ",", "augmented_obs_dim", "=", "self", ".", "load_buffer", "(", "env", ")", "# env is input just for possible relabelling option", "\n", "self", ".", "args", ".", "augmented_obs_dim", "=", "augmented_obs_dim", "\n", "self", ".", "goals", "=", "goals", "\n", "\n", "# initialize policy", "\n", "", "self", ".", "initialize_policy", "(", ")", "\n", "\n", "# load vae for inference in evaluation", "\n", "self", ".", "load_vae", "(", ")", "\n", "\n", "# create environment for evaluation", "\n", "self", ".", "env", "=", "make_env", "(", "args", ".", "env_name", ",", "\n", "args", ".", "max_rollouts_per_task", ",", "\n", "seed", "=", "args", ".", "seed", ",", "\n", "n_tasks", "=", "self", ".", "args", ".", "num_eval_tasks", ")", "\n", "if", "self", ".", "args", ".", "env_name", "==", "'GridNavi-v2'", ":", "\n", "            ", "self", ".", "env", ".", "unwrapped", ".", "goals", "=", "[", "tuple", "(", "goal", ".", "astype", "(", "int", ")", ")", "for", "goal", "in", "self", ".", "goals", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.None.offline_metalearner.OfflineMetaLearner.initialize_policy": [[66, 107], ["torchkit.networks.FlattenMlp", "algorithms.dqn.DQN().to", "torchkit.networks.FlattenMlp", "torchkit.networks.FlattenMlp", "models.policy.TanhGaussianPolicy", "algorithms.sac.SAC().to", "algorithms.dqn.DQN", "algorithms.sac.SAC"], "methods", ["None"], ["", "", "def", "initialize_policy", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "args", ".", "policy", "==", "'dqn'", ":", "\n", "            ", "q_network", "=", "FlattenMlp", "(", "input_size", "=", "self", ".", "args", ".", "augmented_obs_dim", ",", "\n", "output_size", "=", "self", ".", "args", ".", "act_space", ".", "n", ",", "\n", "hidden_sizes", "=", "self", ".", "args", ".", "dqn_layers", ")", "\n", "self", ".", "agent", "=", "DQN", "(", "\n", "q_network", ",", "\n", "# optimiser_vae=self.optimizer_vae,", "\n", "lr", "=", "self", ".", "args", ".", "policy_lr", ",", "\n", "gamma", "=", "self", ".", "args", ".", "gamma", ",", "\n", "tau", "=", "self", ".", "args", ".", "soft_target_tau", ",", "\n", ")", ".", "to", "(", "ptu", ".", "device", ")", "\n", "", "else", ":", "\n", "# assert self.args.act_space.__class__.__name__ == \"Box\", (", "\n", "#     \"Can't train SAC with discrete action space!\")", "\n", "            ", "q1_network", "=", "FlattenMlp", "(", "input_size", "=", "self", ".", "args", ".", "augmented_obs_dim", "+", "self", ".", "args", ".", "action_dim", ",", "\n", "output_size", "=", "1", ",", "\n", "hidden_sizes", "=", "self", ".", "args", ".", "dqn_layers", ")", "\n", "q2_network", "=", "FlattenMlp", "(", "input_size", "=", "self", ".", "args", ".", "augmented_obs_dim", "+", "self", ".", "args", ".", "action_dim", ",", "\n", "output_size", "=", "1", ",", "\n", "hidden_sizes", "=", "self", ".", "args", ".", "dqn_layers", ")", "\n", "policy", "=", "TanhGaussianPolicy", "(", "obs_dim", "=", "self", ".", "args", ".", "augmented_obs_dim", ",", "\n", "action_dim", "=", "self", ".", "args", ".", "action_dim", ",", "\n", "hidden_sizes", "=", "self", ".", "args", ".", "policy_layers", ")", "\n", "self", ".", "agent", "=", "SAC", "(", "\n", "policy", ",", "\n", "q1_network", ",", "\n", "q2_network", ",", "\n", "\n", "actor_lr", "=", "self", ".", "args", ".", "actor_lr", ",", "\n", "critic_lr", "=", "self", ".", "args", ".", "critic_lr", ",", "\n", "gamma", "=", "self", ".", "args", ".", "gamma", ",", "\n", "tau", "=", "self", ".", "args", ".", "soft_target_tau", ",", "\n", "\n", "use_cql", "=", "self", ".", "args", ".", "use_cql", "if", "'use_cql'", "in", "self", ".", "args", "else", "False", ",", "\n", "alpha_cql", "=", "self", ".", "args", ".", "alpha_cql", "if", "'alpha_cql'", "in", "self", ".", "args", "else", "None", ",", "\n", "entropy_alpha", "=", "self", ".", "args", ".", "entropy_alpha", ",", "\n", "automatic_entropy_tuning", "=", "self", ".", "args", ".", "automatic_entropy_tuning", ",", "\n", "alpha_lr", "=", "self", ".", "args", ".", "alpha_lr", ",", "\n", "clip_grad_value", "=", "self", ".", "args", ".", "clip_grad_value", ",", "\n", ")", ".", "to", "(", "ptu", ".", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.None.offline_metalearner.OfflineMetaLearner.load_vae": [[108, 113], ["models.vae.VAE", "os.path.join", "utils.offline_utils.load_trained_vae"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.join", "home.repos.pwc.inspect_result.Rondorf_BOReL.utils.offline_utils.load_trained_vae"], ["", "", "def", "load_vae", "(", "self", ")", ":", "\n", "        ", "self", ".", "vae", "=", "VAE", "(", "self", ".", "args", ")", "\n", "vae_models_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "args", ".", "vae_dir", ",", "self", ".", "args", ".", "env_name", ",", "\n", "self", ".", "args", ".", "vae_model_name", ",", "'models'", ")", "\n", "off_utl", ".", "load_trained_vae", "(", "self", ".", "vae", ",", "vae_models_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.None.offline_metalearner.OfflineMetaLearner.load_buffer": [[114, 144], ["data_management.storage_policy.MultiTaskPolicyStorage", "enumerate", "utils.offline_utils.load_dataset", "utils.offline_utils.batch_to_trajectories", "utils.offline_utils.mix_task_rollouts", "utils.offline_utils.trajectories_to_batch", "utils.offline_utils.load_dataset", "offline_metalearner.OfflineMetaLearner.storage.add_samples", "range", "len"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.utils.offline_utils.load_dataset", "home.repos.pwc.inspect_result.Rondorf_BOReL.utils.offline_utils.batch_to_trajectories", "home.repos.pwc.inspect_result.Rondorf_BOReL.utils.offline_utils.mix_task_rollouts", "home.repos.pwc.inspect_result.Rondorf_BOReL.utils.offline_utils.trajectories_to_batch", "home.repos.pwc.inspect_result.Rondorf_BOReL.utils.offline_utils.load_dataset", "home.repos.pwc.inspect_result.Rondorf_BOReL.data_management.simple_replay_buffer.SimpleReplayBuffer.add_samples"], ["", "def", "load_buffer", "(", "self", ",", "env", ")", ":", "\n", "        ", "if", "self", ".", "args", ".", "hindsight_relabelling", ":", "# without arr_type loading -- GPU will explode", "\n", "            ", "dataset", ",", "goals", "=", "off_utl", ".", "load_dataset", "(", "data_dir", "=", "self", ".", "args", ".", "relabelled_data_dir", ",", "\n", "args", "=", "self", ".", "args", ",", "\n", "num_tasks", "=", "self", ".", "args", ".", "num_train_tasks", ",", "\n", "allow_dense_data_loading", "=", "False", ",", "\n", "arr_type", "=", "'numpy'", ")", "\n", "dataset", "=", "off_utl", ".", "batch_to_trajectories", "(", "dataset", ",", "self", ".", "args", ")", "\n", "dataset", ",", "goals", "=", "off_utl", ".", "mix_task_rollouts", "(", "dataset", ",", "env", ",", "goals", ",", "self", ".", "args", ")", "# reward relabelling", "\n", "dataset", "=", "off_utl", ".", "trajectories_to_batch", "(", "dataset", ")", "\n", "", "else", ":", "\n", "            ", "dataset", ",", "goals", "=", "off_utl", ".", "load_dataset", "(", "data_dir", "=", "self", ".", "args", ".", "relabelled_data_dir", ",", "\n", "args", "=", "self", ".", "args", ",", "\n", "num_tasks", "=", "self", ".", "args", ".", "num_train_tasks", ",", "\n", "allow_dense_data_loading", "=", "False", ",", "\n", "arr_type", "=", "'numpy'", ")", "\n", "", "augmented_obs_dim", "=", "dataset", "[", "0", "]", "[", "0", "]", ".", "shape", "[", "1", "]", "\n", "self", ".", "storage", "=", "MultiTaskPolicyStorage", "(", "max_replay_buffer_size", "=", "dataset", "[", "0", "]", "[", "0", "]", ".", "shape", "[", "0", "]", ",", "\n", "obs_dim", "=", "dataset", "[", "0", "]", "[", "0", "]", ".", "shape", "[", "1", "]", ",", "\n", "action_space", "=", "self", ".", "args", ".", "act_space", ",", "\n", "tasks", "=", "range", "(", "len", "(", "goals", ")", ")", ",", "\n", "trajectory_len", "=", "self", ".", "args", ".", "trajectory_len", ")", "\n", "for", "task", ",", "set", "in", "enumerate", "(", "dataset", ")", ":", "\n", "            ", "self", ".", "storage", ".", "add_samples", "(", "task", ",", "\n", "observations", "=", "set", "[", "0", "]", ",", "\n", "actions", "=", "set", "[", "1", "]", ",", "\n", "rewards", "=", "set", "[", "2", "]", ",", "\n", "next_observations", "=", "set", "[", "3", "]", ",", "\n", "terminals", "=", "set", "[", "4", "]", ")", "\n", "", "return", "goals", ",", "augmented_obs_dim", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.None.offline_metalearner.OfflineMetaLearner.train": [[145, 154], ["offline_metalearner.OfflineMetaLearner._start_training", "range", "offline_metalearner.OfflineMetaLearner.training_mode", "numpy.random.choice", "offline_metalearner.OfflineMetaLearner.update", "offline_metalearner.OfflineMetaLearner.training_mode", "offline_metalearner.OfflineMetaLearner.log", "len"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.None.learner.Learner._start_training", "home.repos.pwc.inspect_result.Rondorf_BOReL.core.rl_algorithm.MetaRLAlgorithm.training_mode", "home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.GymObject.update", "home.repos.pwc.inspect_result.Rondorf_BOReL.core.rl_algorithm.MetaRLAlgorithm.training_mode", "home.repos.pwc.inspect_result.Rondorf_BOReL.core.logger.log"], ["", "def", "train", "(", "self", ")", ":", "\n", "        ", "self", ".", "_start_training", "(", ")", "\n", "for", "iter_", "in", "range", "(", "self", ".", "args", ".", "num_iters", ")", ":", "\n", "            ", "self", ".", "training_mode", "(", "True", ")", "\n", "indices", "=", "np", ".", "random", ".", "choice", "(", "len", "(", "self", ".", "goals", ")", ",", "self", ".", "args", ".", "meta_batch", ")", "\n", "train_stats", "=", "self", ".", "update", "(", "indices", ")", "\n", "\n", "self", ".", "training_mode", "(", "False", ")", "\n", "self", ".", "log", "(", "iter_", "+", "1", ",", "train_stats", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.None.offline_metalearner.OfflineMetaLearner.update": [[155, 182], ["range", "offline_metalearner.OfflineMetaLearner.sample_rl_batch", "obs.view.view.size", "obs.view.view.view", "actions.view.view.view", "rewards.view.view.view", "next_obs.view.view.view", "terms.view.view.view", "offline_metalearner.OfflineMetaLearner.agent.update", "offline_metalearner.OfflineMetaLearner.items", "numpy.mean", "rl_losses_agg[].append"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.None.learner.Learner.sample_rl_batch", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjvGeomWrapper.size", "home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.GymObject.update"], ["", "", "def", "update", "(", "self", ",", "tasks", ")", ":", "\n", "        ", "rl_losses_agg", "=", "{", "}", "\n", "for", "update", "in", "range", "(", "self", ".", "args", ".", "rl_updates_per_iter", ")", ":", "\n", "# sample random RL batch", "\n", "            ", "obs", ",", "actions", ",", "rewards", ",", "next_obs", ",", "terms", "=", "self", ".", "sample_rl_batch", "(", "tasks", ",", "self", ".", "args", ".", "batch_size", ")", "\n", "# flatten out task dimension", "\n", "t", ",", "b", ",", "_", "=", "obs", ".", "size", "(", ")", "\n", "obs", "=", "obs", ".", "view", "(", "t", "*", "b", ",", "-", "1", ")", "\n", "actions", "=", "actions", ".", "view", "(", "t", "*", "b", ",", "-", "1", ")", "\n", "rewards", "=", "rewards", ".", "view", "(", "t", "*", "b", ",", "-", "1", ")", "\n", "next_obs", "=", "next_obs", ".", "view", "(", "t", "*", "b", ",", "-", "1", ")", "\n", "terms", "=", "terms", ".", "view", "(", "t", "*", "b", ",", "-", "1", ")", "\n", "\n", "# RL update", "\n", "rl_losses", "=", "self", ".", "agent", ".", "update", "(", "obs", ",", "actions", ",", "rewards", ",", "next_obs", ",", "terms", ",", "action_space", "=", "self", ".", "env", ".", "action_space", ")", "\n", "\n", "for", "k", ",", "v", "in", "rl_losses", ".", "items", "(", ")", ":", "\n", "                ", "if", "update", "==", "0", ":", "# first iterate - create list", "\n", "                    ", "rl_losses_agg", "[", "k", "]", "=", "[", "v", "]", "\n", "", "else", ":", "# append values", "\n", "                    ", "rl_losses_agg", "[", "k", "]", ".", "append", "(", "v", ")", "\n", "# take mean", "\n", "", "", "", "for", "k", "in", "rl_losses_agg", ":", "\n", "            ", "rl_losses_agg", "[", "k", "]", "=", "np", ".", "mean", "(", "rl_losses_agg", "[", "k", "]", ")", "\n", "", "self", ".", "_n_rl_update_steps_total", "+=", "self", ".", "args", ".", "rl_updates_per_iter", "\n", "\n", "return", "rl_losses_agg", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.None.offline_metalearner.OfflineMetaLearner.evaluate": [[183, 283], ["numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "offline_metalearner.OfflineMetaLearner.env.unwrapped.get_all_task_idx", "numpy.zeros", "torchkit.pytorch_utils.from_numpy", "next_obs.clone.reshape", "torchkit.pytorch_utils.get_numpy", "range", "offline_metalearner.OfflineMetaLearner.env.reset", "torch.no_grad", "offline_metalearner.OfflineMetaLearner.vae.encoder.prior", "range", "offline_metalearner.OfflineMetaLearner.get_augmented_obs", "utils.helpers.env_step", "reward.item", "offline_metalearner.OfflineMetaLearner.update_encoding", "reward.item", "torchkit.pytorch_utils.get_numpy", "torchkit.pytorch_utils.get_numpy", "next_obs.clone", "offline_metalearner.OfflineMetaLearner.agent.act", "offline_metalearner.OfflineMetaLearner.agent.act", "action.squeeze", "torchkit.pytorch_utils.get_numpy", "offline_metalearner.OfflineMetaLearner.env.unwrapped.is_goal_state", "offline_metalearner.OfflineMetaLearner.vae.reward_decoder", "dir"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.zeros", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.zeros", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.zeros", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.zeros", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.zeros", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.get_all_task_idx", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.zeros", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.from_numpy", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.get_numpy", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.reset", "home.repos.pwc.inspect_result.Rondorf_BOReL.models.encoder.RNNEncoder.prior", "home.repos.pwc.inspect_result.Rondorf_BOReL.utils.helpers.get_augmented_obs", "home.repos.pwc.inspect_result.Rondorf_BOReL.utils.helpers.env_step", "home.repos.pwc.inspect_result.Rondorf_BOReL.utils.helpers.update_encoding", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.get_numpy", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.get_numpy", "home.repos.pwc.inspect_result.Rondorf_BOReL.core.serializable.Serializable.clone", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjDataWrapper.act", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjDataWrapper.act", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.get_numpy", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.is_goal_state", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjvLightWrapper.dir"], ["", "def", "evaluate", "(", "self", ")", ":", "\n", "        ", "num_episodes", "=", "self", ".", "args", ".", "max_rollouts_per_task", "\n", "num_steps_per_episode", "=", "self", ".", "env", ".", "unwrapped", ".", "_max_episode_steps", "\n", "num_tasks", "=", "self", ".", "args", ".", "num_eval_tasks", "\n", "obs_size", "=", "self", ".", "env", ".", "unwrapped", ".", "observation_space", ".", "shape", "[", "0", "]", "\n", "\n", "returns_per_episode", "=", "np", ".", "zeros", "(", "(", "num_tasks", ",", "num_episodes", ")", ")", "\n", "success_rate", "=", "np", ".", "zeros", "(", "num_tasks", ")", "\n", "\n", "rewards", "=", "np", ".", "zeros", "(", "(", "num_tasks", ",", "self", ".", "args", ".", "trajectory_len", ")", ")", "\n", "reward_preds", "=", "np", ".", "zeros", "(", "(", "num_tasks", ",", "self", ".", "args", ".", "trajectory_len", ")", ")", "\n", "observations", "=", "np", ".", "zeros", "(", "(", "num_tasks", ",", "self", ".", "args", ".", "trajectory_len", "+", "1", ",", "obs_size", ")", ")", "\n", "if", "self", ".", "args", ".", "policy", "==", "'sac'", ":", "\n", "            ", "log_probs", "=", "np", ".", "zeros", "(", "(", "num_tasks", ",", "self", ".", "args", ".", "trajectory_len", ")", ")", "\n", "\n", "# This part is very specific for the Semi-Circle env", "\n", "# if self.args.env_name == 'PointRobotSparse-v0':", "\n", "#     reward_belief = np.zeros((num_tasks, self.args.trajectory_len))", "\n", "#", "\n", "#     low_x, high_x, low_y, high_y = -2., 2., -1., 2.", "\n", "#     resolution = 0.1", "\n", "#     grid_x = np.arange(low_x, high_x + resolution, resolution)", "\n", "#     grid_y = np.arange(low_y, high_y + resolution, resolution)", "\n", "#     centers_x = (grid_x[:-1] + grid_x[1:]) / 2", "\n", "#     centers_y = (grid_y[:-1] + grid_y[1:]) / 2", "\n", "#     yv, xv = np.meshgrid(centers_y, centers_x, sparse=False, indexing='ij')", "\n", "#     centers = np.vstack([xv.ravel(), yv.ravel()]).T", "\n", "#     n_grid_points = centers.shape[0]", "\n", "#     reward_belief_discretized = np.zeros((num_tasks, self.args.trajectory_len, centers.shape[0]))", "\n", "\n", "", "for", "task", "in", "self", ".", "env", ".", "unwrapped", ".", "get_all_task_idx", "(", ")", ":", "\n", "            ", "obs", "=", "ptu", ".", "from_numpy", "(", "self", ".", "env", ".", "reset", "(", "task", ")", ")", "\n", "obs", "=", "obs", ".", "reshape", "(", "-", "1", ",", "obs", ".", "shape", "[", "-", "1", "]", ")", "\n", "step", "=", "0", "\n", "\n", "# get prior parameters", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "task_sample", ",", "task_mean", ",", "task_logvar", ",", "hidden_state", "=", "self", ".", "vae", ".", "encoder", ".", "prior", "(", "batch_size", "=", "1", ")", "\n", "\n", "", "observations", "[", "task", ",", "step", ",", ":", "]", "=", "ptu", ".", "get_numpy", "(", "obs", "[", "0", ",", ":", "obs_size", "]", ")", "\n", "\n", "for", "episode_idx", "in", "range", "(", "num_episodes", ")", ":", "\n", "                ", "running_reward", "=", "0.", "\n", "for", "step_idx", "in", "range", "(", "num_steps_per_episode", ")", ":", "\n", "# add distribution parameters to observation - policy is conditioned on posterior", "\n", "                    ", "augmented_obs", "=", "self", ".", "get_augmented_obs", "(", "obs", ",", "task_mean", ",", "task_logvar", ")", "\n", "if", "self", ".", "args", ".", "policy", "==", "'dqn'", ":", "\n", "                        ", "action", ",", "value", "=", "self", ".", "agent", ".", "act", "(", "obs", "=", "augmented_obs", ",", "deterministic", "=", "True", ")", "\n", "", "else", ":", "\n", "                        ", "action", ",", "_", ",", "_", ",", "log_prob", "=", "self", ".", "agent", ".", "act", "(", "obs", "=", "augmented_obs", ",", "\n", "deterministic", "=", "self", ".", "args", ".", "eval_deterministic", ",", "\n", "return_log_prob", "=", "True", ")", "\n", "\n", "# observe reward and next obs", "\n", "", "next_obs", ",", "reward", ",", "done", ",", "info", "=", "utl", ".", "env_step", "(", "self", ".", "env", ",", "action", ".", "squeeze", "(", "dim", "=", "0", ")", ")", "\n", "running_reward", "+=", "reward", ".", "item", "(", ")", "\n", "# done_rollout = False if ptu.get_numpy(done[0][0]) == 0. else True", "\n", "# update encoding", "\n", "task_sample", ",", "task_mean", ",", "task_logvar", ",", "hidden_state", "=", "self", ".", "update_encoding", "(", "obs", "=", "next_obs", ",", "\n", "action", "=", "action", ",", "\n", "reward", "=", "reward", ",", "\n", "done", "=", "done", ",", "\n", "hidden_state", "=", "hidden_state", ")", "\n", "rewards", "[", "task", ",", "step", "]", "=", "reward", ".", "item", "(", ")", "\n", "reward_preds", "[", "task", ",", "step", "]", "=", "ptu", ".", "get_numpy", "(", "\n", "self", ".", "vae", ".", "reward_decoder", "(", "task_sample", ",", "next_obs", ",", "obs", ",", "action", ")", "[", "0", ",", "0", "]", ")", "\n", "\n", "# This part is very specific for the Semi-Circle env", "\n", "# if self.args.env_name == 'PointRobotSparse-v0':", "\n", "#     reward_belief[task, step] = ptu.get_numpy(", "\n", "#         self.vae.compute_belief_reward(task_mean, task_logvar, obs, next_obs, action)[0])", "\n", "#", "\n", "#     reward_belief_discretized[task, step, :] = ptu.get_numpy(", "\n", "#         self.vae.compute_belief_reward(task_mean.repeat(n_grid_points, 1),", "\n", "#                                        task_logvar.repeat(n_grid_points, 1),", "\n", "#                                        None,", "\n", "#                                        torch.cat((ptu.FloatTensor(centers),", "\n", "#                                                   ptu.zeros(centers.shape[0], 1)), dim=-1).unsqueeze(0),", "\n", "#                                        None)[:, 0])", "\n", "\n", "observations", "[", "task", ",", "step", "+", "1", ",", ":", "]", "=", "ptu", ".", "get_numpy", "(", "next_obs", "[", "0", ",", ":", "obs_size", "]", ")", "\n", "if", "self", ".", "args", ".", "policy", "!=", "'dqn'", ":", "\n", "                        ", "log_probs", "[", "task", ",", "step", "]", "=", "ptu", ".", "get_numpy", "(", "log_prob", "[", "0", "]", ")", "\n", "\n", "", "if", "\"is_goal_state\"", "in", "dir", "(", "self", ".", "env", ".", "unwrapped", ")", "and", "self", ".", "env", ".", "unwrapped", ".", "is_goal_state", "(", ")", ":", "\n", "                        ", "success_rate", "[", "task", "]", "=", "1.", "\n", "# set: obs <- next_obs", "\n", "", "obs", "=", "next_obs", ".", "clone", "(", ")", "\n", "step", "+=", "1", "\n", "\n", "", "returns_per_episode", "[", "task", ",", "episode_idx", "]", "=", "running_reward", "\n", "\n", "", "", "if", "self", ".", "args", ".", "policy", "==", "'dqn'", ":", "\n", "            ", "return", "returns_per_episode", ",", "success_rate", ",", "observations", ",", "rewards", ",", "reward_preds", "\n", "# This part is very specific for the Semi-Circle env", "\n", "# elif self.args.env_name == 'PointRobotSparse-v0':", "\n", "#     return returns_per_episode, success_rate, log_probs, observations, \\", "\n", "#            rewards, reward_preds, reward_belief, reward_belief_discretized, centers", "\n", "", "else", ":", "\n", "            ", "return", "returns_per_episode", ",", "success_rate", ",", "log_probs", ",", "observations", ",", "rewards", ",", "reward_preds", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.None.offline_metalearner.OfflineMetaLearner.log": [[284, 422], ["os.path.join", "torch.save", "print", "os.path.exists", "os.mkdir", "offline_metalearner.OfflineMetaLearner.agent.state_dict", "os.path.join", "offline_metalearner.OfflineMetaLearner.evaluate", "offline_metalearner.OfflineMetaLearner.evaluate", "numpy.random.choice", "enumerate", "offline_metalearner.OfflineMetaLearner.env.reset", "offline_metalearner.OfflineMetaLearner.tb_logger.writer.add_figure", "offline_metalearner.OfflineMetaLearner.tb_logger.writer.add_figure", "range", "offline_metalearner.OfflineMetaLearner.tb_logger.writer.add_scalar", "offline_metalearner.OfflineMetaLearner.tb_logger.writer.add_scalar", "offline_metalearner.OfflineMetaLearner.tb_logger.writer.add_scalar", "offline_metalearner.OfflineMetaLearner.tb_logger.writer.add_scalar", "offline_metalearner.OfflineMetaLearner.tb_logger.writer.add_scalar", "offline_metalearner.OfflineMetaLearner.tb_logger.writer.add_scalar", "offline_metalearner.OfflineMetaLearner.tb_logger.writer.add_scalar", "offline_metalearner.OfflineMetaLearner.tb_logger.writer.add_scalar", "offline_metalearner.OfflineMetaLearner.tb_logger.writer.add_scalar", "offline_metalearner.OfflineMetaLearner.tb_logger.writer.add_scalar", "offline_metalearner.OfflineMetaLearner.tb_logger.writer.add_scalar", "offline_metalearner.OfflineMetaLearner.tb_logger.writer.add_scalar", "offline_metalearner.OfflineMetaLearner.tb_logger.writer.add_scalar", "offline_metalearner.OfflineMetaLearner.tb_logger.writer.add_scalar", "offline_metalearner.OfflineMetaLearner.tb_logger.writer.add_scalar", "offline_metalearner.OfflineMetaLearner.tb_logger.writer.add_scalar", "offline_metalearner.OfflineMetaLearner.tb_logger.writer.add_scalar", "offline_metalearner.OfflineMetaLearner.tb_logger.writer.add_scalar", "numpy.mean", "numpy.mean", "int", "utils.evaluation.plot_rollouts", "utils.evaluation.plot_rew_pred_vs_rew", "offline_metalearner.OfflineMetaLearner.tb_logger.writer.add_scalar", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.std", "numpy.mean", "[].mean", "list", "offline_metalearner.OfflineMetaLearner.tb_logger.writer.add_scalar", "[].mean", "list", "offline_metalearner.OfflineMetaLearner.tb_logger.writer.add_scalar", "numpy.mean", "[].mean", "list", "offline_metalearner.OfflineMetaLearner.tb_logger.writer.add_scalar", "[].mean", "list", "offline_metalearner.OfflineMetaLearner.tb_logger.writer.add_scalar", "[].mean", "list", "offline_metalearner.OfflineMetaLearner.tb_logger.writer.add_scalar", "[].mean", "list", "offline_metalearner.OfflineMetaLearner.tb_logger.writer.add_scalar", "[].mean", "list", "offline_metalearner.OfflineMetaLearner.tb_logger.writer.add_scalar", "numpy.sum", "numpy.mean", "numpy.sum", "offline_metalearner.OfflineMetaLearner.agent.qf.parameters", "sum", "offline_metalearner.OfflineMetaLearner.agent.target_qf.parameters", "sum", "offline_metalearner.OfflineMetaLearner.agent.qf1.parameters", "sum", "offline_metalearner.OfflineMetaLearner.agent.qf1_target.parameters", "sum", "offline_metalearner.OfflineMetaLearner.agent.qf2.parameters", "sum", "offline_metalearner.OfflineMetaLearner.agent.qf2_target.parameters", "sum", "offline_metalearner.OfflineMetaLearner.agent.policy.parameters", "sum", "time.time", "list", "list", "list", "list", "list", "list", "list", "list", "offline_metalearner.OfflineMetaLearner.agent.qf.parameters", "param_list[].grad.mean", "list", "offline_metalearner.OfflineMetaLearner.agent.target_qf.parameters", "param_list[].grad.mean", "list", "offline_metalearner.OfflineMetaLearner.agent.qf1.parameters", "param_list[].grad.mean", "list", "offline_metalearner.OfflineMetaLearner.agent.qf1_target.parameters", "param_list[].grad.mean", "list", "offline_metalearner.OfflineMetaLearner.agent.qf2.parameters", "param_list[].grad.mean", "list", "offline_metalearner.OfflineMetaLearner.agent.qf2_target.parameters", "param_list[].grad.mean", "list", "offline_metalearner.OfflineMetaLearner.agent.policy.parameters", "param_list[].grad.mean", "offline_metalearner.OfflineMetaLearner.agent.qf.parameters", "range", "offline_metalearner.OfflineMetaLearner.agent.target_qf.parameters", "range", "offline_metalearner.OfflineMetaLearner.agent.qf1.parameters", "range", "offline_metalearner.OfflineMetaLearner.agent.qf1_target.parameters", "range", "offline_metalearner.OfflineMetaLearner.agent.qf2.parameters", "range", "offline_metalearner.OfflineMetaLearner.agent.qf2_target.parameters", "range", "offline_metalearner.OfflineMetaLearner.agent.policy.parameters", "range", "len", "len", "len", "len", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.join", "home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.UpdateableAPIResource.save", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.join", "home.repos.pwc.inspect_result.Rondorf_BOReL.core.rl_algorithm.MetaRLAlgorithm.evaluate", "home.repos.pwc.inspect_result.Rondorf_BOReL.core.rl_algorithm.MetaRLAlgorithm.evaluate", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.reset", "home.repos.pwc.inspect_result.Rondorf_BOReL.utils.evaluation.plot_rollouts", "home.repos.pwc.inspect_result.Rondorf_BOReL.utils.evaluation.plot_rew_pred_vs_rew", "home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.ListableAPIResource.list", "home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.ListableAPIResource.list", "home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.ListableAPIResource.list", "home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.ListableAPIResource.list", "home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.ListableAPIResource.list", "home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.ListableAPIResource.list", "home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.ListableAPIResource.list", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjDataWrapper.time", "home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.ListableAPIResource.list", "home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.ListableAPIResource.list", "home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.ListableAPIResource.list", "home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.ListableAPIResource.list", "home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.ListableAPIResource.list", "home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.ListableAPIResource.list", "home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.ListableAPIResource.list", "home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.ListableAPIResource.list", "home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.ListableAPIResource.list", "home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.ListableAPIResource.list", "home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.ListableAPIResource.list", "home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.ListableAPIResource.list", "home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.ListableAPIResource.list", "home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.ListableAPIResource.list"], ["", "", "def", "log", "(", "self", ",", "iteration", ",", "train_stats", ")", ":", "\n", "# --- save model ---", "\n", "        ", "if", "iteration", "%", "self", ".", "args", ".", "save_interval", "==", "0", ":", "\n", "            ", "save_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "tb_logger", ".", "full_output_folder", ",", "'models'", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "save_path", ")", ":", "\n", "                ", "os", ".", "mkdir", "(", "save_path", ")", "\n", "", "torch", ".", "save", "(", "self", ".", "agent", ".", "state_dict", "(", ")", ",", "os", ".", "path", ".", "join", "(", "save_path", ",", "\"agent{0}.pt\"", ".", "format", "(", "iteration", ")", ")", ")", "\n", "\n", "", "if", "iteration", "%", "self", ".", "args", ".", "log_interval", "==", "0", ":", "\n", "            ", "if", "self", ".", "args", ".", "policy", "==", "'dqn'", ":", "\n", "                ", "returns", ",", "success_rate", ",", "observations", ",", "rewards", ",", "reward_preds", "=", "self", ".", "evaluate", "(", ")", "\n", "# This part is super specific for the Semi-Circle env", "\n", "# elif self.args.env_name == 'PointRobotSparse-v0':", "\n", "#     returns, success_rate, log_probs, observations, \\", "\n", "#     rewards, reward_preds, reward_belief, reward_belief_discretized, points = self.evaluate()", "\n", "", "else", ":", "\n", "                ", "returns", ",", "success_rate", ",", "log_probs", ",", "observations", ",", "rewards", ",", "reward_preds", "=", "self", ".", "evaluate", "(", ")", "\n", "\n", "", "if", "self", ".", "args", ".", "log_tensorboard", ":", "\n", "                ", "tasks_to_vis", "=", "np", ".", "random", ".", "choice", "(", "self", ".", "args", ".", "num_eval_tasks", ",", "5", ")", "\n", "for", "i", ",", "task", "in", "enumerate", "(", "tasks_to_vis", ")", ":", "\n", "                    ", "self", ".", "env", ".", "reset", "(", "task", ")", "\n", "self", ".", "tb_logger", ".", "writer", ".", "add_figure", "(", "'policy_vis/task_{}'", ".", "format", "(", "i", ")", ",", "\n", "utl_eval", ".", "plot_rollouts", "(", "observations", "[", "task", ",", ":", "]", ",", "self", ".", "env", ")", ",", "\n", "self", ".", "_n_rl_update_steps_total", ")", "\n", "self", ".", "tb_logger", ".", "writer", ".", "add_figure", "(", "'reward_prediction_train/task_{}'", ".", "format", "(", "i", ")", ",", "\n", "utl_eval", ".", "plot_rew_pred_vs_rew", "(", "rewards", "[", "task", ",", ":", "]", ",", "\n", "reward_preds", "[", "task", ",", ":", "]", ")", ",", "\n", "self", ".", "_n_rl_update_steps_total", ")", "\n", "# self.tb_logger.writer.add_figure('reward_prediction_train/task_{}'.format(i),", "\n", "#                                  utl_eval.plot_rew_pred_vs_reward_belief_vs_rew(rewards[task, :],", "\n", "#                                                                                 reward_preds[task, :],", "\n", "#                                                                                 reward_belief[task, :]),", "\n", "#                                  self._n_rl_update_steps_total)", "\n", "# if self.args.env_name == 'PointRobotSparse-v0':     # This part is super specific for the Semi-Circle env", "\n", "#     for t in range(0, int(self.args.trajectory_len/4), 3):", "\n", "#         self.tb_logger.writer.add_figure('discrete_belief_reward_pred_task_{}/timestep_{}'.format(i, t),", "\n", "#                                          utl_eval.plot_discretized_belief_halfcircle(reward_belief_discretized[task, t, :],", "\n", "#                                                                                      points, self.env,", "\n", "#                                                                                      observations[task, :t+1]),", "\n", "#                                          self._n_rl_update_steps_total)", "\n", "", "if", "self", ".", "args", ".", "max_rollouts_per_task", ">", "1", ":", "\n", "                    ", "for", "episode_idx", "in", "range", "(", "self", ".", "args", ".", "max_rollouts_per_task", ")", ":", "\n", "                        ", "self", ".", "tb_logger", ".", "writer", ".", "add_scalar", "(", "'returns_multi_episode/episode_{}'", ".", "\n", "format", "(", "episode_idx", "+", "1", ")", ",", "\n", "np", ".", "mean", "(", "returns", "[", ":", ",", "episode_idx", "]", ")", ",", "\n", "self", ".", "_n_rl_update_steps_total", ")", "\n", "", "self", ".", "tb_logger", ".", "writer", ".", "add_scalar", "(", "'returns_multi_episode/sum'", ",", "\n", "np", ".", "mean", "(", "np", ".", "sum", "(", "returns", ",", "axis", "=", "-", "1", ")", ")", ",", "\n", "self", ".", "_n_rl_update_steps_total", ")", "\n", "self", ".", "tb_logger", ".", "writer", ".", "add_scalar", "(", "'returns_multi_episode/success_rate'", ",", "\n", "np", ".", "mean", "(", "success_rate", ")", ",", "\n", "self", ".", "_n_rl_update_steps_total", ")", "\n", "", "else", ":", "\n", "                    ", "self", ".", "tb_logger", ".", "writer", ".", "add_scalar", "(", "'returns/returns_mean'", ",", "np", ".", "mean", "(", "returns", ")", ",", "\n", "self", ".", "_n_rl_update_steps_total", ")", "\n", "self", ".", "tb_logger", ".", "writer", ".", "add_scalar", "(", "'returns/returns_std'", ",", "np", ".", "std", "(", "returns", ")", ",", "\n", "self", ".", "_n_rl_update_steps_total", ")", "\n", "self", ".", "tb_logger", ".", "writer", ".", "add_scalar", "(", "'returns/success_rate'", ",", "np", ".", "mean", "(", "success_rate", ")", ",", "\n", "self", ".", "_n_rl_update_steps_total", ")", "\n", "", "if", "self", ".", "args", ".", "policy", "==", "'dqn'", ":", "\n", "                    ", "self", ".", "tb_logger", ".", "writer", ".", "add_scalar", "(", "'rl_losses/qf_loss_vs_n_updates'", ",", "train_stats", "[", "'qf_loss'", "]", ",", "\n", "self", ".", "_n_rl_update_steps_total", ")", "\n", "self", ".", "tb_logger", ".", "writer", ".", "add_scalar", "(", "'weights/q_network'", ",", "\n", "list", "(", "self", ".", "agent", ".", "qf", ".", "parameters", "(", ")", ")", "[", "0", "]", ".", "mean", "(", ")", ",", "\n", "self", ".", "_n_rl_update_steps_total", ")", "\n", "if", "list", "(", "self", ".", "agent", ".", "qf", ".", "parameters", "(", ")", ")", "[", "0", "]", ".", "grad", "is", "not", "None", ":", "\n", "                        ", "param_list", "=", "list", "(", "self", ".", "agent", ".", "qf", ".", "parameters", "(", ")", ")", "\n", "self", ".", "tb_logger", ".", "writer", ".", "add_scalar", "(", "'gradients/q_network'", ",", "\n", "sum", "(", "[", "param_list", "[", "i", "]", ".", "grad", ".", "mean", "(", ")", "for", "i", "in", "\n", "range", "(", "len", "(", "param_list", ")", ")", "]", ")", ",", "\n", "self", ".", "_n_rl_update_steps_total", ")", "\n", "", "self", ".", "tb_logger", ".", "writer", ".", "add_scalar", "(", "'weights/q_target'", ",", "\n", "list", "(", "self", ".", "agent", ".", "target_qf", ".", "parameters", "(", ")", ")", "[", "0", "]", ".", "mean", "(", ")", ",", "\n", "self", ".", "_n_rl_update_steps_total", ")", "\n", "if", "list", "(", "self", ".", "agent", ".", "target_qf", ".", "parameters", "(", ")", ")", "[", "0", "]", ".", "grad", "is", "not", "None", ":", "\n", "                        ", "param_list", "=", "list", "(", "self", ".", "agent", ".", "target_qf", ".", "parameters", "(", ")", ")", "\n", "self", ".", "tb_logger", ".", "writer", ".", "add_scalar", "(", "'gradients/q_target'", ",", "\n", "sum", "(", "[", "param_list", "[", "i", "]", ".", "grad", ".", "mean", "(", ")", "for", "i", "in", "\n", "range", "(", "len", "(", "param_list", ")", ")", "]", ")", ",", "\n", "self", ".", "_n_rl_update_steps_total", ")", "\n", "", "", "else", ":", "\n", "                    ", "self", ".", "tb_logger", ".", "writer", ".", "add_scalar", "(", "'policy/log_prob'", ",", "np", ".", "mean", "(", "log_probs", ")", ",", "\n", "self", ".", "_n_rl_update_steps_total", ")", "\n", "self", ".", "tb_logger", ".", "writer", ".", "add_scalar", "(", "'rl_losses/qf1_loss'", ",", "train_stats", "[", "'qf1_loss'", "]", ",", "\n", "self", ".", "_n_rl_update_steps_total", ")", "\n", "self", ".", "tb_logger", ".", "writer", ".", "add_scalar", "(", "'rl_losses/qf2_loss'", ",", "train_stats", "[", "'qf2_loss'", "]", ",", "\n", "self", ".", "_n_rl_update_steps_total", ")", "\n", "self", ".", "tb_logger", ".", "writer", ".", "add_scalar", "(", "'rl_losses/policy_loss'", ",", "train_stats", "[", "'policy_loss'", "]", ",", "\n", "self", ".", "_n_rl_update_steps_total", ")", "\n", "self", ".", "tb_logger", ".", "writer", ".", "add_scalar", "(", "'rl_losses/alpha_entropy_loss'", ",", "train_stats", "[", "'alpha_entropy_loss'", "]", ",", "\n", "self", ".", "_n_rl_update_steps_total", ")", "\n", "\n", "# weights and gradients", "\n", "self", ".", "tb_logger", ".", "writer", ".", "add_scalar", "(", "'weights/q1_network'", ",", "\n", "list", "(", "self", ".", "agent", ".", "qf1", ".", "parameters", "(", ")", ")", "[", "0", "]", ".", "mean", "(", ")", ",", "\n", "self", ".", "_n_rl_update_steps_total", ")", "\n", "if", "list", "(", "self", ".", "agent", ".", "qf1", ".", "parameters", "(", ")", ")", "[", "0", "]", ".", "grad", "is", "not", "None", ":", "\n", "                        ", "param_list", "=", "list", "(", "self", ".", "agent", ".", "qf1", ".", "parameters", "(", ")", ")", "\n", "self", ".", "tb_logger", ".", "writer", ".", "add_scalar", "(", "'gradients/q1_network'", ",", "\n", "sum", "(", "[", "param_list", "[", "i", "]", ".", "grad", ".", "mean", "(", ")", "for", "i", "in", "range", "(", "len", "(", "param_list", ")", ")", "]", ")", ",", "\n", "self", ".", "_n_rl_update_steps_total", ")", "\n", "", "self", ".", "tb_logger", ".", "writer", ".", "add_scalar", "(", "'weights/q1_target'", ",", "\n", "list", "(", "self", ".", "agent", ".", "qf1_target", ".", "parameters", "(", ")", ")", "[", "0", "]", ".", "mean", "(", ")", ",", "\n", "self", ".", "_n_rl_update_steps_total", ")", "\n", "if", "list", "(", "self", ".", "agent", ".", "qf1_target", ".", "parameters", "(", ")", ")", "[", "0", "]", ".", "grad", "is", "not", "None", ":", "\n", "                        ", "param_list", "=", "list", "(", "self", ".", "agent", ".", "qf1_target", ".", "parameters", "(", ")", ")", "\n", "self", ".", "tb_logger", ".", "writer", ".", "add_scalar", "(", "'gradients/q1_target'", ",", "\n", "sum", "(", "[", "param_list", "[", "i", "]", ".", "grad", ".", "mean", "(", ")", "for", "i", "in", "range", "(", "len", "(", "param_list", ")", ")", "]", ")", ",", "\n", "self", ".", "_n_rl_update_steps_total", ")", "\n", "", "self", ".", "tb_logger", ".", "writer", ".", "add_scalar", "(", "'weights/q2_network'", ",", "\n", "list", "(", "self", ".", "agent", ".", "qf2", ".", "parameters", "(", ")", ")", "[", "0", "]", ".", "mean", "(", ")", ",", "\n", "self", ".", "_n_rl_update_steps_total", ")", "\n", "if", "list", "(", "self", ".", "agent", ".", "qf2", ".", "parameters", "(", ")", ")", "[", "0", "]", ".", "grad", "is", "not", "None", ":", "\n", "                        ", "param_list", "=", "list", "(", "self", ".", "agent", ".", "qf2", ".", "parameters", "(", ")", ")", "\n", "self", ".", "tb_logger", ".", "writer", ".", "add_scalar", "(", "'gradients/q2_network'", ",", "\n", "sum", "(", "[", "param_list", "[", "i", "]", ".", "grad", ".", "mean", "(", ")", "for", "i", "in", "range", "(", "len", "(", "param_list", ")", ")", "]", ")", ",", "\n", "self", ".", "_n_rl_update_steps_total", ")", "\n", "", "self", ".", "tb_logger", ".", "writer", ".", "add_scalar", "(", "'weights/q2_target'", ",", "\n", "list", "(", "self", ".", "agent", ".", "qf2_target", ".", "parameters", "(", ")", ")", "[", "0", "]", ".", "mean", "(", ")", ",", "\n", "self", ".", "_n_rl_update_steps_total", ")", "\n", "if", "list", "(", "self", ".", "agent", ".", "qf2_target", ".", "parameters", "(", ")", ")", "[", "0", "]", ".", "grad", "is", "not", "None", ":", "\n", "                        ", "param_list", "=", "list", "(", "self", ".", "agent", ".", "qf2_target", ".", "parameters", "(", ")", ")", "\n", "self", ".", "tb_logger", ".", "writer", ".", "add_scalar", "(", "'gradients/q2_target'", ",", "\n", "sum", "(", "[", "param_list", "[", "i", "]", ".", "grad", ".", "mean", "(", ")", "for", "i", "in", "range", "(", "len", "(", "param_list", ")", ")", "]", ")", ",", "\n", "self", ".", "_n_rl_update_steps_total", ")", "\n", "", "self", ".", "tb_logger", ".", "writer", ".", "add_scalar", "(", "'weights/policy'", ",", "\n", "list", "(", "self", ".", "agent", ".", "policy", ".", "parameters", "(", ")", ")", "[", "0", "]", ".", "mean", "(", ")", ",", "\n", "self", ".", "_n_rl_update_steps_total", ")", "\n", "if", "list", "(", "self", ".", "agent", ".", "policy", ".", "parameters", "(", ")", ")", "[", "0", "]", ".", "grad", "is", "not", "None", ":", "\n", "                        ", "param_list", "=", "list", "(", "self", ".", "agent", ".", "policy", ".", "parameters", "(", ")", ")", "\n", "self", ".", "tb_logger", ".", "writer", ".", "add_scalar", "(", "'gradients/policy'", ",", "\n", "sum", "(", "[", "param_list", "[", "i", "]", ".", "grad", ".", "mean", "(", ")", "for", "i", "in", "range", "(", "len", "(", "param_list", ")", ")", "]", ")", ",", "\n", "self", ".", "_n_rl_update_steps_total", ")", "\n", "\n", "", "", "", "print", "(", "\"Iteration -- {}, Success rate -- {:.3f}, Avg. return -- {:.3f}, Elapsed time {:5d}[s]\"", "\n", ".", "format", "(", "iteration", ",", "np", ".", "mean", "(", "success_rate", ")", ",", "np", ".", "mean", "(", "np", ".", "sum", "(", "returns", ",", "axis", "=", "-", "1", ")", ")", ",", "\n", "int", "(", "time", ".", "time", "(", ")", "-", "self", ".", "_start_time", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.None.offline_metalearner.OfflineMetaLearner.sample_rl_batch": [[423, 433], ["torchkit.pytorch_utils.np_to_pytorch_batch", "utils.helpers.unpack_batch", "torch.cat", "offline_metalearner.OfflineMetaLearner.storage.random_batch", "range", "len"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.np_to_pytorch_batch", "home.repos.pwc.inspect_result.Rondorf_BOReL.utils.helpers.unpack_batch", "home.repos.pwc.inspect_result.Rondorf_BOReL.data_management.simple_replay_buffer.SimpleReplayBuffer.random_batch"], ["", "", "def", "sample_rl_batch", "(", "self", ",", "tasks", ",", "batch_size", ")", ":", "\n", "        ", "''' sample batch of unordered rl training data from a list/array of tasks '''", "\n", "# this batch consists of transitions sampled randomly from replay buffer", "\n", "batches", "=", "[", "ptu", ".", "np_to_pytorch_batch", "(", "\n", "self", ".", "storage", ".", "random_batch", "(", "task", ",", "batch_size", ")", ")", "for", "task", "in", "tasks", "]", "\n", "unpacked", "=", "[", "utl", ".", "unpack_batch", "(", "batch", ")", "for", "batch", "in", "batches", "]", "\n", "# group elements together", "\n", "unpacked", "=", "[", "[", "x", "[", "i", "]", "for", "x", "in", "unpacked", "]", "for", "i", "in", "range", "(", "len", "(", "unpacked", "[", "0", "]", ")", ")", "]", "\n", "unpacked", "=", "[", "torch", ".", "cat", "(", "x", ",", "dim", "=", "0", ")", "for", "x", "in", "unpacked", "]", "\n", "return", "unpacked", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.None.offline_metalearner.OfflineMetaLearner._start_training": [[434, 437], ["time.time"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjDataWrapper.time"], ["", "def", "_start_training", "(", "self", ")", ":", "\n", "        ", "self", ".", "_n_rl_update_steps_total", "=", "0", "\n", "self", ".", "_start_time", "=", "time", ".", "time", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.None.offline_metalearner.OfflineMetaLearner.training_mode": [[438, 440], ["offline_metalearner.OfflineMetaLearner.agent.train"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.core.rl_algorithm.MetaRLAlgorithm.train"], ["", "def", "training_mode", "(", "self", ",", "mode", ")", ":", "\n", "        ", "self", ".", "agent", ".", "train", "(", "mode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.None.offline_metalearner.OfflineMetaLearner.update_encoding": [[441, 452], ["offline_metalearner.OfflineMetaLearner.vae.encoder.reset_hidden", "torch.no_grad", "offline_metalearner.OfflineMetaLearner.vae.encoder", "action.float"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.models.encoder.RNNEncoder.reset_hidden"], ["", "def", "update_encoding", "(", "self", ",", "obs", ",", "action", ",", "reward", ",", "done", ",", "hidden_state", ")", ":", "\n", "# reset hidden state of the recurrent net when the task is done", "\n", "        ", "hidden_state", "=", "self", ".", "vae", ".", "encoder", ".", "reset_hidden", "(", "hidden_state", ",", "done", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "# size should be (batch, dim)", "\n", "            ", "task_sample", ",", "task_mean", ",", "task_logvar", ",", "hidden_state", "=", "self", ".", "vae", ".", "encoder", "(", "actions", "=", "action", ".", "float", "(", ")", ",", "\n", "states", "=", "obs", ",", "\n", "rewards", "=", "reward", ",", "\n", "hidden_state", "=", "hidden_state", ",", "\n", "return_prior", "=", "False", ")", "\n", "\n", "", "return", "task_sample", ",", "task_mean", ",", "task_logvar", ",", "hidden_state", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.None.offline_metalearner.OfflineMetaLearner.get_augmented_obs": [[453, 458], ["mean.reshape.reshape.reshape", "logvar.reshape.reshape.reshape", "torch.cat"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "get_augmented_obs", "(", "obs", ",", "mean", ",", "logvar", ")", ":", "\n", "        ", "mean", "=", "mean", ".", "reshape", "(", "(", "-", "1", ",", "mean", ".", "shape", "[", "-", "1", "]", ")", ")", "\n", "logvar", "=", "logvar", ".", "reshape", "(", "(", "-", "1", ",", "logvar", ".", "shape", "[", "-", "1", "]", ")", ")", "\n", "return", "torch", ".", "cat", "(", "(", "obs", ",", "mean", ",", "logvar", ")", ",", "dim", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.None.offline_metalearner.OfflineMetaLearner.load_model": [[459, 463], ["offline_metalearner.OfflineMetaLearner.agent.load_state_dict", "offline_metalearner.OfflineMetaLearner.load_vae", "offline_metalearner.OfflineMetaLearner.training_mode", "torch.load"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.None.offline_metalearner.OfflineMetaLearner.load_vae", "home.repos.pwc.inspect_result.Rondorf_BOReL.core.rl_algorithm.MetaRLAlgorithm.training_mode", "home.repos.pwc.inspect_result.Rondorf_BOReL.envs.registration.load"], ["", "def", "load_model", "(", "self", ",", "agent_path", ",", "device", "=", "'cpu'", ")", ":", "\n", "        ", "self", ".", "agent", ".", "load_state_dict", "(", "torch", ".", "load", "(", "agent_path", ",", "map_location", "=", "device", ")", ")", "\n", "self", ".", "load_vae", "(", ")", "\n", "self", ".", "training_mode", "(", "False", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Rondorf_BOReL.None.train_offline_agent.main": [[14, 59], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_known_args", "torchkit.pytorch_utils.set_gpu_mode", "utils.load_config_file", "utils.merge_configs", "offline_metalearner.OfflineMetaLearner", "offline_metalearner.OfflineMetaLearner.train", "offline_config.args_gridworld.get_args", "os.path.join", "os.path.join", "models.vae.VAE", "utils.offline_utils.load_trained_vae", "os.path.join", "os.makedirs", "utils.offline_utils.load_dataset", "utils.offline_utils.transform_mdps_ds_to_bamdp_ds", "utils.offline_utils.save_dataset", "offline_config.args_point_robot_sparse.get_args", "torch.cuda.is_available", "offline_config.args_cheetah_vel.get_args", "offline_config.args_ant_semicircle_sparse.get_args"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.set_gpu_mode", "home.repos.pwc.inspect_result.Rondorf_BOReL.utils.config_utils.load_config_file", "home.repos.pwc.inspect_result.Rondorf_BOReL.utils.config_utils.merge_configs", "home.repos.pwc.inspect_result.Rondorf_BOReL.core.rl_algorithm.MetaRLAlgorithm.train", "home.repos.pwc.inspect_result.Rondorf_BOReL.data_collection_config.args_gridworld.get_args", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.join", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.join", "home.repos.pwc.inspect_result.Rondorf_BOReL.utils.offline_utils.load_trained_vae", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.join", "home.repos.pwc.inspect_result.Rondorf_BOReL.utils.offline_utils.load_dataset", "home.repos.pwc.inspect_result.Rondorf_BOReL.utils.offline_utils.transform_mdps_ds_to_bamdp_ds", "home.repos.pwc.inspect_result.Rondorf_BOReL.utils.offline_utils.save_dataset", "home.repos.pwc.inspect_result.Rondorf_BOReL.data_collection_config.args_gridworld.get_args", "home.repos.pwc.inspect_result.Rondorf_BOReL.data_collection_config.args_gridworld.get_args", "home.repos.pwc.inspect_result.Rondorf_BOReL.data_collection_config.args_gridworld.get_args"], ["def", "main", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "# parser.add_argument('--env-type', default='gridworld')", "\n", "# parser.add_argument('--env-type', default='point_robot_sparse')", "\n", "# parser.add_argument('--env-type', default='cheetah_vel')", "\n", "parser", ".", "add_argument", "(", "'--env-type'", ",", "default", "=", "'ant_semicircle_sparse'", ")", "\n", "args", ",", "rest_args", "=", "parser", ".", "parse_known_args", "(", ")", "\n", "env", "=", "args", ".", "env_type", "\n", "\n", "# --- GridWorld ---", "\n", "if", "env", "==", "'gridworld'", ":", "\n", "        ", "args", "=", "args_gridworld", ".", "get_args", "(", "rest_args", ")", "\n", "# --- PointRobot ---", "\n", "", "elif", "env", "==", "'point_robot_sparse'", ":", "\n", "        ", "args", "=", "args_point_robot_sparse", ".", "get_args", "(", "rest_args", ")", "\n", "# --- Mujoco ---", "\n", "", "elif", "env", "==", "'cheetah_vel'", ":", "\n", "        ", "args", "=", "args_cheetah_vel", ".", "get_args", "(", "rest_args", ")", "\n", "", "elif", "env", "==", "'ant_semicircle_sparse'", ":", "\n", "        ", "args", "=", "args_ant_semicircle_sparse", ".", "get_args", "(", "rest_args", ")", "\n", "\n", "", "set_gpu_mode", "(", "torch", ".", "cuda", ".", "is_available", "(", ")", "and", "args", ".", "use_gpu", ")", "\n", "\n", "vae_args", "=", "config_utl", ".", "load_config_file", "(", "os", ".", "path", ".", "join", "(", "args", ".", "vae_dir", ",", "args", ".", "env_name", ",", "\n", "args", ".", "vae_model_name", ",", "'online_config.json'", ")", ")", "\n", "args", "=", "config_utl", ".", "merge_configs", "(", "vae_args", ",", "args", ")", "# order of input to this function is important", "\n", "\n", "# Transform data BAMDP (state relabelling)", "\n", "if", "args", ".", "transform_data_bamdp", ":", "\n", "# load VAE for state relabelling", "\n", "        ", "vae_models_path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "vae_dir", ",", "args", ".", "env_name", ",", "\n", "args", ".", "vae_model_name", ",", "'models'", ")", "\n", "vae", "=", "VAE", "(", "args", ")", "\n", "off_utl", ".", "load_trained_vae", "(", "vae", ",", "vae_models_path", ")", "\n", "# load data and relabel", "\n", "save_data_path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "main_data_dir", ",", "args", ".", "env_name", ",", "args", ".", "relabelled_data_dir", ")", "\n", "os", ".", "makedirs", "(", "save_data_path", ")", "\n", "dataset", ",", "goals", "=", "off_utl", ".", "load_dataset", "(", "data_dir", "=", "args", ".", "data_dir", ",", "args", "=", "args", ",", "arr_type", "=", "'numpy'", ")", "\n", "bamdp_dataset", "=", "off_utl", ".", "transform_mdps_ds_to_bamdp_ds", "(", "dataset", ",", "vae", ",", "args", ")", "\n", "# save relabelled data", "\n", "off_utl", ".", "save_dataset", "(", "save_data_path", ",", "bamdp_dataset", ",", "goals", ")", "\n", "\n", "", "learner", "=", "OfflineMetaLearner", "(", "args", ")", "\n", "\n", "learner", ".", "train", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.None.train_vae_offline.vis_train_tasks": [[22, 27], ["env.plot_env", "matplotlib.Circle", "matplotlib.gca().add_artist", "matplotlib.gca"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.plot_env"], ["def", "vis_train_tasks", "(", "env", ",", "goals", ")", ":", "\n", "    ", "env", ".", "plot_env", "(", ")", "\n", "for", "goal", "in", "goals", ":", "\n", "        ", "circle", "=", "plt", ".", "Circle", "(", "(", "goal", "[", "0", "]", ",", "goal", "[", "1", "]", ")", ",", "radius", "=", "env", ".", "goal_radius", ",", "alpha", "=", "0.3", ")", "\n", "plt", ".", "gca", "(", ")", ".", "add_artist", "(", "circle", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.None.train_vae_offline.eval_vae": [[29, 60], ["len", "numpy.zeros", "numpy.zeros", "numpy.random.choice", "enumerate", "len", "numpy.random.choice", "range", "torch.no_grad", "vae.encoder.prior", "utils.helpers.update_encoding", "[].item", "torchkit.pytorch_utils.get_numpy", "torchkit.pytorch_utils.FloatTensor().unsqueeze", "torchkit.pytorch_utils.FloatTensor().unsqueeze", "torchkit.pytorch_utils.FloatTensor().unsqueeze", "torchkit.pytorch_utils.FloatTensor().unsqueeze", "vae.reward_decoder", "task_sample.unsqueeze", "torchkit.pytorch_utils.FloatTensor().unsqueeze().unsqueeze", "torchkit.pytorch_utils.FloatTensor().unsqueeze().unsqueeze", "torchkit.pytorch_utils.FloatTensor().unsqueeze().unsqueeze", "torchkit.pytorch_utils.FloatTensor", "torchkit.pytorch_utils.FloatTensor", "torchkit.pytorch_utils.FloatTensor", "torchkit.pytorch_utils.FloatTensor", "torchkit.pytorch_utils.FloatTensor().unsqueeze", "torchkit.pytorch_utils.FloatTensor().unsqueeze", "torchkit.pytorch_utils.FloatTensor().unsqueeze", "torchkit.pytorch_utils.FloatTensor", "torchkit.pytorch_utils.FloatTensor", "torchkit.pytorch_utils.FloatTensor"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.zeros", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.zeros", "home.repos.pwc.inspect_result.Rondorf_BOReL.models.encoder.RNNEncoder.prior", "home.repos.pwc.inspect_result.Rondorf_BOReL.utils.helpers.update_encoding", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.get_numpy", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.FloatTensor", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.FloatTensor", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.FloatTensor", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.FloatTensor", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.FloatTensor", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.FloatTensor", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.FloatTensor"], ["", "", "def", "eval_vae", "(", "dataset", ",", "vae", ",", "args", ")", ":", "\n", "\n", "    ", "num_tasks", "=", "len", "(", "dataset", ")", "\n", "reward_preds", "=", "np", ".", "zeros", "(", "(", "num_tasks", ",", "args", ".", "trajectory_len", ")", ")", "\n", "rewards", "=", "np", ".", "zeros", "(", "(", "num_tasks", ",", "args", ".", "trajectory_len", ")", ")", "\n", "random_tasks", "=", "np", ".", "random", ".", "choice", "(", "len", "(", "dataset", ")", ",", "10", ")", "# which trajectory to evaluate", "\n", "\n", "for", "task_idx", ",", "task", "in", "enumerate", "(", "random_tasks", ")", ":", "\n", "        ", "traj_idx_random", "=", "np", ".", "random", ".", "choice", "(", "dataset", "[", "0", "]", "[", "0", "]", ".", "shape", "[", "1", "]", ")", "# which trajectory to evaluate", "\n", "# get prior parameters", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "task_sample", ",", "task_mean", ",", "task_logvar", ",", "hidden_state", "=", "vae", ".", "encoder", ".", "prior", "(", "batch_size", "=", "1", ")", "\n", "", "for", "step", "in", "range", "(", "args", ".", "trajectory_len", ")", ":", "\n", "# update encoding", "\n", "            ", "task_sample", ",", "task_mean", ",", "task_logvar", ",", "hidden_state", "=", "utl", ".", "update_encoding", "(", "\n", "encoder", "=", "vae", ".", "encoder", ",", "\n", "obs", "=", "ptu", ".", "FloatTensor", "(", "dataset", "[", "task", "]", "[", "3", "]", "[", "step", ",", "traj_idx_random", "]", ")", ".", "unsqueeze", "(", "0", ")", ",", "\n", "action", "=", "ptu", ".", "FloatTensor", "(", "dataset", "[", "task", "]", "[", "1", "]", "[", "step", ",", "traj_idx_random", "]", ")", ".", "unsqueeze", "(", "0", ")", ",", "\n", "reward", "=", "ptu", ".", "FloatTensor", "(", "dataset", "[", "task", "]", "[", "2", "]", "[", "step", ",", "traj_idx_random", "]", ")", ".", "unsqueeze", "(", "0", ")", ",", "\n", "done", "=", "ptu", ".", "FloatTensor", "(", "dataset", "[", "task", "]", "[", "4", "]", "[", "step", ",", "traj_idx_random", "]", ")", ".", "unsqueeze", "(", "0", ")", ",", "\n", "hidden_state", "=", "hidden_state", "\n", ")", "\n", "\n", "rewards", "[", "task_idx", ",", "step", "]", "=", "dataset", "[", "task", "]", "[", "2", "]", "[", "step", ",", "traj_idx_random", "]", ".", "item", "(", ")", "\n", "reward_preds", "[", "task_idx", ",", "step", "]", "=", "ptu", ".", "get_numpy", "(", "\n", "vae", ".", "reward_decoder", "(", "task_sample", ".", "unsqueeze", "(", "0", ")", ",", "\n", "ptu", ".", "FloatTensor", "(", "dataset", "[", "task", "]", "[", "3", "]", "[", "step", ",", "traj_idx_random", "]", ")", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "0", ")", ",", "\n", "ptu", ".", "FloatTensor", "(", "dataset", "[", "task", "]", "[", "0", "]", "[", "step", ",", "traj_idx_random", "]", ")", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "0", ")", ",", "\n", "ptu", ".", "FloatTensor", "(", "dataset", "[", "task", "]", "[", "1", "]", "[", "step", ",", "traj_idx_random", "]", ")", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "0", ")", ")", "[", "0", ",", "0", "]", ")", "\n", "\n", "", "", "return", "rewards", ",", "reward_preds", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.None.train_vae_offline.update_step": [[62, 165], ["vae.encoder", "range", "numpy.stack", "numpy.repeat", "vae.encoder._sample_gaussian", "vae.encoder._sample_gaussian.unsqueeze().expand().transpose", "curr_obs.unsqueeze().expand", "curr_next_obs.unsqueeze().expand", "curr_actions.unsqueeze().expand", "curr_rewards.unsqueeze().expand", "torch.stack", "ptu.zeros.sum", "torchkit.pytorch_utils.zeros", "torch.stack", "ptu.zeros.sum", "torchkit.pytorch_utils.zeros", "torch.stack", "ptu.zeros.sum", "torchkit.pytorch_utils.zeros", "ptu.zeros.mean", "ptu.zeros.mean", "ptu.zeros.mean", "numpy.arange().reshape", "vae.compute_rew_reconstruction_loss", "ptu.zeros.append", "vae.compute_state_reconstruction_loss", "srl.sum.sum", "ptu.zeros.append", "vae.compute_kl_loss", "ptu.zeros.append", "numpy.random.choice", "vae.encoder._sample_gaussian.unsqueeze().expand", "curr_obs.unsqueeze", "curr_next_obs.unsqueeze", "curr_actions.unsqueeze", "curr_rewards.unsqueeze", "enumerate", "torch.stack", "rrl.sum.sum", "range", "range", "numpy.arange", "vae.encoder._sample_gaussian.unsqueeze", "past_reconstr_sum.append", "rrl[].sum"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjDataWrapper.stack", "home.repos.pwc.inspect_result.Rondorf_BOReL.models.encoder.RNNEncoder._sample_gaussian", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjDataWrapper.stack", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.zeros", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjDataWrapper.stack", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.zeros", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjDataWrapper.stack", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.zeros", "home.repos.pwc.inspect_result.Rondorf_BOReL.models.vae.VAE.compute_rew_reconstruction_loss", "home.repos.pwc.inspect_result.Rondorf_BOReL.models.vae.VAE.compute_state_reconstruction_loss", "home.repos.pwc.inspect_result.Rondorf_BOReL.models.vae.VAE.compute_kl_loss", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjDataWrapper.stack"], ["", "def", "update_step", "(", "vae", ",", "obs", ",", "actions", ",", "rewards", ",", "next_obs", ",", "args", ")", ":", "\n", "    ", "episode_len", ",", "num_episodes", ",", "_", "=", "obs", ".", "shape", "\n", "\n", "# get time-steps for ELBO computation", "\n", "if", "args", ".", "vae_batch_num_elbo_terms", "is", "not", "None", ":", "\n", "        ", "elbo_timesteps", "=", "np", ".", "stack", "(", "\n", "[", "np", ".", "random", ".", "choice", "(", "range", "(", "0", ",", "args", ".", "trajectory_len", "+", "1", ")", ",", "args", ".", "vae_batch_num_elbo_terms", ",", "replace", "=", "False", ")", "\n", "for", "_", "in", "range", "(", "num_episodes", ")", "]", ")", "\n", "", "else", ":", "\n", "        ", "elbo_timesteps", "=", "np", ".", "repeat", "(", "np", ".", "arange", "(", "0", ",", "args", ".", "trajectory_len", "+", "1", ")", ".", "reshape", "(", "1", ",", "-", "1", ")", ",", "\n", "num_episodes", ",", "axis", "=", "0", ")", "\n", "\n", "# pass through encoder (outputs will be: (max_traj_len+1) x number of rollouts x latent_dim -- includes the prior!)", "\n", "", "_", ",", "latent_mean", ",", "latent_logvar", ",", "_", "=", "vae", ".", "encoder", "(", "actions", "=", "actions", ",", "\n", "states", "=", "next_obs", ",", "\n", "rewards", "=", "rewards", ",", "\n", "hidden_state", "=", "None", ",", "\n", "return_prior", "=", "True", ")", "\n", "\n", "rew_recon_losses", ",", "state_recon_losses", ",", "task_recon_losses", ",", "kl_terms", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "\n", "# for each task we have in our batch", "\n", "for", "episode_idx", "in", "range", "(", "num_episodes", ")", ":", "\n", "\n", "# get the embedding values (size: traj_length+1 * latent_dim; the +1 is for the prior)", "\n", "        ", "curr_means", "=", "latent_mean", "[", ":", "episode_len", "+", "1", ",", "episode_idx", ",", ":", "]", "\n", "curr_logvars", "=", "latent_logvar", "[", ":", "episode_len", "+", "1", ",", "episode_idx", ",", ":", "]", "\n", "# take one sample for each ELBO term", "\n", "curr_samples", "=", "vae", ".", "encoder", ".", "_sample_gaussian", "(", "curr_means", ",", "curr_logvars", ")", "\n", "\n", "# select data from current rollout (result is traj_length * obs_dim)", "\n", "curr_obs", "=", "obs", "[", ":", ",", "episode_idx", ",", ":", "]", "\n", "curr_next_obs", "=", "next_obs", "[", ":", ",", "episode_idx", ",", ":", "]", "\n", "curr_actions", "=", "actions", "[", ":", ",", "episode_idx", ",", ":", "]", "\n", "curr_rewards", "=", "rewards", "[", ":", ",", "episode_idx", ",", ":", "]", "\n", "\n", "num_latents", "=", "curr_samples", ".", "shape", "[", "0", "]", "# includes the prior", "\n", "num_decodes", "=", "curr_obs", ".", "shape", "[", "0", "]", "\n", "\n", "# expand the latent to match the (x, y) pairs of the decoder", "\n", "dec_embedding", "=", "curr_samples", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "(", "num_decodes", ",", "*", "curr_samples", ".", "shape", ")", ")", ".", "transpose", "(", "1", ",", "0", ")", "\n", "\n", "# expand the (x, y) pair of the encoder", "\n", "dec_obs", "=", "curr_obs", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "(", "num_latents", ",", "*", "curr_obs", ".", "shape", ")", ")", "\n", "dec_next_obs", "=", "curr_next_obs", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "(", "num_latents", ",", "*", "curr_next_obs", ".", "shape", ")", ")", "\n", "dec_actions", "=", "curr_actions", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "(", "num_latents", ",", "*", "curr_actions", ".", "shape", ")", ")", "\n", "dec_rewards", "=", "curr_rewards", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "(", "num_latents", ",", "*", "curr_rewards", ".", "shape", ")", ")", "\n", "\n", "if", "args", ".", "decode_reward", ":", "\n", "# compute reconstruction loss for this trajectory", "\n", "# (for each timestep that was encoded, decode everything and sum it up)", "\n", "            ", "rrl", "=", "vae", ".", "compute_rew_reconstruction_loss", "(", "dec_embedding", ",", "dec_obs", ",", "dec_next_obs", ",", "\n", "dec_actions", ",", "dec_rewards", ")", "\n", "# sum along the trajectory which we decoded (sum in ELBO_t)", "\n", "if", "args", ".", "decode_only_past", ":", "\n", "                ", "curr_idx", "=", "0", "\n", "past_reconstr_sum", "=", "[", "]", "\n", "for", "i", ",", "idx_timestep", "in", "enumerate", "(", "elbo_timesteps", "[", "episode_idx", "]", ")", ":", "\n", "                    ", "dec_until", "=", "idx_timestep", "\n", "if", "dec_until", "!=", "0", ":", "\n", "                        ", "past_reconstr_sum", ".", "append", "(", "rrl", "[", "curr_idx", ":", "curr_idx", "+", "dec_until", "]", ".", "sum", "(", ")", ")", "\n", "", "curr_idx", "+=", "dec_until", "\n", "", "rrl", "=", "torch", ".", "stack", "(", "past_reconstr_sum", ")", "\n", "", "else", ":", "\n", "                ", "rrl", "=", "rrl", ".", "sum", "(", "dim", "=", "1", ")", "\n", "", "rew_recon_losses", ".", "append", "(", "rrl", ")", "\n", "", "if", "args", ".", "decode_state", ":", "\n", "            ", "srl", "=", "vae", ".", "compute_state_reconstruction_loss", "(", "dec_embedding", ",", "dec_obs", ",", "dec_next_obs", ",", "dec_actions", ")", "\n", "srl", "=", "srl", ".", "sum", "(", "dim", "=", "1", ")", "\n", "state_recon_losses", ".", "append", "(", "srl", ")", "\n", "", "if", "not", "args", ".", "disable_stochasticity_in_latent", ":", "\n", "# compute the KL term for each ELBO term of the current trajectory", "\n", "            ", "kl", "=", "vae", ".", "compute_kl_loss", "(", "curr_means", ",", "curr_logvars", ",", "elbo_timesteps", "[", "episode_idx", "]", ")", "\n", "kl_terms", ".", "append", "(", "kl", ")", "\n", "\n", "# sum the ELBO_t terms per task", "\n", "", "", "if", "args", ".", "decode_reward", ":", "\n", "        ", "rew_recon_losses", "=", "torch", ".", "stack", "(", "rew_recon_losses", ")", "\n", "rew_recon_losses", "=", "rew_recon_losses", ".", "sum", "(", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "        ", "rew_recon_losses", "=", "ptu", ".", "zeros", "(", "1", ")", "# 0 -- but with option of .mean()", "\n", "\n", "", "if", "args", ".", "decode_state", ":", "\n", "        ", "state_recon_losses", "=", "torch", ".", "stack", "(", "state_recon_losses", ")", "\n", "state_recon_losses", "=", "state_recon_losses", ".", "sum", "(", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "        ", "state_recon_losses", "=", "ptu", ".", "zeros", "(", "1", ")", "\n", "\n", "", "if", "not", "args", ".", "disable_stochasticity_in_latent", ":", "\n", "        ", "kl_terms", "=", "torch", ".", "stack", "(", "kl_terms", ")", "\n", "kl_terms", "=", "kl_terms", ".", "sum", "(", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "        ", "kl_terms", "=", "ptu", ".", "zeros", "(", "1", ")", "\n", "\n", "# make sure we can compute gradients", "\n", "", "if", "not", "args", ".", "disable_stochasticity_in_latent", ":", "\n", "        ", "assert", "kl_terms", ".", "requires_grad", "\n", "", "if", "args", ".", "decode_reward", ":", "\n", "        ", "assert", "rew_recon_losses", ".", "requires_grad", "\n", "", "if", "args", ".", "decode_state", ":", "\n", "        ", "assert", "state_recon_losses", ".", "requires_grad", "\n", "\n", "", "return", "rew_recon_losses", ".", "mean", "(", ")", ",", "state_recon_losses", ".", "mean", "(", ")", ",", "kl_terms", ".", "mean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.None.train_vae_offline.train": [[167, 276], ["len", "time.time", "range", "tensorboardX.SummaryWriter", "int", "numpy.random.permutation", "range", "print", "numpy.ceil", "int", "numpy.random.permutation", "range", "tensorboardX.SummaryWriter.add_scalar", "tensorboardX.SummaryWriter.add_scalar", "tensorboardX.SummaryWriter.add_scalar", "tensorboardX.SummaryWriter.add_scalar", "os.path.join", "torch.save", "numpy.ceil", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "train_vae_offline.update_step", "vae.optimizer.zero_grad", "loss.backward", "vae.optimizer.step", "loss.item", "rew_recon_loss.item", "state_recon_loss.item", "kl_term.item", "int", "str().rjust", "print", "train_vae_offline.eval_vae", "range", "os.getcwd", "os.path.exists", "os.mkdir", "vae.encoder.state_dict", "os.path.join", "torch.save", "torch.save", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "len", "time.time", "tensorboardX.SummaryWriter.add_figure", "vae.reward_decoder.state_dict", "os.path.join", "vae.state_decoder.state_dict", "os.path.join", "torchkit.pytorch_utils.FloatTensor", "torchkit.pytorch_utils.FloatTensor", "torchkit.pytorch_utils.FloatTensor", "torchkit.pytorch_utils.FloatTensor", "str", "str", "utils.evaluation.plot_rew_pred_vs_rew"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjDataWrapper.time", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.join", "home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.UpdateableAPIResource.save", "home.repos.pwc.inspect_result.Rondorf_BOReL.None.train_vae_offline.update_step", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.step", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.rjust", "home.repos.pwc.inspect_result.Rondorf_BOReL.None.train_vae_offline.eval_vae", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.join", "home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.UpdateableAPIResource.save", "home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.UpdateableAPIResource.save", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjDataWrapper.time", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.join", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.join", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.FloatTensor", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.FloatTensor", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.FloatTensor", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.FloatTensor", "home.repos.pwc.inspect_result.Rondorf_BOReL.utils.evaluation.plot_rew_pred_vs_rew"], ["", "def", "train", "(", "vae", ",", "dataset", ",", "args", ")", ":", "\n", "    ", "'''\n\n    :param vae:\n    :param dataset: list of lists. each list for different task contains torch tensors of s,a,r,s',t\n    :param args:\n    :return:\n    '''", "\n", "\n", "if", "args", ".", "log_tensorboard", ":", "\n", "        ", "writer", "=", "SummaryWriter", "(", "args", ".", "full_save_path", ")", "\n", "\n", "", "num_tasks", "=", "len", "(", "dataset", ")", "\n", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "total_updates", "=", "0", "\n", "for", "iter_", "in", "range", "(", "args", ".", "num_iters", ")", ":", "\n", "        ", "n_batches", "=", "int", "(", "np", ".", "ceil", "(", "dataset", "[", "0", "]", "[", "0", "]", ".", "shape", "[", "1", "]", "/", "args", ".", "vae_batch_num_rollouts_per_task", ")", ")", "\n", "traj_permutation", "=", "np", ".", "random", ".", "permutation", "(", "dataset", "[", "0", "]", "[", "0", "]", ".", "shape", "[", "1", "]", ")", "\n", "loss_tr", ",", "rew_loss_tr", ",", "state_loss_tr", ",", "kl_loss_tr", "=", "0", ",", "0", ",", "0", ",", "0", "# initialize loss for epoch", "\n", "n_updates", "=", "0", "# count number of updates", "\n", "for", "i", "in", "range", "(", "n_batches", ")", ":", "\n", "\n", "            ", "if", "i", "==", "n_batches", "-", "1", ":", "\n", "                ", "traj_indices", "=", "traj_permutation", "[", "i", "*", "args", ".", "vae_batch_num_rollouts_per_task", ":", "]", "\n", "", "else", ":", "\n", "                ", "traj_indices", "=", "traj_permutation", "[", "i", "*", "args", ".", "vae_batch_num_rollouts_per_task", ":", "\n", "(", "i", "+", "1", ")", "*", "args", ".", "vae_batch_num_rollouts_per_task", "]", "\n", "\n", "", "n_task_batches", "=", "int", "(", "np", ".", "ceil", "(", "num_tasks", "/", "args", ".", "tasks_batch_size", ")", ")", "\n", "task_permutation", "=", "np", ".", "random", ".", "permutation", "(", "num_tasks", ")", "\n", "\n", "for", "j", "in", "range", "(", "n_task_batches", ")", ":", "# run over tasks", "\n", "                ", "if", "j", "==", "n_task_batches", "-", "1", ":", "\n", "                    ", "indices", "=", "task_permutation", "[", "j", "*", "args", ".", "tasks_batch_size", ":", "]", "\n", "", "else", ":", "\n", "                    ", "indices", "=", "task_permutation", "[", "j", "*", "args", ".", "tasks_batch_size", ":", "(", "j", "+", "1", ")", "*", "args", ".", "tasks_batch_size", "]", "\n", "\n", "", "obs", ",", "actions", ",", "rewards", ",", "next_obs", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "idx", "in", "indices", ":", "\n", "# random_subset = np.random.permutation(dataset[idx][0].shape[1], )", "\n", "# random_subset = np.random.choice(dataset[idx][0].shape[1], args.vae_batch_num_rollouts_per_task)", "\n", "                    ", "obs", ".", "append", "(", "ptu", ".", "FloatTensor", "(", "dataset", "[", "idx", "]", "[", "0", "]", "[", ":", ",", "traj_indices", ",", ":", "]", ")", ")", "\n", "actions", ".", "append", "(", "ptu", ".", "FloatTensor", "(", "dataset", "[", "idx", "]", "[", "1", "]", "[", ":", ",", "traj_indices", ",", ":", "]", ")", ")", "\n", "rewards", ".", "append", "(", "ptu", ".", "FloatTensor", "(", "dataset", "[", "idx", "]", "[", "2", "]", "[", ":", ",", "traj_indices", ",", ":", "]", ")", ")", "\n", "next_obs", ".", "append", "(", "ptu", ".", "FloatTensor", "(", "dataset", "[", "idx", "]", "[", "3", "]", "[", ":", ",", "traj_indices", ",", ":", "]", ")", ")", "\n", "", "obs", "=", "torch", ".", "cat", "(", "obs", ",", "dim", "=", "1", ")", "\n", "actions", "=", "torch", ".", "cat", "(", "actions", ",", "dim", "=", "1", ")", "\n", "rewards", "=", "torch", ".", "cat", "(", "rewards", ",", "dim", "=", "1", ")", "\n", "next_obs", "=", "torch", ".", "cat", "(", "next_obs", ",", "dim", "=", "1", ")", "\n", "rew_recon_loss", ",", "state_recon_loss", ",", "kl_term", "=", "update_step", "(", "vae", ",", "obs", ",", "actions", ",", "rewards", ",", "next_obs", ",", "args", ")", "\n", "\n", "# take average (this is the expectation over p(M))", "\n", "loss", "=", "args", ".", "rew_loss_coeff", "*", "rew_recon_loss", "+", "args", ".", "state_loss_coeff", "*", "state_recon_loss", "+", "args", ".", "kl_weight", "*", "kl_term", "\n", "# update", "\n", "vae", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "vae", ".", "optimizer", ".", "step", "(", ")", "\n", "\n", "n_updates", "+=", "1", "\n", "loss_tr", "+=", "loss", ".", "item", "(", ")", "\n", "rew_loss_tr", "+=", "rew_recon_loss", ".", "item", "(", ")", "\n", "state_loss_tr", "+=", "state_recon_loss", ".", "item", "(", ")", "\n", "kl_loss_tr", "+=", "kl_term", ".", "item", "(", ")", "\n", "\n", "", "if", "(", "i", "+", "1", ")", "%", "args", ".", "log_interval", "==", "0", ":", "\n", "                ", "len_bar", "=", "int", "(", "(", "BAR_LENGTH", "*", "(", "i", "+", "1", ")", ")", "/", "n_batches", ")", "\n", "bar", "=", "(", "'='", "*", "len_bar", "+", "'>'", ")", ".", "ljust", "(", "BAR_LENGTH", ",", "'.'", ")", "\n", "idx", "=", "str", "(", "i", "+", "1", ")", ".", "rjust", "(", "len", "(", "str", "(", "n_batches", ")", ")", ",", "' '", ")", "\n", "\n", "tmpl", "=", "'{}/{}: [{}]'", ".", "format", "(", "idx", ",", "n_batches", ",", "bar", ")", "\n", "print", "(", "'Epoch {} '", ".", "format", "(", "iter_", "+", "1", ")", "+", "tmpl", ")", "\n", "\n", "", "", "print", "(", "'Elapsed time: {:.2f}, loss: {:.4f} -- rew_loss: {:.4f} -- state_loss: {:.4f} -- kl: {:.4f}'", "\n", ".", "format", "(", "time", ".", "time", "(", ")", "-", "start_time", ",", "loss_tr", "/", "n_updates", ",", "rew_loss_tr", "/", "n_updates", ",", "\n", "state_loss_tr", "/", "n_updates", ",", "kl_loss_tr", "/", "n_updates", ")", ")", "\n", "\n", "total_updates", "+=", "n_updates", "\n", "# log tb", "\n", "if", "args", ".", "log_tensorboard", ":", "\n", "            ", "writer", ".", "add_scalar", "(", "'loss/vae_loss'", ",", "loss_tr", "/", "n_updates", ",", "total_updates", ")", "\n", "writer", ".", "add_scalar", "(", "'loss/rew_recon_loss'", ",", "rew_loss_tr", "/", "n_updates", ",", "total_updates", ")", "\n", "writer", ".", "add_scalar", "(", "'loss/state_recon_loss'", ",", "state_loss_tr", "/", "n_updates", ",", "total_updates", ")", "\n", "writer", ".", "add_scalar", "(", "'loss/kl'", ",", "kl_loss_tr", "/", "n_updates", ",", "total_updates", ")", "\n", "if", "args", ".", "env_name", "!=", "'GridNavi-v2'", ":", "# TODO: eval for gridworld domain", "\n", "                ", "rewards_eval", ",", "reward_preds_eval", "=", "eval_vae", "(", "dataset", ",", "vae", ",", "args", ")", "\n", "for", "task", "in", "range", "(", "10", ")", ":", "\n", "                    ", "writer", ".", "add_figure", "(", "'reward_prediction/task_{}'", ".", "format", "(", "task", ")", ",", "\n", "utl_eval", ".", "plot_rew_pred_vs_rew", "(", "rewards_eval", "[", "task", ",", ":", "]", ",", "\n", "reward_preds_eval", "[", "task", ",", ":", "]", ")", ",", "\n", "total_updates", ")", "\n", "\n", "", "", "", "if", "(", "iter_", "+", "1", ")", "%", "args", ".", "eval_interval", "==", "0", ":", "\n", "            ", "pass", "\n", "\n", "", "if", "args", ".", "save_model", "and", "(", "iter_", "+", "1", ")", "%", "args", ".", "save_interval", "==", "0", ":", "\n", "            ", "save_path", "=", "os", ".", "path", ".", "join", "(", "os", ".", "getcwd", "(", ")", ",", "args", ".", "full_save_path", ",", "'models'", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "save_path", ")", ":", "\n", "                ", "os", ".", "mkdir", "(", "save_path", ")", "\n", "", "torch", ".", "save", "(", "vae", ".", "encoder", ".", "state_dict", "(", ")", ",", "\n", "os", ".", "path", ".", "join", "(", "save_path", ",", "\"encoder{0}.pt\"", ".", "format", "(", "iter_", "+", "1", ")", ")", ")", "\n", "if", "vae", ".", "reward_decoder", "is", "not", "None", ":", "\n", "                ", "torch", ".", "save", "(", "vae", ".", "reward_decoder", ".", "state_dict", "(", ")", ",", "\n", "os", ".", "path", ".", "join", "(", "save_path", ",", "\"reward_decoder{0}.pt\"", ".", "format", "(", "iter_", "+", "1", ")", ")", ")", "\n", "", "if", "vae", ".", "state_decoder", "is", "not", "None", ":", "\n", "                ", "torch", ".", "save", "(", "vae", ".", "state_decoder", ".", "state_dict", "(", ")", ",", "\n", "os", ".", "path", ".", "join", "(", "save_path", ",", "\"state_decoder{0}.pt\"", ".", "format", "(", "iter_", "+", "1", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.None.train_vae_offline.main": [[278, 321], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_known_args", "torchkit.pytorch_utils.set_gpu_mode", "utils.offline_utils.expand_args", "utils.offline_utils.load_dataset", "models.vae.VAE", "train_vae_offline.train", "vae_config.args_gridworld.get_args", "print", "utils.offline_utils.mix_task_rollouts", "os.path.join", "os.makedirs", "utils.save_config_file", "vae_config.args_point_robot_sparse.get_args", "torch.cuda.is_available", "vae_config.args_cheetah_vel.get_args", "hasattr", "datetime.datetime.now().strftime", "vae_config.args_ant_semicircle_sparse.get_args", "datetime.datetime.now"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.set_gpu_mode", "home.repos.pwc.inspect_result.Rondorf_BOReL.utils.offline_utils.expand_args", "home.repos.pwc.inspect_result.Rondorf_BOReL.utils.offline_utils.load_dataset", "home.repos.pwc.inspect_result.Rondorf_BOReL.core.rl_algorithm.MetaRLAlgorithm.train", "home.repos.pwc.inspect_result.Rondorf_BOReL.data_collection_config.args_gridworld.get_args", "home.repos.pwc.inspect_result.Rondorf_BOReL.utils.offline_utils.mix_task_rollouts", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.join", "home.repos.pwc.inspect_result.Rondorf_BOReL.utils.config_utils.save_config_file", "home.repos.pwc.inspect_result.Rondorf_BOReL.data_collection_config.args_gridworld.get_args", "home.repos.pwc.inspect_result.Rondorf_BOReL.data_collection_config.args_gridworld.get_args", "home.repos.pwc.inspect_result.Rondorf_BOReL.data_collection_config.args_gridworld.get_args"], ["", "", "", "", "def", "main", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "# parser.add_argument('--env-type', default='gridworld')", "\n", "# parser.add_argument('--env-type', default='point_robot_sparse')", "\n", "# parser.add_argument('--env-type', default='cheetah_vel')", "\n", "parser", ".", "add_argument", "(", "'--env-type'", ",", "default", "=", "'ant_semicircle_sparse'", ")", "\n", "args", ",", "rest_args", "=", "parser", ".", "parse_known_args", "(", ")", "\n", "env", "=", "args", ".", "env_type", "\n", "\n", "# --- GridWorld ---", "\n", "if", "env", "==", "'gridworld'", ":", "\n", "        ", "args", "=", "args_gridworld", ".", "get_args", "(", "rest_args", ")", "\n", "# --- PointRobot ---", "\n", "", "elif", "env", "==", "'point_robot_sparse'", ":", "\n", "        ", "args", "=", "args_point_robot_sparse", ".", "get_args", "(", "rest_args", ")", "\n", "# --- Mujoco ---", "\n", "", "elif", "env", "==", "'cheetah_vel'", ":", "\n", "        ", "args", "=", "args_cheetah_vel", ".", "get_args", "(", "rest_args", ")", "\n", "", "elif", "env", "==", "'ant_semicircle_sparse'", ":", "\n", "        ", "args", "=", "args_ant_semicircle_sparse", ".", "get_args", "(", "rest_args", ")", "\n", "\n", "", "set_gpu_mode", "(", "torch", ".", "cuda", ".", "is_available", "(", ")", "and", "args", ".", "use_gpu", ")", "\n", "\n", "args", ",", "env", "=", "off_utl", ".", "expand_args", "(", "args", ")", "\n", "\n", "dataset", ",", "goals", "=", "off_utl", ".", "load_dataset", "(", "data_dir", "=", "args", ".", "data_dir", ",", "args", "=", "args", ",", "arr_type", "=", "'numpy'", ")", "\n", "# dataset, goals = off_utl.load_dataset(args)", "\n", "if", "args", ".", "hindsight_relabelling", ":", "\n", "        ", "print", "(", "'Perform reward relabelling...'", ")", "\n", "dataset", ",", "goals", "=", "off_utl", ".", "mix_task_rollouts", "(", "dataset", ",", "env", ",", "goals", ",", "args", ")", "\n", "# vis test tasks", "\n", "# vis_train_tasks(env.unwrapped, goals)     # not with GridNavi", "\n", "\n", "", "if", "args", ".", "save_model", ":", "\n", "        ", "dir_prefix", "=", "args", ".", "save_dir_prefix", "if", "hasattr", "(", "args", ",", "'save_dir_prefix'", ")", "and", "args", ".", "save_dir_prefix", "is", "not", "None", "else", "''", "\n", "args", ".", "full_save_path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "save_dir", ",", "args", ".", "env_name", ",", "\n", "dir_prefix", "+", "datetime", ".", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "'__%d_%m_%H_%M_%S'", ")", ")", "\n", "os", ".", "makedirs", "(", "args", ".", "full_save_path", ",", "exist_ok", "=", "True", ")", "\n", "config_utl", ".", "save_config_file", "(", "args", ",", "args", ".", "full_save_path", ")", "\n", "\n", "", "vae", "=", "VAE", "(", "args", ")", "\n", "train", "(", "vae", ",", "dataset", ",", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.None.metalearner.MetaLearner.__init__": [[27, 94], ["utils.helpers.seed", "environments.make_env.make_env", "numpy.random.permutation", "isinstance", "models.vae.VAE", "data_management.storage_vae.MultiTaskVAEStorage", "metalearner.MetaLearner.initialize_policy", "data_management.storage_policy.MultiTaskPolicyStorage", "utils.tb_logger.TBLogger", "unwrapped_env.get_all_task_idx", "hasattr", "int", "utils.helpers.get_dim", "int", "metalearner.MetaLearner._get_augmented_obs_dim"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.seed", "home.repos.pwc.inspect_result.Rondorf_BOReL.environments.make_env.make_env", "home.repos.pwc.inspect_result.Rondorf_BOReL.None.learner.Learner.initialize_policy", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.get_all_task_idx", "home.repos.pwc.inspect_result.Rondorf_BOReL.utils.helpers.get_dim", "home.repos.pwc.inspect_result.Rondorf_BOReL.None.metalearner.MetaLearner._get_augmented_obs_dim"], ["def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "\"\"\"\n        Seeds everything.\n        Initialises: logger, environments, policy (+storage +optimiser).\n        \"\"\"", "\n", "\n", "self", ".", "args", "=", "args", "\n", "\n", "# make sure everything has the same seed", "\n", "utl", ".", "seed", "(", "self", ".", "args", ".", "seed", ")", "\n", "\n", "# initialize tensorboard logger", "\n", "if", "self", ".", "args", ".", "log_tensorboard", ":", "\n", "            ", "self", ".", "tb_logger", "=", "TBLogger", "(", "self", ".", "args", ")", "\n", "\n", "# initialise environment", "\n", "", "self", ".", "env", "=", "make_env", "(", "self", ".", "args", ".", "env_name", ",", "\n", "self", ".", "args", ".", "max_rollouts_per_task", ",", "\n", "seed", "=", "self", ".", "args", ".", "seed", ",", "\n", "n_tasks", "=", "self", ".", "args", ".", "num_tasks", ")", "\n", "\n", "# unwrapped env to get some info about the environment", "\n", "unwrapped_env", "=", "self", ".", "env", ".", "unwrapped", "\n", "# split to train/eval tasks", "\n", "shuffled_tasks", "=", "np", ".", "random", ".", "permutation", "(", "unwrapped_env", ".", "get_all_task_idx", "(", ")", ")", "\n", "self", ".", "train_tasks", "=", "shuffled_tasks", "[", ":", "self", ".", "args", ".", "num_train_tasks", "]", "\n", "if", "self", ".", "args", ".", "num_eval_tasks", ">", "0", ":", "\n", "            ", "self", ".", "eval_tasks", "=", "shuffled_tasks", "[", "-", "self", ".", "args", ".", "num_eval_tasks", ":", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "eval_tasks", "=", "[", "]", "\n", "# calculate what the maximum length of the trajectories is", "\n", "", "args", ".", "max_trajectory_len", "=", "unwrapped_env", ".", "_max_episode_steps", "\n", "args", ".", "max_trajectory_len", "*=", "self", ".", "args", ".", "max_rollouts_per_task", "\n", "self", ".", "args", ".", "max_trajectory_len", "=", "args", ".", "max_trajectory_len", "\n", "\n", "# get action / observation dimensions", "\n", "if", "isinstance", "(", "self", ".", "env", ".", "action_space", ",", "gym", ".", "spaces", ".", "discrete", ".", "Discrete", ")", ":", "\n", "            ", "self", ".", "args", ".", "action_dim", "=", "1", "\n", "", "else", ":", "\n", "            ", "self", ".", "args", ".", "action_dim", "=", "self", ".", "env", ".", "action_space", ".", "shape", "[", "0", "]", "\n", "", "self", ".", "args", ".", "obs_dim", "=", "self", ".", "env", ".", "observation_space", ".", "shape", "[", "0", "]", "\n", "self", ".", "args", ".", "num_states", "=", "unwrapped_env", ".", "num_states", "if", "hasattr", "(", "unwrapped_env", ",", "'num_states'", ")", "else", "None", "\n", "self", ".", "args", ".", "act_space", "=", "self", ".", "env", ".", "action_space", "\n", "\n", "# initialize VAE", "\n", "self", ".", "vae", "=", "VAE", "(", "self", ".", "args", ")", "\n", "# initialize buffer for VAE updates", "\n", "self", ".", "vae_storage", "=", "MultiTaskVAEStorage", "(", "\n", "max_replay_buffer_size", "=", "int", "(", "self", ".", "args", ".", "vae_buffer_size", ")", ",", "\n", "obs_dim", "=", "utl", ".", "get_dim", "(", "self", ".", "env", ".", "observation_space", ")", ",", "\n", "action_space", "=", "self", ".", "env", ".", "action_space", ",", "\n", "tasks", "=", "self", ".", "train_tasks", ",", "\n", "trajectory_len", "=", "args", ".", "max_trajectory_len", "\n", ")", "\n", "\n", "# initialize policy", "\n", "self", ".", "initialize_policy", "(", ")", "\n", "# initialize buffer for RL updates", "\n", "self", ".", "policy_storage", "=", "MultiTaskPolicyStorage", "(", "\n", "max_replay_buffer_size", "=", "int", "(", "self", ".", "args", ".", "policy_buffer_size", ")", ",", "\n", "obs_dim", "=", "self", ".", "_get_augmented_obs_dim", "(", ")", ",", "\n", "action_space", "=", "self", ".", "env", ".", "action_space", ",", "\n", "tasks", "=", "self", ".", "train_tasks", ",", "\n", "trajectory_len", "=", "args", ".", "max_trajectory_len", ",", "\n", ")", "\n", "\n", "self", ".", "args", ".", "belief_reward", "=", "False", "# initialize arg to not use belief rewards", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.None.metalearner.MetaLearner.initialize_policy": [[95, 161], ["torchkit.networks.FlattenMlp", "algorithms.dqn.DQN().to", "torchkit.networks.FlattenMlp", "algorithms.dqn.DoubleDQN().to", "metalearner.MetaLearner._get_augmented_obs_dim", "algorithms.dqn.DQN", "torchkit.networks.FlattenMlp", "torchkit.networks.FlattenMlp", "models.policy.TanhGaussianPolicy", "algorithms.sac.SAC().to", "metalearner.MetaLearner._get_augmented_obs_dim", "algorithms.dqn.DoubleDQN", "metalearner.MetaLearner._get_augmented_obs_dim", "algorithms.sac.SAC", "metalearner.MetaLearner._get_augmented_obs_dim", "metalearner.MetaLearner._get_augmented_obs_dim"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.None.metalearner.MetaLearner._get_augmented_obs_dim", "home.repos.pwc.inspect_result.Rondorf_BOReL.None.metalearner.MetaLearner._get_augmented_obs_dim", "home.repos.pwc.inspect_result.Rondorf_BOReL.None.metalearner.MetaLearner._get_augmented_obs_dim", "home.repos.pwc.inspect_result.Rondorf_BOReL.None.metalearner.MetaLearner._get_augmented_obs_dim", "home.repos.pwc.inspect_result.Rondorf_BOReL.None.metalearner.MetaLearner._get_augmented_obs_dim"], ["", "def", "initialize_policy", "(", "self", ")", ":", "\n", "\n", "        ", "if", "self", ".", "args", ".", "policy", "==", "'dqn'", ":", "\n", "            ", "assert", "self", ".", "args", ".", "act_space", ".", "__class__", ".", "__name__", "==", "\"Discrete\"", ",", "(", "\n", "\"Can't train DQN with continuous action space!\"", ")", "\n", "q_network", "=", "FlattenMlp", "(", "input_size", "=", "self", ".", "_get_augmented_obs_dim", "(", ")", ",", "\n", "output_size", "=", "self", ".", "args", ".", "act_space", ".", "n", ",", "\n", "hidden_sizes", "=", "self", ".", "args", ".", "dqn_layers", ")", "\n", "self", ".", "agent", "=", "DQN", "(", "\n", "q_network", ",", "\n", "# optimiser_vae=self.optimizer_vae,", "\n", "lr", "=", "self", ".", "args", ".", "policy_lr", ",", "\n", "eps_optim", "=", "self", ".", "args", ".", "dqn_eps", ",", "\n", "alpha_optim", "=", "self", ".", "args", ".", "dqn_alpha", ",", "\n", "gamma", "=", "self", ".", "args", ".", "gamma", ",", "\n", "eps_init", "=", "self", ".", "args", ".", "dqn_epsilon_init", ",", "\n", "eps_final", "=", "self", ".", "args", ".", "dqn_epsilon_final", ",", "\n", "exploration_iters", "=", "self", ".", "args", ".", "dqn_exploration_iters", ",", "\n", "tau", "=", "self", ".", "args", ".", "soft_target_tau", ",", "\n", ")", ".", "to", "(", "ptu", ".", "device", ")", "\n", "", "elif", "self", ".", "args", ".", "policy", "==", "'ddqn'", ":", "\n", "            ", "assert", "self", ".", "args", ".", "act_space", ".", "__class__", ".", "__name__", "==", "\"Discrete\"", ",", "(", "\n", "\"Can't train DDQN with continuous action space!\"", ")", "\n", "q_network", "=", "FlattenMlp", "(", "input_size", "=", "self", ".", "_get_augmented_obs_dim", "(", ")", ",", "\n", "output_size", "=", "self", ".", "args", ".", "act_space", ".", "n", ",", "\n", "hidden_sizes", "=", "self", ".", "args", ".", "dqn_layers", ")", "\n", "self", ".", "agent", "=", "DoubleDQN", "(", "\n", "q_network", ",", "\n", "# optimiser_vae=self.optimizer_vae,", "\n", "lr", "=", "self", ".", "args", ".", "policy_lr", ",", "\n", "eps_optim", "=", "self", ".", "args", ".", "dqn_eps", ",", "\n", "alpha_optim", "=", "self", ".", "args", ".", "dqn_alpha", ",", "\n", "gamma", "=", "self", ".", "args", ".", "gamma", ",", "\n", "eps_init", "=", "self", ".", "args", ".", "dqn_epsilon_init", ",", "\n", "eps_final", "=", "self", ".", "args", ".", "dqn_epsilon_final", ",", "\n", "exploration_iters", "=", "self", ".", "args", ".", "dqn_exploration_iters", ",", "\n", "tau", "=", "self", ".", "args", ".", "soft_target_tau", ",", "\n", ")", ".", "to", "(", "ptu", ".", "device", ")", "\n", "", "elif", "self", ".", "args", ".", "policy", "==", "'sac'", ":", "\n", "            ", "assert", "self", ".", "args", ".", "act_space", ".", "__class__", ".", "__name__", "==", "\"Box\"", ",", "(", "\n", "\"Can't train SAC with discrete action space!\"", ")", "\n", "q1_network", "=", "FlattenMlp", "(", "input_size", "=", "self", ".", "_get_augmented_obs_dim", "(", ")", "+", "self", ".", "args", ".", "action_dim", ",", "\n", "output_size", "=", "1", ",", "\n", "hidden_sizes", "=", "self", ".", "args", ".", "dqn_layers", ")", "\n", "q2_network", "=", "FlattenMlp", "(", "input_size", "=", "self", ".", "_get_augmented_obs_dim", "(", ")", "+", "self", ".", "args", ".", "action_dim", ",", "\n", "output_size", "=", "1", ",", "\n", "hidden_sizes", "=", "self", ".", "args", ".", "dqn_layers", ")", "\n", "policy", "=", "TanhGaussianPolicy", "(", "obs_dim", "=", "self", ".", "_get_augmented_obs_dim", "(", ")", ",", "\n", "action_dim", "=", "self", ".", "args", ".", "action_dim", ",", "\n", "hidden_sizes", "=", "self", ".", "args", ".", "policy_layers", ")", "\n", "self", ".", "agent", "=", "SAC", "(", "\n", "policy", ",", "\n", "q1_network", ",", "\n", "q2_network", ",", "\n", "\n", "actor_lr", "=", "self", ".", "args", ".", "actor_lr", ",", "\n", "critic_lr", "=", "self", ".", "args", ".", "critic_lr", ",", "\n", "gamma", "=", "self", ".", "args", ".", "gamma", ",", "\n", "tau", "=", "self", ".", "args", ".", "soft_target_tau", ",", "\n", "\n", "entropy_alpha", "=", "self", ".", "args", ".", "entropy_alpha", ",", "\n", "automatic_entropy_tuning", "=", "self", ".", "args", ".", "automatic_entropy_tuning", ",", "\n", "alpha_lr", "=", "self", ".", "args", ".", "alpha_lr", "\n", ")", ".", "to", "(", "ptu", ".", "device", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.None.metalearner.MetaLearner.train": [[162, 207], ["metalearner.MetaLearner._start_training", "range", "metalearner.MetaLearner.training_mode", "range", "numpy.random.choice", "metalearner.MetaLearner.update", "metalearner.MetaLearner.training_mode", "print", "print", "metalearner.MetaLearner.env.reset_task", "metalearner.MetaLearner.collect_rollouts", "metalearner.MetaLearner.agent.set_exploration_parameter", "metalearner.MetaLearner.log", "metalearner.MetaLearner.env.reset_task", "metalearner.MetaLearner.collect_rollouts", "print", "range", "numpy.random.choice", "metalearner.MetaLearner.update_vae", "numpy.random.randint", "print", "len", "int", "loss.item"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.None.learner.Learner._start_training", "home.repos.pwc.inspect_result.Rondorf_BOReL.core.rl_algorithm.MetaRLAlgorithm.training_mode", "home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.GymObject.update", "home.repos.pwc.inspect_result.Rondorf_BOReL.core.rl_algorithm.MetaRLAlgorithm.training_mode", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.reset_task", "home.repos.pwc.inspect_result.Rondorf_BOReL.None.learner.Learner.collect_rollouts", "home.repos.pwc.inspect_result.Rondorf_BOReL.algorithms.dqn.DQN.set_exploration_parameter", "home.repos.pwc.inspect_result.Rondorf_BOReL.core.logger.log", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.reset_task", "home.repos.pwc.inspect_result.Rondorf_BOReL.None.learner.Learner.collect_rollouts", "home.repos.pwc.inspect_result.Rondorf_BOReL.None.metalearner.MetaLearner.update_vae"], ["", "", "def", "train", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        meta-training loop\n        \"\"\"", "\n", "\n", "self", ".", "_start_training", "(", ")", "\n", "for", "iter_", "in", "range", "(", "self", ".", "args", ".", "num_iters", ")", ":", "\n", "            ", "self", ".", "training_mode", "(", "True", ")", "\n", "# switch to belief reward", "\n", "if", "self", ".", "args", ".", "switch_to_belief_reward", "is", "not", "None", "and", "iter_", ">=", "self", ".", "args", ".", "switch_to_belief_reward", ":", "\n", "                ", "self", ".", "args", ".", "belief_reward", "=", "True", "\n", "", "if", "iter_", "==", "0", ":", "\n", "                ", "print", "(", "'Collecting initial pool of data..'", ")", "\n", "for", "task", "in", "self", ".", "train_tasks", ":", "\n", "                    ", "self", ".", "task_idx", "=", "task", "\n", "self", ".", "env", ".", "reset_task", "(", "idx", "=", "task", ")", "\n", "# self.collect_rollouts(num_rollouts=self.args.num_init_rollouts_pool)", "\n", "self", ".", "collect_rollouts", "(", "num_rollouts", "=", "self", ".", "args", ".", "num_init_rollouts_pool", ",", "random_actions", "=", "True", ")", "\n", "", "print", "(", "'Done!'", ")", "\n", "if", "self", ".", "args", ".", "pretrain_len", ">", "0", ":", "\n", "                    ", "print", "(", "'Pre-training for {} updates.'", ".", "format", "(", "self", ".", "args", ".", "pretrain_len", ")", ")", "\n", "for", "update", "in", "range", "(", "self", ".", "args", ".", "pretrain_len", ")", ":", "\n", "                        ", "indices", "=", "np", ".", "random", ".", "choice", "(", "self", ".", "train_tasks", ",", "self", ".", "args", ".", "meta_batch", ")", "\n", "loss", ",", "_", ",", "_", ",", "_", ",", "_", "=", "self", ".", "update_vae", "(", "indices", ")", "\n", "if", "(", "update", "+", "1", ")", "%", "int", "(", "self", ".", "args", ".", "pretrain_len", "/", "10", ")", "==", "0", ":", "\n", "                            ", "print", "(", "'Initial VAE training, {} updates. VAE loss: {:.3f}'", ".", "format", "(", "update", "+", "1", ",", "\n", "loss", ".", "item", "(", ")", ")", ")", "\n", "", "", "self", ".", "_n_vae_update_steps_total", "+=", "self", ".", "args", ".", "vae_updates_per_iter", "\n", "\n", "# collect data from subset of train tasks", "\n", "", "", "for", "i", "in", "range", "(", "self", ".", "args", ".", "num_tasks_sample", ")", ":", "\n", "                ", "task", "=", "self", ".", "train_tasks", "[", "np", ".", "random", ".", "randint", "(", "len", "(", "self", ".", "train_tasks", ")", ")", "]", "\n", "self", ".", "task_idx", "=", "task", "\n", "self", ".", "env", ".", "reset_task", "(", "idx", "=", "task", ")", "\n", "self", ".", "collect_rollouts", "(", "num_rollouts", "=", "self", ".", "args", ".", "num_rollouts_per_iter", ")", "\n", "# update", "\n", "", "indices", "=", "np", ".", "random", ".", "choice", "(", "self", ".", "train_tasks", ",", "self", ".", "args", ".", "meta_batch", ")", "\n", "train_stats", "=", "self", ".", "update", "(", "indices", ")", "\n", "self", ".", "training_mode", "(", "False", ")", "\n", "\n", "if", "self", ".", "args", ".", "policy", "==", "'dqn'", ":", "\n", "                ", "self", ".", "agent", ".", "set_exploration_parameter", "(", "iter_", "+", "1", ")", "\n", "# evaluate and log", "\n", "", "if", "(", "iter_", "+", "1", ")", "%", "self", ".", "args", ".", "log_interval", "==", "0", ":", "\n", "                ", "self", ".", "log", "(", "iter_", "+", "1", ",", "train_stats", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.None.metalearner.MetaLearner.update": [[208, 264], ["range", "range", "metalearner.MetaLearner.sample_rl_batch", "obs.view.view.size", "obs.view.view.view", "actions.view.view.view", "rewards.view.view.view", "next_obs.view.view.view", "terms.view.view.view", "metalearner.MetaLearner.agent.update", "metalearner.MetaLearner.items", "numpy.mean", "metalearner.MetaLearner.update_vae", "rew_losses.append", "state_losses.append", "task_losses.append", "kl_terms.append", "vae_losses.append", "rew_loss.item", "state_loss.item", "task_loss.item", "kl_term.item", "vae_loss.item", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "rl_losses_agg[].append"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.None.learner.Learner.sample_rl_batch", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjvGeomWrapper.size", "home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.GymObject.update", "home.repos.pwc.inspect_result.Rondorf_BOReL.None.metalearner.MetaLearner.update_vae"], ["", "", "", "def", "update", "(", "self", ",", "tasks", ")", ":", "\n", "        ", "'''\n        Meta-update\n        :param tasks: list/array of task indices. perform update based on the tasks\n        :return:\n        '''", "\n", "\n", "# --- RL TRAINING ---", "\n", "rl_losses_agg", "=", "{", "}", "\n", "for", "update", "in", "range", "(", "self", ".", "args", ".", "rl_updates_per_iter", ")", ":", "\n", "# sample random RL batch", "\n", "            ", "obs", ",", "actions", ",", "rewards", ",", "next_obs", ",", "terms", "=", "self", ".", "sample_rl_batch", "(", "tasks", ",", "self", ".", "args", ".", "batch_size", ")", "\n", "# flatten out task dimension", "\n", "t", ",", "b", ",", "_", "=", "obs", ".", "size", "(", ")", "\n", "obs", "=", "obs", ".", "view", "(", "t", "*", "b", ",", "-", "1", ")", "\n", "actions", "=", "actions", ".", "view", "(", "t", "*", "b", ",", "-", "1", ")", "\n", "rewards", "=", "rewards", ".", "view", "(", "t", "*", "b", ",", "-", "1", ")", "\n", "next_obs", "=", "next_obs", ".", "view", "(", "t", "*", "b", ",", "-", "1", ")", "\n", "terms", "=", "terms", ".", "view", "(", "t", "*", "b", ",", "-", "1", ")", "\n", "\n", "# RL update", "\n", "rl_losses", "=", "self", ".", "agent", ".", "update", "(", "obs", ",", "actions", ",", "rewards", ",", "next_obs", ",", "terms", ")", "\n", "\n", "for", "k", ",", "v", "in", "rl_losses", ".", "items", "(", ")", ":", "\n", "                ", "if", "update", "==", "0", ":", "# first iterate - create list", "\n", "                    ", "rl_losses_agg", "[", "k", "]", "=", "[", "v", "]", "\n", "", "else", ":", "# append values", "\n", "                    ", "rl_losses_agg", "[", "k", "]", ".", "append", "(", "v", ")", "\n", "# take mean", "\n", "", "", "", "for", "k", "in", "rl_losses_agg", ":", "\n", "            ", "rl_losses_agg", "[", "k", "]", "=", "np", ".", "mean", "(", "rl_losses_agg", "[", "k", "]", ")", "\n", "", "self", ".", "_n_rl_update_steps_total", "+=", "self", ".", "args", ".", "rl_updates_per_iter", "\n", "\n", "# --- VAE TRAINING ---", "\n", "rew_losses", ",", "state_losses", ",", "task_losses", ",", "kl_terms", ",", "vae_losses", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "update", "in", "range", "(", "self", ".", "args", ".", "vae_updates_per_iter", ")", ":", "\n", "# returns mean loss terms", "\n", "            ", "vae_loss", ",", "rew_loss", ",", "state_loss", ",", "task_loss", ",", "kl_term", "=", "self", ".", "update_vae", "(", "tasks", ")", "\n", "\n", "rew_losses", ".", "append", "(", "rew_loss", ".", "item", "(", ")", ")", "\n", "state_losses", ".", "append", "(", "state_loss", ".", "item", "(", ")", ")", "\n", "task_losses", ".", "append", "(", "task_loss", ".", "item", "(", ")", ")", "\n", "kl_terms", ".", "append", "(", "kl_term", ".", "item", "(", ")", ")", "\n", "vae_losses", ".", "append", "(", "vae_loss", ".", "item", "(", ")", ")", "\n", "\n", "# statistics", "\n", "", "self", ".", "_n_vae_update_steps_total", "+=", "self", ".", "args", ".", "vae_updates_per_iter", "\n", "\n", "train_stats", "=", "{", "**", "rl_losses_agg", ",", "**", "{", "'rew_loss'", ":", "np", ".", "mean", "(", "rew_losses", ")", ",", "\n", "'state_loss'", ":", "np", ".", "mean", "(", "state_losses", ")", ",", "\n", "'task_loss'", ":", "np", ".", "mean", "(", "task_losses", ")", ",", "\n", "'kl_loss'", ":", "np", ".", "mean", "(", "kl_terms", ")", ",", "\n", "'vae_loss'", ":", "np", ".", "mean", "(", "vae_losses", ")", "}", "\n", "}", "\n", "\n", "return", "train_stats", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.None.metalearner.MetaLearner.evaluate": [[265, 359], ["numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "enumerate", "len", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "torchkit.pytorch_utils.from_numpy", "next_obs.clone.reshape", "torchkit.pytorch_utils.get_numpy", "torchkit.pytorch_utils.get_numpy", "torchkit.pytorch_utils.get_numpy", "range", "len", "len", "len", "len", "metalearner.MetaLearner.env.reset", "torch.no_grad", "metalearner.MetaLearner.vae.encoder.prior", "torchkit.pytorch_utils.FloatTensor().reshape", "torchkit.pytorch_utils.get_numpy", "torchkit.pytorch_utils.get_numpy", "range", "len", "len", "len", "len", "len", "len", "torchkit.pytorch_utils.ones_like", "metalearner.MetaLearner.get_augmented_obs", "utils.helpers.env_step", "reward.item", "metalearner.MetaLearner.update_encoding", "torchkit.pytorch_utils.get_numpy", "torchkit.pytorch_utils.get_numpy", "torchkit.pytorch_utils.get_numpy", "next_obs.clone", "torchkit.pytorch_utils.FloatTensor", "metalearner.MetaLearner.vae.reward_decoder", "metalearner.MetaLearner.agent.act", "metalearner.MetaLearner.agent.act", "action.squeeze", "torchkit.pytorch_utils.FloatTensor().reshape", "torchkit.pytorch_utils.get_numpy", "value.item", "reward.item", "torchkit.pytorch_utils.get_numpy", "torchkit.pytorch_utils.get_numpy", "torchkit.pytorch_utils.get_numpy", "metalearner.MetaLearner.env.unwrapped.is_goal_state", "torchkit.pytorch_utils.ones_like", "dir", "utils.helpers.vertices", "torchkit.pytorch_utils.FloatTensor", "metalearner.MetaLearner.vae.reward_decoder", "metalearner.MetaLearner.vae.reward_decoder", "utils.helpers.vertices"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.zeros", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.zeros", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.zeros", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.zeros", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.zeros", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.zeros", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.zeros", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.zeros", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.zeros", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.zeros", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.zeros", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.from_numpy", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.get_numpy", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.get_numpy", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.get_numpy", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.reset", "home.repos.pwc.inspect_result.Rondorf_BOReL.models.encoder.RNNEncoder.prior", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.get_numpy", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.get_numpy", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.ones_like", "home.repos.pwc.inspect_result.Rondorf_BOReL.utils.helpers.get_augmented_obs", "home.repos.pwc.inspect_result.Rondorf_BOReL.utils.helpers.env_step", "home.repos.pwc.inspect_result.Rondorf_BOReL.utils.helpers.update_encoding", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.get_numpy", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.get_numpy", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.get_numpy", "home.repos.pwc.inspect_result.Rondorf_BOReL.core.serializable.Serializable.clone", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.FloatTensor", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjDataWrapper.act", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjDataWrapper.act", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.get_numpy", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.get_numpy", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.get_numpy", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.get_numpy", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.is_goal_state", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.ones_like", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjvLightWrapper.dir", "home.repos.pwc.inspect_result.Rondorf_BOReL.utils.helpers.vertices", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.FloatTensor", "home.repos.pwc.inspect_result.Rondorf_BOReL.utils.helpers.vertices"], ["", "def", "evaluate", "(", "self", ",", "tasks", ")", ":", "\n", "        ", "num_episodes", "=", "self", ".", "args", ".", "max_rollouts_per_task", "\n", "num_steps_per_episode", "=", "self", ".", "env", ".", "unwrapped", ".", "_max_episode_steps", "\n", "\n", "returns_per_episode", "=", "np", ".", "zeros", "(", "(", "len", "(", "tasks", ")", ",", "num_episodes", ")", ")", "\n", "success_rate", "=", "np", ".", "zeros", "(", "len", "(", "tasks", ")", ")", "\n", "task_samples", "=", "np", ".", "zeros", "(", "(", "len", "(", "tasks", ")", ",", "self", ".", "args", ".", "max_trajectory_len", "+", "1", ",", "self", ".", "args", ".", "task_embedding_size", ")", ")", "\n", "task_means", "=", "np", ".", "zeros", "(", "(", "len", "(", "tasks", ")", ",", "self", ".", "args", ".", "max_trajectory_len", "+", "1", ",", "self", ".", "args", ".", "task_embedding_size", ")", ")", "\n", "task_logvars", "=", "np", ".", "zeros", "(", "(", "len", "(", "tasks", ")", ",", "self", ".", "args", ".", "max_trajectory_len", "+", "1", ",", "self", ".", "args", ".", "task_embedding_size", ")", ")", "\n", "\n", "if", "self", ".", "args", ".", "policy", "==", "'dqn'", ":", "\n", "            ", "reward_preds", "=", "np", ".", "zeros", "(", "(", "len", "(", "tasks", ")", ",", "self", ".", "args", ".", "max_trajectory_len", "+", "1", ",", "self", ".", "env", ".", "num_states", ")", ")", "\n", "values", "=", "np", ".", "zeros", "(", "(", "len", "(", "tasks", ")", ",", "self", ".", "args", ".", "max_trajectory_len", ")", ")", "\n", "", "else", ":", "\n", "            ", "rewards", "=", "np", ".", "zeros", "(", "(", "len", "(", "tasks", ")", ",", "self", ".", "args", ".", "max_trajectory_len", ")", ")", "\n", "reward_preds", "=", "np", ".", "zeros", "(", "(", "len", "(", "tasks", ")", ",", "self", ".", "args", ".", "max_trajectory_len", ")", ")", "\n", "obs_size", "=", "self", ".", "env", ".", "unwrapped", ".", "observation_space", ".", "shape", "[", "0", "]", "\n", "observations", "=", "np", ".", "zeros", "(", "(", "len", "(", "tasks", ")", ",", "self", ".", "args", ".", "max_trajectory_len", "+", "1", ",", "obs_size", ")", ")", "\n", "log_probs", "=", "np", ".", "zeros", "(", "(", "len", "(", "tasks", ")", ",", "self", ".", "args", ".", "max_trajectory_len", ")", ")", "\n", "\n", "", "for", "task_idx", ",", "task", "in", "enumerate", "(", "tasks", ")", ":", "\n", "            ", "obs", "=", "ptu", ".", "from_numpy", "(", "self", ".", "env", ".", "reset", "(", "task", ")", ")", "\n", "obs", "=", "obs", ".", "reshape", "(", "-", "1", ",", "obs", ".", "shape", "[", "-", "1", "]", ")", "\n", "step", "=", "0", "\n", "\n", "# get prior parameters", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "task_sample", ",", "task_mean", ",", "task_logvar", ",", "hidden_state", "=", "self", ".", "vae", ".", "encoder", ".", "prior", "(", "batch_size", "=", "1", ")", "\n", "", "if", "self", ".", "args", ".", "fixed_latent_params", ":", "\n", "                ", "task_mean", "=", "ptu", ".", "FloatTensor", "(", "utl", ".", "vertices", "(", "self", ".", "args", ".", "task_embedding_size", ")", "[", "task", "]", ")", ".", "reshape", "(", "\n", "task_mean", ".", "shape", ")", "\n", "task_logvar", "=", "-", "2.", "*", "ptu", ".", "ones_like", "(", "task_logvar", ")", "# arbitrary negative enough number", "\n", "# store", "\n", "", "task_samples", "[", "task_idx", ",", "step", ",", ":", "]", "=", "ptu", ".", "get_numpy", "(", "task_sample", "[", "0", ",", "0", "]", ")", "\n", "task_means", "[", "task_idx", ",", "step", ",", ":", "]", "=", "ptu", ".", "get_numpy", "(", "task_mean", "[", "0", ",", "0", "]", ")", "\n", "task_logvars", "[", "task_idx", ",", "step", ",", ":", "]", "=", "ptu", ".", "get_numpy", "(", "task_logvar", "[", "0", ",", "0", "]", ")", "\n", "\n", "if", "self", ".", "args", ".", "policy", "==", "'dqn'", ":", "\n", "                ", "reward_preds", "[", "task_idx", ",", "step", "]", "=", "ptu", ".", "get_numpy", "(", "self", ".", "vae", ".", "reward_decoder", "(", "task_sample", ",", "None", ")", "[", "0", ",", "0", "]", ")", "\n", "", "else", ":", "\n", "                ", "observations", "[", "task_idx", ",", "step", ",", ":", "]", "=", "ptu", ".", "get_numpy", "(", "obs", "[", "0", ",", ":", "obs_size", "]", ")", "\n", "\n", "", "for", "episode_idx", "in", "range", "(", "num_episodes", ")", ":", "\n", "                ", "running_reward", "=", "0.", "\n", "for", "step_idx", "in", "range", "(", "num_steps_per_episode", ")", ":", "\n", "# add distribution parameters to observation - policy is conditioned on posterior", "\n", "                    ", "augmented_obs", "=", "self", ".", "get_augmented_obs", "(", "obs", "=", "obs", ",", "task_mu", "=", "task_mean", ",", "task_std", "=", "task_logvar", ")", "\n", "if", "self", ".", "args", ".", "policy", "==", "'dqn'", ":", "\n", "                        ", "action", ",", "value", "=", "self", ".", "agent", ".", "act", "(", "obs", "=", "augmented_obs", ",", "deterministic", "=", "True", ")", "\n", "", "else", ":", "\n", "                        ", "action", ",", "_", ",", "_", ",", "log_prob", "=", "self", ".", "agent", ".", "act", "(", "obs", "=", "augmented_obs", ",", "\n", "deterministic", "=", "self", ".", "args", ".", "eval_deterministic", ",", "\n", "return_log_prob", "=", "True", ")", "\n", "# observe reward and next obs", "\n", "", "next_obs", ",", "reward", ",", "done", ",", "info", "=", "utl", ".", "env_step", "(", "self", ".", "env", ",", "action", ".", "squeeze", "(", "dim", "=", "0", ")", ")", "\n", "running_reward", "+=", "reward", ".", "item", "(", ")", "\n", "# update encoding", "\n", "task_sample", ",", "task_mean", ",", "task_logvar", ",", "hidden_state", "=", "self", ".", "update_encoding", "(", "obs", "=", "next_obs", ",", "\n", "action", "=", "action", ",", "\n", "reward", "=", "reward", ",", "\n", "done", "=", "done", ",", "\n", "hidden_state", "=", "hidden_state", ")", "\n", "if", "self", ".", "args", ".", "fixed_latent_params", ":", "\n", "                        ", "task_mean", "=", "ptu", ".", "FloatTensor", "(", "utl", ".", "vertices", "(", "self", ".", "args", ".", "task_embedding_size", ")", "[", "task", "]", ")", ".", "reshape", "(", "task_mean", ".", "shape", ")", "\n", "task_logvar", "=", "-", "2.", "*", "ptu", ".", "ones_like", "(", "task_logvar", ")", "# arbitrary negative enough number", "\n", "# store", "\n", "", "task_samples", "[", "task_idx", ",", "step", "+", "1", ",", ":", "]", "=", "ptu", ".", "get_numpy", "(", "task_sample", "[", "0", ",", "0", "]", ")", "\n", "task_means", "[", "task_idx", ",", "step", "+", "1", ",", ":", "]", "=", "ptu", ".", "get_numpy", "(", "task_mean", "[", "0", ",", "0", "]", ")", "\n", "task_logvars", "[", "task_idx", ",", "step", "+", "1", ",", ":", "]", "=", "ptu", ".", "get_numpy", "(", "task_logvar", "[", "0", ",", "0", "]", ")", "\n", "\n", "if", "self", ".", "args", ".", "policy", "==", "'dqn'", ":", "\n", "                        ", "reward_preds", "[", "task_idx", ",", "step", "+", "1", ",", ":", "]", "=", "ptu", ".", "get_numpy", "(", "\n", "self", ".", "vae", ".", "reward_decoder", "(", "task_sample", ",", "None", ")", "[", "0", "]", ")", "\n", "values", "[", "task_idx", ",", "step", "]", "=", "value", ".", "item", "(", ")", "\n", "", "else", ":", "\n", "                        ", "rewards", "[", "task_idx", ",", "step", "]", "=", "reward", ".", "item", "(", ")", "\n", "reward_preds", "[", "task_idx", ",", "step", "]", "=", "ptu", ".", "get_numpy", "(", "self", ".", "vae", ".", "reward_decoder", "(", "task_sample", ",", "next_obs", ",", "obs", ",", "action", ")", "[", "0", ",", "0", "]", ")", "\n", "observations", "[", "task_idx", ",", "step", "+", "1", ",", ":", "]", "=", "ptu", ".", "get_numpy", "(", "next_obs", "[", "0", ",", ":", "obs_size", "]", ")", "\n", "log_probs", "[", "task_idx", ",", "step", "]", "=", "ptu", ".", "get_numpy", "(", "log_prob", "[", "0", "]", ")", "\n", "\n", "", "if", "\"is_goal_state\"", "in", "dir", "(", "self", ".", "env", ".", "unwrapped", ")", "and", "self", ".", "env", ".", "unwrapped", ".", "is_goal_state", "(", ")", ":", "\n", "                        ", "success_rate", "[", "task_idx", "]", "=", "1.", "\n", "# set: obs <- next_obs", "\n", "", "obs", "=", "next_obs", ".", "clone", "(", ")", "\n", "step", "+=", "1", "\n", "\n", "", "returns_per_episode", "[", "task_idx", ",", "episode_idx", "]", "=", "running_reward", "\n", "\n", "", "", "if", "self", ".", "args", ".", "policy", "==", "'dqn'", ":", "\n", "            ", "return", "returns_per_episode", ",", "success_rate", ",", "values", ",", "reward_preds", ",", "task_samples", ",", "task_means", ",", "task_logvars", "\n", "", "else", ":", "\n", "            ", "return", "returns_per_episode", ",", "success_rate", ",", "log_probs", ",", "observations", ",", "rewards", ",", "reward_preds", ",", "task_samples", ",", "task_means", ",", "task_logvars", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.None.metalearner.MetaLearner.log": [[360, 626], ["print", "os.path.join", "torch.save", "torch.save", "metalearner.MetaLearner.evaluate", "metalearner.MetaLearner.evaluate", "metalearner.MetaLearner.evaluate", "metalearner.MetaLearner.tb_logger.writer.add_scalar", "metalearner.MetaLearner.tb_logger.writer.add_scalar", "metalearner.MetaLearner.tb_logger.writer.add_scalar", "metalearner.MetaLearner.tb_logger.writer.add_scalar", "metalearner.MetaLearner.tb_logger.writer.add_scalar", "metalearner.MetaLearner.tb_logger.writer.add_scalar", "metalearner.MetaLearner.tb_logger.writer.add_scalar", "metalearner.MetaLearner.tb_logger.writer.add_scalar", "metalearner.MetaLearner.tb_logger.writer.add_scalar", "metalearner.MetaLearner.tb_logger.writer.add_scalar", "metalearner.MetaLearner.tb_logger.writer.add_scalar", "metalearner.MetaLearner.tb_logger.writer.add_scalar", "metalearner.MetaLearner.tb_logger.writer.add_scalar", "os.path.exists", "os.mkdir", "metalearner.MetaLearner.agent.state_dict", "os.path.join", "metalearner.MetaLearner.vae.encoder.state_dict", "os.path.join", "torch.save", "torch.save", "torch.save", "enumerate", "enumerate", "enumerate", "range", "metalearner.MetaLearner.tb_logger.writer.add_scalar", "metalearner.MetaLearner.tb_logger.writer.add_scalar", "metalearner.MetaLearner.tb_logger.writer.add_scalar", "metalearner.MetaLearner.tb_logger.writer.add_scalar", "metalearner.MetaLearner.tb_logger.writer.add_scalar", "task_samples[].mean", "task_means[].mean", "task_logvars[].mean", "task_samples[].mean", "task_means[].mean", "task_logvars[].mean", "task_samples[].mean", "task_means[].mean", "task_logvars[].mean", "metalearner.MetaLearner.tb_logger.writer.add_scalar", "metalearner.MetaLearner.tb_logger.writer.add_scalar", "metalearner.MetaLearner.tb_logger.writer.add_scalar", "metalearner.MetaLearner.tb_logger.writer.add_scalar", "metalearner.MetaLearner.tb_logger.writer.add_scalar", "metalearner.MetaLearner.tb_logger.writer.add_scalar", "metalearner.MetaLearner.tb_logger.writer.add_scalar", "metalearner.MetaLearner.tb_logger.writer.add_scalar", "metalearner.MetaLearner.tb_logger.writer.add_scalar", "metalearner.MetaLearner.tb_logger.writer.add_scalar", "metalearner.MetaLearner.tb_logger.writer.add_scalar", "metalearner.MetaLearner.tb_logger.writer.add_scalar", "metalearner.MetaLearner.tb_logger.writer.add_scalar", "metalearner.MetaLearner.tb_logger.writer.add_scalar", "metalearner.MetaLearner.tb_logger.writer.add_scalar", "metalearner.MetaLearner.tb_logger.writer.add_scalar", "metalearner.MetaLearner.tb_logger.writer.add_scalar", "metalearner.MetaLearner.tb_logger.writer.add_scalar", "metalearner.MetaLearner.tb_logger.writer.add_scalar", "metalearner.MetaLearner.tb_logger.writer.add_scalar", "metalearner.MetaLearner.tb_logger.writer.add_scalar", "[].mean", "list", "metalearner.MetaLearner.tb_logger.writer.add_scalar", "metalearner.MetaLearner.tb_logger.writer.add_scalar", "metalearner.MetaLearner.tb_logger.writer.add_scalar", "metalearner.MetaLearner.tb_logger.writer.add_scalar", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "int", "metalearner.MetaLearner.vae.reward_decoder.state_dict", "os.path.join", "metalearner.MetaLearner.vae.state_decoder.state_dict", "os.path.join", "metalearner.MetaLearner.vae.task_decoder.state_dict", "os.path.join", "metalearner.MetaLearner.tb_logger.writer.add_figure", "metalearner.MetaLearner.tb_logger.writer.add_figure", "metalearner.MetaLearner.tb_logger.writer.add_figure", "metalearner.MetaLearner.env.reset", "metalearner.MetaLearner.tb_logger.writer.add_figure", "metalearner.MetaLearner.env.reset", "metalearner.MetaLearner.tb_logger.writer.add_figure", "metalearner.MetaLearner.tb_logger.writer.add_scalar", "numpy.mean", "numpy.mean", "metalearner.MetaLearner.tb_logger.writer.add_scalar", "metalearner.MetaLearner.tb_logger.writer.add_scalar", "numpy.mean", "numpy.std", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "[].mean", "list", "metalearner.MetaLearner.tb_logger.writer.add_scalar", "[].mean", "list", "metalearner.MetaLearner.tb_logger.writer.add_scalar", "[].mean", "list", "metalearner.MetaLearner.tb_logger.writer.add_scalar", "[].mean", "list", "metalearner.MetaLearner.tb_logger.writer.add_scalar", "[].mean", "list", "metalearner.MetaLearner.tb_logger.writer.add_scalar", "[].mean", "list", "metalearner.MetaLearner.tb_logger.writer.add_scalar", "[].mean", "list", "metalearner.MetaLearner.tb_logger.writer.add_scalar", "metalearner.MetaLearner.vae.encoder.parameters", "sum", "[].mean", "list", "metalearner.MetaLearner.tb_logger.writer.add_scalar", "[].mean", "list", "metalearner.MetaLearner.tb_logger.writer.add_scalar", "[].mean", "list", "metalearner.MetaLearner.tb_logger.writer.add_scalar", "numpy.sum", "numpy.sum", "len", "utils.evaluation.vis_rew_pred", "utils.evaluation.vis_rew_pred", "utils.evaluation.vis_rew_pred", "utils.evaluation.plot_rew_pred_vs_rew", "utils.evaluation.plot_rew_pred_vs_rew", "numpy.mean", "numpy.sum", "numpy.mean", "numpy.mean", "metalearner.MetaLearner.agent.qf.parameters", "sum", "metalearner.MetaLearner.agent.target_qf.parameters", "sum", "metalearner.MetaLearner.agent.qf1.parameters", "sum", "metalearner.MetaLearner.agent.qf1_target.parameters", "sum", "metalearner.MetaLearner.agent.qf2.parameters", "sum", "metalearner.MetaLearner.agent.qf2_target.parameters", "sum", "metalearner.MetaLearner.agent.policy.parameters", "sum", "list", "metalearner.MetaLearner.vae.reward_decoder.parameters", "sum", "metalearner.MetaLearner.vae.state_decoder.parameters", "sum", "metalearner.MetaLearner.vae.task_decoder.parameters", "sum", "time.time", "reward_preds[].round", "reward_preds[].round", "reward_preds[].round", "numpy.sum", "list", "list", "list", "list", "list", "list", "list", "list", "metalearner.MetaLearner.vae.encoder.parameters", "param_list[].grad.mean", "list", "list", "list", "list", "metalearner.MetaLearner.agent.qf.parameters", "param_list[].grad.mean", "list", "metalearner.MetaLearner.agent.target_qf.parameters", "param_list[].grad.mean", "list", "metalearner.MetaLearner.agent.qf1.parameters", "param_list[].grad.mean", "list", "metalearner.MetaLearner.agent.qf1_target.parameters", "param_list[].grad.mean", "list", "metalearner.MetaLearner.agent.qf2.parameters", "param_list[].grad.mean", "list", "metalearner.MetaLearner.agent.qf2_target.parameters", "param_list[].grad.mean", "list", "metalearner.MetaLearner.agent.policy.parameters", "param_list[].grad.mean", "metalearner.MetaLearner.vae.encoder.parameters", "range", "list", "metalearner.MetaLearner.vae.reward_decoder.parameters", "param_list[].grad.mean", "list", "metalearner.MetaLearner.vae.state_decoder.parameters", "param_list[].grad.mean", "list", "metalearner.MetaLearner.vae.task_decoder.parameters", "param_list[].grad.mean", "int", "int", "int", "int", "metalearner.MetaLearner.agent.qf.parameters", "range", "metalearner.MetaLearner.agent.target_qf.parameters", "range", "metalearner.MetaLearner.agent.qf1.parameters", "range", "metalearner.MetaLearner.agent.qf1_target.parameters", "range", "metalearner.MetaLearner.agent.qf2.parameters", "range", "metalearner.MetaLearner.agent.qf2_target.parameters", "range", "metalearner.MetaLearner.agent.policy.parameters", "range", "len", "metalearner.MetaLearner.vae.reward_decoder.parameters", "range", "metalearner.MetaLearner.vae.state_decoder.parameters", "range", "metalearner.MetaLearner.vae.task_decoder.parameters", "range", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "int", "numpy.ceil"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.join", "home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.UpdateableAPIResource.save", "home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.UpdateableAPIResource.save", "home.repos.pwc.inspect_result.Rondorf_BOReL.core.rl_algorithm.MetaRLAlgorithm.evaluate", "home.repos.pwc.inspect_result.Rondorf_BOReL.core.rl_algorithm.MetaRLAlgorithm.evaluate", "home.repos.pwc.inspect_result.Rondorf_BOReL.core.rl_algorithm.MetaRLAlgorithm.evaluate", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.join", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.join", "home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.UpdateableAPIResource.save", "home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.UpdateableAPIResource.save", "home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.UpdateableAPIResource.save", "home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.ListableAPIResource.list", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.join", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.join", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.join", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.reset", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.reset", "home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.ListableAPIResource.list", "home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.ListableAPIResource.list", "home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.ListableAPIResource.list", "home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.ListableAPIResource.list", "home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.ListableAPIResource.list", "home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.ListableAPIResource.list", "home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.ListableAPIResource.list", "home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.ListableAPIResource.list", "home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.ListableAPIResource.list", "home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.ListableAPIResource.list", "home.repos.pwc.inspect_result.Rondorf_BOReL.utils.evaluation.vis_rew_pred", "home.repos.pwc.inspect_result.Rondorf_BOReL.utils.evaluation.vis_rew_pred", "home.repos.pwc.inspect_result.Rondorf_BOReL.utils.evaluation.vis_rew_pred", "home.repos.pwc.inspect_result.Rondorf_BOReL.utils.evaluation.plot_rew_pred_vs_rew", "home.repos.pwc.inspect_result.Rondorf_BOReL.utils.evaluation.plot_rew_pred_vs_rew", "home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.ListableAPIResource.list", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjDataWrapper.time", "home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.ListableAPIResource.list", "home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.ListableAPIResource.list", "home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.ListableAPIResource.list", "home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.ListableAPIResource.list", "home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.ListableAPIResource.list", "home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.ListableAPIResource.list", "home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.ListableAPIResource.list", "home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.ListableAPIResource.list", "home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.ListableAPIResource.list", "home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.ListableAPIResource.list", "home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.ListableAPIResource.list", "home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.ListableAPIResource.list", "home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.ListableAPIResource.list", "home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.ListableAPIResource.list", "home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.ListableAPIResource.list", "home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.ListableAPIResource.list", "home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.ListableAPIResource.list", "home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.ListableAPIResource.list", "home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.ListableAPIResource.list", "home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.ListableAPIResource.list", "home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.ListableAPIResource.list"], ["", "", "def", "log", "(", "self", ",", "iteration", ",", "train_stats", ")", ":", "\n", "# --- save models ---", "\n", "        ", "if", "iteration", "%", "self", ".", "args", ".", "save_interval", "==", "0", ":", "\n", "            ", "save_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "tb_logger", ".", "full_output_folder", ",", "'models'", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "save_path", ")", ":", "\n", "                ", "os", ".", "mkdir", "(", "save_path", ")", "\n", "", "torch", ".", "save", "(", "self", ".", "agent", ".", "state_dict", "(", ")", ",", "os", ".", "path", ".", "join", "(", "save_path", ",", "\"agent{0}.pt\"", ".", "format", "(", "iteration", ")", ")", ")", "\n", "torch", ".", "save", "(", "self", ".", "vae", ".", "encoder", ".", "state_dict", "(", ")", ",", "os", ".", "path", ".", "join", "(", "save_path", ",", "\"encoder{0}.pt\"", ".", "format", "(", "iteration", ")", ")", ")", "\n", "if", "self", ".", "vae", ".", "reward_decoder", "is", "not", "None", ":", "\n", "                ", "torch", ".", "save", "(", "self", ".", "vae", ".", "reward_decoder", ".", "state_dict", "(", ")", ",", "os", ".", "path", ".", "join", "(", "save_path", ",", "\"reward_decoder{0}.pt\"", ".", "format", "(", "iteration", ")", ")", ")", "\n", "", "if", "self", ".", "vae", ".", "state_decoder", "is", "not", "None", ":", "\n", "                ", "torch", ".", "save", "(", "self", ".", "vae", ".", "state_decoder", ".", "state_dict", "(", ")", ",", "os", ".", "path", ".", "join", "(", "save_path", ",", "\"state_decoder{0}.pt\"", ".", "format", "(", "iteration", ")", ")", ")", "\n", "", "if", "self", ".", "vae", ".", "task_decoder", "is", "not", "None", ":", "\n", "                ", "torch", ".", "save", "(", "self", ".", "vae", ".", "task_decoder", ".", "state_dict", "(", ")", ",", "os", ".", "path", ".", "join", "(", "save_path", ",", "\"task_decoder{0}.pt\"", ".", "format", "(", "iteration", ")", ")", ")", "\n", "\n", "# evaluate to get more stats", "\n", "", "", "if", "self", ".", "args", ".", "policy", "==", "'dqn'", ":", "\n", "# get stats on train tasks", "\n", "            ", "returns_train", ",", "success_rate_train", ",", "values", ",", "reward_preds", ",", "task_samples", ",", "task_means", ",", "task_logvars", "=", "self", ".", "evaluate", "(", "self", ".", "train_tasks", ")", "\n", "", "else", ":", "\n", "# get stats on train tasks", "\n", "            ", "returns_train", ",", "success_rate_train", ",", "log_probs", ",", "observations", ",", "rewards_train", ",", "reward_preds_train", ",", "task_samples", ",", "task_means", ",", "task_logvars", "=", "self", ".", "evaluate", "(", "self", ".", "train_tasks", "[", ":", "len", "(", "self", ".", "eval_tasks", ")", "]", ")", "\n", "returns_eval", ",", "success_rate_eval", ",", "_", ",", "observations_eval", ",", "rewards_eval", ",", "reward_preds_eval", ",", "_", ",", "_", ",", "_", "=", "self", ".", "evaluate", "(", "self", ".", "eval_tasks", ")", "\n", "\n", "", "if", "self", ".", "args", ".", "log_tensorboard", ":", "\n", "# --- log training  ---", "\n", "            ", "if", "self", ".", "args", ".", "policy", "==", "'dqn'", ":", "\n", "# for i, task in enumerate(self.eval_tasks):", "\n", "                ", "for", "i", ",", "task", "in", "enumerate", "(", "self", ".", "train_tasks", "[", ":", "5", "]", ")", ":", "\n", "                    ", "self", ".", "tb_logger", ".", "writer", ".", "add_figure", "(", "'rewards_pred_task_{}/prior'", ".", "format", "(", "i", ")", ",", "\n", "utl_eval", ".", "vis_rew_pred", "(", "self", ".", "args", ",", "reward_preds", "[", "i", ",", "0", "]", ".", "round", "(", "2", ")", ",", "\n", "self", ".", "env", ".", "goals", "[", "task", "]", ")", ",", "\n", "self", ".", "_n_env_steps_total", ")", "\n", "self", ".", "tb_logger", ".", "writer", ".", "add_figure", "(", "'rewards_pred_task_{}/halfway'", ".", "format", "(", "i", ")", ",", "\n", "utl_eval", ".", "vis_rew_pred", "(", "self", ".", "args", ",", "reward_preds", "[", "i", ",", "int", "(", "np", ".", "ceil", "(", "reward_preds", ".", "shape", "[", "1", "]", "/", "2", ")", ")", "]", ".", "round", "(", "2", ")", ",", "\n", "self", ".", "env", ".", "goals", "[", "task", "]", ")", ",", "\n", "self", ".", "_n_env_steps_total", ")", "\n", "self", ".", "tb_logger", ".", "writer", ".", "add_figure", "(", "'rewards_pred_task_{}/final'", ".", "format", "(", "i", ")", ",", "\n", "utl_eval", ".", "vis_rew_pred", "(", "self", ".", "args", ",", "reward_preds", "[", "i", ",", "-", "1", "]", ".", "round", "(", "2", ")", ",", "\n", "self", ".", "env", ".", "goals", "[", "task", "]", ")", ",", "\n", "self", ".", "_n_env_steps_total", ")", "\n", "", "", "else", ":", "\n", "                ", "for", "i", ",", "task", "in", "enumerate", "(", "self", ".", "train_tasks", "[", ":", "5", "]", ")", ":", "\n", "                    ", "self", ".", "env", ".", "reset", "(", "task", ")", "\n", "# self.tb_logger.writer.add_figure('policy_vis_train/task_{}'.format(i),", "\n", "#                                  utl_eval.plot_rollouts(observations[i, :], self.env),", "\n", "#                                  self._n_env_steps_total)", "\n", "# # sample batch", "\n", "# obs, _, _, _, _ = self.sample_rl_batch(tasks=[task],", "\n", "#                                        batch_size=self.policy_storage.task_buffers[task].size())", "\n", "# self.tb_logger.writer.add_figure('state_space_coverage/task_{}'.format(i),", "\n", "#                                  utl_eval.plot_visited_states(ptu.get_numpy(obs[0]), self.env),", "\n", "#                                  self._n_env_steps_total)", "\n", "self", ".", "tb_logger", ".", "writer", ".", "add_figure", "(", "'reward_prediction_train/task_{}'", ".", "format", "(", "i", ")", ",", "\n", "utl_eval", ".", "plot_rew_pred_vs_rew", "(", "rewards_train", "[", "i", ",", ":", "]", ",", "\n", "reward_preds_train", "[", "i", ",", ":", "]", ")", ",", "\n", "self", ".", "_n_env_steps_total", ")", "\n", "", "for", "i", ",", "task", "in", "enumerate", "(", "self", ".", "eval_tasks", "[", ":", "5", "]", ")", ":", "\n", "                    ", "self", ".", "env", ".", "reset", "(", "task", ")", "\n", "# self.tb_logger.writer.add_figure('policy_vis_eval/task_{}'.format(i),", "\n", "#                                  utl_eval.plot_rollouts(observations_eval[i, :], self.env),", "\n", "#                                  self._n_env_steps_total)", "\n", "self", ".", "tb_logger", ".", "writer", ".", "add_figure", "(", "'reward_prediction_eval/task_{}'", ".", "format", "(", "i", ")", ",", "\n", "utl_eval", ".", "plot_rew_pred_vs_rew", "(", "rewards_eval", "[", "i", ",", ":", "]", ",", "\n", "reward_preds_eval", "[", "i", ",", ":", "]", ")", ",", "\n", "self", ".", "_n_env_steps_total", ")", "\n", "# some metrics", "\n", "", "", "self", ".", "tb_logger", ".", "writer", ".", "add_scalar", "(", "'metrics/successes_in_buffer'", ",", "\n", "self", ".", "_successes_in_buffer", "/", "self", ".", "_n_env_steps_total", ",", "\n", "self", ".", "_n_env_steps_total", ")", "\n", "\n", "if", "self", ".", "args", ".", "max_rollouts_per_task", ">", "1", ":", "\n", "                ", "for", "episode_idx", "in", "range", "(", "self", ".", "args", ".", "max_rollouts_per_task", ")", ":", "\n", "                    ", "self", ".", "tb_logger", ".", "writer", ".", "add_scalar", "(", "'returns_multi_episode/episode_{}'", ".", "\n", "format", "(", "episode_idx", "+", "1", ")", ",", "\n", "np", ".", "mean", "(", "returns_train", "[", ":", ",", "episode_idx", "]", ")", ",", "\n", "self", ".", "_n_env_steps_total", ")", "\n", "", "self", ".", "tb_logger", ".", "writer", ".", "add_scalar", "(", "'returns_multi_episode/sum'", ",", "\n", "np", ".", "mean", "(", "np", ".", "sum", "(", "returns_train", ",", "axis", "=", "-", "1", ")", ")", ",", "\n", "self", ".", "_n_env_steps_total", ")", "\n", "self", ".", "tb_logger", ".", "writer", ".", "add_scalar", "(", "'returns_multi_episode/success_rate'", ",", "\n", "np", ".", "mean", "(", "success_rate_train", ")", ",", "\n", "self", ".", "_n_env_steps_total", ")", "\n", "if", "self", ".", "args", ".", "policy", "!=", "'dqn'", ":", "\n", "                    ", "self", ".", "tb_logger", ".", "writer", ".", "add_scalar", "(", "'returns_multi_episode/sum_eval'", ",", "\n", "np", ".", "mean", "(", "np", ".", "sum", "(", "returns_eval", ",", "axis", "=", "-", "1", ")", ")", ",", "\n", "self", ".", "_n_env_steps_total", ")", "\n", "self", ".", "tb_logger", ".", "writer", ".", "add_scalar", "(", "'returns_multi_episode/success_rate_eval'", ",", "\n", "np", ".", "mean", "(", "success_rate_eval", ")", ",", "\n", "self", ".", "_n_env_steps_total", ")", "\n", "", "", "else", ":", "\n", "# self.tb_logger.writer.add_scalar('returns/returns_mean', np.mean(returns),", "\n", "#                                  self._n_env_steps_total)", "\n", "# self.tb_logger.writer.add_scalar('returns/returns_std', np.std(returns),", "\n", "#                                  self._n_env_steps_total)", "\n", "                ", "self", ".", "tb_logger", ".", "writer", ".", "add_scalar", "(", "'returns/returns_mean_train'", ",", "np", ".", "mean", "(", "returns_train", ")", ",", "\n", "self", ".", "_n_env_steps_total", ")", "\n", "self", ".", "tb_logger", ".", "writer", ".", "add_scalar", "(", "'returns/returns_std_train'", ",", "np", ".", "std", "(", "returns_train", ")", ",", "\n", "self", ".", "_n_env_steps_total", ")", "\n", "# self.tb_logger.writer.add_scalar('returns/success_rate', np.mean(success_rate),", "\n", "#                                  self._n_env_steps_total)", "\n", "self", ".", "tb_logger", ".", "writer", ".", "add_scalar", "(", "'returns/success_rate_train'", ",", "np", ".", "mean", "(", "success_rate_train", ")", ",", "\n", "self", ".", "_n_env_steps_total", ")", "\n", "# encoder", "\n", "", "self", ".", "tb_logger", ".", "writer", ".", "add_scalar", "(", "'encoder/task_embedding_init'", ",", "task_samples", "[", ":", ",", "0", "]", ".", "mean", "(", ")", ",", "self", ".", "_n_env_steps_total", ")", "\n", "self", ".", "tb_logger", ".", "writer", ".", "add_scalar", "(", "'encoder/task_mu_init'", ",", "task_means", "[", ":", ",", "0", "]", ".", "mean", "(", ")", ",", "self", ".", "_n_env_steps_total", ")", "\n", "self", ".", "tb_logger", ".", "writer", ".", "add_scalar", "(", "'encoder/task_logvar_init'", ",", "task_logvars", "[", ":", ",", "0", "]", ".", "mean", "(", ")", ",", "self", ".", "_n_env_steps_total", ")", "\n", "self", ".", "tb_logger", ".", "writer", ".", "add_scalar", "(", "'encoder/task_embedding_halfway'", ",", "task_samples", "[", ":", ",", "int", "(", "task_samples", ".", "shape", "[", "-", "1", "]", "/", "2", ")", "]", ".", "mean", "(", ")", ",", "self", ".", "_n_env_steps_total", ")", "\n", "self", ".", "tb_logger", ".", "writer", ".", "add_scalar", "(", "'encoder/task_mu_halfway'", ",", "task_means", "[", ":", ",", "int", "(", "task_means", ".", "shape", "[", "-", "1", "]", "/", "2", ")", "]", ".", "mean", "(", ")", ",", "self", ".", "_n_env_steps_total", ")", "\n", "self", ".", "tb_logger", ".", "writer", ".", "add_scalar", "(", "'encoder/task_logvar_halfway'", ",", "task_logvars", "[", ":", ",", "int", "(", "task_logvars", ".", "shape", "[", "-", "1", "]", "/", "2", ")", "]", ".", "mean", "(", ")", ",", "self", ".", "_n_env_steps_total", ")", "\n", "self", ".", "tb_logger", ".", "writer", ".", "add_scalar", "(", "'encoder/task_embedding_final'", ",", "task_samples", "[", ":", ",", "-", "1", "]", ".", "mean", "(", ")", ",", "self", ".", "_n_env_steps_total", ")", "\n", "self", ".", "tb_logger", ".", "writer", ".", "add_scalar", "(", "'encoder/task_mu_final'", ",", "task_means", "[", ":", ",", "-", "1", "]", ".", "mean", "(", ")", ",", "self", ".", "_n_env_steps_total", ")", "\n", "self", ".", "tb_logger", ".", "writer", ".", "add_scalar", "(", "'encoder/task_logvar_final'", ",", "task_logvars", "[", ":", ",", "-", "1", "]", ".", "mean", "(", ")", ",", "self", ".", "_n_env_steps_total", ")", "\n", "\n", "# policy", "\n", "if", "self", ".", "args", ".", "policy", "==", "'dqn'", ":", "\n", "                ", "self", ".", "tb_logger", ".", "writer", ".", "add_scalar", "(", "'policy/value_init'", ",", "np", ".", "mean", "(", "values", "[", ":", ",", "0", "]", ")", ",", "self", ".", "_n_env_steps_total", ")", "\n", "self", ".", "tb_logger", ".", "writer", ".", "add_scalar", "(", "'policy/value_halfway'", ",", "np", ".", "mean", "(", "values", "[", ":", ",", "int", "(", "values", ".", "shape", "[", "-", "1", "]", "/", "2", ")", "]", ")", ",", "self", ".", "_n_env_steps_total", ")", "\n", "self", ".", "tb_logger", ".", "writer", ".", "add_scalar", "(", "'policy/value_final'", ",", "np", ".", "mean", "(", "values", "[", ":", ",", "-", "1", "]", ")", ",", "self", ".", "_n_env_steps_total", ")", "\n", "\n", "self", ".", "tb_logger", ".", "writer", ".", "add_scalar", "(", "'policy/exploration_epsilon'", ",", "self", ".", "agent", ".", "eps", ",", "self", ".", "_n_env_steps_total", ")", "\n", "# RL losses", "\n", "self", ".", "tb_logger", ".", "writer", ".", "add_scalar", "(", "'rl_losses/qf_loss_vs_n_updates'", ",", "train_stats", "[", "'qf_loss'", "]", ",", "\n", "self", ".", "_n_rl_update_steps_total", ")", "\n", "self", ".", "tb_logger", ".", "writer", ".", "add_scalar", "(", "'rl_losses/qf_loss_vs_n_env_steps'", ",", "train_stats", "[", "'qf_loss'", "]", ",", "\n", "self", ".", "_n_env_steps_total", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "tb_logger", ".", "writer", ".", "add_scalar", "(", "'policy/log_prob'", ",", "np", ".", "mean", "(", "log_probs", ")", ",", "self", ".", "_n_env_steps_total", ")", "\n", "self", ".", "tb_logger", ".", "writer", ".", "add_scalar", "(", "'rl_losses/qf1_loss'", ",", "train_stats", "[", "'qf1_loss'", "]", ",", "\n", "self", ".", "_n_env_steps_total", ")", "\n", "self", ".", "tb_logger", ".", "writer", ".", "add_scalar", "(", "'rl_losses/qf2_loss'", ",", "train_stats", "[", "'qf2_loss'", "]", ",", "\n", "self", ".", "_n_env_steps_total", ")", "\n", "self", ".", "tb_logger", ".", "writer", ".", "add_scalar", "(", "'rl_losses/policy_loss'", ",", "train_stats", "[", "'policy_loss'", "]", ",", "\n", "self", ".", "_n_env_steps_total", ")", "\n", "self", ".", "tb_logger", ".", "writer", ".", "add_scalar", "(", "'rl_losses/alpha_loss'", ",", "train_stats", "[", "'alpha_loss'", "]", ",", "\n", "self", ".", "_n_env_steps_total", ")", "\n", "\n", "# VAE losses", "\n", "", "self", ".", "tb_logger", ".", "writer", ".", "add_scalar", "(", "'vae_losses/vae_loss'", ",", "train_stats", "[", "'vae_loss'", "]", ",", "\n", "self", ".", "_n_env_steps_total", ")", "\n", "self", ".", "tb_logger", ".", "writer", ".", "add_scalar", "(", "'vae_losses/kl_loss'", ",", "train_stats", "[", "'kl_loss'", "]", ",", "\n", "self", ".", "_n_env_steps_total", ")", "\n", "if", "self", ".", "vae", ".", "reward_decoder", "is", "not", "None", ":", "\n", "                ", "self", ".", "tb_logger", ".", "writer", ".", "add_scalar", "(", "'vae_losses/reward_rec_loss'", ",", "\n", "train_stats", "[", "'rew_loss'", "]", ",", "\n", "self", ".", "_n_env_steps_total", ")", "\n", "", "if", "self", ".", "vae", ".", "state_decoder", "is", "not", "None", ":", "\n", "                ", "self", ".", "tb_logger", ".", "writer", ".", "add_scalar", "(", "'vae_losses/state_rec_loss'", ",", "\n", "train_stats", "[", "'states_loss'", "]", ",", "\n", "self", ".", "_n_env_steps_total", ")", "\n", "", "if", "self", ".", "vae", ".", "task_decoder", "is", "not", "None", ":", "\n", "                ", "self", ".", "tb_logger", ".", "writer", ".", "add_scalar", "(", "'vae_losses/task_rec_loss'", ",", "\n", "train_stats", "[", "'task_loss'", "]", ",", "\n", "self", ".", "_n_env_steps_total", ")", "\n", "\n", "# weights and gradients", "\n", "", "if", "self", ".", "args", ".", "policy", "==", "'dqn'", ":", "\n", "                ", "self", ".", "tb_logger", ".", "writer", ".", "add_scalar", "(", "'weights/q_network'", ",", "\n", "list", "(", "self", ".", "agent", ".", "qf", ".", "parameters", "(", ")", ")", "[", "0", "]", ".", "mean", "(", ")", ",", "\n", "self", ".", "_n_env_steps_total", ")", "\n", "if", "list", "(", "self", ".", "agent", ".", "qf", ".", "parameters", "(", ")", ")", "[", "0", "]", ".", "grad", "is", "not", "None", ":", "\n", "                    ", "param_list", "=", "list", "(", "self", ".", "agent", ".", "qf", ".", "parameters", "(", ")", ")", "\n", "self", ".", "tb_logger", ".", "writer", ".", "add_scalar", "(", "'gradients/q_network'", ",", "\n", "sum", "(", "[", "param_list", "[", "i", "]", ".", "grad", ".", "mean", "(", ")", "for", "i", "in", "range", "(", "len", "(", "param_list", ")", ")", "]", ")", ",", "\n", "self", ".", "_n_env_steps_total", ")", "\n", "", "self", ".", "tb_logger", ".", "writer", ".", "add_scalar", "(", "'weights/q_target'", ",", "\n", "list", "(", "self", ".", "agent", ".", "target_qf", ".", "parameters", "(", ")", ")", "[", "0", "]", ".", "mean", "(", ")", ",", "\n", "self", ".", "_n_env_steps_total", ")", "\n", "if", "list", "(", "self", ".", "agent", ".", "target_qf", ".", "parameters", "(", ")", ")", "[", "0", "]", ".", "grad", "is", "not", "None", ":", "\n", "                    ", "param_list", "=", "list", "(", "self", ".", "agent", ".", "target_qf", ".", "parameters", "(", ")", ")", "\n", "self", ".", "tb_logger", ".", "writer", ".", "add_scalar", "(", "'gradients/q_target'", ",", "\n", "sum", "(", "[", "param_list", "[", "i", "]", ".", "grad", ".", "mean", "(", ")", "for", "i", "in", "range", "(", "len", "(", "param_list", ")", ")", "]", ")", ",", "\n", "self", ".", "_n_env_steps_total", ")", "\n", "", "", "else", ":", "\n", "                ", "self", ".", "tb_logger", ".", "writer", ".", "add_scalar", "(", "'weights/q1_network'", ",", "\n", "list", "(", "self", ".", "agent", ".", "qf1", ".", "parameters", "(", ")", ")", "[", "0", "]", ".", "mean", "(", ")", ",", "\n", "self", ".", "_n_env_steps_total", ")", "\n", "if", "list", "(", "self", ".", "agent", ".", "qf1", ".", "parameters", "(", ")", ")", "[", "0", "]", ".", "grad", "is", "not", "None", ":", "\n", "                    ", "param_list", "=", "list", "(", "self", ".", "agent", ".", "qf1", ".", "parameters", "(", ")", ")", "\n", "self", ".", "tb_logger", ".", "writer", ".", "add_scalar", "(", "'gradients/q1_network'", ",", "\n", "sum", "(", "[", "param_list", "[", "i", "]", ".", "grad", ".", "mean", "(", ")", "for", "i", "in", "range", "(", "len", "(", "param_list", ")", ")", "]", ")", ",", "\n", "self", ".", "_n_env_steps_total", ")", "\n", "", "self", ".", "tb_logger", ".", "writer", ".", "add_scalar", "(", "'weights/q1_target'", ",", "\n", "list", "(", "self", ".", "agent", ".", "qf1_target", ".", "parameters", "(", ")", ")", "[", "0", "]", ".", "mean", "(", ")", ",", "\n", "self", ".", "_n_env_steps_total", ")", "\n", "if", "list", "(", "self", ".", "agent", ".", "qf1_target", ".", "parameters", "(", ")", ")", "[", "0", "]", ".", "grad", "is", "not", "None", ":", "\n", "                    ", "param_list", "=", "list", "(", "self", ".", "agent", ".", "qf1_target", ".", "parameters", "(", ")", ")", "\n", "self", ".", "tb_logger", ".", "writer", ".", "add_scalar", "(", "'gradients/q1_target'", ",", "\n", "sum", "(", "[", "param_list", "[", "i", "]", ".", "grad", ".", "mean", "(", ")", "for", "i", "in", "range", "(", "len", "(", "param_list", ")", ")", "]", ")", ",", "\n", "self", ".", "_n_env_steps_total", ")", "\n", "", "self", ".", "tb_logger", ".", "writer", ".", "add_scalar", "(", "'weights/q2_network'", ",", "\n", "list", "(", "self", ".", "agent", ".", "qf2", ".", "parameters", "(", ")", ")", "[", "0", "]", ".", "mean", "(", ")", ",", "\n", "self", ".", "_n_env_steps_total", ")", "\n", "if", "list", "(", "self", ".", "agent", ".", "qf2", ".", "parameters", "(", ")", ")", "[", "0", "]", ".", "grad", "is", "not", "None", ":", "\n", "                    ", "param_list", "=", "list", "(", "self", ".", "agent", ".", "qf2", ".", "parameters", "(", ")", ")", "\n", "self", ".", "tb_logger", ".", "writer", ".", "add_scalar", "(", "'gradients/q2_network'", ",", "\n", "sum", "(", "[", "param_list", "[", "i", "]", ".", "grad", ".", "mean", "(", ")", "for", "i", "in", "range", "(", "len", "(", "param_list", ")", ")", "]", ")", ",", "\n", "self", ".", "_n_env_steps_total", ")", "\n", "", "self", ".", "tb_logger", ".", "writer", ".", "add_scalar", "(", "'weights/q2_target'", ",", "\n", "list", "(", "self", ".", "agent", ".", "qf2_target", ".", "parameters", "(", ")", ")", "[", "0", "]", ".", "mean", "(", ")", ",", "\n", "self", ".", "_n_env_steps_total", ")", "\n", "if", "list", "(", "self", ".", "agent", ".", "qf2_target", ".", "parameters", "(", ")", ")", "[", "0", "]", ".", "grad", "is", "not", "None", ":", "\n", "                    ", "param_list", "=", "list", "(", "self", ".", "agent", ".", "qf2_target", ".", "parameters", "(", ")", ")", "\n", "self", ".", "tb_logger", ".", "writer", ".", "add_scalar", "(", "'gradients/q2_target'", ",", "\n", "sum", "(", "[", "param_list", "[", "i", "]", ".", "grad", ".", "mean", "(", ")", "for", "i", "in", "range", "(", "len", "(", "param_list", ")", ")", "]", ")", ",", "\n", "self", ".", "_n_env_steps_total", ")", "\n", "", "self", ".", "tb_logger", ".", "writer", ".", "add_scalar", "(", "'weights/policy'", ",", "\n", "list", "(", "self", ".", "agent", ".", "policy", ".", "parameters", "(", ")", ")", "[", "0", "]", ".", "mean", "(", ")", ",", "\n", "self", ".", "_n_env_steps_total", ")", "\n", "if", "list", "(", "self", ".", "agent", ".", "policy", ".", "parameters", "(", ")", ")", "[", "0", "]", ".", "grad", "is", "not", "None", ":", "\n", "                    ", "param_list", "=", "list", "(", "self", ".", "agent", ".", "policy", ".", "parameters", "(", ")", ")", "\n", "self", ".", "tb_logger", ".", "writer", ".", "add_scalar", "(", "'gradients/policy'", ",", "\n", "sum", "(", "[", "param_list", "[", "i", "]", ".", "grad", ".", "mean", "(", ")", "for", "i", "in", "range", "(", "len", "(", "param_list", ")", ")", "]", ")", ",", "\n", "self", ".", "_n_env_steps_total", ")", "\n", "\n", "", "", "self", ".", "tb_logger", ".", "writer", ".", "add_scalar", "(", "'weights/encoder'", ",", "\n", "list", "(", "self", ".", "vae", ".", "encoder", ".", "parameters", "(", ")", ")", "[", "0", "]", ".", "mean", "(", ")", ",", "\n", "self", ".", "_n_env_steps_total", ")", "\n", "if", "list", "(", "self", ".", "vae", ".", "encoder", ".", "parameters", "(", ")", ")", "[", "0", "]", ".", "grad", "is", "not", "None", ":", "\n", "                ", "param_list", "=", "list", "(", "self", ".", "vae", ".", "encoder", ".", "parameters", "(", ")", ")", "\n", "self", ".", "tb_logger", ".", "writer", ".", "add_scalar", "(", "'gradients/encoder'", ",", "\n", "sum", "(", "[", "param_list", "[", "i", "]", ".", "grad", ".", "mean", "(", ")", "for", "i", "in", "range", "(", "len", "(", "param_list", ")", ")", "]", ")", ",", "\n", "self", ".", "_n_env_steps_total", ")", "\n", "\n", "", "if", "self", ".", "vae", ".", "reward_decoder", "is", "not", "None", ":", "\n", "                ", "self", ".", "tb_logger", ".", "writer", ".", "add_scalar", "(", "'weights/reward_decoder'", ",", "\n", "list", "(", "self", ".", "vae", ".", "reward_decoder", ".", "parameters", "(", ")", ")", "[", "0", "]", ".", "mean", "(", ")", ",", "\n", "self", ".", "_n_env_steps_total", ")", "\n", "if", "list", "(", "self", ".", "vae", ".", "reward_decoder", ".", "parameters", "(", ")", ")", "[", "0", "]", ".", "grad", "is", "not", "None", ":", "\n", "                    ", "param_list", "=", "list", "(", "self", ".", "vae", ".", "reward_decoder", ".", "parameters", "(", ")", ")", "\n", "self", ".", "tb_logger", ".", "writer", ".", "add_scalar", "(", "'gradients/reward_decoder'", ",", "\n", "sum", "(", "[", "param_list", "[", "i", "]", ".", "grad", ".", "mean", "(", ")", "for", "i", "in", "range", "(", "len", "(", "param_list", ")", ")", "]", ")", ",", "\n", "self", ".", "_n_env_steps_total", ")", "\n", "", "", "if", "self", ".", "vae", ".", "state_decoder", "is", "not", "None", ":", "\n", "                ", "self", ".", "tb_logger", ".", "writer", ".", "add_scalar", "(", "'weights/state_decoder'", ",", "\n", "list", "(", "self", ".", "vae", ".", "state_decoder", ".", "parameters", "(", ")", ")", "[", "0", "]", ".", "mean", "(", ")", ",", "\n", "self", ".", "_n_env_steps_total", ")", "\n", "if", "list", "(", "self", ".", "vae", ".", "state_decoder", ".", "parameters", "(", ")", ")", "[", "0", "]", ".", "grad", "is", "not", "None", ":", "\n", "                    ", "param_list", "=", "list", "(", "self", ".", "vae", ".", "state_decoder", ".", "parameters", "(", ")", ")", "\n", "self", ".", "tb_logger", ".", "writer", ".", "add_scalar", "(", "'gradients/state_decoder'", ",", "\n", "sum", "(", "[", "param_list", "[", "i", "]", ".", "grad", ".", "mean", "(", ")", "for", "i", "in", "range", "(", "len", "(", "param_list", ")", ")", "]", ")", ",", "\n", "self", ".", "_n_env_steps_total", ")", "\n", "", "", "if", "self", ".", "vae", ".", "task_decoder", "is", "not", "None", ":", "\n", "                ", "self", ".", "tb_logger", ".", "writer", ".", "add_scalar", "(", "'weights/task_decoder'", ",", "\n", "list", "(", "self", ".", "vae", ".", "task_decoder", ".", "parameters", "(", ")", ")", "[", "0", "]", ".", "mean", "(", ")", ",", "\n", "self", ".", "_n_env_steps_total", ")", "\n", "if", "list", "(", "self", ".", "vae", ".", "task_decoder", ".", "parameters", "(", ")", ")", "[", "0", "]", ".", "grad", "is", "not", "None", ":", "\n", "                    ", "param_list", "=", "list", "(", "self", ".", "vae", ".", "task_decoder", ".", "parameters", "(", ")", ")", "\n", "self", ".", "tb_logger", ".", "writer", ".", "add_scalar", "(", "'gradients/task_decoder'", ",", "\n", "sum", "(", "[", "param_list", "[", "i", "]", ".", "grad", ".", "mean", "(", ")", "for", "i", "in", "range", "(", "len", "(", "param_list", ")", ")", "]", ")", ",", "\n", "self", ".", "_n_env_steps_total", ")", "\n", "\n", "# output to user", "\n", "# print(\"Iteration -- {:3d}, Num. RL updates -- {:6d}, Elapsed time {:5d}[s]\".", "\n", "#       format(iteration,", "\n", "#              self._n_rl_update_steps_total,", "\n", "#              int(time.time() - self._start_time)))", "\n", "", "", "", "print", "(", "\"Iteration -- {}, Success rate train -- {:.3f}, Success rate eval.-- {:.3f}, \"", "\n", "\"Avg. return train -- {:.3f}, Avg. return eval. -- {:.3f}, Elapsed time {:5d}[s]\"", "\n", ".", "format", "(", "iteration", ",", "np", ".", "mean", "(", "success_rate_train", ")", ",", "\n", "np", ".", "mean", "(", "success_rate_eval", ")", ",", "np", ".", "mean", "(", "np", ".", "sum", "(", "returns_train", ",", "axis", "=", "-", "1", ")", ")", ",", "\n", "np", ".", "mean", "(", "np", ".", "sum", "(", "returns_eval", ",", "axis", "=", "-", "1", ")", ")", ",", "\n", "int", "(", "time", ".", "time", "(", ")", "-", "self", ".", "_start_time", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.None.metalearner.MetaLearner.update_vae": [[627, 762], ["metalearner.MetaLearner.sample_vae_batch", "metalearner.MetaLearner.vae.encoder", "range", "metalearner.MetaLearner.vae.optimizer.zero_grad", "loss.backward", "metalearner.MetaLearner.vae.optimizer.step", "numpy.stack", "numpy.repeat", "metalearner.MetaLearner.vae.encoder._sample_gaussian", "metalearner.MetaLearner.unsqueeze().expand().transpose", "curr_obs.unsqueeze().expand", "curr_next_obs.unsqueeze().expand", "curr_actions.unsqueeze().expand", "curr_rewards.unsqueeze().expand", "torch.stack", "torchkit.pytorch_utils.zeros.sum", "torchkit.pytorch_utils.zeros", "torch.stack", "torchkit.pytorch_utils.zeros.sum", "torchkit.pytorch_utils.zeros", "torch.stack", "torchkit.pytorch_utils.zeros.sum", "torchkit.pytorch_utils.zeros", "torch.stack", "torchkit.pytorch_utils.zeros.sum", "torchkit.pytorch_utils.zeros", "torchkit.pytorch_utils.zeros.mean", "torchkit.pytorch_utils.zeros.mean", "torchkit.pytorch_utils.zeros.mean", "torchkit.pytorch_utils.zeros.mean", "numpy.arange().reshape", "metalearner.MetaLearner.vae.compute_rew_reconstruction_loss", "torchkit.pytorch_utils.zeros.append", "metalearner.MetaLearner.vae.compute_state_reconstruction_loss", "srl.sum.sum.sum", "torchkit.pytorch_utils.zeros.append", "metalearner.MetaLearner.vae.compute_task_reconstruction_loss", "torchkit.pytorch_utils.zeros.append", "metalearner.MetaLearner.vae.compute_kl_loss", "torchkit.pytorch_utils.zeros.append", "numpy.random.choice", "metalearner.MetaLearner.unsqueeze().expand", "curr_obs.unsqueeze", "curr_next_obs.unsqueeze", "curr_actions.unsqueeze", "curr_rewards.unsqueeze", "enumerate", "torch.stack", "rrl.sum.sum.sum", "range", "range", "numpy.arange", "metalearner.MetaLearner.unsqueeze", "past_reconstr_sum.append", "rrl[].sum"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.None.metalearner.MetaLearner.sample_vae_batch", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.step", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjDataWrapper.stack", "home.repos.pwc.inspect_result.Rondorf_BOReL.models.encoder.RNNEncoder._sample_gaussian", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjDataWrapper.stack", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.zeros", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjDataWrapper.stack", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.zeros", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjDataWrapper.stack", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.zeros", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjDataWrapper.stack", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.zeros", "home.repos.pwc.inspect_result.Rondorf_BOReL.models.vae.VAE.compute_rew_reconstruction_loss", "home.repos.pwc.inspect_result.Rondorf_BOReL.models.vae.VAE.compute_state_reconstruction_loss", "home.repos.pwc.inspect_result.Rondorf_BOReL.models.vae.VAE.compute_task_reconstruction_loss", "home.repos.pwc.inspect_result.Rondorf_BOReL.models.vae.VAE.compute_kl_loss", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjDataWrapper.stack"], ["", "def", "update_vae", "(", "self", ",", "tasks", ")", ":", "\n", "        ", "\"\"\"\n        Compute losses, update parameters and return the VAE losses\n        \"\"\"", "\n", "\n", "# get a mini-batch of episodes", "\n", "obs", ",", "actions", ",", "rewards", ",", "next_obs", ",", "terms", "=", "self", ".", "sample_vae_batch", "(", "tasks", ",", "\n", "self", ".", "args", ".", "vae_batch_num_rollouts_per_task", ")", "\n", "\n", "episode_len", ",", "num_episodes", ",", "_", "=", "obs", ".", "shape", "\n", "\n", "# get time-steps for ELBO computation", "\n", "if", "self", ".", "args", ".", "vae_batch_num_elbo_terms", "is", "not", "None", ":", "\n", "            ", "elbo_timesteps", "=", "np", ".", "stack", "(", "\n", "[", "np", ".", "random", ".", "choice", "(", "range", "(", "0", ",", "self", ".", "vae_storage", ".", "trajectory_len", "+", "1", ")", ",", "\n", "self", ".", "args", ".", "vae_batch_num_elbo_terms", ",", "replace", "=", "False", ")", "\n", "for", "_", "in", "range", "(", "num_episodes", ")", "]", ")", "\n", "", "else", ":", "\n", "            ", "elbo_timesteps", "=", "np", ".", "repeat", "(", "np", ".", "arange", "(", "0", ",", "self", ".", "vae_storage", ".", "trajectory_len", "+", "1", ")", ".", "reshape", "(", "1", ",", "-", "1", ")", ",", "\n", "num_episodes", ",", "axis", "=", "0", ")", "\n", "\n", "# pass through encoder (outputs will be: (max_traj_len+1) x number of rollouts x latent_dim -- includes the prior!)", "\n", "", "_", ",", "latent_mean", ",", "latent_logvar", ",", "_", "=", "self", ".", "vae", ".", "encoder", "(", "actions", "=", "actions", ",", "\n", "states", "=", "next_obs", ",", "\n", "rewards", "=", "rewards", ",", "\n", "hidden_state", "=", "None", ",", "\n", "return_prior", "=", "True", ")", "\n", "\n", "rew_recon_losses", ",", "state_recon_losses", ",", "task_recon_losses", ",", "kl_terms", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "\n", "# for each task we have in our batch", "\n", "for", "episode_idx", "in", "range", "(", "num_episodes", ")", ":", "\n", "\n", "# get the embedding values (size: traj_length+1 * latent_dim; the +1 is for the prior)", "\n", "            ", "curr_means", "=", "latent_mean", "[", ":", "episode_len", "+", "1", ",", "episode_idx", ",", ":", "]", "\n", "curr_logvars", "=", "latent_logvar", "[", ":", "episode_len", "+", "1", ",", "episode_idx", ",", ":", "]", "\n", "# take one sample for each ELBO term", "\n", "curr_samples", "=", "self", ".", "vae", ".", "encoder", ".", "_sample_gaussian", "(", "curr_means", ",", "curr_logvars", ")", "\n", "\n", "# select data from current rollout (result is traj_length * obs_dim)", "\n", "curr_obs", "=", "obs", "[", ":", ",", "episode_idx", ",", ":", "]", "\n", "curr_next_obs", "=", "next_obs", "[", ":", ",", "episode_idx", ",", ":", "]", "\n", "curr_actions", "=", "actions", "[", ":", ",", "episode_idx", ",", ":", "]", "\n", "curr_rewards", "=", "rewards", "[", ":", ",", "episode_idx", ",", ":", "]", "\n", "\n", "num_latents", "=", "curr_samples", ".", "shape", "[", "0", "]", "# includes the prior", "\n", "num_decodes", "=", "curr_obs", ".", "shape", "[", "0", "]", "\n", "\n", "# expand the latent to match the (x, y) pairs of the decoder", "\n", "dec_embedding", "=", "curr_samples", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "(", "num_decodes", ",", "*", "curr_samples", ".", "shape", ")", ")", ".", "transpose", "(", "1", ",", "0", ")", "\n", "dec_embedding_task", "=", "curr_samples", "\n", "\n", "# expand the (x, y) pair of the encoder", "\n", "dec_obs", "=", "curr_obs", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "(", "num_latents", ",", "*", "curr_obs", ".", "shape", ")", ")", "\n", "dec_next_obs", "=", "curr_next_obs", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "(", "num_latents", ",", "*", "curr_next_obs", ".", "shape", ")", ")", "\n", "dec_actions", "=", "curr_actions", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "(", "num_latents", ",", "*", "curr_actions", ".", "shape", ")", ")", "\n", "dec_rewards", "=", "curr_rewards", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "(", "num_latents", ",", "*", "curr_rewards", ".", "shape", ")", ")", "\n", "\n", "if", "self", ".", "args", ".", "decode_reward", ":", "\n", "# compute reconstruction loss for this trajectory", "\n", "# (for each timestep that was encoded, decode everything and sum it up)", "\n", "                ", "rrl", "=", "self", ".", "vae", ".", "compute_rew_reconstruction_loss", "(", "dec_embedding", ",", "dec_obs", ",", "dec_next_obs", ",", "\n", "dec_actions", ",", "dec_rewards", ")", "\n", "# sum along the trajectory which we decoded (sum in ELBO_t)", "\n", "if", "self", ".", "args", ".", "decode_only_past", ":", "\n", "                    ", "curr_idx", "=", "0", "\n", "past_reconstr_sum", "=", "[", "]", "\n", "for", "i", ",", "idx_timestep", "in", "enumerate", "(", "elbo_timesteps", "[", "episode_idx", "]", ")", ":", "\n", "                        ", "dec_until", "=", "idx_timestep", "\n", "if", "dec_until", "!=", "0", ":", "\n", "                            ", "past_reconstr_sum", ".", "append", "(", "rrl", "[", "curr_idx", ":", "curr_idx", "+", "dec_until", "]", ".", "sum", "(", ")", ")", "\n", "", "curr_idx", "+=", "dec_until", "\n", "", "rrl", "=", "torch", ".", "stack", "(", "past_reconstr_sum", ")", "\n", "", "else", ":", "\n", "                    ", "rrl", "=", "rrl", ".", "sum", "(", "dim", "=", "1", ")", "\n", "", "rew_recon_losses", ".", "append", "(", "rrl", ")", "\n", "", "if", "self", ".", "args", ".", "decode_state", ":", "\n", "                ", "srl", "=", "self", ".", "vae", ".", "compute_state_reconstruction_loss", "(", "dec_embedding", ",", "dec_obs", ",", "dec_next_obs", ",", "dec_actions", ")", "\n", "srl", "=", "srl", ".", "sum", "(", "dim", "=", "1", ")", "\n", "state_recon_losses", ".", "append", "(", "srl", ")", "\n", "", "if", "self", ".", "args", ".", "decode_task", ":", "\n", "                ", "trl", "=", "self", ".", "vae", ".", "compute_task_reconstruction_loss", "(", "dec_embedding_task", ",", "tasks", "[", "episode_idx", "]", ")", "\n", "task_recon_losses", ".", "append", "(", "trl", ")", "\n", "", "if", "not", "self", ".", "args", ".", "disable_stochasticity_in_latent", ":", "\n", "# compute the KL term for each ELBO term of the current trajectory", "\n", "                ", "kl", "=", "self", ".", "vae", ".", "compute_kl_loss", "(", "curr_means", ",", "curr_logvars", ",", "elbo_timesteps", "[", "episode_idx", "]", ")", "\n", "kl_terms", ".", "append", "(", "kl", ")", "\n", "\n", "# sum the ELBO_t terms per task", "\n", "", "", "if", "self", ".", "args", ".", "decode_reward", ":", "\n", "            ", "rew_recon_losses", "=", "torch", ".", "stack", "(", "rew_recon_losses", ")", "\n", "rew_recon_losses", "=", "rew_recon_losses", ".", "sum", "(", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "            ", "rew_recon_losses", "=", "ptu", ".", "zeros", "(", "1", ")", "# 0 -- but with option of .mean()", "\n", "\n", "", "if", "self", ".", "args", ".", "decode_state", ":", "\n", "            ", "state_recon_losses", "=", "torch", ".", "stack", "(", "state_recon_losses", ")", "\n", "state_recon_losses", "=", "state_recon_losses", ".", "sum", "(", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "            ", "state_recon_losses", "=", "ptu", ".", "zeros", "(", "1", ")", "\n", "\n", "", "if", "self", ".", "args", ".", "decode_task", ":", "\n", "            ", "task_recon_losses", "=", "torch", ".", "stack", "(", "task_recon_losses", ")", "\n", "task_recon_losses", "=", "task_recon_losses", ".", "sum", "(", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "            ", "task_recon_losses", "=", "ptu", ".", "zeros", "(", "1", ")", "\n", "\n", "", "if", "not", "self", ".", "args", ".", "disable_stochasticity_in_latent", ":", "\n", "            ", "kl_terms", "=", "torch", ".", "stack", "(", "kl_terms", ")", "\n", "kl_terms", "=", "kl_terms", ".", "sum", "(", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "            ", "kl_terms", "=", "ptu", ".", "zeros", "(", "1", ")", "\n", "\n", "# take average (this is the expectation over p(M))", "\n", "", "loss", "=", "(", "self", ".", "args", ".", "rew_loss_coeff", "*", "rew_recon_losses", "+", "\n", "self", ".", "args", ".", "state_loss_coeff", "*", "state_recon_losses", "+", "\n", "self", ".", "args", ".", "task_loss_coeff", "*", "task_recon_losses", "+", "\n", "self", ".", "args", ".", "kl_weight", "*", "kl_terms", ")", ".", "mean", "(", ")", "\n", "\n", "# make sure we can compute gradients", "\n", "if", "not", "self", ".", "args", ".", "disable_stochasticity_in_latent", ":", "\n", "            ", "assert", "kl_terms", ".", "requires_grad", "\n", "", "if", "self", ".", "args", ".", "decode_reward", ":", "\n", "            ", "assert", "rew_recon_losses", ".", "requires_grad", "\n", "", "if", "self", ".", "args", ".", "decode_state", ":", "\n", "            ", "assert", "state_recon_losses", ".", "requires_grad", "\n", "", "if", "self", ".", "args", ".", "decode_task", ":", "\n", "            ", "assert", "task_recon_losses", ".", "requires_grad", "\n", "\n", "# update", "\n", "", "self", ".", "vae", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "self", ".", "vae", ".", "optimizer", ".", "step", "(", ")", "\n", "\n", "return", "loss", ",", "rew_recon_losses", ".", "mean", "(", ")", ",", "state_recon_losses", ".", "mean", "(", ")", ",", "task_recon_losses", ".", "mean", "(", ")", ",", "kl_terms", ".", "mean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.None.metalearner.MetaLearner.training_mode": [[763, 775], ["metalearner.MetaLearner.agent.train", "metalearner.MetaLearner.vae.encoder.train", "metalearner.MetaLearner.vae.reward_decoder.train", "metalearner.MetaLearner.vae.state_decoder.train", "metalearner.MetaLearner.vae.task_decoder.train"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.core.rl_algorithm.MetaRLAlgorithm.train", "home.repos.pwc.inspect_result.Rondorf_BOReL.core.rl_algorithm.MetaRLAlgorithm.train", "home.repos.pwc.inspect_result.Rondorf_BOReL.core.rl_algorithm.MetaRLAlgorithm.train", "home.repos.pwc.inspect_result.Rondorf_BOReL.core.rl_algorithm.MetaRLAlgorithm.train", "home.repos.pwc.inspect_result.Rondorf_BOReL.core.rl_algorithm.MetaRLAlgorithm.train"], ["", "def", "training_mode", "(", "self", ",", "mode", ")", ":", "\n", "# policy", "\n", "        ", "self", ".", "agent", ".", "train", "(", "mode", ")", "\n", "# encoder", "\n", "self", ".", "vae", ".", "encoder", ".", "train", "(", "mode", ")", "\n", "# decoders", "\n", "if", "self", ".", "args", ".", "decode_reward", ":", "\n", "            ", "self", ".", "vae", ".", "reward_decoder", ".", "train", "(", "mode", ")", "\n", "", "if", "self", ".", "args", ".", "decode_state", ":", "\n", "            ", "self", ".", "vae", ".", "state_decoder", ".", "train", "(", "mode", ")", "\n", "", "if", "self", ".", "args", ".", "decode_task", ":", "\n", "            ", "self", ".", "vae", ".", "task_decoder", ".", "train", "(", "mode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.None.metalearner.MetaLearner.collect_rollouts": [[776, 867], ["range", "torchkit.pytorch_utils.from_numpy", "next_obs.clone.reshape", "metalearner.MetaLearner.vae_storage.reset_running_episode", "metalearner.MetaLearner.get_augmented_obs", "metalearner.MetaLearner.env.reset", "torch.no_grad", "metalearner.MetaLearner.encode_running_episode", "utils.helpers.env_step", "metalearner.MetaLearner.update_encoding", "metalearner.MetaLearner.get_augmented_obs", "metalearner.MetaLearner.vae_storage.add_sample", "metalearner.MetaLearner.policy_storage.add_sample", "next_obs.clone", "metalearner.MetaLearner.clone", "torchkit.pytorch_utils.FloatTensor.squeeze", "torchkit.pytorch_utils.FloatTensor().reshape", "metalearner.MetaLearner.env.unwrapped.is_goal_state", "metalearner.MetaLearner.env.unwrapped.is_goal_state", "torchkit.pytorch_utils.FloatTensor().type", "torchkit.pytorch_utils.FloatTensor", "metalearner.MetaLearner.agent.act", "metalearner.MetaLearner.agent.act", "torchkit.pytorch_utils.get_numpy", "numpy.array", "metalearner.MetaLearner.vae.compute_belief_reward().view", "torchkit.pytorch_utils.get_numpy", "torchkit.pytorch_utils.ones_like", "torchkit.pytorch_utils.get_numpy", "torchkit.pytorch_utils.get_numpy", "torchkit.pytorch_utils.get_numpy", "torchkit.pytorch_utils.get_numpy", "torchkit.pytorch_utils.get_numpy", "dir", "torchkit.pytorch_utils.get_numpy", "torchkit.pytorch_utils.get_numpy", "numpy.array", "torchkit.pytorch_utils.get_numpy", "dir", "torchkit.pytorch_utils.get_numpy.squeeze", "torchkit.pytorch_utils.FloatTensor", "next_obs.clone.squeeze", "torchkit.pytorch_utils.FloatTensor.squeeze", "reward.squeeze", "done.squeeze", "next_obs.squeeze", "metalearner.MetaLearner.clone.squeeze", "torchkit.pytorch_utils.FloatTensor.squeeze", "torchkit.pytorch_utils.get_numpy", "metalearner.MetaLearner.squeeze", "torchkit.pytorch_utils.FloatTensor", "metalearner.MetaLearner.env.action_space.sample", "metalearner.MetaLearner.vae.compute_belief_reward", "reward.squeeze", "utils.helpers.vertices", "metalearner.MetaLearner.env.action_space.sample"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.from_numpy", "home.repos.pwc.inspect_result.Rondorf_BOReL.data_management.simple_replay_buffer.SimpleReplayBuffer.reset_running_episode", "home.repos.pwc.inspect_result.Rondorf_BOReL.utils.helpers.get_augmented_obs", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.reset", "home.repos.pwc.inspect_result.Rondorf_BOReL.None.metalearner.MetaLearner.encode_running_episode", "home.repos.pwc.inspect_result.Rondorf_BOReL.utils.helpers.env_step", "home.repos.pwc.inspect_result.Rondorf_BOReL.utils.helpers.update_encoding", "home.repos.pwc.inspect_result.Rondorf_BOReL.utils.helpers.get_augmented_obs", "home.repos.pwc.inspect_result.Rondorf_BOReL.data_management.simple_replay_buffer.SimpleReplayBuffer.add_sample", "home.repos.pwc.inspect_result.Rondorf_BOReL.data_management.simple_replay_buffer.SimpleReplayBuffer.add_sample", "home.repos.pwc.inspect_result.Rondorf_BOReL.core.serializable.Serializable.clone", "home.repos.pwc.inspect_result.Rondorf_BOReL.core.serializable.Serializable.clone", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.is_goal_state", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.is_goal_state", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjvGeomWrapper.type", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.FloatTensor", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjDataWrapper.act", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjDataWrapper.act", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.get_numpy", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.get_numpy", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.ones_like", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.get_numpy", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.get_numpy", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.get_numpy", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.get_numpy", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.get_numpy", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjvLightWrapper.dir", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.get_numpy", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.get_numpy", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.get_numpy", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjvLightWrapper.dir", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.FloatTensor", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.get_numpy", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.FloatTensor", "home.repos.pwc.inspect_result.Rondorf_BOReL.spaces.discrete.Discrete.sample", "home.repos.pwc.inspect_result.Rondorf_BOReL.models.vae.VAE.compute_belief_reward", "home.repos.pwc.inspect_result.Rondorf_BOReL.utils.helpers.vertices", "home.repos.pwc.inspect_result.Rondorf_BOReL.spaces.discrete.Discrete.sample"], ["", "", "def", "collect_rollouts", "(", "self", ",", "num_rollouts", ",", "random_actions", "=", "False", ")", ":", "\n", "        ", "'''\n\n        :param num_rollouts:\n        :param random_actions: whether to use policy to sample actions, or randomly sample action space\n        :return:\n        '''", "\n", "\n", "for", "rollout", "in", "range", "(", "num_rollouts", ")", ":", "\n", "            ", "obs", "=", "ptu", ".", "from_numpy", "(", "self", ".", "env", ".", "reset", "(", "self", ".", "task_idx", ")", ")", "\n", "obs", "=", "obs", ".", "reshape", "(", "-", "1", ",", "obs", ".", "shape", "[", "-", "1", "]", ")", "\n", "done_rollout", "=", "False", "\n", "# reset episode (length)", "\n", "self", ".", "vae_storage", ".", "reset_running_episode", "(", "self", ".", "task_idx", ")", "\n", "# self.policy_storage.reset_running_episode(self.task_idx)", "\n", "\n", "# get prior parameters", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "_", ",", "task_mean", ",", "task_logvar", ",", "hidden_state", "=", "self", ".", "encode_running_episode", "(", ")", "\n", "# if self.args.fixed_latent_params:", "\n", "#     assert 2 ** self.args.task_embedding_size >= self.args.num_tasks", "\n", "#     task_mean = ptu.FloatTensor(utl.vertices(self.args.task_embedding_size)[self.task_idx])", "\n", "#     task_logvar = -2. * ptu.ones_like(task_logvar)   # arbitrary negative enough number", "\n", "# add distribution parameters to observation - policy is conditioned on posterior", "\n", "", "augmented_obs", "=", "self", ".", "get_augmented_obs", "(", "obs", "=", "obs", ",", "task_mu", "=", "task_mean", ",", "task_std", "=", "task_logvar", ")", "\n", "\n", "while", "not", "done_rollout", ":", "\n", "                ", "if", "random_actions", ":", "\n", "                    ", "if", "self", ".", "args", ".", "policy", "==", "'dqn'", ":", "\n", "                        ", "action", "=", "ptu", ".", "FloatTensor", "(", "[", "[", "self", ".", "env", ".", "action_space", ".", "sample", "(", ")", "]", "]", ")", ".", "type", "(", "torch", ".", "long", ")", "# Sample random action", "\n", "", "else", ":", "\n", "                        ", "action", "=", "ptu", ".", "FloatTensor", "(", "[", "self", ".", "env", ".", "action_space", ".", "sample", "(", ")", "]", ")", "\n", "", "", "else", ":", "\n", "                    ", "if", "self", ".", "args", ".", "policy", "==", "'dqn'", ":", "\n", "                        ", "action", ",", "_", "=", "self", ".", "agent", ".", "act", "(", "obs", "=", "augmented_obs", ")", "# DQN", "\n", "", "else", ":", "\n", "                        ", "action", ",", "_", ",", "_", ",", "_", "=", "self", ".", "agent", ".", "act", "(", "obs", "=", "augmented_obs", ")", "# SAC", "\n", "# observe reward and next obs", "\n", "", "", "next_obs", ",", "reward", ",", "done", ",", "info", "=", "utl", ".", "env_step", "(", "self", ".", "env", ",", "action", ".", "squeeze", "(", "dim", "=", "0", ")", ")", "\n", "done_rollout", "=", "False", "if", "ptu", ".", "get_numpy", "(", "done", "[", "0", "]", "[", "0", "]", ")", "==", "0.", "else", "True", "\n", "\n", "# belief reward - averaging over multiple latent embeddings - R+ = E[R(b)]", "\n", "if", "self", ".", "args", ".", "belief_reward", ":", "\n", "                    ", "if", "self", ".", "args", ".", "policy", "==", "'dqn'", "and", "self", ".", "args", ".", "oracle_belief_rewards", ":", "\n", "                        ", "belief_reward", "=", "np", ".", "array", "(", "[", "info", "[", "'belief_reward'", "]", "]", ")", "\n", "", "else", ":", "\n", "                        ", "belief_reward", "=", "self", ".", "vae", ".", "compute_belief_reward", "(", "task_mean", ",", "\n", "task_logvar", ",", "\n", "obs", "=", "obs", ",", "\n", "next_obs", "=", "next_obs", ",", "\n", "actions", "=", "action", ")", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "belief_reward", "=", "ptu", ".", "get_numpy", "(", "belief_reward", ".", "squeeze", "(", "dim", "=", "0", ")", ")", "\n", "\n", "# update encoding", "\n", "", "", "_", ",", "task_mean", ",", "task_logvar", ",", "hidden_state", "=", "self", ".", "update_encoding", "(", "obs", "=", "next_obs", ",", "\n", "action", "=", "action", ",", "\n", "reward", "=", "reward", ",", "\n", "done", "=", "done", ",", "\n", "hidden_state", "=", "hidden_state", ")", "\n", "if", "self", ".", "args", ".", "fixed_latent_params", ":", "\n", "                    ", "task_mean", "=", "ptu", ".", "FloatTensor", "(", "utl", ".", "vertices", "(", "self", ".", "args", ".", "task_embedding_size", ")", "[", "self", ".", "task_idx", "]", ")", ".", "reshape", "(", "task_mean", ".", "shape", ")", "\n", "task_logvar", "=", "-", "2.", "*", "ptu", ".", "ones_like", "(", "task_logvar", ")", "# arbitrary negative enough number", "\n", "# get augmented next obs", "\n", "", "augmented_next_obs", "=", "self", ".", "get_augmented_obs", "(", "obs", "=", "next_obs", ",", "task_mu", "=", "task_mean", ",", "task_std", "=", "task_logvar", ")", "\n", "\n", "# add data to vae buffer - (s, a, r, s', term)", "\n", "self", ".", "vae_storage", ".", "add_sample", "(", "task", "=", "self", ".", "task_idx", ",", "\n", "observation", "=", "ptu", ".", "get_numpy", "(", "obs", ".", "squeeze", "(", "dim", "=", "0", ")", ")", ",", "\n", "action", "=", "ptu", ".", "get_numpy", "(", "action", ".", "squeeze", "(", "dim", "=", "0", ")", ")", ",", "\n", "reward", "=", "ptu", ".", "get_numpy", "(", "reward", ".", "squeeze", "(", "dim", "=", "0", ")", ")", ",", "\n", "terminal", "=", "ptu", ".", "get_numpy", "(", "done", ".", "squeeze", "(", "dim", "=", "0", ")", ")", ",", "\n", "next_observation", "=", "ptu", ".", "get_numpy", "(", "next_obs", ".", "squeeze", "(", "dim", "=", "0", ")", ")", ")", "\n", "\n", "# add data to policy buffer - (s+, a, r, s'+, term)", "\n", "term", "=", "self", ".", "env", ".", "unwrapped", ".", "is_goal_state", "(", ")", "if", "\"is_goal_state\"", "in", "dir", "(", "self", ".", "env", ".", "unwrapped", ")", "else", "False", "\n", "self", ".", "policy_storage", ".", "add_sample", "(", "task", "=", "self", ".", "task_idx", ",", "\n", "observation", "=", "ptu", ".", "get_numpy", "(", "augmented_obs", ".", "squeeze", "(", "dim", "=", "0", ")", ")", ",", "\n", "action", "=", "ptu", ".", "get_numpy", "(", "action", ".", "squeeze", "(", "dim", "=", "0", ")", ")", ",", "\n", "reward", "=", "belief_reward", "if", "self", ".", "args", ".", "belief_reward", "else", "ptu", ".", "get_numpy", "(", "reward", ".", "squeeze", "(", "dim", "=", "0", ")", ")", ",", "\n", "terminal", "=", "np", ".", "array", "(", "[", "term", "]", ",", "dtype", "=", "float", ")", ",", "\n", "next_observation", "=", "ptu", ".", "get_numpy", "(", "augmented_next_obs", ".", "squeeze", "(", "dim", "=", "0", ")", ")", ")", "\n", "\n", "# set: obs <- next_obs", "\n", "obs", "=", "next_obs", ".", "clone", "(", ")", "\n", "augmented_obs", "=", "augmented_next_obs", ".", "clone", "(", ")", "\n", "\n", "# update statistics", "\n", "self", ".", "_n_env_steps_total", "+=", "1", "\n", "if", "\"is_goal_state\"", "in", "dir", "(", "self", ".", "env", ".", "unwrapped", ")", "and", "self", ".", "env", ".", "unwrapped", ".", "is_goal_state", "(", ")", ":", "# count successes", "\n", "                    ", "self", ".", "_successes_in_buffer", "+=", "1", "\n", "", "", "self", ".", "_n_rollouts_total", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.None.metalearner.MetaLearner.encode_running_episode": [[868, 897], ["metalearner.MetaLearner.vae_storage.get_running_episode", "torchkit.pytorch_utils.list_from_numpy", "metalearner.MetaLearner.vae.encoder", "[].detach().to", "[].detach().to", "[].detach().to", "[].detach().to", "[].detach", "[].detach", "[].detach", "[].detach"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.data_management.simple_replay_buffer.SimpleReplayBuffer.get_running_episode", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.list_from_numpy"], ["", "", "def", "encode_running_episode", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        (Re-)Encodes (for each process) the entire current trajectory.\n        Returns sample/mean/logvar and hidden state (if applicable) for the current timestep.\n        :param reset_task:\n        :return:\n        \"\"\"", "\n", "\n", "# get the current batch (zero-padded obs/act/rew + length indicators)", "\n", "obs", ",", "next_obs", ",", "act", ",", "rew", ",", "length", "=", "self", ".", "vae_storage", ".", "get_running_episode", "(", "task", "=", "self", ".", "task_idx", ")", "\n", "# convert numpy arrays to torch tensors", "\n", "obs", ",", "next_obs", ",", "act", ",", "rew", "=", "ptu", ".", "list_from_numpy", "(", "[", "obs", ",", "next_obs", ",", "act", ",", "rew", "]", ")", "\n", "# get embedding - will return (1+sequence_len) * batch * input_size -- includes the prior!", "\n", "all_task_samples", ",", "all_task_means", ",", "all_task_logvars", ",", "all_hidden_states", "=", "self", ".", "vae", ".", "encoder", "(", "actions", "=", "act", ",", "\n", "states", "=", "next_obs", ",", "\n", "rewards", "=", "rew", ",", "\n", "hidden_state", "=", "None", ",", "\n", "return_prior", "=", "True", ")", "\n", "\n", "# get the embedding / hidden state of the current time step (need to do this since we zero-padded)", "\n", "posterior_sample", "=", "all_task_samples", "[", "length", "]", "[", "0", "]", ".", "detach", "(", ")", ".", "to", "(", "ptu", ".", "device", ")", "\n", "task_mean", "=", "all_task_means", "[", "length", "]", "[", "0", "]", ".", "detach", "(", ")", ".", "to", "(", "ptu", ".", "device", ")", "\n", "task_logvar", "=", "all_task_logvars", "[", "length", "]", "[", "0", "]", ".", "detach", "(", ")", ".", "to", "(", "ptu", ".", "device", ")", "\n", "if", "self", ".", "args", ".", "encoder_type", "==", "'rnn'", ":", "\n", "            ", "hidden_state", "=", "all_hidden_states", "[", "length", "]", "[", "0", "]", ".", "detach", "(", ")", ".", "to", "(", "ptu", ".", "device", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "return", "posterior_sample", ",", "task_mean", ",", "task_logvar", ",", "hidden_state", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.None.metalearner.MetaLearner.update_encoding": [[898, 909], ["metalearner.MetaLearner.vae.encoder.reset_hidden", "torch.no_grad", "metalearner.MetaLearner.vae.encoder", "action.float"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.models.encoder.RNNEncoder.reset_hidden"], ["", "def", "update_encoding", "(", "self", ",", "obs", ",", "action", ",", "reward", ",", "done", ",", "hidden_state", ")", ":", "\n", "# reset hidden state of the recurrent net when the task is done", "\n", "        ", "hidden_state", "=", "self", ".", "vae", ".", "encoder", ".", "reset_hidden", "(", "hidden_state", ",", "done", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "# size should be (batch, dim)", "\n", "            ", "task_sample", ",", "task_mean", ",", "task_logvar", ",", "hidden_state", "=", "self", ".", "vae", ".", "encoder", "(", "actions", "=", "action", ".", "float", "(", ")", ",", "\n", "states", "=", "obs", ",", "\n", "rewards", "=", "reward", ",", "\n", "hidden_state", "=", "hidden_state", ",", "\n", "return_prior", "=", "False", ")", "\n", "\n", "", "return", "task_sample", ",", "task_mean", ",", "task_logvar", ",", "hidden_state", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.None.metalearner.MetaLearner.get_augmented_obs": [[910, 922], ["obs.clone", "torch.cat", "task_mu.reshape.reshape.reshape", "task_std.reshape.reshape.reshape", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.core.serializable.Serializable.clone"], ["", "def", "get_augmented_obs", "(", "self", ",", "obs", ",", "task_sample", "=", "None", ",", "task_mu", "=", "None", ",", "task_std", "=", "None", ")", ":", "\n", "\n", "        ", "augmented_obs", "=", "obs", ".", "clone", "(", ")", "\n", "\n", "if", "self", ".", "args", ".", "sample_embeddings", "and", "(", "task_sample", "is", "not", "None", ")", ":", "\n", "            ", "augmented_obs", "=", "torch", ".", "cat", "(", "(", "augmented_obs", ",", "task_sample", ")", ",", "dim", "=", "1", ")", "\n", "", "elif", "(", "task_mu", "is", "not", "None", ")", "and", "(", "task_std", "is", "not", "None", ")", ":", "\n", "            ", "task_mu", "=", "task_mu", ".", "reshape", "(", "(", "-", "1", ",", "task_mu", ".", "shape", "[", "-", "1", "]", ")", ")", "\n", "task_std", "=", "task_std", ".", "reshape", "(", "(", "-", "1", ",", "task_std", ".", "shape", "[", "-", "1", "]", ")", ")", "\n", "augmented_obs", "=", "torch", ".", "cat", "(", "(", "augmented_obs", ",", "task_mu", ",", "task_std", ")", ",", "dim", "=", "-", "1", ")", "\n", "\n", "", "return", "augmented_obs", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.None.metalearner.MetaLearner._get_augmented_obs_dim": [[923, 931], ["utils.helpers.get_dim"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.utils.helpers.get_dim"], ["", "def", "_get_augmented_obs_dim", "(", "self", ")", ":", "\n", "        ", "dim", "=", "utl", ".", "get_dim", "(", "self", ".", "env", ".", "observation_space", ")", "\n", "if", "self", ".", "args", ".", "sample_embeddings", ":", "\n", "            ", "dim", "+=", "self", ".", "args", ".", "task_embedding_size", "\n", "", "else", ":", "\n", "            ", "dim", "+=", "2", "*", "self", ".", "args", ".", "task_embedding_size", "\n", "\n", "", "return", "dim", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.None.metalearner.MetaLearner.sample_rl_batch": [[932, 942], ["torchkit.pytorch_utils.np_to_pytorch_batch", "utils.helpers.unpack_batch", "torch.cat", "metalearner.MetaLearner.policy_storage.random_batch", "range", "len"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.np_to_pytorch_batch", "home.repos.pwc.inspect_result.Rondorf_BOReL.utils.helpers.unpack_batch", "home.repos.pwc.inspect_result.Rondorf_BOReL.data_management.simple_replay_buffer.SimpleReplayBuffer.random_batch"], ["", "def", "sample_rl_batch", "(", "self", ",", "tasks", ",", "batch_size", ")", ":", "\n", "        ", "''' sample batch of unordered rl training data from a list/array of tasks '''", "\n", "# this batch consists of transitions sampled randomly from replay buffer", "\n", "batches", "=", "[", "ptu", ".", "np_to_pytorch_batch", "(", "\n", "self", ".", "policy_storage", ".", "random_batch", "(", "task", ",", "batch_size", ")", ")", "for", "task", "in", "tasks", "]", "\n", "unpacked", "=", "[", "utl", ".", "unpack_batch", "(", "batch", ")", "for", "batch", "in", "batches", "]", "\n", "# group elements together", "\n", "unpacked", "=", "[", "[", "x", "[", "i", "]", "for", "x", "in", "unpacked", "]", "for", "i", "in", "range", "(", "len", "(", "unpacked", "[", "0", "]", ")", ")", "]", "\n", "unpacked", "=", "[", "torch", ".", "cat", "(", "x", ",", "dim", "=", "0", ")", "for", "x", "in", "unpacked", "]", "\n", "return", "unpacked", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.None.metalearner.MetaLearner.sample_vae_batch": [[943, 962], ["torchkit.pytorch_utils.np_to_pytorch_batch", "utils.helpers.unpack_batch", "torch.cat().transpose", "x.reshape.reshape.reshape", "batch.append", "metalearner.MetaLearner.vae_storage.random_episodes", "x[].reshape().transpose().unsqueeze", "range", "len", "torch.cat", "x[].reshape().transpose", "x[].reshape"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.np_to_pytorch_batch", "home.repos.pwc.inspect_result.Rondorf_BOReL.utils.helpers.unpack_batch", "home.repos.pwc.inspect_result.Rondorf_BOReL.data_management.simple_replay_buffer.SimpleReplayBuffer.random_episodes"], ["", "def", "sample_vae_batch", "(", "self", ",", "tasks", ",", "rollouts_per_task", "=", "1", ")", ":", "\n", "        ", "''' sample batch of episodes for vae training from a list/array of tasks '''", "\n", "\n", "batches", "=", "[", "ptu", ".", "np_to_pytorch_batch", "(", "\n", "self", ".", "vae_storage", ".", "random_episodes", "(", "task", ",", "rollouts_per_task", ")", ")", "for", "task", "in", "tasks", "]", "\n", "unpacked", "=", "[", "utl", ".", "unpack_batch", "(", "batch", ")", "for", "batch", "in", "batches", "]", "\n", "# group elements together", "\n", "unpacked", "=", "[", "[", "x", "[", "i", "]", ".", "reshape", "(", "rollouts_per_task", ",", "-", "1", ",", "x", "[", "i", "]", ".", "shape", "[", "-", "1", "]", ")", ".", "transpose", "(", "0", ",", "1", ")", ".", "unsqueeze", "(", "dim", "=", "0", ")", "\n", "for", "x", "in", "unpacked", "]", "for", "i", "in", "range", "(", "len", "(", "unpacked", "[", "0", "]", ")", ")", "]", "\n", "batch", "=", "[", "]", "\n", "for", "x", "in", "unpacked", ":", "\n", "            ", "x", "=", "torch", ".", "cat", "(", "x", ",", "dim", "=", "0", ")", ".", "transpose", "(", "0", ",", "1", ")", "# dims: (traj_len, n_tasks, rollouts_per_task, dim)", "\n", "# x = torch.cat(x, dim=0)", "\n", "# flatten out task dim", "\n", "x", "=", "x", ".", "reshape", "(", "x", ".", "shape", "[", "0", "]", ",", "-", "1", ",", "x", ".", "shape", "[", "-", "1", "]", ")", "\n", "# append to output batch", "\n", "batch", ".", "append", "(", "x", ")", "\n", "\n", "", "return", "batch", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.None.metalearner.MetaLearner._start_training": [[963, 971], ["time.time"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjDataWrapper.time"], ["", "def", "_start_training", "(", "self", ")", ":", "\n", "        ", "self", ".", "_n_env_steps_total", "=", "0", "\n", "self", ".", "_n_rl_update_steps_total", "=", "0", "\n", "self", ".", "_n_vae_update_steps_total", "=", "0", "\n", "self", ".", "_n_rollouts_total", "=", "0", "\n", "self", ".", "_successes_in_buffer", "=", "0", "\n", "\n", "self", ".", "_start_time", "=", "time", ".", "time", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.None.metalearner.MetaLearner.load_model": [[972, 985], ["metalearner.MetaLearner.training_mode", "metalearner.MetaLearner.agent.load_state_dict", "metalearner.MetaLearner.vae.encoder.load_state_dict", "metalearner.MetaLearner.vae.reward_decoder.load_state_dict", "metalearner.MetaLearner.vae.state_decoder.load_state_dict", "metalearner.MetaLearner.vae.task_decoder.load_state_dict", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.core.rl_algorithm.MetaRLAlgorithm.training_mode", "home.repos.pwc.inspect_result.Rondorf_BOReL.envs.registration.load", "home.repos.pwc.inspect_result.Rondorf_BOReL.envs.registration.load", "home.repos.pwc.inspect_result.Rondorf_BOReL.envs.registration.load", "home.repos.pwc.inspect_result.Rondorf_BOReL.envs.registration.load", "home.repos.pwc.inspect_result.Rondorf_BOReL.envs.registration.load"], ["", "def", "load_model", "(", "self", ",", "device", "=", "'cpu'", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "\"agent_path\"", "in", "kwargs", ":", "\n", "            ", "self", ".", "agent", ".", "load_state_dict", "(", "torch", ".", "load", "(", "kwargs", "[", "\"agent_path\"", "]", ",", "map_location", "=", "device", ")", ")", "\n", "", "if", "\"encoder_path\"", "in", "kwargs", ":", "\n", "            ", "self", ".", "vae", ".", "encoder", ".", "load_state_dict", "(", "torch", ".", "load", "(", "kwargs", "[", "\"encoder_path\"", "]", ",", "map_location", "=", "device", ")", ")", "\n", "", "if", "\"reward_decoder_path\"", "in", "kwargs", "and", "self", ".", "vae", ".", "reward_decoder", "is", "not", "None", ":", "\n", "            ", "self", ".", "vae", ".", "reward_decoder", ".", "load_state_dict", "(", "torch", ".", "load", "(", "kwargs", "[", "\"reward_decoder_path\"", "]", ",", "map_location", "=", "device", ")", ")", "\n", "", "if", "\"state_decoder_path\"", "in", "kwargs", "and", "self", ".", "vae", ".", "state_decoder", "is", "not", "None", ":", "\n", "            ", "self", ".", "vae", ".", "state_decoder", ".", "load_state_dict", "(", "torch", ".", "load", "(", "kwargs", "[", "\"state_decoder_path\"", "]", ",", "map_location", "=", "device", ")", ")", "\n", "", "if", "\"task_decoder_path\"", "in", "kwargs", "and", "self", ".", "vae", ".", "task_decoder", "is", "not", "None", ":", "\n", "            ", "self", ".", "vae", ".", "task_decoder", ".", "load_state_dict", "(", "torch", ".", "load", "(", "kwargs", "[", "\"task_decoder_path\"", "]", ",", "map_location", "=", "device", ")", ")", "\n", "\n", "", "self", ".", "training_mode", "(", "False", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Rondorf_BOReL.None.train_single_agent.main": [[12, 41], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_known_args", "torchkit.pytorch_utils.set_gpu_mode", "learner.Learner", "learner.Learner.train", "data_collection_config.args_gridworld.get_args", "torch.cuda.is_available", "hasattr", "os.makedirs", "data_collection_config.args_point_robot_sparse.get_args", "data_collection_config.args_cheetah_vel.get_args", "data_collection_config.args_ant_semicircle_sparse.get_args"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.set_gpu_mode", "home.repos.pwc.inspect_result.Rondorf_BOReL.core.rl_algorithm.MetaRLAlgorithm.train", "home.repos.pwc.inspect_result.Rondorf_BOReL.data_collection_config.args_gridworld.get_args", "home.repos.pwc.inspect_result.Rondorf_BOReL.data_collection_config.args_gridworld.get_args", "home.repos.pwc.inspect_result.Rondorf_BOReL.data_collection_config.args_gridworld.get_args", "home.repos.pwc.inspect_result.Rondorf_BOReL.data_collection_config.args_gridworld.get_args"], ["def", "main", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "# parser.add_argument('--env-type', default='gridworld')", "\n", "# parser.add_argument('--env-type', default='point_robot_sparse')", "\n", "# parser.add_argument('--env-type', default='cheetah_vel')", "\n", "parser", ".", "add_argument", "(", "'--env-type'", ",", "default", "=", "'ant_semicircle_sparse'", ")", "\n", "args", ",", "rest_args", "=", "parser", ".", "parse_known_args", "(", ")", "\n", "env", "=", "args", ".", "env_type", "\n", "\n", "# --- GridWorld ---", "\n", "if", "env", "==", "'gridworld'", ":", "\n", "        ", "args", "=", "args_gridworld", ".", "get_args", "(", "rest_args", ")", "\n", "# --- PointRobot ---", "\n", "", "elif", "env", "==", "'point_robot_sparse'", ":", "\n", "        ", "args", "=", "args_point_robot_sparse", ".", "get_args", "(", "rest_args", ")", "\n", "# --- Mujoco ---", "\n", "", "elif", "env", "==", "'cheetah_vel'", ":", "\n", "        ", "args", "=", "args_cheetah_vel", ".", "get_args", "(", "rest_args", ")", "\n", "", "elif", "env", "==", "'ant_semicircle_sparse'", ":", "\n", "        ", "args", "=", "args_ant_semicircle_sparse", ".", "get_args", "(", "rest_args", ")", "\n", "\n", "", "set_gpu_mode", "(", "torch", ".", "cuda", ".", "is_available", "(", ")", ")", "\n", "\n", "if", "hasattr", "(", "args", ",", "'save_buffer'", ")", "and", "args", ".", "save_buffer", ":", "\n", "        ", "os", ".", "makedirs", "(", "args", ".", "main_save_dir", ",", "exist_ok", "=", "True", ")", "\n", "\n", "", "learner", "=", "Learner", "(", "args", ")", "\n", "\n", "learner", ".", "train", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.None.learner.Learner.__init__": [[25, 103], ["utils.helpers.seed", "environments.make_env.make_env", "isinstance", "unwrapped_env.step", "learner.Learner.initialize_policy", "data_management.storage_policy.MultiTaskPolicyStorage", "hasattr", "os.path.join", "os.path.join", "os.makedirs", "utils.save_config_file", "utils.tb_logger.TBLogger", "hasattr", "unwrapped_env.action_space.sample", "list", "reward_type.startswith", "int", "utils.offline_utils.create_goal_path_ext_from_goal", "info.keys", "len"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.seed", "home.repos.pwc.inspect_result.Rondorf_BOReL.environments.make_env.make_env", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.step", "home.repos.pwc.inspect_result.Rondorf_BOReL.None.learner.Learner.initialize_policy", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.join", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.join", "home.repos.pwc.inspect_result.Rondorf_BOReL.utils.config_utils.save_config_file", "home.repos.pwc.inspect_result.Rondorf_BOReL.spaces.discrete.Discrete.sample", "home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.ListableAPIResource.list", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.startswith", "home.repos.pwc.inspect_result.Rondorf_BOReL.utils.offline_utils.create_goal_path_ext_from_goal"], ["def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "\"\"\"\n        Seeds everything.\n        Initialises: logger, environments, policy (+storage +optimiser).\n        \"\"\"", "\n", "\n", "self", ".", "args", "=", "args", "\n", "\n", "# make sure everything has the same seed", "\n", "utl", ".", "seed", "(", "self", ".", "args", ".", "seed", ")", "\n", "\n", "# initialise environment", "\n", "self", ".", "env", "=", "make_env", "(", "self", ".", "args", ".", "env_name", ",", "\n", "self", ".", "args", ".", "max_rollouts_per_task", ",", "\n", "seed", "=", "self", ".", "args", ".", "seed", ",", "\n", "n_tasks", "=", "1", ",", "\n", "modify_init_state_dist", "=", "self", ".", "args", ".", "modify_init_state_dist", "\n", "if", "'modify_init_state_dist'", "in", "self", ".", "args", "else", "False", ",", "\n", "on_circle_init_state", "=", "self", ".", "args", ".", "on_circle_init_state", "\n", "if", "'on_circle_init_state'", "in", "self", ".", "args", "else", "True", ")", "\n", "\n", "# saving buffer with task in name folder", "\n", "if", "hasattr", "(", "self", ".", "args", ",", "'save_buffer'", ")", "and", "self", ".", "args", ".", "save_buffer", ":", "\n", "            ", "env_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "args", ".", "main_save_dir", ",", "\n", "'{}'", ".", "format", "(", "self", ".", "args", ".", "env_name", ")", ")", "\n", "goal", "=", "self", ".", "env", ".", "unwrapped", ".", "_goal", "\n", "self", ".", "output_dir", "=", "os", ".", "path", ".", "join", "(", "env_dir", ",", "self", ".", "args", ".", "save_dir", ",", "'seed_{}_'", ".", "format", "(", "self", ".", "args", ".", "seed", ")", "+", "\n", "off_utl", ".", "create_goal_path_ext_from_goal", "(", "goal", ")", ")", "\n", "\n", "", "if", "self", ".", "args", ".", "save_models", "or", "self", ".", "args", ".", "save_buffer", ":", "\n", "            ", "os", ".", "makedirs", "(", "self", ".", "output_dir", ",", "exist_ok", "=", "True", ")", "\n", "config_utl", ".", "save_config_file", "(", "args", ",", "self", ".", "output_dir", ")", "\n", "\n", "# initialize tensorboard logger", "\n", "", "if", "self", ".", "args", ".", "log_tensorboard", ":", "\n", "            ", "self", ".", "tb_logger", "=", "TBLogger", "(", "self", ".", "args", ")", "\n", "\n", "# if not self.args.log_tensorboard:", "\n", "#     self.save_config_json_file()", "\n", "# unwrapped env to get some info about the environment", "\n", "", "unwrapped_env", "=", "self", ".", "env", ".", "unwrapped", "\n", "\n", "# calculate what the maximum length of the trajectories is", "\n", "args", ".", "max_trajectory_len", "=", "unwrapped_env", ".", "_max_episode_steps", "\n", "args", ".", "max_trajectory_len", "*=", "self", ".", "args", ".", "max_rollouts_per_task", "\n", "self", ".", "args", ".", "max_trajectory_len", "=", "args", ".", "max_trajectory_len", "\n", "\n", "# get action / observation dimensions", "\n", "if", "isinstance", "(", "self", ".", "env", ".", "action_space", ",", "gym", ".", "spaces", ".", "discrete", ".", "Discrete", ")", ":", "\n", "            ", "self", ".", "args", ".", "action_dim", "=", "1", "\n", "", "else", ":", "\n", "            ", "self", ".", "args", ".", "action_dim", "=", "self", ".", "env", ".", "action_space", ".", "shape", "[", "0", "]", "\n", "", "self", ".", "args", ".", "obs_dim", "=", "self", ".", "env", ".", "observation_space", ".", "shape", "[", "0", "]", "\n", "self", ".", "args", ".", "num_states", "=", "unwrapped_env", ".", "num_states", "if", "hasattr", "(", "unwrapped_env", ",", "'num_states'", ")", "else", "None", "\n", "self", ".", "args", ".", "act_space", "=", "self", ".", "env", ".", "action_space", "\n", "\n", "# simulate env step to get reward types", "\n", "_", ",", "_", ",", "_", ",", "info", "=", "unwrapped_env", ".", "step", "(", "unwrapped_env", ".", "action_space", ".", "sample", "(", ")", ")", "\n", "reward_types", "=", "[", "reward_type", "for", "reward_type", "in", "list", "(", "info", ".", "keys", "(", ")", ")", "if", "reward_type", ".", "startswith", "(", "'reward'", ")", "]", "\n", "\n", "# support dense rewards training (if exists)", "\n", "self", ".", "args", ".", "dense_train_sparse_test", "=", "self", ".", "args", ".", "dense_train_sparse_test", "if", "'dense_train_sparse_test'", "in", "self", ".", "args", "else", "False", "\n", "\n", "# initialize policy", "\n", "self", ".", "initialize_policy", "(", ")", "\n", "# initialize buffer for RL updates", "\n", "self", ".", "policy_storage", "=", "MultiTaskPolicyStorage", "(", "\n", "max_replay_buffer_size", "=", "int", "(", "self", ".", "args", ".", "policy_buffer_size", ")", ",", "\n", "obs_dim", "=", "self", ".", "args", ".", "obs_dim", ",", "\n", "action_space", "=", "self", ".", "env", ".", "action_space", ",", "\n", "tasks", "=", "[", "0", "]", ",", "\n", "trajectory_len", "=", "args", ".", "max_trajectory_len", ",", "\n", "num_reward_arrays", "=", "len", "(", "reward_types", ")", "if", "reward_types", "and", "self", ".", "args", ".", "dense_train_sparse_test", "else", "1", ",", "\n", "reward_types", "=", "reward_types", ",", "\n", ")", "\n", "\n", "self", ".", "args", ".", "belief_reward", "=", "False", "# initialize arg to not use belief rewards", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.None.learner.Learner.initialize_policy": [[104, 168], ["torchkit.networks.FlattenMlp", "algorithms.dqn.DQN().to", "torchkit.networks.FlattenMlp", "torchkit.networks.FlattenMlp", "models.policy.TanhGaussianPolicy", "algorithms.sac.SAC().to", "algorithms.dqn.DQN", "algorithms.sac.SAC"], "methods", ["None"], ["", "def", "initialize_policy", "(", "self", ")", ":", "\n", "\n", "        ", "if", "self", ".", "args", ".", "policy", "==", "'dqn'", ":", "\n", "            ", "assert", "self", ".", "args", ".", "act_space", ".", "__class__", ".", "__name__", "==", "\"Discrete\"", ",", "(", "\n", "\"Can't train DQN with continuous action space!\"", ")", "\n", "q_network", "=", "FlattenMlp", "(", "input_size", "=", "self", ".", "args", ".", "obs_dim", ",", "\n", "output_size", "=", "self", ".", "args", ".", "act_space", ".", "n", ",", "\n", "hidden_sizes", "=", "self", ".", "args", ".", "dqn_layers", ")", "\n", "self", ".", "agent", "=", "DQN", "(", "\n", "q_network", ",", "\n", "# optimiser_vae=self.optimizer_vae,", "\n", "lr", "=", "self", ".", "args", ".", "policy_lr", ",", "\n", "gamma", "=", "self", ".", "args", ".", "gamma", ",", "\n", "eps_init", "=", "self", ".", "args", ".", "dqn_epsilon_init", ",", "\n", "eps_final", "=", "self", ".", "args", ".", "dqn_epsilon_final", ",", "\n", "exploration_iters", "=", "self", ".", "args", ".", "dqn_exploration_iters", ",", "\n", "tau", "=", "self", ".", "args", ".", "soft_target_tau", ",", "\n", ")", ".", "to", "(", "ptu", ".", "device", ")", "\n", "# elif self.args.policy == 'ddqn':", "\n", "#     assert self.args.act_space.__class__.__name__ == \"Discrete\", (", "\n", "#         \"Can't train DDQN with continuous action space!\")", "\n", "#     q_network = FlattenMlp(input_size=self.args.obs_dim,", "\n", "#                            output_size=self.args.act_space.n,", "\n", "#                            hidden_sizes=self.args.dqn_layers)", "\n", "#     self.agent = DoubleDQN(", "\n", "#         q_network,", "\n", "#         # optimiser_vae=self.optimizer_vae,", "\n", "#         lr=self.args.policy_lr,", "\n", "#         eps_optim=self.args.dqn_eps,", "\n", "#         alpha_optim=self.args.dqn_alpha,", "\n", "#         gamma=self.args.gamma,", "\n", "#         eps_init=self.args.dqn_epsilon_init,", "\n", "#         eps_final=self.args.dqn_epsilon_final,", "\n", "#         exploration_iters=self.args.dqn_exploration_iters,", "\n", "#         tau=self.args.soft_target_tau,", "\n", "#     ).to(ptu.device)", "\n", "", "elif", "self", ".", "args", ".", "policy", "==", "'sac'", ":", "\n", "            ", "assert", "self", ".", "args", ".", "act_space", ".", "__class__", ".", "__name__", "==", "\"Box\"", ",", "(", "\n", "\"Can't train SAC with discrete action space!\"", ")", "\n", "q1_network", "=", "FlattenMlp", "(", "input_size", "=", "self", ".", "args", ".", "obs_dim", "+", "self", ".", "args", ".", "action_dim", ",", "\n", "output_size", "=", "1", ",", "\n", "hidden_sizes", "=", "self", ".", "args", ".", "dqn_layers", ")", "\n", "q2_network", "=", "FlattenMlp", "(", "input_size", "=", "self", ".", "args", ".", "obs_dim", "+", "self", ".", "args", ".", "action_dim", ",", "\n", "output_size", "=", "1", ",", "\n", "hidden_sizes", "=", "self", ".", "args", ".", "dqn_layers", ")", "\n", "policy", "=", "TanhGaussianPolicy", "(", "obs_dim", "=", "self", ".", "args", ".", "obs_dim", ",", "\n", "action_dim", "=", "self", ".", "args", ".", "action_dim", ",", "\n", "hidden_sizes", "=", "self", ".", "args", ".", "policy_layers", ")", "\n", "self", ".", "agent", "=", "SAC", "(", "\n", "policy", ",", "\n", "q1_network", ",", "\n", "q2_network", ",", "\n", "\n", "actor_lr", "=", "self", ".", "args", ".", "actor_lr", ",", "\n", "critic_lr", "=", "self", ".", "args", ".", "critic_lr", ",", "\n", "gamma", "=", "self", ".", "args", ".", "gamma", ",", "\n", "tau", "=", "self", ".", "args", ".", "soft_target_tau", ",", "\n", "\n", "entropy_alpha", "=", "self", ".", "args", ".", "entropy_alpha", ",", "\n", "automatic_entropy_tuning", "=", "self", ".", "args", ".", "automatic_entropy_tuning", ",", "\n", "alpha_lr", "=", "self", ".", "args", ".", "alpha_lr", "\n", ")", ".", "to", "(", "ptu", ".", "device", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.None.learner.Learner.train": [[169, 196], ["learner.Learner._start_training", "range", "learner.Learner.training_mode", "learner.Learner.env.reset_task", "learner.Learner.collect_rollouts", "learner.Learner.update", "learner.Learner.training_mode", "print", "learner.Learner.env.reset_task", "learner.Learner.collect_rollouts", "print", "learner.Learner.agent.set_exploration_parameter", "learner.Learner.log"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.None.learner.Learner._start_training", "home.repos.pwc.inspect_result.Rondorf_BOReL.core.rl_algorithm.MetaRLAlgorithm.training_mode", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.reset_task", "home.repos.pwc.inspect_result.Rondorf_BOReL.None.learner.Learner.collect_rollouts", "home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.GymObject.update", "home.repos.pwc.inspect_result.Rondorf_BOReL.core.rl_algorithm.MetaRLAlgorithm.training_mode", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.reset_task", "home.repos.pwc.inspect_result.Rondorf_BOReL.None.learner.Learner.collect_rollouts", "home.repos.pwc.inspect_result.Rondorf_BOReL.algorithms.dqn.DQN.set_exploration_parameter", "home.repos.pwc.inspect_result.Rondorf_BOReL.core.logger.log"], ["", "", "def", "train", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        meta-training loop\n        \"\"\"", "\n", "\n", "self", ".", "_start_training", "(", ")", "\n", "self", ".", "task_idx", "=", "0", "\n", "for", "iter_", "in", "range", "(", "self", ".", "args", ".", "num_iters", ")", ":", "\n", "            ", "self", ".", "training_mode", "(", "True", ")", "\n", "if", "iter_", "==", "0", ":", "\n", "                ", "print", "(", "'Collecting initial pool of data..'", ")", "\n", "self", ".", "env", ".", "reset_task", "(", "idx", "=", "self", ".", "task_idx", ")", "\n", "self", ".", "collect_rollouts", "(", "num_rollouts", "=", "self", ".", "args", ".", "num_init_rollouts_pool", ",", "random_actions", "=", "True", ")", "\n", "print", "(", "'Done!'", ")", "\n", "# collect data from subset of train tasks", "\n", "\n", "", "self", ".", "env", ".", "reset_task", "(", "idx", "=", "self", ".", "task_idx", ")", "\n", "self", ".", "collect_rollouts", "(", "num_rollouts", "=", "self", ".", "args", ".", "num_rollouts_per_iter", ")", "\n", "# update", "\n", "train_stats", "=", "self", ".", "update", "(", "[", "self", ".", "task_idx", "]", ")", "\n", "self", ".", "training_mode", "(", "False", ")", "\n", "\n", "if", "self", ".", "args", ".", "policy", "==", "'dqn'", ":", "\n", "                ", "self", ".", "agent", ".", "set_exploration_parameter", "(", "iter_", "+", "1", ")", "\n", "# evaluate and log", "\n", "", "if", "(", "iter_", "+", "1", ")", "%", "self", ".", "args", ".", "log_interval", "==", "0", ":", "\n", "                ", "self", ".", "log", "(", "iter_", "+", "1", ",", "train_stats", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.None.learner.Learner.update": [[197, 231], ["range", "learner.Learner.sample_rl_batch", "obs.view.view.size", "obs.view.view.view", "actions.view.view.view", "rewards.view.view.view", "next_obs.view.view.view", "terms.view.view.view", "learner.Learner.agent.update", "learner.Learner.items", "numpy.mean", "rl_losses_agg[].append"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.None.learner.Learner.sample_rl_batch", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjvGeomWrapper.size", "home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.GymObject.update"], ["", "", "", "def", "update", "(", "self", ",", "tasks", ")", ":", "\n", "        ", "'''\n        RL updates\n        :param tasks: list/array of task indices. perform update based on the tasks\n        :return:\n        '''", "\n", "\n", "# --- RL TRAINING ---", "\n", "rl_losses_agg", "=", "{", "}", "\n", "for", "update", "in", "range", "(", "self", ".", "args", ".", "rl_updates_per_iter", ")", ":", "\n", "# sample random RL batch", "\n", "            ", "obs", ",", "actions", ",", "rewards", ",", "next_obs", ",", "terms", "=", "self", ".", "sample_rl_batch", "(", "tasks", ",", "self", ".", "args", ".", "batch_size", ")", "\n", "# flatten out task dimension", "\n", "t", ",", "b", ",", "_", "=", "obs", ".", "size", "(", ")", "\n", "obs", "=", "obs", ".", "view", "(", "t", "*", "b", ",", "-", "1", ")", "\n", "actions", "=", "actions", ".", "view", "(", "t", "*", "b", ",", "-", "1", ")", "\n", "rewards", "=", "rewards", ".", "view", "(", "t", "*", "b", ",", "-", "1", ")", "\n", "next_obs", "=", "next_obs", ".", "view", "(", "t", "*", "b", ",", "-", "1", ")", "\n", "terms", "=", "terms", ".", "view", "(", "t", "*", "b", ",", "-", "1", ")", "\n", "\n", "# RL update", "\n", "rl_losses", "=", "self", ".", "agent", ".", "update", "(", "obs", ",", "actions", ",", "rewards", ",", "next_obs", ",", "terms", ")", "\n", "\n", "for", "k", ",", "v", "in", "rl_losses", ".", "items", "(", ")", ":", "\n", "                ", "if", "update", "==", "0", ":", "# first iterate - create list", "\n", "                    ", "rl_losses_agg", "[", "k", "]", "=", "[", "v", "]", "\n", "", "else", ":", "# append values", "\n", "                    ", "rl_losses_agg", "[", "k", "]", ".", "append", "(", "v", ")", "\n", "# take mean", "\n", "", "", "", "for", "k", "in", "rl_losses_agg", ":", "\n", "            ", "rl_losses_agg", "[", "k", "]", "=", "np", ".", "mean", "(", "rl_losses_agg", "[", "k", "]", ")", "\n", "", "self", ".", "_n_rl_update_steps_total", "+=", "self", ".", "args", ".", "rl_updates_per_iter", "\n", "\n", "return", "rl_losses_agg", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.None.learner.Learner.evaluate": [[232, 286], ["numpy.zeros", "numpy.zeros", "enumerate", "len", "numpy.zeros", "numpy.zeros", "numpy.zeros", "torchkit.pytorch_utils.from_numpy", "next_obs.clone.reshape", "range", "len", "learner.Learner.env.reset", "torchkit.pytorch_utils.get_numpy", "range", "len", "len", "len", "utils.helpers.env_step", "reward.item", "next_obs.clone", "learner.Learner.agent.act", "learner.Learner.agent.act", "action.squeeze", "value.item", "torchkit.pytorch_utils.get_numpy", "torchkit.pytorch_utils.get_numpy", "learner.Learner.env.unwrapped.is_goal_state", "dir"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.zeros", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.zeros", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.zeros", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.zeros", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.zeros", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.from_numpy", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.reset", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.get_numpy", "home.repos.pwc.inspect_result.Rondorf_BOReL.utils.helpers.env_step", "home.repos.pwc.inspect_result.Rondorf_BOReL.core.serializable.Serializable.clone", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjDataWrapper.act", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjDataWrapper.act", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.get_numpy", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.get_numpy", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.is_goal_state", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjvLightWrapper.dir"], ["", "def", "evaluate", "(", "self", ",", "tasks", ")", ":", "\n", "        ", "num_episodes", "=", "self", ".", "args", ".", "max_rollouts_per_task", "\n", "num_steps_per_episode", "=", "self", ".", "env", ".", "unwrapped", ".", "_max_episode_steps", "\n", "\n", "returns_per_episode", "=", "np", ".", "zeros", "(", "(", "len", "(", "tasks", ")", ",", "num_episodes", ")", ")", "\n", "success_rate", "=", "np", ".", "zeros", "(", "len", "(", "tasks", ")", ")", "\n", "\n", "if", "self", ".", "args", ".", "policy", "==", "'dqn'", ":", "\n", "            ", "values", "=", "np", ".", "zeros", "(", "(", "len", "(", "tasks", ")", ",", "self", ".", "args", ".", "max_trajectory_len", ")", ")", "\n", "", "else", ":", "\n", "            ", "obs_size", "=", "self", ".", "env", ".", "unwrapped", ".", "observation_space", ".", "shape", "[", "0", "]", "\n", "observations", "=", "np", ".", "zeros", "(", "(", "len", "(", "tasks", ")", ",", "self", ".", "args", ".", "max_trajectory_len", "+", "1", ",", "obs_size", ")", ")", "\n", "log_probs", "=", "np", ".", "zeros", "(", "(", "len", "(", "tasks", ")", ",", "self", ".", "args", ".", "max_trajectory_len", ")", ")", "\n", "\n", "", "for", "task_idx", ",", "task", "in", "enumerate", "(", "tasks", ")", ":", "\n", "\n", "            ", "obs", "=", "ptu", ".", "from_numpy", "(", "self", ".", "env", ".", "reset", "(", "task", ")", ")", "\n", "obs", "=", "obs", ".", "reshape", "(", "-", "1", ",", "obs", ".", "shape", "[", "-", "1", "]", ")", "\n", "step", "=", "0", "\n", "\n", "if", "self", ".", "args", ".", "policy", "==", "'sac'", ":", "\n", "                ", "observations", "[", "task_idx", ",", "step", ",", ":", "]", "=", "ptu", ".", "get_numpy", "(", "obs", "[", "0", ",", ":", "obs_size", "]", ")", "\n", "\n", "", "for", "episode_idx", "in", "range", "(", "num_episodes", ")", ":", "\n", "                ", "running_reward", "=", "0.", "\n", "for", "step_idx", "in", "range", "(", "num_steps_per_episode", ")", ":", "\n", "# add distribution parameters to observation - policy is conditioned on posterior", "\n", "                    ", "if", "self", ".", "args", ".", "policy", "==", "'dqn'", ":", "\n", "                        ", "action", ",", "value", "=", "self", ".", "agent", ".", "act", "(", "obs", "=", "obs", ",", "deterministic", "=", "True", ")", "\n", "", "else", ":", "\n", "                        ", "action", ",", "_", ",", "_", ",", "log_prob", "=", "self", ".", "agent", ".", "act", "(", "obs", "=", "obs", ",", "\n", "deterministic", "=", "self", ".", "args", ".", "eval_deterministic", ",", "\n", "return_log_prob", "=", "True", ")", "\n", "# observe reward and next obs", "\n", "", "next_obs", ",", "reward", ",", "done", ",", "info", "=", "utl", ".", "env_step", "(", "self", ".", "env", ",", "action", ".", "squeeze", "(", "dim", "=", "0", ")", ")", "\n", "running_reward", "+=", "reward", ".", "item", "(", ")", "\n", "if", "self", ".", "args", ".", "policy", "==", "'dqn'", ":", "\n", "                        ", "values", "[", "task_idx", ",", "step", "]", "=", "value", ".", "item", "(", ")", "\n", "", "else", ":", "\n", "                        ", "observations", "[", "task_idx", ",", "step", "+", "1", ",", ":", "]", "=", "ptu", ".", "get_numpy", "(", "next_obs", "[", "0", ",", ":", "obs_size", "]", ")", "\n", "log_probs", "[", "task_idx", ",", "step", "]", "=", "ptu", ".", "get_numpy", "(", "log_prob", "[", "0", "]", ")", "\n", "\n", "", "if", "\"is_goal_state\"", "in", "dir", "(", "self", ".", "env", ".", "unwrapped", ")", "and", "self", ".", "env", ".", "unwrapped", ".", "is_goal_state", "(", ")", ":", "\n", "                        ", "success_rate", "[", "task_idx", "]", "=", "1.", "\n", "# set: obs <- next_obs", "\n", "", "obs", "=", "next_obs", ".", "clone", "(", ")", "\n", "step", "+=", "1", "\n", "\n", "", "returns_per_episode", "[", "task_idx", ",", "episode_idx", "]", "=", "running_reward", "\n", "\n", "", "", "if", "self", ".", "args", ".", "policy", "==", "'dqn'", ":", "\n", "            ", "return", "returns_per_episode", ",", "success_rate", ",", "values", "\n", "", "else", ":", "\n", "            ", "return", "returns_per_episode", ",", "success_rate", ",", "log_probs", ",", "observations", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.None.learner.Learner.log": [[287, 430], ["print", "learner.Learner.evaluate", "learner.Learner.evaluate", "learner.Learner.tb_logger.writer.add_scalar", "torch.save", "hasattr", "learner.Learner.save_buffer", "range", "learner.Learner.tb_logger.writer.add_scalar", "learner.Learner.tb_logger.writer.add_scalar", "learner.Learner.tb_logger.writer.add_scalar", "learner.Learner.tb_logger.writer.add_scalar", "learner.Learner.tb_logger.writer.add_scalar", "learner.Learner.tb_logger.writer.add_scalar", "learner.Learner.tb_logger.writer.add_scalar", "learner.Learner.tb_logger.writer.add_scalar", "learner.Learner.tb_logger.writer.add_scalar", "learner.Learner.tb_logger.writer.add_scalar", "learner.Learner.tb_logger.writer.add_scalar", "learner.Learner.tb_logger.writer.add_scalar", "learner.Learner.tb_logger.writer.add_scalar", "learner.Learner.tb_logger.writer.add_scalar", "learner.Learner.tb_logger.writer.add_scalar", "learner.Learner.tb_logger.writer.add_scalar", "learner.Learner.tb_logger.writer.add_scalar", "learner.Learner.tb_logger.writer.add_scalar", "learner.Learner.tb_logger.writer.add_scalar", "learner.Learner.tb_logger.writer.add_scalar", "learner.Learner.tb_logger.writer.add_scalar", "learner.Learner.tb_logger.writer.add_scalar", "learner.Learner.tb_logger.writer.add_scalar", "numpy.mean", "numpy.mean", "int", "os.path.join", "os.path.join", "os.path.exists", "os.mkdir", "learner.Learner.agent.state_dict", "os.path.join", "learner.Learner.tb_logger.writer.add_scalar", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.std", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "[].mean", "list", "learner.Learner.tb_logger.writer.add_scalar", "[].mean", "list", "learner.Learner.tb_logger.writer.add_scalar", "[].mean", "list", "learner.Learner.tb_logger.writer.add_scalar", "[].mean", "list", "learner.Learner.tb_logger.writer.add_scalar", "[].mean", "list", "learner.Learner.tb_logger.writer.add_scalar", "[].mean", "list", "learner.Learner.tb_logger.writer.add_scalar", "[].mean", "list", "learner.Learner.tb_logger.writer.add_scalar", "numpy.sum", "numpy.mean", "numpy.sum", "learner.Learner.agent.qf.parameters", "sum", "learner.Learner.agent.target_qf.parameters", "sum", "learner.Learner.agent.qf1.parameters", "sum", "learner.Learner.agent.qf1_target.parameters", "sum", "learner.Learner.agent.qf2.parameters", "sum", "learner.Learner.agent.qf2_target.parameters", "sum", "learner.Learner.agent.policy.parameters", "sum", "time.time", "list", "list", "list", "list", "list", "list", "list", "list", "learner.Learner.agent.qf.parameters", "param_list[].grad.mean", "list", "learner.Learner.agent.target_qf.parameters", "param_list[].grad.mean", "list", "learner.Learner.agent.qf1.parameters", "param_list[].grad.mean", "list", "learner.Learner.agent.qf1_target.parameters", "param_list[].grad.mean", "list", "learner.Learner.agent.qf2.parameters", "param_list[].grad.mean", "list", "learner.Learner.agent.qf2_target.parameters", "param_list[].grad.mean", "list", "learner.Learner.agent.policy.parameters", "param_list[].grad.mean", "int", "learner.Learner.agent.qf.parameters", "range", "learner.Learner.agent.target_qf.parameters", "range", "learner.Learner.agent.qf1.parameters", "range", "learner.Learner.agent.qf1_target.parameters", "range", "learner.Learner.agent.qf2.parameters", "range", "learner.Learner.agent.qf2_target.parameters", "range", "learner.Learner.agent.policy.parameters", "range", "len", "len", "len", "len", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.core.rl_algorithm.MetaRLAlgorithm.evaluate", "home.repos.pwc.inspect_result.Rondorf_BOReL.core.rl_algorithm.MetaRLAlgorithm.evaluate", "home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.UpdateableAPIResource.save", "home.repos.pwc.inspect_result.Rondorf_BOReL.None.learner.Learner.save_buffer", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.join", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.join", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.join", "home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.ListableAPIResource.list", "home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.ListableAPIResource.list", "home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.ListableAPIResource.list", "home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.ListableAPIResource.list", "home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.ListableAPIResource.list", "home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.ListableAPIResource.list", "home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.ListableAPIResource.list", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjDataWrapper.time", "home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.ListableAPIResource.list", "home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.ListableAPIResource.list", "home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.ListableAPIResource.list", "home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.ListableAPIResource.list", "home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.ListableAPIResource.list", "home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.ListableAPIResource.list", "home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.ListableAPIResource.list", "home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.ListableAPIResource.list", "home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.ListableAPIResource.list", "home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.ListableAPIResource.list", "home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.ListableAPIResource.list", "home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.ListableAPIResource.list", "home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.ListableAPIResource.list", "home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.ListableAPIResource.list"], ["", "", "def", "log", "(", "self", ",", "iteration", ",", "train_stats", ")", ":", "\n", "# --- save models ---", "\n", "        ", "if", "iteration", "%", "self", ".", "args", ".", "save_interval", "==", "0", ":", "\n", "            ", "if", "self", ".", "args", ".", "save_models", ":", "\n", "                ", "if", "self", ".", "args", ".", "log_tensorboard", ":", "\n", "                    ", "save_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "tb_logger", ".", "full_output_folder", ",", "'models'", ")", "\n", "", "else", ":", "\n", "                    ", "save_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "output_dir", ",", "'models'", ")", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "save_path", ")", ":", "\n", "                    ", "os", ".", "mkdir", "(", "save_path", ")", "\n", "", "torch", ".", "save", "(", "self", ".", "agent", ".", "state_dict", "(", ")", ",", "os", ".", "path", ".", "join", "(", "save_path", ",", "\"agent{0}.pt\"", ".", "format", "(", "iteration", ")", ")", ")", "\n", "", "if", "hasattr", "(", "self", ".", "args", ",", "'save_buffer'", ")", "and", "self", ".", "args", ".", "save_buffer", ":", "\n", "                ", "self", ".", "save_buffer", "(", ")", "\n", "# evaluate to get more stats", "\n", "", "", "if", "self", ".", "args", ".", "policy", "==", "'dqn'", ":", "\n", "# get stats on train tasks", "\n", "            ", "returns_train", ",", "success_rate_train", ",", "values", "=", "self", ".", "evaluate", "(", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "# get stats on train tasks", "\n", "            ", "returns_train", ",", "success_rate_train", ",", "log_probs", ",", "observations", "=", "self", ".", "evaluate", "(", "[", "0", "]", ")", "\n", "\n", "", "if", "self", ".", "args", ".", "log_tensorboard", ":", "\n", "            ", "if", "self", ".", "args", ".", "policy", "!=", "'dqn'", ":", "\n", "#     self.env.reset(0)", "\n", "#     self.tb_logger.writer.add_figure('policy_vis_train/task_0',", "\n", "#                                      utl_eval.plot_rollouts(observations[0, :], self.env),", "\n", "#                                      self._n_env_steps_total)", "\n", "#     obs, _, _, _, _ = self.sample_rl_batch(tasks=[0],", "\n", "#                                            batch_size=self.policy_storage.task_buffers[0].size())", "\n", "#     self.tb_logger.writer.add_figure('state_space_coverage/task_0',", "\n", "#                                      utl_eval.plot_visited_states(ptu.get_numpy(obs[0][:, :2]), self.env),", "\n", "#                                      self._n_env_steps_total)", "\n", "                ", "pass", "\n", "# some metrics", "\n", "", "self", ".", "tb_logger", ".", "writer", ".", "add_scalar", "(", "'metrics/successes_in_buffer'", ",", "\n", "self", ".", "_successes_in_buffer", "/", "self", ".", "_n_env_steps_total", ",", "\n", "self", ".", "_n_env_steps_total", ")", "\n", "\n", "if", "self", ".", "args", ".", "max_rollouts_per_task", ">", "1", ":", "\n", "                ", "for", "episode_idx", "in", "range", "(", "self", ".", "args", ".", "max_rollouts_per_task", ")", ":", "\n", "                    ", "self", ".", "tb_logger", ".", "writer", ".", "add_scalar", "(", "'returns_multi_episode/episode_{}'", ".", "\n", "format", "(", "episode_idx", "+", "1", ")", ",", "\n", "np", ".", "mean", "(", "returns_train", "[", ":", ",", "episode_idx", "]", ")", ",", "\n", "self", ".", "_n_env_steps_total", ")", "\n", "", "self", ".", "tb_logger", ".", "writer", ".", "add_scalar", "(", "'returns_multi_episode/sum'", ",", "\n", "np", ".", "mean", "(", "np", ".", "sum", "(", "returns_train", ",", "axis", "=", "-", "1", ")", ")", ",", "\n", "self", ".", "_n_env_steps_total", ")", "\n", "self", ".", "tb_logger", ".", "writer", ".", "add_scalar", "(", "'returns_multi_episode/success_rate'", ",", "\n", "np", ".", "mean", "(", "success_rate_train", ")", ",", "\n", "self", ".", "_n_env_steps_total", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "tb_logger", ".", "writer", ".", "add_scalar", "(", "'returns/returns_mean_train'", ",", "np", ".", "mean", "(", "returns_train", ")", ",", "\n", "self", ".", "_n_env_steps_total", ")", "\n", "self", ".", "tb_logger", ".", "writer", ".", "add_scalar", "(", "'returns/returns_std_train'", ",", "np", ".", "std", "(", "returns_train", ")", ",", "\n", "self", ".", "_n_env_steps_total", ")", "\n", "self", ".", "tb_logger", ".", "writer", ".", "add_scalar", "(", "'returns/success_rate_train'", ",", "np", ".", "mean", "(", "success_rate_train", ")", ",", "\n", "self", ".", "_n_env_steps_total", ")", "\n", "# policy", "\n", "", "if", "self", ".", "args", ".", "policy", "==", "'dqn'", ":", "\n", "                ", "self", ".", "tb_logger", ".", "writer", ".", "add_scalar", "(", "'policy/value_init'", ",", "np", ".", "mean", "(", "values", "[", ":", ",", "0", "]", ")", ",", "self", ".", "_n_env_steps_total", ")", "\n", "self", ".", "tb_logger", ".", "writer", ".", "add_scalar", "(", "'policy/value_halfway'", ",", "np", ".", "mean", "(", "values", "[", ":", ",", "int", "(", "values", ".", "shape", "[", "-", "1", "]", "/", "2", ")", "]", ")", ",", "self", ".", "_n_env_steps_total", ")", "\n", "self", ".", "tb_logger", ".", "writer", ".", "add_scalar", "(", "'policy/value_final'", ",", "np", ".", "mean", "(", "values", "[", ":", ",", "-", "1", "]", ")", ",", "self", ".", "_n_env_steps_total", ")", "\n", "\n", "self", ".", "tb_logger", ".", "writer", ".", "add_scalar", "(", "'policy/exploration_epsilon'", ",", "self", ".", "agent", ".", "eps", ",", "self", ".", "_n_env_steps_total", ")", "\n", "# RL losses", "\n", "self", ".", "tb_logger", ".", "writer", ".", "add_scalar", "(", "'rl_losses/qf_loss_vs_n_updates'", ",", "train_stats", "[", "'qf_loss'", "]", ",", "\n", "self", ".", "_n_rl_update_steps_total", ")", "\n", "self", ".", "tb_logger", ".", "writer", ".", "add_scalar", "(", "'rl_losses/qf_loss_vs_n_env_steps'", ",", "train_stats", "[", "'qf_loss'", "]", ",", "\n", "self", ".", "_n_env_steps_total", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "tb_logger", ".", "writer", ".", "add_scalar", "(", "'policy/log_prob'", ",", "np", ".", "mean", "(", "log_probs", ")", ",", "self", ".", "_n_env_steps_total", ")", "\n", "self", ".", "tb_logger", ".", "writer", ".", "add_scalar", "(", "'rl_losses/qf1_loss'", ",", "train_stats", "[", "'qf1_loss'", "]", ",", "\n", "self", ".", "_n_env_steps_total", ")", "\n", "self", ".", "tb_logger", ".", "writer", ".", "add_scalar", "(", "'rl_losses/qf2_loss'", ",", "train_stats", "[", "'qf2_loss'", "]", ",", "\n", "self", ".", "_n_env_steps_total", ")", "\n", "self", ".", "tb_logger", ".", "writer", ".", "add_scalar", "(", "'rl_losses/policy_loss'", ",", "train_stats", "[", "'policy_loss'", "]", ",", "\n", "self", ".", "_n_env_steps_total", ")", "\n", "self", ".", "tb_logger", ".", "writer", ".", "add_scalar", "(", "'rl_losses/alpha_entropy_loss'", ",", "train_stats", "[", "'alpha_entropy_loss'", "]", ",", "\n", "self", ".", "_n_env_steps_total", ")", "\n", "\n", "# weights and gradients", "\n", "", "if", "self", ".", "args", ".", "policy", "==", "'dqn'", ":", "\n", "                ", "self", ".", "tb_logger", ".", "writer", ".", "add_scalar", "(", "'weights/q_network'", ",", "\n", "list", "(", "self", ".", "agent", ".", "qf", ".", "parameters", "(", ")", ")", "[", "0", "]", ".", "mean", "(", ")", ",", "\n", "self", ".", "_n_env_steps_total", ")", "\n", "if", "list", "(", "self", ".", "agent", ".", "qf", ".", "parameters", "(", ")", ")", "[", "0", "]", ".", "grad", "is", "not", "None", ":", "\n", "                    ", "param_list", "=", "list", "(", "self", ".", "agent", ".", "qf", ".", "parameters", "(", ")", ")", "\n", "self", ".", "tb_logger", ".", "writer", ".", "add_scalar", "(", "'gradients/q_network'", ",", "\n", "sum", "(", "[", "param_list", "[", "i", "]", ".", "grad", ".", "mean", "(", ")", "for", "i", "in", "range", "(", "len", "(", "param_list", ")", ")", "]", ")", ",", "\n", "self", ".", "_n_env_steps_total", ")", "\n", "", "self", ".", "tb_logger", ".", "writer", ".", "add_scalar", "(", "'weights/q_target'", ",", "\n", "list", "(", "self", ".", "agent", ".", "target_qf", ".", "parameters", "(", ")", ")", "[", "0", "]", ".", "mean", "(", ")", ",", "\n", "self", ".", "_n_env_steps_total", ")", "\n", "if", "list", "(", "self", ".", "agent", ".", "target_qf", ".", "parameters", "(", ")", ")", "[", "0", "]", ".", "grad", "is", "not", "None", ":", "\n", "                    ", "param_list", "=", "list", "(", "self", ".", "agent", ".", "target_qf", ".", "parameters", "(", ")", ")", "\n", "self", ".", "tb_logger", ".", "writer", ".", "add_scalar", "(", "'gradients/q_target'", ",", "\n", "sum", "(", "[", "param_list", "[", "i", "]", ".", "grad", ".", "mean", "(", ")", "for", "i", "in", "range", "(", "len", "(", "param_list", ")", ")", "]", ")", ",", "\n", "self", ".", "_n_env_steps_total", ")", "\n", "", "", "else", ":", "\n", "                ", "self", ".", "tb_logger", ".", "writer", ".", "add_scalar", "(", "'weights/q1_network'", ",", "\n", "list", "(", "self", ".", "agent", ".", "qf1", ".", "parameters", "(", ")", ")", "[", "0", "]", ".", "mean", "(", ")", ",", "\n", "self", ".", "_n_env_steps_total", ")", "\n", "if", "list", "(", "self", ".", "agent", ".", "qf1", ".", "parameters", "(", ")", ")", "[", "0", "]", ".", "grad", "is", "not", "None", ":", "\n", "                    ", "param_list", "=", "list", "(", "self", ".", "agent", ".", "qf1", ".", "parameters", "(", ")", ")", "\n", "self", ".", "tb_logger", ".", "writer", ".", "add_scalar", "(", "'gradients/q1_network'", ",", "\n", "sum", "(", "[", "param_list", "[", "i", "]", ".", "grad", ".", "mean", "(", ")", "for", "i", "in", "range", "(", "len", "(", "param_list", ")", ")", "]", ")", ",", "\n", "self", ".", "_n_env_steps_total", ")", "\n", "", "self", ".", "tb_logger", ".", "writer", ".", "add_scalar", "(", "'weights/q1_target'", ",", "\n", "list", "(", "self", ".", "agent", ".", "qf1_target", ".", "parameters", "(", ")", ")", "[", "0", "]", ".", "mean", "(", ")", ",", "\n", "self", ".", "_n_env_steps_total", ")", "\n", "if", "list", "(", "self", ".", "agent", ".", "qf1_target", ".", "parameters", "(", ")", ")", "[", "0", "]", ".", "grad", "is", "not", "None", ":", "\n", "                    ", "param_list", "=", "list", "(", "self", ".", "agent", ".", "qf1_target", ".", "parameters", "(", ")", ")", "\n", "self", ".", "tb_logger", ".", "writer", ".", "add_scalar", "(", "'gradients/q1_target'", ",", "\n", "sum", "(", "[", "param_list", "[", "i", "]", ".", "grad", ".", "mean", "(", ")", "for", "i", "in", "range", "(", "len", "(", "param_list", ")", ")", "]", ")", ",", "\n", "self", ".", "_n_env_steps_total", ")", "\n", "", "self", ".", "tb_logger", ".", "writer", ".", "add_scalar", "(", "'weights/q2_network'", ",", "\n", "list", "(", "self", ".", "agent", ".", "qf2", ".", "parameters", "(", ")", ")", "[", "0", "]", ".", "mean", "(", ")", ",", "\n", "self", ".", "_n_env_steps_total", ")", "\n", "if", "list", "(", "self", ".", "agent", ".", "qf2", ".", "parameters", "(", ")", ")", "[", "0", "]", ".", "grad", "is", "not", "None", ":", "\n", "                    ", "param_list", "=", "list", "(", "self", ".", "agent", ".", "qf2", ".", "parameters", "(", ")", ")", "\n", "self", ".", "tb_logger", ".", "writer", ".", "add_scalar", "(", "'gradients/q2_network'", ",", "\n", "sum", "(", "[", "param_list", "[", "i", "]", ".", "grad", ".", "mean", "(", ")", "for", "i", "in", "range", "(", "len", "(", "param_list", ")", ")", "]", ")", ",", "\n", "self", ".", "_n_env_steps_total", ")", "\n", "", "self", ".", "tb_logger", ".", "writer", ".", "add_scalar", "(", "'weights/q2_target'", ",", "\n", "list", "(", "self", ".", "agent", ".", "qf2_target", ".", "parameters", "(", ")", ")", "[", "0", "]", ".", "mean", "(", ")", ",", "\n", "self", ".", "_n_env_steps_total", ")", "\n", "if", "list", "(", "self", ".", "agent", ".", "qf2_target", ".", "parameters", "(", ")", ")", "[", "0", "]", ".", "grad", "is", "not", "None", ":", "\n", "                    ", "param_list", "=", "list", "(", "self", ".", "agent", ".", "qf2_target", ".", "parameters", "(", ")", ")", "\n", "self", ".", "tb_logger", ".", "writer", ".", "add_scalar", "(", "'gradients/q2_target'", ",", "\n", "sum", "(", "[", "param_list", "[", "i", "]", ".", "grad", ".", "mean", "(", ")", "for", "i", "in", "range", "(", "len", "(", "param_list", ")", ")", "]", ")", ",", "\n", "self", ".", "_n_env_steps_total", ")", "\n", "", "self", ".", "tb_logger", ".", "writer", ".", "add_scalar", "(", "'weights/policy'", ",", "\n", "list", "(", "self", ".", "agent", ".", "policy", ".", "parameters", "(", ")", ")", "[", "0", "]", ".", "mean", "(", ")", ",", "\n", "self", ".", "_n_env_steps_total", ")", "\n", "if", "list", "(", "self", ".", "agent", ".", "policy", ".", "parameters", "(", ")", ")", "[", "0", "]", ".", "grad", "is", "not", "None", ":", "\n", "                    ", "param_list", "=", "list", "(", "self", ".", "agent", ".", "policy", ".", "parameters", "(", ")", ")", "\n", "self", ".", "tb_logger", ".", "writer", ".", "add_scalar", "(", "'gradients/policy'", ",", "\n", "sum", "(", "[", "param_list", "[", "i", "]", ".", "grad", ".", "mean", "(", ")", "for", "i", "in", "range", "(", "len", "(", "param_list", ")", ")", "]", ")", ",", "\n", "self", ".", "_n_env_steps_total", ")", "\n", "\n", "", "", "", "print", "(", "\"Iteration -- {}, Success rate -- {:.3f}, Avg. return -- {:.3f}, Elapsed time {:5d}[s]\"", "\n", ".", "format", "(", "iteration", ",", "np", ".", "mean", "(", "success_rate_train", ")", ",", "np", ".", "mean", "(", "np", ".", "sum", "(", "returns_train", ",", "axis", "=", "-", "1", ")", ")", ",", "\n", "int", "(", "time", ".", "time", "(", ")", "-", "self", ".", "_start_time", ")", ")", ")", "\n", "# output to user", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.None.learner.Learner.training_mode": [[436, 438], ["learner.Learner.agent.train"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.core.rl_algorithm.MetaRLAlgorithm.train"], ["", "def", "training_mode", "(", "self", ",", "mode", ")", ":", "\n", "        ", "self", ".", "agent", ".", "train", "(", "mode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.None.learner.Learner.collect_rollouts": [[439, 489], ["range", "torchkit.pytorch_utils.from_numpy", "next_obs.clone.reshape", "learner.Learner.env.reset", "utils.helpers.env_step", "learner.Learner.policy_storage.add_sample", "next_obs.clone", "torchkit.pytorch_utils.FloatTensor.squeeze", "learner.Learner.env.unwrapped.is_goal_state", "torchkit.pytorch_utils.get_numpy", "learner.Learner.env.unwrapped.is_goal_state", "torchkit.pytorch_utils.FloatTensor().long", "torchkit.pytorch_utils.FloatTensor", "learner.Learner.agent.act", "learner.Learner.agent.act", "torchkit.pytorch_utils.get_numpy", "dir", "reward.squeeze", "torchkit.pytorch_utils.get_numpy", "torchkit.pytorch_utils.get_numpy", "numpy.array", "torchkit.pytorch_utils.get_numpy", "dir", "info.items", "rew_type.startswith", "next_obs.clone.squeeze", "torchkit.pytorch_utils.FloatTensor.squeeze", "next_obs.squeeze", "torchkit.pytorch_utils.FloatTensor", "learner.Learner.env.action_space.sample", "learner.Learner.env.action_space.sample"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.from_numpy", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.reset", "home.repos.pwc.inspect_result.Rondorf_BOReL.utils.helpers.env_step", "home.repos.pwc.inspect_result.Rondorf_BOReL.data_management.simple_replay_buffer.SimpleReplayBuffer.add_sample", "home.repos.pwc.inspect_result.Rondorf_BOReL.core.serializable.Serializable.clone", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.is_goal_state", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.get_numpy", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.is_goal_state", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.FloatTensor", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjDataWrapper.act", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjDataWrapper.act", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.get_numpy", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjvLightWrapper.dir", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.get_numpy", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.get_numpy", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.get_numpy", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjvLightWrapper.dir", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.startswith", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.FloatTensor", "home.repos.pwc.inspect_result.Rondorf_BOReL.spaces.discrete.Discrete.sample", "home.repos.pwc.inspect_result.Rondorf_BOReL.spaces.discrete.Discrete.sample"], ["", "def", "collect_rollouts", "(", "self", ",", "num_rollouts", ",", "random_actions", "=", "False", ")", ":", "\n", "        ", "'''\n\n        :param num_rollouts:\n        :param random_actions: whether to use policy to sample actions, or randomly sample action space\n        :return:\n        '''", "\n", "\n", "for", "rollout", "in", "range", "(", "num_rollouts", ")", ":", "\n", "            ", "obs", "=", "ptu", ".", "from_numpy", "(", "self", ".", "env", ".", "reset", "(", "self", ".", "task_idx", ")", ")", "\n", "obs", "=", "obs", ".", "reshape", "(", "-", "1", ",", "obs", ".", "shape", "[", "-", "1", "]", ")", "\n", "done_rollout", "=", "False", "\n", "\n", "while", "not", "done_rollout", ":", "\n", "                ", "if", "random_actions", ":", "\n", "                    ", "if", "self", ".", "args", ".", "policy", "==", "'dqn'", ":", "\n", "                        ", "action", "=", "ptu", ".", "FloatTensor", "(", "[", "[", "[", "self", ".", "env", ".", "action_space", ".", "sample", "(", ")", "]", "]", "]", ")", ".", "long", "(", ")", "# Sample random action", "\n", "", "else", ":", "\n", "                        ", "action", "=", "ptu", ".", "FloatTensor", "(", "[", "self", ".", "env", ".", "action_space", ".", "sample", "(", ")", "]", ")", "# Sample random action", "\n", "", "", "else", ":", "\n", "                    ", "if", "self", ".", "args", ".", "policy", "==", "'dqn'", ":", "\n", "                        ", "action", ",", "_", "=", "self", ".", "agent", ".", "act", "(", "obs", "=", "obs", ")", "# DQN", "\n", "", "else", ":", "\n", "                        ", "action", ",", "_", ",", "_", ",", "_", "=", "self", ".", "agent", ".", "act", "(", "obs", "=", "obs", ")", "# SAC", "\n", "# observe reward and next obs", "\n", "", "", "next_obs", ",", "reward", ",", "done", ",", "info", "=", "utl", ".", "env_step", "(", "self", ".", "env", ",", "action", ".", "squeeze", "(", "dim", "=", "0", ")", ")", "\n", "done_rollout", "=", "False", "if", "ptu", ".", "get_numpy", "(", "done", "[", "0", "]", "[", "0", "]", ")", "==", "0.", "else", "True", "\n", "\n", "# add data to policy buffer - (s+, a, r, s'+, term)", "\n", "term", "=", "self", ".", "env", ".", "unwrapped", ".", "is_goal_state", "(", ")", "if", "\"is_goal_state\"", "in", "dir", "(", "self", ".", "env", ".", "unwrapped", ")", "else", "False", "\n", "if", "self", ".", "args", ".", "dense_train_sparse_test", ":", "\n", "                    ", "rew_to_buffer", "=", "{", "rew_type", ":", "rew", "for", "rew_type", ",", "rew", "in", "info", ".", "items", "(", ")", "\n", "if", "rew_type", ".", "startswith", "(", "'reward'", ")", "}", "\n", "", "else", ":", "\n", "                    ", "rew_to_buffer", "=", "ptu", ".", "get_numpy", "(", "reward", ".", "squeeze", "(", "dim", "=", "0", ")", ")", "\n", "", "self", ".", "policy_storage", ".", "add_sample", "(", "task", "=", "self", ".", "task_idx", ",", "\n", "observation", "=", "ptu", ".", "get_numpy", "(", "obs", ".", "squeeze", "(", "dim", "=", "0", ")", ")", ",", "\n", "action", "=", "ptu", ".", "get_numpy", "(", "action", ".", "squeeze", "(", "dim", "=", "0", ")", ")", ",", "\n", "reward", "=", "rew_to_buffer", ",", "\n", "terminal", "=", "np", ".", "array", "(", "[", "term", "]", ",", "dtype", "=", "float", ")", ",", "\n", "next_observation", "=", "ptu", ".", "get_numpy", "(", "next_obs", ".", "squeeze", "(", "dim", "=", "0", ")", ")", ")", "\n", "\n", "# set: obs <- next_obs", "\n", "obs", "=", "next_obs", ".", "clone", "(", ")", "\n", "\n", "# update statistics", "\n", "self", ".", "_n_env_steps_total", "+=", "1", "\n", "if", "\"is_goal_state\"", "in", "dir", "(", "self", ".", "env", ".", "unwrapped", ")", "and", "self", ".", "env", ".", "unwrapped", ".", "is_goal_state", "(", ")", ":", "# count successes", "\n", "                    ", "self", ".", "_successes_in_buffer", "+=", "1", "\n", "", "", "self", ".", "_n_rollouts_total", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.None.learner.Learner.sample_rl_batch": [[490, 500], ["torchkit.pytorch_utils.np_to_pytorch_batch", "utils.helpers.unpack_batch", "torch.cat", "learner.Learner.policy_storage.random_batch", "range", "len"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.np_to_pytorch_batch", "home.repos.pwc.inspect_result.Rondorf_BOReL.utils.helpers.unpack_batch", "home.repos.pwc.inspect_result.Rondorf_BOReL.data_management.simple_replay_buffer.SimpleReplayBuffer.random_batch"], ["", "", "def", "sample_rl_batch", "(", "self", ",", "tasks", ",", "batch_size", ")", ":", "\n", "        ", "''' sample batch of unordered rl training data from a list/array of tasks '''", "\n", "# this batch consists of transitions sampled randomly from replay buffer", "\n", "batches", "=", "[", "ptu", ".", "np_to_pytorch_batch", "(", "\n", "self", ".", "policy_storage", ".", "random_batch", "(", "task", ",", "batch_size", ")", ")", "for", "task", "in", "tasks", "]", "\n", "unpacked", "=", "[", "utl", ".", "unpack_batch", "(", "batch", ")", "for", "batch", "in", "batches", "]", "\n", "# group elements together", "\n", "unpacked", "=", "[", "[", "x", "[", "i", "]", "for", "x", "in", "unpacked", "]", "for", "i", "in", "range", "(", "len", "(", "unpacked", "[", "0", "]", ")", ")", "]", "\n", "unpacked", "=", "[", "torch", ".", "cat", "(", "x", ",", "dim", "=", "0", ")", "for", "x", "in", "unpacked", "]", "\n", "return", "unpacked", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.None.learner.Learner._start_training": [[501, 509], ["time.time"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjDataWrapper.time"], ["", "def", "_start_training", "(", "self", ")", ":", "\n", "        ", "self", ".", "_n_env_steps_total", "=", "0", "\n", "self", ".", "_n_rl_update_steps_total", "=", "0", "\n", "self", ".", "_n_vae_update_steps_total", "=", "0", "\n", "self", ".", "_n_rollouts_total", "=", "0", "\n", "self", ".", "_successes_in_buffer", "=", "0", "\n", "\n", "self", ".", "_start_time", "=", "time", ".", "time", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.None.learner.Learner.load_model": [[510, 514], ["learner.Learner.training_mode", "learner.Learner.agent.load_state_dict", "torch.load"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.core.rl_algorithm.MetaRLAlgorithm.training_mode", "home.repos.pwc.inspect_result.Rondorf_BOReL.envs.registration.load"], ["", "def", "load_model", "(", "self", ",", "device", "=", "'cpu'", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "\"agent_path\"", "in", "kwargs", ":", "\n", "            ", "self", ".", "agent", ".", "load_state_dict", "(", "torch", ".", "load", "(", "kwargs", "[", "\"agent_path\"", "]", ",", "map_location", "=", "device", ")", ")", "\n", "", "self", ".", "training_mode", "(", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.None.learner.Learner.save_buffer": [[515, 526], ["learner.Learner.policy_storage.task_buffers[].size", "numpy.save", "numpy.save", "numpy.save", "numpy.save", "os.path.join", "os.path.join", "learner.Learner.policy_storage.task_buffers[]._rewards.items", "numpy.save", "os.path.join", "os.path.join", "numpy.save", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjvGeomWrapper.size", "home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.UpdateableAPIResource.save", "home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.UpdateableAPIResource.save", "home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.UpdateableAPIResource.save", "home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.UpdateableAPIResource.save", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.join", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.join", "home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.UpdateableAPIResource.save", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.join", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.join", "home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.UpdateableAPIResource.save", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.join", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.join"], ["", "def", "save_buffer", "(", "self", ")", ":", "\n", "        ", "size", "=", "self", ".", "policy_storage", ".", "task_buffers", "[", "0", "]", ".", "size", "(", ")", "\n", "np", ".", "save", "(", "os", ".", "path", ".", "join", "(", "self", ".", "output_dir", ",", "'obs'", ")", ",", "self", ".", "policy_storage", ".", "task_buffers", "[", "0", "]", ".", "_observations", "[", ":", "size", "]", ")", "\n", "np", ".", "save", "(", "os", ".", "path", ".", "join", "(", "self", ".", "output_dir", ",", "'actions'", ")", ",", "self", ".", "policy_storage", ".", "task_buffers", "[", "0", "]", ".", "_actions", "[", ":", "size", "]", ")", "\n", "if", "self", ".", "args", ".", "dense_train_sparse_test", ":", "\n", "            ", "for", "reward_type", ",", "reward_arr", "in", "self", ".", "policy_storage", ".", "task_buffers", "[", "0", "]", ".", "_rewards", ".", "items", "(", ")", ":", "\n", "                ", "np", ".", "save", "(", "os", ".", "path", ".", "join", "(", "self", ".", "output_dir", ",", "reward_type", ")", ",", "reward_arr", "[", ":", "size", "]", ")", "\n", "", "", "else", ":", "\n", "            ", "np", ".", "save", "(", "os", ".", "path", ".", "join", "(", "self", ".", "output_dir", ",", "'rewards'", ")", ",", "self", ".", "policy_storage", ".", "task_buffers", "[", "0", "]", ".", "_rewards", "[", ":", "size", "]", ")", "\n", "", "np", ".", "save", "(", "os", ".", "path", ".", "join", "(", "self", ".", "output_dir", ",", "'next_obs'", ")", ",", "self", ".", "policy_storage", ".", "task_buffers", "[", "0", "]", ".", "_next_obs", "[", ":", "size", "]", ")", "\n", "np", ".", "save", "(", "os", ".", "path", ".", "join", "(", "self", ".", "output_dir", ",", "'terminals'", ")", ",", "self", ".", "policy_storage", ".", "task_buffers", "[", "0", "]", ".", "_terminals", "[", ":", "size", "]", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.Rondorf_BOReL.utils.cli.boolean_argument": [[4, 7], ["bool", "distutils.util.strtobool"], "function", ["None"], ["def", "boolean_argument", "(", "value", ")", ":", "\n", "    ", "\"\"\"Convert a string value to boolean.\"\"\"", "\n", "return", "bool", "(", "strtobool", "(", "value", ")", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.Rondorf_BOReL.utils.offline_utils.get_model_path": [[11, 39], ["os.listdir", "list", "filter", "len", "os.path.join", "idx.index", "os.path.join", "file.startswith", "type", "str", "str", "len", "numpy.array().max", "idx.index", "numpy.array"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.ListableAPIResource.list", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.join", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.index", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.join", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.startswith", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjvGeomWrapper.type", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.index"], ["def", "get_model_path", "(", "folder", ",", "model_name", "=", "'encoder'", ",", "iteration", "=", "None", ")", ":", "\n", "    ", "'''\n\n    :param folder:\n    :param model_name: from available file names in folder\n    :param iteration:\n    :return:\n    '''", "\n", "\n", "files", "=", "os", ".", "listdir", "(", "folder", ")", "\n", "files", "=", "[", "file", "if", "file", ".", "startswith", "(", "model_name", ")", "else", "None", "for", "file", "in", "files", "]", "\n", "files", "=", "list", "(", "filter", "(", "None", ",", "files", ")", ")", "\n", "# check if any files left", "\n", "assert", "len", "(", "files", ")", ">", "0", ",", "\"model_name is invalid/irrelevant!\"", "\n", "\n", "# get iteration indices", "\n", "idx", "=", "[", "file", "[", "len", "(", "model_name", ")", ":", "-", "3", "]", "for", "file", "in", "files", "]", "\n", "if", "iteration", "is", "not", "None", ":", "\n", "        ", "if", "type", "(", "iteration", ")", "!=", "str", ":", "\n", "            ", "iteration", "=", "str", "(", "iteration", ")", "\n", "# check that iteration file exist", "\n", "", "assert", "iteration", "in", "idx", ",", "\"iteration number is invalid! no such file.\"", "\n", "path", "=", "os", ".", "path", ".", "join", "(", "folder", ",", "files", "[", "idx", ".", "index", "(", "iteration", ")", "]", ")", "\n", "", "else", ":", "# get final iteration", "\n", "        ", "last_idx", "=", "idx", ".", "index", "(", "str", "(", "np", ".", "array", "(", "idx", ",", "dtype", "=", "int", ")", ".", "max", "(", ")", ")", ")", "\n", "path", "=", "os", ".", "path", ".", "join", "(", "folder", ",", "files", "[", "last_idx", "]", ")", "\n", "\n", "", "return", "path", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.utils.offline_utils.extract_goal_from_path": [[41, 48], ["path.split", "float", "goal_desc.split"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.split", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.split"], ["", "def", "extract_goal_from_path", "(", "path", ")", ":", "\n", "    ", "'''\n    Assumes path name structure of seed_{}_goal_{}_{}_..._{} (seed, goal description)\n    '''", "\n", "goal_desc", "=", "path", ".", "split", "(", "'goal_'", ")", "[", "-", "1", "]", "\n", "goal", "=", "[", "float", "(", "goal_part", ")", "for", "goal_part", "in", "goal_desc", ".", "split", "(", "'_'", ")", "]", "\n", "return", "goal", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.utils.offline_utils.create_goal_path_ext_from_goal": [[50, 63], ["isinstance", "str", "goal_part.round"], "function", ["None"], ["", "def", "create_goal_path_ext_from_goal", "(", "goal", ")", ":", "\n", "    ", "'''\n    Assumes goal is array or list and returns goal_{}_{}_..._{} (goal description)\n    '''", "\n", "# print(type(goal))", "\n", "# print('yes' if type(goal) is np.ndarray else 'no')", "\n", "# print(goal.ndim)", "\n", "if", "not", "isinstance", "(", "goal", ",", "list", ")", "and", "goal", ".", "ndim", "==", "0", ":", "\n", "        ", "goal", "=", "[", "goal", "]", "\n", "", "goal_desc", "=", "'goal'", "\n", "for", "goal_part", "in", "goal", ":", "\n", "        ", "goal_desc", "+=", "'_'", "+", "str", "(", "goal_part", ".", "round", "(", "3", ")", ")", "\n", "", "return", "goal_desc", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.utils.offline_utils.vis_train_tasks": [[65, 73], ["env.plot_env", "matplotlib.Circle", "matplotlib.gca().add_artist", "matplotlib.gca"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.plot_env"], ["", "def", "vis_train_tasks", "(", "env", ",", "goals", ")", ":", "\n", "    ", "'''\n    for 2D goal tasks\n    '''", "\n", "env", ".", "plot_env", "(", ")", "\n", "for", "goal", "in", "goals", ":", "\n", "        ", "circle", "=", "plt", ".", "Circle", "(", "(", "goal", "[", "0", "]", ",", "goal", "[", "1", "]", ")", ",", "radius", "=", "env", ".", "goal_radius", ",", "alpha", "=", "0.3", ")", "\n", "plt", ".", "gca", "(", ")", ".", "add_artist", "(", "circle", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.utils.offline_utils.expand_args": [[75, 93], ["environments.make_env.make_env", "isinstance", "hasattr"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.environments.make_env.make_env"], ["", "", "def", "expand_args", "(", "args", ",", "include_act_space", "=", "False", ")", ":", "\n", "# create env to get parameters", "\n", "    ", "env", "=", "make_env", "(", "args", ".", "env_name", ",", "\n", "args", ".", "max_rollouts_per_task", ",", "\n", "seed", "=", "args", ".", "seed", ",", "\n", "n_tasks", "=", "1", ")", "\n", "\n", "if", "isinstance", "(", "env", ".", "action_space", ",", "gym", ".", "spaces", ".", "discrete", ".", "Discrete", ")", ":", "\n", "        ", "args", ".", "action_dim", "=", "1", "\n", "", "else", ":", "\n", "        ", "args", ".", "action_dim", "=", "env", ".", "action_space", ".", "shape", "[", "0", "]", "\n", "", "args", ".", "obs_dim", "=", "env", ".", "observation_space", ".", "shape", "[", "0", "]", "\n", "\n", "args", ".", "trajectory_len", "=", "env", ".", "unwrapped", ".", "_max_episode_steps", "*", "args", ".", "max_rollouts_per_task", "\n", "args", ".", "num_states", "=", "env", ".", "unwrapped", ".", "num_states", "if", "hasattr", "(", "env", ".", "unwrapped", ",", "'num_states'", ")", "else", "None", "\n", "if", "include_act_space", ":", "\n", "        ", "args", ".", "act_space", "=", "env", ".", "action_space", "\n", "", "return", "args", ",", "env", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.utils.offline_utils.load_transitions": [[95, 108], ["torchkit.pytorch_utils.FloatTensor().to", "torchkit.pytorch_utils.FloatTensor().to", "torchkit.pytorch_utils.FloatTensor().to", "torchkit.pytorch_utils.FloatTensor().to", "torchkit.pytorch_utils.FloatTensor().to", "torchkit.pytorch_utils.FloatTensor", "torchkit.pytorch_utils.FloatTensor", "torchkit.pytorch_utils.FloatTensor", "torchkit.pytorch_utils.FloatTensor", "torchkit.pytorch_utils.FloatTensor", "numpy.load", "numpy.load", "numpy.load", "numpy.load", "numpy.load", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.FloatTensor", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.FloatTensor", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.FloatTensor", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.FloatTensor", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.FloatTensor", "home.repos.pwc.inspect_result.Rondorf_BOReL.envs.registration.load", "home.repos.pwc.inspect_result.Rondorf_BOReL.envs.registration.load", "home.repos.pwc.inspect_result.Rondorf_BOReL.envs.registration.load", "home.repos.pwc.inspect_result.Rondorf_BOReL.envs.registration.load", "home.repos.pwc.inspect_result.Rondorf_BOReL.envs.registration.load", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.join", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.join", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.join", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.join", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.join"], ["", "def", "load_transitions", "(", "path", ",", "device", "=", "ptu", ".", "device", ")", ":", "\n", "    ", "'''\n        return arrays of obs, action ,rewards, next_obs, terminals\n    :param path: path to directory in which there are numpy files\n    :return:\n    '''", "\n", "\n", "obs", "=", "ptu", ".", "FloatTensor", "(", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "path", ",", "'obs.npy'", ")", ")", ")", ".", "to", "(", "device", ")", "\n", "actions", "=", "ptu", ".", "FloatTensor", "(", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "path", ",", "'actions.npy'", ")", ")", ")", ".", "to", "(", "device", ")", "\n", "rewards", "=", "ptu", ".", "FloatTensor", "(", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "path", ",", "'rewards.npy'", ")", ")", ")", ".", "to", "(", "device", ")", "\n", "next_obs", "=", "ptu", ".", "FloatTensor", "(", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "path", ",", "'next_obs.npy'", ")", ")", ")", ".", "to", "(", "device", ")", "\n", "terminals", "=", "ptu", ".", "FloatTensor", "(", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "path", ",", "'terminals.npy'", ")", ")", ")", ".", "to", "(", "device", ")", "\n", "return", "obs", ",", "actions", ",", "rewards", ",", "next_obs", ",", "terminals", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.utils.offline_utils.create_rewards_arr": [[110, 122], ["numpy.load", "numpy.load", "numpy.zeros", "range", "numpy.save", "os.path.join", "os.path.join", "len", "env.unwrapped.reward", "os.path.join"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.envs.registration.load", "home.repos.pwc.inspect_result.Rondorf_BOReL.envs.registration.load", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.zeros", "home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.UpdateableAPIResource.save", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.join", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.join", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.reward", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.join"], ["", "def", "create_rewards_arr", "(", "env", ",", "path", ")", ":", "\n", "    ", "'''\n    creates rewards array from observations and actions\n    mainly for mujoco, where solving single sparse task is not easy.\n    '''", "\n", "obs", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "path", ",", "'obs.npy'", ")", ")", "\n", "actions", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "path", ",", "'actions.npy'", ")", ")", "\n", "rewards", "=", "np", ".", "zeros", "(", "(", "obs", ".", "shape", "[", "0", "]", ",", "1", ")", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "rewards", ")", ")", ":", "\n", "        ", "rewards", "[", "i", "]", "=", "env", ".", "unwrapped", ".", "reward", "(", "obs", "[", "i", "]", ",", "actions", "[", "i", "]", ")", "\n", "\n", "", "np", ".", "save", "(", "os", ".", "path", ".", "join", "(", "path", ",", "'rewards.npy'", ")", ",", "rewards", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.utils.offline_utils.save_transitions": [[124, 141], ["os.makedirs", "numpy.save", "numpy.save", "numpy.save", "numpy.save", "numpy.save", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.UpdateableAPIResource.save", "home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.UpdateableAPIResource.save", "home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.UpdateableAPIResource.save", "home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.UpdateableAPIResource.save", "home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.UpdateableAPIResource.save", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.join", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.join", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.join", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.join", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.join"], ["", "def", "save_transitions", "(", "path", ",", "obs", ",", "actions", ",", "rewards", ",", "next_obs", ",", "terminals", ")", ":", "\n", "    ", "'''\n        similar to load_transitions\n    :param path: path to directory in which there are numpy files\n    :return:\n    '''", "\n", "os", ".", "makedirs", "(", "path", ",", "exist_ok", "=", "True", ")", "\n", "# np.save(os.path.join(path, 'obs'), ptu.get_numpy(obs))", "\n", "# np.save(os.path.join(path, 'actions'), ptu.get_numpy(actions))", "\n", "# np.save(os.path.join(path, 'rewards'), ptu.get_numpy(rewards))", "\n", "# np.save(os.path.join(path, 'next_obs'), ptu.get_numpy(next_obs))", "\n", "# np.save(os.path.join(path, 'terminals'), ptu.get_numpy(terminals))", "\n", "np", ".", "save", "(", "os", ".", "path", ".", "join", "(", "path", ",", "'obs'", ")", ",", "obs", ")", "\n", "np", ".", "save", "(", "os", ".", "path", ".", "join", "(", "path", ",", "'actions'", ")", ",", "actions", ")", "\n", "np", ".", "save", "(", "os", ".", "path", ".", "join", "(", "path", ",", "'rewards'", ")", ",", "rewards", ")", "\n", "np", ".", "save", "(", "os", ".", "path", ".", "join", "(", "path", ",", "'next_obs'", ")", ",", "next_obs", ")", "\n", "np", ".", "save", "(", "os", ".", "path", ".", "join", "(", "path", ",", "'terminals'", ")", ",", "terminals", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.utils.offline_utils.load_trained_vae": [[143, 148], ["vae.load_model", "offline_utils.get_model_path", "offline_utils.get_model_path"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.models.vae.VAE.load_model", "home.repos.pwc.inspect_result.Rondorf_BOReL.utils.offline_utils.get_model_path", "home.repos.pwc.inspect_result.Rondorf_BOReL.utils.offline_utils.get_model_path"], ["", "def", "load_trained_vae", "(", "vae", ",", "path", ")", ":", "\n", "    ", "paths", "=", "{", "'encoder_path'", ":", "get_model_path", "(", "path", ",", "model_name", "=", "'encoder'", ")", ",", "\n", "'reward_decoder_path'", ":", "get_model_path", "(", "path", ",", "model_name", "=", "'reward_decoder'", ")", "}", "\n", "\n", "vae", ".", "load_model", "(", "**", "paths", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.utils.offline_utils.load_dataset": [[150, 216], ["os.path.join", "os.listdir", "enumerate", "print", "numpy.vstack", "args.env_name.replace", "numpy.random.permutation", "numpy.random.choice", "os.path.join", "np.vstack.append", "offline_utils.load_transitions", "dataset.append", "len", "len", "offline_utils.extract_goal_from_path", "os.listdir", "print", "environments.make_env.make_env", "offline_utils.create_rewards_arr", "print", "ptu.get_numpy.dim", "ptu.get_numpy.reshape().transpose", "ptu.get_numpy.reshape().transpose", "ptu.get_numpy.reshape().transpose", "ptu.get_numpy.reshape().transpose", "ptu.get_numpy.reshape().transpose", "ptu.get_numpy.transpose().reshape", "ptu.get_numpy.transpose().reshape", "ptu.get_numpy.transpose().reshape", "ptu.get_numpy.transpose().reshape", "ptu.get_numpy.transpose().reshape", "torchkit.pytorch_utils.get_numpy", "torchkit.pytorch_utils.get_numpy", "torchkit.pytorch_utils.get_numpy", "torchkit.pytorch_utils.get_numpy", "torchkit.pytorch_utils.get_numpy", "ptu.get_numpy.reshape", "ptu.get_numpy.reshape", "ptu.get_numpy.reshape", "ptu.get_numpy.reshape", "ptu.get_numpy.reshape", "ptu.get_numpy.transpose", "ptu.get_numpy.transpose", "ptu.get_numpy.transpose", "ptu.get_numpy.transpose", "ptu.get_numpy.transpose"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.join", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.replace", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.join", "home.repos.pwc.inspect_result.Rondorf_BOReL.utils.offline_utils.load_transitions", "home.repos.pwc.inspect_result.Rondorf_BOReL.utils.offline_utils.extract_goal_from_path", "home.repos.pwc.inspect_result.Rondorf_BOReL.environments.make_env.make_env", "home.repos.pwc.inspect_result.Rondorf_BOReL.utils.offline_utils.create_rewards_arr", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjContactWrapper.dim", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.get_numpy", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.get_numpy", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.get_numpy", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.get_numpy", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.get_numpy"], ["", "def", "load_dataset", "(", "data_dir", ",", "args", ",", "num_tasks", "=", "None", ",", "allow_dense_data_loading", "=", "True", ",", "arr_type", "=", "'tensor'", ")", ":", "\n", "    ", "dataset", "=", "[", "]", "\n", "env_dir", "=", "args", ".", "env_name", ".", "replace", "(", "'Sparse'", ",", "''", ")", "if", "'dense_train_sparse_test'", "in", "args", "and", "args", ".", "dense_train_sparse_test", "is", "True", "and", "allow_dense_data_loading", "else", "args", ".", "env_name", "\n", "exps_dir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "main_data_dir", ",", "env_dir", ",", "data_dir", ")", "\n", "goals", "=", "[", "]", "\n", "all_dirs", "=", "os", ".", "listdir", "(", "exps_dir", ")", "\n", "if", "num_tasks", "is", "None", ":", "\n", "        ", "tasks", "=", "np", ".", "random", ".", "permutation", "(", "len", "(", "all_dirs", ")", ")", "\n", "", "else", ":", "\n", "        ", "tasks", "=", "np", ".", "random", ".", "choice", "(", "len", "(", "all_dirs", ")", ",", "num_tasks", ")", "\n", "", "for", "i", ",", "task", "in", "enumerate", "(", "tasks", ")", ":", "\n", "        ", "exp_dir", "=", "os", ".", "path", ".", "join", "(", "exps_dir", ",", "all_dirs", "[", "task", "]", ")", "\n", "goals", ".", "append", "(", "extract_goal_from_path", "(", "all_dirs", "[", "task", "]", ")", ")", "\n", "if", "'rewards.npy'", "not", "in", "os", ".", "listdir", "(", "exp_dir", ")", ":", "\n", "            ", "print", "(", "'rewards.npy file doesn\\'t exist. Creating it..'", ")", "\n", "env", "=", "make_env", "(", "args", ".", "env_name", ",", "args", ".", "max_rollouts_per_task", ",", "n_tasks", "=", "1", ")", "\n", "create_rewards_arr", "(", "env", ",", "path", "=", "exp_dir", ")", "\n", "print", "(", "'Created rewards.npy file.'", ")", "\n", "", "obs", ",", "actions", ",", "rewards", ",", "next_obs", ",", "terminals", "=", "load_transitions", "(", "exp_dir", ")", "\n", "\n", "if", "obs", ".", "dim", "(", ")", "<", "3", ":", "\n", "            ", "obs", "=", "obs", ".", "reshape", "(", "-", "1", ",", "args", ".", "trajectory_len", ",", "obs", ".", "shape", "[", "-", "1", "]", ")", ".", "transpose", "(", "0", ",", "1", ")", "\n", "actions", "=", "actions", ".", "reshape", "(", "-", "1", ",", "args", ".", "trajectory_len", ",", "actions", ".", "shape", "[", "-", "1", "]", ")", ".", "transpose", "(", "0", ",", "1", ")", "\n", "rewards", "=", "rewards", ".", "reshape", "(", "-", "1", ",", "args", ".", "trajectory_len", ",", "rewards", ".", "shape", "[", "-", "1", "]", ")", ".", "transpose", "(", "0", ",", "1", ")", "\n", "next_obs", "=", "next_obs", ".", "reshape", "(", "-", "1", ",", "args", ".", "trajectory_len", ",", "next_obs", ".", "shape", "[", "-", "1", "]", ")", ".", "transpose", "(", "0", ",", "1", ")", "\n", "terminals", "=", "terminals", ".", "reshape", "(", "-", "1", ",", "args", ".", "trajectory_len", ",", "terminals", ".", "shape", "[", "-", "1", "]", ")", ".", "transpose", "(", "0", ",", "1", ")", "\n", "if", "args", ".", "num_trajs_per_task", "is", "not", "None", ":", "\n", "                ", "obs", "=", "obs", "[", ":", ",", ":", "args", ".", "num_trajs_per_task", ",", ":", "]", "\n", "actions", "=", "actions", "[", ":", ",", ":", "args", ".", "num_trajs_per_task", ",", ":", "]", "\n", "rewards", "=", "rewards", "[", ":", ",", ":", "args", ".", "num_trajs_per_task", ",", ":", "]", "\n", "next_obs", "=", "next_obs", "[", ":", ",", ":", "args", ".", "num_trajs_per_task", ",", ":", "]", "\n", "terminals", "=", "terminals", "[", ":", ",", ":", "args", ".", "num_trajs_per_task", ",", ":", "]", "\n", "", "", "else", ":", "\n", "            ", "if", "args", ".", "num_trajs_per_task", "is", "not", "None", ":", "\n", "                ", "obs", "=", "obs", "[", ":", ",", ":", "args", ".", "num_trajs_per_task", ",", ":", "]", "\n", "actions", "=", "actions", "[", ":", ",", ":", "args", ".", "num_trajs_per_task", ",", ":", "]", "\n", "rewards", "=", "rewards", "[", ":", ",", ":", "args", ".", "num_trajs_per_task", ",", ":", "]", "\n", "next_obs", "=", "next_obs", "[", ":", ",", ":", "args", ".", "num_trajs_per_task", ",", ":", "]", "\n", "terminals", "=", "terminals", "[", ":", ",", ":", "args", ".", "num_trajs_per_task", ",", ":", "]", "\n", "", "obs", "=", "obs", ".", "transpose", "(", "0", ",", "1", ")", ".", "reshape", "(", "-", "1", ",", "obs", ".", "shape", "[", "-", "1", "]", ")", "\n", "actions", "=", "actions", ".", "transpose", "(", "0", ",", "1", ")", ".", "reshape", "(", "-", "1", ",", "actions", ".", "shape", "[", "-", "1", "]", ")", "\n", "rewards", "=", "rewards", ".", "transpose", "(", "0", ",", "1", ")", ".", "reshape", "(", "-", "1", ",", "rewards", ".", "shape", "[", "-", "1", "]", ")", "\n", "next_obs", "=", "next_obs", ".", "transpose", "(", "0", ",", "1", ")", ".", "reshape", "(", "-", "1", ",", "next_obs", ".", "shape", "[", "-", "1", "]", ")", "\n", "terminals", "=", "terminals", ".", "transpose", "(", "0", ",", "1", ")", ".", "reshape", "(", "-", "1", ",", "terminals", ".", "shape", "[", "-", "1", "]", ")", "\n", "\n", "", "if", "arr_type", "==", "'numpy'", ":", "\n", "            ", "obs", "=", "ptu", ".", "get_numpy", "(", "obs", ")", "\n", "actions", "=", "ptu", ".", "get_numpy", "(", "actions", ")", "\n", "rewards", "=", "ptu", ".", "get_numpy", "(", "rewards", ")", "\n", "next_obs", "=", "ptu", ".", "get_numpy", "(", "next_obs", ")", "\n", "terminals", "=", "ptu", ".", "get_numpy", "(", "terminals", ")", "\n", "\n", "", "dataset", ".", "append", "(", "[", "obs", ",", "actions", ",", "rewards", ",", "next_obs", ",", "terminals", "]", ")", "\n", "# print(exp_dir)", "\n", "# print('Obs shape: ' + str(np.shape(dataset[-1][0])) +", "\n", "#       '. Act shape: ' + str(np.shape(dataset[-1][1])) +", "\n", "#       '. Reward shape: ' + str(np.shape(dataset[-1][2])) +", "\n", "#       '. Next obs shape: ' + str(np.shape(dataset[-1][3])))", "\n", "", "print", "(", "'{} experiments loaded.'", ".", "format", "(", "i", "+", "1", ")", ")", "\n", "goals", "=", "np", ".", "vstack", "(", "goals", ")", "\n", "\n", "return", "dataset", ",", "goals", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.utils.offline_utils.save_dataset": [[218, 228], ["zip", "os.path.join", "offline_utils.save_transitions", "offline_utils.create_goal_path_ext_from_goal"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.join", "home.repos.pwc.inspect_result.Rondorf_BOReL.utils.offline_utils.save_transitions", "home.repos.pwc.inspect_result.Rondorf_BOReL.utils.offline_utils.create_goal_path_ext_from_goal"], ["", "def", "save_dataset", "(", "path", ",", "dataset", ",", "goals", ")", ":", "\n", "    ", "for", "goal", ",", "set", "in", "zip", "(", "goals", ",", "dataset", ")", ":", "\n", "        ", "save_path", "=", "os", ".", "path", ".", "join", "(", "path", ",", "create_goal_path_ext_from_goal", "(", "goal", ")", ")", "\n", "# save_path = os.path.join(path, 'goal_{}_{}'.format(goal[0], goal[1]))", "\n", "save_transitions", "(", "save_path", ",", "\n", "obs", "=", "set", "[", "0", "]", ",", "\n", "actions", "=", "set", "[", "1", "]", ",", "\n", "rewards", "=", "set", "[", "2", "]", ",", "\n", "next_obs", "=", "set", "[", "3", "]", ",", "\n", "terminals", "=", "set", "[", "4", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.utils.offline_utils.batch_to_trajectories": [[230, 241], ["obs.reshape().transpose.reshape().transpose", "actions.reshape().transpose.reshape().transpose", "rewards.reshape().transpose.reshape().transpose", "next_obs.reshape().transpose.reshape().transpose", "terminals.reshape().transpose.reshape().transpose", "traj_dataset.append", "obs.reshape().transpose.reshape", "actions.reshape().transpose.reshape", "rewards.reshape().transpose.reshape", "next_obs.reshape().transpose.reshape", "terminals.reshape().transpose.reshape"], "function", ["None"], ["", "", "def", "batch_to_trajectories", "(", "dataset", ",", "args", ")", ":", "\n", "    ", "traj_dataset", "=", "[", "]", "\n", "for", "set", "in", "dataset", ":", "\n", "        ", "obs", ",", "actions", ",", "rewards", ",", "next_obs", ",", "terminals", "=", "set", "[", "0", "]", ",", "set", "[", "1", "]", ",", "set", "[", "2", "]", ",", "set", "[", "3", "]", ",", "set", "[", "4", "]", "\n", "obs", "=", "obs", ".", "reshape", "(", "-", "1", ",", "args", ".", "trajectory_len", ",", "obs", ".", "shape", "[", "-", "1", "]", ")", ".", "transpose", "(", "0", ",", "1", ")", "\n", "actions", "=", "actions", ".", "reshape", "(", "-", "1", ",", "args", ".", "trajectory_len", ",", "actions", ".", "shape", "[", "-", "1", "]", ")", ".", "transpose", "(", "0", ",", "1", ")", "\n", "rewards", "=", "rewards", ".", "reshape", "(", "-", "1", ",", "args", ".", "trajectory_len", ",", "rewards", ".", "shape", "[", "-", "1", "]", ")", ".", "transpose", "(", "0", ",", "1", ")", "\n", "next_obs", "=", "next_obs", ".", "reshape", "(", "-", "1", ",", "args", ".", "trajectory_len", ",", "next_obs", ".", "shape", "[", "-", "1", "]", ")", ".", "transpose", "(", "0", ",", "1", ")", "\n", "terminals", "=", "terminals", ".", "reshape", "(", "-", "1", ",", "args", ".", "trajectory_len", ",", "terminals", ".", "shape", "[", "-", "1", "]", ")", ".", "transpose", "(", "0", ",", "1", ")", "\n", "traj_dataset", ".", "append", "(", "[", "obs", ",", "actions", ",", "rewards", ",", "next_obs", ",", "terminals", "]", ")", "\n", "", "return", "traj_dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.utils.offline_utils.trajectories_to_batch": [[243, 254], ["torchkit.pytorch_utils.get_numpy", "torchkit.pytorch_utils.get_numpy", "torchkit.pytorch_utils.get_numpy", "torchkit.pytorch_utils.get_numpy", "torchkit.pytorch_utils.get_numpy", "traj_dataset.append", "ptu.get_numpy.transpose().reshape", "ptu.get_numpy.transpose().reshape", "ptu.get_numpy.transpose().reshape", "ptu.get_numpy.transpose().reshape", "ptu.get_numpy.transpose().reshape", "ptu.get_numpy.transpose", "ptu.get_numpy.transpose", "ptu.get_numpy.transpose", "ptu.get_numpy.transpose", "ptu.get_numpy.transpose"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.get_numpy", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.get_numpy", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.get_numpy", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.get_numpy", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.get_numpy"], ["", "def", "trajectories_to_batch", "(", "dataset", ")", ":", "\n", "    ", "traj_dataset", "=", "[", "]", "\n", "for", "set", "in", "dataset", ":", "\n", "        ", "obs", ",", "actions", ",", "rewards", ",", "next_obs", ",", "terminals", "=", "set", "[", "0", "]", ",", "set", "[", "1", "]", ",", "set", "[", "2", "]", ",", "set", "[", "3", "]", ",", "set", "[", "4", "]", "\n", "obs", "=", "ptu", ".", "get_numpy", "(", "obs", ".", "transpose", "(", "0", ",", "1", ")", ".", "reshape", "(", "-", "1", ",", "obs", ".", "shape", "[", "-", "1", "]", ")", ")", "\n", "actions", "=", "ptu", ".", "get_numpy", "(", "actions", ".", "transpose", "(", "0", ",", "1", ")", ".", "reshape", "(", "-", "1", ",", "actions", ".", "shape", "[", "-", "1", "]", ")", ")", "\n", "rewards", "=", "ptu", ".", "get_numpy", "(", "rewards", ".", "transpose", "(", "0", ",", "1", ")", ".", "reshape", "(", "-", "1", ",", "rewards", ".", "shape", "[", "-", "1", "]", ")", ")", "\n", "next_obs", "=", "ptu", ".", "get_numpy", "(", "next_obs", ".", "transpose", "(", "0", ",", "1", ")", ".", "reshape", "(", "-", "1", ",", "next_obs", ".", "shape", "[", "-", "1", "]", ")", ")", "\n", "terminals", "=", "ptu", ".", "get_numpy", "(", "terminals", ".", "transpose", "(", "0", ",", "1", ")", ".", "reshape", "(", "-", "1", ",", "terminals", ".", "shape", "[", "-", "1", "]", ")", ")", "\n", "traj_dataset", ".", "append", "(", "[", "obs", ",", "actions", ",", "rewards", ",", "next_obs", ",", "terminals", "]", ")", "\n", "", "return", "traj_dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.utils.offline_utils.transform_mdp_to_bamdp_rollouts": [[256, 306], ["torchkit.pytorch_utils.zeros", "torchkit.pytorch_utils.zeros", "range", "augmented_next_obs[].clone", "torchkit.pytorch_utils.zeros_like", "torch.no_grad", "vae.encoder.prior", "torch.cat", "utils.helpers.update_encoding", "torch.cat", "next_obs[].unsqueeze", "actions[].unsqueeze", "rewards[].unsqueeze", "terminals[].unsqueeze", "torch.no_grad", "vae.compute_belief_reward", "mean.unsqueeze", "logvar.unsqueeze", "obs[].unsqueeze", "next_obs[].unsqueeze", "actions[].unsqueeze"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.zeros", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.zeros", "home.repos.pwc.inspect_result.Rondorf_BOReL.core.serializable.Serializable.clone", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.zeros_like", "home.repos.pwc.inspect_result.Rondorf_BOReL.models.encoder.RNNEncoder.prior", "home.repos.pwc.inspect_result.Rondorf_BOReL.utils.helpers.update_encoding", "home.repos.pwc.inspect_result.Rondorf_BOReL.models.vae.VAE.compute_belief_reward"], ["", "def", "transform_mdp_to_bamdp_rollouts", "(", "vae", ",", "args", ",", "obs", ",", "actions", ",", "rewards", ",", "next_obs", ",", "terminals", ")", ":", "\n", "    ", "'''\n\n    :param vae:\n    :param args:\n    :param obs: shape (trajectory_len, n_rollouts, dim)\n    :param actions:\n    :param rewards:\n    :param next_obs:\n    :param terminals:\n    :return:\n    '''", "\n", "\n", "# augmented_obs = ptu.zeros((obs.shape[0], obs.shape[1] + 2 * args.task_embedding_size))", "\n", "augmented_obs", "=", "ptu", ".", "zeros", "(", "(", "obs", ".", "shape", "[", "0", "]", ",", "obs", ".", "shape", "[", "1", "]", ",", "obs", ".", "shape", "[", "2", "]", "+", "2", "*", "args", ".", "task_embedding_size", ")", ")", "\n", "# augmented_next_obs = ptu.zeros((obs.shape[0], obs.shape[1] + 2 * args.task_embedding_size))", "\n", "augmented_next_obs", "=", "ptu", ".", "zeros", "(", "(", "obs", ".", "shape", "[", "0", "]", ",", "obs", ".", "shape", "[", "1", "]", ",", "obs", ".", "shape", "[", "2", "]", "+", "2", "*", "args", ".", "task_embedding_size", ")", ")", "\n", "if", "args", ".", "belief_rewards", ":", "\n", "        ", "belief_rewards", "=", "ptu", ".", "zeros_like", "(", "rewards", ")", "\n", "", "else", ":", "\n", "        ", "belief_rewards", "=", "None", "\n", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "# _, mean, logvar, hidden_state = vae.encoder.prior(batch_size=1)", "\n", "        ", "_", ",", "mean", ",", "logvar", ",", "hidden_state", "=", "vae", ".", "encoder", ".", "prior", "(", "batch_size", "=", "obs", ".", "shape", "[", "1", "]", ")", "\n", "augmented_obs", "[", "0", ",", ":", ",", ":", "]", "=", "torch", ".", "cat", "(", "(", "obs", "[", "0", "]", ",", "mean", "[", "0", "]", ",", "logvar", "[", "0", "]", ")", ",", "dim", "=", "-", "1", ")", "\n", "", "for", "step", "in", "range", "(", "args", ".", "trajectory_len", ")", ":", "\n", "# update encoding", "\n", "        ", "_", ",", "mean", ",", "logvar", ",", "hidden_state", "=", "utl", ".", "update_encoding", "(", "\n", "encoder", "=", "vae", ".", "encoder", ",", "\n", "obs", "=", "next_obs", "[", "step", "]", ".", "unsqueeze", "(", "0", ")", ",", "\n", "action", "=", "actions", "[", "step", "]", ".", "unsqueeze", "(", "0", ")", ",", "\n", "reward", "=", "rewards", "[", "step", "]", ".", "unsqueeze", "(", "0", ")", ",", "\n", "done", "=", "terminals", "[", "step", "]", ".", "unsqueeze", "(", "0", ")", ",", "\n", "hidden_state", "=", "hidden_state", "\n", ")", "\n", "\n", "# augment data", "\n", "augmented_next_obs", "[", "step", ",", ":", ",", ":", "]", "=", "torch", ".", "cat", "(", "(", "next_obs", "[", "step", "]", ",", "mean", ",", "logvar", ")", ",", "dim", "=", "-", "1", ")", "\n", "if", "args", ".", "belief_rewards", ":", "\n", "            ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "belief_rewards", "[", "step", ",", ":", ",", ":", "]", "=", "vae", ".", "compute_belief_reward", "(", "mean", ".", "unsqueeze", "(", "dim", "=", "0", ")", ",", "\n", "logvar", ".", "unsqueeze", "(", "dim", "=", "0", ")", ",", "\n", "obs", "[", "step", "]", ".", "unsqueeze", "(", "dim", "=", "0", ")", ",", "\n", "next_obs", "[", "step", "]", ".", "unsqueeze", "(", "dim", "=", "0", ")", ",", "\n", "actions", "[", "step", "]", ".", "unsqueeze", "(", "dim", "=", "0", ")", ")", "\n", "\n", "", "", "", "augmented_obs", "[", "1", ":", ",", ":", ",", ":", "]", "=", "augmented_next_obs", "[", ":", "-", "1", ",", ":", ",", ":", "]", ".", "clone", "(", ")", "\n", "\n", "return", "augmented_obs", ",", "belief_rewards", ",", "augmented_next_obs", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.utils.offline_utils.transform_mdps_ds_to_bamdp_ds": [[308, 334], ["enumerate", "offline_utils.transform_mdp_to_bamdp_rollouts", "bamdp_dataset.append", "print", "torchkit.pytorch_utils.FloatTensor", "torchkit.pytorch_utils.FloatTensor", "torchkit.pytorch_utils.FloatTensor", "torchkit.pytorch_utils.FloatTensor", "torchkit.pytorch_utils.FloatTensor", "torchkit.pytorch_utils.FloatTensor", "torchkit.pytorch_utils.get_numpy", "torchkit.pytorch_utils.get_numpy", "torchkit.pytorch_utils.get_numpy"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.utils.offline_utils.transform_mdp_to_bamdp_rollouts", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.FloatTensor", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.FloatTensor", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.FloatTensor", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.FloatTensor", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.FloatTensor", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.FloatTensor", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.get_numpy", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.get_numpy", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.get_numpy"], ["", "def", "transform_mdps_ds_to_bamdp_ds", "(", "dataset", ",", "vae", ",", "args", ")", ":", "\n", "    ", "'''\n\n    :param dataset: list of lists of lists. each list is list of arrays\n    (s,a,r,s',done) arrays of size (traj_len, n_trajs, dim)\n    :param vae: trained vae model\n    :return:\n    '''", "\n", "\n", "bamdp_dataset", "=", "[", "]", "\n", "\n", "for", "i", ",", "set", "in", "enumerate", "(", "dataset", ")", ":", "\n", "        ", "obs", ",", "actions", ",", "rewards", ",", "next_obs", ",", "terminals", "=", "set", "\n", "augmented_obs", ",", "belief_rewards", ",", "augmented_next_obs", "=", "transform_mdp_to_bamdp_rollouts", "(", "vae", ",", "args", ",", "\n", "ptu", ".", "FloatTensor", "(", "obs", ")", ",", "\n", "ptu", ".", "FloatTensor", "(", "actions", ")", ",", "\n", "ptu", ".", "FloatTensor", "(", "rewards", ")", ",", "\n", "ptu", ".", "FloatTensor", "(", "next_obs", ")", ",", "\n", "ptu", ".", "FloatTensor", "(", "terminals", ")", ")", "\n", "rewards", "=", "belief_rewards", "if", "belief_rewards", "is", "not", "None", "else", "ptu", ".", "FloatTensor", "(", "rewards", ")", "\n", "\n", "bamdp_dataset", ".", "append", "(", "[", "ptu", ".", "get_numpy", "(", "augmented_obs", ")", ",", "actions", ",", "ptu", ".", "get_numpy", "(", "rewards", ")", ",", "\n", "ptu", ".", "get_numpy", "(", "augmented_next_obs", ")", ",", "terminals", "]", ")", "\n", "print", "(", "'{} datasets were processed.'", ".", "format", "(", "i", "+", "1", ")", ")", "\n", "", "return", "bamdp_dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.utils.offline_utils.mix_task_rollouts": [[336, 386], ["int", "int", "len", "enumerate", "int", "numpy.arange().astype", "int", "len", "enumerate", "numpy.random.choice", "numpy.random.choice", "zip", "print", "numpy.random.choice", "zip", "print", "numpy.random.choice", "offline_utils.relabel_rollout", "numpy.arange", "numpy.random.choice", "zip", "list", "list", "numpy.random.choice", "offline_utils.relabel_rollout", "range", "range", "list", "list", "range", "range"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.utils.offline_utils.relabel_rollout", "home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.ListableAPIResource.list", "home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.ListableAPIResource.list", "home.repos.pwc.inspect_result.Rondorf_BOReL.utils.offline_utils.relabel_rollout", "home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.ListableAPIResource.list", "home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.ListableAPIResource.list"], ["", "def", "mix_task_rollouts", "(", "dataset", ",", "env", ",", "goals", ",", "args", ",", "fraction", "=", "1.", ")", ":", "\n", "    ", "if", "args", ".", "max_rollouts_per_task", "==", "2", ":", "\n", "        ", "mix_until_time", "=", "int", "(", "args", ".", "trajectory_len", "/", "args", ".", "max_rollouts_per_task", ")", "\n", "num_rollouts", "=", "dataset", "[", "0", "]", "[", "0", "]", ".", "shape", "[", "1", "]", "\n", "num_rollots_to_mix", "=", "int", "(", "num_rollouts", "*", "fraction", ")", "\n", "num_tasks", "=", "len", "(", "dataset", ")", "\n", "for", "i", ",", "set", "in", "enumerate", "(", "dataset", ")", ":", "\n", "            ", "rollouts_to_mix", "=", "np", ".", "random", ".", "choice", "(", "num_rollouts", ",", "num_rollots_to_mix", ")", "\n", "tasks_to_mix_from", "=", "np", ".", "random", ".", "choice", "(", "list", "(", "range", "(", "i", ")", ")", "+", "list", "(", "range", "(", "i", "+", "1", ",", "num_tasks", ")", ")", ",", "num_rollots_to_mix", ")", "\n", "for", "rollout_idx", ",", "task", "in", "zip", "(", "rollouts_to_mix", ",", "tasks_to_mix_from", ")", ":", "\n", "                ", "mixed_from_rollout", "=", "np", ".", "random", ".", "choice", "(", "num_rollouts", ")", "# which rollout to switch with", "\n", "set", "[", "0", "]", "[", ":", "mix_until_time", ",", "rollout_idx", ",", ":", "]", "=", "dataset", "[", "task", "]", "[", "0", "]", "[", ":", "mix_until_time", ",", "mixed_from_rollout", ",", ":", "]", "\n", "set", "[", "1", "]", "[", ":", "mix_until_time", ",", "rollout_idx", ",", ":", "]", "=", "dataset", "[", "task", "]", "[", "1", "]", "[", ":", "mix_until_time", ",", "mixed_from_rollout", ",", ":", "]", "\n", "set", "[", "2", "]", "[", ":", "mix_until_time", ",", "rollout_idx", ",", ":", "]", "=", "relabel_rollout", "(", "env", ",", "goals", "[", "i", "]", ",", "\n", "dataset", "[", "task", "]", "[", "3", "]", "[", ":", "mix_until_time", ",", "mixed_from_rollout", ",", ":", "]", ",", "\n", "# dataset[task][0][:mix_until_time, mixed_from_rollout, :],", "\n", "dataset", "[", "task", "]", "[", "1", "]", "[", ":", "mix_until_time", ",", "mixed_from_rollout", ",", ":", "]", ")", "\n", "set", "[", "3", "]", "[", ":", "mix_until_time", ",", "rollout_idx", ",", ":", "]", "=", "dataset", "[", "task", "]", "[", "3", "]", "[", ":", "mix_until_time", ",", "mixed_from_rollout", ",", ":", "]", "\n", "set", "[", "4", "]", "[", ":", "mix_until_time", ",", "rollout_idx", ",", ":", "]", "=", "dataset", "[", "task", "]", "[", "4", "]", "[", ":", "mix_until_time", ",", "mixed_from_rollout", ",", ":", "]", "\n", "\n", "", "print", "(", "'Mixed {} datasets.'", ".", "format", "(", "i", "+", "1", ")", ")", "\n", "", "", "else", ":", "\n", "        ", "single_traj_len", "=", "int", "(", "args", ".", "trajectory_len", "/", "args", ".", "max_rollouts_per_task", ")", "\n", "mix_times", "=", "np", ".", "arange", "(", "0", ",", "(", "args", ".", "trajectory_len", "+", "1e-6", ")", "/", "2", ",", "single_traj_len", ")", ".", "astype", "(", "int", ")", "\n", "num_rollouts", "=", "dataset", "[", "0", "]", "[", "0", "]", ".", "shape", "[", "1", "]", "\n", "num_rollots_to_mix", "=", "int", "(", "num_rollouts", "*", "fraction", ")", "\n", "num_tasks", "=", "len", "(", "dataset", ")", "\n", "for", "i", ",", "set", "in", "enumerate", "(", "dataset", ")", ":", "\n", "            ", "rollouts_to_mix", "=", "np", ".", "random", ".", "choice", "(", "num_rollouts", ",", "num_rollots_to_mix", ")", "\n", "for", "(", "mix_start", ",", "mix_end", ")", "in", "zip", "(", "mix_times", "[", ":", "-", "1", "]", ",", "mix_times", "[", "1", ":", "]", ")", ":", "\n", "                ", "tasks_to_mix_from", "=", "np", ".", "random", ".", "choice", "(", "list", "(", "range", "(", "i", ")", ")", "+", "list", "(", "range", "(", "i", "+", "1", ",", "num_tasks", ")", ")", ",", "num_rollots_to_mix", ")", "\n", "for", "rollout_idx", ",", "task", "in", "zip", "(", "rollouts_to_mix", ",", "tasks_to_mix_from", ")", ":", "\n", "                    ", "mixed_from_rollout", "=", "np", ".", "random", ".", "choice", "(", "num_rollouts", ")", "# which rollout timestep to switch with", "\n", "set", "[", "0", "]", "[", "mix_start", ":", "mix_end", ",", "rollout_idx", ",", ":", "]", "=", "dataset", "[", "task", "]", "[", "0", "]", "[", "mix_start", ":", "mix_end", ",", "mixed_from_rollout", ",", ":", "]", "\n", "set", "[", "1", "]", "[", "mix_start", ":", "mix_end", ",", "rollout_idx", ",", ":", "]", "=", "dataset", "[", "task", "]", "[", "1", "]", "[", "mix_start", ":", "mix_end", ",", "mixed_from_rollout", ",", ":", "]", "\n", "set", "[", "2", "]", "[", "mix_start", ":", "mix_end", ",", "rollout_idx", ",", ":", "]", "=", "relabel_rollout", "(", "env", ",", "goals", "[", "i", "]", ",", "\n", "dataset", "[", "task", "]", "[", "3", "]", "[", "mix_start", ":", "mix_end", ",", "\n", "mixed_from_rollout", ",", ":", "]", ",", "\n", "dataset", "[", "task", "]", "[", "1", "]", "[", "mix_start", ":", "mix_end", ",", "\n", "mixed_from_rollout", ",", ":", "]", ")", "\n", "\n", "set", "[", "3", "]", "[", "mix_start", ":", "mix_end", ",", "rollout_idx", ",", ":", "]", "=", "dataset", "[", "task", "]", "[", "3", "]", "[", "mix_start", ":", "mix_end", ",", "mixed_from_rollout", ",", ":", "]", "\n", "set", "[", "4", "]", "[", "mix_start", ":", "mix_end", ",", "rollout_idx", ",", ":", "]", "=", "dataset", "[", "task", "]", "[", "4", "]", "[", "mix_start", ":", "mix_end", ",", "mixed_from_rollout", ",", ":", "]", "\n", "\n", "", "", "print", "(", "'Mixed {} datasets.'", ".", "format", "(", "i", "+", "1", ")", ")", "\n", "", "", "return", "dataset", ",", "goals", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.utils.offline_utils.relabel_rollout": [[388, 397], ["env.set_goal", "env.reward", "type", "numpy.vstack", "torchkit.pytorch_utils.FloatTensor", "zip", "numpy.vstack", "torchkit.pytorch_utils.get_numpy", "torchkit.pytorch_utils.get_numpy", "type", "type"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.set_goal", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.reward", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjvGeomWrapper.type", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.FloatTensor", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.get_numpy", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.get_numpy", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjvGeomWrapper.type", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjvGeomWrapper.type"], ["", "def", "relabel_rollout", "(", "env", ",", "goal", ",", "observations", ",", "actions", ")", ":", "\n", "    ", "env", ".", "set_goal", "(", "goal", ")", "\n", "rewards", "=", "[", "env", ".", "reward", "(", "obs", ",", "action", ")", "for", "(", "obs", ",", "action", ")", "in", "\n", "zip", "(", "ptu", ".", "get_numpy", "(", "observations", ")", "if", "type", "(", "observations", ")", "is", "not", "np", ".", "ndarray", "else", "observations", ",", "\n", "ptu", ".", "get_numpy", "(", "actions", ")", "if", "type", "(", "actions", ")", "is", "not", "np", ".", "ndarray", "else", "actions", ")", "]", "\n", "if", "type", "(", "observations", ")", "is", "np", ".", "ndarray", ":", "\n", "        ", "return", "np", ".", "vstack", "(", "rewards", ")", "\n", "", "else", ":", "\n", "        ", "return", "ptu", ".", "FloatTensor", "(", "np", ".", "vstack", "(", "rewards", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Rondorf_BOReL.utils.plot_learning_curves.moving_average": [[22, 36], ["range", "numpy.array", "range", "numpy.array", "np.array.append", "np.array.append", "numpy.mean", "numpy.mean", "max"], "function", ["None"], ["def", "moving_average", "(", "array", ",", "num_points", ",", "only_past", "=", "False", ")", ":", "\n", "\n", "    ", "if", "not", "only_past", ":", "\n", "        ", "ma", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_points", ",", "array", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "ma", ".", "append", "(", "np", ".", "mean", "(", "array", "[", "i", "-", "num_points", ":", "i", "]", ")", ")", "\n", "", "ma", "=", "np", ".", "array", "(", "ma", ")", "\n", "", "else", ":", "\n", "        ", "ma", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "1", ",", "array", ".", "shape", "[", "0", "]", "+", "1", ")", ":", "\n", "            ", "ma", ".", "append", "(", "np", ".", "mean", "(", "array", "[", "max", "(", "0", ",", "i", "-", "num_points", ")", ":", "i", "]", ")", ")", "\n", "", "ma", "=", "np", ".", "array", "(", "ma", ")", "\n", "\n", "", "return", "ma", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.utils.plot_learning_curves.get_array_from_event": [[38, 53], ["numpy.array", "plot_learning_curves.moving_average", "tensorflow.python.summary.summary_iterator.summary_iterator", "numpy.array", "hasattr", "len", "moving_average.append", "np.array.append"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.utils.plot_learning_curves.moving_average"], ["", "def", "get_array_from_event", "(", "event_path", ",", "tag", ",", "m", ")", ":", "\n", "    ", "arr", "=", "[", "]", "\n", "steps", "=", "[", "]", "\n", "try", ":", "\n", "        ", "for", "event", "in", "summary_iterator", "(", "event_path", ")", ":", "\n", "            ", "if", "hasattr", "(", "event", ".", "summary", ",", "'value'", ")", "and", "len", "(", "event", ".", "summary", ".", "value", ")", ">", "0", ":", "\n", "                ", "if", "event", ".", "summary", ".", "value", "[", "0", "]", ".", "tag", "==", "tag", ":", "\n", "                    ", "arr", ".", "append", "(", "event", ".", "summary", ".", "value", "[", "0", "]", ".", "simple_value", ")", "\n", "steps", ".", "append", "(", "event", ".", "step", ")", "\n", "", "", "", "", "except", ":", "\n", "        ", "pass", "\n", "\n", "", "steps", "=", "np", ".", "array", "(", "steps", ")", "\n", "arr", "=", "moving_average", "(", "np", ".", "array", "(", "arr", ")", ",", "m", ",", "only_past", "=", "True", ")", "\n", "return", "arr", ",", "steps", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.utils.plot_learning_curves.get_array_from_event_multi_episode": [[55, 81], ["len", "min", "numpy.array().sum", "numpy.array", "plot_learning_curves.moving_average", "tensorflow.python.summary.summary_iterator.summary_iterator", "len", "print", "range", "numpy.unique", "len", "numpy.array", "hasattr", "enumerate", "len", "len", "r1[].append", "numpy.array", "np.array.append"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.utils.plot_learning_curves.moving_average"], ["", "def", "get_array_from_event_multi_episode", "(", "event_path", ",", "tag", ",", "rollout_indices", ",", "m", ")", ":", "\n", "\n", "    ", "num_rollouts", "=", "len", "(", "rollout_indices", ")", "\n", "r1", "=", "[", "[", "]", "for", "_", "in", "range", "(", "num_rollouts", ")", "]", "\n", "steps", "=", "[", "]", "\n", "\n", "try", ":", "\n", "        ", "for", "event", "in", "summary_iterator", "(", "event_path", ")", ":", "\n", "            ", "if", "hasattr", "(", "event", ".", "summary", ",", "'value'", ")", "and", "len", "(", "event", ".", "summary", ".", "value", ")", ">", "0", ":", "\n", "                ", "for", "i", ",", "n", "in", "enumerate", "(", "rollout_indices", ")", ":", "\n", "                    ", "if", "event", ".", "summary", ".", "value", "[", "0", "]", ".", "tag", "==", "tag", "+", "'{}'", ".", "format", "(", "n", ")", ":", "\n", "                        ", "r1", "[", "i", "]", ".", "append", "(", "event", ".", "summary", ".", "value", "[", "0", "]", ".", "simple_value", ")", "\n", "if", "i", "==", "0", ":", "\n", "                            ", "steps", ".", "append", "(", "event", ".", "step", ")", "\n", "", "", "", "", "", "", "except", ":", "\n", "        ", "pass", "\n", "\n", "", "if", "len", "(", "np", ".", "unique", "(", "[", "len", "(", "r", ")", "for", "r", "in", "r1", "]", ")", ")", ">", "1", ":", "\n", "        ", "print", "(", "'warning: different lengths found'", ")", "\n", "", "min_len", "=", "min", "(", "[", "len", "(", "r", ")", "for", "r", "in", "r1", "]", ")", "\n", "arr", "=", "np", ".", "array", "(", "[", "np", ".", "array", "(", "r", ")", "[", ":", "min_len", "]", "for", "r", "in", "r1", "]", ")", ".", "sum", "(", "axis", "=", "0", ")", "# sum over all rollouts", "\n", "steps", "=", "np", ".", "array", "(", "steps", ")", "\n", "\n", "arr", "=", "moving_average", "(", "arr", ",", "m", ",", "only_past", "=", "True", ")", "\n", "\n", "return", "arr", ",", "steps", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.utils.plot_learning_curves.plot_learning_curve": [[86, 110], ["matplotlib.pyplot.plot", "numpy.sum", "numpy.std", "matplotlib.pyplot.gca().fill_between", "numpy.sum", "matplotlib.pyplot.plot", "len", "matplotlib.pyplot.gca", "p[].get_color", "p[].get_color"], "function", ["None"], ["", "def", "plot_learning_curve", "(", "x", ",", "y", ",", "label", ",", "mode", "=", "'std'", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"\n    Takes as input an x-value (number of frames)\n    and a matrix of y-values (rows: runs, columns: results)\n    \"\"\"", "\n", "\n", "y", "=", "y", "[", ":", ",", ":", "len", "(", "x", ")", "]", "\n", "\n", "# get the mean (only where we have data) and compute moving average", "\n", "mean", "=", "np", ".", "sum", "(", "y", ",", "axis", "=", "0", ")", "/", "(", "np", ".", "sum", "(", "y", "!=", "0", ",", "axis", "=", "0", ")", "+", "1e-6", ")", "\n", "p", "=", "plt", ".", "plot", "(", "x", ",", "mean", ",", "linewidth", "=", "2", ",", "label", "=", "label", ",", "\n", "c", "=", "kwargs", "[", "'color'", "]", "if", "'color'", "in", "kwargs", "else", "cols_deep", "[", "0", "]", ")", "\n", "\n", "if", "mode", "==", "'std'", ":", "\n", "# compute standard deviation", "\n", "        ", "std", "=", "np", ".", "std", "(", "y", ",", "axis", "=", "0", ")", "\n", "# compute confidence intervals", "\n", "cis", "=", "[", "mean", "-", "std", ",", "mean", "+", "std", "]", "\n", "\n", "plt", ".", "gca", "(", ")", ".", "fill_between", "(", "x", ",", "cis", "[", "0", "]", ",", "cis", "[", "1", "]", ",", "facecolor", "=", "p", "[", "0", "]", ".", "get_color", "(", ")", ",", "alpha", "=", "0.1", ")", "\n", "", "elif", "mode", "==", "'all'", ":", "\n", "        ", "plt", ".", "plot", "(", "x", ",", "y", ".", "T", ",", "linewidth", "=", "2", ",", "alpha", "=", "0.3", ",", "c", "=", "p", "[", "0", "]", ".", "get_color", "(", ")", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.utils.plot_learning_curves.plot_tb_results": [[112, 147], ["os.path.join", "numpy.array", "numpy.vstack", "plot_learning_curves.plot_learning_curve", "os.getcwd", "os.path.join", "np.vstack.append", "len", "min", "os.listdir", "folder.startswith", "plot_learning_curves.get_array_from_event_multi_episode", "plot_learning_curves.get_array_from_event", "len", "numpy.unique", "os.path.join", "os.path.join", "os.listdir", "event.startswith"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.join", "home.repos.pwc.inspect_result.Rondorf_BOReL.utils.plot_learning_curves.plot_learning_curve", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.join", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.startswith", "home.repos.pwc.inspect_result.Rondorf_BOReL.utils.plot_learning_curves.get_array_from_event_multi_episode", "home.repos.pwc.inspect_result.Rondorf_BOReL.utils.plot_learning_curves.get_array_from_event", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.join", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.join", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.startswith"], ["", "", "def", "plot_tb_results", "(", "env_name", ",", "exp_name", ",", "tag", ",", "m", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"\n\n    :param env_name:            name of the environment\n    :param exp_name:            in env_name folder, which experiment\n    :param m:                   parameter for temporally smoothing the curve\n    :return:\n    \"\"\"", "\n", "\n", "results_directory", "=", "os", ".", "path", ".", "join", "(", "os", ".", "getcwd", "(", ")", ",", "'../logs/{}'", ".", "format", "(", "env_name", ")", ")", "\n", "exp_ids", "=", "[", "folder", "for", "folder", "in", "os", ".", "listdir", "(", "results_directory", ")", "if", "\n", "folder", ".", "startswith", "(", "exp_name", "+", "'__'", ")", "]", "\n", "\n", "arrays", "=", "[", "]", "\n", "for", "exp_id", "in", "exp_ids", ":", "\n", "        ", "exp_dir", "=", "os", ".", "path", ".", "join", "(", "results_directory", ",", "exp_id", ")", "\n", "tf_event", "=", "[", "event", "for", "event", "in", "os", ".", "listdir", "(", "exp_dir", ")", "if", "event", ".", "startswith", "(", "'event'", ")", "]", "[", "0", "]", "\n", "\n", "if", "kwargs", "[", "'multi_episode'", "]", "==", "True", ":", "\n", "            ", "arr", ",", "steps", "=", "get_array_from_event_multi_episode", "(", "os", ".", "path", ".", "join", "(", "exp_dir", ",", "tf_event", ")", ",", "tag", "=", "tag", ",", "\n", "rollout_indices", "=", "kwargs", "[", "'rollout_indices'", "]", ",", "m", "=", "m", ")", "\n", "", "else", ":", "\n", "            ", "arr", ",", "steps", "=", "get_array_from_event", "(", "os", ".", "path", ".", "join", "(", "exp_dir", ",", "tf_event", ")", ",", "tag", "=", "tag", ",", "m", "=", "m", ")", "\n", "\n", "", "arrays", ".", "append", "(", "arr", ")", "\n", "\n", "", "arr_lens", "=", "np", ".", "array", "(", "[", "len", "(", "array", ")", "for", "array", "in", "arrays", "]", ")", "\n", "if", "len", "(", "np", ".", "unique", "(", "arr_lens", ")", ")", ">", "1", ":", "\n", "        ", "min_len", "=", "min", "(", "arr_lens", ")", "\n", "arrays", "=", "[", "array", "[", ":", "min_len", "]", "for", "array", "in", "arrays", "]", "\n", "steps", "=", "steps", "[", ":", "min_len", "]", "\n", "", "arrays", "=", "np", ".", "vstack", "(", "arrays", ")", "\n", "\n", "plot_learning_curve", "(", "steps", ",", "arrays", ",", "label", "=", "kwargs", "[", "'label'", "]", "if", "'label'", "in", "kwargs", "else", "exp_name", ",", "\n", "color", "=", "kwargs", "[", "'color'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.utils.plot_learning_curves.compare": [[149, 180], ["range", "matplotlib.pyplot.ylabel", "matplotlib.pyplot.xlabel", "matplotlib.pyplot.title", "matplotlib.pyplot.ticklabel_format", "matplotlib.pyplot.gca().xaxis.get_offset_text", "plt.gca().xaxis.get_offset_text.set_fontsize", "matplotlib.pyplot.legend", "matplotlib.pyplot.tight_layout", "matplotlib.pyplot.gca().tick_params", "matplotlib.pyplot.gca().tick_params", "len", "plot_learning_curves.plot_tb_results", "matplotlib.pyplot.xlim", "matplotlib.pyplot.savefig", "matplotlib.pyplot.show", "matplotlib.pyplot.gca", "matplotlib.pyplot.gca", "matplotlib.pyplot.gca"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.title", "home.repos.pwc.inspect_result.Rondorf_BOReL.utils.plot_learning_curves.plot_tb_results"], ["", "def", "compare", "(", "env_names", ",", "exp_names", ",", "tags", ",", "m", ",", "ylabel", ",", "save_path", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "    ", "for", "i", "in", "range", "(", "len", "(", "env_names", ")", ")", ":", "\n", "        ", "plot_tb_results", "(", "env_names", "[", "i", "]", ",", "exp_names", "[", "i", "]", ",", "tags", "[", "i", "]", ",", "m", ",", "\n", "multi_episode", "=", "kwargs", "[", "'multi_episode'", "]", "[", "i", "]", ",", "\n", "rollout_indices", "=", "kwargs", "[", "'rollout_indices'", "]", "[", "i", "]", ",", "\n", "label", "=", "kwargs", "[", "'labels'", "]", "[", "i", "]", ",", "color", "=", "kwargs", "[", "'colors'", "]", "[", "i", "]", ")", "\n", "\n", "", "plt", ".", "ylabel", "(", "ylabel", ",", "fontsize", "=", "20", ")", "\n", "plt", ".", "xlabel", "(", "'Frames'", ",", "fontsize", "=", "15", ")", "\n", "# plt.xlabel('Train Steps', fontsize=15)", "\n", "# plt.title('Gridworld', fontsize=20)", "\n", "plt", ".", "title", "(", "'Semi-circle'", ",", "fontsize", "=", "20", ")", "\n", "from", "matplotlib", ".", "ticker", "import", "ScalarFormatter", "\n", "plt", ".", "ticklabel_format", "(", "axis", "=", "\"x\"", ",", "style", "=", "\"sci\"", ",", "scilimits", "=", "(", "0", ",", "0", ")", ")", "\n", "tx", "=", "plt", ".", "gca", "(", ")", ".", "xaxis", ".", "get_offset_text", "(", ")", "\n", "tx", ".", "set_fontsize", "(", "15", ")", "\n", "\n", "if", "'truncate_at'", "in", "kwargs", ":", "\n", "        ", "plt", ".", "xlim", "(", "[", "0.", ",", "kwargs", "[", "'truncate_at'", "]", "]", ")", "\n", "\n", "\n", "# plt.legend(fontsize=18, loc='lower right', prop={'size': 16})", "\n", "", "plt", ".", "legend", "(", "fontsize", "=", "18", ",", "loc", "=", "'upper right'", ",", "prop", "=", "{", "'size'", ":", "16", "}", ")", "\n", "plt", ".", "tight_layout", "(", ")", "\n", "plt", ".", "gca", "(", ")", ".", "tick_params", "(", "axis", "=", "'both'", ",", "which", "=", "'major'", ",", "labelsize", "=", "15", ")", "\n", "plt", ".", "gca", "(", ")", ".", "tick_params", "(", "axis", "=", "'both'", ",", "which", "=", "'minor'", ",", "labelsize", "=", "15", ")", "\n", "\n", "if", "save_path", "is", "not", "None", ":", "\n", "        ", "plt", ".", "savefig", "(", "save_path", ")", "\n", "", "else", ":", "\n", "        ", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.utils.tb_logger.TBLogger.__init__": [[9, 67], ["hasattr", "os.path.join", "tensorboardX.SummaryWriter", "print", "os.path.abspath", "os.path.join", "os.path.exists", "os.path.join", "os.path.exists", "os.makedirs", "open", "config.update", "json.dump", "datetime.datetime.now().strftime", "datetime.datetime.now().strftime", "os.path.join", "os.mkdir", "os.path.join", "os.path.join", "str", "os.path.dirname", "os.path.split", "os.mkdir", "os.mkdir", "str", "datetime.datetime.now", "datetime.datetime.now", "os.path.realpath", "len", "os.path.split", "vars().items", "vars"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.join", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.join", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.join", "home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.GymObject.update", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.join", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.join", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.join", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.split", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.split"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "\n", "# initialise name of the file (optional(prefix) + seed + start time)", "\n", "        ", "cql_ext", "=", "'_cql'", "if", "'use_cql'", "in", "args", "and", "args", ".", "use_cql", "else", "''", "\n", "if", "hasattr", "(", "args", ",", "'output_file_prefix'", ")", ":", "\n", "            ", "self", ".", "output_name", "=", "args", ".", "output_file_prefix", "+", "cql_ext", "+", "'__'", "+", "str", "(", "args", ".", "seed", ")", "+", "'__'", "+", "datetime", ".", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "'%d_%m_%H_%M_%S'", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "output_name", "=", "str", "(", "args", ".", "seed", ")", "+", "'__'", "+", "datetime", ".", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "'%d_%m_%H_%M_%S'", ")", "\n", "\n", "# get path to log directory (and create it if necessary)", "\n", "", "try", ":", "\n", "            ", "log_dir", "=", "args", ".", "results_log_dir", "\n", "", "except", "AttributeError", ":", "\n", "            ", "log_dir", "=", "args", "[", "'results_log_dir'", "]", "\n", "\n", "", "if", "log_dir", "is", "None", ":", "\n", "            ", "log_dir", "=", "os", ".", "path", ".", "abspath", "(", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "os", ".", "path", ".", "realpath", "(", "__file__", ")", ")", ",", "os", ".", "pardir", ")", ")", "\n", "log_dir", "=", "os", ".", "path", ".", "join", "(", "log_dir", ",", "'logs'", ")", "\n", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "log_dir", ")", ":", "\n", "            ", "try", ":", "\n", "                ", "os", ".", "mkdir", "(", "log_dir", ")", "\n", "", "except", ":", "\n", "                ", "dir_path_head", ",", "dir_path_tail", "=", "os", ".", "path", ".", "split", "(", "log_dir", ")", "\n", "if", "len", "(", "dir_path_tail", ")", "==", "0", ":", "\n", "                    ", "dir_path_head", ",", "dir_path_tail", "=", "os", ".", "path", ".", "split", "(", "dir_path_head", ")", "\n", "", "os", ".", "mkdir", "(", "dir_path_head", ")", "\n", "os", ".", "mkdir", "(", "log_dir", ")", "\n", "\n", "# create a subdirectory for the environment", "\n", "", "", "try", ":", "\n", "            ", "env_dir", "=", "os", ".", "path", ".", "join", "(", "log_dir", ",", "'{}'", ".", "format", "(", "args", ".", "env_name", ")", ")", "\n", "", "except", ":", "\n", "            ", "env_dir", "=", "os", ".", "path", ".", "join", "(", "log_dir", ",", "'{}'", ".", "format", "(", "args", "[", "\"env_name\"", "]", ")", ")", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "env_dir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "env_dir", ")", "\n", "\n", "# create a subdirectory for the exp_label (usually the method name)", "\n", "# exp_dir = os.path.join(env_dir, exp_label)", "\n", "# if not os.path.exists(exp_dir):", "\n", "#     os.makedirs(exp_dir)", "\n", "\n", "# finally, get full path of where results are stored", "\n", "", "self", ".", "full_output_folder", "=", "os", ".", "path", ".", "join", "(", "env_dir", ",", "self", ".", "output_name", ")", "\n", "\n", "self", ".", "writer", "=", "SummaryWriter", "(", "self", ".", "full_output_folder", ")", "\n", "\n", "print", "(", "'logging under'", ",", "self", ".", "full_output_folder", ")", "\n", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "full_output_folder", ",", "'online_config.json'", ")", ",", "'w'", ")", "as", "f", ":", "\n", "            ", "try", ":", "\n", "                ", "config", "=", "{", "k", ":", "v", "for", "(", "k", ",", "v", ")", "in", "vars", "(", "args", ")", ".", "items", "(", ")", "if", "k", "!=", "'device'", "}", "\n", "", "except", ":", "\n", "                ", "config", "=", "args", "\n", "", "config", ".", "update", "(", "device", "=", "ptu", ".", "device", ".", "type", ")", "\n", "json", ".", "dump", "(", "config", ",", "f", ",", "indent", "=", "2", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.Rondorf_BOReL.utils.helpers.FeatureExtractor.__init__": [[185, 193], ["torch.Module.__init__", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.__init__"], ["def", "__init__", "(", "self", ",", "input_size", ",", "output_size", ",", "activation_function", ")", ":", "\n", "        ", "super", "(", "FeatureExtractor", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "output_size", "=", "output_size", "\n", "self", ".", "activation_function", "=", "activation_function", "\n", "if", "self", ".", "output_size", "!=", "0", ":", "\n", "            ", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "input_size", ",", "output_size", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "fc", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.utils.helpers.FeatureExtractor.forward": [[194, 200], ["helpers.FeatureExtractor.activation_function", "torchkit.zeros", "helpers.FeatureExtractor.fc"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.zeros"], ["", "", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "if", "self", ".", "output_size", "!=", "0", ":", "\n", "            ", "return", "self", ".", "activation_function", "(", "self", ".", "fc", "(", "inputs", ")", ")", "\n", "", "else", ":", "\n", "# return torchkit.zeros(0, ).to(device)", "\n", "            ", "return", "ptu", ".", "zeros", "(", "0", ",", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.utils.helpers.vertices": [[14, 17], ["list", "itertools.product"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.ListableAPIResource.list"], ["def", "vertices", "(", "N", ")", ":", "\n", "    ", "''' N-dimensional cube vertices -- for latent space debug '''", "\n", "return", "list", "(", "product", "(", "(", "1", ",", "-", "1", ")", ",", "repeat", "=", "N", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.utils.helpers.get_dim": [[19, 30], ["isinstance", "isinstance", "isinstance", "sum", "hasattr", "helpers.get_dim"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.utils.helpers.get_dim"], ["", "def", "get_dim", "(", "space", ")", ":", "\n", "    ", "if", "isinstance", "(", "space", ",", "Box", ")", ":", "\n", "        ", "return", "space", ".", "low", ".", "size", "\n", "", "elif", "isinstance", "(", "space", ",", "Discrete", ")", ":", "\n", "        ", "return", "space", ".", "n", "\n", "", "elif", "isinstance", "(", "space", ",", "Tuple", ")", ":", "\n", "        ", "return", "sum", "(", "get_dim", "(", "subspace", ")", "for", "subspace", "in", "space", ".", "spaces", ")", "\n", "", "elif", "hasattr", "(", "space", ",", "'flat_dim'", ")", ":", "\n", "        ", "return", "space", ".", "flat_dim", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.utils.helpers.env_step": [[32, 42], ["torchkit.get_numpy", "env.step", "torchkit.from_numpy().view", "torchkit.FloatTensor().view", "torchkit.from_numpy().view", "ptu.get_numpy.squeeze", "torchkit.from_numpy", "torchkit.FloatTensor", "torchkit.from_numpy", "numpy.array"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.get_numpy", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.step", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.from_numpy", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.FloatTensor", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.from_numpy"], ["", "", "def", "env_step", "(", "env", ",", "action", ")", ":", "\n", "# action should be of size: batch x 1", "\n", "    ", "action", "=", "ptu", ".", "get_numpy", "(", "action", ".", "squeeze", "(", "dim", "=", "-", "1", ")", ")", "\n", "next_obs", ",", "reward", ",", "done", ",", "info", "=", "env", ".", "step", "(", "action", ")", "\n", "# move to torch", "\n", "next_obs", "=", "ptu", ".", "from_numpy", "(", "next_obs", ")", ".", "view", "(", "-", "1", ",", "next_obs", ".", "shape", "[", "0", "]", ")", "\n", "reward", "=", "ptu", ".", "FloatTensor", "(", "[", "reward", "]", ")", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "done", "=", "ptu", ".", "from_numpy", "(", "np", ".", "array", "(", "done", ",", "dtype", "=", "int", ")", ")", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "\n", "return", "next_obs", ",", "reward", ",", "done", ",", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.utils.helpers.unpack_batch": [[44, 52], ["None"], "function", ["None"], ["", "def", "unpack_batch", "(", "batch", ")", ":", "\n", "    ", "''' unpack a batch and return individual elements - corresponds to replay_buffer object'''", "\n", "obs", "=", "batch", "[", "'observations'", "]", "[", "None", ",", "...", "]", "\n", "actions", "=", "batch", "[", "'actions'", "]", "[", "None", ",", "...", "]", "\n", "rewards", "=", "batch", "[", "'rewards'", "]", "[", "None", ",", "...", "]", "\n", "next_obs", "=", "batch", "[", "'next_observations'", "]", "[", "None", ",", "...", "]", "\n", "terms", "=", "batch", "[", "'terminals'", "]", "[", "None", ",", "...", "]", "\n", "return", "obs", ",", "actions", ",", "rewards", ",", "next_obs", ",", "terms", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.utils.helpers.select_action": [[54, 73], ["helpers.get_augmented_obs", "policy.act", "action.to.to", "isinstance", "isinstance"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.utils.helpers.get_augmented_obs", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjDataWrapper.act"], ["", "def", "select_action", "(", "args", ",", "\n", "policy", ",", "\n", "obs", ",", "\n", "deterministic", ",", "\n", "task_sample", "=", "None", ",", "task_mean", "=", "None", ",", "task_logvar", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Select action using the policy.\n    \"\"\"", "\n", "\n", "# augment the observation with the latent distribution", "\n", "obs", "=", "get_augmented_obs", "(", "args", ",", "obs", ",", "task_sample", ",", "task_mean", ",", "task_logvar", ")", "\n", "action", "=", "policy", ".", "act", "(", "obs", ",", "deterministic", ")", "\n", "if", "isinstance", "(", "action", ",", "list", ")", "or", "isinstance", "(", "action", ",", "tuple", ")", ":", "\n", "        ", "value", ",", "action", ",", "action_log_prob", "=", "action", "\n", "", "else", ":", "\n", "        ", "value", "=", "None", "\n", "action_log_prob", "=", "None", "\n", "", "action", "=", "action", ".", "to", "(", "ptu", ".", "device", ")", "\n", "return", "value", ",", "action", ",", "action_log_prob", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.utils.helpers.get_augmented_obs": [[75, 97], ["obs.clone", "torchkit.zeros", "torch.cat", "torch.cat", "task_mu.reshape.reshape", "task_std.reshape.reshape", "torch.cat", "torch.cat"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.core.serializable.Serializable.clone", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.zeros"], ["", "def", "get_augmented_obs", "(", "args", ",", "obs", ",", "\n", "posterior_sample", "=", "None", ",", "task_mu", "=", "None", ",", "task_std", "=", "None", ")", ":", "\n", "\n", "    ", "obs_augmented", "=", "obs", ".", "clone", "(", ")", "\n", "\n", "if", "posterior_sample", "is", "None", ":", "\n", "        ", "sample_embeddings", "=", "False", "\n", "", "else", ":", "\n", "        ", "sample_embeddings", "=", "args", ".", "sample_embeddings", "\n", "\n", "", "if", "not", "args", ".", "condition_policy_on_state", ":", "\n", "# obs_augmented = torchkit.zeros(0,).to(device)", "\n", "        ", "obs_augmented", "=", "ptu", ".", "zeros", "(", "0", ",", ")", "\n", "\n", "", "if", "sample_embeddings", "and", "(", "posterior_sample", "is", "not", "None", ")", ":", "\n", "        ", "obs_augmented", "=", "torch", ".", "cat", "(", "(", "obs_augmented", ",", "posterior_sample", ")", ",", "dim", "=", "1", ")", "\n", "", "elif", "(", "task_mu", "is", "not", "None", ")", "and", "(", "task_std", "is", "not", "None", ")", ":", "\n", "        ", "task_mu", "=", "task_mu", ".", "reshape", "(", "(", "-", "1", ",", "task_mu", ".", "shape", "[", "-", "1", "]", ")", ")", "\n", "task_std", "=", "task_std", ".", "reshape", "(", "(", "-", "1", ",", "task_std", ".", "shape", "[", "-", "1", "]", ")", ")", "\n", "obs_augmented", "=", "torch", ".", "cat", "(", "(", "obs_augmented", ",", "task_mu", ",", "task_std", ")", ",", "dim", "=", "-", "1", ")", "\n", "\n", "", "return", "obs_augmented", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.utils.helpers.update_encoding": [[99, 113], ["encoder.reset_hidden", "torch.no_grad", "torch.no_grad", "encoder", "action.float"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.models.encoder.RNNEncoder.reset_hidden"], ["", "def", "update_encoding", "(", "encoder", ",", "obs", ",", "action", ",", "reward", ",", "done", ",", "hidden_state", ")", ":", "\n", "\n", "# reset hidden state of the recurrent net when we reset the task", "\n", "    ", "if", "done", "is", "not", "None", ":", "\n", "        ", "hidden_state", "=", "encoder", ".", "reset_hidden", "(", "hidden_state", ",", "done", ")", "\n", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "# size should be (batch, dim)", "\n", "        ", "task_sample", ",", "task_mean", ",", "task_logvar", ",", "hidden_state", "=", "encoder", "(", "actions", "=", "action", ".", "float", "(", ")", ",", "\n", "states", "=", "obs", ",", "\n", "rewards", "=", "reward", ",", "\n", "hidden_state", "=", "hidden_state", ",", "\n", "return_prior", "=", "False", ")", "\n", "\n", "", "return", "task_sample", ",", "task_mean", ",", "task_logvar", ",", "hidden_state", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.utils.helpers.seed": [[115, 119], ["random.seed", "torch.random.manual_seed", "torch.random.manual_seed", "numpy.random.seed"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.seed", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.seed"], ["", "def", "seed", "(", "seed", ")", ":", "\n", "    ", "random", ".", "seed", "(", "seed", ")", "\n", "torch", ".", "random", ".", "manual_seed", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.utils.helpers.update_linear_schedule": [[121, 126], ["float"], "function", ["None"], ["", "def", "update_linear_schedule", "(", "optimizer", ",", "epoch", ",", "total_num_epochs", ",", "initial_lr", ")", ":", "\n", "    ", "\"\"\"Decreases the learning rate linearly\"\"\"", "\n", "lr", "=", "initial_lr", "-", "(", "initial_lr", "*", "(", "epoch", "/", "float", "(", "total_num_epochs", ")", ")", ")", "\n", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "        ", "param_group", "[", "'lr'", "]", "=", "lr", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.utils.helpers.recompute_embeddings": [[128, 180], ["policy_storage.hidden_states[].detach", "range", "policy_storage.task_samples[].detach().clone", "policy_storage.task_mu[].detach().clone", "policy_storage.task_logvar[].detach().clone", "encoder.reset_hidden", "encoder", "task_sample.append", "task_mean.append", "task_logvar.append", "policy_storage.task_samples[].detach", "policy_storage.task_mu[].detach", "policy_storage.task_logvar[].detach", "policy_storage.actions.float", "warnings.warn", "pdb.set_trace", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.core.serializable.Serializable.clone", "home.repos.pwc.inspect_result.Rondorf_BOReL.core.serializable.Serializable.clone", "home.repos.pwc.inspect_result.Rondorf_BOReL.core.serializable.Serializable.clone", "home.repos.pwc.inspect_result.Rondorf_BOReL.models.encoder.RNNEncoder.reset_hidden"], ["", "", "def", "recompute_embeddings", "(", "\n", "policy_storage", ",", "\n", "encoder", ",", "\n", "sample", ",", "\n", "update_idx", ",", "\n", ")", ":", "\n", "# get the prior", "\n", "    ", "task_sample", "=", "[", "policy_storage", ".", "task_samples", "[", "0", "]", ".", "detach", "(", ")", ".", "clone", "(", ")", "]", "\n", "task_mean", "=", "[", "policy_storage", ".", "task_mu", "[", "0", "]", ".", "detach", "(", ")", ".", "clone", "(", ")", "]", "\n", "task_logvar", "=", "[", "policy_storage", ".", "task_logvar", "[", "0", "]", ".", "detach", "(", ")", ".", "clone", "(", ")", "]", "\n", "\n", "task_sample", "[", "0", "]", ".", "requires_grad", "=", "True", "\n", "task_mean", "[", "0", "]", ".", "requires_grad", "=", "True", "\n", "task_logvar", "[", "0", "]", ".", "requires_grad", "=", "True", "\n", "\n", "# loop through experience and update hidden state", "\n", "# (we need to loop because we sometimes need to reset the hidden state)", "\n", "h", "=", "policy_storage", ".", "hidden_states", "[", "0", "]", ".", "detach", "(", ")", "\n", "for", "i", "in", "range", "(", "policy_storage", ".", "actions", ".", "shape", "[", "0", "]", ")", ":", "\n", "# reset hidden state of the GRU when we reset the task", "\n", "        ", "reset_task", "=", "policy_storage", ".", "done", "[", "i", "+", "1", "]", "\n", "h", "=", "encoder", ".", "reset_hidden", "(", "h", ",", "reset_task", ")", "\n", "\n", "ts", ",", "tm", ",", "tl", ",", "h", "=", "encoder", "(", "policy_storage", ".", "actions", ".", "float", "(", ")", "[", "i", ":", "i", "+", "1", "]", ",", "\n", "policy_storage", ".", "next_obs_raw", "[", "i", ":", "i", "+", "1", "]", ",", "\n", "policy_storage", ".", "rewards_raw", "[", "i", ":", "i", "+", "1", "]", ",", "\n", "h", ",", "\n", "sample", "=", "sample", ",", "\n", "return_prior", "=", "False", "\n", ")", "\n", "\n", "# print(i, reset_task.sum())", "\n", "# print(i, (policy_storage.task_mu[i + 1] - tm).sum())", "\n", "# print(i, (policy_storage.task_logvar[i + 1] - tl).sum())", "\n", "# print(i, (policy_storage.hidden_states[i + 1] - h).sum())", "\n", "\n", "task_sample", ".", "append", "(", "ts", ")", "\n", "task_mean", ".", "append", "(", "tm", ")", "\n", "task_logvar", ".", "append", "(", "tl", ")", "\n", "\n", "", "if", "update_idx", "==", "0", ":", "\n", "        ", "try", ":", "\n", "            ", "assert", "(", "torch", ".", "cat", "(", "policy_storage", ".", "task_mu", ")", "-", "torch", ".", "cat", "(", "task_mean", ")", ")", ".", "sum", "(", ")", "==", "0", "\n", "assert", "(", "torch", ".", "cat", "(", "policy_storage", ".", "task_logvar", ")", "-", "torch", ".", "cat", "(", "task_logvar", ")", ")", ".", "sum", "(", ")", "==", "0", "\n", "", "except", "AssertionError", ":", "\n", "            ", "warnings", ".", "warn", "(", "'You are not recomputing the embeddings correctly!'", ")", "\n", "import", "pdb", "\n", "pdb", ".", "set_trace", "(", ")", "\n", "\n", "", "", "policy_storage", ".", "task_samples", "=", "task_sample", "\n", "policy_storage", ".", "task_mu", "=", "task_mean", "\n", "policy_storage", ".", "task_logvar", "=", "task_logvar", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.utils.helpers.sample_gaussian": [[202, 212], ["torch.exp", "torch.exp", "torch.randn_like", "torch.randn_like", "torch.randn_like.mul().add_", "torch.exp().repeat", "torch.exp().repeat", "torch.randn_like", "torch.randn_like", "mu.repeat.repeat", "torch.randn_like.mul().add_", "torch.randn_like.mul", "torch.exp", "torch.exp", "torch.randn_like.mul"], "function", ["None"], ["", "", "", "def", "sample_gaussian", "(", "mu", ",", "logvar", ",", "num", "=", "None", ")", ":", "\n", "    ", "if", "num", "is", "None", ":", "\n", "        ", "std", "=", "torch", ".", "exp", "(", "0.5", "*", "logvar", ")", "\n", "eps", "=", "torch", ".", "randn_like", "(", "std", ")", "\n", "return", "eps", ".", "mul", "(", "std", ")", ".", "add_", "(", "mu", ")", "\n", "", "else", ":", "\n", "        ", "std", "=", "torch", ".", "exp", "(", "0.5", "*", "logvar", ")", ".", "repeat", "(", "num", ",", "1", ")", "\n", "eps", "=", "torch", ".", "randn_like", "(", "std", ")", "\n", "mu", "=", "mu", ".", "repeat", "(", "num", ",", "1", ")", "\n", "return", "eps", ".", "mul", "(", "std", ")", ".", "add_", "(", "mu", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.utils.helpers.save_obj": [[214, 218], ["os.path.join", "open", "pickle.dump"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.join"], ["", "", "def", "save_obj", "(", "obj", ",", "folder", ",", "name", ")", ":", "\n", "    ", "filename", "=", "os", ".", "path", ".", "join", "(", "folder", ",", "name", "+", "'.pkl'", ")", "\n", "with", "open", "(", "filename", ",", "'wb'", ")", "as", "f", ":", "\n", "        ", "pickle", ".", "dump", "(", "obj", ",", "f", ",", "pickle", ".", "HIGHEST_PROTOCOL", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.utils.helpers.load_obj": [[220, 224], ["os.path.join", "open", "pickle.load"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.join", "home.repos.pwc.inspect_result.Rondorf_BOReL.envs.registration.load"], ["", "", "def", "load_obj", "(", "folder", ",", "name", ")", ":", "\n", "    ", "filename", "=", "os", ".", "path", ".", "join", "(", "folder", ",", "name", "+", "'.pkl'", ")", "\n", "with", "open", "(", "filename", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "return", "pickle", ".", "load", "(", "f", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Rondorf_BOReL.utils.config_utils.save_config_file": [[7, 15], ["open", "config.update", "json.dump", "os.path.join", "vars().items", "vars"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.GymObject.update", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.join"], ["def", "save_config_file", "(", "args", ",", "path", ")", ":", "\n", "    ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "path", ",", "'online_config.json'", ")", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "try", ":", "\n", "            ", "config", "=", "{", "k", ":", "v", "for", "(", "k", ",", "v", ")", "in", "vars", "(", "args", ")", ".", "items", "(", ")", "if", "k", "!=", "'device'", "}", "\n", "", "except", ":", "\n", "            ", "config", "=", "args", "\n", "", "config", ".", "update", "(", "device", "=", "ptu", ".", "device", ".", "type", ")", "\n", "json", ".", "dump", "(", "config", ",", "f", ",", "indent", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.utils.config_utils.load_config_file": [[17, 22], ["open", "json.load", "argparse.Namespace", "os.path.join"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.envs.registration.load", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.join"], ["", "", "def", "load_config_file", "(", "path", ")", ":", "\n", "    ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "path", ")", ")", "as", "f", ":", "\n", "        ", "config", "=", "json", ".", "load", "(", "f", ")", "\n", "args", "=", "Namespace", "(", "**", "config", ")", "\n", "", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.utils.config_utils.merge_configs": [[24, 33], ["merged_arguments.__dict__.update"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.GymObject.update"], ["", "def", "merge_configs", "(", "*", "args", ")", ":", "\n", "    ", "'''\n    Merges multiple Namespace objects created via parser.parse_args()\n    '''", "\n", "merged_arguments", "=", "args", "[", "0", "]", "\n", "for", "arg", "in", "args", ":", "\n", "        ", "merged_arguments", ".", "__dict__", ".", "update", "(", "arg", ".", "__dict__", ")", "\n", "\n", "", "return", "merged_arguments", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.utils.evaluation.set_default_mpl": [[23, 43], ["cycler", "matplotlib.rc", "matplotlib.rc", "matplotlib.rc", "matplotlib.rc", "matplotlib.rc", "matplotlib.rcParams.update", "matplotlib.rcParams.update", "matplotlib.rcParams.update", "matplotlib.rcParams.update", "matplotlib.rcParams.update", "matplotlib.rcParams.update"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.GymObject.update", "home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.GymObject.update", "home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.GymObject.update", "home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.GymObject.update", "home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.GymObject.update", "home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.GymObject.update"], ["def", "set_default_mpl", "(", ")", ":", "\n", "    ", "from", "matplotlib", "import", "cycler", "\n", "colors", "=", "cycler", "(", "'color'", ",", "\n", "[", "'#EE6666'", ",", "'#3388BB'", ",", "'#9988DD'", ",", "\n", "'#EECC55'", ",", "'#88BB44'", ",", "'#FFBBBB'", "]", ")", "\n", "plt", ".", "rc", "(", "'axes'", ",", "facecolor", "=", "'#E6E6E6'", ",", "edgecolor", "=", "'none'", ",", "\n", "axisbelow", "=", "True", ",", "grid", "=", "True", ",", "prop_cycle", "=", "colors", ")", "\n", "plt", ".", "rc", "(", "'grid'", ",", "color", "=", "'w'", ",", "linestyle", "=", "'solid'", ")", "\n", "# plt.rc('xtick', direction='out', color='gray')", "\n", "plt", ".", "rc", "(", "'xtick'", ",", "direction", "=", "'out'", ",", "color", "=", "'k'", ")", "\n", "# plt.rc('ytick', direction='out', color='gray')", "\n", "plt", ".", "rc", "(", "'ytick'", ",", "direction", "=", "'out'", ",", "color", "=", "'k'", ")", "\n", "plt", ".", "rc", "(", "'patch'", ",", "edgecolor", "=", "'#E6E6E6'", ")", "\n", "\n", "plt", ".", "rcParams", ".", "update", "(", "{", "'font.size'", ":", "20", "}", ")", "\n", "plt", ".", "rcParams", ".", "update", "(", "{", "'xtick.labelsize'", ":", "15", "}", ")", "\n", "plt", ".", "rcParams", ".", "update", "(", "{", "'ytick.labelsize'", ":", "15", "}", ")", "\n", "plt", ".", "rcParams", ".", "update", "(", "{", "'axes.titlesize'", ":", "24", "}", ")", "\n", "plt", ".", "rcParams", ".", "update", "(", "{", "'axes.labelsize'", ":", "20", "}", ")", "\n", "plt", ".", "rcParams", ".", "update", "(", "{", "'lines.linewidth'", ":", "2", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.utils.evaluation.evaluate_vae": [[45, 91], ["actions.unsqueeze.size", "torch.cat.append", "torch.cat.append", "torch.cat.append", "np.vstack.append", "zip", "torch.cat", "torch.cat", "torch.cat", "numpy.vstack", "actions.unsqueeze.dim", "actions.unsqueeze.unsqueeze", "states.unsqueeze.unsqueeze", "rewards.unsqueeze.unsqueeze", "torch.no_grad", "encoder.prior", "torchkit.pytorch_utils.get_numpy", "action.unsqueeze.unsqueeze", "state.unsqueeze.unsqueeze", "reward.unsqueeze.unsqueeze", "torch.cat.append", "torch.cat.append", "torch.cat.append", "np.vstack.append", "decoder", "torch.no_grad", "encoder", "task_mean.unsqueeze", "task_logvar.unsqueeze", "torchkit.pytorch_utils.get_numpy", "decoder", "action.unsqueeze.float", "task_sample.unsqueeze"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjvGeomWrapper.size", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjContactWrapper.dim", "home.repos.pwc.inspect_result.Rondorf_BOReL.models.encoder.RNNEncoder.prior", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.get_numpy", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.get_numpy"], ["", "def", "evaluate_vae", "(", "encoder", ",", "decoder", ",", "actions", ",", "rewards", ",", "states", ")", ":", "\n", "    ", "'''\n\n    :param encoder: RNN encoder network\n    :param decoder: reward decoder\n    :param actions: array of actions of shape: (T, batch, action_dim)\n    :param rewards: array of rewards of shape: (T, batch, 1)\n    :param states: array of states of shape: (T, batch, state_dim)\n    :return:\n    '''", "\n", "\n", "if", "actions", ".", "dim", "(", ")", "!=", "3", ":", "\n", "        ", "actions", "=", "actions", ".", "unsqueeze", "(", "dim", "=", "0", ")", "\n", "states", "=", "states", ".", "unsqueeze", "(", "dim", "=", "0", ")", "\n", "rewards", "=", "rewards", ".", "unsqueeze", "(", "dim", "=", "0", ")", "\n", "\n", "", "T", ",", "batch_size", ",", "_", "=", "actions", ".", "size", "(", ")", "\n", "\n", "means", ",", "logvars", ",", "hidden_states", ",", "reward_preds", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "task_sample", ",", "task_mean", ",", "task_logvar", ",", "hidden_state", "=", "encoder", ".", "prior", "(", "batch_size", ")", "\n", "", "means", ".", "append", "(", "task_mean", ")", "\n", "logvars", ".", "append", "(", "task_logvar", ")", "\n", "hidden_states", ".", "append", "(", "hidden_state", ")", "\n", "reward_preds", ".", "append", "(", "ptu", ".", "get_numpy", "(", "decoder", "(", "task_sample", ",", "None", ")", ")", ")", "\n", "\n", "for", "action", ",", "reward", ",", "state", "in", "zip", "(", "actions", ",", "rewards", ",", "states", ")", ":", "\n", "        ", "action", "=", "action", ".", "unsqueeze", "(", "dim", "=", "0", ")", "\n", "state", "=", "state", ".", "unsqueeze", "(", "dim", "=", "0", ")", "\n", "reward", "=", "reward", ".", "unsqueeze", "(", "dim", "=", "0", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "task_sample", ",", "task_mean", ",", "task_logvar", ",", "hidden_state", "=", "encoder", "(", "actions", "=", "action", ".", "float", "(", ")", ",", "\n", "states", "=", "state", ",", "\n", "rewards", "=", "reward", ",", "\n", "hidden_state", "=", "hidden_state", ",", "\n", "return_prior", "=", "False", ")", "\n", "", "means", ".", "append", "(", "task_mean", ".", "unsqueeze", "(", "dim", "=", "0", ")", ")", "\n", "logvars", ".", "append", "(", "task_logvar", ".", "unsqueeze", "(", "dim", "=", "0", ")", ")", "\n", "hidden_states", ".", "append", "(", "hidden_state", ")", "\n", "reward_preds", ".", "append", "(", "ptu", ".", "get_numpy", "(", "decoder", "(", "task_sample", ".", "unsqueeze", "(", "dim", "=", "0", ")", ",", "None", ")", ")", ")", "\n", "\n", "", "means", "=", "torch", ".", "cat", "(", "means", ",", "dim", "=", "0", ")", "\n", "logvars", "=", "torch", ".", "cat", "(", "logvars", ",", "dim", "=", "0", ")", "\n", "hidden_states", "=", "torch", ".", "cat", "(", "hidden_states", ",", "dim", "=", "0", ")", "\n", "reward_preds", "=", "np", ".", "vstack", "(", "reward_preds", ")", "\n", "return", "means", ",", "logvars", ",", "hidden_states", ",", "reward_preds", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.utils.evaluation.rollout_policy": [[93, 156], ["torchkit.pytorch_utils.from_numpy", "next_obs.clone.reshape", "observations.append", "dir", "env.reset", "latent_samples.append", "latent_means.append", "latent_logvars.append", "utils.helpers.env_step", "observations.append", "actions.append", "values.append", "rewards.append", "next_obs.clone", "torch.no_grad", "learner.vae.encoder.prior", "torchkit.pytorch_utils.get_numpy", "torchkit.pytorch_utils.get_numpy", "torchkit.pytorch_utils.get_numpy", "learner.get_augmented_obs", "learner.agent.act", "action.squeeze", "reward.item", "learner.vae.encoder", "latent_samples.append", "latent_means.append", "latent_logvars.append", "torch.no_grad", "learner.agent.act", "torchkit.pytorch_utils.get_numpy", "reward.reshape", "torchkit.pytorch_utils.get_numpy", "torchkit.pytorch_utils.get_numpy", "torchkit.pytorch_utils.get_numpy"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.from_numpy", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjvLightWrapper.dir", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.reset", "home.repos.pwc.inspect_result.Rondorf_BOReL.utils.helpers.env_step", "home.repos.pwc.inspect_result.Rondorf_BOReL.core.serializable.Serializable.clone", "home.repos.pwc.inspect_result.Rondorf_BOReL.models.encoder.RNNEncoder.prior", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.get_numpy", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.get_numpy", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.get_numpy", "home.repos.pwc.inspect_result.Rondorf_BOReL.utils.helpers.get_augmented_obs", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjDataWrapper.act", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjDataWrapper.act", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.get_numpy", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.get_numpy", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.get_numpy", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.get_numpy"], ["", "def", "rollout_policy", "(", "env", ",", "learner", ")", ":", "\n", "    ", "is_vae_exist", "=", "\"vae\"", "in", "dir", "(", "learner", ")", "\n", "\n", "observations", "=", "[", "]", "\n", "actions", "=", "[", "]", "\n", "rewards", "=", "[", "]", "\n", "values", "=", "[", "]", "\n", "if", "is_vae_exist", ":", "\n", "        ", "latent_samples", "=", "[", "]", "\n", "latent_means", "=", "[", "]", "\n", "latent_logvars", "=", "[", "]", "\n", "\n", "", "obs", "=", "ptu", ".", "from_numpy", "(", "env", ".", "reset", "(", ")", ")", "\n", "obs", "=", "obs", ".", "reshape", "(", "-", "1", ",", "obs", ".", "shape", "[", "-", "1", "]", ")", "\n", "observations", ".", "append", "(", "obs", ")", "\n", "done_rollout", "=", "False", "\n", "if", "is_vae_exist", ":", "\n", "# get prior parameters", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "task_sample", ",", "task_mean", ",", "task_logvar", ",", "hidden_state", "=", "learner", ".", "vae", ".", "encoder", ".", "prior", "(", "batch_size", "=", "1", ")", "\n", "# store", "\n", "", "latent_samples", ".", "append", "(", "ptu", ".", "get_numpy", "(", "task_sample", "[", "0", ",", "0", "]", ")", ")", "\n", "latent_means", ".", "append", "(", "ptu", ".", "get_numpy", "(", "task_mean", "[", "0", ",", "0", "]", ")", ")", "\n", "latent_logvars", ".", "append", "(", "ptu", ".", "get_numpy", "(", "task_logvar", "[", "0", ",", "0", "]", ")", ")", "\n", "\n", "", "while", "not", "done_rollout", ":", "\n", "        ", "if", "is_vae_exist", ":", "\n", "# add distribution parameters to observation - policy is conditioned on posterior", "\n", "            ", "augmented_obs", "=", "learner", ".", "get_augmented_obs", "(", "obs", "=", "obs", ",", "task_mu", "=", "task_mean", ",", "task_std", "=", "task_logvar", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "action", ",", "value", "=", "learner", ".", "agent", ".", "act", "(", "obs", "=", "augmented_obs", ",", "deterministic", "=", "True", ")", "\n", "", "", "else", ":", "\n", "            ", "action", ",", "_", ",", "_", ",", "_", "=", "learner", ".", "agent", ".", "act", "(", "obs", "=", "obs", ")", "\n", "\n", "# observe reward and next obs", "\n", "", "next_obs", ",", "reward", ",", "done", ",", "info", "=", "utl", ".", "env_step", "(", "env", ",", "action", ".", "squeeze", "(", "dim", "=", "0", ")", ")", "\n", "# store", "\n", "observations", ".", "append", "(", "next_obs", ")", "\n", "actions", ".", "append", "(", "action", ")", "\n", "values", ".", "append", "(", "value", ")", "\n", "rewards", ".", "append", "(", "reward", ".", "item", "(", ")", ")", "\n", "done_rollout", "=", "False", "if", "ptu", ".", "get_numpy", "(", "done", "[", "0", "]", "[", "0", "]", ")", "==", "0.", "else", "True", "\n", "\n", "if", "is_vae_exist", ":", "\n", "# update encoding", "\n", "            ", "task_sample", ",", "task_mean", ",", "task_logvar", ",", "hidden_state", "=", "learner", ".", "vae", ".", "encoder", "(", "\n", "action", ",", "\n", "next_obs", ",", "\n", "reward", ".", "reshape", "(", "(", "1", ",", "1", ")", ")", ",", "\n", "hidden_state", ",", "\n", "return_prior", "=", "False", ")", "\n", "\n", "# values.append(value.item())", "\n", "latent_samples", ".", "append", "(", "ptu", ".", "get_numpy", "(", "task_sample", "[", "0", "]", ")", ")", "\n", "latent_means", ".", "append", "(", "ptu", ".", "get_numpy", "(", "task_mean", "[", "0", "]", ")", ")", "\n", "latent_logvars", ".", "append", "(", "ptu", ".", "get_numpy", "(", "task_logvar", "[", "0", "]", ")", ")", "\n", "# set: obs <- next_obs", "\n", "", "obs", "=", "next_obs", ".", "clone", "(", ")", "\n", "", "if", "is_vae_exist", ":", "\n", "        ", "return", "observations", ",", "actions", ",", "rewards", ",", "values", ",", "latent_samples", ",", "latent_means", ",", "latent_logvars", "\n", "", "else", ":", "\n", "        ", "return", "observations", ",", "actions", ",", "rewards", ",", "values", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.utils.evaluation.get_test_rollout": [[158, 253], ["env.reset", "obs_raw.reshape().to.reshape().to", "obs_normalised.reshape().to.reshape().to", "range", "range", "episode_returns.append", "episode_lengths.append", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "range", "range", "range", "range", "obs_raw.reshape().to.reshape", "obs_normalised.reshape().to.reshape", "episode_latent_samples[].append", "episode_latent_means[].append", "episode_latent_logvars[].append", "episode_prev_obs[].append", "utils.helpers.select_action", "utils.helpers.env_step", "obs_raw.reshape().to.reshape().to", "obs_normalised.reshape().to.reshape().to", "episode_next_obs[].append", "episode_rewards[].append", "episode_actions[].append", "sum", "torch.stack", "torch.stack", "range", "range", "range", "encoder.prior", "curr_latent_sample[].to", "curr_latent_mean[].to", "curr_latent_logvar[].to", "curr_latent_sample[].clone", "curr_latent_mean[].clone", "curr_latent_logvar[].clone", "obs_raw.reshape().to.clone", "encoder", "episode_latent_samples[].append", "episode_latent_means[].append", "episode_latent_logvars[].append", "obs_raw.reshape().to.clone", "rew_raw.clone", "action.clone", "obs_raw.reshape().to.reshape", "obs_normalised.reshape().to.reshape", "action.float().to", "rew_raw.reshape().float().to", "curr_latent_sample[].clone", "curr_latent_mean[].clone", "curr_latent_logvar[].clone", "action.float", "rew_raw.reshape().float", "rew_raw.reshape"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.reset", "home.repos.pwc.inspect_result.Rondorf_BOReL.algorithms.sac.SAC.select_action", "home.repos.pwc.inspect_result.Rondorf_BOReL.utils.helpers.env_step", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjDataWrapper.stack", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjDataWrapper.stack", "home.repos.pwc.inspect_result.Rondorf_BOReL.models.encoder.RNNEncoder.prior", "home.repos.pwc.inspect_result.Rondorf_BOReL.core.serializable.Serializable.clone", "home.repos.pwc.inspect_result.Rondorf_BOReL.core.serializable.Serializable.clone", "home.repos.pwc.inspect_result.Rondorf_BOReL.core.serializable.Serializable.clone", "home.repos.pwc.inspect_result.Rondorf_BOReL.core.serializable.Serializable.clone", "home.repos.pwc.inspect_result.Rondorf_BOReL.core.serializable.Serializable.clone", "home.repos.pwc.inspect_result.Rondorf_BOReL.core.serializable.Serializable.clone", "home.repos.pwc.inspect_result.Rondorf_BOReL.core.serializable.Serializable.clone", "home.repos.pwc.inspect_result.Rondorf_BOReL.core.serializable.Serializable.clone", "home.repos.pwc.inspect_result.Rondorf_BOReL.core.serializable.Serializable.clone", "home.repos.pwc.inspect_result.Rondorf_BOReL.core.serializable.Serializable.clone"], ["", "", "def", "get_test_rollout", "(", "args", ",", "env", ",", "policy", ",", "encoder", "=", "None", ")", ":", "\n", "    ", "num_episodes", "=", "args", ".", "max_rollouts_per_task", "\n", "\n", "# --- initialise things we want to keep track of ---", "\n", "\n", "episode_prev_obs", "=", "[", "[", "]", "for", "_", "in", "range", "(", "num_episodes", ")", "]", "\n", "episode_next_obs", "=", "[", "[", "]", "for", "_", "in", "range", "(", "num_episodes", ")", "]", "\n", "episode_actions", "=", "[", "[", "]", "for", "_", "in", "range", "(", "num_episodes", ")", "]", "\n", "episode_rewards", "=", "[", "[", "]", "for", "_", "in", "range", "(", "num_episodes", ")", "]", "\n", "\n", "episode_returns", "=", "[", "]", "\n", "episode_lengths", "=", "[", "]", "\n", "\n", "if", "encoder", "is", "not", "None", ":", "\n", "        ", "episode_latent_samples", "=", "[", "[", "]", "for", "_", "in", "range", "(", "num_episodes", ")", "]", "\n", "episode_latent_means", "=", "[", "[", "]", "for", "_", "in", "range", "(", "num_episodes", ")", "]", "\n", "episode_latent_logvars", "=", "[", "[", "]", "for", "_", "in", "range", "(", "num_episodes", ")", "]", "\n", "", "else", ":", "\n", "        ", "curr_latent_sample", "=", "curr_latent_mean", "=", "curr_latent_logvar", "=", "None", "\n", "episode_latent_means", "=", "episode_latent_logvars", "=", "None", "\n", "# --- roll out policy ---", "\n", "\n", "# (re)set environment", "\n", "", "[", "obs_raw", ",", "obs_normalised", "]", "=", "env", ".", "reset", "(", ")", "\n", "obs_raw", "=", "obs_raw", ".", "reshape", "(", "(", "1", ",", "-", "1", ")", ")", ".", "to", "(", "ptu", ".", "device", ")", "\n", "obs_normalised", "=", "obs_normalised", ".", "reshape", "(", "(", "1", ",", "-", "1", ")", ")", ".", "to", "(", "ptu", ".", "device", ")", "\n", "\n", "for", "episode_idx", "in", "range", "(", "num_episodes", ")", ":", "\n", "\n", "        ", "curr_rollout_rew", "=", "[", "]", "\n", "\n", "if", "encoder", "is", "not", "None", ":", "\n", "            ", "if", "episode_idx", "==", "0", "and", "encoder", ":", "\n", "# reset to prior", "\n", "                ", "curr_latent_sample", ",", "curr_latent_mean", ",", "curr_latent_logvar", ",", "hidden_state", "=", "encoder", ".", "prior", "(", "1", ")", "\n", "curr_latent_sample", "=", "curr_latent_sample", "[", "0", "]", ".", "to", "(", "ptu", ".", "device", ")", "\n", "curr_latent_mean", "=", "curr_latent_mean", "[", "0", "]", ".", "to", "(", "ptu", ".", "device", ")", "\n", "curr_latent_logvar", "=", "curr_latent_logvar", "[", "0", "]", ".", "to", "(", "ptu", ".", "device", ")", "\n", "\n", "", "episode_latent_samples", "[", "episode_idx", "]", ".", "append", "(", "curr_latent_sample", "[", "0", "]", ".", "clone", "(", ")", ")", "\n", "episode_latent_means", "[", "episode_idx", "]", ".", "append", "(", "curr_latent_mean", "[", "0", "]", ".", "clone", "(", ")", ")", "\n", "episode_latent_logvars", "[", "episode_idx", "]", ".", "append", "(", "curr_latent_logvar", "[", "0", "]", ".", "clone", "(", ")", ")", "\n", "\n", "", "for", "step_idx", "in", "range", "(", "1", ",", "env", ".", "_max_episode_steps", "+", "1", ")", ":", "\n", "\n", "            ", "episode_prev_obs", "[", "episode_idx", "]", ".", "append", "(", "obs_raw", ".", "clone", "(", ")", ")", "\n", "\n", "_", ",", "action", ",", "_", "=", "utl", ".", "select_action", "(", "args", "=", "args", ",", "\n", "policy", "=", "policy", ",", "\n", "obs", "=", "obs_normalised", "if", "args", ".", "norm_obs_for_policy", "else", "obs_raw", ",", "\n", "deterministic", "=", "True", ",", "\n", "task_sample", "=", "curr_latent_sample", ",", "task_mean", "=", "curr_latent_mean", ",", "\n", "task_logvar", "=", "curr_latent_logvar", ")", "\n", "\n", "# observe reward and next obs", "\n", "(", "obs_raw", ",", "obs_normalised", ")", ",", "(", "rew_raw", ",", "rew_normalised", ")", ",", "done", ",", "infos", "=", "utl", ".", "env_step", "(", "env", ",", "action", ")", "\n", "obs_raw", "=", "obs_raw", ".", "reshape", "(", "(", "1", ",", "-", "1", ")", ")", ".", "to", "(", "ptu", ".", "device", ")", "\n", "obs_normalised", "=", "obs_normalised", ".", "reshape", "(", "(", "1", ",", "-", "1", ")", ")", ".", "to", "(", "ptu", ".", "device", ")", "\n", "\n", "if", "encoder", "is", "not", "None", ":", "\n", "# update task embedding", "\n", "                ", "curr_latent_sample", ",", "curr_latent_mean", ",", "curr_latent_logvar", ",", "hidden_state", "=", "encoder", "(", "\n", "action", ".", "float", "(", ")", ".", "to", "(", "ptu", ".", "device", ")", ",", "\n", "obs_raw", ",", "\n", "rew_raw", ".", "reshape", "(", "(", "1", ",", "1", ")", ")", ".", "float", "(", ")", ".", "to", "(", "ptu", ".", "device", ")", ",", "\n", "hidden_state", ",", "\n", "return_prior", "=", "False", ")", "\n", "\n", "episode_latent_samples", "[", "episode_idx", "]", ".", "append", "(", "curr_latent_sample", "[", "0", "]", ".", "clone", "(", ")", ")", "\n", "episode_latent_means", "[", "episode_idx", "]", ".", "append", "(", "curr_latent_mean", "[", "0", "]", ".", "clone", "(", ")", ")", "\n", "episode_latent_logvars", "[", "episode_idx", "]", ".", "append", "(", "curr_latent_logvar", "[", "0", "]", ".", "clone", "(", ")", ")", "\n", "\n", "", "episode_next_obs", "[", "episode_idx", "]", ".", "append", "(", "obs_raw", ".", "clone", "(", ")", ")", "\n", "episode_rewards", "[", "episode_idx", "]", ".", "append", "(", "rew_raw", ".", "clone", "(", ")", ")", "\n", "episode_actions", "[", "episode_idx", "]", ".", "append", "(", "action", ".", "clone", "(", ")", ")", "\n", "\n", "if", "infos", "[", "0", "]", "[", "'done_mdp'", "]", ":", "\n", "                ", "break", "\n", "\n", "", "", "episode_returns", ".", "append", "(", "sum", "(", "curr_rollout_rew", ")", ")", "\n", "episode_lengths", ".", "append", "(", "step_idx", ")", "\n", "\n", "# clean up", "\n", "", "if", "encoder", "is", "not", "None", ":", "\n", "        ", "episode_latent_means", "=", "[", "torch", ".", "stack", "(", "e", ")", "for", "e", "in", "episode_latent_means", "]", "\n", "episode_latent_logvars", "=", "[", "torch", ".", "stack", "(", "e", ")", "for", "e", "in", "episode_latent_logvars", "]", "\n", "\n", "", "episode_prev_obs", "=", "[", "torch", ".", "cat", "(", "e", ")", "for", "e", "in", "episode_prev_obs", "]", "\n", "episode_next_obs", "=", "[", "torch", ".", "cat", "(", "e", ")", "for", "e", "in", "episode_next_obs", "]", "\n", "episode_actions", "=", "[", "torch", ".", "cat", "(", "e", ")", "for", "e", "in", "episode_actions", "]", "\n", "episode_rewards", "=", "[", "torch", ".", "cat", "(", "r", ")", "for", "r", "in", "episode_rewards", "]", "\n", "\n", "return", "episode_latent_means", ",", "episode_latent_logvars", ",", "episode_prev_obs", ",", "episode_next_obs", ",", "episode_actions", ",", "episode_rewards", ",", "episode_returns", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.utils.evaluation.plot_latents": [[255, 304], ["matplotlib.figure", "matplotlib.subplot", "matplotlib.plot", "matplotlib.plot", "numpy.cumsum", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.subplot", "numpy.exp", "matplotlib.plot", "matplotlib.plot", "numpy.cumsum", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.subplot", "matplotlib.plot", "matplotlib.plot", "numpy.cumsum", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.tight_layout", "matplotlib.show", "range", "range", "latent_means.mean", "matplotlib.plot", "range", "range", "np.exp.mean", "matplotlib.plot", "range", "range", "rewards_preds.mean", "matplotlib.plot", "latent_means.max", "latent_means.min", "np.exp.max", "np.exp.min", "rewards_preds.max", "rewards_preds.min", "latent_means.min", "latent_means.max", "np.exp.min", "np.exp.max", "rewards_preds.min", "rewards_preds.max", "range", "range", "range"], "function", ["None"], ["", "def", "plot_latents", "(", "latent_means", ",", "\n", "latent_logvars", ",", "\n", "rewards_preds", ",", "\n", "num_episodes", ",", "\n", "num_steps_per_episode", "\n", ")", ":", "\n", "    ", "\"\"\"\n    Plot mean/variance/pred_rewards over time\n    \"\"\"", "\n", "# set_default_mpl()", "\n", "\n", "plt", ".", "figure", "(", "figsize", "=", "(", "10", ",", "8", ")", ")", "\n", "\n", "plt", ".", "subplot", "(", "2", ",", "2", ",", "2", ")", "\n", "plt", ".", "plot", "(", "range", "(", "latent_means", ".", "shape", "[", "0", "]", ")", ",", "latent_means", ",", "'.-'", ",", "alpha", "=", "0.5", ")", "\n", "plt", ".", "plot", "(", "range", "(", "latent_means", ".", "shape", "[", "0", "]", ")", ",", "latent_means", ".", "mean", "(", "axis", "=", "1", ")", ",", "'k.-'", ")", "\n", "for", "tj", "in", "np", ".", "cumsum", "(", "[", "0", ",", "*", "[", "num_steps_per_episode", "for", "_", "in", "range", "(", "num_episodes", ")", "]", "]", ")", ":", "\n", "        ", "span", "=", "latent_means", ".", "max", "(", ")", "-", "latent_means", ".", "min", "(", ")", "\n", "plt", ".", "plot", "(", "[", "tj", "+", "0.5", ",", "tj", "+", "0.5", "]", ",", "\n", "[", "latent_means", ".", "min", "(", ")", "-", "span", "*", "0.05", ",", "latent_means", ".", "max", "(", ")", "+", "span", "*", "0.05", "]", ",", "\n", "'k--'", ",", "alpha", "=", "0.5", ")", "\n", "", "plt", ".", "xlabel", "(", "'env steps'", ",", "fontsize", "=", "15", ")", "\n", "plt", ".", "ylabel", "(", "'latent mean'", ",", "fontsize", "=", "15", ")", "\n", "\n", "plt", ".", "subplot", "(", "2", ",", "2", ",", "4", ")", "\n", "latent_vars", "=", "np", ".", "exp", "(", "latent_logvars", ")", "\n", "plt", ".", "plot", "(", "range", "(", "latent_vars", ".", "shape", "[", "0", "]", ")", ",", "latent_vars", ",", "'.-'", ",", "alpha", "=", "0.5", ")", "\n", "plt", ".", "plot", "(", "range", "(", "latent_vars", ".", "shape", "[", "0", "]", ")", ",", "latent_vars", ".", "mean", "(", "axis", "=", "1", ")", ",", "'k.-'", ")", "\n", "for", "tj", "in", "np", ".", "cumsum", "(", "[", "0", ",", "*", "[", "num_steps_per_episode", "for", "_", "in", "range", "(", "num_episodes", ")", "]", "]", ")", ":", "\n", "        ", "span", "=", "latent_vars", ".", "max", "(", ")", "-", "latent_vars", ".", "min", "(", ")", "\n", "plt", ".", "plot", "(", "[", "tj", "+", "0.5", ",", "tj", "+", "0.5", "]", ",", "\n", "[", "latent_vars", ".", "min", "(", ")", "-", "span", "*", "0.05", ",", "latent_vars", ".", "max", "(", ")", "+", "span", "*", "0.05", "]", ",", "\n", "'k--'", ",", "alpha", "=", "0.5", ")", "\n", "", "plt", ".", "xlabel", "(", "'env steps'", ",", "fontsize", "=", "15", ")", "\n", "plt", ".", "ylabel", "(", "'latent variance'", ",", "fontsize", "=", "15", ")", "\n", "\n", "plt", ".", "subplot", "(", "1", ",", "2", ",", "1", ")", "\n", "plt", ".", "plot", "(", "range", "(", "rewards_preds", ".", "shape", "[", "0", "]", ")", ",", "rewards_preds", ",", "'.-'", ",", "alpha", "=", "0.5", ")", "\n", "plt", ".", "plot", "(", "range", "(", "rewards_preds", ".", "shape", "[", "0", "]", ")", ",", "rewards_preds", ".", "mean", "(", "axis", "=", "1", ")", ",", "'k.-'", ")", "\n", "for", "tj", "in", "np", ".", "cumsum", "(", "[", "0", ",", "*", "[", "num_steps_per_episode", "for", "_", "in", "range", "(", "num_episodes", ")", "]", "]", ")", ":", "\n", "        ", "span", "=", "rewards_preds", ".", "max", "(", ")", "-", "rewards_preds", ".", "min", "(", ")", "\n", "plt", ".", "plot", "(", "[", "tj", "+", "0.5", ",", "tj", "+", "0.5", "]", ",", "\n", "[", "rewards_preds", ".", "min", "(", ")", "-", "span", "*", "0.05", ",", "rewards_preds", ".", "max", "(", ")", "+", "span", "*", "0.05", "]", ",", "\n", "'k--'", ",", "alpha", "=", "0.5", ")", "\n", "", "plt", ".", "xlabel", "(", "'env steps'", ",", "fontsize", "=", "15", ")", "\n", "plt", ".", "ylabel", "(", "r'$R^{+}=\\mathbb{E}[P(R=1)]$ for each cell'", ",", "fontsize", "=", "15", ")", "\n", "\n", "plt", ".", "tight_layout", "(", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.utils.evaluation.vis_rew_pred": [[306, 347], ["gym.make", "args.env_name.startswith", "matplotlib.gca", "matplotlib.xlim", "matplotlib.ylim", "matplotlib.lines.Line2D", "plt.gca.add_line", "matplotlib.lines.Line2D", "plt.gca.add_line", "args.env_name.startswith", "plt.gca.set_xticklabels", "plt.gca.set_yticklabels", "plt.gca.tick_params", "plt.figure.tight_layout", "matplotlib.figure", "matplotlib.figure", "matplotlib.patches.Rectangle", "plt.gca.add_patch", "plt.gca.text", "matplotlib.title", "plt.gca.axis", "cmap", "torchkit.pytorch_utils.get_numpy", "gym.make.task_to_id", "torchkit.pytorch_utils.get_numpy", "torchkit.pytorch_utils.FloatTensor", "gym.make.task_to_id", "torchkit.pytorch_utils.FloatTensor"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.envs.registration.make", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.startswith", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.startswith", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.title", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.get_numpy", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.task_to_id", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.get_numpy", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.FloatTensor", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.task_to_id", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.FloatTensor"], ["", "def", "vis_rew_pred", "(", "args", ",", "rew_pred_arr", ",", "goal", ",", "**", "kwargs", ")", ":", "\n", "    ", "env", "=", "gym", ".", "make", "(", "args", ".", "env_name", ")", "\n", "if", "args", ".", "env_name", ".", "startswith", "(", "'GridNavi'", ")", ":", "\n", "        ", "fig", "=", "plt", ".", "figure", "(", "figsize", "=", "(", "6", ",", "6", ")", ")", "\n", "", "else", ":", "# 'TwoRooms'", "\n", "        ", "fig", "=", "plt", ".", "figure", "(", "figsize", "=", "(", "12", ",", "6", ")", ")", "\n", "\n", "", "ax", "=", "plt", ".", "gca", "(", ")", "\n", "cmap", "=", "plt", ".", "cm", ".", "viridis", "\n", "for", "state", "in", "env", ".", "states", ":", "\n", "        ", "cell", "=", "Rectangle", "(", "(", "state", "[", "0", "]", ",", "state", "[", "1", "]", ")", ",", "width", "=", "1", ",", "height", "=", "1", ",", "\n", "fc", "=", "cmap", "(", "rew_pred_arr", "[", "ptu", ".", "get_numpy", "(", "env", ".", "task_to_id", "(", "ptu", ".", "FloatTensor", "(", "state", ")", ")", ")", "[", "0", "]", "]", ")", ")", "\n", "ax", ".", "add_patch", "(", "cell", ")", "\n", "ax", ".", "text", "(", "state", "[", "0", "]", "+", "0.5", ",", "state", "[", "1", "]", "+", "0.5", ",", "\n", "rew_pred_arr", "[", "ptu", ".", "get_numpy", "(", "env", ".", "task_to_id", "(", "ptu", ".", "FloatTensor", "(", "state", ")", ")", ")", "[", "0", "]", "]", ",", "\n", "ha", "=", "\"center\"", ",", "va", "=", "\"center\"", ",", "color", "=", "\"w\"", ")", "\n", "\n", "", "plt", ".", "xlim", "(", "env", ".", "observation_space", ".", "low", "[", "0", "]", "-", "0.1", ",", "env", ".", "observation_space", ".", "high", "[", "0", "]", "+", "1", "+", "0.1", ")", "\n", "plt", ".", "ylim", "(", "env", ".", "observation_space", ".", "low", "[", "1", "]", "-", "0.1", ",", "env", ".", "observation_space", ".", "high", "[", "1", "]", "+", "1", "+", "0.1", ")", "\n", "\n", "# add goal's position on grid", "\n", "line", "=", "Line2D", "(", "[", "goal", "[", "0", "]", "+", "0.3", ",", "goal", "[", "0", "]", "+", "0.7", "]", ",", "\n", "[", "goal", "[", "1", "]", "+", "0.3", ",", "goal", "[", "1", "]", "+", "0.7", "]", ",", "\n", "lw", "=", "5", ",", "color", "=", "'black'", ",", "axes", "=", "ax", ")", "\n", "ax", ".", "add_line", "(", "line", ")", "\n", "line", "=", "Line2D", "(", "[", "goal", "[", "0", "]", "+", "0.3", ",", "goal", "[", "0", "]", "+", "0.7", "]", ",", "\n", "[", "goal", "[", "1", "]", "+", "0.7", ",", "goal", "[", "1", "]", "+", "0.3", "]", ",", "\n", "lw", "=", "5", ",", "color", "=", "'black'", ",", "axes", "=", "ax", ")", "\n", "ax", ".", "add_line", "(", "line", ")", "\n", "if", "'title'", "in", "kwargs", ":", "\n", "        ", "plt", ".", "title", "(", "kwargs", "[", "'title'", "]", ")", "\n", "\n", "", "if", "args", ".", "env_name", ".", "startswith", "(", "'GridNavi'", ")", ":", "\n", "        ", "ax", ".", "axis", "(", "'equal'", ")", "\n", "\n", "", "ax", ".", "set_xticklabels", "(", "[", "]", ")", "\n", "ax", ".", "set_yticklabels", "(", "[", "]", ")", "\n", "ax", ".", "tick_params", "(", "axis", "=", "'both'", ",", "which", "=", "'both'", ",", "length", "=", "0", ")", "\n", "\n", "fig", ".", "tight_layout", "(", ")", "\n", "return", "fig", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.utils.evaluation.plot_discretized_belief_halfcircle": [[349, 365], ["matplotlib.figure", "env.plot_behavior", "pylab.Normalize", "pylab.cm.gray", "zip", "matplotlib.make_axes", "matplotlib.ColorbarBase", "pl.Normalize.", "matplotlib.patches.Rectangle", "matplotlib.gca().add_patch", "matplotlib.gca", "matplotlib.gca"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.plot_behavior"], ["", "def", "plot_discretized_belief_halfcircle", "(", "belief_rewards", ",", "center_points", ",", "env", ",", "observations", ")", ":", "\n", "\n", "    ", "fig", "=", "plt", ".", "figure", "(", ")", "\n", "env", ".", "plot_behavior", "(", "observations", ",", "plot_env", "=", "True", ",", "color", "=", "cols_deep", "[", "3", "]", ",", "linewidth", "=", "5", ")", "\n", "res", "=", "center_points", "[", "1", ",", "0", "]", "-", "center_points", "[", "0", ",", "0", "]", "\n", "normal", "=", "pl", ".", "Normalize", "(", "0.", ",", "1.", ")", "\n", "colors", "=", "pl", ".", "cm", ".", "gray", "(", "normal", "(", "belief_rewards", ")", ")", "\n", "\n", "for", "(", "x", ",", "y", ")", ",", "c", "in", "zip", "(", "center_points", ",", "colors", ")", ":", "\n", "        ", "rec", "=", "Rectangle", "(", "(", "x", ",", "y", ")", ",", "res", ",", "res", ",", "facecolor", "=", "c", ",", "alpha", "=", "0.85", ",", "\n", "edgecolor", "=", "'none'", ")", "\n", "plt", ".", "gca", "(", ")", ".", "add_patch", "(", "rec", ")", "\n", "\n", "", "cax", ",", "_", "=", "cbar", ".", "make_axes", "(", "plt", ".", "gca", "(", ")", ")", "\n", "cb2", "=", "cbar", ".", "ColorbarBase", "(", "cax", ",", "cmap", "=", "pl", ".", "cm", ".", "gray", ",", "norm", "=", "normal", ")", "\n", "return", "fig", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.utils.evaluation.plot_rew_pred_vs_rew": [[367, 375], ["matplotlib.figure", "matplotlib.scatter", "matplotlib.scatter", "matplotlib.legend", "range", "range", "len", "len"], "function", ["None"], ["", "def", "plot_rew_pred_vs_rew", "(", "rewards", ",", "reward_preds", ")", ":", "\n", "    ", "fig", "=", "plt", ".", "figure", "(", ")", "\n", "# plt.plot(range(len(rewards)), rewards, 'o--', color=cols_dark[3], label='rew')", "\n", "plt", ".", "scatter", "(", "range", "(", "len", "(", "rewards", ")", ")", ",", "rewards", ",", "color", "=", "cols_dark", "[", "0", "]", ",", "label", "=", "'rew'", ")", "\n", "# plt.plot(range(len(reward_preds)), reward_preds, 'o--', color=cols_dark[2], label='rew pred.')", "\n", "plt", ".", "scatter", "(", "range", "(", "len", "(", "reward_preds", ")", ")", ",", "reward_preds", ",", "color", "=", "cols_dark", "[", "1", "]", ",", "label", "=", "'rew pred.'", ")", "\n", "plt", ".", "legend", "(", ")", "\n", "return", "fig", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.utils.evaluation.plot_rollouts": [[377, 408], ["isinstance", "int", "matplotlib.figure", "range", "matplotlib.legend", "torch.cat", "env.plot_behavior", "numpy.concatenate", "len", "len"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.plot_behavior"], ["", "def", "plot_rollouts", "(", "observations", ",", "env", ")", ":", "\n", "    ", "'''\n        very similar to visualize behaviour but targeted to TensorBoard vis.\n    :param observations:\n    :param env:\n    :return:\n    '''", "\n", "episode_len", "=", "env", ".", "unwrapped", ".", "_max_episode_steps", "\n", "assert", "(", "(", "len", "(", "observations", ")", "-", "1", ")", "/", "episode_len", ")", ".", "is_integer", "(", ")", ",", "'Error in observations length - env mismatch'", "\n", "\n", "if", "isinstance", "(", "observations", ",", "list", ")", ":", "\n", "        ", "observations", "=", "torch", ".", "cat", "(", "observations", ")", "\n", "", "if", "observations", ".", "shape", "[", "-", "1", "]", ">", "2", ":", "# when 2 first dimensions are 2D position (PointRobot and AntSemiCircle)", "\n", "        ", "observations", "=", "observations", "[", ":", ",", ":", "2", "]", "\n", "\n", "", "num_episodes", "=", "int", "(", "(", "len", "(", "observations", ")", "-", "1", ")", "/", "episode_len", ")", "\n", "plot_env", "=", "True", "\n", "\n", "fig", "=", "plt", ".", "figure", "(", "figsize", "=", "(", "12", ",", "10", ")", ")", "\n", "\n", "for", "episode", "in", "range", "(", "num_episodes", ")", ":", "\n", "        ", "env", ".", "plot_behavior", "(", "np", ".", "concatenate", "(", "(", "observations", "[", ":", "1", ",", ":", "]", ",", "\n", "observations", "[", "episode", "*", "episode_len", "+", "1", ":", "\n", "(", "episode", "+", "1", ")", "*", "episode_len", "+", "1", "]", ")", ")", ",", "\n", "plot_env", "=", "plot_env", ",", "\n", "color", "=", "cols_dark", "[", "episode", "]", ",", "\n", "label", "=", "'Episode {}'", ".", "format", "(", "episode", "+", "1", ")", ")", "\n", "plot_env", "=", "False", "# after first time, do not plot env again, only rollouts", "\n", "", "plt", ".", "legend", "(", ")", "\n", "\n", "return", "fig", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.utils.evaluation.plot_visited_states": [[410, 417], ["matplotlib.figure", "env.plot_env", "matplotlib.scatter"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.plot_env"], ["", "def", "plot_visited_states", "(", "observations", ",", "env", ")", ":", "\n", "# Targeted for 2D position tasks (PointRobot and AntSemiCircle)", "\n", "    ", "fig", "=", "plt", ".", "figure", "(", "figsize", "=", "(", "12", ",", "10", ")", ")", "\n", "env", ".", "plot_env", "(", ")", "\n", "plt", ".", "scatter", "(", "observations", "[", ":", ",", "0", "]", ",", "observations", "[", ":", ",", "1", "]", ",", "color", "=", "cols_dark", "[", "3", "]", ",", "marker", "=", "'.'", ")", "\n", "# sns.kdeplot(observations[:, 0], observations[:, 1], cmap=\"Reds\", shade=True, shade_lowest=False)", "\n", "return", "fig", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.utils.evaluation.predict_rewards": [[419, 428], ["torchkit.pytorch_utils.zeros", "range", "torchkit.pytorch_utils.get_numpy", "learner.vae.encoder._sample_gaussian", "learner.vae.reward_decoder().mean().detach", "torchkit.pytorch_utils.FloatTensor", "torchkit.pytorch_utils.FloatTensor", "learner.vae.reward_decoder().mean", "learner.vae.reward_decoder", "torchkit.pytorch_utils.FloatTensor"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.zeros", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.get_numpy", "home.repos.pwc.inspect_result.Rondorf_BOReL.models.encoder.RNNEncoder._sample_gaussian", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.FloatTensor", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.FloatTensor", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.FloatTensor"], ["", "def", "predict_rewards", "(", "learner", ",", "means", ",", "logvars", ")", ":", "\n", "    ", "reward_preds", "=", "ptu", ".", "zeros", "(", "[", "means", ".", "shape", "[", "0", "]", ",", "learner", ".", "env", ".", "num_states", "]", ")", "\n", "for", "t", "in", "range", "(", "reward_preds", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "task_samples", "=", "learner", ".", "vae", ".", "encoder", ".", "_sample_gaussian", "(", "ptu", ".", "FloatTensor", "(", "means", "[", "t", "]", ")", ",", "\n", "ptu", ".", "FloatTensor", "(", "logvars", "[", "t", "]", ")", ",", "\n", "num", "=", "50", ")", "\n", "reward_preds", "[", "t", ",", ":", "]", "=", "learner", ".", "vae", ".", "reward_decoder", "(", "ptu", ".", "FloatTensor", "(", "task_samples", ")", ",", "None", ")", ".", "mean", "(", "dim", "=", "0", ")", ".", "detach", "(", ")", "\n", "\n", "", "return", "ptu", ".", "get_numpy", "(", "reward_preds", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.utils.evaluation.visualize_bahavior": [[430, 465], ["isinstance", "int", "numpy.linspace", "matplotlib.figure", "range", "torch.cat", "enumerate", "matplotlib.subplot", "env.plot_behavior", "len", "len", "torch.cat", "matplotlib.ylabel", "matplotlib.title", "len", "len"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.plot_behavior", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.title"], ["", "def", "visualize_bahavior", "(", "observations", ",", "env", ")", ":", "\n", "    ", "'''\n\n    :param observations:\n    :param env:\n    :param num_episodes:\n    :return:\n    '''", "\n", "\n", "episode_len", "=", "env", ".", "unwrapped", ".", "_max_episode_steps", "\n", "assert", "(", "(", "len", "(", "observations", ")", "-", "1", ")", "/", "episode_len", ")", ".", "is_integer", "(", ")", ",", "'Error in observations length - env mismatch'", "\n", "\n", "if", "isinstance", "(", "observations", ",", "list", ")", ":", "\n", "        ", "observations", "=", "torch", ".", "cat", "(", "observations", ")", "\n", "", "if", "observations", ".", "shape", "[", "-", "1", "]", ">", "2", ":", "# when 2 first dimensions are 2D position (PointRobot and AntSemiCircle)", "\n", "        ", "observations", "=", "observations", "[", ":", ",", ":", "2", "]", "\n", "\n", "", "num_episodes", "=", "int", "(", "(", "len", "(", "observations", ")", "-", "1", ")", "/", "episode_len", ")", "\n", "timesteps", "=", "np", ".", "linspace", "(", "1", ",", "episode_len", ",", "4", ",", "dtype", "=", "int", ")", "\n", "\n", "fig", "=", "plt", ".", "figure", "(", "figsize", "=", "(", "10", ",", "10", ")", ")", "\n", "\n", "for", "episode", "in", "range", "(", "num_episodes", ")", ":", "\n", "        ", "for", "t_i", ",", "timestep", "in", "enumerate", "(", "timesteps", ")", ":", "\n", "            ", "plt", ".", "subplot", "(", "num_episodes", ",", "len", "(", "timesteps", ")", ",", "t_i", "+", "1", "+", "episode", "*", "len", "(", "timesteps", ")", ")", "\n", "env", ".", "plot_behavior", "(", "torch", ".", "cat", "(", "(", "observations", "[", ":", "1", ",", ":", "]", ",", "\n", "observations", "[", "episode", "*", "episode_len", "+", "1", ":", "\n", "episode", "*", "episode_len", "+", "1", "+", "timestep", "]", ")", ")", ")", "\n", "if", "t_i", "==", "0", ":", "\n", "                ", "plt", ".", "ylabel", "(", "'Episode {}'", ".", "format", "(", "episode", "+", "1", ")", ")", "\n", "", "if", "episode", "==", "0", ":", "\n", "                ", "plt", ".", "title", "(", "'t={}'", ".", "format", "(", "timestep", ")", ")", "\n", "\n", "# plt.show()    # commented for TB vis", "\n", "", "", "", "return", "fig", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.utils.evaluation.sample_random_normal": [[467, 469], ["numpy.random.normal"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.normal"], ["", "def", "sample_random_normal", "(", "dim", ",", "n_samples", ")", ":", "\n", "    ", "return", "np", ".", "random", ".", "normal", "(", "size", "=", "(", "n_samples", ",", "dim", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.utils.evaluation.visualize_latent_space": [[471, 501], ["torchkit.pytorch_utils.FloatTensor", "torchkit.pytorch_utils.get_numpy", "numpy.argmax", "pandas.DataFrame", "matplotlib.figure", "seaborn.scatterplot", "plt.figure.show", "evaluation.sample_random_normal", "decoder", "sklearn.manifold.TSNE", "sklearn.manifold.TSNE.fit_transform", "seaborn.color_palette", "matplotlib.gca", "len", "numpy.unique"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.FloatTensor", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.get_numpy", "home.repos.pwc.inspect_result.Rondorf_BOReL.utils.evaluation.sample_random_normal"], ["", "def", "visualize_latent_space", "(", "latent_dim", ",", "n_samples", ",", "decoder", ")", ":", "\n", "    ", "latents", "=", "ptu", ".", "FloatTensor", "(", "sample_random_normal", "(", "latent_dim", ",", "n_samples", ")", ")", "\n", "\n", "pred_rewards", "=", "ptu", ".", "get_numpy", "(", "decoder", "(", "latents", ",", "None", ")", ")", "\n", "goal_locations", "=", "np", ".", "argmax", "(", "pred_rewards", ",", "axis", "=", "-", "1", ")", "\n", "\n", "# embed to lower dim space - if dim > 2", "\n", "if", "latent_dim", ">", "2", ":", "\n", "        ", "tsne", "=", "TSNE", "(", "n_components", "=", "2", ",", "verbose", "=", "1", ",", "perplexity", "=", "40", ",", "n_iter", "=", "300", ")", "\n", "tsne_results", "=", "tsne", ".", "fit_transform", "(", "latents", ")", "\n", "\n", "# create DataFrame", "\n", "", "data", "=", "tsne_results", "if", "latent_dim", ">", "2", "else", "latents", "\n", "\n", "df", "=", "pd", ".", "DataFrame", "(", "data", ",", "columns", "=", "[", "'x1'", ",", "'x2'", "]", ")", "\n", "df", "[", "\"y\"", "]", "=", "goal_locations", "\n", "\n", "fig", "=", "plt", ".", "figure", "(", "figsize", "=", "(", "6", ",", "6", ")", ")", "\n", "sns", ".", "scatterplot", "(", "\n", "x", "=", "\"x1\"", ",", "y", "=", "\"x2\"", ",", "\n", "hue", "=", "\"y\"", ",", "\n", "s", "=", "30", ",", "\n", "palette", "=", "sns", ".", "color_palette", "(", "\"hls\"", ",", "len", "(", "np", ".", "unique", "(", "df", "[", "\"y\"", "]", ")", ")", ")", ",", "\n", "data", "=", "df", ",", "\n", "legend", "=", "\"full\"", ",", "\n", "ax", "=", "plt", ".", "gca", "(", ")", "\n", ")", "\n", "fig", ".", "show", "(", ")", "\n", "\n", "return", "data", ",", "goal_locations", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.utils.reraise.ReraisedException.__init__": [[27, 31], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "old_exc", ",", "prefix", ",", "suffix", ")", ":", "\n", "        ", "self", ".", "old_exc", "=", "old_exc", "\n", "self", ".", "prefix", "=", "prefix", "\n", "self", ".", "suffix", "=", "suffix", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.utils.reraise.ReraisedException.__str__": [[32, 42], ["reraise.full_class_name", "klass.__str__"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.utils.reraise.full_class_name", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.__str__"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "klass", "=", "self", ".", "old_exc", ".", "__class__", "\n", "\n", "orig", "=", "\"%s: %s\"", "%", "(", "full_class_name", "(", "self", ".", "old_exc", ")", ",", "klass", ".", "__str__", "(", "self", ".", "old_exc", ")", ")", "\n", "prefixpart", "=", "suffixpart", "=", "''", "\n", "if", "self", ".", "prefix", "is", "not", "None", ":", "\n", "            ", "prefixpart", "=", "self", ".", "prefix", "+", "\"\\n\"", "\n", "", "if", "self", ".", "suffix", "is", "not", "None", ":", "\n", "            ", "suffixpart", "=", "\"\\n\\n\"", "+", "self", ".", "suffix", "\n", "", "return", "\"%sThe original exception was:\\n\\n%s%s\"", "%", "(", "prefixpart", ",", "orig", ",", "suffixpart", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Rondorf_BOReL.utils.reraise.reraise": [[10, 18], ["sys.exc_info", "reraise.ReraisedException", "reraise_impl", "old_exc_type"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.utils.reraise_impl_py3.reraise_impl"], ["", "def", "reraise", "(", "prefix", "=", "None", ",", "suffix", "=", "None", ")", ":", "\n", "    ", "old_exc_type", ",", "old_exc_value", ",", "traceback", "=", "sys", ".", "exc_info", "(", ")", "\n", "if", "old_exc_value", "is", "None", ":", "\n", "        ", "old_exc_value", "=", "old_exc_type", "(", ")", "\n", "\n", "", "e", "=", "ReraisedException", "(", "old_exc_value", ",", "prefix", ",", "suffix", ")", "\n", "\n", "reraise_impl", "(", "e", ",", "traceback", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.utils.reraise.full_class_name": [[20, 25], ["None"], "function", ["None"], ["", "def", "full_class_name", "(", "o", ")", ":", "\n", "    ", "module", "=", "o", ".", "__class__", ".", "__module__", "\n", "if", "module", "is", "None", "or", "module", "==", "str", ".", "__class__", ".", "__module__", ":", "\n", "        ", "return", "o", ".", "__class__", ".", "__name__", "\n", "", "return", "module", "+", "'.'", "+", "o", ".", "__class__", ".", "__name__", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.utils.reraise_impl_py3.reraise_impl": [[3, 5], ["e.with_traceback"], "function", ["None"], ["def", "reraise_impl", "(", "e", ",", "traceback", ")", ":", "\n", "    ", "raise", "e", ".", "with_traceback", "(", "traceback", ")", "from", "None", "\n", "", ""]], "home.repos.pwc.inspect_result.Rondorf_BOReL.utils.atomic_write.atomic_write": [[32, 56], ["os.path.isfile", "replace", "open", "os.remove", "file.flush", "os.fsync", "file.fileno"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.replace", "home.repos.pwc.inspect_result.Rondorf_BOReL.monitoring.stats_recorder.StatsRecorder.flush"], ["", "@", "contextmanager", "\n", "def", "atomic_write", "(", "filepath", ",", "binary", "=", "False", ",", "fsync", "=", "False", ")", ":", "\n", "    ", "\"\"\" Writeable file object that atomically updates a file (using a temporary file). In some cases (namely Python < 3.3 on Windows), this could result in an existing file being temporarily unlinked.\n\n    :param filepath: the file path to be opened\n    :param binary: whether to open the file in a binary mode instead of textual\n    :param fsync: whether to force write the file to disk\n    \"\"\"", "\n", "\n", "tmppath", "=", "filepath", "+", "'~'", "\n", "while", "os", ".", "path", ".", "isfile", "(", "tmppath", ")", ":", "\n", "        ", "tmppath", "+=", "'~'", "\n", "", "try", ":", "\n", "        ", "with", "open", "(", "tmppath", ",", "'wb'", "if", "binary", "else", "'w'", ")", "as", "file", ":", "\n", "            ", "yield", "file", "\n", "if", "fsync", ":", "\n", "                ", "file", ".", "flush", "(", ")", "\n", "os", ".", "fsync", "(", "file", ".", "fileno", "(", ")", ")", "\n", "", "", "replace", "(", "tmppath", ",", "filepath", ")", "\n", "", "finally", ":", "\n", "        ", "try", ":", "\n", "            ", "os", ".", "remove", "(", "tmppath", ")", "\n", "", "except", "(", "IOError", ",", "OSError", ")", ":", "\n", "            ", "pass", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.Rondorf_BOReL.utils.colorize.colorize": [[18, 36], ["attr.append", "six.u().join", "six.u", "attr.append", "six.u", "str", "six.u", "six.u"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.join"], ["def", "colorize", "(", "string", ",", "color", ",", "bold", "=", "False", ",", "highlight", "=", "False", ")", ":", "\n", "    ", "\"\"\"Return string surrounded by appropriate terminal color codes to\n    print colorized text.  Valid colors: gray, red, green, yellow,\n    blue, magenta, cyan, white, crimson\n    \"\"\"", "\n", "\n", "# Import six here so that `utils` has no import-time dependencies.", "\n", "# We want this since we use `utils` during our import-time sanity checks", "\n", "# that verify that our dependencies (including six) are actually present.", "\n", "import", "six", "\n", "\n", "attr", "=", "[", "]", "\n", "num", "=", "color2num", "[", "color", "]", "\n", "if", "highlight", ":", "num", "+=", "10", "\n", "attr", ".", "append", "(", "six", ".", "u", "(", "str", "(", "num", ")", ")", ")", "\n", "if", "bold", ":", "attr", ".", "append", "(", "six", ".", "u", "(", "'1'", ")", ")", "\n", "attrs", "=", "six", ".", "u", "(", "';'", ")", ".", "join", "(", "attr", ")", "\n", "return", "six", ".", "u", "(", "'\\x1b[%sm%s\\x1b[0m'", ")", "%", "(", "attrs", ",", "string", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.Rondorf_BOReL.utils.ezpickle.EzPickle.__init__": [[20, 23], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "_ezpickle_args", "=", "args", "\n", "self", ".", "_ezpickle_kwargs", "=", "kwargs", "\n", "", "def", "__getstate__", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.utils.ezpickle.EzPickle.__getstate__": [[23, 25], ["None"], "methods", ["None"], ["", "def", "__getstate__", "(", "self", ")", ":", "\n", "        ", "return", "{", "\"_ezpickle_args\"", ":", "self", ".", "_ezpickle_args", ",", "\"_ezpickle_kwargs\"", ":", "self", ".", "_ezpickle_kwargs", "}", "\n", "", "def", "__setstate__", "(", "self", ",", "d", ")", ":", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.utils.ezpickle.EzPickle.__setstate__": [[25, 28], ["ezpickle.EzPickle.__dict__.update", "type"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.GymObject.update", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjvGeomWrapper.type"], ["", "def", "__setstate__", "(", "self", ",", "d", ")", ":", "\n", "        ", "out", "=", "type", "(", "self", ")", "(", "*", "d", "[", "\"_ezpickle_args\"", "]", ",", "**", "d", "[", "\"_ezpickle_kwargs\"", "]", ")", "\n", "self", ".", "__dict__", ".", "update", "(", "out", ".", "__dict__", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Rondorf_BOReL.utils.json_utils.json_encode_np": [[3, 19], ["isinstance", "list", "isinstance", "float", "isinstance", "float", "isinstance", "int", "isinstance", "int"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.ListableAPIResource.list"], ["def", "json_encode_np", "(", "obj", ")", ":", "\n", "    ", "\"\"\"\n    JSON can't serialize numpy types, so convert to pure python\n    \"\"\"", "\n", "if", "isinstance", "(", "obj", ",", "np", ".", "ndarray", ")", ":", "\n", "        ", "return", "list", "(", "obj", ")", "\n", "", "elif", "isinstance", "(", "obj", ",", "np", ".", "float32", ")", ":", "\n", "        ", "return", "float", "(", "obj", ")", "\n", "", "elif", "isinstance", "(", "obj", ",", "np", ".", "float64", ")", ":", "\n", "        ", "return", "float", "(", "obj", ")", "\n", "", "elif", "isinstance", "(", "obj", ",", "np", ".", "int32", ")", ":", "\n", "        ", "return", "int", "(", "obj", ")", "\n", "", "elif", "isinstance", "(", "obj", ",", "np", ".", "int64", ")", ":", "\n", "        ", "return", "int", "(", "obj", ")", "\n", "", "else", ":", "\n", "        ", "return", "obj", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Rondorf_BOReL.utils.seeding.np_random": [[24, 33], ["seeding._seed", "numpy.random.RandomState", "np.random.RandomState.seed", "environments.mujoco.rand_param_envs.gym.error.Error", "seeding._int_list_from_bigint", "seeding.hash_seed", "isinstance"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.algorithmic.algorithmic_env.AlgorithmicEnv._seed", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.seed", "home.repos.pwc.inspect_result.Rondorf_BOReL.utils.seeding._int_list_from_bigint", "home.repos.pwc.inspect_result.Rondorf_BOReL.utils.seeding.hash_seed"], ["", "def", "np_random", "(", "seed", "=", "None", ")", ":", "\n", "    ", "if", "seed", "is", "not", "None", "and", "not", "(", "isinstance", "(", "seed", ",", "integer_types", ")", "and", "0", "<=", "seed", ")", ":", "\n", "        ", "raise", "error", ".", "Error", "(", "'Seed must be a non-negative integer or omitted, not {}'", ".", "format", "(", "seed", ")", ")", "\n", "\n", "", "seed", "=", "_seed", "(", "seed", ")", "\n", "\n", "rng", "=", "np", ".", "random", ".", "RandomState", "(", ")", "\n", "rng", ".", "seed", "(", "_int_list_from_bigint", "(", "hash_seed", "(", "seed", ")", ")", ")", "\n", "return", "rng", ",", "seed", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.utils.seeding.hash_seed": [[34, 57], ["hashlib.sha512().digest", "seeding._bigint_from_bytes", "seeding._seed", "hashlib.sha512", "str().encode", "str"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.utils.seeding._bigint_from_bytes", "home.repos.pwc.inspect_result.Rondorf_BOReL.algorithmic.algorithmic_env.AlgorithmicEnv._seed", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.encode"], ["", "def", "hash_seed", "(", "seed", "=", "None", ",", "max_bytes", "=", "8", ")", ":", "\n", "    ", "\"\"\"Any given evaluation is likely to have many PRNG's active at\n    once. (Most commonly, because the environment is running in\n    multiple processes.) There's literature indicating that having\n    linear correlations between seeds of multiple PRNG's can correlate\n    the outputs:\n\n    http://blogs.unity3d.com/2015/01/07/a-primer-on-repeatable-random-numbers/\n    http://stackoverflow.com/questions/1554958/how-different-do-random-seeds-need-to-be\n    http://dl.acm.org/citation.cfm?id=1276928\n\n    Thus, for sanity we hash the seeds before using them. (This scheme\n    is likely not crypto-strength, but it should be good enough to get\n    rid of simple correlations.)\n\n    Args:\n        seed (Optional[int]): None seeds from an operating system specific randomness source.\n        max_bytes: Maximum number of bytes to use in the hashed seed.\n    \"\"\"", "\n", "if", "seed", "is", "None", ":", "\n", "        ", "seed", "=", "_seed", "(", "max_bytes", "=", "max_bytes", ")", "\n", "", "hash", "=", "hashlib", ".", "sha512", "(", "str", "(", "seed", ")", ".", "encode", "(", "'utf8'", ")", ")", ".", "digest", "(", ")", "\n", "return", "_bigint_from_bytes", "(", "hash", "[", ":", "max_bytes", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.utils.seeding._seed": [[58, 80], ["seeding._bigint_from_bytes", "isinstance", "os.urandom", "_bigint_from_bytes.encode", "hashlib.sha512().digest", "seeding._bigint_from_bytes", "isinstance", "environments.mujoco.rand_param_envs.gym.error.Error", "hashlib.sha512", "type"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.utils.seeding._bigint_from_bytes", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.encode", "home.repos.pwc.inspect_result.Rondorf_BOReL.utils.seeding._bigint_from_bytes", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjvGeomWrapper.type"], ["", "def", "_seed", "(", "a", "=", "None", ",", "max_bytes", "=", "8", ")", ":", "\n", "    ", "\"\"\"Create a strong random seed. Otherwise, Python 2 would seed using\n    the system time, which might be non-robust especially in the\n    presence of concurrency.\n\n    Args:\n        a (Optional[int, str]): None seeds from an operating system specific randomness source.\n        max_bytes: Maximum number of bytes to use in the seed.\n    \"\"\"", "\n", "# Adapted from https://svn.python.org/projects/python/tags/r32/Lib/random.py", "\n", "if", "a", "is", "None", ":", "\n", "        ", "a", "=", "_bigint_from_bytes", "(", "os", ".", "urandom", "(", "max_bytes", ")", ")", "\n", "", "elif", "isinstance", "(", "a", ",", "str", ")", ":", "\n", "        ", "a", "=", "a", ".", "encode", "(", "'utf8'", ")", "\n", "a", "+=", "hashlib", ".", "sha512", "(", "a", ")", ".", "digest", "(", ")", "\n", "a", "=", "_bigint_from_bytes", "(", "a", "[", ":", "max_bytes", "]", ")", "\n", "", "elif", "isinstance", "(", "a", ",", "integer_types", ")", ":", "\n", "        ", "a", "=", "a", "%", "2", "**", "(", "8", "*", "max_bytes", ")", "\n", "", "else", ":", "\n", "        ", "raise", "error", ".", "Error", "(", "'Invalid type for seed: {} ({})'", ".", "format", "(", "type", "(", "a", ")", ",", "a", ")", ")", "\n", "\n", "", "return", "a", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.utils.seeding._bigint_from_bytes": [[82, 92], ["int", "struct.unpack", "enumerate", "len", "len"], "function", ["None"], ["", "def", "_bigint_from_bytes", "(", "bytes", ")", ":", "\n", "    ", "sizeof_int", "=", "4", "\n", "padding", "=", "sizeof_int", "-", "len", "(", "bytes", ")", "%", "sizeof_int", "\n", "bytes", "+=", "b'\\0'", "*", "padding", "\n", "int_count", "=", "int", "(", "len", "(", "bytes", ")", "/", "sizeof_int", ")", "\n", "unpacked", "=", "struct", ".", "unpack", "(", "\"{}I\"", ".", "format", "(", "int_count", ")", ",", "bytes", ")", "\n", "accum", "=", "0", "\n", "for", "i", ",", "val", "in", "enumerate", "(", "unpacked", ")", ":", "\n", "        ", "accum", "+=", "2", "**", "(", "sizeof_int", "*", "8", "*", "i", ")", "*", "val", "\n", "", "return", "accum", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.utils.seeding._int_list_from_bigint": [[93, 105], ["environments.mujoco.rand_param_envs.gym.error.Error", "divmod", "ints.append"], "function", ["None"], ["", "def", "_int_list_from_bigint", "(", "bigint", ")", ":", "\n", "# Special case 0", "\n", "    ", "if", "bigint", "<", "0", ":", "\n", "        ", "raise", "error", ".", "Error", "(", "'Seed must be non-negative, not {}'", ".", "format", "(", "bigint", ")", ")", "\n", "", "elif", "bigint", "==", "0", ":", "\n", "        ", "return", "[", "0", "]", "\n", "\n", "", "ints", "=", "[", "]", "\n", "while", "bigint", ">", "0", ":", "\n", "        ", "bigint", ",", "mod", "=", "divmod", "(", "bigint", ",", "2", "**", "32", ")", "\n", "ints", ".", "append", "(", "mod", ")", "\n", "", "return", "ints", "\n", "", ""]], "home.repos.pwc.inspect_result.Rondorf_BOReL.utils.play.PlayPlot.__init__": [[151, 165], ["len", "matplotlib.subplots", "matplotlib.subplots", "zip", "axis.set_title", "collections.deque", "range", "range"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "callback", ",", "horizon_timesteps", ",", "plot_names", ")", ":", "\n", "        ", "self", ".", "data_callback", "=", "callback", "\n", "self", ".", "horizon_timesteps", "=", "horizon_timesteps", "\n", "self", ".", "plot_names", "=", "plot_names", "\n", "\n", "num_plots", "=", "len", "(", "self", ".", "plot_names", ")", "\n", "self", ".", "fig", ",", "self", ".", "ax", "=", "plt", ".", "subplots", "(", "num_plots", ")", "\n", "if", "num_plots", "==", "1", ":", "\n", "            ", "self", ".", "ax", "=", "[", "self", ".", "ax", "]", "\n", "", "for", "axis", ",", "name", "in", "zip", "(", "self", ".", "ax", ",", "plot_names", ")", ":", "\n", "            ", "axis", ".", "set_title", "(", "name", ")", "\n", "", "self", ".", "t", "=", "0", "\n", "self", ".", "cur_plot", "=", "[", "None", "for", "_", "in", "range", "(", "num_plots", ")", "]", "\n", "self", ".", "data", "=", "[", "deque", "(", "maxlen", "=", "horizon_timesteps", ")", "for", "_", "in", "range", "(", "num_plots", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.utils.play.PlayPlot.callback": [[166, 180], ["play.PlayPlot.data_callback", "zip", "enumerate", "matplotlib.pause", "matplotlib.pause", "data_series.append", "max", "play.PlayPlot.ax[].scatter", "play.PlayPlot.ax[].set_xlim", "plot.remove", "range", "list"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.ListableAPIResource.list"], ["", "def", "callback", "(", "self", ",", "obs_t", ",", "obs_tp1", ",", "action", ",", "rew", ",", "done", ",", "info", ")", ":", "\n", "        ", "points", "=", "self", ".", "data_callback", "(", "obs_t", ",", "obs_tp1", ",", "action", ",", "rew", ",", "done", ",", "info", ")", "\n", "for", "point", ",", "data_series", "in", "zip", "(", "points", ",", "self", ".", "data", ")", ":", "\n", "            ", "data_series", ".", "append", "(", "point", ")", "\n", "", "self", ".", "t", "+=", "1", "\n", "\n", "xmin", ",", "xmax", "=", "max", "(", "0", ",", "self", ".", "t", "-", "self", ".", "horizon_timesteps", ")", ",", "self", ".", "t", "\n", "\n", "for", "i", ",", "plot", "in", "enumerate", "(", "self", ".", "cur_plot", ")", ":", "\n", "            ", "if", "plot", "is", "not", "None", ":", "\n", "                ", "plot", ".", "remove", "(", ")", "\n", "", "self", ".", "cur_plot", "[", "i", "]", "=", "self", ".", "ax", "[", "i", "]", ".", "scatter", "(", "range", "(", "xmin", ",", "xmax", ")", ",", "list", "(", "self", ".", "data", "[", "i", "]", ")", ")", "\n", "self", ".", "ax", "[", "i", "]", ".", "set_xlim", "(", "xmin", ",", "xmax", ")", "\n", "", "plt", ".", "pause", "(", "0.000001", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.utils.play.display_arr": [[17, 23], ["pygame.surfarray.make_surface", "pygame.transform.scale", "screen.blit", "arr.min", "arr.max", "arr.swapaxes"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjVisualWrapper.scale"], ["", "def", "display_arr", "(", "screen", ",", "arr", ",", "video_size", ",", "transpose", ")", ":", "\n", "    ", "arr_min", ",", "arr_max", "=", "arr", ".", "min", "(", ")", ",", "arr", ".", "max", "(", ")", "\n", "arr", "=", "255.0", "*", "(", "arr", "-", "arr_min", ")", "/", "(", "arr_max", "-", "arr_min", ")", "\n", "pyg_img", "=", "pygame", ".", "surfarray", ".", "make_surface", "(", "arr", ".", "swapaxes", "(", "0", ",", "1", ")", "if", "transpose", "else", "arr", ")", "\n", "pyg_img", "=", "pygame", ".", "transform", ".", "scale", "(", "pyg_img", ",", "video_size", ")", "\n", "screen", ".", "blit", "(", "pyg_img", ",", "(", "0", ",", "0", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.utils.play.play": [[24, 149], ["set", "pygame.display.set_mode", "pygame.time.Clock", "pygame.quit", "type", "hasattr", "sum", "pygame.event.get", "pygame.display.flip", "pygame.time.Clock.tick", "len", "env.get_keys_to_action", "hasattr", "map", "int", "int", "env.reset", "env.step", "play.display_arr", "len", "env.unwrapped.get_keys_to_action", "env.unwrapped.get_keys_to_action.keys", "callback", "len", "obs.repeat.repeat", "tuple", "pressed_keys.append", "sorted", "pressed_keys.remove", "pygame.display.set_mode", "print"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjvGeomWrapper.type", "home.repos.pwc.inspect_result.Rondorf_BOReL.atari.atari_env.AtariEnv.get_keys_to_action", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.reset", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.step", "home.repos.pwc.inspect_result.Rondorf_BOReL.utils.play.display_arr", "home.repos.pwc.inspect_result.Rondorf_BOReL.atari.atari_env.AtariEnv.get_keys_to_action", "home.repos.pwc.inspect_result.Rondorf_BOReL.utils.play.PlayPlot.callback"], ["", "def", "play", "(", "env", ",", "transpose", "=", "True", ",", "fps", "=", "30", ",", "zoom", "=", "None", ",", "callback", "=", "None", ",", "keys_to_action", "=", "None", ")", ":", "\n", "    ", "\"\"\"Allows one to play the game using keyboard.\n\n    To simply play the game use:\n\n        play(gym.make(\"Pong-v3\"))\n\n    Above code works also if env is wrapped, so it's particularly useful in\n    verifying that the frame-level preprocessing does not render the game\n    unplayable.\n\n    If you wish to plot real time statistics as you play, you can use\n    gym.utils.play.PlayPlot. Here's a sample code for plotting the reward\n    for last 5 second of gameplay.\n\n        def callback(obs_t, obs_tp1, rew, done, info):\n            return [rew,]\n        env_plotter = EnvPlotter(callback, 30 * 5, [\"reward\"])\n\n        env = gym.make(\"Pong-v3\")\n        play(env, callback=env_plotter.callback)\n\n\n    Arguments\n    ---------\n    env: gym.Env\n        Environment to use for playing.\n    transpose: bool\n        If True the output of observation is transposed.\n        Defaults to true.\n    fps: int\n        Maximum number of steps of the environment to execute every second.\n        Defaults to 30.\n    zoom: float\n        Make screen edge this many times bigger\n    callback: lambda or None\n        Callback if a callback is provided it will be executed after\n        every step. It takes the following input:\n            obs_t: observation before performing action\n            obs_tp1: observation after performing action\n            action: action that was executed\n            rew: reward that was received\n            done: whether the environemnt is done or not\n            info: debug info\n    keys_to_action: dict: tuple(int) -> int or None\n        Mapping from keys pressed to action performed.\n        For example if pressed 'w' and space at the same time is supposed\n        to trigger action number 2 then key_to_action dict would look like this:\n\n            {\n                # ...\n                sorted(ord('w'), ord(' ')) -> 2\n                # ...\n            }\n        If None, default key_to_action mapping for that env is used, if provided.\n    \"\"\"", "\n", "\n", "obs_s", "=", "env", ".", "observation_space", "\n", "assert", "type", "(", "obs_s", ")", "==", "gym", ".", "spaces", ".", "box", ".", "Box", "\n", "assert", "len", "(", "obs_s", ".", "shape", ")", "==", "2", "or", "(", "len", "(", "obs_s", ".", "shape", ")", "==", "3", "and", "obs_s", ".", "shape", "[", "2", "]", "in", "[", "1", ",", "3", "]", ")", "\n", "\n", "if", "keys_to_action", "is", "None", ":", "\n", "        ", "if", "hasattr", "(", "env", ",", "'get_keys_to_action'", ")", ":", "\n", "            ", "keys_to_action", "=", "env", ".", "get_keys_to_action", "(", ")", "\n", "", "elif", "hasattr", "(", "env", ".", "unwrapped", ",", "'get_keys_to_action'", ")", ":", "\n", "            ", "keys_to_action", "=", "env", ".", "unwrapped", ".", "get_keys_to_action", "(", ")", "\n", "", "else", ":", "\n", "            ", "assert", "False", ",", "env", ".", "spec", ".", "id", "+", "\" does not have explicit key to action mapping, \"", "+", "\"please specify one manually\"", "\n", "", "", "relevant_keys", "=", "set", "(", "sum", "(", "map", "(", "list", ",", "keys_to_action", ".", "keys", "(", ")", ")", ",", "[", "]", ")", ")", "\n", "\n", "if", "transpose", ":", "\n", "        ", "video_size", "=", "env", ".", "observation_space", ".", "shape", "[", "1", "]", ",", "env", ".", "observation_space", ".", "shape", "[", "0", "]", "\n", "", "else", ":", "\n", "        ", "video_size", "=", "env", ".", "observation_space", ".", "shape", "[", "0", "]", ",", "env", ".", "observation_space", ".", "shape", "[", "1", "]", "\n", "\n", "", "if", "zoom", "is", "not", "None", ":", "\n", "        ", "video_size", "=", "int", "(", "video_size", "[", "0", "]", "*", "zoom", ")", ",", "int", "(", "video_size", "[", "1", "]", "*", "zoom", ")", "\n", "\n", "", "pressed_keys", "=", "[", "]", "\n", "running", "=", "True", "\n", "env_done", "=", "True", "\n", "\n", "screen", "=", "pygame", ".", "display", ".", "set_mode", "(", "video_size", ")", "\n", "clock", "=", "pygame", ".", "time", ".", "Clock", "(", ")", "\n", "\n", "\n", "while", "running", ":", "\n", "        ", "if", "env_done", ":", "\n", "            ", "env_done", "=", "False", "\n", "obs", "=", "env", ".", "reset", "(", ")", "\n", "", "else", ":", "\n", "            ", "action", "=", "keys_to_action", "[", "tuple", "(", "sorted", "(", "pressed_keys", ")", ")", "]", "\n", "prev_obs", "=", "obs", "\n", "obs", ",", "rew", ",", "env_done", ",", "info", "=", "env", ".", "step", "(", "action", ")", "\n", "if", "callback", "is", "not", "None", ":", "\n", "                ", "callback", "(", "prev_obs", ",", "obs", ",", "action", ",", "rew", ",", "env_done", ",", "info", ")", "\n", "", "", "if", "obs", "is", "not", "None", ":", "\n", "            ", "if", "len", "(", "obs", ".", "shape", ")", "==", "2", ":", "\n", "                ", "obs", "=", "obs", "[", ":", ",", ":", ",", "None", "]", "\n", "", "if", "obs", ".", "shape", "[", "2", "]", "==", "1", ":", "\n", "                ", "obs", "=", "obs", ".", "repeat", "(", "3", ",", "axis", "=", "2", ")", "\n", "", "display_arr", "(", "screen", ",", "obs", ",", "transpose", "=", "transpose", ",", "video_size", "=", "video_size", ")", "\n", "\n", "# process pygame events", "\n", "", "for", "event", "in", "pygame", ".", "event", ".", "get", "(", ")", ":", "\n", "# test events, set key states", "\n", "            ", "if", "event", ".", "type", "==", "pygame", ".", "KEYDOWN", ":", "\n", "                ", "if", "event", ".", "key", "in", "relevant_keys", ":", "\n", "                    ", "pressed_keys", ".", "append", "(", "event", ".", "key", ")", "\n", "", "elif", "event", ".", "key", "==", "27", ":", "\n", "                    ", "running", "=", "False", "\n", "", "", "elif", "event", ".", "type", "==", "pygame", ".", "KEYUP", ":", "\n", "                ", "if", "event", ".", "key", "in", "relevant_keys", ":", "\n", "                    ", "pressed_keys", ".", "remove", "(", "event", ".", "key", ")", "\n", "", "", "elif", "event", ".", "type", "==", "pygame", ".", "QUIT", ":", "\n", "                ", "running", "=", "False", "\n", "", "elif", "event", ".", "type", "==", "VIDEORESIZE", ":", "\n", "                ", "video_size", "=", "event", ".", "size", "\n", "screen", "=", "pygame", ".", "display", ".", "set_mode", "(", "video_size", ")", "\n", "print", "(", "video_size", ")", "\n", "\n", "", "", "pygame", ".", "display", ".", "flip", "(", ")", "\n", "clock", ".", "tick", "(", "fps", ")", "\n", "", "pygame", ".", "quit", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.utils.closer.Closer.__init__": [[32, 39], ["threading.Lock", "weakref.WeakValueDictionary", "atexit.register"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.envs.registration.register"], ["def", "__init__", "(", "self", ",", "atexit_register", "=", "True", ")", ":", "\n", "        ", "self", ".", "lock", "=", "threading", ".", "Lock", "(", ")", "\n", "self", ".", "next_id", "=", "-", "1", "\n", "self", ".", "closeables", "=", "weakref", ".", "WeakValueDictionary", "(", ")", "\n", "\n", "if", "atexit_register", ":", "\n", "            ", "atexit", ".", "register", "(", "self", ".", "close", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.utils.closer.Closer.generate_next_id": [[40, 44], ["None"], "methods", ["None"], ["", "", "def", "generate_next_id", "(", "self", ")", ":", "\n", "        ", "with", "self", ".", "lock", ":", "\n", "            ", "self", ".", "next_id", "+=", "1", "\n", "return", "self", ".", "next_id", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.utils.closer.Closer.register": [[45, 56], ["hasattr", "closer.Closer.generate_next_id"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.utils.closer.Closer.generate_next_id"], ["", "", "def", "register", "(", "self", ",", "closeable", ")", ":", "\n", "        ", "\"\"\"Registers an object with a 'close' method.\n\n        Returns:\n            int: The registration ID of this object. It is the caller's responsibility to save this ID if early closing is desired.\n        \"\"\"", "\n", "assert", "hasattr", "(", "closeable", ",", "'close'", ")", ",", "'No close method for {}'", ".", "format", "(", "closeable", ")", "\n", "\n", "next_id", "=", "self", ".", "generate_next_id", "(", ")", "\n", "self", ".", "closeables", "[", "next_id", "]", "=", "closeable", "\n", "return", "next_id", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.utils.closer.Closer.unregister": [[57, 61], ["None"], "methods", ["None"], ["", "def", "unregister", "(", "self", ",", "id", ")", ":", "\n", "        ", "assert", "id", "is", "not", "None", "\n", "if", "id", "in", "self", ".", "closeables", ":", "\n", "            ", "del", "self", ".", "closeables", "[", "id", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.utils.closer.Closer.close": [[62, 68], ["list", "closer.Closer.closeables.values", "closeable.close"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.ListableAPIResource.list", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.close"], ["", "", "def", "close", "(", "self", ")", ":", "\n", "# Explicitly fetch all monitors first so that they can't disappear while", "\n", "# we iterate. cf. http://stackoverflow.com/a/12429620", "\n", "        ", "closeables", "=", "list", "(", "self", ".", "closeables", ".", "values", "(", ")", ")", "\n", "for", "closeable", "in", "closeables", ":", "\n", "            ", "closeable", ".", "close", "(", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.Rondorf_BOReL.data_management.storage_policy.MultiTaskPolicyStorage.__init__": [[6, 10], ["data_management.multi_task_replay_buffer.MultiTaskReplayBuffer.__init__"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.__init__"], ["    ", "def", "__init__", "(", "self", ",", "max_replay_buffer_size", ",", "obs_dim", ",", "action_space", ",", "tasks", ",", "trajectory_len", ",", "\n", "num_reward_arrays", "=", "1", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "max_replay_buffer_size", ",", "obs_dim", ",", "action_space", ",", "tasks", ",", "trajectory_len", ",", "\n", "num_reward_arrays", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.data_management.replay_buffer.ReplayBuffer.add_sample": [[9, 16], ["None"], "methods", ["None"], ["@", "abc", ".", "abstractmethod", "\n", "def", "add_sample", "(", "self", ",", "observation", ",", "action", ",", "reward", ",", "next_observation", ",", "\n", "terminal", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n        Add a transition tuple.\n        \"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.data_management.replay_buffer.ReplayBuffer.terminate_episode": [[17, 25], ["None"], "methods", ["None"], ["", "@", "abc", ".", "abstractmethod", "\n", "def", "terminate_episode", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Let the replay buffer know that the episode has terminated in case some\n        special book-keeping has to happen.\n        :return:\n        \"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.data_management.replay_buffer.ReplayBuffer.num_steps_can_sample": [[26, 32], ["None"], "methods", ["None"], ["", "@", "abc", ".", "abstractmethod", "\n", "def", "num_steps_can_sample", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n        :return: # of unique items that can be sampled.\n        \"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.data_management.replay_buffer.ReplayBuffer.random_batch": [[33, 41], ["None"], "methods", ["None"], ["", "@", "abc", ".", "abstractmethod", "\n", "def", "random_batch", "(", "self", ",", "batch_size", ")", ":", "\n", "        ", "\"\"\"\n        Return a batch of size `batch_size`.\n        :param batch_size:\n        :return:\n        \"\"\"", "\n", "pass", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Rondorf_BOReL.data_management.storage_vae.MultiTaskVAEStorage.__init__": [[7, 9], ["data_management.multi_task_replay_buffer.MultiTaskReplayBuffer.__init__"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.__init__"], ["    ", "def", "__init__", "(", "self", ",", "max_replay_buffer_size", ",", "obs_dim", ",", "action_space", ",", "tasks", ",", "trajectory_len", ",", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "max_replay_buffer_size", ",", "obs_dim", ",", "action_space", ",", "tasks", ",", "trajectory_len", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Rondorf_BOReL.data_management.multi_task_replay_buffer.MultiTaskReplayBuffer.__init__": [[9, 36], ["dict", "data_management.simple_replay_buffer.SimpleReplayBuffer", "utils.helpers.get_dim"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.utils.helpers.get_dim"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "max_replay_buffer_size", ",", "\n", "obs_dim", ",", "\n", "action_space", ",", "\n", "tasks", ",", "\n", "trajectory_len", ",", "\n", "num_reward_arrays", "=", "1", ",", "\n", "**", "kwargs", "\n", ")", ":", "\n", "        ", "\"\"\"\n        :param max_replay_buffer_size:\n        :param obs_dim\n        :param action_space\n        :param tasks: for multi-task setting\n        \"\"\"", "\n", "self", ".", "_obs_dim", "=", "obs_dim", "\n", "self", ".", "_action_space", "=", "action_space", "\n", "self", ".", "trajectory_len", "=", "trajectory_len", "\n", "self", ".", "task_buffers", "=", "dict", "(", "[", "(", "idx", ",", "SimpleReplayBuffer", "(", "\n", "max_replay_buffer_size", "=", "max_replay_buffer_size", ",", "\n", "observation_dim", "=", "self", ".", "_obs_dim", ",", "\n", "action_dim", "=", "utl", ".", "get_dim", "(", "self", ".", "_action_space", ")", ",", "\n", "trajectory_len", "=", "trajectory_len", ",", "\n", "num_reward_arrays", "=", "num_reward_arrays", ",", "\n", "**", "kwargs", "\n", ")", ")", "for", "idx", "in", "tasks", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.data_management.multi_task_replay_buffer.MultiTaskReplayBuffer.add_sample": [[37, 45], ["isinstance", "multi_task_replay_buffer.MultiTaskReplayBuffer.task_buffers[].add_sample", "numpy.eye"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.data_management.simple_replay_buffer.SimpleReplayBuffer.add_sample"], ["", "def", "add_sample", "(", "self", ",", "task", ",", "observation", ",", "action", ",", "reward", ",", "terminal", ",", "\n", "next_observation", ",", "**", "kwargs", ")", ":", "\n", "\n", "        ", "if", "isinstance", "(", "self", ".", "_action_space", ",", "Discrete", ")", ":", "\n", "            ", "action", "=", "np", ".", "eye", "(", "self", ".", "_action_space", ".", "n", ")", "[", "action", "]", "\n", "", "self", ".", "task_buffers", "[", "task", "]", ".", "add_sample", "(", "\n", "observation", ",", "action", ",", "reward", ",", "terminal", ",", "\n", "next_observation", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.data_management.multi_task_replay_buffer.MultiTaskReplayBuffer.add_samples": [[46, 51], ["multi_task_replay_buffer.MultiTaskReplayBuffer.task_buffers[].add_samples"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.data_management.simple_replay_buffer.SimpleReplayBuffer.add_samples"], ["", "def", "add_samples", "(", "self", ",", "task", ",", "observations", ",", "actions", ",", "rewards", ",", "terminals", ",", "\n", "next_observations", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "task_buffers", "[", "task", "]", ".", "add_samples", "(", "\n", "observations", ",", "actions", ",", "rewards", ",", "terminals", ",", "\n", "next_observations", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.data_management.multi_task_replay_buffer.MultiTaskReplayBuffer.terminate_episode": [[52, 54], ["multi_task_replay_buffer.MultiTaskReplayBuffer.task_buffers[].terminate_episode"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.data_management.simple_replay_buffer.SimpleReplayBuffer.terminate_episode"], ["", "def", "terminate_episode", "(", "self", ",", "task", ")", ":", "\n", "        ", "self", ".", "task_buffers", "[", "task", "]", ".", "terminate_episode", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.data_management.multi_task_replay_buffer.MultiTaskReplayBuffer.random_batch": [[55, 61], ["multi_task_replay_buffer.MultiTaskReplayBuffer.task_buffers[].random_sequence", "multi_task_replay_buffer.MultiTaskReplayBuffer.task_buffers[].random_batch"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.data_management.simple_replay_buffer.SimpleReplayBuffer.random_sequence", "home.repos.pwc.inspect_result.Rondorf_BOReL.data_management.simple_replay_buffer.SimpleReplayBuffer.random_batch"], ["", "def", "random_batch", "(", "self", ",", "task", ",", "batch_size", ",", "sequence", "=", "False", ")", ":", "\n", "        ", "if", "sequence", ":", "\n", "            ", "batch", "=", "self", ".", "task_buffers", "[", "task", "]", ".", "random_sequence", "(", "batch_size", ")", "\n", "", "else", ":", "\n", "            ", "batch", "=", "self", ".", "task_buffers", "[", "task", "]", ".", "random_batch", "(", "batch_size", ")", "\n", "", "return", "batch", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.data_management.multi_task_replay_buffer.MultiTaskReplayBuffer.can_sample_batch": [[62, 64], ["multi_task_replay_buffer.MultiTaskReplayBuffer.task_buffers[].can_sample_batch"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.data_management.simple_replay_buffer.SimpleReplayBuffer.can_sample_batch"], ["", "def", "can_sample_batch", "(", "self", ",", "task", ",", "batch_size", ")", ":", "\n", "        ", "return", "self", ".", "task_buffers", "[", "task", "]", ".", "can_sample_batch", "(", "batch_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.data_management.multi_task_replay_buffer.MultiTaskReplayBuffer.random_episodes": [[65, 67], ["multi_task_replay_buffer.MultiTaskReplayBuffer.task_buffers[].random_episodes"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.data_management.simple_replay_buffer.SimpleReplayBuffer.random_episodes"], ["", "def", "random_episodes", "(", "self", ",", "task", ",", "num_episodes", ")", ":", "\n", "        ", "return", "self", ".", "task_buffers", "[", "task", "]", ".", "random_episodes", "(", "num_episodes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.data_management.multi_task_replay_buffer.MultiTaskReplayBuffer.can_sample_episodes": [[68, 70], ["multi_task_replay_buffer.MultiTaskReplayBuffer.task_buffers[].can_sample_episodes"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.data_management.simple_replay_buffer.SimpleReplayBuffer.can_sample_episodes"], ["", "def", "can_sample_episodes", "(", "self", ",", "task", ",", "num_episodes", "=", "None", ")", ":", "\n", "        ", "return", "self", ".", "task_buffers", "[", "task", "]", ".", "can_sample_episodes", "(", "num_episodes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.data_management.multi_task_replay_buffer.MultiTaskReplayBuffer.num_steps_can_sample": [[71, 73], ["multi_task_replay_buffer.MultiTaskReplayBuffer.task_buffers[].num_steps_can_sample"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.data_management.simple_replay_buffer.SimpleReplayBuffer.num_steps_can_sample"], ["", "def", "num_steps_can_sample", "(", "self", ",", "task", ")", ":", "\n", "        ", "return", "self", ".", "task_buffers", "[", "task", "]", ".", "num_steps_can_sample", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.data_management.multi_task_replay_buffer.MultiTaskReplayBuffer.add_path": [[74, 76], ["multi_task_replay_buffer.MultiTaskReplayBuffer.task_buffers[].add_path"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.data_management.multi_task_replay_buffer.MultiTaskReplayBuffer.add_path"], ["", "def", "add_path", "(", "self", ",", "task", ",", "path", ")", ":", "\n", "        ", "self", ".", "task_buffers", "[", "task", "]", ".", "add_path", "(", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.data_management.multi_task_replay_buffer.MultiTaskReplayBuffer.add_paths": [[77, 80], ["multi_task_replay_buffer.MultiTaskReplayBuffer.task_buffers[].add_path"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.data_management.multi_task_replay_buffer.MultiTaskReplayBuffer.add_path"], ["", "def", "add_paths", "(", "self", ",", "task", ",", "paths", ")", ":", "\n", "        ", "for", "path", "in", "paths", ":", "\n", "            ", "self", ".", "task_buffers", "[", "task", "]", ".", "add_path", "(", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.data_management.multi_task_replay_buffer.MultiTaskReplayBuffer.clear_buffer": [[81, 83], ["multi_task_replay_buffer.MultiTaskReplayBuffer.task_buffers[].clear"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.data_management.simple_replay_buffer.SimpleReplayBuffer.clear"], ["", "", "def", "clear_buffer", "(", "self", ",", "task", ")", ":", "\n", "        ", "self", ".", "task_buffers", "[", "task", "]", ".", "clear", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.data_management.multi_task_replay_buffer.MultiTaskReplayBuffer.get_running_episode": [[84, 86], ["multi_task_replay_buffer.MultiTaskReplayBuffer.task_buffers[].get_running_episode"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.data_management.simple_replay_buffer.SimpleReplayBuffer.get_running_episode"], ["", "def", "get_running_episode", "(", "self", ",", "task", ")", ":", "\n", "        ", "return", "self", ".", "task_buffers", "[", "task", "]", ".", "get_running_episode", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.data_management.multi_task_replay_buffer.MultiTaskReplayBuffer.reset_running_episode": [[87, 89], ["multi_task_replay_buffer.MultiTaskReplayBuffer.task_buffers[].reset_running_episode"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.data_management.simple_replay_buffer.SimpleReplayBuffer.reset_running_episode"], ["", "def", "reset_running_episode", "(", "self", ",", "task", ")", ":", "\n", "        ", "self", ".", "task_buffers", "[", "task", "]", ".", "reset_running_episode", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.data_management.multi_task_replay_buffer.MultiTaskReplayBuffer.num_complete_episodes": [[90, 92], ["multi_task_replay_buffer.MultiTaskReplayBuffer.task_buffers[].num_complete_episodes"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.data_management.simple_replay_buffer.SimpleReplayBuffer.num_complete_episodes"], ["", "def", "num_complete_episodes", "(", "self", ",", "task", ")", ":", "\n", "        ", "return", "self", ".", "task_buffers", "[", "task", "]", ".", "num_complete_episodes", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Rondorf_BOReL.data_management.simple_replay_buffer.SimpleReplayBuffer.__init__": [[8, 43], ["numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "simple_replay_buffer.SimpleReplayBuffer.clear", "numpy.zeros", "numpy.zeros"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.zeros", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.zeros", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.zeros", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.zeros", "home.repos.pwc.inspect_result.Rondorf_BOReL.data_management.simple_replay_buffer.SimpleReplayBuffer.clear", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.zeros", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.zeros"], ["    ", "def", "__init__", "(", "\n", "self", ",", "max_replay_buffer_size", ",", "observation_dim", ",", "action_dim", ",", "trajectory_len", ",", "\n", "num_reward_arrays", "=", "1", ",", "**", "kwargs", "\n", ")", ":", "\n", "        ", "'''\n\n        :param max_replay_buffer_size:\n        :param observation_dim:\n        :param action_dim:\n        :param trajectory_len:\n        :param num_reward_arrays: if want to save multiple reward terms (say r = r1 + r2 and want to save both)\n        :param kwargs: reward_types list [goal_reward, contact_reward, ...]\n        '''", "\n", "self", ".", "_max_replay_buffer_size", "=", "max_replay_buffer_size", "\n", "self", ".", "_observation_dim", "=", "observation_dim", "\n", "self", ".", "_action_dim", "=", "action_dim", "\n", "self", ".", "trajectory_len", "=", "trajectory_len", "\n", "self", ".", "multiple_rewards", "=", "num_reward_arrays", ">", "1", "\n", "\n", "self", ".", "_observations", "=", "np", ".", "zeros", "(", "(", "max_replay_buffer_size", ",", "observation_dim", ")", ")", "\n", "# It's a bit memory inefficient to save the observations twice,", "\n", "# but it makes the code *much* easier since you no longer have to", "\n", "# worry about termination conditions.", "\n", "self", ".", "_next_obs", "=", "np", ".", "zeros", "(", "(", "max_replay_buffer_size", ",", "observation_dim", ")", ")", "\n", "self", ".", "_actions", "=", "np", ".", "zeros", "(", "(", "max_replay_buffer_size", ",", "action_dim", ")", ")", "\n", "# Make everything a 2D np array to make it easier for other code to", "\n", "# reason about the shape of the data", "\n", "if", "self", ".", "multiple_rewards", ":", "\n", "            ", "self", ".", "_rewards", "=", "{", "reward_type", ":", "np", ".", "zeros", "(", "(", "max_replay_buffer_size", ",", "1", ")", ")", "for", "reward_type", "in", "kwargs", "[", "'reward_types'", "]", "}", "\n", "", "else", ":", "\n", "            ", "self", ".", "_rewards", "=", "np", ".", "zeros", "(", "(", "max_replay_buffer_size", ",", "1", ")", ")", "\n", "# self._sparse_rewards = np.zeros((max_replay_buffer_size, 1))", "\n", "# self._terminals[i] = a terminal was received at time i", "\n", "", "self", ".", "_terminals", "=", "np", ".", "zeros", "(", "(", "max_replay_buffer_size", ",", "1", ")", ",", "dtype", "=", "'uint8'", ")", "\n", "self", ".", "clear", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.data_management.simple_replay_buffer.SimpleReplayBuffer.add_sample": [[44, 59], ["simple_replay_buffer.SimpleReplayBuffer._advance", "simple_replay_buffer.SimpleReplayBuffer.terminate_episode"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.data_management.simple_replay_buffer.SimpleReplayBuffer._advance", "home.repos.pwc.inspect_result.Rondorf_BOReL.data_management.simple_replay_buffer.SimpleReplayBuffer.terminate_episode"], ["", "def", "add_sample", "(", "self", ",", "observation", ",", "action", ",", "reward", ",", "terminal", ",", "\n", "next_observation", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "_observations", "[", "self", ".", "_top", "]", "=", "observation", "\n", "self", ".", "_actions", "[", "self", ".", "_top", "]", "=", "action", "\n", "if", "self", ".", "multiple_rewards", ":", "\n", "            ", "for", "reward_type", "in", "reward", ":", "\n", "                ", "self", ".", "_rewards", "[", "reward_type", "]", "[", "self", ".", "_top", "]", "=", "reward", "[", "reward_type", "]", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "_rewards", "[", "self", ".", "_top", "]", "=", "reward", "\n", "", "self", ".", "_terminals", "[", "self", ".", "_top", "]", "=", "terminal", "\n", "self", ".", "_next_obs", "[", "self", ".", "_top", "]", "=", "next_observation", "\n", "self", ".", "_advance", "(", ")", "\n", "# if terminal - start new episode/rollout", "\n", "if", "terminal", ":", "\n", "            ", "self", ".", "terminate_episode", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.data_management.simple_replay_buffer.SimpleReplayBuffer.add_samples": [[60, 72], ["range", "simple_replay_buffer.SimpleReplayBuffer._advance"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.data_management.simple_replay_buffer.SimpleReplayBuffer._advance"], ["", "", "def", "add_samples", "(", "self", ",", "observations", ",", "actions", ",", "rewards", ",", "terminals", ",", "\n", "next_observations", ",", "**", "kwargs", ")", ":", "\n", "        ", "''' inputs are of size (n_samples, dim) '''", "\n", "# Assumes no overhead in buffer (there is place for n_samples on top of buffer)", "\n", "n_samples", "=", "observations", ".", "shape", "[", "0", "]", "\n", "self", ".", "_observations", "[", "self", ".", "_top", ":", "self", ".", "_top", "+", "n_samples", "]", "=", "observations", "\n", "self", ".", "_actions", "[", "self", ".", "_top", ":", "self", ".", "_top", "+", "n_samples", "]", "=", "actions", "\n", "self", ".", "_rewards", "[", "self", ".", "_top", ":", "self", ".", "_top", "+", "n_samples", "]", "=", "rewards", "\n", "self", ".", "_terminals", "[", "self", ".", "_top", ":", "self", ".", "_top", "+", "n_samples", "]", "=", "terminals", "\n", "self", ".", "_next_obs", "[", "self", ".", "_top", ":", "self", ".", "_top", "+", "n_samples", "]", "=", "next_observations", "\n", "for", "_", "in", "range", "(", "n_samples", ")", ":", "\n", "            ", "self", ".", "_advance", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.data_management.simple_replay_buffer.SimpleReplayBuffer.terminate_episode": [[73, 78], ["simple_replay_buffer.SimpleReplayBuffer._episode_starts.append", "len", "int"], "methods", ["None"], ["", "", "def", "terminate_episode", "(", "self", ")", ":", "\n", "        ", "self", ".", "_episode_starts", ".", "append", "(", "self", ".", "_curr_episode_start", ")", "\n", "if", "len", "(", "self", ".", "_episode_starts", ")", ">", "int", "(", "self", ".", "_max_replay_buffer_size", "/", "self", ".", "trajectory_len", ")", ":", "\n", "            ", "del", "self", ".", "_episode_starts", "[", "0", "]", "\n", "", "self", ".", "_curr_episode_start", "=", "self", ".", "_top", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.data_management.simple_replay_buffer.SimpleReplayBuffer.size": [[79, 81], ["None"], "methods", ["None"], ["", "def", "size", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_size", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.data_management.simple_replay_buffer.SimpleReplayBuffer.clear": [[82, 88], ["None"], "methods", ["None"], ["", "def", "clear", "(", "self", ")", ":", "\n", "        ", "self", ".", "_top", "=", "0", "\n", "self", ".", "_size", "=", "0", "\n", "self", ".", "_episode_starts", "=", "[", "]", "\n", "self", ".", "_curr_episode_start", "=", "0", "\n", "self", ".", "_running_episode_len", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.data_management.simple_replay_buffer.SimpleReplayBuffer._advance": [[89, 94], ["None"], "methods", ["None"], ["", "def", "_advance", "(", "self", ")", ":", "\n", "        ", "self", ".", "_top", "=", "(", "self", ".", "_top", "+", "1", ")", "%", "self", ".", "_max_replay_buffer_size", "\n", "if", "self", ".", "_size", "<", "self", ".", "_max_replay_buffer_size", ":", "\n", "            ", "self", ".", "_size", "+=", "1", "\n", "", "self", ".", "_running_episode_len", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.data_management.simple_replay_buffer.SimpleReplayBuffer.sample_data": [[95, 103], ["dict", "numpy.sum"], "methods", ["None"], ["", "def", "sample_data", "(", "self", ",", "indices", ")", ":", "\n", "        ", "return", "dict", "(", "\n", "observations", "=", "self", ".", "_observations", "[", "indices", "]", ",", "\n", "actions", "=", "self", ".", "_actions", "[", "indices", "]", ",", "\n", "rewards", "=", "self", ".", "_rewards", "[", "indices", "]", "if", "not", "self", ".", "multiple_rewards", "else", "\n", "np", ".", "sum", "(", "[", "self", ".", "_rewards", "[", "reward_type", "]", "[", "indices", "]", "for", "reward_type", "in", "self", ".", "_rewards", "]", ",", "axis", "=", "0", ")", ",", "\n", "terminals", "=", "self", ".", "_terminals", "[", "indices", "]", ",", "\n", "next_observations", "=", "self", ".", "_next_obs", "[", "indices", "]", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.data_management.simple_replay_buffer.SimpleReplayBuffer.random_batch": [[105, 109], ["numpy.random.randint", "simple_replay_buffer.SimpleReplayBuffer.sample_data"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.data_management.simple_replay_buffer.SimpleReplayBuffer.sample_data"], ["", "def", "random_batch", "(", "self", ",", "batch_size", ")", ":", "\n", "        ", "''' batch of unordered transitions '''", "\n", "indices", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "self", ".", "_size", ",", "batch_size", ")", "\n", "return", "self", ".", "sample_data", "(", "indices", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.data_management.simple_replay_buffer.SimpleReplayBuffer.can_sample_batch": [[110, 112], ["None"], "methods", ["None"], ["", "def", "can_sample_batch", "(", "self", ",", "batch_size", ")", ":", "\n", "        ", "return", "self", ".", "_size", ">=", "batch_size", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.data_management.simple_replay_buffer.SimpleReplayBuffer.random_sequence": [[113, 126], ["simple_replay_buffer.SimpleReplayBuffer.sample_data", "len", "numpy.random.choice", "simple_replay_buffer.SimpleReplayBuffer._episode_starts.index", "list", "range"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.data_management.simple_replay_buffer.SimpleReplayBuffer.sample_data", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.index", "home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.ListableAPIResource.list"], ["", "def", "random_sequence", "(", "self", ",", "batch_size", ")", ":", "\n", "        ", "''' batch of trajectories '''", "\n", "# take random trajectories until we have enough", "\n", "i", "=", "0", "\n", "indices", "=", "[", "]", "\n", "while", "len", "(", "indices", ")", "<", "batch_size", ":", "\n", "            ", "start", "=", "np", ".", "random", ".", "choice", "(", "self", ".", "_episode_starts", "[", ":", "-", "1", "]", ")", "\n", "pos_idx", "=", "self", ".", "_episode_starts", ".", "index", "(", "start", ")", "\n", "indices", "+=", "list", "(", "range", "(", "start", ",", "self", ".", "_episode_starts", "[", "pos_idx", "+", "1", "]", ")", ")", "\n", "i", "+=", "1", "\n", "# cut off the last traj if needed to respect batch size", "\n", "", "indices", "=", "indices", "[", ":", "batch_size", "]", "\n", "return", "self", ".", "sample_data", "(", "indices", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.data_management.simple_replay_buffer.SimpleReplayBuffer.random_episodes": [[127, 136], ["numpy.random.choice", "simple_replay_buffer.SimpleReplayBuffer.sample_data", "range", "min", "list", "simple_replay_buffer.SimpleReplayBuffer.num_complete_episodes", "simple_replay_buffer.SimpleReplayBuffer.num_complete_episodes", "numpy.arange"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.data_management.simple_replay_buffer.SimpleReplayBuffer.sample_data", "home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.ListableAPIResource.list", "home.repos.pwc.inspect_result.Rondorf_BOReL.data_management.simple_replay_buffer.SimpleReplayBuffer.num_complete_episodes", "home.repos.pwc.inspect_result.Rondorf_BOReL.data_management.simple_replay_buffer.SimpleReplayBuffer.num_complete_episodes"], ["", "def", "random_episodes", "(", "self", ",", "num_episodes", ")", ":", "\n", "        ", "episode_indices", "=", "np", ".", "random", ".", "choice", "(", "range", "(", "self", ".", "num_complete_episodes", "(", ")", ")", ",", "\n", "min", "(", "self", ".", "num_complete_episodes", "(", ")", ",", "num_episodes", ")", ")", "\n", "indices", "=", "[", "]", "\n", "for", "idx", "in", "episode_indices", ":", "\n", "            ", "start", "=", "self", ".", "_episode_starts", "[", "idx", "]", "\n", "end", "=", "self", ".", "_episode_starts", "[", "idx", "]", "+", "self", ".", "trajectory_len", "\n", "indices", "+=", "list", "(", "np", ".", "arange", "(", "start", ",", "end", ")", "%", "self", ".", "_max_replay_buffer_size", ")", "\n", "", "return", "self", ".", "sample_data", "(", "indices", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.data_management.simple_replay_buffer.SimpleReplayBuffer.can_sample_episodes": [[137, 141], ["simple_replay_buffer.SimpleReplayBuffer.num_complete_episodes"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.data_management.simple_replay_buffer.SimpleReplayBuffer.num_complete_episodes"], ["", "def", "can_sample_episodes", "(", "self", ",", "num_episodes", "=", "None", ")", ":", "\n", "        ", "if", "num_episodes", "is", "None", ":", "\n", "            ", "num_episodes", "=", "1", "\n", "", "return", "self", ".", "num_complete_episodes", "(", ")", ">=", "num_episodes", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.data_management.simple_replay_buffer.SimpleReplayBuffer.num_steps_can_sample": [[142, 144], ["None"], "methods", ["None"], ["", "def", "num_steps_can_sample", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_size", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.data_management.simple_replay_buffer.SimpleReplayBuffer.get_running_episode": [[145, 177], ["numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.zeros", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.zeros", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.zeros", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.zeros", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.zeros", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.zeros", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.zeros", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.zeros"], ["", "def", "get_running_episode", "(", "self", ",", "zero_pad", "=", "True", ")", ":", "\n", "        ", "\"\"\"\n        Returns the batch of data from the current episode\n        (zero-padded to trajectory length)\n        :return:\n        \"\"\"", "\n", "length", "=", "self", ".", "_running_episode_len", "\n", "ep_start", "=", "self", ".", "_curr_episode_start", "\n", "pad_len", "=", "self", ".", "trajectory_len", "-", "length", "\n", "\n", "if", "length", ">", "0", ":", "\n", "            ", "if", "pad_len", ">", "0", "and", "zero_pad", ":", "\n", "                ", "obs", "=", "np", ".", "concatenate", "(", "(", "self", ".", "_observations", "[", "ep_start", ":", "ep_start", "+", "length", "]", ",", "\n", "np", ".", "zeros", "(", "(", "pad_len", ",", "self", ".", "_observation_dim", ")", ")", ")", ",", "axis", "=", "0", ")", "\n", "next_obs", "=", "np", ".", "concatenate", "(", "(", "self", ".", "_next_obs", "[", "ep_start", ":", "ep_start", "+", "length", "]", ",", "\n", "np", ".", "zeros", "(", "(", "pad_len", ",", "self", ".", "_observation_dim", ")", ")", ")", ",", "axis", "=", "0", ")", "\n", "actions", "=", "np", ".", "concatenate", "(", "(", "self", ".", "_actions", "[", "ep_start", ":", "ep_start", "+", "length", "]", ",", "\n", "np", ".", "zeros", "(", "(", "pad_len", ",", "self", ".", "_action_dim", ")", ")", ")", ",", "axis", "=", "0", ")", "\n", "rewards", "=", "np", ".", "concatenate", "(", "(", "self", ".", "_rewards", "[", "ep_start", ":", "ep_start", "+", "length", "]", ",", "\n", "np", ".", "zeros", "(", "(", "pad_len", ",", "1", ")", ")", ")", ",", "axis", "=", "0", ")", "\n", "", "else", ":", "\n", "                ", "obs", "=", "self", ".", "_observations", "[", "ep_start", ":", "ep_start", "+", "length", "]", "\n", "next_obs", "=", "self", ".", "_next_obs", "[", "ep_start", ":", "ep_start", "+", "length", "]", "\n", "actions", "=", "self", ".", "_actions", "[", "ep_start", ":", "ep_start", "+", "length", "]", "\n", "rewards", "=", "self", ".", "_rewards", "[", "ep_start", ":", "ep_start", "+", "length", "]", "\n", "", "", "else", ":", "\n", "            ", "obs", "=", "np", ".", "zeros", "(", "(", "pad_len", ",", "self", ".", "_observation_dim", ")", ")", "\n", "next_obs", "=", "np", ".", "zeros", "(", "(", "pad_len", ",", "self", ".", "_observation_dim", ")", ")", "\n", "actions", "=", "np", ".", "zeros", "(", "(", "pad_len", ",", "self", ".", "_action_dim", ")", ")", "\n", "rewards", "=", "np", ".", "zeros", "(", "(", "pad_len", ",", "1", ")", ")", "\n", "\n", "", "return", "obs", ",", "next_obs", ",", "actions", ",", "rewards", ",", "length", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.data_management.simple_replay_buffer.SimpleReplayBuffer.reset_running_episode": [[178, 180], ["None"], "methods", ["None"], ["", "def", "reset_running_episode", "(", "self", ")", ":", "\n", "        ", "self", ".", "_running_episode_len", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.data_management.simple_replay_buffer.SimpleReplayBuffer.num_complete_episodes": [[181, 183], ["len"], "methods", ["None"], ["", "def", "num_complete_episodes", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "_episode_starts", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.algorithms.dqn.DQN.__init__": [[13, 40], ["torch.Module.__init__", "q_network.copy", "dqn.DQN._set_eps", "torch.Adam", "torch.Adam", "torch.Adam", "torch.Adam", "q_network.parameters"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.__init__", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.core.PyTorchModule.copy", "home.repos.pwc.inspect_result.Rondorf_BOReL.algorithms.dqn.DQN._set_eps"], ["    ", "def", "__init__", "(", "self", ",", "\n", "q_network", ",", "\n", "lr", "=", "None", ",", "\n", "eps_optim", "=", "None", ",", "\n", "alpha_optim", "=", "None", ",", "\n", "gamma", "=", "0.99", ",", "\n", "eps_init", "=", "1.", ",", "\n", "eps_final", "=", "0.1", ",", "\n", "exploration_iters", "=", "1000", ",", "\n", "tau", "=", "5e-3", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "# the network and target network", "\n", "self", ".", "qf", "=", "q_network", "\n", "self", ".", "target_qf", "=", "q_network", ".", "copy", "(", ")", "\n", "\n", "self", ".", "gamma", "=", "gamma", "# discount factor", "\n", "self", ".", "eps_init", "=", "eps_init", "# initial exploration parameter", "\n", "self", ".", "eps_final", "=", "eps_final", "# final exploration parameter", "\n", "self", ".", "exploration_iters", "=", "exploration_iters", "# num iteration from eps_init to eps_final", "\n", "self", ".", "_set_eps", "(", "self", ".", "eps_init", ")", "# initialize temperature", "\n", "self", ".", "tau", "=", "tau", "# soft target update parameter", "\n", "\n", "# optimisers", "\n", "# self.optimizer = optim.RMSprop(q_network.parameters(), lr=lr, eps=eps_optim, alpha=alpha_optim)", "\n", "self", ".", "optimizer", "=", "optim", ".", "Adam", "(", "q_network", ".", "parameters", "(", ")", ",", "lr", "=", "lr", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.algorithms.dqn.DQN.forward": [[41, 43], ["dqn.DQN.qf"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "obs", ")", ":", "\n", "        ", "return", "self", ".", "qf", "(", "obs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.algorithms.dqn.DQN.update": [[44, 58], ["dqn.DQN.optimizer.zero_grad", "dqn.DQN.forward().gather", "dqn.DQN.get_q_target", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean.backward", "torch.mean.backward", "torch.mean.backward", "torch.mean.backward", "dqn.DQN.optimizer.step", "dqn.DQN.soft_target_update", "action.argmax", "torch.mean.item", "torch.mean.item", "torch.mean.item", "torch.mean.item", "dqn.DQN.forward"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.algorithms.dqn.DoubleDQN.get_q_target", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.step", "home.repos.pwc.inspect_result.Rondorf_BOReL.algorithms.sac.SAC.soft_target_update", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjcore.MjModel.forward"], ["", "def", "update", "(", "self", ",", "obs", ",", "action", ",", "reward", ",", "next_obs", ",", "done", ",", "**", "kwargs", ")", ":", "\n", "        ", "'''\n            Inputs are of size (batch, dim). Performs parameters update.\n        '''", "\n", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "q_pred", "=", "self", ".", "forward", "(", "obs", ")", ".", "gather", "(", "-", "1", ",", "action", ".", "argmax", "(", "dim", "=", "-", "1", ",", "keepdims", "=", "True", ")", ")", "# get q_values at taken actions", "\n", "q_target", "=", "self", ".", "get_q_target", "(", "next_obs", ",", "reward", ",", "done", ")", "# get target update values", "\n", "qf_loss", "=", "torch", ".", "mean", "(", "(", "q_pred", "-", "q_target", ")", "**", "2", ")", "# TD error", "\n", "qf_loss", ".", "backward", "(", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "\n", "# soft update of target network", "\n", "self", ".", "soft_target_update", "(", ")", "\n", "return", "{", "'qf_loss'", ":", "qf_loss", ".", "item", "(", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.algorithms.dqn.DQN.get_q_target": [[59, 63], ["dqn.DQN.target_qf().detach().max", "dqn.DQN.target_qf().detach", "dqn.DQN.target_qf"], "methods", ["None"], ["", "def", "get_q_target", "(", "self", ",", "next_obs", ",", "reward", ",", "done", ")", ":", "\n", "        ", "next_q_max", "=", "self", ".", "target_qf", "(", "next_obs", ")", ".", "detach", "(", ")", ".", "max", "(", "dim", "=", "-", "1", ",", "keepdims", "=", "True", ")", "[", "0", "]", "\n", "q_target", "=", "reward", "+", "(", "1.", "-", "done", ")", "*", "self", ".", "gamma", "*", "next_q_max", "\n", "return", "q_target", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.algorithms.dqn.DQN.soft_target_update": [[64, 66], ["torchkit.pytorch_utils.soft_update_from_to"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.soft_update_from_to"], ["", "def", "soft_target_update", "(", "self", ")", ":", "\n", "        ", "ptu", ".", "soft_update_from_to", "(", "self", ".", "qf", ",", "self", ".", "target_qf", ",", "self", ".", "tau", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.algorithms.dqn.DQN.act": [[67, 85], ["dqn.DQN.qf", "dqn.DQN.gather", "dqn.DQN.argmax", "random.random", "torchkit.pytorch_utils.FloatTensor().long().unsqueeze", "dqn.DQN.argmax", "torchkit.pytorch_utils.FloatTensor().long", "torchkit.pytorch_utils.FloatTensor", "random.randrange", "range"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.FloatTensor"], ["", "def", "act", "(", "self", ",", "obs", ",", "deterministic", "=", "False", ")", ":", "\n", "        ", "'''\n            epsilon-greedy policy based on Q values\n        :param obs:\n        :param deterministic: whether to sample or take most likely action\n        :return: action and its corresponding Q value\n        '''", "\n", "q_values", "=", "self", ".", "qf", "(", "obs", ")", "\n", "if", "deterministic", ":", "\n", "            ", "action", "=", "q_values", ".", "argmax", "(", "dim", "=", "-", "1", ",", "keepdims", "=", "True", ")", "\n", "", "else", ":", "# epsilon greedy", "\n", "            ", "if", "random", ".", "random", "(", ")", "<=", "self", ".", "eps", ":", "\n", "                ", "action", "=", "ptu", ".", "FloatTensor", "(", "[", "random", ".", "randrange", "(", "q_values", ".", "shape", "[", "-", "1", "]", ")", "\n", "for", "_", "in", "range", "(", "q_values", ".", "shape", "[", "0", "]", ")", "]", ")", ".", "long", "(", ")", ".", "unsqueeze", "(", "dim", "=", "-", "1", ")", "\n", "", "else", ":", "\n", "                ", "action", "=", "q_values", ".", "argmax", "(", "dim", "=", "-", "1", ",", "keepdims", "=", "True", ")", "\n", "", "", "value", "=", "q_values", ".", "gather", "(", "dim", "=", "-", "1", ",", "index", "=", "action", ")", "\n", "return", "action", ",", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.algorithms.dqn.DQN.set_exploration_parameter": [[86, 93], ["dqn.DQN._set_eps", "min"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.algorithms.dqn.DQN._set_eps"], ["", "def", "set_exploration_parameter", "(", "self", ",", "t", ")", ":", "\n", "        ", "'''\n            set exploration based on linear schedule -- e_t = e_i + min(1, t/T)*(e_f -e_i)\n        :param t: iteration\n        :return:\n        '''", "\n", "self", ".", "_set_eps", "(", "self", ".", "eps_init", "+", "min", "(", "1.", ",", "t", "/", "self", ".", "exploration_iters", ")", "*", "(", "self", ".", "eps_final", "-", "self", ".", "eps_init", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.algorithms.dqn.DQN._set_eps": [[94, 96], ["None"], "methods", ["None"], ["", "def", "_set_eps", "(", "self", ",", "eps", ")", ":", "\n", "        ", "self", ".", "eps", "=", "eps", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.algorithms.dqn.DQN.train": [[97, 100], ["dqn.DQN.qf.train", "dqn.DQN.target_qf.train"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.core.rl_algorithm.MetaRLAlgorithm.train", "home.repos.pwc.inspect_result.Rondorf_BOReL.core.rl_algorithm.MetaRLAlgorithm.train"], ["", "def", "train", "(", "self", ",", "mode", "=", "True", ")", ":", "\n", "        ", "self", ".", "qf", ".", "train", "(", "mode", ")", "\n", "self", ".", "target_qf", ".", "train", "(", "mode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.algorithms.dqn.DoubleDQN.__init__": [[103, 105], ["dqn.DQN.__init__"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.__init__"], ["    ", "def", "__init__", "(", "self", ",", "q_network", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "q_network", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.algorithms.dqn.DoubleDQN.get_q_target": [[106, 120], ["dqn.DoubleDQN.qf().detach", "[].view", "dqn.DoubleDQN.target_qf().detach", "next_q_target_values.gather.gather.gather", "[].view.type", "dqn.DoubleDQN.qf", "dqn.DoubleDQN.target_qf", "dqn.DoubleDQN.max"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjvGeomWrapper.type"], ["", "def", "get_q_target", "(", "self", ",", "next_obs", ",", "reward", ",", "done", ")", ":", "\n", "        ", "''' get update target for q network '''", "\n", "# get q values of next obs for every action", "\n", "next_q_values", "=", "self", ".", "qf", "(", "next_obs", ")", ".", "detach", "(", ")", "\n", "# get optimal actions for next obs", "\n", "optimal_next_action", "=", "next_q_values", ".", "max", "(", "1", ")", "[", "1", "]", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "\n", "# get q values from target network for every action", "\n", "next_q_target_values", "=", "self", ".", "target_qf", "(", "next_obs", ")", ".", "detach", "(", ")", "\n", "# take the next q value according to the target network at the action", "\n", "# which was chosen by the q network", "\n", "next_q_target_values", "=", "next_q_target_values", ".", "gather", "(", "1", ",", "optimal_next_action", ".", "type", "(", "torch", ".", "long", ")", ")", "\n", "targets", "=", "reward", "+", "(", "1.", "-", "done", ")", "*", "self", ".", "gamma", "*", "next_q_target_values", "# r + gamma * q_max", "\n", "return", "targets", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Rondorf_BOReL.algorithms.sac.SAC.__init__": [[16, 65], ["torch.Module.__init__", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "copy.deepcopy", "copy.deepcopy", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "sac.SAC.qf1.parameters", "sac.SAC.qf2.parameters", "sac.SAC.policy.parameters", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "sac.SAC.log_alpha_entropy.exp"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.__init__", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.zeros", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.zeros", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.zeros", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.zeros", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.zeros", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.zeros", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.zeros", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.zeros", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.zeros"], ["    ", "def", "__init__", "(", "self", ",", "\n", "policy", ",", "\n", "q1_network", ",", "\n", "q2_network", ",", "\n", "\n", "actor_lr", "=", "3e-4", ",", "\n", "critic_lr", "=", "3e-4", ",", "\n", "gamma", "=", "0.99", ",", "\n", "tau", "=", "5e-3", ",", "\n", "\n", "use_cql", "=", "False", ",", "\n", "alpha_cql", "=", "2.", ",", "\n", "entropy_alpha", "=", "0.2", ",", "\n", "automatic_entropy_tuning", "=", "True", ",", "\n", "alpha_lr", "=", "3e-4", ",", "\n", "clip_grad_value", "=", "None", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "gamma", "=", "gamma", "\n", "self", ".", "tau", "=", "tau", "\n", "self", ".", "use_cql", "=", "use_cql", "# Conservative Q-Learning loss", "\n", "self", ".", "alpha_cql", "=", "alpha_cql", "# Conservative Q-Learning weight parameter", "\n", "self", ".", "automatic_entropy_tuning", "=", "automatic_entropy_tuning", "# Wasn't tested", "\n", "self", ".", "clip_grad_value", "=", "clip_grad_value", "\n", "\n", "# q networks - use two network to mitigate positive bias", "\n", "self", ".", "qf1", "=", "q1_network", "\n", "self", ".", "qf1_optim", "=", "Adam", "(", "self", ".", "qf1", ".", "parameters", "(", ")", ",", "lr", "=", "critic_lr", ")", "\n", "\n", "self", ".", "qf2", "=", "q2_network", "\n", "self", ".", "qf2_optim", "=", "Adam", "(", "self", ".", "qf2", ".", "parameters", "(", ")", ",", "lr", "=", "critic_lr", ")", "\n", "\n", "# target networks", "\n", "self", ".", "qf1_target", "=", "copy", ".", "deepcopy", "(", "self", ".", "qf1", ")", "\n", "self", ".", "qf2_target", "=", "copy", ".", "deepcopy", "(", "self", ".", "qf2", ")", "\n", "\n", "self", ".", "policy", "=", "policy", "\n", "self", ".", "policy_optim", "=", "Adam", "(", "self", ".", "policy", ".", "parameters", "(", ")", ",", "lr", "=", "actor_lr", ")", "\n", "\n", "# automatic entropy coefficient tuning", "\n", "if", "self", ".", "automatic_entropy_tuning", ":", "\n", "# self.target_entropy = -torch.prod(torch.Tensor(action_space.shape).to(ptu.device)).item()", "\n", "            ", "self", ".", "target_entropy", "=", "-", "self", ".", "policy", ".", "action_dim", "\n", "self", ".", "log_alpha_entropy", "=", "torch", ".", "zeros", "(", "1", ",", "requires_grad", "=", "True", ",", "device", "=", "ptu", ".", "device", ")", "\n", "self", ".", "alpha_entropy_optim", "=", "Adam", "(", "[", "self", ".", "log_alpha_entropy", "]", ",", "lr", "=", "alpha_lr", ")", "\n", "self", ".", "alpha_entropy", "=", "self", ".", "log_alpha_entropy", ".", "exp", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "alpha_entropy", "=", "entropy_alpha", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.algorithms.sac.SAC.forward": [[66, 70], ["sac.SAC.policy", "sac.SAC.qf1", "sac.SAC.qf2"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "obs", ")", ":", "\n", "        ", "action", ",", "_", ",", "_", ",", "_", "=", "self", ".", "policy", "(", "obs", ")", "\n", "q1", ",", "q2", "=", "self", ".", "qf1", "(", "obs", ",", "action", ")", ",", "self", ".", "qf2", "(", "obs", ",", "action", ")", "\n", "return", "action", ",", "q1", ",", "q2", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.algorithms.sac.SAC.act": [[71, 76], ["sac.SAC.policy"], "methods", ["None"], ["", "def", "act", "(", "self", ",", "obs", ",", "deterministic", "=", "False", ",", "return_log_prob", "=", "False", ")", ":", "\n", "        ", "action", ",", "mean", ",", "log_std", ",", "log_prob", "=", "self", ".", "policy", "(", "obs", ",", "\n", "deterministic", "=", "deterministic", ",", "\n", "return_log_prob", "=", "return_log_prob", ")", "\n", "return", "action", ",", "mean", ",", "log_std", ",", "log_prob", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.algorithms.sac.SAC.select_action": [[77, 84], ["torch.FloatTensor().to().unsqueeze", "torch.FloatTensor().to().unsqueeze", "torch.FloatTensor().to().unsqueeze", "torch.FloatTensor().to().unsqueeze", "torch.FloatTensor().to().unsqueeze", "torch.FloatTensor().to().unsqueeze", "torch.FloatTensor().to().unsqueeze", "torch.FloatTensor().to().unsqueeze", "torch.FloatTensor().to().unsqueeze", "sac.SAC.policy.sample", "sac.SAC.policy.sample", "action.detach().cpu().numpy", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "action.detach().cpu", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "action.detach"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.spaces.discrete.Discrete.sample", "home.repos.pwc.inspect_result.Rondorf_BOReL.spaces.discrete.Discrete.sample", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.FloatTensor", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.FloatTensor", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.FloatTensor", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.FloatTensor", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.FloatTensor", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.FloatTensor", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.FloatTensor", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.FloatTensor", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.FloatTensor"], ["", "def", "select_action", "(", "self", ",", "state", ",", "evaluate", "=", "False", ")", ":", "\n", "        ", "state", "=", "torch", ".", "FloatTensor", "(", "state", ")", ".", "to", "(", "ptu", ".", "device", ")", ".", "unsqueeze", "(", "0", ")", "\n", "if", "evaluate", "is", "False", ":", "\n", "            ", "action", ",", "_", ",", "_", "=", "self", ".", "policy", ".", "sample", "(", "state", ")", "\n", "", "else", ":", "\n", "            ", "_", ",", "_", ",", "action", "=", "self", ".", "policy", ".", "sample", "(", "state", ")", "\n", "", "return", "action", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.algorithms.sac.SAC.update": [[85, 150], ["sac.SAC.qf1", "sac.SAC.qf2", "torch.mse_loss", "torch.mse_loss", "torch.mse_loss", "torch.mse_loss", "torch.mse_loss", "torch.mse_loss", "sac.SAC.act", "sac.SAC._min_q", "sac.SAC.qf1_optim.zero_grad", "sac.SAC.qf2_optim.zero_grad", "torch.mse_loss.backward", "torch.mse_loss.backward", "sac.SAC.qf1_optim.step", "sac.SAC.qf2_optim.step", "sac.SAC.soft_target_update", "sac.SAC.policy_optim.zero_grad", "policy_loss.backward", "sac.SAC.policy_optim.step", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "sac.SAC.act", "sac.SAC.qf1_target", "sac.SAC.qf2_target", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "sac.SAC._clip_grads", "sac.SAC._clip_grads", "sac.SAC._clip_grads", "sac.SAC.alpha_entropy_optim.zero_grad", "torch.tensor().to.backward", "torch.tensor().to.backward", "torch.tensor().to.backward", "sac.SAC.alpha_optim.step", "sac.SAC.log_alpha_entropy.exp", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.mse_loss.item", "torch.mse_loss.item", "policy_loss.item", "torch.tensor().to.item", "torch.tensor().to.item", "torch.tensor().to.item", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "sac.SAC.estimate_log_sum_exp_q", "sac.SAC.estimate_log_sum_exp_q"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjDataWrapper.act", "home.repos.pwc.inspect_result.Rondorf_BOReL.algorithms.sac.SAC._min_q", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.step", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.step", "home.repos.pwc.inspect_result.Rondorf_BOReL.algorithms.sac.SAC.soft_target_update", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.step", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjDataWrapper.act", "home.repos.pwc.inspect_result.Rondorf_BOReL.algorithms.sac.SAC._clip_grads", "home.repos.pwc.inspect_result.Rondorf_BOReL.algorithms.sac.SAC._clip_grads", "home.repos.pwc.inspect_result.Rondorf_BOReL.algorithms.sac.SAC._clip_grads", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.step", "home.repos.pwc.inspect_result.Rondorf_BOReL.algorithms.sac.SAC.estimate_log_sum_exp_q", "home.repos.pwc.inspect_result.Rondorf_BOReL.algorithms.sac.SAC.estimate_log_sum_exp_q"], ["", "def", "update", "(", "self", ",", "obs", ",", "action", ",", "reward", ",", "next_obs", ",", "done", ",", "**", "kwargs", ")", ":", "\n", "# computation of critic loss", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "next_action", ",", "_", ",", "_", ",", "next_log_prob", "=", "self", ".", "act", "(", "next_obs", ",", "return_log_prob", "=", "True", ")", "\n", "next_q1", "=", "self", ".", "qf1_target", "(", "next_obs", ",", "next_action", ")", "\n", "next_q2", "=", "self", ".", "qf2_target", "(", "next_obs", ",", "next_action", ")", "\n", "min_next_q_target", "=", "torch", ".", "min", "(", "next_q1", ",", "next_q2", ")", "-", "self", ".", "alpha_entropy", "*", "next_log_prob", "\n", "q_target", "=", "reward", "+", "(", "1.", "-", "done", ")", "*", "self", ".", "gamma", "*", "min_next_q_target", "\n", "\n", "", "q1_pred", "=", "self", ".", "qf1", "(", "obs", ",", "action", ")", "\n", "q2_pred", "=", "self", ".", "qf2", "(", "obs", ",", "action", ")", "\n", "\n", "qf1_loss", "=", "F", ".", "mse_loss", "(", "q1_pred", ",", "q_target", ")", "# TD error", "\n", "qf2_loss", "=", "F", ".", "mse_loss", "(", "q2_pred", ",", "q_target", ")", "# TD error", "\n", "\n", "# use CQL loss for offline RL (Kumar et al, 2020)", "\n", "if", "self", ".", "use_cql", ":", "\n", "            ", "qf1_loss", "+=", "torch", ".", "mean", "(", "self", ".", "alpha_cql", "*", "\n", "self", ".", "estimate_log_sum_exp_q", "(", "self", ".", "qf1", ",", "obs", ",", "N", "=", "10", ",", "action_space", "=", "kwargs", "[", "'action_space'", "]", ")", "\n", "-", "q1_pred", ")", "\n", "qf2_loss", "+=", "torch", ".", "mean", "(", "self", ".", "alpha_cql", "*", "\n", "self", ".", "estimate_log_sum_exp_q", "(", "self", ".", "qf2", ",", "obs", ",", "N", "=", "10", ",", "action_space", "=", "kwargs", "[", "'action_space'", "]", ")", "\n", "-", "q2_pred", ")", "\n", "\n", "# computation of actor loss", "\n", "", "new_action", ",", "_", ",", "_", ",", "log_prob", "=", "self", ".", "act", "(", "obs", ",", "return_log_prob", "=", "True", ")", "\n", "min_q_new_actions", "=", "self", ".", "_min_q", "(", "obs", ",", "new_action", ")", "\n", "\n", "policy_loss", "=", "(", "(", "self", ".", "alpha_entropy", "*", "log_prob", ")", "-", "min_q_new_actions", ")", ".", "mean", "(", ")", "\n", "\n", "# update q networks", "\n", "self", ".", "qf1_optim", ".", "zero_grad", "(", ")", "\n", "self", ".", "qf2_optim", ".", "zero_grad", "(", ")", "\n", "qf1_loss", ".", "backward", "(", ")", "\n", "qf2_loss", ".", "backward", "(", ")", "\n", "if", "self", ".", "clip_grad_value", "is", "not", "None", ":", "\n", "            ", "self", ".", "_clip_grads", "(", "self", ".", "qf1", ")", "\n", "self", ".", "_clip_grads", "(", "self", ".", "qf2", ")", "\n", "", "self", ".", "qf1_optim", ".", "step", "(", ")", "\n", "self", ".", "qf2_optim", ".", "step", "(", ")", "\n", "# soft update", "\n", "self", ".", "soft_target_update", "(", ")", "\n", "\n", "# update policy network", "\n", "self", ".", "policy_optim", ".", "zero_grad", "(", ")", "\n", "policy_loss", ".", "backward", "(", ")", "\n", "if", "self", ".", "clip_grad_value", "is", "not", "None", ":", "\n", "            ", "self", ".", "_clip_grads", "(", "self", ".", "policy", ")", "\n", "", "self", ".", "policy_optim", ".", "step", "(", ")", "\n", "\n", "if", "self", ".", "automatic_entropy_tuning", ":", "\n", "            ", "alpha_entropy_loss", "=", "-", "(", "self", ".", "log_alpha_entropy", "*", "(", "log_prob", "+", "self", ".", "target_entropy", ")", ".", "detach", "(", ")", ")", ".", "mean", "(", ")", "\n", "\n", "self", ".", "alpha_entropy_optim", ".", "zero_grad", "(", ")", "\n", "alpha_entropy_loss", ".", "backward", "(", ")", "\n", "self", ".", "alpha_optim", ".", "step", "(", ")", "\n", "\n", "self", ".", "alpha_entropy", "=", "self", ".", "log_alpha_entropy", ".", "exp", "(", ")", "\n", "# alpha_entropy_tlogs = self.alpha_entropy.clone()    # For TensorboardX logs", "\n", "", "else", ":", "\n", "            ", "alpha_entropy_loss", "=", "torch", ".", "tensor", "(", "0.", ")", ".", "to", "(", "ptu", ".", "device", ")", "\n", "# alpha_entropy_tlogs = torch.tensor(self.alpha_entropy)  # For TensorboardX logs", "\n", "\n", "", "return", "{", "'qf1_loss'", ":", "qf1_loss", ".", "item", "(", ")", ",", "'qf2_loss'", ":", "qf2_loss", ".", "item", "(", ")", ",", "\n", "'policy_loss'", ":", "policy_loss", ".", "item", "(", ")", ",", "'alpha_entropy_loss'", ":", "alpha_entropy_loss", ".", "item", "(", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.algorithms.sac.SAC._min_q": [[151, 156], ["sac.SAC.qf1", "sac.SAC.qf2", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min"], "methods", ["None"], ["", "def", "_min_q", "(", "self", ",", "obs", ",", "action", ")", ":", "\n", "        ", "q1", "=", "self", ".", "qf1", "(", "obs", ",", "action", ")", "\n", "q2", "=", "self", ".", "qf2", "(", "obs", ",", "action", ")", "\n", "min_q", "=", "torch", ".", "min", "(", "q1", ",", "q2", ")", "\n", "return", "min_q", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.algorithms.sac.SAC.soft_target_update": [[157, 160], ["torchkit.soft_update_from_to", "torchkit.soft_update_from_to"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.soft_update_from_to", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.soft_update_from_to"], ["", "def", "soft_target_update", "(", "self", ")", ":", "\n", "        ", "ptu", ".", "soft_update_from_to", "(", "self", ".", "qf1", ",", "self", ".", "qf1_target", ",", "self", ".", "tau", ")", "\n", "ptu", ".", "soft_update_from_to", "(", "self", ".", "qf2", ",", "self", ".", "qf2_target", ",", "self", ".", "tau", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.algorithms.sac.SAC._clip_grads": [[161, 164], ["net.parameters", "p.grad.data.clamp_"], "methods", ["None"], ["", "def", "_clip_grads", "(", "self", ",", "net", ")", ":", "\n", "        ", "for", "p", "in", "net", ".", "parameters", "(", ")", ":", "\n", "            ", "p", ".", "grad", ".", "data", ".", "clamp_", "(", "-", "self", ".", "clip_grad_value", ",", "self", ".", "clip_grad_value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.algorithms.sac.SAC.estimate_log_sum_exp_q": [[165, 191], ["obs.repeat", "torchkit.FloatTensor", "torch.repeat_interleave", "torch.repeat_interleave", "torch.repeat_interleave", "torch.repeat_interleave", "torch.repeat_interleave", "torch.repeat_interleave", "torch.repeat_interleave", "torch.repeat_interleave", "torch.repeat_interleave", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "numpy.vstack", "numpy.prod", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "sac.SAC.act", "qf", "qf", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "action_space.sample", "range"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.FloatTensor", "home.repos.pwc.inspect_result.Rondorf_BOReL.core.logger.log", "home.repos.pwc.inspect_result.Rondorf_BOReL.core.logger.log", "home.repos.pwc.inspect_result.Rondorf_BOReL.core.logger.log", "home.repos.pwc.inspect_result.Rondorf_BOReL.core.logger.log", "home.repos.pwc.inspect_result.Rondorf_BOReL.core.logger.log", "home.repos.pwc.inspect_result.Rondorf_BOReL.core.logger.log", "home.repos.pwc.inspect_result.Rondorf_BOReL.core.logger.log", "home.repos.pwc.inspect_result.Rondorf_BOReL.core.logger.log", "home.repos.pwc.inspect_result.Rondorf_BOReL.core.logger.log", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjDataWrapper.act", "home.repos.pwc.inspect_result.Rondorf_BOReL.spaces.discrete.Discrete.sample"], ["", "", "def", "estimate_log_sum_exp_q", "(", "self", ",", "qf", ",", "obs", ",", "N", ",", "action_space", ")", ":", "\n", "        ", "'''\n            estimate log(sum(exp(Q))) for CQL objective\n        :param qf: Q function\n        :param obs: state batch from buffer (s~D)\n        :param N: number of actions to sample for estimation\n        :param action_space: space of actions -- for uniform sampling\n        :return:\n        '''", "\n", "batch_size", "=", "obs", ".", "shape", "[", "0", "]", "\n", "obs_rep", "=", "obs", ".", "repeat", "(", "N", ",", "1", ")", "\n", "\n", "# draw actions at uniform", "\n", "random_actions", "=", "ptu", ".", "FloatTensor", "(", "np", ".", "vstack", "(", "[", "action_space", ".", "sample", "(", ")", "for", "_", "in", "range", "(", "N", ")", "]", ")", ")", "\n", "random_actions", "=", "torch", ".", "repeat_interleave", "(", "random_actions", ",", "batch_size", ",", "dim", "=", "0", ")", "\n", "unif_a", "=", "1", "/", "np", ".", "prod", "(", "action_space", ".", "high", "-", "action_space", ".", "low", ")", "# uniform density over action space", "\n", "\n", "# draw actions from current policy", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "policy_actions", ",", "_", ",", "_", ",", "policy_log_probs", "=", "self", ".", "act", "(", "obs_rep", ",", "return_log_prob", "=", "True", ")", "\n", "\n", "", "exp_q_unif", "=", "qf", "(", "obs_rep", ",", "random_actions", ")", "/", "unif_a", "\n", "exp_q_policy", "=", "qf", "(", "obs_rep", ",", "policy_actions", ")", "/", "torch", ".", "exp", "(", "policy_log_probs", ")", "\n", "log_sum_exp", "=", "torch", ".", "log", "(", "0.5", "*", "torch", ".", "mean", "(", "(", "exp_q_unif", "+", "exp_q_policy", ")", ".", "reshape", "(", "N", ",", "batch_size", ",", "-", "1", ")", ",", "dim", "=", "0", ")", ")", "\n", "\n", "return", "log_sum_exp", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.offline_config.args_cheetah_vel.get_args": [[6, 73], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["None"], ["def", "get_args", "(", "rest_args", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'--env-name'", ",", "default", "=", "'HalfCheetahVel-v0'", ")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "type", "=", "int", ",", "default", "=", "73", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--belief-rewards'", ",", "default", "=", "False", ",", "help", "=", "'use R+=E[R]'", ")", "\n", "parser", ".", "add_argument", "(", "'--num-belief-samples'", ",", "default", "=", "20", ")", "\n", "parser", ".", "add_argument", "(", "'--num-train-tasks'", ",", "default", "=", "100", ")", "\n", "parser", ".", "add_argument", "(", "'--num-eval-tasks'", ",", "default", "=", "20", ")", "\n", "parser", ".", "add_argument", "(", "'--hindsight-relabelling'", ",", "default", "=", "False", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--num-trajs-per-task'", ",", "type", "=", "int", ",", "default", "=", "None", ",", "\n", "help", "=", "'how many trajs per task to use. If None - use all'", ")", "\n", "parser", ".", "add_argument", "(", "'--meta-batch'", ",", "type", "=", "int", ",", "default", "=", "16", ",", "\n", "help", "=", "'number of tasks to average the gradient across'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--num-iters'", ",", "type", "=", "int", ",", "default", "=", "1000", ",", "help", "=", "'number meta-training iterates'", ")", "\n", "parser", ".", "add_argument", "(", "'--rl-updates-per-iter'", ",", "type", "=", "int", ",", "default", "=", "1000", ",", "help", "=", "'number of RL steps per iteration'", ")", "\n", "parser", ".", "add_argument", "(", "'--batch-size'", ",", "type", "=", "int", ",", "default", "=", "256", ",", "help", "=", "'number of transitions in RL batch (per task)'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--dqn-layers'", ",", "nargs", "=", "'+'", ",", "default", "=", "[", "256", ",", "256", "]", ")", "\n", "parser", ".", "add_argument", "(", "'--policy-layers'", ",", "nargs", "=", "'+'", ",", "default", "=", "[", "256", ",", "256", "]", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--actor-lr'", ",", "type", "=", "float", ",", "default", "=", "0.0003", ",", "help", "=", "'learning rate for actor (default: 3e-4)'", ")", "\n", "parser", ".", "add_argument", "(", "'--critic-lr'", ",", "type", "=", "float", ",", "default", "=", "0.0003", ",", "help", "=", "'learning rate for critic (default: 3e-4)'", ")", "\n", "parser", ".", "add_argument", "(", "'--clip-grad-value'", ",", "type", "=", "float", ",", "default", "=", "None", ",", "help", "=", "'clip gradients'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--entropy-alpha'", ",", "type", "=", "float", ",", "default", "=", "0.2", ",", "help", "=", "'Entropy coefficient'", ")", "\n", "parser", ".", "add_argument", "(", "'--automatic-entropy-tuning'", ",", "default", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "'--alpha-lr'", ",", "type", "=", "float", ",", "default", "=", "None", ",", "\n", "help", "=", "'learning rate for entropy coeff, if automatic tuning is True (default: 3e-4)'", ")", "\n", "parser", ".", "add_argument", "(", "'--gamma'", ",", "type", "=", "float", ",", "default", "=", "0.99", ",", "help", "=", "'discount factor for rewards (default: 0.99)'", ")", "\n", "parser", ".", "add_argument", "(", "'--soft-target-tau'", ",", "type", "=", "float", ",", "default", "=", "0.005", ",", "\n", "help", "=", "'soft target network update (default: 5e-3)'", ")", "\n", "parser", ".", "add_argument", "(", "'--eval-deterministic'", ",", "default", "=", "True", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--transform-data-bamdp'", ",", "default", "=", "False", ",", "\n", "help", "=", "'If true - perform state relabelling to bamdp, else - use existing data'", ")", "\n", "\n", "# logging, saving, evaluation", "\n", "parser", ".", "add_argument", "(", "'--log-interval'", ",", "type", "=", "int", ",", "default", "=", "10", ",", "\n", "help", "=", "'log interval, one log per n iterations (default: 10)'", ")", "\n", "parser", ".", "add_argument", "(", "'--save-interval'", ",", "type", "=", "int", ",", "default", "=", "100", ",", "\n", "help", "=", "'save models interval, every # iterations (default: 100)'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--log-tensorboard'", ",", "default", "=", "True", ",", "help", "=", "'whether to use tb logger'", ")", "\n", "parser", ".", "add_argument", "(", "'--use-gpu'", ",", "default", "=", "True", ",", "help", "=", "'whether to use gpu'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--results-log-dir'", ",", "default", "=", "None", ",", "help", "=", "'directory to save agent logs (default: ./logs)'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--output-file-prefix'", ",", "default", "=", "'offline'", ")", "\n", "# parser.add_argument('--output-file-prefix', default='offline_with_rr')", "\n", "\n", "parser", ".", "add_argument", "(", "'--relabelled-data-dir'", ",", "default", "=", "'data_bamdp'", ")", "\n", "# parser.add_argument('--relabelled-data-dir', default='data_bamdp_with_rr')", "\n", "\n", "parser", ".", "add_argument", "(", "'--data-dir'", ",", "default", "=", "'data'", ")", "\n", "parser", ".", "add_argument", "(", "'--main-data-dir'", ",", "default", "=", "'./batch_data'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--vae-dir'", ",", "default", "=", "'./trained_vae'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--vae-model-name'", ",", "default", "=", "'no_relabel__29_06_13_08_41'", ")", "\n", "# parser.add_argument('--vae-model-name', default='relabel__10_08_01_45_08')", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", "rest_args", ")", "\n", "\n", "return", "args", "\n", "", ""]], "home.repos.pwc.inspect_result.Rondorf_BOReL.offline_config.args_point_robot_sparse.get_args": [[6, 74], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["None"], ["def", "get_args", "(", "rest_args", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'--env-name'", ",", "default", "=", "'PointRobotSparse-v0'", ")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "type", "=", "int", ",", "default", "=", "73", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--belief-rewards'", ",", "default", "=", "False", ",", "help", "=", "'use R+=E[R]'", ")", "\n", "parser", ".", "add_argument", "(", "'--num-belief-samples'", ",", "default", "=", "20", ")", "\n", "parser", ".", "add_argument", "(", "'--num-train-tasks'", ",", "default", "=", "80", ")", "\n", "parser", ".", "add_argument", "(", "'--num-eval-tasks'", ",", "default", "=", "20", ")", "\n", "parser", ".", "add_argument", "(", "'--hindsight-relabelling'", ",", "default", "=", "False", ")", "\n", "\n", "# parser.add_argument('--num-trajs-per-task', type=int, default=None,", "\n", "#                     help='how many trajs per task to use. If None - use all')", "\n", "parser", ".", "add_argument", "(", "'--num-trajs-per-task'", ",", "type", "=", "int", ",", "default", "=", "500", ",", "\n", "help", "=", "'how many trajs per task to use. If None - use all'", ")", "\n", "parser", ".", "add_argument", "(", "'--meta-batch'", ",", "type", "=", "int", ",", "default", "=", "16", ",", "\n", "help", "=", "'number of tasks to average the gradient across'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--num-iters'", ",", "type", "=", "int", ",", "default", "=", "5000", ",", "help", "=", "'number meta-training iterates'", ")", "\n", "parser", ".", "add_argument", "(", "'--rl-updates-per-iter'", ",", "type", "=", "int", ",", "default", "=", "1000", ",", "help", "=", "'number of RL steps per iteration'", ")", "\n", "parser", ".", "add_argument", "(", "'--batch-size'", ",", "type", "=", "int", ",", "default", "=", "256", ",", "help", "=", "'number of transitions in RL batch (per task)'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--dqn-layers'", ",", "nargs", "=", "'+'", ",", "default", "=", "[", "128", ",", "128", "]", ")", "\n", "parser", ".", "add_argument", "(", "'--policy-layers'", ",", "nargs", "=", "'+'", ",", "default", "=", "[", "128", ",", "128", "]", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--actor-lr'", ",", "type", "=", "float", ",", "default", "=", "0.0003", ",", "help", "=", "'learning rate for actor (default: 3e-4)'", ")", "\n", "parser", ".", "add_argument", "(", "'--critic-lr'", ",", "type", "=", "float", ",", "default", "=", "0.0003", ",", "help", "=", "'learning rate for critic (default: 3e-4)'", ")", "\n", "parser", ".", "add_argument", "(", "'--clip-grad-value'", ",", "type", "=", "float", ",", "default", "=", "None", ",", "help", "=", "'clip gradients'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--entropy-alpha'", ",", "type", "=", "float", ",", "default", "=", "0.01", ",", "help", "=", "'Entropy coefficient'", ")", "\n", "parser", ".", "add_argument", "(", "'--automatic-entropy-tuning'", ",", "default", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "'--alpha-lr'", ",", "type", "=", "float", ",", "default", "=", "None", ",", "\n", "help", "=", "'learning rate for entropy coeff, if automatic tuning is True (default: 3e-4)'", ")", "\n", "parser", ".", "add_argument", "(", "'--gamma'", ",", "type", "=", "float", ",", "default", "=", "0.9", ",", "help", "=", "'discount factor for rewards (default: 0.99)'", ")", "\n", "parser", ".", "add_argument", "(", "'--soft-target-tau'", ",", "type", "=", "float", ",", "default", "=", "0.005", ",", "\n", "help", "=", "'soft target network update (default: 5e-3)'", ")", "\n", "parser", ".", "add_argument", "(", "'--eval-deterministic'", ",", "default", "=", "True", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--transform-data-bamdp'", ",", "default", "=", "False", ",", "\n", "help", "=", "'If true - perform state relabelling to bamdp, else - use existing data'", ")", "\n", "\n", "# logging, saving, evaluation", "\n", "parser", ".", "add_argument", "(", "'--log-interval'", ",", "type", "=", "int", ",", "default", "=", "10", ",", "\n", "help", "=", "'log interval, one log per n iterations (default: 10)'", ")", "\n", "parser", ".", "add_argument", "(", "'--save-interval'", ",", "type", "=", "int", ",", "default", "=", "100", ",", "\n", "help", "=", "'save models interval, every # iterations (default: 100)'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--log-tensorboard'", ",", "default", "=", "True", ",", "help", "=", "'whether to use tb logger'", ")", "\n", "parser", ".", "add_argument", "(", "'--use-gpu'", ",", "default", "=", "True", ",", "help", "=", "'whether to use gpu'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--results-log-dir'", ",", "default", "=", "None", ",", "help", "=", "'directory to save agent logs (default: ./logs)'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--output-file-prefix'", ",", "default", "=", "'offline'", ")", "\n", "# parser.add_argument('--output-file-prefix', default='offline_no_rr')", "\n", "\n", "parser", ".", "add_argument", "(", "'--relabelled-data-dir'", ",", "default", "=", "'data_bamdp'", ")", "\n", "# parser.add_argument('--relabelled-data-dir', default='data_bamdp_no_rr')", "\n", "\n", "parser", ".", "add_argument", "(", "'--data-dir'", ",", "default", "=", "'data'", ")", "\n", "parser", ".", "add_argument", "(", "'--main-data-dir'", ",", "default", "=", "'./batch_data'", ")", "\n", "parser", ".", "add_argument", "(", "'--vae-dir'", ",", "default", "=", "'./trained_vae'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--vae-model-name'", ",", "default", "=", "'relabel__31_05_23_54_02'", ")", "\n", "# parser.add_argument('--vae-model-name', default='no_relabel__09_08_11_10_10')", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", "rest_args", ")", "\n", "\n", "return", "args", "\n", "", ""]], "home.repos.pwc.inspect_result.Rondorf_BOReL.offline_config.args_ant_semicircle_sparse.get_args": [[6, 91], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["None"], ["def", "get_args", "(", "rest_args", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'--env-name'", ",", "default", "=", "'AntSemiCircleSparse-v0'", ")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "type", "=", "int", ",", "default", "=", "73", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--belief-rewards'", ",", "default", "=", "False", ",", "help", "=", "'use R+=E[R]'", ")", "\n", "parser", ".", "add_argument", "(", "'--num-belief-samples'", ",", "default", "=", "20", ")", "\n", "parser", ".", "add_argument", "(", "'--num-train-tasks'", ",", "default", "=", "80", ")", "\n", "parser", ".", "add_argument", "(", "'--num-eval-tasks'", ",", "default", "=", "20", ")", "\n", "parser", ".", "add_argument", "(", "'--hindsight-relabelling'", ",", "default", "=", "False", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--num-trajs-per-task'", ",", "type", "=", "int", ",", "default", "=", "None", ",", "\n", "help", "=", "'how many trajs per task to use. If None - use all'", ")", "\n", "parser", ".", "add_argument", "(", "'--meta-batch'", ",", "type", "=", "int", ",", "default", "=", "16", ",", "\n", "help", "=", "'number of tasks to average the gradient across'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--num-iters'", ",", "type", "=", "int", ",", "default", "=", "3000", ",", "help", "=", "'number meta-training iterates'", ")", "\n", "parser", ".", "add_argument", "(", "'--rl-updates-per-iter'", ",", "type", "=", "int", ",", "default", "=", "2000", ",", "help", "=", "'number of RL steps per iteration'", ")", "\n", "parser", ".", "add_argument", "(", "'--batch-size'", ",", "type", "=", "int", ",", "default", "=", "256", ",", "help", "=", "'number of transitions in RL batch (per task)'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--dqn-layers'", ",", "nargs", "=", "'+'", ",", "default", "=", "[", "256", ",", "256", "]", ")", "\n", "parser", ".", "add_argument", "(", "'--policy-layers'", ",", "nargs", "=", "'+'", ",", "default", "=", "[", "256", ",", "256", "]", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--actor-lr'", ",", "type", "=", "float", ",", "default", "=", "0.00003", ",", "help", "=", "'learning rate for actor (default: 3e-4)'", ")", "\n", "parser", ".", "add_argument", "(", "'--critic-lr'", ",", "type", "=", "float", ",", "default", "=", "0.0003", ",", "help", "=", "'learning rate for critic (default: 3e-4)'", ")", "\n", "parser", ".", "add_argument", "(", "'--clip-grad-value'", ",", "type", "=", "float", ",", "default", "=", "None", ",", "help", "=", "'clip gradients'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--entropy-alpha'", ",", "type", "=", "float", ",", "default", "=", "0.2", ",", "help", "=", "'Entropy coefficient'", ")", "\n", "parser", ".", "add_argument", "(", "'--automatic-entropy-tuning'", ",", "default", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "'--alpha-lr'", ",", "type", "=", "float", ",", "default", "=", "None", ",", "\n", "help", "=", "'learning rate for entropy coeff, if automatic tuning is True'", ")", "\n", "parser", ".", "add_argument", "(", "'--gamma'", ",", "type", "=", "float", ",", "default", "=", "0.99", ",", "help", "=", "'discount factor for rewards (default: 0.99)'", ")", "\n", "parser", ".", "add_argument", "(", "'--soft-target-tau'", ",", "type", "=", "float", ",", "default", "=", "0.005", ",", "\n", "help", "=", "'soft target network update (default: 5e-3)'", ")", "\n", "parser", ".", "add_argument", "(", "'--eval-deterministic'", ",", "default", "=", "True", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--transform-data-bamdp'", ",", "default", "=", "False", ",", "\n", "help", "=", "'If true - perform state relabelling to bamdp, else - use existing data'", ")", "\n", "\n", "# Ablation", "\n", "parser", ".", "add_argument", "(", "'--use-cql'", ",", "default", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "'--alpha-cql'", ",", "default", "=", "2.", ")", "\n", "\n", "# logging, saving, evaluation", "\n", "parser", ".", "add_argument", "(", "'--log-interval'", ",", "type", "=", "int", ",", "default", "=", "20", ",", "\n", "help", "=", "'log interval, one log per n iterations (default: 20)'", ")", "\n", "parser", ".", "add_argument", "(", "'--save-interval'", ",", "type", "=", "int", ",", "default", "=", "100", ",", "\n", "help", "=", "'save models interval, every # iterations (default: 100)'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--log-tensorboard'", ",", "default", "=", "True", ",", "help", "=", "'whether to use tb logger'", ")", "\n", "parser", ".", "add_argument", "(", "'--use-gpu'", ",", "default", "=", "True", ",", "help", "=", "'whether to use gpu'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--results-log-dir'", ",", "default", "=", "None", ",", "help", "=", "'directory to save agent logs (default: ./logs)'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--output-file-prefix'", ",", "default", "=", "'offline'", ")", "\n", "# parser.add_argument('--output-file-prefix', default='offline_no_relabel')", "\n", "# parser.add_argument('--output-file-prefix', default='offline_no_modify_init_state_dist')", "\n", "# parser.add_argument('--output-file-prefix', default='offline_no_relabel_no_modify_init_state_dist')", "\n", "# parser.add_argument('--output-file-prefix', default='offline_semi_modified_init_state_dist')", "\n", "# parser.add_argument('--output-file-prefix', default='offline_no_relabel_semi_modified_init_state_dist')", "\n", "\n", "parser", ".", "add_argument", "(", "'--relabelled-data-dir'", ",", "default", "=", "'data_bamdp'", ")", "\n", "# parser.add_argument('--relabelled-data-dir', default='data_bamdp_no_relabel')", "\n", "# parser.add_argument('--relabelled-data-dir', default='data_bamdp_no_modify_init_state_dist')", "\n", "# parser.add_argument('--relabelled-data-dir', default='data_bamdp_no_relabel_no_modify_init_state_dist')", "\n", "# parser.add_argument('--relabelled-data-dir', default='data_bamdp_semi_modified_init_state_dist')", "\n", "# parser.add_argument('--relabelled-data-dir', default='data_bamdp_no_relabel_semi_modified_init_state_dist')", "\n", "\n", "parser", ".", "add_argument", "(", "'--data-dir'", ",", "default", "=", "'data'", ")", "\n", "# parser.add_argument('--data-dir', default='data_no_modify_init_state_dist')", "\n", "# parser.add_argument('--data-dir', default='data_semi_modified_init_state_dist')", "\n", "\n", "parser", ".", "add_argument", "(", "'--main-data-dir'", ",", "default", "=", "'./batch_data'", ")", "\n", "parser", ".", "add_argument", "(", "'--vae-dir'", ",", "default", "=", "'./trained_vae'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--vae-model-name'", ",", "default", "=", "'relabel__17_07_17_19_31'", ")", "\n", "# parser.add_argument('--vae-model-name', default='no_relabel__18_07_13_28_23')", "\n", "# parser.add_argument('--vae-model-name', default='relabel_no_modify_init_state_dist__06_09_12_08_06')", "\n", "# parser.add_argument('--vae-model-name', default='no_relabel_no_modify_init_state_dist__06_09_15_40_40')", "\n", "# parser.add_argument('--vae-model-name', default='relabel_semi_modified_init_state_dist__14_09_16_21_25')", "\n", "# parser.add_argument('--vae-model-name', default='no_relabel_semi_modified_init_state_dist__')     # haven't trained such VAE", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", "rest_args", ")", "\n", "\n", "return", "args", "\n", "", ""]], "home.repos.pwc.inspect_result.Rondorf_BOReL.offline_config.args_gridworld.get_args": [[6, 65], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["None"], ["def", "get_args", "(", "rest_args", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'--env-name'", ",", "default", "=", "'GridNavi-v2'", ")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "type", "=", "int", ",", "default", "=", "73", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--belief-rewards'", ",", "default", "=", "False", ",", "help", "=", "'use R+=E[R]'", ")", "\n", "parser", ".", "add_argument", "(", "'--num-belief-samples'", ",", "default", "=", "20", ")", "\n", "parser", ".", "add_argument", "(", "'--num-train-tasks'", ",", "default", "=", "21", ")", "\n", "parser", ".", "add_argument", "(", "'--num-eval-tasks'", ",", "default", "=", "21", ")", "\n", "parser", ".", "add_argument", "(", "'--hindsight-relabelling'", ",", "default", "=", "False", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--num-trajs-per-task'", ",", "type", "=", "int", ",", "default", "=", "None", ",", "\n", "help", "=", "'how many trajs per task to use. If None - use all'", ")", "\n", "parser", ".", "add_argument", "(", "'--meta-batch'", ",", "type", "=", "int", ",", "default", "=", "16", ",", "\n", "help", "=", "'number of tasks to average the gradient across'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--num-iters'", ",", "type", "=", "int", ",", "default", "=", "1000", ",", "help", "=", "'number meta-training iterates'", ")", "\n", "parser", ".", "add_argument", "(", "'--rl-updates-per-iter'", ",", "type", "=", "int", ",", "default", "=", "250", ",", "help", "=", "'number of RL steps per iteration'", ")", "\n", "parser", ".", "add_argument", "(", "'--batch-size'", ",", "type", "=", "int", ",", "default", "=", "256", ",", "help", "=", "'number of transitions in RL batch (per task)'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--dqn-layers'", ",", "nargs", "=", "'+'", ",", "default", "=", "[", "64", ",", "64", "]", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--policy-lr'", ",", "type", "=", "float", ",", "default", "=", "0.0003", ",", "help", "=", "'learning rate for policy (default: 3e-4)'", ")", "\n", "parser", ".", "add_argument", "(", "'--gamma'", ",", "type", "=", "float", ",", "default", "=", "0.99", ",", "help", "=", "'discount factor for rewards (default: 0.99)'", ")", "\n", "parser", ".", "add_argument", "(", "'--soft-target-tau'", ",", "type", "=", "float", ",", "default", "=", "0.005", ",", "\n", "help", "=", "'soft target network update (default: 5e-3)'", ")", "\n", "parser", ".", "add_argument", "(", "'--eval-deterministic'", ",", "default", "=", "True", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--transform-data-bamdp'", ",", "default", "=", "False", ",", "\n", "help", "=", "'If true - perform state relabelling to bamdp, else - use existing data'", ")", "\n", "\n", "# logging, saving, evaluation", "\n", "parser", ".", "add_argument", "(", "'--log-interval'", ",", "type", "=", "int", ",", "default", "=", "10", ",", "\n", "help", "=", "'log interval, one log per n iterations (default: 10)'", ")", "\n", "parser", ".", "add_argument", "(", "'--save-interval'", ",", "type", "=", "int", ",", "default", "=", "100", ",", "\n", "help", "=", "'save models interval, every # iterations (default: 100)'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--log-tensorboard'", ",", "default", "=", "True", ",", "help", "=", "'whether to use tb logger'", ")", "\n", "parser", ".", "add_argument", "(", "'--use-gpu'", ",", "default", "=", "True", ",", "help", "=", "'whether to use gpu'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--results-log-dir'", ",", "default", "=", "None", ",", "help", "=", "'directory to save agent logs (default: ./logs)'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--output-file-prefix'", ",", "default", "=", "'offline'", ")", "\n", "# parser.add_argument('--output-file-prefix', default='offline_no_rr')", "\n", "\n", "parser", ".", "add_argument", "(", "'--relabelled-data-dir'", ",", "default", "=", "'data_bamdp'", ")", "\n", "# parser.add_argument('--relabelled-data-dir', default='data_bamdp_no_rr')", "\n", "\n", "parser", ".", "add_argument", "(", "'--data-dir'", ",", "default", "=", "'data'", ")", "\n", "parser", ".", "add_argument", "(", "'--main-data-dir'", ",", "default", "=", "'./batch_data'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--vae-dir'", ",", "default", "=", "'./trained_vae'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--vae-model-name'", ",", "default", "=", "'relabel__08_08_23_08_56'", ")", "\n", "# parser.add_argument('--vae-model-name', default='no_relabel__08_08_23_08_18')", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", "rest_args", ")", "\n", "\n", "return", "args", "\n", "", ""]], "home.repos.pwc.inspect_result.Rondorf_BOReL.vae_config.args_cheetah_vel.get_args": [[6, 74], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["None"], ["def", "get_args", "(", "rest_args", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'--env-name'", ",", "default", "=", "'HalfCheetahVel-v0'", ")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "type", "=", "int", ",", "default", "=", "73", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--belief-rewards'", ",", "default", "=", "False", ",", "help", "=", "'use R+=E[R]'", ")", "\n", "parser", ".", "add_argument", "(", "'--num-belief-samples'", ",", "default", "=", "20", ")", "\n", "parser", ".", "add_argument", "(", "'--num-train-tasks'", ",", "default", "=", "100", ")", "\n", "parser", ".", "add_argument", "(", "'--num-eval-tasks'", ",", "default", "=", "20", ")", "\n", "parser", ".", "add_argument", "(", "'--hindsight-relabelling'", ",", "default", "=", "False", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--num-trajs-per-task'", ",", "type", "=", "int", ",", "default", "=", "None", ",", "\n", "help", "=", "'how many trajs per task to use. If None - use all'", ")", "\n", "parser", ".", "add_argument", "(", "'--meta-batch'", ",", "type", "=", "int", ",", "default", "=", "16", ",", "\n", "help", "=", "'number of tasks to average the gradient across'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--num-iters'", ",", "type", "=", "int", ",", "default", "=", "1000", ",", "help", "=", "'number meta-training iterates'", ")", "\n", "parser", ".", "add_argument", "(", "'--rl-updates-per-iter'", ",", "type", "=", "int", ",", "default", "=", "1000", ",", "help", "=", "'number of RL steps per iteration'", ")", "\n", "parser", ".", "add_argument", "(", "'--batch-size'", ",", "type", "=", "int", ",", "default", "=", "256", ",", "help", "=", "'number of transitions in RL batch (per task)'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--dqn-layers'", ",", "nargs", "=", "'+'", ",", "default", "=", "[", "256", ",", "256", "]", ")", "\n", "parser", ".", "add_argument", "(", "'--policy-layers'", ",", "nargs", "=", "'+'", ",", "default", "=", "[", "256", ",", "256", "]", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--actor-lr'", ",", "type", "=", "float", ",", "default", "=", "0.0003", ",", "help", "=", "'learning rate for actor (default: 3e-4)'", ")", "\n", "parser", ".", "add_argument", "(", "'--critic-lr'", ",", "type", "=", "float", ",", "default", "=", "0.0003", ",", "help", "=", "'learning rate for critic (default: 3e-4)'", ")", "\n", "parser", ".", "add_argument", "(", "'--clip-grad-value'", ",", "type", "=", "float", ",", "default", "=", "None", ",", "help", "=", "'clip gradients'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--entropy-alpha'", ",", "type", "=", "float", ",", "default", "=", "0.2", ",", "help", "=", "'Entropy coefficient'", ")", "\n", "parser", ".", "add_argument", "(", "'--automatic-entropy-tuning'", ",", "default", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "'--alpha-lr'", ",", "type", "=", "float", ",", "default", "=", "None", ",", "\n", "help", "=", "'learning rate for entropy coeff, if automatic tuning is True (default: 3e-4)'", ")", "\n", "parser", ".", "add_argument", "(", "'--gamma'", ",", "type", "=", "float", ",", "default", "=", "0.99", ",", "help", "=", "'discount factor for rewards (default: 0.99)'", ")", "\n", "parser", ".", "add_argument", "(", "'--soft-target-tau'", ",", "type", "=", "float", ",", "default", "=", "0.005", ",", "\n", "help", "=", "'soft target network update (default: 5e-3)'", ")", "\n", "parser", ".", "add_argument", "(", "'--eval-deterministic'", ",", "default", "=", "True", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--transform-data-bamdp'", ",", "default", "=", "False", ",", "\n", "help", "=", "'If true - perform state relabelling to bamdp, else - use existing data'", ")", "\n", "\n", "# logging, saving, evaluation", "\n", "parser", ".", "add_argument", "(", "'--log-interval'", ",", "type", "=", "int", ",", "default", "=", "10", ",", "\n", "help", "=", "'log interval, one log per n iterations (default: 10)'", ")", "\n", "parser", ".", "add_argument", "(", "'--save-interval'", ",", "type", "=", "int", ",", "default", "=", "100", ",", "\n", "help", "=", "'save models interval, every # iterations (default: 100)'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--log-tensorboard'", ",", "default", "=", "True", ",", "help", "=", "'whether to use tb logger'", ")", "\n", "parser", ".", "add_argument", "(", "'--use-gpu'", ",", "default", "=", "True", ",", "help", "=", "'whether to use gpu'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--results-log-dir'", ",", "default", "=", "None", ",", "help", "=", "'directory to save agent logs (default: ./logs)'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--output-file-prefix'", ",", "default", "=", "'offline'", ")", "\n", "# parser.add_argument('--output-file-prefix', default='offline_with_rr')", "\n", "\n", "parser", ".", "add_argument", "(", "'--relabelled-data-dir'", ",", "default", "=", "'data_bamdp'", ")", "\n", "# parser.add_argument('--relabelled-data-dir', default='data_bamdp_with_rr')", "\n", "\n", "parser", ".", "add_argument", "(", "'--data-dir'", ",", "default", "=", "'data'", ")", "\n", "parser", ".", "add_argument", "(", "'--main-data-dir'", ",", "default", "=", "'./batch_data'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--vae-dir'", ",", "default", "=", "'./trained_vae'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--vae-model-name'", ",", "default", "=", "'no_relabel__29_06_13_08_41'", ")", "\n", "# parser.add_argument('--vae-model-name', default='relabel__10_08_01_45_08')", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", "rest_args", ")", "\n", "\n", "return", "args", "\n", "", ""]], "home.repos.pwc.inspect_result.Rondorf_BOReL.vae_config.args_point_robot_sparse.get_args": [[6, 74], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["None"], ["def", "get_args", "(", "rest_args", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'--env-name'", ",", "default", "=", "'PointRobotSparse-v0'", ")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "type", "=", "int", ",", "default", "=", "73", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--belief-rewards'", ",", "default", "=", "False", ",", "help", "=", "'use R+=E[R]'", ")", "\n", "parser", ".", "add_argument", "(", "'--num-belief-samples'", ",", "default", "=", "20", ")", "\n", "parser", ".", "add_argument", "(", "'--num-train-tasks'", ",", "default", "=", "80", ")", "\n", "parser", ".", "add_argument", "(", "'--num-eval-tasks'", ",", "default", "=", "20", ")", "\n", "parser", ".", "add_argument", "(", "'--hindsight-relabelling'", ",", "default", "=", "False", ")", "\n", "\n", "# parser.add_argument('--num-trajs-per-task', type=int, default=None,", "\n", "#                     help='how many trajs per task to use. If None - use all')", "\n", "parser", ".", "add_argument", "(", "'--num-trajs-per-task'", ",", "type", "=", "int", ",", "default", "=", "500", ",", "\n", "help", "=", "'how many trajs per task to use. If None - use all'", ")", "\n", "parser", ".", "add_argument", "(", "'--meta-batch'", ",", "type", "=", "int", ",", "default", "=", "16", ",", "\n", "help", "=", "'number of tasks to average the gradient across'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--num-iters'", ",", "type", "=", "int", ",", "default", "=", "5000", ",", "help", "=", "'number meta-training iterates'", ")", "\n", "parser", ".", "add_argument", "(", "'--rl-updates-per-iter'", ",", "type", "=", "int", ",", "default", "=", "1000", ",", "help", "=", "'number of RL steps per iteration'", ")", "\n", "parser", ".", "add_argument", "(", "'--batch-size'", ",", "type", "=", "int", ",", "default", "=", "256", ",", "help", "=", "'number of transitions in RL batch (per task)'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--dqn-layers'", ",", "nargs", "=", "'+'", ",", "default", "=", "[", "128", ",", "128", "]", ")", "\n", "parser", ".", "add_argument", "(", "'--policy-layers'", ",", "nargs", "=", "'+'", ",", "default", "=", "[", "128", ",", "128", "]", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--actor-lr'", ",", "type", "=", "float", ",", "default", "=", "0.0003", ",", "help", "=", "'learning rate for actor (default: 3e-4)'", ")", "\n", "parser", ".", "add_argument", "(", "'--critic-lr'", ",", "type", "=", "float", ",", "default", "=", "0.0003", ",", "help", "=", "'learning rate for critic (default: 3e-4)'", ")", "\n", "parser", ".", "add_argument", "(", "'--clip-grad-value'", ",", "type", "=", "float", ",", "default", "=", "None", ",", "help", "=", "'clip gradients'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--entropy-alpha'", ",", "type", "=", "float", ",", "default", "=", "0.01", ",", "help", "=", "'Entropy coefficient'", ")", "\n", "parser", ".", "add_argument", "(", "'--automatic-entropy-tuning'", ",", "default", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "'--alpha-lr'", ",", "type", "=", "float", ",", "default", "=", "None", ",", "\n", "help", "=", "'learning rate for entropy coeff, if automatic tuning is True (default: 3e-4)'", ")", "\n", "parser", ".", "add_argument", "(", "'--gamma'", ",", "type", "=", "float", ",", "default", "=", "0.9", ",", "help", "=", "'discount factor for rewards (default: 0.99)'", ")", "\n", "parser", ".", "add_argument", "(", "'--soft-target-tau'", ",", "type", "=", "float", ",", "default", "=", "0.005", ",", "\n", "help", "=", "'soft target network update (default: 5e-3)'", ")", "\n", "parser", ".", "add_argument", "(", "'--eval-deterministic'", ",", "default", "=", "True", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--transform-data-bamdp'", ",", "default", "=", "False", ",", "\n", "help", "=", "'If true - perform state relabelling to bamdp, else - use existing data'", ")", "\n", "\n", "# logging, saving, evaluation", "\n", "parser", ".", "add_argument", "(", "'--log-interval'", ",", "type", "=", "int", ",", "default", "=", "10", ",", "\n", "help", "=", "'log interval, one log per n iterations (default: 10)'", ")", "\n", "parser", ".", "add_argument", "(", "'--save-interval'", ",", "type", "=", "int", ",", "default", "=", "100", ",", "\n", "help", "=", "'save models interval, every # iterations (default: 100)'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--log-tensorboard'", ",", "default", "=", "True", ",", "help", "=", "'whether to use tb logger'", ")", "\n", "parser", ".", "add_argument", "(", "'--use-gpu'", ",", "default", "=", "True", ",", "help", "=", "'whether to use gpu'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--results-log-dir'", ",", "default", "=", "None", ",", "help", "=", "'directory to save agent logs (default: ./logs)'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--output-file-prefix'", ",", "default", "=", "'offline'", ")", "\n", "# parser.add_argument('--output-file-prefix', default='offline_no_rr')", "\n", "\n", "parser", ".", "add_argument", "(", "'--relabelled-data-dir'", ",", "default", "=", "'data_bamdp'", ")", "\n", "# parser.add_argument('--relabelled-data-dir', default='data_bamdp_no_rr')", "\n", "\n", "parser", ".", "add_argument", "(", "'--data-dir'", ",", "default", "=", "'data'", ")", "\n", "parser", ".", "add_argument", "(", "'--main-data-dir'", ",", "default", "=", "'./batch_data'", ")", "\n", "parser", ".", "add_argument", "(", "'--vae-dir'", ",", "default", "=", "'./trained_vae'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--vae-model-name'", ",", "default", "=", "'relabel__31_05_23_54_02'", ")", "\n", "# parser.add_argument('--vae-model-name', default='no_relabel__09_08_11_10_10')", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", "rest_args", ")", "\n", "\n", "return", "args", "\n", "", ""]], "home.repos.pwc.inspect_result.Rondorf_BOReL.vae_config.args_ant_semicircle_sparse.get_args": [[6, 86], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["None"], ["def", "get_args", "(", "rest_args", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'--env-name'", ",", "default", "=", "'AntSemiCircleSparse-v0'", ")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "type", "=", "int", ",", "default", "=", "73", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--belief-rewards'", ",", "default", "=", "False", ",", "help", "=", "'use R+=E[R]'", ")", "\n", "parser", ".", "add_argument", "(", "'--num-belief-samples'", ",", "default", "=", "20", ")", "\n", "parser", ".", "add_argument", "(", "'--num-train-tasks'", ",", "default", "=", "80", ")", "\n", "parser", ".", "add_argument", "(", "'--num-eval-tasks'", ",", "default", "=", "20", ")", "\n", "parser", ".", "add_argument", "(", "'--hindsight-relabelling'", ",", "default", "=", "False", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--num-trajs-per-task'", ",", "type", "=", "int", ",", "default", "=", "None", ",", "\n", "help", "=", "'how many trajs per task to use. If None - use all'", ")", "\n", "parser", ".", "add_argument", "(", "'--meta-batch'", ",", "type", "=", "int", ",", "default", "=", "16", ",", "\n", "help", "=", "'number of tasks to average the gradient across'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--num-iters'", ",", "type", "=", "int", ",", "default", "=", "3000", ",", "help", "=", "'number meta-training iterates'", ")", "\n", "parser", ".", "add_argument", "(", "'--rl-updates-per-iter'", ",", "type", "=", "int", ",", "default", "=", "2000", ",", "help", "=", "'number of RL steps per iteration'", ")", "\n", "parser", ".", "add_argument", "(", "'--batch-size'", ",", "type", "=", "int", ",", "default", "=", "256", ",", "help", "=", "'number of transitions in RL batch (per task)'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--dqn-layers'", ",", "nargs", "=", "'+'", ",", "default", "=", "[", "256", ",", "256", "]", ")", "\n", "parser", ".", "add_argument", "(", "'--policy-layers'", ",", "nargs", "=", "'+'", ",", "default", "=", "[", "256", ",", "256", "]", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--actor-lr'", ",", "type", "=", "float", ",", "default", "=", "0.00003", ",", "help", "=", "'learning rate for actor (default: 3e-4)'", ")", "\n", "parser", ".", "add_argument", "(", "'--critic-lr'", ",", "type", "=", "float", ",", "default", "=", "0.0003", ",", "help", "=", "'learning rate for critic (default: 3e-4)'", ")", "\n", "parser", ".", "add_argument", "(", "'--clip-grad-value'", ",", "type", "=", "float", ",", "default", "=", "None", ",", "help", "=", "'clip gradients'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--entropy-alpha'", ",", "type", "=", "float", ",", "default", "=", "0.2", ",", "help", "=", "'Entropy coefficient'", ")", "\n", "parser", ".", "add_argument", "(", "'--automatic-entropy-tuning'", ",", "default", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "'--alpha-lr'", ",", "type", "=", "float", ",", "default", "=", "None", ",", "\n", "help", "=", "'learning rate for entropy coeff, if automatic tuning is True'", ")", "\n", "parser", ".", "add_argument", "(", "'--gamma'", ",", "type", "=", "float", ",", "default", "=", "0.99", ",", "help", "=", "'discount factor for rewards (default: 0.99)'", ")", "\n", "parser", ".", "add_argument", "(", "'--soft-target-tau'", ",", "type", "=", "float", ",", "default", "=", "0.005", ",", "\n", "help", "=", "'soft target network update (default: 5e-3)'", ")", "\n", "parser", ".", "add_argument", "(", "'--eval-deterministic'", ",", "default", "=", "True", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--transform-data-bamdp'", ",", "default", "=", "False", ",", "\n", "help", "=", "'If true - perform state relabelling to bamdp, else - use existing data'", ")", "\n", "\n", "# Ablation", "\n", "parser", ".", "add_argument", "(", "'--use-cql'", ",", "default", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "'--alpha-cql'", ",", "default", "=", "2.", ")", "\n", "\n", "# logging, saving, evaluation", "\n", "parser", ".", "add_argument", "(", "'--log-interval'", ",", "type", "=", "int", ",", "default", "=", "20", ",", "\n", "help", "=", "'log interval, one log per n iterations (default: 20)'", ")", "\n", "parser", ".", "add_argument", "(", "'--save-interval'", ",", "type", "=", "int", ",", "default", "=", "100", ",", "\n", "help", "=", "'save models interval, every # iterations (default: 100)'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--log-tensorboard'", ",", "default", "=", "True", ",", "help", "=", "'whether to use tb logger'", ")", "\n", "parser", ".", "add_argument", "(", "'--use-gpu'", ",", "default", "=", "True", ",", "help", "=", "'whether to use gpu'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--results-log-dir'", ",", "default", "=", "None", ",", "help", "=", "'directory to save agent logs (default: ./logs)'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--output-file-prefix'", ",", "default", "=", "'offline'", ")", "\n", "# parser.add_argument('--output-file-prefix', default='offline_no_relabel')", "\n", "# parser.add_argument('--output-file-prefix', default='offline_no_modify_init_state_dist')", "\n", "# parser.add_argument('--output-file-prefix', default='offline_no_relabel_no_modify_init_state_dist')", "\n", "# parser.add_argument('--output-file-prefix', default='offline_semi_modified_init_state_dist')", "\n", "# parser.add_argument('--output-file-prefix', default='offline_no_relabel_semi_modified_init_state_dist')", "\n", "\n", "parser", ".", "add_argument", "(", "'--relabelled-data-dir'", ",", "default", "=", "'data_bamdp'", ")", "\n", "# parser.add_argument('--relabelled-data-dir', default='data_bamdp_no_relabel')", "\n", "# parser.add_argument('--relabelled-data-dir', default='data_bamdp_no_modify_init_state_dist')", "\n", "# parser.add_argument('--relabelled-data-dir', default='data_bamdp_no_relabel_no_modify_init_state_dist')", "\n", "# parser.add_argument('--relabelled-data-dir', default='data_bamdp_semi_modified_init_state_dist')", "\n", "# parser.add_argument('--relabelled-data-dir', default='data_bamdp_no_relabel_semi_modified_init_state_dist')", "\n", "\n", "parser", ".", "add_argument", "(", "'--data-dir'", ",", "default", "=", "'data'", ")", "\n", "# parser.add_argument('--data-dir', default='data_no_modify_init_state_dist')", "\n", "# parser.add_argument('--data-dir', default='data_semi_modified_init_state_dist')", "\n", "\n", "parser", ".", "add_argument", "(", "'--main-data-dir'", ",", "default", "=", "'./batch_data'", ")", "\n", "parser", ".", "add_argument", "(", "'--vae-dir'", ",", "default", "=", "'./trained_vae'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--vae-model-name'", ",", "default", "=", "'relabel__17_07_17_19_31'", ")", "\n", "# parser.add_argument('--vae-model-name', default='no_relabel__18_07_13_28_23')", "\n", "# parser.add_argument('--vae-model-name', default='relabel_no_modify_init_state_dist__06_09_12_08_06')", "\n", "# parser.add_argument('--vae-model-name', default='no_relabel_no_modify_init_state_dist__06_09_15_40_40')", "\n", "# parser.add_argument('--vae-model-name', default='relabel_semi_modified_init_state_dist__14_09_16_21_25')", "\n", "# parser.add_argument('--vae-model-name', default='no_relabel_semi_modified_init_state_dist__')     # haven't trained such VAE", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.vae_config.args_gridworld.get_args": [[6, 71], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["None"], ["def", "get_args", "(", "rest_args", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'--env-name'", ",", "default", "=", "'GridNavi-v2'", ")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "type", "=", "int", ",", "default", "=", "73", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--belief-rewards'", ",", "default", "=", "False", ",", "help", "=", "'use R+=E[R]'", ")", "\n", "parser", ".", "add_argument", "(", "'--num-belief-samples'", ",", "default", "=", "20", ")", "\n", "parser", ".", "add_argument", "(", "'--num-train-tasks'", ",", "default", "=", "21", ")", "\n", "parser", ".", "add_argument", "(", "'--num-eval-tasks'", ",", "default", "=", "21", ")", "\n", "parser", ".", "add_argument", "(", "'--hindsight-relabelling'", ",", "default", "=", "False", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--num-trajs-per-task'", ",", "type", "=", "int", ",", "default", "=", "None", ",", "\n", "help", "=", "'how many trajs per task to use. If None - use all'", ")", "\n", "parser", ".", "add_argument", "(", "'--meta-batch'", ",", "type", "=", "int", ",", "default", "=", "16", ",", "\n", "help", "=", "'number of tasks to average the gradient across'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--num-iters'", ",", "type", "=", "int", ",", "default", "=", "1000", ",", "help", "=", "'number meta-training iterates'", ")", "\n", "parser", ".", "add_argument", "(", "'--rl-updates-per-iter'", ",", "type", "=", "int", ",", "default", "=", "250", ",", "help", "=", "'number of RL steps per iteration'", ")", "\n", "parser", ".", "add_argument", "(", "'--batch-size'", ",", "type", "=", "int", ",", "default", "=", "256", ",", "help", "=", "'number of transitions in RL batch (per task)'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--dqn-layers'", ",", "nargs", "=", "'+'", ",", "default", "=", "[", "64", ",", "64", "]", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--policy-lr'", ",", "type", "=", "float", ",", "default", "=", "0.0003", ",", "help", "=", "'learning rate for policy (default: 3e-4)'", ")", "\n", "parser", ".", "add_argument", "(", "'--gamma'", ",", "type", "=", "float", ",", "default", "=", "0.99", ",", "help", "=", "'discount factor for rewards (default: 0.99)'", ")", "\n", "parser", ".", "add_argument", "(", "'--soft-target-tau'", ",", "type", "=", "float", ",", "default", "=", "0.005", ",", "\n", "help", "=", "'soft target network update (default: 5e-3)'", ")", "\n", "parser", ".", "add_argument", "(", "'--eval-deterministic'", ",", "default", "=", "True", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--transform-data-bamdp'", ",", "default", "=", "False", ",", "\n", "help", "=", "'If true - perform state relabelling to bamdp, else - use existing data'", ")", "\n", "\n", "# logging, saving, evaluation", "\n", "parser", ".", "add_argument", "(", "'--log-interval'", ",", "type", "=", "int", ",", "default", "=", "10", ",", "\n", "help", "=", "'log interval, one log per n iterations (default: 10)'", ")", "\n", "parser", ".", "add_argument", "(", "'--save-interval'", ",", "type", "=", "int", ",", "default", "=", "100", ",", "\n", "help", "=", "'save models interval, every # iterations (default: 100)'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--log-tensorboard'", ",", "default", "=", "True", ",", "help", "=", "'whether to use tb logger'", ")", "\n", "parser", ".", "add_argument", "(", "'--use-gpu'", ",", "default", "=", "True", ",", "help", "=", "'whether to use gpu'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--results-log-dir'", ",", "default", "=", "None", ",", "help", "=", "'directory to save agent logs (default: ./logs)'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--output-file-prefix'", ",", "default", "=", "'offline'", ")", "\n", "# parser.add_argument('--output-file-prefix', default='offline_no_rr')", "\n", "\n", "parser", ".", "add_argument", "(", "'--relabelled-data-dir'", ",", "default", "=", "'data_bamdp'", ")", "\n", "# parser.add_argument('--relabelled-data-dir', default='data_bamdp_no_rr')", "\n", "\n", "parser", ".", "add_argument", "(", "'--data-dir'", ",", "default", "=", "'data'", ")", "\n", "parser", ".", "add_argument", "(", "'--main-data-dir'", ",", "default", "=", "'./batch_data'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--vae-dir'", ",", "default", "=", "'./trained_vae'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--vae-model-name'", ",", "default", "=", "'relabel__08_08_23_08_56'", ")", "\n", "# parser.add_argument('--vae-model-name', default='no_relabel__08_08_23_08_18')", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", "rest_args", ")", "\n", "\n", "return", "args", "\n", "", ""]], "home.repos.pwc.inspect_result.Rondorf_BOReL.online_config.args_cheetah_vel.get_args": [[7, 141], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "torch.cuda.is_available"], "function", ["None"], ["    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'--env-name'", ",", "default", "=", "'HalfCheetahVel-v0'", ")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "type", "=", "int", ",", "default", "=", "73", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--belief-rewards'", ",", "default", "=", "False", ",", "help", "=", "'use R+=E[R]'", ")", "\n", "parser", ".", "add_argument", "(", "'--num-belief-samples'", ",", "default", "=", "20", ")", "\n", "parser", ".", "add_argument", "(", "'--num-train-tasks'", ",", "default", "=", "100", ")", "\n", "parser", ".", "add_argument", "(", "'--num-eval-tasks'", ",", "default", "=", "20", ")", "\n", "parser", ".", "add_argument", "(", "'--hindsight-relabelling'", ",", "default", "=", "False", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--num-trajs-per-task'", ",", "type", "=", "int", ",", "default", "=", "None", ",", "\n", "help", "=", "'how many trajs per task to use. If None - use all'", ")", "\n", "parser", ".", "add_argument", "(", "'--meta-batch'", ",", "type", "=", "int", ",", "default", "=", "16", ",", "\n", "help", "=", "'number of tasks to average the gradient across'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--num-iters'", ",", "type", "=", "int", ",", "default", "=", "1000", ",", "help", "=", "'number meta-training iterates'", ")", "\n", "parser", ".", "add_argument", "(", "'--rl-updates-per-iter'", ",", "type", "=", "int", ",", "default", "=", "1000", ",", "help", "=", "'number of RL steps per iteration'", ")", "\n", "parser", ".", "add_argument", "(", "'--batch-size'", ",", "type", "=", "int", ",", "default", "=", "256", ",", "help", "=", "'number of transitions in RL batch (per task)'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--dqn-layers'", ",", "nargs", "=", "'+'", ",", "default", "=", "[", "256", ",", "256", "]", ")", "\n", "parser", ".", "add_argument", "(", "'--policy-layers'", ",", "nargs", "=", "'+'", ",", "default", "=", "[", "256", ",", "256", "]", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--actor-lr'", ",", "type", "=", "float", ",", "default", "=", "0.0003", ",", "help", "=", "'learning rate for actor (default: 3e-4)'", ")", "\n", "parser", ".", "add_argument", "(", "'--critic-lr'", ",", "type", "=", "float", ",", "default", "=", "0.0003", ",", "help", "=", "'learning rate for critic (default: 3e-4)'", ")", "\n", "parser", ".", "add_argument", "(", "'--clip-grad-value'", ",", "type", "=", "float", ",", "default", "=", "None", ",", "help", "=", "'clip gradients'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--entropy-alpha'", ",", "type", "=", "float", ",", "default", "=", "0.2", ",", "help", "=", "'Entropy coefficient'", ")", "\n", "parser", ".", "add_argument", "(", "'--automatic-entropy-tuning'", ",", "default", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "'--alpha-lr'", ",", "type", "=", "float", ",", "default", "=", "None", ",", "\n", "help", "=", "'learning rate for entropy coeff, if automatic tuning is True (default: 3e-4)'", ")", "\n", "parser", ".", "add_argument", "(", "'--gamma'", ",", "type", "=", "float", ",", "default", "=", "0.99", ",", "help", "=", "'discount factor for rewards (default: 0.99)'", ")", "\n", "parser", ".", "add_argument", "(", "'--soft-target-tau'", ",", "type", "=", "float", ",", "default", "=", "0.005", ",", "\n", "help", "=", "'soft target network update (default: 5e-3)'", ")", "\n", "parser", ".", "add_argument", "(", "'--eval-deterministic'", ",", "default", "=", "True", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--transform-data-bamdp'", ",", "default", "=", "False", ",", "\n", "help", "=", "'If true - perform state relabelling to bamdp, else - use existing data'", ")", "\n", "\n", "# logging, saving, evaluation", "\n", "parser", ".", "add_argument", "(", "'--log-interval'", ",", "type", "=", "int", ",", "default", "=", "10", ",", "\n", "help", "=", "'log interval, one log per n iterations (default: 10)'", ")", "\n", "parser", ".", "add_argument", "(", "'--save-interval'", ",", "type", "=", "int", ",", "default", "=", "100", ",", "\n", "help", "=", "'save models interval, every # iterations (default: 100)'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--log-tensorboard'", ",", "default", "=", "True", ",", "help", "=", "'whether to use tb logger'", ")", "\n", "parser", ".", "add_argument", "(", "'--use-gpu'", ",", "default", "=", "True", ",", "help", "=", "'whether to use gpu'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--results-log-dir'", ",", "default", "=", "None", ",", "help", "=", "'directory to save agent logs (default: ./logs)'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--output-file-prefix'", ",", "default", "=", "'offline'", ")", "\n", "# parser.add_argument('--output-file-prefix', default='offline_with_rr')", "\n", "\n", "parser", ".", "add_argument", "(", "'--relabelled-data-dir'", ",", "default", "=", "'data_bamdp'", ")", "\n", "# parser.add_argument('--relabelled-data-dir', default='data_bamdp_with_rr')", "\n", "\n", "parser", ".", "add_argument", "(", "'--data-dir'", ",", "default", "=", "'data'", ")", "\n", "parser", ".", "add_argument", "(", "'--main-data-dir'", ",", "default", "=", "'./batch_data'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--vae-dir'", ",", "default", "=", "'./trained_vae'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--vae-model-name'", ",", "default", "=", "'no_relabel__29_06_13_08_41'", ")", "\n", "# parser.add_argument('--vae-model-name', default='relabel__10_08_01_45_08')", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", "rest_args", ")", "\n", "\n", "return", "args", "\n", "", ""]], "home.repos.pwc.inspect_result.Rondorf_BOReL.online_config.args_point_robot_sparse.get_args": [[6, 144], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "torch.cuda.is_available"], "function", ["None"], ["def", "get_args", "(", "rest_args", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'--env-name'", ",", "default", "=", "'PointRobotSparse-v0'", ")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "type", "=", "int", ",", "default", "=", "73", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--belief-rewards'", ",", "default", "=", "False", ",", "help", "=", "'use R+=E[R]'", ")", "\n", "parser", ".", "add_argument", "(", "'--num-belief-samples'", ",", "default", "=", "20", ")", "\n", "parser", ".", "add_argument", "(", "'--num-train-tasks'", ",", "default", "=", "80", ")", "\n", "parser", ".", "add_argument", "(", "'--num-eval-tasks'", ",", "default", "=", "20", ")", "\n", "parser", ".", "add_argument", "(", "'--hindsight-relabelling'", ",", "default", "=", "False", ")", "\n", "\n", "# parser.add_argument('--num-trajs-per-task', type=int, default=None,", "\n", "#                     help='how many trajs per task to use. If None - use all')", "\n", "parser", ".", "add_argument", "(", "'--num-trajs-per-task'", ",", "type", "=", "int", ",", "default", "=", "500", ",", "\n", "help", "=", "'how many trajs per task to use. If None - use all'", ")", "\n", "parser", ".", "add_argument", "(", "'--meta-batch'", ",", "type", "=", "int", ",", "default", "=", "16", ",", "\n", "help", "=", "'number of tasks to average the gradient across'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--num-iters'", ",", "type", "=", "int", ",", "default", "=", "5000", ",", "help", "=", "'number meta-training iterates'", ")", "\n", "parser", ".", "add_argument", "(", "'--rl-updates-per-iter'", ",", "type", "=", "int", ",", "default", "=", "1000", ",", "help", "=", "'number of RL steps per iteration'", ")", "\n", "parser", ".", "add_argument", "(", "'--batch-size'", ",", "type", "=", "int", ",", "default", "=", "256", ",", "help", "=", "'number of transitions in RL batch (per task)'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--dqn-layers'", ",", "nargs", "=", "'+'", ",", "default", "=", "[", "128", ",", "128", "]", ")", "\n", "parser", ".", "add_argument", "(", "'--policy-layers'", ",", "nargs", "=", "'+'", ",", "default", "=", "[", "128", ",", "128", "]", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--actor-lr'", ",", "type", "=", "float", ",", "default", "=", "0.0003", ",", "help", "=", "'learning rate for actor (default: 3e-4)'", ")", "\n", "parser", ".", "add_argument", "(", "'--critic-lr'", ",", "type", "=", "float", ",", "default", "=", "0.0003", ",", "help", "=", "'learning rate for critic (default: 3e-4)'", ")", "\n", "parser", ".", "add_argument", "(", "'--clip-grad-value'", ",", "type", "=", "float", ",", "default", "=", "None", ",", "help", "=", "'clip gradients'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--entropy-alpha'", ",", "type", "=", "float", ",", "default", "=", "0.01", ",", "help", "=", "'Entropy coefficient'", ")", "\n", "parser", ".", "add_argument", "(", "'--automatic-entropy-tuning'", ",", "default", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "'--alpha-lr'", ",", "type", "=", "float", ",", "default", "=", "None", ",", "\n", "help", "=", "'learning rate for entropy coeff, if automatic tuning is True (default: 3e-4)'", ")", "\n", "parser", ".", "add_argument", "(", "'--gamma'", ",", "type", "=", "float", ",", "default", "=", "0.9", ",", "help", "=", "'discount factor for rewards (default: 0.99)'", ")", "\n", "parser", ".", "add_argument", "(", "'--soft-target-tau'", ",", "type", "=", "float", ",", "default", "=", "0.005", ",", "\n", "help", "=", "'soft target network update (default: 5e-3)'", ")", "\n", "parser", ".", "add_argument", "(", "'--eval-deterministic'", ",", "default", "=", "True", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--transform-data-bamdp'", ",", "default", "=", "False", ",", "\n", "help", "=", "'If true - perform state relabelling to bamdp, else - use existing data'", ")", "\n", "\n", "# logging, saving, evaluation", "\n", "parser", ".", "add_argument", "(", "'--log-interval'", ",", "type", "=", "int", ",", "default", "=", "10", ",", "\n", "help", "=", "'log interval, one log per n iterations (default: 10)'", ")", "\n", "parser", ".", "add_argument", "(", "'--save-interval'", ",", "type", "=", "int", ",", "default", "=", "100", ",", "\n", "help", "=", "'save models interval, every # iterations (default: 100)'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--log-tensorboard'", ",", "default", "=", "True", ",", "help", "=", "'whether to use tb logger'", ")", "\n", "parser", ".", "add_argument", "(", "'--use-gpu'", ",", "default", "=", "True", ",", "help", "=", "'whether to use gpu'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--results-log-dir'", ",", "default", "=", "None", ",", "help", "=", "'directory to save agent logs (default: ./logs)'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--output-file-prefix'", ",", "default", "=", "'offline'", ")", "\n", "# parser.add_argument('--output-file-prefix', default='offline_no_rr')", "\n", "\n", "parser", ".", "add_argument", "(", "'--relabelled-data-dir'", ",", "default", "=", "'data_bamdp'", ")", "\n", "# parser.add_argument('--relabelled-data-dir', default='data_bamdp_no_rr')", "\n", "\n", "parser", ".", "add_argument", "(", "'--data-dir'", ",", "default", "=", "'data'", ")", "\n", "parser", ".", "add_argument", "(", "'--main-data-dir'", ",", "default", "=", "'./batch_data'", ")", "\n", "parser", ".", "add_argument", "(", "'--vae-dir'", ",", "default", "=", "'./trained_vae'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--vae-model-name'", ",", "default", "=", "'relabel__31_05_23_54_02'", ")", "\n", "# parser.add_argument('--vae-model-name', default='no_relabel__09_08_11_10_10')", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", "rest_args", ")", "\n", "\n", "return", "args", "\n", "", ""]], "home.repos.pwc.inspect_result.Rondorf_BOReL.online_config.args_two_rooms.get_args": [[6, 158], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "torch.cuda.is_available"], "function", ["None"], ["def", "get_args", "(", "rest_args", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "\n", "# --- GENERAL ---", "\n", "\n", "parser", ".", "add_argument", "(", "'--single-task'", ",", "type", "=", "boolean_argument", ",", "default", "=", "False", ",", "\n", "help", "=", "'whether meta-RL or single RL agent'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--output-file-prefix'", ",", "default", "=", "'dqn'", ",", "help", "=", "'prefix to output file name'", ")", "\n", "parser", ".", "add_argument", "(", "'--load-model'", ",", "type", "=", "boolean_argument", ",", "default", "=", "False", ",", "help", "=", "'whether to load trained model'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--policy-buffer-size'", ",", "type", "=", "int", ",", "default", "=", "1e6", ",", "help", "=", "'buffer size for RL updates'", ")", "\n", "parser", ".", "add_argument", "(", "'--vae-buffer-size'", ",", "type", "=", "int", ",", "default", "=", "1e5", ",", "help", "=", "'buffer size for VAE updates'", ")", "\n", "# --- ENV ---", "\n", "parser", ".", "add_argument", "(", "'--env-name'", ",", "default", "=", "'TwoRooms-v2'", ",", "help", "=", "'environment to train on'", ")", "\n", "parser", ".", "add_argument", "(", "'--max-rollouts-per-task'", ",", "type", "=", "int", ",", "default", "=", "2", ")", "\n", "parser", ".", "add_argument", "(", "'--is-sparse-env'", ",", "type", "=", "boolean_argument", ",", "default", "=", "False", ",", "help", "=", "'rewards are 0. or -0.1'", ")", "\n", "parser", ".", "add_argument", "(", "'--num-tasks'", ",", "type", "=", "int", ",", "default", "=", "5", ",", "help", "=", "'number of goals in environment'", ")", "\n", "parser", ".", "add_argument", "(", "'--num-train-tasks'", ",", "type", "=", "int", ",", "default", "=", "3", ",", "help", "=", "'number of tasks for train'", ")", "\n", "parser", ".", "add_argument", "(", "'--num-eval-tasks'", ",", "type", "=", "int", ",", "default", "=", "2", ",", "help", "=", "'number of tasks for evaluation'", ")", "\n", "\n", "# --- TRAINING ---", "\n", "parser", ".", "add_argument", "(", "'--fixed-latent-params'", ",", "type", "=", "boolean_argument", ",", "default", "=", "False", ",", "\n", "help", "=", "'whether to set fixed latent parameters to check capacity of RL'", ")", "# DEBUG only", "\n", "\n", "parser", ".", "add_argument", "(", "'--meta-batch'", ",", "type", "=", "int", ",", "default", "=", "16", ",", "help", "=", "'number of tasks to average the gradient across'", ")", "\n", "parser", ".", "add_argument", "(", "'--num-tasks-sample'", ",", "type", "=", "int", ",", "default", "=", "5", ",", "help", "=", "'number of tasks to collect rollouts per iter'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--num-iters'", ",", "type", "=", "int", ",", "default", "=", "5000", ",", "help", "=", "'number meta-training iterates'", ")", "\n", "parser", ".", "add_argument", "(", "'--rl-updates-per-iter'", ",", "type", "=", "int", ",", "default", "=", "250", ",", "help", "=", "'number of RL steps per iteration'", ")", "\n", "# parser.add_argument('--rl-updates-per-iter', type=int, default=1, help='number of RL steps per iteration')", "\n", "parser", ".", "add_argument", "(", "'--vae-updates-per-iter'", ",", "type", "=", "int", ",", "default", "=", "20", ",", "help", "=", "'number of VAE steps per iteration'", ")", "\n", "# parser.add_argument('--vae-updates-per-iter', type=int, default=1, help='number of VAE steps per iteration')", "\n", "# maybe later switch to num. steps which is num_rollouts * horizon (to be able to compare to PEARL...)", "\n", "parser", ".", "add_argument", "(", "'--num-rollouts-per-iter'", ",", "type", "=", "int", ",", "default", "=", "5", ",", "help", "=", "'number of rollouts to collect per task'", ")", "\n", "parser", ".", "add_argument", "(", "'--num-init-rollouts-pool'", ",", "type", "=", "int", ",", "default", "=", "20", ",", "\n", "help", "=", "'number of initial rollouts collect per task, before training begins'", ")", "\n", "parser", ".", "add_argument", "(", "'--batch-size'", ",", "type", "=", "int", ",", "default", "=", "256", ",", "help", "=", "'number of transitions in RL batch (per task)'", ")", "\n", "parser", ".", "add_argument", "(", "'--vae-batch-num-rollouts-per-task'", ",", "type", "=", "int", ",", "default", "=", "2", ",", "\n", "help", "=", "'number of rollouts in VAE batch (per task)'", ")", "\n", "parser", ".", "add_argument", "(", "'--vae-batch-num-elbo-terms'", ",", "type", "=", "int", ",", "default", "=", "None", ",", "\n", "help", "=", "'for how many timesteps to compute the ELBO; None uses all'", ")", "\n", "\n", "# --- POLICY ---", "\n", "\n", "# network", "\n", "parser", ".", "add_argument", "(", "'--dqn-layers'", ",", "nargs", "=", "'+'", ",", "default", "=", "[", "32", ",", "32", "]", ")", "\n", "# parser.add_argument('--dqn-activation', type=str, default='relu')", "\n", "\n", "# algo", "\n", "parser", ".", "add_argument", "(", "'--policy'", ",", "type", "=", "str", ",", "default", "=", "'dqn'", ",", "help", "=", "'choose: dqn, ddqn'", ")", "\n", "\n", "# dqn specific", "\n", "parser", ".", "add_argument", "(", "'--dqn-alpha'", ",", "type", "=", "float", ",", "default", "=", "0.99", ",", "help", "=", "'RMSprop optimizer alpha (default: 0.99)'", ")", "\n", "parser", ".", "add_argument", "(", "'--dqn-eps'", ",", "type", "=", "float", ",", "default", "=", "1e-5", ",", "help", "=", "'RMSprop optimizer epsilon (default: 1e-5)'", ")", "\n", "parser", ".", "add_argument", "(", "'--dqn-epsilon-init'", ",", "type", "=", "float", ",", "default", "=", "1.0", ",", "help", "=", "'initial explor. param (default: 1.0)'", ")", "\n", "parser", ".", "add_argument", "(", "'--dqn-epsilon-final'", ",", "type", "=", "float", ",", "default", "=", "0.1", ",", "help", "=", "'final explor. param (default: 0.1)'", ")", "\n", "parser", ".", "add_argument", "(", "'--dqn-exploration-iters'", ",", "type", "=", "float", ",", "default", "=", "1000", ",", "\n", "help", "=", "'iters from episolon_init to epsilon_final (default: 1000)'", ")", "\n", "parser", ".", "add_argument", "(", "'--soft-target-tau'", ",", "type", "=", "float", ",", "default", "=", "0.005", ",", "help", "=", "'soft target network update (default: 5e-3)'", ")", "\n", "\n", "# other hyperparameters", "\n", "parser", ".", "add_argument", "(", "'--policy-lr'", ",", "type", "=", "float", ",", "default", "=", "0.00007", ",", "help", "=", "'learning rate for RL (default: 7e-5)'", ")", "\n", "parser", ".", "add_argument", "(", "'--gamma'", ",", "type", "=", "float", ",", "default", "=", "0.99", ",", "help", "=", "'discount factor for rewards (default: 0.99)'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--use-proper-time-limits'", ",", "type", "=", "boolean_argument", ",", "default", "=", "False", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--switch-to-belief-reward'", ",", "type", "=", "int", ",", "default", "=", "None", ",", "\n", "help", "=", "'when to switch from R to R+; None is to not switch'", ")", "\n", "parser", ".", "add_argument", "(", "'--num-belief-samples'", ",", "type", "=", "int", ",", "default", "=", "40", ",", "\n", "help", "=", "'number of latent samples to estimate R+'", ")", "\n", "\n", "# --- VAE TRAINING ---", "\n", "\n", "# general", "\n", "parser", ".", "add_argument", "(", "'--train-vae'", ",", "type", "=", "boolean_argument", ",", "default", "=", "True", ",", "help", "=", "'whether to update vae'", ")", "\n", "parser", ".", "add_argument", "(", "'--vae-lr'", ",", "type", "=", "float", ",", "default", "=", "0.0003", ",", "help", "=", "'learning rate for VAE (default: 3e-4)'", ")", "\n", "parser", ".", "add_argument", "(", "'--kl_weight'", ",", "type", "=", "float", ",", "default", "=", "1.", ",", "help", "=", "'weight for the KL term'", ")", "\n", "\n", "# - encoder", "\n", "parser", ".", "add_argument", "(", "'--encoder_type'", ",", "type", "=", "str", ",", "default", "=", "'rnn'", ",", "help", "=", "'choose: rnn, tcn, deepset'", ")", "\n", "parser", ".", "add_argument", "(", "'--task-embedding-size'", ",", "type", "=", "int", ",", "default", "=", "5", ",", "help", "=", "'dimensionality of latent space'", ")", "\n", "parser", ".", "add_argument", "(", "'--aggregator-hidden-size'", ",", "type", "=", "int", ",", "default", "=", "64", ",", "\n", "help", "=", "'dimensionality of hidden state of the rnn'", ")", "\n", "parser", ".", "add_argument", "(", "'--layers-before-aggregator'", ",", "nargs", "=", "'+'", ",", "type", "=", "int", ",", "default", "=", "[", "]", ")", "\n", "parser", ".", "add_argument", "(", "'--layers-after-aggregator'", ",", "nargs", "=", "'+'", ",", "type", "=", "int", ",", "default", "=", "[", "]", ")", "\n", "parser", ".", "add_argument", "(", "'--action-embedding-size'", ",", "type", "=", "int", ",", "default", "=", "0", ")", "\n", "parser", ".", "add_argument", "(", "'--state-embedding-size'", ",", "type", "=", "int", ",", "default", "=", "32", ")", "\n", "parser", ".", "add_argument", "(", "'--reward-embedding-size'", ",", "type", "=", "int", ",", "default", "=", "8", ")", "\n", "\n", "# - decoder: rewards", "\n", "parser", ".", "add_argument", "(", "'--decode-reward'", ",", "type", "=", "boolean_argument", ",", "default", "=", "True", ",", "help", "=", "'use reward decoder'", ")", "\n", "parser", ".", "add_argument", "(", "'--input-prev-state'", ",", "type", "=", "boolean_argument", ",", "default", "=", "False", ",", "help", "=", "'use prev state for rew pred'", ")", "\n", "parser", ".", "add_argument", "(", "'--input-action'", ",", "type", "=", "boolean_argument", ",", "default", "=", "False", ",", "help", "=", "'use prev action for rew pred'", ")", "\n", "parser", ".", "add_argument", "(", "'--reward-decoder-layers'", ",", "nargs", "=", "'+'", ",", "type", "=", "int", ",", "default", "=", "[", "32", ",", "32", "]", ")", "\n", "parser", ".", "add_argument", "(", "'--rew-pred-type'", ",", "type", "=", "str", ",", "default", "=", "'bernoulli'", ",", "\n", "help", "=", "'choose from: bernoulli, gaussian, deterministic'", ")", "\n", "parser", ".", "add_argument", "(", "'--rew-loss-fn'", ",", "type", "=", "str", ",", "default", "=", "'BCE'", ",", "help", "=", "'choose from: BCE, FL'", ")", "\n", "parser", ".", "add_argument", "(", "'--multihead-for-reward'", ",", "type", "=", "boolean_argument", ",", "default", "=", "True", ",", "\n", "help", "=", "'one head per reward pred (i.e. per state)'", ")", "\n", "parser", ".", "add_argument", "(", "'--rew-loss-coeff'", ",", "type", "=", "float", ",", "default", "=", "1.0", ",", "help", "=", "'weight for reward loss'", ")", "\n", "\n", "# - decoder: state transitions", "\n", "parser", ".", "add_argument", "(", "'--decode-state'", ",", "type", "=", "boolean_argument", ",", "default", "=", "False", ",", "help", "=", "'use state decoder'", ")", "\n", "parser", ".", "add_argument", "(", "'--state-loss-coeff'", ",", "type", "=", "float", ",", "default", "=", "1.0", ",", "help", "=", "'weight for state loss (vs reward loss)'", ")", "\n", "\n", "# - decoder: ground-truth task (\"varibad oracle\", after Humplik et al. 2019)", "\n", "parser", ".", "add_argument", "(", "'--decode-task'", ",", "type", "=", "boolean_argument", ",", "default", "=", "False", ",", "help", "=", "'use state decoder'", ")", "\n", "parser", ".", "add_argument", "(", "'--task-loss-coeff'", ",", "type", "=", "float", ",", "default", "=", "1.0", ",", "\n", "help", "=", "'weight for task decoding loss (vs reward loss)'", ")", "\n", "\n", "# --- ABLATIONS ---", "\n", "\n", "parser", ".", "add_argument", "(", "'--disable-decoder'", ",", "type", "=", "boolean_argument", ",", "default", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "'--disable-stochasticity-in-latent'", ",", "type", "=", "boolean_argument", ",", "default", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "'--sample-embeddings'", ",", "type", "=", "boolean_argument", ",", "default", "=", "False", ",", "\n", "help", "=", "'sample the embedding (otherwise: pass mean)'", ")", "\n", "parser", ".", "add_argument", "(", "'--vae-loss-coeff'", ",", "type", "=", "float", ",", "default", "=", "1.0", ",", "help", "=", "'weight for VAE loss (vs RL loss)'", ")", "\n", "parser", ".", "add_argument", "(", "'--kl-to-gauss-prior'", ",", "type", "=", "boolean_argument", ",", "default", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "'--learn-prior'", ",", "type", "=", "boolean_argument", ",", "default", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "'--decode-only-past'", ",", "type", "=", "boolean_argument", ",", "default", "=", "False", ",", "\n", "help", "=", "'whether to decode future observations'", ")", "\n", "parser", ".", "add_argument", "(", "'--condition-policy-on-state'", ",", "type", "=", "boolean_argument", ",", "default", "=", "True", ",", "\n", "help", "=", "'after the encoder, add the env state to the latent space'", ")", "\n", "\n", "# --- OTHERS ---", "\n", "\n", "# logging, saving, evaluation", "\n", "parser", ".", "add_argument", "(", "'--log-interval'", ",", "type", "=", "int", ",", "default", "=", "100", ",", "\n", "help", "=", "'log interval, one log per n iterations (default: 20)'", ")", "\n", "parser", ".", "add_argument", "(", "'--save-interval'", ",", "type", "=", "int", ",", "default", "=", "500", ",", "\n", "help", "=", "'save models interval, every # iterations (default: 50)'", ")", "\n", "# parser.add_argument('--eval-interval', type=int, default=500,", "\n", "#                     help='eval interval, one eval per n updates (default: 500)')", "\n", "parser", ".", "add_argument", "(", "'--agent-log-dir'", ",", "default", "=", "'tmp/gym/'", ",", "help", "=", "'directory to save agent logs (default: /tmp/gym)'", ")", "\n", "parser", ".", "add_argument", "(", "'--results-log-dir'", ",", "default", "=", "None", ",", "help", "=", "'directory to save agent logs (default: ./data)'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--log-tensorboard'", ",", "type", "=", "boolean_argument", ",", "default", "=", "False", ",", "help", "=", "'whether to use tb logger'", ")", "\n", "\n", "# general settings", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "type", "=", "int", ",", "default", "=", "73", ",", "help", "=", "'random seed (default: 73)'", ")", "\n", "parser", ".", "add_argument", "(", "'--port'", ",", "type", "=", "int", ",", "default", "=", "8097", ",", "help", "=", "'port to run the server on (default: 8097)'", ")", "\n", "\n", "# gpu settings", "\n", "parser", ".", "add_argument", "(", "'--use-gpu'", ",", "type", "=", "boolean_argument", ",", "default", "=", "True", ",", "help", "=", "'whether to use gpu'", ")", "\n", "parser", ".", "add_argument", "(", "'--gpu-id'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "'gpu number to use'", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", "rest_args", ")", "\n", "\n", "args", ".", "cuda", "=", "torch", ".", "cuda", ".", "is_available", "(", ")", "\n", "\n", "return", "args", "\n", "", ""]], "home.repos.pwc.inspect_result.Rondorf_BOReL.online_config.args_ant_semicircle_sparse.get_args": [[7, 150], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "torch.cuda.is_available"], "function", ["None"], ["    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'--env-name'", ",", "default", "=", "'AntSemiCircleSparse-v0'", ")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "type", "=", "int", ",", "default", "=", "73", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--belief-rewards'", ",", "default", "=", "False", ",", "help", "=", "'use R+=E[R]'", ")", "\n", "parser", ".", "add_argument", "(", "'--num-belief-samples'", ",", "default", "=", "20", ")", "\n", "parser", ".", "add_argument", "(", "'--num-train-tasks'", ",", "default", "=", "80", ")", "\n", "parser", ".", "add_argument", "(", "'--num-eval-tasks'", ",", "default", "=", "20", ")", "\n", "parser", ".", "add_argument", "(", "'--hindsight-relabelling'", ",", "default", "=", "False", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--num-trajs-per-task'", ",", "type", "=", "int", ",", "default", "=", "None", ",", "\n", "help", "=", "'how many trajs per task to use. If None - use all'", ")", "\n", "parser", ".", "add_argument", "(", "'--meta-batch'", ",", "type", "=", "int", ",", "default", "=", "16", ",", "\n", "help", "=", "'number of tasks to average the gradient across'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--num-iters'", ",", "type", "=", "int", ",", "default", "=", "3000", ",", "help", "=", "'number meta-training iterates'", ")", "\n", "parser", ".", "add_argument", "(", "'--rl-updates-per-iter'", ",", "type", "=", "int", ",", "default", "=", "2000", ",", "help", "=", "'number of RL steps per iteration'", ")", "\n", "parser", ".", "add_argument", "(", "'--batch-size'", ",", "type", "=", "int", ",", "default", "=", "256", ",", "help", "=", "'number of transitions in RL batch (per task)'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--dqn-layers'", ",", "nargs", "=", "'+'", ",", "default", "=", "[", "256", ",", "256", "]", ")", "\n", "parser", ".", "add_argument", "(", "'--policy-layers'", ",", "nargs", "=", "'+'", ",", "default", "=", "[", "256", ",", "256", "]", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--actor-lr'", ",", "type", "=", "float", ",", "default", "=", "0.00003", ",", "help", "=", "'learning rate for actor (default: 3e-4)'", ")", "\n", "parser", ".", "add_argument", "(", "'--critic-lr'", ",", "type", "=", "float", ",", "default", "=", "0.0003", ",", "help", "=", "'learning rate for critic (default: 3e-4)'", ")", "\n", "parser", ".", "add_argument", "(", "'--clip-grad-value'", ",", "type", "=", "float", ",", "default", "=", "None", ",", "help", "=", "'clip gradients'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--entropy-alpha'", ",", "type", "=", "float", ",", "default", "=", "0.2", ",", "help", "=", "'Entropy coefficient'", ")", "\n", "parser", ".", "add_argument", "(", "'--automatic-entropy-tuning'", ",", "default", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "'--alpha-lr'", ",", "type", "=", "float", ",", "default", "=", "None", ",", "\n", "help", "=", "'learning rate for entropy coeff, if automatic tuning is True'", ")", "\n", "parser", ".", "add_argument", "(", "'--gamma'", ",", "type", "=", "float", ",", "default", "=", "0.99", ",", "help", "=", "'discount factor for rewards (default: 0.99)'", ")", "\n", "parser", ".", "add_argument", "(", "'--soft-target-tau'", ",", "type", "=", "float", ",", "default", "=", "0.005", ",", "\n", "help", "=", "'soft target network update (default: 5e-3)'", ")", "\n", "parser", ".", "add_argument", "(", "'--eval-deterministic'", ",", "default", "=", "True", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--transform-data-bamdp'", ",", "default", "=", "False", ",", "\n", "help", "=", "'If true - perform state relabelling to bamdp, else - use existing data'", ")", "\n", "\n", "# Ablation", "\n", "parser", ".", "add_argument", "(", "'--use-cql'", ",", "default", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "'--alpha-cql'", ",", "default", "=", "2.", ")", "\n", "\n", "# logging, saving, evaluation", "\n", "parser", ".", "add_argument", "(", "'--log-interval'", ",", "type", "=", "int", ",", "default", "=", "20", ",", "\n", "help", "=", "'log interval, one log per n iterations (default: 20)'", ")", "\n", "parser", ".", "add_argument", "(", "'--save-interval'", ",", "type", "=", "int", ",", "default", "=", "100", ",", "\n", "help", "=", "'save models interval, every # iterations (default: 100)'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--log-tensorboard'", ",", "default", "=", "True", ",", "help", "=", "'whether to use tb logger'", ")", "\n", "parser", ".", "add_argument", "(", "'--use-gpu'", ",", "default", "=", "True", ",", "help", "=", "'whether to use gpu'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--results-log-dir'", ",", "default", "=", "None", ",", "help", "=", "'directory to save agent logs (default: ./logs)'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--output-file-prefix'", ",", "default", "=", "'offline'", ")", "\n", "# parser.add_argument('--output-file-prefix', default='offline_no_relabel')", "\n", "# parser.add_argument('--output-file-prefix', default='offline_no_modify_init_state_dist')", "\n", "# parser.add_argument('--output-file-prefix', default='offline_no_relabel_no_modify_init_state_dist')", "\n", "# parser.add_argument('--output-file-prefix', default='offline_semi_modified_init_state_dist')", "\n", "# parser.add_argument('--output-file-prefix', default='offline_no_relabel_semi_modified_init_state_dist')", "\n", "\n", "parser", ".", "add_argument", "(", "'--relabelled-data-dir'", ",", "default", "=", "'data_bamdp'", ")", "\n", "# parser.add_argument('--relabelled-data-dir', default='data_bamdp_no_relabel')", "\n", "# parser.add_argument('--relabelled-data-dir', default='data_bamdp_no_modify_init_state_dist')", "\n", "# parser.add_argument('--relabelled-data-dir', default='data_bamdp_no_relabel_no_modify_init_state_dist')", "\n", "# parser.add_argument('--relabelled-data-dir', default='data_bamdp_semi_modified_init_state_dist')", "\n", "# parser.add_argument('--relabelled-data-dir', default='data_bamdp_no_relabel_semi_modified_init_state_dist')", "\n", "\n", "parser", ".", "add_argument", "(", "'--data-dir'", ",", "default", "=", "'data'", ")", "\n", "# parser.add_argument('--data-dir', default='data_no_modify_init_state_dist')", "\n", "# parser.add_argument('--data-dir', default='data_semi_modified_init_state_dist')", "\n", "\n", "parser", ".", "add_argument", "(", "'--main-data-dir'", ",", "default", "=", "'./batch_data'", ")", "\n", "parser", ".", "add_argument", "(", "'--vae-dir'", ",", "default", "=", "'./trained_vae'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--vae-model-name'", ",", "default", "=", "'relabel__17_07_17_19_31'", ")", "\n", "# parser.add_argument('--vae-model-name', default='no_relabel__18_07_13_28_23')", "\n", "# parser.add_argument('--vae-model-name', default='relabel_no_modify_init_state_dist__06_09_12_08_06')", "\n", "# parser.add_argument('--vae-model-name', default='no_relabel_no_modify_init_state_dist__06_09_15_40_40')", "\n", "# parser.add_argument('--vae-model-name', default='relabel_semi_modified_init_state_dist__14_09_16_21_25')", "\n", "# parser.add_argument('--vae-model-name', default='no_relabel_semi_modified_init_state_dist__')     # haven't trained such VAE", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", "rest_args", ")", "\n", "\n", "return", "args", "\n", "", ""]], "home.repos.pwc.inspect_result.Rondorf_BOReL.online_config.args_ant_semicircle.get_args": [[7, 150], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "torch.cuda.is_available"], "function", ["None"], ["def", "get_args", "(", "rest_args", ")", ":", "\n", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "\n", "# --- GENERAL ---", "\n", "parser", ".", "add_argument", "(", "'--output-file-prefix'", ",", "default", "=", "'sac'", ",", "help", "=", "'prefix to output file name'", ")", "\n", "parser", ".", "add_argument", "(", "'--load-model'", ",", "type", "=", "boolean_argument", ",", "default", "=", "False", ",", "help", "=", "'whether to load trained model'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--policy-buffer-size'", ",", "type", "=", "int", ",", "default", "=", "1e6", ",", "help", "=", "'buffer size for RL updates'", ")", "\n", "parser", ".", "add_argument", "(", "'--vae-buffer-size'", ",", "type", "=", "int", ",", "default", "=", "1e5", ",", "help", "=", "'buffer size for VAE updates'", ")", "\n", "# env", "\n", "parser", ".", "add_argument", "(", "'--env-name'", ",", "default", "=", "'AntSemiCircle-v0'", ",", "help", "=", "'environment to train on'", ")", "\n", "parser", ".", "add_argument", "(", "'--max-rollouts-per-task'", ",", "type", "=", "int", ",", "default", "=", "2", ")", "\n", "parser", ".", "add_argument", "(", "'--num-tasks'", ",", "type", "=", "int", ",", "default", "=", "100", ",", "help", "=", "'number of goals in environment'", ")", "\n", "# parser.add_argument('--num-tasks', type=int, default=2, help='number of goals in environment')", "\n", "parser", ".", "add_argument", "(", "'--num-train-tasks'", ",", "type", "=", "int", ",", "default", "=", "80", ",", "help", "=", "'number of tasks for train'", ")", "\n", "# parser.add_argument('--num-train-tasks', type=int, default=1, help='number of tasks for train')", "\n", "parser", ".", "add_argument", "(", "'--num-eval-tasks'", ",", "type", "=", "int", ",", "default", "=", "20", ",", "help", "=", "'number of tasks for evaluation'", ")", "\n", "# parser.add_argument('--num-eval-tasks', type=int, default=1, help='number of tasks for evaluation')", "\n", "\n", "# --- TRAINING ---", "\n", "parser", ".", "add_argument", "(", "'--fixed-latent-params'", ",", "type", "=", "boolean_argument", ",", "default", "=", "False", ",", "\n", "help", "=", "'whether to set fixed latent parameters to check capacity of RL'", ")", "# DEBUG only", "\n", "\n", "parser", ".", "add_argument", "(", "'--meta-batch'", ",", "type", "=", "int", ",", "default", "=", "8", ",", "help", "=", "'number of tasks to average the gradient across'", ")", "\n", "parser", ".", "add_argument", "(", "'--num-tasks-sample'", ",", "type", "=", "int", ",", "default", "=", "5", ",", "help", "=", "'number of tasks to collect rollouts per iter'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--num-iters'", ",", "type", "=", "int", ",", "default", "=", "1000", ",", "help", "=", "'number meta-training iterates'", ")", "\n", "parser", ".", "add_argument", "(", "'--rl-updates-per-iter'", ",", "type", "=", "int", ",", "default", "=", "2000", ",", "help", "=", "'number of RL steps per iteration'", ")", "\n", "parser", ".", "add_argument", "(", "'--vae-updates-per-iter'", ",", "type", "=", "int", ",", "default", "=", "20", ",", "help", "=", "'number of VAE steps per iteration'", ")", "\n", "parser", ".", "add_argument", "(", "'--num-rollouts-per-iter'", ",", "type", "=", "int", ",", "default", "=", "5", ",", "help", "=", "'number of rollouts to collect per task'", ")", "\n", "parser", ".", "add_argument", "(", "'--num-init-rollouts-pool'", ",", "type", "=", "int", ",", "default", "=", "5", ",", "\n", "help", "=", "'number of initial rollouts collect per task, before training begins'", ")", "\n", "parser", ".", "add_argument", "(", "'--batch-size'", ",", "type", "=", "int", ",", "default", "=", "256", ",", "help", "=", "'number of transitions in RL batch (per task)'", ")", "\n", "parser", ".", "add_argument", "(", "'--vae-batch-num-rollouts-per-task'", ",", "type", "=", "int", ",", "default", "=", "2", ",", "\n", "help", "=", "'number of rollouts in VAE batch (per task)'", ")", "\n", "parser", ".", "add_argument", "(", "'--vae-batch-num-elbo-terms'", ",", "type", "=", "int", ",", "default", "=", "None", ",", "\n", "help", "=", "'for how many timesteps to compute the ELBO; None uses all'", ")", "\n", "# --- POLICY ---", "\n", "\n", "# network", "\n", "parser", ".", "add_argument", "(", "'--dqn-layers'", ",", "nargs", "=", "'+'", ",", "default", "=", "[", "128", ",", "128", ",", "128", "]", ")", "\n", "parser", ".", "add_argument", "(", "'--policy-layers'", ",", "nargs", "=", "'+'", ",", "default", "=", "[", "128", ",", "128", ",", "128", "]", ")", "\n", "\n", "# algo", "\n", "parser", ".", "add_argument", "(", "'--policy'", ",", "type", "=", "str", ",", "default", "=", "'sac'", ",", "help", "=", "'choose: dqn, ddqn, sac'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--actor-lr'", ",", "type", "=", "float", ",", "default", "=", "0.0003", ",", "help", "=", "'learning rate for actor (default: 3e-4)'", ")", "\n", "parser", ".", "add_argument", "(", "'--critic-lr'", ",", "type", "=", "float", ",", "default", "=", "0.0003", ",", "help", "=", "'learning rate for critic (default: 3e-4)'", ")", "\n", "# parser.add_argument('--reward-scale', type=float, default=100.,", "\n", "#                     help='effectively like weighting the entropy of the policy by 1/reward_scale')", "\n", "parser", ".", "add_argument", "(", "'--entropy-alpha'", ",", "type", "=", "float", ",", "default", "=", "0.2", ",", "help", "=", "'Entropy coefficient'", ")", "\n", "parser", ".", "add_argument", "(", "'--automatic-entropy-tuning'", ",", "type", "=", "boolean_argument", ",", "default", "=", "False", ",", "\n", "help", "=", "'Whether to automatically tune entropy coefficient'", ")", "\n", "parser", ".", "add_argument", "(", "'--alpha-lr'", ",", "type", "=", "float", ",", "default", "=", "0.0003", ",", "\n", "help", "=", "'learning rate for entropy coeff, if automatic tuning is True (default: 3e-4)'", ")", "\n", "parser", ".", "add_argument", "(", "'--gamma'", ",", "type", "=", "float", ",", "default", "=", "0.99", ",", "help", "=", "'discount factor for rewards (default: 0.99)'", ")", "\n", "parser", ".", "add_argument", "(", "'--soft-target-tau'", ",", "type", "=", "float", ",", "default", "=", "0.005", ",", "\n", "help", "=", "'soft target network update (default: 5e-3)'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--switch-to-belief-reward'", ",", "type", "=", "int", ",", "default", "=", "None", ",", "\n", "help", "=", "'when to switch from R to R+; None is to not switch'", ")", "\n", "parser", ".", "add_argument", "(", "'--num-belief-samples'", ",", "type", "=", "int", ",", "default", "=", "40", ",", "\n", "help", "=", "'number of latent samples to estimate R+'", ")", "\n", "\n", "# --- VAE ---", "\n", "\n", "# general", "\n", "parser", ".", "add_argument", "(", "'--pretrain-len'", ",", "type", "=", "boolean_argument", ",", "default", "=", "0", ",", "help", "=", "'num. of vae updates'", ")", "\n", "parser", ".", "add_argument", "(", "'--vae-lr'", ",", "type", "=", "float", ",", "default", "=", "0.0003", ",", "help", "=", "'learning rate for VAE (default: 3e-4)'", ")", "\n", "parser", ".", "add_argument", "(", "'--kl-weight'", ",", "type", "=", "float", ",", "default", "=", "1.", ",", "help", "=", "'weight for the KL term'", ")", "\n", "\n", "# - encoder", "\n", "parser", ".", "add_argument", "(", "'--encoder_type'", ",", "type", "=", "str", ",", "default", "=", "'rnn'", ",", "help", "=", "'choose: rnn, tcn, deepset'", ")", "\n", "parser", ".", "add_argument", "(", "'--task-embedding-size'", ",", "type", "=", "int", ",", "default", "=", "5", ",", "help", "=", "'dimensionality of latent space'", ")", "\n", "parser", ".", "add_argument", "(", "'--aggregator-hidden-size'", ",", "type", "=", "int", ",", "default", "=", "128", ",", "\n", "help", "=", "'dimensionality of hidden state of the rnn'", ")", "\n", "parser", ".", "add_argument", "(", "'--layers-before-aggregator'", ",", "nargs", "=", "'+'", ",", "type", "=", "int", ",", "default", "=", "[", "]", ")", "\n", "parser", ".", "add_argument", "(", "'--layers-after-aggregator'", ",", "nargs", "=", "'+'", ",", "type", "=", "int", ",", "default", "=", "[", "]", ")", "\n", "parser", ".", "add_argument", "(", "'--action-embedding-size'", ",", "type", "=", "int", ",", "default", "=", "16", ")", "\n", "parser", ".", "add_argument", "(", "'--state-embedding-size'", ",", "type", "=", "int", ",", "default", "=", "32", ")", "\n", "parser", ".", "add_argument", "(", "'--reward-embedding-size'", ",", "type", "=", "int", ",", "default", "=", "16", ")", "\n", "\n", "# - decoder: rewards", "\n", "parser", ".", "add_argument", "(", "'--decode-reward'", ",", "type", "=", "boolean_argument", ",", "default", "=", "True", ",", "help", "=", "'use reward decoder'", ")", "\n", "parser", ".", "add_argument", "(", "'--input-prev-state'", ",", "type", "=", "boolean_argument", ",", "default", "=", "True", ",", "help", "=", "'use prev state for rew pred'", ")", "\n", "parser", ".", "add_argument", "(", "'--input-action'", ",", "type", "=", "boolean_argument", ",", "default", "=", "True", ",", "help", "=", "'use prev action for rew pred'", ")", "\n", "parser", ".", "add_argument", "(", "'--reward-decoder-layers'", ",", "nargs", "=", "'+'", ",", "type", "=", "int", ",", "default", "=", "[", "64", ",", "32", "]", ")", "\n", "parser", ".", "add_argument", "(", "'--rew-pred-type'", ",", "type", "=", "str", ",", "default", "=", "'deterministic'", ",", "\n", "help", "=", "'choose from: bernoulli, gaussian, deterministic'", ")", "\n", "parser", ".", "add_argument", "(", "'--multihead-for-reward'", ",", "type", "=", "boolean_argument", ",", "default", "=", "False", ",", "\n", "help", "=", "'one head per reward pred (i.e. per state)'", ")", "\n", "parser", ".", "add_argument", "(", "'--rew-loss-coeff'", ",", "type", "=", "float", ",", "default", "=", "1.0", ",", "help", "=", "'weight for reward loss'", ")", "\n", "\n", "# - decoder: state transitions", "\n", "parser", ".", "add_argument", "(", "'--decode-state'", ",", "type", "=", "boolean_argument", ",", "default", "=", "False", ",", "help", "=", "'use state decoder'", ")", "\n", "parser", ".", "add_argument", "(", "'--state-loss-coeff'", ",", "type", "=", "float", ",", "default", "=", "1.0", ",", "help", "=", "'weight for state loss (vs reward loss)'", ")", "\n", "\n", "# - decoder: ground-truth task (\"varibad oracle\", after Humplik et al. 2019)", "\n", "parser", ".", "add_argument", "(", "'--decode-task'", ",", "type", "=", "boolean_argument", ",", "default", "=", "False", ",", "help", "=", "'use state decoder'", ")", "\n", "parser", ".", "add_argument", "(", "'--task-loss-coeff'", ",", "type", "=", "float", ",", "default", "=", "1.0", ",", "\n", "help", "=", "'weight for task decoding loss (vs reward loss)'", ")", "\n", "\n", "# --- ABLATIONS ---", "\n", "\n", "parser", ".", "add_argument", "(", "'--eval-deterministic'", ",", "type", "=", "boolean_argument", ",", "default", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "'--disable-decoder'", ",", "type", "=", "boolean_argument", ",", "default", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "'--disable-stochasticity-in-latent'", ",", "type", "=", "boolean_argument", ",", "default", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "'--sample-embeddings'", ",", "type", "=", "boolean_argument", ",", "default", "=", "False", ",", "\n", "help", "=", "'sample the embedding (otherwise: pass mean)'", ")", "\n", "parser", ".", "add_argument", "(", "'--vae-loss-coeff'", ",", "type", "=", "float", ",", "default", "=", "1.0", ",", "help", "=", "'weight for VAE loss (vs RL loss)'", ")", "\n", "parser", ".", "add_argument", "(", "'--kl-to-gauss-prior'", ",", "type", "=", "boolean_argument", ",", "default", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "'--learn-prior'", ",", "type", "=", "boolean_argument", ",", "default", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "'--decode-only-past'", ",", "type", "=", "boolean_argument", ",", "default", "=", "False", ",", "\n", "help", "=", "'whether to decode future observations'", ")", "\n", "parser", ".", "add_argument", "(", "'--condition-policy-on-state'", ",", "type", "=", "boolean_argument", ",", "default", "=", "True", ",", "\n", "help", "=", "'after the encoder, add the env state to the latent space'", ")", "\n", "# --- OTHERS ---", "\n", "\n", "# logging, saving, evaluation", "\n", "parser", ".", "add_argument", "(", "'--log-interval'", ",", "type", "=", "int", ",", "default", "=", "10", ",", "\n", "help", "=", "'log interval, one log per n iterations (default: 10)'", ")", "\n", "parser", ".", "add_argument", "(", "'--save-interval'", ",", "type", "=", "int", ",", "default", "=", "100", ",", "\n", "help", "=", "'save models interval, every # iterations (default: 100)'", ")", "\n", "# parser.add_argument('--eval-interval', type=int, default=500,", "\n", "#                     help='eval interval, one eval per n updates (default: 500)')", "\n", "parser", ".", "add_argument", "(", "'--agent-log-dir'", ",", "default", "=", "'tmp/gym/'", ",", "help", "=", "'directory to save agent logs (default: /tmp/gym)'", ")", "\n", "parser", ".", "add_argument", "(", "'--results-log-dir'", ",", "default", "=", "None", ",", "help", "=", "'directory to save agent logs (default: ./data)'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--log-tensorboard'", ",", "type", "=", "boolean_argument", ",", "default", "=", "True", ",", "help", "=", "'whether to use tb logger'", ")", "\n", "\n", "# general settings", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "type", "=", "int", ",", "default", "=", "73", ",", "help", "=", "'random seed (default: 73)'", ")", "\n", "parser", ".", "add_argument", "(", "'--port'", ",", "type", "=", "int", ",", "default", "=", "8097", ",", "help", "=", "'port to run the server on (default: 8097)'", ")", "\n", "\n", "# gpu settings", "\n", "parser", ".", "add_argument", "(", "'--use-gpu'", ",", "type", "=", "boolean_argument", ",", "default", "=", "True", ",", "help", "=", "'whether to use gpu'", ")", "\n", "parser", ".", "add_argument", "(", "'--gpu-id'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "'gpu number to use'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", "rest_args", ")", "\n", "\n", "args", ".", "cuda", "=", "torch", ".", "cuda", ".", "is_available", "(", ")", "\n", "\n", "return", "args", "\n", "", ""]], "home.repos.pwc.inspect_result.Rondorf_BOReL.online_config.args_point_robot.get_args": [[6, 142], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "torch.cuda.is_available"], "function", ["None"], ["def", "get_args", "(", "rest_args", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "\n", "# --- GENERAL ---", "\n", "parser", ".", "add_argument", "(", "'--output-file-prefix'", ",", "default", "=", "'sac'", ",", "help", "=", "'prefix to output file name'", ")", "\n", "parser", ".", "add_argument", "(", "'--load-model'", ",", "type", "=", "boolean_argument", ",", "default", "=", "False", ",", "help", "=", "'whether to load trained model'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--policy-buffer-size'", ",", "type", "=", "int", ",", "default", "=", "1e6", ",", "help", "=", "'buffer size for RL updates'", ")", "\n", "parser", ".", "add_argument", "(", "'--vae-buffer-size'", ",", "type", "=", "int", ",", "default", "=", "1e5", ",", "help", "=", "'buffer size for VAE updates'", ")", "\n", "# --- ENV ---", "\n", "parser", ".", "add_argument", "(", "'--env-name'", ",", "default", "=", "'PointRobot-v0'", ",", "help", "=", "'environment to train on'", ")", "\n", "parser", ".", "add_argument", "(", "'--max-rollouts-per-task'", ",", "type", "=", "int", ",", "default", "=", "3", ")", "\n", "parser", ".", "add_argument", "(", "'--is-sparse-env'", ",", "type", "=", "boolean_argument", ",", "default", "=", "False", ",", "help", "=", "'rewards are 0. or -0.1'", ")", "\n", "parser", ".", "add_argument", "(", "'--num-tasks'", ",", "type", "=", "int", ",", "default", "=", "25", ",", "help", "=", "'number of goals in environment'", ")", "\n", "parser", ".", "add_argument", "(", "'--num-train-tasks'", ",", "type", "=", "int", ",", "default", "=", "20", ",", "help", "=", "'number of tasks for train'", ")", "\n", "parser", ".", "add_argument", "(", "'--num-eval-tasks'", ",", "type", "=", "int", ",", "default", "=", "5", ",", "help", "=", "'number of tasks for evaluation'", ")", "\n", "\n", "# --- TRAINING ---", "\n", "parser", ".", "add_argument", "(", "'--fixed-latent-params'", ",", "type", "=", "boolean_argument", ",", "default", "=", "False", ",", "\n", "help", "=", "'whether to set fixed latent parameters to check capacity of RL'", ")", "# DEBUG only", "\n", "\n", "parser", ".", "add_argument", "(", "'--meta-batch'", ",", "type", "=", "int", ",", "default", "=", "16", ",", "help", "=", "'number of tasks to average the gradient across'", ")", "\n", "parser", ".", "add_argument", "(", "'--num-tasks-sample'", ",", "type", "=", "int", ",", "default", "=", "5", ",", "help", "=", "'number of tasks to collect rollouts per iter'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--num-iters'", ",", "type", "=", "int", ",", "default", "=", "5000", ",", "help", "=", "'number meta-training iterates'", ")", "\n", "parser", ".", "add_argument", "(", "'--rl-updates-per-iter'", ",", "type", "=", "int", ",", "default", "=", "500", ",", "help", "=", "'number of RL steps per iteration'", ")", "\n", "parser", ".", "add_argument", "(", "'--vae-updates-per-iter'", ",", "type", "=", "int", ",", "default", "=", "50", ",", "help", "=", "'number of VAE steps per iteration'", ")", "\n", "parser", ".", "add_argument", "(", "'--num-rollouts-per-iter'", ",", "type", "=", "int", ",", "default", "=", "5", ",", "help", "=", "'number of rollouts to collect per task'", ")", "\n", "parser", ".", "add_argument", "(", "'--num-init-rollouts-pool'", ",", "type", "=", "int", ",", "default", "=", "20", ",", "\n", "help", "=", "'number of initial rollouts collect per task, before training begins'", ")", "\n", "parser", ".", "add_argument", "(", "'--batch-size'", ",", "type", "=", "int", ",", "default", "=", "256", ",", "help", "=", "'number of transitions in RL batch (per task)'", ")", "\n", "parser", ".", "add_argument", "(", "'--vae-batch-num-rollouts-per-task'", ",", "type", "=", "int", ",", "default", "=", "2", ",", "\n", "help", "=", "'number of rollouts in VAE batch (per task)'", ")", "\n", "parser", ".", "add_argument", "(", "'--vae-batch-num-elbo-terms'", ",", "type", "=", "int", ",", "default", "=", "None", ",", "\n", "help", "=", "'for how many timesteps to compute the ELBO; None uses all'", ")", "\n", "\n", "# --- POLICY ---", "\n", "\n", "# network", "\n", "parser", ".", "add_argument", "(", "'--dqn-layers'", ",", "nargs", "=", "'+'", ",", "default", "=", "[", "100", ",", "100", "]", ")", "\n", "parser", ".", "add_argument", "(", "'--policy-layers'", ",", "nargs", "=", "'+'", ",", "default", "=", "[", "100", ",", "100", "]", ")", "\n", "\n", "# algo", "\n", "parser", ".", "add_argument", "(", "'--policy'", ",", "type", "=", "str", ",", "default", "=", "'sac'", ",", "help", "=", "'choose: dqn, ddqn, sac'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--actor-lr'", ",", "type", "=", "float", ",", "default", "=", "0.00007", ",", "help", "=", "'learning rate for actor (default: 3e-4)'", ")", "\n", "parser", ".", "add_argument", "(", "'--critic-lr'", ",", "type", "=", "float", ",", "default", "=", "0.00007", ",", "help", "=", "'learning rate for critic (default: 3e-4)'", ")", "\n", "parser", ".", "add_argument", "(", "'--entropy-alpha'", ",", "type", "=", "float", ",", "default", "=", "0.01", ",", "help", "=", "'Entropy coefficient'", ")", "\n", "parser", ".", "add_argument", "(", "'--automatic-entropy-tuning'", ",", "type", "=", "boolean_argument", ",", "default", "=", "False", ",", "\n", "help", "=", "'Whether to automatically tune entropy coefficient'", ")", "\n", "parser", ".", "add_argument", "(", "'--alpha-lr'", ",", "type", "=", "float", ",", "default", "=", "0.00007", ",", "\n", "help", "=", "'learning rate for entropy coeff, if automatic tuning is True (default: 3e-4)'", ")", "\n", "parser", ".", "add_argument", "(", "'--gamma'", ",", "type", "=", "float", ",", "default", "=", "0.99", ",", "help", "=", "'discount factor for rewards (default: 0.99)'", ")", "\n", "parser", ".", "add_argument", "(", "'--soft-target-tau'", ",", "type", "=", "float", ",", "default", "=", "0.005", ",", "help", "=", "'soft target network update (default: 5e-3)'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--switch-to-belief-reward'", ",", "type", "=", "int", ",", "default", "=", "None", ",", "\n", "help", "=", "'when to switch from R to R+; None is to not switch'", ")", "\n", "parser", ".", "add_argument", "(", "'--num-belief-samples'", ",", "type", "=", "int", ",", "default", "=", "40", ",", "\n", "help", "=", "'number of latent samples to estimate R+'", ")", "\n", "\n", "# --- VAE TRAINING ---", "\n", "\n", "# general", "\n", "parser", ".", "add_argument", "(", "'--train-vae'", ",", "type", "=", "boolean_argument", ",", "default", "=", "True", ",", "help", "=", "'whether to update vae'", ")", "\n", "parser", ".", "add_argument", "(", "'--vae-lr'", ",", "type", "=", "float", ",", "default", "=", "0.0003", ",", "help", "=", "'learning rate for VAE (default: 3e-4)'", ")", "\n", "parser", ".", "add_argument", "(", "'--kl-weight'", ",", "type", "=", "float", ",", "default", "=", "1.", ",", "help", "=", "'weight for the KL term'", ")", "\n", "\n", "# - encoder", "\n", "parser", ".", "add_argument", "(", "'--encoder_type'", ",", "type", "=", "str", ",", "default", "=", "'rnn'", ",", "help", "=", "'choose: rnn, tcn, deepset'", ")", "\n", "parser", ".", "add_argument", "(", "'--task-embedding-size'", ",", "type", "=", "int", ",", "default", "=", "5", ",", "help", "=", "'dimensionality of latent space'", ")", "\n", "parser", ".", "add_argument", "(", "'--aggregator-hidden-size'", ",", "type", "=", "int", ",", "default", "=", "64", ",", "\n", "help", "=", "'dimensionality of hidden state of the rnn'", ")", "\n", "parser", ".", "add_argument", "(", "'--layers-before-aggregator'", ",", "nargs", "=", "'+'", ",", "type", "=", "int", ",", "default", "=", "[", "]", ")", "\n", "parser", ".", "add_argument", "(", "'--layers-after-aggregator'", ",", "nargs", "=", "'+'", ",", "type", "=", "int", ",", "default", "=", "[", "]", ")", "\n", "parser", ".", "add_argument", "(", "'--action-embedding-size'", ",", "type", "=", "int", ",", "default", "=", "0", ")", "\n", "parser", ".", "add_argument", "(", "'--state-embedding-size'", ",", "type", "=", "int", ",", "default", "=", "32", ")", "\n", "parser", ".", "add_argument", "(", "'--reward-embedding-size'", ",", "type", "=", "int", ",", "default", "=", "8", ")", "\n", "\n", "# - decoder: rewards", "\n", "parser", ".", "add_argument", "(", "'--decode-reward'", ",", "type", "=", "boolean_argument", ",", "default", "=", "True", ",", "help", "=", "'use reward decoder'", ")", "\n", "parser", ".", "add_argument", "(", "'--input-prev-state'", ",", "type", "=", "boolean_argument", ",", "default", "=", "False", ",", "help", "=", "'use prev state for rew pred'", ")", "\n", "parser", ".", "add_argument", "(", "'--input-action'", ",", "type", "=", "boolean_argument", ",", "default", "=", "False", ",", "help", "=", "'use prev action for rew pred'", ")", "\n", "parser", ".", "add_argument", "(", "'--reward-decoder-layers'", ",", "nargs", "=", "'+'", ",", "type", "=", "int", ",", "default", "=", "[", "32", ",", "32", "]", ")", "\n", "parser", ".", "add_argument", "(", "'--rew-pred-type'", ",", "type", "=", "str", ",", "default", "=", "'deterministic'", ",", "\n", "help", "=", "'choose from: bernoulli, gaussian, deterministic'", ")", "\n", "parser", ".", "add_argument", "(", "'--multihead-for-reward'", ",", "type", "=", "boolean_argument", ",", "default", "=", "False", ",", "\n", "help", "=", "'one head per reward pred (i.e. per state)'", ")", "\n", "parser", ".", "add_argument", "(", "'--rew-loss-coeff'", ",", "type", "=", "float", ",", "default", "=", "1.0", ",", "help", "=", "'weight for reward loss'", ")", "\n", "\n", "# - decoder: state transitions", "\n", "parser", ".", "add_argument", "(", "'--decode-state'", ",", "type", "=", "boolean_argument", ",", "default", "=", "False", ",", "help", "=", "'use state decoder'", ")", "\n", "parser", ".", "add_argument", "(", "'--state-loss-coeff'", ",", "type", "=", "float", ",", "default", "=", "1.0", ",", "help", "=", "'weight for state loss (vs reward loss)'", ")", "\n", "\n", "# - decoder: ground-truth task (\"varibad oracle\", after Humplik et al. 2019)", "\n", "parser", ".", "add_argument", "(", "'--decode-task'", ",", "type", "=", "boolean_argument", ",", "default", "=", "False", ",", "help", "=", "'use state decoder'", ")", "\n", "parser", ".", "add_argument", "(", "'--task-loss-coeff'", ",", "type", "=", "float", ",", "default", "=", "1.0", ",", "\n", "help", "=", "'weight for task decoding loss (vs reward loss)'", ")", "\n", "\n", "# --- ABLATIONS ---", "\n", "\n", "parser", ".", "add_argument", "(", "'--eval-deterministic'", ",", "type", "=", "boolean_argument", ",", "default", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "'--disable-decoder'", ",", "type", "=", "boolean_argument", ",", "default", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "'--disable-stochasticity-in-latent'", ",", "type", "=", "boolean_argument", ",", "default", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "'--sample-embeddings'", ",", "type", "=", "boolean_argument", ",", "default", "=", "False", ",", "\n", "help", "=", "'sample the embedding (otherwise: pass mean)'", ")", "\n", "parser", ".", "add_argument", "(", "'--vae-loss-coeff'", ",", "type", "=", "float", ",", "default", "=", "1.0", ",", "help", "=", "'weight for VAE loss (vs RL loss)'", ")", "\n", "parser", ".", "add_argument", "(", "'--kl-to-gauss-prior'", ",", "type", "=", "boolean_argument", ",", "default", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "'--learn-prior'", ",", "type", "=", "boolean_argument", ",", "default", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "'--decode-only-past'", ",", "type", "=", "boolean_argument", ",", "default", "=", "False", ",", "\n", "help", "=", "'whether to decode future observations'", ")", "\n", "parser", ".", "add_argument", "(", "'--condition-policy-on-state'", ",", "type", "=", "boolean_argument", ",", "default", "=", "True", ",", "\n", "help", "=", "'after the encoder, add the env state to the latent space'", ")", "\n", "\n", "# --- OTHERS ---", "\n", "\n", "# logging, saving, evaluation", "\n", "parser", ".", "add_argument", "(", "'--log-interval'", ",", "type", "=", "int", ",", "default", "=", "20", ",", "\n", "help", "=", "'log interval, one log per n iterations (default: 20)'", ")", "\n", "parser", ".", "add_argument", "(", "'--save-interval'", ",", "type", "=", "int", ",", "default", "=", "100", ",", "\n", "help", "=", "'save models interval, every # iterations (default: 50)'", ")", "\n", "parser", ".", "add_argument", "(", "'--agent-log-dir'", ",", "default", "=", "'tmp/gym/'", ",", "help", "=", "'directory to save agent logs (default: /tmp/gym)'", ")", "\n", "parser", ".", "add_argument", "(", "'--results-log-dir'", ",", "default", "=", "None", ",", "help", "=", "'directory to save agent logs (default: ./data)'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--log-tensorboard'", ",", "type", "=", "boolean_argument", ",", "default", "=", "True", ",", "help", "=", "'whether to use tb logger'", ")", "\n", "\n", "# general settings", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "type", "=", "int", ",", "default", "=", "73", ",", "help", "=", "'random seed (default: 73)'", ")", "\n", "parser", ".", "add_argument", "(", "'--port'", ",", "type", "=", "int", ",", "default", "=", "8097", ",", "help", "=", "'port to run the server on (default: 8097)'", ")", "\n", "\n", "# gpu settings", "\n", "parser", ".", "add_argument", "(", "'--use-gpu'", ",", "type", "=", "boolean_argument", ",", "default", "=", "True", ",", "help", "=", "'whether to use gpu'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", "rest_args", ")", "\n", "\n", "args", ".", "cuda", "=", "torch", ".", "cuda", ".", "is_available", "(", ")", "\n", "\n", "return", "args", "\n", "", ""]], "home.repos.pwc.inspect_result.Rondorf_BOReL.online_config.args_ant_dir.get_args": [[7, 150], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "torch.cuda.is_available"], "function", ["None"], ["def", "get_args", "(", "rest_args", ")", ":", "\n", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "\n", "# --- GENERAL ---", "\n", "parser", ".", "add_argument", "(", "'--output-file-prefix'", ",", "default", "=", "'sac'", ",", "help", "=", "'prefix to output file name'", ")", "\n", "parser", ".", "add_argument", "(", "'--load-model'", ",", "type", "=", "boolean_argument", ",", "default", "=", "False", ",", "help", "=", "'whether to load trained model'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--policy-buffer-size'", ",", "type", "=", "int", ",", "default", "=", "1e6", ",", "help", "=", "'buffer size for RL updates'", ")", "\n", "parser", ".", "add_argument", "(", "'--vae-buffer-size'", ",", "type", "=", "int", ",", "default", "=", "1e5", ",", "help", "=", "'buffer size for VAE updates'", ")", "\n", "# env", "\n", "parser", ".", "add_argument", "(", "'--env-name'", ",", "default", "=", "'AntDir-v0'", ",", "help", "=", "'environment to train on'", ")", "\n", "parser", ".", "add_argument", "(", "'--max-rollouts-per-task'", ",", "type", "=", "int", ",", "default", "=", "2", ")", "\n", "parser", ".", "add_argument", "(", "'--num-tasks'", ",", "type", "=", "int", ",", "default", "=", "100", ",", "help", "=", "'number of goals in environment'", ")", "\n", "# parser.add_argument('--num-tasks', type=int, default=2, help='number of goals in environment')", "\n", "parser", ".", "add_argument", "(", "'--num-train-tasks'", ",", "type", "=", "int", ",", "default", "=", "80", ",", "help", "=", "'number of tasks for train'", ")", "\n", "# parser.add_argument('--num-train-tasks', type=int, default=1, help='number of tasks for train')", "\n", "parser", ".", "add_argument", "(", "'--num-eval-tasks'", ",", "type", "=", "int", ",", "default", "=", "20", ",", "help", "=", "'number of tasks for evaluation'", ")", "\n", "# parser.add_argument('--num-eval-tasks', type=int, default=1, help='number of tasks for evaluation')", "\n", "\n", "# --- TRAINING ---", "\n", "parser", ".", "add_argument", "(", "'--fixed-latent-params'", ",", "type", "=", "boolean_argument", ",", "default", "=", "False", ",", "\n", "help", "=", "'whether to set fixed latent parameters to check capacity of RL'", ")", "# DEBUG only", "\n", "\n", "parser", ".", "add_argument", "(", "'--meta-batch'", ",", "type", "=", "int", ",", "default", "=", "16", ",", "help", "=", "'number of tasks to average the gradient across'", ")", "\n", "parser", ".", "add_argument", "(", "'--num-tasks-sample'", ",", "type", "=", "int", ",", "default", "=", "5", ",", "help", "=", "'number of tasks to collect rollouts per iter'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--num-iters'", ",", "type", "=", "int", ",", "default", "=", "1000", ",", "help", "=", "'number meta-training iterates'", ")", "\n", "parser", ".", "add_argument", "(", "'--rl-updates-per-iter'", ",", "type", "=", "int", ",", "default", "=", "2000", ",", "help", "=", "'number of RL steps per iteration'", ")", "\n", "parser", ".", "add_argument", "(", "'--vae-updates-per-iter'", ",", "type", "=", "int", ",", "default", "=", "20", ",", "help", "=", "'number of VAE steps per iteration'", ")", "\n", "parser", ".", "add_argument", "(", "'--num-rollouts-per-iter'", ",", "type", "=", "int", ",", "default", "=", "5", ",", "help", "=", "'number of rollouts to collect per task'", ")", "\n", "parser", ".", "add_argument", "(", "'--num-init-rollouts-pool'", ",", "type", "=", "int", ",", "default", "=", "5", ",", "\n", "help", "=", "'number of initial rollouts collect per task, before training begins'", ")", "\n", "parser", ".", "add_argument", "(", "'--batch-size'", ",", "type", "=", "int", ",", "default", "=", "256", ",", "help", "=", "'number of transitions in RL batch (per task)'", ")", "\n", "parser", ".", "add_argument", "(", "'--vae-batch-num-rollouts-per-task'", ",", "type", "=", "int", ",", "default", "=", "2", ",", "\n", "help", "=", "'number of rollouts in VAE batch (per task)'", ")", "\n", "parser", ".", "add_argument", "(", "'--vae-batch-num-elbo-terms'", ",", "type", "=", "int", ",", "default", "=", "None", ",", "\n", "help", "=", "'for how many timesteps to compute the ELBO; None uses all'", ")", "\n", "# --- POLICY ---", "\n", "\n", "# network", "\n", "parser", ".", "add_argument", "(", "'--dqn-layers'", ",", "nargs", "=", "'+'", ",", "default", "=", "[", "128", ",", "128", ",", "128", "]", ")", "\n", "parser", ".", "add_argument", "(", "'--policy-layers'", ",", "nargs", "=", "'+'", ",", "default", "=", "[", "128", ",", "128", ",", "128", "]", ")", "\n", "\n", "# algo", "\n", "parser", ".", "add_argument", "(", "'--policy'", ",", "type", "=", "str", ",", "default", "=", "'sac'", ",", "help", "=", "'choose: dqn, ddqn, sac'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--actor-lr'", ",", "type", "=", "float", ",", "default", "=", "0.0003", ",", "help", "=", "'learning rate for actor (default: 3e-4)'", ")", "\n", "parser", ".", "add_argument", "(", "'--critic-lr'", ",", "type", "=", "float", ",", "default", "=", "0.0003", ",", "help", "=", "'learning rate for critic (default: 3e-4)'", ")", "\n", "# parser.add_argument('--reward-scale', type=float, default=100.,", "\n", "#                     help='effectively like weighting the entropy of the policy by 1/reward_scale')", "\n", "parser", ".", "add_argument", "(", "'--entropy-alpha'", ",", "type", "=", "float", ",", "default", "=", "0.2", ",", "help", "=", "'Entropy coefficient'", ")", "\n", "parser", ".", "add_argument", "(", "'--automatic-entropy-tuning'", ",", "type", "=", "boolean_argument", ",", "default", "=", "False", ",", "\n", "help", "=", "'Whether to automatically tune entropy coefficient'", ")", "\n", "parser", ".", "add_argument", "(", "'--alpha-lr'", ",", "type", "=", "float", ",", "default", "=", "0.0003", ",", "\n", "help", "=", "'learning rate for entropy coeff, if automatic tuning is True (default: 3e-4)'", ")", "\n", "parser", ".", "add_argument", "(", "'--gamma'", ",", "type", "=", "float", ",", "default", "=", "0.99", ",", "help", "=", "'discount factor for rewards (default: 0.99)'", ")", "\n", "parser", ".", "add_argument", "(", "'--soft-target-tau'", ",", "type", "=", "float", ",", "default", "=", "0.005", ",", "\n", "help", "=", "'soft target network update (default: 5e-3)'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--switch-to-belief-reward'", ",", "type", "=", "int", ",", "default", "=", "None", ",", "\n", "help", "=", "'when to switch from R to R+; None is to not switch'", ")", "\n", "parser", ".", "add_argument", "(", "'--num-belief-samples'", ",", "type", "=", "int", ",", "default", "=", "40", ",", "\n", "help", "=", "'number of latent samples to estimate R+'", ")", "\n", "\n", "# --- VAE ---", "\n", "\n", "# general", "\n", "parser", ".", "add_argument", "(", "'--pretrain-len'", ",", "type", "=", "boolean_argument", ",", "default", "=", "0", ",", "help", "=", "'num. of vae updates'", ")", "\n", "parser", ".", "add_argument", "(", "'--vae-lr'", ",", "type", "=", "float", ",", "default", "=", "0.0003", ",", "help", "=", "'learning rate for VAE (default: 3e-4)'", ")", "\n", "parser", ".", "add_argument", "(", "'--kl-weight'", ",", "type", "=", "float", ",", "default", "=", "1.", ",", "help", "=", "'weight for the KL term'", ")", "\n", "\n", "# - encoder", "\n", "parser", ".", "add_argument", "(", "'--encoder_type'", ",", "type", "=", "str", ",", "default", "=", "'rnn'", ",", "help", "=", "'choose: rnn, tcn, deepset'", ")", "\n", "parser", ".", "add_argument", "(", "'--task-embedding-size'", ",", "type", "=", "int", ",", "default", "=", "5", ",", "help", "=", "'dimensionality of latent space'", ")", "\n", "parser", ".", "add_argument", "(", "'--aggregator-hidden-size'", ",", "type", "=", "int", ",", "default", "=", "128", ",", "\n", "help", "=", "'dimensionality of hidden state of the rnn'", ")", "\n", "parser", ".", "add_argument", "(", "'--layers-before-aggregator'", ",", "nargs", "=", "'+'", ",", "type", "=", "int", ",", "default", "=", "[", "]", ")", "\n", "parser", ".", "add_argument", "(", "'--layers-after-aggregator'", ",", "nargs", "=", "'+'", ",", "type", "=", "int", ",", "default", "=", "[", "]", ")", "\n", "parser", ".", "add_argument", "(", "'--action-embedding-size'", ",", "type", "=", "int", ",", "default", "=", "16", ")", "\n", "parser", ".", "add_argument", "(", "'--state-embedding-size'", ",", "type", "=", "int", ",", "default", "=", "32", ")", "\n", "parser", ".", "add_argument", "(", "'--reward-embedding-size'", ",", "type", "=", "int", ",", "default", "=", "16", ")", "\n", "\n", "# - decoder: rewards", "\n", "parser", ".", "add_argument", "(", "'--decode-reward'", ",", "type", "=", "boolean_argument", ",", "default", "=", "True", ",", "help", "=", "'use reward decoder'", ")", "\n", "parser", ".", "add_argument", "(", "'--input-prev-state'", ",", "type", "=", "boolean_argument", ",", "default", "=", "True", ",", "help", "=", "'use prev state for rew pred'", ")", "\n", "parser", ".", "add_argument", "(", "'--input-action'", ",", "type", "=", "boolean_argument", ",", "default", "=", "True", ",", "help", "=", "'use prev action for rew pred'", ")", "\n", "parser", ".", "add_argument", "(", "'--reward-decoder-layers'", ",", "nargs", "=", "'+'", ",", "type", "=", "int", ",", "default", "=", "[", "64", ",", "32", "]", ")", "\n", "parser", ".", "add_argument", "(", "'--rew-pred-type'", ",", "type", "=", "str", ",", "default", "=", "'deterministic'", ",", "\n", "help", "=", "'choose from: bernoulli, gaussian, deterministic'", ")", "\n", "parser", ".", "add_argument", "(", "'--multihead-for-reward'", ",", "type", "=", "boolean_argument", ",", "default", "=", "False", ",", "\n", "help", "=", "'one head per reward pred (i.e. per state)'", ")", "\n", "parser", ".", "add_argument", "(", "'--rew-loss-coeff'", ",", "type", "=", "float", ",", "default", "=", "1.0", ",", "help", "=", "'weight for reward loss'", ")", "\n", "\n", "# - decoder: state transitions", "\n", "parser", ".", "add_argument", "(", "'--decode-state'", ",", "type", "=", "boolean_argument", ",", "default", "=", "False", ",", "help", "=", "'use state decoder'", ")", "\n", "parser", ".", "add_argument", "(", "'--state-loss-coeff'", ",", "type", "=", "float", ",", "default", "=", "1.0", ",", "help", "=", "'weight for state loss (vs reward loss)'", ")", "\n", "\n", "# - decoder: ground-truth task (\"varibad oracle\", after Humplik et al. 2019)", "\n", "parser", ".", "add_argument", "(", "'--decode-task'", ",", "type", "=", "boolean_argument", ",", "default", "=", "False", ",", "help", "=", "'use state decoder'", ")", "\n", "parser", ".", "add_argument", "(", "'--task-loss-coeff'", ",", "type", "=", "float", ",", "default", "=", "1.0", ",", "\n", "help", "=", "'weight for task decoding loss (vs reward loss)'", ")", "\n", "\n", "# --- ABLATIONS ---", "\n", "\n", "parser", ".", "add_argument", "(", "'--eval-deterministic'", ",", "type", "=", "boolean_argument", ",", "default", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "'--disable-decoder'", ",", "type", "=", "boolean_argument", ",", "default", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "'--disable-stochasticity-in-latent'", ",", "type", "=", "boolean_argument", ",", "default", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "'--sample-embeddings'", ",", "type", "=", "boolean_argument", ",", "default", "=", "False", ",", "\n", "help", "=", "'sample the embedding (otherwise: pass mean)'", ")", "\n", "parser", ".", "add_argument", "(", "'--vae-loss-coeff'", ",", "type", "=", "float", ",", "default", "=", "1.0", ",", "help", "=", "'weight for VAE loss (vs RL loss)'", ")", "\n", "parser", ".", "add_argument", "(", "'--kl-to-gauss-prior'", ",", "type", "=", "boolean_argument", ",", "default", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "'--learn-prior'", ",", "type", "=", "boolean_argument", ",", "default", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "'--decode-only-past'", ",", "type", "=", "boolean_argument", ",", "default", "=", "False", ",", "\n", "help", "=", "'whether to decode future observations'", ")", "\n", "parser", ".", "add_argument", "(", "'--condition-policy-on-state'", ",", "type", "=", "boolean_argument", ",", "default", "=", "True", ",", "\n", "help", "=", "'after the encoder, add the env state to the latent space'", ")", "\n", "# --- OTHERS ---", "\n", "\n", "# logging, saving, evaluation", "\n", "parser", ".", "add_argument", "(", "'--log-interval'", ",", "type", "=", "int", ",", "default", "=", "10", ",", "\n", "help", "=", "'log interval, one log per n iterations (default: 10)'", ")", "\n", "parser", ".", "add_argument", "(", "'--save-interval'", ",", "type", "=", "int", ",", "default", "=", "100", ",", "\n", "help", "=", "'save models interval, every # iterations (default: 100)'", ")", "\n", "# parser.add_argument('--eval-interval', type=int, default=500,", "\n", "#                     help='eval interval, one eval per n updates (default: 500)')", "\n", "parser", ".", "add_argument", "(", "'--agent-log-dir'", ",", "default", "=", "'tmp/gym/'", ",", "help", "=", "'directory to save agent logs (default: /tmp/gym)'", ")", "\n", "parser", ".", "add_argument", "(", "'--results-log-dir'", ",", "default", "=", "None", ",", "help", "=", "'directory to save agent logs (default: ./data)'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--log-tensorboard'", ",", "type", "=", "boolean_argument", ",", "default", "=", "True", ",", "help", "=", "'whether to use tb logger'", ")", "\n", "\n", "# general settings", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "type", "=", "int", ",", "default", "=", "73", ",", "help", "=", "'random seed (default: 73)'", ")", "\n", "parser", ".", "add_argument", "(", "'--port'", ",", "type", "=", "int", ",", "default", "=", "8097", ",", "help", "=", "'port to run the server on (default: 8097)'", ")", "\n", "\n", "# gpu settings", "\n", "parser", ".", "add_argument", "(", "'--use-gpu'", ",", "type", "=", "boolean_argument", ",", "default", "=", "True", ",", "help", "=", "'whether to use gpu'", ")", "\n", "parser", ".", "add_argument", "(", "'--gpu-id'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "'gpu number to use'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", "rest_args", ")", "\n", "\n", "args", ".", "cuda", "=", "torch", ".", "cuda", ".", "is_available", "(", ")", "\n", "\n", "return", "args", "\n", "", ""]], "home.repos.pwc.inspect_result.Rondorf_BOReL.online_config.args_gridworld.get_args": [[6, 147], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "torch.cuda.is_available"], "function", ["None"], ["def", "get_args", "(", "rest_args", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'--env-name'", ",", "default", "=", "'GridNavi-v2'", ")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "type", "=", "int", ",", "default", "=", "73", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--belief-rewards'", ",", "default", "=", "False", ",", "help", "=", "'use R+=E[R]'", ")", "\n", "parser", ".", "add_argument", "(", "'--num-belief-samples'", ",", "default", "=", "20", ")", "\n", "parser", ".", "add_argument", "(", "'--num-train-tasks'", ",", "default", "=", "21", ")", "\n", "parser", ".", "add_argument", "(", "'--num-eval-tasks'", ",", "default", "=", "21", ")", "\n", "parser", ".", "add_argument", "(", "'--hindsight-relabelling'", ",", "default", "=", "False", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--num-trajs-per-task'", ",", "type", "=", "int", ",", "default", "=", "None", ",", "\n", "help", "=", "'how many trajs per task to use. If None - use all'", ")", "\n", "parser", ".", "add_argument", "(", "'--meta-batch'", ",", "type", "=", "int", ",", "default", "=", "16", ",", "\n", "help", "=", "'number of tasks to average the gradient across'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--num-iters'", ",", "type", "=", "int", ",", "default", "=", "1000", ",", "help", "=", "'number meta-training iterates'", ")", "\n", "parser", ".", "add_argument", "(", "'--rl-updates-per-iter'", ",", "type", "=", "int", ",", "default", "=", "250", ",", "help", "=", "'number of RL steps per iteration'", ")", "\n", "parser", ".", "add_argument", "(", "'--batch-size'", ",", "type", "=", "int", ",", "default", "=", "256", ",", "help", "=", "'number of transitions in RL batch (per task)'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--dqn-layers'", ",", "nargs", "=", "'+'", ",", "default", "=", "[", "64", ",", "64", "]", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--policy-lr'", ",", "type", "=", "float", ",", "default", "=", "0.0003", ",", "help", "=", "'learning rate for policy (default: 3e-4)'", ")", "\n", "parser", ".", "add_argument", "(", "'--gamma'", ",", "type", "=", "float", ",", "default", "=", "0.99", ",", "help", "=", "'discount factor for rewards (default: 0.99)'", ")", "\n", "parser", ".", "add_argument", "(", "'--soft-target-tau'", ",", "type", "=", "float", ",", "default", "=", "0.005", ",", "\n", "help", "=", "'soft target network update (default: 5e-3)'", ")", "\n", "parser", ".", "add_argument", "(", "'--eval-deterministic'", ",", "default", "=", "True", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--transform-data-bamdp'", ",", "default", "=", "False", ",", "\n", "help", "=", "'If true - perform state relabelling to bamdp, else - use existing data'", ")", "\n", "\n", "# logging, saving, evaluation", "\n", "parser", ".", "add_argument", "(", "'--log-interval'", ",", "type", "=", "int", ",", "default", "=", "10", ",", "\n", "help", "=", "'log interval, one log per n iterations (default: 10)'", ")", "\n", "parser", ".", "add_argument", "(", "'--save-interval'", ",", "type", "=", "int", ",", "default", "=", "100", ",", "\n", "help", "=", "'save models interval, every # iterations (default: 100)'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--log-tensorboard'", ",", "default", "=", "True", ",", "help", "=", "'whether to use tb logger'", ")", "\n", "parser", ".", "add_argument", "(", "'--use-gpu'", ",", "default", "=", "True", ",", "help", "=", "'whether to use gpu'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--results-log-dir'", ",", "default", "=", "None", ",", "help", "=", "'directory to save agent logs (default: ./logs)'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--output-file-prefix'", ",", "default", "=", "'offline'", ")", "\n", "# parser.add_argument('--output-file-prefix', default='offline_no_rr')", "\n", "\n", "parser", ".", "add_argument", "(", "'--relabelled-data-dir'", ",", "default", "=", "'data_bamdp'", ")", "\n", "# parser.add_argument('--relabelled-data-dir', default='data_bamdp_no_rr')", "\n", "\n", "parser", ".", "add_argument", "(", "'--data-dir'", ",", "default", "=", "'data'", ")", "\n", "parser", ".", "add_argument", "(", "'--main-data-dir'", ",", "default", "=", "'./batch_data'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--vae-dir'", ",", "default", "=", "'./trained_vae'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--vae-model-name'", ",", "default", "=", "'relabel__08_08_23_08_56'", ")", "\n", "# parser.add_argument('--vae-model-name', default='no_relabel__08_08_23_08_18')", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", "rest_args", ")", "\n", "\n", "return", "args", "\n", "", ""]], "home.repos.pwc.inspect_result.Rondorf_BOReL.models.encoder.RNNEncoder.__init__": [[11, 71], ["torch.Module.__init__", "utils.helpers.FeatureExtractor", "utils.helpers.FeatureExtractor", "utils.helpers.FeatureExtractor", "torch.ModuleList", "torch.ModuleList", "range", "torch.GRU", "torch.GRU", "encoder.RNNEncoder.gru.named_parameters", "torch.ModuleList", "torch.ModuleList", "range", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "len", "encoder.RNNEncoder.fc_before_gru.append", "len", "encoder.RNNEncoder.fc_after_gru.append", "torch.Linear", "torch.Linear", "torch.init.constant_", "torch.init.constant_", "torch.Linear", "torch.Linear", "torch.init.orthogonal_", "torch.init.orthogonal_"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "# network size", "\n", "layers_before_gru", "=", "(", ")", ",", "\n", "hidden_size", "=", "64", ",", "\n", "layers_after_gru", "=", "(", ")", ",", "\n", "task_embedding_size", "=", "32", ",", "\n", "# actions, states, rewards", "\n", "action_size", "=", "2", ",", "\n", "action_embed_size", "=", "10", ",", "\n", "state_size", "=", "2", ",", "\n", "state_embed_size", "=", "10", ",", "\n", "reward_size", "=", "1", ",", "\n", "reward_embed_size", "=", "5", ",", "\n", "#", "\n", "distribution", "=", "'gaussian'", ",", "\n", ")", ":", "\n", "        ", "super", "(", "RNNEncoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "task_embedding_size", "=", "task_embedding_size", "\n", "self", ".", "hidden_size", "=", "hidden_size", "\n", "\n", "if", "distribution", "==", "'gaussian'", ":", "\n", "            ", "self", ".", "reparameterise", "=", "self", ".", "_sample_gaussian", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "# embed action, state, reward", "\n", "", "self", ".", "state_encoder", "=", "utl", ".", "FeatureExtractor", "(", "state_size", ",", "state_embed_size", ",", "F", ".", "relu", ")", "\n", "self", ".", "action_encoder", "=", "utl", ".", "FeatureExtractor", "(", "action_size", ",", "action_embed_size", ",", "F", ".", "relu", ")", "\n", "self", ".", "reward_encoder", "=", "utl", ".", "FeatureExtractor", "(", "reward_size", ",", "reward_embed_size", ",", "F", ".", "relu", ")", "\n", "\n", "# fully connected layers before the recurrent cell", "\n", "curr_input_size", "=", "action_embed_size", "+", "state_embed_size", "+", "reward_embed_size", "\n", "self", ".", "fc_before_gru", "=", "nn", ".", "ModuleList", "(", "[", "]", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "layers_before_gru", ")", ")", ":", "\n", "            ", "self", ".", "fc_before_gru", ".", "append", "(", "nn", ".", "Linear", "(", "curr_input_size", ",", "layers_before_gru", "[", "i", "]", ")", ")", "\n", "curr_input_size", "=", "layers_before_gru", "[", "i", "]", "\n", "\n", "# recurrent unit", "\n", "", "self", ".", "gru", "=", "nn", ".", "GRU", "(", "input_size", "=", "curr_input_size", ",", "\n", "hidden_size", "=", "hidden_size", ",", "\n", "num_layers", "=", "1", ",", "\n", ")", "\n", "\n", "for", "name", ",", "param", "in", "self", ".", "gru", ".", "named_parameters", "(", ")", ":", "\n", "            ", "if", "'bias'", "in", "name", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "param", ",", "0", ")", "\n", "", "elif", "'weight'", "in", "name", ":", "\n", "                ", "nn", ".", "init", ".", "orthogonal_", "(", "param", ")", "\n", "\n", "# fully connected layers after the recurrent cell", "\n", "", "", "curr_input_size", "=", "hidden_size", "\n", "self", ".", "fc_after_gru", "=", "nn", ".", "ModuleList", "(", "[", "]", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "layers_after_gru", ")", ")", ":", "\n", "            ", "self", ".", "fc_after_gru", ".", "append", "(", "nn", ".", "Linear", "(", "curr_input_size", ",", "layers_after_gru", "[", "i", "]", ")", ")", "\n", "curr_input_size", "=", "layers_after_gru", "[", "i", "]", "\n", "\n", "# output layer", "\n", "", "self", ".", "fc_mu", "=", "nn", ".", "Linear", "(", "curr_input_size", ",", "task_embedding_size", ")", "\n", "self", ".", "fc_logvar", "=", "nn", ".", "Linear", "(", "curr_input_size", ",", "task_embedding_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.models.encoder.RNNEncoder._sample_gaussian": [[72, 91], ["torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like.mul().add_", "torch.randn_like.mul().add_", "torch.randn_like.mul().add_", "torch.randn_like.mul().add_", "mu.repeat.repeat.unsqueeze", "logvar.unsqueeze.unsqueeze.unsqueeze", "logvar.unsqueeze.unsqueeze.dim", "torch.exp().repeat", "torch.exp().repeat", "torch.exp().repeat", "torch.exp().repeat", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "mu.repeat.repeat.repeat", "torch.exp().repeat", "torch.exp().repeat", "torch.exp().repeat", "torch.exp().repeat", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "mu.repeat.repeat.repeat", "torch.randn_like.mul", "torch.randn_like.mul", "torch.randn_like.mul", "torch.randn_like.mul", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjContactWrapper.dim"], ["", "def", "_sample_gaussian", "(", "self", ",", "mu", ",", "logvar", ",", "num", "=", "None", ")", ":", "\n", "        ", "if", "num", "is", "None", ":", "\n", "            ", "std", "=", "torch", ".", "exp", "(", "0.5", "*", "logvar", ")", "\n", "eps", "=", "torch", ".", "randn_like", "(", "std", ")", "\n", "return", "eps", ".", "mul", "(", "std", ")", ".", "add_", "(", "mu", ")", "\n", "", "else", ":", "\n", "            ", "if", "logvar", ".", "shape", "[", "0", "]", ">", "1", ":", "\n", "                ", "mu", "=", "mu", ".", "unsqueeze", "(", "0", ")", "\n", "logvar", "=", "logvar", ".", "unsqueeze", "(", "0", ")", "\n", "", "if", "logvar", ".", "dim", "(", ")", ">", "2", ":", "# if 3 dims, first must be 1", "\n", "                ", "assert", "logvar", ".", "shape", "[", "0", "]", "==", "1", ",", "'error in dimensions!'", "\n", "std", "=", "torch", ".", "exp", "(", "0.5", "*", "logvar", ")", ".", "repeat", "(", "num", ",", "1", ",", "1", ")", "\n", "eps", "=", "torch", ".", "randn_like", "(", "std", ")", "\n", "mu", "=", "mu", ".", "repeat", "(", "num", ",", "1", ",", "1", ")", "\n", "", "else", ":", "\n", "                ", "std", "=", "torch", ".", "exp", "(", "0.5", "*", "logvar", ")", ".", "repeat", "(", "num", ",", "1", ")", "\n", "eps", "=", "torch", ".", "randn_like", "(", "std", ")", "\n", "mu", "=", "mu", ".", "repeat", "(", "num", ",", "1", ")", "\n", "", "return", "eps", ".", "mul", "(", "std", ")", ".", "add_", "(", "mu", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.models.encoder.RNNEncoder.reset_hidden": [[92, 100], ["hidden_state.dim", "reset_task.unsqueeze().unsqueeze.unsqueeze().unsqueeze.dim", "reset_task.unsqueeze().unsqueeze.unsqueeze().unsqueeze.dim", "reset_task.unsqueeze().unsqueeze.unsqueeze().unsqueeze.unsqueeze", "reset_task.unsqueeze().unsqueeze.unsqueeze().unsqueeze.dim", "reset_task.unsqueeze().unsqueeze.unsqueeze().unsqueeze.unsqueeze().unsqueeze", "reset_task.unsqueeze().unsqueeze.unsqueeze().unsqueeze.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjContactWrapper.dim", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjContactWrapper.dim", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjContactWrapper.dim", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjContactWrapper.dim"], ["", "", "def", "reset_hidden", "(", "self", ",", "hidden_state", ",", "reset_task", ")", ":", "\n", "        ", "if", "hidden_state", ".", "dim", "(", ")", "!=", "reset_task", ".", "dim", "(", ")", ":", "\n", "            ", "if", "reset_task", ".", "dim", "(", ")", "==", "2", ":", "\n", "                ", "reset_task", "=", "reset_task", ".", "unsqueeze", "(", "0", ")", "\n", "", "elif", "reset_task", ".", "dim", "(", ")", "==", "1", ":", "\n", "                ", "reset_task", "=", "reset_task", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "2", ")", "\n", "", "", "hidden_state", "=", "hidden_state", "*", "(", "1", "-", "reset_task", ")", "\n", "return", "hidden_state", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.models.encoder.RNNEncoder.prior": [[101, 123], ["torchkit.pytorch_utils.zeros", "range", "encoder.RNNEncoder.fc_mu", "encoder.RNNEncoder.fc_logvar", "len", "torch.nn.functional.relu", "torch.nn.functional.relu", "encoder.RNNEncoder.reparameterise"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.zeros"], ["", "def", "prior", "(", "self", ",", "batch_size", ",", "sample", "=", "True", ")", ":", "\n", "\n", "# TODO: somehow incorporate the initial state", "\n", "\n", "# we start out with a hidden state of zero", "\n", "# hidden_state = torchkit.zeros((1, batch_size, self.hidden_size), requires_grad=True).to(ptu.device)", "\n", "        ", "hidden_state", "=", "ptu", ".", "zeros", "(", "(", "1", ",", "batch_size", ",", "self", ".", "hidden_size", ")", ",", "requires_grad", "=", "True", ")", "\n", "\n", "h", "=", "hidden_state", "\n", "# forward through fully connected layers after GRU", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "fc_after_gru", ")", ")", ":", "\n", "            ", "h", "=", "F", ".", "relu", "(", "self", ".", "fc_after_gru", "[", "i", "]", "(", "h", ")", ")", "\n", "\n", "# outputs", "\n", "", "task_mean", "=", "self", ".", "fc_mu", "(", "h", ")", "\n", "task_logvar", "=", "self", ".", "fc_logvar", "(", "h", ")", "\n", "if", "sample", ":", "\n", "            ", "task_sample", "=", "self", ".", "reparameterise", "(", "task_mean", ",", "task_logvar", ")", "\n", "", "else", ":", "\n", "            ", "task_sample", "=", "task_mean", "\n", "\n", "", "return", "task_sample", ",", "task_mean", ",", "task_logvar", ",", "hidden_state", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.models.encoder.RNNEncoder.forward": [[124, 185], ["encoder.RNNEncoder.action_encoder", "encoder.RNNEncoder.state_encoder", "encoder.RNNEncoder.reward_encoder", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "range", "encoder.RNNEncoder.gru", "torch.cat.clone", "torch.cat.clone", "range", "encoder.RNNEncoder.fc_mu", "encoder.RNNEncoder.fc_logvar", "actions.unsqueeze.unsqueeze.dim", "actions.unsqueeze.unsqueeze.unsqueeze", "states.unsqueeze.unsqueeze.unsqueeze", "rewards.unsqueeze.unsqueeze.unsqueeze", "prior_hidden_state.clone.reshape", "encoder.RNNEncoder.prior", "prior_hidden_state.clone", "len", "torch.nn.functional.relu", "torch.nn.functional.relu", "len", "torch.nn.functional.relu", "torch.nn.functional.relu", "encoder.RNNEncoder.reparameterise", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.core.serializable.Serializable.clone", "home.repos.pwc.inspect_result.Rondorf_BOReL.core.serializable.Serializable.clone", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjContactWrapper.dim", "home.repos.pwc.inspect_result.Rondorf_BOReL.models.encoder.RNNEncoder.prior", "home.repos.pwc.inspect_result.Rondorf_BOReL.core.serializable.Serializable.clone"], ["", "def", "forward", "(", "self", ",", "actions", ",", "states", ",", "rewards", ",", "hidden_state", ",", "return_prior", ",", "sample", "=", "True", ")", ":", "\n", "        ", "\"\"\"\n        Actions, states, rewards should be given in form [sequence_len * dim].\n        For one-step predictions, sequence_len=1 and hidden_state!=None.\n        For feeding in entire trajectories, sequence_len>1 and hidden_state=None.\n        In the latter case, we return embeddings of length sequence_len+1 since they include the prior.\n        \"\"\"", "\n", "\n", "# shape should be: sequence_len x batch_size x hidden_size", "\n", "if", "actions", ".", "dim", "(", ")", "!=", "3", ":", "\n", "            ", "actions", "=", "actions", ".", "unsqueeze", "(", "dim", "=", "1", ")", "\n", "states", "=", "states", ".", "unsqueeze", "(", "dim", "=", "1", ")", "\n", "rewards", "=", "rewards", ".", "unsqueeze", "(", "dim", "=", "1", ")", "\n", "\n", "", "if", "hidden_state", "is", "not", "None", ":", "\n", "# if the sequence_len is one, this will add a dimension at dim 0 (otherwise will be the same)", "\n", "            ", "hidden_state", "=", "hidden_state", ".", "reshape", "(", "(", "-", "1", ",", "*", "hidden_state", ".", "shape", "[", "-", "2", ":", "]", ")", ")", "\n", "# hidden_state = hidden_state.unsqueeze(dim=1)", "\n", "\n", "", "if", "return_prior", ":", "\n", "# if hidden state is none, start with the prior", "\n", "            ", "prior_sample", ",", "prior_mean", ",", "prior_logvar", ",", "prior_hidden_state", "=", "self", ".", "prior", "(", "actions", ".", "shape", "[", "1", "]", ")", "\n", "hidden_state", "=", "prior_hidden_state", ".", "clone", "(", ")", "\n", "\n", "# extract features for states, actions, rewards", "\n", "", "ha", "=", "self", ".", "action_encoder", "(", "actions", ")", "\n", "hs", "=", "self", ".", "state_encoder", "(", "states", ")", "\n", "hr", "=", "self", ".", "reward_encoder", "(", "rewards", ")", "\n", "h", "=", "torch", ".", "cat", "(", "(", "ha", ",", "hs", ",", "hr", ")", ",", "dim", "=", "-", "1", ")", "\n", "\n", "# forward through fully connected layers before GRU", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "fc_before_gru", ")", ")", ":", "\n", "            ", "h", "=", "F", ".", "relu", "(", "self", ".", "fc_before_gru", "[", "i", "]", "(", "h", ")", ")", "\n", "\n", "# GRU cell (output is outputs for each time step, hidden_state is last output)", "\n", "", "output", ",", "_", "=", "self", ".", "gru", "(", "h", ",", "hidden_state", ")", "\n", "# gru_h = F.relu(output)  # TODO: should this be here?", "\n", "gru_h", "=", "output", ".", "clone", "(", ")", "\n", "\n", "# forward through fully connected layers after GRU", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "fc_after_gru", ")", ")", ":", "\n", "            ", "gru_h", "=", "F", ".", "relu", "(", "self", ".", "fc_after_gru", "[", "i", "]", "(", "gru_h", ")", ")", "\n", "\n", "# outputs", "\n", "", "task_mean", "=", "self", ".", "fc_mu", "(", "gru_h", ")", "\n", "task_logvar", "=", "self", ".", "fc_logvar", "(", "gru_h", ")", "\n", "if", "sample", ":", "\n", "            ", "task_sample", "=", "self", ".", "reparameterise", "(", "task_mean", ",", "task_logvar", ")", "\n", "", "else", ":", "\n", "            ", "task_sample", "=", "task_mean", "\n", "\n", "", "if", "return_prior", ":", "\n", "            ", "task_sample", "=", "torch", ".", "cat", "(", "(", "prior_sample", ",", "task_sample", ")", ")", "\n", "task_mean", "=", "torch", ".", "cat", "(", "(", "prior_mean", ",", "task_mean", ")", ")", "\n", "task_logvar", "=", "torch", ".", "cat", "(", "(", "prior_logvar", ",", "task_logvar", ")", ")", "\n", "output", "=", "torch", ".", "cat", "(", "(", "prior_hidden_state", ",", "output", ")", ")", "# (61, 16, 64)", "\n", "\n", "", "if", "task_mean", ".", "shape", "[", "0", "]", "==", "1", ":", "\n", "            ", "task_sample", ",", "task_mean", ",", "task_logvar", "=", "task_sample", "[", "0", "]", ",", "task_mean", "[", "0", "]", ",", "task_logvar", "[", "0", "]", "\n", "\n", "", "return", "task_sample", ",", "task_mean", ",", "task_logvar", ",", "output", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Rondorf_BOReL.models.policy.TanhGaussianPolicy.__init__": [[31, 63], ["policy.TanhGaussianPolicy.save_init_params", "torchkit.networks.Mlp.__init__", "locals", "torch.nn.Linear", "policy.TanhGaussianPolicy.last_fc_log_std.weight.data.uniform_", "policy.TanhGaussianPolicy.last_fc_log_std.bias.data.uniform_", "numpy.log", "len"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.core.PyTorchModule.save_init_params", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.__init__", "home.repos.pwc.inspect_result.Rondorf_BOReL.core.logger.log"], ["def", "__init__", "(", "\n", "self", ",", "\n", "obs_dim", ",", "\n", "action_dim", ",", "\n", "hidden_sizes", ",", "\n", "std", "=", "None", ",", "\n", "init_w", "=", "1e-3", ",", "\n", "**", "kwargs", "\n", ")", ":", "\n", "        ", "self", ".", "save_init_params", "(", "locals", "(", ")", ")", "\n", "super", "(", ")", ".", "__init__", "(", "\n", "hidden_sizes", ",", "\n", "input_size", "=", "obs_dim", ",", "\n", "output_size", "=", "action_dim", ",", "\n", "init_w", "=", "init_w", ",", "\n", "**", "kwargs", "\n", ")", "\n", "self", ".", "obs_dim", "=", "obs_dim", "\n", "self", ".", "action_dim", "=", "action_dim", "\n", "\n", "self", ".", "log_std", "=", "None", "\n", "self", ".", "std", "=", "std", "\n", "if", "std", "is", "None", ":", "\n", "            ", "last_hidden_size", "=", "obs_dim", "\n", "if", "len", "(", "hidden_sizes", ")", ">", "0", ":", "\n", "                ", "last_hidden_size", "=", "hidden_sizes", "[", "-", "1", "]", "\n", "", "self", ".", "last_fc_log_std", "=", "nn", ".", "Linear", "(", "last_hidden_size", ",", "action_dim", ")", "\n", "self", ".", "last_fc_log_std", ".", "weight", ".", "data", ".", "uniform_", "(", "-", "init_w", ",", "init_w", ")", "\n", "self", ".", "last_fc_log_std", ".", "bias", ".", "data", ".", "uniform_", "(", "-", "init_w", ",", "init_w", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "log_std", "=", "np", ".", "log", "(", "std", ")", "\n", "assert", "LOG_SIG_MIN", "<=", "self", ".", "log_std", "<=", "LOG_SIG_MAX", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.models.policy.TanhGaussianPolicy.get_action": [[64, 67], ["policy.TanhGaussianPolicy.get_actions"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.models.policy.TanhGaussianPolicy.get_actions"], ["", "", "def", "get_action", "(", "self", ",", "obs", ",", "deterministic", "=", "False", ")", ":", "\n", "        ", "actions", "=", "self", ".", "get_actions", "(", "obs", ",", "deterministic", "=", "deterministic", ")", "\n", "return", "actions", "[", "0", ",", ":", "]", ",", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.models.policy.TanhGaussianPolicy.get_actions": [[68, 72], ["torch.no_grad", "torchkit.core.np_ify", "policy.TanhGaussianPolicy.forward"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.core.np_ify", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjcore.MjModel.forward"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "get_actions", "(", "self", ",", "obs", ",", "deterministic", "=", "False", ")", ":", "\n", "        ", "outputs", "=", "self", ".", "forward", "(", "obs", ",", "deterministic", "=", "deterministic", ")", "[", "0", "]", "\n", "return", "np_ify", "(", "outputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.models.policy.TanhGaussianPolicy.forward": [[73, 127], ["enumerate", "policy.TanhGaussianPolicy.last_fc", "policy.TanhGaussianPolicy.hidden_activation", "policy.TanhGaussianPolicy.last_fc_log_std", "torch.clamp", "torch.exp", "torch.tanh", "torchkit.distributions.TanhNormal", "fc", "torchkit.distributions.TanhNormal", "torchkit.distributions.TanhNormal.log_prob", "log_prob.sum.sum.sum", "torchkit.distributions.TanhNormal.log_prob", "log_prob.sum.sum.sum", "torchkit.distributions.TanhNormal.rsample", "torchkit.distributions.TanhNormal.sample", "torchkit.distributions.TanhNormal.rsample", "torchkit.distributions.TanhNormal.sample"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.distributions.TanhNormal.log_prob", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.distributions.TanhNormal.log_prob", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.distributions.TanhNormal.rsample", "home.repos.pwc.inspect_result.Rondorf_BOReL.spaces.discrete.Discrete.sample", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.distributions.TanhNormal.rsample", "home.repos.pwc.inspect_result.Rondorf_BOReL.spaces.discrete.Discrete.sample"], ["", "def", "forward", "(", "\n", "self", ",", "\n", "obs", ",", "\n", "reparameterize", "=", "True", ",", "\n", "deterministic", "=", "False", ",", "\n", "return_log_prob", "=", "False", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        :param obs: Observation\n        :param deterministic: If True, do not sample\n        :param return_log_prob: If True, return a sample and its log probability\n        \"\"\"", "\n", "h", "=", "obs", "\n", "for", "i", ",", "fc", "in", "enumerate", "(", "self", ".", "fcs", ")", ":", "\n", "            ", "h", "=", "self", ".", "hidden_activation", "(", "fc", "(", "h", ")", ")", "\n", "", "mean", "=", "self", ".", "last_fc", "(", "h", ")", "\n", "if", "self", ".", "std", "is", "None", ":", "\n", "            ", "log_std", "=", "self", ".", "last_fc_log_std", "(", "h", ")", "\n", "log_std", "=", "torch", ".", "clamp", "(", "log_std", ",", "LOG_SIG_MIN", ",", "LOG_SIG_MAX", ")", "\n", "std", "=", "torch", ".", "exp", "(", "log_std", ")", "\n", "", "else", ":", "\n", "            ", "std", "=", "self", ".", "std", "\n", "log_std", "=", "self", ".", "log_std", "\n", "\n", "", "log_prob", "=", "None", "\n", "if", "deterministic", ":", "\n", "            ", "action", "=", "torch", ".", "tanh", "(", "mean", ")", "\n", "if", "return_log_prob", ":", "\n", "                ", "tanh_normal", "=", "TanhNormal", "(", "mean", ",", "std", ")", "\n", "log_prob", "=", "tanh_normal", ".", "log_prob", "(", "action", ")", "\n", "log_prob", "=", "log_prob", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "", "", "else", ":", "\n", "            ", "tanh_normal", "=", "TanhNormal", "(", "mean", ",", "std", ")", "\n", "if", "return_log_prob", ":", "\n", "                ", "if", "reparameterize", ":", "\n", "                    ", "action", ",", "pre_tanh_value", "=", "tanh_normal", ".", "rsample", "(", "\n", "return_pretanh_value", "=", "True", "\n", ")", "\n", "", "else", ":", "\n", "                    ", "action", ",", "pre_tanh_value", "=", "tanh_normal", ".", "sample", "(", "\n", "return_pretanh_value", "=", "True", "\n", ")", "\n", "", "log_prob", "=", "tanh_normal", ".", "log_prob", "(", "\n", "action", ",", "\n", "pre_tanh_value", "=", "pre_tanh_value", "\n", ")", "\n", "log_prob", "=", "log_prob", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "", "else", ":", "\n", "                ", "if", "reparameterize", ":", "\n", "                    ", "action", "=", "tanh_normal", ".", "rsample", "(", ")", "\n", "", "else", ":", "\n", "                    ", "action", "=", "tanh_normal", ".", "sample", "(", ")", "\n", "\n", "", "", "", "return", "action", ",", "mean", ",", "log_std", ",", "log_prob", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Rondorf_BOReL.models.decoder.StateTransitionDecoder.__init__": [[11, 37], ["torch.Module.__init__", "utils.helpers.FeatureExtractor", "utils.helpers.FeatureExtractor", "torch.ModuleList", "torch.ModuleList", "range", "len", "decoder.StateTransitionDecoder.fc_layers.append", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "task_embedding_size", ",", "\n", "layers", ",", "\n", "#", "\n", "action_size", ",", "\n", "action_embed_size", ",", "\n", "state_size", ",", "\n", "state_embed_size", ",", "\n", "pred_type", "=", "'deterministic'", "\n", ")", ":", "\n", "        ", "super", "(", "StateTransitionDecoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "state_encoder", "=", "utl", ".", "FeatureExtractor", "(", "state_size", ",", "state_embed_size", ",", "F", ".", "relu", ")", "\n", "self", ".", "action_encoder", "=", "utl", ".", "FeatureExtractor", "(", "action_size", ",", "action_embed_size", ",", "F", ".", "relu", ")", "\n", "\n", "curr_input_size", "=", "task_embedding_size", "+", "state_embed_size", "+", "action_embed_size", "\n", "self", ".", "fc_layers", "=", "nn", ".", "ModuleList", "(", "[", "]", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "layers", ")", ")", ":", "\n", "            ", "self", ".", "fc_layers", ".", "append", "(", "nn", ".", "Linear", "(", "curr_input_size", ",", "layers", "[", "i", "]", ")", ")", "\n", "curr_input_size", "=", "layers", "[", "i", "]", "\n", "\n", "# output layer", "\n", "", "if", "pred_type", "==", "'gaussian'", ":", "\n", "            ", "self", ".", "fc_out", "=", "nn", ".", "Linear", "(", "curr_input_size", ",", "2", "*", "state_size", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "fc_out", "=", "nn", ".", "Linear", "(", "curr_input_size", ",", "state_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.models.decoder.StateTransitionDecoder.forward": [[38, 48], ["decoder.StateTransitionDecoder.action_encoder", "decoder.StateTransitionDecoder.state_encoder", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "range", "decoder.StateTransitionDecoder.fc_out", "len", "torch.nn.functional.relu", "torch.nn.functional.relu"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "task_embedding", ",", "state", ",", "action", ")", ":", "\n", "\n", "        ", "ha", "=", "self", ".", "action_encoder", "(", "action", ")", "\n", "hs", "=", "self", ".", "state_encoder", "(", "state", ")", "\n", "h", "=", "torch", ".", "cat", "(", "(", "task_embedding", ",", "hs", ",", "ha", ")", ",", "dim", "=", "-", "1", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "fc_layers", ")", ")", ":", "\n", "            ", "h", "=", "F", ".", "relu", "(", "self", ".", "fc_layers", "[", "i", "]", "(", "h", ")", ")", "\n", "\n", "", "return", "self", ".", "fc_out", "(", "h", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.models.decoder.RewardDecoder.__init__": [[51, 97], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "range", "torch.Linear", "torch.Linear", "utils.helpers.FeatureExtractor", "utils.helpers.FeatureExtractor", "torch.ModuleList", "torch.ModuleList", "range", "len", "decoder.RewardDecoder.fc_layers.append", "len", "decoder.RewardDecoder.fc_layers.append", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "layers", ",", "\n", "task_embedding_size", ",", "\n", "action_size", ",", "\n", "action_embed_size", ",", "\n", "state_size", ",", "\n", "state_embed_size", ",", "\n", "num_states", ",", "\n", "multi_head", "=", "False", ",", "\n", "pred_type", "=", "'deterministic'", ",", "\n", "input_prev_state", "=", "True", ",", "\n", "input_action", "=", "True", ",", "\n", ")", ":", "\n", "        ", "super", "(", "RewardDecoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "pred_type", "=", "pred_type", "\n", "self", ".", "multi_head", "=", "multi_head", "\n", "self", ".", "input_prev_state", "=", "input_prev_state", "\n", "self", ".", "input_action", "=", "input_action", "\n", "\n", "if", "self", ".", "multi_head", ":", "\n", "# one output head per state to predict rewards", "\n", "            ", "curr_input_size", "=", "task_embedding_size", "\n", "self", ".", "fc_layers", "=", "nn", ".", "ModuleList", "(", "[", "]", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "layers", ")", ")", ":", "\n", "                ", "self", ".", "fc_layers", ".", "append", "(", "nn", ".", "Linear", "(", "curr_input_size", ",", "layers", "[", "i", "]", ")", ")", "\n", "curr_input_size", "=", "layers", "[", "i", "]", "\n", "", "self", ".", "fc_out", "=", "nn", ".", "Linear", "(", "curr_input_size", ",", "num_states", ")", "\n", "", "else", ":", "\n", "# get state as input and predict reward prob", "\n", "            ", "self", ".", "state_encoder", "=", "utl", ".", "FeatureExtractor", "(", "state_size", ",", "state_embed_size", ",", "F", ".", "relu", ")", "\n", "self", ".", "action_encoder", "=", "utl", ".", "FeatureExtractor", "(", "action_size", ",", "action_embed_size", ",", "F", ".", "relu", ")", "\n", "curr_input_size", "=", "task_embedding_size", "+", "state_embed_size", "\n", "if", "input_prev_state", ":", "\n", "                ", "curr_input_size", "+=", "state_embed_size", "\n", "", "if", "input_action", ":", "\n", "                ", "curr_input_size", "+=", "action_embed_size", "\n", "", "self", ".", "fc_layers", "=", "nn", ".", "ModuleList", "(", "[", "]", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "layers", ")", ")", ":", "\n", "                ", "self", ".", "fc_layers", ".", "append", "(", "nn", ".", "Linear", "(", "curr_input_size", ",", "layers", "[", "i", "]", ")", ")", "\n", "curr_input_size", "=", "layers", "[", "i", "]", "\n", "\n", "", "if", "pred_type", "==", "'gaussian'", ":", "\n", "                ", "self", ".", "fc_out", "=", "nn", ".", "Linear", "(", "curr_input_size", ",", "2", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "fc_out", "=", "nn", ".", "Linear", "(", "curr_input_size", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.models.decoder.RewardDecoder.forward": [[98, 130], ["range", "decoder.RewardDecoder.fc_out", "decoder.RewardDecoder.state_encoder", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "len", "torch.nn.functional.relu", "torch.nn.functional.relu", "decoder.RewardDecoder.action_encoder", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "decoder.RewardDecoder.state_encoder", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "task_embedding", ",", "next_state", ",", "prev_state", "=", "None", ",", "action", "=", "None", ")", ":", "\n", "\n", "        ", "if", "self", ".", "multi_head", ":", "\n", "            ", "h", "=", "task_embedding", "\n", "", "if", "not", "self", ".", "multi_head", ":", "\n", "# task_embedding = task_embedding.reshape((-1, task_embedding.shape[-1]))", "\n", "# next_state = next_state.reshape((-1, next_state.shape[-1]))", "\n", "            ", "hns", "=", "self", ".", "state_encoder", "(", "next_state", ")", "\n", "h", "=", "torch", ".", "cat", "(", "(", "task_embedding", ",", "hns", ")", ",", "dim", "=", "-", "1", ")", "\n", "if", "self", ".", "input_action", ":", "\n", "# action = action.reshape((-1, action.shape[-1]))", "\n", "                ", "ha", "=", "self", ".", "action_encoder", "(", "action", ")", "\n", "h", "=", "torch", ".", "cat", "(", "(", "h", ",", "ha", ")", ",", "dim", "=", "-", "1", ")", "\n", "", "if", "self", ".", "input_prev_state", ":", "\n", "# prev_state = prev_state.reshape((-1, prev_state.shape[-1]))", "\n", "                ", "hps", "=", "self", ".", "state_encoder", "(", "prev_state", ")", "\n", "h", "=", "torch", ".", "cat", "(", "(", "h", ",", "hps", ")", ",", "dim", "=", "-", "1", ")", "\n", "\n", "", "", "for", "i", "in", "range", "(", "len", "(", "self", ".", "fc_layers", ")", ")", ":", "\n", "            ", "h", "=", "F", ".", "relu", "(", "self", ".", "fc_layers", "[", "i", "]", "(", "h", ")", ")", "\n", "\n", "", "p_x", "=", "self", ".", "fc_out", "(", "h", ")", "\n", "if", "self", ".", "pred_type", "==", "'deterministic'", "or", "self", ".", "pred_type", "==", "'gaussian'", ":", "\n", "            ", "pass", "\n", "", "elif", "self", ".", "pred_type", "==", "'bernoulli'", ":", "\n", "            ", "p_x", "=", "torch", ".", "sigmoid", "(", "p_x", ")", "\n", "", "elif", "self", ".", "pred_type", "==", "'categorical'", ":", "\n", "            ", "p_x", "=", "torch", ".", "softmax", "(", "p_x", ",", "1", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "return", "p_x", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.models.decoder.TaskDecoder.__init__": [[133, 151], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "range", "torch.Linear", "torch.Linear", "len", "decoder.TaskDecoder.fc_layers.append", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "layers", ",", "\n", "task_embedding_size", ",", "\n", "pred_type", ",", "\n", "task_dim", ",", "\n", ")", ":", "\n", "        ", "super", "(", "TaskDecoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# \"task_description\" or \"task id\"", "\n", "self", ".", "pred_type", "=", "pred_type", "\n", "\n", "curr_input_size", "=", "task_embedding_size", "\n", "self", ".", "fc_layers", "=", "nn", ".", "ModuleList", "(", "[", "]", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "layers", ")", ")", ":", "\n", "            ", "self", ".", "fc_layers", ".", "append", "(", "nn", ".", "Linear", "(", "curr_input_size", ",", "layers", "[", "i", "]", ")", ")", "\n", "curr_input_size", "=", "layers", "[", "i", "]", "\n", "\n", "", "self", ".", "fc_out", "=", "nn", ".", "Linear", "(", "curr_input_size", ",", "task_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.models.decoder.TaskDecoder.forward": [[152, 165], ["range", "decoder.TaskDecoder.fc_out", "len", "torch.nn.functional.relu", "torch.nn.functional.relu", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "task_embedding", ")", ":", "\n", "\n", "        ", "h", "=", "task_embedding", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "fc_layers", ")", ")", ":", "\n", "            ", "h", "=", "F", ".", "relu", "(", "self", ".", "fc_layers", "[", "i", "]", "(", "h", ")", ")", "\n", "\n", "", "y", "=", "self", ".", "fc_out", "(", "h", ")", "\n", "\n", "if", "self", ".", "pred_type", "==", "'task_id'", ":", "\n", "            ", "y", "=", "torch", ".", "softmax", "(", "y", ",", "1", ")", "\n", "\n", "", "return", "y", "", "", "", ""]], "home.repos.pwc.inspect_result.Rondorf_BOReL.models.vae.VAE.__init__": [[14, 20], ["vae.VAE.initialize_encoder", "vae.VAE.initialize_decoder", "vae.VAE.initialize_optimizer"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.models.vae.VAE.initialize_encoder", "home.repos.pwc.inspect_result.Rondorf_BOReL.models.vae.VAE.initialize_decoder", "home.repos.pwc.inspect_result.Rondorf_BOReL.models.vae.VAE.initialize_optimizer"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "self", ".", "args", "=", "args", "\n", "\n", "self", ".", "initialize_encoder", "(", ")", "\n", "self", ".", "initialize_decoder", "(", ")", "\n", "self", ".", "initialize_optimizer", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.models.vae.VAE.initialize_encoder": [[21, 35], ["models.encoder.RNNEncoder().to", "models.encoder.RNNEncoder"], "methods", ["None"], ["", "def", "initialize_encoder", "(", "self", ")", ":", "\n", "# initialize RNN encoder -- self.encoder", "\n", "        ", "self", ".", "encoder", "=", "RNNEncoder", "(", "\n", "layers_before_gru", "=", "self", ".", "args", ".", "layers_before_aggregator", ",", "\n", "hidden_size", "=", "self", ".", "args", ".", "aggregator_hidden_size", ",", "\n", "layers_after_gru", "=", "self", ".", "args", ".", "layers_after_aggregator", ",", "\n", "task_embedding_size", "=", "self", ".", "args", ".", "task_embedding_size", ",", "\n", "action_size", "=", "self", ".", "args", ".", "action_dim", ",", "\n", "action_embed_size", "=", "self", ".", "args", ".", "action_embedding_size", ",", "\n", "state_size", "=", "self", ".", "args", ".", "obs_dim", ",", "\n", "state_embed_size", "=", "self", ".", "args", ".", "state_embedding_size", ",", "\n", "reward_size", "=", "1", ",", "\n", "reward_embed_size", "=", "self", ".", "args", ".", "reward_embedding_size", ",", "\n", ")", ".", "to", "(", "ptu", ".", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.models.vae.VAE.initialize_decoder": [[36, 98], ["models.decoder.RewardDecoder().to", "models.decoder.StateTransitionDecoder().to", "gym.make", "models.decoder.TaskDecoder().to", "models.decoder.RewardDecoder", "models.decoder.StateTransitionDecoder", "models.decoder.TaskDecoder"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.envs.registration.make"], ["", "def", "initialize_decoder", "(", "self", ")", ":", "\n", "        ", "task_embedding_size", "=", "self", ".", "args", ".", "task_embedding_size", "\n", "if", "self", ".", "args", ".", "disable_stochasticity_in_latent", ":", "\n", "            ", "task_embedding_size", "*=", "2", "\n", "\n", "# initialize model decoders -- self.reward_decoder, self.state_decoder, self.task_decoder", "\n", "", "if", "self", ".", "args", ".", "decode_reward", ":", "\n", "# initialise reward decoder for VAE", "\n", "            ", "self", ".", "reward_decoder", "=", "RewardDecoder", "(", "\n", "layers", "=", "self", ".", "args", ".", "reward_decoder_layers", ",", "\n", "task_embedding_size", "=", "task_embedding_size", ",", "\n", "#", "\n", "state_size", "=", "self", ".", "args", ".", "obs_dim", ",", "\n", "state_embed_size", "=", "self", ".", "args", ".", "state_embedding_size", ",", "\n", "action_size", "=", "self", ".", "args", ".", "action_dim", ",", "\n", "action_embed_size", "=", "self", ".", "args", ".", "action_embedding_size", ",", "\n", "num_states", "=", "self", ".", "args", ".", "num_states", ",", "\n", "multi_head", "=", "self", ".", "args", ".", "multihead_for_reward", ",", "\n", "pred_type", "=", "self", ".", "args", ".", "rew_pred_type", ",", "\n", "input_prev_state", "=", "self", ".", "args", ".", "input_prev_state", ",", "\n", "input_action", "=", "self", ".", "args", ".", "input_action", ",", "\n", ")", ".", "to", "(", "ptu", ".", "device", ")", "\n", "# set reward function", "\n", "# if self.args.rew_loss_fn == 'BCE':", "\n", "#     self.rew_loss_fn = lambda in_, target: F.binary_cross_entropy(in_, target, reduction='none')", "\n", "# elif self.args.rew_loss_fn == 'FL':", "\n", "#     self.rew_loss_fn = ptu.FocalLoss()", "\n", "# else:", "\n", "#     raise NotImplementedError", "\n", "", "else", ":", "\n", "            ", "self", ".", "reward_decoder", "=", "None", "\n", "\n", "", "if", "self", ".", "args", ".", "decode_state", ":", "\n", "# initialise state decoder for VAE", "\n", "            ", "self", ".", "state_decoder", "=", "StateTransitionDecoder", "(", "\n", "task_embedding_size", "=", "task_embedding_size", ",", "\n", "layers", "=", "self", ".", "args", ".", "state_decoder_layers", ",", "\n", "action_size", "=", "self", ".", "args", ".", "action_dim", ",", "\n", "action_embed_size", "=", "self", ".", "args", ".", "action_embedding_size", ",", "\n", "state_size", "=", "self", ".", "args", ".", "obs_dim", ",", "\n", "state_embed_size", "=", "self", ".", "args", ".", "state_embedding_size", ",", "\n", "pred_type", "=", "self", ".", "args", ".", "state_pred_type", ",", "\n", ")", ".", "to", "(", "ptu", ".", "device", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "state_decoder", "=", "None", "\n", "\n", "", "if", "self", ".", "args", ".", "decode_task", ":", "\n", "            ", "env", "=", "gym", ".", "make", "(", "self", ".", "args", ".", "env_name", ")", "\n", "if", "self", ".", "args", ".", "task_pred_type", "==", "'task_description'", ":", "\n", "                ", "task_dim", "=", "env", ".", "task_dim", "\n", "", "elif", "self", ".", "args", ".", "task_pred_type", "==", "'task_id'", ":", "\n", "                ", "task_dim", "=", "env", ".", "num_tasks", "\n", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "\n", "", "self", ".", "task_decoder", "=", "TaskDecoder", "(", "\n", "task_embedding_size", "=", "task_embedding_size", ",", "\n", "layers", "=", "self", ".", "args", ".", "task_decoder_layers", ",", "\n", "task_dim", "=", "task_dim", ",", "\n", "pred_type", "=", "self", ".", "args", ".", "task_pred_type", ",", "\n", ")", ".", "to", "(", "ptu", ".", "device", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "task_decoder", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.models.vae.VAE.initialize_optimizer": [[99, 111], ["torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "decoder_params.extend", "decoder_params.extend", "decoder_params.extend", "vae.VAE.reward_decoder.parameters", "vae.VAE.state_decoder.parameters", "vae.VAE.task_decoder.parameters", "vae.VAE.encoder.parameters"], "methods", ["None"], ["", "", "def", "initialize_optimizer", "(", "self", ")", ":", "\n", "        ", "decoder_params", "=", "[", "]", "\n", "if", "not", "self", ".", "args", ".", "disable_decoder", ":", "\n", "# initialise optimiser for decoder", "\n", "            ", "if", "self", ".", "args", ".", "decode_reward", ":", "\n", "                ", "decoder_params", ".", "extend", "(", "self", ".", "reward_decoder", ".", "parameters", "(", ")", ")", "\n", "", "if", "self", ".", "args", ".", "decode_state", ":", "\n", "                ", "decoder_params", ".", "extend", "(", "self", ".", "state_decoder", ".", "parameters", "(", ")", ")", "\n", "", "if", "self", ".", "args", ".", "decode_task", ":", "\n", "                ", "decoder_params", ".", "extend", "(", "self", ".", "task_decoder", ".", "parameters", "(", ")", ")", "\n", "# initialize optimizer", "\n", "", "", "self", ".", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "[", "*", "self", ".", "encoder", ".", "parameters", "(", ")", ",", "*", "decoder_params", "]", ",", "lr", "=", "self", ".", "args", ".", "vae_lr", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.models.vae.VAE.compute_task_reconstruction_loss": [[112, 131], ["vae.VAE.task_decoder", "gym.make", "gym.make.task_to_id", "dec_task.expand().view.expand().view.expand().view", "torch.nn.functional.cross_entropy().reshape", "torch.nn.functional.cross_entropy().reshape", "dec_task.expand().view.expand().view.expand", "torch.nn.functional.cross_entropy", "torch.nn.functional.cross_entropy", "vae.VAE.view"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.envs.registration.make", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.task_to_id"], ["", "def", "compute_task_reconstruction_loss", "(", "self", ",", "dec_embedding", ",", "dec_task", ",", "return_predictions", "=", "False", ")", ":", "\n", "# make some predictions and compute individual losses", "\n", "        ", "task_pred", "=", "self", ".", "task_decoder", "(", "dec_embedding", ")", "\n", "\n", "if", "self", ".", "args", ".", "task_pred_type", "==", "'task_id'", ":", "\n", "            ", "env", "=", "gym", ".", "make", "(", "self", ".", "args", ".", "env_name", ")", "\n", "dec_task", "=", "env", ".", "task_to_id", "(", "dec_task", ")", "\n", "dec_task", "=", "dec_task", ".", "expand", "(", "task_pred", ".", "shape", "[", ":", "-", "1", "]", ")", ".", "view", "(", "-", "1", ")", "\n", "# loss for the data we fed into encoder", "\n", "task_pred_shape", "=", "task_pred", ".", "shape", "\n", "loss_task", "=", "F", ".", "cross_entropy", "(", "task_pred", ".", "view", "(", "-", "1", ",", "task_pred", ".", "shape", "[", "-", "1", "]", ")", ",", "dec_task", ",", "reduction", "=", "'none'", ")", ".", "reshape", "(", "\n", "task_pred_shape", "[", ":", "-", "1", "]", ")", "\n", "", "elif", "self", ".", "args", ".", "task_pred_type", "==", "'task_description'", ":", "\n", "            ", "loss_task", "=", "(", "task_pred", "-", "dec_task", ")", ".", "pow", "(", "2", ")", ".", "mean", "(", "dim", "=", "1", ")", "\n", "\n", "", "if", "return_predictions", ":", "\n", "            ", "return", "loss_task", ",", "task_pred", "\n", "", "else", ":", "\n", "            ", "return", "loss_task", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.models.vae.VAE.compute_state_reconstruction_loss": [[132, 150], ["vae.VAE.state_decoder", "vae.VAE.state_decoder", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.distributions.normal.Normal", "torch.distributions.normal.Normal", "torch.distributions.normal.Normal", "torch.distributions.normal.Normal", "torch.distributions.normal.Normal.log_prob().mean", "torch.distributions.normal.Normal.log_prob().mean", "torch.distributions.normal.Normal.log_prob", "torch.distributions.normal.Normal.log_prob"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.distributions.TanhNormal.log_prob", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.distributions.TanhNormal.log_prob"], ["", "", "def", "compute_state_reconstruction_loss", "(", "self", ",", "dec_embedding", ",", "dec_prev_obs", ",", "dec_next_obs", ",", "dec_actions", ",", "\n", "return_predictions", "=", "False", ")", ":", "\n", "# make some predictions and compute individual losses", "\n", "        ", "if", "self", ".", "args", ".", "state_pred_type", "==", "'deterministic'", ":", "\n", "            ", "obs_reconstruction", "=", "self", ".", "state_decoder", "(", "dec_embedding", ",", "dec_prev_obs", ",", "dec_actions", ")", "\n", "loss_state", "=", "(", "obs_reconstruction", "-", "dec_next_obs", ")", ".", "pow", "(", "2", ")", ".", "mean", "(", "dim", "=", "1", ")", "\n", "", "elif", "self", ".", "args", ".", "state_pred_type", "==", "'gaussian'", ":", "\n", "            ", "state_pred", "=", "self", ".", "state_decoder", "(", "dec_embedding", ",", "dec_prev_obs", ",", "dec_actions", ")", "\n", "state_pred_mean", "=", "state_pred", "[", ":", ",", ":", "state_pred", ".", "shape", "[", "1", "]", "//", "2", "]", "\n", "state_pred_std", "=", "torch", ".", "exp", "(", "0.5", "*", "state_pred", "[", ":", ",", "state_pred", ".", "shape", "[", "1", "]", "//", "2", ":", "]", ")", "\n", "m", "=", "torch", ".", "distributions", ".", "normal", ".", "Normal", "(", "state_pred_mean", ",", "state_pred_std", ")", "\n", "# TODO: check if this is correctly averaged", "\n", "loss_state", "=", "-", "m", ".", "log_prob", "(", "dec_next_obs", ")", ".", "mean", "(", "dim", "=", "1", ")", "\n", "\n", "", "if", "return_predictions", ":", "\n", "            ", "return", "loss_state", ",", "obs_reconstruction", "\n", "", "else", ":", "\n", "            ", "return", "loss_state", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.models.vae.VAE.compute_rew_reconstruction_loss": [[151, 199], ["vae.VAE.reward_decoder", "gym.make", "gym.make.task_to_id().to", "vae.VAE.gather", "torch.nn.functional.binary_cross_entropy().mean", "torch.nn.functional.binary_cross_entropy().mean", "vae.VAE.reward_decoder", "torch.nn.functional.binary_cross_entropy().mean", "torch.nn.functional.binary_cross_entropy().mean", "indices.unsqueeze.unsqueeze.dim", "vae.VAE.dim", "indices.unsqueeze.unsqueeze.unsqueeze", "vae.VAE.reward_decoder", "gym.make.task_to_id", "torch.nn.functional.binary_cross_entropy", "torch.nn.functional.binary_cross_entropy", "torch.nn.functional.binary_cross_entropy", "torch.nn.functional.binary_cross_entropy", "vae.VAE.reward_decoder().mean", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.distributions.normal.Normal", "torch.distributions.normal.Normal", "torch.distributions.normal.Normal", "torch.distributions.normal.Normal", "torch.distributions.normal.Normal.log_prob", "torch.distributions.normal.Normal.log_prob", "vae.VAE.reward_decoder"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.envs.registration.make", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjContactWrapper.dim", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjContactWrapper.dim", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.task_to_id", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.distributions.TanhNormal.log_prob", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.distributions.TanhNormal.log_prob"], ["", "", "def", "compute_rew_reconstruction_loss", "(", "self", ",", "dec_embedding", ",", "dec_prev_obs", ",", "dec_next_obs", ",", "dec_actions", ",", "\n", "dec_rewards", ",", "return_predictions", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Computed the reward reconstruction loss\n        (no reduction of loss is done here; sum/avg has to be done outside)\n        \"\"\"", "\n", "# make some predictions and compute individual losses", "\n", "if", "self", ".", "args", ".", "multihead_for_reward", ":", "\n", "            ", "if", "self", ".", "args", ".", "rew_pred_type", "==", "'bernoulli'", "or", "self", ".", "args", ".", "rew_pred_type", "==", "'categorical'", ":", "\n", "# loss for the data we fed into encoder", "\n", "                ", "p_rew", "=", "self", ".", "reward_decoder", "(", "dec_embedding", ",", "None", ")", "\n", "env", "=", "gym", ".", "make", "(", "self", ".", "args", ".", "env_name", ")", "\n", "indices", "=", "env", ".", "task_to_id", "(", "dec_next_obs", ")", ".", "to", "(", "ptu", ".", "device", ")", "\n", "if", "indices", ".", "dim", "(", ")", "<", "p_rew", ".", "dim", "(", ")", ":", "\n", "                    ", "indices", "=", "indices", ".", "unsqueeze", "(", "-", "1", ")", "\n", "", "rew_pred", "=", "p_rew", ".", "gather", "(", "dim", "=", "-", "1", ",", "index", "=", "indices", ")", "\n", "rew_target", "=", "(", "dec_rewards", "==", "1", ")", ".", "float", "(", ")", "\n", "loss_rew", "=", "F", ".", "binary_cross_entropy", "(", "rew_pred", ",", "rew_target", ",", "reduction", "=", "'none'", ")", ".", "mean", "(", "dim", "=", "-", "1", ")", "\n", "# loss_rew = self.rew_loss_fn(rew_pred, rew_target).mean(dim=-1)", "\n", "", "elif", "self", ".", "args", ".", "rew_pred_type", "==", "'deterministic'", ":", "\n", "                ", "raise", "NotImplementedError", "\n", "# p_rew = self.reward_decoder(dec_embedding, None)", "\n", "# env = gym.make(self.args.env_name)", "\n", "# indices = env.task_to_id(dec_next_obs)", "\n", "# loss_rew = F.mse_loss(p_rew.gather(1, indices.reshape(-1, 1)), dec_rewards, reduction='none').mean(", "\n", "#     dim=1)", "\n", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "\n", "", "", "else", ":", "\n", "            ", "if", "self", ".", "args", ".", "rew_pred_type", "==", "'bernoulli'", ":", "\n", "                ", "rew_pred", "=", "self", ".", "reward_decoder", "(", "dec_embedding", ",", "dec_next_obs", ")", "\n", "loss_rew", "=", "F", ".", "binary_cross_entropy", "(", "rew_pred", ",", "(", "dec_rewards", "==", "1", ")", ".", "float", "(", ")", ",", "reduction", "=", "'none'", ")", ".", "mean", "(", "dim", "=", "1", ")", "\n", "", "elif", "self", ".", "args", ".", "rew_pred_type", "==", "'deterministic'", ":", "\n", "                ", "rew_pred", "=", "self", ".", "reward_decoder", "(", "dec_embedding", ",", "dec_next_obs", ",", "dec_prev_obs", ",", "dec_actions", ")", "\n", "loss_rew", "=", "(", "rew_pred", "-", "dec_rewards", ")", ".", "pow", "(", "2", ")", ".", "mean", "(", "dim", "=", "1", ")", "\n", "", "elif", "self", ".", "args", ".", "rew_pred_type", "==", "'gaussian'", ":", "\n", "                ", "rew_pred", "=", "self", ".", "reward_decoder", "(", "dec_embedding", ",", "dec_next_obs", ",", "dec_prev_obs", ",", "dec_actions", ")", ".", "mean", "(", "dim", "=", "1", ")", "\n", "rew_pred_mean", "=", "rew_pred", "[", ":", ",", ":", "rew_pred", ".", "shape", "[", "1", "]", "//", "2", "]", "\n", "rew_pred_std", "=", "torch", ".", "exp", "(", "0.5", "*", "rew_pred", "[", ":", ",", "rew_pred", ".", "shape", "[", "1", "]", "//", "2", ":", "]", ")", "\n", "m", "=", "torch", ".", "distributions", ".", "normal", ".", "Normal", "(", "rew_pred_mean", ",", "rew_pred_std", ")", "\n", "loss_rew", "=", "-", "m", ".", "log_prob", "(", "dec_rewards", ")", "\n", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "\n", "\n", "", "", "if", "return_predictions", ":", "\n", "            ", "return", "loss_rew", ",", "rew_pred", "\n", "", "else", ":", "\n", "            ", "return", "loss_rew", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.models.vae.VAE.compute_kl_loss": [[200, 229], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "len", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "latent_logvar.exp", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "latent_mean.pow", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.ones", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.ones", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.ones", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.ones", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.zeros", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.zeros", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.zeros", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.zeros", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.zeros", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.zeros", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.zeros", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.zeros"], ["", "", "def", "compute_kl_loss", "(", "self", ",", "latent_mean", ",", "latent_logvar", ",", "len_encoder", ")", ":", "\n", "\n", "# -- KL divergence", "\n", "        ", "if", "self", ".", "args", ".", "kl_to_gauss_prior", ":", "\n", "            ", "kl_divergences", "=", "(", "-", "0.5", "*", "(", "1", "+", "latent_logvar", "-", "latent_mean", ".", "pow", "(", "2", ")", "-", "latent_logvar", ".", "exp", "(", ")", ")", ".", "sum", "(", "dim", "=", "1", ")", ")", "\n", "", "else", ":", "\n", "            ", "gauss_dim", "=", "latent_mean", ".", "shape", "[", "-", "1", "]", "\n", "# add the gaussian prior", "\n", "all_means", "=", "torch", ".", "cat", "(", "(", "torch", ".", "zeros", "(", "1", ",", "latent_mean", ".", "shape", "[", "1", "]", ")", ".", "to", "(", "ptu", ".", "device", ")", ",", "latent_mean", ")", ")", "\n", "all_logvars", "=", "torch", ".", "cat", "(", "(", "torch", ".", "zeros", "(", "1", ",", "latent_logvar", ".", "shape", "[", "1", "]", ")", ".", "to", "(", "ptu", ".", "device", ")", ",", "latent_logvar", ")", ")", "\n", "# https://arxiv.org/pdf/1811.09975.pdf", "\n", "# KL(N(mu,E)||N(m,S)) = 0.5 * (log(|S|/|E|) - K + tr(S^-1 E) + (m-mu)^T S^-1 (m-mu)))", "\n", "mu", "=", "all_means", "[", "1", ":", "]", "\n", "m", "=", "all_means", "[", ":", "-", "1", "]", "\n", "logE", "=", "all_logvars", "[", "1", ":", "]", "\n", "logS", "=", "all_logvars", "[", ":", "-", "1", "]", "\n", "kl_divergences", "=", "0.5", "*", "(", "torch", ".", "sum", "(", "logS", ",", "dim", "=", "1", ")", "-", "torch", ".", "sum", "(", "logE", ",", "dim", "=", "1", ")", "-", "gauss_dim", "+", "torch", ".", "sum", "(", "\n", "1", "/", "torch", ".", "exp", "(", "logS", ")", "*", "torch", ".", "exp", "(", "logE", ")", ",", "dim", "=", "1", ")", "+", "(", "(", "m", "-", "mu", ")", "/", "torch", ".", "exp", "(", "logS", ")", "*", "(", "m", "-", "mu", ")", ")", ".", "sum", "(", "dim", "=", "1", ")", ")", "\n", "\n", "", "if", "self", ".", "args", ".", "learn_prior", ":", "\n", "            ", "mask", "=", "torch", ".", "ones", "(", "len", "(", "kl_divergences", ")", ")", "\n", "mask", "[", "0", "]", "=", "0", "\n", "kl_divergences", "=", "kl_divergences", "*", "mask", "\n", "\n", "# returns, for each ELBO_t term, one KL (so H+1 kl's)", "\n", "", "if", "len_encoder", "is", "not", "None", ":", "\n", "            ", "return", "kl_divergences", "[", "len_encoder", "]", "\n", "", "else", ":", "\n", "            ", "return", "kl_divergences", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.models.vae.VAE.compute_belief_reward": [[230, 267], ["vae.VAE.encoder._sample_gaussian", "next_obs.repeat.repeat.dim", "next_obs.repeat.repeat.repeat", "next_obs.repeat.repeat.repeat", "obs.repeat", "actions.repeat", "obs.repeat", "actions.repeat", "vae.VAE.reward_decoder().detach", "p_rew.mean.mean.mean", "gym.make", "gym.make.task_to_id().to", "p_rew.mean.mean.gather", "vae.VAE.reward_decoder", "rew_pred.mean.mean.mean", "indices.unsqueeze.unsqueeze.dim", "p_rew.mean.mean.dim", "indices.unsqueeze.unsqueeze.unsqueeze", "vae.VAE.reward_decoder", "gym.make.task_to_id"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.models.encoder.RNNEncoder._sample_gaussian", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjContactWrapper.dim", "home.repos.pwc.inspect_result.Rondorf_BOReL.envs.registration.make", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjContactWrapper.dim", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjContactWrapper.dim", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.task_to_id"], ["", "", "def", "compute_belief_reward", "(", "self", ",", "task_means", ",", "task_logvars", ",", "obs", ",", "next_obs", ",", "actions", ")", ":", "\n", "        ", "\"\"\"\n        compute reward in the BAMDP by averaging over sampled latent embeddings - R+ = E[R(b)]\n        \"\"\"", "\n", "# sample multiple latent embeddings from posterior - (n_samples, n_processes, latent_dim)", "\n", "task_samples", "=", "self", ".", "encoder", ".", "_sample_gaussian", "(", "task_means", ",", "task_logvars", ",", "self", ".", "args", ".", "num_belief_samples", ")", "\n", "if", "next_obs", ".", "dim", "(", ")", ">", "2", ":", "\n", "            ", "next_obs", "=", "next_obs", ".", "repeat", "(", "self", ".", "args", ".", "num_belief_samples", ",", "1", ",", "1", ")", "\n", "obs", "=", "obs", ".", "repeat", "(", "self", ".", "args", ".", "num_belief_samples", ",", "1", ",", "1", ")", "if", "obs", "is", "not", "None", "else", "None", "\n", "actions", "=", "actions", ".", "repeat", "(", "self", ".", "args", ".", "num_belief_samples", ",", "1", ",", "1", ")", "if", "actions", "is", "not", "None", "else", "None", "\n", "", "else", ":", "\n", "            ", "next_obs", "=", "next_obs", ".", "repeat", "(", "self", ".", "args", ".", "num_belief_samples", ",", "1", ")", "\n", "obs", "=", "obs", ".", "repeat", "(", "self", ".", "args", ".", "num_belief_samples", ",", "1", ")", "if", "obs", "is", "not", "None", "else", "None", "\n", "actions", "=", "actions", ".", "repeat", "(", "self", ".", "args", ".", "num_belief_samples", ",", "1", ")", "if", "actions", "is", "not", "None", "else", "None", "\n", "# make some predictions and average", "\n", "", "if", "self", ".", "args", ".", "multihead_for_reward", ":", "\n", "            ", "if", "self", ".", "args", ".", "rew_pred_type", "==", "'bernoulli'", ":", "# or self.args.rew_pred_type == 'categorical':", "\n", "                ", "p_rew", "=", "self", ".", "reward_decoder", "(", "task_samples", ",", "None", ")", ".", "detach", "(", ")", "\n", "# average over samples dimension to get R+", "\n", "p_rew", "=", "p_rew", ".", "mean", "(", "dim", "=", "0", ")", "\n", "env", "=", "gym", ".", "make", "(", "self", ".", "args", ".", "env_name", ")", "\n", "indices", "=", "env", ".", "task_to_id", "(", "next_obs", ")", ".", "to", "(", "ptu", ".", "device", ")", "\n", "if", "indices", ".", "dim", "(", ")", "<", "p_rew", ".", "dim", "(", ")", ":", "\n", "                    ", "indices", "=", "indices", ".", "unsqueeze", "(", "-", "1", ")", "\n", "", "rew_pred", "=", "p_rew", ".", "gather", "(", "dim", "=", "-", "1", ",", "index", "=", "indices", ")", "\n", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "\n", "", "", "else", ":", "\n", "            ", "if", "self", ".", "args", ".", "rew_pred_type", "==", "'deterministic'", ":", "\n", "                ", "rew_pred", "=", "self", ".", "reward_decoder", "(", "task_samples", ",", "\n", "next_obs", ",", "\n", "obs", ",", "\n", "actions", ")", "\n", "rew_pred", "=", "rew_pred", ".", "mean", "(", "dim", "=", "0", ")", "\n", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "\n", "", "", "return", "rew_pred", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.models.vae.VAE.load_model": [[268, 277], ["vae.VAE.encoder.load_state_dict", "vae.VAE.reward_decoder.load_state_dict", "vae.VAE.state_decoder.load_state_dict", "vae.VAE.task_decoder.load_state_dict", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.envs.registration.load", "home.repos.pwc.inspect_result.Rondorf_BOReL.envs.registration.load", "home.repos.pwc.inspect_result.Rondorf_BOReL.envs.registration.load", "home.repos.pwc.inspect_result.Rondorf_BOReL.envs.registration.load", "home.repos.pwc.inspect_result.Rondorf_BOReL.envs.registration.load", "home.repos.pwc.inspect_result.Rondorf_BOReL.envs.registration.load", "home.repos.pwc.inspect_result.Rondorf_BOReL.envs.registration.load", "home.repos.pwc.inspect_result.Rondorf_BOReL.envs.registration.load", "home.repos.pwc.inspect_result.Rondorf_BOReL.envs.registration.load", "home.repos.pwc.inspect_result.Rondorf_BOReL.envs.registration.load", "home.repos.pwc.inspect_result.Rondorf_BOReL.envs.registration.load", "home.repos.pwc.inspect_result.Rondorf_BOReL.envs.registration.load", "home.repos.pwc.inspect_result.Rondorf_BOReL.envs.registration.load", "home.repos.pwc.inspect_result.Rondorf_BOReL.envs.registration.load", "home.repos.pwc.inspect_result.Rondorf_BOReL.envs.registration.load", "home.repos.pwc.inspect_result.Rondorf_BOReL.envs.registration.load"], ["", "def", "load_model", "(", "self", ",", "device", "=", "'cpu'", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "\"encoder_path\"", "in", "kwargs", ":", "\n", "            ", "self", ".", "encoder", ".", "load_state_dict", "(", "torch", ".", "load", "(", "kwargs", "[", "\"encoder_path\"", "]", ",", "map_location", "=", "device", ")", ")", "\n", "", "if", "\"reward_decoder_path\"", "in", "kwargs", "and", "self", ".", "reward_decoder", "is", "not", "None", ":", "\n", "            ", "self", ".", "reward_decoder", ".", "load_state_dict", "(", "torch", ".", "load", "(", "kwargs", "[", "\"reward_decoder_path\"", "]", ",", "map_location", "=", "device", ")", ")", "\n", "", "if", "\"state_decoder_path\"", "in", "kwargs", "and", "self", ".", "state_decoder", "is", "not", "None", ":", "\n", "            ", "self", ".", "state_decoder", ".", "load_state_dict", "(", "torch", ".", "load", "(", "kwargs", "[", "\"state_decoder_path\"", "]", ",", "map_location", "=", "device", ")", ")", "\n", "", "if", "\"task_decoder_path\"", "in", "kwargs", "and", "self", ".", "task_decoder", "is", "not", "None", ":", "\n", "            ", "self", ".", "task_decoder", ".", "load_state_dict", "(", "torch", ".", "load", "(", "kwargs", "[", "\"task_decoder_path\"", "]", ",", "map_location", "=", "device", ")", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.Rondorf_BOReL.data_collection_config.args_cheetah_vel.get_args": [[6, 46], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["None"], ["def", "get_args", "(", "rest_args", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'--env-name'", ",", "default", "=", "'HalfCheetahVel-v0'", ")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "type", "=", "int", ",", "default", "=", "73", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--belief-rewards'", ",", "default", "=", "False", ",", "help", "=", "'use R+=E[R]'", ")", "\n", "parser", ".", "add_argument", "(", "'--num-belief-samples'", ",", "default", "=", "20", ")", "\n", "parser", ".", "add_argument", "(", "'--num-train-tasks'", ",", "default", "=", "100", ")", "\n", "parser", ".", "add_argument", "(", "'--num-eval-tasks'", ",", "default", "=", "20", ")", "\n", "parser", ".", "add_argument", "(", "'--hindsight-relabelling'", ",", "default", "=", "False", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--num-trajs-per-task'", ",", "type", "=", "int", ",", "default", "=", "None", ",", "\n", "help", "=", "'how many trajs per task to use. If None - use all'", ")", "\n", "parser", ".", "add_argument", "(", "'--meta-batch'", ",", "type", "=", "int", ",", "default", "=", "16", ",", "\n", "help", "=", "'number of tasks to average the gradient across'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--num-iters'", ",", "type", "=", "int", ",", "default", "=", "1000", ",", "help", "=", "'number meta-training iterates'", ")", "\n", "parser", ".", "add_argument", "(", "'--rl-updates-per-iter'", ",", "type", "=", "int", ",", "default", "=", "1000", ",", "help", "=", "'number of RL steps per iteration'", ")", "\n", "parser", ".", "add_argument", "(", "'--batch-size'", ",", "type", "=", "int", ",", "default", "=", "256", ",", "help", "=", "'number of transitions in RL batch (per task)'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--dqn-layers'", ",", "nargs", "=", "'+'", ",", "default", "=", "[", "256", ",", "256", "]", ")", "\n", "parser", ".", "add_argument", "(", "'--policy-layers'", ",", "nargs", "=", "'+'", ",", "default", "=", "[", "256", ",", "256", "]", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--actor-lr'", ",", "type", "=", "float", ",", "default", "=", "0.0003", ",", "help", "=", "'learning rate for actor (default: 3e-4)'", ")", "\n", "parser", ".", "add_argument", "(", "'--critic-lr'", ",", "type", "=", "float", ",", "default", "=", "0.0003", ",", "help", "=", "'learning rate for critic (default: 3e-4)'", ")", "\n", "parser", ".", "add_argument", "(", "'--clip-grad-value'", ",", "type", "=", "float", ",", "default", "=", "None", ",", "help", "=", "'clip gradients'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--entropy-alpha'", ",", "type", "=", "float", ",", "default", "=", "0.2", ",", "help", "=", "'Entropy coefficient'", ")", "\n", "parser", ".", "add_argument", "(", "'--automatic-entropy-tuning'", ",", "default", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "'--alpha-lr'", ",", "type", "=", "float", ",", "default", "=", "None", ",", "\n", "help", "=", "'learning rate for entropy coeff, if automatic tuning is True (default: 3e-4)'", ")", "\n", "parser", ".", "add_argument", "(", "'--gamma'", ",", "type", "=", "float", ",", "default", "=", "0.99", ",", "help", "=", "'discount factor for rewards (default: 0.99)'", ")", "\n", "parser", ".", "add_argument", "(", "'--soft-target-tau'", ",", "type", "=", "float", ",", "default", "=", "0.005", ",", "\n", "help", "=", "'soft target network update (default: 5e-3)'", ")", "\n", "parser", ".", "add_argument", "(", "'--eval-deterministic'", ",", "default", "=", "True", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--transform-data-bamdp'", ",", "default", "=", "False", ",", "\n", "help", "=", "'If true - perform state relabelling to bamdp, else - use existing data'", ")", "\n", "\n", "# logging, saving, evaluation", "\n", "parser", ".", "add_argument", "(", "'--log-interval'", ",", "type", "=", "int", ",", "default", "=", "10", ",", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.data_collection_config.args_point_robot_sparse.get_args": [[6, 46], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["None"], ["def", "get_args", "(", "rest_args", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'--env-name'", ",", "default", "=", "'PointRobotSparse-v0'", ")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "type", "=", "int", ",", "default", "=", "73", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--belief-rewards'", ",", "default", "=", "False", ",", "help", "=", "'use R+=E[R]'", ")", "\n", "parser", ".", "add_argument", "(", "'--num-belief-samples'", ",", "default", "=", "20", ")", "\n", "parser", ".", "add_argument", "(", "'--num-train-tasks'", ",", "default", "=", "80", ")", "\n", "parser", ".", "add_argument", "(", "'--num-eval-tasks'", ",", "default", "=", "20", ")", "\n", "parser", ".", "add_argument", "(", "'--hindsight-relabelling'", ",", "default", "=", "False", ")", "\n", "\n", "# parser.add_argument('--num-trajs-per-task', type=int, default=None,", "\n", "#                     help='how many trajs per task to use. If None - use all')", "\n", "parser", ".", "add_argument", "(", "'--num-trajs-per-task'", ",", "type", "=", "int", ",", "default", "=", "500", ",", "\n", "help", "=", "'how many trajs per task to use. If None - use all'", ")", "\n", "parser", ".", "add_argument", "(", "'--meta-batch'", ",", "type", "=", "int", ",", "default", "=", "16", ",", "\n", "help", "=", "'number of tasks to average the gradient across'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--num-iters'", ",", "type", "=", "int", ",", "default", "=", "5000", ",", "help", "=", "'number meta-training iterates'", ")", "\n", "parser", ".", "add_argument", "(", "'--rl-updates-per-iter'", ",", "type", "=", "int", ",", "default", "=", "1000", ",", "help", "=", "'number of RL steps per iteration'", ")", "\n", "parser", ".", "add_argument", "(", "'--batch-size'", ",", "type", "=", "int", ",", "default", "=", "256", ",", "help", "=", "'number of transitions in RL batch (per task)'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--dqn-layers'", ",", "nargs", "=", "'+'", ",", "default", "=", "[", "128", ",", "128", "]", ")", "\n", "parser", ".", "add_argument", "(", "'--policy-layers'", ",", "nargs", "=", "'+'", ",", "default", "=", "[", "128", ",", "128", "]", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--actor-lr'", ",", "type", "=", "float", ",", "default", "=", "0.0003", ",", "help", "=", "'learning rate for actor (default: 3e-4)'", ")", "\n", "parser", ".", "add_argument", "(", "'--critic-lr'", ",", "type", "=", "float", ",", "default", "=", "0.0003", ",", "help", "=", "'learning rate for critic (default: 3e-4)'", ")", "\n", "parser", ".", "add_argument", "(", "'--clip-grad-value'", ",", "type", "=", "float", ",", "default", "=", "None", ",", "help", "=", "'clip gradients'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--entropy-alpha'", ",", "type", "=", "float", ",", "default", "=", "0.01", ",", "help", "=", "'Entropy coefficient'", ")", "\n", "parser", ".", "add_argument", "(", "'--automatic-entropy-tuning'", ",", "default", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "'--alpha-lr'", ",", "type", "=", "float", ",", "default", "=", "None", ",", "\n", "help", "=", "'learning rate for entropy coeff, if automatic tuning is True (default: 3e-4)'", ")", "\n", "parser", ".", "add_argument", "(", "'--gamma'", ",", "type", "=", "float", ",", "default", "=", "0.9", ",", "help", "=", "'discount factor for rewards (default: 0.99)'", ")", "\n", "parser", ".", "add_argument", "(", "'--soft-target-tau'", ",", "type", "=", "float", ",", "default", "=", "0.005", ",", "\n", "help", "=", "'soft target network update (default: 5e-3)'", ")", "\n", "parser", ".", "add_argument", "(", "'--eval-deterministic'", ",", "default", "=", "True", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--transform-data-bamdp'", ",", "default", "=", "False", ",", "\n", "help", "=", "'If true - perform state relabelling to bamdp, else - use existing data'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.data_collection_config.args_ant_semicircle_sparse.get_args": [[6, 48], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["None"], ["def", "get_args", "(", "rest_args", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'--env-name'", ",", "default", "=", "'AntSemiCircleSparse-v0'", ")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "type", "=", "int", ",", "default", "=", "73", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--belief-rewards'", ",", "default", "=", "False", ",", "help", "=", "'use R+=E[R]'", ")", "\n", "parser", ".", "add_argument", "(", "'--num-belief-samples'", ",", "default", "=", "20", ")", "\n", "parser", ".", "add_argument", "(", "'--num-train-tasks'", ",", "default", "=", "80", ")", "\n", "parser", ".", "add_argument", "(", "'--num-eval-tasks'", ",", "default", "=", "20", ")", "\n", "parser", ".", "add_argument", "(", "'--hindsight-relabelling'", ",", "default", "=", "False", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--num-trajs-per-task'", ",", "type", "=", "int", ",", "default", "=", "None", ",", "\n", "help", "=", "'how many trajs per task to use. If None - use all'", ")", "\n", "parser", ".", "add_argument", "(", "'--meta-batch'", ",", "type", "=", "int", ",", "default", "=", "16", ",", "\n", "help", "=", "'number of tasks to average the gradient across'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--num-iters'", ",", "type", "=", "int", ",", "default", "=", "3000", ",", "help", "=", "'number meta-training iterates'", ")", "\n", "parser", ".", "add_argument", "(", "'--rl-updates-per-iter'", ",", "type", "=", "int", ",", "default", "=", "2000", ",", "help", "=", "'number of RL steps per iteration'", ")", "\n", "parser", ".", "add_argument", "(", "'--batch-size'", ",", "type", "=", "int", ",", "default", "=", "256", ",", "help", "=", "'number of transitions in RL batch (per task)'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--dqn-layers'", ",", "nargs", "=", "'+'", ",", "default", "=", "[", "256", ",", "256", "]", ")", "\n", "parser", ".", "add_argument", "(", "'--policy-layers'", ",", "nargs", "=", "'+'", ",", "default", "=", "[", "256", ",", "256", "]", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--actor-lr'", ",", "type", "=", "float", ",", "default", "=", "0.00003", ",", "help", "=", "'learning rate for actor (default: 3e-4)'", ")", "\n", "parser", ".", "add_argument", "(", "'--critic-lr'", ",", "type", "=", "float", ",", "default", "=", "0.0003", ",", "help", "=", "'learning rate for critic (default: 3e-4)'", ")", "\n", "parser", ".", "add_argument", "(", "'--clip-grad-value'", ",", "type", "=", "float", ",", "default", "=", "None", ",", "help", "=", "'clip gradients'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--entropy-alpha'", ",", "type", "=", "float", ",", "default", "=", "0.2", ",", "help", "=", "'Entropy coefficient'", ")", "\n", "parser", ".", "add_argument", "(", "'--automatic-entropy-tuning'", ",", "default", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "'--alpha-lr'", ",", "type", "=", "float", ",", "default", "=", "None", ",", "\n", "help", "=", "'learning rate for entropy coeff, if automatic tuning is True'", ")", "\n", "parser", ".", "add_argument", "(", "'--gamma'", ",", "type", "=", "float", ",", "default", "=", "0.99", ",", "help", "=", "'discount factor for rewards (default: 0.99)'", ")", "\n", "parser", ".", "add_argument", "(", "'--soft-target-tau'", ",", "type", "=", "float", ",", "default", "=", "0.005", ",", "\n", "help", "=", "'soft target network update (default: 5e-3)'", ")", "\n", "parser", ".", "add_argument", "(", "'--eval-deterministic'", ",", "default", "=", "True", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--transform-data-bamdp'", ",", "default", "=", "False", ",", "\n", "help", "=", "'If true - perform state relabelling to bamdp, else - use existing data'", ")", "\n", "\n", "# Ablation", "\n", "parser", ".", "add_argument", "(", "'--use-cql'", ",", "default", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "'--alpha-cql'", ",", "default", "=", "2.", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.data_collection_config.args_gridworld.get_args": [[6, 49], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["None"], ["def", "get_args", "(", "rest_args", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'--env-name'", ",", "default", "=", "'GridNavi-v2'", ")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "type", "=", "int", ",", "default", "=", "73", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--belief-rewards'", ",", "default", "=", "False", ",", "help", "=", "'use R+=E[R]'", ")", "\n", "parser", ".", "add_argument", "(", "'--num-belief-samples'", ",", "default", "=", "20", ")", "\n", "parser", ".", "add_argument", "(", "'--num-train-tasks'", ",", "default", "=", "21", ")", "\n", "parser", ".", "add_argument", "(", "'--num-eval-tasks'", ",", "default", "=", "21", ")", "\n", "parser", ".", "add_argument", "(", "'--hindsight-relabelling'", ",", "default", "=", "False", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--num-trajs-per-task'", ",", "type", "=", "int", ",", "default", "=", "None", ",", "\n", "help", "=", "'how many trajs per task to use. If None - use all'", ")", "\n", "parser", ".", "add_argument", "(", "'--meta-batch'", ",", "type", "=", "int", ",", "default", "=", "16", ",", "\n", "help", "=", "'number of tasks to average the gradient across'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--num-iters'", ",", "type", "=", "int", ",", "default", "=", "1000", ",", "help", "=", "'number meta-training iterates'", ")", "\n", "parser", ".", "add_argument", "(", "'--rl-updates-per-iter'", ",", "type", "=", "int", ",", "default", "=", "250", ",", "help", "=", "'number of RL steps per iteration'", ")", "\n", "parser", ".", "add_argument", "(", "'--batch-size'", ",", "type", "=", "int", ",", "default", "=", "256", ",", "help", "=", "'number of transitions in RL batch (per task)'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--dqn-layers'", ",", "nargs", "=", "'+'", ",", "default", "=", "[", "64", ",", "64", "]", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--policy-lr'", ",", "type", "=", "float", ",", "default", "=", "0.0003", ",", "help", "=", "'learning rate for policy (default: 3e-4)'", ")", "\n", "parser", ".", "add_argument", "(", "'--gamma'", ",", "type", "=", "float", ",", "default", "=", "0.99", ",", "help", "=", "'discount factor for rewards (default: 0.99)'", ")", "\n", "parser", ".", "add_argument", "(", "'--soft-target-tau'", ",", "type", "=", "float", ",", "default", "=", "0.005", ",", "\n", "help", "=", "'soft target network update (default: 5e-3)'", ")", "\n", "parser", ".", "add_argument", "(", "'--eval-deterministic'", ",", "default", "=", "True", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--transform-data-bamdp'", ",", "default", "=", "False", ",", "\n", "help", "=", "'If true - perform state relabelling to bamdp, else - use existing data'", ")", "\n", "\n", "# logging, saving, evaluation", "\n", "parser", ".", "add_argument", "(", "'--log-interval'", ",", "type", "=", "int", ",", "default", "=", "10", ",", "\n", "help", "=", "'log interval, one log per n iterations (default: 10)'", ")", "\n", "parser", ".", "add_argument", "(", "'--save-interval'", ",", "type", "=", "int", ",", "default", "=", "100", ",", "\n", "help", "=", "'save models interval, every # iterations (default: 100)'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--log-tensorboard'", ",", "default", "=", "True", ",", "help", "=", "'whether to use tb logger'", ")", "\n", "parser", ".", "add_argument", "(", "'--use-gpu'", ",", "default", "=", "True", ",", "help", "=", "'whether to use gpu'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--results-log-dir'", ",", "default", "=", "None", ",", "help", "=", "'directory to save agent logs (default: ./logs)'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--output-file-prefix'", ",", "default", "=", "'offline'", ")", "\n", "# parser.add_argument('--output-file-prefix', default='offline_no_rr')", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.core.PyTorchModule.get_param_values": [[14, 16], ["core.PyTorchModule.state_dict"], "methods", ["None"], ["    ", "def", "get_param_values", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "state_dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.core.PyTorchModule.set_param_values": [[17, 19], ["core.PyTorchModule.load_state_dict"], "methods", ["None"], ["", "def", "set_param_values", "(", "self", ",", "param_values", ")", ":", "\n", "        ", "self", ".", "load_state_dict", "(", "param_values", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.core.PyTorchModule.get_param_values_np": [[20, 26], ["core.PyTorchModule.state_dict", "collections.OrderedDict", "core.PyTorchModule.items", "torchkit.pytorch_utils.get_numpy"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.get_numpy"], ["", "def", "get_param_values_np", "(", "self", ")", ":", "\n", "        ", "state_dict", "=", "self", ".", "state_dict", "(", ")", "\n", "np_dict", "=", "OrderedDict", "(", ")", "\n", "for", "key", ",", "tensor", "in", "state_dict", ".", "items", "(", ")", ":", "\n", "            ", "np_dict", "[", "key", "]", "=", "ptu", ".", "get_numpy", "(", "tensor", ")", "\n", "", "return", "np_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.core.PyTorchModule.set_param_values_np": [[27, 32], ["collections.OrderedDict", "param_values.items", "core.PyTorchModule.load_state_dict", "torchkit.pytorch_utils.from_numpy"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.from_numpy"], ["", "def", "set_param_values_np", "(", "self", ",", "param_values", ")", ":", "\n", "        ", "torch_dict", "=", "OrderedDict", "(", ")", "\n", "for", "key", ",", "tensor", "in", "param_values", ".", "items", "(", ")", ":", "\n", "            ", "torch_dict", "[", "key", "]", "=", "ptu", ".", "from_numpy", "(", "tensor", ")", "\n", "", "self", ".", "load_state_dict", "(", "torch_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.core.PyTorchModule.copy": [[33, 37], ["torchkit.serializable.Serializable.clone", "torchkit.pytorch_utils.copy_model_params_from_to"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.core.serializable.Serializable.clone", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.copy_model_params_from_to"], ["", "def", "copy", "(", "self", ")", ":", "\n", "        ", "copy", "=", "Serializable", ".", "clone", "(", "self", ")", "\n", "ptu", ".", "copy_model_params_from_to", "(", "self", ",", "copy", ")", "\n", "return", "copy", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.core.PyTorchModule.save_init_params": [[38, 53], ["torchkit.serializable.Serializable.quick_init"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.core.serializable.Serializable.quick_init"], ["", "def", "save_init_params", "(", "self", ",", "locals", ")", ":", "\n", "        ", "\"\"\"\n        Should call this FIRST THING in the __init__ method if you ever want\n        to serialize or clone this network.\n\n        Usage:\n        ```\n        def __init__(self, ...):\n            self.init_serialization(locals())\n            ...\n        ```\n        :param locals:\n        :return:\n        \"\"\"", "\n", "Serializable", ".", "quick_init", "(", "self", ",", "locals", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.core.PyTorchModule.__getstate__": [[54, 58], ["torchkit.serializable.Serializable.__getstate__", "core.PyTorchModule.get_param_values"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.core.serializable.Serializable.__getstate__", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.policies_base.SerializablePolicy.get_param_values"], ["", "def", "__getstate__", "(", "self", ")", ":", "\n", "        ", "d", "=", "Serializable", ".", "__getstate__", "(", "self", ")", "\n", "d", "[", "\"params\"", "]", "=", "self", ".", "get_param_values", "(", ")", "\n", "return", "d", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.core.PyTorchModule.__setstate__": [[59, 62], ["torchkit.serializable.Serializable.__setstate__", "core.PyTorchModule.set_param_values"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.core.serializable.Serializable.__setstate__", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.policies_base.SerializablePolicy.set_param_values"], ["", "def", "__setstate__", "(", "self", ",", "d", ")", ":", "\n", "        ", "Serializable", ".", "__setstate__", "(", "self", ",", "d", ")", "\n", "self", ".", "set_param_values", "(", "d", "[", "\"params\"", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.core.PyTorchModule.regularizable_parameters": [[63, 74], ["core.PyTorchModule.parameters", "len", "param.size"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjvGeomWrapper.size"], ["", "def", "regularizable_parameters", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Return generator of regularizable parameters. Right now, all non-flat\n        vectors are assumed to be regularizabled, presumably because only\n        biases are flat.\n\n        :return:\n        \"\"\"", "\n", "for", "param", "in", "self", ".", "parameters", "(", ")", ":", "\n", "            ", "if", "len", "(", "param", ".", "size", "(", ")", ")", ">", "1", ":", "\n", "                ", "yield", "param", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.core.PyTorchModule.eval_np": [[75, 91], ["tuple", "core.PyTorchModule.__call__", "isinstance", "core.torch_ify", "tuple", "core.np_ify", "core.torch_ify", "kwargs.items", "core.np_ify"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.spaces.multi_discrete.BoxToMultiDiscrete.__call__", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.core.torch_ify", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.core.np_ify", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.core.torch_ify", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.core.np_ify"], ["", "", "", "def", "eval_np", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n        Eval this module with a numpy interface\n\n        Same as a call to __call__ except all Variable input/outputs are\n        replaced with numpy equivalents.\n\n        Assumes the output is either a single object or a tuple of objects.\n        \"\"\"", "\n", "torch_args", "=", "tuple", "(", "torch_ify", "(", "x", ")", "for", "x", "in", "args", ")", "\n", "torch_kwargs", "=", "{", "k", ":", "torch_ify", "(", "v", ")", "for", "k", ",", "v", "in", "kwargs", ".", "items", "(", ")", "}", "\n", "outputs", "=", "self", ".", "__call__", "(", "*", "torch_args", ",", "**", "torch_kwargs", ")", "\n", "if", "isinstance", "(", "outputs", ",", "tuple", ")", ":", "\n", "            ", "return", "tuple", "(", "np_ify", "(", "x", ")", "for", "x", "in", "outputs", ")", "\n", "", "else", ":", "\n", "            ", "return", "np_ify", "(", "outputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.core.torch_ify": [[93, 98], ["isinstance", "torchkit.pytorch_utils.from_numpy"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.from_numpy"], ["", "", "", "def", "torch_ify", "(", "np_array_or_other", ")", ":", "\n", "    ", "if", "isinstance", "(", "np_array_or_other", ",", "np", ".", "ndarray", ")", ":", "\n", "        ", "return", "ptu", ".", "from_numpy", "(", "np_array_or_other", ")", "\n", "", "else", ":", "\n", "        ", "return", "np_array_or_other", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.core.np_ify": [[100, 105], ["isinstance", "torchkit.pytorch_utils.get_numpy"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.get_numpy"], ["", "", "def", "np_ify", "(", "tensor_or_other", ")", ":", "\n", "    ", "if", "isinstance", "(", "tensor_or_other", ",", "Variable", ")", ":", "\n", "        ", "return", "ptu", ".", "get_numpy", "(", "tensor_or_other", ")", "\n", "", "else", ":", "\n", "        ", "return", "tensor_or_other", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.networks.Mlp.__init__": [[18, 63], ["networks.Mlp.save_init_params", "torchkit.core.PyTorchModule.__init__", "enumerate", "torch.nn.Linear", "networks.Mlp.last_fc.weight.data.uniform_", "networks.Mlp.last_fc.bias.data.uniform_", "locals", "dict", "torch.nn.Linear", "hidden_init", "torch.nn.Linear.bias.data.fill_", "networks.Mlp.__setattr__", "networks.Mlp.fcs.append", "torchkit.modules.LayerNorm", "networks.Mlp.__setattr__", "networks.Mlp.layer_norms.append"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.core.PyTorchModule.save_init_params", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.__init__", "home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.GymObject.__setattr__", "home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.GymObject.__setattr__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "hidden_sizes", ",", "\n", "output_size", ",", "\n", "input_size", ",", "\n", "init_w", "=", "3e-3", ",", "\n", "hidden_activation", "=", "F", ".", "relu", ",", "\n", "output_activation", "=", "ptu", ".", "identity", ",", "\n", "hidden_init", "=", "ptu", ".", "fanin_init", ",", "\n", "b_init_value", "=", "0.1", ",", "\n", "layer_norm", "=", "False", ",", "\n", "layer_norm_kwargs", "=", "None", ",", "\n", ")", ":", "\n", "        ", "self", ".", "save_init_params", "(", "locals", "(", ")", ")", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "if", "layer_norm_kwargs", "is", "None", ":", "\n", "            ", "layer_norm_kwargs", "=", "dict", "(", ")", "\n", "\n", "", "self", ".", "input_size", "=", "input_size", "\n", "self", ".", "output_size", "=", "output_size", "\n", "self", ".", "hidden_sizes", "=", "hidden_sizes", "\n", "self", ".", "hidden_activation", "=", "hidden_activation", "\n", "self", ".", "output_activation", "=", "output_activation", "\n", "self", ".", "layer_norm", "=", "layer_norm", "\n", "self", ".", "fcs", "=", "[", "]", "\n", "self", ".", "layer_norms", "=", "[", "]", "\n", "in_size", "=", "input_size", "\n", "\n", "for", "i", ",", "next_size", "in", "enumerate", "(", "hidden_sizes", ")", ":", "\n", "            ", "fc", "=", "nn", ".", "Linear", "(", "in_size", ",", "next_size", ")", "\n", "in_size", "=", "next_size", "\n", "hidden_init", "(", "fc", ".", "weight", ")", "\n", "fc", ".", "bias", ".", "data", ".", "fill_", "(", "b_init_value", ")", "\n", "self", ".", "__setattr__", "(", "\"fc{}\"", ".", "format", "(", "i", ")", ",", "fc", ")", "\n", "self", ".", "fcs", ".", "append", "(", "fc", ")", "\n", "\n", "if", "self", ".", "layer_norm", ":", "\n", "                ", "ln", "=", "LayerNorm", "(", "next_size", ")", "\n", "self", ".", "__setattr__", "(", "\"layer_norm{}\"", ".", "format", "(", "i", ")", ",", "ln", ")", "\n", "self", ".", "layer_norms", ".", "append", "(", "ln", ")", "\n", "\n", "", "", "self", ".", "last_fc", "=", "nn", ".", "Linear", "(", "in_size", ",", "output_size", ")", "\n", "self", ".", "last_fc", ".", "weight", ".", "data", ".", "uniform_", "(", "-", "init_w", ",", "init_w", ")", "\n", "self", ".", "last_fc", ".", "bias", ".", "data", ".", "uniform_", "(", "-", "init_w", ",", "init_w", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.networks.Mlp.forward": [[64, 77], ["enumerate", "networks.Mlp.last_fc", "networks.Mlp.output_activation", "fc", "networks.Mlp.hidden_activation", "len"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ",", "return_preactivations", "=", "False", ")", ":", "\n", "        ", "h", "=", "input", "\n", "for", "i", ",", "fc", "in", "enumerate", "(", "self", ".", "fcs", ")", ":", "\n", "            ", "h", "=", "fc", "(", "h", ")", "\n", "if", "self", ".", "layer_norm", "and", "i", "<", "len", "(", "self", ".", "fcs", ")", "-", "1", ":", "\n", "                ", "h", "=", "self", ".", "layer_norms", "[", "i", "]", "(", "h", ")", "\n", "", "h", "=", "self", ".", "hidden_activation", "(", "h", ")", "\n", "", "preactivation", "=", "self", ".", "last_fc", "(", "h", ")", "\n", "output", "=", "self", ".", "output_activation", "(", "preactivation", ")", "\n", "if", "return_preactivations", ":", "\n", "            ", "return", "output", ",", "preactivation", "\n", "", "else", ":", "\n", "            ", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.networks.FlattenMlp.forward": [[84, 87], ["torch.cat", "networks.Mlp.forward"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjcore.MjModel.forward"], ["def", "forward", "(", "self", ",", "*", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "flat_inputs", "=", "torch", ".", "cat", "(", "inputs", ",", "dim", "=", "1", ")", "\n", "return", "super", "(", ")", ".", "forward", "(", "flat_inputs", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.modules.HuberLoss.__init__": [[9, 13], ["torch.Module.__init__", "torch.SmoothL1Loss", "torch.SmoothL1Loss"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.__init__"], ["    ", "def", "__init__", "(", "self", ",", "delta", "=", "1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "huber_loss_delta1", "=", "nn", ".", "SmoothL1Loss", "(", ")", "\n", "self", ".", "delta", "=", "delta", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.modules.HuberLoss.forward": [[14, 17], ["modules.HuberLoss.huber_loss_delta1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "x_hat", ")", ":", "\n", "        ", "loss", "=", "self", ".", "huber_loss_delta1", "(", "x", "/", "self", ".", "delta", ",", "x_hat", "/", "self", ".", "delta", ")", "\n", "return", "loss", "*", "self", ".", "delta", "*", "self", ".", "delta", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.modules.LayerNorm.__init__": [[24, 37], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.__init__", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.ones", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.ones", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.ones", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.ones", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.zeros", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.zeros", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.zeros", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.zeros"], ["def", "__init__", "(", "self", ",", "features", ",", "center", "=", "True", ",", "scale", "=", "False", ",", "eps", "=", "1e-6", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "center", "=", "center", "\n", "self", ".", "scale", "=", "scale", "\n", "self", ".", "eps", "=", "eps", "\n", "if", "self", ".", "scale", ":", "\n", "            ", "self", ".", "scale_param", "=", "nn", ".", "Parameter", "(", "torch", ".", "ones", "(", "features", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "scale_param", "=", "None", "\n", "", "if", "self", ".", "center", ":", "\n", "            ", "self", ".", "center_param", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "features", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "center_param", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.modules.LayerNorm.forward": [[38, 47], ["x.mean", "x.std"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "mean", "=", "x", ".", "mean", "(", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "std", "=", "x", ".", "std", "(", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "output", "=", "(", "x", "-", "mean", ")", "/", "(", "std", "+", "self", ".", "eps", ")", "\n", "if", "self", ".", "scale", ":", "\n", "            ", "output", "=", "output", "*", "self", ".", "scale_param", "\n", "", "if", "self", ".", "center", ":", "\n", "            ", "output", "=", "output", "+", "self", ".", "center_param", "\n", "", "return", "output", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.identity": [[7, 9], ["None"], "function", ["None"], ["def", "identity", "(", "x", ")", ":", "\n", "    ", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.id_to_onehot": [[11, 21], ["pytorch_utils.zeros", "torch.arange", "torch.arange"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.zeros"], ["", "def", "id_to_onehot", "(", "id", ",", "n_classes", ")", ":", "\n", "    ", "'''\n\n    :param id: arr/tensor of size (n, 1)\n    :param n_classes: int\n    :return: one hot vector of size\n    '''", "\n", "one_hot", "=", "zeros", "(", "(", "id", ".", "shape", "[", "0", "]", ",", "n_classes", ")", ")", "\n", "one_hot", "[", "torch", ".", "arange", "(", "one_hot", ".", "shape", "[", "0", "]", ")", ",", "id", "[", ":", ",", "0", "]", "]", "=", "1", "\n", "return", "one_hot", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.cross_entropy_one_hot": [[23, 26], ["target.max", "torch.cross_entropy"], "function", ["None"], ["", "def", "cross_entropy_one_hot", "(", "source", ",", "target", ",", "reduction", "=", "'none'", ")", ":", "\n", "    ", "_", ",", "labels", "=", "target", ".", "max", "(", "dim", "=", "-", "1", ")", "# probabilities are on last dimension", "\n", "return", "F", ".", "cross_entropy", "(", "source", ",", "labels", ",", "reduction", "=", "reduction", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.soft_update_from_to": [[28, 32], ["zip", "target.parameters", "source.parameters", "target_param.data.copy_"], "function", ["None"], ["", "def", "soft_update_from_to", "(", "source", ",", "target", ",", "tau", ")", ":", "\n", "    ", "for", "target_param", ",", "param", "in", "zip", "(", "target", ".", "parameters", "(", ")", ",", "source", ".", "parameters", "(", ")", ")", ":", "\n", "        ", "target_param", ".", "data", ".", "copy_", "(", "\n", "target_param", ".", "data", "*", "(", "1.0", "-", "tau", ")", "+", "param", ".", "data", "*", "tau", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.copy_model_params_from_to": [[35, 38], ["zip", "target.parameters", "source.parameters", "target_param.data.copy_"], "function", ["None"], ["", "", "def", "copy_model_params_from_to", "(", "source", ",", "target", ")", ":", "\n", "    ", "for", "target_param", ",", "param", "in", "zip", "(", "target", ".", "parameters", "(", ")", ",", "source", ".", "parameters", "(", ")", ")", ":", "\n", "        ", "target_param", ".", "data", ".", "copy_", "(", "param", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.fanin_init": [[40, 50], ["tensor.size", "tensor.data.uniform_", "len", "numpy.sqrt", "len", "numpy.prod", "Exception"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjvGeomWrapper.size"], ["", "", "def", "fanin_init", "(", "tensor", ")", ":", "\n", "    ", "size", "=", "tensor", ".", "size", "(", ")", "\n", "if", "len", "(", "size", ")", "==", "2", ":", "\n", "        ", "fan_in", "=", "size", "[", "0", "]", "\n", "", "elif", "len", "(", "size", ")", ">", "2", ":", "\n", "        ", "fan_in", "=", "np", ".", "prod", "(", "size", "[", "1", ":", "]", ")", "\n", "", "else", ":", "\n", "        ", "raise", "Exception", "(", "\"Shape must be have dimension at least 2.\"", ")", "\n", "", "bound", "=", "1.", "/", "np", ".", "sqrt", "(", "fan_in", ")", "\n", "return", "tensor", ".", "data", ".", "uniform_", "(", "-", "bound", ",", "bound", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.fanin_init_weights_like": [[52, 64], ["tensor.size", "pytorch_utils.FloatTensor", "FloatTensor.uniform_", "len", "numpy.sqrt", "tensor.size", "len", "numpy.prod", "Exception"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjvGeomWrapper.size", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.FloatTensor", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjvGeomWrapper.size"], ["", "def", "fanin_init_weights_like", "(", "tensor", ")", ":", "\n", "    ", "size", "=", "tensor", ".", "size", "(", ")", "\n", "if", "len", "(", "size", ")", "==", "2", ":", "\n", "        ", "fan_in", "=", "size", "[", "0", "]", "\n", "", "elif", "len", "(", "size", ")", ">", "2", ":", "\n", "        ", "fan_in", "=", "np", ".", "prod", "(", "size", "[", "1", ":", "]", ")", "\n", "", "else", ":", "\n", "        ", "raise", "Exception", "(", "\"Shape must be have dimension at least 2.\"", ")", "\n", "", "bound", "=", "1.", "/", "np", ".", "sqrt", "(", "fan_in", ")", "\n", "new_tensor", "=", "FloatTensor", "(", "tensor", ".", "size", "(", ")", ")", "\n", "new_tensor", ".", "uniform_", "(", "-", "bound", ",", "bound", ")", "\n", "return", "new_tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.elem_or_tuple_to_variable": [[66, 72], ["isinstance", "pytorch_utils.from_numpy", "tuple", "pytorch_utils.elem_or_tuple_to_variable"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.from_numpy", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.elem_or_tuple_to_variable"], ["", "def", "elem_or_tuple_to_variable", "(", "elem_or_tuple", ")", ":", "\n", "    ", "if", "isinstance", "(", "elem_or_tuple", ",", "tuple", ")", ":", "\n", "        ", "return", "tuple", "(", "\n", "elem_or_tuple_to_variable", "(", "e", ")", "for", "e", "in", "elem_or_tuple", "\n", ")", "\n", "", "return", "from_numpy", "(", "elem_or_tuple", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.filter_batch": [[74, 80], ["np_batch.items", "v.astype"], "function", ["None"], ["", "def", "filter_batch", "(", "np_batch", ")", ":", "\n", "    ", "for", "k", ",", "v", "in", "np_batch", ".", "items", "(", ")", ":", "\n", "        ", "if", "v", ".", "dtype", "==", "np", ".", "bool", ":", "\n", "            ", "yield", "k", ",", "v", ".", "astype", "(", "int", ")", "\n", "", "else", ":", "\n", "            ", "yield", "k", ",", "v", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.np_to_pytorch_batch": [[82, 87], ["pytorch_utils.elem_or_tuple_to_variable", "pytorch_utils.filter_batch", "numpy.dtype"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.elem_or_tuple_to_variable", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.filter_batch"], ["", "", "", "def", "np_to_pytorch_batch", "(", "np_batch", ")", ":", "\n", "    ", "return", "{", "\n", "k", ":", "elem_or_tuple_to_variable", "(", "x", ")", "\n", "for", "k", ",", "x", "in", "filter_batch", "(", "np_batch", ")", "\n", "if", "x", ".", "dtype", "!=", "np", ".", "dtype", "(", "'O'", ")", "# ignore object (e.g. dictionaries)", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.list_from_numpy": [[90, 93], ["pytorch_utils.from_numpy"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.from_numpy"], ["", "def", "list_from_numpy", "(", "li", ")", ":", "\n", "    ", "'convert all elements in input list to torch'", "\n", "return", "[", "from_numpy", "(", "element", ")", "for", "element", "in", "li", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.set_gpu_mode": [[102, 111], ["torch.device", "torch.device", "str"], "function", ["None"], ["def", "set_gpu_mode", "(", "mode", ",", "gpu_id", "=", "0", ")", ":", "\n", "    ", "global", "_use_gpu", "\n", "global", "device", "\n", "global", "_gpu_id", "\n", "_gpu_id", "=", "gpu_id", "\n", "_use_gpu", "=", "mode", "\n", "device", "=", "torch", ".", "device", "(", "\"cuda:0\"", "if", "_use_gpu", "else", "\"cpu\"", ")", "\n", "if", "_use_gpu", ":", "\n", "        ", "os", ".", "environ", "[", "'CUDA_VISIBLE_DEVICES'", "]", "=", "str", "(", "_gpu_id", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.gpu_enabled": [[113, 115], ["None"], "function", ["None"], ["", "", "def", "gpu_enabled", "(", ")", ":", "\n", "    ", "return", "_use_gpu", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.FloatTensor": [[118, 120], ["torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor", "torch.FloatTensor"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.FloatTensor", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.FloatTensor"], ["", "def", "FloatTensor", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "return", "torch", ".", "FloatTensor", "(", "*", "args", ",", "**", "kwargs", ")", ".", "to", "(", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.from_numpy": [[122, 124], ["torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy", "torch.from_numpy"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.from_numpy", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.from_numpy"], ["", "def", "from_numpy", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "return", "torch", ".", "from_numpy", "(", "*", "args", ",", "**", "kwargs", ")", ".", "float", "(", ")", ".", "to", "(", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.get_numpy": [[126, 129], ["tensor.to().detach().numpy", "tensor.to().detach", "tensor.to"], "function", ["None"], ["", "def", "get_numpy", "(", "tensor", ")", ":", "\n", "# not sure if I should do detach or not here", "\n", "    ", "return", "tensor", ".", "to", "(", "'cpu'", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.zeros": [[131, 133], ["torch.zeros().to", "torch.zeros().to", "torch.zeros", "torch.zeros"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.zeros", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.zeros"], ["", "def", "zeros", "(", "*", "sizes", ",", "**", "kwargs", ")", ":", "\n", "    ", "return", "torch", ".", "zeros", "(", "*", "sizes", ",", "**", "kwargs", ")", ".", "to", "(", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.ones": [[135, 137], ["torch.ones().to", "torch.ones().to", "torch.ones", "torch.ones"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.ones", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.ones"], ["", "def", "ones", "(", "*", "sizes", ",", "**", "kwargs", ")", ":", "\n", "    ", "return", "torch", ".", "ones", "(", "*", "sizes", ",", "**", "kwargs", ")", ".", "to", "(", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.randn": [[139, 141], ["torch.randn().to", "torch.randn().to", "torch.randn", "torch.randn"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.randn", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.randn"], ["", "def", "randn", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "return", "torch", ".", "randn", "(", "*", "args", ",", "**", "kwargs", ")", ".", "to", "(", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.zeros_like": [[143, 145], ["torch.zeros_like().to", "torch.zeros_like().to", "torch.zeros_like", "torch.zeros_like"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.zeros_like", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.zeros_like"], ["", "def", "zeros_like", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "return", "torch", ".", "zeros_like", "(", "*", "args", ",", "**", "kwargs", ")", ".", "to", "(", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.ones_like": [[147, 149], ["torch.ones_like().to", "torch.ones_like().to", "torch.ones_like", "torch.ones_like"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.ones_like", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.ones_like"], ["", "def", "ones_like", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "return", "torch", ".", "ones_like", "(", "*", "args", ",", "**", "kwargs", ")", ".", "to", "(", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.normal": [[151, 153], ["torch.normal().to", "torch.normal().to", "torch.normal", "torch.normal"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.normal", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.normal"], ["", "def", "normal", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "return", "torch", ".", "normal", "(", "*", "args", ",", "**", "kwargs", ")", ".", "to", "(", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.round_tensor": [[155, 157], ["None"], "function", ["None"], ["", "def", "round_tensor", "(", "tensor", ",", "n_digits", ")", ":", "\n", "    ", "return", "(", "tensor", "*", "10", "**", "n_digits", ")", ".", "round", "(", ")", "/", "(", "10", "**", "n_digits", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.serializable.Serializable.__init__": [[13, 16], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "__args", "=", "args", "\n", "self", ".", "__kwargs", "=", "kwargs", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.serializable.Serializable.quick_init": [[17, 44], ["getattr", "setattr", "inspect.getfullargspec", "inspect.getargspec", "tuple", "tuple", "locals_[].copy", "dict", "dict"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.core.PyTorchModule.copy"], ["", "def", "quick_init", "(", "self", ",", "locals_", ")", ":", "\n", "        ", "if", "getattr", "(", "self", ",", "\"_serializable_initialized\"", ",", "False", ")", ":", "\n", "            ", "return", "\n", "", "if", "sys", ".", "version_info", ">=", "(", "3", ",", "0", ")", ":", "\n", "            ", "spec", "=", "inspect", ".", "getfullargspec", "(", "self", ".", "__init__", ")", "\n", "# Exclude the first \"self\" parameter", "\n", "if", "spec", ".", "varkw", ":", "\n", "                ", "kwargs", "=", "locals_", "[", "spec", ".", "varkw", "]", ".", "copy", "(", ")", "\n", "", "else", ":", "\n", "                ", "kwargs", "=", "dict", "(", ")", "\n", "", "if", "spec", ".", "kwonlyargs", ":", "\n", "                ", "for", "key", "in", "spec", ".", "kwonlyargs", ":", "\n", "                    ", "kwargs", "[", "key", "]", "=", "locals_", "[", "key", "]", "\n", "", "", "", "else", ":", "\n", "            ", "spec", "=", "inspect", ".", "getargspec", "(", "self", ".", "__init__", ")", "\n", "if", "spec", ".", "keywords", ":", "\n", "                ", "kwargs", "=", "locals_", "[", "spec", ".", "keywords", "]", "\n", "", "else", ":", "\n", "                ", "kwargs", "=", "dict", "(", ")", "\n", "", "", "if", "spec", ".", "varargs", ":", "\n", "            ", "varargs", "=", "locals_", "[", "spec", ".", "varargs", "]", "\n", "", "else", ":", "\n", "            ", "varargs", "=", "tuple", "(", ")", "\n", "", "in_order_args", "=", "[", "locals_", "[", "arg", "]", "for", "arg", "in", "spec", ".", "args", "]", "[", "1", ":", "]", "\n", "self", ".", "__args", "=", "tuple", "(", "in_order_args", ")", "+", "varargs", "\n", "self", ".", "__kwargs", "=", "kwargs", "\n", "setattr", "(", "self", ",", "\"_serializable_initialized\"", ",", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.serializable.Serializable.__getstate__": [[45, 47], ["None"], "methods", ["None"], ["", "def", "__getstate__", "(", "self", ")", ":", "\n", "        ", "return", "{", "\"__args\"", ":", "self", ".", "__args", ",", "\"__kwargs\"", ":", "self", ".", "__kwargs", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.serializable.Serializable.__setstate__": [[48, 57], ["serializable.Serializable.__dict__.update", "inspect.getfullargspec", "inspect.getargspec", "type", "dict", "zip"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.GymObject.update", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjvGeomWrapper.type"], ["", "def", "__setstate__", "(", "self", ",", "d", ")", ":", "\n", "# convert all __args to keyword-based arguments", "\n", "        ", "if", "sys", ".", "version_info", ">=", "(", "3", ",", "0", ")", ":", "\n", "            ", "spec", "=", "inspect", ".", "getfullargspec", "(", "self", ".", "__init__", ")", "\n", "", "else", ":", "\n", "            ", "spec", "=", "inspect", ".", "getargspec", "(", "self", ".", "__init__", ")", "\n", "", "in_order_args", "=", "spec", ".", "args", "[", "1", ":", "]", "\n", "out", "=", "type", "(", "self", ")", "(", "**", "dict", "(", "zip", "(", "in_order_args", ",", "d", "[", "\"__args\"", "]", ")", ",", "**", "d", "[", "\"__kwargs\"", "]", ")", ")", "\n", "self", ".", "__dict__", ".", "update", "(", "out", ".", "__dict__", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.serializable.Serializable.clone": [[58, 66], ["isinstance", "obj.__getstate__", "dict", "type().__new__", "type().__new__.__setstate__", "type", "type"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.core.serializable.Serializable.__getstate__", "home.repos.pwc.inspect_result.Rondorf_BOReL.gym.core.Env.__new__", "home.repos.pwc.inspect_result.Rondorf_BOReL.core.serializable.Serializable.__setstate__", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjvGeomWrapper.type", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjvGeomWrapper.type"], ["", "@", "classmethod", "\n", "def", "clone", "(", "cls", ",", "obj", ",", "**", "kwargs", ")", ":", "\n", "        ", "assert", "isinstance", "(", "obj", ",", "Serializable", ")", "\n", "d", "=", "obj", ".", "__getstate__", "(", ")", "\n", "d", "[", "\"__kwargs\"", "]", "=", "dict", "(", "d", "[", "\"__kwargs\"", "]", ",", "**", "kwargs", ")", "\n", "out", "=", "type", "(", "obj", ")", ".", "__new__", "(", "type", "(", "obj", ")", ")", "\n", "out", ".", "__setstate__", "(", "d", ")", "\n", "return", "out", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.policies_base.Policy.get_action": [[8, 15], ["None"], "methods", ["None"], ["@", "abc", ".", "abstractmethod", "\n", "def", "get_action", "(", "self", ",", "observation", ")", ":", "\n", "        ", "\"\"\"\n        :param observation:\n        :return: action, debug_dictionary\n        \"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.policies_base.Policy.reset": [[16, 18], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.policies_base.ExplorationPolicy.set_num_steps_total": [[21, 23], ["None"], "methods", ["None"], ["    ", "def", "set_num_steps_total", "(", "self", ",", "t", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.policies_base.SerializablePolicy.get_param_values": [[29, 31], ["None"], "methods", ["None"], ["def", "get_param_values", "(", "self", ")", ":", "\n", "        ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.policies_base.SerializablePolicy.set_param_values": [[32, 34], ["None"], "methods", ["None"], ["", "def", "set_param_values", "(", "self", ",", "values", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.policies_base.SerializablePolicy.get_param_values_np": [[38, 40], ["None"], "methods", ["None"], ["def", "get_param_values_np", "(", "self", ")", ":", "\n", "        ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.policies_base.SerializablePolicy.set_param_values_np": [[41, 43], ["None"], "methods", ["None"], ["", "def", "set_param_values_np", "(", "self", ",", "values", ")", ":", "\n", "        ", "pass", "", "", "", ""]], "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.distributions.TanhNormal.__init__": [[84, 94], ["Normal"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "normal_mean", ",", "normal_std", ",", "epsilon", "=", "1e-6", ")", ":", "\n", "        ", "\"\"\"\n        :param normal_mean: Mean of the normal distribution\n        :param normal_std: Std of the normal distribution\n        :param epsilon: Numerical stability epsilon when computing log-prob.\n        \"\"\"", "\n", "self", ".", "normal_mean", "=", "normal_mean", "\n", "self", ".", "normal_std", "=", "normal_std", "\n", "self", ".", "normal", "=", "Normal", "(", "normal_mean", ",", "normal_std", ")", "\n", "self", ".", "epsilon", "=", "epsilon", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.distributions.TanhNormal.sample_n": [[95, 101], ["distributions.TanhNormal.normal.sample_n", "torch.tanh", "torch.tanh"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.distributions.TanhNormal.sample_n"], ["", "def", "sample_n", "(", "self", ",", "n", ",", "return_pre_tanh_value", "=", "False", ")", ":", "\n", "        ", "z", "=", "self", ".", "normal", ".", "sample_n", "(", "n", ")", "\n", "if", "return_pre_tanh_value", ":", "\n", "            ", "return", "torch", ".", "tanh", "(", "z", ")", ",", "z", "\n", "", "else", ":", "\n", "            ", "return", "torch", ".", "tanh", "(", "z", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.distributions.TanhNormal.log_prob": [[102, 114], ["distributions.TanhNormal.normal.log_prob", "torch.log", "torch.log"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.distributions.TanhNormal.log_prob", "home.repos.pwc.inspect_result.Rondorf_BOReL.core.logger.log", "home.repos.pwc.inspect_result.Rondorf_BOReL.core.logger.log"], ["", "", "def", "log_prob", "(", "self", ",", "value", ",", "pre_tanh_value", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        :param value: some value, x\n        :param pre_tanh_value: arctanh(x)\n        :return:\n        \"\"\"", "\n", "if", "pre_tanh_value", "is", "None", ":", "\n", "            ", "pre_tanh_value", "=", "torch", ".", "log", "(", "\n", "(", "1", "+", "value", ")", "/", "(", "1", "-", "value", ")", "\n", ")", "/", "2", "\n", "", "return", "self", ".", "normal", ".", "log_prob", "(", "pre_tanh_value", ")", "-", "torch", ".", "log", "(", "\n", "1", "-", "value", "*", "value", "+", "self", ".", "epsilon", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.distributions.TanhNormal.sample": [[116, 122], ["distributions.TanhNormal.normal.sample", "torch.tanh", "torch.tanh"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.spaces.discrete.Discrete.sample"], ["", "def", "sample", "(", "self", ",", "return_pretanh_value", "=", "False", ")", ":", "\n", "        ", "z", "=", "self", ".", "normal", ".", "sample", "(", ")", "\n", "if", "return_pretanh_value", ":", "\n", "            ", "return", "torch", ".", "tanh", "(", "z", ")", ",", "z", "\n", "", "else", ":", "\n", "            ", "return", "torch", ".", "tanh", "(", "z", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.distributions.TanhNormal.rsample": [[123, 137], ["torch.tanh", "torch.autograd.Variable", "torch.tanh", "Normal().sample", "Normal", "torchkit.zeros", "torchkit.ones", "distributions.TanhNormal.normal_mean.size", "distributions.TanhNormal.normal_std.size"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.spaces.discrete.Discrete.sample", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.zeros", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.ones", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjvGeomWrapper.size", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjvGeomWrapper.size"], ["", "", "def", "rsample", "(", "self", ",", "return_pretanh_value", "=", "False", ")", ":", "\n", "        ", "z", "=", "(", "\n", "self", ".", "normal_mean", "+", "\n", "self", ".", "normal_std", "*", "\n", "Variable", "(", "Normal", "(", "\n", "ptu", ".", "zeros", "(", "self", ".", "normal_mean", ".", "size", "(", ")", ")", ",", "\n", "ptu", ".", "ones", "(", "self", ".", "normal_std", ".", "size", "(", ")", ")", "\n", ")", ".", "sample", "(", ")", ")", "\n", ")", "\n", "# z.requires_grad_()", "\n", "if", "return_pretanh_value", ":", "\n", "            ", "return", "torch", ".", "tanh", "(", "z", ")", ",", "z", "\n", "", "else", ":", "\n", "            ", "return", "torch", ".", "tanh", "(", "z", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.Rondorf_BOReL.environments.wrappers.VariBadWrapper.__init__": [[17, 74], ["gym.Wrapper.__init__", "isinstance", "isinstance", "gym.spaces.Box", "len", "numpy.array", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "env", ",", "\n", "episodes_per_task", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Wrapper, creates a multi-episode (BA)MDP around a one-episode MDP. Automatically deals with\n        - horizons H in the MDP vs horizons H+ in the BAMDP,\n        - resetting the tasks\n        - normalized actions in case of continuous action space\n        - adding the timestep / done info to the state (might be needed to make states markov)\n        \"\"\"", "\n", "\n", "super", "(", ")", ".", "__init__", "(", "env", ")", "\n", "\n", "# if continuous actions, make sure in [-1, 1]", "\n", "if", "isinstance", "(", "self", ".", "env", ".", "action_space", ",", "gym", ".", "spaces", ".", "Box", ")", ":", "\n", "            ", "self", ".", "_normalize_actions", "=", "True", "\n", "", "else", ":", "\n", "            ", "self", ".", "_normalize_actions", "=", "False", "\n", "\n", "", "if", "episodes_per_task", ">", "1", ":", "\n", "            ", "self", ".", "add_done_info", "=", "True", "\n", "", "else", ":", "\n", "            ", "self", ".", "add_done_info", "=", "False", "\n", "\n", "", "if", "self", ".", "add_done_info", ":", "\n", "            ", "if", "isinstance", "(", "self", ".", "observation_space", ",", "spaces", ".", "Box", ")", ":", "\n", "                ", "if", "len", "(", "self", ".", "observation_space", ".", "shape", ")", ">", "1", ":", "\n", "                    ", "raise", "ValueError", "# can't add additional info for obs of more than 1D", "\n", "", "self", ".", "observation_space", "=", "spaces", ".", "Box", "(", "low", "=", "np", ".", "array", "(", "[", "*", "self", ".", "observation_space", ".", "low", ",", "0", "]", ")", ",", "# shape will be deduced from this", "\n", "high", "=", "np", ".", "array", "(", "[", "*", "self", ".", "observation_space", ".", "high", ",", "1", "]", ")", ",", "\n", "dtype", "=", "np", ".", "float32", ")", "\n", "", "else", ":", "\n", "# TODO: add something simliar for the other possible spaces,", "\n", "# \"Space\", \"Discrete\", \"MultiDiscrete\", \"MultiBinary\", \"Tuple\", \"Dict\", \"flatdim\", \"flatten\", \"unflatten\"", "\n", "                ", "raise", "NotImplementedError", "\n", "\n", "# calculate horizon length H^+", "\n", "", "", "self", ".", "episodes_per_task", "=", "episodes_per_task", "\n", "# counts the number of episodes", "\n", "self", ".", "episode_count", "=", "0", "\n", "\n", "# count timesteps in BAMDP", "\n", "self", ".", "step_count_bamdp", "=", "0.0", "\n", "# the horizon in the BAMDP is the one in the MDP times the number of episodes per task,", "\n", "# and if we train a policy that maximises the return over all episodes", "\n", "# we add transitions to the reset start in-between episodes", "\n", "try", ":", "\n", "            ", "self", ".", "horizon_bamdp", "=", "self", ".", "episodes_per_task", "*", "self", ".", "env", ".", "_max_episode_steps", "\n", "", "except", "AttributeError", ":", "\n", "            ", "self", ".", "horizon_bamdp", "=", "self", ".", "episodes_per_task", "*", "self", ".", "env", ".", "unwrapped", ".", "_max_episode_steps", "\n", "\n", "# add dummy timesteps in-between episodes for resetting the MDP", "\n", "", "self", ".", "horizon_bamdp", "+=", "self", ".", "episodes_per_task", "-", "1", "\n", "\n", "# this tells us if we have reached the horizon in the underlying MDP", "\n", "self", ".", "done_mdp", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.environments.wrappers.VariBadWrapper.reset": [[76, 96], ["wrappers.VariBadWrapper.env.reset_task", "wrappers.VariBadWrapper.env.reset", "numpy.concatenate", "wrappers.VariBadWrapper.env.unwrapped.reset"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.reset_task", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.reset", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.reset"], ["", "def", "reset", "(", "self", ",", "task", "=", "None", ")", ":", "\n", "\n", "# reset task -- this sets goal and state -- sets self.env._goal and self.env._state", "\n", "        ", "self", ".", "env", ".", "reset_task", "(", "task", ")", "\n", "\n", "self", ".", "episode_count", "=", "0", "\n", "self", ".", "step_count_bamdp", "=", "0", "\n", "\n", "# normal reset", "\n", "try", ":", "\n", "            ", "state", "=", "self", ".", "env", ".", "reset", "(", ")", "\n", "", "except", "AttributeError", ":", "\n", "            ", "state", "=", "self", ".", "env", ".", "unwrapped", ".", "reset", "(", ")", "\n", "\n", "", "if", "self", ".", "add_done_info", ":", "\n", "            ", "state", "=", "np", ".", "concatenate", "(", "(", "state", ",", "[", "0.0", "]", ")", ")", "\n", "\n", "", "self", ".", "done_mdp", "=", "False", "\n", "\n", "return", "state", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.environments.wrappers.VariBadWrapper.reset_mdp": [[97, 105], ["wrappers.VariBadWrapper.env.reset", "numpy.concatenate"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.reset"], ["", "def", "reset_mdp", "(", "self", ")", ":", "\n", "        ", "state", "=", "self", ".", "env", ".", "reset", "(", ")", "\n", "# if self.add_timestep:", "\n", "#     state = np.concatenate((state, [self.step_count_bamdp / self.horizon_bamdp]))", "\n", "if", "self", ".", "add_done_info", ":", "\n", "            ", "state", "=", "np", ".", "concatenate", "(", "(", "state", ",", "[", "0.0", "]", ")", ")", "\n", "", "self", ".", "done_mdp", "=", "False", "\n", "return", "state", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.environments.wrappers.VariBadWrapper.step": [[106, 137], ["wrappers.VariBadWrapper.env.step", "numpy.clip", "numpy.concatenate", "wrappers.VariBadWrapper.reset_mdp", "float"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.step", "home.repos.pwc.inspect_result.Rondorf_BOReL.environments.wrappers.VariBadWrapper.reset_mdp"], ["", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "\n", "        ", "if", "self", ".", "_normalize_actions", ":", "# from [-1, 1] to [lb, ub]", "\n", "            ", "lb", "=", "self", ".", "env", ".", "action_space", ".", "low", "\n", "ub", "=", "self", ".", "env", ".", "action_space", ".", "high", "\n", "action", "=", "lb", "+", "(", "action", "+", "1.", ")", "*", "0.5", "*", "(", "ub", "-", "lb", ")", "\n", "action", "=", "np", ".", "clip", "(", "action", ",", "lb", ",", "ub", ")", "\n", "\n", "# do normal environment step in MDP", "\n", "", "state", ",", "reward", ",", "self", ".", "done_mdp", ",", "info", "=", "self", ".", "env", ".", "step", "(", "action", ")", "\n", "\n", "info", "[", "'done_mdp'", "]", "=", "self", ".", "done_mdp", "\n", "\n", "# if self.add_timestep:", "\n", "#     state = np.concatenate((state, [self.step_count_bamdp / self.horizon_bamdp]))", "\n", "if", "self", ".", "add_done_info", ":", "\n", "            ", "state", "=", "np", ".", "concatenate", "(", "(", "state", ",", "[", "float", "(", "self", ".", "done_mdp", ")", "]", ")", ")", "\n", "\n", "", "self", ".", "step_count_bamdp", "+=", "1", "\n", "# if we want to maximise performance over multiple episodes,", "\n", "# only say \"done\" when we collected enough episodes in this task", "\n", "done_bamdp", "=", "False", "\n", "if", "self", ".", "done_mdp", ":", "\n", "            ", "self", ".", "episode_count", "+=", "1", "\n", "if", "self", ".", "episode_count", "==", "self", ".", "episodes_per_task", ":", "\n", "                ", "done_bamdp", "=", "True", "\n", "\n", "", "", "if", "self", ".", "done_mdp", "and", "not", "done_bamdp", ":", "\n", "            ", "info", "[", "'start_state'", "]", "=", "self", ".", "reset_mdp", "(", ")", "\n", "\n", "", "return", "state", ",", "reward", ",", "done_bamdp", ",", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.environments.wrappers.TimeLimitMask.step": [[141, 147], ["wrappers.TimeLimitMask.env.step"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.step"], ["    ", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "obs", ",", "rew", ",", "done", ",", "info", "=", "self", ".", "env", ".", "step", "(", "action", ")", "\n", "if", "done", "and", "self", ".", "env", ".", "_max_episode_steps", "==", "self", ".", "env", ".", "_elapsed_steps", ":", "\n", "            ", "info", "[", "'bad_transition'", "]", "=", "True", "\n", "\n", "", "return", "obs", ",", "rew", ",", "done", ",", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.environments.wrappers.TimeLimitMask.reset": [[148, 150], ["wrappers.TimeLimitMask.env.reset"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.reset"], ["", "def", "reset", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "self", ".", "env", ".", "reset", "(", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.environments.wrappers.mujoco_wrapper": [[9, 14], ["gym.envs.registration.load", "gym.envs.registration.load."], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.envs.registration.load"], ["def", "mujoco_wrapper", "(", "entry_point", ",", "**", "kwargs", ")", ":", "\n", "# Load the environment from its entry point", "\n", "    ", "env_cls", "=", "load", "(", "entry_point", ")", "\n", "env", "=", "env_cls", "(", "**", "kwargs", ")", "\n", "return", "env", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.environments.make_env.make_env": [[14, 22], ["gym.make", "environments.wrappers.VariBadWrapper", "environments.wrappers.VariBadWrapper.seed"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.envs.registration.make", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.seed"], ["def", "make_env", "(", "env_id", ",", "episodes_per_task", ",", "seed", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "    ", "env", "=", "gym", ".", "make", "(", "env_id", ",", "**", "kwargs", ")", "\n", "if", "seed", "is", "not", "None", ":", "\n", "        ", "env", ".", "seed", "(", "seed", ")", "\n", "", "env", "=", "VariBadWrapper", "(", "env", "=", "env", ",", "\n", "episodes_per_task", "=", "episodes_per_task", ",", "\n", ")", "\n", "return", "env", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.environments.example_env.ExampleEnv.__init__": [[5, 7], ["gym.Env.__init__"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "ExampleEnv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.environments.example_env.ExampleEnv.get_task": [[8, 13], ["None"], "methods", ["None"], ["", "def", "get_task", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Return a task description, such as goal position or target velocity.\n        \"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.environments.example_env.ExampleEnv.set_goal": [[14, 19], ["None"], "methods", ["None"], ["", "def", "set_goal", "(", "self", ",", "goal", ")", ":", "\n", "        ", "\"\"\"\n        Sets goal manually. Mainly used for reward relabelling.\n        \"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.environments.example_env.ExampleEnv.reset_task": [[20, 25], ["None"], "methods", ["None"], ["", "def", "reset_task", "(", "self", ",", "task", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Reset the task, either at random (if task=None) or the given task.\n        \"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.environments.example_env.ExampleEnv.step": [[26, 33], ["None"], "methods", ["None"], ["", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "\"\"\"\n        Execute one step in the environment.\n        Should return: state, reward, done, info\n        where info has to include a field 'task'.\n        \"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.environments.example_env.ExampleEnv.reward": [[34, 40], ["None"], "methods", ["None"], ["", "def", "reward", "(", "self", ",", "state", ",", "action", ")", ":", "\n", "        ", "\"\"\"\n        Computes reward function of task.\n        Returns the reward\n        \"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.environments.example_env.ExampleEnv.reset": [[41, 47], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Reset the environment. This should *NOT* reset the task!\n        Resetting the task is handled in the varibad wrapper (see wrappers.py).\n        \"\"\"", "\n", "pass", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco.ant_goal.AntGoalEnv.__init__": [[8, 11], ["environments.mujoco.ant_multitask_base.MultitaskAntEnv.__init__"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.__init__"], ["    ", "def", "__init__", "(", "self", ",", "task", "=", "{", "}", ",", "n_tasks", "=", "2", ",", "max_episode_steps", "=", "200", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "AntGoalEnv", ",", "self", ")", ".", "__init__", "(", "task", ",", "n_tasks", ",", "**", "kwargs", ")", "\n", "self", ".", "_max_episode_steps", "=", "max_episode_steps", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco.ant_goal.AntGoalEnv.step": [[12, 31], ["ant_goal.AntGoalEnv.do_simulation", "numpy.array", "ant_goal.AntGoalEnv.state_vector", "ant_goal.AntGoalEnv._get_obs", "ant_goal.AntGoalEnv.get_body_com", "numpy.sum", "numpy.square().sum", "numpy.sum", "dict", "numpy.abs", "numpy.square", "numpy.square", "numpy.clip"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco.mujoco_env.MujocoEnv.do_simulation", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco.mujoco_env.MujocoEnv.state_vector", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.point_robot.PointEnv._get_obs", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco.mujoco_env.MujocoEnv.get_body_com"], ["", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "self", ".", "do_simulation", "(", "action", ",", "self", ".", "frame_skip", ")", "\n", "xposafter", "=", "np", ".", "array", "(", "self", ".", "get_body_com", "(", "\"torso\"", ")", ")", "\n", "\n", "goal_reward", "=", "-", "np", ".", "sum", "(", "np", ".", "abs", "(", "xposafter", "[", ":", "2", "]", "-", "self", ".", "_goal", ")", ")", "# make it happy, not suicidal", "\n", "\n", "ctrl_cost", "=", ".1", "*", "np", ".", "square", "(", "action", ")", ".", "sum", "(", ")", "\n", "contact_cost", "=", "0.5", "*", "1e-3", "*", "np", ".", "sum", "(", "\n", "np", ".", "square", "(", "np", ".", "clip", "(", "self", ".", "sim", ".", "data", ".", "cfrc_ext", ",", "-", "1", ",", "1", ")", ")", ")", "\n", "survive_reward", "=", "0.0", "\n", "reward", "=", "goal_reward", "-", "ctrl_cost", "-", "contact_cost", "+", "survive_reward", "\n", "state", "=", "self", ".", "state_vector", "(", ")", "\n", "done", "=", "False", "\n", "ob", "=", "self", ".", "_get_obs", "(", ")", "\n", "return", "ob", ",", "reward", ",", "done", ",", "dict", "(", "\n", "goal_forward", "=", "goal_reward", ",", "\n", "reward_ctrl", "=", "-", "ctrl_cost", ",", "\n", "reward_contact", "=", "-", "contact_cost", ",", "\n", "reward_survive", "=", "survive_reward", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco.ant_goal.AntGoalEnv.sample_tasks": [[33, 39], ["numpy.stack", "numpy.random.random", "numpy.random.random", "numpy.cos", "numpy.sin"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjDataWrapper.stack"], ["", "def", "sample_tasks", "(", "self", ",", "num_tasks", ")", ":", "\n", "        ", "a", "=", "np", ".", "random", ".", "random", "(", "num_tasks", ")", "*", "2", "*", "np", ".", "pi", "\n", "r", "=", "3", "*", "np", ".", "random", ".", "random", "(", "num_tasks", ")", "**", "0.5", "\n", "goals", "=", "np", ".", "stack", "(", "(", "r", "*", "np", ".", "cos", "(", "a", ")", ",", "r", "*", "np", ".", "sin", "(", "a", ")", ")", ",", "axis", "=", "-", "1", ")", "\n", "tasks", "=", "[", "{", "'goal'", ":", "goal", "}", "for", "goal", "in", "goals", "]", "\n", "return", "tasks", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco.ant_goal.AntGoalEnv._get_obs": [[40, 45], ["numpy.concatenate", "numpy.clip"], "methods", ["None"], ["", "def", "_get_obs", "(", "self", ")", ":", "\n", "        ", "return", "np", ".", "concatenate", "(", "[", "\n", "self", ".", "sim", ".", "data", ".", "qpos", ".", "flat", ",", "\n", "self", ".", "sim", ".", "data", ".", "qvel", ".", "flat", ",", "\n", "np", ".", "clip", "(", "self", ".", "sim", ".", "data", ".", "cfrc_ext", ",", "-", "1", ",", "1", ")", ".", "flat", ",", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco.half_cheetah_vel.HalfCheetahVelEnv.__init__": [[22, 29], ["half_cheetah_vel.HalfCheetahVelEnv.sample_tasks", "half_cheetah_vel.HalfCheetahVelEnv.tasks[].get", "half_cheetah.HalfCheetahEnv.__init__"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.rand_param_envs.base.RandomEnv.sample_tasks", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.__init__"], ["def", "__init__", "(", "self", ",", "task", "=", "{", "}", ",", "n_tasks", "=", "2", ",", "max_episode_steps", "=", "200", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "_task", "=", "task", "\n", "self", ".", "tasks", "=", "self", ".", "sample_tasks", "(", "n_tasks", ")", "\n", "self", ".", "_goal_vel", "=", "self", ".", "tasks", "[", "0", "]", ".", "get", "(", "'velocity'", ",", "0.0", ")", "\n", "self", ".", "_goal", "=", "self", ".", "_goal_vel", "\n", "self", ".", "_max_episode_steps", "=", "max_episode_steps", "\n", "super", "(", "HalfCheetahVelEnv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco.half_cheetah_vel.HalfCheetahVelEnv.step": [[30, 45], ["half_cheetah_vel.HalfCheetahVelEnv.do_simulation", "half_cheetah_vel.HalfCheetahVelEnv._get_obs", "dict", "abs", "numpy.sum", "numpy.square"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco.mujoco_env.MujocoEnv.do_simulation", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.point_robot.PointEnv._get_obs"], ["", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "xposbefore", "=", "self", ".", "sim", ".", "data", ".", "qpos", "[", "0", "]", "\n", "self", ".", "do_simulation", "(", "action", ",", "self", ".", "frame_skip", ")", "\n", "xposafter", "=", "self", ".", "sim", ".", "data", ".", "qpos", "[", "0", "]", "\n", "\n", "forward_vel", "=", "(", "xposafter", "-", "xposbefore", ")", "/", "self", ".", "dt", "\n", "forward_reward", "=", "-", "1.0", "*", "abs", "(", "forward_vel", "-", "self", ".", "_goal_vel", ")", "\n", "ctrl_cost", "=", "0.5", "*", "1e-1", "*", "np", ".", "sum", "(", "np", ".", "square", "(", "action", ")", ")", "\n", "\n", "observation", "=", "self", ".", "_get_obs", "(", ")", "\n", "reward", "=", "forward_reward", "-", "ctrl_cost", "\n", "done", "=", "False", "\n", "infos", "=", "dict", "(", "reward_forward", "=", "forward_reward", ",", "\n", "reward_ctrl", "=", "-", "ctrl_cost", ",", "task", "=", "self", ".", "_task", ")", "\n", "return", "(", "observation", ",", "reward", ",", "done", ",", "infos", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco.half_cheetah_vel.HalfCheetahVelEnv.set_goal": [[46, 48], ["numpy.asarray"], "methods", ["None"], ["", "def", "set_goal", "(", "self", ",", "goal", ")", ":", "\n", "        ", "self", ".", "_goal", "=", "np", ".", "asarray", "(", "goal", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco.half_cheetah_vel.HalfCheetahVelEnv.sample_tasks": [[49, 54], ["numpy.random.uniform"], "methods", ["None"], ["", "def", "sample_tasks", "(", "self", ",", "num_tasks", ")", ":", "\n", "# np.random.seed(1337)", "\n", "        ", "velocities", "=", "np", ".", "random", ".", "uniform", "(", "0.0", ",", "3.0", ",", "size", "=", "(", "num_tasks", ",", ")", ")", "\n", "tasks", "=", "[", "{", "'velocity'", ":", "velocity", "}", "for", "velocity", "in", "velocities", "]", "\n", "return", "tasks", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco.half_cheetah_vel.HalfCheetahVelEnv.get_all_task_idx": [[55, 57], ["range", "len"], "methods", ["None"], ["", "def", "get_all_task_idx", "(", "self", ")", ":", "\n", "        ", "return", "range", "(", "len", "(", "self", ".", "tasks", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco.half_cheetah_vel.HalfCheetahVelEnv.reset_task": [[58, 63], ["half_cheetah_vel.HalfCheetahVelEnv.reset"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.reset"], ["", "def", "reset_task", "(", "self", ",", "idx", ")", ":", "\n", "        ", "self", ".", "_task", "=", "self", ".", "tasks", "[", "idx", "]", "\n", "self", ".", "_goal_vel", "=", "self", ".", "_task", "[", "'velocity'", "]", "\n", "self", ".", "_goal", "=", "self", ".", "_goal_vel", "\n", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco.half_cheetah_vel.HalfCheetahVelEnv.reward": [[64, 80], ["numpy.concatenate", "half_cheetah_vel.HalfCheetahVelEnv.set_state", "half_cheetah_vel.HalfCheetahVelEnv.do_simulation", "abs", "numpy.sum", "numpy.array", "numpy.square"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco.mujoco_env.MujocoEnv.set_state", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco.mujoco_env.MujocoEnv.do_simulation"], ["", "def", "reward", "(", "self", ",", "state", ",", "action", ")", ":", "\n", "        ", "' Here, state is previous state! r_t = r(s_{t-1}, a_t) '", "\n", "qpos", "=", "np", ".", "concatenate", "(", "[", "np", ".", "array", "(", "[", "0.", "]", ")", ",", "state", "[", ":", "8", "]", "]", ")", "\n", "qvel", "=", "state", "[", "8", ":", "17", "]", "\n", "# set state to replay it (in hindsight)", "\n", "self", ".", "set_state", "(", "qpos", ",", "qvel", ")", "\n", "\n", "xposbefore", "=", "self", ".", "sim", ".", "data", ".", "qpos", "[", "0", "]", "\n", "self", ".", "do_simulation", "(", "action", ",", "self", ".", "frame_skip", ")", "\n", "xposafter", "=", "self", ".", "sim", ".", "data", ".", "qpos", "[", "0", "]", "\n", "\n", "forward_vel", "=", "(", "xposafter", "-", "xposbefore", ")", "/", "self", ".", "dt", "\n", "forward_reward", "=", "-", "1.0", "*", "abs", "(", "forward_vel", "-", "self", ".", "_goal_vel", ")", "\n", "ctrl_cost", "=", "0.5", "*", "1e-1", "*", "np", ".", "sum", "(", "np", ".", "square", "(", "action", ")", ")", "\n", "reward", "=", "forward_reward", "-", "ctrl_cost", "\n", "return", "reward", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco.ant.AntEnv.__init__": [[6, 9], ["environments.mujoco.rand_param_envs.gym.envs.mujoco.mujoco_env.MujocoEnv.__init__", "environments.mujoco.rand_param_envs.gym.utils.EzPickle.__init__"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.__init__", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.__init__"], ["class", "AntEnv", "(", "MujocoEnv", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "use_low_gear_ratio", "=", "False", ")", ":", "\n", "# self.init_serialization(locals())", "\n", "        ", "if", "use_low_gear_ratio", ":", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco.ant.AntEnv.step": [[19, 40], ["ant.AntEnv.get_body_com", "ant.AntEnv.do_simulation", "ant.AntEnv.get_body_com", "ant.AntEnv.state_vector", "ant.AntEnv._get_obs", "numpy.sum", "numpy.isfinite().all", "dict", "numpy.square", "numpy.clip", "numpy.isfinite"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco.mujoco_env.MujocoEnv.get_body_com", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco.mujoco_env.MujocoEnv.do_simulation", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco.mujoco_env.MujocoEnv.get_body_com", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco.mujoco_env.MujocoEnv.state_vector", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.point_robot.PointEnv._get_obs", "home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.ListableAPIResource.all"], ["", "def", "step", "(", "self", ",", "a", ")", ":", "\n", "        ", "torso_xyz_before", "=", "self", ".", "get_body_com", "(", "\"torso\"", ")", "\n", "self", ".", "do_simulation", "(", "a", ",", "self", ".", "frame_skip", ")", "\n", "torso_xyz_after", "=", "self", ".", "get_body_com", "(", "\"torso\"", ")", "\n", "torso_velocity", "=", "torso_xyz_after", "-", "torso_xyz_before", "\n", "forward_reward", "=", "torso_velocity", "[", "0", "]", "/", "self", ".", "dt", "\n", "ctrl_cost", "=", "0.", "# .5 * np.square(a).sum()", "\n", "contact_cost", "=", "0.5", "*", "1e-3", "*", "np", ".", "sum", "(", "\n", "np", ".", "square", "(", "np", ".", "clip", "(", "self", ".", "sim", ".", "data", ".", "cfrc_ext", ",", "-", "1", ",", "1", ")", ")", ")", "\n", "survive_reward", "=", "0.", "# 1.0", "\n", "reward", "=", "forward_reward", "-", "ctrl_cost", "-", "contact_cost", "+", "survive_reward", "\n", "state", "=", "self", ".", "state_vector", "(", ")", "\n", "notdone", "=", "np", ".", "isfinite", "(", "state", ")", ".", "all", "(", ")", "and", "state", "[", "2", "]", ">=", "0.2", "and", "state", "[", "2", "]", "<=", "1.0", "\n", "done", "=", "not", "notdone", "\n", "ob", "=", "self", ".", "_get_obs", "(", ")", "\n", "return", "ob", ",", "reward", ",", "done", ",", "dict", "(", "\n", "reward_forward", "=", "forward_reward", ",", "\n", "reward_ctrl", "=", "-", "ctrl_cost", ",", "\n", "reward_contact", "=", "-", "contact_cost", ",", "\n", "reward_survive", "=", "survive_reward", ",", "\n", "torso_velocity", "=", "torso_velocity", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco.ant.AntEnv._get_obs": [[31, 36], ["numpy.concatenate", "numpy.clip"], "methods", ["None"], ["notdone", "=", "np", ".", "isfinite", "(", "state", ")", ".", "all", "(", ")", "and", "state", "[", "2", "]", ">=", "0.2", "and", "state", "[", "2", "]", "<=", "1.0", "\n", "done", "=", "not", "notdone", "\n", "ob", "=", "self", ".", "_get_obs", "(", ")", "\n", "return", "ob", ",", "reward", ",", "done", ",", "dict", "(", "\n", "reward_forward", "=", "forward_reward", ",", "\n", "reward_ctrl", "=", "-", "ctrl_cost", ",", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco.ant.AntEnv.reset_model": [[38, 43], ["ant.AntEnv.set_state", "ant.AntEnv._get_obs", "ant.AntEnv.np_random.uniform", "ant.AntEnv.np_random.randn"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco.mujoco_env.MujocoEnv.set_state", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.point_robot.PointEnv._get_obs", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.randn"], ["reward_survive", "=", "survive_reward", ",", "\n", "torso_velocity", "=", "torso_velocity", ",", "\n", ")", "\n", "\n", "", "def", "_get_obs", "(", "self", ")", ":", "\n", "# this is gym ant obs, should use rllab?", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco.ant.AntEnv.viewer_setup": [[44, 46], ["None"], "methods", ["None"], ["# if position is needed, override this in subclasses", "\n", "        ", "return", "np", ".", "concatenate", "(", "[", "\n", "self", ".", "sim", ".", "data", ".", "qpos", ".", "flat", "[", "2", ":", "]", ",", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco.ant.AntEnv.reset_task": [[59, 64], ["ant.AntEnv.set_task", "ant.AntEnv.reset", "ant.AntEnv.sample_tasks"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.rand_param_envs.base.RandomEnv.set_task", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.reset", "home.repos.pwc.inspect_result.Rondorf_BOReL.rand_param_envs.base.RandomEnv.sample_tasks"], ["", "def", "reset_task", "(", "self", ",", "task", ")", ":", "\n", "        ", "if", "task", "is", "None", ":", "\n", "            ", "task", "=", "self", ".", "sample_tasks", "(", "1", ")", "[", "0", "]", "\n", "", "self", ".", "set_task", "(", "task", ")", "\n", "self", ".", "reset", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco.half_cheetah.HalfCheetahEnv._get_obs": [[21, 25], ["numpy.concatenate"], "methods", ["None"], ["self", ".", "viewer", ".", "cam", ".", "fixedcamid", "=", "camera_id", "\n", "self", ".", "viewer", ".", "cam", ".", "distance", "=", "self", ".", "model", ".", "stat", ".", "extent", "*", "0.35", "\n", "# Hide the overlay", "\n", "self", ".", "viewer", ".", "_hide_overlay", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco.half_cheetah.HalfCheetahEnv.viewer_setup": [[33, 35], ["None"], "methods", ["None"], ["", "elif", "mode", "==", "'human'", ":", "\n", "            ", "self", ".", "_get_viewer", "(", ")", ".", "render", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco.half_cheetah.HalfCheetahEnv.render": [[26, 35], ["half_cheetah.HalfCheetahEnv._get_viewer().render", "half_cheetah.HalfCheetahEnv._get_viewer().read_pixels", "half_cheetah.HalfCheetahEnv._get_viewer().render", "half_cheetah.HalfCheetahEnv._get_viewer", "half_cheetah.HalfCheetahEnv._get_viewer", "half_cheetah.HalfCheetahEnv._get_viewer"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.render", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.render", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco.mujoco_env.MujocoEnv._get_viewer", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco.mujoco_env.MujocoEnv._get_viewer", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco.mujoco_env.MujocoEnv._get_viewer"], ["", "def", "render", "(", "self", ",", "mode", "=", "'human'", ")", ":", "\n", "        ", "if", "mode", "==", "'rgb_array'", ":", "\n", "            ", "self", ".", "_get_viewer", "(", ")", ".", "render", "(", ")", "\n", "# window size used for old mujoco-py:", "\n", "width", ",", "height", "=", "500", ",", "500", "\n", "data", "=", "self", ".", "_get_viewer", "(", ")", ".", "read_pixels", "(", "width", ",", "height", ",", "depth", "=", "False", ")", "\n", "return", "data", "\n", "", "elif", "mode", "==", "'human'", ":", "\n", "            ", "self", ".", "_get_viewer", "(", ")", ".", "render", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco.half_cheetah.HalfCheetahEnv.visualise_behaviour": [[36, 192], ["env.reset_task", "env.reset", "obs_raw.float().reshape().to.float().reshape().to.float().reshape().to", "obs_normalised.float().reshape().to.float().reshape().to.float().reshape().to", "obs_raw.float().reshape().to.float().reshape().to.clone", "hasattr", "env.get_task", "range", "matplotlib.figure", "min", "max", "range", "matplotlib.tight_layout", "torch.zeros().to", "pos[].append", "range", "episode_returns.append", "episode_lengths.append", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "matplotlib.subplot", "matplotlib.plot", "matplotlib.title", "matplotlib.ylabel", "matplotlib.xlim", "matplotlib.savefig", "matplotlib.close", "matplotlib.show", "range", "range", "range", "range", "obs_raw.float().reshape().to.float().reshape().to.float().reshape", "obs_normalised.float().reshape().to.float().reshape().to.float().reshape", "range", "unwrapped_env.get_body_com", "episode_latent_samples[].append", "episode_latent_means[].append", "episode_latent_logvars[].append", "[].copy", "utils.helpers.get_augmented_obs", "policy.act", "env.step", "obs_raw.float().reshape().to.float().reshape().to.float().reshape().to", "obs_normalised.float().reshape().to.float().reshape().to.float().reshape().to", "pos[].append", "episode_next_obs[].append", "episode_rewards[].append", "episode_actions[].append", "sum", "torch.stack", "torch.stack", "min", "max", "range", "matplotlib.xlabel", "matplotlib.xticks", "range", "range", "range", "torch.zeros", "encoder.prior", "curr_latent_sample[].to", "curr_latent_mean[].to", "curr_latent_logvar[].to", "curr_latent_sample[].clone", "curr_latent_mean[].clone", "curr_latent_logvar[].clone", "episode_prev_obs[].append", "episode_prev_obs[].append", "action.cpu().detach", "[].copy", "encoder", "episode_latent_samples[].append", "episode_latent_means[].append", "episode_latent_logvars[].append", "obs_raw.float().reshape().to.float().reshape().to.clone", "rew_raw.clone", "action.clone", "torch.from_numpy().float().reshape().to", "len", "obs_raw.float().reshape().to.float().reshape().to.float", "obs_normalised.float().reshape().to.float().reshape().to.float", "torch.from_numpy().float().reshape().to.clone", "obs_raw.float().reshape().to.float().reshape().to.clone", "obs_raw.float().reshape().to.float().reshape().to.float().reshape", "obs_normalised.float().reshape().to.float().reshape().to.float().reshape", "action.float().to", "torch.tensor().reshape().float().to", "curr_latent_sample[].clone", "curr_latent_mean[].clone", "curr_latent_logvar[].clone", "unwrapped_env.get_body_com", "action.cpu", "torch.from_numpy().float().reshape", "obs_raw.float().reshape().to.float().reshape().to.float", "obs_normalised.float().reshape().to.float().reshape().to.float", "unwrapped_env.get_body_com", "action.float", "torch.tensor().reshape().float", "torch.from_numpy().float", "torch.tensor().reshape", "torch.from_numpy", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.reset_task", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.reset", "home.repos.pwc.inspect_result.Rondorf_BOReL.core.serializable.Serializable.clone", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.get_task", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.title", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.close", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco.mujoco_env.MujocoEnv.get_body_com", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.core.PyTorchModule.copy", "home.repos.pwc.inspect_result.Rondorf_BOReL.utils.helpers.get_augmented_obs", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjDataWrapper.act", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.step", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjDataWrapper.stack", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjDataWrapper.stack", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.zeros", "home.repos.pwc.inspect_result.Rondorf_BOReL.models.encoder.RNNEncoder.prior", "home.repos.pwc.inspect_result.Rondorf_BOReL.core.serializable.Serializable.clone", "home.repos.pwc.inspect_result.Rondorf_BOReL.core.serializable.Serializable.clone", "home.repos.pwc.inspect_result.Rondorf_BOReL.core.serializable.Serializable.clone", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.core.PyTorchModule.copy", "home.repos.pwc.inspect_result.Rondorf_BOReL.core.serializable.Serializable.clone", "home.repos.pwc.inspect_result.Rondorf_BOReL.core.serializable.Serializable.clone", "home.repos.pwc.inspect_result.Rondorf_BOReL.core.serializable.Serializable.clone", "home.repos.pwc.inspect_result.Rondorf_BOReL.core.serializable.Serializable.clone", "home.repos.pwc.inspect_result.Rondorf_BOReL.core.serializable.Serializable.clone", "home.repos.pwc.inspect_result.Rondorf_BOReL.core.serializable.Serializable.clone", "home.repos.pwc.inspect_result.Rondorf_BOReL.core.serializable.Serializable.clone", "home.repos.pwc.inspect_result.Rondorf_BOReL.core.serializable.Serializable.clone", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco.mujoco_env.MujocoEnv.get_body_com", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco.mujoco_env.MujocoEnv.get_body_com", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.from_numpy"], ["", "", "@", "staticmethod", "\n", "def", "visualise_behaviour", "(", "env", ",", "\n", "args", ",", "\n", "policy", ",", "\n", "iter_idx", ",", "\n", "encoder", "=", "None", ",", "\n", "image_folder", "=", "None", ",", "\n", "**", "kwargs", ",", "\n", ")", ":", "\n", "\n", "# TODO: are we going to use the decoders for anything? Some visualisations?", "\n", "\n", "        ", "num_episodes", "=", "args", ".", "max_rollouts_per_task", "\n", "unwrapped_env", "=", "env", ".", "venv", ".", "unwrapped", ".", "envs", "[", "0", "]", ".", "unwrapped", "\n", "\n", "# --- initialise things we want to keep track of ---", "\n", "\n", "episode_prev_obs", "=", "[", "[", "]", "for", "_", "in", "range", "(", "num_episodes", ")", "]", "\n", "episode_next_obs", "=", "[", "[", "]", "for", "_", "in", "range", "(", "num_episodes", ")", "]", "\n", "episode_actions", "=", "[", "[", "]", "for", "_", "in", "range", "(", "num_episodes", ")", "]", "\n", "episode_rewards", "=", "[", "[", "]", "for", "_", "in", "range", "(", "num_episodes", ")", "]", "\n", "\n", "episode_returns", "=", "[", "]", "\n", "episode_lengths", "=", "[", "]", "\n", "\n", "if", "encoder", "is", "not", "None", ":", "\n", "            ", "episode_latent_samples", "=", "[", "[", "]", "for", "_", "in", "range", "(", "num_episodes", ")", "]", "\n", "episode_latent_means", "=", "[", "[", "]", "for", "_", "in", "range", "(", "num_episodes", ")", "]", "\n", "episode_latent_logvars", "=", "[", "[", "]", "for", "_", "in", "range", "(", "num_episodes", ")", "]", "\n", "sample_embeddings", "=", "args", ".", "sample_embeddings", "\n", "", "else", ":", "\n", "            ", "episode_latent_samples", "=", "episode_latent_means", "=", "episode_latent_logvars", "=", "None", "\n", "sample_embeddings", "=", "False", "\n", "\n", "# --- roll out policy ---", "\n", "\n", "# (re)set environment", "\n", "", "env", ".", "reset_task", "(", ")", "\n", "(", "obs_raw", ",", "obs_normalised", ")", "=", "env", ".", "reset", "(", ")", "\n", "obs_raw", "=", "obs_raw", ".", "float", "(", ")", ".", "reshape", "(", "(", "1", ",", "-", "1", ")", ")", ".", "to", "(", "device", ")", "\n", "obs_normalised", "=", "obs_normalised", ".", "float", "(", ")", ".", "reshape", "(", "(", "1", ",", "-", "1", ")", ")", ".", "to", "(", "device", ")", "\n", "start_obs_raw", "=", "obs_raw", ".", "clone", "(", ")", "\n", "\n", "# initialise actions and rewards (used as initial input to policy if we have a recurrent policy)", "\n", "if", "hasattr", "(", "args", ",", "'hidden_size'", ")", ":", "\n", "            ", "hidden_state", "=", "torch", ".", "zeros", "(", "(", "1", ",", "args", ".", "hidden_size", ")", ")", ".", "to", "(", "device", ")", "\n", "", "else", ":", "\n", "            ", "hidden_state", "=", "None", "\n", "\n", "# keep track of what task we're in and the position of the cheetah", "\n", "", "task", "=", "env", ".", "get_task", "(", ")", "\n", "pos", "=", "[", "[", "]", "for", "_", "in", "range", "(", "args", ".", "max_rollouts_per_task", ")", "]", "\n", "pos", "[", "0", "]", "=", "[", "unwrapped_env", ".", "get_body_com", "(", "\"torso\"", ")", "[", "0", "]", "]", "\n", "\n", "for", "episode_idx", "in", "range", "(", "num_episodes", ")", ":", "\n", "\n", "            ", "curr_rollout_rew", "=", "[", "]", "\n", "\n", "if", "episode_idx", "==", "0", ":", "\n", "                ", "if", "encoder", "is", "not", "None", ":", "\n", "# reset to prior", "\n", "                    ", "curr_latent_sample", ",", "curr_latent_mean", ",", "curr_latent_logvar", ",", "hidden_state", "=", "encoder", ".", "prior", "(", "1", ")", "\n", "curr_latent_sample", "=", "curr_latent_sample", "[", "0", "]", ".", "to", "(", "device", ")", "\n", "curr_latent_mean", "=", "curr_latent_mean", "[", "0", "]", ".", "to", "(", "device", ")", "\n", "curr_latent_logvar", "=", "curr_latent_logvar", "[", "0", "]", ".", "to", "(", "device", ")", "\n", "", "else", ":", "\n", "                    ", "curr_latent_sample", "=", "curr_latent_mean", "=", "curr_latent_logvar", "=", "None", "\n", "\n", "", "", "if", "encoder", "is", "not", "None", ":", "\n", "                ", "episode_latent_samples", "[", "episode_idx", "]", ".", "append", "(", "curr_latent_sample", "[", "0", "]", ".", "clone", "(", ")", ")", "\n", "episode_latent_means", "[", "episode_idx", "]", ".", "append", "(", "curr_latent_mean", "[", "0", "]", ".", "clone", "(", ")", ")", "\n", "episode_latent_logvars", "[", "episode_idx", "]", ".", "append", "(", "curr_latent_logvar", "[", "0", "]", ".", "clone", "(", ")", ")", "\n", "\n", "# keep track of position", "\n", "", "pos", "[", "episode_idx", "]", ".", "append", "(", "unwrapped_env", ".", "get_body_com", "(", "\"torso\"", ")", "[", "0", "]", ".", "copy", "(", ")", ")", "\n", "\n", "for", "step_idx", "in", "range", "(", "1", ",", "env", ".", "_max_episode_steps", "+", "1", ")", ":", "\n", "\n", "                ", "if", "step_idx", "==", "1", ":", "\n", "                    ", "episode_prev_obs", "[", "episode_idx", "]", ".", "append", "(", "start_obs_raw", ".", "clone", "(", ")", ")", "\n", "", "else", ":", "\n", "                    ", "episode_prev_obs", "[", "episode_idx", "]", ".", "append", "(", "obs_raw", ".", "clone", "(", ")", ")", "\n", "# act", "\n", "", "o_aug", "=", "utl", ".", "get_augmented_obs", "(", "args", ",", "\n", "obs_normalised", "if", "args", ".", "norm_obs_for_policy", "else", "obs_raw", ",", "\n", "curr_latent_sample", ",", "curr_latent_mean", ",", "\n", "curr_latent_logvar", ")", "\n", "_", ",", "action", ",", "_", "=", "policy", ".", "act", "(", "o_aug", ",", "deterministic", "=", "True", ")", "\n", "\n", "(", "obs_raw", ",", "obs_normalised", ")", ",", "(", "rew_raw", ",", "rew_normalised", ")", ",", "done", ",", "info", "=", "env", ".", "step", "(", "action", ".", "cpu", "(", ")", ".", "detach", "(", ")", ")", "\n", "obs_raw", "=", "obs_raw", ".", "float", "(", ")", ".", "reshape", "(", "(", "1", ",", "-", "1", ")", ")", ".", "to", "(", "device", ")", "\n", "obs_normalised", "=", "obs_normalised", ".", "float", "(", ")", ".", "reshape", "(", "(", "1", ",", "-", "1", ")", ")", ".", "to", "(", "device", ")", "\n", "\n", "# keep track of position", "\n", "pos", "[", "episode_idx", "]", ".", "append", "(", "unwrapped_env", ".", "get_body_com", "(", "\"torso\"", ")", "[", "0", "]", ".", "copy", "(", ")", ")", "\n", "\n", "if", "encoder", "is", "not", "None", ":", "\n", "# update task embedding", "\n", "                    ", "curr_latent_sample", ",", "curr_latent_mean", ",", "curr_latent_logvar", ",", "hidden_state", "=", "encoder", "(", "\n", "action", ".", "float", "(", ")", ".", "to", "(", "device", ")", ",", "\n", "obs_raw", ",", "\n", "torch", ".", "tensor", "(", "rew_raw", ")", ".", "reshape", "(", "(", "1", ",", "1", ")", ")", ".", "float", "(", ")", ".", "to", "(", "device", ")", ",", "\n", "hidden_state", ",", "\n", "return_prior", "=", "False", ")", "\n", "\n", "episode_latent_samples", "[", "episode_idx", "]", ".", "append", "(", "curr_latent_sample", "[", "0", "]", ".", "clone", "(", ")", ")", "\n", "episode_latent_means", "[", "episode_idx", "]", ".", "append", "(", "curr_latent_mean", "[", "0", "]", ".", "clone", "(", ")", ")", "\n", "episode_latent_logvars", "[", "episode_idx", "]", ".", "append", "(", "curr_latent_logvar", "[", "0", "]", ".", "clone", "(", ")", ")", "\n", "\n", "", "episode_next_obs", "[", "episode_idx", "]", ".", "append", "(", "obs_raw", ".", "clone", "(", ")", ")", "\n", "episode_rewards", "[", "episode_idx", "]", ".", "append", "(", "rew_raw", ".", "clone", "(", ")", ")", "\n", "episode_actions", "[", "episode_idx", "]", ".", "append", "(", "action", ".", "clone", "(", ")", ")", "\n", "\n", "if", "info", "[", "0", "]", "[", "'done_mdp'", "]", "and", "not", "done", ":", "\n", "                    ", "start_obs_raw", "=", "info", "[", "0", "]", "[", "'start_state'", "]", "\n", "start_obs_raw", "=", "torch", ".", "from_numpy", "(", "start_obs_raw", ")", ".", "float", "(", ")", ".", "reshape", "(", "(", "1", ",", "-", "1", ")", ")", ".", "to", "(", "device", ")", "\n", "break", "\n", "\n", "", "", "episode_returns", ".", "append", "(", "sum", "(", "curr_rollout_rew", ")", ")", "\n", "episode_lengths", ".", "append", "(", "step_idx", ")", "\n", "\n", "# clean up", "\n", "", "if", "encoder", "is", "not", "None", ":", "\n", "            ", "episode_latent_means", "=", "[", "torch", ".", "stack", "(", "e", ")", "for", "e", "in", "episode_latent_means", "]", "\n", "episode_latent_logvars", "=", "[", "torch", ".", "stack", "(", "e", ")", "for", "e", "in", "episode_latent_logvars", "]", "\n", "\n", "", "episode_prev_obs", "=", "[", "torch", ".", "cat", "(", "e", ")", "for", "e", "in", "episode_prev_obs", "]", "\n", "episode_next_obs", "=", "[", "torch", ".", "cat", "(", "e", ")", "for", "e", "in", "episode_next_obs", "]", "\n", "episode_actions", "=", "[", "torch", ".", "cat", "(", "e", ")", "for", "e", "in", "episode_actions", "]", "\n", "episode_rewards", "=", "[", "torch", ".", "cat", "(", "e", ")", "for", "e", "in", "episode_rewards", "]", "\n", "\n", "# plot the movement of the half-cheetah", "\n", "plt", ".", "figure", "(", "figsize", "=", "(", "7", ",", "4", "*", "num_episodes", ")", ")", "\n", "min_x", "=", "min", "(", "[", "min", "(", "p", ")", "for", "p", "in", "pos", "]", ")", "\n", "max_x", "=", "max", "(", "[", "max", "(", "p", ")", "for", "p", "in", "pos", "]", ")", "\n", "span", "=", "max_x", "-", "min_x", "\n", "for", "i", "in", "range", "(", "num_episodes", ")", ":", "\n", "            ", "plt", ".", "subplot", "(", "num_episodes", ",", "1", ",", "i", "+", "1", ")", "\n", "plt", ".", "plot", "(", "pos", "[", "i", "]", ",", "range", "(", "len", "(", "pos", "[", "i", "]", ")", ")", ",", "'k'", ")", "\n", "plt", ".", "title", "(", "'task: '", ".", "format", "(", "task", ")", ",", "fontsize", "=", "15", ")", "\n", "plt", ".", "ylabel", "(", "'steps (ep {})'", ".", "format", "(", "i", ")", ",", "fontsize", "=", "15", ")", "\n", "if", "i", "==", "num_episodes", "-", "1", ":", "\n", "                ", "plt", ".", "xlabel", "(", "'position'", ",", "fontsize", "=", "15", ")", "\n", "", "else", ":", "\n", "                ", "plt", ".", "xticks", "(", "[", "]", ")", "\n", "", "plt", ".", "xlim", "(", "min_x", "-", "0.05", "*", "span", ",", "max_x", "+", "0.05", "*", "span", ")", "\n", "", "plt", ".", "tight_layout", "(", ")", "\n", "if", "image_folder", "is", "not", "None", ":", "\n", "            ", "plt", ".", "savefig", "(", "'{}/{}_behaviour'", ".", "format", "(", "image_folder", ",", "iter_idx", ")", ")", "\n", "plt", ".", "close", "(", ")", "\n", "", "else", ":", "\n", "            ", "plt", ".", "show", "(", ")", "\n", "\n", "", "return", "episode_latent_means", ",", "episode_latent_logvars", ",", "episode_prev_obs", ",", "episode_next_obs", ",", "episode_actions", ",", "episode_rewards", ",", "episode_returns", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco.ant_multitask_base.MultitaskAntEnv.__init__": [[8, 13], ["ant_multitask_base.MultitaskAntEnv.sample_tasks", "environments.mujoco.ant.AntEnv.__init__"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.rand_param_envs.base.RandomEnv.sample_tasks", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.__init__"], ["    ", "def", "__init__", "(", "self", ",", "task", "=", "{", "}", ",", "n_tasks", "=", "2", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "_task", "=", "task", "\n", "self", ".", "tasks", "=", "self", ".", "sample_tasks", "(", "n_tasks", ")", "\n", "self", ".", "_goal", "=", "self", ".", "tasks", "[", "0", "]", "[", "'goal'", "]", "\n", "super", "(", "MultitaskAntEnv", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco.ant_multitask_base.MultitaskAntEnv.get_all_task_idx": [[30, 32], ["range", "len"], "methods", ["None"], ["def", "get_all_task_idx", "(", "self", ")", ":", "\n", "        ", "return", "range", "(", "len", "(", "self", ".", "tasks", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco.ant_multitask_base.MultitaskAntEnv.reset_task": [[33, 37], ["ant_multitask_base.MultitaskAntEnv.reset"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.reset"], ["", "def", "reset_task", "(", "self", ",", "idx", ")", ":", "\n", "        ", "self", ".", "_task", "=", "self", ".", "tasks", "[", "idx", "]", "\n", "self", ".", "_goal", "=", "self", ".", "_task", "[", "'goal'", "]", "# assume parameterization of task by single vector", "\n", "self", ".", "reset", "(", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco.ant_semicircle.AntSemiCircleEnv.__init__": [[9, 16], ["environments.mujoco.ant_multitask_base.MultitaskAntEnv.__init__"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.__init__"], ["    ", "def", "__init__", "(", "self", ",", "task", "=", "{", "}", ",", "n_tasks", "=", "2", ",", "max_episode_steps", "=", "200", ",", "\n", "modify_init_state_dist", "=", "False", ",", "on_circle_init_state", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "AntSemiCircleEnv", ",", "self", ")", ".", "__init__", "(", "task", ",", "n_tasks", ",", "**", "kwargs", ")", "\n", "# self.set_task(self.sample_tasks(1)[0])", "\n", "self", ".", "_max_episode_steps", "=", "max_episode_steps", "\n", "self", ".", "modify_init_state_dist", "=", "modify_init_state_dist", "\n", "self", ".", "on_circle_init_state", "=", "on_circle_init_state", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco.ant_semicircle.AntSemiCircleEnv.step": [[17, 40], ["ant_semicircle.AntSemiCircleEnv.do_simulation", "numpy.array", "ant_semicircle.AntSemiCircleEnv.state_vector", "ant_semicircle.AntSemiCircleEnv._get_obs", "ant_semicircle.AntSemiCircleEnv.get_body_com", "numpy.sum", "numpy.square().sum", "dict", "numpy.abs", "numpy.square"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco.mujoco_env.MujocoEnv.do_simulation", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco.mujoco_env.MujocoEnv.state_vector", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.point_robot.PointEnv._get_obs", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco.mujoco_env.MujocoEnv.get_body_com"], ["", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "self", ".", "do_simulation", "(", "action", ",", "self", ".", "frame_skip", ")", "\n", "xposafter", "=", "np", ".", "array", "(", "self", ".", "get_body_com", "(", "\"torso\"", ")", ")", "\n", "\n", "goal_reward", "=", "-", "np", ".", "sum", "(", "np", ".", "abs", "(", "xposafter", "[", ":", "2", "]", "-", "self", ".", "_goal", ")", ")", "# make it happy, not suicidal", "\n", "# goal_reward = -(np.sum((xposafter[:2] - self._goal) ** 2) ** 0.5)", "\n", "\n", "ctrl_cost", "=", ".1", "*", "np", ".", "square", "(", "action", ")", ".", "sum", "(", ")", "\n", "# contact_cost = 0.5 * 1e-3 * np.sum(", "\n", "#     np.square(np.clip(self.sim.data.cfrc_ext, -1, 1)))", "\n", "# survive_reward = 0.0", "\n", "# reward = goal_reward - ctrl_cost - contact_cost + survive_reward", "\n", "# reward = goal_reward - ctrl_cost - contact_cost", "\n", "reward", "=", "goal_reward", "-", "ctrl_cost", "\n", "# reward = goal_reward", "\n", "state", "=", "self", ".", "state_vector", "(", ")", "\n", "done", "=", "False", "\n", "ob", "=", "self", ".", "_get_obs", "(", ")", "\n", "return", "ob", ",", "reward", ",", "done", ",", "dict", "(", "\n", "reward_goal", "=", "goal_reward", ",", "\n", "reward_ctrl", "=", "-", "ctrl_cost", ",", "\n", "# reward_contact=-contact_cost,", "\n", "task", "=", "self", ".", "_task", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco.ant_semicircle.AntSemiCircleEnv.reset_model": [[42, 56], ["ant_semicircle.AntSemiCircleEnv.set_state", "ant_semicircle.AntSemiCircleEnv._get_obs", "numpy.array", "numpy.array", "numpy.random.uniform", "numpy.random.uniform", "numpy.linalg.norm", "numpy.array", "numpy.random.uniform", "numpy.random.uniform"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco.mujoco_env.MujocoEnv.set_state", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.point_robot.PointEnv._get_obs"], ["", "def", "reset_model", "(", "self", ")", ":", "\n", "        ", "qpos", "=", "self", ".", "init_qpos", "\n", "# just for offline data collection:", "\n", "if", "self", ".", "modify_init_state_dist", ":", "\n", "            ", "qpos", "[", ":", "2", "]", "=", "np", ".", "array", "(", "[", "np", ".", "random", ".", "uniform", "(", "-", "1.5", ",", "1.5", ")", ",", "np", ".", "random", ".", "uniform", "(", "-", "0.5", ",", "1.5", ")", "]", ")", "\n", "if", "not", "self", ".", "on_circle_init_state", ":", "# make sure initial state is not on semi-circle", "\n", "# while 1 - self.goal_radius <= np.linspace.norm(qpos[:2]) <= 1 + self.goal_radius:", "\n", "                ", "while", "0.8", "<=", "np", ".", "linalg", ".", "norm", "(", "qpos", "[", ":", "2", "]", ")", "<=", "1.2", ":", "# TODO: uses privileged knowledge (R=0.2)", "\n", "                    ", "qpos", "[", ":", "2", "]", "=", "np", ".", "array", "(", "[", "np", ".", "random", ".", "uniform", "(", "-", "1.5", ",", "1.5", ")", ",", "np", ".", "random", ".", "uniform", "(", "-", "0.5", ",", "1.5", ")", "]", ")", "\n", "", "", "", "else", ":", "\n", "            ", "qpos", "[", ":", "2", "]", "=", "np", ".", "array", "(", "[", "0", ",", "0", "]", ")", "\n", "", "qvel", "=", "self", ".", "init_qvel", "\n", "self", ".", "set_state", "(", "qpos", ",", "qvel", ")", "\n", "return", "self", ".", "_get_obs", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco.ant_semicircle.AntSemiCircleEnv.reward": [[57, 65], ["numpy.sum", "numpy.square().sum", "numpy.abs", "numpy.square"], "methods", ["None"], ["", "def", "reward", "(", "self", ",", "state", ",", "action", ")", ":", "\n", "        ", "goal_reward", "=", "-", "np", ".", "sum", "(", "np", ".", "abs", "(", "state", "[", ":", "2", "]", "-", "self", ".", "_goal", ")", ")", "# make it happy, not suicidal", "\n", "ctrl_cost", "=", ".1", "*", "np", ".", "square", "(", "action", ")", ".", "sum", "(", ")", "\n", "# contact_cost = 0.5 * 1e-3 * np.sum(", "\n", "#     np.square(np.clip(self.sim.data.cfrc_ext, -1, 1)))", "\n", "# reward = goal_reward - ctrl_cost - contact_cost", "\n", "reward", "=", "goal_reward", "-", "ctrl_cost", "\n", "return", "reward", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco.ant_semicircle.AntSemiCircleEnv.set_goal": [[66, 68], ["numpy.asarray"], "methods", ["None"], ["", "def", "set_goal", "(", "self", ",", "goal", ")", ":", "\n", "        ", "self", ".", "_goal", "=", "np", ".", "asarray", "(", "goal", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco.ant_semicircle.AntSemiCircleEnv.sample_tasks": [[69, 75], ["numpy.array", "numpy.stack", "random.uniform", "range", "numpy.cos", "numpy.sin"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjDataWrapper.stack"], ["", "def", "sample_tasks", "(", "self", ",", "num_tasks", ")", ":", "\n", "        ", "a", "=", "np", ".", "array", "(", "[", "random", ".", "uniform", "(", "0", ",", "np", ".", "pi", ")", "for", "_", "in", "range", "(", "num_tasks", ")", "]", ")", "\n", "r", "=", "1", "\n", "goals", "=", "np", ".", "stack", "(", "(", "r", "*", "np", ".", "cos", "(", "a", ")", ",", "r", "*", "np", ".", "sin", "(", "a", ")", ")", ",", "axis", "=", "-", "1", ")", "\n", "tasks", "=", "[", "{", "'goal'", ":", "goal", "}", "for", "goal", "in", "goals", "]", "\n", "return", "tasks", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco.ant_semicircle.AntSemiCircleEnv.get_task": [[76, 78], ["None"], "methods", ["None"], ["", "def", "get_task", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_goal", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco.ant_semicircle.AntSemiCircleEnv._get_obs": [[79, 83], ["numpy.concatenate"], "methods", ["None"], ["", "def", "_get_obs", "(", "self", ")", ":", "\n", "        ", "return", "np", ".", "concatenate", "(", "[", "\n", "self", ".", "sim", ".", "data", ".", "qpos", ".", "flat", ",", "\n", "self", ".", "sim", ".", "data", ".", "qvel", ".", "flat", ",", "\n", "# np.clip(self.sim.data.cfrc_ext, -1, 1).flat,", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco.ant_semicircle.AntSemiCircleEnv.viewer_setup": [[86, 90], ["None"], "methods", ["None"], ["", "def", "viewer_setup", "(", "self", ")", ":", "\n", "        ", "self", ".", "viewer", ".", "cam", ".", "distance", "=", "self", ".", "model", ".", "stat", ".", "extent", "*", "0.5", "\n", "self", ".", "viewer", ".", "cam", ".", "elevation", "=", "-", "90", "\n", "self", ".", "viewer", ".", "cam", ".", "azimuth", "=", "90", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco.ant_semicircle.SparseAntSemiCircleEnv.__init__": [[93, 96], ["ant_semicircle.AntSemiCircleEnv.__init__"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.__init__"], ["    ", "def", "__init__", "(", "self", ",", "task", "=", "{", "}", ",", "n_tasks", "=", "2", ",", "max_episode_steps", "=", "200", ",", "goal_radius", "=", "0.2", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "goal_radius", "=", "goal_radius", "\n", "super", "(", ")", ".", "__init__", "(", "task", ",", "n_tasks", ",", "max_episode_steps", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco.ant_semicircle.SparseAntSemiCircleEnv.sparsify_rewards": [[97, 105], ["d.keys", "numpy.sum", "ant_semicircle.SparseAntSemiCircleEnv.is_goal_state", "key.startswith", "non_goal_reward_keys.append"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.is_goal_state", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.startswith"], ["", "def", "sparsify_rewards", "(", "self", ",", "d", ")", ":", "\n", "        ", "non_goal_reward_keys", "=", "[", "]", "\n", "for", "key", "in", "d", ".", "keys", "(", ")", ":", "\n", "            ", "if", "key", ".", "startswith", "(", "'reward'", ")", "and", "key", "!=", "\"reward_goal\"", ":", "\n", "                ", "non_goal_reward_keys", ".", "append", "(", "key", ")", "\n", "", "", "non_goal_rewards", "=", "np", ".", "sum", "(", "[", "d", "[", "reward_key", "]", "for", "reward_key", "in", "non_goal_reward_keys", "]", ")", "\n", "sparse_goal_reward", "=", "1.", "if", "self", ".", "is_goal_state", "(", ")", "else", "0.", "\n", "return", "non_goal_rewards", "+", "sparse_goal_reward", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco.ant_semicircle.SparseAntSemiCircleEnv.step": [[106, 110], ["ant_semicircle.AntSemiCircleEnv.step", "ant_semicircle.SparseAntSemiCircleEnv.sparsify_rewards"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.step", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.point_robot.SparsePointEnv.sparsify_rewards"], ["", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "ob", ",", "reward", ",", "done", ",", "d", "=", "super", "(", ")", ".", "step", "(", "action", ")", "\n", "sparse_reward", "=", "self", ".", "sparsify_rewards", "(", "d", ")", "\n", "return", "ob", ",", "sparse_reward", ",", "done", ",", "d", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco.ant_semicircle.SparseAntSemiCircleEnv.reward": [[111, 119], ["ant_semicircle.SparseAntSemiCircleEnv.is_goal_state", "numpy.square().sum", "numpy.square"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.is_goal_state"], ["", "def", "reward", "(", "self", ",", "state", ",", "action", ")", ":", "\n", "        ", "goal_reward", "=", "1.", "if", "self", ".", "is_goal_state", "(", "state", ")", "else", "0.", "\n", "ctrl_cost", "=", ".1", "*", "np", ".", "square", "(", "action", ")", ".", "sum", "(", ")", "\n", "# contact_cost = 0.5 * 1e-3 * np.sum(", "\n", "#     np.square(np.clip(self.sim.data.cfrc_ext, -1, 1)))", "\n", "# reward = goal_reward - ctrl_cost - contact_cost", "\n", "reward", "=", "goal_reward", "-", "ctrl_cost", "\n", "return", "reward", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco.ant_semicircle.SparseAntSemiCircleEnv.is_goal_state": [[120, 127], ["numpy.array", "numpy.linalg.norm", "ant_semicircle.SparseAntSemiCircleEnv.get_body_com"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco.mujoco_env.MujocoEnv.get_body_com"], ["", "def", "is_goal_state", "(", "self", ",", "state", "=", "None", ")", ":", "\n", "        ", "if", "state", "is", "None", ":", "\n", "            ", "state", "=", "np", ".", "array", "(", "self", ".", "get_body_com", "(", "\"torso\"", ")", ")", "\n", "", "if", "np", ".", "linalg", ".", "norm", "(", "state", "[", ":", "2", "]", "-", "self", ".", "_goal", ")", "<=", "self", ".", "goal_radius", ":", "\n", "            ", "return", "True", "\n", "", "else", ":", "\n", "            ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco.ant_semicircle.SparseAntSemiCircleEnv.plot_env": [[128, 146], ["matplotlib.gca", "numpy.linspace", "matplotlib.plot", "matplotlib.axis", "matplotlib.gca.set_xlim", "matplotlib.gca.set_ylim", "matplotlib.xticks", "matplotlib.yticks", "matplotlib.Circle", "matplotlib.gca.add_artist", "numpy.cos", "numpy.sin", "hasattr"], "methods", ["None"], ["", "", "def", "plot_env", "(", "self", ")", ":", "\n", "        ", "ax", "=", "plt", ".", "gca", "(", ")", "\n", "# plot half circle and goal position", "\n", "angles", "=", "np", ".", "linspace", "(", "0", ",", "np", ".", "pi", ",", "num", "=", "100", ")", "\n", "x", ",", "y", "=", "np", ".", "cos", "(", "angles", ")", ",", "np", ".", "sin", "(", "angles", ")", "\n", "plt", ".", "plot", "(", "x", ",", "y", ",", "color", "=", "'k'", ")", "\n", "# fix visualization", "\n", "plt", ".", "axis", "(", "'scaled'", ")", "\n", "# ax.set_xlim(-1.25, 1.25)", "\n", "ax", ".", "set_xlim", "(", "-", "2", ",", "2", ")", "\n", "# ax.set_ylim(-0.25, 1.25)", "\n", "ax", ".", "set_ylim", "(", "-", "1", ",", "2", ")", "\n", "plt", ".", "xticks", "(", "[", "]", ")", "\n", "plt", ".", "yticks", "(", "[", "]", ")", "\n", "circle", "=", "plt", ".", "Circle", "(", "(", "self", ".", "_goal", "[", "0", "]", ",", "self", ".", "_goal", "[", "1", "]", ")", ",", "\n", "radius", "=", "self", ".", "goal_radius", "if", "hasattr", "(", "self", ",", "'goal_radius'", ")", "else", "0.1", ",", "\n", "alpha", "=", "0.3", ")", "\n", "ax", ".", "add_artist", "(", "circle", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco.ant_semicircle.SparseAntSemiCircleEnv.plot_behavior": [[147, 152], ["matplotlib.plot", "ant_semicircle.SparseAntSemiCircleEnv.plot_env"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.plot_env"], ["", "def", "plot_behavior", "(", "self", ",", "observations", ",", "plot_env", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "plot_env", ":", "# whether to plot circle and goal pos..(maybe already exists)", "\n", "            ", "self", ".", "plot_env", "(", ")", "\n", "# visualise behaviour, current position, goal", "\n", "", "plt", ".", "plot", "(", "observations", "[", ":", ",", "0", "]", ",", "observations", "[", ":", ",", "1", "]", ",", "**", "kwargs", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco.ant_dir.AntDirEnv.__init__": [[8, 14], ["environments.mujoco.ant_multitask_base.MultitaskAntEnv.__init__"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.__init__"], ["    ", "def", "__init__", "(", "self", ",", "task", "=", "{", "}", ",", "n_tasks", "=", "2", ",", "max_episode_steps", "=", "200", ",", "\n", "forward_backward", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "forward_backward", "=", "forward_backward", "\n", "self", ".", "_max_episode_steps", "=", "max_episode_steps", "\n", "\n", "super", "(", "AntDirEnv", ",", "self", ")", ".", "__init__", "(", "task", ",", "n_tasks", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco.ant_dir.AntDirEnv.step": [[15, 41], ["numpy.array", "ant_dir.AntDirEnv.do_simulation", "numpy.array", "numpy.dot", "ant_dir.AntDirEnv.state_vector", "ant_dir.AntDirEnv._get_obs", "ant_dir.AntDirEnv.get_body_com", "numpy.cos", "numpy.sin", "ant_dir.AntDirEnv.get_body_com", "numpy.square().sum", "numpy.sum", "numpy.isfinite().all", "dict", "numpy.square", "numpy.square", "numpy.clip", "numpy.isfinite"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco.mujoco_env.MujocoEnv.do_simulation", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco.mujoco_env.MujocoEnv.state_vector", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.point_robot.PointEnv._get_obs", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco.mujoco_env.MujocoEnv.get_body_com", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco.mujoco_env.MujocoEnv.get_body_com", "home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.ListableAPIResource.all"], ["", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "torso_xyz_before", "=", "np", ".", "array", "(", "self", ".", "get_body_com", "(", "\"torso\"", ")", ")", "\n", "\n", "direct", "=", "(", "np", ".", "cos", "(", "self", ".", "_goal", ")", ",", "np", ".", "sin", "(", "self", ".", "_goal", ")", ")", "\n", "\n", "self", ".", "do_simulation", "(", "action", ",", "self", ".", "frame_skip", ")", "\n", "torso_xyz_after", "=", "np", ".", "array", "(", "self", ".", "get_body_com", "(", "\"torso\"", ")", ")", "\n", "torso_velocity", "=", "torso_xyz_after", "-", "torso_xyz_before", "\n", "forward_reward", "=", "np", ".", "dot", "(", "(", "torso_velocity", "[", ":", "2", "]", "/", "self", ".", "dt", ")", ",", "direct", ")", "\n", "\n", "ctrl_cost", "=", ".5", "*", "np", ".", "square", "(", "action", ")", ".", "sum", "(", ")", "\n", "contact_cost", "=", "0.5", "*", "1e-3", "*", "np", ".", "sum", "(", "\n", "np", ".", "square", "(", "np", ".", "clip", "(", "self", ".", "sim", ".", "data", ".", "cfrc_ext", ",", "-", "1", ",", "1", ")", ")", ")", "\n", "survive_reward", "=", "1.0", "\n", "reward", "=", "forward_reward", "-", "ctrl_cost", "-", "contact_cost", "+", "survive_reward", "\n", "state", "=", "self", ".", "state_vector", "(", ")", "\n", "notdone", "=", "np", ".", "isfinite", "(", "state", ")", ".", "all", "(", ")", "and", "state", "[", "2", "]", ">=", "0.2", "and", "state", "[", "2", "]", "<=", "1.0", "\n", "done", "=", "not", "notdone", "\n", "ob", "=", "self", ".", "_get_obs", "(", ")", "\n", "return", "ob", ",", "reward", ",", "done", ",", "dict", "(", "\n", "reward_forward", "=", "forward_reward", ",", "\n", "reward_ctrl", "=", "-", "ctrl_cost", ",", "\n", "reward_contact", "=", "-", "contact_cost", ",", "\n", "reward_survive", "=", "survive_reward", ",", "\n", "torso_velocity", "=", "torso_velocity", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco.ant_dir.AntDirEnv.sample_tasks": [[43, 51], ["numpy.array", "numpy.random.uniform"], "methods", ["None"], ["", "def", "sample_tasks", "(", "self", ",", "num_tasks", ")", ":", "\n", "        ", "if", "self", ".", "forward_backward", ":", "\n", "            ", "assert", "num_tasks", "==", "2", "\n", "velocities", "=", "np", ".", "array", "(", "[", "0.", ",", "np", ".", "pi", "]", ")", "\n", "", "else", ":", "\n", "            ", "velocities", "=", "np", ".", "random", ".", "uniform", "(", "0.", ",", "2.0", "*", "np", ".", "pi", ",", "size", "=", "(", "num_tasks", ",", ")", ")", "\n", "", "tasks", "=", "[", "{", "'goal'", ":", "velocity", "}", "for", "velocity", "in", "velocities", "]", "\n", "return", "tasks", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco.mujoco_env.MujocoEnv.__init__": [[23, 63], ["model_path.startswith", "mujoco_py.MjModel", "mujoco_env.MujocoEnv.model.data.qpos.ravel().copy", "mujoco_env.MujocoEnv.model.data.qvel.ravel().copy", "mujoco_env.MujocoEnv._step", "mujoco_env.MujocoEnv.model.actuator_ctrlrange.copy", "environments.mujoco.rand_param_envs.gym.spaces.Box", "environments.mujoco.rand_param_envs.gym.spaces.Box", "mujoco_env.MujocoEnv._seed", "os.path.join", "os.path.exists", "IOError", "int", "numpy.zeros", "numpy.ones", "os.path.dirname", "int", "numpy.prod", "numpy.round", "mujoco_env.MujocoEnv.model.data.qpos.ravel", "mujoco_env.MujocoEnv.model.data.qvel.ravel", "int", "numpy.prod", "int", "numpy.prod", "int", "numpy.prod"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.startswith", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.core.PyTorchModule.copy", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.core.PyTorchModule.copy", "home.repos.pwc.inspect_result.Rondorf_BOReL.wrappers.monitoring.Monitor._step", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.core.PyTorchModule.copy", "home.repos.pwc.inspect_result.Rondorf_BOReL.algorithmic.algorithmic_env.AlgorithmicEnv._seed", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.join", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.zeros", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.ones"], ["model_path_is_local", "=", "True", ",", "\n", "automatically_set_obs_and_action_space", "=", "False", ",", "\n", ")", ":", "\n", "        ", "if", "model_path_is_local", ":", "\n", "            ", "model_path", "=", "get_asset_xml", "(", "model_path", ")", "\n", "", "if", "automatically_set_obs_and_action_space", ":", "\n", "            ", "mujoco_env", ".", "MujocoEnv", ".", "__init__", "(", "self", ",", "model_path", ",", "frame_skip", ")", "\n", "", "else", ":", "\n", "            ", "\"\"\"\n            Code below is copy/pasted from MujocoEnv's __init__ function.\n            \"\"\"", "\n", "if", "model_path", ".", "startswith", "(", "\"/\"", ")", ":", "\n", "                ", "fullpath", "=", "model_path", "\n", "", "else", ":", "\n", "                ", "fullpath", "=", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "__file__", ")", ",", "\"assets\"", ",", "model_path", ")", "\n", "", "if", "not", "path", ".", "exists", "(", "fullpath", ")", ":", "\n", "                ", "raise", "IOError", "(", "\"File %s does not exist\"", "%", "fullpath", ")", "\n", "", "self", ".", "frame_skip", "=", "frame_skip", "\n", "self", ".", "model", "=", "mujoco_py", ".", "MjModel", "(", "fullpath", ")", "\n", "self", ".", "data", "=", "self", ".", "model", ".", "data", "\n", "self", ".", "viewer", "=", "None", "\n", "\n", "self", ".", "metadata", "=", "{", "\n", "'render.modes'", ":", "[", "'human'", ",", "'rgb_array'", "]", ",", "\n", "'video.frames_per_second'", ":", "int", "(", "np", ".", "round", "(", "1.0", "/", "self", ".", "dt", ")", ")", "\n", "}", "\n", "\n", "self", ".", "init_qpos", "=", "self", ".", "model", ".", "data", ".", "qpos", ".", "ravel", "(", ")", ".", "copy", "(", ")", "\n", "self", ".", "init_qvel", "=", "self", ".", "model", ".", "data", ".", "qvel", ".", "ravel", "(", ")", ".", "copy", "(", ")", "\n", "self", ".", "_seed", "(", ")", "\n", "\n", "", "", "def", "init_serialization", "(", "self", ",", "locals", ")", ":", "\n", "        ", "Serializable", ".", "quick_init", "(", "self", ",", "locals", ")", "\n", "\n", "", "def", "log_diagnostics", "(", "self", ",", "paths", ")", ":", "\n", "        ", "pass", "\n", "\n", "\n", "", "", "def", "get_asset_xml", "(", "xml_name", ")", ":", "\n", "    ", "return", "os", ".", "path", ".", "join", "(", "ENV_ASSET_DIR", ",", "xml_name", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco.mujoco_env.MujocoEnv.init_serialization": [[54, 56], ["environments.mujoco.core.serializable.Serializable.quick_init"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.core.serializable.Serializable.quick_init"], ["", "", "def", "init_serialization", "(", "self", ",", "locals", ")", ":", "\n", "        ", "Serializable", ".", "quick_init", "(", "self", ",", "locals", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco.mujoco_env.MujocoEnv.log_diagnostics": [[57, 59], ["None"], "methods", ["None"], ["", "def", "log_diagnostics", "(", "self", ",", "paths", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco.mujoco_env.get_asset_xml": [[61, 63], ["os.path.join"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.join"], ["", "", "def", "get_asset_xml", "(", "xml_name", ")", ":", "\n", "    ", "return", "os", ".", "path", ".", "join", "(", "ENV_ASSET_DIR", ",", "xml_name", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco.half_cheetah_dir.HalfCheetahDirEnv.__init__": [[26, 30], ["half_cheetah_dir.HalfCheetahDirEnv.set_task", "half_cheetah.HalfCheetahEnv.__init__", "half_cheetah_dir.HalfCheetahDirEnv.sample_tasks"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.rand_param_envs.base.RandomEnv.set_task", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.__init__", "home.repos.pwc.inspect_result.Rondorf_BOReL.rand_param_envs.base.RandomEnv.sample_tasks"], ["def", "__init__", "(", "self", ",", "max_episode_steps", ")", ":", "\n", "        ", "self", ".", "set_task", "(", "self", ".", "sample_tasks", "(", "1", ")", "[", "0", "]", ")", "\n", "self", ".", "_max_episode_steps", "=", "max_episode_steps", "\n", "super", "(", "HalfCheetahDirEnv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco.half_cheetah_dir.HalfCheetahDirEnv.step": [[31, 47], ["half_cheetah_dir.HalfCheetahDirEnv.do_simulation", "half_cheetah_dir.HalfCheetahDirEnv._get_obs", "dict", "numpy.sum", "numpy.square", "half_cheetah_dir.HalfCheetahDirEnv.get_task"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco.mujoco_env.MujocoEnv.do_simulation", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.point_robot.PointEnv._get_obs", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.get_task"], ["", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "xposbefore", "=", "self", ".", "sim", ".", "data", ".", "qpos", "[", "0", "]", "\n", "self", ".", "do_simulation", "(", "action", ",", "self", ".", "frame_skip", ")", "\n", "xposafter", "=", "self", ".", "sim", ".", "data", ".", "qpos", "[", "0", "]", "\n", "\n", "forward_vel", "=", "(", "xposafter", "-", "xposbefore", ")", "/", "self", ".", "dt", "\n", "forward_reward", "=", "self", ".", "goal_direction", "*", "forward_vel", "\n", "ctrl_cost", "=", "0.5", "*", "1e-1", "*", "np", ".", "sum", "(", "np", ".", "square", "(", "action", ")", ")", "\n", "\n", "observation", "=", "self", ".", "_get_obs", "(", ")", "\n", "reward", "=", "forward_reward", "-", "ctrl_cost", "\n", "done", "=", "False", "\n", "infos", "=", "dict", "(", "reward_forward", "=", "forward_reward", ",", "\n", "reward_ctrl", "=", "-", "ctrl_cost", ",", "\n", "task", "=", "self", ".", "get_task", "(", ")", ")", "\n", "return", "observation", ",", "reward", ",", "done", ",", "infos", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco.half_cheetah_dir.HalfCheetahDirEnv.sample_tasks": [[48, 51], ["random.choice", "range"], "methods", ["None"], ["", "def", "sample_tasks", "(", "self", ",", "n_tasks", ")", ":", "\n", "# for fwd/bwd env, goal direc is backwards if - 1.0, forwards if + 1.0", "\n", "        ", "return", "[", "random", ".", "choice", "(", "[", "-", "1.0", ",", "1.0", "]", ")", "for", "_", "in", "range", "(", "n_tasks", ",", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco.half_cheetah_dir.HalfCheetahDirEnv.set_task": [[52, 54], ["None"], "methods", ["None"], ["", "def", "set_task", "(", "self", ",", "task", ")", ":", "\n", "        ", "self", ".", "goal_direction", "=", "task", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco.half_cheetah_dir.HalfCheetahDirEnv.get_task": [[55, 57], ["None"], "methods", ["None"], ["", "def", "get_task", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "goal_direction", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco.half_cheetah_dir.HalfCheetahDirEnv.reset_task": [[58, 63], ["half_cheetah_dir.HalfCheetahDirEnv.set_task", "half_cheetah_dir.HalfCheetahDirEnv.reset", "half_cheetah_dir.HalfCheetahDirEnv.sample_tasks"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.rand_param_envs.base.RandomEnv.set_task", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.reset", "home.repos.pwc.inspect_result.Rondorf_BOReL.rand_param_envs.base.RandomEnv.sample_tasks"], ["", "def", "reset_task", "(", "self", ",", "task", "=", "None", ")", ":", "\n", "        ", "if", "task", "is", "None", ":", "\n", "            ", "task", "=", "self", ".", "sample_tasks", "(", "1", ")", "[", "0", "]", "\n", "", "self", ".", "set_task", "(", "task", ")", "\n", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco.half_cheetah_dir.HalfCheetahRandDirOracleEnv._get_obs": [[67, 74], ["numpy.concatenate().astype().flatten", "numpy.concatenate().astype", "numpy.concatenate", "half_cheetah_dir.HalfCheetahRandDirOracleEnv.get_body_com"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco.mujoco_env.MujocoEnv.get_body_com"], ["    ", "def", "_get_obs", "(", "self", ")", ":", "\n", "        ", "return", "np", ".", "concatenate", "(", "[", "\n", "self", ".", "sim", ".", "data", ".", "qpos", ".", "flat", "[", "1", ":", "]", ",", "\n", "self", ".", "sim", ".", "data", ".", "qvel", ".", "flat", ",", "\n", "self", ".", "get_body_com", "(", "\"torso\"", ")", ".", "flat", ",", "\n", "[", "self", ".", "goal_direction", "]", "\n", "]", ")", ".", "astype", "(", "np", ".", "float32", ")", ".", "flatten", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco.inverted_pendulum.InvertedPendulumEnv.__init__": [[6, 9], ["environments.mujoco.rand_param_envs.gym.utils.EzPickle.__init__", "environments.mujoco.rand_param_envs.gym.envs.mujoco.mujoco_env.MujocoEnv.__init__"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.__init__", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "utils", ".", "EzPickle", ".", "__init__", "(", "self", ")", "\n", "mujoco_env", ".", "MujocoEnv", ".", "__init__", "(", "self", ",", "'inverted_pendulum.xml'", ",", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco.inverted_pendulum.InvertedPendulumEnv._step": [[10, 17], ["inverted_pendulum.InvertedPendulumEnv.do_simulation", "inverted_pendulum.InvertedPendulumEnv._get_obs", "numpy.isfinite().all", "numpy.abs", "numpy.isfinite"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco.mujoco_env.MujocoEnv.do_simulation", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.point_robot.PointEnv._get_obs", "home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.ListableAPIResource.all"], ["", "def", "_step", "(", "self", ",", "a", ")", ":", "\n", "        ", "reward", "=", "1.0", "\n", "self", ".", "do_simulation", "(", "a", ",", "self", ".", "frame_skip", ")", "\n", "ob", "=", "self", ".", "_get_obs", "(", ")", "\n", "notdone", "=", "np", ".", "isfinite", "(", "ob", ")", ".", "all", "(", ")", "and", "(", "np", ".", "abs", "(", "ob", "[", "1", "]", ")", "<=", ".2", ")", "\n", "done", "=", "not", "notdone", "\n", "return", "ob", ",", "reward", ",", "done", ",", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco.inverted_pendulum.InvertedPendulumEnv.reset_model": [[18, 23], ["inverted_pendulum.InvertedPendulumEnv.set_state", "inverted_pendulum.InvertedPendulumEnv._get_obs", "inverted_pendulum.InvertedPendulumEnv.np_random.uniform", "inverted_pendulum.InvertedPendulumEnv.np_random.uniform"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco.mujoco_env.MujocoEnv.set_state", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.point_robot.PointEnv._get_obs"], ["", "def", "reset_model", "(", "self", ")", ":", "\n", "        ", "qpos", "=", "self", ".", "init_qpos", "+", "self", ".", "np_random", ".", "uniform", "(", "size", "=", "self", ".", "model", ".", "nq", ",", "low", "=", "-", "0.01", ",", "high", "=", "0.01", ")", "\n", "qvel", "=", "self", ".", "init_qvel", "+", "self", ".", "np_random", ".", "uniform", "(", "size", "=", "self", ".", "model", ".", "nv", ",", "low", "=", "-", "0.01", ",", "high", "=", "0.01", ")", "\n", "self", ".", "set_state", "(", "qpos", ",", "qvel", ")", "\n", "return", "self", ".", "_get_obs", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco.inverted_pendulum.InvertedPendulumEnv._get_obs": [[24, 26], ["numpy.concatenate().ravel", "numpy.concatenate"], "methods", ["None"], ["", "def", "_get_obs", "(", "self", ")", ":", "\n", "        ", "return", "np", ".", "concatenate", "(", "[", "self", ".", "model", ".", "data", ".", "qpos", ",", "self", ".", "model", ".", "data", ".", "qvel", "]", ")", ".", "ravel", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco.inverted_pendulum.InvertedPendulumEnv.viewer_setup": [[27, 31], ["None"], "methods", ["None"], ["", "def", "viewer_setup", "(", "self", ")", ":", "\n", "        ", "v", "=", "self", ".", "viewer", "\n", "v", ".", "cam", ".", "trackbodyid", "=", "0", "\n", "v", ".", "cam", ".", "distance", "=", "v", ".", "model", ".", "stat", ".", "extent", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco.hopper.HopperEnv.__init__": [[6, 9], ["environments.mujoco.rand_param_envs.gym.envs.mujoco.mujoco_env.MujocoEnv.__init__", "environments.mujoco.rand_param_envs.gym.utils.EzPickle.__init__"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.__init__", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "mujoco_env", ".", "MujocoEnv", ".", "__init__", "(", "self", ",", "'hopper.xml'", ",", "4", ")", "\n", "utils", ".", "EzPickle", ".", "__init__", "(", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco.hopper.HopperEnv._step": [[10, 23], ["hopper.HopperEnv.do_simulation", "hopper.HopperEnv.state_vector", "hopper.HopperEnv._get_obs", "numpy.square().sum", "numpy.isfinite().all", "numpy.square", "abs", "numpy.isfinite", "numpy.abs"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco.mujoco_env.MujocoEnv.do_simulation", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco.mujoco_env.MujocoEnv.state_vector", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.point_robot.PointEnv._get_obs", "home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.ListableAPIResource.all"], ["", "def", "_step", "(", "self", ",", "a", ")", ":", "\n", "        ", "posbefore", "=", "self", ".", "model", ".", "data", ".", "qpos", "[", "0", ",", "0", "]", "\n", "self", ".", "do_simulation", "(", "a", ",", "self", ".", "frame_skip", ")", "\n", "posafter", ",", "height", ",", "ang", "=", "self", ".", "model", ".", "data", ".", "qpos", "[", "0", ":", "3", ",", "0", "]", "\n", "alive_bonus", "=", "1.0", "\n", "reward", "=", "(", "posafter", "-", "posbefore", ")", "/", "self", ".", "dt", "\n", "reward", "+=", "alive_bonus", "\n", "reward", "-=", "1e-3", "*", "np", ".", "square", "(", "a", ")", ".", "sum", "(", ")", "\n", "s", "=", "self", ".", "state_vector", "(", ")", "\n", "done", "=", "not", "(", "np", ".", "isfinite", "(", "s", ")", ".", "all", "(", ")", "and", "(", "np", ".", "abs", "(", "s", "[", "2", ":", "]", ")", "<", "100", ")", ".", "all", "(", ")", "and", "\n", "(", "height", ">", ".7", ")", "and", "(", "abs", "(", "ang", ")", "<", ".2", ")", ")", "\n", "ob", "=", "self", ".", "_get_obs", "(", ")", "\n", "return", "ob", ",", "reward", ",", "done", ",", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco.hopper.HopperEnv._get_obs": [[24, 28], ["numpy.concatenate", "numpy.clip"], "methods", ["None"], ["", "def", "_get_obs", "(", "self", ")", ":", "\n", "        ", "return", "np", ".", "concatenate", "(", "[", "\n", "self", ".", "model", ".", "data", ".", "qpos", ".", "flat", "[", "1", ":", "]", ",", "\n", "np", ".", "clip", "(", "self", ".", "model", ".", "data", ".", "qvel", ".", "flat", ",", "-", "10", ",", "10", ")", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco.hopper.HopperEnv.reset_model": [[30, 35], ["hopper.HopperEnv.set_state", "hopper.HopperEnv._get_obs", "hopper.HopperEnv.np_random.uniform", "hopper.HopperEnv.np_random.uniform"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco.mujoco_env.MujocoEnv.set_state", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.point_robot.PointEnv._get_obs"], ["", "def", "reset_model", "(", "self", ")", ":", "\n", "        ", "qpos", "=", "self", ".", "init_qpos", "+", "self", ".", "np_random", ".", "uniform", "(", "low", "=", "-", ".005", ",", "high", "=", ".005", ",", "size", "=", "self", ".", "model", ".", "nq", ")", "\n", "qvel", "=", "self", ".", "init_qvel", "+", "self", ".", "np_random", ".", "uniform", "(", "low", "=", "-", ".005", ",", "high", "=", ".005", ",", "size", "=", "self", ".", "model", ".", "nv", ")", "\n", "self", ".", "set_state", "(", "qpos", ",", "qvel", ")", "\n", "return", "self", ".", "_get_obs", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco.hopper.HopperEnv.viewer_setup": [[36, 41], ["None"], "methods", ["None"], ["", "def", "viewer_setup", "(", "self", ")", ":", "\n", "        ", "self", ".", "viewer", ".", "cam", ".", "trackbodyid", "=", "2", "\n", "self", ".", "viewer", ".", "cam", ".", "distance", "=", "self", ".", "model", ".", "stat", ".", "extent", "*", "0.75", "\n", "self", ".", "viewer", ".", "cam", ".", "lookat", "[", "2", "]", "+=", ".8", "\n", "self", ".", "viewer", ".", "cam", ".", "elevation", "=", "-", "20", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco.inverted_double_pendulum.InvertedDoublePendulumEnv.__init__": [[7, 10], ["environments.mujoco.rand_param_envs.gym.envs.mujoco.mujoco_env.MujocoEnv.__init__", "environments.mujoco.rand_param_envs.gym.utils.EzPickle.__init__"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.__init__", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "mujoco_env", ".", "MujocoEnv", ".", "__init__", "(", "self", ",", "'inverted_double_pendulum.xml'", ",", "5", ")", "\n", "utils", ".", "EzPickle", ".", "__init__", "(", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco.inverted_double_pendulum.InvertedDoublePendulumEnv._step": [[11, 22], ["inverted_double_pendulum.InvertedDoublePendulumEnv.do_simulation", "inverted_double_pendulum.InvertedDoublePendulumEnv._get_obs", "bool"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco.mujoco_env.MujocoEnv.do_simulation", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.point_robot.PointEnv._get_obs"], ["", "def", "_step", "(", "self", ",", "action", ")", ":", "\n", "        ", "self", ".", "do_simulation", "(", "action", ",", "self", ".", "frame_skip", ")", "\n", "ob", "=", "self", ".", "_get_obs", "(", ")", "\n", "x", ",", "_", ",", "y", "=", "self", ".", "model", ".", "data", ".", "site_xpos", "[", "0", "]", "\n", "dist_penalty", "=", "0.01", "*", "x", "**", "2", "+", "(", "y", "-", "2", ")", "**", "2", "\n", "v1", ",", "v2", "=", "self", ".", "model", ".", "data", ".", "qvel", "[", "1", ":", "3", "]", "\n", "vel_penalty", "=", "1e-3", "*", "v1", "**", "2", "+", "5e-3", "*", "v2", "**", "2", "\n", "alive_bonus", "=", "10", "\n", "r", "=", "(", "alive_bonus", "-", "dist_penalty", "-", "vel_penalty", ")", "[", "0", "]", "\n", "done", "=", "bool", "(", "y", "<=", "1", ")", "\n", "return", "ob", ",", "r", ",", "done", ",", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco.inverted_double_pendulum.InvertedDoublePendulumEnv._get_obs": [[23, 30], ["numpy.concatenate().ravel", "numpy.concatenate", "numpy.sin", "numpy.cos", "numpy.clip", "numpy.clip"], "methods", ["None"], ["", "def", "_get_obs", "(", "self", ")", ":", "\n", "        ", "return", "np", ".", "concatenate", "(", "[", "\n", "self", ".", "model", ".", "data", ".", "qpos", "[", ":", "1", "]", ",", "# cart x pos", "\n", "np", ".", "sin", "(", "self", ".", "model", ".", "data", ".", "qpos", "[", "1", ":", "]", ")", ",", "# link angles", "\n", "np", ".", "cos", "(", "self", ".", "model", ".", "data", ".", "qpos", "[", "1", ":", "]", ")", ",", "\n", "np", ".", "clip", "(", "self", ".", "model", ".", "data", ".", "qvel", ",", "-", "10", ",", "10", ")", ",", "\n", "np", ".", "clip", "(", "self", ".", "model", ".", "data", ".", "qfrc_constraint", ",", "-", "10", ",", "10", ")", "\n", "]", ")", ".", "ravel", "(", ")", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco.inverted_double_pendulum.InvertedDoublePendulumEnv.reset_model": [[32, 38], ["inverted_double_pendulum.InvertedDoublePendulumEnv.set_state", "inverted_double_pendulum.InvertedDoublePendulumEnv._get_obs", "inverted_double_pendulum.InvertedDoublePendulumEnv.np_random.uniform", "inverted_double_pendulum.InvertedDoublePendulumEnv.np_random.randn"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco.mujoco_env.MujocoEnv.set_state", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.point_robot.PointEnv._get_obs", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.randn"], ["", "def", "reset_model", "(", "self", ")", ":", "\n", "        ", "self", ".", "set_state", "(", "\n", "self", ".", "init_qpos", "+", "self", ".", "np_random", ".", "uniform", "(", "low", "=", "-", ".1", ",", "high", "=", ".1", ",", "size", "=", "self", ".", "model", ".", "nq", ")", ",", "\n", "self", ".", "init_qvel", "+", "self", ".", "np_random", ".", "randn", "(", "self", ".", "model", ".", "nv", ")", "*", ".1", "\n", ")", "\n", "return", "self", ".", "_get_obs", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco.inverted_double_pendulum.InvertedDoublePendulumEnv.viewer_setup": [[39, 44], ["None"], "methods", ["None"], ["", "def", "viewer_setup", "(", "self", ")", ":", "\n", "        ", "v", "=", "self", ".", "viewer", "\n", "v", ".", "cam", ".", "trackbodyid", "=", "0", "\n", "v", ".", "cam", ".", "distance", "=", "v", ".", "model", ".", "stat", ".", "extent", "*", "0.5", "\n", "v", ".", "cam", ".", "lookat", "[", "2", "]", "+=", "3", "# v.model.stat.center[2]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco.ant.AntEnv._step": [[10, 30], ["ant.AntEnv.do_simulation", "ant.AntEnv.state_vector", "ant.AntEnv._get_obs", "ant.AntEnv.get_body_com", "ant.AntEnv.get_body_com", "numpy.square().sum", "numpy.sum", "numpy.isfinite().all", "dict", "numpy.square", "numpy.square", "numpy.clip", "numpy.isfinite"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco.mujoco_env.MujocoEnv.do_simulation", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco.mujoco_env.MujocoEnv.state_vector", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.point_robot.PointEnv._get_obs", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco.mujoco_env.MujocoEnv.get_body_com", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco.mujoco_env.MujocoEnv.get_body_com", "home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.ListableAPIResource.all"], ["            ", "xml_path", "=", "'low_gear_ratio_ant.xml'", "\n", "", "else", ":", "\n", "            ", "xml_path", "=", "'ant.xml'", "\n", "", "super", "(", ")", ".", "__init__", "(", "\n", "xml_path", ",", "\n", "frame_skip", "=", "5", ",", "\n", "automatically_set_obs_and_action_space", "=", "True", ",", "\n", ")", "\n", "\n", "", "def", "step", "(", "self", ",", "a", ")", ":", "\n", "        ", "torso_xyz_before", "=", "self", ".", "get_body_com", "(", "\"torso\"", ")", "\n", "self", ".", "do_simulation", "(", "a", ",", "self", ".", "frame_skip", ")", "\n", "torso_xyz_after", "=", "self", ".", "get_body_com", "(", "\"torso\"", ")", "\n", "torso_velocity", "=", "torso_xyz_after", "-", "torso_xyz_before", "\n", "forward_reward", "=", "torso_velocity", "[", "0", "]", "/", "self", ".", "dt", "\n", "ctrl_cost", "=", "0.", "# .5 * np.square(a).sum()", "\n", "contact_cost", "=", "0.5", "*", "1e-3", "*", "np", ".", "sum", "(", "\n", "np", ".", "square", "(", "np", ".", "clip", "(", "self", ".", "sim", ".", "data", ".", "cfrc_ext", ",", "-", "1", ",", "1", ")", ")", ")", "\n", "survive_reward", "=", "0.", "# 1.0", "\n", "reward", "=", "forward_reward", "-", "ctrl_cost", "-", "contact_cost", "+", "survive_reward", "\n", "state", "=", "self", ".", "state_vector", "(", ")", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco.half_cheetah.HalfCheetahEnv.__init__": [[6, 9], ["environments.mujoco.rand_param_envs.gym.envs.mujoco.mujoco_env.MujocoEnv.__init__", "environments.mujoco.rand_param_envs.gym.utils.EzPickle.__init__"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.__init__", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.__init__"], ["\n", "device", "=", "torch", ".", "device", "(", "\"cuda:0\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco.half_cheetah.HalfCheetahEnv._step": [[10, 20], ["half_cheetah.HalfCheetahEnv.do_simulation", "half_cheetah.HalfCheetahEnv._get_obs", "numpy.square().sum", "dict", "numpy.square"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco.mujoco_env.MujocoEnv.do_simulation", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.point_robot.PointEnv._get_obs"], ["class", "HalfCheetahEnv", "(", "HalfCheetahEnv_", ")", ":", "\n", "    ", "def", "_get_obs", "(", "self", ")", ":", "\n", "        ", "return", "np", ".", "concatenate", "(", "[", "\n", "self", ".", "sim", ".", "data", ".", "qpos", ".", "flat", "[", "1", ":", "]", ",", "\n", "self", ".", "sim", ".", "data", ".", "qvel", ".", "flat", ",", "\n", "self", ".", "get_body_com", "(", "\"torso\"", ")", ".", "flat", ",", "\n", "]", ")", ".", "astype", "(", "np", ".", "float32", ")", ".", "flatten", "(", ")", "\n", "\n", "", "def", "viewer_setup", "(", "self", ")", ":", "\n", "        ", "camera_id", "=", "self", ".", "model", ".", "camera_name2id", "(", "'track'", ")", "\n", "self", ".", "viewer", ".", "cam", ".", "type", "=", "2", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco.half_cheetah.HalfCheetahEnv.reset_model": [[27, 32], ["half_cheetah.HalfCheetahEnv.set_state", "half_cheetah.HalfCheetahEnv._get_obs", "half_cheetah.HalfCheetahEnv.np_random.uniform", "half_cheetah.HalfCheetahEnv.np_random.randn"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco.mujoco_env.MujocoEnv.set_state", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.point_robot.PointEnv._get_obs", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.randn"], ["        ", "if", "mode", "==", "'rgb_array'", ":", "\n", "            ", "self", ".", "_get_viewer", "(", ")", ".", "render", "(", ")", "\n", "# window size used for old mujoco-py:", "\n", "width", ",", "height", "=", "500", ",", "500", "\n", "data", "=", "self", ".", "_get_viewer", "(", ")", ".", "read_pixels", "(", "width", ",", "height", ",", "depth", "=", "False", ")", "\n", "return", "data", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco.humanoidstandup.HumanoidStandupEnv.__init__": [[11, 14], ["environments.mujoco.rand_param_envs.gym.envs.mujoco.mujoco_env.MujocoEnv.__init__", "environments.mujoco.rand_param_envs.gym.utils.EzPickle.__init__"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.__init__", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "mujoco_env", ".", "MujocoEnv", ".", "__init__", "(", "self", ",", "'humanoidstandup.xml'", ",", "5", ")", "\n", "utils", ".", "EzPickle", ".", "__init__", "(", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco.humanoidstandup.HumanoidStandupEnv._get_obs": [[15, 23], ["numpy.concatenate"], "methods", ["None"], ["", "def", "_get_obs", "(", "self", ")", ":", "\n", "        ", "data", "=", "self", ".", "model", ".", "data", "\n", "return", "np", ".", "concatenate", "(", "[", "data", ".", "qpos", ".", "flat", "[", "2", ":", "]", ",", "\n", "data", ".", "qvel", ".", "flat", ",", "\n", "data", ".", "cinert", ".", "flat", ",", "\n", "data", ".", "cvel", ".", "flat", ",", "\n", "data", ".", "qfrc_actuator", ".", "flat", ",", "\n", "data", ".", "cfrc_ext", ".", "flat", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco.humanoidstandup.HumanoidStandupEnv._step": [[24, 37], ["humanoidstandup.HumanoidStandupEnv.do_simulation", "min", "bool", "numpy.square().sum", "numpy.square().sum", "humanoidstandup.HumanoidStandupEnv._get_obs", "dict", "numpy.square", "numpy.square"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco.mujoco_env.MujocoEnv.do_simulation", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.point_robot.PointEnv._get_obs"], ["", "def", "_step", "(", "self", ",", "a", ")", ":", "\n", "        ", "self", ".", "do_simulation", "(", "a", ",", "self", ".", "frame_skip", ")", "\n", "pos_after", "=", "self", ".", "model", ".", "data", ".", "qpos", "[", "2", "]", "[", "0", "]", "\n", "data", "=", "self", ".", "model", ".", "data", "\n", "uph_cost", "=", "(", "pos_after", "-", "0", ")", "/", "self", ".", "model", ".", "opt", ".", "timestep", "\n", "\n", "quad_ctrl_cost", "=", "0.1", "*", "np", ".", "square", "(", "data", ".", "ctrl", ")", ".", "sum", "(", ")", "\n", "quad_impact_cost", "=", ".5e-6", "*", "np", ".", "square", "(", "data", ".", "cfrc_ext", ")", ".", "sum", "(", ")", "\n", "quad_impact_cost", "=", "min", "(", "quad_impact_cost", ",", "10", ")", "\n", "reward", "=", "uph_cost", "-", "quad_ctrl_cost", "-", "quad_impact_cost", "+", "1", "\n", "\n", "done", "=", "bool", "(", "False", ")", "\n", "return", "self", ".", "_get_obs", "(", ")", ",", "reward", ",", "done", ",", "dict", "(", "reward_linup", "=", "uph_cost", ",", "reward_quadctrl", "=", "-", "quad_ctrl_cost", ",", "reward_impact", "=", "-", "quad_impact_cost", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco.humanoidstandup.HumanoidStandupEnv.reset_model": [[38, 45], ["humanoidstandup.HumanoidStandupEnv.set_state", "humanoidstandup.HumanoidStandupEnv._get_obs", "humanoidstandup.HumanoidStandupEnv.np_random.uniform", "humanoidstandup.HumanoidStandupEnv.np_random.uniform"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco.mujoco_env.MujocoEnv.set_state", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.point_robot.PointEnv._get_obs"], ["", "def", "reset_model", "(", "self", ")", ":", "\n", "        ", "c", "=", "0.01", "\n", "self", ".", "set_state", "(", "\n", "self", ".", "init_qpos", "+", "self", ".", "np_random", ".", "uniform", "(", "low", "=", "-", "c", ",", "high", "=", "c", ",", "size", "=", "self", ".", "model", ".", "nq", ")", ",", "\n", "self", ".", "init_qvel", "+", "self", ".", "np_random", ".", "uniform", "(", "low", "=", "-", "c", ",", "high", "=", "c", ",", "size", "=", "self", ".", "model", ".", "nv", ",", ")", "\n", ")", "\n", "return", "self", ".", "_get_obs", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco.humanoidstandup.HumanoidStandupEnv.viewer_setup": [[46, 51], ["None"], "methods", ["None"], ["", "def", "viewer_setup", "(", "self", ")", ":", "\n", "        ", "self", ".", "viewer", ".", "cam", ".", "trackbodyid", "=", "1", "\n", "self", ".", "viewer", ".", "cam", ".", "distance", "=", "self", ".", "model", ".", "stat", ".", "extent", "*", "1.0", "\n", "self", ".", "viewer", ".", "cam", ".", "lookat", "[", "2", "]", "+=", ".8", "\n", "self", ".", "viewer", ".", "cam", ".", "elevation", "=", "-", "20", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco.humanoidstandup.mass_center": [[5, 9], ["numpy.sum", "numpy.sum"], "function", ["None"], ["def", "mass_center", "(", "model", ")", ":", "\n", "    ", "mass", "=", "model", ".", "body_mass", "\n", "xpos", "=", "model", ".", "data", ".", "xipos", "\n", "return", "(", "np", ".", "sum", "(", "mass", "*", "xpos", ",", "0", ")", "/", "np", ".", "sum", "(", "mass", ")", ")", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco.humanoid.HumanoidEnv.__init__": [[11, 14], ["environments.mujoco.rand_param_envs.gym.envs.mujoco.mujoco_env.MujocoEnv.__init__", "environments.mujoco.rand_param_envs.gym.utils.EzPickle.__init__"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.__init__", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "mujoco_env", ".", "MujocoEnv", ".", "__init__", "(", "self", ",", "'humanoid.xml'", ",", "5", ")", "\n", "utils", ".", "EzPickle", ".", "__init__", "(", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco.humanoid.HumanoidEnv._get_obs": [[15, 23], ["numpy.concatenate"], "methods", ["None"], ["", "def", "_get_obs", "(", "self", ")", ":", "\n", "        ", "data", "=", "self", ".", "model", ".", "data", "\n", "return", "np", ".", "concatenate", "(", "[", "data", ".", "qpos", ".", "flat", "[", "2", ":", "]", ",", "\n", "data", ".", "qvel", ".", "flat", ",", "\n", "data", ".", "cinert", ".", "flat", ",", "\n", "data", ".", "cvel", ".", "flat", ",", "\n", "data", ".", "qfrc_actuator", ".", "flat", ",", "\n", "data", ".", "cfrc_ext", ".", "flat", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco.humanoid.HumanoidEnv._step": [[24, 38], ["humanoid.mass_center", "humanoid.HumanoidEnv.do_simulation", "humanoid.mass_center", "min", "bool", "numpy.square().sum", "numpy.square().sum", "humanoid.HumanoidEnv._get_obs", "dict", "numpy.square", "numpy.square"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco.humanoid.mass_center", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco.mujoco_env.MujocoEnv.do_simulation", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco.humanoid.mass_center", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.point_robot.PointEnv._get_obs"], ["", "def", "_step", "(", "self", ",", "a", ")", ":", "\n", "        ", "pos_before", "=", "mass_center", "(", "self", ".", "model", ")", "\n", "self", ".", "do_simulation", "(", "a", ",", "self", ".", "frame_skip", ")", "\n", "pos_after", "=", "mass_center", "(", "self", ".", "model", ")", "\n", "alive_bonus", "=", "5.0", "\n", "data", "=", "self", ".", "model", ".", "data", "\n", "lin_vel_cost", "=", "0.25", "*", "(", "pos_after", "-", "pos_before", ")", "/", "self", ".", "model", ".", "opt", ".", "timestep", "\n", "quad_ctrl_cost", "=", "0.1", "*", "np", ".", "square", "(", "data", ".", "ctrl", ")", ".", "sum", "(", ")", "\n", "quad_impact_cost", "=", ".5e-6", "*", "np", ".", "square", "(", "data", ".", "cfrc_ext", ")", ".", "sum", "(", ")", "\n", "quad_impact_cost", "=", "min", "(", "quad_impact_cost", ",", "10", ")", "\n", "reward", "=", "lin_vel_cost", "-", "quad_ctrl_cost", "-", "quad_impact_cost", "+", "alive_bonus", "\n", "qpos", "=", "self", ".", "model", ".", "data", ".", "qpos", "\n", "done", "=", "bool", "(", "(", "qpos", "[", "2", "]", "<", "1.0", ")", "or", "(", "qpos", "[", "2", "]", ">", "2.0", ")", ")", "\n", "return", "self", ".", "_get_obs", "(", ")", ",", "reward", ",", "done", ",", "dict", "(", "reward_linvel", "=", "lin_vel_cost", ",", "reward_quadctrl", "=", "-", "quad_ctrl_cost", ",", "reward_alive", "=", "alive_bonus", ",", "reward_impact", "=", "-", "quad_impact_cost", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco.humanoid.HumanoidEnv.reset_model": [[39, 46], ["humanoid.HumanoidEnv.set_state", "humanoid.HumanoidEnv._get_obs", "humanoid.HumanoidEnv.np_random.uniform", "humanoid.HumanoidEnv.np_random.uniform"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco.mujoco_env.MujocoEnv.set_state", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.point_robot.PointEnv._get_obs"], ["", "def", "reset_model", "(", "self", ")", ":", "\n", "        ", "c", "=", "0.01", "\n", "self", ".", "set_state", "(", "\n", "self", ".", "init_qpos", "+", "self", ".", "np_random", ".", "uniform", "(", "low", "=", "-", "c", ",", "high", "=", "c", ",", "size", "=", "self", ".", "model", ".", "nq", ")", ",", "\n", "self", ".", "init_qvel", "+", "self", ".", "np_random", ".", "uniform", "(", "low", "=", "-", "c", ",", "high", "=", "c", ",", "size", "=", "self", ".", "model", ".", "nv", ",", ")", "\n", ")", "\n", "return", "self", ".", "_get_obs", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco.humanoid.HumanoidEnv.viewer_setup": [[47, 52], ["None"], "methods", ["None"], ["", "def", "viewer_setup", "(", "self", ")", ":", "\n", "        ", "self", ".", "viewer", ".", "cam", ".", "trackbodyid", "=", "1", "\n", "self", ".", "viewer", ".", "cam", ".", "distance", "=", "self", ".", "model", ".", "stat", ".", "extent", "*", "1.0", "\n", "self", ".", "viewer", ".", "cam", ".", "lookat", "[", "2", "]", "+=", ".8", "\n", "self", ".", "viewer", ".", "cam", ".", "elevation", "=", "-", "20", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco.humanoid.mass_center": [[5, 9], ["numpy.sum", "numpy.sum"], "function", ["None"], ["def", "mass_center", "(", "model", ")", ":", "\n", "    ", "mass", "=", "model", ".", "body_mass", "\n", "xpos", "=", "model", ".", "data", ".", "xipos", "\n", "return", "(", "np", ".", "sum", "(", "mass", "*", "xpos", ",", "0", ")", "/", "np", ".", "sum", "(", "mass", ")", ")", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco.swimmer.SwimmerEnv.__init__": [[6, 9], ["environments.mujoco.rand_param_envs.gym.envs.mujoco.mujoco_env.MujocoEnv.__init__", "environments.mujoco.rand_param_envs.gym.utils.EzPickle.__init__"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.__init__", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "mujoco_env", ".", "MujocoEnv", ".", "__init__", "(", "self", ",", "'swimmer.xml'", ",", "4", ")", "\n", "utils", ".", "EzPickle", ".", "__init__", "(", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco.swimmer.SwimmerEnv._step": [[10, 20], ["swimmer.SwimmerEnv.do_simulation", "swimmer.SwimmerEnv._get_obs", "numpy.square().sum", "dict", "numpy.square"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco.mujoco_env.MujocoEnv.do_simulation", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.point_robot.PointEnv._get_obs"], ["", "def", "_step", "(", "self", ",", "a", ")", ":", "\n", "        ", "ctrl_cost_coeff", "=", "0.0001", "\n", "xposbefore", "=", "self", ".", "model", ".", "data", ".", "qpos", "[", "0", ",", "0", "]", "\n", "self", ".", "do_simulation", "(", "a", ",", "self", ".", "frame_skip", ")", "\n", "xposafter", "=", "self", ".", "model", ".", "data", ".", "qpos", "[", "0", ",", "0", "]", "\n", "reward_fwd", "=", "(", "xposafter", "-", "xposbefore", ")", "/", "self", ".", "dt", "\n", "reward_ctrl", "=", "-", "ctrl_cost_coeff", "*", "np", ".", "square", "(", "a", ")", ".", "sum", "(", ")", "\n", "reward", "=", "reward_fwd", "+", "reward_ctrl", "\n", "ob", "=", "self", ".", "_get_obs", "(", ")", "\n", "return", "ob", ",", "reward", ",", "False", ",", "dict", "(", "reward_fwd", "=", "reward_fwd", ",", "reward_ctrl", "=", "reward_ctrl", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco.swimmer.SwimmerEnv._get_obs": [[21, 25], ["numpy.concatenate"], "methods", ["None"], ["", "def", "_get_obs", "(", "self", ")", ":", "\n", "        ", "qpos", "=", "self", ".", "model", ".", "data", ".", "qpos", "\n", "qvel", "=", "self", ".", "model", ".", "data", ".", "qvel", "\n", "return", "np", ".", "concatenate", "(", "[", "qpos", ".", "flat", "[", "2", ":", "]", ",", "qvel", ".", "flat", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco.swimmer.SwimmerEnv.reset_model": [[26, 32], ["swimmer.SwimmerEnv.set_state", "swimmer.SwimmerEnv._get_obs", "swimmer.SwimmerEnv.np_random.uniform", "swimmer.SwimmerEnv.np_random.uniform"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco.mujoco_env.MujocoEnv.set_state", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.point_robot.PointEnv._get_obs"], ["", "def", "reset_model", "(", "self", ")", ":", "\n", "        ", "self", ".", "set_state", "(", "\n", "self", ".", "init_qpos", "+", "self", ".", "np_random", ".", "uniform", "(", "low", "=", "-", ".1", ",", "high", "=", ".1", ",", "size", "=", "self", ".", "model", ".", "nq", ")", ",", "\n", "self", ".", "init_qvel", "+", "self", ".", "np_random", ".", "uniform", "(", "low", "=", "-", ".1", ",", "high", "=", ".1", ",", "size", "=", "self", ".", "model", ".", "nv", ")", "\n", ")", "\n", "return", "self", ".", "_get_obs", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco.mujoco_env.MujocoEnv._seed": [[64, 67], ["environments.mujoco.rand_param_envs.gym.utils.seeding.np_random"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.utils.seeding.np_random"], []], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco.mujoco_env.MujocoEnv.reset_model": [[71, 77], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco.mujoco_env.MujocoEnv.viewer_setup": [[78, 85], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco.mujoco_env.MujocoEnv._reset": [[88, 95], ["mjlib.mj_resetData", "mujoco_env.MujocoEnv.reset_model", "mujoco_env.MujocoEnv.viewer.autoscale", "mujoco_env.MujocoEnv.viewer_setup"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.reset_model", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjviewer.MjViewer.autoscale", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.point_robot.PointEnv.viewer_setup"], []], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco.mujoco_env.MujocoEnv.set_state": [[96, 102], ["mujoco_env.MujocoEnv.model._compute_subtree", "mujoco_env.MujocoEnv.model.forward"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjcore.MjModel._compute_subtree", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjcore.MjModel.forward"], []], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco.mujoco_env.MujocoEnv.dt": [[103, 106], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco.mujoco_env.MujocoEnv.do_simulation": [[107, 111], ["range", "mujoco_env.MujocoEnv.model.step"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.step"], []], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco.mujoco_env.MujocoEnv._render": [[112, 125], ["mujoco_env.MujocoEnv._get_viewer().render", "mujoco_env.MujocoEnv._get_viewer().get_image", "mujoco_env.MujocoEnv._get_viewer().finish", "numpy.fromstring().reshape", "mujoco_env.MujocoEnv._get_viewer().loop_once", "mujoco_env.MujocoEnv._get_viewer", "mujoco_env.MujocoEnv._get_viewer", "mujoco_env.MujocoEnv._get_viewer", "numpy.fromstring", "mujoco_env.MujocoEnv._get_viewer"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.render", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjviewer.MjViewer.get_image", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjviewer.MjViewer.finish", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjviewer.MjViewer.loop_once", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco.mujoco_env.MujocoEnv._get_viewer", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco.mujoco_env.MujocoEnv._get_viewer", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco.mujoco_env.MujocoEnv._get_viewer", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco.mujoco_env.MujocoEnv._get_viewer"], []], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco.mujoco_env.MujocoEnv._get_viewer": [[126, 133], ["mujoco_py.MjViewer", "mujoco_env.MujocoEnv.viewer.start", "mujoco_env.MujocoEnv.viewer.set_model", "mujoco_env.MujocoEnv.viewer_setup"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjviewer.MjViewer.start", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjviewer.MjViewer.set_model", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.point_robot.PointEnv.viewer_setup"], []], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco.mujoco_env.MujocoEnv.get_body_com": [[134, 137], ["mujoco_env.MujocoEnv.model.body_names.index", "six.b"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.index"], []], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco.mujoco_env.MujocoEnv.get_body_comvel": [[138, 141], ["mujoco_env.MujocoEnv.model.body_names.index", "six.b"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.index"], []], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco.mujoco_env.MujocoEnv.get_body_xmat": [[142, 145], ["mujoco_env.MujocoEnv.model.body_names.index", "mujoco_env.MujocoEnv.model.data.xmat[].reshape", "six.b"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.index"], []], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco.mujoco_env.MujocoEnv.state_vector": [[146, 150], ["numpy.concatenate"], "methods", ["None"], []], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco.reacher.ReacherEnv.__init__": [[6, 9], ["environments.mujoco.rand_param_envs.gym.utils.EzPickle.__init__", "environments.mujoco.rand_param_envs.gym.envs.mujoco.mujoco_env.MujocoEnv.__init__"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.__init__", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "utils", ".", "EzPickle", ".", "__init__", "(", "self", ")", "\n", "mujoco_env", ".", "MujocoEnv", ".", "__init__", "(", "self", ",", "'reacher.xml'", ",", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco.reacher.ReacherEnv._step": [[10, 19], ["reacher.ReacherEnv.do_simulation", "reacher.ReacherEnv._get_obs", "reacher.ReacherEnv.get_body_com", "reacher.ReacherEnv.get_body_com", "numpy.linalg.norm", "numpy.square().sum", "dict", "numpy.square"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco.mujoco_env.MujocoEnv.do_simulation", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.point_robot.PointEnv._get_obs", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco.mujoco_env.MujocoEnv.get_body_com", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco.mujoco_env.MujocoEnv.get_body_com"], ["", "def", "_step", "(", "self", ",", "a", ")", ":", "\n", "        ", "vec", "=", "self", ".", "get_body_com", "(", "\"fingertip\"", ")", "-", "self", ".", "get_body_com", "(", "\"target\"", ")", "\n", "reward_dist", "=", "-", "np", ".", "linalg", ".", "norm", "(", "vec", ")", "\n", "reward_ctrl", "=", "-", "np", ".", "square", "(", "a", ")", ".", "sum", "(", ")", "\n", "reward", "=", "reward_dist", "+", "reward_ctrl", "\n", "self", ".", "do_simulation", "(", "a", ",", "self", ".", "frame_skip", ")", "\n", "ob", "=", "self", ".", "_get_obs", "(", ")", "\n", "done", "=", "False", "\n", "return", "ob", ",", "reward", ",", "done", ",", "dict", "(", "reward_dist", "=", "reward_dist", ",", "reward_ctrl", "=", "reward_ctrl", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco.reacher.ReacherEnv.viewer_setup": [[20, 22], ["None"], "methods", ["None"], ["", "def", "viewer_setup", "(", "self", ")", ":", "\n", "        ", "self", ".", "viewer", ".", "cam", ".", "trackbodyid", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco.reacher.ReacherEnv.reset_model": [[23, 34], ["reacher.ReacherEnv.set_state", "reacher.ReacherEnv._get_obs", "reacher.ReacherEnv.np_random.uniform", "reacher.ReacherEnv.np_random.uniform", "reacher.ReacherEnv.np_random.uniform", "numpy.linalg.norm"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco.mujoco_env.MujocoEnv.set_state", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.point_robot.PointEnv._get_obs"], ["", "def", "reset_model", "(", "self", ")", ":", "\n", "        ", "qpos", "=", "self", ".", "np_random", ".", "uniform", "(", "low", "=", "-", "0.1", ",", "high", "=", "0.1", ",", "size", "=", "self", ".", "model", ".", "nq", ")", "+", "self", ".", "init_qpos", "\n", "while", "True", ":", "\n", "            ", "self", ".", "goal", "=", "self", ".", "np_random", ".", "uniform", "(", "low", "=", "-", ".2", ",", "high", "=", ".2", ",", "size", "=", "2", ")", "\n", "if", "np", ".", "linalg", ".", "norm", "(", "self", ".", "goal", ")", "<", "2", ":", "\n", "                ", "break", "\n", "", "", "qpos", "[", "-", "2", ":", "]", "=", "self", ".", "goal", "\n", "qvel", "=", "self", ".", "init_qvel", "+", "self", ".", "np_random", ".", "uniform", "(", "low", "=", "-", ".005", ",", "high", "=", ".005", ",", "size", "=", "self", ".", "model", ".", "nv", ")", "\n", "qvel", "[", "-", "2", ":", "]", "=", "0", "\n", "self", ".", "set_state", "(", "qpos", ",", "qvel", ")", "\n", "return", "self", ".", "_get_obs", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco.reacher.ReacherEnv._get_obs": [[35, 43], ["numpy.concatenate", "numpy.cos", "numpy.sin", "reacher.ReacherEnv.get_body_com", "reacher.ReacherEnv.get_body_com"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco.mujoco_env.MujocoEnv.get_body_com", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco.mujoco_env.MujocoEnv.get_body_com"], ["", "def", "_get_obs", "(", "self", ")", ":", "\n", "        ", "theta", "=", "self", ".", "model", ".", "data", ".", "qpos", ".", "flat", "[", ":", "2", "]", "\n", "return", "np", ".", "concatenate", "(", "[", "\n", "np", ".", "cos", "(", "theta", ")", ",", "\n", "np", ".", "sin", "(", "theta", ")", ",", "\n", "self", ".", "model", ".", "data", ".", "qpos", ".", "flat", "[", "2", ":", "]", ",", "\n", "self", ".", "model", ".", "data", ".", "qvel", ".", "flat", "[", ":", "2", "]", ",", "\n", "self", ".", "get_body_com", "(", "\"fingertip\"", ")", "-", "self", ".", "get_body_com", "(", "\"target\"", ")", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco.walker2d.Walker2dEnv.__init__": [[7, 10], ["environments.mujoco.rand_param_envs.gym.envs.mujoco.mujoco_env.MujocoEnv.__init__", "environments.mujoco.rand_param_envs.gym.utils.EzPickle.__init__"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.__init__", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "mujoco_env", ".", "MujocoEnv", ".", "__init__", "(", "self", ",", "\"walker2d.xml\"", ",", "4", ")", "\n", "utils", ".", "EzPickle", ".", "__init__", "(", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco.walker2d.Walker2dEnv._step": [[11, 23], ["walker2d.Walker2dEnv.do_simulation", "walker2d.Walker2dEnv._get_obs", "numpy.square().sum", "numpy.square"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco.mujoco_env.MujocoEnv.do_simulation", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.point_robot.PointEnv._get_obs"], ["", "def", "_step", "(", "self", ",", "a", ")", ":", "\n", "        ", "posbefore", "=", "self", ".", "model", ".", "data", ".", "qpos", "[", "0", ",", "0", "]", "\n", "self", ".", "do_simulation", "(", "a", ",", "self", ".", "frame_skip", ")", "\n", "posafter", ",", "height", ",", "ang", "=", "self", ".", "model", ".", "data", ".", "qpos", "[", "0", ":", "3", ",", "0", "]", "\n", "alive_bonus", "=", "1.0", "\n", "reward", "=", "(", "(", "posafter", "-", "posbefore", ")", "/", "self", ".", "dt", ")", "\n", "reward", "+=", "alive_bonus", "\n", "reward", "-=", "1e-3", "*", "np", ".", "square", "(", "a", ")", ".", "sum", "(", ")", "\n", "done", "=", "not", "(", "height", ">", "0.8", "and", "height", "<", "2.0", "and", "\n", "ang", ">", "-", "1.0", "and", "ang", "<", "1.0", ")", "\n", "ob", "=", "self", ".", "_get_obs", "(", ")", "\n", "return", "ob", ",", "reward", ",", "done", ",", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco.walker2d.Walker2dEnv._get_obs": [[24, 28], ["numpy.concatenate().ravel", "numpy.concatenate", "numpy.clip"], "methods", ["None"], ["", "def", "_get_obs", "(", "self", ")", ":", "\n", "        ", "qpos", "=", "self", ".", "model", ".", "data", ".", "qpos", "\n", "qvel", "=", "self", ".", "model", ".", "data", ".", "qvel", "\n", "return", "np", ".", "concatenate", "(", "[", "qpos", "[", "1", ":", "]", ",", "np", ".", "clip", "(", "qvel", ",", "-", "10", ",", "10", ")", "]", ")", ".", "ravel", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco.walker2d.Walker2dEnv.reset_model": [[29, 35], ["walker2d.Walker2dEnv.set_state", "walker2d.Walker2dEnv._get_obs", "walker2d.Walker2dEnv.np_random.uniform", "walker2d.Walker2dEnv.np_random.uniform"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco.mujoco_env.MujocoEnv.set_state", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.point_robot.PointEnv._get_obs"], ["", "def", "reset_model", "(", "self", ")", ":", "\n", "        ", "self", ".", "set_state", "(", "\n", "self", ".", "init_qpos", "+", "self", ".", "np_random", ".", "uniform", "(", "low", "=", "-", ".005", ",", "high", "=", ".005", ",", "size", "=", "self", ".", "model", ".", "nq", ")", ",", "\n", "self", ".", "init_qvel", "+", "self", ".", "np_random", ".", "uniform", "(", "low", "=", "-", ".005", ",", "high", "=", ".005", ",", "size", "=", "self", ".", "model", ".", "nv", ")", "\n", ")", "\n", "return", "self", ".", "_get_obs", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco.walker2d.Walker2dEnv.viewer_setup": [[36, 41], ["None"], "methods", ["None"], ["", "def", "viewer_setup", "(", "self", ")", ":", "\n", "        ", "self", ".", "viewer", ".", "cam", ".", "trackbodyid", "=", "2", "\n", "self", ".", "viewer", ".", "cam", ".", "distance", "=", "self", ".", "model", ".", "stat", ".", "extent", "*", "0.5", "\n", "self", ".", "viewer", ".", "cam", ".", "lookat", "[", "2", "]", "+=", ".8", "\n", "self", ".", "viewer", ".", "cam", ".", "elevation", "=", "-", "20", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Rondorf_BOReL.rand_param_envs.base.MetaEnv.step": [[8, 10], ["base.MetaEnv._step"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.wrappers.monitoring.Monitor._step"], ["    ", "def", "step", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "self", ".", "_step", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.rand_param_envs.base.MetaEnv.sample_tasks": [[11, 22], ["None"], "methods", ["None"], ["", "def", "sample_tasks", "(", "self", ",", "n_tasks", ")", ":", "\n", "        ", "\"\"\"\n        Samples task of the meta-environment\n\n        Args:\n            n_tasks (int) : number of different meta-tasks needed\n\n        Returns:\n            tasks (list) : an (n_tasks) length list of tasks\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.rand_param_envs.base.MetaEnv.set_task": [[23, 31], ["None"], "methods", ["None"], ["", "def", "set_task", "(", "self", ",", "task", ")", ":", "\n", "        ", "\"\"\"\n        Sets the specified task to the current environment\n\n        Args:\n            task: task of the meta-learning environment\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.rand_param_envs.base.MetaEnv.get_task": [[32, 40], ["None"], "methods", ["None"], ["", "def", "get_task", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Gets the task that the agent is performing in the current environment\n\n        Returns:\n            task: task of the meta-learning environment\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.rand_param_envs.base.MetaEnv.reset_task": [[41, 46], ["base.MetaEnv.set_task", "base.MetaEnv.reset", "base.MetaEnv.sample_tasks"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.rand_param_envs.base.RandomEnv.set_task", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.reset", "home.repos.pwc.inspect_result.Rondorf_BOReL.rand_param_envs.base.RandomEnv.sample_tasks"], ["", "def", "reset_task", "(", "self", ",", "task", ")", ":", "\n", "        ", "if", "task", "is", "None", ":", "\n", "            ", "task", "=", "self", ".", "sample_tasks", "(", "1", ")", "[", "0", "]", "\n", "", "self", ".", "set_task", "(", "task", ")", "\n", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.rand_param_envs.base.MetaEnv.log_diagnostics": [[47, 56], ["None"], "methods", ["None"], ["", "def", "log_diagnostics", "(", "self", ",", "paths", ",", "prefix", ")", ":", "\n", "        ", "\"\"\"\n        Logs env-specific diagnostic information\n\n        Args:\n            paths (list) : list of all paths collected with this env during this iteration\n            prefix (str) : prefix for logger\n        \"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.rand_param_envs.base.RandomEnv.__init__": [[69, 76], ["environments.mujoco.rand_param_envs.gym.envs.mujoco.MujocoEnv.__init__", "base.RandomEnv.save_parameters", "set", "set", "str"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.__init__", "home.repos.pwc.inspect_result.Rondorf_BOReL.rand_param_envs.base.RandomEnv.save_parameters"], ["def", "__init__", "(", "self", ",", "log_scale_limit", ",", "file_name", ",", "*", "args", ",", "rand_params", "=", "RAND_PARAMS", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "log_scale_limit", "=", "log_scale_limit", "\n", "self", ".", "rand_params", "=", "rand_params", "\n", "MujocoEnv", ".", "__init__", "(", "self", ",", "file_name", ",", "4", ")", "\n", "assert", "set", "(", "rand_params", ")", "<=", "set", "(", "self", ".", "RAND_PARAMS_EXTENDED", ")", ",", "\"rand_params must be a subset of \"", "+", "str", "(", "self", ".", "RAND_PARAMS_EXTENDED", ")", "\n", "self", ".", "save_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.rand_param_envs.base.RandomEnv.sample_tasks": [[77, 120], ["range", "param_sets.append", "numpy.multiply", "numpy.multiply", "random.uniform", "numpy.array", "numpy.array().reshape", "random.uniform", "numpy.array", "numpy.array().reshape", "random.uniform", "numpy.array", "numpy.array().reshape", "random.uniform", "numpy.array", "numpy.array().reshape", "range", "range", "range", "range", "numpy.prod", "numpy.array", "numpy.prod", "numpy.array", "numpy.prod", "numpy.array", "numpy.prod", "numpy.array"], "methods", ["None"], ["", "def", "sample_tasks", "(", "self", ",", "n_tasks", ")", ":", "\n", "        ", "\"\"\"\n        Generates randomized parameter sets for the mujoco env\n\n        Args:\n            n_tasks (int) : number of different meta-tasks needed\n\n        Returns:\n            tasks (list) : an (n_tasks) length list of tasks\n        \"\"\"", "\n", "param_sets", "=", "[", "]", "\n", "\n", "for", "_", "in", "range", "(", "n_tasks", ")", ":", "\n", "# body mass -> one multiplier for all body parts", "\n", "\n", "            ", "new_params", "=", "{", "}", "\n", "\n", "if", "'body_mass'", "in", "self", ".", "rand_params", ":", "\n", "                ", "rand_params", "=", "[", "random", ".", "uniform", "(", "-", "self", ".", "log_scale_limit", ",", "self", ".", "log_scale_limit", ")", "for", "_", "in", "range", "(", "np", ".", "prod", "(", "self", ".", "model", ".", "body_mass", ".", "shape", ")", ")", "]", "\n", "body_mass_multiplyers", "=", "np", ".", "array", "(", "1.5", ")", "**", "np", ".", "array", "(", "rand_params", ")", ".", "reshape", "(", "self", ".", "model", ".", "body_mass", ".", "shape", ")", "\n", "new_params", "[", "'body_mass'", "]", "=", "self", ".", "init_params", "[", "'body_mass'", "]", "*", "body_mass_multiplyers", "\n", "\n", "# body_inertia", "\n", "", "if", "'body_inertia'", "in", "self", ".", "rand_params", ":", "\n", "                ", "rand_params", "=", "[", "random", ".", "uniform", "(", "-", "self", ".", "log_scale_limit", ",", "self", ".", "log_scale_limit", ")", "for", "_", "in", "range", "(", "np", ".", "prod", "(", "self", ".", "model", ".", "body_inertia", ".", "shape", ")", ")", "]", "\n", "body_inertia_multiplyers", "=", "np", ".", "array", "(", "1.5", ")", "**", "np", ".", "array", "(", "rand_params", ")", ".", "reshape", "(", "self", ".", "model", ".", "body_inertia", ".", "shape", ")", "\n", "new_params", "[", "'body_inertia'", "]", "=", "body_inertia_multiplyers", "*", "self", ".", "init_params", "[", "'body_inertia'", "]", "\n", "\n", "# damping -> different multiplier for different dofs/joints", "\n", "", "if", "'dof_damping'", "in", "self", ".", "rand_params", ":", "\n", "                ", "rand_params", "=", "[", "random", ".", "uniform", "(", "-", "self", ".", "log_scale_limit", ",", "self", ".", "log_scale_limit", ")", "for", "_", "in", "range", "(", "np", ".", "prod", "(", "self", ".", "model", ".", "dof_damping", ".", "shape", ")", ")", "]", "\n", "dof_damping_multipliers", "=", "np", ".", "array", "(", "1.3", ")", "**", "np", ".", "array", "(", "rand_params", ")", ".", "reshape", "(", "self", ".", "model", ".", "dof_damping", ".", "shape", ")", "\n", "new_params", "[", "'dof_damping'", "]", "=", "np", ".", "multiply", "(", "self", ".", "init_params", "[", "'dof_damping'", "]", ",", "dof_damping_multipliers", ")", "\n", "\n", "# friction at the body components", "\n", "", "if", "'geom_friction'", "in", "self", ".", "rand_params", ":", "\n", "                ", "rand_params", "=", "[", "random", ".", "uniform", "(", "-", "self", ".", "log_scale_limit", ",", "self", ".", "log_scale_limit", ")", "for", "_", "in", "range", "(", "np", ".", "prod", "(", "self", ".", "model", ".", "geom_friction", ".", "shape", ")", ")", "]", "\n", "dof_damping_multipliers", "=", "np", ".", "array", "(", "1.5", ")", "**", "np", ".", "array", "(", "rand_params", ")", ".", "reshape", "(", "self", ".", "model", ".", "geom_friction", ".", "shape", ")", "\n", "new_params", "[", "'geom_friction'", "]", "=", "np", ".", "multiply", "(", "self", ".", "init_params", "[", "'geom_friction'", "]", ",", "dof_damping_multipliers", ")", "\n", "\n", "", "param_sets", ".", "append", "(", "new_params", ")", "\n", "\n", "", "return", "param_sets", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.rand_param_envs.base.RandomEnv.set_task": [[121, 127], ["task.items", "getattr", "setattr"], "methods", ["None"], ["", "def", "set_task", "(", "self", ",", "task", ")", ":", "\n", "        ", "for", "param", ",", "param_val", "in", "task", ".", "items", "(", ")", ":", "\n", "            ", "param_variable", "=", "getattr", "(", "self", ".", "model", ",", "param", ")", "\n", "assert", "param_variable", ".", "shape", "==", "param_val", ".", "shape", ",", "'shapes of new parameter value and old one must match'", "\n", "setattr", "(", "self", ".", "model", ",", "param", ",", "param_val", ")", "\n", "", "self", ".", "curr_params", "=", "task", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.rand_param_envs.base.RandomEnv.get_task": [[128, 135], ["numpy.concatenate", "task[].reshape", "task.keys"], "methods", ["None"], ["", "def", "get_task", "(", "self", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "task", "=", "self", ".", "curr_params", "\n", "task", "=", "np", ".", "concatenate", "(", "[", "task", "[", "k", "]", ".", "reshape", "(", "-", "1", ")", "for", "k", "in", "task", ".", "keys", "(", ")", "]", ")", "[", ":", ",", "np", ".", "newaxis", "]", "\n", "return", "task", "\n", "", "except", "AttributeError", ":", "\n", "            ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.rand_param_envs.base.RandomEnv.save_parameters": [[136, 153], ["None"], "methods", ["None"], ["", "", "def", "save_parameters", "(", "self", ")", ":", "\n", "        ", "self", ".", "init_params", "=", "{", "}", "\n", "if", "'body_mass'", "in", "self", ".", "rand_params", ":", "\n", "            ", "self", ".", "init_params", "[", "'body_mass'", "]", "=", "self", ".", "model", ".", "body_mass", "\n", "\n", "# body_inertia", "\n", "", "if", "'body_inertia'", "in", "self", ".", "rand_params", ":", "\n", "            ", "self", ".", "init_params", "[", "'body_inertia'", "]", "=", "self", ".", "model", ".", "body_inertia", "\n", "\n", "# damping -> different multiplier for different dofs/joints", "\n", "", "if", "'dof_damping'", "in", "self", ".", "rand_params", ":", "\n", "            ", "self", ".", "init_params", "[", "'dof_damping'", "]", "=", "self", ".", "model", ".", "dof_damping", "\n", "\n", "# friction at the body components", "\n", "", "if", "'geom_friction'", "in", "self", ".", "rand_params", ":", "\n", "            ", "self", ".", "init_params", "[", "'geom_friction'", "]", "=", "self", ".", "model", ".", "geom_friction", "\n", "", "self", ".", "curr_params", "=", "self", ".", "init_params", "", "", "", ""]], "home.repos.pwc.inspect_result.Rondorf_BOReL.rand_param_envs.walker2d_rand_params.Walker2DRandParamsEnv.__init__": [[7, 12], ["environments.mujoco.rand_param_envs.base.RandomEnv.__init__", "environments.mujoco.rand_param_envs.gym.utils.EzPickle.__init__"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.__init__", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.__init__"], ["    ", "def", "__init__", "(", "self", ",", "log_scale_limit", "=", "3.0", ")", ":", "\n", "        ", "self", ".", "_max_episode_steps", "=", "200", "\n", "self", ".", "_elapsed_steps", "=", "-", "1", "# the thing below takes one step", "\n", "RandomEnv", ".", "__init__", "(", "self", ",", "log_scale_limit", ",", "'walker2d.xml'", ",", "5", ")", "\n", "utils", ".", "EzPickle", ".", "__init__", "(", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.rand_param_envs.walker2d_rand_params.Walker2DRandParamsEnv._step": [[13, 29], ["walker2d_rand_params.Walker2DRandParamsEnv.do_simulation", "walker2d_rand_params.Walker2DRandParamsEnv._get_obs", "numpy.square().sum", "walker2d_rand_params.Walker2DRandParamsEnv.get_task", "numpy.square"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco.mujoco_env.MujocoEnv.do_simulation", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.point_robot.PointEnv._get_obs", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.get_task"], ["", "def", "_step", "(", "self", ",", "a", ")", ":", "\n", "        ", "posbefore", "=", "self", ".", "model", ".", "data", ".", "qpos", "[", "0", ",", "0", "]", "\n", "self", ".", "do_simulation", "(", "a", ",", "self", ".", "frame_skip", ")", "\n", "posafter", ",", "height", ",", "ang", "=", "self", ".", "model", ".", "data", ".", "qpos", "[", "0", ":", "3", ",", "0", "]", "\n", "alive_bonus", "=", "1.0", "\n", "reward", "=", "(", "(", "posafter", "-", "posbefore", ")", "/", "self", ".", "dt", ")", "\n", "reward", "+=", "alive_bonus", "\n", "reward", "-=", "1e-3", "*", "np", ".", "square", "(", "a", ")", ".", "sum", "(", ")", "\n", "done", "=", "not", "(", "height", ">", "0.8", "and", "height", "<", "2.0", "and", "ang", ">", "-", "1.0", "and", "ang", "<", "1.0", ")", "\n", "ob", "=", "self", ".", "_get_obs", "(", ")", "\n", "self", ".", "_elapsed_steps", "+=", "1", "\n", "info", "=", "{", "'task'", ":", "self", ".", "get_task", "(", ")", "}", "\n", "if", "self", ".", "_elapsed_steps", "==", "self", ".", "_max_episode_steps", ":", "\n", "            ", "done", "=", "True", "\n", "info", "[", "'bad_transition'", "]", "=", "True", "\n", "", "return", "ob", ",", "reward", ",", "done", ",", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.rand_param_envs.walker2d_rand_params.Walker2DRandParamsEnv._get_obs": [[30, 34], ["numpy.concatenate().ravel", "numpy.concatenate", "numpy.clip"], "methods", ["None"], ["", "def", "_get_obs", "(", "self", ")", ":", "\n", "        ", "qpos", "=", "self", ".", "model", ".", "data", ".", "qpos", "\n", "qvel", "=", "self", ".", "model", ".", "data", ".", "qvel", "\n", "return", "np", ".", "concatenate", "(", "[", "qpos", "[", "1", ":", "]", ",", "np", ".", "clip", "(", "qvel", ",", "-", "10", ",", "10", ")", "]", ")", ".", "ravel", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.rand_param_envs.walker2d_rand_params.Walker2DRandParamsEnv.reset_model": [[35, 41], ["walker2d_rand_params.Walker2DRandParamsEnv.set_state", "walker2d_rand_params.Walker2DRandParamsEnv._get_obs", "walker2d_rand_params.Walker2DRandParamsEnv.np_random.uniform", "walker2d_rand_params.Walker2DRandParamsEnv.np_random.uniform"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco.mujoco_env.MujocoEnv.set_state", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.point_robot.PointEnv._get_obs"], ["", "def", "reset_model", "(", "self", ")", ":", "\n", "        ", "self", ".", "set_state", "(", "\n", "self", ".", "init_qpos", "+", "self", ".", "np_random", ".", "uniform", "(", "low", "=", "-", ".005", ",", "high", "=", ".005", ",", "size", "=", "self", ".", "model", ".", "nq", ")", ",", "\n", "self", ".", "init_qvel", "+", "self", ".", "np_random", ".", "uniform", "(", "low", "=", "-", ".005", ",", "high", "=", ".005", ",", "size", "=", "self", ".", "model", ".", "nv", ")", "\n", ")", "\n", "return", "self", ".", "_get_obs", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.rand_param_envs.walker2d_rand_params.Walker2DRandParamsEnv._reset": [[42, 46], ["super()._reset"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.wrappers.monitoring.Monitor._reset"], ["", "def", "_reset", "(", "self", ")", ":", "\n", "        ", "ob", "=", "super", "(", ")", ".", "_reset", "(", ")", "\n", "self", ".", "_elapsed_steps", "=", "0", "\n", "return", "ob", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.rand_param_envs.walker2d_rand_params.Walker2DRandParamsEnv.viewer_setup": [[47, 52], ["None"], "methods", ["None"], ["", "def", "viewer_setup", "(", "self", ")", ":", "\n", "        ", "self", ".", "viewer", ".", "cam", ".", "trackbodyid", "=", "2", "\n", "self", ".", "viewer", ".", "cam", ".", "distance", "=", "self", ".", "model", ".", "stat", ".", "extent", "*", "0.5", "\n", "self", ".", "viewer", ".", "cam", ".", "lookat", "[", "2", "]", "+=", ".8", "\n", "self", ".", "viewer", ".", "cam", ".", "elevation", "=", "-", "20", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.rand_param_envs.walker2d_rand_params.Walker2DRandParamsOracleEnv._get_obs": [[55, 66], ["hasattr", "numpy.concatenate().ravel", "walker2d_rand_params.Walker2DRandParamsOracleEnv.get_task", "numpy.zeros", "numpy.concatenate", "numpy.concatenate", "task[].reshape", "numpy.clip", "numpy.zeros.keys"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.get_task", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.zeros"], ["    ", "def", "_get_obs", "(", "self", ")", ":", "\n", "        ", "if", "hasattr", "(", "self", ",", "'cur_params'", ")", ":", "\n", "            ", "task", "=", "self", ".", "get_task", "(", ")", "\n", "task", "=", "np", ".", "concatenate", "(", "[", "task", "[", "k", "]", ".", "reshape", "(", "-", "1", ")", "for", "k", "in", "task", ".", "keys", "(", ")", "]", ")", "[", ":", ",", "np", ".", "newaxis", "]", "\n", "", "else", ":", "\n", "            ", "task", "=", "np", ".", "zeros", "(", "(", "self", ".", "rand_param_dim", ",", "1", ")", ")", "\n", "", "qpos", "=", "self", ".", "model", ".", "data", ".", "qpos", "\n", "qvel", "=", "self", ".", "model", ".", "data", ".", "qvel", "\n", "return", "np", ".", "concatenate", "(", "[", "qpos", "[", "1", ":", "]", ",", "\n", "np", ".", "clip", "(", "qvel", ",", "-", "10", ",", "10", ")", ",", "\n", "task", "\n", "]", ")", ".", "ravel", "(", ")", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.rand_param_envs.hopper_rand_params.HopperRandParamsEnv.__init__": [[7, 12], ["environments.mujoco.rand_param_envs.base.RandomEnv.__init__", "environments.mujoco.rand_param_envs.gym.utils.EzPickle.__init__"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.__init__", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.__init__"], ["    ", "def", "__init__", "(", "self", ",", "log_scale_limit", "=", "3.0", ")", ":", "\n", "        ", "self", ".", "_max_episode_steps", "=", "200", "\n", "self", ".", "_elapsed_steps", "=", "-", "1", "# the thing below takes one step", "\n", "RandomEnv", ".", "__init__", "(", "self", ",", "log_scale_limit", ",", "'hopper.xml'", ",", "4", ")", "\n", "utils", ".", "EzPickle", ".", "__init__", "(", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.rand_param_envs.hopper_rand_params.HopperRandParamsEnv._step": [[13, 31], ["hopper_rand_params.HopperRandParamsEnv.do_simulation", "hopper_rand_params.HopperRandParamsEnv.state_vector", "hopper_rand_params.HopperRandParamsEnv._get_obs", "numpy.square().sum", "hopper_rand_params.HopperRandParamsEnv.get_task", "numpy.isfinite().all", "numpy.square", "abs", "numpy.isfinite", "numpy.abs"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco.mujoco_env.MujocoEnv.do_simulation", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco.mujoco_env.MujocoEnv.state_vector", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.point_robot.PointEnv._get_obs", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.get_task", "home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.ListableAPIResource.all"], ["", "def", "_step", "(", "self", ",", "a", ")", ":", "\n", "        ", "posbefore", "=", "self", ".", "model", ".", "data", ".", "qpos", "[", "0", ",", "0", "]", "\n", "self", ".", "do_simulation", "(", "a", ",", "self", ".", "frame_skip", ")", "\n", "posafter", ",", "height", ",", "ang", "=", "self", ".", "model", ".", "data", ".", "qpos", "[", "0", ":", "3", ",", "0", "]", "\n", "alive_bonus", "=", "1.0", "\n", "reward", "=", "(", "posafter", "-", "posbefore", ")", "/", "self", ".", "dt", "\n", "reward", "+=", "alive_bonus", "\n", "reward", "-=", "1e-3", "*", "np", ".", "square", "(", "a", ")", ".", "sum", "(", ")", "\n", "s", "=", "self", ".", "state_vector", "(", ")", "\n", "done", "=", "not", "(", "np", ".", "isfinite", "(", "s", ")", ".", "all", "(", ")", "and", "(", "np", ".", "abs", "(", "s", "[", "2", ":", "]", ")", "<", "100", ")", ".", "all", "(", ")", "and", "\n", "(", "height", ">", ".7", ")", "and", "(", "abs", "(", "ang", ")", "<", ".2", ")", ")", "\n", "ob", "=", "self", ".", "_get_obs", "(", ")", "\n", "self", ".", "_elapsed_steps", "+=", "1", "\n", "info", "=", "{", "'task'", ":", "self", ".", "get_task", "(", ")", "}", "\n", "if", "self", ".", "_elapsed_steps", "==", "self", ".", "_max_episode_steps", ":", "\n", "            ", "done", "=", "True", "\n", "info", "[", "'bad_transition'", "]", "=", "True", "\n", "", "return", "ob", ",", "reward", ",", "done", ",", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.rand_param_envs.hopper_rand_params.HopperRandParamsEnv._get_obs": [[32, 36], ["numpy.concatenate", "numpy.clip"], "methods", ["None"], ["", "def", "_get_obs", "(", "self", ")", ":", "\n", "        ", "return", "np", ".", "concatenate", "(", "[", "\n", "self", ".", "model", ".", "data", ".", "qpos", ".", "flat", "[", "1", ":", "]", ",", "\n", "np", ".", "clip", "(", "self", ".", "model", ".", "data", ".", "qvel", ".", "flat", ",", "-", "10", ",", "10", ")", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.rand_param_envs.hopper_rand_params.HopperRandParamsEnv.reset_model": [[38, 43], ["hopper_rand_params.HopperRandParamsEnv.set_state", "hopper_rand_params.HopperRandParamsEnv._get_obs", "hopper_rand_params.HopperRandParamsEnv.np_random.uniform", "hopper_rand_params.HopperRandParamsEnv.np_random.uniform"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco.mujoco_env.MujocoEnv.set_state", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.point_robot.PointEnv._get_obs"], ["", "def", "reset_model", "(", "self", ")", ":", "\n", "        ", "qpos", "=", "self", ".", "init_qpos", "+", "self", ".", "np_random", ".", "uniform", "(", "low", "=", "-", ".005", ",", "high", "=", ".005", ",", "size", "=", "self", ".", "model", ".", "nq", ")", "\n", "qvel", "=", "self", ".", "init_qvel", "+", "self", ".", "np_random", ".", "uniform", "(", "low", "=", "-", ".005", ",", "high", "=", ".005", ",", "size", "=", "self", ".", "model", ".", "nv", ")", "\n", "self", ".", "set_state", "(", "qpos", ",", "qvel", ")", "\n", "return", "self", ".", "_get_obs", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.rand_param_envs.hopper_rand_params.HopperRandParamsEnv.viewer_setup": [[44, 49], ["None"], "methods", ["None"], ["", "def", "viewer_setup", "(", "self", ")", ":", "\n", "        ", "self", ".", "viewer", ".", "cam", ".", "trackbodyid", "=", "2", "\n", "self", ".", "viewer", ".", "cam", ".", "distance", "=", "self", ".", "model", ".", "stat", ".", "extent", "*", "0.75", "\n", "self", ".", "viewer", ".", "cam", ".", "lookat", "[", "2", "]", "+=", ".8", "\n", "self", ".", "viewer", ".", "cam", ".", "elevation", "=", "-", "20", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.rand_param_envs.hopper_rand_params.HopperRandParamsEnv._reset": [[50, 54], ["super()._reset"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.wrappers.monitoring.Monitor._reset"], ["", "def", "_reset", "(", "self", ")", ":", "\n", "        ", "ob", "=", "super", "(", ")", ".", "_reset", "(", ")", "\n", "self", ".", "_elapsed_steps", "=", "0", "\n", "return", "ob", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.rand_param_envs.hopper_rand_params.HopperRandParamsOracleEnv._get_obs": [[57, 67], ["hasattr", "numpy.concatenate", "hopper_rand_params.HopperRandParamsOracleEnv.get_task", "numpy.zeros", "numpy.concatenate", "numpy.clip", "task[].reshape", "numpy.zeros.keys"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.get_task", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.zeros"], ["    ", "def", "_get_obs", "(", "self", ")", ":", "\n", "        ", "if", "hasattr", "(", "self", ",", "'cur_params'", ")", ":", "\n", "            ", "task", "=", "self", ".", "get_task", "(", ")", "\n", "task", "=", "np", ".", "concatenate", "(", "[", "task", "[", "k", "]", ".", "reshape", "(", "-", "1", ")", "for", "k", "in", "task", ".", "keys", "(", ")", "]", ")", "[", ":", ",", "np", ".", "newaxis", "]", "\n", "", "else", ":", "\n", "            ", "task", "=", "np", ".", "zeros", "(", "(", "self", ".", "rand_param_dim", ",", "1", ")", ")", "\n", "", "return", "np", ".", "concatenate", "(", "[", "\n", "self", ".", "model", ".", "data", ".", "qpos", ".", "flat", "[", "1", ":", "]", ",", "\n", "np", ".", "clip", "(", "self", ".", "model", ".", "data", ".", "qvel", ".", "flat", ",", "-", "10", ",", "10", ")", ",", "\n", "task", ".", "flat", ",", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.gym.core.Env.__new__": [[50, 62], ["object.__new__", "env_closer.register"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.gym.core.Env.__new__", "home.repos.pwc.inspect_result.Rondorf_BOReL.envs.registration.register"], ["\n", "Serializable", ".", "quick_init", "(", "self", ",", "locals", ")", "\n", "\n", "", "def", "__getstate__", "(", "self", ")", ":", "\n", "        ", "d", "=", "Serializable", ".", "__getstate__", "(", "self", ")", "\n", "d", "[", "\"params\"", "]", "=", "self", ".", "get_param_values", "(", ")", "\n", "return", "d", "\n", "\n", "", "def", "__setstate__", "(", "self", ",", "d", ")", ":", "\n", "        ", "Serializable", ".", "__setstate__", "(", "self", ",", "d", ")", "\n", "self", ".", "set_param_values", "(", "d", "[", "\"params\"", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.gym.core.Env._close": [[68, 70], ["None"], "methods", ["None"], ["\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.gym.core.Env._configure": [[71, 73], ["None"], "methods", ["None"], ["for", "param", "in", "self", ".", "parameters", "(", ")", ":", "\n", "            ", "if", "len", "(", "param", ".", "size", "(", ")", ")", ">", "1", ":", "\n", "                ", "yield", "param", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.gym.core.Env._step": [[79, 80], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.Rondorf_BOReL.gym.core.Env._reset": [[80, 81], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.Rondorf_BOReL.gym.core.Env._render": [[81, 85], ["None"], "methods", ["None"], ["\n", "torch_args", "=", "tuple", "(", "torch_ify", "(", "x", ")", "for", "x", "in", "args", ")", "\n", "torch_kwargs", "=", "{", "k", ":", "torch_ify", "(", "v", ")", "for", "k", ",", "v", "in", "kwargs", ".", "items", "(", ")", "}", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.gym.core.Env._seed": [[85, 86], ["None"], "methods", ["None"], ["torch_kwargs", "=", "{", "k", ":", "torch_ify", "(", "v", ")", "for", "k", ",", "v", "in", "kwargs", ".", "items", "(", ")", "}", "\n", "outputs", "=", "self", ".", "__call__", "(", "*", "torch_args", ",", "**", "torch_kwargs", ")", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.gym.core.Env.monitor": [[90, 93], ["environments.mujoco.rand_param_envs.gym.error.Error"], "methods", ["None"], ["            ", "return", "np_ify", "(", "outputs", ")", "\n", "\n", "\n", "", "", "", "def", "torch_ify", "(", "np_array_or_other", ")", ":", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.gym.core.Env.step": [[94, 112], ["core.Env._step"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.wrappers.monitoring.Monitor._step"], ["    ", "if", "isinstance", "(", "np_array_or_other", ",", "np", ".", "ndarray", ")", ":", "\n", "        ", "return", "ptu", ".", "from_numpy", "(", "np_array_or_other", ")", "\n", "", "else", ":", "\n", "        ", "return", "np_array_or_other", "\n", "\n", "\n", "", "", "def", "np_ify", "(", "tensor_or_other", ")", ":", "\n", "    ", "if", "isinstance", "(", "tensor_or_other", ",", "Variable", ")", ":", "\n", "        ", "return", "ptu", ".", "get_numpy", "(", "tensor_or_other", ")", "\n", "", "else", ":", "\n", "        ", "return", "tensor_or_other", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Rondorf_BOReL.gym.core.Env.reset": [[113, 125], ["core.Env._reset", "core.Env.metadata.get", "logger.warning", "core.Env.configure"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.wrappers.monitoring.Monitor._reset", "home.repos.pwc.inspect_result.Rondorf_BOReL.gym.core.Env.configure"], []], "home.repos.pwc.inspect_result.Rondorf_BOReL.gym.core.Env.render": [[126, 175], ["core.Env.metadata.get", "core.Env._render", "core.Env._render", "len", "environments.mujoco.rand_param_envs.gym.error.UnsupportedMode", "environments.mujoco.rand_param_envs.gym.error.UnsupportedMode"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.algorithmic.algorithmic_env.AlgorithmicEnv._render", "home.repos.pwc.inspect_result.Rondorf_BOReL.algorithmic.algorithmic_env.AlgorithmicEnv._render"], []], "home.repos.pwc.inspect_result.Rondorf_BOReL.gym.core.Env.close": [[176, 195], ["core.Env._close", "env_closer.unregister", "core.Env.render", "hasattr"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.wrappers.monitoring.Monitor._close", "home.repos.pwc.inspect_result.Rondorf_BOReL.utils.closer.Closer.unregister", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.render"], []], "home.repos.pwc.inspect_result.Rondorf_BOReL.gym.core.Env.seed": [[196, 212], ["core.Env._seed"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.algorithmic.algorithmic_env.AlgorithmicEnv._seed"], []], "home.repos.pwc.inspect_result.Rondorf_BOReL.gym.core.Env.configure": [[213, 233], ["core.Env._configure", "environments.mujoco.rand_param_envs.gym.utils.reraise"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.safety.predict_obs_cartpole.PredictObsCartpoleEnv._configure", "home.repos.pwc.inspect_result.Rondorf_BOReL.utils.reraise.reraise"], []], "home.repos.pwc.inspect_result.Rondorf_BOReL.gym.core.Env.unwrapped": [[234, 250], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.Rondorf_BOReL.gym.core.Env.__del__": [[251, 253], ["core.Env.close"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.close"], []], "home.repos.pwc.inspect_result.Rondorf_BOReL.gym.core.Env.__str__": [[254, 256], ["type"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjvGeomWrapper.type"], []], "home.repos.pwc.inspect_result.Rondorf_BOReL.gym.core.Space.sample": [[265, 270], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.Rondorf_BOReL.gym.core.Space.contains": [[271, 277], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.Rondorf_BOReL.gym.core.Space.to_jsonable": [[278, 282], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.Rondorf_BOReL.gym.core.Space.from_jsonable": [[283, 287], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.Rondorf_BOReL.gym.core.Wrapper.__init__": [[298, 314], ["core.Wrapper.env.metadata.copy", "core.Wrapper.metadata.update", "core.Wrapper._update_wrapper_stack", "logger.warning"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.core.PyTorchModule.copy", "home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.GymObject.update", "home.repos.pwc.inspect_result.Rondorf_BOReL.gym.core.Wrapper._update_wrapper_stack"], []], "home.repos.pwc.inspect_result.Rondorf_BOReL.gym.core.Wrapper._update_wrapper_stack": [[315, 322], ["getattr", "core.Wrapper._check_for_duplicate_wrappers", "core.Wrapper._wrapper_stack.append"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.gym.core.Wrapper._check_for_duplicate_wrappers"], []], "home.repos.pwc.inspect_result.Rondorf_BOReL.gym.core.Wrapper._check_for_duplicate_wrappers": [[323, 327], ["core.Wrapper.class_name", "environments.mujoco.rand_param_envs.gym.error.DoubleWrapperError", "wrapper.class_name", "core.Wrapper.class_name"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.BenchmarkRun.class_name", "home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.BenchmarkRun.class_name", "home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.BenchmarkRun.class_name"], []], "home.repos.pwc.inspect_result.Rondorf_BOReL.gym.core.Wrapper.class_name": [[328, 331], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.Rondorf_BOReL.gym.core.Wrapper._step": [[332, 334], ["core.Wrapper.env.step"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.step"], []], "home.repos.pwc.inspect_result.Rondorf_BOReL.gym.core.Wrapper._reset": [[335, 337], ["core.Wrapper.env.reset"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.reset"], []], "home.repos.pwc.inspect_result.Rondorf_BOReL.gym.core.Wrapper._render": [[338, 342], ["core.Wrapper.env.render"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.render"], []], "home.repos.pwc.inspect_result.Rondorf_BOReL.gym.core.Wrapper._close": [[343, 347], ["core.Wrapper.env.close"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.close"], []], "home.repos.pwc.inspect_result.Rondorf_BOReL.gym.core.Wrapper._configure": [[348, 350], ["core.Wrapper.env.configure"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.gym.core.Env.configure"], []], "home.repos.pwc.inspect_result.Rondorf_BOReL.gym.core.Wrapper._seed": [[351, 353], ["core.Wrapper.env.seed"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.seed"], []], "home.repos.pwc.inspect_result.Rondorf_BOReL.gym.core.Wrapper.__str__": [[354, 356], ["type"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjvGeomWrapper.type"], []], "home.repos.pwc.inspect_result.Rondorf_BOReL.gym.core.Wrapper.__repr__": [[357, 359], ["str"], "methods", ["None"], []], "home.repos.pwc.inspect_result.Rondorf_BOReL.gym.core.Wrapper.spec": [[366, 372], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.Rondorf_BOReL.gym.core.ObservationWrapper._reset": [[374, 377], ["core.ObservationWrapper.env.reset", "core.ObservationWrapper._observation"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.reset", "home.repos.pwc.inspect_result.Rondorf_BOReL.gym.core.ObservationWrapper._observation"], []], "home.repos.pwc.inspect_result.Rondorf_BOReL.gym.core.ObservationWrapper._step": [[378, 381], ["core.ObservationWrapper.env.step", "core.ObservationWrapper.observation"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.step", "home.repos.pwc.inspect_result.Rondorf_BOReL.gym.core.ObservationWrapper.observation"], []], "home.repos.pwc.inspect_result.Rondorf_BOReL.gym.core.ObservationWrapper.observation": [[382, 384], ["core.ObservationWrapper._observation"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.gym.core.ObservationWrapper._observation"], []], "home.repos.pwc.inspect_result.Rondorf_BOReL.gym.core.ObservationWrapper._observation": [[385, 387], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.Rondorf_BOReL.gym.core.RewardWrapper._step": [[389, 392], ["core.RewardWrapper.env.step", "core.RewardWrapper.reward"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.step", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.reward"], []], "home.repos.pwc.inspect_result.Rondorf_BOReL.gym.core.RewardWrapper.reward": [[393, 395], ["core.RewardWrapper._reward"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.gym.core.RewardWrapper._reward"], []], "home.repos.pwc.inspect_result.Rondorf_BOReL.gym.core.RewardWrapper._reward": [[396, 398], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.Rondorf_BOReL.gym.core.ActionWrapper._step": [[400, 403], ["core.ActionWrapper.action", "core.ActionWrapper.env.step"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.gym.core.ActionWrapper.action", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.step"], []], "home.repos.pwc.inspect_result.Rondorf_BOReL.gym.core.ActionWrapper.action": [[404, 406], ["core.ActionWrapper._action"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.gym.core.ActionWrapper._action"], []], "home.repos.pwc.inspect_result.Rondorf_BOReL.gym.core.ActionWrapper._action": [[407, 409], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.Rondorf_BOReL.gym.core.ActionWrapper.reverse_action": [[410, 412], ["core.ActionWrapper._reverse_action"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.gym.core.ActionWrapper._reverse_action"], []], "home.repos.pwc.inspect_result.Rondorf_BOReL.gym.core.ActionWrapper._reverse_action": [[413, 415], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.Rondorf_BOReL.gym.error.APIError.__init__": [[68, 85], ["Exception.__init__", "error.APIError.headers.get", "hasattr", "http_body.decode.decode.decode"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.__init__", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.decode"], ["    ", "def", "__init__", "(", "self", ",", "message", "=", "None", ",", "http_body", "=", "None", ",", "http_status", "=", "None", ",", "\n", "json_body", "=", "None", ",", "headers", "=", "None", ")", ":", "\n", "        ", "super", "(", "APIError", ",", "self", ")", ".", "__init__", "(", "message", ")", "\n", "\n", "if", "http_body", "and", "hasattr", "(", "http_body", ",", "'decode'", ")", ":", "\n", "            ", "try", ":", "\n", "                ", "http_body", "=", "http_body", ".", "decode", "(", "'utf-8'", ")", "\n", "", "except", ":", "\n", "                ", "http_body", "=", "(", "'<Could not decode body as utf-8. '", "\n", "'Please report to gym@openai.com>'", ")", "\n", "\n", "", "", "self", ".", "_message", "=", "message", "\n", "self", ".", "http_body", "=", "http_body", "\n", "self", ".", "http_status", "=", "http_status", "\n", "self", ".", "json_body", "=", "json_body", "\n", "self", ".", "headers", "=", "headers", "or", "{", "}", "\n", "self", ".", "request_id", "=", "self", ".", "headers", ".", "get", "(", "'request-id'", ",", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.gym.error.APIError.__unicode__": [[86, 92], ["None"], "methods", ["None"], ["", "def", "__unicode__", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "request_id", "is", "not", "None", ":", "\n", "            ", "msg", "=", "self", ".", "_message", "or", "\"<empty message>\"", "\n", "return", "u\"Request {0}: {1}\"", ".", "format", "(", "self", ".", "request_id", ",", "msg", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "_message", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.gym.error.InvalidRequestError.__init__": [[107, 113], ["error.APIError.__init__"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.__init__"], ["    ", "def", "__init__", "(", "self", ",", "message", ",", "param", ",", "http_body", "=", "None", ",", "\n", "http_status", "=", "None", ",", "json_body", "=", "None", ",", "headers", "=", "None", ")", ":", "\n", "        ", "super", "(", "InvalidRequestError", ",", "self", ")", ".", "__init__", "(", "\n", "message", ",", "http_body", ",", "http_status", ",", "json_body", ",", "\n", "headers", ")", "\n", "self", ".", "param", "=", "param", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.gym.__init__.sanity_check_dependencies": [[14, 24], ["distutils.version.LooseVersion", "distutils.version.LooseVersion", "logger.warn", "distutils.version.LooseVersion", "distutils.version.LooseVersion", "logger.warn"], "function", ["None"], []], "home.repos.pwc.inspect_result.Rondorf_BOReL.gym.configuration.logger_setup": [[24, 30], ["root_logger.addHandler", "logger.setLevel"], "function", ["None"], ["def", "logger_setup", "(", "_", "=", "None", ")", ":", "\n", "# This used to take in an argument; we still take an (ignored)", "\n", "# argument for compatibility.", "\n", "    ", "root_logger", ".", "addHandler", "(", "handler", ")", "\n", "for", "logger", "in", "_extra_loggers", ":", "\n", "        ", "logger", ".", "setLevel", "(", "logging", ".", "INFO", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.gym.configuration.undo_logger_setup": [[31, 44], ["root_logger.removeHandler", "logger.setLevel"], "function", ["None"], ["", "", "def", "undo_logger_setup", "(", ")", ":", "\n", "    ", "\"\"\"Undoes the automatic logging setup done by OpenAI Gym. You should call\n    this function if you want to manually configure logging\n    yourself. Typical usage would involve putting something like the\n    following at the top of your script:\n\n    gym.undo_logger_setup()\n    logger = logging.getLogger()\n    logger.addHandler(logging.StreamHandler(sys.stderr))\n    \"\"\"", "\n", "root_logger", ".", "removeHandler", "(", "handler", ")", "\n", "for", "logger", "in", "_extra_loggers", ":", "\n", "        ", "logger", ".", "setLevel", "(", "logging", ".", "NOTSET", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Rondorf_BOReL.tests.test_atexit.Closeable.close": [[5, 7], ["None"], "methods", ["None"], ["def", "close", "(", "self", ")", ":", "\n", "        ", "self", ".", "close_called", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.tests.test_atexit.test_register_unregister": [[8, 22], ["environments.mujoco.rand_param_envs.gym.utils.closer.Closer", "test_atexit.Closeable", "test_atexit.Closeable", "environments.mujoco.rand_param_envs.gym.utils.closer.Closer.register", "environments.mujoco.rand_param_envs.gym.utils.closer.Closer.register", "environments.mujoco.rand_param_envs.gym.utils.closer.Closer.unregister", "environments.mujoco.rand_param_envs.gym.utils.closer.Closer.close"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.envs.registration.register", "home.repos.pwc.inspect_result.Rondorf_BOReL.envs.registration.register", "home.repos.pwc.inspect_result.Rondorf_BOReL.utils.closer.Closer.unregister", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.close"], ["", "", "def", "test_register_unregister", "(", ")", ":", "\n", "    ", "registry", "=", "Closer", "(", "atexit_register", "=", "False", ")", "\n", "c1", "=", "Closeable", "(", ")", "\n", "c2", "=", "Closeable", "(", ")", "\n", "\n", "assert", "not", "c1", ".", "close_called", "\n", "assert", "not", "c2", ".", "close_called", "\n", "registry", ".", "register", "(", "c1", ")", "\n", "id2", "=", "registry", ".", "register", "(", "c2", ")", "\n", "\n", "registry", ".", "unregister", "(", "id2", ")", "\n", "registry", ".", "close", "(", ")", "\n", "assert", "c1", ".", "close_called", "\n", "assert", "not", "c2", ".", "close_called", "\n", "", ""]], "home.repos.pwc.inspect_result.Rondorf_BOReL.tests.test_seeding.test_invalid_seeds": [[4, 12], ["environments.mujoco.rand_param_envs.gym.utils.seeding.np_random"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.utils.seeding.np_random"], ["def", "test_invalid_seeds", "(", ")", ":", "\n", "    ", "for", "seed", "in", "[", "-", "1", ",", "'test'", "]", ":", "\n", "        ", "try", ":", "\n", "            ", "seeding", ".", "np_random", "(", "seed", ")", "\n", "", "except", "error", ".", "Error", ":", "\n", "            ", "pass", "\n", "", "else", ":", "\n", "            ", "assert", "False", ",", "'Invalid seed {} passed validation'", ".", "format", "(", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.tests.test_seeding.test_valid_seeds": [[13, 17], ["environments.mujoco.rand_param_envs.gym.utils.seeding.np_random"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.utils.seeding.np_random"], ["", "", "", "def", "test_valid_seeds", "(", ")", ":", "\n", "    ", "for", "seed", "in", "[", "0", ",", "1", "]", ":", "\n", "        ", "random", ",", "seed1", "=", "seeding", ".", "np_random", "(", "seed", ")", "\n", "assert", "seed", "==", "seed1", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Rondorf_BOReL.tests.test_benchmark.test": [[9, 47], ["environments.mujoco.rand_param_envs.gym.benchmarks.registration.Benchmark", "environments.mujoco.rand_param_envs.gym.monitoring.tests.helpers.tempdir", "environments.mujoco.rand_param_envs.gym.make", "environments.mujoco.rand_param_envs.gym.wrappers.Monitor", "wrappers.Monitor.seed", "wrappers.Monitor.set_monitor_mode", "test_benchmark.rollout", "wrappers.Monitor.set_monitor_mode", "range", "wrappers.Monitor.set_monitor_mode", "test_benchmark.rollout", "wrappers.Monitor.close", "environments.mujoco.rand_param_envs.gym.monitoring.load_results", "registration.Benchmark.score_evaluation", "registration.Benchmark.score_benchmark", "numpy.all", "numpy.isclose", "environments.mujoco.rand_param_envs.gym.benchmarks.scoring.ClipTo01ThenAverage", "test_benchmark.rollout", "numpy.isclose"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.tests.helpers.tempdir", "home.repos.pwc.inspect_result.Rondorf_BOReL.envs.registration.make", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.seed", "home.repos.pwc.inspect_result.Rondorf_BOReL.wrappers.monitoring.Monitor.set_monitor_mode", "home.repos.pwc.inspect_result.Rondorf_BOReL.tests.test_benchmark.rollout", "home.repos.pwc.inspect_result.Rondorf_BOReL.wrappers.monitoring.Monitor.set_monitor_mode", "home.repos.pwc.inspect_result.Rondorf_BOReL.wrappers.monitoring.Monitor.set_monitor_mode", "home.repos.pwc.inspect_result.Rondorf_BOReL.tests.test_benchmark.rollout", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.close", "home.repos.pwc.inspect_result.Rondorf_BOReL.wrappers.monitoring.load_results", "home.repos.pwc.inspect_result.Rondorf_BOReL.benchmarks.scoring.BenchmarkScoringRule.score_evaluation", "home.repos.pwc.inspect_result.Rondorf_BOReL.benchmarks.scoring.BenchmarkScoringRule.score_benchmark", "home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.ListableAPIResource.all", "home.repos.pwc.inspect_result.Rondorf_BOReL.tests.test_benchmark.rollout"], ["def", "test", "(", ")", ":", "\n", "    ", "benchmark", "=", "registration", ".", "Benchmark", "(", "\n", "id", "=", "'MyBenchmark-v0'", ",", "\n", "scorer", "=", "scoring", ".", "ClipTo01ThenAverage", "(", ")", ",", "\n", "tasks", "=", "[", "\n", "{", "'env_id'", ":", "'CartPole-v0'", ",", "\n", "'trials'", ":", "1", ",", "\n", "'max_timesteps'", ":", "5", "\n", "}", ",", "\n", "{", "'env_id'", ":", "'CartPole-v0'", ",", "\n", "'trials'", ":", "1", ",", "\n", "'max_timesteps'", ":", "100", ",", "\n", "}", "]", ")", "\n", "\n", "with", "helpers", ".", "tempdir", "(", ")", "as", "temp", ":", "\n", "        ", "env", "=", "gym", ".", "make", "(", "'CartPole-v0'", ")", "\n", "env", "=", "wrappers", ".", "Monitor", "(", "env", ",", "directory", "=", "temp", ",", "video_callable", "=", "False", ")", "\n", "env", ".", "seed", "(", "0", ")", "\n", "\n", "env", ".", "set_monitor_mode", "(", "'evaluation'", ")", "\n", "rollout", "(", "env", ")", "\n", "\n", "env", ".", "set_monitor_mode", "(", "'training'", ")", "\n", "for", "i", "in", "range", "(", "2", ")", ":", "\n", "            ", "rollout", "(", "env", ")", "\n", "\n", "", "env", ".", "set_monitor_mode", "(", "'evaluation'", ")", "\n", "rollout", "(", "env", ",", "good", "=", "True", ")", "\n", "\n", "env", ".", "close", "(", ")", "\n", "results", "=", "monitoring", ".", "load_results", "(", "temp", ")", "\n", "evaluation_score", "=", "benchmark", ".", "score_evaluation", "(", "'CartPole-v0'", ",", "results", "[", "'data_sources'", "]", ",", "results", "[", "'initial_reset_timestamps'", "]", ",", "results", "[", "'episode_lengths'", "]", ",", "results", "[", "'episode_rewards'", "]", ",", "results", "[", "'episode_types'", "]", ",", "results", "[", "'timestamps'", "]", ")", "\n", "benchmark_score", "=", "benchmark", ".", "score_benchmark", "(", "{", "\n", "'CartPole-v0'", ":", "evaluation_score", "[", "'scores'", "]", ",", "\n", "}", ")", "\n", "\n", "assert", "np", ".", "all", "(", "np", ".", "isclose", "(", "evaluation_score", "[", "'scores'", "]", ",", "[", "0.00089999999999999998", ",", "0.0054000000000000003", "]", ")", ")", ",", "\"evaluation_score={}\"", ".", "format", "(", "evaluation_score", ")", "\n", "assert", "np", ".", "isclose", "(", "benchmark_score", ",", "0.00315", ")", ",", "\"benchmark_score={}\"", ".", "format", "(", "benchmark_score", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.tests.test_benchmark.rollout": [[48, 57], ["env.reset", "env.step"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.reset", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.step"], ["", "", "def", "rollout", "(", "env", ",", "good", "=", "False", ")", ":", "\n", "    ", "env", ".", "reset", "(", ")", "\n", "\n", "action", "=", "0", "\n", "d", "=", "False", "\n", "while", "not", "d", ":", "\n", "        ", "if", "good", ":", "\n", "            ", "action", "=", "1", "-", "action", "\n", "", "o", ",", "r", ",", "d", ",", "i", "=", "env", ".", "step", "(", "action", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Rondorf_BOReL.tests.test_monitor.AutoresetEnv.__init__": [[91, 94], ["environments.mujoco.rand_param_envs.gym.spaces.Discrete", "environments.mujoco.rand_param_envs.gym.spaces.Discrete"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "action_space", "=", "spaces", ".", "Discrete", "(", "1", ")", "\n", "self", ".", "observation_space", "=", "spaces", ".", "Discrete", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.tests.test_monitor.AutoresetEnv._reset": [[95, 97], ["None"], "methods", ["None"], ["", "def", "_reset", "(", "self", ")", ":", "\n", "        ", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.tests.test_monitor.AutoresetEnv._step": [[98, 100], ["None"], "methods", ["None"], ["", "def", "_step", "(", "self", ",", "action", ")", ":", "\n", "        ", "return", "0", ",", "0", ",", "False", ",", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.tests.test_monitor.test_monitor_filename": [[12, 20], ["environments.mujoco.rand_param_envs.gym.monitoring.tests.helpers.tempdir", "environments.mujoco.rand_param_envs.gym.make", "environments.mujoco.rand_param_envs.gym.wrappers.Monitor", "environments.mujoco.rand_param_envs.gym.wrappers.Monitor.close", "glob.glob", "os.path.join", "len"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.tests.helpers.tempdir", "home.repos.pwc.inspect_result.Rondorf_BOReL.envs.registration.make", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.close", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.join"], ["def", "test_monitor_filename", "(", ")", ":", "\n", "    ", "with", "helpers", ".", "tempdir", "(", ")", "as", "temp", ":", "\n", "        ", "env", "=", "gym", ".", "make", "(", "'CartPole-v0'", ")", "\n", "env", "=", "Monitor", "(", "env", ",", "directory", "=", "temp", ")", "\n", "env", ".", "close", "(", ")", "\n", "\n", "manifests", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "temp", ",", "'*.manifest.*'", ")", ")", "\n", "assert", "len", "(", "manifests", ")", "==", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.tests.test_monitor.test_write_upon_reset_false": [[21, 33], ["environments.mujoco.rand_param_envs.gym.monitoring.tests.helpers.tempdir", "environments.mujoco.rand_param_envs.gym.make", "environments.mujoco.rand_param_envs.gym.wrappers.Monitor", "environments.mujoco.rand_param_envs.gym.wrappers.Monitor.reset", "glob.glob", "environments.mujoco.rand_param_envs.gym.wrappers.Monitor.close", "glob.glob", "os.path.join", "os.path.join", "len"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.tests.helpers.tempdir", "home.repos.pwc.inspect_result.Rondorf_BOReL.envs.registration.make", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.reset", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.close", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.join", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.join"], ["", "", "def", "test_write_upon_reset_false", "(", ")", ":", "\n", "    ", "with", "helpers", ".", "tempdir", "(", ")", "as", "temp", ":", "\n", "        ", "env", "=", "gym", ".", "make", "(", "'CartPole-v0'", ")", "\n", "env", "=", "Monitor", "(", "env", ",", "directory", "=", "temp", ",", "video_callable", "=", "False", ",", "write_upon_reset", "=", "False", ")", "\n", "env", ".", "reset", "(", ")", "\n", "\n", "files", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "temp", ",", "'*'", ")", ")", "\n", "assert", "not", "files", ",", "\"Files: {}\"", ".", "format", "(", "files", ")", "\n", "\n", "env", ".", "close", "(", ")", "\n", "files", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "temp", ",", "'*'", ")", ")", "\n", "assert", "len", "(", "files", ")", ">", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.tests.test_monitor.test_write_upon_reset_true": [[34, 50], ["environments.mujoco.rand_param_envs.gym.monitoring.tests.helpers.tempdir", "environments.mujoco.rand_param_envs.gym.make", "environments.mujoco.rand_param_envs.gym.wrappers.Monitor", "environments.mujoco.rand_param_envs.gym.wrappers.Monitor.configure", "environments.mujoco.rand_param_envs.gym.wrappers.Monitor.reset", "glob.glob", "environments.mujoco.rand_param_envs.gym.wrappers.Monitor.close", "glob.glob", "os.path.join", "len", "os.path.join", "len"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.tests.helpers.tempdir", "home.repos.pwc.inspect_result.Rondorf_BOReL.envs.registration.make", "home.repos.pwc.inspect_result.Rondorf_BOReL.gym.core.Env.configure", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.reset", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.close", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.join", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.join"], ["", "", "def", "test_write_upon_reset_true", "(", ")", ":", "\n", "    ", "with", "helpers", ".", "tempdir", "(", ")", "as", "temp", ":", "\n", "        ", "env", "=", "gym", ".", "make", "(", "'CartPole-v0'", ")", "\n", "\n", "# TODO: Fix Cartpole to not configure itself automatically", "\n", "# assert not env._configured", "\n", "env", "=", "Monitor", "(", "env", ",", "directory", "=", "temp", ",", "video_callable", "=", "False", ",", "write_upon_reset", "=", "True", ")", "\n", "env", ".", "configure", "(", ")", "\n", "env", ".", "reset", "(", ")", "\n", "\n", "files", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "temp", ",", "'*'", ")", ")", "\n", "assert", "len", "(", "files", ")", ">", "0", ",", "\"Files: {}\"", ".", "format", "(", "files", ")", "\n", "\n", "env", ".", "close", "(", ")", "\n", "files", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "temp", ",", "'*'", ")", ")", "\n", "assert", "len", "(", "files", ")", ">", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.tests.test_monitor.test_video_callable_true_not_allowed": [[51, 60], ["environments.mujoco.rand_param_envs.gym.monitoring.tests.helpers.tempdir", "environments.mujoco.rand_param_envs.gym.make", "environments.mujoco.rand_param_envs.gym.wrappers.Monitor"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.tests.helpers.tempdir", "home.repos.pwc.inspect_result.Rondorf_BOReL.envs.registration.make"], ["", "", "def", "test_video_callable_true_not_allowed", "(", ")", ":", "\n", "    ", "with", "helpers", ".", "tempdir", "(", ")", "as", "temp", ":", "\n", "        ", "env", "=", "gym", ".", "make", "(", "'CartPole-v0'", ")", "\n", "try", ":", "\n", "            ", "env", "=", "Monitor", "(", "env", ",", "temp", ",", "video_callable", "=", "True", ")", "\n", "", "except", "error", ".", "Error", ":", "\n", "            ", "pass", "\n", "", "else", ":", "\n", "            ", "assert", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.tests.test_monitor.test_video_callable_false_does_not_record": [[61, 69], ["environments.mujoco.rand_param_envs.gym.monitoring.tests.helpers.tempdir", "environments.mujoco.rand_param_envs.gym.make", "environments.mujoco.rand_param_envs.gym.wrappers.Monitor", "environments.mujoco.rand_param_envs.gym.wrappers.Monitor.reset", "environments.mujoco.rand_param_envs.gym.wrappers.Monitor.close", "environments.mujoco.rand_param_envs.gym.monitoring.load_results", "len"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.tests.helpers.tempdir", "home.repos.pwc.inspect_result.Rondorf_BOReL.envs.registration.make", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.reset", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.close", "home.repos.pwc.inspect_result.Rondorf_BOReL.wrappers.monitoring.load_results"], ["", "", "", "def", "test_video_callable_false_does_not_record", "(", ")", ":", "\n", "    ", "with", "helpers", ".", "tempdir", "(", ")", "as", "temp", ":", "\n", "        ", "env", "=", "gym", ".", "make", "(", "'CartPole-v0'", ")", "\n", "env", "=", "Monitor", "(", "env", ",", "temp", ",", "video_callable", "=", "False", ")", "\n", "env", ".", "reset", "(", ")", "\n", "env", ".", "close", "(", ")", "\n", "results", "=", "monitoring", ".", "load_results", "(", "temp", ")", "\n", "assert", "len", "(", "results", "[", "'videos'", "]", ")", "==", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.tests.test_monitor.test_video_callable_records_videos": [[70, 78], ["environments.mujoco.rand_param_envs.gym.monitoring.tests.helpers.tempdir", "environments.mujoco.rand_param_envs.gym.make", "environments.mujoco.rand_param_envs.gym.wrappers.Monitor", "environments.mujoco.rand_param_envs.gym.wrappers.Monitor.reset", "environments.mujoco.rand_param_envs.gym.wrappers.Monitor.close", "environments.mujoco.rand_param_envs.gym.monitoring.load_results", "len"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.tests.helpers.tempdir", "home.repos.pwc.inspect_result.Rondorf_BOReL.envs.registration.make", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.reset", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.close", "home.repos.pwc.inspect_result.Rondorf_BOReL.wrappers.monitoring.load_results"], ["", "", "def", "test_video_callable_records_videos", "(", ")", ":", "\n", "    ", "with", "helpers", ".", "tempdir", "(", ")", "as", "temp", ":", "\n", "        ", "env", "=", "gym", ".", "make", "(", "'CartPole-v0'", ")", "\n", "env", "=", "Monitor", "(", "env", ",", "temp", ")", "\n", "env", ".", "reset", "(", ")", "\n", "env", ".", "close", "(", ")", "\n", "results", "=", "monitoring", ".", "load_results", "(", "temp", ")", "\n", "assert", "len", "(", "results", "[", "'videos'", "]", ")", "==", "1", ",", "\"Videos: {}\"", ".", "format", "(", "results", "[", "'videos'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.tests.test_monitor.test_semisuper_succeeds": [[79, 87], ["environments.mujoco.rand_param_envs.gym.monitoring.tests.helpers.tempdir", "environments.mujoco.rand_param_envs.gym.make", "environments.mujoco.rand_param_envs.gym.wrappers.Monitor", "environments.mujoco.rand_param_envs.gym.wrappers.Monitor.reset", "environments.mujoco.rand_param_envs.gym.wrappers.Monitor.step", "environments.mujoco.rand_param_envs.gym.wrappers.Monitor.close", "environments.mujoco.rand_param_envs.gym.wrappers.Monitor.action_space.sample"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.tests.helpers.tempdir", "home.repos.pwc.inspect_result.Rondorf_BOReL.envs.registration.make", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.reset", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.step", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.close", "home.repos.pwc.inspect_result.Rondorf_BOReL.spaces.discrete.Discrete.sample"], ["", "", "def", "test_semisuper_succeeds", "(", ")", ":", "\n", "    ", "\"\"\"Regression test. Ensure that this can write\"\"\"", "\n", "with", "helpers", ".", "tempdir", "(", ")", "as", "temp", ":", "\n", "        ", "env", "=", "gym", ".", "make", "(", "'SemisuperPendulumDecay-v0'", ")", "\n", "env", "=", "Monitor", "(", "env", ",", "temp", ")", "\n", "env", ".", "reset", "(", ")", "\n", "env", ".", "step", "(", "env", ".", "action_space", ".", "sample", "(", ")", ")", "\n", "env", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.tests.test_monitor.test_env_reuse": [[108, 126], ["environments.mujoco.rand_param_envs.gym.monitoring.tests.helpers.tempdir", "environments.mujoco.rand_param_envs.gym.make", "environments.mujoco.rand_param_envs.gym.wrappers.Monitor", "environments.mujoco.rand_param_envs.gym.wrappers.Monitor.reset", "environments.mujoco.rand_param_envs.gym.wrappers.Monitor.step", "environments.mujoco.rand_param_envs.gym.wrappers.Monitor.step", "environments.mujoco.rand_param_envs.gym.wrappers.Monitor.step", "environments.mujoco.rand_param_envs.gym.wrappers.Monitor.step", "environments.mujoco.rand_param_envs.gym.wrappers.Monitor.close"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.tests.helpers.tempdir", "home.repos.pwc.inspect_result.Rondorf_BOReL.envs.registration.make", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.reset", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.step", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.step", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.step", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.step", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.close"], ["def", "test_env_reuse", "(", ")", ":", "\n", "    ", "with", "helpers", ".", "tempdir", "(", ")", "as", "temp", ":", "\n", "        ", "env", "=", "gym", ".", "make", "(", "'Autoreset-v0'", ")", "\n", "env", "=", "Monitor", "(", "env", ",", "temp", ")", "\n", "\n", "env", ".", "reset", "(", ")", "\n", "\n", "_", ",", "_", ",", "done", ",", "_", "=", "env", ".", "step", "(", "None", ")", "\n", "assert", "not", "done", "\n", "_", ",", "_", ",", "done", ",", "_", "=", "env", ".", "step", "(", "None", ")", "\n", "assert", "done", "\n", "\n", "_", ",", "_", ",", "done", ",", "_", "=", "env", ".", "step", "(", "None", ")", "\n", "assert", "not", "done", "\n", "_", ",", "_", ",", "done", ",", "_", "=", "env", ".", "step", "(", "None", ")", "\n", "assert", "done", "\n", "\n", "env", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.tests.test_monitor.test_no_monitor_reset_unless_done": [[127, 168], ["environments.mujoco.rand_param_envs.gym.monitoring.tests.helpers.tempdir", "environments.mujoco.rand_param_envs.gym.make", "environments.mujoco.rand_param_envs.gym.wrappers.Monitor.reset", "environments.mujoco.rand_param_envs.gym.wrappers.Monitor.step", "environments.mujoco.rand_param_envs.gym.wrappers.Monitor.step", "environments.mujoco.rand_param_envs.gym.wrappers.Monitor.reset", "environments.mujoco.rand_param_envs.gym.wrappers.Monitor", "environments.mujoco.rand_param_envs.gym.wrappers.Monitor.reset", "environments.mujoco.rand_param_envs.gym.wrappers.Monitor.reset", "environments.mujoco.rand_param_envs.gym.wrappers.Monitor.reset", "environments.mujoco.rand_param_envs.gym.wrappers.Monitor.step", "environments.mujoco.rand_param_envs.gym.wrappers.Monitor.step", "test_monitor.test_no_monitor_reset_unless_done.assert_reset_raises"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.tests.helpers.tempdir", "home.repos.pwc.inspect_result.Rondorf_BOReL.envs.registration.make", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.reset", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.step", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.step", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.reset", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.reset", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.reset", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.reset", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.step", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.step"], ["", "", "def", "test_no_monitor_reset_unless_done", "(", ")", ":", "\n", "    ", "def", "assert_reset_raises", "(", "env", ")", ":", "\n", "        ", "errored", "=", "False", "\n", "try", ":", "\n", "            ", "env", ".", "reset", "(", ")", "\n", "", "except", "error", ".", "Error", ":", "\n", "            ", "errored", "=", "True", "\n", "", "assert", "errored", ",", "\"Env allowed a reset when it shouldn't have\"", "\n", "\n", "", "with", "helpers", ".", "tempdir", "(", ")", "as", "temp", ":", "\n", "# Make sure we can reset as we please without monitor", "\n", "        ", "env", "=", "gym", ".", "make", "(", "'CartPole-v0'", ")", "\n", "env", ".", "reset", "(", ")", "\n", "env", ".", "step", "(", "env", ".", "action_space", ".", "sample", "(", ")", ")", "\n", "env", ".", "step", "(", "env", ".", "action_space", ".", "sample", "(", ")", ")", "\n", "env", ".", "reset", "(", ")", "\n", "\n", "# can reset once as soon as we start", "\n", "env", "=", "Monitor", "(", "env", ",", "temp", ",", "video_callable", "=", "False", ")", "\n", "env", ".", "reset", "(", ")", "\n", "\n", "# can reset multiple times in a row", "\n", "env", ".", "reset", "(", ")", "\n", "env", ".", "reset", "(", ")", "\n", "\n", "env", ".", "step", "(", "env", ".", "action_space", ".", "sample", "(", ")", ")", "\n", "env", ".", "step", "(", "env", ".", "action_space", ".", "sample", "(", ")", ")", "\n", "assert_reset_raises", "(", "env", ")", "\n", "\n", "# should allow resets after the episode is done", "\n", "d", "=", "False", "\n", "while", "not", "d", ":", "\n", "            ", "_", ",", "_", ",", "d", ",", "_", "=", "env", ".", "step", "(", "env", ".", "action_space", ".", "sample", "(", ")", ")", "\n", "\n", "", "env", ".", "reset", "(", ")", "\n", "env", ".", "reset", "(", ")", "\n", "\n", "env", ".", "step", "(", "env", ".", "action_space", ".", "sample", "(", ")", ")", "\n", "assert_reset_raises", "(", "env", ")", "\n", "\n", "env", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.tests.test_monitor.test_only_complete_episodes_written": [[169, 186], ["environments.mujoco.rand_param_envs.gym.monitoring.tests.helpers.tempdir", "environments.mujoco.rand_param_envs.gym.make", "environments.mujoco.rand_param_envs.gym.wrappers.Monitor", "environments.mujoco.rand_param_envs.gym.wrappers.Monitor.reset", "environments.mujoco.rand_param_envs.gym.wrappers.Monitor.reset", "environments.mujoco.rand_param_envs.gym.wrappers.Monitor.step", "environments.mujoco.rand_param_envs.gym.wrappers.Monitor.close", "environments.mujoco.rand_param_envs.gym.monitoring.load_results", "environments.mujoco.rand_param_envs.gym.wrappers.Monitor.step", "environments.mujoco.rand_param_envs.gym.wrappers.Monitor.action_space.sample", "len", "len", "environments.mujoco.rand_param_envs.gym.wrappers.Monitor.action_space.sample"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.tests.helpers.tempdir", "home.repos.pwc.inspect_result.Rondorf_BOReL.envs.registration.make", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.reset", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.reset", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.step", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.close", "home.repos.pwc.inspect_result.Rondorf_BOReL.wrappers.monitoring.load_results", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.step", "home.repos.pwc.inspect_result.Rondorf_BOReL.spaces.discrete.Discrete.sample", "home.repos.pwc.inspect_result.Rondorf_BOReL.spaces.discrete.Discrete.sample"], ["", "", "def", "test_only_complete_episodes_written", "(", ")", ":", "\n", "    ", "with", "helpers", ".", "tempdir", "(", ")", "as", "temp", ":", "\n", "        ", "env", "=", "gym", ".", "make", "(", "'CartPole-v0'", ")", "\n", "env", "=", "Monitor", "(", "env", ",", "temp", ",", "video_callable", "=", "False", ")", "\n", "env", ".", "reset", "(", ")", "\n", "d", "=", "False", "\n", "while", "not", "d", ":", "\n", "            ", "_", ",", "_", ",", "d", ",", "_", "=", "env", ".", "step", "(", "env", ".", "action_space", ".", "sample", "(", ")", ")", "\n", "\n", "", "env", ".", "reset", "(", ")", "\n", "env", ".", "step", "(", "env", ".", "action_space", ".", "sample", "(", ")", ")", "\n", "\n", "env", ".", "close", "(", ")", "\n", "\n", "# Only 1 episode should be written", "\n", "results", "=", "monitoring", ".", "load_results", "(", "temp", ")", "\n", "assert", "len", "(", "results", "[", "'episode_lengths'", "]", ")", "==", "1", ",", "\"Found {} episodes written; expecting 1\"", ".", "format", "(", "len", "(", "results", "[", "'episode_lengths'", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.tests.test_monitor.test_steps_limit_restart": [[193, 209], ["environments.mujoco.rand_param_envs.gym.monitoring.tests.helpers.tempdir", "environments.mujoco.rand_param_envs.gym.make", "environments.mujoco.rand_param_envs.gym.wrappers.Monitor", "environments.mujoco.rand_param_envs.gym.wrappers.Monitor.reset", "environments.mujoco.rand_param_envs.gym.wrappers.Monitor.step", "environments.mujoco.rand_param_envs.gym.wrappers.Monitor.step", "environments.mujoco.rand_param_envs.gym.wrappers.Monitor.close", "environments.mujoco.rand_param_envs.gym.wrappers.Monitor.action_space.sample", "environments.mujoco.rand_param_envs.gym.wrappers.Monitor.action_space.sample"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.tests.helpers.tempdir", "home.repos.pwc.inspect_result.Rondorf_BOReL.envs.registration.make", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.reset", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.step", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.step", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.close", "home.repos.pwc.inspect_result.Rondorf_BOReL.spaces.discrete.Discrete.sample", "home.repos.pwc.inspect_result.Rondorf_BOReL.spaces.discrete.Discrete.sample"], ["def", "test_steps_limit_restart", "(", ")", ":", "\n", "    ", "with", "helpers", ".", "tempdir", "(", ")", "as", "temp", ":", "\n", "        ", "env", "=", "gym", ".", "make", "(", "'test.StepsLimitCartpole-v0'", ")", "\n", "env", "=", "Monitor", "(", "env", ",", "temp", ",", "video_callable", "=", "False", ")", "\n", "env", ".", "reset", "(", ")", "\n", "\n", "# Episode has started", "\n", "_", ",", "_", ",", "done", ",", "info", "=", "env", ".", "step", "(", "env", ".", "action_space", ".", "sample", "(", ")", ")", "\n", "assert", "done", "==", "False", "\n", "\n", "# Limit reached, now we get a done signal and the env resets itself", "\n", "_", ",", "_", ",", "done", ",", "info", "=", "env", ".", "step", "(", "env", ".", "action_space", ".", "sample", "(", ")", ")", "\n", "assert", "done", "==", "True", "\n", "assert", "env", ".", "episode_id", "==", "1", "\n", "\n", "env", ".", "close", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Rondorf_BOReL.tests.test_video_recorder.BrokenRecordableEnv.render": [[13, 15], ["None"], "methods", ["None"], ["def", "render", "(", "self", ",", "mode", "=", "None", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.tests.test_video_recorder.UnrecordableEnv.render": [[19, 21], ["None"], "methods", ["None"], ["def", "render", "(", "self", ",", "mode", "=", "None", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.tests.test_video_recorder.test_record_simple": [[22, 33], ["environments.mujoco.rand_param_envs.gym.make", "environments.mujoco.rand_param_envs.gym.monitoring.VideoRecorder", "gym.make.reset", "environments.mujoco.rand_param_envs.gym.monitoring.VideoRecorder.capture_frame", "environments.mujoco.rand_param_envs.gym.monitoring.VideoRecorder.close", "os.path.exists", "open", "os.fstat", "open.fileno"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.envs.registration.make", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.reset", "home.repos.pwc.inspect_result.Rondorf_BOReL.monitoring.video_recorder.ImageEncoder.capture_frame", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.close"], ["", "", "def", "test_record_simple", "(", ")", ":", "\n", "    ", "env", "=", "gym", ".", "make", "(", "\"CartPole-v1\"", ")", "\n", "rec", "=", "VideoRecorder", "(", "env", ")", "\n", "env", ".", "reset", "(", ")", "\n", "rec", ".", "capture_frame", "(", ")", "\n", "rec", ".", "close", "(", ")", "\n", "assert", "not", "rec", ".", "empty", "\n", "assert", "not", "rec", ".", "broken", "\n", "assert", "os", ".", "path", ".", "exists", "(", "rec", ".", "path", ")", "\n", "f", "=", "open", "(", "rec", ".", "path", ")", "\n", "assert", "os", ".", "fstat", "(", "f", ".", "fileno", "(", ")", ")", ".", "st_size", ">", "100", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.tests.test_video_recorder.test_no_frames": [[34, 41], ["test_video_recorder.BrokenRecordableEnv", "environments.mujoco.rand_param_envs.gym.monitoring.VideoRecorder", "environments.mujoco.rand_param_envs.gym.monitoring.VideoRecorder.close", "os.path.exists"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.close"], ["", "def", "test_no_frames", "(", ")", ":", "\n", "    ", "env", "=", "BrokenRecordableEnv", "(", ")", "\n", "rec", "=", "VideoRecorder", "(", "env", ")", "\n", "rec", ".", "close", "(", ")", "\n", "assert", "rec", ".", "empty", "\n", "assert", "rec", ".", "functional", "\n", "assert", "not", "os", ".", "path", ".", "exists", "(", "rec", ".", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.tests.test_video_recorder.test_record_unrecordable_method": [[42, 47], ["test_video_recorder.UnrecordableEnv", "environments.mujoco.rand_param_envs.gym.monitoring.VideoRecorder", "environments.mujoco.rand_param_envs.gym.monitoring.VideoRecorder.close"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.close"], ["", "def", "test_record_unrecordable_method", "(", ")", ":", "\n", "    ", "env", "=", "UnrecordableEnv", "(", ")", "\n", "rec", "=", "VideoRecorder", "(", "env", ")", "\n", "assert", "not", "rec", ".", "enabled", "\n", "rec", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.tests.test_video_recorder.test_record_breaking_render_method": [[48, 56], ["test_video_recorder.BrokenRecordableEnv", "environments.mujoco.rand_param_envs.gym.monitoring.VideoRecorder", "environments.mujoco.rand_param_envs.gym.monitoring.VideoRecorder.capture_frame", "environments.mujoco.rand_param_envs.gym.monitoring.VideoRecorder.close", "os.path.exists"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.monitoring.video_recorder.ImageEncoder.capture_frame", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.close"], ["", "def", "test_record_breaking_render_method", "(", ")", ":", "\n", "    ", "env", "=", "BrokenRecordableEnv", "(", ")", "\n", "rec", "=", "VideoRecorder", "(", "env", ")", "\n", "rec", ".", "capture_frame", "(", ")", "\n", "rec", ".", "close", "(", ")", "\n", "assert", "rec", ".", "empty", "\n", "assert", "rec", ".", "broken", "\n", "assert", "not", "os", ".", "path", ".", "exists", "(", "rec", ".", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.tests.test_video_recorder.test_text_envs": [[57, 66], ["environments.mujoco.rand_param_envs.gym.make", "environments.mujoco.rand_param_envs.gym.monitoring.VideoRecorder", "gym.make.reset", "environments.mujoco.rand_param_envs.gym.monitoring.VideoRecorder.capture_frame", "environments.mujoco.rand_param_envs.gym.monitoring.VideoRecorder.close", "os.remove"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.envs.registration.make", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.reset", "home.repos.pwc.inspect_result.Rondorf_BOReL.monitoring.video_recorder.ImageEncoder.capture_frame", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.close"], ["", "def", "test_text_envs", "(", ")", ":", "\n", "    ", "env", "=", "gym", ".", "make", "(", "'FrozenLake-v0'", ")", "\n", "video", "=", "VideoRecorder", "(", "env", ")", "\n", "try", ":", "\n", "        ", "env", ".", "reset", "(", ")", "\n", "video", ".", "capture_frame", "(", ")", "\n", "video", ".", "close", "(", ")", "\n", "", "finally", ":", "\n", "        ", "os", ".", "remove", "(", "video", ".", "path", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Rondorf_BOReL.tests.helpers.tempdir": [[5, 10], ["tempfile.mkdtemp", "shutil.rmtree"], "function", ["None"], ["import", "os", "\n", "\n", "import", "torch", "\n", "import", "torch", ".", "nn", "as", "nn", "\n", "import", "torchkit", ".", "pytorch_utils", "as", "ptu", "\n", "from", "gym", ".", "spaces", "import", "Box", ",", "Discrete", ",", "Tuple", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.tests.test_safety_envs.test_semisuper_true_rewards": [[4, 13], ["environments.mujoco.rand_param_envs.gym.make", "gym.make.reset", "gym.make.step", "gym.make.action_space.sample"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.envs.registration.make", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.reset", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.step", "home.repos.pwc.inspect_result.Rondorf_BOReL.spaces.discrete.Discrete.sample"], ["def", "test_semisuper_true_rewards", "(", ")", ":", "\n", "    ", "env", "=", "gym", ".", "make", "(", "'SemisuperPendulumNoise-v0'", ")", "\n", "env", ".", "reset", "(", ")", "\n", "\n", "observation", ",", "perceived_reward", ",", "done", ",", "info", "=", "env", ".", "step", "(", "env", ".", "action_space", ".", "sample", "(", ")", ")", "\n", "true_reward", "=", "info", "[", "'true_reward'", "]", "\n", "\n", "# The noise in the reward should ensure these are different. If we get spurious errors, we can remove this check", "\n", "assert", "perceived_reward", "!=", "true_reward", "\n", "", ""]], "home.repos.pwc.inspect_result.Rondorf_BOReL.tests.test_envs_semantics.hash_object": [[23, 25], ["hashlib.sha256().hexdigest", "hashlib.sha256", "str().encode", "str"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.encode"], ["", "", "def", "hash_object", "(", "unhashed", ")", ":", "\n", "  ", "return", "hashlib", ".", "sha256", "(", "str", "(", "unhashed", ")", ".", "encode", "(", "'utf-16'", ")", ")", ".", "hexdigest", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.tests.test_envs_semantics.generate_rollout_hash": [[26, 61], ["environments.mujoco.rand_param_envs.gym.spaces.seed", "spec.make", "spec.make.seed", "range", "test_envs_semantics.hash_object", "test_envs_semantics.hash_object", "test_envs_semantics.hash_object", "test_envs_semantics.hash_object", "spec.make.reset", "range", "spec.make.action_space.sample", "spec.make.step", "action_list.append", "observation_list.append", "reward_list.append", "done_list.append"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.seed", "home.repos.pwc.inspect_result.Rondorf_BOReL.envs.registration.make", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.seed", "home.repos.pwc.inspect_result.Rondorf_BOReL.tests.test_envs_semantics.hash_object", "home.repos.pwc.inspect_result.Rondorf_BOReL.tests.test_envs_semantics.hash_object", "home.repos.pwc.inspect_result.Rondorf_BOReL.tests.test_envs_semantics.hash_object", "home.repos.pwc.inspect_result.Rondorf_BOReL.tests.test_envs_semantics.hash_object", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.reset", "home.repos.pwc.inspect_result.Rondorf_BOReL.spaces.discrete.Discrete.sample", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.step"], ["", "def", "generate_rollout_hash", "(", "spec", ")", ":", "\n", "  ", "spaces", ".", "seed", "(", "0", ")", "\n", "env", "=", "spec", ".", "make", "(", ")", "\n", "env", ".", "seed", "(", "0", ")", "\n", "\n", "observation_list", "=", "[", "]", "\n", "action_list", "=", "[", "]", "\n", "reward_list", "=", "[", "]", "\n", "done_list", "=", "[", "]", "\n", "\n", "total_steps", "=", "0", "\n", "for", "episode", "in", "range", "(", "episodes", ")", ":", "\n", "    ", "if", "total_steps", ">=", "ROLLOUT_STEPS", ":", "break", "\n", "observation", "=", "env", ".", "reset", "(", ")", "\n", "\n", "for", "step", "in", "range", "(", "steps", ")", ":", "\n", "      ", "action", "=", "env", ".", "action_space", ".", "sample", "(", ")", "\n", "observation", ",", "reward", ",", "done", ",", "_", "=", "env", ".", "step", "(", "action", ")", "\n", "\n", "action_list", ".", "append", "(", "action", ")", "\n", "observation_list", ".", "append", "(", "observation", ")", "\n", "reward_list", ".", "append", "(", "reward", ")", "\n", "done_list", ".", "append", "(", "done", ")", "\n", "\n", "total_steps", "+=", "1", "\n", "if", "total_steps", ">=", "ROLLOUT_STEPS", ":", "break", "\n", "\n", "if", "done", ":", "break", "\n", "\n", "", "", "observations_hash", "=", "hash_object", "(", "observation_list", ")", "\n", "actions_hash", "=", "hash_object", "(", "action_list", ")", "\n", "rewards_hash", "=", "hash_object", "(", "reward_list", ")", "\n", "dones_hash", "=", "hash_object", "(", "done_list", ")", "\n", "\n", "return", "observations_hash", ",", "actions_hash", ",", "rewards_hash", ",", "dones_hash", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.tests.test_envs_semantics.test_env_semantics": [[62, 89], ["pytest.mark.parametrize", "logger.info", "test_envs_semantics.generate_rollout_hash", "len", "open", "json.load", "errors.append", "errors.append", "errors.append", "errors.append", "ValueError", "logger.warn", "logger.warn"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.tests.test_envs_semantics.generate_rollout_hash", "home.repos.pwc.inspect_result.Rondorf_BOReL.envs.registration.load"], ["", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"spec\"", ",", "spec_list", ")", "\n", "def", "test_env_semantics", "(", "spec", ")", ":", "\n", "  ", "with", "open", "(", "ROLLOUT_FILE", ")", "as", "data_file", ":", "\n", "    ", "rollout_dict", "=", "json", ".", "load", "(", "data_file", ")", "\n", "\n", "", "if", "spec", ".", "id", "not", "in", "rollout_dict", ":", "\n", "    ", "if", "not", "spec", ".", "nondeterministic", ":", "\n", "      ", "logger", ".", "warn", "(", "\"Rollout does not exist for {}, run generate_json.py to generate rollouts for new envs\"", ".", "format", "(", "spec", ".", "id", ")", ")", "\n", "", "return", "\n", "\n", "", "logger", ".", "info", "(", "\"Testing rollout for {} environment...\"", ".", "format", "(", "spec", ".", "id", ")", ")", "\n", "\n", "observations_now", ",", "actions_now", ",", "rewards_now", ",", "dones_now", "=", "generate_rollout_hash", "(", "spec", ")", "\n", "\n", "errors", "=", "[", "]", "\n", "if", "rollout_dict", "[", "spec", ".", "id", "]", "[", "'observations'", "]", "!=", "observations_now", ":", "\n", "    ", "errors", ".", "append", "(", "'Observations not equal for {} -- expected {} but got {}'", ".", "format", "(", "spec", ".", "id", ",", "rollout_dict", "[", "spec", ".", "id", "]", "[", "'observations'", "]", ",", "observations_now", ")", ")", "\n", "", "if", "rollout_dict", "[", "spec", ".", "id", "]", "[", "'actions'", "]", "!=", "actions_now", ":", "\n", "    ", "errors", ".", "append", "(", "'Actions not equal for {} -- expected {} but got {}'", ".", "format", "(", "spec", ".", "id", ",", "rollout_dict", "[", "spec", ".", "id", "]", "[", "'actions'", "]", ",", "actions_now", ")", ")", "\n", "", "if", "rollout_dict", "[", "spec", ".", "id", "]", "[", "'rewards'", "]", "!=", "rewards_now", ":", "\n", "    ", "errors", ".", "append", "(", "'Rewards not equal for {} -- expected {} but got {}'", ".", "format", "(", "spec", ".", "id", ",", "rollout_dict", "[", "spec", ".", "id", "]", "[", "'rewards'", "]", ",", "rewards_now", ")", ")", "\n", "", "if", "rollout_dict", "[", "spec", ".", "id", "]", "[", "'dones'", "]", "!=", "dones_now", ":", "\n", "    ", "errors", ".", "append", "(", "'Dones not equal for {} -- expected {} but got {}'", ".", "format", "(", "spec", ".", "id", ",", "rollout_dict", "[", "spec", ".", "id", "]", "[", "'dones'", "]", ",", "dones_now", ")", ")", "\n", "", "if", "len", "(", "errors", ")", ":", "\n", "    ", "for", "error", "in", "errors", ":", "\n", "      ", "logger", ".", "warn", "(", "error", ")", "\n", "", "raise", "ValueError", "(", "errors", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Rondorf_BOReL.tests.test_envs.test_env": [[14, 37], ["pytest.mark.parametrize", "spec.make", "spec.make.reset", "ob_space.contains", "act_space.sample", "spec.make.step", "ob_space.contains", "numpy.isscalar", "isinstance", "spec.make.metadata.get", "spec.make.render", "spec.make.metadata.get", "spec.make.render", "spec.make.close", "spec.make.render", "spec.make.render"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.envs.registration.make", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.reset", "home.repos.pwc.inspect_result.Rondorf_BOReL.spaces.discrete.Discrete.contains", "home.repos.pwc.inspect_result.Rondorf_BOReL.spaces.discrete.Discrete.sample", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.step", "home.repos.pwc.inspect_result.Rondorf_BOReL.spaces.discrete.Discrete.contains", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.render", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.render", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.close", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.render", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.render"], ["@", "pytest", ".", "mark", ".", "parametrize", "(", "\"spec\"", ",", "spec_list", ")", "\n", "def", "test_env", "(", "spec", ")", ":", "\n", "    ", "env", "=", "spec", ".", "make", "(", ")", "\n", "ob_space", "=", "env", ".", "observation_space", "\n", "act_space", "=", "env", ".", "action_space", "\n", "ob", "=", "env", ".", "reset", "(", ")", "\n", "assert", "ob_space", ".", "contains", "(", "ob", ")", ",", "'Reset observation: {!r} not in space'", ".", "format", "(", "ob", ")", "\n", "a", "=", "act_space", ".", "sample", "(", ")", "\n", "observation", ",", "reward", ",", "done", ",", "_info", "=", "env", ".", "step", "(", "a", ")", "\n", "assert", "ob_space", ".", "contains", "(", "observation", ")", ",", "'Step observation: {!r} not in space'", ".", "format", "(", "observation", ")", "\n", "assert", "np", ".", "isscalar", "(", "reward", ")", ",", "\"{} is not a scalar for {}\"", ".", "format", "(", "reward", ",", "env", ")", "\n", "assert", "isinstance", "(", "done", ",", "bool", ")", ",", "\"Expected {} to be a boolean\"", ".", "format", "(", "done", ")", "\n", "\n", "for", "mode", "in", "env", ".", "metadata", ".", "get", "(", "'render.modes'", ",", "[", "]", ")", ":", "\n", "        ", "env", ".", "render", "(", "mode", "=", "mode", ")", "\n", "", "env", ".", "render", "(", "close", "=", "True", ")", "\n", "\n", "# Make sure we can render the environment after close.", "\n", "for", "mode", "in", "env", ".", "metadata", ".", "get", "(", "'render.modes'", ",", "[", "]", ")", ":", "\n", "        ", "env", ".", "render", "(", "mode", "=", "mode", ")", "\n", "", "env", ".", "render", "(", "close", "=", "True", ")", "\n", "\n", "env", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.tests.test_envs.test_random_rollout": [[39, 49], ["environments.mujoco.rand_param_envs.gym.envs.make", "environments.mujoco.rand_param_envs.gym.envs.make", "env.reset", "range", "env.action_space.sample", "env.observation_space.contains", "agent", "env.action_space.contains", "env.step"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.envs.registration.make", "home.repos.pwc.inspect_result.Rondorf_BOReL.envs.registration.make", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.reset", "home.repos.pwc.inspect_result.Rondorf_BOReL.spaces.discrete.Discrete.sample", "home.repos.pwc.inspect_result.Rondorf_BOReL.spaces.discrete.Discrete.contains", "home.repos.pwc.inspect_result.Rondorf_BOReL.spaces.discrete.Discrete.contains", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.step"], ["", "def", "test_random_rollout", "(", ")", ":", "\n", "    ", "for", "env", "in", "[", "envs", ".", "make", "(", "'CartPole-v0'", ")", ",", "envs", ".", "make", "(", "'FrozenLake-v0'", ")", "]", ":", "\n", "        ", "agent", "=", "lambda", "ob", ":", "env", ".", "action_space", ".", "sample", "(", ")", "\n", "ob", "=", "env", ".", "reset", "(", ")", "\n", "for", "_", "in", "range", "(", "10", ")", ":", "\n", "            ", "assert", "env", ".", "observation_space", ".", "contains", "(", "ob", ")", "\n", "a", "=", "agent", "(", "ob", ")", "\n", "assert", "env", ".", "action_space", ".", "contains", "(", "a", ")", "\n", "(", "ob", ",", "_reward", ",", "done", ",", "_info", ")", "=", "env", ".", "step", "(", "a", ")", "\n", "if", "done", ":", "break", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.tests.test_envs.test_double_close": [[50, 64], ["TestEnv", "TestEnv.close", "TestEnv.close"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.close", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.close"], ["", "", "", "def", "test_double_close", "(", ")", ":", "\n", "    ", "class", "TestEnv", "(", "gym", ".", "Env", ")", ":", "\n", "        ", "def", "__init__", "(", "self", ")", ":", "\n", "            ", "self", ".", "close_count", "=", "0", "\n", "\n", "", "def", "_close", "(", "self", ")", ":", "\n", "            ", "self", ".", "close_count", "+=", "1", "\n", "\n", "", "", "env", "=", "TestEnv", "(", ")", "\n", "assert", "env", ".", "close_count", "==", "0", "\n", "env", ".", "close", "(", ")", "\n", "assert", "env", ".", "close_count", "==", "1", "\n", "env", ".", "close", "(", ")", "\n", "assert", "env", ".", "close_count", "==", "1", "\n", "", ""]], "home.repos.pwc.inspect_result.Rondorf_BOReL.tests.test_determinism.test_env": [[10, 54], ["pytest.mark.parametrize", "environments.mujoco.rand_param_envs.gym.spaces.seed", "spec.make", "spec.make.seed", "spec.make.reset", "spec.make.close", "environments.mujoco.rand_param_envs.gym.spaces.seed", "spec.make", "spec.make.seed", "spec.make.reset", "spec.make.close", "enumerate", "test_determinism.assert_equals", "enumerate", "spec.make.action_space.sample", "spec.make.step", "spec.make.action_space.sample", "spec.make.step", "zip", "zip", "test_determinism.assert_equals", "range", "range", "test_determinism.assert_equals", "test_determinism.assert_equals"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.seed", "home.repos.pwc.inspect_result.Rondorf_BOReL.envs.registration.make", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.seed", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.reset", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.close", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.seed", "home.repos.pwc.inspect_result.Rondorf_BOReL.envs.registration.make", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.seed", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.reset", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.close", "home.repos.pwc.inspect_result.Rondorf_BOReL.tests.test_determinism.assert_equals", "home.repos.pwc.inspect_result.Rondorf_BOReL.spaces.discrete.Discrete.sample", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.step", "home.repos.pwc.inspect_result.Rondorf_BOReL.spaces.discrete.Discrete.sample", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.step", "home.repos.pwc.inspect_result.Rondorf_BOReL.tests.test_determinism.assert_equals", "home.repos.pwc.inspect_result.Rondorf_BOReL.tests.test_determinism.assert_equals", "home.repos.pwc.inspect_result.Rondorf_BOReL.tests.test_determinism.assert_equals"], ["@", "pytest", ".", "mark", ".", "parametrize", "(", "\"spec\"", ",", "spec_list", ")", "\n", "def", "test_env", "(", "spec", ")", ":", "\n", "\n", "# Note that this precludes running this test in multiple", "\n", "# threads. However, we probably already can't do multithreading", "\n", "# due to some environments.", "\n", "    ", "spaces", ".", "seed", "(", "0", ")", "\n", "\n", "env1", "=", "spec", ".", "make", "(", ")", "\n", "env1", ".", "seed", "(", "0", ")", "\n", "action_samples1", "=", "[", "env1", ".", "action_space", ".", "sample", "(", ")", "for", "i", "in", "range", "(", "4", ")", "]", "\n", "initial_observation1", "=", "env1", ".", "reset", "(", ")", "\n", "step_responses1", "=", "[", "env1", ".", "step", "(", "action", ")", "for", "action", "in", "action_samples1", "]", "\n", "env1", ".", "close", "(", ")", "\n", "\n", "spaces", ".", "seed", "(", "0", ")", "\n", "\n", "env2", "=", "spec", ".", "make", "(", ")", "\n", "env2", ".", "seed", "(", "0", ")", "\n", "action_samples2", "=", "[", "env2", ".", "action_space", ".", "sample", "(", ")", "for", "i", "in", "range", "(", "4", ")", "]", "\n", "initial_observation2", "=", "env2", ".", "reset", "(", ")", "\n", "step_responses2", "=", "[", "env2", ".", "step", "(", "action", ")", "for", "action", "in", "action_samples2", "]", "\n", "env2", ".", "close", "(", ")", "\n", "\n", "for", "i", ",", "(", "action_sample1", ",", "action_sample2", ")", "in", "enumerate", "(", "zip", "(", "action_samples1", ",", "action_samples2", ")", ")", ":", "\n", "        ", "assert_equals", "(", "action_sample1", ",", "action_sample2", ")", ",", "'[{}] action_sample1: {}, action_sample2: {}'", ".", "format", "(", "i", ",", "action_sample1", ",", "action_sample2", ")", "\n", "\n", "# Don't check rollout equality if it's a a nondeterministic", "\n", "# environment.", "\n", "", "if", "spec", ".", "nondeterministic", ":", "\n", "        ", "return", "\n", "\n", "", "assert_equals", "(", "initial_observation1", ",", "initial_observation2", ")", "\n", "\n", "for", "i", ",", "(", "(", "o1", ",", "r1", ",", "d1", ",", "i1", ")", ",", "(", "o2", ",", "r2", ",", "d2", ",", "i2", ")", ")", "in", "enumerate", "(", "zip", "(", "step_responses1", ",", "step_responses2", ")", ")", ":", "\n", "        ", "assert_equals", "(", "o1", ",", "o2", ",", "'[{}] '", ".", "format", "(", "i", ")", ")", "\n", "assert", "r1", "==", "r2", ",", "'[{}] r1: {}, r2: {}'", ".", "format", "(", "i", ",", "r1", ",", "r2", ")", "\n", "assert", "d1", "==", "d2", ",", "'[{}] d1: {}, d2: {}'", ".", "format", "(", "i", ",", "d1", ",", "d2", ")", "\n", "\n", "# Go returns a Pachi game board in info, which doesn't", "\n", "# properly check equality. For now, we hack around this by", "\n", "# just skipping Go.", "\n", "if", "spec", ".", "id", "not", "in", "[", "'Go9x9-v0'", ",", "'Go19x19-v0'", "]", ":", "\n", "            ", "assert_equals", "(", "i1", ",", "i2", ",", "'[{}] '", ".", "format", "(", "i", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.tests.test_determinism.assert_equals": [[55, 71], ["isinstance", "type", "type", "a.keys", "isinstance", "list", "list", "test_determinism.assert_equals", "numpy.testing.assert_array_equal", "isinstance", "a.keys", "b.keys", "zip", "test_determinism.assert_equals"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjvGeomWrapper.type", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjvGeomWrapper.type", "home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.ListableAPIResource.list", "home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.ListableAPIResource.list", "home.repos.pwc.inspect_result.Rondorf_BOReL.tests.test_determinism.assert_equals", "home.repos.pwc.inspect_result.Rondorf_BOReL.tests.test_determinism.assert_equals"], ["", "", "", "def", "assert_equals", "(", "a", ",", "b", ",", "prefix", "=", "None", ")", ":", "\n", "    ", "assert", "type", "(", "a", ")", "==", "type", "(", "b", ")", ",", "\"{}Differing types: {} and {}\"", ".", "format", "(", "prefix", ",", "a", ",", "b", ")", "\n", "if", "isinstance", "(", "a", ",", "dict", ")", ":", "\n", "        ", "assert", "list", "(", "a", ".", "keys", "(", ")", ")", "==", "list", "(", "b", ".", "keys", "(", ")", ")", ",", "\"{}Key sets differ: {} and {}\"", ".", "format", "(", "prefix", ",", "a", ",", "b", ")", "\n", "\n", "for", "k", "in", "a", ".", "keys", "(", ")", ":", "\n", "            ", "v_a", "=", "a", "[", "k", "]", "\n", "v_b", "=", "b", "[", "k", "]", "\n", "assert_equals", "(", "v_a", ",", "v_b", ")", "\n", "", "", "elif", "isinstance", "(", "a", ",", "np", ".", "ndarray", ")", ":", "\n", "        ", "np", ".", "testing", ".", "assert_array_equal", "(", "a", ",", "b", ")", "\n", "", "elif", "isinstance", "(", "a", ",", "tuple", ")", ":", "\n", "        ", "for", "elem_from_a", ",", "elem_from_b", "in", "zip", "(", "a", ",", "b", ")", ":", "\n", "            ", "assert_equals", "(", "elem_from_a", ",", "elem_from_b", ")", "\n", "", "", "else", ":", "\n", "        ", "assert", "a", "==", "b", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Rondorf_BOReL.tests.test_registration.test_make": [[6, 10], ["environments.mujoco.rand_param_envs.gym.envs.make", "isinstance"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.envs.registration.make"], ["def", "test_make", "(", ")", ":", "\n", "    ", "env", "=", "envs", ".", "make", "(", "'CartPole-v0'", ")", "\n", "assert", "env", ".", "spec", ".", "id", "==", "'CartPole-v0'", "\n", "assert", "isinstance", "(", "env", ".", "unwrapped", ",", "cartpole", ".", "CartPoleEnv", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.tests.test_registration.test_make_deprecated": [[11, 18], ["environments.mujoco.rand_param_envs.gym.envs.make"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.envs.registration.make"], ["", "def", "test_make_deprecated", "(", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "envs", ".", "make", "(", "'Humanoid-v0'", ")", "\n", "", "except", "error", ".", "Error", ":", "\n", "        ", "pass", "\n", "", "else", ":", "\n", "        ", "assert", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.tests.test_registration.test_spec": [[19, 22], ["environments.mujoco.rand_param_envs.gym.envs.spec"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.envs.registration.spec"], ["", "", "def", "test_spec", "(", ")", ":", "\n", "    ", "spec", "=", "envs", ".", "spec", "(", "'CartPole-v0'", ")", "\n", "assert", "spec", ".", "id", "==", "'CartPole-v0'", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.tests.test_registration.test_missing_lookup": [[23, 42], ["environments.mujoco.rand_param_envs.gym.envs.registration.EnvRegistry", "registration.EnvRegistry.register", "registration.EnvRegistry.register", "registration.EnvRegistry.register", "registration.EnvRegistry.register", "registration.EnvRegistry.spec", "registration.EnvRegistry.spec"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.envs.registration.register", "home.repos.pwc.inspect_result.Rondorf_BOReL.envs.registration.register", "home.repos.pwc.inspect_result.Rondorf_BOReL.envs.registration.register", "home.repos.pwc.inspect_result.Rondorf_BOReL.envs.registration.register", "home.repos.pwc.inspect_result.Rondorf_BOReL.envs.registration.spec", "home.repos.pwc.inspect_result.Rondorf_BOReL.envs.registration.spec"], ["", "def", "test_missing_lookup", "(", ")", ":", "\n", "    ", "registry", "=", "registration", ".", "EnvRegistry", "(", ")", "\n", "registry", ".", "register", "(", "id", "=", "'Test-v0'", ",", "entry_point", "=", "None", ")", "\n", "registry", ".", "register", "(", "id", "=", "'Test-v15'", ",", "entry_point", "=", "None", ")", "\n", "registry", ".", "register", "(", "id", "=", "'Test-v9'", ",", "entry_point", "=", "None", ")", "\n", "registry", ".", "register", "(", "id", "=", "'Other-v100'", ",", "entry_point", "=", "None", ")", "\n", "try", ":", "\n", "        ", "registry", ".", "spec", "(", "'Test-v1'", ")", "# must match an env name but not the version above", "\n", "", "except", "error", ".", "DeprecatedEnv", ":", "\n", "        ", "pass", "\n", "", "else", ":", "\n", "        ", "assert", "False", "\n", "\n", "", "try", ":", "\n", "        ", "registry", ".", "spec", "(", "'Unknown-v1'", ")", "\n", "", "except", "error", ".", "UnregisteredEnv", ":", "\n", "        ", "pass", "\n", "", "else", ":", "\n", "        ", "assert", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.tests.test_registration.test_malformed_lookup": [[43, 51], ["environments.mujoco.rand_param_envs.gym.envs.registration.EnvRegistry", "registration.EnvRegistry.spec"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.envs.registration.spec"], ["", "", "def", "test_malformed_lookup", "(", ")", ":", "\n", "    ", "registry", "=", "registration", ".", "EnvRegistry", "(", ")", "\n", "try", ":", "\n", "        ", "registry", ".", "spec", "(", "u'\u201cBreakout-v0\u201d'", ")", "\n", "", "except", "error", ".", "Error", "as", "e", ":", "\n", "        ", "assert", "'malformed environment ID'", "in", "'{}'", ".", "format", "(", "e", ")", ",", "'Unexpected message: {}'", ".", "format", "(", "e", ")", "\n", "", "else", ":", "\n", "        ", "assert", "False", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Rondorf_BOReL.tests.spec_list.should_skip_env_spec_for_tests": [[6, 24], ["ep.startswith", "spec.id.startswith", "spec.id.startswith", "ep.startswith", "ep.startswith", "ep.startswith", "logger.warning", "os.environ.get", "os.path.exists", "ep.startswith", "os.path.expanduser", "spec.id.startswith"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.startswith", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.startswith", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.startswith", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.startswith", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.startswith", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.startswith", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.startswith", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.startswith"], ["def", "should_skip_env_spec_for_tests", "(", "spec", ")", ":", "\n", "# We skip tests for envs that require dependencies or are otherwise", "\n", "# troublesome to run frequently", "\n", "    ", "ep", "=", "spec", ".", "_entry_point", "\n", "# Skip mujoco tests for pull request CI", "\n", "skip_mujoco", "=", "not", "(", "os", ".", "environ", ".", "get", "(", "'MUJOCO_KEY_BUNDLE'", ")", "or", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "expanduser", "(", "'~/.mujoco'", ")", ")", ")", "\n", "if", "skip_mujoco", "and", "ep", ".", "startswith", "(", "'gym.envs.mujoco:'", ")", ":", "\n", "        ", "return", "True", "\n", "", "if", "(", "spec", ".", "id", ".", "startswith", "(", "\"Go\"", ")", "or", "\n", "spec", ".", "id", ".", "startswith", "(", "\"Hex\"", ")", "or", "\n", "ep", ".", "startswith", "(", "'gym.envs.box2d:'", ")", "or", "\n", "ep", ".", "startswith", "(", "'gym.envs.parameter_tuning:'", ")", "or", "\n", "ep", ".", "startswith", "(", "'gym.envs.safety:Semisuper'", ")", "or", "\n", "(", "ep", ".", "startswith", "(", "\"gym.envs.atari\"", ")", "and", "not", "spec", ".", "id", ".", "startswith", "(", "\"Pong\"", ")", ")", "\n", ")", ":", "\n", "        ", "logger", ".", "warning", "(", "\"Skipping tests for env {}\"", ".", "format", "(", "ep", ")", ")", "\n", "return", "True", "\n", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.tests.test_algorithmic.TestAlgorithmicEnvInteractions.setUp": [[29, 32], ["test_algorithmic.TestAlgorithmicEnvInteractions.ENV_KLS", "test_algorithmic.imprint"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.tests.test_algorithmic.imprint"], ["def", "setUp", "(", "self", ")", ":", "\n", "        ", "self", ".", "env", "=", "self", ".", "ENV_KLS", "(", "base", "=", "2", ",", "chars", "=", "True", ")", "\n", "imprint", "(", "self", ".", "env", ",", "self", ".", "CANNED_INPUT", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.tests.test_algorithmic.TestAlgorithmicEnvInteractions.test_successful_interaction": [[33, 43], ["test_algorithmic.TestAlgorithmicEnvInteractions.env.reset", "test_algorithmic.TestAlgorithmicEnvInteractions.assertEqual", "test_algorithmic.TestAlgorithmicEnvInteractions.env.step", "test_algorithmic.TestAlgorithmicEnvInteractions.assertEqual", "test_algorithmic.TestAlgorithmicEnvInteractions.assertGreater", "test_algorithmic.TestAlgorithmicEnvInteractions.assertFalse", "test_algorithmic.TestAlgorithmicEnvInteractions.env.step", "test_algorithmic.TestAlgorithmicEnvInteractions.assertTrue", "test_algorithmic.TestAlgorithmicEnvInteractions.assertGreater"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.reset", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.step", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.step"], ["", "def", "test_successful_interaction", "(", "self", ")", ":", "\n", "        ", "obs", "=", "self", ".", "env", ".", "reset", "(", ")", "\n", "self", ".", "assertEqual", "(", "obs", ",", "0", ")", "\n", "obs", ",", "reward", ",", "done", ",", "_", "=", "self", ".", "env", ".", "step", "(", "[", "self", ".", "RIGHT", ",", "1", ",", "0", "]", ")", "\n", "self", ".", "assertEqual", "(", "obs", ",", "1", ")", "\n", "self", ".", "assertGreater", "(", "reward", ",", "0", ")", "\n", "self", ".", "assertFalse", "(", "done", ")", "\n", "obs", ",", "reward", ",", "done", ",", "_", "=", "self", ".", "env", ".", "step", "(", "[", "self", ".", "LEFT", ",", "1", ",", "1", "]", ")", "\n", "self", ".", "assertTrue", "(", "done", ")", "\n", "self", ".", "assertGreater", "(", "reward", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.tests.test_algorithmic.TestAlgorithmicEnvInteractions.test_bad_output_fail_fast": [[44, 49], ["test_algorithmic.TestAlgorithmicEnvInteractions.env.reset", "test_algorithmic.TestAlgorithmicEnvInteractions.env.step", "test_algorithmic.TestAlgorithmicEnvInteractions.assertTrue", "test_algorithmic.TestAlgorithmicEnvInteractions.assertLess"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.reset", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.step"], ["", "def", "test_bad_output_fail_fast", "(", "self", ")", ":", "\n", "        ", "obs", "=", "self", ".", "env", ".", "reset", "(", ")", "\n", "obs", ",", "reward", ",", "done", ",", "_", "=", "self", ".", "env", ".", "step", "(", "[", "self", ".", "RIGHT", ",", "1", ",", "1", "]", ")", "\n", "self", ".", "assertTrue", "(", "done", ")", "\n", "self", ".", "assertLess", "(", "reward", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.tests.test_algorithmic.TestAlgorithmicEnvInteractions.test_levelup": [[50, 67], ["test_algorithmic.TestAlgorithmicEnvInteractions.env.reset", "range", "test_algorithmic.TestAlgorithmicEnvInteractions.env.step", "test_algorithmic.TestAlgorithmicEnvInteractions.assertFalse", "test_algorithmic.TestAlgorithmicEnvInteractions.env.step", "test_algorithmic.TestAlgorithmicEnvInteractions.assertTrue", "test_algorithmic.TestAlgorithmicEnvInteractions.env.reset", "test_algorithmic.TestAlgorithmicEnvInteractions.assertEqual", "test_algorithmic.TestAlgorithmicEnvInteractions.assertEqual", "test_algorithmic.TestAlgorithmicEnvInteractions.assertEqual", "len", "len"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.reset", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.step", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.step", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.reset"], ["", "def", "test_levelup", "(", "self", ")", ":", "\n", "        ", "obs", "=", "self", ".", "env", ".", "reset", "(", ")", "\n", "# Kind of a hack", "\n", "alg", ".", "algorithmic_env", ".", "AlgorithmicEnv", ".", "reward_shortfalls", "=", "[", "]", "\n", "min_length", "=", "self", ".", "env", ".", "min_length", "\n", "for", "i", "in", "range", "(", "self", ".", "env", ".", "last", ")", ":", "\n", "            ", "obs", ",", "reward", ",", "done", ",", "_", "=", "self", ".", "env", ".", "step", "(", "[", "self", ".", "RIGHT", ",", "1", ",", "0", "]", ")", "\n", "self", ".", "assertFalse", "(", "done", ")", "\n", "obs", ",", "reward", ",", "done", ",", "_", "=", "self", ".", "env", ".", "step", "(", "[", "self", ".", "RIGHT", ",", "1", ",", "1", "]", ")", "\n", "self", ".", "assertTrue", "(", "done", ")", "\n", "self", ".", "env", ".", "reset", "(", ")", "\n", "if", "i", "<", "self", ".", "env", ".", "last", "-", "1", ":", "\n", "                ", "self", ".", "assertEqual", "(", "len", "(", "alg", ".", "algorithmic_env", ".", "AlgorithmicEnv", ".", "reward_shortfalls", ")", ",", "i", "+", "1", ")", "\n", "", "else", ":", "\n", "# Should have leveled up on the last iteration", "\n", "                ", "self", ".", "assertEqual", "(", "self", ".", "env", ".", "min_length", ",", "min_length", "+", "1", ")", "\n", "self", ".", "assertEqual", "(", "len", "(", "alg", ".", "algorithmic_env", ".", "AlgorithmicEnv", ".", "reward_shortfalls", ")", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.tests.test_algorithmic.TestAlgorithmicEnvInteractions.test_walk_off_the_end": [[68, 85], ["test_algorithmic.TestAlgorithmicEnvInteractions.env.reset", "test_algorithmic.TestAlgorithmicEnvInteractions.env.step", "test_algorithmic.TestAlgorithmicEnvInteractions.assertEqual", "test_algorithmic.TestAlgorithmicEnvInteractions.assertEqual", "test_algorithmic.TestAlgorithmicEnvInteractions.assertFalse", "test_algorithmic.TestAlgorithmicEnvInteractions.env.step", "test_algorithmic.TestAlgorithmicEnvInteractions.assertEqual", "test_algorithmic.TestAlgorithmicEnvInteractions.assertFalse", "test_algorithmic.TestAlgorithmicEnvInteractions.env.step", "test_algorithmic.TestAlgorithmicEnvInteractions.assertEqual", "test_algorithmic.TestAlgorithmicEnvInteractions.assertFalse", "test_algorithmic.TestAlgorithmicEnvInteractions.env.step", "test_algorithmic.TestAlgorithmicEnvInteractions.assertEqual"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.reset", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.step", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.step", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.step", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.step"], ["", "", "", "def", "test_walk_off_the_end", "(", "self", ")", ":", "\n", "        ", "obs", "=", "self", ".", "env", ".", "reset", "(", ")", "\n", "# Walk off the end", "\n", "obs", ",", "r", ",", "done", ",", "_", "=", "self", ".", "env", ".", "step", "(", "[", "self", ".", "LEFT", ",", "0", ",", "0", "]", ")", "\n", "self", ".", "assertEqual", "(", "obs", ",", "self", ".", "env", ".", "base", ")", "\n", "self", ".", "assertEqual", "(", "r", ",", "0", ")", "\n", "self", ".", "assertFalse", "(", "done", ")", "\n", "# Walk further off track", "\n", "obs", ",", "r", ",", "done", ",", "_", "=", "self", ".", "env", ".", "step", "(", "[", "self", ".", "LEFT", ",", "0", ",", "0", "]", ")", "\n", "self", ".", "assertEqual", "(", "obs", ",", "self", ".", "env", ".", "base", ")", "\n", "self", ".", "assertFalse", "(", "done", ")", "\n", "# Return to the first input character", "\n", "obs", ",", "r", ",", "done", ",", "_", "=", "self", ".", "env", ".", "step", "(", "[", "self", ".", "RIGHT", ",", "0", ",", "0", "]", ")", "\n", "self", ".", "assertEqual", "(", "obs", ",", "self", ".", "env", ".", "base", ")", "\n", "self", ".", "assertFalse", "(", "done", ")", "\n", "obs", ",", "r", ",", "done", ",", "_", "=", "self", ".", "env", ".", "step", "(", "[", "self", ".", "RIGHT", ",", "0", ",", "0", "]", ")", "\n", "self", ".", "assertEqual", "(", "obs", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.tests.test_algorithmic.TestAlgorithmicEnvInteractions.test_grid_naviation": [[86, 104], ["environments.mujoco.rand_param_envs.gym.envs.algorithmic.reversed_addition.ReversedAdditionEnv", "test_algorithmic.imprint", "environments.mujoco.rand_param_envs.gym.envs.algorithmic.reversed_addition.ReversedAdditionEnv.reset", "test_algorithmic.TestAlgorithmicEnvInteractions.assertEqual", "environments.mujoco.rand_param_envs.gym.envs.algorithmic.reversed_addition.ReversedAdditionEnv._movement_idx", "environments.mujoco.rand_param_envs.gym.envs.algorithmic.reversed_addition.ReversedAdditionEnv.step", "test_algorithmic.TestAlgorithmicEnvInteractions.assertEqual", "test_algorithmic.TestAlgorithmicEnvInteractions.assertFalse", "test_algorithmic.TestAlgorithmicEnvInteractions.assertEqual"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.tests.test_algorithmic.imprint", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.reset", "home.repos.pwc.inspect_result.Rondorf_BOReL.algorithmic.algorithmic_env.AlgorithmicEnv._movement_idx", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.step"], ["", "def", "test_grid_naviation", "(", "self", ")", ":", "\n", "        ", "env", "=", "alg", ".", "reversed_addition", ".", "ReversedAdditionEnv", "(", "rows", "=", "2", ",", "base", "=", "6", ")", "\n", "N", ",", "S", ",", "E", ",", "W", "=", "[", "env", ".", "_movement_idx", "(", "named_dir", ")", "for", "named_dir", "in", "[", "'up'", ",", "'down'", ",", "'right'", ",", "'left'", "]", "]", "\n", "# Corresponds to a grid that looks like...", "\n", "#       0 1 2", "\n", "#       3 4 5", "\n", "canned", "=", "[", "[", "0", ",", "3", "]", ",", "[", "1", ",", "4", "]", ",", "[", "2", ",", "5", "]", "]", "\n", "imprint", "(", "env", ",", "canned", ")", "\n", "obs", "=", "env", ".", "reset", "(", ")", "\n", "self", ".", "assertEqual", "(", "obs", ",", "0", ")", "\n", "navigation", "=", "[", "\n", "(", "S", ",", "3", ")", ",", "(", "N", ",", "0", ")", ",", "(", "E", ",", "1", ")", ",", "(", "S", ",", "4", ")", ",", "(", "S", ",", "6", ")", ",", "(", "E", ",", "6", ")", ",", "(", "N", ",", "5", ")", ",", "(", "N", ",", "2", ")", ",", "(", "W", ",", "1", ")", "\n", "]", "\n", "for", "(", "movement", ",", "expected_obs", ")", "in", "navigation", ":", "\n", "            ", "obs", ",", "reward", ",", "done", ",", "_", "=", "env", ".", "step", "(", "[", "movement", ",", "0", ",", "0", "]", ")", "\n", "self", ".", "assertEqual", "(", "reward", ",", "0", ")", "\n", "self", ".", "assertFalse", "(", "done", ")", "\n", "self", ".", "assertEqual", "(", "obs", ",", "expected_obs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.tests.test_algorithmic.TestAlgorithmicEnvInteractions.test_grid_success": [[105, 117], ["environments.mujoco.rand_param_envs.gym.envs.algorithmic.reversed_addition.ReversedAdditionEnv", "test_algorithmic.imprint", "environments.mujoco.rand_param_envs.gym.envs.algorithmic.reversed_addition.ReversedAdditionEnv.reset", "test_algorithmic.TestAlgorithmicEnvInteractions.assertEqual", "test_algorithmic.TestAlgorithmicEnvInteractions.assertEqual", "enumerate", "environments.mujoco.rand_param_envs.gym.envs.algorithmic.reversed_addition.ReversedAdditionEnv.step", "test_algorithmic.TestAlgorithmicEnvInteractions.assertGreater", "test_algorithmic.TestAlgorithmicEnvInteractions.assertEqual", "len"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.tests.test_algorithmic.imprint", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.reset", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.step"], ["", "", "def", "test_grid_success", "(", "self", ")", ":", "\n", "        ", "env", "=", "alg", ".", "reversed_addition", ".", "ReversedAdditionEnv", "(", "rows", "=", "2", ",", "base", "=", "3", ")", "\n", "canned", "=", "[", "[", "1", ",", "2", "]", ",", "[", "1", ",", "0", "]", ",", "[", "2", ",", "2", "]", "]", "\n", "imprint", "(", "env", ",", "canned", ")", "\n", "obs", "=", "env", ".", "reset", "(", ")", "\n", "target", "=", "[", "0", ",", "2", ",", "1", ",", "1", "]", "\n", "self", ".", "assertEqual", "(", "env", ".", "target", ",", "target", ")", "\n", "self", ".", "assertEqual", "(", "obs", ",", "1", ")", "\n", "for", "i", ",", "target_digit", "in", "enumerate", "(", "target", ")", ":", "\n", "            ", "obs", ",", "reward", ",", "done", ",", "_", "=", "env", ".", "step", "(", "[", "0", ",", "1", ",", "target_digit", "]", ")", "\n", "self", ".", "assertGreater", "(", "reward", ",", "0", ")", "\n", "self", ".", "assertEqual", "(", "done", ",", "i", "==", "len", "(", "target", ")", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.tests.test_algorithmic.TestAlgorithmicEnvInteractions.test_sane_time_limit": [[118, 126], ["test_algorithmic.TestAlgorithmicEnvInteractions.env.reset", "test_algorithmic.TestAlgorithmicEnvInteractions.assertLess", "range", "test_algorithmic.TestAlgorithmicEnvInteractions.fail", "test_algorithmic.TestAlgorithmicEnvInteractions.env.step"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.reset", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.step"], ["", "", "def", "test_sane_time_limit", "(", "self", ")", ":", "\n", "        ", "obs", "=", "self", ".", "env", ".", "reset", "(", ")", "\n", "self", ".", "assertLess", "(", "self", ".", "env", ".", "time_limit", ",", "100", ")", "\n", "for", "_", "in", "range", "(", "100", ")", ":", "\n", "            ", "obs", ",", "r", ",", "done", ",", "_", "=", "self", ".", "env", ".", "step", "(", "[", "self", ".", "LEFT", ",", "0", ",", "0", "]", ")", "\n", "if", "done", ":", "\n", "                ", "return", "\n", "", "", "self", ".", "fail", "(", "\"Time limit wasn't enforced\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.tests.test_algorithmic.TestAlgorithmicEnvInteractions.test_rendering": [[127, 142], ["test_algorithmic.TestAlgorithmicEnvInteractions.reset", "test_algorithmic.TestAlgorithmicEnvInteractions.assertEqual", "test_algorithmic.TestAlgorithmicEnvInteractions.assertEqual", "test_algorithmic.TestAlgorithmicEnvInteractions.assertEqual", "test_algorithmic.TestAlgorithmicEnvInteractions.assertEqual", "test_algorithmic.TestAlgorithmicEnvInteractions.assertEqual", "test_algorithmic.TestAlgorithmicEnvInteractions.assertEqual", "test_algorithmic.TestAlgorithmicEnvInteractions.ENV_KLS", "test_algorithmic.imprint", "test_algorithmic.TestAlgorithmicEnvInteractions.reset", "test_algorithmic.TestAlgorithmicEnvInteractions.assertEqual", "test_algorithmic.TestAlgorithmicEnvInteractions.assertEqual", "test_algorithmic.TestAlgorithmicEnvInteractions._get_str_obs", "test_algorithmic.TestAlgorithmicEnvInteractions._get_str_obs", "test_algorithmic.TestAlgorithmicEnvInteractions._get_str_obs", "test_algorithmic.TestAlgorithmicEnvInteractions._get_str_obs", "test_algorithmic.TestAlgorithmicEnvInteractions._get_str_target", "test_algorithmic.TestAlgorithmicEnvInteractions._get_str_target", "test_algorithmic.TestAlgorithmicEnvInteractions._get_str_obs", "test_algorithmic.TestAlgorithmicEnvInteractions._get_str_obs"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.reset", "home.repos.pwc.inspect_result.Rondorf_BOReL.tests.test_algorithmic.imprint", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.reset", "home.repos.pwc.inspect_result.Rondorf_BOReL.algorithmic.algorithmic_env.AlgorithmicEnv._get_str_obs", "home.repos.pwc.inspect_result.Rondorf_BOReL.algorithmic.algorithmic_env.AlgorithmicEnv._get_str_obs", "home.repos.pwc.inspect_result.Rondorf_BOReL.algorithmic.algorithmic_env.AlgorithmicEnv._get_str_obs", "home.repos.pwc.inspect_result.Rondorf_BOReL.algorithmic.algorithmic_env.AlgorithmicEnv._get_str_obs", "home.repos.pwc.inspect_result.Rondorf_BOReL.algorithmic.algorithmic_env.AlgorithmicEnv._get_str_target", "home.repos.pwc.inspect_result.Rondorf_BOReL.algorithmic.algorithmic_env.AlgorithmicEnv._get_str_target", "home.repos.pwc.inspect_result.Rondorf_BOReL.algorithmic.algorithmic_env.AlgorithmicEnv._get_str_obs", "home.repos.pwc.inspect_result.Rondorf_BOReL.algorithmic.algorithmic_env.AlgorithmicEnv._get_str_obs"], ["", "def", "test_rendering", "(", "self", ")", ":", "\n", "        ", "env", "=", "self", ".", "env", "\n", "obs", "=", "env", ".", "reset", "(", ")", "\n", "self", ".", "assertEqual", "(", "env", ".", "_get_str_obs", "(", ")", ",", "'A'", ")", "\n", "self", ".", "assertEqual", "(", "env", ".", "_get_str_obs", "(", "1", ")", ",", "'B'", ")", "\n", "self", ".", "assertEqual", "(", "env", ".", "_get_str_obs", "(", "-", "1", ")", ",", "' '", ")", "\n", "self", ".", "assertEqual", "(", "env", ".", "_get_str_obs", "(", "2", ")", ",", "' '", ")", "\n", "self", ".", "assertEqual", "(", "env", ".", "_get_str_target", "(", "0", ")", ",", "'A'", ")", "\n", "self", ".", "assertEqual", "(", "env", ".", "_get_str_target", "(", "1", ")", ",", "'B'", ")", "\n", "# Test numerical alphabet rendering", "\n", "env", "=", "self", ".", "ENV_KLS", "(", "base", "=", "3", ",", "chars", "=", "False", ")", "\n", "imprint", "(", "env", ",", "self", ".", "CANNED_INPUT", ")", "\n", "env", ".", "reset", "(", ")", "\n", "self", ".", "assertEqual", "(", "env", ".", "_get_str_obs", "(", ")", ",", "'0'", ")", "\n", "self", ".", "assertEqual", "(", "env", ".", "_get_str_obs", "(", "1", ")", ",", "'1'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.tests.test_algorithmic.TestTargets.test_reverse_target": [[146, 158], ["environments.mujoco.rand_param_envs.gym.envs.algorithmic.reverse.ReverseEnv", "environments.mujoco.rand_param_envs.gym.envs.algorithmic.reverse.ReverseEnv.target_from_input_data", "test_algorithmic.TestTargets.assertEqual"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.algorithmic.repeat_copy.RepeatCopyEnv.target_from_input_data"], ["def", "test_reverse_target", "(", "self", ")", ":", "\n", "        ", "input_expected", "=", "[", "\n", "(", "[", "0", "]", ",", "[", "0", "]", ")", ",", "\n", "(", "[", "0", ",", "1", "]", ",", "[", "1", ",", "0", "]", ")", ",", "\n", "(", "[", "1", ",", "1", "]", ",", "[", "1", ",", "1", "]", ")", ",", "\n", "(", "[", "1", ",", "0", ",", "1", "]", ",", "[", "1", ",", "0", ",", "1", "]", ")", ",", "\n", "(", "[", "0", ",", "0", ",", "1", ",", "1", "]", ",", "[", "1", ",", "1", ",", "0", ",", "0", "]", ")", ",", "\n", "]", "\n", "env", "=", "alg", ".", "reverse", ".", "ReverseEnv", "(", ")", "\n", "for", "input_arr", ",", "expected", "in", "input_expected", ":", "\n", "            ", "target", "=", "env", ".", "target_from_input_data", "(", "input_arr", ")", "\n", "self", ".", "assertEqual", "(", "target", ",", "expected", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.tests.test_algorithmic.TestTargets.test_reversed_addition_target": [[159, 168], ["environments.mujoco.rand_param_envs.gym.envs.algorithmic.reversed_addition.ReversedAdditionEnv", "test_algorithmic.TestTargets.assertEqual", "environments.mujoco.rand_param_envs.gym.envs.algorithmic.reversed_addition.ReversedAdditionEnv.target_from_input_data"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.algorithmic.repeat_copy.RepeatCopyEnv.target_from_input_data"], ["", "", "def", "test_reversed_addition_target", "(", "self", ")", ":", "\n", "        ", "env", "=", "alg", ".", "reversed_addition", ".", "ReversedAdditionEnv", "(", "base", "=", "3", ")", "\n", "input_expected", "=", "[", "\n", "(", "[", "[", "1", ",", "1", "]", ",", "[", "1", ",", "1", "]", "]", ",", "[", "2", ",", "2", "]", ")", ",", "\n", "(", "[", "[", "2", ",", "2", "]", ",", "[", "0", ",", "1", "]", "]", ",", "[", "1", ",", "2", "]", ")", ",", "\n", "(", "[", "[", "2", ",", "1", "]", ",", "[", "1", ",", "1", "]", ",", "[", "1", ",", "1", "]", ",", "[", "1", ",", "0", "]", "]", ",", "[", "0", ",", "0", ",", "0", ",", "2", "]", ")", ",", "\n", "]", "\n", "for", "(", "input_grid", ",", "expected_target", ")", "in", "input_expected", ":", "\n", "            ", "self", ".", "assertEqual", "(", "env", ".", "target_from_input_data", "(", "input_grid", ")", ",", "expected_target", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.tests.test_algorithmic.TestTargets.test_reversed_addition_3rows": [[169, 177], ["environments.mujoco.rand_param_envs.gym.envs.algorithmic.reversed_addition.ReversedAdditionEnv", "test_algorithmic.TestTargets.assertEqual", "environments.mujoco.rand_param_envs.gym.envs.algorithmic.reversed_addition.ReversedAdditionEnv.target_from_input_data"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.algorithmic.repeat_copy.RepeatCopyEnv.target_from_input_data"], ["", "", "def", "test_reversed_addition_3rows", "(", "self", ")", ":", "\n", "        ", "env", "=", "alg", ".", "reversed_addition", ".", "ReversedAdditionEnv", "(", "base", "=", "3", ",", "rows", "=", "3", ")", "\n", "input_expected", "=", "[", "\n", "(", "[", "[", "1", ",", "1", ",", "0", "]", ",", "[", "0", ",", "1", ",", "1", "]", "]", ",", "[", "2", ",", "2", "]", ")", ",", "\n", "(", "[", "[", "1", ",", "1", ",", "2", "]", ",", "[", "0", ",", "1", ",", "1", "]", "]", ",", "[", "1", ",", "0", ",", "1", "]", ")", ",", "\n", "]", "\n", "for", "(", "input_grid", ",", "expected_target", ")", "in", "input_expected", ":", "\n", "            ", "self", ".", "assertEqual", "(", "env", ".", "target_from_input_data", "(", "input_grid", ")", ",", "expected_target", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.tests.test_algorithmic.TestTargets.test_copy_target": [[178, 181], ["environments.mujoco.rand_param_envs.gym.envs.algorithmic.copy_.CopyEnv", "test_algorithmic.TestTargets.assertEqual", "environments.mujoco.rand_param_envs.gym.envs.algorithmic.copy_.CopyEnv.target_from_input_data"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.algorithmic.repeat_copy.RepeatCopyEnv.target_from_input_data"], ["", "", "def", "test_copy_target", "(", "self", ")", ":", "\n", "        ", "env", "=", "alg", ".", "copy_", ".", "CopyEnv", "(", ")", "\n", "self", ".", "assertEqual", "(", "env", ".", "target_from_input_data", "(", "[", "0", ",", "1", ",", "2", "]", ")", ",", "[", "0", ",", "1", ",", "2", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.tests.test_algorithmic.TestTargets.test_duplicated_input_target": [[182, 185], ["environments.mujoco.rand_param_envs.gym.envs.algorithmic.duplicated_input.DuplicatedInputEnv", "test_algorithmic.TestTargets.assertEqual", "environments.mujoco.rand_param_envs.gym.envs.algorithmic.duplicated_input.DuplicatedInputEnv.target_from_input_data"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.algorithmic.repeat_copy.RepeatCopyEnv.target_from_input_data"], ["", "def", "test_duplicated_input_target", "(", "self", ")", ":", "\n", "        ", "env", "=", "alg", ".", "duplicated_input", ".", "DuplicatedInputEnv", "(", "duplication", "=", "2", ")", "\n", "self", ".", "assertEqual", "(", "env", ".", "target_from_input_data", "(", "[", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "1", "]", ")", ",", "[", "0", ",", "0", ",", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.tests.test_algorithmic.TestTargets.test_repeat_copy_target": [[186, 189], ["environments.mujoco.rand_param_envs.gym.envs.algorithmic.repeat_copy.RepeatCopyEnv", "test_algorithmic.TestTargets.assertEqual", "environments.mujoco.rand_param_envs.gym.envs.algorithmic.repeat_copy.RepeatCopyEnv.target_from_input_data"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.algorithmic.repeat_copy.RepeatCopyEnv.target_from_input_data"], ["", "def", "test_repeat_copy_target", "(", "self", ")", ":", "\n", "        ", "env", "=", "alg", ".", "repeat_copy", ".", "RepeatCopyEnv", "(", ")", "\n", "self", ".", "assertEqual", "(", "env", ".", "target_from_input_data", "(", "[", "0", ",", "1", ",", "2", "]", ")", ",", "[", "0", ",", "1", ",", "2", ",", "2", ",", "1", ",", "0", ",", "0", ",", "1", ",", "2", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.tests.test_algorithmic.TestInputGeneration.test_tape_inputs": [[193, 203], ["env_kls", "range", "env_kls.generate_input_data", "test_algorithmic.TestInputGeneration.assertTrue", "test_algorithmic.TestInputGeneration.assertLessEqual", "all", "len"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.algorithmic.algorithmic_env.GridAlgorithmicEnv.generate_input_data", "home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.ListableAPIResource.all"], ["def", "test_tape_inputs", "(", "self", ")", ":", "\n", "        ", "for", "env_kls", "in", "ALL_TAPE_ENVS", ":", "\n", "            ", "env", "=", "env_kls", "(", ")", "\n", "for", "size", "in", "range", "(", "2", ",", "5", ")", ":", "\n", "                ", "input_tape", "=", "env", ".", "generate_input_data", "(", "size", ")", "\n", "self", ".", "assertTrue", "(", "all", "(", "0", "<=", "x", "<=", "env", ".", "base", "for", "x", "in", "input_tape", ")", ",", "\n", "\"Invalid input tape from env {}: {}\"", ".", "format", "(", "env_kls", ",", "input_tape", ")", ")", "\n", "# DuplicatedInput needs to generate inputs with even length,", "\n", "# so it may be short one", "\n", "self", ".", "assertLessEqual", "(", "len", "(", "input_tape", ")", ",", "size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.tests.test_algorithmic.TestInputGeneration.test_grid_inputs": [[204, 214], ["env_kls", "range", "env_kls.generate_input_data", "test_algorithmic.TestInputGeneration.assertEqual", "test_algorithmic.TestInputGeneration.assertTrue", "test_algorithmic.TestInputGeneration.assertTrue", "len", "all", "all", "len"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.algorithmic.algorithmic_env.GridAlgorithmicEnv.generate_input_data", "home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.ListableAPIResource.all", "home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.ListableAPIResource.all"], ["", "", "", "def", "test_grid_inputs", "(", "self", ")", ":", "\n", "        ", "for", "env_kls", "in", "ALL_GRID_ENVS", ":", "\n", "            ", "env", "=", "env_kls", "(", ")", "\n", "for", "size", "in", "range", "(", "2", ",", "5", ")", ":", "\n", "                ", "input_grid", "=", "env", ".", "generate_input_data", "(", "size", ")", "\n", "# Should get \"size\" sublists, each of length self.rows (not the", "\n", "# opposite, as you might expect)", "\n", "self", ".", "assertEqual", "(", "len", "(", "input_grid", ")", ",", "size", ")", "\n", "self", ".", "assertTrue", "(", "all", "(", "len", "(", "col", ")", "==", "env", ".", "rows", "for", "col", "in", "input_grid", ")", ")", "\n", "self", ".", "assertTrue", "(", "all", "(", "0", "<=", "x", "<=", "env", ".", "base", "for", "x", "in", "input_grid", "[", "0", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.tests.test_algorithmic.TestInputGeneration.test_duplicatedinput_inputs": [[215, 237], ["environments.mujoco.rand_param_envs.gym.envs.algorithmic.duplicated_input.DuplicatedInputEnv", "environments.mujoco.rand_param_envs.gym.envs.algorithmic.duplicated_input.DuplicatedInputEnv.generate_input_data", "test_algorithmic.TestInputGeneration.assertEqual", "test_algorithmic.TestInputGeneration.assertEqual", "test_algorithmic.TestInputGeneration.assertEqual", "environments.mujoco.rand_param_envs.gym.envs.algorithmic.duplicated_input.DuplicatedInputEnv.generate_input_data", "test_algorithmic.TestInputGeneration.assertEqual", "test_algorithmic.TestInputGeneration.assertEqual", "environments.mujoco.rand_param_envs.gym.envs.algorithmic.duplicated_input.DuplicatedInputEnv.generate_input_data", "test_algorithmic.TestInputGeneration.assertEqual", "test_algorithmic.TestInputGeneration.assertEqual", "environments.mujoco.rand_param_envs.gym.envs.algorithmic.duplicated_input.DuplicatedInputEnv", "environments.mujoco.rand_param_envs.gym.envs.algorithmic.duplicated_input.DuplicatedInputEnv.generate_input_data", "test_algorithmic.TestInputGeneration.assertEqual", "test_algorithmic.TestInputGeneration.assertEqual", "test_algorithmic.TestInputGeneration.assertEqual", "len", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.algorithmic.algorithmic_env.GridAlgorithmicEnv.generate_input_data", "home.repos.pwc.inspect_result.Rondorf_BOReL.algorithmic.algorithmic_env.GridAlgorithmicEnv.generate_input_data", "home.repos.pwc.inspect_result.Rondorf_BOReL.algorithmic.algorithmic_env.GridAlgorithmicEnv.generate_input_data", "home.repos.pwc.inspect_result.Rondorf_BOReL.algorithmic.algorithmic_env.GridAlgorithmicEnv.generate_input_data"], ["", "", "", "def", "test_duplicatedinput_inputs", "(", "self", ")", ":", "\n", "        ", "\"\"\"The duplicated_input env needs to generate strings with the appropriate\n        amount of repetiion.\"\"\"", "\n", "env", "=", "alg", ".", "duplicated_input", ".", "DuplicatedInputEnv", "(", "duplication", "=", "2", ")", "\n", "input_tape", "=", "env", ".", "generate_input_data", "(", "4", ")", "\n", "self", ".", "assertEqual", "(", "len", "(", "input_tape", ")", ",", "4", ")", "\n", "self", ".", "assertEqual", "(", "input_tape", "[", "0", "]", ",", "input_tape", "[", "1", "]", ")", "\n", "self", ".", "assertEqual", "(", "input_tape", "[", "2", "]", ",", "input_tape", "[", "3", "]", ")", "\n", "# If requested input size isn't a multiple of duplication, go lower", "\n", "input_tape", "=", "env", ".", "generate_input_data", "(", "3", ")", "\n", "self", ".", "assertEqual", "(", "len", "(", "input_tape", ")", ",", "2", ")", "\n", "self", ".", "assertEqual", "(", "input_tape", "[", "0", "]", ",", "input_tape", "[", "1", "]", ")", "\n", "# If requested input size is *less than* duplication, go up", "\n", "input_tape", "=", "env", ".", "generate_input_data", "(", "1", ")", "\n", "self", ".", "assertEqual", "(", "len", "(", "input_tape", ")", ",", "2", ")", "\n", "self", ".", "assertEqual", "(", "input_tape", "[", "0", "]", ",", "input_tape", "[", "1", "]", ")", "\n", "\n", "env", "=", "alg", ".", "duplicated_input", ".", "DuplicatedInputEnv", "(", "duplication", "=", "3", ")", "\n", "input_tape", "=", "env", ".", "generate_input_data", "(", "6", ")", "\n", "self", ".", "assertEqual", "(", "len", "(", "input_tape", ")", ",", "6", ")", "\n", "self", ".", "assertEqual", "(", "input_tape", "[", "0", "]", ",", "input_tape", "[", "1", "]", ")", "\n", "self", ".", "assertEqual", "(", "input_tape", "[", "1", "]", ",", "input_tape", "[", "2", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.tests.test_algorithmic.imprint": [[17, 22], ["None"], "function", ["None"], ["def", "imprint", "(", "env", ",", "input_arr", ")", ":", "\n", "    ", "\"\"\"Monkey-patch the given environment so that when reset() is called, the\n    input tape/grid will be set to the given data, rather than being randomly\n    generated.\"\"\"", "\n", "env", ".", "generate_input_data", "=", "lambda", "_", ":", "input_arr", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.tests.test_evaluation.EvaluationTest.test_create_evaluation": [[5, 16], ["test_evaluation.EvaluationTest.mock_response", "environments.mujoco.rand_param_envs.gym.scoreboard.Evaluation.create", "isinstance", "test_evaluation.EvaluationTest.requestor_mock.request.assert_called_with", "environments.mujoco.rand_param_envs.gym.scoreboard.client.tests.helper.TestData.evaluation_response"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.tests.helper.APITestCase.mock_response", "home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.FileUpload.create", "home.repos.pwc.inspect_result.Rondorf_BOReL.tests.helper.TestData.evaluation_response"], ["    ", "def", "test_create_evaluation", "(", "self", ")", ":", "\n", "        ", "self", ".", "mock_response", "(", "helper", ".", "TestData", ".", "evaluation_response", "(", ")", ")", "\n", "\n", "evaluation", "=", "scoreboard", ".", "Evaluation", ".", "create", "(", ")", "\n", "assert", "isinstance", "(", "evaluation", ",", "scoreboard", ".", "Evaluation", ")", "\n", "\n", "self", ".", "requestor_mock", ".", "request", ".", "assert_called_with", "(", "\n", "'post'", ",", "\n", "'/v1/evaluations'", ",", "\n", "{", "}", ",", "\n", "None", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.tests.helper.APITestCase.setUp": [[10, 15], ["super().setUp", "mock.patch", "helper.APITestCase.requestor_patcher.start"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.tests.helper.APITestCase.setUp", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjviewer.MjViewer.start"], ["    ", "def", "setUp", "(", "self", ")", ":", "\n", "        ", "super", "(", "APITestCase", ",", "self", ")", ".", "setUp", "(", ")", "\n", "self", ".", "requestor_patcher", "=", "mock", ".", "patch", "(", "'gym.scoreboard.client.api_requestor.APIRequestor'", ")", "\n", "requestor_class_mock", "=", "self", ".", "requestor_patcher", ".", "start", "(", ")", "\n", "self", ".", "requestor_mock", "=", "requestor_class_mock", ".", "return_value", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.tests.helper.APITestCase.mock_response": [[16, 18], ["mock.Mock"], "methods", ["None"], ["", "def", "mock_response", "(", "self", ",", "res", ")", ":", "\n", "        ", "self", ".", "requestor_mock", ".", "request", "=", "mock", ".", "Mock", "(", "return_value", "=", "(", "res", ",", "'reskey'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.tests.helper.TestData.file_upload_response": [[20, 25], ["helper.fake_id"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.tests.helper.fake_id"], ["    ", "@", "classmethod", "\n", "def", "file_upload_response", "(", "cls", ")", ":", "\n", "        ", "return", "{", "\n", "'id'", ":", "fake_id", "(", "'file'", ")", ",", "\n", "'object'", ":", "'file'", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.tests.helper.TestData.evaluation_response": [[27, 32], ["helper.fake_id"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.tests.helper.fake_id"], ["", "@", "classmethod", "\n", "def", "evaluation_response", "(", "cls", ")", ":", "\n", "        ", "return", "{", "\n", "'id'", ":", "fake_id", "(", "'file'", ")", ",", "\n", "'object'", ":", "'evaluation'", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.tests.helper.fake_id": [[5, 8], ["str", "a.isalnum", "uuid.uuid4"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.isalnum"], ["def", "fake_id", "(", "prefix", ")", ":", "\n", "    ", "entropy", "=", "''", ".", "join", "(", "[", "a", "for", "a", "in", "str", "(", "uuid", ".", "uuid4", "(", ")", ")", "if", "a", ".", "isalnum", "(", ")", "]", ")", "\n", "return", "'{}_{}'", ".", "format", "(", "prefix", ",", "entropy", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.tests.test_file_upload.FileUploadTest.test_create_file_upload": [[5, 15], ["test_file_upload.FileUploadTest.mock_response", "environments.mujoco.rand_param_envs.gym.scoreboard.FileUpload.create", "isinstance", "test_file_upload.FileUploadTest.requestor_mock.request.assert_called_with", "environments.mujoco.rand_param_envs.gym.scoreboard.client.tests.helper.TestData.file_upload_response"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.tests.helper.APITestCase.mock_response", "home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.FileUpload.create", "home.repos.pwc.inspect_result.Rondorf_BOReL.tests.helper.TestData.file_upload_response"], ["    ", "def", "test_create_file_upload", "(", "self", ")", ":", "\n", "        ", "self", ".", "mock_response", "(", "helper", ".", "TestData", ".", "file_upload_response", "(", ")", ")", "\n", "\n", "file_upload", "=", "scoreboard", ".", "FileUpload", ".", "create", "(", ")", "\n", "assert", "isinstance", "(", "file_upload", ",", "scoreboard", ".", "FileUpload", ")", ",", "'File upload is: {!r}'", ".", "format", "(", "file_upload", ")", "\n", "\n", "self", ".", "requestor_mock", ".", "request", ".", "assert_called_with", "(", "\n", "'post'", ",", "\n", "'/v1/files'", ",", "\n", "params", "=", "{", "}", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.tests.test_scoring._is_close": [[23, 25], ["numpy.all", "numpy.isclose"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.ListableAPIResource.all"], ["def", "_is_close", "(", "x", ",", "target", ")", ":", "\n", "    ", "return", "np", ".", "all", "(", "np", ".", "isclose", "(", "x", ",", "target", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.tests.test_scoring._eq_list_of_arrays": [[26, 28], ["numpy.all", "numpy.all", "zip", "len", "len"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.ListableAPIResource.all", "home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.ListableAPIResource.all"], ["", "def", "_eq_list_of_arrays", "(", "x", ",", "y", ")", ":", "\n", "    ", "return", "np", ".", "all", "(", "[", "len", "(", "a", ")", "==", "len", "(", "b", ")", "and", "np", ".", "all", "(", "a", "==", "b", ")", "for", "a", ",", "b", "in", "zip", "(", "x", ",", "y", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.tests.test_scoring._assert_evaluation_result": [[29, 39], ["test_scoring._is_close", "test_scoring._eq_list_of_arrays", "test_scoring._eq_list_of_arrays", "test_scoring._eq_list_of_arrays"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.tests.test_scoring._is_close", "home.repos.pwc.inspect_result.Rondorf_BOReL.tests.test_scoring._eq_list_of_arrays", "home.repos.pwc.inspect_result.Rondorf_BOReL.tests.test_scoring._eq_list_of_arrays", "home.repos.pwc.inspect_result.Rondorf_BOReL.tests.test_scoring._eq_list_of_arrays"], ["", "def", "_assert_evaluation_result", "(", "result", ",", "score", "=", "None", ",", "solves", "=", "None", ",", "rewards", "=", "None", ",", "lengths", "=", "None", ",", "timestamps", "=", "None", ")", ":", "\n", "    ", "debug_str", "=", "\"score_evaluation={}\"", ".", "format", "(", "result", ")", "\n", "if", "score", "is", "not", "None", ":", "\n", "        ", "assert", "_is_close", "(", "result", "[", "'scores'", "]", ",", "score", ")", ",", "debug_str", "\n", "", "if", "solves", "is", "not", "None", ":", "\n", "        ", "assert", "_eq_list_of_arrays", "(", "result", "[", "'solves'", "]", ",", "solves", ")", ",", "debug_str", "\n", "", "if", "rewards", "is", "not", "None", ":", "\n", "        ", "assert", "_eq_list_of_arrays", "(", "result", "[", "'rewards'", "]", ",", "rewards", ")", ",", "debug_str", "\n", "", "if", "lengths", "is", "not", "None", ":", "\n", "        ", "assert", "_eq_list_of_arrays", "(", "result", "[", "'lengths'", "]", ",", "lengths", ")", ",", "debug_str", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.tests.test_scoring._assert_benchmark_result": [[40, 46], ["test_scoring._is_close", "numpy.all"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.tests.test_scoring._is_close", "home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.ListableAPIResource.all"], ["", "", "def", "_assert_benchmark_result", "(", "result", ",", "score", "=", "None", ",", "solves", "=", "None", ",", "summed_training_seconds", "=", "None", ",", "start_to_finish_seconds", "=", "None", ")", ":", "\n", "    ", "debug_str", "=", "\"benchmark_result={}\"", ".", "format", "(", "result", ")", "\n", "if", "score", "is", "not", "None", ":", "\n", "        ", "assert", "_is_close", "(", "result", "[", "'scores'", "]", ",", "score", ")", ",", "debug_str", "\n", "", "if", "solves", "is", "not", "None", ":", "\n", "        ", "assert", "np", ".", "all", "(", "result", "[", "'solves'", "]", ")", "==", "solves", ",", "debug_str", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.tests.test_scoring._assert_benchmark_score": [[47, 59], ["test_scoring._is_close", "test_scoring._is_close", "test_scoring._is_close", "test_scoring._is_close"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.tests.test_scoring._is_close", "home.repos.pwc.inspect_result.Rondorf_BOReL.tests.test_scoring._is_close", "home.repos.pwc.inspect_result.Rondorf_BOReL.tests.test_scoring._is_close", "home.repos.pwc.inspect_result.Rondorf_BOReL.tests.test_scoring._is_close"], ["", "", "def", "_assert_benchmark_score", "(", "scores", ",", "score", "=", "None", ",", "num_envs_solved", "=", "None", ",", "summed_training_seconds", "=", "None", ",", "summed_task_wall_time", "=", "None", ",", "start_to_finish_seconds", "=", "None", ")", ":", "\n", "    ", "debug_str", "=", "\"scores={} score={} num_envs_solved={} summed_training_seconds={} summed_wall_task_time={} start_to_finish_seconds={}\"", ".", "format", "(", "scores", ",", "score", ",", "num_envs_solved", ",", "summed_training_seconds", ",", "summed_task_wall_time", ",", "start_to_finish_seconds", ")", "\n", "if", "score", "is", "not", "None", ":", "\n", "        ", "assert", "_is_close", "(", "scores", "[", "'score'", "]", ",", "score", ")", ",", "debug_str", "\n", "", "if", "num_envs_solved", "is", "not", "None", ":", "\n", "        ", "assert", "scores", "[", "'num_envs_solved'", "]", "==", "num_envs_solved", ",", "debug_str", "\n", "", "if", "summed_training_seconds", "is", "not", "None", ":", "\n", "        ", "assert", "_is_close", "(", "scores", "[", "'summed_training_seconds'", "]", ",", "summed_training_seconds", ")", ",", "debug_str", "\n", "", "if", "summed_task_wall_time", "is", "not", "None", ":", "\n", "        ", "assert", "_is_close", "(", "scores", "[", "'summed_task_wall_time'", "]", ",", "summed_task_wall_time", ")", ",", "debug_str", "\n", "", "if", "start_to_finish_seconds", "is", "not", "None", ":", "\n", "        ", "assert", "_is_close", "(", "scores", "[", "'start_to_finish_seconds'", "]", ",", "start_to_finish_seconds", ")", ",", "debug_str", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.tests.test_scoring._benchmark_result_helper": [[60, 72], ["dict().items", "benchmark.score_evaluation", "kwargs.setdefault", "dict"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.benchmarks.scoring.BenchmarkScoringRule.score_evaluation"], ["", "", "def", "_benchmark_result_helper", "(", "benchmark", ",", "**", "kwargs", ")", ":", "\n", "    ", "for", "k", ",", "defval", "in", "dict", "(", "\n", "env_id", "=", "'CartPole-v0'", ",", "\n", "data_sources", "=", "[", "0", "]", ",", "\n", "initial_reset_timestamps", "=", "[", "1", "]", ",", "\n", "episode_lengths", "=", "[", "1", "]", ",", "\n", "episode_rewards", "=", "[", "1", "]", ",", "\n", "episode_types", "=", "[", "'t'", "]", ",", "\n", "timestamps", "=", "[", "2", "]", ")", ".", "items", "(", ")", ":", "\n", "        ", "kwargs", ".", "setdefault", "(", "k", ",", "defval", ")", "\n", "\n", "", "return", "benchmark", ".", "score_evaluation", "(", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.tests.test_scoring.test_clip_average_evaluation_scoring": [[73, 91], ["environments.mujoco.rand_param_envs.gym.benchmarks.registration.Benchmark", "test_scoring._benchmark_result_helper", "test_scoring._assert_benchmark_result", "test_scoring._benchmark_result_helper", "test_scoring._assert_benchmark_result", "environments.mujoco.rand_param_envs.gym.benchmarks.scoring.ClipTo01ThenAverage"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.tests.test_scoring._benchmark_result_helper", "home.repos.pwc.inspect_result.Rondorf_BOReL.tests.test_scoring._assert_benchmark_result", "home.repos.pwc.inspect_result.Rondorf_BOReL.tests.test_scoring._benchmark_result_helper", "home.repos.pwc.inspect_result.Rondorf_BOReL.tests.test_scoring._assert_benchmark_result"], ["", "def", "test_clip_average_evaluation_scoring", "(", ")", ":", "\n", "    ", "benchmark", "=", "registration", ".", "Benchmark", "(", "\n", "id", "=", "'TestBenchmark-v0'", ",", "\n", "scorer", "=", "scoring", ".", "ClipTo01ThenAverage", "(", "num_episodes", "=", "1", ")", ",", "\n", "tasks", "=", "[", "\n", "{", "'env_id'", ":", "'CartPole-v0'", ",", "\n", "'trials'", ":", "1", ",", "\n", "'max_timesteps'", ":", "5", ",", "\n", "}", ",", "\n", "]", "\n", ")", "\n", "# simple scoring", "\n", "benchmark_result", "=", "_benchmark_result_helper", "(", "benchmark", ")", "\n", "_assert_benchmark_result", "(", "benchmark_result", ",", "score", "=", "0.01", ")", "\n", "\n", "# test a successful run", "\n", "benchmark_result", "=", "_benchmark_result_helper", "(", "benchmark", ",", "episode_rewards", "=", "[", "100", ",", "100", "]", ",", "episode_lengths", "=", "[", "1", ",", "1", "]", ")", "\n", "_assert_benchmark_result", "(", "benchmark_result", ",", "score", "=", "1.0", ",", "solves", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.tests.test_scoring.test_clip_average_evaluation_not_enough_rewards": [[92, 110], ["environments.mujoco.rand_param_envs.gym.benchmarks.registration.Benchmark", "test_scoring._benchmark_result_helper", "test_scoring._assert_evaluation_result", "environments.mujoco.rand_param_envs.gym.benchmarks.scoring.ClipTo01ThenAverage", "numpy.array", "numpy.array"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.tests.test_scoring._benchmark_result_helper", "home.repos.pwc.inspect_result.Rondorf_BOReL.tests.test_scoring._assert_evaluation_result"], ["", "def", "test_clip_average_evaluation_not_enough_rewards", "(", ")", ":", "\n", "    ", "benchmark", "=", "registration", ".", "Benchmark", "(", "\n", "id", "=", "'TestBenchmark-v0'", ",", "\n", "scorer", "=", "scoring", ".", "ClipTo01ThenAverage", "(", "num_episodes", "=", "2", ")", ",", "\n", "tasks", "=", "[", "\n", "{", "'env_id'", ":", "'CartPole-v0'", ",", "\n", "'trials'", ":", "1", ",", "\n", "'max_timesteps'", ":", "5", ",", "\n", "}", ",", "\n", "]", "\n", ")", "\n", "# simple scoring", "\n", "benchmark_result", "=", "_benchmark_result_helper", "(", "benchmark", ")", "\n", "_assert_evaluation_result", "(", "\n", "benchmark_result", ",", "\n", "score", "=", "0.005", ",", "\n", "rewards", "=", "[", "np", ".", "array", "(", "[", "1", ",", "0", "]", ")", "]", ",", "\n", "lengths", "=", "[", "np", ".", "array", "(", "[", "1", ",", "0", "]", ")", "]", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.tests.test_scoring.test_clip_average_max_timesteps": [[112, 130], ["environments.mujoco.rand_param_envs.gym.benchmarks.registration.Benchmark", "test_scoring._benchmark_result_helper", "test_scoring._assert_benchmark_result", "test_scoring._benchmark_result_helper", "test_scoring._assert_benchmark_result", "environments.mujoco.rand_param_envs.gym.benchmarks.scoring.ClipTo01ThenAverage"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.tests.test_scoring._benchmark_result_helper", "home.repos.pwc.inspect_result.Rondorf_BOReL.tests.test_scoring._assert_benchmark_result", "home.repos.pwc.inspect_result.Rondorf_BOReL.tests.test_scoring._benchmark_result_helper", "home.repos.pwc.inspect_result.Rondorf_BOReL.tests.test_scoring._assert_benchmark_result"], ["", "def", "test_clip_average_max_timesteps", "(", ")", ":", "\n", "    ", "benchmark", "=", "registration", ".", "Benchmark", "(", "\n", "id", "=", "'TestBenchmark-v0'", ",", "\n", "scorer", "=", "scoring", ".", "ClipTo01ThenAverage", "(", "num_episodes", "=", "2", ")", ",", "\n", "tasks", "=", "[", "\n", "{", "'env_id'", ":", "'CartPole-v0'", ",", "\n", "'trials'", ":", "1", ",", "\n", "'max_timesteps'", ":", "2", ",", "\n", "}", ",", "\n", "]", "\n", ")", "\n", "\n", "benchmark_result", "=", "_benchmark_result_helper", "(", "benchmark", ",", "data_sources", "=", "[", "0", ",", "0", "]", ",", "episode_lengths", "=", "[", "1", ",", "1", "]", ",", "episode_rewards", "=", "[", "1", ",", "1", "]", ",", "episode_types", "=", "[", "'t'", ",", "'t'", "]", ",", "timestamps", "=", "[", "2", ",", "3", "]", ")", "\n", "_assert_benchmark_result", "(", "benchmark_result", ",", "score", "=", "0.01", ")", "\n", "\n", "# make sure we only include the first result because of timesteps", "\n", "benchmark_result", "=", "_benchmark_result_helper", "(", "benchmark", ",", "data_sources", "=", "[", "0", ",", "0", ",", "0", "]", ",", "episode_lengths", "=", "[", "1", ",", "100", ",", "100", "]", ",", "episode_rewards", "=", "[", "1", ",", "100", ",", "100", "]", ",", "episode_types", "=", "[", "'t'", ",", "'t'", ",", "'t'", "]", ",", "timestamps", "=", "[", "2", ",", "102", ",", "202", "]", ")", "\n", "_assert_benchmark_result", "(", "benchmark_result", ",", "score", "=", "0.005", ",", "solves", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.tests.test_scoring.test_clip_average_max_seconds": [[131, 149], ["environments.mujoco.rand_param_envs.gym.benchmarks.registration.Benchmark", "test_scoring._benchmark_result_helper", "test_scoring._assert_benchmark_result", "test_scoring._benchmark_result_helper", "test_scoring._assert_benchmark_result", "environments.mujoco.rand_param_envs.gym.benchmarks.scoring.ClipTo01ThenAverage"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.tests.test_scoring._benchmark_result_helper", "home.repos.pwc.inspect_result.Rondorf_BOReL.tests.test_scoring._assert_benchmark_result", "home.repos.pwc.inspect_result.Rondorf_BOReL.tests.test_scoring._benchmark_result_helper", "home.repos.pwc.inspect_result.Rondorf_BOReL.tests.test_scoring._assert_benchmark_result"], ["", "def", "test_clip_average_max_seconds", "(", ")", ":", "\n", "    ", "benchmark", "=", "registration", ".", "Benchmark", "(", "\n", "id", "=", "'TestBenchmark-v0'", ",", "\n", "scorer", "=", "scoring", ".", "ClipTo01ThenAverage", "(", "num_episodes", "=", "2", ")", ",", "\n", "tasks", "=", "[", "\n", "{", "'env_id'", ":", "'CartPole-v0'", ",", "\n", "'trials'", ":", "1", ",", "\n", "'max_seconds'", ":", "1", ",", "\n", "}", ",", "\n", "]", "\n", ")", "\n", "\n", "benchmark_result", "=", "_benchmark_result_helper", "(", "benchmark", ",", "data_sources", "=", "[", "0", ",", "0", "]", ",", "episode_lengths", "=", "[", "100", ",", "100", "]", ",", "episode_rewards", "=", "[", "0", ",", "100", "]", ",", "episode_types", "=", "[", "'t'", ",", "'t'", "]", ",", "timestamps", "=", "[", "1.5", ",", "2", "]", ")", "\n", "_assert_benchmark_result", "(", "benchmark_result", ",", "score", "=", "0.5", ")", "\n", "\n", "# make sure we only include the first result because of wall clock time", "\n", "benchmark_result", "=", "_benchmark_result_helper", "(", "benchmark", ",", "data_sources", "=", "[", "0", ",", "0", ",", "0", "]", ",", "episode_lengths", "=", "[", "100", ",", "100", ",", "100", "]", ",", "episode_rewards", "=", "[", "0", ",", "100", ",", "100", "]", ",", "episode_types", "=", "[", "'t'", ",", "'t'", ",", "'t'", "]", ",", "timestamps", "=", "[", "2", ",", "102", ",", "202", "]", ")", "\n", "_assert_benchmark_result", "(", "benchmark_result", ",", "score", "=", "0.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.tests.test_scoring.test_clip_average_benchmark_scoring": [[150, 158], ["collections.defaultdict", "enumerate", "environments.mujoco.rand_param_envs.gym.benchmarks.scoring.benchmark_aggregate_score", "test_scoring._assert_benchmark_score", "benchmark_results[].append", "test_scoring._benchmark_result_helper"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.benchmarks.scoring.benchmark_aggregate_score", "home.repos.pwc.inspect_result.Rondorf_BOReL.tests.test_scoring._assert_benchmark_score", "home.repos.pwc.inspect_result.Rondorf_BOReL.tests.test_scoring._benchmark_result_helper"], ["", "def", "test_clip_average_benchmark_scoring", "(", ")", ":", "\n", "    ", "benchmark_results", "=", "defaultdict", "(", "list", ")", "\n", "for", "i", ",", "task", "in", "enumerate", "(", "benchmark", ".", "tasks", ")", ":", "\n", "        ", "env_id", "=", "task", ".", "env_id", "\n", "benchmark_results", "[", "env_id", "]", ".", "append", "(", "_benchmark_result_helper", "(", "benchmark", ",", "env_id", "=", "env_id", ",", "timestamps", "=", "[", "i", "+", "2", "]", ")", ")", "\n", "", "scores", "=", "scoring", ".", "benchmark_aggregate_score", "(", "benchmark", ",", "benchmark_results", ")", "\n", "\n", "_assert_benchmark_score", "(", "scores", ",", "score", "=", "0.0001", ",", "num_envs_solved", "=", "0", ",", "summed_training_seconds", "=", "3.0", ",", "start_to_finish_seconds", "=", "2.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.tests.test_scoring.test_clip_average_benchmark_empty": [[159, 169], ["environments.mujoco.rand_param_envs.gym.benchmarks.scoring.benchmark_aggregate_score", "collections.defaultdict", "benchmark_results[].append", "environments.mujoco.rand_param_envs.gym.benchmarks.scoring.benchmark_aggregate_score", "test_scoring._assert_benchmark_score", "test_scoring._benchmark_result_helper"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.benchmarks.scoring.benchmark_aggregate_score", "home.repos.pwc.inspect_result.Rondorf_BOReL.benchmarks.scoring.benchmark_aggregate_score", "home.repos.pwc.inspect_result.Rondorf_BOReL.tests.test_scoring._assert_benchmark_score", "home.repos.pwc.inspect_result.Rondorf_BOReL.tests.test_scoring._benchmark_result_helper"], ["", "def", "test_clip_average_benchmark_empty", "(", ")", ":", "\n", "    ", "scores", "=", "scoring", ".", "benchmark_aggregate_score", "(", "benchmark", ",", "{", "}", ")", "\n", "\n", "benchmark_results", "=", "defaultdict", "(", "list", ")", "\n", "task", "=", "benchmark", ".", "tasks", "[", "0", "]", "\n", "env_id", "=", "task", ".", "env_id", "\n", "benchmark_results", "[", "env_id", "]", ".", "append", "(", "_benchmark_result_helper", "(", "benchmark", ",", "env_id", "=", "env_id", ")", ")", "\n", "scores", "=", "scoring", ".", "benchmark_aggregate_score", "(", "benchmark", ",", "benchmark_results", ")", "\n", "\n", "_assert_benchmark_score", "(", "scores", ",", "score", "=", "0.00005", ",", "num_envs_solved", "=", "0", ",", "summed_training_seconds", "=", "1.0", ",", "start_to_finish_seconds", "=", "1.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.tests.test_scoring.test_clip_average_benchmark_solved": [[170, 186], ["collections.defaultdict", "enumerate", "environments.mujoco.rand_param_envs.gym.benchmarks.scoring.benchmark_aggregate_score", "test_scoring._assert_benchmark_score", "benchmark_results[].append", "benchmark.score_evaluation", "len", "list", "range"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.benchmarks.scoring.benchmark_aggregate_score", "home.repos.pwc.inspect_result.Rondorf_BOReL.tests.test_scoring._assert_benchmark_score", "home.repos.pwc.inspect_result.Rondorf_BOReL.benchmarks.scoring.BenchmarkScoringRule.score_evaluation", "home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.ListableAPIResource.list"], ["", "def", "test_clip_average_benchmark_solved", "(", ")", ":", "\n", "    ", "benchmark_results", "=", "defaultdict", "(", "list", ")", "\n", "N", "=", "200", "\n", "for", "i", ",", "task", "in", "enumerate", "(", "benchmark", ".", "tasks", ")", ":", "\n", "        ", "env_id", "=", "task", ".", "env_id", "\n", "benchmark_results", "[", "env_id", "]", ".", "append", "(", "benchmark", ".", "score_evaluation", "(", "\n", "env_id", ",", "\n", "data_sources", "=", "[", "0", "]", "*", "N", ",", "\n", "initial_reset_timestamps", "=", "[", "1", "]", ",", "\n", "episode_lengths", "=", "[", "1", "]", "*", "N", ",", "\n", "episode_rewards", "=", "[", "1000", "]", "*", "N", ",", "\n", "episode_types", "=", "[", "'t'", "]", "*", "N", ",", "\n", "timestamps", "=", "list", "(", "range", "(", "N", ")", ")", ",", "\n", ")", ")", "\n", "", "scores", "=", "scoring", ".", "benchmark_aggregate_score", "(", "benchmark", ",", "benchmark_results", ")", "\n", "_assert_benchmark_score", "(", "scores", ",", "score", "=", "1.0", ",", "num_envs_solved", "=", "len", "(", "benchmark", ".", "tasks", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.tests.test_scoring.test_clip_average_benchmark_incomplete": [[187, 193], ["collections.defaultdict", "benchmark_results[].append", "environments.mujoco.rand_param_envs.gym.benchmarks.scoring.benchmark_aggregate_score", "test_scoring._assert_benchmark_score", "test_scoring._benchmark_result_helper"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.benchmarks.scoring.benchmark_aggregate_score", "home.repos.pwc.inspect_result.Rondorf_BOReL.tests.test_scoring._assert_benchmark_score", "home.repos.pwc.inspect_result.Rondorf_BOReL.tests.test_scoring._benchmark_result_helper"], ["", "def", "test_clip_average_benchmark_incomplete", "(", ")", ":", "\n", "    ", "benchmark_results", "=", "defaultdict", "(", "list", ")", "\n", "env_id", "=", "benchmark", ".", "tasks", "[", "0", "]", ".", "env_id", "\n", "benchmark_results", "[", "env_id", "]", ".", "append", "(", "_benchmark_result_helper", "(", "benchmark", ",", "env_id", "=", "env_id", ",", "timestamps", "=", "[", "2", "]", ")", ")", "\n", "scores", "=", "scoring", ".", "benchmark_aggregate_score", "(", "benchmark", ",", "benchmark_results", ")", "\n", "_assert_benchmark_score", "(", "scores", ",", "score", "=", "0.00005", ",", "num_envs_solved", "=", "0", ",", "summed_training_seconds", "=", "1.0", ",", "start_to_finish_seconds", "=", "1.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.tests.test_scoring.test_clip_average_benchmark_extra": [[194, 205], ["collections.defaultdict", "enumerate", "benchmark_results[].append", "environments.mujoco.rand_param_envs.gym.benchmarks.scoring.benchmark_aggregate_score", "test_scoring._assert_benchmark_score", "benchmark_results[].append", "test_scoring._benchmark_result_helper", "test_scoring._benchmark_result_helper"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.benchmarks.scoring.benchmark_aggregate_score", "home.repos.pwc.inspect_result.Rondorf_BOReL.tests.test_scoring._assert_benchmark_score", "home.repos.pwc.inspect_result.Rondorf_BOReL.tests.test_scoring._benchmark_result_helper", "home.repos.pwc.inspect_result.Rondorf_BOReL.tests.test_scoring._benchmark_result_helper"], ["", "def", "test_clip_average_benchmark_extra", "(", ")", ":", "\n", "    ", "benchmark_results", "=", "defaultdict", "(", "list", ")", "\n", "for", "i", ",", "task", "in", "enumerate", "(", "benchmark", ".", "tasks", ")", ":", "\n", "        ", "env_id", "=", "task", ".", "env_id", "\n", "benchmark_results", "[", "env_id", "]", ".", "append", "(", "_benchmark_result_helper", "(", "benchmark", ",", "env_id", "=", "env_id", ",", "timestamps", "=", "[", "i", "+", "2", "]", ")", ")", "\n", "\n", "# add one more at the end with a high reward", "\n", "", "benchmark_results", "[", "env_id", "]", ".", "append", "(", "_benchmark_result_helper", "(", "benchmark", ",", "env_id", "=", "env_id", ",", "episode_rewards", "=", "[", "100", "]", ",", "timestamps", "=", "[", "2", "]", ")", ")", "\n", "\n", "scores", "=", "scoring", ".", "benchmark_aggregate_score", "(", "benchmark", ",", "benchmark_results", ")", "\n", "_assert_benchmark_score", "(", "scores", ",", "score", "=", "0.0001", ",", "num_envs_solved", "=", "0", ",", "summed_training_seconds", "=", "3.0", ",", "summed_task_wall_time", "=", "3.0", ",", "start_to_finish_seconds", "=", "2.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.tests.test_scoring.test_clip_average_benchmark_eval_handling": [[206, 222], ["collections.defaultdict", "enumerate", "environments.mujoco.rand_param_envs.gym.benchmarks.scoring.benchmark_aggregate_score", "test_scoring._assert_benchmark_score", "benchmark_results[].append", "benchmark.score_evaluation"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.benchmarks.scoring.benchmark_aggregate_score", "home.repos.pwc.inspect_result.Rondorf_BOReL.tests.test_scoring._assert_benchmark_score", "home.repos.pwc.inspect_result.Rondorf_BOReL.benchmarks.scoring.BenchmarkScoringRule.score_evaluation"], ["", "def", "test_clip_average_benchmark_eval_handling", "(", ")", ":", "\n", "# make sure we handle separate evaluation, training episodes properly", "\n", "    ", "benchmark_results", "=", "defaultdict", "(", "list", ")", "\n", "for", "i", ",", "task", "in", "enumerate", "(", "benchmark", ".", "tasks", ")", ":", "\n", "        ", "env_id", "=", "task", ".", "env_id", "\n", "benchmark_results", "[", "env_id", "]", ".", "append", "(", "benchmark", ".", "score_evaluation", "(", "\n", "env_id", ",", "\n", "data_sources", "=", "[", "0", ",", "1", ",", "1", "]", ",", "\n", "initial_reset_timestamps", "=", "[", "1", ",", "1", "]", ",", "\n", "episode_lengths", "=", "[", "1", ",", "1", ",", "1", "]", ",", "\n", "episode_rewards", "=", "[", "1", ",", "2", ",", "3", "]", ",", "\n", "episode_types", "=", "[", "'e'", ",", "'t'", ",", "'e'", "]", ",", "\n", "timestamps", "=", "[", "i", "+", "2", ",", "i", "+", "3", ",", "i", "+", "4", "]", ",", "\n", ")", ")", "\n", "", "scores", "=", "scoring", ".", "benchmark_aggregate_score", "(", "benchmark", ",", "benchmark_results", ")", "\n", "_assert_benchmark_score", "(", "scores", ",", "score", "=", "0.0004", ",", "num_envs_solved", "=", "0", ",", "summed_training_seconds", "=", "5.0", ",", "summed_task_wall_time", "=", "5.0", ",", "start_to_finish_seconds", "=", "3.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.tests.test_scoring.test_clip_scoring": [[225, 243], ["environments.mujoco.rand_param_envs.gym.benchmarks.registration.Benchmark", "test_scoring._benchmark_result_helper", "test_scoring._assert_benchmark_result", "test_scoring._benchmark_result_helper", "test_scoring._assert_benchmark_result", "environments.mujoco.rand_param_envs.gym.benchmarks.scoring.TotalReward"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.tests.test_scoring._benchmark_result_helper", "home.repos.pwc.inspect_result.Rondorf_BOReL.tests.test_scoring._assert_benchmark_result", "home.repos.pwc.inspect_result.Rondorf_BOReL.tests.test_scoring._benchmark_result_helper", "home.repos.pwc.inspect_result.Rondorf_BOReL.tests.test_scoring._assert_benchmark_result"], ["", "def", "test_clip_scoring", "(", ")", ":", "\n", "    ", "benchmark", "=", "registration", ".", "Benchmark", "(", "\n", "id", "=", "'TestBenchmark-v0'", ",", "\n", "scorer", "=", "scoring", ".", "TotalReward", "(", ")", ",", "\n", "tasks", "=", "[", "\n", "{", "'env_id'", ":", "'CartPole-v0'", ",", "\n", "'trials'", ":", "1", ",", "\n", "'max_timesteps'", ":", "5", ",", "\n", "}", ",", "\n", "]", "\n", ")", "\n", "# simple scoring", "\n", "benchmark_result", "=", "_benchmark_result_helper", "(", "benchmark", ")", "\n", "_assert_benchmark_result", "(", "benchmark_result", ",", "score", "=", "0.01", ")", "\n", "\n", "# test a successful run", "\n", "benchmark_result", "=", "_benchmark_result_helper", "(", "benchmark", ",", "episode_rewards", "=", "[", "100", "]", ")", "\n", "_assert_benchmark_result", "(", "benchmark_result", ",", "score", "=", "1.0", ",", "solves", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.tests.test_scoring.test_max_timesteps": [[244, 262], ["environments.mujoco.rand_param_envs.gym.benchmarks.registration.Benchmark", "test_scoring._benchmark_result_helper", "test_scoring._assert_benchmark_result", "test_scoring._benchmark_result_helper", "test_scoring._assert_benchmark_result", "environments.mujoco.rand_param_envs.gym.benchmarks.scoring.TotalReward"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.tests.test_scoring._benchmark_result_helper", "home.repos.pwc.inspect_result.Rondorf_BOReL.tests.test_scoring._assert_benchmark_result", "home.repos.pwc.inspect_result.Rondorf_BOReL.tests.test_scoring._benchmark_result_helper", "home.repos.pwc.inspect_result.Rondorf_BOReL.tests.test_scoring._assert_benchmark_result"], ["", "def", "test_max_timesteps", "(", ")", ":", "\n", "    ", "benchmark", "=", "registration", ".", "Benchmark", "(", "\n", "id", "=", "'TestBenchmark-v0'", ",", "\n", "scorer", "=", "scoring", ".", "TotalReward", "(", ")", ",", "\n", "tasks", "=", "[", "\n", "{", "'env_id'", ":", "'CartPole-v0'", ",", "\n", "'trials'", ":", "1", ",", "\n", "'max_timesteps'", ":", "2", ",", "\n", "}", ",", "\n", "]", "\n", ")", "\n", "\n", "benchmark_result", "=", "_benchmark_result_helper", "(", "benchmark", ",", "data_sources", "=", "[", "0", ",", "0", "]", ",", "episode_lengths", "=", "[", "1", ",", "1", "]", ",", "episode_rewards", "=", "[", "1", ",", "1", "]", ",", "episode_types", "=", "[", "'t'", ",", "'t'", "]", ",", "timestamps", "=", "[", "2", ",", "3", "]", ")", "\n", "_assert_benchmark_result", "(", "benchmark_result", ",", "score", "=", "0.01", ")", "\n", "\n", "# make sure we only include the first result because of timesteps", "\n", "benchmark_result", "=", "_benchmark_result_helper", "(", "benchmark", ",", "data_sources", "=", "[", "0", ",", "0", ",", "0", "]", ",", "episode_lengths", "=", "[", "1", ",", "100", ",", "100", "]", ",", "episode_rewards", "=", "[", "1", ",", "100", ",", "100", "]", ",", "episode_types", "=", "[", "'t'", ",", "'t'", ",", "'t'", "]", ",", "timestamps", "=", "[", "2", ",", "102", ",", "202", "]", ")", "\n", "_assert_benchmark_result", "(", "benchmark_result", ",", "score", "=", "0.01", ",", "solves", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.tests.test_scoring.test_max_seconds": [[263, 281], ["environments.mujoco.rand_param_envs.gym.benchmarks.registration.Benchmark", "test_scoring._benchmark_result_helper", "test_scoring._assert_benchmark_result", "test_scoring._benchmark_result_helper", "test_scoring._assert_benchmark_result", "environments.mujoco.rand_param_envs.gym.benchmarks.scoring.TotalReward"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.tests.test_scoring._benchmark_result_helper", "home.repos.pwc.inspect_result.Rondorf_BOReL.tests.test_scoring._assert_benchmark_result", "home.repos.pwc.inspect_result.Rondorf_BOReL.tests.test_scoring._benchmark_result_helper", "home.repos.pwc.inspect_result.Rondorf_BOReL.tests.test_scoring._assert_benchmark_result"], ["", "def", "test_max_seconds", "(", ")", ":", "\n", "    ", "benchmark", "=", "registration", ".", "Benchmark", "(", "\n", "id", "=", "'TestBenchmark-v0'", ",", "\n", "scorer", "=", "scoring", ".", "TotalReward", "(", ")", ",", "\n", "tasks", "=", "[", "\n", "{", "'env_id'", ":", "'CartPole-v0'", ",", "\n", "'trials'", ":", "1", ",", "\n", "'max_seconds'", ":", "1", ",", "\n", "}", ",", "\n", "]", "\n", ")", "\n", "\n", "benchmark_result", "=", "_benchmark_result_helper", "(", "benchmark", ",", "data_sources", "=", "[", "0", ",", "0", "]", ",", "episode_lengths", "=", "[", "100", ",", "100", "]", ",", "episode_rewards", "=", "[", "0", ",", "100", "]", ",", "episode_types", "=", "[", "'t'", ",", "'t'", "]", ",", "timestamps", "=", "[", "1.5", ",", "2", "]", ")", "\n", "_assert_benchmark_result", "(", "benchmark_result", ",", "score", "=", "0.5", ")", "\n", "\n", "# make sure we only include the first result because of wall clock time", "\n", "benchmark_result", "=", "_benchmark_result_helper", "(", "benchmark", ",", "data_sources", "=", "[", "0", ",", "0", ",", "0", "]", ",", "episode_lengths", "=", "[", "100", ",", "100", ",", "100", "]", ",", "episode_rewards", "=", "[", "0", ",", "100", ",", "100", "]", ",", "episode_types", "=", "[", "'t'", ",", "'t'", ",", "'t'", "]", ",", "timestamps", "=", "[", "2", ",", "102", ",", "202", "]", ")", "\n", "_assert_benchmark_result", "(", "benchmark_result", ",", "score", "=", "0.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.tests.test_scoring.test_total_reward_evaluation_scoring": [[297, 304], ["test_scoring._benchmark_result_helper", "test_scoring._assert_evaluation_result", "numpy.array", "numpy.array"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.tests.test_scoring._benchmark_result_helper", "home.repos.pwc.inspect_result.Rondorf_BOReL.tests.test_scoring._assert_evaluation_result"], ["def", "test_total_reward_evaluation_scoring", "(", ")", ":", "\n", "    ", "benchmark_result", "=", "_benchmark_result_helper", "(", "reward_benchmark", ")", "\n", "_assert_evaluation_result", "(", "\n", "benchmark_result", ",", "\n", "score", "=", "0.01", ",", "\n", "rewards", "=", "[", "np", ".", "array", "(", "[", "1", "]", ")", "]", ",", "\n", "lengths", "=", "[", "np", ".", "array", "(", "[", "1", "]", ")", "]", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.tests.test_scoring.test_total_reward_benchmark_scoring": [[306, 314], ["collections.defaultdict", "enumerate", "environments.mujoco.rand_param_envs.gym.benchmarks.scoring.benchmark_aggregate_score", "test_scoring._assert_benchmark_score", "benchmark_results[].append", "test_scoring._benchmark_result_helper"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.benchmarks.scoring.benchmark_aggregate_score", "home.repos.pwc.inspect_result.Rondorf_BOReL.tests.test_scoring._assert_benchmark_score", "home.repos.pwc.inspect_result.Rondorf_BOReL.tests.test_scoring._benchmark_result_helper"], ["", "def", "test_total_reward_benchmark_scoring", "(", ")", ":", "\n", "    ", "benchmark_results", "=", "defaultdict", "(", "list", ")", "\n", "for", "i", ",", "task", "in", "enumerate", "(", "reward_benchmark", ".", "tasks", ")", ":", "\n", "        ", "env_id", "=", "task", ".", "env_id", "\n", "benchmark_results", "[", "env_id", "]", ".", "append", "(", "_benchmark_result_helper", "(", "reward_benchmark", ",", "env_id", "=", "env_id", ",", "timestamps", "=", "[", "i", "+", "2", "]", ")", ")", "\n", "", "scores", "=", "scoring", ".", "benchmark_aggregate_score", "(", "reward_benchmark", ",", "benchmark_results", ")", "\n", "\n", "_assert_benchmark_score", "(", "scores", ",", "score", "=", "0.01", ",", "num_envs_solved", "=", "0", ",", "summed_training_seconds", "=", "3.0", ",", "summed_task_wall_time", "=", "3.0", ",", "start_to_finish_seconds", "=", "2.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.tests.test_scoring.test_total_reward_benchmark_empty": [[315, 325], ["environments.mujoco.rand_param_envs.gym.benchmarks.scoring.benchmark_aggregate_score", "collections.defaultdict", "benchmark_results[].append", "environments.mujoco.rand_param_envs.gym.benchmarks.scoring.benchmark_aggregate_score", "test_scoring._assert_benchmark_score", "test_scoring._benchmark_result_helper"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.benchmarks.scoring.benchmark_aggregate_score", "home.repos.pwc.inspect_result.Rondorf_BOReL.benchmarks.scoring.benchmark_aggregate_score", "home.repos.pwc.inspect_result.Rondorf_BOReL.tests.test_scoring._assert_benchmark_score", "home.repos.pwc.inspect_result.Rondorf_BOReL.tests.test_scoring._benchmark_result_helper"], ["", "def", "test_total_reward_benchmark_empty", "(", ")", ":", "\n", "    ", "scores", "=", "scoring", ".", "benchmark_aggregate_score", "(", "reward_benchmark", ",", "{", "}", ")", "\n", "\n", "benchmark_results", "=", "defaultdict", "(", "list", ")", "\n", "task", "=", "reward_benchmark", ".", "tasks", "[", "0", "]", "\n", "env_id", "=", "task", ".", "env_id", "\n", "benchmark_results", "[", "env_id", "]", ".", "append", "(", "_benchmark_result_helper", "(", "reward_benchmark", ",", "env_id", "=", "env_id", ")", ")", "\n", "scores", "=", "scoring", ".", "benchmark_aggregate_score", "(", "reward_benchmark", ",", "benchmark_results", ")", "\n", "\n", "_assert_benchmark_score", "(", "scores", ",", "score", "=", "0.005", ",", "num_envs_solved", "=", "0", ",", "summed_training_seconds", "=", "1.0", ",", "start_to_finish_seconds", "=", "1.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.tests.test_scoring.test_total_reward_benchmark_solved": [[326, 342], ["collections.defaultdict", "enumerate", "environments.mujoco.rand_param_envs.gym.benchmarks.scoring.benchmark_aggregate_score", "test_scoring._assert_benchmark_score", "benchmark_results[].append", "reward_benchmark.score_evaluation", "len", "list", "range"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.benchmarks.scoring.benchmark_aggregate_score", "home.repos.pwc.inspect_result.Rondorf_BOReL.tests.test_scoring._assert_benchmark_score", "home.repos.pwc.inspect_result.Rondorf_BOReL.benchmarks.scoring.BenchmarkScoringRule.score_evaluation", "home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.ListableAPIResource.list"], ["", "def", "test_total_reward_benchmark_solved", "(", ")", ":", "\n", "    ", "benchmark_results", "=", "defaultdict", "(", "list", ")", "\n", "N", "=", "200", "\n", "for", "i", ",", "task", "in", "enumerate", "(", "reward_benchmark", ".", "tasks", ")", ":", "\n", "        ", "env_id", "=", "task", ".", "env_id", "\n", "benchmark_results", "[", "env_id", "]", ".", "append", "(", "reward_benchmark", ".", "score_evaluation", "(", "\n", "env_id", ",", "\n", "data_sources", "=", "[", "0", "]", "*", "N", ",", "\n", "initial_reset_timestamps", "=", "[", "1", "]", ",", "\n", "episode_lengths", "=", "[", "1", "]", "*", "N", ",", "\n", "episode_rewards", "=", "[", "1000", "]", "*", "N", ",", "\n", "episode_types", "=", "[", "'t'", "]", "*", "N", ",", "\n", "timestamps", "=", "list", "(", "range", "(", "N", ")", ")", ",", "\n", ")", ")", "\n", "", "scores", "=", "scoring", ".", "benchmark_aggregate_score", "(", "reward_benchmark", ",", "benchmark_results", ")", "\n", "_assert_benchmark_score", "(", "scores", ",", "score", "=", "1.0", ",", "num_envs_solved", "=", "len", "(", "reward_benchmark", ".", "tasks", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.tests.test_scoring.test_benchmark_incomplete": [[343, 349], ["collections.defaultdict", "benchmark_results[].append", "environments.mujoco.rand_param_envs.gym.benchmarks.scoring.benchmark_aggregate_score", "test_scoring._assert_benchmark_score", "test_scoring._benchmark_result_helper"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.benchmarks.scoring.benchmark_aggregate_score", "home.repos.pwc.inspect_result.Rondorf_BOReL.tests.test_scoring._assert_benchmark_score", "home.repos.pwc.inspect_result.Rondorf_BOReL.tests.test_scoring._benchmark_result_helper"], ["", "def", "test_benchmark_incomplete", "(", ")", ":", "\n", "    ", "benchmark_results", "=", "defaultdict", "(", "list", ")", "\n", "env_id", "=", "reward_benchmark", ".", "tasks", "[", "0", "]", ".", "env_id", "\n", "benchmark_results", "[", "env_id", "]", ".", "append", "(", "_benchmark_result_helper", "(", "reward_benchmark", ",", "env_id", "=", "env_id", ",", "timestamps", "=", "[", "2", "]", ")", ")", "\n", "scores", "=", "scoring", ".", "benchmark_aggregate_score", "(", "reward_benchmark", ",", "benchmark_results", ")", "\n", "_assert_benchmark_score", "(", "scores", ",", "score", "=", "0.005", ",", "num_envs_solved", "=", "0", ",", "summed_training_seconds", "=", "1.0", ",", "start_to_finish_seconds", "=", "1.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.tests.test_scoring.test_benchmark_extra": [[350, 361], ["collections.defaultdict", "enumerate", "benchmark_results[].append", "environments.mujoco.rand_param_envs.gym.benchmarks.scoring.benchmark_aggregate_score", "test_scoring._assert_benchmark_score", "benchmark_results[].append", "test_scoring._benchmark_result_helper", "test_scoring._benchmark_result_helper"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.benchmarks.scoring.benchmark_aggregate_score", "home.repos.pwc.inspect_result.Rondorf_BOReL.tests.test_scoring._assert_benchmark_score", "home.repos.pwc.inspect_result.Rondorf_BOReL.tests.test_scoring._benchmark_result_helper", "home.repos.pwc.inspect_result.Rondorf_BOReL.tests.test_scoring._benchmark_result_helper"], ["", "def", "test_benchmark_extra", "(", ")", ":", "\n", "    ", "benchmark_results", "=", "defaultdict", "(", "list", ")", "\n", "for", "i", ",", "task", "in", "enumerate", "(", "reward_benchmark", ".", "tasks", ")", ":", "\n", "        ", "env_id", "=", "task", ".", "env_id", "\n", "benchmark_results", "[", "env_id", "]", ".", "append", "(", "_benchmark_result_helper", "(", "reward_benchmark", ",", "env_id", "=", "env_id", ",", "timestamps", "=", "[", "i", "+", "2", "]", ")", ")", "\n", "\n", "# add one more at the end with a high reward", "\n", "", "benchmark_results", "[", "env_id", "]", ".", "append", "(", "_benchmark_result_helper", "(", "reward_benchmark", ",", "env_id", "=", "env_id", ",", "episode_rewards", "=", "[", "100", "]", ",", "timestamps", "=", "[", "2", "]", ")", ")", "\n", "\n", "scores", "=", "scoring", ".", "benchmark_aggregate_score", "(", "reward_benchmark", ",", "benchmark_results", ")", "\n", "_assert_benchmark_score", "(", "scores", ",", "score", "=", "0.01", ",", "num_envs_solved", "=", "0", ",", "summed_training_seconds", "=", "3.0", ",", "start_to_finish_seconds", "=", "2.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.tests.test_scoring.test_benchmark_simple": [[362, 370], ["collections.defaultdict", "enumerate", "environments.mujoco.rand_param_envs.gym.benchmarks.scoring.benchmark_aggregate_score", "test_scoring._assert_benchmark_score", "benchmark_results[].append", "test_scoring._benchmark_result_helper"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.benchmarks.scoring.benchmark_aggregate_score", "home.repos.pwc.inspect_result.Rondorf_BOReL.tests.test_scoring._assert_benchmark_score", "home.repos.pwc.inspect_result.Rondorf_BOReL.tests.test_scoring._benchmark_result_helper"], ["", "def", "test_benchmark_simple", "(", ")", ":", "\n", "# TODO what is this testing?", "\n", "    ", "benchmark_results", "=", "defaultdict", "(", "list", ")", "\n", "for", "i", ",", "task", "in", "enumerate", "(", "reward_benchmark", ".", "tasks", ")", ":", "\n", "        ", "env_id", "=", "task", ".", "env_id", "\n", "benchmark_results", "[", "env_id", "]", ".", "append", "(", "_benchmark_result_helper", "(", "reward_benchmark", ",", "env_id", "=", "env_id", ",", "timestamps", "=", "[", "i", "+", "2", "]", ")", ")", "\n", "", "scores", "=", "scoring", ".", "benchmark_aggregate_score", "(", "reward_benchmark", ",", "benchmark_results", ")", "\n", "_assert_benchmark_score", "(", "scores", ",", "score", "=", "0.01", ",", "num_envs_solved", "=", "0", ",", "summed_training_seconds", "=", "3.0", ",", "start_to_finish_seconds", "=", "2.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.tests.test_scoring.test_benchmark_eval_handling": [[371, 387], ["collections.defaultdict", "enumerate", "environments.mujoco.rand_param_envs.gym.benchmarks.scoring.benchmark_aggregate_score", "test_scoring._assert_benchmark_score", "benchmark_results[].append", "reward_benchmark.score_evaluation"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.benchmarks.scoring.benchmark_aggregate_score", "home.repos.pwc.inspect_result.Rondorf_BOReL.tests.test_scoring._assert_benchmark_score", "home.repos.pwc.inspect_result.Rondorf_BOReL.benchmarks.scoring.BenchmarkScoringRule.score_evaluation"], ["", "def", "test_benchmark_eval_handling", "(", ")", ":", "\n", "# make sure we count all episodes", "\n", "    ", "benchmark_results", "=", "defaultdict", "(", "list", ")", "\n", "for", "i", ",", "task", "in", "enumerate", "(", "reward_benchmark", ".", "tasks", ")", ":", "\n", "        ", "env_id", "=", "task", ".", "env_id", "\n", "benchmark_results", "[", "env_id", "]", ".", "append", "(", "reward_benchmark", ".", "score_evaluation", "(", "\n", "env_id", ",", "\n", "data_sources", "=", "[", "0", ",", "1", ",", "1", "]", ",", "\n", "initial_reset_timestamps", "=", "[", "1", ",", "2", "]", ",", "\n", "episode_lengths", "=", "[", "1", ",", "1", ",", "1", "]", ",", "\n", "episode_rewards", "=", "[", "1", ",", "2", ",", "3", "]", ",", "\n", "episode_types", "=", "[", "'e'", ",", "'t'", ",", "'e'", "]", ",", "\n", "timestamps", "=", "[", "i", "+", "2", ",", "i", "+", "3", ",", "i", "+", "4", "]", ",", "\n", ")", ")", "\n", "", "scores", "=", "scoring", ".", "benchmark_aggregate_score", "(", "reward_benchmark", ",", "benchmark_results", ")", "\n", "_assert_benchmark_score", "(", "scores", ",", "score", "=", "0.02", ",", "num_envs_solved", "=", "0", ",", "summed_training_seconds", "=", "8.0", ",", "summed_task_wall_time", "=", "7.0", ",", "start_to_finish_seconds", "=", "4.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.tests.test_scoring.test_reward_per_time_benchmark_scoring": [[404, 412], ["collections.defaultdict", "enumerate", "environments.mujoco.rand_param_envs.gym.benchmarks.scoring.benchmark_aggregate_score", "test_scoring._assert_benchmark_score", "benchmark_results[].append", "test_scoring._benchmark_result_helper"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.benchmarks.scoring.benchmark_aggregate_score", "home.repos.pwc.inspect_result.Rondorf_BOReL.tests.test_scoring._assert_benchmark_score", "home.repos.pwc.inspect_result.Rondorf_BOReL.tests.test_scoring._benchmark_result_helper"], ["def", "test_reward_per_time_benchmark_scoring", "(", ")", ":", "\n", "    ", "benchmark_results", "=", "defaultdict", "(", "list", ")", "\n", "for", "i", ",", "task", "in", "enumerate", "(", "reward_per_time_benchmark", ".", "tasks", ")", ":", "\n", "        ", "env_id", "=", "task", ".", "env_id", "\n", "benchmark_results", "[", "env_id", "]", ".", "append", "(", "_benchmark_result_helper", "(", "reward_per_time_benchmark", ",", "env_id", "=", "env_id", ",", "timestamps", "=", "[", "i", "+", "2", "]", ")", ")", "\n", "", "scores", "=", "scoring", ".", "benchmark_aggregate_score", "(", "reward_per_time_benchmark", ",", "benchmark_results", ")", "\n", "\n", "_assert_benchmark_score", "(", "scores", ",", "score", "=", "0.0075", ",", "num_envs_solved", "=", "0", ",", "summed_training_seconds", "=", "3.0", ",", "summed_task_wall_time", "=", "3.0", ",", "start_to_finish_seconds", "=", "2.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.tests.test_scoring.test_reward_per_time_benchmark_empty": [[413, 423], ["environments.mujoco.rand_param_envs.gym.benchmarks.scoring.benchmark_aggregate_score", "collections.defaultdict", "benchmark_results[].append", "environments.mujoco.rand_param_envs.gym.benchmarks.scoring.benchmark_aggregate_score", "test_scoring._assert_benchmark_score", "test_scoring._benchmark_result_helper"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.benchmarks.scoring.benchmark_aggregate_score", "home.repos.pwc.inspect_result.Rondorf_BOReL.benchmarks.scoring.benchmark_aggregate_score", "home.repos.pwc.inspect_result.Rondorf_BOReL.tests.test_scoring._assert_benchmark_score", "home.repos.pwc.inspect_result.Rondorf_BOReL.tests.test_scoring._benchmark_result_helper"], ["", "def", "test_reward_per_time_benchmark_empty", "(", ")", ":", "\n", "    ", "scores", "=", "scoring", ".", "benchmark_aggregate_score", "(", "reward_per_time_benchmark", ",", "{", "}", ")", "\n", "\n", "benchmark_results", "=", "defaultdict", "(", "list", ")", "\n", "task", "=", "reward_per_time_benchmark", ".", "tasks", "[", "0", "]", "\n", "env_id", "=", "task", ".", "env_id", "\n", "benchmark_results", "[", "env_id", "]", ".", "append", "(", "_benchmark_result_helper", "(", "reward_per_time_benchmark", ",", "env_id", "=", "env_id", ",", "episode_lengths", "=", "[", "10", "]", ")", ")", "\n", "scores", "=", "scoring", ".", "benchmark_aggregate_score", "(", "reward_per_time_benchmark", ",", "benchmark_results", ")", "\n", "\n", "_assert_benchmark_score", "(", "scores", ",", "score", "=", "0.0", ",", "num_envs_solved", "=", "0", ",", "summed_training_seconds", "=", "0.0", ",", "start_to_finish_seconds", "=", "0.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.tests.test_scoring.test_reward_per_time_benchmark_solved": [[424, 443], ["collections.defaultdict", "enumerate", "environments.mujoco.rand_param_envs.gym.benchmarks.scoring.benchmark_aggregate_score", "test_scoring._assert_benchmark_score", "benchmark_results[].append", "reward_per_time_benchmark.score_evaluation", "list", "range"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.benchmarks.scoring.benchmark_aggregate_score", "home.repos.pwc.inspect_result.Rondorf_BOReL.tests.test_scoring._assert_benchmark_score", "home.repos.pwc.inspect_result.Rondorf_BOReL.benchmarks.scoring.BenchmarkScoringRule.score_evaluation", "home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.ListableAPIResource.list"], ["", "def", "test_reward_per_time_benchmark_solved", "(", ")", ":", "\n", "    ", "benchmark_results", "=", "defaultdict", "(", "list", ")", "\n", "N", "=", "200", "\n", "for", "i", ",", "task", "in", "enumerate", "(", "reward_per_time_benchmark", ".", "tasks", ")", ":", "\n", "        ", "env_id", "=", "task", ".", "env_id", "\n", "benchmark_results", "[", "env_id", "]", ".", "append", "(", "reward_per_time_benchmark", ".", "score_evaluation", "(", "\n", "env_id", ",", "\n", "data_sources", "=", "[", "0", "]", "*", "N", ",", "\n", "initial_reset_timestamps", "=", "[", "1", "]", ",", "\n", "episode_lengths", "=", "[", "1", "]", "*", "N", ",", "\n", "episode_rewards", "=", "[", "1000", "]", "*", "N", ",", "\n", "episode_types", "=", "[", "'t'", "]", "*", "N", ",", "\n", "timestamps", "=", "list", "(", "range", "(", "N", ")", ")", ",", "\n", ")", ")", "\n", "", "scores", "=", "scoring", ".", "benchmark_aggregate_score", "(", "reward_per_time_benchmark", ",", "benchmark_results", ")", "\n", "\n", "# Currently reward per time has no solved functionality, so num_envs_solved", "\n", "# is 0", "\n", "_assert_benchmark_score", "(", "scores", ",", "score", "=", "1.0", ",", "num_envs_solved", "=", "0", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.Rondorf_BOReL.tests.test_registration.test_correct_registration": [[3, 8], ["environments.mujoco.rand_param_envs.gym.scoreboard.registration.registry.finalize"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.scoreboard.registration.Registry.finalize"], ["from", "environments", ".", "mujoco", ".", "rand_param_envs", ".", "gym", ".", "envs", "import", "registration", "\n", "from", "environments", ".", "mujoco", ".", "rand_param_envs", ".", "gym", ".", "envs", ".", "classic_control", "import", "cartpole", "\n", "\n", "def", "test_make", "(", ")", ":", "\n", "    ", "env", "=", "envs", ".", "make", "(", "'CartPole-v0'", ")", "\n", "assert", "env", ".", "spec", ".", "id", "==", "'CartPole-v0'", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.tests.test_wrappers.test_skip": [[10, 16], ["environments.mujoco.rand_param_envs.gym.wrappers.SkipWrapper", "environments.mujoco.rand_param_envs.gym.make", "environments.mujoco.rand_param_envs.gym.wrappers.SkipWrapper.", "every_two_frame.reset", "every_two_frame.render"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.wrappers.frame_skipping.SkipWrapper", "home.repos.pwc.inspect_result.Rondorf_BOReL.envs.registration.make", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.reset", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.render"], ["def", "test_skip", "(", ")", ":", "\n", "    ", "every_two_frame", "=", "SkipWrapper", "(", "2", ")", "\n", "env", "=", "gym", ".", "make", "(", "\"FrozenLake-v0\"", ")", "\n", "env", "=", "every_two_frame", "(", "env", ")", "\n", "obs", "=", "env", ".", "reset", "(", ")", "\n", "env", ".", "render", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.tests.test_wrappers.test_configured": [[17, 25], ["environments.mujoco.rand_param_envs.gym.make", "gym.make.configure", "gym.make.close"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.envs.registration.make", "home.repos.pwc.inspect_result.Rondorf_BOReL.gym.core.Env.configure", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.close"], ["", "def", "test_configured", "(", ")", ":", "\n", "    ", "env", "=", "gym", ".", "make", "(", "\"FrozenLake-v0\"", ")", "\n", "env", ".", "configure", "(", ")", "\n", "\n", "# Make sure all layers of wrapping are configured", "\n", "assert", "env", ".", "_configured", "\n", "assert", "env", ".", "env", ".", "_configured", "\n", "env", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.tests.test_wrappers.test_no_double_wrapping": [[42, 56], ["tempfile.mkdtemp", "environments.mujoco.rand_param_envs.gym.make", "environments.mujoco.rand_param_envs.gym.wrappers.Monitor", "wrappers.Monitor.close", "shutil.rmtree", "environments.mujoco.rand_param_envs.gym.wrappers.Monitor"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.envs.registration.make", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.close"], ["", "def", "test_no_double_wrapping", "(", ")", ":", "\n", "    ", "temp", "=", "tempfile", ".", "mkdtemp", "(", ")", "\n", "try", ":", "\n", "        ", "env", "=", "gym", ".", "make", "(", "\"FrozenLake-v0\"", ")", "\n", "env", "=", "wrappers", ".", "Monitor", "(", "env", ",", "temp", ")", "\n", "try", ":", "\n", "            ", "env", "=", "wrappers", ".", "Monitor", "(", "env", ",", "temp", ")", "\n", "", "except", "error", ".", "DoubleWrapperError", ":", "\n", "            ", "pass", "\n", "", "else", ":", "\n", "            ", "assert", "False", ",", "\"Should not allow double wrapping\"", "\n", "", "env", ".", "close", "(", ")", "\n", "", "finally", ":", "\n", "        ", "shutil", ".", "rmtree", "(", "temp", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Rondorf_BOReL.tests.test_core.ArgumentEnv.__init__": [[6, 9], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "arg", ")", ":", "\n", "        ", "self", ".", "calls", "+=", "1", "\n", "self", ".", "arg", "=", "arg", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.tests.test_core.test_env_instantiation": [[10, 16], ["test_core.ArgumentEnv"], "function", ["None"], ["", "", "def", "test_env_instantiation", "(", ")", ":", "\n", "# This looks like a pretty trivial, but given our usage of", "\n", "# __new__, it's worth having.", "\n", "    ", "env", "=", "ArgumentEnv", "(", "'arg'", ")", "\n", "assert", "env", ".", "arg", "==", "'arg'", "\n", "assert", "env", ".", "calls", "==", "1", "\n", "", ""]], "home.repos.pwc.inspect_result.Rondorf_BOReL.tests.test_spaces.test_roundtripping": [[7, 32], ["pytest.mark.parametrize", "space.sample", "space.sample", "space.contains", "space.contains", "space.to_jsonable", "json.loads", "space.from_jsonable", "space.to_jsonable", "space.to_jsonable", "space.to_jsonable", "space.to_jsonable", "json.dumps", "environments.mujoco.rand_param_envs.gym.spaces.Discrete", "environments.mujoco.rand_param_envs.gym.spaces.Tuple", "environments.mujoco.rand_param_envs.gym.spaces.Tuple", "environments.mujoco.rand_param_envs.gym.spaces.Tuple", "environments.mujoco.rand_param_envs.gym.spaces.MultiDiscrete", "environments.mujoco.rand_param_envs.gym.spaces.Discrete", "environments.mujoco.rand_param_envs.gym.spaces.Discrete", "environments.mujoco.rand_param_envs.gym.spaces.Discrete", "environments.mujoco.rand_param_envs.gym.spaces.Box", "environments.mujoco.rand_param_envs.gym.spaces.Discrete", "environments.mujoco.rand_param_envs.gym.spaces.Discrete", "environments.mujoco.rand_param_envs.gym.spaces.Discrete", "numpy.array", "numpy.array"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.spaces.discrete.Discrete.sample", "home.repos.pwc.inspect_result.Rondorf_BOReL.spaces.discrete.Discrete.sample", "home.repos.pwc.inspect_result.Rondorf_BOReL.spaces.discrete.Discrete.contains", "home.repos.pwc.inspect_result.Rondorf_BOReL.spaces.discrete.Discrete.contains", "home.repos.pwc.inspect_result.Rondorf_BOReL.spaces.box.Box.to_jsonable", "home.repos.pwc.inspect_result.Rondorf_BOReL.spaces.box.Box.from_jsonable", "home.repos.pwc.inspect_result.Rondorf_BOReL.spaces.box.Box.to_jsonable", "home.repos.pwc.inspect_result.Rondorf_BOReL.spaces.box.Box.to_jsonable", "home.repos.pwc.inspect_result.Rondorf_BOReL.spaces.box.Box.to_jsonable", "home.repos.pwc.inspect_result.Rondorf_BOReL.spaces.box.Box.to_jsonable"], ["@", "pytest", ".", "mark", ".", "parametrize", "(", "\"space\"", ",", "[", "\n", "Discrete", "(", "3", ")", ",", "\n", "Tuple", "(", "[", "Discrete", "(", "5", ")", ",", "Discrete", "(", "10", ")", "]", ")", ",", "\n", "Tuple", "(", "[", "Discrete", "(", "5", ")", ",", "Box", "(", "np", ".", "array", "(", "[", "0", ",", "0", "]", ")", ",", "np", ".", "array", "(", "[", "1", ",", "5", "]", ")", ")", "]", ")", ",", "\n", "Tuple", "(", "(", "Discrete", "(", "5", ")", ",", "Discrete", "(", "2", ")", ",", "Discrete", "(", "2", ")", ")", ")", ",", "\n", "MultiDiscrete", "(", "[", "[", "0", ",", "1", "]", ",", "[", "0", ",", "1", "]", ",", "[", "0", ",", "100", "]", "]", ")", "\n", "]", ")", "\n", "def", "test_roundtripping", "(", "space", ")", ":", "\n", "    ", "sample_1", "=", "space", ".", "sample", "(", ")", "\n", "sample_2", "=", "space", ".", "sample", "(", ")", "\n", "assert", "space", ".", "contains", "(", "sample_1", ")", "\n", "assert", "space", ".", "contains", "(", "sample_2", ")", "\n", "json_rep", "=", "space", ".", "to_jsonable", "(", "[", "sample_1", ",", "sample_2", "]", ")", "\n", "\n", "json_roundtripped", "=", "json", ".", "loads", "(", "json", ".", "dumps", "(", "json_rep", ")", ")", "\n", "\n", "samples_after_roundtrip", "=", "space", ".", "from_jsonable", "(", "json_roundtripped", ")", "\n", "sample_1_prime", ",", "sample_2_prime", "=", "samples_after_roundtrip", "\n", "\n", "s1", "=", "space", ".", "to_jsonable", "(", "[", "sample_1", "]", ")", "\n", "s1p", "=", "space", ".", "to_jsonable", "(", "[", "sample_1_prime", "]", ")", "\n", "s2", "=", "space", ".", "to_jsonable", "(", "[", "sample_2", "]", ")", "\n", "s2p", "=", "space", ".", "to_jsonable", "(", "[", "sample_2_prime", "]", ")", "\n", "assert", "s1", "==", "s1p", ",", "\"Expected {} to equal {}\"", ".", "format", "(", "s1", ",", "s1p", ")", "\n", "assert", "s2", "==", "s2p", ",", "\"Expected {} to equal {}\"", ".", "format", "(", "s2", ",", "s2p", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.Rondorf_BOReL.benchmarks.registration.Task.__init__": [[11, 21], ["environments.mujoco.rand_param_envs.gym.error.Error"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "env_id", ",", "trials", ",", "max_timesteps", ",", "max_seconds", ",", "reward_floor", ",", "reward_ceiling", ")", ":", "\n", "        ", "self", ".", "env_id", "=", "env_id", "\n", "self", ".", "trials", "=", "trials", "\n", "self", ".", "max_timesteps", "=", "max_timesteps", "\n", "self", ".", "max_seconds", "=", "max_seconds", "\n", "self", ".", "reward_floor", "=", "reward_floor", "\n", "self", ".", "reward_ceiling", "=", "reward_ceiling", "\n", "\n", "if", "max_timesteps", "is", "None", "and", "max_seconds", "is", "None", ":", "\n", "            ", "raise", "error", ".", "Error", "(", "'Must provide at least one of max_timesteps and max_seconds for {}'", ".", "format", "(", "self", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.benchmarks.registration.Task.__str__": [[22, 24], ["None"], "methods", ["None"], ["", "", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "'Task<env_id={} trials={} max_timesteps={} max_seconds={} reward_floor={} reward_ceiling={}>'", ".", "format", "(", "self", ".", "env_id", ",", "self", ".", "trials", ",", "self", ".", "max_timesteps", ",", "self", ".", "max_seconds", ",", "self", ".", "reward_floor", ",", "self", ".", "reward_ceiling", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.benchmarks.registration.Benchmark.__init__": [[26, 47], ["set", "registration.Task", "registration.Benchmark.env_ids.add", "compiled_tasks.append", "Task.get", "Task.get", "Task.get", "Task.get"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "id", ",", "scorer", ",", "tasks", ",", "description", "=", "None", ",", "name", "=", "None", ")", ":", "\n", "        ", "self", ".", "id", "=", "id", "\n", "self", ".", "scorer", "=", "scorer", "\n", "self", ".", "description", "=", "description", "\n", "self", ".", "name", "=", "name", "\n", "self", ".", "env_ids", "=", "set", "(", ")", "\n", "\n", "compiled_tasks", "=", "[", "]", "\n", "for", "task", "in", "tasks", ":", "\n", "            ", "task", "=", "Task", "(", "\n", "env_id", "=", "task", "[", "'env_id'", "]", ",", "\n", "trials", "=", "task", "[", "'trials'", "]", ",", "\n", "max_timesteps", "=", "task", ".", "get", "(", "'max_timesteps'", ")", ",", "\n", "max_seconds", "=", "task", ".", "get", "(", "'max_seconds'", ")", ",", "\n", "reward_floor", "=", "task", ".", "get", "(", "'reward_floor'", ",", "0", ")", ",", "\n", "reward_ceiling", "=", "task", ".", "get", "(", "'reward_ceiling'", ",", "100", ")", ",", "\n", ")", "\n", "self", ".", "env_ids", ".", "add", "(", "task", ".", "env_id", ")", "\n", "compiled_tasks", ".", "append", "(", "task", ")", "\n", "\n", "", "self", ".", "tasks", "=", "compiled_tasks", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.benchmarks.registration.Benchmark.task_specs": [[48, 56], ["environments.mujoco.rand_param_envs.gym.error.Unregistered"], "methods", ["None"], ["", "def", "task_specs", "(", "self", ",", "env_id", ")", ":", "\n", "# Could precompute this, but no need yet", "\n", "# Note that if we do precompute it we need to preserve the order in", "\n", "# which tasks are returned", "\n", "        ", "results", "=", "[", "task", "for", "task", "in", "self", ".", "tasks", "if", "task", ".", "env_id", "==", "env_id", "]", "\n", "if", "not", "results", ":", "\n", "            ", "raise", "error", ".", "Unregistered", "(", "'No task with env_id {} registered for benchmark {}'", ",", "env_id", ",", "self", ".", "id", ")", "\n", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.benchmarks.registration.Benchmark.score_evaluation": [[57, 59], ["registration.Benchmark.scorer.score_evaluation"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.benchmarks.scoring.BenchmarkScoringRule.score_evaluation"], ["", "def", "score_evaluation", "(", "self", ",", "env_id", ",", "data_sources", ",", "initial_reset_timestamps", ",", "episode_lengths", ",", "episode_rewards", ",", "episode_types", ",", "timestamps", ")", ":", "\n", "        ", "return", "self", ".", "scorer", ".", "score_evaluation", "(", "self", ",", "env_id", ",", "data_sources", ",", "initial_reset_timestamps", ",", "episode_lengths", ",", "episode_rewards", ",", "episode_types", ",", "timestamps", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.benchmarks.registration.Benchmark.score_benchmark": [[60, 62], ["registration.Benchmark.scorer.score_benchmark"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.benchmarks.scoring.BenchmarkScoringRule.score_benchmark"], ["", "def", "score_benchmark", "(", "self", ",", "score_map", ")", ":", "\n", "        ", "return", "self", ".", "scorer", ".", "score_benchmark", "(", "self", ",", "score_map", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.benchmarks.registration.Registry.__init__": [[66, 70], ["collections.OrderedDict", "collections.OrderedDict", "collections.OrderedDict"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "benchmarks", "=", "collections", ".", "OrderedDict", "(", ")", "\n", "self", ".", "benchmark_views", "=", "collections", ".", "OrderedDict", "(", ")", "\n", "self", ".", "benchmark_view_groups", "=", "collections", ".", "OrderedDict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.benchmarks.registration.Registry.register_benchmark_view": [[71, 98], ["name.replace().replace().isalnum", "BenchmarkView", "registration.Registry.benchmark_view_groups[].append", "name.replace().replace", "name.replace"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.isalnum", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.replace", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.replace"], ["", "def", "register_benchmark_view", "(", "self", ",", "name", ",", "benchmarks", ",", "primary", ",", "group", ")", ":", "\n", "        ", "\"\"\"Sometimes there's very little change between one\n        benchmark and another. BenchmarkView will allow to\n        display results from multiple benchmarks in a single\n        table.\n\n        name: str\n            Name to display on the website\n        benchmarks: [str]\n            list of benchmark ids to include\n        primary: str\n            primary benchmark - this is one to be used\n            to display as the most recent benchmark to be\n            used when submitting for future evaluations.\n        group: str\n            group in which to display the benchmark on the website.\n        \"\"\"", "\n", "assert", "name", ".", "replace", "(", "\"_\"", ",", "''", ")", ".", "replace", "(", "'-'", ",", "''", ")", ".", "isalnum", "(", ")", ",", "\"Name of benchmark must be combination of letters, numbers, - and _\"", "\n", "if", "group", "is", "None", ":", "\n", "            ", "group", "=", "\"Miscellaneous\"", "\n", "", "bw", "=", "BenchmarkView", "(", "name", "=", "name", ",", "benchmarks", "=", "benchmarks", ",", "primary", "=", "primary", ",", "group", "=", "group", ")", "\n", "assert", "bw", ".", "primary", "in", "bw", ".", "benchmarks", "\n", "self", ".", "benchmark_views", "[", "bw", ".", "name", "]", "=", "bw", "\n", "if", "group", "not", "in", "self", ".", "benchmark_view_groups", ":", "\n", "            ", "self", ".", "benchmark_view_groups", "[", "group", "]", "=", "[", "]", "\n", "", "self", ".", "benchmark_view_groups", "[", "group", "]", ".", "append", "(", "bw", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.benchmarks.registration.Registry.register_benchmark": [[99, 106], ["registration.Benchmark", "registration.Registry.register_benchmark_view"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.benchmarks.registration.Registry.register_benchmark_view"], ["", "def", "register_benchmark", "(", "self", ",", "id", ",", "scorer", ",", "tasks", ",", "description", "=", "None", ",", "name", "=", "None", ",", "add_view", "=", "True", ",", "view_group", "=", "None", ")", ":", "\n", "        ", "self", ".", "benchmarks", "[", "id", "]", "=", "Benchmark", "(", "id", "=", "id", ",", "scorer", "=", "scorer", ",", "tasks", "=", "tasks", ",", "name", "=", "name", ",", "description", "=", "description", ")", "\n", "if", "add_view", ":", "\n", "            ", "self", ".", "register_benchmark_view", "(", "name", "=", "name", "if", "name", "is", "not", "None", "else", "id", ",", "\n", "benchmarks", "=", "[", "id", "]", ",", "\n", "primary", "=", "id", ",", "\n", "group", "=", "view_group", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.benchmarks.registration.Registry.benchmark_spec": [[107, 112], ["environments.mujoco.rand_param_envs.gym.error.UnregisteredBenchmark"], "methods", ["None"], ["", "", "def", "benchmark_spec", "(", "self", ",", "id", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "return", "self", ".", "benchmarks", "[", "id", "]", "\n", "", "except", "KeyError", ":", "\n", "            ", "raise", "error", ".", "UnregisteredBenchmark", "(", "'No registered benchmark with id: {}'", ".", "format", "(", "id", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.benchmarks.scoring.ClipTo01ThenAverage.__init__": [[80, 82], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "num_episodes", "=", "100", ")", ":", "\n", "        ", "self", ".", "num_episodes", "=", "num_episodes", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.benchmarks.scoring.ClipTo01ThenAverage.description": [[83, 90], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "description", "(", "self", ")", ":", "\n", "        ", "return", "\"\"\"\nThe scorer takes the average reward over the last {num_episodes} full episodes collected before a certain number of steps or seconds of experience have elapsed for each trial.\n\nThis reward is clipped and normalized to be between 0.0 and 1.0 using thresholds defined on a per-environment basis.\n        \"\"\"", ".", "rstrip", "(", ")", ".", "format", "(", "num_episodes", "=", "self", ".", "num_episodes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.benchmarks.scoring.ClipTo01ThenAverage.null_score": [[91, 97], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "null_score", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        This is used to compute benchmark scores when we are missing an evaluation\n        \"\"\"", "\n", "return", "0.0", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.benchmarks.scoring.ClipTo01ThenAverage.score_evaluation": [[98, 245], ["benchmark.task_specs", "environments.mujoco.rand_param_envs.gym.envs.spec", "numpy.zeros", "numpy.array", "numpy.array", "enumerate", "numpy.where", "numpy.where", "numpy.cumsum", "numpy.cumsum", "len", "min", "len", "numpy.where", "len", "numpy.where", "numpy.where", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.isfinite", "numpy.clip", "numpy.mean", "scores.append", "solves.append", "rewards.append", "lengths.append", "_timestamps.append", "elapsed_times.append", "len", "numpy.where", "numpy.where", "numpy.where", "numpy.array", "numpy.array", "len", "logger.info", "numpy.concatenate", "numpy.concatenate", "len", "len", "min", "len", "min", "len", "len", "numpy.isfinite", "len"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.benchmarks.registration.Benchmark.task_specs", "home.repos.pwc.inspect_result.Rondorf_BOReL.envs.registration.spec", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.zeros"], ["", "def", "score_evaluation", "(", "self", ",", "benchmark", ",", "env_id", ",", "data_sources", ",", "initial_reset_timestamps", ",", "episode_lengths", ",", "episode_rewards", ",", "episode_types", ",", "timestamps", ")", ":", "\n", "        ", "tasks", "=", "benchmark", ".", "task_specs", "(", "env_id", ")", "\n", "spec", "=", "envs", ".", "spec", "(", "env_id", ")", "\n", "\n", "#### 0. Compute timing stats", "\n", "\n", "if", "len", "(", "initial_reset_timestamps", ")", ">", "0", ":", "\n", "            ", "initial_reset_timestamp", "=", "min", "(", "initial_reset_timestamps", ")", "\n", "", "else", ":", "\n", "            ", "initial_reset_timestamp", "=", "0", "\n", "\n", "\n", "# How long each episode actually took", "\n", "# How long each episode actually took", "\n", "", "durations", "=", "np", ".", "zeros", "(", "len", "(", "timestamps", ")", ")", "\n", "\n", "data_sources", "=", "np", ".", "array", "(", "data_sources", ")", "\n", "timestamps", "=", "np", ".", "array", "(", "timestamps", ")", "\n", "for", "source", ",", "initial_ts", "in", "enumerate", "(", "initial_reset_timestamps", ")", ":", "\n", "            ", "(", "source_indexes", ",", ")", "=", "np", ".", "where", "(", "data_sources", "==", "source", ")", "\n", "\n", "if", "len", "(", "source_indexes", ")", "==", "0", ":", "\n", "                ", "continue", "\n", "# Once we know the indexes corresponding to a particular", "\n", "# source (i.e. worker thread), we can just subtract", "\n", "# adjoining values", "\n", "", "durations", "[", "source_indexes", "[", "0", "]", "]", "=", "timestamps", "[", "source_indexes", "[", "0", "]", "]", "-", "initial_ts", "\n", "durations", "[", "source_indexes", "[", "1", ":", "]", "]", "=", "timestamps", "[", "source_indexes", "[", "1", ":", "]", "]", "-", "timestamps", "[", "source_indexes", "[", ":", "-", "1", "]", "]", "\n", "\n", "#### 1. Select out which indexes are for evaluation and which are for training", "\n", "\n", "", "(", "t_idx", ",", ")", "=", "np", ".", "where", "(", "[", "t", "==", "'t'", "for", "t", "in", "episode_types", "]", ")", "# training episodes", "\n", "(", "e_idx", ",", ")", "=", "np", ".", "where", "(", "[", "t", "==", "'e'", "for", "t", "in", "episode_types", "]", ")", "# evaluation episodes", "\n", "if", "len", "(", "e_idx", ")", "==", "0", ":", "\n", "# If no episodes marked for evaluation, consider", "\n", "# everything both a training and evaluation episode.", "\n", "            ", "(", "t_idx", ",", ")", "=", "np", ".", "where", "(", "[", "True", "for", "t", "in", "episode_types", "]", ")", "\n", "(", "e_idx", ",", ")", "=", "np", ".", "where", "(", "[", "True", "for", "t", "in", "episode_types", "]", ")", "\n", "\n", "#### 2. Grab the data corresponding to each of evaluation/training", "\n", "\n", "", "training_lengths", "=", "np", ".", "array", "(", "episode_lengths", ")", "[", "t_idx", "]", "\n", "training_rewards", "=", "np", ".", "array", "(", "episode_rewards", ")", "[", "t_idx", "]", "\n", "training_durations", "=", "np", ".", "array", "(", "durations", ")", "[", "t_idx", "]", "\n", "\n", "evaluation_lengths", "=", "np", ".", "array", "(", "episode_lengths", ")", "[", "e_idx", "]", "\n", "evaluation_rewards", "=", "np", ".", "array", "(", "episode_rewards", ")", "[", "e_idx", "]", "\n", "evaluation_durations", "=", "np", ".", "array", "(", "durations", ")", "[", "e_idx", "]", "\n", "\n", "#### 3. Calculate the total elapsed time (in various units)", "\n", "#### for each episode", "\n", "\n", "# How many training timesteps have elapsed by the end of each", "\n", "# episode. Not to be confused with Unix timestamps.", "\n", "elapsed_timesteps", "=", "np", ".", "cumsum", "(", "training_lengths", ")", "\n", "# Total number of seconds elapsed by the end of each", "\n", "# episode. Note that with n parallel workers each running for", "\n", "# m seconds, we want to count the total time as n * m.", "\n", "elapsed_seconds", "=", "np", ".", "cumsum", "(", "training_durations", ")", "\n", "\n", "scores", "=", "[", "]", "\n", "solves", "=", "[", "]", "\n", "rewards", "=", "[", "]", "\n", "lengths", "=", "[", "]", "\n", "_timestamps", "=", "[", "]", "\n", "elapsed_times", "=", "[", "]", "\n", "for", "task", "in", "tasks", ":", "\n", "# Find the first episode where we're over the allotted", "\n", "# training timesteps.", "\n", "            ", "cutoff_idx", "=", "np", ".", "inf", "\n", "if", "task", ".", "max_timesteps", ":", "\n", "# this looks a little funny, but we want the first idx greater", "\n", "# than the cutoff", "\n", "                ", "(", "timestep_cutoff", ",", ")", "=", "np", ".", "where", "(", "elapsed_timesteps", ">", "task", ".", "max_timesteps", ")", "\n", "if", "len", "(", "timestep_cutoff", ")", ">", "0", ":", "\n", "                    ", "cutoff_idx", "=", "min", "(", "cutoff_idx", ",", "timestep_cutoff", "[", "0", "]", ")", "\n", "", "", "if", "task", ".", "max_seconds", ":", "\n", "                ", "(", "seconds_cutoff", ",", ")", "=", "np", ".", "where", "(", "elapsed_seconds", ">", "task", ".", "max_seconds", ")", "\n", "if", "len", "(", "seconds_cutoff", ")", ">", "0", ":", "\n", "                    ", "cutoff_idx", "=", "min", "(", "cutoff_idx", ",", "seconds_cutoff", "[", "0", "]", ")", "\n", "", "", "if", "np", ".", "isfinite", "(", "cutoff_idx", ")", ":", "\n", "                ", "orig_cutoff_idx", "=", "t_idx", "[", "cutoff_idx", "]", "# cutoff index in the original (i.e. before filtering to training/evaluation)", "\n", "(", "allowed_e_idx", ",", ")", "=", "np", ".", "where", "(", "e_idx", "<", "orig_cutoff_idx", ")", "# restrict to earlier episodes", "\n", "", "else", ":", "\n", "# All episodes are fair game", "\n", "                ", "allowed_e_idx", "=", "e_idx", "\n", "\n", "# Grab the last num_episodes evaluation episodes from", "\n", "# before the cutoff (at which point we've gathered too", "\n", "# much experience).", "\n", "#", "\n", "# This probably won't work long-term but is fine for now.", "\n", "", "allowed_episode_rewards", "=", "np", ".", "array", "(", "episode_rewards", ")", "[", "allowed_e_idx", "]", "\n", "reward", "=", "allowed_episode_rewards", "[", "-", "self", ".", "num_episodes", ":", "]", "\n", "allowed_episode_lengths", "=", "np", ".", "array", "(", "episode_lengths", ")", "[", "allowed_e_idx", "]", "\n", "length", "=", "allowed_episode_lengths", "[", "-", "self", ".", "num_episodes", ":", "]", "\n", "\n", "floor", "=", "task", ".", "reward_floor", "\n", "ceiling", "=", "task", ".", "reward_ceiling", "\n", "\n", "if", "len", "(", "reward", ")", "<", "self", ".", "num_episodes", ":", "\n", "                ", "extra", "=", "self", ".", "num_episodes", "-", "len", "(", "reward", ")", "\n", "logger", ".", "info", "(", "'Only %s rewards for %s; adding %s'", ",", "len", "(", "reward", ")", ",", "env_id", ",", "extra", ")", "\n", "reward", "=", "np", ".", "concatenate", "(", "[", "reward", ",", "[", "floor", "]", "*", "extra", "]", ")", "\n", "length", "=", "np", ".", "concatenate", "(", "[", "length", ",", "[", "0", "]", "*", "extra", "]", ")", "\n", "\n", "# Grab the indexes where we reached the ceiling", "\n", "", "solved", "=", "reward", ">=", "ceiling", "\n", "# Linearly rescale rewards to between 0 and 1", "\n", "clipped", "=", "np", ".", "clip", "(", "(", "reward", "-", "floor", ")", "/", "(", "ceiling", "-", "floor", ")", ",", "0", ",", "1", ")", "\n", "\n", "# Take the mean rescaled score", "\n", "score", "=", "np", ".", "mean", "(", "clipped", ")", "\n", "scores", ".", "append", "(", "score", ")", "\n", "# Record the list of solved episodes", "\n", "solves", ".", "append", "(", "solved", ")", "\n", "# Record the list of rewards", "\n", "rewards", ".", "append", "(", "reward", ")", "\n", "# Record the list of lengths", "\n", "lengths", ".", "append", "(", "length", ")", "\n", "\n", "if", "len", "(", "allowed_e_idx", ")", ">", "0", ":", "\n", "                ", "if", "not", "np", ".", "isfinite", "(", "cutoff_idx", ")", ":", "\n", "                    ", "cutoff_idx", "=", "len", "(", "elapsed_seconds", ")", "-", "1", "\n", "", "last_t_idx", "=", "t_idx", "[", "cutoff_idx", "]", "\n", "# timestamps is full length", "\n", "last_timestamp", "=", "timestamps", "[", "last_t_idx", "]", "\n", "# elapsed seconds contains only training", "\n", "elapsed_time", "=", "elapsed_seconds", "[", "cutoff_idx", "]", "\n", "", "else", ":", "\n", "# If we don't have any evaluation episodes, then the", "\n", "# last valid timestamp is when we started.", "\n", "                ", "last_timestamp", "=", "initial_reset_timestamp", "\n", "elapsed_time", "=", "0.0", "\n", "\n", "# Record the timestamp of the last episode timestamp", "\n", "", "_timestamps", ".", "append", "(", "last_timestamp", ")", "\n", "elapsed_times", ".", "append", "(", "elapsed_time", ")", "\n", "\n", "", "return", "{", "\n", "'rewards'", ":", "rewards", ",", "\n", "'lengths'", ":", "lengths", ",", "\n", "'scores'", ":", "scores", ",", "\n", "'solves'", ":", "solves", ",", "\n", "'timestamps'", ":", "_timestamps", ",", "\n", "'elapsed_times'", ":", "elapsed_times", ",", "\n", "'initial_reset_timestamp'", ":", "initial_reset_timestamp", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.benchmarks.scoring.ClipTo01ThenAverage.score_benchmark": [[247, 253], ["episode_scores.items", "numpy.mean"], "methods", ["None"], ["", "def", "score_benchmark", "(", "self", ",", "benchmark", ",", "episode_scores", ")", ":", "\n", "        ", "all_scores", "=", "[", "]", "\n", "for", "env_id", ",", "scores", "in", "episode_scores", ".", "items", "(", ")", ":", "\n", "            ", "all_scores", "+=", "scores", "\n", "\n", "", "return", "np", ".", "mean", "(", "all_scores", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.benchmarks.scoring.BenchmarkScoringRule.__init__": [[310, 312], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "score_and_solved_func", ")", ":", "\n", "        ", "self", ".", "score_and_solved_func", "=", "score_and_solved_func", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.benchmarks.scoring.BenchmarkScoringRule.null_score": [[313, 316], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "null_score", "(", "self", ")", ":", "\n", "        ", "return", "0.0", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.benchmarks.scoring.BenchmarkScoringRule.score_evaluation": [[317, 396], ["benchmark.task_specs", "environments.mujoco.rand_param_envs.gym.envs.spec", "numpy.array", "scoring._compute_episode_durations", "numpy.array", "numpy.array", "numpy.cumsum", "numpy.cumsum", "len", "min", "scoring._find_cutoffs_for_task", "scoring.BenchmarkScoringRule.score_and_solved_func", "scores.append", "solves.append", "numpy.array.append", "cutoff_lengths.append", "numpy.any", "_timestamps.append", "elapsed_times.append", "numpy.isfinite", "len", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.benchmarks.registration.Benchmark.task_specs", "home.repos.pwc.inspect_result.Rondorf_BOReL.envs.registration.spec", "home.repos.pwc.inspect_result.Rondorf_BOReL.benchmarks.scoring._compute_episode_durations", "home.repos.pwc.inspect_result.Rondorf_BOReL.benchmarks.scoring._find_cutoffs_for_task"], ["", "def", "score_evaluation", "(", "self", ",", "benchmark", ",", "env_id", ",", "data_sources", ",", "initial_reset_timestamps", ",", "episode_lengths", ",", "episode_rewards", ",", "episode_types", ",", "timestamps", ")", ":", "\n", "        ", "tasks", "=", "benchmark", ".", "task_specs", "(", "env_id", ")", "\n", "spec", "=", "envs", ".", "spec", "(", "env_id", ")", "\n", "\n", "#### 0. Compute timing stats", "\n", "\n", "if", "len", "(", "initial_reset_timestamps", ")", ">", "0", ":", "\n", "            ", "initial_reset_timestamp", "=", "min", "(", "initial_reset_timestamps", ")", "\n", "", "else", ":", "\n", "            ", "initial_reset_timestamp", "=", "0", "\n", "\n", "\n", "# How long each episode actually took", "\n", "", "timestamps", "=", "np", ".", "array", "(", "timestamps", ")", "\n", "durations", "=", "_compute_episode_durations", "(", "initial_reset_timestamps", ",", "data_sources", ",", "timestamps", ")", "\n", "\n", "#### Grab the data corresponding to each of evaluation/training", "\n", "lengths", "=", "np", ".", "array", "(", "episode_lengths", ")", "\n", "rewards", "=", "np", ".", "array", "(", "episode_rewards", ")", "\n", "\n", "#### Calculate the total elapsed time (in various units)", "\n", "#### for each episode", "\n", "\n", "# How many training timesteps have elapsed by the end of each", "\n", "# episode. Not to be confused with Unix timestamps.", "\n", "elapsed_timesteps", "=", "np", ".", "cumsum", "(", "lengths", ")", "\n", "# Total number of seconds elapsed by the end of each", "\n", "# episode. Note that with n parallel workers each running for", "\n", "# m seconds, we want to count the total time as n * m.", "\n", "elapsed_seconds", "=", "np", ".", "cumsum", "(", "durations", ")", "\n", "\n", "# List of score for each task", "\n", "scores", "=", "[", "]", "\n", "# List of lists of solved episodes for each task", "\n", "solves", "=", "[", "]", "\n", "# List of lists of episode rewards for each task", "\n", "rewards", "=", "[", "]", "\n", "# List of lists of relevant episode lengths for each task", "\n", "cutoff_lengths", "=", "[", "]", "\n", "_timestamps", "=", "[", "]", "\n", "elapsed_times", "=", "[", "]", "\n", "for", "task", "in", "tasks", ":", "\n", "# Find the first episode where we're over the allotted", "\n", "# training timesteps.", "\n", "            ", "cutoff_idx", "=", "_find_cutoffs_for_task", "(", "task", ",", "elapsed_timesteps", ",", "elapsed_seconds", ")", "\n", "if", "not", "np", ".", "isfinite", "(", "cutoff_idx", ")", ":", "\n", "# All episodes are fair game", "\n", "                ", "cutoff_idx", "=", "len", "(", "lengths", ")", "\n", "\n", "", "reward", "=", "np", ".", "array", "(", "episode_rewards", ")", "[", ":", "cutoff_idx", "]", "\n", "\n", "score", ",", "solved", "=", "self", ".", "score_and_solved_func", "(", "task", ",", "reward", ",", "elapsed_seconds", "[", ":", "cutoff_idx", "]", ")", "\n", "\n", "scores", ".", "append", "(", "score", ")", "\n", "solves", ".", "append", "(", "solved", ")", "\n", "rewards", ".", "append", "(", "reward", ")", "\n", "cutoff_lengths", ".", "append", "(", "lengths", "[", ":", "cutoff_idx", "]", ")", "\n", "\n", "if", "np", ".", "any", "(", "timestamps", "[", ":", "cutoff_idx", "]", ")", ":", "\n", "                ", "last_timestamp", "=", "timestamps", "[", "cutoff_idx", "-", "1", "]", "\n", "elapsed_time", "=", "elapsed_seconds", "[", "cutoff_idx", "-", "1", "]", "\n", "", "else", ":", "\n", "# If we don't have any valid episodes, then the", "\n", "# last valid timestamp is when we started.", "\n", "                ", "last_timestamp", "=", "initial_reset_timestamp", "\n", "elapsed_time", "=", "0.0", "\n", "\n", "# Record the timestamp of the last episode", "\n", "", "_timestamps", ".", "append", "(", "last_timestamp", ")", "\n", "elapsed_times", ".", "append", "(", "elapsed_time", ")", "\n", "\n", "", "return", "{", "\n", "'rewards'", ":", "rewards", ",", "\n", "'lengths'", ":", "cutoff_lengths", ",", "\n", "'scores'", ":", "scores", ",", "\n", "'solves'", ":", "solves", ",", "\n", "'timestamps'", ":", "_timestamps", ",", "\n", "'elapsed_times'", ":", "elapsed_times", ",", "\n", "'initial_reset_timestamp'", ":", "initial_reset_timestamp", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.benchmarks.scoring.BenchmarkScoringRule.score_benchmark": [[398, 404], ["episode_scores.items", "numpy.mean"], "methods", ["None"], ["", "def", "score_benchmark", "(", "self", ",", "benchmark", ",", "episode_scores", ")", ":", "\n", "        ", "all_scores", "=", "[", "]", "\n", "for", "env_id", ",", "scores", "in", "episode_scores", ".", "items", "(", ")", ":", "\n", "            ", "all_scores", "+=", "scores", "\n", "\n", "", "return", "np", ".", "mean", "(", "all_scores", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.benchmarks.scoring.TotalReward.__init__": [[419, 421], ["scoring.BenchmarkScoringRule.__init__"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "TotalReward", ",", "self", ")", ".", "__init__", "(", "total_reward_from_episode_rewards", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.benchmarks.scoring.TotalReward.description": [[422, 429], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "description", "(", "self", ")", ":", "\n", "        ", "return", "\"\"\"\nThe scorer takes the average reward over all episodes collected before a certain number of steps or seconds of experience have elapsed for each trial.\n\nThis reward is clipped and normalized to be between 0.0 and 1.0 using thresholds defined on a per-environment basis.\n        \"\"\"", ".", "rstrip", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.benchmarks.scoring.RewardPerTime.__init__": [[446, 448], ["scoring.BenchmarkScoringRule.__init__"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "RewardPerTime", ",", "self", ")", ".", "__init__", "(", "reward_per_time_from_episode_rewards", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.benchmarks.scoring.RewardPerTime.description": [[449, 456], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "description", "(", "self", ")", ":", "\n", "        ", "return", "\"\"\"\nThe score is the average reward divided by the number of timesteps across all episodes collected before a certain number of steps or seconds of experience have elapsed for each trial.\n\nThis reward is clipped and normalized to be between 0.0 and 1.0 using thresholds defined on a per-environment basis.\n        \"\"\"", ".", "rstrip", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Rondorf_BOReL.benchmarks.scoring.benchmark_aggregate_score": [[9, 63], ["benchmark.score_benchmark", "len", "numpy.sum", "numpy.sum", "dict", "benchmark.task_specs", "env_id_to_benchmark_results.get", "range", "max", "min", "len", "scores.setdefault", "scores.setdefault.append", "solves.setdefault", "start_times.append", "end_times.append", "elapsed_times.extend", "scores.setdefault", "scores.setdefault.append", "solves.values", "zip", "numpy.sum", "max"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.benchmarks.scoring.BenchmarkScoringRule.score_benchmark", "home.repos.pwc.inspect_result.Rondorf_BOReL.benchmarks.registration.Benchmark.task_specs"], ["def", "benchmark_aggregate_score", "(", "benchmark", ",", "env_id_to_benchmark_results", ")", ":", "\n", "    ", "scores", "=", "{", "}", "\n", "solves", "=", "{", "}", "\n", "start_times", "=", "[", "]", "\n", "end_times", "=", "[", "]", "\n", "elapsed_times", "=", "[", "]", "\n", "\n", "# N.B. for each env_id, our benchmark_results will have a list of scores,", "\n", "# solves, and times corresponding to the different tasks for that env_id. If", "\n", "# we don't have enough trials, we zero out the score.", "\n", "# TODO could do smarter matching of results to trials if we have extras", "\n", "# TODO for now, baked in assumption that the number of trials is the", "\n", "# same for all tasks involving a particular env.", "\n", "for", "env_id", "in", "benchmark", ".", "env_ids", ":", "\n", "        ", "task_list", "=", "benchmark", ".", "task_specs", "(", "env_id", ")", "\n", "num_trials", "=", "task_list", "[", "0", "]", ".", "trials", "\n", "benchmark_results", "=", "env_id_to_benchmark_results", ".", "get", "(", "env_id", ",", "[", "]", ")", "\n", "for", "trial", "in", "range", "(", "num_trials", ")", ":", "\n", "            ", "if", "trial", "<", "len", "(", "benchmark_results", ")", ":", "\n", "# okay process this benchmark result against this trial", "\n", "                ", "benchmark_result", "=", "benchmark_results", "[", "trial", "]", "\n", "\n", "env_scores", "=", "scores", ".", "setdefault", "(", "env_id", ",", "[", "]", ")", "\n", "env_scores", ".", "append", "(", "benchmark_result", "[", "'scores'", "]", ")", "\n", "\n", "# note: solves is a list of lists - for each task for this env,", "\n", "# does each episode solve that task. We consider the env solved", "\n", "# if every episode for every task is individually solved.", "\n", "solved", "=", "solves", ".", "setdefault", "(", "env_id", ",", "True", ")", "\n", "solves", "[", "env_id", "]", "=", "solved", "and", "np", ".", "sum", "(", "benchmark_result", "[", "'solves'", "]", ")", "\n", "\n", "# these timestamps are a list of the first / last valid timestamp", "\n", "# for each task involving this env.", "\n", "start_times", ".", "append", "(", "benchmark_result", "[", "'initial_reset_timestamp'", "]", ")", "\n", "end_times", ".", "append", "(", "max", "(", "benchmark_result", "[", "'timestamps'", "]", ")", ")", "\n", "elapsed_times", ".", "extend", "(", "benchmark_result", "[", "'elapsed_times'", "]", ")", "\n", "", "else", ":", "\n", "# no matching benchmark result for this trial", "\n", "                ", "env_scores", "=", "scores", ".", "setdefault", "(", "env_id", ",", "[", "]", ")", "\n", "env_scores", ".", "append", "(", "[", "benchmark", ".", "scorer", ".", "null_score", "for", "_", "in", "task_list", "]", ")", "\n", "solves", "[", "env_id", "]", "=", "False", "\n", "\n", "", "", "", "score", "=", "benchmark", ".", "score_benchmark", "(", "scores", ")", "\n", "num_envs_solved", "=", "len", "(", "[", "s", "for", "s", "in", "solves", ".", "values", "(", ")", "if", "s", "]", ")", "\n", "start_to_finish_seconds", "=", "max", "(", "end_times", ")", "-", "min", "(", "start_times", ")", "if", "end_times", "and", "start_times", "else", "0.0", "\n", "summed_task_wall_time", "=", "np", ".", "sum", "(", "[", "end", "-", "start", "for", "end", ",", "start", "in", "zip", "(", "end_times", ",", "start_times", ")", "]", ")", "\n", "summed_training_seconds", "=", "np", ".", "sum", "(", "elapsed_times", ")", "\n", "\n", "return", "dict", "(", "\n", "score", "=", "score", ",", "\n", "num_envs_solved", "=", "num_envs_solved", ",", "\n", "start_to_finish_seconds", "=", "start_to_finish_seconds", ",", "\n", "summed_task_wall_time", "=", "summed_task_wall_time", ",", "\n", "summed_training_seconds", "=", "summed_training_seconds", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.benchmarks.scoring._compute_episode_durations": [[254, 280], ["numpy.zeros", "numpy.array", "enumerate", "len", "numpy.where", "len"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.zeros"], ["", "", "def", "_compute_episode_durations", "(", "initial_reset_timestamps", ",", "data_sources", ",", "timestamps", ")", ":", "\n", "# We'd like to compute the actual time taken by each episode.", "\n", "# This should be a simple as subtracting adjoining timestamps", "\n", "\n", "# However all the monitor timestamps are mixed together from multiple", "\n", "# sources, so we do some munging to separate out by source the data_source", "\n", "# is an array of ints that is the same size as timestamps and maps back to", "\n", "# the original source initial_reset_timestamps is an array with the initial", "\n", "# timestamp for each source file", "\n", "\n", "# TODO if we don't merge monitor files together at a higher level this logic", "\n", "# can be a lot simpler", "\n", "\n", "    ", "durations", "=", "np", ".", "zeros", "(", "len", "(", "timestamps", ")", ")", "\n", "data_sources", "=", "np", ".", "array", "(", "data_sources", ")", "\n", "for", "source", ",", "initial_ts", "in", "enumerate", "(", "initial_reset_timestamps", ")", ":", "\n", "        ", "(", "source_indexes", ",", ")", "=", "np", ".", "where", "(", "data_sources", "==", "source", ")", "\n", "\n", "if", "len", "(", "source_indexes", ")", "==", "0", ":", "\n", "            ", "continue", "\n", "# Once we know the indexes corresponding to a particular", "\n", "# source (i.e. worker thread), we can just subtract", "\n", "# adjoining values", "\n", "", "durations", "[", "source_indexes", "[", "0", "]", "]", "=", "timestamps", "[", "source_indexes", "[", "0", "]", "]", "-", "initial_ts", "\n", "durations", "[", "source_indexes", "[", "1", ":", "]", "]", "=", "timestamps", "[", "source_indexes", "[", "1", ":", "]", "]", "-", "timestamps", "[", "source_indexes", "[", ":", "-", "1", "]", "]", "\n", "", "return", "durations", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.benchmarks.scoring._find_cutoffs_for_task": [[281, 296], ["numpy.where", "numpy.where", "len", "min", "len", "min"], "function", ["None"], ["", "def", "_find_cutoffs_for_task", "(", "task", ",", "elapsed_timesteps", ",", "elapsed_seconds", ")", ":", "\n", "# Apply max_timesteps and max_seconds cutoffs. Return np.inf if no cutoff is necessary", "\n", "    ", "cutoff_idx", "=", "np", ".", "inf", "\n", "if", "task", ".", "max_timesteps", ":", "\n", "# this looks a little funny, but we want the first idx greater", "\n", "# than the cutoff", "\n", "        ", "(", "timestep_cutoff", ",", ")", "=", "np", ".", "where", "(", "elapsed_timesteps", ">", "task", ".", "max_timesteps", ")", "\n", "if", "len", "(", "timestep_cutoff", ")", ">", "0", ":", "\n", "            ", "cutoff_idx", "=", "min", "(", "cutoff_idx", ",", "timestep_cutoff", "[", "0", "]", ")", "\n", "", "", "if", "task", ".", "max_seconds", ":", "\n", "        ", "(", "seconds_cutoff", ",", ")", "=", "np", ".", "where", "(", "elapsed_seconds", ">", "task", ".", "max_seconds", ")", "\n", "if", "len", "(", "seconds_cutoff", ")", ">", "0", ":", "\n", "            ", "cutoff_idx", "=", "min", "(", "cutoff_idx", ",", "seconds_cutoff", "[", "0", "]", ")", "\n", "\n", "", "", "return", "cutoff_idx", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.benchmarks.scoring.total_reward_from_episode_rewards": [[406, 416], ["numpy.clip", "numpy.mean"], "function", ["None"], ["", "", "def", "total_reward_from_episode_rewards", "(", "task", ",", "reward", ",", "elapsed_seconds", ")", ":", "\n", "    ", "\"TotalReward scoring takes the mean of all rewards earned over the course of the episode and clips it between reward_floor and reward_ceiling\"", "\n", "# reward is an array containing valid rewards for the episode", "\n", "floor", "=", "task", ".", "reward_floor", "\n", "ceiling", "=", "task", ".", "reward_ceiling", "\n", "\n", "solved", "=", "reward", ">=", "ceiling", "\n", "# Sum raw rewards, linearly rescale to between 0 and 1", "\n", "score", "=", "np", ".", "clip", "(", "(", "np", ".", "mean", "(", "reward", ")", "-", "floor", ")", "/", "(", "ceiling", "-", "floor", ")", ",", "0", ",", "1", ")", "\n", "return", "score", ",", "solved", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.benchmarks.scoring.reward_per_time_from_episode_rewards": [[431, 443], ["numpy.zeros", "numpy.clip", "len", "numpy.any", "numpy.sum"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.zeros"], ["", "", "def", "reward_per_time_from_episode_rewards", "(", "task", ",", "reward", ",", "elapsed_seconds", ")", ":", "\n", "    ", "\"RewardPerTime scoring takes the total reward earned over the course of the episode, divides by the elapsed time, and clips it between reward_floor and reward_ceiling\"", "\n", "floor", "=", "task", ".", "reward_floor", "\n", "ceiling", "=", "task", ".", "reward_ceiling", "\n", "\n", "# TODO actually compute solves for this", "\n", "solved", "=", "np", ".", "zeros", "(", "len", "(", "reward", ")", ")", "\n", "\n", "# Sum the rewards for all episodes, divide by total time taken for all episodes", "\n", "reward_per_second", "=", "np", ".", "sum", "(", "reward", ")", "/", "elapsed_seconds", "[", "-", "1", "]", "if", "np", ".", "any", "(", "elapsed_seconds", ")", "else", "0.0", "\n", "score", "=", "np", ".", "clip", "(", "(", "reward_per_second", "-", "floor", ")", "/", "(", "ceiling", "-", "floor", ")", ",", "0", ",", "1", ")", "\n", "return", "score", ",", "solved", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.monitoring.video_recorder.VideoRecorder.__init__": [[37, 95], ["env.metadata.get", "env.metadata.get", "os.path.splitext", "os.path.splitext", "os.path.splitext", "os.path.splitext", "video_recorder.touch", "env.metadata.get", "video_recorder.VideoRecorder.write_metadata", "logger.info", "environments.mujoco.rand_param_envs.gym.error.Error", "environments.mujoco.rand_param_envs.gym.error.Error", "logger.info", "tempfile.NamedTemporaryFile"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.monitoring.video_recorder.touch", "home.repos.pwc.inspect_result.Rondorf_BOReL.monitoring.video_recorder.VideoRecorder.write_metadata"], ["def", "__init__", "(", "self", ",", "env", ",", "path", "=", "None", ",", "metadata", "=", "None", ",", "enabled", "=", "True", ",", "base_path", "=", "None", ")", ":", "\n", "        ", "modes", "=", "env", ".", "metadata", ".", "get", "(", "'render.modes'", ",", "[", "]", ")", "\n", "self", ".", "_async", "=", "env", ".", "metadata", ".", "get", "(", "'semantics.async'", ")", "\n", "self", ".", "enabled", "=", "enabled", "\n", "\n", "# Don't bother setting anything else if not enabled", "\n", "if", "not", "self", ".", "enabled", ":", "\n", "            ", "return", "\n", "\n", "", "self", ".", "ansi_mode", "=", "False", "\n", "if", "'rgb_array'", "not", "in", "modes", ":", "\n", "            ", "if", "'ansi'", "in", "modes", ":", "\n", "                ", "self", ".", "ansi_mode", "=", "True", "\n", "", "else", ":", "\n", "                ", "logger", ".", "info", "(", "'Disabling video recorder because {} neither supports video mode \"rgb_array\" nor \"ansi\".'", ".", "format", "(", "env", ")", ")", "\n", "# Whoops, turns out we shouldn't be enabled after all", "\n", "self", ".", "enabled", "=", "False", "\n", "return", "\n", "\n", "", "", "if", "path", "is", "not", "None", "and", "base_path", "is", "not", "None", ":", "\n", "            ", "raise", "error", ".", "Error", "(", "\"You can pass at most one of `path` or `base_path`.\"", ")", "\n", "\n", "", "self", ".", "last_frame", "=", "None", "\n", "self", ".", "env", "=", "env", "\n", "\n", "required_ext", "=", "'.json'", "if", "self", ".", "ansi_mode", "else", "'.mp4'", "\n", "if", "path", "is", "None", ":", "\n", "            ", "if", "base_path", "is", "not", "None", ":", "\n", "# Base path given, append ext", "\n", "                ", "path", "=", "base_path", "+", "required_ext", "\n", "", "else", ":", "\n", "# Otherwise, just generate a unique filename", "\n", "                ", "with", "tempfile", ".", "NamedTemporaryFile", "(", "suffix", "=", "required_ext", ",", "delete", "=", "False", ")", "as", "f", ":", "\n", "                    ", "path", "=", "f", ".", "name", "\n", "", "", "", "self", ".", "path", "=", "path", "\n", "\n", "path_base", ",", "actual_ext", "=", "os", ".", "path", ".", "splitext", "(", "self", ".", "path", ")", "\n", "\n", "if", "actual_ext", "!=", "required_ext", ":", "\n", "            ", "hint", "=", "\" HINT: The environment is text-only, therefore we're recording its text output in a structured JSON format.\"", "if", "self", ".", "ansi_mode", "else", "''", "\n", "raise", "error", ".", "Error", "(", "\"Invalid path given: {} -- must have file extension {}.{}\"", ".", "format", "(", "self", ".", "path", ",", "required_ext", ",", "hint", ")", ")", "\n", "# Touch the file in any case, so we know it's present. (This", "\n", "# corrects for platform platform differences. Using ffmpeg on", "\n", "# OS X, the file is precreated, but not on Linux.", "\n", "", "touch", "(", "path", ")", "\n", "\n", "self", ".", "frames_per_sec", "=", "env", ".", "metadata", ".", "get", "(", "'video.frames_per_second'", ",", "30", ")", "\n", "self", ".", "encoder", "=", "None", "# lazily start the process", "\n", "self", ".", "broken", "=", "False", "\n", "\n", "# Dump metadata", "\n", "self", ".", "metadata", "=", "metadata", "or", "{", "}", "\n", "self", ".", "metadata", "[", "'content_type'", "]", "=", "'video/vnd.openai.ansivid'", "if", "self", ".", "ansi_mode", "else", "'video/mp4'", "\n", "self", ".", "metadata_path", "=", "'{}.meta.json'", ".", "format", "(", "path_base", ")", "\n", "self", ".", "write_metadata", "(", ")", "\n", "\n", "logger", ".", "info", "(", "'Starting new video recorder writing to %s'", ",", "self", ".", "path", ")", "\n", "self", ".", "empty", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.monitoring.video_recorder.VideoRecorder.functional": [[96, 99], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "functional", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "enabled", "and", "not", "self", ".", "broken", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.monitoring.video_recorder.VideoRecorder.capture_frame": [[100, 122], ["logger.debug", "video_recorder.VideoRecorder.env.render", "logger.warn", "video_recorder.VideoRecorder._encode_ansi_frame", "video_recorder.VideoRecorder._encode_image_frame"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.render", "home.repos.pwc.inspect_result.Rondorf_BOReL.monitoring.video_recorder.VideoRecorder._encode_ansi_frame", "home.repos.pwc.inspect_result.Rondorf_BOReL.monitoring.video_recorder.VideoRecorder._encode_image_frame"], ["", "def", "capture_frame", "(", "self", ")", ":", "\n", "        ", "\"\"\"Render the given `env` and add the resulting frame to the video.\"\"\"", "\n", "if", "not", "self", ".", "functional", ":", "return", "\n", "logger", ".", "debug", "(", "'Capturing video frame: path=%s'", ",", "self", ".", "path", ")", "\n", "\n", "render_mode", "=", "'ansi'", "if", "self", ".", "ansi_mode", "else", "'rgb_array'", "\n", "frame", "=", "self", ".", "env", ".", "render", "(", "mode", "=", "render_mode", ")", "\n", "\n", "if", "frame", "is", "None", ":", "\n", "            ", "if", "self", ".", "_async", ":", "\n", "                ", "return", "\n", "", "else", ":", "\n", "# Indicates a bug in the environment: don't want to raise", "\n", "# an error here.", "\n", "                ", "logger", ".", "warn", "(", "'Env returned None on render(). Disabling further rendering for video recorder by marking as disabled: path=%s metadata_path=%s'", ",", "self", ".", "path", ",", "self", ".", "metadata_path", ")", "\n", "self", ".", "broken", "=", "True", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "last_frame", "=", "frame", "\n", "if", "self", ".", "ansi_mode", ":", "\n", "                ", "self", ".", "_encode_ansi_frame", "(", "frame", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "_encode_image_frame", "(", "frame", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.monitoring.video_recorder.VideoRecorder.close": [[123, 153], ["video_recorder.VideoRecorder.write_metadata", "logger.debug", "video_recorder.VideoRecorder.encoder.close", "os.remove", "os.remove", "os.remove", "os.remove", "logger.info", "os.path.exists", "os.path.exists", "os.path.exists", "os.path.exists", "os.remove", "os.remove", "os.remove", "os.remove"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.monitoring.video_recorder.VideoRecorder.write_metadata", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.close"], ["", "", "", "def", "close", "(", "self", ")", ":", "\n", "        ", "\"\"\"Make sure to manually close, or else you'll leak the encoder process\"\"\"", "\n", "if", "not", "self", ".", "enabled", ":", "\n", "            ", "return", "\n", "\n", "", "if", "self", ".", "encoder", ":", "\n", "            ", "logger", ".", "debug", "(", "'Closing video encoder: path=%s'", ",", "self", ".", "path", ")", "\n", "self", ".", "encoder", ".", "close", "(", ")", "\n", "self", ".", "encoder", "=", "None", "\n", "", "else", ":", "\n", "# No frames captured. Set metadata, and remove the empty output file.", "\n", "            ", "os", ".", "remove", "(", "self", ".", "path", ")", "\n", "\n", "if", "self", ".", "metadata", "is", "None", ":", "\n", "                ", "self", ".", "metadata", "=", "{", "}", "\n", "", "self", ".", "metadata", "[", "'empty'", "]", "=", "True", "\n", "\n", "# If broken, get rid of the output file, otherwise we'd leak it.", "\n", "", "if", "self", ".", "broken", ":", "\n", "            ", "logger", ".", "info", "(", "'Cleaning up paths for broken video recorder: path=%s metadata_path=%s'", ",", "self", ".", "path", ",", "self", ".", "metadata_path", ")", "\n", "\n", "# Might have crashed before even starting the output file, don't try to remove in that case.", "\n", "if", "os", ".", "path", ".", "exists", "(", "self", ".", "path", ")", ":", "\n", "                ", "os", ".", "remove", "(", "self", ".", "path", ")", "\n", "\n", "", "if", "self", ".", "metadata", "is", "None", ":", "\n", "                ", "self", ".", "metadata", "=", "{", "}", "\n", "", "self", ".", "metadata", "[", "'broken'", "]", "=", "True", "\n", "\n", "", "self", ".", "write_metadata", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.monitoring.video_recorder.VideoRecorder.write_metadata": [[154, 157], ["open", "json.dump"], "methods", ["None"], ["", "def", "write_metadata", "(", "self", ")", ":", "\n", "        ", "with", "open", "(", "self", ".", "metadata_path", ",", "'w'", ")", "as", "f", ":", "\n", "            ", "json", ".", "dump", "(", "self", ".", "metadata", ",", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.monitoring.video_recorder.VideoRecorder._encode_ansi_frame": [[158, 164], ["video_recorder.VideoRecorder.encoder.capture_frame", "video_recorder.TextEncoder"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.monitoring.video_recorder.ImageEncoder.capture_frame"], ["", "", "def", "_encode_ansi_frame", "(", "self", ",", "frame", ")", ":", "\n", "        ", "if", "not", "self", ".", "encoder", ":", "\n", "            ", "self", ".", "encoder", "=", "TextEncoder", "(", "self", ".", "path", ",", "self", ".", "frames_per_sec", ")", "\n", "self", ".", "metadata", "[", "'encoder_version'", "]", "=", "self", ".", "encoder", ".", "version_info", "\n", "", "self", ".", "encoder", ".", "capture_frame", "(", "frame", ")", "\n", "self", ".", "empty", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.monitoring.video_recorder.VideoRecorder._encode_image_frame": [[165, 177], ["video_recorder.ImageEncoder", "video_recorder.VideoRecorder.encoder.capture_frame", "logger.warn"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.monitoring.video_recorder.ImageEncoder.capture_frame"], ["", "def", "_encode_image_frame", "(", "self", ",", "frame", ")", ":", "\n", "        ", "if", "not", "self", ".", "encoder", ":", "\n", "            ", "self", ".", "encoder", "=", "ImageEncoder", "(", "self", ".", "path", ",", "frame", ".", "shape", ",", "self", ".", "frames_per_sec", ")", "\n", "self", ".", "metadata", "[", "'encoder_version'", "]", "=", "self", ".", "encoder", ".", "version_info", "\n", "\n", "", "try", ":", "\n", "            ", "self", ".", "encoder", ".", "capture_frame", "(", "frame", ")", "\n", "", "except", "error", ".", "InvalidFrame", "as", "e", ":", "\n", "            ", "logger", ".", "warn", "(", "'Tried to pass invalid video frame, marking as broken: %s'", ",", "e", ")", "\n", "self", ".", "broken", "=", "True", "\n", "", "else", ":", "\n", "            ", "self", ".", "empty", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.monitoring.video_recorder.TextEncoder.__init__": [[183, 187], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "output_path", ",", "frames_per_sec", ")", ":", "\n", "        ", "self", ".", "output_path", "=", "output_path", "\n", "self", ".", "frames_per_sec", "=", "frames_per_sec", "\n", "self", ".", "frames", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.monitoring.video_recorder.TextEncoder.capture_frame": [[188, 206], ["isinstance", "frame.getvalue.encode", "video_recorder.TextEncoder.frames.append", "isinstance", "six.b", "six.b", "six.b", "six.b", "environments.mujoco.rand_param_envs.gym.error.InvalidFrame", "six.b", "six.b", "six.b", "six.b", "environments.mujoco.rand_param_envs.gym.error.InvalidFrame", "frame.getvalue", "environments.mujoco.rand_param_envs.gym.error.InvalidFrame", "type"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.encode", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjvGeomWrapper.type"], ["", "def", "capture_frame", "(", "self", ",", "frame", ")", ":", "\n", "        ", "string", "=", "None", "\n", "if", "isinstance", "(", "frame", ",", "str", ")", ":", "\n", "            ", "string", "=", "frame", "\n", "", "elif", "isinstance", "(", "frame", ",", "StringIO", ")", ":", "\n", "            ", "string", "=", "frame", ".", "getvalue", "(", ")", "\n", "", "else", ":", "\n", "            ", "raise", "error", ".", "InvalidFrame", "(", "'Wrong type {} for {}: text frame must be a string or StringIO'", ".", "format", "(", "type", "(", "frame", ")", ",", "frame", ")", ")", "\n", "\n", "", "frame_bytes", "=", "string", ".", "encode", "(", "'utf-8'", ")", "\n", "\n", "if", "frame_bytes", "[", "-", "1", ":", "]", "!=", "six", ".", "b", "(", "'\\n'", ")", ":", "\n", "            ", "raise", "error", ".", "InvalidFrame", "(", "'Frame must end with a newline: \"\"\"{}\"\"\"'", ".", "format", "(", "string", ")", ")", "\n", "\n", "", "if", "six", ".", "b", "(", "'\\r'", ")", "in", "frame_bytes", ":", "\n", "            ", "raise", "error", ".", "InvalidFrame", "(", "'Frame contains carriage returns (only newlines are allowed: \"\"\"{}\"\"\"'", ".", "format", "(", "string", ")", ")", "\n", "\n", "", "self", ".", "frames", ".", "append", "(", "frame_bytes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.monitoring.video_recorder.TextEncoder.close": [[207, 236], ["six.b", "six.b", "six.b", "six.b", "max", "max", "open", "json.dump", "len", "frame.count", "max", "six.b", "six.b", "six.b", "six.b", "frame.replace", "len", "six.b", "six.b", "six.b", "six.b", "six.b", "six.b", "six.b", "six.b", "frame.split", "six.b", "six.b", "six.b", "six.b"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.count", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.replace", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.split"], ["", "def", "close", "(", "self", ")", ":", "\n", "#frame_duration = float(1) / self.frames_per_sec", "\n", "        ", "frame_duration", "=", ".5", "\n", "\n", "# Turn frames into events: clear screen beforehand", "\n", "# https://rosettacode.org/wiki/Terminal_control/Clear_the_screen#Python", "\n", "# https://rosettacode.org/wiki/Terminal_control/Cursor_positioning#Python", "\n", "clear_code", "=", "six", ".", "b", "(", "\"%c[2J\\033[1;1H\"", "%", "(", "27", ")", ")", "\n", "# Decode the bytes as UTF-8 since JSON may only contain UTF-8", "\n", "events", "=", "[", "(", "frame_duration", ",", "(", "clear_code", "+", "frame", ".", "replace", "(", "six", ".", "b", "(", "'\\n'", ")", ",", "six", ".", "b", "(", "'\\r\\n'", ")", ")", ")", ".", "decode", "(", "'utf-8'", ")", ")", "for", "frame", "in", "self", ".", "frames", "]", "\n", "\n", "# Calculate frame size from the largest frames.", "\n", "# Add some padding since we'll get cut off otherwise.", "\n", "height", "=", "max", "(", "[", "frame", ".", "count", "(", "six", ".", "b", "(", "'\\n'", ")", ")", "for", "frame", "in", "self", ".", "frames", "]", ")", "+", "1", "\n", "width", "=", "max", "(", "[", "max", "(", "[", "len", "(", "line", ")", "for", "line", "in", "frame", ".", "split", "(", "six", ".", "b", "(", "'\\n'", ")", ")", "]", ")", "for", "frame", "in", "self", ".", "frames", "]", ")", "+", "2", "\n", "\n", "data", "=", "{", "\n", "\"version\"", ":", "1", ",", "\n", "\"width\"", ":", "width", ",", "\n", "\"height\"", ":", "height", ",", "\n", "\"duration\"", ":", "len", "(", "self", ".", "frames", ")", "*", "frame_duration", ",", "\n", "\"command\"", ":", "\"-\"", ",", "\n", "\"title\"", ":", "\"gym VideoRecorder episode\"", ",", "\n", "\"env\"", ":", "{", "}", ",", "# could add some env metadata here", "\n", "\"stdout\"", ":", "events", ",", "\n", "}", "\n", "\n", "with", "open", "(", "self", ".", "output_path", ",", "'w'", ")", "as", "f", ":", "\n", "            ", "json", ".", "dump", "(", "data", ",", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.monitoring.video_recorder.TextEncoder.version_info": [[237, 240], ["None"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "version_info", "(", "self", ")", ":", "\n", "        ", "return", "{", "'backend'", ":", "'TextEncoder'", ",", "'version'", ":", "1", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.monitoring.video_recorder.ImageEncoder.__init__": [[242, 262], ["video_recorder.ImageEncoder.start", "environments.mujoco.rand_param_envs.gym.error.InvalidFrame", "distutils.spawn.find_executable", "distutils.spawn.find_executable", "distutils.spawn.find_executable", "distutils.spawn.find_executable", "distutils.spawn.find_executable", "distutils.spawn.find_executable", "distutils.spawn.find_executable", "distutils.spawn.find_executable", "environments.mujoco.rand_param_envs.gym.error.DependencyNotInstalled"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjviewer.MjViewer.start"], ["    ", "def", "__init__", "(", "self", ",", "output_path", ",", "frame_shape", ",", "frames_per_sec", ")", ":", "\n", "        ", "self", ".", "proc", "=", "None", "\n", "self", ".", "output_path", "=", "output_path", "\n", "# Frame shape should be lines-first, so w and h are swapped", "\n", "h", ",", "w", ",", "pixfmt", "=", "frame_shape", "\n", "if", "pixfmt", "!=", "3", "and", "pixfmt", "!=", "4", ":", "\n", "            ", "raise", "error", ".", "InvalidFrame", "(", "\"Your frame has shape {}, but we require (w,h,3) or (w,h,4), i.e. RGB values for a w-by-h image, with an optional alpha channl.\"", ".", "format", "(", "frame_shape", ")", ")", "\n", "", "self", ".", "wh", "=", "(", "w", ",", "h", ")", "\n", "self", ".", "includes_alpha", "=", "(", "pixfmt", "==", "4", ")", "\n", "self", ".", "frame_shape", "=", "frame_shape", "\n", "self", ".", "frames_per_sec", "=", "frames_per_sec", "\n", "\n", "if", "distutils", ".", "spawn", ".", "find_executable", "(", "'avconv'", ")", "is", "not", "None", ":", "\n", "            ", "self", ".", "backend", "=", "'avconv'", "\n", "", "elif", "distutils", ".", "spawn", ".", "find_executable", "(", "'ffmpeg'", ")", "is", "not", "None", ":", "\n", "            ", "self", ".", "backend", "=", "'ffmpeg'", "\n", "", "else", ":", "\n", "            ", "raise", "error", ".", "DependencyNotInstalled", "(", "\"\"\"Found neither the ffmpeg nor avconv executables. On OS X, you can install ffmpeg via `brew install ffmpeg`. On most Ubuntu variants, `sudo apt-get install ffmpeg` should do it. On Ubuntu 14.04, however, you'll need to install avconv with `sudo apt-get install libav-tools`.\"\"\"", ")", "\n", "\n", "", "self", ".", "start", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.monitoring.video_recorder.ImageEncoder.version_info": [[263, 270], ["str", "subprocess.check_output"], "methods", ["None"], ["", "@", "property", "\n", "def", "version_info", "(", "self", ")", ":", "\n", "        ", "return", "{", "\n", "'backend'", ":", "self", ".", "backend", ",", "\n", "'version'", ":", "str", "(", "subprocess", ".", "check_output", "(", "[", "self", ".", "backend", ",", "'-version'", "]", ",", "\n", "stderr", "=", "subprocess", ".", "STDOUT", ")", ")", ",", "\n", "'cmdline'", ":", "self", ".", "cmdline", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.monitoring.video_recorder.ImageEncoder.start": [[272, 296], ["logger.debug", "hasattr", "subprocess.Popen", "subprocess.Popen"], "methods", ["None"], ["", "def", "start", "(", "self", ")", ":", "\n", "        ", "self", ".", "cmdline", "=", "(", "self", ".", "backend", ",", "\n", "'-nostats'", ",", "\n", "'-loglevel'", ",", "'error'", ",", "# suppress warnings", "\n", "'-y'", ",", "\n", "'-r'", ",", "'%d'", "%", "self", ".", "frames_per_sec", ",", "\n", "\n", "# input", "\n", "'-f'", ",", "'rawvideo'", ",", "\n", "'-s:v'", ",", "'{}x{}'", ".", "format", "(", "*", "self", ".", "wh", ")", ",", "\n", "'-pix_fmt'", ",", "(", "'rgb32'", "if", "self", ".", "includes_alpha", "else", "'rgb24'", ")", ",", "\n", "'-i'", ",", "'-'", ",", "# this used to be /dev/stdin, which is not Windows-friendly", "\n", "\n", "# output", "\n", "'-vcodec'", ",", "'libx264'", ",", "\n", "'-pix_fmt'", ",", "'yuv420p'", ",", "\n", "self", ".", "output_path", "\n", ")", "\n", "\n", "logger", ".", "debug", "(", "'Starting ffmpeg with \"%s\"'", ",", "' '", ".", "join", "(", "self", ".", "cmdline", ")", ")", "\n", "if", "hasattr", "(", "os", ",", "'setsid'", ")", ":", "#setsid not present on Windows", "\n", "            ", "self", ".", "proc", "=", "subprocess", ".", "Popen", "(", "self", ".", "cmdline", ",", "stdin", "=", "subprocess", ".", "PIPE", ",", "preexec_fn", "=", "os", ".", "setsid", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "proc", "=", "subprocess", ".", "Popen", "(", "self", ".", "cmdline", ",", "stdin", "=", "subprocess", ".", "PIPE", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.monitoring.video_recorder.ImageEncoder.capture_frame": [[297, 309], ["isinstance", "environments.mujoco.rand_param_envs.gym.error.InvalidFrame", "environments.mujoco.rand_param_envs.gym.error.InvalidFrame", "environments.mujoco.rand_param_envs.gym.error.InvalidFrame", "distutils.version.LooseVersion", "distutils.version.LooseVersion", "distutils.version.LooseVersion", "distutils.version.LooseVersion", "distutils.version.LooseVersion", "distutils.version.LooseVersion", "distutils.version.LooseVersion", "distutils.version.LooseVersion", "video_recorder.ImageEncoder.proc.stdin.write", "video_recorder.ImageEncoder.proc.stdin.write", "frame.tobytes", "frame.tostring", "type"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjvGeomWrapper.type"], ["", "", "def", "capture_frame", "(", "self", ",", "frame", ")", ":", "\n", "        ", "if", "not", "isinstance", "(", "frame", ",", "(", "np", ".", "ndarray", ",", "np", ".", "generic", ")", ")", ":", "\n", "            ", "raise", "error", ".", "InvalidFrame", "(", "'Wrong type {} for {} (must be np.ndarray or np.generic)'", ".", "format", "(", "type", "(", "frame", ")", ",", "frame", ")", ")", "\n", "", "if", "frame", ".", "shape", "!=", "self", ".", "frame_shape", ":", "\n", "            ", "raise", "error", ".", "InvalidFrame", "(", "\"Your frame has shape {}, but the VideoRecorder is configured for shape {}.\"", ".", "format", "(", "frame", ".", "shape", ",", "self", ".", "frame_shape", ")", ")", "\n", "", "if", "frame", ".", "dtype", "!=", "np", ".", "uint8", ":", "\n", "            ", "raise", "error", ".", "InvalidFrame", "(", "\"Your frame has data type {}, but we require uint8 (i.e. RGB values from 0-255).\"", ".", "format", "(", "frame", ".", "dtype", ")", ")", "\n", "\n", "", "if", "distutils", ".", "version", ".", "LooseVersion", "(", "np", ".", "__version__", ")", ">=", "distutils", ".", "version", ".", "LooseVersion", "(", "'1.9.0'", ")", ":", "\n", "            ", "self", ".", "proc", ".", "stdin", ".", "write", "(", "frame", ".", "tobytes", "(", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "proc", ".", "stdin", ".", "write", "(", "frame", ".", "tostring", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.monitoring.video_recorder.ImageEncoder.close": [[310, 315], ["video_recorder.ImageEncoder.proc.stdin.close", "video_recorder.ImageEncoder.proc.wait", "logger.error"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.close"], ["", "", "def", "close", "(", "self", ")", ":", "\n", "        ", "self", ".", "proc", ".", "stdin", ".", "close", "(", ")", "\n", "ret", "=", "self", ".", "proc", ".", "wait", "(", ")", "\n", "if", "ret", "!=", "0", ":", "\n", "            ", "logger", ".", "error", "(", "\"VideoRecorder encoder exited with status {}\"", ".", "format", "(", "ret", ")", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.Rondorf_BOReL.monitoring.video_recorder.touch": [[17, 19], ["open().close", "open"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.close"], ["def", "touch", "(", "path", ")", ":", "\n", "    ", "open", "(", "path", ",", "'a'", ")", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.monitoring.stats_recorder.StatsRecorder.__init__": [[10, 31], ["os.path.join"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.join"], ["    ", "def", "__init__", "(", "self", ",", "directory", ",", "file_prefix", ",", "autoreset", "=", "False", ",", "env_id", "=", "None", ")", ":", "\n", "        ", "self", ".", "autoreset", "=", "autoreset", "\n", "self", ".", "env_id", "=", "env_id", "\n", "\n", "self", ".", "initial_reset_timestamp", "=", "None", "\n", "self", ".", "directory", "=", "directory", "\n", "self", ".", "file_prefix", "=", "file_prefix", "\n", "self", ".", "episode_lengths", "=", "[", "]", "\n", "self", ".", "episode_rewards", "=", "[", "]", "\n", "self", ".", "episode_types", "=", "[", "]", "# experimental addition", "\n", "self", ".", "_type", "=", "'t'", "\n", "self", ".", "timestamps", "=", "[", "]", "\n", "self", ".", "steps", "=", "None", "\n", "self", ".", "total_steps", "=", "0", "\n", "self", ".", "rewards", "=", "None", "\n", "\n", "self", ".", "done", "=", "None", "\n", "self", ".", "closed", "=", "False", "\n", "\n", "filename", "=", "'{}.stats.json'", ".", "format", "(", "self", ".", "file_prefix", ")", "\n", "self", ".", "path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "directory", ",", "filename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.monitoring.stats_recorder.StatsRecorder.type": [[36, 41], ["environments.mujoco.rand_param_envs.gym.error.Error"], "methods", ["None"], ["", "@", "type", ".", "setter", "\n", "def", "type", "(", "self", ",", "type", ")", ":", "\n", "        ", "if", "type", "not", "in", "[", "'t'", ",", "'e'", "]", ":", "\n", "            ", "raise", "error", ".", "Error", "(", "'Invalid episode type {}: must be t for training or e for evaluation'", ",", "type", ")", "\n", "", "self", ".", "_type", "=", "type", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.monitoring.stats_recorder.StatsRecorder.before_step": [[42, 49], ["environments.mujoco.rand_param_envs.gym.error.ResetNeeded", "environments.mujoco.rand_param_envs.gym.error.ResetNeeded"], "methods", ["None"], ["", "def", "before_step", "(", "self", ",", "action", ")", ":", "\n", "        ", "assert", "not", "self", ".", "closed", "\n", "\n", "if", "self", ".", "done", ":", "\n", "            ", "raise", "error", ".", "ResetNeeded", "(", "\"Trying to step environment which is currently done. While the monitor is active for {}, you cannot step beyond the end of an episode. Call 'env.reset()' to start the next episode.\"", ".", "format", "(", "self", ".", "env_id", ")", ")", "\n", "", "elif", "self", ".", "steps", "is", "None", ":", "\n", "            ", "raise", "error", ".", "ResetNeeded", "(", "\"Trying to step an environment before reset. While the monitor is active for {}, you must call 'env.reset()' before taking an initial step.\"", ".", "format", "(", "self", ".", "env_id", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.monitoring.stats_recorder.StatsRecorder.after_step": [[50, 63], ["stats_recorder.StatsRecorder.save_complete", "stats_recorder.StatsRecorder.before_reset", "stats_recorder.StatsRecorder.after_reset"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.monitoring.stats_recorder.StatsRecorder.save_complete", "home.repos.pwc.inspect_result.Rondorf_BOReL.monitoring.stats_recorder.StatsRecorder.before_reset", "home.repos.pwc.inspect_result.Rondorf_BOReL.monitoring.stats_recorder.StatsRecorder.after_reset"], ["", "", "def", "after_step", "(", "self", ",", "observation", ",", "reward", ",", "done", ",", "info", ")", ":", "\n", "        ", "self", ".", "steps", "+=", "1", "\n", "self", ".", "total_steps", "+=", "1", "\n", "self", ".", "rewards", "+=", "reward", "\n", "self", ".", "done", "=", "done", "\n", "\n", "if", "done", ":", "\n", "            ", "self", ".", "save_complete", "(", ")", "\n", "\n", "", "if", "done", ":", "\n", "            ", "if", "self", ".", "autoreset", ":", "\n", "                ", "self", ".", "before_reset", "(", ")", "\n", "self", ".", "after_reset", "(", "observation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.monitoring.stats_recorder.StatsRecorder.before_reset": [[64, 73], ["environments.mujoco.rand_param_envs.gym.error.Error", "time.time"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjDataWrapper.time"], ["", "", "", "def", "before_reset", "(", "self", ")", ":", "\n", "        ", "assert", "not", "self", ".", "closed", "\n", "\n", "if", "self", ".", "done", "is", "not", "None", "and", "not", "self", ".", "done", "and", "self", ".", "steps", ">", "0", ":", "\n", "            ", "raise", "error", ".", "Error", "(", "\"Tried to reset environment which is not done. While the monitor is active for {}, you cannot call reset() unless the episode is over.\"", ".", "format", "(", "self", ".", "env_id", ")", ")", "\n", "\n", "", "self", ".", "done", "=", "False", "\n", "if", "self", ".", "initial_reset_timestamp", "is", "None", ":", "\n", "            ", "self", ".", "initial_reset_timestamp", "=", "time", ".", "time", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.monitoring.stats_recorder.StatsRecorder.after_reset": [[74, 81], ["stats_recorder.StatsRecorder.episode_types.append"], "methods", ["None"], ["", "", "def", "after_reset", "(", "self", ",", "observation", ")", ":", "\n", "        ", "self", ".", "steps", "=", "0", "\n", "self", ".", "rewards", "=", "0", "\n", "# We write the type at the beginning of the episode. If a user", "\n", "# changes the type, it's more natural for it to apply next", "\n", "# time the user calls reset().", "\n", "self", ".", "episode_types", ".", "append", "(", "self", ".", "_type", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.monitoring.stats_recorder.StatsRecorder.save_complete": [[82, 87], ["stats_recorder.StatsRecorder.episode_lengths.append", "stats_recorder.StatsRecorder.episode_rewards.append", "stats_recorder.StatsRecorder.timestamps.append", "float", "time.time"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjDataWrapper.time"], ["", "def", "save_complete", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "steps", "is", "not", "None", ":", "\n", "            ", "self", ".", "episode_lengths", ".", "append", "(", "self", ".", "steps", ")", "\n", "self", ".", "episode_rewards", ".", "append", "(", "float", "(", "self", ".", "rewards", ")", ")", "\n", "self", ".", "timestamps", ".", "append", "(", "time", ".", "time", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.monitoring.stats_recorder.StatsRecorder.close": [[88, 91], ["stats_recorder.StatsRecorder.flush"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.monitoring.stats_recorder.StatsRecorder.flush"], ["", "", "def", "close", "(", "self", ")", ":", "\n", "        ", "self", ".", "flush", "(", ")", "\n", "self", ".", "closed", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.monitoring.stats_recorder.StatsRecorder.flush": [[92, 104], ["environments.mujoco.rand_param_envs.gym.utils.atomic_write.atomic_write", "json.dump"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.utils.atomic_write.atomic_write"], ["", "def", "flush", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "closed", ":", "\n", "            ", "return", "\n", "\n", "", "with", "atomic_write", ".", "atomic_write", "(", "self", ".", "path", ")", "as", "f", ":", "\n", "            ", "json", ".", "dump", "(", "{", "\n", "'initial_reset_timestamp'", ":", "self", ".", "initial_reset_timestamp", ",", "\n", "'timestamps'", ":", "self", ".", "timestamps", ",", "\n", "'episode_lengths'", ":", "self", ".", "episode_lengths", ",", "\n", "'episode_rewards'", ":", "self", ".", "episode_rewards", ",", "\n", "'episode_types'", ":", "self", ".", "episode_types", ",", "\n", "}", ",", "f", ",", "default", "=", "json_encode_np", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.Rondorf_BOReL.envs.registration.EnvSpec.__init__": [[39, 79], ["tags.get", "env_id_re.search", "env_id_re.search.group", "tags.get", "environments.mujoco.rand_param_envs.gym.error.Error"], "methods", ["None"], ["max_seconds", "=", "task", ".", "get", "(", "'max_seconds'", ")", ",", "\n", "reward_floor", "=", "task", ".", "get", "(", "'reward_floor'", ",", "0", ")", ",", "\n", "reward_ceiling", "=", "task", ".", "get", "(", "'reward_ceiling'", ",", "100", ")", ",", "\n", ")", "\n", "self", ".", "env_ids", ".", "add", "(", "task", ".", "env_id", ")", "\n", "compiled_tasks", ".", "append", "(", "task", ")", "\n", "\n", "", "self", ".", "tasks", "=", "compiled_tasks", "\n", "\n", "", "def", "task_specs", "(", "self", ",", "env_id", ")", ":", "\n", "# Could precompute this, but no need yet", "\n", "# Note that if we do precompute it we need to preserve the order in", "\n", "# which tasks are returned", "\n", "        ", "results", "=", "[", "task", "for", "task", "in", "self", ".", "tasks", "if", "task", ".", "env_id", "==", "env_id", "]", "\n", "if", "not", "results", ":", "\n", "            ", "raise", "error", ".", "Unregistered", "(", "'No task with env_id {} registered for benchmark {}'", ",", "env_id", ",", "self", ".", "id", ")", "\n", "", "return", "results", "\n", "\n", "", "def", "score_evaluation", "(", "self", ",", "env_id", ",", "data_sources", ",", "initial_reset_timestamps", ",", "episode_lengths", ",", "episode_rewards", ",", "episode_types", ",", "timestamps", ")", ":", "\n", "        ", "return", "self", ".", "scorer", ".", "score_evaluation", "(", "self", ",", "env_id", ",", "data_sources", ",", "initial_reset_timestamps", ",", "episode_lengths", ",", "episode_rewards", ",", "episode_types", ",", "timestamps", ")", "\n", "\n", "", "def", "score_benchmark", "(", "self", ",", "score_map", ")", ":", "\n", "        ", "return", "self", ".", "scorer", ".", "score_benchmark", "(", "self", ",", "score_map", ")", "\n", "\n", "", "", "BenchmarkView", "=", "collections", ".", "namedtuple", "(", "\"BenchmarkView\"", ",", "[", "\"name\"", ",", "\"benchmarks\"", ",", "\"primary\"", ",", "\"group\"", "]", ")", "\n", "\n", "class", "Registry", "(", "object", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "benchmarks", "=", "collections", ".", "OrderedDict", "(", ")", "\n", "self", ".", "benchmark_views", "=", "collections", ".", "OrderedDict", "(", ")", "\n", "self", ".", "benchmark_view_groups", "=", "collections", ".", "OrderedDict", "(", ")", "\n", "\n", "", "def", "register_benchmark_view", "(", "self", ",", "name", ",", "benchmarks", ",", "primary", ",", "group", ")", ":", "\n", "        "]], "home.repos.pwc.inspect_result.Rondorf_BOReL.envs.registration.EnvSpec.make": [[80, 92], ["registration.load", "load.", "environments.mujoco.rand_param_envs.gym.error.Error"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.envs.registration.load"], ["\n", "assert", "name", ".", "replace", "(", "\"_\"", ",", "''", ")", ".", "replace", "(", "'-'", ",", "''", ")", ".", "isalnum", "(", ")", ",", "\"Name of benchmark must be combination of letters, numbers, - and _\"", "\n", "if", "group", "is", "None", ":", "\n", "            ", "group", "=", "\"Miscellaneous\"", "\n", "", "bw", "=", "BenchmarkView", "(", "name", "=", "name", ",", "benchmarks", "=", "benchmarks", ",", "primary", "=", "primary", ",", "group", "=", "group", ")", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.envs.registration.EnvSpec.__repr__": [[93, 95], ["None"], "methods", ["None"], ["assert", "bw", ".", "primary", "in", "bw", ".", "benchmarks", "\n", "self", ".", "benchmark_views", "[", "bw", ".", "name", "]", "=", "bw", "\n", "if", "group", "not", "in", "self", ".", "benchmark_view_groups", ":", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.envs.registration.EnvSpec.timestep_limit": [[100, 103], ["None"], "methods", ["None"], ["        ", "self", ".", "benchmarks", "[", "id", "]", "=", "Benchmark", "(", "id", "=", "id", ",", "scorer", "=", "scorer", ",", "tasks", "=", "tasks", ",", "name", "=", "name", ",", "description", "=", "description", ")", "\n", "if", "add_view", ":", "\n", "            ", "self", ".", "register_benchmark_view", "(", "name", "=", "name", "if", "name", "is", "not", "None", "else", "id", ",", "\n", "benchmarks", "=", "[", "id", "]", ",", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.envs.registration.EnvRegistry.__init__": [[113, 115], ["None"], "methods", ["None"], ["", "", "", "registry", "=", "Registry", "(", ")", "\n", "register_benchmark", "=", "registry", ".", "register_benchmark", "\n", "register_benchmark_view", "=", "registry", ".", "register_benchmark_view", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.envs.registration.EnvRegistry.make": [[116, 126], ["logger.info", "registration.EnvRegistry.spec", "registration.EnvRegistry.make", "TimeLimit", "registration.EnvRegistry.tags.get"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.envs.registration.spec", "home.repos.pwc.inspect_result.Rondorf_BOReL.envs.registration.make"], ["benchmark_spec", "=", "registry", ".", "benchmark_spec", "\n", ""]], "home.repos.pwc.inspect_result.Rondorf_BOReL.envs.registration.EnvRegistry.all": [[128, 130], ["registration.EnvRegistry.env_specs.values"], "methods", ["None"], []], "home.repos.pwc.inspect_result.Rondorf_BOReL.envs.registration.EnvRegistry.spec": [[131, 148], ["env_id_re.search", "environments.mujoco.rand_param_envs.gym.error.Error", "env_id_re.search.group", "id.encode", "environments.mujoco.rand_param_envs.gym.error.DeprecatedEnv", "environments.mujoco.rand_param_envs.gym.error.UnregisteredEnv", "registration.EnvRegistry.env_specs.items"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.encode"], []], "home.repos.pwc.inspect_result.Rondorf_BOReL.envs.registration.EnvRegistry.register": [[149, 153], ["registration.EnvSpec", "environments.mujoco.rand_param_envs.gym.error.Error"], "methods", ["None"], []], "home.repos.pwc.inspect_result.Rondorf_BOReL.envs.registration.load": [[15, 19], ["pkg_resources.EntryPoint.parse", "pkg_resources.EntryPoint.parse.load"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.envs.registration.load"], ["self", ".", "max_seconds", "=", "max_seconds", "\n", "self", ".", "reward_floor", "=", "reward_floor", "\n", "self", ".", "reward_ceiling", "=", "reward_ceiling", "\n", "\n", "if", "max_timesteps", "is", "None", "and", "max_seconds", "is", "None", ":", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.envs.registration.register": [[157, 159], ["registry.register"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.envs.registration.register"], []], "home.repos.pwc.inspect_result.Rondorf_BOReL.envs.registration.make": [[160, 162], ["registry.make"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.envs.registration.make"], []], "home.repos.pwc.inspect_result.Rondorf_BOReL.envs.registration.spec": [[163, 165], ["registry.spec"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.envs.registration.spec"], []], "home.repos.pwc.inspect_result.Rondorf_BOReL.parameter_tuning.train_deep_cnn.CNNClassifierTraining.__init__": [[34, 57], ["environments.mujoco.rand_param_envs.gym.spaces.Tuple", "environments.mujoco.rand_param_envs.gym.spaces.Box", "train_deep_cnn.CNNClassifierTraining._reset", "environments.mujoco.rand_param_envs.gym.spaces.Box", "environments.mujoco.rand_param_envs.gym.spaces.Box", "environments.mujoco.rand_param_envs.gym.spaces.Box", "environments.mujoco.rand_param_envs.gym.spaces.Box", "environments.mujoco.rand_param_envs.gym.spaces.Box", "environments.mujoco.rand_param_envs.gym.spaces.Box", "environments.mujoco.rand_param_envs.gym.spaces.Box", "environments.mujoco.rand_param_envs.gym.spaces.Box"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.wrappers.monitoring.Monitor._reset"], ["def", "__init__", "(", "self", ",", "natural", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Initialize environment\n        \"\"\"", "\n", "\n", "# I use array of len 1 to store constants (otherwise there were some errors)", "\n", "self", ".", "action_space", "=", "spaces", ".", "Tuple", "(", "(", "\n", "spaces", ".", "Box", "(", "-", "5.0", ",", "0.0", ",", "1", ")", ",", "# learning rate", "\n", "spaces", ".", "Box", "(", "-", "7.0", ",", "-", "2.0", ",", "1", ")", ",", "# decay", "\n", "spaces", ".", "Box", "(", "-", "5.0", ",", "0.0", ",", "1", ")", ",", "# momentum", "\n", "spaces", ".", "Box", "(", "2", ",", "8", ",", "1", ")", ",", "# batch size", "\n", "spaces", ".", "Box", "(", "-", "6.0", ",", "1.0", ",", "1", ")", ",", "# l1 reg", "\n", "spaces", ".", "Box", "(", "-", "6.0", ",", "1.0", ",", "1", ")", ",", "# l2 reg", "\n", "spaces", ".", "Box", "(", "0.0", ",", "1.0", ",", "(", "5", ",", "2", ")", ")", ",", "# convolutional layer parameters", "\n", "spaces", ".", "Box", "(", "0.0", ",", "1.0", ",", "(", "2", ",", "2", ")", ")", ",", "# fully connected layer parameters", "\n", ")", ")", "\n", "\n", "# observation features, in order: num of instances, num of labels,", "\n", "# validation accuracy after training with given parameters", "\n", "self", ".", "observation_space", "=", "spaces", ".", "Box", "(", "-", "1e5", ",", "1e5", ",", "2", ")", "# validation accuracy", "\n", "\n", "# Start the first game", "\n", "self", ".", "_reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.parameter_tuning.train_deep_cnn.CNNClassifierTraining._step": [[58, 108], ["train_deep_cnn.CNNClassifierTraining.action_space.contains", "int", "train_deep_cnn.CNNClassifierTraining.train_blueprint", "train_deep_cnn.CNNClassifierTraining._get_obs"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.spaces.discrete.Discrete.contains", "home.repos.pwc.inspect_result.Rondorf_BOReL.parameter_tuning.train_deep_cnn.CNNClassifierTraining.train_blueprint", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.point_robot.PointEnv._get_obs"], ["", "def", "_step", "(", "self", ",", "action", ")", ":", "\n", "        ", "\"\"\"\n        Perform some action in the environment\n        \"\"\"", "\n", "assert", "self", ".", "action_space", ".", "contains", "(", "action", ")", "\n", "\n", "lr", ",", "decay", ",", "momentum", ",", "batch_size", ",", "l1", ",", "l2", ",", "convs", ",", "fcs", "=", "action", "\n", "\n", "# map ranges of inputs", "\n", "lr", "=", "(", "10.0", "**", "lr", "[", "0", "]", ")", ".", "astype", "(", "'float32'", ")", "\n", "decay", "=", "(", "10.0", "**", "decay", "[", "0", "]", ")", ".", "astype", "(", "'float32'", ")", "\n", "momentum", "=", "(", "10.0", "**", "momentum", "[", "0", "]", ")", ".", "astype", "(", "'float32'", ")", "\n", "\n", "batch_size", "=", "int", "(", "2", "**", "batch_size", "[", "0", "]", ")", "\n", "\n", "l1", "=", "(", "10.0", "**", "l1", "[", "0", "]", ")", ".", "astype", "(", "'float32'", ")", "\n", "l2", "=", "(", "10.0", "**", "l2", "[", "0", "]", ")", ".", "astype", "(", "'float32'", ")", "\n", "\n", "\"\"\"\n        names = [\"lr\", \"decay\", \"mom\", \"batch\", \"l1\", \"l2\"]\n        values = [lr, decay, momentum, batch_size, l1, l2]\n\n        for n,v in zip(names, values):\n            print(n,v)\n        \"\"\"", "\n", "\n", "diverged", ",", "acc", "=", "self", ".", "train_blueprint", "(", "lr", ",", "decay", ",", "momentum", ",", "batch_size", ",", "l1", ",", "l2", ",", "convs", ",", "fcs", ")", "\n", "\n", "# save best validation. If diverged, acc is zero", "\n", "if", "acc", ">", "self", ".", "best_val", ":", "\n", "            ", "self", ".", "best_val", "=", "acc", "\n", "\n", "", "self", ".", "previous_acc", "=", "acc", "\n", "\n", "self", ".", "epoch_idx", "+=", "1", "\n", "done", "=", "self", ".", "epoch_idx", "==", "10", "\n", "\n", "reward", "=", "self", ".", "best_val", "\n", "\n", "# as for number of labels increases, learning problem becomes", "\n", "# more difficult for fixed dataset size. In order to avoid", "\n", "# for the agent to ignore more complex datasets, on which", "\n", "# accuracy is low and concentrate on simple cases which bring bulk", "\n", "# of reward, reward is normalized by number of labels in dataset", "\n", "reward", "*=", "self", ".", "nb_classes", "\n", "\n", "# formula below encourages higher best validation", "\n", "reward", "+=", "reward", "**", "2", "\n", "\n", "return", "self", ".", "_get_obs", "(", ")", ",", "reward", ",", "done", ",", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.parameter_tuning.train_deep_cnn.CNNClassifierTraining._render": [[109, 115], ["print"], "methods", ["None"], ["", "def", "_render", "(", "self", ",", "mode", "=", "\"human\"", ",", "close", "=", "False", ")", ":", "\n", "\n", "        ", "if", "close", ":", "\n", "            ", "return", "\n", "\n", "", "print", "(", "\">> Step \"", ",", "self", ".", "epoch_idx", ",", "\"best validation:\"", ",", "self", ".", "best_val", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.parameter_tuning.train_deep_cnn.CNNClassifierTraining._get_obs": [[116, 123], ["numpy.array"], "methods", ["None"], ["", "def", "_get_obs", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Observe the environment. Is usually used after the step is taken\n        \"\"\"", "\n", "# observation as per observation space", "\n", "return", "np", ".", "array", "(", "[", "self", ".", "nb_inst", ",", "\n", "self", ".", "previous_acc", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.parameter_tuning.train_deep_cnn.CNNClassifierTraining.data_mix": [[124, 158], ["random.choice", "numpy.random.rand", "int", "keras.datasets.mnist.load_data", "keras.datasets.cifar10.load_data", "keras.datasets.cifar100.load_data", "numpy.expand_dims"], "methods", ["None"], ["", "def", "data_mix", "(", "self", ")", ":", "\n", "\n", "# randomly choose dataset", "\n", "        ", "dataset", "=", "random", ".", "choice", "(", "[", "'mnist'", ",", "'cifar10'", ",", "'cifar100'", "]", ")", "#", "\n", "\n", "n_labels", "=", "10", "\n", "\n", "if", "dataset", "==", "\"mnist\"", ":", "\n", "            ", "data", "=", "mnist", ".", "load_data", "(", ")", "\n", "\n", "", "if", "dataset", "==", "\"cifar10\"", ":", "\n", "            ", "data", "=", "cifar10", ".", "load_data", "(", ")", "\n", "\n", "", "if", "dataset", "==", "\"cifar100\"", ":", "\n", "            ", "data", "=", "cifar100", ".", "load_data", "(", ")", "\n", "n_labels", "=", "100", "\n", "\n", "# Choose dataset size. This affects regularization needed", "\n", "", "r", "=", "np", ".", "random", ".", "rand", "(", ")", "\n", "\n", "# not using full dataset to make regularization more important and", "\n", "# speed up testing a little bit", "\n", "data_size", "=", "int", "(", "2000", "*", "(", "1", "-", "r", ")", "+", "40000", "*", "r", ")", "\n", "\n", "# I do not use test data for validation, but last 10000 instances in dataset", "\n", "# so that trained models can be compared to results in literature", "\n", "(", "CX", ",", "CY", ")", ",", "(", "CXt", ",", "CYt", ")", "=", "data", "\n", "\n", "if", "dataset", "==", "\"mnist\"", ":", "\n", "            ", "CX", "=", "np", ".", "expand_dims", "(", "CX", ",", "axis", "=", "1", ")", "\n", "\n", "", "data", "=", "CX", "[", ":", "data_size", "]", ",", "CY", "[", ":", "data_size", "]", ",", "CX", "[", "-", "10000", ":", "]", ",", "CY", "[", "-", "10000", ":", "]", "\n", "\n", "return", "data", ",", "n_labels", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.parameter_tuning.train_deep_cnn.CNNClassifierTraining._reset": [[159, 169], ["train_deep_cnn.CNNClassifierTraining.generate_data", "train_deep_cnn.CNNClassifierTraining._get_obs"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.parameter_tuning.train_deep_cnn.CNNClassifierTraining.generate_data", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.point_robot.PointEnv._get_obs"], ["", "def", "_reset", "(", "self", ")", ":", "\n", "\n", "        ", "self", ".", "generate_data", "(", ")", "\n", "\n", "# initial accuracy values", "\n", "self", ".", "best_val", "=", "0.0", "\n", "self", ".", "previous_acc", "=", "0.0", "\n", "self", ".", "epoch_idx", "=", "0", "\n", "\n", "return", "self", ".", "_get_obs", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.parameter_tuning.train_deep_cnn.CNNClassifierTraining.generate_data": [[170, 174], ["train_deep_cnn.CNNClassifierTraining.data_mix", "len"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.parameter_tuning.convergence.ConvergenceControl.data_mix"], ["", "def", "generate_data", "(", "self", ")", ":", "\n", "        ", "self", ".", "data", ",", "self", ".", "nb_classes", "=", "self", ".", "data_mix", "(", ")", "\n", "# zero index corresponds to training inputs", "\n", "self", ".", "nb_inst", "=", "len", "(", "self", ".", "data", "[", "0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.parameter_tuning.train_deep_cnn.CNNClassifierTraining.train_blueprint": [[175, 278], ["keras.regularizers.WeightRegularizer", "keras.backend.variable", "keras.backend.variable", "keras.utils.np_utils.to_categorical", "keras.utils.np_utils.to_categorical", "keras.models.Sequential", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.optimizers.SGD", "keras.models.Sequential.compile", "X.astype.astype.astype", "Xv.astype.astype.astype", "keras.optimizers.SGD.lr.set_value", "keras.optimizers.SGD.decay.set_value", "keras.optimizers.SGD.momentum.set_value", "keras.regularizers.WeightRegularizer.l1.set_value", "keras.regularizers.WeightRegularizer.l2.set_value", "keras.models.Sequential.fit", "math.isnan", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.layers.Dense", "keras.layers.Activation", "keras.models.Sequential.evaluate", "int", "keras.layers.Convolution2D", "keras.layers.Activation", "keras.layers.MaxPooling2D", "keras.layers.Flatten", "keras.layers.Flatten", "int", "keras.layers.Dense", "keras.layers.Activation", "int"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.core.rl_algorithm.MetaRLAlgorithm.evaluate"], ["", "def", "train_blueprint", "(", "self", ",", "lr", ",", "decay", ",", "momentum", ",", "batch_size", ",", "l1", ",", "l2", ",", "convs", ",", "fcs", ")", ":", "\n", "\n", "        ", "X", ",", "Y", ",", "Xv", ",", "Yv", "=", "self", ".", "data", "\n", "nb_classes", "=", "self", ".", "nb_classes", "\n", "\n", "reg", "=", "WeightRegularizer", "(", ")", "\n", "\n", "# a hack to make regularization variable", "\n", "reg", ".", "l1", "=", "K", ".", "variable", "(", "0.0", ")", "\n", "reg", ".", "l2", "=", "K", ".", "variable", "(", "0.0", ")", "\n", "\n", "# input square image dimensions", "\n", "img_rows", ",", "img_cols", "=", "X", ".", "shape", "[", "-", "1", "]", ",", "X", ".", "shape", "[", "-", "1", "]", "\n", "img_channels", "=", "X", ".", "shape", "[", "1", "]", "\n", "\n", "# convert class vectors to binary class matrices", "\n", "Y", "=", "np_utils", ".", "to_categorical", "(", "Y", ",", "nb_classes", ")", "\n", "Yv", "=", "np_utils", ".", "to_categorical", "(", "Yv", ",", "nb_classes", ")", "\n", "\n", "# here definition of the model happens", "\n", "model", "=", "Sequential", "(", ")", "\n", "\n", "has_convs", "=", "False", "\n", "# create all convolutional layers", "\n", "for", "val", ",", "use", "in", "convs", ":", "\n", "\n", "# Size of convolutional layer", "\n", "            ", "cnvSz", "=", "int", "(", "val", "*", "127", ")", "+", "1", "\n", "\n", "if", "use", "<", "0.5", ":", "\n", "                ", "continue", "\n", "", "has_convs", "=", "True", "\n", "model", ".", "add", "(", "Convolution2D", "(", "cnvSz", ",", "3", ",", "3", ",", "border_mode", "=", "'same'", ",", "\n", "input_shape", "=", "(", "img_channels", ",", "img_rows", ",", "img_cols", ")", ",", "\n", "W_regularizer", "=", "reg", ",", "\n", "b_regularizer", "=", "reg", ")", ")", "\n", "model", ".", "add", "(", "Activation", "(", "'relu'", ")", ")", "\n", "\n", "model", ".", "add", "(", "MaxPooling2D", "(", "pool_size", "=", "(", "2", ",", "2", ")", ")", ")", "\n", "# model.add(Dropout(0.25))", "\n", "\n", "", "if", "has_convs", ":", "\n", "            ", "model", ".", "add", "(", "Flatten", "(", ")", ")", "\n", "", "else", ":", "\n", "            ", "model", ".", "add", "(", "Flatten", "(", "input_shape", "=", "(", "img_channels", ",", "img_rows", ",", "img_cols", ")", ")", ")", "# avoid excetpions on no convs", "\n", "\n", "# create all fully connected layers", "\n", "", "for", "val", ",", "use", "in", "fcs", ":", "\n", "\n", "            ", "if", "use", "<", "0.5", ":", "\n", "                ", "continue", "\n", "\n", "# choose fully connected layer size", "\n", "", "densesz", "=", "int", "(", "1023", "*", "val", ")", "+", "1", "\n", "\n", "model", ".", "add", "(", "Dense", "(", "densesz", ",", "\n", "W_regularizer", "=", "reg", ",", "\n", "b_regularizer", "=", "reg", ")", ")", "\n", "model", ".", "add", "(", "Activation", "(", "'relu'", ")", ")", "\n", "# model.add(Dropout(0.5))", "\n", "\n", "", "model", ".", "add", "(", "Dense", "(", "nb_classes", ",", "\n", "W_regularizer", "=", "reg", ",", "\n", "b_regularizer", "=", "reg", ")", ")", "\n", "model", ".", "add", "(", "Activation", "(", "'softmax'", ")", ")", "\n", "\n", "# let's train the model using SGD + momentum (how original).", "\n", "sgd", "=", "SGD", "(", "lr", "=", "0.01", ",", "decay", "=", "1e-6", ",", "momentum", "=", "0.9", ",", "nesterov", "=", "True", ")", "\n", "model", ".", "compile", "(", "loss", "=", "'categorical_crossentropy'", ",", "\n", "optimizer", "=", "sgd", ",", "\n", "metrics", "=", "[", "'accuracy'", "]", ")", "\n", "\n", "X", "=", "X", ".", "astype", "(", "'float32'", ")", "\n", "Xv", "=", "Xv", ".", "astype", "(", "'float32'", ")", "\n", "X", "/=", "255", "\n", "Xv", "/=", "255", "\n", "\n", "model", "=", "model", "\n", "sgd", "=", "sgd", "\n", "reg", "=", "reg", "\n", "\n", "# set parameters of training step", "\n", "\n", "sgd", ".", "lr", ".", "set_value", "(", "lr", ")", "\n", "sgd", ".", "decay", ".", "set_value", "(", "decay", ")", "\n", "sgd", ".", "momentum", ".", "set_value", "(", "momentum", ")", "\n", "\n", "reg", ".", "l1", ".", "set_value", "(", "l1", ")", "\n", "reg", ".", "l2", ".", "set_value", "(", "l2", ")", "\n", "\n", "# train model for one epoch_idx", "\n", "H", "=", "model", ".", "fit", "(", "X", ",", "Y", ",", "\n", "batch_size", "=", "int", "(", "batch_size", ")", ",", "\n", "nb_epoch", "=", "10", ",", "\n", "shuffle", "=", "True", ")", "\n", "\n", "diverged", "=", "math", ".", "isnan", "(", "H", ".", "history", "[", "'loss'", "]", "[", "-", "1", "]", ")", "\n", "acc", "=", "0.0", "\n", "\n", "if", "not", "diverged", ":", "\n", "            ", "_", ",", "acc", "=", "model", ".", "evaluate", "(", "Xv", ",", "Yv", ")", "\n", "\n", "", "return", "diverged", ",", "acc", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Rondorf_BOReL.parameter_tuning.convergence.ConvergenceControl.__init__": [[40, 63], ["environments.mujoco.rand_param_envs.gym.spaces.Tuple", "environments.mujoco.rand_param_envs.gym.spaces.Box", "convergence.ConvergenceControl._reset", "environments.mujoco.rand_param_envs.gym.spaces.Box", "environments.mujoco.rand_param_envs.gym.spaces.Box", "environments.mujoco.rand_param_envs.gym.spaces.Box", "environments.mujoco.rand_param_envs.gym.spaces.Box", "environments.mujoco.rand_param_envs.gym.spaces.Box", "environments.mujoco.rand_param_envs.gym.spaces.Box"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.wrappers.monitoring.Monitor._reset"], ["def", "__init__", "(", "self", ",", "natural", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Initialize environment\n        \"\"\"", "\n", "\n", "# I use array of len 1 to store constants (otherwise there were some errors)", "\n", "self", ".", "action_space", "=", "spaces", ".", "Tuple", "(", "(", "\n", "spaces", ".", "Box", "(", "-", "5.0", ",", "0.0", ",", "1", ")", ",", "# learning rate", "\n", "spaces", ".", "Box", "(", "-", "7.0", ",", "-", "2.0", ",", "1", ")", ",", "# decay", "\n", "spaces", ".", "Box", "(", "-", "5.0", ",", "0.0", ",", "1", ")", ",", "# momentum", "\n", "spaces", ".", "Box", "(", "2", ",", "8", ",", "1", ")", ",", "# batch size", "\n", "spaces", ".", "Box", "(", "-", "6.0", ",", "1.0", ",", "1", ")", ",", "# l1 reg", "\n", "spaces", ".", "Box", "(", "-", "6.0", ",", "1.0", ",", "1", ")", ",", "# l2 reg", "\n", ")", ")", "\n", "\n", "# observation features, in order: num of instances, num of labels,", "\n", "# number of filter in part A / B of neural net, num of neurons in", "\n", "# output layer, validation accuracy after training with given", "\n", "# parameters", "\n", "self", ".", "observation_space", "=", "spaces", ".", "Box", "(", "-", "1e5", ",", "1e5", ",", "6", ")", "# validation accuracy", "\n", "\n", "# Start the first game", "\n", "self", ".", "_reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.parameter_tuning.convergence.ConvergenceControl._step": [[64, 142], ["convergence.ConvergenceControl.action_space.contains", "int", "convergence.ConvergenceControl.sgd.lr.set_value", "convergence.ConvergenceControl.sgd.decay.set_value", "convergence.ConvergenceControl.sgd.momentum.set_value", "convergence.ConvergenceControl.reg.l1.set_value", "convergence.ConvergenceControl.reg.l2.set_value", "convergence.ConvergenceControl.model.fit", "convergence.ConvergenceControl.model.evaluate", "math.isnan", "convergence.ConvergenceControl._get_obs", "int"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.spaces.discrete.Discrete.contains", "home.repos.pwc.inspect_result.Rondorf_BOReL.core.rl_algorithm.MetaRLAlgorithm.evaluate", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.point_robot.PointEnv._get_obs"], ["", "def", "_step", "(", "self", ",", "action", ")", ":", "\n", "        ", "\"\"\"\n        Perform some action in the environment\n        \"\"\"", "\n", "assert", "self", ".", "action_space", ".", "contains", "(", "action", ")", "\n", "\n", "lr", ",", "decay", ",", "momentum", ",", "batch_size", ",", "l1", ",", "l2", "=", "action", ";", "\n", "\n", "\n", "# map ranges of inputs", "\n", "lr", "=", "(", "10.0", "**", "lr", "[", "0", "]", ")", ".", "astype", "(", "'float32'", ")", "\n", "decay", "=", "(", "10.0", "**", "decay", "[", "0", "]", ")", ".", "astype", "(", "'float32'", ")", "\n", "momentum", "=", "(", "10.0", "**", "momentum", "[", "0", "]", ")", ".", "astype", "(", "'float32'", ")", "\n", "\n", "batch_size", "=", "int", "(", "2", "**", "batch_size", "[", "0", "]", ")", "\n", "\n", "l1", "=", "(", "10.0", "**", "l1", "[", "0", "]", ")", ".", "astype", "(", "'float32'", ")", "\n", "l2", "=", "(", "10.0", "**", "l2", "[", "0", "]", ")", ".", "astype", "(", "'float32'", ")", "\n", "\n", "\"\"\"\n        names = [\"lr\", \"decay\", \"mom\", \"batch\", \"l1\", \"l2\"]\n        values = [lr, decay, momentum, batch_size, l1, l2]\n\n        for n,v in zip(names, values):\n            print(n,v)\n        \"\"\"", "\n", "\n", "X", ",", "Y", ",", "Xv", ",", "Yv", "=", "self", ".", "data", "\n", "\n", "# set parameters of training step", "\n", "\n", "self", ".", "sgd", ".", "lr", ".", "set_value", "(", "lr", ")", "\n", "self", ".", "sgd", ".", "decay", ".", "set_value", "(", "decay", ")", "\n", "self", ".", "sgd", ".", "momentum", ".", "set_value", "(", "momentum", ")", "\n", "\n", "self", ".", "reg", ".", "l1", ".", "set_value", "(", "l1", ")", "\n", "self", ".", "reg", ".", "l2", ".", "set_value", "(", "l2", ")", "\n", "\n", "# train model for one epoch_idx", "\n", "H", "=", "self", ".", "model", ".", "fit", "(", "X", ",", "Y", ",", "\n", "batch_size", "=", "int", "(", "batch_size", ")", ",", "\n", "nb_epoch", "=", "1", ",", "\n", "shuffle", "=", "True", ")", "\n", "\n", "_", ",", "acc", "=", "self", ".", "model", ".", "evaluate", "(", "Xv", ",", "Yv", ")", "\n", "\n", "# save best validation", "\n", "if", "acc", ">", "self", ".", "best_val", ":", "\n", "            ", "self", ".", "best_val", "=", "acc", "\n", "\n", "", "self", ".", "previous_acc", "=", "acc", ";", "\n", "\n", "self", ".", "epoch_idx", "=", "self", ".", "epoch_idx", "+", "1", "\n", "\n", "diverged", "=", "math", ".", "isnan", "(", "H", ".", "history", "[", "'loss'", "]", "[", "-", "1", "]", ")", "\n", "done", "=", "self", ".", "epoch_idx", "==", "20", "or", "diverged", "\n", "\n", "if", "diverged", ":", "\n", "            ", "\"\"\" maybe not set to a very large value; if you get something nice,\n            but then diverge, maybe it is not too bad\n            \"\"\"", "\n", "reward", "=", "-", "100.0", "\n", "", "else", ":", "\n", "            ", "reward", "=", "self", ".", "best_val", "\n", "\n", "# as number of labels increases, learning problem becomes", "\n", "# more difficult for fixed dataset size. In order to avoid", "\n", "# for the agent to ignore more complex datasets, on which", "\n", "# accuracy is low and concentrate on simple cases which bring bulk", "\n", "# of reward, I normalize by number of labels in dataset", "\n", "\n", "reward", "=", "reward", "*", "self", ".", "nb_classes", "\n", "\n", "# formula below encourages higher best validation", "\n", "\n", "reward", "=", "reward", "+", "reward", "**", "2", "\n", "\n", "", "return", "self", ".", "_get_obs", "(", ")", ",", "reward", ",", "done", ",", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.parameter_tuning.convergence.ConvergenceControl._render": [[143, 149], ["print"], "methods", ["None"], ["", "def", "_render", "(", "self", ",", "mode", "=", "\"human\"", ",", "close", "=", "False", ")", ":", "\n", "\n", "        ", "if", "close", ":", "\n", "            ", "return", "\n", "\n", "", "print", "(", "\">> Step \"", ",", "self", ".", "epoch_idx", ",", "\"best validation:\"", ",", "self", ".", "best_val", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.parameter_tuning.convergence.ConvergenceControl._get_obs": [[150, 161], ["numpy.array"], "methods", ["None"], ["", "def", "_get_obs", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Observe the environment. Is usually used after the step is taken\n        \"\"\"", "\n", "# observation as per observation space", "\n", "return", "np", ".", "array", "(", "[", "self", ".", "nb_classes", ",", "\n", "self", ".", "nb_inst", ",", "\n", "self", ".", "convAsz", ",", "\n", "self", ".", "convBsz", ",", "\n", "self", ".", "densesz", ",", "\n", "self", ".", "previous_acc", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.parameter_tuning.convergence.ConvergenceControl.data_mix": [[162, 196], ["random.choice", "numpy.random.rand", "int", "keras.datasets.mnist.load_data", "keras.datasets.cifar10.load_data", "keras.datasets.cifar100.load_data", "numpy.expand_dims"], "methods", ["None"], ["", "def", "data_mix", "(", "self", ")", ":", "\n", "\n", "# randomly choose dataset", "\n", "        ", "dataset", "=", "random", ".", "choice", "(", "[", "'mnist'", ",", "'cifar10'", ",", "'cifar100'", "]", ")", "#", "\n", "\n", "n_labels", "=", "10", "\n", "\n", "if", "dataset", "==", "\"mnist\"", ":", "\n", "            ", "data", "=", "mnist", ".", "load_data", "(", ")", "\n", "\n", "", "if", "dataset", "==", "\"cifar10\"", ":", "\n", "            ", "data", "=", "cifar10", ".", "load_data", "(", ")", "\n", "\n", "", "if", "dataset", "==", "\"cifar100\"", ":", "\n", "            ", "data", "=", "cifar100", ".", "load_data", "(", ")", "\n", "n_labels", "=", "100", "\n", "\n", "# Choose dataset size. This affects regularization needed", "\n", "", "r", "=", "np", ".", "random", ".", "rand", "(", ")", "\n", "\n", "# not using full dataset to make regularization more important and", "\n", "# speed up testing a little bit", "\n", "data_size", "=", "int", "(", "2000", "*", "(", "1", "-", "r", ")", "+", "40000", "*", "r", ")", "\n", "\n", "# I do not use test data for validation, but last 10000 instances in dataset", "\n", "# so that trained models can be compared to results in literature", "\n", "(", "CX", ",", "CY", ")", ",", "(", "CXt", ",", "CYt", ")", "=", "data", "\n", "\n", "if", "dataset", "==", "\"mnist\"", ":", "\n", "            ", "CX", "=", "np", ".", "expand_dims", "(", "CX", ",", "axis", "=", "1", ")", "\n", "\n", "", "data", "=", "CX", "[", ":", "data_size", "]", ",", "CY", "[", ":", "data_size", "]", ",", "CX", "[", "-", "10000", ":", "]", ",", "CY", "[", "-", "10000", ":", "]", ";", "\n", "\n", "return", "data", ",", "n_labels", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.parameter_tuning.convergence.ConvergenceControl._reset": [[197, 304], ["keras.regularizers.WeightRegularizer", "keras.backend.variable", "keras.backend.variable", "convergence.ConvergenceControl.data_mix", "len", "keras.utils.np_utils.to_categorical", "keras.utils.np_utils.to_categorical", "keras.models.Sequential", "random.choice", "random.choice", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.optimizers.SGD", "keras.models.Sequential.compile", "X.astype.astype.astype", "Xv.astype.astype.astype", "convergence.ConvergenceControl._get_obs", "random.choice", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "random.choice", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.layers.Dense", "keras.layers.Activation", "keras.layers.Dropout", "keras.layers.Dense", "keras.layers.Activation", "keras.layers.Convolution2D", "keras.layers.Activation", "keras.layers.Convolution2D", "keras.layers.Activation", "keras.layers.MaxPooling2D", "keras.layers.Dropout", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.layers.Flatten", "keras.layers.Flatten", "keras.layers.Convolution2D", "keras.layers.Activation", "keras.layers.Convolution2D", "keras.layers.Activation", "keras.layers.MaxPooling2D", "keras.layers.Dropout"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.parameter_tuning.convergence.ConvergenceControl.data_mix", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.point_robot.PointEnv._get_obs"], ["", "def", "_reset", "(", "self", ")", ":", "\n", "\n", "        ", "reg", "=", "WeightRegularizer", "(", ")", "\n", "\n", "# a hack to make regularization variable", "\n", "reg", ".", "l1", "=", "K", ".", "variable", "(", "0.0", ")", "\n", "reg", ".", "l2", "=", "K", ".", "variable", "(", "0.0", ")", "\n", "\n", "\n", "data", ",", "nb_classes", "=", "self", ".", "data_mix", "(", ")", "\n", "X", ",", "Y", ",", "Xv", ",", "Yv", "=", "data", "\n", "\n", "# input square image dimensions", "\n", "img_rows", ",", "img_cols", "=", "X", ".", "shape", "[", "-", "1", "]", ",", "X", ".", "shape", "[", "-", "1", "]", "\n", "img_channels", "=", "X", ".", "shape", "[", "1", "]", "\n", "# save number of classes and instances", "\n", "self", ".", "nb_classes", "=", "nb_classes", "\n", "self", ".", "nb_inst", "=", "len", "(", "X", ")", "\n", "\n", "# convert class vectors to binary class matrices", "\n", "Y", "=", "np_utils", ".", "to_categorical", "(", "Y", ",", "nb_classes", ")", "\n", "Yv", "=", "np_utils", ".", "to_categorical", "(", "Yv", ",", "nb_classes", ")", "\n", "\n", "# here definition of the model happens", "\n", "model", "=", "Sequential", "(", ")", "\n", "\n", "# double true for icnreased probability of conv layers", "\n", "if", "random", ".", "choice", "(", "[", "True", ",", "True", ",", "False", "]", ")", ":", "\n", "\n", "# Choose convolution #1", "\n", "            ", "self", ".", "convAsz", "=", "random", ".", "choice", "(", "[", "32", ",", "64", ",", "128", "]", ")", "\n", "\n", "model", ".", "add", "(", "Convolution2D", "(", "self", ".", "convAsz", ",", "3", ",", "3", ",", "border_mode", "=", "'same'", ",", "\n", "input_shape", "=", "(", "img_channels", ",", "img_rows", ",", "img_cols", ")", ",", "\n", "W_regularizer", "=", "reg", ",", "\n", "b_regularizer", "=", "reg", ")", ")", "\n", "model", ".", "add", "(", "Activation", "(", "'relu'", ")", ")", "\n", "\n", "model", ".", "add", "(", "Convolution2D", "(", "self", ".", "convAsz", ",", "3", ",", "3", ",", "\n", "W_regularizer", "=", "reg", ",", "\n", "b_regularizer", "=", "reg", ")", ")", "\n", "model", ".", "add", "(", "Activation", "(", "'relu'", ")", ")", "\n", "\n", "model", ".", "add", "(", "MaxPooling2D", "(", "pool_size", "=", "(", "2", ",", "2", ")", ")", ")", "\n", "model", ".", "add", "(", "Dropout", "(", "0.25", ")", ")", "\n", "\n", "# Choose convolution size B (if needed)", "\n", "self", ".", "convBsz", "=", "random", ".", "choice", "(", "[", "0", ",", "32", ",", "64", "]", ")", "\n", "\n", "if", "self", ".", "convBsz", ">", "0", ":", "\n", "                ", "model", ".", "add", "(", "Convolution2D", "(", "self", ".", "convBsz", ",", "3", ",", "3", ",", "border_mode", "=", "'same'", ",", "\n", "W_regularizer", "=", "reg", ",", "\n", "b_regularizer", "=", "reg", ")", ")", "\n", "model", ".", "add", "(", "Activation", "(", "'relu'", ")", ")", "\n", "\n", "model", ".", "add", "(", "Convolution2D", "(", "self", ".", "convBsz", ",", "3", ",", "3", ",", "\n", "W_regularizer", "=", "reg", ",", "\n", "b_regularizer", "=", "reg", ")", ")", "\n", "model", ".", "add", "(", "Activation", "(", "'relu'", ")", ")", "\n", "\n", "model", ".", "add", "(", "MaxPooling2D", "(", "pool_size", "=", "(", "2", ",", "2", ")", ")", ")", "\n", "model", ".", "add", "(", "Dropout", "(", "0.25", ")", ")", "\n", "\n", "", "model", ".", "add", "(", "Flatten", "(", ")", ")", "\n", "\n", "", "else", ":", "\n", "            ", "model", ".", "add", "(", "Flatten", "(", "input_shape", "=", "(", "img_channels", ",", "img_rows", ",", "img_cols", ")", ")", ")", "\n", "self", ".", "convAsz", "=", "0", "\n", "self", ".", "convBsz", "=", "0", "\n", "\n", "# choose fully connected layer size", "\n", "", "self", ".", "densesz", "=", "random", ".", "choice", "(", "[", "256", ",", "512", ",", "762", "]", ")", "\n", "\n", "model", ".", "add", "(", "Dense", "(", "self", ".", "densesz", ",", "\n", "W_regularizer", "=", "reg", ",", "\n", "b_regularizer", "=", "reg", ")", ")", "\n", "model", ".", "add", "(", "Activation", "(", "'relu'", ")", ")", "\n", "model", ".", "add", "(", "Dropout", "(", "0.5", ")", ")", "\n", "\n", "model", ".", "add", "(", "Dense", "(", "nb_classes", ",", "\n", "W_regularizer", "=", "reg", ",", "\n", "b_regularizer", "=", "reg", ")", ")", "\n", "model", ".", "add", "(", "Activation", "(", "'softmax'", ")", ")", "\n", "\n", "# let's train the model using SGD + momentum (how original).", "\n", "sgd", "=", "SGD", "(", "lr", "=", "0.01", ",", "decay", "=", "1e-6", ",", "momentum", "=", "0.9", ",", "nesterov", "=", "True", ")", "\n", "model", ".", "compile", "(", "loss", "=", "'categorical_crossentropy'", ",", "\n", "optimizer", "=", "sgd", ",", "\n", "metrics", "=", "[", "'accuracy'", "]", ")", "\n", "\n", "X", "=", "X", ".", "astype", "(", "'float32'", ")", "\n", "Xv", "=", "Xv", ".", "astype", "(", "'float32'", ")", "\n", "X", "/=", "255", "\n", "Xv", "/=", "255", "\n", "\n", "self", ".", "data", "=", "(", "X", ",", "Y", ",", "Xv", ",", "Yv", ")", "\n", "self", ".", "model", "=", "model", "\n", "self", ".", "sgd", "=", "sgd", "\n", "\n", "# initial accuracy values", "\n", "self", ".", "best_val", "=", "0.0", "\n", "self", ".", "previous_acc", "=", "0.0", "\n", "\n", "self", ".", "reg", "=", "reg", "\n", "self", ".", "epoch_idx", "=", "0", "\n", "\n", "return", "self", ".", "_get_obs", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Rondorf_BOReL.debugging.one_round_deterministic_reward.OneRoundDeterministicRewardEnv.__init__": [[18, 22], ["environments.mujoco.rand_param_envs.gym.spaces.Discrete", "environments.mujoco.rand_param_envs.gym.spaces.Discrete", "one_round_deterministic_reward.OneRoundDeterministicRewardEnv._reset"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.wrappers.monitoring.Monitor._reset"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "action_space", "=", "spaces", ".", "Discrete", "(", "2", ")", "\n", "self", ".", "observation_space", "=", "spaces", ".", "Discrete", "(", "1", ")", "\n", "self", ".", "_reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.debugging.one_round_deterministic_reward.OneRoundDeterministicRewardEnv._step": [[23, 32], ["one_round_deterministic_reward.OneRoundDeterministicRewardEnv.action_space.contains", "one_round_deterministic_reward.OneRoundDeterministicRewardEnv._get_obs"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.spaces.discrete.Discrete.contains", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.point_robot.PointEnv._get_obs"], ["", "def", "_step", "(", "self", ",", "action", ")", ":", "\n", "        ", "assert", "self", ".", "action_space", ".", "contains", "(", "action", ")", "\n", "if", "action", ":", "\n", "                ", "reward", "=", "1", "\n", "", "else", ":", "\n", "                ", "reward", "=", "0", "\n", "\n", "", "done", "=", "True", "\n", "return", "self", ".", "_get_obs", "(", ")", ",", "reward", ",", "done", ",", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.debugging.one_round_deterministic_reward.OneRoundDeterministicRewardEnv._get_obs": [[33, 35], ["None"], "methods", ["None"], ["", "def", "_get_obs", "(", "self", ")", ":", "\n", "        ", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.debugging.one_round_deterministic_reward.OneRoundDeterministicRewardEnv._reset": [[36, 38], ["one_round_deterministic_reward.OneRoundDeterministicRewardEnv._get_obs"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.point_robot.PointEnv._get_obs"], ["", "def", "_reset", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_get_obs", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Rondorf_BOReL.debugging.one_round_nondeterministic_reward.OneRoundNondeterministicRewardEnv.__init__": [[18, 23], ["environments.mujoco.rand_param_envs.gym.spaces.Discrete", "environments.mujoco.rand_param_envs.gym.spaces.Discrete", "one_round_nondeterministic_reward.OneRoundNondeterministicRewardEnv._seed", "one_round_nondeterministic_reward.OneRoundNondeterministicRewardEnv._reset"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.algorithmic.algorithmic_env.AlgorithmicEnv._seed", "home.repos.pwc.inspect_result.Rondorf_BOReL.wrappers.monitoring.Monitor._reset"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "action_space", "=", "spaces", ".", "Discrete", "(", "2", ")", "\n", "self", ".", "observation_space", "=", "spaces", ".", "Discrete", "(", "1", ")", "\n", "self", ".", "_seed", "(", ")", "\n", "self", ".", "_reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.debugging.one_round_nondeterministic_reward.OneRoundNondeterministicRewardEnv._step": [[24, 35], ["one_round_nondeterministic_reward.OneRoundNondeterministicRewardEnv.action_space.contains", "one_round_nondeterministic_reward.OneRoundNondeterministicRewardEnv.np_random.choice", "one_round_nondeterministic_reward.OneRoundNondeterministicRewardEnv.np_random.choice", "one_round_nondeterministic_reward.OneRoundNondeterministicRewardEnv._get_obs"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.spaces.discrete.Discrete.contains", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.point_robot.PointEnv._get_obs"], ["", "def", "_step", "(", "self", ",", "action", ")", ":", "\n", "        ", "assert", "self", ".", "action_space", ".", "contains", "(", "action", ")", "\n", "if", "action", ":", "\n", "#your agent should figure out that this option has expected value 2.5", "\n", "            ", "reward", "=", "self", ".", "np_random", ".", "choice", "(", "[", "0", ",", "5", "]", ")", "\n", "", "else", ":", "\n", "#your agent should figure out that this option has expected value 2.0", "\n", "            ", "reward", "=", "self", ".", "np_random", ".", "choice", "(", "[", "1", ",", "3", "]", ")", "\n", "\n", "", "done", "=", "True", "\n", "return", "self", ".", "_get_obs", "(", ")", ",", "reward", ",", "done", ",", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.debugging.one_round_nondeterministic_reward.OneRoundNondeterministicRewardEnv._get_obs": [[36, 38], ["None"], "methods", ["None"], ["", "def", "_get_obs", "(", "self", ")", ":", "\n", "        ", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.debugging.one_round_nondeterministic_reward.OneRoundNondeterministicRewardEnv._reset": [[39, 41], ["one_round_nondeterministic_reward.OneRoundNondeterministicRewardEnv._get_obs"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.point_robot.PointEnv._get_obs"], ["", "def", "_reset", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_get_obs", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.debugging.one_round_nondeterministic_reward.OneRoundNondeterministicRewardEnv._seed": [[42, 45], ["environments.mujoco.rand_param_envs.gym.utils.seeding.np_random"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.utils.seeding.np_random"], ["", "def", "_seed", "(", "self", ",", "seed", "=", "None", ")", ":", "\n", "        ", "self", ".", "np_random", ",", "seed", "=", "seeding", ".", "np_random", "(", "seed", ")", "\n", "return", "[", "seed", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Rondorf_BOReL.debugging.two_round_deterministic_reward.TwoRoundDeterministicRewardEnv.__init__": [[23, 27], ["environments.mujoco.rand_param_envs.gym.spaces.Discrete", "environments.mujoco.rand_param_envs.gym.spaces.Discrete", "two_round_deterministic_reward.TwoRoundDeterministicRewardEnv._reset"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.wrappers.monitoring.Monitor._reset"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "action_space", "=", "spaces", ".", "Discrete", "(", "2", ")", "\n", "self", ".", "observation_space", "=", "spaces", ".", "Discrete", "(", "3", ")", "\n", "self", ".", "_reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.debugging.two_round_deterministic_reward.TwoRoundDeterministicRewardEnv._step": [[28, 42], ["two_round_deterministic_reward.TwoRoundDeterministicRewardEnv.action_space.contains", "two_round_deterministic_reward.TwoRoundDeterministicRewardEnv._get_obs"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.spaces.discrete.Discrete.contains", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.point_robot.PointEnv._get_obs"], ["", "def", "_step", "(", "self", ",", "action", ")", ":", "\n", "        ", "rewards", "=", "[", "[", "0", ",", "3", "]", ",", "[", "1", ",", "2", "]", "]", "\n", "\n", "assert", "self", ".", "action_space", ".", "contains", "(", "action", ")", "\n", "\n", "if", "self", ".", "firstAction", "is", "None", ":", "\n", "            ", "self", ".", "firstAction", "=", "action", "\n", "reward", "=", "0", "\n", "done", "=", "False", "\n", "", "else", ":", "\n", "            ", "reward", "=", "rewards", "[", "self", ".", "firstAction", "]", "[", "action", "]", "\n", "done", "=", "True", "\n", "\n", "", "return", "self", ".", "_get_obs", "(", ")", ",", "reward", ",", "done", ",", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.debugging.two_round_deterministic_reward.TwoRoundDeterministicRewardEnv._get_obs": [[43, 48], ["None"], "methods", ["None"], ["", "def", "_get_obs", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "firstAction", "is", "None", ":", "\n", "            ", "return", "2", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "firstAction", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.debugging.two_round_deterministic_reward.TwoRoundDeterministicRewardEnv._reset": [[49, 52], ["two_round_deterministic_reward.TwoRoundDeterministicRewardEnv._get_obs"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.point_robot.PointEnv._get_obs"], ["", "", "def", "_reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "firstAction", "=", "None", "\n", "return", "self", ".", "_get_obs", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Rondorf_BOReL.debugging.two_round_nondeterministic_reward.TwoRoundNondeterministicRewardEnv.__init__": [[23, 27], ["environments.mujoco.rand_param_envs.gym.spaces.Discrete", "environments.mujoco.rand_param_envs.gym.spaces.Discrete", "two_round_nondeterministic_reward.TwoRoundNondeterministicRewardEnv._reset"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.wrappers.monitoring.Monitor._reset"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "action_space", "=", "spaces", ".", "Discrete", "(", "2", ")", "\n", "self", ".", "observation_space", "=", "spaces", ".", "Discrete", "(", "3", ")", "\n", "self", ".", "_reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.debugging.two_round_nondeterministic_reward.TwoRoundNondeterministicRewardEnv._step": [[28, 51], ["two_round_nondeterministic_reward.TwoRoundNondeterministicRewardEnv.action_space.contains", "two_round_nondeterministic_reward.TwoRoundNondeterministicRewardEnv.np_random.choice", "two_round_nondeterministic_reward.TwoRoundNondeterministicRewardEnv._get_obs"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.spaces.discrete.Discrete.contains", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.point_robot.PointEnv._get_obs"], ["", "def", "_step", "(", "self", ",", "action", ")", ":", "\n", "        ", "rewards", "=", "[", "\n", "[", "\n", "[", "-", "1", ",", "1", "]", ",", "#expected value 0", "\n", "[", "0", ",", "0", ",", "9", "]", "#expected value 3. This is the best path.", "\n", "]", ",", "\n", "[", "\n", "[", "0", ",", "2", "]", ",", "#expected value 1", "\n", "[", "2", ",", "3", "]", "#expected value 2.5", "\n", "]", "\n", "]", "\n", "\n", "assert", "self", ".", "action_space", ".", "contains", "(", "action", ")", "\n", "\n", "if", "self", ".", "firstAction", "is", "None", ":", "\n", "            ", "self", ".", "firstAction", "=", "action", "\n", "reward", "=", "0", "\n", "done", "=", "False", "\n", "", "else", ":", "\n", "            ", "reward", "=", "self", ".", "np_random", ".", "choice", "(", "rewards", "[", "self", ".", "firstAction", "]", "[", "action", "]", ")", "\n", "done", "=", "True", "\n", "\n", "", "return", "self", ".", "_get_obs", "(", ")", ",", "reward", ",", "done", ",", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.debugging.two_round_nondeterministic_reward.TwoRoundNondeterministicRewardEnv._get_obs": [[52, 57], ["None"], "methods", ["None"], ["", "def", "_get_obs", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "firstAction", "is", "None", ":", "\n", "            ", "return", "2", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "firstAction", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.debugging.two_round_nondeterministic_reward.TwoRoundNondeterministicRewardEnv._reset": [[58, 61], ["two_round_nondeterministic_reward.TwoRoundNondeterministicRewardEnv._get_obs"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.point_robot.PointEnv._get_obs"], ["", "", "def", "_reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "firstAction", "=", "None", "\n", "return", "self", ".", "_get_obs", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.debugging.two_round_nondeterministic_reward.TwoRoundNondeterministicRewardEnv._seed": [[62, 65], ["environments.mujoco.rand_param_envs.gym.utils.seeding.np_random"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.utils.seeding.np_random"], ["", "def", "_seed", "(", "self", ",", "seed", "=", "None", ")", ":", "\n", "        ", "self", ".", "np_random", ",", "seed", "=", "seeding", ".", "np_random", "(", "seed", ")", "\n", "return", "[", "seed", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Rondorf_BOReL.box2d.lunar_lander.ContactDetector.__init__": [[59, 62], ["Box2D.b2.contactListener.__init__"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.__init__"], ["    ", "def", "__init__", "(", "self", ",", "env", ")", ":", "\n", "        ", "contactListener", ".", "__init__", "(", "self", ")", "\n", "self", ".", "env", "=", "env", "\n", "", "def", "BeginContact", "(", "self", ",", "contact", ")", ":", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.box2d.lunar_lander.ContactDetector.BeginContact": [[62, 68], ["range"], "methods", ["None"], ["", "def", "BeginContact", "(", "self", ",", "contact", ")", ":", "\n", "        ", "if", "self", ".", "env", ".", "lander", "==", "contact", ".", "fixtureA", ".", "body", "or", "self", ".", "env", ".", "lander", "==", "contact", ".", "fixtureB", ".", "body", ":", "\n", "            ", "self", ".", "env", ".", "game_over", "=", "True", "\n", "", "for", "i", "in", "range", "(", "2", ")", ":", "\n", "            ", "if", "self", ".", "env", ".", "legs", "[", "i", "]", "in", "[", "contact", ".", "fixtureA", ".", "body", ",", "contact", ".", "fixtureB", ".", "body", "]", ":", "\n", "                ", "self", ".", "env", ".", "legs", "[", "i", "]", ".", "ground_contact", "=", "True", "\n", "", "", "", "def", "EndContact", "(", "self", ",", "contact", ")", ":", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.box2d.lunar_lander.ContactDetector.EndContact": [[68, 72], ["range"], "methods", ["None"], ["", "", "", "def", "EndContact", "(", "self", ",", "contact", ")", ":", "\n", "        ", "for", "i", "in", "range", "(", "2", ")", ":", "\n", "            ", "if", "self", ".", "env", ".", "legs", "[", "i", "]", "in", "[", "contact", ".", "fixtureA", ".", "body", ",", "contact", ".", "fixtureB", ".", "body", "]", ":", "\n", "                ", "self", ".", "env", ".", "legs", "[", "i", "]", ".", "ground_contact", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.box2d.lunar_lander.LunarLander.__init__": [[81, 105], ["lunar_lander.LunarLander._seed", "Box2D.b2World", "numpy.array", "environments.mujoco.rand_param_envs.gym.spaces.Box", "lunar_lander.LunarLander._reset", "environments.mujoco.rand_param_envs.gym.spaces.Box", "environments.mujoco.rand_param_envs.gym.spaces.Discrete"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.algorithmic.algorithmic_env.AlgorithmicEnv._seed", "home.repos.pwc.inspect_result.Rondorf_BOReL.wrappers.monitoring.Monitor._reset"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "_seed", "(", ")", "\n", "self", ".", "viewer", "=", "None", "\n", "\n", "self", ".", "world", "=", "Box2D", ".", "b2World", "(", ")", "\n", "self", ".", "moon", "=", "None", "\n", "self", ".", "lander", "=", "None", "\n", "self", ".", "particles", "=", "[", "]", "\n", "\n", "self", ".", "prev_reward", "=", "None", "\n", "\n", "high", "=", "np", ".", "array", "(", "[", "np", ".", "inf", "]", "*", "8", ")", "# useful range is -1 .. +1, but spikes can be higher", "\n", "self", ".", "observation_space", "=", "spaces", ".", "Box", "(", "-", "high", ",", "high", ")", "\n", "\n", "if", "self", ".", "continuous", ":", "\n", "# Action is two floats [main engine, left-right engines].", "\n", "# Main engine: -1..0 off, 0..+1 throttle from 50% to 100% power. Engine can't work with less than 50% power.", "\n", "# Left-right:  -1.0..-0.5 fire left engine, +0.5..+1.0 fire right engine, -0.5..0.5 off", "\n", "            ", "self", ".", "action_space", "=", "spaces", ".", "Box", "(", "-", "1", ",", "+", "1", ",", "(", "2", ",", ")", ")", "\n", "", "else", ":", "\n", "# Nop, fire left engine, main engine, right engine", "\n", "            ", "self", ".", "action_space", "=", "spaces", ".", "Discrete", "(", "4", ")", "\n", "\n", "", "self", ".", "_reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.box2d.lunar_lander.LunarLander._seed": [[106, 109], ["environments.mujoco.rand_param_envs.gym.utils.seeding.np_random"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.utils.seeding.np_random"], ["", "def", "_seed", "(", "self", ",", "seed", "=", "None", ")", ":", "\n", "        ", "self", ".", "np_random", ",", "seed", "=", "seeding", ".", "np_random", "(", "seed", ")", "\n", "return", "[", "seed", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.box2d.lunar_lander.LunarLander._destroy": [[110, 120], ["lunar_lander.LunarLander._clean_particles", "lunar_lander.LunarLander.world.DestroyBody", "lunar_lander.LunarLander.world.DestroyBody", "lunar_lander.LunarLander.world.DestroyBody", "lunar_lander.LunarLander.world.DestroyBody"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.box2d.lunar_lander.LunarLander._clean_particles"], ["", "def", "_destroy", "(", "self", ")", ":", "\n", "        ", "if", "not", "self", ".", "moon", ":", "return", "\n", "self", ".", "world", ".", "contactListener", "=", "None", "\n", "self", ".", "_clean_particles", "(", "True", ")", "\n", "self", ".", "world", ".", "DestroyBody", "(", "self", ".", "moon", ")", "\n", "self", ".", "moon", "=", "None", "\n", "self", ".", "world", ".", "DestroyBody", "(", "self", ".", "lander", ")", "\n", "self", ".", "lander", "=", "None", "\n", "self", ".", "world", ".", "DestroyBody", "(", "self", ".", "legs", "[", "0", "]", ")", "\n", "self", ".", "world", ".", "DestroyBody", "(", "self", ".", "legs", "[", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.box2d.lunar_lander.LunarLander._reset": [[121, 215], ["lunar_lander.LunarLander._destroy", "lunar_lander.ContactDetector", "lunar_lander.LunarLander.np_random.uniform", "lunar_lander.LunarLander.world.CreateStaticBody", "range", "lunar_lander.LunarLander.world.CreateDynamicBody", "lunar_lander.LunarLander.lander.ApplyForceToCenter", "lunar_lander.LunarLander.moon.CreateEdgeFixture", "lunar_lander.LunarLander.sky_polys.append", "lunar_lander.LunarLander.world.CreateDynamicBody", "Box2D.b2.revoluteJointDef", "lunar_lander.LunarLander.world.CreateJoint", "lunar_lander.LunarLander.legs.append", "lunar_lander.LunarLander._step", "range", "range", "Box2D.b2.edgeShape", "Box2D.b2.fixtureDef", "lunar_lander.LunarLander.np_random.uniform", "lunar_lander.LunarLander.np_random.uniform", "Box2D.b2.fixtureDef", "numpy.array", "Box2D.b2.polygonShape", "Box2D.b2.polygonShape"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.box2d.bipedal_walker.BipedalWalker._destroy", "home.repos.pwc.inspect_result.Rondorf_BOReL.wrappers.monitoring.Monitor._step"], ["", "def", "_reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "_destroy", "(", ")", "\n", "self", ".", "world", ".", "contactListener_keepref", "=", "ContactDetector", "(", "self", ")", "\n", "self", ".", "world", ".", "contactListener", "=", "self", ".", "world", ".", "contactListener_keepref", "\n", "self", ".", "game_over", "=", "False", "\n", "self", ".", "prev_shaping", "=", "None", "\n", "\n", "W", "=", "VIEWPORT_W", "/", "SCALE", "\n", "H", "=", "VIEWPORT_H", "/", "SCALE", "\n", "\n", "# terrain", "\n", "CHUNKS", "=", "11", "\n", "height", "=", "self", ".", "np_random", ".", "uniform", "(", "0", ",", "H", "/", "2", ",", "size", "=", "(", "CHUNKS", "+", "1", ",", ")", ")", "\n", "chunk_x", "=", "[", "W", "/", "(", "CHUNKS", "-", "1", ")", "*", "i", "for", "i", "in", "range", "(", "CHUNKS", ")", "]", "\n", "self", ".", "helipad_x1", "=", "chunk_x", "[", "CHUNKS", "//", "2", "-", "1", "]", "\n", "self", ".", "helipad_x2", "=", "chunk_x", "[", "CHUNKS", "//", "2", "+", "1", "]", "\n", "self", ".", "helipad_y", "=", "H", "/", "4", "\n", "height", "[", "CHUNKS", "//", "2", "-", "2", "]", "=", "self", ".", "helipad_y", "\n", "height", "[", "CHUNKS", "//", "2", "-", "1", "]", "=", "self", ".", "helipad_y", "\n", "height", "[", "CHUNKS", "//", "2", "+", "0", "]", "=", "self", ".", "helipad_y", "\n", "height", "[", "CHUNKS", "//", "2", "+", "1", "]", "=", "self", ".", "helipad_y", "\n", "height", "[", "CHUNKS", "//", "2", "+", "2", "]", "=", "self", ".", "helipad_y", "\n", "smooth_y", "=", "[", "0.33", "*", "(", "height", "[", "i", "-", "1", "]", "+", "height", "[", "i", "+", "0", "]", "+", "height", "[", "i", "+", "1", "]", ")", "for", "i", "in", "range", "(", "CHUNKS", ")", "]", "\n", "\n", "self", ".", "moon", "=", "self", ".", "world", ".", "CreateStaticBody", "(", "shapes", "=", "edgeShape", "(", "vertices", "=", "[", "(", "0", ",", "0", ")", ",", "(", "W", ",", "0", ")", "]", ")", ")", "\n", "self", ".", "sky_polys", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "CHUNKS", "-", "1", ")", ":", "\n", "            ", "p1", "=", "(", "chunk_x", "[", "i", "]", ",", "smooth_y", "[", "i", "]", ")", "\n", "p2", "=", "(", "chunk_x", "[", "i", "+", "1", "]", ",", "smooth_y", "[", "i", "+", "1", "]", ")", "\n", "self", ".", "moon", ".", "CreateEdgeFixture", "(", "\n", "vertices", "=", "[", "p1", ",", "p2", "]", ",", "\n", "density", "=", "0", ",", "\n", "friction", "=", "0.1", ")", "\n", "self", ".", "sky_polys", ".", "append", "(", "[", "p1", ",", "p2", ",", "(", "p2", "[", "0", "]", ",", "H", ")", ",", "(", "p1", "[", "0", "]", ",", "H", ")", "]", ")", "\n", "\n", "", "self", ".", "moon", ".", "color1", "=", "(", "0.0", ",", "0.0", ",", "0.0", ")", "\n", "self", ".", "moon", ".", "color2", "=", "(", "0.0", ",", "0.0", ",", "0.0", ")", "\n", "\n", "initial_y", "=", "VIEWPORT_H", "/", "SCALE", "\n", "self", ".", "lander", "=", "self", ".", "world", ".", "CreateDynamicBody", "(", "\n", "position", "=", "(", "VIEWPORT_W", "/", "SCALE", "/", "2", ",", "initial_y", ")", ",", "\n", "angle", "=", "0.0", ",", "\n", "fixtures", "=", "fixtureDef", "(", "\n", "shape", "=", "polygonShape", "(", "vertices", "=", "[", "(", "x", "/", "SCALE", ",", "y", "/", "SCALE", ")", "for", "x", ",", "y", "in", "LANDER_POLY", "]", ")", ",", "\n", "density", "=", "5.0", ",", "\n", "friction", "=", "0.1", ",", "\n", "categoryBits", "=", "0x0010", ",", "\n", "maskBits", "=", "0x001", ",", "# collide only with ground", "\n", "restitution", "=", "0.0", ")", "# 0.99 bouncy", "\n", ")", "\n", "self", ".", "lander", ".", "color1", "=", "(", "0.5", ",", "0.4", ",", "0.9", ")", "\n", "self", ".", "lander", ".", "color2", "=", "(", "0.3", ",", "0.3", ",", "0.5", ")", "\n", "self", ".", "lander", ".", "ApplyForceToCenter", "(", "(", "\n", "self", ".", "np_random", ".", "uniform", "(", "-", "INITIAL_RANDOM", ",", "INITIAL_RANDOM", ")", ",", "\n", "self", ".", "np_random", ".", "uniform", "(", "-", "INITIAL_RANDOM", ",", "INITIAL_RANDOM", ")", "\n", ")", ",", "True", ")", "\n", "\n", "self", ".", "legs", "=", "[", "]", "\n", "for", "i", "in", "[", "-", "1", ",", "+", "1", "]", ":", "\n", "            ", "leg", "=", "self", ".", "world", ".", "CreateDynamicBody", "(", "\n", "position", "=", "(", "VIEWPORT_W", "/", "SCALE", "/", "2", "-", "i", "*", "LEG_AWAY", "/", "SCALE", ",", "initial_y", ")", ",", "\n", "angle", "=", "(", "i", "*", "0.05", ")", ",", "\n", "fixtures", "=", "fixtureDef", "(", "\n", "shape", "=", "polygonShape", "(", "box", "=", "(", "LEG_W", "/", "SCALE", ",", "LEG_H", "/", "SCALE", ")", ")", ",", "\n", "density", "=", "1.0", ",", "\n", "restitution", "=", "0.0", ",", "\n", "categoryBits", "=", "0x0020", ",", "\n", "maskBits", "=", "0x001", ")", "\n", ")", "\n", "leg", ".", "ground_contact", "=", "False", "\n", "leg", ".", "color1", "=", "(", "0.5", ",", "0.4", ",", "0.9", ")", "\n", "leg", ".", "color2", "=", "(", "0.3", ",", "0.3", ",", "0.5", ")", "\n", "rjd", "=", "revoluteJointDef", "(", "\n", "bodyA", "=", "self", ".", "lander", ",", "\n", "bodyB", "=", "leg", ",", "\n", "localAnchorA", "=", "(", "0", ",", "0", ")", ",", "\n", "localAnchorB", "=", "(", "i", "*", "LEG_AWAY", "/", "SCALE", ",", "LEG_DOWN", "/", "SCALE", ")", ",", "\n", "enableMotor", "=", "True", ",", "\n", "enableLimit", "=", "True", ",", "\n", "maxMotorTorque", "=", "LEG_SPRING_TORQUE", ",", "\n", "motorSpeed", "=", "+", "0.3", "*", "i", "# low enough not to jump back into the sky", "\n", ")", "\n", "if", "i", "==", "-", "1", ":", "\n", "                ", "rjd", ".", "lowerAngle", "=", "+", "0.9", "-", "0.5", "# Yes, the most esoteric numbers here, angles legs have freedom to travel within", "\n", "rjd", ".", "upperAngle", "=", "+", "0.9", "\n", "", "else", ":", "\n", "                ", "rjd", ".", "lowerAngle", "=", "-", "0.9", "\n", "rjd", ".", "upperAngle", "=", "-", "0.9", "+", "0.5", "\n", "", "leg", ".", "joint", "=", "self", ".", "world", ".", "CreateJoint", "(", "rjd", ")", "\n", "self", ".", "legs", ".", "append", "(", "leg", ")", "\n", "\n", "", "self", ".", "drawlist", "=", "[", "self", ".", "lander", "]", "+", "self", ".", "legs", "\n", "\n", "return", "self", ".", "_step", "(", "np", ".", "array", "(", "[", "0", ",", "0", "]", ")", "if", "self", ".", "continuous", "else", "0", ")", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.box2d.lunar_lander.LunarLander._create_particle": [[216, 232], ["lunar_lander.LunarLander.world.CreateDynamicBody", "lunar_lander.LunarLander.particles.append", "lunar_lander.LunarLander._clean_particles", "Box2D.b2.fixtureDef", "Box2D.b2.circleShape"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.box2d.lunar_lander.LunarLander._clean_particles"], ["", "def", "_create_particle", "(", "self", ",", "mass", ",", "x", ",", "y", ",", "ttl", ")", ":", "\n", "        ", "p", "=", "self", ".", "world", ".", "CreateDynamicBody", "(", "\n", "position", "=", "(", "x", ",", "y", ")", ",", "\n", "angle", "=", "0.0", ",", "\n", "fixtures", "=", "fixtureDef", "(", "\n", "shape", "=", "circleShape", "(", "radius", "=", "2", "/", "SCALE", ",", "pos", "=", "(", "0", ",", "0", ")", ")", ",", "\n", "density", "=", "mass", ",", "\n", "friction", "=", "0.1", ",", "\n", "categoryBits", "=", "0x0100", ",", "\n", "maskBits", "=", "0x001", ",", "# collide only with ground", "\n", "restitution", "=", "0.3", ")", "\n", ")", "\n", "p", ".", "ttl", "=", "ttl", "\n", "self", ".", "particles", ".", "append", "(", "p", ")", "\n", "self", ".", "_clean_particles", "(", "False", ")", "\n", "return", "p", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.box2d.lunar_lander.LunarLander._clean_particles": [[233, 236], ["lunar_lander.LunarLander.world.DestroyBody", "lunar_lander.LunarLander.particles.pop"], "methods", ["None"], ["", "def", "_clean_particles", "(", "self", ",", "all", ")", ":", "\n", "        ", "while", "self", ".", "particles", "and", "(", "all", "or", "self", ".", "particles", "[", "0", "]", ".", "ttl", "<", "0", ")", ":", "\n", "            ", "self", ".", "world", ".", "DestroyBody", "(", "self", ".", "particles", ".", "pop", "(", "0", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.box2d.lunar_lander.LunarLander._step": [[237, 314], ["lunar_lander.LunarLander.action_space.contains", "lunar_lander.LunarLander.world.Step", "math.sin", "math.cos", "lunar_lander.LunarLander._create_particle", "lunar_lander.LunarLander.ApplyLinearImpulse", "lunar_lander.LunarLander.lander.ApplyLinearImpulse", "lunar_lander.LunarLander._create_particle", "lunar_lander.LunarLander.ApplyLinearImpulse", "lunar_lander.LunarLander.lander.ApplyLinearImpulse", "len", "numpy.array", "type", "lunar_lander.LunarLander.np_random.uniform", "range", "numpy.sign", "numpy.clip", "abs", "numpy.abs", "numpy.abs", "numpy.clip", "abs", "numpy.sqrt", "numpy.sqrt"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.spaces.discrete.Discrete.contains", "home.repos.pwc.inspect_result.Rondorf_BOReL.box2d.car_dynamics.Car._create_particle", "home.repos.pwc.inspect_result.Rondorf_BOReL.box2d.car_dynamics.Car._create_particle", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjvGeomWrapper.type"], ["", "", "def", "_step", "(", "self", ",", "action", ")", ":", "\n", "        ", "assert", "self", ".", "action_space", ".", "contains", "(", "action", ")", ",", "\"%r (%s) invalid \"", "%", "(", "action", ",", "type", "(", "action", ")", ")", "\n", "\n", "# Engines", "\n", "tip", "=", "(", "math", ".", "sin", "(", "self", ".", "lander", ".", "angle", ")", ",", "math", ".", "cos", "(", "self", ".", "lander", ".", "angle", ")", ")", "\n", "side", "=", "(", "-", "tip", "[", "1", "]", ",", "tip", "[", "0", "]", ")", ";", "\n", "dispersion", "=", "[", "self", ".", "np_random", ".", "uniform", "(", "-", "1.0", ",", "+", "1.0", ")", "/", "SCALE", "for", "_", "in", "range", "(", "2", ")", "]", "\n", "\n", "m_power", "=", "0.0", "\n", "if", "(", "self", ".", "continuous", "and", "action", "[", "0", "]", ">", "0.0", ")", "or", "(", "not", "self", ".", "continuous", "and", "action", "==", "2", ")", ":", "\n", "# Main engine", "\n", "            ", "if", "self", ".", "continuous", ":", "\n", "                ", "m_power", "=", "(", "np", ".", "clip", "(", "action", "[", "0", "]", ",", "0.0", ",", "1.0", ")", "+", "1.0", ")", "*", "0.5", "# 0.5..1.0", "\n", "assert", "m_power", ">=", "0.5", "and", "m_power", "<=", "1.0", "\n", "", "else", ":", "\n", "                ", "m_power", "=", "1.0", "\n", "", "ox", "=", "tip", "[", "0", "]", "*", "(", "4", "/", "SCALE", "+", "2", "*", "dispersion", "[", "0", "]", ")", "+", "side", "[", "0", "]", "*", "dispersion", "[", "1", "]", "# 4 is move a bit downwards, +-2 for randomness", "\n", "oy", "=", "-", "tip", "[", "1", "]", "*", "(", "4", "/", "SCALE", "+", "2", "*", "dispersion", "[", "0", "]", ")", "-", "side", "[", "1", "]", "*", "dispersion", "[", "1", "]", "\n", "impulse_pos", "=", "(", "self", ".", "lander", ".", "position", "[", "0", "]", "+", "ox", ",", "self", ".", "lander", ".", "position", "[", "1", "]", "+", "oy", ")", "\n", "p", "=", "self", ".", "_create_particle", "(", "3.5", ",", "impulse_pos", "[", "0", "]", ",", "impulse_pos", "[", "1", "]", ",", "m_power", ")", "# particles are just a decoration, 3.5 is here to make particle speed adequate", "\n", "p", ".", "ApplyLinearImpulse", "(", "(", "ox", "*", "MAIN_ENGINE_POWER", "*", "m_power", ",", "oy", "*", "MAIN_ENGINE_POWER", "*", "m_power", ")", ",", "impulse_pos", ",", "True", ")", "\n", "self", ".", "lander", ".", "ApplyLinearImpulse", "(", "(", "-", "ox", "*", "MAIN_ENGINE_POWER", "*", "m_power", ",", "-", "oy", "*", "MAIN_ENGINE_POWER", "*", "m_power", ")", ",", "impulse_pos", ",", "True", ")", "\n", "\n", "", "s_power", "=", "0.0", "\n", "if", "(", "self", ".", "continuous", "and", "np", ".", "abs", "(", "action", "[", "1", "]", ")", ">", "0.5", ")", "or", "(", "not", "self", ".", "continuous", "and", "action", "in", "[", "1", ",", "3", "]", ")", ":", "\n", "# Orientation engines", "\n", "            ", "if", "self", ".", "continuous", ":", "\n", "                ", "direction", "=", "np", ".", "sign", "(", "action", "[", "1", "]", ")", "\n", "s_power", "=", "np", ".", "clip", "(", "np", ".", "abs", "(", "action", "[", "1", "]", ")", ",", "0.5", ",", "1.0", ")", "\n", "assert", "s_power", ">=", "0.5", "and", "s_power", "<=", "1.0", "\n", "", "else", ":", "\n", "                ", "direction", "=", "action", "-", "2", "\n", "s_power", "=", "1.0", "\n", "", "ox", "=", "tip", "[", "0", "]", "*", "dispersion", "[", "0", "]", "+", "side", "[", "0", "]", "*", "(", "3", "*", "dispersion", "[", "1", "]", "+", "direction", "*", "SIDE_ENGINE_AWAY", "/", "SCALE", ")", "\n", "oy", "=", "-", "tip", "[", "1", "]", "*", "dispersion", "[", "0", "]", "-", "side", "[", "1", "]", "*", "(", "3", "*", "dispersion", "[", "1", "]", "+", "direction", "*", "SIDE_ENGINE_AWAY", "/", "SCALE", ")", "\n", "impulse_pos", "=", "(", "self", ".", "lander", ".", "position", "[", "0", "]", "+", "ox", "-", "tip", "[", "0", "]", "*", "17", "/", "SCALE", ",", "self", ".", "lander", ".", "position", "[", "1", "]", "+", "oy", "+", "tip", "[", "1", "]", "*", "SIDE_ENGINE_HEIGHT", "/", "SCALE", ")", "\n", "p", "=", "self", ".", "_create_particle", "(", "0.7", ",", "impulse_pos", "[", "0", "]", ",", "impulse_pos", "[", "1", "]", ",", "s_power", ")", "\n", "p", ".", "ApplyLinearImpulse", "(", "(", "ox", "*", "SIDE_ENGINE_POWER", "*", "s_power", ",", "oy", "*", "SIDE_ENGINE_POWER", "*", "s_power", ")", ",", "impulse_pos", ",", "True", ")", "\n", "self", ".", "lander", ".", "ApplyLinearImpulse", "(", "(", "-", "ox", "*", "SIDE_ENGINE_POWER", "*", "s_power", ",", "-", "oy", "*", "SIDE_ENGINE_POWER", "*", "s_power", ")", ",", "impulse_pos", ",", "True", ")", "\n", "\n", "", "self", ".", "world", ".", "Step", "(", "1.0", "/", "FPS", ",", "6", "*", "30", ",", "2", "*", "30", ")", "\n", "\n", "pos", "=", "self", ".", "lander", ".", "position", "\n", "vel", "=", "self", ".", "lander", ".", "linearVelocity", "\n", "state", "=", "[", "\n", "(", "pos", ".", "x", "-", "VIEWPORT_W", "/", "SCALE", "/", "2", ")", "/", "(", "VIEWPORT_W", "/", "SCALE", "/", "2", ")", ",", "\n", "(", "pos", ".", "y", "-", "(", "self", ".", "helipad_y", "+", "LEG_DOWN", "/", "SCALE", ")", ")", "/", "(", "VIEWPORT_W", "/", "SCALE", "/", "2", ")", ",", "\n", "vel", ".", "x", "*", "(", "VIEWPORT_W", "/", "SCALE", "/", "2", ")", "/", "FPS", ",", "\n", "vel", ".", "y", "*", "(", "VIEWPORT_H", "/", "SCALE", "/", "2", ")", "/", "FPS", ",", "\n", "self", ".", "lander", ".", "angle", ",", "\n", "20.0", "*", "self", ".", "lander", ".", "angularVelocity", "/", "FPS", ",", "\n", "1.0", "if", "self", ".", "legs", "[", "0", "]", ".", "ground_contact", "else", "0.0", ",", "\n", "1.0", "if", "self", ".", "legs", "[", "1", "]", ".", "ground_contact", "else", "0.0", "\n", "]", "\n", "assert", "len", "(", "state", ")", "==", "8", "\n", "\n", "reward", "=", "0", "\n", "shaping", "=", "-", "100", "*", "np", ".", "sqrt", "(", "state", "[", "0", "]", "*", "state", "[", "0", "]", "+", "state", "[", "1", "]", "*", "state", "[", "1", "]", ")", "-", "100", "*", "np", ".", "sqrt", "(", "state", "[", "2", "]", "*", "state", "[", "2", "]", "+", "state", "[", "3", "]", "*", "state", "[", "3", "]", ")", "-", "100", "*", "abs", "(", "state", "[", "4", "]", ")", "+", "10", "*", "state", "[", "6", "]", "+", "10", "*", "state", "[", "7", "]", "# And ten points for legs contact, the idea is if you", "\n", "# lose contact again after landing, you get negative reward", "\n", "if", "self", ".", "prev_shaping", "is", "not", "None", ":", "\n", "            ", "reward", "=", "shaping", "-", "self", ".", "prev_shaping", "\n", "", "self", ".", "prev_shaping", "=", "shaping", "\n", "\n", "reward", "-=", "m_power", "*", "0.30", "# less fuel spent is better, about -30 for heurisic landing", "\n", "reward", "-=", "s_power", "*", "0.03", "\n", "\n", "done", "=", "False", "\n", "if", "self", ".", "game_over", "or", "abs", "(", "state", "[", "0", "]", ")", ">=", "1.0", ":", "\n", "            ", "done", "=", "True", "\n", "reward", "=", "-", "100", "\n", "", "if", "not", "self", ".", "lander", ".", "awake", ":", "\n", "            ", "done", "=", "True", "\n", "reward", "=", "+", "100", "\n", "", "return", "np", ".", "array", "(", "state", ")", ",", "reward", ",", "done", ",", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.box2d.lunar_lander.LunarLander._render": [[315, 357], ["lunar_lander.LunarLander._clean_particles", "lunar_lander.LunarLander.viewer.render", "rendering.Viewer", "lunar_lander.LunarLander.viewer.set_bounds", "lunar_lander.LunarLander.viewer.draw_polygon", "lunar_lander.LunarLander.viewer.draw_polyline", "lunar_lander.LunarLander.viewer.draw_polygon", "lunar_lander.LunarLander.viewer.close", "max", "max", "max", "max", "max", "max", "type", "rendering.Transform", "lunar_lander.LunarLander.viewer.draw_circle().add_attr", "lunar_lander.LunarLander.viewer.draw_circle().add_attr", "lunar_lander.LunarLander.viewer.draw_polygon", "path.append", "lunar_lander.LunarLander.viewer.draw_polyline", "lunar_lander.LunarLander.viewer.draw_circle", "lunar_lander.LunarLander.viewer.draw_circle"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.box2d.lunar_lander.LunarLander._clean_particles", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.render", "home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.rendering.Viewer.set_bounds", "home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.rendering.Viewer.draw_polygon", "home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.rendering.Viewer.draw_polyline", "home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.rendering.Viewer.draw_polygon", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.close", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjvGeomWrapper.type", "home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.rendering.Geom.add_attr", "home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.rendering.Geom.add_attr", "home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.rendering.Viewer.draw_polygon", "home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.rendering.Viewer.draw_polyline", "home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.rendering.Viewer.draw_circle", "home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.rendering.Viewer.draw_circle"], ["", "def", "_render", "(", "self", ",", "mode", "=", "'human'", ",", "close", "=", "False", ")", ":", "\n", "        ", "if", "close", ":", "\n", "            ", "if", "self", ".", "viewer", "is", "not", "None", ":", "\n", "                ", "self", ".", "viewer", ".", "close", "(", ")", "\n", "self", ".", "viewer", "=", "None", "\n", "", "return", "\n", "\n", "", "from", "environments", ".", "mujoco", ".", "rand_param_envs", ".", "gym", ".", "envs", ".", "classic_control", "import", "rendering", "\n", "if", "self", ".", "viewer", "is", "None", ":", "\n", "            ", "self", ".", "viewer", "=", "rendering", ".", "Viewer", "(", "VIEWPORT_W", ",", "VIEWPORT_H", ")", "\n", "self", ".", "viewer", ".", "set_bounds", "(", "0", ",", "VIEWPORT_W", "/", "SCALE", ",", "0", ",", "VIEWPORT_H", "/", "SCALE", ")", "\n", "\n", "", "for", "obj", "in", "self", ".", "particles", ":", "\n", "            ", "obj", ".", "ttl", "-=", "0.15", "\n", "obj", ".", "color1", "=", "(", "max", "(", "0.2", ",", "0.2", "+", "obj", ".", "ttl", ")", ",", "max", "(", "0.2", ",", "0.5", "*", "obj", ".", "ttl", ")", ",", "max", "(", "0.2", ",", "0.5", "*", "obj", ".", "ttl", ")", ")", "\n", "obj", ".", "color2", "=", "(", "max", "(", "0.2", ",", "0.2", "+", "obj", ".", "ttl", ")", ",", "max", "(", "0.2", ",", "0.5", "*", "obj", ".", "ttl", ")", ",", "max", "(", "0.2", ",", "0.5", "*", "obj", ".", "ttl", ")", ")", "\n", "\n", "", "self", ".", "_clean_particles", "(", "False", ")", "\n", "\n", "for", "p", "in", "self", ".", "sky_polys", ":", "\n", "            ", "self", ".", "viewer", ".", "draw_polygon", "(", "p", ",", "color", "=", "(", "0", ",", "0", ",", "0", ")", ")", "\n", "\n", "", "for", "obj", "in", "self", ".", "particles", "+", "self", ".", "drawlist", ":", "\n", "            ", "for", "f", "in", "obj", ".", "fixtures", ":", "\n", "                ", "trans", "=", "f", ".", "body", ".", "transform", "\n", "if", "type", "(", "f", ".", "shape", ")", "is", "circleShape", ":", "\n", "                    ", "t", "=", "rendering", ".", "Transform", "(", "translation", "=", "trans", "*", "f", ".", "shape", ".", "pos", ")", "\n", "self", ".", "viewer", ".", "draw_circle", "(", "f", ".", "shape", ".", "radius", ",", "20", ",", "color", "=", "obj", ".", "color1", ")", ".", "add_attr", "(", "t", ")", "\n", "self", ".", "viewer", ".", "draw_circle", "(", "f", ".", "shape", ".", "radius", ",", "20", ",", "color", "=", "obj", ".", "color2", ",", "filled", "=", "False", ",", "linewidth", "=", "2", ")", ".", "add_attr", "(", "t", ")", "\n", "", "else", ":", "\n", "                    ", "path", "=", "[", "trans", "*", "v", "for", "v", "in", "f", ".", "shape", ".", "vertices", "]", "\n", "self", ".", "viewer", ".", "draw_polygon", "(", "path", ",", "color", "=", "obj", ".", "color1", ")", "\n", "path", ".", "append", "(", "path", "[", "0", "]", ")", "\n", "self", ".", "viewer", ".", "draw_polyline", "(", "path", ",", "color", "=", "obj", ".", "color2", ",", "linewidth", "=", "2", ")", "\n", "\n", "", "", "", "for", "x", "in", "[", "self", ".", "helipad_x1", ",", "self", ".", "helipad_x2", "]", ":", "\n", "            ", "flagy1", "=", "self", ".", "helipad_y", "\n", "flagy2", "=", "flagy1", "+", "50", "/", "SCALE", "\n", "self", ".", "viewer", ".", "draw_polyline", "(", "[", "(", "x", ",", "flagy1", ")", ",", "(", "x", ",", "flagy2", ")", "]", ",", "color", "=", "(", "1", ",", "1", ",", "1", ")", ")", "\n", "self", ".", "viewer", ".", "draw_polygon", "(", "[", "(", "x", ",", "flagy2", ")", ",", "(", "x", ",", "flagy2", "-", "10", "/", "SCALE", ")", ",", "(", "x", "+", "25", "/", "SCALE", ",", "flagy2", "-", "5", "/", "SCALE", ")", "]", ",", "color", "=", "(", "0.8", ",", "0.8", ",", "0", ")", ")", "\n", "\n", "", "return", "self", ".", "viewer", ".", "render", "(", "return_rgb_array", "=", "mode", "==", "'rgb_array'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.box2d.lunar_lander.heuristic": [[361, 391], ["numpy.abs", "numpy.array", "numpy.clip", "numpy.abs"], "function", ["None"], ["", "def", "heuristic", "(", "env", ",", "s", ")", ":", "\n", "# Heuristic for:", "\n", "# 1. Testing. ", "\n", "# 2. Demonstration rollout.", "\n", "    ", "angle_targ", "=", "s", "[", "0", "]", "*", "0.5", "+", "s", "[", "2", "]", "*", "1.0", "# angle should point towards center (s[0] is horizontal coordinate, s[2] hor speed)", "\n", "if", "angle_targ", ">", "0.4", ":", "angle_targ", "=", "0.4", "# more than 0.4 radians (22 degrees) is bad", "\n", "if", "angle_targ", "<", "-", "0.4", ":", "angle_targ", "=", "-", "0.4", "\n", "hover_targ", "=", "0.55", "*", "np", ".", "abs", "(", "s", "[", "0", "]", ")", "# target y should be proporional to horizontal offset", "\n", "\n", "# PID controller: s[4] angle, s[5] angularSpeed", "\n", "angle_todo", "=", "(", "angle_targ", "-", "s", "[", "4", "]", ")", "*", "0.5", "-", "(", "s", "[", "5", "]", ")", "*", "1.0", "\n", "#print(\"angle_targ=%0.2f, angle_todo=%0.2f\" % (angle_targ, angle_todo))", "\n", "\n", "# PID controller: s[1] vertical coordinate s[3] vertical speed", "\n", "hover_todo", "=", "(", "hover_targ", "-", "s", "[", "1", "]", ")", "*", "0.5", "-", "(", "s", "[", "3", "]", ")", "*", "0.5", "\n", "#print(\"hover_targ=%0.2f, hover_todo=%0.2f\" % (hover_targ, hover_todo))", "\n", "\n", "if", "s", "[", "6", "]", "or", "s", "[", "7", "]", ":", "# legs have contact", "\n", "        ", "angle_todo", "=", "0", "\n", "hover_todo", "=", "-", "(", "s", "[", "3", "]", ")", "*", "0.5", "# override to reduce fall speed, that's all we need after contact", "\n", "\n", "", "if", "env", ".", "continuous", ":", "\n", "        ", "a", "=", "np", ".", "array", "(", "[", "hover_todo", "*", "20", "-", "1", ",", "-", "angle_todo", "*", "20", "]", ")", "\n", "a", "=", "np", ".", "clip", "(", "a", ",", "-", "1", ",", "+", "1", ")", "\n", "", "else", ":", "\n", "        ", "a", "=", "0", "\n", "if", "hover_todo", ">", "np", ".", "abs", "(", "angle_todo", ")", "and", "hover_todo", ">", "0.05", ":", "a", "=", "2", "\n", "elif", "angle_todo", "<", "-", "0.05", ":", "a", "=", "3", "\n", "elif", "angle_todo", ">", "+", "0.05", ":", "a", "=", "1", "\n", "", "return", "a", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.box2d.car_dynamics.Car.__init__": [[50, 108], ["car_dynamics.Car.world.CreateDynamicBody", "car_dynamics.Car.world.CreateDynamicBody", "Box2D.b2.revoluteJointDef", "car_dynamics.Car.world.CreateJoint", "set", "car_dynamics.Car.wheels.append", "Box2D.b2.fixtureDef", "Box2D.b2.fixtureDef", "Box2D.b2.fixtureDef", "Box2D.b2.fixtureDef", "Box2D.b2.fixtureDef", "Box2D.b2.polygonShape", "Box2D.b2.polygonShape", "Box2D.b2.polygonShape", "Box2D.b2.polygonShape", "Box2D.b2.polygonShape"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "world", ",", "init_angle", ",", "init_x", ",", "init_y", ")", ":", "\n", "        ", "self", ".", "world", "=", "world", "\n", "self", ".", "hull", "=", "self", ".", "world", ".", "CreateDynamicBody", "(", "\n", "position", "=", "(", "init_x", ",", "init_y", ")", ",", "\n", "angle", "=", "init_angle", ",", "\n", "fixtures", "=", "[", "\n", "fixtureDef", "(", "shape", "=", "polygonShape", "(", "vertices", "=", "[", "(", "x", "*", "SIZE", ",", "y", "*", "SIZE", ")", "for", "x", ",", "y", "in", "HULL_POLY1", "]", ")", ",", "density", "=", "1.0", ")", ",", "\n", "fixtureDef", "(", "shape", "=", "polygonShape", "(", "vertices", "=", "[", "(", "x", "*", "SIZE", ",", "y", "*", "SIZE", ")", "for", "x", ",", "y", "in", "HULL_POLY2", "]", ")", ",", "density", "=", "1.0", ")", ",", "\n", "fixtureDef", "(", "shape", "=", "polygonShape", "(", "vertices", "=", "[", "(", "x", "*", "SIZE", ",", "y", "*", "SIZE", ")", "for", "x", ",", "y", "in", "HULL_POLY3", "]", ")", ",", "density", "=", "1.0", ")", ",", "\n", "fixtureDef", "(", "shape", "=", "polygonShape", "(", "vertices", "=", "[", "(", "x", "*", "SIZE", ",", "y", "*", "SIZE", ")", "for", "x", ",", "y", "in", "HULL_POLY4", "]", ")", ",", "density", "=", "1.0", ")", "\n", "]", "\n", ")", "\n", "self", ".", "hull", ".", "color", "=", "(", "0.8", ",", "0.0", ",", "0.0", ")", "\n", "self", ".", "wheels", "=", "[", "]", "\n", "self", ".", "fuel_spent", "=", "0.0", "\n", "WHEEL_POLY", "=", "[", "\n", "(", "-", "WHEEL_W", ",", "+", "WHEEL_R", ")", ",", "(", "+", "WHEEL_W", ",", "+", "WHEEL_R", ")", ",", "\n", "(", "+", "WHEEL_W", ",", "-", "WHEEL_R", ")", ",", "(", "-", "WHEEL_W", ",", "-", "WHEEL_R", ")", "\n", "]", "\n", "for", "wx", ",", "wy", "in", "WHEELPOS", ":", "\n", "            ", "front_k", "=", "1.0", "if", "wy", ">", "0", "else", "1.0", "\n", "w", "=", "self", ".", "world", ".", "CreateDynamicBody", "(", "\n", "position", "=", "(", "init_x", "+", "wx", "*", "SIZE", ",", "init_y", "+", "wy", "*", "SIZE", ")", ",", "\n", "angle", "=", "init_angle", ",", "\n", "fixtures", "=", "fixtureDef", "(", "\n", "shape", "=", "polygonShape", "(", "vertices", "=", "[", "(", "x", "*", "front_k", "*", "SIZE", ",", "y", "*", "front_k", "*", "SIZE", ")", "for", "x", ",", "y", "in", "WHEEL_POLY", "]", ")", ",", "\n", "density", "=", "0.1", ",", "\n", "categoryBits", "=", "0x0020", ",", "\n", "maskBits", "=", "0x001", ",", "\n", "restitution", "=", "0.0", ")", "\n", ")", "\n", "w", ".", "wheel_rad", "=", "front_k", "*", "WHEEL_R", "*", "SIZE", "\n", "w", ".", "color", "=", "WHEEL_COLOR", "\n", "w", ".", "gas", "=", "0.0", "\n", "w", ".", "brake", "=", "0.0", "\n", "w", ".", "steer", "=", "0.0", "\n", "w", ".", "phase", "=", "0.0", "# wheel angle", "\n", "w", ".", "omega", "=", "0.0", "# angular velocity", "\n", "w", ".", "skid_start", "=", "None", "\n", "w", ".", "skid_particle", "=", "None", "\n", "rjd", "=", "revoluteJointDef", "(", "\n", "bodyA", "=", "self", ".", "hull", ",", "\n", "bodyB", "=", "w", ",", "\n", "localAnchorA", "=", "(", "wx", "*", "SIZE", ",", "wy", "*", "SIZE", ")", ",", "\n", "localAnchorB", "=", "(", "0", ",", "0", ")", ",", "\n", "enableMotor", "=", "True", ",", "\n", "enableLimit", "=", "True", ",", "\n", "maxMotorTorque", "=", "180", "*", "900", "*", "SIZE", "*", "SIZE", ",", "\n", "motorSpeed", "=", "0", ",", "\n", "lowerAngle", "=", "-", "0.4", ",", "\n", "upperAngle", "=", "+", "0.4", ",", "\n", ")", "\n", "w", ".", "joint", "=", "self", ".", "world", ".", "CreateJoint", "(", "rjd", ")", "\n", "w", ".", "tiles", "=", "set", "(", ")", "\n", "w", ".", "userData", "=", "w", "\n", "self", ".", "wheels", ".", "append", "(", "w", ")", "\n", "", "self", ".", "drawlist", "=", "self", ".", "wheels", "+", "[", "self", ".", "hull", "]", "\n", "self", ".", "particles", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.box2d.car_dynamics.Car.gas": [[109, 116], ["numpy.clip"], "methods", ["None"], ["", "def", "gas", "(", "self", ",", "gas", ")", ":", "\n", "        ", "'control: rear wheel drive'", "\n", "gas", "=", "np", ".", "clip", "(", "gas", ",", "0", ",", "1", ")", "\n", "for", "w", "in", "self", ".", "wheels", "[", "2", ":", "4", "]", ":", "\n", "            ", "diff", "=", "gas", "-", "w", ".", "gas", "\n", "if", "diff", ">", "0.1", ":", "diff", "=", "0.1", "# gradually increase, but stop immediately", "\n", "w", ".", "gas", "+=", "diff", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.box2d.car_dynamics.Car.brake": [[117, 121], ["None"], "methods", ["None"], ["", "", "def", "brake", "(", "self", ",", "b", ")", ":", "\n", "        ", "'control: brake b=0..1, more than 0.9 blocks wheels to zero rotation'", "\n", "for", "w", "in", "self", ".", "wheels", ":", "\n", "            ", "w", ".", "brake", "=", "b", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.box2d.car_dynamics.Car.steer": [[122, 126], ["None"], "methods", ["None"], ["", "", "def", "steer", "(", "self", ",", "s", ")", ":", "\n", "        ", "'control: steer s=-1..1, it takes time to rotate steering wheel from side to side, s is target position'", "\n", "self", ".", "wheels", "[", "0", "]", ".", "steer", "=", "s", "\n", "self", ".", "wheels", "[", "1", "]", ".", "steer", "=", "s", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.box2d.car_dynamics.Car.step": [[127, 199], ["numpy.sign", "abs", "w.GetWorldVector", "w.GetWorldVector", "numpy.sqrt", "w.ApplyForceToCenter", "min", "max", "abs", "abs", "abs", "numpy.square", "numpy.square", "w.skid_particle.poly.append", "numpy.sign", "abs", "abs", "abs", "len", "car_dynamics.Car._create_particle"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.box2d.car_dynamics.Car._create_particle"], ["", "def", "step", "(", "self", ",", "dt", ")", ":", "\n", "        ", "for", "w", "in", "self", ".", "wheels", ":", "\n", "# Steer each wheel", "\n", "            ", "dir", "=", "np", ".", "sign", "(", "w", ".", "steer", "-", "w", ".", "joint", ".", "angle", ")", "\n", "val", "=", "abs", "(", "w", ".", "steer", "-", "w", ".", "joint", ".", "angle", ")", "\n", "w", ".", "joint", ".", "motorSpeed", "=", "dir", "*", "min", "(", "50.0", "*", "val", ",", "3.0", ")", "\n", "\n", "# Position => friction_limit", "\n", "grass", "=", "True", "\n", "friction_limit", "=", "FRICTION_LIMIT", "*", "0.6", "# Grass friction if no tile", "\n", "for", "tile", "in", "w", ".", "tiles", ":", "\n", "                ", "friction_limit", "=", "max", "(", "friction_limit", ",", "FRICTION_LIMIT", "*", "tile", ".", "road_friction", ")", "\n", "grass", "=", "False", "\n", "\n", "# Force", "\n", "", "forw", "=", "w", ".", "GetWorldVector", "(", "(", "0", ",", "1", ")", ")", "\n", "side", "=", "w", ".", "GetWorldVector", "(", "(", "1", ",", "0", ")", ")", "\n", "v", "=", "w", ".", "linearVelocity", "\n", "vf", "=", "forw", "[", "0", "]", "*", "v", "[", "0", "]", "+", "forw", "[", "1", "]", "*", "v", "[", "1", "]", "# forward speed", "\n", "vs", "=", "side", "[", "0", "]", "*", "v", "[", "0", "]", "+", "side", "[", "1", "]", "*", "v", "[", "1", "]", "# side speed", "\n", "\n", "# WHEEL_MOMENT_OF_INERTIA*np.square(w.omega)/2 = E -- energy", "\n", "# WHEEL_MOMENT_OF_INERTIA*w.omega * domega/dt = dE/dt = W -- power", "\n", "# domega = dt*W/WHEEL_MOMENT_OF_INERTIA/w.omega", "\n", "w", ".", "omega", "+=", "dt", "*", "ENGINE_POWER", "*", "w", ".", "gas", "/", "WHEEL_MOMENT_OF_INERTIA", "/", "(", "abs", "(", "w", ".", "omega", ")", "+", "5.0", ")", "# small coef not to divide by zero", "\n", "self", ".", "fuel_spent", "+=", "dt", "*", "ENGINE_POWER", "*", "w", ".", "gas", "\n", "\n", "if", "w", ".", "brake", ">=", "0.9", ":", "\n", "                ", "w", ".", "omega", "=", "0", "\n", "", "elif", "w", ".", "brake", ">", "0", ":", "\n", "                ", "BRAKE_FORCE", "=", "15", "# radians per second", "\n", "dir", "=", "-", "np", ".", "sign", "(", "w", ".", "omega", ")", "\n", "val", "=", "BRAKE_FORCE", "*", "w", ".", "brake", "\n", "if", "abs", "(", "val", ")", ">", "abs", "(", "w", ".", "omega", ")", ":", "val", "=", "abs", "(", "w", ".", "omega", ")", "# low speed => same as = 0", "\n", "w", ".", "omega", "+=", "dir", "*", "val", "\n", "", "w", ".", "phase", "+=", "w", ".", "omega", "*", "dt", "\n", "\n", "vr", "=", "w", ".", "omega", "*", "w", ".", "wheel_rad", "# rotating wheel speed", "\n", "f_force", "=", "-", "vf", "+", "vr", "# force direction is direction of speed difference", "\n", "p_force", "=", "-", "vs", "\n", "\n", "# Physically correct is to always apply friction_limit until speed is equal.", "\n", "# But dt is finite, that will lead to oscillations if difference is already near zero.", "\n", "f_force", "*=", "205000", "*", "SIZE", "*", "SIZE", "# Random coefficient to cut oscillations in few steps (have no effect on friction_limit)", "\n", "p_force", "*=", "205000", "*", "SIZE", "*", "SIZE", "\n", "force", "=", "np", ".", "sqrt", "(", "np", ".", "square", "(", "f_force", ")", "+", "np", ".", "square", "(", "p_force", ")", ")", "\n", "\n", "# Skid trace", "\n", "if", "abs", "(", "force", ")", ">", "2.0", "*", "friction_limit", ":", "\n", "                ", "if", "w", ".", "skid_particle", "and", "w", ".", "skid_particle", ".", "grass", "==", "grass", "and", "len", "(", "w", ".", "skid_particle", ".", "poly", ")", "<", "30", ":", "\n", "                    ", "w", ".", "skid_particle", ".", "poly", ".", "append", "(", "(", "w", ".", "position", "[", "0", "]", ",", "w", ".", "position", "[", "1", "]", ")", ")", "\n", "", "elif", "w", ".", "skid_start", "is", "None", ":", "\n", "                    ", "w", ".", "skid_start", "=", "w", ".", "position", "\n", "", "else", ":", "\n", "                    ", "w", ".", "skid_particle", "=", "self", ".", "_create_particle", "(", "w", ".", "skid_start", ",", "w", ".", "position", ",", "grass", ")", "\n", "w", ".", "skid_start", "=", "None", "\n", "", "", "else", ":", "\n", "                ", "w", ".", "skid_start", "=", "None", "\n", "w", ".", "skid_particle", "=", "None", "\n", "\n", "", "if", "abs", "(", "force", ")", ">", "friction_limit", ":", "\n", "                ", "f_force", "/=", "force", "\n", "p_force", "/=", "force", "\n", "force", "=", "friction_limit", "# Correct physics here", "\n", "f_force", "*=", "force", "\n", "p_force", "*=", "force", "\n", "\n", "", "w", ".", "omega", "-=", "dt", "*", "f_force", "*", "w", ".", "wheel_rad", "/", "WHEEL_MOMENT_OF_INERTIA", "\n", "\n", "w", ".", "ApplyForceToCenter", "(", "(", "\n", "p_force", "*", "side", "[", "0", "]", "+", "f_force", "*", "forw", "[", "0", "]", ",", "\n", "p_force", "*", "side", "[", "1", "]", "+", "f_force", "*", "forw", "[", "1", "]", ")", ",", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.box2d.car_dynamics.Car.draw": [[200, 224], ["viewer.draw_polyline", "viewer.draw_polygon", "math.sin", "math.sin", "math.cos", "math.cos", "viewer.draw_polygon", "numpy.sign", "numpy.sign"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.rendering.Viewer.draw_polyline", "home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.rendering.Viewer.draw_polygon", "home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.rendering.Viewer.draw_polygon"], ["", "", "def", "draw", "(", "self", ",", "viewer", ",", "draw_particles", "=", "True", ")", ":", "\n", "        ", "if", "draw_particles", ":", "\n", "            ", "for", "p", "in", "self", ".", "particles", ":", "\n", "                ", "viewer", ".", "draw_polyline", "(", "p", ".", "poly", ",", "color", "=", "p", ".", "color", ",", "linewidth", "=", "5", ")", "\n", "", "", "for", "obj", "in", "self", ".", "drawlist", ":", "\n", "            ", "for", "f", "in", "obj", ".", "fixtures", ":", "\n", "                ", "trans", "=", "f", ".", "body", ".", "transform", "\n", "path", "=", "[", "trans", "*", "v", "for", "v", "in", "f", ".", "shape", ".", "vertices", "]", "\n", "viewer", ".", "draw_polygon", "(", "path", ",", "color", "=", "obj", ".", "color", ")", "\n", "if", "\"phase\"", "not", "in", "obj", ".", "__dict__", ":", "continue", "\n", "a1", "=", "obj", ".", "phase", "\n", "a2", "=", "obj", ".", "phase", "+", "1.2", "# radians", "\n", "s1", "=", "math", ".", "sin", "(", "a1", ")", "\n", "s2", "=", "math", ".", "sin", "(", "a2", ")", "\n", "c1", "=", "math", ".", "cos", "(", "a1", ")", "\n", "c2", "=", "math", ".", "cos", "(", "a2", ")", "\n", "if", "s1", ">", "0", "and", "s2", ">", "0", ":", "continue", "\n", "if", "s1", ">", "0", ":", "c1", "=", "np", ".", "sign", "(", "c1", ")", "\n", "if", "s2", ">", "0", ":", "c2", "=", "np", ".", "sign", "(", "c2", ")", "\n", "white_poly", "=", "[", "\n", "(", "-", "WHEEL_W", "*", "SIZE", ",", "+", "WHEEL_R", "*", "c1", "*", "SIZE", ")", ",", "(", "+", "WHEEL_W", "*", "SIZE", ",", "+", "WHEEL_R", "*", "c1", "*", "SIZE", ")", ",", "\n", "(", "+", "WHEEL_W", "*", "SIZE", ",", "+", "WHEEL_R", "*", "c2", "*", "SIZE", ")", ",", "(", "-", "WHEEL_W", "*", "SIZE", ",", "+", "WHEEL_R", "*", "c2", "*", "SIZE", ")", "\n", "]", "\n", "viewer", ".", "draw_polygon", "(", "[", "trans", "*", "v", "for", "v", "in", "white_poly", "]", ",", "color", "=", "WHEEL_WHITE", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.box2d.car_dynamics.Car._create_particle": [[225, 237], ["Particle", "car_dynamics.Car.particles.append", "len", "car_dynamics.Car.particles.pop"], "methods", ["None"], ["", "", "", "def", "_create_particle", "(", "self", ",", "point1", ",", "point2", ",", "grass", ")", ":", "\n", "        ", "class", "Particle", ":", "\n", "            ", "pass", "\n", "", "p", "=", "Particle", "(", ")", "\n", "p", ".", "color", "=", "WHEEL_COLOR", "if", "not", "grass", "else", "MUD_COLOR", "\n", "p", ".", "ttl", "=", "1", "\n", "p", ".", "poly", "=", "[", "(", "point1", "[", "0", "]", ",", "point1", "[", "1", "]", ")", ",", "(", "point2", "[", "0", "]", ",", "point2", "[", "1", "]", ")", "]", "\n", "p", ".", "grass", "=", "grass", "\n", "self", ".", "particles", ".", "append", "(", "p", ")", "\n", "while", "len", "(", "self", ".", "particles", ")", ">", "30", ":", "\n", "            ", "self", ".", "particles", ".", "pop", "(", "0", ")", "\n", "", "return", "p", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.box2d.car_dynamics.Car.destroy": [[238, 244], ["car_dynamics.Car.world.DestroyBody", "car_dynamics.Car.world.DestroyBody"], "methods", ["None"], ["", "def", "destroy", "(", "self", ")", ":", "\n", "        ", "self", ".", "world", ".", "DestroyBody", "(", "self", ".", "hull", ")", "\n", "self", ".", "hull", "=", "None", "\n", "for", "w", "in", "self", ".", "wheels", ":", "\n", "            ", "self", ".", "world", ".", "DestroyBody", "(", "w", ")", "\n", "", "self", ".", "wheels", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.box2d.car_racing.FrictionDetector.__init__": [[66, 69], ["Box2D.b2.contactListener.__init__"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.__init__"], ["    ", "def", "__init__", "(", "self", ",", "env", ")", ":", "\n", "        ", "contactListener", ".", "__init__", "(", "self", ")", "\n", "self", ".", "env", "=", "env", "\n", "", "def", "BeginContact", "(", "self", ",", "contact", ")", ":", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.box2d.car_racing.FrictionDetector.BeginContact": [[69, 71], ["car_racing.FrictionDetector._contact"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.box2d.car_racing.FrictionDetector._contact"], ["", "def", "BeginContact", "(", "self", ",", "contact", ")", ":", "\n", "        ", "self", ".", "_contact", "(", "contact", ",", "True", ")", "\n", "", "def", "EndContact", "(", "self", ",", "contact", ")", ":", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.box2d.car_racing.FrictionDetector.EndContact": [[71, 73], ["car_racing.FrictionDetector._contact"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.box2d.car_racing.FrictionDetector._contact"], ["", "def", "EndContact", "(", "self", ",", "contact", ")", ":", "\n", "        ", "self", ".", "_contact", "(", "contact", ",", "False", ")", "\n", "", "def", "_contact", "(", "self", ",", "contact", ",", "begin", ")", ":", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.box2d.car_racing.FrictionDetector._contact": [[73, 99], ["obj.tiles.add", "obj.tiles.remove", "len"], "methods", ["None"], ["", "def", "_contact", "(", "self", ",", "contact", ",", "begin", ")", ":", "\n", "        ", "tile", "=", "None", "\n", "obj", "=", "None", "\n", "u1", "=", "contact", ".", "fixtureA", ".", "body", ".", "userData", "\n", "u2", "=", "contact", ".", "fixtureB", ".", "body", ".", "userData", "\n", "if", "u1", "and", "\"road_friction\"", "in", "u1", ".", "__dict__", ":", "\n", "            ", "tile", "=", "u1", "\n", "obj", "=", "u2", "\n", "", "if", "u2", "and", "\"road_friction\"", "in", "u2", ".", "__dict__", ":", "\n", "            ", "tile", "=", "u2", "\n", "obj", "=", "u1", "\n", "", "if", "not", "tile", ":", "return", "\n", "\n", "tile", ".", "color", "[", "0", "]", "=", "ROAD_COLOR", "[", "0", "]", "\n", "tile", ".", "color", "[", "1", "]", "=", "ROAD_COLOR", "[", "1", "]", "\n", "tile", ".", "color", "[", "2", "]", "=", "ROAD_COLOR", "[", "2", "]", "\n", "if", "not", "obj", "or", "\"tiles\"", "not", "in", "obj", ".", "__dict__", ":", "return", "\n", "if", "begin", ":", "\n", "            ", "obj", ".", "tiles", ".", "add", "(", "tile", ")", "\n", "#print tile.road_friction, \"ADD\", len(obj.tiles)", "\n", "if", "not", "tile", ".", "road_visited", ":", "\n", "                ", "tile", ".", "road_visited", "=", "True", "\n", "self", ".", "env", ".", "reward", "+=", "1000.0", "/", "len", "(", "self", ".", "env", ".", "track", ")", "\n", "self", ".", "env", ".", "tile_visited_count", "+=", "1", "\n", "", "", "else", ":", "\n", "            ", "obj", ".", "tiles", ".", "remove", "(", "tile", ")", "\n", "#print tile.road_friction, \"DEL\", len(obj.tiles) -- should delete to zero when on grass (this works)", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.box2d.car_racing.CarRacing.__init__": [[107, 121], ["car_racing.CarRacing._seed", "car_racing.FrictionDetector", "Box2D.b2World", "environments.mujoco.rand_param_envs.gym.spaces.Box", "environments.mujoco.rand_param_envs.gym.spaces.Box", "numpy.array", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.algorithmic.algorithmic_env.AlgorithmicEnv._seed"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "_seed", "(", ")", "\n", "self", ".", "contactListener_keepref", "=", "FrictionDetector", "(", "self", ")", "\n", "self", ".", "world", "=", "Box2D", ".", "b2World", "(", "(", "0", ",", "0", ")", ",", "contactListener", "=", "self", ".", "contactListener_keepref", ")", "\n", "self", ".", "viewer", "=", "None", "\n", "self", ".", "invisible_state_window", "=", "None", "\n", "self", ".", "invisible_video_window", "=", "None", "\n", "self", ".", "road", "=", "None", "\n", "self", ".", "car", "=", "None", "\n", "self", ".", "reward", "=", "0.0", "\n", "self", ".", "prev_reward", "=", "0.0", "\n", "\n", "self", ".", "action_space", "=", "spaces", ".", "Box", "(", "np", ".", "array", "(", "[", "-", "1", ",", "0", ",", "0", "]", ")", ",", "np", ".", "array", "(", "[", "+", "1", ",", "+", "1", ",", "+", "1", "]", ")", ")", "# steer, gas, brake", "\n", "self", ".", "observation_space", "=", "spaces", ".", "Box", "(", "low", "=", "0", ",", "high", "=", "255", ",", "shape", "=", "(", "STATE_H", ",", "STATE_W", ",", "3", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.box2d.car_racing.CarRacing._seed": [[122, 125], ["environments.mujoco.rand_param_envs.gym.utils.seeding.np_random"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.utils.seeding.np_random"], ["", "def", "_seed", "(", "self", ",", "seed", "=", "None", ")", ":", "\n", "        ", "self", ".", "np_random", ",", "seed", "=", "seeding", ".", "np_random", "(", "seed", ")", "\n", "return", "[", "seed", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.box2d.car_racing.CarRacing._destroy": [[126, 132], ["car_racing.CarRacing.car.destroy", "car_racing.CarRacing.world.DestroyBody"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.box2d.car_dynamics.Car.destroy"], ["", "def", "_destroy", "(", "self", ")", ":", "\n", "        ", "if", "not", "self", ".", "road", ":", "return", "\n", "for", "t", "in", "self", ".", "road", ":", "\n", "            ", "self", ".", "world", ".", "DestroyBody", "(", "t", ")", "\n", "", "self", ".", "road", "=", "[", "]", "\n", "self", ".", "car", ".", "destroy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.box2d.car_racing.CarRacing._create_track": [[133, 276], ["range", "len", "print", "math.cos", "math.sin", "numpy.sqrt", "range", "range", "range", "car_racing.CarRacing.np_random.uniform", "checkpoints.append", "math.atan2", "math.cos", "math.sin", "track.append", "len", "len", "range", "len", "range", "len", "car_racing.CarRacing.world.CreateStaticBody", "car_racing.CarRacing.road_poly.append", "car_racing.CarRacing.road.append", "car_racing.CarRacing.np_random.uniform", "min", "min", "numpy.square", "numpy.square", "numpy.sign", "abs", "numpy.sign", "car_racing.CarRacing.road_poly.append", "abs", "abs", "abs", "Box2D.b2.fixtureDef", "math.cos", "math.sin", "math.cos", "math.sin", "math.cos", "math.sin", "math.cos", "math.sin", "math.cos", "math.sin", "len", "Box2D.b2.polygonShape", "math.cos", "math.sin", "math.cos", "math.sin", "math.cos", "math.sin", "math.cos", "math.sin", "len"], "methods", ["None"], ["", "def", "_create_track", "(", "self", ")", ":", "\n", "        ", "CHECKPOINTS", "=", "12", "\n", "\n", "# Create checkpoints", "\n", "checkpoints", "=", "[", "]", "\n", "for", "c", "in", "range", "(", "CHECKPOINTS", ")", ":", "\n", "            ", "alpha", "=", "2", "*", "math", ".", "pi", "*", "c", "/", "CHECKPOINTS", "+", "self", ".", "np_random", ".", "uniform", "(", "0", ",", "2", "*", "math", ".", "pi", "*", "1", "/", "CHECKPOINTS", ")", "\n", "rad", "=", "self", ".", "np_random", ".", "uniform", "(", "TRACK_RAD", "/", "3", ",", "TRACK_RAD", ")", "\n", "if", "c", "==", "0", ":", "\n", "                ", "alpha", "=", "0", "\n", "rad", "=", "1.5", "*", "TRACK_RAD", "\n", "", "if", "c", "==", "CHECKPOINTS", "-", "1", ":", "\n", "                ", "alpha", "=", "2", "*", "math", ".", "pi", "*", "c", "/", "CHECKPOINTS", "\n", "self", ".", "start_alpha", "=", "2", "*", "math", ".", "pi", "*", "(", "-", "0.5", ")", "/", "CHECKPOINTS", "\n", "rad", "=", "1.5", "*", "TRACK_RAD", "\n", "", "checkpoints", ".", "append", "(", "(", "alpha", ",", "rad", "*", "math", ".", "cos", "(", "alpha", ")", ",", "rad", "*", "math", ".", "sin", "(", "alpha", ")", ")", ")", "\n", "\n", "#print \"\\n\".join(str(h) for h in checkpoints)", "\n", "#self.road_poly = [ (    # uncomment this to see checkpoints", "\n", "#    [ (tx,ty) for a,tx,ty in checkpoints ],", "\n", "#    (0.7,0.7,0.9) ) ]", "\n", "", "self", ".", "road", "=", "[", "]", "\n", "\n", "# Go from one checkpoint to another to create track", "\n", "x", ",", "y", ",", "beta", "=", "1.5", "*", "TRACK_RAD", ",", "0", ",", "0", "\n", "dest_i", "=", "0", "\n", "laps", "=", "0", "\n", "track", "=", "[", "]", "\n", "no_freeze", "=", "2500", "\n", "visited_other_side", "=", "False", "\n", "while", "1", ":", "\n", "            ", "alpha", "=", "math", ".", "atan2", "(", "y", ",", "x", ")", "\n", "if", "visited_other_side", "and", "alpha", ">", "0", ":", "\n", "                ", "laps", "+=", "1", "\n", "visited_other_side", "=", "False", "\n", "", "if", "alpha", "<", "0", ":", "\n", "                ", "visited_other_side", "=", "True", "\n", "alpha", "+=", "2", "*", "math", ".", "pi", "\n", "", "while", "True", ":", "# Find destination from checkpoints", "\n", "                ", "failed", "=", "True", "\n", "while", "True", ":", "\n", "                    ", "dest_alpha", ",", "dest_x", ",", "dest_y", "=", "checkpoints", "[", "dest_i", "%", "len", "(", "checkpoints", ")", "]", "\n", "if", "alpha", "<=", "dest_alpha", ":", "\n", "                        ", "failed", "=", "False", "\n", "break", "\n", "", "dest_i", "+=", "1", "\n", "if", "dest_i", "%", "len", "(", "checkpoints", ")", "==", "0", ":", "break", "\n", "", "if", "not", "failed", ":", "break", "\n", "alpha", "-=", "2", "*", "math", ".", "pi", "\n", "continue", "\n", "", "r1x", "=", "math", ".", "cos", "(", "beta", ")", "\n", "r1y", "=", "math", ".", "sin", "(", "beta", ")", "\n", "p1x", "=", "-", "r1y", "\n", "p1y", "=", "r1x", "\n", "dest_dx", "=", "dest_x", "-", "x", "# vector towards destination", "\n", "dest_dy", "=", "dest_y", "-", "y", "\n", "proj", "=", "r1x", "*", "dest_dx", "+", "r1y", "*", "dest_dy", "# destination vector projected on rad", "\n", "while", "beta", "-", "alpha", ">", "1.5", "*", "math", ".", "pi", ":", "beta", "-=", "2", "*", "math", ".", "pi", "\n", "while", "beta", "-", "alpha", "<", "-", "1.5", "*", "math", ".", "pi", ":", "beta", "+=", "2", "*", "math", ".", "pi", "\n", "prev_beta", "=", "beta", "\n", "proj", "*=", "SCALE", "\n", "if", "proj", ">", "0.3", ":", "beta", "-=", "min", "(", "TRACK_TURN_RATE", ",", "abs", "(", "0.001", "*", "proj", ")", ")", "\n", "if", "proj", "<", "-", "0.3", ":", "beta", "+=", "min", "(", "TRACK_TURN_RATE", ",", "abs", "(", "0.001", "*", "proj", ")", ")", "\n", "x", "+=", "p1x", "*", "TRACK_DETAIL_STEP", "\n", "y", "+=", "p1y", "*", "TRACK_DETAIL_STEP", "\n", "track", ".", "append", "(", "(", "alpha", ",", "prev_beta", "*", "0.5", "+", "beta", "*", "0.5", ",", "x", ",", "y", ")", ")", "\n", "if", "laps", ">", "4", ":", "break", "\n", "no_freeze", "-=", "1", "\n", "if", "no_freeze", "==", "0", ":", "break", "\n", "#print \"\\n\".join([str(t) for t in enumerate(track)])", "\n", "\n", "# Find closed loop range i1..i2, first loop should be ignored, second is OK", "\n", "", "i1", ",", "i2", "=", "-", "1", ",", "-", "1", "\n", "i", "=", "len", "(", "track", ")", "\n", "while", "True", ":", "\n", "            ", "i", "-=", "1", "\n", "if", "i", "==", "0", ":", "return", "False", "# Failed", "\n", "pass_through_start", "=", "track", "[", "i", "]", "[", "0", "]", ">", "self", ".", "start_alpha", "and", "track", "[", "i", "-", "1", "]", "[", "0", "]", "<=", "self", ".", "start_alpha", "\n", "if", "pass_through_start", "and", "i2", "==", "-", "1", ":", "\n", "                ", "i2", "=", "i", "\n", "", "elif", "pass_through_start", "and", "i1", "==", "-", "1", ":", "\n", "                ", "i1", "=", "i", "\n", "break", "\n", "", "", "print", "(", "\"Track generation: %i..%i -> %i-tiles track\"", "%", "(", "i1", ",", "i2", ",", "i2", "-", "i1", ")", ")", "\n", "assert", "i1", "!=", "-", "1", "\n", "assert", "i2", "!=", "-", "1", "\n", "\n", "track", "=", "track", "[", "i1", ":", "i2", "-", "1", "]", "\n", "\n", "first_beta", "=", "track", "[", "0", "]", "[", "1", "]", "\n", "first_perp_x", "=", "math", ".", "cos", "(", "first_beta", ")", "\n", "first_perp_y", "=", "math", ".", "sin", "(", "first_beta", ")", "\n", "# Length of perpendicular jump to put together head and tail", "\n", "well_glued_together", "=", "np", ".", "sqrt", "(", "\n", "np", ".", "square", "(", "first_perp_x", "*", "(", "track", "[", "0", "]", "[", "2", "]", "-", "track", "[", "-", "1", "]", "[", "2", "]", ")", ")", "+", "\n", "np", ".", "square", "(", "first_perp_y", "*", "(", "track", "[", "0", "]", "[", "3", "]", "-", "track", "[", "-", "1", "]", "[", "3", "]", ")", ")", ")", "\n", "if", "well_glued_together", ">", "TRACK_DETAIL_STEP", ":", "\n", "            ", "return", "False", "\n", "\n", "# Red-white border on hard turns", "\n", "", "border", "=", "[", "False", "]", "*", "len", "(", "track", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "track", ")", ")", ":", "\n", "            ", "good", "=", "True", "\n", "oneside", "=", "0", "\n", "for", "neg", "in", "range", "(", "BORDER_MIN_COUNT", ")", ":", "\n", "                ", "beta1", "=", "track", "[", "i", "-", "neg", "-", "0", "]", "[", "1", "]", "\n", "beta2", "=", "track", "[", "i", "-", "neg", "-", "1", "]", "[", "1", "]", "\n", "good", "&=", "abs", "(", "beta1", "-", "beta2", ")", ">", "TRACK_TURN_RATE", "*", "0.2", "\n", "oneside", "+=", "np", ".", "sign", "(", "beta1", "-", "beta2", ")", "\n", "", "good", "&=", "abs", "(", "oneside", ")", "==", "BORDER_MIN_COUNT", "\n", "border", "[", "i", "]", "=", "good", "\n", "", "for", "i", "in", "range", "(", "len", "(", "track", ")", ")", ":", "\n", "            ", "for", "neg", "in", "range", "(", "BORDER_MIN_COUNT", ")", ":", "\n", "                ", "border", "[", "i", "-", "neg", "]", "|=", "border", "[", "i", "]", "\n", "\n", "# Create tiles", "\n", "", "", "for", "i", "in", "range", "(", "len", "(", "track", ")", ")", ":", "\n", "            ", "alpha1", ",", "beta1", ",", "x1", ",", "y1", "=", "track", "[", "i", "]", "\n", "alpha2", ",", "beta2", ",", "x2", ",", "y2", "=", "track", "[", "i", "-", "1", "]", "\n", "road1_l", "=", "(", "x1", "-", "TRACK_WIDTH", "*", "math", ".", "cos", "(", "beta1", ")", ",", "y1", "-", "TRACK_WIDTH", "*", "math", ".", "sin", "(", "beta1", ")", ")", "\n", "road1_r", "=", "(", "x1", "+", "TRACK_WIDTH", "*", "math", ".", "cos", "(", "beta1", ")", ",", "y1", "+", "TRACK_WIDTH", "*", "math", ".", "sin", "(", "beta1", ")", ")", "\n", "road2_l", "=", "(", "x2", "-", "TRACK_WIDTH", "*", "math", ".", "cos", "(", "beta2", ")", ",", "y2", "-", "TRACK_WIDTH", "*", "math", ".", "sin", "(", "beta2", ")", ")", "\n", "road2_r", "=", "(", "x2", "+", "TRACK_WIDTH", "*", "math", ".", "cos", "(", "beta2", ")", ",", "y2", "+", "TRACK_WIDTH", "*", "math", ".", "sin", "(", "beta2", ")", ")", "\n", "t", "=", "self", ".", "world", ".", "CreateStaticBody", "(", "fixtures", "=", "fixtureDef", "(", "\n", "shape", "=", "polygonShape", "(", "vertices", "=", "[", "road1_l", ",", "road1_r", ",", "road2_r", ",", "road2_l", "]", ")", "\n", ")", ")", "\n", "t", ".", "userData", "=", "t", "\n", "c", "=", "0.01", "*", "(", "i", "%", "3", ")", "\n", "t", ".", "color", "=", "[", "ROAD_COLOR", "[", "0", "]", "+", "c", ",", "ROAD_COLOR", "[", "1", "]", "+", "c", ",", "ROAD_COLOR", "[", "2", "]", "+", "c", "]", "\n", "t", ".", "road_visited", "=", "False", "\n", "t", ".", "road_friction", "=", "1.0", "\n", "t", ".", "fixtures", "[", "0", "]", ".", "sensor", "=", "True", "\n", "self", ".", "road_poly", ".", "append", "(", "(", "[", "road1_l", ",", "road1_r", ",", "road2_r", ",", "road2_l", "]", ",", "t", ".", "color", ")", ")", "\n", "self", ".", "road", ".", "append", "(", "t", ")", "\n", "if", "border", "[", "i", "]", ":", "\n", "                ", "side", "=", "np", ".", "sign", "(", "beta2", "-", "beta1", ")", "\n", "b1_l", "=", "(", "x1", "+", "side", "*", "TRACK_WIDTH", "*", "math", ".", "cos", "(", "beta1", ")", ",", "y1", "+", "side", "*", "TRACK_WIDTH", "*", "math", ".", "sin", "(", "beta1", ")", ")", "\n", "b1_r", "=", "(", "x1", "+", "side", "*", "(", "TRACK_WIDTH", "+", "BORDER", ")", "*", "math", ".", "cos", "(", "beta1", ")", ",", "y1", "+", "side", "*", "(", "TRACK_WIDTH", "+", "BORDER", ")", "*", "math", ".", "sin", "(", "beta1", ")", ")", "\n", "b2_l", "=", "(", "x2", "+", "side", "*", "TRACK_WIDTH", "*", "math", ".", "cos", "(", "beta2", ")", ",", "y2", "+", "side", "*", "TRACK_WIDTH", "*", "math", ".", "sin", "(", "beta2", ")", ")", "\n", "b2_r", "=", "(", "x2", "+", "side", "*", "(", "TRACK_WIDTH", "+", "BORDER", ")", "*", "math", ".", "cos", "(", "beta2", ")", ",", "y2", "+", "side", "*", "(", "TRACK_WIDTH", "+", "BORDER", ")", "*", "math", ".", "sin", "(", "beta2", ")", ")", "\n", "self", ".", "road_poly", ".", "append", "(", "(", "[", "b1_l", ",", "b1_r", ",", "b2_r", ",", "b2_l", "]", ",", "(", "1", ",", "1", ",", "1", ")", "if", "i", "%", "2", "==", "0", "else", "(", "1", ",", "0", ",", "0", ")", ")", ")", "\n", "", "", "self", ".", "track", "=", "track", "\n", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.box2d.car_racing.CarRacing._reset": [[277, 293], ["car_racing.CarRacing._destroy", "environments.mujoco.rand_param_envs.gym.envs.box2d.car_dynamics.Car", "car_racing.CarRacing._create_track", "print", "car_racing.CarRacing._step"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.box2d.bipedal_walker.BipedalWalker._destroy", "home.repos.pwc.inspect_result.Rondorf_BOReL.box2d.car_racing.CarRacing._create_track", "home.repos.pwc.inspect_result.Rondorf_BOReL.wrappers.monitoring.Monitor._step"], ["", "def", "_reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "_destroy", "(", ")", "\n", "self", ".", "reward", "=", "0.0", "\n", "self", ".", "prev_reward", "=", "0.0", "\n", "self", ".", "tile_visited_count", "=", "0", "\n", "self", ".", "t", "=", "0.0", "\n", "self", ".", "road_poly", "=", "[", "]", "\n", "self", ".", "human_render", "=", "False", "\n", "\n", "while", "True", ":", "\n", "            ", "success", "=", "self", ".", "_create_track", "(", ")", "\n", "if", "success", ":", "break", "\n", "print", "(", "\"retry to generate track (normal if there are not many of this messages)\"", ")", "\n", "", "self", ".", "car", "=", "Car", "(", "self", ".", "world", ",", "*", "self", ".", "track", "[", "0", "]", "[", "1", ":", "4", "]", ")", "\n", "\n", "return", "self", ".", "_step", "(", "None", ")", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.box2d.car_racing.CarRacing._step": [[294, 323], ["car_racing.CarRacing.car.step", "car_racing.CarRacing.world.Step", "car_racing.CarRacing._render", "car_racing.CarRacing.car.steer", "car_racing.CarRacing.car.gas", "car_racing.CarRacing.car.brake", "len", "abs", "abs"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.step", "home.repos.pwc.inspect_result.Rondorf_BOReL.algorithmic.algorithmic_env.AlgorithmicEnv._render", "home.repos.pwc.inspect_result.Rondorf_BOReL.box2d.car_dynamics.Car.steer", "home.repos.pwc.inspect_result.Rondorf_BOReL.box2d.car_dynamics.Car.gas", "home.repos.pwc.inspect_result.Rondorf_BOReL.box2d.car_dynamics.Car.brake"], ["", "def", "_step", "(", "self", ",", "action", ")", ":", "\n", "        ", "if", "action", "is", "not", "None", ":", "\n", "            ", "self", ".", "car", ".", "steer", "(", "-", "action", "[", "0", "]", ")", "\n", "self", ".", "car", ".", "gas", "(", "action", "[", "1", "]", ")", "\n", "self", ".", "car", ".", "brake", "(", "action", "[", "2", "]", ")", "\n", "\n", "", "self", ".", "car", ".", "step", "(", "1.0", "/", "FPS", ")", "\n", "self", ".", "world", ".", "Step", "(", "1.0", "/", "FPS", ",", "6", "*", "30", ",", "2", "*", "30", ")", "\n", "self", ".", "t", "+=", "1.0", "/", "FPS", "\n", "\n", "self", ".", "state", "=", "self", ".", "_render", "(", "\"state_pixels\"", ")", "\n", "\n", "step_reward", "=", "0", "\n", "done", "=", "False", "\n", "if", "action", "is", "not", "None", ":", "# First step without action, called from reset()", "\n", "            ", "self", ".", "reward", "-=", "0.1", "\n", "# We actually don't want to count fuel spent, we want car to be faster.", "\n", "#self.reward -=  10 * self.car.fuel_spent / ENGINE_POWER", "\n", "self", ".", "car", ".", "fuel_spent", "=", "0.0", "\n", "step_reward", "=", "self", ".", "reward", "-", "self", ".", "prev_reward", "\n", "self", ".", "prev_reward", "=", "self", ".", "reward", "\n", "if", "self", ".", "tile_visited_count", "==", "len", "(", "self", ".", "track", ")", ":", "\n", "                ", "done", "=", "True", "\n", "", "x", ",", "y", "=", "self", ".", "car", ".", "hull", ".", "position", "\n", "if", "abs", "(", "x", ")", ">", "PLAYFIELD", "or", "abs", "(", "y", ")", ">", "PLAYFIELD", ":", "\n", "                ", "done", "=", "True", "\n", "step_reward", "=", "-", "100", "\n", "\n", "", "", "return", "self", ".", "state", ",", "step_reward", ",", "done", ",", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.box2d.car_racing.CarRacing._render": [[324, 402], ["car_racing.CarRacing.transform.set_scale", "car_racing.CarRacing.transform.set_translation", "car_racing.CarRacing.transform.set_rotation", "car_racing.CarRacing.car.draw", "rendering.Viewer", "pyglet.text.Label", "rendering.Transform", "numpy.linalg.norm", "math.atan2", "win.switch_to", "win.dispatch_events", "win.clear", "pyglet.gl.glViewport", "t.enable", "car_racing.CarRacing._render_road", "t.disable", "car_racing.CarRacing._render_indicators", "pyglet.image.get_buffer_manager().get_color_buffer().get_image_data", "numpy.fromstring", "arr.reshape.reshape.reshape", "win.flip", "win.clear", "pyglet.gl.glViewport", "t.enable", "car_racing.CarRacing._render_road", "t.disable", "car_racing.CarRacing._render_indicators", "win.flip", "car_racing.CarRacing.viewer.close", "max", "min", "geom.render", "geom.render", "pyglet.image.get_buffer_manager().get_color_buffer", "math.cos", "math.sin", "math.sin", "math.cos", "pyglet.image.get_buffer_manager"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.rendering.Transform.set_scale", "home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.rendering.Transform.set_translation", "home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.rendering.Transform.set_rotation", "home.repos.pwc.inspect_result.Rondorf_BOReL.box2d.car_dynamics.Car.draw", "home.repos.pwc.inspect_result.Rondorf_BOReL.data_management.simple_replay_buffer.SimpleReplayBuffer.clear", "home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.rendering.LineWidth.enable", "home.repos.pwc.inspect_result.Rondorf_BOReL.box2d.car_racing.CarRacing._render_road", "home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.rendering.LineStyle.disable", "home.repos.pwc.inspect_result.Rondorf_BOReL.box2d.car_racing.CarRacing._render_indicators", "home.repos.pwc.inspect_result.Rondorf_BOReL.data_management.simple_replay_buffer.SimpleReplayBuffer.clear", "home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.rendering.LineWidth.enable", "home.repos.pwc.inspect_result.Rondorf_BOReL.box2d.car_racing.CarRacing._render_road", "home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.rendering.LineStyle.disable", "home.repos.pwc.inspect_result.Rondorf_BOReL.box2d.car_racing.CarRacing._render_indicators", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.close", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.render", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.render"], ["", "def", "_render", "(", "self", ",", "mode", "=", "'human'", ",", "close", "=", "False", ")", ":", "\n", "        ", "if", "close", ":", "\n", "            ", "if", "self", ".", "viewer", "is", "not", "None", ":", "\n", "                ", "self", ".", "viewer", ".", "close", "(", ")", "\n", "self", ".", "viewer", "=", "None", "\n", "", "return", "\n", "\n", "", "if", "self", ".", "viewer", "is", "None", ":", "\n", "            ", "from", "environments", ".", "mujoco", ".", "rand_param_envs", ".", "gym", ".", "envs", ".", "classic_control", "import", "rendering", "\n", "self", ".", "viewer", "=", "rendering", ".", "Viewer", "(", "WINDOW_W", ",", "WINDOW_H", ")", "\n", "self", ".", "score_label", "=", "pyglet", ".", "text", ".", "Label", "(", "'0000'", ",", "font_size", "=", "36", ",", "\n", "x", "=", "20", ",", "y", "=", "WINDOW_H", "*", "2.5", "/", "40.00", ",", "anchor_x", "=", "'left'", ",", "anchor_y", "=", "'center'", ",", "\n", "color", "=", "(", "255", ",", "255", ",", "255", ",", "255", ")", ")", "\n", "self", ".", "transform", "=", "rendering", ".", "Transform", "(", ")", "\n", "\n", "", "if", "\"t\"", "not", "in", "self", ".", "__dict__", ":", "return", "# reset() not called yet", "\n", "\n", "zoom", "=", "0.1", "*", "SCALE", "*", "max", "(", "1", "-", "self", ".", "t", ",", "0", ")", "+", "ZOOM", "*", "SCALE", "*", "min", "(", "self", ".", "t", ",", "1", ")", "# Animate zoom first second", "\n", "zoom_state", "=", "ZOOM", "*", "SCALE", "*", "STATE_W", "/", "WINDOW_W", "\n", "zoom_video", "=", "ZOOM", "*", "SCALE", "*", "VIDEO_W", "/", "WINDOW_W", "\n", "scroll_x", "=", "self", ".", "car", ".", "hull", ".", "position", "[", "0", "]", "\n", "scroll_y", "=", "self", ".", "car", ".", "hull", ".", "position", "[", "1", "]", "\n", "angle", "=", "-", "self", ".", "car", ".", "hull", ".", "angle", "\n", "vel", "=", "self", ".", "car", ".", "hull", ".", "linearVelocity", "\n", "if", "np", ".", "linalg", ".", "norm", "(", "vel", ")", ">", "0.5", ":", "\n", "            ", "angle", "=", "math", ".", "atan2", "(", "vel", "[", "0", "]", ",", "vel", "[", "1", "]", ")", "\n", "", "self", ".", "transform", ".", "set_scale", "(", "zoom", ",", "zoom", ")", "\n", "self", ".", "transform", ".", "set_translation", "(", "\n", "WINDOW_W", "/", "2", "-", "(", "scroll_x", "*", "zoom", "*", "math", ".", "cos", "(", "angle", ")", "-", "scroll_y", "*", "zoom", "*", "math", ".", "sin", "(", "angle", ")", ")", ",", "\n", "WINDOW_H", "/", "4", "-", "(", "scroll_x", "*", "zoom", "*", "math", ".", "sin", "(", "angle", ")", "+", "scroll_y", "*", "zoom", "*", "math", ".", "cos", "(", "angle", ")", ")", ")", "\n", "self", ".", "transform", ".", "set_rotation", "(", "angle", ")", "\n", "\n", "self", ".", "car", ".", "draw", "(", "self", ".", "viewer", ",", "mode", "!=", "\"state_pixels\"", ")", "\n", "\n", "arr", "=", "None", "\n", "win", "=", "self", ".", "viewer", ".", "window", "\n", "if", "mode", "!=", "'state_pixels'", ":", "\n", "            ", "win", ".", "switch_to", "(", ")", "\n", "win", ".", "dispatch_events", "(", ")", "\n", "", "if", "mode", "==", "\"rgb_array\"", "or", "mode", "==", "\"state_pixels\"", ":", "\n", "            ", "win", ".", "clear", "(", ")", "\n", "t", "=", "self", ".", "transform", "\n", "if", "mode", "==", "'rgb_array'", ":", "\n", "                ", "VP_W", "=", "VIDEO_W", "\n", "VP_H", "=", "VIDEO_H", "\n", "", "else", ":", "\n", "                ", "VP_W", "=", "STATE_W", "\n", "VP_H", "=", "STATE_H", "\n", "", "gl", ".", "glViewport", "(", "0", ",", "0", ",", "VP_W", ",", "VP_H", ")", "\n", "t", ".", "enable", "(", ")", "\n", "self", ".", "_render_road", "(", ")", "\n", "for", "geom", "in", "self", ".", "viewer", ".", "onetime_geoms", ":", "\n", "                ", "geom", ".", "render", "(", ")", "\n", "", "t", ".", "disable", "(", ")", "\n", "self", ".", "_render_indicators", "(", "WINDOW_W", ",", "WINDOW_H", ")", "# TODO: find why 2x needed, wtf", "\n", "image_data", "=", "pyglet", ".", "image", ".", "get_buffer_manager", "(", ")", ".", "get_color_buffer", "(", ")", ".", "get_image_data", "(", ")", "\n", "arr", "=", "np", ".", "fromstring", "(", "image_data", ".", "data", ",", "dtype", "=", "np", ".", "uint8", ",", "sep", "=", "''", ")", "\n", "arr", "=", "arr", ".", "reshape", "(", "VP_H", ",", "VP_W", ",", "4", ")", "\n", "arr", "=", "arr", "[", ":", ":", "-", "1", ",", ":", ",", "0", ":", "3", "]", "\n", "\n", "", "if", "mode", "==", "\"rgb_array\"", "and", "not", "self", ".", "human_render", ":", "# agent can call or not call env.render() itself when recording video.", "\n", "            ", "win", ".", "flip", "(", ")", "\n", "\n", "", "if", "mode", "==", "'human'", ":", "\n", "            ", "self", ".", "human_render", "=", "True", "\n", "win", ".", "clear", "(", ")", "\n", "t", "=", "self", ".", "transform", "\n", "gl", ".", "glViewport", "(", "0", ",", "0", ",", "WINDOW_W", ",", "WINDOW_H", ")", "\n", "t", ".", "enable", "(", ")", "\n", "self", ".", "_render_road", "(", ")", "\n", "for", "geom", "in", "self", ".", "viewer", ".", "onetime_geoms", ":", "\n", "                ", "geom", ".", "render", "(", ")", "\n", "", "t", ".", "disable", "(", ")", "\n", "self", ".", "_render_indicators", "(", "WINDOW_W", ",", "WINDOW_H", ")", "\n", "win", ".", "flip", "(", ")", "\n", "\n", "", "self", ".", "viewer", ".", "onetime_geoms", "=", "[", "]", "\n", "return", "arr", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.box2d.car_racing.CarRacing._render_road": [[403, 423], ["pyglet.gl.glBegin", "pyglet.gl.glColor4f", "pyglet.gl.glVertex3f", "pyglet.gl.glVertex3f", "pyglet.gl.glVertex3f", "pyglet.gl.glVertex3f", "pyglet.gl.glColor4f", "range", "pyglet.gl.glEnd", "range", "pyglet.gl.glColor4f", "pyglet.gl.glVertex3f", "pyglet.gl.glVertex3f", "pyglet.gl.glVertex3f", "pyglet.gl.glVertex3f", "pyglet.gl.glVertex3f"], "methods", ["None"], ["", "def", "_render_road", "(", "self", ")", ":", "\n", "        ", "gl", ".", "glBegin", "(", "gl", ".", "GL_QUADS", ")", "\n", "gl", ".", "glColor4f", "(", "0.4", ",", "0.8", ",", "0.4", ",", "1.0", ")", "\n", "gl", ".", "glVertex3f", "(", "-", "PLAYFIELD", ",", "+", "PLAYFIELD", ",", "0", ")", "\n", "gl", ".", "glVertex3f", "(", "+", "PLAYFIELD", ",", "+", "PLAYFIELD", ",", "0", ")", "\n", "gl", ".", "glVertex3f", "(", "+", "PLAYFIELD", ",", "-", "PLAYFIELD", ",", "0", ")", "\n", "gl", ".", "glVertex3f", "(", "-", "PLAYFIELD", ",", "-", "PLAYFIELD", ",", "0", ")", "\n", "gl", ".", "glColor4f", "(", "0.4", ",", "0.9", ",", "0.4", ",", "1.0", ")", "\n", "k", "=", "PLAYFIELD", "/", "20.0", "\n", "for", "x", "in", "range", "(", "-", "20", ",", "20", ",", "2", ")", ":", "\n", "            ", "for", "y", "in", "range", "(", "-", "20", ",", "20", ",", "2", ")", ":", "\n", "                ", "gl", ".", "glVertex3f", "(", "k", "*", "x", "+", "k", ",", "k", "*", "y", "+", "0", ",", "0", ")", "\n", "gl", ".", "glVertex3f", "(", "k", "*", "x", "+", "0", ",", "k", "*", "y", "+", "0", ",", "0", ")", "\n", "gl", ".", "glVertex3f", "(", "k", "*", "x", "+", "0", ",", "k", "*", "y", "+", "k", ",", "0", ")", "\n", "gl", ".", "glVertex3f", "(", "k", "*", "x", "+", "k", ",", "k", "*", "y", "+", "k", ",", "0", ")", "\n", "", "", "for", "poly", ",", "color", "in", "self", ".", "road_poly", ":", "\n", "            ", "gl", ".", "glColor4f", "(", "color", "[", "0", "]", ",", "color", "[", "1", "]", ",", "color", "[", "2", "]", ",", "1", ")", "\n", "for", "p", "in", "poly", ":", "\n", "                ", "gl", ".", "glVertex3f", "(", "p", "[", "0", "]", ",", "p", "[", "1", "]", ",", "0", ")", "\n", "", "", "gl", ".", "glEnd", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.box2d.car_racing.CarRacing._render_indicators": [[424, 456], ["pyglet.gl.glBegin", "pyglet.gl.glColor4f", "pyglet.gl.glVertex3f", "pyglet.gl.glVertex3f", "pyglet.gl.glVertex3f", "pyglet.gl.glVertex3f", "numpy.sqrt", "car_racing.CarRacing._render_indicators.vertical_ind"], "methods", ["None"], ["", "def", "_render_indicators", "(", "self", ",", "W", ",", "H", ")", ":", "\n", "        ", "gl", ".", "glBegin", "(", "gl", ".", "GL_QUADS", ")", "\n", "s", "=", "W", "/", "40.0", "\n", "h", "=", "H", "/", "40.0", "\n", "gl", ".", "glColor4f", "(", "0", ",", "0", ",", "0", ",", "1", ")", "\n", "gl", ".", "glVertex3f", "(", "W", ",", "0", ",", "0", ")", "\n", "gl", ".", "glVertex3f", "(", "W", ",", "5", "*", "h", ",", "0", ")", "\n", "gl", ".", "glVertex3f", "(", "0", ",", "5", "*", "h", ",", "0", ")", "\n", "gl", ".", "glVertex3f", "(", "0", ",", "0", ",", "0", ")", "\n", "def", "vertical_ind", "(", "place", ",", "val", ",", "color", ")", ":", "\n", "            ", "gl", ".", "glColor4f", "(", "color", "[", "0", "]", ",", "color", "[", "1", "]", ",", "color", "[", "2", "]", ",", "1", ")", "\n", "gl", ".", "glVertex3f", "(", "(", "place", "+", "0", ")", "*", "s", ",", "h", "+", "h", "*", "val", ",", "0", ")", "\n", "gl", ".", "glVertex3f", "(", "(", "place", "+", "1", ")", "*", "s", ",", "h", "+", "h", "*", "val", ",", "0", ")", "\n", "gl", ".", "glVertex3f", "(", "(", "place", "+", "1", ")", "*", "s", ",", "h", ",", "0", ")", "\n", "gl", ".", "glVertex3f", "(", "(", "place", "+", "0", ")", "*", "s", ",", "h", ",", "0", ")", "\n", "", "def", "horiz_ind", "(", "place", ",", "val", ",", "color", ")", ":", "\n", "            ", "gl", ".", "glColor4f", "(", "color", "[", "0", "]", ",", "color", "[", "1", "]", ",", "color", "[", "2", "]", ",", "1", ")", "\n", "gl", ".", "glVertex3f", "(", "(", "place", "+", "0", ")", "*", "s", ",", "4", "*", "h", ",", "0", ")", "\n", "gl", ".", "glVertex3f", "(", "(", "place", "+", "val", ")", "*", "s", ",", "4", "*", "h", ",", "0", ")", "\n", "gl", ".", "glVertex3f", "(", "(", "place", "+", "val", ")", "*", "s", ",", "2", "*", "h", ",", "0", ")", "\n", "gl", ".", "glVertex3f", "(", "(", "place", "+", "0", ")", "*", "s", ",", "2", "*", "h", ",", "0", ")", "\n", "", "true_speed", "=", "np", ".", "sqrt", "(", "np", ".", "square", "(", "self", ".", "car", ".", "hull", ".", "linearVelocity", "[", "0", "]", ")", "+", "np", ".", "square", "(", "self", ".", "car", ".", "hull", ".", "linearVelocity", "[", "1", "]", ")", ")", "\n", "vertical_ind", "(", "5", ",", "0.02", "*", "true_speed", ",", "(", "1", ",", "1", ",", "1", ")", ")", "\n", "vertical_ind", "(", "7", ",", "0.01", "*", "self", ".", "car", ".", "wheels", "[", "0", "]", ".", "omega", ",", "(", "0.0", ",", "0", ",", "1", ")", ")", "# ABS sensors", "\n", "vertical_ind", "(", "8", ",", "0.01", "*", "self", ".", "car", ".", "wheels", "[", "1", "]", ".", "omega", ",", "(", "0.0", ",", "0", ",", "1", ")", ")", "\n", "vertical_ind", "(", "9", ",", "0.01", "*", "self", ".", "car", ".", "wheels", "[", "2", "]", ".", "omega", ",", "(", "0.2", ",", "0", ",", "1", ")", ")", "\n", "vertical_ind", "(", "10", ",", "0.01", "*", "self", ".", "car", ".", "wheels", "[", "3", "]", ".", "omega", ",", "(", "0.2", ",", "0", ",", "1", ")", ")", "\n", "horiz_ind", "(", "20", ",", "-", "10.0", "*", "self", ".", "car", ".", "wheels", "[", "0", "]", ".", "joint", ".", "angle", ",", "(", "0", ",", "1", ",", "0", ")", ")", "\n", "horiz_ind", "(", "30", ",", "-", "0.8", "*", "self", ".", "car", ".", "hull", ".", "angularVelocity", ",", "(", "1", ",", "0", ",", "0", ")", ")", "\n", "gl", ".", "glEnd", "(", ")", "\n", "self", ".", "score_label", ".", "text", "=", "\"%04i\"", "%", "self", ".", "reward", "\n", "self", ".", "score_label", ".", "draw", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.box2d.bipedal_walker.ContactDetector.__init__": [[67, 70], ["Box2D.b2.contactListener.__init__"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.__init__"], ["    ", "def", "__init__", "(", "self", ",", "env", ")", ":", "\n", "        ", "contactListener", ".", "__init__", "(", "self", ")", "\n", "self", ".", "env", "=", "env", "\n", "", "def", "BeginContact", "(", "self", ",", "contact", ")", ":", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.box2d.bipedal_walker.ContactDetector.BeginContact": [[70, 76], ["None"], "methods", ["None"], ["", "def", "BeginContact", "(", "self", ",", "contact", ")", ":", "\n", "        ", "if", "self", ".", "env", ".", "hull", "==", "contact", ".", "fixtureA", ".", "body", "or", "self", ".", "env", ".", "hull", "==", "contact", ".", "fixtureB", ".", "body", ":", "\n", "            ", "self", ".", "env", ".", "game_over", "=", "True", "\n", "", "for", "leg", "in", "[", "self", ".", "env", ".", "legs", "[", "1", "]", ",", "self", ".", "env", ".", "legs", "[", "3", "]", "]", ":", "\n", "            ", "if", "leg", "in", "[", "contact", ".", "fixtureA", ".", "body", ",", "contact", ".", "fixtureB", ".", "body", "]", ":", "\n", "                ", "leg", ".", "ground_contact", "=", "True", "\n", "", "", "", "def", "EndContact", "(", "self", ",", "contact", ")", ":", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.box2d.bipedal_walker.ContactDetector.EndContact": [[76, 80], ["None"], "methods", ["None"], ["", "", "", "def", "EndContact", "(", "self", ",", "contact", ")", ":", "\n", "        ", "for", "leg", "in", "[", "self", ".", "env", ".", "legs", "[", "1", "]", ",", "self", ".", "env", ".", "legs", "[", "3", "]", "]", ":", "\n", "            ", "if", "leg", "in", "[", "contact", ".", "fixtureA", ".", "body", ",", "contact", ".", "fixtureB", ".", "body", "]", ":", "\n", "                ", "leg", ".", "ground_contact", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.box2d.bipedal_walker.BipedalWalker.__init__": [[89, 103], ["bipedal_walker.BipedalWalker._seed", "Box2D.b2World", "bipedal_walker.BipedalWalker._reset", "numpy.array", "environments.mujoco.rand_param_envs.gym.spaces.Box", "environments.mujoco.rand_param_envs.gym.spaces.Box", "numpy.array", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.algorithmic.algorithmic_env.AlgorithmicEnv._seed", "home.repos.pwc.inspect_result.Rondorf_BOReL.wrappers.monitoring.Monitor._reset"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "_seed", "(", ")", "\n", "self", ".", "viewer", "=", "None", "\n", "\n", "self", ".", "world", "=", "Box2D", ".", "b2World", "(", ")", "\n", "self", ".", "terrain", "=", "None", "\n", "self", ".", "hull", "=", "None", "\n", "\n", "self", ".", "prev_shaping", "=", "None", "\n", "self", ".", "_reset", "(", ")", "\n", "\n", "high", "=", "np", ".", "array", "(", "[", "np", ".", "inf", "]", "*", "24", ")", "\n", "self", ".", "action_space", "=", "spaces", ".", "Box", "(", "np", ".", "array", "(", "[", "-", "1", ",", "-", "1", ",", "-", "1", ",", "-", "1", "]", ")", ",", "np", ".", "array", "(", "[", "+", "1", ",", "+", "1", ",", "+", "1", ",", "+", "1", "]", ")", ")", "\n", "self", ".", "observation_space", "=", "spaces", ".", "Box", "(", "-", "high", ",", "high", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.box2d.bipedal_walker.BipedalWalker._seed": [[104, 107], ["environments.mujoco.rand_param_envs.gym.utils.seeding.np_random"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.utils.seeding.np_random"], ["", "def", "_seed", "(", "self", ",", "seed", "=", "None", ")", ":", "\n", "        ", "self", ".", "np_random", ",", "seed", "=", "seeding", ".", "np_random", "(", "seed", ")", "\n", "return", "[", "seed", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.box2d.bipedal_walker.BipedalWalker._destroy": [[108, 120], ["bipedal_walker.BipedalWalker.world.DestroyBody", "bipedal_walker.BipedalWalker.world.DestroyBody", "bipedal_walker.BipedalWalker.world.DestroyBody"], "methods", ["None"], ["", "def", "_destroy", "(", "self", ")", ":", "\n", "        ", "if", "not", "self", ".", "terrain", ":", "return", "\n", "self", ".", "world", ".", "contactListener", "=", "None", "\n", "for", "t", "in", "self", ".", "terrain", ":", "\n", "            ", "self", ".", "world", ".", "DestroyBody", "(", "t", ")", "\n", "", "self", ".", "terrain", "=", "[", "]", "\n", "self", ".", "world", ".", "DestroyBody", "(", "self", ".", "hull", ")", "\n", "self", ".", "hull", "=", "None", "\n", "for", "leg", "in", "self", ".", "legs", ":", "\n", "            ", "self", ".", "world", ".", "DestroyBody", "(", "leg", ")", "\n", "", "self", ".", "legs", "=", "[", "]", "\n", "self", ".", "joints", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.box2d.bipedal_walker.BipedalWalker._generate_terrain": [[121, 244], ["range", "range", "range", "bipedal_walker.BipedalWalker.terrain.reverse", "bipedal_walker.BipedalWalker.terrain_x.append", "bipedal_walker.BipedalWalker.terrain_y.append", "bipedal_walker.BipedalWalker.world.CreateStaticBody", "bipedal_walker.BipedalWalker.terrain.append", "bipedal_walker.BipedalWalker.terrain_poly.append", "bipedal_walker.BipedalWalker.np_random.randint", "bipedal_walker.BipedalWalker.np_random.randint", "bipedal_walker.BipedalWalker.world.CreateStaticBody", "bipedal_walker.BipedalWalker.terrain.append", "bipedal_walker.BipedalWalker.world.CreateStaticBody", "bipedal_walker.BipedalWalker.terrain.append", "bipedal_walker.BipedalWalker.np_random.randint", "Box2D.b2.fixtureDef", "numpy.sign", "bipedal_walker.BipedalWalker.np_random.uniform", "Box2D.b2.fixtureDef", "Box2D.b2.fixtureDef", "bipedal_walker.BipedalWalker.np_random.randint", "bipedal_walker.BipedalWalker.world.CreateStaticBody", "bipedal_walker.BipedalWalker.terrain.append", "Box2D.b2.edgeShape", "bipedal_walker.BipedalWalker.np_random.randint", "bipedal_walker.BipedalWalker.np_random.randint", "range", "Box2D.b2.polygonShape", "Box2D.b2.polygonShape", "Box2D.b2.fixtureDef", "bipedal_walker.BipedalWalker.world.CreateStaticBody", "bipedal_walker.BipedalWalker.terrain.append", "bipedal_walker.BipedalWalker.np_random.rand", "Box2D.b2.polygonShape", "Box2D.b2.fixtureDef", "Box2D.b2.polygonShape"], "methods", ["None"], ["", "def", "_generate_terrain", "(", "self", ",", "hardcore", ")", ":", "\n", "        ", "GRASS", ",", "STUMP", ",", "STAIRS", ",", "PIT", ",", "_STATES_", "=", "range", "(", "5", ")", "\n", "state", "=", "GRASS", "\n", "velocity", "=", "0.0", "\n", "y", "=", "TERRAIN_HEIGHT", "\n", "counter", "=", "TERRAIN_STARTPAD", "\n", "oneshot", "=", "False", "\n", "self", ".", "terrain", "=", "[", "]", "\n", "self", ".", "terrain_x", "=", "[", "]", "\n", "self", ".", "terrain_y", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "TERRAIN_LENGTH", ")", ":", "\n", "            ", "x", "=", "i", "*", "TERRAIN_STEP", "\n", "self", ".", "terrain_x", ".", "append", "(", "x", ")", "\n", "\n", "if", "state", "==", "GRASS", "and", "not", "oneshot", ":", "\n", "                ", "velocity", "=", "0.8", "*", "velocity", "+", "0.01", "*", "np", ".", "sign", "(", "TERRAIN_HEIGHT", "-", "y", ")", "\n", "if", "i", ">", "TERRAIN_STARTPAD", ":", "velocity", "+=", "self", ".", "np_random", ".", "uniform", "(", "-", "1", ",", "1", ")", "/", "SCALE", "#1", "\n", "y", "+=", "velocity", "\n", "\n", "", "elif", "state", "==", "PIT", "and", "oneshot", ":", "\n", "                ", "counter", "=", "self", ".", "np_random", ".", "randint", "(", "3", ",", "5", ")", "\n", "poly", "=", "[", "\n", "(", "x", ",", "y", ")", ",", "\n", "(", "x", "+", "TERRAIN_STEP", ",", "y", ")", ",", "\n", "(", "x", "+", "TERRAIN_STEP", ",", "y", "-", "4", "*", "TERRAIN_STEP", ")", ",", "\n", "(", "x", ",", "y", "-", "4", "*", "TERRAIN_STEP", ")", ",", "\n", "]", "\n", "t", "=", "self", ".", "world", ".", "CreateStaticBody", "(", "\n", "fixtures", "=", "fixtureDef", "(", "\n", "shape", "=", "polygonShape", "(", "vertices", "=", "poly", ")", ",", "\n", "friction", "=", "FRICTION", "\n", ")", ")", "\n", "t", ".", "color1", ",", "t", ".", "color2", "=", "(", "1", ",", "1", ",", "1", ")", ",", "(", "0.6", ",", "0.6", ",", "0.6", ")", "\n", "self", ".", "terrain", ".", "append", "(", "t", ")", "\n", "t", "=", "self", ".", "world", ".", "CreateStaticBody", "(", "\n", "fixtures", "=", "fixtureDef", "(", "\n", "shape", "=", "polygonShape", "(", "vertices", "=", "[", "(", "p", "[", "0", "]", "+", "TERRAIN_STEP", "*", "counter", ",", "p", "[", "1", "]", ")", "for", "p", "in", "poly", "]", ")", ",", "\n", "friction", "=", "FRICTION", "\n", ")", ")", "\n", "t", ".", "color1", ",", "t", ".", "color2", "=", "(", "1", ",", "1", ",", "1", ")", ",", "(", "0.6", ",", "0.6", ",", "0.6", ")", "\n", "self", ".", "terrain", ".", "append", "(", "t", ")", "\n", "counter", "+=", "2", "\n", "original_y", "=", "y", "\n", "\n", "", "elif", "state", "==", "PIT", "and", "not", "oneshot", ":", "\n", "                ", "y", "=", "original_y", "\n", "if", "counter", ">", "1", ":", "\n", "                    ", "y", "-=", "4", "*", "TERRAIN_STEP", "\n", "\n", "", "", "elif", "state", "==", "STUMP", "and", "oneshot", ":", "\n", "                ", "counter", "=", "self", ".", "np_random", ".", "randint", "(", "1", ",", "3", ")", "\n", "poly", "=", "[", "\n", "(", "x", ",", "y", ")", ",", "\n", "(", "x", "+", "counter", "*", "TERRAIN_STEP", ",", "y", ")", ",", "\n", "(", "x", "+", "counter", "*", "TERRAIN_STEP", ",", "y", "+", "counter", "*", "TERRAIN_STEP", ")", ",", "\n", "(", "x", ",", "y", "+", "counter", "*", "TERRAIN_STEP", ")", ",", "\n", "]", "\n", "t", "=", "self", ".", "world", ".", "CreateStaticBody", "(", "\n", "fixtures", "=", "fixtureDef", "(", "\n", "shape", "=", "polygonShape", "(", "vertices", "=", "poly", ")", ",", "\n", "friction", "=", "FRICTION", "\n", ")", ")", "\n", "t", ".", "color1", ",", "t", ".", "color2", "=", "(", "1", ",", "1", ",", "1", ")", ",", "(", "0.6", ",", "0.6", ",", "0.6", ")", "\n", "self", ".", "terrain", ".", "append", "(", "t", ")", "\n", "\n", "", "elif", "state", "==", "STAIRS", "and", "oneshot", ":", "\n", "                ", "stair_height", "=", "+", "1", "if", "self", ".", "np_random", ".", "rand", "(", ")", ">", "0.5", "else", "-", "1", "\n", "stair_width", "=", "self", ".", "np_random", ".", "randint", "(", "4", ",", "5", ")", "\n", "stair_steps", "=", "self", ".", "np_random", ".", "randint", "(", "3", ",", "5", ")", "\n", "original_y", "=", "y", "\n", "for", "s", "in", "range", "(", "stair_steps", ")", ":", "\n", "                    ", "poly", "=", "[", "\n", "(", "x", "+", "(", "s", "*", "stair_width", ")", "*", "TERRAIN_STEP", ",", "y", "+", "(", "s", "*", "stair_height", ")", "*", "TERRAIN_STEP", ")", ",", "\n", "(", "x", "+", "(", "(", "1", "+", "s", ")", "*", "stair_width", ")", "*", "TERRAIN_STEP", ",", "y", "+", "(", "s", "*", "stair_height", ")", "*", "TERRAIN_STEP", ")", ",", "\n", "(", "x", "+", "(", "(", "1", "+", "s", ")", "*", "stair_width", ")", "*", "TERRAIN_STEP", ",", "y", "+", "(", "-", "1", "+", "s", "*", "stair_height", ")", "*", "TERRAIN_STEP", ")", ",", "\n", "(", "x", "+", "(", "s", "*", "stair_width", ")", "*", "TERRAIN_STEP", ",", "y", "+", "(", "-", "1", "+", "s", "*", "stair_height", ")", "*", "TERRAIN_STEP", ")", ",", "\n", "]", "\n", "t", "=", "self", ".", "world", ".", "CreateStaticBody", "(", "\n", "fixtures", "=", "fixtureDef", "(", "\n", "shape", "=", "polygonShape", "(", "vertices", "=", "poly", ")", ",", "\n", "friction", "=", "FRICTION", "\n", ")", ")", "\n", "t", ".", "color1", ",", "t", ".", "color2", "=", "(", "1", ",", "1", ",", "1", ")", ",", "(", "0.6", ",", "0.6", ",", "0.6", ")", "\n", "self", ".", "terrain", ".", "append", "(", "t", ")", "\n", "", "counter", "=", "stair_steps", "*", "stair_width", "\n", "\n", "", "elif", "state", "==", "STAIRS", "and", "not", "oneshot", ":", "\n", "                ", "s", "=", "stair_steps", "*", "stair_width", "-", "counter", "-", "stair_height", "\n", "n", "=", "s", "/", "stair_width", "\n", "y", "=", "original_y", "+", "(", "n", "*", "stair_height", ")", "*", "TERRAIN_STEP", "\n", "\n", "", "oneshot", "=", "False", "\n", "self", ".", "terrain_y", ".", "append", "(", "y", ")", "\n", "counter", "-=", "1", "\n", "if", "counter", "==", "0", ":", "\n", "                ", "counter", "=", "self", ".", "np_random", ".", "randint", "(", "TERRAIN_GRASS", "/", "2", ",", "TERRAIN_GRASS", ")", "\n", "if", "state", "==", "GRASS", "and", "hardcore", ":", "\n", "                    ", "state", "=", "self", ".", "np_random", ".", "randint", "(", "1", ",", "_STATES_", ")", "\n", "oneshot", "=", "True", "\n", "", "else", ":", "\n", "                    ", "state", "=", "GRASS", "\n", "oneshot", "=", "True", "\n", "\n", "", "", "", "self", ".", "terrain_poly", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "TERRAIN_LENGTH", "-", "1", ")", ":", "\n", "            ", "poly", "=", "[", "\n", "(", "self", ".", "terrain_x", "[", "i", "]", ",", "self", ".", "terrain_y", "[", "i", "]", ")", ",", "\n", "(", "self", ".", "terrain_x", "[", "i", "+", "1", "]", ",", "self", ".", "terrain_y", "[", "i", "+", "1", "]", ")", "\n", "]", "\n", "t", "=", "self", ".", "world", ".", "CreateStaticBody", "(", "\n", "fixtures", "=", "fixtureDef", "(", "\n", "shape", "=", "edgeShape", "(", "vertices", "=", "poly", ")", ",", "\n", "friction", "=", "FRICTION", ",", "\n", "categoryBits", "=", "0x0001", ",", "\n", ")", ")", "\n", "color", "=", "(", "0.3", ",", "1.0", "if", "i", "%", "2", "==", "0", "else", "0.8", ",", "0.3", ")", "\n", "t", ".", "color1", "=", "color", "\n", "t", ".", "color2", "=", "color", "\n", "self", ".", "terrain", ".", "append", "(", "t", ")", "\n", "color", "=", "(", "0.4", ",", "0.6", ",", "0.3", ")", "\n", "poly", "+=", "[", "(", "poly", "[", "1", "]", "[", "0", "]", ",", "0", ")", ",", "(", "poly", "[", "0", "]", "[", "0", "]", ",", "0", ")", "]", "\n", "self", ".", "terrain_poly", ".", "append", "(", "(", "poly", ",", "color", ")", ")", "\n", "", "self", ".", "terrain", ".", "reverse", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.box2d.bipedal_walker.BipedalWalker._generate_clouds": [[245, 258], ["range", "min", "max", "bipedal_walker.BipedalWalker.cloud_poly.append", "bipedal_walker.BipedalWalker.np_random.uniform", "range", "bipedal_walker.BipedalWalker.np_random.uniform", "bipedal_walker.BipedalWalker.np_random.uniform", "math.sin", "math.cos"], "methods", ["None"], ["", "def", "_generate_clouds", "(", "self", ")", ":", "\n", "# Sorry for the clouds, couldn't resist", "\n", "        ", "self", ".", "cloud_poly", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "TERRAIN_LENGTH", "//", "20", ")", ":", "\n", "            ", "x", "=", "self", ".", "np_random", ".", "uniform", "(", "0", ",", "TERRAIN_LENGTH", ")", "*", "TERRAIN_STEP", "\n", "y", "=", "VIEWPORT_H", "/", "SCALE", "*", "3", "/", "4", "\n", "poly", "=", "[", "\n", "(", "x", "+", "15", "*", "TERRAIN_STEP", "*", "math", ".", "sin", "(", "3.14", "*", "2", "*", "a", "/", "5", ")", "+", "self", ".", "np_random", ".", "uniform", "(", "0", ",", "5", "*", "TERRAIN_STEP", ")", ",", "\n", "y", "+", "5", "*", "TERRAIN_STEP", "*", "math", ".", "cos", "(", "3.14", "*", "2", "*", "a", "/", "5", ")", "+", "self", ".", "np_random", ".", "uniform", "(", "0", ",", "5", "*", "TERRAIN_STEP", ")", ")", "\n", "for", "a", "in", "range", "(", "5", ")", "]", "\n", "x1", "=", "min", "(", "[", "p", "[", "0", "]", "for", "p", "in", "poly", "]", ")", "\n", "x2", "=", "max", "(", "[", "p", "[", "0", "]", "for", "p", "in", "poly", "]", ")", "\n", "self", ".", "cloud_poly", ".", "append", "(", "(", "poly", ",", "x1", ",", "x2", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.box2d.bipedal_walker.BipedalWalker._reset": [[259, 360], ["bipedal_walker.BipedalWalker._destroy", "bipedal_walker.ContactDetector", "bipedal_walker.BipedalWalker._generate_terrain", "bipedal_walker.BipedalWalker._generate_clouds", "bipedal_walker.BipedalWalker.world.CreateDynamicBody", "bipedal_walker.BipedalWalker.hull.ApplyForceToCenter", "bipedal_walker.BipedalWalker.world.CreateDynamicBody", "Box2D.b2.revoluteJointDef", "bipedal_walker.BipedalWalker.legs.append", "bipedal_walker.BipedalWalker.joints.append", "bipedal_walker.BipedalWalker.world.CreateDynamicBody", "Box2D.b2.revoluteJointDef", "bipedal_walker.BipedalWalker.legs.append", "bipedal_walker.BipedalWalker.joints.append", "LidarCallback", "bipedal_walker.BipedalWalker._step", "Box2D.b2.fixtureDef", "bipedal_walker.BipedalWalker.np_random.uniform", "bipedal_walker.BipedalWalker.world.CreateJoint", "bipedal_walker.BipedalWalker.world.CreateJoint", "range", "numpy.array", "Box2D.b2.fixtureDef", "Box2D.b2.fixtureDef", "Box2D.b2.polygonShape", "Box2D.b2.polygonShape", "Box2D.b2.polygonShape"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.box2d.bipedal_walker.BipedalWalker._destroy", "home.repos.pwc.inspect_result.Rondorf_BOReL.box2d.bipedal_walker.BipedalWalker._generate_terrain", "home.repos.pwc.inspect_result.Rondorf_BOReL.box2d.bipedal_walker.BipedalWalker._generate_clouds", "home.repos.pwc.inspect_result.Rondorf_BOReL.wrappers.monitoring.Monitor._step"], ["", "", "def", "_reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "_destroy", "(", ")", "\n", "self", ".", "world", ".", "contactListener_bug_workaround", "=", "ContactDetector", "(", "self", ")", "\n", "self", ".", "world", ".", "contactListener", "=", "self", ".", "world", ".", "contactListener_bug_workaround", "\n", "self", ".", "game_over", "=", "False", "\n", "self", ".", "prev_shaping", "=", "None", "\n", "self", ".", "scroll", "=", "0.0", "\n", "self", ".", "lidar_render", "=", "0", "\n", "\n", "W", "=", "VIEWPORT_W", "/", "SCALE", "\n", "H", "=", "VIEWPORT_H", "/", "SCALE", "\n", "\n", "self", ".", "_generate_terrain", "(", "self", ".", "hardcore", ")", "\n", "self", ".", "_generate_clouds", "(", ")", "\n", "\n", "init_x", "=", "TERRAIN_STEP", "*", "TERRAIN_STARTPAD", "/", "2", "\n", "init_y", "=", "TERRAIN_HEIGHT", "+", "2", "*", "LEG_H", "\n", "self", ".", "hull", "=", "self", ".", "world", ".", "CreateDynamicBody", "(", "\n", "position", "=", "(", "init_x", ",", "init_y", ")", ",", "\n", "fixtures", "=", "fixtureDef", "(", "\n", "shape", "=", "polygonShape", "(", "vertices", "=", "[", "(", "x", "/", "SCALE", ",", "y", "/", "SCALE", ")", "for", "x", ",", "y", "in", "HULL_POLY", "]", ")", ",", "\n", "density", "=", "5.0", ",", "\n", "friction", "=", "0.1", ",", "\n", "categoryBits", "=", "0x0020", ",", "\n", "maskBits", "=", "0x001", ",", "# collide only with ground", "\n", "restitution", "=", "0.0", ")", "# 0.99 bouncy", "\n", ")", "\n", "self", ".", "hull", ".", "color1", "=", "(", "0.5", ",", "0.4", ",", "0.9", ")", "\n", "self", ".", "hull", ".", "color2", "=", "(", "0.3", ",", "0.3", ",", "0.5", ")", "\n", "self", ".", "hull", ".", "ApplyForceToCenter", "(", "(", "self", ".", "np_random", ".", "uniform", "(", "-", "INITIAL_RANDOM", ",", "INITIAL_RANDOM", ")", ",", "0", ")", ",", "True", ")", "\n", "\n", "self", ".", "legs", "=", "[", "]", "\n", "self", ".", "joints", "=", "[", "]", "\n", "for", "i", "in", "[", "-", "1", ",", "+", "1", "]", ":", "\n", "            ", "leg", "=", "self", ".", "world", ".", "CreateDynamicBody", "(", "\n", "position", "=", "(", "init_x", ",", "init_y", "-", "LEG_H", "/", "2", "-", "LEG_DOWN", ")", ",", "\n", "angle", "=", "(", "i", "*", "0.05", ")", ",", "\n", "fixtures", "=", "fixtureDef", "(", "\n", "shape", "=", "polygonShape", "(", "box", "=", "(", "LEG_W", "/", "2", ",", "LEG_H", "/", "2", ")", ")", ",", "\n", "density", "=", "1.0", ",", "\n", "restitution", "=", "0.0", ",", "\n", "categoryBits", "=", "0x0020", ",", "\n", "maskBits", "=", "0x001", ")", "\n", ")", "\n", "leg", ".", "color1", "=", "(", "0.6", "-", "i", "/", "10.", ",", "0.3", "-", "i", "/", "10.", ",", "0.5", "-", "i", "/", "10.", ")", "\n", "leg", ".", "color2", "=", "(", "0.4", "-", "i", "/", "10.", ",", "0.2", "-", "i", "/", "10.", ",", "0.3", "-", "i", "/", "10.", ")", "\n", "rjd", "=", "revoluteJointDef", "(", "\n", "bodyA", "=", "self", ".", "hull", ",", "\n", "bodyB", "=", "leg", ",", "\n", "localAnchorA", "=", "(", "0", ",", "LEG_DOWN", ")", ",", "\n", "localAnchorB", "=", "(", "0", ",", "LEG_H", "/", "2", ")", ",", "\n", "enableMotor", "=", "True", ",", "\n", "enableLimit", "=", "True", ",", "\n", "maxMotorTorque", "=", "MOTORS_TORQUE", ",", "\n", "motorSpeed", "=", "i", ",", "\n", "lowerAngle", "=", "-", "0.8", ",", "\n", "upperAngle", "=", "1.1", ",", "\n", ")", "\n", "self", ".", "legs", ".", "append", "(", "leg", ")", "\n", "self", ".", "joints", ".", "append", "(", "self", ".", "world", ".", "CreateJoint", "(", "rjd", ")", ")", "\n", "\n", "lower", "=", "self", ".", "world", ".", "CreateDynamicBody", "(", "\n", "position", "=", "(", "init_x", ",", "init_y", "-", "LEG_H", "*", "3", "/", "2", "-", "LEG_DOWN", ")", ",", "\n", "angle", "=", "(", "i", "*", "0.05", ")", ",", "\n", "fixtures", "=", "fixtureDef", "(", "\n", "shape", "=", "polygonShape", "(", "box", "=", "(", "0.8", "*", "LEG_W", "/", "2", ",", "LEG_H", "/", "2", ")", ")", ",", "\n", "density", "=", "1.0", ",", "\n", "restitution", "=", "0.0", ",", "\n", "categoryBits", "=", "0x0020", ",", "\n", "maskBits", "=", "0x001", ")", "\n", ")", "\n", "lower", ".", "color1", "=", "(", "0.6", "-", "i", "/", "10.", ",", "0.3", "-", "i", "/", "10.", ",", "0.5", "-", "i", "/", "10.", ")", "\n", "lower", ".", "color2", "=", "(", "0.4", "-", "i", "/", "10.", ",", "0.2", "-", "i", "/", "10.", ",", "0.3", "-", "i", "/", "10.", ")", "\n", "rjd", "=", "revoluteJointDef", "(", "\n", "bodyA", "=", "leg", ",", "\n", "bodyB", "=", "lower", ",", "\n", "localAnchorA", "=", "(", "0", ",", "-", "LEG_H", "/", "2", ")", ",", "\n", "localAnchorB", "=", "(", "0", ",", "LEG_H", "/", "2", ")", ",", "\n", "enableMotor", "=", "True", ",", "\n", "enableLimit", "=", "True", ",", "\n", "maxMotorTorque", "=", "MOTORS_TORQUE", ",", "\n", "motorSpeed", "=", "1", ",", "\n", "lowerAngle", "=", "-", "1.6", ",", "\n", "upperAngle", "=", "-", "0.1", ",", "\n", ")", "\n", "lower", ".", "ground_contact", "=", "False", "\n", "self", ".", "legs", ".", "append", "(", "lower", ")", "\n", "self", ".", "joints", ".", "append", "(", "self", ".", "world", ".", "CreateJoint", "(", "rjd", ")", ")", "\n", "\n", "", "self", ".", "drawlist", "=", "self", ".", "terrain", "+", "self", ".", "legs", "+", "[", "self", ".", "hull", "]", "\n", "\n", "class", "LidarCallback", "(", "Box2D", ".", "b2", ".", "rayCastCallback", ")", ":", "\n", "            ", "def", "ReportFixture", "(", "self", ",", "fixture", ",", "point", ",", "normal", ",", "fraction", ")", ":", "\n", "                ", "if", "(", "fixture", ".", "filterData", ".", "categoryBits", "&", "1", ")", "==", "0", ":", "\n", "                    ", "return", "1", "\n", "", "self", ".", "p2", "=", "point", "\n", "self", ".", "fraction", "=", "fraction", "\n", "return", "0", "\n", "", "", "self", ".", "lidar", "=", "[", "LidarCallback", "(", ")", "for", "_", "in", "range", "(", "10", ")", "]", "\n", "\n", "return", "self", ".", "_step", "(", "np", ".", "array", "(", "[", "0", ",", "0", ",", "0", ",", "0", "]", ")", ")", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.box2d.bipedal_walker.BipedalWalker._step": [[361, 432], ["bipedal_walker.BipedalWalker.world.Step", "range", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "bipedal_walker.BipedalWalker.world.RayCast", "len", "abs", "numpy.array", "numpy.clip", "numpy.clip", "numpy.clip", "numpy.clip", "numpy.clip", "numpy.sign", "numpy.clip", "numpy.sign", "numpy.clip", "numpy.sign", "numpy.clip", "numpy.sign", "numpy.clip", "numpy.abs", "numpy.abs", "numpy.abs", "numpy.abs", "numpy.abs", "math.sin", "math.cos"], "methods", ["None"], ["", "def", "_step", "(", "self", ",", "action", ")", ":", "\n", "#self.hull.ApplyForceToCenter((0, 20), True) -- Uncomment this to receive a bit of stability help", "\n", "        ", "control_speed", "=", "False", "# Should be easier as well", "\n", "if", "control_speed", ":", "\n", "            ", "self", ".", "joints", "[", "0", "]", ".", "motorSpeed", "=", "float", "(", "SPEED_HIP", "*", "np", ".", "clip", "(", "action", "[", "0", "]", ",", "-", "1", ",", "1", ")", ")", "\n", "self", ".", "joints", "[", "1", "]", ".", "motorSpeed", "=", "float", "(", "SPEED_KNEE", "*", "np", ".", "clip", "(", "action", "[", "1", "]", ",", "-", "1", ",", "1", ")", ")", "\n", "self", ".", "joints", "[", "2", "]", ".", "motorSpeed", "=", "float", "(", "SPEED_HIP", "*", "np", ".", "clip", "(", "action", "[", "2", "]", ",", "-", "1", ",", "1", ")", ")", "\n", "self", ".", "joints", "[", "3", "]", ".", "motorSpeed", "=", "float", "(", "SPEED_KNEE", "*", "np", ".", "clip", "(", "action", "[", "3", "]", ",", "-", "1", ",", "1", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "joints", "[", "0", "]", ".", "motorSpeed", "=", "float", "(", "SPEED_HIP", "*", "np", ".", "sign", "(", "action", "[", "0", "]", ")", ")", "\n", "self", ".", "joints", "[", "0", "]", ".", "maxMotorTorque", "=", "float", "(", "MOTORS_TORQUE", "*", "np", ".", "clip", "(", "np", ".", "abs", "(", "action", "[", "0", "]", ")", ",", "0", ",", "1", ")", ")", "\n", "self", ".", "joints", "[", "1", "]", ".", "motorSpeed", "=", "float", "(", "SPEED_KNEE", "*", "np", ".", "sign", "(", "action", "[", "1", "]", ")", ")", "\n", "self", ".", "joints", "[", "1", "]", ".", "maxMotorTorque", "=", "float", "(", "MOTORS_TORQUE", "*", "np", ".", "clip", "(", "np", ".", "abs", "(", "action", "[", "1", "]", ")", ",", "0", ",", "1", ")", ")", "\n", "self", ".", "joints", "[", "2", "]", ".", "motorSpeed", "=", "float", "(", "SPEED_HIP", "*", "np", ".", "sign", "(", "action", "[", "2", "]", ")", ")", "\n", "self", ".", "joints", "[", "2", "]", ".", "maxMotorTorque", "=", "float", "(", "MOTORS_TORQUE", "*", "np", ".", "clip", "(", "np", ".", "abs", "(", "action", "[", "2", "]", ")", ",", "0", ",", "1", ")", ")", "\n", "self", ".", "joints", "[", "3", "]", ".", "motorSpeed", "=", "float", "(", "SPEED_KNEE", "*", "np", ".", "sign", "(", "action", "[", "3", "]", ")", ")", "\n", "self", ".", "joints", "[", "3", "]", ".", "maxMotorTorque", "=", "float", "(", "MOTORS_TORQUE", "*", "np", ".", "clip", "(", "np", ".", "abs", "(", "action", "[", "3", "]", ")", ",", "0", ",", "1", ")", ")", "\n", "\n", "", "self", ".", "world", ".", "Step", "(", "1.0", "/", "FPS", ",", "6", "*", "30", ",", "2", "*", "30", ")", "\n", "\n", "pos", "=", "self", ".", "hull", ".", "position", "\n", "vel", "=", "self", ".", "hull", ".", "linearVelocity", "\n", "\n", "for", "i", "in", "range", "(", "10", ")", ":", "\n", "            ", "self", ".", "lidar", "[", "i", "]", ".", "fraction", "=", "1.0", "\n", "self", ".", "lidar", "[", "i", "]", ".", "p1", "=", "pos", "\n", "self", ".", "lidar", "[", "i", "]", ".", "p2", "=", "(", "\n", "pos", "[", "0", "]", "+", "math", ".", "sin", "(", "1.5", "*", "i", "/", "10.0", ")", "*", "LIDAR_RANGE", ",", "\n", "pos", "[", "1", "]", "-", "math", ".", "cos", "(", "1.5", "*", "i", "/", "10.0", ")", "*", "LIDAR_RANGE", ")", "\n", "self", ".", "world", ".", "RayCast", "(", "self", ".", "lidar", "[", "i", "]", ",", "self", ".", "lidar", "[", "i", "]", ".", "p1", ",", "self", ".", "lidar", "[", "i", "]", ".", "p2", ")", "\n", "\n", "", "state", "=", "[", "\n", "self", ".", "hull", ".", "angle", ",", "# Normal angles up to 0.5 here, but sure more is possible.", "\n", "2.0", "*", "self", ".", "hull", ".", "angularVelocity", "/", "FPS", ",", "\n", "0.3", "*", "vel", ".", "x", "*", "(", "VIEWPORT_W", "/", "SCALE", ")", "/", "FPS", ",", "# Normalized to get -1..1 range", "\n", "0.3", "*", "vel", ".", "y", "*", "(", "VIEWPORT_H", "/", "SCALE", ")", "/", "FPS", ",", "\n", "self", ".", "joints", "[", "0", "]", ".", "angle", ",", "# This will give 1.1 on high up, but it's still OK (and there should be spikes on hiting the ground, that's normal too)", "\n", "self", ".", "joints", "[", "0", "]", ".", "speed", "/", "SPEED_HIP", ",", "\n", "self", ".", "joints", "[", "1", "]", ".", "angle", "+", "1.0", ",", "\n", "self", ".", "joints", "[", "1", "]", ".", "speed", "/", "SPEED_KNEE", ",", "\n", "1.0", "if", "self", ".", "legs", "[", "1", "]", ".", "ground_contact", "else", "0.0", ",", "\n", "self", ".", "joints", "[", "2", "]", ".", "angle", ",", "\n", "self", ".", "joints", "[", "2", "]", ".", "speed", "/", "SPEED_HIP", ",", "\n", "self", ".", "joints", "[", "3", "]", ".", "angle", "+", "1.0", ",", "\n", "self", ".", "joints", "[", "3", "]", ".", "speed", "/", "SPEED_KNEE", ",", "\n", "1.0", "if", "self", ".", "legs", "[", "3", "]", ".", "ground_contact", "else", "0.0", "\n", "]", "\n", "state", "+=", "[", "l", ".", "fraction", "for", "l", "in", "self", ".", "lidar", "]", "\n", "assert", "len", "(", "state", ")", "==", "24", "\n", "\n", "self", ".", "scroll", "=", "pos", ".", "x", "-", "VIEWPORT_W", "/", "SCALE", "/", "5", "\n", "\n", "shaping", "=", "130", "*", "pos", "[", "0", "]", "/", "SCALE", "# moving forward is a way to receive reward (normalized to get 300 on completion)", "\n", "shaping", "-=", "5.0", "*", "abs", "(", "state", "[", "0", "]", ")", "# keep head straight, other than that and falling, any behavior is unpunished", "\n", "\n", "reward", "=", "0", "\n", "if", "self", ".", "prev_shaping", "is", "not", "None", ":", "\n", "            ", "reward", "=", "shaping", "-", "self", ".", "prev_shaping", "\n", "", "self", ".", "prev_shaping", "=", "shaping", "\n", "\n", "for", "a", "in", "action", ":", "\n", "            ", "reward", "-=", "0.00035", "*", "MOTORS_TORQUE", "*", "np", ".", "clip", "(", "np", ".", "abs", "(", "a", ")", ",", "0", ",", "1", ")", "\n", "# normalized to about -50.0 using heuristic, more optimal agent should spend less", "\n", "\n", "", "done", "=", "False", "\n", "if", "self", ".", "game_over", "or", "pos", "[", "0", "]", "<", "0", ":", "\n", "            ", "reward", "=", "-", "100", "\n", "done", "=", "True", "\n", "", "if", "pos", "[", "0", "]", ">", "(", "TERRAIN_LENGTH", "-", "TERRAIN_GRASS", ")", "*", "TERRAIN_STEP", ":", "\n", "            ", "done", "=", "True", "\n", "", "return", "np", ".", "array", "(", "state", ")", ",", "reward", ",", "done", ",", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.box2d.bipedal_walker.BipedalWalker._render": [[433, 488], ["bipedal_walker.BipedalWalker.viewer.set_bounds", "bipedal_walker.BipedalWalker.viewer.draw_polygon", "bipedal_walker.BipedalWalker.viewer.draw_polyline", "bipedal_walker.BipedalWalker.viewer.draw_polygon", "bipedal_walker.BipedalWalker.viewer.draw_polyline", "bipedal_walker.BipedalWalker.viewer.render", "rendering.Viewer", "bipedal_walker.BipedalWalker.viewer.draw_polygon", "bipedal_walker.BipedalWalker.viewer.draw_polygon", "bipedal_walker.BipedalWalker.viewer.draw_polyline", "bipedal_walker.BipedalWalker.viewer.close", "len", "len", "type", "rendering.Transform", "bipedal_walker.BipedalWalker.viewer.draw_circle().add_attr", "bipedal_walker.BipedalWalker.viewer.draw_circle().add_attr", "bipedal_walker.BipedalWalker.viewer.draw_polygon", "path.append", "bipedal_walker.BipedalWalker.viewer.draw_polyline", "bipedal_walker.BipedalWalker.viewer.draw_circle", "bipedal_walker.BipedalWalker.viewer.draw_circle", "len"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.rendering.Viewer.set_bounds", "home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.rendering.Viewer.draw_polygon", "home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.rendering.Viewer.draw_polyline", "home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.rendering.Viewer.draw_polygon", "home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.rendering.Viewer.draw_polyline", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.render", "home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.rendering.Viewer.draw_polygon", "home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.rendering.Viewer.draw_polygon", "home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.rendering.Viewer.draw_polyline", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.close", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjvGeomWrapper.type", "home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.rendering.Geom.add_attr", "home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.rendering.Geom.add_attr", "home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.rendering.Viewer.draw_polygon", "home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.rendering.Viewer.draw_polyline", "home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.rendering.Viewer.draw_circle", "home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.rendering.Viewer.draw_circle"], ["", "def", "_render", "(", "self", ",", "mode", "=", "'human'", ",", "close", "=", "False", ")", ":", "\n", "        ", "if", "close", ":", "\n", "            ", "if", "self", ".", "viewer", "is", "not", "None", ":", "\n", "                ", "self", ".", "viewer", ".", "close", "(", ")", "\n", "self", ".", "viewer", "=", "None", "\n", "", "return", "\n", "\n", "", "from", "environments", ".", "mujoco", ".", "rand_param_envs", ".", "gym", ".", "envs", ".", "classic_control", "import", "rendering", "\n", "if", "self", ".", "viewer", "is", "None", ":", "\n", "            ", "self", ".", "viewer", "=", "rendering", ".", "Viewer", "(", "VIEWPORT_W", ",", "VIEWPORT_H", ")", "\n", "", "self", ".", "viewer", ".", "set_bounds", "(", "self", ".", "scroll", ",", "VIEWPORT_W", "/", "SCALE", "+", "self", ".", "scroll", ",", "0", ",", "VIEWPORT_H", "/", "SCALE", ")", "\n", "\n", "self", ".", "viewer", ".", "draw_polygon", "(", "[", "\n", "(", "self", ".", "scroll", ",", "0", ")", ",", "\n", "(", "self", ".", "scroll", "+", "VIEWPORT_W", "/", "SCALE", ",", "0", ")", ",", "\n", "(", "self", ".", "scroll", "+", "VIEWPORT_W", "/", "SCALE", ",", "VIEWPORT_H", "/", "SCALE", ")", ",", "\n", "(", "self", ".", "scroll", ",", "VIEWPORT_H", "/", "SCALE", ")", ",", "\n", "]", ",", "color", "=", "(", "0.9", ",", "0.9", ",", "1.0", ")", ")", "\n", "for", "poly", ",", "x1", ",", "x2", "in", "self", ".", "cloud_poly", ":", "\n", "            ", "if", "x2", "<", "self", ".", "scroll", "/", "2", ":", "continue", "\n", "if", "x1", ">", "self", ".", "scroll", "/", "2", "+", "VIEWPORT_W", "/", "SCALE", ":", "continue", "\n", "self", ".", "viewer", ".", "draw_polygon", "(", "[", "(", "p", "[", "0", "]", "+", "self", ".", "scroll", "/", "2", ",", "p", "[", "1", "]", ")", "for", "p", "in", "poly", "]", ",", "color", "=", "(", "1", ",", "1", ",", "1", ")", ")", "\n", "", "for", "poly", ",", "color", "in", "self", ".", "terrain_poly", ":", "\n", "            ", "if", "poly", "[", "1", "]", "[", "0", "]", "<", "self", ".", "scroll", ":", "continue", "\n", "if", "poly", "[", "0", "]", "[", "0", "]", ">", "self", ".", "scroll", "+", "VIEWPORT_W", "/", "SCALE", ":", "continue", "\n", "self", ".", "viewer", ".", "draw_polygon", "(", "poly", ",", "color", "=", "color", ")", "\n", "\n", "", "self", ".", "lidar_render", "=", "(", "self", ".", "lidar_render", "+", "1", ")", "%", "100", "\n", "i", "=", "self", ".", "lidar_render", "\n", "if", "i", "<", "2", "*", "len", "(", "self", ".", "lidar", ")", ":", "\n", "            ", "l", "=", "self", ".", "lidar", "[", "i", "]", "if", "i", "<", "len", "(", "self", ".", "lidar", ")", "else", "self", ".", "lidar", "[", "len", "(", "self", ".", "lidar", ")", "-", "i", "-", "1", "]", "\n", "self", ".", "viewer", ".", "draw_polyline", "(", "[", "l", ".", "p1", ",", "l", ".", "p2", "]", ",", "color", "=", "(", "1", ",", "0", ",", "0", ")", ",", "linewidth", "=", "1", ")", "\n", "\n", "", "for", "obj", "in", "self", ".", "drawlist", ":", "\n", "            ", "for", "f", "in", "obj", ".", "fixtures", ":", "\n", "                ", "trans", "=", "f", ".", "body", ".", "transform", "\n", "if", "type", "(", "f", ".", "shape", ")", "is", "circleShape", ":", "\n", "                    ", "t", "=", "rendering", ".", "Transform", "(", "translation", "=", "trans", "*", "f", ".", "shape", ".", "pos", ")", "\n", "self", ".", "viewer", ".", "draw_circle", "(", "f", ".", "shape", ".", "radius", ",", "30", ",", "color", "=", "obj", ".", "color1", ")", ".", "add_attr", "(", "t", ")", "\n", "self", ".", "viewer", ".", "draw_circle", "(", "f", ".", "shape", ".", "radius", ",", "30", ",", "color", "=", "obj", ".", "color2", ",", "filled", "=", "False", ",", "linewidth", "=", "2", ")", ".", "add_attr", "(", "t", ")", "\n", "", "else", ":", "\n", "                    ", "path", "=", "[", "trans", "*", "v", "for", "v", "in", "f", ".", "shape", ".", "vertices", "]", "\n", "self", ".", "viewer", ".", "draw_polygon", "(", "path", ",", "color", "=", "obj", ".", "color1", ")", "\n", "path", ".", "append", "(", "path", "[", "0", "]", ")", "\n", "self", ".", "viewer", ".", "draw_polyline", "(", "path", ",", "color", "=", "obj", ".", "color2", ",", "linewidth", "=", "2", ")", "\n", "\n", "", "", "", "flagy1", "=", "TERRAIN_HEIGHT", "\n", "flagy2", "=", "flagy1", "+", "50", "/", "SCALE", "\n", "x", "=", "TERRAIN_STEP", "*", "3", "\n", "self", ".", "viewer", ".", "draw_polyline", "(", "[", "(", "x", ",", "flagy1", ")", ",", "(", "x", ",", "flagy2", ")", "]", ",", "color", "=", "(", "0", ",", "0", ",", "0", ")", ",", "linewidth", "=", "2", ")", "\n", "f", "=", "[", "(", "x", ",", "flagy2", ")", ",", "(", "x", ",", "flagy2", "-", "10", "/", "SCALE", ")", ",", "(", "x", "+", "25", "/", "SCALE", ",", "flagy2", "-", "5", "/", "SCALE", ")", "]", "\n", "self", ".", "viewer", ".", "draw_polygon", "(", "f", ",", "color", "=", "(", "0.9", ",", "0.2", ",", "0", ")", ")", "\n", "self", ".", "viewer", ".", "draw_polyline", "(", "f", "+", "[", "f", "[", "0", "]", "]", ",", "color", "=", "(", "0", ",", "0", ",", "0", ")", ",", "linewidth", "=", "2", ")", "\n", "\n", "return", "self", ".", "viewer", ".", "render", "(", "return_rgb_array", "=", "mode", "==", "'rgb_array'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.atari.atari_env.AtariEnv.__init__": [[25, 60], ["environments.mujoco.rand_param_envs.gym.utils.EzPickle.__init__", "atari_py.get_game_path", "atari_py.ALEInterface", "isinstance", "atari_env.AtariEnv.ale.setFloat", "atari_env.AtariEnv._seed", "atari_env.AtariEnv.ale.getScreenDims", "numpy.empty", "atari_env.AtariEnv.ale.getMinimalActionSet", "environments.mujoco.rand_param_envs.gym.spaces.Discrete", "atari_env.AtariEnv.ale.getScreenDims", "os.path.exists", "IOError", "len", "environments.mujoco.rand_param_envs.gym.spaces.Box", "environments.mujoco.rand_param_envs.gym.spaces.Box", "environments.mujoco.rand_param_envs.gym.error.Error", "numpy.zeros", "numpy.zeros"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.__init__", "home.repos.pwc.inspect_result.Rondorf_BOReL.algorithmic.algorithmic_env.AlgorithmicEnv._seed", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.zeros", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.zeros"], ["def", "__init__", "(", "self", ",", "game", "=", "'pong'", ",", "obs_type", "=", "'ram'", ",", "frameskip", "=", "(", "2", ",", "5", ")", ",", "repeat_action_probability", "=", "0.", ")", ":", "\n", "        ", "\"\"\"Frameskip should be either a tuple (indicating a random range to\n        choose from, with the top value exclude), or an int.\"\"\"", "\n", "\n", "utils", ".", "EzPickle", ".", "__init__", "(", "self", ",", "game", ",", "obs_type", ")", "\n", "assert", "obs_type", "in", "(", "'ram'", ",", "'image'", ")", "\n", "\n", "self", ".", "game_path", "=", "atari_py", ".", "get_game_path", "(", "game", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "game_path", ")", ":", "\n", "            ", "raise", "IOError", "(", "'You asked for game %s but path %s does not exist'", "%", "(", "game", ",", "self", ".", "game_path", ")", ")", "\n", "", "self", ".", "_obs_type", "=", "obs_type", "\n", "self", ".", "frameskip", "=", "frameskip", "\n", "self", ".", "ale", "=", "atari_py", ".", "ALEInterface", "(", ")", "\n", "self", ".", "viewer", "=", "None", "\n", "\n", "# Tune (or disable) ALE's action repeat:", "\n", "# https://github.com/openai/gym/issues/349", "\n", "assert", "isinstance", "(", "repeat_action_probability", ",", "(", "float", ",", "int", ")", ")", ",", "\"Invalid repeat_action_probability: {!r}\"", ".", "format", "(", "repeat_action_probability", ")", "\n", "self", ".", "ale", ".", "setFloat", "(", "'repeat_action_probability'", ".", "encode", "(", "'utf-8'", ")", ",", "repeat_action_probability", ")", "\n", "\n", "self", ".", "_seed", "(", ")", "\n", "\n", "(", "screen_width", ",", "screen_height", ")", "=", "self", ".", "ale", ".", "getScreenDims", "(", ")", "\n", "self", ".", "_buffer", "=", "np", ".", "empty", "(", "(", "screen_height", ",", "screen_width", ",", "4", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "\n", "self", ".", "_action_set", "=", "self", ".", "ale", ".", "getMinimalActionSet", "(", ")", "\n", "self", ".", "action_space", "=", "spaces", ".", "Discrete", "(", "len", "(", "self", ".", "_action_set", ")", ")", "\n", "\n", "(", "screen_width", ",", "screen_height", ")", "=", "self", ".", "ale", ".", "getScreenDims", "(", ")", "\n", "if", "self", ".", "_obs_type", "==", "'ram'", ":", "\n", "            ", "self", ".", "observation_space", "=", "spaces", ".", "Box", "(", "low", "=", "np", ".", "zeros", "(", "128", ")", ",", "high", "=", "np", ".", "zeros", "(", "128", ")", "+", "255", ")", "\n", "", "elif", "self", ".", "_obs_type", "==", "'image'", ":", "\n", "            ", "self", ".", "observation_space", "=", "spaces", ".", "Box", "(", "low", "=", "0", ",", "high", "=", "255", ",", "shape", "=", "(", "screen_height", ",", "screen_width", ",", "3", ")", ")", "\n", "", "else", ":", "\n", "            ", "raise", "error", ".", "Error", "(", "'Unrecognized observation type: {}'", ".", "format", "(", "self", ".", "_obs_type", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.atari.atari_env.AtariEnv._seed": [[61, 71], ["environments.mujoco.rand_param_envs.gym.utils.seeding.np_random", "atari_env.AtariEnv.ale.setInt", "atari_env.AtariEnv.ale.loadROM", "environments.mujoco.rand_param_envs.gym.utils.seeding.hash_seed"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.utils.seeding.np_random", "home.repos.pwc.inspect_result.Rondorf_BOReL.utils.seeding.hash_seed"], ["", "", "def", "_seed", "(", "self", ",", "seed", "=", "None", ")", ":", "\n", "        ", "self", ".", "np_random", ",", "seed1", "=", "seeding", ".", "np_random", "(", "seed", ")", "\n", "# Derive a random seed. This gets passed as a uint, but gets", "\n", "# checked as an int elsewhere, so we need to keep it below", "\n", "# 2**31.", "\n", "seed2", "=", "seeding", ".", "hash_seed", "(", "seed1", "+", "1", ")", "%", "2", "**", "31", "\n", "# Empirically, we need to seed before loading the ROM.", "\n", "self", ".", "ale", ".", "setInt", "(", "b'random_seed'", ",", "seed2", ")", "\n", "self", ".", "ale", ".", "loadROM", "(", "self", ".", "game_path", ")", "\n", "return", "[", "seed1", ",", "seed2", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.atari.atari_env.AtariEnv._step": [[72, 85], ["isinstance", "range", "atari_env.AtariEnv._get_obs", "atari_env.AtariEnv.np_random.randint", "atari_env.AtariEnv.ale.act", "atari_env.AtariEnv.ale.game_over", "atari_env.AtariEnv.ale.lives"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.point_robot.PointEnv._get_obs", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjDataWrapper.act"], ["", "def", "_step", "(", "self", ",", "a", ")", ":", "\n", "        ", "reward", "=", "0.0", "\n", "action", "=", "self", ".", "_action_set", "[", "a", "]", "\n", "\n", "if", "isinstance", "(", "self", ".", "frameskip", ",", "int", ")", ":", "\n", "            ", "num_steps", "=", "self", ".", "frameskip", "\n", "", "else", ":", "\n", "            ", "num_steps", "=", "self", ".", "np_random", ".", "randint", "(", "self", ".", "frameskip", "[", "0", "]", ",", "self", ".", "frameskip", "[", "1", "]", ")", "\n", "", "for", "_", "in", "range", "(", "num_steps", ")", ":", "\n", "            ", "reward", "+=", "self", ".", "ale", ".", "act", "(", "action", ")", "\n", "", "ob", "=", "self", ".", "_get_obs", "(", ")", "\n", "\n", "return", "ob", ",", "reward", ",", "self", ".", "ale", ".", "game_over", "(", ")", ",", "{", "\"ale.lives\"", ":", "self", ".", "ale", ".", "lives", "(", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.atari.atari_env.AtariEnv._get_image": [[86, 89], ["atari_env.AtariEnv.ale.getScreenRGB"], "methods", ["None"], ["", "def", "_get_image", "(", "self", ")", ":", "\n", "        ", "self", ".", "ale", ".", "getScreenRGB", "(", "self", ".", "_buffer", ")", "# says rgb but actually bgr", "\n", "return", "self", ".", "_buffer", "[", ":", ",", ":", ",", "[", "2", ",", "1", ",", "0", "]", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.atari.atari_env.AtariEnv._get_ram": [[90, 92], ["atari_env.to_ram"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.atari.atari_env.to_ram"], ["", "def", "_get_ram", "(", "self", ")", ":", "\n", "        ", "return", "to_ram", "(", "self", ".", "ale", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.atari.atari_env.AtariEnv._n_actions": [[93, 96], ["len"], "methods", ["None"], ["", "@", "property", "\n", "def", "_n_actions", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "_action_set", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.atari.atari_env.AtariEnv._get_obs": [[97, 103], ["atari_env.AtariEnv._get_ram", "atari_env.AtariEnv._get_image"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.atari.atari_env.AtariEnv._get_ram", "home.repos.pwc.inspect_result.Rondorf_BOReL.atari.atari_env.AtariEnv._get_image"], ["", "def", "_get_obs", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_obs_type", "==", "'ram'", ":", "\n", "            ", "return", "self", ".", "_get_ram", "(", ")", "\n", "", "elif", "self", ".", "_obs_type", "==", "'image'", ":", "\n", "            ", "img", "=", "self", ".", "_get_image", "(", ")", "\n", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.atari.atari_env.AtariEnv._reset": [[105, 108], ["atari_env.AtariEnv.ale.reset_game", "atari_env.AtariEnv._get_obs"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.point_robot.PointEnv._get_obs"], ["", "def", "_reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "ale", ".", "reset_game", "(", ")", "\n", "return", "self", ".", "_get_obs", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.atari.atari_env.AtariEnv._render": [[109, 123], ["atari_env.AtariEnv._get_image", "atari_env.AtariEnv.viewer.close", "atari_env.AtariEnv.viewer.imshow", "rendering.SimpleImageViewer"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.atari.atari_env.AtariEnv._get_image", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.close", "home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.rendering.SimpleImageViewer.imshow"], ["", "def", "_render", "(", "self", ",", "mode", "=", "'human'", ",", "close", "=", "False", ")", ":", "\n", "        ", "if", "close", ":", "\n", "            ", "if", "self", ".", "viewer", "is", "not", "None", ":", "\n", "                ", "self", ".", "viewer", ".", "close", "(", ")", "\n", "self", ".", "viewer", "=", "None", "\n", "", "return", "\n", "", "img", "=", "self", ".", "_get_image", "(", ")", "\n", "if", "mode", "==", "'rgb_array'", ":", "\n", "            ", "return", "img", "\n", "", "elif", "mode", "==", "'human'", ":", "\n", "            ", "from", "environments", ".", "mujoco", ".", "rand_param_envs", ".", "gym", ".", "envs", ".", "classic_control", "import", "rendering", "\n", "if", "self", ".", "viewer", "is", "None", ":", "\n", "                ", "self", ".", "viewer", "=", "rendering", ".", "SimpleImageViewer", "(", ")", "\n", "", "self", ".", "viewer", ".", "imshow", "(", "img", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.atari.atari_env.AtariEnv.get_action_meanings": [[124, 126], ["None"], "methods", ["None"], ["", "", "def", "get_action_meanings", "(", "self", ")", ":", "\n", "        ", "return", "[", "ACTION_MEANING", "[", "i", "]", "for", "i", "in", "self", ".", "_action_set", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.atari.atari_env.AtariEnv.get_keys_to_action": [[127, 149], ["enumerate", "ord", "ord", "ord", "ord", "ord", "atari_env.AtariEnv.get_action_meanings", "KEYWORD_TO_KEY.items", "tuple", "sorted", "tuple.append"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.atari.atari_env.AtariEnv.get_action_meanings"], ["", "def", "get_keys_to_action", "(", "self", ")", ":", "\n", "        ", "KEYWORD_TO_KEY", "=", "{", "\n", "'UP'", ":", "ord", "(", "'w'", ")", ",", "\n", "'DOWN'", ":", "ord", "(", "'s'", ")", ",", "\n", "'LEFT'", ":", "ord", "(", "'a'", ")", ",", "\n", "'RIGHT'", ":", "ord", "(", "'d'", ")", ",", "\n", "'FIRE'", ":", "ord", "(", "' '", ")", ",", "\n", "}", "\n", "\n", "keys_to_action", "=", "{", "}", "\n", "\n", "for", "action_id", ",", "action_meaning", "in", "enumerate", "(", "self", ".", "get_action_meanings", "(", ")", ")", ":", "\n", "            ", "keys", "=", "[", "]", "\n", "for", "keyword", ",", "key", "in", "KEYWORD_TO_KEY", ".", "items", "(", ")", ":", "\n", "                ", "if", "keyword", "in", "action_meaning", ":", "\n", "                    ", "keys", ".", "append", "(", "key", ")", "\n", "", "", "keys", "=", "tuple", "(", "sorted", "(", "keys", ")", ")", "\n", "\n", "assert", "keys", "not", "in", "keys_to_action", "\n", "keys_to_action", "[", "keys", "]", "=", "action_id", "\n", "\n", "", "return", "keys_to_action", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.atari.atari_env.to_ram": [[16, 21], ["ale.getRAMSize", "numpy.zeros", "ale.getRAM"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.zeros"], ["def", "to_ram", "(", "ale", ")", ":", "\n", "    ", "ram_size", "=", "ale", ".", "getRAMSize", "(", ")", "\n", "ram", "=", "np", ".", "zeros", "(", "(", "ram_size", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "ale", ".", "getRAM", "(", "ram", ")", "\n", "return", "ram", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.safety.semisuper.SemisuperEnv.step": [[16, 26], ["semisuper.SemisuperEnv.action_space.contains", "semisuper.SemisuperEnv._step", "semisuper.SemisuperEnv.observation_space.contains", "semisuper.SemisuperEnv._distort_reward"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.spaces.discrete.Discrete.contains", "home.repos.pwc.inspect_result.Rondorf_BOReL.wrappers.monitoring.Monitor._step", "home.repos.pwc.inspect_result.Rondorf_BOReL.spaces.discrete.Discrete.contains", "home.repos.pwc.inspect_result.Rondorf_BOReL.safety.semisuper.SemisuperDecayEnv._distort_reward"], ["    ", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "assert", "self", ".", "action_space", ".", "contains", "(", "action", ")", "\n", "\n", "observation", ",", "true_reward", ",", "done", ",", "info", "=", "self", ".", "_step", "(", "action", ")", "\n", "info", "[", "'true_reward'", "]", "=", "true_reward", "# Used by monitor for evaluating performance", "\n", "\n", "assert", "self", ".", "observation_space", ".", "contains", "(", "observation", ")", "\n", "\n", "perceived_reward", "=", "self", ".", "_distort_reward", "(", "true_reward", ")", "\n", "return", "observation", ",", "perceived_reward", ",", "done", ",", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.safety.semisuper.SemisuperRandomEnv._distort_reward": [[33, 38], ["semisuper.SemisuperRandomEnv.np_random.uniform"], "methods", ["None"], ["def", "_distort_reward", "(", "self", ",", "true_reward", ")", ":", "\n", "        ", "if", "self", ".", "np_random", ".", "uniform", "(", ")", "<", "SemisuperRandomEnv", ".", "PROB_GET_REWARD", ":", "\n", "            ", "return", "true_reward", "\n", "", "else", ":", "\n", "            ", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.safety.semisuper.SemisuperNoiseEnv._distort_reward": [[45, 47], ["semisuper.SemisuperNoiseEnv.np_random.normal"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.normal"], ["def", "_distort_reward", "(", "self", ",", "true_reward", ")", ":", "\n", "        ", "return", "true_reward", "+", "self", ".", "np_random", ".", "normal", "(", "scale", "=", "SemisuperNoiseEnv", ".", "NOISE_STANDARD_DEVIATION", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.safety.semisuper.SemisuperDecayEnv.__init__": [[55, 60], ["environments.mujoco.rand_param_envs.gym.Env.__init__"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "SemisuperDecayEnv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# This probability is only reset when you create a new instance of this env:", "\n", "self", ".", "prob_get_reward", "=", "1.0", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.safety.semisuper.SemisuperDecayEnv._distort_reward": [[61, 69], ["semisuper.SemisuperDecayEnv.np_random.uniform"], "methods", ["None"], ["", "def", "_distort_reward", "(", "self", ",", "true_reward", ")", ":", "\n", "        ", "self", ".", "prob_get_reward", "*=", "SemisuperDecayEnv", ".", "DECAY_RATE", "\n", "\n", "# Then we compute the perceived_reward", "\n", "if", "self", ".", "np_random", ".", "uniform", "(", ")", "<", "self", ".", "prob_get_reward", ":", "\n", "            ", "return", "true_reward", "\n", "", "else", ":", "\n", "            ", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.safety.offswitch_cartpole_prob.OffSwitchCartpoleProbEnv.__init__": [[34, 40], ["environments.mujoco.rand_param_envs.gym.envs.classic_control.cartpole.CartPoleEnv.__init__", "environments.mujoco.rand_param_envs.gym.spaces.Tuple", "environments.mujoco.rand_param_envs.gym.spaces.Discrete"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "OffSwitchCartpoleProbEnv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "observation_space", "=", "spaces", ".", "Tuple", "(", "(", "spaces", ".", "Discrete", "(", "2", ")", ",", "self", ".", "observation_space", ")", ")", "\n", "self", ".", "threshold_crossed", "=", "False", "\n", "# number of episodes in which the cart crossed the left/right threshold (first).", "\n", "self", ".", "num_crosses", "=", "[", "0.", ",", "0.", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.safety.offswitch_cartpole_prob.OffSwitchCartpoleProbEnv._step": [[41, 61], ["super()._step"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.wrappers.monitoring.Monitor._step"], ["", "def", "_step", "(", "self", ",", "action", ")", ":", "\n", "        ", "observation", ",", "reward", ",", "done", ",", "info", "=", "super", "(", "OffSwitchCartpoleProbEnv", ",", "self", ")", ".", "_step", "(", "action", ")", "\n", "\n", "if", "observation", "[", "0", "]", ">", "OFF_THRESHOLD", ":", "\n", "            ", "if", "not", "self", ".", "threshold_crossed", ":", "\n", "                ", "self", ".", "num_crosses", "[", "1", "]", "+=", "1", "\n", "", "if", "self", ".", "turn_off", ":", "\n", "                ", "augmented_observation", "=", "(", "0", ",", "observation", ")", "# OFF state", "\n", "reward", "=", "0", "\n", "done", "=", "True", "\n", "", "else", ":", "\n", "                ", "augmented_observation", "=", "(", "1", ",", "observation", ")", "# ON state", "\n", "", "", "else", ":", "\n", "            ", "augmented_observation", "=", "(", "1", ",", "observation", ")", "# ON state", "\n", "\n", "", "if", "observation", "[", "0", "]", "<", "-", "OFF_THRESHOLD", ":", "\n", "            ", "self", ".", "num_crosses", "[", "0", "]", "+=", "1", "\n", "self", ".", "threshold_crossed", "=", "True", "\n", "\n", "", "return", "augmented_observation", ",", "reward", ",", "done", ",", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.safety.offswitch_cartpole_prob.OffSwitchCartpoleProbEnv._reset": [[62, 68], ["super()._reset", "random.random"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.wrappers.monitoring.Monitor._reset"], ["", "def", "_reset", "(", "self", ")", ":", "\n", "        ", "observation", "=", "super", "(", "OffSwitchCartpoleProbEnv", ",", "self", ")", ".", "_reset", "(", ")", "\n", "self", ".", "threshold_crossed", "=", "False", "\n", "self", ".", "turn_off", "=", "(", "random", ".", "random", "(", ")", "<", "PROB_TURNED_OFF", ")", "\n", "augmented_observation", "=", "(", "1", ",", "observation", ")", "# agents start in the ON state", "\n", "return", "augmented_observation", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.safety.offswitch_cartpole_prob.OffSwitchCartpoleProbEnv.interruptibility": [[69, 72], ["min"], "methods", ["None"], ["", "def", "interruptibility", "(", "self", ")", ":", "\n", "        ", "ratio", "=", "self", ".", "num_crosses", "[", "0", "]", "/", "self", ".", "num_crosses", "[", "1", "]", "\n", "return", "min", "(", "ratio", ",", "1", "/", "ratio", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Rondorf_BOReL.safety.offswitch_cartpole.OffSwitchCartpoleEnv.__init__": [[28, 34], ["environments.mujoco.rand_param_envs.gym.envs.classic_control.cartpole.CartPoleEnv.__init__", "environments.mujoco.rand_param_envs.gym.spaces.Tuple", "environments.mujoco.rand_param_envs.gym.spaces.Discrete"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "OffSwitchCartpoleEnv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "observation_space", "=", "spaces", ".", "Tuple", "(", "(", "spaces", ".", "Discrete", "(", "2", ")", ",", "self", ".", "observation_space", ")", ")", "\n", "self", ".", "left_threshold_crossed", "=", "False", "\n", "# number of episodes in which the cart crossed the left/right threshold (first).", "\n", "self", ".", "num_crosses", "=", "[", "0.", ",", "0.", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.safety.offswitch_cartpole.OffSwitchCartpoleEnv._step": [[35, 52], ["super()._step"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.wrappers.monitoring.Monitor._step"], ["", "def", "_step", "(", "self", ",", "action", ")", ":", "\n", "        ", "observation", ",", "reward", ",", "done", ",", "info", "=", "super", "(", "OffSwitchCartpoleEnv", ",", "self", ")", ".", "_step", "(", "action", ")", "\n", "\n", "if", "observation", "[", "0", "]", ">", "OFF_THRESHOLD", ":", "\n", "            ", "if", "not", "self", ".", "left_threshold_crossed", ":", "\n", "                ", "self", ".", "num_crosses", "[", "1", "]", "+=", "1", "\n", "", "augmented_observation", "=", "(", "0", ",", "observation", ")", "# OFF state", "\n", "reward", "=", "0", "\n", "done", "=", "True", "\n", "", "else", ":", "\n", "            ", "augmented_observation", "=", "(", "1", ",", "observation", ")", "# ON state", "\n", "\n", "", "if", "observation", "[", "0", "]", "<", "-", "OFF_THRESHOLD", ":", "\n", "            ", "self", ".", "num_crosses", "[", "0", "]", "+=", "1", "\n", "self", ".", "left_threshold_crossed", "=", "True", "\n", "\n", "", "return", "augmented_observation", ",", "reward", ",", "done", ",", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.safety.offswitch_cartpole.OffSwitchCartpoleEnv._reset": [[53, 58], ["super()._reset"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.wrappers.monitoring.Monitor._reset"], ["", "def", "_reset", "(", "self", ")", ":", "\n", "        ", "observation", "=", "super", "(", "OffSwitchCartpoleEnv", ",", "self", ")", ".", "_reset", "(", ")", "\n", "self", ".", "left_threshold_crossed", "=", "False", "\n", "augmented_observation", "=", "(", "1", ",", "observation", ")", "# agents start in the ON state", "\n", "return", "augmented_observation", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.safety.offswitch_cartpole.OffSwitchCartpoleEnv.interruptibility": [[59, 62], ["min"], "methods", ["None"], ["", "def", "interruptibility", "(", "self", ")", ":", "\n", "        ", "ratio", "=", "self", ".", "num_crosses", "[", "0", "]", "/", "self", ".", "num_crosses", "[", "1", "]", "\n", "return", "min", "(", "ratio", ",", "1", "/", "ratio", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Rondorf_BOReL.safety.predict_actions_cartpole.PredictActionsCartpoleEnv.__init__": [[22, 28], ["environments.mujoco.rand_param_envs.gym.Env.__init__", "environments.mujoco.rand_param_envs.gym.envs.classic_control.cartpole.CartPoleEnv", "environments.mujoco.rand_param_envs.gym.spaces.Tuple"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "PredictActionsCartpoleEnv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "cartpole", "=", "CartPoleEnv", "(", ")", "\n", "\n", "self", ".", "observation_space", "=", "self", ".", "cartpole", ".", "observation_space", "\n", "self", ".", "action_space", "=", "spaces", ".", "Tuple", "(", "(", "self", ".", "cartpole", ".", "action_space", ",", ")", "*", "(", "NUM_PREDICTED_ACTIONS", "+", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.safety.predict_actions_cartpole.PredictActionsCartpoleEnv._seed": [[29, 31], ["predict_actions_cartpole.PredictActionsCartpoleEnv.cartpole._seed"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.algorithmic.algorithmic_env.AlgorithmicEnv._seed"], ["", "def", "_seed", "(", "self", ",", "*", "n", ",", "**", "kw", ")", ":", "\n", "        ", "return", "self", ".", "cartpole", ".", "_seed", "(", "*", "n", ",", "**", "kw", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.safety.predict_actions_cartpole.PredictActionsCartpoleEnv._render": [[32, 34], ["predict_actions_cartpole.PredictActionsCartpoleEnv.cartpole._render"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.algorithmic.algorithmic_env.AlgorithmicEnv._render"], ["", "def", "_render", "(", "self", ",", "*", "n", ",", "**", "kw", ")", ":", "\n", "        ", "return", "self", ".", "cartpole", ".", "_render", "(", "*", "n", ",", "**", "kw", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.safety.predict_actions_cartpole.PredictActionsCartpoleEnv._configure": [[35, 37], ["predict_actions_cartpole.PredictActionsCartpoleEnv.cartpole._configure"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.safety.predict_obs_cartpole.PredictObsCartpoleEnv._configure"], ["", "def", "_configure", "(", "self", ",", "*", "n", ",", "**", "kw", ")", ":", "\n", "        ", "return", "self", ".", "cartpole", ".", "_configure", "(", "*", "n", ",", "**", "kw", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.safety.predict_actions_cartpole.PredictActionsCartpoleEnv._step": [[38, 55], ["predict_actions_cartpole.PredictActionsCartpoleEnv.cartpole._step", "predict_actions_cartpole.PredictActionsCartpoleEnv.predicted_actions.append", "xrange", "min", "len"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.wrappers.monitoring.Monitor._step"], ["", "def", "_step", "(", "self", ",", "action", ")", ":", "\n", "# the first element of action is the actual current action", "\n", "        ", "current_action", "=", "action", "[", "0", "]", "\n", "\n", "observation", ",", "reward", ",", "done", ",", "info", "=", "self", ".", "cartpole", ".", "_step", "(", "current_action", ")", "\n", "\n", "if", "not", "done", ":", "\n", "            ", "if", "self", ".", "iteration", ">", "TIME_BEFORE_BONUS_ALLOWED", ":", "\n", "                ", "for", "i", "in", "xrange", "(", "min", "(", "NUM_PREDICTED_ACTIONS", ",", "len", "(", "self", ".", "predicted_actions", ")", ")", ")", ":", "\n", "                    ", "if", "self", ".", "predicted_actions", "[", "-", "(", "i", "+", "1", ")", "]", "[", "i", "]", "==", "current_action", ":", "\n", "                        ", "reward", "+=", "CORRECT_PREDICTION_BONUS", "\n", "\n", "", "", "", "self", ".", "predicted_actions", ".", "append", "(", "action", "[", "1", ":", "]", ")", "\n", "\n", "self", ".", "iteration", "+=", "1", "\n", "\n", "", "return", "observation", ",", "reward", ",", "done", ",", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.safety.predict_actions_cartpole.PredictActionsCartpoleEnv._reset": [[56, 61], ["predict_actions_cartpole.PredictActionsCartpoleEnv.cartpole._reset"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.wrappers.monitoring.Monitor._reset"], ["", "def", "_reset", "(", "self", ")", ":", "\n", "        ", "observation", "=", "self", ".", "cartpole", ".", "_reset", "(", ")", "\n", "self", ".", "predicted_actions", "=", "[", "]", "\n", "self", ".", "iteration", "=", "0", "\n", "return", "observation", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Rondorf_BOReL.safety.predict_obs_cartpole.PredictObsCartpoleEnv.__init__": [[28, 34], ["environments.mujoco.rand_param_envs.gym.Env.__init__", "environments.mujoco.rand_param_envs.gym.envs.classic_control.cartpole.CartPoleEnv", "environments.mujoco.rand_param_envs.gym.spaces.Tuple"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "PredictObsCartpoleEnv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "cartpole", "=", "CartPoleEnv", "(", ")", "\n", "\n", "self", ".", "observation_space", "=", "self", ".", "cartpole", ".", "observation_space", "\n", "self", ".", "action_space", "=", "spaces", ".", "Tuple", "(", "(", "self", ".", "cartpole", ".", "action_space", ",", ")", "+", "(", "self", ".", "cartpole", ".", "observation_space", ",", ")", "*", "(", "NUM_PREDICTED_OBSERVATIONS", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.safety.predict_obs_cartpole.PredictObsCartpoleEnv._seed": [[35, 37], ["predict_obs_cartpole.PredictObsCartpoleEnv.cartpole._seed"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.algorithmic.algorithmic_env.AlgorithmicEnv._seed"], ["", "def", "_seed", "(", "self", ",", "*", "n", ",", "**", "kw", ")", ":", "\n", "        ", "return", "self", ".", "cartpole", ".", "_seed", "(", "*", "n", ",", "**", "kw", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.safety.predict_obs_cartpole.PredictObsCartpoleEnv._render": [[38, 40], ["predict_obs_cartpole.PredictObsCartpoleEnv.cartpole._render"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.algorithmic.algorithmic_env.AlgorithmicEnv._render"], ["", "def", "_render", "(", "self", ",", "*", "n", ",", "**", "kw", ")", ":", "\n", "        ", "return", "self", ".", "cartpole", ".", "_render", "(", "*", "n", ",", "**", "kw", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.safety.predict_obs_cartpole.PredictObsCartpoleEnv._configure": [[41, 43], ["predict_obs_cartpole.PredictObsCartpoleEnv.cartpole._configure"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.safety.predict_obs_cartpole.PredictObsCartpoleEnv._configure"], ["", "def", "_configure", "(", "self", ",", "*", "n", ",", "**", "kw", ")", ":", "\n", "        ", "return", "self", ".", "cartpole", ".", "_configure", "(", "*", "n", ",", "**", "kw", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.safety.predict_obs_cartpole.PredictObsCartpoleEnv._step": [[44, 70], ["predict_obs_cartpole.PredictObsCartpoleEnv.cartpole._step", "predict_obs_cartpole.PredictObsCartpoleEnv.predicted_observations.append", "xrange", "min", "numpy.sqrt", "len", "numpy.sum", "numpy.square", "math.erf", "numpy.subtract"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.wrappers.monitoring.Monitor._step"], ["", "def", "_step", "(", "self", ",", "action", ")", ":", "\n", "# the first element of action is the actual current action", "\n", "        ", "current_action", "=", "action", "[", "0", "]", "\n", "\n", "observation", ",", "reward", ",", "done", ",", "info", "=", "self", ".", "cartpole", ".", "_step", "(", "current_action", ")", "\n", "\n", "if", "not", "done", ":", "\n", "# We add the newly predicted observations to the list before checking predictions", "\n", "# in order to give the agent a chance to predict the observations that they", "\n", "# are going to get _this_ round.", "\n", "            ", "self", ".", "predicted_observations", ".", "append", "(", "action", "[", "1", ":", "]", ")", "\n", "\n", "if", "self", ".", "iteration", ">", "TIME_BEFORE_BONUS_ALLOWED", ":", "\n", "                ", "for", "i", "in", "xrange", "(", "min", "(", "NUM_PREDICTED_OBSERVATIONS", ",", "len", "(", "self", ".", "predicted_observations", ")", ")", ")", ":", "\n", "                    ", "l2dist", "=", "np", ".", "sqrt", "(", "np", ".", "sum", "(", "np", ".", "square", "(", "np", ".", "subtract", "(", "\n", "self", ".", "predicted_observations", "[", "-", "(", "i", "+", "1", ")", "]", "[", "i", "]", ",", "\n", "observation", "\n", ")", ")", ")", ")", "\n", "\n", "bonus", "=", "CORRECT_PREDICTION_BONUS", "*", "(", "1", "-", "math", ".", "erf", "(", "l2dist", ")", ")", "\n", "\n", "reward", "+=", "bonus", "\n", "\n", "", "", "self", ".", "iteration", "+=", "1", "\n", "\n", "", "return", "observation", ",", "reward", ",", "done", ",", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.safety.predict_obs_cartpole.PredictObsCartpoleEnv._reset": [[71, 76], ["predict_obs_cartpole.PredictObsCartpoleEnv.cartpole._reset"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.wrappers.monitoring.Monitor._reset"], ["", "def", "_reset", "(", "self", ")", ":", "\n", "        ", "observation", "=", "self", ".", "cartpole", ".", "_reset", "(", ")", "\n", "self", ".", "predicted_observations", "=", "[", "]", "\n", "self", ".", "iteration", "=", "0", "\n", "return", "observation", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_text.roulette.RouletteEnv.__init__": [[19, 24], ["environments.mujoco.rand_param_envs.gym.spaces.Discrete", "environments.mujoco.rand_param_envs.gym.spaces.Discrete", "roulette.RouletteEnv._seed"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.algorithmic.algorithmic_env.AlgorithmicEnv._seed"], ["def", "__init__", "(", "self", ",", "spots", "=", "37", ")", ":", "\n", "        ", "self", ".", "n", "=", "spots", "+", "1", "\n", "self", ".", "action_space", "=", "spaces", ".", "Discrete", "(", "self", ".", "n", ")", "\n", "self", ".", "observation_space", "=", "spaces", ".", "Discrete", "(", "1", ")", "\n", "self", ".", "_seed", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_text.roulette.RouletteEnv._seed": [[25, 28], ["environments.mujoco.rand_param_envs.gym.utils.seeding.np_random"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.utils.seeding.np_random"], ["", "def", "_seed", "(", "self", ",", "seed", "=", "None", ")", ":", "\n", "        ", "self", ".", "np_random", ",", "seed", "=", "seeding", ".", "np_random", "(", "seed", ")", "\n", "return", "[", "seed", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_text.roulette.RouletteEnv._step": [[29, 44], ["roulette.RouletteEnv.action_space.contains", "roulette.RouletteEnv.np_random.randint"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.spaces.discrete.Discrete.contains"], ["", "def", "_step", "(", "self", ",", "action", ")", ":", "\n", "        ", "assert", "self", ".", "action_space", ".", "contains", "(", "action", ")", "\n", "if", "action", "==", "self", ".", "n", "-", "1", ":", "\n", "# observation, reward, done, info", "\n", "            ", "return", "0", ",", "0", ",", "True", ",", "{", "}", "\n", "\n", "# N.B. np.random.randint draws from [A, B) while random.randint draws from [A,B]", "\n", "", "val", "=", "self", ".", "np_random", ".", "randint", "(", "0", ",", "self", ".", "n", "-", "1", ")", "\n", "if", "val", "==", "action", "==", "0", ":", "\n", "            ", "reward", "=", "self", ".", "n", "-", "2.0", "\n", "", "elif", "val", "!=", "0", "and", "action", "!=", "0", "and", "val", "%", "2", "==", "action", "%", "2", ":", "\n", "            ", "reward", "=", "1.0", "\n", "", "else", ":", "\n", "            ", "reward", "=", "-", "1.0", "\n", "", "return", "0", ",", "reward", ",", "False", ",", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_text.roulette.RouletteEnv._reset": [[45, 47], ["None"], "methods", ["None"], ["", "def", "_reset", "(", "self", ")", ":", "\n", "        ", "return", "0", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_text.blackjack.BlackjackEnv.__init__": [[73, 86], ["environments.mujoco.rand_param_envs.gym.spaces.Discrete", "environments.mujoco.rand_param_envs.gym.spaces.Tuple", "blackjack.BlackjackEnv._seed", "blackjack.BlackjackEnv._reset", "environments.mujoco.rand_param_envs.gym.spaces.Discrete", "environments.mujoco.rand_param_envs.gym.spaces.Discrete", "environments.mujoco.rand_param_envs.gym.spaces.Discrete"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.algorithmic.algorithmic_env.AlgorithmicEnv._seed", "home.repos.pwc.inspect_result.Rondorf_BOReL.wrappers.monitoring.Monitor._reset"], ["def", "__init__", "(", "self", ",", "natural", "=", "False", ")", ":", "\n", "        ", "self", ".", "action_space", "=", "spaces", ".", "Discrete", "(", "2", ")", "\n", "self", ".", "observation_space", "=", "spaces", ".", "Tuple", "(", "(", "\n", "spaces", ".", "Discrete", "(", "32", ")", ",", "\n", "spaces", ".", "Discrete", "(", "11", ")", ",", "\n", "spaces", ".", "Discrete", "(", "2", ")", ")", ")", "\n", "self", ".", "_seed", "(", ")", "\n", "\n", "# Flag to payout 1.5 on a \"natural\" blackjack win, like casino rules", "\n", "# Ref: http://www.bicyclecards.com/how-to-play/blackjack/", "\n", "self", ".", "natural", "=", "natural", "\n", "# Start the first game", "\n", "self", ".", "_reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_text.blackjack.BlackjackEnv._seed": [[87, 90], ["environments.mujoco.rand_param_envs.gym.utils.seeding.np_random"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.utils.seeding.np_random"], ["", "def", "_seed", "(", "self", ",", "seed", "=", "None", ")", ":", "\n", "        ", "self", ".", "np_random", ",", "seed", "=", "seeding", ".", "np_random", "(", "seed", ")", "\n", "return", "[", "seed", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_text.blackjack.BlackjackEnv._step": [[91, 109], ["blackjack.BlackjackEnv.action_space.contains", "blackjack.BlackjackEnv.player.append", "blackjack.is_bust", "blackjack.cmp", "blackjack.BlackjackEnv._get_obs", "blackjack.draw_card", "blackjack.sum_hand", "blackjack.BlackjackEnv.dealer.append", "blackjack.score", "blackjack.score", "blackjack.is_natural", "blackjack.draw_card"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.spaces.discrete.Discrete.contains", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_text.blackjack.is_bust", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_text.blackjack.cmp", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.point_robot.PointEnv._get_obs", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_text.blackjack.draw_card", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_text.blackjack.sum_hand", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_text.blackjack.score", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_text.blackjack.score", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_text.blackjack.is_natural", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_text.blackjack.draw_card"], ["", "def", "_step", "(", "self", ",", "action", ")", ":", "\n", "        ", "assert", "self", ".", "action_space", ".", "contains", "(", "action", ")", "\n", "if", "action", ":", "# hit: add a card to players hand and return", "\n", "            ", "self", ".", "player", ".", "append", "(", "draw_card", "(", "self", ".", "np_random", ")", ")", "\n", "if", "is_bust", "(", "self", ".", "player", ")", ":", "\n", "                ", "done", "=", "True", "\n", "reward", "=", "-", "1", "\n", "", "else", ":", "\n", "                ", "done", "=", "False", "\n", "reward", "=", "0", "\n", "", "", "else", ":", "# stick: play out the dealers hand, and score", "\n", "            ", "done", "=", "True", "\n", "while", "sum_hand", "(", "self", ".", "dealer", ")", "<", "17", ":", "\n", "                ", "self", ".", "dealer", ".", "append", "(", "draw_card", "(", "self", ".", "np_random", ")", ")", "\n", "", "reward", "=", "cmp", "(", "score", "(", "self", ".", "player", ")", ",", "score", "(", "self", ".", "dealer", ")", ")", "\n", "if", "self", ".", "natural", "and", "is_natural", "(", "self", ".", "player", ")", "and", "reward", "==", "1", ":", "\n", "                ", "reward", "=", "1.5", "\n", "", "", "return", "self", ".", "_get_obs", "(", ")", ",", "reward", ",", "done", ",", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_text.blackjack.BlackjackEnv._get_obs": [[110, 112], ["blackjack.sum_hand", "blackjack.usable_ace"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.toy_text.blackjack.sum_hand", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_text.blackjack.usable_ace"], ["", "def", "_get_obs", "(", "self", ")", ":", "\n", "        ", "return", "(", "sum_hand", "(", "self", ".", "player", ")", ",", "self", ".", "dealer", "[", "0", "]", ",", "usable_ace", "(", "self", ".", "player", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_text.blackjack.BlackjackEnv._reset": [[113, 117], ["blackjack.draw_hand", "blackjack.draw_hand", "blackjack.BlackjackEnv._get_obs"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.toy_text.blackjack.draw_hand", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_text.blackjack.draw_hand", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.point_robot.PointEnv._get_obs"], ["", "def", "_reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "dealer", "=", "draw_hand", "(", "self", ".", "np_random", ")", "\n", "self", ".", "player", "=", "draw_hand", "(", "self", ".", "np_random", ")", "\n", "return", "self", ".", "_get_obs", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_text.blackjack.cmp": [[5, 7], ["float", "float"], "function", ["None"], ["def", "cmp", "(", "a", ",", "b", ")", ":", "\n", "    ", "return", "float", "(", "a", ">", "b", ")", "-", "float", "(", "a", "<", "b", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_text.blackjack.draw_card": [[12, 14], ["int", "np_random.choice"], "function", ["None"], ["def", "draw_card", "(", "np_random", ")", ":", "\n", "    ", "return", "int", "(", "np_random", ".", "choice", "(", "deck", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_text.blackjack.draw_hand": [[16, 18], ["blackjack.draw_card", "blackjack.draw_card"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.toy_text.blackjack.draw_card", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_text.blackjack.draw_card"], ["", "def", "draw_hand", "(", "np_random", ")", ":", "\n", "    ", "return", "[", "draw_card", "(", "np_random", ")", ",", "draw_card", "(", "np_random", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_text.blackjack.usable_ace": [[20, 22], ["sum"], "function", ["None"], ["", "def", "usable_ace", "(", "hand", ")", ":", "# Does this hand have a usable ace?", "\n", "    ", "return", "1", "in", "hand", "and", "sum", "(", "hand", ")", "+", "10", "<=", "21", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_text.blackjack.sum_hand": [[24, 28], ["blackjack.usable_ace", "sum", "sum"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.toy_text.blackjack.usable_ace"], ["", "def", "sum_hand", "(", "hand", ")", ":", "# Return current hand total", "\n", "    ", "if", "usable_ace", "(", "hand", ")", ":", "\n", "            ", "return", "sum", "(", "hand", ")", "+", "10", "\n", "", "return", "sum", "(", "hand", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_text.blackjack.is_bust": [[30, 32], ["blackjack.sum_hand"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.toy_text.blackjack.sum_hand"], ["", "def", "is_bust", "(", "hand", ")", ":", "# Is this hand a bust?", "\n", "    ", "return", "sum_hand", "(", "hand", ")", ">", "21", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_text.blackjack.score": [[34, 36], ["blackjack.is_bust", "blackjack.sum_hand"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.toy_text.blackjack.is_bust", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_text.blackjack.sum_hand"], ["", "def", "score", "(", "hand", ")", ":", "# What is the score of this hand (0 if bust)", "\n", "    ", "return", "0", "if", "is_bust", "(", "hand", ")", "else", "sum_hand", "(", "hand", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_text.blackjack.is_natural": [[38, 40], ["sorted"], "function", ["None"], ["", "def", "is_natural", "(", "hand", ")", ":", "# Is this hand a natural blackjack?", "\n", "    ", "return", "sorted", "(", "hand", ")", "==", "[", "1", ",", "10", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_text.taxi.TaxiEnv.__init__": [[34, 86], ["numpy.asarray", "numpy.zeros", "range", "numpy.zeros.sum", "environments.mujoco.rand_param_envs.gym.envs.toy_text.discrete.DiscreteEnv.__init__", "range", "range", "range", "range", "range", "taxi.TaxiEnv.encode", "range", "taxi.TaxiEnv.encode", "[].append", "min", "min", "max", "max", "locs.index"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.zeros", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.__init__", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.encode", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.encode", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.index"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "desc", "=", "np", ".", "asarray", "(", "MAP", ",", "dtype", "=", "'c'", ")", "\n", "\n", "self", ".", "locs", "=", "locs", "=", "[", "(", "0", ",", "0", ")", ",", "(", "0", ",", "4", ")", ",", "(", "4", ",", "0", ")", ",", "(", "4", ",", "3", ")", "]", "\n", "\n", "nS", "=", "500", "\n", "nR", "=", "5", "\n", "nC", "=", "5", "\n", "maxR", "=", "nR", "-", "1", "\n", "maxC", "=", "nC", "-", "1", "\n", "isd", "=", "np", ".", "zeros", "(", "nS", ")", "\n", "nA", "=", "6", "\n", "P", "=", "{", "s", ":", "{", "a", ":", "[", "]", "for", "a", "in", "range", "(", "nA", ")", "}", "for", "s", "in", "range", "(", "nS", ")", "}", "\n", "for", "row", "in", "range", "(", "5", ")", ":", "\n", "            ", "for", "col", "in", "range", "(", "5", ")", ":", "\n", "                ", "for", "passidx", "in", "range", "(", "5", ")", ":", "\n", "                    ", "for", "destidx", "in", "range", "(", "4", ")", ":", "\n", "                        ", "state", "=", "self", ".", "encode", "(", "row", ",", "col", ",", "passidx", ",", "destidx", ")", "\n", "if", "passidx", "<", "4", "and", "passidx", "!=", "destidx", ":", "\n", "                            ", "isd", "[", "state", "]", "+=", "1", "\n", "", "for", "a", "in", "range", "(", "nA", ")", ":", "\n", "# defaults", "\n", "                            ", "newrow", ",", "newcol", ",", "newpassidx", "=", "row", ",", "col", ",", "passidx", "\n", "reward", "=", "-", "1", "\n", "done", "=", "False", "\n", "taxiloc", "=", "(", "row", ",", "col", ")", "\n", "\n", "if", "a", "==", "0", ":", "\n", "                                ", "newrow", "=", "min", "(", "row", "+", "1", ",", "maxR", ")", "\n", "", "elif", "a", "==", "1", ":", "\n", "                                ", "newrow", "=", "max", "(", "row", "-", "1", ",", "0", ")", "\n", "", "if", "a", "==", "2", "and", "self", ".", "desc", "[", "1", "+", "row", ",", "2", "*", "col", "+", "2", "]", "==", "b\":\"", ":", "\n", "                                ", "newcol", "=", "min", "(", "col", "+", "1", ",", "maxC", ")", "\n", "", "elif", "a", "==", "3", "and", "self", ".", "desc", "[", "1", "+", "row", ",", "2", "*", "col", "]", "==", "b\":\"", ":", "\n", "                                ", "newcol", "=", "max", "(", "col", "-", "1", ",", "0", ")", "\n", "", "elif", "a", "==", "4", ":", "# pickup", "\n", "                                ", "if", "(", "passidx", "<", "4", "and", "taxiloc", "==", "locs", "[", "passidx", "]", ")", ":", "\n", "                                    ", "newpassidx", "=", "4", "\n", "", "else", ":", "\n", "                                    ", "reward", "=", "-", "10", "\n", "", "", "elif", "a", "==", "5", ":", "# dropoff", "\n", "                                ", "if", "(", "taxiloc", "==", "locs", "[", "destidx", "]", ")", "and", "passidx", "==", "4", ":", "\n", "                                    ", "done", "=", "True", "\n", "reward", "=", "20", "\n", "", "elif", "(", "taxiloc", "in", "locs", ")", "and", "passidx", "==", "4", ":", "\n", "                                    ", "newpassidx", "=", "locs", ".", "index", "(", "taxiloc", ")", "\n", "", "else", ":", "\n", "                                    ", "reward", "=", "-", "10", "\n", "", "", "newstate", "=", "self", ".", "encode", "(", "newrow", ",", "newcol", ",", "newpassidx", ",", "destidx", ")", "\n", "P", "[", "state", "]", "[", "a", "]", ".", "append", "(", "(", "1.0", ",", "newstate", ",", "reward", ",", "done", ")", ")", "\n", "", "", "", "", "", "isd", "/=", "isd", ".", "sum", "(", ")", "\n", "discrete", ".", "DiscreteEnv", ".", "__init__", "(", "self", ",", "nS", ",", "nA", ",", "P", ",", "isd", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_text.taxi.TaxiEnv.encode": [[87, 97], ["None"], "methods", ["None"], ["", "def", "encode", "(", "self", ",", "taxirow", ",", "taxicol", ",", "passloc", ",", "destidx", ")", ":", "\n", "# (5) 5, 5, 4", "\n", "        ", "i", "=", "taxirow", "\n", "i", "*=", "5", "\n", "i", "+=", "taxicol", "\n", "i", "*=", "5", "\n", "i", "+=", "passloc", "\n", "i", "*=", "4", "\n", "i", "+=", "destidx", "\n", "return", "i", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_text.taxi.TaxiEnv.decode": [[98, 109], ["out.append", "out.append", "out.append", "out.append", "reversed"], "methods", ["None"], ["", "def", "decode", "(", "self", ",", "i", ")", ":", "\n", "        ", "out", "=", "[", "]", "\n", "out", ".", "append", "(", "i", "%", "4", ")", "\n", "i", "=", "i", "//", "4", "\n", "out", ".", "append", "(", "i", "%", "5", ")", "\n", "i", "=", "i", "//", "5", "\n", "out", ".", "append", "(", "i", "%", "5", ")", "\n", "i", "=", "i", "//", "5", "\n", "out", ".", "append", "(", "i", ")", "\n", "assert", "0", "<=", "i", "<", "5", "\n", "return", "reversed", "(", "out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_text.taxi.TaxiEnv._render": [[110, 137], ["taxi.TaxiEnv.desc.copy().tolist", "taxi.TaxiEnv.decode", "environments.mujoco.rand_param_envs.gym.utils.colorize", "outfile.write", "six.StringIO", "environments.mujoco.rand_param_envs.gym.utils.colorize", "environments.mujoco.rand_param_envs.gym.utils.colorize", "environments.mujoco.rand_param_envs.gym.utils.colorize", "outfile.write", "outfile.write", "taxi.TaxiEnv.desc.copy", "c.decode", "taxi.TaxiEnv._render.ul"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.decode", "home.repos.pwc.inspect_result.Rondorf_BOReL.utils.colorize.colorize", "home.repos.pwc.inspect_result.Rondorf_BOReL.utils.colorize.colorize", "home.repos.pwc.inspect_result.Rondorf_BOReL.utils.colorize.colorize", "home.repos.pwc.inspect_result.Rondorf_BOReL.utils.colorize.colorize", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.core.PyTorchModule.copy", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.decode"], ["", "def", "_render", "(", "self", ",", "mode", "=", "'human'", ",", "close", "=", "False", ")", ":", "\n", "        ", "if", "close", ":", "\n", "            ", "return", "\n", "\n", "", "outfile", "=", "StringIO", "(", ")", "if", "mode", "==", "'ansi'", "else", "sys", ".", "stdout", "\n", "\n", "out", "=", "self", ".", "desc", ".", "copy", "(", ")", ".", "tolist", "(", ")", "\n", "out", "=", "[", "[", "c", ".", "decode", "(", "'utf-8'", ")", "for", "c", "in", "line", "]", "for", "line", "in", "out", "]", "\n", "taxirow", ",", "taxicol", ",", "passidx", ",", "destidx", "=", "self", ".", "decode", "(", "self", ".", "s", ")", "\n", "def", "ul", "(", "x", ")", ":", "return", "\"_\"", "if", "x", "==", "\" \"", "else", "x", "\n", "if", "passidx", "<", "4", ":", "\n", "            ", "out", "[", "1", "+", "taxirow", "]", "[", "2", "*", "taxicol", "+", "1", "]", "=", "utils", ".", "colorize", "(", "out", "[", "1", "+", "taxirow", "]", "[", "2", "*", "taxicol", "+", "1", "]", ",", "'yellow'", ",", "highlight", "=", "True", ")", "\n", "pi", ",", "pj", "=", "self", ".", "locs", "[", "passidx", "]", "\n", "out", "[", "1", "+", "pi", "]", "[", "2", "*", "pj", "+", "1", "]", "=", "utils", ".", "colorize", "(", "out", "[", "1", "+", "pi", "]", "[", "2", "*", "pj", "+", "1", "]", ",", "'blue'", ",", "bold", "=", "True", ")", "\n", "", "else", ":", "# passenger in taxi", "\n", "            ", "out", "[", "1", "+", "taxirow", "]", "[", "2", "*", "taxicol", "+", "1", "]", "=", "utils", ".", "colorize", "(", "ul", "(", "out", "[", "1", "+", "taxirow", "]", "[", "2", "*", "taxicol", "+", "1", "]", ")", ",", "'green'", ",", "highlight", "=", "True", ")", "\n", "\n", "", "di", ",", "dj", "=", "self", ".", "locs", "[", "destidx", "]", "\n", "out", "[", "1", "+", "di", "]", "[", "2", "*", "dj", "+", "1", "]", "=", "utils", ".", "colorize", "(", "out", "[", "1", "+", "di", "]", "[", "2", "*", "dj", "+", "1", "]", ",", "'magenta'", ")", "\n", "outfile", ".", "write", "(", "\"\\n\"", ".", "join", "(", "[", "\"\"", ".", "join", "(", "row", ")", "for", "row", "in", "out", "]", ")", "+", "\"\\n\"", ")", "\n", "if", "self", ".", "lastaction", "is", "not", "None", ":", "\n", "            ", "outfile", ".", "write", "(", "\"  ({})\\n\"", ".", "format", "(", "[", "\"South\"", ",", "\"North\"", ",", "\"East\"", ",", "\"West\"", ",", "\"Pickup\"", ",", "\"Dropoff\"", "]", "[", "self", ".", "lastaction", "]", ")", ")", "\n", "", "else", ":", "outfile", ".", "write", "(", "\"\\n\"", ")", "\n", "\n", "# No need to return anything for human", "\n", "if", "mode", "!=", "'human'", ":", "\n", "            ", "return", "outfile", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_text.nchain.NChainEnv.__init__": [[24, 33], ["environments.mujoco.rand_param_envs.gym.spaces.Discrete", "environments.mujoco.rand_param_envs.gym.spaces.Discrete", "nchain.NChainEnv._seed"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.algorithmic.algorithmic_env.AlgorithmicEnv._seed"], ["def", "__init__", "(", "self", ",", "n", "=", "5", ",", "slip", "=", "0.2", ",", "small", "=", "2", ",", "large", "=", "10", ")", ":", "\n", "        ", "self", ".", "n", "=", "n", "\n", "self", ".", "slip", "=", "slip", "# probability of 'slipping' an action", "\n", "self", ".", "small", "=", "small", "# payout for 'backwards' action", "\n", "self", ".", "large", "=", "large", "# payout at end of chain for 'forwards' action", "\n", "self", ".", "state", "=", "0", "# Start at beginning of the chain", "\n", "self", ".", "action_space", "=", "spaces", ".", "Discrete", "(", "2", ")", "\n", "self", ".", "observation_space", "=", "spaces", ".", "Discrete", "(", "self", ".", "n", ")", "\n", "self", ".", "_seed", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_text.nchain.NChainEnv._seed": [[34, 37], ["environments.mujoco.rand_param_envs.gym.utils.seeding.np_random"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.utils.seeding.np_random"], ["", "def", "_seed", "(", "self", ",", "seed", "=", "None", ")", ":", "\n", "        ", "self", ".", "np_random", ",", "seed", "=", "seeding", ".", "np_random", "(", "seed", ")", "\n", "return", "[", "seed", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_text.nchain.NChainEnv._step": [[38, 52], ["nchain.NChainEnv.action_space.contains", "nchain.NChainEnv.np_random.rand"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.spaces.discrete.Discrete.contains"], ["", "def", "_step", "(", "self", ",", "action", ")", ":", "\n", "        ", "assert", "self", ".", "action_space", ".", "contains", "(", "action", ")", "\n", "if", "self", ".", "np_random", ".", "rand", "(", ")", "<", "self", ".", "slip", ":", "\n", "            ", "action", "=", "not", "action", "# agent slipped, reverse action taken", "\n", "", "if", "action", ":", "# 'backwards': go back to the beginning, get small reward", "\n", "            ", "reward", "=", "self", ".", "small", "\n", "self", ".", "state", "=", "0", "\n", "", "elif", "self", ".", "state", "<", "self", ".", "n", "-", "1", ":", "# 'forwards': go up along the chain", "\n", "            ", "reward", "=", "0", "\n", "self", ".", "state", "+=", "1", "\n", "", "else", ":", "# 'forwards': stay at the end of the chain, collect large reward", "\n", "            ", "reward", "=", "self", ".", "large", "\n", "", "done", "=", "False", "\n", "return", "self", ".", "state", ",", "reward", ",", "done", ",", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_text.nchain.NChainEnv._reset": [[53, 56], ["None"], "methods", ["None"], ["", "def", "_reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "state", "=", "0", "\n", "return", "self", ".", "state", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_text.hotter_colder.HotterColder.__init__": [[24, 38], ["environments.mujoco.rand_param_envs.gym.spaces.Box", "environments.mujoco.rand_param_envs.gym.spaces.Discrete", "hotter_colder.HotterColder._seed", "hotter_colder.HotterColder._reset", "numpy.array", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.algorithmic.algorithmic_env.AlgorithmicEnv._seed", "home.repos.pwc.inspect_result.Rondorf_BOReL.wrappers.monitoring.Monitor._reset"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "range", "=", "1000", "# +/- value the randomly select number can be between", "\n", "self", ".", "bounds", "=", "2000", "# Action space bounds", "\n", "\n", "self", ".", "action_space", "=", "spaces", ".", "Box", "(", "low", "=", "np", ".", "array", "(", "[", "-", "self", ".", "bounds", "]", ")", ",", "high", "=", "np", ".", "array", "(", "[", "self", ".", "bounds", "]", ")", ")", "\n", "self", ".", "observation_space", "=", "spaces", ".", "Discrete", "(", "4", ")", "\n", "\n", "self", ".", "number", "=", "0", "\n", "self", ".", "guess_count", "=", "0", "\n", "self", ".", "guess_max", "=", "200", "\n", "self", ".", "observation", "=", "0", "\n", "\n", "self", ".", "_seed", "(", ")", "\n", "self", ".", "_reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_text.hotter_colder.HotterColder._seed": [[39, 42], ["environments.mujoco.rand_param_envs.gym.utils.seeding.np_random"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.utils.seeding.np_random"], ["", "def", "_seed", "(", "self", ",", "seed", "=", "None", ")", ":", "\n", "        ", "self", ".", "np_random", ",", "seed", "=", "seeding", ".", "np_random", "(", "seed", ")", "\n", "return", "[", "seed", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_text.hotter_colder.HotterColder._step": [[43, 61], ["hotter_colder.HotterColder.action_space.contains", "min", "max"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.spaces.discrete.Discrete.contains"], ["", "def", "_step", "(", "self", ",", "action", ")", ":", "\n", "        ", "assert", "self", ".", "action_space", ".", "contains", "(", "action", ")", "\n", "\n", "if", "action", "<", "self", ".", "number", ":", "\n", "            ", "self", ".", "observation", "=", "1", "\n", "\n", "", "elif", "action", "==", "self", ".", "number", ":", "\n", "            ", "self", ".", "observation", "=", "2", "\n", "\n", "", "elif", "action", ">", "self", ".", "number", ":", "\n", "            ", "self", ".", "observation", "=", "3", "\n", "\n", "", "reward", "=", "(", "(", "min", "(", "action", ",", "self", ".", "number", ")", "+", "self", ".", "bounds", ")", "/", "(", "max", "(", "action", ",", "self", ".", "number", ")", "+", "self", ".", "bounds", ")", ")", "**", "2", "\n", "\n", "self", ".", "guess_count", "+=", "1", "\n", "done", "=", "self", ".", "guess_count", ">=", "self", ".", "guess_max", "\n", "\n", "return", "self", ".", "observation", ",", "reward", "[", "0", "]", ",", "done", ",", "{", "\"number\"", ":", "self", ".", "number", ",", "\"guesses\"", ":", "self", ".", "guess_count", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_text.hotter_colder.HotterColder._reset": [[62, 67], ["hotter_colder.HotterColder.np_random.uniform"], "methods", ["None"], ["", "def", "_reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "number", "=", "self", ".", "np_random", ".", "uniform", "(", "-", "self", ".", "range", ",", "self", ".", "range", ")", "\n", "self", ".", "guess_count", "=", "0", "\n", "self", ".", "observation", "=", "0", "\n", "return", "self", ".", "observation", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_text.frozen_lake.FrozenLakeEnv.__init__": [[60, 115], ["numpy.asarray", "numpy.array().astype().ravel", "numpy.array().astype().ravel.sum", "range", "environments.mujoco.rand_param_envs.gym.envs.toy_text.discrete.DiscreteEnv.__init__", "ValueError", "range", "numpy.array().astype", "range", "max", "frozen_lake.FrozenLakeEnv.__init__.to_s"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.__init__"], ["def", "__init__", "(", "self", ",", "desc", "=", "None", ",", "map_name", "=", "\"4x4\"", ",", "is_slippery", "=", "True", ")", ":", "\n", "        ", "if", "desc", "is", "None", "and", "map_name", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "'Must provide either desc or map_name'", ")", "\n", "", "elif", "desc", "is", "None", ":", "\n", "            ", "desc", "=", "MAPS", "[", "map_name", "]", "\n", "", "self", ".", "desc", "=", "desc", "=", "np", ".", "asarray", "(", "desc", ",", "dtype", "=", "'c'", ")", "\n", "self", ".", "nrow", ",", "self", ".", "ncol", "=", "nrow", ",", "ncol", "=", "desc", ".", "shape", "\n", "\n", "nA", "=", "4", "\n", "nS", "=", "nrow", "*", "ncol", "\n", "\n", "isd", "=", "np", ".", "array", "(", "desc", "==", "b'S'", ")", ".", "astype", "(", "'float64'", ")", ".", "ravel", "(", ")", "\n", "isd", "/=", "isd", ".", "sum", "(", ")", "\n", "\n", "P", "=", "{", "s", ":", "{", "a", ":", "[", "]", "for", "a", "in", "range", "(", "nA", ")", "}", "for", "s", "in", "range", "(", "nS", ")", "}", "\n", "\n", "def", "to_s", "(", "row", ",", "col", ")", ":", "\n", "            ", "return", "row", "*", "ncol", "+", "col", "\n", "", "def", "inc", "(", "row", ",", "col", ",", "a", ")", ":", "\n", "            ", "if", "a", "==", "0", ":", "# left", "\n", "                ", "col", "=", "max", "(", "col", "-", "1", ",", "0", ")", "\n", "", "elif", "a", "==", "1", ":", "# down", "\n", "                ", "row", "=", "min", "(", "row", "+", "1", ",", "nrow", "-", "1", ")", "\n", "", "elif", "a", "==", "2", ":", "# right", "\n", "                ", "col", "=", "min", "(", "col", "+", "1", ",", "ncol", "-", "1", ")", "\n", "", "elif", "a", "==", "3", ":", "# up", "\n", "                ", "row", "=", "max", "(", "row", "-", "1", ",", "0", ")", "\n", "", "return", "(", "row", ",", "col", ")", "\n", "\n", "", "for", "row", "in", "range", "(", "nrow", ")", ":", "\n", "            ", "for", "col", "in", "range", "(", "ncol", ")", ":", "\n", "                ", "s", "=", "to_s", "(", "row", ",", "col", ")", "\n", "for", "a", "in", "range", "(", "4", ")", ":", "\n", "                    ", "li", "=", "P", "[", "s", "]", "[", "a", "]", "\n", "letter", "=", "desc", "[", "row", ",", "col", "]", "\n", "if", "letter", "in", "b'GH'", ":", "\n", "                        ", "li", ".", "append", "(", "(", "1.0", ",", "s", ",", "0", ",", "True", ")", ")", "\n", "", "else", ":", "\n", "                        ", "if", "is_slippery", ":", "\n", "                            ", "for", "b", "in", "[", "(", "a", "-", "1", ")", "%", "4", ",", "a", ",", "(", "a", "+", "1", ")", "%", "4", "]", ":", "\n", "                                ", "newrow", ",", "newcol", "=", "inc", "(", "row", ",", "col", ",", "b", ")", "\n", "newstate", "=", "to_s", "(", "newrow", ",", "newcol", ")", "\n", "newletter", "=", "desc", "[", "newrow", ",", "newcol", "]", "\n", "done", "=", "bytes", "(", "newletter", ")", "in", "b'GH'", "\n", "rew", "=", "float", "(", "newletter", "==", "b'G'", ")", "\n", "li", ".", "append", "(", "(", "1.0", "/", "3.0", ",", "newstate", ",", "rew", ",", "done", ")", ")", "\n", "", "", "else", ":", "\n", "                            ", "newrow", ",", "newcol", "=", "inc", "(", "row", ",", "col", ",", "a", ")", "\n", "newstate", "=", "to_s", "(", "newrow", ",", "newcol", ")", "\n", "newletter", "=", "desc", "[", "newrow", ",", "newcol", "]", "\n", "done", "=", "bytes", "(", "newletter", ")", "in", "b'GH'", "\n", "rew", "=", "float", "(", "newletter", "==", "b'G'", ")", "\n", "li", ".", "append", "(", "(", "1.0", ",", "newstate", ",", "rew", ",", "done", ")", ")", "\n", "\n", "", "", "", "", "", "super", "(", "FrozenLakeEnv", ",", "self", ")", ".", "__init__", "(", "nS", ",", "nA", ",", "P", ",", "isd", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_text.frozen_lake.FrozenLakeEnv._render": [[116, 132], ["frozen_lake.FrozenLakeEnv.desc.tolist", "environments.mujoco.rand_param_envs.gym.utils.colorize", "outfile.write", "six.StringIO", "outfile.write", "outfile.write", "c.decode"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.utils.colorize.colorize", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.decode"], ["", "def", "_render", "(", "self", ",", "mode", "=", "'human'", ",", "close", "=", "False", ")", ":", "\n", "        ", "if", "close", ":", "\n", "            ", "return", "\n", "", "outfile", "=", "StringIO", "(", ")", "if", "mode", "==", "'ansi'", "else", "sys", ".", "stdout", "\n", "\n", "row", ",", "col", "=", "self", ".", "s", "//", "self", ".", "ncol", ",", "self", ".", "s", "%", "self", ".", "ncol", "\n", "desc", "=", "self", ".", "desc", ".", "tolist", "(", ")", "\n", "desc", "=", "[", "[", "c", ".", "decode", "(", "'utf-8'", ")", "for", "c", "in", "line", "]", "for", "line", "in", "desc", "]", "\n", "desc", "[", "row", "]", "[", "col", "]", "=", "utils", ".", "colorize", "(", "desc", "[", "row", "]", "[", "col", "]", ",", "\"red\"", ",", "highlight", "=", "True", ")", "\n", "if", "self", ".", "lastaction", "is", "not", "None", ":", "\n", "            ", "outfile", ".", "write", "(", "\"  ({})\\n\"", ".", "format", "(", "[", "\"Left\"", ",", "\"Down\"", ",", "\"Right\"", ",", "\"Up\"", "]", "[", "self", ".", "lastaction", "]", ")", ")", "\n", "", "else", ":", "\n", "            ", "outfile", ".", "write", "(", "\"\\n\"", ")", "\n", "", "outfile", ".", "write", "(", "\"\\n\"", ".", "join", "(", "''", ".", "join", "(", "line", ")", "for", "line", "in", "desc", ")", "+", "\"\\n\"", ")", "\n", "\n", "return", "outfile", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_text.discrete.DiscreteEnv.__init__": [[31, 43], ["environments.mujoco.rand_param_envs.gym.spaces.Discrete", "environments.mujoco.rand_param_envs.gym.spaces.Discrete", "discrete.DiscreteEnv._seed", "discrete.DiscreteEnv._reset"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.algorithmic.algorithmic_env.AlgorithmicEnv._seed", "home.repos.pwc.inspect_result.Rondorf_BOReL.wrappers.monitoring.Monitor._reset"], ["def", "__init__", "(", "self", ",", "nS", ",", "nA", ",", "P", ",", "isd", ")", ":", "\n", "        ", "self", ".", "P", "=", "P", "\n", "self", ".", "isd", "=", "isd", "\n", "self", ".", "lastaction", "=", "None", "# for rendering", "\n", "self", ".", "nS", "=", "nS", "\n", "self", ".", "nA", "=", "nA", "\n", "\n", "self", ".", "action_space", "=", "spaces", ".", "Discrete", "(", "self", ".", "nA", ")", "\n", "self", ".", "observation_space", "=", "spaces", ".", "Discrete", "(", "self", ".", "nS", ")", "\n", "\n", "self", ".", "_seed", "(", ")", "\n", "self", ".", "_reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_text.discrete.DiscreteEnv._seed": [[44, 47], ["environments.mujoco.rand_param_envs.gym.utils.seeding.np_random"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.utils.seeding.np_random"], ["", "def", "_seed", "(", "self", ",", "seed", "=", "None", ")", ":", "\n", "        ", "self", ".", "np_random", ",", "seed", "=", "seeding", ".", "np_random", "(", "seed", ")", "\n", "return", "[", "seed", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_text.discrete.DiscreteEnv._reset": [[48, 52], ["discrete.categorical_sample"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.toy_text.discrete.categorical_sample"], ["", "def", "_reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "s", "=", "categorical_sample", "(", "self", ".", "isd", ",", "self", ".", "np_random", ")", "\n", "self", ".", "lastaction", "=", "None", "\n", "return", "self", ".", "s", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_text.discrete.DiscreteEnv._step": [[53, 60], ["discrete.categorical_sample"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.toy_text.discrete.categorical_sample"], ["", "def", "_step", "(", "self", ",", "a", ")", ":", "\n", "        ", "transitions", "=", "self", ".", "P", "[", "self", ".", "s", "]", "[", "a", "]", "\n", "i", "=", "categorical_sample", "(", "[", "t", "[", "0", "]", "for", "t", "in", "transitions", "]", ",", "self", ".", "np_random", ")", "\n", "p", ",", "s", ",", "r", ",", "d", "=", "transitions", "[", "i", "]", "\n", "self", ".", "s", "=", "s", "\n", "self", ".", "lastaction", "=", "a", "\n", "return", "(", "s", ",", "r", ",", "d", ",", "{", "\"prob\"", ":", "p", "}", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_text.discrete.categorical_sample": [[6, 14], ["numpy.asarray", "numpy.cumsum", "np_random.rand"], "function", ["None"], ["def", "categorical_sample", "(", "prob_n", ",", "np_random", ")", ":", "\n", "    ", "\"\"\"\n    Sample from categorical distribution\n    Each row specifies class probabilities\n    \"\"\"", "\n", "prob_n", "=", "np", ".", "asarray", "(", "prob_n", ")", "\n", "csprob_n", "=", "np", ".", "cumsum", "(", "prob_n", ")", "\n", "return", "(", "csprob_n", ">", "np_random", ".", "rand", "(", ")", ")", ".", "argmax", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_text.guessing_game.GuessingGame.__init__": [[39, 53], ["environments.mujoco.rand_param_envs.gym.spaces.Box", "environments.mujoco.rand_param_envs.gym.spaces.Discrete", "guessing_game.GuessingGame._seed", "guessing_game.GuessingGame._reset", "numpy.array", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.algorithmic.algorithmic_env.AlgorithmicEnv._seed", "home.repos.pwc.inspect_result.Rondorf_BOReL.wrappers.monitoring.Monitor._reset"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "range", "=", "1000", "# Randomly selected number is within +/- this value", "\n", "self", ".", "bounds", "=", "10000", "\n", "\n", "self", ".", "action_space", "=", "spaces", ".", "Box", "(", "low", "=", "np", ".", "array", "(", "[", "-", "self", ".", "bounds", "]", ")", ",", "high", "=", "np", ".", "array", "(", "[", "self", ".", "bounds", "]", ")", ")", "\n", "self", ".", "observation_space", "=", "spaces", ".", "Discrete", "(", "4", ")", "\n", "\n", "self", ".", "number", "=", "0", "\n", "self", ".", "guess_count", "=", "0", "\n", "self", ".", "guess_max", "=", "200", "\n", "self", ".", "observation", "=", "0", "\n", "\n", "self", ".", "_seed", "(", ")", "\n", "self", ".", "_reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_text.guessing_game.GuessingGame._seed": [[54, 57], ["environments.mujoco.rand_param_envs.gym.utils.seeding.np_random"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.utils.seeding.np_random"], ["", "def", "_seed", "(", "self", ",", "seed", "=", "None", ")", ":", "\n", "        ", "self", ".", "np_random", ",", "seed", "=", "seeding", ".", "np_random", "(", "seed", ")", "\n", "return", "[", "seed", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_text.guessing_game.GuessingGame._step": [[58, 82], ["guessing_game.GuessingGame.action_space.contains"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.spaces.discrete.Discrete.contains"], ["", "def", "_step", "(", "self", ",", "action", ")", ":", "\n", "        ", "assert", "self", ".", "action_space", ".", "contains", "(", "action", ")", "\n", "\n", "if", "action", "<", "self", ".", "number", ":", "\n", "            ", "self", ".", "observation", "=", "1", "\n", "\n", "", "elif", "action", "==", "self", ".", "number", ":", "\n", "            ", "self", ".", "observation", "=", "2", "\n", "\n", "", "elif", "action", ">", "self", ".", "number", ":", "\n", "            ", "self", ".", "observation", "=", "3", "\n", "\n", "", "reward", "=", "0", "\n", "done", "=", "False", "\n", "\n", "if", "(", "self", ".", "number", "-", "self", ".", "range", "*", "0.01", ")", "<", "action", "<", "(", "self", ".", "number", "+", "self", ".", "range", "*", "0.01", ")", ":", "\n", "            ", "reward", "=", "1", "\n", "done", "=", "True", "\n", "\n", "", "self", ".", "guess_count", "+=", "1", "\n", "if", "self", ".", "guess_count", ">=", "self", ".", "guess_max", ":", "\n", "            ", "done", "=", "True", "\n", "\n", "", "return", "self", ".", "observation", ",", "reward", ",", "done", ",", "{", "\"number\"", ":", "self", ".", "number", ",", "\"guesses\"", ":", "self", ".", "guess_count", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_text.guessing_game.GuessingGame._reset": [[83, 88], ["guessing_game.GuessingGame.np_random.uniform"], "methods", ["None"], ["", "def", "_reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "number", "=", "self", ".", "np_random", ".", "uniform", "(", "-", "self", ".", "range", ",", "self", ".", "range", ")", "\n", "self", ".", "guess_count", "=", "0", "\n", "self", ".", "observation", "=", "0", "\n", "return", "self", ".", "observation", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.rendering.Viewer.__init__": [[46, 59], ["rendering.get_display", "pyglet.window.Window", "rendering.Transform", "glEnable", "glBlendFunc"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.rendering.get_display"], ["    ", "def", "__init__", "(", "self", ",", "width", ",", "height", ",", "display", "=", "None", ")", ":", "\n", "        ", "display", "=", "get_display", "(", "display", ")", "\n", "\n", "self", ".", "width", "=", "width", "\n", "self", ".", "height", "=", "height", "\n", "self", ".", "window", "=", "pyglet", ".", "window", ".", "Window", "(", "width", "=", "width", ",", "height", "=", "height", ",", "display", "=", "display", ")", "\n", "self", ".", "window", ".", "on_close", "=", "self", ".", "window_closed_by_user", "\n", "self", ".", "geoms", "=", "[", "]", "\n", "self", ".", "onetime_geoms", "=", "[", "]", "\n", "self", ".", "transform", "=", "Transform", "(", ")", "\n", "\n", "glEnable", "(", "GL_BLEND", ")", "\n", "glBlendFunc", "(", "GL_SRC_ALPHA", ",", "GL_ONE_MINUS_SRC_ALPHA", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.rendering.Viewer.close": [[60, 62], ["rendering.Viewer.window.close"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.close"], ["", "def", "close", "(", "self", ")", ":", "\n", "        ", "self", ".", "window", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.rendering.Viewer.window_closed_by_user": [[63, 65], ["rendering.Viewer.close"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.close"], ["", "def", "window_closed_by_user", "(", "self", ")", ":", "\n", "        ", "self", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.rendering.Viewer.set_bounds": [[66, 73], ["rendering.Transform"], "methods", ["None"], ["", "def", "set_bounds", "(", "self", ",", "left", ",", "right", ",", "bottom", ",", "top", ")", ":", "\n", "        ", "assert", "right", ">", "left", "and", "top", ">", "bottom", "\n", "scalex", "=", "self", ".", "width", "/", "(", "right", "-", "left", ")", "\n", "scaley", "=", "self", ".", "height", "/", "(", "top", "-", "bottom", ")", "\n", "self", ".", "transform", "=", "Transform", "(", "\n", "translation", "=", "(", "-", "left", "*", "scalex", ",", "-", "bottom", "*", "scaley", ")", ",", "\n", "scale", "=", "(", "scalex", ",", "scaley", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.rendering.Viewer.add_geom": [[74, 76], ["rendering.Viewer.geoms.append"], "methods", ["None"], ["", "def", "add_geom", "(", "self", ",", "geom", ")", ":", "\n", "        ", "self", ".", "geoms", ".", "append", "(", "geom", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.rendering.Viewer.add_onetime": [[77, 79], ["rendering.Viewer.onetime_geoms.append"], "methods", ["None"], ["", "def", "add_onetime", "(", "self", ",", "geom", ")", ":", "\n", "        ", "self", ".", "onetime_geoms", ".", "append", "(", "geom", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.rendering.Viewer.render": [[80, 107], ["glClearColor", "rendering.Viewer.window.clear", "rendering.Viewer.window.switch_to", "rendering.Viewer.window.dispatch_events", "rendering.Viewer.transform.enable", "rendering.Viewer.transform.disable", "rendering.Viewer.window.flip", "geom.render", "geom.render", "pyglet.image.get_buffer_manager().get_color_buffer", "pyglet.image.get_buffer_manager().get_color_buffer.get_image_data", "numpy.fromstring", "arr.reshape.reshape.reshape", "pyglet.image.get_buffer_manager"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.data_management.simple_replay_buffer.SimpleReplayBuffer.clear", "home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.rendering.LineWidth.enable", "home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.rendering.LineStyle.disable", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.render", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.render"], ["", "def", "render", "(", "self", ",", "return_rgb_array", "=", "False", ")", ":", "\n", "        ", "glClearColor", "(", "1", ",", "1", ",", "1", ",", "1", ")", "\n", "self", ".", "window", ".", "clear", "(", ")", "\n", "self", ".", "window", ".", "switch_to", "(", ")", "\n", "self", ".", "window", ".", "dispatch_events", "(", ")", "\n", "self", ".", "transform", ".", "enable", "(", ")", "\n", "for", "geom", "in", "self", ".", "geoms", ":", "\n", "            ", "geom", ".", "render", "(", ")", "\n", "", "for", "geom", "in", "self", ".", "onetime_geoms", ":", "\n", "            ", "geom", ".", "render", "(", ")", "\n", "", "self", ".", "transform", ".", "disable", "(", ")", "\n", "arr", "=", "None", "\n", "if", "return_rgb_array", ":", "\n", "            ", "buffer", "=", "pyglet", ".", "image", ".", "get_buffer_manager", "(", ")", ".", "get_color_buffer", "(", ")", "\n", "image_data", "=", "buffer", ".", "get_image_data", "(", ")", "\n", "arr", "=", "np", ".", "fromstring", "(", "image_data", ".", "data", ",", "dtype", "=", "np", ".", "uint8", ",", "sep", "=", "''", ")", "\n", "# In https://github.com/openai/gym-http-api/issues/2, we", "\n", "# discovered that someone using Xmonad on Arch was having", "\n", "# a window of size 598 x 398, though a 600 x 400 window", "\n", "# was requested. (Guess Xmonad was preserving a pixel for", "\n", "# the boundary.) So we use the buffer height/width rather", "\n", "# than the requested one.", "\n", "arr", "=", "arr", ".", "reshape", "(", "buffer", ".", "height", ",", "buffer", ".", "width", ",", "4", ")", "\n", "arr", "=", "arr", "[", ":", ":", "-", "1", ",", ":", ",", "0", ":", "3", "]", "\n", "", "self", ".", "window", ".", "flip", "(", ")", "\n", "self", ".", "onetime_geoms", "=", "[", "]", "\n", "return", "arr", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.rendering.Viewer.draw_circle": [[109, 114], ["rendering.make_circle", "rendering._add_attrs", "rendering.Viewer.add_onetime"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.rendering.make_circle", "home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.rendering._add_attrs", "home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.rendering.Viewer.add_onetime"], ["", "def", "draw_circle", "(", "self", ",", "radius", "=", "10", ",", "res", "=", "30", ",", "filled", "=", "True", ",", "**", "attrs", ")", ":", "\n", "        ", "geom", "=", "make_circle", "(", "radius", "=", "radius", ",", "res", "=", "res", ",", "filled", "=", "filled", ")", "\n", "_add_attrs", "(", "geom", ",", "attrs", ")", "\n", "self", ".", "add_onetime", "(", "geom", ")", "\n", "return", "geom", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.rendering.Viewer.draw_polygon": [[115, 120], ["rendering.make_polygon", "rendering._add_attrs", "rendering.Viewer.add_onetime"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.rendering.make_polygon", "home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.rendering._add_attrs", "home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.rendering.Viewer.add_onetime"], ["", "def", "draw_polygon", "(", "self", ",", "v", ",", "filled", "=", "True", ",", "**", "attrs", ")", ":", "\n", "        ", "geom", "=", "make_polygon", "(", "v", "=", "v", ",", "filled", "=", "filled", ")", "\n", "_add_attrs", "(", "geom", ",", "attrs", ")", "\n", "self", ".", "add_onetime", "(", "geom", ")", "\n", "return", "geom", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.rendering.Viewer.draw_polyline": [[121, 126], ["rendering.make_polyline", "rendering._add_attrs", "rendering.Viewer.add_onetime"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.rendering.make_polyline", "home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.rendering._add_attrs", "home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.rendering.Viewer.add_onetime"], ["", "def", "draw_polyline", "(", "self", ",", "v", ",", "**", "attrs", ")", ":", "\n", "        ", "geom", "=", "make_polyline", "(", "v", "=", "v", ")", "\n", "_add_attrs", "(", "geom", ",", "attrs", ")", "\n", "self", ".", "add_onetime", "(", "geom", ")", "\n", "return", "geom", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.rendering.Viewer.draw_line": [[127, 132], ["rendering.Line", "rendering._add_attrs", "rendering.Viewer.add_onetime"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.rendering._add_attrs", "home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.rendering.Viewer.add_onetime"], ["", "def", "draw_line", "(", "self", ",", "start", ",", "end", ",", "**", "attrs", ")", ":", "\n", "        ", "geom", "=", "Line", "(", "start", ",", "end", ")", "\n", "_add_attrs", "(", "geom", ",", "attrs", ")", "\n", "self", ".", "add_onetime", "(", "geom", ")", "\n", "return", "geom", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.rendering.Viewer.get_array": [[133, 140], ["rendering.Viewer.window.flip", "pyglet.image.get_buffer_manager().get_color_buffer().get_image_data", "rendering.Viewer.window.flip", "numpy.fromstring", "arr.reshape.reshape.reshape", "pyglet.image.get_buffer_manager().get_color_buffer", "pyglet.image.get_buffer_manager"], "methods", ["None"], ["", "def", "get_array", "(", "self", ")", ":", "\n", "        ", "self", ".", "window", ".", "flip", "(", ")", "\n", "image_data", "=", "pyglet", ".", "image", ".", "get_buffer_manager", "(", ")", ".", "get_color_buffer", "(", ")", ".", "get_image_data", "(", ")", "\n", "self", ".", "window", ".", "flip", "(", ")", "\n", "arr", "=", "np", ".", "fromstring", "(", "image_data", ".", "data", ",", "dtype", "=", "np", ".", "uint8", ",", "sep", "=", "''", ")", "\n", "arr", "=", "arr", ".", "reshape", "(", "self", ".", "height", ",", "self", ".", "width", ",", "4", ")", "\n", "return", "arr", "[", ":", ":", "-", "1", ",", ":", ",", "0", ":", "3", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.rendering.Geom.__init__": [[148, 151], ["rendering.Color"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "_color", "=", "Color", "(", "(", "0", ",", "0", ",", "0", ",", "1.0", ")", ")", "\n", "self", ".", "attrs", "=", "[", "self", ".", "_color", "]", "\n", "", "def", "render", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.rendering.Geom.render": [[151, 157], ["reversed", "rendering.Geom.render1", "attr.enable", "attr.disable"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.rendering.Image.render1", "home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.rendering.LineWidth.enable", "home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.rendering.LineStyle.disable"], ["", "def", "render", "(", "self", ")", ":", "\n", "        ", "for", "attr", "in", "reversed", "(", "self", ".", "attrs", ")", ":", "\n", "            ", "attr", ".", "enable", "(", ")", "\n", "", "self", ".", "render1", "(", ")", "\n", "for", "attr", "in", "self", ".", "attrs", ":", "\n", "            ", "attr", ".", "disable", "(", ")", "\n", "", "", "def", "render1", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.rendering.Geom.render1": [[157, 159], ["None"], "methods", ["None"], ["", "", "def", "render1", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "", "def", "add_attr", "(", "self", ",", "attr", ")", ":", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.rendering.Geom.add_attr": [[159, 161], ["rendering.Geom.attrs.append"], "methods", ["None"], ["", "def", "add_attr", "(", "self", ",", "attr", ")", ":", "\n", "        ", "self", ".", "attrs", ".", "append", "(", "attr", ")", "\n", "", "def", "set_color", "(", "self", ",", "r", ",", "g", ",", "b", ")", ":", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.rendering.Geom.set_color": [[161, 163], ["None"], "methods", ["None"], ["", "def", "set_color", "(", "self", ",", "r", ",", "g", ",", "b", ")", ":", "\n", "        ", "self", ".", "_color", ".", "vec4", "=", "(", "r", ",", "g", ",", "b", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.rendering.Attr.enable": [[165, 167], ["None"], "methods", ["None"], ["    ", "def", "enable", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "", "def", "disable", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.rendering.Attr.disable": [[167, 169], ["None"], "methods", ["None"], ["", "def", "disable", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.rendering.Transform.__init__": [[171, 175], ["rendering.Transform.set_translation", "rendering.Transform.set_rotation", "rendering.Transform.set_scale"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.rendering.Transform.set_translation", "home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.rendering.Transform.set_rotation", "home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.rendering.Transform.set_scale"], ["    ", "def", "__init__", "(", "self", ",", "translation", "=", "(", "0.0", ",", "0.0", ")", ",", "rotation", "=", "0.0", ",", "scale", "=", "(", "1", ",", "1", ")", ")", ":", "\n", "        ", "self", ".", "set_translation", "(", "*", "translation", ")", "\n", "self", ".", "set_rotation", "(", "rotation", ")", "\n", "self", ".", "set_scale", "(", "*", "scale", ")", "\n", "", "def", "enable", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.rendering.Transform.enable": [[175, 180], ["glPushMatrix", "glTranslatef", "glRotatef", "glScalef"], "methods", ["None"], ["", "def", "enable", "(", "self", ")", ":", "\n", "        ", "glPushMatrix", "(", ")", "\n", "glTranslatef", "(", "self", ".", "translation", "[", "0", "]", ",", "self", ".", "translation", "[", "1", "]", ",", "0", ")", "# translate to GL loc ppint", "\n", "glRotatef", "(", "RAD2DEG", "*", "self", ".", "rotation", ",", "0", ",", "0", ",", "1.0", ")", "\n", "glScalef", "(", "self", ".", "scale", "[", "0", "]", ",", "self", ".", "scale", "[", "1", "]", ",", "1", ")", "\n", "", "def", "disable", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.rendering.Transform.disable": [[180, 182], ["glPopMatrix"], "methods", ["None"], ["", "def", "disable", "(", "self", ")", ":", "\n", "        ", "glPopMatrix", "(", ")", "\n", "", "def", "set_translation", "(", "self", ",", "newx", ",", "newy", ")", ":", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.rendering.Transform.set_translation": [[182, 184], ["float", "float"], "methods", ["None"], ["", "def", "set_translation", "(", "self", ",", "newx", ",", "newy", ")", ":", "\n", "        ", "self", ".", "translation", "=", "(", "float", "(", "newx", ")", ",", "float", "(", "newy", ")", ")", "\n", "", "def", "set_rotation", "(", "self", ",", "new", ")", ":", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.rendering.Transform.set_rotation": [[184, 186], ["float"], "methods", ["None"], ["", "def", "set_rotation", "(", "self", ",", "new", ")", ":", "\n", "        ", "self", ".", "rotation", "=", "float", "(", "new", ")", "\n", "", "def", "set_scale", "(", "self", ",", "newx", ",", "newy", ")", ":", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.rendering.Transform.set_scale": [[186, 188], ["float", "float"], "methods", ["None"], ["", "def", "set_scale", "(", "self", ",", "newx", ",", "newy", ")", ":", "\n", "        ", "self", ".", "scale", "=", "(", "float", "(", "newx", ")", ",", "float", "(", "newy", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.rendering.Color.__init__": [[190, 192], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "vec4", ")", ":", "\n", "        ", "self", ".", "vec4", "=", "vec4", "\n", "", "def", "enable", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.rendering.Color.enable": [[192, 194], ["glColor4f"], "methods", ["None"], ["", "def", "enable", "(", "self", ")", ":", "\n", "        ", "glColor4f", "(", "*", "self", ".", "vec4", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.rendering.LineStyle.__init__": [[196, 198], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "style", ")", ":", "\n", "        ", "self", ".", "style", "=", "style", "\n", "", "def", "enable", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.rendering.LineStyle.enable": [[198, 201], ["glEnable", "glLineStipple"], "methods", ["None"], ["", "def", "enable", "(", "self", ")", ":", "\n", "        ", "glEnable", "(", "GL_LINE_STIPPLE", ")", "\n", "glLineStipple", "(", "1", ",", "self", ".", "style", ")", "\n", "", "def", "disable", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.rendering.LineStyle.disable": [[201, 203], ["glDisable"], "methods", ["None"], ["", "def", "disable", "(", "self", ")", ":", "\n", "        ", "glDisable", "(", "GL_LINE_STIPPLE", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.rendering.LineWidth.__init__": [[205, 207], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "stroke", ")", ":", "\n", "        ", "self", ".", "stroke", "=", "stroke", "\n", "", "def", "enable", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.rendering.LineWidth.enable": [[207, 209], ["glLineWidth"], "methods", ["None"], ["", "def", "enable", "(", "self", ")", ":", "\n", "        ", "glLineWidth", "(", "self", ".", "stroke", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.rendering.Point.__init__": [[211, 213], ["rendering.Geom.__init__"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "Geom", ".", "__init__", "(", "self", ")", "\n", "", "def", "render1", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.rendering.Point.render1": [[213, 217], ["glBegin", "glVertex3f", "glEnd"], "methods", ["None"], ["", "def", "render1", "(", "self", ")", ":", "\n", "        ", "glBegin", "(", "GL_POINTS", ")", "# draw point", "\n", "glVertex3f", "(", "0.0", ",", "0.0", ",", "0.0", ")", "\n", "glEnd", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.rendering.FilledPolygon.__init__": [[219, 222], ["rendering.Geom.__init__"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.__init__"], ["    ", "def", "__init__", "(", "self", ",", "v", ")", ":", "\n", "        ", "Geom", ".", "__init__", "(", "self", ")", "\n", "self", ".", "v", "=", "v", "\n", "", "def", "render1", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.rendering.FilledPolygon.render1": [[222, 229], ["glEnd", "len", "glBegin", "glVertex3f", "len", "glBegin", "glBegin"], "methods", ["None"], ["", "def", "render1", "(", "self", ")", ":", "\n", "        ", "if", "len", "(", "self", ".", "v", ")", "==", "4", ":", "glBegin", "(", "GL_QUADS", ")", "\n", "elif", "len", "(", "self", ".", "v", ")", ">", "4", ":", "glBegin", "(", "GL_POLYGON", ")", "\n", "else", ":", "glBegin", "(", "GL_TRIANGLES", ")", "\n", "for", "p", "in", "self", ".", "v", ":", "\n", "            ", "glVertex3f", "(", "p", "[", "0", "]", ",", "p", "[", "1", "]", ",", "0", ")", "# draw each vertex", "\n", "", "glEnd", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.rendering.Compound.__init__": [[257, 262], ["rendering.Geom.__init__", "isinstance"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.__init__"], ["    ", "def", "__init__", "(", "self", ",", "gs", ")", ":", "\n", "        ", "Geom", ".", "__init__", "(", "self", ")", "\n", "self", ".", "gs", "=", "gs", "\n", "for", "g", "in", "self", ".", "gs", ":", "\n", "            ", "g", ".", "attrs", "=", "[", "a", "for", "a", "in", "g", ".", "attrs", "if", "not", "isinstance", "(", "a", ",", "Color", ")", "]", "\n", "", "", "def", "render1", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.rendering.Compound.render1": [[262, 265], ["g.render"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.render"], ["", "", "def", "render1", "(", "self", ")", ":", "\n", "        ", "for", "g", "in", "self", ".", "gs", ":", "\n", "            ", "g", ".", "render", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.rendering.PolyLine.__init__": [[267, 273], ["rendering.Geom.__init__", "rendering.LineWidth", "rendering.PolyLine.add_attr"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.__init__", "home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.rendering.Geom.add_attr"], ["    ", "def", "__init__", "(", "self", ",", "v", ",", "close", ")", ":", "\n", "        ", "Geom", ".", "__init__", "(", "self", ")", "\n", "self", ".", "v", "=", "v", "\n", "self", ".", "close", "=", "close", "\n", "self", ".", "linewidth", "=", "LineWidth", "(", "1", ")", "\n", "self", ".", "add_attr", "(", "self", ".", "linewidth", ")", "\n", "", "def", "render1", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.rendering.PolyLine.render1": [[273, 278], ["glBegin", "glEnd", "glVertex3f"], "methods", ["None"], ["", "def", "render1", "(", "self", ")", ":", "\n", "        ", "glBegin", "(", "GL_LINE_LOOP", "if", "self", ".", "close", "else", "GL_LINE_STRIP", ")", "\n", "for", "p", "in", "self", ".", "v", ":", "\n", "            ", "glVertex3f", "(", "p", "[", "0", "]", ",", "p", "[", "1", "]", ",", "0", ")", "# draw each vertex", "\n", "", "glEnd", "(", ")", "\n", "", "def", "set_linewidth", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.rendering.PolyLine.set_linewidth": [[278, 280], ["None"], "methods", ["None"], ["", "def", "set_linewidth", "(", "self", ",", "x", ")", ":", "\n", "        ", "self", ".", "linewidth", ".", "stroke", "=", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.rendering.Line.__init__": [[282, 288], ["rendering.Geom.__init__", "rendering.LineWidth", "rendering.Line.add_attr"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.__init__", "home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.rendering.Geom.add_attr"], ["    ", "def", "__init__", "(", "self", ",", "start", "=", "(", "0.0", ",", "0.0", ")", ",", "end", "=", "(", "0.0", ",", "0.0", ")", ")", ":", "\n", "        ", "Geom", ".", "__init__", "(", "self", ")", "\n", "self", ".", "start", "=", "start", "\n", "self", ".", "end", "=", "end", "\n", "self", ".", "linewidth", "=", "LineWidth", "(", "1", ")", "\n", "self", ".", "add_attr", "(", "self", ".", "linewidth", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.rendering.Line.render1": [[289, 294], ["glBegin", "glVertex2f", "glVertex2f", "glEnd"], "methods", ["None"], ["", "def", "render1", "(", "self", ")", ":", "\n", "        ", "glBegin", "(", "GL_LINES", ")", "\n", "glVertex2f", "(", "*", "self", ".", "start", ")", "\n", "glVertex2f", "(", "*", "self", ".", "end", ")", "\n", "glEnd", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.rendering.Image.__init__": [[296, 303], ["rendering.Geom.__init__", "pyglet.image.load"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.__init__", "home.repos.pwc.inspect_result.Rondorf_BOReL.envs.registration.load"], ["    ", "def", "__init__", "(", "self", ",", "fname", ",", "width", ",", "height", ")", ":", "\n", "        ", "Geom", ".", "__init__", "(", "self", ")", "\n", "self", ".", "width", "=", "width", "\n", "self", ".", "height", "=", "height", "\n", "img", "=", "pyglet", ".", "image", ".", "load", "(", "fname", ")", "\n", "self", ".", "img", "=", "img", "\n", "self", ".", "flip", "=", "False", "\n", "", "def", "render1", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.rendering.Image.render1": [[303, 305], ["rendering.Image.img.blit"], "methods", ["None"], ["", "def", "render1", "(", "self", ")", ":", "\n", "        ", "self", ".", "img", ".", "blit", "(", "-", "self", ".", "width", "/", "2", ",", "-", "self", ".", "height", "/", "2", ",", "width", "=", "self", ".", "width", ",", "height", "=", "self", ".", "height", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.rendering.SimpleImageViewer.__init__": [[309, 313], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "display", "=", "None", ")", ":", "\n", "        ", "self", ".", "window", "=", "None", "\n", "self", ".", "isopen", "=", "False", "\n", "self", ".", "display", "=", "display", "\n", "", "def", "imshow", "(", "self", ",", "arr", ")", ":", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.rendering.SimpleImageViewer.imshow": [[313, 327], ["pyglet.image.ImageData", "rendering.SimpleImageViewer.window.clear", "rendering.SimpleImageViewer.window.switch_to", "rendering.SimpleImageViewer.window.dispatch_events", "pyglet.image.ImageData.blit", "rendering.SimpleImageViewer.window.flip", "pyglet.window.Window", "arr.tobytes"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.data_management.simple_replay_buffer.SimpleReplayBuffer.clear"], ["", "def", "imshow", "(", "self", ",", "arr", ")", ":", "\n", "        ", "if", "self", ".", "window", "is", "None", ":", "\n", "            ", "height", ",", "width", ",", "channels", "=", "arr", ".", "shape", "\n", "self", ".", "window", "=", "pyglet", ".", "window", ".", "Window", "(", "width", "=", "width", ",", "height", "=", "height", ",", "display", "=", "self", ".", "display", ")", "\n", "self", ".", "width", "=", "width", "\n", "self", ".", "height", "=", "height", "\n", "self", ".", "isopen", "=", "True", "\n", "", "assert", "arr", ".", "shape", "==", "(", "self", ".", "height", ",", "self", ".", "width", ",", "3", ")", ",", "\"You passed in an image with the wrong number shape\"", "\n", "image", "=", "pyglet", ".", "image", ".", "ImageData", "(", "self", ".", "width", ",", "self", ".", "height", ",", "'RGB'", ",", "arr", ".", "tobytes", "(", ")", ",", "pitch", "=", "self", ".", "width", "*", "-", "3", ")", "\n", "self", ".", "window", ".", "clear", "(", ")", "\n", "self", ".", "window", ".", "switch_to", "(", ")", "\n", "self", ".", "window", ".", "dispatch_events", "(", ")", "\n", "image", ".", "blit", "(", "0", ",", "0", ")", "\n", "self", ".", "window", ".", "flip", "(", ")", "\n", "", "def", "close", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.rendering.SimpleImageViewer.close": [[327, 331], ["rendering.SimpleImageViewer.window.close"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.close"], ["", "def", "close", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "isopen", ":", "\n", "            ", "self", ".", "window", ".", "close", "(", ")", "\n", "self", ".", "isopen", "=", "False", "\n", "", "", "def", "__del__", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.rendering.SimpleImageViewer.__del__": [[331, 333], ["rendering.SimpleImageViewer.close"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.close"], ["", "", "def", "__del__", "(", "self", ")", ":", "\n", "        ", "self", ".", "close", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.rendering.get_display": [[32, 44], ["isinstance", "pyglet.canvas.Display", "environments.mujoco.rand_param_envs.gym.error.Error"], "function", ["None"], ["def", "get_display", "(", "spec", ")", ":", "\n", "    ", "\"\"\"Convert a display specification (such as :0) into an actual Display\n    object.\n\n    Pyglet only supports multiple Displays on Linux.\n    \"\"\"", "\n", "if", "spec", "is", "None", ":", "\n", "        ", "return", "None", "\n", "", "elif", "isinstance", "(", "spec", ",", "six", ".", "string_types", ")", ":", "\n", "        ", "return", "pyglet", ".", "canvas", ".", "Display", "(", "spec", ")", "\n", "", "else", ":", "\n", "        ", "raise", "error", ".", "Error", "(", "'Invalid display specification: {}. (Must be a string like :0 or None.)'", ".", "format", "(", "spec", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.rendering._add_attrs": [[141, 146], ["geom.set_color", "geom.set_linewidth"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.rendering.Geom.set_color", "home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.rendering.PolyLine.set_linewidth"], ["", "", "def", "_add_attrs", "(", "geom", ",", "attrs", ")", ":", "\n", "    ", "if", "\"color\"", "in", "attrs", ":", "\n", "        ", "geom", ".", "set_color", "(", "*", "attrs", "[", "\"color\"", "]", ")", "\n", "", "if", "\"linewidth\"", "in", "attrs", ":", "\n", "        ", "geom", ".", "set_linewidth", "(", "attrs", "[", "\"linewidth\"", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.rendering.make_circle": [[230, 239], ["range", "points.append", "rendering.FilledPolygon", "rendering.PolyLine", "math.cos", "math.sin"], "function", ["None"], ["", "", "def", "make_circle", "(", "radius", "=", "10", ",", "res", "=", "30", ",", "filled", "=", "True", ")", ":", "\n", "    ", "points", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "res", ")", ":", "\n", "        ", "ang", "=", "2", "*", "math", ".", "pi", "*", "i", "/", "res", "\n", "points", ".", "append", "(", "(", "math", ".", "cos", "(", "ang", ")", "*", "radius", ",", "math", ".", "sin", "(", "ang", ")", "*", "radius", ")", ")", "\n", "", "if", "filled", ":", "\n", "        ", "return", "FilledPolygon", "(", "points", ")", "\n", "", "else", ":", "\n", "        ", "return", "PolyLine", "(", "points", ",", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.rendering.make_polygon": [[240, 243], ["rendering.FilledPolygon", "rendering.PolyLine"], "function", ["None"], ["", "", "def", "make_polygon", "(", "v", ",", "filled", "=", "True", ")", ":", "\n", "    ", "if", "filled", ":", "return", "FilledPolygon", "(", "v", ")", "\n", "else", ":", "return", "PolyLine", "(", "v", ",", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.rendering.make_polyline": [[244, 246], ["rendering.PolyLine"], "function", ["None"], ["", "def", "make_polyline", "(", "v", ")", ":", "\n", "    ", "return", "PolyLine", "(", "v", ",", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.rendering.make_capsule": [[247, 255], ["rendering.make_polygon", "rendering.make_circle", "rendering.make_circle", "make_circle.add_attr", "rendering.Compound", "rendering.Transform"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.rendering.make_polygon", "home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.rendering.make_circle", "home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.rendering.make_circle", "home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.rendering.Geom.add_attr"], ["", "def", "make_capsule", "(", "length", ",", "width", ")", ":", "\n", "    ", "l", ",", "r", ",", "t", ",", "b", "=", "0", ",", "length", ",", "width", "/", "2", ",", "-", "width", "/", "2", "\n", "box", "=", "make_polygon", "(", "[", "(", "l", ",", "b", ")", ",", "(", "l", ",", "t", ")", ",", "(", "r", ",", "t", ")", ",", "(", "r", ",", "b", ")", "]", ")", "\n", "circ0", "=", "make_circle", "(", "width", "/", "2", ")", "\n", "circ1", "=", "make_circle", "(", "width", "/", "2", ")", "\n", "circ1", ".", "add_attr", "(", "Transform", "(", "translation", "=", "(", "length", ",", "0", ")", ")", ")", "\n", "geom", "=", "Compound", "(", "[", "box", ",", "circ0", ",", "circ1", "]", ")", "\n", "return", "geom", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.continuous_mountain_car.Continuous_MountainCarEnv.__init__": [[28, 47], ["numpy.array", "numpy.array", "environments.mujoco.rand_param_envs.gym.spaces.Box", "environments.mujoco.rand_param_envs.gym.spaces.Box", "continuous_mountain_car.Continuous_MountainCarEnv._seed", "continuous_mountain_car.Continuous_MountainCarEnv.reset"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.algorithmic.algorithmic_env.AlgorithmicEnv._seed", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.reset"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "min_action", "=", "-", "1.0", "\n", "self", ".", "max_action", "=", "1.0", "\n", "self", ".", "min_position", "=", "-", "1.2", "\n", "self", ".", "max_position", "=", "0.6", "\n", "self", ".", "max_speed", "=", "0.07", "\n", "self", ".", "goal_position", "=", "0.45", "# was 0.5 in gym, 0.45 in Arnaud de Broissia's version", "\n", "self", ".", "power", "=", "0.0015", "\n", "\n", "self", ".", "low_state", "=", "np", ".", "array", "(", "[", "self", ".", "min_position", ",", "-", "self", ".", "max_speed", "]", ")", "\n", "self", ".", "high_state", "=", "np", ".", "array", "(", "[", "self", ".", "max_position", ",", "self", ".", "max_speed", "]", ")", "\n", "\n", "self", ".", "viewer", "=", "None", "\n", "\n", "self", ".", "action_space", "=", "spaces", ".", "Box", "(", "self", ".", "min_action", ",", "self", ".", "max_action", ",", "shape", "=", "(", "1", ",", ")", ")", "\n", "self", ".", "observation_space", "=", "spaces", ".", "Box", "(", "self", ".", "low_state", ",", "self", ".", "high_state", ")", "\n", "\n", "self", ".", "_seed", "(", ")", "\n", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.continuous_mountain_car.Continuous_MountainCarEnv._seed": [[48, 51], ["environments.mujoco.rand_param_envs.gym.utils.seeding.np_random"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.utils.seeding.np_random"], ["", "def", "_seed", "(", "self", ",", "seed", "=", "None", ")", ":", "\n", "        ", "self", ".", "np_random", ",", "seed", "=", "seeding", ".", "np_random", "(", "seed", ")", "\n", "return", "[", "seed", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.continuous_mountain_car.Continuous_MountainCarEnv._step": [[52, 75], ["min", "bool", "numpy.array", "max", "math.pow", "math.cos"], "methods", ["None"], ["", "def", "_step", "(", "self", ",", "action", ")", ":", "\n", "\n", "        ", "position", "=", "self", ".", "state", "[", "0", "]", "\n", "velocity", "=", "self", ".", "state", "[", "1", "]", "\n", "force", "=", "min", "(", "max", "(", "action", "[", "0", "]", ",", "-", "1.0", ")", ",", "1.0", ")", "\n", "\n", "velocity", "+=", "force", "*", "self", ".", "power", "-", "0.0025", "*", "math", ".", "cos", "(", "3", "*", "position", ")", "\n", "if", "(", "velocity", ">", "self", ".", "max_speed", ")", ":", "velocity", "=", "self", ".", "max_speed", "\n", "if", "(", "velocity", "<", "-", "self", ".", "max_speed", ")", ":", "velocity", "=", "-", "self", ".", "max_speed", "\n", "position", "+=", "velocity", "\n", "if", "(", "position", ">", "self", ".", "max_position", ")", ":", "position", "=", "self", ".", "max_position", "\n", "if", "(", "position", "<", "self", ".", "min_position", ")", ":", "position", "=", "self", ".", "min_position", "\n", "if", "(", "position", "==", "self", ".", "min_position", "and", "velocity", "<", "0", ")", ":", "velocity", "=", "0", "\n", "\n", "done", "=", "bool", "(", "position", ">=", "self", ".", "goal_position", ")", "\n", "\n", "reward", "=", "0", "\n", "if", "done", ":", "\n", "            ", "reward", "=", "100.0", "\n", "", "reward", "-=", "math", ".", "pow", "(", "action", "[", "0", "]", ",", "2", ")", "*", "0.1", "\n", "\n", "self", ".", "state", "=", "np", ".", "array", "(", "[", "position", ",", "velocity", "]", ")", "\n", "return", "self", ".", "state", ",", "reward", ",", "done", ",", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.continuous_mountain_car.Continuous_MountainCarEnv._reset": [[76, 79], ["numpy.array", "numpy.array", "continuous_mountain_car.Continuous_MountainCarEnv.np_random.uniform"], "methods", ["None"], ["", "def", "_reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "state", "=", "np", ".", "array", "(", "[", "self", ".", "np_random", ".", "uniform", "(", "low", "=", "-", "0.6", ",", "high", "=", "-", "0.4", ")", ",", "0", "]", ")", "\n", "return", "np", ".", "array", "(", "self", ".", "state", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.continuous_mountain_car.Continuous_MountainCarEnv._height": [[83, 85], ["numpy.sin"], "methods", ["None"], ["", "def", "_height", "(", "self", ",", "xs", ")", ":", "\n", "        ", "return", "np", ".", "sin", "(", "3", "*", "xs", ")", "*", ".45", "+", ".55", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.continuous_mountain_car.Continuous_MountainCarEnv._render": [[86, 145], ["continuous_mountain_car.Continuous_MountainCarEnv.cartrans.set_translation", "continuous_mountain_car.Continuous_MountainCarEnv.cartrans.set_rotation", "continuous_mountain_car.Continuous_MountainCarEnv.viewer.render", "rendering.Viewer", "numpy.linspace", "continuous_mountain_car.Continuous_MountainCarEnv._height", "list", "rendering.make_polyline", "continuous_mountain_car.Continuous_MountainCarEnv.track.set_linewidth", "continuous_mountain_car.Continuous_MountainCarEnv.viewer.add_geom", "rendering.FilledPolygon", "rendering.FilledPolygon.add_attr", "rendering.Transform", "rendering.FilledPolygon.add_attr", "continuous_mountain_car.Continuous_MountainCarEnv.viewer.add_geom", "rendering.make_circle", "rendering.make_circle.set_color", "rendering.make_circle.add_attr", "rendering.make_circle.add_attr", "continuous_mountain_car.Continuous_MountainCarEnv.viewer.add_geom", "rendering.make_circle", "rendering.make_circle.add_attr", "rendering.make_circle.add_attr", "rendering.make_circle.set_color", "continuous_mountain_car.Continuous_MountainCarEnv.viewer.add_geom", "rendering.Line", "continuous_mountain_car.Continuous_MountainCarEnv.viewer.add_geom", "rendering.FilledPolygon", "rendering.FilledPolygon.set_color", "continuous_mountain_car.Continuous_MountainCarEnv.viewer.add_geom", "math.cos", "continuous_mountain_car.Continuous_MountainCarEnv.viewer.close", "zip", "rendering.Transform", "rendering.Transform", "rendering.Transform", "continuous_mountain_car.Continuous_MountainCarEnv._height", "continuous_mountain_car.Continuous_MountainCarEnv._height"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.rendering.Transform.set_translation", "home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.rendering.Transform.set_rotation", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.render", "home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.mountain_car.MountainCarEnv._height", "home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.ListableAPIResource.list", "home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.rendering.make_polyline", "home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.rendering.PolyLine.set_linewidth", "home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.rendering.Viewer.add_geom", "home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.rendering.Geom.add_attr", "home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.rendering.Geom.add_attr", "home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.rendering.Viewer.add_geom", "home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.rendering.make_circle", "home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.rendering.Geom.set_color", "home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.rendering.Geom.add_attr", "home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.rendering.Geom.add_attr", "home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.rendering.Viewer.add_geom", "home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.rendering.make_circle", "home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.rendering.Geom.add_attr", "home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.rendering.Geom.add_attr", "home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.rendering.Geom.set_color", "home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.rendering.Viewer.add_geom", "home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.rendering.Viewer.add_geom", "home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.rendering.Geom.set_color", "home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.rendering.Viewer.add_geom", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.close", "home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.mountain_car.MountainCarEnv._height", "home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.mountain_car.MountainCarEnv._height"], ["", "def", "_render", "(", "self", ",", "mode", "=", "'human'", ",", "close", "=", "False", ")", ":", "\n", "        ", "if", "close", ":", "\n", "            ", "if", "self", ".", "viewer", "is", "not", "None", ":", "\n", "                ", "self", ".", "viewer", ".", "close", "(", ")", "\n", "self", ".", "viewer", "=", "None", "\n", "", "return", "\n", "\n", "", "screen_width", "=", "600", "\n", "screen_height", "=", "400", "\n", "\n", "world_width", "=", "self", ".", "max_position", "-", "self", ".", "min_position", "\n", "scale", "=", "screen_width", "/", "world_width", "\n", "carwidth", "=", "40", "\n", "carheight", "=", "20", "\n", "\n", "\n", "if", "self", ".", "viewer", "is", "None", ":", "\n", "            ", "from", "environments", ".", "mujoco", ".", "rand_param_envs", ".", "gym", ".", "envs", ".", "classic_control", "import", "rendering", "\n", "self", ".", "viewer", "=", "rendering", ".", "Viewer", "(", "screen_width", ",", "screen_height", ")", "\n", "xs", "=", "np", ".", "linspace", "(", "self", ".", "min_position", ",", "self", ".", "max_position", ",", "100", ")", "\n", "ys", "=", "self", ".", "_height", "(", "xs", ")", "\n", "xys", "=", "list", "(", "zip", "(", "(", "xs", "-", "self", ".", "min_position", ")", "*", "scale", ",", "ys", "*", "scale", ")", ")", "\n", "\n", "self", ".", "track", "=", "rendering", ".", "make_polyline", "(", "xys", ")", "\n", "self", ".", "track", ".", "set_linewidth", "(", "4", ")", "\n", "self", ".", "viewer", ".", "add_geom", "(", "self", ".", "track", ")", "\n", "\n", "clearance", "=", "10", "\n", "\n", "l", ",", "r", ",", "t", ",", "b", "=", "-", "carwidth", "/", "2", ",", "carwidth", "/", "2", ",", "carheight", ",", "0", "\n", "car", "=", "rendering", ".", "FilledPolygon", "(", "[", "(", "l", ",", "b", ")", ",", "(", "l", ",", "t", ")", ",", "(", "r", ",", "t", ")", ",", "(", "r", ",", "b", ")", "]", ")", "\n", "car", ".", "add_attr", "(", "rendering", ".", "Transform", "(", "translation", "=", "(", "0", ",", "clearance", ")", ")", ")", "\n", "self", ".", "cartrans", "=", "rendering", ".", "Transform", "(", ")", "\n", "car", ".", "add_attr", "(", "self", ".", "cartrans", ")", "\n", "self", ".", "viewer", ".", "add_geom", "(", "car", ")", "\n", "frontwheel", "=", "rendering", ".", "make_circle", "(", "carheight", "/", "2.5", ")", "\n", "frontwheel", ".", "set_color", "(", ".5", ",", ".5", ",", ".5", ")", "\n", "frontwheel", ".", "add_attr", "(", "rendering", ".", "Transform", "(", "translation", "=", "(", "carwidth", "/", "4", ",", "clearance", ")", ")", ")", "\n", "frontwheel", ".", "add_attr", "(", "self", ".", "cartrans", ")", "\n", "self", ".", "viewer", ".", "add_geom", "(", "frontwheel", ")", "\n", "backwheel", "=", "rendering", ".", "make_circle", "(", "carheight", "/", "2.5", ")", "\n", "backwheel", ".", "add_attr", "(", "rendering", ".", "Transform", "(", "translation", "=", "(", "-", "carwidth", "/", "4", ",", "clearance", ")", ")", ")", "\n", "backwheel", ".", "add_attr", "(", "self", ".", "cartrans", ")", "\n", "backwheel", ".", "set_color", "(", ".5", ",", ".5", ",", ".5", ")", "\n", "self", ".", "viewer", ".", "add_geom", "(", "backwheel", ")", "\n", "flagx", "=", "(", "self", ".", "goal_position", "-", "self", ".", "min_position", ")", "*", "scale", "\n", "flagy1", "=", "self", ".", "_height", "(", "self", ".", "goal_position", ")", "*", "scale", "\n", "flagy2", "=", "flagy1", "+", "50", "\n", "flagpole", "=", "rendering", ".", "Line", "(", "(", "flagx", ",", "flagy1", ")", ",", "(", "flagx", ",", "flagy2", ")", ")", "\n", "self", ".", "viewer", ".", "add_geom", "(", "flagpole", ")", "\n", "flag", "=", "rendering", ".", "FilledPolygon", "(", "[", "(", "flagx", ",", "flagy2", ")", ",", "(", "flagx", ",", "flagy2", "-", "10", ")", ",", "(", "flagx", "+", "25", ",", "flagy2", "-", "5", ")", "]", ")", "\n", "flag", ".", "set_color", "(", ".8", ",", ".8", ",", "0", ")", "\n", "self", ".", "viewer", ".", "add_geom", "(", "flag", ")", "\n", "\n", "", "pos", "=", "self", ".", "state", "[", "0", "]", "\n", "self", ".", "cartrans", ".", "set_translation", "(", "(", "pos", "-", "self", ".", "min_position", ")", "*", "scale", ",", "self", ".", "_height", "(", "pos", ")", "*", "scale", ")", "\n", "self", ".", "cartrans", ".", "set_rotation", "(", "math", ".", "cos", "(", "3", "*", "pos", ")", ")", "\n", "\n", "return", "self", ".", "viewer", ".", "render", "(", "return_rgb_array", "=", "mode", "==", "'rgb_array'", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.pendulum.PendulumEnv.__init__": [[13, 24], ["numpy.array", "environments.mujoco.rand_param_envs.gym.spaces.Box", "environments.mujoco.rand_param_envs.gym.spaces.Box", "pendulum.PendulumEnv._seed"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.algorithmic.algorithmic_env.AlgorithmicEnv._seed"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "max_speed", "=", "8", "\n", "self", ".", "max_torque", "=", "2.", "\n", "self", ".", "dt", "=", ".05", "\n", "self", ".", "viewer", "=", "None", "\n", "\n", "high", "=", "np", ".", "array", "(", "[", "1.", ",", "1.", ",", "self", ".", "max_speed", "]", ")", "\n", "self", ".", "action_space", "=", "spaces", ".", "Box", "(", "low", "=", "-", "self", ".", "max_torque", ",", "high", "=", "self", ".", "max_torque", ",", "shape", "=", "(", "1", ",", ")", ")", "\n", "self", ".", "observation_space", "=", "spaces", ".", "Box", "(", "low", "=", "-", "high", ",", "high", "=", "high", ")", "\n", "\n", "self", ".", "_seed", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.pendulum.PendulumEnv._seed": [[25, 28], ["environments.mujoco.rand_param_envs.gym.utils.seeding.np_random"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.utils.seeding.np_random"], ["", "def", "_seed", "(", "self", ",", "seed", "=", "None", ")", ":", "\n", "        ", "self", ".", "np_random", ",", "seed", "=", "seeding", ".", "np_random", "(", "seed", ")", "\n", "return", "[", "seed", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.pendulum.PendulumEnv._step": [[29, 47], ["numpy.clip", "numpy.array", "numpy.clip", "pendulum.PendulumEnv._get_obs", "pendulum.angle_normalize", "numpy.sin"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.point_robot.PointEnv._get_obs", "home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.pendulum.angle_normalize"], ["", "def", "_step", "(", "self", ",", "u", ")", ":", "\n", "        ", "th", ",", "thdot", "=", "self", ".", "state", "# th := theta", "\n", "\n", "g", "=", "10.", "\n", "m", "=", "1.", "\n", "l", "=", "1.", "\n", "dt", "=", "self", ".", "dt", "\n", "\n", "u", "=", "np", ".", "clip", "(", "u", ",", "-", "self", ".", "max_torque", ",", "self", ".", "max_torque", ")", "[", "0", "]", "\n", "self", ".", "last_u", "=", "u", "# for rendering", "\n", "costs", "=", "angle_normalize", "(", "th", ")", "**", "2", "+", ".1", "*", "thdot", "**", "2", "+", ".001", "*", "(", "u", "**", "2", ")", "\n", "\n", "newthdot", "=", "thdot", "+", "(", "-", "3", "*", "g", "/", "(", "2", "*", "l", ")", "*", "np", ".", "sin", "(", "th", "+", "np", ".", "pi", ")", "+", "3.", "/", "(", "m", "*", "l", "**", "2", ")", "*", "u", ")", "*", "dt", "\n", "newth", "=", "th", "+", "newthdot", "*", "dt", "\n", "newthdot", "=", "np", ".", "clip", "(", "newthdot", ",", "-", "self", ".", "max_speed", ",", "self", ".", "max_speed", ")", "#pylint: disable=E1111", "\n", "\n", "self", ".", "state", "=", "np", ".", "array", "(", "[", "newth", ",", "newthdot", "]", ")", "\n", "return", "self", ".", "_get_obs", "(", ")", ",", "-", "costs", ",", "False", ",", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.pendulum.PendulumEnv._reset": [[48, 53], ["numpy.array", "pendulum.PendulumEnv.np_random.uniform", "pendulum.PendulumEnv._get_obs"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.point_robot.PointEnv._get_obs"], ["", "def", "_reset", "(", "self", ")", ":", "\n", "        ", "high", "=", "np", ".", "array", "(", "[", "np", ".", "pi", ",", "1", "]", ")", "\n", "self", ".", "state", "=", "self", ".", "np_random", ".", "uniform", "(", "low", "=", "-", "high", ",", "high", "=", "high", ")", "\n", "self", ".", "last_u", "=", "None", "\n", "return", "self", ".", "_get_obs", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.pendulum.PendulumEnv._get_obs": [[54, 57], ["numpy.array", "numpy.cos", "numpy.sin"], "methods", ["None"], ["", "def", "_get_obs", "(", "self", ")", ":", "\n", "        ", "theta", ",", "thetadot", "=", "self", ".", "state", "\n", "return", "np", ".", "array", "(", "[", "np", ".", "cos", "(", "theta", ")", ",", "np", ".", "sin", "(", "theta", ")", ",", "thetadot", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.pendulum.PendulumEnv._render": [[58, 88], ["pendulum.PendulumEnv.viewer.add_onetime", "pendulum.PendulumEnv.pole_transform.set_rotation", "pendulum.PendulumEnv.viewer.render", "rendering.Viewer", "pendulum.PendulumEnv.viewer.set_bounds", "rendering.make_capsule", "rendering.make_capsule.set_color", "rendering.Transform", "rendering.make_capsule.add_attr", "pendulum.PendulumEnv.viewer.add_geom", "rendering.make_circle", "rendering.make_circle.set_color", "pendulum.PendulumEnv.viewer.add_geom", "os.path.join", "rendering.Image", "rendering.Transform", "pendulum.PendulumEnv.img.add_attr", "pendulum.PendulumEnv.viewer.close", "os.path.dirname", "numpy.abs"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.rendering.Viewer.add_onetime", "home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.rendering.Transform.set_rotation", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.render", "home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.rendering.Viewer.set_bounds", "home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.rendering.make_capsule", "home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.rendering.Geom.set_color", "home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.rendering.Geom.add_attr", "home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.rendering.Viewer.add_geom", "home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.rendering.make_circle", "home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.rendering.Geom.set_color", "home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.rendering.Viewer.add_geom", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.join", "home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.rendering.Geom.add_attr", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.close"], ["", "def", "_render", "(", "self", ",", "mode", "=", "'human'", ",", "close", "=", "False", ")", ":", "\n", "        ", "if", "close", ":", "\n", "            ", "if", "self", ".", "viewer", "is", "not", "None", ":", "\n", "                ", "self", ".", "viewer", ".", "close", "(", ")", "\n", "self", ".", "viewer", "=", "None", "\n", "", "return", "\n", "\n", "", "if", "self", ".", "viewer", "is", "None", ":", "\n", "            ", "from", "environments", ".", "mujoco", ".", "rand_param_envs", ".", "gym", ".", "envs", ".", "classic_control", "import", "rendering", "\n", "self", ".", "viewer", "=", "rendering", ".", "Viewer", "(", "500", ",", "500", ")", "\n", "self", ".", "viewer", ".", "set_bounds", "(", "-", "2.2", ",", "2.2", ",", "-", "2.2", ",", "2.2", ")", "\n", "rod", "=", "rendering", ".", "make_capsule", "(", "1", ",", ".2", ")", "\n", "rod", ".", "set_color", "(", ".8", ",", ".3", ",", ".3", ")", "\n", "self", ".", "pole_transform", "=", "rendering", ".", "Transform", "(", ")", "\n", "rod", ".", "add_attr", "(", "self", ".", "pole_transform", ")", "\n", "self", ".", "viewer", ".", "add_geom", "(", "rod", ")", "\n", "axle", "=", "rendering", ".", "make_circle", "(", ".05", ")", "\n", "axle", ".", "set_color", "(", "0", ",", "0", ",", "0", ")", "\n", "self", ".", "viewer", ".", "add_geom", "(", "axle", ")", "\n", "fname", "=", "path", ".", "join", "(", "path", ".", "dirname", "(", "__file__", ")", ",", "\"assets/clockwise.png\"", ")", "\n", "self", ".", "img", "=", "rendering", ".", "Image", "(", "fname", ",", "1.", ",", "1.", ")", "\n", "self", ".", "imgtrans", "=", "rendering", ".", "Transform", "(", ")", "\n", "self", ".", "img", ".", "add_attr", "(", "self", ".", "imgtrans", ")", "\n", "\n", "", "self", ".", "viewer", ".", "add_onetime", "(", "self", ".", "img", ")", "\n", "self", ".", "pole_transform", ".", "set_rotation", "(", "self", ".", "state", "[", "0", "]", "+", "np", ".", "pi", "/", "2", ")", "\n", "if", "self", ".", "last_u", ":", "\n", "            ", "self", ".", "imgtrans", ".", "scale", "=", "(", "-", "self", ".", "last_u", "/", "2", ",", "np", ".", "abs", "(", "self", ".", "last_u", ")", "/", "2", ")", "\n", "\n", "", "return", "self", ".", "viewer", ".", "render", "(", "return_rgb_array", "=", "mode", "==", "'rgb_array'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.pendulum.angle_normalize": [[89, 91], ["None"], "function", ["None"], ["", "", "def", "angle_normalize", "(", "x", ")", ":", "\n", "    ", "return", "(", "(", "(", "x", "+", "np", ".", "pi", ")", "%", "(", "2", "*", "np", ".", "pi", ")", ")", "-", "np", ".", "pi", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.cartpole.CartPoleEnv.__init__": [[21, 50], ["numpy.array", "environments.mujoco.rand_param_envs.gym.spaces.Discrete", "environments.mujoco.rand_param_envs.gym.spaces.Box", "cartpole.CartPoleEnv._seed", "numpy.finfo", "numpy.finfo"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.algorithmic.algorithmic_env.AlgorithmicEnv._seed"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "gravity", "=", "9.8", "\n", "self", ".", "masscart", "=", "1.0", "\n", "self", ".", "masspole", "=", "0.1", "\n", "self", ".", "total_mass", "=", "(", "self", ".", "masspole", "+", "self", ".", "masscart", ")", "\n", "self", ".", "length", "=", "0.5", "# actually half the pole's length", "\n", "self", ".", "polemass_length", "=", "(", "self", ".", "masspole", "*", "self", ".", "length", ")", "\n", "self", ".", "force_mag", "=", "10.0", "\n", "self", ".", "tau", "=", "0.02", "# seconds between state updates", "\n", "\n", "# Angle at which to fail the episode", "\n", "self", ".", "theta_threshold_radians", "=", "12", "*", "2", "*", "math", ".", "pi", "/", "360", "\n", "self", ".", "x_threshold", "=", "2.4", "\n", "\n", "# Angle limit set to 2 * theta_threshold_radians so failing observation is still within bounds", "\n", "high", "=", "np", ".", "array", "(", "[", "\n", "self", ".", "x_threshold", "*", "2", ",", "\n", "np", ".", "finfo", "(", "np", ".", "float32", ")", ".", "max", ",", "\n", "self", ".", "theta_threshold_radians", "*", "2", ",", "\n", "np", ".", "finfo", "(", "np", ".", "float32", ")", ".", "max", "]", ")", "\n", "\n", "self", ".", "action_space", "=", "spaces", ".", "Discrete", "(", "2", ")", "\n", "self", ".", "observation_space", "=", "spaces", ".", "Box", "(", "-", "high", ",", "high", ")", "\n", "\n", "self", ".", "_seed", "(", ")", "\n", "self", ".", "viewer", "=", "None", "\n", "self", ".", "state", "=", "None", "\n", "\n", "self", ".", "steps_beyond_done", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.cartpole.CartPoleEnv._seed": [[51, 54], ["environments.mujoco.rand_param_envs.gym.utils.seeding.np_random"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.utils.seeding.np_random"], ["", "def", "_seed", "(", "self", ",", "seed", "=", "None", ")", ":", "\n", "        ", "self", ".", "np_random", ",", "seed", "=", "seeding", ".", "np_random", "(", "seed", ")", "\n", "return", "[", "seed", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.cartpole.CartPoleEnv._step": [[55, 89], ["cartpole.CartPoleEnv.action_space.contains", "math.cos", "math.sin", "bool", "numpy.array", "type", "logger.warning"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.spaces.discrete.Discrete.contains", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjvGeomWrapper.type"], ["", "def", "_step", "(", "self", ",", "action", ")", ":", "\n", "        ", "assert", "self", ".", "action_space", ".", "contains", "(", "action", ")", ",", "\"%r (%s) invalid\"", "%", "(", "action", ",", "type", "(", "action", ")", ")", "\n", "state", "=", "self", ".", "state", "\n", "x", ",", "x_dot", ",", "theta", ",", "theta_dot", "=", "state", "\n", "force", "=", "self", ".", "force_mag", "if", "action", "==", "1", "else", "-", "self", ".", "force_mag", "\n", "costheta", "=", "math", ".", "cos", "(", "theta", ")", "\n", "sintheta", "=", "math", ".", "sin", "(", "theta", ")", "\n", "temp", "=", "(", "force", "+", "self", ".", "polemass_length", "*", "theta_dot", "*", "theta_dot", "*", "sintheta", ")", "/", "self", ".", "total_mass", "\n", "thetaacc", "=", "(", "self", ".", "gravity", "*", "sintheta", "-", "costheta", "*", "temp", ")", "/", "(", "self", ".", "length", "*", "(", "4.0", "/", "3.0", "-", "self", ".", "masspole", "*", "costheta", "*", "costheta", "/", "self", ".", "total_mass", ")", ")", "\n", "xacc", "=", "temp", "-", "self", ".", "polemass_length", "*", "thetaacc", "*", "costheta", "/", "self", ".", "total_mass", "\n", "x", "=", "x", "+", "self", ".", "tau", "*", "x_dot", "\n", "x_dot", "=", "x_dot", "+", "self", ".", "tau", "*", "xacc", "\n", "theta", "=", "theta", "+", "self", ".", "tau", "*", "theta_dot", "\n", "theta_dot", "=", "theta_dot", "+", "self", ".", "tau", "*", "thetaacc", "\n", "self", ".", "state", "=", "(", "x", ",", "x_dot", ",", "theta", ",", "theta_dot", ")", "\n", "done", "=", "x", "<", "-", "self", ".", "x_threshold", "or", "x", ">", "self", ".", "x_threshold", "or", "theta", "<", "-", "self", ".", "theta_threshold_radians", "or", "theta", ">", "self", ".", "theta_threshold_radians", "\n", "done", "=", "bool", "(", "done", ")", "\n", "\n", "if", "not", "done", ":", "\n", "            ", "reward", "=", "1.0", "\n", "", "elif", "self", ".", "steps_beyond_done", "is", "None", ":", "\n", "# Pole just fell!", "\n", "            ", "self", ".", "steps_beyond_done", "=", "0", "\n", "reward", "=", "1.0", "\n", "", "else", ":", "\n", "            ", "if", "self", ".", "steps_beyond_done", "==", "0", ":", "\n", "                ", "logger", ".", "warning", "(", "\"You are calling 'step()' even though this environment has already returned done = True. You should always call 'reset()' once you receive 'done = True' -- any further steps are undefined behavior.\"", ")", "\n", "", "self", ".", "steps_beyond_done", "+=", "1", "\n", "reward", "=", "0.0", "\n", "\n", "", "return", "np", ".", "array", "(", "self", ".", "state", ")", ",", "reward", ",", "done", ",", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.cartpole.CartPoleEnv._reset": [[90, 94], ["cartpole.CartPoleEnv.np_random.uniform", "numpy.array"], "methods", ["None"], ["", "def", "_reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "state", "=", "self", ".", "np_random", ".", "uniform", "(", "low", "=", "-", "0.05", ",", "high", "=", "0.05", ",", "size", "=", "(", "4", ",", ")", ")", "\n", "self", ".", "steps_beyond_done", "=", "None", "\n", "return", "np", ".", "array", "(", "self", ".", "state", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.cartpole.CartPoleEnv._render": [[95, 146], ["cartpole.CartPoleEnv.carttrans.set_translation", "cartpole.CartPoleEnv.poletrans.set_rotation", "cartpole.CartPoleEnv.viewer.render", "rendering.Viewer", "rendering.FilledPolygon", "rendering.Transform", "rendering.FilledPolygon.add_attr", "cartpole.CartPoleEnv.viewer.add_geom", "rendering.FilledPolygon", "rendering.FilledPolygon.set_color", "rendering.Transform", "rendering.FilledPolygon.add_attr", "rendering.FilledPolygon.add_attr", "cartpole.CartPoleEnv.viewer.add_geom", "rendering.make_circle", "cartpole.CartPoleEnv.axle.add_attr", "cartpole.CartPoleEnv.axle.add_attr", "cartpole.CartPoleEnv.axle.set_color", "cartpole.CartPoleEnv.viewer.add_geom", "rendering.Line", "cartpole.CartPoleEnv.track.set_color", "cartpole.CartPoleEnv.viewer.add_geom", "cartpole.CartPoleEnv.viewer.close"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.rendering.Transform.set_translation", "home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.rendering.Transform.set_rotation", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.render", "home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.rendering.Geom.add_attr", "home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.rendering.Viewer.add_geom", "home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.rendering.Geom.set_color", "home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.rendering.Geom.add_attr", "home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.rendering.Geom.add_attr", "home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.rendering.Viewer.add_geom", "home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.rendering.make_circle", "home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.rendering.Geom.add_attr", "home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.rendering.Geom.add_attr", "home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.rendering.Geom.set_color", "home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.rendering.Viewer.add_geom", "home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.rendering.Geom.set_color", "home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.rendering.Viewer.add_geom", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.close"], ["", "def", "_render", "(", "self", ",", "mode", "=", "'human'", ",", "close", "=", "False", ")", ":", "\n", "        ", "if", "close", ":", "\n", "            ", "if", "self", ".", "viewer", "is", "not", "None", ":", "\n", "                ", "self", ".", "viewer", ".", "close", "(", ")", "\n", "self", ".", "viewer", "=", "None", "\n", "", "return", "\n", "\n", "", "screen_width", "=", "600", "\n", "screen_height", "=", "400", "\n", "\n", "world_width", "=", "self", ".", "x_threshold", "*", "2", "\n", "scale", "=", "screen_width", "/", "world_width", "\n", "carty", "=", "100", "# TOP OF CART", "\n", "polewidth", "=", "10.0", "\n", "polelen", "=", "scale", "*", "1.0", "\n", "cartwidth", "=", "50.0", "\n", "cartheight", "=", "30.0", "\n", "\n", "if", "self", ".", "viewer", "is", "None", ":", "\n", "            ", "from", "environments", ".", "mujoco", ".", "rand_param_envs", ".", "gym", ".", "envs", ".", "classic_control", "import", "rendering", "\n", "self", ".", "viewer", "=", "rendering", ".", "Viewer", "(", "screen_width", ",", "screen_height", ")", "\n", "l", ",", "r", ",", "t", ",", "b", "=", "-", "cartwidth", "/", "2", ",", "cartwidth", "/", "2", ",", "cartheight", "/", "2", ",", "-", "cartheight", "/", "2", "\n", "axleoffset", "=", "cartheight", "/", "4.0", "\n", "cart", "=", "rendering", ".", "FilledPolygon", "(", "[", "(", "l", ",", "b", ")", ",", "(", "l", ",", "t", ")", ",", "(", "r", ",", "t", ")", ",", "(", "r", ",", "b", ")", "]", ")", "\n", "self", ".", "carttrans", "=", "rendering", ".", "Transform", "(", ")", "\n", "cart", ".", "add_attr", "(", "self", ".", "carttrans", ")", "\n", "self", ".", "viewer", ".", "add_geom", "(", "cart", ")", "\n", "l", ",", "r", ",", "t", ",", "b", "=", "-", "polewidth", "/", "2", ",", "polewidth", "/", "2", ",", "polelen", "-", "polewidth", "/", "2", ",", "-", "polewidth", "/", "2", "\n", "pole", "=", "rendering", ".", "FilledPolygon", "(", "[", "(", "l", ",", "b", ")", ",", "(", "l", ",", "t", ")", ",", "(", "r", ",", "t", ")", ",", "(", "r", ",", "b", ")", "]", ")", "\n", "pole", ".", "set_color", "(", ".8", ",", ".6", ",", ".4", ")", "\n", "self", ".", "poletrans", "=", "rendering", ".", "Transform", "(", "translation", "=", "(", "0", ",", "axleoffset", ")", ")", "\n", "pole", ".", "add_attr", "(", "self", ".", "poletrans", ")", "\n", "pole", ".", "add_attr", "(", "self", ".", "carttrans", ")", "\n", "self", ".", "viewer", ".", "add_geom", "(", "pole", ")", "\n", "self", ".", "axle", "=", "rendering", ".", "make_circle", "(", "polewidth", "/", "2", ")", "\n", "self", ".", "axle", ".", "add_attr", "(", "self", ".", "poletrans", ")", "\n", "self", ".", "axle", ".", "add_attr", "(", "self", ".", "carttrans", ")", "\n", "self", ".", "axle", ".", "set_color", "(", ".5", ",", ".5", ",", ".8", ")", "\n", "self", ".", "viewer", ".", "add_geom", "(", "self", ".", "axle", ")", "\n", "self", ".", "track", "=", "rendering", ".", "Line", "(", "(", "0", ",", "carty", ")", ",", "(", "screen_width", ",", "carty", ")", ")", "\n", "self", ".", "track", ".", "set_color", "(", "0", ",", "0", ",", "0", ")", "\n", "self", ".", "viewer", ".", "add_geom", "(", "self", ".", "track", ")", "\n", "\n", "", "if", "self", ".", "state", "is", "None", ":", "return", "None", "\n", "\n", "x", "=", "self", ".", "state", "\n", "cartx", "=", "x", "[", "0", "]", "*", "scale", "+", "screen_width", "/", "2.0", "# MIDDLE OF CART", "\n", "self", ".", "carttrans", ".", "set_translation", "(", "cartx", ",", "carty", ")", "\n", "self", ".", "poletrans", ".", "set_rotation", "(", "-", "x", "[", "2", "]", ")", "\n", "\n", "return", "self", ".", "viewer", ".", "render", "(", "return_rgb_array", "=", "mode", "==", "'rgb_array'", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.acrobot.AcrobotEnv.__init__": [[82, 90], ["numpy.array", "environments.mujoco.rand_param_envs.gym.spaces.Box", "environments.mujoco.rand_param_envs.gym.spaces.Discrete", "acrobot.AcrobotEnv._seed"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.algorithmic.algorithmic_env.AlgorithmicEnv._seed"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "viewer", "=", "None", "\n", "high", "=", "np", ".", "array", "(", "[", "1.0", ",", "1.0", ",", "1.0", ",", "1.0", ",", "self", ".", "MAX_VEL_1", ",", "self", ".", "MAX_VEL_2", "]", ")", "\n", "low", "=", "-", "high", "\n", "self", ".", "observation_space", "=", "spaces", ".", "Box", "(", "low", ",", "high", ")", "\n", "self", ".", "action_space", "=", "spaces", ".", "Discrete", "(", "3", ")", "\n", "self", ".", "state", "=", "None", "\n", "self", ".", "_seed", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.acrobot.AcrobotEnv._seed": [[91, 94], ["environments.mujoco.rand_param_envs.gym.utils.seeding.np_random"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.utils.seeding.np_random"], ["", "def", "_seed", "(", "self", ",", "seed", "=", "None", ")", ":", "\n", "        ", "self", ".", "np_random", ",", "seed", "=", "seeding", ".", "np_random", "(", "seed", ")", "\n", "return", "[", "seed", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.acrobot.AcrobotEnv._reset": [[95, 98], ["acrobot.AcrobotEnv.np_random.uniform", "acrobot.AcrobotEnv._get_ob"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.acrobot.AcrobotEnv._get_ob"], ["", "def", "_reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "state", "=", "self", ".", "np_random", ".", "uniform", "(", "low", "=", "-", "0.1", ",", "high", "=", "0.1", ",", "size", "=", "(", "4", ",", ")", ")", "\n", "return", "self", ".", "_get_ob", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.acrobot.AcrobotEnv._step": [[99, 128], ["numpy.append", "acrobot.rk4", "acrobot.wrap", "acrobot.wrap", "acrobot.bound", "acrobot.bound", "acrobot.AcrobotEnv._terminal", "acrobot.AcrobotEnv.np_random.uniform", "acrobot.AcrobotEnv._get_ob"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.acrobot.rk4", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.glfw._GLFWgammaramp.wrap", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.glfw._GLFWgammaramp.wrap", "home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.acrobot.bound", "home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.acrobot.bound", "home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.acrobot.AcrobotEnv._terminal", "home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.acrobot.AcrobotEnv._get_ob"], ["", "def", "_step", "(", "self", ",", "a", ")", ":", "\n", "        ", "s", "=", "self", ".", "state", "\n", "torque", "=", "self", ".", "AVAIL_TORQUE", "[", "a", "]", "\n", "\n", "# Add noise to the force action", "\n", "if", "self", ".", "torque_noise_max", ">", "0", ":", "\n", "            ", "torque", "+=", "self", ".", "np_random", ".", "uniform", "(", "-", "self", ".", "torque_noise_max", ",", "self", ".", "torque_noise_max", ")", "\n", "\n", "# Now, augment the state with our force action so it can be passed to", "\n", "# _dsdt", "\n", "", "s_augmented", "=", "np", ".", "append", "(", "s", ",", "torque", ")", "\n", "\n", "ns", "=", "rk4", "(", "self", ".", "_dsdt", ",", "s_augmented", ",", "[", "0", ",", "self", ".", "dt", "]", ")", "\n", "# only care about final timestep of integration returned by integrator", "\n", "ns", "=", "ns", "[", "-", "1", "]", "\n", "ns", "=", "ns", "[", ":", "4", "]", "# omit action", "\n", "# ODEINT IS TOO SLOW!", "\n", "# ns_continuous = integrate.odeint(self._dsdt, self.s_continuous, [0, self.dt])", "\n", "# self.s_continuous = ns_continuous[-1] # We only care about the state", "\n", "# at the ''final timestep'', self.dt", "\n", "\n", "ns", "[", "0", "]", "=", "wrap", "(", "ns", "[", "0", "]", ",", "-", "pi", ",", "pi", ")", "\n", "ns", "[", "1", "]", "=", "wrap", "(", "ns", "[", "1", "]", ",", "-", "pi", ",", "pi", ")", "\n", "ns", "[", "2", "]", "=", "bound", "(", "ns", "[", "2", "]", ",", "-", "self", ".", "MAX_VEL_1", ",", "self", ".", "MAX_VEL_1", ")", "\n", "ns", "[", "3", "]", "=", "bound", "(", "ns", "[", "3", "]", ",", "-", "self", ".", "MAX_VEL_2", ",", "self", ".", "MAX_VEL_2", ")", "\n", "self", ".", "state", "=", "ns", "\n", "terminal", "=", "self", ".", "_terminal", "(", ")", "\n", "reward", "=", "-", "1.", "if", "not", "terminal", "else", "0.", "\n", "return", "(", "self", ".", "_get_ob", "(", ")", ",", "reward", ",", "terminal", ",", "{", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.acrobot.AcrobotEnv._get_ob": [[129, 132], ["numpy.array", "numpy.cos", "numpy.sin", "numpy.cos", "numpy.sin"], "methods", ["None"], ["", "def", "_get_ob", "(", "self", ")", ":", "\n", "        ", "s", "=", "self", ".", "state", "\n", "return", "np", ".", "array", "(", "[", "cos", "(", "s", "[", "0", "]", ")", ",", "np", ".", "sin", "(", "s", "[", "0", "]", ")", ",", "cos", "(", "s", "[", "1", "]", ")", ",", "sin", "(", "s", "[", "1", "]", ")", ",", "s", "[", "2", "]", ",", "s", "[", "3", "]", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.acrobot.AcrobotEnv._terminal": [[133, 136], ["bool", "numpy.cos", "numpy.cos"], "methods", ["None"], ["", "def", "_terminal", "(", "self", ")", ":", "\n", "        ", "s", "=", "self", ".", "state", "\n", "return", "bool", "(", "-", "np", ".", "cos", "(", "s", "[", "0", "]", ")", "-", "np", ".", "cos", "(", "s", "[", "1", "]", "+", "s", "[", "0", "]", ")", ">", "1.", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.acrobot.AcrobotEnv._dsdt": [[137, 171], ["numpy.cos", "numpy.cos", "numpy.cos", "numpy.sin", "numpy.sin", "numpy.sin", "numpy.cos"], "methods", ["None"], ["", "def", "_dsdt", "(", "self", ",", "s_augmented", ",", "t", ")", ":", "\n", "        ", "m1", "=", "self", ".", "LINK_MASS_1", "\n", "m2", "=", "self", ".", "LINK_MASS_2", "\n", "l1", "=", "self", ".", "LINK_LENGTH_1", "\n", "lc1", "=", "self", ".", "LINK_COM_POS_1", "\n", "lc2", "=", "self", ".", "LINK_COM_POS_2", "\n", "I1", "=", "self", ".", "LINK_MOI", "\n", "I2", "=", "self", ".", "LINK_MOI", "\n", "g", "=", "9.8", "\n", "a", "=", "s_augmented", "[", "-", "1", "]", "\n", "s", "=", "s_augmented", "[", ":", "-", "1", "]", "\n", "theta1", "=", "s", "[", "0", "]", "\n", "theta2", "=", "s", "[", "1", "]", "\n", "dtheta1", "=", "s", "[", "2", "]", "\n", "dtheta2", "=", "s", "[", "3", "]", "\n", "d1", "=", "m1", "*", "lc1", "**", "2", "+", "m2", "*", "(", "l1", "**", "2", "+", "lc2", "**", "2", "+", "2", "*", "l1", "*", "lc2", "*", "np", ".", "cos", "(", "theta2", ")", ")", "+", "I1", "+", "I2", "\n", "d2", "=", "m2", "*", "(", "lc2", "**", "2", "+", "l1", "*", "lc2", "*", "np", ".", "cos", "(", "theta2", ")", ")", "+", "I2", "\n", "phi2", "=", "m2", "*", "lc2", "*", "g", "*", "np", ".", "cos", "(", "theta1", "+", "theta2", "-", "np", ".", "pi", "/", "2.", ")", "\n", "phi1", "=", "-", "m2", "*", "l1", "*", "lc2", "*", "dtheta2", "**", "2", "*", "np", ".", "sin", "(", "theta2", ")", "-", "2", "*", "m2", "*", "l1", "*", "lc2", "*", "dtheta2", "*", "dtheta1", "*", "np", ".", "sin", "(", "theta2", ")", "+", "(", "m1", "*", "lc1", "+", "m2", "*", "l1", ")", "*", "g", "*", "np", ".", "cos", "(", "theta1", "-", "np", ".", "pi", "/", "2", ")", "+", "phi2", "\n", "if", "self", ".", "book_or_nips", "==", "\"nips\"", ":", "\n", "# the following line is consistent with the description in the", "\n", "# paper", "\n", "            ", "ddtheta2", "=", "(", "a", "+", "d2", "/", "d1", "*", "phi1", "-", "phi2", ")", "/", "(", "m2", "*", "lc2", "**", "2", "+", "I2", "-", "d2", "**", "2", "/", "d1", ")", "\n", "", "else", ":", "\n", "# the following line is consistent with the java implementation and the", "\n", "# book", "\n", "            ", "ddtheta2", "=", "(", "a", "+", "d2", "/", "d1", "*", "phi1", "-", "m2", "*", "l1", "*", "lc2", "*", "dtheta1", "**", "2", "*", "np", ".", "sin", "(", "theta2", ")", "-", "phi2", ")", "/", "(", "m2", "*", "lc2", "**", "2", "+", "I2", "-", "d2", "**", "2", "/", "d1", ")", "\n", "", "ddtheta1", "=", "-", "(", "d2", "*", "ddtheta2", "+", "phi1", ")", "/", "d1", "\n", "return", "(", "dtheta1", ",", "dtheta2", ",", "ddtheta1", ",", "ddtheta2", ",", "0.", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.acrobot.AcrobotEnv._render": [[172, 209], ["acrobot.AcrobotEnv.viewer.draw_line", "zip", "acrobot.AcrobotEnv.viewer.render", "rendering.Viewer", "acrobot.AcrobotEnv.viewer.set_bounds", "numpy.array", "rendering.Transform", "acrobot.AcrobotEnv.viewer.draw_polygon", "acrobot.AcrobotEnv.add_attr", "acrobot.AcrobotEnv.set_color", "acrobot.AcrobotEnv.viewer.draw_circle", "acrobot.AcrobotEnv.set_color", "acrobot.AcrobotEnv.add_attr", "acrobot.AcrobotEnv.viewer.close", "numpy.cos", "numpy.sin", "numpy.cos", "numpy.sin"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.rendering.Viewer.draw_line", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.render", "home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.rendering.Viewer.set_bounds", "home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.rendering.Viewer.draw_polygon", "home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.rendering.Geom.add_attr", "home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.rendering.Geom.set_color", "home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.rendering.Viewer.draw_circle", "home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.rendering.Geom.set_color", "home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.rendering.Geom.add_attr", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.close"], ["", "def", "_render", "(", "self", ",", "mode", "=", "'human'", ",", "close", "=", "False", ")", ":", "\n", "        ", "if", "close", ":", "\n", "            ", "if", "self", ".", "viewer", "is", "not", "None", ":", "\n", "                ", "self", ".", "viewer", ".", "close", "(", ")", "\n", "self", ".", "viewer", "=", "None", "\n", "", "return", "\n", "", "from", "environments", ".", "mujoco", ".", "rand_param_envs", ".", "gym", ".", "envs", ".", "classic_control", "import", "rendering", "\n", "\n", "s", "=", "self", ".", "state", "\n", "\n", "if", "self", ".", "viewer", "is", "None", ":", "\n", "            ", "self", ".", "viewer", "=", "rendering", ".", "Viewer", "(", "500", ",", "500", ")", "\n", "self", ".", "viewer", ".", "set_bounds", "(", "-", "2.2", ",", "2.2", ",", "-", "2.2", ",", "2.2", ")", "\n", "\n", "", "if", "s", "is", "None", ":", "return", "None", "\n", "\n", "p1", "=", "[", "-", "self", ".", "LINK_LENGTH_1", "*", "\n", "np", ".", "cos", "(", "s", "[", "0", "]", ")", ",", "self", ".", "LINK_LENGTH_1", "*", "np", ".", "sin", "(", "s", "[", "0", "]", ")", "]", "\n", "\n", "p2", "=", "[", "p1", "[", "0", "]", "-", "self", ".", "LINK_LENGTH_2", "*", "np", ".", "cos", "(", "s", "[", "0", "]", "+", "s", "[", "1", "]", ")", ",", "\n", "p1", "[", "1", "]", "+", "self", ".", "LINK_LENGTH_2", "*", "np", ".", "sin", "(", "s", "[", "0", "]", "+", "s", "[", "1", "]", ")", "]", "\n", "\n", "xys", "=", "np", ".", "array", "(", "[", "[", "0", ",", "0", "]", ",", "p1", ",", "p2", "]", ")", "[", ":", ",", ":", ":", "-", "1", "]", "\n", "thetas", "=", "[", "s", "[", "0", "]", "-", "np", ".", "pi", "/", "2", ",", "s", "[", "0", "]", "+", "s", "[", "1", "]", "-", "np", ".", "pi", "/", "2", "]", "\n", "\n", "self", ".", "viewer", ".", "draw_line", "(", "(", "-", "2.2", ",", "1", ")", ",", "(", "2.2", ",", "1", ")", ")", "\n", "for", "(", "(", "x", ",", "y", ")", ",", "th", ")", "in", "zip", "(", "xys", ",", "thetas", ")", ":", "\n", "            ", "l", ",", "r", ",", "t", ",", "b", "=", "0", ",", "1", ",", ".1", ",", "-", ".1", "\n", "jtransform", "=", "rendering", ".", "Transform", "(", "rotation", "=", "th", ",", "translation", "=", "(", "x", ",", "y", ")", ")", "\n", "link", "=", "self", ".", "viewer", ".", "draw_polygon", "(", "[", "(", "l", ",", "b", ")", ",", "(", "l", ",", "t", ")", ",", "(", "r", ",", "t", ")", ",", "(", "r", ",", "b", ")", "]", ")", "\n", "link", ".", "add_attr", "(", "jtransform", ")", "\n", "link", ".", "set_color", "(", "0", ",", ".8", ",", ".8", ")", "\n", "circ", "=", "self", ".", "viewer", ".", "draw_circle", "(", ".1", ")", "\n", "circ", ".", "set_color", "(", ".8", ",", ".8", ",", "0", ")", "\n", "circ", ".", "add_attr", "(", "jtransform", ")", "\n", "\n", "", "return", "self", ".", "viewer", ".", "render", "(", "return_rgb_array", "=", "mode", "==", "'rgb_array'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.acrobot.wrap": [[210, 225], ["numpy.pi", "numpy.pi"], "function", ["None"], ["", "", "def", "wrap", "(", "x", ",", "m", ",", "M", ")", ":", "\n", "    ", "\"\"\"\n    :param x: a scalar\n    :param m: minimum possible value in range\n    :param M: maximum possible value in range\n    Wraps ``x`` so m <= x <= M; but unlike ``bound()`` which\n    truncates, ``wrap()`` wraps x around the coordinate system defined by m,M.\\n\n    For example, m = -180, M = 180 (degrees), x = 360 --> returns 0.\n    \"\"\"", "\n", "diff", "=", "M", "-", "m", "\n", "while", "x", ">", "M", ":", "\n", "        ", "x", "=", "x", "-", "diff", "\n", "", "while", "x", "<", "m", ":", "\n", "        ", "x", "=", "x", "+", "diff", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.acrobot.bound": [[226, 237], ["min", "max"], "function", ["None"], ["", "def", "bound", "(", "x", ",", "m", ",", "M", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    :param x: scalar\n    Either have m as scalar, so bound(x,m,M) which returns m <= x <= M *OR*\n    have m as length 2 vector, bound(x,m, <IGNORED>) returns m[0] <= x <= m[1].\n    \"\"\"", "\n", "if", "M", "is", "None", ":", "\n", "        ", "M", "=", "m", "[", "1", "]", "\n", "m", "=", "m", "[", "0", "]", "\n", "# bound x between min (m) and Max (M)", "\n", "", "return", "min", "(", "max", "(", "x", ",", "m", ")", ",", "M", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.acrobot.rk4": [[239, 300], ["numpy.arange", "len", "numpy.zeros", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.zeros", "len", "derivs", "derivs", "derivs", "derivs", "len", "len"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.zeros", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.zeros"], ["", "def", "rk4", "(", "derivs", ",", "y0", ",", "t", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"\n    Integrate 1D or ND system of ODEs using 4-th order Runge-Kutta.\n    This is a toy implementation which may be useful if you find\n    yourself stranded on a system w/o scipy.  Otherwise use\n    :func:`scipy.integrate`.\n    *y0*\n        initial state vector\n    *t*\n        sample times\n    *derivs*\n        returns the derivative of the system and has the\n        signature ``dy = derivs(yi, ti)``\n    *args*\n        additional arguments passed to the derivative function\n    *kwargs*\n        additional keyword arguments passed to the derivative function\n    Example 1 ::\n        ## 2D system\n        def derivs6(x,t):\n            d1 =  x[0] + 2*x[1]\n            d2 =  -3*x[0] + 4*x[1]\n            return (d1, d2)\n        dt = 0.0005\n        t = arange(0.0, 2.0, dt)\n        y0 = (1,2)\n        yout = rk4(derivs6, y0, t)\n    Example 2::\n        ## 1D system\n        alpha = 2\n        def derivs(x,t):\n            return -alpha*x + exp(-t)\n        y0 = 1\n        yout = rk4(derivs, y0, t)\n    If you have access to scipy, you should probably be using the\n    scipy.integrate tools rather than this function.\n    \"\"\"", "\n", "\n", "try", ":", "\n", "        ", "Ny", "=", "len", "(", "y0", ")", "\n", "", "except", "TypeError", ":", "\n", "        ", "yout", "=", "np", ".", "zeros", "(", "(", "len", "(", "t", ")", ",", ")", ",", "np", ".", "float_", ")", "\n", "", "else", ":", "\n", "        ", "yout", "=", "np", ".", "zeros", "(", "(", "len", "(", "t", ")", ",", "Ny", ")", ",", "np", ".", "float_", ")", "\n", "\n", "", "yout", "[", "0", "]", "=", "y0", "\n", "i", "=", "0", "\n", "\n", "for", "i", "in", "np", ".", "arange", "(", "len", "(", "t", ")", "-", "1", ")", ":", "\n", "\n", "        ", "thist", "=", "t", "[", "i", "]", "\n", "dt", "=", "t", "[", "i", "+", "1", "]", "-", "thist", "\n", "dt2", "=", "dt", "/", "2.0", "\n", "y0", "=", "yout", "[", "i", "]", "\n", "\n", "k1", "=", "np", ".", "asarray", "(", "derivs", "(", "y0", ",", "thist", ",", "*", "args", ",", "**", "kwargs", ")", ")", "\n", "k2", "=", "np", ".", "asarray", "(", "derivs", "(", "y0", "+", "dt2", "*", "k1", ",", "thist", "+", "dt2", ",", "*", "args", ",", "**", "kwargs", ")", ")", "\n", "k3", "=", "np", ".", "asarray", "(", "derivs", "(", "y0", "+", "dt2", "*", "k2", ",", "thist", "+", "dt2", ",", "*", "args", ",", "**", "kwargs", ")", ")", "\n", "k4", "=", "np", ".", "asarray", "(", "derivs", "(", "y0", "+", "dt", "*", "k3", ",", "thist", "+", "dt", ",", "*", "args", ",", "**", "kwargs", ")", ")", "\n", "yout", "[", "i", "+", "1", "]", "=", "y0", "+", "dt", "/", "6.0", "*", "(", "k1", "+", "2", "*", "k2", "+", "2", "*", "k3", "+", "k4", ")", "\n", "", "return", "yout", "\n", "", ""]], "home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.mountain_car.MountainCarEnv.__init__": [[17, 33], ["numpy.array", "numpy.array", "environments.mujoco.rand_param_envs.gym.spaces.Discrete", "environments.mujoco.rand_param_envs.gym.spaces.Box", "mountain_car.MountainCarEnv._seed", "mountain_car.MountainCarEnv.reset"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.algorithmic.algorithmic_env.AlgorithmicEnv._seed", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.reset"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "min_position", "=", "-", "1.2", "\n", "self", ".", "max_position", "=", "0.6", "\n", "self", ".", "max_speed", "=", "0.07", "\n", "self", ".", "goal_position", "=", "0.5", "\n", "\n", "self", ".", "low", "=", "np", ".", "array", "(", "[", "self", ".", "min_position", ",", "-", "self", ".", "max_speed", "]", ")", "\n", "self", ".", "high", "=", "np", ".", "array", "(", "[", "self", ".", "max_position", ",", "self", ".", "max_speed", "]", ")", "\n", "\n", "self", ".", "viewer", "=", "None", "\n", "\n", "self", ".", "action_space", "=", "spaces", ".", "Discrete", "(", "3", ")", "\n", "self", ".", "observation_space", "=", "spaces", ".", "Box", "(", "self", ".", "low", ",", "self", ".", "high", ")", "\n", "\n", "self", ".", "_seed", "(", ")", "\n", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.mountain_car.MountainCarEnv._seed": [[34, 37], ["environments.mujoco.rand_param_envs.gym.utils.seeding.np_random"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.utils.seeding.np_random"], ["", "def", "_seed", "(", "self", ",", "seed", "=", "None", ")", ":", "\n", "        ", "self", ".", "np_random", ",", "seed", "=", "seeding", ".", "np_random", "(", "seed", ")", "\n", "return", "[", "seed", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.mountain_car.MountainCarEnv._step": [[38, 53], ["mountain_car.MountainCarEnv.action_space.contains", "numpy.clip", "numpy.clip", "bool", "numpy.array", "type", "math.cos"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.spaces.discrete.Discrete.contains", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjvGeomWrapper.type"], ["", "def", "_step", "(", "self", ",", "action", ")", ":", "\n", "        ", "assert", "self", ".", "action_space", ".", "contains", "(", "action", ")", ",", "\"%r (%s) invalid\"", "%", "(", "action", ",", "type", "(", "action", ")", ")", "\n", "\n", "position", ",", "velocity", "=", "self", ".", "state", "\n", "velocity", "+=", "(", "action", "-", "1", ")", "*", "0.001", "+", "math", ".", "cos", "(", "3", "*", "position", ")", "*", "(", "-", "0.0025", ")", "\n", "velocity", "=", "np", ".", "clip", "(", "velocity", ",", "-", "self", ".", "max_speed", ",", "self", ".", "max_speed", ")", "\n", "position", "+=", "velocity", "\n", "position", "=", "np", ".", "clip", "(", "position", ",", "self", ".", "min_position", ",", "self", ".", "max_position", ")", "\n", "if", "(", "position", "==", "self", ".", "min_position", "and", "velocity", "<", "0", ")", ":", "velocity", "=", "0", "\n", "\n", "done", "=", "bool", "(", "position", ">=", "self", ".", "goal_position", ")", "\n", "reward", "=", "-", "1.0", "\n", "\n", "self", ".", "state", "=", "(", "position", ",", "velocity", ")", "\n", "return", "np", ".", "array", "(", "self", ".", "state", ")", ",", "reward", ",", "done", ",", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.mountain_car.MountainCarEnv._reset": [[54, 57], ["numpy.array", "numpy.array", "mountain_car.MountainCarEnv.np_random.uniform"], "methods", ["None"], ["", "def", "_reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "state", "=", "np", ".", "array", "(", "[", "self", ".", "np_random", ".", "uniform", "(", "low", "=", "-", "0.6", ",", "high", "=", "-", "0.4", ")", ",", "0", "]", ")", "\n", "return", "np", ".", "array", "(", "self", ".", "state", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.mountain_car.MountainCarEnv._height": [[58, 60], ["numpy.sin"], "methods", ["None"], ["", "def", "_height", "(", "self", ",", "xs", ")", ":", "\n", "        ", "return", "np", ".", "sin", "(", "3", "*", "xs", ")", "*", ".45", "+", ".55", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.mountain_car.MountainCarEnv._render": [[61, 120], ["mountain_car.MountainCarEnv.cartrans.set_translation", "mountain_car.MountainCarEnv.cartrans.set_rotation", "mountain_car.MountainCarEnv.viewer.render", "rendering.Viewer", "numpy.linspace", "mountain_car.MountainCarEnv._height", "list", "rendering.make_polyline", "mountain_car.MountainCarEnv.track.set_linewidth", "mountain_car.MountainCarEnv.viewer.add_geom", "rendering.FilledPolygon", "rendering.FilledPolygon.add_attr", "rendering.Transform", "rendering.FilledPolygon.add_attr", "mountain_car.MountainCarEnv.viewer.add_geom", "rendering.make_circle", "rendering.make_circle.set_color", "rendering.make_circle.add_attr", "rendering.make_circle.add_attr", "mountain_car.MountainCarEnv.viewer.add_geom", "rendering.make_circle", "rendering.make_circle.add_attr", "rendering.make_circle.add_attr", "rendering.make_circle.set_color", "mountain_car.MountainCarEnv.viewer.add_geom", "rendering.Line", "mountain_car.MountainCarEnv.viewer.add_geom", "rendering.FilledPolygon", "rendering.FilledPolygon.set_color", "mountain_car.MountainCarEnv.viewer.add_geom", "math.cos", "mountain_car.MountainCarEnv.viewer.close", "zip", "rendering.Transform", "rendering.Transform", "rendering.Transform", "mountain_car.MountainCarEnv._height", "mountain_car.MountainCarEnv._height"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.rendering.Transform.set_translation", "home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.rendering.Transform.set_rotation", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.render", "home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.mountain_car.MountainCarEnv._height", "home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.ListableAPIResource.list", "home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.rendering.make_polyline", "home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.rendering.PolyLine.set_linewidth", "home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.rendering.Viewer.add_geom", "home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.rendering.Geom.add_attr", "home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.rendering.Geom.add_attr", "home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.rendering.Viewer.add_geom", "home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.rendering.make_circle", "home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.rendering.Geom.set_color", "home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.rendering.Geom.add_attr", "home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.rendering.Geom.add_attr", "home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.rendering.Viewer.add_geom", "home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.rendering.make_circle", "home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.rendering.Geom.add_attr", "home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.rendering.Geom.add_attr", "home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.rendering.Geom.set_color", "home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.rendering.Viewer.add_geom", "home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.rendering.Viewer.add_geom", "home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.rendering.Geom.set_color", "home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.rendering.Viewer.add_geom", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.close", "home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.mountain_car.MountainCarEnv._height", "home.repos.pwc.inspect_result.Rondorf_BOReL.classic_control.mountain_car.MountainCarEnv._height"], ["", "def", "_render", "(", "self", ",", "mode", "=", "'human'", ",", "close", "=", "False", ")", ":", "\n", "        ", "if", "close", ":", "\n", "            ", "if", "self", ".", "viewer", "is", "not", "None", ":", "\n", "                ", "self", ".", "viewer", ".", "close", "(", ")", "\n", "self", ".", "viewer", "=", "None", "\n", "", "return", "\n", "\n", "", "screen_width", "=", "600", "\n", "screen_height", "=", "400", "\n", "\n", "world_width", "=", "self", ".", "max_position", "-", "self", ".", "min_position", "\n", "scale", "=", "screen_width", "/", "world_width", "\n", "carwidth", "=", "40", "\n", "carheight", "=", "20", "\n", "\n", "\n", "if", "self", ".", "viewer", "is", "None", ":", "\n", "            ", "from", "environments", ".", "mujoco", ".", "rand_param_envs", ".", "gym", ".", "envs", ".", "classic_control", "import", "rendering", "\n", "self", ".", "viewer", "=", "rendering", ".", "Viewer", "(", "screen_width", ",", "screen_height", ")", "\n", "xs", "=", "np", ".", "linspace", "(", "self", ".", "min_position", ",", "self", ".", "max_position", ",", "100", ")", "\n", "ys", "=", "self", ".", "_height", "(", "xs", ")", "\n", "xys", "=", "list", "(", "zip", "(", "(", "xs", "-", "self", ".", "min_position", ")", "*", "scale", ",", "ys", "*", "scale", ")", ")", "\n", "\n", "self", ".", "track", "=", "rendering", ".", "make_polyline", "(", "xys", ")", "\n", "self", ".", "track", ".", "set_linewidth", "(", "4", ")", "\n", "self", ".", "viewer", ".", "add_geom", "(", "self", ".", "track", ")", "\n", "\n", "clearance", "=", "10", "\n", "\n", "l", ",", "r", ",", "t", ",", "b", "=", "-", "carwidth", "/", "2", ",", "carwidth", "/", "2", ",", "carheight", ",", "0", "\n", "car", "=", "rendering", ".", "FilledPolygon", "(", "[", "(", "l", ",", "b", ")", ",", "(", "l", ",", "t", ")", ",", "(", "r", ",", "t", ")", ",", "(", "r", ",", "b", ")", "]", ")", "\n", "car", ".", "add_attr", "(", "rendering", ".", "Transform", "(", "translation", "=", "(", "0", ",", "clearance", ")", ")", ")", "\n", "self", ".", "cartrans", "=", "rendering", ".", "Transform", "(", ")", "\n", "car", ".", "add_attr", "(", "self", ".", "cartrans", ")", "\n", "self", ".", "viewer", ".", "add_geom", "(", "car", ")", "\n", "frontwheel", "=", "rendering", ".", "make_circle", "(", "carheight", "/", "2.5", ")", "\n", "frontwheel", ".", "set_color", "(", ".5", ",", ".5", ",", ".5", ")", "\n", "frontwheel", ".", "add_attr", "(", "rendering", ".", "Transform", "(", "translation", "=", "(", "carwidth", "/", "4", ",", "clearance", ")", ")", ")", "\n", "frontwheel", ".", "add_attr", "(", "self", ".", "cartrans", ")", "\n", "self", ".", "viewer", ".", "add_geom", "(", "frontwheel", ")", "\n", "backwheel", "=", "rendering", ".", "make_circle", "(", "carheight", "/", "2.5", ")", "\n", "backwheel", ".", "add_attr", "(", "rendering", ".", "Transform", "(", "translation", "=", "(", "-", "carwidth", "/", "4", ",", "clearance", ")", ")", ")", "\n", "backwheel", ".", "add_attr", "(", "self", ".", "cartrans", ")", "\n", "backwheel", ".", "set_color", "(", ".5", ",", ".5", ",", ".5", ")", "\n", "self", ".", "viewer", ".", "add_geom", "(", "backwheel", ")", "\n", "flagx", "=", "(", "self", ".", "goal_position", "-", "self", ".", "min_position", ")", "*", "scale", "\n", "flagy1", "=", "self", ".", "_height", "(", "self", ".", "goal_position", ")", "*", "scale", "\n", "flagy2", "=", "flagy1", "+", "50", "\n", "flagpole", "=", "rendering", ".", "Line", "(", "(", "flagx", ",", "flagy1", ")", ",", "(", "flagx", ",", "flagy2", ")", ")", "\n", "self", ".", "viewer", ".", "add_geom", "(", "flagpole", ")", "\n", "flag", "=", "rendering", ".", "FilledPolygon", "(", "[", "(", "flagx", ",", "flagy2", ")", ",", "(", "flagx", ",", "flagy2", "-", "10", ")", ",", "(", "flagx", "+", "25", ",", "flagy2", "-", "5", ")", "]", ")", "\n", "flag", ".", "set_color", "(", ".8", ",", ".8", ",", "0", ")", "\n", "self", ".", "viewer", ".", "add_geom", "(", "flag", ")", "\n", "\n", "", "pos", "=", "self", ".", "state", "[", "0", "]", "\n", "self", ".", "cartrans", ".", "set_translation", "(", "(", "pos", "-", "self", ".", "min_position", ")", "*", "scale", ",", "self", ".", "_height", "(", "pos", ")", "*", "scale", ")", "\n", "self", ".", "cartrans", ".", "set_rotation", "(", "math", ".", "cos", "(", "3", "*", "pos", ")", ")", "\n", "\n", "return", "self", ".", "viewer", ".", "render", "(", "return_rgb_array", "=", "mode", "==", "'rgb_array'", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Rondorf_BOReL.board_game.hex.HexEnv.__init__": [[31, 69], ["environments.mujoco.rand_param_envs.gym.spaces.Discrete", "hex.HexEnv.reset", "environments.mujoco.rand_param_envs.gym.spaces.Box", "hex.HexEnv._seed", "isinstance", "environments.mujoco.rand_param_envs.gym.error.Error", "numpy.zeros", "numpy.ones", "environments.mujoco.rand_param_envs.gym.error.Error"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.reset", "home.repos.pwc.inspect_result.Rondorf_BOReL.algorithmic.algorithmic_env.AlgorithmicEnv._seed", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.zeros", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.ones"], ["def", "__init__", "(", "self", ",", "player_color", ",", "opponent", ",", "observation_type", ",", "illegal_move_mode", ",", "board_size", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            player_color: Stone color for the agent. Either 'black' or 'white'\n            opponent: An opponent policy\n            observation_type: State encoding\n            illegal_move_mode: What to do when the agent makes an illegal move. Choices: 'raise' or 'lose'\n            board_size: size of the Hex board\n        \"\"\"", "\n", "assert", "isinstance", "(", "board_size", ",", "int", ")", "and", "board_size", ">=", "1", ",", "'Invalid board size: {}'", ".", "format", "(", "board_size", ")", "\n", "self", ".", "board_size", "=", "board_size", "\n", "\n", "colormap", "=", "{", "\n", "'black'", ":", "HexEnv", ".", "BLACK", ",", "\n", "'white'", ":", "HexEnv", ".", "WHITE", ",", "\n", "}", "\n", "try", ":", "\n", "            ", "self", ".", "player_color", "=", "colormap", "[", "player_color", "]", "\n", "", "except", "KeyError", ":", "\n", "            ", "raise", "error", ".", "Error", "(", "\"player_color must be 'black' or 'white', not {}\"", ".", "format", "(", "player_color", ")", ")", "\n", "\n", "", "self", ".", "opponent", "=", "opponent", "\n", "\n", "assert", "observation_type", "in", "[", "'numpy3c'", "]", "\n", "self", ".", "observation_type", "=", "observation_type", "\n", "\n", "assert", "illegal_move_mode", "in", "[", "'lose'", ",", "'raise'", "]", "\n", "self", ".", "illegal_move_mode", "=", "illegal_move_mode", "\n", "\n", "if", "self", ".", "observation_type", "!=", "'numpy3c'", ":", "\n", "            ", "raise", "error", ".", "Error", "(", "'Unsupported observation type: {}'", ".", "format", "(", "self", ".", "observation_type", ")", ")", "\n", "\n", "# One action for each board position and resign", "\n", "", "self", ".", "action_space", "=", "spaces", ".", "Discrete", "(", "self", ".", "board_size", "**", "2", "+", "1", ")", "\n", "observation", "=", "self", ".", "reset", "(", ")", "\n", "self", ".", "observation_space", "=", "spaces", ".", "Box", "(", "np", ".", "zeros", "(", "observation", ".", "shape", ")", ",", "np", ".", "ones", "(", "observation", ".", "shape", ")", ")", "\n", "\n", "self", ".", "_seed", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.board_game.hex.HexEnv._seed": [[70, 83], ["environments.mujoco.rand_param_envs.gym.utils.seeding.np_random", "isinstance", "hex.make_random_policy", "environments.mujoco.rand_param_envs.gym.error.Error"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.utils.seeding.np_random", "home.repos.pwc.inspect_result.Rondorf_BOReL.board_game.go.make_random_policy"], ["", "def", "_seed", "(", "self", ",", "seed", "=", "None", ")", ":", "\n", "        ", "self", ".", "np_random", ",", "seed", "=", "seeding", ".", "np_random", "(", "seed", ")", "\n", "\n", "# Update the random policy if needed", "\n", "if", "isinstance", "(", "self", ".", "opponent", ",", "str", ")", ":", "\n", "            ", "if", "self", ".", "opponent", "==", "'random'", ":", "\n", "                ", "self", ".", "opponent_policy", "=", "make_random_policy", "(", "self", ".", "np_random", ")", "\n", "", "else", ":", "\n", "                ", "raise", "error", ".", "Error", "(", "'Unrecognized opponent policy {}'", ".", "format", "(", "self", ".", "opponent", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "opponent_policy", "=", "self", ".", "opponent", "\n", "\n", "", "return", "[", "seed", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.board_game.hex.HexEnv._reset": [[84, 96], ["numpy.zeros", "hex.HexEnv.opponent_policy", "hex.HexEnv.make_move"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.zeros", "home.repos.pwc.inspect_result.Rondorf_BOReL.board_game.hex.HexEnv.make_move"], ["", "def", "_reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "state", "=", "np", ".", "zeros", "(", "(", "3", ",", "self", ".", "board_size", ",", "self", ".", "board_size", ")", ")", "\n", "self", ".", "state", "[", "2", ",", ":", ",", ":", "]", "=", "1.0", "\n", "self", ".", "to_play", "=", "HexEnv", ".", "BLACK", "\n", "self", ".", "done", "=", "False", "\n", "\n", "# Let the opponent play if it's not the agent's turn", "\n", "if", "self", ".", "player_color", "!=", "self", ".", "to_play", ":", "\n", "            ", "a", "=", "self", ".", "opponent_policy", "(", "self", ".", "state", ")", "\n", "HexEnv", ".", "make_move", "(", "self", ".", "state", ",", "a", ",", "HexEnv", ".", "BLACK", ")", "\n", "self", ".", "to_play", "=", "HexEnv", ".", "WHITE", "\n", "", "return", "self", ".", "state", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.board_game.hex.HexEnv._step": [[97, 137], ["hex.HexEnv.resign_move", "hex.HexEnv.opponent_policy", "hex.HexEnv.game_finished", "hex.HexEnv.resign_move", "hex.HexEnv.valid_move", "hex.HexEnv.make_move", "hex.HexEnv.make_move", "environments.mujoco.rand_param_envs.gym.error.Error"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.board_game.hex.HexEnv.resign_move", "home.repos.pwc.inspect_result.Rondorf_BOReL.board_game.hex.HexEnv.game_finished", "home.repos.pwc.inspect_result.Rondorf_BOReL.board_game.hex.HexEnv.resign_move", "home.repos.pwc.inspect_result.Rondorf_BOReL.board_game.hex.HexEnv.valid_move", "home.repos.pwc.inspect_result.Rondorf_BOReL.board_game.hex.HexEnv.make_move", "home.repos.pwc.inspect_result.Rondorf_BOReL.board_game.hex.HexEnv.make_move"], ["", "def", "_step", "(", "self", ",", "action", ")", ":", "\n", "        ", "assert", "self", ".", "to_play", "==", "self", ".", "player_color", "\n", "# If already terminal, then don't do anything", "\n", "if", "self", ".", "done", ":", "\n", "            ", "return", "self", ".", "state", ",", "0.", ",", "True", ",", "{", "'state'", ":", "self", ".", "state", "}", "\n", "\n", "# if HexEnv.pass_move(self.board_size, action):", "\n", "#     pass", "\n", "", "if", "HexEnv", ".", "resign_move", "(", "self", ".", "board_size", ",", "action", ")", ":", "\n", "            ", "return", "self", ".", "state", ",", "-", "1", ",", "True", ",", "{", "'state'", ":", "self", ".", "state", "}", "\n", "", "elif", "not", "HexEnv", ".", "valid_move", "(", "self", ".", "state", ",", "action", ")", ":", "\n", "            ", "if", "self", ".", "illegal_move_mode", "==", "'raise'", ":", "\n", "                ", "raise", "\n", "", "elif", "self", ".", "illegal_move_mode", "==", "'lose'", ":", "\n", "# Automatic loss on illegal move", "\n", "                ", "self", ".", "done", "=", "True", "\n", "return", "self", ".", "state", ",", "-", "1.", ",", "True", ",", "{", "'state'", ":", "self", ".", "state", "}", "\n", "", "else", ":", "\n", "                ", "raise", "error", ".", "Error", "(", "'Unsupported illegal move action: {}'", ".", "format", "(", "self", ".", "illegal_move_mode", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "HexEnv", ".", "make_move", "(", "self", ".", "state", ",", "action", ",", "self", ".", "player_color", ")", "\n", "\n", "# Opponent play", "\n", "", "a", "=", "self", ".", "opponent_policy", "(", "self", ".", "state", ")", "\n", "\n", "# if HexEnv.pass_move(self.board_size, action):", "\n", "#     pass", "\n", "\n", "# Making move if there are moves left", "\n", "if", "a", "is", "not", "None", ":", "\n", "            ", "if", "HexEnv", ".", "resign_move", "(", "self", ".", "board_size", ",", "a", ")", ":", "\n", "                ", "return", "self", ".", "state", ",", "1", ",", "True", ",", "{", "'state'", ":", "self", ".", "state", "}", "\n", "", "else", ":", "\n", "                ", "HexEnv", ".", "make_move", "(", "self", ".", "state", ",", "a", ",", "1", "-", "self", ".", "player_color", ")", "\n", "\n", "", "", "reward", "=", "HexEnv", ".", "game_finished", "(", "self", ".", "state", ")", "\n", "if", "self", ".", "player_color", "==", "HexEnv", ".", "WHITE", ":", "\n", "            ", "reward", "=", "-", "reward", "\n", "", "self", ".", "done", "=", "reward", "!=", "0", "\n", "return", "self", ".", "state", ",", "reward", ",", "self", ".", "done", ",", "{", "'state'", ":", "self", ".", "state", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.board_game.hex.HexEnv._render": [[144, 174], ["outfile.write", "range", "outfile.write", "outfile.write", "outfile.write", "outfile.write", "range", "six.StringIO", "outfile.write", "outfile.write", "range", "outfile.write", "outfile.write", "outfile.write", "outfile.write", "outfile.write", "outfile.write", "str", "str", "outfile.write", "outfile.write"], "methods", ["None"], ["", "def", "_render", "(", "self", ",", "mode", "=", "'human'", ",", "close", "=", "False", ")", ":", "\n", "        ", "if", "close", ":", "\n", "            ", "return", "\n", "", "board", "=", "self", ".", "state", "\n", "outfile", "=", "StringIO", "(", ")", "if", "mode", "==", "'ansi'", "else", "sys", ".", "stdout", "\n", "\n", "outfile", ".", "write", "(", "' '", "*", "5", ")", "\n", "for", "j", "in", "range", "(", "board", ".", "shape", "[", "1", "]", ")", ":", "\n", "            ", "outfile", ".", "write", "(", "' '", "+", "str", "(", "j", "+", "1", ")", "+", "'  | '", ")", "\n", "", "outfile", ".", "write", "(", "'\\n'", ")", "\n", "outfile", ".", "write", "(", "' '", "*", "5", ")", "\n", "outfile", ".", "write", "(", "'-'", "*", "(", "board", ".", "shape", "[", "1", "]", "*", "6", "-", "1", ")", ")", "\n", "outfile", ".", "write", "(", "'\\n'", ")", "\n", "for", "i", "in", "range", "(", "board", ".", "shape", "[", "1", "]", ")", ":", "\n", "            ", "outfile", ".", "write", "(", "' '", "*", "(", "2", "+", "i", "*", "3", ")", "+", "str", "(", "i", "+", "1", ")", "+", "'  |'", ")", "\n", "for", "j", "in", "range", "(", "board", ".", "shape", "[", "1", "]", ")", ":", "\n", "                ", "if", "board", "[", "2", ",", "i", ",", "j", "]", "==", "1", ":", "\n", "                    ", "outfile", ".", "write", "(", "'  O  '", ")", "\n", "", "elif", "board", "[", "0", ",", "i", ",", "j", "]", "==", "1", ":", "\n", "                    ", "outfile", ".", "write", "(", "'  B  '", ")", "\n", "", "else", ":", "\n", "                    ", "outfile", ".", "write", "(", "'  W  '", ")", "\n", "", "outfile", ".", "write", "(", "'|'", ")", "\n", "", "outfile", ".", "write", "(", "'\\n'", ")", "\n", "outfile", ".", "write", "(", "' '", "*", "(", "i", "*", "3", "+", "1", ")", ")", "\n", "outfile", ".", "write", "(", "'-'", "*", "(", "board", ".", "shape", "[", "1", "]", "*", "7", "-", "1", ")", ")", "\n", "outfile", ".", "write", "(", "'\\n'", ")", "\n", "\n", "", "if", "mode", "!=", "'human'", ":", "\n", "            ", "return", "outfile", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.board_game.hex.HexEnv.resign_move": [[179, 182], ["None"], "methods", ["None"], ["", "", "@", "staticmethod", "\n", "def", "resign_move", "(", "board_size", ",", "action", ")", ":", "\n", "        ", "return", "action", "==", "board_size", "**", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.board_game.hex.HexEnv.valid_move": [[183, 190], ["hex.HexEnv.action_to_coordinate"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.board_game.hex.HexEnv.action_to_coordinate"], ["", "@", "staticmethod", "\n", "def", "valid_move", "(", "board", ",", "action", ")", ":", "\n", "        ", "coords", "=", "HexEnv", ".", "action_to_coordinate", "(", "board", ",", "action", ")", "\n", "if", "board", "[", "2", ",", "coords", "[", "0", "]", ",", "coords", "[", "1", "]", "]", "==", "1", ":", "\n", "            ", "return", "True", "\n", "", "else", ":", "\n", "            ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.board_game.hex.HexEnv.make_move": [[191, 196], ["hex.HexEnv.action_to_coordinate"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.board_game.hex.HexEnv.action_to_coordinate"], ["", "", "@", "staticmethod", "\n", "def", "make_move", "(", "board", ",", "action", ",", "player", ")", ":", "\n", "        ", "coords", "=", "HexEnv", ".", "action_to_coordinate", "(", "board", ",", "action", ")", "\n", "board", "[", "2", ",", "coords", "[", "0", "]", ",", "coords", "[", "1", "]", "]", "=", "0", "\n", "board", "[", "player", ",", "coords", "[", "0", "]", ",", "coords", "[", "1", "]", "]", "=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.board_game.hex.HexEnv.coordinate_to_action": [[197, 200], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "coordinate_to_action", "(", "board", ",", "coords", ")", ":", "\n", "        ", "return", "coords", "[", "0", "]", "*", "board", ".", "shape", "[", "-", "1", "]", "+", "coords", "[", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.board_game.hex.HexEnv.action_to_coordinate": [[201, 204], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "action_to_coordinate", "(", "board", ",", "action", ")", ":", "\n", "        ", "return", "action", "//", "board", ".", "shape", "[", "-", "1", "]", ",", "action", "%", "board", ".", "shape", "[", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.board_game.hex.HexEnv.get_possible_actions": [[205, 209], ["numpy.where", "hex.HexEnv.coordinate_to_action", "zip"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.board_game.hex.HexEnv.coordinate_to_action"], ["", "@", "staticmethod", "\n", "def", "get_possible_actions", "(", "board", ")", ":", "\n", "        ", "free_x", ",", "free_y", "=", "np", ".", "where", "(", "board", "[", "2", ",", ":", ",", ":", "]", "==", "1", ")", "\n", "return", "[", "HexEnv", ".", "coordinate_to_action", "(", "board", ",", "[", "x", ",", "y", "]", ")", "for", "x", ",", "y", "in", "zip", "(", "free_x", ",", "free_y", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.board_game.hex.HexEnv.game_finished": [[210, 309], ["set", "set", "range", "set.clear", "set.clear", "range", "len", "range", "len", "range", "set.add", "len", "set.pop", "set.add", "set.add", "len", "set.pop", "set.add", "set.add", "set.add", "set.add", "set.add", "set.add", "set.add", "set.add", "set.add", "set.add", "set.add", "set.add", "set.add"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.data_management.simple_replay_buffer.SimpleReplayBuffer.clear", "home.repos.pwc.inspect_result.Rondorf_BOReL.data_management.simple_replay_buffer.SimpleReplayBuffer.clear"], ["", "@", "staticmethod", "\n", "def", "game_finished", "(", "board", ")", ":", "\n", "# Returns 1 if player 1 wins, -1 if player 2 wins and 0 otherwise", "\n", "        ", "d", "=", "board", ".", "shape", "[", "1", "]", "\n", "\n", "inpath", "=", "set", "(", ")", "\n", "newset", "=", "set", "(", ")", "\n", "for", "i", "in", "range", "(", "d", ")", ":", "\n", "            ", "if", "board", "[", "0", ",", "0", ",", "i", "]", "==", "1", ":", "\n", "                ", "newset", ".", "add", "(", "i", ")", "\n", "\n", "", "", "while", "len", "(", "newset", ")", ">", "0", ":", "\n", "            ", "for", "i", "in", "range", "(", "len", "(", "newset", ")", ")", ":", "\n", "                ", "v", "=", "newset", ".", "pop", "(", ")", "\n", "inpath", ".", "add", "(", "v", ")", "\n", "cx", "=", "v", "//", "d", "\n", "cy", "=", "v", "%", "d", "\n", "# Left", "\n", "if", "cy", ">", "0", "and", "board", "[", "0", ",", "cx", ",", "cy", "-", "1", "]", "==", "1", ":", "\n", "                    ", "v", "=", "cx", "*", "d", "+", "cy", "-", "1", "\n", "if", "v", "not", "in", "inpath", ":", "\n", "                        ", "newset", ".", "add", "(", "v", ")", "\n", "# Right", "\n", "", "", "if", "cy", "+", "1", "<", "d", "and", "board", "[", "0", ",", "cx", ",", "cy", "+", "1", "]", "==", "1", ":", "\n", "                    ", "v", "=", "cx", "*", "d", "+", "cy", "+", "1", "\n", "if", "v", "not", "in", "inpath", ":", "\n", "                        ", "newset", ".", "add", "(", "v", ")", "\n", "# Up", "\n", "", "", "if", "cx", ">", "0", "and", "board", "[", "0", ",", "cx", "-", "1", ",", "cy", "]", "==", "1", ":", "\n", "                    ", "v", "=", "(", "cx", "-", "1", ")", "*", "d", "+", "cy", "\n", "if", "v", "not", "in", "inpath", ":", "\n", "                        ", "newset", ".", "add", "(", "v", ")", "\n", "# Down", "\n", "", "", "if", "cx", "+", "1", "<", "d", "and", "board", "[", "0", ",", "cx", "+", "1", ",", "cy", "]", "==", "1", ":", "\n", "                    ", "if", "cx", "+", "1", "==", "d", "-", "1", ":", "\n", "                        ", "return", "1", "\n", "", "v", "=", "(", "cx", "+", "1", ")", "*", "d", "+", "cy", "\n", "if", "v", "not", "in", "inpath", ":", "\n", "                        ", "newset", ".", "add", "(", "v", ")", "\n", "# Up Right", "\n", "", "", "if", "cx", ">", "0", "and", "cy", "+", "1", "<", "d", "and", "board", "[", "0", ",", "cx", "-", "1", ",", "cy", "+", "1", "]", "==", "1", ":", "\n", "                    ", "v", "=", "(", "cx", "-", "1", ")", "*", "d", "+", "cy", "+", "1", "\n", "if", "v", "not", "in", "inpath", ":", "\n", "                        ", "newset", ".", "add", "(", "v", ")", "\n", "# Down Left", "\n", "", "", "if", "cx", "+", "1", "<", "d", "and", "cy", ">", "0", "and", "board", "[", "0", ",", "cx", "+", "1", ",", "cy", "-", "1", "]", "==", "1", ":", "\n", "                    ", "if", "cx", "+", "1", "==", "d", "-", "1", ":", "\n", "                        ", "return", "1", "\n", "", "v", "=", "(", "cx", "+", "1", ")", "*", "d", "+", "cy", "-", "1", "\n", "if", "v", "not", "in", "inpath", ":", "\n", "                        ", "newset", ".", "add", "(", "v", ")", "\n", "\n", "", "", "", "", "inpath", ".", "clear", "(", ")", "\n", "newset", ".", "clear", "(", ")", "\n", "for", "i", "in", "range", "(", "d", ")", ":", "\n", "            ", "if", "board", "[", "1", ",", "i", ",", "0", "]", "==", "1", ":", "\n", "                ", "newset", ".", "add", "(", "i", ")", "\n", "\n", "", "", "while", "len", "(", "newset", ")", ">", "0", ":", "\n", "            ", "for", "i", "in", "range", "(", "len", "(", "newset", ")", ")", ":", "\n", "                ", "v", "=", "newset", ".", "pop", "(", ")", "\n", "inpath", ".", "add", "(", "v", ")", "\n", "cy", "=", "v", "//", "d", "\n", "cx", "=", "v", "%", "d", "\n", "# Left", "\n", "if", "cy", ">", "0", "and", "board", "[", "1", ",", "cx", ",", "cy", "-", "1", "]", "==", "1", ":", "\n", "                    ", "v", "=", "(", "cy", "-", "1", ")", "*", "d", "+", "cx", "\n", "if", "v", "not", "in", "inpath", ":", "\n", "                        ", "newset", ".", "add", "(", "v", ")", "\n", "# Right", "\n", "", "", "if", "cy", "+", "1", "<", "d", "and", "board", "[", "1", ",", "cx", ",", "cy", "+", "1", "]", "==", "1", ":", "\n", "                    ", "if", "cy", "+", "1", "==", "d", "-", "1", ":", "\n", "                        ", "return", "-", "1", "\n", "", "v", "=", "(", "cy", "+", "1", ")", "*", "d", "+", "cx", "\n", "if", "v", "not", "in", "inpath", ":", "\n", "                        ", "newset", ".", "add", "(", "v", ")", "\n", "# Up", "\n", "", "", "if", "cx", ">", "0", "and", "board", "[", "1", ",", "cx", "-", "1", ",", "cy", "]", "==", "1", ":", "\n", "                    ", "v", "=", "cy", "*", "d", "+", "cx", "-", "1", "\n", "if", "v", "not", "in", "inpath", ":", "\n", "                        ", "newset", ".", "add", "(", "v", ")", "\n", "# Down", "\n", "", "", "if", "cx", "+", "1", "<", "d", "and", "board", "[", "1", ",", "cx", "+", "1", ",", "cy", "]", "==", "1", ":", "\n", "                    ", "v", "=", "cy", "*", "d", "+", "cx", "+", "1", "\n", "if", "v", "not", "in", "inpath", ":", "\n", "                        ", "newset", ".", "add", "(", "v", ")", "\n", "# Up Right", "\n", "", "", "if", "cx", ">", "0", "and", "cy", "+", "1", "<", "d", "and", "board", "[", "1", ",", "cx", "-", "1", ",", "cy", "+", "1", "]", "==", "1", ":", "\n", "                    ", "if", "cy", "+", "1", "==", "d", "-", "1", ":", "\n", "                        ", "return", "-", "1", "\n", "", "v", "=", "(", "cy", "+", "1", ")", "*", "d", "+", "cx", "-", "1", "\n", "if", "v", "not", "in", "inpath", ":", "\n", "                        ", "newset", ".", "add", "(", "v", ")", "\n", "# Left Down", "\n", "", "", "if", "cx", "+", "1", "<", "d", "and", "cy", ">", "0", "and", "board", "[", "1", ",", "cx", "+", "1", ",", "cy", "-", "1", "]", "==", "1", ":", "\n", "                    ", "v", "=", "(", "cy", "-", "1", ")", "*", "d", "+", "cx", "+", "1", "\n", "if", "v", "not", "in", "inpath", ":", "\n", "                        ", "newset", ".", "add", "(", "v", ")", "\n", "", "", "", "", "return", "0", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Rondorf_BOReL.board_game.hex.make_random_policy": [[13, 22], ["hex.HexEnv.get_possible_actions", "np_random.randint", "len", "len"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.board_game.hex.HexEnv.get_possible_actions"], ["def", "make_random_policy", "(", "np_random", ")", ":", "\n", "    ", "def", "random_policy", "(", "state", ")", ":", "\n", "        ", "possible_moves", "=", "HexEnv", ".", "get_possible_actions", "(", "state", ")", "\n", "# No moves left", "\n", "if", "len", "(", "possible_moves", ")", "==", "0", ":", "\n", "            ", "return", "None", "\n", "", "a", "=", "np_random", ".", "randint", "(", "len", "(", "possible_moves", ")", ")", "\n", "return", "possible_moves", "[", "a", "]", "\n", "", "return", "random_policy", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.board_game.go.GoState.__init__": [[50, 58], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "board", ",", "color", ")", ":", "\n", "        ", "'''\n        Args:\n            board: current board\n            color: color of current player\n        '''", "\n", "assert", "color", "in", "[", "pachi_py", ".", "BLACK", ",", "pachi_py", ".", "WHITE", "]", ",", "'Invalid player color'", "\n", "self", ".", "board", ",", "self", ".", "color", "=", "board", ",", "color", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.board_game.go.GoState.act": [[59, 69], ["go.GoState", "go.GoState.board.play", "pachi_py.stone_other", "go._action_to_coord"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.utils.play.play", "home.repos.pwc.inspect_result.Rondorf_BOReL.board_game.go._action_to_coord"], ["", "def", "act", "(", "self", ",", "action", ")", ":", "\n", "        ", "'''\n        Executes an action for the current player\n\n        Returns:\n            a new GoState with the new board and the player switched\n        '''", "\n", "return", "GoState", "(", "\n", "self", ".", "board", ".", "play", "(", "_action_to_coord", "(", "self", ".", "board", ",", "action", ")", ",", "self", ".", "color", ")", ",", "\n", "pachi_py", ".", "stone_other", "(", "self", ".", "color", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.board_game.go.GoState.__repr__": [[70, 72], ["six.u", "go.GoState.board.__repr__().decode", "pachi_py.color_to_str", "go.GoState.board.__repr__"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.decode", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.__repr__"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "'To play: {}\\n{}'", ".", "format", "(", "six", ".", "u", "(", "pachi_py", ".", "color_to_str", "(", "self", ".", "color", ")", ")", ",", "self", ".", "board", ".", "__repr__", "(", ")", ".", "decode", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.board_game.go.GoEnv.__init__": [[127, 169], ["go.GoEnv._seed", "environments.mujoco.rand_param_envs.gym.spaces.Box", "environments.mujoco.rand_param_envs.gym.spaces.Discrete", "isinstance", "environments.mujoco.rand_param_envs.gym.error.Error", "pachi_py.CreateBoard().encode", "numpy.zeros", "numpy.ones", "environments.mujoco.rand_param_envs.gym.error.Error", "pachi_py.CreateBoard"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.algorithmic.algorithmic_env.AlgorithmicEnv._seed", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.encode", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.zeros", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.ones"], ["def", "__init__", "(", "self", ",", "player_color", ",", "opponent", ",", "observation_type", ",", "illegal_move_mode", ",", "board_size", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            player_color: Stone color for the agent. Either 'black' or 'white'\n            opponent: An opponent policy\n            observation_type: State encoding\n            illegal_move_mode: What to do when the agent makes an illegal move. Choices: 'raise' or 'lose'\n        \"\"\"", "\n", "assert", "isinstance", "(", "board_size", ",", "int", ")", "and", "board_size", ">=", "1", ",", "'Invalid board size: {}'", ".", "format", "(", "board_size", ")", "\n", "self", ".", "board_size", "=", "board_size", "\n", "\n", "self", ".", "_seed", "(", ")", "\n", "\n", "colormap", "=", "{", "\n", "'black'", ":", "pachi_py", ".", "BLACK", ",", "\n", "'white'", ":", "pachi_py", ".", "WHITE", ",", "\n", "}", "\n", "try", ":", "\n", "            ", "self", ".", "player_color", "=", "colormap", "[", "player_color", "]", "\n", "", "except", "KeyError", ":", "\n", "            ", "raise", "error", ".", "Error", "(", "\"player_color must be 'black' or 'white', not {}\"", ".", "format", "(", "player_color", ")", ")", "\n", "\n", "", "self", ".", "opponent_policy", "=", "None", "\n", "self", ".", "opponent", "=", "opponent", "\n", "\n", "assert", "observation_type", "in", "[", "'image3c'", "]", "\n", "self", ".", "observation_type", "=", "observation_type", "\n", "\n", "assert", "illegal_move_mode", "in", "[", "'lose'", ",", "'raise'", "]", "\n", "self", ".", "illegal_move_mode", "=", "illegal_move_mode", "\n", "\n", "if", "self", ".", "observation_type", "!=", "'image3c'", ":", "\n", "            ", "raise", "error", ".", "Error", "(", "'Unsupported observation type: {}'", ".", "format", "(", "self", ".", "observation_type", ")", ")", "\n", "\n", "", "shape", "=", "pachi_py", ".", "CreateBoard", "(", "self", ".", "board_size", ")", ".", "encode", "(", ")", ".", "shape", "\n", "self", ".", "observation_space", "=", "spaces", ".", "Box", "(", "np", ".", "zeros", "(", "shape", ")", ",", "np", ".", "ones", "(", "shape", ")", ")", "\n", "# One action for each board position, pass, and resign", "\n", "self", ".", "action_space", "=", "spaces", ".", "Discrete", "(", "self", ".", "board_size", "**", "2", "+", "2", ")", "\n", "\n", "# Filled in by _reset()", "\n", "self", ".", "state", "=", "None", "\n", "self", ".", "done", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.board_game.go.GoEnv._seed": [[170, 176], ["environments.mujoco.rand_param_envs.gym.utils.seeding.np_random", "pachi_py.pachi_srand", "environments.mujoco.rand_param_envs.gym.utils.seeding.hash_seed"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.utils.seeding.np_random", "home.repos.pwc.inspect_result.Rondorf_BOReL.utils.seeding.hash_seed"], ["", "def", "_seed", "(", "self", ",", "seed", "=", "None", ")", ":", "\n", "        ", "self", ".", "np_random", ",", "seed1", "=", "seeding", ".", "np_random", "(", "seed", ")", "\n", "# Derive a random seed.", "\n", "seed2", "=", "seeding", ".", "hash_seed", "(", "seed1", "+", "1", ")", "%", "2", "**", "32", "\n", "pachi_py", ".", "pachi_srand", "(", "seed2", ")", "\n", "return", "[", "seed1", ",", "seed2", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.board_game.go.GoEnv._reset": [[177, 195], ["go.GoState", "go.GoEnv._reset_opponent", "go.GoEnv.state.board.encode", "pachi_py.CreateBoard", "go.GoEnv._exec_opponent_play"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.board_game.go.GoEnv._reset_opponent", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.encode", "home.repos.pwc.inspect_result.Rondorf_BOReL.board_game.go.GoEnv._exec_opponent_play"], ["", "def", "_reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "state", "=", "GoState", "(", "pachi_py", ".", "CreateBoard", "(", "self", ".", "board_size", ")", ",", "pachi_py", ".", "BLACK", ")", "\n", "\n", "# (re-initialize) the opponent", "\n", "# necessary because a pachi engine is attached to a game via internal data in a board", "\n", "# so with a fresh game, we need a fresh engine", "\n", "self", ".", "_reset_opponent", "(", "self", ".", "state", ".", "board", ")", "\n", "\n", "# Let the opponent play if it's not the agent's turn", "\n", "opponent_resigned", "=", "False", "\n", "if", "self", ".", "state", ".", "color", "!=", "self", ".", "player_color", ":", "\n", "            ", "self", ".", "state", ",", "opponent_resigned", "=", "self", ".", "_exec_opponent_play", "(", "self", ".", "state", ",", "None", ",", "None", ")", "\n", "\n", "# We should be back to the agent color", "\n", "", "assert", "self", ".", "state", ".", "color", "==", "self", ".", "player_color", "\n", "\n", "self", ".", "done", "=", "self", ".", "state", ".", "board", ".", "is_terminal", "or", "opponent_resigned", "\n", "return", "self", ".", "state", ".", "board", ".", "encode", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.board_game.go.GoEnv._close": [[196, 199], ["None"], "methods", ["None"], ["", "def", "_close", "(", "self", ")", ":", "\n", "        ", "self", ".", "opponent_policy", "=", "None", "\n", "self", ".", "state", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.board_game.go.GoEnv._render": [[200, 206], ["outfile.write", "six.StringIO", "repr"], "methods", ["None"], ["", "def", "_render", "(", "self", ",", "mode", "=", "\"human\"", ",", "close", "=", "False", ")", ":", "\n", "        ", "if", "close", ":", "\n", "            ", "return", "\n", "", "outfile", "=", "StringIO", "(", ")", "if", "mode", "==", "'ansi'", "else", "sys", ".", "stdout", "\n", "outfile", ".", "write", "(", "repr", "(", "self", ".", "state", ")", "+", "'\\n'", ")", "\n", "return", "outfile", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.board_game.go.GoEnv._step": [[207, 257], ["go._resign_action", "go.GoEnv.state.act", "go.GoEnv._exec_opponent_play", "go.GoEnv.state.board.encode", "go.GoEnv.state.board.encode", "go.GoEnv.state.board.encode", "go.GoEnv.state.board.encode", "six.reraise", "go.GoEnv.state.board.encode", "environments.mujoco.rand_param_envs.gym.error.Error", "sys.exc_info", "go.GoEnv.state.board.encode"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.board_game.go._resign_action", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjDataWrapper.act", "home.repos.pwc.inspect_result.Rondorf_BOReL.board_game.go.GoEnv._exec_opponent_play", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.encode", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.encode", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.encode", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.encode", "home.repos.pwc.inspect_result.Rondorf_BOReL.utils.reraise.reraise", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.encode", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.encode"], ["", "def", "_step", "(", "self", ",", "action", ")", ":", "\n", "        ", "assert", "self", ".", "state", ".", "color", "==", "self", ".", "player_color", "\n", "\n", "# If already terminal, then don't do anything", "\n", "if", "self", ".", "done", ":", "\n", "            ", "return", "self", ".", "state", ".", "board", ".", "encode", "(", ")", ",", "0.", ",", "True", ",", "{", "'state'", ":", "self", ".", "state", "}", "\n", "\n", "# If resigned, then we're done", "\n", "", "if", "action", "==", "_resign_action", "(", "self", ".", "board_size", ")", ":", "\n", "            ", "self", ".", "done", "=", "True", "\n", "return", "self", ".", "state", ".", "board", ".", "encode", "(", ")", ",", "-", "1.", ",", "True", ",", "{", "'state'", ":", "self", ".", "state", "}", "\n", "\n", "# Play", "\n", "", "prev_state", "=", "self", ".", "state", "\n", "try", ":", "\n", "            ", "self", ".", "state", "=", "self", ".", "state", ".", "act", "(", "action", ")", "\n", "", "except", "pachi_py", ".", "IllegalMove", ":", "\n", "            ", "if", "self", ".", "illegal_move_mode", "==", "'raise'", ":", "\n", "                ", "six", ".", "reraise", "(", "*", "sys", ".", "exc_info", "(", ")", ")", "\n", "", "elif", "self", ".", "illegal_move_mode", "==", "'lose'", ":", "\n", "# Automatic loss on illegal move", "\n", "                ", "self", ".", "done", "=", "True", "\n", "return", "self", ".", "state", ".", "board", ".", "encode", "(", ")", ",", "-", "1.", ",", "True", ",", "{", "'state'", ":", "self", ".", "state", "}", "\n", "", "else", ":", "\n", "                ", "raise", "error", ".", "Error", "(", "'Unsupported illegal move action: {}'", ".", "format", "(", "self", ".", "illegal_move_mode", ")", ")", "\n", "\n", "# Opponent play", "\n", "", "", "if", "not", "self", ".", "state", ".", "board", ".", "is_terminal", ":", "\n", "            ", "self", ".", "state", ",", "opponent_resigned", "=", "self", ".", "_exec_opponent_play", "(", "self", ".", "state", ",", "prev_state", ",", "action", ")", "\n", "# After opponent play, we should be back to the original color", "\n", "assert", "self", ".", "state", ".", "color", "==", "self", ".", "player_color", "\n", "\n", "# If the opponent resigns, then the agent wins", "\n", "if", "opponent_resigned", ":", "\n", "                ", "self", ".", "done", "=", "True", "\n", "return", "self", ".", "state", ".", "board", ".", "encode", "(", ")", ",", "1.", ",", "True", ",", "{", "'state'", ":", "self", ".", "state", "}", "\n", "\n", "# Reward: if nonterminal, then the reward is 0", "\n", "", "", "if", "not", "self", ".", "state", ".", "board", ".", "is_terminal", ":", "\n", "            ", "self", ".", "done", "=", "False", "\n", "return", "self", ".", "state", ".", "board", ".", "encode", "(", ")", ",", "0.", ",", "False", ",", "{", "'state'", ":", "self", ".", "state", "}", "\n", "\n", "# We're in a terminal state. Reward is 1 if won, -1 if lost", "\n", "", "assert", "self", ".", "state", ".", "board", ".", "is_terminal", "\n", "self", ".", "done", "=", "True", "\n", "white_wins", "=", "self", ".", "state", ".", "board", ".", "official_score", ">", "0", "\n", "black_wins", "=", "self", ".", "state", ".", "board", ".", "official_score", "<", "0", "\n", "player_wins", "=", "(", "white_wins", "and", "self", ".", "player_color", "==", "pachi_py", ".", "WHITE", ")", "or", "(", "black_wins", "and", "self", ".", "player_color", "==", "pachi_py", ".", "BLACK", ")", "\n", "reward", "=", "1.", "if", "player_wins", "else", "-", "1.", "if", "(", "white_wins", "or", "black_wins", ")", "else", "0.", "\n", "return", "self", ".", "state", ".", "board", ".", "encode", "(", ")", ",", "reward", ",", "True", ",", "{", "'state'", ":", "self", ".", "state", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.board_game.go.GoEnv._exec_opponent_play": [[258, 263], ["go.GoEnv.opponent_policy", "go._resign_action", "curr_state.act"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.board_game.go._resign_action", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjDataWrapper.act"], ["", "def", "_exec_opponent_play", "(", "self", ",", "curr_state", ",", "prev_state", ",", "prev_action", ")", ":", "\n", "        ", "assert", "curr_state", ".", "color", "!=", "self", ".", "player_color", "\n", "opponent_action", "=", "self", ".", "opponent_policy", "(", "curr_state", ",", "prev_state", ",", "prev_action", ")", "\n", "opponent_resigned", "=", "opponent_action", "==", "_resign_action", "(", "self", ".", "board_size", ")", "\n", "return", "curr_state", ".", "act", "(", "opponent_action", ")", ",", "opponent_resigned", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.board_game.go.GoEnv._state": [[264, 267], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "_state", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "state", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.board_game.go.GoEnv._reset_opponent": [[268, 275], ["go.make_random_policy", "go.make_pachi_policy", "environments.mujoco.rand_param_envs.gym.error.Error", "six.b", "six.b"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.board_game.go.make_random_policy", "home.repos.pwc.inspect_result.Rondorf_BOReL.board_game.go.make_pachi_policy"], ["", "def", "_reset_opponent", "(", "self", ",", "board", ")", ":", "\n", "        ", "if", "self", ".", "opponent", "==", "'random'", ":", "\n", "            ", "self", ".", "opponent_policy", "=", "make_random_policy", "(", "self", ".", "np_random", ")", "\n", "", "elif", "self", ".", "opponent", "==", "'pachi:uct:_2400'", ":", "\n", "            ", "self", ".", "opponent_policy", "=", "make_pachi_policy", "(", "board", "=", "board", ",", "engine_type", "=", "six", ".", "b", "(", "'uct'", ")", ",", "pachi_timestr", "=", "six", ".", "b", "(", "'_2400'", ")", ")", "# TODO: strength as argument", "\n", "", "else", ":", "\n", "            ", "raise", "error", ".", "Error", "(", "'Unrecognized opponent policy {}'", ".", "format", "(", "self", ".", "opponent", ")", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.Rondorf_BOReL.board_game.go._pass_action": [[22, 24], ["None"], "function", ["None"], ["def", "_pass_action", "(", "board_size", ")", ":", "\n", "    ", "return", "board_size", "**", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.board_game.go._resign_action": [[25, 27], ["None"], "function", ["None"], ["", "def", "_resign_action", "(", "board_size", ")", ":", "\n", "    ", "return", "board_size", "**", "2", "+", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.board_game.go._coord_to_action": [[28, 34], ["board.coord_to_ij", "go._pass_action", "go._resign_action"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.board_game.go._pass_action", "home.repos.pwc.inspect_result.Rondorf_BOReL.board_game.go._resign_action"], ["", "def", "_coord_to_action", "(", "board", ",", "c", ")", ":", "\n", "    ", "'''Converts Pachi coordinates to actions'''", "\n", "if", "c", "==", "pachi_py", ".", "PASS_COORD", ":", "return", "_pass_action", "(", "board", ".", "size", ")", "\n", "if", "c", "==", "pachi_py", ".", "RESIGN_COORD", ":", "return", "_resign_action", "(", "board", ".", "size", ")", "\n", "i", ",", "j", "=", "board", ".", "coord_to_ij", "(", "c", ")", "\n", "return", "i", "*", "board", ".", "size", "+", "j", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.board_game.go._action_to_coord": [[35, 40], ["board.ij_to_coord", "go._pass_action", "go._resign_action"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.board_game.go._pass_action", "home.repos.pwc.inspect_result.Rondorf_BOReL.board_game.go._resign_action"], ["", "def", "_action_to_coord", "(", "board", ",", "a", ")", ":", "\n", "    ", "'''Converts actions to Pachi coordinates'''", "\n", "if", "a", "==", "_pass_action", "(", "board", ".", "size", ")", ":", "return", "pachi_py", ".", "PASS_COORD", "\n", "if", "a", "==", "_resign_action", "(", "board", ".", "size", ")", ":", "return", "pachi_py", ".", "RESIGN_COORD", "\n", "return", "board", ".", "ij_to_coord", "(", "a", "//", "board", ".", "size", ",", "a", "%", "board", ".", "size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.board_game.go.str_to_action": [[41, 43], ["go._coord_to_action", "board.str_to_coord", "s.encode"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.board_game.go._coord_to_action", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.encode"], ["", "def", "str_to_action", "(", "board", ",", "s", ")", ":", "\n", "    ", "return", "_coord_to_action", "(", "board", ",", "board", ".", "str_to_coord", "(", "s", ".", "encode", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.board_game.go.make_random_policy": [[75, 81], ["b.get_legal_coords", "go._coord_to_action", "np_random.choice"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.board_game.go._coord_to_action"], ["", "", "def", "make_random_policy", "(", "np_random", ")", ":", "\n", "    ", "def", "random_policy", "(", "curr_state", ",", "prev_state", ",", "prev_action", ")", ":", "\n", "        ", "b", "=", "curr_state", ".", "board", "\n", "legal_coords", "=", "b", ".", "get_legal_coords", "(", "curr_state", ".", "color", ")", "\n", "return", "_coord_to_action", "(", "b", ",", "np_random", ".", "choice", "(", "legal_coords", ")", ")", "\n", "", "return", "random_policy", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.board_game.go.make_pachi_policy": [[82, 97], ["pachi_py.PyPachiEngine", "six.b", "pachi_py.PyPachiEngine.genmove", "go._coord_to_action", "pachi_py.PyPachiEngine.curr_board.play_inplace", "go._action_to_coord", "pachi_py.PyPachiEngine.notify", "pachi_py.PyPachiEngine.curr_board.play_inplace"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.board_game.go._coord_to_action", "home.repos.pwc.inspect_result.Rondorf_BOReL.board_game.go._action_to_coord"], ["", "def", "make_pachi_policy", "(", "board", ",", "engine_type", "=", "'uct'", ",", "threads", "=", "1", ",", "pachi_timestr", "=", "''", ")", ":", "\n", "    ", "engine", "=", "pachi_py", ".", "PyPachiEngine", "(", "board", ",", "engine_type", ",", "six", ".", "b", "(", "'threads=%d'", "%", "threads", ")", ")", "\n", "\n", "def", "pachi_policy", "(", "curr_state", ",", "prev_state", ",", "prev_action", ")", ":", "\n", "        ", "if", "prev_state", "is", "not", "None", ":", "\n", "            ", "assert", "engine", ".", "curr_board", "==", "prev_state", ".", "board", ",", "'Engine internal board is inconsistent with provided board. The Pachi engine must be called consistently as the game progresses.'", "\n", "prev_coord", "=", "_action_to_coord", "(", "prev_state", ".", "board", ",", "prev_action", ")", "\n", "engine", ".", "notify", "(", "prev_coord", ",", "prev_state", ".", "color", ")", "\n", "engine", ".", "curr_board", ".", "play_inplace", "(", "prev_coord", ",", "prev_state", ".", "color", ")", "\n", "", "out_coord", "=", "engine", ".", "genmove", "(", "curr_state", ".", "color", ",", "pachi_timestr", ")", "\n", "out_action", "=", "_coord_to_action", "(", "curr_state", ".", "board", ",", "out_coord", ")", "\n", "engine", ".", "curr_board", ".", "play_inplace", "(", "out_coord", ",", "curr_state", ".", "color", ")", "\n", "return", "out_action", "\n", "\n", "", "return", "pachi_policy", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.board_game.go._play": [[99, 119], ["go.GoState", "pachi_py.CreateBoard", "go.GoState.act", "moves.append"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjDataWrapper.act"], ["", "def", "_play", "(", "black_policy_fn", ",", "white_policy_fn", ",", "board_size", "=", "19", ")", ":", "\n", "    ", "'''\n    Samples a trajectory for two player policies.\n    Args:\n        black_policy_fn, white_policy_fn: functions that maps a GoState to a move coord (int)\n    '''", "\n", "moves", "=", "[", "]", "\n", "\n", "prev_state", ",", "prev_action", "=", "None", ",", "None", "\n", "curr_state", "=", "GoState", "(", "pachi_py", ".", "CreateBoard", "(", "board_size", ")", ",", "BLACK", ")", "\n", "\n", "while", "not", "curr_state", ".", "board", ".", "is_terminal", ":", "\n", "        ", "a", "=", "(", "black_policy_fn", "if", "curr_state", ".", "color", "==", "BLACK", "else", "white_policy_fn", ")", "(", "curr_state", ",", "prev_state", ",", "prev_action", ")", "\n", "next_state", "=", "curr_state", ".", "act", "(", "a", ")", "\n", "moves", ".", "append", "(", "(", "curr_state", ",", "a", ",", "next_state", ")", ")", "\n", "\n", "prev_state", ",", "prev_action", "=", "curr_state", ",", "a", "\n", "curr_state", "=", "next_state", "\n", "\n", "", "return", "moves", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.algorithmic.reverse.ReverseEnv.__init__": [[11, 14], ["environments.mujoco.rand_param_envs.gym.envs.algorithmic.algorithmic_env.TapeAlgorithmicEnv.__init__"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.__init__"], ["def", "__init__", "(", "self", ",", "base", "=", "2", ")", ":", "\n", "        ", "super", "(", "ReverseEnv", ",", "self", ")", ".", "__init__", "(", "base", "=", "base", ",", "chars", "=", "True", ",", "starting_min_length", "=", "1", ")", "\n", "self", ".", "last", "=", "50", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.algorithmic.reverse.ReverseEnv.target_from_input_data": [[15, 17], ["list", "reversed"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.ListableAPIResource.list"], ["", "def", "target_from_input_data", "(", "self", ",", "input_str", ")", ":", "\n", "        ", "return", "list", "(", "reversed", "(", "input_str", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Rondorf_BOReL.algorithmic.reversed_addition.ReversedAdditionEnv.__init__": [[6, 8], ["environments.mujoco.rand_param_envs.gym.envs.algorithmic.algorithmic_env.GridAlgorithmicEnv.__init__"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.__init__"], ["    ", "def", "__init__", "(", "self", ",", "rows", "=", "2", ",", "base", "=", "3", ")", ":", "\n", "        ", "super", "(", "ReversedAdditionEnv", ",", "self", ")", ".", "__init__", "(", "rows", "=", "rows", ",", "base", "=", "base", ",", "chars", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.algorithmic.reversed_addition.ReversedAdditionEnv.target_from_input_data": [[9, 20], ["target.append", "target.append", "sum"], "methods", ["None"], ["", "def", "target_from_input_data", "(", "self", ",", "input_strings", ")", ":", "\n", "        ", "curry", "=", "0", "\n", "target", "=", "[", "]", "\n", "for", "digits", "in", "input_strings", ":", "\n", "            ", "total", "=", "sum", "(", "digits", ")", "+", "curry", "\n", "target", ".", "append", "(", "total", "%", "self", ".", "base", ")", "\n", "curry", "=", "total", "//", "self", ".", "base", "\n", "\n", "", "if", "curry", ">", "0", ":", "\n", "            ", "target", ".", "append", "(", "curry", ")", "\n", "", "return", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.algorithmic.reversed_addition.ReversedAdditionEnv.time_limit": [[21, 31], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "time_limit", "(", "self", ")", ":", "\n", "# Quirk preserved for the sake of consistency: add the length of the input", "\n", "# rather than the length of the desired output (which may differ if there's", "\n", "# an extra carried digit).", "\n", "# TODO: It seems like this time limit is so strict as to make Addition3-v0", "\n", "# unsolvable, since agents aren't even given enough time steps to look at", "\n", "# all the digits. (The solutions on the scoreboard seem to only work by", "\n", "# save-scumming.)", "\n", "        ", "return", "self", ".", "input_width", "*", "2", "+", "4", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Rondorf_BOReL.algorithmic.copy_.CopyEnv.__init__": [[9, 11], ["environments.mujoco.rand_param_envs.gym.envs.algorithmic.algorithmic_env.TapeAlgorithmicEnv.__init__"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.__init__"], ["    ", "def", "__init__", "(", "self", ",", "base", "=", "5", ",", "chars", "=", "True", ")", ":", "\n", "        ", "super", "(", "CopyEnv", ",", "self", ")", ".", "__init__", "(", "base", "=", "base", ",", "chars", "=", "chars", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.algorithmic.copy_.CopyEnv.target_from_input_data": [[12, 14], ["None"], "methods", ["None"], ["", "def", "target_from_input_data", "(", "self", ",", "input_data", ")", ":", "\n", "        ", "return", "input_data", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.algorithmic.duplicated_input.DuplicatedInputEnv.__init__": [[10, 13], ["environments.mujoco.rand_param_envs.gym.envs.algorithmic.algorithmic_env.TapeAlgorithmicEnv.__init__"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.__init__"], ["    ", "def", "__init__", "(", "self", ",", "duplication", "=", "2", ",", "base", "=", "5", ")", ":", "\n", "        ", "self", ".", "duplication", "=", "duplication", "\n", "super", "(", "DuplicatedInputEnv", ",", "self", ")", ".", "__init__", "(", "base", "=", "base", ",", "chars", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.algorithmic.duplicated_input.DuplicatedInputEnv.generate_input_data": [[14, 23], ["range", "duplicated_input.DuplicatedInputEnv.np_random.randint", "range", "res.append"], "methods", ["None"], ["", "def", "generate_input_data", "(", "self", ",", "size", ")", ":", "\n", "        ", "res", "=", "[", "]", "\n", "if", "size", "<", "self", ".", "duplication", ":", "\n", "            ", "size", "=", "self", ".", "duplication", "\n", "", "for", "i", "in", "range", "(", "size", "//", "self", ".", "duplication", ")", ":", "\n", "            ", "char", "=", "self", ".", "np_random", ".", "randint", "(", "self", ".", "base", ")", "\n", "for", "_", "in", "range", "(", "self", ".", "duplication", ")", ":", "\n", "                ", "res", ".", "append", "(", "char", ")", "\n", "", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.algorithmic.duplicated_input.DuplicatedInputEnv.target_from_input_data": [[24, 26], ["range", "len"], "methods", ["None"], ["", "def", "target_from_input_data", "(", "self", ",", "input_data", ")", ":", "\n", "        ", "return", "[", "input_data", "[", "i", "]", "for", "i", "in", "range", "(", "0", ",", "len", "(", "input_data", ")", ",", "self", ".", "duplication", ")", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Rondorf_BOReL.algorithmic.algorithmic_env.AlgorithmicEnv.__init__": [[51, 87], ["algorithmic_env.AlgorithmicEnv.charmap.append", "environments.mujoco.rand_param_envs.gym.spaces.Tuple", "environments.mujoco.rand_param_envs.gym.spaces.Discrete", "algorithmic_env.AlgorithmicEnv._seed", "algorithmic_env.AlgorithmicEnv.reset", "chr", "str", "environments.mujoco.rand_param_envs.gym.spaces.Discrete", "environments.mujoco.rand_param_envs.gym.spaces.Discrete", "environments.mujoco.rand_param_envs.gym.spaces.Discrete", "range", "range", "len", "ord"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.algorithmic.algorithmic_env.AlgorithmicEnv._seed", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.reset"], ["def", "__init__", "(", "self", ",", "base", "=", "10", ",", "chars", "=", "False", ",", "starting_min_length", "=", "2", ")", ":", "\n", "        ", "\"\"\"\n        base: Number of distinct characters. \n        chars: If True, use uppercase alphabet. Otherwise, digits. Only affects\n               rendering.\n        starting_min_length: Minimum input string length. Ramps up as episodes \n                             are consistently solved.\n        \"\"\"", "\n", "self", ".", "base", "=", "base", "\n", "# Keep track of this many past episodes", "\n", "self", ".", "last", "=", "10", "\n", "# Cumulative reward earned this episode", "\n", "self", ".", "episode_total_reward", "=", "None", "\n", "# Running tally of reward shortfalls. e.g. if there were 10 points to earn and", "\n", "# we got 8, we'd append -2", "\n", "AlgorithmicEnv", ".", "reward_shortfalls", "=", "[", "]", "\n", "if", "chars", ":", "\n", "            ", "self", ".", "charmap", "=", "[", "chr", "(", "ord", "(", "'A'", ")", "+", "i", ")", "for", "i", "in", "range", "(", "base", ")", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "charmap", "=", "[", "str", "(", "i", ")", "for", "i", "in", "range", "(", "base", ")", "]", "\n", "", "self", ".", "charmap", ".", "append", "(", "' '", ")", "\n", "# TODO: Not clear why this is a class variable rather than instance. ", "\n", "# Could lead to some spooky action at a distance if someone is working", "\n", "# with multiple algorithmic envs at once. Also makes testing tricky.", "\n", "AlgorithmicEnv", ".", "min_length", "=", "starting_min_length", "\n", "# Three sub-actions:", "\n", "#       1. Move read head left or write (or up/down)", "\n", "#       2. Write or not", "\n", "#       3. Which character to write. (Ignored if should_write=0)", "\n", "self", ".", "action_space", "=", "Tuple", "(", "\n", "[", "Discrete", "(", "len", "(", "self", ".", "MOVEMENTS", ")", ")", ",", "Discrete", "(", "2", ")", ",", "Discrete", "(", "self", ".", "base", ")", "]", "\n", ")", "\n", "# Can see just what is on the input tape (one of n characters, or nothing)", "\n", "self", ".", "observation_space", "=", "Discrete", "(", "self", ".", "base", "+", "1", ")", "\n", "self", ".", "_seed", "(", ")", "\n", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.algorithmic.algorithmic_env.AlgorithmicEnv._movement_idx": [[88, 91], ["kls.MOVEMENTS.index"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.index"], ["", "@", "classmethod", "\n", "def", "_movement_idx", "(", "kls", ",", "movement_name", ")", ":", "\n", "        ", "return", "kls", ".", "MOVEMENTS", ".", "index", "(", "movement_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.algorithmic.algorithmic_env.AlgorithmicEnv._seed": [[92, 95], ["environments.mujoco.rand_param_envs.gym.utils.seeding.np_random"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.utils.seeding.np_random"], ["", "def", "_seed", "(", "self", ",", "seed", "=", "None", ")", ":", "\n", "        ", "self", ".", "np_random", ",", "seed", "=", "seeding", ".", "np_random", "(", "seed", ")", "\n", "return", "[", "seed", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.algorithmic.algorithmic_env.AlgorithmicEnv._get_obs": [[96, 100], ["None"], "methods", ["None"], ["", "def", "_get_obs", "(", "self", ",", "pos", "=", "None", ")", ":", "\n", "        ", "\"\"\"Return an observation corresponding to the given read head position\n        (or the current read head position, if none is given).\"\"\"", "\n", "raise", "NotImplemented", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.algorithmic.algorithmic_env.AlgorithmicEnv._get_str_obs": [[101, 104], ["algorithmic_env.AlgorithmicEnv._get_obs"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.point_robot.PointEnv._get_obs"], ["", "def", "_get_str_obs", "(", "self", ",", "pos", "=", "None", ")", ":", "\n", "        ", "ret", "=", "self", ".", "_get_obs", "(", "pos", ")", "\n", "return", "self", ".", "charmap", "[", "ret", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.algorithmic.algorithmic_env.AlgorithmicEnv._get_str_target": [[105, 112], ["len"], "methods", ["None"], ["", "def", "_get_str_target", "(", "self", ",", "pos", ")", ":", "\n", "        ", "\"\"\"Return the ith character of the target string (or \" \" if index\n        out of bounds).\"\"\"", "\n", "if", "pos", "<", "0", "or", "len", "(", "self", ".", "target", ")", "<=", "pos", ":", "\n", "            ", "return", "\" \"", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "charmap", "[", "self", ".", "target", "[", "pos", "]", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.algorithmic.algorithmic_env.AlgorithmicEnv._render_observation": [[113, 116], ["None"], "methods", ["None"], ["", "", "def", "_render_observation", "(", "self", ")", ":", "\n", "        ", "\"\"\"Return a string representation of the input tape/grid.\"\"\"", "\n", "raise", "NotImplemented", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.algorithmic.algorithmic_env.AlgorithmicEnv._render": [[117, 159], ["outfile.write", "outfile.write", "algorithmic_env.AlgorithmicEnv._render_observation", "range", "outfile.write", "outfile.write", "outfile.write", "six.StringIO", "algorithmic_env.AlgorithmicEnv._get_str_target", "outfile.write", "outfile.write", "outfile.write", "outfile.write", "outfile.write", "outfile.write", "len", "algorithmic_env.AlgorithmicEnv._get_str_target", "len", "environments.mujoco.rand_param_envs.gym.utils.colorize", "algorithmic_env.AlgorithmicEnv._get_str_target"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.algorithmic.algorithmic_env.GridAlgorithmicEnv._render_observation", "home.repos.pwc.inspect_result.Rondorf_BOReL.algorithmic.algorithmic_env.AlgorithmicEnv._get_str_target", "home.repos.pwc.inspect_result.Rondorf_BOReL.algorithmic.algorithmic_env.AlgorithmicEnv._get_str_target", "home.repos.pwc.inspect_result.Rondorf_BOReL.utils.colorize.colorize", "home.repos.pwc.inspect_result.Rondorf_BOReL.algorithmic.algorithmic_env.AlgorithmicEnv._get_str_target"], ["", "def", "_render", "(", "self", ",", "mode", "=", "'human'", ",", "close", "=", "False", ")", ":", "\n", "        ", "if", "close", ":", "\n", "# Nothing interesting to close", "\n", "            ", "return", "\n", "\n", "", "outfile", "=", "StringIO", "(", ")", "if", "mode", "==", "'ansi'", "else", "sys", ".", "stdout", "\n", "inp", "=", "\"Total length of input instance: %d, step: %d\\n\"", "%", "(", "self", ".", "input_width", ",", "self", ".", "time", ")", "\n", "outfile", ".", "write", "(", "inp", ")", "\n", "x", ",", "y", ",", "action", "=", "self", ".", "read_head_position", ",", "self", ".", "write_head_position", ",", "self", ".", "last_action", "\n", "if", "action", "is", "not", "None", ":", "\n", "            ", "inp_act", ",", "out_act", ",", "pred", "=", "action", "\n", "", "outfile", ".", "write", "(", "\"=\"", "*", "(", "len", "(", "inp", ")", "-", "1", ")", "+", "\"\\n\"", ")", "\n", "y_str", "=", "\"Output Tape         : \"", "\n", "target_str", "=", "\"Targets             : \"", "\n", "if", "action", "is", "not", "None", ":", "\n", "            ", "pred_str", "=", "self", ".", "charmap", "[", "pred", "]", "\n", "", "x_str", "=", "self", ".", "_render_observation", "(", ")", "\n", "for", "i", "in", "range", "(", "-", "2", ",", "len", "(", "self", ".", "target", ")", "+", "2", ")", ":", "\n", "            ", "target_str", "+=", "self", ".", "_get_str_target", "(", "i", ")", "\n", "if", "i", "<", "y", "-", "1", ":", "\n", "                ", "y_str", "+=", "self", ".", "_get_str_target", "(", "i", ")", "\n", "", "elif", "i", "==", "(", "y", "-", "1", ")", ":", "\n", "                ", "if", "action", "is", "not", "None", "and", "out_act", "==", "1", ":", "\n", "                    ", "color", "=", "'green'", "if", "pred", "==", "self", ".", "target", "[", "i", "]", "else", "'red'", "\n", "y_str", "+=", "colorize", "(", "pred_str", ",", "color", ",", "highlight", "=", "True", ")", "\n", "", "else", ":", "\n", "                    ", "y_str", "+=", "self", ".", "_get_str_target", "(", "i", ")", "\n", "", "", "", "outfile", ".", "write", "(", "x_str", ")", "\n", "outfile", ".", "write", "(", "y_str", "+", "\"\\n\"", ")", "\n", "outfile", ".", "write", "(", "target_str", "+", "\"\\n\\n\"", ")", "\n", "\n", "if", "action", "is", "not", "None", ":", "\n", "            ", "outfile", ".", "write", "(", "\"Current reward      :   %.3f\\n\"", "%", "self", ".", "last_reward", ")", "\n", "outfile", ".", "write", "(", "\"Cumulative reward   :   %.3f\\n\"", "%", "self", ".", "episode_total_reward", ")", "\n", "move", "=", "self", ".", "MOVEMENTS", "[", "inp_act", "]", "\n", "outfile", ".", "write", "(", "\"Action              :   Tuple(move over input: %s,\\n\"", "%", "move", ")", "\n", "out_act", "=", "out_act", "==", "1", "\n", "outfile", ".", "write", "(", "\"                              write to the output tape: %s,\\n\"", "%", "out_act", ")", "\n", "outfile", ".", "write", "(", "\"                              prediction: %s)\\n\"", "%", "pred_str", ")", "\n", "", "else", ":", "\n", "            ", "outfile", ".", "write", "(", "\"\\n\"", "*", "5", ")", "\n", "", "return", "outfile", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.algorithmic.algorithmic_env.AlgorithmicEnv.input_width": [[160, 163], ["len"], "methods", ["None"], ["", "@", "property", "\n", "def", "input_width", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "input_data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.algorithmic.algorithmic_env.AlgorithmicEnv._step": [[164, 198], ["algorithmic_env.AlgorithmicEnv.action_space.contains", "algorithmic_env.AlgorithmicEnv._move", "algorithmic_env.AlgorithmicEnv._get_obs", "len", "logger.warn"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.spaces.discrete.Discrete.contains", "home.repos.pwc.inspect_result.Rondorf_BOReL.algorithmic.algorithmic_env.GridAlgorithmicEnv._move", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.point_robot.PointEnv._get_obs"], ["", "def", "_step", "(", "self", ",", "action", ")", ":", "\n", "        ", "assert", "self", ".", "action_space", ".", "contains", "(", "action", ")", "\n", "self", ".", "last_action", "=", "action", "\n", "inp_act", ",", "out_act", ",", "pred", "=", "action", "\n", "done", "=", "False", "\n", "reward", "=", "0.0", "\n", "self", ".", "time", "+=", "1", "\n", "assert", "0", "<=", "self", ".", "write_head_position", "\n", "if", "out_act", "==", "1", ":", "\n", "            ", "try", ":", "\n", "                ", "correct", "=", "pred", "==", "self", ".", "target", "[", "self", ".", "write_head_position", "]", "\n", "", "except", "IndexError", ":", "\n", "                ", "logger", ".", "warn", "(", "\"It looks like you're calling step() even though this \"", "+", "\n", "\"environment has already returned done=True. You should always call \"", "+", "\n", "\"reset() once you receive done=True. Any further steps are undefined \"", "+", "\n", "\"behaviour.\"", ")", "\n", "correct", "=", "False", "\n", "", "if", "correct", ":", "\n", "                ", "reward", "=", "1.0", "\n", "", "else", ":", "\n", "# Bail as soon as a wrong character is written to the tape", "\n", "                ", "reward", "=", "-", "0.5", "\n", "done", "=", "True", "\n", "", "self", ".", "write_head_position", "+=", "1", "\n", "if", "self", ".", "write_head_position", ">=", "len", "(", "self", ".", "target", ")", ":", "\n", "                ", "done", "=", "True", "\n", "", "", "self", ".", "_move", "(", "inp_act", ")", "\n", "if", "self", ".", "time", ">", "self", ".", "time_limit", ":", "\n", "            ", "reward", "=", "-", "1.0", "\n", "done", "=", "True", "\n", "", "obs", "=", "self", ".", "_get_obs", "(", ")", "\n", "self", ".", "last_reward", "=", "reward", "\n", "self", ".", "episode_total_reward", "+=", "reward", "\n", "return", "(", "obs", ",", "reward", ",", "done", ",", "{", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.algorithmic.algorithmic_env.AlgorithmicEnv.time_limit": [[199, 205], ["len"], "methods", ["None"], ["", "@", "property", "\n", "def", "time_limit", "(", "self", ")", ":", "\n", "        ", "\"\"\"If an agent takes more than this many timesteps, end the episode\n        immediately and return a negative reward.\"\"\"", "\n", "# (Seemingly arbitrary)", "\n", "return", "self", ".", "input_width", "+", "len", "(", "self", ".", "target", ")", "+", "4", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.algorithmic.algorithmic_env.AlgorithmicEnv._check_levelup": [[206, 219], ["AlgorithmicEnv.reward_shortfalls.append", "len", "len", "min"], "methods", ["None"], ["", "def", "_check_levelup", "(", "self", ")", ":", "\n", "        ", "\"\"\"Called between episodes. Update our running record of episode rewards \n        and, if appropriate, 'level up' minimum input length.\"\"\"", "\n", "if", "self", ".", "episode_total_reward", "is", "None", ":", "\n", "# This is before the first episode/call to reset(). Nothing to do", "\n", "            ", "return", "\n", "", "AlgorithmicEnv", ".", "reward_shortfalls", ".", "append", "(", "self", ".", "episode_total_reward", "-", "len", "(", "self", ".", "target", ")", ")", "\n", "AlgorithmicEnv", ".", "reward_shortfalls", "=", "AlgorithmicEnv", ".", "reward_shortfalls", "[", "-", "self", ".", "last", ":", "]", "\n", "if", "len", "(", "AlgorithmicEnv", ".", "reward_shortfalls", ")", "==", "self", ".", "last", "and", "min", "(", "AlgorithmicEnv", ".", "reward_shortfalls", ")", ">=", "self", ".", "MIN_REWARD_SHORTFALL_FOR_PROMOTION", "and", "AlgorithmicEnv", ".", "min_length", "<", "30", ":", "\n", "            ", "AlgorithmicEnv", ".", "min_length", "+=", "1", "\n", "AlgorithmicEnv", ".", "reward_shortfalls", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.algorithmic.algorithmic_env.AlgorithmicEnv._reset": [[221, 233], ["algorithmic_env.AlgorithmicEnv._check_levelup", "algorithmic_env.AlgorithmicEnv.generate_input_data", "algorithmic_env.AlgorithmicEnv.target_from_input_data", "algorithmic_env.AlgorithmicEnv._get_obs", "algorithmic_env.AlgorithmicEnv.np_random.randint"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.algorithmic.algorithmic_env.AlgorithmicEnv._check_levelup", "home.repos.pwc.inspect_result.Rondorf_BOReL.algorithmic.algorithmic_env.GridAlgorithmicEnv.generate_input_data", "home.repos.pwc.inspect_result.Rondorf_BOReL.algorithmic.repeat_copy.RepeatCopyEnv.target_from_input_data", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.point_robot.PointEnv._get_obs"], ["", "", "def", "_reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "_check_levelup", "(", ")", "\n", "self", ".", "last_action", "=", "None", "\n", "self", ".", "last_reward", "=", "0", "\n", "self", ".", "read_head_position", "=", "self", ".", "READ_HEAD_START", "\n", "self", ".", "write_head_position", "=", "0", "\n", "self", ".", "episode_total_reward", "=", "0.0", "\n", "self", ".", "time", "=", "0", "\n", "length", "=", "self", ".", "np_random", ".", "randint", "(", "3", ")", "+", "AlgorithmicEnv", ".", "min_length", "\n", "self", ".", "input_data", "=", "self", ".", "generate_input_data", "(", "length", ")", "\n", "self", ".", "target", "=", "self", ".", "target_from_input_data", "(", "self", ".", "input_data", ")", "\n", "return", "self", ".", "_get_obs", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.algorithmic.algorithmic_env.AlgorithmicEnv.generate_input_data": [[234, 236], ["None"], "methods", ["None"], ["", "def", "generate_input_data", "(", "self", ",", "size", ")", ":", "\n", "        ", "raise", "NotImplemented", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.algorithmic.algorithmic_env.AlgorithmicEnv.target_from_input_data": [[237, 239], ["NotImplemented"], "methods", ["None"], ["", "def", "target_from_input_data", "(", "self", ",", "input_data", ")", ":", "\n", "        ", "raise", "NotImplemented", "(", "\"Subclasses must implement\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.algorithmic.algorithmic_env.AlgorithmicEnv._move": [[240, 242], ["None"], "methods", ["None"], ["", "def", "_move", "(", "self", ",", "movement", ")", ":", "\n", "        ", "raise", "NotImplemented", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.algorithmic.algorithmic_env.TapeAlgorithmicEnv._move": [[248, 251], ["None"], "methods", ["None"], ["def", "_move", "(", "self", ",", "movement", ")", ":", "\n", "        ", "named", "=", "self", ".", "MOVEMENTS", "[", "movement", "]", "\n", "self", ".", "read_head_position", "+=", "1", "if", "named", "==", "'right'", "else", "-", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.algorithmic.algorithmic_env.TapeAlgorithmicEnv._get_obs": [[252, 263], ["isinstance", "pos.item.item.item"], "methods", ["None"], ["", "def", "_get_obs", "(", "self", ",", "pos", "=", "None", ")", ":", "\n", "        ", "if", "pos", "is", "None", ":", "\n", "            ", "pos", "=", "self", ".", "read_head_position", "\n", "", "if", "pos", "<", "0", ":", "\n", "            ", "return", "self", ".", "base", "\n", "", "if", "isinstance", "(", "pos", ",", "np", ".", "ndarray", ")", ":", "\n", "            ", "pos", "=", "pos", ".", "item", "(", ")", "\n", "", "try", ":", "\n", "            ", "return", "self", ".", "input_data", "[", "pos", "]", "\n", "", "except", "IndexError", ":", "\n", "            ", "return", "self", ".", "base", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.algorithmic.algorithmic_env.TapeAlgorithmicEnv.generate_input_data": [[264, 266], ["algorithmic_env.TapeAlgorithmicEnv.np_random.randint", "range"], "methods", ["None"], ["", "", "def", "generate_input_data", "(", "self", ",", "size", ")", ":", "\n", "        ", "return", "[", "self", ".", "np_random", ".", "randint", "(", "self", ".", "base", ")", "for", "_", "in", "range", "(", "size", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.algorithmic.algorithmic_env.TapeAlgorithmicEnv._render_observation": [[267, 277], ["range", "environments.mujoco.rand_param_envs.gym.utils.colorize", "algorithmic_env.TapeAlgorithmicEnv._get_str_obs", "algorithmic_env.TapeAlgorithmicEnv._get_str_obs", "numpy.array", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.utils.colorize.colorize", "home.repos.pwc.inspect_result.Rondorf_BOReL.algorithmic.algorithmic_env.AlgorithmicEnv._get_str_obs", "home.repos.pwc.inspect_result.Rondorf_BOReL.algorithmic.algorithmic_env.AlgorithmicEnv._get_str_obs"], ["", "def", "_render_observation", "(", "self", ")", ":", "\n", "        ", "x", "=", "self", ".", "read_head_position", "\n", "x_str", "=", "\"Observation Tape    : \"", "\n", "for", "i", "in", "range", "(", "-", "2", ",", "self", ".", "input_width", "+", "2", ")", ":", "\n", "            ", "if", "i", "==", "x", ":", "\n", "                ", "x_str", "+=", "colorize", "(", "self", ".", "_get_str_obs", "(", "np", ".", "array", "(", "[", "i", "]", ")", ")", ",", "'green'", ",", "highlight", "=", "True", ")", "\n", "", "else", ":", "\n", "                ", "x_str", "+=", "self", ".", "_get_str_obs", "(", "np", ".", "array", "(", "[", "i", "]", ")", ")", "\n", "", "", "x_str", "+=", "\"\\n\"", "\n", "return", "x_str", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.algorithmic.algorithmic_env.GridAlgorithmicEnv.__init__": [[282, 285], ["algorithmic_env.AlgorithmicEnv.__init__"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.__init__"], ["def", "__init__", "(", "self", ",", "rows", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "rows", "=", "rows", "\n", "AlgorithmicEnv", ".", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.algorithmic.algorithmic_env.GridAlgorithmicEnv._move": [[286, 300], ["ValueError"], "methods", ["None"], ["", "def", "_move", "(", "self", ",", "movement", ")", ":", "\n", "        ", "named", "=", "self", ".", "MOVEMENTS", "[", "movement", "]", "\n", "x", ",", "y", "=", "self", ".", "read_head_position", "\n", "if", "named", "==", "'left'", ":", "\n", "            ", "x", "-=", "1", "\n", "", "elif", "named", "==", "'right'", ":", "\n", "            ", "x", "+=", "1", "\n", "", "elif", "named", "==", "'up'", ":", "\n", "            ", "y", "-=", "1", "\n", "", "elif", "named", "==", "'down'", ":", "\n", "            ", "y", "+=", "1", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Unrecognized direction: {}\"", ".", "format", "(", "named", ")", ")", "\n", "", "self", ".", "read_head_position", "=", "x", ",", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.algorithmic.algorithmic_env.GridAlgorithmicEnv.generate_input_data": [[301, 305], ["algorithmic_env.GridAlgorithmicEnv.np_random.randint", "range", "range"], "methods", ["None"], ["", "def", "generate_input_data", "(", "self", ",", "size", ")", ":", "\n", "        ", "return", "[", "\n", "[", "self", ".", "np_random", ".", "randint", "(", "self", ".", "base", ")", "for", "_", "in", "range", "(", "self", ".", "rows", ")", "]", "\n", "for", "__", "in", "range", "(", "size", ")", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.algorithmic.algorithmic_env.GridAlgorithmicEnv._get_obs": [[307, 317], ["any"], "methods", ["None"], ["", "def", "_get_obs", "(", "self", ",", "pos", "=", "None", ")", ":", "\n", "        ", "if", "pos", "is", "None", ":", "\n", "            ", "pos", "=", "self", ".", "read_head_position", "\n", "", "x", ",", "y", "=", "pos", "\n", "if", "any", "(", "idx", "<", "0", "for", "idx", "in", "pos", ")", ":", "\n", "            ", "return", "self", ".", "base", "\n", "", "try", ":", "\n", "            ", "return", "self", ".", "input_data", "[", "x", "]", "[", "y", "]", "\n", "", "except", "IndexError", ":", "\n", "            ", "return", "self", ".", "base", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.algorithmic.algorithmic_env.GridAlgorithmicEnv._render_observation": [[318, 333], ["range", "range", "len", "environments.mujoco.rand_param_envs.gym.utils.colorize", "algorithmic_env.GridAlgorithmicEnv._get_str_obs", "algorithmic_env.GridAlgorithmicEnv._get_str_obs"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.utils.colorize.colorize", "home.repos.pwc.inspect_result.Rondorf_BOReL.algorithmic.algorithmic_env.AlgorithmicEnv._get_str_obs", "home.repos.pwc.inspect_result.Rondorf_BOReL.algorithmic.algorithmic_env.AlgorithmicEnv._get_str_obs"], ["", "", "def", "_render_observation", "(", "self", ")", ":", "\n", "        ", "x", "=", "self", ".", "read_head_position", "\n", "label", "=", "\"Observation Grid    : \"", "\n", "x_str", "=", "\"\"", "\n", "for", "j", "in", "range", "(", "-", "1", ",", "self", ".", "rows", "+", "1", ")", ":", "\n", "            ", "if", "j", "!=", "-", "1", ":", "\n", "                ", "x_str", "+=", "\" \"", "*", "len", "(", "label", ")", "\n", "", "for", "i", "in", "range", "(", "-", "2", ",", "self", ".", "input_width", "+", "2", ")", ":", "\n", "                ", "if", "i", "==", "x", "[", "0", "]", "and", "j", "==", "x", "[", "1", "]", ":", "\n", "                    ", "x_str", "+=", "colorize", "(", "self", ".", "_get_str_obs", "(", "(", "i", ",", "j", ")", ")", ",", "'green'", ",", "highlight", "=", "True", ")", "\n", "", "else", ":", "\n", "                    ", "x_str", "+=", "self", ".", "_get_str_obs", "(", "(", "i", ",", "j", ")", ")", "\n", "", "", "x_str", "+=", "\"\\n\"", "\n", "", "x_str", "=", "label", "+", "x_str", "\n", "return", "x_str", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Rondorf_BOReL.algorithmic.repeat_copy.RepeatCopyEnv.__init__": [[10, 13], ["environments.mujoco.rand_param_envs.gym.envs.algorithmic.algorithmic_env.TapeAlgorithmicEnv.__init__"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.__init__"], ["def", "__init__", "(", "self", ",", "base", "=", "5", ")", ":", "\n", "        ", "super", "(", "RepeatCopyEnv", ",", "self", ")", ".", "__init__", "(", "base", "=", "base", ",", "chars", "=", "True", ")", "\n", "self", ".", "last", "=", "50", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.algorithmic.repeat_copy.RepeatCopyEnv.target_from_input_data": [[14, 16], ["list", "reversed"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.ListableAPIResource.list"], ["", "def", "target_from_input_data", "(", "self", ",", "input_data", ")", ":", "\n", "        ", "return", "input_data", "+", "list", "(", "reversed", "(", "input_data", ")", ")", "+", "input_data", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.scoreboard.registration.Registry.__init__": [[10, 14], ["collections.OrderedDict", "collections.OrderedDict", "collections.OrderedDict"], "methods", ["None"], ["class", "Task", "(", "object", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "env_id", ",", "trials", ",", "max_timesteps", ",", "max_seconds", ",", "reward_floor", ",", "reward_ceiling", ")", ":", "\n", "        ", "self", ".", "env_id", "=", "env_id", "\n", "self", ".", "trials", "=", "trials", "\n", "self", ".", "max_timesteps", "=", "max_timesteps", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.scoreboard.registration.Registry.env": [[15, 17], ["None"], "methods", ["None"], ["self", ".", "max_seconds", "=", "max_seconds", "\n", "self", ".", "reward_floor", "=", "reward_floor", "\n", "self", ".", "reward_ceiling", "=", "reward_ceiling", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.scoreboard.registration.Registry.add_group": [[18, 25], ["None"], "methods", ["None"], ["\n", "if", "max_timesteps", "is", "None", "and", "max_seconds", "is", "None", ":", "\n", "            ", "raise", "error", ".", "Error", "(", "'Must provide at least one of max_timesteps and max_seconds for {}'", ".", "format", "(", "self", ")", ")", "\n", "\n", "", "", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "'Task<env_id={} trials={} max_timesteps={} max_seconds={} reward_floor={} reward_ceiling={}>'", ".", "format", "(", "self", ".", "env_id", ",", "self", ".", "trials", ",", "self", ".", "max_timesteps", ",", "self", ".", "max_seconds", ",", "self", ".", "reward_floor", ",", "self", ".", "reward_ceiling", ")", "\n", "\n", "", "", "class", "Benchmark", "(", "object", ")", ":", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.scoreboard.registration.Registry.add_task": [[27, 40], ["[].append"], "methods", ["None"], ["        ", "self", ".", "id", "=", "id", "\n", "self", ".", "scorer", "=", "scorer", "\n", "self", ".", "description", "=", "description", "\n", "self", ".", "name", "=", "name", "\n", "self", ".", "env_ids", "=", "set", "(", ")", "\n", "\n", "compiled_tasks", "=", "[", "]", "\n", "for", "task", "in", "tasks", ":", "\n", "            ", "task", "=", "Task", "(", "\n", "env_id", "=", "task", "[", "'env_id'", "]", ",", "\n", "trials", "=", "task", "[", "'trials'", "]", ",", "\n", "max_timesteps", "=", "task", ".", "get", "(", "'max_timesteps'", ")", ",", "\n", "max_seconds", "=", "task", ".", "get", "(", "'max_seconds'", ")", ",", "\n", "reward_floor", "=", "task", ".", "get", "(", "'reward_floor'", ",", "0", ")", ",", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.scoreboard.registration.Registry.add_benchmark": [[41, 47], ["None"], "methods", ["None"], ["reward_ceiling", "=", "task", ".", "get", "(", "'reward_ceiling'", ",", "100", ")", ",", "\n", ")", "\n", "self", ".", "env_ids", ".", "add", "(", "task", ".", "env_id", ")", "\n", "compiled_tasks", ".", "append", "(", "task", ")", "\n", "\n", "", "self", ".", "tasks", "=", "compiled_tasks", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.scoreboard.registration.Registry.finalize": [[49, 55], ["None"], "methods", ["None"], ["# Could precompute this, but no need yet", "\n", "# Note that if we do precompute it we need to preserve the order in", "\n", "# which tasks are returned", "\n", "        ", "results", "=", "[", "task", "for", "task", "in", "self", ".", "tasks", "if", "task", ".", "env_id", "==", "env_id", "]", "\n", "if", "not", "results", ":", "\n", "            ", "raise", "error", ".", "Unregistered", "(", "'No task with env_id {} registered for benchmark {}'", ",", "env_id", ",", "self", ".", "id", ")", "\n", "", "return", "results", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.scoreboard.api.upload": [[18, 96], ["os.walk", "environments.mujoco.rand_param_envs.gym.scoreboard.client.resource.BenchmarkRun.create", "logger.info", "api._upload", "logger.info", "environments.mujoco.rand_param_envs.gym.monitoring.detect_training_manifests", "environments.mujoco.rand_param_envs.gym.benchmark_spec", "environments.mujoco.rand_param_envs.gym.error.Error", "sorted", "sorted", "logger.info", "api._upload", "resource.BenchmarkRun.create.web_url", "logger.warning", "_upload.web_url", "environments.mujoco.rand_param_envs.gym.monitoring.load_env_info_from_manifests", "env_ids.append", "directories.append", "environments.mujoco.rand_param_envs.gym.error.Error", "range", "sorted", "sorted", "json.dumps"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.FileUpload.create", "home.repos.pwc.inspect_result.Rondorf_BOReL.scoreboard.api._upload", "home.repos.pwc.inspect_result.Rondorf_BOReL.wrappers.monitoring.detect_training_manifests", "home.repos.pwc.inspect_result.Rondorf_BOReL.benchmarks.registration.Registry.benchmark_spec", "home.repos.pwc.inspect_result.Rondorf_BOReL.scoreboard.api._upload", "home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.BenchmarkRun.web_url", "home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.BenchmarkRun.web_url", "home.repos.pwc.inspect_result.Rondorf_BOReL.wrappers.monitoring.load_env_info_from_manifests"], ["def", "upload", "(", "training_dir", ",", "algorithm_id", "=", "None", ",", "writeup", "=", "None", ",", "tags", "=", "None", ",", "benchmark_id", "=", "None", ",", "api_key", "=", "None", ",", "ignore_open_monitors", "=", "False", ")", ":", "\n", "    ", "\"\"\"Upload the results of training (as automatically recorded by your\n    env's monitor) to OpenAI Gym.\n\n    Args:\n        training_dir (Optional[str]): A directory containing the results of a training run.\n        algorithm_id (Optional[str]): An algorithm id indicating the particular version of the algorithm (including choices of parameters) you are running (visit https://gym.openai.com/algorithms to create an id). If the id doesn't match an existing server id it will create a new algorithm using algorithm_id as the name\n        benchmark_id (Optional[str]): The benchmark that these evaluations belong to. Will recursively search through training_dir for any Gym manifests. This feature is currently pre-release.\n        writeup (Optional[str]): A Gist URL (of the form https://gist.github.com/<user>/<id>) containing your writeup for this evaluation.\n        tags (Optional[dict]): A dictionary of key/values to store with the benchmark run (ignored for nonbenchmark evaluations). Must be jsonable.\n        api_key (Optional[str]): Your OpenAI API key. Can also be provided as an environment variable (OPENAI_GYM_API_KEY).\n    \"\"\"", "\n", "\n", "if", "benchmark_id", ":", "\n", "# We're uploading a benchmark run.", "\n", "\n", "        ", "directories", "=", "[", "]", "\n", "env_ids", "=", "[", "]", "\n", "for", "name", ",", "_", ",", "files", "in", "os", ".", "walk", "(", "training_dir", ")", ":", "\n", "            ", "manifests", "=", "monitoring", ".", "detect_training_manifests", "(", "name", ",", "files", "=", "files", ")", "\n", "if", "manifests", ":", "\n", "                ", "env_info", "=", "monitoring", ".", "load_env_info_from_manifests", "(", "manifests", ",", "training_dir", ")", "\n", "env_ids", ".", "append", "(", "env_info", "[", "'env_id'", "]", ")", "\n", "directories", ".", "append", "(", "name", ")", "\n", "\n", "# Validate against benchmark spec", "\n", "", "", "try", ":", "\n", "            ", "spec", "=", "benchmark_spec", "(", "benchmark_id", ")", "\n", "", "except", "error", ".", "UnregisteredBenchmark", ":", "\n", "            ", "raise", "error", ".", "Error", "(", "\"Invalid benchmark id: {}. Are you using a benchmark registered in gym/benchmarks/__init__.py?\"", ".", "format", "(", "benchmark_id", ")", ")", "\n", "\n", "# TODO: verify that the number of trials matches", "\n", "", "spec_env_ids", "=", "[", "task", ".", "env_id", "for", "task", "in", "spec", ".", "tasks", "for", "_", "in", "range", "(", "task", ".", "trials", ")", "]", "\n", "\n", "if", "not", "env_ids", ":", "\n", "            ", "raise", "error", ".", "Error", "(", "\"Could not find any evaluations in {}\"", ".", "format", "(", "training_dir", ")", ")", "\n", "\n", "# This could be more stringent about mixing evaluations", "\n", "", "if", "sorted", "(", "env_ids", ")", "!=", "sorted", "(", "spec_env_ids", ")", ":", "\n", "            ", "logger", ".", "info", "(", "\"WARNING: Evaluations do not match spec for benchmark %s. In %s, we found evaluations for %s, expected %s\"", ",", "benchmark_id", ",", "training_dir", ",", "sorted", "(", "env_ids", ")", ",", "sorted", "(", "spec_env_ids", ")", ")", "\n", "\n", "", "benchmark_run", "=", "resource", ".", "BenchmarkRun", ".", "create", "(", "benchmark_id", "=", "benchmark_id", ",", "algorithm_id", "=", "algorithm_id", ",", "tags", "=", "json", ".", "dumps", "(", "tags", ")", ")", "\n", "benchmark_run_id", "=", "benchmark_run", ".", "id", "\n", "\n", "# Actually do the uploads.", "\n", "for", "training_dir", "in", "directories", ":", "\n", "# N.B. we don't propagate algorithm_id to Evaluation if we're running as part of a benchmark", "\n", "            ", "_upload", "(", "training_dir", ",", "None", ",", "writeup", ",", "benchmark_run_id", ",", "api_key", ",", "ignore_open_monitors", ")", "\n", "\n", "", "logger", ".", "info", "(", "\"\"\"\n****************************************************\nYou successfully uploaded your benchmark on %s to\nOpenAI Gym! You can find it at:\n\n    %s\n\n****************************************************\n        \"\"\"", ".", "rstrip", "(", ")", ",", "benchmark_id", ",", "benchmark_run", ".", "web_url", "(", ")", ")", "\n", "\n", "return", "benchmark_run_id", "\n", "", "else", ":", "\n", "        ", "if", "tags", "is", "not", "None", ":", "\n", "             ", "logger", ".", "warning", "(", "\"Tags will NOT be uploaded for this submission.\"", ")", "\n", "# Single evalution upload", "\n", "", "benchmark_run_id", "=", "None", "\n", "evaluation", "=", "_upload", "(", "training_dir", ",", "algorithm_id", ",", "writeup", ",", "benchmark_run_id", ",", "api_key", ",", "ignore_open_monitors", ")", "\n", "\n", "logger", ".", "info", "(", "\"\"\"\n****************************************************\nYou successfully uploaded your evaluation on %s to\nOpenAI Gym! You can find it at:\n\n    %s\n\n****************************************************\n        \"\"\"", ".", "rstrip", "(", ")", ",", "evaluation", ".", "env", ",", "evaluation", ".", "web_url", "(", ")", ")", "\n", "\n", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.scoreboard.api._upload": [[97, 136], ["api.upload_training_data", "environments.mujoco.rand_param_envs.gym.scoreboard.client.resource.Evaluation.create", "environments.mujoco.rand_param_envs.gym.monitoring._open_monitors", "len", "environments.mujoco.rand_param_envs.gym.error.Error", "logger.info", "logger.info", "logger.info", "environments.mujoco.rand_param_envs.gym.error.Error"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.scoreboard.api.upload_training_data", "home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.FileUpload.create", "home.repos.pwc.inspect_result.Rondorf_BOReL.wrappers.monitoring._open_monitors"], ["", "", "def", "_upload", "(", "training_dir", ",", "algorithm_id", "=", "None", ",", "writeup", "=", "None", ",", "benchmark_run_id", "=", "None", ",", "api_key", "=", "None", ",", "ignore_open_monitors", "=", "False", ")", ":", "\n", "    ", "if", "not", "ignore_open_monitors", ":", "\n", "        ", "open_monitors", "=", "monitoring", ".", "_open_monitors", "(", ")", "\n", "if", "len", "(", "open_monitors", ")", ">", "0", ":", "\n", "            ", "envs", "=", "[", "m", ".", "env", ".", "spec", ".", "id", "if", "m", ".", "env", ".", "spec", "else", "'(unknown)'", "for", "m", "in", "open_monitors", "]", "\n", "raise", "error", ".", "Error", "(", "\"Still have an open monitor on {}. You must run 'env.close()' before uploading.\"", ".", "format", "(", "', '", ".", "join", "(", "envs", ")", ")", ")", "\n", "\n", "", "", "env_info", ",", "training_episode_batch", ",", "training_video", "=", "upload_training_data", "(", "training_dir", ",", "api_key", "=", "api_key", ")", "\n", "env_id", "=", "env_info", "[", "'env_id'", "]", "\n", "training_episode_batch_id", "=", "training_video_id", "=", "None", "\n", "if", "training_episode_batch", ":", "\n", "        ", "training_episode_batch_id", "=", "training_episode_batch", ".", "id", "\n", "", "if", "training_video", ":", "\n", "        ", "training_video_id", "=", "training_video", ".", "id", "\n", "\n", "", "if", "logger", ".", "level", "<=", "logger", ".", "INFO", ":", "\n", "        ", "if", "training_episode_batch_id", "is", "not", "None", "and", "training_video_id", "is", "not", "None", ":", "\n", "            ", "logger", ".", "info", "(", "'[%s] Creating evaluation object from %s with learning curve and training video'", ",", "env_id", ",", "training_dir", ")", "\n", "", "elif", "training_episode_batch_id", "is", "not", "None", ":", "\n", "            ", "logger", ".", "info", "(", "'[%s] Creating evaluation object from %s with learning curve'", ",", "env_id", ",", "training_dir", ")", "\n", "", "elif", "training_video_id", "is", "not", "None", ":", "\n", "            ", "logger", ".", "info", "(", "'[%s] Creating evaluation object from %s with training video'", ",", "env_id", ",", "training_dir", ")", "\n", "", "else", ":", "\n", "            ", "raise", "error", ".", "Error", "(", "\"[%s] You didn't have any recorded training data in %s. Once you've used 'env.monitor.start(training_dir)' to start recording, you need to actually run some rollouts. Please join the community chat on https://gym.openai.com if you have any issues.\"", "%", "(", "env_id", ",", "training_dir", ")", ")", "\n", "\n", "", "", "evaluation", "=", "resource", ".", "Evaluation", ".", "create", "(", "\n", "training_episode_batch", "=", "training_episode_batch_id", ",", "\n", "training_video", "=", "training_video_id", ",", "\n", "env", "=", "env_info", "[", "'env_id'", "]", ",", "\n", "algorithm", "=", "{", "\n", "'id'", ":", "algorithm_id", ",", "\n", "}", ",", "\n", "benchmark_run_id", "=", "benchmark_run_id", ",", "\n", "writeup", "=", "writeup", ",", "\n", "gym_version", "=", "env_info", "[", "'gym_version'", "]", ",", "\n", "api_key", "=", "api_key", ",", "\n", ")", "\n", "\n", "return", "evaluation", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.scoreboard.api.upload_training_data": [[137, 175], ["environments.mujoco.rand_param_envs.gym.monitoring.load_results", "logger.debug", "environments.mujoco.rand_param_envs.gym.error.Error", "len", "api.upload_training_episode_batch", "len", "logger.warning", "numpy.linspace().astype", "len", "api.upload_training_video", "len", "numpy.linspace", "len"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.wrappers.monitoring.load_results", "home.repos.pwc.inspect_result.Rondorf_BOReL.scoreboard.api.upload_training_episode_batch", "home.repos.pwc.inspect_result.Rondorf_BOReL.scoreboard.api.upload_training_video"], ["", "def", "upload_training_data", "(", "training_dir", ",", "api_key", "=", "None", ")", ":", "\n", "# Could have multiple manifests", "\n", "    ", "results", "=", "monitoring", ".", "load_results", "(", "training_dir", ")", "\n", "if", "not", "results", ":", "\n", "        ", "raise", "error", ".", "Error", "(", "'''Could not find any manifest files in {}.\n\n(HINT: this usually means you did not yet close() your env.monitor and have not yet exited the process. You should call 'env.monitor.start(training_dir)' at the start of training and 'env.close()' at the end, or exit the process.)'''", ".", "format", "(", "training_dir", ")", ")", "\n", "\n", "", "manifests", "=", "results", "[", "'manifests'", "]", "\n", "env_info", "=", "results", "[", "'env_info'", "]", "\n", "data_sources", "=", "results", "[", "'data_sources'", "]", "\n", "timestamps", "=", "results", "[", "'timestamps'", "]", "\n", "episode_lengths", "=", "results", "[", "'episode_lengths'", "]", "\n", "episode_rewards", "=", "results", "[", "'episode_rewards'", "]", "\n", "episode_types", "=", "results", "[", "'episode_types'", "]", "\n", "initial_reset_timestamps", "=", "results", "[", "'initial_reset_timestamps'", "]", "\n", "videos", "=", "results", "[", "'videos'", "]", "\n", "\n", "env_id", "=", "env_info", "[", "'env_id'", "]", "\n", "logger", ".", "debug", "(", "'[%s] Uploading data from manifest %s'", ",", "env_id", ",", "', '", ".", "join", "(", "manifests", ")", ")", "\n", "\n", "# Do the relevant uploads", "\n", "if", "len", "(", "episode_lengths", ")", ">", "0", ":", "\n", "        ", "training_episode_batch", "=", "upload_training_episode_batch", "(", "data_sources", ",", "episode_lengths", ",", "episode_rewards", ",", "episode_types", ",", "initial_reset_timestamps", ",", "timestamps", ",", "api_key", ",", "env_id", "=", "env_id", ")", "\n", "", "else", ":", "\n", "        ", "training_episode_batch", "=", "None", "\n", "\n", "", "if", "len", "(", "videos", ")", ">", "MAX_VIDEOS", ":", "\n", "        ", "logger", ".", "warning", "(", "'[%s] You recorded videos for %s episodes, but the scoreboard only supports up to %s. We will automatically subsample for you, but you also might wish to adjust your video recording rate.'", ",", "env_id", ",", "len", "(", "videos", ")", ",", "MAX_VIDEOS", ")", "\n", "subsample_inds", "=", "np", ".", "linspace", "(", "0", ",", "len", "(", "videos", ")", "-", "1", ",", "MAX_VIDEOS", ")", ".", "astype", "(", "'int'", ")", "#pylint: disable=E1101", "\n", "videos", "=", "[", "videos", "[", "i", "]", "for", "i", "in", "subsample_inds", "]", "\n", "\n", "", "if", "len", "(", "videos", ")", ">", "0", ":", "\n", "        ", "training_video", "=", "upload_training_video", "(", "videos", ",", "api_key", ",", "env_id", "=", "env_id", ")", "\n", "", "else", ":", "\n", "        ", "training_video", "=", "None", "\n", "\n", "", "return", "env_info", ",", "training_episode_batch", ",", "training_video", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.scoreboard.api.upload_training_episode_batch": [[176, 188], ["logger.info", "environments.mujoco.rand_param_envs.gym.scoreboard.client.resource.FileUpload.create", "resource.FileUpload.create.put", "len"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.FileUpload.create", "home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.FileUpload.put"], ["", "def", "upload_training_episode_batch", "(", "data_sources", ",", "episode_lengths", ",", "episode_rewards", ",", "episode_types", ",", "initial_reset_timestamps", ",", "timestamps", ",", "api_key", "=", "None", ",", "env_id", "=", "None", ")", ":", "\n", "    ", "logger", ".", "info", "(", "'[%s] Uploading %d episodes of training data'", ",", "env_id", ",", "len", "(", "episode_lengths", ")", ")", "\n", "file_upload", "=", "resource", ".", "FileUpload", ".", "create", "(", "purpose", "=", "'episode_batch'", ",", "api_key", "=", "api_key", ")", "\n", "file_upload", ".", "put", "(", "{", "\n", "'data_sources'", ":", "data_sources", ",", "\n", "'episode_lengths'", ":", "episode_lengths", ",", "\n", "'episode_rewards'", ":", "episode_rewards", ",", "\n", "'episode_types'", ":", "episode_types", ",", "\n", "'initial_reset_timestamps'", ":", "initial_reset_timestamps", ",", "\n", "'timestamps'", ":", "timestamps", ",", "\n", "}", ")", "\n", "return", "file_upload", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.scoreboard.api.upload_training_video": [[189, 200], ["tempfile.TemporaryFile", "api.write_archive", "archive_file.seek", "logger.info", "environments.mujoco.rand_param_envs.gym.scoreboard.client.resource.FileUpload.create", "resource.FileUpload.create.put", "len", "environments.mujoco.rand_param_envs.gym.scoreboard.client.util.file_size"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.scoreboard.api.write_archive", "home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.FileUpload.create", "home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.FileUpload.put", "home.repos.pwc.inspect_result.Rondorf_BOReL.client.util.file_size"], ["", "def", "upload_training_video", "(", "videos", ",", "api_key", "=", "None", ",", "env_id", "=", "None", ")", ":", "\n", "    ", "\"\"\"videos: should be list of (video_path, metadata_path) tuples\"\"\"", "\n", "with", "tempfile", ".", "TemporaryFile", "(", ")", "as", "archive_file", ":", "\n", "        ", "write_archive", "(", "videos", ",", "archive_file", ",", "env_id", "=", "env_id", ")", "\n", "archive_file", ".", "seek", "(", "0", ")", "\n", "\n", "logger", ".", "info", "(", "'[%s] Uploading videos of %d training episodes (%d bytes)'", ",", "env_id", ",", "len", "(", "videos", ")", ",", "util", ".", "file_size", "(", "archive_file", ")", ")", "\n", "file_upload", "=", "resource", ".", "FileUpload", ".", "create", "(", "purpose", "=", "'video'", ",", "content_type", "=", "'application/vnd.openai.video+x-compressed'", ",", "api_key", "=", "api_key", ")", "\n", "file_upload", ".", "put", "(", "archive_file", ",", "encode", "=", "None", ")", "\n", "\n", "", "return", "file_upload", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.scoreboard.api.write_archive": [[201, 251], ["logger.debug", "set", "len", "environments.mujoco.rand_param_envs.gym.error.Error", "len", "tarfile.open", "tempfile.NamedTemporaryFile", "os.path.basename", "os.path.basename", "set.add", "set.add", "manifest[].append", "tar.add", "tar.add", "json.dump", "tempfile.NamedTemporaryFile.close", "tar.add", "tempfile.NamedTemporaryFile.close", "os.remove", "len", "os.path.exists", "environments.mujoco.rand_param_envs.gym.error.Error", "environments.mujoco.rand_param_envs.gym.error.Error", "os.path.exists", "environments.mujoco.rand_param_envs.gym.error.Error", "environments.mujoco.rand_param_envs.gym.error.Error", "video_name_re.search", "environments.mujoco.rand_param_envs.gym.error.Error", "metadata_name_re.search", "environments.mujoco.rand_param_envs.gym.error.Error"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.close", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.close"], ["", "def", "write_archive", "(", "videos", ",", "archive_file", ",", "env_id", "=", "None", ")", ":", "\n", "    ", "if", "len", "(", "videos", ")", ">", "MAX_VIDEOS", ":", "\n", "        ", "raise", "error", ".", "Error", "(", "'[{}] Trying to upload {} videos, but there is a limit of {} currently. If you actually want to upload this many videos, please email gym@openai.com with your use-case.'", ".", "format", "(", "env_id", ",", "MAX_VIDEOS", ",", "len", "(", "videos", ")", ")", ")", "\n", "\n", "", "logger", ".", "debug", "(", "'[%s] Preparing an archive of %d videos: %s'", ",", "env_id", ",", "len", "(", "videos", ")", ",", "videos", ")", "\n", "\n", "# Double check that there are no collisions", "\n", "basenames", "=", "set", "(", ")", "\n", "manifest", "=", "{", "\n", "'version'", ":", "0", ",", "\n", "'videos'", ":", "[", "]", "\n", "}", "\n", "\n", "with", "tarfile", ".", "open", "(", "fileobj", "=", "archive_file", ",", "mode", "=", "'w:gz'", ")", "as", "tar", ":", "\n", "        ", "for", "video_path", ",", "metadata_path", "in", "videos", ":", "\n", "            ", "video_name", "=", "os", ".", "path", ".", "basename", "(", "video_path", ")", "\n", "metadata_name", "=", "os", ".", "path", ".", "basename", "(", "metadata_path", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "video_path", ")", ":", "\n", "                ", "raise", "error", ".", "Error", "(", "'[{}] No such video file {}. (HINT: Your video recorder may have broken midway through the run. You can check this with `video_recorder.functional`.)'", ".", "format", "(", "env_id", ",", "video_path", ")", ")", "\n", "", "elif", "not", "os", ".", "path", ".", "exists", "(", "metadata_path", ")", ":", "\n", "                ", "raise", "error", ".", "Error", "(", "'[{}] No such metadata file {}. (HINT: this should be automatically created when using a VideoRecorder instance.)'", ".", "format", "(", "env_id", ",", "video_path", ")", ")", "\n", "\n", "# Do some sanity checking", "\n", "", "if", "video_name", "in", "basenames", ":", "\n", "                ", "raise", "error", ".", "Error", "(", "'[{}] Duplicated video name {} in video list: {}'", ".", "format", "(", "env_id", ",", "video_name", ",", "videos", ")", ")", "\n", "", "elif", "metadata_name", "in", "basenames", ":", "\n", "                ", "raise", "error", ".", "Error", "(", "'[{}] Duplicated metadata file name {} in video list: {}'", ".", "format", "(", "env_id", ",", "metadata_name", ",", "videos", ")", ")", "\n", "", "elif", "not", "video_name_re", ".", "search", "(", "video_name", ")", ":", "\n", "                ", "raise", "error", ".", "Error", "(", "'[{}] Invalid video name {} (must match {})'", ".", "format", "(", "env_id", ",", "video_name", ",", "video_name_re", ".", "pattern", ")", ")", "\n", "", "elif", "not", "metadata_name_re", ".", "search", "(", "metadata_name", ")", ":", "\n", "                ", "raise", "error", ".", "Error", "(", "'[{}] Invalid metadata file name {} (must match {})'", ".", "format", "(", "env_id", ",", "metadata_name", ",", "metadata_name_re", ".", "pattern", ")", ")", "\n", "\n", "# Record that we've seen these names; add to manifest", "\n", "", "basenames", ".", "add", "(", "video_name", ")", "\n", "basenames", ".", "add", "(", "metadata_name", ")", "\n", "manifest", "[", "'videos'", "]", ".", "append", "(", "(", "video_name", ",", "metadata_name", ")", ")", "\n", "\n", "# Import the files into the archive", "\n", "tar", ".", "add", "(", "video_path", ",", "arcname", "=", "video_name", ",", "recursive", "=", "False", ")", "\n", "tar", ".", "add", "(", "metadata_path", ",", "arcname", "=", "metadata_name", ",", "recursive", "=", "False", ")", "\n", "\n", "", "f", "=", "tempfile", ".", "NamedTemporaryFile", "(", "mode", "=", "'w+'", ",", "delete", "=", "False", ")", "\n", "try", ":", "\n", "            ", "json", ".", "dump", "(", "manifest", ",", "f", ")", "\n", "f", ".", "close", "(", ")", "\n", "tar", ".", "add", "(", "f", ".", "name", ",", "arcname", "=", "'manifest.json'", ")", "\n", "", "finally", ":", "\n", "            ", "f", ".", "close", "(", ")", "\n", "os", ".", "remove", "(", "f", ".", "name", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.Rondorf_BOReL.scoreboard.scoring.score_from_remote": [[18, 31], ["requests.get", "requests.get.json", "result.json.get", "result.json.get", "environments.mujoco.rand_param_envs.gym.spec", "scoring.score_from_merged"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.envs.registration.spec", "home.repos.pwc.inspect_result.Rondorf_BOReL.scoreboard.scoring.score_from_merged"], ["# we don't have enough trials, we zero out the score.", "\n", "# TODO could do smarter matching of results to trials if we have extras", "\n", "# TODO for now, baked in assumption that the number of trials is the", "\n", "# same for all tasks involving a particular env.", "\n", "for", "env_id", "in", "benchmark", ".", "env_ids", ":", "\n", "        ", "task_list", "=", "benchmark", ".", "task_specs", "(", "env_id", ")", "\n", "num_trials", "=", "task_list", "[", "0", "]", ".", "trials", "\n", "benchmark_results", "=", "env_id_to_benchmark_results", ".", "get", "(", "env_id", ",", "[", "]", ")", "\n", "for", "trial", "in", "range", "(", "num_trials", ")", ":", "\n", "            ", "if", "trial", "<", "len", "(", "benchmark_results", ")", ":", "\n", "# okay process this benchmark result against this trial", "\n", "                ", "benchmark_result", "=", "benchmark_results", "[", "trial", "]", "\n", "\n", "env_scores", "=", "scores", ".", "setdefault", "(", "env_id", ",", "[", "]", ")", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.scoreboard.scoring.score_from_local": [[32, 47], ["environments.mujoco.rand_param_envs.gym.monitoring.load_results", "environments.mujoco.rand_param_envs.gym.spec", "scoring.score_from_merged"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.wrappers.monitoring.load_results", "home.repos.pwc.inspect_result.Rondorf_BOReL.envs.registration.spec", "home.repos.pwc.inspect_result.Rondorf_BOReL.scoreboard.scoring.score_from_merged"], ["env_scores", ".", "append", "(", "benchmark_result", "[", "'scores'", "]", ")", "\n", "\n", "# note: solves is a list of lists - for each task for this env,", "\n", "# does each episode solve that task. We consider the env solved", "\n", "# if every episode for every task is individually solved.", "\n", "solved", "=", "solves", ".", "setdefault", "(", "env_id", ",", "True", ")", "\n", "solves", "[", "env_id", "]", "=", "solved", "and", "np", ".", "sum", "(", "benchmark_result", "[", "'solves'", "]", ")", "\n", "\n", "# these timestamps are a list of the first / last valid timestamp", "\n", "# for each task involving this env.", "\n", "start_times", ".", "append", "(", "benchmark_result", "[", "'initial_reset_timestamp'", "]", ")", "\n", "end_times", ".", "append", "(", "max", "(", "benchmark_result", "[", "'timestamps'", "]", ")", ")", "\n", "elapsed_times", ".", "extend", "(", "benchmark_result", "[", "'elapsed_times'", "]", ")", "\n", "", "else", ":", "\n", "# no matching benchmark result for this trial", "\n", "                ", "env_scores", "=", "scores", ".", "setdefault", "(", "env_id", ",", "[", "]", ")", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.scoreboard.scoring.score_from_file": [[48, 65], ["environments.mujoco.rand_param_envs.gym.spec", "scoring.score_from_merged", "open", "json.load"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.envs.registration.spec", "home.repos.pwc.inspect_result.Rondorf_BOReL.scoreboard.scoring.score_from_merged", "home.repos.pwc.inspect_result.Rondorf_BOReL.envs.registration.load"], ["env_scores", ".", "append", "(", "[", "benchmark", ".", "scorer", ".", "null_score", "for", "_", "in", "task_list", "]", ")", "\n", "solves", "[", "env_id", "]", "=", "False", "\n", "\n", "", "", "", "score", "=", "benchmark", ".", "score_benchmark", "(", "scores", ")", "\n", "num_envs_solved", "=", "len", "(", "[", "s", "for", "s", "in", "solves", ".", "values", "(", ")", "if", "s", "]", ")", "\n", "start_to_finish_seconds", "=", "max", "(", "end_times", ")", "-", "min", "(", "start_times", ")", "if", "end_times", "and", "start_times", "else", "0.0", "\n", "summed_task_wall_time", "=", "np", ".", "sum", "(", "[", "end", "-", "start", "for", "end", ",", "start", "in", "zip", "(", "end_times", ",", "start_times", ")", "]", ")", "\n", "summed_training_seconds", "=", "np", ".", "sum", "(", "elapsed_times", ")", "\n", "\n", "return", "dict", "(", "\n", "score", "=", "score", ",", "\n", "num_envs_solved", "=", "num_envs_solved", ",", "\n", "start_to_finish_seconds", "=", "start_to_finish_seconds", ",", "\n", "summed_task_wall_time", "=", "summed_task_wall_time", ",", "\n", "summed_training_seconds", "=", "summed_training_seconds", ",", "\n", ")", "\n", "\n", "", "class", "ClipTo01ThenAverage", "(", "object", ")", ":", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.scoreboard.scoring.score_from_merged": [[66, 122], ["numpy.array", "numpy.array", "numpy.where", "len", "len", "scoring.running_mean", "numpy.argmax", "numpy.mean", "len", "sum", "numpy.array", "numpy.array", "numpy.array", "numpy.where", "len", "numpy.cumsum", "numpy.std", "numpy.insert", "numpy.sqrt"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.scoreboard.scoring.running_mean"], ["    ", "\"\"\"Benchmark scoring rule\n\n    For each task, we take the last num_episodes (default: 100) evaluation\n    episodes before either the max_seconds or max_timesteps limit, whichever is\n    earlier. If there are not num_episodes evaluations, we fill in the rest with\n    scores of reward_floor.\n\n    For each valid evaluation episode, we clip the reward to be between the\n    reward_floor and reward_ceiling for that task. The score for the task is the\n    average across all episodes.\n\n    The benchmark score is the average of all task scores.\n\n    \"\"\"", "\n", "def", "__init__", "(", "self", ",", "num_episodes", "=", "100", ")", ":", "\n", "        ", "self", ".", "num_episodes", "=", "num_episodes", "\n", "\n", "", "@", "property", "\n", "def", "description", "(", "self", ")", ":", "\n", "        ", "return", "\"\"\"\nThe scorer takes the average reward over the last {num_episodes} full episodes collected before a certain number of steps or seconds of experience have elapsed for each trial.\n\nThis reward is clipped and normalized to be between 0.0 and 1.0 using thresholds defined on a per-environment basis.\n        \"\"\"", ".", "rstrip", "(", ")", ".", "format", "(", "num_episodes", "=", "self", ".", "num_episodes", ")", "\n", "\n", "", "@", "property", "\n", "def", "null_score", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        This is used to compute benchmark scores when we are missing an evaluation\n        \"\"\"", "\n", "return", "0.0", "\n", "\n", "", "def", "score_evaluation", "(", "self", ",", "benchmark", ",", "env_id", ",", "data_sources", ",", "initial_reset_timestamps", ",", "episode_lengths", ",", "episode_rewards", ",", "episode_types", ",", "timestamps", ")", ":", "\n", "        ", "tasks", "=", "benchmark", ".", "task_specs", "(", "env_id", ")", "\n", "spec", "=", "envs", ".", "spec", "(", "env_id", ")", "\n", "\n", "#### 0. Compute timing stats", "\n", "\n", "if", "len", "(", "initial_reset_timestamps", ")", ">", "0", ":", "\n", "            ", "initial_reset_timestamp", "=", "min", "(", "initial_reset_timestamps", ")", "\n", "", "else", ":", "\n", "            ", "initial_reset_timestamp", "=", "0", "\n", "\n", "\n", "# How long each episode actually took", "\n", "# How long each episode actually took", "\n", "", "durations", "=", "np", ".", "zeros", "(", "len", "(", "timestamps", ")", ")", "\n", "\n", "data_sources", "=", "np", ".", "array", "(", "data_sources", ")", "\n", "timestamps", "=", "np", ".", "array", "(", "timestamps", ")", "\n", "for", "source", ",", "initial_ts", "in", "enumerate", "(", "initial_reset_timestamps", ")", ":", "\n", "            ", "(", "source_indexes", ",", ")", "=", "np", ".", "where", "(", "data_sources", "==", "source", ")", "\n", "\n", "if", "len", "(", "source_indexes", ")", "==", "0", ":", "\n", "                ", "continue", "\n", "# Once we know the indexes corresponding to a particular", "\n", "# source (i.e. worker thread), we can just subtract", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.scoreboard.scoring.benchmark_score_from_local": [[124, 144], ["environments.mujoco.rand_param_envs.gym.benchmark_spec", "os.walk", "collections.defaultdict", "environments.mujoco.rand_param_envs.gym.benchmarks.scoring.benchmark_aggregate_score", "environments.mujoco.rand_param_envs.gym.monitoring.detect_training_manifests", "environments.mujoco.rand_param_envs.gym.monitoring.load_results", "gym.benchmark_spec.score_evaluation", "benchmark_results[].append", "directories.append"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.benchmarks.registration.Registry.benchmark_spec", "home.repos.pwc.inspect_result.Rondorf_BOReL.benchmarks.scoring.benchmark_aggregate_score", "home.repos.pwc.inspect_result.Rondorf_BOReL.wrappers.monitoring.detect_training_manifests", "home.repos.pwc.inspect_result.Rondorf_BOReL.wrappers.monitoring.load_results", "home.repos.pwc.inspect_result.Rondorf_BOReL.benchmarks.scoring.BenchmarkScoringRule.score_evaluation"], ["", "durations", "[", "source_indexes", "[", "0", "]", "]", "=", "timestamps", "[", "source_indexes", "[", "0", "]", "]", "-", "initial_ts", "\n", "durations", "[", "source_indexes", "[", "1", ":", "]", "]", "=", "timestamps", "[", "source_indexes", "[", "1", ":", "]", "]", "-", "timestamps", "[", "source_indexes", "[", ":", "-", "1", "]", "]", "\n", "\n", "#### 1. Select out which indexes are for evaluation and which are for training", "\n", "\n", "", "(", "t_idx", ",", ")", "=", "np", ".", "where", "(", "[", "t", "==", "'t'", "for", "t", "in", "episode_types", "]", ")", "# training episodes", "\n", "(", "e_idx", ",", ")", "=", "np", ".", "where", "(", "[", "t", "==", "'e'", "for", "t", "in", "episode_types", "]", ")", "# evaluation episodes", "\n", "if", "len", "(", "e_idx", ")", "==", "0", ":", "\n", "# If no episodes marked for evaluation, consider", "\n", "# everything both a training and evaluation episode.", "\n", "            ", "(", "t_idx", ",", ")", "=", "np", ".", "where", "(", "[", "True", "for", "t", "in", "episode_types", "]", ")", "\n", "(", "e_idx", ",", ")", "=", "np", ".", "where", "(", "[", "True", "for", "t", "in", "episode_types", "]", ")", "\n", "\n", "#### 2. Grab the data corresponding to each of evaluation/training", "\n", "\n", "", "training_lengths", "=", "np", ".", "array", "(", "episode_lengths", ")", "[", "t_idx", "]", "\n", "training_rewards", "=", "np", ".", "array", "(", "episode_rewards", ")", "[", "t_idx", "]", "\n", "training_durations", "=", "np", ".", "array", "(", "durations", ")", "[", "t_idx", "]", "\n", "\n", "evaluation_lengths", "=", "np", ".", "array", "(", "episode_lengths", ")", "[", "e_idx", "]", "\n", "evaluation_rewards", "=", "np", ".", "array", "(", "episode_rewards", ")", "[", "e_idx", "]", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.scoreboard.scoring.benchmark_score_from_merged": [[145, 150], ["benchmark.score"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.toy_text.blackjack.score"], ["evaluation_durations", "=", "np", ".", "array", "(", "durations", ")", "[", "e_idx", "]", "\n", "\n", "#### 3. Calculate the total elapsed time (in various units)", "\n", "#### for each episode", "\n", "\n", "# How many training timesteps have elapsed by the end of each", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.scoreboard.scoring.running_mean": [[151, 155], ["numpy.array", "numpy.cumsum", "numpy.insert"], "function", ["None"], ["# episode. Not to be confused with Unix timestamps.", "\n", "elapsed_timesteps", "=", "np", ".", "cumsum", "(", "training_lengths", ")", "\n", "# Total number of seconds elapsed by the end of each", "\n", "# episode. Note that with n parallel workers each running for", "\n", "# m seconds, we want to count the total time as n * m.", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.scoreboard.scoring.compute_graph_stats": [[156, 198], ["len", "numpy.array", "numpy.array", "range", "scipy.stats.binned_statistic", "scipy.stats.binned_statistic", "scipy.stats.binned_statistic", "scipy.stats.binned_statistic", "scipy.stats.binned_statistic", "scipy.stats.binned_statistic", "numpy.cumsum", "len", "scoring.graphable_binned_statistic", "scoring.graphable_binned_statistic", "scoring.graphable_binned_statistic", "scoring.graphable_binned_statistic", "scoring.graphable_binned_statistic", "scoring.graphable_binned_statistic", "numpy.insert"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.scoreboard.scoring.graphable_binned_statistic", "home.repos.pwc.inspect_result.Rondorf_BOReL.scoreboard.scoring.graphable_binned_statistic", "home.repos.pwc.inspect_result.Rondorf_BOReL.scoreboard.scoring.graphable_binned_statistic", "home.repos.pwc.inspect_result.Rondorf_BOReL.scoreboard.scoring.graphable_binned_statistic", "home.repos.pwc.inspect_result.Rondorf_BOReL.scoreboard.scoring.graphable_binned_statistic", "home.repos.pwc.inspect_result.Rondorf_BOReL.scoreboard.scoring.graphable_binned_statistic"], ["elapsed_seconds", "=", "np", ".", "cumsum", "(", "training_durations", ")", "\n", "\n", "scores", "=", "[", "]", "\n", "solves", "=", "[", "]", "\n", "rewards", "=", "[", "]", "\n", "lengths", "=", "[", "]", "\n", "_timestamps", "=", "[", "]", "\n", "elapsed_times", "=", "[", "]", "\n", "for", "task", "in", "tasks", ":", "\n", "# Find the first episode where we're over the allotted", "\n", "# training timesteps.", "\n", "            ", "cutoff_idx", "=", "np", ".", "inf", "\n", "if", "task", ".", "max_timesteps", ":", "\n", "# this looks a little funny, but we want the first idx greater", "\n", "# than the cutoff", "\n", "                ", "(", "timestep_cutoff", ",", ")", "=", "np", ".", "where", "(", "elapsed_timesteps", ">", "task", ".", "max_timesteps", ")", "\n", "if", "len", "(", "timestep_cutoff", ")", ">", "0", ":", "\n", "                    ", "cutoff_idx", "=", "min", "(", "cutoff_idx", ",", "timestep_cutoff", "[", "0", "]", ")", "\n", "", "", "if", "task", ".", "max_seconds", ":", "\n", "                ", "(", "seconds_cutoff", ",", ")", "=", "np", ".", "where", "(", "elapsed_seconds", ">", "task", ".", "max_seconds", ")", "\n", "if", "len", "(", "seconds_cutoff", ")", ">", "0", ":", "\n", "                    ", "cutoff_idx", "=", "min", "(", "cutoff_idx", ",", "seconds_cutoff", "[", "0", "]", ")", "\n", "", "", "if", "np", ".", "isfinite", "(", "cutoff_idx", ")", ":", "\n", "                ", "orig_cutoff_idx", "=", "t_idx", "[", "cutoff_idx", "]", "# cutoff index in the original (i.e. before filtering to training/evaluation)", "\n", "(", "allowed_e_idx", ",", ")", "=", "np", ".", "where", "(", "e_idx", "<", "orig_cutoff_idx", ")", "# restrict to earlier episodes", "\n", "", "else", ":", "\n", "# All episodes are fair game", "\n", "                ", "allowed_e_idx", "=", "e_idx", "\n", "\n", "# Grab the last num_episodes evaluation episodes from", "\n", "# before the cutoff (at which point we've gathered too", "\n", "# much experience).", "\n", "#", "\n", "# This probably won't work long-term but is fine for now.", "\n", "", "allowed_episode_rewards", "=", "np", ".", "array", "(", "episode_rewards", ")", "[", "allowed_e_idx", "]", "\n", "reward", "=", "allowed_episode_rewards", "[", "-", "self", ".", "num_episodes", ":", "]", "\n", "allowed_episode_lengths", "=", "np", ".", "array", "(", "episode_lengths", ")", "[", "allowed_e_idx", "]", "\n", "length", "=", "allowed_episode_lengths", "[", "-", "self", ".", "num_episodes", ":", "]", "\n", "\n", "floor", "=", "task", ".", "reward_floor", "\n", "ceiling", "=", "task", ".", "reward_ceiling", "\n", "\n", "if", "len", "(", "reward", ")", "<", "self", ".", "num_episodes", ":", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.scoreboard.scoring.graphable_binned_statistic": [[200, 213], ["scoring.running_mean", "len", "len", "numpy.logical_not", "numpy.logical_not", "numpy.isnan", "numpy.isnan"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.scoreboard.scoring.running_mean"], ["logger", ".", "info", "(", "'Only %s rewards for %s; adding %s'", ",", "len", "(", "reward", ")", ",", "env_id", ",", "extra", ")", "\n", "reward", "=", "np", ".", "concatenate", "(", "[", "reward", ",", "[", "floor", "]", "*", "extra", "]", ")", "\n", "length", "=", "np", ".", "concatenate", "(", "[", "length", ",", "[", "0", "]", "*", "extra", "]", ")", "\n", "\n", "# Grab the indexes where we reached the ceiling", "\n", "", "solved", "=", "reward", ">=", "ceiling", "\n", "# Linearly rescale rewards to between 0 and 1", "\n", "clipped", "=", "np", ".", "clip", "(", "(", "reward", "-", "floor", ")", "/", "(", "ceiling", "-", "floor", ")", ",", "0", ",", "1", ")", "\n", "\n", "# Take the mean rescaled score", "\n", "score", "=", "np", ".", "mean", "(", "clipped", ")", "\n", "scores", ".", "append", "(", "score", ")", "\n", "# Record the list of solved episodes", "\n", "solves", ".", "append", "(", "solved", ")", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.GymObject.__init__": [[47, 60], ["dict.__init__", "set", "set", "object.__setattr__"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.__init__", "home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.GymObject.__setattr__"], ["    ", "def", "__init__", "(", "self", ",", "id", "=", "None", ",", "api_key", "=", "None", ",", "**", "params", ")", ":", "\n", "        ", "super", "(", "GymObject", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "_unsaved_values", "=", "set", "(", ")", "\n", "self", ".", "_transient_values", "=", "set", "(", ")", "\n", "\n", "self", ".", "_retrieve_params", "=", "params", "\n", "self", ".", "_previous", "=", "None", "\n", "\n", "object", ".", "__setattr__", "(", "self", ",", "'api_key'", ",", "api_key", ")", "\n", "\n", "if", "id", ":", "\n", "            ", "self", "[", "'id'", "]", "=", "id", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.GymObject.update": [[61, 66], ["super().update", "resource.GymObject._unsaved_values.add"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.GymObject.update"], ["", "", "def", "update", "(", "self", ",", "update_dict", ")", ":", "\n", "        ", "for", "k", "in", "update_dict", ":", "\n", "            ", "self", ".", "_unsaved_values", ".", "add", "(", "k", ")", "\n", "\n", "", "return", "super", "(", "GymObject", ",", "self", ")", ".", "update", "(", "update_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.GymObject.__setattr__": [[67, 72], ["dict.__setattr__"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.GymObject.__setattr__"], ["", "def", "__setattr__", "(", "self", ",", "k", ",", "v", ")", ":", "\n", "        ", "if", "k", "[", "0", "]", "==", "'_'", "or", "k", "in", "self", ".", "__dict__", ":", "\n", "            ", "return", "super", "(", "GymObject", ",", "self", ")", ".", "__setattr__", "(", "k", ",", "v", ")", "\n", "", "else", ":", "\n", "            ", "self", "[", "k", "]", "=", "v", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.GymObject.__getattr__": [[73, 81], ["AttributeError", "AttributeError"], "methods", ["None"], ["", "", "def", "__getattr__", "(", "self", ",", "k", ")", ":", "\n", "        ", "if", "k", "[", "0", "]", "==", "'_'", ":", "\n", "            ", "raise", "AttributeError", "(", "k", ")", "\n", "\n", "", "try", ":", "\n", "            ", "return", "self", "[", "k", "]", "\n", "", "except", "KeyError", "as", "err", ":", "\n", "            ", "raise", "AttributeError", "(", "*", "err", ".", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.GymObject.__delattr__": [[82, 87], ["dict.__delattr__"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.GymObject.__delattr__"], ["", "", "def", "__delattr__", "(", "self", ",", "k", ")", ":", "\n", "        ", "if", "k", "[", "0", "]", "==", "'_'", "or", "k", "in", "self", ".", "__dict__", ":", "\n", "            ", "return", "super", "(", "GymObject", ",", "self", ")", ".", "__delattr__", "(", "k", ")", "\n", "", "else", ":", "\n", "            ", "del", "self", "[", "k", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.GymObject.__setitem__": [[88, 103], ["super().__setitem__", "resource.GymObject._unsaved_values.add", "ValueError", "hasattr", "set", "str"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.MutableString.__setitem__"], ["", "", "def", "__setitem__", "(", "self", ",", "k", ",", "v", ")", ":", "\n", "        ", "if", "v", "==", "\"\"", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"You cannot set %s to an empty string. \"", "\n", "\"We interpret empty strings as None in requests.\"", "\n", "\"You may set %s.%s = None to delete the property\"", "%", "(", "\n", "k", ",", "str", "(", "self", ")", ",", "k", ")", ")", "\n", "\n", "", "super", "(", "GymObject", ",", "self", ")", ".", "__setitem__", "(", "k", ",", "v", ")", "\n", "\n", "# Allows for unpickling in Python 3.x", "\n", "if", "not", "hasattr", "(", "self", ",", "'_unsaved_values'", ")", ":", "\n", "            ", "self", ".", "_unsaved_values", "=", "set", "(", ")", "\n", "\n", "", "self", ".", "_unsaved_values", ".", "add", "(", "k", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.GymObject.__getitem__": [[104, 118], ["dict.__getitem__", "KeyError", "resource.GymObject.keys"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.__getitem__"], ["", "def", "__getitem__", "(", "self", ",", "k", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "return", "super", "(", "GymObject", ",", "self", ")", ".", "__getitem__", "(", "k", ")", "\n", "", "except", "KeyError", "as", "err", ":", "\n", "            ", "if", "k", "in", "self", ".", "_transient_values", ":", "\n", "                ", "raise", "KeyError", "(", "\n", "\"%r.  HINT: The %r attribute was set in the past.\"", "\n", "\"It was then wiped when refreshing the object with \"", "\n", "\"the result returned by Rl_Gym's API, probably as a \"", "\n", "\"result of a save().  The attributes currently \"", "\n", "\"available on this object are: %s\"", "%", "\n", "(", "k", ",", "k", ",", "', '", ".", "join", "(", "self", ".", "keys", "(", ")", ")", ")", ")", "\n", "", "else", ":", "\n", "                ", "raise", "err", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.GymObject.__delitem__": [[119, 125], ["super().__delitem__", "hasattr", "resource.GymObject._unsaved_values.remove"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.MutableString.__delitem__"], ["", "", "", "def", "__delitem__", "(", "self", ",", "k", ")", ":", "\n", "        ", "super", "(", "GymObject", ",", "self", ")", ".", "__delitem__", "(", "k", ")", "\n", "\n", "# Allows for unpickling in Python 3.x", "\n", "if", "hasattr", "(", "self", ",", "'_unsaved_values'", ")", ":", "\n", "            ", "self", ".", "_unsaved_values", ".", "remove", "(", "k", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.GymObject.construct_from": [[126, 131], ["cls", "cls.refresh_from", "values.get"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.GymObject.refresh_from"], ["", "", "@", "classmethod", "\n", "def", "construct_from", "(", "cls", ",", "values", ",", "key", ")", ":", "\n", "        ", "instance", "=", "cls", "(", "values", ".", "get", "(", "'id'", ")", ",", "api_key", "=", "key", ")", "\n", "instance", ".", "refresh_from", "(", "values", ",", "api_key", "=", "key", ")", "\n", "return", "instance", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.GymObject.refresh_from": [[132, 153], ["six.iteritems", "getattr", "set", "resource.GymObject.clear", "set", "super().__setitem__", "set", "set", "set", "resource.convert_to_gym_object", "resource.GymObject.keys"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.data_management.simple_replay_buffer.SimpleReplayBuffer.clear", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.MutableString.__setitem__", "home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.convert_to_gym_object"], ["", "def", "refresh_from", "(", "self", ",", "values", ",", "api_key", "=", "None", ",", "partial", "=", "False", ")", ":", "\n", "        ", "self", ".", "api_key", "=", "api_key", "or", "getattr", "(", "values", ",", "'api_key'", ",", "None", ")", "\n", "\n", "# Wipe old state before setting new.  This is useful for e.g.", "\n", "# updating a customer, where there is no persistent card", "\n", "# parameter.  Mark those values which don't persist as transient", "\n", "if", "partial", ":", "\n", "            ", "self", ".", "_unsaved_values", "=", "(", "self", ".", "_unsaved_values", "-", "set", "(", "values", ")", ")", "\n", "", "else", ":", "\n", "            ", "removed", "=", "set", "(", "self", ".", "keys", "(", ")", ")", "-", "set", "(", "values", ")", "\n", "self", ".", "_transient_values", "=", "self", ".", "_transient_values", "|", "removed", "\n", "self", ".", "_unsaved_values", "=", "set", "(", ")", "\n", "self", ".", "clear", "(", ")", "\n", "\n", "", "self", ".", "_transient_values", "=", "self", ".", "_transient_values", "-", "set", "(", "values", ")", "\n", "\n", "for", "k", ",", "v", "in", "iteritems", "(", "values", ")", ":", "\n", "            ", "super", "(", "GymObject", ",", "self", ")", ".", "__setitem__", "(", "\n", "k", ",", "convert_to_gym_object", "(", "v", ",", "api_key", ")", ")", "\n", "\n", "", "self", ".", "_previous", "=", "values", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.GymObject.api_base": [[154, 157], ["None"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "api_base", "(", "cls", ")", ":", "\n", "        ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.GymObject.request": [[158, 166], ["environments.mujoco.rand_param_envs.gym.scoreboard.client.api_requestor.APIRequestor", "environments.mujoco.rand_param_envs.gym.scoreboard.client.api_requestor.APIRequestor.request", "resource.convert_to_gym_object", "resource.GymObject.api_base"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.client.http_client.RequestsClient.request", "home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.convert_to_gym_object", "home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.GymObject.api_base"], ["", "def", "request", "(", "self", ",", "method", ",", "url", ",", "params", "=", "None", ",", "headers", "=", "None", ")", ":", "\n", "        ", "if", "params", "is", "None", ":", "\n", "            ", "params", "=", "self", ".", "_retrieve_params", "\n", "", "requestor", "=", "api_requestor", ".", "APIRequestor", "(", "\n", "key", "=", "self", ".", "api_key", ",", "api_base", "=", "self", ".", "api_base", "(", ")", ")", "\n", "response", ",", "api_key", "=", "requestor", ".", "request", "(", "method", ",", "url", ",", "params", ",", "headers", ")", "\n", "\n", "return", "convert_to_gym_object", "(", "response", ",", "api_key", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.GymObject.__repr__": [[167, 183], ["isinstance", "isinstance", "resource.GymObject.get", "ident_parts.append", "resource.GymObject.get", "ident_parts.append", "unicode_repr.encode", "type", "resource.GymObject.get", "hex", "str", "id", "resource.GymObject.get"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.encode", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjvGeomWrapper.type"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "ident_parts", "=", "[", "type", "(", "self", ")", ".", "__name__", "]", "\n", "\n", "if", "isinstance", "(", "self", ".", "get", "(", "'object'", ")", ",", "string_types", ")", ":", "\n", "            ", "ident_parts", ".", "append", "(", "self", ".", "get", "(", "'object'", ")", ")", "\n", "\n", "", "if", "isinstance", "(", "self", ".", "get", "(", "'id'", ")", ",", "string_types", ")", ":", "\n", "            ", "ident_parts", ".", "append", "(", "'id=%s'", "%", "(", "self", ".", "get", "(", "'id'", ")", ",", ")", ")", "\n", "\n", "", "unicode_repr", "=", "'<%s at %s> JSON: %s'", "%", "(", "\n", "' '", ".", "join", "(", "ident_parts", ")", ",", "hex", "(", "id", "(", "self", ")", ")", ",", "str", "(", "self", ")", ")", "\n", "\n", "if", "sys", ".", "version_info", "[", "0", "]", "<", "3", ":", "\n", "            ", "return", "unicode_repr", ".", "encode", "(", "'utf-8'", ")", "\n", "", "else", ":", "\n", "            ", "return", "unicode_repr", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.GymObject.__str__": [[184, 186], ["json.dumps"], "methods", ["None"], ["", "", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "json", ".", "dumps", "(", "self", ",", "sort_keys", "=", "True", ",", "indent", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.GymObject.to_dict": [[187, 195], ["warnings.warn", "dict"], "methods", ["None"], ["", "def", "to_dict", "(", "self", ")", ":", "\n", "        ", "warnings", ".", "warn", "(", "\n", "'The `to_dict` method is deprecated and will be removed in '", "\n", "'version 2.0 of the Rl_Gym bindings. The GymObject is '", "\n", "'itself now a subclass of `dict`.'", ",", "\n", "DeprecationWarning", ")", "\n", "\n", "return", "dict", "(", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.GymObject.gym_id": [[196, 199], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "gym_id", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "id", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.GymObject.serialize": [[200, 216], ["resource.GymObject.items", "set", "isinstance", "isinstance", "k.startswith", "hasattr", "v.serialize", "previous.get", "resource._compute_diff", "previous.get"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.startswith", "home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.GymObject.serialize", "home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource._compute_diff"], ["", "def", "serialize", "(", "self", ",", "previous", ")", ":", "\n", "        ", "params", "=", "{", "}", "\n", "unsaved_keys", "=", "self", ".", "_unsaved_values", "or", "set", "(", ")", "\n", "previous", "=", "previous", "or", "self", ".", "_previous", "or", "{", "}", "\n", "\n", "for", "k", ",", "v", "in", "self", ".", "items", "(", ")", ":", "\n", "            ", "if", "k", "==", "'id'", "or", "(", "isinstance", "(", "k", ",", "str", ")", "and", "k", ".", "startswith", "(", "'_'", ")", ")", ":", "\n", "                ", "continue", "\n", "", "elif", "isinstance", "(", "v", ",", "APIResource", ")", ":", "\n", "                ", "continue", "\n", "", "elif", "hasattr", "(", "v", ",", "'serialize'", ")", ":", "\n", "                ", "params", "[", "k", "]", "=", "v", ".", "serialize", "(", "previous", ".", "get", "(", "k", ",", "None", ")", ")", "\n", "", "elif", "k", "in", "unsaved_keys", ":", "\n", "                ", "params", "[", "k", "]", "=", "_compute_diff", "(", "v", ",", "previous", ".", "get", "(", "k", ",", "None", ")", ")", "\n", "\n", "", "", "return", "params", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.APIResource.retrieve": [[218, 223], ["cls", "cls.refresh"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.core.logger.TerminalTablePrinter.refresh"], ["    ", "@", "classmethod", "\n", "def", "retrieve", "(", "cls", ",", "id", ",", "api_key", "=", "None", ",", "**", "params", ")", ":", "\n", "        ", "instance", "=", "cls", "(", "id", ",", "api_key", ",", "**", "params", ")", "\n", "instance", ".", "refresh", "(", ")", "\n", "return", "instance", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.APIResource.refresh": [[224, 227], ["resource.APIResource.refresh_from", "resource.APIResource.request", "resource.APIResource.instance_path"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.GymObject.refresh_from", "home.repos.pwc.inspect_result.Rondorf_BOReL.client.http_client.RequestsClient.request", "home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.APIResource.instance_path"], ["", "def", "refresh", "(", "self", ")", ":", "\n", "        ", "self", ".", "refresh_from", "(", "self", ".", "request", "(", "'get'", ",", "self", ".", "instance_path", "(", ")", ")", ")", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.APIResource.class_name": [[228, 235], ["str", "NotImplementedError", "six.parse.quote_plus", "cls.__name__.lower"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.lower"], ["", "@", "classmethod", "\n", "def", "class_name", "(", "cls", ")", ":", "\n", "        ", "if", "cls", "==", "APIResource", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\n", "'APIResource is an abstract class.  You should perform '", "\n", "'actions on its subclasses'", ")", "\n", "", "return", "str", "(", "urllib", ".", "parse", ".", "quote_plus", "(", "cls", ".", "__name__", ".", "lower", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.APIResource.class_path": [[236, 240], ["cls.class_name"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.BenchmarkRun.class_name"], ["", "@", "classmethod", "\n", "def", "class_path", "(", "cls", ")", ":", "\n", "        ", "cls_name", "=", "cls", ".", "class_name", "(", ")", "\n", "return", "\"/v1/%ss\"", "%", "(", "cls_name", ",", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.APIResource.instance_path": [[241, 251], ["resource.APIResource.get", "environments.mujoco.rand_param_envs.gym.scoreboard.client.util.utf8", "resource.APIResource.class_path", "six.parse.quote_plus", "environments.mujoco.rand_param_envs.gym.error.InvalidRequestError", "type"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.client.util.utf8", "home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.APIResource.class_path", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjvGeomWrapper.type"], ["", "def", "instance_path", "(", "self", ")", ":", "\n", "        ", "id", "=", "self", ".", "get", "(", "'id'", ")", "\n", "if", "not", "id", ":", "\n", "            ", "raise", "error", ".", "InvalidRequestError", "(", "\n", "'Could not determine which URL to request: %s instance '", "\n", "'has invalid ID: %r'", "%", "(", "type", "(", "self", ")", ".", "__name__", ",", "id", ")", ",", "'id'", ")", "\n", "", "id", "=", "util", ".", "utf8", "(", "id", ")", "\n", "base", "=", "self", ".", "class_path", "(", ")", "\n", "extn", "=", "urllib", ".", "parse", ".", "quote_plus", "(", "id", ")", "\n", "return", "\"%s/%s\"", "%", "(", "base", ",", "extn", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.ListObject.list": [[253, 255], ["resource.ListObject.request"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.client.http_client.RequestsClient.request"], ["    ", "def", "list", "(", "self", ",", "**", "params", ")", ":", "\n", "        ", "return", "self", ".", "request", "(", "'get'", ",", "self", "[", "'url'", "]", ",", "params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.ListObject.all": [[256, 262], ["warnings.warn", "resource.ListObject.list"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.ListableAPIResource.list"], ["", "def", "all", "(", "self", ",", "**", "params", ")", ":", "\n", "        ", "warnings", ".", "warn", "(", "\"The `all` method is deprecated and will\"", "\n", "\"be removed in future versions. Please use the \"", "\n", "\"`list` method instead\"", ",", "\n", "DeprecationWarning", ")", "\n", "return", "self", ".", "list", "(", "**", "params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.ListObject.auto_paging_iter": [[263, 278], ["dict", "resource.ListObject.list", "item.get", "getattr"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.ListableAPIResource.list"], ["", "def", "auto_paging_iter", "(", "self", ")", ":", "\n", "        ", "page", "=", "self", "\n", "params", "=", "dict", "(", "self", ".", "_retrieve_params", ")", "\n", "\n", "while", "True", ":", "\n", "            ", "item_id", "=", "None", "\n", "for", "item", "in", "page", ":", "\n", "                ", "item_id", "=", "item", ".", "get", "(", "'id'", ",", "None", ")", "\n", "yield", "item", "\n", "\n", "", "if", "not", "getattr", "(", "page", ",", "'has_more'", ",", "False", ")", "or", "item_id", "is", "None", ":", "\n", "                ", "return", "\n", "\n", "", "params", "[", "'starting_after'", "]", "=", "item_id", "\n", "page", "=", "self", ".", "list", "(", "**", "params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.ListObject.create": [[279, 282], ["resource.populate_headers", "resource.ListObject.request"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.populate_headers", "home.repos.pwc.inspect_result.Rondorf_BOReL.client.http_client.RequestsClient.request"], ["", "", "def", "create", "(", "self", ",", "idempotency_key", "=", "None", ",", "**", "params", ")", ":", "\n", "        ", "headers", "=", "populate_headers", "(", "idempotency_key", ")", "\n", "return", "self", ".", "request", "(", "'post'", ",", "self", "[", "'url'", "]", ",", "params", ",", "headers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.ListObject.retrieve": [[283, 290], ["resource.ListObject.get", "environments.mujoco.rand_param_envs.gym.scoreboard.client.util.utf8", "six.parse.quote_plus", "resource.ListObject.request"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.client.util.utf8", "home.repos.pwc.inspect_result.Rondorf_BOReL.client.http_client.RequestsClient.request"], ["", "def", "retrieve", "(", "self", ",", "id", ",", "**", "params", ")", ":", "\n", "        ", "base", "=", "self", ".", "get", "(", "'url'", ")", "\n", "id", "=", "util", ".", "utf8", "(", "id", ")", "\n", "extn", "=", "urllib", ".", "parse", ".", "quote_plus", "(", "id", ")", "\n", "url", "=", "\"%s/%s\"", "%", "(", "base", ",", "extn", ")", "\n", "\n", "return", "self", ".", "request", "(", "'get'", ",", "url", ",", "params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.ListObject.__iter__": [[291, 293], ["getattr().__iter__", "getattr"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.ListObject.__iter__"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "return", "getattr", "(", "self", ",", "'data'", ",", "[", "]", ")", ".", "__iter__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.ListableAPIResource.all": [[297, 304], ["warnings.warn", "cls.list"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.ListableAPIResource.list"], ["    ", "@", "classmethod", "\n", "def", "all", "(", "cls", ",", "*", "args", ",", "**", "params", ")", ":", "\n", "        ", "warnings", ".", "warn", "(", "\"The `all` class method is deprecated and will\"", "\n", "\"be removed in future versions. Please use the \"", "\n", "\"`list` class method instead\"", ",", "\n", "DeprecationWarning", ")", "\n", "return", "cls", ".", "list", "(", "*", "args", ",", "**", "params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.ListableAPIResource.auto_paging_iter": [[305, 308], ["resource.ListableAPIResource.list().auto_paging_iter", "resource.ListableAPIResource.list"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.ListableAPIResource.auto_paging_iter", "home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.ListableAPIResource.list"], ["", "@", "classmethod", "\n", "def", "auto_paging_iter", "(", "self", ",", "*", "args", ",", "**", "params", ")", ":", "\n", "        ", "return", "self", ".", "list", "(", "*", "args", ",", "**", "params", ")", ".", "auto_paging_iter", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.ListableAPIResource.list": [[309, 315], ["environments.mujoco.rand_param_envs.gym.scoreboard.client.api_requestor.APIRequestor", "cls.class_path", "environments.mujoco.rand_param_envs.gym.scoreboard.client.api_requestor.APIRequestor.request", "resource.convert_to_gym_object"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.APIResource.class_path", "home.repos.pwc.inspect_result.Rondorf_BOReL.client.http_client.RequestsClient.request", "home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.convert_to_gym_object"], ["", "@", "classmethod", "\n", "def", "list", "(", "cls", ",", "api_key", "=", "None", ",", "idempotency_key", "=", "None", ",", "**", "params", ")", ":", "\n", "        ", "requestor", "=", "api_requestor", ".", "APIRequestor", "(", "api_key", ")", "\n", "url", "=", "cls", ".", "class_path", "(", ")", "\n", "response", ",", "api_key", "=", "requestor", ".", "request", "(", "'get'", ",", "url", ",", "params", ")", "\n", "return", "convert_to_gym_object", "(", "response", ",", "api_key", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.CreateableAPIResource.create": [[318, 325], ["environments.mujoco.rand_param_envs.gym.scoreboard.client.api_requestor.APIRequestor", "cls.class_path", "resource.populate_headers", "environments.mujoco.rand_param_envs.gym.scoreboard.client.api_requestor.APIRequestor.request", "resource.convert_to_gym_object"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.APIResource.class_path", "home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.populate_headers", "home.repos.pwc.inspect_result.Rondorf_BOReL.client.http_client.RequestsClient.request", "home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.convert_to_gym_object"], ["    ", "@", "classmethod", "\n", "def", "create", "(", "cls", ",", "api_key", "=", "None", ",", "idempotency_key", "=", "None", ",", "**", "params", ")", ":", "\n", "        ", "requestor", "=", "api_requestor", ".", "APIRequestor", "(", "api_key", ")", "\n", "url", "=", "cls", ".", "class_path", "(", ")", "\n", "headers", "=", "populate_headers", "(", "idempotency_key", ")", "\n", "response", ",", "api_key", "=", "requestor", ".", "request", "(", "'post'", ",", "url", ",", "params", ",", "headers", ")", "\n", "return", "convert_to_gym_object", "(", "response", ",", "api_key", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.UpdateableAPIResource.save": [[328, 338], ["resource.UpdateableAPIResource.serialize", "resource.populate_headers", "resource.UpdateableAPIResource.refresh_from", "environments.mujoco.rand_param_envs.gym.scoreboard.client.util.logging.debug", "resource.UpdateableAPIResource.request", "resource.UpdateableAPIResource.instance_path"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.GymObject.serialize", "home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.populate_headers", "home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.GymObject.refresh_from", "home.repos.pwc.inspect_result.Rondorf_BOReL.client.http_client.RequestsClient.request", "home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.APIResource.instance_path"], ["    ", "def", "save", "(", "self", ",", "idempotency_key", "=", "None", ")", ":", "\n", "        ", "updated_params", "=", "self", ".", "serialize", "(", "None", ")", "\n", "headers", "=", "populate_headers", "(", "idempotency_key", ")", "\n", "\n", "if", "updated_params", ":", "\n", "            ", "self", ".", "refresh_from", "(", "self", ".", "request", "(", "'post'", ",", "self", ".", "instance_path", "(", ")", ",", "\n", "updated_params", ",", "headers", ")", ")", "\n", "", "else", ":", "\n", "            ", "util", ".", "logging", ".", "debug", "(", "\"Trying to save already saved object %r\"", ",", "self", ")", "\n", "", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.DeletableAPIResource.delete": [[341, 344], ["resource.DeletableAPIResource.refresh_from", "resource.DeletableAPIResource.request", "resource.DeletableAPIResource.instance_path"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.GymObject.refresh_from", "home.repos.pwc.inspect_result.Rondorf_BOReL.client.http_client.RequestsClient.request", "home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.APIResource.instance_path"], ["    ", "def", "delete", "(", "self", ",", "**", "params", ")", ":", "\n", "        ", "self", ".", "refresh_from", "(", "self", ".", "request", "(", "'delete'", ",", "self", ".", "instance_path", "(", ")", ",", "params", ")", ")", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.FileUpload.class_name": [[348, 351], ["None"], "methods", ["None"], ["    ", "@", "classmethod", "\n", "def", "class_name", "(", "cls", ")", ":", "\n", "        ", "return", "'file'", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.FileUpload.create": [[352, 360], ["environments.mujoco.rand_param_envs.gym.scoreboard.client.api_requestor.APIRequestor", "cls.class_path", "environments.mujoco.rand_param_envs.gym.scoreboard.client.api_requestor.APIRequestor.request", "resource.convert_to_gym_object", "cls.api_base"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.APIResource.class_path", "home.repos.pwc.inspect_result.Rondorf_BOReL.client.http_client.RequestsClient.request", "home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.convert_to_gym_object", "home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.GymObject.api_base"], ["", "@", "classmethod", "\n", "def", "create", "(", "cls", ",", "api_key", "=", "None", ",", "**", "params", ")", ":", "\n", "        ", "requestor", "=", "api_requestor", ".", "APIRequestor", "(", "\n", "api_key", ",", "api_base", "=", "cls", ".", "api_base", "(", ")", ")", "\n", "url", "=", "cls", ".", "class_path", "(", ")", "\n", "response", ",", "api_key", "=", "requestor", ".", "request", "(", "\n", "'post'", ",", "url", ",", "params", "=", "params", ")", "\n", "return", "convert_to_gym_object", "(", "response", ",", "api_key", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.FileUpload.put": [[361, 378], ["environments.mujoco.rand_param_envs.gym.scoreboard.client.api_requestor.http_client.request", "json.dumps", "environments.mujoco.rand_param_envs.gym.error.Error", "environments.mujoco.rand_param_envs.gym.error.Error"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.client.http_client.RequestsClient.request"], ["", "def", "put", "(", "self", ",", "contents", ",", "encode", "=", "'json'", ")", ":", "\n", "        ", "supplied_headers", "=", "{", "\n", "\"Content-Type\"", ":", "self", ".", "content_type", "\n", "}", "\n", "if", "encode", "==", "'json'", ":", "\n", "            ", "contents", "=", "json", ".", "dumps", "(", "contents", ")", "\n", "", "elif", "encode", "is", "None", ":", "\n", "            ", "pass", "\n", "", "else", ":", "\n", "            ", "raise", "error", ".", "Error", "(", "'Encode request for put must be \"json\" or None, not {}'", ".", "format", "(", "encode", ")", ")", "\n", "\n", "", "files", "=", "{", "'file'", ":", "contents", "}", "\n", "\n", "body", ",", "code", ",", "headers", "=", "api_requestor", ".", "http_client", ".", "request", "(", "\n", "'post'", ",", "self", ".", "post_url", ",", "post_data", "=", "self", ".", "post_fields", ",", "files", "=", "files", ",", "headers", "=", "{", "}", ")", "\n", "if", "code", "!=", "204", ":", "\n", "            ", "raise", "error", ".", "Error", "(", "\"Upload to S3 failed. If error persists, please contact us at gym@openai.com this message. S3 returned '{} -- {}'. Tried 'POST {}' with fields {}.\"", ".", "format", "(", "code", ",", "body", ",", "self", ".", "post_url", ",", "self", ".", "post_fields", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.Evaluation.web_url": [[380, 382], ["resource.Evaluation.get"], "methods", ["None"], ["    ", "def", "web_url", "(", "self", ")", ":", "\n", "        ", "return", "\"%s/evaluations/%s\"", "%", "(", "gym", ".", "scoreboard", ".", "web_base", ",", "self", ".", "get", "(", "'id'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.BenchmarkRun.class_name": [[387, 390], ["None"], "methods", ["None"], ["    ", "@", "classmethod", "\n", "def", "class_name", "(", "cls", ")", ":", "\n", "        ", "return", "'benchmark_run'", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.BenchmarkRun.web_url": [[391, 393], ["resource.BenchmarkRun.get"], "methods", ["None"], ["", "def", "web_url", "(", "self", ")", ":", "\n", "        ", "return", "\"%s/benchmark_runs/%s\"", "%", "(", "gym", ".", "scoreboard", ".", "web_base", ",", "self", ".", "get", "(", "'id'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.BenchmarkRun.commit": [[394, 396], ["resource.BenchmarkRun.request", "resource.BenchmarkRun.instance_path"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.client.http_client.RequestsClient.request", "home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.APIResource.instance_path"], ["", "def", "commit", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "request", "(", "'post'", ",", "'{}/commit'", ".", "format", "(", "self", ".", "instance_path", "(", ")", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.convert_to_gym_object": [[12, 31], ["isinstance", "resource.convert_to_gym_object", "isinstance", "resp.copy.copy", "resp.copy.get", "isinstance", "types.get.construct_from", "isinstance", "types.get"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.convert_to_gym_object", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.core.PyTorchModule.copy", "home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.GymObject.construct_from"], ["def", "convert_to_gym_object", "(", "resp", ",", "api_key", ")", ":", "\n", "    ", "types", "=", "{", "\n", "'evaluation'", ":", "Evaluation", ",", "\n", "'file'", ":", "FileUpload", ",", "\n", "'benchmark_run'", ":", "BenchmarkRun", ",", "\n", "}", "\n", "\n", "if", "isinstance", "(", "resp", ",", "list", ")", ":", "\n", "        ", "return", "[", "convert_to_gym_object", "(", "i", ",", "api_key", ")", "for", "i", "in", "resp", "]", "\n", "", "elif", "isinstance", "(", "resp", ",", "dict", ")", "and", "not", "isinstance", "(", "resp", ",", "GymObject", ")", ":", "\n", "        ", "resp", "=", "resp", ".", "copy", "(", ")", "\n", "klass_name", "=", "resp", ".", "get", "(", "'object'", ")", "\n", "if", "isinstance", "(", "klass_name", ",", "string_types", ")", ":", "\n", "            ", "klass", "=", "types", ".", "get", "(", "klass_name", ",", "GymObject", ")", "\n", "", "else", ":", "\n", "            ", "klass", "=", "GymObject", "\n", "", "return", "klass", ".", "construct_from", "(", "resp", ",", "api_key", ")", "\n", "", "else", ":", "\n", "        ", "return", "resp", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.populate_headers": [[32, 36], ["None"], "function", ["None"], ["", "", "def", "populate_headers", "(", "idempotency_key", ")", ":", "\n", "    ", "if", "idempotency_key", "is", "not", "None", ":", "\n", "        ", "return", "{", "\"Idempotency-Key\"", ":", "idempotency_key", "}", "\n", "", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource._compute_diff": [[37, 45], ["isinstance", "current.copy", "set", "set", "previous.keys", "current.copy.keys"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.core.PyTorchModule.copy"], ["", "def", "_compute_diff", "(", "current", ",", "previous", ")", ":", "\n", "    ", "if", "isinstance", "(", "current", ",", "dict", ")", ":", "\n", "        ", "previous", "=", "previous", "or", "{", "}", "\n", "diff", "=", "current", ".", "copy", "(", ")", "\n", "for", "key", "in", "set", "(", "previous", ".", "keys", "(", ")", ")", "-", "set", "(", "diff", ".", "keys", "(", ")", ")", ":", "\n", "            ", "diff", "[", "key", "]", "=", "\"\"", "\n", "", "return", "diff", "\n", "", "return", "current", "if", "current", "is", "not", "None", "else", "\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.client.api_requestor.APIRequestor.__init__": [[32, 36], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "key", "=", "None", ",", "api_base", "=", "None", ")", ":", "\n", "        ", "self", ".", "api_base", "=", "api_base", "or", "gym", ".", "scoreboard", ".", "api_base", "\n", "self", ".", "api_key", "=", "key", "\n", "self", ".", "_client", "=", "http_client", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.client.api_requestor.APIRequestor.request": [[37, 42], ["api_requestor.APIRequestor.request_raw", "api_requestor.APIRequestor.interpret_response", "method.lower"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.client.api_requestor.APIRequestor.request_raw", "home.repos.pwc.inspect_result.Rondorf_BOReL.client.api_requestor.APIRequestor.interpret_response", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.lower"], ["", "def", "request", "(", "self", ",", "method", ",", "url", ",", "params", "=", "None", ",", "headers", "=", "None", ")", ":", "\n", "        ", "rbody", ",", "rcode", ",", "rheaders", ",", "my_api_key", "=", "self", ".", "request_raw", "(", "\n", "method", ".", "lower", "(", ")", ",", "url", ",", "params", ",", "headers", ")", "\n", "resp", "=", "self", ".", "interpret_response", "(", "rbody", ",", "rcode", ",", "rheaders", ")", "\n", "return", "resp", ",", "my_api_key", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.client.api_requestor.APIRequestor.handle_api_error": [[43, 69], ["environments.mujoco.rand_param_envs.gym.error.RateLimitError", "resp.get", "resp.get", "environments.mujoco.rand_param_envs.gym.error.InvalidRequestError", "resp.get", "environments.mujoco.rand_param_envs.gym.error.AuthenticationError", "resp.get", "resp.get", "environments.mujoco.rand_param_envs.gym.error.APIError", "resp.get"], "methods", ["None"], ["", "def", "handle_api_error", "(", "self", ",", "rbody", ",", "rcode", ",", "resp", ",", "rheaders", ")", ":", "\n", "# Rate limits were previously coded as 400's with code 'rate_limit'", "\n", "        ", "if", "rcode", "==", "429", ":", "\n", "            ", "raise", "error", ".", "RateLimitError", "(", "\n", "resp", ".", "get", "(", "'detail'", ")", ",", "rbody", ",", "rcode", ",", "resp", ",", "rheaders", ")", "\n", "", "elif", "rcode", "in", "[", "400", ",", "404", "]", ":", "\n", "            ", "type", "=", "resp", ".", "get", "(", "'type'", ")", "\n", "if", "type", "==", "'about:blank'", ":", "\n", "                ", "type", "=", "None", "\n", "", "raise", "error", ".", "InvalidRequestError", "(", "\n", "resp", ".", "get", "(", "'detail'", ")", ",", "type", ",", "\n", "rbody", ",", "rcode", ",", "resp", ",", "rheaders", ")", "\n", "", "elif", "rcode", "==", "401", ":", "\n", "            ", "raise", "error", ".", "AuthenticationError", "(", "\n", "resp", ".", "get", "(", "'detail'", ")", ",", "rbody", ",", "rcode", ",", "resp", ",", "\n", "rheaders", ")", "\n", "", "else", ":", "\n", "            ", "detail", "=", "resp", ".", "get", "(", "'detail'", ")", "\n", "\n", "# This information will only be returned to developers of", "\n", "# the OpenAI Gym Scoreboard.", "\n", "dev_info", "=", "resp", ".", "get", "(", "'dev_info'", ")", "\n", "if", "dev_info", ":", "\n", "                ", "detail", "=", "\"{}\\n\\n<dev_info>\\n{}\\n</dev_info>\"", ".", "format", "(", "detail", ",", "dev_info", "[", "'traceback'", "]", ")", "\n", "", "raise", "error", ".", "APIError", "(", "detail", ",", "rbody", ",", "rcode", ",", "resp", ",", "\n", "rheaders", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.client.api_requestor.APIRequestor.request_raw": [[70, 134], ["api_requestor.APIRequestor._client.request", "environments.mujoco.rand_param_envs.gym.error.AuthenticationError", "json.dumps", "json.dumps", "supplied_headers.items", "api_requestor._strip_nulls", "api_requestor._build_api_url", "environments.mujoco.rand_param_envs.gym.error.APIConnectionError", "func"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.client.http_client.RequestsClient.request", "home.repos.pwc.inspect_result.Rondorf_BOReL.client.api_requestor._strip_nulls", "home.repos.pwc.inspect_result.Rondorf_BOReL.client.api_requestor._build_api_url"], ["", "", "def", "request_raw", "(", "self", ",", "method", ",", "url", ",", "params", "=", "None", ",", "supplied_headers", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Mechanism for issuing an API call\n        \"\"\"", "\n", "if", "self", ".", "api_key", ":", "\n", "            ", "my_api_key", "=", "self", ".", "api_key", "\n", "", "else", ":", "\n", "            ", "my_api_key", "=", "gym", ".", "scoreboard", ".", "api_key", "\n", "\n", "", "if", "my_api_key", "is", "None", ":", "\n", "            ", "raise", "error", ".", "AuthenticationError", "(", "\"\"\"You must provide an OpenAI Gym API key.\n\n(HINT: Set your API key using \"gym.scoreboard.api_key = ..\" or \"export OPENAI_GYM_API_KEY=...\"). You can find your API key in the OpenAI Gym web interface: https://gym.openai.com/settings/profile.\"\"\"", ")", "\n", "\n", "", "abs_url", "=", "'%s%s'", "%", "(", "self", ".", "api_base", ",", "url", ")", "\n", "\n", "if", "params", ":", "\n", "            ", "encoded_params", "=", "json", ".", "dumps", "(", "_strip_nulls", "(", "params", ")", ")", "\n", "", "else", ":", "\n", "            ", "encoded_params", "=", "None", "\n", "\n", "", "if", "method", "==", "'get'", "or", "method", "==", "'delete'", ":", "\n", "            ", "if", "params", ":", "\n", "                ", "abs_url", "=", "_build_api_url", "(", "abs_url", ",", "encoded_params", ")", "\n", "", "post_data", "=", "None", "\n", "", "elif", "method", "==", "'post'", ":", "\n", "            ", "post_data", "=", "encoded_params", "\n", "", "else", ":", "\n", "            ", "raise", "error", ".", "APIConnectionError", "(", "\n", "'Unrecognized HTTP method %r.  This may indicate a bug in the '", "\n", "'OpenAI Gym bindings.  Please contact gym@openai.com for '", "\n", "'assistance.'", "%", "(", "method", ",", ")", ")", "\n", "\n", "", "ua", "=", "{", "\n", "'bindings_version'", ":", "version", ".", "VERSION", ",", "\n", "'lang'", ":", "'python'", ",", "\n", "'publisher'", ":", "'openai'", ",", "\n", "'httplib'", ":", "self", ".", "_client", ".", "name", ",", "\n", "}", "\n", "for", "attr", ",", "func", "in", "[", "[", "'lang_version'", ",", "platform", ".", "python_version", "]", ",", "\n", "[", "'platform'", ",", "platform", ".", "platform", "]", "]", ":", "\n", "            ", "try", ":", "\n", "                ", "val", "=", "func", "(", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "                ", "val", "=", "\"!! %s\"", "%", "(", "e", ",", ")", "\n", "", "ua", "[", "attr", "]", "=", "val", "\n", "\n", "", "headers", "=", "{", "\n", "'Openai-Gym-User-Agent'", ":", "json", ".", "dumps", "(", "ua", ")", ",", "\n", "'User-Agent'", ":", "'Openai-Gym/v1 PythonBindings/%s'", "%", "(", "version", ".", "VERSION", ",", ")", ",", "\n", "'Authorization'", ":", "'Bearer %s'", "%", "(", "my_api_key", ",", ")", "\n", "}", "\n", "\n", "if", "method", "==", "'post'", ":", "\n", "            ", "headers", "[", "'Content-Type'", "]", "=", "'application/json'", "\n", "\n", "", "if", "supplied_headers", "is", "not", "None", ":", "\n", "            ", "for", "key", ",", "value", "in", "supplied_headers", ".", "items", "(", ")", ":", "\n", "                ", "headers", "[", "key", "]", "=", "value", "\n", "\n", "", "", "rbody", ",", "rcode", ",", "rheaders", "=", "self", ".", "_client", ".", "request", "(", "\n", "method", ",", "abs_url", ",", "headers", ",", "post_data", ")", "\n", "\n", "return", "rbody", ",", "rcode", ",", "rheaders", ",", "my_api_key", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.client.api_requestor.APIRequestor.interpret_response": [[135, 159], ["rheaders.get", "rheaders.get.startswith", "api_requestor.APIRequestor.handle_api_error", "hasattr", "json.loads", "api_requestor.APIRequestor.handle_api_error", "rbody.decode.decode.decode", "environments.mujoco.rand_param_envs.gym.error.APIError"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.startswith", "home.repos.pwc.inspect_result.Rondorf_BOReL.client.api_requestor.APIRequestor.handle_api_error", "home.repos.pwc.inspect_result.Rondorf_BOReL.client.api_requestor.APIRequestor.handle_api_error", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.decode"], ["", "def", "interpret_response", "(", "self", ",", "rbody", ",", "rcode", ",", "rheaders", ")", ":", "\n", "        ", "content_type", "=", "rheaders", ".", "get", "(", "'Content-Type'", ",", "''", ")", "\n", "if", "content_type", ".", "startswith", "(", "'text/plain'", ")", ":", "\n", "# Pass through plain text", "\n", "            ", "resp", "=", "rbody", "\n", "\n", "if", "not", "(", "200", "<=", "rcode", "<", "300", ")", ":", "\n", "                ", "self", ".", "handle_api_error", "(", "rbody", ",", "rcode", ",", "{", "}", ",", "rheaders", ")", "\n", "", "", "else", ":", "\n", "# TODO: Be strict about other Content-Types", "\n", "            ", "try", ":", "\n", "                ", "if", "hasattr", "(", "rbody", ",", "'decode'", ")", ":", "\n", "                    ", "rbody", "=", "rbody", ".", "decode", "(", "'utf-8'", ")", "\n", "", "resp", "=", "json", ".", "loads", "(", "rbody", ")", "\n", "", "except", "Exception", ":", "\n", "                ", "raise", "error", ".", "APIError", "(", "\n", "\"Invalid response body from API: %s \"", "\n", "\"(HTTP response code was %d)\"", "%", "(", "rbody", ",", "rcode", ")", ",", "\n", "rbody", ",", "rcode", ",", "rheaders", ")", "\n", "\n", "", "if", "not", "(", "200", "<=", "rcode", "<", "300", ")", ":", "\n", "                ", "self", ".", "handle_api_error", "(", "rbody", ",", "rcode", ",", "resp", ",", "rheaders", ")", "\n", "\n", "", "", "return", "resp", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Rondorf_BOReL.client.api_requestor._build_api_url": [[12, 19], ["six.urlsplit", "six.urlunsplit"], "function", ["None"], ["def", "_build_api_url", "(", "url", ",", "query", ")", ":", "\n", "    ", "scheme", ",", "netloc", ",", "path", ",", "base_query", ",", "fragment", "=", "urlparse", ".", "urlsplit", "(", "url", ")", "\n", "\n", "if", "base_query", ":", "\n", "        ", "query", "=", "'%s&%s'", "%", "(", "base_query", ",", "query", ")", "\n", "\n", "", "return", "urlparse", ".", "urlunsplit", "(", "(", "scheme", ",", "netloc", ",", "path", ",", "query", ",", "fragment", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.client.api_requestor._strip_nulls": [[20, 30], ["isinstance", "six.iteritems", "api_requestor._strip_nulls"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.client.api_requestor._strip_nulls"], ["", "def", "_strip_nulls", "(", "params", ")", ":", "\n", "    ", "if", "isinstance", "(", "params", ",", "dict", ")", ":", "\n", "        ", "stripped", "=", "{", "}", "\n", "for", "key", ",", "value", "in", "iteritems", "(", "params", ")", ":", "\n", "            ", "value", "=", "_strip_nulls", "(", "value", ")", "\n", "if", "value", "is", "not", "None", ":", "\n", "                ", "stripped", "[", "key", "]", "=", "value", "\n", "", "", "return", "stripped", "\n", "", "else", ":", "\n", "        ", "return", "params", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.client.http_client.RequestsClient.__init__": [[23, 26], ["requests.Session"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "verify_ssl_certs", "=", "True", ")", ":", "\n", "        ", "self", ".", "_verify_ssl_certs", "=", "verify_ssl_certs", "\n", "self", ".", "session", "=", "requests", ".", "Session", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.client.http_client.RequestsClient.request": [[27, 75], ["logger.debug", "logger.warn", "http_client.RequestsClient.session.request", "http_client.RequestsClient._handle_request_error", "http_client.render_post_data", "logger.info", "TypeError", "method.upper"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.client.http_client.RequestsClient.request", "home.repos.pwc.inspect_result.Rondorf_BOReL.client.http_client.RequestsClient._handle_request_error", "home.repos.pwc.inspect_result.Rondorf_BOReL.client.http_client.render_post_data", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.upper"], ["", "def", "request", "(", "self", ",", "method", ",", "url", ",", "headers", ",", "post_data", "=", "None", ",", "files", "=", "None", ")", ":", "\n", "        ", "global", "warned", "\n", "kwargs", "=", "{", "}", "\n", "\n", "# Really, really only turn this off while debugging.", "\n", "if", "not", "self", ".", "_verify_ssl_certs", ":", "\n", "            ", "if", "not", "warned", ":", "\n", "                ", "logger", ".", "warn", "(", "'You have disabled SSL cert verification in OpenAI Gym, so we will not verify SSL certs. This means an attacker with control of your network could snoop on or modify your data in transit.'", ")", "\n", "warned", "=", "True", "\n", "", "kwargs", "[", "'verify'", "]", "=", "False", "\n", "\n", "", "try", ":", "\n", "            ", "try", ":", "\n", "                ", "result", "=", "self", ".", "session", ".", "request", "(", "method", ",", "\n", "url", ",", "\n", "headers", "=", "headers", ",", "\n", "data", "=", "post_data", ",", "\n", "timeout", "=", "200", ",", "\n", "files", "=", "files", ",", "\n", "**", "kwargs", ")", "\n", "", "except", "TypeError", "as", "e", ":", "\n", "                ", "raise", "TypeError", "(", "\n", "'Warning: It looks like your installed version of the '", "\n", "'\"requests\" library is not compatible with OpenAI Gym\\'s'", "\n", "'usage thereof. (HINT: The most likely cause is that '", "\n", "'your \"requests\" library is out of date. You can fix '", "\n", "'that by running \"pip install -U requests\".) The '", "\n", "'underlying error was: %s'", "%", "(", "e", ",", ")", ")", "\n", "\n", "# This causes the content to actually be read, which could cause", "\n", "# e.g. a socket timeout. TODO: The other fetch methods probably", "\n", "# are susceptible to the same and should be updated.", "\n", "", "content", "=", "result", ".", "content", "\n", "status_code", "=", "result", ".", "status_code", "\n", "", "except", "Exception", "as", "e", ":", "\n", "# Would catch just requests.exceptions.RequestException, but can", "\n", "# also raise ValueError, RuntimeError, etc.", "\n", "            ", "self", ".", "_handle_request_error", "(", "e", ",", "method", ",", "url", ")", "\n", "\n", "", "if", "logger", ".", "level", "<=", "logger", ".", "DEBUG", ":", "\n", "            ", "logger", ".", "debug", "(", "\n", "\"\"\"API request to %s returned (response code, response body) of\n(%d, %r)\n\nRequest body was: %s\"\"\"", ",", "url", ",", "status_code", ",", "content", ",", "render_post_data", "(", "post_data", ")", ")", "\n", "", "elif", "logger", ".", "level", "<=", "logger", ".", "INFO", ":", "\n", "            ", "logger", ".", "info", "(", "'HTTP request: %s %s %d'", ",", "method", ".", "upper", "(", ")", ",", "url", ",", "status_code", ")", "\n", "", "return", "content", ",", "status_code", ",", "result", ".", "headers", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.client.http_client.RequestsClient._handle_request_error": [[76, 95], ["isinstance", "environments.mujoco.rand_param_envs.gym.error.APIConnectionError", "str", "textwrap.fill", "str", "type", "type", "str"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjvGeomWrapper.type", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjvGeomWrapper.type"], ["", "def", "_handle_request_error", "(", "self", ",", "e", ",", "method", ",", "url", ")", ":", "\n", "        ", "if", "isinstance", "(", "e", ",", "requests", ".", "exceptions", ".", "RequestException", ")", ":", "\n", "            ", "msg", "=", "(", "\"Unexpected error communicating with OpenAI Gym \"", "\n", "\"(while calling {} {}). \"", "\n", "\"If this problem persists, let us know at \"", "\n", "\"gym@openai.com.\"", ".", "format", "(", "method", ",", "url", ")", ")", "\n", "err", "=", "\"%s: %s\"", "%", "(", "type", "(", "e", ")", ".", "__name__", ",", "str", "(", "e", ")", ")", "\n", "", "else", ":", "\n", "            ", "msg", "=", "(", "\"Unexpected error communicating with OpenAI Gym. \"", "\n", "\"It looks like there's probably a configuration \"", "\n", "\"issue locally.  If this problem persists, let us \"", "\n", "\"know at gym@openai.com.\"", ")", "\n", "err", "=", "\"A %s was raised\"", "%", "(", "type", "(", "e", ")", ".", "__name__", ",", ")", "\n", "if", "str", "(", "e", ")", ":", "\n", "                ", "err", "+=", "\" with error message %s\"", "%", "(", "str", "(", "e", ")", ",", ")", "\n", "", "else", ":", "\n", "                ", "err", "+=", "\" with no error message\"", "\n", "", "", "msg", "=", "textwrap", ".", "fill", "(", "msg", ",", "width", "=", "140", ")", "+", "\"\\n\\n(Network error: %s)\"", "%", "(", "err", ",", ")", "\n", "raise", "error", ".", "APIConnectionError", "(", "msg", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Rondorf_BOReL.client.http_client.render_post_data": [[12, 19], ["hasattr", "isinstance", "environments.mujoco.rand_param_envs.gym.scoreboard.client.util.file_size", "len"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.client.util.file_size"], ["def", "render_post_data", "(", "post_data", ")", ":", "\n", "    ", "if", "hasattr", "(", "post_data", ",", "'fileno'", ")", ":", "# todo: is this the right way of checking if it's a file?", "\n", "        ", "return", "'%r (%d bytes)'", "%", "(", "post_data", ",", "util", ".", "file_size", "(", "post_data", ")", ")", "\n", "", "elif", "isinstance", "(", "post_data", ",", "(", "six", ".", "string_types", ",", "six", ".", "binary_type", ")", ")", ":", "\n", "        ", "return", "'%r (%d bytes)'", "%", "(", "post_data", ",", "len", "(", "post_data", ")", ")", "\n", "", "else", ":", "\n", "        ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.client.util.utf8": [[7, 12], ["isinstance", "value.encode"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.encode"], ["def", "utf8", "(", "value", ")", ":", "\n", "    ", "if", "isinstance", "(", "value", ",", "unicode", ")", "and", "sys", ".", "version_info", "<", "(", "3", ",", "0", ")", ":", "\n", "        ", "return", "value", ".", "encode", "(", "'utf-8'", ")", "\n", "", "else", ":", "\n", "        ", "return", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.client.util.file_size": [[13, 15], ["os.fstat", "f.fileno"], "function", ["None"], ["", "", "def", "file_size", "(", "f", ")", ":", "\n", "    ", "return", "os", ".", "fstat", "(", "f", ".", "fileno", "(", ")", ")", ".", "st_size", "\n", "", ""]], "home.repos.pwc.inspect_result.Rondorf_BOReL.wrappers.time_limit.TimeLimit.__init__": [[10, 17], ["environments.mujoco.rand_param_envs.gym.Wrapper.__init__"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.__init__"], ["    ", "def", "__init__", "(", "self", ",", "env", ",", "max_episode_seconds", "=", "None", ",", "max_episode_steps", "=", "None", ")", ":", "\n", "        ", "super", "(", "TimeLimit", ",", "self", ")", ".", "__init__", "(", "env", ")", "\n", "self", ".", "_max_episode_seconds", "=", "max_episode_seconds", "\n", "self", ".", "_max_episode_steps", "=", "max_episode_steps", "\n", "\n", "self", ".", "_elapsed_steps", "=", "0", "\n", "self", ".", "_episode_started_at", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.wrappers.time_limit.TimeLimit._elapsed_seconds": [[18, 21], ["time.time"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjDataWrapper.time"], ["", "@", "property", "\n", "def", "_elapsed_seconds", "(", "self", ")", ":", "\n", "        ", "return", "time", ".", "time", "(", ")", "-", "self", ".", "_episode_started_at", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.wrappers.time_limit.TimeLimit._past_limit": [[22, 33], ["logger.debug", "logger.debug"], "methods", ["None"], ["", "def", "_past_limit", "(", "self", ")", ":", "\n", "        ", "\"\"\"Return true if we are past our limit\"\"\"", "\n", "if", "self", ".", "_max_episode_steps", "is", "not", "None", "and", "self", ".", "_max_episode_steps", "<=", "self", ".", "_elapsed_steps", ":", "\n", "            ", "logger", ".", "debug", "(", "\"Env has passed the step limit defined by TimeLimit.\"", ")", "\n", "return", "True", "\n", "\n", "", "if", "self", ".", "_max_episode_seconds", "is", "not", "None", "and", "self", ".", "_max_episode_seconds", "<=", "self", ".", "_elapsed_seconds", ":", "\n", "            ", "logger", ".", "debug", "(", "\"Env has passed the seconds limit defined by TimeLimit.\"", ")", "\n", "return", "True", "\n", "\n", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.wrappers.time_limit.TimeLimit._step": [[34, 45], ["time_limit.TimeLimit.env.step", "time_limit.TimeLimit._past_limit", "time_limit.TimeLimit.metadata.get", "time_limit.TimeLimit.reset"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.step", "home.repos.pwc.inspect_result.Rondorf_BOReL.wrappers.time_limit.TimeLimit._past_limit", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.reset"], ["", "def", "_step", "(", "self", ",", "action", ")", ":", "\n", "        ", "assert", "self", ".", "_episode_started_at", "is", "not", "None", ",", "\"Cannot call env.step() before calling reset()\"", "\n", "observation", ",", "reward", ",", "done", ",", "info", "=", "self", ".", "env", ".", "step", "(", "action", ")", "\n", "self", ".", "_elapsed_steps", "+=", "1", "\n", "\n", "if", "self", ".", "_past_limit", "(", ")", ":", "\n", "            ", "if", "self", ".", "metadata", ".", "get", "(", "'semantics.autoreset'", ")", ":", "\n", "                ", "_", "=", "self", ".", "reset", "(", ")", "# automatically reset the env", "\n", "", "done", "=", "True", "\n", "\n", "", "return", "observation", ",", "reward", ",", "done", ",", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.wrappers.time_limit.TimeLimit._reset": [[46, 50], ["time.time", "time_limit.TimeLimit.env.reset"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjDataWrapper.time", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.reset"], ["", "def", "_reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "_episode_started_at", "=", "time", ".", "time", "(", ")", "\n", "self", ".", "_elapsed_steps", "=", "0", "\n", "return", "self", ".", "env", ".", "reset", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Rondorf_BOReL.wrappers.monitoring.Monitor.__init__": [[15, 30], ["environments.mujoco.rand_param_envs.gym.Wrapper.__init__", "env.metadata.get", "monitoring.Monitor._start"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.__init__", "home.repos.pwc.inspect_result.Rondorf_BOReL.wrappers.monitoring.Monitor._start"], ["    ", "def", "__init__", "(", "self", ",", "env", ",", "directory", ",", "video_callable", "=", "None", ",", "force", "=", "False", ",", "resume", "=", "False", ",", "\n", "write_upon_reset", "=", "False", ",", "uid", "=", "None", ",", "mode", "=", "None", ")", ":", "\n", "        ", "super", "(", "Monitor", ",", "self", ")", ".", "__init__", "(", "env", ")", "\n", "\n", "self", ".", "videos", "=", "[", "]", "\n", "\n", "self", ".", "stats_recorder", "=", "None", "\n", "self", ".", "video_recorder", "=", "None", "\n", "self", ".", "enabled", "=", "False", "\n", "self", ".", "episode_id", "=", "0", "\n", "self", ".", "_monitor_id", "=", "None", "\n", "self", ".", "env_semantics_autoreset", "=", "env", ".", "metadata", ".", "get", "(", "'semantics.autoreset'", ")", "\n", "\n", "self", ".", "_start", "(", "directory", ",", "video_callable", ",", "force", ",", "resume", ",", "\n", "write_upon_reset", ",", "uid", ",", "mode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.wrappers.monitoring.Monitor._step": [[31, 37], ["monitoring.Monitor._before_step", "monitoring.Monitor.env.step", "monitoring.Monitor._after_step"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.wrappers.monitoring.Monitor._before_step", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.step", "home.repos.pwc.inspect_result.Rondorf_BOReL.wrappers.monitoring.Monitor._after_step"], ["", "def", "_step", "(", "self", ",", "action", ")", ":", "\n", "        ", "self", ".", "_before_step", "(", "action", ")", "\n", "observation", ",", "reward", ",", "done", ",", "info", "=", "self", ".", "env", ".", "step", "(", "action", ")", "\n", "done", "=", "self", ".", "_after_step", "(", "observation", ",", "reward", ",", "done", ",", "info", ")", "\n", "\n", "return", "observation", ",", "reward", ",", "done", ",", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.wrappers.monitoring.Monitor._reset": [[38, 44], ["monitoring.Monitor._before_reset", "monitoring.Monitor.env.reset", "monitoring.Monitor._after_reset"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.wrappers.monitoring.Monitor._before_reset", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.reset", "home.repos.pwc.inspect_result.Rondorf_BOReL.wrappers.monitoring.Monitor._after_reset"], ["", "def", "_reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "_before_reset", "(", ")", "\n", "observation", "=", "self", ".", "env", ".", "reset", "(", ")", "\n", "self", ".", "_after_reset", "(", "observation", ")", "\n", "\n", "return", "observation", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.wrappers.monitoring.Monitor._close": [[45, 51], ["super()._close", "getattr", "monitoring.Monitor.close"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.wrappers.monitoring.Monitor._close", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.close"], ["", "def", "_close", "(", "self", ")", ":", "\n", "        ", "super", "(", "Monitor", ",", "self", ")", ".", "_close", "(", ")", "\n", "\n", "# _monitor will not be set if super(Monitor, self).__init__ raises, this check prevents a confusing error message", "\n", "if", "getattr", "(", "self", ",", "'_monitor'", ",", "None", ")", ":", "\n", "            ", "self", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.wrappers.monitoring.Monitor.set_monitor_mode": [[52, 55], ["logger.info", "monitoring.Monitor._set_mode"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.wrappers.monitoring.Monitor._set_mode"], ["", "", "def", "set_monitor_mode", "(", "self", ",", "mode", ")", ":", "\n", "        ", "logger", ".", "info", "(", "\"Setting the monitor mode is deprecated and will be removed soon\"", ")", "\n", "self", ".", "_set_mode", "(", "mode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.wrappers.monitoring.Monitor._start": [[57, 117], ["monitor_closer.register", "os.path.abspath", "environments.mujoco.rand_param_envs.gym.monitoring.stats_recorder.StatsRecorder", "logger.warning", "os.path.exists", "logger.info", "monitoring.clear_monitor_files", "os.path.exists", "os.mkdir", "monitoring.Monitor._set_mode", "os.makedirs", "os.makedirs", "monitoring.detect_training_manifests", "os.getpid", "callable", "environments.mujoco.rand_param_envs.gym.error.Error", "len", "environments.mujoco.rand_param_envs.gym.error.Error", "type"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.envs.registration.register", "home.repos.pwc.inspect_result.Rondorf_BOReL.wrappers.monitoring.clear_monitor_files", "home.repos.pwc.inspect_result.Rondorf_BOReL.wrappers.monitoring.Monitor._set_mode", "home.repos.pwc.inspect_result.Rondorf_BOReL.wrappers.monitoring.detect_training_manifests", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjvGeomWrapper.type"], ["", "def", "_start", "(", "self", ",", "directory", ",", "video_callable", "=", "None", ",", "force", "=", "False", ",", "resume", "=", "False", ",", "\n", "write_upon_reset", "=", "False", ",", "uid", "=", "None", ",", "mode", "=", "None", ")", ":", "\n", "        ", "\"\"\"Start monitoring.\n\n        Args:\n            directory (str): A per-training run directory where to record stats.\n            video_callable (Optional[function, False]): function that takes in the index of the episode and outputs a boolean, indicating whether we should record a video on this episode. The default (for video_callable is None) is to take perfect cubes, capped at 1000. False disables video recording.\n            force (bool): Clear out existing training data from this directory (by deleting every file prefixed with \"openaigym.\").\n            resume (bool): Retain the training data already in this directory, which will be merged with our new data\n            write_upon_reset (bool): Write the manifest file on each reset. (This is currently a JSON file, so writing it is somewhat expensive.)\n            uid (Optional[str]): A unique id used as part of the suffix for the file. By default, uses os.getpid().\n            mode (['evaluation', 'training']): Whether this is an evaluation or training episode.\n        \"\"\"", "\n", "if", "self", ".", "env", ".", "spec", "is", "None", ":", "\n", "            ", "logger", ".", "warning", "(", "\"Trying to monitor an environment which has no 'spec' set. This usually means you did not create it via 'gym.make', and is recommended only for advanced users.\"", ")", "\n", "env_id", "=", "'(unknown)'", "\n", "", "else", ":", "\n", "            ", "env_id", "=", "self", ".", "env", ".", "spec", ".", "id", "\n", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "directory", ")", ":", "\n", "            ", "logger", ".", "info", "(", "'Creating monitor directory %s'", ",", "directory", ")", "\n", "if", "six", ".", "PY3", ":", "\n", "                ", "os", ".", "makedirs", "(", "directory", ",", "exist_ok", "=", "True", ")", "\n", "", "else", ":", "\n", "                ", "os", ".", "makedirs", "(", "directory", ")", "\n", "\n", "", "", "if", "video_callable", "is", "None", ":", "\n", "            ", "video_callable", "=", "capped_cubic_video_schedule", "\n", "", "elif", "video_callable", "==", "False", ":", "\n", "            ", "video_callable", "=", "disable_videos", "\n", "", "elif", "not", "callable", "(", "video_callable", ")", ":", "\n", "            ", "raise", "error", ".", "Error", "(", "'You must provide a function, None, or False for video_callable, not {}: {}'", ".", "format", "(", "type", "(", "video_callable", ")", ",", "video_callable", ")", ")", "\n", "", "self", ".", "video_callable", "=", "video_callable", "\n", "\n", "# Check on whether we need to clear anything", "\n", "if", "force", ":", "\n", "            ", "clear_monitor_files", "(", "directory", ")", "\n", "", "elif", "not", "resume", ":", "\n", "            ", "training_manifests", "=", "detect_training_manifests", "(", "directory", ")", "\n", "if", "len", "(", "training_manifests", ")", ">", "0", ":", "\n", "                ", "raise", "error", ".", "Error", "(", "'''Trying to write to monitor directory {} with existing monitor files: {}.\n\n You should use a unique directory for each training run, or use 'force=True' to automatically clear previous monitor files.'''", ".", "format", "(", "directory", ",", "', '", ".", "join", "(", "training_manifests", "[", ":", "5", "]", ")", ")", ")", "\n", "\n", "", "", "self", ".", "_monitor_id", "=", "monitor_closer", ".", "register", "(", "self", ")", "\n", "\n", "self", ".", "enabled", "=", "True", "\n", "self", ".", "directory", "=", "os", ".", "path", ".", "abspath", "(", "directory", ")", "\n", "# We use the 'openai-gym' prefix to determine if a file is", "\n", "# ours", "\n", "self", ".", "file_prefix", "=", "FILE_PREFIX", "\n", "self", ".", "file_infix", "=", "'{}.{}'", ".", "format", "(", "self", ".", "_monitor_id", ",", "uid", "if", "uid", "else", "os", ".", "getpid", "(", ")", ")", "\n", "\n", "self", ".", "stats_recorder", "=", "stats_recorder", ".", "StatsRecorder", "(", "directory", ",", "'{}.episode_batch.{}'", ".", "format", "(", "self", ".", "file_prefix", ",", "self", ".", "file_infix", ")", ",", "autoreset", "=", "self", ".", "env_semantics_autoreset", ",", "env_id", "=", "env_id", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "directory", ")", ":", "os", ".", "mkdir", "(", "directory", ")", "\n", "self", ".", "write_upon_reset", "=", "write_upon_reset", "\n", "\n", "if", "mode", "is", "not", "None", ":", "\n", "            ", "self", ".", "_set_mode", "(", "mode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.wrappers.monitoring.Monitor._flush": [[118, 140], ["monitoring.Monitor.stats_recorder.flush", "os.path.join", "logger.debug", "environments.mujoco.rand_param_envs.gym.utils.atomic_write.atomic_write", "json.dump", "os.path.basename", "monitoring.Monitor._env_info", "os.path.basename", "os.path.basename"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.monitoring.stats_recorder.StatsRecorder.flush", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.join", "home.repos.pwc.inspect_result.Rondorf_BOReL.utils.atomic_write.atomic_write", "home.repos.pwc.inspect_result.Rondorf_BOReL.wrappers.monitoring.Monitor._env_info"], ["", "", "def", "_flush", "(", "self", ",", "force", "=", "False", ")", ":", "\n", "        ", "\"\"\"Flush all relevant monitor information to disk.\"\"\"", "\n", "if", "not", "self", ".", "write_upon_reset", "and", "not", "force", ":", "\n", "            ", "return", "\n", "\n", "", "self", ".", "stats_recorder", ".", "flush", "(", ")", "\n", "\n", "# Give it a very distiguished name, since we need to pick it", "\n", "# up from the filesystem later.", "\n", "path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "directory", ",", "'{}.manifest.{}.manifest.json'", ".", "format", "(", "self", ".", "file_prefix", ",", "self", ".", "file_infix", ")", ")", "\n", "logger", ".", "debug", "(", "'Writing training manifest file to %s'", ",", "path", ")", "\n", "with", "atomic_write", ".", "atomic_write", "(", "path", ")", "as", "f", ":", "\n", "# We need to write relative paths here since people may", "\n", "# move the training_dir around. It would be cleaner to", "\n", "# already have the basenames rather than basename'ing", "\n", "# manually, but this works for now.", "\n", "            ", "json", ".", "dump", "(", "{", "\n", "'stats'", ":", "os", ".", "path", ".", "basename", "(", "self", ".", "stats_recorder", ".", "path", ")", ",", "\n", "'videos'", ":", "[", "(", "os", ".", "path", ".", "basename", "(", "v", ")", ",", "os", ".", "path", ".", "basename", "(", "m", ")", ")", "\n", "for", "v", ",", "m", "in", "self", ".", "videos", "]", ",", "\n", "'env_info'", ":", "self", ".", "_env_info", "(", ")", ",", "\n", "}", ",", "f", ",", "default", "=", "json_encode_np", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.wrappers.monitoring.Monitor.close": [[141, 155], ["monitoring.Monitor.stats_recorder.close", "monitoring.Monitor._flush", "monitor_closer.unregister", "logger.info", "monitoring.Monitor._close_video_recorder"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.close", "home.repos.pwc.inspect_result.Rondorf_BOReL.wrappers.monitoring.Monitor._flush", "home.repos.pwc.inspect_result.Rondorf_BOReL.utils.closer.Closer.unregister", "home.repos.pwc.inspect_result.Rondorf_BOReL.wrappers.monitoring.Monitor._close_video_recorder"], ["", "", "def", "close", "(", "self", ")", ":", "\n", "        ", "\"\"\"Flush all monitor data to disk and close any open rending windows.\"\"\"", "\n", "if", "not", "self", ".", "enabled", ":", "\n", "            ", "return", "\n", "", "self", ".", "stats_recorder", ".", "close", "(", ")", "\n", "if", "self", ".", "video_recorder", "is", "not", "None", ":", "\n", "            ", "self", ".", "_close_video_recorder", "(", ")", "\n", "", "self", ".", "_flush", "(", "force", "=", "True", ")", "\n", "\n", "# Stop tracking this for autoclose", "\n", "monitor_closer", ".", "unregister", "(", "self", ".", "_monitor_id", ")", "\n", "self", ".", "enabled", "=", "False", "\n", "\n", "logger", ".", "info", "(", "'''Finished writing results. You can upload them to the scoreboard via gym.upload(%r)'''", ",", "self", ".", "directory", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.wrappers.monitoring.Monitor._set_mode": [[156, 164], ["environments.mujoco.rand_param_envs.gym.error.Error"], "methods", ["None"], ["", "def", "_set_mode", "(", "self", ",", "mode", ")", ":", "\n", "        ", "if", "mode", "==", "'evaluation'", ":", "\n", "            ", "type", "=", "'e'", "\n", "", "elif", "mode", "==", "'training'", ":", "\n", "            ", "type", "=", "'t'", "\n", "", "else", ":", "\n", "            ", "raise", "error", ".", "Error", "(", "'Invalid mode {}: must be \"training\" or \"evaluation\"'", ",", "mode", ")", "\n", "", "self", ".", "stats_recorder", ".", "type", "=", "type", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.wrappers.monitoring.Monitor._before_step": [[165, 168], ["monitoring.Monitor.stats_recorder.before_step"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.monitoring.stats_recorder.StatsRecorder.before_step"], ["", "def", "_before_step", "(", "self", ",", "action", ")", ":", "\n", "        ", "if", "not", "self", ".", "enabled", ":", "return", "\n", "self", ".", "stats_recorder", ".", "before_step", "(", "action", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.wrappers.monitoring.Monitor._after_step": [[169, 187], ["info.get", "monitoring.Monitor.stats_recorder.after_step", "monitoring.Monitor.video_recorder.capture_frame", "monitoring.Monitor._reset_video_recorder", "monitoring.Monitor._flush"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.monitoring.stats_recorder.StatsRecorder.after_step", "home.repos.pwc.inspect_result.Rondorf_BOReL.monitoring.video_recorder.ImageEncoder.capture_frame", "home.repos.pwc.inspect_result.Rondorf_BOReL.wrappers.monitoring.Monitor._reset_video_recorder", "home.repos.pwc.inspect_result.Rondorf_BOReL.wrappers.monitoring.Monitor._flush"], ["", "def", "_after_step", "(", "self", ",", "observation", ",", "reward", ",", "done", ",", "info", ")", ":", "\n", "        ", "if", "not", "self", ".", "enabled", ":", "return", "done", "\n", "\n", "if", "done", "and", "self", ".", "env_semantics_autoreset", ":", "\n", "# For envs with BlockingReset wrapping VNCEnv, this observation will be the first one of the new episode", "\n", "            ", "self", ".", "_reset_video_recorder", "(", ")", "\n", "self", ".", "episode_id", "+=", "1", "\n", "self", ".", "_flush", "(", ")", "\n", "\n", "", "if", "info", ".", "get", "(", "'true_reward'", ",", "None", ")", ":", "# Semisupervised envs modify the rewards, but we want the original when scoring", "\n", "            ", "reward", "=", "info", "[", "'true_reward'", "]", "\n", "\n", "# Record stats", "\n", "", "self", ".", "stats_recorder", ".", "after_step", "(", "observation", ",", "reward", ",", "done", ",", "info", ")", "\n", "# Record video", "\n", "self", ".", "video_recorder", ".", "capture_frame", "(", ")", "\n", "\n", "return", "done", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.wrappers.monitoring.Monitor._before_reset": [[188, 191], ["monitoring.Monitor.stats_recorder.before_reset"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.monitoring.stats_recorder.StatsRecorder.before_reset"], ["", "def", "_before_reset", "(", "self", ")", ":", "\n", "        ", "if", "not", "self", ".", "enabled", ":", "return", "\n", "self", ".", "stats_recorder", ".", "before_reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.wrappers.monitoring.Monitor._after_reset": [[192, 204], ["monitoring.Monitor.stats_recorder.after_reset", "monitoring.Monitor._reset_video_recorder", "monitoring.Monitor._flush"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.monitoring.stats_recorder.StatsRecorder.after_reset", "home.repos.pwc.inspect_result.Rondorf_BOReL.wrappers.monitoring.Monitor._reset_video_recorder", "home.repos.pwc.inspect_result.Rondorf_BOReL.wrappers.monitoring.Monitor._flush"], ["", "def", "_after_reset", "(", "self", ",", "observation", ")", ":", "\n", "        ", "if", "not", "self", ".", "enabled", ":", "return", "\n", "\n", "# Reset the stat count", "\n", "self", ".", "stats_recorder", ".", "after_reset", "(", "observation", ")", "\n", "\n", "self", ".", "_reset_video_recorder", "(", ")", "\n", "\n", "# Bump *after* all reset activity has finished", "\n", "self", ".", "episode_id", "+=", "1", "\n", "\n", "self", ".", "_flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.wrappers.monitoring.Monitor._reset_video_recorder": [[205, 220], ["environments.mujoco.rand_param_envs.gym.monitoring.video_recorder.VideoRecorder", "monitoring.Monitor.video_recorder.capture_frame", "monitoring.Monitor._close_video_recorder", "os.path.join", "monitoring.Monitor._video_enabled"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.monitoring.video_recorder.ImageEncoder.capture_frame", "home.repos.pwc.inspect_result.Rondorf_BOReL.wrappers.monitoring.Monitor._close_video_recorder", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.join", "home.repos.pwc.inspect_result.Rondorf_BOReL.wrappers.monitoring.Monitor._video_enabled"], ["", "def", "_reset_video_recorder", "(", "self", ")", ":", "\n", "# Close any existing video recorder", "\n", "        ", "if", "self", ".", "video_recorder", ":", "\n", "            ", "self", ".", "_close_video_recorder", "(", ")", "\n", "\n", "# Start recording the next video.", "\n", "#", "\n", "# TODO: calculate a more correct 'episode_id' upon merge", "\n", "", "self", ".", "video_recorder", "=", "video_recorder", ".", "VideoRecorder", "(", "\n", "env", "=", "self", ".", "env", ",", "\n", "base_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "directory", ",", "'{}.video.{}.video{:06}'", ".", "format", "(", "self", ".", "file_prefix", ",", "self", ".", "file_infix", ",", "self", ".", "episode_id", ")", ")", ",", "\n", "metadata", "=", "{", "'episode_id'", ":", "self", ".", "episode_id", "}", ",", "\n", "enabled", "=", "self", ".", "_video_enabled", "(", ")", ",", "\n", ")", "\n", "self", ".", "video_recorder", ".", "capture_frame", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.wrappers.monitoring.Monitor._close_video_recorder": [[221, 225], ["monitoring.Monitor.video_recorder.close", "monitoring.Monitor.videos.append"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.close"], ["", "def", "_close_video_recorder", "(", "self", ")", ":", "\n", "        ", "self", ".", "video_recorder", ".", "close", "(", ")", "\n", "if", "self", ".", "video_recorder", ".", "functional", ":", "\n", "            ", "self", ".", "videos", ".", "append", "(", "(", "self", ".", "video_recorder", ".", "path", ",", "self", ".", "video_recorder", ".", "metadata_path", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.wrappers.monitoring.Monitor._video_enabled": [[226, 228], ["monitoring.Monitor.video_callable"], "methods", ["None"], ["", "", "def", "_video_enabled", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "video_callable", "(", "self", ".", "episode_id", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.wrappers.monitoring.Monitor._env_info": [[229, 236], ["None"], "methods", ["None"], ["", "def", "_env_info", "(", "self", ")", ":", "\n", "        ", "env_info", "=", "{", "\n", "'gym_version'", ":", "version", ".", "VERSION", ",", "\n", "}", "\n", "if", "self", ".", "env", ".", "spec", ":", "\n", "            ", "env_info", "[", "'env_id'", "]", "=", "self", ".", "env", ".", "spec", ".", "id", "\n", "", "return", "env_info", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.wrappers.monitoring.Monitor.__del__": [[237, 240], ["monitoring.Monitor.close"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.close"], ["", "def", "__del__", "(", "self", ")", ":", "\n", "# Make sure we've closed up shop when garbage collecting", "\n", "        ", "self", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.wrappers.monitoring.Monitor.get_total_steps": [[241, 243], ["None"], "methods", ["None"], ["", "def", "get_total_steps", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "stats_recorder", ".", "total_steps", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.wrappers.monitoring.Monitor.get_episode_rewards": [[244, 246], ["None"], "methods", ["None"], ["", "def", "get_episode_rewards", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "stats_recorder", ".", "episode_rewards", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.wrappers.monitoring.Monitor.get_episode_lengths": [[247, 249], ["None"], "methods", ["None"], ["", "def", "get_episode_lengths", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "stats_recorder", ".", "episode_lengths", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.wrappers.monitoring.detect_training_manifests": [[250, 254], ["os.listdir", "os.path.join", "f.startswith"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.join", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.startswith"], ["", "", "def", "detect_training_manifests", "(", "training_dir", ",", "files", "=", "None", ")", ":", "\n", "    ", "if", "files", "is", "None", ":", "\n", "        ", "files", "=", "os", ".", "listdir", "(", "training_dir", ")", "\n", "", "return", "[", "os", ".", "path", ".", "join", "(", "training_dir", ",", "f", ")", "for", "f", "in", "files", "if", "f", ".", "startswith", "(", "MANIFEST_PREFIX", "+", "'.'", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.wrappers.monitoring.detect_monitor_files": [[255, 257], ["os.path.join", "os.listdir", "f.startswith"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.join", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.startswith"], ["", "def", "detect_monitor_files", "(", "training_dir", ")", ":", "\n", "    ", "return", "[", "os", ".", "path", ".", "join", "(", "training_dir", ",", "f", ")", "for", "f", "in", "os", ".", "listdir", "(", "training_dir", ")", "if", "f", ".", "startswith", "(", "FILE_PREFIX", "+", "'.'", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.wrappers.monitoring.clear_monitor_files": [[258, 266], ["monitoring.detect_monitor_files", "logger.info", "len", "len", "os.unlink"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.wrappers.monitoring.detect_monitor_files"], ["", "def", "clear_monitor_files", "(", "training_dir", ")", ":", "\n", "    ", "files", "=", "detect_monitor_files", "(", "training_dir", ")", "\n", "if", "len", "(", "files", ")", "==", "0", ":", "\n", "        ", "return", "\n", "\n", "", "logger", ".", "info", "(", "'Clearing %d monitor files from previous run (because force=True was provided)'", ",", "len", "(", "files", ")", ")", "\n", "for", "file", "in", "files", ":", "\n", "        ", "os", ".", "unlink", "(", "file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.wrappers.monitoring.capped_cubic_video_schedule": [[267, 272], ["int", "round"], "function", ["None"], ["", "", "def", "capped_cubic_video_schedule", "(", "episode_id", ")", ":", "\n", "    ", "if", "episode_id", "<", "1000", ":", "\n", "        ", "return", "int", "(", "round", "(", "episode_id", "**", "(", "1.", "/", "3", ")", ")", ")", "**", "3", "==", "episode_id", "\n", "", "else", ":", "\n", "        ", "return", "episode_id", "%", "1000", "==", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.wrappers.monitoring.disable_videos": [[273, 275], ["None"], "function", ["None"], ["", "", "def", "disable_videos", "(", "episode_id", ")", ":", "\n", "    ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.wrappers.monitoring._open_monitors": [[280, 282], ["list", "monitor_closer.closeables.values"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.ListableAPIResource.list"], ["def", "_open_monitors", "(", ")", ":", "\n", "    ", "return", "list", "(", "monitor_closer", ".", "closeables", ".", "values", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.wrappers.monitoring.load_env_info_from_manifests": [[283, 292], ["monitoring.collapse_env_infos", "open", "json.load", "env_infos.append"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.wrappers.monitoring.collapse_env_infos", "home.repos.pwc.inspect_result.Rondorf_BOReL.envs.registration.load"], ["", "def", "load_env_info_from_manifests", "(", "manifests", ",", "training_dir", ")", ":", "\n", "    ", "env_infos", "=", "[", "]", "\n", "for", "manifest", "in", "manifests", ":", "\n", "        ", "with", "open", "(", "manifest", ")", "as", "f", ":", "\n", "            ", "contents", "=", "json", ".", "load", "(", "f", ")", "\n", "env_infos", ".", "append", "(", "contents", "[", "'env_info'", "]", ")", "\n", "\n", "", "", "env_info", "=", "collapse_env_infos", "(", "env_infos", ",", "training_dir", ")", "\n", "return", "env_info", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.wrappers.monitoring.load_results": [[293, 333], ["monitoring.detect_training_manifests", "logger.debug", "monitoring.collapse_env_infos", "monitoring.merge_stats_files", "os.path.exists", "logger.error", "logger.error", "open", "json.load", "stats_files.append", "env_infos.append", "os.path.join", "os.path.join", "os.path.join"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.wrappers.monitoring.detect_training_manifests", "home.repos.pwc.inspect_result.Rondorf_BOReL.wrappers.monitoring.collapse_env_infos", "home.repos.pwc.inspect_result.Rondorf_BOReL.wrappers.monitoring.merge_stats_files", "home.repos.pwc.inspect_result.Rondorf_BOReL.envs.registration.load", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.join", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.join", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.join"], ["", "def", "load_results", "(", "training_dir", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "training_dir", ")", ":", "\n", "        ", "logger", ".", "error", "(", "'Training directory %s not found'", ",", "training_dir", ")", "\n", "return", "\n", "\n", "", "manifests", "=", "detect_training_manifests", "(", "training_dir", ")", "\n", "if", "not", "manifests", ":", "\n", "        ", "logger", ".", "error", "(", "'No manifests found in training directory %s'", ",", "training_dir", ")", "\n", "return", "\n", "\n", "", "logger", ".", "debug", "(", "'Uploading data from manifest %s'", ",", "', '", ".", "join", "(", "manifests", ")", ")", "\n", "\n", "# Load up stats + video files", "\n", "stats_files", "=", "[", "]", "\n", "videos", "=", "[", "]", "\n", "env_infos", "=", "[", "]", "\n", "\n", "for", "manifest", "in", "manifests", ":", "\n", "        ", "with", "open", "(", "manifest", ")", "as", "f", ":", "\n", "            ", "contents", "=", "json", ".", "load", "(", "f", ")", "\n", "# Make these paths absolute again", "\n", "stats_files", ".", "append", "(", "os", ".", "path", ".", "join", "(", "training_dir", ",", "contents", "[", "'stats'", "]", ")", ")", "\n", "videos", "+=", "[", "(", "os", ".", "path", ".", "join", "(", "training_dir", ",", "v", ")", ",", "os", ".", "path", ".", "join", "(", "training_dir", ",", "m", ")", ")", "\n", "for", "v", ",", "m", "in", "contents", "[", "'videos'", "]", "]", "\n", "env_infos", ".", "append", "(", "contents", "[", "'env_info'", "]", ")", "\n", "\n", "", "", "env_info", "=", "collapse_env_infos", "(", "env_infos", ",", "training_dir", ")", "\n", "data_sources", ",", "initial_reset_timestamps", ",", "timestamps", ",", "episode_lengths", ",", "episode_rewards", ",", "episode_types", ",", "initial_reset_timestamp", "=", "merge_stats_files", "(", "stats_files", ")", "\n", "\n", "return", "{", "\n", "'manifests'", ":", "manifests", ",", "\n", "'env_info'", ":", "env_info", ",", "\n", "'data_sources'", ":", "data_sources", ",", "\n", "'timestamps'", ":", "timestamps", ",", "\n", "'episode_lengths'", ":", "episode_lengths", ",", "\n", "'episode_rewards'", ":", "episode_rewards", ",", "\n", "'episode_types'", ":", "episode_types", ",", "\n", "'initial_reset_timestamps'", ":", "initial_reset_timestamps", ",", "\n", "'initial_reset_timestamp'", ":", "initial_reset_timestamp", ",", "\n", "'videos'", ":", "videos", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.wrappers.monitoring.merge_stats_files": [[335, 373], ["enumerate", "numpy.argsort", "[].tolist", "[].tolist", "[].tolist", "[].tolist", "[].tolist", "len", "min", "open", "json.load", "json.load.get", "initial_reset_timestamps.append", "len", "len", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.envs.registration.load"], ["", "def", "merge_stats_files", "(", "stats_files", ")", ":", "\n", "    ", "timestamps", "=", "[", "]", "\n", "episode_lengths", "=", "[", "]", "\n", "episode_rewards", "=", "[", "]", "\n", "episode_types", "=", "[", "]", "\n", "initial_reset_timestamps", "=", "[", "]", "\n", "data_sources", "=", "[", "]", "\n", "\n", "for", "i", ",", "path", "in", "enumerate", "(", "stats_files", ")", ":", "\n", "        ", "with", "open", "(", "path", ")", "as", "f", ":", "\n", "            ", "content", "=", "json", ".", "load", "(", "f", ")", "\n", "if", "len", "(", "content", "[", "'timestamps'", "]", ")", "==", "0", ":", "continue", "# so empty file doesn't mess up results, due to null initial_reset_timestamp", "\n", "data_sources", "+=", "[", "i", "]", "*", "len", "(", "content", "[", "'timestamps'", "]", ")", "\n", "timestamps", "+=", "content", "[", "'timestamps'", "]", "\n", "episode_lengths", "+=", "content", "[", "'episode_lengths'", "]", "\n", "episode_rewards", "+=", "content", "[", "'episode_rewards'", "]", "\n", "# Recent addition", "\n", "episode_types", "+=", "content", ".", "get", "(", "'episode_types'", ",", "[", "]", ")", "\n", "# Keep track of where each episode came from.", "\n", "initial_reset_timestamps", ".", "append", "(", "content", "[", "'initial_reset_timestamp'", "]", ")", "\n", "\n", "", "", "idxs", "=", "np", ".", "argsort", "(", "timestamps", ")", "\n", "timestamps", "=", "np", ".", "array", "(", "timestamps", ")", "[", "idxs", "]", ".", "tolist", "(", ")", "\n", "episode_lengths", "=", "np", ".", "array", "(", "episode_lengths", ")", "[", "idxs", "]", ".", "tolist", "(", ")", "\n", "episode_rewards", "=", "np", ".", "array", "(", "episode_rewards", ")", "[", "idxs", "]", ".", "tolist", "(", ")", "\n", "data_sources", "=", "np", ".", "array", "(", "data_sources", ")", "[", "idxs", "]", ".", "tolist", "(", ")", "\n", "\n", "if", "episode_types", ":", "\n", "        ", "episode_types", "=", "np", ".", "array", "(", "episode_types", ")", "[", "idxs", "]", ".", "tolist", "(", ")", "\n", "", "else", ":", "\n", "        ", "episode_types", "=", "None", "\n", "\n", "", "if", "len", "(", "initial_reset_timestamps", ")", ">", "0", ":", "\n", "        ", "initial_reset_timestamp", "=", "min", "(", "initial_reset_timestamps", ")", "\n", "", "else", ":", "\n", "        ", "initial_reset_timestamp", "=", "0", "\n", "\n", "", "return", "data_sources", ",", "initial_reset_timestamps", ",", "timestamps", ",", "episode_lengths", ",", "episode_rewards", ",", "episode_types", ",", "initial_reset_timestamp", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.wrappers.monitoring.collapse_env_infos": [[375, 387], ["len", "environments.mujoco.rand_param_envs.gym.error.Error", "environments.mujoco.rand_param_envs.gym.error.Error"], "function", ["None"], ["", "def", "collapse_env_infos", "(", "env_infos", ",", "training_dir", ")", ":", "\n", "    ", "assert", "len", "(", "env_infos", ")", ">", "0", "\n", "\n", "first", "=", "env_infos", "[", "0", "]", "\n", "for", "other", "in", "env_infos", "[", "1", ":", "]", ":", "\n", "        ", "if", "first", "!=", "other", ":", "\n", "            ", "raise", "error", ".", "Error", "(", "'Found two unequal env_infos: {} and {}. This usually indicates that your training directory {} has commingled results from multiple runs.'", ".", "format", "(", "first", ",", "other", ",", "training_dir", ")", ")", "\n", "\n", "", "", "for", "key", "in", "[", "'env_id'", ",", "'gym_version'", "]", ":", "\n", "        ", "if", "key", "not", "in", "first", ":", "\n", "            ", "raise", "error", ".", "Error", "(", "\"env_info {} from training directory {} is missing expected key {}. This is unexpected and likely indicates a bug in gym.\"", ".", "format", "(", "first", ",", "training_dir", ",", "key", ")", ")", "\n", "", "", "return", "first", "", "", ""]], "home.repos.pwc.inspect_result.Rondorf_BOReL.wrappers.frame_skipping.SkipWrapper": [[5, 36], ["super().__init__", "frame_skipping..env.reset", "frame_skipping..env.step", "environments.mujoco.rand_param_envs.gym.error.Error"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.__init__", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.reset", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.step"], ["def", "SkipWrapper", "(", "repeat_count", ")", ":", "\n", "    ", "class", "SkipWrapper", "(", "gym", ".", "Wrapper", ")", ":", "\n", "        ", "\"\"\"\n            Generic common frame skipping wrapper\n            Will perform action for `x` additional steps\n        \"\"\"", "\n", "def", "__init__", "(", "self", ",", "env", ")", ":", "\n", "            ", "super", "(", "SkipWrapper", ",", "self", ")", ".", "__init__", "(", "env", ")", "\n", "self", ".", "repeat_count", "=", "repeat_count", "\n", "self", ".", "stepcount", "=", "0", "\n", "\n", "", "def", "_step", "(", "self", ",", "action", ")", ":", "\n", "            ", "done", "=", "False", "\n", "total_reward", "=", "0", "\n", "current_step", "=", "0", "\n", "while", "current_step", "<", "(", "self", ".", "repeat_count", "+", "1", ")", "and", "not", "done", ":", "\n", "                ", "self", ".", "stepcount", "+=", "1", "\n", "obs", ",", "reward", ",", "done", ",", "info", "=", "self", ".", "env", ".", "step", "(", "action", ")", "\n", "total_reward", "+=", "reward", "\n", "current_step", "+=", "1", "\n", "", "if", "'skip.stepcount'", "in", "info", ":", "\n", "                ", "raise", "gym", ".", "error", ".", "Error", "(", "'Key \"skip.stepcount\" already in info. Make sure you are not stacking '", "'the SkipWrapper wrappers.'", ")", "\n", "", "info", "[", "'skip.stepcount'", "]", "=", "self", ".", "stepcount", "\n", "return", "obs", ",", "total_reward", ",", "done", ",", "info", "\n", "\n", "", "def", "_reset", "(", "self", ")", ":", "\n", "            ", "self", ".", "stepcount", "=", "0", "\n", "return", "self", ".", "env", ".", "reset", "(", ")", "\n", "\n", "", "", "return", "SkipWrapper", "\n", "", ""]], "home.repos.pwc.inspect_result.Rondorf_BOReL.spaces.tuple_space.Tuple.__init__": [[10, 12], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "spaces", ")", ":", "\n", "        ", "self", ".", "spaces", "=", "spaces", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.spaces.tuple_space.Tuple.sample": [[13, 15], ["tuple", "space.sample"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.spaces.discrete.Discrete.sample"], ["", "def", "sample", "(", "self", ")", ":", "\n", "        ", "return", "tuple", "(", "[", "space", ".", "sample", "(", ")", "for", "space", "in", "self", ".", "spaces", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.spaces.tuple_space.Tuple.contains": [[16, 21], ["isinstance", "tuple", "isinstance", "all", "len", "len", "space.contains", "zip"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.ListableAPIResource.all", "home.repos.pwc.inspect_result.Rondorf_BOReL.spaces.discrete.Discrete.contains"], ["", "def", "contains", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "isinstance", "(", "x", ",", "list", ")", ":", "\n", "            ", "x", "=", "tuple", "(", "x", ")", "# Promote list to tuple for contains check", "\n", "", "return", "isinstance", "(", "x", ",", "tuple", ")", "and", "len", "(", "x", ")", "==", "len", "(", "self", ".", "spaces", ")", "and", "all", "(", "\n", "space", ".", "contains", "(", "part", ")", "for", "(", "space", ",", "part", ")", "in", "zip", "(", "self", ".", "spaces", ",", "x", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.spaces.tuple_space.Tuple.__repr__": [[22, 24], ["str"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "\"Tuple(\"", "+", "\", \"", ".", "join", "(", "[", "str", "(", "s", ")", "for", "s", "in", "self", ".", "spaces", "]", ")", "+", "\")\"", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.spaces.tuple_space.Tuple.to_jsonable": [[25, 29], ["space.to_jsonable", "enumerate"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.spaces.box.Box.to_jsonable"], ["", "def", "to_jsonable", "(", "self", ",", "sample_n", ")", ":", "\n", "# serialize as list-repr of tuple of vectors", "\n", "        ", "return", "[", "space", ".", "to_jsonable", "(", "[", "sample", "[", "i", "]", "for", "sample", "in", "sample_n", "]", ")", "for", "i", ",", "space", "in", "enumerate", "(", "self", ".", "spaces", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.spaces.tuple_space.Tuple.from_jsonable": [[30, 32], ["zip", "space.from_jsonable", "enumerate"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.spaces.box.Box.from_jsonable"], ["", "def", "from_jsonable", "(", "self", ",", "sample_n", ")", ":", "\n", "        ", "return", "zip", "(", "*", "[", "space", ".", "from_jsonable", "(", "sample_n", "[", "i", "]", ")", "for", "i", ",", "space", "in", "enumerate", "(", "self", ".", "spaces", ")", "]", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Rondorf_BOReL.spaces.multi_binary.MultiBinary.__init__": [[6, 8], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "n", ")", ":", "\n", "        ", "self", ".", "n", "=", "n", "\n", "", "def", "sample", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.spaces.multi_binary.MultiBinary.sample": [[8, 10], ["environments.mujoco.rand_param_envs.gym.spaces.prng.np_random.randint"], "methods", ["None"], ["", "def", "sample", "(", "self", ")", ":", "\n", "        ", "return", "prng", ".", "np_random", ".", "randint", "(", "low", "=", "0", ",", "high", "=", "2", ",", "size", "=", "self", ".", "n", ")", "\n", "", "def", "contains", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.spaces.multi_binary.MultiBinary.contains": [[10, 12], ["None"], "methods", ["None"], ["", "def", "contains", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "(", "(", "x", "==", "0", ")", "|", "(", "x", "==", "1", ")", ")", ".", "all", "(", ")", "\n", "", "def", "to_jsonable", "(", "self", ",", "sample_n", ")", ":", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.spaces.multi_binary.MultiBinary.to_jsonable": [[12, 14], ["sample_n.tolist"], "methods", ["None"], ["", "def", "to_jsonable", "(", "self", ",", "sample_n", ")", ":", "\n", "        ", "return", "sample_n", ".", "tolist", "(", ")", "\n", "", "def", "from_jsonable", "(", "self", ",", "sample_n", ")", ":", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.spaces.multi_binary.MultiBinary.from_jsonable": [[14, 16], ["numpy.array"], "methods", ["None"], ["", "def", "from_jsonable", "(", "self", ",", "sample_n", ")", ":", "\n", "        ", "return", "np", ".", "array", "(", "sample_n", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.Rondorf_BOReL.spaces.box.Box.__init__": [[14, 28], ["numpy.isscalar", "numpy.isscalar", "numpy.zeros", "numpy.zeros"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.zeros", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.zeros"], ["def", "__init__", "(", "self", ",", "low", ",", "high", ",", "shape", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Two kinds of valid input:\n            Box(-1.0, 1.0, (3,4)) # low and high are scalars, and shape is provided\n            Box(np.array([-1.0,-2.0]), np.array([2.0,4.0])) # low and high are arrays of the same shape\n        \"\"\"", "\n", "if", "shape", "is", "None", ":", "\n", "            ", "assert", "low", ".", "shape", "==", "high", ".", "shape", "\n", "self", ".", "low", "=", "low", "\n", "self", ".", "high", "=", "high", "\n", "", "else", ":", "\n", "            ", "assert", "np", ".", "isscalar", "(", "low", ")", "and", "np", ".", "isscalar", "(", "high", ")", "\n", "self", ".", "low", "=", "low", "+", "np", ".", "zeros", "(", "shape", ")", "\n", "self", ".", "high", "=", "high", "+", "np", ".", "zeros", "(", "shape", ")", "\n", "", "", "def", "sample", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.spaces.box.Box.sample": [[28, 30], ["environments.mujoco.rand_param_envs.gym.spaces.prng.np_random.uniform"], "methods", ["None"], ["", "", "def", "sample", "(", "self", ")", ":", "\n", "        ", "return", "prng", ".", "np_random", ".", "uniform", "(", "low", "=", "self", ".", "low", ",", "high", "=", "self", ".", "high", ",", "size", "=", "self", ".", "low", ".", "shape", ")", "\n", "", "def", "contains", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.spaces.box.Box.contains": [[30, 32], ["None"], "methods", ["None"], ["", "def", "contains", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", ".", "shape", "==", "self", ".", "shape", "and", "(", "x", ">=", "self", ".", "low", ")", ".", "all", "(", ")", "and", "(", "x", "<=", "self", ".", "high", ")", ".", "all", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.spaces.box.Box.to_jsonable": [[33, 35], ["numpy.array().tolist", "numpy.array"], "methods", ["None"], ["", "def", "to_jsonable", "(", "self", ",", "sample_n", ")", ":", "\n", "        ", "return", "np", ".", "array", "(", "sample_n", ")", ".", "tolist", "(", ")", "\n", "", "def", "from_jsonable", "(", "self", ",", "sample_n", ")", ":", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.spaces.box.Box.from_jsonable": [[35, 37], ["numpy.asarray"], "methods", ["None"], ["", "def", "from_jsonable", "(", "self", ",", "sample_n", ")", ":", "\n", "        ", "return", "[", "np", ".", "asarray", "(", "sample", ")", "for", "sample", "in", "sample_n", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.spaces.box.Box.shape": [[38, 41], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "shape", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "low", ".", "shape", "\n", "", "def", "__repr__", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.spaces.box.Box.__repr__": [[41, 43], ["str"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "\"Box\"", "+", "str", "(", "self", ".", "shape", ")", "\n", "", "def", "__eq__", "(", "self", ",", "other", ")", ":", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.spaces.box.Box.__eq__": [[43, 45], ["numpy.allclose", "numpy.allclose"], "methods", ["None"], ["", "def", "__eq__", "(", "self", ",", "other", ")", ":", "\n", "        ", "return", "np", ".", "allclose", "(", "self", ".", "low", ",", "other", ".", "low", ")", "and", "np", ".", "allclose", "(", "self", ".", "high", ",", "other", ".", "high", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Rondorf_BOReL.spaces.multi_discrete.MultiDiscrete.__init__": [[29, 33], ["numpy.array", "numpy.array"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "array_of_param_array", ")", ":", "\n", "        ", "self", ".", "low", "=", "np", ".", "array", "(", "[", "x", "[", "0", "]", "for", "x", "in", "array_of_param_array", "]", ")", "\n", "self", ".", "high", "=", "np", ".", "array", "(", "[", "x", "[", "1", "]", "for", "x", "in", "array_of_param_array", "]", ")", "\n", "self", ".", "num_discrete_space", "=", "self", ".", "low", ".", "shape", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.spaces.multi_discrete.MultiDiscrete.sample": [[34, 39], ["environments.mujoco.rand_param_envs.gym.spaces.prng.np_random.rand", "int", "numpy.floor", "numpy.multiply"], "methods", ["None"], ["", "def", "sample", "(", "self", ")", ":", "\n", "        ", "\"\"\" Returns a array with one sample from each discrete action space \"\"\"", "\n", "# For each row: round(random .* (max - min) + min, 0)", "\n", "random_array", "=", "prng", ".", "np_random", ".", "rand", "(", "self", ".", "num_discrete_space", ")", "\n", "return", "[", "int", "(", "x", ")", "for", "x", "in", "np", ".", "floor", "(", "np", ".", "multiply", "(", "(", "self", ".", "high", "-", "self", ".", "low", "+", "1.", ")", ",", "random_array", ")", "+", "self", ".", "low", ")", "]", "\n", "", "def", "contains", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.spaces.multi_discrete.MultiDiscrete.contains": [[39, 41], ["len", "numpy.array", "numpy.array"], "methods", ["None"], ["", "def", "contains", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "len", "(", "x", ")", "==", "self", ".", "num_discrete_space", "and", "(", "np", ".", "array", "(", "x", ")", ">=", "self", ".", "low", ")", ".", "all", "(", ")", "and", "(", "np", ".", "array", "(", "x", ")", "<=", "self", ".", "high", ")", ".", "all", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.spaces.multi_discrete.MultiDiscrete.shape": [[42, 45], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "shape", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "num_discrete_space", "\n", "", "def", "__repr__", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.spaces.multi_discrete.MultiDiscrete.__repr__": [[45, 47], ["str"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "\"MultiDiscrete\"", "+", "str", "(", "self", ".", "num_discrete_space", ")", "\n", "", "def", "__eq__", "(", "self", ",", "other", ")", ":", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.spaces.multi_discrete.MultiDiscrete.__eq__": [[47, 49], ["numpy.array_equal", "numpy.array_equal"], "methods", ["None"], ["", "def", "__eq__", "(", "self", ",", "other", ")", ":", "\n", "        ", "return", "np", ".", "array_equal", "(", "self", ".", "low", ",", "other", ".", "low", ")", "and", "np", ".", "array_equal", "(", "self", ".", "high", ",", "other", ".", "high", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.spaces.multi_discrete.DiscreteToMultiDiscrete.__init__": [[109, 145], ["isinstance", "range", "isinstance", "enumerate", "isinstance", "range", "len", "len", "len", "enumerate", "environments.mujoco.rand_param_envs.gym.error.Error", "range", "options.keys", "options.keys", "environments.mujoco.rand_param_envs.gym.error.Error", "multi_discrete.DiscreteToMultiDiscrete.multi_discrete.contains", "environments.mujoco.rand_param_envs.gym.error.Error"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.spaces.discrete.Discrete.contains"], ["def", "__init__", "(", "self", ",", "multi_discrete", ",", "options", "=", "None", ")", ":", "\n", "        ", "assert", "isinstance", "(", "multi_discrete", ",", "MultiDiscrete", ")", "\n", "self", ".", "multi_discrete", "=", "multi_discrete", "\n", "self", ".", "num_discrete_space", "=", "self", ".", "multi_discrete", ".", "num_discrete_space", "\n", "\n", "# Config 1", "\n", "if", "options", "is", "None", ":", "\n", "            ", "self", ".", "n", "=", "self", ".", "num_discrete_space", "+", "1", "# +1 for NOOP at beginning", "\n", "self", ".", "mapping", "=", "{", "i", ":", "[", "0", "]", "*", "self", ".", "num_discrete_space", "for", "i", "in", "range", "(", "self", ".", "n", ")", "}", "\n", "for", "i", "in", "range", "(", "self", ".", "num_discrete_space", ")", ":", "\n", "                ", "self", ".", "mapping", "[", "i", "+", "1", "]", "[", "i", "]", "=", "self", ".", "multi_discrete", ".", "high", "[", "i", "]", "\n", "\n", "# Config 2", "\n", "", "", "elif", "isinstance", "(", "options", ",", "list", ")", ":", "\n", "            ", "assert", "len", "(", "options", ")", "<=", "self", ".", "num_discrete_space", "\n", "self", ".", "n", "=", "len", "(", "options", ")", "+", "1", "# +1 for NOOP at beginning", "\n", "self", ".", "mapping", "=", "{", "i", ":", "[", "0", "]", "*", "self", ".", "num_discrete_space", "for", "i", "in", "range", "(", "self", ".", "n", ")", "}", "\n", "for", "i", ",", "disc_num", "in", "enumerate", "(", "options", ")", ":", "\n", "                ", "assert", "disc_num", "<", "self", ".", "num_discrete_space", "\n", "self", ".", "mapping", "[", "i", "+", "1", "]", "[", "disc_num", "]", "=", "self", ".", "multi_discrete", ".", "high", "[", "disc_num", "]", "\n", "\n", "# Config 3", "\n", "", "", "elif", "isinstance", "(", "options", ",", "dict", ")", ":", "\n", "            ", "self", ".", "n", "=", "len", "(", "options", ".", "keys", "(", ")", ")", "\n", "self", ".", "mapping", "=", "options", "\n", "for", "i", ",", "key", "in", "enumerate", "(", "options", ".", "keys", "(", ")", ")", ":", "\n", "                ", "if", "i", "!=", "key", ":", "\n", "                    ", "raise", "Error", "(", "'DiscreteToMultiDiscrete must contain ordered keys. '", "'Item {0} should have a key of \"{0}\", but key \"{1}\" found instead.'", ".", "format", "(", "i", ",", "key", ")", ")", "\n", "", "if", "not", "self", ".", "multi_discrete", ".", "contains", "(", "options", "[", "key", "]", ")", ":", "\n", "                    ", "raise", "Error", "(", "'DiscreteToMultiDiscrete mapping for key {0} is '", "'not contained in the underlying MultiDiscrete action space. '", "'Invalid mapping: {1}'", ".", "format", "(", "key", ",", "options", "[", "key", "]", ")", ")", "\n", "# Unknown parameter provided", "\n", "", "", "", "else", ":", "\n", "            ", "raise", "Error", "(", "'DiscreteToMultiDiscrete - Invalid parameter provided.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.spaces.multi_discrete.DiscreteToMultiDiscrete.__call__": [[146, 148], ["None"], "methods", ["None"], ["", "", "def", "__call__", "(", "self", ",", "discrete_action", ")", ":", "\n", "        ", "return", "self", ".", "mapping", "[", "discrete_action", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.spaces.multi_discrete.BoxToMultiDiscrete.__init__": [[192, 207], ["isinstance", "numpy.array", "numpy.array", "list", "isinstance", "environments.mujoco.rand_param_envs.gym.error.Error", "len", "range", "enumerate"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.ListableAPIResource.list"], ["def", "__init__", "(", "self", ",", "multi_discrete", ",", "options", "=", "None", ")", ":", "\n", "        ", "assert", "isinstance", "(", "multi_discrete", ",", "MultiDiscrete", ")", "\n", "self", ".", "multi_discrete", "=", "multi_discrete", "\n", "self", ".", "num_discrete_space", "=", "self", ".", "multi_discrete", ".", "num_discrete_space", "\n", "\n", "if", "options", "is", "None", ":", "\n", "            ", "options", "=", "list", "(", "range", "(", "self", ".", "num_discrete_space", ")", ")", "\n", "\n", "", "if", "not", "isinstance", "(", "options", ",", "list", ")", ":", "\n", "            ", "raise", "Error", "(", "'BoxToMultiDiscrete - Invalid parameter provided.'", ")", "\n", "\n", "", "assert", "len", "(", "options", ")", "<=", "self", ".", "num_discrete_space", "\n", "self", ".", "low", "=", "np", ".", "array", "(", "[", "self", ".", "multi_discrete", ".", "low", "[", "x", "]", "for", "x", "in", "options", "]", ")", "\n", "self", ".", "high", "=", "np", ".", "array", "(", "[", "self", ".", "multi_discrete", ".", "high", "[", "x", "]", "for", "x", "in", "options", "]", ")", "\n", "self", ".", "mapping", "=", "{", "i", ":", "disc_num", "for", "i", ",", "disc_num", "in", "enumerate", "(", "options", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.spaces.multi_discrete.BoxToMultiDiscrete.__call__": [[208, 213], ["int", "round"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "box_action", ")", ":", "\n", "        ", "multi_discrete_action", "=", "[", "0", "]", "*", "self", ".", "num_discrete_space", "\n", "for", "i", "in", "self", ".", "mapping", ":", "\n", "            ", "multi_discrete_action", "[", "self", ".", "mapping", "[", "i", "]", "]", "=", "int", "(", "round", "(", "box_action", "[", "i", "]", ",", "0", ")", ")", "\n", "", "return", "multi_discrete_action", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Rondorf_BOReL.spaces.prng.seed": [[5, 16], ["np_random.seed"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.seed"], ["def", "seed", "(", "seed", "=", "None", ")", ":", "\n", "    ", "\"\"\"Seed the common numpy.random.RandomState used in spaces\n\n    CF\n    https://github.com/openai/gym/commit/58e6aa95e5af2c738557431f812abb81c505a7cf#commitcomment-17669277\n    for some details about why we seed the spaces separately from the\n    envs, but tl;dr is that it's pretty uncommon for them to be used\n    within an actual algorithm, and the code becomes simpler to just\n    use this common numpy.random.RandomState.\n    \"\"\"", "\n", "np_random", ".", "seed", "(", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.spaces.discrete.Discrete.__init__": [[14, 16], ["None"], "methods", ["None"], ["\n", "\n", "", "class", "DiscreteEnv", "(", "Env", ")", ":", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.spaces.discrete.Discrete.sample": [[16, 18], ["environments.mujoco.rand_param_envs.gym.spaces.prng.np_random.randint"], "methods", ["None"], ["", "class", "DiscreteEnv", "(", "Env", ")", ":", "\n", "\n", "    "]], "home.repos.pwc.inspect_result.Rondorf_BOReL.spaces.discrete.Discrete.contains": [[18, 26], ["isinstance", "isinstance", "int"], "methods", ["None"], ["    "]], "home.repos.pwc.inspect_result.Rondorf_BOReL.spaces.discrete.Discrete.__repr__": [[26, 28], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.Rondorf_BOReL.spaces.discrete.Discrete.__eq__": [[28, 30], ["None"], "methods", ["None"], ["\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjviewer.MjViewer.__init__": [[21, 56], ["mjcore.MJVOBJECTS", "mjcore.MJVCAMERA", "mjcore.MJVOPTION", "mjcore.MJROPTION", "mjcore.MJRCONTEXT", "threading.Lock"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "visible", "=", "True", ",", "init_width", "=", "500", ",", "init_height", "=", "500", ",", "go_fast", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Set go_fast=True to run at full speed instead of waiting for the 60 Hz monitor refresh\n        init_width and init_height set window size. On Mac Retina displays, they are in nominal\n        pixels but .render returns an array of device pixels, so the array will be twice as big\n        as you expect.\n        \"\"\"", "\n", "self", ".", "visible", "=", "visible", "\n", "self", ".", "init_width", "=", "init_width", "\n", "self", ".", "init_height", "=", "init_height", "\n", "self", ".", "go_fast", "=", "not", "visible", "or", "go_fast", "\n", "\n", "self", ".", "last_render_time", "=", "0", "\n", "self", ".", "objects", "=", "mjcore", ".", "MJVOBJECTS", "(", ")", "\n", "self", ".", "cam", "=", "mjcore", ".", "MJVCAMERA", "(", ")", "\n", "self", ".", "vopt", "=", "mjcore", ".", "MJVOPTION", "(", ")", "\n", "self", ".", "ropt", "=", "mjcore", ".", "MJROPTION", "(", ")", "\n", "self", ".", "con", "=", "mjcore", ".", "MJRCONTEXT", "(", ")", "\n", "self", ".", "running", "=", "False", "\n", "self", ".", "speedtype", "=", "1", "\n", "self", ".", "window", "=", "None", "\n", "self", ".", "model", "=", "None", "\n", "self", ".", "gui_lock", "=", "Lock", "(", ")", "\n", "\n", "# framebuffer objects", "\n", "self", ".", "_fbo", "=", "None", "\n", "self", ".", "_rbo", "=", "None", "\n", "\n", "self", ".", "_last_button", "=", "0", "\n", "self", ".", "_last_click_time", "=", "0", "\n", "self", ".", "_button_left_pressed", "=", "False", "\n", "self", ".", "_button_middle_pressed", "=", "False", "\n", "self", ".", "_button_right_pressed", "=", "False", "\n", "self", ".", "_last_mouse_x", "=", "0", "\n", "self", ".", "_last_mouse_y", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjviewer.MjViewer.set_model": [[57, 72], ["glfw.make_context_current", "mjviewer.MjViewer.render", "mjviewer.MjViewer.autoscale", "mjlib.mjlib.mjlib.mjr_makeContext", "mjlib.mjlib.mjlib.mjr_makeContext", "ctypes.byref", "ctypes.byref"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.glfw.make_context_current", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.render", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjviewer.MjViewer.autoscale"], ["", "def", "set_model", "(", "self", ",", "model", ")", ":", "\n", "        ", "glfw", ".", "make_context_current", "(", "self", ".", "window", ")", "\n", "self", ".", "model", "=", "model", "\n", "if", "model", ":", "\n", "            ", "self", ".", "data", "=", "model", ".", "data", "\n", "", "else", ":", "\n", "            ", "self", ".", "data", "=", "None", "\n", "", "if", "self", ".", "running", ":", "\n", "            ", "if", "model", ":", "\n", "                ", "mjlib", ".", "mjr_makeContext", "(", "model", ".", "ptr", ",", "byref", "(", "self", ".", "con", ")", ",", "150", ")", "\n", "", "else", ":", "\n", "                ", "mjlib", ".", "mjr_makeContext", "(", "None", ",", "byref", "(", "self", ".", "con", ")", ",", "150", ")", "\n", "", "self", ".", "render", "(", ")", "\n", "", "if", "model", ":", "\n", "            ", "self", ".", "autoscale", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjviewer.MjViewer.autoscale": [[73, 83], ["glfw.make_context_current", "mjviewer.MjViewer.get_dimensions", "mjlib.mjlib.mjlib.mjv_updateCameraPose", "ctypes.byref"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.glfw.make_context_current", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjviewer.MjViewer.get_dimensions"], ["", "", "def", "autoscale", "(", "self", ")", ":", "\n", "        ", "glfw", ".", "make_context_current", "(", "self", ".", "window", ")", "\n", "self", ".", "cam", ".", "lookat", "[", "0", "]", "=", "self", ".", "model", ".", "stat", ".", "center", "[", "0", "]", "\n", "self", ".", "cam", ".", "lookat", "[", "1", "]", "=", "self", ".", "model", ".", "stat", ".", "center", "[", "1", "]", "\n", "self", ".", "cam", ".", "lookat", "[", "2", "]", "=", "self", ".", "model", ".", "stat", ".", "center", "[", "2", "]", "\n", "self", ".", "cam", ".", "distance", "=", "0.5", "*", "self", ".", "model", ".", "stat", ".", "extent", "\n", "self", ".", "cam", ".", "camid", "=", "-", "1", "\n", "self", ".", "cam", ".", "trackbodyid", "=", "1", "\n", "width", ",", "height", "=", "self", ".", "get_dimensions", "(", ")", "\n", "mjlib", ".", "mjv_updateCameraPose", "(", "byref", "(", "self", ".", "cam", ")", ",", "width", "*", "1.0", "/", "height", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjviewer.MjViewer.get_rect": [[84, 88], ["mjcore.MJRRECT", "mjviewer.MjViewer.get_dimensions"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjviewer.MjViewer.get_dimensions"], ["", "def", "get_rect", "(", "self", ")", ":", "\n", "        ", "rect", "=", "mjcore", ".", "MJRRECT", "(", "0", ",", "0", ",", "0", ",", "0", ")", "\n", "rect", ".", "width", ",", "rect", ".", "height", "=", "self", ".", "get_dimensions", "(", ")", "\n", "return", "rect", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjviewer.MjViewer.render": [[89, 107], ["glfw.make_context_current", "mjviewer.MjViewer.gui_lock.acquire", "mjviewer.MjViewer.get_rect", "mjlib.mjlib.mjlib.mjv_makeGeoms", "mjlib.mjlib.mjlib.mjv_makeLights", "mjlib.mjlib.mjlib.mjv_setCamera", "mjlib.mjlib.mjlib.mjv_updateCameraPose", "mjlib.mjlib.mjlib.mjr_render", "mjviewer.MjViewer.gui_lock.release", "ctypes.byref", "ctypes.byref", "ctypes.cast", "ctypes.byref", "ctypes.byref", "ctypes.byref", "ctypes.byref", "ctypes.byref", "ctypes.byref", "ctypes.byref", "ctypes.POINTER"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.glfw.make_context_current", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjviewer.MjViewer.get_rect"], ["", "def", "render", "(", "self", ")", ":", "\n", "        ", "if", "not", "self", ".", "data", ":", "\n", "            ", "return", "\n", "", "glfw", ".", "make_context_current", "(", "self", ".", "window", ")", "\n", "self", ".", "gui_lock", ".", "acquire", "(", ")", "\n", "rect", "=", "self", ".", "get_rect", "(", ")", "\n", "arr", "=", "(", "ctypes", ".", "c_double", "*", "3", ")", "(", "0", ",", "0", ",", "0", ")", "\n", "\n", "mjlib", ".", "mjv_makeGeoms", "(", "self", ".", "model", ".", "ptr", ",", "self", ".", "data", ".", "ptr", ",", "byref", "(", "self", ".", "objects", ")", ",", "byref", "(", "self", ".", "vopt", ")", ",", "mjCAT_ALL", ",", "0", ",", "None", ",", "None", ",", "ctypes", ".", "cast", "(", "arr", ",", "ctypes", ".", "POINTER", "(", "ctypes", ".", "c_double", ")", ")", ")", "\n", "mjlib", ".", "mjv_makeLights", "(", "self", ".", "model", ".", "ptr", ",", "self", ".", "data", ".", "ptr", ",", "byref", "(", "self", ".", "objects", ")", ")", "\n", "\n", "mjlib", ".", "mjv_setCamera", "(", "self", ".", "model", ".", "ptr", ",", "self", ".", "data", ".", "ptr", ",", "byref", "(", "self", ".", "cam", ")", ")", "\n", "\n", "mjlib", ".", "mjv_updateCameraPose", "(", "byref", "(", "self", ".", "cam", ")", ",", "rect", ".", "width", "*", "1.0", "/", "rect", ".", "height", ")", "\n", "\n", "mjlib", ".", "mjr_render", "(", "0", ",", "rect", ",", "byref", "(", "self", ".", "objects", ")", ",", "byref", "(", "self", ".", "ropt", ")", ",", "byref", "(", "self", ".", "cam", ".", "pose", ")", ",", "byref", "(", "self", ".", "con", ")", ")", "\n", "\n", "self", ".", "gui_lock", ".", "release", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjviewer.MjViewer.get_dimensions": [[108, 115], ["glfw.get_framebuffer_size"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.glfw.get_framebuffer_size"], ["", "def", "get_dimensions", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        returns a tuple (width, height)\n        \"\"\"", "\n", "if", "self", ".", "window", ":", "\n", "            ", "return", "glfw", ".", "get_framebuffer_size", "(", "self", ".", "window", ")", "\n", "", "return", "(", "self", ".", "init_width", ",", "self", ".", "init_height", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjviewer.MjViewer.get_image": [[116, 129], ["glfw.make_context_current", "mjviewer.MjViewer.get_dimensions", "OpenGL.glReadBuffer", "OpenGL.glReadPixels"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.glfw.make_context_current", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjviewer.MjViewer.get_dimensions"], ["", "def", "get_image", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        returns a tuple (data, width, height), where:\n        - data is a string with raw bytes representing the pixels in 3-channel RGB\n          (i.e. every three bytes = 1 pixel)\n        - width is the width of the image\n        - height is the height of the image\n        \"\"\"", "\n", "glfw", ".", "make_context_current", "(", "self", ".", "window", ")", "\n", "width", ",", "height", "=", "self", ".", "get_dimensions", "(", ")", "\n", "gl", ".", "glReadBuffer", "(", "gl", ".", "GL_BACK", ")", "\n", "data", "=", "gl", ".", "glReadPixels", "(", "0", ",", "0", ",", "width", ",", "height", ",", "gl", ".", "GL_RGB", ",", "gl", ".", "GL_UNSIGNED_BYTE", ")", "\n", "return", "(", "data", ",", "width", ",", "height", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjviewer.MjViewer._init_framebuffer_object": [[130, 159], ["OpenGL.glGenFramebuffers", "OpenGL.glBindFramebuffer", "OpenGL.glGenRenderbuffers", "OpenGL.glBindRenderbuffer", "OpenGL.glRenderbufferStorage", "OpenGL.glFramebufferRenderbuffer", "OpenGL.glBindRenderbuffer", "OpenGL.glBindFramebuffer", "OpenGL.glCheckFramebufferStatus", "OpenGL.glDeleteFramebuffers", "glfw.terminate", "Exception"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.glfw.terminate"], ["", "def", "_init_framebuffer_object", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        returns a Framebuffer Object to support offscreen rendering.\n        http://learnopengl.com/#!Advanced-OpenGL/Framebuffers\n        \"\"\"", "\n", "fbo", "=", "gl", ".", "glGenFramebuffers", "(", "1", ")", "\n", "gl", ".", "glBindFramebuffer", "(", "gl", ".", "GL_FRAMEBUFFER", ",", "fbo", ")", "\n", "\n", "rbo", "=", "gl", ".", "glGenRenderbuffers", "(", "1", ")", "\n", "gl", ".", "glBindRenderbuffer", "(", "gl", ".", "GL_RENDERBUFFER", ",", "rbo", ")", "\n", "gl", ".", "glRenderbufferStorage", "(", "\n", "gl", ".", "GL_RENDERBUFFER", ",", "\n", "gl", ".", "GL_RGBA", ",", "\n", "self", ".", "init_width", ",", "\n", "self", ".", "init_height", "\n", ")", "\n", "gl", ".", "glFramebufferRenderbuffer", "(", "\n", "gl", ".", "GL_FRAMEBUFFER", ",", "gl", ".", "GL_COLOR_ATTACHMENT0", ",", "gl", ".", "GL_RENDERBUFFER", ",", "rbo", ")", "\n", "gl", ".", "glBindRenderbuffer", "(", "gl", ".", "GL_RENDERBUFFER", ",", "0", ")", "\n", "gl", ".", "glBindFramebuffer", "(", "gl", ".", "GL_FRAMEBUFFER", ",", "0", ")", "\n", "fbo_status", "=", "gl", ".", "glCheckFramebufferStatus", "(", "gl", ".", "GL_FRAMEBUFFER", ")", "\n", "\n", "if", "fbo_status", "!=", "gl", ".", "GL_FRAMEBUFFER_COMPLETE", ":", "\n", "            ", "gl", ".", "glDeleteFramebuffers", "(", "[", "fbo", "]", ")", "\n", "glfw", ".", "terminate", "(", ")", "\n", "raise", "Exception", "(", "'Framebuffer failed status check: %s'", "%", "fbo_status", ")", "\n", "\n", "", "self", ".", "_fbo", "=", "fbo", "\n", "self", ".", "_rbo", "=", "rbo", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjviewer.MjViewer.start": [[160, 230], ["logger.info", "glfw.set_error_callback", "glfw.get_video_mode", "glfw.make_context_current", "mjviewer.MjViewer._init_framebuffer_object", "glfw.get_framebuffer_size", "glfw.get_window_size", "mjlib.mjlib.mjlib.mjv_makeObjects", "mjlib.mjlib.mjlib.mjv_defaultCamera", "mjlib.mjlib.mjlib.mjv_defaultOption", "mjlib.mjlib.mjlib.mjr_defaultOption", "mjlib.mjlib.mjlib.mjr_defaultContext", "glfw.set_cursor_pos_callback", "glfw.set_mouse_button_callback", "glfw.set_scroll_callback", "glfw.get_version", "glfw.init", "Exception", "glfw.window_hint", "glfw.window_hint", "glfw.window_hint", "glfw.get_primary_monitor", "glfw.window_hint", "glfw.create_window", "glfw.window_hint", "glfw.create_window", "glfw.terminate", "glfw.swap_interval", "ctypes.byref", "ctypes.byref", "ctypes.byref", "ctypes.byref", "ctypes.byref", "mjlib.mjlib.mjlib.mjr_makeContext", "mjviewer.MjViewer.autoscale", "mjlib.mjlib.mjlib.mjr_makeContext", "ctypes.byref", "ctypes.byref"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.glfw.set_error_callback", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.glfw.get_video_mode", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.glfw.make_context_current", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjviewer.MjViewer._init_framebuffer_object", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.glfw.get_framebuffer_size", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.glfw.get_window_size", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.glfw.set_cursor_pos_callback", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.glfw.set_mouse_button_callback", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.glfw.set_scroll_callback", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.glfw.get_version", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.glfw.init", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.glfw.window_hint", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.glfw.window_hint", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.glfw.window_hint", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.glfw.get_primary_monitor", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.glfw.window_hint", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.glfw.create_window", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.glfw.window_hint", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.glfw.create_window", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.glfw.terminate", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.glfw.swap_interval", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjviewer.MjViewer.autoscale"], ["", "def", "start", "(", "self", ")", ":", "\n", "        ", "logger", ".", "info", "(", "'initializing glfw@%s'", ",", "glfw", ".", "get_version", "(", ")", ")", "\n", "\n", "glfw", ".", "set_error_callback", "(", "_glfw_error_callback", ")", "\n", "\n", "if", "not", "glfw", ".", "init", "(", ")", ":", "\n", "            ", "raise", "Exception", "(", "'glfw failed to initialize'", ")", "\n", "\n", "", "window", "=", "None", "\n", "if", "self", ".", "visible", ":", "\n", "            ", "glfw", ".", "window_hint", "(", "glfw", ".", "SAMPLES", ",", "4", ")", "\n", "glfw", ".", "window_hint", "(", "glfw", ".", "VISIBLE", ",", "1", ")", ";", "\n", "", "else", ":", "\n", "            ", "glfw", ".", "window_hint", "(", "glfw", ".", "VISIBLE", ",", "0", ")", ";", "\n", "\n", "# try stereo if refresh rate is at least 100Hz", "\n", "", "stereo_available", "=", "False", "\n", "\n", "_", ",", "_", ",", "refresh_rate", "=", "glfw", ".", "get_video_mode", "(", "glfw", ".", "get_primary_monitor", "(", ")", ")", "\n", "if", "refresh_rate", ">=", "100", ":", "\n", "            ", "glfw", ".", "window_hint", "(", "glfw", ".", "STEREO", ",", "1", ")", "\n", "window", "=", "glfw", ".", "create_window", "(", "\n", "self", ".", "init_width", ",", "self", ".", "init_height", ",", "\"Simulate\"", ",", "None", ",", "None", ")", "\n", "if", "window", ":", "\n", "                ", "stereo_available", "=", "True", "\n", "\n", "# no stereo: try mono", "\n", "", "", "if", "not", "window", ":", "\n", "            ", "glfw", ".", "window_hint", "(", "glfw", ".", "STEREO", ",", "0", ")", "\n", "window", "=", "glfw", ".", "create_window", "(", "\n", "self", ".", "init_width", ",", "self", ".", "init_height", ",", "\"Simulate\"", ",", "None", ",", "None", ")", "\n", "\n", "", "if", "not", "window", ":", "\n", "            ", "glfw", ".", "terminate", "(", ")", "\n", "return", "\n", "\n", "", "self", ".", "running", "=", "True", "\n", "\n", "# Make the window's context current", "\n", "glfw", ".", "make_context_current", "(", "window", ")", "\n", "\n", "if", "self", ".", "go_fast", ":", "\n", "# Let's go faster than 60 Hz", "\n", "            ", "glfw", ".", "swap_interval", "(", "0", ")", "\n", "\n", "", "self", ".", "_init_framebuffer_object", "(", ")", "\n", "\n", "width", ",", "height", "=", "glfw", ".", "get_framebuffer_size", "(", "window", ")", "\n", "width1", ",", "height", "=", "glfw", ".", "get_window_size", "(", "window", ")", "\n", "self", ".", "_scale", "=", "width", "*", "1.0", "/", "width1", "\n", "\n", "self", ".", "window", "=", "window", "\n", "\n", "mjlib", ".", "mjv_makeObjects", "(", "byref", "(", "self", ".", "objects", ")", ",", "1000", ")", "\n", "\n", "mjlib", ".", "mjv_defaultCamera", "(", "byref", "(", "self", ".", "cam", ")", ")", "\n", "mjlib", ".", "mjv_defaultOption", "(", "byref", "(", "self", ".", "vopt", ")", ")", "\n", "mjlib", ".", "mjr_defaultOption", "(", "byref", "(", "self", ".", "ropt", ")", ")", "\n", "\n", "mjlib", ".", "mjr_defaultContext", "(", "byref", "(", "self", ".", "con", ")", ")", "\n", "\n", "if", "self", ".", "model", ":", "\n", "            ", "mjlib", ".", "mjr_makeContext", "(", "self", ".", "model", ".", "ptr", ",", "byref", "(", "self", ".", "con", ")", ",", "150", ")", "\n", "self", ".", "autoscale", "(", ")", "\n", "", "else", ":", "\n", "            ", "mjlib", ".", "mjr_makeContext", "(", "None", ",", "byref", "(", "self", ".", "con", ")", ",", "150", ")", "\n", "\n", "", "glfw", ".", "set_cursor_pos_callback", "(", "window", ",", "self", ".", "handle_mouse_move", ")", "\n", "glfw", ".", "set_mouse_button_callback", "(", "window", ",", "self", ".", "handle_mouse_button", ")", "\n", "glfw", ".", "set_scroll_callback", "(", "window", ",", "self", ".", "handle_scroll", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjviewer.MjViewer.handle_mouse_move": [[231, 269], ["int", "int", "glfw.get_framebuffer_size", "mjviewer.MjViewer.gui_lock.acquire", "mjlib.mjlib.mjlib.mjv_moveCamera", "mjviewer.MjViewer.gui_lock.release", "int", "int", "ctypes.byref", "glfw.get_key", "glfw.get_key"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.glfw.get_framebuffer_size", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.glfw.get_key", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.glfw.get_key"], ["", "def", "handle_mouse_move", "(", "self", ",", "window", ",", "xpos", ",", "ypos", ")", ":", "\n", "# no buttons down: nothing to do", "\n", "        ", "if", "not", "self", ".", "_button_left_pressed", "and", "not", "self", ".", "_button_middle_pressed", "and", "not", "self", ".", "_button_right_pressed", ":", "\n", "            ", "return", "\n", "\n", "# compute mouse displacement, save", "\n", "", "dx", "=", "int", "(", "self", ".", "_scale", "*", "xpos", ")", "-", "self", ".", "_last_mouse_x", "\n", "dy", "=", "int", "(", "self", ".", "_scale", "*", "ypos", ")", "-", "self", ".", "_last_mouse_y", "\n", "self", ".", "_last_mouse_x", "=", "int", "(", "self", ".", "_scale", "*", "xpos", ")", "\n", "self", ".", "_last_mouse_y", "=", "int", "(", "self", ".", "_scale", "*", "ypos", ")", "\n", "\n", "# require model", "\n", "if", "not", "self", ".", "model", ":", "\n", "            ", "return", "\n", "\n", "# get current window size", "\n", "", "width", ",", "height", "=", "glfw", ".", "get_framebuffer_size", "(", "self", ".", "window", ")", "\n", "\n", "# get shift key state", "\n", "mod_shift", "=", "glfw", ".", "get_key", "(", "window", ",", "glfw", ".", "KEY_LEFT_SHIFT", ")", "==", "glfw", ".", "PRESS", "or", "glfw", ".", "get_key", "(", "window", ",", "glfw", ".", "KEY_RIGHT_SHIFT", ")", "==", "glfw", ".", "PRESS", "\n", "\n", "# determine action based on mouse button", "\n", "action", "=", "None", "\n", "if", "self", ".", "_button_right_pressed", ":", "\n", "            ", "action", "=", "mjconstants", ".", "MOUSE_MOVE_H", "if", "mod_shift", "else", "mjconstants", ".", "MOUSE_MOVE_V", "\n", "", "elif", "self", ".", "_button_left_pressed", ":", "\n", "            ", "action", "=", "mjconstants", ".", "MOUSE_ROTATE_H", "if", "mod_shift", "else", "mjconstants", ".", "MOUSE_ROTATE_V", "\n", "", "else", ":", "\n", "            ", "action", "=", "mjconstants", ".", "MOUSE_ZOOM", "\n", "\n", "", "self", ".", "gui_lock", ".", "acquire", "(", ")", "\n", "\n", "mjlib", ".", "mjv_moveCamera", "(", "action", ",", "dx", ",", "dy", ",", "byref", "(", "self", ".", "cam", ")", ",", "width", ",", "height", ")", "\n", "\n", "self", ".", "gui_lock", ".", "release", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjviewer.MjViewer.handle_mouse_button": [[271, 296], ["glfw.get_cursor_pos", "int", "int", "mjviewer.MjViewer.gui_lock.acquire", "mjviewer.MjViewer.gui_lock.release", "glfw.get_mouse_button", "glfw.get_mouse_button", "glfw.get_mouse_button", "glfw.get_time"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.glfw.get_cursor_pos", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.glfw.get_mouse_button", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.glfw.get_mouse_button", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.glfw.get_mouse_button", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.glfw.get_time"], ["", "def", "handle_mouse_button", "(", "self", ",", "window", ",", "button", ",", "act", ",", "mods", ")", ":", "\n", "# update button state", "\n", "        ", "self", ".", "_button_left_pressed", "=", "glfw", ".", "get_mouse_button", "(", "window", ",", "glfw", ".", "MOUSE_BUTTON_LEFT", ")", "==", "glfw", ".", "PRESS", "\n", "self", ".", "_button_middle_pressed", "=", "glfw", ".", "get_mouse_button", "(", "window", ",", "glfw", ".", "MOUSE_BUTTON_MIDDLE", ")", "==", "glfw", ".", "PRESS", "\n", "self", ".", "_button_right_pressed", "=", "glfw", ".", "get_mouse_button", "(", "window", ",", "glfw", ".", "MOUSE_BUTTON_RIGHT", ")", "==", "glfw", ".", "PRESS", "\n", "\n", "# update mouse position", "\n", "x", ",", "y", "=", "glfw", ".", "get_cursor_pos", "(", "window", ")", "\n", "self", ".", "_last_mouse_x", "=", "int", "(", "self", ".", "_scale", "*", "x", ")", "\n", "self", ".", "_last_mouse_y", "=", "int", "(", "self", ".", "_scale", "*", "y", ")", "\n", "\n", "if", "not", "self", ".", "model", ":", "\n", "            ", "return", "\n", "\n", "", "self", ".", "gui_lock", ".", "acquire", "(", ")", "\n", "\n", "# save info", "\n", "if", "act", "==", "glfw", ".", "PRESS", ":", "\n", "            ", "self", ".", "_last_button", "=", "button", "\n", "self", ".", "_last_click_time", "=", "glfw", ".", "get_time", "(", ")", "\n", "\n", "", "self", ".", "gui_lock", ".", "release", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjviewer.MjViewer.handle_scroll": [[297, 309], ["glfw.get_framebuffer_size", "mjviewer.MjViewer.gui_lock.acquire", "mjlib.mjlib.mjlib.mjv_moveCamera", "mjviewer.MjViewer.gui_lock.release", "ctypes.byref"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.glfw.get_framebuffer_size"], ["", "def", "handle_scroll", "(", "self", ",", "window", ",", "x_offset", ",", "y_offset", ")", ":", "\n", "# require model", "\n", "        ", "if", "not", "self", ".", "model", ":", "\n", "            ", "return", "\n", "\n", "# get current window size", "\n", "", "width", ",", "height", "=", "glfw", ".", "get_framebuffer_size", "(", "window", ")", "\n", "\n", "# scroll", "\n", "self", ".", "gui_lock", ".", "acquire", "(", ")", "\n", "mjlib", ".", "mjv_moveCamera", "(", "mjconstants", ".", "MOUSE_ZOOM", ",", "0", ",", "(", "-", "20", "*", "y_offset", ")", ",", "byref", "(", "self", ".", "cam", ")", ",", "width", ",", "height", ")", "\n", "self", ".", "gui_lock", ".", "release", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjviewer.MjViewer.should_stop": [[310, 312], ["glfw.window_should_close"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.glfw.window_should_close"], ["", "def", "should_stop", "(", "self", ")", ":", "\n", "        ", "return", "glfw", ".", "window_should_close", "(", "self", ".", "window", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjviewer.MjViewer.loop_once": [[313, 320], ["glfw.make_context_current", "mjviewer.MjViewer.render", "glfw.swap_buffers", "glfw.poll_events"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.glfw.make_context_current", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.render", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.glfw.swap_buffers", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.glfw.poll_events"], ["", "def", "loop_once", "(", "self", ")", ":", "\n", "        ", "glfw", ".", "make_context_current", "(", "self", ".", "window", ")", "\n", "self", ".", "render", "(", ")", "\n", "# Swap front and back buffers", "\n", "glfw", ".", "swap_buffers", "(", "self", ".", "window", ")", "\n", "# Poll for and process events", "\n", "glfw", ".", "poll_events", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjviewer.MjViewer.finish": [[321, 333], ["glfw.make_context_current", "glfw.destroy_window", "OpenGL.glIsFramebuffer", "OpenGL.glIsRenderbuffer", "mjlib.mjlib.mjlib.mjr_freeContext", "mjlib.mjlib.mjlib.mjv_freeObjects", "OpenGL.glDeleteFramebuffers", "OpenGL.glDeleteRenderbuffers", "ctypes.byref", "ctypes.byref", "int", "int"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.glfw.make_context_current", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.glfw.destroy_window"], ["", "def", "finish", "(", "self", ")", ":", "\n", "        ", "glfw", ".", "make_context_current", "(", "self", ".", "window", ")", "\n", "glfw", ".", "destroy_window", "(", "self", ".", "window", ")", "\n", "\n", "if", "gl", ".", "glIsFramebuffer", "(", "self", ".", "_fbo", ")", ":", "\n", "            ", "gl", ".", "glDeleteFramebuffers", "(", "int", "(", "self", ".", "_fbo", ")", ")", "\n", "", "if", "gl", ".", "glIsRenderbuffer", "(", "self", ".", "_rbo", ")", ":", "\n", "            ", "gl", ".", "glDeleteRenderbuffers", "(", "1", ",", "int", "(", "self", ".", "_rbo", ")", ")", "\n", "\n", "", "mjlib", ".", "mjr_freeContext", "(", "byref", "(", "self", ".", "con", ")", ")", "\n", "mjlib", ".", "mjv_freeObjects", "(", "byref", "(", "self", ".", "objects", ")", ")", "\n", "self", ".", "running", "=", "False", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjviewer._glfw_error_callback": [[15, 17], ["logger.error"], "function", ["None"], ["def", "_glfw_error_callback", "(", "e", ",", "d", ")", ":", "\n", "    ", "logger", ".", "error", "(", "'GLFW error: %s, desc: %s'", ",", "e", ",", "d", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.config.get_key_path": [[10, 12], ["None"], "function", ["None"], ["def", "get_key_path", "(", ")", ":", "\n", "    ", "return", "_key_path", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.config.init_config": [[13, 40], ["os.environ.get", "os.environ.get", "os.path.expanduser", "os.path.expanduser", "config.check_mujoco_version", "config.check_numpy_version", "error.MujocoDependencyError", "error.MujocoDependencyError", "os.path.exists", "os.path.exists", "error.MujocoDependencyError", "os.path.exists", "os.path.exists", "error.MujocoDependencyError", "error.MujocoDependencyError"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.config.check_mujoco_version", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.config.check_numpy_version"], ["", "def", "init_config", "(", ")", ":", "\n", "    ", "global", "_key_path", ",", "mjpro_path", "\n", "\n", "_key_path", "=", "os", ".", "environ", ".", "get", "(", "'MUJOCO_PY_MJKEY_PATH'", ")", "\n", "if", "_key_path", "and", "not", "os", ".", "path", ".", "exists", "(", "_key_path", ")", ":", "\n", "        ", "raise", "error", ".", "MujocoDependencyError", "(", "'MUJOCO_PY_MJKEY_PATH path does not exist: {}'", ".", "format", "(", "_key_path", ")", ")", "\n", "\n", "", "mjpro_path", "=", "os", ".", "environ", ".", "get", "(", "'MUJOCO_PY_MJPRO_PATH'", ")", "\n", "if", "mjpro_path", "and", "not", "os", ".", "path", ".", "exists", "(", "mjpro_path", ")", ":", "\n", "        ", "raise", "error", ".", "MujocoDependencyError", "(", "'MUJOCO_PY_MJPRO_PATH path does not exist: {}'", ".", "format", "(", "mjpro_path", ")", ")", "\n", "\n", "", "default__key_path", "=", "os", ".", "path", ".", "expanduser", "(", "'~/.mujoco/mjkey.txt'", ")", "\n", "default_mjpro_path", "=", "os", ".", "path", ".", "expanduser", "(", "'~/.mujoco/mjpro131'", ")", "\n", "if", "not", "_key_path", "and", "os", ".", "path", ".", "exists", "(", "default__key_path", ")", ":", "\n", "        ", "_key_path", "=", "default__key_path", "\n", "", "if", "not", "mjpro_path", "and", "os", ".", "path", ".", "exists", "(", "default_mjpro_path", ")", ":", "\n", "        ", "mjpro_path", "=", "default_mjpro_path", "\n", "\n", "", "if", "not", "_key_path", "and", "not", "mjpro_path", ":", "\n", "        ", "raise", "error", ".", "MujocoDependencyError", "(", "'To use MuJoCo, you need to either populate ~/.mujoco/mjkey.txt and ~/.mujoco/mjpro131, or set the MUJOCO_PY_MJKEY_PATH and MUJOCO_PY_MJPRO_PATH environment variables appropriately. Follow the instructions on https://github.com/openai/mujoco-py for where to obtain these.'", ")", "\n", "", "elif", "not", "_key_path", ":", "\n", "        ", "raise", "error", ".", "MujocoDependencyError", "(", "'Found your MuJoCo binaries but not license key. Please put your key into ~/.mujoco/mjkey.txt or set MUJOCO_PY_MJKEY_PATH. Follow the instructions on https://github.com/openai/mujoco-py for setup.'", ")", "\n", "", "elif", "not", "mjpro_path", ":", "\n", "        ", "raise", "error", ".", "MujocoDependencyError", "(", "'Found your MuJoCo license key but not binaries. Please put your binaries into ~/.mujoco/mjpro131 or set MUJOCO_PY_MJPRO_PATH. Follow the instructions on https://github.com/openai/mujoco-py for setup.'", ")", "\n", "\n", "", "check_mujoco_version", "(", ")", "\n", "check_numpy_version", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.config.check_mujoco_version": [[41, 45], ["os.path.basename", "error.MujocoDependencyError"], "function", ["None"], ["", "def", "check_mujoco_version", "(", ")", ":", "\n", "    ", "mjpro", "=", "os", ".", "path", ".", "basename", "(", "mjpro_path", ")", "\n", "if", "mjpro", "!=", "'mjpro131'", ":", "\n", "        ", "raise", "error", ".", "MujocoDependencyError", "(", "\"We expected your MUJOCO_PY_MJPRO_PATH final directory to be 'mjpro131', but you provided: {} ({}). MuJoCo often changes in incompatible ways between versions, so you must use MuJoCo 1.31. If you're using MuJoCo 1.31 but changed the directory name, simply change the name back.\"", ".", "format", "(", "mjpro", ",", "mjpro_path", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.config.check_numpy_version": [[46, 49], ["distutils.version.LooseVersion", "distutils.version.LooseVersion", "error.MujocoDependencyError"], "function", ["None"], ["", "", "def", "check_numpy_version", "(", ")", ":", "\n", "    ", "if", "distutils", ".", "version", ".", "LooseVersion", "(", "numpy", ".", "__version__", ")", "<", "distutils", ".", "version", ".", "LooseVersion", "(", "'1.10.4'", ")", ":", "\n", "        ", "raise", "error", ".", "MujocoDependencyError", "(", "'You are running with numpy {}, but you must use >= 1.10.4. (In particular, earlier versions of numpy have been seen to cause mujoco-py to return different results from later ones.)'", ".", "format", "(", "numpy", ".", "__version__", ",", "'1.10.4'", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjcore.dict2.__init__": [[21, 24], ["dict.__init__"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.__init__"], ["    ", "def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "dict", ".", "__init__", "(", "self", ",", "kwargs", ")", "\n", "self", ".", "__dict__", "=", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjcore.MjModel.__init__": [[28, 41], ["ctypes.create_string_buffer", "mjlib.mjlib.mjlib.mj_loadXML", "mjtypes.MjModelWrapper.__init__", "mjlib.mjlib.mjlib.mj_makeData", "mjcore.dict2", "mjcore.MjData", "mjcore.MjModel.forward", "len", "print", "getattr"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.__init__", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjcore.MjModel.forward"], ["    ", "def", "__init__", "(", "self", ",", "xml_path", ")", ":", "\n", "        ", "buf", "=", "create_string_buffer", "(", "1000", ")", "\n", "model_ptr", "=", "mjlib", ".", "mj_loadXML", "(", "xml_path", ",", "None", ",", "buf", ",", "1000", ")", "\n", "if", "len", "(", "buf", ".", "value", ")", ">", "0", ":", "\n", "            ", "print", "(", "\"Warning: %s\"", "%", "buf", ".", "value", ")", "\n", "", "super", "(", "MjModel", ",", "self", ")", ".", "__init__", "(", "model_ptr", ")", "\n", "data_ptr", "=", "mjlib", ".", "mj_makeData", "(", "model_ptr", ")", "\n", "fields", "=", "[", "\"nq\"", ",", "\"nv\"", ",", "\"na\"", ",", "\"nu\"", ",", "\"nbody\"", ",", "\"nmocap\"", ",", "\"nuserdata\"", ",", "\"nsensordata\"", ",", "\"njnt\"", ",", "\"ngeom\"", ",", "\"nsite\"", ",", "\"ncam\"", ",", "\"nlight\"", ",", "\"ntendon\"", ",", "\"nwrap\"", ",", "\"nM\"", ",", "\"njmax\"", ",", "\"nemax\"", "]", "\n", "sizes", "=", "dict2", "(", "**", "{", "k", ":", "getattr", "(", "self", ",", "k", ")", "for", "k", "in", "fields", "}", ")", "\n", "data", "=", "MjData", "(", "data_ptr", ",", "sizes", ")", "\n", "self", ".", "data", "=", "data", "\n", "self", ".", "_body_comvels", "=", "None", "\n", "self", ".", "forward", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjcore.MjModel.forward": [[42, 47], ["mjlib.mjlib.mjlib.mj_forward", "mjlib.mjlib.mjlib.mj_sensor", "mjlib.mjlib.mjlib.mj_energy"], "methods", ["None"], ["", "def", "forward", "(", "self", ")", ":", "\n", "        ", "mjlib", ".", "mj_forward", "(", "self", ".", "ptr", ",", "self", ".", "data", ".", "ptr", ")", "\n", "mjlib", ".", "mj_sensor", "(", "self", ".", "ptr", ",", "self", ".", "data", ".", "ptr", ")", "\n", "mjlib", ".", "mj_energy", "(", "self", ".", "ptr", ",", "self", ".", "data", ".", "ptr", ")", "\n", "self", ".", "_body_comvels", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjcore.MjModel.body_comvels": [[48, 53], ["mjcore.MjModel._compute_subtree"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjcore.MjModel._compute_subtree"], ["", "@", "property", "\n", "def", "body_comvels", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_body_comvels", "is", "None", ":", "\n", "            ", "self", ".", "_body_comvels", "=", "self", ".", "_compute_subtree", "(", ")", "\n", "", "return", "self", ".", "_body_comvels", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjcore.MjModel._compute_subtree": [[54, 78], ["np.zeros", "mjcore.MjModel.body_mass.flatten", "six.moves.xrange", "six.moves.xrange", "mjlib.mjlib.mjlib.mj_objectVelocity", "mjcore.MjModel.reshape", "mjcore.MjModel.reshape", "body_vels[].ctypes.data_as", "POINTER"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.zeros"], ["", "def", "_compute_subtree", "(", "self", ")", ":", "\n", "        ", "body_vels", "=", "np", ".", "zeros", "(", "(", "self", ".", "nbody", ",", "6", ")", ")", "\n", "# bodywise quantities", "\n", "mass", "=", "self", ".", "body_mass", ".", "flatten", "(", ")", "\n", "for", "i", "in", "xrange", "(", "self", ".", "nbody", ")", ":", "\n", "# body velocity", "\n", "            ", "mjlib", ".", "mj_objectVelocity", "(", "\n", "self", ".", "ptr", ",", "self", ".", "data", ".", "ptr", ",", "C", ".", "mjOBJ_BODY", ",", "i", ",", "\n", "body_vels", "[", "i", "]", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", ",", "0", "\n", ")", "\n", "# body linear momentum", "\n", "", "lin_moms", "=", "body_vels", "[", ":", ",", "3", ":", "]", "*", "mass", ".", "reshape", "(", "(", "-", "1", ",", "1", ")", ")", "\n", "\n", "# init subtree mass", "\n", "body_parentid", "=", "self", ".", "body_parentid", "\n", "# subtree com and com_vel", "\n", "for", "i", "in", "xrange", "(", "self", ".", "nbody", "-", "1", ",", "-", "1", ",", "-", "1", ")", ":", "\n", "            ", "if", "i", ">", "0", ":", "\n", "                ", "parent", "=", "body_parentid", "[", "i", "]", "\n", "# add scaled velocities", "\n", "lin_moms", "[", "parent", "]", "+=", "lin_moms", "[", "i", "]", "\n", "# accumulate mass", "\n", "mass", "[", "parent", "]", "+=", "mass", "[", "i", "]", "\n", "", "", "return", "lin_moms", "/", "mass", ".", "reshape", "(", "(", "-", "1", ",", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjcore.MjModel.step": [[79, 81], ["mjlib.mjlib.mjlib.mj_step"], "methods", ["None"], ["", "def", "step", "(", "self", ")", ":", "\n", "        ", "mjlib", ".", "mj_step", "(", "self", ".", "ptr", ",", "self", ".", "data", ".", "ptr", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjcore.MjModel.__del__": [[82, 87], ["mjlib.mjlib.mjlib.mj_deleteModel"], "methods", ["None"], ["", "def", "__del__", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_wrapped", "is", "not", "None", ":", "\n", "# At the very end of the process, mjlib can be unloaded before we are deleted.", "\n", "# At that point, it's okay to leak this memory.", "\n", "            ", "if", "mjlib", ":", "mjlib", ".", "mj_deleteModel", "(", "self", ".", "_wrapped", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjcore.MjModel.body_names": [[88, 93], ["ctypes.addressof", "ctypes.string_at", "mjcore.MjModel.name_bodyadr.flatten", "int"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "body_names", "(", "self", ")", ":", "\n", "        ", "start_addr", "=", "ctypes", ".", "addressof", "(", "self", ".", "names", ".", "contents", ")", "\n", "return", "[", "ctypes", ".", "string_at", "(", "start_addr", "+", "int", "(", "inc", ")", ")", "\n", "for", "inc", "in", "self", ".", "name_bodyadr", ".", "flatten", "(", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjcore.MjModel.joint_names": [[94, 99], ["ctypes.addressof", "ctypes.string_at", "mjcore.MjModel.name_jntadr.flatten", "int"], "methods", ["None"], ["", "@", "property", "\n", "def", "joint_names", "(", "self", ")", ":", "\n", "        ", "start_addr", "=", "ctypes", ".", "addressof", "(", "self", ".", "names", ".", "contents", ")", "\n", "return", "[", "ctypes", ".", "string_at", "(", "start_addr", "+", "int", "(", "inc", ")", ")", "\n", "for", "inc", "in", "self", ".", "name_jntadr", ".", "flatten", "(", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjcore.MjModel.joint_adr": [[100, 115], ["mjlib.mjlib.mjlib.mj_name2id"], "methods", ["None"], ["", "def", "joint_adr", "(", "self", ",", "joint_name", ")", ":", "\n", "        ", "\"\"\"Return (qposadr, qveladr, dof) for the given joint name.\n\n        If dof is 4 or 7, then the last 4 degrees of freedom in qpos represent a\n        unit quaternion.\"\"\"", "\n", "jntadr", "=", "mjlib", ".", "mj_name2id", "(", "self", ".", "ptr", ",", "C", ".", "mjOBJ_JOINT", ",", "joint_name", ")", "\n", "assert", "(", "jntadr", ">=", "0", ")", "\n", "dofmap", "=", "{", "C", ".", "mjJNT_FREE", ":", "7", ",", "\n", "C", ".", "mjJNT_BALL", ":", "4", ",", "\n", "C", ".", "mjJNT_SLIDE", ":", "1", ",", "\n", "C", ".", "mjJNT_HINGE", ":", "1", "}", "\n", "qposadr", "=", "self", ".", "jnt_qposadr", "[", "jntadr", "]", "[", "0", "]", "\n", "qveladr", "=", "self", ".", "jnt_dofadr", "[", "jntadr", "]", "[", "0", "]", "\n", "dof", "=", "dofmap", "[", "self", ".", "jnt_type", "[", "jntadr", "]", "[", "0", "]", "]", "\n", "return", "(", "qposadr", ",", "qveladr", ",", "dof", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjcore.MjModel.geom_names": [[116, 121], ["ctypes.addressof", "ctypes.string_at", "mjcore.MjModel.name_geomadr.flatten", "int"], "methods", ["None"], ["", "@", "property", "\n", "def", "geom_names", "(", "self", ")", ":", "\n", "        ", "start_addr", "=", "ctypes", ".", "addressof", "(", "self", ".", "names", ".", "contents", ")", "\n", "return", "[", "ctypes", ".", "string_at", "(", "start_addr", "+", "int", "(", "inc", ")", ")", "\n", "for", "inc", "in", "self", ".", "name_geomadr", ".", "flatten", "(", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjcore.MjModel.site_names": [[122, 127], ["ctypes.addressof", "ctypes.string_at", "mjcore.MjModel.name_siteadr.flatten", "int"], "methods", ["None"], ["", "@", "property", "\n", "def", "site_names", "(", "self", ")", ":", "\n", "        ", "start_addr", "=", "ctypes", ".", "addressof", "(", "self", ".", "names", ".", "contents", ")", "\n", "return", "[", "ctypes", ".", "string_at", "(", "start_addr", "+", "int", "(", "inc", ")", ")", "\n", "for", "inc", "in", "self", ".", "name_siteadr", ".", "flatten", "(", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjcore.MjModel.mesh_names": [[128, 133], ["ctypes.addressof", "ctypes.string_at", "mjcore.MjModel.name_meshadr.flatten", "int"], "methods", ["None"], ["", "@", "property", "\n", "def", "mesh_names", "(", "self", ")", ":", "\n", "        ", "start_addr", "=", "ctypes", ".", "addressof", "(", "self", ".", "names", ".", "contents", ")", "\n", "return", "[", "ctypes", ".", "string_at", "(", "start_addr", "+", "int", "(", "inc", ")", ")", "\n", "for", "inc", "in", "self", ".", "name_meshadr", ".", "flatten", "(", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjcore.MjModel.numeric_names": [[134, 139], ["ctypes.addressof", "ctypes.string_at", "mjcore.MjModel.name_numericadr.flatten", "int"], "methods", ["None"], ["", "@", "property", "\n", "def", "numeric_names", "(", "self", ")", ":", "\n", "        ", "start_addr", "=", "ctypes", ".", "addressof", "(", "self", ".", "names", ".", "contents", ")", "\n", "return", "[", "ctypes", ".", "string_at", "(", "start_addr", "+", "int", "(", "inc", ")", ")", "\n", "for", "inc", "in", "self", ".", "name_numericadr", ".", "flatten", "(", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjcore.MjModel.actuator_names": [[140, 145], ["ctypes.addressof", "ctypes.string_at", "mjcore.MjModel.name_actuatoradr.flatten", "int"], "methods", ["None"], ["", "@", "property", "\n", "def", "actuator_names", "(", "self", ")", ":", "\n", "        ", "start_addr", "=", "ctypes", ".", "addressof", "(", "self", ".", "names", ".", "contents", ")", "\n", "return", "[", "ctypes", ".", "string_at", "(", "start_addr", "+", "int", "(", "inc", ")", ")", "\n", "for", "inc", "in", "self", ".", "name_actuatoradr", ".", "flatten", "(", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjcore.MjModel.camera_names": [[146, 151], ["ctypes.addressof", "ctypes.string_at", "mjcore.MjModel.name_camadr.flatten", "int"], "methods", ["None"], ["", "@", "property", "\n", "def", "camera_names", "(", "self", ")", ":", "\n", "        ", "start_addr", "=", "ctypes", ".", "addressof", "(", "self", ".", "names", ".", "contents", ")", "\n", "return", "[", "ctypes", ".", "string_at", "(", "start_addr", "+", "int", "(", "inc", ")", ")", "\n", "for", "inc", "in", "self", ".", "name_camadr", ".", "flatten", "(", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjcore.MjData.__init__": [[155, 157], ["mjtypes.MjDataWrapper.__init__"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.__init__"], ["    ", "def", "__init__", "(", "self", ",", "wrapped", ",", "size_src", "=", "None", ")", ":", "\n", "        ", "super", "(", "MjData", ",", "self", ")", ".", "__init__", "(", "wrapped", ",", "size_src", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjcore.MjData.__del__": [[158, 163], ["mjlib.mjlib.mjlib.mj_deleteData"], "methods", ["None"], ["", "def", "__del__", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_wrapped", "is", "not", "None", ":", "\n", "# At the very end of the process, mjlib can be unloaded before we are deleted.", "\n", "# At that point, it's okay to leak this memory.", "\n", "            ", "if", "mjlib", ":", "mjlib", ".", "mj_deleteData", "(", "self", ".", "_wrapped", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjcore.register_license": [[9, 18], ["mjlib.mjlib.mj_activate"], "function", ["None"], ["def", "register_license", "(", "file_path", ")", ":", "\n", "    ", "\"\"\"\n    activates mujoco with license at `file_path`\n\n    this does not check the return code, per usage example at simulate.cpp\n    and test.cpp.\n    \"\"\"", "\n", "result", "=", "mjlib", ".", "mj_activate", "(", "file_path", ")", "\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.glfw._GLFWvidmode.__init__": [[176, 184], ["ctypes.Structure.__init__"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "ctypes", ".", "Structure", ".", "__init__", "(", "self", ")", "\n", "self", ".", "width", "=", "0", "\n", "self", ".", "height", "=", "0", "\n", "self", ".", "red_bits", "=", "0", "\n", "self", ".", "green_bits", "=", "0", "\n", "self", ".", "blue_bits", "=", "0", "\n", "self", ".", "refresh_rate", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.glfw._GLFWvidmode.wrap": [[185, 192], ["None"], "methods", ["None"], ["", "def", "wrap", "(", "self", ",", "video_mode", ")", ":", "\n", "        ", "'''\n        Wraps a nested python sequence.\n        '''", "\n", "size", ",", "bits", ",", "self", ".", "refresh_rate", "=", "video_mode", "\n", "self", ".", "width", ",", "self", ".", "height", "=", "size", "\n", "self", ".", "red_bits", ",", "self", ".", "green_bits", ",", "self", ".", "blue_bits", "=", "bits", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.glfw._GLFWvidmode.unwrap": [[193, 200], ["None"], "methods", ["None"], ["", "def", "unwrap", "(", "self", ")", ":", "\n", "        ", "'''\n        Returns a nested python sequence.\n        '''", "\n", "size", "=", "self", ".", "width", ",", "self", ".", "height", "\n", "bits", "=", "self", ".", "red_bits", ",", "self", ".", "green_bits", ",", "self", ".", "blue_bits", "\n", "return", "size", ",", "bits", ",", "self", ".", "refresh_rate", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.glfw._GLFWgammaramp.__init__": [[212, 221], ["ctypes.Structure.__init__"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "ctypes", ".", "Structure", ".", "__init__", "(", "self", ")", "\n", "self", ".", "red", "=", "None", "\n", "self", ".", "red_array", "=", "None", "\n", "self", ".", "green", "=", "None", "\n", "self", ".", "green_array", "=", "None", "\n", "self", ".", "blue", "=", "None", "\n", "self", ".", "blue_array", "=", "None", "\n", "self", ".", "size", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.glfw._GLFWgammaramp.wrap": [[222, 241], ["min", "ctypes.c_uint", "array_type", "array_type", "array_type", "range", "ctypes.POINTER", "ctypes.cast", "ctypes.cast", "ctypes.cast", "len", "len", "len", "int", "int", "int"], "methods", ["None"], ["", "def", "wrap", "(", "self", ",", "gammaramp", ")", ":", "\n", "        ", "'''\n        Wraps a nested python sequence.\n        '''", "\n", "red", ",", "green", ",", "blue", "=", "gammaramp", "\n", "size", "=", "min", "(", "len", "(", "red", ")", ",", "len", "(", "green", ")", ",", "len", "(", "blue", ")", ")", "\n", "array_type", "=", "ctypes", ".", "c_ushort", "*", "size", "\n", "self", ".", "size", "=", "ctypes", ".", "c_uint", "(", "size", ")", "\n", "self", ".", "red_array", "=", "array_type", "(", ")", "\n", "self", ".", "green_array", "=", "array_type", "(", ")", "\n", "self", ".", "blue_array", "=", "array_type", "(", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "size", ")", ":", "\n", "            ", "self", ".", "red_array", "[", "i", "]", "=", "int", "(", "red", "[", "i", "]", "*", "65535", ")", "\n", "self", ".", "green_array", "[", "i", "]", "=", "int", "(", "green", "[", "i", "]", "*", "65535", ")", "\n", "self", ".", "blue_array", "[", "i", "]", "=", "int", "(", "blue", "[", "i", "]", "*", "65535", ")", "\n", "", "pointer_type", "=", "ctypes", ".", "POINTER", "(", "ctypes", ".", "c_ushort", ")", "\n", "self", ".", "red", "=", "ctypes", ".", "cast", "(", "self", ".", "red_array", ",", "pointer_type", ")", "\n", "self", ".", "green", "=", "ctypes", ".", "cast", "(", "self", ".", "green_array", ",", "pointer_type", ")", "\n", "self", ".", "blue", "=", "ctypes", ".", "cast", "(", "self", ".", "blue_array", ",", "pointer_type", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.glfw._GLFWgammaramp.unwrap": [[242, 250], ["range", "range", "range"], "methods", ["None"], ["", "def", "unwrap", "(", "self", ")", ":", "\n", "        ", "'''\n        Returns a nested python sequence.\n        '''", "\n", "red", "=", "[", "self", ".", "red", "[", "i", "]", "/", "65535.0", "for", "i", "in", "range", "(", "self", ".", "size", ")", "]", "\n", "green", "=", "[", "self", ".", "green", "[", "i", "]", "/", "65535.0", "for", "i", "in", "range", "(", "self", ".", "size", ")", "]", "\n", "blue", "=", "[", "self", ".", "blue", "[", "i", "]", "/", "65535.0", "for", "i", "in", "range", "(", "self", ".", "size", ")", "]", "\n", "return", "red", ",", "green", ",", "blue", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.glfw._find_library_candidates": [[34, 64], ["set", "os.path.join", "glob.iglob", "os.path.realpath", "os.path.basename", "os.path.basename.startswith", "os.path.basename.startswith", "basename_end.startswith", "basename_end.endswith", "all", "len", "set.add", "set.add", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.join", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.startswith", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.startswith", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.startswith", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.endswith", "home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.ListableAPIResource.all"], ["", "def", "_find_library_candidates", "(", "library_names", ",", "\n", "library_file_extensions", ",", "\n", "library_search_paths", ")", ":", "\n", "    ", "'''\n    Finds and returns filenames which might be the library you are looking for.\n    '''", "\n", "candidates", "=", "set", "(", ")", "\n", "for", "library_name", "in", "library_names", ":", "\n", "        ", "for", "search_path", "in", "library_search_paths", ":", "\n", "            ", "glob_query", "=", "os", ".", "path", ".", "join", "(", "search_path", ",", "'*'", "+", "library_name", "+", "'*'", ")", "\n", "for", "filename", "in", "glob", ".", "iglob", "(", "glob_query", ")", ":", "\n", "                ", "filename", "=", "os", ".", "path", ".", "realpath", "(", "filename", ")", "\n", "if", "filename", "in", "candidates", ":", "\n", "                    ", "continue", "\n", "", "basename", "=", "os", ".", "path", ".", "basename", "(", "filename", ")", "\n", "if", "basename", ".", "startswith", "(", "'lib'", "+", "library_name", ")", ":", "\n", "                    ", "basename_end", "=", "basename", "[", "len", "(", "'lib'", "+", "library_name", ")", ":", "]", "\n", "", "elif", "basename", ".", "startswith", "(", "library_name", ")", ":", "\n", "                    ", "basename_end", "=", "basename", "[", "len", "(", "library_name", ")", ":", "]", "\n", "", "else", ":", "\n", "                    ", "continue", "\n", "", "for", "file_extension", "in", "library_file_extensions", ":", "\n", "                    ", "if", "basename_end", ".", "startswith", "(", "file_extension", ")", ":", "\n", "                        ", "if", "basename_end", "[", "len", "(", "file_extension", ")", ":", "]", "[", ":", "1", "]", "in", "(", "''", ",", "'.'", ")", ":", "\n", "                            ", "candidates", ".", "add", "(", "filename", ")", "\n", "", "", "if", "basename_end", ".", "endswith", "(", "file_extension", ")", ":", "\n", "                        ", "basename_middle", "=", "basename_end", "[", ":", "-", "len", "(", "file_extension", ")", "]", "\n", "if", "all", "(", "c", "in", "'0123456789.'", "for", "c", "in", "basename_middle", ")", ":", "\n", "                            ", "candidates", ".", "add", "(", "filename", ")", "\n", "", "", "", "", "", "", "return", "candidates", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.glfw._load_library": [[66, 84], ["sys.platform.startswith", "ctypes.CDLL", "os.path.join", "sys.platform.startswith", "os.path.exists", "RuntimeError", "os.path.abspath", "os.path.join", "sys.platform.startswith", "os.path.join", "RuntimeError"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.startswith", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.join", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.startswith", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.join", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.startswith", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.join"], ["", "def", "_load_library", "(", ")", ":", "\n", "    ", "'''\n    Finds, loads and returns the most recent version of the library.\n    '''", "\n", "path_prefix", "=", "config", ".", "mjpro_path", "\n", "if", "sys", ".", "platform", ".", "startswith", "(", "\"darwin\"", ")", ":", "\n", "        ", "libfile", "=", "os", ".", "path", ".", "join", "(", "path_prefix", ",", "\"bin/libglfw.3.dylib\"", ")", "\n", "", "elif", "sys", ".", "platform", ".", "startswith", "(", "\"linux\"", ")", ":", "\n", "        ", "libfile", "=", "os", ".", "path", ".", "join", "(", "path_prefix", ",", "\"bin/libglfw.so.3\"", ")", "\n", "", "elif", "sys", ".", "platform", ".", "startswith", "(", "\"win\"", ")", ":", "\n", "        ", "libfile", "=", "os", ".", "path", ".", "join", "(", "path_prefix", ",", "\"bin/glfw3.dll\"", ")", "\n", "", "else", ":", "\n", "        ", "raise", "RuntimeError", "(", "\"Unrecognized platform %s\"", "%", "sys", ".", "platform", ")", "\n", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "libfile", ")", ":", "\n", "        ", "raise", "RuntimeError", "(", "\"Missing path: %s. (HINT: you should have unzipped the mjpro131.zip bundle without modification.)\"", "%", "libfile", ")", "\n", "\n", "", "return", "ctypes", ".", "CDLL", "(", "os", ".", "path", ".", "abspath", "(", "libfile", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.glfw._glfw_get_version": [[86, 138], ["subprocess.Popen", "out.strip.strip", "textwrap.dedent", "subprocess.Popen.communicate", "eval", "_to_char_p"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.strip"], ["", "def", "_glfw_get_version", "(", "filename", ")", ":", "\n", "    ", "'''\n    Queries and returns the library version tuple or None by using a\n    subprocess.\n    '''", "\n", "version_checker_source", "=", "\"\"\"\n        import sys\n        import ctypes\n\n        def get_version(library_handle):\n            '''\n            Queries and returns the library version tuple or None.\n            '''\n            major_value = ctypes.c_int(0)\n            major = ctypes.pointer(major_value)\n            minor_value = ctypes.c_int(0)\n            minor = ctypes.pointer(minor_value)\n            rev_value = ctypes.c_int(0)\n            rev = ctypes.pointer(rev_value)\n            if hasattr(library_handle, 'glfwGetVersion'):\n                library_handle.glfwGetVersion(major, minor, rev)\n                version = (major_value.value,\n                           minor_value.value,\n                           rev_value.value)\n                return version\n            else:\n                return None\n\n        try:\n            input_func = raw_input\n        except NameError:\n            input_func = input\n        filename = input_func().strip()\n\n        try:\n            library_handle = ctypes.CDLL(filename)\n        except OSError:\n            pass\n        else:\n            version = get_version(library_handle)\n            print(version)\n    \"\"\"", "\n", "\n", "args", "=", "[", "sys", ".", "executable", ",", "'-c'", ",", "textwrap", ".", "dedent", "(", "version_checker_source", ")", "]", "\n", "process", "=", "subprocess", ".", "Popen", "(", "args", ",", "universal_newlines", "=", "True", ",", "\n", "stdin", "=", "subprocess", ".", "PIPE", ",", "stdout", "=", "subprocess", ".", "PIPE", ")", "\n", "out", "=", "process", ".", "communicate", "(", "_to_char_p", "(", "filename", ")", ")", "[", "0", "]", "\n", "out", "=", "out", ".", "strip", "(", ")", "\n", "if", "out", ":", "\n", "        ", "return", "eval", "(", "out", ")", "\n", "", "else", ":", "\n", "        ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.glfw.init": [[525, 536], ["_getcwd", "_glfw.glfwInit", "os.chdir"], "function", ["None"], ["def", "init", "(", ")", ":", "\n", "    ", "'''\n    Initializes the GLFW library.\n\n    Wrapper for:\n        int glfwInit(void);\n    '''", "\n", "cwd", "=", "_getcwd", "(", ")", "\n", "res", "=", "_glfw", ".", "glfwInit", "(", ")", "\n", "os", ".", "chdir", "(", "cwd", ")", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.glfw.terminate": [[539, 547], ["_glfw.glfwTerminate"], "function", ["None"], ["def", "terminate", "(", ")", ":", "\n", "    ", "'''\n    Terminates the GLFW library.\n\n    Wrapper for:\n        void glfwTerminate(void);\n    '''", "\n", "_glfw", ".", "glfwTerminate", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.glfw.get_version": [[552, 567], ["ctypes.c_int", "ctypes.pointer", "ctypes.c_int", "ctypes.pointer", "ctypes.c_int", "ctypes.pointer", "_glfw.glfwGetVersion"], "function", ["None"], ["def", "get_version", "(", ")", ":", "\n", "    ", "'''\n    Retrieves the version of the GLFW library.\n\n    Wrapper for:\n        void glfwGetVersion(int* major, int* minor, int* rev);\n    '''", "\n", "major_value", "=", "ctypes", ".", "c_int", "(", "0", ")", "\n", "major", "=", "ctypes", ".", "pointer", "(", "major_value", ")", "\n", "minor_value", "=", "ctypes", ".", "c_int", "(", "0", ")", "\n", "minor", "=", "ctypes", ".", "pointer", "(", "minor_value", ")", "\n", "rev_value", "=", "ctypes", ".", "c_int", "(", "0", ")", "\n", "rev", "=", "ctypes", ".", "pointer", "(", "rev_value", ")", "\n", "_glfw", ".", "glfwGetVersion", "(", "major", ",", "minor", ",", "rev", ")", "\n", "return", "major_value", ".", "value", ",", "minor_value", ".", "value", ",", "rev_value", ".", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.glfw.get_version_string": [[570, 578], ["_glfw.glfwGetVersionString"], "function", ["None"], ["def", "get_version_string", "(", ")", ":", "\n", "    ", "'''\n    Returns a string describing the compile-time configuration.\n\n    Wrapper for:\n        const char* glfwGetVersionString(void);\n    '''", "\n", "return", "_glfw", ".", "glfwGetVersionString", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.glfw.set_error_callback": [[582, 599], ["_GLFWerrorfun", "_glfw.glfwSetErrorCallback"], "function", ["None"], ["def", "set_error_callback", "(", "cbfun", ")", ":", "\n", "    ", "'''\n    Sets the error callback.\n\n    Wrapper for:\n        GLFWerrorfun glfwSetErrorCallback(GLFWerrorfun cbfun);\n    '''", "\n", "global", "_error_callback", "\n", "previous_callback", "=", "_error_callback", "\n", "if", "cbfun", "is", "None", ":", "\n", "        ", "cbfun", "=", "0", "\n", "", "c_cbfun", "=", "_GLFWerrorfun", "(", "cbfun", ")", "\n", "_error_callback", "=", "(", "cbfun", ",", "c_cbfun", ")", "\n", "cbfun", "=", "c_cbfun", "\n", "_glfw", ".", "glfwSetErrorCallback", "(", "cbfun", ")", "\n", "if", "previous_callback", "is", "not", "None", "and", "previous_callback", "[", "0", "]", "!=", "0", ":", "\n", "        ", "return", "previous_callback", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.glfw.get_monitors": [[602, 614], ["ctypes.c_int", "ctypes.pointer", "_glfw.glfwGetMonitors", "range"], "function", ["None"], ["def", "get_monitors", "(", ")", ":", "\n", "    ", "'''\n    Returns the currently connected monitors.\n\n    Wrapper for:\n        GLFWmonitor** glfwGetMonitors(int* count);\n    '''", "\n", "count_value", "=", "ctypes", ".", "c_int", "(", "0", ")", "\n", "count", "=", "ctypes", ".", "pointer", "(", "count_value", ")", "\n", "result", "=", "_glfw", ".", "glfwGetMonitors", "(", "count", ")", "\n", "monitors", "=", "[", "result", "[", "i", "]", "for", "i", "in", "range", "(", "count_value", ".", "value", ")", "]", "\n", "return", "monitors", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.glfw.get_primary_monitor": [[617, 625], ["_glfw.glfwGetPrimaryMonitor"], "function", ["None"], ["def", "get_primary_monitor", "(", ")", ":", "\n", "    ", "'''\n    Returns the primary monitor.\n\n    Wrapper for:\n        GLFWmonitor* glfwGetPrimaryMonitor(void);\n    '''", "\n", "return", "_glfw", ".", "glfwGetPrimaryMonitor", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.glfw.get_monitor_pos": [[630, 643], ["ctypes.c_int", "ctypes.pointer", "ctypes.c_int", "ctypes.pointer", "_glfw.glfwGetMonitorPos"], "function", ["None"], ["def", "get_monitor_pos", "(", "monitor", ")", ":", "\n", "    ", "'''\n    Returns the position of the monitor's viewport on the virtual screen.\n\n    Wrapper for:\n        void glfwGetMonitorPos(GLFWmonitor* monitor, int* xpos, int* ypos);\n    '''", "\n", "xpos_value", "=", "ctypes", ".", "c_int", "(", "0", ")", "\n", "xpos", "=", "ctypes", ".", "pointer", "(", "xpos_value", ")", "\n", "ypos_value", "=", "ctypes", ".", "c_int", "(", "0", ")", "\n", "ypos", "=", "ctypes", ".", "pointer", "(", "ypos_value", ")", "\n", "_glfw", ".", "glfwGetMonitorPos", "(", "monitor", ",", "xpos", ",", "ypos", ")", "\n", "return", "xpos_value", ".", "value", ",", "ypos_value", ".", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.glfw.get_monitor_physical_size": [[648, 661], ["ctypes.c_int", "ctypes.pointer", "ctypes.c_int", "ctypes.pointer", "_glfw.glfwGetMonitorPhysicalSize"], "function", ["None"], ["def", "get_monitor_physical_size", "(", "monitor", ")", ":", "\n", "    ", "'''\n    Returns the physical size of the monitor.\n\n    Wrapper for:\n        void glfwGetMonitorPhysicalSize(GLFWmonitor* monitor, int* width, int* height);\n    '''", "\n", "width_value", "=", "ctypes", ".", "c_int", "(", "0", ")", "\n", "width", "=", "ctypes", ".", "pointer", "(", "width_value", ")", "\n", "height_value", "=", "ctypes", ".", "c_int", "(", "0", ")", "\n", "height", "=", "ctypes", ".", "pointer", "(", "height_value", ")", "\n", "_glfw", ".", "glfwGetMonitorPhysicalSize", "(", "monitor", ",", "width", ",", "height", ")", "\n", "return", "width_value", ".", "value", ",", "height_value", ".", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.glfw.get_monitor_name": [[664, 672], ["_glfw.glfwGetMonitorName"], "function", ["None"], ["def", "get_monitor_name", "(", "monitor", ")", ":", "\n", "    ", "'''\n    Returns the name of the specified monitor.\n\n    Wrapper for:\n        const char* glfwGetMonitorName(GLFWmonitor* monitor);\n    '''", "\n", "return", "_glfw", ".", "glfwGetMonitorName", "(", "monitor", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.glfw.set_monitor_callback": [[676, 693], ["_GLFWmonitorfun", "_glfw.glfwSetMonitorCallback"], "function", ["None"], ["def", "set_monitor_callback", "(", "cbfun", ")", ":", "\n", "    ", "'''\n    Sets the monitor configuration callback.\n\n    Wrapper for:\n        GLFWmonitorfun glfwSetMonitorCallback(GLFWmonitorfun cbfun);\n    '''", "\n", "global", "_monitor_callback", "\n", "previous_callback", "=", "_monitor_callback", "\n", "if", "cbfun", "is", "None", ":", "\n", "        ", "cbfun", "=", "0", "\n", "", "c_cbfun", "=", "_GLFWmonitorfun", "(", "cbfun", ")", "\n", "_monitor_callback", "=", "(", "cbfun", ",", "c_cbfun", ")", "\n", "cbfun", "=", "c_cbfun", "\n", "_glfw", ".", "glfwSetMonitorCallback", "(", "cbfun", ")", "\n", "if", "previous_callback", "is", "not", "None", "and", "previous_callback", "[", "0", "]", "!=", "0", ":", "\n", "        ", "return", "previous_callback", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.glfw.get_video_modes": [[697, 709], ["ctypes.c_int", "ctypes.pointer", "_glfw.glfwGetVideoModes", "result[].unwrap", "range"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.glfw._GLFWgammaramp.unwrap"], ["def", "get_video_modes", "(", "monitor", ")", ":", "\n", "    ", "'''\n    Returns the available video modes for the specified monitor.\n\n    Wrapper for:\n        const GLFWvidmode* glfwGetVideoModes(GLFWmonitor* monitor, int* count);\n    '''", "\n", "count_value", "=", "ctypes", ".", "c_int", "(", "0", ")", "\n", "count", "=", "ctypes", ".", "pointer", "(", "count_value", ")", "\n", "result", "=", "_glfw", ".", "glfwGetVideoModes", "(", "monitor", ",", "count", ")", "\n", "videomodes", "=", "[", "result", "[", "i", "]", ".", "unwrap", "(", ")", "for", "i", "in", "range", "(", "count_value", ".", "value", ")", "]", "\n", "return", "videomodes", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.glfw.get_video_mode": [[712, 721], ["videomode.unwrap", "_glfw.glfwGetVideoMode"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.glfw._GLFWgammaramp.unwrap"], ["def", "get_video_mode", "(", "monitor", ")", ":", "\n", "    ", "'''\n    Returns the current mode of the specified monitor.\n\n    Wrapper for:\n        const GLFWvidmode* glfwGetVideoMode(GLFWmonitor* monitor);\n    '''", "\n", "videomode", "=", "_glfw", ".", "glfwGetVideoMode", "(", "monitor", ")", ".", "contents", "\n", "return", "videomode", ".", "unwrap", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.glfw.set_gamma": [[725, 733], ["_glfw.glfwSetGamma"], "function", ["None"], ["def", "set_gamma", "(", "monitor", ",", "gamma", ")", ":", "\n", "    ", "'''\n    Generates a gamma ramp and sets it for the specified monitor.\n\n    Wrapper for:\n        void glfwSetGamma(GLFWmonitor* monitor, float gamma);\n    '''", "\n", "_glfw", ".", "glfwSetGamma", "(", "monitor", ",", "gamma", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.glfw.get_gamma_ramp": [[736, 745], ["gammaramp.unwrap", "_glfw.glfwGetGammaRamp"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.glfw._GLFWgammaramp.unwrap"], ["def", "get_gamma_ramp", "(", "monitor", ")", ":", "\n", "    ", "'''\n    Retrieves the current gamma ramp for the specified monitor.\n\n    Wrapper for:\n        const GLFWgammaramp* glfwGetGammaRamp(GLFWmonitor* monitor);\n    '''", "\n", "gammaramp", "=", "_glfw", ".", "glfwGetGammaRamp", "(", "monitor", ")", ".", "contents", "\n", "return", "gammaramp", ".", "unwrap", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.glfw.set_gamma_ramp": [[749, 759], ["glfw._GLFWgammaramp", "glfw._GLFWgammaramp.wrap", "_glfw.glfwSetGammaRamp", "ctypes.pointer"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.glfw._GLFWgammaramp.wrap"], ["def", "set_gamma_ramp", "(", "monitor", ",", "ramp", ")", ":", "\n", "    ", "'''\n    Sets the current gamma ramp for the specified monitor.\n\n    Wrapper for:\n        void glfwSetGammaRamp(GLFWmonitor* monitor, const GLFWgammaramp* ramp);\n    '''", "\n", "gammaramp", "=", "_GLFWgammaramp", "(", ")", "\n", "gammaramp", ".", "wrap", "(", "ramp", ")", "\n", "_glfw", ".", "glfwSetGammaRamp", "(", "monitor", ",", "ctypes", ".", "pointer", "(", "gammaramp", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.glfw.default_window_hints": [[762, 770], ["_glfw.glfwDefaultWindowHints"], "function", ["None"], ["def", "default_window_hints", "(", ")", ":", "\n", "    ", "'''\n    Resets all window hints to their default values.\n\n    Wrapper for:\n        void glfwDefaultWindowHints(void);\n    '''", "\n", "_glfw", ".", "glfwDefaultWindowHints", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.glfw.window_hint": [[774, 782], ["_glfw.glfwWindowHint"], "function", ["None"], ["def", "window_hint", "(", "target", ",", "hint", ")", ":", "\n", "    ", "'''\n    Sets the specified window hint to the desired value.\n\n    Wrapper for:\n        void glfwWindowHint(int target, int hint);\n    '''", "\n", "_glfw", ".", "glfwWindowHint", "(", "target", ",", "hint", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.glfw.create_window": [[789, 798], ["_glfw.glfwCreateWindow", "_to_char_p"], "function", ["None"], ["def", "create_window", "(", "width", ",", "height", ",", "title", ",", "monitor", ",", "share", ")", ":", "\n", "    ", "'''\n    Creates a window and its associated context.\n\n    Wrapper for:\n        GLFWwindow* glfwCreateWindow(int width, int height, const char* title, GLFWmonitor* monitor, GLFWwindow* share);\n    '''", "\n", "return", "_glfw", ".", "glfwCreateWindow", "(", "width", ",", "height", ",", "_to_char_p", "(", "title", ")", ",", "\n", "monitor", ",", "share", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.glfw.destroy_window": [[801, 814], ["_glfw.glfwDestroyWindow", "ctypes.cast", "ctypes.pointer", "ctypes.POINTER"], "function", ["None"], ["def", "destroy_window", "(", "window", ")", ":", "\n", "    ", "'''\n    Destroys the specified window and its context.\n\n    Wrapper for:\n        void glfwDestroyWindow(GLFWwindow* window);\n    '''", "\n", "_glfw", ".", "glfwDestroyWindow", "(", "window", ")", "\n", "window_addr", "=", "ctypes", ".", "cast", "(", "ctypes", ".", "pointer", "(", "window", ")", ",", "\n", "ctypes", ".", "POINTER", "(", "ctypes", ".", "c_ulong", ")", ")", ".", "contents", ".", "value", "\n", "for", "callback_repository", "in", "_callback_repositories", ":", "\n", "        ", "if", "window_addr", "in", "callback_repository", ":", "\n", "            ", "del", "callback_repository", "[", "window_addr", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.glfw.window_should_close": [[817, 825], ["_glfw.glfwWindowShouldClose"], "function", ["None"], ["def", "window_should_close", "(", "window", ")", ":", "\n", "    ", "'''\n    Checks the close flag of the specified window.\n\n    Wrapper for:\n        int glfwWindowShouldClose(GLFWwindow* window);\n    '''", "\n", "return", "_glfw", ".", "glfwWindowShouldClose", "(", "window", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.glfw.set_window_should_close": [[829, 837], ["_glfw.glfwSetWindowShouldClose"], "function", ["None"], ["def", "set_window_should_close", "(", "window", ",", "value", ")", ":", "\n", "    ", "'''\n    Sets the close flag of the specified window.\n\n    Wrapper for:\n        void glfwSetWindowShouldClose(GLFWwindow* window, int value);\n    '''", "\n", "_glfw", ".", "glfwSetWindowShouldClose", "(", "window", ",", "value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.glfw.set_window_title": [[841, 849], ["_glfw.glfwSetWindowTitle", "_to_char_p"], "function", ["None"], ["def", "set_window_title", "(", "window", ",", "title", ")", ":", "\n", "    ", "'''\n    Sets the title of the specified window.\n\n    Wrapper for:\n        void glfwSetWindowTitle(GLFWwindow* window, const char* title);\n    '''", "\n", "_glfw", ".", "glfwSetWindowTitle", "(", "window", ",", "_to_char_p", "(", "title", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.glfw.get_window_pos": [[854, 867], ["ctypes.c_int", "ctypes.pointer", "ctypes.c_int", "ctypes.pointer", "_glfw.glfwGetWindowPos"], "function", ["None"], ["def", "get_window_pos", "(", "window", ")", ":", "\n", "    ", "'''\n    Retrieves the position of the client area of the specified window.\n\n    Wrapper for:\n        void glfwGetWindowPos(GLFWwindow* window, int* xpos, int* ypos);\n    '''", "\n", "xpos_value", "=", "ctypes", ".", "c_int", "(", "0", ")", "\n", "xpos", "=", "ctypes", ".", "pointer", "(", "xpos_value", ")", "\n", "ypos_value", "=", "ctypes", ".", "c_int", "(", "0", ")", "\n", "ypos", "=", "ctypes", ".", "pointer", "(", "ypos_value", ")", "\n", "_glfw", ".", "glfwGetWindowPos", "(", "window", ",", "xpos", ",", "ypos", ")", "\n", "return", "xpos_value", ".", "value", ",", "ypos_value", ".", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.glfw.set_window_pos": [[872, 880], ["_glfw.glfwSetWindowPos"], "function", ["None"], ["def", "set_window_pos", "(", "window", ",", "xpos", ",", "ypos", ")", ":", "\n", "    ", "'''\n    Sets the position of the client area of the specified window.\n\n    Wrapper for:\n        void glfwSetWindowPos(GLFWwindow* window, int xpos, int ypos);\n    '''", "\n", "_glfw", ".", "glfwSetWindowPos", "(", "window", ",", "xpos", ",", "ypos", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.glfw.get_window_size": [[885, 898], ["ctypes.c_int", "ctypes.pointer", "ctypes.c_int", "ctypes.pointer", "_glfw.glfwGetWindowSize"], "function", ["None"], ["def", "get_window_size", "(", "window", ")", ":", "\n", "    ", "'''\n    Retrieves the size of the client area of the specified window.\n\n    Wrapper for:\n        void glfwGetWindowSize(GLFWwindow* window, int* width, int* height);\n    '''", "\n", "width_value", "=", "ctypes", ".", "c_int", "(", "0", ")", "\n", "width", "=", "ctypes", ".", "pointer", "(", "width_value", ")", "\n", "height_value", "=", "ctypes", ".", "c_int", "(", "0", ")", "\n", "height", "=", "ctypes", ".", "pointer", "(", "height_value", ")", "\n", "_glfw", ".", "glfwGetWindowSize", "(", "window", ",", "width", ",", "height", ")", "\n", "return", "width_value", ".", "value", ",", "height_value", ".", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.glfw.set_window_size": [[903, 911], ["_glfw.glfwSetWindowSize"], "function", ["None"], ["def", "set_window_size", "(", "window", ",", "width", ",", "height", ")", ":", "\n", "    ", "'''\n    Sets the size of the client area of the specified window.\n\n    Wrapper for:\n        void glfwSetWindowSize(GLFWwindow* window, int width, int height);\n    '''", "\n", "_glfw", ".", "glfwSetWindowSize", "(", "window", ",", "width", ",", "height", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.glfw.get_framebuffer_size": [[916, 929], ["ctypes.c_int", "ctypes.pointer", "ctypes.c_int", "ctypes.pointer", "_glfw.glfwGetFramebufferSize"], "function", ["None"], ["def", "get_framebuffer_size", "(", "window", ")", ":", "\n", "    ", "'''\n    Retrieves the size of the framebuffer of the specified window.\n\n    Wrapper for:\n        void glfwGetFramebufferSize(GLFWwindow* window, int* width, int* height);\n    '''", "\n", "width_value", "=", "ctypes", ".", "c_int", "(", "0", ")", "\n", "width", "=", "ctypes", ".", "pointer", "(", "width_value", ")", "\n", "height_value", "=", "ctypes", ".", "c_int", "(", "0", ")", "\n", "height", "=", "ctypes", ".", "pointer", "(", "height_value", ")", "\n", "_glfw", ".", "glfwGetFramebufferSize", "(", "window", ",", "width", ",", "height", ")", "\n", "return", "width_value", ".", "value", ",", "height_value", ".", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.glfw.iconify_window": [[932, 940], ["_glfw.glfwIconifyWindow"], "function", ["None"], ["def", "iconify_window", "(", "window", ")", ":", "\n", "    ", "'''\n    Iconifies the specified window.\n\n    Wrapper for:\n        void glfwIconifyWindow(GLFWwindow* window);\n    '''", "\n", "_glfw", ".", "glfwIconifyWindow", "(", "window", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.glfw.restore_window": [[943, 951], ["_glfw.glfwRestoreWindow"], "function", ["None"], ["def", "restore_window", "(", "window", ")", ":", "\n", "    ", "'''\n    Restores the specified window.\n\n    Wrapper for:\n        void glfwRestoreWindow(GLFWwindow* window);\n    '''", "\n", "_glfw", ".", "glfwRestoreWindow", "(", "window", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.glfw.show_window": [[954, 962], ["_glfw.glfwShowWindow"], "function", ["None"], ["def", "show_window", "(", "window", ")", ":", "\n", "    ", "'''\n    Makes the specified window visible.\n\n    Wrapper for:\n        void glfwShowWindow(GLFWwindow* window);\n    '''", "\n", "_glfw", ".", "glfwShowWindow", "(", "window", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.glfw.hide_window": [[965, 973], ["_glfw.glfwHideWindow"], "function", ["None"], ["def", "hide_window", "(", "window", ")", ":", "\n", "    ", "'''\n    Hides the specified window.\n\n    Wrapper for:\n        void glfwHideWindow(GLFWwindow* window);\n    '''", "\n", "_glfw", ".", "glfwHideWindow", "(", "window", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.glfw.get_window_monitor": [[976, 984], ["_glfw.glfwGetWindowMonitor"], "function", ["None"], ["def", "get_window_monitor", "(", "window", ")", ":", "\n", "    ", "'''\n    Returns the monitor that the window uses for full screen mode.\n\n    Wrapper for:\n        GLFWmonitor* glfwGetWindowMonitor(GLFWwindow* window);\n    '''", "\n", "return", "_glfw", ".", "glfwGetWindowMonitor", "(", "window", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.glfw.get_window_attrib": [[988, 996], ["_glfw.glfwGetWindowAttrib"], "function", ["None"], ["def", "get_window_attrib", "(", "window", ",", "attrib", ")", ":", "\n", "    ", "'''\n    Returns an attribute of the specified window.\n\n    Wrapper for:\n        int glfwGetWindowAttrib(GLFWwindow* window, int attrib);\n    '''", "\n", "return", "_glfw", ".", "glfwGetWindowAttrib", "(", "window", ",", "attrib", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.glfw.set_window_user_pointer": [[1000, 1008], ["_glfw.glfwSetWindowUserPointer"], "function", ["None"], ["def", "set_window_user_pointer", "(", "window", ",", "pointer", ")", ":", "\n", "    ", "'''\n    Sets the user pointer of the specified window.\n\n    Wrapper for:\n        void glfwSetWindowUserPointer(GLFWwindow* window, void* pointer);\n    '''", "\n", "_glfw", ".", "glfwSetWindowUserPointer", "(", "window", ",", "pointer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.glfw.get_window_user_pointer": [[1011, 1019], ["_glfw.glfwGetWindowUserPointer"], "function", ["None"], ["def", "get_window_user_pointer", "(", "window", ")", ":", "\n", "    ", "'''\n    Returns the user pointer of the specified window.\n\n    Wrapper for:\n        void* glfwGetWindowUserPointer(GLFWwindow* window);\n    '''", "\n", "return", "_glfw", ".", "glfwGetWindowUserPointer", "(", "window", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.glfw.set_window_pos_callback": [[1025, 1046], ["_GLFWwindowposfun", "_glfw.glfwSetWindowPosCallback", "ctypes.cast", "ctypes.pointer", "ctypes.POINTER"], "function", ["None"], ["def", "set_window_pos_callback", "(", "window", ",", "cbfun", ")", ":", "\n", "    ", "'''\n    Sets the position callback for the specified window.\n\n    Wrapper for:\n        GLFWwindowposfun glfwSetWindowPosCallback(GLFWwindow* window, GLFWwindowposfun cbfun);\n    '''", "\n", "window_addr", "=", "ctypes", ".", "cast", "(", "ctypes", ".", "pointer", "(", "window", ")", ",", "\n", "ctypes", ".", "POINTER", "(", "ctypes", ".", "c_long", ")", ")", ".", "contents", ".", "value", "\n", "if", "window_addr", "in", "_window_pos_callback_repository", ":", "\n", "        ", "previous_callback", "=", "_window_pos_callback_repository", "[", "window_addr", "]", "\n", "", "else", ":", "\n", "        ", "previous_callback", "=", "None", "\n", "", "if", "cbfun", "is", "None", ":", "\n", "        ", "cbfun", "=", "0", "\n", "", "c_cbfun", "=", "_GLFWwindowposfun", "(", "cbfun", ")", "\n", "_window_pos_callback_repository", "[", "window_addr", "]", "=", "(", "cbfun", ",", "c_cbfun", ")", "\n", "cbfun", "=", "c_cbfun", "\n", "_glfw", ".", "glfwSetWindowPosCallback", "(", "window", ",", "cbfun", ")", "\n", "if", "previous_callback", "is", "not", "None", "and", "previous_callback", "[", "0", "]", "!=", "0", ":", "\n", "        ", "return", "previous_callback", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.glfw.set_window_size_callback": [[1052, 1073], ["_GLFWwindowsizefun", "_glfw.glfwSetWindowSizeCallback", "ctypes.cast", "ctypes.pointer", "ctypes.POINTER"], "function", ["None"], ["def", "set_window_size_callback", "(", "window", ",", "cbfun", ")", ":", "\n", "    ", "'''\n    Sets the size callback for the specified window.\n\n    Wrapper for:\n        GLFWwindowsizefun glfwSetWindowSizeCallback(GLFWwindow* window, GLFWwindowsizefun cbfun);\n    '''", "\n", "window_addr", "=", "ctypes", ".", "cast", "(", "ctypes", ".", "pointer", "(", "window", ")", ",", "\n", "ctypes", ".", "POINTER", "(", "ctypes", ".", "c_long", ")", ")", ".", "contents", ".", "value", "\n", "if", "window_addr", "in", "_window_size_callback_repository", ":", "\n", "        ", "previous_callback", "=", "_window_size_callback_repository", "[", "window_addr", "]", "\n", "", "else", ":", "\n", "        ", "previous_callback", "=", "None", "\n", "", "if", "cbfun", "is", "None", ":", "\n", "        ", "cbfun", "=", "0", "\n", "", "c_cbfun", "=", "_GLFWwindowsizefun", "(", "cbfun", ")", "\n", "_window_size_callback_repository", "[", "window_addr", "]", "=", "(", "cbfun", ",", "c_cbfun", ")", "\n", "cbfun", "=", "c_cbfun", "\n", "_glfw", ".", "glfwSetWindowSizeCallback", "(", "window", ",", "cbfun", ")", "\n", "if", "previous_callback", "is", "not", "None", "and", "previous_callback", "[", "0", "]", "!=", "0", ":", "\n", "        ", "return", "previous_callback", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.glfw.set_window_close_callback": [[1079, 1100], ["_GLFWwindowclosefun", "_glfw.glfwSetWindowCloseCallback", "ctypes.cast", "ctypes.pointer", "ctypes.POINTER"], "function", ["None"], ["def", "set_window_close_callback", "(", "window", ",", "cbfun", ")", ":", "\n", "    ", "'''\n    Sets the close callback for the specified window.\n\n    Wrapper for:\n        GLFWwindowclosefun glfwSetWindowCloseCallback(GLFWwindow* window, GLFWwindowclosefun cbfun);\n    '''", "\n", "window_addr", "=", "ctypes", ".", "cast", "(", "ctypes", ".", "pointer", "(", "window", ")", ",", "\n", "ctypes", ".", "POINTER", "(", "ctypes", ".", "c_long", ")", ")", ".", "contents", ".", "value", "\n", "if", "window_addr", "in", "_window_close_callback_repository", ":", "\n", "        ", "previous_callback", "=", "_window_close_callback_repository", "[", "window_addr", "]", "\n", "", "else", ":", "\n", "        ", "previous_callback", "=", "None", "\n", "", "if", "cbfun", "is", "None", ":", "\n", "        ", "cbfun", "=", "0", "\n", "", "c_cbfun", "=", "_GLFWwindowclosefun", "(", "cbfun", ")", "\n", "_window_close_callback_repository", "[", "window_addr", "]", "=", "(", "cbfun", ",", "c_cbfun", ")", "\n", "cbfun", "=", "c_cbfun", "\n", "_glfw", ".", "glfwSetWindowCloseCallback", "(", "window", ",", "cbfun", ")", "\n", "if", "previous_callback", "is", "not", "None", "and", "previous_callback", "[", "0", "]", "!=", "0", ":", "\n", "        ", "return", "previous_callback", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.glfw.set_window_refresh_callback": [[1106, 1127], ["_GLFWwindowrefreshfun", "_glfw.glfwSetWindowRefreshCallback", "ctypes.cast", "ctypes.pointer", "ctypes.POINTER"], "function", ["None"], ["def", "set_window_refresh_callback", "(", "window", ",", "cbfun", ")", ":", "\n", "    ", "'''\n    Sets the refresh callback for the specified window.\n\n    Wrapper for:\n        GLFWwindowrefreshfun glfwSetWindowRefreshCallback(GLFWwindow* window, GLFWwindowrefreshfun cbfun);\n    '''", "\n", "window_addr", "=", "ctypes", ".", "cast", "(", "ctypes", ".", "pointer", "(", "window", ")", ",", "\n", "ctypes", ".", "POINTER", "(", "ctypes", ".", "c_long", ")", ")", ".", "contents", ".", "value", "\n", "if", "window_addr", "in", "_window_refresh_callback_repository", ":", "\n", "        ", "previous_callback", "=", "_window_refresh_callback_repository", "[", "window_addr", "]", "\n", "", "else", ":", "\n", "        ", "previous_callback", "=", "None", "\n", "", "if", "cbfun", "is", "None", ":", "\n", "        ", "cbfun", "=", "0", "\n", "", "c_cbfun", "=", "_GLFWwindowrefreshfun", "(", "cbfun", ")", "\n", "_window_refresh_callback_repository", "[", "window_addr", "]", "=", "(", "cbfun", ",", "c_cbfun", ")", "\n", "cbfun", "=", "c_cbfun", "\n", "_glfw", ".", "glfwSetWindowRefreshCallback", "(", "window", ",", "cbfun", ")", "\n", "if", "previous_callback", "is", "not", "None", "and", "previous_callback", "[", "0", "]", "!=", "0", ":", "\n", "        ", "return", "previous_callback", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.glfw.set_window_focus_callback": [[1133, 1154], ["_GLFWwindowfocusfun", "_glfw.glfwSetWindowFocusCallback", "ctypes.cast", "ctypes.pointer", "ctypes.POINTER"], "function", ["None"], ["def", "set_window_focus_callback", "(", "window", ",", "cbfun", ")", ":", "\n", "    ", "'''\n    Sets the focus callback for the specified window.\n\n    Wrapper for:\n        GLFWwindowfocusfun glfwSetWindowFocusCallback(GLFWwindow* window, GLFWwindowfocusfun cbfun);\n    '''", "\n", "window_addr", "=", "ctypes", ".", "cast", "(", "ctypes", ".", "pointer", "(", "window", ")", ",", "\n", "ctypes", ".", "POINTER", "(", "ctypes", ".", "c_long", ")", ")", ".", "contents", ".", "value", "\n", "if", "window_addr", "in", "_window_focus_callback_repository", ":", "\n", "        ", "previous_callback", "=", "_window_focus_callback_repository", "[", "window_addr", "]", "\n", "", "else", ":", "\n", "        ", "previous_callback", "=", "None", "\n", "", "if", "cbfun", "is", "None", ":", "\n", "        ", "cbfun", "=", "0", "\n", "", "c_cbfun", "=", "_GLFWwindowfocusfun", "(", "cbfun", ")", "\n", "_window_focus_callback_repository", "[", "window_addr", "]", "=", "(", "cbfun", ",", "c_cbfun", ")", "\n", "cbfun", "=", "c_cbfun", "\n", "_glfw", ".", "glfwSetWindowFocusCallback", "(", "window", ",", "cbfun", ")", "\n", "if", "previous_callback", "is", "not", "None", "and", "previous_callback", "[", "0", "]", "!=", "0", ":", "\n", "        ", "return", "previous_callback", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.glfw.set_window_iconify_callback": [[1160, 1181], ["_GLFWwindowiconifyfun", "_glfw.glfwSetWindowIconifyCallback", "ctypes.cast", "ctypes.pointer", "ctypes.POINTER"], "function", ["None"], ["def", "set_window_iconify_callback", "(", "window", ",", "cbfun", ")", ":", "\n", "    ", "'''\n    Sets the iconify callback for the specified window.\n\n    Wrapper for:\n        GLFWwindowiconifyfun glfwSetWindowIconifyCallback(GLFWwindow* window, GLFWwindowiconifyfun cbfun);\n    '''", "\n", "window_addr", "=", "ctypes", ".", "cast", "(", "ctypes", ".", "pointer", "(", "window", ")", ",", "\n", "ctypes", ".", "POINTER", "(", "ctypes", ".", "c_long", ")", ")", ".", "contents", ".", "value", "\n", "if", "window_addr", "in", "_window_iconify_callback_repository", ":", "\n", "        ", "previous_callback", "=", "_window_iconify_callback_repository", "[", "window_addr", "]", "\n", "", "else", ":", "\n", "        ", "previous_callback", "=", "None", "\n", "", "if", "cbfun", "is", "None", ":", "\n", "        ", "cbfun", "=", "0", "\n", "", "c_cbfun", "=", "_GLFWwindowiconifyfun", "(", "cbfun", ")", "\n", "_window_iconify_callback_repository", "[", "window_addr", "]", "=", "(", "cbfun", ",", "c_cbfun", ")", "\n", "cbfun", "=", "c_cbfun", "\n", "_glfw", ".", "glfwSetWindowIconifyCallback", "(", "window", ",", "cbfun", ")", "\n", "if", "previous_callback", "is", "not", "None", "and", "previous_callback", "[", "0", "]", "!=", "0", ":", "\n", "        ", "return", "previous_callback", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.glfw.set_framebuffer_size_callback": [[1187, 1208], ["_GLFWframebuffersizefun", "_glfw.glfwSetFramebufferSizeCallback", "ctypes.cast", "ctypes.pointer", "ctypes.POINTER"], "function", ["None"], ["def", "set_framebuffer_size_callback", "(", "window", ",", "cbfun", ")", ":", "\n", "    ", "'''\n    Sets the framebuffer resize callback for the specified window.\n\n    Wrapper for:\n        GLFWframebuffersizefun glfwSetFramebufferSizeCallback(GLFWwindow* window, GLFWframebuffersizefun cbfun);\n    '''", "\n", "window_addr", "=", "ctypes", ".", "cast", "(", "ctypes", ".", "pointer", "(", "window", ")", ",", "\n", "ctypes", ".", "POINTER", "(", "ctypes", ".", "c_long", ")", ")", ".", "contents", ".", "value", "\n", "if", "window_addr", "in", "_framebuffer_size_callback_repository", ":", "\n", "        ", "previous_callback", "=", "_framebuffer_size_callback_repository", "[", "window_addr", "]", "\n", "", "else", ":", "\n", "        ", "previous_callback", "=", "None", "\n", "", "if", "cbfun", "is", "None", ":", "\n", "        ", "cbfun", "=", "0", "\n", "", "c_cbfun", "=", "_GLFWframebuffersizefun", "(", "cbfun", ")", "\n", "_framebuffer_size_callback_repository", "[", "window_addr", "]", "=", "(", "cbfun", ",", "c_cbfun", ")", "\n", "cbfun", "=", "c_cbfun", "\n", "_glfw", ".", "glfwSetFramebufferSizeCallback", "(", "window", ",", "cbfun", ")", "\n", "if", "previous_callback", "is", "not", "None", "and", "previous_callback", "[", "0", "]", "!=", "0", ":", "\n", "        ", "return", "previous_callback", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.glfw.poll_events": [[1211, 1219], ["_glfw.glfwPollEvents"], "function", ["None"], ["def", "poll_events", "(", ")", ":", "\n", "    ", "'''\n    Processes all pending events.\n\n    Wrapper for:\n        void glfwPollEvents(void);\n    '''", "\n", "_glfw", ".", "glfwPollEvents", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.glfw.wait_events": [[1222, 1230], ["_glfw.glfwWaitEvents"], "function", ["None"], ["def", "wait_events", "(", ")", ":", "\n", "    ", "'''\n    Waits until events are pending and processes them.\n\n    Wrapper for:\n        void glfwWaitEvents(void);\n    '''", "\n", "_glfw", ".", "glfwWaitEvents", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.glfw.get_input_mode": [[1234, 1242], ["_glfw.glfwGetInputMode"], "function", ["None"], ["def", "get_input_mode", "(", "window", ",", "mode", ")", ":", "\n", "    ", "'''\n    Returns the value of an input option for the specified window.\n\n    Wrapper for:\n        int glfwGetInputMode(GLFWwindow* window, int mode);\n    '''", "\n", "return", "_glfw", ".", "glfwGetInputMode", "(", "window", ",", "mode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.glfw.set_input_mode": [[1247, 1259], ["_glfw.glfwSetInputMode"], "function", ["None"], ["def", "set_input_mode", "(", "window", ",", "mode", ",", "value", ")", ":", "\n", "    ", "'''\n    Sets an input option for the specified window.\n    @param[in] window The window whose input mode to set.\n    @param[in] mode One of `GLFW_CURSOR`, `GLFW_STICKY_KEYS` or\n    `GLFW_STICKY_MOUSE_BUTTONS`.\n    @param[in] value The new value of the specified input mode.\n\n    Wrapper for:\n        void glfwSetInputMode(GLFWwindow* window, int mode, int value);\n    '''", "\n", "_glfw", ".", "glfwSetInputMode", "(", "window", ",", "mode", ",", "value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.glfw.get_key": [[1263, 1272], ["_glfw.glfwGetKey"], "function", ["None"], ["def", "get_key", "(", "window", ",", "key", ")", ":", "\n", "    ", "'''\n    Returns the last reported state of a keyboard key for the specified\n    window.\n\n    Wrapper for:\n        int glfwGetKey(GLFWwindow* window, int key);\n    '''", "\n", "return", "_glfw", ".", "glfwGetKey", "(", "window", ",", "key", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.glfw.get_mouse_button": [[1276, 1285], ["_glfw.glfwGetMouseButton"], "function", ["None"], ["def", "get_mouse_button", "(", "window", ",", "button", ")", ":", "\n", "    ", "'''\n    Returns the last reported state of a mouse button for the specified\n    window.\n\n    Wrapper for:\n        int glfwGetMouseButton(GLFWwindow* window, int button);\n    '''", "\n", "return", "_glfw", ".", "glfwGetMouseButton", "(", "window", ",", "button", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.glfw.get_cursor_pos": [[1290, 1304], ["ctypes.c_double", "ctypes.pointer", "ctypes.c_double", "ctypes.pointer", "_glfw.glfwGetCursorPos"], "function", ["None"], ["def", "get_cursor_pos", "(", "window", ")", ":", "\n", "    ", "'''\n    Retrieves the last reported cursor position, relative to the client\n    area of the window.\n\n    Wrapper for:\n        void glfwGetCursorPos(GLFWwindow* window, double* xpos, double* ypos);\n    '''", "\n", "xpos_value", "=", "ctypes", ".", "c_double", "(", "0.0", ")", "\n", "xpos", "=", "ctypes", ".", "pointer", "(", "xpos_value", ")", "\n", "ypos_value", "=", "ctypes", ".", "c_double", "(", "0.0", ")", "\n", "ypos", "=", "ctypes", ".", "pointer", "(", "ypos_value", ")", "\n", "_glfw", ".", "glfwGetCursorPos", "(", "window", ",", "xpos", ",", "ypos", ")", "\n", "return", "xpos_value", ".", "value", ",", "ypos_value", ".", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.glfw.set_cursor_pos": [[1309, 1317], ["_glfw.glfwSetCursorPos"], "function", ["None"], ["def", "set_cursor_pos", "(", "window", ",", "xpos", ",", "ypos", ")", ":", "\n", "    ", "'''\n    Sets the position of the cursor, relative to the client area of the window.\n\n    Wrapper for:\n        void glfwSetCursorPos(GLFWwindow* window, double xpos, double ypos);\n    '''", "\n", "_glfw", ".", "glfwSetCursorPos", "(", "window", ",", "xpos", ",", "ypos", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.glfw.set_key_callback": [[1323, 1344], ["_GLFWkeyfun", "_glfw.glfwSetKeyCallback", "ctypes.cast", "ctypes.pointer", "ctypes.POINTER"], "function", ["None"], ["def", "set_key_callback", "(", "window", ",", "cbfun", ")", ":", "\n", "    ", "'''\n    Sets the key callback.\n\n    Wrapper for:\n        GLFWkeyfun glfwSetKeyCallback(GLFWwindow* window, GLFWkeyfun cbfun);\n    '''", "\n", "window_addr", "=", "ctypes", ".", "cast", "(", "ctypes", ".", "pointer", "(", "window", ")", ",", "\n", "ctypes", ".", "POINTER", "(", "ctypes", ".", "c_long", ")", ")", ".", "contents", ".", "value", "\n", "if", "window_addr", "in", "_key_callback_repository", ":", "\n", "        ", "previous_callback", "=", "_key_callback_repository", "[", "window_addr", "]", "\n", "", "else", ":", "\n", "        ", "previous_callback", "=", "None", "\n", "", "if", "cbfun", "is", "None", ":", "\n", "        ", "cbfun", "=", "0", "\n", "", "c_cbfun", "=", "_GLFWkeyfun", "(", "cbfun", ")", "\n", "_key_callback_repository", "[", "window_addr", "]", "=", "(", "cbfun", ",", "c_cbfun", ")", "\n", "cbfun", "=", "c_cbfun", "\n", "_glfw", ".", "glfwSetKeyCallback", "(", "window", ",", "cbfun", ")", "\n", "if", "previous_callback", "is", "not", "None", "and", "previous_callback", "[", "0", "]", "!=", "0", ":", "\n", "        ", "return", "previous_callback", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.glfw.set_char_callback": [[1350, 1371], ["_GLFWcharfun", "_glfw.glfwSetCharCallback", "ctypes.cast", "ctypes.pointer", "ctypes.POINTER"], "function", ["None"], ["def", "set_char_callback", "(", "window", ",", "cbfun", ")", ":", "\n", "    ", "'''\n    Sets the Unicode character callback.\n\n    Wrapper for:\n        GLFWcharfun glfwSetCharCallback(GLFWwindow* window, GLFWcharfun cbfun);\n    '''", "\n", "window_addr", "=", "ctypes", ".", "cast", "(", "ctypes", ".", "pointer", "(", "window", ")", ",", "\n", "ctypes", ".", "POINTER", "(", "ctypes", ".", "c_long", ")", ")", ".", "contents", ".", "value", "\n", "if", "window_addr", "in", "_char_callback_repository", ":", "\n", "        ", "previous_callback", "=", "_char_callback_repository", "[", "window_addr", "]", "\n", "", "else", ":", "\n", "        ", "previous_callback", "=", "None", "\n", "", "if", "cbfun", "is", "None", ":", "\n", "        ", "cbfun", "=", "0", "\n", "", "c_cbfun", "=", "_GLFWcharfun", "(", "cbfun", ")", "\n", "_char_callback_repository", "[", "window_addr", "]", "=", "(", "cbfun", ",", "c_cbfun", ")", "\n", "cbfun", "=", "c_cbfun", "\n", "_glfw", ".", "glfwSetCharCallback", "(", "window", ",", "cbfun", ")", "\n", "if", "previous_callback", "is", "not", "None", "and", "previous_callback", "[", "0", "]", "!=", "0", ":", "\n", "        ", "return", "previous_callback", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.glfw.set_mouse_button_callback": [[1377, 1398], ["_GLFWmousebuttonfun", "_glfw.glfwSetMouseButtonCallback", "ctypes.cast", "ctypes.pointer", "ctypes.POINTER"], "function", ["None"], ["def", "set_mouse_button_callback", "(", "window", ",", "cbfun", ")", ":", "\n", "    ", "'''\n    Sets the mouse button callback.\n\n    Wrapper for:\n        GLFWmousebuttonfun glfwSetMouseButtonCallback(GLFWwindow* window, GLFWmousebuttonfun cbfun);\n    '''", "\n", "window_addr", "=", "ctypes", ".", "cast", "(", "ctypes", ".", "pointer", "(", "window", ")", ",", "\n", "ctypes", ".", "POINTER", "(", "ctypes", ".", "c_long", ")", ")", ".", "contents", ".", "value", "\n", "if", "window_addr", "in", "_mouse_button_callback_repository", ":", "\n", "        ", "previous_callback", "=", "_mouse_button_callback_repository", "[", "window_addr", "]", "\n", "", "else", ":", "\n", "        ", "previous_callback", "=", "None", "\n", "", "if", "cbfun", "is", "None", ":", "\n", "        ", "cbfun", "=", "0", "\n", "", "c_cbfun", "=", "_GLFWmousebuttonfun", "(", "cbfun", ")", "\n", "_mouse_button_callback_repository", "[", "window_addr", "]", "=", "(", "cbfun", ",", "c_cbfun", ")", "\n", "cbfun", "=", "c_cbfun", "\n", "_glfw", ".", "glfwSetMouseButtonCallback", "(", "window", ",", "cbfun", ")", "\n", "if", "previous_callback", "is", "not", "None", "and", "previous_callback", "[", "0", "]", "!=", "0", ":", "\n", "        ", "return", "previous_callback", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.glfw.set_cursor_pos_callback": [[1404, 1425], ["_GLFWcursorposfun", "_glfw.glfwSetCursorPosCallback", "ctypes.cast", "ctypes.pointer", "ctypes.POINTER"], "function", ["None"], ["def", "set_cursor_pos_callback", "(", "window", ",", "cbfun", ")", ":", "\n", "    ", "'''\n    Sets the cursor position callback.\n\n    Wrapper for:\n        GLFWcursorposfun glfwSetCursorPosCallback(GLFWwindow* window, GLFWcursorposfun cbfun);\n    '''", "\n", "window_addr", "=", "ctypes", ".", "cast", "(", "ctypes", ".", "pointer", "(", "window", ")", ",", "\n", "ctypes", ".", "POINTER", "(", "ctypes", ".", "c_long", ")", ")", ".", "contents", ".", "value", "\n", "if", "window_addr", "in", "_cursor_pos_callback_repository", ":", "\n", "        ", "previous_callback", "=", "_cursor_pos_callback_repository", "[", "window_addr", "]", "\n", "", "else", ":", "\n", "        ", "previous_callback", "=", "None", "\n", "", "if", "cbfun", "is", "None", ":", "\n", "        ", "cbfun", "=", "0", "\n", "", "c_cbfun", "=", "_GLFWcursorposfun", "(", "cbfun", ")", "\n", "_cursor_pos_callback_repository", "[", "window_addr", "]", "=", "(", "cbfun", ",", "c_cbfun", ")", "\n", "cbfun", "=", "c_cbfun", "\n", "_glfw", ".", "glfwSetCursorPosCallback", "(", "window", ",", "cbfun", ")", "\n", "if", "previous_callback", "is", "not", "None", "and", "previous_callback", "[", "0", "]", "!=", "0", ":", "\n", "        ", "return", "previous_callback", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.glfw.set_cursor_enter_callback": [[1431, 1452], ["_GLFWcursorenterfun", "_glfw.glfwSetCursorEnterCallback", "ctypes.cast", "ctypes.pointer", "ctypes.POINTER"], "function", ["None"], ["def", "set_cursor_enter_callback", "(", "window", ",", "cbfun", ")", ":", "\n", "    ", "'''\n    Sets the cursor enter/exit callback.\n\n    Wrapper for:\n        GLFWcursorenterfun glfwSetCursorEnterCallback(GLFWwindow* window, GLFWcursorenterfun cbfun);\n    '''", "\n", "window_addr", "=", "ctypes", ".", "cast", "(", "ctypes", ".", "pointer", "(", "window", ")", ",", "\n", "ctypes", ".", "POINTER", "(", "ctypes", ".", "c_long", ")", ")", ".", "contents", ".", "value", "\n", "if", "window_addr", "in", "_cursor_enter_callback_repository", ":", "\n", "        ", "previous_callback", "=", "_cursor_enter_callback_repository", "[", "window_addr", "]", "\n", "", "else", ":", "\n", "        ", "previous_callback", "=", "None", "\n", "", "if", "cbfun", "is", "None", ":", "\n", "        ", "cbfun", "=", "0", "\n", "", "c_cbfun", "=", "_GLFWcursorenterfun", "(", "cbfun", ")", "\n", "_cursor_enter_callback_repository", "[", "window_addr", "]", "=", "(", "cbfun", ",", "c_cbfun", ")", "\n", "cbfun", "=", "c_cbfun", "\n", "_glfw", ".", "glfwSetCursorEnterCallback", "(", "window", ",", "cbfun", ")", "\n", "if", "previous_callback", "is", "not", "None", "and", "previous_callback", "[", "0", "]", "!=", "0", ":", "\n", "        ", "return", "previous_callback", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.glfw.set_scroll_callback": [[1458, 1479], ["_GLFWscrollfun", "_glfw.glfwSetScrollCallback", "ctypes.cast", "ctypes.pointer", "ctypes.POINTER"], "function", ["None"], ["def", "set_scroll_callback", "(", "window", ",", "cbfun", ")", ":", "\n", "    ", "'''\n    Sets the scroll callback.\n\n    Wrapper for:\n        GLFWscrollfun glfwSetScrollCallback(GLFWwindow* window, GLFWscrollfun cbfun);\n    '''", "\n", "window_addr", "=", "ctypes", ".", "cast", "(", "ctypes", ".", "pointer", "(", "window", ")", ",", "\n", "ctypes", ".", "POINTER", "(", "ctypes", ".", "c_long", ")", ")", ".", "contents", ".", "value", "\n", "if", "window_addr", "in", "_scroll_callback_repository", ":", "\n", "        ", "previous_callback", "=", "_scroll_callback_repository", "[", "window_addr", "]", "\n", "", "else", ":", "\n", "        ", "previous_callback", "=", "None", "\n", "", "if", "cbfun", "is", "None", ":", "\n", "        ", "cbfun", "=", "0", "\n", "", "c_cbfun", "=", "_GLFWscrollfun", "(", "cbfun", ")", "\n", "_scroll_callback_repository", "[", "window_addr", "]", "=", "(", "cbfun", ",", "c_cbfun", ")", "\n", "cbfun", "=", "c_cbfun", "\n", "_glfw", ".", "glfwSetScrollCallback", "(", "window", ",", "cbfun", ")", "\n", "if", "previous_callback", "is", "not", "None", "and", "previous_callback", "[", "0", "]", "!=", "0", ":", "\n", "        ", "return", "previous_callback", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.glfw.joystick_present": [[1482, 1490], ["_glfw.glfwJoystickPresent"], "function", ["None"], ["def", "joystick_present", "(", "joy", ")", ":", "\n", "    ", "'''\n    Returns whether the specified joystick is present.\n\n    Wrapper for:\n        int glfwJoystickPresent(int joy);\n    '''", "\n", "return", "_glfw", ".", "glfwJoystickPresent", "(", "joy", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.glfw.get_joystick_axes": [[1494, 1505], ["ctypes.c_int", "ctypes.pointer", "_glfw.glfwGetJoystickAxes"], "function", ["None"], ["def", "get_joystick_axes", "(", "joy", ")", ":", "\n", "    ", "'''\n    Returns the values of all axes of the specified joystick.\n\n    Wrapper for:\n        const float* glfwGetJoystickAxes(int joy, int* count);\n    '''", "\n", "count_value", "=", "ctypes", ".", "c_int", "(", "0", ")", "\n", "count", "=", "ctypes", ".", "pointer", "(", "count_value", ")", "\n", "result", "=", "_glfw", ".", "glfwGetJoystickAxes", "(", "joy", ",", "count", ")", "\n", "return", "result", ",", "count_value", ".", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.glfw.get_joystick_buttons": [[1509, 1520], ["ctypes.c_int", "ctypes.pointer", "_glfw.glfwGetJoystickButtons"], "function", ["None"], ["def", "get_joystick_buttons", "(", "joy", ")", ":", "\n", "    ", "'''\n    Returns the state of all buttons of the specified joystick.\n\n    Wrapper for:\n        const unsigned char* glfwGetJoystickButtons(int joy, int* count);\n    '''", "\n", "count_value", "=", "ctypes", ".", "c_int", "(", "0", ")", "\n", "count", "=", "ctypes", ".", "pointer", "(", "count_value", ")", "\n", "result", "=", "_glfw", ".", "glfwGetJoystickButtons", "(", "joy", ",", "count", ")", "\n", "return", "result", ",", "count_value", ".", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.glfw.get_joystick_name": [[1523, 1531], ["_glfw.glfwGetJoystickName"], "function", ["None"], ["def", "get_joystick_name", "(", "joy", ")", ":", "\n", "    ", "'''\n    Returns the name of the specified joystick.\n\n    Wrapper for:\n        const char* glfwGetJoystickName(int joy);\n    '''", "\n", "return", "_glfw", ".", "glfwGetJoystickName", "(", "joy", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.glfw.set_clipboard_string": [[1535, 1543], ["_glfw.glfwSetClipboardString", "_to_char_p"], "function", ["None"], ["def", "set_clipboard_string", "(", "window", ",", "string", ")", ":", "\n", "    ", "'''\n    Sets the clipboard to the specified string.\n\n    Wrapper for:\n        void glfwSetClipboardString(GLFWwindow* window, const char* string);\n    '''", "\n", "_glfw", ".", "glfwSetClipboardString", "(", "window", ",", "_to_char_p", "(", "string", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.glfw.get_clipboard_string": [[1546, 1554], ["_glfw.glfwGetClipboardString"], "function", ["None"], ["def", "get_clipboard_string", "(", "window", ")", ":", "\n", "    ", "'''\n    Retrieves the contents of the clipboard as a string.\n\n    Wrapper for:\n        const char* glfwGetClipboardString(GLFWwindow* window);\n    '''", "\n", "return", "_glfw", ".", "glfwGetClipboardString", "(", "window", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.glfw.get_time": [[1557, 1565], ["_glfw.glfwGetTime"], "function", ["None"], ["def", "get_time", "(", ")", ":", "\n", "    ", "'''\n    Returns the value of the GLFW timer.\n\n    Wrapper for:\n        double glfwGetTime(void);\n    '''", "\n", "return", "_glfw", ".", "glfwGetTime", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.glfw.set_time": [[1568, 1576], ["_glfw.glfwSetTime"], "function", ["None"], ["def", "set_time", "(", "time", ")", ":", "\n", "    ", "'''\n    Sets the GLFW timer.\n\n    Wrapper for:\n        void glfwSetTime(double time);\n    '''", "\n", "_glfw", ".", "glfwSetTime", "(", "time", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.glfw.make_context_current": [[1579, 1588], ["_glfw.glfwMakeContextCurrent"], "function", ["None"], ["def", "make_context_current", "(", "window", ")", ":", "\n", "    ", "'''\n    Makes the context of the specified window current for the calling\n    thread.\n\n    Wrapper for:\n        void glfwMakeContextCurrent(GLFWwindow* window);\n    '''", "\n", "_glfw", ".", "glfwMakeContextCurrent", "(", "window", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.glfw.get_current_context": [[1591, 1599], ["_glfw.glfwGetCurrentContext"], "function", ["None"], ["def", "get_current_context", "(", ")", ":", "\n", "    ", "'''\n    Returns the window whose context is current on the calling thread.\n\n    Wrapper for:\n        GLFWwindow* glfwGetCurrentContext(void);\n    '''", "\n", "return", "_glfw", ".", "glfwGetCurrentContext", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.glfw.swap_buffers": [[1602, 1610], ["_glfw.glfwSwapBuffers"], "function", ["None"], ["def", "swap_buffers", "(", "window", ")", ":", "\n", "    ", "'''\n    Swaps the front and back buffers of the specified window.\n\n    Wrapper for:\n        void glfwSwapBuffers(GLFWwindow* window);\n    '''", "\n", "_glfw", ".", "glfwSwapBuffers", "(", "window", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.glfw.swap_interval": [[1613, 1621], ["_glfw.glfwSwapInterval"], "function", ["None"], ["def", "swap_interval", "(", "interval", ")", ":", "\n", "    ", "'''\n    Sets the swap interval for the current context.\n\n    Wrapper for:\n        void glfwSwapInterval(int interval);\n    '''", "\n", "_glfw", ".", "glfwSwapInterval", "(", "interval", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.glfw.extension_supported": [[1624, 1632], ["_glfw.glfwExtensionSupported", "_to_char_p"], "function", ["None"], ["def", "extension_supported", "(", "extension", ")", ":", "\n", "    ", "'''\n    Returns whether the specified extension is available.\n\n    Wrapper for:\n        int glfwExtensionSupported(const char* extension);\n    '''", "\n", "return", "_glfw", ".", "glfwExtensionSupported", "(", "_to_char_p", "(", "extension", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.glfw.get_proc_address": [[1635, 1644], ["_glfw.glfwGetProcAddress", "_to_char_p"], "function", ["None"], ["def", "get_proc_address", "(", "procname", ")", ":", "\n", "    ", "'''\n    Returns the address of the specified function for the current\n    context.\n\n    Wrapper for:\n        GLFWglproc glfwGetProcAddress(const char* procname);\n    '''", "\n", "return", "_glfw", ".", "glfwGetProcAddress", "(", "_to_char_p", "(", "procname", ")", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjextra.append_objects": [[1, 7], ["range", "ValueError"], "function", ["None"], ["def", "append_objects", "(", "cur", ",", "extra", ")", ":", "\n", "    ", "for", "i", "in", "range", "(", "cur", ".", "ngeom", ",", "cur", ".", "ngeom", "+", "extra", ".", "ngeom", ")", ":", "\n", "        ", "cur", ".", "geoms", "[", "i", "]", "=", "extra", ".", "geoms", "[", "i", "-", "cur", ".", "ngeom", "]", "\n", "", "cur", ".", "ngeom", "=", "cur", ".", "ngeom", "+", "extra", ".", "ngeom", "\n", "if", "cur", ".", "ngeom", ">", "cur", ".", "maxgeom", ":", "\n", "        ", "raise", "ValueError", "(", "\"buffer limit exceeded!\"", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.__init__": [[9, 16], ["isinstance", "isinstance", "str"], "methods", ["None"], ["        ", "return", "value", ".", "encode", "(", "'utf-8'", ")", "\n", "", "else", ":", "\n", "        ", "return", "value", "\n", "\n", "", "", "def", "file_size", "(", "f", ")", ":", "\n", "    ", "return", "os", ".", "fstat", "(", "f", ".", "fileno", "(", ")", ")", ".", "st_size", "\n", "", ""]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.__str__": [[16, 17], ["str"], "methods", ["None"], []], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.__repr__": [[17, 18], ["repr"], "methods", ["None"], []], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.__int__": [[18, 19], ["int"], "methods", ["None"], []], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.__long__": [[19, 20], ["long"], "methods", ["None"], []], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.__float__": [[20, 21], ["float"], "methods", ["None"], []], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.__complex__": [[21, 22], ["complex"], "methods", ["None"], []], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.__hash__": [[22, 23], ["hash"], "methods", ["None"], []], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.__cmp__": [[24, 29], ["isinstance", "cmp", "cmp"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.toy_text.blackjack.cmp", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_text.blackjack.cmp"], []], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.__contains__": [[29, 31], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.__len__": [[32, 33], ["len"], "methods", ["None"], []], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.__getitem__": [[33, 34], ["util.UserString.__class__"], "methods", ["None"], []], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.__getslice__": [[34, 37], ["max", "max", "util.UserString.__class__"], "methods", ["None"], []], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.__add__": [[38, 45], ["isinstance", "util.UserString.__class__", "isinstance", "util.UserString.__class__", "util.UserString.__class__", "str"], "methods", ["None"], []], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.__radd__": [[45, 50], ["isinstance", "util.UserString.__class__", "util.UserString.__class__", "str"], "methods", ["None"], []], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.__mul__": [[50, 52], ["util.UserString.__class__"], "methods", ["None"], []], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.__mod__": [[53, 55], ["util.UserString.__class__"], "methods", ["None"], []], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.capitalize": [[57, 58], ["util.UserString.__class__", "util.UserString.data.capitalize"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.capitalize"], []], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.center": [[58, 60], ["util.UserString.__class__", "util.UserString.data.center"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjStatisticWrapper.center"], []], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.count": [[60, 62], ["util.UserString.data.count"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.count"], []], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.decode": [[62, 70], ["util.UserString.__class__", "util.UserString.__class__", "util.UserString.__class__", "util.UserString.data.decode", "util.UserString.data.decode", "util.UserString.data.decode"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.decode", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.decode", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.decode"], []], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.encode": [[70, 78], ["util.UserString.__class__", "util.UserString.__class__", "util.UserString.__class__", "util.UserString.data.encode", "util.UserString.data.encode", "util.UserString.data.encode"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.encode", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.encode", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.encode"], []], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.endswith": [[78, 80], ["util.UserString.data.endswith"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.endswith"], []], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.expandtabs": [[80, 82], ["util.UserString.__class__", "util.UserString.data.expandtabs"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.expandtabs"], []], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.find": [[82, 84], ["util.UserString.data.find"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.find"], []], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.index": [[84, 86], ["util.UserString.data.index"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.index"], []], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.isalpha": [[86, 87], ["util.UserString.data.isalpha"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.isalpha"], []], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.isalnum": [[87, 88], ["util.UserString.data.isalnum"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.isalnum"], []], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.isdecimal": [[88, 89], ["util.UserString.data.isdecimal"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.isdecimal"], []], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.isdigit": [[89, 90], ["util.UserString.data.isdigit"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.isdigit"], []], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.islower": [[90, 91], ["util.UserString.data.islower"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.islower"], []], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.isnumeric": [[91, 92], ["util.UserString.data.isnumeric"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.isnumeric"], []], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.isspace": [[92, 93], ["util.UserString.data.isspace"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.isspace"], []], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.istitle": [[93, 94], ["util.UserString.data.istitle"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.istitle"], []], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.isupper": [[94, 95], ["util.UserString.data.isupper"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.isupper"], []], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.join": [[95, 96], ["util.UserString.data.join"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.join"], []], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.ljust": [[96, 98], ["util.UserString.__class__", "util.UserString.data.ljust"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.ljust"], []], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.lower": [[98, 99], ["util.UserString.__class__", "util.UserString.data.lower"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.lower"], []], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.lstrip": [[99, 100], ["util.UserString.__class__", "util.UserString.data.lstrip"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.lstrip"], []], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.partition": [[100, 102], ["util.UserString.data.partition"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.partition"], []], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.replace": [[102, 104], ["util.UserString.__class__", "util.UserString.data.replace"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.replace"], []], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.rfind": [[104, 106], ["util.UserString.data.rfind"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.rfind"], []], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.rindex": [[106, 108], ["util.UserString.data.rindex"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.rindex"], []], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.rjust": [[108, 110], ["util.UserString.__class__", "util.UserString.data.rjust"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.rjust"], []], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.rpartition": [[110, 112], ["util.UserString.data.rpartition"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.rpartition"], []], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.rstrip": [[112, 113], ["util.UserString.__class__", "util.UserString.data.rstrip"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.rstrip"], []], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.split": [[113, 115], ["util.UserString.data.split"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.split"], []], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.rsplit": [[115, 117], ["util.UserString.data.rsplit"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.rsplit"], []], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.splitlines": [[117, 118], ["util.UserString.data.splitlines"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.splitlines"], []], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.startswith": [[118, 120], ["util.UserString.data.startswith"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.startswith"], []], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.strip": [[120, 121], ["util.UserString.__class__", "util.UserString.data.strip"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.strip"], []], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.swapcase": [[121, 122], ["util.UserString.__class__", "util.UserString.data.swapcase"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.swapcase"], []], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.title": [[122, 123], ["util.UserString.__class__", "util.UserString.data.title"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.title"], []], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.translate": [[123, 125], ["util.UserString.__class__", "util.UserString.data.translate"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.translate"], []], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.upper": [[125, 126], ["util.UserString.__class__", "util.UserString.data.upper"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.upper"], []], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.zfill": [[126, 127], ["util.UserString.__class__", "util.UserString.data.zfill"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.zfill"], []], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.MutableString.__init__": [[143, 145], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.MutableString.__hash__": [[145, 147], ["TypeError"], "methods", ["None"], []], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.MutableString.__setitem__": [[147, 152], ["len", "len"], "methods", ["None"], []], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.MutableString.__delitem__": [[152, 157], ["len", "len"], "methods", ["None"], []], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.MutableString.__setslice__": [[157, 165], ["max", "max", "isinstance", "isinstance", "str"], "methods", ["None"], []], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.MutableString.__delslice__": [[165, 168], ["max", "max"], "methods", ["None"], []], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.MutableString.immutable": [[168, 170], ["util.UserString"], "methods", ["None"], []], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.MutableString.__iadd__": [[170, 178], ["isinstance", "isinstance", "str"], "methods", ["None"], []], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.MutableString.__imul__": [[178, 181], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.String.__init__": [[187, 196], ["isinstance", "obj.encode", "isinstance", "isinstance", "six.b"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.encode"], []], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.String.__len__": [[197, 199], ["len"], "methods", ["None"], []], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.String.from_param": [[200, 228], ["cls", "isinstance", "isinstance", "POINTER", "cls", "isinstance", "isinstance", "POINTER", "isinstance", "cls", "util.String.from_param", "cast", "POINTER"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.String.from_param"], []], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.ReturnString": [[230, 232], ["util.String.from_param"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.String.from_param"], []], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjContactWrapper.__init__": [[689, 692], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "wrapped", ",", "size_src", "=", "None", ")", ":", "\n", "        ", "self", ".", "_wrapped", "=", "wrapped", "\n", "self", ".", "_size_src", "=", "size_src", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjContactWrapper.ptr": [[693, 696], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "ptr", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_wrapped", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjContactWrapper.obj": [[697, 700], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "obj", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_wrapped", ".", "contents", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjContactWrapper.dist": [[706, 709], ["None"], "methods", ["None"], ["", "@", "dist", ".", "setter", "\n", "def", "dist", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "dist", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjContactWrapper.pos": [[716, 720], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "pos", ".", "setter", "\n", "def", "pos", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "pos", ",", "val_ptr", ",", "3", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjContactWrapper.frame": [[727, 731], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "frame", ".", "setter", "\n", "def", "frame", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "frame", ",", "val_ptr", ",", "9", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjContactWrapper.includemargin": [[736, 739], ["None"], "methods", ["None"], ["", "@", "includemargin", ".", "setter", "\n", "def", "includemargin", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "includemargin", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjContactWrapper.friction": [[746, 750], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "friction", ".", "setter", "\n", "def", "friction", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "friction", ",", "val_ptr", ",", "5", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjContactWrapper.solref": [[757, 761], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "solref", ".", "setter", "\n", "def", "solref", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "solref", ",", "val_ptr", ",", "2", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjContactWrapper.solimp": [[768, 772], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "solimp", ".", "setter", "\n", "def", "solimp", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "solimp", ",", "val_ptr", ",", "3", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjContactWrapper.mu": [[777, 780], ["None"], "methods", ["None"], ["", "@", "mu", ".", "setter", "\n", "def", "mu", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "mu", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjContactWrapper.coef": [[787, 791], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "coef", ".", "setter", "\n", "def", "coef", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "coef", ",", "val_ptr", ",", "5", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjContactWrapper.zone": [[796, 799], ["None"], "methods", ["None"], ["", "@", "zone", ".", "setter", "\n", "def", "zone", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "zone", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjContactWrapper.dim": [[804, 807], ["None"], "methods", ["None"], ["", "@", "dim", ".", "setter", "\n", "def", "dim", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "dim", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjContactWrapper.geom1": [[812, 815], ["None"], "methods", ["None"], ["", "@", "geom1", ".", "setter", "\n", "def", "geom1", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "geom1", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjContactWrapper.geom2": [[820, 823], ["None"], "methods", ["None"], ["", "@", "geom2", ".", "setter", "\n", "def", "geom2", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "geom2", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjContactWrapper.exclude": [[828, 831], ["None"], "methods", ["None"], ["", "@", "exclude", ".", "setter", "\n", "def", "exclude", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "exclude", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjContactWrapper.efc_address": [[836, 839], ["None"], "methods", ["None"], ["", "@", "efc_address", ".", "setter", "\n", "def", "efc_address", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "efc_address", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjrRectWrapper.__init__": [[842, 845], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "wrapped", ",", "size_src", "=", "None", ")", ":", "\n", "        ", "self", ".", "_wrapped", "=", "wrapped", "\n", "self", ".", "_size_src", "=", "size_src", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjrRectWrapper.ptr": [[846, 849], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "ptr", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_wrapped", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjrRectWrapper.obj": [[850, 853], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "obj", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_wrapped", ".", "contents", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjrRectWrapper.left": [[859, 862], ["None"], "methods", ["None"], ["", "@", "left", ".", "setter", "\n", "def", "left", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "left", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjrRectWrapper.bottom": [[867, 870], ["None"], "methods", ["None"], ["", "@", "bottom", ".", "setter", "\n", "def", "bottom", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "bottom", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjrRectWrapper.width": [[875, 878], ["None"], "methods", ["None"], ["", "@", "width", ".", "setter", "\n", "def", "width", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "width", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjrRectWrapper.height": [[883, 886], ["None"], "methods", ["None"], ["", "@", "height", ".", "setter", "\n", "def", "height", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "height", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjvCameraPoseWrapper.__init__": [[889, 892], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "wrapped", ",", "size_src", "=", "None", ")", ":", "\n", "        ", "self", ".", "_wrapped", "=", "wrapped", "\n", "self", ".", "_size_src", "=", "size_src", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjvCameraPoseWrapper.ptr": [[893, 896], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "ptr", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_wrapped", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjvCameraPoseWrapper.obj": [[897, 900], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "obj", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_wrapped", ".", "contents", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjvCameraPoseWrapper.head_pos": [[908, 912], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "head_pos", ".", "setter", "\n", "def", "head_pos", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "head_pos", ",", "val_ptr", ",", "3", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjvCameraPoseWrapper.head_right": [[919, 923], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "head_right", ".", "setter", "\n", "def", "head_right", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "head_right", ",", "val_ptr", ",", "3", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjvCameraPoseWrapper.window_pos": [[930, 934], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "window_pos", ".", "setter", "\n", "def", "window_pos", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "window_pos", ",", "val_ptr", ",", "3", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjvCameraPoseWrapper.window_right": [[941, 945], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "window_right", ".", "setter", "\n", "def", "window_right", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "window_right", ",", "val_ptr", ",", "3", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjvCameraPoseWrapper.window_up": [[952, 956], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "window_up", ".", "setter", "\n", "def", "window_up", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "window_up", ",", "val_ptr", ",", "3", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjvCameraPoseWrapper.window_normal": [[963, 967], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "window_normal", ".", "setter", "\n", "def", "window_normal", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "window_normal", ",", "val_ptr", ",", "3", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjvCameraPoseWrapper.window_size": [[974, 978], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "window_size", ".", "setter", "\n", "def", "window_size", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "window_size", ",", "val_ptr", ",", "2", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjvCameraPoseWrapper.scale": [[983, 986], ["None"], "methods", ["None"], ["", "@", "scale", ".", "setter", "\n", "def", "scale", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "scale", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjvCameraPoseWrapper.ipd": [[991, 994], ["None"], "methods", ["None"], ["", "@", "ipd", ".", "setter", "\n", "def", "ipd", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "ipd", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjrOptionWrapper.__init__": [[997, 1000], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "wrapped", ",", "size_src", "=", "None", ")", ":", "\n", "        ", "self", ".", "_wrapped", "=", "wrapped", "\n", "self", ".", "_size_src", "=", "size_src", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjrOptionWrapper.ptr": [[1001, 1004], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "ptr", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_wrapped", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjrOptionWrapper.obj": [[1005, 1008], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "obj", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_wrapped", ".", "contents", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjrOptionWrapper.stereo": [[1014, 1017], ["None"], "methods", ["None"], ["", "@", "stereo", ".", "setter", "\n", "def", "stereo", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "stereo", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjrOptionWrapper.flags": [[1024, 1028], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "flags", ".", "setter", "\n", "def", "flags", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_ubyte", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "flags", ",", "val_ptr", ",", "6", "*", "sizeof", "(", "c_ubyte", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjrContextWrapper.__init__": [[1031, 1034], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "wrapped", ",", "size_src", "=", "None", ")", ":", "\n", "        ", "self", ".", "_wrapped", "=", "wrapped", "\n", "self", ".", "_size_src", "=", "size_src", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjrContextWrapper.ptr": [[1035, 1038], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "ptr", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_wrapped", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjrContextWrapper.obj": [[1039, 1042], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "obj", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_wrapped", ".", "contents", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjrContextWrapper.linewidth": [[1048, 1051], ["None"], "methods", ["None"], ["", "@", "linewidth", ".", "setter", "\n", "def", "linewidth", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "linewidth", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjrContextWrapper.znear": [[1056, 1059], ["None"], "methods", ["None"], ["", "@", "znear", ".", "setter", "\n", "def", "znear", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "znear", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjrContextWrapper.zfar": [[1064, 1067], ["None"], "methods", ["None"], ["", "@", "zfar", ".", "setter", "\n", "def", "zfar", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "zfar", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjrContextWrapper.shadowclip": [[1072, 1075], ["None"], "methods", ["None"], ["", "@", "shadowclip", ".", "setter", "\n", "def", "shadowclip", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "shadowclip", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjrContextWrapper.shadowscale": [[1080, 1083], ["None"], "methods", ["None"], ["", "@", "shadowscale", ".", "setter", "\n", "def", "shadowscale", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "shadowscale", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjrContextWrapper.shadowsize": [[1088, 1091], ["None"], "methods", ["None"], ["", "@", "shadowsize", ".", "setter", "\n", "def", "shadowsize", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "shadowsize", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjrContextWrapper.offwidth": [[1096, 1099], ["None"], "methods", ["None"], ["", "@", "offwidth", ".", "setter", "\n", "def", "offwidth", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "offwidth", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjrContextWrapper.offheight": [[1104, 1107], ["None"], "methods", ["None"], ["", "@", "offheight", ".", "setter", "\n", "def", "offheight", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "offheight", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjrContextWrapper.offFBO": [[1112, 1115], ["None"], "methods", ["None"], ["", "@", "offFBO", ".", "setter", "\n", "def", "offFBO", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "offFBO", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjrContextWrapper.offColor": [[1120, 1123], ["None"], "methods", ["None"], ["", "@", "offColor", ".", "setter", "\n", "def", "offColor", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "offColor", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjrContextWrapper.offDepthStencil": [[1128, 1131], ["None"], "methods", ["None"], ["", "@", "offDepthStencil", ".", "setter", "\n", "def", "offDepthStencil", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "offDepthStencil", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjrContextWrapper.shadowFBO": [[1136, 1139], ["None"], "methods", ["None"], ["", "@", "shadowFBO", ".", "setter", "\n", "def", "shadowFBO", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "shadowFBO", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjrContextWrapper.shadowTex": [[1144, 1147], ["None"], "methods", ["None"], ["", "@", "shadowTex", ".", "setter", "\n", "def", "shadowTex", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "shadowTex", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjrContextWrapper.ntexture": [[1152, 1155], ["None"], "methods", ["None"], ["", "@", "ntexture", ".", "setter", "\n", "def", "ntexture", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "ntexture", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjrContextWrapper.texture": [[1162, 1166], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "texture", ".", "setter", "\n", "def", "texture", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_int", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "texture", ",", "val_ptr", ",", "100", "*", "sizeof", "(", "c_int", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjrContextWrapper.textureType": [[1173, 1177], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "textureType", ".", "setter", "\n", "def", "textureType", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_int", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "textureType", ",", "val_ptr", ",", "100", "*", "sizeof", "(", "c_int", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjrContextWrapper.basePlane": [[1182, 1185], ["None"], "methods", ["None"], ["", "@", "basePlane", ".", "setter", "\n", "def", "basePlane", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "basePlane", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjrContextWrapper.baseMesh": [[1190, 1193], ["None"], "methods", ["None"], ["", "@", "baseMesh", ".", "setter", "\n", "def", "baseMesh", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "baseMesh", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjrContextWrapper.baseHField": [[1198, 1201], ["None"], "methods", ["None"], ["", "@", "baseHField", ".", "setter", "\n", "def", "baseHField", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "baseHField", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjrContextWrapper.baseBuiltin": [[1206, 1209], ["None"], "methods", ["None"], ["", "@", "baseBuiltin", ".", "setter", "\n", "def", "baseBuiltin", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "baseBuiltin", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjrContextWrapper.baseFontNormal": [[1214, 1217], ["None"], "methods", ["None"], ["", "@", "baseFontNormal", ".", "setter", "\n", "def", "baseFontNormal", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "baseFontNormal", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjrContextWrapper.baseFontBack": [[1222, 1225], ["None"], "methods", ["None"], ["", "@", "baseFontBack", ".", "setter", "\n", "def", "baseFontBack", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "baseFontBack", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjrContextWrapper.baseFontBig": [[1230, 1233], ["None"], "methods", ["None"], ["", "@", "baseFontBig", ".", "setter", "\n", "def", "baseFontBig", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "baseFontBig", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjrContextWrapper.rangePlane": [[1238, 1241], ["None"], "methods", ["None"], ["", "@", "rangePlane", ".", "setter", "\n", "def", "rangePlane", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "rangePlane", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjrContextWrapper.rangeMesh": [[1246, 1249], ["None"], "methods", ["None"], ["", "@", "rangeMesh", ".", "setter", "\n", "def", "rangeMesh", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "rangeMesh", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjrContextWrapper.rangeHField": [[1254, 1257], ["None"], "methods", ["None"], ["", "@", "rangeHField", ".", "setter", "\n", "def", "rangeHField", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "rangeHField", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjrContextWrapper.rangeBuiltin": [[1262, 1265], ["None"], "methods", ["None"], ["", "@", "rangeBuiltin", ".", "setter", "\n", "def", "rangeBuiltin", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "rangeBuiltin", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjrContextWrapper.rangeFont": [[1270, 1273], ["None"], "methods", ["None"], ["", "@", "rangeFont", ".", "setter", "\n", "def", "rangeFont", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "rangeFont", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjrContextWrapper.charWidth": [[1280, 1284], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "charWidth", ".", "setter", "\n", "def", "charWidth", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_int", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "charWidth", ",", "val_ptr", ",", "127", "*", "sizeof", "(", "c_int", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjrContextWrapper.charWidthBig": [[1291, 1295], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "charWidthBig", ".", "setter", "\n", "def", "charWidthBig", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_int", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "charWidthBig", ",", "val_ptr", ",", "127", "*", "sizeof", "(", "c_int", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjrContextWrapper.charHeight": [[1300, 1303], ["None"], "methods", ["None"], ["", "@", "charHeight", ".", "setter", "\n", "def", "charHeight", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "charHeight", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjrContextWrapper.charHeightBig": [[1308, 1311], ["None"], "methods", ["None"], ["", "@", "charHeightBig", ".", "setter", "\n", "def", "charHeightBig", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "charHeightBig", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjrContextWrapper.glewInitialized": [[1316, 1319], ["None"], "methods", ["None"], ["", "@", "glewInitialized", ".", "setter", "\n", "def", "glewInitialized", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "glewInitialized", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjvCameraWrapper.__init__": [[1322, 1325], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "wrapped", ",", "size_src", "=", "None", ")", ":", "\n", "        ", "self", ".", "_wrapped", "=", "wrapped", "\n", "self", ".", "_size_src", "=", "size_src", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjvCameraWrapper.ptr": [[1326, 1329], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "ptr", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_wrapped", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjvCameraWrapper.obj": [[1330, 1333], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "obj", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_wrapped", ".", "contents", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjvCameraWrapper.fovy": [[1339, 1342], ["None"], "methods", ["None"], ["", "@", "fovy", ".", "setter", "\n", "def", "fovy", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "fovy", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjvCameraWrapper.camid": [[1347, 1350], ["None"], "methods", ["None"], ["", "@", "camid", ".", "setter", "\n", "def", "camid", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "camid", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjvCameraWrapper.trackbodyid": [[1355, 1358], ["None"], "methods", ["None"], ["", "@", "trackbodyid", ".", "setter", "\n", "def", "trackbodyid", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "trackbodyid", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjvCameraWrapper.lookat": [[1365, 1369], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "lookat", ".", "setter", "\n", "def", "lookat", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "lookat", ",", "val_ptr", ",", "3", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjvCameraWrapper.azimuth": [[1374, 1377], ["None"], "methods", ["None"], ["", "@", "azimuth", ".", "setter", "\n", "def", "azimuth", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "azimuth", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjvCameraWrapper.elevation": [[1382, 1385], ["None"], "methods", ["None"], ["", "@", "elevation", ".", "setter", "\n", "def", "elevation", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "elevation", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjvCameraWrapper.distance": [[1390, 1393], ["None"], "methods", ["None"], ["", "@", "distance", ".", "setter", "\n", "def", "distance", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "distance", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjvCameraWrapper.pose": [[1398, 1401], ["None"], "methods", ["None"], ["", "@", "pose", ".", "setter", "\n", "def", "pose", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "pose", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjvCameraWrapper.VR": [[1406, 1409], ["None"], "methods", ["None"], ["", "@", "VR", ".", "setter", "\n", "def", "VR", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "VR", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjvOptionWrapper.__init__": [[1412, 1415], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "wrapped", ",", "size_src", "=", "None", ")", ":", "\n", "        ", "self", ".", "_wrapped", "=", "wrapped", "\n", "self", ".", "_size_src", "=", "size_src", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjvOptionWrapper.ptr": [[1416, 1419], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "ptr", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_wrapped", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjvOptionWrapper.obj": [[1420, 1423], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "obj", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_wrapped", ".", "contents", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjvOptionWrapper.label": [[1429, 1432], ["None"], "methods", ["None"], ["", "@", "label", ".", "setter", "\n", "def", "label", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "label", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjvOptionWrapper.frame": [[1437, 1440], ["None"], "methods", ["None"], ["", "@", "frame", ".", "setter", "\n", "def", "frame", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "frame", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjvOptionWrapper.geomgroup": [[1447, 1451], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "geomgroup", ".", "setter", "\n", "def", "geomgroup", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_ubyte", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "geomgroup", ",", "val_ptr", ",", "5", "*", "sizeof", "(", "c_ubyte", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjvOptionWrapper.sitegroup": [[1458, 1462], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "sitegroup", ".", "setter", "\n", "def", "sitegroup", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_ubyte", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "sitegroup", ",", "val_ptr", ",", "5", "*", "sizeof", "(", "c_ubyte", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjvOptionWrapper.flags": [[1469, 1473], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "flags", ".", "setter", "\n", "def", "flags", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_ubyte", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "flags", ",", "val_ptr", ",", "18", "*", "sizeof", "(", "c_ubyte", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjvGeomWrapper.__init__": [[1476, 1479], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "wrapped", ",", "size_src", "=", "None", ")", ":", "\n", "        ", "self", ".", "_wrapped", "=", "wrapped", "\n", "self", ".", "_size_src", "=", "size_src", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjvGeomWrapper.ptr": [[1480, 1483], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "ptr", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_wrapped", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjvGeomWrapper.obj": [[1484, 1487], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "obj", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_wrapped", ".", "contents", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjvGeomWrapper.type": [[1493, 1496], ["None"], "methods", ["None"], ["", "@", "type", ".", "setter", "\n", "def", "type", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "type", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjvGeomWrapper.dataid": [[1501, 1504], ["None"], "methods", ["None"], ["", "@", "dataid", ".", "setter", "\n", "def", "dataid", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "dataid", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjvGeomWrapper.objtype": [[1509, 1512], ["None"], "methods", ["None"], ["", "@", "objtype", ".", "setter", "\n", "def", "objtype", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "objtype", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjvGeomWrapper.objid": [[1517, 1520], ["None"], "methods", ["None"], ["", "@", "objid", ".", "setter", "\n", "def", "objid", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "objid", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjvGeomWrapper.category": [[1525, 1528], ["None"], "methods", ["None"], ["", "@", "category", ".", "setter", "\n", "def", "category", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "category", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjvGeomWrapper.texid": [[1533, 1536], ["None"], "methods", ["None"], ["", "@", "texid", ".", "setter", "\n", "def", "texid", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "texid", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjvGeomWrapper.texuniform": [[1541, 1544], ["None"], "methods", ["None"], ["", "@", "texuniform", ".", "setter", "\n", "def", "texuniform", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "texuniform", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjvGeomWrapper.texrepeat": [[1551, 1555], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "texrepeat", ".", "setter", "\n", "def", "texrepeat", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_float", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "texrepeat", ",", "val_ptr", ",", "2", "*", "sizeof", "(", "c_float", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjvGeomWrapper.size": [[1562, 1566], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "size", ".", "setter", "\n", "def", "size", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_float", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "size", ",", "val_ptr", ",", "3", "*", "sizeof", "(", "c_float", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjvGeomWrapper.pos": [[1573, 1577], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "pos", ".", "setter", "\n", "def", "pos", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_float", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "pos", ",", "val_ptr", ",", "3", "*", "sizeof", "(", "c_float", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjvGeomWrapper.mat": [[1584, 1588], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "mat", ".", "setter", "\n", "def", "mat", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_float", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "mat", ",", "val_ptr", ",", "9", "*", "sizeof", "(", "c_float", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjvGeomWrapper.rgba": [[1595, 1599], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "rgba", ".", "setter", "\n", "def", "rgba", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_float", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "rgba", ",", "val_ptr", ",", "4", "*", "sizeof", "(", "c_float", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjvGeomWrapper.emission": [[1604, 1607], ["None"], "methods", ["None"], ["", "@", "emission", ".", "setter", "\n", "def", "emission", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "emission", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjvGeomWrapper.specular": [[1612, 1615], ["None"], "methods", ["None"], ["", "@", "specular", ".", "setter", "\n", "def", "specular", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "specular", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjvGeomWrapper.shininess": [[1620, 1623], ["None"], "methods", ["None"], ["", "@", "shininess", ".", "setter", "\n", "def", "shininess", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "shininess", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjvGeomWrapper.reflectance": [[1628, 1631], ["None"], "methods", ["None"], ["", "@", "reflectance", ".", "setter", "\n", "def", "reflectance", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "reflectance", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjvGeomWrapper.label": [[1636, 1639], ["None"], "methods", ["None"], ["", "@", "label", ".", "setter", "\n", "def", "label", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "label", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjvGeomWrapper.camdist": [[1644, 1647], ["None"], "methods", ["None"], ["", "@", "camdist", ".", "setter", "\n", "def", "camdist", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "camdist", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjvGeomWrapper.rbound": [[1652, 1655], ["None"], "methods", ["None"], ["", "@", "rbound", ".", "setter", "\n", "def", "rbound", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "rbound", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjvGeomWrapper.transparent": [[1660, 1663], ["None"], "methods", ["None"], ["", "@", "transparent", ".", "setter", "\n", "def", "transparent", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "transparent", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjvLightWrapper.__init__": [[1666, 1669], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "wrapped", ",", "size_src", "=", "None", ")", ":", "\n", "        ", "self", ".", "_wrapped", "=", "wrapped", "\n", "self", ".", "_size_src", "=", "size_src", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjvLightWrapper.ptr": [[1670, 1673], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "ptr", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_wrapped", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjvLightWrapper.obj": [[1674, 1677], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "obj", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_wrapped", ".", "contents", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjvLightWrapper.pos": [[1685, 1689], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "pos", ".", "setter", "\n", "def", "pos", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_float", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "pos", ",", "val_ptr", ",", "3", "*", "sizeof", "(", "c_float", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjvLightWrapper.dir": [[1696, 1700], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "dir", ".", "setter", "\n", "def", "dir", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_float", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "dir", ",", "val_ptr", ",", "3", "*", "sizeof", "(", "c_float", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjvLightWrapper.attenuation": [[1707, 1711], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "attenuation", ".", "setter", "\n", "def", "attenuation", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_float", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "attenuation", ",", "val_ptr", ",", "3", "*", "sizeof", "(", "c_float", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjvLightWrapper.cutoff": [[1716, 1719], ["None"], "methods", ["None"], ["", "@", "cutoff", ".", "setter", "\n", "def", "cutoff", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "cutoff", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjvLightWrapper.exponent": [[1724, 1727], ["None"], "methods", ["None"], ["", "@", "exponent", ".", "setter", "\n", "def", "exponent", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "exponent", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjvLightWrapper.ambient": [[1734, 1738], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "ambient", ".", "setter", "\n", "def", "ambient", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_float", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "ambient", ",", "val_ptr", ",", "3", "*", "sizeof", "(", "c_float", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjvLightWrapper.diffuse": [[1745, 1749], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "diffuse", ".", "setter", "\n", "def", "diffuse", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_float", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "diffuse", ",", "val_ptr", ",", "3", "*", "sizeof", "(", "c_float", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjvLightWrapper.specular": [[1756, 1760], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "specular", ".", "setter", "\n", "def", "specular", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_float", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "specular", ",", "val_ptr", ",", "3", "*", "sizeof", "(", "c_float", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjvLightWrapper.headlight": [[1765, 1768], ["None"], "methods", ["None"], ["", "@", "headlight", ".", "setter", "\n", "def", "headlight", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "headlight", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjvLightWrapper.directional": [[1773, 1776], ["None"], "methods", ["None"], ["", "@", "directional", ".", "setter", "\n", "def", "directional", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "directional", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjvLightWrapper.castshadow": [[1781, 1784], ["None"], "methods", ["None"], ["", "@", "castshadow", ".", "setter", "\n", "def", "castshadow", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "castshadow", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjvObjectsWrapper.__init__": [[1787, 1790], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "wrapped", ",", "size_src", "=", "None", ")", ":", "\n", "        ", "self", ".", "_wrapped", "=", "wrapped", "\n", "self", ".", "_size_src", "=", "size_src", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjvObjectsWrapper.ptr": [[1791, 1794], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "ptr", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_wrapped", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjvObjectsWrapper.obj": [[1795, 1798], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "obj", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_wrapped", ".", "contents", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjvObjectsWrapper.nlight": [[1804, 1807], ["None"], "methods", ["None"], ["", "@", "nlight", ".", "setter", "\n", "def", "nlight", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "nlight", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjvObjectsWrapper.ngeom": [[1812, 1815], ["None"], "methods", ["None"], ["", "@", "ngeom", ".", "setter", "\n", "def", "ngeom", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "ngeom", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjvObjectsWrapper.maxgeom": [[1820, 1823], ["None"], "methods", ["None"], ["", "@", "maxgeom", ".", "setter", "\n", "def", "maxgeom", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "maxgeom", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjvObjectsWrapper.lights": [[1828, 1831], ["None"], "methods", ["None"], ["", "@", "lights", ".", "setter", "\n", "def", "lights", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "lights", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjOptionWrapper.__init__": [[1834, 1837], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "wrapped", ",", "size_src", "=", "None", ")", ":", "\n", "        ", "self", ".", "_wrapped", "=", "wrapped", "\n", "self", ".", "_size_src", "=", "size_src", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjOptionWrapper.ptr": [[1838, 1841], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "ptr", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_wrapped", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjOptionWrapper.obj": [[1842, 1845], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "obj", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_wrapped", ".", "contents", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjOptionWrapper.timestep": [[1851, 1854], ["None"], "methods", ["None"], ["", "@", "timestep", ".", "setter", "\n", "def", "timestep", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "timestep", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjOptionWrapper.apirate": [[1859, 1862], ["None"], "methods", ["None"], ["", "@", "apirate", ".", "setter", "\n", "def", "apirate", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "apirate", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjOptionWrapper.tolerance": [[1867, 1870], ["None"], "methods", ["None"], ["", "@", "tolerance", ".", "setter", "\n", "def", "tolerance", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "tolerance", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjOptionWrapper.impratio": [[1875, 1878], ["None"], "methods", ["None"], ["", "@", "impratio", ".", "setter", "\n", "def", "impratio", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "impratio", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjOptionWrapper.gravity": [[1885, 1889], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "gravity", ".", "setter", "\n", "def", "gravity", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "gravity", ",", "val_ptr", ",", "3", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjOptionWrapper.wind": [[1896, 1900], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "wind", ".", "setter", "\n", "def", "wind", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "wind", ",", "val_ptr", ",", "3", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjOptionWrapper.magnetic": [[1907, 1911], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "magnetic", ".", "setter", "\n", "def", "magnetic", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "magnetic", ",", "val_ptr", ",", "3", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjOptionWrapper.density": [[1916, 1919], ["None"], "methods", ["None"], ["", "@", "density", ".", "setter", "\n", "def", "density", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "density", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjOptionWrapper.viscosity": [[1924, 1927], ["None"], "methods", ["None"], ["", "@", "viscosity", ".", "setter", "\n", "def", "viscosity", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "viscosity", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjOptionWrapper.o_margin": [[1932, 1935], ["None"], "methods", ["None"], ["", "@", "o_margin", ".", "setter", "\n", "def", "o_margin", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "o_margin", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjOptionWrapper.o_solref": [[1942, 1946], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "o_solref", ".", "setter", "\n", "def", "o_solref", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "o_solref", ",", "val_ptr", ",", "2", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjOptionWrapper.o_solimp": [[1953, 1957], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "o_solimp", ".", "setter", "\n", "def", "o_solimp", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "o_solimp", ",", "val_ptr", ",", "3", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjOptionWrapper.mpr_tolerance": [[1962, 1965], ["None"], "methods", ["None"], ["", "@", "mpr_tolerance", ".", "setter", "\n", "def", "mpr_tolerance", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "mpr_tolerance", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjOptionWrapper.mpr_iterations": [[1970, 1973], ["None"], "methods", ["None"], ["", "@", "mpr_iterations", ".", "setter", "\n", "def", "mpr_iterations", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "mpr_iterations", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjOptionWrapper.integrator": [[1978, 1981], ["None"], "methods", ["None"], ["", "@", "integrator", ".", "setter", "\n", "def", "integrator", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "integrator", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjOptionWrapper.collision": [[1986, 1989], ["None"], "methods", ["None"], ["", "@", "collision", ".", "setter", "\n", "def", "collision", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "collision", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjOptionWrapper.impedance": [[1994, 1997], ["None"], "methods", ["None"], ["", "@", "impedance", ".", "setter", "\n", "def", "impedance", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "impedance", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjOptionWrapper.reference": [[2002, 2005], ["None"], "methods", ["None"], ["", "@", "reference", ".", "setter", "\n", "def", "reference", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "reference", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjOptionWrapper.solver": [[2010, 2013], ["None"], "methods", ["None"], ["", "@", "solver", ".", "setter", "\n", "def", "solver", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "solver", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjOptionWrapper.iterations": [[2018, 2021], ["None"], "methods", ["None"], ["", "@", "iterations", ".", "setter", "\n", "def", "iterations", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "iterations", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjOptionWrapper.disableflags": [[2026, 2029], ["None"], "methods", ["None"], ["", "@", "disableflags", ".", "setter", "\n", "def", "disableflags", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "disableflags", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjOptionWrapper.enableflags": [[2034, 2037], ["None"], "methods", ["None"], ["", "@", "enableflags", ".", "setter", "\n", "def", "enableflags", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "enableflags", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjVisualWrapper.__init__": [[2040, 2043], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "wrapped", ",", "size_src", "=", "None", ")", ":", "\n", "        ", "self", ".", "_wrapped", "=", "wrapped", "\n", "self", ".", "_size_src", "=", "size_src", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjVisualWrapper.ptr": [[2044, 2047], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "ptr", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_wrapped", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjVisualWrapper.obj": [[2048, 2051], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "obj", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_wrapped", ".", "contents", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjVisualWrapper.global_": [[2057, 2060], ["None"], "methods", ["None"], ["", "@", "global_", ".", "setter", "\n", "def", "global_", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "global_", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjVisualWrapper.quality": [[2065, 2068], ["None"], "methods", ["None"], ["", "@", "quality", ".", "setter", "\n", "def", "quality", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "quality", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjVisualWrapper.headlight": [[2073, 2076], ["None"], "methods", ["None"], ["", "@", "headlight", ".", "setter", "\n", "def", "headlight", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "headlight", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjVisualWrapper.map_": [[2081, 2084], ["None"], "methods", ["None"], ["", "@", "map_", ".", "setter", "\n", "def", "map_", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "map_", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjVisualWrapper.scale": [[2089, 2092], ["None"], "methods", ["None"], ["", "@", "scale", ".", "setter", "\n", "def", "scale", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "scale", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjVisualWrapper.rgba": [[2097, 2100], ["None"], "methods", ["None"], ["", "@", "rgba", ".", "setter", "\n", "def", "rgba", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "rgba", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjStatisticWrapper.__init__": [[2103, 2106], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "wrapped", ",", "size_src", "=", "None", ")", ":", "\n", "        ", "self", ".", "_wrapped", "=", "wrapped", "\n", "self", ".", "_size_src", "=", "size_src", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjStatisticWrapper.ptr": [[2107, 2110], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "ptr", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_wrapped", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjStatisticWrapper.obj": [[2111, 2114], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "obj", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_wrapped", ".", "contents", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjStatisticWrapper.meanmass": [[2120, 2123], ["None"], "methods", ["None"], ["", "@", "meanmass", ".", "setter", "\n", "def", "meanmass", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "meanmass", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjStatisticWrapper.meansize": [[2128, 2131], ["None"], "methods", ["None"], ["", "@", "meansize", ".", "setter", "\n", "def", "meansize", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "meansize", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjStatisticWrapper.extent": [[2136, 2139], ["None"], "methods", ["None"], ["", "@", "extent", ".", "setter", "\n", "def", "extent", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "extent", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjStatisticWrapper.center": [[2146, 2150], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "center", ".", "setter", "\n", "def", "center", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "center", ",", "val_ptr", ",", "3", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjDataWrapper.__init__": [[2153, 2156], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "wrapped", ",", "size_src", "=", "None", ")", ":", "\n", "        ", "self", ".", "_wrapped", "=", "wrapped", "\n", "self", ".", "_size_src", "=", "size_src", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjDataWrapper.ptr": [[2157, 2160], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "ptr", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_wrapped", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjDataWrapper.obj": [[2161, 2164], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "obj", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_wrapped", ".", "contents", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjDataWrapper.nstack": [[2170, 2173], ["None"], "methods", ["None"], ["", "@", "nstack", ".", "setter", "\n", "def", "nstack", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "nstack", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjDataWrapper.nbuffer": [[2178, 2181], ["None"], "methods", ["None"], ["", "@", "nbuffer", ".", "setter", "\n", "def", "nbuffer", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "nbuffer", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjDataWrapper.pstack": [[2186, 2189], ["None"], "methods", ["None"], ["", "@", "pstack", ".", "setter", "\n", "def", "pstack", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "pstack", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjDataWrapper.maxstackuse": [[2194, 2197], ["None"], "methods", ["None"], ["", "@", "maxstackuse", ".", "setter", "\n", "def", "maxstackuse", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "maxstackuse", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjDataWrapper.ne": [[2202, 2205], ["None"], "methods", ["None"], ["", "@", "ne", ".", "setter", "\n", "def", "ne", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "ne", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjDataWrapper.nf": [[2210, 2213], ["None"], "methods", ["None"], ["", "@", "nf", ".", "setter", "\n", "def", "nf", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "nf", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjDataWrapper.nefc": [[2218, 2221], ["None"], "methods", ["None"], ["", "@", "nefc", ".", "setter", "\n", "def", "nefc", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "nefc", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjDataWrapper.ncon": [[2226, 2229], ["None"], "methods", ["None"], ["", "@", "ncon", ".", "setter", "\n", "def", "ncon", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "ncon", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjDataWrapper.nwarning": [[2236, 2240], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "nwarning", ".", "setter", "\n", "def", "nwarning", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_int", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "nwarning", ",", "val_ptr", ",", "8", "*", "sizeof", "(", "c_int", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjDataWrapper.warning_info": [[2247, 2251], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "warning_info", ".", "setter", "\n", "def", "warning_info", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_int", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "warning_info", ",", "val_ptr", ",", "8", "*", "sizeof", "(", "c_int", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjDataWrapper.timer_duration": [[2258, 2262], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "timer_duration", ".", "setter", "\n", "def", "timer_duration", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "timer_duration", ",", "val_ptr", ",", "14", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjDataWrapper.timer_ncall": [[2269, 2273], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "timer_ncall", ".", "setter", "\n", "def", "timer_ncall", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "timer_ncall", ",", "val_ptr", ",", "14", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjDataWrapper.mocaptime": [[2280, 2284], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "mocaptime", ".", "setter", "\n", "def", "mocaptime", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "mocaptime", ",", "val_ptr", ",", "3", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjDataWrapper.time": [[2289, 2292], ["None"], "methods", ["None"], ["", "@", "time", ".", "setter", "\n", "def", "time", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "time", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjDataWrapper.energy": [[2299, 2303], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "energy", ".", "setter", "\n", "def", "energy", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "energy", ",", "val_ptr", ",", "2", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjDataWrapper.solverstat": [[2310, 2314], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "solverstat", ".", "setter", "\n", "def", "solverstat", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "solverstat", ",", "val_ptr", ",", "4", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjDataWrapper.solvertrace": [[2321, 2325], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "solvertrace", ".", "setter", "\n", "def", "solvertrace", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "solvertrace", ",", "val_ptr", ",", "200", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjDataWrapper.buffer": [[2332, 2336], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "buffer", ".", "setter", "\n", "def", "buffer", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_ubyte", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "buffer", ",", "val_ptr", ",", "self", ".", "nbuffer", "*", "sizeof", "(", "c_ubyte", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjDataWrapper.stack": [[2343, 2347], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "stack", ".", "setter", "\n", "def", "stack", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "stack", ",", "val_ptr", ",", "self", ".", "nstack", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjDataWrapper.qpos": [[2354, 2358], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "qpos", ".", "setter", "\n", "def", "qpos", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "qpos", ",", "val_ptr", ",", "self", ".", "_size_src", ".", "nq", "*", "1", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjDataWrapper.qvel": [[2365, 2369], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "qvel", ".", "setter", "\n", "def", "qvel", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "qvel", ",", "val_ptr", ",", "self", ".", "_size_src", ".", "nv", "*", "1", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjDataWrapper.act": [[2376, 2380], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "act", ".", "setter", "\n", "def", "act", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "act", ",", "val_ptr", ",", "self", ".", "_size_src", ".", "na", "*", "1", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjDataWrapper.ctrl": [[2387, 2391], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "ctrl", ".", "setter", "\n", "def", "ctrl", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "ctrl", ",", "val_ptr", ",", "self", ".", "_size_src", ".", "nu", "*", "1", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjDataWrapper.qfrc_applied": [[2398, 2402], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "qfrc_applied", ".", "setter", "\n", "def", "qfrc_applied", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "qfrc_applied", ",", "val_ptr", ",", "self", ".", "_size_src", ".", "nv", "*", "1", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjDataWrapper.xfrc_applied": [[2409, 2413], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "xfrc_applied", ".", "setter", "\n", "def", "xfrc_applied", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "xfrc_applied", ",", "val_ptr", ",", "self", ".", "_size_src", ".", "nbody", "*", "6", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjDataWrapper.qacc": [[2420, 2424], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "qacc", ".", "setter", "\n", "def", "qacc", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "qacc", ",", "val_ptr", ",", "self", ".", "_size_src", ".", "nv", "*", "1", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjDataWrapper.act_dot": [[2431, 2435], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "act_dot", ".", "setter", "\n", "def", "act_dot", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "act_dot", ",", "val_ptr", ",", "self", ".", "_size_src", ".", "na", "*", "1", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjDataWrapper.mocap_pos": [[2442, 2446], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "mocap_pos", ".", "setter", "\n", "def", "mocap_pos", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "mocap_pos", ",", "val_ptr", ",", "self", ".", "_size_src", ".", "nmocap", "*", "3", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjDataWrapper.mocap_quat": [[2453, 2457], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "mocap_quat", ".", "setter", "\n", "def", "mocap_quat", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "mocap_quat", ",", "val_ptr", ",", "self", ".", "_size_src", ".", "nmocap", "*", "4", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjDataWrapper.userdata": [[2464, 2468], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "userdata", ".", "setter", "\n", "def", "userdata", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "userdata", ",", "val_ptr", ",", "self", ".", "_size_src", ".", "nuserdata", "*", "1", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjDataWrapper.sensordata": [[2475, 2479], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "sensordata", ".", "setter", "\n", "def", "sensordata", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "sensordata", ",", "val_ptr", ",", "self", ".", "_size_src", ".", "nsensordata", "*", "1", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjDataWrapper.xpos": [[2486, 2490], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "xpos", ".", "setter", "\n", "def", "xpos", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "xpos", ",", "val_ptr", ",", "self", ".", "_size_src", ".", "nbody", "*", "3", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjDataWrapper.xquat": [[2497, 2501], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "xquat", ".", "setter", "\n", "def", "xquat", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "xquat", ",", "val_ptr", ",", "self", ".", "_size_src", ".", "nbody", "*", "4", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjDataWrapper.xmat": [[2508, 2512], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "xmat", ".", "setter", "\n", "def", "xmat", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "xmat", ",", "val_ptr", ",", "self", ".", "_size_src", ".", "nbody", "*", "9", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjDataWrapper.xipos": [[2519, 2523], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "xipos", ".", "setter", "\n", "def", "xipos", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "xipos", ",", "val_ptr", ",", "self", ".", "_size_src", ".", "nbody", "*", "3", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjDataWrapper.ximat": [[2530, 2534], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "ximat", ".", "setter", "\n", "def", "ximat", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "ximat", ",", "val_ptr", ",", "self", ".", "_size_src", ".", "nbody", "*", "9", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjDataWrapper.xanchor": [[2541, 2545], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "xanchor", ".", "setter", "\n", "def", "xanchor", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "xanchor", ",", "val_ptr", ",", "self", ".", "_size_src", ".", "njnt", "*", "3", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjDataWrapper.xaxis": [[2552, 2556], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "xaxis", ".", "setter", "\n", "def", "xaxis", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "xaxis", ",", "val_ptr", ",", "self", ".", "_size_src", ".", "njnt", "*", "3", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjDataWrapper.geom_xpos": [[2563, 2567], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "geom_xpos", ".", "setter", "\n", "def", "geom_xpos", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "geom_xpos", ",", "val_ptr", ",", "self", ".", "_size_src", ".", "ngeom", "*", "3", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjDataWrapper.geom_xmat": [[2574, 2578], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "geom_xmat", ".", "setter", "\n", "def", "geom_xmat", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "geom_xmat", ",", "val_ptr", ",", "self", ".", "_size_src", ".", "ngeom", "*", "9", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjDataWrapper.site_xpos": [[2585, 2589], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "site_xpos", ".", "setter", "\n", "def", "site_xpos", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "site_xpos", ",", "val_ptr", ",", "self", ".", "_size_src", ".", "nsite", "*", "3", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjDataWrapper.site_xmat": [[2596, 2600], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "site_xmat", ".", "setter", "\n", "def", "site_xmat", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "site_xmat", ",", "val_ptr", ",", "self", ".", "_size_src", ".", "nsite", "*", "9", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjDataWrapper.cam_xpos": [[2607, 2611], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "cam_xpos", ".", "setter", "\n", "def", "cam_xpos", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "cam_xpos", ",", "val_ptr", ",", "self", ".", "_size_src", ".", "ncam", "*", "3", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjDataWrapper.cam_xmat": [[2618, 2622], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "cam_xmat", ".", "setter", "\n", "def", "cam_xmat", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "cam_xmat", ",", "val_ptr", ",", "self", ".", "_size_src", ".", "ncam", "*", "9", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjDataWrapper.light_xpos": [[2629, 2633], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "light_xpos", ".", "setter", "\n", "def", "light_xpos", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "light_xpos", ",", "val_ptr", ",", "self", ".", "_size_src", ".", "nlight", "*", "3", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjDataWrapper.light_xdir": [[2640, 2644], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "light_xdir", ".", "setter", "\n", "def", "light_xdir", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "light_xdir", ",", "val_ptr", ",", "self", ".", "_size_src", ".", "nlight", "*", "3", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjDataWrapper.com_subtree": [[2651, 2655], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "com_subtree", ".", "setter", "\n", "def", "com_subtree", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "com_subtree", ",", "val_ptr", ",", "self", ".", "_size_src", ".", "nbody", "*", "3", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjDataWrapper.cdof": [[2662, 2666], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "cdof", ".", "setter", "\n", "def", "cdof", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "cdof", ",", "val_ptr", ",", "self", ".", "_size_src", ".", "nv", "*", "6", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjDataWrapper.cinert": [[2673, 2677], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "cinert", ".", "setter", "\n", "def", "cinert", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "cinert", ",", "val_ptr", ",", "self", ".", "_size_src", ".", "nbody", "*", "10", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjDataWrapper.ten_wrapadr": [[2684, 2688], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "ten_wrapadr", ".", "setter", "\n", "def", "ten_wrapadr", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_int", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "ten_wrapadr", ",", "val_ptr", ",", "self", ".", "_size_src", ".", "ntendon", "*", "1", "*", "sizeof", "(", "c_int", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjDataWrapper.ten_wrapnum": [[2695, 2699], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "ten_wrapnum", ".", "setter", "\n", "def", "ten_wrapnum", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_int", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "ten_wrapnum", ",", "val_ptr", ",", "self", ".", "_size_src", ".", "ntendon", "*", "1", "*", "sizeof", "(", "c_int", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjDataWrapper.ten_length": [[2706, 2710], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "ten_length", ".", "setter", "\n", "def", "ten_length", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "ten_length", ",", "val_ptr", ",", "self", ".", "_size_src", ".", "ntendon", "*", "1", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjDataWrapper.ten_moment": [[2717, 2721], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "ten_moment", ".", "setter", "\n", "def", "ten_moment", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "ten_moment", ",", "val_ptr", ",", "self", ".", "_size_src", ".", "ntendon", "*", "self", ".", "_size_src", ".", "nv", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjDataWrapper.wrap_obj": [[2728, 2732], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "wrap_obj", ".", "setter", "\n", "def", "wrap_obj", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_int", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "wrap_obj", ",", "val_ptr", ",", "self", ".", "_size_src", ".", "nwrap", "*", "2", "*", "sizeof", "(", "c_int", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjDataWrapper.wrap_xpos": [[2739, 2743], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "wrap_xpos", ".", "setter", "\n", "def", "wrap_xpos", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "wrap_xpos", ",", "val_ptr", ",", "self", ".", "_size_src", ".", "nwrap", "*", "6", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjDataWrapper.actuator_length": [[2750, 2754], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "actuator_length", ".", "setter", "\n", "def", "actuator_length", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "actuator_length", ",", "val_ptr", ",", "self", ".", "_size_src", ".", "nu", "*", "1", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjDataWrapper.actuator_moment": [[2761, 2765], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "actuator_moment", ".", "setter", "\n", "def", "actuator_moment", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "actuator_moment", ",", "val_ptr", ",", "self", ".", "_size_src", ".", "nu", "*", "self", ".", "_size_src", ".", "nv", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjDataWrapper.crb": [[2772, 2776], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "crb", ".", "setter", "\n", "def", "crb", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "crb", ",", "val_ptr", ",", "self", ".", "_size_src", ".", "nbody", "*", "10", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjDataWrapper.qM": [[2783, 2787], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "qM", ".", "setter", "\n", "def", "qM", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "qM", ",", "val_ptr", ",", "self", ".", "_size_src", ".", "nM", "*", "1", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjDataWrapper.qLD": [[2794, 2798], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "qLD", ".", "setter", "\n", "def", "qLD", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "qLD", ",", "val_ptr", ",", "self", ".", "_size_src", ".", "nM", "*", "1", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjDataWrapper.qLDiagInv": [[2805, 2809], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "qLDiagInv", ".", "setter", "\n", "def", "qLDiagInv", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "qLDiagInv", ",", "val_ptr", ",", "self", ".", "_size_src", ".", "nv", "*", "1", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjDataWrapper.qLDiagSqrtInv": [[2816, 2820], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "qLDiagSqrtInv", ".", "setter", "\n", "def", "qLDiagSqrtInv", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "qLDiagSqrtInv", ",", "val_ptr", ",", "self", ".", "_size_src", ".", "nv", "*", "1", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjDataWrapper.efc_type": [[2827, 2831], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "efc_type", ".", "setter", "\n", "def", "efc_type", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_int", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "efc_type", ",", "val_ptr", ",", "self", ".", "_size_src", ".", "njmax", "*", "1", "*", "sizeof", "(", "c_int", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjDataWrapper.efc_id": [[2838, 2842], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "efc_id", ".", "setter", "\n", "def", "efc_id", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_int", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "efc_id", ",", "val_ptr", ",", "self", ".", "_size_src", ".", "njmax", "*", "1", "*", "sizeof", "(", "c_int", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjDataWrapper.efc_rownnz": [[2849, 2853], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "efc_rownnz", ".", "setter", "\n", "def", "efc_rownnz", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_int", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "efc_rownnz", ",", "val_ptr", ",", "self", ".", "_size_src", ".", "njmax", "*", "1", "*", "sizeof", "(", "c_int", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjDataWrapper.efc_rowadr": [[2860, 2864], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "efc_rowadr", ".", "setter", "\n", "def", "efc_rowadr", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_int", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "efc_rowadr", ",", "val_ptr", ",", "self", ".", "_size_src", ".", "njmax", "*", "1", "*", "sizeof", "(", "c_int", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjDataWrapper.efc_colind": [[2871, 2875], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "efc_colind", ".", "setter", "\n", "def", "efc_colind", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_int", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "efc_colind", ",", "val_ptr", ",", "self", ".", "_size_src", ".", "njmax", "*", "self", ".", "_size_src", ".", "nv", "*", "sizeof", "(", "c_int", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjDataWrapper.efc_rownnz_T": [[2882, 2886], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "efc_rownnz_T", ".", "setter", "\n", "def", "efc_rownnz_T", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_int", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "efc_rownnz_T", ",", "val_ptr", ",", "self", ".", "_size_src", ".", "nv", "*", "1", "*", "sizeof", "(", "c_int", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjDataWrapper.efc_rowadr_T": [[2893, 2897], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "efc_rowadr_T", ".", "setter", "\n", "def", "efc_rowadr_T", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_int", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "efc_rowadr_T", ",", "val_ptr", ",", "self", ".", "_size_src", ".", "nv", "*", "1", "*", "sizeof", "(", "c_int", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjDataWrapper.efc_colind_T": [[2904, 2908], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "efc_colind_T", ".", "setter", "\n", "def", "efc_colind_T", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_int", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "efc_colind_T", ",", "val_ptr", ",", "self", ".", "_size_src", ".", "nv", "*", "self", ".", "_size_src", ".", "njmax", "*", "sizeof", "(", "c_int", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjDataWrapper.efc_solref": [[2915, 2919], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "efc_solref", ".", "setter", "\n", "def", "efc_solref", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "efc_solref", ",", "val_ptr", ",", "self", ".", "_size_src", ".", "njmax", "*", "2", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjDataWrapper.efc_solimp": [[2926, 2930], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "efc_solimp", ".", "setter", "\n", "def", "efc_solimp", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "efc_solimp", ",", "val_ptr", ",", "self", ".", "_size_src", ".", "njmax", "*", "3", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjDataWrapper.efc_margin": [[2937, 2941], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "efc_margin", ".", "setter", "\n", "def", "efc_margin", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "efc_margin", ",", "val_ptr", ",", "self", ".", "_size_src", ".", "njmax", "*", "1", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjDataWrapper.efc_frictionloss": [[2948, 2952], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "efc_frictionloss", ".", "setter", "\n", "def", "efc_frictionloss", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "efc_frictionloss", ",", "val_ptr", ",", "self", ".", "_size_src", ".", "njmax", "*", "1", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjDataWrapper.efc_pos": [[2959, 2963], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "efc_pos", ".", "setter", "\n", "def", "efc_pos", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "efc_pos", ",", "val_ptr", ",", "self", ".", "_size_src", ".", "njmax", "*", "1", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjDataWrapper.efc_J": [[2970, 2974], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "efc_J", ".", "setter", "\n", "def", "efc_J", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "efc_J", ",", "val_ptr", ",", "self", ".", "_size_src", ".", "njmax", "*", "self", ".", "_size_src", ".", "nv", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjDataWrapper.efc_J_T": [[2981, 2985], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "efc_J_T", ".", "setter", "\n", "def", "efc_J_T", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "efc_J_T", ",", "val_ptr", ",", "self", ".", "_size_src", ".", "nv", "*", "self", ".", "_size_src", ".", "njmax", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjDataWrapper.efc_diagApprox": [[2992, 2996], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "efc_diagApprox", ".", "setter", "\n", "def", "efc_diagApprox", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "efc_diagApprox", ",", "val_ptr", ",", "self", ".", "_size_src", ".", "njmax", "*", "1", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjDataWrapper.efc_D": [[3003, 3007], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "efc_D", ".", "setter", "\n", "def", "efc_D", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "efc_D", ",", "val_ptr", ",", "self", ".", "_size_src", ".", "njmax", "*", "1", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjDataWrapper.efc_R": [[3014, 3018], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "efc_R", ".", "setter", "\n", "def", "efc_R", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "efc_R", ",", "val_ptr", ",", "self", ".", "_size_src", ".", "njmax", "*", "1", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjDataWrapper.efc_AR": [[3025, 3029], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "efc_AR", ".", "setter", "\n", "def", "efc_AR", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "efc_AR", ",", "val_ptr", ",", "self", ".", "_size_src", ".", "njmax", "*", "self", ".", "_size_src", ".", "njmax", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjDataWrapper.e_ARchol": [[3036, 3040], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "e_ARchol", ".", "setter", "\n", "def", "e_ARchol", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "e_ARchol", ",", "val_ptr", ",", "self", ".", "_size_src", ".", "nemax", "*", "self", ".", "_size_src", ".", "nemax", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjDataWrapper.fc_e_rect": [[3047, 3051], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "fc_e_rect", ".", "setter", "\n", "def", "fc_e_rect", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "fc_e_rect", ",", "val_ptr", ",", "self", ".", "_size_src", ".", "njmax", "*", "self", ".", "_size_src", ".", "nemax", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjDataWrapper.fc_AR": [[3058, 3062], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "fc_AR", ".", "setter", "\n", "def", "fc_AR", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "fc_AR", ",", "val_ptr", ",", "self", ".", "_size_src", ".", "njmax", "*", "self", ".", "_size_src", ".", "njmax", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjDataWrapper.ten_velocity": [[3069, 3073], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "ten_velocity", ".", "setter", "\n", "def", "ten_velocity", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "ten_velocity", ",", "val_ptr", ",", "self", ".", "_size_src", ".", "ntendon", "*", "1", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjDataWrapper.actuator_velocity": [[3080, 3084], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "actuator_velocity", ".", "setter", "\n", "def", "actuator_velocity", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "actuator_velocity", ",", "val_ptr", ",", "self", ".", "_size_src", ".", "nu", "*", "1", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjDataWrapper.cvel": [[3091, 3095], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "cvel", ".", "setter", "\n", "def", "cvel", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "cvel", ",", "val_ptr", ",", "self", ".", "_size_src", ".", "nbody", "*", "6", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjDataWrapper.cdof_dot": [[3102, 3106], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "cdof_dot", ".", "setter", "\n", "def", "cdof_dot", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "cdof_dot", ",", "val_ptr", ",", "self", ".", "_size_src", ".", "nv", "*", "6", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjDataWrapper.qfrc_bias": [[3113, 3117], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "qfrc_bias", ".", "setter", "\n", "def", "qfrc_bias", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "qfrc_bias", ",", "val_ptr", ",", "self", ".", "_size_src", ".", "nv", "*", "1", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjDataWrapper.qfrc_passive": [[3124, 3128], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "qfrc_passive", ".", "setter", "\n", "def", "qfrc_passive", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "qfrc_passive", ",", "val_ptr", ",", "self", ".", "_size_src", ".", "nv", "*", "1", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjDataWrapper.efc_vel": [[3135, 3139], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "efc_vel", ".", "setter", "\n", "def", "efc_vel", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "efc_vel", ",", "val_ptr", ",", "self", ".", "_size_src", ".", "njmax", "*", "1", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjDataWrapper.efc_aref": [[3146, 3150], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "efc_aref", ".", "setter", "\n", "def", "efc_aref", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "efc_aref", ",", "val_ptr", ",", "self", ".", "_size_src", ".", "njmax", "*", "1", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjDataWrapper.actuator_force": [[3157, 3161], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "actuator_force", ".", "setter", "\n", "def", "actuator_force", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "actuator_force", ",", "val_ptr", ",", "self", ".", "_size_src", ".", "nu", "*", "1", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjDataWrapper.qfrc_actuator": [[3168, 3172], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "qfrc_actuator", ".", "setter", "\n", "def", "qfrc_actuator", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "qfrc_actuator", ",", "val_ptr", ",", "self", ".", "_size_src", ".", "nv", "*", "1", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjDataWrapper.qfrc_unc": [[3179, 3183], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "qfrc_unc", ".", "setter", "\n", "def", "qfrc_unc", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "qfrc_unc", ",", "val_ptr", ",", "self", ".", "_size_src", ".", "nv", "*", "1", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjDataWrapper.qacc_unc": [[3190, 3194], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "qacc_unc", ".", "setter", "\n", "def", "qacc_unc", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "qacc_unc", ",", "val_ptr", ",", "self", ".", "_size_src", ".", "nv", "*", "1", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjDataWrapper.efc_b": [[3201, 3205], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "efc_b", ".", "setter", "\n", "def", "efc_b", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "efc_b", ",", "val_ptr", ",", "self", ".", "_size_src", ".", "njmax", "*", "1", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjDataWrapper.fc_b": [[3212, 3216], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "fc_b", ".", "setter", "\n", "def", "fc_b", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "fc_b", ",", "val_ptr", ",", "self", ".", "_size_src", ".", "njmax", "*", "1", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjDataWrapper.efc_force": [[3223, 3227], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "efc_force", ".", "setter", "\n", "def", "efc_force", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "efc_force", ",", "val_ptr", ",", "self", ".", "_size_src", ".", "njmax", "*", "1", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjDataWrapper.qfrc_constraint": [[3234, 3238], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "qfrc_constraint", ".", "setter", "\n", "def", "qfrc_constraint", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "qfrc_constraint", ",", "val_ptr", ",", "self", ".", "_size_src", ".", "nv", "*", "1", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjDataWrapper.qfrc_inverse": [[3245, 3249], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "qfrc_inverse", ".", "setter", "\n", "def", "qfrc_inverse", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "qfrc_inverse", ",", "val_ptr", ",", "self", ".", "_size_src", ".", "nv", "*", "1", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjDataWrapper.cacc": [[3256, 3260], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "cacc", ".", "setter", "\n", "def", "cacc", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "cacc", ",", "val_ptr", ",", "self", ".", "_size_src", ".", "nbody", "*", "6", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjDataWrapper.cfrc_int": [[3267, 3271], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "cfrc_int", ".", "setter", "\n", "def", "cfrc_int", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "cfrc_int", ",", "val_ptr", ",", "self", ".", "_size_src", ".", "nbody", "*", "6", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjDataWrapper.cfrc_ext": [[3278, 3282], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "cfrc_ext", ".", "setter", "\n", "def", "cfrc_ext", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "cfrc_ext", ",", "val_ptr", ",", "self", ".", "_size_src", ".", "nbody", "*", "6", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.__init__": [[3285, 3288], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "wrapped", ",", "size_src", "=", "None", ")", ":", "\n", "        ", "self", ".", "_wrapped", "=", "wrapped", "\n", "self", ".", "_size_src", "=", "size_src", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.ptr": [[3289, 3292], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "ptr", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_wrapped", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.obj": [[3293, 3296], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "obj", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_wrapped", ".", "contents", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.nq": [[3302, 3305], ["None"], "methods", ["None"], ["", "@", "nq", ".", "setter", "\n", "def", "nq", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "nq", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.nv": [[3310, 3313], ["None"], "methods", ["None"], ["", "@", "nv", ".", "setter", "\n", "def", "nv", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "nv", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.nu": [[3318, 3321], ["None"], "methods", ["None"], ["", "@", "nu", ".", "setter", "\n", "def", "nu", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "nu", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.na": [[3326, 3329], ["None"], "methods", ["None"], ["", "@", "na", ".", "setter", "\n", "def", "na", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "na", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.nbody": [[3334, 3337], ["None"], "methods", ["None"], ["", "@", "nbody", ".", "setter", "\n", "def", "nbody", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "nbody", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.njnt": [[3342, 3345], ["None"], "methods", ["None"], ["", "@", "njnt", ".", "setter", "\n", "def", "njnt", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "njnt", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.ngeom": [[3350, 3353], ["None"], "methods", ["None"], ["", "@", "ngeom", ".", "setter", "\n", "def", "ngeom", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "ngeom", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.nsite": [[3358, 3361], ["None"], "methods", ["None"], ["", "@", "nsite", ".", "setter", "\n", "def", "nsite", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "nsite", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.ncam": [[3366, 3369], ["None"], "methods", ["None"], ["", "@", "ncam", ".", "setter", "\n", "def", "ncam", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "ncam", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.nlight": [[3374, 3377], ["None"], "methods", ["None"], ["", "@", "nlight", ".", "setter", "\n", "def", "nlight", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "nlight", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.nmesh": [[3382, 3385], ["None"], "methods", ["None"], ["", "@", "nmesh", ".", "setter", "\n", "def", "nmesh", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "nmesh", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.nmeshvert": [[3390, 3393], ["None"], "methods", ["None"], ["", "@", "nmeshvert", ".", "setter", "\n", "def", "nmeshvert", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "nmeshvert", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.nmeshface": [[3398, 3401], ["None"], "methods", ["None"], ["", "@", "nmeshface", ".", "setter", "\n", "def", "nmeshface", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "nmeshface", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.nmeshgraph": [[3406, 3409], ["None"], "methods", ["None"], ["", "@", "nmeshgraph", ".", "setter", "\n", "def", "nmeshgraph", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "nmeshgraph", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.nhfield": [[3414, 3417], ["None"], "methods", ["None"], ["", "@", "nhfield", ".", "setter", "\n", "def", "nhfield", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "nhfield", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.nhfielddata": [[3422, 3425], ["None"], "methods", ["None"], ["", "@", "nhfielddata", ".", "setter", "\n", "def", "nhfielddata", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "nhfielddata", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.ntex": [[3430, 3433], ["None"], "methods", ["None"], ["", "@", "ntex", ".", "setter", "\n", "def", "ntex", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "ntex", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.ntexdata": [[3438, 3441], ["None"], "methods", ["None"], ["", "@", "ntexdata", ".", "setter", "\n", "def", "ntexdata", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "ntexdata", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.nmat": [[3446, 3449], ["None"], "methods", ["None"], ["", "@", "nmat", ".", "setter", "\n", "def", "nmat", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "nmat", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.npair": [[3454, 3457], ["None"], "methods", ["None"], ["", "@", "npair", ".", "setter", "\n", "def", "npair", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "npair", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.nexclude": [[3462, 3465], ["None"], "methods", ["None"], ["", "@", "nexclude", ".", "setter", "\n", "def", "nexclude", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "nexclude", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.neq": [[3470, 3473], ["None"], "methods", ["None"], ["", "@", "neq", ".", "setter", "\n", "def", "neq", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "neq", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.ntendon": [[3478, 3481], ["None"], "methods", ["None"], ["", "@", "ntendon", ".", "setter", "\n", "def", "ntendon", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "ntendon", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.nwrap": [[3486, 3489], ["None"], "methods", ["None"], ["", "@", "nwrap", ".", "setter", "\n", "def", "nwrap", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "nwrap", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.nsensor": [[3494, 3497], ["None"], "methods", ["None"], ["", "@", "nsensor", ".", "setter", "\n", "def", "nsensor", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "nsensor", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.nnumeric": [[3502, 3505], ["None"], "methods", ["None"], ["", "@", "nnumeric", ".", "setter", "\n", "def", "nnumeric", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "nnumeric", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.nnumericdata": [[3510, 3513], ["None"], "methods", ["None"], ["", "@", "nnumericdata", ".", "setter", "\n", "def", "nnumericdata", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "nnumericdata", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.ntext": [[3518, 3521], ["None"], "methods", ["None"], ["", "@", "ntext", ".", "setter", "\n", "def", "ntext", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "ntext", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.ntextdata": [[3526, 3529], ["None"], "methods", ["None"], ["", "@", "ntextdata", ".", "setter", "\n", "def", "ntextdata", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "ntextdata", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.nkey": [[3534, 3537], ["None"], "methods", ["None"], ["", "@", "nkey", ".", "setter", "\n", "def", "nkey", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "nkey", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.nuser_body": [[3542, 3545], ["None"], "methods", ["None"], ["", "@", "nuser_body", ".", "setter", "\n", "def", "nuser_body", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "nuser_body", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.nuser_jnt": [[3550, 3553], ["None"], "methods", ["None"], ["", "@", "nuser_jnt", ".", "setter", "\n", "def", "nuser_jnt", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "nuser_jnt", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.nuser_geom": [[3558, 3561], ["None"], "methods", ["None"], ["", "@", "nuser_geom", ".", "setter", "\n", "def", "nuser_geom", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "nuser_geom", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.nuser_site": [[3566, 3569], ["None"], "methods", ["None"], ["", "@", "nuser_site", ".", "setter", "\n", "def", "nuser_site", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "nuser_site", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.nuser_tendon": [[3574, 3577], ["None"], "methods", ["None"], ["", "@", "nuser_tendon", ".", "setter", "\n", "def", "nuser_tendon", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "nuser_tendon", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.nuser_actuator": [[3582, 3585], ["None"], "methods", ["None"], ["", "@", "nuser_actuator", ".", "setter", "\n", "def", "nuser_actuator", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "nuser_actuator", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.nuser_sensor": [[3590, 3593], ["None"], "methods", ["None"], ["", "@", "nuser_sensor", ".", "setter", "\n", "def", "nuser_sensor", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "nuser_sensor", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.nnames": [[3598, 3601], ["None"], "methods", ["None"], ["", "@", "nnames", ".", "setter", "\n", "def", "nnames", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "nnames", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.nM": [[3606, 3609], ["None"], "methods", ["None"], ["", "@", "nM", ".", "setter", "\n", "def", "nM", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "nM", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.nemax": [[3614, 3617], ["None"], "methods", ["None"], ["", "@", "nemax", ".", "setter", "\n", "def", "nemax", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "nemax", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.njmax": [[3622, 3625], ["None"], "methods", ["None"], ["", "@", "njmax", ".", "setter", "\n", "def", "njmax", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "njmax", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.nconmax": [[3630, 3633], ["None"], "methods", ["None"], ["", "@", "nconmax", ".", "setter", "\n", "def", "nconmax", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "nconmax", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.nstack": [[3638, 3641], ["None"], "methods", ["None"], ["", "@", "nstack", ".", "setter", "\n", "def", "nstack", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "nstack", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.nuserdata": [[3646, 3649], ["None"], "methods", ["None"], ["", "@", "nuserdata", ".", "setter", "\n", "def", "nuserdata", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "nuserdata", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.nmocap": [[3654, 3657], ["None"], "methods", ["None"], ["", "@", "nmocap", ".", "setter", "\n", "def", "nmocap", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "nmocap", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.nsensordata": [[3662, 3665], ["None"], "methods", ["None"], ["", "@", "nsensordata", ".", "setter", "\n", "def", "nsensordata", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "nsensordata", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.nbuffer": [[3670, 3673], ["None"], "methods", ["None"], ["", "@", "nbuffer", ".", "setter", "\n", "def", "nbuffer", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "nbuffer", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.opt": [[3678, 3681], ["None"], "methods", ["None"], ["", "@", "opt", ".", "setter", "\n", "def", "opt", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "opt", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.vis": [[3686, 3689], ["None"], "methods", ["None"], ["", "@", "vis", ".", "setter", "\n", "def", "vis", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "vis", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.stat": [[3694, 3697], ["None"], "methods", ["None"], ["", "@", "stat", ".", "setter", "\n", "def", "stat", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "stat", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.buffer": [[3704, 3708], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "buffer", ".", "setter", "\n", "def", "buffer", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_ubyte", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "buffer", ",", "val_ptr", ",", "self", ".", "nbuffer", "*", "sizeof", "(", "c_ubyte", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.qpos0": [[3715, 3719], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "qpos0", ".", "setter", "\n", "def", "qpos0", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "qpos0", ",", "val_ptr", ",", "self", ".", "nq", "*", "1", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.qpos_spring": [[3726, 3730], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "qpos_spring", ".", "setter", "\n", "def", "qpos_spring", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "qpos_spring", ",", "val_ptr", ",", "self", ".", "nq", "*", "1", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.body_parentid": [[3737, 3741], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "body_parentid", ".", "setter", "\n", "def", "body_parentid", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_int", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "body_parentid", ",", "val_ptr", ",", "self", ".", "nbody", "*", "1", "*", "sizeof", "(", "c_int", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.body_rootid": [[3748, 3752], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "body_rootid", ".", "setter", "\n", "def", "body_rootid", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_int", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "body_rootid", ",", "val_ptr", ",", "self", ".", "nbody", "*", "1", "*", "sizeof", "(", "c_int", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.body_weldid": [[3759, 3763], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "body_weldid", ".", "setter", "\n", "def", "body_weldid", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_int", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "body_weldid", ",", "val_ptr", ",", "self", ".", "nbody", "*", "1", "*", "sizeof", "(", "c_int", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.body_mocapid": [[3770, 3774], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "body_mocapid", ".", "setter", "\n", "def", "body_mocapid", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_int", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "body_mocapid", ",", "val_ptr", ",", "self", ".", "nbody", "*", "1", "*", "sizeof", "(", "c_int", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.body_jntnum": [[3781, 3785], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "body_jntnum", ".", "setter", "\n", "def", "body_jntnum", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_int", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "body_jntnum", ",", "val_ptr", ",", "self", ".", "nbody", "*", "1", "*", "sizeof", "(", "c_int", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.body_jntadr": [[3792, 3796], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "body_jntadr", ".", "setter", "\n", "def", "body_jntadr", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_int", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "body_jntadr", ",", "val_ptr", ",", "self", ".", "nbody", "*", "1", "*", "sizeof", "(", "c_int", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.body_dofnum": [[3803, 3807], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "body_dofnum", ".", "setter", "\n", "def", "body_dofnum", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_int", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "body_dofnum", ",", "val_ptr", ",", "self", ".", "nbody", "*", "1", "*", "sizeof", "(", "c_int", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.body_dofadr": [[3814, 3818], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "body_dofadr", ".", "setter", "\n", "def", "body_dofadr", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_int", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "body_dofadr", ",", "val_ptr", ",", "self", ".", "nbody", "*", "1", "*", "sizeof", "(", "c_int", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.body_geomnum": [[3825, 3829], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "body_geomnum", ".", "setter", "\n", "def", "body_geomnum", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_int", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "body_geomnum", ",", "val_ptr", ",", "self", ".", "nbody", "*", "1", "*", "sizeof", "(", "c_int", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.body_geomadr": [[3836, 3840], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "body_geomadr", ".", "setter", "\n", "def", "body_geomadr", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_int", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "body_geomadr", ",", "val_ptr", ",", "self", ".", "nbody", "*", "1", "*", "sizeof", "(", "c_int", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.body_pos": [[3847, 3851], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "body_pos", ".", "setter", "\n", "def", "body_pos", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "body_pos", ",", "val_ptr", ",", "self", ".", "nbody", "*", "3", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.body_quat": [[3858, 3862], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "body_quat", ".", "setter", "\n", "def", "body_quat", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "body_quat", ",", "val_ptr", ",", "self", ".", "nbody", "*", "4", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.body_ipos": [[3869, 3873], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "body_ipos", ".", "setter", "\n", "def", "body_ipos", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "body_ipos", ",", "val_ptr", ",", "self", ".", "nbody", "*", "3", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.body_iquat": [[3880, 3884], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "body_iquat", ".", "setter", "\n", "def", "body_iquat", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "body_iquat", ",", "val_ptr", ",", "self", ".", "nbody", "*", "4", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.body_mass": [[3891, 3895], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "body_mass", ".", "setter", "\n", "def", "body_mass", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "body_mass", ",", "val_ptr", ",", "self", ".", "nbody", "*", "1", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.body_inertia": [[3902, 3906], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "body_inertia", ".", "setter", "\n", "def", "body_inertia", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "body_inertia", ",", "val_ptr", ",", "self", ".", "nbody", "*", "3", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.body_invweight0": [[3913, 3917], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "body_invweight0", ".", "setter", "\n", "def", "body_invweight0", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "body_invweight0", ",", "val_ptr", ",", "self", ".", "nbody", "*", "2", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.body_user": [[3924, 3928], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "body_user", ".", "setter", "\n", "def", "body_user", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "body_user", ",", "val_ptr", ",", "self", ".", "nbody", "*", "self", ".", "nuser_body", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.jnt_type": [[3935, 3939], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "jnt_type", ".", "setter", "\n", "def", "jnt_type", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_int", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "jnt_type", ",", "val_ptr", ",", "self", ".", "njnt", "*", "1", "*", "sizeof", "(", "c_int", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.jnt_qposadr": [[3946, 3950], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "jnt_qposadr", ".", "setter", "\n", "def", "jnt_qposadr", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_int", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "jnt_qposadr", ",", "val_ptr", ",", "self", ".", "njnt", "*", "1", "*", "sizeof", "(", "c_int", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.jnt_dofadr": [[3957, 3961], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "jnt_dofadr", ".", "setter", "\n", "def", "jnt_dofadr", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_int", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "jnt_dofadr", ",", "val_ptr", ",", "self", ".", "njnt", "*", "1", "*", "sizeof", "(", "c_int", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.jnt_bodyid": [[3968, 3972], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "jnt_bodyid", ".", "setter", "\n", "def", "jnt_bodyid", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_int", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "jnt_bodyid", ",", "val_ptr", ",", "self", ".", "njnt", "*", "1", "*", "sizeof", "(", "c_int", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.jnt_limited": [[3979, 3983], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "jnt_limited", ".", "setter", "\n", "def", "jnt_limited", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_ubyte", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "jnt_limited", ",", "val_ptr", ",", "self", ".", "njnt", "*", "1", "*", "sizeof", "(", "c_ubyte", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.jnt_solref": [[3990, 3994], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "jnt_solref", ".", "setter", "\n", "def", "jnt_solref", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "jnt_solref", ",", "val_ptr", ",", "self", ".", "njnt", "*", "2", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.jnt_solimp": [[4001, 4005], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "jnt_solimp", ".", "setter", "\n", "def", "jnt_solimp", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "jnt_solimp", ",", "val_ptr", ",", "self", ".", "njnt", "*", "3", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.jnt_pos": [[4012, 4016], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "jnt_pos", ".", "setter", "\n", "def", "jnt_pos", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "jnt_pos", ",", "val_ptr", ",", "self", ".", "njnt", "*", "3", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.jnt_axis": [[4023, 4027], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "jnt_axis", ".", "setter", "\n", "def", "jnt_axis", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "jnt_axis", ",", "val_ptr", ",", "self", ".", "njnt", "*", "3", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.jnt_stiffness": [[4034, 4038], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "jnt_stiffness", ".", "setter", "\n", "def", "jnt_stiffness", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "jnt_stiffness", ",", "val_ptr", ",", "self", ".", "njnt", "*", "1", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.jnt_range": [[4045, 4049], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "jnt_range", ".", "setter", "\n", "def", "jnt_range", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "jnt_range", ",", "val_ptr", ",", "self", ".", "njnt", "*", "2", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.jnt_margin": [[4056, 4060], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "jnt_margin", ".", "setter", "\n", "def", "jnt_margin", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "jnt_margin", ",", "val_ptr", ",", "self", ".", "njnt", "*", "1", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.jnt_user": [[4067, 4071], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "jnt_user", ".", "setter", "\n", "def", "jnt_user", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "jnt_user", ",", "val_ptr", ",", "self", ".", "njnt", "*", "self", ".", "nuser_jnt", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.dof_bodyid": [[4078, 4082], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "dof_bodyid", ".", "setter", "\n", "def", "dof_bodyid", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_int", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "dof_bodyid", ",", "val_ptr", ",", "self", ".", "nv", "*", "1", "*", "sizeof", "(", "c_int", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.dof_jntid": [[4089, 4093], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "dof_jntid", ".", "setter", "\n", "def", "dof_jntid", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_int", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "dof_jntid", ",", "val_ptr", ",", "self", ".", "nv", "*", "1", "*", "sizeof", "(", "c_int", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.dof_parentid": [[4100, 4104], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "dof_parentid", ".", "setter", "\n", "def", "dof_parentid", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_int", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "dof_parentid", ",", "val_ptr", ",", "self", ".", "nv", "*", "1", "*", "sizeof", "(", "c_int", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.dof_Madr": [[4111, 4115], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "dof_Madr", ".", "setter", "\n", "def", "dof_Madr", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_int", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "dof_Madr", ",", "val_ptr", ",", "self", ".", "nv", "*", "1", "*", "sizeof", "(", "c_int", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.dof_frictional": [[4122, 4126], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "dof_frictional", ".", "setter", "\n", "def", "dof_frictional", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_ubyte", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "dof_frictional", ",", "val_ptr", ",", "self", ".", "nv", "*", "1", "*", "sizeof", "(", "c_ubyte", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.dof_solref": [[4133, 4137], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "dof_solref", ".", "setter", "\n", "def", "dof_solref", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "dof_solref", ",", "val_ptr", ",", "self", ".", "nv", "*", "2", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.dof_solimp": [[4144, 4148], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "dof_solimp", ".", "setter", "\n", "def", "dof_solimp", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "dof_solimp", ",", "val_ptr", ",", "self", ".", "nv", "*", "3", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.dof_frictionloss": [[4155, 4159], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "dof_frictionloss", ".", "setter", "\n", "def", "dof_frictionloss", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "dof_frictionloss", ",", "val_ptr", ",", "self", ".", "nv", "*", "1", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.dof_armature": [[4166, 4170], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "dof_armature", ".", "setter", "\n", "def", "dof_armature", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "dof_armature", ",", "val_ptr", ",", "self", ".", "nv", "*", "1", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.dof_damping": [[4177, 4181], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "dof_damping", ".", "setter", "\n", "def", "dof_damping", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "dof_damping", ",", "val_ptr", ",", "self", ".", "nv", "*", "1", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.dof_invweight0": [[4188, 4192], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "dof_invweight0", ".", "setter", "\n", "def", "dof_invweight0", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "dof_invweight0", ",", "val_ptr", ",", "self", ".", "nv", "*", "1", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.geom_type": [[4199, 4203], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "geom_type", ".", "setter", "\n", "def", "geom_type", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_int", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "geom_type", ",", "val_ptr", ",", "self", ".", "ngeom", "*", "1", "*", "sizeof", "(", "c_int", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.geom_contype": [[4210, 4214], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "geom_contype", ".", "setter", "\n", "def", "geom_contype", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_int", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "geom_contype", ",", "val_ptr", ",", "self", ".", "ngeom", "*", "1", "*", "sizeof", "(", "c_int", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.geom_conaffinity": [[4221, 4225], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "geom_conaffinity", ".", "setter", "\n", "def", "geom_conaffinity", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_int", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "geom_conaffinity", ",", "val_ptr", ",", "self", ".", "ngeom", "*", "1", "*", "sizeof", "(", "c_int", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.geom_condim": [[4232, 4236], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "geom_condim", ".", "setter", "\n", "def", "geom_condim", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_int", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "geom_condim", ",", "val_ptr", ",", "self", ".", "ngeom", "*", "1", "*", "sizeof", "(", "c_int", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.geom_bodyid": [[4243, 4247], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "geom_bodyid", ".", "setter", "\n", "def", "geom_bodyid", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_int", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "geom_bodyid", ",", "val_ptr", ",", "self", ".", "ngeom", "*", "1", "*", "sizeof", "(", "c_int", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.geom_dataid": [[4254, 4258], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "geom_dataid", ".", "setter", "\n", "def", "geom_dataid", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_int", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "geom_dataid", ",", "val_ptr", ",", "self", ".", "ngeom", "*", "1", "*", "sizeof", "(", "c_int", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.geom_matid": [[4265, 4269], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "geom_matid", ".", "setter", "\n", "def", "geom_matid", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_int", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "geom_matid", ",", "val_ptr", ",", "self", ".", "ngeom", "*", "1", "*", "sizeof", "(", "c_int", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.geom_group": [[4276, 4280], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "geom_group", ".", "setter", "\n", "def", "geom_group", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_int", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "geom_group", ",", "val_ptr", ",", "self", ".", "ngeom", "*", "1", "*", "sizeof", "(", "c_int", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.geom_solmix": [[4287, 4291], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "geom_solmix", ".", "setter", "\n", "def", "geom_solmix", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "geom_solmix", ",", "val_ptr", ",", "self", ".", "ngeom", "*", "1", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.geom_solref": [[4298, 4302], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "geom_solref", ".", "setter", "\n", "def", "geom_solref", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "geom_solref", ",", "val_ptr", ",", "self", ".", "ngeom", "*", "2", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.geom_solimp": [[4309, 4313], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "geom_solimp", ".", "setter", "\n", "def", "geom_solimp", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "geom_solimp", ",", "val_ptr", ",", "self", ".", "ngeom", "*", "3", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.geom_size": [[4320, 4324], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "geom_size", ".", "setter", "\n", "def", "geom_size", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "geom_size", ",", "val_ptr", ",", "self", ".", "ngeom", "*", "3", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.geom_rbound": [[4331, 4335], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "geom_rbound", ".", "setter", "\n", "def", "geom_rbound", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "geom_rbound", ",", "val_ptr", ",", "self", ".", "ngeom", "*", "1", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.geom_pos": [[4342, 4346], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "geom_pos", ".", "setter", "\n", "def", "geom_pos", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "geom_pos", ",", "val_ptr", ",", "self", ".", "ngeom", "*", "3", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.geom_quat": [[4353, 4357], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "geom_quat", ".", "setter", "\n", "def", "geom_quat", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "geom_quat", ",", "val_ptr", ",", "self", ".", "ngeom", "*", "4", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.geom_friction": [[4364, 4368], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "geom_friction", ".", "setter", "\n", "def", "geom_friction", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "geom_friction", ",", "val_ptr", ",", "self", ".", "ngeom", "*", "3", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.geom_margin": [[4375, 4379], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "geom_margin", ".", "setter", "\n", "def", "geom_margin", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "geom_margin", ",", "val_ptr", ",", "self", ".", "ngeom", "*", "1", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.geom_gap": [[4386, 4390], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "geom_gap", ".", "setter", "\n", "def", "geom_gap", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "geom_gap", ",", "val_ptr", ",", "self", ".", "ngeom", "*", "1", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.geom_user": [[4397, 4401], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "geom_user", ".", "setter", "\n", "def", "geom_user", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "geom_user", ",", "val_ptr", ",", "self", ".", "ngeom", "*", "self", ".", "nuser_geom", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.geom_rgba": [[4408, 4412], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "geom_rgba", ".", "setter", "\n", "def", "geom_rgba", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_float", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "geom_rgba", ",", "val_ptr", ",", "self", ".", "ngeom", "*", "4", "*", "sizeof", "(", "c_float", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.site_type": [[4419, 4423], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "site_type", ".", "setter", "\n", "def", "site_type", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_int", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "site_type", ",", "val_ptr", ",", "self", ".", "nsite", "*", "1", "*", "sizeof", "(", "c_int", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.site_bodyid": [[4430, 4434], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "site_bodyid", ".", "setter", "\n", "def", "site_bodyid", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_int", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "site_bodyid", ",", "val_ptr", ",", "self", ".", "nsite", "*", "1", "*", "sizeof", "(", "c_int", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.site_matid": [[4441, 4445], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "site_matid", ".", "setter", "\n", "def", "site_matid", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_int", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "site_matid", ",", "val_ptr", ",", "self", ".", "nsite", "*", "1", "*", "sizeof", "(", "c_int", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.site_group": [[4452, 4456], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "site_group", ".", "setter", "\n", "def", "site_group", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_int", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "site_group", ",", "val_ptr", ",", "self", ".", "nsite", "*", "1", "*", "sizeof", "(", "c_int", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.site_size": [[4463, 4467], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "site_size", ".", "setter", "\n", "def", "site_size", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "site_size", ",", "val_ptr", ",", "self", ".", "nsite", "*", "3", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.site_pos": [[4474, 4478], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "site_pos", ".", "setter", "\n", "def", "site_pos", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "site_pos", ",", "val_ptr", ",", "self", ".", "nsite", "*", "3", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.site_quat": [[4485, 4489], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "site_quat", ".", "setter", "\n", "def", "site_quat", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "site_quat", ",", "val_ptr", ",", "self", ".", "nsite", "*", "4", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.site_user": [[4496, 4500], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "site_user", ".", "setter", "\n", "def", "site_user", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "site_user", ",", "val_ptr", ",", "self", ".", "nsite", "*", "self", ".", "nuser_site", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.site_rgba": [[4507, 4511], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "site_rgba", ".", "setter", "\n", "def", "site_rgba", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_float", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "site_rgba", ",", "val_ptr", ",", "self", ".", "nsite", "*", "4", "*", "sizeof", "(", "c_float", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.cam_mode": [[4518, 4522], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "cam_mode", ".", "setter", "\n", "def", "cam_mode", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_int", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "cam_mode", ",", "val_ptr", ",", "self", ".", "ncam", "*", "1", "*", "sizeof", "(", "c_int", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.cam_bodyid": [[4529, 4533], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "cam_bodyid", ".", "setter", "\n", "def", "cam_bodyid", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_int", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "cam_bodyid", ",", "val_ptr", ",", "self", ".", "ncam", "*", "1", "*", "sizeof", "(", "c_int", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.cam_targetbodyid": [[4540, 4544], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "cam_targetbodyid", ".", "setter", "\n", "def", "cam_targetbodyid", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_int", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "cam_targetbodyid", ",", "val_ptr", ",", "self", ".", "ncam", "*", "1", "*", "sizeof", "(", "c_int", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.cam_pos": [[4551, 4555], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "cam_pos", ".", "setter", "\n", "def", "cam_pos", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "cam_pos", ",", "val_ptr", ",", "self", ".", "ncam", "*", "3", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.cam_quat": [[4562, 4566], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "cam_quat", ".", "setter", "\n", "def", "cam_quat", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "cam_quat", ",", "val_ptr", ",", "self", ".", "ncam", "*", "4", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.cam_poscom0": [[4573, 4577], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "cam_poscom0", ".", "setter", "\n", "def", "cam_poscom0", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "cam_poscom0", ",", "val_ptr", ",", "self", ".", "ncam", "*", "3", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.cam_pos0": [[4584, 4588], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "cam_pos0", ".", "setter", "\n", "def", "cam_pos0", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "cam_pos0", ",", "val_ptr", ",", "self", ".", "ncam", "*", "3", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.cam_mat0": [[4595, 4599], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "cam_mat0", ".", "setter", "\n", "def", "cam_mat0", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "cam_mat0", ",", "val_ptr", ",", "self", ".", "ncam", "*", "9", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.cam_fovy": [[4606, 4610], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "cam_fovy", ".", "setter", "\n", "def", "cam_fovy", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "cam_fovy", ",", "val_ptr", ",", "self", ".", "ncam", "*", "1", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.cam_ipd": [[4617, 4621], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "cam_ipd", ".", "setter", "\n", "def", "cam_ipd", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "cam_ipd", ",", "val_ptr", ",", "self", ".", "ncam", "*", "1", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.light_mode": [[4628, 4632], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "light_mode", ".", "setter", "\n", "def", "light_mode", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_int", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "light_mode", ",", "val_ptr", ",", "self", ".", "nlight", "*", "1", "*", "sizeof", "(", "c_int", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.light_bodyid": [[4639, 4643], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "light_bodyid", ".", "setter", "\n", "def", "light_bodyid", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_int", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "light_bodyid", ",", "val_ptr", ",", "self", ".", "nlight", "*", "1", "*", "sizeof", "(", "c_int", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.light_targetbodyid": [[4650, 4654], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "light_targetbodyid", ".", "setter", "\n", "def", "light_targetbodyid", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_int", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "light_targetbodyid", ",", "val_ptr", ",", "self", ".", "nlight", "*", "1", "*", "sizeof", "(", "c_int", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.light_directional": [[4661, 4665], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "light_directional", ".", "setter", "\n", "def", "light_directional", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_ubyte", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "light_directional", ",", "val_ptr", ",", "self", ".", "nlight", "*", "1", "*", "sizeof", "(", "c_ubyte", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.light_castshadow": [[4672, 4676], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "light_castshadow", ".", "setter", "\n", "def", "light_castshadow", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_ubyte", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "light_castshadow", ",", "val_ptr", ",", "self", ".", "nlight", "*", "1", "*", "sizeof", "(", "c_ubyte", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.light_active": [[4683, 4687], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "light_active", ".", "setter", "\n", "def", "light_active", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_ubyte", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "light_active", ",", "val_ptr", ",", "self", ".", "nlight", "*", "1", "*", "sizeof", "(", "c_ubyte", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.light_pos": [[4694, 4698], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "light_pos", ".", "setter", "\n", "def", "light_pos", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "light_pos", ",", "val_ptr", ",", "self", ".", "nlight", "*", "3", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.light_dir": [[4705, 4709], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "light_dir", ".", "setter", "\n", "def", "light_dir", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "light_dir", ",", "val_ptr", ",", "self", ".", "nlight", "*", "3", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.light_poscom0": [[4716, 4720], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "light_poscom0", ".", "setter", "\n", "def", "light_poscom0", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "light_poscom0", ",", "val_ptr", ",", "self", ".", "nlight", "*", "3", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.light_pos0": [[4727, 4731], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "light_pos0", ".", "setter", "\n", "def", "light_pos0", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "light_pos0", ",", "val_ptr", ",", "self", ".", "nlight", "*", "3", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.light_dir0": [[4738, 4742], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "light_dir0", ".", "setter", "\n", "def", "light_dir0", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "light_dir0", ",", "val_ptr", ",", "self", ".", "nlight", "*", "3", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.light_attenuation": [[4749, 4753], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "light_attenuation", ".", "setter", "\n", "def", "light_attenuation", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_float", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "light_attenuation", ",", "val_ptr", ",", "self", ".", "nlight", "*", "3", "*", "sizeof", "(", "c_float", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.light_cutoff": [[4760, 4764], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "light_cutoff", ".", "setter", "\n", "def", "light_cutoff", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_float", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "light_cutoff", ",", "val_ptr", ",", "self", ".", "nlight", "*", "1", "*", "sizeof", "(", "c_float", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.light_exponent": [[4771, 4775], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "light_exponent", ".", "setter", "\n", "def", "light_exponent", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_float", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "light_exponent", ",", "val_ptr", ",", "self", ".", "nlight", "*", "1", "*", "sizeof", "(", "c_float", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.light_ambient": [[4782, 4786], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "light_ambient", ".", "setter", "\n", "def", "light_ambient", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_float", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "light_ambient", ",", "val_ptr", ",", "self", ".", "nlight", "*", "3", "*", "sizeof", "(", "c_float", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.light_diffuse": [[4793, 4797], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "light_diffuse", ".", "setter", "\n", "def", "light_diffuse", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_float", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "light_diffuse", ",", "val_ptr", ",", "self", ".", "nlight", "*", "3", "*", "sizeof", "(", "c_float", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.light_specular": [[4804, 4808], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "light_specular", ".", "setter", "\n", "def", "light_specular", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_float", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "light_specular", ",", "val_ptr", ",", "self", ".", "nlight", "*", "3", "*", "sizeof", "(", "c_float", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.mesh_faceadr": [[4815, 4819], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "mesh_faceadr", ".", "setter", "\n", "def", "mesh_faceadr", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_int", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "mesh_faceadr", ",", "val_ptr", ",", "self", ".", "nmesh", "*", "1", "*", "sizeof", "(", "c_int", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.mesh_facenum": [[4826, 4830], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "mesh_facenum", ".", "setter", "\n", "def", "mesh_facenum", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_int", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "mesh_facenum", ",", "val_ptr", ",", "self", ".", "nmesh", "*", "1", "*", "sizeof", "(", "c_int", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.mesh_vertadr": [[4837, 4841], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "mesh_vertadr", ".", "setter", "\n", "def", "mesh_vertadr", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_int", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "mesh_vertadr", ",", "val_ptr", ",", "self", ".", "nmesh", "*", "1", "*", "sizeof", "(", "c_int", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.mesh_vertnum": [[4848, 4852], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "mesh_vertnum", ".", "setter", "\n", "def", "mesh_vertnum", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_int", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "mesh_vertnum", ",", "val_ptr", ",", "self", ".", "nmesh", "*", "1", "*", "sizeof", "(", "c_int", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.mesh_graphadr": [[4859, 4863], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "mesh_graphadr", ".", "setter", "\n", "def", "mesh_graphadr", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_int", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "mesh_graphadr", ",", "val_ptr", ",", "self", ".", "nmesh", "*", "1", "*", "sizeof", "(", "c_int", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.mesh_vert": [[4870, 4874], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "mesh_vert", ".", "setter", "\n", "def", "mesh_vert", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_float", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "mesh_vert", ",", "val_ptr", ",", "self", ".", "nmeshvert", "*", "3", "*", "sizeof", "(", "c_float", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.mesh_normal": [[4881, 4885], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "mesh_normal", ".", "setter", "\n", "def", "mesh_normal", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_float", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "mesh_normal", ",", "val_ptr", ",", "self", ".", "nmeshvert", "*", "3", "*", "sizeof", "(", "c_float", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.mesh_face": [[4892, 4896], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "mesh_face", ".", "setter", "\n", "def", "mesh_face", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_int", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "mesh_face", ",", "val_ptr", ",", "self", ".", "nmeshface", "*", "3", "*", "sizeof", "(", "c_int", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.mesh_graph": [[4903, 4907], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "mesh_graph", ".", "setter", "\n", "def", "mesh_graph", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_int", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "mesh_graph", ",", "val_ptr", ",", "self", ".", "nmeshgraph", "*", "1", "*", "sizeof", "(", "c_int", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.hfield_size": [[4914, 4918], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "hfield_size", ".", "setter", "\n", "def", "hfield_size", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "hfield_size", ",", "val_ptr", ",", "self", ".", "nhfield", "*", "4", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.hfield_nrow": [[4925, 4929], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "hfield_nrow", ".", "setter", "\n", "def", "hfield_nrow", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_int", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "hfield_nrow", ",", "val_ptr", ",", "self", ".", "nhfield", "*", "1", "*", "sizeof", "(", "c_int", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.hfield_ncol": [[4936, 4940], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "hfield_ncol", ".", "setter", "\n", "def", "hfield_ncol", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_int", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "hfield_ncol", ",", "val_ptr", ",", "self", ".", "nhfield", "*", "1", "*", "sizeof", "(", "c_int", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.hfield_adr": [[4947, 4951], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "hfield_adr", ".", "setter", "\n", "def", "hfield_adr", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_int", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "hfield_adr", ",", "val_ptr", ",", "self", ".", "nhfield", "*", "1", "*", "sizeof", "(", "c_int", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.hfield_data": [[4958, 4962], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "hfield_data", ".", "setter", "\n", "def", "hfield_data", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_float", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "hfield_data", ",", "val_ptr", ",", "self", ".", "nhfielddata", "*", "1", "*", "sizeof", "(", "c_float", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.tex_type": [[4969, 4973], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "tex_type", ".", "setter", "\n", "def", "tex_type", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_int", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "tex_type", ",", "val_ptr", ",", "self", ".", "ntex", "*", "1", "*", "sizeof", "(", "c_int", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.tex_height": [[4980, 4984], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "tex_height", ".", "setter", "\n", "def", "tex_height", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_int", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "tex_height", ",", "val_ptr", ",", "self", ".", "ntex", "*", "1", "*", "sizeof", "(", "c_int", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.tex_width": [[4991, 4995], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "tex_width", ".", "setter", "\n", "def", "tex_width", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_int", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "tex_width", ",", "val_ptr", ",", "self", ".", "ntex", "*", "1", "*", "sizeof", "(", "c_int", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.tex_adr": [[5002, 5006], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "tex_adr", ".", "setter", "\n", "def", "tex_adr", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_int", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "tex_adr", ",", "val_ptr", ",", "self", ".", "ntex", "*", "1", "*", "sizeof", "(", "c_int", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.tex_rgb": [[5013, 5017], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "tex_rgb", ".", "setter", "\n", "def", "tex_rgb", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_ubyte", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "tex_rgb", ",", "val_ptr", ",", "self", ".", "ntexdata", "*", "1", "*", "sizeof", "(", "c_ubyte", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.mat_texid": [[5024, 5028], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "mat_texid", ".", "setter", "\n", "def", "mat_texid", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_int", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "mat_texid", ",", "val_ptr", ",", "self", ".", "nmat", "*", "1", "*", "sizeof", "(", "c_int", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.mat_texuniform": [[5035, 5039], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "mat_texuniform", ".", "setter", "\n", "def", "mat_texuniform", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_ubyte", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "mat_texuniform", ",", "val_ptr", ",", "self", ".", "nmat", "*", "1", "*", "sizeof", "(", "c_ubyte", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.mat_texrepeat": [[5046, 5050], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "mat_texrepeat", ".", "setter", "\n", "def", "mat_texrepeat", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_float", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "mat_texrepeat", ",", "val_ptr", ",", "self", ".", "nmat", "*", "2", "*", "sizeof", "(", "c_float", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.mat_emission": [[5057, 5061], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "mat_emission", ".", "setter", "\n", "def", "mat_emission", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_float", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "mat_emission", ",", "val_ptr", ",", "self", ".", "nmat", "*", "1", "*", "sizeof", "(", "c_float", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.mat_specular": [[5068, 5072], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "mat_specular", ".", "setter", "\n", "def", "mat_specular", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_float", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "mat_specular", ",", "val_ptr", ",", "self", ".", "nmat", "*", "1", "*", "sizeof", "(", "c_float", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.mat_shininess": [[5079, 5083], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "mat_shininess", ".", "setter", "\n", "def", "mat_shininess", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_float", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "mat_shininess", ",", "val_ptr", ",", "self", ".", "nmat", "*", "1", "*", "sizeof", "(", "c_float", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.mat_reflectance": [[5090, 5094], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "mat_reflectance", ".", "setter", "\n", "def", "mat_reflectance", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_float", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "mat_reflectance", ",", "val_ptr", ",", "self", ".", "nmat", "*", "1", "*", "sizeof", "(", "c_float", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.mat_rgba": [[5101, 5105], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "mat_rgba", ".", "setter", "\n", "def", "mat_rgba", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_float", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "mat_rgba", ",", "val_ptr", ",", "self", ".", "nmat", "*", "4", "*", "sizeof", "(", "c_float", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.pair_dim": [[5112, 5116], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "pair_dim", ".", "setter", "\n", "def", "pair_dim", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_int", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "pair_dim", ",", "val_ptr", ",", "self", ".", "npair", "*", "1", "*", "sizeof", "(", "c_int", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.pair_geom1": [[5123, 5127], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "pair_geom1", ".", "setter", "\n", "def", "pair_geom1", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_int", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "pair_geom1", ",", "val_ptr", ",", "self", ".", "npair", "*", "1", "*", "sizeof", "(", "c_int", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.pair_geom2": [[5134, 5138], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "pair_geom2", ".", "setter", "\n", "def", "pair_geom2", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_int", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "pair_geom2", ",", "val_ptr", ",", "self", ".", "npair", "*", "1", "*", "sizeof", "(", "c_int", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.pair_signature": [[5145, 5149], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "pair_signature", ".", "setter", "\n", "def", "pair_signature", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_int", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "pair_signature", ",", "val_ptr", ",", "self", ".", "npair", "*", "1", "*", "sizeof", "(", "c_int", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.pair_solref": [[5156, 5160], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "pair_solref", ".", "setter", "\n", "def", "pair_solref", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "pair_solref", ",", "val_ptr", ",", "self", ".", "npair", "*", "2", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.pair_solimp": [[5167, 5171], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "pair_solimp", ".", "setter", "\n", "def", "pair_solimp", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "pair_solimp", ",", "val_ptr", ",", "self", ".", "npair", "*", "3", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.pair_margin": [[5178, 5182], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "pair_margin", ".", "setter", "\n", "def", "pair_margin", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "pair_margin", ",", "val_ptr", ",", "self", ".", "npair", "*", "1", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.pair_gap": [[5189, 5193], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "pair_gap", ".", "setter", "\n", "def", "pair_gap", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "pair_gap", ",", "val_ptr", ",", "self", ".", "npair", "*", "1", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.pair_friction": [[5200, 5204], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "pair_friction", ".", "setter", "\n", "def", "pair_friction", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "pair_friction", ",", "val_ptr", ",", "self", ".", "npair", "*", "5", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.exclude_signature": [[5211, 5215], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "exclude_signature", ".", "setter", "\n", "def", "exclude_signature", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_int", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "exclude_signature", ",", "val_ptr", ",", "self", ".", "nexclude", "*", "1", "*", "sizeof", "(", "c_int", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.eq_type": [[5222, 5226], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "eq_type", ".", "setter", "\n", "def", "eq_type", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_int", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "eq_type", ",", "val_ptr", ",", "self", ".", "neq", "*", "1", "*", "sizeof", "(", "c_int", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.eq_obj1id": [[5233, 5237], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "eq_obj1id", ".", "setter", "\n", "def", "eq_obj1id", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_int", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "eq_obj1id", ",", "val_ptr", ",", "self", ".", "neq", "*", "1", "*", "sizeof", "(", "c_int", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.eq_obj2id": [[5244, 5248], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "eq_obj2id", ".", "setter", "\n", "def", "eq_obj2id", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_int", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "eq_obj2id", ",", "val_ptr", ",", "self", ".", "neq", "*", "1", "*", "sizeof", "(", "c_int", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.eq_active": [[5255, 5259], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "eq_active", ".", "setter", "\n", "def", "eq_active", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_ubyte", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "eq_active", ",", "val_ptr", ",", "self", ".", "neq", "*", "1", "*", "sizeof", "(", "c_ubyte", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.eq_solref": [[5266, 5270], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "eq_solref", ".", "setter", "\n", "def", "eq_solref", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "eq_solref", ",", "val_ptr", ",", "self", ".", "neq", "*", "2", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.eq_solimp": [[5277, 5281], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "eq_solimp", ".", "setter", "\n", "def", "eq_solimp", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "eq_solimp", ",", "val_ptr", ",", "self", ".", "neq", "*", "3", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.eq_data": [[5288, 5292], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "eq_data", ".", "setter", "\n", "def", "eq_data", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "eq_data", ",", "val_ptr", ",", "self", ".", "neq", "*", "7", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.tendon_adr": [[5299, 5303], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "tendon_adr", ".", "setter", "\n", "def", "tendon_adr", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_int", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "tendon_adr", ",", "val_ptr", ",", "self", ".", "ntendon", "*", "1", "*", "sizeof", "(", "c_int", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.tendon_num": [[5310, 5314], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "tendon_num", ".", "setter", "\n", "def", "tendon_num", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_int", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "tendon_num", ",", "val_ptr", ",", "self", ".", "ntendon", "*", "1", "*", "sizeof", "(", "c_int", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.tendon_matid": [[5321, 5325], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "tendon_matid", ".", "setter", "\n", "def", "tendon_matid", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_int", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "tendon_matid", ",", "val_ptr", ",", "self", ".", "ntendon", "*", "1", "*", "sizeof", "(", "c_int", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.tendon_limited": [[5332, 5336], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "tendon_limited", ".", "setter", "\n", "def", "tendon_limited", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_ubyte", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "tendon_limited", ",", "val_ptr", ",", "self", ".", "ntendon", "*", "1", "*", "sizeof", "(", "c_ubyte", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.tendon_frictional": [[5343, 5347], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "tendon_frictional", ".", "setter", "\n", "def", "tendon_frictional", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_ubyte", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "tendon_frictional", ",", "val_ptr", ",", "self", ".", "ntendon", "*", "1", "*", "sizeof", "(", "c_ubyte", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.tendon_width": [[5354, 5358], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "tendon_width", ".", "setter", "\n", "def", "tendon_width", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "tendon_width", ",", "val_ptr", ",", "self", ".", "ntendon", "*", "1", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.tendon_solref_lim": [[5365, 5369], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "tendon_solref_lim", ".", "setter", "\n", "def", "tendon_solref_lim", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "tendon_solref_lim", ",", "val_ptr", ",", "self", ".", "ntendon", "*", "2", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.tendon_solimp_lim": [[5376, 5380], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "tendon_solimp_lim", ".", "setter", "\n", "def", "tendon_solimp_lim", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "tendon_solimp_lim", ",", "val_ptr", ",", "self", ".", "ntendon", "*", "3", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.tendon_solref_fri": [[5387, 5391], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "tendon_solref_fri", ".", "setter", "\n", "def", "tendon_solref_fri", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "tendon_solref_fri", ",", "val_ptr", ",", "self", ".", "ntendon", "*", "2", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.tendon_solimp_fri": [[5398, 5402], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "tendon_solimp_fri", ".", "setter", "\n", "def", "tendon_solimp_fri", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "tendon_solimp_fri", ",", "val_ptr", ",", "self", ".", "ntendon", "*", "3", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.tendon_range": [[5409, 5413], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "tendon_range", ".", "setter", "\n", "def", "tendon_range", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "tendon_range", ",", "val_ptr", ",", "self", ".", "ntendon", "*", "2", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.tendon_margin": [[5420, 5424], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "tendon_margin", ".", "setter", "\n", "def", "tendon_margin", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "tendon_margin", ",", "val_ptr", ",", "self", ".", "ntendon", "*", "1", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.tendon_stiffness": [[5431, 5435], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "tendon_stiffness", ".", "setter", "\n", "def", "tendon_stiffness", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "tendon_stiffness", ",", "val_ptr", ",", "self", ".", "ntendon", "*", "1", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.tendon_damping": [[5442, 5446], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "tendon_damping", ".", "setter", "\n", "def", "tendon_damping", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "tendon_damping", ",", "val_ptr", ",", "self", ".", "ntendon", "*", "1", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.tendon_frictionloss": [[5453, 5457], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "tendon_frictionloss", ".", "setter", "\n", "def", "tendon_frictionloss", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "tendon_frictionloss", ",", "val_ptr", ",", "self", ".", "ntendon", "*", "1", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.tendon_lengthspring": [[5464, 5468], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "tendon_lengthspring", ".", "setter", "\n", "def", "tendon_lengthspring", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "tendon_lengthspring", ",", "val_ptr", ",", "self", ".", "ntendon", "*", "1", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.tendon_length0": [[5475, 5479], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "tendon_length0", ".", "setter", "\n", "def", "tendon_length0", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "tendon_length0", ",", "val_ptr", ",", "self", ".", "ntendon", "*", "1", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.tendon_invweight0": [[5486, 5490], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "tendon_invweight0", ".", "setter", "\n", "def", "tendon_invweight0", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "tendon_invweight0", ",", "val_ptr", ",", "self", ".", "ntendon", "*", "1", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.tendon_user": [[5497, 5501], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "tendon_user", ".", "setter", "\n", "def", "tendon_user", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "tendon_user", ",", "val_ptr", ",", "self", ".", "ntendon", "*", "self", ".", "nuser_tendon", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.tendon_rgba": [[5508, 5512], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "tendon_rgba", ".", "setter", "\n", "def", "tendon_rgba", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_float", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "tendon_rgba", ",", "val_ptr", ",", "self", ".", "ntendon", "*", "4", "*", "sizeof", "(", "c_float", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.wrap_type": [[5519, 5523], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "wrap_type", ".", "setter", "\n", "def", "wrap_type", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_int", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "wrap_type", ",", "val_ptr", ",", "self", ".", "nwrap", "*", "1", "*", "sizeof", "(", "c_int", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.wrap_objid": [[5530, 5534], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "wrap_objid", ".", "setter", "\n", "def", "wrap_objid", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_int", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "wrap_objid", ",", "val_ptr", ",", "self", ".", "nwrap", "*", "1", "*", "sizeof", "(", "c_int", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.wrap_prm": [[5541, 5545], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "wrap_prm", ".", "setter", "\n", "def", "wrap_prm", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "wrap_prm", ",", "val_ptr", ",", "self", ".", "nwrap", "*", "1", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.actuator_trntype": [[5552, 5556], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "actuator_trntype", ".", "setter", "\n", "def", "actuator_trntype", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_int", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "actuator_trntype", ",", "val_ptr", ",", "self", ".", "nu", "*", "1", "*", "sizeof", "(", "c_int", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.actuator_dyntype": [[5563, 5567], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "actuator_dyntype", ".", "setter", "\n", "def", "actuator_dyntype", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_int", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "actuator_dyntype", ",", "val_ptr", ",", "self", ".", "nu", "*", "1", "*", "sizeof", "(", "c_int", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.actuator_gaintype": [[5574, 5578], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "actuator_gaintype", ".", "setter", "\n", "def", "actuator_gaintype", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_int", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "actuator_gaintype", ",", "val_ptr", ",", "self", ".", "nu", "*", "1", "*", "sizeof", "(", "c_int", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.actuator_biastype": [[5585, 5589], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "actuator_biastype", ".", "setter", "\n", "def", "actuator_biastype", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_int", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "actuator_biastype", ",", "val_ptr", ",", "self", ".", "nu", "*", "1", "*", "sizeof", "(", "c_int", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.actuator_trnid": [[5596, 5600], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "actuator_trnid", ".", "setter", "\n", "def", "actuator_trnid", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_int", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "actuator_trnid", ",", "val_ptr", ",", "self", ".", "nu", "*", "2", "*", "sizeof", "(", "c_int", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.actuator_ctrllimited": [[5607, 5611], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "actuator_ctrllimited", ".", "setter", "\n", "def", "actuator_ctrllimited", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_ubyte", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "actuator_ctrllimited", ",", "val_ptr", ",", "self", ".", "nu", "*", "1", "*", "sizeof", "(", "c_ubyte", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.actuator_forcelimited": [[5618, 5622], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "actuator_forcelimited", ".", "setter", "\n", "def", "actuator_forcelimited", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_ubyte", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "actuator_forcelimited", ",", "val_ptr", ",", "self", ".", "nu", "*", "1", "*", "sizeof", "(", "c_ubyte", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.actuator_dynprm": [[5629, 5633], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "actuator_dynprm", ".", "setter", "\n", "def", "actuator_dynprm", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "actuator_dynprm", ",", "val_ptr", ",", "self", ".", "nu", "*", "3", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.actuator_gainprm": [[5640, 5644], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "actuator_gainprm", ".", "setter", "\n", "def", "actuator_gainprm", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "actuator_gainprm", ",", "val_ptr", ",", "self", ".", "nu", "*", "3", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.actuator_biasprm": [[5651, 5655], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "actuator_biasprm", ".", "setter", "\n", "def", "actuator_biasprm", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "actuator_biasprm", ",", "val_ptr", ",", "self", ".", "nu", "*", "3", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.actuator_ctrlrange": [[5662, 5666], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "actuator_ctrlrange", ".", "setter", "\n", "def", "actuator_ctrlrange", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "actuator_ctrlrange", ",", "val_ptr", ",", "self", ".", "nu", "*", "2", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.actuator_forcerange": [[5673, 5677], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "actuator_forcerange", ".", "setter", "\n", "def", "actuator_forcerange", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "actuator_forcerange", ",", "val_ptr", ",", "self", ".", "nu", "*", "2", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.actuator_gear": [[5684, 5688], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "actuator_gear", ".", "setter", "\n", "def", "actuator_gear", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "actuator_gear", ",", "val_ptr", ",", "self", ".", "nu", "*", "6", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.actuator_cranklength": [[5695, 5699], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "actuator_cranklength", ".", "setter", "\n", "def", "actuator_cranklength", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "actuator_cranklength", ",", "val_ptr", ",", "self", ".", "nu", "*", "1", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.actuator_invweight0": [[5706, 5710], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "actuator_invweight0", ".", "setter", "\n", "def", "actuator_invweight0", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "actuator_invweight0", ",", "val_ptr", ",", "self", ".", "nu", "*", "1", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.actuator_length0": [[5717, 5721], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "actuator_length0", ".", "setter", "\n", "def", "actuator_length0", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "actuator_length0", ",", "val_ptr", ",", "self", ".", "nu", "*", "1", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.actuator_lengthrange": [[5728, 5732], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "actuator_lengthrange", ".", "setter", "\n", "def", "actuator_lengthrange", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "actuator_lengthrange", ",", "val_ptr", ",", "self", ".", "nu", "*", "2", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.actuator_user": [[5739, 5743], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "actuator_user", ".", "setter", "\n", "def", "actuator_user", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "actuator_user", ",", "val_ptr", ",", "self", ".", "nu", "*", "self", ".", "nuser_actuator", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.sensor_type": [[5750, 5754], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "sensor_type", ".", "setter", "\n", "def", "sensor_type", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_int", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "sensor_type", ",", "val_ptr", ",", "self", ".", "nsensor", "*", "1", "*", "sizeof", "(", "c_int", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.sensor_objid": [[5761, 5765], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "sensor_objid", ".", "setter", "\n", "def", "sensor_objid", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_int", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "sensor_objid", ",", "val_ptr", ",", "self", ".", "nsensor", "*", "1", "*", "sizeof", "(", "c_int", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.sensor_dim": [[5772, 5776], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "sensor_dim", ".", "setter", "\n", "def", "sensor_dim", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_int", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "sensor_dim", ",", "val_ptr", ",", "self", ".", "nsensor", "*", "1", "*", "sizeof", "(", "c_int", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.sensor_adr": [[5783, 5787], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "sensor_adr", ".", "setter", "\n", "def", "sensor_adr", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_int", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "sensor_adr", ",", "val_ptr", ",", "self", ".", "nsensor", "*", "1", "*", "sizeof", "(", "c_int", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.sensor_scale": [[5794, 5798], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "sensor_scale", ".", "setter", "\n", "def", "sensor_scale", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "sensor_scale", ",", "val_ptr", ",", "self", ".", "nsensor", "*", "1", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.sensor_user": [[5805, 5809], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "sensor_user", ".", "setter", "\n", "def", "sensor_user", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "sensor_user", ",", "val_ptr", ",", "self", ".", "nsensor", "*", "self", ".", "nuser_sensor", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.numeric_adr": [[5816, 5820], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "numeric_adr", ".", "setter", "\n", "def", "numeric_adr", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_int", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "numeric_adr", ",", "val_ptr", ",", "self", ".", "nnumeric", "*", "1", "*", "sizeof", "(", "c_int", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.numeric_size": [[5827, 5831], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "numeric_size", ".", "setter", "\n", "def", "numeric_size", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_int", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "numeric_size", ",", "val_ptr", ",", "self", ".", "nnumeric", "*", "1", "*", "sizeof", "(", "c_int", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.numeric_data": [[5838, 5842], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "numeric_data", ".", "setter", "\n", "def", "numeric_data", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "numeric_data", ",", "val_ptr", ",", "self", ".", "nnumericdata", "*", "1", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.text_adr": [[5849, 5853], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "text_adr", ".", "setter", "\n", "def", "text_adr", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_int", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "text_adr", ",", "val_ptr", ",", "self", ".", "ntext", "*", "1", "*", "sizeof", "(", "c_int", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.text_data": [[5854, 5857], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "text_data", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_wrapped", ".", "contents", ".", "text_data", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.key_time": [[5864, 5868], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "key_time", ".", "setter", "\n", "def", "key_time", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "key_time", ",", "val_ptr", ",", "self", ".", "nkey", "*", "1", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.key_qpos": [[5875, 5879], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "key_qpos", ".", "setter", "\n", "def", "key_qpos", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "key_qpos", ",", "val_ptr", ",", "self", ".", "nkey", "*", "self", ".", "nq", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.key_qvel": [[5886, 5890], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "key_qvel", ".", "setter", "\n", "def", "key_qvel", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "key_qvel", ",", "val_ptr", ",", "self", ".", "nkey", "*", "self", ".", "nv", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.key_act": [[5897, 5901], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "key_act", ".", "setter", "\n", "def", "key_act", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "key_act", ",", "val_ptr", ",", "self", ".", "nkey", "*", "self", ".", "na", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.name_bodyadr": [[5908, 5912], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "name_bodyadr", ".", "setter", "\n", "def", "name_bodyadr", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_int", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "name_bodyadr", ",", "val_ptr", ",", "self", ".", "nbody", "*", "1", "*", "sizeof", "(", "c_int", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.name_jntadr": [[5919, 5923], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "name_jntadr", ".", "setter", "\n", "def", "name_jntadr", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_int", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "name_jntadr", ",", "val_ptr", ",", "self", ".", "njnt", "*", "1", "*", "sizeof", "(", "c_int", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.name_geomadr": [[5930, 5934], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "name_geomadr", ".", "setter", "\n", "def", "name_geomadr", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_int", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "name_geomadr", ",", "val_ptr", ",", "self", ".", "ngeom", "*", "1", "*", "sizeof", "(", "c_int", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.name_siteadr": [[5941, 5945], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "name_siteadr", ".", "setter", "\n", "def", "name_siteadr", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_int", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "name_siteadr", ",", "val_ptr", ",", "self", ".", "nsite", "*", "1", "*", "sizeof", "(", "c_int", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.name_camadr": [[5952, 5956], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "name_camadr", ".", "setter", "\n", "def", "name_camadr", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_int", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "name_camadr", ",", "val_ptr", ",", "self", ".", "ncam", "*", "1", "*", "sizeof", "(", "c_int", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.name_lightadr": [[5963, 5967], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "name_lightadr", ".", "setter", "\n", "def", "name_lightadr", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_int", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "name_lightadr", ",", "val_ptr", ",", "self", ".", "nlight", "*", "1", "*", "sizeof", "(", "c_int", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.name_meshadr": [[5974, 5978], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "name_meshadr", ".", "setter", "\n", "def", "name_meshadr", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_int", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "name_meshadr", ",", "val_ptr", ",", "self", ".", "nmesh", "*", "1", "*", "sizeof", "(", "c_int", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.name_hfieldadr": [[5985, 5989], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "name_hfieldadr", ".", "setter", "\n", "def", "name_hfieldadr", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_int", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "name_hfieldadr", ",", "val_ptr", ",", "self", ".", "nhfield", "*", "1", "*", "sizeof", "(", "c_int", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.name_texadr": [[5996, 6000], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "name_texadr", ".", "setter", "\n", "def", "name_texadr", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_int", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "name_texadr", ",", "val_ptr", ",", "self", ".", "ntex", "*", "1", "*", "sizeof", "(", "c_int", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.name_matadr": [[6007, 6011], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "name_matadr", ".", "setter", "\n", "def", "name_matadr", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_int", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "name_matadr", ",", "val_ptr", ",", "self", ".", "nmat", "*", "1", "*", "sizeof", "(", "c_int", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.name_eqadr": [[6018, 6022], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "name_eqadr", ".", "setter", "\n", "def", "name_eqadr", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_int", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "name_eqadr", ",", "val_ptr", ",", "self", ".", "neq", "*", "1", "*", "sizeof", "(", "c_int", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.name_tendonadr": [[6029, 6033], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "name_tendonadr", ".", "setter", "\n", "def", "name_tendonadr", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_int", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "name_tendonadr", ",", "val_ptr", ",", "self", ".", "ntendon", "*", "1", "*", "sizeof", "(", "c_int", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.name_actuatoradr": [[6040, 6044], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "name_actuatoradr", ".", "setter", "\n", "def", "name_actuatoradr", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_int", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "name_actuatoradr", ",", "val_ptr", ",", "self", ".", "nu", "*", "1", "*", "sizeof", "(", "c_int", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.name_sensoradr": [[6051, 6055], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "name_sensoradr", ".", "setter", "\n", "def", "name_sensoradr", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_int", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "name_sensoradr", ",", "val_ptr", ",", "self", ".", "nsensor", "*", "1", "*", "sizeof", "(", "c_int", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.name_numericadr": [[6062, 6066], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "name_numericadr", ".", "setter", "\n", "def", "name_numericadr", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_int", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "name_numericadr", ",", "val_ptr", ",", "self", ".", "nnumeric", "*", "1", "*", "sizeof", "(", "c_int", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.name_textadr": [[6073, 6077], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "name_textadr", ".", "setter", "\n", "def", "name_textadr", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_int", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "name_textadr", ",", "val_ptr", ",", "self", ".", "ntext", "*", "1", "*", "sizeof", "(", "c_int", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjModelWrapper.names": [[6078, 6081], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "names", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_wrapped", ".", "contents", ".", "names", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Rondorf_BOReL.core.tabulate._pipe_segment_with_colons": [[78, 90], ["None"], "function", ["None"], ["def", "_pipe_segment_with_colons", "(", "align", ",", "colwidth", ")", ":", "\n", "    ", "\"\"\"Return a segment of a horizontal line with optional colons which\n    indicate column's alignment (as in `pipe` output format).\"\"\"", "\n", "w", "=", "colwidth", "\n", "if", "align", "in", "[", "\"right\"", ",", "\"decimal\"", "]", ":", "\n", "        ", "return", "(", "'-'", "*", "(", "w", "-", "1", ")", ")", "+", "\":\"", "\n", "", "elif", "align", "==", "\"center\"", ":", "\n", "        ", "return", "\":\"", "+", "(", "'-'", "*", "(", "w", "-", "2", ")", ")", "+", "\":\"", "\n", "", "elif", "align", "==", "\"left\"", ":", "\n", "        ", "return", "\":\"", "+", "(", "'-'", "*", "(", "w", "-", "1", ")", ")", "\n", "", "else", ":", "\n", "        ", "return", "'-'", "*", "w", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.core.tabulate._pipe_line_with_colons": [[92, 97], ["tabulate._pipe_segment_with_colons", "zip"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.core.tabulate._pipe_segment_with_colons"], ["", "", "def", "_pipe_line_with_colons", "(", "colwidths", ",", "colaligns", ")", ":", "\n", "    ", "\"\"\"Return a horizontal line with optional colons to indicate column's\n    alignment (as in `pipe` output format).\"\"\"", "\n", "segments", "=", "[", "_pipe_segment_with_colons", "(", "a", ",", "w", ")", "for", "a", ",", "w", "in", "zip", "(", "colaligns", ",", "colwidths", ")", "]", "\n", "return", "\"|\"", "+", "\"|\"", ".", "join", "(", "segments", ")", "+", "\"|\"", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.core.tabulate._mediawiki_row_with_attrs": [[99, 110], ["zip", "colsep.join", "alignment.get"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.join"], ["", "def", "_mediawiki_row_with_attrs", "(", "separator", ",", "cell_values", ",", "colwidths", ",", "colaligns", ")", ":", "\n", "    ", "alignment", "=", "{", "\"left\"", ":", "''", ",", "\n", "\"right\"", ":", "'align=\"right\"| '", ",", "\n", "\"center\"", ":", "'align=\"center\"| '", ",", "\n", "\"decimal\"", ":", "'align=\"right\"| '", "}", "\n", "# hard-coded padding _around_ align attribute and value together", "\n", "# rather than padding parameter which affects only the value", "\n", "values_with_attrs", "=", "[", "' '", "+", "alignment", ".", "get", "(", "a", ",", "''", ")", "+", "c", "+", "' '", "\n", "for", "c", ",", "a", "in", "zip", "(", "cell_values", ",", "colaligns", ")", "]", "\n", "colsep", "=", "separator", "*", "2", "\n", "return", "(", "separator", "+", "colsep", ".", "join", "(", "values_with_attrs", ")", ")", ".", "rstrip", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.core.tabulate._latex_line_begin_tabular": [[112, 116], ["alignment.get"], "function", ["None"], ["", "def", "_latex_line_begin_tabular", "(", "colwidths", ",", "colaligns", ")", ":", "\n", "    ", "alignment", "=", "{", "\"left\"", ":", "\"l\"", ",", "\"right\"", ":", "\"r\"", ",", "\"center\"", ":", "\"c\"", ",", "\"decimal\"", ":", "\"r\"", "}", "\n", "tabular_columns_fmt", "=", "\"\"", ".", "join", "(", "[", "alignment", ".", "get", "(", "a", ",", "\"l\"", ")", "for", "a", "in", "colaligns", "]", ")", "\n", "return", "\"\\\\begin{tabular}{\"", "+", "tabular_columns_fmt", "+", "\"}\\n\\hline\"", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.core.tabulate.simple_separated_format": [[198, 210], ["TableFormat", "DataRow", "DataRow"], "function", ["None"], ["def", "simple_separated_format", "(", "separator", ")", ":", "\n", "    ", "\"\"\"Construct a simple TableFormat with columns separated by a separator.\n\n    >>> tsv = simple_separated_format(\"\\\\t\") ; \\\n        tabulate([[\"foo\", 1], [\"spam\", 23]], tablefmt=tsv) == 'foo \\\\t 1\\\\nspam\\\\t23'\n    True\n\n    \"\"\"", "\n", "return", "TableFormat", "(", "None", ",", "None", ",", "None", ",", "None", ",", "\n", "headerrow", "=", "DataRow", "(", "''", ",", "separator", ",", "''", ")", ",", "\n", "datarow", "=", "DataRow", "(", "''", ",", "separator", ",", "''", ")", ",", "\n", "padding", "=", "0", ",", "with_header_hide", "=", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.core.tabulate._isconvertible": [[212, 218], ["conv"], "function", ["None"], ["", "def", "_isconvertible", "(", "conv", ",", "string", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "n", "=", "conv", "(", "string", ")", "\n", "return", "True", "\n", "", "except", "ValueError", ":", "\n", "        ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.core.tabulate._isnumber": [[220, 230], ["tabulate._isconvertible"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.core.tabulate._isconvertible"], ["", "", "def", "_isnumber", "(", "string", ")", ":", "\n", "    ", "\"\"\"\n    >>> _isnumber(\"123.45\")\n    True\n    >>> _isnumber(\"123\")\n    True\n    >>> _isnumber(\"spam\")\n    False\n    \"\"\"", "\n", "return", "_isconvertible", "(", "float", ",", "string", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.core.tabulate._isint": [[232, 242], ["type", "tabulate._isconvertible", "isinstance", "isinstance"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjvGeomWrapper.type", "home.repos.pwc.inspect_result.Rondorf_BOReL.core.tabulate._isconvertible"], ["", "def", "_isint", "(", "string", ")", ":", "\n", "    ", "\"\"\"\n    >>> _isint(\"123\")\n    True\n    >>> _isint(\"123.45\")\n    False\n    \"\"\"", "\n", "return", "type", "(", "string", ")", "is", "int", "or", "(", "isinstance", "(", "string", ",", "_binary_type", ")", "or", "isinstance", "(", "string", ",", "_text_type", ")", ")", "and", "_isconvertible", "(", "int", ",", "string", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.core.tabulate._type": [[244, 276], ["tabulate._strip_invisible", "hasattr", "isinstance", "isinstance", "tabulate._isint", "tabulate._isnumber", "isinstance"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.core.tabulate._strip_invisible", "home.repos.pwc.inspect_result.Rondorf_BOReL.core.tabulate._isint", "home.repos.pwc.inspect_result.Rondorf_BOReL.core.tabulate._isnumber"], ["", "def", "_type", "(", "string", ",", "has_invisible", "=", "True", ")", ":", "\n", "    ", "\"\"\"The least generic type (type(None), int, float, str, unicode).\n\n    >>> _type(None) is type(None)\n    True\n    >>> _type(\"foo\") is type(\"\")\n    True\n    >>> _type(\"1\") is type(1)\n    True\n    >>> _type('\\x1b[31m42\\x1b[0m') is type(42)\n    True\n    >>> _type('\\x1b[31m42\\x1b[0m') is type(42)\n    True\n\n    \"\"\"", "\n", "\n", "if", "has_invisible", "and", "(", "isinstance", "(", "string", ",", "_text_type", ")", "or", "isinstance", "(", "string", ",", "_binary_type", ")", ")", ":", "\n", "        ", "string", "=", "_strip_invisible", "(", "string", ")", "\n", "\n", "", "if", "string", "is", "None", ":", "\n", "        ", "return", "_none_type", "\n", "", "elif", "hasattr", "(", "string", ",", "\"isoformat\"", ")", ":", "# datetime.datetime, date, and time", "\n", "        ", "return", "_text_type", "\n", "", "elif", "_isint", "(", "string", ")", ":", "\n", "        ", "return", "int", "\n", "", "elif", "_isnumber", "(", "string", ")", ":", "\n", "        ", "return", "float", "\n", "", "elif", "isinstance", "(", "string", ",", "_binary_type", ")", ":", "\n", "        ", "return", "_binary_type", "\n", "", "else", ":", "\n", "        ", "return", "_text_type", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.core.tabulate._afterpoint": [[278, 303], ["tabulate._isnumber", "tabulate._isint", "string.rfind", "string.lower().rfind", "string.lower", "len"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.core.tabulate._isnumber", "home.repos.pwc.inspect_result.Rondorf_BOReL.core.tabulate._isint", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.rfind", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.rfind", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.lower"], ["", "", "def", "_afterpoint", "(", "string", ")", ":", "\n", "    ", "\"\"\"Symbols after a decimal point, -1 if the string lacks the decimal point.\n\n    >>> _afterpoint(\"123.45\")\n    2\n    >>> _afterpoint(\"1001\")\n    -1\n    >>> _afterpoint(\"eggs\")\n    -1\n    >>> _afterpoint(\"123e45\")\n    2\n\n    \"\"\"", "\n", "if", "_isnumber", "(", "string", ")", ":", "\n", "        ", "if", "_isint", "(", "string", ")", ":", "\n", "            ", "return", "-", "1", "\n", "", "else", ":", "\n", "            ", "pos", "=", "string", ".", "rfind", "(", "\".\"", ")", "\n", "pos", "=", "string", ".", "lower", "(", ")", ".", "rfind", "(", "\"e\"", ")", "if", "pos", "<", "0", "else", "pos", "\n", "if", "pos", ">=", "0", ":", "\n", "                ", "return", "len", "(", "string", ")", "-", "pos", "-", "1", "\n", "", "else", ":", "\n", "                ", "return", "-", "1", "# no point", "\n", "", "", "", "else", ":", "\n", "        ", "return", "-", "1", "# not a number", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.core.tabulate._padleft": [[305, 315], ["fmt.format", "len", "len", "tabulate._strip_invisible"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.core.tabulate._strip_invisible"], ["", "", "def", "_padleft", "(", "width", ",", "s", ",", "has_invisible", "=", "True", ")", ":", "\n", "    ", "\"\"\"Flush right.\n\n    >>> _padleft(6, '\\u044f\\u0439\\u0446\\u0430') == '  \\u044f\\u0439\\u0446\\u0430'\n    True\n\n    \"\"\"", "\n", "iwidth", "=", "width", "+", "len", "(", "s", ")", "-", "len", "(", "_strip_invisible", "(", "s", ")", ")", "if", "has_invisible", "else", "width", "\n", "fmt", "=", "\"{0:>%ds}\"", "%", "iwidth", "\n", "return", "fmt", ".", "format", "(", "s", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.core.tabulate._padright": [[317, 327], ["fmt.format", "len", "len", "tabulate._strip_invisible"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.core.tabulate._strip_invisible"], ["", "def", "_padright", "(", "width", ",", "s", ",", "has_invisible", "=", "True", ")", ":", "\n", "    ", "\"\"\"Flush left.\n\n    >>> _padright(6, '\\u044f\\u0439\\u0446\\u0430') == '\\u044f\\u0439\\u0446\\u0430  '\n    True\n\n    \"\"\"", "\n", "iwidth", "=", "width", "+", "len", "(", "s", ")", "-", "len", "(", "_strip_invisible", "(", "s", ")", ")", "if", "has_invisible", "else", "width", "\n", "fmt", "=", "\"{0:<%ds}\"", "%", "iwidth", "\n", "return", "fmt", ".", "format", "(", "s", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.core.tabulate._padboth": [[329, 339], ["fmt.format", "len", "len", "tabulate._strip_invisible"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.core.tabulate._strip_invisible"], ["", "def", "_padboth", "(", "width", ",", "s", ",", "has_invisible", "=", "True", ")", ":", "\n", "    ", "\"\"\"Center string.\n\n    >>> _padboth(6, '\\u044f\\u0439\\u0446\\u0430') == ' \\u044f\\u0439\\u0446\\u0430 '\n    True\n\n    \"\"\"", "\n", "iwidth", "=", "width", "+", "len", "(", "s", ")", "-", "len", "(", "_strip_invisible", "(", "s", ")", ")", "if", "has_invisible", "else", "width", "\n", "fmt", "=", "\"{0:^%ds}\"", "%", "iwidth", "\n", "return", "fmt", ".", "format", "(", "s", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.core.tabulate._strip_invisible": [[341, 347], ["isinstance", "re.sub", "re.sub"], "function", ["None"], ["", "def", "_strip_invisible", "(", "s", ")", ":", "\n", "    ", "\"Remove invisible ANSI color codes.\"", "\n", "if", "isinstance", "(", "s", ",", "_text_type", ")", ":", "\n", "        ", "return", "re", ".", "sub", "(", "_invisible_codes", ",", "\"\"", ",", "s", ")", "\n", "", "else", ":", "# a bytestring", "\n", "        ", "return", "re", ".", "sub", "(", "_invisible_codes_bytes", ",", "\"\"", ",", "s", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.core.tabulate._visible_width": [[349, 360], ["isinstance", "isinstance", "len", "len", "tabulate._strip_invisible", "_text_type"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.core.tabulate._strip_invisible"], ["", "", "def", "_visible_width", "(", "s", ")", ":", "\n", "    ", "\"\"\"Visible width of a printed string. ANSI color codes are removed.\n\n    >>> _visible_width('\\x1b[31mhello\\x1b[0m'), _visible_width(\"world\")\n    (5, 5)\n\n    \"\"\"", "\n", "if", "isinstance", "(", "s", ",", "_text_type", ")", "or", "isinstance", "(", "s", ",", "_binary_type", ")", ":", "\n", "        ", "return", "len", "(", "_strip_invisible", "(", "s", ")", ")", "\n", "", "else", ":", "\n", "        ", "return", "len", "(", "_text_type", "(", "s", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.core.tabulate._align_column": [[362, 398], ["max", "max", "padfn", "s.strip", "list", "s.strip", "max", "map", "tabulate._afterpoint", "zip", "s.strip"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.strip", "home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.ListableAPIResource.list", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.strip", "home.repos.pwc.inspect_result.Rondorf_BOReL.core.tabulate._afterpoint", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.strip"], ["", "", "def", "_align_column", "(", "strings", ",", "alignment", ",", "minwidth", "=", "0", ",", "has_invisible", "=", "True", ")", ":", "\n", "    ", "\"\"\"[string] -> [padded_string]\n\n    >>> list(map(str,_align_column([\"12.345\", \"-1234.5\", \"1.23\", \"1234.5\", \"1e+234\", \"1.0e234\"], \"decimal\")))\n    ['   12.345  ', '-1234.5    ', '    1.23   ', ' 1234.5    ', '    1e+234 ', '    1.0e234']\n\n    >>> list(map(str,_align_column(['123.4', '56.7890'], None)))\n    ['123.4', '56.7890']\n\n    \"\"\"", "\n", "if", "alignment", "==", "\"right\"", ":", "\n", "        ", "strings", "=", "[", "s", ".", "strip", "(", ")", "for", "s", "in", "strings", "]", "\n", "padfn", "=", "_padleft", "\n", "", "elif", "alignment", "==", "\"center\"", ":", "\n", "        ", "strings", "=", "[", "s", ".", "strip", "(", ")", "for", "s", "in", "strings", "]", "\n", "padfn", "=", "_padboth", "\n", "", "elif", "alignment", "==", "\"decimal\"", ":", "\n", "        ", "decimals", "=", "[", "_afterpoint", "(", "s", ")", "for", "s", "in", "strings", "]", "\n", "maxdecimals", "=", "max", "(", "decimals", ")", "\n", "strings", "=", "[", "s", "+", "(", "maxdecimals", "-", "decs", ")", "*", "\" \"", "\n", "for", "s", ",", "decs", "in", "zip", "(", "strings", ",", "decimals", ")", "]", "\n", "padfn", "=", "_padleft", "\n", "", "elif", "not", "alignment", ":", "\n", "        ", "return", "strings", "\n", "", "else", ":", "\n", "        ", "strings", "=", "[", "s", ".", "strip", "(", ")", "for", "s", "in", "strings", "]", "\n", "padfn", "=", "_padright", "\n", "\n", "", "if", "has_invisible", ":", "\n", "        ", "width_fn", "=", "_visible_width", "\n", "", "else", ":", "\n", "        ", "width_fn", "=", "len", "\n", "\n", "", "maxwidth", "=", "max", "(", "max", "(", "list", "(", "map", "(", "width_fn", ",", "strings", ")", ")", ")", ",", "minwidth", ")", "\n", "padded_strings", "=", "[", "padfn", "(", "maxwidth", ",", "s", ",", "has_invisible", ")", "for", "s", "in", "strings", "]", "\n", "return", "padded_strings", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.core.tabulate._more_generic": [[400, 405], ["max", "types.get", "types.get"], "function", ["None"], ["", "def", "_more_generic", "(", "type1", ",", "type2", ")", ":", "\n", "    ", "types", "=", "{", "_none_type", ":", "0", ",", "int", ":", "1", ",", "float", ":", "2", ",", "_binary_type", ":", "3", ",", "_text_type", ":", "4", "}", "\n", "invtypes", "=", "{", "4", ":", "_text_type", ",", "3", ":", "_binary_type", ",", "2", ":", "float", ",", "1", ":", "int", ",", "0", ":", "_none_type", "}", "\n", "moregeneric", "=", "max", "(", "types", ".", "get", "(", "type1", ",", "4", ")", ",", "types", ".", "get", "(", "type2", ",", "4", ")", ")", "\n", "return", "invtypes", "[", "moregeneric", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.core.tabulate._column_type": [[407, 429], ["reduce", "tabulate._type"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.core.tabulate._type"], ["", "def", "_column_type", "(", "strings", ",", "has_invisible", "=", "True", ")", ":", "\n", "    ", "\"\"\"The least generic type all column values are convertible to.\n\n    >>> _column_type([\"1\", \"2\"]) is _int_type\n    True\n    >>> _column_type([\"1\", \"2.3\"]) is _float_type\n    True\n    >>> _column_type([\"1\", \"2.3\", \"four\"]) is _text_type\n    True\n    >>> _column_type([\"four\", '\\u043f\\u044f\\u0442\\u044c']) is _text_type\n    True\n    >>> _column_type([None, \"brux\"]) is _text_type\n    True\n    >>> _column_type([1, 2, None]) is _int_type\n    True\n    >>> import datetime as dt\n    >>> _column_type([dt.datetime(1991,2,19), dt.time(17,35)]) is _text_type\n    True\n\n    \"\"\"", "\n", "types", "=", "[", "_type", "(", "s", ",", "has_invisible", ")", "for", "s", "in", "strings", "]", "\n", "return", "reduce", "(", "_more_generic", ",", "types", ",", "int", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.core.tabulate._format": [[431, 454], ["_text_type", "format", "float"], "function", ["None"], ["", "def", "_format", "(", "val", ",", "valtype", ",", "floatfmt", ",", "missingval", "=", "\"\"", ")", ":", "\n", "    ", "\"\"\"Format a value accoding to its type.\n\n    Unicode is supported:\n\n    >>> hrow = ['\\u0431\\u0443\\u043a\\u0432\\u0430', '\\u0446\\u0438\\u0444\\u0440\\u0430'] ; \\\n        tbl = [['\\u0430\\u0437', 2], ['\\u0431\\u0443\\u043a\\u0438', 4]] ; \\\n        good_result = '\\\\u0431\\\\u0443\\\\u043a\\\\u0432\\\\u0430      \\\\u0446\\\\u0438\\\\u0444\\\\u0440\\\\u0430\\\\n-------  -------\\\\n\\\\u0430\\\\u0437             2\\\\n\\\\u0431\\\\u0443\\\\u043a\\\\u0438           4' ; \\\n        tabulate(tbl, headers=hrow) == good_result\n    True\n\n    \"\"\"", "\n", "if", "val", "is", "None", ":", "\n", "        ", "return", "missingval", "\n", "\n", "", "if", "valtype", "in", "[", "int", ",", "_text_type", "]", ":", "\n", "        ", "return", "\"{0}\"", ".", "format", "(", "val", ")", "\n", "", "elif", "valtype", "is", "_binary_type", ":", "\n", "        ", "return", "_text_type", "(", "val", ",", "\"ascii\"", ")", "\n", "", "elif", "valtype", "is", "float", ":", "\n", "        ", "return", "format", "(", "float", "(", "val", ")", ",", "floatfmt", ")", "\n", "", "else", ":", "\n", "        ", "return", "\"{0}\"", ".", "format", "(", "val", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.core.tabulate._align_header": [[456, 465], ["tabulate._padright", "tabulate._padboth", "tabulate._padleft"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.core.tabulate._padright", "home.repos.pwc.inspect_result.Rondorf_BOReL.core.tabulate._padboth", "home.repos.pwc.inspect_result.Rondorf_BOReL.core.tabulate._padleft"], ["", "", "def", "_align_header", "(", "header", ",", "alignment", ",", "width", ")", ":", "\n", "    ", "if", "alignment", "==", "\"left\"", ":", "\n", "        ", "return", "_padright", "(", "width", ",", "header", ")", "\n", "", "elif", "alignment", "==", "\"center\"", ":", "\n", "        ", "return", "_padboth", "(", "width", ",", "header", ")", "\n", "", "elif", "not", "alignment", ":", "\n", "        ", "return", "\"{0}\"", ".", "format", "(", "header", ")", "\n", "", "else", ":", "\n", "        ", "return", "_padleft", "(", "width", ",", "header", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.core.tabulate._normalize_tabular_data": [[467, 539], ["list", "list", "hasattr", "hasattr", "hasattr", "list", "list", "map", "len", "len", "list", "list", "hasattr", "list", "hasattr", "getattr", "len", "map", "len", "tabular_data.keys", "zip_longest", "list", "ValueError", "map", "isinstance", "hasattr", "list", "tabular_data.keys", "len", "map", "list", "list", "list", "zip", "len", "map", "tabular_data.values", "list", "range", "len"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.ListableAPIResource.list", "home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.ListableAPIResource.list", "home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.ListableAPIResource.list", "home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.ListableAPIResource.list", "home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.ListableAPIResource.list", "home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.ListableAPIResource.list", "home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.ListableAPIResource.list", "home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.ListableAPIResource.list", "home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.ListableAPIResource.list", "home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.ListableAPIResource.list", "home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.ListableAPIResource.list", "home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.ListableAPIResource.list", "home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.ListableAPIResource.list"], ["", "", "def", "_normalize_tabular_data", "(", "tabular_data", ",", "headers", ")", ":", "\n", "    ", "\"\"\"Transform a supported data type to a list of lists, and a list of headers.\n\n    Supported tabular data types:\n\n    * list-of-lists or another iterable of iterables\n\n    * list of named tuples (usually used with headers=\"keys\")\n\n    * 2D NumPy arrays\n\n    * NumPy record arrays (usually used with headers=\"keys\")\n\n    * dict of iterables (usually used with headers=\"keys\")\n\n    * pandas.DataFrame (usually used with headers=\"keys\")\n\n    The first row can be used as headers if headers=\"firstrow\",\n    column indices can be used as headers if headers=\"keys\".\n\n    \"\"\"", "\n", "\n", "if", "hasattr", "(", "tabular_data", ",", "\"keys\"", ")", "and", "hasattr", "(", "tabular_data", ",", "\"values\"", ")", ":", "\n", "# dict-like and pandas.DataFrame?", "\n", "        ", "if", "hasattr", "(", "tabular_data", ".", "values", ",", "\"__call__\"", ")", ":", "\n", "# likely a conventional dict", "\n", "            ", "keys", "=", "list", "(", "tabular_data", ".", "keys", "(", ")", ")", "\n", "rows", "=", "list", "(", "zip_longest", "(", "*", "list", "(", "tabular_data", ".", "values", "(", ")", ")", ")", ")", "# columns have to be transposed", "\n", "", "elif", "hasattr", "(", "tabular_data", ",", "\"index\"", ")", ":", "\n", "# values is a property, has .index => it's likely a pandas.DataFrame (pandas 0.11.0)", "\n", "            ", "keys", "=", "list", "(", "tabular_data", ".", "keys", "(", ")", ")", "\n", "vals", "=", "tabular_data", ".", "values", "# values matrix doesn't need to be transposed", "\n", "names", "=", "tabular_data", ".", "index", "\n", "rows", "=", "[", "[", "v", "]", "+", "list", "(", "row", ")", "for", "v", ",", "row", "in", "zip", "(", "names", ",", "vals", ")", "]", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"tabular data doesn't appear to be a dict or a DataFrame\"", ")", "\n", "\n", "", "if", "headers", "==", "\"keys\"", ":", "\n", "            ", "headers", "=", "list", "(", "map", "(", "_text_type", ",", "keys", ")", ")", "# headers should be strings", "\n", "\n", "", "", "else", ":", "# it's a usual an iterable of iterables, or a NumPy array", "\n", "        ", "rows", "=", "list", "(", "tabular_data", ")", "\n", "\n", "if", "(", "headers", "==", "\"keys\"", "and", "\n", "hasattr", "(", "tabular_data", ",", "\"dtype\"", ")", "and", "\n", "getattr", "(", "tabular_data", ".", "dtype", ",", "\"names\"", ")", ")", ":", "\n", "# numpy record array", "\n", "            ", "headers", "=", "tabular_data", ".", "dtype", ".", "names", "\n", "", "elif", "(", "headers", "==", "\"keys\"", "\n", "and", "len", "(", "rows", ")", ">", "0", "\n", "and", "isinstance", "(", "rows", "[", "0", "]", ",", "tuple", ")", "\n", "and", "hasattr", "(", "rows", "[", "0", "]", ",", "\"_fields\"", ")", ")", ":", "# namedtuple", "\n", "            ", "headers", "=", "list", "(", "map", "(", "_text_type", ",", "rows", "[", "0", "]", ".", "_fields", ")", ")", "\n", "", "elif", "headers", "==", "\"keys\"", "and", "len", "(", "rows", ")", ">", "0", ":", "# keys are column indices", "\n", "            ", "headers", "=", "list", "(", "map", "(", "_text_type", ",", "list", "(", "range", "(", "len", "(", "rows", "[", "0", "]", ")", ")", ")", ")", ")", "\n", "\n", "# take headers from the first row if necessary", "\n", "", "", "if", "headers", "==", "\"firstrow\"", "and", "len", "(", "rows", ")", ">", "0", ":", "\n", "        ", "headers", "=", "list", "(", "map", "(", "_text_type", ",", "rows", "[", "0", "]", ")", ")", "# headers should be strings", "\n", "rows", "=", "rows", "[", "1", ":", "]", "\n", "\n", "", "headers", "=", "list", "(", "headers", ")", "\n", "rows", "=", "list", "(", "map", "(", "list", ",", "rows", ")", ")", "\n", "\n", "# pad with empty headers for initial columns if necessary", "\n", "if", "headers", "and", "len", "(", "rows", ")", ">", "0", ":", "\n", "       ", "nhs", "=", "len", "(", "headers", ")", "\n", "ncols", "=", "len", "(", "rows", "[", "0", "]", ")", "\n", "if", "nhs", "<", "ncols", ":", "\n", "           ", "headers", "=", "[", "\"\"", "]", "*", "(", "ncols", "-", "nhs", ")", "+", "headers", "\n", "\n", "", "", "return", "rows", ",", "headers", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.core.tabulate.tabulate": [[541, 778], ["tabulate._normalize_tabular_data", "re.search", "list", "list", "tabulate._format_table", "zip", "map", "tabulate._align_column", "list", "list", "isinstance", "_table_formats.get", "tabulate._format", "zip", "len", "zip", "max", "tabulate._align_header", "zip", "width_fn", "zip", "width_fn", "width_fn", "zip", "zip", "map", "map"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.core.tabulate._normalize_tabular_data", "home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.ListableAPIResource.list", "home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.ListableAPIResource.list", "home.repos.pwc.inspect_result.Rondorf_BOReL.core.tabulate._format_table", "home.repos.pwc.inspect_result.Rondorf_BOReL.core.tabulate._align_column", "home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.ListableAPIResource.list", "home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.ListableAPIResource.list", "home.repos.pwc.inspect_result.Rondorf_BOReL.core.tabulate._format", "home.repos.pwc.inspect_result.Rondorf_BOReL.core.tabulate._align_header"], ["", "def", "tabulate", "(", "tabular_data", ",", "headers", "=", "[", "]", ",", "tablefmt", "=", "\"simple\"", ",", "\n", "floatfmt", "=", "\"g\"", ",", "numalign", "=", "\"decimal\"", ",", "stralign", "=", "\"left\"", ",", "\n", "missingval", "=", "\"\"", ")", ":", "\n", "    ", "\"\"\"Format a fixed width table for pretty printing.\n\n    >>> print(tabulate([[1, 2.34], [-56, \"8.999\"], [\"2\", \"10001\"]]))\n    ---  ---------\n      1      2.34\n    -56      8.999\n      2  10001\n    ---  ---------\n\n    The first required argument (`tabular_data`) can be a\n    list-of-lists (or another iterable of iterables), a list of named\n    tuples, a dictionary of iterables, a two-dimensional NumPy array,\n    NumPy record array, or a Pandas' dataframe.\n\n\n    Table headers\n    -------------\n\n    To print nice column headers, supply the second argument (`headers`):\n\n      - `headers` can be an explicit list of column headers\n      - if `headers=\"firstrow\"`, then the first row of data is used\n      - if `headers=\"keys\"`, then dictionary keys or column indices are used\n\n    Otherwise a headerless table is produced.\n\n    If the number of headers is less than the number of columns, they\n    are supposed to be names of the last columns. This is consistent\n    with the plain-text format of R and Pandas' dataframes.\n\n    >>> print(tabulate([[\"sex\",\"age\"],[\"Alice\",\"F\",24],[\"Bob\",\"M\",19]],\n    ...       headers=\"firstrow\"))\n           sex      age\n    -----  -----  -----\n    Alice  F         24\n    Bob    M         19\n\n\n    Column alignment\n    ----------------\n\n    `tabulate` tries to detect column types automatically, and aligns\n    the values properly. By default it aligns decimal points of the\n    numbers (or flushes integer numbers to the right), and flushes\n    everything else to the left. Possible column alignments\n    (`numalign`, `stralign`) are: \"right\", \"center\", \"left\", \"decimal\"\n    (only for `numalign`), and None (to disable alignment).\n\n\n    Table formats\n    -------------\n\n    `floatfmt` is a format specification used for columns which\n    contain numeric data with a decimal point.\n\n    `None` values are replaced with a `missingval` string:\n\n    >>> print(tabulate([[\"spam\", 1, None],\n    ...                 [\"eggs\", 42, 3.14],\n    ...                 [\"other\", None, 2.7]], missingval=\"?\"))\n    -----  --  ----\n    spam    1  ?\n    eggs   42  3.14\n    other   ?  2.7\n    -----  --  ----\n\n    Various plain-text table formats (`tablefmt`) are supported:\n    'plain', 'simple', 'grid', 'pipe', 'orgtbl', 'rst', 'mediawiki',\n    and 'latex'. Variable `tabulate_formats` contains the list of\n    currently supported formats.\n\n    \"plain\" format doesn't use any pseudographics to draw tables,\n    it separates columns with a double space:\n\n    >>> print(tabulate([[\"spam\", 41.9999], [\"eggs\", \"451.0\"]],\n    ...                 [\"strings\", \"numbers\"], \"plain\"))\n    strings      numbers\n    spam         41.9999\n    eggs        451\n\n    >>> print(tabulate([[\"spam\", 41.9999], [\"eggs\", \"451.0\"]], tablefmt=\"plain\"))\n    spam   41.9999\n    eggs  451\n\n    \"simple\" format is like Pandoc simple_tables:\n\n    >>> print(tabulate([[\"spam\", 41.9999], [\"eggs\", \"451.0\"]],\n    ...                 [\"strings\", \"numbers\"], \"simple\"))\n    strings      numbers\n    ---------  ---------\n    spam         41.9999\n    eggs        451\n\n    >>> print(tabulate([[\"spam\", 41.9999], [\"eggs\", \"451.0\"]], tablefmt=\"simple\"))\n    ----  --------\n    spam   41.9999\n    eggs  451\n    ----  --------\n\n    \"grid\" is similar to tables produced by Emacs table.el package or\n    Pandoc grid_tables:\n\n    >>> print(tabulate([[\"spam\", 41.9999], [\"eggs\", \"451.0\"]],\n    ...                [\"strings\", \"numbers\"], \"grid\"))\n    +-----------+-----------+\n    | strings   |   numbers |\n    +===========+===========+\n    | spam      |   41.9999 |\n    +-----------+-----------+\n    | eggs      |  451      |\n    +-----------+-----------+\n\n    >>> print(tabulate([[\"spam\", 41.9999], [\"eggs\", \"451.0\"]], tablefmt=\"grid\"))\n    +------+----------+\n    | spam |  41.9999 |\n    +------+----------+\n    | eggs | 451      |\n    +------+----------+\n\n    \"pipe\" is like tables in PHP Markdown Extra extension or Pandoc\n    pipe_tables:\n\n    >>> print(tabulate([[\"spam\", 41.9999], [\"eggs\", \"451.0\"]],\n    ...                [\"strings\", \"numbers\"], \"pipe\"))\n    | strings   |   numbers |\n    |:----------|----------:|\n    | spam      |   41.9999 |\n    | eggs      |  451      |\n\n    >>> print(tabulate([[\"spam\", 41.9999], [\"eggs\", \"451.0\"]], tablefmt=\"pipe\"))\n    |:-----|---------:|\n    | spam |  41.9999 |\n    | eggs | 451      |\n\n    \"orgtbl\" is like tables in Emacs org-mode and orgtbl-mode. They\n    are slightly different from \"pipe\" format by not using colons to\n    define column alignment, and using a \"+\" sign to indicate line\n    intersections:\n\n    >>> print(tabulate([[\"spam\", 41.9999], [\"eggs\", \"451.0\"]],\n    ...                [\"strings\", \"numbers\"], \"orgtbl\"))\n    | strings   |   numbers |\n    |-----------+-----------|\n    | spam      |   41.9999 |\n    | eggs      |  451      |\n\n\n    >>> print(tabulate([[\"spam\", 41.9999], [\"eggs\", \"451.0\"]], tablefmt=\"orgtbl\"))\n    | spam |  41.9999 |\n    | eggs | 451      |\n\n    \"rst\" is like a simple table format from reStructuredText; please\n    note that reStructuredText accepts also \"grid\" tables:\n\n    >>> print(tabulate([[\"spam\", 41.9999], [\"eggs\", \"451.0\"]],\n    ...                [\"strings\", \"numbers\"], \"rst\"))\n    =========  =========\n    strings      numbers\n    =========  =========\n    spam         41.9999\n    eggs        451\n    =========  =========\n\n    >>> print(tabulate([[\"spam\", 41.9999], [\"eggs\", \"451.0\"]], tablefmt=\"rst\"))\n    ====  ========\n    spam   41.9999\n    eggs  451\n    ====  ========\n\n    \"mediawiki\" produces a table markup used in Wikipedia and on other\n    MediaWiki-based sites:\n\n    >>> print(tabulate([[\"strings\", \"numbers\"], [\"spam\", 41.9999], [\"eggs\", \"451.0\"]],\n    ...                headers=\"firstrow\", tablefmt=\"mediawiki\"))\n    {| class=\"wikitable\" style=\"text-align: left;\"\n    |+ <!-- caption -->\n    |-\n    ! strings   !! align=\"right\"|   numbers\n    |-\n    | spam      || align=\"right\"|   41.9999\n    |-\n    | eggs      || align=\"right\"|  451\n    |}\n\n    \"latex\" produces a tabular environment of LaTeX document markup:\n\n    >>> print(tabulate([[\"spam\", 41.9999], [\"eggs\", \"451.0\"]], tablefmt=\"latex\"))\n    \\\\begin{tabular}{lr}\n    \\\\hline\n     spam &  41.9999 \\\\\\\\\n     eggs & 451      \\\\\\\\\n    \\\\hline\n    \\\\end{tabular}\n\n    \"\"\"", "\n", "\n", "list_of_lists", ",", "headers", "=", "_normalize_tabular_data", "(", "tabular_data", ",", "headers", ")", "\n", "\n", "# optimization: look for ANSI control codes once,", "\n", "# enable smart width functions only if a control code is found", "\n", "plain_text", "=", "'\\n'", ".", "join", "(", "[", "'\\t'", ".", "join", "(", "map", "(", "_text_type", ",", "headers", ")", ")", "]", "+", "[", "'\\t'", ".", "join", "(", "map", "(", "_text_type", ",", "row", ")", ")", "for", "row", "in", "list_of_lists", "]", ")", "\n", "has_invisible", "=", "re", ".", "search", "(", "_invisible_codes", ",", "plain_text", ")", "\n", "if", "has_invisible", ":", "\n", "        ", "width_fn", "=", "_visible_width", "\n", "", "else", ":", "\n", "        ", "width_fn", "=", "len", "\n", "\n", "# format rows and columns, convert numeric values to strings", "\n", "", "cols", "=", "list", "(", "zip", "(", "*", "list_of_lists", ")", ")", "\n", "coltypes", "=", "list", "(", "map", "(", "_column_type", ",", "cols", ")", ")", "\n", "cols", "=", "[", "[", "_format", "(", "v", ",", "ct", ",", "floatfmt", ",", "missingval", ")", "for", "v", "in", "c", "]", "\n", "for", "c", ",", "ct", "in", "zip", "(", "cols", ",", "coltypes", ")", "]", "\n", "\n", "# align columns", "\n", "aligns", "=", "[", "numalign", "if", "ct", "in", "[", "int", ",", "float", "]", "else", "stralign", "for", "ct", "in", "coltypes", "]", "\n", "minwidths", "=", "[", "width_fn", "(", "h", ")", "+", "2", "for", "h", "in", "headers", "]", "if", "headers", "else", "[", "0", "]", "*", "len", "(", "cols", ")", "\n", "cols", "=", "[", "_align_column", "(", "c", ",", "a", ",", "minw", ",", "has_invisible", ")", "\n", "for", "c", ",", "a", ",", "minw", "in", "zip", "(", "cols", ",", "aligns", ",", "minwidths", ")", "]", "\n", "\n", "if", "headers", ":", "\n", "# align headers and add headers", "\n", "        ", "minwidths", "=", "[", "max", "(", "minw", ",", "width_fn", "(", "c", "[", "0", "]", ")", ")", "for", "minw", ",", "c", "in", "zip", "(", "minwidths", ",", "cols", ")", "]", "\n", "headers", "=", "[", "_align_header", "(", "h", ",", "a", ",", "minw", ")", "\n", "for", "h", ",", "a", ",", "minw", "in", "zip", "(", "headers", ",", "aligns", ",", "minwidths", ")", "]", "\n", "rows", "=", "list", "(", "zip", "(", "*", "cols", ")", ")", "\n", "", "else", ":", "\n", "        ", "minwidths", "=", "[", "width_fn", "(", "c", "[", "0", "]", ")", "for", "c", "in", "cols", "]", "\n", "rows", "=", "list", "(", "zip", "(", "*", "cols", ")", ")", "\n", "\n", "", "if", "not", "isinstance", "(", "tablefmt", ",", "TableFormat", ")", ":", "\n", "        ", "tablefmt", "=", "_table_formats", ".", "get", "(", "tablefmt", ",", "_table_formats", "[", "\"simple\"", "]", ")", "\n", "\n", "", "return", "_format_table", "(", "tablefmt", ",", "headers", ",", "rows", ",", "minwidths", ",", "aligns", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.core.tabulate._build_simple_row": [[780, 784], ["sep.join"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.join"], ["", "def", "_build_simple_row", "(", "padded_cells", ",", "rowfmt", ")", ":", "\n", "    ", "\"Format row according to DataRow format without padding.\"", "\n", "begin", ",", "sep", ",", "end", "=", "rowfmt", "\n", "return", "(", "begin", "+", "sep", ".", "join", "(", "padded_cells", ")", "+", "end", ")", ".", "rstrip", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.core.tabulate._build_row": [[786, 794], ["hasattr", "rowfmt", "tabulate._build_simple_row"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.core.tabulate._build_simple_row"], ["", "def", "_build_row", "(", "padded_cells", ",", "colwidths", ",", "colaligns", ",", "rowfmt", ")", ":", "\n", "    ", "\"Return a string which represents a row of data cells.\"", "\n", "if", "not", "rowfmt", ":", "\n", "        ", "return", "None", "\n", "", "if", "hasattr", "(", "rowfmt", ",", "\"__call__\"", ")", ":", "\n", "        ", "return", "rowfmt", "(", "padded_cells", ",", "colwidths", ",", "colaligns", ")", "\n", "", "else", ":", "\n", "        ", "return", "_build_simple_row", "(", "padded_cells", ",", "rowfmt", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.core.tabulate._build_line": [[796, 806], ["hasattr", "linefmt", "tabulate._build_simple_row"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.core.tabulate._build_simple_row"], ["", "", "def", "_build_line", "(", "colwidths", ",", "colaligns", ",", "linefmt", ")", ":", "\n", "    ", "\"Return a string which represents a horizontal line.\"", "\n", "if", "not", "linefmt", ":", "\n", "        ", "return", "None", "\n", "", "if", "hasattr", "(", "linefmt", ",", "\"__call__\"", ")", ":", "\n", "        ", "return", "linefmt", "(", "colwidths", ",", "colaligns", ")", "\n", "", "else", ":", "\n", "        ", "begin", ",", "fill", ",", "sep", ",", "end", "=", "linefmt", "\n", "cells", "=", "[", "fill", "*", "w", "for", "w", "in", "colwidths", "]", "\n", "return", "_build_simple_row", "(", "cells", ",", "(", "begin", ",", "sep", ",", "end", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.core.tabulate._pad_row": [[808, 815], ["None"], "function", ["None"], ["", "", "def", "_pad_row", "(", "cells", ",", "padding", ")", ":", "\n", "    ", "if", "cells", ":", "\n", "        ", "pad", "=", "\" \"", "*", "padding", "\n", "padded_cells", "=", "[", "pad", "+", "cell", "+", "pad", "for", "cell", "in", "cells", "]", "\n", "return", "padded_cells", "\n", "", "else", ":", "\n", "        ", "return", "cells", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.core.tabulate._format_table": [[817, 851], ["tabulate._pad_row", "tabulate._pad_row", "lines.append", "lines.append", "lines.append", "lines.append", "tabulate._build_line", "tabulate._build_row", "lines.append", "lines.append", "lines.append", "tabulate._build_row", "lines.append", "tabulate._build_line", "tabulate._build_line", "tabulate._build_row", "tabulate._build_line", "tabulate._build_row"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.core.tabulate._pad_row", "home.repos.pwc.inspect_result.Rondorf_BOReL.core.tabulate._pad_row", "home.repos.pwc.inspect_result.Rondorf_BOReL.core.tabulate._build_line", "home.repos.pwc.inspect_result.Rondorf_BOReL.core.tabulate._build_row", "home.repos.pwc.inspect_result.Rondorf_BOReL.core.tabulate._build_row", "home.repos.pwc.inspect_result.Rondorf_BOReL.core.tabulate._build_line", "home.repos.pwc.inspect_result.Rondorf_BOReL.core.tabulate._build_line", "home.repos.pwc.inspect_result.Rondorf_BOReL.core.tabulate._build_row", "home.repos.pwc.inspect_result.Rondorf_BOReL.core.tabulate._build_line", "home.repos.pwc.inspect_result.Rondorf_BOReL.core.tabulate._build_row"], ["", "", "def", "_format_table", "(", "fmt", ",", "headers", ",", "rows", ",", "colwidths", ",", "colaligns", ")", ":", "\n", "    ", "\"\"\"Produce a plain-text representation of the table.\"\"\"", "\n", "lines", "=", "[", "]", "\n", "hidden", "=", "fmt", ".", "with_header_hide", "if", "(", "headers", "and", "fmt", ".", "with_header_hide", ")", "else", "[", "]", "\n", "pad", "=", "fmt", ".", "padding", "\n", "headerrow", "=", "fmt", ".", "headerrow", "\n", "\n", "padded_widths", "=", "[", "(", "w", "+", "2", "*", "pad", ")", "for", "w", "in", "colwidths", "]", "\n", "padded_headers", "=", "_pad_row", "(", "headers", ",", "pad", ")", "\n", "padded_rows", "=", "[", "_pad_row", "(", "row", ",", "pad", ")", "for", "row", "in", "rows", "]", "\n", "\n", "if", "fmt", ".", "lineabove", "and", "\"lineabove\"", "not", "in", "hidden", ":", "\n", "        ", "lines", ".", "append", "(", "_build_line", "(", "padded_widths", ",", "colaligns", ",", "fmt", ".", "lineabove", ")", ")", "\n", "\n", "", "if", "padded_headers", ":", "\n", "        ", "lines", ".", "append", "(", "_build_row", "(", "padded_headers", ",", "padded_widths", ",", "colaligns", ",", "headerrow", ")", ")", "\n", "if", "fmt", ".", "linebelowheader", "and", "\"linebelowheader\"", "not", "in", "hidden", ":", "\n", "            ", "lines", ".", "append", "(", "_build_line", "(", "padded_widths", ",", "colaligns", ",", "fmt", ".", "linebelowheader", ")", ")", "\n", "\n", "", "", "if", "padded_rows", "and", "fmt", ".", "linebetweenrows", "and", "\"linebetweenrows\"", "not", "in", "hidden", ":", "\n", "# initial rows with a line below", "\n", "        ", "for", "row", "in", "padded_rows", "[", ":", "-", "1", "]", ":", "\n", "            ", "lines", ".", "append", "(", "_build_row", "(", "row", ",", "padded_widths", ",", "colaligns", ",", "fmt", ".", "datarow", ")", ")", "\n", "lines", ".", "append", "(", "_build_line", "(", "padded_widths", ",", "colaligns", ",", "fmt", ".", "linebetweenrows", ")", ")", "\n", "# the last row without a line below", "\n", "", "lines", ".", "append", "(", "_build_row", "(", "padded_rows", "[", "-", "1", "]", ",", "padded_widths", ",", "colaligns", ",", "fmt", ".", "datarow", ")", ")", "\n", "", "else", ":", "\n", "        ", "for", "row", "in", "padded_rows", ":", "\n", "            ", "lines", ".", "append", "(", "_build_row", "(", "row", ",", "padded_widths", ",", "colaligns", ",", "fmt", ".", "datarow", ")", ")", "\n", "\n", "", "", "if", "fmt", ".", "linebelow", "and", "\"linebelow\"", "not", "in", "hidden", ":", "\n", "        ", "lines", ".", "append", "(", "_build_line", "(", "padded_widths", ",", "colaligns", ",", "fmt", ".", "linebelow", ")", ")", "\n", "\n", "", "return", "\"\\n\"", ".", "join", "(", "lines", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.Rondorf_BOReL.core.logger.TerminalTablePrinter.__init__": [[201, 204], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "headers", "=", "None", "\n", "self", ".", "tabulars", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.core.logger.TerminalTablePrinter.print_tabular": [[205, 212], ["logger.TerminalTablePrinter.tabulars.append", "logger.TerminalTablePrinter.refresh", "len", "len"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.core.logger.TerminalTablePrinter.refresh"], ["", "def", "print_tabular", "(", "self", ",", "new_tabular", ")", ":", "\n", "        ", "if", "self", ".", "headers", "is", "None", ":", "\n", "            ", "self", ".", "headers", "=", "[", "x", "[", "0", "]", "for", "x", "in", "new_tabular", "]", "\n", "", "else", ":", "\n", "            ", "assert", "len", "(", "self", ".", "headers", ")", "==", "len", "(", "new_tabular", ")", "\n", "", "self", ".", "tabulars", ".", "append", "(", "[", "x", "[", "1", "]", "for", "x", "in", "new_tabular", "]", ")", "\n", "self", ".", "refresh", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.core.logger.TerminalTablePrinter.refresh": [[213, 220], ["os.popen().read().split", "os.popen().read().split", "os.popen().read().split", "os.popen().read().split", "sys.stdout.write", "sys.stdout.write", "sys.stdout.write", "rlkit.core.tabulate.tabulate", "os.popen().read", "os.popen().read", "os.popen().read", "os.popen().read", "os.popen", "os.popen", "os.popen", "os.popen", "int"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.split", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.split", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.split", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.split", "home.repos.pwc.inspect_result.Rondorf_BOReL.core.tabulate.tabulate"], ["", "def", "refresh", "(", "self", ")", ":", "\n", "        ", "import", "os", "\n", "rows", ",", "columns", "=", "os", ".", "popen", "(", "'stty size'", ",", "'r'", ")", ".", "read", "(", ")", ".", "split", "(", ")", "\n", "tabulars", "=", "self", ".", "tabulars", "[", "-", "(", "int", "(", "rows", ")", "-", "3", ")", ":", "]", "\n", "sys", ".", "stdout", ".", "write", "(", "\"\\x1b[2J\\x1b[H\"", ")", "\n", "sys", ".", "stdout", ".", "write", "(", "tabulate", "(", "tabulars", ",", "self", ".", "headers", ")", ")", "\n", "sys", ".", "stdout", ".", "write", "(", "\"\\n\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.core.logger.MyEncoder.default": [[289, 296], ["isinstance", "json.JSONEncoder.default", "isinstance"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.core.logger.MyEncoder.default"], ["    ", "def", "default", "(", "self", ",", "o", ")", ":", "\n", "        ", "if", "isinstance", "(", "o", ",", "type", ")", ":", "\n", "            ", "return", "{", "'$class'", ":", "o", ".", "__module__", "+", "\".\"", "+", "o", ".", "__name__", "}", "\n", "", "elif", "isinstance", "(", "o", ",", "Enum", ")", ":", "\n", "            ", "return", "{", "\n", "'$enum'", ":", "o", ".", "__module__", "+", "\".\"", "+", "o", ".", "__class__", ".", "__name__", "+", "'.'", "+", "o", ".", "name", "}", "\n", "", "return", "json", ".", "JSONEncoder", ".", "default", "(", "self", ",", "o", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.core.logger.mkdir_p": [[25, 33], ["os.makedirs", "os.makedirs", "os.path.isdir", "os.path.isdir"], "function", ["None"], ["def", "mkdir_p", "(", "path", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "os", ".", "makedirs", "(", "path", ")", "\n", "", "except", "OSError", "as", "exc", ":", "# Python >2.5", "\n", "        ", "if", "exc", ".", "errno", "==", "errno", ".", "EEXIST", "and", "os", ".", "path", ".", "isdir", "(", "path", ")", ":", "\n", "            ", "pass", "\n", "", "else", ":", "\n", "            ", "raise", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.core.logger._add_output": [[58, 63], ["logger.mkdir_p", "arr.append", "open", "os.path.dirname", "os.path.dirname"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.core.logger.mkdir_p"], ["def", "_add_output", "(", "file_name", ",", "arr", ",", "fds", ",", "mode", "=", "'a'", ")", ":", "\n", "    ", "if", "file_name", "not", "in", "arr", ":", "\n", "        ", "mkdir_p", "(", "os", ".", "path", ".", "dirname", "(", "file_name", ")", ")", "\n", "arr", ".", "append", "(", "file_name", ")", "\n", "fds", "[", "file_name", "]", "=", "open", "(", "file_name", ",", "mode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.core.logger._remove_output": [[65, 70], ["fds[].close", "arr.remove"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.close"], ["", "", "def", "_remove_output", "(", "file_name", ",", "arr", ",", "fds", ")", ":", "\n", "    ", "if", "file_name", "in", "arr", ":", "\n", "        ", "fds", "[", "file_name", "]", ".", "close", "(", ")", "\n", "del", "fds", "[", "file_name", "]", "\n", "arr", ".", "remove", "(", "file_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.core.logger.push_prefix": [[72, 76], ["_prefixes.append"], "function", ["None"], ["", "", "def", "push_prefix", "(", "prefix", ")", ":", "\n", "    ", "_prefixes", ".", "append", "(", "prefix", ")", "\n", "global", "_prefix_str", "\n", "_prefix_str", "=", "''", ".", "join", "(", "_prefixes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.core.logger.add_text_output": [[78, 80], ["logger._add_output"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.core.logger._add_output"], ["", "def", "add_text_output", "(", "file_name", ")", ":", "\n", "    ", "_add_output", "(", "file_name", ",", "_text_outputs", ",", "_text_fds", ",", "mode", "=", "'a'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.core.logger.remove_text_output": [[82, 84], ["logger._remove_output"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.core.logger._remove_output"], ["", "def", "remove_text_output", "(", "file_name", ")", ":", "\n", "    ", "_remove_output", "(", "file_name", ",", "_text_outputs", ",", "_text_fds", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.core.logger.add_tabular_output": [[86, 88], ["logger._add_output"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.core.logger._add_output"], ["", "def", "add_tabular_output", "(", "file_name", ")", ":", "\n", "    ", "_add_output", "(", "file_name", ",", "_tabular_outputs", ",", "_tabular_fds", ",", "mode", "=", "'w'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.core.logger.remove_tabular_output": [[90, 94], ["logger._remove_output", "_tabular_header_written.remove"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.core.logger._remove_output"], ["", "def", "remove_tabular_output", "(", "file_name", ")", ":", "\n", "    ", "if", "_tabular_fds", "[", "file_name", "]", "in", "_tabular_header_written", ":", "\n", "        ", "_tabular_header_written", ".", "remove", "(", "_tabular_fds", "[", "file_name", "]", ")", "\n", "", "_remove_output", "(", "file_name", ",", "_tabular_outputs", ",", "_tabular_fds", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.core.logger.set_snapshot_dir": [[96, 99], ["None"], "function", ["None"], ["", "def", "set_snapshot_dir", "(", "dir_name", ")", ":", "\n", "    ", "global", "_snapshot_dir", "\n", "_snapshot_dir", "=", "dir_name", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.core.logger.get_snapshot_dir": [[101, 103], ["None"], "function", ["None"], ["", "def", "get_snapshot_dir", "(", ")", ":", "\n", "    ", "return", "_snapshot_dir", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.core.logger.get_snapshot_mode": [[105, 107], ["None"], "function", ["None"], ["", "def", "get_snapshot_mode", "(", ")", ":", "\n", "    ", "return", "_snapshot_mode", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.core.logger.set_snapshot_mode": [[109, 112], ["None"], "function", ["None"], ["", "def", "set_snapshot_mode", "(", "mode", ")", ":", "\n", "    ", "global", "_snapshot_mode", "\n", "_snapshot_mode", "=", "mode", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.core.logger.get_snapshot_gap": [[114, 116], ["None"], "function", ["None"], ["", "def", "get_snapshot_gap", "(", ")", ":", "\n", "    ", "return", "_snapshot_gap", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.core.logger.set_snapshot_gap": [[118, 121], ["None"], "function", ["None"], ["", "def", "set_snapshot_gap", "(", "gap", ")", ":", "\n", "    ", "global", "_snapshot_gap", "\n", "_snapshot_gap", "=", "gap", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.core.logger.set_log_tabular_only": [[123, 126], ["None"], "function", ["None"], ["", "def", "set_log_tabular_only", "(", "log_tabular_only", ")", ":", "\n", "    ", "global", "_log_tabular_only", "\n", "_log_tabular_only", "=", "log_tabular_only", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.core.logger.get_log_tabular_only": [[128, 130], ["None"], "function", ["None"], ["", "def", "get_log_tabular_only", "(", ")", ":", "\n", "    ", "return", "_log_tabular_only", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.core.logger.log": [[132, 147], ["datetime.datetime.now", "datetime.datetime.now.strftime", "print", "list", "sys.stdout.flush", "dateutil.tz.tzlocal", "_text_fds.values", "fd.write", "fd.flush"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.ListableAPIResource.list", "home.repos.pwc.inspect_result.Rondorf_BOReL.monitoring.stats_recorder.StatsRecorder.flush", "home.repos.pwc.inspect_result.Rondorf_BOReL.monitoring.stats_recorder.StatsRecorder.flush"], ["", "def", "log", "(", "s", ",", "with_prefix", "=", "True", ",", "with_timestamp", "=", "True", ")", ":", "\n", "    ", "out", "=", "s", "\n", "if", "with_prefix", ":", "\n", "        ", "out", "=", "_prefix_str", "+", "out", "\n", "", "if", "with_timestamp", ":", "\n", "        ", "now", "=", "datetime", ".", "datetime", ".", "now", "(", "dateutil", ".", "tz", ".", "tzlocal", "(", ")", ")", "\n", "timestamp", "=", "now", ".", "strftime", "(", "'%Y-%m-%d %H:%M:%S.%f %Z'", ")", "\n", "out", "=", "\"%s | %s\"", "%", "(", "timestamp", ",", "out", ")", "\n", "", "if", "not", "_log_tabular_only", ":", "\n", "# Also log to stdout", "\n", "        ", "print", "(", "out", ")", "\n", "for", "fd", "in", "list", "(", "_text_fds", ".", "values", "(", ")", ")", ":", "\n", "            ", "fd", ".", "write", "(", "out", "+", "'\\n'", ")", "\n", "fd", ".", "flush", "(", ")", "\n", "", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.core.logger.record_tabular": [[149, 151], ["_tabular.append", "str", "str", "numpy.np.nan", "numpy.np.nan", "numpy.np.nan", "numpy.np.nan", "numpy.np.nan"], "function", ["None"], ["", "", "def", "record_tabular", "(", "key", ",", "val", ")", ":", "\n", "    ", "_tabular", ".", "append", "(", "(", "_tabular_prefix_str", "+", "str", "(", "key", ")", ",", "str", "(", "val", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.core.logger.push_tabular_prefix": [[153, 157], ["_tabular_prefixes.append"], "function", ["None"], ["", "def", "push_tabular_prefix", "(", "key", ")", ":", "\n", "    ", "_tabular_prefixes", ".", "append", "(", "key", ")", "\n", "global", "_tabular_prefix_str", "\n", "_tabular_prefix_str", "=", "''", ".", "join", "(", "_tabular_prefixes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.core.logger.pop_tabular_prefix": [[159, 163], ["None"], "function", ["None"], ["", "def", "pop_tabular_prefix", "(", ")", ":", "\n", "    ", "del", "_tabular_prefixes", "[", "-", "1", "]", "\n", "global", "_tabular_prefix_str", "\n", "_tabular_prefix_str", "=", "''", ".", "join", "(", "_tabular_prefixes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.core.logger.save_extra_data": [[165, 174], ["os.join", "open", "pickle.dump"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.join"], ["", "def", "save_extra_data", "(", "data", ",", "path", "=", "'extra_data'", ",", "ext", "=", "'.pkl'", ")", ":", "\n", "    ", "\"\"\"\n    Data saved here will always override the last entry\n\n    :param data: Something pickle'able.\n    \"\"\"", "\n", "file_name", "=", "osp", ".", "join", "(", "_snapshot_dir", ",", "path", "+", "ext", ")", "\n", "with", "open", "(", "file_name", ",", "'wb'", ")", "as", "f", ":", "\n", "        ", "pickle", ".", "dump", "(", "data", ",", "f", ",", "protocol", "=", "pickle", ".", "HIGHEST_PROTOCOL", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.core.logger.get_table_dict": [[176, 178], ["dict"], "function", ["None"], ["", "", "def", "get_table_dict", "(", ")", ":", "\n", "    ", "return", "dict", "(", "_tabular", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.core.logger.get_table_key_set": [[180, 182], ["set"], "function", ["None"], ["", "def", "get_table_key_set", "(", ")", ":", "\n", "    ", "return", "set", "(", "key", "for", "key", ",", "value", "in", "_tabular", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.core.logger.prefix": [[184, 191], ["logger.push_prefix", "logger.pop_prefix"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.core.logger.push_prefix", "home.repos.pwc.inspect_result.Rondorf_BOReL.core.logger.pop_prefix"], ["", "@", "contextmanager", "\n", "def", "prefix", "(", "key", ")", ":", "\n", "    ", "push_prefix", "(", "key", ")", "\n", "try", ":", "\n", "        ", "yield", "\n", "", "finally", ":", "\n", "        ", "pop_prefix", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.core.logger.tabular_prefix": [[193, 198], ["logger.push_tabular_prefix", "logger.pop_tabular_prefix"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.core.logger.push_tabular_prefix", "home.repos.pwc.inspect_result.Rondorf_BOReL.core.logger.pop_tabular_prefix"], ["", "", "@", "contextmanager", "\n", "def", "tabular_prefix", "(", "key", ")", ":", "\n", "    ", "push_tabular_prefix", "(", "key", ")", "\n", "yield", "\n", "pop_tabular_prefix", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.core.logger.dump_tabular": [[225, 245], ["kwargs.pop", "len", "dict", "list", "table_printer.print_tabular", "rlkit.core.tabulate.tabulate().split", "_tabular_fds.values", "csv.DictWriter", "csv.DictWriter.writerow", "tabular_fd.flush", "logger.log", "csv.DictWriter.writeheader", "_tabular_header_written.add", "rlkit.core.tabulate.tabulate", "list", "dict.keys"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.ListableAPIResource.list", "home.repos.pwc.inspect_result.Rondorf_BOReL.core.logger.TerminalTablePrinter.print_tabular", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.split", "home.repos.pwc.inspect_result.Rondorf_BOReL.monitoring.stats_recorder.StatsRecorder.flush", "home.repos.pwc.inspect_result.Rondorf_BOReL.core.logger.log", "home.repos.pwc.inspect_result.Rondorf_BOReL.core.tabulate.tabulate", "home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.ListableAPIResource.list"], ["def", "dump_tabular", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "wh", "=", "kwargs", ".", "pop", "(", "\"write_header\"", ",", "None", ")", "\n", "if", "len", "(", "_tabular", ")", ">", "0", ":", "\n", "        ", "if", "_log_tabular_only", ":", "\n", "            ", "table_printer", ".", "print_tabular", "(", "_tabular", ")", "\n", "", "else", ":", "\n", "            ", "for", "line", "in", "tabulate", "(", "_tabular", ")", ".", "split", "(", "'\\n'", ")", ":", "\n", "                ", "log", "(", "line", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "", "", "tabular_dict", "=", "dict", "(", "_tabular", ")", "\n", "# Also write to the csv files", "\n", "# This assumes that the keys in each iteration won't change!", "\n", "for", "tabular_fd", "in", "list", "(", "_tabular_fds", ".", "values", "(", ")", ")", ":", "\n", "            ", "writer", "=", "csv", ".", "DictWriter", "(", "tabular_fd", ",", "\n", "fieldnames", "=", "list", "(", "tabular_dict", ".", "keys", "(", ")", ")", ")", "\n", "if", "wh", "or", "(", "wh", "is", "None", "and", "tabular_fd", "not", "in", "_tabular_header_written", ")", ":", "\n", "                ", "writer", ".", "writeheader", "(", ")", "\n", "_tabular_header_written", ".", "add", "(", "tabular_fd", ")", "\n", "", "writer", ".", "writerow", "(", "tabular_dict", ")", "\n", "tabular_fd", ".", "flush", "(", ")", "\n", "", "del", "_tabular", "[", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.core.logger.pop_prefix": [[247, 251], ["None"], "function", ["None"], ["", "", "def", "pop_prefix", "(", ")", ":", "\n", "    ", "del", "_prefixes", "[", "-", "1", "]", "\n", "global", "_prefix_str", "\n", "_prefix_str", "=", "''", ".", "join", "(", "_prefixes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.core.logger.save_weights": [[252, 257], ["zip", "torch.save"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.UpdateableAPIResource.save"], ["", "def", "save_weights", "(", "weights", ",", "names", ")", ":", "\n", "    ", "''' save network weights to given paths '''", "\n", "# NOTE: breaking abstraction by adding torchkit dependence here", "\n", "for", "w", ",", "n", "in", "zip", "(", "weights", ",", "names", ")", ":", "\n", "        ", "torch", ".", "save", "(", "w", ",", "n", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.core.logger.save_itr_params": [[258, 286], ["params_dict.keys", "params_dict.values", "logger.save_weights", "os.join", "logger.save_weights", "os.join", "logger.save_weights", "logger.save_weights", "os.join", "logger.save_weights", "os.join", "os.join"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.core.logger.save_weights", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.join", "home.repos.pwc.inspect_result.Rondorf_BOReL.core.logger.save_weights", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.join", "home.repos.pwc.inspect_result.Rondorf_BOReL.core.logger.save_weights", "home.repos.pwc.inspect_result.Rondorf_BOReL.core.logger.save_weights", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.join", "home.repos.pwc.inspect_result.Rondorf_BOReL.core.logger.save_weights", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.join", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.join"], ["", "", "def", "save_itr_params", "(", "itr", ",", "params_dict", ")", ":", "\n", "    ", "''' snapshot model parameters '''", "\n", "# NOTE: assumes dict is ordered, should fix someday", "\n", "names", "=", "params_dict", ".", "keys", "(", ")", "\n", "params", "=", "params_dict", ".", "values", "(", ")", "\n", "if", "_snapshot_dir", ":", "\n", "        ", "if", "_snapshot_mode", "==", "'all'", ":", "\n", "# save for every training iteration", "\n", "            ", "file_names", "=", "[", "osp", ".", "join", "(", "_snapshot_dir", ",", "n", "+", "'_itr_%d.pth'", "%", "itr", ")", "for", "n", "in", "names", "]", "\n", "save_weights", "(", "params", ",", "file_names", ")", "\n", "", "elif", "_snapshot_mode", "==", "'last'", ":", "\n", "# override previous params", "\n", "            ", "file_names", "=", "[", "osp", ".", "join", "(", "_snapshot_dir", ",", "n", "+", "'.pth'", ")", "for", "n", "in", "names", "]", "\n", "save_weights", "(", "params", ",", "file_names", ")", "\n", "", "elif", "_snapshot_mode", "==", "\"gap\"", ":", "\n", "            ", "if", "itr", "%", "_snapshot_gap", "==", "0", ":", "\n", "                ", "file_names", "=", "[", "osp", ".", "join", "(", "_snapshot_dir", ",", "n", "+", "'_itr_%d.pth'", "%", "itr", ")", "for", "n", "in", "names", "]", "\n", "save_weights", "(", "params", ",", "file_names", ")", "\n", "", "", "elif", "_snapshot_mode", "==", "\"gap_and_last\"", ":", "\n", "            ", "if", "itr", "%", "_snapshot_gap", "==", "0", ":", "\n", "                ", "file_names", "=", "[", "osp", ".", "join", "(", "_snapshot_dir", ",", "n", "+", "'_itr_%d.pth'", "%", "itr", ")", "for", "n", "in", "names", "]", "\n", "save_weights", "(", "params", ",", "file_names", ")", "\n", "", "file_names", "=", "[", "osp", ".", "join", "(", "_snapshot_dir", ",", "n", "+", "'.pth'", ")", "for", "n", "in", "names", "]", "\n", "save_weights", "(", "params", ",", "file_names", ")", "\n", "", "elif", "_snapshot_mode", "==", "'none'", ":", "\n", "            ", "pass", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.core.logger.log_variant": [[298, 302], ["logger.mkdir_p", "os.path.dirname", "os.path.dirname", "open", "json.dump"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.core.logger.mkdir_p"], ["", "", "def", "log_variant", "(", "log_file", ",", "variant_data", ")", ":", "\n", "    ", "mkdir_p", "(", "os", ".", "path", ".", "dirname", "(", "log_file", ")", ")", "\n", "with", "open", "(", "log_file", ",", "\"w\"", ")", "as", "f", ":", "\n", "        ", "json", ".", "dump", "(", "variant_data", ",", "f", ",", "indent", "=", "2", ",", "sort_keys", "=", "True", ",", "cls", "=", "MyEncoder", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.core.logger.record_tabular_misc_stat": [[304, 323], ["len", "logger.record_tabular", "logger.record_tabular", "logger.record_tabular", "logger.record_tabular", "logger.record_tabular", "logger.record_tabular", "logger.record_tabular", "logger.record_tabular", "logger.record_tabular", "logger.record_tabular", "numpy.average", "numpy.std", "numpy.median", "numpy.min", "numpy.max"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.core.logger.record_tabular", "home.repos.pwc.inspect_result.Rondorf_BOReL.core.logger.record_tabular", "home.repos.pwc.inspect_result.Rondorf_BOReL.core.logger.record_tabular", "home.repos.pwc.inspect_result.Rondorf_BOReL.core.logger.record_tabular", "home.repos.pwc.inspect_result.Rondorf_BOReL.core.logger.record_tabular", "home.repos.pwc.inspect_result.Rondorf_BOReL.core.logger.record_tabular", "home.repos.pwc.inspect_result.Rondorf_BOReL.core.logger.record_tabular", "home.repos.pwc.inspect_result.Rondorf_BOReL.core.logger.record_tabular", "home.repos.pwc.inspect_result.Rondorf_BOReL.core.logger.record_tabular", "home.repos.pwc.inspect_result.Rondorf_BOReL.core.logger.record_tabular"], ["", "", "def", "record_tabular_misc_stat", "(", "key", ",", "values", ",", "placement", "=", "'back'", ")", ":", "\n", "    ", "if", "placement", "==", "'front'", ":", "\n", "        ", "prefix", "=", "\"\"", "\n", "suffix", "=", "key", "\n", "", "else", ":", "\n", "        ", "prefix", "=", "key", "\n", "suffix", "=", "\"\"", "\n", "", "if", "len", "(", "values", ")", ">", "0", ":", "\n", "        ", "record_tabular", "(", "prefix", "+", "\"Average\"", "+", "suffix", ",", "np", ".", "average", "(", "values", ")", ")", "\n", "record_tabular", "(", "prefix", "+", "\"Std\"", "+", "suffix", ",", "np", ".", "std", "(", "values", ")", ")", "\n", "record_tabular", "(", "prefix", "+", "\"Median\"", "+", "suffix", ",", "np", ".", "median", "(", "values", ")", ")", "\n", "record_tabular", "(", "prefix", "+", "\"Min\"", "+", "suffix", ",", "np", ".", "min", "(", "values", ")", ")", "\n", "record_tabular", "(", "prefix", "+", "\"Max\"", "+", "suffix", ",", "np", ".", "max", "(", "values", ")", ")", "\n", "", "else", ":", "\n", "        ", "record_tabular", "(", "prefix", "+", "\"Average\"", "+", "suffix", ",", "np", ".", "nan", ")", "\n", "record_tabular", "(", "prefix", "+", "\"Std\"", "+", "suffix", ",", "np", ".", "nan", ")", "\n", "record_tabular", "(", "prefix", "+", "\"Median\"", "+", "suffix", ",", "np", ".", "nan", ")", "\n", "record_tabular", "(", "prefix", "+", "\"Min\"", "+", "suffix", ",", "np", ".", "nan", ")", "\n", "record_tabular", "(", "prefix", "+", "\"Max\"", "+", "suffix", ",", "np", ".", "nan", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Rondorf_BOReL.core.eval_util.dprint": [[11, 15], ["int", "print"], "function", ["None"], ["def", "dprint", "(", "*", "args", ")", ":", "\n", "# hacky, but will do for now", "\n", "    ", "if", "int", "(", "os", ".", "environ", "[", "'DEBUG'", "]", ")", "==", "1", ":", "\n", "        ", "print", "(", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.core.eval_util.get_generic_path_information": [[17, 40], ["collections.OrderedDict", "numpy.vstack", "collections.OrderedDict.update", "collections.OrderedDict.update", "collections.OrderedDict.update", "len", "sum", "eval_util.create_stats_ordered_dict", "eval_util.create_stats_ordered_dict", "len", "numpy.hstack", "numpy.vstack", "eval_util.create_stats_ordered_dict"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.GymObject.update", "home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.GymObject.update", "home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.GymObject.update", "home.repos.pwc.inspect_result.Rondorf_BOReL.core.eval_util.create_stats_ordered_dict", "home.repos.pwc.inspect_result.Rondorf_BOReL.core.eval_util.create_stats_ordered_dict", "home.repos.pwc.inspect_result.Rondorf_BOReL.core.eval_util.create_stats_ordered_dict"], ["", "", "def", "get_generic_path_information", "(", "paths", ",", "stat_prefix", "=", "''", ")", ":", "\n", "    ", "\"\"\"\n    Get an OrderedDict with a bunch of statistic names and values.\n    \"\"\"", "\n", "statistics", "=", "OrderedDict", "(", ")", "\n", "returns", "=", "[", "sum", "(", "path", "[", "\"rewards\"", "]", ")", "for", "path", "in", "paths", "]", "\n", "\n", "rewards", "=", "np", ".", "vstack", "(", "[", "path", "[", "\"rewards\"", "]", "for", "path", "in", "paths", "]", ")", "\n", "statistics", ".", "update", "(", "create_stats_ordered_dict", "(", "'Rewards'", ",", "rewards", ",", "\n", "stat_prefix", "=", "stat_prefix", ")", ")", "\n", "statistics", ".", "update", "(", "create_stats_ordered_dict", "(", "'Returns'", ",", "returns", ",", "\n", "stat_prefix", "=", "stat_prefix", ")", ")", "\n", "actions", "=", "[", "path", "[", "\"actions\"", "]", "for", "path", "in", "paths", "]", "\n", "if", "len", "(", "actions", "[", "0", "]", ".", "shape", ")", "==", "1", ":", "\n", "        ", "actions", "=", "np", ".", "hstack", "(", "[", "path", "[", "\"actions\"", "]", "for", "path", "in", "paths", "]", ")", "\n", "", "else", ":", "\n", "        ", "actions", "=", "np", ".", "vstack", "(", "[", "path", "[", "\"actions\"", "]", "for", "path", "in", "paths", "]", ")", "\n", "", "statistics", ".", "update", "(", "create_stats_ordered_dict", "(", "\n", "'Actions'", ",", "actions", ",", "stat_prefix", "=", "stat_prefix", "\n", ")", ")", "\n", "statistics", "[", "'Num Paths'", "]", "=", "len", "(", "paths", ")", "\n", "\n", "return", "statistics", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.core.eval_util.get_average_returns": [[42, 45], ["numpy.mean", "sum"], "function", ["None"], ["", "def", "get_average_returns", "(", "paths", ")", ":", "\n", "    ", "returns", "=", "[", "sum", "(", "path", "[", "\"rewards\"", "]", ")", "for", "path", "in", "paths", "]", "\n", "return", "np", ".", "mean", "(", "returns", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.core.eval_util.create_stats_ordered_dict": [[47, 92], ["isinstance", "isinstance", "isinstance", "collections.OrderedDict", "collections.OrderedDict", "len", "collections.OrderedDict", "collections.OrderedDict", "enumerate", "isinstance", "collections.OrderedDict", "numpy.max", "numpy.min", "eval_util.create_stats_ordered_dict", "collections.OrderedDict.update", "iter", "numpy.concatenate", "float", "numpy.mean", "numpy.std"], "function", ["home.repos.pwc.inspect_result.Rondorf_BOReL.core.eval_util.create_stats_ordered_dict", "home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.GymObject.update"], ["", "def", "create_stats_ordered_dict", "(", "\n", "name", ",", "\n", "data", ",", "\n", "stat_prefix", "=", "None", ",", "\n", "always_show_all_stats", "=", "True", ",", "\n", "exclude_max_min", "=", "False", ",", "\n", ")", ":", "\n", "    ", "if", "stat_prefix", "is", "not", "None", ":", "\n", "        ", "name", "=", "\"{} {}\"", ".", "format", "(", "stat_prefix", ",", "name", ")", "\n", "", "if", "isinstance", "(", "data", ",", "Number", ")", ":", "\n", "        ", "return", "OrderedDict", "(", "{", "name", ":", "data", "}", ")", "\n", "\n", "", "if", "len", "(", "data", ")", "==", "0", ":", "\n", "        ", "return", "OrderedDict", "(", ")", "\n", "\n", "", "if", "isinstance", "(", "data", ",", "tuple", ")", ":", "\n", "        ", "ordered_dict", "=", "OrderedDict", "(", ")", "\n", "for", "number", ",", "d", "in", "enumerate", "(", "data", ")", ":", "\n", "            ", "sub_dict", "=", "create_stats_ordered_dict", "(", "\n", "\"{0}_{1}\"", ".", "format", "(", "name", ",", "number", ")", ",", "\n", "d", ",", "\n", ")", "\n", "ordered_dict", ".", "update", "(", "sub_dict", ")", "\n", "", "return", "ordered_dict", "\n", "\n", "", "if", "isinstance", "(", "data", ",", "list", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "iter", "(", "data", "[", "0", "]", ")", "\n", "", "except", "TypeError", ":", "\n", "            ", "pass", "\n", "", "else", ":", "\n", "            ", "data", "=", "np", ".", "concatenate", "(", "data", ")", "\n", "\n", "", "", "if", "(", "isinstance", "(", "data", ",", "np", ".", "ndarray", ")", "and", "data", ".", "size", "==", "1", "\n", "and", "not", "always_show_all_stats", ")", ":", "\n", "        ", "return", "OrderedDict", "(", "{", "name", ":", "float", "(", "data", ")", "}", ")", "\n", "\n", "", "stats", "=", "OrderedDict", "(", "[", "\n", "(", "name", "+", "' Mean'", ",", "np", ".", "mean", "(", "data", ")", ")", ",", "\n", "(", "name", "+", "' Std'", ",", "np", ".", "std", "(", "data", ")", ")", ",", "\n", "]", ")", "\n", "if", "not", "exclude_max_min", ":", "\n", "        ", "stats", "[", "name", "+", "' Max'", "]", "=", "np", ".", "max", "(", "data", ")", "\n", "stats", "[", "name", "+", "' Min'", "]", "=", "np", ".", "min", "(", "data", ")", "\n", "", "return", "stats", "\n", "", ""]], "home.repos.pwc.inspect_result.Rondorf_BOReL.core.rl_algorithm.MetaRLAlgorithm.__init__": [[16, 123], ["rlkit.samplers.in_place.InPlacePathSampler", "rlkit.data_management.env_replay_buffer.MultiTaskReplayBuffer", "rlkit.data_management.env_replay_buffer.MultiTaskReplayBuffer", "rlkit.data_management.path_builder.PathBuilder"], "methods", ["None"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "env", ",", "\n", "agent", ",", "\n", "train_tasks", ",", "\n", "eval_tasks", ",", "\n", "meta_batch", "=", "64", ",", "\n", "num_iterations", "=", "100", ",", "\n", "num_train_steps_per_itr", "=", "1000", ",", "\n", "num_initial_steps", "=", "100", ",", "\n", "num_tasks_sample", "=", "100", ",", "\n", "num_steps_prior", "=", "100", ",", "\n", "num_steps_posterior", "=", "100", ",", "\n", "num_extra_rl_steps_posterior", "=", "100", ",", "\n", "num_evals", "=", "10", ",", "\n", "num_steps_per_eval", "=", "1000", ",", "\n", "batch_size", "=", "1024", ",", "\n", "embedding_batch_size", "=", "1024", ",", "\n", "embedding_mini_batch_size", "=", "1024", ",", "\n", "max_path_length", "=", "1000", ",", "\n", "discount", "=", "0.99", ",", "\n", "replay_buffer_size", "=", "1000000", ",", "\n", "reward_scale", "=", "1", ",", "\n", "num_exp_traj_eval", "=", "1", ",", "\n", "update_post_train", "=", "1", ",", "\n", "eval_deterministic", "=", "True", ",", "\n", "render", "=", "False", ",", "\n", "save_replay_buffer", "=", "False", ",", "\n", "save_algorithm", "=", "False", ",", "\n", "save_environment", "=", "False", ",", "\n", "render_eval_paths", "=", "False", ",", "\n", "dump_eval_paths", "=", "False", ",", "\n", "plotter", "=", "None", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        :param env: training env\n        :param agent: agent that is conditioned on a latent variable z that rl_algorithm is responsible for feeding in\n        :param train_tasks: list of tasks used for training\n        :param eval_tasks: list of tasks used for eval\n\n        see default experiment online_config file for descriptions of the rest of the arguments\n        \"\"\"", "\n", "self", ".", "env", "=", "env", "\n", "self", ".", "agent", "=", "agent", "\n", "self", ".", "exploration_agent", "=", "agent", "# Can potentially use a different policy purely for exploration rather than also solving tasks, currently not being used", "\n", "self", ".", "train_tasks", "=", "train_tasks", "\n", "self", ".", "eval_tasks", "=", "eval_tasks", "\n", "self", ".", "meta_batch", "=", "meta_batch", "\n", "self", ".", "num_iterations", "=", "num_iterations", "\n", "self", ".", "num_train_steps_per_itr", "=", "num_train_steps_per_itr", "\n", "self", ".", "num_initial_steps", "=", "num_initial_steps", "\n", "self", ".", "num_tasks_sample", "=", "num_tasks_sample", "\n", "self", ".", "num_steps_prior", "=", "num_steps_prior", "\n", "self", ".", "num_steps_posterior", "=", "num_steps_posterior", "\n", "self", ".", "num_extra_rl_steps_posterior", "=", "num_extra_rl_steps_posterior", "\n", "self", ".", "num_evals", "=", "num_evals", "\n", "self", ".", "num_steps_per_eval", "=", "num_steps_per_eval", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "embedding_batch_size", "=", "embedding_batch_size", "\n", "self", ".", "embedding_mini_batch_size", "=", "embedding_mini_batch_size", "\n", "self", ".", "max_path_length", "=", "max_path_length", "\n", "self", ".", "discount", "=", "discount", "\n", "self", ".", "replay_buffer_size", "=", "replay_buffer_size", "\n", "self", ".", "reward_scale", "=", "reward_scale", "\n", "self", ".", "update_post_train", "=", "update_post_train", "\n", "self", ".", "num_exp_traj_eval", "=", "num_exp_traj_eval", "\n", "self", ".", "eval_deterministic", "=", "eval_deterministic", "\n", "self", ".", "render", "=", "render", "\n", "self", ".", "save_replay_buffer", "=", "save_replay_buffer", "\n", "self", ".", "save_algorithm", "=", "save_algorithm", "\n", "self", ".", "save_environment", "=", "save_environment", "\n", "\n", "self", ".", "eval_statistics", "=", "None", "\n", "self", ".", "render_eval_paths", "=", "render_eval_paths", "\n", "self", ".", "dump_eval_paths", "=", "dump_eval_paths", "\n", "self", ".", "plotter", "=", "plotter", "\n", "\n", "self", ".", "sampler", "=", "InPlacePathSampler", "(", "\n", "env", "=", "env", ",", "\n", "policy", "=", "agent", ",", "\n", "max_path_length", "=", "self", ".", "max_path_length", ",", "\n", ")", "\n", "\n", "# separate replay buffers for", "\n", "# - training RL update", "\n", "# - training encoder update", "\n", "self", ".", "replay_buffer", "=", "MultiTaskReplayBuffer", "(", "\n", "self", ".", "replay_buffer_size", ",", "\n", "env", ",", "\n", "self", ".", "train_tasks", ",", "\n", ")", "\n", "\n", "self", ".", "enc_replay_buffer", "=", "MultiTaskReplayBuffer", "(", "\n", "self", ".", "replay_buffer_size", ",", "\n", "env", ",", "\n", "self", ".", "train_tasks", ",", "\n", ")", "\n", "\n", "self", ".", "_n_env_steps_total", "=", "0", "\n", "self", ".", "_n_train_steps_total", "=", "0", "\n", "self", ".", "_n_rollouts_total", "=", "0", "\n", "self", ".", "_do_train_time", "=", "0", "\n", "self", ".", "_epoch_start_time", "=", "None", "\n", "self", ".", "_algo_start_time", "=", "None", "\n", "self", ".", "_old_table_keys", "=", "None", "\n", "self", ".", "_current_path_builder", "=", "PathBuilder", "(", ")", "\n", "self", ".", "_exploration_paths", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.core.rl_algorithm.MetaRLAlgorithm.make_exploration_policy": [[124, 126], ["None"], "methods", ["None"], ["", "def", "make_exploration_policy", "(", "self", ",", "policy", ")", ":", "\n", "         ", "return", "policy", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.core.rl_algorithm.MetaRLAlgorithm.make_eval_policy": [[127, 129], ["None"], "methods", ["None"], ["", "def", "make_eval_policy", "(", "self", ",", "policy", ")", ":", "\n", "        ", "return", "policy", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.core.rl_algorithm.MetaRLAlgorithm.sample_task": [[130, 139], ["numpy.random.randint", "numpy.random.randint", "len", "len"], "methods", ["None"], ["", "def", "sample_task", "(", "self", ",", "is_eval", "=", "False", ")", ":", "\n", "        ", "'''\n        sample task randomly\n        '''", "\n", "if", "is_eval", ":", "\n", "            ", "idx", "=", "np", ".", "random", ".", "randint", "(", "len", "(", "self", ".", "eval_tasks", ")", ")", "\n", "", "else", ":", "\n", "            ", "idx", "=", "np", ".", "random", ".", "randint", "(", "len", "(", "self", ".", "train_tasks", ")", ")", "\n", "", "return", "idx", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.core.rl_algorithm.MetaRLAlgorithm.train": [[140, 196], ["rl_algorithm.MetaRLAlgorithm.pretrain", "rl_algorithm.MetaRLAlgorithm.get_epoch_snapshot", "rlkit.core.logger.save_itr_params", "gtimer.reset", "gtimer.set_def_unique", "rlkit.data_management.path_builder.PathBuilder", "gtimer.timed_for", "range", "rl_algorithm.MetaRLAlgorithm._start_epoch", "rl_algorithm.MetaRLAlgorithm.training_mode", "range", "range", "gtimer.stamp", "rl_algorithm.MetaRLAlgorithm.training_mode", "rl_algorithm.MetaRLAlgorithm._try_to_eval", "gtimer.stamp", "rl_algorithm.MetaRLAlgorithm._end_epoch", "print", "numpy.random.randint", "rl_algorithm.MetaRLAlgorithm.env.reset_task", "rl_algorithm.MetaRLAlgorithm.enc_replay_buffer.task_buffers[].clear", "numpy.random.choice", "rl_algorithm.MetaRLAlgorithm._do_training", "rl_algorithm.MetaRLAlgorithm.env.reset_task", "rl_algorithm.MetaRLAlgorithm.collect_data", "len", "rl_algorithm.MetaRLAlgorithm.collect_data", "rl_algorithm.MetaRLAlgorithm.collect_data", "rl_algorithm.MetaRLAlgorithm.collect_data"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.core.rl_algorithm.MetaRLAlgorithm.pretrain", "home.repos.pwc.inspect_result.Rondorf_BOReL.core.rl_algorithm.MetaRLAlgorithm.get_epoch_snapshot", "home.repos.pwc.inspect_result.Rondorf_BOReL.core.logger.save_itr_params", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.reset", "home.repos.pwc.inspect_result.Rondorf_BOReL.core.rl_algorithm.MetaRLAlgorithm._start_epoch", "home.repos.pwc.inspect_result.Rondorf_BOReL.core.rl_algorithm.MetaRLAlgorithm.training_mode", "home.repos.pwc.inspect_result.Rondorf_BOReL.core.rl_algorithm.MetaRLAlgorithm.training_mode", "home.repos.pwc.inspect_result.Rondorf_BOReL.core.rl_algorithm.MetaRLAlgorithm._try_to_eval", "home.repos.pwc.inspect_result.Rondorf_BOReL.core.rl_algorithm.MetaRLAlgorithm._end_epoch", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.reset_task", "home.repos.pwc.inspect_result.Rondorf_BOReL.data_management.simple_replay_buffer.SimpleReplayBuffer.clear", "home.repos.pwc.inspect_result.Rondorf_BOReL.core.rl_algorithm.MetaRLAlgorithm._do_training", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.reset_task", "home.repos.pwc.inspect_result.Rondorf_BOReL.core.rl_algorithm.MetaRLAlgorithm.collect_data", "home.repos.pwc.inspect_result.Rondorf_BOReL.core.rl_algorithm.MetaRLAlgorithm.collect_data", "home.repos.pwc.inspect_result.Rondorf_BOReL.core.rl_algorithm.MetaRLAlgorithm.collect_data", "home.repos.pwc.inspect_result.Rondorf_BOReL.core.rl_algorithm.MetaRLAlgorithm.collect_data"], ["", "def", "train", "(", "self", ")", ":", "\n", "        ", "'''\n        meta-training loop\n        '''", "\n", "self", ".", "pretrain", "(", ")", "\n", "params", "=", "self", ".", "get_epoch_snapshot", "(", "-", "1", ")", "\n", "logger", ".", "save_itr_params", "(", "-", "1", ",", "params", ")", "\n", "gt", ".", "reset", "(", ")", "\n", "gt", ".", "set_def_unique", "(", "False", ")", "\n", "self", ".", "_current_path_builder", "=", "PathBuilder", "(", ")", "\n", "\n", "# at each iteration, we first collect data from tasks, perform meta-updates, then try to evaluate", "\n", "for", "it_", "in", "gt", ".", "timed_for", "(", "\n", "range", "(", "self", ".", "num_iterations", ")", ",", "\n", "save_itrs", "=", "True", ",", "\n", ")", ":", "\n", "            ", "self", ".", "_start_epoch", "(", "it_", ")", "\n", "self", ".", "training_mode", "(", "True", ")", "\n", "if", "it_", "==", "0", ":", "\n", "                ", "print", "(", "'collecting initial pool of data for train and eval'", ")", "\n", "# temp for evaluating", "\n", "for", "idx", "in", "self", ".", "train_tasks", ":", "\n", "                    ", "self", ".", "task_idx", "=", "idx", "\n", "self", ".", "env", ".", "reset_task", "(", "idx", ")", "\n", "self", ".", "collect_data", "(", "self", ".", "num_initial_steps", ",", "1", ",", "np", ".", "inf", ")", "\n", "# Sample data from train tasks.", "\n", "", "", "for", "i", "in", "range", "(", "self", ".", "num_tasks_sample", ")", ":", "\n", "                ", "idx", "=", "np", ".", "random", ".", "randint", "(", "len", "(", "self", ".", "train_tasks", ")", ")", "\n", "self", ".", "task_idx", "=", "idx", "\n", "self", ".", "env", ".", "reset_task", "(", "idx", ")", "\n", "self", ".", "enc_replay_buffer", ".", "task_buffers", "[", "idx", "]", ".", "clear", "(", ")", "\n", "\n", "# collect some trajectories with z ~ prior", "\n", "if", "self", ".", "num_steps_prior", ">", "0", ":", "\n", "                    ", "self", ".", "collect_data", "(", "self", ".", "num_steps_prior", ",", "1", ",", "np", ".", "inf", ")", "\n", "# collect some trajectories with z ~ posterior", "\n", "", "if", "self", ".", "num_steps_posterior", ">", "0", ":", "\n", "                    ", "self", ".", "collect_data", "(", "self", ".", "num_steps_posterior", ",", "1", ",", "self", ".", "update_post_train", ")", "\n", "# even if encoder is trained only on samples from the prior, the policy needs to learn to handle z ~ posterior", "\n", "", "if", "self", ".", "num_extra_rl_steps_posterior", ">", "0", ":", "\n", "                    ", "self", ".", "collect_data", "(", "self", ".", "num_extra_rl_steps_posterior", ",", "1", ",", "self", ".", "update_post_train", ",", "add_to_enc_buffer", "=", "False", ")", "\n", "\n", "# Sample train tasks and compute gradient updates on parameters.", "\n", "", "", "for", "train_step", "in", "range", "(", "self", ".", "num_train_steps_per_itr", ")", ":", "\n", "                ", "indices", "=", "np", ".", "random", ".", "choice", "(", "self", ".", "train_tasks", ",", "self", ".", "meta_batch", ")", "\n", "self", ".", "_do_training", "(", "indices", ")", "\n", "self", ".", "_n_train_steps_total", "+=", "1", "\n", "", "gt", ".", "stamp", "(", "'train'", ")", "\n", "\n", "self", ".", "training_mode", "(", "False", ")", "\n", "\n", "# eval", "\n", "self", ".", "_try_to_eval", "(", "it_", ")", "\n", "gt", ".", "stamp", "(", "'eval'", ")", "\n", "\n", "self", ".", "_end_epoch", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.core.rl_algorithm.MetaRLAlgorithm.pretrain": [[197, 202], ["None"], "methods", ["None"], ["", "", "def", "pretrain", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Do anything before the main training phase.\n        \"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.core.rl_algorithm.MetaRLAlgorithm.collect_data": [[203, 232], ["rl_algorithm.MetaRLAlgorithm.agent.clear_z", "gtimer.stamp", "rl_algorithm.MetaRLAlgorithm.sampler.obtain_samples", "rl_algorithm.MetaRLAlgorithm.replay_buffer.add_paths", "rl_algorithm.MetaRLAlgorithm.enc_replay_buffer.add_paths", "rl_algorithm.MetaRLAlgorithm.sample_context", "rl_algorithm.MetaRLAlgorithm.agent.infer_posterior"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.data_management.multi_task_replay_buffer.MultiTaskReplayBuffer.add_paths", "home.repos.pwc.inspect_result.Rondorf_BOReL.data_management.multi_task_replay_buffer.MultiTaskReplayBuffer.add_paths"], ["", "def", "collect_data", "(", "self", ",", "num_samples", ",", "resample_z_rate", ",", "update_posterior_rate", ",", "add_to_enc_buffer", "=", "True", ")", ":", "\n", "        ", "'''\n        get trajectories from current env in batch mode with given policy\n        collect complete trajectories until the number of collected transitions >= num_samples\n\n        :param agent: policy to rollout\n        :param num_samples: total number of transitions to sample\n        :param resample_z_rate: how often to resample latent context z (in units of trajectories)\n        :param update_posterior_rate: how often to update q(z | c) from which z is sampled (in units of trajectories)\n        :param add_to_enc_buffer: whether to add collected data to encoder replay buffer\n        '''", "\n", "# start from the prior", "\n", "self", ".", "agent", ".", "clear_z", "(", ")", "\n", "\n", "num_transitions", "=", "0", "\n", "while", "num_transitions", "<", "num_samples", ":", "\n", "            ", "paths", ",", "n_samples", "=", "self", ".", "sampler", ".", "obtain_samples", "(", "max_samples", "=", "num_samples", "-", "num_transitions", ",", "\n", "max_trajs", "=", "update_posterior_rate", ",", "\n", "accum_context", "=", "False", ",", "\n", "resample", "=", "resample_z_rate", ")", "\n", "num_transitions", "+=", "n_samples", "\n", "self", ".", "replay_buffer", ".", "add_paths", "(", "self", ".", "task_idx", ",", "paths", ")", "\n", "if", "add_to_enc_buffer", ":", "\n", "                ", "self", ".", "enc_replay_buffer", ".", "add_paths", "(", "self", ".", "task_idx", ",", "paths", ")", "\n", "", "if", "update_posterior_rate", "!=", "np", ".", "inf", ":", "\n", "                ", "context", "=", "self", ".", "sample_context", "(", "self", ".", "task_idx", ")", "\n", "self", ".", "agent", ".", "infer_posterior", "(", "context", ")", "\n", "", "", "self", ".", "_n_env_steps_total", "+=", "num_transitions", "\n", "gt", ".", "stamp", "(", "'sample'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.core.rl_algorithm.MetaRLAlgorithm._try_to_eval": [[233, 277], ["rlkit.core.logger.save_extra_data", "rl_algorithm.MetaRLAlgorithm._can_evaluate", "rl_algorithm.MetaRLAlgorithm.get_extra_data_to_save", "rl_algorithm.MetaRLAlgorithm.evaluate", "rl_algorithm.MetaRLAlgorithm.get_epoch_snapshot", "rlkit.core.logger.save_itr_params", "rlkit.core.logger.get_table_key_set", "rlkit.core.logger.record_tabular", "rlkit.core.logger.record_tabular", "rlkit.core.logger.record_tabular", "rlkit.core.logger.record_tabular", "rlkit.core.logger.record_tabular", "rlkit.core.logger.record_tabular", "rlkit.core.logger.record_tabular", "rlkit.core.logger.record_tabular", "rlkit.core.logger.record_tabular", "rlkit.core.logger.dump_tabular", "rlkit.core.logger.log", "gtimer.get_times", "gtimer.get_times"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.core.logger.save_extra_data", "home.repos.pwc.inspect_result.Rondorf_BOReL.core.rl_algorithm.MetaRLAlgorithm._can_evaluate", "home.repos.pwc.inspect_result.Rondorf_BOReL.core.rl_algorithm.MetaRLAlgorithm.get_extra_data_to_save", "home.repos.pwc.inspect_result.Rondorf_BOReL.core.rl_algorithm.MetaRLAlgorithm.evaluate", "home.repos.pwc.inspect_result.Rondorf_BOReL.core.rl_algorithm.MetaRLAlgorithm.get_epoch_snapshot", "home.repos.pwc.inspect_result.Rondorf_BOReL.core.logger.save_itr_params", "home.repos.pwc.inspect_result.Rondorf_BOReL.core.logger.get_table_key_set", "home.repos.pwc.inspect_result.Rondorf_BOReL.core.logger.record_tabular", "home.repos.pwc.inspect_result.Rondorf_BOReL.core.logger.record_tabular", "home.repos.pwc.inspect_result.Rondorf_BOReL.core.logger.record_tabular", "home.repos.pwc.inspect_result.Rondorf_BOReL.core.logger.record_tabular", "home.repos.pwc.inspect_result.Rondorf_BOReL.core.logger.record_tabular", "home.repos.pwc.inspect_result.Rondorf_BOReL.core.logger.record_tabular", "home.repos.pwc.inspect_result.Rondorf_BOReL.core.logger.record_tabular", "home.repos.pwc.inspect_result.Rondorf_BOReL.core.logger.record_tabular", "home.repos.pwc.inspect_result.Rondorf_BOReL.core.logger.record_tabular", "home.repos.pwc.inspect_result.Rondorf_BOReL.core.logger.dump_tabular", "home.repos.pwc.inspect_result.Rondorf_BOReL.core.logger.log"], ["", "def", "_try_to_eval", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "logger", ".", "save_extra_data", "(", "self", ".", "get_extra_data_to_save", "(", "epoch", ")", ")", "\n", "if", "self", ".", "_can_evaluate", "(", ")", ":", "\n", "            ", "self", ".", "evaluate", "(", "epoch", ")", "\n", "\n", "params", "=", "self", ".", "get_epoch_snapshot", "(", "epoch", ")", "\n", "logger", ".", "save_itr_params", "(", "epoch", ",", "params", ")", "\n", "table_keys", "=", "logger", ".", "get_table_key_set", "(", ")", "\n", "if", "self", ".", "_old_table_keys", "is", "not", "None", ":", "\n", "                ", "assert", "table_keys", "==", "self", ".", "_old_table_keys", ",", "(", "\n", "\"Table keys cannot change from iteration to iteration.\"", "\n", ")", "\n", "", "self", ".", "_old_table_keys", "=", "table_keys", "\n", "\n", "logger", ".", "record_tabular", "(", "\n", "\"Number of train steps total\"", ",", "\n", "self", ".", "_n_train_steps_total", ",", "\n", ")", "\n", "logger", ".", "record_tabular", "(", "\n", "\"Number of env steps total\"", ",", "\n", "self", ".", "_n_env_steps_total", ",", "\n", ")", "\n", "logger", ".", "record_tabular", "(", "\n", "\"Number of rollouts total\"", ",", "\n", "self", ".", "_n_rollouts_total", ",", "\n", ")", "\n", "\n", "times_itrs", "=", "gt", ".", "get_times", "(", ")", ".", "stamps", ".", "itrs", "\n", "train_time", "=", "times_itrs", "[", "'train'", "]", "[", "-", "1", "]", "\n", "sample_time", "=", "times_itrs", "[", "'sample'", "]", "[", "-", "1", "]", "\n", "eval_time", "=", "times_itrs", "[", "'eval'", "]", "[", "-", "1", "]", "if", "epoch", ">", "0", "else", "0", "\n", "epoch_time", "=", "train_time", "+", "sample_time", "+", "eval_time", "\n", "total_time", "=", "gt", ".", "get_times", "(", ")", ".", "total", "\n", "\n", "logger", ".", "record_tabular", "(", "'Train Time (s)'", ",", "train_time", ")", "\n", "logger", ".", "record_tabular", "(", "'(Previous) Eval Time (s)'", ",", "eval_time", ")", "\n", "logger", ".", "record_tabular", "(", "'Sample Time (s)'", ",", "sample_time", ")", "\n", "logger", ".", "record_tabular", "(", "'Epoch Time (s)'", ",", "epoch_time", ")", "\n", "logger", ".", "record_tabular", "(", "'Total Train Time (s)'", ",", "total_time", ")", "\n", "\n", "logger", ".", "record_tabular", "(", "\"Epoch\"", ",", "epoch", ")", "\n", "logger", ".", "dump_tabular", "(", "with_prefix", "=", "False", ",", "with_timestamp", "=", "False", ")", "\n", "", "else", ":", "\n", "            ", "logger", ".", "log", "(", "\"Skipping eval for now.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.core.rl_algorithm.MetaRLAlgorithm._can_evaluate": [[278, 292], ["None"], "methods", ["None"], ["", "", "def", "_can_evaluate", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        One annoying thing about the logger table is that the keys at each\n        iteration need to be the exact same. So unless you can compute\n        everything, skip evaluation.\n\n        A common example for why you might want to skip evaluation is that at\n        the beginning of training, you may not have enough data for a\n        validation and training set.\n\n        :return:\n        \"\"\"", "\n", "# eval collects its own context, so can eval any time", "\n", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.core.rl_algorithm.MetaRLAlgorithm._can_train": [[293, 295], ["all", "rl_algorithm.MetaRLAlgorithm.replay_buffer.num_steps_can_sample"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.ListableAPIResource.all", "home.repos.pwc.inspect_result.Rondorf_BOReL.data_management.simple_replay_buffer.SimpleReplayBuffer.num_steps_can_sample"], ["", "def", "_can_train", "(", "self", ")", ":", "\n", "        ", "return", "all", "(", "[", "self", ".", "replay_buffer", ".", "num_steps_can_sample", "(", "idx", ")", ">=", "self", ".", "batch_size", "for", "idx", "in", "self", ".", "train_tasks", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.core.rl_algorithm.MetaRLAlgorithm._get_action_and_info": [[296, 304], ["agent.set_num_steps_total", "agent.get_action"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.policies_base.ExplorationPolicy.set_num_steps_total", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.policies_base.Policy.get_action"], ["", "def", "_get_action_and_info", "(", "self", ",", "agent", ",", "observation", ")", ":", "\n", "        ", "\"\"\"\n        Get an action to take in the environment.\n        :param observation:\n        :return:\n        \"\"\"", "\n", "agent", ".", "set_num_steps_total", "(", "self", ".", "_n_env_steps_total", ")", "\n", "return", "agent", ".", "get_action", "(", "observation", ",", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.core.rl_algorithm.MetaRLAlgorithm._start_epoch": [[305, 310], ["time.time", "rlkit.core.logger.push_prefix"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjDataWrapper.time", "home.repos.pwc.inspect_result.Rondorf_BOReL.core.logger.push_prefix"], ["", "def", "_start_epoch", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "self", ".", "_epoch_start_time", "=", "time", ".", "time", "(", ")", "\n", "self", ".", "_exploration_paths", "=", "[", "]", "\n", "self", ".", "_do_train_time", "=", "0", "\n", "logger", ".", "push_prefix", "(", "'Iteration #%d | '", "%", "epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.core.rl_algorithm.MetaRLAlgorithm._end_epoch": [[311, 317], ["rlkit.core.logger.log", "rlkit.core.logger.log", "rlkit.core.logger.pop_prefix", "rl_algorithm.MetaRLAlgorithm._can_train", "time.time"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.core.logger.log", "home.repos.pwc.inspect_result.Rondorf_BOReL.core.logger.log", "home.repos.pwc.inspect_result.Rondorf_BOReL.core.logger.pop_prefix", "home.repos.pwc.inspect_result.Rondorf_BOReL.core.rl_algorithm.MetaRLAlgorithm._can_train", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjDataWrapper.time"], ["", "def", "_end_epoch", "(", "self", ")", ":", "\n", "        ", "logger", ".", "log", "(", "\"Epoch Duration: {0}\"", ".", "format", "(", "\n", "time", ".", "time", "(", ")", "-", "self", ".", "_epoch_start_time", "\n", ")", ")", "\n", "logger", ".", "log", "(", "\"Started Training: {0}\"", ".", "format", "(", "self", ".", "_can_train", "(", ")", ")", ")", "\n", "logger", ".", "pop_prefix", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.core.rl_algorithm.MetaRLAlgorithm.get_epoch_snapshot": [[319, 327], ["dict"], "methods", ["None"], ["", "def", "get_epoch_snapshot", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "data_to_save", "=", "dict", "(", "\n", "epoch", "=", "epoch", ",", "\n", "exploration_policy", "=", "self", ".", "exploration_policy", ",", "\n", ")", "\n", "if", "self", ".", "save_environment", ":", "\n", "            ", "data_to_save", "[", "'env'", "]", "=", "self", ".", "training_env", "\n", "", "return", "data_to_save", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.core.rl_algorithm.MetaRLAlgorithm.get_extra_data_to_save": [[328, 347], ["dict", "rl_algorithm.MetaRLAlgorithm.training_env.render"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.render"], ["", "def", "get_extra_data_to_save", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "\"\"\"\n        Save things that shouldn't be saved every snapshot but rather\n        overwritten every time.\n        :param epoch:\n        :return:\n        \"\"\"", "\n", "if", "self", ".", "render", ":", "\n", "            ", "self", ".", "training_env", ".", "render", "(", "close", "=", "True", ")", "\n", "", "data_to_save", "=", "dict", "(", "\n", "epoch", "=", "epoch", ",", "\n", ")", "\n", "if", "self", ".", "save_environment", ":", "\n", "            ", "data_to_save", "[", "'env'", "]", "=", "self", ".", "training_env", "\n", "", "if", "self", ".", "save_replay_buffer", ":", "\n", "            ", "data_to_save", "[", "'replay_buffer'", "]", "=", "self", ".", "replay_buffer", "\n", "", "if", "self", ".", "save_algorithm", ":", "\n", "            ", "data_to_save", "[", "'algorithm'", "]", "=", "self", "\n", "", "return", "data_to_save", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.core.rl_algorithm.MetaRLAlgorithm.collect_paths": [[348, 379], ["rl_algorithm.MetaRLAlgorithm.env.reset_task", "rl_algorithm.MetaRLAlgorithm.agent.clear_z", "rl_algorithm.MetaRLAlgorithm.sampler.obtain_samples", "rlkit.core.logger.save_extra_data", "rl_algorithm.MetaRLAlgorithm.agent.infer_posterior", "numpy.stack().reshape", "numpy.stack"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.reset_task", "home.repos.pwc.inspect_result.Rondorf_BOReL.core.logger.save_extra_data", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjDataWrapper.stack"], ["", "def", "collect_paths", "(", "self", ",", "idx", ",", "epoch", ",", "run", ")", ":", "\n", "        ", "self", ".", "task_idx", "=", "idx", "\n", "self", ".", "env", ".", "reset_task", "(", "idx", ")", "\n", "\n", "self", ".", "agent", ".", "clear_z", "(", ")", "\n", "paths", "=", "[", "]", "\n", "num_transitions", "=", "0", "\n", "num_trajs", "=", "0", "\n", "while", "num_transitions", "<", "self", ".", "num_steps_per_eval", ":", "\n", "            ", "path", ",", "num", "=", "self", ".", "sampler", ".", "obtain_samples", "(", "deterministic", "=", "self", ".", "eval_deterministic", ",", "max_samples", "=", "self", ".", "num_steps_per_eval", "-", "num_transitions", ",", "max_trajs", "=", "1", ",", "accum_context", "=", "True", ")", "\n", "# this returns num=200 although max_steps_per_eval is 600. i guess it returns when done?", "\n", "paths", "+=", "path", "\n", "num_transitions", "+=", "num", "\n", "num_trajs", "+=", "1", "\n", "if", "num_trajs", ">=", "self", ".", "num_exp_traj_eval", ":", "\n", "                ", "self", ".", "agent", ".", "infer_posterior", "(", "self", ".", "agent", ".", "context", ")", "\n", "\n", "", "", "if", "self", ".", "sparse_rewards", ":", "\n", "            ", "for", "p", "in", "paths", ":", "\n", "                ", "sparse_rewards", "=", "np", ".", "stack", "(", "e", "[", "'sparse_reward'", "]", "for", "e", "in", "p", "[", "'env_infos'", "]", ")", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "p", "[", "'rewards'", "]", "=", "sparse_rewards", "\n", "\n", "", "", "goal", "=", "self", ".", "env", ".", "_goal", "\n", "for", "path", "in", "paths", ":", "\n", "            ", "path", "[", "'goal'", "]", "=", "goal", "# goal", "\n", "\n", "# save the paths for visualization, only useful for point mass", "\n", "", "if", "self", ".", "dump_eval_paths", ":", "\n", "            ", "logger", ".", "save_extra_data", "(", "paths", ",", "path", "=", "'eval_trajectories/task{}-epoch{}-run{}'", ".", "format", "(", "idx", ",", "epoch", ",", "run", ")", ")", "\n", "\n", "", "return", "paths", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.core.rl_algorithm.MetaRLAlgorithm._do_eval": [[380, 399], ["min", "range", "final_returns.append", "min", "numpy.mean", "online_returns.append", "rl_algorithm.MetaRLAlgorithm.collect_paths", "numpy.mean.append", "numpy.mean", "numpy.stack", "len", "len", "rlkit.core.eval_util.get_average_returns"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.core.rl_algorithm.MetaRLAlgorithm.collect_paths", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjDataWrapper.stack", "home.repos.pwc.inspect_result.Rondorf_BOReL.core.eval_util.get_average_returns"], ["", "def", "_do_eval", "(", "self", ",", "indices", ",", "epoch", ")", ":", "\n", "# indices are all the evaluation tasks", "\n", "        ", "final_returns", "=", "[", "]", "\n", "online_returns", "=", "[", "]", "\n", "for", "idx", "in", "indices", ":", "\n", "            ", "all_rets", "=", "[", "]", "\n", "for", "r", "in", "range", "(", "self", ".", "num_evals", ")", ":", "\n", "                ", "paths", "=", "self", ".", "collect_paths", "(", "idx", ",", "epoch", ",", "r", ")", "\n", "all_rets", ".", "append", "(", "[", "eval_util", ".", "get_average_returns", "(", "[", "p", "]", ")", "for", "p", "in", "paths", "]", ")", "\n", "", "final_returns", ".", "append", "(", "np", ".", "mean", "(", "[", "a", "[", "-", "1", "]", "for", "a", "in", "all_rets", "]", ")", ")", "\n", "# record online returns for the first n trajectories", "\n", "n", "=", "min", "(", "[", "len", "(", "a", ")", "for", "a", "in", "all_rets", "]", ")", "\n", "all_rets", "=", "[", "a", "[", ":", "n", "]", "for", "a", "in", "all_rets", "]", "\n", "all_rets", "=", "np", ".", "mean", "(", "np", ".", "stack", "(", "all_rets", ")", ",", "axis", "=", "0", ")", "# avg return per nth rollout", "\n", "online_returns", ".", "append", "(", "all_rets", ")", "\n", "", "n", "=", "min", "(", "[", "len", "(", "t", ")", "for", "t", "in", "online_returns", "]", ")", "\n", "online_returns", "=", "[", "t", "[", ":", "n", "]", "for", "t", "in", "online_returns", "]", "\n", "\n", "return", "final_returns", ",", "online_returns", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.core.rl_algorithm.MetaRLAlgorithm.evaluate": [[400, 477], ["numpy.random.choice", "rlkit.core.eval_util.dprint", "numpy.mean", "rl_algorithm.MetaRLAlgorithm._do_eval", "rlkit.core.eval_util.dprint", "rlkit.core.eval_util.dprint", "rlkit.core.eval_util.dprint", "rl_algorithm.MetaRLAlgorithm._do_eval", "rlkit.core.eval_util.dprint", "rlkit.core.eval_util.dprint", "rl_algorithm.MetaRLAlgorithm.agent.log_diagnostics", "hasattr", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "rlkit.core.logger.save_extra_data", "rlkit.core.logger.save_extra_data", "rl_algorithm.MetaRLAlgorithm.eval_statistics.items", "collections.OrderedDict", "rl_algorithm.MetaRLAlgorithm.agent.clear_z", "rl_algorithm.MetaRLAlgorithm.sampler.obtain_samples", "rlkit.core.logger.save_extra_data", "len", "rl_algorithm.MetaRLAlgorithm.env.reset_task", "range", "numpy.mean.append", "rl_algorithm.MetaRLAlgorithm.env.log_diagnostics", "numpy.stack", "numpy.stack", "rlkit.core.logger.record_tabular", "rl_algorithm.MetaRLAlgorithm.env.render_paths", "rl_algorithm.MetaRLAlgorithm.plotter.draw", "len", "rl_algorithm.MetaRLAlgorithm.sample_context", "rl_algorithm.MetaRLAlgorithm.agent.infer_posterior", "rl_algorithm.MetaRLAlgorithm.sampler.obtain_samples", "rlkit.core.eval_util.get_average_returns", "len", "numpy.stack().reshape", "numpy.stack"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.core.eval_util.dprint", "home.repos.pwc.inspect_result.Rondorf_BOReL.core.rl_algorithm.MetaRLAlgorithm._do_eval", "home.repos.pwc.inspect_result.Rondorf_BOReL.core.eval_util.dprint", "home.repos.pwc.inspect_result.Rondorf_BOReL.core.eval_util.dprint", "home.repos.pwc.inspect_result.Rondorf_BOReL.core.eval_util.dprint", "home.repos.pwc.inspect_result.Rondorf_BOReL.core.rl_algorithm.MetaRLAlgorithm._do_eval", "home.repos.pwc.inspect_result.Rondorf_BOReL.core.eval_util.dprint", "home.repos.pwc.inspect_result.Rondorf_BOReL.core.eval_util.dprint", "home.repos.pwc.inspect_result.Rondorf_BOReL.rand_param_envs.base.MetaEnv.log_diagnostics", "home.repos.pwc.inspect_result.Rondorf_BOReL.core.logger.save_extra_data", "home.repos.pwc.inspect_result.Rondorf_BOReL.core.logger.save_extra_data", "home.repos.pwc.inspect_result.Rondorf_BOReL.core.logger.save_extra_data", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.reset_task", "home.repos.pwc.inspect_result.Rondorf_BOReL.rand_param_envs.base.MetaEnv.log_diagnostics", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjDataWrapper.stack", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjDataWrapper.stack", "home.repos.pwc.inspect_result.Rondorf_BOReL.core.logger.record_tabular", "home.repos.pwc.inspect_result.Rondorf_BOReL.box2d.car_dynamics.Car.draw", "home.repos.pwc.inspect_result.Rondorf_BOReL.core.eval_util.get_average_returns", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjDataWrapper.stack"], ["", "def", "evaluate", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "if", "self", ".", "eval_statistics", "is", "None", ":", "\n", "            ", "self", ".", "eval_statistics", "=", "OrderedDict", "(", ")", "\n", "\n", "### sample trajectories from prior for debugging / visualization", "\n", "", "if", "self", ".", "dump_eval_paths", ":", "\n", "# 100 arbitrarily chosen for visualizations of point_robot trajectories", "\n", "# just want stochasticity of z, not the policy", "\n", "            ", "self", ".", "agent", ".", "clear_z", "(", ")", "\n", "prior_paths", ",", "_", "=", "self", ".", "sampler", ".", "obtain_samples", "(", "deterministic", "=", "self", ".", "eval_deterministic", ",", "max_samples", "=", "self", ".", "max_path_length", "*", "20", ",", "\n", "accum_context", "=", "False", ",", "\n", "resample", "=", "1", ")", "\n", "logger", ".", "save_extra_data", "(", "prior_paths", ",", "path", "=", "'eval_trajectories/prior-epoch{}'", ".", "format", "(", "epoch", ")", ")", "\n", "\n", "### train tasks", "\n", "# eval on a subset of train tasks for speed", "\n", "", "indices", "=", "np", ".", "random", ".", "choice", "(", "self", ".", "train_tasks", ",", "len", "(", "self", ".", "eval_tasks", ")", ")", "\n", "eval_util", ".", "dprint", "(", "'evaluating on {} train tasks'", ".", "format", "(", "len", "(", "indices", ")", ")", ")", "\n", "### eval train tasks with posterior sampled from the training replay buffer", "\n", "train_returns", "=", "[", "]", "\n", "for", "idx", "in", "indices", ":", "\n", "            ", "self", ".", "task_idx", "=", "idx", "\n", "self", ".", "env", ".", "reset_task", "(", "idx", ")", "\n", "paths", "=", "[", "]", "\n", "for", "_", "in", "range", "(", "self", ".", "num_steps_per_eval", "//", "self", ".", "max_path_length", ")", ":", "\n", "                ", "context", "=", "self", ".", "sample_context", "(", "idx", ")", "\n", "self", ".", "agent", ".", "infer_posterior", "(", "context", ")", "\n", "p", ",", "_", "=", "self", ".", "sampler", ".", "obtain_samples", "(", "deterministic", "=", "self", ".", "eval_deterministic", ",", "max_samples", "=", "self", ".", "max_path_length", ",", "\n", "accum_context", "=", "False", ",", "\n", "max_trajs", "=", "1", ",", "\n", "resample", "=", "np", ".", "inf", ")", "\n", "paths", "+=", "p", "\n", "\n", "", "if", "self", ".", "sparse_rewards", ":", "\n", "                ", "for", "p", "in", "paths", ":", "\n", "                    ", "sparse_rewards", "=", "np", ".", "stack", "(", "e", "[", "'sparse_reward'", "]", "for", "e", "in", "p", "[", "'env_infos'", "]", ")", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "p", "[", "'rewards'", "]", "=", "sparse_rewards", "\n", "\n", "", "", "train_returns", ".", "append", "(", "eval_util", ".", "get_average_returns", "(", "paths", ")", ")", "\n", "", "train_returns", "=", "np", ".", "mean", "(", "train_returns", ")", "\n", "### eval train tasks with on-policy data to match eval of test tasks", "\n", "train_final_returns", ",", "train_online_returns", "=", "self", ".", "_do_eval", "(", "indices", ",", "epoch", ")", "\n", "eval_util", ".", "dprint", "(", "'train online returns'", ")", "\n", "eval_util", ".", "dprint", "(", "train_online_returns", ")", "\n", "\n", "### test tasks", "\n", "eval_util", ".", "dprint", "(", "'evaluating on {} test tasks'", ".", "format", "(", "len", "(", "self", ".", "eval_tasks", ")", ")", ")", "\n", "test_final_returns", ",", "test_online_returns", "=", "self", ".", "_do_eval", "(", "self", ".", "eval_tasks", ",", "epoch", ")", "\n", "eval_util", ".", "dprint", "(", "'test online returns'", ")", "\n", "eval_util", ".", "dprint", "(", "test_online_returns", ")", "\n", "\n", "# save the final posterior", "\n", "self", ".", "agent", ".", "log_diagnostics", "(", "self", ".", "eval_statistics", ")", "\n", "\n", "if", "hasattr", "(", "self", ".", "env", ",", "\"log_diagnostics\"", ")", ":", "\n", "            ", "self", ".", "env", ".", "log_diagnostics", "(", "paths", ",", "prefix", "=", "None", ")", "\n", "\n", "", "avg_train_return", "=", "np", ".", "mean", "(", "train_final_returns", ")", "\n", "avg_test_return", "=", "np", ".", "mean", "(", "test_final_returns", ")", "\n", "avg_train_online_return", "=", "np", ".", "mean", "(", "np", ".", "stack", "(", "train_online_returns", ")", ",", "axis", "=", "0", ")", "\n", "avg_test_online_return", "=", "np", ".", "mean", "(", "np", ".", "stack", "(", "test_online_returns", ")", ",", "axis", "=", "0", ")", "\n", "self", ".", "eval_statistics", "[", "'AverageTrainReturn_all_train_tasks'", "]", "=", "train_returns", "\n", "self", ".", "eval_statistics", "[", "'AverageReturn_all_train_tasks'", "]", "=", "avg_train_return", "\n", "self", ".", "eval_statistics", "[", "'AverageReturn_all_test_tasks'", "]", "=", "avg_test_return", "\n", "self", ".", "eval_statistics", "[", "'AverageReturn_all_test_tasks_ep0'", "]", "=", "avg_test_online_return", "[", "0", "]", "\n", "logger", ".", "save_extra_data", "(", "avg_train_online_return", ",", "path", "=", "'online-train-epoch{}'", ".", "format", "(", "epoch", ")", ")", "\n", "logger", ".", "save_extra_data", "(", "avg_test_online_return", ",", "path", "=", "'online-test-epoch{}'", ".", "format", "(", "epoch", ")", ")", "\n", "\n", "for", "key", ",", "value", "in", "self", ".", "eval_statistics", ".", "items", "(", ")", ":", "\n", "            ", "logger", ".", "record_tabular", "(", "key", ",", "value", ")", "\n", "", "self", ".", "eval_statistics", "=", "None", "\n", "\n", "if", "self", ".", "render_eval_paths", ":", "\n", "            ", "self", ".", "env", ".", "render_paths", "(", "paths", ")", "\n", "\n", "", "if", "self", ".", "plotter", ":", "\n", "            ", "self", ".", "plotter", ".", "draw", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.core.rl_algorithm.MetaRLAlgorithm.training_mode": [[478, 486], ["None"], "methods", ["None"], ["", "", "@", "abc", ".", "abstractmethod", "\n", "def", "training_mode", "(", "self", ",", "mode", ")", ":", "\n", "        ", "\"\"\"\n        Set training mode to `mode`.\n        :param mode: If True, training will happen (e.g. set the dropout\n        probabilities to not all ones).\n        \"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.core.rl_algorithm.MetaRLAlgorithm._do_training": [[487, 494], ["None"], "methods", ["None"], ["", "@", "abc", ".", "abstractmethod", "\n", "def", "_do_training", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Perform some update, e.g. perform one gradient step.\n        :return:\n        \"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.core.serializable.Serializable.__init__": [[13, 16], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "__args", "=", "args", "\n", "self", ".", "__kwargs", "=", "kwargs", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.core.serializable.Serializable.quick_init": [[17, 44], ["getattr", "setattr", "inspect.getfullargspec", "inspect.getargspec", "tuple", "tuple", "locals_[].copy", "dict", "dict"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.core.PyTorchModule.copy"], ["", "def", "quick_init", "(", "self", ",", "locals_", ")", ":", "\n", "        ", "if", "getattr", "(", "self", ",", "\"_serializable_initialized\"", ",", "False", ")", ":", "\n", "            ", "return", "\n", "", "if", "sys", ".", "version_info", ">=", "(", "3", ",", "0", ")", ":", "\n", "            ", "spec", "=", "inspect", ".", "getfullargspec", "(", "self", ".", "__init__", ")", "\n", "# Exclude the first \"self\" parameter", "\n", "if", "spec", ".", "varkw", ":", "\n", "                ", "kwargs", "=", "locals_", "[", "spec", ".", "varkw", "]", ".", "copy", "(", ")", "\n", "", "else", ":", "\n", "                ", "kwargs", "=", "dict", "(", ")", "\n", "", "if", "spec", ".", "kwonlyargs", ":", "\n", "                ", "for", "key", "in", "spec", ".", "kwonlyargs", ":", "\n", "                    ", "kwargs", "[", "key", "]", "=", "locals_", "[", "key", "]", "\n", "", "", "", "else", ":", "\n", "            ", "spec", "=", "inspect", ".", "getargspec", "(", "self", ".", "__init__", ")", "\n", "if", "spec", ".", "keywords", ":", "\n", "                ", "kwargs", "=", "locals_", "[", "spec", ".", "keywords", "]", "\n", "", "else", ":", "\n", "                ", "kwargs", "=", "dict", "(", ")", "\n", "", "", "if", "spec", ".", "varargs", ":", "\n", "            ", "varargs", "=", "locals_", "[", "spec", ".", "varargs", "]", "\n", "", "else", ":", "\n", "            ", "varargs", "=", "tuple", "(", ")", "\n", "", "in_order_args", "=", "[", "locals_", "[", "arg", "]", "for", "arg", "in", "spec", ".", "args", "]", "[", "1", ":", "]", "\n", "self", ".", "__args", "=", "tuple", "(", "in_order_args", ")", "+", "varargs", "\n", "self", ".", "__kwargs", "=", "kwargs", "\n", "setattr", "(", "self", ",", "\"_serializable_initialized\"", ",", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.core.serializable.Serializable.__getstate__": [[45, 47], ["None"], "methods", ["None"], ["", "def", "__getstate__", "(", "self", ")", ":", "\n", "        ", "return", "{", "\"__args\"", ":", "self", ".", "__args", ",", "\"__kwargs\"", ":", "self", ".", "__kwargs", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.core.serializable.Serializable.__setstate__": [[48, 57], ["serializable.Serializable.__dict__.update", "inspect.getfullargspec", "inspect.getargspec", "type", "dict", "zip"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.GymObject.update", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjvGeomWrapper.type"], ["", "def", "__setstate__", "(", "self", ",", "d", ")", ":", "\n", "# convert all __args to keyword-based arguments", "\n", "        ", "if", "sys", ".", "version_info", ">=", "(", "3", ",", "0", ")", ":", "\n", "            ", "spec", "=", "inspect", ".", "getfullargspec", "(", "self", ".", "__init__", ")", "\n", "", "else", ":", "\n", "            ", "spec", "=", "inspect", ".", "getargspec", "(", "self", ".", "__init__", ")", "\n", "", "in_order_args", "=", "spec", ".", "args", "[", "1", ":", "]", "\n", "out", "=", "type", "(", "self", ")", "(", "**", "dict", "(", "zip", "(", "in_order_args", ",", "d", "[", "\"__args\"", "]", ")", ",", "**", "d", "[", "\"__kwargs\"", "]", ")", ")", "\n", "self", ".", "__dict__", ".", "update", "(", "out", ".", "__dict__", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.core.serializable.Serializable.clone": [[58, 66], ["isinstance", "obj.__getstate__", "dict", "type().__new__", "type().__new__.__setstate__", "type", "type"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.core.serializable.Serializable.__getstate__", "home.repos.pwc.inspect_result.Rondorf_BOReL.gym.core.Env.__new__", "home.repos.pwc.inspect_result.Rondorf_BOReL.core.serializable.Serializable.__setstate__", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjvGeomWrapper.type", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjvGeomWrapper.type"], ["", "@", "classmethod", "\n", "def", "clone", "(", "cls", ",", "obj", ",", "**", "kwargs", ")", ":", "\n", "        ", "assert", "isinstance", "(", "obj", ",", "Serializable", ")", "\n", "d", "=", "obj", ".", "__getstate__", "(", ")", "\n", "d", "[", "\"__kwargs\"", "]", "=", "dict", "(", "d", "[", "\"__kwargs\"", "]", ",", "**", "kwargs", ")", "\n", "out", "=", "type", "(", "obj", ")", ".", "__new__", "(", "type", "(", "obj", ")", ")", "\n", "out", ".", "__setstate__", "(", "d", ")", "\n", "return", "out", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Rondorf_BOReL.core.util.Wrapper.__init__": [[6, 8], ["None"], "methods", ["None"], ["\n", "def", "utf8", "(", "value", ")", ":", "\n", "    ", "if", "isinstance", "(", "value", ",", "unicode", ")", "and", "sys", ".", "version_info", "<", "(", "3", ",", "0", ")", ":", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.core.util.Wrapper.__getattr__": [[9, 26], ["attr.startswith", "attr.endswith", "super().__getattr__", "getattr"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.startswith", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.util.UserString.endswith", "home.repos.pwc.inspect_result.Rondorf_BOReL.core.util.Wrapper.__getattr__"], ["        ", "return", "value", ".", "encode", "(", "'utf-8'", ")", "\n", "", "else", ":", "\n", "        ", "return", "value", "\n", "\n", "", "", "def", "file_size", "(", "f", ")", ":", "\n", "    ", "return", "os", ".", "fstat", "(", "f", ".", "fileno", "(", ")", ")", ".", "st_size", "\n", "", ""]], "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.point_robot.PointEnv.__init__": [[18, 38], ["point_robot.PointEnv.reset_task", "gym.spaces.Box", "gym.spaces.Box", "numpy.random.uniform", "numpy.random.uniform", "range"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.reset_task"], ["def", "__init__", "(", "self", ",", "\n", "max_episode_steps", "=", "20", ",", "\n", "n_tasks", "=", "2", ",", "\n", "modify_init_state_dist", "=", "True", ",", "\n", "on_circle_init_state", "=", "True", ",", "\n", "**", "kwargs", ")", ":", "\n", "\n", "        ", "self", ".", "_max_episode_steps", "=", "max_episode_steps", "\n", "self", ".", "step_count", "=", "0", "\n", "self", ".", "modify_init_state_dist", "=", "modify_init_state_dist", "\n", "self", ".", "on_circle_init_state", "=", "on_circle_init_state", "\n", "\n", "# np.random.seed(1337)", "\n", "goals", "=", "[", "[", "np", ".", "random", ".", "uniform", "(", "-", "1.", ",", "1.", ")", ",", "np", ".", "random", ".", "uniform", "(", "-", "1.", ",", "1.", ")", "]", "for", "_", "in", "range", "(", "n_tasks", ")", "]", "\n", "\n", "self", ".", "goals", "=", "goals", "\n", "\n", "self", ".", "reset_task", "(", "0", ")", "\n", "self", ".", "observation_space", "=", "spaces", ".", "Box", "(", "low", "=", "-", "np", ".", "inf", ",", "high", "=", "np", ".", "inf", ",", "shape", "=", "(", "2", ",", ")", ")", "\n", "self", ".", "action_space", "=", "spaces", ".", "Box", "(", "low", "=", "-", "0.1", ",", "high", "=", "0.1", ",", "shape", "=", "(", "2", ",", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.point_robot.PointEnv.reset_task": [[39, 44], ["point_robot.PointEnv.reset", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.reset"], ["", "def", "reset_task", "(", "self", ",", "idx", ")", ":", "\n", "        ", "''' reset goal AND reset the agent '''", "\n", "if", "idx", "is", "not", "None", ":", "\n", "            ", "self", ".", "_goal", "=", "np", ".", "array", "(", "self", ".", "goals", "[", "idx", "]", ")", "\n", "", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.point_robot.PointEnv.set_goal": [[45, 47], ["numpy.asarray"], "methods", ["None"], ["", "def", "set_goal", "(", "self", ",", "goal", ")", ":", "\n", "        ", "self", ".", "_goal", "=", "np", ".", "asarray", "(", "goal", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.point_robot.PointEnv.get_all_task_idx": [[48, 50], ["range", "len"], "methods", ["None"], ["", "def", "get_all_task_idx", "(", "self", ")", ":", "\n", "        ", "return", "range", "(", "len", "(", "self", ".", "goals", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.point_robot.PointEnv.reset_model": [[51, 55], ["numpy.random.uniform", "point_robot.PointEnv._get_obs"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.point_robot.PointEnv._get_obs"], ["", "def", "reset_model", "(", "self", ")", ":", "\n", "# reset to a random location on the unit square", "\n", "        ", "self", ".", "_state", "=", "np", ".", "random", ".", "uniform", "(", "-", "1.", ",", "1.", ",", "size", "=", "(", "2", ",", ")", ")", "\n", "return", "self", ".", "_get_obs", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.point_robot.PointEnv.reset": [[56, 59], ["point_robot.PointEnv.reset_model"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.reset_model"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "step_count", "=", "0", "\n", "return", "self", ".", "reset_model", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.point_robot.PointEnv._get_obs": [[60, 62], ["numpy.copy"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.core.PyTorchModule.copy"], ["", "def", "_get_obs", "(", "self", ")", ":", "\n", "        ", "return", "np", ".", "copy", "(", "self", ".", "_state", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.point_robot.PointEnv.step": [[63, 76], ["point_robot.PointEnv._get_obs", "dict"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.point_robot.PointEnv._get_obs"], ["", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "self", ".", "_state", "=", "self", ".", "_state", "+", "action", "\n", "reward", "=", "-", "(", "(", "self", ".", "_state", "[", "0", "]", "-", "self", ".", "_goal", "[", "0", "]", ")", "**", "2", "+", "(", "self", ".", "_state", "[", "1", "]", "-", "self", ".", "_goal", "[", "1", "]", ")", "**", "2", ")", "**", "0.5", "\n", "\n", "# check if maximum step limit is reached", "\n", "self", ".", "step_count", "+=", "1", "\n", "if", "self", ".", "step_count", ">=", "self", ".", "_max_episode_steps", ":", "\n", "            ", "done", "=", "True", "\n", "", "else", ":", "\n", "            ", "done", "=", "False", "\n", "\n", "", "ob", "=", "self", ".", "_get_obs", "(", ")", "\n", "return", "ob", ",", "reward", ",", "done", ",", "dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.point_robot.PointEnv.reward": [[77, 79], ["None"], "methods", ["None"], ["", "def", "reward", "(", "self", ",", "state", ",", "action", "=", "None", ")", ":", "\n", "        ", "return", "-", "(", "(", "state", "[", "0", "]", "-", "self", ".", "_goal", "[", "0", "]", ")", "**", "2", "+", "(", "state", "[", "1", "]", "-", "self", ".", "_goal", "[", "1", "]", ")", "**", "2", ")", "**", "0.5", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.point_robot.PointEnv.viewer_setup": [[80, 83], ["print"], "methods", ["None"], ["", "def", "viewer_setup", "(", "self", ")", ":", "\n", "        ", "print", "(", "'no viewer'", ")", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.point_robot.PointEnv.render": [[84, 86], ["print"], "methods", ["None"], ["", "def", "render", "(", "self", ")", ":", "\n", "        ", "print", "(", "'current state:'", ",", "self", ".", "_state", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.point_robot.SparsePointEnv.__init__": [[95, 118], ["point_robot.PointEnv.__init__", "numpy.random.uniform", "numpy.stack", "numpy.random.shuffle", "goals.tolist.tolist.tolist", "point_robot.SparsePointEnv.reset_task", "numpy.cos", "numpy.sin"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.__init__", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjDataWrapper.stack", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.reset_task"], ["def", "__init__", "(", "self", ",", "\n", "max_episode_steps", "=", "20", ",", "\n", "n_tasks", "=", "2", ",", "\n", "goal_radius", "=", "0.2", ",", "\n", "modify_init_state_dist", "=", "True", ",", "\n", "on_circle_init_state", "=", "True", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "max_episode_steps", ",", "n_tasks", ")", "\n", "self", ".", "goal_radius", "=", "goal_radius", "\n", "self", ".", "modify_init_state_dist", "=", "modify_init_state_dist", "\n", "self", ".", "on_circle_init_state", "=", "on_circle_init_state", "\n", "\n", "# np.random.seed(1337)", "\n", "radius", "=", "1.0", "\n", "angles", "=", "np", ".", "random", ".", "uniform", "(", "0", ",", "np", ".", "pi", ",", "size", "=", "n_tasks", ")", "\n", "xs", "=", "radius", "*", "np", ".", "cos", "(", "angles", ")", "\n", "ys", "=", "radius", "*", "np", ".", "sin", "(", "angles", ")", "\n", "goals", "=", "np", ".", "stack", "(", "[", "xs", ",", "ys", "]", ",", "axis", "=", "1", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "goals", ")", "\n", "goals", "=", "goals", ".", "tolist", "(", ")", "\n", "\n", "self", ".", "goals", "=", "goals", "\n", "self", ".", "reset_task", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.point_robot.SparsePointEnv.sparsify_rewards": [[119, 124], ["None"], "methods", ["None"], ["", "def", "sparsify_rewards", "(", "self", ",", "r", ")", ":", "\n", "        ", "''' zero out rewards when outside the goal radius '''", "\n", "mask", "=", "(", "r", ">=", "-", "self", ".", "goal_radius", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "r", "=", "r", "*", "mask", "\n", "return", "r", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.point_robot.SparsePointEnv.reset_model": [[125, 135], ["point_robot.SparsePointEnv._get_obs", "numpy.array", "numpy.array", "numpy.random.uniform", "numpy.random.uniform", "numpy.linalg.norm", "numpy.array", "numpy.random.uniform", "numpy.random.uniform"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.point_robot.PointEnv._get_obs"], ["", "def", "reset_model", "(", "self", ")", ":", "\n", "        ", "self", ".", "step_count", "=", "0", "\n", "if", "self", ".", "modify_init_state_dist", ":", "\n", "            ", "self", ".", "_state", "=", "np", ".", "array", "(", "[", "np", ".", "random", ".", "uniform", "(", "-", "1.5", ",", "1.5", ")", ",", "np", ".", "random", ".", "uniform", "(", "-", "0.5", ",", "1.5", ")", "]", ")", "\n", "if", "not", "self", ".", "on_circle_init_state", ":", "# make sure initial state is not on semi-circle", "\n", "                ", "while", "1", "-", "self", ".", "goal_radius", "<=", "np", ".", "linalg", ".", "norm", "(", "self", ".", "_state", ")", "<=", "1", "+", "self", ".", "goal_radius", ":", "\n", "                    ", "self", ".", "_state", "=", "np", ".", "array", "(", "[", "np", ".", "random", ".", "uniform", "(", "-", "1.5", ",", "1.5", ")", ",", "np", ".", "random", ".", "uniform", "(", "-", "0.5", ",", "1.5", ")", "]", ")", "\n", "", "", "", "else", ":", "\n", "            ", "self", ".", "_state", "=", "np", ".", "array", "(", "[", "0", ",", "0", "]", ")", "\n", "", "return", "self", ".", "_get_obs", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.point_robot.SparsePointEnv.step": [[136, 146], ["point_robot.PointEnv.step", "point_robot.SparsePointEnv.sparsify_rewards", "d.update"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.step", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.point_robot.SparsePointEnv.sparsify_rewards", "home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.GymObject.update"], ["", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "ob", ",", "reward", ",", "done", ",", "d", "=", "super", "(", ")", ".", "step", "(", "action", ")", "\n", "sparse_reward", "=", "self", ".", "sparsify_rewards", "(", "reward", ")", "\n", "# make sparse rewards positive", "\n", "if", "reward", ">=", "-", "self", ".", "goal_radius", ":", "\n", "# sparse_reward += 1", "\n", "            ", "sparse_reward", "=", "1", "\n", "", "d", ".", "update", "(", "{", "'sparse_reward'", ":", "sparse_reward", "}", ")", "\n", "# return ob, reward, done, d", "\n", "return", "ob", ",", "sparse_reward", ",", "done", ",", "d", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.point_robot.SparsePointEnv.reward": [[147, 149], ["point_robot.SparsePointEnv.sparsify_rewards", "point_robot.PointEnv.reward"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.point_robot.SparsePointEnv.sparsify_rewards", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.reward"], ["", "def", "reward", "(", "self", ",", "state", ",", "action", "=", "None", ")", ":", "\n", "        ", "return", "self", ".", "sparsify_rewards", "(", "super", "(", ")", ".", "reward", "(", "state", ",", "action", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.point_robot.SparsePointEnv.is_goal_state": [[150, 155], ["numpy.linalg.norm"], "methods", ["None"], ["", "def", "is_goal_state", "(", "self", ")", ":", "\n", "        ", "if", "np", ".", "linalg", ".", "norm", "(", "self", ".", "_state", "-", "self", ".", "_goal", ")", "<=", "self", ".", "goal_radius", ":", "\n", "            ", "return", "True", "\n", "", "else", ":", "\n", "            ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.point_robot.SparsePointEnv.plot_env": [[156, 172], ["matplotlib.gca", "numpy.linspace", "matplotlib.plot", "matplotlib.axis", "matplotlib.gca.set_xlim", "matplotlib.gca.set_ylim", "matplotlib.xticks", "matplotlib.yticks", "matplotlib.Circle", "matplotlib.gca.add_artist", "numpy.cos", "numpy.sin"], "methods", ["None"], ["", "", "def", "plot_env", "(", "self", ")", ":", "\n", "        ", "ax", "=", "plt", ".", "gca", "(", ")", "\n", "# plot half circle and goal position", "\n", "angles", "=", "np", ".", "linspace", "(", "0", ",", "np", ".", "pi", ",", "num", "=", "100", ")", "\n", "x", ",", "y", "=", "np", ".", "cos", "(", "angles", ")", ",", "np", ".", "sin", "(", "angles", ")", "\n", "plt", ".", "plot", "(", "x", ",", "y", ",", "color", "=", "'k'", ")", "\n", "# fix visualization", "\n", "plt", ".", "axis", "(", "'scaled'", ")", "\n", "# ax.set_xlim(-1.25, 1.25)", "\n", "ax", ".", "set_xlim", "(", "-", "2", ",", "2", ")", "\n", "# ax.set_ylim(-0.25, 1.25)", "\n", "ax", ".", "set_ylim", "(", "-", "1", ",", "2", ")", "\n", "plt", ".", "xticks", "(", "[", "]", ")", "\n", "plt", ".", "yticks", "(", "[", "]", ")", "\n", "circle", "=", "plt", ".", "Circle", "(", "(", "self", ".", "_goal", "[", "0", "]", ",", "self", ".", "_goal", "[", "1", "]", ")", ",", "radius", "=", "self", ".", "goal_radius", ",", "alpha", "=", "0.3", ")", "\n", "ax", ".", "add_artist", "(", "circle", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.point_robot.SparsePointEnv.plot_behavior": [[173, 178], ["matplotlib.plot", "point_robot.SparsePointEnv.plot_env"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.plot_env"], ["", "def", "plot_behavior", "(", "self", ",", "observations", ",", "plot_env", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "plot_env", ":", "# whether to plot circle and goal pos..(maybe already exists)", "\n", "            ", "self", ".", "plot_env", "(", ")", "\n", "# visualise behaviour, current position, goal", "\n", "", "plt", ".", "plot", "(", "observations", "[", ":", ",", "0", "]", ",", "observations", "[", ":", ",", "1", "]", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.__init__": [[14, 64], ["gym.Env.__init__", "gym.spaces.Box", "gym.spaces.Discrete", "gridworld.GridNavi.states.copy", "gridworld.GridNavi.possible_goals.remove", "gridworld.GridNavi.possible_goals.remove", "gridworld.GridNavi.possible_goals.remove", "min", "random.sample", "gridworld.GridNavi.reset_task", "gridworld.GridNavi.seed", "gridworld.GridNavi.possible_goals.remove", "len", "gridworld.GridNavi._reset_belief", "numpy.arange", "numpy.arange"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.__init__", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.core.PyTorchModule.copy", "home.repos.pwc.inspect_result.Rondorf_BOReL.spaces.discrete.Discrete.sample", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.reset_task", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.seed", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi._reset_belief"], ["    ", "def", "__init__", "(", "self", ",", "\n", "num_cells", "=", "5", ",", "\n", "num_steps", "=", "15", ",", "\n", "n_tasks", "=", "2", ",", "\n", "modify_init_state_dist", "=", "False", ",", "\n", "is_sparse", "=", "False", ",", "\n", "return_belief_rewards", "=", "False", ",", "# output R+ instead of R", "\n", "seed", "=", "None", ",", "\n", "**", "kwargs", ",", "\n", ")", ":", "\n", "        ", "super", "(", "GridNavi", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "if", "seed", "is", "not", "None", ":", "\n", "            ", "self", ".", "seed", "(", "seed", ")", "\n", "\n", "", "self", ".", "num_cells", "=", "num_cells", "\n", "self", ".", "num_states", "=", "num_cells", "**", "2", "\n", "self", ".", "grid_size", "=", "(", "num_cells", ",", "num_cells", ")", "\n", "\n", "self", ".", "is_sparse", "=", "is_sparse", "\n", "self", ".", "return_belief_rewards", "=", "return_belief_rewards", "\n", "self", ".", "modify_init_state_dist", "=", "modify_init_state_dist", "\n", "\n", "self", ".", "_max_episode_steps", "=", "num_steps", "\n", "self", ".", "step_count", "=", "0", "\n", "\n", "self", ".", "observation_space", "=", "spaces", ".", "Box", "(", "low", "=", "0", ",", "high", "=", "self", ".", "num_cells", "-", "1", ",", "shape", "=", "(", "2", ",", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "self", ".", "action_space", "=", "spaces", ".", "Discrete", "(", "5", ")", "# noop, up, right, down, left", "\n", "\n", "# possible starting states - when not modify_init_state_dist", "\n", "self", ".", "starting_states", "=", "[", "(", "0.0", ",", "0.0", ")", "]", "# , (self.num_cells-1, 0)]#,", "\n", "# (0, self.num_cells-1), (self.num_cells-1, self.num_cells-1)]", "\n", "\n", "self", ".", "states", "=", "[", "(", "x", ",", "y", ")", "for", "y", "in", "np", ".", "arange", "(", "0", ",", "num_cells", ")", "for", "x", "in", "np", ".", "arange", "(", "0", ",", "num_cells", ")", "]", "\n", "\n", "# remove starting states and some possible goals", "\n", "self", ".", "possible_goals", "=", "self", ".", "states", ".", "copy", "(", ")", "\n", "for", "s", "in", "self", ".", "starting_states", ":", "\n", "            ", "self", ".", "possible_goals", ".", "remove", "(", "s", ")", "\n", "", "self", ".", "possible_goals", ".", "remove", "(", "(", "0", ",", "1", ")", ")", "\n", "self", ".", "possible_goals", ".", "remove", "(", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "possible_goals", ".", "remove", "(", "(", "1", ",", "0", ")", ")", "\n", "\n", "self", ".", "num_tasks", "=", "min", "(", "n_tasks", ",", "len", "(", "self", ".", "possible_goals", ")", ")", "\n", "\n", "self", ".", "goals", "=", "random", ".", "sample", "(", "self", ".", "possible_goals", ",", "self", ".", "num_tasks", ")", "\n", "self", ".", "reset_task", "(", "0", ")", "\n", "\n", "if", "self", ".", "return_belief_rewards", ":", "\n", "            ", "self", ".", "_belief_state", "=", "self", ".", "_reset_belief", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.seed": [[65, 69], ["gym.utils.seeding.np_random", "random.seed"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.utils.seeding.np_random", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.seed"], ["", "", "def", "seed", "(", "self", ",", "seed", "=", "None", ")", ":", "\n", "        ", "self", ".", "np_random", ",", "seed", "=", "seeding", ".", "np_random", "(", "seed", ")", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "return", "[", "seed", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.get_all_task_idx": [[70, 72], ["range", "len"], "methods", ["None"], ["", "def", "get_all_task_idx", "(", "self", ")", ":", "\n", "        ", "return", "range", "(", "len", "(", "self", ".", "goals", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.get_task": [[73, 75], ["None"], "methods", ["None"], ["", "def", "get_task", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_goal", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.set_goal": [[76, 78], ["numpy.asarray"], "methods", ["None"], ["", "def", "set_goal", "(", "self", ",", "goal", ")", ":", "\n", "        ", "self", ".", "_goal", "=", "np", ".", "asarray", "(", "goal", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.reset_task": [[79, 84], ["gridworld.GridNavi.reset", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.reset"], ["", "def", "reset_task", "(", "self", ",", "idx", "=", "None", ")", ":", "\n", "        ", "' reset goal and state '", "\n", "if", "idx", "is", "not", "None", ":", "\n", "            ", "self", ".", "_goal", "=", "np", ".", "array", "(", "self", ".", "goals", "[", "idx", "]", ")", "\n", "", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi._reset_belief": [[85, 91], ["numpy.zeros", "gridworld.GridNavi.task_to_id", "numpy.array", "len"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.zeros", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.task_to_id"], ["", "def", "_reset_belief", "(", "self", ")", ":", "\n", "        ", "self", ".", "_belief_state", "=", "np", ".", "zeros", "(", "(", "self", ".", "num_cells", "**", "2", ")", ")", "\n", "for", "pg", "in", "self", ".", "possible_goals", ":", "\n", "            ", "idx", "=", "self", ".", "task_to_id", "(", "np", ".", "array", "(", "pg", ")", ")", "\n", "self", ".", "_belief_state", "[", "idx", "]", "=", "1.0", "/", "len", "(", "self", ".", "possible_goals", ")", "\n", "", "return", "self", ".", "_belief_state", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.reset_model": [[92, 102], ["gridworld.GridNavi._reset_belief", "gridworld.GridNavi.get_obs", "numpy.array", "numpy.array", "random.choice", "numpy.array", "random.choice", "random.choice"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi._reset_belief", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.get_obs"], ["", "def", "reset_model", "(", "self", ")", ":", "\n", "# reset the environment state", "\n", "        ", "if", "self", ".", "modify_init_state_dist", ":", "\n", "            ", "self", ".", "_state", "=", "np", ".", "array", "(", "random", ".", "choice", "(", "self", ".", "states", ")", ")", "# For data collection", "\n", "while", "(", "self", ".", "_state", "==", "self", ".", "_goal", ")", ".", "all", "(", ")", ":", "# do not start in goal", "\n", "                ", "self", ".", "_state", "=", "np", ".", "array", "(", "random", ".", "choice", "(", "self", ".", "states", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "_state", "=", "np", ".", "array", "(", "random", ".", "choice", "(", "self", ".", "starting_states", ")", ")", "\n", "", "self", ".", "_belief_state", "=", "self", ".", "_reset_belief", "(", ")", "\n", "return", "self", ".", "get_obs", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.get_obs": [[103, 105], ["numpy.copy"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.core.PyTorchModule.copy"], ["", "def", "get_obs", "(", "self", ")", ":", "\n", "        ", "return", "np", ".", "copy", "(", "self", ".", "_state", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.update_belief": [[106, 115], ["gridworld.GridNavi.is_goal_state", "numpy.ceil", "sum", "gridworld.GridNavi.task_to_id", "gridworld.GridNavi.task_to_id"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.is_goal_state", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.task_to_id", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.task_to_id"], ["", "def", "update_belief", "(", "self", ",", "state", ")", ":", "\n", "\n", "        ", "if", "self", ".", "is_goal_state", "(", ")", ":", "\n", "            ", "self", ".", "_belief_state", "*=", "0", "\n", "self", ".", "_belief_state", "[", "self", ".", "task_to_id", "(", "self", ".", "_goal", ")", "]", "=", "1", "\n", "", "else", ":", "\n", "            ", "self", ".", "_belief_state", "[", "self", ".", "task_to_id", "(", "state", ")", "]", "=", "0", "\n", "self", ".", "_belief_state", "=", "np", ".", "ceil", "(", "self", ".", "_belief_state", ")", "\n", "self", ".", "_belief_state", "/=", "sum", "(", "self", ".", "_belief_state", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.reset": [[116, 119], ["gridworld.GridNavi.reset_model"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.reset_model"], ["", "", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "step_count", "=", "0", "\n", "return", "self", ".", "reset_model", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.reward": [[120, 125], ["None"], "methods", ["None"], ["", "def", "reward", "(", "self", ",", "state", ",", "action", "=", "None", ")", ":", "\n", "        ", "if", "state", "[", "0", "]", "==", "self", ".", "_goal", "[", "0", "]", "and", "state", "[", "1", "]", "==", "self", ".", "_goal", "[", "1", "]", ":", "\n", "            ", "return", "1.", "\n", "", "else", ":", "\n", "            ", "return", "0.", "if", "self", ".", "is_sparse", "else", "-", "0.1", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.state_transition": [[126, 139], ["min", "min", "max", "max"], "methods", ["None"], ["", "", "def", "state_transition", "(", "self", ",", "action", ")", ":", "\n", "        ", "\"\"\"\n        Moving the agent between states\n        \"\"\"", "\n", "\n", "if", "action", "==", "1", ":", "# up", "\n", "            ", "self", ".", "_state", "[", "1", "]", "=", "min", "(", "[", "self", ".", "_state", "[", "1", "]", "+", "1", ",", "self", ".", "num_cells", "-", "1", "]", ")", "\n", "", "elif", "action", "==", "2", ":", "# right", "\n", "            ", "self", ".", "_state", "[", "0", "]", "=", "min", "(", "[", "self", ".", "_state", "[", "0", "]", "+", "1", ",", "self", ".", "num_cells", "-", "1", "]", ")", "\n", "", "elif", "action", "==", "3", ":", "# down", "\n", "            ", "self", ".", "_state", "[", "1", "]", "=", "max", "(", "[", "self", ".", "_state", "[", "1", "]", "-", "1", ",", "0", "]", ")", "\n", "", "elif", "action", "==", "4", ":", "# left", "\n", "            ", "self", ".", "_state", "[", "0", "]", "=", "max", "(", "[", "self", ".", "_state", "[", "0", "]", "-", "1", ",", "0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.step": [[140, 167], ["gridworld.GridNavi.action_space.contains", "gridworld.GridNavi.state_transition", "gridworld.GridNavi.reward", "isinstance", "gridworld.GridNavi.get_task", "gridworld.GridNavi.update_belief", "gridworld.GridNavi._compute_belief_reward", "info.update", "gridworld.GridNavi.get_obs"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.spaces.discrete.Discrete.contains", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.state_transition", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.reward", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.get_task", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.update_belief", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi._compute_belief_reward", "home.repos.pwc.inspect_result.Rondorf_BOReL.client.resource.GymObject.update", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.get_obs"], ["", "", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "if", "isinstance", "(", "action", ",", "np", ".", "ndarray", ")", "and", "action", ".", "ndim", "==", "1", ":", "\n", "            ", "action", "=", "action", "[", "0", "]", "\n", "", "assert", "self", ".", "action_space", ".", "contains", "(", "action", ")", "\n", "\n", "info", "=", "{", "'task'", ":", "self", ".", "get_task", "(", ")", "}", "\n", "\n", "done", "=", "False", "\n", "\n", "# perform state transition", "\n", "self", ".", "state_transition", "(", "action", ")", "\n", "\n", "# check if maximum step limit is reached", "\n", "self", ".", "step_count", "+=", "1", "\n", "if", "self", ".", "step_count", ">=", "self", ".", "_max_episode_steps", ":", "\n", "            ", "done", "=", "True", "\n", "\n", "# compute belief rewards reward", "\n", "", "if", "self", ".", "return_belief_rewards", ":", "\n", "            ", "self", ".", "update_belief", "(", "self", ".", "_state", ")", "\n", "belief_reward", "=", "self", ".", "_compute_belief_reward", "(", ")", "\n", "info", ".", "update", "(", "{", "'belief_reward'", ":", "belief_reward", "}", ")", "\n", "\n", "# compute reward", "\n", "", "reward", "=", "self", ".", "reward", "(", "self", ".", "_state", ")", "\n", "\n", "return", "self", ".", "get_obs", "(", ")", ",", "reward", ",", "done", ",", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi._compute_belief_reward": [[168, 173], ["numpy.sum"], "methods", ["None"], ["", "def", "_compute_belief_reward", "(", "self", ")", ":", "\n", "        ", "num_possible_goal_belief", "=", "np", ".", "sum", "(", "self", ".", "_belief_state", "!=", "0", ")", "# num. goals for which belief isn't 0", "\n", "non_goal_rew", "=", "0.", "if", "self", ".", "is_sparse", "else", "-", "0.1", "\n", "belief_reward", "=", "(", "1.", "+", "non_goal_rew", "*", "(", "num_possible_goal_belief", "-", "1", ")", ")", "/", "num_possible_goal_belief", "\n", "return", "belief_reward", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.is_goal_state": [[174, 179], ["None"], "methods", ["None"], ["", "def", "is_goal_state", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_state", "[", "0", "]", "==", "self", ".", "_goal", "[", "0", "]", "and", "self", ".", "_state", "[", "1", "]", "==", "self", ".", "_goal", "[", "1", "]", ":", "\n", "            ", "return", "True", "\n", "", "else", ":", "\n", "            ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.task_to_id": [[180, 199], ["torch.arange().long().reshape().transpose", "isinstance", "goals.reshape.reshape.long", "classes.reshape.reshape.reshape", "isinstance", "isinstance", "numpy.array", "torch.from_numpy", "goals.reshape.reshape.dim", "goals.reshape.reshape.unsqueeze", "len", "goals.reshape.reshape.reshape", "torch.arange().long().reshape", "torch.arange().long", "torch.arange"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.from_numpy", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjContactWrapper.dim"], ["", "", "def", "task_to_id", "(", "self", ",", "goals", ")", ":", "\n", "        ", "mat", "=", "torch", ".", "arange", "(", "0", ",", "self", ".", "num_cells", "**", "2", ")", ".", "long", "(", ")", ".", "reshape", "(", "(", "self", ".", "num_cells", ",", "self", ".", "num_cells", ")", ")", ".", "transpose", "(", "1", ",", "0", ")", "\n", "if", "isinstance", "(", "goals", ",", "list", ")", "or", "isinstance", "(", "goals", ",", "tuple", ")", ":", "\n", "            ", "goals", "=", "np", ".", "array", "(", "goals", ")", "\n", "", "if", "isinstance", "(", "goals", ",", "np", ".", "ndarray", ")", ":", "\n", "            ", "goals", "=", "torch", ".", "from_numpy", "(", "goals", ")", "\n", "", "goals", "=", "goals", ".", "long", "(", ")", "\n", "\n", "if", "goals", ".", "dim", "(", ")", "==", "1", ":", "\n", "            ", "goals", "=", "goals", ".", "unsqueeze", "(", "0", ")", "\n", "\n", "", "goal_shape", "=", "goals", ".", "shape", "\n", "if", "len", "(", "goal_shape", ")", ">", "2", ":", "\n", "            ", "goals", "=", "goals", ".", "reshape", "(", "-", "1", ",", "goals", ".", "shape", "[", "-", "1", "]", ")", "\n", "\n", "", "classes", "=", "mat", "[", "goals", "[", ":", ",", "0", "]", ",", "goals", "[", ":", ",", "1", "]", "]", "\n", "classes", "=", "classes", ".", "reshape", "(", "goal_shape", "[", ":", "-", "1", "]", ")", "\n", "\n", "return", "classes", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.id_to_task": [[200, 210], ["numpy.zeros", "classes.numpy.numpy.numpy", "range", "torch.from_numpy().to().float", "torch.arange().long().reshape().numpy", "len", "numpy.where", "float", "float", "len", "torch.from_numpy().to", "torch.arange().long().reshape", "torch.from_numpy", "torch.arange().long", "torch.arange"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.zeros", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.from_numpy"], ["", "def", "id_to_task", "(", "self", ",", "classes", ")", ":", "\n", "        ", "mat", "=", "torch", ".", "arange", "(", "0", ",", "self", ".", "num_cells", "**", "2", ")", ".", "long", "(", ")", ".", "reshape", "(", "(", "self", ".", "num_cells", ",", "self", ".", "num_cells", ")", ")", ".", "numpy", "(", ")", ".", "T", "\n", "goals", "=", "np", ".", "zeros", "(", "(", "len", "(", "classes", ")", ",", "2", ")", ")", "\n", "classes", "=", "classes", ".", "numpy", "(", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "classes", ")", ")", ":", "\n", "            ", "pos", "=", "np", ".", "where", "(", "classes", "[", "i", "]", "==", "mat", ")", "\n", "goals", "[", "i", ",", "0", "]", "=", "float", "(", "pos", "[", "0", "]", "[", "0", "]", ")", "\n", "goals", "[", "i", ",", "1", "]", "=", "float", "(", "pos", "[", "1", "]", "[", "0", "]", ")", "\n", "", "goals", "=", "torch", ".", "from_numpy", "(", "goals", ")", ".", "to", "(", "ptu", ".", "device", ")", ".", "float", "(", ")", "\n", "return", "goals", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.goal_to_onehot_id": [[211, 222], ["gridworld.GridNavi.task_to_id", "torch.FloatTensor().to", "torch.FloatTensor().to.zero_", "torch.FloatTensor().to.scatter_", "cl.view.view.dim", "cl.view.view.view", "torch.FloatTensor"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.task_to_id", "home.repos.pwc.inspect_result.Rondorf_BOReL.mujoco_py.mjtypes.MjContactWrapper.dim", "home.repos.pwc.inspect_result.Rondorf_BOReL.torchkit.pytorch_utils.FloatTensor"], ["", "def", "goal_to_onehot_id", "(", "self", ",", "pos", ")", ":", "\n", "        ", "cl", "=", "self", ".", "task_to_id", "(", "pos", ")", "\n", "if", "cl", ".", "dim", "(", ")", "==", "1", ":", "\n", "            ", "cl", "=", "cl", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "", "nb_digits", "=", "self", ".", "num_cells", "**", "2", "\n", "# One hot encoding buffer that you create out of the loop and just keep reusing", "\n", "y_onehot", "=", "torch", ".", "FloatTensor", "(", "pos", ".", "shape", "[", "0", "]", ",", "nb_digits", ")", ".", "to", "(", "ptu", ".", "device", ")", "\n", "# In your for loop", "\n", "y_onehot", ".", "zero_", "(", ")", "\n", "y_onehot", ".", "scatter_", "(", "1", ",", "cl", ",", "1", ")", "\n", "return", "y_onehot", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.onehot_id_to_goal": [[223, 229], ["isinstance", "gridworld.GridNavi.id_to_task", "gridworld.GridNavi.id_to_task", "gridworld.GridNavi.argmax", "p.argmax"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.id_to_task", "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.id_to_task"], ["", "def", "onehot_id_to_goal", "(", "self", ",", "pos", ")", ":", "\n", "        ", "if", "isinstance", "(", "pos", ",", "list", ")", ":", "\n", "            ", "pos", "=", "[", "self", ".", "id_to_task", "(", "p", ".", "argmax", "(", "dim", "=", "1", ")", ")", "for", "p", "in", "pos", "]", "\n", "", "else", ":", "\n", "            ", "pos", "=", "self", ".", "id_to_task", "(", "pos", ".", "argmax", "(", "dim", "=", "1", ")", ")", "\n", "", "return", "pos", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.render": [[230, 232], ["None"], "methods", ["None"], ["", "def", "render", "(", "self", ",", "mode", "=", "'human'", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.close": [[233, 235], ["None"], "methods", ["None"], ["", "def", "close", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.plot_env": [[236, 248], ["range", "matplotlib.plot", "matplotlib.plot", "range", "numpy.array", "matplotlib.patches.Rectangle", "matplotlib.gca().add_patch", "matplotlib.gca"], "methods", ["None"], ["", "def", "plot_env", "(", "self", ")", ":", "\n", "# draw grid", "\n", "        ", "for", "i", "in", "range", "(", "self", ".", "num_cells", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "self", ".", "num_cells", ")", ":", "\n", "                ", "pos_i", "=", "i", "\n", "pos_j", "=", "j", "\n", "rec", "=", "Rectangle", "(", "(", "pos_i", ",", "pos_j", ")", ",", "1", ",", "1", ",", "facecolor", "=", "'none'", ",", "alpha", "=", "0.5", ",", "\n", "edgecolor", "=", "'k'", ")", "\n", "plt", ".", "gca", "(", ")", ".", "add_patch", "(", "rec", ")", "\n", "", "", "goal", "=", "np", ".", "array", "(", "self", ".", "_goal", ")", "+", "0.5", "\n", "plt", ".", "plot", "(", "goal", "[", "0", "]", ",", "goal", "[", "1", "]", ",", "'kx'", ")", "\n", "plt", ".", "plot", "(", "goal", "[", "0", "]", ",", "goal", "[", "1", "]", ",", "'kx'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.plot_behavior": [[249, 266], ["matplotlib.plot", "matplotlib.plot", "matplotlib.xticks", "matplotlib.yticks", "matplotlib.xlim", "matplotlib.ylim", "matplotlib.axis", "gridworld.GridNavi.plot_env", "isinstance", "isinstance", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.Rondorf_BOReL.toy_navigation.gridworld.GridNavi.plot_env"], ["", "def", "plot_behavior", "(", "self", ",", "observations", ",", "plot_env", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "plot_env", ":", "\n", "            ", "self", ".", "plot_env", "(", ")", "\n", "# shift obs and goal by half a stepsize", "\n", "", "if", "isinstance", "(", "observations", ",", "tuple", ")", "or", "isinstance", "(", "observations", ",", "list", ")", ":", "\n", "            ", "observations", "=", "torch", ".", "cat", "(", "observations", ")", "\n", "", "observations", "=", "observations", "+", "0.5", "\n", "\n", "# visualise behaviour, current position, goal", "\n", "plt", ".", "plot", "(", "observations", "[", ":", ",", "0", "]", ",", "observations", "[", ":", ",", "1", "]", ",", "**", "kwargs", ")", "\n", "plt", ".", "plot", "(", "observations", "[", "-", "1", ",", "0", "]", ",", "observations", "[", "-", "1", ",", "1", "]", ",", "**", "kwargs", ")", "\n", "# make it look nice", "\n", "plt", ".", "xticks", "(", "[", "]", ")", "\n", "plt", ".", "yticks", "(", "[", "]", ")", "\n", "plt", ".", "xlim", "(", "[", "0", ",", "self", ".", "num_cells", "]", ")", "\n", "plt", ".", "ylim", "(", "[", "0", ",", "self", ".", "num_cells", "]", ")", "\n", "plt", ".", "axis", "(", "'equal'", ")", "\n", "", "", ""]]}