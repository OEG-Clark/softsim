{"home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.Training Code.test.save_tensor_image": [[17, 29], ["isinstance", "np.tile.astype", "PIL.Image.fromarray", "Image.fromarray.save", "image_tensor[].cpu().float().numpy", "numpy.tile", "image_tensor[].cpu().float", "numpy.transpose", "image_tensor[].cpu"], "function", ["home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.util.html.HTML.save"], ["def", "save_tensor_image", "(", "input_image", ",", "image_path", ")", ":", "\n", "    ", "if", "isinstance", "(", "input_image", ",", "torch", ".", "Tensor", ")", ":", "\n", "        ", "image_tensor", "=", "input_image", ".", "data", "\n", "image_numpy", "=", "image_tensor", "[", "0", "]", ".", "cpu", "(", ")", ".", "float", "(", ")", ".", "numpy", "(", ")", "\n", "if", "image_numpy", ".", "shape", "[", "0", "]", "==", "1", ":", "\n", "            ", "image_numpy", "=", "np", ".", "tile", "(", "image_numpy", ",", "(", "3", ",", "1", ",", "1", ")", ")", "\n", "", "image_numpy", "=", "(", "np", ".", "transpose", "(", "image_numpy", ",", "(", "1", ",", "2", ",", "0", ")", ")", "+", "1", ")", "/", "2.0", "*", "255.0", "\n", "", "else", ":", "\n", "        ", "image_numpy", "=", "input_image", "\n", "", "image_numpy", "=", "image_numpy", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "image_pil", "=", "Image", ".", "fromarray", "(", "image_numpy", ")", "\n", "image_pil", ".", "save", "(", "image_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.util.html.HTML.__init__": [[7, 21], ["os.path.join", "dominate.document", "os.path.exists", "os.makedirs", "os.path.exists", "os.makedirs", "dominate.tags.meta", "str"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "web_dir", ",", "title", ",", "reflesh", "=", "0", ")", ":", "\n", "        ", "self", ".", "title", "=", "title", "\n", "self", ".", "web_dir", "=", "web_dir", "\n", "self", ".", "img_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "web_dir", ",", "'images'", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "web_dir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "self", ".", "web_dir", ")", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "img_dir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "self", ".", "img_dir", ")", "\n", "# print(self.img_dir)", "\n", "\n", "", "self", ".", "doc", "=", "dominate", ".", "document", "(", "title", "=", "title", ")", "\n", "if", "reflesh", ">", "0", ":", "\n", "            ", "with", "self", ".", "doc", ".", "head", ":", "\n", "                ", "meta", "(", "http_equiv", "=", "\"reflesh\"", ",", "content", "=", "str", "(", "reflesh", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.util.html.HTML.get_image_dir": [[22, 24], ["None"], "methods", ["None"], ["", "", "", "def", "get_image_dir", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "img_dir", "\n", "\n"]], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.util.html.HTML.add_header": [[25, 28], ["dominate.tags.h3"], "methods", ["None"], ["", "def", "add_header", "(", "self", ",", "str", ")", ":", "\n", "        ", "with", "self", ".", "doc", ":", "\n", "            ", "h3", "(", "str", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.util.html.HTML.add_table": [[29, 32], ["dominate.tags.table", "html.HTML.doc.add"], "methods", ["None"], ["", "", "def", "add_table", "(", "self", ",", "border", "=", "1", ")", ":", "\n", "        ", "self", ".", "t", "=", "table", "(", "border", "=", "border", ",", "style", "=", "\"table-layout: fixed;\"", ")", "\n", "self", ".", "doc", ".", "add", "(", "self", ".", "t", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.util.html.HTML.add_images": [[33, 44], ["html.HTML.add_table", "dominate.tags.tr", "zip", "dominate.tags.td", "dominate.tags.p", "dominate.tags.br", "dominate.tags.p", "dominate.tags.a", "dominate.tags.img", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.util.html.HTML.add_table"], ["", "def", "add_images", "(", "self", ",", "ims", ",", "txts", ",", "links", ",", "width", "=", "400", ")", ":", "\n", "        ", "self", ".", "add_table", "(", ")", "\n", "with", "self", ".", "t", ":", "\n", "            ", "with", "tr", "(", ")", ":", "\n", "                ", "for", "im", ",", "txt", ",", "link", "in", "zip", "(", "ims", ",", "txts", ",", "links", ")", ":", "\n", "                    ", "with", "td", "(", "style", "=", "\"word-wrap: break-word;\"", ",", "halign", "=", "\"center\"", ",", "valign", "=", "\"top\"", ")", ":", "\n", "                        ", "with", "p", "(", ")", ":", "\n", "                            ", "with", "a", "(", "href", "=", "os", ".", "path", ".", "join", "(", "'images'", ",", "link", ")", ")", ":", "\n", "                                ", "img", "(", "style", "=", "\"width:%dpx\"", "%", "width", ",", "src", "=", "os", ".", "path", ".", "join", "(", "'images'", ",", "im", ")", ")", "\n", "", "br", "(", ")", "\n", "p", "(", "txt", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.util.html.HTML.save": [[45, 50], ["open", "open.write", "open.close", "html.HTML.doc.render"], "methods", ["None"], ["", "", "", "", "", "", "def", "save", "(", "self", ")", ":", "\n", "        ", "html_file", "=", "'%s/index.html'", "%", "self", ".", "web_dir", "\n", "f", "=", "open", "(", "html_file", ",", "'wt'", ")", "\n", "f", ".", "write", "(", "self", ".", "doc", ".", "render", "(", ")", ")", "\n", "f", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.util.image_pool.ImagePool.__init__": [[6, 11], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "pool_size", ")", ":", "\n", "        ", "self", ".", "pool_size", "=", "pool_size", "\n", "if", "self", ".", "pool_size", ">", "0", ":", "\n", "            ", "self", ".", "num_imgs", "=", "0", "\n", "self", ".", "images", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.util.image_pool.ImagePool.query": [[12, 33], ["torch.cat", "torch.unsqueeze", "image_pool.ImagePool.images.append", "torch.cat.append", "random.uniform", "random.randint", "image_pool.ImagePool.images[].clone", "torch.cat.append", "torch.cat.append"], "methods", ["None"], ["", "", "def", "query", "(", "self", ",", "images", ")", ":", "\n", "        ", "if", "self", ".", "pool_size", "==", "0", ":", "\n", "            ", "return", "images", "\n", "", "return_images", "=", "[", "]", "\n", "for", "image", "in", "images", ":", "\n", "            ", "image", "=", "torch", ".", "unsqueeze", "(", "image", ".", "data", ",", "0", ")", "\n", "if", "self", ".", "num_imgs", "<", "self", ".", "pool_size", ":", "\n", "                ", "self", ".", "num_imgs", "=", "self", ".", "num_imgs", "+", "1", "\n", "self", ".", "images", ".", "append", "(", "image", ")", "\n", "return_images", ".", "append", "(", "image", ")", "\n", "", "else", ":", "\n", "                ", "p", "=", "random", ".", "uniform", "(", "0", ",", "1", ")", "\n", "if", "p", ">", "0.5", ":", "\n", "                    ", "random_id", "=", "random", ".", "randint", "(", "0", ",", "self", ".", "pool_size", "-", "1", ")", "# randint is inclusive", "\n", "tmp", "=", "self", ".", "images", "[", "random_id", "]", ".", "clone", "(", ")", "\n", "self", ".", "images", "[", "random_id", "]", "=", "image", "\n", "return_images", ".", "append", "(", "tmp", ")", "\n", "", "else", ":", "\n", "                    ", "return_images", ".", "append", "(", "image", ")", "\n", "", "", "", "return_images", "=", "torch", ".", "cat", "(", "return_images", ",", "0", ")", "\n", "return", "return_images", "\n", "", "", ""]], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.util.visualizer.Visualizer.__init__": [[49, 70], ["os.path.join", "visdom.Visdom", "os.path.join", "os.path.join", "print", "util.mkdirs", "open", "time.strftime", "log_file.write"], "methods", ["home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.util.util.mkdirs"], ["    ", "def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "        ", "self", ".", "display_id", "=", "opt", ".", "display_id", "\n", "self", ".", "use_html", "=", "opt", ".", "isTrain", "and", "not", "opt", ".", "no_html", "\n", "self", ".", "win_size", "=", "opt", ".", "display_winsize", "\n", "self", ".", "name", "=", "opt", ".", "name", "\n", "self", ".", "opt", "=", "opt", "\n", "self", ".", "saved", "=", "False", "\n", "if", "self", ".", "display_id", ">", "0", ":", "\n", "            ", "import", "visdom", "\n", "self", ".", "ncols", "=", "opt", ".", "display_ncols", "\n", "self", ".", "vis", "=", "visdom", ".", "Visdom", "(", "server", "=", "opt", ".", "display_server", ",", "port", "=", "opt", ".", "display_port", ",", "env", "=", "opt", ".", "display_env", ",", "raise_exceptions", "=", "True", ")", "\n", "\n", "", "if", "self", ".", "use_html", ":", "\n", "            ", "self", ".", "web_dir", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "checkpoints_dir", ",", "opt", ".", "name", ",", "'web'", ")", "\n", "self", ".", "img_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "web_dir", ",", "'images'", ")", "\n", "print", "(", "'create web directory %s...'", "%", "self", ".", "web_dir", ")", "\n", "util", ".", "mkdirs", "(", "[", "self", ".", "web_dir", ",", "self", ".", "img_dir", "]", ")", "\n", "", "self", ".", "log_name", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "checkpoints_dir", ",", "opt", ".", "name", ",", "'loss_log.txt'", ")", "\n", "with", "open", "(", "self", ".", "log_name", ",", "\"a\"", ")", "as", "log_file", ":", "\n", "            ", "now", "=", "time", ".", "strftime", "(", "\"%c\"", ")", "\n", "log_file", ".", "write", "(", "'================ Training Loss (%s) ================\\n'", "%", "now", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.util.visualizer.Visualizer.reset": [[71, 73], ["None"], "methods", ["None"], ["", "", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "saved", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.util.visualizer.Visualizer.throw_visdom_connection_error": [[74, 77], ["print", "exit"], "methods", ["None"], ["", "def", "throw_visdom_connection_error", "(", "self", ")", ":", "\n", "        ", "print", "(", "'\\n\\nCould not connect to Visdom server (https://github.com/facebookresearch/visdom) for displaying training progress.\\nYou can suppress connection to Visdom using the option --display_id -1. To install visdom, run \\n$ pip install visdom\\n, and start the server by \\n$ python -m visdom.server.\\n\\n'", ")", "\n", "exit", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.util.visualizer.Visualizer.display_current_results": [[79, 152], ["visuals.items", "html.HTML", "range", "html.HTML.save", "min", "int", "visuals.items", "visuals.items", "util.tensor2im", "os.path.join", "util.save_image", "html.HTML.add_header", "visuals.items", "html.HTML.add_images", "len", "util.tensor2im", "scipy.misc.imresize", "util.tensor2im.transpose", "images.append", "numpy.ones_like", "images.append", "visualizer.Visualizer.vis.images", "visualizer.Visualizer.vis.text", "util.tensor2im", "visualizer.Visualizer.vis.image", "util.tensor2im", "ims.append", "txts.append", "links.append", "next", "float", "visualizer.Visualizer.throw_visdom_connection_error", "util.tensor2im.transpose", "iter", "dict", "dict", "dict", "visuals.values"], "methods", ["home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.util.html.HTML.save", "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.util.util.tensor2im", "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.util.util.save_image", "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.util.html.HTML.add_header", "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.util.html.HTML.add_images", "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.util.util.tensor2im", "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.util.util.tensor2im", "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.util.util.tensor2im", "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.util.visualizer.Visualizer.throw_visdom_connection_error"], ["", "def", "display_current_results", "(", "self", ",", "visuals", ",", "epoch", ",", "save_result", ",", "aspect_ratio", "=", "1.0", ",", "width", "=", "256", ")", ":", "\n", "        ", "if", "self", ".", "display_id", ">", "0", ":", "# show images in the browser", "\n", "            ", "ncols", "=", "self", ".", "ncols", "\n", "if", "ncols", ">", "0", ":", "\n", "                ", "ncols", "=", "min", "(", "ncols", ",", "len", "(", "visuals", ")", ")", "\n", "h", ",", "w", "=", "next", "(", "iter", "(", "visuals", ".", "values", "(", ")", ")", ")", ".", "shape", "[", "2", ":", "4", "]", "\n", "height", "=", "int", "(", "width", "*", "h", "/", "float", "(", "w", ")", ")", "\n", "h", "=", "height", "\n", "w", "=", "width", "\n", "table_css", "=", "\"\"\"<style>\n                        table {border-collapse: separate; border-spacing:4px; white-space:nowrap; text-align:center}\n                        table td {width: %dpx; height: %dpx; padding: 4px; outline: 4px solid black}\n                        </style>\"\"\"", "%", "(", "w", ",", "h", ")", "\n", "title", "=", "self", ".", "name", "\n", "label_html", "=", "''", "\n", "label_html_row", "=", "''", "\n", "images", "=", "[", "]", "\n", "idx", "=", "0", "\n", "for", "label", ",", "image", "in", "visuals", ".", "items", "(", ")", ":", "\n", "#", "\n", "                    ", "image_numpy", "=", "util", ".", "tensor2im", "(", "image", ")", "\n", "image_numpy", "=", "imresize", "(", "image_numpy", ",", "(", "h", ",", "w", ")", ",", "interp", "=", "'bicubic'", ")", "\n", "image_numpy", "=", "image_numpy", ".", "transpose", "(", "[", "2", ",", "0", ",", "1", "]", ")", "\n", "label_html_row", "+=", "'<td>%s</td>'", "%", "label", "\n", "images", ".", "append", "(", "image_numpy", ")", "\n", "idx", "+=", "1", "\n", "if", "idx", "%", "ncols", "==", "0", ":", "\n", "                        ", "label_html", "+=", "'<tr>%s</tr>'", "%", "label_html_row", "\n", "label_html_row", "=", "''", "\n", "", "", "white_image", "=", "np", ".", "ones_like", "(", "image_numpy", ")", "*", "255", "\n", "while", "idx", "%", "ncols", "!=", "0", ":", "\n", "                    ", "images", ".", "append", "(", "white_image", ")", "\n", "label_html_row", "+=", "'<td></td>'", "\n", "idx", "+=", "1", "\n", "", "if", "label_html_row", "!=", "''", ":", "\n", "                    ", "label_html", "+=", "'<tr>%s</tr>'", "%", "label_html_row", "\n", "# pane col = image row", "\n", "", "try", ":", "\n", "                    ", "self", ".", "vis", ".", "images", "(", "images", ",", "nrow", "=", "ncols", ",", "win", "=", "self", ".", "display_id", "+", "1", ",", "padding", "=", "2", ",", "opts", "=", "dict", "(", "title", "=", "title", "+", "' images'", ")", ")", "\n", "label_html", "=", "'<table>%s</table>'", "%", "label_html", "\n", "self", ".", "vis", ".", "text", "(", "table_css", "+", "label_html", ",", "win", "=", "self", ".", "display_id", "+", "2", ",", "\n", "opts", "=", "dict", "(", "title", "=", "title", "+", "' labels'", ")", ")", "\n", "", "except", "VisdomExceptionBase", ":", "\n", "                    ", "self", ".", "throw_visdom_connection_error", "(", ")", "\n", "\n", "", "", "else", ":", "\n", "                ", "idx", "=", "1", "\n", "for", "label", ",", "image", "in", "visuals", ".", "items", "(", ")", ":", "\n", "                    ", "image_numpy", "=", "util", ".", "tensor2im", "(", "image", ")", "\n", "self", ".", "vis", ".", "image", "(", "image_numpy", ".", "transpose", "(", "[", "2", ",", "0", ",", "1", "]", ")", ",", "opts", "=", "dict", "(", "title", "=", "label", ")", ",", "\n", "win", "=", "self", ".", "display_id", "+", "idx", ")", "\n", "idx", "+=", "1", "\n", "\n", "", "", "", "if", "self", ".", "use_html", "and", "(", "save_result", "or", "not", "self", ".", "saved", ")", ":", "# save images to a html file", "\n", "            ", "self", ".", "saved", "=", "True", "\n", "for", "label", ",", "image", "in", "visuals", ".", "items", "(", ")", ":", "\n", "                ", "image_numpy", "=", "util", ".", "tensor2im", "(", "image", ")", "\n", "img_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "img_dir", ",", "'epoch%.3d_%s.png'", "%", "(", "epoch", ",", "label", ")", ")", "\n", "util", ".", "save_image", "(", "image_numpy", ",", "img_path", ")", "\n", "# update website", "\n", "", "webpage", "=", "html", ".", "HTML", "(", "self", ".", "web_dir", ",", "'Experiment name = %s'", "%", "self", ".", "name", ",", "reflesh", "=", "1", ")", "\n", "for", "n", "in", "range", "(", "epoch", ",", "0", ",", "-", "1", ")", ":", "\n", "                ", "webpage", ".", "add_header", "(", "'epoch [%d]'", "%", "n", ")", "\n", "ims", ",", "txts", ",", "links", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "\n", "for", "label", ",", "image_numpy", "in", "visuals", ".", "items", "(", ")", ":", "\n", "                    ", "image_numpy", "=", "util", ".", "tensor2im", "(", "image", ")", "\n", "img_path", "=", "'epoch%.3d_%s.png'", "%", "(", "n", ",", "label", ")", "\n", "ims", ".", "append", "(", "img_path", ")", "\n", "txts", ".", "append", "(", "label", ")", "\n", "links", ".", "append", "(", "img_path", ")", "\n", "", "webpage", ".", "add_images", "(", "ims", ",", "txts", ",", "links", ",", "width", "=", "self", ".", "win_size", ")", "\n", "", "webpage", ".", "save", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.util.visualizer.Visualizer.plot_current_losses": [[154, 171], ["visualizer.Visualizer.plot_data[].append", "visualizer.Visualizer.plot_data[].append", "hasattr", "visualizer.Visualizer.vis.line", "list", "visualizer.Visualizer.throw_visdom_connection_error", "losses.keys", "numpy.stack", "numpy.array", "len", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.util.visualizer.Visualizer.throw_visdom_connection_error"], ["", "", "def", "plot_current_losses", "(", "self", ",", "epoch", ",", "counter_ratio", ",", "opt", ",", "losses", ")", ":", "\n", "        ", "if", "not", "hasattr", "(", "self", ",", "'plot_data'", ")", ":", "\n", "            ", "self", ".", "plot_data", "=", "{", "'X'", ":", "[", "]", ",", "'Y'", ":", "[", "]", ",", "'legend'", ":", "list", "(", "losses", ".", "keys", "(", ")", ")", "}", "\n", "", "self", ".", "plot_data", "[", "'X'", "]", ".", "append", "(", "epoch", "+", "counter_ratio", ")", "\n", "self", ".", "plot_data", "[", "'Y'", "]", ".", "append", "(", "[", "losses", "[", "k", "]", "for", "k", "in", "self", ".", "plot_data", "[", "'legend'", "]", "]", ")", "\n", "try", ":", "\n", "            ", "self", ".", "vis", ".", "line", "(", "\n", "X", "=", "np", ".", "stack", "(", "[", "np", ".", "array", "(", "self", ".", "plot_data", "[", "'X'", "]", ")", "]", "*", "len", "(", "self", ".", "plot_data", "[", "'legend'", "]", ")", ",", "1", ")", ",", "\n", "Y", "=", "np", ".", "array", "(", "self", ".", "plot_data", "[", "'Y'", "]", ")", ",", "\n", "opts", "=", "{", "\n", "'title'", ":", "self", ".", "name", "+", "' loss over time'", ",", "\n", "'legend'", ":", "self", ".", "plot_data", "[", "'legend'", "]", ",", "\n", "'xlabel'", ":", "'epoch'", ",", "\n", "'ylabel'", ":", "'loss'", "}", ",", "\n", "win", "=", "self", ".", "display_id", ")", "\n", "", "except", "VisdomExceptionBase", ":", "\n", "            ", "self", ".", "throw_visdom_connection_error", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.util.visualizer.Visualizer.print_current_losses": [[173, 181], ["losses.items", "print", "open", "log_file.write"], "methods", ["None"], ["", "", "def", "print_current_losses", "(", "self", ",", "epoch", ",", "i", ",", "losses", ",", "t", ",", "t_data", ")", ":", "\n", "        ", "message", "=", "'(epoch: %d, iters: %d, time: %.3f, data: %.3f) '", "%", "(", "epoch", ",", "i", ",", "t", ",", "t_data", ")", "\n", "for", "k", ",", "v", "in", "losses", ".", "items", "(", ")", ":", "\n", "            ", "message", "+=", "'%s: %.3f '", "%", "(", "k", ",", "v", ")", "\n", "\n", "", "print", "(", "message", ")", "\n", "with", "open", "(", "self", ".", "log_name", ",", "\"a\"", ")", "as", "log_file", ":", "\n", "            ", "log_file", ".", "write", "(", "'%s\\n'", "%", "message", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.util.visualizer.Visualizer.plot_current_validation_error": [[188, 205], ["visualizer.Visualizer.plot_validation_data[].append", "visualizer.Visualizer.plot_validation_data[].append", "hasattr", "visualizer.Visualizer.vis.line", "list", "visualizer.Visualizer.throw_visdom_connection_error", "losses.keys", "numpy.stack", "numpy.array", "len", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.util.visualizer.Visualizer.throw_visdom_connection_error"], ["", "", "def", "plot_current_validation_error", "(", "self", ",", "epoch", ",", "counter_ratio", ",", "losses", ")", ":", "\n", "        ", "if", "not", "hasattr", "(", "self", ",", "'plot_validation_data'", ")", ":", "\n", "            ", "self", ".", "plot_validation_data", "=", "{", "'X'", ":", "[", "]", ",", "'Y'", ":", "[", "]", ",", "'legend'", ":", "list", "(", "losses", ".", "keys", "(", ")", ")", "}", "\n", "", "self", ".", "plot_validation_data", "[", "'X'", "]", ".", "append", "(", "epoch", "+", "counter_ratio", ")", "\n", "self", ".", "plot_validation_data", "[", "'Y'", "]", ".", "append", "(", "[", "losses", "[", "k", "]", "for", "k", "in", "self", ".", "plot_validation_data", "[", "'legend'", "]", "]", ")", "\n", "try", ":", "\n", "            ", "self", ".", "vis", ".", "line", "(", "\n", "X", "=", "np", ".", "stack", "(", "[", "np", ".", "array", "(", "self", ".", "plot_validation_data", "[", "'X'", "]", ")", "]", "*", "len", "(", "self", ".", "plot_validation_data", "[", "'legend'", "]", ")", ",", "1", ")", ",", "\n", "Y", "=", "np", ".", "array", "(", "self", ".", "plot_validation_data", "[", "'Y'", "]", ")", ",", "\n", "opts", "=", "{", "\n", "'title'", ":", "self", ".", "name", "+", "' validation error over time'", ",", "\n", "'legend'", ":", "self", ".", "plot_validation_data", "[", "'legend'", "]", ",", "\n", "'xlabel'", ":", "'epoch'", ",", "\n", "'ylabel'", ":", "'error'", "}", ",", "\n", "win", "=", "self", ".", "display_id", "+", "1", ")", "\n", "", "except", "VisdomExceptionBase", ":", "\n", "            ", "self", ".", "throw_visdom_connection_error", "(", ")", "", "", "", "", ""]], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.util.visualizer.save_images": [[17, 46], ["webpage.get_image_dir", "ntpath.basename", "webpage.add_header", "visuals.items", "webpage.add_images", "os.path.splitext", "util.tensor2im", "os.path.join", "int", "scipy.misc.imresize", "util.save_image", "ims.append", "txts.append", "links.append", "float"], "function", ["home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.util.html.HTML.get_image_dir", "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.util.html.HTML.add_header", "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.util.html.HTML.add_images", "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.util.util.tensor2im", "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.util.util.save_image"], ["", "def", "save_images", "(", "webpage", ",", "visuals", ",", "image_path", ",", "aspect_ratio", "=", "1.0", ",", "width", "=", "256", ")", ":", "\n", "    ", "image_dir", "=", "webpage", ".", "get_image_dir", "(", ")", "\n", "short_path", "=", "ntpath", ".", "basename", "(", "image_path", "[", "0", "]", ")", "\n", "name", "=", "os", ".", "path", ".", "splitext", "(", "short_path", ")", "[", "0", "]", "\n", "\n", "webpage", ".", "add_header", "(", "name", ")", "\n", "ims", ",", "txts", ",", "links", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "\n", "for", "label", ",", "im_data", "in", "visuals", ".", "items", "(", ")", ":", "\n", "        ", "im", "=", "util", ".", "tensor2im", "(", "im_data", ")", "\n", "image_name", "=", "'%s_%s.png'", "%", "(", "name", ",", "label", ")", "\n", "save_path", "=", "os", ".", "path", ".", "join", "(", "image_dir", ",", "image_name", ")", "\n", "h", ",", "w", ",", "_", "=", "im", ".", "shape", "\n", "\n", "height", "=", "int", "(", "width", "*", "h", "/", "float", "(", "w", ")", ")", "\n", "im", "=", "imresize", "(", "im", ",", "(", "height", ",", "width", ")", ",", "interp", "=", "'bicubic'", ")", "\n", "\n", "#im = imresize(im, (height,widht), interp='bicubic')", "\n", "#if aspect_ratio > 1.0:", "\n", "#    im = imresize(im, (h, int(w * aspect_ratio)), interp='bicubic')", "\n", "#if aspect_ratio < 1.0:", "\n", "#    im = imresize(im, (int(h / aspect_ratio), w), interp='bicubic')", "\n", "\n", "util", ".", "save_image", "(", "im", ",", "save_path", ")", "\n", "\n", "ims", ".", "append", "(", "image_name", ")", "\n", "txts", ".", "append", "(", "label", ")", "\n", "links", ".", "append", "(", "image_name", ")", "\n", "", "webpage", ".", "add_images", "(", "ims", ",", "txts", ",", "links", ",", "width", "=", "width", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.util.get_data.GetData.__init__": [[29, 36], ["url_dict.get", "technique.lower"], "methods", ["home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.util.get_data.GetData.get"], ["def", "__init__", "(", "self", ",", "technique", "=", "'cyclegan'", ",", "verbose", "=", "True", ")", ":", "\n", "        ", "url_dict", "=", "{", "\n", "'pix2pix'", ":", "'https://people.eecs.berkeley.edu/~tinghuiz/projects/pix2pix/datasets'", ",", "\n", "'cyclegan'", ":", "'https://people.eecs.berkeley.edu/~taesung_park/CycleGAN/datasets'", "\n", "}", "\n", "self", ".", "url", "=", "url_dict", ".", "get", "(", "technique", ".", "lower", "(", ")", ")", "\n", "self", ".", "_verbose", "=", "verbose", "\n", "\n"]], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.util.get_data.GetData._print": [[37, 40], ["print"], "methods", ["None"], ["", "def", "_print", "(", "self", ",", "text", ")", ":", "\n", "        ", "if", "self", ".", "_verbose", ":", "\n", "            ", "print", "(", "text", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.util.get_data.GetData._get_options": [[41, 47], ["bs4.BeautifulSoup", "bs4.BeautifulSoup.find_all", "h.text.endswith"], "methods", ["None"], ["", "", "@", "staticmethod", "\n", "def", "_get_options", "(", "r", ")", ":", "\n", "        ", "soup", "=", "BeautifulSoup", "(", "r", ".", "text", ",", "'lxml'", ")", "\n", "options", "=", "[", "h", ".", "text", "for", "h", "in", "soup", ".", "find_all", "(", "'a'", ",", "href", "=", "True", ")", "\n", "if", "h", ".", "text", ".", "endswith", "(", "(", "'.zip'", ",", "'tar.gz'", ")", ")", "]", "\n", "return", "options", "\n", "\n"]], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.util.get_data.GetData._present_options": [[48, 57], ["requests.get", "get_data.GetData._get_options", "print", "enumerate", "input", "print", "int"], "methods", ["home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.util.get_data.GetData.get", "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.util.get_data.GetData._get_options"], ["", "def", "_present_options", "(", "self", ")", ":", "\n", "        ", "r", "=", "requests", ".", "get", "(", "self", ".", "url", ")", "\n", "options", "=", "self", ".", "_get_options", "(", "r", ")", "\n", "print", "(", "'Options:\\n'", ")", "\n", "for", "i", ",", "o", "in", "enumerate", "(", "options", ")", ":", "\n", "            ", "print", "(", "\"{0}: {1}\"", ".", "format", "(", "i", ",", "o", ")", ")", "\n", "", "choice", "=", "input", "(", "\"\\nPlease enter the number of the \"", "\n", "\"dataset above you wish to download:\"", ")", "\n", "return", "options", "[", "int", "(", "choice", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.util.get_data.GetData._download_data": [[58, 80], ["os.path.basename", "os.path.join", "os.path.basename.endswith", "get_data.GetData._print", "zipfile.ZipFile.extractall", "zipfile.ZipFile.close", "os.remove", "os.path.isdir", "os.makedirs", "open", "requests.get", "f.write", "tarfile.open", "os.path.basename.endswith", "zipfile.ZipFile", "ValueError"], "methods", ["home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.util.get_data.GetData._print", "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.util.get_data.GetData.get"], ["", "def", "_download_data", "(", "self", ",", "dataset_url", ",", "save_path", ")", ":", "\n", "        ", "if", "not", "isdir", "(", "save_path", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "save_path", ")", "\n", "\n", "", "base", "=", "basename", "(", "dataset_url", ")", "\n", "temp_save_path", "=", "join", "(", "save_path", ",", "base", ")", "\n", "\n", "with", "open", "(", "temp_save_path", ",", "\"wb\"", ")", "as", "f", ":", "\n", "            ", "r", "=", "requests", ".", "get", "(", "dataset_url", ")", "\n", "f", ".", "write", "(", "r", ".", "content", ")", "\n", "\n", "", "if", "base", ".", "endswith", "(", "'.tar.gz'", ")", ":", "\n", "            ", "obj", "=", "tarfile", ".", "open", "(", "temp_save_path", ")", "\n", "", "elif", "base", ".", "endswith", "(", "'.zip'", ")", ":", "\n", "            ", "obj", "=", "ZipFile", "(", "temp_save_path", ",", "'r'", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Unknown File Type: {0}.\"", ".", "format", "(", "base", ")", ")", "\n", "\n", "", "self", ".", "_print", "(", "\"Unpacking Data...\"", ")", "\n", "obj", ".", "extractall", "(", "save_path", ")", "\n", "obj", ".", "close", "(", ")", "\n", "os", ".", "remove", "(", "temp_save_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.util.get_data.GetData.get": [[81, 116], ["os.path.join", "os.path.isdir", "os.path.abspath", "get_data.GetData._present_options", "warnings.warn", "get_data.GetData._print", "get_data.GetData._download_data", "get_data.GetData.split"], "methods", ["home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.util.get_data.GetData._present_options", "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.util.get_data.GetData._print", "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.util.get_data.GetData._download_data"], ["", "def", "get", "(", "self", ",", "save_path", ",", "dataset", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n\n        Download a dataset.\n\n        Args:\n            save_path : str\n                A directory to save the data to.\n            dataset : str, optional\n                A specific dataset to download.\n                Note: this must include the file extension.\n                If None, options will be presented for you\n                to choose from.\n\n        Returns:\n            save_path_full : str\n                The absolute path to the downloaded data.\n\n        \"\"\"", "\n", "if", "dataset", "is", "None", ":", "\n", "            ", "selected_dataset", "=", "self", ".", "_present_options", "(", ")", "\n", "", "else", ":", "\n", "            ", "selected_dataset", "=", "dataset", "\n", "\n", "", "save_path_full", "=", "join", "(", "save_path", ",", "selected_dataset", ".", "split", "(", "'.'", ")", "[", "0", "]", ")", "\n", "\n", "if", "isdir", "(", "save_path_full", ")", ":", "\n", "            ", "warn", "(", "\"\\n'{0}' already exists. Voiding Download.\"", ".", "format", "(", "\n", "save_path_full", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "_print", "(", "'Downloading Data...'", ")", "\n", "url", "=", "\"{0}/{1}\"", ".", "format", "(", "self", ".", "url", ",", "selected_dataset", ")", "\n", "self", ".", "_download_data", "(", "url", ",", "save_path", "=", "save_path", ")", "\n", "\n", "", "return", "abspath", "(", "save_path_full", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.util.util.load_exr": [[11, 29], ["OpenEXR.InputFile", "Imath.PixelType", "OpenEXR.InputFile.channels", "numpy.array().reshape", "numpy.array().reshape", "numpy.array().reshape", "numpy.concatenate", "OpenEXR.InputFile.header", "numpy.array", "numpy.array", "numpy.array", "array.array().tolist", "array.array().tolist", "array.array().tolist", "array.array", "array.array", "array.array"], "function", ["None"], ["def", "load_exr", "(", "image_path", ")", ":", "\n", "# Open the input file", "\n", "    ", "file", "=", "OpenEXR", ".", "InputFile", "(", "image_path", ")", "\n", "\n", "# Compute the size", "\n", "dw", "=", "file", ".", "header", "(", ")", "[", "'dataWindow'", "]", "\n", "w", ",", "h", "=", "(", "dw", ".", "max", ".", "x", "-", "dw", ".", "min", ".", "x", "+", "1", ",", "dw", ".", "max", ".", "y", "-", "dw", ".", "min", ".", "y", "+", "1", ")", "\n", "\n", "# Read the three color channels as 32-bit floats", "\n", "FLOAT", "=", "Imath", ".", "PixelType", "(", "Imath", ".", "PixelType", ".", "FLOAT", ")", "\n", "#(R,G,B) = [np.array(array.array('f', file.channel(Chan, FLOAT)).tolist()).reshape((w, h, 1)) for Chan in (\"R\", \"G\", \"B\") ]", "\n", "\n", "(", "r", ",", "g", ",", "b", ")", "=", "file", ".", "channels", "(", "\"RGB\"", ")", "\n", "R", "=", "np", ".", "array", "(", "array", ".", "array", "(", "'f'", ",", "r", ")", ".", "tolist", "(", ")", ")", ".", "reshape", "(", "(", "w", ",", "h", ",", "1", ")", ")", "\n", "G", "=", "np", ".", "array", "(", "array", ".", "array", "(", "'f'", ",", "g", ")", ".", "tolist", "(", ")", ")", ".", "reshape", "(", "(", "w", ",", "h", ",", "1", ")", ")", "\n", "B", "=", "np", ".", "array", "(", "array", ".", "array", "(", "'f'", ",", "b", ")", ".", "tolist", "(", ")", ")", ".", "reshape", "(", "(", "w", ",", "h", ",", "1", ")", ")", "\n", "\n", "return", "np", ".", "concatenate", "(", "(", "R", ",", "G", ",", "B", ")", ",", "axis", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.util.util.tensor2im": [[32, 43], ["isinstance", "image_tensor[].cpu().float().numpy", "np.tile.astype", "torch.clamp", "numpy.tile", "image_tensor[].cpu().float", "numpy.transpose", "image_tensor[].cpu"], "function", ["None"], ["", "def", "tensor2im", "(", "input_image", ",", "imtype", "=", "np", ".", "uint8", ")", ":", "\n", "    ", "if", "isinstance", "(", "input_image", ",", "torch", ".", "Tensor", ")", ":", "\n", "        ", "input_image", "=", "torch", ".", "clamp", "(", "input_image", ",", "-", "1.0", ",", "1.0", ")", "\n", "image_tensor", "=", "input_image", ".", "data", "\n", "", "else", ":", "\n", "        ", "return", "input_image", "\n", "", "image_numpy", "=", "image_tensor", "[", "0", "]", ".", "cpu", "(", ")", ".", "float", "(", ")", ".", "numpy", "(", ")", "\n", "if", "image_numpy", ".", "shape", "[", "0", "]", "==", "1", ":", "\n", "        ", "image_numpy", "=", "np", ".", "tile", "(", "image_numpy", ",", "(", "3", ",", "1", ",", "1", ")", ")", "\n", "", "image_numpy", "=", "(", "np", ".", "transpose", "(", "image_numpy", ",", "(", "1", ",", "2", ",", "0", ")", ")", "+", "1", ")", "/", "2.0", "*", "255.0", "\n", "return", "image_numpy", ".", "astype", "(", "imtype", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.util.util.diagnose_network": [[45, 56], ["net.parameters", "print", "print", "torch.mean", "torch.abs"], "function", ["None"], ["", "def", "diagnose_network", "(", "net", ",", "name", "=", "'network'", ")", ":", "\n", "    ", "mean", "=", "0.0", "\n", "count", "=", "0", "\n", "for", "param", "in", "net", ".", "parameters", "(", ")", ":", "\n", "        ", "if", "param", ".", "grad", "is", "not", "None", ":", "\n", "            ", "mean", "+=", "torch", ".", "mean", "(", "torch", ".", "abs", "(", "param", ".", "grad", ".", "data", ")", ")", "\n", "count", "+=", "1", "\n", "", "", "if", "count", ">", "0", ":", "\n", "        ", "mean", "=", "mean", "/", "count", "\n", "", "print", "(", "name", ")", "\n", "print", "(", "mean", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.util.util.save_image": [[58, 61], ["PIL.Image.fromarray", "Image.fromarray.save"], "function", ["home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.util.html.HTML.save"], ["", "def", "save_image", "(", "image_numpy", ",", "image_path", ")", ":", "\n", "    ", "image_pil", "=", "Image", ".", "fromarray", "(", "image_numpy", ")", "\n", "image_pil", ".", "save", "(", "image_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.util.util.print_numpy": [[62, 70], ["x.flatten.astype", "print", "x.flatten.flatten", "print", "numpy.mean", "numpy.min", "numpy.max", "numpy.median", "numpy.std"], "function", ["None"], ["", "def", "print_numpy", "(", "x", ",", "val", "=", "True", ",", "shp", "=", "False", ")", ":", "\n", "    ", "x", "=", "x", ".", "astype", "(", "np", ".", "float64", ")", "\n", "if", "shp", ":", "\n", "        ", "print", "(", "'shape,'", ",", "x", ".", "shape", ")", "\n", "", "if", "val", ":", "\n", "        ", "x", "=", "x", ".", "flatten", "(", ")", "\n", "print", "(", "'mean = %3.3f, min = %3.3f, max = %3.3f, median = %3.3f, std=%3.3f'", "%", "(", "\n", "np", ".", "mean", "(", "x", ")", ",", "np", ".", "min", "(", "x", ")", ",", "np", ".", "max", "(", "x", ")", ",", "np", ".", "median", "(", "x", ")", ",", "np", ".", "std", "(", "x", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.util.util.mkdirs": [[72, 78], ["isinstance", "util.mkdir", "isinstance", "util.mkdir"], "function", ["home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.util.util.mkdir", "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.util.util.mkdir"], ["", "", "def", "mkdirs", "(", "paths", ")", ":", "\n", "    ", "if", "isinstance", "(", "paths", ",", "list", ")", "and", "not", "isinstance", "(", "paths", ",", "str", ")", ":", "\n", "        ", "for", "path", "in", "paths", ":", "\n", "            ", "mkdir", "(", "path", ")", "\n", "", "", "else", ":", "\n", "        ", "mkdir", "(", "paths", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.util.util.mkdir": [[80, 83], ["os.path.exists", "os.makedirs"], "function", ["None"], ["", "", "def", "mkdir", "(", "path", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "path", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.models.networks.GANLoss.__init__": [[117, 125], ["torch.Module.__init__", "networks.GANLoss.register_buffer", "networks.GANLoss.register_buffer", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.MSELoss", "torch.MSELoss", "torch.BCELoss", "torch.BCELoss"], "methods", ["home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "use_lsgan", "=", "True", ",", "target_real_label", "=", "1.0", ",", "target_fake_label", "=", "0.0", ")", ":", "\n", "        ", "super", "(", "GANLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "register_buffer", "(", "'real_label'", ",", "torch", ".", "tensor", "(", "target_real_label", ")", ")", "\n", "self", ".", "register_buffer", "(", "'fake_label'", ",", "torch", ".", "tensor", "(", "target_fake_label", ")", ")", "\n", "if", "use_lsgan", ":", "\n", "            ", "self", ".", "loss", "=", "nn", ".", "MSELoss", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "loss", "=", "nn", ".", "BCELoss", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.models.networks.GANLoss.get_target_tensor": [[126, 132], ["target_tensor.expand_as"], "methods", ["None"], ["", "", "def", "get_target_tensor", "(", "self", ",", "input", ",", "target_is_real", ")", ":", "\n", "        ", "if", "target_is_real", ":", "\n", "            ", "target_tensor", "=", "self", ".", "real_label", "\n", "", "else", ":", "\n", "            ", "target_tensor", "=", "self", ".", "fake_label", "\n", "", "return", "target_tensor", ".", "expand_as", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.models.networks.GANLoss.__call__": [[133, 136], ["networks.GANLoss.get_target_tensor", "networks.GANLoss.loss"], "methods", ["home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.models.networks.GANLoss.get_target_tensor"], ["", "def", "__call__", "(", "self", ",", "input", ",", "target_is_real", ")", ":", "\n", "        ", "target_tensor", "=", "self", ".", "get_target_tensor", "(", "input", ",", "target_is_real", ")", "\n", "return", "self", ".", "loss", "(", "input", ",", "target_tensor", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.models.networks.ResnetGenerator.__init__": [[143, 185], ["torch.Module.__init__", "range", "range", "range", "torch.Sequential", "torch.Sequential", "type", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Tanh", "torch.Tanh", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "networks.ResnetBlock", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "norm_layer", "torch.ReLU", "torch.ReLU", "int", "int"], "methods", ["home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_nc", ",", "output_nc", ",", "ngf", "=", "64", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ",", "use_dropout", "=", "False", ",", "n_blocks", "=", "6", ",", "padding_type", "=", "'reflect'", ")", ":", "\n", "        ", "assert", "(", "n_blocks", ">=", "0", ")", "\n", "super", "(", "ResnetGenerator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "input_nc", "=", "input_nc", "\n", "self", ".", "output_nc", "=", "output_nc", "\n", "self", ".", "ngf", "=", "ngf", "\n", "if", "type", "(", "norm_layer", ")", "==", "functools", ".", "partial", ":", "\n", "            ", "use_bias", "=", "norm_layer", ".", "func", "==", "nn", ".", "InstanceNorm2d", "\n", "", "else", ":", "\n", "            ", "use_bias", "=", "norm_layer", "==", "nn", ".", "InstanceNorm2d", "\n", "\n", "", "model", "=", "[", "nn", ".", "ReflectionPad2d", "(", "3", ")", ",", "\n", "nn", ".", "Conv2d", "(", "input_nc", ",", "ngf", ",", "kernel_size", "=", "7", ",", "padding", "=", "0", ",", "\n", "bias", "=", "use_bias", ")", ",", "\n", "norm_layer", "(", "ngf", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", "]", "\n", "\n", "n_downsampling", "=", "2", "\n", "for", "i", "in", "range", "(", "n_downsampling", ")", ":", "\n", "            ", "mult", "=", "2", "**", "i", "\n", "model", "+=", "[", "nn", ".", "Conv2d", "(", "ngf", "*", "mult", ",", "ngf", "*", "mult", "*", "2", ",", "kernel_size", "=", "3", ",", "\n", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "use_bias", ")", ",", "\n", "norm_layer", "(", "ngf", "*", "mult", "*", "2", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", "]", "\n", "\n", "", "mult", "=", "2", "**", "n_downsampling", "\n", "for", "i", "in", "range", "(", "n_blocks", ")", ":", "\n", "            ", "model", "+=", "[", "ResnetBlock", "(", "ngf", "*", "mult", ",", "padding_type", "=", "padding_type", ",", "norm_layer", "=", "norm_layer", ",", "use_dropout", "=", "use_dropout", ",", "use_bias", "=", "use_bias", ")", "]", "\n", "\n", "", "for", "i", "in", "range", "(", "n_downsampling", ")", ":", "\n", "            ", "mult", "=", "2", "**", "(", "n_downsampling", "-", "i", ")", "\n", "model", "+=", "[", "nn", ".", "ConvTranspose2d", "(", "ngf", "*", "mult", ",", "int", "(", "ngf", "*", "mult", "/", "2", ")", ",", "\n", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "\n", "padding", "=", "1", ",", "output_padding", "=", "1", ",", "\n", "bias", "=", "use_bias", ")", ",", "\n", "norm_layer", "(", "int", "(", "ngf", "*", "mult", "/", "2", ")", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", "]", "\n", "", "model", "+=", "[", "nn", ".", "ReflectionPad2d", "(", "3", ")", "]", "\n", "model", "+=", "[", "nn", ".", "Conv2d", "(", "ngf", ",", "output_nc", ",", "kernel_size", "=", "7", ",", "padding", "=", "0", ")", "]", "\n", "model", "+=", "[", "nn", ".", "Tanh", "(", ")", "]", "\n", "\n", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "*", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.models.networks.ResnetGenerator.forward": [[186, 188], ["networks.ResnetGenerator.model"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "self", ".", "model", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.models.networks.ResnetBlock.__init__": [[192, 195], ["torch.Module.__init__", "networks.ResnetBlock.build_conv_block"], "methods", ["home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.options.base_options.BaseOptions.__init__", "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.models.networks.ResnetBlock.build_conv_block"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "padding_type", ",", "norm_layer", ",", "use_dropout", ",", "use_bias", ")", ":", "\n", "        ", "super", "(", "ResnetBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv_block", "=", "self", ".", "build_conv_block", "(", "dim", ",", "padding_type", ",", "norm_layer", ",", "use_dropout", ",", "use_bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.models.networks.ResnetBlock.build_conv_block": [[196, 227], ["torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Dropout", "torch.Dropout", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReplicationPad2d", "torch.ReplicationPad2d", "NotImplementedError", "torch.ReplicationPad2d", "torch.ReplicationPad2d", "NotImplementedError"], "methods", ["None"], ["", "def", "build_conv_block", "(", "self", ",", "dim", ",", "padding_type", ",", "norm_layer", ",", "use_dropout", ",", "use_bias", ")", ":", "\n", "        ", "conv_block", "=", "[", "]", "\n", "p", "=", "0", "\n", "if", "padding_type", "==", "'reflect'", ":", "\n", "            ", "conv_block", "+=", "[", "nn", ".", "ReflectionPad2d", "(", "1", ")", "]", "\n", "", "elif", "padding_type", "==", "'replicate'", ":", "\n", "            ", "conv_block", "+=", "[", "nn", ".", "ReplicationPad2d", "(", "1", ")", "]", "\n", "", "elif", "padding_type", "==", "'zero'", ":", "\n", "            ", "p", "=", "1", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "'padding [%s] is not implemented'", "%", "padding_type", ")", "\n", "\n", "", "conv_block", "+=", "[", "nn", ".", "Conv2d", "(", "dim", ",", "dim", ",", "kernel_size", "=", "3", ",", "padding", "=", "p", ",", "bias", "=", "use_bias", ")", ",", "\n", "norm_layer", "(", "dim", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", "]", "\n", "if", "use_dropout", ":", "\n", "            ", "conv_block", "+=", "[", "nn", ".", "Dropout", "(", "0.5", ")", "]", "\n", "\n", "", "p", "=", "0", "\n", "if", "padding_type", "==", "'reflect'", ":", "\n", "            ", "conv_block", "+=", "[", "nn", ".", "ReflectionPad2d", "(", "1", ")", "]", "\n", "", "elif", "padding_type", "==", "'replicate'", ":", "\n", "            ", "conv_block", "+=", "[", "nn", ".", "ReplicationPad2d", "(", "1", ")", "]", "\n", "", "elif", "padding_type", "==", "'zero'", ":", "\n", "            ", "p", "=", "1", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "'padding [%s] is not implemented'", "%", "padding_type", ")", "\n", "", "conv_block", "+=", "[", "nn", ".", "Conv2d", "(", "dim", ",", "dim", ",", "kernel_size", "=", "3", ",", "padding", "=", "p", ",", "bias", "=", "use_bias", ")", ",", "\n", "norm_layer", "(", "dim", ")", "]", "\n", "\n", "return", "nn", ".", "Sequential", "(", "*", "conv_block", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.models.networks.ResnetBlock.forward": [[228, 231], ["networks.ResnetBlock.conv_block"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "x", "+", "self", ".", "conv_block", "(", "x", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.models.networks.UnetGenerator.__init__": [[238, 252], ["torch.Module.__init__", "networks.UnetSkipConnectionBlock", "range", "networks.UnetSkipConnectionBlock", "networks.UnetSkipConnectionBlock", "networks.UnetSkipConnectionBlock", "networks.UnetSkipConnectionBlock", "networks.UnetSkipConnectionBlock"], "methods", ["home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_nc", ",", "output_nc", ",", "num_downs", ",", "ngf", "=", "64", ",", "\n", "norm_layer", "=", "nn", ".", "BatchNorm2d", ",", "use_dropout", "=", "False", ")", ":", "\n", "        ", "super", "(", "UnetGenerator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# construct unet structure", "\n", "unet_block", "=", "UnetSkipConnectionBlock", "(", "ngf", "*", "8", ",", "ngf", "*", "8", ",", "input_nc", "=", "None", ",", "submodule", "=", "None", ",", "norm_layer", "=", "norm_layer", ",", "innermost", "=", "True", ")", "\n", "for", "i", "in", "range", "(", "num_downs", "-", "5", ")", ":", "\n", "            ", "unet_block", "=", "UnetSkipConnectionBlock", "(", "ngf", "*", "8", ",", "ngf", "*", "8", ",", "input_nc", "=", "None", ",", "submodule", "=", "unet_block", ",", "norm_layer", "=", "norm_layer", ",", "use_dropout", "=", "use_dropout", ")", "\n", "", "unet_block", "=", "UnetSkipConnectionBlock", "(", "ngf", "*", "4", ",", "ngf", "*", "8", ",", "input_nc", "=", "None", ",", "submodule", "=", "unet_block", ",", "norm_layer", "=", "norm_layer", ")", "\n", "unet_block", "=", "UnetSkipConnectionBlock", "(", "ngf", "*", "2", ",", "ngf", "*", "4", ",", "input_nc", "=", "None", ",", "submodule", "=", "unet_block", ",", "norm_layer", "=", "norm_layer", ")", "\n", "unet_block", "=", "UnetSkipConnectionBlock", "(", "ngf", ",", "ngf", "*", "2", ",", "input_nc", "=", "None", ",", "submodule", "=", "unet_block", ",", "norm_layer", "=", "norm_layer", ")", "\n", "unet_block", "=", "UnetSkipConnectionBlock", "(", "output_nc", ",", "ngf", ",", "input_nc", "=", "input_nc", ",", "submodule", "=", "unet_block", ",", "outermost", "=", "True", ",", "norm_layer", "=", "norm_layer", ")", "\n", "\n", "self", ".", "model", "=", "unet_block", "\n", "\n"]], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.models.networks.UnetGenerator.forward": [[253, 255], ["networks.UnetGenerator.model"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "self", ".", "model", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.models.networks.UnetSkipConnectionBlock.__init__": [[261, 305], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "norm_layer", "torch.ReLU", "torch.ReLU", "norm_layer", "torch.Sequential", "torch.Sequential", "type", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.Tanh", "torch.Tanh", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "outer_nc", ",", "inner_nc", ",", "input_nc", "=", "None", ",", "\n", "submodule", "=", "None", ",", "outermost", "=", "False", ",", "innermost", "=", "False", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ",", "use_dropout", "=", "False", ")", ":", "\n", "        ", "super", "(", "UnetSkipConnectionBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "outermost", "=", "outermost", "\n", "if", "type", "(", "norm_layer", ")", "==", "functools", ".", "partial", ":", "\n", "            ", "use_bias", "=", "norm_layer", ".", "func", "==", "nn", ".", "InstanceNorm2d", "\n", "", "else", ":", "\n", "            ", "use_bias", "=", "norm_layer", "==", "nn", ".", "InstanceNorm2d", "\n", "", "if", "input_nc", "is", "None", ":", "\n", "            ", "input_nc", "=", "outer_nc", "\n", "", "downconv", "=", "nn", ".", "Conv2d", "(", "input_nc", ",", "inner_nc", ",", "kernel_size", "=", "4", ",", "\n", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "use_bias", ")", "\n", "downrelu", "=", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", "\n", "downnorm", "=", "norm_layer", "(", "inner_nc", ")", "\n", "uprelu", "=", "nn", ".", "ReLU", "(", "True", ")", "\n", "upnorm", "=", "norm_layer", "(", "outer_nc", ")", "\n", "\n", "if", "outermost", ":", "\n", "            ", "upconv", "=", "nn", ".", "ConvTranspose2d", "(", "inner_nc", "*", "2", ",", "outer_nc", ",", "\n", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "\n", "padding", "=", "1", ")", "\n", "down", "=", "[", "downconv", "]", "\n", "up", "=", "[", "uprelu", ",", "upconv", ",", "nn", ".", "Tanh", "(", ")", "]", "\n", "model", "=", "down", "+", "[", "submodule", "]", "+", "up", "\n", "", "elif", "innermost", ":", "\n", "            ", "upconv", "=", "nn", ".", "ConvTranspose2d", "(", "inner_nc", ",", "outer_nc", ",", "\n", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "\n", "padding", "=", "1", ",", "bias", "=", "use_bias", ")", "\n", "down", "=", "[", "downrelu", ",", "downconv", "]", "\n", "up", "=", "[", "uprelu", ",", "upconv", ",", "upnorm", "]", "\n", "model", "=", "down", "+", "up", "\n", "", "else", ":", "\n", "            ", "upconv", "=", "nn", ".", "ConvTranspose2d", "(", "inner_nc", "*", "2", ",", "outer_nc", ",", "\n", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "\n", "padding", "=", "1", ",", "bias", "=", "use_bias", ")", "\n", "down", "=", "[", "downrelu", ",", "downconv", ",", "downnorm", "]", "\n", "up", "=", "[", "uprelu", ",", "upconv", ",", "upnorm", "]", "\n", "\n", "if", "use_dropout", ":", "\n", "                ", "model", "=", "down", "+", "[", "submodule", "]", "+", "up", "+", "[", "nn", ".", "Dropout", "(", "0.5", ")", "]", "\n", "", "else", ":", "\n", "                ", "model", "=", "down", "+", "[", "submodule", "]", "+", "up", "\n", "\n", "", "", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "*", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.models.networks.UnetSkipConnectionBlock.forward": [[306, 311], ["networks.UnetSkipConnectionBlock.model", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "networks.UnetSkipConnectionBlock.model"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "outermost", ":", "\n", "            ", "return", "self", ".", "model", "(", "x", ")", "\n", "", "else", ":", "\n", "            ", "return", "torch", ".", "cat", "(", "[", "x", ",", "self", ".", "model", "(", "x", ")", "]", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.models.networks.NLayerDiscriminator.__init__": [[315, 356], ["torch.Module.__init__", "range", "min", "torch.Sequential", "torch.Sequential", "type", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "min", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Sigmoid", "torch.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_nc", ",", "ndf", "=", "64", ",", "n_layers", "=", "3", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ",", "use_sigmoid", "=", "False", ")", ":", "\n", "        ", "super", "(", "NLayerDiscriminator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "type", "(", "norm_layer", ")", "==", "functools", ".", "partial", ":", "\n", "            ", "use_bias", "=", "norm_layer", ".", "func", "==", "nn", ".", "InstanceNorm2d", "\n", "", "else", ":", "\n", "            ", "use_bias", "=", "norm_layer", "==", "nn", ".", "InstanceNorm2d", "\n", "\n", "", "kw", "=", "4", "\n", "padw", "=", "1", "\n", "sequence", "=", "[", "\n", "nn", ".", "Conv2d", "(", "input_nc", ",", "ndf", ",", "kernel_size", "=", "kw", ",", "stride", "=", "2", ",", "padding", "=", "padw", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", "\n", "]", "\n", "\n", "nf_mult", "=", "1", "\n", "nf_mult_prev", "=", "1", "\n", "for", "n", "in", "range", "(", "1", ",", "n_layers", ")", ":", "\n", "            ", "nf_mult_prev", "=", "nf_mult", "\n", "nf_mult", "=", "min", "(", "2", "**", "n", ",", "8", ")", "\n", "sequence", "+=", "[", "\n", "nn", ".", "Conv2d", "(", "ndf", "*", "nf_mult_prev", ",", "ndf", "*", "nf_mult", ",", "\n", "kernel_size", "=", "kw", ",", "stride", "=", "2", ",", "padding", "=", "padw", ",", "bias", "=", "use_bias", ")", ",", "\n", "norm_layer", "(", "ndf", "*", "nf_mult", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", "\n", "]", "\n", "\n", "", "nf_mult_prev", "=", "nf_mult", "\n", "nf_mult", "=", "min", "(", "2", "**", "n_layers", ",", "8", ")", "\n", "sequence", "+=", "[", "\n", "nn", ".", "Conv2d", "(", "ndf", "*", "nf_mult_prev", ",", "ndf", "*", "nf_mult", ",", "\n", "kernel_size", "=", "kw", ",", "stride", "=", "1", ",", "padding", "=", "padw", ",", "bias", "=", "use_bias", ")", ",", "\n", "norm_layer", "(", "ndf", "*", "nf_mult", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", "\n", "]", "\n", "\n", "sequence", "+=", "[", "nn", ".", "Conv2d", "(", "ndf", "*", "nf_mult", ",", "1", ",", "kernel_size", "=", "kw", ",", "stride", "=", "1", ",", "padding", "=", "padw", ")", "]", "\n", "\n", "if", "use_sigmoid", ":", "\n", "            ", "sequence", "+=", "[", "nn", ".", "Sigmoid", "(", ")", "]", "\n", "\n", "", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "*", "sequence", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.models.networks.NLayerDiscriminator.forward": [[357, 359], ["networks.NLayerDiscriminator.model"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "self", ".", "model", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.models.networks.PixelDiscriminator.__init__": [[362, 381], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "type", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "networks.PixelDiscriminator.net.append", "torch.Sigmoid", "torch.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_nc", ",", "ndf", "=", "64", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ",", "use_sigmoid", "=", "False", ")", ":", "\n", "        ", "super", "(", "PixelDiscriminator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "type", "(", "norm_layer", ")", "==", "functools", ".", "partial", ":", "\n", "            ", "use_bias", "=", "norm_layer", ".", "func", "==", "nn", ".", "InstanceNorm2d", "\n", "", "else", ":", "\n", "            ", "use_bias", "=", "norm_layer", "==", "nn", ".", "InstanceNorm2d", "\n", "\n", "", "self", ".", "net", "=", "[", "\n", "nn", ".", "Conv2d", "(", "input_nc", ",", "ndf", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "ndf", ",", "ndf", "*", "2", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "use_bias", ")", ",", "\n", "norm_layer", "(", "ndf", "*", "2", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "ndf", "*", "2", ",", "1", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "use_bias", ")", "]", "\n", "\n", "if", "use_sigmoid", ":", "\n", "            ", "self", ".", "net", ".", "append", "(", "nn", ".", "Sigmoid", "(", ")", ")", "\n", "\n", "", "self", ".", "net", "=", "nn", ".", "Sequential", "(", "*", "self", ".", "net", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.models.networks.PixelDiscriminator.forward": [[382, 384], ["networks.PixelDiscriminator.net"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "self", ".", "net", "(", "input", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.models.networks.get_norm_layer": [[12, 22], ["functools.partial", "functools.partial", "NotImplementedError"], "function", ["None"], ["def", "get_norm_layer", "(", "norm_type", "=", "'instance'", ")", ":", "\n", "    ", "if", "norm_type", "==", "'batch'", ":", "\n", "        ", "norm_layer", "=", "functools", ".", "partial", "(", "nn", ".", "BatchNorm2d", ",", "affine", "=", "True", ")", "\n", "", "elif", "norm_type", "==", "'instance'", ":", "\n", "        ", "norm_layer", "=", "functools", ".", "partial", "(", "nn", ".", "InstanceNorm2d", ",", "affine", "=", "False", ",", "track_running_stats", "=", "False", ")", "\n", "", "elif", "norm_type", "==", "'none'", ":", "\n", "        ", "norm_layer", "=", "None", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'normalization layer [%s] is not found'", "%", "norm_type", ")", "\n", "", "return", "norm_layer", "\n", "\n"]], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.models.networks.get_scheduler": [[24, 39], ["torch.optim.lr_scheduler.LambdaLR", "torch.optim.lr_scheduler.StepLR", "torch.optim.lr_scheduler.ReduceLROnPlateau", "max", "float", "torch.optim.lr_scheduler.CosineAnnealingLR", "NotImplementedError"], "function", ["None"], ["", "def", "get_scheduler", "(", "optimizer", ",", "opt", ")", ":", "\n", "    ", "if", "opt", ".", "lr_policy", "==", "'lambda'", ":", "\n", "        ", "def", "lambda_rule", "(", "epoch", ")", ":", "\n", "            ", "lr_l", "=", "1.0", "-", "max", "(", "0", ",", "epoch", "+", "opt", ".", "epoch_count", "-", "opt", ".", "niter", ")", "/", "float", "(", "opt", ".", "niter_decay", "+", "1", ")", "\n", "return", "lr_l", "\n", "", "scheduler", "=", "lr_scheduler", ".", "LambdaLR", "(", "optimizer", ",", "lr_lambda", "=", "lambda_rule", ")", "\n", "", "elif", "opt", ".", "lr_policy", "==", "'step'", ":", "\n", "        ", "scheduler", "=", "lr_scheduler", ".", "StepLR", "(", "optimizer", ",", "step_size", "=", "opt", ".", "lr_decay_iters", ",", "gamma", "=", "0.1", ")", "\n", "", "elif", "opt", ".", "lr_policy", "==", "'plateau'", ":", "\n", "        ", "scheduler", "=", "lr_scheduler", ".", "ReduceLROnPlateau", "(", "optimizer", ",", "mode", "=", "'min'", ",", "factor", "=", "0.2", ",", "threshold", "=", "0.01", ",", "patience", "=", "5", ")", "\n", "", "elif", "opt", ".", "lr_policy", "==", "'cosine'", ":", "\n", "        ", "scheduler", "=", "lr_scheduler", ".", "CosineAnnealingLR", "(", "optimizer", ",", "T_max", "=", "opt", ".", "niter", ",", "eta_min", "=", "0", ")", "\n", "", "else", ":", "\n", "        ", "return", "NotImplementedError", "(", "'learning rate policy [%s] is not implemented'", ",", "opt", ".", "lr_policy", ")", "\n", "", "return", "scheduler", "\n", "\n"]], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.models.networks.init_weights": [[41, 63], ["print", "net.apply", "hasattr", "torch.nn.init.normal_", "hasattr", "torch.nn.init.constant_", "classname.find", "torch.nn.init.normal_", "torch.nn.init.constant_", "classname.find", "classname.find", "torch.nn.init.xavier_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.orthogonal_", "NotImplementedError"], "function", ["None"], ["", "def", "init_weights", "(", "net", ",", "init_type", "=", "'normal'", ",", "gain", "=", "0.02", ")", ":", "\n", "    ", "def", "init_func", "(", "m", ")", ":", "\n", "        ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "hasattr", "(", "m", ",", "'weight'", ")", "and", "(", "classname", ".", "find", "(", "'Conv'", ")", "!=", "-", "1", "or", "classname", ".", "find", "(", "'Linear'", ")", "!=", "-", "1", ")", ":", "\n", "            ", "if", "init_type", "==", "'normal'", ":", "\n", "                ", "init", ".", "normal_", "(", "m", ".", "weight", ".", "data", ",", "0.0", ",", "gain", ")", "\n", "", "elif", "init_type", "==", "'xavier'", ":", "\n", "                ", "init", ".", "xavier_normal_", "(", "m", ".", "weight", ".", "data", ",", "gain", "=", "gain", ")", "\n", "", "elif", "init_type", "==", "'kaiming'", ":", "\n", "                ", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ".", "data", ",", "a", "=", "0", ",", "mode", "=", "'fan_in'", ")", "\n", "", "elif", "init_type", "==", "'orthogonal'", ":", "\n", "                ", "init", ".", "orthogonal_", "(", "m", ".", "weight", ".", "data", ",", "gain", "=", "gain", ")", "\n", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "(", "'initialization method [%s] is not implemented'", "%", "init_type", ")", "\n", "", "if", "hasattr", "(", "m", ",", "'bias'", ")", "and", "m", ".", "bias", "is", "not", "None", ":", "\n", "                ", "init", ".", "constant_", "(", "m", ".", "bias", ".", "data", ",", "0.0", ")", "\n", "", "", "elif", "classname", ".", "find", "(", "'BatchNorm2d'", ")", "!=", "-", "1", ":", "\n", "            ", "init", ".", "normal_", "(", "m", ".", "weight", ".", "data", ",", "1.0", ",", "gain", ")", "\n", "init", ".", "constant_", "(", "m", ".", "bias", ".", "data", ",", "0.0", ")", "\n", "\n", "", "", "print", "(", "'initialize network with %s'", "%", "init_type", ")", "\n", "net", ".", "apply", "(", "init_func", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.models.networks.init_net": [[65, 72], ["networks.init_weights", "len", "torch.cuda.is_available", "torch.cuda.is_available", "net.to"], "function", ["home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.models.networks.init_weights"], ["", "def", "init_net", "(", "net", ",", "init_type", "=", "'normal'", ",", "init_gain", "=", "0.02", ",", "gpu_ids", "=", "[", "]", ")", ":", "\n", "    ", "if", "len", "(", "gpu_ids", ")", ">", "0", ":", "\n", "        ", "assert", "(", "torch", ".", "cuda", ".", "is_available", "(", ")", ")", "\n", "net", ".", "to", "(", "gpu_ids", "[", "0", "]", ")", "\n", "#net = torch.nn.DataParallel(net, gpu_ids)", "\n", "", "init_weights", "(", "net", ",", "init_type", ",", "gain", "=", "init_gain", ")", "\n", "return", "net", "\n", "\n"]], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.models.networks.define_G": [[74, 89], ["networks.get_norm_layer", "networks.init_net", "networks.ResnetGenerator", "networks.ResnetGenerator", "networks.UnetGenerator", "networks.UnetGenerator", "NotImplementedError"], "function", ["home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.models.networks.get_norm_layer", "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.models.networks.init_net"], ["", "def", "define_G", "(", "input_nc", ",", "output_nc", ",", "ngf", ",", "netG", ",", "norm", "=", "'batch'", ",", "use_dropout", "=", "False", ",", "init_type", "=", "'normal'", ",", "init_gain", "=", "0.02", ",", "gpu_ids", "=", "[", "]", ")", ":", "\n", "    ", "net", "=", "None", "\n", "norm_layer", "=", "get_norm_layer", "(", "norm_type", "=", "norm", ")", "\n", "\n", "if", "netG", "==", "'resnet_9blocks'", ":", "\n", "        ", "net", "=", "ResnetGenerator", "(", "input_nc", ",", "output_nc", ",", "ngf", ",", "norm_layer", "=", "norm_layer", ",", "use_dropout", "=", "use_dropout", ",", "n_blocks", "=", "9", ")", "\n", "", "elif", "netG", "==", "'resnet_6blocks'", ":", "\n", "        ", "net", "=", "ResnetGenerator", "(", "input_nc", ",", "output_nc", ",", "ngf", ",", "norm_layer", "=", "norm_layer", ",", "use_dropout", "=", "use_dropout", ",", "n_blocks", "=", "6", ")", "\n", "", "elif", "netG", "==", "'unet_128'", ":", "\n", "        ", "net", "=", "UnetGenerator", "(", "input_nc", ",", "output_nc", ",", "7", ",", "ngf", ",", "norm_layer", "=", "norm_layer", ",", "use_dropout", "=", "use_dropout", ")", "\n", "", "elif", "netG", "==", "'unet_256'", ":", "\n", "        ", "net", "=", "UnetGenerator", "(", "input_nc", ",", "output_nc", ",", "8", ",", "ngf", ",", "norm_layer", "=", "norm_layer", ",", "use_dropout", "=", "use_dropout", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'Generator model name [%s] is not recognized'", "%", "netG", ")", "\n", "", "return", "init_net", "(", "net", ",", "init_type", ",", "init_gain", ",", "gpu_ids", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.models.networks.define_D": [[91, 105], ["networks.get_norm_layer", "networks.init_net", "networks.NLayerDiscriminator", "networks.NLayerDiscriminator", "networks.PixelDiscriminator", "NotImplementedError"], "function", ["home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.models.networks.get_norm_layer", "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.models.networks.init_net"], ["", "def", "define_D", "(", "input_nc", ",", "ndf", ",", "netD", ",", "\n", "n_layers_D", "=", "3", ",", "norm", "=", "'batch'", ",", "use_sigmoid", "=", "False", ",", "init_type", "=", "'normal'", ",", "init_gain", "=", "0.02", ",", "gpu_ids", "=", "[", "]", ")", ":", "\n", "    ", "net", "=", "None", "\n", "norm_layer", "=", "get_norm_layer", "(", "norm_type", "=", "norm", ")", "\n", "\n", "if", "netD", "==", "'basic'", ":", "\n", "        ", "net", "=", "NLayerDiscriminator", "(", "input_nc", ",", "ndf", ",", "n_layers", "=", "3", ",", "norm_layer", "=", "norm_layer", ",", "use_sigmoid", "=", "use_sigmoid", ")", "\n", "", "elif", "netD", "==", "'n_layers'", ":", "\n", "        ", "net", "=", "NLayerDiscriminator", "(", "input_nc", ",", "ndf", ",", "n_layers_D", ",", "norm_layer", "=", "norm_layer", ",", "use_sigmoid", "=", "use_sigmoid", ")", "\n", "", "elif", "netD", "==", "'pixel'", ":", "\n", "        ", "net", "=", "PixelDiscriminator", "(", "input_nc", ",", "ndf", ",", "norm_layer", "=", "norm_layer", ",", "use_sigmoid", "=", "use_sigmoid", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'Discriminator model name [%s] is not recognized'", "%", "net", ")", "\n", "", "return", "init_net", "(", "net", ",", "init_type", ",", "init_gain", ",", "gpu_ids", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.models.audio2ExpressionsAttentionTMP4_model.ExpressionEstimator_Attention.__init__": [[20, 79], ["torch.Module.__init__", "print", "torch.Sequential", "torch.Sequential", "print", "torch.Sequential", "torch.Sequential", "audio2ExpressionsAttentionTMP4_model.ExpressionEstimator_Attention.register_parameter", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Linear", "torch.Linear", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Linear", "torch.Linear", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Linear", "torch.Linear", "torch.Tanh", "torch.Tanh", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.Conv1d", "torch.Conv1d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv1d", "torch.Conv1d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv1d", "torch.Conv1d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv1d", "torch.Conv1d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv1d", "torch.Conv1d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Linear", "torch.Linear", "torch.Softmax", "torch.Softmax", "torch.randn", "torch.randn", "torch.randn", "torch.randn"], "methods", ["home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.options.base_options.BaseOptions.__init__"], ["from", "torchvision", "import", "models", "\n", "from", "collections", "import", "namedtuple", "\n", "\n", "\n", "class", "ExpressionEstimator_Attention", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "n_output_expressions", ",", "nIdentities", ",", "seq_len", ",", "ngf", "=", "64", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ",", "use_dropout", "=", "False", ")", ":", "\n", "        ", "super", "(", "ExpressionEstimator_Attention", ",", "self", ")", ".", "__init__", "(", ")", "\n", "print", "(", "'Estimator Attention'", ")", "\n", "#################################", "\n", "########   audio net   ##########", "\n", "#################################", "\n", "self", ".", "seq_len", "=", "seq_len", "\n", "\n", "dropout_rate", "=", "0.0", "\n", "if", "use_dropout", "==", "True", ":", "\n", "#dropout_rate = 0.5", "\n", "            ", "dropout_rate", "=", "0.25", "\n", "\n", "", "self", ".", "convNet", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "29", ",", "32", ",", "kernel_size", "=", "(", "3", ",", "1", ")", ",", "stride", "=", "(", "2", ",", "1", ")", ",", "padding", "=", "(", "1", ",", "0", ")", ",", "bias", "=", "True", ")", ",", "#  29 x 16 x 1 => 32 x 8 x 1", "\n", "nn", ".", "LeakyReLU", "(", "0.02", ",", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "32", ",", "32", ",", "kernel_size", "=", "(", "3", ",", "1", ")", ",", "stride", "=", "(", "2", ",", "1", ")", ",", "padding", "=", "(", "1", ",", "0", ")", ",", "bias", "=", "True", ")", ",", "# 32 x 8 x 1 => 32 x 4 x 1", "\n", "nn", ".", "LeakyReLU", "(", "0.02", ",", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "32", ",", "64", ",", "kernel_size", "=", "(", "3", ",", "1", ")", ",", "stride", "=", "(", "2", ",", "1", ")", ",", "padding", "=", "(", "1", ",", "0", ")", ",", "bias", "=", "True", ")", ",", "# 32 x 4 x 1 => 64 x 2 x 1", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "kernel_size", "=", "(", "3", ",", "1", ")", ",", "stride", "=", "(", "2", ",", "1", ")", ",", "padding", "=", "(", "1", ",", "0", ")", ",", "bias", "=", "True", ")", ",", "# 64 x 2 x 1 => 64 x 1 x 1", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", ",", "\n", ")", "\n", "\n", "fullNet_input_size", "=", "64", "\n", "\n", "self", ".", "subspace_dim", "=", "32", "# number of audio expressions", "\n", "print", "(", "'fullNet_input_size: '", ",", "fullNet_input_size", ")", "\n", "self", ".", "fullNet", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "in_features", "=", "fullNet_input_size", ",", "out_features", "=", "128", ",", "bias", "=", "True", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.02", ")", ",", "\n", "\n", "nn", ".", "Linear", "(", "in_features", "=", "128", ",", "out_features", "=", "64", ",", "bias", "=", "True", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.02", ")", ",", "\n", "\n", "nn", ".", "Linear", "(", "in_features", "=", "64", ",", "out_features", "=", "self", ".", "subspace_dim", ",", "bias", "=", "True", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", "\n", ")", "\n", "\n", "\n", "# mapping from subspace to full expression space", "\n", "self", ".", "register_parameter", "(", "'mapping'", ",", "torch", ".", "nn", ".", "Parameter", "(", "torch", ".", "randn", "(", "1", ",", "nIdentities", ",", "N_EXPRESSIONS", ",", "self", ".", "subspace_dim", ",", "requires_grad", "=", "True", ")", ")", ")", "\n", "\n", "# attention", "\n", "self", ".", "attentionConvNet", "=", "nn", ".", "Sequential", "(", "# b x subspace_dim x seq_len", "\n", "nn", ".", "Conv1d", "(", "self", ".", "subspace_dim", ",", "16", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "True", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.02", ",", "True", ")", ",", "\n", "nn", ".", "Conv1d", "(", "16", ",", "8", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "True", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.02", ",", "True", ")", ",", "\n", "nn", ".", "Conv1d", "(", "8", ",", "4", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "True", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.02", ",", "True", ")", ",", "\n", "nn", ".", "Conv1d", "(", "4", ",", "2", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "True", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.02", ",", "True", ")", ",", "\n", "nn", ".", "Conv1d", "(", "2", ",", "1", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "True", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.02", ",", "True", ")", "\n"]], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.models.audio2ExpressionsAttentionTMP4_model.ExpressionEstimator_Attention.forward_internal": [[82, 89], ["audio2ExpressionsAttentionTMP4_model.ExpressionEstimator_Attention.getAudioExpressions_internal", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm"], "methods", ["home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.models.audio2ExpressionsAttentionTMP4_model.ExpressionEstimator_Attention.getAudioExpressions_internal"], ["nn", ".", "Linear", "(", "in_features", "=", "self", ".", "seq_len", ",", "out_features", "=", "self", ".", "seq_len", ",", "bias", "=", "True", ")", ",", "\n", "nn", ".", "Softmax", "(", "dim", "=", "1", ")", "\n", ")", "\n", "#self.hidden2subspace = nn.Linear(self.subspace_dim,self.subspace_dim)", "\n", "\n", "", "def", "forward_internal", "(", "self", ",", "audio_features_sequence", ",", "identity_id", ")", ":", "\n", "        ", "result_subspace", ",", "intermediate_expression", "=", "self", ".", "getAudioExpressions_internal", "(", "audio_features_sequence", ")", "\n", "mapping", "=", "torch", ".", "index_select", "(", "self", ".", "mapping", "[", "0", "]", ",", "dim", "=", "0", ",", "index", "=", "identity_id", ")", "\n"]], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.models.audio2ExpressionsAttentionTMP4_model.ExpressionEstimator_Attention.forward": [[90, 96], ["audio2ExpressionsAttentionTMP4_model.ExpressionEstimator_Attention.getAudioExpressions", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm"], "methods", ["home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.models.audio2ExpressionsAttentionTMP4_model.ExpressionEstimator_Attention.getAudioExpressions"], ["result", "=", "10.0", "*", "torch", ".", "bmm", "(", "mapping", ",", "result_subspace", ")", "[", ":", ",", ":", ",", "0", "]", "\n", "result_intermediate", "=", "10.0", "*", "torch", ".", "bmm", "(", "mapping", ",", "intermediate_expression", ")", "[", ":", ",", ":", ",", "0", "]", "\n", "return", "result", ",", "result_intermediate", "\n", "\n", "", "def", "forward", "(", "self", ",", "audio_features_sequence", ",", "identity_id", ")", ":", "\n", "        ", "result_subspace", "=", "self", ".", "getAudioExpressions", "(", "audio_features_sequence", ")", "\n", "mapping", "=", "torch", ".", "index_select", "(", "self", ".", "mapping", "[", "0", "]", ",", "dim", "=", "0", ",", "index", "=", "identity_id", ")", "\n"]], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.models.audio2ExpressionsAttentionTMP4_model.ExpressionEstimator_Attention.getAudioExpressions_internal": [[97, 122], ["torch.transpose.view", "torch.transpose.view", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "audio2ExpressionsAttentionTMP4_model.ExpressionEstimator_Attention.convNet", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.bmm.view", "torch.bmm.view", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "audio2ExpressionsAttentionTMP4_model.ExpressionEstimator_Attention.attentionConvNet", "audio2ExpressionsAttentionTMP4_model.ExpressionEstimator_Attention.attentionNet().view", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "audio2ExpressionsAttentionTMP4_model.ExpressionEstimator_Attention.fullNet", "torch.bmm.view", "torch.bmm.view", "audio2ExpressionsAttentionTMP4_model.ExpressionEstimator_Attention.attentionNet", "audio2ExpressionsAttentionTMP4_model.ExpressionEstimator_Attention.view"], "methods", ["None"], ["result", "=", "torch", ".", "bmm", "(", "mapping", ",", "result_subspace", ")", "[", ":", ",", ":", ",", "0", "]", "\n", "return", "10.0", "*", "result", "\n", "\n", "", "def", "getAudioExpressions_internal", "(", "self", ",", "audio_features_sequence", ")", ":", "\n", "# audio_features_sequence: b x seq_len x 16 x 29", "\n", "        ", "b", "=", "audio_features_sequence", ".", "shape", "[", "0", "]", "# batchsize", "\n", "audio_features_sequence", "=", "audio_features_sequence", ".", "view", "(", "b", "*", "self", ".", "seq_len", ",", "1", ",", "16", ",", "29", ")", "# b * seq_len x 1 x 16 x 29", "\n", "audio_features_sequence", "=", "torch", ".", "transpose", "(", "audio_features_sequence", ",", "1", ",", "3", ")", "# b* seq_len  x 29 x 16 x 1", "\n", "conv_res", "=", "self", ".", "convNet", "(", "audio_features_sequence", ")", "\n", "conv_res", "=", "torch", ".", "reshape", "(", "conv_res", ",", "(", "b", "*", "self", ".", "seq_len", ",", "1", ",", "-", "1", ")", ")", "\n", "result_subspace", "=", "self", ".", "fullNet", "(", "conv_res", ")", "[", ":", ",", "0", ",", ":", "]", "# b * seq_len x subspace_dim", "\n", "result_subspace", "=", "result_subspace", ".", "view", "(", "b", ",", "self", ".", "seq_len", ",", "self", ".", "subspace_dim", ")", "# b x seq_len x subspace_dim", "\n", "\n", "#################", "\n", "### attention ###", "\n", "################# ", "\n", "result_subspace_T", "=", "torch", ".", "transpose", "(", "result_subspace", ",", "1", ",", "2", ")", "# b x subspace_dim x seq_len", "\n", "intermediate_expression", "=", "result_subspace_T", "[", ":", ",", ":", ",", "(", "self", ".", "seq_len", "//", "2", ")", ":", "(", "self", ".", "seq_len", "//", "2", ")", "+", "1", "]", "\n", "att_conv_res", "=", "self", ".", "attentionConvNet", "(", "result_subspace_T", ")", "\n", "#print('att_conv_res', att_conv_res.shape)", "\n", "attention", "=", "self", ".", "attentionNet", "(", "att_conv_res", ".", "view", "(", "b", ",", "self", ".", "seq_len", ")", ")", ".", "view", "(", "b", ",", "self", ".", "seq_len", ",", "1", ")", "# b x seq_len x 1", "\n", "#print('attention', attention.shape)", "\n", "# pooling along the sequence dimension", "\n", "result_subspace", "=", "torch", ".", "bmm", "(", "result_subspace_T", ",", "attention", ")", "\n", "#print('result_subspace', result_subspace.shape)", "\n", "###", "\n"]], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.models.audio2ExpressionsAttentionTMP4_model.ExpressionEstimator_Attention.getAudioExpressions": [[123, 126], ["audio2ExpressionsAttentionTMP4_model.ExpressionEstimator_Attention.getAudioExpressions_internal"], "methods", ["home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.models.audio2ExpressionsAttentionTMP4_model.ExpressionEstimator_Attention.getAudioExpressions_internal"], ["\n", "return", "result_subspace", ".", "view", "(", "b", ",", "self", ".", "subspace_dim", ",", "1", ")", ",", "intermediate_expression", "\n", "\n", "", "def", "getAudioExpressions", "(", "self", ",", "audio_features_sequence", ")", ":", "\n"]], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.models.audio2ExpressionsAttentionTMP4_model.ExpressionEstimator_Attention.regularizer": [[127, 137], ["torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs"], "methods", ["None"], ["        ", "expr", ",", "_", "=", "self", ".", "getAudioExpressions_internal", "(", "audio_features_sequence", ")", "\n", "return", "expr", "\n", "\n", "", "def", "regularizer", "(", "self", ")", ":", "\n", "#reg = torch.norm(self.mapping)", "\n", "        ", "reg_mapping", "=", "torch", ".", "mean", "(", "torch", ".", "abs", "(", "self", ".", "mapping", ")", ")", "\n", "\n", "# one could also enforce orthogonality here", "\n", "\n", "# s_browExpressions[] = { 32, 41, 71, 72, 73, 74, 75 };", "\n", "reg_eye_brow", "=", "torch", ".", "mean", "(", "torch", ".", "abs", "(", "self", ".", "mapping", "[", "0", ",", ":", ",", "[", "32", ",", "41", ",", "71", ",", "72", ",", "73", ",", "74", ",", "75", "]", ",", ":", "]", ")", ")", "\n"]], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.models.audio2ExpressionsAttentionTMP4_model.Audio2ExpressionsAttentionTMP4Model.name": [[149, 151], ["None"], "methods", ["None"], ["\n", "\n", "", "class", "Audio2ExpressionsAttentionTMP4Model", "(", "BaseModel", ")", ":", "\n"]], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.models.audio2ExpressionsAttentionTMP4_model.Audio2ExpressionsAttentionTMP4Model.modify_commandline_options": [[152, 165], ["parser.set_defaults", "parser.set_defaults", "parser.set_defaults", "parser.add_argument"], "methods", ["None"], ["    ", "def", "name", "(", "self", ")", ":", "\n", "        ", "return", "'Audio2ExpressionsAttentionTMP4Model'", "\n", "\n", "", "@", "staticmethod", "\n", "def", "modify_commandline_options", "(", "parser", ",", "is_train", "=", "True", ")", ":", "\n", "\n", "# changing the default values to match the pix2pix paper", "\n", "# (https://phillipi.github.io/pix2pix/)", "\n", "#parser.set_defaults(norm='batch', netG='unet_256')", "\n", "        ", "parser", ".", "set_defaults", "(", "norm", "=", "'instance'", ",", "netG", "=", "'unet_256'", ")", "\n", "parser", ".", "set_defaults", "(", "dataset_mode", "=", "'aligned'", ")", "\n", "if", "is_train", ":", "\n", "            ", "parser", ".", "set_defaults", "(", "pool_size", "=", "0", ",", "no_lsgan", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "'--lambda_L1'", ",", "type", "=", "float", ",", "default", "=", "100.0", ",", "help", "=", "'weight for L1 loss'", ")", "\n"]], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.models.audio2ExpressionsAttentionTMP4_model.Audio2ExpressionsAttentionTMP4Model.initialize": [[166, 213], ["base_model.BaseModel.initialize", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "audio2ExpressionsAttentionTMP4_model.define_ExpressionEstimator", "MorphableModel", "audio2ExpressionsAttentionTMP4_model.Audio2ExpressionsAttentionTMP4Model.morphable_model.LoadMask", "util.image_pool.ImagePool", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.SmoothL1Loss", "torch.nn.SmoothL1Loss", "torch.nn.SmoothL1Loss", "torch.nn.SmoothL1Loss", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "audio2ExpressionsAttentionTMP4_model.Audio2ExpressionsAttentionTMP4Model.optimizers.append", "audio2ExpressionsAttentionTMP4_model.Audio2ExpressionsAttentionTMP4Model.netG.parameters"], "methods", ["home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.options.base_options.BaseOptions.initialize", "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.models.audio2ExpressionsAttentionTMP4_model.define_ExpressionEstimator", "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.BaselModel.basel_model.MorphableModel.LoadMask"], ["\n", "", "return", "parser", "\n", "\n", "", "def", "initialize", "(", "self", ",", "opt", ")", ":", "\n", "        ", "BaseModel", ".", "initialize", "(", "self", ",", "opt", ")", "\n", "self", ".", "isTrain", "=", "opt", ".", "isTrain", "\n", "\n", "self", ".", "trainRenderer", "=", "not", "opt", ".", "fix_renderer", "\n", "\n", "# specify the training losses you want to print out. The program will call base_model.get_current_losses", "\n", "self", ".", "loss_names", "=", "[", "'G_L1'", ",", "'G_L1_ABSOLUTE'", ",", "'G_L1_RELATIVE'", ",", "'G_Regularizer'", "]", "\n", "\n", "# specify the images you want to save/display. The program will call base_model.get_current_visuals", "\n", "#self.visual_names = ['input_uv', 'fake', 'target']", "\n", "self", ".", "visual_names", "=", "[", "'zeros'", "]", "\n", "self", ".", "zeros", "=", "torch", ".", "zeros", "(", "1", ",", "3", ",", "2", ",", "2", ")", "\n", "\n", "# specify the models you want to save to the disk. The program will call base_model.save_networks and base_model.load_networks", "\n", "if", "self", ".", "isTrain", ":", "\n", "            ", "self", ".", "model_names", "=", "[", "'netG'", "]", "\n", "", "else", ":", "# during test time, only load Gs", "\n", "            ", "self", ".", "model_names", "=", "[", "'netG'", "]", "\n", "\n", "", "self", ".", "fake_expressions", "=", "None", "\n", "self", ".", "fake_expressions_prv", "=", "None", "\n", "self", ".", "fake_expressions_nxt", "=", "None", "\n", "\n", "self", ".", "morphable_model", "=", "MorphableModel", "(", ")", "\n", "self", ".", "mask", "=", "self", ".", "morphable_model", ".", "LoadMask", "(", ")", "\n", "\n", "nIdentities", "=", "opt", ".", "nTrainObjects", "\n", "\n", "# load/define networks", "\n", "self", ".", "netG", "=", "define_ExpressionEstimator", "(", "estimatorType", "=", "opt", ".", "rendererType", ",", "nIdentities", "=", "nIdentities", ",", "seq_len", "=", "opt", ".", "seq_len", ",", "gpu_ids", "=", "self", ".", "gpu_ids", ")", "\n", "\n", "if", "self", ".", "isTrain", ":", "\n", "            ", "use_sigmoid", "=", "opt", ".", "no_lsgan", "\n", "self", ".", "fake_AB_pool", "=", "ImagePool", "(", "opt", ".", "pool_size", ")", "\n", "\n", "# define loss functions", "\n", "self", ".", "criterionL1", "=", "torch", ".", "nn", ".", "L1Loss", "(", ")", "\n", "self", ".", "criterionL1Smooth", "=", "torch", ".", "nn", ".", "SmoothL1Loss", "(", ")", "\n", "self", ".", "criterionL2", "=", "torch", ".", "nn", ".", "MSELoss", "(", ")", "\n", "\n", "# initialize optimizers", "\n", "self", ".", "optimizers", "=", "[", "]", "\n", "self", ".", "optimizer_G", "=", "torch", ".", "optim", ".", "Adam", "(", "self", ".", "netG", ".", "parameters", "(", ")", ",", "lr", "=", "opt", ".", "lr", ",", "betas", "=", "(", "opt", ".", "beta1", ",", "0.999", ")", ",", "weight_decay", "=", "0.0", ")", "\n", "self", ".", "optimizers", ".", "append", "(", "self", ".", "optimizer_G", ")", "\n"]], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.models.audio2ExpressionsAttentionTMP4_model.Audio2ExpressionsAttentionTMP4Model.set_input": [[215, 229], ["input[].cuda", "input[].cuda", "input[].cuda", "input[].cuda", "input[].cuda", "input[].cuda", "input[].cuda"], "methods", ["None"], ["\n", "", "", "def", "set_input", "(", "self", ",", "input", ")", ":", "\n", "        ", "self", ".", "image_paths", "=", "input", "[", "'paths'", "]", "\n", "\n", "self", ".", "expressions", "=", "input", "[", "'expressions'", "]", ".", "cuda", "(", ")", "\n", "self", ".", "audio_features", "=", "input", "[", "'audio_deepspeech'", "]", ".", "cuda", "(", ")", "# b x seq_len x 16 x 29", "\n", "\n", "if", "self", ".", "isTrain", ":", "\n", "            ", "self", ".", "expressions_prv", "=", "input", "[", "'expressions_prv'", "]", ".", "cuda", "(", ")", "\n", "self", ".", "audio_features_prv", "=", "input", "[", "'audio_deepspeech_prv'", "]", ".", "cuda", "(", ")", "# b x seq_len x 16 x 29", "\n", "\n", "self", ".", "expressions_nxt", "=", "input", "[", "'expressions_nxt'", "]", ".", "cuda", "(", ")", "\n", "self", ".", "audio_features_nxt", "=", "input", "[", "'audio_deepspeech_nxt'", "]", ".", "cuda", "(", ")", "# b x seq_len x 16 x 29", "\n", "\n", "", "self", ".", "target_id", "=", "input", "[", "'target_id'", "]", ".", "cuda", "(", ")", "\n"]], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.models.audio2ExpressionsAttentionTMP4_model.Audio2ExpressionsAttentionTMP4Model.forward": [[231, 243], ["audio2ExpressionsAttentionTMP4_model.Audio2ExpressionsAttentionTMP4Model.netG.getAudioExpressions", "audio2ExpressionsAttentionTMP4_model.Audio2ExpressionsAttentionTMP4Model.netG.forward_internal", "audio2ExpressionsAttentionTMP4_model.Audio2ExpressionsAttentionTMP4Model.netG.getAudioExpressions", "audio2ExpressionsAttentionTMP4_model.Audio2ExpressionsAttentionTMP4Model.netG.getAudioExpressions", "audio2ExpressionsAttentionTMP4_model.Audio2ExpressionsAttentionTMP4Model.netG", "audio2ExpressionsAttentionTMP4_model.Audio2ExpressionsAttentionTMP4Model.netG"], "methods", ["home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.models.audio2ExpressionsAttentionTMP4_model.ExpressionEstimator_Attention.getAudioExpressions", "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.models.audio2ExpressionsAttentionTMP4_model.ExpressionEstimator_Attention.forward_internal", "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.models.audio2ExpressionsAttentionTMP4_model.ExpressionEstimator_Attention.getAudioExpressions", "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.models.audio2ExpressionsAttentionTMP4_model.ExpressionEstimator_Attention.getAudioExpressions"], ["\n", "", "def", "forward", "(", "self", ")", ":", "\n", "# estimate expressions", "\n", "        ", "if", "self", ".", "opt", ".", "output_audio_expressions", ":", "#self.opt.dataset_mode=='audio':", "\n", "            ", "self", ".", "fake_expressions", "=", "self", ".", "netG", ".", "getAudioExpressions", "(", "self", ".", "audio_features", ")", "\n", "if", "self", ".", "isTrain", ":", "\n", "                ", "self", ".", "fake_expressions_prv", "=", "self", ".", "netG", ".", "getAudioExpressions", "(", "self", ".", "audio_features_prv", ")", "\n", "self", ".", "fake_expressions_nxt", "=", "self", ".", "netG", ".", "getAudioExpressions", "(", "self", ".", "audio_features_nxt", ")", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "fake_expressions", ",", "self", ".", "fake_expressions_intermediate", "=", "self", ".", "netG", ".", "forward_internal", "(", "self", ".", "audio_features", ",", "self", ".", "target_id", ")", "\n", "if", "self", ".", "isTrain", ":", "\n", "                ", "self", ".", "fake_expressions_prv", "=", "self", ".", "netG", "(", "self", ".", "audio_features_prv", ",", "self", ".", "target_id", ")", "\n", "self", ".", "fake_expressions_nxt", "=", "self", ".", "netG", "(", "self", ".", "audio_features_nxt", ",", "self", ".", "target_id", ")", "\n"]], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.models.audio2ExpressionsAttentionTMP4_model.Audio2ExpressionsAttentionTMP4Model.backward_G": [[246, 341], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "audio2ExpressionsAttentionTMP4_model.Audio2ExpressionsAttentionTMP4Model.morphable_model.compute_expression_delta", "audio2ExpressionsAttentionTMP4_model.Audio2ExpressionsAttentionTMP4Model.morphable_model.compute_expression_delta", "audio2ExpressionsAttentionTMP4_model.Audio2ExpressionsAttentionTMP4Model.morphable_model.compute_expression_delta", "audio2ExpressionsAttentionTMP4_model.Audio2ExpressionsAttentionTMP4Model.morphable_model.compute_expression_delta", "audio2ExpressionsAttentionTMP4_model.Audio2ExpressionsAttentionTMP4Model.morphable_model.compute_expression_delta", "audio2ExpressionsAttentionTMP4_model.Audio2ExpressionsAttentionTMP4Model.morphable_model.compute_expression_delta", "audio2ExpressionsAttentionTMP4_model.Audio2ExpressionsAttentionTMP4Model.morphable_model.compute_expression_delta", "audio2ExpressionsAttentionTMP4_model.Audio2ExpressionsAttentionTMP4Model.netG.regularizer", "audio2ExpressionsAttentionTMP4_model.Audio2ExpressionsAttentionTMP4Model.loss_G.backward", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs"], "methods", ["home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.BaselModel.basel_model.MorphableModel.compute_expression_delta", "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.BaselModel.basel_model.MorphableModel.compute_expression_delta", "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.BaselModel.basel_model.MorphableModel.compute_expression_delta", "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.BaselModel.basel_model.MorphableModel.compute_expression_delta", "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.BaselModel.basel_model.MorphableModel.compute_expression_delta", "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.BaselModel.basel_model.MorphableModel.compute_expression_delta", "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.BaselModel.basel_model.MorphableModel.compute_expression_delta", "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.models.audio2ExpressionsAttentionTMP4_model.ExpressionEstimator_Attention.regularizer"], ["\n", "", "", "", "def", "backward_G", "(", "self", ",", "epoch", ")", ":", "\n", "\n", "# Second, G(A) = B", "\n", "#self.loss_G_L1 = self.criterionL1(self.fake_expressions, self.expressions)", "\n", "\n", "# difference in vertex space", "\n", "        ", "mask", "=", "torch", ".", "cat", "(", "[", "self", ".", "mask", "[", ":", ",", "None", "]", ",", "self", ".", "mask", "[", ":", ",", "None", "]", ",", "self", ".", "mask", "[", ":", ",", "None", "]", "]", ",", "1", ")", "\n", "mask", "=", "mask", "+", "0.1", "*", "torch", ".", "ones_like", "(", "mask", ")", "# priority for the mask region, but other region should also be constrained", "\n", "\n", "# absolute (single timesteps)", "\n", "diff_expression", "=", "self", ".", "fake_expressions", "-", "self", ".", "expressions", "\n", "diff_vertices", "=", "self", ".", "morphable_model", ".", "compute_expression_delta", "(", "diff_expression", ")", "\n", "\n", "\n", "diff_expression_intermediate", "=", "self", ".", "fake_expressions_intermediate", "-", "self", ".", "expressions", "\n", "diff_vertices_intermediate", "=", "self", ".", "morphable_model", ".", "compute_expression_delta", "(", "diff_expression_intermediate", ")", "\n", "\n", "\n", "diff_expression_prv", "=", "self", ".", "fake_expressions_prv", "-", "self", ".", "expressions_prv", "\n", "diff_vertices_prv", "=", "self", ".", "morphable_model", ".", "compute_expression_delta", "(", "diff_expression_prv", ")", "\n", "\n", "diff_expression_nxt", "=", "self", ".", "fake_expressions_nxt", "-", "self", ".", "expressions_nxt", "\n", "diff_vertices_nxt", "=", "self", ".", "morphable_model", ".", "compute_expression_delta", "(", "diff_expression_nxt", ")", "\n", "\n", "# relative (temporal 1 timestep) cur - nxt and prv - cur", "\n", "diff_expression_tmp_cur_nxt", "=", "(", "self", ".", "fake_expressions", "-", "self", ".", "fake_expressions_nxt", ")", "-", "(", "self", ".", "expressions", "-", "self", ".", "expressions_nxt", ")", "\n", "diff_vertices_tmp_cur_nxt", "=", "self", ".", "morphable_model", ".", "compute_expression_delta", "(", "diff_expression_tmp_cur_nxt", ")", "\n", "diff_expression_tmp_prv_cur", "=", "(", "self", ".", "fake_expressions_prv", "-", "self", ".", "fake_expressions", ")", "-", "(", "self", ".", "expressions_prv", "-", "self", ".", "expressions", ")", "\n", "diff_vertices_tmp_prv_cur", "=", "self", ".", "morphable_model", ".", "compute_expression_delta", "(", "diff_expression_tmp_prv_cur", ")", "\n", "\n", "# relative (temporal 2 timesteps)  nxt - prv", "\n", "diff_expression_tmp_nxt_prv", "=", "(", "self", ".", "fake_expressions_nxt", "-", "self", ".", "fake_expressions_prv", ")", "-", "(", "self", ".", "expressions_nxt", "-", "self", ".", "expressions_prv", ")", "\n", "diff_vertices_tmp_nxt_prv", "=", "self", ".", "morphable_model", ".", "compute_expression_delta", "(", "diff_expression_tmp_nxt_prv", ")", "\n", "\n", "#print('mask: ', mask.shape)", "\n", "#print('diff_vertices: ', diff_vertices.shape)", "\n", "\n", "self", ".", "loss_G_L1_ABSOLUTE", "=", "0.0", "\n", "self", ".", "loss_G_L1_RELATIVE", "=", "0.0", "\n", "if", "self", ".", "opt", ".", "lossType", "==", "'L1'", ":", "\n", "            ", "self", ".", "loss_G_L1_ABSOLUTE", "+=", "1000.0", "*", "torch", ".", "mean", "(", "mask", "*", "torch", ".", "abs", "(", "diff_vertices", ")", ")", "# scale brings meters to millimeters", "\n", "self", ".", "loss_G_L1_ABSOLUTE", "+=", "1000.0", "*", "torch", ".", "mean", "(", "mask", "*", "torch", ".", "abs", "(", "diff_vertices_prv", ")", ")", "\n", "self", ".", "loss_G_L1_ABSOLUTE", "+=", "1000.0", "*", "torch", ".", "mean", "(", "mask", "*", "torch", ".", "abs", "(", "diff_vertices_nxt", ")", ")", "\n", "\n", "self", ".", "loss_G_L1_ABSOLUTE", "+=", "3000.0", "*", "torch", ".", "mean", "(", "mask", "*", "torch", ".", "abs", "(", "diff_vertices_intermediate", ")", ")", "\n", "\n", "self", ".", "loss_G_L1_RELATIVE", "+=", "20000.0", "*", "torch", ".", "mean", "(", "mask", "*", "torch", ".", "abs", "(", "diff_vertices_tmp_cur_nxt", ")", ")", "\n", "self", ".", "loss_G_L1_RELATIVE", "+=", "20000.0", "*", "torch", ".", "mean", "(", "mask", "*", "torch", ".", "abs", "(", "diff_vertices_tmp_prv_cur", ")", ")", "\n", "\n", "self", ".", "loss_G_L1_RELATIVE", "+=", "20000.0", "*", "torch", ".", "mean", "(", "mask", "*", "torch", ".", "abs", "(", "diff_vertices_tmp_nxt_prv", ")", ")", "\n", "\n", "", "elif", "self", ".", "opt", ".", "lossType", "==", "'L2'", ":", "\n", "            ", "self", ".", "loss_G_L1_ABSOLUTE", "+=", "1000.0", "*", "torch", ".", "mean", "(", "mask", "*", "diff_vertices", "*", "diff_vertices", ")", "\n", "self", ".", "loss_G_L1_ABSOLUTE", "+=", "1000.0", "*", "torch", ".", "mean", "(", "mask", "*", "diff_vertices_prv", "*", "diff_vertices_prv", ")", "\n", "self", ".", "loss_G_L1_ABSOLUTE", "+=", "1000.0", "*", "torch", ".", "mean", "(", "mask", "*", "diff_vertices_nxt", "*", "diff_vertices_nxt", ")", "\n", "\n", "self", ".", "loss_G_L1_ABSOLUTE", "+=", "3000.0", "*", "torch", ".", "mean", "(", "mask", "*", "diff_vertices_intermediate", "*", "diff_vertices_intermediate", ")", "\n", "\n", "self", ".", "loss_G_L1_RELATIVE", "+=", "20000.0", "*", "torch", ".", "mean", "(", "mask", "*", "diff_vertices_tmp_cur_nxt", "*", "diff_vertices_tmp_cur_nxt", ")", "\n", "self", ".", "loss_G_L1_RELATIVE", "+=", "20000.0", "*", "torch", ".", "mean", "(", "mask", "*", "diff_vertices_tmp_prv_cur", "*", "diff_vertices_tmp_prv_cur", ")", "\n", "\n", "self", ".", "loss_G_L1_RELATIVE", "+=", "20000.0", "*", "torch", ".", "mean", "(", "mask", "*", "diff_vertices_tmp_nxt_prv", "*", "diff_vertices_tmp_nxt_prv", ")", "\n", "\n", "", "elif", "self", ".", "opt", ".", "lossType", "==", "'RMS'", ":", "\n", "            ", "self", ".", "loss_G_L1_ABSOLUTE", "+=", "1000.0", "*", "torch", ".", "sqrt", "(", "torch", ".", "mean", "(", "mask", "*", "diff_vertices", "*", "diff_vertices", ")", ")", "\n", "self", ".", "loss_G_L1_ABSOLUTE", "+=", "1000.0", "*", "torch", ".", "sqrt", "(", "torch", ".", "mean", "(", "mask", "*", "diff_vertices_prv", "*", "diff_vertices_prv", ")", ")", "\n", "self", ".", "loss_G_L1_ABSOLUTE", "+=", "1000.0", "*", "torch", ".", "sqrt", "(", "torch", ".", "mean", "(", "mask", "*", "diff_vertices_nxt", "*", "diff_vertices_nxt", ")", ")", "\n", "\n", "self", ".", "loss_G_L1_ABSOLUTE", "+=", "3000.0", "*", "torch", ".", "sqrt", "(", "torch", ".", "mean", "(", "mask", "*", "diff_vertices_intermediate", "*", "diff_vertices_intermediate", ")", ")", "\n", "\n", "\n", "self", ".", "loss_G_L1_RELATIVE", "+=", "20000.0", "*", "torch", ".", "sqrt", "(", "torch", ".", "mean", "(", "mask", "*", "diff_vertices_tmp_cur_nxt", "*", "diff_vertices_tmp_cur_nxt", ")", ")", "\n", "self", ".", "loss_G_L1_RELATIVE", "+=", "20000.0", "*", "torch", ".", "sqrt", "(", "torch", ".", "mean", "(", "mask", "*", "diff_vertices_tmp_prv_cur", "*", "diff_vertices_tmp_prv_cur", ")", ")", "\n", "\n", "self", ".", "loss_G_L1_RELATIVE", "+=", "20000.0", "*", "torch", ".", "sqrt", "(", "torch", ".", "mean", "(", "mask", "*", "diff_vertices_tmp_nxt_prv", "*", "diff_vertices_tmp_nxt_prv", ")", ")", "\n", "\n", "", "else", ":", "# L1", "\n", "            ", "self", ".", "loss_G_L1_ABSOLUTE", "+=", "1000.0", "*", "torch", ".", "mean", "(", "mask", "*", "torch", ".", "abs", "(", "diff_vertices", ")", ")", "\n", "self", ".", "loss_G_L1_ABSOLUTE", "+=", "1000.0", "*", "torch", ".", "mean", "(", "mask", "*", "torch", ".", "abs", "(", "diff_vertices_prv", ")", ")", "\n", "self", ".", "loss_G_L1_ABSOLUTE", "+=", "1000.0", "*", "torch", ".", "mean", "(", "mask", "*", "torch", ".", "abs", "(", "diff_vertices_nxt", ")", ")", "\n", "\n", "self", ".", "loss_G_L1_ABSOLUTE", "+=", "3000.0", "*", "torch", ".", "mean", "(", "mask", "*", "torch", ".", "abs", "(", "diff_vertices_intermediate", ")", ")", "\n", "\n", "self", ".", "loss_G_L1_RELATIVE", "+=", "20000.0", "*", "torch", ".", "mean", "(", "mask", "*", "torch", ".", "abs", "(", "diff_vertices_tmp_cur_nxt", ")", ")", "\n", "self", ".", "loss_G_L1_RELATIVE", "+=", "20000.0", "*", "torch", ".", "mean", "(", "mask", "*", "torch", ".", "abs", "(", "diff_vertices_tmp_prv_cur", ")", ")", "\n", "\n", "self", ".", "loss_G_L1_RELATIVE", "+=", "20000.0", "*", "torch", ".", "mean", "(", "mask", "*", "torch", ".", "abs", "(", "diff_vertices_tmp_nxt_prv", ")", ")", "\n", "\n", "", "self", ".", "loss_G_L1", "=", "self", ".", "loss_G_L1_ABSOLUTE", "+", "self", ".", "loss_G_L1_RELATIVE", "\n", "self", ".", "loss_G_Regularizer", "=", "self", ".", "netG", ".", "regularizer", "(", ")", "\n", "\n", "self", ".", "loss_G", "=", "self", ".", "loss_G_L1", "+", "self", ".", "loss_G_Regularizer", "\n", "\n", "\n", "self", ".", "loss_G", ".", "backward", "(", ")", "\n"]], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.models.audio2ExpressionsAttentionTMP4_model.Audio2ExpressionsAttentionTMP4Model.optimize_parameters": [[342, 349], ["audio2ExpressionsAttentionTMP4_model.Audio2ExpressionsAttentionTMP4Model.forward", "audio2ExpressionsAttentionTMP4_model.Audio2ExpressionsAttentionTMP4Model.optimizer_G.zero_grad", "audio2ExpressionsAttentionTMP4_model.Audio2ExpressionsAttentionTMP4Model.backward_G", "audio2ExpressionsAttentionTMP4_model.Audio2ExpressionsAttentionTMP4Model.optimizer_G.step"], "methods", ["home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.models.VGG_LOSS.VGGLOSS.forward", "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.models.DynamicNeuralTextures_model.DynamicNeuralTexturesModel.backward_G"], ["\n", "", "def", "optimize_parameters", "(", "self", ",", "epoch_iter", ")", ":", "\n", "        ", "self", ".", "forward", "(", ")", "\n", "\n", "# update Generator", "\n", "self", ".", "optimizer_G", ".", "zero_grad", "(", ")", "\n", "self", ".", "backward_G", "(", "epoch_iter", ")", "\n", "self", ".", "optimizer_G", ".", "step", "(", ")", "\n"]], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.models.audio2ExpressionsAttentionTMP4_model.define_ExpressionEstimator": [[140, 146], ["print", "networks.init_net", "audio2ExpressionsAttentionTMP4_model.ExpressionEstimator_Attention"], "function", ["home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.models.networks.init_net"], ["\n", "\n", "\n", "", "", "def", "define_ExpressionEstimator", "(", "estimatorType", "=", "'estimatorDefault'", ",", "nIdentities", "=", "1", ",", "seq_len", "=", "1", ",", "norm", "=", "'batch'", ",", "use_dropout", "=", "False", ",", "init_type", "=", "'normal'", ",", "init_gain", "=", "0.02", ",", "gpu_ids", "=", "[", "]", ")", ":", "\n", "    ", "net", "=", "None", "\n", "print", "(", "'EstimatorType: '", ",", "estimatorType", ")", "\n", "if", "estimatorType", "==", "'estimatorAttention'", ":", "net", "=", "ExpressionEstimator_Attention", "(", "N_EXPRESSIONS", ",", "nIdentities", ",", "seq_len", ")", "\n"]], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.models.__init__.find_model_using_name": [[5, 27], ["importlib.import_module", "importlib.import_module.__dict__.items", "model_name.replace", "print", "exit", "issubclass", "name.lower", "target_model_name.lower"], "function", ["None"], []], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.models.__init__.get_option_setter": [[29, 32], ["__init__.find_model_using_name"], "function", ["home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.models.__init__.find_model_using_name"], []], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.models.__init__.create_model": [[34, 40], ["__init__.find_model_using_name", "find_model_using_name.", "model.initialize", "print", "model.name"], "function", ["home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.models.__init__.find_model_using_name", "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.options.base_options.BaseOptions.initialize", "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.data.audio_dataset.AudioDataset.name"], []], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.models.base_model.BaseModel.modify_commandline_options": [[26, 29], ["None"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "modify_commandline_options", "(", "parser", ",", "is_train", ")", ":", "\n", "        ", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.models.base_model.BaseModel.name": [[30, 32], ["None"], "methods", ["None"], ["", "def", "name", "(", "self", ")", ":", "\n", "        ", "return", "'BaseModel'", "\n", "\n"]], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.models.base_model.BaseModel.initialize": [[33, 46], ["os.path.join", "os.path.join", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device"], "methods", ["None"], ["", "def", "initialize", "(", "self", ",", "opt", ")", ":", "\n", "        ", "self", ".", "opt", "=", "opt", "\n", "self", ".", "gpu_ids", "=", "opt", ".", "gpu_ids", "\n", "self", ".", "isTrain", "=", "opt", ".", "isTrain", "\n", "self", ".", "device", "=", "torch", ".", "device", "(", "'cuda:{}'", ".", "format", "(", "self", ".", "gpu_ids", "[", "0", "]", ")", ")", "if", "self", ".", "gpu_ids", "else", "torch", ".", "device", "(", "'cpu'", ")", "\n", "self", ".", "load_dir", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "checkpoints_dir", ",", "opt", ".", "name", ")", "\n", "self", ".", "save_dir", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "checkpoints_dir", ",", "opt", ".", "name", ")", "\n", "if", "opt", ".", "resize_or_crop", "!=", "'scale_width'", ":", "\n", "            ", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "True", "\n", "", "self", ".", "loss_names", "=", "[", "]", "\n", "self", ".", "model_names", "=", "[", "]", "\n", "self", ".", "visual_names", "=", "[", "]", "\n", "self", ".", "image_paths", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.models.base_model.BaseModel.set_input": [[47, 49], ["None"], "methods", ["None"], ["", "def", "set_input", "(", "self", ",", "input", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.models.base_model.BaseModel.forward": [[50, 52], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.models.base_model.BaseModel.setup": [[54, 61], ["base_model.BaseModel.print_networks", "base_model.BaseModel.load_networks", "networks.get_scheduler"], "methods", ["home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.models.base_model.BaseModel.print_networks", "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.models.base_model.BaseModel.load_networks", "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.models.networks.get_scheduler"], ["", "def", "setup", "(", "self", ",", "opt", ",", "parser", "=", "None", ")", ":", "\n", "        ", "if", "self", ".", "isTrain", ":", "\n", "            ", "self", ".", "schedulers", "=", "[", "networks", ".", "get_scheduler", "(", "optimizer", ",", "opt", ")", "for", "optimizer", "in", "self", ".", "optimizers", "]", "\n", "", "if", "not", "self", ".", "isTrain", "or", "opt", ".", "continue_train", ":", "\n", "            ", "load_suffix", "=", "'iter_%d'", "%", "opt", ".", "load_iter", "if", "opt", ".", "load_iter", ">", "0", "else", "opt", ".", "epoch", "\n", "self", ".", "load_networks", "(", "load_suffix", ")", "\n", "", "self", ".", "print_networks", "(", "opt", ".", "verbose", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.models.base_model.BaseModel.loadModules": [[65, 90], ["isinstance", "os.path.join", "os.path.join", "getattr", "isinstance", "print", "torch.load", "torch.load", "torch.load", "torch.load", "getattr.copy_", "print", "torch.load", "torch.load", "torch.load", "torch.load", "hasattr", "list", "getattr.load_state_dict", "torch.load.keys", "torch.load.keys", "base_model.BaseModel.__patch_instance_norm_state_dict", "str", "str", "key.split"], "methods", ["home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.models.base_model.BaseModel.__patch_instance_norm_state_dict"], ["", "def", "loadModules", "(", "self", ",", "opt", ",", "model_name", ",", "module_names", ")", ":", "\n", "        ", "for", "name", "in", "module_names", ":", "\n", "            ", "if", "isinstance", "(", "name", ",", "str", ")", ":", "\n", "                ", "load_dir", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "checkpoints_dir", ",", "model_name", ")", "\n", "load_filename", "=", "'latest_%s.pth'", "%", "(", "name", ")", "\n", "load_path", "=", "os", ".", "path", ".", "join", "(", "load_dir", ",", "load_filename", ")", "\n", "net", "=", "getattr", "(", "self", ",", "name", ")", "\n", "if", "isinstance", "(", "net", ",", "torch", ".", "Tensor", ")", ":", "\n", "                    ", "print", "(", "'loading the tensor from %s'", "%", "load_path", ")", "\n", "net_loaded", "=", "torch", ".", "load", "(", "load_path", ",", "map_location", "=", "str", "(", "self", ".", "device", ")", ")", "\n", "net", ".", "copy_", "(", "net_loaded", ")", "\n", "", "else", ":", "\n", "# if isinstance(net, torch.nn.DataParallel):", "\n", "#     net = net.module", "\n", "                    ", "print", "(", "'loading the module from %s'", "%", "load_path", ")", "\n", "# if you are using PyTorch newer than 0.4 (e.g., built from", "\n", "# GitHub source), you can remove str() on self.device", "\n", "state_dict", "=", "torch", ".", "load", "(", "load_path", ",", "map_location", "=", "str", "(", "self", ".", "device", ")", ")", "\n", "if", "hasattr", "(", "state_dict", ",", "'_metadata'", ")", ":", "\n", "                        ", "del", "state_dict", ".", "_metadata", "\n", "\n", "# patch InstanceNorm checkpoints prior to 0.4", "\n", "", "for", "key", "in", "list", "(", "state_dict", ".", "keys", "(", ")", ")", ":", "# need to copy keys here because we mutate in loop", "\n", "                        ", "self", ".", "__patch_instance_norm_state_dict", "(", "state_dict", ",", "net", ",", "key", ".", "split", "(", "'.'", ")", ")", "\n", "", "net", ".", "load_state_dict", "(", "state_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.models.base_model.BaseModel.eval": [[95, 100], ["isinstance", "getattr", "getattr.eval"], "methods", ["home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.models.base_model.BaseModel.eval"], ["", "", "", "", "def", "eval", "(", "self", ")", ":", "\n", "        ", "for", "name", "in", "self", ".", "model_names", ":", "\n", "            ", "if", "isinstance", "(", "name", ",", "str", ")", ":", "\n", "                ", "net", "=", "getattr", "(", "self", ",", "name", ")", "\n", "net", ".", "eval", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.models.base_model.BaseModel.test": [[103, 106], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "base_model.BaseModel.forward"], "methods", ["home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.models.VGG_LOSS.VGGLOSS.forward"], ["", "", "", "def", "test", "(", "self", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "self", ".", "forward", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.models.base_model.BaseModel.get_image_paths": [[108, 110], ["None"], "methods", ["None"], ["", "", "def", "get_image_paths", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "image_paths", "\n", "\n"]], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.models.base_model.BaseModel.optimize_parameters": [[111, 113], ["None"], "methods", ["None"], ["", "def", "optimize_parameters", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.models.base_model.BaseModel.update_learning_rate": [[115, 120], ["print", "scheduler.step"], "methods", ["None"], ["", "def", "update_learning_rate", "(", "self", ")", ":", "\n", "        ", "for", "scheduler", "in", "self", ".", "schedulers", ":", "\n", "            ", "scheduler", ".", "step", "(", ")", "\n", "", "lr", "=", "self", ".", "optimizers", "[", "0", "]", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", "\n", "print", "(", "'learning rate = %.7f'", "%", "lr", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.models.base_model.BaseModel.get_current_visuals": [[122, 128], ["collections.OrderedDict", "isinstance", "getattr"], "methods", ["None"], ["", "def", "get_current_visuals", "(", "self", ")", ":", "\n", "        ", "visual_ret", "=", "OrderedDict", "(", ")", "\n", "for", "name", "in", "self", ".", "visual_names", ":", "\n", "            ", "if", "isinstance", "(", "name", ",", "str", ")", ":", "\n", "                ", "visual_ret", "[", "name", "]", "=", "getattr", "(", "self", ",", "name", ")", "\n", "", "", "return", "visual_ret", "\n", "\n"]], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.models.base_model.BaseModel.get_current_losses": [[130, 137], ["collections.OrderedDict", "isinstance", "float", "getattr"], "methods", ["None"], ["", "def", "get_current_losses", "(", "self", ")", ":", "\n", "        ", "errors_ret", "=", "OrderedDict", "(", ")", "\n", "for", "name", "in", "self", ".", "loss_names", ":", "\n", "            ", "if", "isinstance", "(", "name", ",", "str", ")", ":", "\n", "# float(...) works for both scalar tensor and float number", "\n", "                ", "errors_ret", "[", "name", "]", "=", "float", "(", "getattr", "(", "self", ",", "'loss_'", "+", "name", ")", ")", "\n", "", "", "return", "errors_ret", "\n", "\n"]], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.models.base_model.BaseModel.save_networks": [[139, 158], ["isinstance", "os.path.join", "getattr", "isinstance", "torch.save", "torch.save", "torch.save", "torch.save", "range", "base_model.save_tensor_image", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.save", "torch.save", "torch.save", "torch.save", "getattr.cuda", "torch.save", "torch.save", "torch.save", "torch.save", "list", "len", "getattr.cpu().state_dict", "getattr.cpu().state_dict", "getattr.size", "str", "getattr.cpu", "getattr.cpu"], "methods", ["home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.util.html.HTML.save", "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.util.html.HTML.save", "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.util.html.HTML.save", "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.util.html.HTML.save", "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.models.base_model.save_tensor_image", "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.util.html.HTML.save", "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.util.html.HTML.save", "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.util.html.HTML.save", "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.util.html.HTML.save", "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.util.html.HTML.save", "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.util.html.HTML.save", "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.util.html.HTML.save", "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.util.html.HTML.save"], ["", "def", "save_networks", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "for", "name", "in", "self", ".", "model_names", ":", "\n", "            ", "if", "isinstance", "(", "name", ",", "str", ")", ":", "\n", "                ", "save_filename", "=", "'%s_%s.pth'", "%", "(", "epoch", ",", "name", ")", "\n", "save_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "save_dir", ",", "save_filename", ")", "\n", "net", "=", "getattr", "(", "self", ",", "name", ")", "\n", "\n", "if", "isinstance", "(", "net", ",", "torch", ".", "Tensor", ")", ":", "\n", "#torch.save(net.state_dict(), save_path)", "\n", "                    ", "torch", ".", "save", "(", "net", ",", "save_path", ")", "\n", "for", "i", "in", "range", "(", "0", ",", "list", "(", "net", ".", "size", "(", ")", ")", "[", "0", "]", ")", ":", "\n", "                        ", "save_tensor_image", "(", "net", "[", "i", ":", "i", "+", "1", ",", "0", ":", "3", ",", ":", ",", ":", "]", ",", "save_path", "+", "str", "(", "i", ")", "+", "'.png'", ")", "\n", "", "", "else", ":", "\n", "                    ", "if", "len", "(", "self", ".", "gpu_ids", ")", ">", "0", "and", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "#torch.save(net.module.cpu().state_dict(), save_path) # << original", "\n", "                        ", "torch", ".", "save", "(", "net", ".", "cpu", "(", ")", ".", "state_dict", "(", ")", ",", "save_path", ")", "\n", "net", ".", "cuda", "(", "self", ".", "gpu_ids", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "                        ", "torch", ".", "save", "(", "net", ".", "cpu", "(", ")", ".", "state_dict", "(", ")", ",", "save_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.models.base_model.BaseModel.__patch_instance_norm_state_dict": [[159, 171], ["len", "base_model.BaseModel.__patch_instance_norm_state_dict", "module.__class__.__name__.startswith", "module.__class__.__name__.startswith", "state_dict.pop", "getattr", "getattr", "state_dict.pop"], "methods", ["home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.models.base_model.BaseModel.__patch_instance_norm_state_dict"], ["", "", "", "", "", "def", "__patch_instance_norm_state_dict", "(", "self", ",", "state_dict", ",", "module", ",", "keys", ",", "i", "=", "0", ")", ":", "\n", "        ", "key", "=", "keys", "[", "i", "]", "\n", "if", "i", "+", "1", "==", "len", "(", "keys", ")", ":", "# at the end, pointing to a parameter/buffer", "\n", "            ", "if", "module", ".", "__class__", ".", "__name__", ".", "startswith", "(", "'InstanceNorm'", ")", "and", "(", "key", "==", "'running_mean'", "or", "key", "==", "'running_var'", ")", ":", "\n", "                ", "if", "getattr", "(", "module", ",", "key", ")", "is", "None", ":", "\n", "                    ", "state_dict", ".", "pop", "(", "'.'", ".", "join", "(", "keys", ")", ")", "\n", "", "", "if", "module", ".", "__class__", ".", "__name__", ".", "startswith", "(", "'InstanceNorm'", ")", "and", "(", "key", "==", "'num_batches_tracked'", ")", ":", "\n", "                ", "state_dict", ".", "pop", "(", "'.'", ".", "join", "(", "keys", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "__patch_instance_norm_state_dict", "(", "state_dict", ",", "getattr", "(", "module", ",", "key", ")", ",", "keys", ",", "i", "+", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.models.base_model.BaseModel.load_networks": [[173, 197], ["isinstance", "os.path.join", "getattr", "isinstance", "print", "torch.load", "torch.load", "torch.load", "torch.load", "getattr.copy_", "print", "torch.load", "torch.load", "torch.load", "torch.load", "hasattr", "list", "getattr.load_state_dict", "torch.load.keys", "torch.load.keys", "base_model.BaseModel.__patch_instance_norm_state_dict", "str", "str", "key.split"], "methods", ["home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.models.base_model.BaseModel.__patch_instance_norm_state_dict"], ["", "", "def", "load_networks", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "for", "name", "in", "self", ".", "model_names", ":", "\n", "            ", "if", "isinstance", "(", "name", ",", "str", ")", ":", "\n", "                ", "load_filename", "=", "'%s_%s.pth'", "%", "(", "epoch", ",", "name", ")", "\n", "load_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "load_dir", ",", "load_filename", ")", "\n", "net", "=", "getattr", "(", "self", ",", "name", ")", "\n", "if", "isinstance", "(", "net", ",", "torch", ".", "Tensor", ")", ":", "\n", "                    ", "print", "(", "'loading the tensor from %s'", "%", "load_path", ")", "\n", "net_loaded", "=", "torch", ".", "load", "(", "load_path", ",", "map_location", "=", "str", "(", "self", ".", "device", ")", ")", "\n", "net", ".", "copy_", "(", "net_loaded", ")", "\n", "", "else", ":", "\n", "# if isinstance(net, torch.nn.DataParallel):", "\n", "#     net = net.module", "\n", "                    ", "print", "(", "'loading the module from %s'", "%", "load_path", ")", "\n", "# if you are using PyTorch newer than 0.4 (e.g., built from", "\n", "# GitHub source), you can remove str() on self.device", "\n", "state_dict", "=", "torch", ".", "load", "(", "load_path", ",", "map_location", "=", "str", "(", "self", ".", "device", ")", ")", "\n", "if", "hasattr", "(", "state_dict", ",", "'_metadata'", ")", ":", "\n", "                        ", "del", "state_dict", ".", "_metadata", "\n", "\n", "# patch InstanceNorm checkpoints prior to 0.4", "\n", "", "for", "key", "in", "list", "(", "state_dict", ".", "keys", "(", ")", ")", ":", "# need to copy keys here because we mutate in loop", "\n", "                        ", "self", ".", "__patch_instance_norm_state_dict", "(", "state_dict", ",", "net", ",", "key", ".", "split", "(", "'.'", ")", ")", "\n", "", "net", ".", "load_state_dict", "(", "state_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.models.base_model.BaseModel.print_networks": [[199, 215], ["print", "print", "isinstance", "getattr", "isinstance", "getattr.numel", "print", "getattr.parameters", "print", "param.numel", "print"], "methods", ["None"], ["", "", "", "", "def", "print_networks", "(", "self", ",", "verbose", ")", ":", "\n", "        ", "print", "(", "'---------- Networks initialized -------------'", ")", "\n", "for", "name", "in", "self", ".", "model_names", ":", "\n", "            ", "if", "isinstance", "(", "name", ",", "str", ")", ":", "\n", "                ", "net", "=", "getattr", "(", "self", ",", "name", ")", "\n", "if", "isinstance", "(", "net", ",", "torch", ".", "Tensor", ")", ":", "\n", "                    ", "num_params", "=", "net", ".", "numel", "(", ")", "\n", "print", "(", "'[Tensor %s] Total number of parameters : %.3f M'", "%", "(", "name", ",", "num_params", "/", "1e6", ")", ")", "\n", "", "else", ":", "\n", "                    ", "num_params", "=", "0", "\n", "for", "param", "in", "net", ".", "parameters", "(", ")", ":", "\n", "                        ", "num_params", "+=", "param", ".", "numel", "(", ")", "\n", "", "if", "verbose", ":", "\n", "                        ", "print", "(", "net", ")", "\n", "", "print", "(", "'[Network %s] Total number of parameters : %.3f M'", "%", "(", "name", ",", "num_params", "/", "1e6", ")", ")", "\n", "", "", "", "print", "(", "'-----------------------------------------------'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.models.base_model.BaseModel.set_requires_grad": [[217, 224], ["isinstance", "net.parameters"], "methods", ["None"], ["", "def", "set_requires_grad", "(", "self", ",", "nets", ",", "requires_grad", "=", "False", ")", ":", "\n", "        ", "if", "not", "isinstance", "(", "nets", ",", "list", ")", ":", "\n", "            ", "nets", "=", "[", "nets", "]", "\n", "", "for", "net", "in", "nets", ":", "\n", "            ", "if", "net", "is", "not", "None", ":", "\n", "                ", "for", "param", "in", "net", ".", "parameters", "(", ")", ":", "\n", "                    ", "param", ".", "requires_grad", "=", "requires_grad", "\n", "", "", "", "", "", ""]], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.models.base_model.save_tensor_image": [[9, 21], ["isinstance", "np.tile.astype", "PIL.Image.fromarray", "Image.fromarray.save", "image_tensor[].cpu().float().numpy", "numpy.tile", "image_tensor[].cpu().float", "numpy.transpose", "image_tensor[].cpu"], "function", ["home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.util.html.HTML.save"], ["def", "save_tensor_image", "(", "input_image", ",", "image_path", ")", ":", "\n", "    ", "if", "isinstance", "(", "input_image", ",", "torch", ".", "Tensor", ")", ":", "\n", "        ", "image_tensor", "=", "input_image", ".", "data", "\n", "image_numpy", "=", "image_tensor", "[", "0", "]", ".", "cpu", "(", ")", ".", "float", "(", ")", ".", "numpy", "(", ")", "\n", "if", "image_numpy", ".", "shape", "[", "0", "]", "==", "1", ":", "\n", "            ", "image_numpy", "=", "np", ".", "tile", "(", "image_numpy", ",", "(", "3", ",", "1", ",", "1", ")", ")", "\n", "", "image_numpy", "=", "(", "np", ".", "transpose", "(", "image_numpy", ",", "(", "1", ",", "2", ",", "0", ")", ")", "+", "1", ")", "/", "2.0", "*", "255.0", "\n", "", "else", ":", "\n", "        ", "image_numpy", "=", "input_image", "\n", "", "image_numpy", "=", "image_numpy", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "image_pil", "=", "Image", ".", "fromarray", "(", "image_numpy", ")", "\n", "image_pil", ".", "save", "(", "image_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.models.NeuralTexture.StaticNeuralTexture.__init__": [[27, 34], ["torch.Module.__init__", "NeuralTexture.StaticNeuralTexture.register_parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.randn", "torch.randn", "torch.randn", "torch.randn"], "methods", ["home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "texture_dimensions", ",", "texture_features", ")", ":", "\n", "        ", "super", "(", "StaticNeuralTexture", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "texture_dimensions", "=", "texture_dimensions", "#256 #texture dimensions", "\n", "self", ".", "out_ch", "=", "texture_features", "# output feature, after evaluating the texture", "\n", "\n", "\n", "self", ".", "register_parameter", "(", "'data'", ",", "torch", ".", "nn", ".", "Parameter", "(", "torch", ".", "randn", "(", "1", ",", "self", ".", "out_ch", ",", "self", ".", "texture_dimensions", ",", "self", ".", "texture_dimensions", ",", "requires_grad", "=", "True", ")", ")", ")", "\n", "####", "\n"]], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.models.NeuralTexture.StaticNeuralTexture.forward": [[36, 43], ["torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.nn.functional.grid_sample", "torch.nn.functional.grid_sample", "torch.nn.functional.grid_sample", "torch.nn.functional.grid_sample", "print", "exit"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "expressions", ",", "audio_features", ",", "uv_inputs", ")", ":", "\n", "        ", "b", "=", "audio_features", ".", "shape", "[", "0", "]", "# batchsize", "\n", "if", "b", "!=", "1", ":", "\n", "            ", "print", "(", "'ERROR: NeuralTexture forward only implemented for batchsize==1'", ")", "\n", "exit", "(", "-", "1", ")", "\n", "", "uvs", "=", "torch", ".", "stack", "(", "[", "uv_inputs", "[", ":", ",", "0", ",", ":", ",", ":", "]", ",", "uv_inputs", "[", ":", ",", "1", ",", ":", ",", ":", "]", "]", ",", "3", ")", "\n", "return", "torch", ".", "nn", ".", "functional", ".", "grid_sample", "(", "self", ".", "data", ",", "uvs", ",", "mode", "=", "'bilinear'", ",", "padding_mode", "=", "'border'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.models.NeuralTexture.DynamicNeuralTextureAudio.__init__": [[49, 77], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "NeuralTexture.DynamicNeuralTextureAudio.register_parameter", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Linear", "torch.Linear", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Linear", "torch.Linear", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Linear", "torch.Linear", "torch.Tanh", "torch.Tanh", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.randn", "torch.randn", "torch.randn", "torch.randn"], "methods", ["home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "texture_dimensions", ",", "texture_features_intermediate", ",", "texture_features", ")", ":", "\n", "        ", "super", "(", "DynamicNeuralTextureAudio", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "texture_features_intermediate", "=", "texture_features_intermediate", "#16 #features stored in texture", "\n", "self", ".", "texture_dimensions", "=", "texture_dimensions", "#256 #texture dimensions", "\n", "self", ".", "out_ch", "=", "texture_features", "# output feature, after evaluating the texture", "\n", "\n", "# input 16 x 29", "\n", "self", ".", "convNet", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "29", ",", "32", ",", "kernel_size", "=", "(", "3", ",", "1", ")", ",", "stride", "=", "(", "2", ",", "1", ")", ",", "padding", "=", "(", "1", ",", "0", ")", ",", "bias", "=", "True", ")", ",", "#  29 x 16 x 1 => 32 x 8 x 1", "\n", "nn", ".", "LeakyReLU", "(", "0.02", ",", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "32", ",", "32", ",", "kernel_size", "=", "(", "3", ",", "1", ")", ",", "stride", "=", "(", "2", ",", "1", ")", ",", "padding", "=", "(", "1", ",", "0", ")", ",", "bias", "=", "True", ")", ",", "# 32 x 8 x 1 => 32 x 4 x 1", "\n", "nn", ".", "LeakyReLU", "(", "0.02", ",", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "32", ",", "64", ",", "kernel_size", "=", "(", "3", ",", "1", ")", ",", "stride", "=", "(", "2", ",", "1", ")", ",", "padding", "=", "(", "1", ",", "0", ")", ",", "bias", "=", "True", ")", ",", "# 32 x 4 x 1 => 64 x 2 x 1", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "kernel_size", "=", "(", "3", ",", "1", ")", ",", "stride", "=", "(", "2", ",", "1", ")", ",", "padding", "=", "(", "1", ",", "0", ")", ",", "bias", "=", "True", ")", ",", "# 64 x 2 x 1 => 64 x 1 x 1", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", ",", "\n", ")", "\n", "conv_output_size", "=", "64", "\n", "self", ".", "fullNet", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "in_features", "=", "conv_output_size", ",", "out_features", "=", "128", ",", "bias", "=", "True", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.02", ")", ",", "\n", "nn", ".", "Linear", "(", "in_features", "=", "128", ",", "out_features", "=", "64", ",", "bias", "=", "True", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.02", ")", ",", "\n", "nn", ".", "Linear", "(", "in_features", "=", "64", ",", "out_features", "=", "self", ".", "out_ch", "*", "4", "*", "4", "*", "self", ".", "texture_features_intermediate", ",", "bias", "=", "True", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", "\n", ")", "\n", "\n", "self", ".", "register_parameter", "(", "'data'", ",", "torch", ".", "nn", ".", "Parameter", "(", "torch", ".", "randn", "(", "1", ",", "self", ".", "texture_features_intermediate", ",", "self", ".", "texture_dimensions", ",", "self", ".", "texture_dimensions", ",", "requires_grad", "=", "True", ")", ")", ")", "\n", "####", "\n"]], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.models.NeuralTexture.DynamicNeuralTextureAudio.forward": [[79, 92], ["torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "NeuralTexture.DynamicNeuralTextureAudio.convNet", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.functional.conv2d", "torch.functional.conv2d", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.nn.functional.grid_sample", "torch.nn.functional.grid_sample", "torch.nn.functional.grid_sample", "torch.nn.functional.grid_sample", "print", "exit", "NeuralTexture.DynamicNeuralTextureAudio.fullNet", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "expressions", ",", "audio_features", ",", "uv_inputs", ")", ":", "\n", "        ", "b", "=", "audio_features", ".", "shape", "[", "0", "]", "# batchsize", "\n", "if", "b", "!=", "1", ":", "\n", "            ", "print", "(", "'ERROR: NeuralTexture forward only implemented for batchsize==1'", ")", "\n", "exit", "(", "-", "1", ")", "\n", "# b x 1 x 16 x 29 --> transpose", "\n", "", "audio_features", "=", "torch", ".", "transpose", "(", "audio_features", ",", "1", ",", "3", ")", "\n", "audio_conv_res", "=", "self", ".", "convNet", "(", "audio_features", ")", "\n", "conv_filter", "=", "torch", ".", "reshape", "(", "self", ".", "fullNet", "(", "torch", ".", "reshape", "(", "audio_conv_res", ",", "(", "b", ",", "1", ",", "-", "1", ")", ")", ")", ",", "(", "self", ".", "out_ch", ",", "self", ".", "texture_features_intermediate", ",", "4", ",", "4", ")", ")", "\n", "self", ".", "tex_eval", "=", "nn", ".", "functional", ".", "conv2d", "(", "self", ".", "data", ",", "conv_filter", ",", "stride", "=", "1", ",", "padding", "=", "2", ")", "\n", "uvs", "=", "torch", ".", "stack", "(", "[", "uv_inputs", "[", ":", ",", "0", ",", ":", ",", ":", "]", ",", "uv_inputs", "[", ":", ",", "1", ",", ":", ",", ":", "]", "]", ",", "3", ")", "\n", "\n", "return", "torch", ".", "nn", ".", "functional", ".", "grid_sample", "(", "self", ".", "tex_eval", ",", "uvs", ",", "mode", "=", "'bilinear'", ",", "padding_mode", "=", "'border'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.models.NeuralTexture.DynamicNeuralTextureExpression.__init__": [[99, 117], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "NeuralTexture.DynamicNeuralTextureExpression.register_parameter", "torch.Linear", "torch.Linear", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Linear", "torch.Linear", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Linear", "torch.Linear", "torch.Tanh", "torch.Tanh", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.randn", "torch.randn", "torch.randn", "torch.randn"], "methods", ["home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "texture_dimensions", ",", "texture_features_intermediate", ",", "texture_features", ")", ":", "\n", "        ", "super", "(", "DynamicNeuralTextureExpression", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "texture_features_intermediate", "=", "texture_features_intermediate", "#16 #features stored in texture", "\n", "self", ".", "texture_dimensions", "=", "texture_dimensions", "#256 #texture dimensions", "\n", "self", ".", "out_ch", "=", "texture_features", "# output feature, after evaluating the texture", "\n", "\n", "# input: 76", "\n", "input_size", "=", "76", "\n", "self", ".", "fullNet", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "in_features", "=", "input_size", ",", "out_features", "=", "128", ",", "bias", "=", "True", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.02", ")", ",", "\n", "nn", ".", "Linear", "(", "in_features", "=", "128", ",", "out_features", "=", "64", ",", "bias", "=", "True", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.02", ")", ",", "\n", "nn", ".", "Linear", "(", "in_features", "=", "64", ",", "out_features", "=", "self", ".", "out_ch", "*", "4", "*", "4", "*", "self", ".", "texture_features_intermediate", ",", "bias", "=", "True", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", "\n", ")", "\n", "\n", "self", ".", "register_parameter", "(", "'data'", ",", "torch", ".", "nn", ".", "Parameter", "(", "torch", ".", "randn", "(", "1", ",", "self", ".", "texture_features_intermediate", ",", "self", ".", "texture_dimensions", ",", "self", ".", "texture_dimensions", ",", "requires_grad", "=", "True", ")", ")", ")", "\n", "####", "\n"]], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.models.NeuralTexture.DynamicNeuralTextureExpression.forward": [[119, 129], ["torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.functional.conv2d", "torch.functional.conv2d", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.nn.functional.grid_sample", "torch.nn.functional.grid_sample", "torch.nn.functional.grid_sample", "torch.nn.functional.grid_sample", "print", "exit", "NeuralTexture.DynamicNeuralTextureExpression.fullNet", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "expressions", ",", "audio_features", ",", "uv_inputs", ")", ":", "\n", "        ", "b", "=", "expressions", ".", "shape", "[", "0", "]", "# batchsize", "\n", "if", "b", "!=", "1", ":", "\n", "            ", "print", "(", "'ERROR: NeuralTexture forward only implemented for batchsize==1'", ")", "\n", "exit", "(", "-", "1", ")", "\n", "", "conv_filter", "=", "torch", ".", "reshape", "(", "self", ".", "fullNet", "(", "torch", ".", "reshape", "(", "expressions", ",", "(", "1", ",", "1", ",", "-", "1", ")", ")", ")", ",", "(", "self", ".", "out_ch", ",", "self", ".", "texture_features_intermediate", ",", "4", ",", "4", ")", ")", "\n", "self", ".", "tex_eval", "=", "nn", ".", "functional", ".", "conv2d", "(", "self", ".", "data", ",", "conv_filter", ",", "stride", "=", "1", ",", "padding", "=", "2", ")", "\n", "uvs", "=", "torch", ".", "stack", "(", "[", "uv_inputs", "[", ":", ",", "0", ",", ":", ",", ":", "]", ",", "uv_inputs", "[", ":", ",", "1", ",", ":", ",", ":", "]", "]", ",", "3", ")", "\n", "\n", "return", "torch", ".", "nn", ".", "functional", ".", "grid_sample", "(", "self", ".", "tex_eval", ",", "uvs", ",", "mode", "=", "'bilinear'", ",", "padding_mode", "=", "'border'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.models.DynamicNeuralTextures_model.DynamicNeuralTexturesModel.name": [[60, 62], ["None"], "methods", ["None"], ["    ", "def", "name", "(", "self", ")", ":", "\n", "        ", "return", "'DynamicNeuralTexturesModel'", "\n", "\n"]], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.models.DynamicNeuralTextures_model.DynamicNeuralTexturesModel.modify_commandline_options": [[63, 76], ["parser.set_defaults", "parser.set_defaults", "parser.set_defaults", "parser.add_argument"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "modify_commandline_options", "(", "parser", ",", "is_train", "=", "True", ")", ":", "\n", "\n", "# changing the default values to match the pix2pix paper", "\n", "# (https://phillipi.github.io/pix2pix/)", "\n", "#parser.set_defaults(norm='batch', netG='unet_256')", "\n", "        ", "parser", ".", "set_defaults", "(", "norm", "=", "'instance'", ",", "netG", "=", "'unet_256'", ")", "\n", "parser", ".", "set_defaults", "(", "dataset_mode", "=", "'aligned'", ")", "\n", "if", "is_train", ":", "\n", "            ", "parser", ".", "set_defaults", "(", "pool_size", "=", "0", ",", "no_lsgan", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "'--lambda_L1'", ",", "type", "=", "float", ",", "default", "=", "100.0", ",", "help", "=", "'weight for L1 loss'", ")", "\n", "\n", "", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.models.DynamicNeuralTextures_model.DynamicNeuralTexturesModel.initialize": [[77, 134], ["base_model.BaseModel.initialize", "DynamicNeuralTextures_model.define_Texture", "DynamicNeuralTextures_model.define_TextureDecoder", "DynamicNeuralTextures_model.define_Inpainter", "networks.define_D", "util.util.image_pool.ImagePool", "networks.GANLoss().to", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.SmoothL1Loss", "torch.nn.SmoothL1Loss", "torch.nn.SmoothL1Loss", "torch.nn.SmoothL1Loss", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "DynamicNeuralTextures_model.DynamicNeuralTexturesModel.optimizers.append", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "DynamicNeuralTextures_model.DynamicNeuralTexturesModel.optimizers.append", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "DynamicNeuralTextures_model.DynamicNeuralTexturesModel.optimizers.append", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "DynamicNeuralTextures_model.DynamicNeuralTexturesModel.optimizers.append", "VGG_LOSS.VGGLOSS().to", "DynamicNeuralTextures_model.DynamicNeuralTexturesModel.texture_decoder.parameters", "DynamicNeuralTextures_model.DynamicNeuralTexturesModel.inpainter.parameters", "DynamicNeuralTextures_model.DynamicNeuralTexturesModel.netD.parameters", "DynamicNeuralTextures_model.DynamicNeuralTexturesModel.texture.parameters", "networks.GANLoss", "VGG_LOSS.VGGLOSS"], "methods", ["home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.options.base_options.BaseOptions.initialize", "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.models.DynamicNeuralTextures_model.define_Texture", "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.models.DynamicNeuralTextures_model.define_TextureDecoder", "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.models.DynamicNeuralTextures_model.define_Inpainter", "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.models.networks.define_D"], ["", "def", "initialize", "(", "self", ",", "opt", ")", ":", "\n", "        ", "BaseModel", ".", "initialize", "(", "self", ",", "opt", ")", "\n", "self", ".", "isTrain", "=", "opt", ".", "isTrain", "\n", "\n", "self", ".", "trainRenderer", "=", "not", "opt", ".", "fix_renderer", "\n", "\n", "# specify the training losses you want to print out. The program will call base_model.get_current_losses", "\n", "self", ".", "loss_names", "=", "[", "'G_total'", ",", "'G_L1_Rendering'", ",", "'G_VGG_Rendering'", ",", "'G_GAN'", "]", "\n", "\n", "# specify the images you want to save/display. The program will call base_model.get_current_visuals", "\n", "if", "self", ".", "isTrain", ":", "\n", "            ", "self", ".", "visual_names", "=", "[", "'input_uv'", ",", "'fake'", ",", "'target'", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "visual_names", "=", "[", "'input_uv'", ",", "'fake'", ",", "'target'", "]", "\n", "\n", "# specify the models you want to save to the disk. The program will call base_model.save_networks and base_model.load_networks", "\n", "", "if", "self", ".", "isTrain", ":", "\n", "            ", "self", ".", "model_names", "=", "[", "'texture'", ",", "'texture_decoder'", ",", "'inpainter'", ",", "'netD'", "]", "\n", "", "else", ":", "# during test time, only load Gs", "\n", "            ", "self", ".", "model_names", "=", "[", "'texture'", ",", "'texture_decoder'", ",", "'inpainter'", "]", "\n", "\n", "# load/define networks", "\n", "", "self", ".", "texture", "=", "define_Texture", "(", "opt", ",", "self", ".", "gpu_ids", ")", "\n", "self", ".", "texture_decoder", "=", "define_TextureDecoder", "(", "opt", ".", "rendererType", ",", "opt", ".", "tex_features", "+", "3", ",", "opt", ".", "ngf", ",", "opt", ".", "norm", ",", "not", "opt", ".", "no_dropout", ",", "opt", ".", "init_type", ",", "opt", ".", "init_gain", ",", "self", ".", "gpu_ids", ")", "\n", "self", ".", "inpainter", "=", "define_Inpainter", "(", "opt", ".", "rendererType", ",", "6", ",", "opt", ".", "ngf", ",", "opt", ".", "norm", ",", "not", "opt", ".", "no_dropout", ",", "opt", ".", "init_type", ",", "opt", ".", "init_gain", ",", "self", ".", "gpu_ids", ")", "\n", "\n", "\n", "# optimizer", "\n", "self", ".", "loss_G_GAN", "=", "0.0", "\n", "\n", "if", "self", ".", "isTrain", ":", "\n", "            ", "use_sigmoid", "=", "opt", ".", "no_lsgan", "\n", "self", ".", "netD", "=", "networks", ".", "define_D", "(", "opt", ".", "input_nc", "+", "opt", ".", "output_nc", ",", "opt", ".", "ndf", ",", "opt", ".", "netD", ",", "opt", ".", "n_layers_D", ",", "opt", ".", "norm", ",", "use_sigmoid", ",", "opt", ".", "init_type", ",", "opt", ".", "init_gain", ",", "self", ".", "gpu_ids", ")", "\n", "self", ".", "fake_AB_pool", "=", "ImagePool", "(", "opt", ".", "pool_size", ")", "\n", "# define loss functions", "\n", "self", ".", "criterionGAN", "=", "networks", ".", "GANLoss", "(", "use_lsgan", "=", "not", "opt", ".", "no_lsgan", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "criterionL1", "=", "torch", ".", "nn", ".", "L1Loss", "(", "reduction", "=", "'mean'", ")", "\n", "self", ".", "criterionL1Smooth", "=", "torch", ".", "nn", ".", "SmoothL1Loss", "(", "reduction", "=", "'mean'", ")", "\n", "self", ".", "criterionL2", "=", "torch", ".", "nn", ".", "MSELoss", "(", "reduction", "=", "'mean'", ")", "\n", "\n", "if", "self", ".", "opt", ".", "lossType", "==", "'VGG'", ":", "\n", "                ", "self", ".", "vggloss", "=", "VGG_LOSS", ".", "VGGLOSS", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "# initialize optimizers", "\n", "", "self", ".", "optimizers", "=", "[", "]", "\n", "\n", "self", ".", "optimizer_texture_decoder", "=", "torch", ".", "optim", ".", "Adam", "(", "self", ".", "texture_decoder", ".", "parameters", "(", ")", ",", "lr", "=", "opt", ".", "lr", ",", "betas", "=", "(", "opt", ".", "beta1", ",", "0.999", ")", ")", "\n", "self", ".", "optimizers", ".", "append", "(", "self", ".", "optimizer_texture_decoder", ")", "\n", "\n", "self", ".", "optimizer_inpainter", "=", "torch", ".", "optim", ".", "Adam", "(", "self", ".", "inpainter", ".", "parameters", "(", ")", ",", "lr", "=", "opt", ".", "lr", ",", "betas", "=", "(", "opt", ".", "beta1", ",", "0.999", ")", ")", "\n", "self", ".", "optimizers", ".", "append", "(", "self", ".", "optimizer_inpainter", ")", "\n", "\n", "self", ".", "optimizer_D", "=", "torch", ".", "optim", ".", "Adam", "(", "self", ".", "netD", ".", "parameters", "(", ")", ",", "lr", "=", "opt", ".", "lr", ",", "betas", "=", "(", "opt", ".", "beta1", ",", "0.999", ")", ")", "\n", "self", ".", "optimizers", ".", "append", "(", "self", ".", "optimizer_D", ")", "\n", "\n", "self", ".", "optimizer_T", "=", "torch", ".", "optim", ".", "Adam", "(", "self", ".", "texture", ".", "parameters", "(", ")", ",", "lr", "=", "opt", ".", "lr", ",", "betas", "=", "(", "opt", ".", "beta1", ",", "0.999", ")", ")", "\n", "self", ".", "optimizers", ".", "append", "(", "self", ".", "optimizer_T", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.models.DynamicNeuralTextures_model.DynamicNeuralTexturesModel.maskErosion": [[136, 155], ["int", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "int", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "int", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like"], "methods", ["None"], ["", "", "def", "maskErosion", "(", "self", ",", "mask", ",", "erosionFactor", ")", ":", "\n", "        ", "offsetY", "=", "int", "(", "erosionFactor", "*", "40", ")", "\n", "# throat", "\n", "mask2", "=", "mask", "[", ":", ",", ":", ",", "0", ":", "-", "offsetY", ",", ":", "]", "\n", "mask2", "=", "torch", ".", "cat", "(", "[", "torch", ".", "ones_like", "(", "mask", "[", ":", ",", ":", ",", "0", ":", "offsetY", ",", ":", "]", ")", ",", "mask2", "]", ",", "2", ")", "\n", "# forehead", "\n", "offsetY", "=", "int", "(", "erosionFactor", "*", "8", ")", "#<<<<", "\n", "mask3", "=", "mask", "[", ":", ",", ":", ",", "offsetY", ":", ",", ":", "]", "\n", "mask3", "=", "torch", ".", "cat", "(", "[", "mask3", ",", "torch", ".", "ones_like", "(", "mask", "[", ":", ",", ":", ",", "0", ":", "offsetY", ",", ":", "]", ")", "]", ",", "2", ")", "\n", "mask", "=", "mask", "*", "mask2", "*", "mask3", "\n", "\n", "offsetX", "=", "int", "(", "erosionFactor", "*", "15", ")", "\n", "# left", "\n", "mask4", "=", "mask", "[", ":", ",", ":", ",", ":", ",", "0", ":", "-", "offsetX", "]", "\n", "mask4", "=", "torch", ".", "cat", "(", "[", "torch", ".", "ones_like", "(", "mask", "[", ":", ",", ":", ",", ":", ",", "0", ":", "offsetX", "]", ")", ",", "mask4", "]", ",", "3", ")", "\n", "# right", "\n", "mask5", "=", "mask", "[", ":", ",", ":", ",", ":", ",", "offsetX", ":", "]", "\n", "mask5", "=", "torch", ".", "cat", "(", "[", "mask5", ",", "torch", ".", "ones_like", "(", "mask", "[", ":", ",", ":", ",", ":", ",", "0", ":", "offsetX", "]", ")", "]", ",", "3", ")", "\n", "return", "mask", "*", "mask4", "*", "mask5", "\n", "\n"]], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.models.DynamicNeuralTextures_model.DynamicNeuralTexturesModel.set_input": [[156, 165], ["input[].to", "input[].to", "input[].cuda", "input[].cuda"], "methods", ["None"], ["", "def", "set_input", "(", "self", ",", "input", ")", ":", "\n", "        ", "self", ".", "target", "=", "input", "[", "'TARGET'", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "input_uv", "=", "input", "[", "'UV'", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "intrinsics", "=", "input", "[", "'intrinsics'", "]", "\n", "self", ".", "extrinsics", "=", "input", "[", "'extrinsics'", "]", "\n", "self", ".", "expressions", "=", "input", "[", "'expressions'", "]", ".", "cuda", "(", ")", "\n", "\n", "self", ".", "image_paths", "=", "input", "[", "'paths'", "]", "\n", "self", ".", "audio_features", "=", "input", "[", "'audio_deepspeech'", "]", ".", "cuda", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.models.DynamicNeuralTextures_model.DynamicNeuralTexturesModel.forward": [[173, 202], ["DynamicNeuralTextures_model.DynamicNeuralTexturesModel.maskErosion", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.where", "torch.where", "torch.where", "torch.where", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.where", "torch.where", "torch.where", "torch.where", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "DynamicNeuralTextures_model.DynamicNeuralTexturesModel.texture", "DynamicNeuralTextures_model.DynamicNeuralTexturesModel.features.append", "DynamicNeuralTextures_model.DynamicNeuralTexturesModel.texture_decoder", "DynamicNeuralTextures_model.DynamicNeuralTexturesModel.intermediate_fake.append", "DynamicNeuralTextures_model.DynamicNeuralTexturesModel.inpainter", "DynamicNeuralTextures_model.DynamicNeuralTexturesModel.fake.append"], "methods", ["home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.models.DynamicNeuralTextures_model.DynamicNeuralTexturesModel.maskErosion"], ["", "def", "forward", "(", "self", ",", "alpha", "=", "1.0", ")", ":", "\n", "# background", "\n", "        ", "mask", "=", "(", "self", ".", "input_uv", "[", ":", ",", "0", ":", "1", ",", ":", ",", ":", "]", "==", "INVALID_UV", ")", "&", "(", "self", ".", "input_uv", "[", ":", ",", "1", ":", "2", ",", ":", ",", ":", "]", "==", "INVALID_UV", ")", "\n", "mask", "=", "self", ".", "maskErosion", "(", "mask", ",", "self", ".", "opt", ".", "erosionFactor", ")", "\n", "mask", "=", "torch", ".", "cat", "(", "[", "mask", ",", "mask", ",", "mask", "]", ",", "1", ")", "\n", "self", ".", "background", "=", "torch", ".", "where", "(", "mask", ",", "self", ".", "target", ",", "torch", ".", "zeros_like", "(", "self", ".", "target", ")", ")", "\n", "\n", "\n", "# loop over batch elements", "\n", "batch_size", "=", "self", ".", "target", ".", "shape", "[", "0", "]", "\n", "self", ".", "features", "=", "[", "]", "\n", "self", ".", "intermediate_fake", "=", "[", "]", "\n", "self", ".", "fake", "=", "[", "]", "\n", "for", "b", "in", "range", "(", "0", ",", "batch_size", ")", ":", "\n", "            ", "feat", "=", "self", ".", "texture", "(", "self", ".", "expressions", "[", "b", ":", "b", "+", "1", "]", ",", "self", ".", "audio_features", "[", "b", ":", "b", "+", "1", "]", ",", "self", ".", "input_uv", "[", "b", ":", "b", "+", "1", "]", ")", "\n", "self", ".", "features", ".", "append", "(", "feat", ")", "\n", "\n", "intermediate_fake", "=", "self", ".", "texture_decoder", "(", "self", ".", "expressions", "[", "b", ":", "b", "+", "1", "]", ",", "self", ".", "audio_features", "[", "b", ":", "b", "+", "1", "]", ",", "feat", ",", "self", ".", "background", "[", "b", ":", "b", "+", "1", "]", ")", "\n", "self", ".", "intermediate_fake", ".", "append", "(", "intermediate_fake", ")", "\n", "\n", "fake", "=", "self", ".", "inpainter", "(", "self", ".", "expressions", "[", "b", ":", "b", "+", "1", "]", ",", "self", ".", "audio_features", "[", "b", ":", "b", "+", "1", "]", ",", "intermediate_fake", ",", "self", ".", "background", "[", "b", ":", "b", "+", "1", "]", ")", "\n", "self", ".", "fake", ".", "append", "(", "fake", ")", "\n", "\n", "\n", "", "self", ".", "features", "=", "torch", ".", "cat", "(", "self", ".", "features", ",", "dim", "=", "0", ")", "\n", "self", ".", "intermediate_fake", "=", "torch", ".", "cat", "(", "self", ".", "intermediate_fake", ",", "dim", "=", "0", ")", "\n", "self", ".", "fake", "=", "torch", ".", "cat", "(", "self", ".", "fake", ",", "dim", "=", "0", ")", "\n", "\n", "self", ".", "fake", "=", "torch", ".", "where", "(", "mask", ",", "self", ".", "background", ",", "self", ".", "fake", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.models.DynamicNeuralTextures_model.DynamicNeuralTexturesModel.backward_D": [[204, 225], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "DynamicNeuralTextures_model.DynamicNeuralTexturesModel.fake_AB_pool.query", "DynamicNeuralTextures_model.DynamicNeuralTexturesModel.netD", "DynamicNeuralTextures_model.DynamicNeuralTexturesModel.criterionGAN", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "DynamicNeuralTextures_model.DynamicNeuralTexturesModel.netD", "DynamicNeuralTextures_model.DynamicNeuralTexturesModel.criterionGAN", "DynamicNeuralTextures_model.DynamicNeuralTexturesModel.loss_D.backward", "torch.where", "torch.where", "torch.where", "torch.where", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "DynamicNeuralTextures_model.DynamicNeuralTexturesModel.detach", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "DynamicNeuralTextures_model.DynamicNeuralTexturesModel.backward_D.masked"], "methods", ["home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.util.image_pool.ImagePool.query"], ["", "def", "backward_D", "(", "self", ")", ":", "\n", "        ", "mask", "=", "(", "(", "self", ".", "input_uv", "[", ":", ",", "0", ":", "1", ",", ":", ",", ":", "]", "!=", "INVALID_UV", ")", "|", "(", "self", ".", "input_uv", "[", ":", ",", "1", ":", "2", ",", ":", ",", ":", "]", "!=", "INVALID_UV", ")", ")", "\n", "mask", "=", "torch", ".", "cat", "(", "[", "mask", ",", "mask", ",", "mask", "]", ",", "1", ")", "\n", "def", "masked", "(", "img", ")", ":", "\n", "            ", "return", "torch", ".", "where", "(", "mask", ",", "img", ",", "torch", ".", "zeros_like", "(", "img", ")", ")", "\n", "\n", "# Fake", "\n", "# stop backprop to the generator by detaching fake_B", "\n", "", "fake_AB", "=", "self", ".", "fake_AB_pool", ".", "query", "(", "torch", ".", "cat", "(", "(", "self", ".", "input_uv", ",", "masked", "(", "self", ".", "fake", ")", ")", ",", "1", ")", ")", "\n", "pred_fake", "=", "self", ".", "netD", "(", "fake_AB", ".", "detach", "(", ")", ")", "\n", "self", ".", "loss_D_fake", "=", "self", ".", "criterionGAN", "(", "pred_fake", ",", "False", ")", "\n", "\n", "# Real", "\n", "real_AB", "=", "torch", ".", "cat", "(", "(", "self", ".", "input_uv", ",", "masked", "(", "self", ".", "target", ")", ")", ",", "1", ")", "\n", "pred_real", "=", "self", ".", "netD", "(", "real_AB", ")", "\n", "self", ".", "loss_D_real", "=", "self", ".", "criterionGAN", "(", "pred_real", ",", "True", ")", "\n", "\n", "# Combined loss", "\n", "self", ".", "loss_D", "=", "(", "self", ".", "loss_D_fake", "+", "self", ".", "loss_D_real", ")", "*", "0.5", "\n", "\n", "self", ".", "loss_D", ".", "backward", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.models.DynamicNeuralTextures_model.DynamicNeuralTexturesModel.backward_G": [[226, 255], ["torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "DynamicNeuralTextures_model.DynamicNeuralTexturesModel.netD", "DynamicNeuralTextures_model.DynamicNeuralTexturesModel.loss_G_total.backward", "torch.where", "torch.where", "torch.where", "torch.where", "DynamicNeuralTextures_model.DynamicNeuralTexturesModel.criterionGAN", "DynamicNeuralTextures_model.DynamicNeuralTexturesModel.criterionL1", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "DynamicNeuralTextures_model.DynamicNeuralTexturesModel.backward_D.masked"], "methods", ["None"], ["", "def", "backward_G", "(", "self", ",", "epoch", ")", ":", "\n", "\n", "        ", "mask", "=", "(", "(", "self", ".", "input_uv", "[", ":", ",", "0", ":", "1", ",", ":", ",", ":", "]", "!=", "INVALID_UV", ")", "|", "(", "self", ".", "input_uv", "[", ":", ",", "1", ":", "2", ",", ":", ",", ":", "]", "!=", "INVALID_UV", ")", ")", "\n", "sum_mask", "=", "torch", ".", "sum", "(", "mask", ")", "\n", "d", "=", "mask", ".", "shape", "[", "1", "]", "\n", "mask_weight", "=", "(", "d", "*", "d", ")", "/", "sum_mask", "\n", "mask", "=", "torch", ".", "cat", "(", "[", "mask", ",", "mask", ",", "mask", "]", ",", "1", ")", "\n", "def", "masked", "(", "img", ")", ":", "\n", "            ", "return", "torch", ".", "where", "(", "mask", ",", "img", ",", "torch", ".", "zeros_like", "(", "img", ")", ")", "\n", "\n", "# First, G(A) should fake the discriminator", "\n", "", "fake_AB", "=", "torch", ".", "cat", "(", "(", "self", ".", "input_uv", ",", "masked", "(", "self", ".", "fake", ")", ")", ",", "1", ")", "\n", "pred_fake", "=", "self", ".", "netD", "(", "fake_AB", ")", "\n", "self", ".", "loss_G_GAN", "=", "self", ".", "criterionGAN", "(", "pred_fake", ",", "True", ")", "*", "0.0", "# disabled GAN", "\n", "\n", "\n", "# Second, G(A) = B", "\n", "self", ".", "loss_G_L1_Rendering", "=", "0.0", "\n", "self", ".", "loss_G_L1_Rendering", "=", "1.0", "*", "self", ".", "criterionL1", "(", "masked", "(", "self", ".", "features", "[", ":", ",", "0", ":", "3", ",", ":", ",", ":", "]", ")", ",", "masked", "(", "self", ".", "target", ")", ")", "*", "mask_weight", "\n", "self", ".", "loss_G_L1_Rendering", "+=", "5.0", "*", "self", ".", "criterionL1", "(", "masked", "(", "self", ".", "intermediate_fake", ")", ",", "masked", "(", "self", ".", "target", ")", ")", "*", "mask_weight", "\n", "self", ".", "loss_G_L1_Rendering", "+=", "10.0", "*", "self", ".", "criterionL1", "(", "self", ".", "fake", ",", "self", ".", "target", ")", "\n", "\n", "self", ".", "loss_G_VGG_Rendering", "=", "0.0", "\n", "if", "self", ".", "opt", ".", "lossType", "==", "'VGG'", ":", "\n", "            ", "self", ".", "loss_G_VGG_Rendering", "+=", "10.0", "*", "self", ".", "vggloss", "(", "self", ".", "fake", ",", "self", ".", "target", ")", "\n", "\n", "", "self", ".", "loss_G_total", "=", "self", ".", "loss_G_L1_Rendering", "+", "self", ".", "loss_G_VGG_Rendering", "+", "self", ".", "loss_G_GAN", "\n", "\n", "self", ".", "loss_G_total", ".", "backward", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.models.DynamicNeuralTextures_model.DynamicNeuralTexturesModel.optimize_parameters": [[256, 283], ["DynamicNeuralTextures_model.DynamicNeuralTexturesModel.forward", "DynamicNeuralTextures_model.DynamicNeuralTexturesModel.set_requires_grad", "DynamicNeuralTextures_model.DynamicNeuralTexturesModel.optimizer_texture_decoder.zero_grad", "DynamicNeuralTextures_model.DynamicNeuralTexturesModel.optimizer_inpainter.zero_grad", "DynamicNeuralTextures_model.DynamicNeuralTexturesModel.optimizer_T.zero_grad", "DynamicNeuralTextures_model.DynamicNeuralTexturesModel.backward_G", "DynamicNeuralTextures_model.DynamicNeuralTexturesModel.optimizer_texture_decoder.step", "DynamicNeuralTextures_model.DynamicNeuralTexturesModel.optimizer_inpainter.step", "DynamicNeuralTextures_model.DynamicNeuralTexturesModel.optimizer_T.step", "DynamicNeuralTextures_model.DynamicNeuralTexturesModel.set_requires_grad", "DynamicNeuralTextures_model.DynamicNeuralTexturesModel.optimizer_D.zero_grad", "DynamicNeuralTextures_model.DynamicNeuralTexturesModel.backward_D", "DynamicNeuralTextures_model.DynamicNeuralTexturesModel.optimizer_D.step"], "methods", ["home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.models.VGG_LOSS.VGGLOSS.forward", "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.models.base_model.BaseModel.set_requires_grad", "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.models.DynamicNeuralTextures_model.DynamicNeuralTexturesModel.backward_G", "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.models.base_model.BaseModel.set_requires_grad", "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.models.DynamicNeuralTextures_model.DynamicNeuralTexturesModel.backward_D"], ["", "def", "optimize_parameters", "(", "self", ",", "epoch_iter", ")", ":", "\n", "        ", "alpha", "=", "(", "epoch_iter", "-", "5", ")", "/", "50.0", "\n", "if", "alpha", "<", "0.0", ":", "alpha", "=", "0.0", "\n", "if", "alpha", ">", "1.0", ":", "alpha", "=", "1.0", "\n", "self", ".", "forward", "(", "alpha", ")", "\n", "\n", "\n", "updateDiscriminator", "=", "self", ".", "loss_G_GAN", "<", "1.0", "#0.1", "\n", "\n", "# update Discriminator", "\n", "if", "updateDiscriminator", ":", "\n", "            ", "self", ".", "set_requires_grad", "(", "self", ".", "netD", ",", "True", ")", "\n", "self", ".", "optimizer_D", ".", "zero_grad", "(", ")", "\n", "self", ".", "backward_D", "(", ")", "\n", "self", ".", "optimizer_D", ".", "step", "(", ")", "\n", "\n", "# update Generator", "\n", "", "self", ".", "set_requires_grad", "(", "self", ".", "netD", ",", "False", ")", "\n", "self", ".", "optimizer_texture_decoder", ".", "zero_grad", "(", ")", "\n", "self", ".", "optimizer_inpainter", ".", "zero_grad", "(", ")", "\n", "self", ".", "optimizer_T", ".", "zero_grad", "(", ")", "\n", "\n", "self", ".", "backward_G", "(", "epoch_iter", ")", "\n", "\n", "self", ".", "optimizer_texture_decoder", ".", "step", "(", ")", "\n", "self", ".", "optimizer_inpainter", ".", "step", "(", ")", "\n", "self", ".", "optimizer_T", ".", "step", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.models.DynamicNeuralTextures_model.define_Texture": [[27, 38], ["networks.init_net", "NeuralTexture.DynamicNeuralTextureAudio", "NeuralTexture.DynamicNeuralTextureExpression", "NeuralTexture.StaticNeuralTexture"], "function", ["home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.models.networks.init_net"], ["def", "define_Texture", "(", "opt", ",", "gpu_ids", "=", "[", "]", ")", ":", "\n", "    ", "net", "=", "None", "\n", "\n", "if", "opt", ".", "textureModel", "==", "'DynamicNeuralTextureAudio'", ":", "\n", "        ", "net", "=", "NeuralTexture", ".", "DynamicNeuralTextureAudio", "(", "texture_dimensions", "=", "opt", ".", "tex_dim", ",", "texture_features_intermediate", "=", "opt", ".", "tex_features_intermediate", ",", "texture_features", "=", "opt", ".", "tex_features", ")", "\n", "", "elif", "opt", ".", "textureModel", "==", "'DynamicNeuralTextureExpression'", ":", "\n", "        ", "net", "=", "NeuralTexture", ".", "DynamicNeuralTextureExpression", "(", "texture_dimensions", "=", "opt", ".", "tex_dim", ",", "texture_features_intermediate", "=", "opt", ".", "tex_features_intermediate", ",", "texture_features", "=", "opt", ".", "tex_features", ")", "\n", "", "elif", "opt", ".", "textureModel", "==", "'StaticNeuralTexture'", ":", "\n", "        ", "net", "=", "NeuralTexture", ".", "StaticNeuralTexture", "(", "texture_dimensions", "=", "opt", ".", "tex_dim", ",", "texture_features", "=", "opt", ".", "tex_features", ")", "\n", "\n", "", "return", "networks", ".", "init_net", "(", "net", ",", "opt", ".", "init_type", ",", "opt", ".", "init_gain", ",", "gpu_ids", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.models.DynamicNeuralTextures_model.define_TextureDecoder": [[39, 47], ["networks.get_norm_layer", "UNET.UnetRenderer", "networks.init_net"], "function", ["home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.models.networks.get_norm_layer", "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.models.networks.init_net"], ["", "def", "define_TextureDecoder", "(", "renderer", ",", "n_feature", ",", "ngf", ",", "norm", "=", "'batch'", ",", "use_dropout", "=", "False", ",", "init_type", "=", "'normal'", ",", "init_gain", "=", "0.02", ",", "gpu_ids", "=", "[", "]", ")", ":", "\n", "    ", "net", "=", "None", "\n", "norm_layer", "=", "networks", ".", "get_norm_layer", "(", "norm_type", "=", "norm", ")", "\n", "N_OUT", "=", "3", "\n", "#renderer=='UNET_5_level'", "\n", "net", "=", "UNET", ".", "UnetRenderer", "(", "renderer", ",", "n_feature", ",", "N_OUT", ",", "ngf", ",", "norm_layer", "=", "norm_layer", ",", "use_dropout", "=", "use_dropout", ")", "\n", "\n", "return", "networks", ".", "init_net", "(", "net", ",", "init_type", ",", "init_gain", ",", "gpu_ids", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.models.DynamicNeuralTextures_model.define_Inpainter": [[48, 56], ["networks.get_norm_layer", "UNET.UnetRenderer", "networks.init_net"], "function", ["home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.models.networks.get_norm_layer", "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.models.networks.init_net"], ["", "def", "define_Inpainter", "(", "renderer", ",", "n_feature", ",", "ngf", ",", "norm", "=", "'batch'", ",", "use_dropout", "=", "False", ",", "init_type", "=", "'normal'", ",", "init_gain", "=", "0.02", ",", "gpu_ids", "=", "[", "]", ")", ":", "\n", "    ", "net", "=", "None", "\n", "norm_layer", "=", "networks", ".", "get_norm_layer", "(", "norm_type", "=", "norm", ")", "\n", "N_OUT", "=", "3", "\n", "#renderer=='UNET_5_level'", "\n", "net", "=", "UNET", ".", "UnetRenderer", "(", "renderer", ",", "n_feature", ",", "N_OUT", ",", "ngf", ",", "norm_layer", "=", "norm_layer", ",", "use_dropout", "=", "use_dropout", ")", "\n", "\n", "return", "networks", ".", "init_net", "(", "net", ",", "init_type", ",", "init_gain", ",", "gpu_ids", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.models.UNET.UnetSkipConnectionBlock.__init__": [[17, 61], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ReLU", "torch.ReLU", "torch.Sequential", "torch.Sequential", "type", "norm_layer", "norm_layer", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.Tanh", "torch.Tanh", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "outer_nc", ",", "inner_nc", ",", "input_nc", "=", "None", ",", "submodule", "=", "None", ",", "outermost", "=", "False", ",", "innermost", "=", "False", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ",", "use_dropout", "=", "False", ")", ":", "\n", "        ", "super", "(", "UnetSkipConnectionBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "outermost", "=", "outermost", "\n", "if", "type", "(", "norm_layer", ")", "==", "functools", ".", "partial", ":", "\n", "            ", "use_bias", "=", "norm_layer", ".", "func", "==", "nn", ".", "InstanceNorm2d", "\n", "", "else", ":", "\n", "            ", "use_bias", "=", "norm_layer", "==", "nn", ".", "InstanceNorm2d", "\n", "", "if", "input_nc", "is", "None", ":", "\n", "            ", "input_nc", "=", "outer_nc", "\n", "\n", "#use_norm = False", "\n", "", "use_norm", "=", "True", "\n", "\n", "downconv", "=", "nn", ".", "Conv2d", "(", "input_nc", ",", "inner_nc", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "use_bias", ")", "\n", "downrelu", "=", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", "\n", "\n", "if", "use_norm", ":", "downnorm", "=", "norm_layer", "(", "inner_nc", ")", "\n", "uprelu", "=", "nn", ".", "ReLU", "(", "True", ")", "\n", "if", "use_norm", ":", "upnorm", "=", "norm_layer", "(", "outer_nc", ")", "\n", "\n", "if", "outermost", ":", "\n", "            ", "upconv", "=", "nn", ".", "ConvTranspose2d", "(", "inner_nc", "*", "2", ",", "outer_nc", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "down", "=", "[", "downconv", "]", "\n", "up", "=", "[", "uprelu", ",", "upconv", ",", "nn", ".", "Tanh", "(", ")", "]", "\n", "model", "=", "down", "+", "[", "submodule", "]", "+", "up", "\n", "", "elif", "innermost", ":", "\n", "            ", "upconv", "=", "nn", ".", "ConvTranspose2d", "(", "inner_nc", ",", "outer_nc", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "use_bias", ")", "\n", "down", "=", "[", "downrelu", ",", "downconv", "]", "\n", "if", "use_norm", ":", "up", "=", "[", "uprelu", ",", "upconv", ",", "upnorm", "]", "\n", "else", ":", "up", "=", "[", "uprelu", ",", "upconv", "]", "\n", "model", "=", "down", "+", "up", "\n", "", "else", ":", "\n", "            ", "upconv", "=", "nn", ".", "ConvTranspose2d", "(", "inner_nc", "*", "2", ",", "outer_nc", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "use_bias", ")", "\n", "if", "use_norm", ":", "down", "=", "[", "downrelu", ",", "downconv", ",", "downnorm", "]", "\n", "down", "=", "[", "downrelu", ",", "downconv", "]", "\n", "if", "use_norm", ":", "up", "=", "[", "uprelu", ",", "upconv", ",", "upnorm", "]", "\n", "else", ":", "up", "=", "[", "uprelu", ",", "upconv", "]", "\n", "\n", "if", "use_dropout", ":", "\n", "                ", "model", "=", "down", "+", "[", "submodule", "]", "+", "up", "+", "[", "nn", ".", "Dropout", "(", "0.5", ")", "]", "\n", "", "else", ":", "\n", "                ", "model", "=", "down", "+", "[", "submodule", "]", "+", "up", "\n", "\n", "", "", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "*", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.models.UNET.UnetSkipConnectionBlock.forward": [[62, 67], ["UNET.UnetSkipConnectionBlock.model", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "UNET.UnetSkipConnectionBlock.model"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "outermost", ":", "\n", "            ", "return", "self", ".", "model", "(", "x", ")", "\n", "", "else", ":", "\n", "            ", "return", "torch", ".", "cat", "(", "[", "x", ",", "self", ".", "model", "(", "x", ")", "]", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.models.UNET.UnetSkipConnectionBlock_BU.__init__": [[71, 133], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ReLU", "torch.ReLU", "torch.Sequential", "torch.Sequential", "type", "norm_layer", "norm_layer", "torch.Sequential", "torch.Sequential", "torch.Upsample", "torch.Upsample", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Tanh", "torch.Tanh", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Upsample", "torch.Upsample", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Upsample", "torch.Upsample", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "outer_nc", ",", "inner_nc", ",", "input_nc", "=", "None", ",", "submodule", "=", "None", ",", "outermost", "=", "False", ",", "innermost", "=", "False", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ",", "use_dropout", "=", "False", ")", ":", "\n", "        ", "super", "(", "UnetSkipConnectionBlock_BU", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "outermost", "=", "outermost", "\n", "if", "type", "(", "norm_layer", ")", "==", "functools", ".", "partial", ":", "\n", "            ", "use_bias", "=", "norm_layer", ".", "func", "==", "nn", ".", "InstanceNorm2d", "\n", "", "else", ":", "\n", "            ", "use_bias", "=", "norm_layer", "==", "nn", ".", "InstanceNorm2d", "\n", "", "if", "input_nc", "is", "None", ":", "\n", "            ", "input_nc", "=", "outer_nc", "\n", "\n", "#use_norm = False", "\n", "", "use_norm", "=", "True", "\n", "\n", "downconv", "=", "nn", ".", "Conv2d", "(", "input_nc", ",", "inner_nc", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "use_bias", ")", "\n", "downrelu", "=", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", "\n", "\n", "if", "use_norm", ":", "downnorm", "=", "norm_layer", "(", "inner_nc", ")", "\n", "uprelu", "=", "nn", ".", "ReLU", "(", "True", ")", "\n", "if", "use_norm", ":", "upnorm", "=", "norm_layer", "(", "outer_nc", ")", "\n", "\n", "if", "outermost", ":", "\n", "#upconv = nn.ConvTranspose2d(inner_nc * 2, outer_nc, kernel_size=4, stride=2, padding=1)", "\n", "            ", "upconv", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "\"bilinear\"", ",", "align_corners", "=", "False", ")", ",", "\n", "nn", ".", "Conv2d", "(", "inner_nc", "*", "2", ",", "outer_nc", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "use_bias", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", "\n", ")", "\n", "\n", "down", "=", "[", "downconv", "]", "\n", "up", "=", "[", "uprelu", ",", "upconv", ",", "nn", ".", "Tanh", "(", ")", "]", "\n", "model", "=", "down", "+", "[", "submodule", "]", "+", "up", "\n", "", "elif", "innermost", ":", "\n", "#upconv = nn.ConvTranspose2d(inner_nc, outer_nc, kernel_size=4, stride=2, padding=1, bias=use_bias)", "\n", "            ", "upconv", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "\"bilinear\"", ",", "align_corners", "=", "False", ")", ",", "\n", "nn", ".", "Conv2d", "(", "inner_nc", ",", "outer_nc", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "use_bias", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", "\n", ")", "\n", "\n", "down", "=", "[", "downrelu", ",", "downconv", "]", "\n", "if", "use_norm", ":", "up", "=", "[", "uprelu", ",", "upconv", ",", "upnorm", "]", "\n", "else", ":", "up", "=", "[", "uprelu", ",", "upconv", "]", "\n", "model", "=", "down", "+", "up", "\n", "", "else", ":", "\n", "#upconv = nn.ConvTranspose2d(inner_nc * 2, outer_nc, kernel_size=4, stride=2, padding=1, bias=use_bias)", "\n", "            ", "upconv", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "\"bilinear\"", ",", "align_corners", "=", "False", ")", ",", "\n", "nn", ".", "Conv2d", "(", "inner_nc", "*", "2", ",", "outer_nc", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "use_bias", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", "\n", ")", "\n", "\n", "if", "use_norm", ":", "down", "=", "[", "downrelu", ",", "downconv", ",", "downnorm", "]", "\n", "down", "=", "[", "downrelu", ",", "downconv", "]", "\n", "if", "use_norm", ":", "up", "=", "[", "uprelu", ",", "upconv", ",", "upnorm", "]", "\n", "else", ":", "up", "=", "[", "uprelu", ",", "upconv", "]", "\n", "\n", "if", "use_dropout", ":", "\n", "                ", "model", "=", "down", "+", "[", "submodule", "]", "+", "up", "+", "[", "nn", ".", "Dropout", "(", "0.5", ")", "]", "\n", "", "else", ":", "\n", "                ", "model", "=", "down", "+", "[", "submodule", "]", "+", "up", "\n", "\n", "", "", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "*", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.models.UNET.UnetSkipConnectionBlock_BU.forward": [[134, 139], ["UNET.UnetSkipConnectionBlock_BU.model", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "UNET.UnetSkipConnectionBlock_BU.model"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "outermost", ":", "\n", "            ", "return", "self", ".", "model", "(", "x", ")", "\n", "", "else", ":", "\n", "            ", "return", "torch", ".", "cat", "(", "[", "x", ",", "self", ".", "model", "(", "x", ")", "]", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.models.UNET.UnetSkipConnectionBlock_DC.__init__": [[143, 203], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ReLU", "torch.ReLU", "torch.Sequential", "torch.Sequential", "type", "norm_layer", "norm_layer", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Tanh", "torch.Tanh", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "outer_nc", ",", "inner_nc", ",", "input_nc", "=", "None", ",", "submodule", "=", "None", ",", "outermost", "=", "False", ",", "innermost", "=", "False", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ",", "use_dropout", "=", "False", ",", "dilation", "=", "1", ")", ":", "\n", "        ", "super", "(", "UnetSkipConnectionBlock_DC", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "outermost", "=", "outermost", "\n", "if", "type", "(", "norm_layer", ")", "==", "functools", ".", "partial", ":", "\n", "            ", "use_bias", "=", "norm_layer", ".", "func", "==", "nn", ".", "InstanceNorm2d", "\n", "", "else", ":", "\n", "            ", "use_bias", "=", "norm_layer", "==", "nn", ".", "InstanceNorm2d", "\n", "", "if", "input_nc", "is", "None", ":", "\n", "            ", "input_nc", "=", "outer_nc", "\n", "\n", "#use_norm = False", "\n", "", "use_norm", "=", "True", "\n", "\n", "#downconv = nn.Conv2d(input_nc, inner_nc, kernel_size=4, stride=2, dilation=dilation, padding=1, bias=use_bias)", "\n", "downconv", "=", "nn", ".", "Conv2d", "(", "input_nc", ",", "inner_nc", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "dilation", "=", "dilation", ",", "padding", "=", "1", "*", "dilation", ",", "bias", "=", "use_bias", ")", "\n", "downrelu", "=", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", "\n", "\n", "if", "use_norm", ":", "downnorm", "=", "norm_layer", "(", "inner_nc", ")", "\n", "uprelu", "=", "nn", ".", "ReLU", "(", "True", ")", "\n", "if", "use_norm", ":", "upnorm", "=", "norm_layer", "(", "outer_nc", ")", "\n", "\n", "if", "outermost", ":", "\n", "#upconv = nn.ConvTranspose2d(inner_nc * 2, outer_nc, kernel_size=4, stride=2, padding=1)", "\n", "            ", "upconv", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "inner_nc", "*", "2", ",", "outer_nc", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "dilation", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "use_bias", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", "\n", ")", "\n", "\n", "down", "=", "[", "downconv", "]", "\n", "up", "=", "[", "uprelu", ",", "upconv", ",", "nn", ".", "Tanh", "(", ")", "]", "\n", "model", "=", "down", "+", "[", "submodule", "]", "+", "up", "\n", "", "elif", "innermost", ":", "\n", "#upconv = nn.ConvTranspose2d(inner_nc, outer_nc, kernel_size=4, stride=2, padding=1, bias=use_bias)", "\n", "            ", "upconv", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "inner_nc", ",", "outer_nc", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "dilation", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "use_bias", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", "\n", ")", "\n", "\n", "down", "=", "[", "downrelu", ",", "downconv", "]", "\n", "if", "use_norm", ":", "up", "=", "[", "uprelu", ",", "upconv", ",", "upnorm", "]", "\n", "else", ":", "up", "=", "[", "uprelu", ",", "upconv", "]", "\n", "model", "=", "down", "+", "up", "\n", "", "else", ":", "\n", "#upconv = nn.ConvTranspose2d(inner_nc * 2, outer_nc, kernel_size=4, stride=2, padding=1, bias=use_bias)", "\n", "            ", "upconv", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "inner_nc", "*", "2", ",", "outer_nc", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "dilation", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "use_bias", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", "\n", ")", "\n", "\n", "if", "use_norm", ":", "down", "=", "[", "downrelu", ",", "downconv", ",", "downnorm", "]", "\n", "down", "=", "[", "downrelu", ",", "downconv", "]", "\n", "if", "use_norm", ":", "up", "=", "[", "uprelu", ",", "upconv", ",", "upnorm", "]", "\n", "else", ":", "up", "=", "[", "uprelu", ",", "upconv", "]", "\n", "\n", "if", "use_dropout", ":", "\n", "                ", "model", "=", "down", "+", "[", "submodule", "]", "+", "up", "+", "[", "nn", ".", "Dropout", "(", "0.5", ")", "]", "\n", "", "else", ":", "\n", "                ", "model", "=", "down", "+", "[", "submodule", "]", "+", "up", "\n", "\n", "", "", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "*", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.models.UNET.UnetSkipConnectionBlock_DC.forward": [[204, 209], ["UNET.UnetSkipConnectionBlock_DC.model", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "UNET.UnetSkipConnectionBlock_DC.model"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "outermost", ":", "\n", "            ", "return", "self", ".", "model", "(", "x", ")", "\n", "", "else", ":", "\n", "            ", "return", "torch", ".", "cat", "(", "[", "x", ",", "self", ".", "model", "(", "x", ")", "]", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.models.UNET.UnetRenderer.__init__": [[212, 313], ["torch.Module.__init__", "print", "UNET.UnetSkipConnectionBlock_BU", "range", "UNET.UnetSkipConnectionBlock_BU", "UNET.UnetSkipConnectionBlock_BU", "UNET.UnetSkipConnectionBlock_BU", "UNET.UnetSkipConnectionBlock_BU", "UNET.UnetSkipConnectionBlock_BU", "print", "UNET.UnetSkipConnectionBlock_BU", "range", "UNET.UnetSkipConnectionBlock_BU", "UNET.UnetSkipConnectionBlock_BU", "UNET.UnetSkipConnectionBlock_BU", "UNET.UnetSkipConnectionBlock_BU", "UNET.UnetSkipConnectionBlock_BU", "print", "UNET.UnetSkipConnectionBlock_BU", "range", "UNET.UnetSkipConnectionBlock_BU", "UNET.UnetSkipConnectionBlock_BU", "UNET.UnetSkipConnectionBlock_BU", "UNET.UnetSkipConnectionBlock_BU", "UNET.UnetSkipConnectionBlock_BU", "print", "UNET.UnetSkipConnectionBlock_BU", "UNET.UnetSkipConnectionBlock_BU", "UNET.UnetSkipConnectionBlock_BU", "print", "UNET.UnetSkipConnectionBlock", "range", "UNET.UnetSkipConnectionBlock", "UNET.UnetSkipConnectionBlock", "UNET.UnetSkipConnectionBlock", "UNET.UnetSkipConnectionBlock", "UNET.UnetSkipConnectionBlock", "print", "UNET.UnetSkipConnectionBlock", "range", "UNET.UnetSkipConnectionBlock", "UNET.UnetSkipConnectionBlock", "UNET.UnetSkipConnectionBlock", "UNET.UnetSkipConnectionBlock", "UNET.UnetSkipConnectionBlock", "print", "UNET.UnetSkipConnectionBlock", "range", "UNET.UnetSkipConnectionBlock", "UNET.UnetSkipConnectionBlock", "UNET.UnetSkipConnectionBlock", "UNET.UnetSkipConnectionBlock", "UNET.UnetSkipConnectionBlock", "print", "UNET.UnetSkipConnectionBlock", "UNET.UnetSkipConnectionBlock", "UNET.UnetSkipConnectionBlock", "print", "UNET.UnetSkipConnectionBlock_DC", "range", "UNET.UnetSkipConnectionBlock_DC", "UNET.UnetSkipConnectionBlock_DC", "UNET.UnetSkipConnectionBlock_DC", "UNET.UnetSkipConnectionBlock_DC", "UNET.UnetSkipConnectionBlock_DC", "print", "UNET.UnetSkipConnectionBlock_DC", "UNET.UnetSkipConnectionBlock_DC", "UNET.UnetSkipConnectionBlock_DC"], "methods", ["home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "renderer", ",", "input_nc", ",", "output_nc", ",", "ngf", "=", "64", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ",", "use_dropout", "=", "False", ")", ":", "\n", "        ", "super", "(", "UnetRenderer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# construct unet structure", "\n", "if", "renderer", "==", "'UNET_8_level_BU'", ":", "\n", "            ", "print", "(", "'>>>> UNET_8_level_BU <<<<'", ")", "\n", "num_downs", "=", "8", "\n", "unet_block", "=", "UnetSkipConnectionBlock_BU", "(", "ngf", "*", "8", ",", "ngf", "*", "8", ",", "input_nc", "=", "None", ",", "submodule", "=", "None", ",", "norm_layer", "=", "norm_layer", ",", "innermost", "=", "True", ")", "\n", "for", "i", "in", "range", "(", "num_downs", "-", "5", ")", ":", "\n", "                ", "unet_block", "=", "UnetSkipConnectionBlock_BU", "(", "ngf", "*", "8", ",", "ngf", "*", "8", ",", "input_nc", "=", "None", ",", "submodule", "=", "unet_block", ",", "norm_layer", "=", "norm_layer", ",", "use_dropout", "=", "use_dropout", ")", "\n", "", "unet_block", "=", "UnetSkipConnectionBlock_BU", "(", "ngf", "*", "4", ",", "ngf", "*", "8", ",", "input_nc", "=", "None", ",", "submodule", "=", "unet_block", ",", "norm_layer", "=", "norm_layer", ")", "\n", "unet_block", "=", "UnetSkipConnectionBlock_BU", "(", "ngf", "*", "2", ",", "ngf", "*", "4", ",", "input_nc", "=", "None", ",", "submodule", "=", "unet_block", ",", "norm_layer", "=", "norm_layer", ")", "\n", "unet_block", "=", "UnetSkipConnectionBlock_BU", "(", "ngf", ",", "ngf", "*", "2", ",", "input_nc", "=", "None", ",", "submodule", "=", "unet_block", ",", "norm_layer", "=", "norm_layer", ")", "\n", "unet_block", "=", "UnetSkipConnectionBlock_BU", "(", "output_nc", ",", "ngf", ",", "input_nc", "=", "input_nc", ",", "submodule", "=", "unet_block", ",", "outermost", "=", "True", ",", "norm_layer", "=", "norm_layer", ")", "\n", "", "elif", "renderer", "==", "'UNET_6_level_BU'", ":", "\n", "            ", "print", "(", "'>>>> UNET_6_level_BU <<<<'", ")", "\n", "num_downs", "=", "6", "\n", "unet_block", "=", "UnetSkipConnectionBlock_BU", "(", "ngf", "*", "8", ",", "ngf", "*", "8", ",", "input_nc", "=", "None", ",", "submodule", "=", "None", ",", "norm_layer", "=", "norm_layer", ",", "innermost", "=", "True", ")", "\n", "for", "i", "in", "range", "(", "num_downs", "-", "5", ")", ":", "\n", "                ", "unet_block", "=", "UnetSkipConnectionBlock_BU", "(", "ngf", "*", "8", ",", "ngf", "*", "8", ",", "input_nc", "=", "None", ",", "submodule", "=", "unet_block", ",", "norm_layer", "=", "norm_layer", ",", "use_dropout", "=", "use_dropout", ")", "\n", "", "unet_block", "=", "UnetSkipConnectionBlock_BU", "(", "ngf", "*", "4", ",", "ngf", "*", "8", ",", "input_nc", "=", "None", ",", "submodule", "=", "unet_block", ",", "norm_layer", "=", "norm_layer", ")", "\n", "unet_block", "=", "UnetSkipConnectionBlock_BU", "(", "ngf", "*", "2", ",", "ngf", "*", "4", ",", "input_nc", "=", "None", ",", "submodule", "=", "unet_block", ",", "norm_layer", "=", "norm_layer", ")", "\n", "unet_block", "=", "UnetSkipConnectionBlock_BU", "(", "ngf", ",", "ngf", "*", "2", ",", "input_nc", "=", "None", ",", "submodule", "=", "unet_block", ",", "norm_layer", "=", "norm_layer", ")", "\n", "unet_block", "=", "UnetSkipConnectionBlock_BU", "(", "output_nc", ",", "ngf", ",", "input_nc", "=", "input_nc", ",", "submodule", "=", "unet_block", ",", "outermost", "=", "True", ",", "norm_layer", "=", "norm_layer", ")", "\n", "", "elif", "renderer", "==", "'UNET_5_level_BU'", ":", "\n", "            ", "print", "(", "'>>>> UNET_5_level_BU <<<<'", ")", "\n", "num_downs", "=", "5", "\n", "unet_block", "=", "UnetSkipConnectionBlock_BU", "(", "ngf", "*", "8", ",", "ngf", "*", "8", ",", "input_nc", "=", "None", ",", "submodule", "=", "None", ",", "norm_layer", "=", "norm_layer", ",", "innermost", "=", "True", ")", "\n", "for", "i", "in", "range", "(", "num_downs", "-", "5", ")", ":", "\n", "                ", "unet_block", "=", "UnetSkipConnectionBlock_BU", "(", "ngf", "*", "8", ",", "ngf", "*", "8", ",", "input_nc", "=", "None", ",", "submodule", "=", "unet_block", ",", "norm_layer", "=", "norm_layer", ",", "use_dropout", "=", "use_dropout", ")", "\n", "", "unet_block", "=", "UnetSkipConnectionBlock_BU", "(", "ngf", "*", "4", ",", "ngf", "*", "8", ",", "input_nc", "=", "None", ",", "submodule", "=", "unet_block", ",", "norm_layer", "=", "norm_layer", ")", "\n", "unet_block", "=", "UnetSkipConnectionBlock_BU", "(", "ngf", "*", "2", ",", "ngf", "*", "4", ",", "input_nc", "=", "None", ",", "submodule", "=", "unet_block", ",", "norm_layer", "=", "norm_layer", ")", "\n", "unet_block", "=", "UnetSkipConnectionBlock_BU", "(", "ngf", ",", "ngf", "*", "2", ",", "input_nc", "=", "None", ",", "submodule", "=", "unet_block", ",", "norm_layer", "=", "norm_layer", ")", "\n", "unet_block", "=", "UnetSkipConnectionBlock_BU", "(", "output_nc", ",", "ngf", ",", "input_nc", "=", "input_nc", ",", "submodule", "=", "unet_block", ",", "outermost", "=", "True", ",", "norm_layer", "=", "norm_layer", ")", "\n", "", "elif", "renderer", "==", "'UNET_3_level_BU'", ":", "\n", "            ", "print", "(", "'>>>> UNET_3_level_BU <<<<'", ")", "\n", "unet_block", "=", "UnetSkipConnectionBlock_BU", "(", "ngf", "*", "2", ",", "ngf", "*", "8", ",", "input_nc", "=", "None", ",", "submodule", "=", "None", ",", "norm_layer", "=", "norm_layer", ",", "innermost", "=", "True", ")", "\n", "unet_block", "=", "UnetSkipConnectionBlock_BU", "(", "ngf", ",", "ngf", "*", "2", ",", "input_nc", "=", "None", ",", "submodule", "=", "unet_block", ",", "norm_layer", "=", "norm_layer", ")", "\n", "unet_block", "=", "UnetSkipConnectionBlock_BU", "(", "output_nc", ",", "ngf", ",", "input_nc", "=", "input_nc", ",", "submodule", "=", "unet_block", ",", "outermost", "=", "True", ",", "norm_layer", "=", "norm_layer", ")", "\n", "\n", "", "elif", "renderer", "==", "'UNET_8_level'", ":", "\n", "            ", "print", "(", "'>>>> UNET_8_level <<<<'", ")", "\n", "num_downs", "=", "8", "\n", "unet_block", "=", "UnetSkipConnectionBlock", "(", "ngf", "*", "8", ",", "ngf", "*", "8", ",", "input_nc", "=", "None", ",", "submodule", "=", "None", ",", "norm_layer", "=", "norm_layer", ",", "innermost", "=", "True", ")", "\n", "for", "i", "in", "range", "(", "num_downs", "-", "5", ")", ":", "\n", "                ", "unet_block", "=", "UnetSkipConnectionBlock", "(", "ngf", "*", "8", ",", "ngf", "*", "8", ",", "input_nc", "=", "None", ",", "submodule", "=", "unet_block", ",", "norm_layer", "=", "norm_layer", ",", "use_dropout", "=", "use_dropout", ")", "\n", "", "unet_block", "=", "UnetSkipConnectionBlock", "(", "ngf", "*", "4", ",", "ngf", "*", "8", ",", "input_nc", "=", "None", ",", "submodule", "=", "unet_block", ",", "norm_layer", "=", "norm_layer", ")", "\n", "unet_block", "=", "UnetSkipConnectionBlock", "(", "ngf", "*", "2", ",", "ngf", "*", "4", ",", "input_nc", "=", "None", ",", "submodule", "=", "unet_block", ",", "norm_layer", "=", "norm_layer", ")", "\n", "unet_block", "=", "UnetSkipConnectionBlock", "(", "ngf", ",", "ngf", "*", "2", ",", "input_nc", "=", "None", ",", "submodule", "=", "unet_block", ",", "norm_layer", "=", "norm_layer", ")", "\n", "unet_block", "=", "UnetSkipConnectionBlock", "(", "output_nc", ",", "ngf", ",", "input_nc", "=", "input_nc", ",", "submodule", "=", "unet_block", ",", "outermost", "=", "True", ",", "norm_layer", "=", "norm_layer", ")", "\n", "", "elif", "renderer", "==", "'UNET_6_level'", ":", "\n", "            ", "print", "(", "'>>>> UNET_6_level <<<<'", ")", "\n", "num_downs", "=", "6", "\n", "unet_block", "=", "UnetSkipConnectionBlock", "(", "ngf", "*", "8", ",", "ngf", "*", "8", ",", "input_nc", "=", "None", ",", "submodule", "=", "None", ",", "norm_layer", "=", "norm_layer", ",", "innermost", "=", "True", ")", "\n", "for", "i", "in", "range", "(", "num_downs", "-", "5", ")", ":", "\n", "                ", "unet_block", "=", "UnetSkipConnectionBlock", "(", "ngf", "*", "8", ",", "ngf", "*", "8", ",", "input_nc", "=", "None", ",", "submodule", "=", "unet_block", ",", "norm_layer", "=", "norm_layer", ",", "use_dropout", "=", "use_dropout", ")", "\n", "", "unet_block", "=", "UnetSkipConnectionBlock", "(", "ngf", "*", "4", ",", "ngf", "*", "8", ",", "input_nc", "=", "None", ",", "submodule", "=", "unet_block", ",", "norm_layer", "=", "norm_layer", ")", "\n", "unet_block", "=", "UnetSkipConnectionBlock", "(", "ngf", "*", "2", ",", "ngf", "*", "4", ",", "input_nc", "=", "None", ",", "submodule", "=", "unet_block", ",", "norm_layer", "=", "norm_layer", ")", "\n", "unet_block", "=", "UnetSkipConnectionBlock", "(", "ngf", ",", "ngf", "*", "2", ",", "input_nc", "=", "None", ",", "submodule", "=", "unet_block", ",", "norm_layer", "=", "norm_layer", ")", "\n", "unet_block", "=", "UnetSkipConnectionBlock", "(", "output_nc", ",", "ngf", ",", "input_nc", "=", "input_nc", ",", "submodule", "=", "unet_block", ",", "outermost", "=", "True", ",", "norm_layer", "=", "norm_layer", ")", "\n", "", "elif", "renderer", "==", "'UNET_5_level'", ":", "\n", "            ", "print", "(", "'>>>> UNET_5_level <<<<'", ")", "\n", "num_downs", "=", "5", "\n", "unet_block", "=", "UnetSkipConnectionBlock", "(", "ngf", "*", "8", ",", "ngf", "*", "8", ",", "input_nc", "=", "None", ",", "submodule", "=", "None", ",", "norm_layer", "=", "norm_layer", ",", "innermost", "=", "True", ")", "\n", "for", "i", "in", "range", "(", "num_downs", "-", "5", ")", ":", "\n", "                ", "unet_block", "=", "UnetSkipConnectionBlock", "(", "ngf", "*", "8", ",", "ngf", "*", "8", ",", "input_nc", "=", "None", ",", "submodule", "=", "unet_block", ",", "norm_layer", "=", "norm_layer", ",", "use_dropout", "=", "use_dropout", ")", "\n", "", "unet_block", "=", "UnetSkipConnectionBlock", "(", "ngf", "*", "4", ",", "ngf", "*", "8", ",", "input_nc", "=", "None", ",", "submodule", "=", "unet_block", ",", "norm_layer", "=", "norm_layer", ")", "\n", "unet_block", "=", "UnetSkipConnectionBlock", "(", "ngf", "*", "2", ",", "ngf", "*", "4", ",", "input_nc", "=", "None", ",", "submodule", "=", "unet_block", ",", "norm_layer", "=", "norm_layer", ")", "\n", "unet_block", "=", "UnetSkipConnectionBlock", "(", "ngf", ",", "ngf", "*", "2", ",", "input_nc", "=", "None", ",", "submodule", "=", "unet_block", ",", "norm_layer", "=", "norm_layer", ")", "\n", "unet_block", "=", "UnetSkipConnectionBlock", "(", "output_nc", ",", "ngf", ",", "input_nc", "=", "input_nc", ",", "submodule", "=", "unet_block", ",", "outermost", "=", "True", ",", "norm_layer", "=", "norm_layer", ")", "\n", "", "elif", "renderer", "==", "'UNET_3_level'", ":", "\n", "            ", "print", "(", "'>>>> UNET_3_level <<<<'", ")", "\n", "unet_block", "=", "UnetSkipConnectionBlock", "(", "ngf", "*", "2", ",", "ngf", "*", "8", ",", "input_nc", "=", "None", ",", "submodule", "=", "None", ",", "norm_layer", "=", "norm_layer", ",", "innermost", "=", "True", ")", "\n", "unet_block", "=", "UnetSkipConnectionBlock", "(", "ngf", ",", "ngf", "*", "2", ",", "input_nc", "=", "None", ",", "submodule", "=", "unet_block", ",", "norm_layer", "=", "norm_layer", ")", "\n", "unet_block", "=", "UnetSkipConnectionBlock", "(", "output_nc", ",", "ngf", ",", "input_nc", "=", "input_nc", ",", "submodule", "=", "unet_block", ",", "outermost", "=", "True", ",", "norm_layer", "=", "norm_layer", ")", "\n", "\n", "", "elif", "renderer", "==", "'UNET_5_level_DC'", ":", "\n", "            ", "print", "(", "'>>>> UNET_5_level_DC <<<<'", ")", "\n", "num_downs", "=", "5", "\n", "dilation", "=", "1", "\n", "unet_block", "=", "UnetSkipConnectionBlock_DC", "(", "ngf", "*", "8", ",", "ngf", "*", "8", ",", "input_nc", "=", "None", ",", "submodule", "=", "None", ",", "norm_layer", "=", "norm_layer", ",", "innermost", "=", "True", ",", "dilation", "=", "dilation", ")", "\n", "for", "i", "in", "range", "(", "num_downs", "-", "5", ")", ":", "\n", "                ", "dilation", "*=", "2", "\n", "unet_block", "=", "UnetSkipConnectionBlock_DC", "(", "ngf", "*", "8", ",", "ngf", "*", "8", ",", "input_nc", "=", "None", ",", "submodule", "=", "unet_block", ",", "norm_layer", "=", "norm_layer", ",", "use_dropout", "=", "use_dropout", ",", "dilation", "=", "dilation", ")", "\n", "", "dilation", "*=", "2", "\n", "unet_block", "=", "UnetSkipConnectionBlock_DC", "(", "ngf", "*", "4", ",", "ngf", "*", "8", ",", "input_nc", "=", "None", ",", "submodule", "=", "unet_block", ",", "norm_layer", "=", "norm_layer", ",", "dilation", "=", "dilation", ")", "\n", "dilation", "*=", "2", "\n", "unet_block", "=", "UnetSkipConnectionBlock_DC", "(", "ngf", "*", "2", ",", "ngf", "*", "4", ",", "input_nc", "=", "None", ",", "submodule", "=", "unet_block", ",", "norm_layer", "=", "norm_layer", ",", "dilation", "=", "dilation", ")", "\n", "dilation", "*=", "2", "\n", "unet_block", "=", "UnetSkipConnectionBlock_DC", "(", "ngf", ",", "ngf", "*", "2", ",", "input_nc", "=", "None", ",", "submodule", "=", "unet_block", ",", "norm_layer", "=", "norm_layer", ",", "dilation", "=", "dilation", ")", "\n", "dilation", "*=", "2", "\n", "unet_block", "=", "UnetSkipConnectionBlock_DC", "(", "output_nc", ",", "ngf", ",", "input_nc", "=", "input_nc", ",", "submodule", "=", "unet_block", ",", "outermost", "=", "True", ",", "norm_layer", "=", "norm_layer", ",", "dilation", "=", "dilation", ")", "\n", "", "elif", "renderer", "==", "'UNET_3_level_DC'", ":", "\n", "            ", "print", "(", "'>>>> UNET_3_level_DC <<<<'", ")", "\n", "dilation", "=", "1", "\n", "unet_block", "=", "UnetSkipConnectionBlock_DC", "(", "ngf", "*", "2", ",", "ngf", "*", "8", ",", "input_nc", "=", "None", ",", "submodule", "=", "None", ",", "norm_layer", "=", "norm_layer", ",", "innermost", "=", "True", ",", "dilation", "=", "dilation", ")", "\n", "dilation", "*=", "2", "\n", "unet_block", "=", "UnetSkipConnectionBlock_DC", "(", "ngf", ",", "ngf", "*", "2", ",", "input_nc", "=", "None", ",", "submodule", "=", "unet_block", ",", "norm_layer", "=", "norm_layer", ",", "dilation", "=", "dilation", ")", "\n", "dilation", "*=", "2", "\n", "unet_block", "=", "UnetSkipConnectionBlock_DC", "(", "output_nc", ",", "ngf", ",", "input_nc", "=", "input_nc", ",", "submodule", "=", "unet_block", ",", "outermost", "=", "True", ",", "norm_layer", "=", "norm_layer", ",", "dilation", "=", "dilation", ")", "\n", "\n", "", "self", ".", "model", "=", "unet_block", "\n", "\n"]], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.models.UNET.UnetRenderer.forward": [[314, 317], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "UNET.UnetRenderer.model"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "expressions", ",", "audio_features", ",", "features", ",", "background", ")", ":", "\n", "        ", "unet_input", "=", "torch", ".", "cat", "(", "[", "features", ",", "background", "]", ",", "1", ")", "\n", "return", "self", ".", "model", "(", "unet_input", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.models.VGG_LOSS.VGG16.__init__": [[14, 32], ["super().__init__", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "range", "range", "range", "range", "torchvision.models.vgg16", "VGG_LOSS.VGG16.slice1.add_module", "VGG_LOSS.VGG16.slice2.add_module", "VGG_LOSS.VGG16.slice3.add_module", "VGG_LOSS.VGG16.slice4.add_module", "VGG_LOSS.VGG16.parameters", "str", "str", "str", "str"], "methods", ["home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "requires_grad", "=", "False", ")", ":", "\n", "        ", "super", "(", "VGG16", ",", "self", ")", ".", "__init__", "(", ")", "\n", "vgg_pretrained_features", "=", "models", ".", "vgg16", "(", "pretrained", "=", "True", ")", ".", "features", "\n", "self", ".", "slice1", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice2", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice3", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice4", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "for", "x", "in", "range", "(", "4", ")", ":", "\n", "            ", "self", ".", "slice1", ".", "add_module", "(", "str", "(", "x", ")", ",", "vgg_pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "4", ",", "9", ")", ":", "\n", "            ", "self", ".", "slice2", ".", "add_module", "(", "str", "(", "x", ")", ",", "vgg_pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "9", ",", "16", ")", ":", "\n", "            ", "self", ".", "slice3", ".", "add_module", "(", "str", "(", "x", ")", ",", "vgg_pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "16", ",", "23", ")", ":", "\n", "            ", "self", ".", "slice4", ".", "add_module", "(", "str", "(", "x", ")", ",", "vgg_pretrained_features", "[", "x", "]", ")", "\n", "", "if", "not", "requires_grad", ":", "\n", "            ", "for", "param", "in", "self", ".", "parameters", "(", ")", ":", "\n", "                ", "param", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.models.VGG_LOSS.VGG16.forward": [[33, 49], ["VGG_LOSS.VGG16.slice1", "VGG_LOSS.VGG16.slice2", "VGG_LOSS.VGG16.slice3", "VGG_LOSS.VGG16.slice4", "collections.namedtuple", "collections.namedtuple."], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "X", ")", ":", "\n", "#normalize = transforms.Normalize(mean=[0.485, 0.456, 0.406],  std=[0.229, 0.224, 0.225])", "\n", "#X=normalize(X)", "\n", "        ", "X", "=", "0.5", "*", "(", "X", "+", "1.0", ")", "# map to [0,1]", "\n", "\n", "h", "=", "self", ".", "slice1", "(", "X", ")", "\n", "h_relu1_2", "=", "h", "\n", "h", "=", "self", ".", "slice2", "(", "h", ")", "\n", "h_relu2_2", "=", "h", "\n", "h", "=", "self", ".", "slice3", "(", "h", ")", "\n", "h_relu3_3", "=", "h", "\n", "h", "=", "self", ".", "slice4", "(", "h", ")", "\n", "h_relu4_3", "=", "h", "\n", "vgg_outputs", "=", "namedtuple", "(", "\"VggOutputs\"", ",", "[", "'relu1_2'", ",", "'relu2_2'", ",", "'relu3_3'", ",", "'relu4_3'", "]", ")", "\n", "out", "=", "vgg_outputs", "(", "h_relu1_2", ",", "h_relu2_2", ",", "h_relu3_3", ",", "h_relu4_3", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.models.VGG_LOSS.VGGLOSS.__init__": [[60, 64], ["super().__init__", "VGG_LOSS.VGG16", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.MSELoss"], "methods", ["home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "VGGLOSS", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "model", "=", "VGG16", "(", ")", "\n", "self", ".", "criterionL2", "=", "torch", ".", "nn", ".", "MSELoss", "(", "reduction", "=", "'mean'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.models.VGG_LOSS.VGGLOSS.forward": [[65, 80], ["VGG_LOSS.VGGLOSS.model", "VGG_LOSS.VGGLOSS.model", "VGG_LOSS.VGGLOSS.criterionL2", "zip", "VGG_LOSS.gram_matrix", "VGG_LOSS.gram_matrix", "VGG_LOSS.VGGLOSS.criterionL2"], "methods", ["home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.models.VGG_LOSS.gram_matrix", "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.models.VGG_LOSS.gram_matrix"], ["", "def", "forward", "(", "self", ",", "fake", ",", "target", ",", "content_weight", "=", "1.0", ",", "style_weight", "=", "1.0", ")", ":", "\n", "        ", "vgg_fake", "=", "self", ".", "model", "(", "fake", ")", "\n", "vgg_target", "=", "self", ".", "model", "(", "target", ")", "\n", "\n", "content_loss", "=", "self", ".", "criterionL2", "(", "vgg_target", ".", "relu2_2", ",", "vgg_fake", ".", "relu2_2", ")", "\n", "\n", "# gram_matrix", "\n", "gram_style", "=", "[", "gram_matrix", "(", "y", ")", "for", "y", "in", "vgg_target", "]", "\n", "style_loss", "=", "0.0", "\n", "for", "ft_y", ",", "gm_s", "in", "zip", "(", "vgg_fake", ",", "gram_style", ")", ":", "\n", "            ", "gm_y", "=", "gram_matrix", "(", "ft_y", ")", "\n", "style_loss", "+=", "self", ".", "criterionL2", "(", "gm_y", ",", "gm_s", ")", "\n", "\n", "", "total_loss", "=", "content_weight", "*", "content_loss", "+", "style_weight", "*", "style_loss", "\n", "return", "total_loss", "", "", "", ""]], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.models.VGG_LOSS.gram_matrix": [[50, 56], ["y.size", "y.view", "y.view.transpose", "y.view.bmm"], "function", ["None"], ["", "", "def", "gram_matrix", "(", "y", ")", ":", "\n", "    ", "(", "b", ",", "ch", ",", "h", ",", "w", ")", "=", "y", ".", "size", "(", ")", "\n", "features", "=", "y", ".", "view", "(", "b", ",", "ch", ",", "w", "*", "h", ")", "\n", "features_t", "=", "features", ".", "transpose", "(", "1", ",", "2", ")", "\n", "gram", "=", "features", ".", "bmm", "(", "features_t", ")", "/", "(", "ch", "*", "h", "*", "w", ")", "\n", "return", "gram", "\n", "\n"]], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.BaselModel.basel_model.MorphableModel.__init__": [[12, 60], ["torch.Module.__init__", "print", "soft_renderer.Mesh.from_obj", "print", "print", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "print", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "basel_model.MorphableModel.morph", "print", "numpy.memmap().__array__", "numpy.resize", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "numpy.memmap", "basel_model.MorphableModel.expression_basis.astype"], "methods", ["home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.options.base_options.BaseOptions.__init__", "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.BaselModel.basel_model.MorphableModel.morph"], ["    ", "def", "__init__", "(", "self", ",", "filename_average", "=", "''", ")", ":", "\n", "        ", "super", "(", "MorphableModel", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "print", "(", "'Load Morphable Model (Basel)'", ")", "\n", "\n", "#filename_mesh = os.path.join(opt.dataroot, opt.phase + '/average_model.obj')", "\n", "filename_mesh", "=", "filename_average", "\n", "if", "filename_average", "==", "''", ":", "\n", "            ", "print", "(", "'use default identity'", ")", "\n", "filename_mesh", "=", "'./BaselModel/average.obj'", "\n", "", "mesh", "=", "sr", ".", "Mesh", ".", "from_obj", "(", "filename_mesh", ",", "normalization", "=", "False", ",", "load_texture", "=", "True", ")", "\n", "self", ".", "average_vertices", "=", "mesh", ".", "vertices", "[", "0", "]", "\n", "self", ".", "faces", "=", "mesh", ".", "faces", "[", "0", "]", "\n", "self", ".", "average_vertices", "=", "self", ".", "average_vertices", "[", "None", ",", ":", ",", ":", "]", "# [num_vertices, XYZ] -> [batch_size=1, num_vertices, XYZ]", "\n", "self", ".", "faces", "=", "self", ".", "faces", "[", "None", ",", ":", ",", ":", "]", "# [num_faces, 3] -> [batch_size=1, num_faces, 3]", "\n", "self", ".", "textures", "=", "mesh", ".", "textures", "\n", "\n", "self", ".", "num_vertices", "=", "self", ".", "average_vertices", ".", "shape", "[", "1", "]", "\n", "self", ".", "num_faces", "=", "self", ".", "faces", ".", "shape", "[", "1", "]", "\n", "print", "(", "'vertices:'", ",", "self", ".", "average_vertices", ".", "shape", ")", "\n", "print", "(", "'faces:'", ",", "self", ".", "faces", ".", "shape", ")", "\n", "\n", "## basis function", "\n", "self", ".", "expression_basis", "=", "np", ".", "memmap", "(", "'./BaselModel/ExpressionBasis.matrix'", ",", "dtype", "=", "'float32'", ",", "mode", "=", "'r'", ")", ".", "__array__", "(", ")", "[", "1", ":", "]", "# first entry is the size", "\n", "self", ".", "expression_basis", "=", "np", ".", "resize", "(", "self", ".", "expression_basis", ",", "(", "N_EXPRESSIONS", ",", "self", ".", "num_vertices", ",", "4", ")", ")", "[", ":", ",", ":", ",", "0", ":", "3", "]", "\n", "self", ".", "expression_basis", "=", "torch", ".", "tensor", "(", "self", ".", "expression_basis", ".", "astype", "(", "np", ".", "float32", ")", ")", ".", "cuda", "(", ")", "# N_EXPRESSIONS x num_vertices x 3", "\n", "self", ".", "expression_basis", "=", "torch", ".", "transpose", "(", "self", ".", "expression_basis", ",", "0", ",", "2", ")", "# transpose for matmul", "\n", "print", "(", "'expression_basis'", ",", "self", ".", "expression_basis", ".", "shape", ")", "\n", "\n", "\n", "#texture_size = 2", "\n", "#self.textures = torch.ones(1, self.faces.shape[1], texture_size, texture_size, texture_size, 3, dtype=torch.float32).cuda()", "\n", "#print('textures:', self.textures.shape)", "\n", "\n", "## ## debug", "\n", "## zeroExpr = torch.zeros(1, N_EXPRESSIONS, dtype=torch.float32).cuda()", "\n", "## self.morph(zeroExpr)", "\n", "## self.save_model_to_obj_file('model_zero_expression.obj')", "\n", "## ##", "\n", "## onesExpr = torch.ones(1, N_EXPRESSIONS, dtype=torch.float32).cuda()", "\n", "## self.morph(onesExpr)", "\n", "## self.save_model_to_obj_file('model_ones_expression.obj')", "\n", "## exit()", "\n", "## ##", "\n", "\n", "# default expression", "\n", "zeroExpr", "=", "torch", ".", "zeros", "(", "1", ",", "N_EXPRESSIONS", ",", "dtype", "=", "torch", ".", "float32", ")", ".", "cuda", "(", ")", "\n", "self", ".", "morph", "(", "zeroExpr", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.BaselModel.basel_model.MorphableModel.save_model_to_obj_file": [[62, 82], ["basel_model.MorphableModel.faces.detach().cpu().numpy", "basel_model.MorphableModel.vertices.detach().cpu().numpy", "open", "range", "open.close", "mask.detach().cpu().numpy", "type", "type", "range", "range", "open.write", "basel_model.MorphableModel.faces.detach().cpu", "basel_model.MorphableModel.vertices.detach().cpu", "type", "type", "open.write", "open.write", "mask.detach().cpu", "basel_model.MorphableModel.faces.detach", "basel_model.MorphableModel.vertices.detach", "str", "mask.detach", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str"], "methods", ["None"], ["", "def", "save_model_to_obj_file", "(", "self", ",", "filename", ",", "mask", "=", "None", ")", ":", "\n", "        ", "faces_cpu", "=", "self", ".", "faces", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "vertices_cpu", "=", "self", ".", "vertices", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "mask_cpu", "=", "None", "\n", "if", "not", "type", "(", "mask", ")", "==", "type", "(", "None", ")", ":", "\n", "            ", "mask_cpu", "=", "mask", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "", "f", "=", "open", "(", "filename", ",", "'w'", ")", "\n", "if", "type", "(", "mask", ")", "==", "type", "(", "None", ")", ":", "\n", "            ", "for", "i", "in", "range", "(", "0", ",", "self", ".", "num_vertices", ")", ":", "\n", "                ", "f", ".", "write", "(", "'v '", "+", "str", "(", "vertices_cpu", "[", "0", ",", "i", ",", "0", "]", ")", "+", "' '", "+", "str", "(", "vertices_cpu", "[", "0", ",", "i", ",", "1", "]", ")", "+", "' '", "+", "str", "(", "vertices_cpu", "[", "0", ",", "i", ",", "2", "]", ")", "+", "'\\n'", ")", "\n", "", "", "else", ":", "\n", "            ", "for", "i", "in", "range", "(", "0", ",", "self", ".", "num_vertices", ")", ":", "\n", "                ", "f", ".", "write", "(", "'v '", "+", "str", "(", "vertices_cpu", "[", "0", ",", "i", ",", "0", "]", ")", "+", "' '", "+", "str", "(", "vertices_cpu", "[", "0", ",", "i", ",", "1", "]", ")", "+", "' '", "+", "str", "(", "vertices_cpu", "[", "0", ",", "i", ",", "2", "]", ")", "+", "' '", "+", "str", "(", "mask_cpu", "[", "i", "]", ")", "+", "' '", "+", "str", "(", "mask_cpu", "[", "i", "]", ")", "+", "' '", "+", "str", "(", "mask_cpu", "[", "i", "]", ")", "+", "' 1'", "+", "'\\n'", ")", "\n", "\n", "", "", "for", "i", "in", "range", "(", "0", ",", "self", ".", "num_faces", ")", ":", "\n", "            ", "f", ".", "write", "(", "'f '", "+", "str", "(", "faces_cpu", "[", "0", ",", "i", ",", "0", "]", "+", "1", ")", "+", "'// '", "+", "str", "(", "faces_cpu", "[", "0", ",", "i", ",", "1", "]", "+", "1", ")", "+", "'// '", "+", "str", "(", "faces_cpu", "[", "0", ",", "i", ",", "2", "]", "+", "1", ")", "+", "'//\\n'", ")", "\n", "\n", "", "f", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.BaselModel.basel_model.MorphableModel.compute_expression_delta": [[83, 85], ["torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose"], "methods", ["None"], ["", "def", "compute_expression_delta", "(", "self", ",", "expressions", ")", ":", "\n", "        ", "return", "torch", ".", "transpose", "(", "torch", ".", "matmul", "(", "self", ".", "expression_basis", ",", "torch", ".", "transpose", "(", "expressions", ",", "0", ",", "1", ")", ")", ",", "0", ",", "2", ")", "# note that matmul wants to have this order:  (a x b x c) x (c x m) => (a x b x m)", "\n", "\n"]], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.BaselModel.basel_model.MorphableModel.morph": [[86, 89], ["basel_model.MorphableModel.compute_expression_delta"], "methods", ["home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.BaselModel.basel_model.MorphableModel.compute_expression_delta"], ["", "def", "morph", "(", "self", ",", "expressions", ")", ":", "\n", "        ", "self", ".", "vertices", "=", "self", ".", "average_vertices", "+", "self", ".", "compute_expression_delta", "(", "expressions", ")", "\n", "return", "self", ".", "vertices", "\n", "\n"]], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.BaselModel.basel_model.MorphableModel.LoadMask": [[92, 108], ["numpy.zeros", "open", "open.close", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "print", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "float", "numpy.zeros.astype", "line[].split"], "methods", ["None"], ["", "def", "LoadMask", "(", "self", ",", "filename", "=", "''", ")", ":", "\n", "        ", "if", "filename", "==", "''", ":", "\n", "            ", "print", "(", "'use default mask'", ")", "\n", "filename", "=", "'./BaselModel/mask/defaultMask_mouth.obj'", "\n", "\n", "", "mask", "=", "np", ".", "zeros", "(", "self", ".", "num_vertices", ")", "\n", "file", "=", "open", "(", "filename", ",", "'r'", ")", "\n", "i", "=", "0", "\n", "for", "line", "in", "file", ":", "\n", "            ", "if", "line", "[", "0", "]", "==", "'v'", ":", "\n", "                ", "floats", "=", "[", "float", "(", "x", ")", "for", "x", "in", "line", "[", "1", ":", "]", ".", "split", "(", ")", "]", "\n", "if", "floats", "[", "3", "]", "==", "1.0", "and", "floats", "[", "4", "]", "==", "0.0", "and", "floats", "[", "5", "]", "==", "0.0", ":", "\n", "                    ", "mask", "[", "i", "]", "=", "1.0", "\n", "", "i", "+=", "1", "\n", "", "", "file", ".", "close", "(", ")", "\n", "return", "torch", ".", "tensor", "(", "mask", ".", "astype", "(", "np", ".", "float32", ")", ")", ".", "cuda", "(", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.data.face_dataset.FaceDataset.modify_commandline_options": [[49, 52], ["None"], "methods", ["None"], ["ids", ".", "append", "(", "i", ")", "\n", "", "return", "ids", "\n", "\n", "", "def", "make_dataset_png_ids", "(", "dir", ")", ":", "\n"]], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.data.face_dataset.FaceDataset.initialize": [[53, 87], ["os.path.join", "print", "print", "face_dataset.make_ids", "face_dataset.load_expressions", "min", "print", "face_dataset.make_dataset", "len", "len", "opt.dataroot.split"], "methods", ["home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.data.audio_dataset.make_ids", "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.data.facetmp_dataset.load_expressions", "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.data.audio_dataset.make_dataset"], ["    ", "images", "=", "[", "]", "\n", "ids", "=", "[", "]", "\n", "assert", "os", ".", "path", ".", "isdir", "(", "dir", ")", ",", "'%s is not a valid directory'", "%", "dir", "\n", "for", "root", ",", "_", ",", "fnames", "in", "sorted", "(", "os", ".", "walk", "(", "dir", ")", ")", ":", "\n", "        ", "for", "fname", "in", "fnames", ":", "\n", "            ", "if", "any", "(", "fname", ".", "endswith", "(", "extension", ")", "for", "extension", "in", "[", "'.png'", ",", "'.PNG'", "]", ")", ":", "\n", "                ", "id_str", "=", "fname", "[", ":", "-", "4", "]", "\n", "i", "=", "int", "(", "id_str", ")", "\n", "ids", ".", "append", "(", "i", ")", "\n", "", "", "", "ids", "=", "sorted", "(", "ids", ")", "\n", "return", "ids", "\n", "\n", "", "def", "make_dataset_exr_ids", "(", "dir", ")", ":", "\n", "    ", "images", "=", "[", "]", "\n", "ids", "=", "[", "]", "\n", "assert", "os", ".", "path", ".", "isdir", "(", "dir", ")", ",", "'%s is not a valid directory'", "%", "dir", "\n", "for", "root", ",", "_", ",", "fnames", "in", "sorted", "(", "os", ".", "walk", "(", "dir", ")", ")", ":", "\n", "        ", "for", "fname", "in", "fnames", ":", "\n", "            ", "if", "any", "(", "fname", ".", "endswith", "(", "extension", ")", "for", "extension", "in", "[", "'.exr'", ",", "'.EXR'", "]", ")", ":", "\n", "                ", "id_str", "=", "fname", "[", ":", "-", "4", "]", "\n", "i", "=", "int", "(", "id_str", ")", "\n", "ids", ".", "append", "(", "i", ")", "\n", "", "", "", "ids", "=", "sorted", "(", "ids", ")", "\n", "return", "ids", "\n", "\n", "\n", "", "def", "load_intrinsics", "(", "input_dir", ")", ":", "\n", "    ", "file", "=", "open", "(", "input_dir", "+", "\"/intrinsics.txt\"", ",", "\"r\"", ")", "\n", "intrinsics", "=", "[", "[", "(", "float", "(", "x", ")", "for", "x", "in", "line", ".", "split", "(", ")", ")", "]", "for", "line", "in", "file", "]", "\n", "file", ".", "close", "(", ")", "\n", "intrinsics", "=", "list", "(", "intrinsics", "[", "0", "]", "[", "0", "]", ")", "\n", "return", "intrinsics", "\n", "\n", "", "def", "load_rigids", "(", "input_dir", ")", ":", "\n", "    ", "file", "=", "open", "(", "input_dir", "+", "\"/rigid.txt\"", ",", "\"r\"", ")", "\n"]], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.data.face_dataset.FaceDataset.getSampleWeights": [[88, 91], ["numpy.ones"], "methods", ["None"], ["rigid_floats", "=", "[", "[", "float", "(", "x", ")", "for", "x", "in", "line", ".", "split", "(", ")", "]", "for", "line", "in", "file", "]", "# note that it stores 5 lines per matrix (blank line)", "\n", "file", ".", "close", "(", ")", "\n", "all_rigids", "=", "[", "[", "rigid_floats", "[", "4", "*", "idx", "+", "0", "]", ",", "rigid_floats", "[", "4", "*", "idx", "+", "1", "]", ",", "rigid_floats", "[", "4", "*", "idx", "+", "2", "]", ",", "rigid_floats", "[", "4", "*", "idx", "+", "3", "]", "]", "for", "idx", "in", "range", "(", "0", ",", "len", "(", "rigid_floats", ")", "//", "4", ")", "]", "\n", "return", "all_rigids", "\n"]], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.data.face_dataset.FaceDataset.getExtrinsics": [[186, 188], ["None"], "methods", ["None"], ["", "def", "getExtrinsics", "(", "self", ",", "idx", ")", ":", "\n", "        ", "return", "self", ".", "extrinsics", "[", "self", ".", "uvs_ids", "[", "idx", "%", "self", ".", "n_frames_total", "]", "]", "\n", "", "def", "getIntrinsics", "(", "self", ",", "idx", ")", ":", "\n"]], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.data.face_dataset.FaceDataset.getIntrinsics": [[188, 190], ["None"], "methods", ["None"], ["", "def", "getIntrinsics", "(", "self", ",", "idx", ")", ":", "\n", "        ", "return", "self", ".", "intrinsics", "\n", "", "def", "getIdentities", "(", "self", ",", "idx", ")", ":", "\n"]], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.data.face_dataset.FaceDataset.getIdentities": [[190, 192], ["None"], "methods", ["None"], ["", "def", "getIdentities", "(", "self", ",", "idx", ")", ":", "\n", "        ", "return", "self", ".", "identities", "[", "self", ".", "uvs_ids", "[", "idx", "%", "self", ".", "n_frames_total", "]", "]", "\n", "", "def", "getExpressions", "(", "self", ",", "idx", ")", ":", "\n"]], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.data.face_dataset.FaceDataset.getExpressions": [[92, 94], ["None"], "methods", ["None"], ["\n", "", "def", "load_expressions", "(", "input_dir", ")", ":", "\n", "    ", "file", "=", "open", "(", "input_dir", "+", "\"/expression.txt\"", ",", "\"r\"", ")", "\n"]], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.data.face_dataset.FaceDataset.getAudioFilename": [[95, 97], ["os.path.join"], "methods", ["None"], ["expressions", "=", "[", "[", "float", "(", "x", ")", "for", "x", "in", "line", ".", "split", "(", ")", "]", "for", "line", "in", "file", "]", "\n", "file", ".", "close", "(", ")", "\n", "return", "expressions", "\n"]], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.data.face_dataset.FaceDataset.getImageFilename": [[198, 202], ["os.path.join", "str().zfill", "str"], "methods", ["None"], ["", "def", "getImageFilename", "(", "self", ",", "idx", ")", ":", "\n", "        ", "image_id", "=", "self", ".", "image_ids", "[", "idx", "%", "self", ".", "n_frames_total", "]", "\n", "img_fname", "=", "os", ".", "path", ".", "join", "(", "self", ".", "image_dir", ",", "str", "(", "image_id", ")", ".", "zfill", "(", "5", ")", "+", "'.png'", ")", "\n", "return", "img_fname", "\n", "#img_numpy = np.asarray(Image.open(img_fname))", "\n"]], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.data.face_dataset.FaceDataset.getAudioFeatureFilename": [[98, 102], ["os.path.join", "str"], "methods", ["None"], ["\n", "", "def", "load_identity", "(", "input_dir", ")", ":", "\n", "    ", "file", "=", "open", "(", "input_dir", "+", "\"/identities.txt\"", ",", "\"r\"", ")", "\n", "identity", "=", "[", "[", "float", "(", "x", ")", "for", "x", "in", "line", ".", "split", "(", ")", "]", "for", "line", "in", "file", "]", "\n", "file", ".", "close", "(", ")", "\n"]], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.data.face_dataset.FaceDataset.computeCrop": [[211, 246], ["torch.nonzero", "mask_indices[].data.cpu", "numpy.array", "numpy.random.randint", "numpy.random.randint", "int", "int", "int", "int", "int", "int", "int", "int", "numpy.floor", "numpy.floor", "float", "float", "numpy.random.randint"], "methods", ["None"], ["", "def", "computeCrop", "(", "self", ",", "mask", ",", "MULTIPLE_OF", "=", "64", ",", "random_size", "=", "False", ")", ":", "\n", "        ", "IMG_DIM_X", "=", "mask", ".", "shape", "[", "2", "]", "\n", "IMG_DIM_Y", "=", "mask", ".", "shape", "[", "1", "]", "\n", "if", "random_size", ":", "\n", "# random dimensions", "\n", "            ", "new_dim_x", "=", "np", ".", "random", ".", "randint", "(", "int", "(", "IMG_DIM_X", "*", "0.75", ")", ",", "IMG_DIM_X", "+", "1", ")", "\n", "new_dim_y", "=", "np", ".", "random", ".", "randint", "(", "int", "(", "IMG_DIM_Y", "*", "0.75", ")", ",", "IMG_DIM_Y", "+", "1", ")", "\n", "new_dim_x", "=", "int", "(", "np", ".", "floor", "(", "new_dim_x", "/", "float", "(", "MULTIPLE_OF", ")", ")", "*", "MULTIPLE_OF", ")", "\n", "new_dim_y", "=", "int", "(", "np", ".", "floor", "(", "new_dim_y", "/", "float", "(", "MULTIPLE_OF", ")", ")", "*", "MULTIPLE_OF", ")", "\n", "", "else", ":", "\n", "            ", "new_dim_x", "=", "3", "*", "MULTIPLE_OF", "\n", "new_dim_y", "=", "3", "*", "MULTIPLE_OF", "\n", "\n", "# check dims", "\n", "", "if", "new_dim_x", ">", "IMG_DIM_X", ":", "new_dim_x", "-=", "MULTIPLE_OF", "\n", "if", "new_dim_y", ">", "IMG_DIM_Y", ":", "new_dim_y", "-=", "MULTIPLE_OF", "\n", "\n", "# random pos", "\n", "mask_indices", "=", "torch", ".", "nonzero", "(", "mask", ")", "\n", "_", ",", "bb_mid_point_y", ",", "bb_mid_point_x", "=", "mask_indices", "[", "np", ".", "random", ".", "randint", "(", "0", ",", "mask_indices", ".", "shape", "[", "0", "]", ")", "]", ".", "data", ".", "cpu", "(", ")", "\n", "#print('bb_mid_point', bb_mid_point_x, bb_mid_point_y)", "\n", "\n", "offset_x", "=", "bb_mid_point_x", "-", "new_dim_x", "/", "2", "\n", "offset_y", "=", "bb_mid_point_y", "-", "new_dim_y", "/", "2", "\n", "\n", "\n", "if", "IMG_DIM_X", "==", "new_dim_x", ":", "offset_x", "=", "0", "\n", "if", "offset_x", "<", "0", ":", "offset_x", "=", "0", "\n", "if", "offset_x", "+", "new_dim_x", ">=", "IMG_DIM_X", ":", "offset_x", "=", "IMG_DIM_X", "-", "new_dim_x", "\n", "\n", "if", "IMG_DIM_Y", "==", "new_dim_y", ":", "offset_y", "=", "0", "\n", "if", "offset_y", "<", "0", ":", "offset_y", "=", "0", "\n", "if", "offset_y", "+", "new_dim_y", ">=", "IMG_DIM_Y", ":", "offset_y", "=", "IMG_DIM_Y", "-", "new_dim_y", "\n", "\n", "return", "np", ".", "array", "(", "[", "int", "(", "offset_x", ")", ",", "int", "(", "offset_y", ")", ",", "int", "(", "new_dim_x", ")", ",", "int", "(", "new_dim_y", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.data.face_dataset.FaceDataset.__getitem__": [[104, 192], ["numpy.zeros", "numpy.zeros", "numpy.asarray", "torch.tensor", "torch.zeros", "os.path.join", "numpy.load", "numpy.resize", "torchvision.ToTensor", "numpy.resize.astype", "range", "range", "range", "numpy.array", "numpy.array", "numpy.array().astype", "str", "os.path.join", "numpy.load", "numpy.resize", "torch.cat", "os.path.join", "numpy.load", "numpy.resize", "torch.cat", "os.path.join", "numpy.load", "numpy.resize", "torch.cat", "torchvision.ToTensor", "numpy.resize.astype", "len", "torchvision.ToTensor", "numpy.resize.astype", "torchvision.ToTensor", "numpy.resize.astype", "numpy.array", "str", "str", "str"], "methods", ["None"], ["\n", "\n", "\n", "", "class", "FaceDataset", "(", "BaseDataset", ")", ":", "\n", "    ", "@", "staticmethod", "\n", "def", "modify_commandline_options", "(", "parser", ",", "is_train", ")", ":", "\n", "        ", "return", "parser", "\n", "\n", "", "def", "initialize", "(", "self", ",", "opt", ")", ":", "\n", "        ", "self", ".", "opt", "=", "opt", "\n", "\n", "# directories", "\n", "self", ".", "dataroot", "=", "opt", ".", "dataroot", "\n", "self", ".", "audio_feature_dir", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "dataroot", ",", "'audio_feature'", ")", "\n", "self", ".", "image_dir", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "dataroot", ",", "'images'", ")", "\n", "self", ".", "uvs_dir", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "dataroot", ",", "'uvs'", ")", "\n", "\n", "# debug print", "\n", "print", "(", "'load sequence:'", ",", "self", ".", "dataroot", ")", "\n", "print", "(", "'\\taudio_feature_dir:'", ",", "self", ".", "audio_feature_dir", ")", "\n", "print", "(", "'\\timage_dir:'", ",", "self", ".", "image_dir", ")", "\n", "print", "(", "'\\tuvs_dir:'", ",", "self", ".", "uvs_dir", ")", "\n", "\n", "# generate index maps", "\n", "audio_ids", "=", "make_ids", "(", "make_dataset", "(", "self", ".", "audio_feature_dir", ")", ",", "self", ".", "dataroot", ")", "\n", "image_ids", "=", "make_dataset_png_ids", "(", "self", ".", "image_dir", ")", "\n", "uvs_ids", "=", "make_dataset_exr_ids", "(", "self", ".", "uvs_dir", ")", "\n", "\n", "# get model parameters", "\n", "intrinsics", "=", "load_intrinsics", "(", "self", ".", "dataroot", ")", "\n", "extrinsics", "=", "load_rigids", "(", "self", ".", "dataroot", ")", "\n", "expressions", "=", "load_expressions", "(", "self", ".", "dataroot", ")", "\n", "identities", "=", "load_identity", "(", "self", ".", "dataroot", ")", "\n", "\n", "if", "opt", ".", "phase", "==", "'test'", ":", "# test overwrites the audio and uv files, as well as expressions", "\n", "            ", "print", "(", "'Test mode. Overwriting audio, uv and expressions'", ")", "\n", "print", "(", "'source sequence:'", ",", "opt", ".", "source_dir", ")", "\n", "dataroot", "=", "opt", ".", "source_dir", "\n", "self", ".", "audio_feature_dir", "=", "os", ".", "path", ".", "join", "(", "dataroot", ",", "'audio_feature'", ")", "\n", "self", ".", "uvs_dir", "=", "os", ".", "path", ".", "join", "(", "dataroot", ",", "'uvs'", ")", "\n", "audio_ids", "=", "make_ids", "(", "make_dataset", "(", "self", ".", "audio_feature_dir", ")", ",", "dataroot", ")", "\n", "uvs_ids", "=", "make_dataset_exr_ids", "(", "self", ".", "uvs_dir", ")", "\n", "intrinsics", "=", "load_intrinsics", "(", "dataroot", ")", "\n", "extrinsics", "=", "load_rigids", "(", "dataroot", ")", "\n", "expressions", "=", "load_expressions", "(", "dataroot", ")", "\n", "identities", "=", "load_identity", "(", "dataroot", ")", "\n", "\n", "", "print", "(", "'\\tnum audio_ids:'", ",", "len", "(", "audio_ids", ")", ")", "\n", "print", "(", "'\\tnum image_ids:'", ",", "len", "(", "image_ids", ")", ")", "\n", "print", "(", "'\\tnum uvs_ids:'", ",", "len", "(", "uvs_ids", ")", ")", "\n", "\n", "\n", "# set data", "\n", "min_len", "=", "min", "(", "len", "(", "audio_ids", ")", ",", "len", "(", "image_ids", ")", ",", "len", "(", "uvs_ids", ")", ",", "len", "(", "extrinsics", ")", ",", "len", "(", "expressions", ")", ")", "\n", "self", ".", "audio_ids", "=", "audio_ids", "[", ":", "min_len", "]", "\n", "self", ".", "image_ids", "=", "image_ids", "[", ":", "min_len", "]", "\n", "self", ".", "uvs_ids", "=", "uvs_ids", "[", ":", "min_len", "]", "\n", "self", ".", "intrinsics", "=", "intrinsics", "\n", "self", ".", "extrinsics", "=", "extrinsics", "[", ":", "]", "#extrinsics[:min_len]", "\n", "self", ".", "expressions", "=", "expressions", "[", ":", "]", "#expressions[:min_len]", "\n", "self", ".", "identities", "=", "identities", "[", ":", "]", "#identities[:min_len]", "\n", "self", ".", "n_frames_total", "=", "min_len", "\n", "\n", "print", "(", "'\\tnum frames:'", ",", "self", ".", "n_frames_total", ")", "\n", "\n", "\n", "opt", ".", "nTrainObjects", "=", "1", "\n", "opt", ".", "nValObjects", "=", "1", "\n", "opt", ".", "nTestObjects", "=", "1", "\n", "\n", "\n", "opt", ".", "test_sequence_names", "=", "[", "[", "opt", ".", "dataroot", ".", "split", "(", "\"/\"", ")", "[", "-", "1", "]", ",", "'train'", "]", "]", "\n", "if", "opt", ".", "phase", "==", "'test'", ":", "\n", "            ", "opt", ".", "test_sequence_names", "=", "[", "[", "opt", ".", "source_dir", ".", "split", "(", "\"/\"", ")", "[", "-", "1", "]", ",", "'test'", "]", "]", "\n", "print", "(", "'test:'", ",", "opt", ".", "test_sequence_names", ")", "\n", "\n", "", "assert", "(", "opt", ".", "resize_or_crop", "==", "'resize_and_crop'", ")", "\n", "\n", "", "def", "getSampleWeights", "(", "self", ")", ":", "\n", "        ", "weights", "=", "np", ".", "ones", "(", "(", "self", ".", "n_frames_total", ")", ")", "\n", "return", "weights", "\n", "\n", "", "def", "getExtrinsics", "(", "self", ",", "idx", ")", ":", "\n", "        ", "return", "self", ".", "extrinsics", "[", "self", ".", "uvs_ids", "[", "idx", "%", "self", ".", "n_frames_total", "]", "]", "\n", "", "def", "getIntrinsics", "(", "self", ",", "idx", ")", ":", "\n", "        ", "return", "self", ".", "intrinsics", "\n", "", "def", "getIdentities", "(", "self", ",", "idx", ")", ":", "\n", "        ", "return", "self", ".", "identities", "[", "self", ".", "uvs_ids", "[", "idx", "%", "self", ".", "n_frames_total", "]", "]", "\n", "", "def", "getExpressions", "(", "self", ",", "idx", ")", ":", "\n"]], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.data.face_dataset.FaceDataset.__len__": [[193, 195], ["None"], "methods", ["None"], ["        ", "return", "self", ".", "expressions", "[", "self", ".", "uvs_ids", "[", "idx", "%", "self", ".", "n_frames_total", "]", "]", "\n", "\n", "", "def", "getAudioFilename", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.data.face_dataset.FaceDataset.name": [[196, 198], ["None"], "methods", ["None"], ["        ", "return", "os", ".", "path", ".", "join", "(", "self", ".", "dataroot", ",", "'audio.wav'", ")", "\n", "\n", "", "def", "getImageFilename", "(", "self", ",", "idx", ")", ":", "\n"]], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.data.face_dataset.make_dataset": [[11, 29], ["os.path.isdir", "sorted", "sorted", "os.walk", "os.path.join", "images.append", "any", "str", "int", "sorted.append", "fname.endswith"], "function", ["None"], ["\n", "#def make_dataset(dir):", "\n", "#    images = []", "\n", "#    assert os.path.isdir(dir), '%s is not a valid directory' % dir", "\n", "#    for root, _, fnames in sorted(os.walk(dir)):", "\n", "#        for fname in fnames:", "\n", "#            if any(fname.endswith(extension) for extension in ['.bin', '.BIN']):", "\n", "#                path = os.path.join(root, fname)", "\n", "#                images.append(path)", "\n", "#    return sorted(images)", "\n", "\n", "def", "make_dataset", "(", "dir", ")", ":", "\n", "    ", "images", "=", "[", "]", "\n", "ids", "=", "[", "]", "\n", "assert", "os", ".", "path", ".", "isdir", "(", "dir", ")", ",", "'%s is not a valid directory'", "%", "dir", "\n", "for", "root", ",", "_", ",", "fnames", "in", "sorted", "(", "os", ".", "walk", "(", "dir", ")", ")", ":", "\n", "        ", "for", "fname", "in", "fnames", ":", "\n", "            ", "if", "any", "(", "fname", ".", "endswith", "(", "extension", ")", "for", "extension", "in", "[", "'.npy'", ",", "'.NPY'", "]", ")", ":", "\n", "#.deepspeech.npy", "\n"]], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.data.face_dataset.make_ids": [[30, 40], ["fname.rfind", "int", "ids.append"], "function", ["None"], ["                ", "id_str", "=", "fname", "[", ":", "-", "15", "]", "#4]", "\n", "i", "=", "int", "(", "id_str", ")", "\n", "ids", ".", "append", "(", "i", ")", "\n", "", "", "", "ids", "=", "sorted", "(", "ids", ")", "\n", "\n", "for", "id", "in", "ids", ":", "\n", "        ", "fname", "=", "str", "(", "id", ")", "+", "'.deepspeech.npy'", "\n", "path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "fname", ")", "\n", "images", ".", "append", "(", "path", ")", "\n", "", "return", "images", "\n", "\n"]], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.data.face_dataset.make_dataset_png_ids": [[52, 64], ["os.path.isdir", "sorted", "sorted", "os.walk", "any", "int", "sorted.append", "fname.endswith"], "function", ["None"], ["", "def", "make_dataset_png_ids", "(", "dir", ")", ":", "\n", "    ", "images", "=", "[", "]", "\n", "ids", "=", "[", "]", "\n", "assert", "os", ".", "path", ".", "isdir", "(", "dir", ")", ",", "'%s is not a valid directory'", "%", "dir", "\n", "for", "root", ",", "_", ",", "fnames", "in", "sorted", "(", "os", ".", "walk", "(", "dir", ")", ")", ":", "\n", "        ", "for", "fname", "in", "fnames", ":", "\n", "            ", "if", "any", "(", "fname", ".", "endswith", "(", "extension", ")", "for", "extension", "in", "[", "'.png'", ",", "'.PNG'", "]", ")", ":", "\n", "                ", "id_str", "=", "fname", "[", ":", "-", "4", "]", "\n", "i", "=", "int", "(", "id_str", ")", "\n", "ids", ".", "append", "(", "i", ")", "\n", "", "", "", "ids", "=", "sorted", "(", "ids", ")", "\n", "return", "ids", "\n", "\n"]], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.data.face_dataset.make_dataset_exr_ids": [[65, 77], ["os.path.isdir", "sorted", "sorted", "os.walk", "any", "int", "sorted.append", "fname.endswith"], "function", ["None"], ["", "def", "make_dataset_exr_ids", "(", "dir", ")", ":", "\n", "    ", "images", "=", "[", "]", "\n", "ids", "=", "[", "]", "\n", "assert", "os", ".", "path", ".", "isdir", "(", "dir", ")", ",", "'%s is not a valid directory'", "%", "dir", "\n", "for", "root", ",", "_", ",", "fnames", "in", "sorted", "(", "os", ".", "walk", "(", "dir", ")", ")", ":", "\n", "        ", "for", "fname", "in", "fnames", ":", "\n", "            ", "if", "any", "(", "fname", ".", "endswith", "(", "extension", ")", "for", "extension", "in", "[", "'.exr'", ",", "'.EXR'", "]", ")", ":", "\n", "                ", "id_str", "=", "fname", "[", ":", "-", "4", "]", "\n", "i", "=", "int", "(", "id_str", ")", "\n", "ids", ".", "append", "(", "i", ")", "\n", "", "", "", "ids", "=", "sorted", "(", "ids", ")", "\n", "return", "ids", "\n", "\n"]], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.data.face_dataset.load_intrinsics": [[79, 85], ["open", "open.close", "list", "float", "line.split"], "function", ["None"], ["", "def", "load_intrinsics", "(", "input_dir", ")", ":", "\n", "    ", "file", "=", "open", "(", "input_dir", "+", "\"/intrinsics.txt\"", ",", "\"r\"", ")", "\n", "intrinsics", "=", "[", "[", "(", "float", "(", "x", ")", "for", "x", "in", "line", ".", "split", "(", ")", ")", "]", "for", "line", "in", "file", "]", "\n", "file", ".", "close", "(", ")", "\n", "intrinsics", "=", "list", "(", "intrinsics", "[", "0", "]", "[", "0", "]", ")", "\n", "return", "intrinsics", "\n", "\n"]], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.data.face_dataset.load_rigids": [[86, 92], ["open", "open.close", "float", "range", "line.split", "len"], "function", ["None"], ["", "def", "load_rigids", "(", "input_dir", ")", ":", "\n", "    ", "file", "=", "open", "(", "input_dir", "+", "\"/rigid.txt\"", ",", "\"r\"", ")", "\n", "rigid_floats", "=", "[", "[", "float", "(", "x", ")", "for", "x", "in", "line", ".", "split", "(", ")", "]", "for", "line", "in", "file", "]", "# note that it stores 5 lines per matrix (blank line)", "\n", "file", ".", "close", "(", ")", "\n", "all_rigids", "=", "[", "[", "rigid_floats", "[", "4", "*", "idx", "+", "0", "]", ",", "rigid_floats", "[", "4", "*", "idx", "+", "1", "]", ",", "rigid_floats", "[", "4", "*", "idx", "+", "2", "]", ",", "rigid_floats", "[", "4", "*", "idx", "+", "3", "]", "]", "for", "idx", "in", "range", "(", "0", ",", "len", "(", "rigid_floats", ")", "//", "4", ")", "]", "\n", "return", "all_rigids", "\n", "\n"]], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.data.face_dataset.load_expressions": [[42, 47], ["open", "open.close", "float", "line.split"], "function", ["None"], ["    ", "ids", "=", "[", "]", "\n", "\n", "for", "fname", "in", "paths", ":", "\n", "        ", "l", "=", "fname", ".", "rfind", "(", "'/'", ")", "\n", "id_str", "=", "fname", "[", "l", "+", "1", ":", "-", "15", "]", "#4]", "\n", "i", "=", "int", "(", "id_str", ")", "\n"]], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.data.face_dataset.load_identity": [[99, 104], ["open", "open.close", "float", "line.split"], "function", ["None"], ["", "def", "load_identity", "(", "input_dir", ")", ":", "\n", "    ", "file", "=", "open", "(", "input_dir", "+", "\"/identities.txt\"", ",", "\"r\"", ")", "\n", "identity", "=", "[", "[", "float", "(", "x", ")", "for", "x", "in", "line", ".", "split", "(", ")", "]", "for", "line", "in", "file", "]", "\n", "file", ".", "close", "(", ")", "\n", "return", "identity", "\n", "\n"]], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.data.aligned_dataset.AlignedDataset.modify_commandline_options": [[77, 80], ["None"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "modify_commandline_options", "(", "parser", ",", "is_train", ")", ":", "\n", "        ", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.data.aligned_dataset.AlignedDataset.initialize": [[81, 96], ["os.path.join", "aligned_dataset.make_dataset", "aligned_dataset.make_ids", "aligned_dataset.load_intrinsics", "aligned_dataset.load_rigids", "aligned_dataset.load_expressions", "aligned_dataset.load_audio"], "methods", ["home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.data.audio_dataset.make_dataset", "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.data.audio_dataset.make_ids", "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.data.facetmp_dataset.load_intrinsics", "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.data.facetmp_dataset.load_rigids", "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.data.facetmp_dataset.load_expressions", "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.data.aligned_dataset.load_audio"], ["", "def", "initialize", "(", "self", ",", "opt", ")", ":", "\n", "        ", "self", ".", "opt", "=", "opt", "\n", "self", ".", "root", "=", "opt", ".", "dataroot", "\n", "self", ".", "data_dir", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "dataroot", ",", "opt", ".", "phase", ")", "\n", "self", ".", "frame_paths", "=", "make_dataset", "(", "self", ".", "data_dir", ")", "\n", "self", ".", "frame_ids", "=", "make_ids", "(", "self", ".", "frame_paths", ",", "self", ".", "root", ")", "\n", "self", ".", "intrinsics", "=", "load_intrinsics", "(", "self", ".", "data_dir", ")", "\n", "self", ".", "extrinsics", "=", "load_rigids", "(", "self", ".", "data_dir", ")", "\n", "self", ".", "expressions", "=", "load_expressions", "(", "self", ".", "data_dir", ")", "\n", "\n", "self", ".", "audio", "=", "load_audio", "(", "self", ".", "data_dir", ")", "\n", "self", ".", "audio_window_size", "=", "opt", ".", "audio_window_size", "\n", "\n", "opt", ".", "nObjects", "=", "1", "\n", "assert", "(", "opt", ".", "resize_or_crop", "==", "'resize_and_crop'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.data.aligned_dataset.AlignedDataset.__getitem__": [[97, 203], ["int", "aligned_dataset.AlignedDataset.audio.getWindow", "torch.tensor", "numpy.memmap().__array__", "numpy.clip", "numpy.resize", "numpy.concatenate", "numpy.load", "numpy.resize", "int", "int", "torchvision.ToTensor", "A.astype", "torchvision.ToTensor", "numpy.concatenate.astype", "torchvision.ToTensor", "numpy.resize.astype", "numpy.random.randint", "numpy.random.randint", "int", "int", "int", "int", "numpy.memmap", "numpy.zeros", "int", "int", "numpy.random.randint", "numpy.random.randint", "numpy.floor", "numpy.floor", "numpy.floor", "numpy.floor"], "methods", ["home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.data.audio.Audio.getWindow"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "\n", "# get video data", "\n", "        ", "frame_id", "=", "index", "\n", "\n", "#print('GET ITEM: ', index)", "\n", "img_path", "=", "self", ".", "frame_paths", "[", "index", "]", "\n", "frame_id", "=", "self", ".", "frame_ids", "[", "index", "]", "\n", "\n", "# intrinsics and extrinsics", "\n", "intrinsics", "=", "self", ".", "intrinsics", "\n", "extrinsics", "=", "self", ".", "extrinsics", "[", "frame_id", "]", "\n", "\n", "# get audio mel sample window", "\n", "frame_rate", "=", "24", "#29.97", "\n", "#frame_rate = len(self.expressions) / self.audio.time_total", "\n", "mel_frame_idx", "=", "int", "(", "(", "frame_id", "/", "frame_rate", ")", "*", "self", ".", "audio", ".", "mel_sample_rate", ")", "\n", "mels", "=", "self", ".", "audio", ".", "getWindow", "(", "mel_frame_idx", ",", "self", ".", "audio_window_size", ")", "\n", "\n", "\n", "# expressions", "\n", "expressions", "=", "torch", ".", "tensor", "(", "self", ".", "expressions", "[", "frame_id", "]", ")", "\n", "\n", "# default image dimensions", "\n", "IMG_DIM_X", "=", "512", "\n", "IMG_DIM_Y", "=", "512", "\n", "\n", "# load image data", "\n", "#assert(IMG_DIM == self.opt.fineSize)", "\n", "img_array", "=", "np", ".", "memmap", "(", "img_path", ",", "dtype", "=", "'float32'", ",", "mode", "=", "'r'", ")", ".", "__array__", "(", ")", "\n", "if", "img_array", ".", "size", "!=", "IMG_DIM_X", "*", "IMG_DIM_Y", "*", "5", ":", "\n", "            ", "IMG_DIM_X", "=", "int", "(", "img_array", "[", "0", "]", ")", "\n", "IMG_DIM_Y", "=", "int", "(", "img_array", "[", "1", "]", ")", "\n", "img_array", "=", "img_array", "[", "2", ":", "]", "\n", "intrinsics", "=", "img_array", "[", "0", ":", "4", "]", "\n", "img_array", "=", "img_array", "[", "4", ":", "]", "\n", "\n", "", "img_array", "=", "np", ".", "clip", "(", "img_array", ",", "0.0", ",", "1.0", ")", "\n", "img", "=", "np", ".", "resize", "(", "img_array", ",", "(", "IMG_DIM_Y", ",", "IMG_DIM_X", ",", "5", ")", ")", "\n", "A", "=", "img", "[", ":", ",", ":", ",", "0", ":", "3", "]", "\n", "B", "=", "img", "[", ":", ",", ":", ",", "3", ":", "5", "]", "\n", "B", "=", "np", ".", "concatenate", "(", "(", "B", ",", "np", ".", "zeros", "(", "(", "IMG_DIM_Y", ",", "IMG_DIM_X", ",", "1", ")", ")", ")", ",", "axis", "=", "2", ")", "\n", "\n", "TARGET", "=", "transforms", ".", "ToTensor", "(", ")", "(", "A", ".", "astype", "(", "np", ".", "float32", ")", ")", "\n", "UV", "=", "transforms", ".", "ToTensor", "(", ")", "(", "B", ".", "astype", "(", "np", ".", "float32", ")", ")", "\n", "\n", "TARGET", "=", "2.0", "*", "TARGET", "-", "1.0", "\n", "UV", "=", "2.0", "*", "UV", "-", "1.0", "\n", "\n", "\n", "# load deepspeech feature", "\n", "dsf_fname", "=", "img_path", "[", ":", "-", "4", "]", "+", "'.deepspeech.npy'", "\n", "#        print('dsf_fname:', dsf_fname)", "\n", "feature_array", "=", "np", ".", "load", "(", "dsf_fname", ")", "\n", "#feature_array = np.memmap(dsf_fname, dtype='float32', mode='r').__array__()", "\n", "#        print('feature_array shape: ', feature_array.shape)", "\n", "dsf_np", "=", "np", ".", "resize", "(", "feature_array", ",", "(", "16", ",", "29", ",", "1", ")", ")", "\n", "dsf", "=", "transforms", ".", "ToTensor", "(", ")", "(", "dsf_np", ".", "astype", "(", "np", ".", "float32", ")", ")", "\n", "\n", "#################################", "\n", "####### apply augmentation ######", "\n", "#################################", "\n", "if", "not", "self", ".", "opt", ".", "no_augmentation", ":", "\n", "# random dimensions", "\n", "            ", "new_dim_x", "=", "np", ".", "random", ".", "randint", "(", "int", "(", "IMG_DIM_X", "*", "0.75", ")", ",", "IMG_DIM_X", "+", "1", ")", "\n", "new_dim_y", "=", "np", ".", "random", ".", "randint", "(", "int", "(", "IMG_DIM_Y", "*", "0.75", ")", ",", "IMG_DIM_Y", "+", "1", ")", "\n", "new_dim_x", "=", "int", "(", "np", ".", "floor", "(", "new_dim_x", "/", "64.0", ")", "*", "64", ")", "# << dependent on the network structure !! 64 => 6 layers", "\n", "new_dim_y", "=", "int", "(", "np", ".", "floor", "(", "new_dim_y", "/", "64.0", ")", "*", "64", ")", "\n", "if", "new_dim_x", ">", "IMG_DIM_X", ":", "new_dim_x", "-=", "64", "\n", "if", "new_dim_y", ">", "IMG_DIM_Y", ":", "new_dim_y", "-=", "64", "\n", "\n", "# random pos", "\n", "if", "IMG_DIM_X", "==", "new_dim_x", ":", "offset_x", "=", "0", "\n", "else", ":", "offset_x", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "IMG_DIM_X", "-", "new_dim_x", ")", "\n", "if", "IMG_DIM_Y", "==", "new_dim_y", ":", "offset_y", "=", "0", "\n", "else", ":", "offset_y", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "IMG_DIM_Y", "-", "new_dim_y", ")", "\n", "\n", "# select subwindow", "\n", "TARGET", "=", "TARGET", "[", ":", ",", "offset_y", ":", "offset_y", "+", "new_dim_y", ",", "offset_x", ":", "offset_x", "+", "new_dim_x", "]", "\n", "UV", "=", "UV", "[", ":", ",", "offset_y", ":", "offset_y", "+", "new_dim_y", ",", "offset_x", ":", "offset_x", "+", "new_dim_x", "]", "\n", "\n", "# compute new intrinsics", "\n", "# TODO: atm not needed but maybe later", "\n", "\n", "", "else", ":", "\n", "            ", "new_dim_x", "=", "int", "(", "np", ".", "floor", "(", "IMG_DIM_X", "/", "64.0", ")", "*", "64", ")", "# << dependent on the network structure !! 64 => 6 layers", "\n", "new_dim_y", "=", "int", "(", "np", ".", "floor", "(", "IMG_DIM_Y", "/", "64.0", ")", "*", "64", ")", "\n", "offset_x", "=", "0", "\n", "offset_y", "=", "0", "\n", "# select subwindow", "\n", "TARGET", "=", "TARGET", "[", ":", ",", "offset_y", ":", "offset_y", "+", "new_dim_y", ",", "offset_x", ":", "offset_x", "+", "new_dim_x", "]", "\n", "UV", "=", "UV", "[", ":", ",", "offset_y", ":", "offset_y", "+", "new_dim_y", ",", "offset_x", ":", "offset_x", "+", "new_dim_x", "]", "\n", "\n", "# compute new intrinsics", "\n", "# TODO: atm not needed but maybe later", "\n", "\n", "#################################", "\n", "\n", "", "return", "{", "'TARGET'", ":", "TARGET", ",", "'UV'", ":", "UV", ",", "\n", "'paths'", ":", "self", ".", "frame_paths", "[", "index", "]", ",", "#img_path,", "\n", "'intrinsics'", ":", "intrinsics", ",", "\n", "'extrinsics'", ":", "extrinsics", ",", "\n", "'expressions'", ":", "expressions", ",", "\n", "'audio_mels'", ":", "mels", ",", "\n", "'audio_deepspeech'", ":", "dsf", ",", "# deepspeech feature", "\n", "'object_id'", ":", "0", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.data.aligned_dataset.AlignedDataset.__len__": [[204, 206], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "frame_paths", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.data.aligned_dataset.AlignedDataset.name": [[207, 209], ["None"], "methods", ["None"], ["", "def", "name", "(", "self", ")", ":", "\n", "        ", "return", "'AlignedDataset'", "\n", "", "", ""]], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.data.aligned_dataset.make_dataset": [[21, 38], ["os.path.isdir", "sorted", "sorted", "os.walk", "os.path.join", "images.append", "any", "str", "int", "sorted.append", "fname.endswith"], "function", ["None"], ["def", "make_dataset", "(", "dir", ")", ":", "\n", "    ", "images", "=", "[", "]", "\n", "ids", "=", "[", "]", "\n", "assert", "os", ".", "path", ".", "isdir", "(", "dir", ")", ",", "'%s is not a valid directory'", "%", "dir", "\n", "for", "root", ",", "_", ",", "fnames", "in", "sorted", "(", "os", ".", "walk", "(", "dir", ")", ")", ":", "\n", "        ", "for", "fname", "in", "fnames", ":", "\n", "            ", "if", "any", "(", "fname", ".", "endswith", "(", "extension", ")", "for", "extension", "in", "[", "'.bin'", ",", "'.BIN'", "]", ")", ":", "\n", "                ", "id_str", "=", "fname", "[", ":", "-", "4", "]", "\n", "i", "=", "int", "(", "id_str", ")", "\n", "ids", ".", "append", "(", "i", ")", "\n", "", "", "", "ids", "=", "sorted", "(", "ids", ")", "\n", "\n", "for", "id", "in", "ids", ":", "\n", "        ", "fname", "=", "str", "(", "id", ")", "+", "'.bin'", "\n", "path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "fname", ")", "\n", "images", ".", "append", "(", "path", ")", "\n", "", "return", "images", "\n", "\n"]], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.data.aligned_dataset.load_intrinsics": [[39, 45], ["open", "open.close", "list", "float", "line.split"], "function", ["None"], ["", "def", "load_intrinsics", "(", "input_dir", ")", ":", "\n", "    ", "file", "=", "open", "(", "input_dir", "+", "\"/intrinsics.txt\"", ",", "\"r\"", ")", "\n", "intrinsics", "=", "[", "[", "(", "float", "(", "x", ")", "for", "x", "in", "line", ".", "split", "(", ")", ")", "]", "for", "line", "in", "file", "]", "\n", "file", ".", "close", "(", ")", "\n", "intrinsics", "=", "list", "(", "intrinsics", "[", "0", "]", "[", "0", "]", ")", "\n", "return", "intrinsics", "\n", "\n"]], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.data.aligned_dataset.load_rigids": [[46, 52], ["open", "open.close", "float", "range", "line.split", "len"], "function", ["None"], ["", "def", "load_rigids", "(", "input_dir", ")", ":", "\n", "    ", "file", "=", "open", "(", "input_dir", "+", "\"/rigid.txt\"", ",", "\"r\"", ")", "\n", "rigid_floats", "=", "[", "[", "float", "(", "x", ")", "for", "x", "in", "line", ".", "split", "(", ")", "]", "for", "line", "in", "file", "]", "# note that it stores 5 lines per matrix (blank line)", "\n", "file", ".", "close", "(", ")", "\n", "all_rigids", "=", "[", "[", "rigid_floats", "[", "4", "*", "idx", "+", "0", "]", ",", "rigid_floats", "[", "4", "*", "idx", "+", "1", "]", ",", "rigid_floats", "[", "4", "*", "idx", "+", "2", "]", ",", "rigid_floats", "[", "4", "*", "idx", "+", "3", "]", "]", "for", "idx", "in", "range", "(", "0", ",", "len", "(", "rigid_floats", ")", "//", "4", ")", "]", "\n", "return", "all_rigids", "\n", "\n"]], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.data.aligned_dataset.load_expressions": [[53, 58], ["open", "open.close", "float", "line.split"], "function", ["None"], ["", "def", "load_expressions", "(", "input_dir", ")", ":", "\n", "    ", "file", "=", "open", "(", "input_dir", "+", "\"/expression.txt\"", ",", "\"r\"", ")", "\n", "expressions", "=", "[", "[", "float", "(", "x", ")", "for", "x", "in", "line", ".", "split", "(", ")", "]", "for", "line", "in", "file", "]", "\n", "file", ".", "close", "(", ")", "\n", "return", "expressions", "\n", "\n"]], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.data.aligned_dataset.load_audio": [[59, 64], ["data.audio.Audio"], "function", ["None"], ["", "def", "load_audio", "(", "input_dir", ")", ":", "\n", "    ", "audio", "=", "Audio", "(", "input_dir", "+", "'/audio.mp3'", ",", "write_mel_spectogram", "=", "False", ")", "\n", "#audio = Audio(input_dir + '/audio.mp3', write_mel_spectogram = True)", "\n", "\n", "return", "audio", "\n", "\n"]], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.data.aligned_dataset.make_ids": [[65, 75], ["fname.rfind", "int", "ids.append"], "function", ["None"], ["", "def", "make_ids", "(", "paths", ",", "root_dir", ")", ":", "\n", "    ", "ids", "=", "[", "]", "\n", "\n", "for", "fname", "in", "paths", ":", "\n", "        ", "l", "=", "fname", ".", "rfind", "(", "'/'", ")", "\n", "id_str", "=", "fname", "[", "l", "+", "1", ":", "-", "4", "]", "\n", "i", "=", "int", "(", "id_str", ")", "\n", "#print(fname, ': ', i)", "\n", "ids", ".", "append", "(", "i", ")", "\n", "", "return", "ids", "\n", "\n"]], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.data.multi_face_audio_eq_tmp_dataset.MultiFaceAudioEQTmpDataset.modify_commandline_options": [[92, 95], ["None"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "modify_commandline_options", "(", "parser", ",", "is_train", ")", ":", "\n", "        ", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.data.multi_face_audio_eq_tmp_dataset.MultiFaceAudioEQTmpDataset.initialize": [[96, 317], ["open", "open.close", "open", "open.close", "range", "open", "open.close", "range", "open", "open.close", "range", "print", "print", "print", "print", "print", "print", "range", "range", "len", "len", "len", "print", "range", "numpy.array", "str", "str", "len", "len", "len", "len", "len", "len", "len", "range", "multi_face_audio_eq_tmp_dataset.MultiFaceAudioEQTmpDataset.val_sequence_targets.append", "len", "range", "multi_face_audio_eq_tmp_dataset.MultiFaceAudioEQTmpDataset.test_sequence_targets.append", "print", "print", "range", "len", "len", "range", "str", "str", "len", "print", "exit", "len", "print", "exit", "len", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "print", "print", "print", "print", "print", "multi_face_audio_eq_tmp_dataset.make_ids", "multi_face_audio_eq_tmp_dataset.make_dataset_ids_png", "multi_face_audio_eq_tmp_dataset.load_intrinsics", "multi_face_audio_eq_tmp_dataset.load_rigids", "multi_face_audio_eq_tmp_dataset.load_expressions", "multi_face_audio_eq_tmp_dataset.load_identity", "min", "multi_face_audio_eq_tmp_dataset.MultiFaceAudioEQTmpDataset.audio_feature_dir.append", "multi_face_audio_eq_tmp_dataset.MultiFaceAudioEQTmpDataset.image_dir.append", "multi_face_audio_eq_tmp_dataset.MultiFaceAudioEQTmpDataset.uvs_dir.append", "multi_face_audio_eq_tmp_dataset.MultiFaceAudioEQTmpDataset.audio_ids.append", "multi_face_audio_eq_tmp_dataset.MultiFaceAudioEQTmpDataset.image_ids.append", "multi_face_audio_eq_tmp_dataset.MultiFaceAudioEQTmpDataset.intrinsics.append", "multi_face_audio_eq_tmp_dataset.MultiFaceAudioEQTmpDataset.extrinsics.append", "multi_face_audio_eq_tmp_dataset.MultiFaceAudioEQTmpDataset.expressions.append", "multi_face_audio_eq_tmp_dataset.MultiFaceAudioEQTmpDataset.identities.append", "multi_face_audio_eq_tmp_dataset.MultiFaceAudioEQTmpDataset.target_id.append", "range", "range", "multi_face_audio_eq_tmp_dataset.MultiFaceAudioEQTmpDataset.weights.append", "line.split", "line.split", "multi_face_audio_eq_tmp_dataset.make_dataset", "len", "len", "len", "len", "len", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "print", "print", "print", "print", "print", "multi_face_audio_eq_tmp_dataset.make_ids", "multi_face_audio_eq_tmp_dataset.make_dataset_ids_png", "multi_face_audio_eq_tmp_dataset.load_intrinsics", "multi_face_audio_eq_tmp_dataset.load_rigids", "multi_face_audio_eq_tmp_dataset.load_expressions", "multi_face_audio_eq_tmp_dataset.load_identity", "min", "multi_face_audio_eq_tmp_dataset.MultiFaceAudioEQTmpDataset.audio_feature_dir.append", "multi_face_audio_eq_tmp_dataset.MultiFaceAudioEQTmpDataset.image_dir.append", "multi_face_audio_eq_tmp_dataset.MultiFaceAudioEQTmpDataset.uvs_dir.append", "multi_face_audio_eq_tmp_dataset.MultiFaceAudioEQTmpDataset.audio_ids.append", "multi_face_audio_eq_tmp_dataset.MultiFaceAudioEQTmpDataset.image_ids.append", "multi_face_audio_eq_tmp_dataset.MultiFaceAudioEQTmpDataset.intrinsics.append", "multi_face_audio_eq_tmp_dataset.MultiFaceAudioEQTmpDataset.extrinsics.append", "multi_face_audio_eq_tmp_dataset.MultiFaceAudioEQTmpDataset.expressions.append", "multi_face_audio_eq_tmp_dataset.MultiFaceAudioEQTmpDataset.identities.append", "multi_face_audio_eq_tmp_dataset.MultiFaceAudioEQTmpDataset.target_id.append", "len", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "print", "print", "print", "print", "print", "multi_face_audio_eq_tmp_dataset.make_ids", "multi_face_audio_eq_tmp_dataset.make_dataset_ids_png", "multi_face_audio_eq_tmp_dataset.load_intrinsics", "multi_face_audio_eq_tmp_dataset.load_rigids", "multi_face_audio_eq_tmp_dataset.load_expressions", "multi_face_audio_eq_tmp_dataset.load_identity", "min", "multi_face_audio_eq_tmp_dataset.MultiFaceAudioEQTmpDataset.audio_feature_dir.append", "multi_face_audio_eq_tmp_dataset.MultiFaceAudioEQTmpDataset.image_dir.append", "multi_face_audio_eq_tmp_dataset.MultiFaceAudioEQTmpDataset.uvs_dir.append", "multi_face_audio_eq_tmp_dataset.MultiFaceAudioEQTmpDataset.audio_ids.append", "multi_face_audio_eq_tmp_dataset.MultiFaceAudioEQTmpDataset.image_ids.append", "multi_face_audio_eq_tmp_dataset.MultiFaceAudioEQTmpDataset.intrinsics.append", "multi_face_audio_eq_tmp_dataset.MultiFaceAudioEQTmpDataset.extrinsics.append", "multi_face_audio_eq_tmp_dataset.MultiFaceAudioEQTmpDataset.expressions.append", "multi_face_audio_eq_tmp_dataset.MultiFaceAudioEQTmpDataset.identities.append", "multi_face_audio_eq_tmp_dataset.MultiFaceAudioEQTmpDataset.target_id.append", "multi_face_audio_eq_tmp_dataset.make_dataset", "os.path.join", "os.path.join", "len", "len", "len", "len", "multi_face_audio_eq_tmp_dataset.make_dataset", "os.path.join", "os.path.join", "len", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.data.audio_dataset.make_ids", "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.data.multi_face_audio_eq_tmp_cached_dataset.make_dataset_ids_png", "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.data.facetmp_dataset.load_intrinsics", "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.data.facetmp_dataset.load_rigids", "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.data.facetmp_dataset.load_expressions", "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.data.facetmp_dataset.load_identity", "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.data.audio_dataset.make_dataset", "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.data.audio_dataset.make_ids", "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.data.multi_face_audio_eq_tmp_cached_dataset.make_dataset_ids_png", "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.data.facetmp_dataset.load_intrinsics", "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.data.facetmp_dataset.load_rigids", "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.data.facetmp_dataset.load_expressions", "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.data.facetmp_dataset.load_identity", "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.data.audio_dataset.make_ids", "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.data.multi_face_audio_eq_tmp_cached_dataset.make_dataset_ids_png", "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.data.facetmp_dataset.load_intrinsics", "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.data.facetmp_dataset.load_rigids", "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.data.facetmp_dataset.load_expressions", "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.data.facetmp_dataset.load_identity", "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.data.audio_dataset.make_dataset", "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.data.audio_dataset.make_dataset"], ["", "def", "initialize", "(", "self", ",", "opt", ")", ":", "\n", "        ", "self", ".", "opt", "=", "opt", "\n", "self", ".", "root", "=", "opt", ".", "dataroot", "\n", "\n", "# read dataset file that contains the filenames for the train, val and test lists", "\n", "file", "=", "open", "(", "self", ".", "root", "+", "\"/dataset.txt\"", ",", "\"r\"", ")", "\n", "self", ".", "filename_train_list", ",", "self", ".", "filename_val_list", ",", "self", ".", "filename_test_list", "=", "[", "str", "(", "line", ")", "for", "line", "in", "file", "]", "\n", "file", ".", "close", "(", ")", "\n", "if", "self", ".", "filename_train_list", "[", "-", "1", "]", "==", "'\\n'", ":", "self", ".", "filename_train_list", "=", "self", ".", "filename_train_list", "[", ":", "-", "1", "]", "\n", "if", "self", ".", "filename_val_list", "[", "-", "1", "]", "==", "'\\n'", ":", "self", ".", "filename_val_list", "=", "self", ".", "filename_val_list", "[", ":", "-", "1", "]", "\n", "if", "self", ".", "filename_test_list", "[", "-", "1", "]", "==", "'\\n'", ":", "self", ".", "filename_test_list", "=", "self", ".", "filename_test_list", "[", ":", "-", "1", "]", "\n", "\n", "\n", "\n", "# get list of train sequences", "\n", "file", "=", "open", "(", "self", ".", "root", "+", "\"/\"", "+", "self", ".", "filename_train_list", ",", "\"r\"", ")", "\n", "self", ".", "train_sequence_names", "=", "[", "str", "(", "line", ")", "for", "line", "in", "file", "]", "\n", "file", ".", "close", "(", ")", "\n", "for", "i", "in", "range", "(", "0", ",", "len", "(", "self", ".", "train_sequence_names", ")", ")", ":", "\n", "            ", "if", "self", ".", "train_sequence_names", "[", "i", "]", "[", "-", "1", "]", "==", "'\\n'", ":", "\n", "                ", "self", ".", "train_sequence_names", "[", "i", "]", "=", "self", ".", "train_sequence_names", "[", "i", "]", "[", ":", "-", "1", "]", "\n", "\n", "# get list of val sequences", "\n", "", "", "file", "=", "open", "(", "self", ".", "root", "+", "\"/\"", "+", "self", ".", "filename_val_list", ",", "\"r\"", ")", "\n", "self", ".", "val_sequence_names", "=", "[", "[", "str", "(", "w", ")", "for", "w", "in", "line", ".", "split", "(", ")", "]", "for", "line", "in", "file", "]", "\n", "file", ".", "close", "(", ")", "\n", "for", "i", "in", "range", "(", "0", ",", "len", "(", "self", ".", "val_sequence_names", ")", ")", ":", "\n", "            ", "if", "self", ".", "val_sequence_names", "[", "i", "]", "[", "0", "]", "[", "-", "1", "]", "==", "'\\n'", ":", "self", ".", "val_sequence_names", "[", "i", "]", "[", "0", "]", "=", "self", ".", "val_sequence_names", "[", "i", "]", "[", "0", "]", "[", ":", "-", "1", "]", "\n", "if", "self", ".", "val_sequence_names", "[", "i", "]", "[", "1", "]", "[", "-", "1", "]", "==", "'\\n'", ":", "self", ".", "val_sequence_names", "[", "i", "]", "[", "1", "]", "=", "self", ".", "val_sequence_names", "[", "i", "]", "[", "1", "]", "[", ":", "-", "1", "]", "\n", "\n", "# get list of test sequences", "\n", "", "file", "=", "open", "(", "self", ".", "root", "+", "\"/\"", "+", "self", ".", "filename_test_list", ",", "\"r\"", ")", "\n", "self", ".", "test_sequence_names", "=", "[", "[", "str", "(", "w", ")", "for", "w", "in", "line", ".", "split", "(", ")", "]", "for", "line", "in", "file", "]", "\n", "if", "opt", ".", "output_audio_expressions", ":", "self", ".", "test_sequence_names", "=", "self", ".", "test_sequence_names", "[", "0", ":", "1", "]", "\n", "file", ".", "close", "(", ")", "\n", "for", "i", "in", "range", "(", "0", ",", "len", "(", "self", ".", "test_sequence_names", ")", ")", ":", "\n", "            ", "if", "self", ".", "test_sequence_names", "[", "i", "]", "[", "0", "]", "[", "-", "1", "]", "==", "'\\n'", ":", "self", ".", "test_sequence_names", "[", "i", "]", "[", "0", "]", "=", "self", ".", "test_sequence_names", "[", "i", "]", "[", "0", "]", "[", ":", "-", "1", "]", "\n", "if", "self", ".", "test_sequence_names", "[", "i", "]", "[", "1", "]", "[", "-", "1", "]", "==", "'\\n'", ":", "self", ".", "test_sequence_names", "[", "i", "]", "[", "1", "]", "=", "self", ".", "test_sequence_names", "[", "i", "]", "[", "1", "]", "[", ":", "-", "1", "]", "\n", "\n", "# print some stats", "\n", "", "print", "(", "'filename_train_list:'", ",", "self", ".", "filename_train_list", ")", "\n", "print", "(", "'\\tnum_seq:'", ",", "len", "(", "self", ".", "train_sequence_names", ")", ")", "\n", "print", "(", "'filename_val_list:  '", ",", "self", ".", "filename_val_list", ")", "\n", "print", "(", "'\\tnum_seq:'", ",", "len", "(", "self", ".", "val_sequence_names", ")", ")", "\n", "print", "(", "'filename_test_list: '", ",", "self", ".", "filename_test_list", ")", "\n", "print", "(", "'\\tnum_seq:'", ",", "len", "(", "self", ".", "test_sequence_names", ")", ")", "\n", "\n", "opt", ".", "train_sequence_names", "=", "self", ".", "train_sequence_names", "\n", "opt", ".", "val_sequence_names", "=", "self", ".", "val_sequence_names", "\n", "opt", ".", "test_sequence_names", "=", "self", ".", "test_sequence_names", "\n", "\n", "# search mapping from val, test to train sequences that are used as targets", "\n", "self", ".", "val_sequence_targets", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "0", ",", "len", "(", "self", ".", "val_sequence_names", ")", ")", ":", "\n", "            ", "target_name", "=", "self", ".", "val_sequence_names", "[", "i", "]", "[", "1", "]", "\n", "target_id", "=", "-", "1", "\n", "for", "j", "in", "range", "(", "0", ",", "len", "(", "self", ".", "train_sequence_names", ")", ")", ":", "\n", "                ", "if", "self", ".", "train_sequence_names", "[", "j", "]", "==", "target_name", ":", "\n", "                    ", "target_id", "=", "j", "\n", "break", "\n", "", "", "if", "target_id", "==", "-", "1", ":", "\n", "                ", "print", "(", "'Target sequence not in train set! '", ",", "target_name", ")", "\n", "exit", "(", ")", "\n", "", "self", ".", "val_sequence_targets", ".", "append", "(", "target_id", ")", "\n", "\n", "", "self", ".", "test_sequence_targets", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "0", ",", "len", "(", "self", ".", "test_sequence_names", ")", ")", ":", "\n", "            ", "target_name", "=", "self", ".", "test_sequence_names", "[", "i", "]", "[", "1", "]", "\n", "target_id", "=", "-", "1", "\n", "for", "j", "in", "range", "(", "0", ",", "len", "(", "self", ".", "train_sequence_names", ")", ")", ":", "\n", "                ", "if", "self", ".", "train_sequence_names", "[", "j", "]", "==", "target_name", ":", "\n", "                    ", "target_id", "=", "j", "\n", "break", "\n", "", "", "if", "target_id", "==", "-", "1", ":", "\n", "                ", "print", "(", "'Target sequence not in train set! '", ",", "target_name", ")", "\n", "exit", "(", ")", "\n", "", "self", ".", "test_sequence_targets", ".", "append", "(", "target_id", ")", "\n", "print", "(", "'test: '", ",", "self", ".", "test_sequence_names", "[", "i", "]", ")", "\n", "print", "(", "'\\t target:'", ",", "target_id", ")", "\n", "\n", "# store len values", "\n", "", "opt", ".", "nTrainObjects", "=", "len", "(", "self", ".", "train_sequence_names", ")", "\n", "opt", ".", "nValObjects", "=", "len", "(", "self", ".", "val_sequence_names", ")", "\n", "opt", ".", "nTestObjects", "=", "len", "(", "self", ".", "test_sequence_names", ")", "\n", "\n", "################################################", "\n", "################################################", "\n", "################################################", "\n", "\n", "# prepare dataloader paths / data", "\n", "self", ".", "audio_feature_dir", "=", "[", "]", "\n", "self", ".", "image_dir", "=", "[", "]", "\n", "self", ".", "uvs_dir", "=", "[", "]", "\n", "self", ".", "audio_ids", "=", "[", "]", "\n", "self", ".", "image_ids", "=", "[", "]", "\n", "self", ".", "intrinsics", "=", "[", "]", "\n", "self", ".", "extrinsics", "=", "[", "]", "\n", "self", ".", "expressions", "=", "[", "]", "\n", "self", ".", "identities", "=", "[", "]", "\n", "self", ".", "target_id", "=", "[", "]", "\n", "self", ".", "n_frames_total", "=", "0", "\n", "\n", "if", "opt", ".", "phase", "==", "'train'", ":", "\n", "            ", "self", ".", "sequence_names", "=", "self", ".", "train_sequence_names", "\n", "for", "i", "in", "range", "(", "0", ",", "len", "(", "self", ".", "train_sequence_names", ")", ")", ":", "\n", "                ", "dataroot", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "dataroot", ",", "self", ".", "train_sequence_names", "[", "i", "]", ")", "\n", "audio_feature_dir", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "dataroot", ",", "self", ".", "train_sequence_names", "[", "i", "]", ",", "'audio_feature'", ")", "\n", "image_dir", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "dataroot", ",", "self", ".", "train_sequence_names", "[", "i", "]", ",", "'images'", ")", "\n", "uvs_dir", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "dataroot", ",", "self", ".", "train_sequence_names", "[", "i", "]", ",", "'uvs'", ")", "\n", "print", "(", "'load train sequence:'", ",", "self", ".", "train_sequence_names", "[", "i", "]", ")", "\n", "print", "(", "'\\tidentity_dir:'", ",", "dataroot", ")", "\n", "print", "(", "'\\taudio_feature_dir:'", ",", "audio_feature_dir", ")", "\n", "print", "(", "'\\timage_dir:'", ",", "image_dir", ")", "\n", "print", "(", "'\\tuvs_dir:'", ",", "uvs_dir", ")", "\n", "\n", "audio_ids", "=", "make_ids", "(", "make_dataset", "(", "audio_feature_dir", ")", ",", "dataroot", ")", "\n", "image_ids", "=", "make_dataset_ids_png", "(", "image_dir", ")", "# [-1] * len(audio_ids) #make_ids(make_dataset(image_dir), dataroot)", "\n", "intrinsics", "=", "load_intrinsics", "(", "dataroot", ")", "\n", "extrinsics", "=", "load_rigids", "(", "dataroot", ")", "\n", "expressions", "=", "load_expressions", "(", "dataroot", ")", "\n", "identity", "=", "load_identity", "(", "dataroot", ")", "\n", "\n", "min_len", "=", "min", "(", "len", "(", "audio_ids", ")", ",", "len", "(", "image_ids", ")", ",", "len", "(", "extrinsics", ")", ",", "len", "(", "expressions", ")", ")", "\n", "\n", "self", ".", "audio_feature_dir", ".", "append", "(", "audio_feature_dir", ")", "\n", "self", ".", "image_dir", ".", "append", "(", "image_dir", ")", "\n", "self", ".", "uvs_dir", ".", "append", "(", "uvs_dir", ")", "\n", "self", ".", "audio_ids", ".", "append", "(", "audio_ids", "[", ":", "min_len", "]", ")", "\n", "self", ".", "image_ids", ".", "append", "(", "image_ids", "[", ":", "min_len", "]", ")", "\n", "self", ".", "intrinsics", ".", "append", "(", "intrinsics", ")", "\n", "self", ".", "extrinsics", ".", "append", "(", "extrinsics", "[", ":", "min_len", "]", ")", "\n", "self", ".", "expressions", ".", "append", "(", "expressions", "[", ":", "min_len", "]", ")", "\n", "self", ".", "identities", ".", "append", "(", "identity", "[", ":", "min_len", "]", ")", "\n", "self", ".", "target_id", ".", "append", "(", "i", ")", "\n", "\n", "self", ".", "n_frames_total", "+=", "min_len", "\n", "", "", "elif", "opt", ".", "phase", "==", "'val'", ":", "\n", "            ", "for", "i", "in", "range", "(", "0", ",", "len", "(", "self", ".", "val_sequence_names", ")", ")", ":", "\n", "                ", "target_id", "=", "self", ".", "val_sequence_targets", "[", "i", "]", "\n", "dataroot", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "dataroot", ",", "self", ".", "train_sequence_names", "[", "target_id", "]", ")", "\n", "audio_feature_dir", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "dataroot", ",", "self", ".", "val_sequence_names", "[", "i", "]", "[", "0", "]", ",", "'audio_feature'", ")", "\n", "image_dir", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "dataroot", ",", "self", ".", "train_sequence_names", "[", "target_id", "]", ",", "'images'", ")", "\n", "uvs_dir", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "dataroot", ",", "self", ".", "train_sequence_names", "[", "target_id", "]", ",", "'uvs'", ")", "\n", "print", "(", "'load val sequence:'", ",", "self", ".", "val_sequence_names", "[", "i", "]", ")", "\n", "print", "(", "'\\tidentity_dir:'", ",", "dataroot", ")", "\n", "print", "(", "'\\taudio_feature_dir:'", ",", "audio_feature_dir", ")", "\n", "print", "(", "'\\timage_dir:'", ",", "image_dir", ")", "\n", "print", "(", "'\\tuvs_dir:'", ",", "uvs_dir", ")", "\n", "audio_ids", "=", "make_ids", "(", "make_dataset", "(", "audio_feature_dir", ")", ",", "os", ".", "path", ".", "join", "(", "opt", ".", "dataroot", ",", "self", ".", "val_sequence_names", "[", "i", "]", "[", "0", "]", ")", ")", "\n", "image_ids", "=", "make_dataset_ids_png", "(", "image_dir", ")", "# [-1] * len(audio_ids) #make_ids(make_dataset(image_dir), dataroot)", "\n", "intrinsics", "=", "load_intrinsics", "(", "dataroot", ")", "\n", "extrinsics", "=", "load_rigids", "(", "dataroot", ")", "\n", "expressions", "=", "load_expressions", "(", "os", ".", "path", ".", "join", "(", "opt", ".", "dataroot", ",", "self", ".", "val_sequence_names", "[", "i", "]", "[", "0", "]", ")", ")", "\n", "identity", "=", "load_identity", "(", "dataroot", ")", "\n", "\n", "min_len", "=", "min", "(", "len", "(", "audio_ids", ")", ",", "len", "(", "image_ids", ")", ",", "len", "(", "extrinsics", ")", ",", "len", "(", "expressions", ")", ")", "\n", "\n", "self", ".", "audio_feature_dir", ".", "append", "(", "audio_feature_dir", ")", "\n", "self", ".", "image_dir", ".", "append", "(", "image_dir", ")", "\n", "self", ".", "uvs_dir", ".", "append", "(", "uvs_dir", ")", "\n", "self", ".", "audio_ids", ".", "append", "(", "audio_ids", "[", ":", "min_len", "]", ")", "\n", "self", ".", "image_ids", ".", "append", "(", "image_ids", "[", ":", "min_len", "]", ")", "\n", "self", ".", "intrinsics", ".", "append", "(", "intrinsics", ")", "\n", "self", ".", "extrinsics", ".", "append", "(", "extrinsics", "[", ":", "min_len", "]", ")", "\n", "self", ".", "expressions", ".", "append", "(", "expressions", "[", ":", "min_len", "]", ")", "\n", "self", ".", "identities", ".", "append", "(", "identity", "[", ":", "min_len", "]", ")", "\n", "self", ".", "target_id", ".", "append", "(", "target_id", ")", "\n", "\n", "self", ".", "n_frames_total", "+=", "min_len", "\n", "", "", "else", ":", "# test  ", "\n", "            ", "for", "i", "in", "range", "(", "0", ",", "len", "(", "self", ".", "test_sequence_names", ")", ")", ":", "\n", "                ", "target_id", "=", "self", ".", "test_sequence_targets", "[", "i", "]", "\n", "dataroot", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "dataroot", ",", "self", ".", "train_sequence_names", "[", "target_id", "]", ")", "\n", "audio_feature_dir", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "dataroot", ",", "self", ".", "test_sequence_names", "[", "i", "]", "[", "0", "]", ",", "'audio_feature'", ")", "\n", "image_dir", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "dataroot", ",", "self", ".", "train_sequence_names", "[", "target_id", "]", ",", "'images'", ")", "\n", "uvs_dir", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "dataroot", ",", "self", ".", "train_sequence_names", "[", "target_id", "]", ",", "'uvs'", ")", "\n", "print", "(", "'load test sequence:'", ",", "self", ".", "test_sequence_names", "[", "i", "]", ")", "\n", "print", "(", "'\\tidentity_dir:'", ",", "dataroot", ")", "\n", "print", "(", "'\\taudio_feature_dir:'", ",", "audio_feature_dir", ")", "\n", "print", "(", "'\\timage_dir:'", ",", "image_dir", ")", "\n", "print", "(", "'\\tuvs_dir:'", ",", "uvs_dir", ")", "\n", "audio_ids", "=", "make_ids", "(", "make_dataset", "(", "audio_feature_dir", ")", ",", "os", ".", "path", ".", "join", "(", "opt", ".", "dataroot", ",", "self", ".", "test_sequence_names", "[", "i", "]", "[", "0", "]", ")", ")", "\n", "image_ids", "=", "make_dataset_ids_png", "(", "image_dir", ")", "# [-1] * len(audio_ids) #make_ids(make_dataset(image_dir), dataroot)", "\n", "intrinsics", "=", "load_intrinsics", "(", "dataroot", ")", "\n", "extrinsics", "=", "load_rigids", "(", "dataroot", ")", "\n", "expressions", "=", "load_expressions", "(", "os", ".", "path", ".", "join", "(", "opt", ".", "dataroot", ",", "self", ".", "test_sequence_names", "[", "i", "]", "[", "0", "]", ")", ")", "\n", "identity", "=", "load_identity", "(", "dataroot", ")", "\n", "\n", "min_len", "=", "min", "(", "len", "(", "audio_ids", ")", ",", "len", "(", "image_ids", ")", ",", "len", "(", "extrinsics", ")", ",", "len", "(", "expressions", ")", ")", "\n", "\n", "self", ".", "audio_feature_dir", ".", "append", "(", "audio_feature_dir", ")", "\n", "self", ".", "image_dir", ".", "append", "(", "image_dir", ")", "\n", "self", ".", "uvs_dir", ".", "append", "(", "uvs_dir", ")", "\n", "self", ".", "audio_ids", ".", "append", "(", "audio_ids", "[", ":", "min_len", "]", ")", "\n", "self", ".", "image_ids", ".", "append", "(", "image_ids", "[", ":", "min_len", "]", ")", "\n", "self", ".", "intrinsics", ".", "append", "(", "intrinsics", ")", "\n", "self", ".", "extrinsics", ".", "append", "(", "extrinsics", "[", ":", "min_len", "]", ")", "\n", "self", ".", "expressions", ".", "append", "(", "expressions", "[", ":", "min_len", "]", ")", "\n", "self", ".", "identities", ".", "append", "(", "identity", "[", ":", "min_len", "]", ")", "\n", "self", ".", "target_id", ".", "append", "(", "target_id", ")", "\n", "\n", "self", ".", "n_frames_total", "+=", "min_len", "\n", "\n", "\n", "", "", "print", "(", "'frames_total:'", ",", "self", ".", "n_frames_total", ")", "\n", "\n", "\n", "#global_target_ids = []", "\n", "#for i in range(0,len(self.audio_ids)):", "\n", "#    for j in range(0,len(self.audio_ids[i])):", "\n", "#        global_target_ids.append(self.target_id[i])", "\n", "#global_target_ids=np.array(global_target_ids)", "\n", "#self.weights = np.where(global_target_ids==2, 1.0 * np.ones((self.n_frames_total)),  0.01 * np.ones((self.n_frames_total)) )", "\n", "self", ".", "weights", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "0", ",", "len", "(", "self", ".", "audio_ids", ")", ")", ":", "\n", "            ", "l", "=", "len", "(", "self", ".", "audio_ids", "[", "i", "]", ")", "\n", "for", "j", "in", "range", "(", "0", ",", "l", ")", ":", "\n", "                ", "self", ".", "weights", ".", "append", "(", "1.0", "/", "l", ")", "\n", "", "", "self", ".", "weights", "=", "np", ".", "array", "(", "self", ".", "weights", ")", "\n", "\n", "assert", "(", "opt", ".", "resize_or_crop", "==", "'resize_and_crop'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.data.multi_face_audio_eq_tmp_dataset.MultiFaceAudioEQTmpDataset.getSampleWeights": [[318, 320], ["None"], "methods", ["None"], ["", "def", "getSampleWeights", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "weights", "\n", "\n"]], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.data.multi_face_audio_eq_tmp_dataset.MultiFaceAudioEQTmpDataset.getitem": [[321, 400], ["range", "numpy.asarray", "torch.tensor", "torch.tensor", "os.path.join", "numpy.load", "numpy.resize", "range", "len", "len", "len", "torchvision.ToTensor", "numpy.resize.astype", "os.path.join", "numpy.load", "numpy.resize", "torch.cat", "numpy.array", "numpy.array", "numpy.array().astype", "len", "str", "torchvision.ToTensor", "numpy.resize.astype", "str", "numpy.array"], "methods", ["None"], ["", "def", "getitem", "(", "self", ",", "global_index", ")", ":", "\n", "\n", "# select sequence", "\n", "        ", "internal_sequence_id", "=", "0", "\n", "sum_frames", "=", "0", "\n", "for", "i", "in", "range", "(", "0", ",", "len", "(", "self", ".", "audio_ids", ")", ")", ":", "\n", "            ", "l", "=", "len", "(", "self", ".", "audio_ids", "[", "i", "]", ")", "\n", "if", "(", "global_index", "-", "sum_frames", ")", "<", "l", ":", "\n", "                ", "internal_sequence_id", "=", "i", "\n", "break", "\n", "", "else", ":", "\n", "                ", "sum_frames", "+=", "len", "(", "self", ".", "audio_ids", "[", "i", "]", ")", "\n", "\n", "# select frame from sequence", "\n", "", "", "index", "=", "(", "global_index", "-", "sum_frames", ")", "%", "len", "(", "self", ".", "audio_ids", "[", "internal_sequence_id", "]", ")", "\n", "\n", "# get data ids", "\n", "audio_id", "=", "self", ".", "audio_ids", "[", "internal_sequence_id", "]", "[", "index", "]", "\n", "image_id", "=", "self", ".", "image_ids", "[", "internal_sequence_id", "]", "[", "index", "]", "\n", "\n", "#print('GET ITEM: ', index)", "\n", "#img_path = self.frame_paths[sequence_id][index]", "\n", "\n", "# intrinsics and extrinsics", "\n", "intrinsics", "=", "self", ".", "intrinsics", "[", "internal_sequence_id", "]", "\n", "extrinsics", "=", "self", ".", "extrinsics", "[", "internal_sequence_id", "]", "[", "image_id", "]", "\n", "\n", "# expressions", "\n", "expressions", "=", "np", ".", "asarray", "(", "self", ".", "expressions", "[", "internal_sequence_id", "]", "[", "audio_id", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "#print('expressions:', expressions.shape)", "\n", "expressions", "[", "32", "]", "*=", "0.0", "# remove eye brow movements", "\n", "expressions", "[", "41", "]", "*=", "0.0", "# remove eye brow movements", "\n", "expressions", "[", "71", ":", "75", "]", "*=", "0.0", "# remove eye brow movements", "\n", "expressions", "=", "torch", ".", "tensor", "(", "expressions", ")", "\n", "\n", "\n", "\n", "# identity", "\n", "identity", "=", "torch", ".", "tensor", "(", "self", ".", "identities", "[", "internal_sequence_id", "]", "[", "image_id", "]", ")", "\n", "target_id", "=", "self", ".", "target_id", "[", "internal_sequence_id", "]", "# sequence id refers to the target sequence (of the training corpus)", "\n", "\n", "# load deepspeech feature", "\n", "#print('audio_id', audio_id)    ", "\n", "dsf_fname", "=", "os", ".", "path", ".", "join", "(", "self", ".", "audio_feature_dir", "[", "internal_sequence_id", "]", ",", "str", "(", "audio_id", ")", "+", "'.deepspeech.npy'", ")", "\n", "feature_array", "=", "np", ".", "load", "(", "dsf_fname", ")", "\n", "dsf_np", "=", "np", ".", "resize", "(", "feature_array", ",", "(", "16", ",", "29", ",", "1", ")", ")", "\n", "dsf", "=", "transforms", ".", "ToTensor", "(", ")", "(", "dsf_np", ".", "astype", "(", "np", ".", "float32", ")", ")", "\n", "\n", "# load sequence data if necessary", "\n", "last_valid_idx", "=", "audio_id", "\n", "for", "i", "in", "range", "(", "1", ",", "self", ".", "opt", ".", "seq_len", ")", ":", "\n", "            ", "index_seq", "=", "index", "-", "i", "\n", "if", "index_seq", "<", "0", ":", "index_seq", "=", "0", "\n", "audio_id_seq", "=", "self", ".", "audio_ids", "[", "internal_sequence_id", "]", "[", "index_seq", "]", "\n", "if", "audio_id_seq", "==", "audio_id", "-", "i", ":", "last_valid_idx", "=", "audio_id_seq", "\n", "else", ":", "audio_id_seq", "=", "last_valid_idx", "\n", "\n", "dsf_fname", "=", "os", ".", "path", ".", "join", "(", "self", ".", "audio_feature_dir", "[", "internal_sequence_id", "]", ",", "str", "(", "audio_id_seq", ")", "+", "'.deepspeech.npy'", ")", "\n", "feature_array", "=", "np", ".", "load", "(", "dsf_fname", ")", "\n", "dsf_np", "=", "np", ".", "resize", "(", "feature_array", ",", "(", "16", ",", "29", ",", "1", ")", ")", "\n", "dsf_seq", "=", "transforms", ".", "ToTensor", "(", ")", "(", "dsf_np", ".", "astype", "(", "np", ".", "float32", ")", ")", "# 1 x 16 x 29", "\n", "dsf", "=", "torch", ".", "cat", "(", "[", "dsf_seq", ",", "dsf", "]", ",", "0", ")", "# seq_len x 16 x 29", "\n", "# note the ordering [old ... current]", "\n", "\n", "\n", "\n", "#weight = 1.0 / len(self.audio_feature_dir[internal_sequence_id])", "\n", "", "weight", "=", "self", ".", "weights", "[", "global_index", "]", "\n", "\n", "return", "{", "'paths'", ":", "dsf_fname", ",", "#img_path,", "\n", "'intrinsics'", ":", "np", ".", "array", "(", "intrinsics", ")", ",", "\n", "'extrinsics'", ":", "np", ".", "array", "(", "extrinsics", ")", ",", "\n", "'expressions'", ":", "expressions", ",", "\n", "'identity'", ":", "identity", ",", "\n", "'audio_deepspeech'", ":", "dsf", ",", "# deepspeech feature", "\n", "'target_id'", ":", "target_id", ",", "\n", "'internal_id'", ":", "internal_sequence_id", ",", "\n", "\n", "'weight'", ":", "np", ".", "array", "(", "[", "weight", "]", ")", ".", "astype", "(", "np", ".", "float32", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.data.multi_face_audio_eq_tmp_dataset.MultiFaceAudioEQTmpDataset.__getitem__": [[402, 428], ["multi_face_audio_eq_tmp_dataset.MultiFaceAudioEQTmpDataset.getitem", "multi_face_audio_eq_tmp_dataset.MultiFaceAudioEQTmpDataset.getitem", "multi_face_audio_eq_tmp_dataset.MultiFaceAudioEQTmpDataset.getitem", "max", "min"], "methods", ["home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.data.facetmp_dataset.FaceTmpDataset.getitem", "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.data.facetmp_dataset.FaceTmpDataset.getitem", "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.data.facetmp_dataset.FaceTmpDataset.getitem"], ["", "def", "__getitem__", "(", "self", ",", "global_index", ")", ":", "\n", "# select frame from sequence", "\n", "        ", "index", "=", "global_index", "\n", "current", "=", "self", ".", "getitem", "(", "index", ")", "\n", "prv", "=", "self", ".", "getitem", "(", "max", "(", "index", "-", "1", ",", "0", ")", ")", "\n", "nxt", "=", "self", ".", "getitem", "(", "min", "(", "index", "+", "1", ",", "self", ".", "n_frames_total", "-", "1", ")", ")", "\n", "\n", "return", "{", "\n", "'paths'", ":", "current", "[", "'paths'", "]", ",", "#img_path,", "\n", "'target_id'", ":", "current", "[", "'target_id'", "]", ",", "\n", "'internal_id'", ":", "current", "[", "'internal_id'", "]", ",", "\n", "'weight'", ":", "current", "[", "'weight'", "]", ",", "\n", "'identity'", ":", "current", "[", "'identity'", "]", ",", "\n", "'intrinsics'", ":", "current", "[", "'intrinsics'", "]", ",", "\n", "\n", "'extrinsics'", ":", "current", "[", "'extrinsics'", "]", ",", "\n", "'expressions'", ":", "current", "[", "'expressions'", "]", ",", "\n", "'audio_deepspeech'", ":", "current", "[", "'audio_deepspeech'", "]", ",", "\n", "\n", "'extrinsics_prv'", ":", "prv", "[", "'extrinsics'", "]", ",", "\n", "'expressions_prv'", ":", "prv", "[", "'expressions'", "]", ",", "\n", "'audio_deepspeech_prv'", ":", "prv", "[", "'audio_deepspeech'", "]", ",", "\n", "\n", "'extrinsics_nxt'", ":", "nxt", "[", "'extrinsics'", "]", ",", "\n", "'expressions_nxt'", ":", "nxt", "[", "'expressions'", "]", ",", "\n", "'audio_deepspeech_nxt'", ":", "nxt", "[", "'audio_deepspeech'", "]", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.data.multi_face_audio_eq_tmp_dataset.MultiFaceAudioEQTmpDataset.__len__": [[431, 433], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "n_frames_total", "#len(self.frame_paths[0])", "\n", "\n"]], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.data.multi_face_audio_eq_tmp_dataset.MultiFaceAudioEQTmpDataset.name": [[434, 436], ["None"], "methods", ["None"], ["", "def", "name", "(", "self", ")", ":", "\n", "        ", "return", "'MultiFaceAudioEQTmpDataset'", "\n", "", "", ""]], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.data.multi_face_audio_eq_tmp_dataset.make_dataset": [[21, 39], ["os.path.isdir", "sorted", "sorted", "os.walk", "os.path.join", "images.append", "any", "str", "int", "sorted.append", "fname.endswith"], "function", ["None"], ["def", "make_dataset", "(", "dir", ")", ":", "\n", "    ", "images", "=", "[", "]", "\n", "ids", "=", "[", "]", "\n", "assert", "os", ".", "path", ".", "isdir", "(", "dir", ")", ",", "'%s is not a valid directory'", "%", "dir", "\n", "for", "root", ",", "_", ",", "fnames", "in", "sorted", "(", "os", ".", "walk", "(", "dir", ")", ")", ":", "\n", "        ", "for", "fname", "in", "fnames", ":", "\n", "            ", "if", "any", "(", "fname", ".", "endswith", "(", "extension", ")", "for", "extension", "in", "[", "'.npy'", ",", "'.NPY'", "]", ")", ":", "\n", "#.deepspeech.npy", "\n", "                ", "id_str", "=", "fname", "[", ":", "-", "15", "]", "#4]", "\n", "i", "=", "int", "(", "id_str", ")", "\n", "ids", ".", "append", "(", "i", ")", "\n", "", "", "", "ids", "=", "sorted", "(", "ids", ")", "\n", "\n", "for", "id", "in", "ids", ":", "\n", "        ", "fname", "=", "str", "(", "id", ")", "+", "'.deepspeech.npy'", "\n", "path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "fname", ")", "\n", "images", ".", "append", "(", "path", ")", "\n", "", "return", "images", "\n", "\n"]], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.data.multi_face_audio_eq_tmp_dataset.make_ids": [[40, 50], ["fname.rfind", "int", "ids.append"], "function", ["None"], ["", "def", "make_ids", "(", "paths", ",", "root_dir", ")", ":", "\n", "    ", "ids", "=", "[", "]", "\n", "\n", "for", "fname", "in", "paths", ":", "\n", "        ", "l", "=", "fname", ".", "rfind", "(", "'/'", ")", "\n", "id_str", "=", "fname", "[", "l", "+", "1", ":", "-", "15", "]", "#4]", "\n", "i", "=", "int", "(", "id_str", ")", "\n", "#print(fname, ': ', i)", "\n", "ids", ".", "append", "(", "i", ")", "\n", "", "return", "ids", "\n", "\n"]], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.data.multi_face_audio_eq_tmp_dataset.make_dataset_ids_png": [[51, 63], ["os.path.isdir", "sorted", "sorted", "os.walk", "any", "int", "sorted.append", "fname.endswith"], "function", ["None"], ["", "def", "make_dataset_ids_png", "(", "dir", ")", ":", "\n", "    ", "images", "=", "[", "]", "\n", "ids", "=", "[", "]", "\n", "assert", "os", ".", "path", ".", "isdir", "(", "dir", ")", ",", "'%s is not a valid directory'", "%", "dir", "\n", "for", "root", ",", "_", ",", "fnames", "in", "sorted", "(", "os", ".", "walk", "(", "dir", ")", ")", ":", "\n", "        ", "for", "fname", "in", "fnames", ":", "\n", "            ", "if", "any", "(", "fname", ".", "endswith", "(", "extension", ")", "for", "extension", "in", "[", "'.png'", ",", "'.png'", "]", ")", ":", "\n", "                ", "id_str", "=", "fname", "[", ":", "-", "4", "]", "\n", "i", "=", "int", "(", "id_str", ")", "\n", "ids", ".", "append", "(", "i", ")", "\n", "", "", "", "ids", "=", "sorted", "(", "ids", ")", "\n", "return", "ids", "\n", "\n"]], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.data.multi_face_audio_eq_tmp_dataset.load_intrinsics": [[64, 70], ["open", "open.close", "list", "float", "line.split"], "function", ["None"], ["", "def", "load_intrinsics", "(", "input_dir", ")", ":", "\n", "    ", "file", "=", "open", "(", "input_dir", "+", "\"/intrinsics.txt\"", ",", "\"r\"", ")", "\n", "intrinsics", "=", "[", "[", "(", "float", "(", "x", ")", "for", "x", "in", "line", ".", "split", "(", ")", ")", "]", "for", "line", "in", "file", "]", "\n", "file", ".", "close", "(", ")", "\n", "intrinsics", "=", "list", "(", "intrinsics", "[", "0", "]", "[", "0", "]", ")", "\n", "return", "intrinsics", "\n", "\n"]], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.data.multi_face_audio_eq_tmp_dataset.load_rigids": [[71, 77], ["open", "open.close", "float", "range", "line.split", "len"], "function", ["None"], ["", "def", "load_rigids", "(", "input_dir", ")", ":", "\n", "    ", "file", "=", "open", "(", "input_dir", "+", "\"/rigid.txt\"", ",", "\"r\"", ")", "\n", "rigid_floats", "=", "[", "[", "float", "(", "x", ")", "for", "x", "in", "line", ".", "split", "(", ")", "]", "for", "line", "in", "file", "]", "# note that it stores 5 lines per matrix (blank line)", "\n", "file", ".", "close", "(", ")", "\n", "all_rigids", "=", "[", "[", "rigid_floats", "[", "4", "*", "idx", "+", "0", "]", ",", "rigid_floats", "[", "4", "*", "idx", "+", "1", "]", ",", "rigid_floats", "[", "4", "*", "idx", "+", "2", "]", ",", "rigid_floats", "[", "4", "*", "idx", "+", "3", "]", "]", "for", "idx", "in", "range", "(", "0", ",", "len", "(", "rigid_floats", ")", "//", "4", ")", "]", "\n", "return", "all_rigids", "\n", "\n"]], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.data.multi_face_audio_eq_tmp_dataset.load_expressions": [[78, 83], ["open", "open.close", "float", "line.split"], "function", ["None"], ["", "def", "load_expressions", "(", "input_dir", ")", ":", "\n", "    ", "file", "=", "open", "(", "input_dir", "+", "\"/expression.txt\"", ",", "\"r\"", ")", "\n", "expressions", "=", "[", "[", "float", "(", "x", ")", "for", "x", "in", "line", ".", "split", "(", ")", "]", "for", "line", "in", "file", "]", "\n", "file", ".", "close", "(", ")", "\n", "return", "expressions", "\n", "\n"]], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.data.multi_face_audio_eq_tmp_dataset.load_identity": [[84, 89], ["open", "open.close", "float", "line.split"], "function", ["None"], ["", "def", "load_identity", "(", "input_dir", ")", ":", "\n", "    ", "file", "=", "open", "(", "input_dir", "+", "\"/identities.txt\"", ",", "\"r\"", ")", "\n", "identities", "=", "[", "[", "float", "(", "x", ")", "for", "x", "in", "line", ".", "split", "(", ")", "]", "for", "line", "in", "file", "]", "\n", "file", ".", "close", "(", ")", "\n", "return", "identities", "\n", "\n"]], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.data.audio.Audio.name": [[22, 24], ["None"], "methods", ["None"], ["    ", "def", "name", "(", "self", ")", ":", "\n", "        ", "return", "'Audio'", "\n", "\n"]], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.data.audio.Audio.__init__": [[25, 61], ["librosa.load", "librosa.load", "librosa.load", "librosa.load", "print", "print", "print", "int", "print", "librosa.feature.melspectrogram", "librosa.feature.melspectrogram", "librosa.feature.melspectrogram", "librosa.feature.melspectrogram", "print", "print", "print", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "print", "matplotlib.figure", "librosa.display.specshow", "librosa.display.specshow", "librosa.display.specshow", "librosa.display.specshow", "matplotlib.colorbar", "matplotlib.title", "matplotlib.tight_layout", "matplotlib.savefig", "librosa.power_to_db", "librosa.power_to_db", "librosa.power_to_db", "librosa.power_to_db"], "methods", ["None"], ["", "def", "__init__", "(", "self", ",", "filename", ",", "write_mel_spectogram", "=", "False", ")", ":", "\n", "        ", "self", ".", "n_mels", "=", "128", "\n", "self", ".", "fmax", "=", "8000", "\n", "self", ".", "hop_length_ms", "=", "20", "\n", "\n", "sound", ",", "sample_rate", "=", "librosa", ".", "load", "(", "filename", ")", "#torchaudio.load(filename)", "\n", "self", ".", "raw_audio", "=", "sound", "\n", "self", ".", "sample_rate", "=", "sample_rate", "\n", "print", "(", "'sample_rate = %d'", "%", "self", ".", "sample_rate", ")", "\n", "self", ".", "n_samples", "=", "sound", ".", "shape", "[", "0", "]", "\n", "self", ".", "time_total", "=", "self", ".", "n_samples", "/", "self", ".", "sample_rate", "\n", "print", "(", "'length = %ds'", "%", "self", ".", "time_total", ")", "\n", "\n", "print", "(", "'compute mel spectrogram...'", ")", "\n", "self", ".", "hop_length", "=", "int", "(", "sample_rate", "/", "1000.0", "*", "self", ".", "hop_length_ms", ")", "\n", "print", "(", "'hop_length: '", ",", "self", ".", "hop_length", ")", "\n", "self", ".", "mel_spectrogram", "=", "librosa", ".", "feature", ".", "melspectrogram", "(", "y", "=", "self", ".", "raw_audio", ",", "sr", "=", "self", ".", "sample_rate", ",", "hop_length", "=", "self", ".", "hop_length", ",", "n_mels", "=", "self", ".", "n_mels", ",", "fmax", "=", "self", ".", "fmax", ")", "\n", "\n", "\n", "if", "write_mel_spectogram", ":", "\n", "            ", "print", "(", "'write spectrogram to file'", ")", "\n", "plt", ".", "figure", "(", "figsize", "=", "(", "100", ",", "15", ")", ")", "\n", "librosa", ".", "display", ".", "specshow", "(", "librosa", ".", "power_to_db", "(", "self", ".", "mel_spectrogram", ",", "ref", "=", "np", ".", "max", ")", ",", "y_axis", "=", "'mel'", ",", "fmax", "=", "self", ".", "fmax", ",", "x_axis", "=", "'time'", ")", "\n", "plt", ".", "colorbar", "(", "format", "=", "'%+2.0f dB'", ")", "\n", "plt", ".", "title", "(", "'Mel spectrogram'", ")", "\n", "plt", ".", "tight_layout", "(", ")", "\n", "plt", ".", "savefig", "(", "'mel_features.png'", ",", "dpi", "=", "None", ",", "facecolor", "=", "'w'", ",", "edgecolor", "=", "'w'", ",", "orientation", "=", "'portrait'", ",", "papertype", "=", "None", ",", "format", "=", "None", ",", "transparent", "=", "False", ",", "bbox_inches", "=", "None", ",", "pad_inches", "=", "0.1", ",", "frameon", "=", "None", ",", "metadata", "=", "None", ")", "\n", "\n", "", "print", "(", "'mel: '", ",", "self", ".", "mel_spectrogram", ".", "shape", ")", "# (128, 18441)", "\n", "self", ".", "n_mel_frames", "=", "self", ".", "mel_spectrogram", ".", "shape", "[", "1", "]", "\n", "self", ".", "mel_sample_rate", "=", "self", ".", "mel_spectrogram", ".", "shape", "[", "1", "]", "/", "self", ".", "time_total", "\n", "print", "(", "'n_mel_frames: '", ",", "self", ".", "n_mel_frames", ")", "\n", "print", "(", "'mel_sample_rate: '", ",", "self", ".", "mel_sample_rate", ")", "\n", "\n", "# convert to torch", "\n", "self", ".", "mel_spectrogram", "=", "torch", ".", "FloatTensor", "(", "self", ".", "mel_spectrogram", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.data.audio.Audio.getWindow": [[62, 78], ["torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "getWindow", "(", "self", ",", "mel_frame_idx", ",", "window_size", ")", ":", "\n", "# get audio mel sample window", "\n", "        ", "audio_start", "=", "mel_frame_idx", "-", "(", "window_size", "//", "2", ")", "\n", "audio_end", "=", "mel_frame_idx", "+", "(", "window_size", "//", "2", ")", "\n", "if", "audio_start", "<", "0", ":", "\n", "            ", "audio_input", "=", "self", ".", "mel_spectrogram", "[", "0", ":", "self", ".", "n_mels", ",", "0", ":", "audio_end", "]", "\n", "zeros", "=", "torch", ".", "zeros", "(", "(", "self", ".", "n_mels", ",", "-", "audio_start", ")", ")", "\n", "audio_input", "=", "torch", ".", "cat", "(", "[", "zeros", ",", "audio_input", "]", ",", "1", ")", "\n", "", "elif", "audio_end", ">=", "self", ".", "n_mel_frames", ":", "\n", "            ", "audio_input", "=", "self", ".", "mel_spectrogram", "[", ":", ",", "audio_start", ":", "-", "1", "]", "\n", "zeros", "=", "torch", ".", "zeros", "(", "(", "self", ".", "n_mels", ",", "audio_end", "-", "self", ".", "n_mel_frames", "+", "1", ")", ")", "\n", "audio_input", "=", "torch", ".", "cat", "(", "[", "audio_input", ",", "zeros", "]", ",", "1", ")", "\n", "", "else", ":", "\n", "            ", "audio_input", "=", "self", ".", "mel_spectrogram", "[", ":", ",", "audio_start", ":", "audio_end", "]", "\n", "\n", "", "return", "torch", ".", "reshape", "(", "audio_input", ",", "(", "1", ",", "1", ",", "self", ".", "n_mels", ",", "window_size", ")", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.data.multi_face_audio_eq_tmp_cached_dataset.MultiFaceAudioEQTmpCachedDataset.modify_commandline_options": [[93, 96], ["None"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "modify_commandline_options", "(", "parser", ",", "is_train", ")", ":", "\n", "        ", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.data.multi_face_audio_eq_tmp_cached_dataset.MultiFaceAudioEQTmpCachedDataset.initialize": [[97, 338], ["open", "open.close", "open", "open.close", "range", "open", "open.close", "range", "open", "open.close", "range", "print", "print", "print", "print", "print", "print", "range", "range", "len", "len", "len", "print", "range", "numpy.array", "str", "str", "len", "len", "len", "len", "len", "len", "len", "range", "multi_face_audio_eq_tmp_cached_dataset.MultiFaceAudioEQTmpCachedDataset.val_sequence_targets.append", "len", "range", "multi_face_audio_eq_tmp_cached_dataset.MultiFaceAudioEQTmpCachedDataset.test_sequence_targets.append", "print", "print", "range", "len", "len", "range", "progressbar.ProgressBar", "range", "str", "str", "len", "print", "exit", "len", "print", "exit", "len", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "print", "print", "print", "print", "print", "multi_face_audio_eq_tmp_cached_dataset.make_ids", "multi_face_audio_eq_tmp_cached_dataset.make_dataset_ids_png", "multi_face_audio_eq_tmp_cached_dataset.load_intrinsics", "multi_face_audio_eq_tmp_cached_dataset.load_rigids", "multi_face_audio_eq_tmp_cached_dataset.load_expressions", "multi_face_audio_eq_tmp_cached_dataset.load_identity", "min", "multi_face_audio_eq_tmp_cached_dataset.MultiFaceAudioEQTmpCachedDataset.audio_feature_dir.append", "multi_face_audio_eq_tmp_cached_dataset.MultiFaceAudioEQTmpCachedDataset.image_dir.append", "multi_face_audio_eq_tmp_cached_dataset.MultiFaceAudioEQTmpCachedDataset.uvs_dir.append", "multi_face_audio_eq_tmp_cached_dataset.MultiFaceAudioEQTmpCachedDataset.audio_ids.append", "multi_face_audio_eq_tmp_cached_dataset.MultiFaceAudioEQTmpCachedDataset.image_ids.append", "multi_face_audio_eq_tmp_cached_dataset.MultiFaceAudioEQTmpCachedDataset.intrinsics.append", "multi_face_audio_eq_tmp_cached_dataset.MultiFaceAudioEQTmpCachedDataset.extrinsics.append", "multi_face_audio_eq_tmp_cached_dataset.MultiFaceAudioEQTmpCachedDataset.expressions.append", "multi_face_audio_eq_tmp_cached_dataset.MultiFaceAudioEQTmpCachedDataset.identities.append", "multi_face_audio_eq_tmp_cached_dataset.MultiFaceAudioEQTmpCachedDataset.target_id.append", "range", "range", "multi_face_audio_eq_tmp_cached_dataset.MultiFaceAudioEQTmpCachedDataset.weights.append", "len", "len", "range", "multi_face_audio_eq_tmp_cached_dataset.MultiFaceAudioEQTmpCachedDataset.dsf.append", "line.split", "line.split", "multi_face_audio_eq_tmp_cached_dataset.make_dataset", "len", "len", "len", "len", "len", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "print", "print", "print", "print", "print", "multi_face_audio_eq_tmp_cached_dataset.make_ids", "multi_face_audio_eq_tmp_cached_dataset.make_dataset_ids_png", "multi_face_audio_eq_tmp_cached_dataset.load_intrinsics", "multi_face_audio_eq_tmp_cached_dataset.load_rigids", "multi_face_audio_eq_tmp_cached_dataset.load_expressions", "multi_face_audio_eq_tmp_cached_dataset.load_identity", "min", "multi_face_audio_eq_tmp_cached_dataset.MultiFaceAudioEQTmpCachedDataset.audio_feature_dir.append", "multi_face_audio_eq_tmp_cached_dataset.MultiFaceAudioEQTmpCachedDataset.image_dir.append", "multi_face_audio_eq_tmp_cached_dataset.MultiFaceAudioEQTmpCachedDataset.uvs_dir.append", "multi_face_audio_eq_tmp_cached_dataset.MultiFaceAudioEQTmpCachedDataset.audio_ids.append", "multi_face_audio_eq_tmp_cached_dataset.MultiFaceAudioEQTmpCachedDataset.image_ids.append", "multi_face_audio_eq_tmp_cached_dataset.MultiFaceAudioEQTmpCachedDataset.intrinsics.append", "multi_face_audio_eq_tmp_cached_dataset.MultiFaceAudioEQTmpCachedDataset.extrinsics.append", "multi_face_audio_eq_tmp_cached_dataset.MultiFaceAudioEQTmpCachedDataset.expressions.append", "multi_face_audio_eq_tmp_cached_dataset.MultiFaceAudioEQTmpCachedDataset.identities.append", "multi_face_audio_eq_tmp_cached_dataset.MultiFaceAudioEQTmpCachedDataset.target_id.append", "len", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "print", "print", "print", "print", "print", "multi_face_audio_eq_tmp_cached_dataset.make_ids", "multi_face_audio_eq_tmp_cached_dataset.make_dataset_ids_png", "multi_face_audio_eq_tmp_cached_dataset.load_intrinsics", "multi_face_audio_eq_tmp_cached_dataset.load_rigids", "multi_face_audio_eq_tmp_cached_dataset.load_expressions", "multi_face_audio_eq_tmp_cached_dataset.load_identity", "min", "multi_face_audio_eq_tmp_cached_dataset.MultiFaceAudioEQTmpCachedDataset.audio_feature_dir.append", "multi_face_audio_eq_tmp_cached_dataset.MultiFaceAudioEQTmpCachedDataset.image_dir.append", "multi_face_audio_eq_tmp_cached_dataset.MultiFaceAudioEQTmpCachedDataset.uvs_dir.append", "multi_face_audio_eq_tmp_cached_dataset.MultiFaceAudioEQTmpCachedDataset.audio_ids.append", "multi_face_audio_eq_tmp_cached_dataset.MultiFaceAudioEQTmpCachedDataset.image_ids.append", "multi_face_audio_eq_tmp_cached_dataset.MultiFaceAudioEQTmpCachedDataset.intrinsics.append", "multi_face_audio_eq_tmp_cached_dataset.MultiFaceAudioEQTmpCachedDataset.extrinsics.append", "multi_face_audio_eq_tmp_cached_dataset.MultiFaceAudioEQTmpCachedDataset.expressions.append", "multi_face_audio_eq_tmp_cached_dataset.MultiFaceAudioEQTmpCachedDataset.identities.append", "multi_face_audio_eq_tmp_cached_dataset.MultiFaceAudioEQTmpCachedDataset.target_id.append", "multi_face_audio_eq_tmp_cached_dataset.MultiFaceAudioEQTmpCachedDataset.mapping_global2internal.append", "multi_face_audio_eq_tmp_cached_dataset.MultiFaceAudioEQTmpCachedDataset.mapping_global2internal_offset.append", "os.path.join", "numpy.load", "numpy.resize", "dsf_seq.append", "bar.update", "multi_face_audio_eq_tmp_cached_dataset.make_dataset", "os.path.join", "os.path.join", "len", "len", "len", "len", "multi_face_audio_eq_tmp_cached_dataset.make_dataset", "os.path.join", "os.path.join", "len", "len", "len", "len", "numpy.resize.astype", "str"], "methods", ["home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.data.audio_dataset.make_ids", "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.data.multi_face_audio_eq_tmp_cached_dataset.make_dataset_ids_png", "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.data.facetmp_dataset.load_intrinsics", "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.data.facetmp_dataset.load_rigids", "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.data.facetmp_dataset.load_expressions", "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.data.facetmp_dataset.load_identity", "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.data.audio_dataset.make_dataset", "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.data.audio_dataset.make_ids", "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.data.multi_face_audio_eq_tmp_cached_dataset.make_dataset_ids_png", "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.data.facetmp_dataset.load_intrinsics", "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.data.facetmp_dataset.load_rigids", "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.data.facetmp_dataset.load_expressions", "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.data.facetmp_dataset.load_identity", "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.data.audio_dataset.make_ids", "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.data.multi_face_audio_eq_tmp_cached_dataset.make_dataset_ids_png", "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.data.facetmp_dataset.load_intrinsics", "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.data.facetmp_dataset.load_rigids", "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.data.facetmp_dataset.load_expressions", "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.data.facetmp_dataset.load_identity", "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.data.audio_dataset.make_dataset", "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.data.audio_dataset.make_dataset"], ["", "def", "initialize", "(", "self", ",", "opt", ")", ":", "\n", "        ", "self", ".", "opt", "=", "opt", "\n", "self", ".", "root", "=", "opt", ".", "dataroot", "\n", "\n", "# read dataset file that contains the filenames for the train, val and test lists", "\n", "file", "=", "open", "(", "self", ".", "root", "+", "\"/dataset.txt\"", ",", "\"r\"", ")", "\n", "self", ".", "filename_train_list", ",", "self", ".", "filename_val_list", ",", "self", ".", "filename_test_list", "=", "[", "str", "(", "line", ")", "for", "line", "in", "file", "]", "\n", "file", ".", "close", "(", ")", "\n", "if", "self", ".", "filename_train_list", "[", "-", "1", "]", "==", "'\\n'", ":", "self", ".", "filename_train_list", "=", "self", ".", "filename_train_list", "[", ":", "-", "1", "]", "\n", "if", "self", ".", "filename_val_list", "[", "-", "1", "]", "==", "'\\n'", ":", "self", ".", "filename_val_list", "=", "self", ".", "filename_val_list", "[", ":", "-", "1", "]", "\n", "if", "self", ".", "filename_test_list", "[", "-", "1", "]", "==", "'\\n'", ":", "self", ".", "filename_test_list", "=", "self", ".", "filename_test_list", "[", ":", "-", "1", "]", "\n", "\n", "\n", "\n", "# get list of train sequences", "\n", "file", "=", "open", "(", "self", ".", "root", "+", "\"/\"", "+", "self", ".", "filename_train_list", ",", "\"r\"", ")", "\n", "self", ".", "train_sequence_names", "=", "[", "str", "(", "line", ")", "for", "line", "in", "file", "]", "\n", "file", ".", "close", "(", ")", "\n", "for", "i", "in", "range", "(", "0", ",", "len", "(", "self", ".", "train_sequence_names", ")", ")", ":", "\n", "            ", "if", "self", ".", "train_sequence_names", "[", "i", "]", "[", "-", "1", "]", "==", "'\\n'", ":", "\n", "                ", "self", ".", "train_sequence_names", "[", "i", "]", "=", "self", ".", "train_sequence_names", "[", "i", "]", "[", ":", "-", "1", "]", "\n", "\n", "# get list of val sequences", "\n", "", "", "file", "=", "open", "(", "self", ".", "root", "+", "\"/\"", "+", "self", ".", "filename_val_list", ",", "\"r\"", ")", "\n", "self", ".", "val_sequence_names", "=", "[", "[", "str", "(", "w", ")", "for", "w", "in", "line", ".", "split", "(", ")", "]", "for", "line", "in", "file", "]", "\n", "file", ".", "close", "(", ")", "\n", "for", "i", "in", "range", "(", "0", ",", "len", "(", "self", ".", "val_sequence_names", ")", ")", ":", "\n", "            ", "if", "self", ".", "val_sequence_names", "[", "i", "]", "[", "0", "]", "[", "-", "1", "]", "==", "'\\n'", ":", "self", ".", "val_sequence_names", "[", "i", "]", "[", "0", "]", "=", "self", ".", "val_sequence_names", "[", "i", "]", "[", "0", "]", "[", ":", "-", "1", "]", "\n", "if", "self", ".", "val_sequence_names", "[", "i", "]", "[", "1", "]", "[", "-", "1", "]", "==", "'\\n'", ":", "self", ".", "val_sequence_names", "[", "i", "]", "[", "1", "]", "=", "self", ".", "val_sequence_names", "[", "i", "]", "[", "1", "]", "[", ":", "-", "1", "]", "\n", "\n", "# get list of test sequences", "\n", "", "file", "=", "open", "(", "self", ".", "root", "+", "\"/\"", "+", "self", ".", "filename_test_list", ",", "\"r\"", ")", "\n", "self", ".", "test_sequence_names", "=", "[", "[", "str", "(", "w", ")", "for", "w", "in", "line", ".", "split", "(", ")", "]", "for", "line", "in", "file", "]", "\n", "if", "opt", ".", "output_audio_expressions", ":", "self", ".", "test_sequence_names", "=", "self", ".", "test_sequence_names", "[", "0", ":", "1", "]", "\n", "file", ".", "close", "(", ")", "\n", "for", "i", "in", "range", "(", "0", ",", "len", "(", "self", ".", "test_sequence_names", ")", ")", ":", "\n", "            ", "if", "self", ".", "test_sequence_names", "[", "i", "]", "[", "0", "]", "[", "-", "1", "]", "==", "'\\n'", ":", "self", ".", "test_sequence_names", "[", "i", "]", "[", "0", "]", "=", "self", ".", "test_sequence_names", "[", "i", "]", "[", "0", "]", "[", ":", "-", "1", "]", "\n", "if", "self", ".", "test_sequence_names", "[", "i", "]", "[", "1", "]", "[", "-", "1", "]", "==", "'\\n'", ":", "self", ".", "test_sequence_names", "[", "i", "]", "[", "1", "]", "=", "self", ".", "test_sequence_names", "[", "i", "]", "[", "1", "]", "[", ":", "-", "1", "]", "\n", "\n", "# print some stats", "\n", "", "print", "(", "'filename_train_list:'", ",", "self", ".", "filename_train_list", ")", "\n", "print", "(", "'\\tnum_seq:'", ",", "len", "(", "self", ".", "train_sequence_names", ")", ")", "\n", "print", "(", "'filename_val_list:  '", ",", "self", ".", "filename_val_list", ")", "\n", "print", "(", "'\\tnum_seq:'", ",", "len", "(", "self", ".", "val_sequence_names", ")", ")", "\n", "print", "(", "'filename_test_list: '", ",", "self", ".", "filename_test_list", ")", "\n", "print", "(", "'\\tnum_seq:'", ",", "len", "(", "self", ".", "test_sequence_names", ")", ")", "\n", "\n", "opt", ".", "train_sequence_names", "=", "self", ".", "train_sequence_names", "\n", "opt", ".", "val_sequence_names", "=", "self", ".", "val_sequence_names", "\n", "opt", ".", "test_sequence_names", "=", "self", ".", "test_sequence_names", "\n", "\n", "# search mapping from val, test to train sequences that are used as targets", "\n", "self", ".", "val_sequence_targets", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "0", ",", "len", "(", "self", ".", "val_sequence_names", ")", ")", ":", "\n", "            ", "target_name", "=", "self", ".", "val_sequence_names", "[", "i", "]", "[", "1", "]", "\n", "target_id", "=", "-", "1", "\n", "for", "j", "in", "range", "(", "0", ",", "len", "(", "self", ".", "train_sequence_names", ")", ")", ":", "\n", "                ", "if", "self", ".", "train_sequence_names", "[", "j", "]", "==", "target_name", ":", "\n", "                    ", "target_id", "=", "j", "\n", "break", "\n", "", "", "if", "target_id", "==", "-", "1", ":", "\n", "                ", "print", "(", "'Target sequence not in train set! '", ",", "target_name", ")", "\n", "exit", "(", ")", "\n", "", "self", ".", "val_sequence_targets", ".", "append", "(", "target_id", ")", "\n", "\n", "", "self", ".", "test_sequence_targets", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "0", ",", "len", "(", "self", ".", "test_sequence_names", ")", ")", ":", "\n", "            ", "target_name", "=", "self", ".", "test_sequence_names", "[", "i", "]", "[", "1", "]", "\n", "target_id", "=", "-", "1", "\n", "for", "j", "in", "range", "(", "0", ",", "len", "(", "self", ".", "train_sequence_names", ")", ")", ":", "\n", "                ", "if", "self", ".", "train_sequence_names", "[", "j", "]", "==", "target_name", ":", "\n", "                    ", "target_id", "=", "j", "\n", "break", "\n", "", "", "if", "target_id", "==", "-", "1", ":", "\n", "                ", "print", "(", "'Target sequence not in train set! '", ",", "target_name", ")", "\n", "exit", "(", ")", "\n", "", "self", ".", "test_sequence_targets", ".", "append", "(", "target_id", ")", "\n", "print", "(", "'test: '", ",", "self", ".", "test_sequence_names", "[", "i", "]", ")", "\n", "print", "(", "'\\t target:'", ",", "target_id", ")", "\n", "\n", "# store len values", "\n", "", "opt", ".", "nTrainObjects", "=", "len", "(", "self", ".", "train_sequence_names", ")", "\n", "opt", ".", "nValObjects", "=", "len", "(", "self", ".", "val_sequence_names", ")", "\n", "opt", ".", "nTestObjects", "=", "len", "(", "self", ".", "test_sequence_names", ")", "\n", "\n", "################################################", "\n", "################################################", "\n", "################################################", "\n", "\n", "# prepare dataloader paths / data", "\n", "self", ".", "audio_feature_dir", "=", "[", "]", "\n", "self", ".", "image_dir", "=", "[", "]", "\n", "self", ".", "uvs_dir", "=", "[", "]", "\n", "self", ".", "audio_ids", "=", "[", "]", "\n", "self", ".", "image_ids", "=", "[", "]", "\n", "self", ".", "intrinsics", "=", "[", "]", "\n", "self", ".", "extrinsics", "=", "[", "]", "\n", "self", ".", "expressions", "=", "[", "]", "\n", "self", ".", "identities", "=", "[", "]", "\n", "self", ".", "target_id", "=", "[", "]", "\n", "self", ".", "n_frames_total", "=", "0", "\n", "\n", "if", "opt", ".", "phase", "==", "'train'", ":", "\n", "            ", "self", ".", "sequence_names", "=", "self", ".", "train_sequence_names", "\n", "for", "i", "in", "range", "(", "0", ",", "len", "(", "self", ".", "train_sequence_names", ")", ")", ":", "\n", "                ", "dataroot", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "dataroot", ",", "self", ".", "train_sequence_names", "[", "i", "]", ")", "\n", "audio_feature_dir", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "dataroot", ",", "self", ".", "train_sequence_names", "[", "i", "]", ",", "'audio_feature'", ")", "\n", "image_dir", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "dataroot", ",", "self", ".", "train_sequence_names", "[", "i", "]", ",", "'images'", ")", "\n", "uvs_dir", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "dataroot", ",", "self", ".", "train_sequence_names", "[", "i", "]", ",", "'uvs'", ")", "\n", "print", "(", "'load train sequence:'", ",", "self", ".", "train_sequence_names", "[", "i", "]", ")", "\n", "print", "(", "'\\tidentity_dir:'", ",", "dataroot", ")", "\n", "print", "(", "'\\taudio_feature_dir:'", ",", "audio_feature_dir", ")", "\n", "print", "(", "'\\timage_dir:'", ",", "image_dir", ")", "\n", "print", "(", "'\\tuvs_dir:'", ",", "uvs_dir", ")", "\n", "\n", "audio_ids", "=", "make_ids", "(", "make_dataset", "(", "audio_feature_dir", ")", ",", "dataroot", ")", "\n", "image_ids", "=", "make_dataset_ids_png", "(", "image_dir", ")", "# [-1] * len(audio_ids) #make_ids(make_dataset(image_dir), dataroot)", "\n", "intrinsics", "=", "load_intrinsics", "(", "dataroot", ")", "\n", "extrinsics", "=", "load_rigids", "(", "dataroot", ")", "\n", "expressions", "=", "load_expressions", "(", "dataroot", ")", "\n", "identity", "=", "load_identity", "(", "dataroot", ")", "\n", "\n", "min_len", "=", "min", "(", "len", "(", "audio_ids", ")", ",", "len", "(", "image_ids", ")", ",", "len", "(", "extrinsics", ")", ",", "len", "(", "expressions", ")", ")", "\n", "\n", "self", ".", "audio_feature_dir", ".", "append", "(", "audio_feature_dir", ")", "\n", "self", ".", "image_dir", ".", "append", "(", "image_dir", ")", "\n", "self", ".", "uvs_dir", ".", "append", "(", "uvs_dir", ")", "\n", "self", ".", "audio_ids", ".", "append", "(", "audio_ids", "[", ":", "min_len", "]", ")", "\n", "self", ".", "image_ids", ".", "append", "(", "image_ids", "[", ":", "min_len", "]", ")", "\n", "self", ".", "intrinsics", ".", "append", "(", "intrinsics", ")", "\n", "self", ".", "extrinsics", ".", "append", "(", "extrinsics", "[", ":", "min_len", "]", ")", "\n", "self", ".", "expressions", ".", "append", "(", "expressions", "[", ":", "min_len", "]", ")", "\n", "self", ".", "identities", ".", "append", "(", "identity", "[", ":", "min_len", "]", ")", "\n", "self", ".", "target_id", ".", "append", "(", "i", ")", "\n", "\n", "self", ".", "n_frames_total", "+=", "min_len", "\n", "", "", "elif", "opt", ".", "phase", "==", "'val'", ":", "\n", "            ", "for", "i", "in", "range", "(", "0", ",", "len", "(", "self", ".", "val_sequence_names", ")", ")", ":", "\n", "                ", "target_id", "=", "self", ".", "val_sequence_targets", "[", "i", "]", "\n", "dataroot", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "dataroot", ",", "self", ".", "train_sequence_names", "[", "target_id", "]", ")", "\n", "audio_feature_dir", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "dataroot", ",", "self", ".", "val_sequence_names", "[", "i", "]", "[", "0", "]", ",", "'audio_feature'", ")", "\n", "image_dir", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "dataroot", ",", "self", ".", "train_sequence_names", "[", "target_id", "]", ",", "'images'", ")", "\n", "uvs_dir", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "dataroot", ",", "self", ".", "train_sequence_names", "[", "target_id", "]", ",", "'uvs'", ")", "\n", "print", "(", "'load val sequence:'", ",", "self", ".", "val_sequence_names", "[", "i", "]", ")", "\n", "print", "(", "'\\tidentity_dir:'", ",", "dataroot", ")", "\n", "print", "(", "'\\taudio_feature_dir:'", ",", "audio_feature_dir", ")", "\n", "print", "(", "'\\timage_dir:'", ",", "image_dir", ")", "\n", "print", "(", "'\\tuvs_dir:'", ",", "uvs_dir", ")", "\n", "audio_ids", "=", "make_ids", "(", "make_dataset", "(", "audio_feature_dir", ")", ",", "os", ".", "path", ".", "join", "(", "opt", ".", "dataroot", ",", "self", ".", "val_sequence_names", "[", "i", "]", "[", "0", "]", ")", ")", "\n", "image_ids", "=", "make_dataset_ids_png", "(", "image_dir", ")", "# [-1] * len(audio_ids) #make_ids(make_dataset(image_dir), dataroot)", "\n", "intrinsics", "=", "load_intrinsics", "(", "dataroot", ")", "\n", "extrinsics", "=", "load_rigids", "(", "dataroot", ")", "\n", "expressions", "=", "load_expressions", "(", "os", ".", "path", ".", "join", "(", "opt", ".", "dataroot", ",", "self", ".", "val_sequence_names", "[", "i", "]", "[", "0", "]", ")", ")", "\n", "identity", "=", "load_identity", "(", "dataroot", ")", "\n", "\n", "min_len", "=", "min", "(", "len", "(", "audio_ids", ")", ",", "len", "(", "image_ids", ")", ",", "len", "(", "extrinsics", ")", ",", "len", "(", "expressions", ")", ")", "\n", "\n", "self", ".", "audio_feature_dir", ".", "append", "(", "audio_feature_dir", ")", "\n", "self", ".", "image_dir", ".", "append", "(", "image_dir", ")", "\n", "self", ".", "uvs_dir", ".", "append", "(", "uvs_dir", ")", "\n", "self", ".", "audio_ids", ".", "append", "(", "audio_ids", "[", ":", "min_len", "]", ")", "\n", "self", ".", "image_ids", ".", "append", "(", "image_ids", "[", ":", "min_len", "]", ")", "\n", "self", ".", "intrinsics", ".", "append", "(", "intrinsics", ")", "\n", "self", ".", "extrinsics", ".", "append", "(", "extrinsics", "[", ":", "min_len", "]", ")", "\n", "self", ".", "expressions", ".", "append", "(", "expressions", "[", ":", "min_len", "]", ")", "\n", "self", ".", "identities", ".", "append", "(", "identity", "[", ":", "min_len", "]", ")", "\n", "self", ".", "target_id", ".", "append", "(", "target_id", ")", "\n", "\n", "self", ".", "n_frames_total", "+=", "min_len", "\n", "", "", "else", ":", "# test  ", "\n", "            ", "for", "i", "in", "range", "(", "0", ",", "len", "(", "self", ".", "test_sequence_names", ")", ")", ":", "\n", "                ", "target_id", "=", "self", ".", "test_sequence_targets", "[", "i", "]", "\n", "dataroot", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "dataroot", ",", "self", ".", "train_sequence_names", "[", "target_id", "]", ")", "\n", "audio_feature_dir", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "dataroot", ",", "self", ".", "test_sequence_names", "[", "i", "]", "[", "0", "]", ",", "'audio_feature'", ")", "\n", "image_dir", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "dataroot", ",", "self", ".", "train_sequence_names", "[", "target_id", "]", ",", "'images'", ")", "\n", "uvs_dir", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "dataroot", ",", "self", ".", "train_sequence_names", "[", "target_id", "]", ",", "'uvs'", ")", "\n", "print", "(", "'load test sequence:'", ",", "self", ".", "test_sequence_names", "[", "i", "]", ")", "\n", "print", "(", "'\\tidentity_dir:'", ",", "dataroot", ")", "\n", "print", "(", "'\\taudio_feature_dir:'", ",", "audio_feature_dir", ")", "\n", "print", "(", "'\\timage_dir:'", ",", "image_dir", ")", "\n", "print", "(", "'\\tuvs_dir:'", ",", "uvs_dir", ")", "\n", "audio_ids", "=", "make_ids", "(", "make_dataset", "(", "audio_feature_dir", ")", ",", "os", ".", "path", ".", "join", "(", "opt", ".", "dataroot", ",", "self", ".", "test_sequence_names", "[", "i", "]", "[", "0", "]", ")", ")", "\n", "image_ids", "=", "make_dataset_ids_png", "(", "image_dir", ")", "# [-1] * len(audio_ids) #make_ids(make_dataset(image_dir), dataroot)", "\n", "intrinsics", "=", "load_intrinsics", "(", "dataroot", ")", "\n", "extrinsics", "=", "load_rigids", "(", "dataroot", ")", "\n", "expressions", "=", "load_expressions", "(", "os", ".", "path", ".", "join", "(", "opt", ".", "dataroot", ",", "self", ".", "test_sequence_names", "[", "i", "]", "[", "0", "]", ")", ")", "\n", "identity", "=", "load_identity", "(", "dataroot", ")", "\n", "\n", "min_len", "=", "min", "(", "len", "(", "audio_ids", ")", ",", "len", "(", "image_ids", ")", ",", "len", "(", "extrinsics", ")", ",", "len", "(", "expressions", ")", ")", "\n", "\n", "self", ".", "audio_feature_dir", ".", "append", "(", "audio_feature_dir", ")", "\n", "self", ".", "image_dir", ".", "append", "(", "image_dir", ")", "\n", "self", ".", "uvs_dir", ".", "append", "(", "uvs_dir", ")", "\n", "self", ".", "audio_ids", ".", "append", "(", "audio_ids", "[", ":", "min_len", "]", ")", "\n", "self", ".", "image_ids", ".", "append", "(", "image_ids", "[", ":", "min_len", "]", ")", "\n", "self", ".", "intrinsics", ".", "append", "(", "intrinsics", ")", "\n", "self", ".", "extrinsics", ".", "append", "(", "extrinsics", "[", ":", "min_len", "]", ")", "\n", "self", ".", "expressions", ".", "append", "(", "expressions", "[", ":", "min_len", "]", ")", "\n", "self", ".", "identities", ".", "append", "(", "identity", "[", ":", "min_len", "]", ")", "\n", "self", ".", "target_id", ".", "append", "(", "target_id", ")", "\n", "\n", "self", ".", "n_frames_total", "+=", "min_len", "\n", "\n", "\n", "", "", "print", "(", "'frames_total:'", ",", "self", ".", "n_frames_total", ")", "\n", "\n", "\n", "#global_target_ids = []", "\n", "#for i in range(0,len(self.audio_ids)):", "\n", "#    for j in range(0,len(self.audio_ids[i])):", "\n", "#        global_target_ids.append(self.target_id[i])", "\n", "#global_target_ids=np.array(global_target_ids)", "\n", "#self.weights = np.where(global_target_ids==2, 1.0 * np.ones((self.n_frames_total)),  0.01 * np.ones((self.n_frames_total)) )", "\n", "self", ".", "weights", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "0", ",", "len", "(", "self", ".", "audio_ids", ")", ")", ":", "\n", "            ", "l", "=", "len", "(", "self", ".", "audio_ids", "[", "i", "]", ")", "\n", "for", "j", "in", "range", "(", "0", ",", "l", ")", ":", "\n", "                ", "self", ".", "weights", ".", "append", "(", "1.0", "/", "l", ")", "\n", "", "", "self", ".", "weights", "=", "np", ".", "array", "(", "self", ".", "weights", ")", "\n", "\n", "assert", "(", "opt", ".", "resize_or_crop", "==", "'resize_and_crop'", ")", "\n", "\n", "# mapping global to internal", "\n", "self", ".", "mapping_global2internal", "=", "[", "]", "\n", "self", ".", "mapping_global2internal_offset", "=", "[", "]", "\n", "self", ".", "dsf", "=", "[", "]", "\n", "offset", "=", "0", "\n", "with", "progressbar", ".", "ProgressBar", "(", "max_value", "=", "self", ".", "n_frames_total", ")", "as", "bar", ":", "\n", "            ", "for", "i", "in", "range", "(", "0", ",", "len", "(", "self", ".", "audio_ids", ")", ")", ":", "\n", "                ", "l", "=", "len", "(", "self", ".", "audio_ids", "[", "i", "]", ")", "\n", "dsf_seq", "=", "[", "]", "\n", "for", "k", "in", "range", "(", "0", ",", "l", ")", ":", "\n", "                    ", "self", ".", "mapping_global2internal", ".", "append", "(", "i", ")", "\n", "self", ".", "mapping_global2internal_offset", ".", "append", "(", "offset", ")", "\n", "dsf_fname", "=", "os", ".", "path", ".", "join", "(", "self", ".", "audio_feature_dir", "[", "i", "]", ",", "str", "(", "self", ".", "audio_ids", "[", "i", "]", "[", "k", "]", ")", "+", "'.deepspeech.npy'", ")", "\n", "feature_array", "=", "np", ".", "load", "(", "dsf_fname", ")", "\n", "dsf_np", "=", "np", ".", "resize", "(", "feature_array", ",", "(", "16", ",", "29", ",", "1", ")", ")", "\n", "dsf_seq", ".", "append", "(", "dsf_np", ".", "astype", "(", "np", ".", "float32", ")", ")", "\n", "bar", ".", "update", "(", "offset", "+", "k", ")", "\n", "", "self", ".", "dsf", ".", "append", "(", "dsf_seq", ")", "\n", "offset", "+=", "l", "\n", "\n"]], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.data.multi_face_audio_eq_tmp_cached_dataset.MultiFaceAudioEQTmpCachedDataset.getSampleWeights": [[340, 342], ["None"], "methods", ["None"], ["", "", "", "def", "getSampleWeights", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "weights", "\n", "\n"]], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.data.multi_face_audio_eq_tmp_cached_dataset.MultiFaceAudioEQTmpCachedDataset.getitem": [[343, 423], ["numpy.asarray", "torch.tensor", "torch.tensor", "os.path.join", "len", "torchvision.ToTensor", "range", "range", "range", "numpy.array", "numpy.array", "numpy.array().astype", "str", "torch.cat", "torch.cat", "torch.cat", "torchvision.ToTensor", "len", "torchvision.ToTensor", "torchvision.ToTensor", "numpy.array"], "methods", ["None"], ["", "def", "getitem", "(", "self", ",", "global_index", ")", ":", "\n", "\n", "# select sequence", "\n", "        ", "internal_sequence_id", "=", "self", ".", "mapping_global2internal", "[", "global_index", "]", "\n", "sum_frames", "=", "self", ".", "mapping_global2internal_offset", "[", "global_index", "]", "\n", "\n", "# select frame from sequence", "\n", "index", "=", "(", "global_index", "-", "sum_frames", ")", "%", "len", "(", "self", ".", "audio_ids", "[", "internal_sequence_id", "]", ")", "\n", "\n", "# get data ids", "\n", "audio_id", "=", "self", ".", "audio_ids", "[", "internal_sequence_id", "]", "[", "index", "]", "\n", "image_id", "=", "self", ".", "image_ids", "[", "internal_sequence_id", "]", "[", "index", "]", "\n", "\n", "#print('GET ITEM: ', index)", "\n", "#img_path = self.frame_paths[sequence_id][index]", "\n", "\n", "# intrinsics and extrinsics", "\n", "intrinsics", "=", "self", ".", "intrinsics", "[", "internal_sequence_id", "]", "\n", "extrinsics", "=", "self", ".", "extrinsics", "[", "internal_sequence_id", "]", "[", "image_id", "]", "\n", "\n", "# expressions", "\n", "expressions", "=", "np", ".", "asarray", "(", "self", ".", "expressions", "[", "internal_sequence_id", "]", "[", "audio_id", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "#print('expressions:', expressions.shape)", "\n", "expressions", "[", "32", "]", "*=", "0.0", "# remove eye brow movements", "\n", "expressions", "[", "41", "]", "*=", "0.0", "# remove eye brow movements", "\n", "expressions", "[", "71", ":", "75", "]", "*=", "0.0", "# remove eye brow movements", "\n", "expressions", "=", "torch", ".", "tensor", "(", "expressions", ")", "\n", "\n", "# identity", "\n", "identity", "=", "torch", ".", "tensor", "(", "self", ".", "identities", "[", "internal_sequence_id", "]", "[", "image_id", "]", ")", "\n", "target_id", "=", "self", ".", "target_id", "[", "internal_sequence_id", "]", "# sequence id refers to the target sequence (of the training corpus)", "\n", "\n", "# load deepspeech feature", "\n", "#print('audio_id', audio_id)", "\n", "dsf_fname", "=", "os", ".", "path", ".", "join", "(", "self", ".", "audio_feature_dir", "[", "internal_sequence_id", "]", ",", "str", "(", "audio_id", ")", "+", "'.deepspeech.npy'", ")", "\n", "\n", "dsf_np", "=", "self", ".", "dsf", "[", "internal_sequence_id", "]", "[", "index", "]", "\n", "dsf", "=", "transforms", ".", "ToTensor", "(", ")", "(", "dsf_np", ")", "\n", "\n", "# load sequence data if necessary", "\n", "if", "self", ".", "opt", ".", "look_ahead", ":", "# use prev and following frame infos", "\n", "            ", "r", "=", "self", ".", "opt", ".", "seq_len", "//", "2", "\n", "for", "i", "in", "range", "(", "1", ",", "r", ")", ":", "# prev frames", "\n", "                ", "index_seq", "=", "index", "-", "i", "\n", "if", "index_seq", "<", "0", ":", "index_seq", "=", "0", "\n", "dsf_np", "=", "self", ".", "dsf", "[", "internal_sequence_id", "]", "[", "index_seq", "]", "\n", "dsf_seq", "=", "transforms", ".", "ToTensor", "(", ")", "(", "dsf_np", ")", "# 1 x 16 x 29", "\n", "dsf", "=", "torch", ".", "cat", "(", "[", "dsf_seq", ",", "dsf", "]", ",", "0", ")", "# seq_len x 16 x 29", "\n", "# note the ordering [old ... current]", "\n", "\n", "", "for", "i", "in", "range", "(", "1", ",", "self", ".", "opt", ".", "seq_len", "-", "r", "+", "1", ")", ":", "# following frames", "\n", "                ", "index_seq", "=", "index", "+", "i", "\n", "max_idx", "=", "len", "(", "self", ".", "audio_ids", "[", "internal_sequence_id", "]", ")", "-", "1", "\n", "if", "index_seq", ">", "max_idx", ":", "index_seq", "=", "max_idx", "\n", "dsf_np", "=", "self", ".", "dsf", "[", "internal_sequence_id", "]", "[", "index_seq", "]", "\n", "dsf_seq", "=", "transforms", ".", "ToTensor", "(", ")", "(", "dsf_np", ")", "# 1 x 16 x 29", "\n", "dsf", "=", "torch", ".", "cat", "(", "[", "dsf", ",", "dsf_seq", "]", ",", "0", ")", "# seq_len x 16 x 29", "\n", "# note the ordering [old ... current ... future]", "\n", "", "", "else", ":", "\n", "            ", "for", "i", "in", "range", "(", "1", ",", "self", ".", "opt", ".", "seq_len", ")", ":", "\n", "                ", "index_seq", "=", "index", "-", "i", "\n", "if", "index_seq", "<", "0", ":", "index_seq", "=", "0", "\n", "dsf_np", "=", "self", ".", "dsf", "[", "internal_sequence_id", "]", "[", "index_seq", "]", "\n", "dsf_seq", "=", "transforms", ".", "ToTensor", "(", ")", "(", "dsf_np", ")", "# 1 x 16 x 29", "\n", "dsf", "=", "torch", ".", "cat", "(", "[", "dsf_seq", ",", "dsf", "]", ",", "0", ")", "# seq_len x 16 x 29", "\n", "# note the ordering [old ... current]", "\n", "\n", "#weight = 1.0 / len(self.audio_feature_dir[internal_sequence_id])", "\n", "", "", "weight", "=", "self", ".", "weights", "[", "global_index", "]", "\n", "\n", "return", "{", "'paths'", ":", "dsf_fname", ",", "#img_path,", "\n", "'intrinsics'", ":", "np", ".", "array", "(", "intrinsics", ")", ",", "\n", "'extrinsics'", ":", "np", ".", "array", "(", "extrinsics", ")", ",", "\n", "'expressions'", ":", "expressions", ",", "\n", "'identity'", ":", "identity", ",", "\n", "'audio_deepspeech'", ":", "dsf", ",", "# deepspeech feature", "\n", "'target_id'", ":", "target_id", ",", "\n", "'internal_id'", ":", "internal_sequence_id", ",", "\n", "\n", "'weight'", ":", "np", ".", "array", "(", "[", "weight", "]", ")", ".", "astype", "(", "np", ".", "float32", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.data.multi_face_audio_eq_tmp_cached_dataset.MultiFaceAudioEQTmpCachedDataset.__getitem__": [[425, 451], ["multi_face_audio_eq_tmp_cached_dataset.MultiFaceAudioEQTmpCachedDataset.getitem", "multi_face_audio_eq_tmp_cached_dataset.MultiFaceAudioEQTmpCachedDataset.getitem", "multi_face_audio_eq_tmp_cached_dataset.MultiFaceAudioEQTmpCachedDataset.getitem", "max", "min"], "methods", ["home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.data.facetmp_dataset.FaceTmpDataset.getitem", "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.data.facetmp_dataset.FaceTmpDataset.getitem", "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.data.facetmp_dataset.FaceTmpDataset.getitem"], ["", "def", "__getitem__", "(", "self", ",", "global_index", ")", ":", "\n", "# select frame from sequence", "\n", "        ", "index", "=", "global_index", "\n", "current", "=", "self", ".", "getitem", "(", "index", ")", "\n", "prv", "=", "self", ".", "getitem", "(", "max", "(", "index", "-", "1", ",", "0", ")", ")", "\n", "nxt", "=", "self", ".", "getitem", "(", "min", "(", "index", "+", "1", ",", "self", ".", "n_frames_total", "-", "1", ")", ")", "\n", "\n", "return", "{", "\n", "'paths'", ":", "current", "[", "'paths'", "]", ",", "#img_path,", "\n", "'target_id'", ":", "current", "[", "'target_id'", "]", ",", "\n", "'internal_id'", ":", "current", "[", "'internal_id'", "]", ",", "\n", "'weight'", ":", "current", "[", "'weight'", "]", ",", "\n", "'identity'", ":", "current", "[", "'identity'", "]", ",", "\n", "'intrinsics'", ":", "current", "[", "'intrinsics'", "]", ",", "\n", "\n", "'extrinsics'", ":", "current", "[", "'extrinsics'", "]", ",", "\n", "'expressions'", ":", "current", "[", "'expressions'", "]", ",", "\n", "'audio_deepspeech'", ":", "current", "[", "'audio_deepspeech'", "]", ",", "\n", "\n", "'extrinsics_prv'", ":", "prv", "[", "'extrinsics'", "]", ",", "\n", "'expressions_prv'", ":", "prv", "[", "'expressions'", "]", ",", "\n", "'audio_deepspeech_prv'", ":", "prv", "[", "'audio_deepspeech'", "]", ",", "\n", "\n", "'extrinsics_nxt'", ":", "nxt", "[", "'extrinsics'", "]", ",", "\n", "'expressions_nxt'", ":", "nxt", "[", "'expressions'", "]", ",", "\n", "'audio_deepspeech_nxt'", ":", "nxt", "[", "'audio_deepspeech'", "]", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.data.multi_face_audio_eq_tmp_cached_dataset.MultiFaceAudioEQTmpCachedDataset.__len__": [[454, 456], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "n_frames_total", "#len(self.frame_paths[0])", "\n", "\n"]], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.data.multi_face_audio_eq_tmp_cached_dataset.MultiFaceAudioEQTmpCachedDataset.name": [[457, 459], ["None"], "methods", ["None"], ["", "def", "name", "(", "self", ")", ":", "\n", "        ", "return", "'MultiFaceAudioEQTmpCachedDataset'", "\n", "", "", ""]], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.data.multi_face_audio_eq_tmp_cached_dataset.make_dataset": [[22, 40], ["os.path.isdir", "sorted", "sorted", "os.walk", "os.path.join", "images.append", "any", "str", "int", "sorted.append", "fname.endswith"], "function", ["None"], ["def", "make_dataset", "(", "dir", ")", ":", "\n", "    ", "images", "=", "[", "]", "\n", "ids", "=", "[", "]", "\n", "assert", "os", ".", "path", ".", "isdir", "(", "dir", ")", ",", "'%s is not a valid directory'", "%", "dir", "\n", "for", "root", ",", "_", ",", "fnames", "in", "sorted", "(", "os", ".", "walk", "(", "dir", ")", ")", ":", "\n", "        ", "for", "fname", "in", "fnames", ":", "\n", "            ", "if", "any", "(", "fname", ".", "endswith", "(", "extension", ")", "for", "extension", "in", "[", "'.npy'", ",", "'.NPY'", "]", ")", ":", "\n", "#.deepspeech.npy", "\n", "                ", "id_str", "=", "fname", "[", ":", "-", "15", "]", "#4]", "\n", "i", "=", "int", "(", "id_str", ")", "\n", "ids", ".", "append", "(", "i", ")", "\n", "", "", "", "ids", "=", "sorted", "(", "ids", ")", "\n", "\n", "for", "id", "in", "ids", ":", "\n", "        ", "fname", "=", "str", "(", "id", ")", "+", "'.deepspeech.npy'", "\n", "path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "fname", ")", "\n", "images", ".", "append", "(", "path", ")", "\n", "", "return", "images", "\n", "\n"]], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.data.multi_face_audio_eq_tmp_cached_dataset.make_ids": [[41, 51], ["fname.rfind", "int", "ids.append"], "function", ["None"], ["", "def", "make_ids", "(", "paths", ",", "root_dir", ")", ":", "\n", "    ", "ids", "=", "[", "]", "\n", "\n", "for", "fname", "in", "paths", ":", "\n", "        ", "l", "=", "fname", ".", "rfind", "(", "'/'", ")", "\n", "id_str", "=", "fname", "[", "l", "+", "1", ":", "-", "15", "]", "#4]", "\n", "i", "=", "int", "(", "id_str", ")", "\n", "#print(fname, ': ', i)", "\n", "ids", ".", "append", "(", "i", ")", "\n", "", "return", "ids", "\n", "\n"]], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.data.multi_face_audio_eq_tmp_cached_dataset.make_dataset_ids_png": [[52, 64], ["os.path.isdir", "sorted", "sorted", "os.walk", "any", "int", "sorted.append", "fname.endswith"], "function", ["None"], ["", "def", "make_dataset_ids_png", "(", "dir", ")", ":", "\n", "    ", "images", "=", "[", "]", "\n", "ids", "=", "[", "]", "\n", "assert", "os", ".", "path", ".", "isdir", "(", "dir", ")", ",", "'%s is not a valid directory'", "%", "dir", "\n", "for", "root", ",", "_", ",", "fnames", "in", "sorted", "(", "os", ".", "walk", "(", "dir", ")", ")", ":", "\n", "        ", "for", "fname", "in", "fnames", ":", "\n", "            ", "if", "any", "(", "fname", ".", "endswith", "(", "extension", ")", "for", "extension", "in", "[", "'.png'", ",", "'.png'", "]", ")", ":", "\n", "                ", "id_str", "=", "fname", "[", ":", "-", "4", "]", "\n", "i", "=", "int", "(", "id_str", ")", "\n", "ids", ".", "append", "(", "i", ")", "\n", "", "", "", "ids", "=", "sorted", "(", "ids", ")", "\n", "return", "ids", "\n", "\n"]], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.data.multi_face_audio_eq_tmp_cached_dataset.load_intrinsics": [[65, 71], ["open", "open.close", "list", "float", "line.split"], "function", ["None"], ["", "def", "load_intrinsics", "(", "input_dir", ")", ":", "\n", "    ", "file", "=", "open", "(", "input_dir", "+", "\"/intrinsics.txt\"", ",", "\"r\"", ")", "\n", "intrinsics", "=", "[", "[", "(", "float", "(", "x", ")", "for", "x", "in", "line", ".", "split", "(", ")", ")", "]", "for", "line", "in", "file", "]", "\n", "file", ".", "close", "(", ")", "\n", "intrinsics", "=", "list", "(", "intrinsics", "[", "0", "]", "[", "0", "]", ")", "\n", "return", "intrinsics", "\n", "\n"]], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.data.multi_face_audio_eq_tmp_cached_dataset.load_rigids": [[72, 78], ["open", "open.close", "float", "range", "line.split", "len"], "function", ["None"], ["", "def", "load_rigids", "(", "input_dir", ")", ":", "\n", "    ", "file", "=", "open", "(", "input_dir", "+", "\"/rigid.txt\"", ",", "\"r\"", ")", "\n", "rigid_floats", "=", "[", "[", "float", "(", "x", ")", "for", "x", "in", "line", ".", "split", "(", ")", "]", "for", "line", "in", "file", "]", "# note that it stores 5 lines per matrix (blank line)", "\n", "file", ".", "close", "(", ")", "\n", "all_rigids", "=", "[", "[", "rigid_floats", "[", "4", "*", "idx", "+", "0", "]", ",", "rigid_floats", "[", "4", "*", "idx", "+", "1", "]", ",", "rigid_floats", "[", "4", "*", "idx", "+", "2", "]", ",", "rigid_floats", "[", "4", "*", "idx", "+", "3", "]", "]", "for", "idx", "in", "range", "(", "0", ",", "len", "(", "rigid_floats", ")", "//", "4", ")", "]", "\n", "return", "all_rigids", "\n", "\n"]], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.data.multi_face_audio_eq_tmp_cached_dataset.load_expressions": [[79, 84], ["open", "open.close", "float", "line.split"], "function", ["None"], ["", "def", "load_expressions", "(", "input_dir", ")", ":", "\n", "    ", "file", "=", "open", "(", "input_dir", "+", "\"/expression.txt\"", ",", "\"r\"", ")", "\n", "expressions", "=", "[", "[", "float", "(", "x", ")", "for", "x", "in", "line", ".", "split", "(", ")", "]", "for", "line", "in", "file", "]", "\n", "file", ".", "close", "(", ")", "\n", "return", "expressions", "\n", "\n"]], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.data.multi_face_audio_eq_tmp_cached_dataset.load_identity": [[85, 90], ["open", "open.close", "float", "line.split"], "function", ["None"], ["", "def", "load_identity", "(", "input_dir", ")", ":", "\n", "    ", "file", "=", "open", "(", "input_dir", "+", "\"/identities.txt\"", ",", "\"r\"", ")", "\n", "identities", "=", "[", "[", "float", "(", "x", ")", "for", "x", "in", "line", ".", "split", "(", ")", "]", "for", "line", "in", "file", "]", "\n", "file", ".", "close", "(", ")", "\n", "return", "identities", "\n", "\n"]], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.data.base_dataset.BaseDataset.__init__": [[7, 9], ["torch.Dataset.__init__"], "methods", ["home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "BaseDataset", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.data.base_dataset.BaseDataset.name": [[10, 12], ["None"], "methods", ["None"], ["", "def", "name", "(", "self", ")", ":", "\n", "        ", "return", "'BaseDataset'", "\n", "\n"]], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.data.base_dataset.BaseDataset.modify_commandline_options": [[13, 16], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "modify_commandline_options", "(", "parser", ",", "is_train", ")", ":", "\n", "        ", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.data.base_dataset.BaseDataset.initialize": [[17, 19], ["None"], "methods", ["None"], ["", "def", "initialize", "(", "self", ",", "opt", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.data.base_dataset.BaseDataset.getSampleWeights": [[20, 22], ["torch.ones", "len"], "methods", ["None"], ["", "def", "getSampleWeights", "(", "self", ")", ":", "\n", "        ", "return", "torch", ".", "ones", "(", "(", "len", "(", "self", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.data.base_dataset.BaseDataset.__len__": [[23, 25], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.data.base_dataset.get_transform": [[27, 55], ["torchvision.Compose", "transform_list.append", "transform_list.append", "transform_list.append", "torchvision.ToTensor", "torchvision.Normalize", "torchvision.Resize", "torchvision.RandomCrop", "transform_list.append", "torchvision.RandomHorizontalFlip", "torchvision.RandomCrop", "transform_list.append", "torchvision.Lambda", "transform_list.append", "transform_list.append", "torchvision.Lambda", "torchvision.RandomCrop", "transform_list.append", "ValueError", "base_dataset.__scale_width", "torchvision.Lambda", "base_dataset.__scale_width", "base_dataset.__adjust"], "function", ["home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.data.base_dataset.__scale_width", "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.data.base_dataset.__scale_width", "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.data.base_dataset.__adjust"], ["", "", "def", "get_transform", "(", "opt", ")", ":", "\n", "    ", "transform_list", "=", "[", "]", "\n", "if", "opt", ".", "resize_or_crop", "==", "'resize_and_crop'", ":", "\n", "        ", "osize", "=", "[", "opt", ".", "loadSize", ",", "opt", ".", "loadSize", "]", "\n", "transform_list", ".", "append", "(", "transforms", ".", "Resize", "(", "osize", ",", "Image", ".", "BICUBIC", ")", ")", "\n", "transform_list", ".", "append", "(", "transforms", ".", "RandomCrop", "(", "opt", ".", "fineSize", ")", ")", "\n", "", "elif", "opt", ".", "resize_or_crop", "==", "'crop'", ":", "\n", "        ", "transform_list", ".", "append", "(", "transforms", ".", "RandomCrop", "(", "opt", ".", "fineSize", ")", ")", "\n", "", "elif", "opt", ".", "resize_or_crop", "==", "'scale_width'", ":", "\n", "        ", "transform_list", ".", "append", "(", "transforms", ".", "Lambda", "(", "\n", "lambda", "img", ":", "__scale_width", "(", "img", ",", "opt", ".", "fineSize", ")", ")", ")", "\n", "", "elif", "opt", ".", "resize_or_crop", "==", "'scale_width_and_crop'", ":", "\n", "        ", "transform_list", ".", "append", "(", "transforms", ".", "Lambda", "(", "\n", "lambda", "img", ":", "__scale_width", "(", "img", ",", "opt", ".", "loadSize", ")", ")", ")", "\n", "transform_list", ".", "append", "(", "transforms", ".", "RandomCrop", "(", "opt", ".", "fineSize", ")", ")", "\n", "", "elif", "opt", ".", "resize_or_crop", "==", "'none'", ":", "\n", "        ", "transform_list", ".", "append", "(", "transforms", ".", "Lambda", "(", "\n", "lambda", "img", ":", "__adjust", "(", "img", ")", ")", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'--resize_or_crop %s is not a valid option.'", "%", "opt", ".", "resize_or_crop", ")", "\n", "\n", "", "if", "opt", ".", "isTrain", "and", "not", "opt", ".", "no_flip", ":", "\n", "        ", "transform_list", ".", "append", "(", "transforms", ".", "RandomHorizontalFlip", "(", ")", ")", "\n", "\n", "", "transform_list", "+=", "[", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "(", "0.5", ",", "0.5", ",", "0.5", ")", ",", "\n", "(", "0.5", ",", "0.5", ",", "0.5", ")", ")", "]", "\n", "return", "transforms", ".", "Compose", "(", "transform_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.data.base_dataset.__adjust": [[58, 76], ["img.resize", "base_dataset.__print_size_warning"], "function", ["home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.data.base_dataset.__print_size_warning"], ["", "def", "__adjust", "(", "img", ")", ":", "\n", "    ", "ow", ",", "oh", "=", "img", ".", "size", "\n", "\n", "# the size needs to be a multiple of this number,", "\n", "# because going through generator network may change img size", "\n", "# and eventually cause size mismatch error", "\n", "mult", "=", "4", "\n", "if", "ow", "%", "mult", "==", "0", "and", "oh", "%", "mult", "==", "0", ":", "\n", "        ", "return", "img", "\n", "", "w", "=", "(", "ow", "-", "1", ")", "//", "mult", "\n", "w", "=", "(", "w", "+", "1", ")", "*", "mult", "\n", "h", "=", "(", "oh", "-", "1", ")", "//", "mult", "\n", "h", "=", "(", "h", "+", "1", ")", "*", "mult", "\n", "\n", "if", "ow", "!=", "w", "or", "oh", "!=", "h", ":", "\n", "        ", "__print_size_warning", "(", "ow", ",", "oh", ",", "w", ",", "h", ")", "\n", "\n", "", "return", "img", ".", "resize", "(", "(", "w", ",", "h", ")", ",", "Image", ".", "BICUBIC", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.data.base_dataset.__scale_width": [[78, 97], ["int", "img.resize", "base_dataset.__print_size_warning"], "function", ["home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.data.base_dataset.__print_size_warning"], ["", "def", "__scale_width", "(", "img", ",", "target_width", ")", ":", "\n", "    ", "ow", ",", "oh", "=", "img", ".", "size", "\n", "\n", "# the size needs to be a multiple of this number,", "\n", "# because going through generator network may change img size", "\n", "# and eventually cause size mismatch error", "\n", "mult", "=", "4", "\n", "assert", "target_width", "%", "mult", "==", "0", ",", "\"the target width needs to be multiple of %d.\"", "%", "mult", "\n", "if", "(", "ow", "==", "target_width", "and", "oh", "%", "mult", "==", "0", ")", ":", "\n", "        ", "return", "img", "\n", "", "w", "=", "target_width", "\n", "target_height", "=", "int", "(", "target_width", "*", "oh", "/", "ow", ")", "\n", "m", "=", "(", "target_height", "-", "1", ")", "//", "mult", "\n", "h", "=", "(", "m", "+", "1", ")", "*", "mult", "\n", "\n", "if", "target_height", "!=", "h", ":", "\n", "        ", "__print_size_warning", "(", "target_width", ",", "target_height", ",", "w", ",", "h", ")", "\n", "\n", "", "return", "img", ".", "resize", "(", "(", "w", ",", "h", ")", ",", "Image", ".", "BICUBIC", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.data.base_dataset.__print_size_warning": [[99, 106], ["hasattr", "print"], "function", ["None"], ["", "def", "__print_size_warning", "(", "ow", ",", "oh", ",", "w", ",", "h", ")", ":", "\n", "    ", "if", "not", "hasattr", "(", "__print_size_warning", ",", "'has_printed'", ")", ":", "\n", "        ", "print", "(", "\"The image size needs to be a multiple of 4. \"", "\n", "\"The loaded image size was (%d, %d), so it was adjusted to \"", "\n", "\"(%d, %d). This adjustment will be done to all images \"", "\n", "\"whose sizes are not multiples of 4\"", "%", "(", "ow", ",", "oh", ",", "w", ",", "h", ")", ")", "\n", "__print_size_warning", ".", "has_printed", "=", "True", "\n", "", "", ""]], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.data.facetmp_dataset.FaceTmpDataset.modify_commandline_options": [[108, 111], ["None"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "modify_commandline_options", "(", "parser", ",", "is_train", ")", ":", "\n", "        ", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.data.facetmp_dataset.FaceTmpDataset.initialize": [[112, 182], ["os.path.join", "os.path.join", "os.path.join", "print", "print", "print", "print", "facetmp_dataset.make_ids", "facetmp_dataset.make_dataset_png_ids", "facetmp_dataset.make_dataset_exr_ids", "facetmp_dataset.load_intrinsics", "facetmp_dataset.load_rigids", "facetmp_dataset.load_expressions", "facetmp_dataset.load_identity", "print", "print", "print", "min", "print", "facetmp_dataset.make_dataset", "print", "print", "os.path.join", "os.path.join", "facetmp_dataset.make_ids", "facetmp_dataset.make_dataset_exr_ids", "facetmp_dataset.load_intrinsics", "facetmp_dataset.load_rigids", "facetmp_dataset.load_expressions", "facetmp_dataset.load_identity", "len", "len", "len", "len", "len", "len", "len", "len", "print", "facetmp_dataset.make_dataset", "opt.dataroot.split", "opt.source_dir.split"], "methods", ["home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.data.audio_dataset.make_ids", "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.data.facetmp_dataset.make_dataset_png_ids", "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.data.facetmp_dataset.make_dataset_exr_ids", "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.data.facetmp_dataset.load_intrinsics", "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.data.facetmp_dataset.load_rigids", "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.data.facetmp_dataset.load_expressions", "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.data.facetmp_dataset.load_identity", "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.data.audio_dataset.make_dataset", "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.data.audio_dataset.make_ids", "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.data.facetmp_dataset.make_dataset_exr_ids", "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.data.facetmp_dataset.load_intrinsics", "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.data.facetmp_dataset.load_rigids", "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.data.facetmp_dataset.load_expressions", "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.data.facetmp_dataset.load_identity", "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.data.audio_dataset.make_dataset"], ["", "def", "initialize", "(", "self", ",", "opt", ")", ":", "\n", "        ", "self", ".", "opt", "=", "opt", "\n", "\n", "# directories", "\n", "self", ".", "dataroot", "=", "opt", ".", "dataroot", "\n", "self", ".", "audio_feature_dir", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "dataroot", ",", "'audio_feature'", ")", "\n", "self", ".", "image_dir", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "dataroot", ",", "'images'", ")", "\n", "self", ".", "uvs_dir", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "dataroot", ",", "'uvs'", ")", "\n", "\n", "# debug print", "\n", "print", "(", "'load sequence:'", ",", "self", ".", "dataroot", ")", "\n", "print", "(", "'\\taudio_feature_dir:'", ",", "self", ".", "audio_feature_dir", ")", "\n", "print", "(", "'\\timage_dir:'", ",", "self", ".", "image_dir", ")", "\n", "print", "(", "'\\tuvs_dir:'", ",", "self", ".", "uvs_dir", ")", "\n", "\n", "# generate index maps", "\n", "audio_ids", "=", "make_ids", "(", "make_dataset", "(", "self", ".", "audio_feature_dir", ")", ",", "self", ".", "dataroot", ")", "\n", "image_ids", "=", "make_dataset_png_ids", "(", "self", ".", "image_dir", ")", "\n", "uvs_ids", "=", "make_dataset_exr_ids", "(", "self", ".", "uvs_dir", ")", "\n", "\n", "# get model parameters", "\n", "intrinsics", "=", "load_intrinsics", "(", "self", ".", "dataroot", ")", "\n", "extrinsics", "=", "load_rigids", "(", "self", ".", "dataroot", ")", "\n", "expressions", "=", "load_expressions", "(", "self", ".", "dataroot", ")", "\n", "identities", "=", "load_identity", "(", "self", ".", "dataroot", ")", "\n", "\n", "if", "opt", ".", "phase", "==", "'test'", ":", "# test overwrites the audio and uv files, as well as expressions", "\n", "            ", "print", "(", "'Test mode. Overwriting audio, uv and expressions'", ")", "\n", "print", "(", "'source sequence:'", ",", "opt", ".", "source_dir", ")", "\n", "dataroot", "=", "opt", ".", "source_dir", "\n", "self", ".", "audio_feature_dir", "=", "os", ".", "path", ".", "join", "(", "dataroot", ",", "'audio_feature'", ")", "\n", "self", ".", "uvs_dir", "=", "os", ".", "path", ".", "join", "(", "dataroot", ",", "'uvs'", ")", "\n", "audio_ids", "=", "make_ids", "(", "make_dataset", "(", "self", ".", "audio_feature_dir", ")", ",", "dataroot", ")", "\n", "uvs_ids", "=", "make_dataset_exr_ids", "(", "self", ".", "uvs_dir", ")", "\n", "intrinsics", "=", "load_intrinsics", "(", "dataroot", ")", "\n", "extrinsics", "=", "load_rigids", "(", "dataroot", ")", "\n", "expressions", "=", "load_expressions", "(", "dataroot", ")", "\n", "identities", "=", "load_identity", "(", "dataroot", ")", "\n", "\n", "", "print", "(", "'\\tnum audio_ids:'", ",", "len", "(", "audio_ids", ")", ")", "\n", "print", "(", "'\\tnum image_ids:'", ",", "len", "(", "image_ids", ")", ")", "\n", "print", "(", "'\\tnum uvs_ids:'", ",", "len", "(", "uvs_ids", ")", ")", "\n", "\n", "\n", "# set data", "\n", "min_len", "=", "min", "(", "len", "(", "audio_ids", ")", ",", "len", "(", "image_ids", ")", ",", "len", "(", "uvs_ids", ")", ",", "len", "(", "extrinsics", ")", ",", "len", "(", "expressions", ")", ")", "\n", "self", ".", "audio_ids", "=", "audio_ids", "[", ":", "min_len", "]", "\n", "self", ".", "image_ids", "=", "image_ids", "[", ":", "min_len", "]", "\n", "self", ".", "uvs_ids", "=", "uvs_ids", "[", ":", "min_len", "]", "\n", "self", ".", "intrinsics", "=", "intrinsics", "\n", "self", ".", "extrinsics", "=", "extrinsics", "[", ":", "]", "# extrinsics[:min_len]", "\n", "self", ".", "expressions", "=", "expressions", "[", ":", "]", "# expressions[:min_len]", "\n", "self", ".", "identities", "=", "identities", "[", ":", "]", "#identities[:min_len]", "\n", "self", ".", "n_frames_total", "=", "min_len", "\n", "\n", "print", "(", "'\\tnum frames:'", ",", "self", ".", "n_frames_total", ")", "\n", "\n", "\n", "opt", ".", "nTrainObjects", "=", "1", "\n", "opt", ".", "nValObjects", "=", "1", "\n", "opt", ".", "nTestObjects", "=", "1", "\n", "\n", "\n", "opt", ".", "test_sequence_names", "=", "[", "[", "opt", ".", "dataroot", ".", "split", "(", "\"/\"", ")", "[", "-", "1", "]", ",", "'train'", "]", "]", "\n", "if", "opt", ".", "phase", "==", "'test'", ":", "\n", "\n", "            ", "opt", ".", "test_sequence_names", "=", "[", "[", "opt", ".", "source_dir", ".", "split", "(", "\"/\"", ")", "[", "-", "1", "]", ",", "'test'", "]", "]", "\n", "print", "(", "'test:'", ",", "opt", ".", "test_sequence_names", ")", "\n", "\n", "", "assert", "(", "opt", ".", "resize_or_crop", "==", "'resize_and_crop'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.data.facetmp_dataset.FaceTmpDataset.getSampleWeights": [[183, 186], ["numpy.ones"], "methods", ["None"], ["", "def", "getSampleWeights", "(", "self", ")", ":", "\n", "        ", "weights", "=", "np", ".", "ones", "(", "(", "self", ".", "n_frames_total", ")", ")", "\n", "return", "weights", "\n", "\n"]], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.data.facetmp_dataset.FaceTmpDataset.computeCrop": [[187, 223], ["torch.nonzero", "mask_indices[].data.cpu", "numpy.array", "numpy.random.randint", "numpy.random.randint", "int", "int", "int", "int", "int", "int", "int", "int", "numpy.floor", "numpy.floor", "float", "float", "numpy.random.randint"], "methods", ["None"], ["", "def", "computeCrop", "(", "self", ",", "mask", ",", "MULTIPLE_OF", "=", "64", ",", "random_size", "=", "False", ")", ":", "\n", "        ", "IMG_DIM_X", "=", "mask", ".", "shape", "[", "2", "]", "\n", "IMG_DIM_Y", "=", "mask", ".", "shape", "[", "1", "]", "\n", "if", "random_size", ":", "\n", "# random dimensions", "\n", "            ", "new_dim_x", "=", "np", ".", "random", ".", "randint", "(", "int", "(", "IMG_DIM_X", "*", "0.75", ")", ",", "IMG_DIM_X", "+", "1", ")", "\n", "new_dim_y", "=", "np", ".", "random", ".", "randint", "(", "int", "(", "IMG_DIM_Y", "*", "0.75", ")", ",", "IMG_DIM_Y", "+", "1", ")", "\n", "new_dim_x", "=", "int", "(", "np", ".", "floor", "(", "new_dim_x", "/", "float", "(", "MULTIPLE_OF", ")", ")", "*", "MULTIPLE_OF", ")", "\n", "new_dim_y", "=", "int", "(", "np", ".", "floor", "(", "new_dim_y", "/", "float", "(", "MULTIPLE_OF", ")", ")", "*", "MULTIPLE_OF", ")", "\n", "", "else", ":", "\n", "            ", "new_dim_x", "=", "2", "*", "MULTIPLE_OF", "\n", "new_dim_y", "=", "2", "*", "MULTIPLE_OF", "\n", "\n", "# check dims", "\n", "", "if", "new_dim_x", ">", "IMG_DIM_X", ":", "new_dim_x", "-=", "MULTIPLE_OF", "\n", "if", "new_dim_y", ">", "IMG_DIM_Y", ":", "new_dim_y", "-=", "MULTIPLE_OF", "\n", "\n", "# random pos", "\n", "mask_indices", "=", "torch", ".", "nonzero", "(", "mask", ")", "\n", "_", ",", "bb_mid_point_y", ",", "bb_mid_point_x", "=", "mask_indices", "[", "np", ".", "random", ".", "randint", "(", "0", ",", "mask_indices", ".", "shape", "[", "0", "]", ")", "]", ".", "data", ".", "cpu", "(", ")", "\n", "#print('bb_mid_point', bb_mid_point_x, bb_mid_point_y)", "\n", "\n", "offset_x", "=", "bb_mid_point_x", "-", "new_dim_x", "/", "2", "\n", "offset_y", "=", "bb_mid_point_y", "-", "new_dim_y", "/", "2", "\n", "\n", "\n", "if", "IMG_DIM_X", "==", "new_dim_x", ":", "offset_x", "=", "0", "\n", "if", "offset_x", "<", "0", ":", "offset_x", "=", "0", "\n", "if", "offset_x", "+", "new_dim_x", ">=", "IMG_DIM_X", ":", "offset_x", "=", "IMG_DIM_X", "-", "new_dim_x", "\n", "\n", "if", "IMG_DIM_Y", "==", "new_dim_y", ":", "offset_y", "=", "0", "\n", "if", "offset_y", "<", "0", ":", "offset_y", "=", "0", "\n", "if", "offset_y", "+", "new_dim_y", ">=", "IMG_DIM_Y", ":", "offset_y", "=", "IMG_DIM_Y", "-", "new_dim_y", "\n", "\n", "\n", "return", "np", ".", "array", "(", "[", "int", "(", "offset_x", ")", ",", "int", "(", "offset_y", ")", ",", "int", "(", "new_dim_x", ")", ",", "int", "(", "new_dim_y", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.data.facetmp_dataset.FaceTmpDataset.getitem": [[224, 350], ["os.path.join", "numpy.asarray", "os.path.join", "util.util.util.load_exr", "torch.where", "torch.where", "numpy.asarray", "torch.tensor", "torch.tensor", "os.path.join", "numpy.load", "numpy.resize", "PIL.Image.open", "torchvision.ToTensor", "util.util.load_exr.astype", "torch.zeros_like", "torch.zeros_like", "torchvision.ToTensor", "numpy.resize.astype", "range", "range", "range", "numpy.array", "numpy.array", "str().zfill", "str().zfill", "str", "os.path.join", "numpy.load", "numpy.resize", "torch.cat", "os.path.join", "numpy.load", "numpy.resize", "torch.cat", "os.path.join", "numpy.load", "numpy.resize", "torch.cat", "type", "type", "facetmp_dataset.FaceTmpDataset.computeCrop", "torchvision.ToTensor", "numpy.resize.astype", "len", "torchvision.ToTensor", "numpy.resize.astype", "torchvision.ToTensor", "numpy.resize.astype", "str", "torchvision.ToTensor", "numpy.asarray.astype", "str", "str", "str", "str"], "methods", ["home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.util.util.load_exr", "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.data.facetmp_dataset.FaceTmpDataset.computeCrop"], ["", "def", "getitem", "(", "self", ",", "global_index", ",", "crop", "=", "None", ")", ":", "\n", "# select frame from sequence", "\n", "        ", "index", "=", "global_index", "\n", "\n", "# get data ids", "\n", "audio_id", "=", "self", ".", "audio_ids", "[", "index", "]", "\n", "image_id", "=", "self", ".", "image_ids", "[", "index", "]", "\n", "uv_id", "=", "self", ".", "uvs_ids", "[", "index", "]", "\n", "\n", "#print('GET ITEM: ', index)", "\n", "img_fname", "=", "os", ".", "path", ".", "join", "(", "self", ".", "image_dir", ",", "str", "(", "image_id", ")", ".", "zfill", "(", "5", ")", "+", "'.png'", ")", "\n", "img_numpy", "=", "np", ".", "asarray", "(", "Image", ".", "open", "(", "img_fname", ")", ")", "\n", "TARGET", "=", "2.0", "*", "transforms", ".", "ToTensor", "(", ")", "(", "img_numpy", ".", "astype", "(", "np", ".", "float32", ")", ")", "/", "255.0", "-", "1.0", "\n", "\n", "uv_fname", "=", "os", ".", "path", ".", "join", "(", "self", ".", "uvs_dir", ",", "str", "(", "uv_id", ")", ".", "zfill", "(", "5", ")", "+", "'.exr'", ")", "\n", "uv_numpy", "=", "util", ".", "load_exr", "(", "uv_fname", ")", "\n", "UV", "=", "transforms", ".", "ToTensor", "(", ")", "(", "uv_numpy", ".", "astype", "(", "np", ".", "float32", ")", ")", "\n", "UV", "=", "torch", ".", "where", "(", "UV", ">", "1.0", ",", "torch", ".", "zeros_like", "(", "UV", ")", ",", "UV", ")", "\n", "UV", "=", "torch", ".", "where", "(", "UV", "<", "0.0", ",", "torch", ".", "zeros_like", "(", "UV", ")", ",", "UV", ")", "\n", "UV", "=", "2.0", "*", "UV", "-", "1.0", "\n", "\n", "\n", "# intrinsics and extrinsics", "\n", "intrinsics", "=", "self", ".", "intrinsics", "\n", "extrinsics", "=", "self", ".", "extrinsics", "[", "uv_id", "]", "\n", "\n", "# expressions", "\n", "expressions", "=", "np", ".", "asarray", "(", "self", ".", "expressions", "[", "audio_id", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "#print('expressions:', expressions.shape)", "\n", "expressions", "[", "32", "]", "*=", "0.0", "# remove eye brow movements", "\n", "expressions", "[", "41", "]", "*=", "0.0", "# remove eye brow movements", "\n", "expressions", "[", "71", ":", "75", "]", "*=", "0.0", "# remove eye brow movements", "\n", "expressions", "=", "torch", ".", "tensor", "(", "expressions", ")", "\n", "\n", "# identity", "\n", "identity", "=", "torch", ".", "tensor", "(", "self", ".", "identities", "[", "audio_id", "]", ")", "\n", "\n", "# load deepspeech feature", "\n", "dsf_fname", "=", "os", ".", "path", ".", "join", "(", "self", ".", "audio_feature_dir", ",", "str", "(", "audio_id", ")", "+", "'.deepspeech.npy'", ")", "\n", "feature_array", "=", "np", ".", "load", "(", "dsf_fname", ")", "\n", "dsf_np", "=", "np", ".", "resize", "(", "feature_array", ",", "(", "16", ",", "29", ",", "1", ")", ")", "\n", "dsf", "=", "transforms", ".", "ToTensor", "(", ")", "(", "dsf_np", ".", "astype", "(", "np", ".", "float32", ")", ")", "\n", "\n", "\n", "# load sequence data if necessary", "\n", "if", "self", ".", "opt", ".", "look_ahead", ":", "# use prev and following frame infos", "\n", "            ", "r", "=", "self", ".", "opt", ".", "seq_len", "//", "2", "\n", "last_valid_idx", "=", "audio_id", "\n", "for", "i", "in", "range", "(", "1", ",", "r", ")", ":", "# prev frames", "\n", "                ", "index_seq", "=", "index", "-", "i", "\n", "if", "index_seq", "<", "0", ":", "index_seq", "=", "0", "\n", "audio_id_seq", "=", "self", ".", "audio_ids", "[", "index_seq", "]", "\n", "if", "audio_id_seq", "==", "audio_id", "-", "i", ":", "last_valid_idx", "=", "audio_id_seq", "\n", "else", ":", "audio_id_seq", "=", "last_valid_idx", "\n", "\n", "dsf_fname", "=", "os", ".", "path", ".", "join", "(", "self", ".", "audio_feature_dir", ",", "str", "(", "audio_id_seq", ")", "+", "'.deepspeech.npy'", ")", "\n", "feature_array", "=", "np", ".", "load", "(", "dsf_fname", ")", "\n", "dsf_np", "=", "np", ".", "resize", "(", "feature_array", ",", "(", "16", ",", "29", ",", "1", ")", ")", "\n", "dsf_seq", "=", "transforms", ".", "ToTensor", "(", ")", "(", "dsf_np", ".", "astype", "(", "np", ".", "float32", ")", ")", "# 1 x 16 x 29", "\n", "dsf", "=", "torch", ".", "cat", "(", "[", "dsf_seq", ",", "dsf", "]", ",", "0", ")", "# seq_len x 16 x 29", "\n", "# note the ordering [old ... current]", "\n", "\n", "", "last_valid_idx", "=", "audio_id", "\n", "for", "i", "in", "range", "(", "1", ",", "self", ".", "opt", ".", "seq_len", "-", "r", "+", "1", ")", ":", "# following frames", "\n", "                ", "index_seq", "=", "index", "+", "i", "\n", "max_idx", "=", "len", "(", "self", ".", "audio_ids", ")", "-", "1", "\n", "if", "index_seq", ">", "max_idx", ":", "index_seq", "=", "max_idx", "\n", "audio_id_seq", "=", "self", ".", "audio_ids", "[", "index_seq", "]", "\n", "if", "audio_id_seq", "==", "audio_id", "+", "i", ":", "last_valid_idx", "=", "audio_id_seq", "\n", "else", ":", "audio_id_seq", "=", "last_valid_idx", "\n", "\n", "dsf_fname", "=", "os", ".", "path", ".", "join", "(", "self", ".", "audio_feature_dir", ",", "str", "(", "audio_id_seq", ")", "+", "'.deepspeech.npy'", ")", "\n", "feature_array", "=", "np", ".", "load", "(", "dsf_fname", ")", "\n", "dsf_np", "=", "np", ".", "resize", "(", "feature_array", ",", "(", "16", ",", "29", ",", "1", ")", ")", "\n", "dsf_seq", "=", "transforms", ".", "ToTensor", "(", ")", "(", "dsf_np", ".", "astype", "(", "np", ".", "float32", ")", ")", "# 1 x 16 x 29", "\n", "dsf", "=", "torch", ".", "cat", "(", "[", "dsf", ",", "dsf_seq", "]", ",", "0", ")", "# seq_len x 16 x 29", "\n", "# note the ordering [old ... current ... future]", "\n", "", "", "else", ":", "\n", "            ", "last_valid_idx", "=", "audio_id", "\n", "for", "i", "in", "range", "(", "1", ",", "self", ".", "opt", ".", "seq_len", ")", ":", "\n", "                ", "index_seq", "=", "index", "-", "i", "\n", "if", "index_seq", "<", "0", ":", "index_seq", "=", "0", "\n", "audio_id_seq", "=", "self", ".", "audio_ids", "[", "index_seq", "]", "\n", "if", "audio_id_seq", "==", "audio_id", "-", "i", ":", "last_valid_idx", "=", "audio_id_seq", "\n", "else", ":", "audio_id_seq", "=", "last_valid_idx", "\n", "\n", "dsf_fname", "=", "os", ".", "path", ".", "join", "(", "self", ".", "audio_feature_dir", ",", "str", "(", "audio_id_seq", ")", "+", "'.deepspeech.npy'", ")", "\n", "feature_array", "=", "np", ".", "load", "(", "dsf_fname", ")", "\n", "dsf_np", "=", "np", ".", "resize", "(", "feature_array", ",", "(", "16", ",", "29", ",", "1", ")", ")", "\n", "dsf_seq", "=", "transforms", ".", "ToTensor", "(", ")", "(", "dsf_np", ".", "astype", "(", "np", ".", "float32", ")", ")", "# 1 x 16 x 29", "\n", "dsf", "=", "torch", ".", "cat", "(", "[", "dsf_seq", ",", "dsf", "]", ",", "0", ")", "# seq_len x 16 x 29", "\n", "# note the ordering [old ... current]", "\n", "\n", "#################################", "\n", "####### apply augmentation ######", "\n", "#################################", "\n", "\n", "", "", "if", "not", "self", ".", "opt", ".", "no_augmentation", ":", "\n", "            ", "if", "type", "(", "crop", ")", "==", "type", "(", "None", ")", ":", "\n", "                ", "INVALID_UV", "=", "-", "1", "\n", "mask", "=", "(", "(", "UV", "[", "0", ":", "1", ",", ":", ",", ":", "]", "!=", "INVALID_UV", ")", "|", "(", "UV", "[", "1", ":", "2", ",", ":", ",", ":", "]", "!=", "INVALID_UV", ")", ")", "\n", "crop", "=", "self", ".", "computeCrop", "(", "mask", ",", "MULTIPLE_OF", "=", "64", ")", "# << dependent on the network structure !! 64 => 6 layers", "\n", "\n", "", "offset_x", ",", "offset_y", ",", "new_dim_x", ",", "new_dim_y", "=", "crop", "\n", "\n", "# select subwindow", "\n", "TARGET", "=", "TARGET", "[", ":", ",", "offset_y", ":", "offset_y", "+", "new_dim_y", ",", "offset_x", ":", "offset_x", "+", "new_dim_x", "]", "\n", "UV", "=", "UV", "[", ":", ",", "offset_y", ":", "offset_y", "+", "new_dim_y", ",", "offset_x", ":", "offset_x", "+", "new_dim_x", "]", "\n", "\n", "# compute new intrinsics", "\n", "# TODO: atm not needed but maybe later", "\n", "\n", "#################################", "\n", "\n", "\n", "", "return", "{", "'TARGET'", ":", "TARGET", ",", "'UV'", ":", "UV", ",", "\n", "'paths'", ":", "dsf_fname", ",", "#img_path,", "\n", "'intrinsics'", ":", "np", ".", "array", "(", "intrinsics", ")", ",", "\n", "'extrinsics'", ":", "np", ".", "array", "(", "extrinsics", ")", ",", "\n", "'expressions'", ":", "expressions", ",", "\n", "'identity'", ":", "identity", ",", "\n", "'audio_deepspeech'", ":", "dsf", ",", "# deepspeech feature", "\n", "#'target_id':target_id,", "\n", "'crop'", ":", "crop", ",", "\n", "\n", "'internal_id'", ":", "0", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.data.facetmp_dataset.FaceTmpDataset.__getitem__": [[352, 389], ["facetmp_dataset.FaceTmpDataset.getitem", "facetmp_dataset.FaceTmpDataset.getitem", "facetmp_dataset.FaceTmpDataset.getitem", "max", "min", "type", "type", "numpy.array", "numpy.array().astype", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.data.facetmp_dataset.FaceTmpDataset.getitem", "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.data.facetmp_dataset.FaceTmpDataset.getitem", "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.data.facetmp_dataset.FaceTmpDataset.getitem"], ["", "def", "__getitem__", "(", "self", ",", "global_index", ")", ":", "\n", "# select frame from sequence", "\n", "        ", "index", "=", "global_index", "\n", "\n", "current", "=", "self", ".", "getitem", "(", "index", ")", "\n", "crop", "=", "current", "[", "'crop'", "]", "\n", "prv", "=", "self", ".", "getitem", "(", "max", "(", "index", "-", "1", ",", "0", ")", ",", "crop", ")", "\n", "nxt", "=", "self", ".", "getitem", "(", "min", "(", "index", "+", "1", ",", "self", ".", "n_frames_total", "-", "1", ")", ",", "crop", ")", "\n", "\n", "if", "type", "(", "crop", ")", "==", "type", "(", "None", ")", ":", "\n", "            ", "crop", "=", "np", ".", "array", "(", "[", "0", ",", "0", ",", "current", "[", "'UV'", "]", ".", "shape", "[", "2", "]", ",", "current", "[", "'UV'", "]", ".", "shape", "[", "1", "]", "]", ")", "\n", "\n", "", "weight", "=", "1.0", "/", "self", ".", "n_frames_total", "\n", "\n", "return", "{", "'TARGET'", ":", "current", "[", "'TARGET'", "]", ",", "\n", "'UV'", ":", "current", "[", "'UV'", "]", ",", "\n", "'paths'", ":", "current", "[", "'paths'", "]", ",", "\n", "'intrinsics'", ":", "current", "[", "'intrinsics'", "]", ",", "\n", "'extrinsics'", ":", "current", "[", "'extrinsics'", "]", ",", "\n", "'expressions'", ":", "current", "[", "'expressions'", "]", ",", "\n", "'identity'", ":", "current", "[", "'identity'", "]", ",", "\n", "'audio_deepspeech'", ":", "current", "[", "'audio_deepspeech'", "]", ",", "\n", "\n", "'prv_TARGET'", ":", "prv", "[", "'TARGET'", "]", ",", "\n", "'prv_UV'", ":", "prv", "[", "'UV'", "]", ",", "\n", "'prv_audio_deepspeech'", ":", "prv", "[", "'audio_deepspeech'", "]", ",", "\n", "'prv_expressions'", ":", "prv", "[", "'expressions'", "]", ",", "\n", "\n", "'nxt_TARGET'", ":", "nxt", "[", "'TARGET'", "]", ",", "\n", "'nxt_UV'", ":", "nxt", "[", "'UV'", "]", ",", "\n", "'nxt_audio_deepspeech'", ":", "nxt", "[", "'audio_deepspeech'", "]", ",", "\n", "'nxt_expressions'", ":", "nxt", "[", "'expressions'", "]", ",", "\n", "\n", "'crop'", ":", "crop", ",", "\n", "\n", "'internal_id'", ":", "current", "[", "'internal_id'", "]", ",", "\n", "'weight'", ":", "np", ".", "array", "(", "[", "weight", "]", ")", ".", "astype", "(", "np", ".", "float32", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.data.facetmp_dataset.FaceTmpDataset.__len__": [[390, 392], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "n_frames_total", "\n", "\n"]], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.data.facetmp_dataset.FaceTmpDataset.name": [[393, 395], ["None"], "methods", ["None"], ["", "def", "name", "(", "self", ")", ":", "\n", "        ", "return", "'FaceTmpDataset'", "\n", "", "", ""]], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.data.facetmp_dataset.make_dataset": [[22, 40], ["os.path.isdir", "sorted", "sorted", "os.walk", "os.path.join", "images.append", "any", "str", "int", "sorted.append", "fname.endswith"], "function", ["None"], ["def", "make_dataset", "(", "dir", ")", ":", "\n", "    ", "images", "=", "[", "]", "\n", "ids", "=", "[", "]", "\n", "assert", "os", ".", "path", ".", "isdir", "(", "dir", ")", ",", "'%s is not a valid directory'", "%", "dir", "\n", "for", "root", ",", "_", ",", "fnames", "in", "sorted", "(", "os", ".", "walk", "(", "dir", ")", ")", ":", "\n", "        ", "for", "fname", "in", "fnames", ":", "\n", "            ", "if", "any", "(", "fname", ".", "endswith", "(", "extension", ")", "for", "extension", "in", "[", "'.npy'", ",", "'.NPY'", "]", ")", ":", "\n", "#.deepspeech.npy", "\n", "                ", "id_str", "=", "fname", "[", ":", "-", "15", "]", "#4]", "\n", "i", "=", "int", "(", "id_str", ")", "\n", "ids", ".", "append", "(", "i", ")", "\n", "", "", "", "ids", "=", "sorted", "(", "ids", ")", "\n", "\n", "for", "id", "in", "ids", ":", "\n", "        ", "fname", "=", "str", "(", "id", ")", "+", "'.deepspeech.npy'", "\n", "path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "fname", ")", "\n", "images", ".", "append", "(", "path", ")", "\n", "", "return", "images", "\n", "\n"]], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.data.facetmp_dataset.make_ids": [[41, 51], ["fname.rfind", "int", "ids.append"], "function", ["None"], ["", "def", "make_ids", "(", "paths", ",", "root_dir", ")", ":", "\n", "    ", "ids", "=", "[", "]", "\n", "\n", "for", "fname", "in", "paths", ":", "\n", "        ", "l", "=", "fname", ".", "rfind", "(", "'/'", ")", "\n", "id_str", "=", "fname", "[", "l", "+", "1", ":", "-", "15", "]", "#4]", "\n", "i", "=", "int", "(", "id_str", ")", "\n", "#print(fname, ': ', i)", "\n", "ids", ".", "append", "(", "i", ")", "\n", "", "return", "ids", "\n", "\n"]], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.data.facetmp_dataset.make_dataset_png_ids": [[52, 64], ["os.path.isdir", "sorted", "sorted", "os.walk", "any", "int", "sorted.append", "fname.endswith"], "function", ["None"], ["", "def", "make_dataset_png_ids", "(", "dir", ")", ":", "\n", "    ", "images", "=", "[", "]", "\n", "ids", "=", "[", "]", "\n", "assert", "os", ".", "path", ".", "isdir", "(", "dir", ")", ",", "'%s is not a valid directory'", "%", "dir", "\n", "for", "root", ",", "_", ",", "fnames", "in", "sorted", "(", "os", ".", "walk", "(", "dir", ")", ")", ":", "\n", "        ", "for", "fname", "in", "fnames", ":", "\n", "            ", "if", "any", "(", "fname", ".", "endswith", "(", "extension", ")", "for", "extension", "in", "[", "'.png'", ",", "'.PNG'", "]", ")", ":", "\n", "                ", "id_str", "=", "fname", "[", ":", "-", "4", "]", "\n", "i", "=", "int", "(", "id_str", ")", "\n", "ids", ".", "append", "(", "i", ")", "\n", "", "", "", "ids", "=", "sorted", "(", "ids", ")", "\n", "return", "ids", "\n", "\n"]], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.data.facetmp_dataset.make_dataset_exr_ids": [[65, 77], ["os.path.isdir", "sorted", "sorted", "os.walk", "any", "int", "sorted.append", "fname.endswith"], "function", ["None"], ["", "def", "make_dataset_exr_ids", "(", "dir", ")", ":", "\n", "    ", "images", "=", "[", "]", "\n", "ids", "=", "[", "]", "\n", "assert", "os", ".", "path", ".", "isdir", "(", "dir", ")", ",", "'%s is not a valid directory'", "%", "dir", "\n", "for", "root", ",", "_", ",", "fnames", "in", "sorted", "(", "os", ".", "walk", "(", "dir", ")", ")", ":", "\n", "        ", "for", "fname", "in", "fnames", ":", "\n", "            ", "if", "any", "(", "fname", ".", "endswith", "(", "extension", ")", "for", "extension", "in", "[", "'.exr'", ",", "'.EXR'", "]", ")", ":", "\n", "                ", "id_str", "=", "fname", "[", ":", "-", "4", "]", "\n", "i", "=", "int", "(", "id_str", ")", "\n", "ids", ".", "append", "(", "i", ")", "\n", "", "", "", "ids", "=", "sorted", "(", "ids", ")", "\n", "return", "ids", "\n", "\n"]], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.data.facetmp_dataset.load_intrinsics": [[79, 85], ["open", "open.close", "list", "float", "line.split"], "function", ["None"], ["", "def", "load_intrinsics", "(", "input_dir", ")", ":", "\n", "    ", "file", "=", "open", "(", "input_dir", "+", "\"/intrinsics.txt\"", ",", "\"r\"", ")", "\n", "intrinsics", "=", "[", "[", "(", "float", "(", "x", ")", "for", "x", "in", "line", ".", "split", "(", ")", ")", "]", "for", "line", "in", "file", "]", "\n", "file", ".", "close", "(", ")", "\n", "intrinsics", "=", "list", "(", "intrinsics", "[", "0", "]", "[", "0", "]", ")", "\n", "return", "intrinsics", "\n", "\n"]], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.data.facetmp_dataset.load_rigids": [[86, 92], ["open", "open.close", "float", "range", "line.split", "len"], "function", ["None"], ["", "def", "load_rigids", "(", "input_dir", ")", ":", "\n", "    ", "file", "=", "open", "(", "input_dir", "+", "\"/rigid.txt\"", ",", "\"r\"", ")", "\n", "rigid_floats", "=", "[", "[", "float", "(", "x", ")", "for", "x", "in", "line", ".", "split", "(", ")", "]", "for", "line", "in", "file", "]", "# note that it stores 5 lines per matrix (blank line)", "\n", "file", ".", "close", "(", ")", "\n", "all_rigids", "=", "[", "[", "rigid_floats", "[", "4", "*", "idx", "+", "0", "]", ",", "rigid_floats", "[", "4", "*", "idx", "+", "1", "]", ",", "rigid_floats", "[", "4", "*", "idx", "+", "2", "]", ",", "rigid_floats", "[", "4", "*", "idx", "+", "3", "]", "]", "for", "idx", "in", "range", "(", "0", ",", "len", "(", "rigid_floats", ")", "//", "4", ")", "]", "\n", "return", "all_rigids", "\n", "\n"]], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.data.facetmp_dataset.load_expressions": [[93, 98], ["open", "open.close", "float", "line.split"], "function", ["None"], ["", "def", "load_expressions", "(", "input_dir", ")", ":", "\n", "    ", "file", "=", "open", "(", "input_dir", "+", "\"/expression.txt\"", ",", "\"r\"", ")", "\n", "expressions", "=", "[", "[", "float", "(", "x", ")", "for", "x", "in", "line", ".", "split", "(", ")", "]", "for", "line", "in", "file", "]", "\n", "file", ".", "close", "(", ")", "\n", "return", "expressions", "\n", "\n"]], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.data.facetmp_dataset.load_identity": [[99, 104], ["open", "open.close", "float", "line.split"], "function", ["None"], ["", "def", "load_identity", "(", "input_dir", ")", ":", "\n", "    ", "file", "=", "open", "(", "input_dir", "+", "\"/identities.txt\"", ",", "\"r\"", ")", "\n", "identity", "=", "[", "[", "float", "(", "x", ")", "for", "x", "in", "line", ".", "split", "(", ")", "]", "for", "line", "in", "file", "]", "\n", "file", ".", "close", "(", ")", "\n", "return", "identity", "\n", "\n"]], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.data.__init__.CustomDatasetDataLoader.name": [[53, 55], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.data.__init__.CustomDatasetDataLoader.initialize": [[56, 78], ["data.base_data_loader.BaseDataLoader.initialize", "__init__.create_dataset", "torch.utils.data.DataLoader", "__init__.CustomDatasetDataLoader.dataset.getSampleWeights", "torch.DoubleTensor", "torch.utils.data.sampler.WeightedRandomSampler", "torch.utils.data.DataLoader", "len", "int", "int"], "methods", ["home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.options.base_options.BaseOptions.initialize", "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.data.__init__.create_dataset", "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.data.audio_dataset.AudioDataset.getSampleWeights"], []], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.data.__init__.CustomDatasetDataLoader.load_data": [[80, 82], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.data.__init__.CustomDatasetDataLoader.__len__": [[83, 85], ["min", "len"], "methods", ["None"], []], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.data.__init__.CustomDatasetDataLoader.__iter__": [[86, 91], ["enumerate"], "methods", ["None"], []], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.data.__init__.find_dataset_using_name": [[7, 29], ["importlib.import_module", "importlib.import_module.__dict__.items", "dataset_name.replace", "print", "exit", "issubclass", "name.lower", "target_dataset_name.lower"], "function", ["None"], []], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.data.__init__.get_option_setter": [[31, 34], ["__init__.find_dataset_using_name"], "function", ["home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.data.__init__.find_dataset_using_name"], []], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.data.__init__.create_dataset": [[36, 42], ["__init__.find_dataset_using_name", "find_dataset_using_name.", "dataset.initialize", "print", "dataset.name"], "function", ["home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.data.__init__.find_dataset_using_name", "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.options.base_options.BaseOptions.initialize", "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.data.audio_dataset.AudioDataset.name"], []], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.data.__init__.CreateDataLoader": [[44, 48], ["__init__.CustomDatasetDataLoader", "__init__.CustomDatasetDataLoader.initialize"], "function", ["home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.options.base_options.BaseOptions.initialize"], []], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.data.base_data_loader.BaseDataLoader.__init__": [[2, 4], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.data.base_data_loader.BaseDataLoader.initialize": [[5, 8], ["None"], "methods", ["None"], ["", "def", "initialize", "(", "self", ",", "opt", ")", ":", "\n", "        ", "self", ".", "opt", "=", "opt", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.data.base_data_loader.BaseDataLoader.load_data": [[9, 11], ["None"], "methods", ["None"], ["", "def", "load_data", "(", ")", ":", "\n", "        ", "return", "None", "\n", "", "", ""]], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.data.audio_dataset.AudioDataset.modify_commandline_options": [[42, 45], ["None"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "modify_commandline_options", "(", "parser", ",", "is_train", ")", ":", "\n", "        ", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.data.audio_dataset.AudioDataset.initialize": [[46, 62], ["os.path.join", "audio_dataset.make_dataset", "audio_dataset.make_ids", "print", "exit", "opt.dataroot.split"], "methods", ["home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.data.audio_dataset.make_dataset", "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.data.audio_dataset.make_ids"], ["", "def", "initialize", "(", "self", ",", "opt", ")", ":", "\n", "        ", "self", ".", "opt", "=", "opt", "\n", "self", ".", "root", "=", "opt", ".", "dataroot", "\n", "self", ".", "data_dir", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "dataroot", ",", "'audio_feature'", ")", "\n", "self", ".", "frame_paths", "=", "make_dataset", "(", "self", ".", "data_dir", ")", "\n", "self", ".", "frame_ids", "=", "make_ids", "(", "self", ".", "frame_paths", ",", "self", ".", "root", ")", "\n", "\n", "opt", ".", "nObjects", "=", "1", "\n", "opt", ".", "nTrainObjects", "=", "116", "# TODO", "\n", "opt", ".", "nTestObjects", "=", "1", "\n", "opt", ".", "test_sequence_names", "=", "[", "[", "opt", ".", "dataroot", ".", "split", "(", "\"/\"", ")", "[", "-", "1", "]", ",", "'test'", "]", "]", "\n", "assert", "(", "opt", ".", "resize_or_crop", "==", "'resize_and_crop'", ")", "\n", "\n", "if", "opt", ".", "isTrain", ":", "\n", "            ", "print", "(", "'ERROR: audio_dataset only allowed for test'", ")", "\n", "exit", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.data.audio_dataset.AudioDataset.getSampleWeights": [[63, 66], ["numpy.ones", "len"], "methods", ["None"], ["", "", "def", "getSampleWeights", "(", "self", ")", ":", "\n", "        ", "weights", "=", "np", ".", "ones", "(", "(", "len", "(", "self", ".", "frame_paths", ")", ")", ")", "\n", "return", "weights", "\n", "\n"]], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.data.audio_dataset.AudioDataset.getAudioFilename": [[67, 69], ["os.path.join"], "methods", ["None"], ["", "def", "getAudioFilename", "(", "self", ")", ":", "\n", "        ", "return", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "'audio.wav'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.data.audio_dataset.AudioDataset.getAudioFeatureFilename": [[70, 72], ["len"], "methods", ["None"], ["", "def", "getAudioFeatureFilename", "(", "self", ",", "idx", ")", ":", "\n", "        ", "return", "self", ".", "frame_paths", "[", "idx", "%", "len", "(", "self", ".", "frame_paths", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.data.audio_dataset.AudioDataset.__getitem__": [[73, 140], ["numpy.load", "numpy.resize", "torch.zeros", "torch.zeros", "torchvision.ToTensor", "numpy.resize.astype", "range", "range", "range", "len", "numpy.zeros", "numpy.zeros", "numpy.array().astype", "numpy.load", "numpy.resize", "torch.cat", "numpy.load", "numpy.resize", "torch.cat", "numpy.load", "numpy.resize", "torch.cat", "torchvision.ToTensor", "numpy.resize.astype", "len", "torchvision.ToTensor", "numpy.resize.astype", "torchvision.ToTensor", "numpy.resize.astype", "numpy.array"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "\n", "#print('GET ITEM: ', index)", "\n", "        ", "frame_path", "=", "self", ".", "frame_paths", "[", "index", "]", "\n", "frame_id", "=", "self", ".", "frame_ids", "[", "index", "]", "\n", "\n", "# load deepspeech feature", "\n", "feature_array", "=", "np", ".", "load", "(", "frame_path", ")", "\n", "dsf_np", "=", "np", ".", "resize", "(", "feature_array", ",", "(", "16", ",", "29", ",", "1", ")", ")", "\n", "dsf", "=", "transforms", ".", "ToTensor", "(", ")", "(", "dsf_np", ".", "astype", "(", "np", ".", "float32", ")", ")", "\n", "\n", "\n", "# load sequence data if necessary", "\n", "if", "self", ".", "opt", ".", "look_ahead", ":", "# use prev and following frame infos", "\n", "            ", "r", "=", "self", ".", "opt", ".", "seq_len", "//", "2", "\n", "for", "i", "in", "range", "(", "1", ",", "r", ")", ":", "# prev frames", "\n", "                ", "index_seq", "=", "index", "-", "i", "\n", "if", "index_seq", "<", "0", ":", "index_seq", "=", "0", "\n", "\n", "dsf_fname", "=", "self", ".", "frame_paths", "[", "index_seq", "]", "\n", "feature_array", "=", "np", ".", "load", "(", "dsf_fname", ")", "\n", "dsf_np", "=", "np", ".", "resize", "(", "feature_array", ",", "(", "16", ",", "29", ",", "1", ")", ")", "\n", "dsf_seq", "=", "transforms", ".", "ToTensor", "(", ")", "(", "dsf_np", ".", "astype", "(", "np", ".", "float32", ")", ")", "# 1 x 16 x 29", "\n", "dsf", "=", "torch", ".", "cat", "(", "[", "dsf_seq", ",", "dsf", "]", ",", "0", ")", "# seq_len x 16 x 29", "\n", "# note the ordering [old ... current]", "\n", "\n", "", "for", "i", "in", "range", "(", "1", ",", "self", ".", "opt", ".", "seq_len", "-", "r", "+", "1", ")", ":", "# following frames", "\n", "                ", "index_seq", "=", "index", "+", "i", "\n", "max_idx", "=", "len", "(", "self", ".", "frame_paths", ")", "-", "1", "\n", "if", "index_seq", ">", "max_idx", ":", "index_seq", "=", "max_idx", "\n", "\n", "dsf_fname", "=", "self", ".", "frame_paths", "[", "index_seq", "]", "\n", "feature_array", "=", "np", ".", "load", "(", "dsf_fname", ")", "\n", "dsf_np", "=", "np", ".", "resize", "(", "feature_array", ",", "(", "16", ",", "29", ",", "1", ")", ")", "\n", "dsf_seq", "=", "transforms", ".", "ToTensor", "(", ")", "(", "dsf_np", ".", "astype", "(", "np", ".", "float32", ")", ")", "# 1 x 16 x 29", "\n", "dsf", "=", "torch", ".", "cat", "(", "[", "dsf", ",", "dsf_seq", "]", ",", "0", ")", "# seq_len x 16 x 29", "\n", "# note the ordering [old ... current ... future]", "\n", "", "", "else", ":", "\n", "            ", "for", "i", "in", "range", "(", "1", ",", "self", ".", "opt", ".", "seq_len", ")", ":", "\n", "                ", "index_seq", "=", "index", "-", "i", "\n", "if", "index_seq", "<", "0", ":", "index_seq", "=", "0", "\n", "dsf_fname", "=", "self", ".", "frame_paths", "[", "index_seq", "]", "\n", "feature_array", "=", "np", ".", "load", "(", "dsf_fname", ")", "\n", "dsf_np", "=", "np", ".", "resize", "(", "feature_array", ",", "(", "16", ",", "29", ",", "1", ")", ")", "\n", "dsf_seq", "=", "transforms", ".", "ToTensor", "(", ")", "(", "dsf_np", ".", "astype", "(", "np", ".", "float32", ")", ")", "# 1 x 16 x 29", "\n", "dsf", "=", "torch", ".", "cat", "(", "[", "dsf_seq", ",", "dsf", "]", ",", "0", ")", "# seq_len x 16 x 29", "\n", "# note the ordering [old ... current]", "\n", "\n", "\n", "#################################", "\n", "", "", "zeroIdentity", "=", "torch", ".", "zeros", "(", "100", ")", "\n", "zeroExpressions", "=", "torch", ".", "zeros", "(", "76", ")", "\n", "\n", "target_id", "=", "-", "1", "\n", "internal_sequence_id", "=", "0", "\n", "\n", "weight", "=", "1.0", "/", "len", "(", "self", ".", "frame_paths", ")", "\n", "\n", "return", "{", "'paths'", ":", "frame_path", ",", "\n", "'expressions'", ":", "zeroExpressions", ",", "\n", "'identity'", ":", "zeroIdentity", ",", "\n", "'intrinsics'", ":", "np", ".", "zeros", "(", "(", "4", ")", ")", ",", "\n", "'extrinsics'", ":", "np", ".", "zeros", "(", "(", "4", ",", "4", ")", ")", ",", "\n", "'audio_deepspeech'", ":", "dsf", ",", "# deepspeech feature", "\n", "'target_id'", ":", "target_id", ",", "\n", "'internal_id'", ":", "internal_sequence_id", ",", "\n", "'weight'", ":", "np", ".", "array", "(", "[", "weight", "]", ")", ".", "astype", "(", "np", ".", "float32", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.data.audio_dataset.AudioDataset.__len__": [[141, 143], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "frame_paths", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.data.audio_dataset.AudioDataset.name": [[144, 146], ["None"], "methods", ["None"], ["", "def", "name", "(", "self", ")", ":", "\n", "        ", "return", "'AudioDataset'", "\n", "", "", ""]], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.data.audio_dataset.make_dataset": [[11, 28], ["os.path.isdir", "sorted", "sorted", "os.walk", "os.path.join", "images.append", "any", "str", "int", "sorted.append", "fname.endswith"], "function", ["None"], ["def", "make_dataset", "(", "dir", ")", ":", "\n", "    ", "images", "=", "[", "]", "\n", "ids", "=", "[", "]", "\n", "assert", "os", ".", "path", ".", "isdir", "(", "dir", ")", ",", "'%s is not a valid directory'", "%", "dir", "\n", "for", "root", ",", "_", ",", "fnames", "in", "sorted", "(", "os", ".", "walk", "(", "dir", ")", ")", ":", "\n", "        ", "for", "fname", "in", "fnames", ":", "\n", "            ", "if", "any", "(", "fname", ".", "endswith", "(", "extension", ")", "for", "extension", "in", "[", "'.deepspeech.npy'", "]", ")", ":", "\n", "                ", "id_str", "=", "fname", "[", ":", "-", "15", "]", "\n", "i", "=", "int", "(", "id_str", ")", "\n", "ids", ".", "append", "(", "i", ")", "\n", "", "", "", "ids", "=", "sorted", "(", "ids", ")", "\n", "\n", "for", "id", "in", "ids", ":", "\n", "        ", "fname", "=", "str", "(", "id", ")", "+", "'.deepspeech.npy'", "\n", "path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "fname", ")", "\n", "images", ".", "append", "(", "path", ")", "\n", "", "return", "images", "\n", "\n"]], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.data.audio_dataset.make_ids": [[29, 40], ["fname.rfind", "int", "ids.append"], "function", ["None"], ["", "def", "make_ids", "(", "paths", ",", "root_dir", ")", ":", "\n", "    ", "ids", "=", "[", "]", "\n", "\n", "for", "fname", "in", "paths", ":", "\n", "        ", "l", "=", "fname", ".", "rfind", "(", "'/'", ")", "\n", "#id_str = fname[l+1:-4]", "\n", "id_str", "=", "fname", "[", "l", "+", "1", ":", "-", "15", "]", "\n", "i", "=", "int", "(", "id_str", ")", "\n", "#print(fname, ': ', i)", "\n", "ids", ".", "append", "(", "i", ")", "\n", "", "return", "ids", "\n", "\n"]], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.options.transfer_options.TransferOptions.initialize": [[5, 31], ["base_options.BaseOptions.initialize", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.set_defaults", "base_options.BaseOptions.initialize.set_defaults", "float", "base_options.BaseOptions.initialize.get_default"], "methods", ["home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.options.base_options.BaseOptions.initialize"], ["    ", "def", "initialize", "(", "self", ",", "parser", ")", ":", "\n", "        ", "parser", "=", "BaseOptions", ".", "initialize", "(", "self", ",", "parser", ")", "\n", "parser", ".", "add_argument", "(", "'--ntest'", ",", "type", "=", "int", ",", "default", "=", "float", "(", "\"inf\"", ")", ",", "help", "=", "'# of test examples.'", ")", "\n", "parser", ".", "add_argument", "(", "'--results_dir'", ",", "type", "=", "str", ",", "default", "=", "'./results/'", ",", "help", "=", "'saves results here.'", ")", "\n", "parser", ".", "add_argument", "(", "'--aspect_ratio'", ",", "type", "=", "float", ",", "default", "=", "1.0", ",", "help", "=", "'aspect ratio of result images'", ")", "\n", "parser", ".", "add_argument", "(", "'--phase'", ",", "type", "=", "str", ",", "default", "=", "'test'", ",", "help", "=", "'train, val, test, etc'", ")", "\n", "#  Dropout and Batchnorm has different behavioir during training and test.", "\n", "parser", ".", "add_argument", "(", "'--eval'", ",", "action", "=", "'store_true'", ",", "help", "=", "'use eval mode during test time.'", ")", "\n", "parser", ".", "add_argument", "(", "'--num_test'", ",", "type", "=", "int", ",", "default", "=", "50", ",", "help", "=", "'how many test images to run'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--write_no_images'", ",", "action", "=", "'store_true'", ",", "help", "=", "'compute validation'", ")", "\n", "\n", "\n", "parser", ".", "add_argument", "(", "'--source_dir'", ",", "type", "=", "str", ",", "default", "=", "'./datasets/'", ",", "help", "=", "'loads source files (expressions, audio, uvs).'", ")", "\n", "\n", "\n", "\n", "parser", ".", "add_argument", "(", "'--source_actor'", ",", "type", "=", "str", ",", "default", "=", "''", ",", "help", "=", "'source actor directory'", ")", "\n", "parser", ".", "add_argument", "(", "'--target_actor'", ",", "type", "=", "str", ",", "default", "=", "''", ",", "help", "=", "'target actor directory'", ")", "\n", "\n", "\n", "parser", ".", "set_defaults", "(", "model", "=", "'test'", ")", "\n", "# To avoid cropping, the loadSize should be the same as fineSize", "\n", "parser", ".", "set_defaults", "(", "loadSize", "=", "parser", ".", "get_default", "(", "'fineSize'", ")", ")", "\n", "self", ".", "isTrain", "=", "False", "\n", "return", "parser", "\n", "", "", ""]], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.options.test_options.TestOptions.initialize": [[5, 28], ["base_options.BaseOptions.initialize", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.set_defaults", "base_options.BaseOptions.initialize.set_defaults", "float", "base_options.BaseOptions.initialize.get_default"], "methods", ["home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.options.base_options.BaseOptions.initialize"], ["    ", "def", "initialize", "(", "self", ",", "parser", ")", ":", "\n", "        ", "parser", "=", "BaseOptions", ".", "initialize", "(", "self", ",", "parser", ")", "\n", "parser", ".", "add_argument", "(", "'--ntest'", ",", "type", "=", "int", ",", "default", "=", "float", "(", "\"inf\"", ")", ",", "help", "=", "'# of test examples.'", ")", "\n", "parser", ".", "add_argument", "(", "'--results_dir'", ",", "type", "=", "str", ",", "default", "=", "'./results/'", ",", "help", "=", "'saves results here.'", ")", "\n", "parser", ".", "add_argument", "(", "'--aspect_ratio'", ",", "type", "=", "float", ",", "default", "=", "1.0", ",", "help", "=", "'aspect ratio of result images'", ")", "\n", "parser", ".", "add_argument", "(", "'--phase'", ",", "type", "=", "str", ",", "default", "=", "'test'", ",", "help", "=", "'train, val, test, etc'", ")", "\n", "#  Dropout and Batchnorm has different behavioir during training and test.", "\n", "parser", ".", "add_argument", "(", "'--eval'", ",", "action", "=", "'store_true'", ",", "help", "=", "'use eval mode during test time.'", ")", "\n", "parser", ".", "add_argument", "(", "'--num_test'", ",", "type", "=", "int", ",", "default", "=", "50", ",", "help", "=", "'how many test images to run'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--write_no_images'", ",", "action", "=", "'store_true'", ",", "help", "=", "'compute validation'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--write_video'", ",", "action", "=", "'store_true'", ",", "help", "=", "'write video'", ")", "\n", "parser", ".", "add_argument", "(", "'--video_fps'", ",", "type", "=", "float", ",", "default", "=", "25.0", ",", "help", "=", "'video fps'", ")", "\n", "\n", "\n", "parser", ".", "add_argument", "(", "'--source_dir'", ",", "type", "=", "str", ",", "default", "=", "'./datasets/'", ",", "help", "=", "'loads source files (expressions, audio, uvs).'", ")", "\n", "\n", "parser", ".", "set_defaults", "(", "model", "=", "'test'", ")", "\n", "# To avoid cropping, the loadSize should be the same as fineSize", "\n", "parser", ".", "set_defaults", "(", "loadSize", "=", "parser", ".", "get_default", "(", "'fineSize'", ")", ")", "\n", "self", ".", "isTrain", "=", "False", "\n", "return", "parser", "\n", "", "", ""]], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.options.train_options.TrainOptions.initialize": [[5, 38], ["base_options.BaseOptions.initialize", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument"], "methods", ["home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.options.base_options.BaseOptions.initialize"], ["    ", "def", "initialize", "(", "self", ",", "parser", ")", ":", "\n", "        ", "parser", "=", "BaseOptions", ".", "initialize", "(", "self", ",", "parser", ")", "\n", "parser", ".", "add_argument", "(", "'--display_freq'", ",", "type", "=", "int", ",", "default", "=", "400", ",", "help", "=", "'frequency of showing training results on screen'", ")", "\n", "parser", ".", "add_argument", "(", "'--display_ncols'", ",", "type", "=", "int", ",", "default", "=", "4", ",", "help", "=", "'if positive, display all images in a single visdom web panel with certain number of images per row.'", ")", "\n", "parser", ".", "add_argument", "(", "'--display_id'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "'window id of the web display'", ")", "\n", "parser", ".", "add_argument", "(", "'--display_server'", ",", "type", "=", "str", ",", "default", "=", "\"http://localhost\"", ",", "help", "=", "'visdom server of the web display'", ")", "\n", "parser", ".", "add_argument", "(", "'--display_env'", ",", "type", "=", "str", ",", "default", "=", "'main'", ",", "help", "=", "'visdom display environment name (default is \"main\")'", ")", "\n", "parser", ".", "add_argument", "(", "'--display_port'", ",", "type", "=", "int", ",", "default", "=", "8097", ",", "help", "=", "'visdom port of the web display'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--compute_val'", ",", "action", "=", "'store_true'", ",", "help", "=", "'compute validation'", ")", "\n", "parser", ".", "add_argument", "(", "'--input_noise_augmentation'", ",", "action", "=", "'store_true'", ",", "help", "=", "'add input noise'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--update_html_freq'", ",", "type", "=", "int", ",", "default", "=", "1000", ",", "help", "=", "'frequency of saving training results to html'", ")", "\n", "parser", ".", "add_argument", "(", "'--print_freq'", ",", "type", "=", "int", ",", "default", "=", "500", ",", "help", "=", "'frequency of showing training results on console'", ")", "\n", "parser", ".", "add_argument", "(", "'--save_latest_freq'", ",", "type", "=", "int", ",", "default", "=", "5000", ",", "help", "=", "'frequency of saving the latest results'", ")", "\n", "parser", ".", "add_argument", "(", "'--save_epoch_freq'", ",", "type", "=", "int", ",", "default", "=", "5", ",", "help", "=", "'frequency of saving checkpoints at the end of epochs'", ")", "\n", "parser", ".", "add_argument", "(", "'--save_by_iter'", ",", "action", "=", "'store_true'", ",", "help", "=", "'whether saves model by iteration'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--continue_train'", ",", "action", "=", "'store_true'", ",", "help", "=", "'continue training: load the latest model'", ")", "\n", "parser", ".", "add_argument", "(", "'--epoch_count'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "'the starting epoch count, we save the model by <epoch_count>, <epoch_count>+<save_latest_freq>, ...'", ")", "\n", "parser", ".", "add_argument", "(", "'--phase'", ",", "type", "=", "str", ",", "default", "=", "'train'", ",", "help", "=", "'train, val, test, etc'", ")", "\n", "parser", ".", "add_argument", "(", "'--niter'", ",", "type", "=", "int", ",", "default", "=", "100", ",", "help", "=", "'# of iter at starting learning rate'", ")", "\n", "parser", ".", "add_argument", "(", "'--niter_decay'", ",", "type", "=", "int", ",", "default", "=", "100", ",", "help", "=", "'# of iter to linearly decay learning rate to zero'", ")", "\n", "parser", ".", "add_argument", "(", "'--beta1'", ",", "type", "=", "float", ",", "default", "=", "0.5", ",", "help", "=", "'momentum term of adam'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr'", ",", "type", "=", "float", ",", "default", "=", "0.0002", ",", "help", "=", "'initial learning rate for adam'", ")", "\n", "parser", ".", "add_argument", "(", "'--no_lsgan'", ",", "action", "=", "'store_true'", ",", "help", "=", "'do *not* use least square GAN, if false, use vanilla GAN'", ")", "\n", "parser", ".", "add_argument", "(", "'--pool_size'", ",", "type", "=", "int", ",", "default", "=", "50", ",", "help", "=", "'the size of image buffer that stores previously generated images'", ")", "\n", "parser", ".", "add_argument", "(", "'--no_html'", ",", "action", "=", "'store_true'", ",", "help", "=", "'do not save intermediate training results to [opt.checkpoints_dir]/[opt.name]/web/'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr_policy'", ",", "type", "=", "str", ",", "default", "=", "'lambda'", ",", "help", "=", "'learning rate policy: lambda|step|plateau|cosine'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr_decay_iters'", ",", "type", "=", "int", ",", "default", "=", "50", ",", "help", "=", "'multiply by a gamma every lr_decay_iters iterations'", ")", "\n", "\n", "self", ".", "isTrain", "=", "True", "\n", "return", "parser", "\n", "", "", ""]], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.options.base_options.BaseOptions.__init__": [[10, 12], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "initialized", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.options.base_options.BaseOptions.initialize": [[13, 69], ["parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "float"], "methods", ["None"], ["", "def", "initialize", "(", "self", ",", "parser", ")", ":", "\n", "        ", "parser", ".", "add_argument", "(", "'--dataroot'", ",", "required", "=", "True", ",", "help", "=", "'path to images (should have subfolders trainA, trainB, valA, valB, etc)'", ")", "\n", "parser", ".", "add_argument", "(", "'--batch_size'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "'input batch size'", ")", "\n", "parser", ".", "add_argument", "(", "'--seq_len'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "'sequence length (if applicable)'", ")", "\n", "parser", ".", "add_argument", "(", "'--fineSize'", ",", "type", "=", "int", ",", "default", "=", "512", ",", "help", "=", "'then crop to this size'", ")", "\n", "parser", ".", "add_argument", "(", "'--display_winsize'", ",", "type", "=", "int", ",", "default", "=", "256", ",", "help", "=", "'display window size for both visdom and HTML'", ")", "\n", "parser", ".", "add_argument", "(", "'--input_nc'", ",", "type", "=", "int", ",", "default", "=", "3", ",", "help", "=", "'# of input image channels'", ")", "\n", "parser", ".", "add_argument", "(", "'--output_nc'", ",", "type", "=", "int", ",", "default", "=", "3", ",", "help", "=", "'# of output image channels'", ")", "\n", "parser", ".", "add_argument", "(", "'--ngf'", ",", "type", "=", "int", ",", "default", "=", "64", ",", "help", "=", "'# of gen filters in first conv layer'", ")", "\n", "parser", ".", "add_argument", "(", "'--ndf'", ",", "type", "=", "int", ",", "default", "=", "64", ",", "help", "=", "'# of discrim filters in first conv layer'", ")", "\n", "parser", ".", "add_argument", "(", "'--netD'", ",", "type", "=", "str", ",", "default", "=", "'basic'", ",", "help", "=", "'selects model to use for netD'", ")", "\n", "parser", ".", "add_argument", "(", "'--netG'", ",", "type", "=", "str", ",", "default", "=", "'resnet_9blocks'", ",", "help", "=", "'selects model to use for netG'", ")", "\n", "parser", ".", "add_argument", "(", "'--n_layers_D'", ",", "type", "=", "int", ",", "default", "=", "3", ",", "help", "=", "'only used if netD==n_layers'", ")", "\n", "parser", ".", "add_argument", "(", "'--gpu_ids'", ",", "type", "=", "str", ",", "default", "=", "'0'", ",", "help", "=", "'gpu ids: e.g. 0  0,1,2, 0,2. use -1 for CPU'", ")", "\n", "parser", ".", "add_argument", "(", "'--name'", ",", "type", "=", "str", ",", "default", "=", "'experiment_name'", ",", "help", "=", "'name of the experiment. It decides where to store samples and models'", ")", "\n", "parser", ".", "add_argument", "(", "'--renderer'", ",", "type", "=", "str", ",", "default", "=", "'no_renderer'", ",", "help", "=", "'name of the renderer to load the models from'", ")", "\n", "parser", ".", "add_argument", "(", "'--fix_renderer'", ",", "action", "=", "'store_true'", ",", "help", "=", "'renderer is fixed'", ")", "\n", "parser", ".", "add_argument", "(", "'--dataset_mode'", ",", "type", "=", "str", ",", "default", "=", "'aligned'", ",", "help", "=", "'chooses how datasets are loaded. [aligned | multi]'", ")", "\n", "parser", ".", "add_argument", "(", "'--model'", ",", "type", "=", "str", ",", "default", "=", "'cycle_gan'", ",", "help", "=", "'chooses which model to use. cycle_gan, pix2pix, test'", ")", "\n", "parser", ".", "add_argument", "(", "'--direction'", ",", "type", "=", "str", ",", "default", "=", "'AtoB'", ",", "help", "=", "'AtoB or BtoA'", ")", "\n", "parser", ".", "add_argument", "(", "'--epoch'", ",", "type", "=", "str", ",", "default", "=", "'latest'", ",", "help", "=", "'which epoch to load? set to latest to use latest cached model'", ")", "\n", "parser", ".", "add_argument", "(", "'--load_iter'", ",", "type", "=", "int", ",", "default", "=", "'0'", ",", "help", "=", "'which iteration to load? if load_iter > 0, the code will load models by iter_[load_iter]; otherwise, the code will load models by [epoch]'", ")", "\n", "parser", ".", "add_argument", "(", "'--num_threads'", ",", "default", "=", "4", ",", "type", "=", "int", ",", "help", "=", "'# threads for loading data'", ")", "\n", "parser", ".", "add_argument", "(", "'--checkpoints_dir'", ",", "type", "=", "str", ",", "default", "=", "'./checkpoints'", ",", "help", "=", "'models are saved here'", ")", "\n", "parser", ".", "add_argument", "(", "'--norm'", ",", "type", "=", "str", ",", "default", "=", "'instance'", ",", "help", "=", "'instance normalization or batch normalization'", ")", "\n", "parser", ".", "add_argument", "(", "'--serial_batches'", ",", "action", "=", "'store_true'", ",", "help", "=", "'if true, takes images in order to make batches, otherwise takes them randomly'", ")", "\n", "parser", ".", "add_argument", "(", "'--no_dropout'", ",", "action", "=", "'store_true'", ",", "help", "=", "'no dropout for the generator'", ")", "\n", "parser", ".", "add_argument", "(", "'--max_dataset_size'", ",", "type", "=", "int", ",", "default", "=", "float", "(", "\"inf\"", ")", ",", "help", "=", "'Maximum number of samples allowed per dataset. If the dataset directory contains more than max_dataset_size, only a subset is loaded.'", ")", "\n", "parser", ".", "add_argument", "(", "'--resize_or_crop'", ",", "type", "=", "str", ",", "default", "=", "'resize_and_crop'", ",", "help", "=", "'scaling and cropping of images at load time [resize_and_crop|crop|scale_width|scale_width_and_crop|none]'", ")", "\n", "parser", ".", "add_argument", "(", "'--no_augmentation'", ",", "action", "=", "'store_true'", ",", "help", "=", "'if specified, no data augmentation'", ")", "\n", "#parser.add_argument('--init_type', type=str, default='normal', help='network initialization [normal|xavier|kaiming|orthogonal]')", "\n", "parser", ".", "add_argument", "(", "'--init_type'", ",", "type", "=", "str", ",", "default", "=", "'xavier'", ",", "help", "=", "'network initialization [normal|xavier|kaiming|orthogonal]'", ")", "\n", "parser", ".", "add_argument", "(", "'--init_gain'", ",", "type", "=", "float", ",", "default", "=", "0.02", ",", "help", "=", "'scaling factor for normal, xavier and orthogonal.'", ")", "\n", "parser", ".", "add_argument", "(", "'--verbose'", ",", "action", "=", "'store_true'", ",", "help", "=", "'if specified, print more debugging information'", ")", "\n", "parser", ".", "add_argument", "(", "'--suffix'", ",", "default", "=", "''", ",", "type", "=", "str", ",", "help", "=", "'customized suffix: opt.name = opt.name + suffix: e.g., {model}_{netG}_size{loadSize}'", ")", "\n", "parser", ".", "add_argument", "(", "'--tex_dim'", ",", "type", "=", "int", ",", "default", "=", "256", ",", "help", "=", "'neural texture dimensions'", ")", "\n", "parser", ".", "add_argument", "(", "'--tex_features_intermediate'", ",", "type", "=", "int", ",", "default", "=", "16", ",", "help", "=", "'# intermediate neural texture features when using dynamic textures'", ")", "\n", "parser", ".", "add_argument", "(", "'--tex_features'", ",", "type", "=", "int", ",", "default", "=", "16", ",", "help", "=", "'# neural texture features'", ")", "\n", "parser", ".", "add_argument", "(", "'--textureModel'", ",", "type", "=", "str", ",", "default", "=", "'DynamicNeuralTextureAudio'", ",", "help", "=", "'texture model'", ")", "\n", "parser", ".", "add_argument", "(", "'--rendererType'", ",", "type", "=", "str", ",", "default", "=", "'UNET_5_level'", ",", "help", "=", "'neural renderer network'", ")", "\n", "parser", ".", "add_argument", "(", "'--lossType'", ",", "type", "=", "str", ",", "default", "=", "'L1'", ",", "help", "=", "'loss type for the final output'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--hierarchicalTex'", ",", "action", "=", "'store_true'", ",", "help", "=", "'if specified, hierachical neural textures are used'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--output_audio_expressions'", ",", "action", "=", "'store_true'", ",", "help", "=", "'if specified, no sh layers are used'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--erosionFactor'", ",", "type", "=", "float", ",", "default", "=", "1.0", ",", "help", "=", "'scaling factor for erosion of the background.'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--audio_window_size'", ",", "type", "=", "float", ",", "default", "=", "16", ",", "help", "=", "'audio window size = #mel feature bins'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--look_ahead'", ",", "action", "=", "'store_true'", ",", "help", "=", "'cache images in numpy format'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--cached_images'", ",", "action", "=", "'store_true'", ",", "help", "=", "'cache images in numpy format'", ")", "\n", "\n", "self", ".", "initialized", "=", "True", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.options.base_options.BaseOptions.gather_options": [[70, 94], ["base_options.BaseOptions.parse_known_args", "models.get_option_setter", "models.get_option_setter.", "base_options.BaseOptions.parse_known_args", "data.get_option_setter", "data.get_option_setter.", "base_options.BaseOptions.parse_args", "argparse.ArgumentParser", "base_options.BaseOptions.initialize"], "methods", ["home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.data.__init__.get_option_setter", "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.data.__init__.get_option_setter", "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.options.base_options.BaseOptions.initialize"], ["", "def", "gather_options", "(", "self", ")", ":", "\n", "# initialize parser with basic options", "\n", "        ", "if", "not", "self", ".", "initialized", ":", "\n", "            ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "\n", "formatter_class", "=", "argparse", ".", "ArgumentDefaultsHelpFormatter", ")", "\n", "parser", "=", "self", ".", "initialize", "(", "parser", ")", "\n", "\n", "# get the basic options", "\n", "", "opt", ",", "_", "=", "parser", ".", "parse_known_args", "(", ")", "\n", "\n", "# modify model-related parser options", "\n", "model_name", "=", "opt", ".", "model", "\n", "model_option_setter", "=", "models", ".", "get_option_setter", "(", "model_name", ")", "\n", "parser", "=", "model_option_setter", "(", "parser", ",", "self", ".", "isTrain", ")", "\n", "opt", ",", "_", "=", "parser", ".", "parse_known_args", "(", ")", "# parse again with the new defaults", "\n", "\n", "# modify dataset-related parser options", "\n", "dataset_name", "=", "opt", ".", "dataset_mode", "\n", "dataset_option_setter", "=", "data", ".", "get_option_setter", "(", "dataset_name", ")", "\n", "parser", "=", "dataset_option_setter", "(", "parser", ",", "self", ".", "isTrain", ")", "\n", "\n", "self", ".", "parser", "=", "parser", "\n", "\n", "return", "parser", ".", "parse_args", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.options.base_options.BaseOptions.print_options": [[95, 114], ["sorted", "print", "os.path.join", "util.util.util.mkdirs", "os.path.join", "vars().items", "base_options.BaseOptions.parser.get_default", "open", "opt_file.write", "opt_file.write", "str", "str", "vars", "str"], "methods", ["home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.util.util.mkdirs"], ["", "def", "print_options", "(", "self", ",", "opt", ")", ":", "\n", "        ", "message", "=", "''", "\n", "message", "+=", "'----------------- Options ---------------\\n'", "\n", "for", "k", ",", "v", "in", "sorted", "(", "vars", "(", "opt", ")", ".", "items", "(", ")", ")", ":", "\n", "            ", "comment", "=", "''", "\n", "default", "=", "self", ".", "parser", ".", "get_default", "(", "k", ")", "\n", "if", "v", "!=", "default", ":", "\n", "                ", "comment", "=", "'\\t[default: %s]'", "%", "str", "(", "default", ")", "\n", "", "message", "+=", "'{:>25}: {:<30}{}\\n'", ".", "format", "(", "str", "(", "k", ")", ",", "str", "(", "v", ")", ",", "comment", ")", "\n", "", "message", "+=", "'----------------- End -------------------'", "\n", "print", "(", "message", ")", "\n", "\n", "# save to the disk", "\n", "expr_dir", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "checkpoints_dir", ",", "opt", ".", "name", ")", "\n", "util", ".", "mkdirs", "(", "expr_dir", ")", "\n", "file_name", "=", "os", ".", "path", ".", "join", "(", "expr_dir", ",", "'opt.txt'", ")", "\n", "with", "open", "(", "file_name", ",", "'wt'", ")", "as", "opt_file", ":", "\n", "            ", "opt_file", ".", "write", "(", "message", ")", "\n", "opt_file", ".", "write", "(", "'\\n'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.options.base_options.BaseOptions.parse": [[115, 139], ["base_options.BaseOptions.gather_options", "base_options.BaseOptions.print_options", "base_options.BaseOptions.gpu_ids.split", "int", "len", "torch.cuda.set_device", "base_options.BaseOptions.gpu_ids.append", "base_options.BaseOptions.suffix.format", "vars"], "methods", ["home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.options.base_options.BaseOptions.gather_options", "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.options.base_options.BaseOptions.print_options"], ["", "", "def", "parse", "(", "self", ")", ":", "\n", "\n", "        ", "opt", "=", "self", ".", "gather_options", "(", ")", "\n", "opt", ".", "isTrain", "=", "self", ".", "isTrain", "# train or test", "\n", "\n", "# process opt.suffix", "\n", "if", "opt", ".", "suffix", ":", "\n", "            ", "suffix", "=", "(", "'_'", "+", "opt", ".", "suffix", ".", "format", "(", "**", "vars", "(", "opt", ")", ")", ")", "if", "opt", ".", "suffix", "!=", "''", "else", "''", "\n", "opt", ".", "name", "=", "opt", ".", "name", "+", "suffix", "\n", "\n", "", "self", ".", "print_options", "(", "opt", ")", "\n", "\n", "# set gpu ids", "\n", "str_ids", "=", "opt", ".", "gpu_ids", ".", "split", "(", "','", ")", "\n", "opt", ".", "gpu_ids", "=", "[", "]", "\n", "for", "str_id", "in", "str_ids", ":", "\n", "            ", "id", "=", "int", "(", "str_id", ")", "\n", "if", "id", ">=", "0", ":", "\n", "                ", "opt", ".", "gpu_ids", ".", "append", "(", "id", ")", "\n", "", "", "if", "len", "(", "opt", ".", "gpu_ids", ")", ">", "0", ":", "\n", "            ", "torch", ".", "cuda", ".", "set_device", "(", "opt", ".", "gpu_ids", "[", "0", "]", ")", "\n", "\n", "", "self", ".", "opt", "=", "opt", "\n", "return", "self", ".", "opt", "\n", "", "", ""]], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.Inference.transfer.load_model": [[24, 36], ["print", "print", "models.create_model", "print", "models.create_model.setup"], "function", ["home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.models.__init__.create_model", "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.models.base_model.BaseModel.setup"], ["def", "load_model", "(", "opt", ")", ":", "\n", "    ", "opt", ".", "output_audio_expressions", "=", "True", "\n", "opt", ".", "nTrainObjects", "=", "116", "\n", "\n", "print", "(", "'#train objects = %d'", "%", "opt", ".", "nTrainObjects", ")", "\n", "\n", "print", "(", "'>>> create model <<<'", ")", "\n", "model", "=", "create_model", "(", "opt", ")", "\n", "print", "(", "'>>> setup model <<<'", ")", "\n", "model", ".", "setup", "(", "opt", ")", "\n", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.Inference.transfer.load_target_sequence": [[37, 52], ["copy.copy", "data.face_dataset.FaceDataset", "data.face_dataset.FaceDataset.initialize", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "int"], "function", ["home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.options.base_options.BaseOptions.initialize"], ["", "def", "load_target_sequence", "(", "opt", ")", ":", "\n", "    ", "opt_target", "=", "copy", ".", "copy", "(", "opt", ")", "# create a clone", "\n", "opt_target", ".", "dataroot", "=", "opt", ".", "target_actor", "# overwrite root directory", "\n", "opt_target", ".", "dataset_mode", "=", "'face'", "\n", "opt_target", ".", "phase", "=", "'train'", "\n", "dataset_target", "=", "FaceDataset", "(", ")", "\n", "dataset_target", ".", "initialize", "(", "opt_target", ")", "\n", "\n", "dataloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "dataset_target", ",", "\n", "batch_size", "=", "opt", ".", "batch_size", ",", "\n", "shuffle", "=", "not", "opt", ".", "serial_batches", ",", "\n", "num_workers", "=", "int", "(", "opt", ".", "num_threads", ")", ")", "\n", "\n", "return", "dataset_target", ",", "dataloader", "\n", "\n"]], "home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.Inference.transfer.load_source_sequence": [[54, 69], ["copy.copy", "data.audio_dataset.AudioDataset", "data.audio_dataset.AudioDataset.initialize", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "int"], "function", ["home.repos.pwc.inspect_result.miu200521358_NeuralVoicePuppetryMMD.options.base_options.BaseOptions.initialize"], ["", "def", "load_source_sequence", "(", "opt", ")", ":", "\n", "    ", "opt_source", "=", "copy", ".", "copy", "(", "opt", ")", "# create a clone", "\n", "opt_source", ".", "dataroot", "=", "opt", ".", "source_actor", "# overwrite root directory", "\n", "opt_source", ".", "dataset_mode", "=", "'audio'", "\n", "opt_source", ".", "phase", "=", "'train'", "\n", "dataset_source", "=", "AudioDataset", "(", ")", "\n", "dataset_source", ".", "initialize", "(", "opt_source", ")", "\n", "\n", "dataloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "dataset_source", ",", "\n", "batch_size", "=", "opt", ".", "batch_size", ",", "\n", "shuffle", "=", "not", "opt", ".", "serial_batches", ",", "\n", "num_workers", "=", "int", "(", "opt", ".", "num_threads", ")", ")", "\n", "\n", "return", "dataset_source", ",", "dataloader", "\n", "\n"]]}