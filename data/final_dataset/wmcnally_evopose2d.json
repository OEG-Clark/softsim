{"home.repos.pwc.inspect_result.wmcnally_evopose2d.None.validate.get_preds": [[17, 41], ["numpy.zeros", "range", "range", "range", "cv2.invertAffineTransform", "hm.argmax", "numpy.unravel_index", "int", "int", "math.floor", "math.floor", "numpy.array", "numpy.sign", "hm.max", "numpy.matmul"], "function", ["None"], ["def", "get_preds", "(", "hms", ",", "Ms", ",", "input_shape", ",", "output_shape", ")", ":", "\n", "    ", "preds", "=", "np", ".", "zeros", "(", "(", "hms", ".", "shape", "[", "0", "]", ",", "output_shape", "[", "-", "1", "]", ",", "3", ")", ")", "\n", "for", "i", "in", "range", "(", "preds", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "preds", ".", "shape", "[", "1", "]", ")", ":", "\n", "            ", "hm", "=", "hms", "[", "i", ",", ":", ",", ":", ",", "j", "]", "\n", "idx", "=", "hm", ".", "argmax", "(", ")", "\n", "y", ",", "x", "=", "np", ".", "unravel_index", "(", "idx", ",", "hm", ".", "shape", ")", "\n", "px", "=", "int", "(", "math", ".", "floor", "(", "x", "+", "0.5", ")", ")", "\n", "py", "=", "int", "(", "math", ".", "floor", "(", "y", "+", "0.5", ")", ")", "\n", "if", "1", "<", "px", "<", "output_shape", "[", "1", "]", "-", "1", "and", "1", "<", "py", "<", "output_shape", "[", "0", "]", "-", "1", ":", "\n", "                ", "diff", "=", "np", ".", "array", "(", "[", "hm", "[", "py", "]", "[", "px", "+", "1", "]", "-", "hm", "[", "py", "]", "[", "px", "-", "1", "]", ",", "\n", "hm", "[", "py", "+", "1", "]", "[", "px", "]", "-", "hm", "[", "py", "-", "1", "]", "[", "px", "]", "]", ")", "\n", "diff", "=", "np", ".", "sign", "(", "diff", ")", "\n", "x", "+=", "diff", "[", "0", "]", "*", "0.25", "\n", "y", "+=", "diff", "[", "1", "]", "*", "0.25", "\n", "", "preds", "[", "i", ",", "j", ",", ":", "2", "]", "=", "[", "x", "*", "input_shape", "[", "1", "]", "/", "output_shape", "[", "1", "]", ",", "\n", "y", "*", "input_shape", "[", "0", "]", "/", "output_shape", "[", "0", "]", "]", "\n", "preds", "[", "i", ",", "j", ",", "-", "1", "]", "=", "hm", ".", "max", "(", ")", "/", "255", "\n", "\n", "# use inverse transform to map kp back to original image", "\n", "", "", "for", "j", "in", "range", "(", "preds", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "M_inv", "=", "cv2", ".", "invertAffineTransform", "(", "Ms", "[", "j", "]", ")", "\n", "preds", "[", "j", ",", ":", ",", ":", "2", "]", "=", "np", ".", "matmul", "(", "M_inv", "[", ":", ",", ":", "2", "]", ",", "preds", "[", "j", ",", ":", ",", ":", "2", "]", ".", "T", ")", ".", "T", "+", "M_inv", "[", ":", ",", "2", "]", ".", "T", "\n", "", "return", "preds", "\n", "\n"]], "home.repos.pwc.inspect_result.wmcnally_evopose2d.None.validate.to_numpy": [[43, 48], ["numpy.concatenate", "x.numpy"], "function", ["None"], ["", "def", "to_numpy", "(", "x", ",", "num_replicas", ")", ":", "\n", "    ", "if", "num_replicas", ">", "1", ":", "\n", "        ", "return", "np", ".", "concatenate", "(", "x", ".", "values", ")", "\n", "", "else", ":", "\n", "        ", "return", "x", ".", "numpy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wmcnally_evopose2d.None.validate.validate": [[50, 127], ["dataset.dataloader.load_tfds", "strategy.experimental_distribute_dataset", "enumerate", "tf.keras.models.load_model.", "validate.to_numpy", "validate.to_numpy", "validate.to_numpy", "strategy.run", "validate.to_numpy", "validate.get_preds", "preds[].copy", "numpy.zeros", "range", "range", "open", "json.dump", "utils.suppress_stdout", "pycocotools.coco.COCO", "strategy.scope", "tensorflow.keras.models.load_model", "strategy.run", "validate.to_numpy", "to_numpy.copy", "range", "flip_hms[].copy", "len", "len", "results.append", "print", "utils.suppress_stdout", "pycocotools.coco.COCO.loadRes", "pycocotools.cocoeval.COCOeval", "pycocotools.cocoeval.COCOeval.evaluate", "pycocotools.cocoeval.COCOeval.accumulate", "pycocotools.cocoeval.COCOeval.summarize", "os.join", "len", "numpy.sum", "dict", "numpy.mean", "int", "preds[].reshape().tolist", "float", "preds[].reshape"], "function", ["home.repos.pwc.inspect_result.wmcnally_evopose2d.dataset.dataloader.load_tfds", "home.repos.pwc.inspect_result.wmcnally_evopose2d.None.validate.to_numpy", "home.repos.pwc.inspect_result.wmcnally_evopose2d.None.validate.to_numpy", "home.repos.pwc.inspect_result.wmcnally_evopose2d.None.validate.to_numpy", "home.repos.pwc.inspect_result.wmcnally_evopose2d.None.validate.to_numpy", "home.repos.pwc.inspect_result.wmcnally_evopose2d.None.validate.get_preds", "home.repos.pwc.inspect_result.wmcnally_evopose2d.None.utils.suppress_stdout", "home.repos.pwc.inspect_result.wmcnally_evopose2d.None.validate.to_numpy", "home.repos.pwc.inspect_result.wmcnally_evopose2d.None.utils.suppress_stdout"], ["", "", "def", "validate", "(", "strategy", ",", "cfg", ",", "model", "=", "None", ",", "split", "=", "'val'", ")", ":", "\n", "    ", "cfg", ".", "DATASET", ".", "CACHE", "=", "False", "\n", "result_path", "=", "'{}/{}_{}.json'", ".", "format", "(", "cfg", ".", "MODEL", ".", "SAVE_DIR", ",", "cfg", ".", "MODEL", ".", "NAME", ",", "split", ")", "\n", "\n", "if", "split", "==", "'val'", ":", "\n", "        ", "with", "suppress_stdout", "(", ")", ":", "\n", "            ", "coco", "=", "COCO", "(", "cfg", ".", "DATASET", ".", "ANNOT", ")", "\n", "\n", "", "", "if", "model", "is", "None", ":", "\n", "        ", "with", "strategy", ".", "scope", "(", ")", ":", "\n", "            ", "model", "=", "tf", ".", "keras", ".", "models", ".", "load_model", "(", "\n", "osp", ".", "join", "(", "cfg", ".", "MODEL", ".", "SAVE_DIR", ",", "cfg", ".", "MODEL", ".", "NAME", "+", "'.h5'", ")", ",", "compile", "=", "False", ")", "\n", "\n", "", "", "cfg", ".", "DATASET", ".", "OUTPUT_SHAPE", "=", "model", ".", "output_shape", "[", "1", ":", "]", "\n", "\n", "ds", "=", "load_tfds", "(", "cfg", ",", "split", ",", "det", "=", "cfg", ".", "VAL", ".", "DET", ",", "\n", "predict_kp", "=", "True", ",", "drop_remainder", "=", "cfg", ".", "VAL", ".", "DROP_REMAINDER", ")", "\n", "ds", "=", "strategy", ".", "experimental_distribute_dataset", "(", "ds", ")", "\n", "\n", "@", "tf", ".", "function", "\n", "def", "predict", "(", "imgs", ",", "flip", "=", "False", ")", ":", "\n", "        ", "if", "flip", ":", "\n", "            ", "imgs", "=", "imgs", "[", ":", ",", ":", ",", ":", ":", "-", "1", ",", ":", "]", "\n", "", "return", "model", "(", "imgs", ",", "training", "=", "False", ")", "\n", "\n", "", "results", "=", "[", "]", "\n", "for", "count", ",", "batch", "in", "enumerate", "(", "ds", ")", ":", "\n", "        ", "ids", ",", "imgs", ",", "_", ",", "Ms", ",", "scores", "=", "batch", "\n", "\n", "ids", "=", "to_numpy", "(", "ids", ",", "strategy", ".", "num_replicas_in_sync", ")", "\n", "scores", "=", "to_numpy", "(", "scores", ",", "strategy", ".", "num_replicas_in_sync", ")", "\n", "Ms", "=", "to_numpy", "(", "Ms", ",", "strategy", ".", "num_replicas_in_sync", ")", "\n", "\n", "hms", "=", "strategy", ".", "run", "(", "predict", ",", "args", "=", "(", "imgs", ",", ")", ")", "\n", "hms", "=", "to_numpy", "(", "hms", ",", "strategy", ".", "num_replicas_in_sync", ")", "\n", "\n", "if", "cfg", ".", "VAL", ".", "FLIP", ":", "\n", "            ", "flip_hms", "=", "strategy", ".", "run", "(", "predict", ",", "args", "=", "(", "imgs", ",", "True", ",", ")", ")", "\n", "flip_hms", "=", "to_numpy", "(", "flip_hms", ",", "strategy", ".", "num_replicas_in_sync", ")", "\n", "flip_hms", "=", "flip_hms", "[", ":", ",", ":", ",", ":", ":", "-", "1", ",", ":", "]", "\n", "tmp", "=", "flip_hms", ".", "copy", "(", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "cfg", ".", "DATASET", ".", "KP_FLIP", ")", ")", ":", "\n", "                ", "flip_hms", "[", ":", ",", ":", ",", ":", ",", "i", "]", "=", "tmp", "[", ":", ",", ":", ",", ":", ",", "cfg", ".", "DATASET", ".", "KP_FLIP", "[", "i", "]", "]", "\n", "# shift to align features", "\n", "", "flip_hms", "[", ":", ",", ":", ",", "1", ":", ",", ":", "]", "=", "flip_hms", "[", ":", ",", ":", ",", "0", ":", "-", "1", ",", ":", "]", ".", "copy", "(", ")", "\n", "hms", "=", "(", "hms", "+", "flip_hms", ")", "/", "2.", "\n", "\n", "", "preds", "=", "get_preds", "(", "hms", ",", "Ms", ",", "cfg", ".", "DATASET", ".", "INPUT_SHAPE", ",", "cfg", ".", "DATASET", ".", "OUTPUT_SHAPE", ")", "\n", "kp_scores", "=", "preds", "[", ":", ",", ":", ",", "-", "1", "]", ".", "copy", "(", ")", "\n", "\n", "# rescore", "\n", "rescored_score", "=", "np", ".", "zeros", "(", "(", "len", "(", "kp_scores", ")", ")", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "kp_scores", ")", ")", ":", "\n", "            ", "score_mask", "=", "kp_scores", "[", "i", "]", ">", "cfg", ".", "VAL", ".", "SCORE_THRESH", "\n", "if", "np", ".", "sum", "(", "score_mask", ")", ">", "0", ":", "\n", "                ", "rescored_score", "[", "i", "]", "=", "np", ".", "mean", "(", "kp_scores", "[", "i", "]", "[", "score_mask", "]", ")", "*", "scores", "[", "i", "]", "\n", "", "", "score_result", "=", "rescored_score", "\n", "\n", "for", "i", "in", "range", "(", "preds", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "results", ".", "append", "(", "dict", "(", "image_id", "=", "int", "(", "ids", "[", "i", "]", ")", ",", "\n", "category_id", "=", "1", ",", "\n", "keypoints", "=", "preds", "[", "i", "]", ".", "reshape", "(", "-", "1", ")", ".", "tolist", "(", ")", ",", "\n", "score", "=", "float", "(", "score_result", "[", "i", "]", ")", ")", ")", "\n", "", "if", "cfg", ".", "TRAIN", ".", "DISP", ":", "\n", "            ", "print", "(", "'completed preds batch'", ",", "count", "+", "1", ")", "\n", "\n", "", "", "with", "open", "(", "result_path", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "json", ".", "dump", "(", "results", ",", "f", ")", "\n", "\n", "", "if", "split", "==", "'val'", ":", "\n", "        ", "with", "suppress_stdout", "(", ")", ":", "\n", "            ", "result", "=", "coco", ".", "loadRes", "(", "result_path", ")", "\n", "cocoEval", "=", "COCOeval", "(", "coco", ",", "result", ",", "iouType", "=", "'keypoints'", ")", "\n", "cocoEval", ".", "evaluate", "(", ")", "\n", "cocoEval", ".", "accumulate", "(", ")", "\n", "cocoEval", ".", "summarize", "(", ")", "\n", "", "return", "cocoEval", ".", "stats", "[", "0", "]", "# AP", "\n", "\n"]], "home.repos.pwc.inspect_result.wmcnally_evopose2d.None.ga.update_cfg": [[18, 28], ["os.join", "list", "dataset.coco.cn"], "function", ["None"], ["def", "update_cfg", "(", "cfg", ",", "accelerator", ",", "gen", ",", "model_id", ",", "\n", "genotype", ",", "epochs", ",", "parent", ",", "disp", ")", ":", "\n", "    ", "cfg", ".", "MODEL", ".", "SAVE_DIR", "=", "osp", ".", "join", "(", "cfg", ".", "SEARCH", ".", "DIR", ",", "'{:03d}'", ".", "format", "(", "gen", ")", ")", "\n", "cfg", ".", "MODEL", ".", "NAME", "=", "'{:03d}_{:05d}'", ".", "format", "(", "gen", ",", "model_id", ")", "\n", "cfg", ".", "MODEL", ".", "GENOTYPE", "=", "list", "(", "genotype", ")", "\n", "cfg", ".", "MODEL", ".", "PARENT", "=", "parent", "\n", "cfg", ".", "TRAIN", ".", "ACCELERATOR", "=", "accelerator", "\n", "cfg", ".", "TRAIN", ".", "EPOCHS", "=", "epochs", "\n", "cfg", ".", "TRAIN", ".", "DISP", "=", "disp", "\n", "return", "cfg", "\n", "\n"]], "home.repos.pwc.inspect_result.wmcnally_evopose2d.None.ga.train_generation": [[30, 86], ["numpy.max", "range", "numpy.int", "numpy.int", "len", "numpy.sum", "print", "print", "len", "print", "print", "os.join", "range", "numpy.max", "len", "print", "print", "numpy.max", "print", "numpy.int", "numpy.float32", "numpy.argsort", "os.remove", "os.remove", "len", "len", "m.split", "m.split", "numpy.max", "range", "range", "os.join", "p.split", "numpy.random.seed", "nets.evopose2d.mutate", "train_cfgs.append", "multiprocessing.get_context().Pool", "p.map", "m.split", "[].split", "numpy.int", "ga.update_cfg", "len", "m.split", "numpy.int", "m.split", "copy.deepcopy", "multiprocessing.get_context", "m.split", "p.split", "len", "numpy.array", "m.split", "m.split", "genotypes.keys", "len", "len"], "function", ["home.repos.pwc.inspect_result.wmcnally_evopose2d.nets.evopose2d.mutate", "home.repos.pwc.inspect_result.wmcnally_evopose2d.None.ga.update_cfg"], ["", "def", "train_generation", "(", "cfg", ",", "accelerators", ",", "meta_files", ",", "models", ",", "genotypes", ")", ":", "\n", "    ", "gens", "=", "[", "np", ".", "int", "(", "m", ".", "split", "(", "'_'", ")", "[", "0", "]", ")", "for", "m", "in", "meta_files", "]", "\n", "completed_ids", "=", "[", "np", ".", "int", "(", "m", ".", "split", "(", "'_'", ")", "[", "1", "]", ")", "for", "m", "in", "meta_files", "]", "\n", "train_cycles", "=", "cfg", ".", "SEARCH", ".", "CHILDREN", "//", "len", "(", "accelerators", ")", "\n", "\n", "if", "np", ".", "sum", "(", "gens", "==", "np", ".", "max", "(", "gens", ")", ")", ">=", "cfg", ".", "SEARCH", ".", "CHILDREN", ":", "\n", "        ", "gen", "=", "np", ".", "max", "(", "gens", ")", "+", "1", "\n", "print", "(", "'Training generation {}'", ".", "format", "(", "gen", ")", ")", "\n", "print", "(", "'Performing {} train cycles of {} children'", "\n", ".", "format", "(", "train_cycles", ",", "cfg", ".", "SEARCH", ".", "CHILDREN", "//", "train_cycles", ")", ")", "\n", "", "elif", "len", "(", "gens", ")", "==", "1", ":", "\n", "        ", "gen", "=", "1", "\n", "print", "(", "'Training generation {}'", ".", "format", "(", "gen", ")", ")", "\n", "print", "(", "'Performing {} train cycles of {} children'", "\n", ".", "format", "(", "train_cycles", ",", "cfg", ".", "SEARCH", ".", "CHILDREN", "//", "train_cycles", ")", ")", "\n", "", "else", ":", "\n", "        ", "gen", "=", "np", ".", "max", "(", "gens", ")", "\n", "print", "(", "'Continuing generation'", ",", "gen", ")", "\n", "models", "=", "[", "m", "for", "m", "in", "models", "if", "m", ".", "split", "(", "'_'", ")", "[", "0", "]", "!=", "'{:03d}'", ".", "format", "(", "gen", ")", "]", "\n", "\n", "", "last_model_id", "=", "np", ".", "max", "(", "[", "np", ".", "int", "(", "m", ".", "split", "(", "'_'", ")", "[", "1", "]", ")", "\n", "for", "m", "in", "meta_files", "\n", "if", "m", ".", "split", "(", "'_'", ")", "[", "0", "]", "!=", "'{:03d}'", ".", "format", "(", "gen", ")", "]", ")", "\n", "\n", "if", "len", "(", "models", ")", "==", "1", ":", "\n", "        ", "parents", "=", "[", "models", "[", "0", "]", "for", "_", "in", "range", "(", "cfg", ".", "SEARCH", ".", "CHILDREN", ")", "]", "\n", "parent_genotypes", "=", "[", "genotypes", "[", "0", "]", "for", "_", "in", "range", "(", "cfg", ".", "SEARCH", ".", "CHILDREN", ")", "]", "\n", "", "else", ":", "\n", "        ", "fitness", "=", "[", "np", ".", "float32", "(", "m", ".", "split", "(", "'_'", ")", "[", "-", "1", "]", ".", "split", "(", "'.h5'", ")", "[", "0", "]", ")", "for", "m", "in", "models", "]", "\n", "parent_idx", "=", "np", ".", "argsort", "(", "fitness", ")", "[", ":", "cfg", ".", "SEARCH", ".", "PARENTS", "]", "# mu models with best fitness (lowest loss)", "\n", "parents", "=", "[", "models", "[", "i", "]", "for", "i", "in", "parent_idx", "]", "\n", "print", "(", "'Parents: {}'", ".", "format", "(", "parents", ")", ")", "\n", "print", "(", "'Cleaning up models that are not parents...'", ")", "\n", "not_parents", "=", "[", "m", "for", "m", "in", "models", "if", "m", "not", "in", "parents", "and", "np", ".", "int", "(", "m", ".", "split", "(", "'_'", ")", "[", "0", "]", ")", "!=", "0", "]", "\n", "for", "m", "in", "not_parents", ":", "\n", "            ", "os", ".", "remove", "(", "osp", ".", "join", "(", "cfg", ".", "SEARCH", ".", "DIR", ",", "m", ".", "split", "(", "'_'", ")", "[", "0", "]", ",", "m", ")", ")", "\n", "", "parents", "*=", "cfg", ".", "SEARCH", ".", "CHILDREN", "//", "cfg", ".", "SEARCH", ".", "PARENTS", "\n", "parent_genotypes", "=", "[", "genotypes", "[", "np", ".", "int", "(", "p", ".", "split", "(", "'_'", ")", "[", "1", "]", ")", "]", "for", "p", "in", "parents", "]", "\n", "", "parents", "=", "[", "osp", ".", "join", "(", "cfg", ".", "SEARCH", ".", "DIR", ",", "p", ".", "split", "(", "'_'", ")", "[", "0", "]", ",", "p", ")", "for", "p", "in", "parents", "]", "# paths", "\n", "\n", "for", "i", "in", "range", "(", "train_cycles", ")", ":", "\n", "        ", "train_cfgs", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "len", "(", "accelerators", ")", ")", ":", "\n", "            ", "model_id", "=", "i", "*", "len", "(", "accelerators", ")", "+", "j", "+", "last_model_id", "+", "1", "\n", "if", "model_id", "not", "in", "completed_ids", ":", "\n", "                ", "np", ".", "random", ".", "seed", "(", "model_id", "+", "cfg", ".", "TRAIN", ".", "SEED", ")", "\n", "genotype", "=", "mutate", "(", "parent_genotypes", "[", "i", "*", "len", "(", "accelerators", ")", "+", "j", "]", ",", "\n", "cache", "=", "[", "np", ".", "array", "(", "genotypes", "[", "i", "]", ")", "for", "i", "in", "genotypes", ".", "keys", "(", ")", "]", ")", "\n", "genotypes", "[", "model_id", "]", "=", "genotype", "\n", "parent", "=", "parents", "[", "i", "*", "len", "(", "accelerators", ")", "+", "j", "]", "\n", "train_cfgs", ".", "append", "(", "\n", "update_cfg", "(", "copy", ".", "deepcopy", "(", "cfg", ")", ",", "accelerators", "[", "j", "]", ",", "gen", ",", "model_id", ",", "\n", "genotype", ",", "cfg", ".", "SEARCH", ".", "EPOCHS", ",", "parent", ",", "False", ")", ")", "\n", "", "", "if", "len", "(", "train_cfgs", ")", ">", "0", ":", "\n", "            ", "with", "get_context", "(", "\"spawn\"", ")", ".", "Pool", "(", "len", "(", "accelerators", ")", ")", "as", "p", ":", "\n", "                ", "p", ".", "map", "(", "train_wrapper", ",", "train_cfgs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wmcnally_evopose2d.None.ga.train_wrapper": [[88, 123], ["train.train", "print", "model.save", "pickle.dump", "tensorflow.distribute.cluster_resolver.TPUClusterResolver", "tensorflow.distribute.TPUStrategy", "tensorflow.distribute.OneDeviceStrategy", "min", "os.join", "open", "min", "os.join", "tensorflow.config.experimental_connect_to_cluster", "tensorflow.tpu.experimental.initialize_tpu_system", "print", "time.sleep"], "function", ["home.repos.pwc.inspect_result.wmcnally_evopose2d.None.train.train"], ["", "", "", "", "def", "train_wrapper", "(", "cfg", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "tpu", "=", "tf", ".", "distribute", ".", "cluster_resolver", ".", "TPUClusterResolver", "(", "tpu", "=", "cfg", ".", "TRAIN", ".", "ACCELERATOR", ")", "# TPU detection", "\n", "", "except", ":", "\n", "        ", "tpu", "=", "None", "\n", "", "if", "tpu", ":", "\n", "        ", "tpu_init", "=", "False", "\n", "while", "not", "tpu_init", ":", "\n", "            ", "try", ":", "\n", "                ", "tf", ".", "config", ".", "experimental_connect_to_cluster", "(", "tpu", ")", "\n", "tf", ".", "tpu", ".", "experimental", ".", "initialize_tpu_system", "(", "tpu", ")", "\n", "tpu_init", "=", "True", "\n", "", "except", ":", "\n", "                ", "print", "(", "'Could not connect to {}. Waiting 5 seconds and trying again...'", "\n", ".", "format", "(", "cfg", ".", "TRAIN", ".", "ACCELERATOR", ")", ")", "\n", "sleep", "(", "5", ")", "\n", "", "", "strategy", "=", "tf", ".", "distribute", ".", "TPUStrategy", "(", "tpu", ")", "\n", "", "else", ":", "\n", "        ", "strategy", "=", "tf", ".", "distribute", ".", "OneDeviceStrategy", "(", "cfg", ".", "TRAIN", ".", "ACCELERATOR", ")", "\n", "\n", "", "model", ",", "meta_data", "=", "train", "(", "strategy", ",", "cfg", ")", "\n", "meta_data", "[", "'fitness'", "]", "=", "min", "(", "meta_data", "[", "'val_loss'", "]", ")", "*", "(", "cfg", ".", "SEARCH", ".", "TARGET", "/", "meta_data", "[", "'parameters'", "]", ")", "**", "cfg", ".", "SEARCH", ".", "W", "\n", "\n", "print", "(", "'{} ({:.2f}M / {:.2f}G) loss: {:.4f} - fit: {:.4f} - {:.2f} mins'", "\n", ".", "format", "(", "cfg", ".", "MODEL", ".", "NAME", ",", "\n", "meta_data", "[", "'parameters'", "]", "/", "1e6", ",", "\n", "meta_data", "[", "'flops'", "]", "/", "2", "/", "1e9", ",", "\n", "min", "(", "meta_data", "[", "'val_loss'", "]", ")", ",", "\n", "meta_data", "[", "'fitness'", "]", ",", "\n", "meta_data", "[", "'training_time'", "]", "/", "60", ")", ")", "\n", "\n", "cfg", ".", "MODEL", ".", "NAME", "+=", "'_{:.5f}'", ".", "format", "(", "meta_data", "[", "'fitness'", "]", ")", "\n", "model", ".", "save", "(", "osp", ".", "join", "(", "cfg", ".", "MODEL", ".", "SAVE_DIR", ",", "'{}.h5'", ".", "format", "(", "cfg", ".", "MODEL", ".", "NAME", ")", ")", ",", "save_format", "=", "'h5'", ")", "\n", "pickle", ".", "dump", "(", "meta_data", ",", "open", "(", "osp", ".", "join", "(", "cfg", ".", "MODEL", ".", "SAVE_DIR", ",", "\n", "'{}_meta.pkl'", ".", "format", "(", "cfg", ".", "MODEL", ".", "NAME", ")", ")", ",", "'wb'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wmcnally_evopose2d.None.train.mse_loss": [[21, 29], ["model", "tensorflow.cast", "tensorflow.reshape", "tensorflow.reduce_mean", "tensorflow.cast", "sum", "tensorflow.square", "tensorflow.shape", "tensorflow.shape"], "function", ["None"], ["@", "tf", ".", "function", "\n", "def", "mse_loss", "(", "model", ",", "images", ",", "targets", ",", "valid", ",", "training", "=", "True", ")", ":", "\n", "    ", "heatmaps", "=", "model", "(", "images", ",", "training", "=", "training", ")", "\n", "heatmaps", "=", "tf", ".", "cast", "(", "heatmaps", ",", "tf", ".", "float32", ")", "# in case using bfloat16", "\n", "valid_mask", "=", "tf", ".", "reshape", "(", "valid", ",", "[", "tf", ".", "shape", "(", "images", ")", "[", "0", "]", ",", "1", ",", "1", ",", "tf", ".", "shape", "(", "valid", ")", "[", "-", "1", "]", "]", ")", "\n", "loss", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "square", "(", "heatmaps", "-", "targets", ")", "*", "valid_mask", ")", "\n", "l2_loss", "=", "tf", ".", "cast", "(", "sum", "(", "model", ".", "losses", ")", ",", "tf", ".", "float32", ")", "\n", "return", "loss", ",", "l2_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.wmcnally_evopose2d.None.train.train": [[31, 172], ["os.makedirs", "os.makedirs", "tensorflow.random.set_seed", "numpy.random.seed", "int", "nets.evopose2d.EvoPose.count_params", "utils.get_flops", "dataset.dataloader.load_tfds", "strategy.experimental_distribute_dataset", "iter", "print", "time.time", "tensorflow.keras.mixed_precision.experimental.Policy", "tensorflow.keras.mixed_precision.experimental.set_policy", "numpy.ceil", "lr_schedules.WarmupCosineDecay", "strategy.scope", "tensorflow.keras.optimizers.Adam", "tensorflow.keras.metrics.Mean", "tensorflow.keras.metrics.Mean", "dataset.dataloader.load_tfds", "strategy.experimental_distribute_dataset", "strategy.run", "strategy.run", "time.time", "range", "meta_data[].append", "tf.keras.metrics.Mean.reset_states", "tf.keras.metrics.Mean.reset_states", "time.time", "nets.evopose2d.EvoPose.set_weights", "lr_schedules.WarmupPiecewise", "nets.simple_basline.SimpleBaseline", "tape.gradient", "tf.keras.optimizers.Adam.apply_gradients", "tf.keras.metrics.Mean.update_state", "train.mse_loss", "tf.keras.metrics.Mean.update_state", "train.train.train_step"], "function", ["home.repos.pwc.inspect_result.wmcnally_evopose2d.None.utils.get_flops", "home.repos.pwc.inspect_result.wmcnally_evopose2d.dataset.dataloader.load_tfds", "home.repos.pwc.inspect_result.wmcnally_evopose2d.dataset.dataloader.load_tfds", "home.repos.pwc.inspect_result.wmcnally_evopose2d.nets.simple_basline.SimpleBaseline", "home.repos.pwc.inspect_result.wmcnally_evopose2d.None.train.mse_loss"], ["", "def", "train", "(", "strategy", ",", "cfg", ")", ":", "\n", "    ", "os", ".", "makedirs", "(", "cfg", ".", "MODEL", ".", "SAVE_DIR", ",", "exist_ok", "=", "True", ")", "\n", "\n", "if", "cfg", ".", "DATASET", ".", "BFLOAT16", ":", "\n", "        ", "policy", "=", "mixed_precision", ".", "Policy", "(", "'mixed_bfloat16'", ")", "\n", "mixed_precision", ".", "set_policy", "(", "policy", ")", "\n", "\n", "", "tf", ".", "random", ".", "set_seed", "(", "cfg", ".", "TRAIN", ".", "SEED", ")", "\n", "np", ".", "random", ".", "seed", "(", "cfg", ".", "TRAIN", ".", "SEED", ")", "\n", "\n", "meta_data", "=", "{", "'train_loss'", ":", "[", "]", ",", "'val_loss'", ":", "[", "]", ",", "'config'", ":", "cfg", "}", "\n", "\n", "spe", "=", "int", "(", "np", ".", "ceil", "(", "cfg", ".", "DATASET", ".", "TRAIN_SAMPLES", "/", "cfg", ".", "TRAIN", ".", "BATCH_SIZE", ")", ")", "\n", "spv", "=", "cfg", ".", "DATASET", ".", "VAL_SAMPLES", "//", "cfg", ".", "VAL", ".", "BATCH_SIZE", "\n", "\n", "if", "cfg", ".", "TRAIN", ".", "SCALE_LR", ":", "\n", "        ", "lr", "=", "cfg", ".", "TRAIN", ".", "BASE_LR", "*", "cfg", ".", "TRAIN", ".", "BATCH_SIZE", "/", "32", "\n", "cfg", ".", "TRAIN", ".", "WARMUP_FACTOR", "=", "32", "/", "cfg", ".", "TRAIN", ".", "BATCH_SIZE", "\n", "", "else", ":", "\n", "        ", "lr", "=", "cfg", ".", "TRAIN", ".", "BASE_LR", "\n", "\n", "", "if", "cfg", ".", "TRAIN", ".", "LR_SCHEDULE", "==", "'warmup_cosine_decay'", ":", "\n", "        ", "lr_schedule", "=", "WarmupCosineDecay", "(", "\n", "initial_learning_rate", "=", "lr", ",", "\n", "decay_steps", "=", "cfg", ".", "TRAIN", ".", "EPOCHS", "*", "spe", ",", "\n", "warmup_steps", "=", "cfg", ".", "TRAIN", ".", "WARMUP_EPOCHS", "*", "spe", ",", "\n", "warmup_factor", "=", "cfg", ".", "TRAIN", ".", "WARMUP_FACTOR", ")", "\n", "", "elif", "cfg", ".", "TRAIN", ".", "LR_SCHEDULE", "==", "'warmup_piecewise'", ":", "\n", "        ", "lr_schedule", "=", "WarmupPiecewise", "(", "\n", "boundaries", "=", "[", "x", "*", "spe", "for", "x", "in", "cfg", ".", "TRAIN", ".", "DECAY_EPOCHS", "]", ",", "\n", "values", "=", "[", "lr", ",", "lr", "/", "10", ",", "lr", "/", "10", "**", "2", "]", ",", "\n", "warmup_steps", "=", "spe", "*", "cfg", ".", "TRAIN", ".", "WARMUP_EPOCHS", ",", "\n", "warmup_factor", "=", "cfg", ".", "TRAIN", ".", "WARMUP_FACTOR", ")", "\n", "", "else", ":", "\n", "        ", "lr_schedule", "=", "lr", "\n", "\n", "", "with", "strategy", ".", "scope", "(", ")", ":", "\n", "        ", "optimizer", "=", "tf", ".", "keras", ".", "optimizers", ".", "Adam", "(", "lr_schedule", ")", "\n", "if", "cfg", ".", "MODEL", ".", "TYPE", "==", "'simple_baseline'", ":", "\n", "            ", "model", "=", "SimpleBaseline", "(", "cfg", ")", "\n", "", "elif", "cfg", ".", "MODEL", ".", "TYPE", "==", "'hrnet'", ":", "\n", "            ", "model", "=", "HRNet", "(", "cfg", ")", "\n", "", "elif", "cfg", ".", "MODEL", ".", "TYPE", "==", "'evopose'", ":", "\n", "            ", "model", "=", "EvoPose", "(", "cfg", ")", "\n", "", "train_loss", "=", "tf", ".", "keras", ".", "metrics", ".", "Mean", "(", ")", "\n", "val_loss", "=", "tf", ".", "keras", ".", "metrics", ".", "Mean", "(", ")", "\n", "\n", "", "cfg", ".", "DATASET", ".", "OUTPUT_SHAPE", "=", "model", ".", "output_shape", "[", "1", ":", "]", "\n", "cfg", ".", "DATASET", ".", "SIGMA", "=", "2", "*", "cfg", ".", "DATASET", ".", "OUTPUT_SHAPE", "[", "0", "]", "/", "64", "\n", "\n", "meta_data", "[", "'parameters'", "]", "=", "model", ".", "count_params", "(", ")", "\n", "meta_data", "[", "'flops'", "]", "=", "get_flops", "(", "model", ")", "\n", "\n", "train_ds", "=", "load_tfds", "(", "cfg", ",", "'train'", ")", "\n", "train_ds", "=", "strategy", ".", "experimental_distribute_dataset", "(", "train_ds", ")", "\n", "train_iterator", "=", "iter", "(", "train_ds", ")", "\n", "\n", "if", "cfg", ".", "TRAIN", ".", "VAL", ":", "\n", "        ", "val_ds", "=", "load_tfds", "(", "cfg", ",", "'val'", ")", "\n", "val_ds", "=", "strategy", ".", "experimental_distribute_dataset", "(", "val_ds", ")", "\n", "\n", "", "@", "tf", ".", "function", "\n", "def", "train_step", "(", "train_iterator", ")", ":", "\n", "        ", "def", "step_fn", "(", "inputs", ")", ":", "\n", "            ", "imgs", ",", "targets", ",", "valid", "=", "inputs", "\n", "with", "tf", ".", "GradientTape", "(", ")", "as", "tape", ":", "\n", "                ", "loss", ",", "l2_loss", "=", "mse_loss", "(", "model", ",", "imgs", ",", "targets", ",", "valid", ",", "training", "=", "True", ")", "\n", "scaled_loss", "=", "(", "loss", "+", "l2_loss", ")", "/", "strategy", ".", "num_replicas_in_sync", "\n", "", "grads", "=", "tape", ".", "gradient", "(", "scaled_loss", ",", "model", ".", "trainable_variables", ")", "\n", "optimizer", ".", "apply_gradients", "(", "list", "(", "zip", "(", "grads", ",", "model", ".", "trainable_variables", ")", ")", ")", "\n", "train_loss", ".", "update_state", "(", "loss", ")", "\n", "", "strategy", ".", "run", "(", "step_fn", ",", "args", "=", "(", "next", "(", "train_iterator", ")", ",", ")", ")", "\n", "\n", "", "@", "tf", ".", "function", "\n", "def", "val_step", "(", "dist_inputs", ")", ":", "\n", "        ", "def", "step_fn", "(", "inputs", ")", ":", "\n", "            ", "imgs", ",", "targets", ",", "valid", "=", "inputs", "\n", "loss", ",", "_", "=", "mse_loss", "(", "model", ",", "imgs", ",", "targets", ",", "valid", ",", "training", "=", "False", ")", "\n", "val_loss", ".", "update_state", "(", "loss", ")", "\n", "", "strategy", ".", "run", "(", "step_fn", ",", "args", "=", "(", "dist_inputs", ",", ")", ")", "\n", "\n", "", "print", "(", "'Training {} ({:.2f}M / {:.2f}G) on {} for {} epochs'", "\n", ".", "format", "(", "cfg", ".", "MODEL", ".", "NAME", ",", "meta_data", "[", "'parameters'", "]", "/", "1e6", ",", "\n", "meta_data", "[", "'flops'", "]", "/", "2", "/", "1e9", ",", "cfg", ".", "TRAIN", ".", "ACCELERATOR", ",", "cfg", ".", "TRAIN", ".", "EPOCHS", ")", ")", "\n", "\n", "epoch", "=", "1", "\n", "ts", "=", "time", "(", ")", "\n", "while", "epoch", "<=", "cfg", ".", "TRAIN", ".", "EPOCHS", ":", "\n", "        ", "te", "=", "time", "(", ")", "\n", "for", "i", "in", "range", "(", "spe", ")", ":", "\n", "            ", "train_step", "(", "train_iterator", ")", "\n", "if", "cfg", ".", "TRAIN", ".", "DISP", ":", "\n", "                ", "print", "(", "'epoch {} ({}/{}) | loss: {:.1f}'", "\n", ".", "format", "(", "epoch", ",", "i", "+", "1", ",", "spe", ",", "train_loss", ".", "result", "(", ")", ".", "numpy", "(", ")", ")", ")", "\n", "", "", "meta_data", "[", "'train_loss'", "]", ".", "append", "(", "train_loss", ".", "result", "(", ")", ".", "numpy", "(", ")", ")", "\n", "\n", "if", "cfg", ".", "TRAIN", ".", "VAL", ":", "\n", "            ", "for", "i", ",", "batch", "in", "enumerate", "(", "val_ds", ")", ":", "\n", "                ", "val_step", "(", "batch", ")", "\n", "if", "cfg", ".", "TRAIN", ".", "DISP", ":", "\n", "                    ", "print", "(", "'val {} ({}/{}) | loss: {:.1f}'", "\n", ".", "format", "(", "epoch", ",", "i", "+", "1", ",", "spv", ",", "val_loss", ".", "result", "(", ")", ".", "numpy", "(", ")", ")", ")", "\n", "", "", "meta_data", "[", "'val_loss'", "]", ".", "append", "(", "val_loss", ".", "result", "(", ")", ".", "numpy", "(", ")", ")", "\n", "\n", "if", "cfg", ".", "VAL", ".", "SAVE_BEST", ":", "\n", "                ", "if", "epoch", "==", "1", ":", "\n", "                    ", "best_weights", "=", "model", ".", "get_weights", "(", ")", "\n", "best_loss", "=", "val_loss", ".", "result", "(", ")", ".", "numpy", "(", ")", "\n", "if", "cfg", ".", "TRAIN", ".", "DISP", ":", "\n", "                        ", "print", "(", "'Cached model weights'", ")", "\n", "", "", "elif", "val_loss", ".", "result", "(", ")", ".", "numpy", "(", ")", "<", "best_loss", ":", "\n", "                    ", "best_weights", "=", "model", ".", "get_weights", "(", ")", "\n", "best_loss", "=", "val_loss", ".", "result", "(", ")", ".", "numpy", "(", ")", "\n", "if", "cfg", ".", "TRAIN", ".", "DISP", ":", "\n", "                        ", "print", "(", "'Cached model weights'", ")", "\n", "\n", "", "", "", "", "train_loss", ".", "reset_states", "(", ")", "\n", "val_loss", ".", "reset_states", "(", ")", "\n", "\n", "if", "cfg", ".", "TRAIN", ".", "SAVE_EPOCHS", "and", "epoch", "%", "cfg", ".", "TRAIN", ".", "SAVE_EPOCHS", "==", "0", ":", "\n", "            ", "model", ".", "save", "(", "osp", ".", "join", "(", "cfg", ".", "MODEL", ".", "SAVE_DIR", ",", "'{}_ckpt{:03d}.h5'", "\n", ".", "format", "(", "cfg", ".", "MODEL", ".", "NAME", ",", "epoch", ")", ")", ",", "save_format", "=", "'h5'", ")", "\n", "print", "(", "'Saved checkpoint to'", ",", "osp", ".", "join", "(", "cfg", ".", "MODEL", ".", "SAVE_DIR", ",", "'{}_ckpt{:03d}.h5'", "\n", ".", "format", "(", "cfg", ".", "MODEL", ".", "NAME", ",", "epoch", ")", ")", ")", "\n", "\n", "", "if", "cfg", ".", "TRAIN", ".", "SAVE_META", ":", "\n", "            ", "pickle", ".", "dump", "(", "meta_data", ",", "open", "(", "osp", ".", "join", "(", "cfg", ".", "MODEL", ".", "SAVE_DIR", ",", "\n", "'{}_meta.pkl'", ".", "format", "(", "cfg", ".", "MODEL", ".", "NAME", ")", ")", ",", "'wb'", ")", ")", "\n", "\n", "", "if", "epoch", ">", "1", "and", "cfg", ".", "TRAIN", ".", "DISP", ":", "\n", "            ", "est_time", "=", "(", "cfg", ".", "TRAIN", ".", "EPOCHS", "-", "epoch", ")", "*", "(", "time", "(", ")", "-", "te", ")", "/", "3600", "\n", "print", "(", "'Estimated time remaining: {:.2f} hrs'", ".", "format", "(", "est_time", ")", ")", "\n", "\n", "", "epoch", "+=", "1", "\n", "\n", "", "meta_data", "[", "'training_time'", "]", "=", "time", "(", ")", "-", "ts", "\n", "\n", "if", "cfg", ".", "VAL", ".", "SAVE_BEST", ":", "\n", "        ", "model", ".", "set_weights", "(", "best_weights", ")", "\n", "\n", "", "return", "model", ",", "meta_data", "\n", "\n"]], "home.repos.pwc.inspect_result.wmcnally_evopose2d.None.inference_speed.speed_test": [[13, 56], ["dataset.dataloader.load_tfds", "strategy.experimental_distribute_dataset", "enumerate", "print", "strategy.scope", "nets.evopose2d.EvoPose.", "strategy.run().numpy", "nets.simple_basline.SimpleBaseline", "time.time", "strategy.run().numpy", "strategy.run().numpy.copy", "range", "flip_hms[].copy", "nets.hrnet.HRNet", "strategy.run", "len", "nets.evopose2d.EvoPose", "strategy.run", "time.time"], "function", ["home.repos.pwc.inspect_result.wmcnally_evopose2d.dataset.dataloader.load_tfds", "home.repos.pwc.inspect_result.wmcnally_evopose2d.nets.simple_basline.SimpleBaseline", "home.repos.pwc.inspect_result.wmcnally_evopose2d.nets.hrnet.HRNet", "home.repos.pwc.inspect_result.wmcnally_evopose2d.nets.evopose2d.EvoPose"], ["def", "speed_test", "(", "strategy", ",", "cfg", ",", "split", "=", "'val'", ",", "n", "=", "1000", ")", ":", "\n", "    ", "with", "strategy", ".", "scope", "(", ")", ":", "\n", "        ", "if", "cfg", ".", "MODEL", ".", "TYPE", "==", "'simple_baseline'", ":", "\n", "            ", "model", "=", "SimpleBaseline", "(", "cfg", ")", "\n", "", "elif", "cfg", ".", "MODEL", ".", "TYPE", "==", "'hrnet'", ":", "\n", "            ", "model", "=", "HRNet", "(", "cfg", ")", "\n", "", "elif", "cfg", ".", "MODEL", ".", "TYPE", "==", "'evopose'", ":", "\n", "            ", "model", "=", "EvoPose", "(", "cfg", ")", "\n", "\n", "", "", "cfg", ".", "DATASET", ".", "OUTPUT_SHAPE", "=", "model", ".", "output_shape", "[", "1", ":", "]", "\n", "\n", "ds", "=", "load_tfds", "(", "cfg", ",", "split", ",", "det", "=", "cfg", ".", "VAL", ".", "DET", ",", "\n", "predict_kp", "=", "True", ",", "drop_remainder", "=", "cfg", ".", "VAL", ".", "DROP_REMAINDER", ")", "\n", "ds", "=", "strategy", ".", "experimental_distribute_dataset", "(", "ds", ")", "\n", "\n", "@", "tf", ".", "function", "\n", "def", "predict", "(", "imgs", ",", "flip", "=", "False", ")", ":", "\n", "        ", "if", "flip", ":", "\n", "            ", "imgs", "=", "imgs", "[", ":", ",", ":", ",", ":", ":", "-", "1", ",", ":", "]", "\n", "", "return", "model", "(", "imgs", ",", "training", "=", "False", ")", "\n", "\n", "", "for", "count", ",", "batch", "in", "enumerate", "(", "ds", ")", ":", "\n", "        ", "if", "count", "==", "1", ":", "# skip first pass", "\n", "            ", "ti", "=", "time", "(", ")", "\n", "\n", "", "_", ",", "imgs", ",", "_", ",", "_", ",", "scores", "=", "batch", "\n", "\n", "hms", "=", "strategy", ".", "run", "(", "predict", ",", "args", "=", "(", "imgs", ",", ")", ")", ".", "numpy", "(", ")", "\n", "\n", "if", "cfg", ".", "VAL", ".", "FLIP", ":", "\n", "            ", "flip_hms", "=", "strategy", ".", "run", "(", "predict", ",", "args", "=", "(", "imgs", ",", "True", ",", ")", ")", ".", "numpy", "(", ")", "\n", "flip_hms", "=", "flip_hms", "[", ":", ",", ":", ",", ":", ":", "-", "1", ",", ":", "]", "\n", "tmp", "=", "flip_hms", ".", "copy", "(", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "cfg", ".", "DATASET", ".", "KP_FLIP", ")", ")", ":", "\n", "                ", "flip_hms", "[", ":", ",", ":", ",", ":", ",", "i", "]", "=", "tmp", "[", ":", ",", ":", ",", ":", ",", "cfg", ".", "DATASET", ".", "KP_FLIP", "[", "i", "]", "]", "\n", "# shift to align features", "\n", "", "flip_hms", "[", ":", ",", ":", ",", "1", ":", ",", ":", "]", "=", "flip_hms", "[", ":", ",", ":", ",", "0", ":", "-", "1", ",", ":", "]", ".", "copy", "(", ")", "\n", "hms", "=", "(", "hms", "+", "flip_hms", ")", "/", "2.", "\n", "\n", "", "if", "count", "==", "n", ":", "\n", "            ", "break", "\n", "\n", "", "", "print", "(", "'FPS: {:.5f}'", ".", "format", "(", "(", "n", "*", "cfg", ".", "VAL", ".", "BATCH_SIZE", ")", "/", "(", "time", "(", ")", "-", "ti", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wmcnally_evopose2d.None.write_tfrecords._bytes_feature": [[11, 16], ["isinstance", "tensorflow.train.Feature", "type", "value.numpy.numpy", "tensorflow.constant", "tensorflow.train.BytesList"], "function", ["None"], ["def", "_bytes_feature", "(", "value", ")", ":", "\n", "    ", "\"\"\"Returns a bytes_list from a string / byte (list).\"\"\"", "\n", "if", "isinstance", "(", "value", ",", "type", "(", "tf", ".", "constant", "(", "0", ")", ")", ")", ":", "\n", "        ", "value", "=", "value", ".", "numpy", "(", ")", "# BytesList won't unpack a string from an EagerTensor.", "\n", "", "return", "tf", ".", "train", ".", "Feature", "(", "bytes_list", "=", "tf", ".", "train", ".", "BytesList", "(", "value", "=", "value", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wmcnally_evopose2d.None.write_tfrecords._float_feature": [[18, 21], ["tensorflow.train.Feature", "tensorflow.train.FloatList"], "function", ["None"], ["", "def", "_float_feature", "(", "value", ")", ":", "\n", "    ", "\"\"\"Returns a float_list from a float / double (list).\"\"\"", "\n", "return", "tf", ".", "train", ".", "Feature", "(", "float_list", "=", "tf", ".", "train", ".", "FloatList", "(", "value", "=", "value", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wmcnally_evopose2d.None.write_tfrecords._int64_feature": [[23, 26], ["tensorflow.train.Feature", "tensorflow.train.Int64List"], "function", ["None"], ["", "def", "_int64_feature", "(", "value", ")", ":", "\n", "    ", "\"\"\"Returns an int64_list from a bool / enum / int / uint (list).\"\"\"", "\n", "return", "tf", ".", "train", ".", "Feature", "(", "int64_list", "=", "tf", ".", "train", ".", "Int64List", "(", "value", "=", "value", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wmcnally_evopose2d.None.write_tfrecords.tf_example": [[28, 37], ["open().read", "write_tfrecords._bytes_feature", "write_tfrecords._float_feature", "write_tfrecords._int64_feature", "write_tfrecords._int64_feature", "write_tfrecords._float_feature", "tensorflow.train.Example", "open", "tensorflow.train.Features"], "function", ["home.repos.pwc.inspect_result.wmcnally_evopose2d.None.write_tfrecords._bytes_feature", "home.repos.pwc.inspect_result.wmcnally_evopose2d.None.write_tfrecords._float_feature", "home.repos.pwc.inspect_result.wmcnally_evopose2d.None.write_tfrecords._int64_feature", "home.repos.pwc.inspect_result.wmcnally_evopose2d.None.write_tfrecords._int64_feature", "home.repos.pwc.inspect_result.wmcnally_evopose2d.None.write_tfrecords._float_feature"], ["", "def", "tf_example", "(", "sample_dict", ")", ":", "\n", "    ", "features", "=", "{", "}", "\n", "image_raw", "=", "open", "(", "sample_dict", "[", "'img_path'", "]", ",", "'rb'", ")", ".", "read", "(", ")", "\n", "features", "[", "'image_raw'", "]", "=", "_bytes_feature", "(", "[", "image_raw", "]", ")", "\n", "features", "[", "'bbox'", "]", "=", "_float_feature", "(", "sample_dict", "[", "'bbox'", "]", ")", "\n", "features", "[", "'img_id'", "]", "=", "_int64_feature", "(", "[", "sample_dict", "[", "'img_id'", "]", "]", ")", "\n", "features", "[", "'joints'", "]", "=", "_int64_feature", "(", "sample_dict", "[", "'joints'", "]", ")", "\n", "features", "[", "'score'", "]", "=", "_float_feature", "(", "[", "sample_dict", "[", "'score'", "]", "]", ")", "\n", "return", "tf", ".", "train", ".", "Example", "(", "features", "=", "tf", ".", "train", ".", "Features", "(", "feature", "=", "features", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wmcnally_evopose2d.None.write_tfrecords.load_data": [[39, 92], ["pycocotools.coco.COCO", "pycocotools.coco.COCO.anns.keys", "json.load", "annot_path.split", "numpy.max", "numpy.max", "numpy.min", "numpy.min", "dict", "data.append", "open", "dict", "data.append", "pycocotools.coco.COCO.loadImgs", "os.join", "os.join", "numpy.sum", "numpy.max", "numpy.max", "range"], "function", ["None"], ["", "def", "load_data", "(", "annot_path", ",", "det_path", "=", "None", ",", "split", "=", "'train'", ")", ":", "\n", "\n", "    ", "coco", "=", "COCO", "(", "annot_path", ")", "\n", "coco_path", "=", "'/'", ".", "join", "(", "annot_path", ".", "split", "(", "'/'", ")", "[", ":", "-", "2", "]", ")", "\n", "\n", "data", "=", "[", "]", "\n", "\n", "if", "det_path", "is", "None", ":", "\n", "        ", "for", "aid", "in", "coco", ".", "anns", ".", "keys", "(", ")", ":", "\n", "            ", "ann", "=", "coco", ".", "anns", "[", "aid", "]", "\n", "joints", "=", "ann", "[", "'keypoints'", "]", "\n", "if", "split", "==", "'train'", ":", "\n", "                ", "if", "(", "ann", "[", "'image_id'", "]", "not", "in", "coco", ".", "imgs", ")", "or", "ann", "[", "'iscrowd'", "]", "or", "(", "np", ".", "sum", "(", "joints", "[", "2", ":", ":", "3", "]", ")", "==", "0", ")", "or", "(", "\n", "ann", "[", "'num_keypoints'", "]", "==", "0", ")", ":", "\n", "                    ", "continue", "\n", "", "", "else", ":", "\n", "                ", "if", "ann", "[", "'image_id'", "]", "not", "in", "coco", ".", "imgs", ":", "\n", "                    ", "continue", "\n", "", "", "img_name", "=", "'{}2017/'", ".", "format", "(", "split", ")", "+", "coco", ".", "imgs", "[", "ann", "[", "'image_id'", "]", "]", "[", "'file_name'", "]", "\n", "\n", "# sanitize bboxes", "\n", "x", ",", "y", ",", "w", ",", "h", "=", "ann", "[", "'bbox'", "]", "\n", "img", "=", "coco", ".", "loadImgs", "(", "ann", "[", "'image_id'", "]", ")", "[", "0", "]", "\n", "width", ",", "height", "=", "img", "[", "'width'", "]", ",", "img", "[", "'height'", "]", "\n", "x1", "=", "np", ".", "max", "(", "(", "0", ",", "x", ")", ")", "\n", "y1", "=", "np", ".", "max", "(", "(", "0", ",", "y", ")", ")", "\n", "x2", "=", "np", ".", "min", "(", "(", "width", "-", "1", ",", "x1", "+", "np", ".", "max", "(", "(", "0", ",", "w", "-", "1", ")", ")", ")", ")", "\n", "y2", "=", "np", ".", "min", "(", "(", "height", "-", "1", ",", "y1", "+", "np", ".", "max", "(", "(", "0", ",", "h", "-", "1", ")", ")", ")", ")", "\n", "if", "ann", "[", "'area'", "]", ">", "0", "and", "x2", ">=", "x1", "and", "y2", ">=", "y1", ":", "\n", "                ", "bbox", "=", "[", "x1", ",", "y1", ",", "x2", "-", "x1", ",", "y2", "-", "y1", "]", "\n", "", "else", ":", "\n", "                ", "continue", "\n", "\n", "", "d", "=", "dict", "(", "img_id", "=", "ann", "[", "'image_id'", "]", ",", "\n", "img_path", "=", "osp", ".", "join", "(", "coco_path", ",", "'images'", ",", "img_name", ")", ",", "\n", "bbox", "=", "bbox", ",", "\n", "joints", "=", "joints", ",", "\n", "score", "=", "1", ")", "\n", "data", ".", "append", "(", "d", ")", "\n", "", "", "else", ":", "\n", "        ", "dets", "=", "json", ".", "load", "(", "open", "(", "det_path", ")", ")", "\n", "for", "det", "in", "dets", ":", "\n", "            ", "if", "det", "[", "'image_id'", "]", "not", "in", "coco", ".", "imgs", "or", "det", "[", "'category_id'", "]", "!=", "1", ":", "\n", "                ", "continue", "\n", "", "img_name", "=", "'{}2017/'", ".", "format", "(", "split", ")", "+", "coco", ".", "imgs", "[", "det", "[", "'image_id'", "]", "]", "[", "'file_name'", "]", "\n", "d", "=", "dict", "(", "img_id", "=", "det", "[", "'image_id'", "]", ",", "\n", "img_path", "=", "osp", ".", "join", "(", "coco_path", ",", "'images'", ",", "img_name", ")", ",", "\n", "bbox", "=", "det", "[", "'bbox'", "]", ",", "\n", "joints", "=", "[", "0", "for", "_", "in", "range", "(", "17", "*", "3", ")", "]", ",", "\n", "score", "=", "det", "[", "'score'", "]", ")", "\n", "data", ".", "append", "(", "d", ")", "\n", "\n", "", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.wmcnally_evopose2d.None.lr_schedules.WarmupCosineDecay.__init__": [[49, 75], ["tensorflow.keras.optimizers.schedules.LearningRateSchedule.__init__"], "methods", ["home.repos.pwc.inspect_result.wmcnally_evopose2d.None.lr_schedules.WarmupPiecewise.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "initial_learning_rate", ",", "\n", "decay_steps", ",", "\n", "warmup_steps", ",", "\n", "warmup_factor", ",", "\n", "alpha", "=", "0.0", ",", "\n", "name", "=", "None", ")", ":", "\n", "        ", "\"\"\"Applies cosine decay to the learning rate.\n        Args:\n          initial_learning_rate: A scalar `float32` or `float64` Tensor or a\n            Python number. The initial learning rate.\n          decay_steps: A scalar `int32` or `int64` `Tensor` or a Python number.\n            Number of steps to decay over.\n          alpha: A scalar `float32` or `float64` Tensor or a Python number.\n            Minimum learning rate value as a fraction of initial_learning_rate.\n          name: String. Optional name of the operation.  Defaults to 'CosineDecay'.\n        \"\"\"", "\n", "super", "(", "WarmupCosineDecay", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "initial_learning_rate", "=", "initial_learning_rate", "\n", "self", ".", "decay_steps", "=", "decay_steps", "\n", "self", ".", "warmup_steps", "=", "warmup_steps", "\n", "self", ".", "warmup_factor", "=", "warmup_factor", "\n", "self", ".", "alpha", "=", "alpha", "\n", "self", ".", "name", "=", "name", "\n", "\n"]], "home.repos.pwc.inspect_result.wmcnally_evopose2d.None.lr_schedules.WarmupCosineDecay.__call__": [[76, 104], ["tensorflow.python.framework.ops.name_scope_v2", "tensorflow.python.framework.ops.convert_to_tensor_v2", "tensorflow.python.ops.math_ops.cast", "tensorflow.python.ops.math_ops.cast", "tensorflow.python.ops.math_ops.cast", "tensorflow.python.ops.math_ops.cast", "tensorflow.python.ops.math_ops.minimum", "tensorflow.python.ops.control_flow_ops.cond", "tensorflow.python.ops.math_ops.multiply", "tensorflow.python.ops.math_ops.less", "lr_schedules.WarmupCosineDecay.__call__.compute_step"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "step", ")", ":", "\n", "        ", "with", "ops", ".", "name_scope_v2", "(", "self", ".", "name", "or", "\"WarmupCosineDecay\"", ")", ":", "\n", "            ", "initial_learning_rate", "=", "ops", ".", "convert_to_tensor_v2", "(", "\n", "self", ".", "initial_learning_rate", ",", "name", "=", "\"initial_learning_rate\"", ")", "\n", "dtype", "=", "initial_learning_rate", ".", "dtype", "\n", "decay_steps", "=", "math_ops", ".", "cast", "(", "self", ".", "decay_steps", ",", "dtype", ")", "\n", "warmup_steps", "=", "math_ops", ".", "cast", "(", "self", ".", "warmup_steps", ",", "dtype", ")", "\n", "w_fac", "=", "math_ops", ".", "cast", "(", "self", ".", "warmup_factor", ",", "dtype", ")", "\n", "\n", "global_step_recomp", "=", "math_ops", ".", "cast", "(", "step", ",", "dtype", ")", "\n", "global_step_recomp", "=", "math_ops", ".", "minimum", "(", "global_step_recomp", ",", "decay_steps", ")", "\n", "\n", "def", "compute_step", "(", "warming_up", "=", "False", ")", ":", "\n", "                ", "if", "warming_up", ":", "\n", "                    ", "completed_fraction", "=", "global_step_recomp", "/", "warmup_steps", "\n", "gain", "=", "w_fac", "+", "(", "1", "-", "w_fac", ")", "*", "completed_fraction", "\n", "", "else", ":", "\n", "                    ", "completed_fraction", "=", "(", "global_step_recomp", "-", "warmup_steps", ")", "/", "(", "decay_steps", "-", "warmup_steps", ")", "\n", "cosine_decayed", "=", "0.5", "*", "(", "1.0", "+", "math_ops", ".", "cos", "(", "\n", "constant_op", ".", "constant", "(", "math", ".", "pi", ")", "*", "completed_fraction", ")", ")", "\n", "gain", "=", "(", "1", "-", "self", ".", "alpha", ")", "*", "cosine_decayed", "+", "self", ".", "alpha", "\n", "", "return", "gain", "\n", "\n", "", "gain", "=", "control_flow_ops", ".", "cond", "(", "math_ops", ".", "less", "(", "global_step_recomp", ",", "warmup_steps", ")", ",", "\n", "lambda", ":", "compute_step", "(", "warming_up", "=", "True", ")", ",", "\n", "lambda", ":", "compute_step", "(", "warming_up", "=", "False", ")", ")", "\n", "\n", "return", "math_ops", ".", "multiply", "(", "initial_learning_rate", ",", "gain", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wmcnally_evopose2d.None.lr_schedules.WarmupCosineDecay.get_config": [[105, 113], ["None"], "methods", ["None"], ["", "", "def", "get_config", "(", "self", ")", ":", "\n", "        ", "return", "{", "\n", "\"initial_learning_rate\"", ":", "self", ".", "initial_learning_rate", ",", "\n", "\"decay_steps\"", ":", "self", ".", "decay_steps", ",", "\n", "\"warmup_steps\"", ":", "self", ".", "warmup_steps", ",", "\n", "\"warmup_factor\"", ":", "self", ".", "warmup_factor", ",", "\n", "\"alpha\"", ":", "self", ".", "alpha", ",", "\n", "\"name\"", ":", "self", ".", "name", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.wmcnally_evopose2d.None.lr_schedules.WarmupPiecewise.__init__": [[146, 180], ["tensorflow.keras.optimizers.schedules.LearningRateSchedule.__init__", "len", "ValueError", "len"], "methods", ["home.repos.pwc.inspect_result.wmcnally_evopose2d.None.lr_schedules.WarmupPiecewise.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "boundaries", ",", "\n", "values", ",", "\n", "warmup_steps", ",", "\n", "warmup_factor", ",", "\n", "gradual", "=", "True", ",", "\n", "name", "=", "None", ")", ":", "\n", "        ", "\"\"\"Piecewise constant from boundaries and interval values.\n        Args:\n          boundaries: A list of `Tensor`s or `int`s or `float`s with strictly\n            increasing entries, and with all elements having the same type as the\n            optimizer step.\n          values: A list of `Tensor`s or `float`s or `int`s that specifies the\n            values for the intervals defined by `boundaries`. It should have one\n            more element than `boundaries`, and all elements should have the same\n            type.\n          name: A string. Optional name of the operation. Defaults to\n            'PiecewiseConstant'.\n        Raises:\n          ValueError: if the number of elements in the lists do not match.\n        \"\"\"", "\n", "super", "(", "WarmupPiecewise", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "if", "len", "(", "boundaries", ")", "!=", "len", "(", "values", ")", "-", "1", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"The length of boundaries should be 1 less than the length of values\"", ")", "\n", "\n", "", "self", ".", "boundaries", "=", "boundaries", "\n", "self", ".", "values", "=", "values", "\n", "self", ".", "name", "=", "name", "\n", "self", ".", "warmup_steps", "=", "warmup_steps", "\n", "self", ".", "warmup_factor", "=", "warmup_factor", "\n", "self", ".", "gradual", "=", "gradual", "\n", "\n"]], "home.repos.pwc.inspect_result.wmcnally_evopose2d.None.lr_schedules.WarmupPiecewise.__call__": [[181, 226], ["tensorflow.python.framework.ops.name_scope_v2", "tensorflow.python.framework.ops.convert_n_to_tensor", "tensorflow.python.framework.ops.convert_n_to_tensor", "tensorflow.python.framework.ops.convert_to_tensor_v2", "tensorflow.python.ops.math_ops.cast", "tensorflow.python.ops.math_ops.cast", "tensorflow.python.ops.math_ops.cast", "enumerate", "tensorflow.python.ops.control_flow_ops.cond", "pred_fn_pairs.append", "pred_fn_pairs.append", "zip", "tensorflow.python.ops.control_flow_ops.case", "tensorflow.python.ops.math_ops.less", "tensorflow.python.ops.math_ops.cast", "pred_fn_pairs.append", "tensorflow.python.ops.math_ops.multiply", "lr_schedules.WarmupPiecewise.__call__.compute_piecewise"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "step", ")", ":", "\n", "        ", "with", "ops", ".", "name_scope_v2", "(", "self", ".", "name", "or", "\"WarmupPiecewise\"", ")", ":", "\n", "            ", "boundaries", "=", "ops", ".", "convert_n_to_tensor", "(", "self", ".", "boundaries", ")", "\n", "values", "=", "ops", ".", "convert_n_to_tensor", "(", "self", ".", "values", ")", "\n", "x_recomp", "=", "ops", ".", "convert_to_tensor_v2", "(", "step", ")", "\n", "\n", "# convert all data types to float", "\n", "x_recomp", "=", "math_ops", ".", "cast", "(", "x_recomp", ",", "values", "[", "0", "]", ".", "dtype", ")", "\n", "warmup_steps", "=", "math_ops", ".", "cast", "(", "self", ".", "warmup_steps", ",", "values", "[", "0", "]", ".", "dtype", ")", "\n", "w_fac", "=", "math_ops", ".", "cast", "(", "self", ".", "warmup_factor", ",", "values", "[", "0", "]", ".", "dtype", ")", "\n", "\n", "for", "i", ",", "b", "in", "enumerate", "(", "boundaries", ")", ":", "\n", "                ", "if", "b", ".", "dtype", ".", "base_dtype", "!=", "x_recomp", ".", "dtype", ".", "base_dtype", ":", "\n", "# We cast the boundaries to have the same type as the step", "\n", "                    ", "b", "=", "math_ops", ".", "cast", "(", "b", ",", "x_recomp", ".", "dtype", ".", "base_dtype", ")", "\n", "boundaries", "[", "i", "]", "=", "b", "\n", "\n", "", "", "def", "compute_piecewise", "(", ")", ":", "\n", "                ", "pred_fn_pairs", "=", "[", "]", "\n", "pred_fn_pairs", ".", "append", "(", "(", "x_recomp", "<=", "boundaries", "[", "0", "]", ",", "lambda", ":", "values", "[", "0", "]", ")", ")", "\n", "pred_fn_pairs", ".", "append", "(", "(", "x_recomp", ">", "boundaries", "[", "-", "1", "]", ",", "lambda", ":", "values", "[", "-", "1", "]", ")", ")", "\n", "for", "low", ",", "high", ",", "v", "in", "zip", "(", "boundaries", "[", ":", "-", "1", "]", ",", "boundaries", "[", "1", ":", "]", ",", "values", "[", "1", ":", "-", "1", "]", ")", ":", "\n", "# Need to bind v here; can do this with lambda v=v: ...", "\n", "                    ", "pred", "=", "(", "x_recomp", ">", "low", ")", "&", "(", "x_recomp", "<=", "high", ")", "\n", "pred_fn_pairs", ".", "append", "(", "(", "pred", ",", "lambda", "v", "=", "v", ":", "v", ")", ")", "\n", "\n", "# The default isn't needed here because our conditions are mutually", "\n", "# exclusive and exhaustive, but tf.case requires it.", "\n", "", "default", "=", "lambda", ":", "values", "[", "0", "]", "\n", "return", "control_flow_ops", ".", "case", "(", "pred_fn_pairs", ",", "default", ",", "exclusive", "=", "True", ")", "\n", "\n", "", "def", "compute_step", "(", "warming_up", "=", "False", ")", ":", "\n", "                ", "if", "warming_up", ":", "\n", "                    ", "completed_fraction", "=", "x_recomp", "/", "warmup_steps", "\n", "if", "self", ".", "gradual", ":", "\n", "                        ", "gain", "=", "w_fac", "+", "(", "1", "-", "w_fac", ")", "*", "completed_fraction", "\n", "", "else", ":", "\n", "                        ", "gain", "=", "w_fac", "\n", "", "return", "math_ops", ".", "multiply", "(", "values", "[", "0", "]", ",", "gain", ")", "\n", "", "else", ":", "\n", "                    ", "return", "compute_piecewise", "(", ")", "\n", "\n", "", "", "return", "control_flow_ops", ".", "cond", "(", "math_ops", ".", "less", "(", "x_recomp", ",", "warmup_steps", ")", ",", "\n", "lambda", ":", "compute_step", "(", "warming_up", "=", "True", ")", ",", "\n", "lambda", ":", "compute_step", "(", "warming_up", "=", "False", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wmcnally_evopose2d.None.lr_schedules.WarmupPiecewise.get_config": [[228, 235], ["None"], "methods", ["None"], ["", "", "def", "get_config", "(", "self", ")", ":", "\n", "        ", "return", "{", "\n", "\"boundaries\"", ":", "self", ".", "boundaries", ",", "\n", "\"values\"", ":", "self", ".", "values", ",", "\n", "\"warmup_steps\"", ":", "self", ".", "warmup_steps", ",", "\n", "\"warmup_factor\"", ":", "self", ".", "warmup_factor", ",", "\n", "\"name\"", ":", "self", ".", "name", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.wmcnally_evopose2d.None.utils.suppress_stdout": [[14, 23], ["open"], "function", ["None"], ["@", "contextmanager", "\n", "def", "suppress_stdout", "(", ")", ":", "\n", "    ", "with", "open", "(", "os", ".", "devnull", ",", "\"w\"", ")", "as", "devnull", ":", "\n", "        ", "old_stdout", "=", "sys", ".", "stdout", "\n", "sys", ".", "stdout", "=", "devnull", "\n", "try", ":", "\n", "            ", "yield", "\n", "", "finally", ":", "\n", "            ", "sys", ".", "stdout", "=", "old_stdout", "\n", "\n"]], "home.repos.pwc.inspect_result.wmcnally_evopose2d.None.utils.detect_hardware": [[25, 49], ["print", "tensorflow.distribute.cluster_resolver.TPUClusterResolver", "tensorflow.config.experimental_connect_to_cluster", "tensorflow.tpu.experimental.initialize_tpu_system", "tensorflow.distribute.TPUStrategy", "print", "tensorflow.config.experimental.list_logical_devices", "len", "tensorflow.distribute.MirroredStrategy", "print", "tf.distribute.cluster_resolver.TPUClusterResolver.cluster_spec().as_dict", "len", "tensorflow.distribute.get_strategy", "print", "tensorflow.distribute.get_strategy", "print", "tf.distribute.cluster_resolver.TPUClusterResolver.cluster_spec"], "function", ["None"], ["", "", "", "def", "detect_hardware", "(", "tpu_name", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "tpu", "=", "tf", ".", "distribute", ".", "cluster_resolver", ".", "TPUClusterResolver", "(", "tpu", "=", "tpu_name", ")", "# TPU detection", "\n", "", "except", "ValueError", ":", "\n", "        ", "tpu", "=", "None", "\n", "gpus", "=", "tf", ".", "config", ".", "experimental", ".", "list_logical_devices", "(", "\"GPU\"", ")", "\n", "\n", "# Select appropriate distribution strategy", "\n", "", "if", "tpu", ":", "\n", "        ", "tf", ".", "config", ".", "experimental_connect_to_cluster", "(", "tpu", ")", "\n", "tf", ".", "tpu", ".", "experimental", ".", "initialize_tpu_system", "(", "tpu", ")", "\n", "strategy", "=", "tf", ".", "distribute", ".", "TPUStrategy", "(", "tpu", ")", "\n", "print", "(", "'Running on TPU '", ",", "tpu", ".", "cluster_spec", "(", ")", ".", "as_dict", "(", ")", "[", "'worker'", "]", ")", "\n", "", "elif", "len", "(", "gpus", ")", ">", "1", ":", "\n", "        ", "strategy", "=", "tf", ".", "distribute", ".", "MirroredStrategy", "(", "[", "gpu", ".", "name", "for", "gpu", "in", "gpus", "]", ")", "\n", "print", "(", "'Running on multiple GPUs '", ",", "[", "gpu", ".", "name", "for", "gpu", "in", "gpus", "]", ")", "\n", "", "elif", "len", "(", "gpus", ")", "==", "1", ":", "\n", "        ", "strategy", "=", "tf", ".", "distribute", ".", "get_strategy", "(", ")", "# default strategy that works on CPU and single GPU", "\n", "print", "(", "'Running on single GPU '", ",", "gpus", "[", "0", "]", ".", "name", ")", "\n", "", "else", ":", "\n", "        ", "strategy", "=", "tf", ".", "distribute", ".", "get_strategy", "(", ")", "# default strategy that works on CPU and single GPU", "\n", "print", "(", "'Running on CPU'", ")", "\n", "", "print", "(", "\"Number of accelerators: \"", ",", "strategy", ".", "num_replicas_in_sync", ")", "\n", "return", "tpu", ",", "strategy", "\n", "\n"]], "home.repos.pwc.inspect_result.wmcnally_evopose2d.None.utils.get_flops": [[51, 59], ["tensorflow.function", "tensorflow.python.profiler.option_builder.ProfileOptionBuilder.float_operation", "tensorflow.python.profiler.model_analyzer.profile", "tempfile.NamedTemporaryFile", "tf.function.get_concrete_function", "tensorflow.TensorSpec"], "function", ["None"], ["", "def", "get_flops", "(", "model", ",", "write_path", "=", "tempfile", ".", "NamedTemporaryFile", "(", ")", ".", "name", ")", ":", "\n", "    ", "forward_pass", "=", "tf", ".", "function", "(", "model", ".", "call", ",", "\n", "input_signature", "=", "[", "tf", ".", "TensorSpec", "(", "shape", "=", "(", "1", ",", ")", "+", "model", ".", "input_shape", "[", "1", ":", "]", ")", "]", ")", "\n", "opts", "=", "ProfileOptionBuilder", ".", "float_operation", "(", ")", "\n", "if", "write_path", ":", "\n", "        ", "opts", "[", "'output'", "]", "=", "'file:outfile={}'", ".", "format", "(", "write_path", ")", "\n", "", "graph_info", "=", "profile", "(", "forward_pass", ".", "get_concrete_function", "(", ")", ".", "graph", ",", "options", "=", "opts", ")", "\n", "return", "graph_info", ".", "total_float_ops", "\n", "\n"]], "home.repos.pwc.inspect_result.wmcnally_evopose2d.None.utils.add_regularization": [[61, 84], ["tensorflow.keras.regularizers.l2", "tf.keras.models.model_from_json.to_json", "os.path.join", "os.path.join", "tf.keras.models.model_from_json.save_weights", "tensorflow.keras.models.model_from_json", "tf.keras.models.model_from_json.load_weights", "isinstance", "print", "tempfile.gettempdir", "hasattr", "setattr"], "function", ["None"], ["", "def", "add_regularization", "(", "model", ",", "regularizer", "=", "tf", ".", "keras", ".", "regularizers", ".", "l2", "(", "0.0001", ")", ")", ":", "\n", "    ", "if", "not", "isinstance", "(", "regularizer", ",", "tf", ".", "keras", ".", "regularizers", ".", "Regularizer", ")", ":", "\n", "        ", "print", "(", "\"Regularizer must be a subclass of tf.keras.regularizers.Regularizer\"", ")", "\n", "return", "model", "\n", "\n", "", "for", "layer", "in", "model", ".", "layers", ":", "\n", "        ", "for", "attr", "in", "[", "'kernel_regularizer'", "]", ":", "\n", "            ", "if", "hasattr", "(", "layer", ",", "attr", ")", ":", "\n", "                ", "setattr", "(", "layer", ",", "attr", ",", "regularizer", ")", "\n", "\n", "# When we change the layers attributes, the change only happens in the model config file", "\n", "", "", "", "model_json", "=", "model", ".", "to_json", "(", ")", "\n", "\n", "# Save the weights before reloading the model.", "\n", "tmp_weights_path", "=", "os", ".", "path", ".", "join", "(", "tempfile", ".", "gettempdir", "(", ")", ",", "'tmp_weights.h5'", ")", "\n", "model", ".", "save_weights", "(", "tmp_weights_path", ")", "\n", "\n", "# load the model from the config", "\n", "model", "=", "tf", ".", "keras", ".", "models", ".", "model_from_json", "(", "model_json", ")", "\n", "\n", "# Reload the model weights", "\n", "model", ".", "load_weights", "(", "tmp_weights_path", ",", "by_name", "=", "True", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.wmcnally_evopose2d.None.utils.partial_weight_transfer": [[86, 163], ["child_layer.get_weights", "enumerate", "child_layer.set_weights", "print", "len", "print", "len", "numpy.zeros", "numpy.concatenate", "len", "numpy.zeros", "numpy.mean", "numpy.concatenate"], "function", ["None"], ["", "def", "partial_weight_transfer", "(", "child_layer", ",", "parent_weights", ",", "disp", ")", ":", "\n", "    ", "child_weights", "=", "child_layer", ".", "get_weights", "(", ")", "\n", "for", "i", ",", "child_weight", "in", "enumerate", "(", "child_weights", ")", ":", "\n", "        ", "parent_weight", "=", "parent_weights", "[", "i", "]", "\n", "\n", "if", "disp", ":", "\n", "            ", "print", "(", "'Transferring partial weights for layer {}: {} -> {}'", ".", "format", "(", "\n", "child_layer", ".", "name", ",", "parent_weight", ".", "shape", ",", "child_weight", ".", "shape", ")", ")", "\n", "\n", "# CONVOLUTION", "\n", "", "if", "len", "(", "child_weight", ".", "shape", ")", "==", "4", ":", "\n", "# (child kernel size, input channels child, output channels child), ...", "\n", "            ", "(", "kc", ",", "icc", ",", "occ", ")", ",", "(", "kp", ",", "icp", ",", "ocp", ")", "=", "child_weight", ".", "shape", "[", "1", ":", "]", ",", "parent_weight", ".", "shape", "[", "1", ":", "]", "\n", "\n", "if", "(", "icc", ">", "icp", "and", "occ", ">", "ocp", ")", "or", "(", "icc", ">", "icp", "and", "occ", "==", "ocp", ")", "or", "(", "\n", "icc", "==", "icp", "and", "occ", ">", "ocp", ")", ":", "\n", "                ", "if", "kc", "==", "kp", ":", "\n", "                    ", "child_weights", "[", "i", "]", "[", ":", ",", ":", ",", ":", "icp", ",", ":", "ocp", "]", "=", "parent_weight", "\n", "", "elif", "kc", "<", "kp", ":", "\n", "                    ", "p", "=", "(", "kp", "-", "kc", ")", "//", "2", "# pad", "\n", "child_weights", "[", "i", "]", "[", ":", ",", ":", ",", ":", "icp", ",", ":", "ocp", "]", "=", "parent_weight", "[", "p", ":", "p", "+", "kc", ",", "p", ":", "p", "+", "kc", ",", ":", ",", ":", "]", "\n", "", "elif", "kc", ">", "kp", ":", "\n", "                    ", "p", "=", "(", "kc", "-", "kp", ")", "//", "2", "\n", "child_weights", "[", "i", "]", "[", "p", ":", "p", "+", "kp", ",", "p", ":", "p", "+", "kp", ",", ":", "icp", ",", ":", "ocp", "]", "=", "parent_weight", "\n", "\n", "", "", "elif", "(", "icc", "<", "icp", "and", "occ", ">", "ocp", ")", "or", "(", "icc", "<", "icp", "and", "occ", "==", "ocp", ")", ":", "\n", "                ", "if", "kc", "==", "kp", ":", "\n", "                    ", "child_weights", "[", "i", "]", "[", ":", ",", ":", ",", ":", ",", ":", "ocp", "]", "=", "parent_weight", "[", ":", ",", ":", ",", ":", "icc", ",", ":", "]", "\n", "", "elif", "kc", "<", "kp", ":", "\n", "                    ", "p", "=", "(", "kp", "-", "kc", ")", "//", "2", "# pad", "\n", "child_weights", "[", "i", "]", "[", ":", ",", ":", ",", ":", ",", ":", "ocp", "]", "=", "parent_weight", "[", "p", ":", "p", "+", "kc", ",", "p", ":", "p", "+", "kc", ",", ":", "icc", ",", ":", "]", "\n", "", "elif", "kc", ">", "kp", ":", "\n", "                    ", "p", "=", "(", "kc", "-", "kp", ")", "//", "2", "\n", "child_weights", "[", "i", "]", "[", "p", ":", "p", "+", "kp", ",", "p", ":", "p", "+", "kp", ",", ":", ",", ":", "ocp", "]", "=", "parent_weight", "[", ":", ",", ":", ",", ":", "icc", ",", ":", "]", "\n", "\n", "", "", "elif", "(", "icc", ">", "icp", "and", "occ", "<", "ocp", ")", "or", "(", "icc", "==", "icp", "and", "occ", "<", "ocp", ")", ":", "\n", "                ", "if", "kc", "==", "kp", ":", "\n", "                    ", "child_weights", "[", "i", "]", "[", ":", ",", ":", ",", ":", "icp", ",", ":", "]", "=", "parent_weight", "[", ":", ",", ":", ",", ":", ",", ":", "occ", "]", "\n", "", "elif", "kc", "<", "kp", ":", "\n", "                    ", "p", "=", "(", "kp", "-", "kc", ")", "//", "2", "# pad", "\n", "child_weights", "[", "i", "]", "[", ":", ",", ":", ",", ":", "icp", ",", ":", "]", "=", "parent_weight", "[", "p", ":", "p", "+", "kc", ",", "p", ":", "p", "+", "kc", ",", ":", ",", ":", "occ", "]", "\n", "", "elif", "kc", ">", "kp", ":", "\n", "                    ", "p", "=", "(", "kc", "-", "kp", ")", "//", "2", "\n", "child_weights", "[", "i", "]", "[", "p", ":", "p", "+", "kp", ",", "p", ":", "p", "+", "kp", ",", ":", "icp", ",", ":", "]", "=", "parent_weight", "[", ":", ",", ":", ",", ":", ",", ":", "occ", "]", "\n", "\n", "", "", "elif", "icc", "<", "icp", "and", "occ", "<", "ocp", ":", "\n", "                ", "if", "kc", "==", "kp", ":", "\n", "                    ", "child_weights", "[", "i", "]", "=", "parent_weight", "[", ":", ",", ":", ",", ":", "icc", ",", ":", "occ", "]", "\n", "", "elif", "kc", "<", "kp", ":", "\n", "                    ", "p", "=", "(", "kp", "-", "kc", ")", "//", "2", "# pad", "\n", "child_weights", "[", "i", "]", "=", "parent_weight", "[", "p", ":", "p", "+", "kc", ",", "p", ":", "p", "+", "kc", ",", ":", "icc", ",", ":", "occ", "]", "\n", "", "elif", "kc", ">", "kp", ":", "\n", "                    ", "p", "=", "(", "kc", "-", "kp", ")", "//", "2", "\n", "child_weights", "[", "i", "]", "[", "p", ":", "p", "+", "kp", ",", "p", ":", "p", "+", "kp", ",", ":", ",", ":", "]", "=", "parent_weight", "[", ":", ",", ":", ",", ":", "icc", ",", ":", "occ", "]", "\n", "\n", "# DENSE", "\n", "", "", "", "elif", "len", "(", "child_weight", ".", "shape", ")", "==", "2", ":", "\n", "            ", "icc", ",", "icp", "=", "child_weight", ".", "shape", "[", "0", "]", ",", "parent_weight", ".", "shape", "[", "0", "]", "\n", "if", "icc", "<", "icp", ":", "\n", "                ", "child_weights", "[", "i", "]", "=", "parent_weight", "[", ":", "icc", ",", ":", "]", "\n", "", "else", ":", "\n", "                ", "weight_filler", "=", "np", ".", "zeros", "(", "(", "icc", "-", "icp", ",", "child_weight", ".", "shape", "[", "1", "]", ")", ")", "\n", "child_weights", "[", "i", "]", "=", "np", ".", "concatenate", "(", "(", "parent_weight", ",", "weight_filler", ")", ",", "axis", "=", "0", ")", "\n", "\n", "# BATCH NORM", "\n", "", "", "elif", "len", "(", "child_weight", ".", "shape", ")", "==", "1", ":", "\n", "            ", "icc", ",", "icp", "=", "child_weight", ".", "shape", "[", "0", "]", ",", "parent_weight", ".", "shape", "[", "0", "]", "\n", "if", "icc", "<", "icp", ":", "\n", "                ", "child_weights", "[", "i", "]", "=", "parent_weight", "[", ":", "icc", "]", "\n", "", "else", ":", "\n", "                ", "weight_filler", "=", "np", ".", "zeros", "(", "(", "icc", "-", "icp", ",", ")", ")", "\n", "weight_filler", "[", ":", "]", "=", "np", ".", "mean", "(", "parent_weight", ")", "\n", "child_weights", "[", "i", "]", "=", "np", ".", "concatenate", "(", "(", "parent_weight", ",", "weight_filler", ")", ",", "axis", "=", "0", ")", "\n", "", "", "", "try", ":", "\n", "        ", "child_layer", ".", "set_weights", "(", "child_weights", ")", "\n", "", "except", ":", "\n", "        ", "print", "(", "\"Partial weight transfer failed for '{}'\"", ".", "format", "(", "child_layer", ".", "name", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wmcnally_evopose2d.None.utils.get_models": [[165, 179], ["sorted", "os.listdir", "os.listdir", "sorted", "meta_files.extend", "saved_models.extend", "os.listdir", "os.listdir", "pickle.load", "os.join", "open", "os.join", "numpy.int", "m.split"], "function", ["None"], ["", "", "def", "get_models", "(", "run_dir", ")", ":", "\n", "    ", "meta_files", ",", "saved_models", ",", "genotypes", "=", "[", "]", ",", "[", "]", ",", "{", "}", "\n", "gens", "=", "sorted", "(", "os", ".", "listdir", "(", "run_dir", ")", ")", "\n", "gens", "=", "[", "g", "for", "g", "in", "gens", "if", "'.pkl'", "not", "in", "g", "]", "\n", "for", "g", "in", "gens", ":", "\n", "        ", "gen_models", "=", "sorted", "(", "os", ".", "listdir", "(", "osp", ".", "join", "(", "run_dir", ",", "g", ")", ")", ")", "\n", "gen_meta", "=", "[", "m", "for", "m", "in", "gen_models", "if", "'meta'", "in", "m", "]", "\n", "gen_models", "=", "[", "m", "for", "m", "in", "gen_models", "if", "'.h5'", "in", "m", "]", "\n", "meta_files", ".", "extend", "(", "gen_meta", ")", "\n", "saved_models", ".", "extend", "(", "gen_models", ")", "\n", "for", "m", "in", "gen_meta", ":", "\n", "            ", "meta_data", "=", "pickle", ".", "load", "(", "open", "(", "osp", ".", "join", "(", "run_dir", ",", "g", ",", "m", ")", ",", "'rb'", ")", ")", "\n", "genotypes", "[", "np", ".", "int", "(", "m", ".", "split", "(", "'_'", ")", "[", "1", "]", ")", "]", "=", "meta_data", "[", "'config'", "]", ".", "MODEL", ".", "GENOTYPE", "\n", "", "", "return", "meta_files", ",", "saved_models", ",", "genotypes", "\n", "", ""]], "home.repos.pwc.inspect_result.wmcnally_evopose2d.dataset.dataloader.parse_record": [[10, 25], ["tensorflow.io.parse_single_example", "tensorflow.image.decode_jpeg", "tensorflow.reshape", "tensorflow.io.FixedLenFeature", "tensorflow.io.FixedLenFeature", "tensorflow.io.FixedLenFeature", "tensorflow.io.FixedLenFeature", "tensorflow.io.FixedLenFeature"], "function", ["None"], ["def", "parse_record", "(", "record", ")", ":", "\n", "    ", "feature_description", "=", "{", "\n", "'image_raw'", ":", "tf", ".", "io", ".", "FixedLenFeature", "(", "[", "]", ",", "tf", ".", "string", ")", ",", "\n", "'img_id'", ":", "tf", ".", "io", ".", "FixedLenFeature", "(", "[", "]", ",", "tf", ".", "int64", ")", ",", "\n", "'bbox'", ":", "tf", ".", "io", ".", "FixedLenFeature", "(", "[", "4", ",", "]", ",", "tf", ".", "float32", ")", ",", "\n", "'joints'", ":", "tf", ".", "io", ".", "FixedLenFeature", "(", "[", "51", ",", "]", ",", "tf", ".", "int64", ")", ",", "\n", "'score'", ":", "tf", ".", "io", ".", "FixedLenFeature", "(", "[", "]", ",", "tf", ".", "float32", ")", "\n", "}", "\n", "example", "=", "tf", ".", "io", ".", "parse_single_example", "(", "record", ",", "feature_description", ")", "\n", "img_id", "=", "example", "[", "'img_id'", "]", "\n", "img", "=", "tf", ".", "image", ".", "decode_jpeg", "(", "example", "[", "'image_raw'", "]", ",", "channels", "=", "3", ")", "\n", "bbox", "=", "example", "[", "'bbox'", "]", "\n", "kp", "=", "tf", ".", "reshape", "(", "example", "[", "'joints'", "]", ",", "[", "-", "1", ",", "3", "]", ")", "\n", "score", "=", "example", "[", "'score'", "]", "\n", "return", "img_id", ",", "img", ",", "bbox", ",", "kp", ",", "score", "\n", "\n"]], "home.repos.pwc.inspect_result.wmcnally_evopose2d.dataset.dataloader.transform": [[27, 61], ["tensorflow.python.keras.layers.preprocessing.image_preprocessing.transform", "tensorflow.squeeze", "tensorflow.concat", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.cos", "tensorflow.sin", "tensorflow.cos", "tensorflow.sin", "tensorflow.sin", "tensorflow.cos", "tensorflow.sin", "tensorflow.sin", "tensorflow.cos", "tensorflow.cos"], "function", ["home.repos.pwc.inspect_result.wmcnally_evopose2d.dataset.dataloader.transform"], ["", "def", "transform", "(", "img", ",", "scale", ",", "angle", ",", "bbox_center", ",", "output_shape", ")", ":", "\n", "    ", "tx", "=", "bbox_center", "[", "0", "]", "-", "output_shape", "[", "1", "]", "*", "scale", "/", "2", "\n", "ty", "=", "bbox_center", "[", "1", "]", "-", "output_shape", "[", "0", "]", "*", "scale", "/", "2", "\n", "\n", "# for offsetting translations caused by rotation:", "\n", "# https://docs.opencv.org/2.4/modules/imgproc/doc/geometric_transformations.html", "\n", "rx", "=", "(", "1", "-", "tf", ".", "cos", "(", "angle", ")", ")", "*", "output_shape", "[", "1", "]", "*", "scale", "/", "2", "-", "tf", ".", "sin", "(", "angle", ")", "*", "output_shape", "[", "0", "]", "*", "scale", "/", "2", "\n", "ry", "=", "tf", ".", "sin", "(", "angle", ")", "*", "output_shape", "[", "1", "]", "*", "scale", "/", "2", "+", "(", "1", "-", "tf", ".", "cos", "(", "angle", ")", ")", "*", "output_shape", "[", "0", "]", "*", "scale", "/", "2", "\n", "\n", "transform", "=", "[", "scale", "*", "tf", ".", "cos", "(", "angle", ")", ",", "scale", "*", "tf", ".", "sin", "(", "angle", ")", ",", "rx", "+", "tx", ",", "\n", "-", "scale", "*", "tf", ".", "sin", "(", "angle", ")", ",", "scale", "*", "tf", ".", "cos", "(", "angle", ")", ",", "ry", "+", "ty", ",", "\n", "0.", ",", "0.", "]", "\n", "\n", "img", "=", "image_ops", ".", "transform", "(", "tf", ".", "expand_dims", "(", "img", ",", "axis", "=", "0", ")", ",", "\n", "tf", ".", "expand_dims", "(", "transform", ",", "axis", "=", "0", ")", ",", "\n", "fill_mode", "=", "'constant'", ",", "\n", "output_shape", "=", "output_shape", "[", ":", "2", "]", ")", "\n", "img", "=", "tf", ".", "squeeze", "(", "img", ")", "\n", "\n", "# transform for keypoints", "\n", "alpha", "=", "1", "/", "scale", "*", "tf", ".", "cos", "(", "-", "angle", ")", "\n", "beta", "=", "1", "/", "scale", "*", "tf", ".", "sin", "(", "-", "angle", ")", "\n", "\n", "rx_xy", "=", "(", "1", "-", "alpha", ")", "*", "bbox_center", "[", "0", "]", "-", "beta", "*", "bbox_center", "[", "1", "]", "\n", "ry_xy", "=", "beta", "*", "bbox_center", "[", "0", "]", "+", "(", "1", "-", "alpha", ")", "*", "bbox_center", "[", "1", "]", "\n", "\n", "transform_xy", "=", "[", "[", "alpha", ",", "beta", "]", ",", "\n", "[", "-", "beta", ",", "alpha", "]", "]", "\n", "\n", "tx_xy", "=", "bbox_center", "[", "0", "]", "-", "output_shape", "[", "1", "]", "/", "2", "\n", "ty_xy", "=", "bbox_center", "[", "1", "]", "-", "output_shape", "[", "0", "]", "/", "2", "\n", "\n", "M", "=", "tf", ".", "concat", "(", "[", "transform_xy", ",", "[", "[", "rx_xy", "-", "tx_xy", "]", ",", "[", "ry_xy", "-", "ty_xy", "]", "]", "]", ",", "axis", "=", "1", ")", "\n", "return", "img", ",", "M", "\n", "\n"]], "home.repos.pwc.inspect_result.wmcnally_evopose2d.dataset.dataloader.preprocess": [[63, 139], ["tensorflow.cast", "tensorflow.cast", "tensorflow.cast", "dataloader.transform", "tensorflow.cast", "tensorflow.concat", "tensorflow.gather", "tensorflow.stack", "tensorflow.math.reduce_sum", "tensorflow.clip_by_value", "tensorflow.transpose", "tensorflow.cast", "tensorflow.cast", "dataloader.half_body_transform", "tensorflow.random.uniform", "tensorflow.random.uniform", "tensorflow.cast", "tensorflow.concat", "tensorflow.gather", "tensorflow.cast", "tensorflow.matmul", "tensorflow.expand_dims", "tensorflow.random.normal", "tensorflow.stack", "tensorflow.random.normal", "tensorflow.clip_by_value", "tensorflow.shape", "tensorflow.expand_dims", "tensorflow.random.normal"], "function", ["home.repos.pwc.inspect_result.wmcnally_evopose2d.dataset.dataloader.transform", "home.repos.pwc.inspect_result.wmcnally_evopose2d.dataset.dataloader.half_body_transform"], ["", "def", "preprocess", "(", "id", ",", "img", ",", "bbox", ",", "kp", ",", "score", ",", "DATASET", ",", "split", "=", "'train'", ",", "predict_kp", "=", "False", ")", ":", "\n", "    ", "img", "=", "tf", ".", "cast", "(", "img", ",", "tf", ".", "float32", ")", "\n", "kp", "=", "tf", ".", "cast", "(", "kp", ",", "tf", ".", "float32", ")", "\n", "\n", "if", "DATASET", ".", "BGR", ":", "\n", "        ", "img", "=", "tf", ".", "gather", "(", "img", ",", "[", "2", ",", "1", ",", "0", "]", ",", "axis", "=", "-", "1", ")", "\n", "\n", "", "if", "DATASET", ".", "NORM", ":", "\n", "        ", "img", "/=", "255.", "\n", "if", "DATASET", ".", "BGR", ":", "\n", "            ", "img", "-=", "[", "[", "DATASET", ".", "MEANS", "[", ":", ":", "-", "1", "]", "]", "]", "\n", "img", "/=", "[", "[", "DATASET", ".", "STDS", "[", ":", ":", "-", "1", "]", "]", "]", "\n", "", "else", ":", "\n", "            ", "img", "-=", "[", "[", "DATASET", ".", "MEANS", "]", "]", "\n", "img", "/=", "[", "[", "DATASET", ".", "STDS", "]", "]", "\n", "\n", "", "", "x", ",", "y", ",", "w", ",", "h", "=", "bbox", "[", "0", "]", ",", "bbox", "[", "1", "]", ",", "bbox", "[", "2", "]", ",", "bbox", "[", "3", "]", "\n", "center", "=", "[", "x", "+", "w", "/", "2.", ",", "y", "+", "h", "/", "2.", "]", "\n", "center", "=", "tf", ".", "cast", "(", "tf", ".", "stack", "(", "center", ")", ",", "tf", ".", "float32", ")", "\n", "\n", "aspect_ratio", "=", "DATASET", ".", "INPUT_SHAPE", "[", "1", "]", "/", "DATASET", ".", "INPUT_SHAPE", "[", "0", "]", "\n", "if", "w", ">", "aspect_ratio", "*", "h", ":", "\n", "        ", "h", "=", "w", "/", "aspect_ratio", "\n", "", "scale", "=", "(", "h", "*", "1.25", ")", "/", "DATASET", ".", "INPUT_SHAPE", "[", "0", "]", "\n", "\n", "if", "split", "==", "'train'", ":", "\n", "# augmentation", "\n", "        ", "joint_vis", "=", "tf", ".", "math", ".", "reduce_sum", "(", "tf", ".", "cast", "(", "kp", "[", ":", ",", "2", "]", ">", "0", ",", "tf", ".", "int32", ")", ")", "\n", "if", "(", "joint_vis", ">", "DATASET", ".", "HALF_BODY_MIN_KP", "\n", "and", "tf", ".", "random", ".", "normal", "(", "[", "]", ")", "<", "DATASET", ".", "HALF_BODY_PROB", ")", ":", "\n", "            ", "center", ",", "scale", "=", "half_body_transform", "(", "kp", ",", "center", ",", "scale", ",", "DATASET", ")", "\n", "\n", "", "scale", "*=", "tf", ".", "clip_by_value", "(", "tf", ".", "random", ".", "normal", "(", "[", "]", ")", "*", "DATASET", ".", "SCALE_FACTOR", "+", "1", ",", "\n", "1", "-", "DATASET", ".", "SCALE_FACTOR", ",", "\n", "1", "+", "DATASET", ".", "SCALE_FACTOR", ")", "\n", "\n", "if", "tf", ".", "random", ".", "uniform", "(", "[", "]", ")", "<=", "DATASET", ".", "ROT_PROB", ":", "\n", "            ", "angle", "=", "tf", ".", "clip_by_value", "(", "tf", ".", "random", ".", "normal", "(", "[", "]", ")", "*", "DATASET", ".", "ROT_FACTOR", ",", "\n", "-", "2", "*", "DATASET", ".", "ROT_FACTOR", ",", "2", "*", "DATASET", ".", "ROT_FACTOR", ")", "/", "180", "*", "math", ".", "pi", "\n", "", "else", ":", "\n", "            ", "angle", "=", "0.", "\n", "\n", "", "if", "tf", ".", "random", ".", "uniform", "(", "[", "]", ")", "<=", "DATASET", ".", "FLIP_PROB", ":", "\n", "            ", "img_w", "=", "tf", ".", "cast", "(", "tf", ".", "shape", "(", "img", ")", "[", "1", "]", ",", "tf", ".", "float32", ")", "\n", "img", "=", "img", "[", ":", ",", ":", ":", "-", "1", ",", ":", "]", "\n", "center_x", "=", "img_w", "-", "1", "-", "center", "[", "0", "]", "\n", "kp_x", "=", "img_w", "-", "1", "-", "kp", "[", ":", ",", "0", "]", "\n", "kp", "=", "tf", ".", "concat", "(", "[", "tf", ".", "expand_dims", "(", "kp_x", ",", "axis", "=", "1", ")", ",", "kp", "[", ":", ",", "1", ":", "]", "]", ",", "axis", "=", "-", "1", ")", "\n", "kp", "=", "tf", ".", "gather", "(", "kp", ",", "DATASET", ".", "KP_FLIP", ",", "axis", "=", "0", ")", "\n", "center", "=", "[", "center_x", ",", "center", "[", "1", "]", "]", "\n", "center", "=", "tf", ".", "cast", "(", "tf", ".", "stack", "(", "center", ")", ",", "tf", ".", "float32", ")", "\n", "", "", "else", ":", "\n", "        ", "angle", "=", "0.", "\n", "\n", "", "img", ",", "M", "=", "transform", "(", "img", ",", "scale", ",", "angle", ",", "center", ",", "DATASET", ".", "INPUT_SHAPE", "[", ":", "2", "]", ")", "\n", "\n", "xy", "=", "kp", "[", ":", ",", ":", "2", "]", "\n", "xy", "=", "tf", ".", "transpose", "(", "tf", ".", "matmul", "(", "M", "[", ":", ",", ":", "2", "]", ",", "xy", ",", "transpose_b", "=", "True", ")", ")", "+", "M", "[", ":", ",", "-", "1", "]", "\n", "\n", "# adjust visibility if coordinates are outside crop", "\n", "vis", "=", "kp", "[", ":", ",", "2", "]", "\n", "vis", "*=", "tf", ".", "cast", "(", "(", "\n", "(", "xy", "[", ":", ",", "0", "]", ">=", "0", ")", "&", "\n", "(", "xy", "[", ":", ",", "0", "]", "<", "DATASET", ".", "INPUT_SHAPE", "[", "1", "]", ")", "&", "\n", "(", "xy", "[", ":", ",", "1", "]", ">=", "0", ")", "&", "\n", "(", "xy", "[", ":", ",", "1", "]", "<", "DATASET", ".", "INPUT_SHAPE", "[", "0", "]", ")", ")", ",", "tf", ".", "float32", ")", "\n", "\n", "kp", "=", "tf", ".", "concat", "(", "[", "xy", ",", "tf", ".", "expand_dims", "(", "vis", ",", "axis", "=", "1", ")", "]", ",", "axis", "=", "1", ")", "\n", "\n", "if", "DATASET", ".", "BFLOAT16", ":", "\n", "        ", "img", "=", "tf", ".", "cast", "(", "img", ",", "tf", ".", "bfloat16", ")", "\n", "\n", "", "if", "predict_kp", ":", "\n", "        ", "return", "id", ",", "img", ",", "kp", ",", "M", ",", "score", "\n", "", "else", ":", "\n", "        ", "return", "img", ",", "kp", "\n", "\n"]], "home.repos.pwc.inspect_result.wmcnally_evopose2d.dataset.dataloader.half_body_transform": [[141, 169], ["numpy.zeros", "tensorflow.cast", "tensorflow.math.logical_not", "tensorflow.math.logical_and", "tensorflow.math.logical_and", "tensorflow.boolean_mask", "tensorflow.boolean_mask", "tensorflow.reduce_mean", "tensorflow.math.reduce_min", "tensorflow.math.reduce_max", "tensorflow.stack", "tensorflow.random.uniform", "tensorflow.shape", "tensorflow.shape", "tensorflow.shape"], "function", ["None"], ["", "", "def", "half_body_transform", "(", "joints", ",", "center", ",", "scale", ",", "DATASET", ")", ":", "\n", "    ", "vis_mask", "=", "joints", "[", ":", ",", "2", "]", ">", "0", "\n", "upper_body_mask", "=", "np", ".", "zeros", "(", "DATASET", ".", "OUTPUT_SHAPE", "[", "-", "1", "]", ")", "\n", "upper_body_mask", "[", "DATASET", ".", "KP_UPPER", "]", "=", "1", "\n", "upper_body_mask", "=", "tf", ".", "cast", "(", "tf", ".", "stack", "(", "upper_body_mask", ")", ",", "tf", ".", "bool", ")", "\n", "lower_body_mask", "=", "tf", ".", "math", ".", "logical_not", "(", "upper_body_mask", ")", "\n", "lower_body_mask", "=", "tf", ".", "math", ".", "logical_and", "(", "lower_body_mask", ",", "vis_mask", ")", "\n", "upper_body_mask", "=", "tf", ".", "math", ".", "logical_and", "(", "upper_body_mask", ",", "vis_mask", ")", "\n", "upper", "=", "tf", ".", "boolean_mask", "(", "joints", ",", "upper_body_mask", ")", "\n", "lower", "=", "tf", ".", "boolean_mask", "(", "joints", ",", "lower_body_mask", ")", "\n", "if", "tf", ".", "random", ".", "uniform", "(", "[", "]", ")", "<", "0.5", "and", "tf", ".", "shape", "(", "upper", ")", "[", "0", "]", ">", "2", ":", "\n", "        ", "selected_joints", "=", "upper", "\n", "", "else", ":", "\n", "        ", "selected_joints", "=", "lower", "if", "tf", ".", "shape", "(", "upper", ")", "[", "0", "]", ">", "2", "else", "upper", "\n", "\n", "", "if", "tf", ".", "shape", "(", "selected_joints", ")", "[", "0", "]", "<", "2", ":", "\n", "        ", "return", "center", ",", "scale", "\n", "", "center", "=", "tf", ".", "reduce_mean", "(", "selected_joints", "[", ":", ",", ":", "2", "]", ",", "axis", "=", "0", ")", "\n", "left_top", "=", "tf", ".", "math", ".", "reduce_min", "(", "selected_joints", "[", ":", ",", ":", "2", "]", ",", "axis", "=", "0", ")", "\n", "right_bottom", "=", "tf", ".", "math", ".", "reduce_max", "(", "selected_joints", "[", ":", ",", ":", "2", "]", ",", "axis", "=", "0", ")", "\n", "w", "=", "right_bottom", "[", "0", "]", "-", "left_top", "[", "0", "]", "\n", "h", "=", "right_bottom", "[", "1", "]", "-", "left_top", "[", "1", "]", "\n", "aspect_ratio", "=", "DATASET", ".", "INPUT_SHAPE", "[", "1", "]", "/", "DATASET", ".", "INPUT_SHAPE", "[", "0", "]", "\n", "if", "w", ">", "aspect_ratio", "*", "h", ":", "\n", "        ", "h", "=", "w", "*", "1.0", "/", "aspect_ratio", "\n", "", "scale", "=", "(", "h", "*", "1.25", ")", "/", "DATASET", ".", "INPUT_SHAPE", "[", "0", "]", "\n", "scale", "=", "scale", "*", "1.5", "\n", "return", "center", ",", "scale", "\n", "\n"]], "home.repos.pwc.inspect_result.wmcnally_evopose2d.dataset.dataloader.generate_heatmaps": [[171, 188], ["tensorflow.meshgrid", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.floor", "tensorflow.floor", "tensorflow.cast", "tensorflow.dtypes.cast", "tensorflow.dtypes.cast", "tensorflow.exp", "range", "range", "tensorflow.reshape", "tensorflow.reshape"], "function", ["None"], ["", "def", "generate_heatmaps", "(", "kp", ",", "DATASET", ")", ":", "\n", "    ", "x", "=", "[", "i", "for", "i", "in", "range", "(", "DATASET", ".", "OUTPUT_SHAPE", "[", "1", "]", ")", "]", "\n", "y", "=", "[", "i", "for", "i", "in", "range", "(", "DATASET", ".", "OUTPUT_SHAPE", "[", "0", "]", ")", "]", "\n", "xx", ",", "yy", "=", "tf", ".", "meshgrid", "(", "x", ",", "y", ")", "\n", "xx", "=", "tf", ".", "reshape", "(", "tf", ".", "dtypes", ".", "cast", "(", "xx", ",", "tf", ".", "float32", ")", ",", "(", "1", ",", "*", "DATASET", ".", "OUTPUT_SHAPE", "[", ":", "2", "]", ",", "1", ")", ")", "\n", "yy", "=", "tf", ".", "reshape", "(", "tf", ".", "dtypes", ".", "cast", "(", "yy", ",", "tf", ".", "float32", ")", ",", "(", "1", ",", "*", "DATASET", ".", "OUTPUT_SHAPE", "[", ":", "2", "]", ",", "1", ")", ")", "\n", "\n", "x", "=", "tf", ".", "floor", "(", "tf", ".", "reshape", "(", "kp", "[", ":", ",", ":", ",", "0", "]", ",", "[", "-", "1", ",", "1", ",", "1", ",", "DATASET", ".", "OUTPUT_SHAPE", "[", "-", "1", "]", "]", ")", "\n", "/", "DATASET", ".", "INPUT_SHAPE", "[", "1", "]", "*", "DATASET", ".", "OUTPUT_SHAPE", "[", "1", "]", "+", "0.5", ")", "\n", "y", "=", "tf", ".", "floor", "(", "tf", ".", "reshape", "(", "kp", "[", ":", ",", ":", ",", "1", "]", ",", "[", "-", "1", ",", "1", ",", "1", ",", "DATASET", ".", "OUTPUT_SHAPE", "[", "-", "1", "]", "]", ")", "\n", "/", "DATASET", ".", "INPUT_SHAPE", "[", "0", "]", "*", "DATASET", ".", "OUTPUT_SHAPE", "[", "0", "]", "+", "0.5", ")", "\n", "\n", "heatmaps", "=", "tf", ".", "exp", "(", "-", "(", "(", "(", "xx", "-", "x", ")", "/", "DATASET", ".", "SIGMA", ")", "**", "2", ")", "/", "2", "-", "(", "\n", "(", "(", "yy", "-", "y", ")", "/", "DATASET", ".", "SIGMA", ")", "**", "2", ")", "/", "2", ")", "*", "255.", "\n", "\n", "valid", "=", "tf", ".", "cast", "(", "kp", "[", ":", ",", ":", ",", "-", "1", "]", ">", "0", ",", "tf", ".", "float32", ")", "\n", "return", "heatmaps", ",", "valid", "\n", "\n"]], "home.repos.pwc.inspect_result.wmcnally_evopose2d.dataset.dataloader.load_tfds": [[190, 215], ["os.join", "os.join", "tensorflow.data.Dataset.list_files", "ds.map.interleave", "ds.map.map", "ds.map.map", "os.join", "ds.map.cache", "ds.map.shuffle().repeat", "ds.map.batch().prefetch", "ds.map.batch().prefetch", "ds.map.map", "dataloader.parse_record", "dataloader.preprocess", "ds.map.shuffle", "ds.map.batch", "ds.map.batch", "dataloader.generate_heatmaps"], "function", ["home.repos.pwc.inspect_result.wmcnally_evopose2d.dataset.dataloader.parse_record", "home.repos.pwc.inspect_result.wmcnally_evopose2d.dataset.dataloader.preprocess", "home.repos.pwc.inspect_result.wmcnally_evopose2d.dataset.dataloader.generate_heatmaps"], ["", "def", "load_tfds", "(", "cfg", ",", "split", ",", "det", "=", "False", ",", "predict_kp", "=", "False", ",", "drop_remainder", "=", "True", ")", ":", "\n", "    ", "record_subdir", "=", "osp", ".", "join", "(", "cfg", ".", "DATASET", ".", "TFRECORDS", ",", "split", ")", "\n", "if", "split", "==", "'val'", "and", "det", ":", "\n", "        ", "record_subdir", "=", "osp", ".", "join", "(", "record_subdir", ",", "'dets'", ")", "\n", "", "file_pattern", "=", "osp", ".", "join", "(", "record_subdir", ",", "'*.tfrecord'", ")", "\n", "AUTO", "=", "tf", ".", "data", ".", "experimental", ".", "AUTOTUNE", "\n", "ds", "=", "tf", ".", "data", ".", "Dataset", ".", "list_files", "(", "file_pattern", ",", "shuffle", "=", "True", ")", "\n", "ds", "=", "ds", ".", "interleave", "(", "tf", ".", "data", ".", "TFRecordDataset", ",", "\n", "cycle_length", "=", "10", ",", "\n", "block_length", "=", "1", ",", "\n", "num_parallel_calls", "=", "AUTO", ")", "\n", "ds", "=", "ds", ".", "cache", "(", ")", "if", "cfg", ".", "DATASET", ".", "CACHE", "else", "ds", "\n", "ds", "=", "ds", ".", "shuffle", "(", "10000", ")", ".", "repeat", "(", ")", "if", "split", "==", "'train'", "else", "ds", "\n", "ds", "=", "ds", ".", "map", "(", "lambda", "record", ":", "parse_record", "(", "record", ")", ",", "num_parallel_calls", "=", "AUTO", ")", "\n", "ds", "=", "ds", ".", "map", "(", "lambda", "id", ",", "img", ",", "bbox", ",", "kp", ",", "score", ":", "\n", "preprocess", "(", "id", ",", "img", ",", "bbox", ",", "kp", ",", "score", ",", "cfg", ".", "DATASET", ",", "split", ",", "predict_kp", ")", ",", "\n", "num_parallel_calls", "=", "AUTO", ")", "\n", "if", "split", "==", "'train'", ":", "\n", "        ", "ds", "=", "ds", ".", "batch", "(", "cfg", ".", "TRAIN", ".", "BATCH_SIZE", ")", ".", "prefetch", "(", "AUTO", ")", "\n", "", "else", ":", "\n", "        ", "ds", "=", "ds", ".", "batch", "(", "cfg", ".", "VAL", ".", "BATCH_SIZE", ",", "drop_remainder", "=", "drop_remainder", ")", ".", "prefetch", "(", "AUTO", ")", "\n", "", "if", "not", "predict_kp", ":", "\n", "        ", "ds", "=", "ds", ".", "map", "(", "lambda", "imgs", ",", "kp", ":", "(", "imgs", ",", "*", "generate_heatmaps", "(", "kp", ",", "cfg", ".", "DATASET", ")", ")", ",", "\n", "num_parallel_calls", "=", "AUTO", ")", "\n", "", "return", "ds", "\n", "\n"]], "home.repos.pwc.inspect_result.wmcnally_evopose2d.dataset.dataloader.visualize": [[217, 224], ["enumerate", "cv2.circle", "tuple", "cv2.circle", "tuple"], "function", ["None"], ["", "def", "visualize", "(", "img", ",", "joints", ",", "valid", ")", ":", "\n", "    ", "for", "i", ",", "v", "in", "enumerate", "(", "valid", ")", ":", "\n", "        ", "if", "v", "==", "1", ":", "# occluded", "\n", "            ", "cv2", ".", "circle", "(", "img", ",", "tuple", "(", "joints", "[", "i", "]", ")", ",", "1", ",", "(", "0", ",", "255", ",", "0", ")", ")", "\n", "", "elif", "v", "==", "2", ":", "# visible", "\n", "            ", "cv2", ".", "circle", "(", "img", ",", "tuple", "(", "joints", "[", "i", "]", ")", ",", "1", ",", "(", "0", ",", "0", ",", "255", ")", ")", "\n", "", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.wmcnally_evopose2d.nets.evopose2d.get_parent": [[89, 100], ["tensorflow.keras.applications.EfficientNetB0", "tensorflow.keras.applications.EfficientNetB4", "tensorflow.keras.applications.EfficientNetB5", "print"], "function", ["None"], ["def", "get_parent", "(", "input_shape", ")", ":", "\n", "    ", "if", "input_shape", "[", "0", "]", "==", "256", ":", "\n", "        ", "parent", "=", "EfficientNetB0", "(", "include_top", "=", "False", ")", "\n", "", "elif", "input_shape", "[", "0", "]", "==", "384", ":", "\n", "        ", "parent", "=", "EfficientNetB4", "(", "include_top", "=", "False", ")", "\n", "", "elif", "input_shape", "[", "0", "]", "==", "512", ":", "\n", "        ", "parent", "=", "EfficientNetB5", "(", "include_top", "=", "False", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "'Not a valid input shape for EfficientNet parent'", ")", "\n", "parent", "=", "None", "\n", "", "return", "parent", "\n", "\n"]], "home.repos.pwc.inspect_result.wmcnally_evopose2d.nets.evopose2d.blocks_args_from_genotype": [[102, 110], ["copy.deepcopy", "enumerate", "int", "int", "int", "int"], "function", ["None"], ["", "def", "blocks_args_from_genotype", "(", "genotype", ")", ":", "\n", "    ", "blocks_args", "=", "copy", ".", "deepcopy", "(", "DEFAULT_BLOCKS_ARGS", ")", "\n", "for", "i", ",", "args", "in", "enumerate", "(", "genotype", ")", ":", "\n", "        ", "blocks_args", "[", "i", "]", "[", "'kernel_size'", "]", "=", "int", "(", "args", "[", "0", "]", ")", "\n", "blocks_args", "[", "i", "]", "[", "'repeats'", "]", "=", "int", "(", "args", "[", "1", "]", ")", "\n", "blocks_args", "[", "i", "]", "[", "'filters_out'", "]", "=", "int", "(", "args", "[", "2", "]", "*", "8", ")", "\n", "blocks_args", "[", "i", "]", "[", "'strides'", "]", "=", "int", "(", "args", "[", "3", "]", ")", "\n", "", "return", "blocks_args", "\n", "\n"]], "home.repos.pwc.inspect_result.wmcnally_evopose2d.nets.evopose2d.genotype_from_blocks_args": [[112, 117], ["copy.deepcopy", "genotype.append"], "function", ["None"], ["", "def", "genotype_from_blocks_args", "(", "blocks_args", ")", ":", "\n", "    ", "genotype", "=", "[", "]", "\n", "for", "args", "in", "copy", ".", "deepcopy", "(", "blocks_args", ")", ":", "\n", "        ", "genotype", ".", "append", "(", "[", "args", "[", "'kernel_size'", "]", ",", "args", "[", "'repeats'", "]", ",", "args", "[", "'filters_out'", "]", "//", "8", ",", "args", "[", "'strides'", "]", "]", ")", "\n", "", "return", "genotype", "\n", "\n"]], "home.repos.pwc.inspect_result.wmcnally_evopose2d.nets.evopose2d.round_filters": [[119, 127], ["max", "int", "int"], "function", ["None"], ["", "def", "round_filters", "(", "filters", ",", "width_coefficient", ",", "divisor", "=", "8", ")", ":", "\n", "    ", "\"\"\"Round number of filters based on depth multiplier.\"\"\"", "\n", "filters", "*=", "width_coefficient", "\n", "new_filters", "=", "max", "(", "divisor", ",", "int", "(", "filters", "+", "divisor", "/", "2", ")", "//", "divisor", "*", "divisor", ")", "\n", "# Make sure that round down does not go down by more than 10%.", "\n", "if", "new_filters", "<", "0.9", "*", "filters", ":", "\n", "        ", "new_filters", "+=", "divisor", "\n", "", "return", "int", "(", "new_filters", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wmcnally_evopose2d.nets.evopose2d.round_repeats": [[129, 132], ["int", "math.ceil"], "function", ["None"], ["", "def", "round_repeats", "(", "repeats", ",", "depth_coefficient", ")", ":", "\n", "    ", "\"\"\"Round number of repeats based on depth multiplier.\"\"\"", "\n", "return", "int", "(", "math", ".", "ceil", "(", "depth_coefficient", "*", "repeats", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wmcnally_evopose2d.nets.evopose2d.EvoPose": [[134, 224], ["evopose2d.scaling_parameters", "tensorflow.keras.regularizers.l2", "tensorflow.keras.layers.Input", "copy.deepcopy", "float", "enumerate", "range", "tensorflow.keras.Model", "evopose2d.blocks_args_from_genotype", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.BatchNormalization", "tensorflow.keras.layers.Activation", "sum", "evopose2d.round_filters", "args.pop", "range", "tensorflow.keras.layers.Conv2D", "evopose2d.round_filters", "evopose2d.round_repeats", "evopose2d.block", "tensorflow.keras.layers.Conv2DTranspose", "tensorflow.keras.layers.BatchNormalization", "tensorflow.keras.layers.Activation", "evopose2d.get_parent", "tensorflow.keras.models.load_model", "evopose2d.transfer_params", "evopose2d.round_repeats", "evopose2d.round_filters", "chr"], "function", ["home.repos.pwc.inspect_result.wmcnally_evopose2d.nets.evopose2d.scaling_parameters", "home.repos.pwc.inspect_result.wmcnally_evopose2d.nets.evopose2d.blocks_args_from_genotype", "home.repos.pwc.inspect_result.wmcnally_evopose2d.nets.evopose2d.round_filters", "home.repos.pwc.inspect_result.wmcnally_evopose2d.nets.evopose2d.round_filters", "home.repos.pwc.inspect_result.wmcnally_evopose2d.nets.evopose2d.round_repeats", "home.repos.pwc.inspect_result.wmcnally_evopose2d.nets.evopose2d.block", "home.repos.pwc.inspect_result.wmcnally_evopose2d.nets.evopose2d.get_parent", "home.repos.pwc.inspect_result.wmcnally_evopose2d.nets.evopose2d.transfer_params", "home.repos.pwc.inspect_result.wmcnally_evopose2d.nets.evopose2d.round_repeats", "home.repos.pwc.inspect_result.wmcnally_evopose2d.nets.evopose2d.round_filters"], ["", "def", "EvoPose", "(", "cfg", ")", ":", "\n", "    ", "if", "cfg", ".", "MODEL", ".", "GENOTYPE", "is", "None", ":", "\n", "        ", "blocks_args", "=", "DEFAULT_BLOCKS_ARGS", "\n", "", "else", ":", "\n", "        ", "blocks_args", "=", "blocks_args_from_genotype", "(", "cfg", ".", "MODEL", ".", "GENOTYPE", ")", "\n", "\n", "", "d", ",", "w", ",", "drop_connect_rate", "=", "scaling_parameters", "(", "cfg", ".", "DATASET", ".", "INPUT_SHAPE", ")", "\n", "\n", "width_coefficient", "=", "cfg", ".", "MODEL", ".", "WIDTH_COEFFICIENT", "*", "w", "\n", "depth_coefficient", "=", "cfg", ".", "MODEL", ".", "DEPTH_COEFFICIENT", "*", "d", "\n", "depth_divisor", "=", "cfg", ".", "MODEL", ".", "DEPTH_DIVISOR", "\n", "head_filters", "=", "cfg", ".", "MODEL", ".", "HEAD_CHANNELS", "\n", "head_kernel", "=", "cfg", ".", "MODEL", ".", "HEAD_KERNEL", "\n", "head_activation", "=", "cfg", ".", "MODEL", ".", "HEAD_ACTIVATION", "\n", "keypoints", "=", "cfg", ".", "DATASET", ".", "OUTPUT_SHAPE", "[", "-", "1", "]", "\n", "regularizer", "=", "l2", "(", "cfg", ".", "TRAIN", ".", "WD", ")", "\n", "activation", "=", "cfg", ".", "MODEL", ".", "ACTIVATION", "\n", "\n", "img_input", "=", "layers", ".", "Input", "(", "shape", "=", "cfg", ".", "DATASET", ".", "INPUT_SHAPE", ")", "\n", "\n", "# Build stem", "\n", "x", "=", "img_input", "\n", "\n", "x", "=", "layers", ".", "Conv2D", "(", "\n", "round_filters", "(", "32", ",", "width_coefficient", ",", "depth_divisor", ")", ",", "3", ",", "2", ",", "\n", "padding", "=", "'same'", ",", "\n", "use_bias", "=", "False", ",", "\n", "kernel_initializer", "=", "CONV_KERNEL_INITIALIZER", ",", "\n", "kernel_regularizer", "=", "regularizer", ",", "\n", "name", "=", "'stem_conv'", ")", "(", "x", ")", "\n", "x", "=", "layers", ".", "BatchNormalization", "(", "name", "=", "'stem_bn'", ")", "(", "x", ")", "\n", "x", "=", "layers", ".", "Activation", "(", "activation", ",", "name", "=", "'stem_activation'", ")", "(", "x", ")", "\n", "\n", "# Build blocks", "\n", "blocks_args", "=", "copy", ".", "deepcopy", "(", "blocks_args", ")", "\n", "\n", "b", "=", "0", "\n", "blocks", "=", "float", "(", "sum", "(", "round_repeats", "(", "args", "[", "'repeats'", "]", ",", "depth_coefficient", ")", "for", "args", "in", "blocks_args", ")", ")", "\n", "for", "(", "i", ",", "args", ")", "in", "enumerate", "(", "blocks_args", ")", ":", "\n", "        ", "assert", "args", "[", "'repeats'", "]", ">", "0", "\n", "# Update block input and output filters based on depth multiplier.", "\n", "args", "[", "'filters_out'", "]", "=", "round_filters", "(", "args", "[", "'filters_out'", "]", ",", "width_coefficient", ",", "depth_divisor", ")", "\n", "repeats", "=", "args", "[", "'repeats'", "]", "\n", "args", ".", "pop", "(", "'repeats'", ")", "\n", "for", "j", "in", "range", "(", "round_repeats", "(", "repeats", ",", "depth_coefficient", ")", ")", ":", "\n", "# The first block needs to take care of stride and filter size increase.", "\n", "            ", "if", "j", ">", "0", ":", "\n", "                ", "args", "[", "'strides'", "]", "=", "1", "\n", "", "x", "=", "block", "(", "\n", "x", ",", "\n", "activation", ",", "\n", "drop_connect_rate", "*", "b", "/", "blocks", ",", "\n", "regularizer", "=", "regularizer", ",", "\n", "name", "=", "'block{}{}_'", ".", "format", "(", "i", "+", "1", ",", "chr", "(", "j", "+", "97", ")", ")", ",", "\n", "**", "args", ")", "\n", "b", "+=", "1", "\n", "\n", "", "", "for", "i", "in", "range", "(", "cfg", ".", "MODEL", ".", "HEAD_BLOCKS", ")", ":", "\n", "        ", "x", "=", "layers", ".", "Conv2DTranspose", "(", "\n", "round_filters", "(", "head_filters", ",", "width_coefficient", ",", "depth_divisor", ")", ",", "\n", "head_kernel", ",", "\n", "strides", "=", "2", ",", "\n", "padding", "=", "'same'", ",", "\n", "use_bias", "=", "False", ",", "\n", "kernel_initializer", "=", "CONV_KERNEL_INITIALIZER", ",", "\n", "kernel_regularizer", "=", "regularizer", ",", "\n", "name", "=", "'head_block{}_conv'", ".", "format", "(", "i", "+", "1", ")", ")", "(", "x", ")", "\n", "x", "=", "layers", ".", "BatchNormalization", "(", "name", "=", "'head_block{}_bn'", ".", "format", "(", "i", "+", "1", ")", ")", "(", "x", ")", "\n", "x", "=", "layers", ".", "Activation", "(", "head_activation", ",", "name", "=", "'head_block{}_activation'", ".", "format", "(", "i", "+", "1", ")", ")", "(", "x", ")", "\n", "\n", "", "x", "=", "layers", ".", "Conv2D", "(", "\n", "keypoints", ",", "\n", "cfg", ".", "MODEL", ".", "FINAL_KERNEL", ",", "\n", "padding", "=", "'same'", ",", "\n", "use_bias", "=", "True", ",", "\n", "kernel_initializer", "=", "DENSE_KERNEL_INITIALIZER", ",", "\n", "kernel_regularizer", "=", "regularizer", ",", "\n", "name", "=", "'final_conv'", ")", "(", "x", ")", "\n", "\n", "model", "=", "Model", "(", "img_input", ",", "x", ",", "name", "=", "'evopose'", ")", "\n", "\n", "if", "cfg", ".", "MODEL", ".", "LOAD_WEIGHTS", ":", "\n", "        ", "if", "cfg", ".", "MODEL", ".", "PARENT", "is", "None", ":", "\n", "            ", "parent", "=", "get_parent", "(", "cfg", ".", "DATASET", ".", "INPUT_SHAPE", ")", "\n", "", "else", ":", "\n", "            ", "parent", "=", "load_model", "(", "cfg", ".", "MODEL", ".", "PARENT", ",", "compile", "=", "False", ")", "\n", "", "if", "parent", "is", "not", "None", ":", "\n", "            ", "model", "=", "transfer_params", "(", "parent", ",", "model", ")", "\n", "\n", "", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.wmcnally_evopose2d.nets.evopose2d.block": [[226, 307], ["tensorflow.keras.layers.DepthwiseConv2D", "tensorflow.keras.layers.BatchNormalization", "tensorflow.keras.layers.Activation", "max", "tensorflow.keras.layers.multiply", "tensorflow.keras.layers.add", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.BatchNormalization", "tensorflow.keras.layers.Activation", "int", "tensorflow.keras.layers.GlobalAveragePooling2D", "tensorflow.keras.layers.Reshape", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.BatchNormalization", "tensorflow.keras.layers.Dropout"], "function", ["None"], ["", "def", "block", "(", "inputs", ",", "\n", "activation", "=", "'swish'", ",", "\n", "drop_rate", "=", "0.", ",", "\n", "name", "=", "''", ",", "\n", "filters_out", "=", "16", ",", "\n", "kernel_size", "=", "3", ",", "\n", "strides", "=", "1", ",", "\n", "expand_ratio", "=", "1", ",", "\n", "se_ratio", "=", "0.", ",", "\n", "id_skip", "=", "True", ",", "\n", "project", "=", "True", ",", "\n", "regularizer", "=", "None", ")", ":", "\n", "\n", "    ", "filters_in", "=", "inputs", ".", "shape", "[", "-", "1", "]", "\n", "\n", "# Expansion phase", "\n", "filters", "=", "filters_in", "*", "expand_ratio", "\n", "if", "expand_ratio", "!=", "1", ":", "\n", "        ", "x", "=", "layers", ".", "Conv2D", "(", "\n", "filters", ",", "1", ",", "\n", "padding", "=", "'same'", ",", "\n", "use_bias", "=", "False", ",", "\n", "kernel_initializer", "=", "CONV_KERNEL_INITIALIZER", ",", "\n", "kernel_regularizer", "=", "regularizer", ",", "\n", "name", "=", "name", "+", "'expand_conv'", ")", "(", "inputs", ")", "\n", "x", "=", "layers", ".", "BatchNormalization", "(", "name", "=", "name", "+", "'expand_bn'", ")", "(", "x", ")", "\n", "x", "=", "layers", ".", "Activation", "(", "activation", ",", "name", "=", "name", "+", "'expand_activation'", ")", "(", "x", ")", "\n", "", "else", ":", "\n", "        ", "x", "=", "inputs", "\n", "\n", "# Depthwise Convolution", "\n", "", "x", "=", "layers", ".", "DepthwiseConv2D", "(", "\n", "kernel_size", ",", "\n", "strides", "=", "strides", ",", "\n", "padding", "=", "'same'", ",", "\n", "use_bias", "=", "False", ",", "\n", "depthwise_initializer", "=", "CONV_KERNEL_INITIALIZER", ",", "\n", "kernel_regularizer", "=", "regularizer", ",", "\n", "name", "=", "name", "+", "'dwconv'", ")", "(", "x", ")", "\n", "x", "=", "layers", ".", "BatchNormalization", "(", "name", "=", "name", "+", "'bn'", ")", "(", "x", ")", "\n", "x", "=", "layers", ".", "Activation", "(", "activation", ",", "name", "=", "name", "+", "'activation'", ")", "(", "x", ")", "\n", "\n", "# Squeeze and Excitation phase", "\n", "if", "0", "<", "se_ratio", "<=", "1", ":", "\n", "        ", "filters_se", "=", "max", "(", "1", ",", "int", "(", "filters_in", "*", "se_ratio", ")", ")", "\n", "se", "=", "layers", ".", "GlobalAveragePooling2D", "(", "name", "=", "name", "+", "'se_squeeze'", ")", "(", "x", ")", "\n", "se", "=", "layers", ".", "Reshape", "(", "(", "1", ",", "1", ",", "filters", ")", ",", "name", "=", "name", "+", "'se_reshape'", ")", "(", "se", ")", "\n", "se", "=", "layers", ".", "Conv2D", "(", "\n", "filters_se", ",", "1", ",", "\n", "padding", "=", "'same'", ",", "\n", "activation", "=", "activation", ",", "\n", "kernel_initializer", "=", "CONV_KERNEL_INITIALIZER", ",", "\n", "kernel_regularizer", "=", "regularizer", ",", "\n", "name", "=", "name", "+", "'se_reduce'", ")", "(", "\n", "se", ")", "\n", "se", "=", "layers", ".", "Conv2D", "(", "\n", "filters", ",", "1", ",", "\n", "padding", "=", "'same'", ",", "\n", "activation", "=", "'sigmoid'", ",", "\n", "kernel_initializer", "=", "CONV_KERNEL_INITIALIZER", ",", "\n", "kernel_regularizer", "=", "regularizer", ",", "\n", "name", "=", "name", "+", "'se_expand'", ")", "(", "se", ")", "\n", "x", "=", "layers", ".", "multiply", "(", "[", "x", ",", "se", "]", ",", "name", "=", "name", "+", "'se_excite'", ")", "\n", "\n", "# Output phase", "\n", "", "if", "project", ":", "\n", "        ", "x", "=", "layers", ".", "Conv2D", "(", "\n", "filters_out", ",", "1", ",", "\n", "padding", "=", "'same'", ",", "\n", "use_bias", "=", "False", ",", "\n", "kernel_initializer", "=", "CONV_KERNEL_INITIALIZER", ",", "\n", "kernel_regularizer", "=", "regularizer", ",", "\n", "name", "=", "name", "+", "'project_conv'", ")", "(", "x", ")", "\n", "x", "=", "layers", ".", "BatchNormalization", "(", "name", "=", "name", "+", "'project_bn'", ")", "(", "x", ")", "\n", "\n", "", "if", "id_skip", "and", "strides", "==", "1", "and", "filters_in", "==", "filters_out", "and", "project", ":", "\n", "        ", "if", "drop_rate", ">", "0", ":", "\n", "            ", "x", "=", "layers", ".", "Dropout", "(", "\n", "drop_rate", ",", "noise_shape", "=", "(", "None", ",", "1", ",", "1", ",", "1", ")", ",", "name", "=", "name", "+", "'drop'", ")", "(", "x", ")", "\n", "", "x", "=", "layers", ".", "add", "(", "[", "x", ",", "inputs", "]", ",", "name", "=", "name", "+", "'add'", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.wmcnally_evopose2d.nets.evopose2d.scaling_parameters": [[309, 323], ["sum", "math.log", "math.log", "math.log"], "function", ["None"], ["", "def", "scaling_parameters", "(", "input_shape", ",", "default_size", "=", "224", ",", "alpha", "=", "1.2", ",", "beta", "=", "1.1", ",", "gamma", "=", "1.15", ")", ":", "\n", "    ", "size", "=", "sum", "(", "input_shape", "[", ":", "2", "]", ")", "/", "2", "\n", "if", "size", "<=", "240", ":", "\n", "        ", "drop_connect_rate", "=", "0.2", "\n", "", "elif", "size", "<=", "300", ":", "\n", "        ", "drop_connect_rate", "=", "0.3", "\n", "", "elif", "size", "<=", "456", ":", "\n", "        ", "drop_connect_rate", "=", "0.4", "\n", "", "else", ":", "\n", "        ", "drop_connect_rate", "=", "0.5", "\n", "", "phi", "=", "(", "math", ".", "log", "(", "size", ")", "-", "math", ".", "log", "(", "default_size", ")", ")", "/", "math", ".", "log", "(", "gamma", ")", "\n", "d", "=", "alpha", "**", "phi", "\n", "w", "=", "beta", "**", "phi", "\n", "return", "d", ",", "w", ",", "drop_connect_rate", "\n", "\n"]], "home.repos.pwc.inspect_result.wmcnally_evopose2d.nets.evopose2d.array_in_list": [[325, 327], ["next", "numpy.array_equal"], "function", ["None"], ["", "def", "array_in_list", "(", "arr", ",", "l", ")", ":", "\n", "    ", "return", "next", "(", "(", "True", "for", "elem", "in", "l", "if", "np", ".", "array_equal", "(", "elem", ",", "arr", ")", ")", ",", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wmcnally_evopose2d.nets.evopose2d.mutate": [[329, 360], ["numpy.array", "numpy.array", "np.array.copy", "print", "list", "evopose2d.genotype_from_blocks_args", "numpy.array_equal", "evopose2d.array_in_list", "np.array.copy", "numpy.random.randint", "numpy.random.randint", "numpy.unique", "numpy.random.randint", "numpy.random.randint", "len", "numpy.max", "numpy.random.uniform", "numpy.sum", "numpy.sum"], "function", ["home.repos.pwc.inspect_result.wmcnally_evopose2d.nets.evopose2d.genotype_from_blocks_args", "home.repos.pwc.inspect_result.wmcnally_evopose2d.nets.evopose2d.array_in_list"], ["", "def", "mutate", "(", "genotype", ",", "cache", "=", "[", "]", ",", "max_stride", "=", "4", ")", ":", "\n", "    ", "genotype", "=", "np", ".", "array", "(", "genotype", ")", "\n", "default_genotype", "=", "np", ".", "array", "(", "genotype_from_blocks_args", "(", "DEFAULT_BLOCKS_ARGS", ")", ")", "\n", "mutant", "=", "genotype", ".", "copy", "(", ")", "\n", "while", "np", ".", "array_equal", "(", "mutant", ",", "genotype", ")", "or", "array_in_list", "(", "mutant", ",", "cache", ")", ":", "\n", "        ", "mutant", "=", "genotype", ".", "copy", "(", ")", "\n", "block_id", "=", "np", ".", "random", ".", "randint", "(", "mutant", ".", "shape", "[", "0", "]", ")", "\n", "gene_id", "=", "np", ".", "random", ".", "randint", "(", "mutant", ".", "shape", "[", "1", "]", ")", "\n", "if", "gene_id", "==", "0", ":", "# kernel", "\n", "            ", "kernels", "=", "np", ".", "unique", "(", "default_genotype", "[", ":", ",", "0", "]", ")", "\n", "mutant", "[", "block_id", "]", "[", "gene_id", "]", "=", "kernels", "[", "np", ".", "random", ".", "randint", "(", "len", "(", "kernels", ")", ")", "]", "\n", "", "elif", "gene_id", "==", "1", ":", "# repeats", "\n", "            ", "if", "mutant", "[", "block_id", "]", "[", "gene_id", "]", "==", "1", ":", "\n", "                ", "mutant", "[", "block_id", "]", "[", "gene_id", "]", "+=", "1", "\n", "", "elif", "mutant", "[", "block_id", "]", "[", "gene_id", "]", "==", "np", ".", "max", "(", "default_genotype", "[", ":", ",", "1", "]", ")", ":", "\n", "                ", "mutant", "[", "block_id", "]", "[", "gene_id", "]", "-=", "1", "\n", "", "else", ":", "\n", "                ", "if", "np", ".", "random", ".", "uniform", "(", ")", "<", "0.5", ":", "\n", "                    ", "mutant", "[", "block_id", "]", "[", "gene_id", "]", "+=", "1", "\n", "", "else", ":", "\n", "                    ", "mutant", "[", "block_id", "]", "[", "gene_id", "]", "-=", "1", "\n", "", "", "", "elif", "gene_id", "==", "2", ":", "# filters", "\n", "            ", "mutant", "[", "block_id", "]", "[", "gene_id", "]", "=", "np", ".", "random", ".", "randint", "(", "1", ",", "default_genotype", "[", "block_id", ",", "2", "]", "+", "1", ")", "\n", "", "elif", "gene_id", "==", "3", ":", "# stride", "\n", "            ", "if", "block_id", ">", "3", ":", "\n", "                ", "if", "mutant", "[", "block_id", "]", "[", "gene_id", "]", "==", "2", "and", "np", ".", "sum", "(", "mutant", "[", ":", ",", "-", "1", "]", "-", "1", ")", "==", "max_stride", ":", "\n", "                    ", "mutant", "[", "block_id", "]", "[", "gene_id", "]", "=", "1", "\n", "", "elif", "mutant", "[", "block_id", "]", "[", "gene_id", "]", "==", "1", "and", "np", ".", "sum", "(", "mutant", "[", ":", ",", "-", "1", "]", "-", "1", ")", "<", "max_stride", ":", "\n", "                    ", "mutant", "[", "block_id", "]", "[", "gene_id", "]", "=", "2", "\n", "", "", "", "", "print", "(", "'block {}: {} -> {}'", ".", "format", "(", "block_id", ",", "genotype", "[", "block_id", "]", ",", "mutant", "[", "block_id", "]", ")", ")", "\n", "return", "list", "(", "mutant", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wmcnally_evopose2d.nets.evopose2d.layer_weights": [[362, 369], ["names.append", "weights.append", "layer.get_weights"], "function", ["None"], ["", "def", "layer_weights", "(", "model", ")", ":", "\n", "    ", "names", ",", "weights", "=", "[", "]", ",", "[", "]", "\n", "for", "layer", "in", "model", ".", "layers", ":", "\n", "        ", "if", "layer", ".", "weights", ":", "\n", "            ", "names", ".", "append", "(", "layer", ".", "name", ")", "\n", "weights", ".", "append", "(", "layer", ".", "get_weights", "(", ")", ")", "\n", "", "", "return", "names", ",", "weights", "\n", "\n"]], "home.repos.pwc.inspect_result.wmcnally_evopose2d.nets.evopose2d.transfer_params": [[371, 403], ["evopose2d.layer_weights", "print", "layer.set_weights", "len", "parent_layers.index", "utils.partial_weight_transfer", "layer.name.split", "sorted", "layer.set_weights", "print", "parent_layers.index", "utils.partial_weight_transfer", "p.split"], "function", ["home.repos.pwc.inspect_result.wmcnally_evopose2d.nets.evopose2d.layer_weights", "home.repos.pwc.inspect_result.wmcnally_evopose2d.None.utils.partial_weight_transfer", "home.repos.pwc.inspect_result.wmcnally_evopose2d.None.utils.partial_weight_transfer"], ["", "def", "transfer_params", "(", "parent", ",", "child", ",", "disp", "=", "False", ")", ":", "\n", "    ", "parent_layers", ",", "parent_weights", "=", "layer_weights", "(", "parent", ")", "\n", "for", "layer", "in", "child", ".", "layers", ":", "\n", "        ", "if", "layer", ".", "weights", ":", "\n", "            ", "if", "layer", ".", "name", "in", "parent_layers", ":", "\n", "                ", "parent_layer_weights", "=", "parent_weights", "[", "parent_layers", ".", "index", "(", "layer", ".", "name", ")", "]", "\n", "try", ":", "\n", "# FULL WEIGHT TRANSFER", "\n", "                    ", "layer", ".", "set_weights", "(", "parent_layer_weights", ")", "\n", "", "except", ":", "\n", "# PARTIAL WEIGHT TRANSFER", "\n", "                    ", "partial_weight_transfer", "(", "layer", ",", "parent_layer_weights", ",", "disp", ")", "\n", "\n", "", "", "else", ":", "\n", "# get last block with layer", "\n", "                ", "print", "(", "'Repeat block:'", ",", "layer", ".", "name", ")", "\n", "layer_name", "=", "'_'", ".", "join", "(", "layer", ".", "name", ".", "split", "(", "'_'", ")", "[", "1", ":", "]", ")", "\n", "blocks_layer", "=", "[", "p", "for", "p", "in", "sorted", "(", "parent_layers", ")", "\n", "if", "layer_name", "==", "'_'", ".", "join", "(", "p", ".", "split", "(", "'_'", ")", "[", "1", ":", "]", ")", "\n", "and", "'block'", "in", "p", "]", "\n", "if", "len", "(", "blocks_layer", ")", ">", "0", ":", "\n", "                    ", "parent_layer_weights", "=", "parent_weights", "[", "parent_layers", ".", "index", "(", "blocks_layer", "[", "-", "1", "]", ")", "]", "\n", "try", ":", "\n", "# FULL WEIGHT TRANSFER", "\n", "                        ", "layer", ".", "set_weights", "(", "parent_layer_weights", ")", "\n", "", "except", ":", "\n", "# PARTIAL WEIGHT TRANSFER", "\n", "                        ", "partial_weight_transfer", "(", "layer", ",", "parent_layer_weights", ",", "disp", ")", "\n", "", "", "else", ":", "\n", "                    ", "if", "disp", ":", "\n", "                        ", "print", "(", "'Did not transfer weights to {}'", ".", "format", "(", "layer", ".", "name", ")", ")", "\n", "", "", "", "", "", "return", "child", "\n", "\n"]], "home.repos.pwc.inspect_result.wmcnally_evopose2d.nets.hrnet.basic_block": [[8, 28], ["Conv2D", "BatchNormalization", "ReLU", "Conv2D", "BatchNormalization", "Add", "ReLU", "Conv2D", "BatchNormalization"], "function", ["None"], ["def", "basic_block", "(", "x", ",", "out_channels", ",", "stride", "=", "1", ",", "name", "=", "''", ")", ":", "\n", "    ", "res", "=", "x", "\n", "\n", "x", "=", "Conv2D", "(", "out_channels", ",", "3", ",", "stride", ",", "'same'", ",", "use_bias", "=", "False", ",", "\n", "name", "=", "name", "+", "'/conv1'", ")", "(", "x", ")", "\n", "x", "=", "BatchNormalization", "(", "name", "=", "name", "+", "'/bn1'", ")", "(", "x", ")", "\n", "x", "=", "ReLU", "(", "name", "=", "name", "+", "'/relu1'", ")", "(", "x", ")", "\n", "\n", "x", "=", "Conv2D", "(", "out_channels", ",", "3", ",", "1", ",", "'same'", ",", "use_bias", "=", "False", ",", "\n", "name", "=", "name", "+", "'/conv2'", ")", "(", "x", ")", "\n", "x", "=", "BatchNormalization", "(", "name", "=", "name", "+", "'/bn2'", ")", "(", "x", ")", "\n", "\n", "if", "stride", "!=", "1", "or", "res", ".", "shape", "[", "-", "1", "]", "!=", "x", ".", "shape", "[", "-", "1", "]", ":", "\n", "        ", "res", "=", "Conv2D", "(", "out_channels", ",", "1", ",", "stride", ",", "use_bias", "=", "False", ",", "\n", "name", "=", "name", "+", "'/skip_conv'", ")", "(", "res", ")", "\n", "res", "=", "BatchNormalization", "(", "name", "=", "name", "+", "'/skip_bn'", ")", "(", "res", ")", "\n", "\n", "", "x", "=", "Add", "(", "name", "=", "name", "+", "'/add'", ")", "(", "[", "x", ",", "res", "]", ")", "\n", "x", "=", "ReLU", "(", "name", "=", "name", "+", "'/relu2'", ")", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.wmcnally_evopose2d.nets.hrnet.bottleneck": [[30, 55], ["Conv2D", "BatchNormalization", "ReLU", "Conv2D", "BatchNormalization", "ReLU", "Conv2D", "BatchNormalization", "Add", "ReLU", "Conv2D", "BatchNormalization"], "function", ["None"], ["", "def", "bottleneck", "(", "x", ",", "out_channels", ",", "stride", "=", "1", ",", "expansion", "=", "4", ",", "name", "=", "''", ")", ":", "\n", "    ", "res", "=", "x", "\n", "\n", "x", "=", "Conv2D", "(", "out_channels", ",", "1", ",", "1", ",", "use_bias", "=", "False", ",", "\n", "name", "=", "name", "+", "'/conv1'", ")", "(", "x", ")", "\n", "x", "=", "BatchNormalization", "(", "name", "=", "name", "+", "'/bn1'", ")", "(", "x", ")", "\n", "x", "=", "ReLU", "(", "name", "=", "name", "+", "'/relu1'", ")", "(", "x", ")", "\n", "\n", "x", "=", "Conv2D", "(", "out_channels", ",", "3", ",", "stride", ",", "'same'", ",", "use_bias", "=", "False", ",", "\n", "name", "=", "name", "+", "'/conv2'", ")", "(", "x", ")", "\n", "x", "=", "BatchNormalization", "(", "name", "=", "name", "+", "'/bn2'", ")", "(", "x", ")", "\n", "x", "=", "ReLU", "(", "name", "=", "name", "+", "'/relu2'", ")", "(", "x", ")", "\n", "\n", "x", "=", "Conv2D", "(", "out_channels", "*", "expansion", ",", "1", ",", "1", ",", "use_bias", "=", "False", ",", "\n", "name", "=", "name", "+", "'/conv3'", ")", "(", "x", ")", "\n", "x", "=", "BatchNormalization", "(", "name", "=", "name", "+", "'/bn3'", ")", "(", "x", ")", "\n", "\n", "if", "stride", "!=", "1", "or", "res", ".", "shape", "[", "-", "1", "]", "!=", "x", ".", "shape", "[", "-", "1", "]", ":", "\n", "        ", "res", "=", "Conv2D", "(", "out_channels", "*", "expansion", ",", "1", ",", "stride", ",", "use_bias", "=", "False", ",", "\n", "name", "=", "name", "+", "'/skip_conv'", ")", "(", "res", ")", "\n", "res", "=", "BatchNormalization", "(", "name", "=", "name", "+", "'/skip_bn'", ")", "(", "res", ")", "\n", "\n", "", "x", "=", "Add", "(", "name", "=", "name", "+", "'/add'", ")", "(", "[", "x", ",", "res", "]", ")", "\n", "x", "=", "ReLU", "(", "name", "=", "name", "+", "'/relu3'", ")", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.wmcnally_evopose2d.nets.hrnet.transition": [[63, 85], ["len", "len", "range", "xs_next.append", "Conv2D", "BatchNormalization", "ReLU", "Conv2D", "BatchNormalization", "ReLU"], "function", ["None"], ["def", "transition", "(", "xs", ",", "out_channels", ",", "name", "=", "''", ")", ":", "\n", "    ", "n_branch_pre", "=", "len", "(", "xs", ")", "\n", "n_branch_cur", "=", "len", "(", "out_channels", ")", "\n", "\n", "xs_next", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "n_branch_cur", ")", ":", "\n", "        ", "if", "i", "<", "n_branch_pre", ":", "\n", "            ", "x", "=", "xs", "[", "i", "]", "\n", "if", "x", ".", "shape", "[", "-", "1", "]", "!=", "out_channels", "[", "i", "]", ":", "\n", "                ", "x", "=", "Conv2D", "(", "out_channels", "[", "i", "]", ",", "3", ",", "1", ",", "'same'", ",", "use_bias", "=", "False", ",", "\n", "name", "=", "name", "+", "'/b{}/conv'", ".", "format", "(", "i", "+", "1", ")", ")", "(", "x", ")", "\n", "x", "=", "BatchNormalization", "(", "name", "=", "name", "+", "'/b{}/bn'", ".", "format", "(", "i", "+", "1", ")", ")", "(", "x", ")", "\n", "x", "=", "ReLU", "(", "name", "=", "name", "+", "'/b{}/relu'", ".", "format", "(", "i", "+", "1", ")", ")", "(", "x", ")", "\n", "", "", "else", ":", "\n", "# new branch", "\n", "            ", "x", "=", "xs", "[", "-", "1", "]", "\n", "x", "=", "Conv2D", "(", "out_channels", "[", "i", "]", ",", "3", ",", "2", ",", "'same'", ",", "use_bias", "=", "False", ",", "\n", "name", "=", "name", "+", "'/b{}/conv'", ".", "format", "(", "i", "+", "1", ")", ")", "(", "x", ")", "\n", "x", "=", "BatchNormalization", "(", "name", "=", "name", "+", "'/b{}/bn'", ".", "format", "(", "i", "+", "1", ")", ")", "(", "x", ")", "\n", "x", "=", "ReLU", "(", "name", "=", "name", "+", "'/b{}/relu'", ".", "format", "(", "i", "+", "1", ")", ")", "(", "x", ")", "\n", "", "xs_next", ".", "append", "(", "x", ")", "\n", "", "return", "xs_next", "\n", "\n"]], "home.repos.pwc.inspect_result.wmcnally_evopose2d.nets.hrnet.fuse_scales": [[87, 124], ["range", "len", "len", "range", "fusion_outs.append", "len", "to_be_fused.append", "Add", "ReLU", "range", "Conv2DTranspose", "BatchNormalization", "Conv2D", "BatchNormalization", "UpSampling2D", "Conv2D", "BatchNormalization", "Conv2D", "BatchNormalization", "ReLU"], "function", ["None"], ["", "def", "fuse_scales", "(", "xs", ",", "name", "=", "''", ",", "upsample", "=", "'transpose'", ")", ":", "\n", "    ", "if", "len", "(", "xs", ")", "==", "1", ":", "\n", "        ", "return", "xs", "\n", "\n", "", "fusion_outs", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "xs", ")", ")", ":", "\n", "        ", "to_be_fused", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "len", "(", "xs", ")", ")", ":", "\n", "            ", "x", "=", "xs", "[", "j", "]", "\n", "if", "j", ">", "i", ":", "\n", "                ", "if", "upsample", "==", "'transpose'", ":", "\n", "                    ", "x", "=", "Conv2DTranspose", "(", "xs", "[", "i", "]", ".", "shape", "[", "-", "1", "]", ",", "1", ",", "2", "**", "(", "j", "-", "i", ")", ",", "use_bias", "=", "False", ",", "\n", "name", "=", "name", "+", "'/b{}{}_conv'", ".", "format", "(", "i", ",", "j", ")", ")", "(", "x", ")", "\n", "x", "=", "BatchNormalization", "(", "name", "=", "name", "+", "'/b{}{}_bn'", ".", "format", "(", "i", ",", "j", ")", ")", "(", "x", ")", "\n", "", "else", ":", "\n", "                    ", "x", "=", "Conv2D", "(", "xs", "[", "i", "]", ".", "shape", "[", "-", "1", "]", ",", "1", ",", "1", ",", "use_bias", "=", "False", ",", "\n", "name", "=", "name", "+", "'/b{}{}_conv'", ".", "format", "(", "i", ",", "j", ")", ")", "(", "x", ")", "\n", "x", "=", "BatchNormalization", "(", "name", "=", "name", "+", "'/b{}{}_bn'", ".", "format", "(", "i", ",", "j", ")", ")", "(", "x", ")", "\n", "x", "=", "UpSampling2D", "(", "size", "=", "2", "**", "(", "j", "-", "i", ")", ",", "interpolation", "=", "'nearest'", ")", "(", "x", ")", "\n", "", "", "elif", "j", "<", "i", ":", "\n", "                ", "for", "k", "in", "range", "(", "i", "-", "j", ")", ":", "\n", "                    ", "if", "k", "==", "i", "-", "j", "-", "1", ":", "\n", "                        ", "out_channels", "=", "xs", "[", "i", "]", ".", "shape", "[", "-", "1", "]", "\n", "x", "=", "Conv2D", "(", "out_channels", ",", "3", ",", "2", ",", "'same'", ",", "use_bias", "=", "False", ",", "\n", "name", "=", "name", "+", "'/b{}{}_conv{}'", ".", "format", "(", "i", ",", "j", ",", "k", ")", ")", "(", "x", ")", "\n", "x", "=", "BatchNormalization", "(", "name", "=", "name", "+", "'/b{}{}_bn{}'", ".", "format", "(", "i", ",", "j", ",", "k", ")", ")", "(", "x", ")", "\n", "", "else", ":", "\n", "                        ", "out_channels", "=", "xs", "[", "j", "]", ".", "shape", "[", "-", "1", "]", "\n", "x", "=", "Conv2D", "(", "out_channels", ",", "3", ",", "2", ",", "'same'", ",", "use_bias", "=", "False", ",", "\n", "name", "=", "name", "+", "'/b{}{}_conv{}'", ".", "format", "(", "i", ",", "j", ",", "k", ")", ")", "(", "x", ")", "\n", "x", "=", "BatchNormalization", "(", "name", "=", "name", "+", "'/b{}{}_bn{}'", ".", "format", "(", "i", ",", "j", ",", "k", ")", ")", "(", "x", ")", "\n", "x", "=", "ReLU", "(", "name", "=", "name", "+", "'/b{}{}_relu{}'", ".", "format", "(", "i", ",", "j", ",", "k", ")", ")", "(", "x", ")", "\n", "", "", "", "to_be_fused", ".", "append", "(", "x", ")", "\n", "", "x", "=", "Add", "(", "name", "=", "name", "+", "'/b{}_add'", ".", "format", "(", "i", ")", ")", "(", "to_be_fused", ")", "\n", "x", "=", "ReLU", "(", "name", "=", "name", "+", "'/b{}_relu'", ".", "format", "(", "i", ")", ")", "(", "x", ")", "\n", "fusion_outs", ".", "append", "(", "x", ")", "\n", "", "return", "fusion_outs", "\n", "\n"]], "home.repos.pwc.inspect_result.wmcnally_evopose2d.nets.hrnet.module": [[126, 134], ["range", "hrnet.fuse_scales", "len", "range"], "function", ["home.repos.pwc.inspect_result.wmcnally_evopose2d.nets.hrnet.fuse_scales"], ["", "def", "module", "(", "xs", ",", "stage_cfg", ",", "name", "=", "''", ")", ":", "\n", "    ", "for", "i", "in", "range", "(", "len", "(", "xs", ")", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "stage_cfg", "[", "'NUM_BLOCKS'", "]", "[", "i", "]", ")", ":", "\n", "            ", "xs", "[", "i", "]", "=", "blocks_dict", "[", "stage_cfg", "[", "'BLOCK'", "]", "]", "(", "\n", "xs", "[", "i", "]", ",", "stage_cfg", "[", "'NUM_CHANNELS'", "]", "[", "i", "]", ",", "\n", "name", "=", "name", "+", "'/b{}{}'", ".", "format", "(", "i", ",", "j", ")", ")", "\n", "", "", "xs", "=", "fuse_scales", "(", "xs", ",", "name", "=", "name", "+", "'/fusion'", ",", "upsample", "=", "stage_cfg", ".", "UPSAMPLE", ")", "\n", "return", "xs", "\n", "\n"]], "home.repos.pwc.inspect_result.wmcnally_evopose2d.nets.hrnet.stage": [[136, 141], ["hrnet.transition", "range", "hrnet.module"], "function", ["home.repos.pwc.inspect_result.wmcnally_evopose2d.nets.hrnet.transition", "home.repos.pwc.inspect_result.wmcnally_evopose2d.nets.hrnet.module"], ["", "def", "stage", "(", "xs", ",", "stage_cfg", ",", "name", "=", "''", ")", ":", "\n", "    ", "xs", "=", "transition", "(", "xs", ",", "stage_cfg", "[", "'NUM_CHANNELS'", "]", ",", "name", "=", "name", "+", "'/transition'", ")", "\n", "for", "i", "in", "range", "(", "stage_cfg", "[", "'NUM_MODULES'", "]", ")", ":", "\n", "        ", "xs", "=", "module", "(", "xs", ",", "stage_cfg", ",", "name", "=", "name", "+", "'/m{}'", ".", "format", "(", "i", ")", ")", "\n", "", "return", "xs", "\n", "\n"]], "home.repos.pwc.inspect_result.wmcnally_evopose2d.nets.hrnet.HRNet": [[143, 163], ["Input", "range", "enumerate", "tensorflow.keras.Model", "utils.add_regularization", "hrnet.stage", "Conv2D", "tensorflow.keras.regularizers.l2", "Conv2D", "BatchNormalization", "ReLU", "range"], "function", ["home.repos.pwc.inspect_result.wmcnally_evopose2d.None.utils.add_regularization", "home.repos.pwc.inspect_result.wmcnally_evopose2d.nets.hrnet.stage"], ["", "def", "HRNet", "(", "cfg", ")", ":", "\n", "    ", "input", "=", "Input", "(", "cfg", ".", "DATASET", ".", "INPUT_SHAPE", ")", "\n", "x", "=", "input", "\n", "\n", "# stem", "\n", "for", "i", "in", "range", "(", "2", ")", ":", "\n", "        ", "x", "=", "Conv2D", "(", "64", ",", "3", ",", "2", ",", "'same'", ",", "use_bias", "=", "False", ",", "\n", "name", "=", "'conv{}'", ".", "format", "(", "i", "+", "1", ")", ")", "(", "x", ")", "\n", "x", "=", "BatchNormalization", "(", "name", "=", "'bn{}'", ".", "format", "(", "i", "+", "1", ")", ")", "(", "x", ")", "\n", "x", "=", "ReLU", "(", "name", "=", "'relu{}'", ".", "format", "(", "i", "+", "1", ")", ")", "(", "x", ")", "\n", "\n", "", "xs", "=", "[", "x", "]", "\n", "stage_cfgs", "=", "[", "cfg", ".", "MODEL", "[", "'STAGE{}'", ".", "format", "(", "i", "+", "1", ")", "]", "for", "i", "in", "range", "(", "4", ")", "]", "\n", "for", "i", ",", "stage_cfg", "in", "enumerate", "(", "stage_cfgs", ")", ":", "\n", "        ", "xs", "=", "stage", "(", "xs", ",", "stage_cfg", ",", "name", "=", "'s{}'", ".", "format", "(", "i", "+", "1", ")", ")", "\n", "\n", "", "output", "=", "Conv2D", "(", "cfg", ".", "DATASET", ".", "OUTPUT_SHAPE", "[", "-", "1", "]", ",", "1", ",", "name", "=", "'final_conv'", ")", "(", "xs", "[", "0", "]", ")", "\n", "model", "=", "Model", "(", "inputs", "=", "input", ",", "outputs", "=", "output", ",", "name", "=", "'hrnet'", ")", "\n", "add_regularization", "(", "model", ",", "l2", "(", "cfg", ".", "TRAIN", ".", "WD", ")", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.wmcnally_evopose2d.nets.simple_basline.SimpleBaseline": [[14, 51], ["tensorflow.keras.regularizers.l2", "utils.add_regularization", "range", "tensorflow.keras.Model", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.Conv2DTranspose", "tensorflow.keras.layers.BatchNormalization", "tensorflow.keras.layers.Activation"], "function", ["home.repos.pwc.inspect_result.wmcnally_evopose2d.None.utils.add_regularization"], ["def", "SimpleBaseline", "(", "cfg", ")", ":", "\n", "    ", "regularizer", "=", "l2", "(", "cfg", ".", "TRAIN", ".", "WD", ")", "\n", "\n", "if", "cfg", ".", "MODEL", ".", "LOAD_WEIGHTS", ":", "\n", "        ", "weights", "=", "'imagenet'", "\n", "", "else", ":", "\n", "        ", "weights", "=", "None", "\n", "\n", "", "backbone", "=", "BACKBONES", "[", "cfg", ".", "MODEL", ".", "BACKBONE", "]", "(", "\n", "weights", "=", "weights", ",", "\n", "include_top", "=", "False", ",", "\n", "input_shape", "=", "cfg", ".", "DATASET", ".", "INPUT_SHAPE", ")", "\n", "\n", "backbone", "=", "add_regularization", "(", "backbone", ",", "regularizer", ")", "\n", "\n", "x", "=", "backbone", ".", "output", "\n", "for", "i", "in", "range", "(", "3", ")", ":", "\n", "        ", "x", "=", "layers", ".", "Conv2DTranspose", "(", "\n", "cfg", ".", "MODEL", ".", "HEAD_CHANNELS", ",", "\n", "cfg", ".", "MODEL", ".", "HEAD_KERNEL", ",", "\n", "strides", "=", "2", ",", "\n", "padding", "=", "'same'", ",", "\n", "use_bias", "=", "False", ",", "\n", "kernel_regularizer", "=", "regularizer", ",", "\n", "name", "=", "'head_conv{}'", ".", "format", "(", "i", "+", "1", ")", ")", "(", "x", ")", "\n", "x", "=", "layers", ".", "BatchNormalization", "(", "name", "=", "'head_bn{}'", ".", "format", "(", "i", "+", "1", ")", ")", "(", "x", ")", "\n", "x", "=", "layers", ".", "Activation", "(", "cfg", ".", "MODEL", ".", "HEAD_ACTIVATION", ",", "name", "=", "'head_act{}'", ".", "format", "(", "i", "+", "1", ")", ")", "(", "x", ")", "\n", "\n", "", "x", "=", "layers", ".", "Conv2D", "(", "\n", "cfg", ".", "DATASET", ".", "OUTPUT_SHAPE", "[", "-", "1", "]", ",", "\n", "1", ",", "\n", "padding", "=", "'same'", ",", "\n", "use_bias", "=", "True", ",", "\n", "kernel_regularizer", "=", "regularizer", ",", "\n", "name", "=", "'final_conv'", ")", "(", "x", ")", "\n", "\n", "return", "Model", "(", "backbone", ".", "input", ",", "x", ",", "name", "=", "'sb_{}'", ".", "format", "(", "cfg", ".", "MODEL", ".", "BACKBONE", ")", ")", "\n", "\n"]]}