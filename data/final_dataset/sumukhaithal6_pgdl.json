{"home.repos.pwc.inspect_result.sumukhaithal6_pgdl.ingestion_program.data_manager.DataManager.__init__": [[45, 53], ["os.path.join", "os.path.join", "len", "os.path.join", "sorted", "os.listdir"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "basename", ",", "input_dir", ")", ":", "\n", "        ", "self", ".", "basename", "=", "basename", "\n", "self", ".", "input_dir", "=", "input_dir", "\n", "self", ".", "parent_directory", "=", "os", ".", "path", ".", "join", "(", "input_dir", ",", "basename", ")", "\n", "self", ".", "data_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "parent_directory", ",", "'dataset_1'", ")", "\n", "self", ".", "model_ids", "=", "[", "mid", "for", "mid", "in", "sorted", "(", "os", ".", "listdir", "(", "self", ".", "parent_directory", ")", ")", "if", "'model'", "in", "mid", "and", "'json'", "not", "in", "mid", "]", "\n", "self", ".", "full_model_paths", "=", "[", "os", ".", "path", ".", "join", "(", "self", ".", "parent_directory", ",", "mid", ")", "for", "mid", "in", "self", ".", "model_ids", "]", "\n", "self", ".", "num_models", "=", "len", "(", "self", ".", "model_ids", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sumukhaithal6_pgdl.ingestion_program.data_manager.DataManager.__repr__": [[54, 56], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "\"DataManager : \"", "+", "self", ".", "basename", "\n", "\n"]], "home.repos.pwc.inspect_result.sumukhaithal6_pgdl.ingestion_program.data_manager.DataManager.__str__": [[57, 61], ["len"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "val", "=", "\"DataManager : \"", "+", "self", ".", "basename", "+", "\"\\ninfo:\\n\"", "\n", "val", "=", "val", "+", "\"number of models: {}\"", ".", "format", "(", "len", "(", "self", ".", "model_ids", ")", ")", "\n", "return", "val", "\n", "\n"]], "home.repos.pwc.inspect_result.sumukhaithal6_pgdl.ingestion_program.data_manager.DataManager.load_model": [[62, 80], ["os.path.join", "model_utils.model_def_to_keras_sequential", "model_utils.model_def_to_keras_sequential.build", "os.path.join", "os.path.join", "os.path.exists", "model_utils.model_def_to_keras_sequential.load_weights", "open", "json.load", "os.path.join", "model_utils.model_def_to_keras_sequential.load_weights", "model_utils.model_def_to_keras_sequential.get_weights", "print", "print"], "methods", ["home.repos.pwc.inspect_result.sumukhaithal6_pgdl.ingestion_program.model_utils.model_def_to_keras_sequential"], ["", "def", "load_model", "(", "self", ",", "model_id", ")", ":", "\n", "        ", "\"\"\"Loads the model weight and the initial weight, if any.\"\"\"", "\n", "model_directory", "=", "os", ".", "path", ".", "join", "(", "self", ".", "parent_directory", ",", "model_id", ")", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "model_directory", ",", "'config.json'", ")", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "config", "=", "json", ".", "load", "(", "f", ")", "\n", "", "model_instance", "=", "model_def_to_keras_sequential", "(", "config", "[", "'model_config'", "]", ")", "\n", "model_instance", ".", "build", "(", "[", "0", "]", "+", "config", "[", "'input_shape'", "]", ")", "\n", "weights_path", "=", "os", ".", "path", ".", "join", "(", "model_directory", ",", "'weights.hdf5'", ")", "\n", "initial_weights_path", "=", "os", ".", "path", ".", "join", "(", "model_directory", ",", "'weights_init.hdf5'", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "initial_weights_path", ")", ":", "\n", "          ", "try", ":", "\n", "            ", "model_instance", ".", "load_weights", "(", "initial_weights_path", ")", "\n", "model_instance", ".", "initial_weights", "=", "model_instance", ".", "get_weights", "(", ")", "\n", "", "except", "ValueError", "as", "e", ":", "\n", "            ", "print", "(", "'Error while loading initial weights of {} from {}'", ".", "format", "(", "model_id", ",", "initial_weights_path", ")", ")", "\n", "print", "(", "e", ")", "\n", "", "", "model_instance", ".", "load_weights", "(", "weights_path", ")", "\n", "return", "model_instance", "\n", "\n"]], "home.repos.pwc.inspect_result.sumukhaithal6_pgdl.ingestion_program.data_manager.DataManager.load_training_data": [[81, 98], ["glob.glob", "tensorflow.data.TFRecordDataset", "tensorflow.data.TFRecordDataset.map", "os.path.join", "tensorflow.io.parse_single_example", "tensorflow.io.parse_tensor", "tensorflow.io.parse_tensor", "tensorflow.io.FixedLenFeature", "tensorflow.io.FixedLenFeature"], "methods", ["None"], ["", "def", "load_training_data", "(", "self", ")", ":", "\n", "        ", "\"\"\"Loads the training data.\"\"\"", "\n", "path_to_shards", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "self", ".", "data_dir", ",", "'train'", ",", "'shard_*.tfrecord'", ")", ")", "\n", "dataset", "=", "tf", ".", "data", ".", "TFRecordDataset", "(", "path_to_shards", ")", "\n", "\n", "def", "_deserialize_example", "(", "serialized_example", ")", ":", "\n", "            ", "record", "=", "tf", ".", "io", ".", "parse_single_example", "(", "\n", "serialized_example", ",", "\n", "features", "=", "{", "\n", "'inputs'", ":", "tf", ".", "io", ".", "FixedLenFeature", "(", "[", "]", ",", "tf", ".", "string", ")", ",", "\n", "'output'", ":", "tf", ".", "io", ".", "FixedLenFeature", "(", "[", "]", ",", "tf", ".", "string", ")", "\n", "}", ")", "\n", "inputs", "=", "tf", ".", "io", ".", "parse_tensor", "(", "record", "[", "'inputs'", "]", ",", "out_type", "=", "tf", ".", "float32", ")", "\n", "output", "=", "tf", ".", "io", ".", "parse_tensor", "(", "record", "[", "'output'", "]", ",", "out_type", "=", "tf", ".", "int32", ")", "\n", "return", "inputs", ",", "output", "\n", "\n", "", "return", "dataset", ".", "map", "(", "_deserialize_example", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sumukhaithal6_pgdl.ingestion_program.data_manager.name_filter": [[35, 40], ["None"], "function", ["None"], ["def", "name_filter", "(", "name", ")", ":", "\n", "    ", "for", "fn", "in", "filter_filenames", ":", "\n", "        ", "if", "fn", "in", "name", ":", "\n", "            ", "return", "True", "\n", "", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.sumukhaithal6_pgdl.ingestion_program.data_converter.file_to_array": [[33, 46], ["open", "data_file.readlines", "print", "print", "lines[].strip().split", "range", "lines[].strip", "len"], "function", ["None"], ["def", "file_to_array", "(", "filename", ",", "verbose", "=", "False", ")", ":", "\n", "    ", "''' Converts a file to a list of list of STRING\n    It differs from np.genfromtxt in that the number of columns doesn't need to be constant'''", "\n", "try", ":", "\n", "    \t", "with", "open", "(", "filename", ",", "\"r\"", ")", "as", "data_file", ":", "\n", "        \t", "if", "verbose", ":", "print", "(", "\"Reading {}...\"", ".", "format", "(", "filename", ")", ")", "\n", "lines", "=", "data_file", ".", "readlines", "(", ")", "\n", "#print lines", "\n", "if", "verbose", ":", "print", "(", "\"Converting {} to correct array...\"", ".", "format", "(", "filename", ")", ")", "\n", "data", "=", "[", "lines", "[", "i", "]", ".", "strip", "(", ")", ".", "split", "(", ")", "for", "i", "in", "range", "(", "len", "(", "lines", ")", ")", "]", "\n", "", "", "except", ":", "\n", "    \t", "data", "=", "[", "]", "\n", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.sumukhaithal6_pgdl.ingestion_program.data_converter.file_to_array_mv": [[47, 71], ["set", "open", "data_file.readlines", "print", "print", "l.strip().split", "range", "print", "lines[].strip().split", "len", "tmp2.split", "range", "l.strip", "len", "set.add", "print", "print", "lines[].strip", "len"], "function", ["None"], ["", "def", "file_to_array_mv", "(", "filename", ",", "verbose", "=", "False", ")", ":", "\n", "    ", "''' Converts a file to a list of list of STRING\n    It differs from np.genfromtxt in that the number of columns doesn't need to be constant'''", "\n", "data", "=", "[", "]", "\n", "mcv", "=", "set", "(", ")", ";", "\n", "with", "open", "(", "filename", ",", "\"r\"", ")", "as", "data_file", ":", "\n", "        ", "if", "verbose", ":", "print", "(", "\"Reading {}...\"", ".", "format", "(", "filename", ")", ")", "\n", "lines", "=", "data_file", ".", "readlines", "(", ")", "\n", "for", "l", "in", "lines", ":", "\n", "            ", "tmp", "=", "l", ".", "strip", "(", ")", ".", "split", "(", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "tmp", ")", ")", ":", "\n", "                ", "tmp2", "=", "tmp", "[", "i", "]", "\n", "#print \"This is TMP2\"", "\n", "#print tmp2", "\n", "tmp3", "=", "tmp2", ".", "split", "(", "\",\"", ")", "\n", "if", "len", "(", "tmp3", ")", ">", "1", ":", "\n", "                    ", "mcv", ".", "add", "(", "i", ")", "\n", "print", "(", "\"This is TMP3\"", ")", "\n", "print", "(", "tmp3", ")", "\n", "", "", "", "print", "(", "mcv", ")", "\n", "#print lines", "\n", "if", "verbose", ":", "print", "(", "\"Converting {} to correct array...\"", ".", "format", "(", "filename", ")", ")", "\n", "data", "=", "[", "lines", "[", "i", "]", ".", "strip", "(", ")", ".", "split", "(", ")", "for", "i", "in", "range", "(", "len", "(", "lines", ")", ")", "]", "\n", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.sumukhaithal6_pgdl.ingestion_program.data_converter.file_to_libsvm": [[73, 96], ["print", "sklearn.datasets.load_svmlight_file", "os.remove", "open", "data_file.readlines", "open", "sklearn.datasets.load_svmlight_file.strip().split", "f.write", "range", "f.write", "len", "sklearn.datasets.load_svmlight_file.strip", "f.write", "f.write"], "function", ["home.repos.pwc.inspect_result.sumukhaithal6_pgdl.ingestion_program.data_io.write", "home.repos.pwc.inspect_result.sumukhaithal6_pgdl.ingestion_program.data_io.write", "home.repos.pwc.inspect_result.sumukhaithal6_pgdl.ingestion_program.data_io.write", "home.repos.pwc.inspect_result.sumukhaithal6_pgdl.ingestion_program.data_io.write"], ["", "def", "file_to_libsvm", "(", "filename", ",", "data_binary", ",", "n_features", ")", ":", "\n", "    ", "''' Converts a file to svmlib format and return csr matrix \n    filname = path of file \n    data_binary = True if is sparse binary data False else \n    n_features = number of features\n    '''", "\n", "data", "=", "[", "]", "\n", "with", "open", "(", "filename", ",", "\"r\"", ")", "as", "data_file", ":", "\n", "        ", "lines", "=", "data_file", ".", "readlines", "(", ")", "\n", "with", "open", "(", "'tmp.txt'", ",", "'w'", ")", "as", "f", ":", "\n", "            ", "for", "l", "in", "lines", ":", "\n", "                ", "tmp", "=", "l", ".", "strip", "(", ")", ".", "split", "(", ")", "\n", "f", ".", "write", "(", "\"0 \"", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "tmp", ")", ")", ":", "\n", "                    ", "if", "(", "data_binary", ")", ":", "\n", "                        ", "f", ".", "write", "(", "tmp", "[", "i", "]", "+", "\":1 \"", ")", "\n", "", "else", ":", "\n", "                        ", "f", ".", "write", "(", "tmp", "[", "i", "]", "+", "\" \"", ")", "\n", "", "", "f", ".", "write", "(", "\"\\n\"", ")", "\n", "", "", "", "print", "(", "\"-------------------- file_to_libsvm  ---------------------\"", ")", "\n", "l", "=", "load_svmlight_file", "(", "'tmp.txt'", ",", "zero_based", "=", "False", ",", "n_features", "=", "n_features", ")", "\n", "os", ".", "remove", "(", "\"tmp.txt\"", ")", "\n", "return", "l", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sumukhaithal6_pgdl.ingestion_program.data_converter.read_first_line": [[97, 104], ["open", "data_file.readline", "data_file.readline.strip().split", "data_file.readline.strip"], "function", ["None"], ["", "def", "read_first_line", "(", "filename", ")", ":", "\n", "\t", "''' Read fist line of file'''", "\n", "data", "=", "[", "]", "\n", "with", "open", "(", "filename", ",", "\"r\"", ")", "as", "data_file", ":", "\n", "\t\t", "line", "=", "data_file", ".", "readline", "(", ")", "\n", "data", "=", "line", ".", "strip", "(", ")", ".", "split", "(", ")", "\n", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.sumukhaithal6_pgdl.ingestion_program.data_converter.num_lines": [[105, 108], ["sum", "open"], "function", ["None"], ["", "def", "num_lines", "(", "filename", ")", ":", "\n", "\t", "''' Count the number of lines of file'''", "\n", "return", "sum", "(", "1", "for", "line", "in", "open", "(", "filename", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sumukhaithal6_pgdl.ingestion_program.data_converter.binarization": [[109, 120], ["numpy.array", "numpy.array", "len", "ValueError", "numpy.unique", "len", "numpy.amax", "numpy.amin", "numpy.unique"], "function", ["None"], ["", "def", "binarization", "(", "array", ")", ":", "\n", "\t", "''' Takes a binary-class datafile and turn the max value (positive class) into 1 and the min into 0'''", "\n", "array", "=", "np", ".", "array", "(", "array", ",", "dtype", "=", "float", ")", "# conversion needed to use np.inf after", "\n", "if", "len", "(", "np", ".", "unique", "(", "array", ")", ")", ">", "2", ":", "\n", "\t\t", "raise", "ValueError", "(", "\"The argument must be a binary-class datafile. {} classes detected\"", ".", "format", "(", "len", "(", "np", ".", "unique", "(", "array", ")", ")", ")", ")", "\n", "\n", "# manipulation which aims at avoid error in data with for example classes '1' and '2'.", "\n", "", "array", "[", "array", "==", "np", ".", "amax", "(", "array", ")", "]", "=", "np", ".", "inf", "\n", "array", "[", "array", "==", "np", ".", "amin", "(", "array", ")", "]", "=", "0", "\n", "array", "[", "array", "==", "np", ".", "inf", "]", "=", "1", "\n", "return", "np", ".", "array", "(", "array", ",", "dtype", "=", "int", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sumukhaithal6_pgdl.ingestion_program.data_converter.multilabel_to_multiclass": [[122, 125], ["data_converter.binarization", "numpy.array", "range", "numpy.nonzero", "len"], "function", ["home.repos.pwc.inspect_result.sumukhaithal6_pgdl.ingestion_program.data_converter.binarization"], ["", "def", "multilabel_to_multiclass", "(", "array", ")", ":", "\n", "\t", "array", "=", "binarization", "(", "array", ")", "\n", "return", "np", ".", "array", "(", "[", "np", ".", "nonzero", "(", "array", "[", "i", ",", ":", "]", ")", "[", "0", "]", "[", "0", "]", "for", "i", "in", "range", "(", "len", "(", "array", ")", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sumukhaithal6_pgdl.ingestion_program.data_converter.convert_to_num": [[126, 139], ["numpy.array", "numpy.array", "classid.reshape.reshape", "numpy.matmul", "len", "print", "range", "print"], "function", ["None"], ["", "def", "convert_to_num", "(", "Ybin", ",", "verbose", "=", "False", ")", ":", "\n", "\t", "''' Convert binary targets to numeric vector (typically classification target values)'''", "\n", "if", "len", "(", "Ybin", ")", "==", "0", ":", "return", "Ybin", "\n", "if", "verbose", ":", "print", "(", "\"\\tConverting to numeric vector\"", ")", "\n", "Ybin", "=", "np", ".", "array", "(", "Ybin", ")", "\n", "if", "Ybin", ".", "shape", "[", "1", "]", "==", "1", ":", "\n", "\t\t", "return", "Ybin", "\n", "", "classid", "=", "np", ".", "array", "(", "range", "(", "Ybin", ".", "shape", "[", "1", "]", ")", ")", "\n", "#classid=np.array([1, 0, 2])", "\n", "classid", "=", "classid", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "Ycont", "=", "np", ".", "matmul", "(", "Ybin", ",", "classid", ")", "\n", "if", "verbose", ":", "print", "(", "Ybin", ".", "shape", ",", "classid", ".", "shape", ",", "Ycont", ".", "shape", ")", "\n", "return", "Ycont", "\n", "\n"]], "home.repos.pwc.inspect_result.sumukhaithal6_pgdl.ingestion_program.data_converter.convert_to_bin": [[140, 149], ["range", "print", "len", "xrange", "len", "numpy.int"], "function", ["None"], ["", "def", "convert_to_bin", "(", "Ycont", ",", "nval", ",", "verbose", "=", "True", ")", ":", "\n", "    ", "''' Convert numeric vector to binary (typically classification target values)'''", "\n", "if", "verbose", ":", "print", "(", "\"\\t_______ Converting to binary representation\"", ")", "\n", "Ybin", "=", "[", "[", "0", "]", "*", "nval", "for", "x", "in", "xrange", "(", "len", "(", "Ycont", ")", ")", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "Ybin", ")", ")", ":", "\n", "        ", "line", "=", "Ybin", "[", "i", "]", "\n", "line", "[", "np", ".", "int", "(", "Ycont", "[", "i", "]", ")", "]", "=", "1", "\n", "Ybin", "[", "i", "]", "=", "line", "\n", "", "return", "Ybin", "\n", "\n"]], "home.repos.pwc.inspect_result.sumukhaithal6_pgdl.ingestion_program.data_converter.tp_filter": [[151, 174], ["issparse", "X.nonzero", "X[].max", "numpy.ravel", "sorted", "range", "len", "len", "print", "X[].min", "csr_matrix.sum", "numpy.sum", "range", "set", "sum", "len"], "function", ["None"], ["", "def", "tp_filter", "(", "X", ",", "Y", ",", "feat_num", "=", "1000", ",", "verbose", "=", "True", ")", ":", "\n", "    ", "''' TP feature selection in the spirit of the winners of the KDD cup 2001\n    Only for binary classification and sparse matrices'''", "\n", "\n", "if", "issparse", "(", "X", ")", "and", "len", "(", "Y", ".", "shape", ")", "==", "1", "and", "len", "(", "set", "(", "Y", ")", ")", "==", "2", "and", "(", "sum", "(", "Y", ")", "/", "Y", ".", "shape", "[", "0", "]", ")", "<", "0.1", ":", "\n", "        ", "if", "verbose", ":", "print", "(", "\"========= Filtering features...\"", ")", "\n", "Posidx", "=", "Y", ">", "0", "\n", "nz", "=", "X", ".", "nonzero", "(", ")", "\n", "mx", "=", "X", "[", "nz", "]", ".", "max", "(", ")", "\n", "if", "X", "[", "nz", "]", ".", "min", "(", ")", "==", "mx", ":", "# sparse binary", "\n", "            ", "if", "mx", "!=", "1", ":", "X", "[", "nz", "]", "=", "1", "\n", "tp", "=", "csr_matrix", ".", "sum", "(", "X", "[", "Posidx", ",", ":", "]", ",", "axis", "=", "0", ")", "\n", "\n", "", "else", ":", "\n", "            ", "tp", "=", "np", ".", "sum", "(", "X", "[", "Posidx", ",", ":", "]", ">", "0", ",", "axis", "=", "0", ")", "\n", "\n", "\n", "", "tp", "=", "np", ".", "ravel", "(", "tp", ")", "\n", "idx", "=", "sorted", "(", "range", "(", "len", "(", "tp", ")", ")", ",", "key", "=", "tp", ".", "__getitem__", ",", "reverse", "=", "True", ")", "\n", "return", "idx", "[", "0", ":", "feat_num", "]", "\n", "", "else", ":", "\n", "        ", "feat_num", "=", "X", ".", "shape", "[", "1", "]", "\n", "return", "range", "(", "feat_num", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sumukhaithal6_pgdl.ingestion_program.data_converter.replace_missing": [[175, 184], ["X.getformat", "numpy.nan_to_num"], "function", ["None"], ["", "", "def", "replace_missing", "(", "X", ")", ":", "\n", "# This is ugly, but", "\n", "    ", "try", ":", "\n", "        ", "if", "X", ".", "getformat", "(", ")", "==", "'csr'", ":", "\n", "            ", "return", "X", "\n", "", "", "except", ":", "\n", "        ", "XX", "=", "np", ".", "nan_to_num", "(", "X", ")", "\n", "\n", "", "return", "XX", "\n", "", ""]], "home.repos.pwc.inspect_result.sumukhaithal6_pgdl.ingestion_program.data_io.list_files": [[51, 59], ["os.walk", "root.replace().count", "print", "print", "root.replace", "os.path.basename"], "function", ["None"], ["def", "list_files", "(", "startpath", ")", ":", "\n", "    ", "for", "root", ",", "dirs", ",", "files", "in", "os", ".", "walk", "(", "startpath", ")", ":", "\n", "        ", "level", "=", "root", ".", "replace", "(", "startpath", ",", "''", ")", ".", "count", "(", "os", ".", "sep", ")", "\n", "indent", "=", "' '", "*", "4", "*", "(", "level", ")", "\n", "print", "(", "'{}{}/'", ".", "format", "(", "indent", ",", "os", ".", "path", ".", "basename", "(", "root", ")", ")", ")", "\n", "subindent", "=", "' '", "*", "4", "*", "(", "level", "+", "1", ")", "\n", "for", "f", "in", "files", ":", "\n", "            ", "print", "(", "'{}{}'", ".", "format", "(", "subindent", ",", "f", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sumukhaithal6_pgdl.ingestion_program.data_io.save_json": [[62, 66], ["open", "json.dump"], "function", ["None"], ["", "", "", "def", "save_json", "(", "file_name", ",", "content", ")", ":", "\n", "    ", "\"\"\"Function that saves a python native dictionary as json.\"\"\"", "\n", "with", "open", "(", "file_name", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "json", ".", "dump", "(", "content", ",", "f", ",", "sort_keys", "=", "True", ",", "indent", "=", "4", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sumukhaithal6_pgdl.ingestion_program.data_io.read_as_df": [[69, 110], ["os.path.isfile", "print", "pandas.read_csv", "pandas.read_csv", "pandas.read_csv", "print", "print", "os.path.isfile", "print", "pandas.read_csv", "data_io.data", "print", "pandas.Series", "print", "pd.read_csv.assign", "numpy.ravel", "pandas.DataFrame", "pandas.read_csv", "numpy.arange().transpose", "pd.read_csv.dot", "[].ravel", "numpy.amax", "Y[].astype", "numpy.ravel", "numpy.arange", "numpy.array"], "function", ["home.repos.pwc.inspect_result.sumukhaithal6_pgdl.ingestion_program.data_io.data"], ["", "", "def", "read_as_df", "(", "basename", ",", "type", "=", "\"train\"", ")", ":", "\n", "    ", "''' Function to read the AutoML format and return a Panda Data Frame '''", "\n", "csvfile", "=", "basename", "+", "'_'", "+", "type", "+", "'.csv'", "\n", "if", "isfile", "(", "csvfile", ")", ":", "\n", "    \t", "print", "(", "'Reading '", "+", "basename", "+", "'_'", "+", "type", "+", "' from CSV'", ")", "\n", "XY", "=", "pd", ".", "read_csv", "(", "csvfile", ")", "\n", "return", "XY", "\n", "\n", "", "print", "(", "'Reading '", "+", "basename", "+", "'_'", "+", "type", "+", "' from AutoML format'", ")", "\n", "feat_name", "=", "pd", ".", "read_csv", "(", "basename", "+", "'_feat.name'", ",", "header", "=", "None", ")", "\n", "label_name", "=", "pd", ".", "read_csv", "(", "basename", "+", "'_label.name'", ",", "header", "=", "None", ",", "names", "=", "[", "'Class'", "]", ")", "\n", "X", "=", "pd", ".", "read_csv", "(", "basename", "+", "'_'", "+", "type", "+", "'.data'", ",", "sep", "=", "' '", ",", "names", "=", "np", ".", "ravel", "(", "feat_name", ")", ")", "\n", "[", "patnum", ",", "featnum", "]", "=", "X", ".", "shape", "\n", "print", "(", "'Number of examples = %d'", "%", "patnum", ")", "\n", "print", "(", "'Number of features = %d'", "%", "featnum", ")", "\n", "\n", "XY", "=", "X", "\n", "Y", "=", "[", "]", "\n", "solution_file", "=", "basename", "+", "'_'", "+", "type", "+", "'.solution'", "\n", "if", "isfile", "(", "solution_file", ")", ":", "\n", "# This was reading the original multi-column 1-hot encoding", "\n", "        ", "Y", "=", "data", "(", "solution_file", ")", "\n", "[", "patnum2", ",", "classnum", "]", "=", "Y", ".", "shape", "\n", "assert", "(", "patnum", "==", "patnum2", ")", "\n", "if", "classnum", "==", "1", ":", "\n", "        \t", "classnum", "=", "np", ".", "amax", "(", "Y", ")", "+", "1", "\n", "numerical_target", "=", "pd", ".", "DataFrame", "(", "{", "'Class'", ":", "Y", "[", ":", ",", "0", "]", ".", "astype", "(", "int", ")", "}", ")", "\n", "", "else", ":", "\n", "        \t", "Y", "=", "pd", ".", "read_csv", "(", "solution_file", ",", "sep", "=", "' '", ",", "names", "=", "np", ".", "ravel", "(", "label_name", ")", ")", "\n", "label_range", "=", "np", ".", "arange", "(", "classnum", ")", ".", "transpose", "(", ")", "# This is just a column vector [[0], [1], [2]]", "\n", "numerical_target", "=", "Y", ".", "dot", "(", "label_range", ")", "# This is a column vector of dim patnum with numerical categories", "\n", "#print(numerical_target)", "\n", "# Here we add the target values as a last column, this is convenient to use seaborn", "\n", "# Look at http://seaborn.pydata.org/tutorial/axis_grids.html for other ideas", "\n", "#label_name = pd.DataFrame(['0', '1', '2'], columns=['col'])", "\n", "", "print", "(", "label_name", ")", "\n", "nominal_target", "=", "pd", ".", "Series", "(", "np", ".", "array", "(", "label_name", ")", "[", "numerical_target", "]", ".", "ravel", "(", ")", ")", "# Same with nominal categories", "\n", "print", "(", "'Number of classes = %d'", "%", "classnum", ")", "\n", "XY", "=", "X", ".", "assign", "(", "target", "=", "nominal_target", ".", "values", ")", "# Add the last column", "\n", "\n", "", "return", "XY", "\n", "\n"]], "home.repos.pwc.inspect_result.sumukhaithal6_pgdl.ingestion_program.data_io.write_list": [[120, 124], ["swrite"], "function", ["None"], ["", "def", "write_list", "(", "lst", ")", ":", "\n", "    ", "''' Write a list of items to stderr (for debug purposes)'''", "\n", "for", "item", "in", "lst", ":", "\n", "        ", "swrite", "(", "item", "+", "\"\\n\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sumukhaithal6_pgdl.ingestion_program.data_io.print_dict": [[125, 130], ["print", "str"], "function", ["None"], ["", "", "def", "print_dict", "(", "verbose", ",", "dct", ")", ":", "\n", "    ", "''' Write a dict to stderr (for debug purposes)'''", "\n", "if", "verbose", ":", "\n", "        ", "for", "item", "in", "dct", ":", "\n", "            ", "print", "(", "item", "+", "\" = \"", "+", "str", "(", "dct", "[", "item", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sumukhaithal6_pgdl.ingestion_program.data_io.mkdir": [[131, 135], ["os.path.exists", "os.makedirs"], "function", ["None"], ["", "", "", "def", "mkdir", "(", "d", ")", ":", "\n", "    ", "''' Create a new directory'''", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "d", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "d", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sumukhaithal6_pgdl.ingestion_program.data_io.mvdir": [[136, 140], ["os.path.exists", "os.rename"], "function", ["None"], ["", "", "def", "mvdir", "(", "source", ",", "dest", ")", ":", "\n", "    ", "''' Move a directory'''", "\n", "if", "os", ".", "path", ".", "exists", "(", "source", ")", ":", "\n", "        ", "os", ".", "rename", "(", "source", ",", "dest", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sumukhaithal6_pgdl.ingestion_program.data_io.rmdir": [[141, 145], ["os.path.exists", "shutil.rmtree"], "function", ["None"], ["", "", "def", "rmdir", "(", "d", ")", ":", "\n", "    ", "''' Remove an existingdirectory'''", "\n", "if", "os", ".", "path", ".", "exists", "(", "d", ")", ":", "\n", "        ", "shutil", ".", "rmtree", "(", "d", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sumukhaithal6_pgdl.ingestion_program.data_io.vprint": [[146, 150], ["print"], "function", ["None"], ["", "", "def", "vprint", "(", "mode", ",", "t", ")", ":", "\n", "    ", "''' Print to stdout, only if in verbose mode'''", "\n", "if", "(", "mode", ")", ":", "\n", "            ", "print", "(", "t", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sumukhaithal6_pgdl.ingestion_program.data_io.write": [[153, 162], ["open", "output_file.write", "output_file.write", "type", "type", "float"], "function", ["home.repos.pwc.inspect_result.sumukhaithal6_pgdl.ingestion_program.data_io.write", "home.repos.pwc.inspect_result.sumukhaithal6_pgdl.ingestion_program.data_io.write"], ["", "", "def", "write", "(", "filename", ",", "predictions", ")", ":", "\n", "    ", "''' Write prediction scores in prescribed format'''", "\n", "with", "open", "(", "filename", ",", "\"w\"", ")", "as", "output_file", ":", "\n", "                ", "for", "row", "in", "predictions", ":", "\n", "                        ", "if", "type", "(", "row", ")", "is", "not", "np", ".", "ndarray", "and", "type", "(", "row", ")", "is", "not", "list", ":", "\n", "                                ", "row", "=", "[", "row", "]", "\n", "", "for", "val", "in", "row", ":", "\n", "                                ", "output_file", ".", "write", "(", "'{0:g} '", ".", "format", "(", "float", "(", "val", ")", ")", ")", "\n", "", "output_file", ".", "write", "(", "'\\n'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sumukhaithal6_pgdl.ingestion_program.data_io.zipdir": [[163, 174], ["os.path.isdir", "contextlib.closing", "os.walk", "zipfile.ZipFile", "os.path.join", "z.write", "len"], "function", ["home.repos.pwc.inspect_result.sumukhaithal6_pgdl.ingestion_program.data_io.write"], ["", "", "", "def", "zipdir", "(", "archivename", ",", "basedir", ")", ":", "\n", "    ", "'''Zip directory, from J.F. Sebastian http://stackoverflow.com/'''", "\n", "assert", "os", ".", "path", ".", "isdir", "(", "basedir", ")", "\n", "with", "closing", "(", "ZipFile", "(", "archivename", ",", "\"w\"", ",", "ZIP_DEFLATED", ")", ")", "as", "z", ":", "\n", "        ", "for", "root", ",", "dirs", ",", "files", "in", "os", ".", "walk", "(", "basedir", ")", ":", "\n", "#NOTE: ignore empty directories", "\n", "            ", "for", "fn", "in", "files", ":", "\n", "                ", "if", "fn", "[", "-", "4", ":", "]", "!=", "'.zip'", "and", "fn", "!=", "'.DS_Store'", ":", "\n", "                    ", "absfn", "=", "os", ".", "path", ".", "join", "(", "root", ",", "fn", ")", "\n", "zfn", "=", "absfn", "[", "len", "(", "basedir", ")", ":", "]", "#XXX: relative path", "\n", "z", ".", "write", "(", "absfn", ",", "zfn", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sumukhaithal6_pgdl.ingestion_program.data_io.inventory_data": [[177, 191], ["data_io.inventory_data_dir", "len", "len", "inventory_data_nodir.sort", "data_io.inventory_data_nodir", "print"], "function", ["home.repos.pwc.inspect_result.sumukhaithal6_pgdl.ingestion_program.data_io.inventory_data_dir", "home.repos.pwc.inspect_result.sumukhaithal6_pgdl.ingestion_program.data_io.inventory_data_nodir"], ["", "", "", "", "", "def", "inventory_data", "(", "input_dir", ")", ":", "\n", "    ", "''' Inventory the datasets in the input directory and return them in alphabetical order'''", "\n", "# Assume first that there is a hierarchy dataname/dataname_train.data", "\n", "training_names", "=", "inventory_data_dir", "(", "input_dir", ")", "\n", "ntr", "=", "len", "(", "training_names", ")", "\n", "if", "ntr", "==", "0", ":", "\n", "# Try to see if there is a flat directory structure", "\n", "        ", "training_names", "=", "inventory_data_nodir", "(", "input_dir", ")", "\n", "", "ntr", "=", "len", "(", "training_names", ")", "\n", "if", "ntr", "==", "0", ":", "\n", "        ", "print", "(", "'WARNING: Inventory data - No data file found'", ")", "\n", "training_names", "=", "[", "]", "\n", "", "training_names", ".", "sort", "(", ")", "\n", "return", "training_names", "\n", "\n"]], "home.repos.pwc.inspect_result.sumukhaithal6_pgdl.ingestion_program.data_io.inventory_data_nodir": [[192, 200], ["glob.glob", "range", "os.path.join", "len", "data_io.check_dataset", "name[].index", "name[].index"], "function", ["home.repos.pwc.inspect_result.sumukhaithal6_pgdl.ingestion_program.data_io.check_dataset"], ["", "def", "inventory_data_nodir", "(", "input_dir", ")", ":", "\n", "    ", "''' Inventory data, assuming flat directory structure'''", "\n", "training_names", "=", "ls", "(", "os", ".", "path", ".", "join", "(", "input_dir", ",", "'*_train.data'", ")", ")", "\n", "for", "i", "in", "range", "(", "0", ",", "len", "(", "training_names", ")", ")", ":", "\n", "        ", "name", "=", "training_names", "[", "i", "]", "\n", "training_names", "[", "i", "]", "=", "name", "[", "-", "name", "[", ":", ":", "-", "1", "]", ".", "index", "(", "filesep", ")", ":", "-", "name", "[", ":", ":", "-", "1", "]", ".", "index", "(", "'_'", ")", "-", "1", "]", "\n", "check_dataset", "(", "input_dir", ",", "training_names", "[", "i", "]", ")", "\n", "", "return", "training_names", "\n", "\n"]], "home.repos.pwc.inspect_result.sumukhaithal6_pgdl.ingestion_program.data_io.inventory_data_dir": [[201, 209], ["glob.glob", "range", "len", "name[].index", "name[].index"], "function", ["None"], ["", "def", "inventory_data_dir", "(", "input_dir", ")", ":", "\n", "    ", "''' Inventory data, assuming flat directory structure, assuming a directory hierarchy'''", "\n", "training_names", "=", "ls", "(", "input_dir", "+", "'/*/*_train1.data'", ")", "# This supports subdirectory structures obtained by concatenating bundles", "\n", "for", "i", "in", "range", "(", "0", ",", "len", "(", "training_names", ")", ")", ":", "\n", "        ", "name", "=", "training_names", "[", "i", "]", "\n", "training_names", "[", "i", "]", "=", "name", "[", "-", "name", "[", ":", ":", "-", "1", "]", ".", "index", "(", "filesep", ")", ":", "-", "name", "[", ":", ":", "-", "1", "]", ".", "index", "(", "'_'", ")", "-", "1", "]", "\n", "#check_dataset(os.path.join(input_dir, training_names[i]), training_names[i])", "\n", "", "return", "training_names", "\n", "\n"]], "home.repos.pwc.inspect_result.sumukhaithal6_pgdl.ingestion_program.data_io.check_dataset": [[210, 226], ["os.path.join", "os.path.join", "os.path.join", "os.path.isfile", "print", "exit", "os.path.isfile", "print", "exit", "os.path.isfile", "print", "exit"], "function", ["None"], ["", "def", "check_dataset", "(", "dirname", ",", "name", ")", ":", "\n", "    ", "''' Check the test and valid files are in the directory, as well as the solution'''", "\n", "valid_file", "=", "os", ".", "path", ".", "join", "(", "dirname", ",", "name", "+", "'_valid.data'", ")", "\n", "if", "not", "os", ".", "path", ".", "isfile", "(", "valid_file", ")", ":", "\n", "                ", "print", "(", "'No validation file for '", "+", "name", ")", "\n", "exit", "(", "1", ")", "\n", "", "test_file", "=", "os", ".", "path", ".", "join", "(", "dirname", ",", "name", "+", "'_test.data'", ")", "\n", "if", "not", "os", ".", "path", ".", "isfile", "(", "test_file", ")", ":", "\n", "                ", "print", "(", "'No test file for '", "+", "name", ")", "\n", "exit", "(", "1", ")", "\n", "# Check the training labels are there", "\n", "", "training_solution", "=", "os", ".", "path", ".", "join", "(", "dirname", ",", "name", "+", "'_train.solution'", ")", "\n", "if", "not", "os", ".", "path", ".", "isfile", "(", "training_solution", ")", ":", "\n", "                ", "print", "(", "'No training labels for '", "+", "name", ")", "\n", "exit", "(", "1", ")", "\n", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.sumukhaithal6_pgdl.ingestion_program.data_io.data": [[228, 232], ["numpy.array", "print", "data_converter.file_to_array", "numpy.array", "data_converter.file_to_array"], "function", ["home.repos.pwc.inspect_result.sumukhaithal6_pgdl.ingestion_program.data_converter.file_to_array", "home.repos.pwc.inspect_result.sumukhaithal6_pgdl.ingestion_program.data_converter.file_to_array"], ["", "def", "data", "(", "filename", ",", "nbr_features", "=", "None", ",", "verbose", "=", "False", ")", ":", "\n", "    ", "''' The 2nd parameter makes possible a using of the 3 functions of data reading (data, data_sparse, data_binary_sparse) without changing parameters'''", "\n", "if", "verbose", ":", "print", "(", "np", ".", "array", "(", "data_converter", ".", "file_to_array", "(", "filename", ")", ")", ")", "\n", "return", "np", ".", "array", "(", "data_converter", ".", "file_to_array", "(", "filename", ")", ",", "dtype", "=", "float", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sumukhaithal6_pgdl.ingestion_program.data_io.data_mv": [[233, 237], ["numpy.array", "print", "data_converter.file_to_array_mv", "numpy.array", "data_converter.file_to_array_mv"], "function", ["home.repos.pwc.inspect_result.sumukhaithal6_pgdl.ingestion_program.data_converter.file_to_array_mv", "home.repos.pwc.inspect_result.sumukhaithal6_pgdl.ingestion_program.data_converter.file_to_array_mv"], ["", "def", "data_mv", "(", "filename", ",", "nbr_features", "=", "None", ",", "verbose", "=", "False", ")", ":", "\n", "    ", "''' The 2nd parameter makes possible a using of the 3 functions of data reading (data, data_sparse, data_binary_sparse) without changing parameters'''", "\n", "if", "verbose", ":", "print", "(", "np", ".", "array", "(", "data_converter", ".", "file_to_array_mv", "(", "filename", ")", ")", ")", "\n", "return", "np", ".", "array", "(", "data_converter", ".", "file_to_array_mv", "(", "filename", ")", ",", "dtype", "=", "float", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sumukhaithal6_pgdl.ingestion_program.data_io.data_sparse": [[238, 243], ["data_converter.file_to_libsvm"], "function", ["home.repos.pwc.inspect_result.sumukhaithal6_pgdl.ingestion_program.data_converter.file_to_libsvm"], ["", "def", "data_sparse", "(", "filename", ",", "nbr_features", ")", ":", "\n", "    ", "''' This function takes as argument a file representing a sparse matrix\n    sparse_matrix[i][j] = \"a:b\" means matrix[i][a] = basename and load it with the loadsvm load_svmlight_file\n    '''", "\n", "return", "data_converter", ".", "file_to_libsvm", "(", "filename", "=", "filename", ",", "data_binary", "=", "False", ",", "n_features", "=", "nbr_features", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sumukhaithal6_pgdl.ingestion_program.data_io.data_binary_sparse": [[246, 252], ["data_converter.file_to_libsvm"], "function", ["home.repos.pwc.inspect_result.sumukhaithal6_pgdl.ingestion_program.data_converter.file_to_libsvm"], ["", "def", "data_binary_sparse", "(", "filename", ",", "nbr_features", ")", ":", "\n", "    ", "''' This fuction takes as argument a file representing a sparse binary matrix \n    sparse_binary_matrix[i][j] = \"a\"and transforms it temporarily into file svmlibs format( <index2>:<value2>)\n    to load it with the loadsvm load_svmlight_file\n    '''", "\n", "return", "data_converter", ".", "file_to_libsvm", "(", "filename", "=", "filename", ",", "data_binary", "=", "True", ",", "n_features", "=", "nbr_features", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sumukhaithal6_pgdl.ingestion_program.data_io.copy_results": [[257, 281], ["glob.glob", "glob.glob", "len", "data_io.vprint", "len", "data_io.vprint", "data_io.vprint", "missing_files.append", "data_io.vprint", "shutil.copy2", "shutil.copy2", "basename.capitalize"], "function", ["home.repos.pwc.inspect_result.sumukhaithal6_pgdl.ingestion_program.data_io.vprint", "home.repos.pwc.inspect_result.sumukhaithal6_pgdl.ingestion_program.data_io.vprint", "home.repos.pwc.inspect_result.sumukhaithal6_pgdl.ingestion_program.data_io.vprint", "home.repos.pwc.inspect_result.sumukhaithal6_pgdl.ingestion_program.data_io.vprint"], ["", "def", "copy_results", "(", "datanames", ",", "result_dir", ",", "output_dir", ",", "verbose", ")", ":", "\n", "    ", "''' This function copies all the [dataname.predict] results from result_dir to output_dir'''", "\n", "missing_files", "=", "[", "]", "\n", "for", "basename", "in", "datanames", ":", "\n", "        ", "try", ":", "\n", "            ", "missing", "=", "False", "\n", "test_files", "=", "ls", "(", "result_dir", "+", "\"/\"", "+", "basename", "+", "\"*_test*.predict\"", ")", "\n", "if", "len", "(", "test_files", ")", "==", "0", ":", "\n", "                ", "vprint", "(", "verbose", ",", "\"[-] Missing 'test' result files for \"", "+", "basename", ")", "\n", "missing", "=", "True", "\n", "", "valid_files", "=", "ls", "(", "result_dir", "+", "\"/\"", "+", "basename", "+", "\"*_valid*.predict\"", ")", "\n", "if", "len", "(", "valid_files", ")", "==", "0", ":", "\n", "                ", "vprint", "(", "verbose", ",", "\"[-] Missing 'valid' result files for \"", "+", "basename", ")", "\n", "missing", "=", "True", "\n", "", "if", "missing", "==", "False", ":", "\n", "                ", "for", "f", "in", "test_files", ":", "copy2", "(", "f", ",", "output_dir", ")", "\n", "for", "f", "in", "valid_files", ":", "copy2", "(", "f", ",", "output_dir", ")", "\n", "vprint", "(", "verbose", ",", "\"[+] \"", "+", "basename", ".", "capitalize", "(", ")", "+", "\" copied\"", ")", "\n", "", "else", ":", "\n", "                ", "missing_files", ".", "append", "(", "basename", ")", "\n", "", "", "except", ":", "\n", "            ", "vprint", "(", "verbose", ",", "\"[-] Missing result files\"", ")", "\n", "return", "datanames", "\n", "", "", "return", "missing_files", "\n", "\n"]], "home.repos.pwc.inspect_result.sumukhaithal6_pgdl.ingestion_program.data_io.show_dir": [[284, 291], ["print", "data_io.write_list", "data_io.write_list", "data_io.write_list", "data_io.write_list", "data_io.write_list", "glob.glob", "glob.glob", "glob.glob", "glob.glob", "glob.glob"], "function", ["home.repos.pwc.inspect_result.sumukhaithal6_pgdl.ingestion_program.data_io.write_list", "home.repos.pwc.inspect_result.sumukhaithal6_pgdl.ingestion_program.data_io.write_list", "home.repos.pwc.inspect_result.sumukhaithal6_pgdl.ingestion_program.data_io.write_list", "home.repos.pwc.inspect_result.sumukhaithal6_pgdl.ingestion_program.data_io.write_list", "home.repos.pwc.inspect_result.sumukhaithal6_pgdl.ingestion_program.data_io.write_list"], ["", "def", "show_dir", "(", "run_dir", ")", ":", "\n", "\t", "print", "(", "'\\n=== Listing run dir ==='", ")", "\n", "write_list", "(", "ls", "(", "run_dir", ")", ")", "\n", "write_list", "(", "ls", "(", "run_dir", "+", "'/*'", ")", ")", "\n", "write_list", "(", "ls", "(", "run_dir", "+", "'/*/*'", ")", ")", "\n", "write_list", "(", "ls", "(", "run_dir", "+", "'/*/*/*'", ")", ")", "\n", "write_list", "(", "ls", "(", "run_dir", "+", "'/*/*/*/*'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sumukhaithal6_pgdl.ingestion_program.data_io.show_io": [[292, 332], ["swrite", "swrite", "data_io.write_list", "data_io.write_list", "data_io.write_list", "swrite", "swrite", "data_io.write_list", "data_io.write_list", "data_io.write_list", "data_io.write_list", "swrite", "swrite", "data_io.write_list", "data_io.write_list", "swrite", "swrite", "swrite", "swrite", "glob.glob", "glob.glob", "glob.glob", "glob.glob", "glob.glob", "glob.glob", "glob.glob", "glob.glob", "glob.glob", "yaml.load", "yaml.load.items", "yaml.load", "yaml.load.items", "swrite", "open", "swrite", "swrite", "swrite", "open", "swrite", "swrite", "swrite", "os.getcwd", "os.getcwd", "os.path.join", "str", "str"], "function", ["home.repos.pwc.inspect_result.sumukhaithal6_pgdl.ingestion_program.data_io.write_list", "home.repos.pwc.inspect_result.sumukhaithal6_pgdl.ingestion_program.data_io.write_list", "home.repos.pwc.inspect_result.sumukhaithal6_pgdl.ingestion_program.data_io.write_list", "home.repos.pwc.inspect_result.sumukhaithal6_pgdl.ingestion_program.data_io.write_list", "home.repos.pwc.inspect_result.sumukhaithal6_pgdl.ingestion_program.data_io.write_list", "home.repos.pwc.inspect_result.sumukhaithal6_pgdl.ingestion_program.data_io.write_list", "home.repos.pwc.inspect_result.sumukhaithal6_pgdl.ingestion_program.data_io.write_list", "home.repos.pwc.inspect_result.sumukhaithal6_pgdl.ingestion_program.data_io.write_list", "home.repos.pwc.inspect_result.sumukhaithal6_pgdl.ingestion_program.data_io.write_list"], ["", "def", "show_io", "(", "input_dir", ",", "output_dir", ")", ":", "\n", "\t", "swrite", "(", "'\\n=== DIRECTORIES ===\\n\\n'", ")", "\n", "# Show this directory", "\n", "swrite", "(", "\"-- Current directory \"", "+", "pwd", "(", ")", "+", "\":\\n\"", ")", "\n", "write_list", "(", "ls", "(", "'.'", ")", ")", "\n", "write_list", "(", "ls", "(", "'./*'", ")", ")", "\n", "write_list", "(", "ls", "(", "'./*/*'", ")", ")", "\n", "swrite", "(", "\"\\n\"", ")", "\n", "\n", "# List input and output directories", "\n", "swrite", "(", "\"-- Input directory \"", "+", "input_dir", "+", "\":\\n\"", ")", "\n", "write_list", "(", "ls", "(", "input_dir", ")", ")", "\n", "write_list", "(", "ls", "(", "input_dir", "+", "'/*'", ")", ")", "\n", "write_list", "(", "ls", "(", "input_dir", "+", "'/*/*'", ")", ")", "\n", "write_list", "(", "ls", "(", "input_dir", "+", "'/*/*/*'", ")", ")", "\n", "swrite", "(", "\"\\n\"", ")", "\n", "swrite", "(", "\"-- Output directory  \"", "+", "output_dir", "+", "\":\\n\"", ")", "\n", "write_list", "(", "ls", "(", "output_dir", ")", ")", "\n", "write_list", "(", "ls", "(", "output_dir", "+", "'/*'", ")", ")", "\n", "swrite", "(", "\"\\n\"", ")", "\n", "\n", "# write meta data to sdterr", "\n", "swrite", "(", "'\\n=== METADATA ===\\n\\n'", ")", "\n", "swrite", "(", "\"-- Current directory \"", "+", "pwd", "(", ")", "+", "\":\\n\"", ")", "\n", "try", ":", "\n", "\t\t", "metadata", "=", "yaml", ".", "load", "(", "open", "(", "'metadata'", ",", "'r'", ")", ")", "\n", "for", "key", ",", "value", "in", "metadata", ".", "items", "(", ")", ":", "\n", "\t\t\t", "swrite", "(", "key", "+", "': '", ")", "\n", "swrite", "(", "str", "(", "value", ")", "+", "'\\n'", ")", "\n", "", "", "except", ":", "\n", "\t\t", "swrite", "(", "\"none\\n\"", ")", ";", "\n", "", "swrite", "(", "\"-- Input directory \"", "+", "input_dir", "+", "\":\\n\"", ")", "\n", "try", ":", "\n", "\t\t", "metadata", "=", "yaml", ".", "load", "(", "open", "(", "os", ".", "path", ".", "join", "(", "input_dir", ",", "'metadata'", ")", ",", "'r'", ")", ")", "\n", "for", "key", ",", "value", "in", "metadata", ".", "items", "(", ")", ":", "\n", "\t\t\t", "swrite", "(", "key", "+", "': '", ")", "\n", "swrite", "(", "str", "(", "value", ")", "+", "'\\n'", ")", "\n", "", "swrite", "(", "\"\\n\"", ")", "\n", "", "except", ":", "\n", "\t\t", "swrite", "(", "\"none\\n\"", ")", ";", "\n", "\n"]], "home.repos.pwc.inspect_result.sumukhaithal6_pgdl.ingestion_program.data_io.show_version": [[333, 341], ["swrite", "swrite", "swrite", "pprint.pprint"], "function", ["None"], ["", "", "def", "show_version", "(", ")", ":", "\n", "# Python version and library versions", "\n", "\t", "swrite", "(", "'\\n=== VERSIONS ===\\n\\n'", ")", "\n", "# Python version", "\n", "swrite", "(", "\"Python version: \"", "+", "version", "+", "\"\\n\\n\"", ")", "\n", "# Give information on the version installed", "\n", "swrite", "(", "\"Versions of libraries installed:\\n\"", ")", "\n", "pprint", "(", "[", "d", "for", "d", "in", "pkg_resources", ".", "working_set", "]", ",", "stream", "=", "stderr", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sumukhaithal6_pgdl.ingestion_program.data_io.total_size": [[344, 380], ["all_handlers.update", "set", "sys.getsizeof", "data_io.total_size.sizeof"], "function", ["None"], ["", "def", "total_size", "(", "o", ",", "handlers", "=", "{", "}", ",", "verbose", "=", "False", ")", ":", "\n", "    ", "\"\"\" Returns the approximate memory footprint an object and all of its contents.\n    Automatically finds the contents of the following builtin containers and\n    their subclasses:  tuple, list, deque, dict, set and frozenset.\n    To search other containers, add handlers to iterate over their contents:\n        handlers = {SomeContainerClass: iter,\n                    OtherContainerClass: OtherContainerClass.get_elements}\n    \"\"\"", "\n", "dict_handler", "=", "lambda", "d", ":", "chain", ".", "from_iterable", "(", "d", ".", "items", "(", ")", ")", "\n", "all_handlers", "=", "{", "tuple", ":", "iter", ",", "\n", "list", ":", "iter", ",", "\n", "deque", ":", "iter", ",", "\n", "dict", ":", "dict_handler", ",", "\n", "set", ":", "iter", ",", "\n", "frozenset", ":", "iter", ",", "\n", "}", "\n", "all_handlers", ".", "update", "(", "handlers", ")", "# user handlers take precedence", "\n", "seen", "=", "set", "(", ")", "# track which object id's have already been seen", "\n", "default_size", "=", "getsizeof", "(", "0", ")", "# estimate sizeof object without __sizeof__", "\n", "\n", "def", "sizeof", "(", "o", ")", ":", "\n", "        ", "if", "id", "(", "o", ")", "in", "seen", ":", "# do not double count the same object", "\n", "            ", "return", "0", "\n", "", "seen", ".", "add", "(", "id", "(", "o", ")", ")", "\n", "s", "=", "getsizeof", "(", "o", ",", "default_size", ")", "\n", "\n", "if", "verbose", ":", "\n", "            ", "print", "(", "s", ",", "type", "(", "o", ")", ",", "repr", "(", "o", ")", ",", "file", "=", "stderr", ")", "\n", "\n", "", "for", "typ", ",", "handler", "in", "all_handlers", ".", "items", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "o", ",", "typ", ")", ":", "\n", "                ", "s", "+=", "sum", "(", "map", "(", "sizeof", ",", "handler", "(", "o", ")", ")", ")", "\n", "break", "\n", "", "", "return", "s", "\n", "\n", "", "return", "sizeof", "(", "o", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sumukhaithal6_pgdl.ingestion_program.data_io.platform_score": [[382, 392], ["open", "csv.writer", "csv.writer.writerows", "platform.system", "platform.machine", "platform.platform", "float", "float"], "function", ["None"], ["", "def", "platform_score", "(", "basename", ",", "mem_used", ",", "n_estimators", ",", "time_spent", ",", "time_budget", ")", ":", "\n", "# write the results and platform information in a csv file (performance.csv)", "\n", "    ", "with", "open", "(", "'performance.csv'", ",", "'a'", ")", "as", "fp", ":", "\n", "        ", "a", "=", "csv", ".", "writer", "(", "fp", ",", "delimiter", "=", "','", ")", "\n", "#['Data name','Nb estimators','System', 'Machine' , 'Platform' ,'memory used (Mb)' , 'number of CPU' ,' time spent (sec)' , 'time budget (sec)'],", "\n", "data", "=", "[", "\n", "#        [basename,n_estimators,platform.system(), platform.machine(),platform.platform() , float(\"{0:.2f}\".format(mem_used/1048576.0)) , str(psutil.cpu_count()) , float(\"{0:.2f}\".format(time_spent)) ,    time_budget ]", "\n", "[", "basename", ",", "n_estimators", ",", "platform", ".", "system", "(", ")", ",", "platform", ".", "machine", "(", ")", ",", "platform", ".", "platform", "(", ")", ",", "float", "(", "\"{0:.2f}\"", ".", "format", "(", "mem_used", "/", "1048576.0", ")", ")", ",", "float", "(", "\"{0:.2f}\"", ".", "format", "(", "time_spent", ")", ")", ",", "time_budget", "]", "\n", "]", "\n", "a", ".", "writerows", "(", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sumukhaithal6_pgdl.ingestion_program.model_utils.Sequential.__call__": [[23, 27], ["super().__call__", "tape.watch"], "methods", ["home.repos.pwc.inspect_result.sumukhaithal6_pgdl.ingestion_program.model_utils.Sequential.__call__"], ["  ", "def", "__call__", "(", "self", ",", "x", ",", "tape", "=", "False", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "if", "tape", ":", "\n", "      ", "tape", ".", "watch", "(", "x", ")", "\n", "", "return", "super", "(", "Sequential", ",", "self", ")", ".", "__call__", "(", "x", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sumukhaithal6_pgdl.ingestion_program.model_utils.wrap_layer": [[29, 36], ["wrapped_layer", "super().__call__"], "function", ["home.repos.pwc.inspect_result.sumukhaithal6_pgdl.ingestion_program.model_utils.Sequential.__call__"], ["", "", "def", "wrap_layer", "(", "layer_cls", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Wraps a layer for computing the jacobian wrt to intermediate layers.\"\"\"", "\n", "class", "wrapped_layer", "(", "layer_cls", ")", ":", "\n", "        ", "def", "__call__", "(", "self", ",", "x", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "            ", "self", ".", "_last_seen_input", "=", "x", "\n", "return", "super", "(", "wrapped_layer", ",", "self", ")", ".", "__call__", "(", "x", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "", "", "return", "wrapped_layer", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sumukhaithal6_pgdl.ingestion_program.model_utils.model_def_to_keras_sequential": [[38, 65], ["model_utils.Sequential", "dict", "dict.items", "getattr", "dict", "model_utils.wrap_layer", "model_utils.model_def_to_keras_sequential.parse_layer"], "function", ["home.repos.pwc.inspect_result.sumukhaithal6_pgdl.ingestion_program.model_utils.wrap_layer"], ["", "def", "model_def_to_keras_sequential", "(", "model_def", ")", ":", "\n", "    ", "\"\"\"Convert a model json to a Keras Sequential model.\n\n    Args:\n        model_def: A list of dictionaries, where each dict describes a layer to add\n            to the model.\n\n    Returns:\n        A Keras Sequential model with the required architecture.\n    \"\"\"", "\n", "\n", "def", "_cast_to_integer_if_possible", "(", "dct", ")", ":", "\n", "        ", "dct", "=", "dict", "(", "dct", ")", "\n", "for", "k", ",", "v", "in", "dct", ".", "items", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "v", ",", "float", ")", "and", "v", ".", "is_integer", "(", ")", ":", "\n", "                ", "dct", "[", "k", "]", "=", "int", "(", "v", ")", "\n", "", "", "return", "dct", "\n", "\n", "", "def", "parse_layer", "(", "layer_def", ")", ":", "\n", "        ", "layer_cls", "=", "getattr", "(", "tf", ".", "keras", ".", "layers", ",", "layer_def", "[", "'layer_name'", "]", ")", "\n", "# layer_cls = wrap_layer(layer_cls)", "\n", "kwargs", "=", "dict", "(", "layer_def", ")", "\n", "del", "kwargs", "[", "'layer_name'", "]", "\n", "return", "wrap_layer", "(", "layer_cls", ",", "**", "_cast_to_integer_if_possible", "(", "kwargs", ")", ")", "\n", "# return layer_cls(**_cast_to_integer_if_possible(kwargs))", "\n", "\n", "", "return", "Sequential", "(", "[", "parse_layer", "(", "l", ")", "for", "l", "in", "model_def", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sumukhaithal6_pgdl.ingestion_program.model_utils.get_jacobian": [[67, 79], ["tensorflow.function", "enumerate", "tensorflow.GradientTape", "model", "tape.batch_jacobian"], "function", ["None"], ["", "@", "tf", ".", "function", "(", ")", "\n", "def", "get_jacobian", "(", "model", ",", "inputs", ")", ":", "\n", "    ", "\"\"\"Get jacobians with respect to intermediate layers.\"\"\"", "\n", "with", "tf", ".", "GradientTape", "(", "persistent", "=", "True", ")", "as", "tape", ":", "\n", "        ", "out", "=", "model", "(", "inputs", ",", "tape", "=", "tape", ")", "\n", "", "dct", "=", "{", "}", "\n", "for", "i", ",", "l", "in", "enumerate", "(", "model", ".", "layers", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "dct", "[", "i", "]", "=", "tape", ".", "batch_jacobian", "(", "out", ",", "l", ".", "_last_seen_input", ")", "\n", "", "except", "AttributeError", ":", "# no _last_seen_input, layer not wrapped (ex: flatten)", "\n", "            ", "dct", "[", "i", "]", "=", "None", "\n", "", "", "return", "dct", "\n", "\n"]], "home.repos.pwc.inspect_result.sumukhaithal6_pgdl.runner_up_solution.complexity.complexity": [[27, 174], ["enumerate", "score.numpy.numpy", "images.numpy.numpy", "tensorflow.convert_to_tensor", "model", "dataset.batch", "tensorflow.nn.softmax", "tensorflow.image.flip_left_right", "tensorflow.image.central_crop", "tensorflow.image.resize_with_pad", "tensorflow.image.sobel_edges", "tensorflow.image.adjust_brightness", "complexity.complexity.random_erase_np_v2"], "function", ["None"], ["def", "complexity", "(", "model", ",", "dataset", ")", ":", "\n", "\n", "    ", "score", "=", "0.0", "\n", "\n", "def", "random_erase_np_v2", "(", "images", ",", "probability", "=", "1", ",", "sl", "=", "0.02", ",", "sh", "=", "0.4", ",", "r1", "=", "0.3", ")", ":", "\n", "        ", "images", "=", "images", ".", "numpy", "(", ")", "\n", "res", "=", "[", "]", "\n", "for", "img", "in", "images", ":", "\n", "            ", "height", "=", "img", ".", "shape", "[", "0", "]", "\n", "width", "=", "img", ".", "shape", "[", "1", "]", "\n", "channel", "=", "img", ".", "shape", "[", "2", "]", "\n", "area", "=", "width", "*", "height", "\n", "\n", "erase_area_low_bound", "=", "np", ".", "round", "(", "np", ".", "sqrt", "(", "sl", "*", "area", "*", "r1", ")", ")", ".", "astype", "(", "np", ".", "int", ")", "\n", "erase_area_up_bound", "=", "np", ".", "round", "(", "np", ".", "sqrt", "(", "(", "sh", "*", "area", ")", "/", "r1", ")", ")", ".", "astype", "(", "np", ".", "int", ")", "\n", "if", "erase_area_up_bound", "<", "height", ":", "\n", "                ", "h_upper_bound", "=", "erase_area_up_bound", "\n", "", "else", ":", "\n", "                ", "h_upper_bound", "=", "height", "\n", "", "if", "erase_area_up_bound", "<", "width", ":", "\n", "                ", "w_upper_bound", "=", "erase_area_up_bound", "\n", "", "else", ":", "\n", "                ", "w_upper_bound", "=", "width", "\n", "\n", "", "h", "=", "np", ".", "random", ".", "randint", "(", "erase_area_low_bound", ",", "h_upper_bound", ")", "\n", "w", "=", "np", ".", "random", ".", "randint", "(", "erase_area_low_bound", ",", "w_upper_bound", ")", "\n", "\n", "x1", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "height", "+", "1", "-", "h", ")", "\n", "y1", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "width", "+", "1", "-", "w", ")", "\n", "\n", "x1", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "height", "-", "h", ")", "\n", "y1", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "width", "-", "w", ")", "\n", "# img[x1:x1+h, y1:y1+w, :] = np.random.randint(0, 255, size=(h, w, channel)).astype(np.uint8)", "\n", "img", "[", "x1", ":", "x1", "+", "h", ",", "y1", ":", "y1", "+", "w", ",", ":", "]", "=", "np", ".", "zeros", "(", "shape", "=", "(", "h", ",", "w", ",", "channel", ")", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "\n", "res", ".", "append", "(", "img", ")", "\n", "\n", "", "return", "tf", ".", "convert_to_tensor", "(", "res", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "\n", "", "@", "tf", ".", "function", "\n", "def", "predict", "(", "x", ")", ":", "\n", "        ", "logits", "=", "model", "(", "x", ")", "\n", "return", "logits", "\n", "\n", "", "batch_size", "=", "64", "\n", "MAX_INDEX", "=", "200", "\n", "grayscale", "=", "False", "\n", "for", "index", ",", "(", "x", ",", "y", ")", "in", "enumerate", "(", "dataset", ".", "batch", "(", "batch_size", ")", ")", ":", "\n", "\n", "        ", "logits_orig", "=", "tf", ".", "nn", ".", "softmax", "(", "predict", "(", "x", ")", ",", "axis", "=", "1", ")", "\n", "\n", "if", "(", "tf", ".", "shape", "(", "x", ")", "[", "-", "1", "]", "==", "1", ")", ":", "\n", "            ", "grayscale", "=", "True", "\n", "\n", "", "x1", "=", "tf", ".", "image", ".", "flip_left_right", "(", "x", ")", "\n", "\n", "if", "grayscale", ":", "\n", "            ", "x2", "=", "tf", ".", "image", ".", "rgb_to_grayscale", "(", "tf", ".", "image", ".", "random_saturation", "(", "tf", ".", "image", ".", "grayscale_to_rgb", "(", "x", ")", ",", "0.6", ",", "1.6", ")", ")", "\n", "", "else", ":", "\n", "            ", "x2", "=", "tf", ".", "image", ".", "random_saturation", "(", "x", ",", "0.6", ",", "1.6", ")", "\n", "\n", "", "x3", "=", "tf", ".", "image", ".", "central_crop", "(", "x", ",", "0.9", ")", "\n", "x3", "=", "tf", ".", "image", ".", "resize_with_pad", "(", "x3", ",", "tf", ".", "shape", "(", "x", ")", "[", "1", "]", ",", "tf", ".", "shape", "(", "x", ")", "[", "2", "]", ")", "\n", "\n", "x4", "=", "tf", ".", "image", ".", "sobel_edges", "(", "x", ")", "\n", "x4", "=", "x4", "[", "...", ",", "1", "]", "/", "4", "+", "0.5", "\n", "# x4 = tf.image.flip_up_down(x)", "\n", "x5", "=", "tf", ".", "image", ".", "adjust_brightness", "(", "x", ",", "0.5", ")", "\n", "\n", "if", "grayscale", ":", "\n", "            ", "x6", "=", "tf", ".", "image", ".", "rgb_to_grayscale", "(", "tf", ".", "image", ".", "random_saturation", "(", "tf", ".", "image", ".", "grayscale_to_rgb", "(", "x1", ")", ",", "0.6", ",", "1.6", ")", ")", "\n", "", "else", ":", "\n", "            ", "x6", "=", "tf", ".", "image", ".", "random_saturation", "(", "x1", ",", "0.6", ",", "1.6", ")", "\n", "\n", "", "x7", "=", "random_erase_np_v2", "(", "x", ")", "\n", "# gnoise = tf.random.normal(shape=tf.shape(x), mean=0.0, stddev=0.5, dtype=tf.float32)", "\n", "# x = tf.image.central_crop(x,0.95)", "\n", "# x = tf.add(x,gnoise)", "\n", "# x = tf.image.random_saturation(x, 0.6, 1.6)", "\n", "# x = tf.image.resize_with_pad(x,32,32)", "\n", "\n", "logits_1", "=", "tf", ".", "nn", ".", "softmax", "(", "predict", "(", "x1", ")", ",", "axis", "=", "1", ")", "\n", "logits_2", "=", "tf", ".", "nn", ".", "softmax", "(", "predict", "(", "x2", ")", ",", "axis", "=", "1", ")", "\n", "logits_3", "=", "tf", ".", "nn", ".", "softmax", "(", "predict", "(", "x3", ")", ",", "axis", "=", "1", ")", "\n", "logits_4", "=", "tf", ".", "nn", ".", "softmax", "(", "predict", "(", "x4", ")", ",", "axis", "=", "1", ")", "\n", "logits_5", "=", "tf", ".", "nn", ".", "softmax", "(", "predict", "(", "x5", ")", ",", "axis", "=", "1", ")", "\n", "logits_6", "=", "tf", ".", "nn", ".", "softmax", "(", "predict", "(", "x6", ")", ",", "axis", "=", "1", ")", "\n", "logits_7", "=", "tf", ".", "nn", ".", "softmax", "(", "predict", "(", "x7", ")", ",", "axis", "=", "1", ")", "\n", "\n", "\n", "prob_1", "=", "tf", ".", "reduce_max", "(", "logits_1", ",", "axis", "=", "-", "1", ")", "\n", "pred_1", "=", "tf", ".", "cast", "(", "tf", ".", "argmax", "(", "logits_1", ",", "axis", "=", "-", "1", ")", ",", "tf", ".", "int32", ")", "\n", "\n", "prob_2", "=", "tf", ".", "reduce_max", "(", "logits_2", ",", "axis", "=", "-", "1", ")", "\n", "pred_2", "=", "tf", ".", "cast", "(", "tf", ".", "argmax", "(", "logits_2", ",", "axis", "=", "-", "1", ")", ",", "tf", ".", "int32", ")", "\n", "\n", "prob_3", "=", "tf", ".", "reduce_max", "(", "logits_3", ",", "axis", "=", "-", "1", ")", "\n", "pred_3", "=", "tf", ".", "cast", "(", "tf", ".", "argmax", "(", "logits_3", ",", "axis", "=", "-", "1", ")", ",", "tf", ".", "int32", ")", "\n", "\n", "prob_4", "=", "tf", ".", "reduce_max", "(", "logits_4", ",", "axis", "=", "-", "1", ")", "\n", "pred_4", "=", "tf", ".", "cast", "(", "tf", ".", "argmax", "(", "logits_4", ",", "axis", "=", "-", "1", ")", ",", "tf", ".", "int32", ")", "\n", "\n", "prob_5", "=", "tf", ".", "reduce_max", "(", "logits_5", ",", "axis", "=", "-", "1", ")", "\n", "pred_5", "=", "tf", ".", "cast", "(", "tf", ".", "argmax", "(", "logits_5", ",", "axis", "=", "-", "1", ")", ",", "tf", ".", "int32", ")", "\n", "\n", "prob_6", "=", "tf", ".", "reduce_max", "(", "logits_6", ",", "axis", "=", "-", "1", ")", "\n", "pred_6", "=", "tf", ".", "cast", "(", "tf", ".", "argmax", "(", "logits_6", ",", "axis", "=", "-", "1", ")", ",", "tf", ".", "int32", ")", "\n", "\n", "prob_7", "=", "tf", ".", "reduce_max", "(", "logits_7", ",", "axis", "=", "-", "1", ")", "\n", "pred_7", "=", "tf", ".", "cast", "(", "tf", ".", "argmax", "(", "logits_7", ",", "axis", "=", "-", "1", ")", ",", "tf", ".", "int32", ")", "\n", "# # score += tf.nn.softmax_cross_entropy_with_logits(labels=y, logits=logits_1)", "\n", "prob_orig", "=", "tf", ".", "reduce_max", "(", "logits_orig", ",", "axis", "=", "-", "1", ")", "\n", "pred_orig", "=", "tf", ".", "cast", "(", "tf", ".", "argmax", "(", "logits_orig", ",", "axis", "=", "-", "1", ")", ",", "tf", ".", "int32", ")", "\n", "\n", "for", "idx", "in", "(", "range", "(", "len", "(", "pred_orig", ")", ")", ")", ":", "\n", "            ", "if", "pred_orig", "[", "idx", "]", "==", "pred_1", "[", "idx", "]", ":", "\n", "                ", "score", "+=", "(", "tf", ".", "abs", "(", "prob_orig", "[", "idx", "]", "-", "prob_1", "[", "idx", "]", ")", ")", "\n", "", "else", ":", "\n", "                ", "score", "+=", "6", "\n", "", "if", "pred_orig", "[", "idx", "]", "==", "pred_2", "[", "idx", "]", ":", "\n", "                ", "score", "+=", "(", "tf", ".", "abs", "(", "prob_orig", "[", "idx", "]", "-", "prob_2", "[", "idx", "]", ")", ")", "\n", "", "else", ":", "\n", "                ", "score", "+=", "1", "\n", "", "if", "pred_orig", "[", "idx", "]", "==", "pred_3", "[", "idx", "]", ":", "\n", "                ", "score", "+=", "(", "tf", ".", "abs", "(", "prob_orig", "[", "idx", "]", "-", "prob_3", "[", "idx", "]", ")", ")", "\n", "", "else", ":", "\n", "                ", "score", "+=", "2", "\n", "", "if", "pred_orig", "[", "idx", "]", "==", "pred_4", "[", "idx", "]", ":", "\n", "                ", "score", "+=", "(", "tf", ".", "abs", "(", "prob_orig", "[", "idx", "]", "-", "prob_4", "[", "idx", "]", ")", ")", "\n", "", "else", ":", "\n", "                ", "score", "+=", "3", "\n", "", "if", "pred_orig", "[", "idx", "]", "==", "pred_5", "[", "idx", "]", ":", "\n", "                ", "score", "+=", "(", "tf", ".", "abs", "(", "prob_orig", "[", "idx", "]", "-", "prob_5", "[", "idx", "]", ")", ")", "\n", "", "else", ":", "\n", "                ", "score", "+=", "1", "\n", "", "if", "pred_orig", "[", "idx", "]", "==", "pred_6", "[", "idx", "]", ":", "\n", "                ", "score", "+=", "(", "tf", ".", "abs", "(", "prob_orig", "[", "idx", "]", "-", "prob_6", "[", "idx", "]", ")", ")", "\n", "", "else", ":", "\n", "                ", "score", "+=", "12", "\n", "", "if", "pred_orig", "[", "idx", "]", "==", "pred_7", "[", "idx", "]", ":", "\n", "                ", "score", "+=", "(", "tf", ".", "abs", "(", "prob_orig", "[", "idx", "]", "-", "prob_7", "[", "idx", "]", ")", ")", "\n", "", "else", ":", "\n", "                ", "score", "+=", "2", "\n", "", "", "if", "index", "==", "MAX_INDEX", ":", "\n", "            ", "break", "\n", "", "", "score", "=", "score", ".", "numpy", "(", ")", "\n", "return", "-", "score", "\n", "\n"]]}